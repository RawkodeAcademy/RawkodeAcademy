WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 76384ab7-ba27-4501-b85d-888d60326d65
Created: 2025-04-29T12:26:30.058Z
Duration: 6935.819
Channels: 1

00:00:03.760 --> 00:00:06.560
<v Speaker 0>In the shadows of the screen where the

00:00:06.560 --> 00:00:10.800
<v Speaker 0>poet's unseen dagger flows like a stream automated

00:00:10.800 --> 00:00:12.160
<v Speaker 0>on our dream.

00:00:12.320 --> 00:00:13.679
<v Speaker 0>Beds and bites align,

00:00:28.760 --> 00:00:31.480
<v Speaker 0>stress in this

00:00:31.480 --> 00:00:32.520
<v Speaker 0>digital

00:00:32.520 --> 00:00:33.399
<v Speaker 0>land.

00:00:33.559 --> 00:00:28.760
<v Speaker 0>Dagger testing every

00:00:35.000 --> 00:00:37.400
<v Speaker 0>Open your mess and takes the stage marks

00:00:37.400 --> 00:00:39.480
<v Speaker 0>vision in the cage, identity

00:00:39.879 --> 00:00:41.795
<v Speaker 0>to engage Kubernetes

00:00:41.795 --> 00:00:45.475
<v Speaker 0>in the rage. Multitenants find their place in

00:00:45.475 --> 00:00:46.915
<v Speaker 0>this coded space,

00:00:47.315 --> 00:00:49.875
<v Speaker 0>managing with grace, open your ness, and sets

00:00:49.875 --> 00:00:50.435
<v Speaker 0>the pace.

00:01:52.460 --> 00:01:55.659
<v Speaker 1>Alright. Let's try this attempt number.

00:01:55.820 --> 00:01:58.540
<v Speaker 1>Mark's probably been keeping count, raging at me.

00:01:58.540 --> 00:01:59.580
<v Speaker 1>26,

00:01:59.580 --> 00:02:00.460
<v Speaker 1>I think.

00:02:00.860 --> 00:02:01.820
<v Speaker 1>I'm

00:02:01.820 --> 00:02:04.780
<v Speaker 1>not sure what's happened. The streaming software that

00:02:04.780 --> 00:02:07.065
<v Speaker 1>I use will not let me go to

00:02:07.065 --> 00:02:10.025
<v Speaker 1>the prescheduled event, which is very frustrating. I

00:02:10.025 --> 00:02:12.425
<v Speaker 1>tried everything that I could, even hooking up

00:02:12.425 --> 00:02:13.865
<v Speaker 1>custom RTMP.

00:02:14.425 --> 00:02:16.985
<v Speaker 1>That event just is not working. So apologies,

00:02:16.985 --> 00:02:18.185
<v Speaker 1>everyone. Thank you for your patience.

00:02:19.110 --> 00:02:21.030
<v Speaker 1>But I'm your host, David Flanagan. This is

00:02:21.030 --> 00:02:22.950
<v Speaker 1>an episode of Rawkode live where we take

00:02:22.950 --> 00:02:23.590
<v Speaker 1>a look

00:02:23.910 --> 00:02:26.470
<v Speaker 1>at really cool open source software and the

00:02:26.470 --> 00:02:28.069
<v Speaker 1>cloud native ecosystem.

00:02:28.069 --> 00:02:30.550
<v Speaker 1>And today, we are continuing our mission to

00:02:30.550 --> 00:02:32.310
<v Speaker 1>Daggerize open source projects.

00:02:32.975 --> 00:02:34.895
<v Speaker 1>And today, I'm gonna be joined by Mark

00:02:34.895 --> 00:02:37.215
<v Speaker 1>Bernstein, and we're going to Daggerize

00:02:37.455 --> 00:02:40.255
<v Speaker 1>his open source project, OpenUnison.

00:02:41.215 --> 00:02:43.135
<v Speaker 1>Hey, Mark. How are you? I mean, you're

00:02:43.135 --> 00:02:44.575
<v Speaker 1>talking Good. How are doing? Now. Right?

00:02:48.070 --> 00:02:48.790
<v Speaker 1>Alright.

00:02:49.430 --> 00:02:51.830
<v Speaker 1>Let's dive straight into it and not keep

00:02:51.830 --> 00:02:53.190
<v Speaker 1>people waiting anymore.

00:02:53.270 --> 00:02:55.510
<v Speaker 1>Yeah. Let's do it. TLDR. Who are you?

00:02:55.510 --> 00:02:56.630
<v Speaker 1>What you've been up to, and what is

00:02:56.630 --> 00:02:57.430
<v Speaker 1>OpenUnison,

00:02:57.430 --> 00:02:57.910
<v Speaker 1>please?

00:02:58.310 --> 00:03:00.790
<v Speaker 2>So Mark Borschtien, CTO at Terminal Security.

00:03:01.275 --> 00:03:03.115
<v Speaker 2>I'm the author of OpenUnison.

00:03:03.115 --> 00:03:05.355
<v Speaker 2>OpenUnison does authentication,

00:03:05.355 --> 00:03:06.235
<v Speaker 2>authorization,

00:03:06.235 --> 00:03:07.755
<v Speaker 2>deep space as a service.

00:03:10.875 --> 00:03:12.315
<v Speaker 2>Might know me from

00:03:12.715 --> 00:03:15.355
<v Speaker 2>talking about Kubernetes or helping people out in

00:03:15.355 --> 00:03:15.675
<v Speaker 2>Slack.

00:03:16.480 --> 00:03:19.760
<v Speaker 2>I am also the coauthor of Kubernetes,

00:03:19.920 --> 00:03:22.640
<v Speaker 2>an enterprise guide, first and second edition, the

00:03:22.640 --> 00:03:24.879
<v Speaker 2>third edition next month. So keep an eye

00:03:24.879 --> 00:03:25.440
<v Speaker 2>on Amazon.

00:03:28.705 --> 00:03:30.465
<v Speaker 2>Great stuff. GitLab,

00:03:30.545 --> 00:03:32.145
<v Speaker 2>OPA, Gatekeeper,

00:03:32.545 --> 00:03:33.745
<v Speaker 2>OpenSearch,

00:03:36.705 --> 00:03:37.985
<v Speaker 2>you know, Vault,

00:03:38.065 --> 00:03:39.265
<v Speaker 2>vCluster,

00:03:39.265 --> 00:03:40.305
<v Speaker 2>Pulumi.

00:03:40.465 --> 00:03:41.105
<v Speaker 2>It's

00:03:41.265 --> 00:03:43.505
<v Speaker 2>it it it it it's a big update.

00:03:43.505 --> 00:03:45.239
<v Speaker 2>So even if you read one of the

00:03:45.239 --> 00:03:46.280
<v Speaker 2>previous updates,

00:03:46.440 --> 00:03:48.440
<v Speaker 2>you're gonna want this one too. So, yeah,

00:03:48.440 --> 00:03:50.280
<v Speaker 2>all in it. And after today's session, you're

00:03:50.280 --> 00:03:52.280
<v Speaker 1>gonna be adding the Dagger chapter. Right?

00:03:53.560 --> 00:03:55.959
<v Speaker 2>I my publishers will murder me in my

00:03:55.959 --> 00:03:57.800
<v Speaker 2>sleep if I try to add any more

00:03:57.800 --> 00:03:59.905
<v Speaker 2>to this book, so then we'll hold that

00:03:59.905 --> 00:04:01.345
<v Speaker 2>one till the fourth edition.

00:04:02.385 --> 00:04:03.585
<v Speaker 1>Alright. No problem.

00:04:04.145 --> 00:04:06.385
<v Speaker 1>Okay. So today's mission is we're gonna take

00:04:06.385 --> 00:04:07.665
<v Speaker 1>your project OpenUnison,

00:04:07.665 --> 00:04:10.545
<v Speaker 1>which is a Kubernetes native identity

00:04:10.545 --> 00:04:11.825
<v Speaker 1>management multitenancy

00:04:11.825 --> 00:04:13.505
<v Speaker 1>kind of bits and pieces

00:04:14.010 --> 00:04:16.410
<v Speaker 1>software. It's written in Java. It's very cool.

00:04:16.410 --> 00:04:18.170
<v Speaker 1>We've done a whole session on this before.

00:04:18.329 --> 00:04:20.010
<v Speaker 1>Feel free to go to Rawkode.live

00:04:20.010 --> 00:04:21.850
<v Speaker 1>and just search for OpenUnison and you will

00:04:21.850 --> 00:04:24.169
<v Speaker 1>find that demo. Today,

00:04:24.169 --> 00:04:26.090
<v Speaker 1>what we're gonna do is just Dagger to

00:04:26.090 --> 00:04:28.570
<v Speaker 1>provision an ephemeral Kubernetes

00:04:28.570 --> 00:04:28.970
<v Speaker 1>cluster.

00:04:29.945 --> 00:04:32.345
<v Speaker 1>We're going to deploy OpenUnison to it with

00:04:32.345 --> 00:04:33.465
<v Speaker 1>its Helm chart,

00:04:33.945 --> 00:04:35.305
<v Speaker 1>and then we're gonna start

00:04:35.545 --> 00:04:37.465
<v Speaker 1>modifying some of those values in the Helm

00:04:37.465 --> 00:04:39.465
<v Speaker 1>chart, which modifies the deployment in some way,

00:04:39.465 --> 00:04:40.505
<v Speaker 1>and we're gonna run

00:04:40.825 --> 00:04:43.225
<v Speaker 2>tests against it. We're gonna build assertions all

00:04:43.225 --> 00:04:45.860
<v Speaker 2>inside of our Dagger pipeline, something that I

00:04:45.860 --> 00:04:49.060
<v Speaker 1>feel you will find infinitely valuable, I hope,

00:04:49.540 --> 00:04:51.540
<v Speaker 1>with your project and testing it, and we're

00:04:51.540 --> 00:04:53.460
<v Speaker 1>gonna show everyone how to do it live

00:04:53.460 --> 00:04:55.620
<v Speaker 1>as they're nowhere twenty two minutes in, and

00:04:55.620 --> 00:04:58.075
<v Speaker 1>we've been talking for less than three. So

00:04:59.035 --> 00:05:01.355
<v Speaker 1>I'm so stressed. I know. I'm excited because

00:05:01.355 --> 00:05:02.235
<v Speaker 2>I've never

00:05:02.475 --> 00:05:03.755
<v Speaker 2>like, I conceptually

00:05:03.755 --> 00:05:05.195
<v Speaker 2>know what Dagger is,

00:05:05.755 --> 00:05:07.355
<v Speaker 2>but I've never used it. So this is

00:05:07.355 --> 00:05:08.315
<v Speaker 2>gonna be a lot of fun for me.

00:05:08.315 --> 00:05:09.115
<v Speaker 2>I get to learn something.

00:05:10.010 --> 00:05:12.970
<v Speaker 1>Awesome. Well, I am happy to be your

00:05:12.970 --> 00:05:15.210
<v Speaker 1>muse and guide for today, which is now

00:05:15.210 --> 00:05:17.370
<v Speaker 1>the third time I've said that. So, anyway

00:05:19.370 --> 00:05:20.730
<v Speaker 1>and if you didn't hear all of that

00:05:20.730 --> 00:05:22.490
<v Speaker 1>custom song at the start, I'm gonna upload

00:05:22.490 --> 00:05:24.490
<v Speaker 1>them later. Mark has now heard it 14

00:05:24.490 --> 00:05:24.810
<v Speaker 1>times.

00:05:25.295 --> 00:05:25.935
<v Speaker 1>So

00:05:27.215 --> 00:05:28.335
<v Speaker 1>here's my screen.

00:05:29.295 --> 00:05:31.615
<v Speaker 1>I have the OpenUnison website here. So if

00:05:31.615 --> 00:05:33.055
<v Speaker 1>people wanna learn more, you can check out

00:05:33.055 --> 00:05:35.375
<v Speaker 1>OpenUnison.GitHub.io.

00:05:35.615 --> 00:05:37.455
<v Speaker 1>It also has everything that we need to

00:05:37.455 --> 00:05:39.295
<v Speaker 1>understand how to deploy it, although I do

00:05:39.295 --> 00:05:41.560
<v Speaker 1>have you. So we're probably not gonna need

00:05:41.560 --> 00:05:43.000
<v Speaker 1>to docs that much. Right?

00:05:43.720 --> 00:05:44.440
<v Speaker 2>You

00:05:44.920 --> 00:05:45.480
<v Speaker 2>know,

00:05:47.160 --> 00:05:49.400
<v Speaker 2>I'm I'm here so you can ridicule how

00:05:49.400 --> 00:05:51.160
<v Speaker 2>bad the documentation is.

00:05:52.520 --> 00:05:54.600
<v Speaker 1>That is not today's mission. Don't you worry.

00:05:55.985 --> 00:05:58.225
<v Speaker 1>What else do we have here? We have

00:05:58.225 --> 00:05:59.505
<v Speaker 1>the terminal security

00:05:59.985 --> 00:06:00.785
<v Speaker 1>OpenUnison

00:06:00.785 --> 00:06:02.625
<v Speaker 1>repository. So if you wanna contribute to the

00:06:02.625 --> 00:06:04.785
<v Speaker 1>code, everything is here and open source. That

00:06:04.785 --> 00:06:06.625
<v Speaker 1>is Java, I warn you. And that's the

00:06:06.625 --> 00:06:08.385
<v Speaker 1>only Java pop I'm gonna take today. I

00:06:08.385 --> 00:06:08.625
<v Speaker 1>promise.

00:06:10.940 --> 00:06:12.620
<v Speaker 2>I'll take it right on the right on

00:06:12.620 --> 00:06:14.140
<v Speaker 2>the chest. You you you can try and

00:06:14.140 --> 00:06:16.060
<v Speaker 2>land those body blows against Java. I'll take

00:06:16.060 --> 00:06:18.060
<v Speaker 2>those all day. I've gotta be honest. I

00:06:18.060 --> 00:06:19.980
<v Speaker 1>mean, Java these days is much better in

00:06:19.980 --> 00:06:22.700
<v Speaker 1>container based applications. Like, the first like, if

00:06:22.700 --> 00:06:24.380
<v Speaker 1>you went back five years, I'd say don't

00:06:24.380 --> 00:06:26.460
<v Speaker 1>do it ever. I think now it's

00:06:26.675 --> 00:06:28.035
<v Speaker 1>it's a lot easier.

00:06:28.595 --> 00:06:29.155
<v Speaker 1>Yeah.

00:06:30.035 --> 00:06:30.835
<v Speaker 1>Maybe.

00:06:30.835 --> 00:06:33.155
<v Speaker 1>We can get into that later. We

00:06:33.155 --> 00:06:34.755
<v Speaker 1>also have the Dagger first here. We're gonna

00:06:34.755 --> 00:06:37.075
<v Speaker 1>go some preexisting modules for today's. We're not

00:06:37.075 --> 00:06:38.595
<v Speaker 1>gonna reinvent the wheel like we did in

00:06:38.595 --> 00:06:39.155
<v Speaker 1>the last session.

00:06:40.090 --> 00:06:42.250
<v Speaker 1>And we also have the Dagger documentation should

00:06:42.250 --> 00:06:43.930
<v Speaker 1>we need it. So we are all set.

00:06:43.930 --> 00:06:45.930
<v Speaker 1>We are all prepped, and we are good

00:06:45.930 --> 00:06:48.010
<v Speaker 1>to start building some Dagger

00:06:48.090 --> 00:06:48.650
<v Speaker 1>code.

00:06:50.170 --> 00:06:53.130
<v Speaker 1>So here's my terminal. I've already cloned the

00:06:53.130 --> 00:06:54.410
<v Speaker 1>OpenUnison repository,

00:06:56.045 --> 00:06:56.765
<v Speaker 1>and

00:06:58.125 --> 00:07:00.445
<v Speaker 1>we are gonna create a new Dagger

00:07:01.565 --> 00:07:02.525
<v Speaker 1>module.

00:07:02.845 --> 00:07:03.325
<v Speaker 1>Is

00:07:05.245 --> 00:07:06.685
<v Speaker 1>that transparency really annoying?

00:07:08.009 --> 00:07:10.490
<v Speaker 2>No. I'm not sure why you're starting it

00:07:10.490 --> 00:07:12.250
<v Speaker 2>in the OpenUnison.

00:07:13.449 --> 00:07:15.210
<v Speaker 1>Is that not where the Helm chart is?

00:07:15.770 --> 00:07:19.210
<v Speaker 2>No. So No. The actual Helm charts

00:07:19.835 --> 00:07:20.715
<v Speaker 2>are

00:07:22.634 --> 00:07:30.955
<v Speaker 2>GitHub.com/OpenUnison/helmcharts.

00:07:34.120 --> 00:07:35.639
<v Speaker 2>Do I have the right yes. So here

00:07:35.639 --> 00:07:36.920
<v Speaker 2>are the Helm charts.

00:07:37.960 --> 00:07:39.880
<v Speaker 2>And I lost you. Where'd you go?

00:07:41.080 --> 00:07:42.200
<v Speaker 1>Don't leave me.

00:07:42.440 --> 00:07:44.040
<v Speaker 2>Here we go. Private chat.

00:07:46.120 --> 00:07:48.199
<v Speaker 2>I'm gonna send that to you. Yeah. So

00:07:48.199 --> 00:07:50.120
<v Speaker 2>we

00:07:49.315 --> 00:07:51.955
<v Speaker 2>we broke up the Helm chart. So we

00:07:51.955 --> 00:07:54.595
<v Speaker 2>have customers that run on Kubernetes. We also

00:07:54.595 --> 00:07:56.595
<v Speaker 2>have lot of customers that run-in

00:07:56.755 --> 00:07:58.755
<v Speaker 2>kind of a typical legacy

00:07:59.555 --> 00:08:01.395
<v Speaker 2>VM IT infrastructure.

00:08:02.400 --> 00:08:04.240
<v Speaker 2>So we decided to

00:08:05.680 --> 00:08:07.360
<v Speaker 2>break it up a little bit.

00:08:07.920 --> 00:08:09.120
<v Speaker 2>So what you were

00:08:12.080 --> 00:08:14.080
<v Speaker 2>the the actual OpenUnison

00:08:14.995 --> 00:08:17.795
<v Speaker 2>GitHub repo has the source code for how

00:08:17.795 --> 00:08:19.395
<v Speaker 2>OpenUnison works.

00:08:19.795 --> 00:08:21.635
<v Speaker 2>Like, it's that base platform,

00:08:22.195 --> 00:08:24.515
<v Speaker 2>but the Helm charts are how everything gets

00:08:24.515 --> 00:08:25.075
<v Speaker 2>deployed.

00:08:27.030 --> 00:08:28.389
<v Speaker 1>I'm gonna remove that,

00:08:29.030 --> 00:08:30.470
<v Speaker 1>opacity because it's gonna

00:08:31.110 --> 00:08:32.470
<v Speaker 1>I mean, it works for me, but I'm

00:08:32.470 --> 00:08:35.029
<v Speaker 1>worried that it's just gonna look absolutely dreadful,

00:08:36.630 --> 00:08:39.110
<v Speaker 1>for everyone. Oh, you mean on the, terminal?

00:08:39.350 --> 00:08:39.589
<v Speaker 1>Yeah.

00:08:40.434 --> 00:08:42.195
<v Speaker 2>Yeah. It's a little distracting.

00:08:42.274 --> 00:08:42.995
<v Speaker 2>Yeah.

00:08:46.754 --> 00:08:48.355
<v Speaker 2>Thought I thought it was pretty cool because

00:08:48.355 --> 00:08:50.915
<v Speaker 2>I could see the documentation behind it, but

00:08:51.394 --> 00:08:53.555
<v Speaker 2>with all the text, it's

00:08:54.810 --> 00:08:57.050
<v Speaker 2>it's it's a little distracting.

00:08:59.850 --> 00:09:00.810
<v Speaker 1>There we go.

00:09:01.850 --> 00:09:02.649
<v Speaker 1>Okay.

00:09:03.690 --> 00:09:05.209
<v Speaker 1>So we have the helm charts.

00:09:07.705 --> 00:09:09.065
<v Speaker 1>Yeah. This is the Helm charts. So which

00:09:09.145 --> 00:09:10.265
<v Speaker 1>what are we deploying

00:09:10.745 --> 00:09:12.505
<v Speaker 1>first? Where are we where are we deploying?

00:09:13.545 --> 00:09:14.265
<v Speaker 2>So

00:09:14.665 --> 00:09:16.825
<v Speaker 2>the way that we like to deploy

00:09:17.145 --> 00:09:18.345
<v Speaker 2>so OpenUnison,

00:09:18.345 --> 00:09:19.625
<v Speaker 2>when you deploy OpenUnison,

00:09:20.199 --> 00:09:21.079
<v Speaker 2>standard,

00:09:21.079 --> 00:09:23.560
<v Speaker 2>like, I'm scaling up a new cluster, wanna

00:09:23.560 --> 00:09:26.519
<v Speaker 2>deploy it. We have an executable

00:09:26.519 --> 00:09:27.959
<v Speaker 2>called OU control.

00:09:28.199 --> 00:09:30.279
<v Speaker 2>That's really just three Helm charts and a

00:09:30.279 --> 00:09:31.079
<v Speaker 2>trench coat.

00:09:33.560 --> 00:09:33.880
<v Speaker 0>The

00:09:35.895 --> 00:09:37.975
<v Speaker 2>problem with using that that

00:09:38.055 --> 00:09:40.055
<v Speaker 2>binary is that now you have to import

00:09:40.055 --> 00:09:42.615
<v Speaker 2>that binary. Right? And so if you're using

00:09:42.615 --> 00:09:45.175
<v Speaker 2>a CICD system or, you know, some kind

00:09:45.175 --> 00:09:47.095
<v Speaker 2>of automation system, you want something that's a

00:09:47.095 --> 00:09:49.255
<v Speaker 2>little more native, and Helm is native to

00:09:49.255 --> 00:09:50.250
<v Speaker 2>everything. Right?

00:09:51.130 --> 00:09:51.690
<v Speaker 2>So

00:09:52.010 --> 00:09:52.890
<v Speaker 2>there are

00:09:54.970 --> 00:09:57.850
<v Speaker 2>four charts I think we need to deploy

00:09:57.850 --> 00:09:58.810
<v Speaker 2>with a

00:09:59.850 --> 00:10:01.690
<v Speaker 2>in in this mechanism.

00:10:02.010 --> 00:10:03.290
<v Speaker 2>Mhmm. And the reason why I say there

00:10:03.290 --> 00:10:05.475
<v Speaker 2>are four charts so the first chart you

00:10:05.475 --> 00:10:07.395
<v Speaker 2>deploy is OpenUnison operator.

00:10:07.475 --> 00:10:10.275
<v Speaker 2>That includes all the CRDs that we use,

00:10:10.915 --> 00:10:12.035
<v Speaker 2>the operator,

00:10:13.075 --> 00:10:14.675
<v Speaker 2>and really that base platform.

00:10:15.875 --> 00:10:16.595
<v Speaker 2>Then

00:10:16.995 --> 00:10:17.795
<v Speaker 2>we deploy,

00:10:18.820 --> 00:10:20.500
<v Speaker 2>excuse me, Orchestra.

00:10:21.060 --> 00:10:23.620
<v Speaker 2>And so that actually deploys OpenUnison.

00:10:23.700 --> 00:10:25.779
<v Speaker 2>So think of that as your platform. That's

00:10:25.860 --> 00:10:27.220
<v Speaker 2>you know, OpenUnison

00:10:27.220 --> 00:10:27.940
<v Speaker 2>is

00:10:28.100 --> 00:10:30.180
<v Speaker 2>kind of a blank slate for identity based

00:10:30.180 --> 00:10:30.740
<v Speaker 2>applications.

00:10:33.154 --> 00:10:35.154
<v Speaker 2>You create your application

00:10:35.795 --> 00:10:38.514
<v Speaker 2>by assembling a bunch of CRDs in YAML.

00:10:38.675 --> 00:10:41.475
<v Speaker 2>That's what Orchestra login portal is. So when

00:10:41.475 --> 00:10:43.074
<v Speaker 2>you go to log in to your cluster

00:10:43.074 --> 00:10:45.074
<v Speaker 2>and you see the badge for the the

00:10:45.074 --> 00:10:47.480
<v Speaker 2>dashboard and you see the badge for your

00:10:47.480 --> 00:10:50.120
<v Speaker 2>token and any other applications that you integrate,

00:10:50.360 --> 00:10:52.920
<v Speaker 2>that's coming from the orchestra login portal chart.

00:10:53.639 --> 00:10:54.519
<v Speaker 2>Finally,

00:10:56.360 --> 00:10:59.079
<v Speaker 2>since we're using k threes and it's a

00:10:59.079 --> 00:11:01.480
<v Speaker 2>managed cluster, if you're gonna actually SSO

00:11:01.480 --> 00:11:04.885
<v Speaker 2>into the cluster, which ultimately, that's what OpenUnison

00:11:04.885 --> 00:11:07.285
<v Speaker 2>is for, you're then gonna deploy

00:11:08.644 --> 00:11:11.605
<v Speaker 2>the Orchestra Kubo IDC proxy.

00:11:12.325 --> 00:11:13.925
<v Speaker 2>The good thing is this all uses one

00:11:13.925 --> 00:11:16.860
<v Speaker 2>YAML file. It's just the the reason why

00:11:16.860 --> 00:11:18.060
<v Speaker 2>we break it up is to make it

00:11:18.060 --> 00:11:19.980
<v Speaker 2>a little easier to manage. And then especially

00:11:19.980 --> 00:11:21.740
<v Speaker 2>with integration systems,

00:11:22.460 --> 00:11:24.300
<v Speaker 2>because there's a lot going on

00:11:24.700 --> 00:11:28.060
<v Speaker 2>with Helm, you can tell Helm, hey. Wait

00:11:28.060 --> 00:11:29.420
<v Speaker 2>for the pods to finish.

00:11:30.075 --> 00:11:31.995
<v Speaker 2>Wait for all the jobs to finish.

00:11:32.235 --> 00:11:34.395
<v Speaker 2>And in the OU control binary,

00:11:34.555 --> 00:11:36.875
<v Speaker 2>we kinda cheat a little because we don't

00:11:36.875 --> 00:11:39.195
<v Speaker 2>wait for all the pods to finish before

00:11:39.195 --> 00:11:40.795
<v Speaker 2>we move on to the next one because

00:11:40.795 --> 00:11:42.395
<v Speaker 2>we know when we're at a point to

00:11:42.395 --> 00:11:42.715
<v Speaker 2>move on.

00:11:43.529 --> 00:11:46.010
<v Speaker 2>But any kind of IAC

00:11:46.010 --> 00:11:46.570
<v Speaker 2>tool,

00:11:47.050 --> 00:11:49.050
<v Speaker 2>that doesn't really work super well.

00:11:49.370 --> 00:11:52.089
<v Speaker 2>So we added a couple of flags to

00:11:52.089 --> 00:11:54.089
<v Speaker 2>be able to say, okay. We're gonna make

00:11:54.089 --> 00:11:54.730
<v Speaker 2>sure

00:11:55.209 --> 00:11:55.529
<v Speaker 2>that

00:11:56.055 --> 00:11:58.215
<v Speaker 2>we're not gonna be done with this help

00:11:58.215 --> 00:12:01.175
<v Speaker 2>chart until everything is rolled out. So that

00:12:01.175 --> 00:12:03.175
<v Speaker 2>way, the IAC tools have something to key

00:12:03.175 --> 00:12:03.975
<v Speaker 2>off of.

00:12:06.215 --> 00:12:06.535
<v Speaker 1>Okay.

00:12:08.520 --> 00:12:10.840
<v Speaker 1>So let's just start making some progress on

00:12:10.840 --> 00:12:12.360
<v Speaker 1>this. I think there's value to both routes

00:12:12.360 --> 00:12:14.520
<v Speaker 1>here. Let's start with deploying with the Helm

00:12:14.520 --> 00:12:16.680
<v Speaker 1>route. But, you know, using all your control,

00:12:16.680 --> 00:12:17.880
<v Speaker 1>I don't think it's gonna be that difficult

00:12:17.880 --> 00:12:20.680
<v Speaker 1>either, so we can also do that. But

00:12:20.680 --> 00:12:22.825
<v Speaker 1>first, we have to create a new Dagger

00:12:22.825 --> 00:12:25.145
<v Speaker 1>module. Now I'm not gonna use Go today.

00:12:25.145 --> 00:12:26.585
<v Speaker 1>I thought I was using that earlier.

00:12:27.145 --> 00:12:28.905
<v Speaker 1>I'm gonna stick with TypeScript just because it's

00:12:28.905 --> 00:12:31.385
<v Speaker 1>what I'm more comfortable with. And when I

00:12:31.385 --> 00:12:32.745
<v Speaker 1>watched the last one, see me fighting with

00:12:32.745 --> 00:12:34.905
<v Speaker 1>Python. Let's not fight with Python today.

00:12:36.110 --> 00:12:38.830
<v Speaker 2>Fighting with snakes is bad. Yeah.

00:12:38.910 --> 00:12:41.070
<v Speaker 1>I couldn't even format the code properly. It

00:12:41.070 --> 00:12:41.950
<v Speaker 1>was awful.

00:12:45.150 --> 00:12:46.830
<v Speaker 1>Alright. So let's get this.

00:12:52.845 --> 00:12:54.605
<v Speaker 1>And I'm just gonna go check if we

00:12:54.605 --> 00:12:56.605
<v Speaker 1>have a helm

00:12:58.045 --> 00:12:58.445
<v Speaker 1>here.

00:13:00.310 --> 00:13:01.110
<v Speaker 1>We do.

00:13:03.430 --> 00:13:05.350
<v Speaker 1>Oh, we can actually use this module for

00:13:05.350 --> 00:13:07.510
<v Speaker 1>Helm. And I know there's actually there's a

00:13:07.510 --> 00:13:09.590
<v Speaker 1>lot, but this one does have a partner

00:13:09.590 --> 00:13:10.630
<v Speaker 1>logo. So

00:13:11.430 --> 00:13:13.430
<v Speaker 1>that to me says, trust it.

00:13:14.495 --> 00:13:16.495
<v Speaker 1>And I'm gonna copy that installation.

00:13:20.415 --> 00:13:21.695
<v Speaker 1>So I'll give you the bit of the

00:13:21.695 --> 00:13:24.575
<v Speaker 1>TLDR on what Dagger is as well just

00:13:24.575 --> 00:13:26.255
<v Speaker 1>since you're not that familiar.

00:13:27.720 --> 00:13:29.720
<v Speaker 1>It is an as code tool,

00:13:30.760 --> 00:13:33.720
<v Speaker 1>for doing CICD style workflows. Essentially,

00:13:33.720 --> 00:13:35.960
<v Speaker 1>built a DAG of commands that you wanna

00:13:35.960 --> 00:13:39.480
<v Speaker 1>run. All runs inside of containers, super cacheable,

00:13:39.720 --> 00:13:40.840
<v Speaker 1>very robust,

00:13:41.560 --> 00:13:42.120
<v Speaker 1>and

00:13:42.485 --> 00:13:45.125
<v Speaker 1>a joy and a pleasure to work with.

00:13:45.445 --> 00:13:47.845
<v Speaker 1>When we initialize a new Dagger project,

00:13:47.925 --> 00:13:49.445
<v Speaker 1>because this is TypeScript,

00:13:49.685 --> 00:13:51.605
<v Speaker 1>we're gonna get a Dagger JSON here that

00:13:51.605 --> 00:13:53.125
<v Speaker 1>just says this is where the Dagger code

00:13:53.125 --> 00:13:55.285
<v Speaker 1>lives and it's still using the TypeScript SDK.

00:13:56.180 --> 00:13:58.500
<v Speaker 1>And then inside of here, we have

00:13:59.779 --> 00:14:01.620
<v Speaker 1>oh, let's call it Helm charts just because

00:14:01.620 --> 00:14:03.460
<v Speaker 1>of the directory that we're in, but we

00:14:03.460 --> 00:14:05.460
<v Speaker 1>now have two functions.

00:14:06.339 --> 00:14:08.820
<v Speaker 1>These functions are written in TypeScript, obviously.

00:14:09.140 --> 00:14:10.575
<v Speaker 1>And if we come over here, we can

00:14:10.575 --> 00:14:11.535
<v Speaker 1>do Dagger

00:14:11.935 --> 00:14:13.295
<v Speaker 1>functions list,

00:14:16.495 --> 00:14:18.015
<v Speaker 1>and it'll tell us what functions we have

00:14:18.015 --> 00:14:20.575
<v Speaker 1>available, and we can execute one. Now looking

00:14:20.575 --> 00:14:21.375
<v Speaker 1>at the code here,

00:14:21.980 --> 00:14:24.460
<v Speaker 1>these are just wrapped in a annotation property

00:14:24.460 --> 00:14:27.180
<v Speaker 1>on TypeScript that says, okay. This is something

00:14:27.180 --> 00:14:28.780
<v Speaker 1>we want to expose as a function. It

00:14:28.780 --> 00:14:30.940
<v Speaker 1>grabs a container image and runs a command.

00:14:31.260 --> 00:14:33.660
<v Speaker 1>This one mounts a directory, sets a working

00:14:33.660 --> 00:14:35.660
<v Speaker 1>directory, and runs a graph across it as

00:14:35.660 --> 00:14:36.380
<v Speaker 1>well. So

00:14:37.154 --> 00:14:38.755
<v Speaker 1>nice fluent interface

00:14:38.755 --> 00:14:41.074
<v Speaker 1>makes building all of these different functions and

00:14:41.074 --> 00:14:42.755
<v Speaker 1>pipelines super simple.

00:14:43.475 --> 00:14:44.115
<v Speaker 1>And

00:14:44.995 --> 00:14:46.595
<v Speaker 1>why did I get a no?

00:14:51.100 --> 00:14:52.700
<v Speaker 1>I'm just being deaf, aren't I?

00:14:55.180 --> 00:14:56.780
<v Speaker 1>There we go. Trusted my history, and I

00:14:56.780 --> 00:14:58.300
<v Speaker 1>shouldn't have. So now we've got these two

00:14:58.300 --> 00:15:00.460
<v Speaker 1>functions, and we can do a Dagger call,

00:15:01.020 --> 00:15:01.580
<v Speaker 1>container

00:15:02.545 --> 00:15:04.545
<v Speaker 1>echo. Now this is going to run the

00:15:04.545 --> 00:15:06.065
<v Speaker 1>function. So what we expect to see here

00:15:06.065 --> 00:15:08.865
<v Speaker 1>is that it pulls Alpine, executes echo, and

00:15:08.865 --> 00:15:10.545
<v Speaker 1>it has a string argument

00:15:10.705 --> 00:15:12.865
<v Speaker 1>called string arc. So the first one is

00:15:12.865 --> 00:15:14.625
<v Speaker 1>gonna fail and tell us that we need

00:15:14.625 --> 00:15:15.425
<v Speaker 1>string

00:15:15.585 --> 00:15:16.065
<v Speaker 1>arc,

00:15:16.769 --> 00:15:18.290
<v Speaker 1>and I'll just say hi,

00:15:18.930 --> 00:15:19.570
<v Speaker 1>Mark.

00:15:20.370 --> 00:15:22.130
<v Speaker 1>All good? Is that making sense to you?

00:15:23.009 --> 00:15:25.889
<v Speaker 2>Where's the container running? Like, is this running

00:15:25.889 --> 00:15:28.050
<v Speaker 2>against the Kubernetes cluster? Is this running locally

00:15:28.050 --> 00:15:29.170
<v Speaker 2>against your Docker

00:15:29.525 --> 00:15:30.405
<v Speaker 2>daemon?

00:15:30.405 --> 00:15:32.725
<v Speaker 1>It's running locally against my Podman.

00:15:33.125 --> 00:15:35.685
<v Speaker 1>So what actually happens is that Dagger spins

00:15:35.685 --> 00:15:38.325
<v Speaker 1>up a BuildKit process with an API, and

00:15:38.325 --> 00:15:40.805
<v Speaker 1>we're communicating well with that BuildKit process, and

00:15:40.805 --> 00:15:43.045
<v Speaker 1>then it is running other BuildKit layers and

00:15:43.045 --> 00:15:44.165
<v Speaker 1>stuff in the behind the scenes.

00:15:44.870 --> 00:15:46.150
<v Speaker 2>Very cool. So

00:15:46.710 --> 00:15:48.550
<v Speaker 1>yeah. It is very, very cool.

00:15:49.270 --> 00:15:51.910
<v Speaker 1>So that's the quick baptism by fire there

00:15:51.910 --> 00:15:54.310
<v Speaker 1>for understanding what we want to do. Now

00:15:54.310 --> 00:15:55.590
<v Speaker 1>we need helm.

00:15:56.230 --> 00:15:57.350
<v Speaker 1>So we could

00:15:58.014 --> 00:15:58.894
<v Speaker 1>just say,

00:15:59.295 --> 00:16:00.735
<v Speaker 1>you know, if I'm pretty sure that as

00:16:00.735 --> 00:16:02.175
<v Speaker 1>a Helm container image,

00:16:02.735 --> 00:16:05.135
<v Speaker 1>or we could do, Ubuntu

00:16:05.135 --> 00:16:07.855
<v Speaker 1>20 o four where we run

00:16:09.055 --> 00:16:11.860
<v Speaker 1>an apt update, apt install Helm. But Helm

00:16:11.860 --> 00:16:14.020
<v Speaker 1>is actually a bit more convoluted because,

00:16:14.100 --> 00:16:17.300
<v Speaker 1>unfortunately, it requires adding the official Kubernetes

00:16:17.540 --> 00:16:20.580
<v Speaker 1>repository. It's not part of Ubuntu's native packaging.

00:16:21.060 --> 00:16:22.980
<v Speaker 1>So we're not gonna do that. And instead,

00:16:22.980 --> 00:16:24.900
<v Speaker 1>we're gonna just do a Dagger install

00:16:25.140 --> 00:16:25.940
<v Speaker 1>from the So

00:16:26.805 --> 00:16:27.925
<v Speaker 2>riddle me this.

00:16:28.245 --> 00:16:29.765
<v Speaker 2>I have a container

00:16:29.765 --> 00:16:33.605
<v Speaker 2>that has Helm and OU control in it.

00:16:34.725 --> 00:16:36.565
<v Speaker 2>Is it just easier to use that?

00:16:38.485 --> 00:16:40.160
<v Speaker 1>We could do it both ways. I think

00:16:40.160 --> 00:16:42.240
<v Speaker 1>we're gonna have time to to experiment and

00:16:42.240 --> 00:16:43.200
<v Speaker 1>have a bit of fun.

00:16:43.600 --> 00:16:46.480
<v Speaker 1>Okay. But because we're installing this module right

00:16:46.480 --> 00:16:46.959
<v Speaker 1>now,

00:16:47.519 --> 00:16:49.199
<v Speaker 1>we might as well just take a look

00:16:49.199 --> 00:16:52.000
<v Speaker 1>at what this is actually doing. So Okay.

00:16:52.079 --> 00:16:53.694
<v Speaker 1>We can come to s I go module.

00:16:53.694 --> 00:16:55.055
<v Speaker 1>This is the other really cool thing about

00:16:55.055 --> 00:16:56.814
<v Speaker 1>Dagger, right, is that all these modules can

00:16:56.814 --> 00:16:59.055
<v Speaker 1>be written in any of the supported SDKs,

00:16:59.055 --> 00:17:01.535
<v Speaker 1>whether that be Go, TypeScript, Python.

00:17:02.495 --> 00:17:04.895
<v Speaker 1>They just become available. There's Alexa. There's Rust.

00:17:05.299 --> 00:17:07.220
<v Speaker 1>It's really cool how quickly that's all coming

00:17:07.220 --> 00:17:08.819
<v Speaker 1>together. But now I know why you like

00:17:08.819 --> 00:17:10.019
<v Speaker 2>it so much. It's got

00:17:10.740 --> 00:17:14.019
<v Speaker 1>It's got Rust support. I know. So

00:17:15.299 --> 00:17:17.460
<v Speaker 1>here, we can see that this Helm one

00:17:17.460 --> 00:17:19.635
<v Speaker 1>exposes a whole bunch of different functions. So

00:17:19.635 --> 00:17:21.315
<v Speaker 1>we've got like a version, we've a package

00:17:21.315 --> 00:17:22.194
<v Speaker 1>push,

00:17:23.395 --> 00:17:24.755
<v Speaker 1>and we've got a test. So actually, I

00:17:24.755 --> 00:17:26.675
<v Speaker 1>don't think this module really does what we

00:17:26.675 --> 00:17:28.355
<v Speaker 1>want it to do because it doesn't allow

00:17:28.355 --> 00:17:30.675
<v Speaker 1>us to just execute Helm commands. It seems

00:17:30.675 --> 00:17:31.395
<v Speaker 1>to be more

00:17:31.870 --> 00:17:33.870
<v Speaker 1>of a publishing Helm

00:17:34.110 --> 00:17:35.710
<v Speaker 1>Yeah. Charts.

00:17:36.990 --> 00:17:37.629
<v Speaker 1>So

00:17:38.110 --> 00:17:39.630
<v Speaker 1>maybe I should have read the docs on

00:17:39.630 --> 00:17:41.549
<v Speaker 1>it. So let's see what else we have.

00:17:43.630 --> 00:17:45.309
<v Speaker 1>Here are the Helm one, but we could

00:17:45.309 --> 00:17:46.510
<v Speaker 1>just use your image as well.

00:17:50.765 --> 00:17:53.804
<v Speaker 1>Yeah. Okay. That one would probably work. What's

00:17:53.804 --> 00:17:54.845
<v Speaker 1>your image called?

00:17:55.645 --> 00:17:57.164
<v Speaker 2>Let me grab it for you.

00:18:00.470 --> 00:18:02.070
<v Speaker 1>And while we're doing that, I'll just show

00:18:02.070 --> 00:18:03.750
<v Speaker 1>what did happen here. So we go to

00:18:03.750 --> 00:18:04.630
<v Speaker 1>the terminal.

00:18:04.790 --> 00:18:06.870
<v Speaker 1>We've added this function.

00:18:07.430 --> 00:18:08.230
<v Speaker 1>Dagger

00:18:08.230 --> 00:18:10.310
<v Speaker 1>does code gen behind the scenes,

00:18:10.790 --> 00:18:11.190
<v Speaker 1>meaning

00:18:12.794 --> 00:18:14.715
<v Speaker 1>that when we go enter our function here,

00:18:14.715 --> 00:18:17.674
<v Speaker 1>we can do dag dot helm dot,

00:18:18.875 --> 00:18:19.274
<v Speaker 1>and

00:18:20.155 --> 00:18:21.914
<v Speaker 1>we can see that package push stuff here.

00:18:21.914 --> 00:18:23.434
<v Speaker 1>And we're getting code complete

00:18:23.515 --> 00:18:25.755
<v Speaker 1>the entire time. It's telling us exactly what

00:18:25.755 --> 00:18:26.955
<v Speaker 1>we want to do, and we can click

00:18:26.955 --> 00:18:29.009
<v Speaker 1>into it and see that this takes a

00:18:29.009 --> 00:18:31.730
<v Speaker 1>directory, a registry, and so forth. So all

00:18:31.730 --> 00:18:34.690
<v Speaker 1>of this happens regardless of language. Dagger generates

00:18:34.690 --> 00:18:35.729
<v Speaker 1>an SDK.

00:18:35.809 --> 00:18:38.289
<v Speaker 1>So developing with it is working with a

00:18:38.289 --> 00:18:39.809
<v Speaker 1>really strongly typed,

00:18:40.125 --> 00:18:41.485
<v Speaker 1>nice API,

00:18:41.885 --> 00:18:43.725
<v Speaker 1>and I love that too. So

00:18:45.085 --> 00:18:46.684
<v Speaker 1>right. You got an image for me?

00:18:47.005 --> 00:18:48.685
<v Speaker 2>Yeah. I'm just making sure I give you

00:18:48.685 --> 00:18:49.725
<v Speaker 2>the right one.

00:18:50.525 --> 00:18:52.285
<v Speaker 1>Yeah. Don't set me up for failure, please.

00:18:52.285 --> 00:18:53.245
<v Speaker 1>Come on. Yeah.

00:18:57.200 --> 00:18:58.240
<v Speaker 1>Here.

00:18:58.240 --> 00:19:00.080
<v Speaker 1>So I'm just gonna prepare

00:19:00.080 --> 00:19:02.799
<v Speaker 1>for our first deploy step.

00:19:03.520 --> 00:19:06.240
<v Speaker 1>We'll call this deploy

00:19:06.795 --> 00:19:07.995
<v Speaker 1>OpenUnison.

00:19:07.995 --> 00:19:09.435
<v Speaker 2>Okay. Let's go with this one. I don't

00:19:09.435 --> 00:19:11.115
<v Speaker 2>think I've merged this in yet,

00:19:11.435 --> 00:19:14.875
<v Speaker 2>but let me do that. Returns a container.

00:19:16.235 --> 00:19:17.195
<v Speaker 2>Where's chat?

00:19:21.440 --> 00:19:23.840
<v Speaker 2>Alright. So here's the image, and this image

00:19:23.840 --> 00:19:24.559
<v Speaker 2>has

00:19:25.760 --> 00:19:28.160
<v Speaker 2>it says vCluster because we use the we

00:19:28.160 --> 00:19:29.360
<v Speaker 2>originally built this

00:19:29.600 --> 00:19:32.640
<v Speaker 2>as part of our vCluster onboarding process, but

00:19:32.640 --> 00:19:34.080
<v Speaker 2>it includes vCluster,

00:19:34.080 --> 00:19:35.679
<v Speaker 2>helm, coop control,

00:19:36.080 --> 00:19:36.880
<v Speaker 2>and

00:19:38.534 --> 00:19:40.294
<v Speaker 2>OU control. So,

00:19:41.735 --> 00:19:43.335
<v Speaker 2>you know, all we really need to do

00:19:43.335 --> 00:19:46.134
<v Speaker 2>to make this work is mount

00:19:46.695 --> 00:19:48.054
<v Speaker 2>a values file

00:19:48.534 --> 00:19:51.230
<v Speaker 2>and the couple of secrets we need and

00:19:51.630 --> 00:19:53.470
<v Speaker 2>our control configuration.

00:19:56.030 --> 00:19:57.550
<v Speaker 1>Okay. Awesome.

00:19:57.550 --> 00:19:59.230
<v Speaker 1>So what I'm gonna show you here is

00:19:59.230 --> 00:20:01.310
<v Speaker 1>that, first, I changed the docs on this

00:20:01.310 --> 00:20:01.950
<v Speaker 1>function.

00:20:02.670 --> 00:20:04.190
<v Speaker 1>I took away all the parameters.

00:20:04.715 --> 00:20:06.554
<v Speaker 1>I'm returning a container,

00:20:07.195 --> 00:20:09.195
<v Speaker 1>that'll become important shortly.

00:20:10.075 --> 00:20:12.635
<v Speaker 1>I'm now using your image, which hopefully isn't

00:20:12.635 --> 00:20:13.434
<v Speaker 1>too large,

00:20:13.755 --> 00:20:16.315
<v Speaker 1>and then I'm gonna execute Helm version.

00:20:16.875 --> 00:20:19.259
<v Speaker 1>And, actually, I think Helm might just be

00:20:19.259 --> 00:20:20.940
<v Speaker 1>Helm version rather than Dash. I think you're

00:20:20.940 --> 00:20:21.659
<v Speaker 2>right. Yeah.

00:20:22.539 --> 00:20:24.059
<v Speaker 1>So now we can come back here and

00:20:24.059 --> 00:20:26.220
<v Speaker 1>run Dagger functions, and we'll see how those

00:20:26.220 --> 00:20:27.259
<v Speaker 1>small tweaks

00:20:27.419 --> 00:20:29.980
<v Speaker 1>to the code change what we get back

00:20:29.980 --> 00:20:31.580
<v Speaker 1>from this Dagger functions call.

00:20:33.505 --> 00:20:35.665
<v Speaker 1>Marco's saying he's already tried your image, and

00:20:35.665 --> 00:20:38.225
<v Speaker 1>it works. Awesome. Thanks, man. Sweet.

00:20:40.065 --> 00:20:42.225
<v Speaker 1>Now we're just waiting for it to pull.

00:20:42.225 --> 00:20:43.025
<v Speaker 1>Hopefully,

00:20:43.505 --> 00:20:45.185
<v Speaker 1>it's not too big. I hope you're not

00:20:45.185 --> 00:20:47.665
<v Speaker 1>shipping it. It's so big? Sexy egg images.

00:20:50.360 --> 00:20:51.559
<v Speaker 1>No. There we go.

00:20:51.880 --> 00:20:55.160
<v Speaker 1>Alright. So we've got our function called deployed

00:20:55.160 --> 00:20:56.840
<v Speaker 1>open deploy OpenUnison

00:20:56.840 --> 00:20:58.360
<v Speaker 1>with my documentation,

00:20:58.360 --> 00:20:59.960
<v Speaker 1>which is obviously not that great, but it

00:20:59.960 --> 00:21:01.880
<v Speaker 1>does come from here. Great doc. Hey. It's

00:21:01.880 --> 00:21:03.480
<v Speaker 2>more documentation than I usually write.

00:21:05.345 --> 00:21:08.304
<v Speaker 1>Now we can call deploy open

00:21:08.865 --> 00:21:09.664
<v Speaker 1>Unison.

00:21:09.904 --> 00:21:13.585
<v Speaker 1>Now let's remember that this returns a container.

00:21:13.585 --> 00:21:15.104
<v Speaker 1>Right? So if I run this,

00:21:15.585 --> 00:21:17.720
<v Speaker 1>we're gonna get output,

00:21:17.720 --> 00:21:19.480
<v Speaker 1>but we're not really gonna be able to

00:21:20.040 --> 00:21:22.600
<v Speaker 1>understand it that well. It's gonna be swallowed

00:21:22.600 --> 00:21:25.320
<v Speaker 1>up because we haven't really requested anything back.

00:21:26.200 --> 00:21:27.800
<v Speaker 1>So let's just give that a wee second

00:21:27.800 --> 00:21:28.200
<v Speaker 1>to run.

00:21:31.325 --> 00:21:33.565
<v Speaker 2>Now is this pulling the container every time,

00:21:33.565 --> 00:21:35.005
<v Speaker 2>or has it got a

00:21:36.845 --> 00:21:39.804
<v Speaker 2>caching? I I haven't used Podman in

00:21:40.125 --> 00:21:41.885
<v Speaker 1>couple of years. So it's it's it's now

00:21:41.885 --> 00:21:43.965
<v Speaker 1>actually pulling the container because when I ran

00:21:43.965 --> 00:21:46.519
<v Speaker 1>Dagger functions, it was really just regenerating that

00:21:46.519 --> 00:21:48.440
<v Speaker 1>SDK to list the functions for us. So

00:21:48.440 --> 00:21:51.320
<v Speaker 1>now it's actually pulling that container, so it

00:21:51.320 --> 00:21:52.120
<v Speaker 1>won't take too long.

00:21:58.215 --> 00:22:00.215
<v Speaker 1>But, yeah, they're they're all cashed. They're gonna

00:22:00.215 --> 00:22:02.375
<v Speaker 2>be over the air. They're pills at once.

00:22:02.375 --> 00:22:02.854
<v Speaker 1>Yeah.

00:22:06.775 --> 00:22:08.534
<v Speaker 1>I was gonna say we'll do something else,

00:22:08.534 --> 00:22:10.135
<v Speaker 1>but it's already finished. So as you can

00:22:10.135 --> 00:22:12.455
<v Speaker 1>see, like, it's done stuff, but we don't

00:22:12.455 --> 00:22:14.429
<v Speaker 1>have any idea what that stuff is. So

00:22:14.429 --> 00:22:16.190
<v Speaker 1>we can then start to dive into that

00:22:16.190 --> 00:22:18.669
<v Speaker 1>container. Now there's two routes here when working

00:22:18.669 --> 00:22:20.590
<v Speaker 1>with Dagger. I could then modify this and

00:22:20.590 --> 00:22:22.909
<v Speaker 1>say, give me standard out and change this

00:22:22.909 --> 00:22:24.590
<v Speaker 1>to be a string, and then we'd see

00:22:24.590 --> 00:22:26.269
<v Speaker 1>that output on the command line.

00:22:26.669 --> 00:22:28.110
<v Speaker 1>But

00:22:27.495 --> 00:22:29.175
<v Speaker 1>if even if you don't wanna go change

00:22:29.175 --> 00:22:31.175
<v Speaker 1>in the API surface too much and just

00:22:31.175 --> 00:22:33.014
<v Speaker 1>say, you know, I'm happy with a container,

00:22:33.415 --> 00:22:35.495
<v Speaker 1>we can actually just use the CLI and

00:22:35.495 --> 00:22:37.175
<v Speaker 1>say, okay. Get me the standard out for

00:22:37.175 --> 00:22:38.055
<v Speaker 1>that container run.

00:22:43.700 --> 00:22:45.460
<v Speaker 1>And there we go. We've now got Helm

00:22:45.460 --> 00:22:48.180
<v Speaker 1>version three fifteen point three coming from your

00:22:48.180 --> 00:22:48.820
<v Speaker 1>thing.

00:22:49.380 --> 00:22:51.539
<v Speaker 1>In the same vein That's cool. Modify

00:22:51.780 --> 00:22:54.045
<v Speaker 1>this. And you said it was all your

00:22:54.045 --> 00:22:55.645
<v Speaker 1>control. Let's see if it's got a very

00:22:55.645 --> 00:22:56.445
<v Speaker 1>thin command.

00:22:57.405 --> 00:22:59.404
<v Speaker 2>It doesn't. I don't actually think it does,

00:22:59.405 --> 00:23:01.565
<v Speaker 2>but you'll see an error. Right?

00:23:01.885 --> 00:23:03.005
<v Speaker 1>Yeah. I'll see something.

00:23:06.389 --> 00:23:07.990
<v Speaker 1>Marco is trying to get me to reveal

00:23:07.990 --> 00:23:10.470
<v Speaker 1>some cool things of the the Dagger workflow

00:23:10.470 --> 00:23:12.789
<v Speaker 1>here. So you see this this I'm pointing

00:23:12.789 --> 00:23:14.710
<v Speaker 1>to my monitor. Right? The bottom line, I'm

00:23:14.710 --> 00:23:16.870
<v Speaker 1>gonna run it again, but we can actually

00:23:16.870 --> 00:23:18.644
<v Speaker 1>ask it to zoom in and show us

00:23:18.644 --> 00:23:21.044
<v Speaker 1>more details by using the plus and minus

00:23:21.044 --> 00:23:21.764
<v Speaker 1>commands.

00:23:21.924 --> 00:23:23.445
<v Speaker 1>And and you can just add all keys

00:23:23.445 --> 00:23:25.684
<v Speaker 1>to jump between these, like, parallel tasks and

00:23:25.684 --> 00:23:26.964
<v Speaker 1>a whole bunch of other stuff.

00:23:27.765 --> 00:23:29.684
<v Speaker 1>Yeah. Very, very cool CLI.

00:23:30.500 --> 00:23:32.980
<v Speaker 1>Alright. We actually got OU control as not

00:23:32.980 --> 00:23:34.580
<v Speaker 1>a file or directory.

00:23:36.100 --> 00:23:37.460
<v Speaker 2>I wonder if it's just not in the

00:23:37.460 --> 00:23:38.420
<v Speaker 2>path. Let's

00:23:38.820 --> 00:23:40.580
<v Speaker 2>let me look at something here real quick.

00:23:43.154 --> 00:23:45.315
<v Speaker 1>Now we also need a Kubernetes cluster. So

00:23:45.315 --> 00:23:47.075
<v Speaker 1>while you do that, I'm gonna come here

00:23:47.075 --> 00:23:49.955
<v Speaker 1>and search for k three s. And Marcos,

00:23:49.955 --> 00:23:52.115
<v Speaker 1>who's in the chat, has this community module,

00:23:52.115 --> 00:23:53.634
<v Speaker 1>not a partner, Marcos. You need to get

00:23:53.634 --> 00:23:54.755
<v Speaker 1>your your your label in.

00:23:55.610 --> 00:23:57.050
<v Speaker 1>We'll go to installation

00:23:57.050 --> 00:23:58.730
<v Speaker 1>and we'll add this module.

00:24:00.810 --> 00:24:02.170
<v Speaker 1>Now we also get

00:24:02.970 --> 00:24:04.090
<v Speaker 1>blue examples

00:24:04.090 --> 00:24:05.610
<v Speaker 1>so we can click on oh, there's no

00:24:05.610 --> 00:24:07.690
<v Speaker 1>TypeScript, but I'll wing it. We've got a

00:24:07.690 --> 00:24:08.650
<v Speaker 1>go one here

00:24:09.065 --> 00:24:11.225
<v Speaker 1>where we can just kinda see this is

00:24:11.225 --> 00:24:13.385
<v Speaker 1>roughly how we need this to work.

00:24:21.780 --> 00:24:24.180
<v Speaker 1>Even though it's go, I am

00:24:24.900 --> 00:24:26.340
<v Speaker 1>going to copy it,

00:24:28.900 --> 00:24:32.180
<v Speaker 1>drop it in here just as a reference.

00:24:37.544 --> 00:24:39.784
<v Speaker 1>So now I can do async

00:24:42.105 --> 00:24:43.384
<v Speaker 1>ephemeral

00:24:43.784 --> 00:24:45.705
<v Speaker 1>k three s cluster.

00:24:46.904 --> 00:24:48.505
<v Speaker 1>It's gonna return a promise,

00:24:49.860 --> 00:24:52.020
<v Speaker 1>and I'm gonna return a service.

00:24:52.020 --> 00:24:52.820
<v Speaker 2>Oh,

00:24:52.900 --> 00:24:54.179
<v Speaker 2>that's why.

00:24:54.420 --> 00:24:55.220
<v Speaker 2>Okay.

00:24:55.860 --> 00:24:58.020
<v Speaker 2>I got it installed as a KubeControl plug

00:24:58.020 --> 00:24:58.580
<v Speaker 2>in.

00:25:00.100 --> 00:25:01.380
<v Speaker 1>You got it as a plug in, so

00:25:01.380 --> 00:25:03.140
<v Speaker 1>it's KubeControl or your control.

00:25:03.965 --> 00:25:04.605
<v Speaker 1>Yeah.

00:25:05.245 --> 00:25:06.285
<v Speaker 1>That's alright.

00:25:06.765 --> 00:25:09.005
<v Speaker 1>Let's just confirm before we go any further,

00:25:09.005 --> 00:25:10.765
<v Speaker 1>though. Right? So cube control,

00:25:12.685 --> 00:25:14.285
<v Speaker 1>all your CTL.

00:25:17.165 --> 00:25:19.340
<v Speaker 1>Just to help, Let's see what we get.

00:25:34.325 --> 00:25:35.765
<v Speaker 1>Go back to my code.

00:25:36.645 --> 00:25:37.684
<v Speaker 1>So now

00:25:37.925 --> 00:25:40.885
<v Speaker 1>this temporary cluster, less service, this function that

00:25:40.885 --> 00:25:43.340
<v Speaker 1>provides the Kubernetes service that we need. What

00:25:43.340 --> 00:25:45.420
<v Speaker 1>we want to do is get Dagger,

00:25:45.420 --> 00:25:46.780
<v Speaker 1>k three s.

00:25:49.260 --> 00:25:51.100
<v Speaker 1>What's the name? Okay. We'll just call it

00:25:51.100 --> 00:25:52.140
<v Speaker 1>k three s.

00:25:52.540 --> 00:25:53.820
<v Speaker 1>It takes options.

00:25:54.300 --> 00:25:55.980
<v Speaker 1>Oh, we can even provide our own image.

00:25:55.980 --> 00:25:57.100
<v Speaker 1>That's that's

00:25:58.265 --> 00:25:59.225
<v Speaker 1>cool, we think.

00:26:00.265 --> 00:26:02.185
<v Speaker 1>And what we want to do from the

00:26:02.185 --> 00:26:03.785
<v Speaker 1>example here is

00:26:04.025 --> 00:26:05.945
<v Speaker 1>get ourselves a server

00:26:07.705 --> 00:26:08.425
<v Speaker 1>and

00:26:08.825 --> 00:26:09.465
<v Speaker 1>start it.

00:26:10.990 --> 00:26:12.989
<v Speaker 1>So what is server returning?

00:26:13.070 --> 00:26:14.990
<v Speaker 1>A service. Okay. We are happy with just

00:26:14.990 --> 00:26:17.469
<v Speaker 1>that, to be honest. Let's return

00:26:17.870 --> 00:26:18.909
<v Speaker 1>await

00:26:19.390 --> 00:26:20.190
<v Speaker 1>service.

00:26:21.309 --> 00:26:22.190
<v Speaker 1>Is it

00:26:23.485 --> 00:26:24.524
<v Speaker 1>import?

00:26:25.485 --> 00:26:26.284
<v Speaker 1>Sweet.

00:26:27.164 --> 00:26:29.965
<v Speaker 1>So let's see what our output says.

00:26:31.325 --> 00:26:33.565
<v Speaker 1>No. Keep control. Oh, you control then.

00:26:33.885 --> 00:26:35.485
<v Speaker 1>Oh, I spelled it wrong. Out control.

00:26:38.880 --> 00:26:41.919
<v Speaker 1>I'm trying my best. I'm trying my best.

00:26:42.640 --> 00:26:44.559
<v Speaker 2>How do you know it's a livestream?

00:26:44.640 --> 00:26:46.960
<v Speaker 2>It's not scripted. Stuff doesn't work.

00:26:47.760 --> 00:26:50.160
<v Speaker 1>SciFi Geeks universe saying that that is the

00:26:50.160 --> 00:26:52.400
<v Speaker 1>most installed module. Yeah. I can imagine it's

00:26:52.400 --> 00:26:55.235
<v Speaker 1>a pretty popular module. Definitely.

00:26:56.115 --> 00:26:58.115
<v Speaker 1>So this gonna run case Kubernetes the line.

00:26:58.275 --> 00:27:00.115
<v Speaker 2>It's a own container

00:27:00.275 --> 00:27:01.554
<v Speaker 2>inside of your pod?

00:27:03.475 --> 00:27:05.475
<v Speaker 1>Yeah. Your old control is not working, but

00:27:05.475 --> 00:27:07.315
<v Speaker 1>I'm not fussed. We had Helm. Right? And

00:27:07.315 --> 00:27:09.610
<v Speaker 1>that's what's important for me. Sorry. Can tell

00:27:09.610 --> 00:27:11.129
<v Speaker 1>me what's that question again?

00:27:11.370 --> 00:27:13.450
<v Speaker 2>So OU Control is

00:27:15.770 --> 00:27:18.570
<v Speaker 2>or I'm sorry. So Kind is running in

00:27:18.570 --> 00:27:21.365
<v Speaker 2>a container inside of your Podman. Is that

00:27:21.365 --> 00:27:22.885
<v Speaker 2>how that's gonna get launched?

00:27:23.205 --> 00:27:25.045
<v Speaker 1>I don't think it's actually running as a

00:27:25.045 --> 00:27:27.045
<v Speaker 1>container, but we can run Podman alias to

00:27:27.045 --> 00:27:27.605
<v Speaker 1>see,

00:27:27.925 --> 00:27:30.405
<v Speaker 1>because it's all orchestrated by BuildKit. I don't

00:27:30.405 --> 00:27:32.725
<v Speaker 1>think it's ever exposed to, like, your Docker

00:27:32.725 --> 00:27:35.045
<v Speaker 1>containers list or your Podman containers list. It

00:27:35.045 --> 00:27:37.640
<v Speaker 1>doesn't it's not something. But I'll check. I've

00:27:37.640 --> 00:27:39.799
<v Speaker 1>never actually done that before. Yeah. Curious.

00:27:40.200 --> 00:27:42.360
<v Speaker 1>Alright. So we need Helm.

00:27:43.400 --> 00:27:45.159
<v Speaker 1>We know that version works.

00:27:46.440 --> 00:27:48.040
<v Speaker 1>Let's leave it at that. But what we

00:27:48.040 --> 00:27:50.040
<v Speaker 1>need now is to run that Helm against

00:27:50.040 --> 00:27:50.679
<v Speaker 1>a cluster.

00:27:51.805 --> 00:27:53.805
<v Speaker 1>So we're going to see

00:27:54.765 --> 00:27:58.285
<v Speaker 1>this dot ephemeral cluster, which gives us our

00:27:58.285 --> 00:27:59.085
<v Speaker 1>service,

00:28:00.125 --> 00:28:00.925
<v Speaker 1>and

00:28:00.925 --> 00:28:01.965
<v Speaker 1>we can

00:28:02.365 --> 00:28:03.085
<v Speaker 1>start that.

00:28:07.669 --> 00:28:10.549
<v Speaker 1>And just call this const k three s

00:28:10.630 --> 00:28:11.669
<v Speaker 1>equals

00:28:11.750 --> 00:28:13.429
<v Speaker 1>faxing my code.

00:28:15.429 --> 00:28:16.630
<v Speaker 1>Start does not exist.

00:28:19.405 --> 00:28:20.924
<v Speaker 1>Response awaited.

00:28:28.205 --> 00:28:31.885
<v Speaker 1>And now we have a promise service,

00:28:32.125 --> 00:28:32.925
<v Speaker 1>which is fine.

00:28:34.890 --> 00:28:36.650
<v Speaker 1>SciFi geeks are saying we need a verified

00:28:36.650 --> 00:28:37.450
<v Speaker 1>flag.

00:28:40.330 --> 00:28:42.650
<v Speaker 1>Little blue checkbox or we circle. That's what

00:28:42.650 --> 00:28:44.570
<v Speaker 1>we need of. Alright.

00:28:44.970 --> 00:28:46.810
<v Speaker 1>So going back to this Go example, once

00:28:46.810 --> 00:28:49.415
<v Speaker 1>we've started it, we could check for errors,

00:28:49.415 --> 00:28:51.095
<v Speaker 1>but that's more just a Go thing. And

00:28:51.095 --> 00:28:52.935
<v Speaker 1>we wanna get the endpoint so that we

00:28:52.935 --> 00:28:55.895
<v Speaker 1>can actually connect our Helm cluster up to

00:28:55.895 --> 00:28:56.934
<v Speaker 1>it. So

00:28:57.495 --> 00:28:58.935
<v Speaker 1>we can say endpoint

00:28:58.935 --> 00:29:00.695
<v Speaker 1>equals k three guess

00:29:01.200 --> 00:29:03.520
<v Speaker 1>Endpoint. And then we can provide the port

00:29:03.520 --> 00:29:05.359
<v Speaker 1>and stuff that we need.

00:29:05.600 --> 00:29:07.600
<v Speaker 1>So I'm just leaning into this Go example

00:29:07.600 --> 00:29:09.359
<v Speaker 1>that Marcos has already done,

00:29:09.840 --> 00:29:11.599
<v Speaker 1>which is port 80

00:29:12.640 --> 00:29:14.559
<v Speaker 1>on scheme HTTP.

00:29:16.315 --> 00:29:17.995
<v Speaker 1>And this should go to us. Is this

00:29:17.995 --> 00:29:18.955
<v Speaker 2>endpoint

00:29:18.955 --> 00:29:19.594
<v Speaker 2>for

00:29:19.995 --> 00:29:22.394
<v Speaker 2>the API server that k three is running

00:29:22.394 --> 00:29:23.034
<v Speaker 2>on?

00:29:24.554 --> 00:29:26.794
<v Speaker 2>Like, what what's that Yes. Yeah. It's it's

00:29:26.794 --> 00:29:27.914
<v Speaker 1>a we can

00:29:28.480 --> 00:29:30.960
<v Speaker 1>we can point our helm to this endpoint

00:29:30.960 --> 00:29:31.519
<v Speaker 1>and

00:29:32.639 --> 00:29:33.759
<v Speaker 1>run Interesting.

00:29:36.000 --> 00:29:37.600
<v Speaker 2>Don't even know if you could use k

00:29:37.600 --> 00:29:38.559
<v Speaker 2>threes with port 80.

00:29:40.895 --> 00:29:42.414
<v Speaker 1>Sorry? You didn't know?

00:29:43.054 --> 00:29:45.135
<v Speaker 2>I I didn't know that k three supported

00:29:45.455 --> 00:29:47.294
<v Speaker 2>because I didn't think the API server

00:29:47.615 --> 00:29:49.695
<v Speaker 2>supported unencrypted connections anymore.

00:29:53.620 --> 00:29:54.980
<v Speaker 1>Yeah. We may have to pull out the

00:29:54.980 --> 00:29:55.860
<v Speaker 1>KubeConfig,

00:29:55.860 --> 00:29:56.419
<v Speaker 1>actually,

00:29:57.540 --> 00:29:58.739
<v Speaker 1>but we'll get there.

00:29:59.299 --> 00:30:00.019
<v Speaker 1>Now

00:30:00.179 --> 00:30:02.340
<v Speaker 1>what we need to do here is say

00:30:02.340 --> 00:30:04.100
<v Speaker 1>web service binding.

00:30:04.179 --> 00:30:06.179
<v Speaker 1>So we're going to connect it to our

00:30:06.179 --> 00:30:06.740
<v Speaker 1>service,

00:30:08.455 --> 00:30:11.335
<v Speaker 1>which we called k three s. I'm assuming

00:30:11.335 --> 00:30:13.254
<v Speaker 1>that's what this parameter here was, was the

00:30:13.254 --> 00:30:14.374
<v Speaker 1>service name

00:30:15.654 --> 00:30:16.215
<v Speaker 1>as

00:30:16.774 --> 00:30:17.414
<v Speaker 1>so

00:30:18.215 --> 00:30:19.654
<v Speaker 1>web service binding.

00:30:21.740 --> 00:30:23.340
<v Speaker 1>Yep. We've got the alias.

00:30:29.100 --> 00:30:30.779
<v Speaker 1>No. In fact, we don't need anything more.

00:30:33.125 --> 00:30:35.764
<v Speaker 1>Once the service oh, okay. Yeah. It's a

00:30:35.764 --> 00:30:36.964
<v Speaker 1>local alias.

00:30:36.965 --> 00:30:38.404
<v Speaker 1>I'm being very silly.

00:30:38.725 --> 00:30:40.404
<v Speaker 1>Oh, we want this.

00:30:42.485 --> 00:30:43.764
<v Speaker 1>And that's a promise.

00:30:45.900 --> 00:30:46.860
<v Speaker 1>There we go.

00:30:47.420 --> 00:30:49.340
<v Speaker 1>I bet you Marcos is just yelling at

00:30:49.340 --> 00:30:50.220
<v Speaker 1>me right now.

00:30:52.300 --> 00:30:55.180
<v Speaker 1>Oh, nice. Okay. So Marcos is actually exposing

00:30:55.180 --> 00:30:58.285
<v Speaker 1>this. This is cool facts. I'm glad he's

00:30:58.285 --> 00:30:59.885
<v Speaker 1>here. The port 80 is to access an

00:30:59.885 --> 00:31:02.205
<v Speaker 1>NGINX deployment in the example, not the API

00:31:02.205 --> 00:31:05.005
<v Speaker 1>server. The API server gets access to via

00:31:05.005 --> 00:31:06.285
<v Speaker 1>the KubeConfig.

00:31:06.285 --> 00:31:06.605
<v Speaker 1>So

00:31:09.005 --> 00:31:11.510
<v Speaker 2>Gotcha. Okay. That makes sense. So so the

00:31:11.510 --> 00:31:13.590
<v Speaker 2>k threes has a embedded

00:31:13.590 --> 00:31:14.629
<v Speaker 2>NGINX

00:31:15.029 --> 00:31:15.909
<v Speaker 2>in it.

00:31:18.549 --> 00:31:19.909
<v Speaker 2>Cool. Well,

00:31:20.470 --> 00:31:22.070
<v Speaker 2>that's good because we're gonna need that.

00:31:25.325 --> 00:31:26.044
<v Speaker 1>Yes.

00:31:26.125 --> 00:31:28.044
<v Speaker 1>So let's remove our Go code.

00:31:31.164 --> 00:31:33.724
<v Speaker 1>Well, let's just make sure this works.

00:31:35.965 --> 00:31:37.885
<v Speaker 1>And we're not using our endpoint yet. Let's

00:31:37.885 --> 00:31:40.140
<v Speaker 1>just comment it out. But make sure it's

00:31:40.140 --> 00:31:42.540
<v Speaker 1>service binding and the service starts.

00:31:44.060 --> 00:31:44.700
<v Speaker 1>So

00:31:44.860 --> 00:31:45.900
<v Speaker 1>let's do a call.

00:31:52.715 --> 00:31:55.354
<v Speaker 1>Marcos is telling me to use the documentation.

00:31:57.995 --> 00:32:00.234
<v Speaker 1>Just got to point to RTFM.

00:32:01.115 --> 00:32:03.755
<v Speaker 1>Yeah. Funnily enough, you know that

00:32:04.789 --> 00:32:09.109
<v Speaker 1>the original name of Rawkode Live was RTFM,

00:32:09.110 --> 00:32:11.030
<v Speaker 1>so way

00:32:11.030 --> 00:32:13.830
<v Speaker 1>back in 2039.

00:32:14.630 --> 00:32:17.110
<v Speaker 1>So, yeah, long time ago. The dark times.

00:32:19.135 --> 00:32:20.015
<v Speaker 1>Yes.

00:32:20.815 --> 00:32:23.375
<v Speaker 1>So this is let's I know this is

00:32:23.375 --> 00:32:26.255
<v Speaker 1>gold code, but, you know, best example, in

00:32:26.255 --> 00:32:27.455
<v Speaker 1>fact, we'll look at it with the the

00:32:27.455 --> 00:32:28.815
<v Speaker 1>highlight in the right here.

00:32:29.215 --> 00:32:32.380
<v Speaker 1>So he is pulling Alpine Helm, which we

00:32:32.380 --> 00:32:34.139
<v Speaker 1>could have done too. However, we have now

00:32:34.139 --> 00:32:35.739
<v Speaker 1>pulled your code.

00:32:37.659 --> 00:32:40.539
<v Speaker 1>And he's saying set KubeConfig to here and

00:32:40.539 --> 00:32:42.460
<v Speaker 1>then he's mounting it. So the k three

00:32:42.460 --> 00:32:44.779
<v Speaker 1>s module exposes this config, and we could

00:32:44.779 --> 00:32:46.495
<v Speaker 1>have just clicked on the functions here to

00:32:46.495 --> 00:32:48.894
<v Speaker 1>see that too, which we can then mount,

00:32:49.615 --> 00:32:51.934
<v Speaker 1>and then we can just run our commands.

00:32:52.335 --> 00:32:54.095
<v Speaker 2>So, like, this is the easiest k three

00:32:54.095 --> 00:32:56.415
<v Speaker 1>s and say the container for Dagger I

00:32:56.415 --> 00:32:58.175
<v Speaker 1>have ever seen in my life. So

00:32:58.650 --> 00:33:01.450
<v Speaker 1>that is a testament to Marcos' work.

00:33:01.850 --> 00:33:02.490
<v Speaker 1>Mhmm.

00:33:03.450 --> 00:33:04.010
<v Speaker 1>So

00:33:05.130 --> 00:33:06.410
<v Speaker 1>we

00:33:06.410 --> 00:33:07.370
<v Speaker 1>can do

00:33:08.330 --> 00:33:10.650
<v Speaker 1>oh, so that's interesting, Marcos. I'm glad you're

00:33:10.650 --> 00:33:12.010
<v Speaker 1>in the chat. Right? Because

00:33:12.455 --> 00:33:14.215
<v Speaker 1>I'm doing a service binding,

00:33:14.855 --> 00:33:17.255
<v Speaker 1>but because you've got the Kube config, is

00:33:17.255 --> 00:33:18.375
<v Speaker 1>it even do I even need to look

00:33:18.375 --> 00:33:19.654
<v Speaker 1>at the service binding?

00:33:20.215 --> 00:33:21.975
<v Speaker 1>Because I'm assuming maybe not.

00:33:22.935 --> 00:33:24.455
<v Speaker 1>So but we do need a web file.

00:33:25.620 --> 00:33:27.299
<v Speaker 1>We need to then store.

00:33:28.020 --> 00:33:29.860
<v Speaker 1>And what was your path? You just stuck

00:33:29.860 --> 00:33:31.700
<v Speaker 1>it in KubeConfig.

00:33:31.700 --> 00:33:32.419
<v Speaker 1>Yeah.

00:33:33.780 --> 00:33:35.540
<v Speaker 1>I mean, I could just throw this in

00:33:35.540 --> 00:33:37.540
<v Speaker 1>temp. It's actually not that important, and we'll

00:33:37.540 --> 00:33:38.580
<v Speaker 1>call this KubeConfig.

00:33:39.105 --> 00:33:41.025
<v Speaker 1>And the file that we're mounting is the

00:33:41.025 --> 00:33:44.304
<v Speaker 1>conf oh, multiple cursors there. That's weird.

00:33:45.505 --> 00:33:46.544
<v Speaker 1>And we're using

00:33:48.304 --> 00:33:51.025
<v Speaker 1>k three s. So now I'm I'm pulling

00:33:51.025 --> 00:33:52.865
<v Speaker 1>out too many objects here, so I'm gonna

00:33:52.865 --> 00:33:53.904
<v Speaker 1>have to return

00:33:54.225 --> 00:33:56.359
<v Speaker 1>let me refactor my code.

00:33:59.000 --> 00:34:01.559
<v Speaker 1>Just return our k three s,

00:34:02.840 --> 00:34:04.600
<v Speaker 1>which is

00:34:07.605 --> 00:34:09.445
<v Speaker 1>k three s client. Is that the one

00:34:09.445 --> 00:34:12.005
<v Speaker 1>that has the config? Yes. Okay.

00:34:20.199 --> 00:34:22.040
<v Speaker 1>So now this has to change.

00:34:22.840 --> 00:34:24.280
<v Speaker 1>So we're saying this,

00:34:24.440 --> 00:34:26.200
<v Speaker 1>deploy the femoral cluster,

00:34:26.360 --> 00:34:28.280
<v Speaker 1>and that gives us our k three s,

00:34:28.679 --> 00:34:30.440
<v Speaker 1>which shouldn't be a as a promise, so

00:34:30.440 --> 00:34:31.560
<v Speaker 1>I should await that.

00:34:31.800 --> 00:34:34.195
<v Speaker 1>We then do our k three s server,

00:34:34.355 --> 00:34:36.435
<v Speaker 1>which is going to be our k3s.

00:34:36.435 --> 00:34:37.315
<v Speaker 1>Server

00:34:38.275 --> 00:34:39.554
<v Speaker 1>dot start

00:34:39.875 --> 00:34:42.195
<v Speaker 1>with a whole bunch of awaits here too.

00:34:46.835 --> 00:34:48.675
<v Speaker 1>And this gives me my service.

00:34:49.530 --> 00:34:51.690
<v Speaker 1>We probably don't need the endpoint then just

00:34:51.690 --> 00:34:53.770
<v Speaker 1>based on how this is working, but down

00:34:53.770 --> 00:34:55.370
<v Speaker 1>here, we can see that we want the

00:34:55.370 --> 00:34:56.330
<v Speaker 1>config.

00:34:56.570 --> 00:34:58.890
<v Speaker 1>So this returns a file.

00:34:59.370 --> 00:35:00.250
<v Speaker 1>This is

00:35:00.570 --> 00:35:03.130
<v Speaker 1>a helper function that is reaching into

00:35:03.974 --> 00:35:05.815
<v Speaker 1>Wow. It's using it in GraphQL.

00:35:07.015 --> 00:35:08.535
<v Speaker 1>Cool. Let's not look at that.

00:35:08.855 --> 00:35:12.375
<v Speaker 1>Our service painting here is actually our server

00:35:13.174 --> 00:35:15.015
<v Speaker 1>even though I don't think we need the

00:35:15.015 --> 00:35:18.010
<v Speaker 1>service painting. Yep. Marcus has already confirmed that

00:35:18.010 --> 00:35:19.450
<v Speaker 1>in the chat. Thank you very much.

00:35:20.890 --> 00:35:22.329
<v Speaker 1>And he's saying that this doesn't need to

00:35:22.329 --> 00:35:24.570
<v Speaker 1>be async, so that's one less.

00:35:25.849 --> 00:35:26.329
<v Speaker 1>Wait.

00:35:31.485 --> 00:35:33.805
<v Speaker 1>Alright. So we don't need the service binding.

00:35:33.805 --> 00:35:35.325
<v Speaker 1>We mount on the KubeConfig.

00:35:35.325 --> 00:35:37.405
<v Speaker 1>We can see web environment variable. And I

00:35:37.405 --> 00:35:39.485
<v Speaker 1>know I'm going pretty fast here, so maybe

00:35:39.485 --> 00:35:41.085
<v Speaker 1>I'll take a minute just to

00:35:42.365 --> 00:35:43.725
<v Speaker 1>take questions. The KubeConfig.

00:35:45.100 --> 00:35:47.340
<v Speaker 1>And we're saying that our KubeConfig

00:35:47.340 --> 00:35:48.220
<v Speaker 1>exists

00:35:48.380 --> 00:35:48.940
<v Speaker 1>here.

00:35:49.180 --> 00:35:49.820
<v Speaker 2>And then So

00:35:50.940 --> 00:35:54.220
<v Speaker 2>actually added a with environment to update the

00:35:54.220 --> 00:35:56.060
<v Speaker 2>path to make OU control work

00:35:56.875 --> 00:35:59.195
<v Speaker 2>if we wanna add that in too.

00:36:00.635 --> 00:36:02.315
<v Speaker 1>Yeah. Well, I I don't think we're going

00:36:02.315 --> 00:36:04.155
<v Speaker 1>in we're we're going to need it, but

00:36:04.155 --> 00:36:05.755
<v Speaker 1>let's let's wait and see.

00:36:06.155 --> 00:36:06.795
<v Speaker 1>Okay.

00:36:07.355 --> 00:36:09.115
<v Speaker 1>So here, we should be able to actually

00:36:09.115 --> 00:36:11.790
<v Speaker 1>run kube control against our cluster. But I

00:36:11.790 --> 00:36:13.390
<v Speaker 1>really wanna see if this works,

00:36:15.630 --> 00:36:17.230
<v Speaker 1>which I'm sure it will.

00:36:23.865 --> 00:36:25.385
<v Speaker 1>Just yeah. Let's try it.

00:36:25.625 --> 00:36:26.025
<v Speaker 2>Welcome.

00:36:38.579 --> 00:36:40.660
<v Speaker 1>That's oh, that's the wrong zoom.

00:36:42.260 --> 00:36:44.099
<v Speaker 2>So what is it doing now? It's firing

00:36:44.099 --> 00:36:45.779
<v Speaker 2>up k three. Oh, there we go. And

00:36:45.779 --> 00:36:46.980
<v Speaker 2>all that cool stuff.

00:36:48.740 --> 00:36:51.655
<v Speaker 1>Yeah. Just maybe a bit too much info.

00:36:51.655 --> 00:36:53.175
<v Speaker 1>Alright. Let's see. What do we get?

00:37:02.640 --> 00:37:04.480
<v Speaker 1>So it's saying connection

00:37:04.640 --> 00:37:05.680
<v Speaker 1>failed,

00:37:07.119 --> 00:37:08.960
<v Speaker 1>but it wrote the KubeConfig,

00:37:13.200 --> 00:37:15.839
<v Speaker 1>but wasn't able to speak to the cluster.

00:37:17.655 --> 00:37:20.135
<v Speaker 2>It looks like or even before then, you

00:37:20.135 --> 00:37:21.095
<v Speaker 2>had a fatal

00:37:21.495 --> 00:37:23.815
<v Speaker 2>with k three starting up, it couldn't find

00:37:23.815 --> 00:37:25.815
<v Speaker 2>c groups. Do you have c groups v

00:37:25.815 --> 00:37:27.175
<v Speaker 2>two enabled on your

00:37:29.255 --> 00:37:29.735
<v Speaker 2>system?

00:37:30.120 --> 00:37:32.200
<v Speaker 1>I wonder if we need to use this

00:37:32.200 --> 00:37:34.760
<v Speaker 1>endpoint function just to force the service

00:37:35.960 --> 00:37:37.160
<v Speaker 1>to hang around.

00:37:38.440 --> 00:37:40.280
<v Speaker 1>I wonder if this is just being

00:37:41.320 --> 00:37:42.440
<v Speaker 1>stripped off

00:37:42.920 --> 00:37:43.960
<v Speaker 1>by the DAG.

00:37:45.654 --> 00:37:47.414
<v Speaker 1>So we've got far too many awaits here

00:37:47.414 --> 00:37:49.974
<v Speaker 1>now. Let's just restart this. K three s

00:37:50.375 --> 00:37:52.055
<v Speaker 1>server endpoint

00:37:52.694 --> 00:37:55.175
<v Speaker 1>where we want that poor 80

00:37:55.815 --> 00:37:56.214
<v Speaker 1>scheme.

00:37:59.160 --> 00:38:00.440
<v Speaker 1>This is

00:38:00.440 --> 00:38:01.560
<v Speaker 1>promise.

00:38:06.359 --> 00:38:08.359
<v Speaker 1>Marcus said it could be a pod manager.

00:38:08.359 --> 00:38:09.960
<v Speaker 1>I mean, it very well could be, but

00:38:09.960 --> 00:38:11.560
<v Speaker 1>if I need to switch to Docker, that's

00:38:11.560 --> 00:38:12.440
<v Speaker 1>that's easy done.

00:38:13.955 --> 00:38:14.595
<v Speaker 1>Let's see.

00:38:42.705 --> 00:38:44.465
<v Speaker 1>Okay. So it tried to run kubectl get

00:38:44.465 --> 00:38:45.505
<v Speaker 1>pods this time.

00:38:48.785 --> 00:38:51.345
<v Speaker 1>It failed to open the permissions on that

00:38:51.345 --> 00:38:53.345
<v Speaker 1>file. Okay. Let's progress.

00:38:54.780 --> 00:38:56.620
<v Speaker 1>So I I I think just calling the

00:38:56.620 --> 00:38:59.900
<v Speaker 1>endpoint stops the service from being too early.

00:39:03.420 --> 00:39:05.900
<v Speaker 1>But let's confirm that we can cat this,

00:39:05.900 --> 00:39:07.580
<v Speaker 1>and I haven't made an arse of that.

00:39:07.580 --> 00:39:07.820
<v Speaker 1>Right?

00:39:09.095 --> 00:39:10.615
<v Speaker 1>Does your image have cat?

00:39:11.974 --> 00:39:12.935
<v Speaker 2>It should.

00:39:14.135 --> 00:39:15.895
<v Speaker 2>I mean, I know dogs in there.

00:39:16.535 --> 00:39:18.055
<v Speaker 1>I mean, I could probably just do this.

00:39:18.055 --> 00:39:18.455
<v Speaker 1>Yeah.

00:39:20.454 --> 00:39:22.930
<v Speaker 2>It's it's it's running bash, so that should

00:39:22.930 --> 00:39:25.650
<v Speaker 2>work. I'm modifying the function. Permission denied. I

00:39:25.650 --> 00:39:27.090
<v Speaker 2>mean, it looks like it was KubeControl that

00:39:27.090 --> 00:39:28.130
<v Speaker 2>was unhappy. Not

00:39:30.690 --> 00:39:34.290
<v Speaker 1>No. It says open permission denied. KubeControl was

00:39:34.290 --> 00:39:34.530
<v Speaker 1>fine.

00:39:36.015 --> 00:39:38.255
<v Speaker 2>Well, right. But is that open coming from

00:39:38.255 --> 00:39:39.775
<v Speaker 2>KubeControl?

00:39:40.575 --> 00:39:42.575
<v Speaker 2>Because that's coming from KubeControl because that's what

00:39:42.575 --> 00:39:44.815
<v Speaker 2>would be opening that file unless it's the

00:39:49.119 --> 00:39:52.080
<v Speaker 2>because that's coming from inside the container. Right?

00:39:57.760 --> 00:39:59.520
<v Speaker 1>Oh, service filter. Yeah. Like

00:40:07.065 --> 00:40:09.545
<v Speaker 2>yeah, Marcus thinks it might be a, root

00:40:09.545 --> 00:40:10.265
<v Speaker 2>issue.

00:40:10.505 --> 00:40:12.025
<v Speaker 2>Are you running rootless?

00:40:14.345 --> 00:40:16.265
<v Speaker 1>We couldn't resolve the process cat.

00:40:16.730 --> 00:40:18.650
<v Speaker 1>I'm I don't think I am doing Podman.

00:40:22.250 --> 00:40:23.290
<v Speaker 2>Okay.

00:40:26.089 --> 00:40:27.770
<v Speaker 1>So let's take a look at web trial.

00:40:27.770 --> 00:40:30.089
<v Speaker 1>We have these container ops. We can set

00:40:30.089 --> 00:40:32.010
<v Speaker 1>the permissions to be very permissive.

00:40:32.795 --> 00:40:33.755
<v Speaker 1>Oh, yeah.

00:40:34.395 --> 00:40:35.115
<v Speaker 1>So

00:40:38.795 --> 00:40:40.395
<v Speaker 1>and we could just do

00:40:41.355 --> 00:40:43.515
<v Speaker 1>seven seven seven. What user does your container

00:40:43.515 --> 00:40:44.075
<v Speaker 1>run as?

00:40:48.270 --> 00:40:49.150
<v Speaker 1>Do you know?

00:40:51.230 --> 00:40:53.310
<v Speaker 2>I probably should off the top of my

00:40:53.310 --> 00:40:55.870
<v Speaker 2>head, but I'm gonna just let's get inside

00:40:55.870 --> 00:40:56.670
<v Speaker 1>of it. That

00:40:56.990 --> 00:40:58.670
<v Speaker 2>I know for a fact.

00:40:59.390 --> 00:41:00.270
<v Speaker 1>Let's get inside.

00:41:01.655 --> 00:41:03.895
<v Speaker 1>Alright. So I've removed any command. We're just

00:41:03.895 --> 00:41:05.015
<v Speaker 1>basically provisioning

00:41:05.015 --> 00:41:07.575
<v Speaker 1>this container. So now instead of standard out,

00:41:07.575 --> 00:41:09.255
<v Speaker 1>let's do terminal, and let's have a wee

00:41:09.255 --> 00:41:10.295
<v Speaker 1>poke around.

00:41:12.454 --> 00:41:13.974
<v Speaker 1>Next, you'll be telling me there's no shell.

00:41:15.080 --> 00:41:16.680
<v Speaker 2>No. There's a shell in there.

00:41:17.080 --> 00:41:18.840
<v Speaker 2>I'm not a big fan of

00:41:19.080 --> 00:41:19.880
<v Speaker 2>of

00:41:20.360 --> 00:41:21.400
<v Speaker 2>Distroless,

00:41:21.400 --> 00:41:22.360
<v Speaker 1>to be honest.

00:41:23.400 --> 00:41:24.760
<v Speaker 2>Docker file.

00:41:25.240 --> 00:41:26.440
<v Speaker 2>It runs

00:41:26.440 --> 00:41:28.600
<v Speaker 2>as user

00:41:32.565 --> 00:41:34.165
<v Speaker 2>four thirty one.

00:41:36.245 --> 00:41:37.045
<v Speaker 1>Alright.

00:41:38.725 --> 00:41:41.045
<v Speaker 1>Yep. We are the OpenUnison user,

00:41:42.485 --> 00:41:44.885
<v Speaker 1>and our KubeConfig is coming in as root.

00:41:45.110 --> 00:41:46.870
<v Speaker 1>So Yeah. There's our issue.

00:41:48.070 --> 00:41:49.750
<v Speaker 1>But we do have Kube control.

00:41:50.230 --> 00:41:51.590
<v Speaker 1>We definitely well

00:41:53.510 --> 00:41:55.830
<v Speaker 1>yeah. I'm not gonna auto complete bash.

00:41:56.550 --> 00:41:57.270
<v Speaker 1>Yeah.

00:41:57.350 --> 00:41:58.230
<v Speaker 1>Oh, yeah.

00:41:58.805 --> 00:42:01.045
<v Speaker 1>No. There's no OpenUnison control. So

00:42:02.165 --> 00:42:04.005
<v Speaker 1>but that's the path problem. Right? So we

00:42:04.005 --> 00:42:05.445
<v Speaker 1>don't need to work over that. So if

00:42:05.445 --> 00:42:08.325
<v Speaker 1>I do chair mod seven seven oh, I'm

00:42:09.285 --> 00:42:10.485
<v Speaker 1>do I have sudo?

00:42:11.205 --> 00:42:11.845
<v Speaker 1>No.

00:42:12.245 --> 00:42:14.405
<v Speaker 1>Alright. Oh, it's a container, not a VM.

00:42:16.700 --> 00:42:18.780
<v Speaker 1>Alright. So how let's have a look at

00:42:18.780 --> 00:42:21.180
<v Speaker 1>this web file. So we wanna tweak the

00:42:21.180 --> 00:42:21.980
<v Speaker 1>permissions.

00:42:21.980 --> 00:42:23.020
<v Speaker 1>Now we could,

00:42:23.740 --> 00:42:24.300
<v Speaker 1>700

00:42:24.540 --> 00:42:25.420
<v Speaker 1>777

00:42:25.420 --> 00:42:26.859
<v Speaker 1>it, but we can also set the owner.

00:42:27.725 --> 00:42:30.125
<v Speaker 1>So let's do let's try and be semi

00:42:30.125 --> 00:42:31.165
<v Speaker 1>good citizens

00:42:32.045 --> 00:42:35.965
<v Speaker 1>and set the owner to 431.

00:42:36.685 --> 00:42:39.645
<v Speaker 1>Oh, it wants a string. Okay. So, open

00:42:40.445 --> 00:42:41.085
<v Speaker 1>Unison.

00:42:42.630 --> 00:42:44.950
<v Speaker 1>Now if we run this again to get

00:42:44.950 --> 00:42:46.869
<v Speaker 1>back into the terminal, we should be able

00:42:46.869 --> 00:42:48.710
<v Speaker 1>to cat that fail at least.

00:42:49.190 --> 00:42:51.269
<v Speaker 2>Okay. So you've added that terminal to the

00:42:51.269 --> 00:42:53.270
<v Speaker 2>end, and that's what gets you in. Okay.

00:42:53.670 --> 00:42:56.230
<v Speaker 2>Cool. Yeah. It's a nice little debugging tool.

00:43:01.805 --> 00:43:04.765
<v Speaker 2>Yeah. I know it goes counter to current

00:43:04.765 --> 00:43:07.165
<v Speaker 2>security dogma, but I will say that I

00:43:07.165 --> 00:43:09.725
<v Speaker 2>think that a container

00:43:10.125 --> 00:43:10.525
<v Speaker 2>without

00:43:11.230 --> 00:43:13.550
<v Speaker 2>a shell is actually less secure than a

00:43:13.550 --> 00:43:14.830
<v Speaker 2>container with a shell.

00:43:17.630 --> 00:43:19.470
<v Speaker 2>Oh, those permissions look good.

00:43:20.670 --> 00:43:22.270
<v Speaker 2>Almost. Oh, no. Great.

00:43:27.815 --> 00:43:29.255
<v Speaker 2>Temp coop. Oh,

00:43:31.174 --> 00:43:33.575
<v Speaker 2>it's got the group as four thirty one.

00:43:33.895 --> 00:43:35.974
<v Speaker 1>It's got the user. The user's right. It's

00:43:35.974 --> 00:43:37.335
<v Speaker 1>just I think that's Right. But if you

00:43:37.335 --> 00:43:39.095
<v Speaker 1>look at the group, the group is supposed

00:43:39.095 --> 00:43:40.055
<v Speaker 2>to be 433.

00:43:41.780 --> 00:43:43.540
<v Speaker 1>Alright. Okay. Well, I'm not I'm not fussed

00:43:43.540 --> 00:43:44.420
<v Speaker 1>about the group.

00:43:46.900 --> 00:43:48.740
<v Speaker 2>Alright. But if you're on 640

00:43:48.980 --> 00:43:50.580
<v Speaker 2>if you've got it on 644

00:43:50.580 --> 00:43:53.220
<v Speaker 2>and you've got the group wrong, I think

00:43:53.220 --> 00:43:54.260
<v Speaker 2>that might help work.

00:43:55.115 --> 00:43:56.875
<v Speaker 1>Yeah. I think the permissions are wrong because

00:43:56.875 --> 00:43:58.475
<v Speaker 1>it wants an octal string.

00:44:01.835 --> 00:44:04.155
<v Speaker 2>Does it want it's like a string string,

00:44:04.234 --> 00:44:05.435
<v Speaker 2>not a number?

00:44:06.474 --> 00:44:08.875
<v Speaker 1>Oh, I don't know. The example said zero

00:44:08.875 --> 00:44:09.675
<v Speaker 1>six hundred,

00:44:13.810 --> 00:44:16.290
<v Speaker 1>which it doesn't even like. So that's

00:44:16.850 --> 00:44:17.890
<v Speaker 1>so this

00:44:17.890 --> 00:44:18.530
<v Speaker 1>is

00:44:20.370 --> 00:44:23.170
<v Speaker 1>okay. What number do we need? So seven

00:44:23.170 --> 00:44:25.250
<v Speaker 1>seven seven is octal. What's that in decimal?

00:44:28.105 --> 00:44:29.865
<v Speaker 1>Can't believe I'm gonna Google this.

00:44:30.505 --> 00:44:31.305
<v Speaker 1>Compare

00:44:31.944 --> 00:44:34.265
<v Speaker 1>777

00:44:34.265 --> 00:44:35.625
<v Speaker 1>to decimal

00:44:37.944 --> 00:44:38.825
<v Speaker 1>511.

00:44:40.210 --> 00:44:42.050
<v Speaker 1>Let's see if that's a bit nicer. And

00:44:42.050 --> 00:44:43.410
<v Speaker 1>let's actually see what,

00:44:44.050 --> 00:44:44.930
<v Speaker 1>convert,

00:44:46.610 --> 00:44:47.410
<v Speaker 1>decimal.

00:44:47.410 --> 00:44:49.890
<v Speaker 1>So I was doing 644 to octal.

00:44:52.050 --> 00:44:53.650
<v Speaker 1>Let's

00:44:53.650 --> 00:44:55.855
<v Speaker 1>see if Google can do it. No.

00:44:59.295 --> 00:45:00.735
<v Speaker 1>+1 204.

00:45:01.855 --> 00:45:03.935
<v Speaker 1>Right. And, yeah, that may actually add up

00:45:03.935 --> 00:45:05.215
<v Speaker 1>to what we were seeing.

00:45:06.575 --> 00:45:08.815
<v Speaker 1>So let's try 511 that I save.

00:45:17.890 --> 00:45:19.330
<v Speaker 1>Rawkode suggesting

00:45:19.490 --> 00:45:20.290
<v Speaker 1>that

00:45:21.650 --> 00:45:24.370
<v Speaker 1>there's a JavaScript syntax.

00:45:29.525 --> 00:45:30.645
<v Speaker 1>Oh, it does work.

00:45:31.285 --> 00:45:31.925
<v Speaker 1>Interesting.

00:45:32.484 --> 00:45:34.325
<v Speaker 1>We'll try that next, but let's see if

00:45:34.325 --> 00:45:35.445
<v Speaker 1>the decimal approach works.

00:45:44.610 --> 00:45:46.210
<v Speaker 1>I'm not even gonna try and cat the

00:45:46.210 --> 00:45:48.210
<v Speaker 1>fail. I'm just gonna run cube control yolo

00:45:48.210 --> 00:45:48.610
<v Speaker 1>sail.

00:45:58.485 --> 00:45:59.285
<v Speaker 1>Kube

00:45:59.525 --> 00:46:02.645
<v Speaker 1>config temp to config get pods.

00:46:07.300 --> 00:46:08.820
<v Speaker 2>So you have that env in there. You

00:46:08.820 --> 00:46:11.460
<v Speaker 2>probably shouldn't even need the dash dash koop

00:46:11.460 --> 00:46:12.260
<v Speaker 2>config.

00:46:13.460 --> 00:46:14.900
<v Speaker 1>Oh, you're right. Yeah.

00:46:16.740 --> 00:46:18.820
<v Speaker 1>So we're in a position there. From here.

00:46:18.820 --> 00:46:20.545
<v Speaker 1>But I want to run that container l

00:46:20.545 --> 00:46:22.065
<v Speaker 1>s. Yeah. You can't see

00:46:24.625 --> 00:46:26.305
<v Speaker 1>yeah. You can't you can't see the service

00:46:26.305 --> 00:46:27.105
<v Speaker 1>containers.

00:46:27.425 --> 00:46:28.065
<v Speaker 1>Okay.

00:46:29.425 --> 00:46:31.585
<v Speaker 1>So now we'll I'll leave that as octal.

00:46:31.585 --> 00:46:34.140
<v Speaker 1>The that says decimal did work, so both

00:46:34.140 --> 00:46:35.340
<v Speaker 1>are valid options.

00:46:37.180 --> 00:46:38.780
<v Speaker 1>But now we need to work out

00:46:39.100 --> 00:46:41.180
<v Speaker 1>why it's not quite working. So we can

00:46:41.180 --> 00:46:42.780
<v Speaker 1>add our web exec back.

00:46:44.380 --> 00:46:46.060
<v Speaker 1>We wanna keep control

00:46:46.060 --> 00:46:47.260
<v Speaker 1>get

00:46:47.955 --> 00:46:48.915
<v Speaker 1>pods

00:46:49.795 --> 00:46:50.515
<v Speaker 1>dash a.

00:46:55.475 --> 00:46:56.835
<v Speaker 1>Now I wonder if this is just a

00:46:56.835 --> 00:46:58.755
<v Speaker 1>terminal debug thing.

00:46:59.475 --> 00:47:02.915
<v Speaker 1>So let's run it as that. Let's see

00:47:04.760 --> 00:47:05.800
<v Speaker 1>if we get a list.

00:47:35.310 --> 00:47:36.430
<v Speaker 1>Time and a half.

00:47:41.550 --> 00:47:44.430
<v Speaker 2>So that IP 1087,

00:47:44.430 --> 00:47:45.150
<v Speaker 2>is that

00:47:45.575 --> 00:47:46.695
<v Speaker 2>your network,

00:47:46.934 --> 00:47:49.494
<v Speaker 2>or is that a pod man network? Is

00:47:49.494 --> 00:47:51.494
<v Speaker 2>that a like, what network is that?

00:47:52.694 --> 00:47:55.734
<v Speaker 1>We could probably do a console log endpoint.

00:47:56.535 --> 00:47:59.480
<v Speaker 1>That's a string. Right? Yeah. And so that'll

00:47:59.480 --> 00:48:01.000
<v Speaker 1>tell us what the endpoint for the KCS

00:48:01.000 --> 00:48:01.960
<v Speaker 1>service is.

00:48:10.200 --> 00:48:12.520
<v Speaker 1>Marcus saying the k trees isn't starting.

00:48:16.255 --> 00:48:17.055
<v Speaker 1>Alright.

00:48:18.335 --> 00:48:19.855
<v Speaker 1>Let's switch to Docker.

00:48:22.255 --> 00:48:23.295
<v Speaker 2>When in doubt

00:48:24.015 --> 00:48:26.335
<v Speaker 1>Which may be relatively difficult to do on

00:48:26.335 --> 00:48:27.295
<v Speaker 1>my Nexus machine.

00:48:34.660 --> 00:48:35.540
<v Speaker 1>So

00:48:39.460 --> 00:48:40.980
<v Speaker 1>I'll have open next home.

00:48:45.474 --> 00:48:46.995
<v Speaker 1>We want next auth.

00:48:47.795 --> 00:48:48.755
<v Speaker 1>Podman.

00:48:51.635 --> 00:48:54.115
<v Speaker 1>Yeah. I don't have rootless configured, but either

00:48:54.115 --> 00:48:56.195
<v Speaker 1>way, false that

00:48:56.994 --> 00:48:57.795
<v Speaker 1>docker

00:48:57.955 --> 00:48:59.635
<v Speaker 1>enable

00:49:00.330 --> 00:49:01.050
<v Speaker 1>true.

00:49:03.530 --> 00:49:04.170
<v Speaker 1>And

00:49:05.770 --> 00:49:08.250
<v Speaker 1>I'm gonna fast rebuild, which means I shouldn't

00:49:08.250 --> 00:49:09.770
<v Speaker 1>have to reboot.

00:49:13.105 --> 00:49:15.105
<v Speaker 1>We also have the kind work from last

00:49:15.105 --> 00:49:17.345
<v Speaker 1>week, so I can always just use that

00:49:17.345 --> 00:49:19.425
<v Speaker 1>function, drop it straight in, and we'll get

00:49:19.425 --> 00:49:21.185
<v Speaker 1>a very similar result.

00:49:23.345 --> 00:49:25.599
<v Speaker 2>We work great and kind. The entire

00:49:25.840 --> 00:49:27.680
<v Speaker 2>almost the entire book is written on top

00:49:27.680 --> 00:49:28.800
<v Speaker 2>of kind. So

00:49:31.440 --> 00:49:31.840
<v Speaker 2>Mhmm.

00:49:40.095 --> 00:49:43.135
<v Speaker 1>Alright. It's installing Docker, starting the service.

00:49:58.630 --> 00:50:01.270
<v Speaker 2>Now curious. What's your base OS? Is it

00:50:01.270 --> 00:50:03.510
<v Speaker 2>Ubuntu? Is it Nexus.

00:50:04.390 --> 00:50:05.350
<v Speaker 2>Oh, it is Nexus.

00:50:07.085 --> 00:50:08.285
<v Speaker 1>It is.

00:50:09.964 --> 00:50:10.525
<v Speaker 1>How

00:50:11.005 --> 00:50:12.925
<v Speaker 1>do you unalias on fish shell?

00:50:17.805 --> 00:50:18.444
<v Speaker 1>Oh, yes.

00:50:20.870 --> 00:50:22.310
<v Speaker 1>Trying to fill in Podman. I don't have

00:50:22.310 --> 00:50:23.430
<v Speaker 1>Podman anymore.

00:50:24.470 --> 00:50:26.150
<v Speaker 1>Alright. We need to make one more change.

00:50:26.150 --> 00:50:27.830
<v Speaker 1>This is where my Nexus is coming to

00:50:27.830 --> 00:50:29.590
<v Speaker 1>bite me in the ass.

00:50:32.470 --> 00:50:34.470
<v Speaker 1>Docker can now just be Docker.

00:50:46.585 --> 00:50:48.745
<v Speaker 1>Rawkode is either Podman or Nexus.

00:50:49.390 --> 00:50:51.230
<v Speaker 1>Hey. Leave my Nexus out of this.

00:50:55.869 --> 00:50:56.590
<v Speaker 1>Alright.

00:50:57.710 --> 00:51:00.430
<v Speaker 1>So if I just drop that shell, pop

00:51:00.430 --> 00:51:01.630
<v Speaker 1>open a new one,

00:51:02.109 --> 00:51:03.550
<v Speaker 1>Docker should be Docker.

00:51:05.045 --> 00:51:05.765
<v Speaker 1>Sweet.

00:51:06.165 --> 00:51:08.005
<v Speaker 1>Which means we will have to do a

00:51:08.085 --> 00:51:10.165
<v Speaker 1>just run Dagger functions. It should start the

00:51:10.165 --> 00:51:10.805
<v Speaker 1>new

00:51:11.285 --> 00:51:12.645
<v Speaker 1>before we put a new image.

00:51:20.200 --> 00:51:21.320
<v Speaker 1>Docker daemon.

00:51:27.800 --> 00:51:29.320
<v Speaker 1>No. I can't remember my password.

00:51:37.684 --> 00:51:38.165
<v Speaker 1>Hey.

00:51:49.870 --> 00:51:51.550
<v Speaker 1>Why is that not working?

00:51:59.710 --> 00:52:01.630
<v Speaker 1>I bet it's gonna be permissions now.

00:52:07.875 --> 00:52:09.795
<v Speaker 1>I need to add myself

00:52:09.795 --> 00:52:10.995
<v Speaker 1>to the Docker group.

00:52:17.520 --> 00:52:19.760
<v Speaker 1>Are you shredding some evidence? What was that?

00:52:20.240 --> 00:52:21.360
<v Speaker 2>My

00:52:21.520 --> 00:52:24.080
<v Speaker 2>my standing desk. Was bringing it down. Figured

00:52:24.080 --> 00:52:24.720
<v Speaker 2>I'd

00:52:24.880 --> 00:52:26.160
<v Speaker 2>Yeah. Take a load off.

00:52:42.645 --> 00:52:43.925
<v Speaker 1>Now I'm confused.

00:52:53.480 --> 00:52:55.160
<v Speaker 1>Okay. Sudo works.

00:52:56.280 --> 00:52:57.400
<v Speaker 1>Not ideal.

00:52:59.320 --> 00:52:59.800
<v Speaker 1>Functions.

00:53:02.585 --> 00:53:04.505
<v Speaker 1>So now, unfortunately, we do have to wait

00:53:04.505 --> 00:53:05.865
<v Speaker 1>for a new Dagger engine,

00:53:06.185 --> 00:53:07.945
<v Speaker 1>and pull down your image again, but it

00:53:07.945 --> 00:53:10.025
<v Speaker 1>doesn't take that long. So we'll give that

00:53:10.025 --> 00:53:11.705
<v Speaker 1>a wee minute and see what happens.

00:53:12.585 --> 00:53:15.890
<v Speaker 1>But I did do this with Podman and

00:53:15.890 --> 00:53:16.850
<v Speaker 1>before

00:53:17.250 --> 00:53:19.090
<v Speaker 1>for the cargo project.

00:53:20.450 --> 00:53:21.490
<v Speaker 2>Cargo.

00:53:22.210 --> 00:53:23.890
<v Speaker 2>Hey, Kat. Watching.

00:53:24.849 --> 00:53:26.849
<v Speaker 1>We can oh oh, wait. That's a refractor

00:53:26.849 --> 00:53:27.250
<v Speaker 1>branch.

00:53:30.194 --> 00:53:32.115
<v Speaker 1>Oh, they merged it. Sweet. Okay. It's already

00:53:32.115 --> 00:53:32.915
<v Speaker 1>on main.

00:53:33.635 --> 00:53:35.555
<v Speaker 1>So if we do need a kind cluster

00:53:35.555 --> 00:53:36.915
<v Speaker 1>with pod man

00:53:37.555 --> 00:53:39.474
<v Speaker 2>Can you assume that in a while? That's

00:53:39.474 --> 00:53:40.595
<v Speaker 2>really tiny text.

00:53:41.750 --> 00:53:44.310
<v Speaker 1>You're not allowed to see. Sorry. Trade secrets.

00:53:44.310 --> 00:53:45.670
<v Speaker 1>Alright.

00:53:48.790 --> 00:53:49.350
<v Speaker 1>So

00:53:50.230 --> 00:53:52.710
<v Speaker 1>just in case, we'll do if oh, just

00:53:52.710 --> 00:53:54.230
<v Speaker 1>to call this a cluster,

00:53:56.585 --> 00:53:58.265
<v Speaker 1>which is a promise

00:53:58.585 --> 00:54:00.185
<v Speaker 1>and a service.

00:54:01.944 --> 00:54:04.505
<v Speaker 1>And that's the Python code at least. So

00:54:04.505 --> 00:54:06.185
<v Speaker 1>let's convert it

00:54:06.585 --> 00:54:07.465
<v Speaker 1>where

00:54:08.664 --> 00:54:10.505
<v Speaker 1>oh, there's also the create Docker and Docker.

00:54:16.220 --> 00:54:17.420
<v Speaker 1>Docker Docker.

00:54:24.945 --> 00:54:26.225
<v Speaker 1>That container

00:54:26.545 --> 00:54:27.345
<v Speaker 1>from

00:54:29.745 --> 00:54:32.625
<v Speaker 1>Docker Dame with exposed port

00:54:33.505 --> 00:54:34.465
<v Speaker 1>to three

00:54:35.505 --> 00:54:36.945
<v Speaker 1>seven five

00:54:37.745 --> 00:54:38.625
<v Speaker 1>with exec.

00:54:46.040 --> 00:54:46.840
<v Speaker 1>Property

00:54:47.640 --> 00:54:49.160
<v Speaker 1>dash dash host

00:54:49.880 --> 00:54:50.599
<v Speaker 1>TCP

00:54:53.075 --> 00:54:55.875
<v Speaker 1>two three seven five and

00:54:58.595 --> 00:54:58.915
<v Speaker 1>true.

00:55:12.400 --> 00:55:15.520
<v Speaker 1>I'm typing as quickly as I can go.

00:55:15.520 --> 00:55:17.680
<v Speaker 1>So that gives us a Docker and Docker.

00:55:18.765 --> 00:55:20.765
<v Speaker 1>Let's see how we're getting on over here.

00:55:21.164 --> 00:55:22.285
<v Speaker 1>Alright. Okay.

00:55:23.405 --> 00:55:25.244
<v Speaker 1>Let me make sure we don't bust it

00:55:25.244 --> 00:55:27.484
<v Speaker 1>to code to point. Let's comment all this

00:55:27.484 --> 00:55:29.805
<v Speaker 1>out and try OpenUnison again just to see

00:55:29.805 --> 00:55:31.645
<v Speaker 1>if this was a PodLAN issue, and then

00:55:31.645 --> 00:55:33.164
<v Speaker 1>we've got our backup ready to go if

00:55:33.164 --> 00:55:35.230
<v Speaker 1>we need to. So sudo

00:55:35.230 --> 00:55:36.110
<v Speaker 1>dagger

00:55:36.270 --> 00:55:36.910
<v Speaker 1>call

00:55:38.830 --> 00:55:39.790
<v Speaker 1>Unison.

00:55:47.390 --> 00:55:48.910
<v Speaker 1>Wish I'd made a bigger cup of tea

00:55:48.910 --> 00:55:51.045
<v Speaker 1>now. Gonna have to strap in for this

00:55:51.045 --> 00:55:51.685
<v Speaker 1>episode.

00:55:52.005 --> 00:55:54.165
<v Speaker 1>I hope you're got dinner plans or anything.

00:55:55.605 --> 00:55:58.165
<v Speaker 2>No. I just, scarfed down a protein bar.

00:55:58.165 --> 00:56:00.565
<v Speaker 2>Sorry. I was on mute. I, scarfed down

00:56:00.565 --> 00:56:02.165
<v Speaker 2>a protein bar and made sure that the,

00:56:02.325 --> 00:56:03.845
<v Speaker 2>hanger monster didn't come out.

00:56:05.250 --> 00:56:06.690
<v Speaker 1>Let's zoom

00:56:06.690 --> 00:56:08.690
<v Speaker 1>in on this. Let's see how k three

00:56:08.690 --> 00:56:09.890
<v Speaker 1>s is getting on.

00:56:14.770 --> 00:56:16.530
<v Speaker 1>Looks like it's just pulling the image.

00:56:18.734 --> 00:56:20.415
<v Speaker 1>Oh, that's failing too, Marcus.

00:56:33.890 --> 00:56:35.330
<v Speaker 1>Or it's okay now.

00:56:39.250 --> 00:56:40.770
<v Speaker 1>Well, that might be okay.

00:56:41.650 --> 00:56:43.010
<v Speaker 1>It pop up here.

00:56:43.410 --> 00:56:45.250
<v Speaker 1>We can actually see the service one.

00:56:51.214 --> 00:56:53.135
<v Speaker 1>So what's happened is the Dagger knows we're

00:56:53.135 --> 00:56:54.654
<v Speaker 1>trying to use this as a service. So

00:56:54.654 --> 00:56:56.974
<v Speaker 1>it's actually waiting for it to become healthy

00:56:56.974 --> 00:56:58.734
<v Speaker 1>before continuing with the job.

00:57:07.560 --> 00:57:09.640
<v Speaker 1>And now I think it's pulling your container.

00:57:09.640 --> 00:57:11.320
<v Speaker 1>So we may actually be getting somewhere with

00:57:11.320 --> 00:57:12.040
<v Speaker 1>the Docker approach.

00:57:23.285 --> 00:57:24.565
<v Speaker 1>Oh, I think it worked.

00:57:27.924 --> 00:57:28.325
<v Speaker 1>Okay.

00:57:29.220 --> 00:57:30.660
<v Speaker 1>It was pod man.

00:57:38.500 --> 00:57:39.540
<v Speaker 2>Pod man.

00:57:40.980 --> 00:57:42.900
<v Speaker 2>You know, I love the idea of pod

00:57:42.900 --> 00:57:45.665
<v Speaker 2>man. It just never seems to

00:57:47.985 --> 00:57:51.585
<v Speaker 2>yeah. It it just never seems to work

00:57:51.825 --> 00:57:53.425
<v Speaker 2>in the use case I need.

00:57:53.905 --> 00:57:55.665
<v Speaker 2>Love the idea of it because I hate

00:57:55.665 --> 00:57:58.305
<v Speaker 2>Damon's, but I I I get to

00:57:58.960 --> 00:58:00.800
<v Speaker 2>every time I try to switch to it,

00:58:00.800 --> 00:58:01.920
<v Speaker 2>it doesn't last.

00:58:03.200 --> 00:58:06.240
<v Speaker 1>I'll spend some time debugging that later,

00:58:06.400 --> 00:58:09.200
<v Speaker 1>and maybe I can contribute something to the

00:58:09.360 --> 00:58:10.240
<v Speaker 1>module.

00:58:11.760 --> 00:58:12.800
<v Speaker 1>But just to confirm,

00:58:13.425 --> 00:58:15.345
<v Speaker 1>I never saw any standard out, and that's

00:58:15.345 --> 00:58:16.865
<v Speaker 1>just because there's no resources.

00:58:17.425 --> 00:58:20.545
<v Speaker 1>So let's try to control get namespace.

00:58:23.185 --> 00:58:25.345
<v Speaker 1>Right. Okay. We So there was no output

00:58:25.345 --> 00:58:27.265
<v Speaker 1>just because there were no resources. I possibly

00:58:27.265 --> 00:58:29.110
<v Speaker 1>missed it, but we are able to query

00:58:29.110 --> 00:58:30.070
<v Speaker 1>get namespaces,

00:58:30.070 --> 00:58:30.710
<v Speaker 1>which means

00:58:31.430 --> 00:58:33.510
<v Speaker 1>we don't need to go with the backup

00:58:33.510 --> 00:58:35.590
<v Speaker 1>approach. Things are jamming

00:58:35.590 --> 00:58:37.670
<v Speaker 1>as they were, which means we can now

00:58:37.670 --> 00:58:39.590
<v Speaker 1>deploy our first Helm chart. Now to do

00:58:39.590 --> 00:58:41.670
<v Speaker 1>that, we're gonna have to add the repository.

00:58:41.830 --> 00:58:43.750
<v Speaker 1>So is that documented

00:58:44.285 --> 00:58:45.005
<v Speaker 1>here?

00:58:49.325 --> 00:58:51.965
<v Speaker 2>Yeah. So go to the manual.

00:58:53.405 --> 00:58:55.965
<v Speaker 2>So go to deploy the authentication portal.

00:58:56.205 --> 00:58:58.845
<v Speaker 2>Then over on the right, scroll down the

00:58:58.845 --> 00:58:59.085
<v Speaker 2>bottom,

00:59:01.570 --> 00:59:03.810
<v Speaker 2>and there's manual deployment.

00:59:05.410 --> 00:59:08.610
<v Speaker 1>Alright. So we're gonna create an airspace.

00:59:08.690 --> 00:59:11.090
<v Speaker 1>I'll do the repository ad first and the

00:59:11.090 --> 00:59:11.890
<v Speaker 1>repo update.

00:59:12.355 --> 00:59:14.275
<v Speaker 1>I'm gonna do this all in line just

00:59:14.275 --> 00:59:16.115
<v Speaker 1>now to get some progress on the road,

00:59:16.115 --> 00:59:17.315
<v Speaker 1>and then we'll look at how we can

00:59:17.315 --> 00:59:19.715
<v Speaker 1>refactor this code to be nicer because

00:59:20.275 --> 00:59:23.155
<v Speaker 1>because we're building pipelines as code with Dagger,

00:59:23.155 --> 00:59:25.555
<v Speaker 1>we can actually treat the code to enter

00:59:26.130 --> 00:59:29.010
<v Speaker 1>everything as code, which is sounds so silly

00:59:29.010 --> 00:59:30.690
<v Speaker 1>to say it. Right? Treating code as code,

00:59:30.690 --> 00:59:32.609
<v Speaker 1>but it is super important for actually just

00:59:32.609 --> 00:59:35.730
<v Speaker 1>building stuff that can be composed and scaled

00:59:35.730 --> 00:59:37.569
<v Speaker 1>and be

00:59:37.650 --> 00:59:38.930
<v Speaker 1>actually be enjoyable to write.

00:59:40.415 --> 00:59:42.815
<v Speaker 1>So so we're adding the repository.

00:59:43.055 --> 00:59:45.295
<v Speaker 1>We'll run the Helm repository update,

00:59:46.494 --> 00:59:48.175
<v Speaker 1>and then we're going to deploy the first

00:59:48.175 --> 00:59:48.655
<v Speaker 1>one.

00:59:49.455 --> 00:59:50.974
<v Speaker 1>Now I can just tell Helm to create

00:59:50.974 --> 00:59:52.015
<v Speaker 1>that namespace,

00:59:52.015 --> 00:59:52.815
<v Speaker 1>but, of course, we

00:59:54.410 --> 00:59:56.010
<v Speaker 1>I have Helm do it when we can

00:59:56.010 --> 00:59:56.650
<v Speaker 1>do it.

00:59:57.930 --> 01:00:00.170
<v Speaker 2>So even before you call the Helm chart,

01:00:00.170 --> 01:00:01.690
<v Speaker 2>though, we need a

01:00:02.250 --> 01:00:03.450
<v Speaker 2>Helm file.

01:00:03.930 --> 01:00:05.690
<v Speaker 2>We need a values file and pass it.

01:00:05.690 --> 01:00:08.250
<v Speaker 2>Now the operator won't matter because everything's default,

01:00:08.250 --> 01:00:09.050
<v Speaker 2>so that's okay.

01:00:12.224 --> 01:00:12.865
<v Speaker 1>Okay.

01:00:16.944 --> 01:00:19.025
<v Speaker 2>So I guess so okay. So you wanna

01:00:19.025 --> 01:00:20.945
<v Speaker 2>do the first chart first?

01:00:22.464 --> 01:00:24.464
<v Speaker 1>Will it be successful with no values?

01:00:25.100 --> 01:00:27.820
<v Speaker 2>Yeah. It'll that one will be successful without

01:00:27.820 --> 01:00:30.380
<v Speaker 2>any values. Okay. So do you is there

01:00:30.380 --> 01:00:32.620
<v Speaker 1>an example values file that we're gonna need?

01:00:33.420 --> 01:00:34.940
<v Speaker 2>Yeah. So if you go to the top

01:00:34.940 --> 01:00:36.380
<v Speaker 2>of this

01:00:37.494 --> 01:00:38.935
<v Speaker 2>if you go to the top, you click

01:00:38.935 --> 01:00:39.895
<v Speaker 2>on prerequisites,

01:00:39.895 --> 01:00:41.655
<v Speaker 2>scroll down a little bit. We can skip

01:00:41.655 --> 01:00:43.734
<v Speaker 2>past the dashboard. So see where it says

01:00:43.734 --> 01:00:44.935
<v Speaker 2>site specific

01:00:45.175 --> 01:00:48.455
<v Speaker 2>and then using OU control or manual, there's

01:00:48.455 --> 01:00:49.895
<v Speaker 2>a download default values.

01:00:51.860 --> 01:00:54.020
<v Speaker 2>So that's that's what we'll customize.

01:00:54.500 --> 01:00:56.340
<v Speaker 1>Okay. What are we do know what we're

01:00:56.340 --> 01:00:57.140
<v Speaker 1>customizing?

01:00:57.780 --> 01:01:01.460
<v Speaker 2>So the the the short version is

01:01:02.500 --> 01:01:05.860
<v Speaker 2>those first three options, OpenUnison host, dashboard host,

01:01:05.860 --> 01:01:09.395
<v Speaker 2>and API server host. Mhmm. Those are going

01:01:09.395 --> 01:01:12.355
<v Speaker 2>to be where it says apps.0u.

01:01:12.595 --> 01:01:13.955
<v Speaker 2>Tremolo.dev.

01:01:14.355 --> 01:01:16.915
<v Speaker 2>Mhmm. That's gonna be the IP address.

01:01:17.395 --> 01:01:19.555
<v Speaker 2>So in a in a production rollout, that

01:01:19.555 --> 01:01:21.550
<v Speaker 2>would be the host the

01:01:21.710 --> 01:01:24.110
<v Speaker 2>host names that you'd use for these apps,

01:01:24.510 --> 01:01:26.349
<v Speaker 2>which would resolve to the IP address of

01:01:26.349 --> 01:01:28.670
<v Speaker 2>your load balancer for your ingress controller.

01:01:30.349 --> 01:01:32.270
<v Speaker 2>So since you don't I don't think you

01:01:32.270 --> 01:01:34.829
<v Speaker 2>have a DNS setup, I use nip I

01:01:34.829 --> 01:01:35.869
<v Speaker 2>0 for quick testing.

01:01:38.365 --> 01:01:40.045
<v Speaker 1>Okay. So I'm gonna

01:01:41.724 --> 01:01:43.645
<v Speaker 1>do interface,

01:01:44.525 --> 01:01:45.885
<v Speaker 1>open Unison

01:01:46.125 --> 01:01:47.005
<v Speaker 1>config,

01:01:48.365 --> 01:01:49.805
<v Speaker 1>which has a network,

01:01:49.885 --> 01:01:51.085
<v Speaker 1>which is a object,

01:01:51.810 --> 01:01:53.410
<v Speaker 1>and then as an open

01:01:53.970 --> 01:01:55.410
<v Speaker 1>Unison host,

01:01:55.410 --> 01:01:56.690
<v Speaker 1>which is a string

01:01:57.810 --> 01:01:58.690
<v Speaker 1>dashboard

01:01:59.810 --> 01:02:01.730
<v Speaker 1>host, which is a string,

01:02:02.050 --> 01:02:03.650
<v Speaker 1>and API server

01:02:04.370 --> 01:02:05.970
<v Speaker 1>as a string. So now we have a

01:02:05.970 --> 01:02:07.970
<v Speaker 1>type for that values

01:02:07.535 --> 01:02:08.255
<v Speaker 1>file.

01:02:08.895 --> 01:02:10.495
<v Speaker 1>I'll just comment this out.

01:02:11.935 --> 01:02:13.455
<v Speaker 1>So we can create a

01:02:14.495 --> 01:02:14.895
<v Speaker 1>types

01:02:16.095 --> 01:02:17.695
<v Speaker 1>TypeScript variable

01:02:17.695 --> 01:02:18.815
<v Speaker 1>with this

01:02:19.580 --> 01:02:20.460
<v Speaker 1>shape

01:02:20.780 --> 01:02:22.940
<v Speaker 1>and write functions to this to the point

01:02:22.940 --> 01:02:25.020
<v Speaker 1>where we can say, you know, const

01:02:25.100 --> 01:02:27.100
<v Speaker 1>get open Unison

01:02:27.260 --> 01:02:28.220
<v Speaker 1>config

01:02:28.380 --> 01:02:29.660
<v Speaker 1>as a function

01:02:29.980 --> 01:02:33.025
<v Speaker 1>which needs the IP address. So we'll say

01:02:33.025 --> 01:02:34.225
<v Speaker 1>IP address,

01:02:34.465 --> 01:02:35.745
<v Speaker 1>which is a string,

01:02:36.225 --> 01:02:37.745
<v Speaker 1>and it returns

01:02:39.025 --> 01:02:40.785
<v Speaker 1>an OpenUnison

01:02:40.785 --> 01:02:42.385
<v Speaker 1>config sales thing.

01:02:44.785 --> 01:02:45.745
<v Speaker 1>Like so.

01:02:48.569 --> 01:02:50.329
<v Speaker 1>What have I got wrong there? Oh, because

01:02:50.329 --> 01:02:52.570
<v Speaker 1>it because it because this comes after.

01:02:54.490 --> 01:02:54.890
<v Speaker 1>No.

01:03:00.655 --> 01:03:02.175
<v Speaker 1>Oh, it's just so we have to return

01:03:02.175 --> 01:03:03.375
<v Speaker 1>a value. Yeah.

01:03:03.615 --> 01:03:06.335
<v Speaker 1>So we could we could say return,

01:03:06.655 --> 01:03:07.135
<v Speaker 1>and

01:03:09.214 --> 01:03:11.375
<v Speaker 1>we got network. See, I love this all

01:03:11.375 --> 01:03:13.214
<v Speaker 1>complete. This is why I'm in this game.

01:03:14.079 --> 01:03:15.680
<v Speaker 1>This is why I love

01:03:16.400 --> 01:03:18.560
<v Speaker 1>doing everything as code.

01:03:20.079 --> 01:03:20.880
<v Speaker 1>Alright.

01:03:21.839 --> 01:03:23.840
<v Speaker 1>And then we actually

01:03:23.920 --> 01:03:27.119
<v Speaker 1>can just literally JSON stringify that or YAML

01:03:27.105 --> 01:03:29.105
<v Speaker 1>stringify it when we mount it into the

01:03:29.105 --> 01:03:30.865
<v Speaker 1>container. But what we want to do is

01:03:30.865 --> 01:03:32.305
<v Speaker 1>make sure that we're using NIP.

01:03:32.465 --> 01:03:34.545
<v Speaker 1>Now I don't remember the exact syntax for

01:03:34.545 --> 01:03:36.785
<v Speaker 1>NIP, but it's like IP address, and you

01:03:36.785 --> 01:03:38.785
<v Speaker 1>have to replace the dots

01:03:40.000 --> 01:03:41.360
<v Speaker 1>with a You don't have to replace the

01:03:41.360 --> 01:03:43.520
<v Speaker 2>dots. I mean, I do that, but you

01:03:43.520 --> 01:03:45.920
<v Speaker 2>don't have to. Alright. Okay. So we can

01:03:45.920 --> 01:03:49.280
<v Speaker 1>just say IPaddress.net.io?

01:03:49.760 --> 01:03:51.520
<v Speaker 2>Well, you gotta you wanna put a host

01:03:51.520 --> 01:03:53.040
<v Speaker 2>name in front of it. So, like, API

01:03:53.040 --> 01:03:55.595
<v Speaker 2>server would be, like, API.

01:03:55.595 --> 01:03:56.795
<v Speaker 2>IP address.

01:03:56.875 --> 01:03:58.474
<v Speaker 1>Oh, right. Okay. On the other side of

01:03:58.474 --> 01:03:58.955
<v Speaker 2>it.

01:03:59.435 --> 01:04:01.675
<v Speaker 1>Oh, yeah. Because the yeah. Alright. So you

01:04:01.675 --> 01:04:03.835
<v Speaker 2>want it to be, like, API. API.

01:04:04.315 --> 01:04:05.195
<v Speaker 2>Exactly.

01:04:05.835 --> 01:04:07.595
<v Speaker 2>And then, you know, like, dashboard.

01:04:08.230 --> 01:04:10.070
<v Speaker 2>They gotta be three separate host names.

01:04:10.310 --> 01:04:12.070
<v Speaker 1>That's alright. We can do that. And all

01:04:12.070 --> 01:04:12.230
<v Speaker 1>you

01:04:12.950 --> 01:04:14.070
<v Speaker 1>Yep. You happy?

01:04:14.710 --> 01:04:15.830
<v Speaker 2>Looks good to me.

01:04:17.110 --> 01:04:17.830
<v Speaker 1>Okay.

01:04:18.150 --> 01:04:19.830
<v Speaker 1>So we create the namespace.

01:04:21.190 --> 01:04:23.350
<v Speaker 1>Let's mount our file. So we'll see

01:04:24.435 --> 01:04:26.115
<v Speaker 1>web file, anonymous,

01:04:27.155 --> 01:04:28.755
<v Speaker 1>mounted file.

01:04:29.315 --> 01:04:31.475
<v Speaker 1>We wanna mount it to I'm just gonna

01:04:31.475 --> 01:04:34.115
<v Speaker 1>call this helmvalues.YAML.

01:04:35.155 --> 01:04:35.795
<v Speaker 1>And here,

01:04:39.089 --> 01:04:41.250
<v Speaker 1>we have to provide the source.

01:04:41.890 --> 01:04:43.329
<v Speaker 1>I don't think that can be just a

01:04:43.329 --> 01:04:43.970
<v Speaker 1>string.

01:04:45.089 --> 01:04:46.769
<v Speaker 2>Well, when you wanna get to Maybe I

01:04:46.769 --> 01:04:48.049
<v Speaker 1>can do that. Maybe it was web file

01:04:48.049 --> 01:04:49.329
<v Speaker 1>I want, and that allows me just to

01:04:49.329 --> 01:04:49.890
<v Speaker 1>see.

01:04:50.450 --> 01:04:52.975
<v Speaker 1>Let's check. I'll work this out. So are

01:04:52.975 --> 01:04:55.695
<v Speaker 2>you are you grabbing the the file that

01:04:55.695 --> 01:04:57.455
<v Speaker 2>we have on the doc site?

01:04:59.215 --> 01:05:01.535
<v Speaker 1>Well, no. Because the diff there that's the

01:05:01.535 --> 01:05:02.495
<v Speaker 1>defaults. Right?

01:05:03.135 --> 01:05:04.655
<v Speaker 2>Well, it it's

01:05:05.215 --> 01:05:05.615
<v Speaker 2>sorta.

01:05:06.380 --> 01:05:07.500
<v Speaker 2>We actually don't

01:05:08.620 --> 01:05:10.460
<v Speaker 2>we we use the default

01:05:10.460 --> 01:05:11.260
<v Speaker 2>values

01:05:11.260 --> 01:05:11.980
<v Speaker 2>because

01:05:13.500 --> 01:05:15.980
<v Speaker 2>we try and maintain backwards compatibility.

01:05:16.460 --> 01:05:18.540
<v Speaker 2>And so we've got customers

01:05:19.185 --> 01:05:22.225
<v Speaker 2>that run older versions of the charts.

01:05:22.545 --> 01:05:25.505
<v Speaker 2>So we we tend not to force you

01:05:25.505 --> 01:05:27.665
<v Speaker 2>to use the default. We don't rely on

01:05:27.665 --> 01:05:28.865
<v Speaker 2>the default values.

01:05:29.105 --> 01:05:31.425
<v Speaker 2>We we say start with this and then

01:05:31.425 --> 01:05:34.625
<v Speaker 2>customize it because it's going across multiple charts.

01:05:35.550 --> 01:05:37.550
<v Speaker 2>So, really, what you wanna do is either

01:05:37.550 --> 01:05:38.670
<v Speaker 2>pull that in

01:05:40.190 --> 01:05:42.350
<v Speaker 2>and custom and update

01:05:42.830 --> 01:05:44.910
<v Speaker 2>you know, what I generally do is I

01:05:44.910 --> 01:05:45.950
<v Speaker 2>pull that in.

01:05:46.830 --> 01:05:48.830
<v Speaker 2>I up I convert it to JSON.

01:05:50.105 --> 01:05:52.505
<v Speaker 2>I make the updates to the JSON, and

01:05:52.505 --> 01:05:54.745
<v Speaker 2>then I output it as YAML.

01:05:55.704 --> 01:05:56.825
<v Speaker 2>Does that make sense?

01:05:59.305 --> 01:06:01.145
<v Speaker 1>Okay. We'll we'll work it out.

01:06:02.425 --> 01:06:03.704
<v Speaker 1>I'm trying to remember how I get a

01:06:03.704 --> 01:06:04.265
<v Speaker 1>file, Marcos.

01:06:05.600 --> 01:06:07.040
<v Speaker 1>You got an assist there?

01:06:08.640 --> 01:06:10.720
<v Speaker 1>Creating a file from a string. I remember

01:06:10.720 --> 01:06:11.680
<v Speaker 1>it's possible.

01:06:11.760 --> 01:06:13.200
<v Speaker 1>Let's check the docs.

01:06:19.600 --> 01:06:20.000
<v Speaker 1>File.

01:06:26.795 --> 01:06:27.755
<v Speaker 1>There is a way.

01:06:35.980 --> 01:06:37.339
<v Speaker 1>Maybe I just need to write it to

01:06:37.339 --> 01:06:39.420
<v Speaker 1>a local file and fill in

01:06:39.980 --> 01:06:42.140
<v Speaker 1>with new file. Thank you, Marcus.

01:06:42.220 --> 01:06:43.420
<v Speaker 1>I just could

01:06:44.299 --> 01:06:45.819
<v Speaker 1>not for the life of me get that.

01:06:47.735 --> 01:06:48.375
<v Speaker 1>Okay.

01:06:48.855 --> 01:06:50.855
<v Speaker 1>And that just wants a string. Right?

01:06:52.695 --> 01:06:54.695
<v Speaker 1>Yeah. String contents. Sweet.

01:06:54.935 --> 01:06:56.615
<v Speaker 1>So that is going to be our helm

01:06:56.615 --> 01:06:57.495
<v Speaker 1>values,

01:06:57.495 --> 01:06:58.375
<v Speaker 1>and then

01:07:00.770 --> 01:07:02.690
<v Speaker 1>we need to convert that to

01:07:02.850 --> 01:07:03.810
<v Speaker 1>YAML.

01:07:11.650 --> 01:07:13.730
<v Speaker 1>What have we got? Where is it? Package

01:07:13.730 --> 01:07:14.210
<v Speaker 1>JSON.

01:07:19.365 --> 01:07:20.085
<v Speaker 1>Yeah.

01:07:20.405 --> 01:07:21.445
<v Speaker 1>MPM.

01:07:21.845 --> 01:07:22.565
<v Speaker 1>Oh,

01:07:25.365 --> 01:07:26.244
<v Speaker 1>I don't need to do it.

01:07:29.140 --> 01:07:30.580
<v Speaker 1>Dagger will do it.

01:07:31.220 --> 01:07:33.060
<v Speaker 1>Or will it need the node modules? I

01:07:33.060 --> 01:07:34.420
<v Speaker 1>guess we're gonna find out.

01:07:37.619 --> 01:07:38.820
<v Speaker 1>Node. Js

01:07:38.900 --> 01:07:40.420
<v Speaker 1>struct or object.

01:07:44.675 --> 01:07:46.195
<v Speaker 1>Marcus will be out at the screen now

01:07:46.195 --> 01:07:47.715
<v Speaker 1>going, you should just have done a fail.

01:07:47.715 --> 01:07:49.475
<v Speaker 1>Why are you doing a fancy interface?

01:07:49.875 --> 01:07:50.755
<v Speaker 1>Alright.

01:07:51.635 --> 01:07:52.755
<v Speaker 1>GS YAML.

01:07:59.370 --> 01:08:00.250
<v Speaker 1>Cool.

01:08:03.210 --> 01:08:04.330
<v Speaker 1>No. I don't need to do a new

01:08:04.330 --> 01:08:05.690
<v Speaker 1>one to solve so I can get the

01:08:05.690 --> 01:08:06.090
<v Speaker 1>completion,

01:08:06.890 --> 01:08:08.730
<v Speaker 1>or I could just copy an example.

01:08:10.810 --> 01:08:12.330
<v Speaker 1>You know, it'll do

01:08:12.665 --> 01:08:14.665
<v Speaker 1>YAML dot dump, I'm assuming.

01:08:15.865 --> 01:08:16.984
<v Speaker 1>Yeah. Okay.

01:08:18.185 --> 01:08:18.824
<v Speaker 1>So

01:08:19.944 --> 01:08:21.145
<v Speaker 1>YAML

01:08:21.145 --> 01:08:22.264
<v Speaker 1>dot dump,

01:08:22.505 --> 01:08:25.864
<v Speaker 1>and that's going to be our helm values.

01:08:28.090 --> 01:08:29.849
<v Speaker 1>And the import is

01:08:30.090 --> 01:08:31.050
<v Speaker 1>GS YAML.

01:08:42.775 --> 01:08:43.655
<v Speaker 2>Cool.

01:08:46.855 --> 01:08:49.655
<v Speaker 1>So let's just make sure that works

01:08:51.815 --> 01:08:53.575
<v Speaker 1>by using our terminal trick.

01:08:59.229 --> 01:09:00.510
<v Speaker 1>Yeah.

01:09:08.270 --> 01:09:09.310
<v Speaker 1>Marikos is smiling.

01:09:11.415 --> 01:09:13.014
<v Speaker 1>That's not a happy smile.

01:09:16.534 --> 01:09:18.614
<v Speaker 1>But I do think there's value. Honestly,

01:09:19.335 --> 01:09:20.774
<v Speaker 1>this is just like, being able to do

01:09:20.774 --> 01:09:23.190
<v Speaker 1>something like that is what makes me happy

01:09:23.190 --> 01:09:24.950
<v Speaker 1>with doing things as code and then building

01:09:24.950 --> 01:09:27.110
<v Speaker 1>functions and then sharing them and all being

01:09:27.110 --> 01:09:30.550
<v Speaker 1>composable and publishable to NPM or whatever. Like,

01:09:30.550 --> 01:09:32.470
<v Speaker 1>that to me just makes things fun. Plus,

01:09:32.470 --> 01:09:34.630
<v Speaker 1>you know what? I can test this now.

01:09:34.950 --> 01:09:37.030
<v Speaker 1>We can write a function to put in

01:09:37.455 --> 01:09:39.534
<v Speaker 1>wrong host names and stuff and build test

01:09:39.534 --> 01:09:41.375
<v Speaker 1>against it. There's just so much power in

01:09:41.375 --> 01:09:42.734
<v Speaker 1>this as code approach.

01:09:42.974 --> 01:09:44.814
<v Speaker 2>Well, yeah. I mean, that that's one of

01:09:44.814 --> 01:09:46.974
<v Speaker 2>the reasons why we built OU Control in

01:09:46.974 --> 01:09:49.135
<v Speaker 2>the first place was

01:09:49.710 --> 01:09:52.270
<v Speaker 2>most of the the issues that were being

01:09:52.270 --> 01:09:54.190
<v Speaker 2>opened up about OpenUnison

01:09:54.190 --> 01:09:54.990
<v Speaker 2>installed

01:09:55.070 --> 01:09:56.190
<v Speaker 2>were either

01:09:56.830 --> 01:09:59.390
<v Speaker 2>confusion about what the host names were supposed

01:09:59.390 --> 01:10:00.030
<v Speaker 2>to be

01:10:00.750 --> 01:10:01.150
<v Speaker 2>or,

01:10:03.235 --> 01:10:05.075
<v Speaker 2>like, missing certificates.

01:10:05.315 --> 01:10:06.675
<v Speaker 2>And so one of the things we were

01:10:06.675 --> 01:10:09.075
<v Speaker 2>doing we were doing, like, OU Control

01:10:09.235 --> 01:10:11.075
<v Speaker 2>is make sure that you don't have all

01:10:11.395 --> 01:10:13.635
<v Speaker 2>don't have any of those host names get

01:10:13.635 --> 01:10:15.875
<v Speaker 2>repeated because people were trying to jam in

01:10:15.875 --> 01:10:18.040
<v Speaker 2>the same host name to all three. I

01:10:18.040 --> 01:10:19.640
<v Speaker 2>was like, no. They gotta be different. So

01:10:19.640 --> 01:10:20.760
<v Speaker 2>just having

01:10:20.760 --> 01:10:21.560
<v Speaker 2>a way

01:10:22.040 --> 01:10:23.960
<v Speaker 2>beyond just a template to be able to

01:10:23.960 --> 01:10:24.600
<v Speaker 2>say,

01:10:24.920 --> 01:10:27.320
<v Speaker 2>hey. Here's some business logic. That's huge.

01:10:29.240 --> 01:10:31.560
<v Speaker 1>How can I just get the IP address?

01:10:33.035 --> 01:10:34.235
<v Speaker 1>The host name,

01:10:37.355 --> 01:10:39.435
<v Speaker 1>which returns a promise.

01:10:40.075 --> 01:10:42.715
<v Speaker 2>And Marcos all code is real code.

01:10:46.060 --> 01:10:46.940
<v Speaker 1>Whatever.

01:10:47.260 --> 01:10:49.660
<v Speaker 1>Const host name equals

01:10:49.660 --> 01:10:52.060
<v Speaker 1>await k three s server

01:10:52.940 --> 01:10:53.900
<v Speaker 1>host name.

01:10:55.340 --> 01:10:56.300
<v Speaker 1>Yeah. Sure. Sure.

01:10:59.815 --> 01:11:01.495
<v Speaker 1>Yeah. I can't use the endpoint because I'd

01:11:01.495 --> 01:11:03.735
<v Speaker 1>have to, like, regex out the the port

01:11:03.735 --> 01:11:06.295
<v Speaker 1>number and stuff. The host name should just

01:11:06.295 --> 01:11:07.815
<v Speaker 1>return what I expect,

01:11:08.695 --> 01:11:10.615
<v Speaker 1>but we will confirm that. This gives me

01:11:10.615 --> 01:11:12.455
<v Speaker 1>an object which now can be dumped.

01:11:13.210 --> 01:11:13.769
<v Speaker 1>So

01:11:14.489 --> 01:11:17.050
<v Speaker 1>we should be looking a bit better

01:11:17.530 --> 01:11:18.409
<v Speaker 1>with this

01:11:20.010 --> 01:11:21.689
<v Speaker 1>as real code. I mean,

01:11:22.329 --> 01:11:24.090
<v Speaker 1>I I misheard what you were saying there,

01:11:24.090 --> 01:11:26.554
<v Speaker 1>Mark. He's he's slagging my code and saying

01:11:26.554 --> 01:11:27.915
<v Speaker 1>it's not real code, but it is real

01:11:27.915 --> 01:11:29.275
<v Speaker 1>code. Ah, okay.

01:11:31.114 --> 01:11:33.755
<v Speaker 1>Means contrived. Not contrived because we're solving a

01:11:33.755 --> 01:11:36.715
<v Speaker 1>real problem today, but, you know, we're we're

01:11:36.715 --> 01:11:37.515
<v Speaker 1>trying to move fast.

01:11:38.950 --> 01:11:41.030
<v Speaker 1>Alright. With a break. We're breaking things.

01:11:41.510 --> 01:11:43.270
<v Speaker 1>I'm always breaking things.

01:11:44.630 --> 01:11:46.310
<v Speaker 1>Invalid selection for terminal.

01:11:59.545 --> 01:12:01.465
<v Speaker 1>Oh, it's saying no function deploy.

01:12:03.145 --> 01:12:04.105
<v Speaker 1>Function deploy.

01:12:06.969 --> 01:12:08.489
<v Speaker 1>Not complete.

01:12:14.489 --> 01:12:16.489
<v Speaker 1>K. What did I get wrong in my

01:12:16.489 --> 01:12:16.889
<v Speaker 1>code?

01:12:19.465 --> 01:12:22.025
<v Speaker 1>Oh, wait. Expect isn't equals. Oh, okay. It's

01:12:22.025 --> 01:12:23.545
<v Speaker 1>because I changed that from an interface dot

01:12:23.545 --> 01:12:24.105
<v Speaker 1>type.

01:12:25.465 --> 01:12:26.985
<v Speaker 1>Because I thought that was the first error

01:12:26.985 --> 01:12:28.505
<v Speaker 1>was and then realized that we weren't actually

01:12:28.505 --> 01:12:30.505
<v Speaker 1>setting helm values to anything. So

01:12:32.780 --> 01:12:34.300
<v Speaker 1>good thing I'm paying attention.

01:12:37.100 --> 01:12:39.020
<v Speaker 1>How are you enjoying the TypeScript, Mark, being

01:12:39.020 --> 01:12:40.619
<v Speaker 1>a Java developer?

01:12:41.180 --> 01:12:43.580
<v Speaker 2>You know, I've never actually used I use

01:12:43.580 --> 01:12:45.580
<v Speaker 2>a lot of JavaScript. I've never used TypeScript.

01:12:45.580 --> 01:12:46.220
<v Speaker 2>I like it.

01:12:47.035 --> 01:12:47.435
<v Speaker 2>It's

01:12:48.075 --> 01:12:49.755
<v Speaker 2>I like the that's the one thing that

01:12:49.755 --> 01:12:51.995
<v Speaker 2>drives me nuts about JavaScript is the lack

01:12:51.995 --> 01:12:52.795
<v Speaker 2>of typing.

01:12:54.315 --> 01:12:56.235
<v Speaker 1>Yeah. TypeScript is pretty sweet.

01:12:57.515 --> 01:12:59.035
<v Speaker 1>Alright. Look at that.

01:13:00.410 --> 01:13:01.770
<v Speaker 1>I think we're cooking.

01:13:02.170 --> 01:13:05.130
<v Speaker 2>We're getting there. Although those are those host

01:13:05.130 --> 01:13:07.690
<v Speaker 2>names aren't gonna work, I don't think. Yeah.

01:13:07.690 --> 01:13:09.850
<v Speaker 1>That's it. Oh. Yeah. Because if you send

01:13:09.850 --> 01:13:11.770
<v Speaker 2>that to that IO, I don't think that

01:13:11.770 --> 01:13:14.415
<v Speaker 2>that's gonna work. You need the API. Yeah.

01:13:14.415 --> 01:13:16.094
<v Speaker 1>So we do need to use

01:13:18.335 --> 01:13:20.175
<v Speaker 1>I mean, we could always resolve it,

01:13:24.830 --> 01:13:26.110
<v Speaker 1>But it would be nice just to get

01:13:26.110 --> 01:13:27.389
<v Speaker 1>the IP address.

01:13:27.790 --> 01:13:30.750
<v Speaker 2>Is there a DNS function in,

01:13:31.310 --> 01:13:32.829
<v Speaker 2>excuse me, in Dagger?

01:13:35.790 --> 01:13:37.790
<v Speaker 2>Guess it won't be DNS, though.

01:13:38.270 --> 01:13:38.590
<v Speaker 2>Right?

01:13:40.145 --> 01:13:42.225
<v Speaker 1>Well, there is DNS. Right? Like, if I

01:13:42.225 --> 01:13:43.264
<v Speaker 1>run this again

01:13:45.265 --> 01:13:48.225
<v Speaker 2>Right. But isn't that hostname mounted that hostname

01:13:48.225 --> 01:13:50.864
<v Speaker 2>is probably mounted in your Docker container

01:13:51.105 --> 01:13:51.985
<v Speaker 2>as a,

01:13:52.705 --> 01:13:54.785
<v Speaker 2>Etsy host. It's not Yeah.

01:13:55.820 --> 01:13:57.500
<v Speaker 1>But, I mean, we can still resolve that

01:13:57.500 --> 01:13:58.380
<v Speaker 1>by running,

01:13:58.940 --> 01:14:01.340
<v Speaker 1>let's see. Peter is here. Right? Well, we

01:14:01.340 --> 01:14:02.300
<v Speaker 1>grab this

01:14:03.100 --> 01:14:04.060
<v Speaker 1>and

01:14:06.860 --> 01:14:07.180
<v Speaker 1>ping.

01:14:11.594 --> 01:14:13.274
<v Speaker 1>It still resolves.

01:14:17.034 --> 01:14:18.954
<v Speaker 1>I don't have any commands to run. No.

01:14:18.954 --> 01:14:20.235
<v Speaker 1>What what have you left me?

01:14:21.114 --> 01:14:23.514
<v Speaker 2>Try just curl. It'll

01:14:23.850 --> 01:14:25.850
<v Speaker 2>at least give me an IP address even

01:14:25.850 --> 01:14:26.969
<v Speaker 2>if it doesn't work.

01:14:28.409 --> 01:14:29.449
<v Speaker 1>Oh, and then it's

01:14:30.330 --> 01:14:32.170
<v Speaker 1>well, you said there was NGINX in there.

01:14:32.170 --> 01:14:32.650
<v Speaker 1>That

01:14:33.130 --> 01:14:34.250
<v Speaker 1>actually should work. Right?

01:14:43.555 --> 01:14:44.755
<v Speaker 1>Let me think. Let me think.

01:14:51.110 --> 01:14:53.189
<v Speaker 1>Okay. So we got an IP address

01:14:53.909 --> 01:14:55.669
<v Speaker 1>and our KubeConfig.

01:14:57.670 --> 01:14:59.349
<v Speaker 1>Now this is gonna be horrible.

01:15:00.790 --> 01:15:02.309
<v Speaker 2>Mean, horrible. Parse it out of there?

01:15:04.534 --> 01:15:07.094
<v Speaker 1>Yeah. Totally. Unless Marcos could tell me how

01:15:07.094 --> 01:15:10.294
<v Speaker 1>to get an IP address from this endpoint.

01:15:10.935 --> 01:15:12.614
<v Speaker 1>I mean, is endpoint gonna be the IP,

01:15:12.614 --> 01:15:13.815
<v Speaker 1>or is that gonna be the host name

01:15:13.815 --> 01:15:15.895
<v Speaker 1>too? Let's let's check that first, right, before

01:15:15.895 --> 01:15:18.720
<v Speaker 1>I go doing some really bad, bad, bad,

01:15:18.720 --> 01:15:19.760
<v Speaker 1>bad things.

01:15:20.080 --> 01:15:21.840
<v Speaker 2>You did a bad, bad thing?

01:15:23.200 --> 01:15:25.040
<v Speaker 1>Let's see what the endpoint is because maybe

01:15:25.040 --> 01:15:26.720
<v Speaker 1>that's gonna be a lot easier to parse

01:15:26.720 --> 01:15:28.240
<v Speaker 1>than me rejecting

01:15:28.240 --> 01:15:29.200
<v Speaker 1>the KubeConfig.

01:15:46.670 --> 01:15:47.950
<v Speaker 1>But I'm sure we could speak to the

01:15:47.950 --> 01:15:49.950
<v Speaker 1>Dagger team and just get a

01:15:50.350 --> 01:15:51.870
<v Speaker 1>an IP address from this.

01:16:01.195 --> 01:16:03.515
<v Speaker 1>No. The endpoint also appears to be.

01:16:13.880 --> 01:16:14.679
<v Speaker 1>Alright.

01:16:15.960 --> 01:16:17.880
<v Speaker 1>So we need to do this from the

01:16:17.880 --> 01:16:18.920
<v Speaker 1>KubeConfig.

01:16:21.480 --> 01:16:22.679
<v Speaker 1>So

01:16:27.295 --> 01:16:29.135
<v Speaker 1>we can't do this yet

01:16:29.695 --> 01:16:31.695
<v Speaker 1>because we need to be

01:16:33.614 --> 01:16:34.494
<v Speaker 1>here.

01:16:35.775 --> 01:16:37.855
<v Speaker 1>We can kinda just say that's fine,

01:16:40.050 --> 01:16:41.570
<v Speaker 1>But now we need to run a command

01:16:41.570 --> 01:16:43.810
<v Speaker 1>inside this container. So we're gonna get IP

01:16:43.810 --> 01:16:44.449
<v Speaker 1>address,

01:16:46.130 --> 01:16:47.329
<v Speaker 1>which is equal.

01:16:47.730 --> 01:16:50.050
<v Speaker 1>Instead of returning this, we're gonna assign it.

01:16:50.050 --> 01:16:51.249
<v Speaker 1>So this is our

01:16:51.650 --> 01:16:53.170
<v Speaker 1>setup

01:16:53.725 --> 01:16:55.085
<v Speaker 1>Helm container.

01:16:55.325 --> 01:16:57.565
<v Speaker 1>Horrible name. Horrible, horrible name.

01:16:59.325 --> 01:17:01.005
<v Speaker 2>Mhmm. So we could do we

01:17:02.045 --> 01:17:04.364
<v Speaker 1>could do another web exec where we're going

01:17:04.364 --> 01:17:06.525
<v Speaker 1>to do a cat

01:17:07.630 --> 01:17:08.429
<v Speaker 1>on

01:17:08.670 --> 01:17:09.630
<v Speaker 1>temp

01:17:09.790 --> 01:17:10.590
<v Speaker 1>Kube

01:17:10.910 --> 01:17:12.670
<v Speaker 1>config. Now I could probably actually have just

01:17:12.670 --> 01:17:12.910
<v Speaker 1>a

01:17:14.510 --> 01:17:16.110
<v Speaker 1>can we get it from Kube control?

01:17:17.390 --> 01:17:18.590
<v Speaker 1>Can you run Kube control?

01:17:21.625 --> 01:17:23.065
<v Speaker 1>Yeah. You can. Right?

01:17:24.905 --> 01:17:26.585
<v Speaker 2>K. Get notes.

01:17:27.385 --> 01:17:29.305
<v Speaker 2>Do you have VPN? No. Not on my

01:17:29.305 --> 01:17:29.625
<v Speaker 2>VPN.

01:17:31.800 --> 01:17:34.039
<v Speaker 1>I'm just gonna parse it. So

01:17:34.840 --> 01:17:36.280
<v Speaker 1>and then we can do a setup Helm

01:17:36.280 --> 01:17:38.679
<v Speaker 1>cluster, web new file, Helm values. So now

01:17:38.679 --> 01:17:40.440
<v Speaker 1>we need our Helm values here, and it's

01:17:40.440 --> 01:17:41.559
<v Speaker 1>actually going to be,

01:17:43.320 --> 01:17:45.079
<v Speaker 1>I think that's in a way to get

01:17:45.079 --> 01:17:45.800
<v Speaker 1>string

01:17:46.425 --> 01:17:48.105
<v Speaker 1>and IP address,

01:17:48.185 --> 01:17:50.025
<v Speaker 1>and we're gonna try and capture.

01:17:54.025 --> 01:17:56.105
<v Speaker 1>Substring.

01:17:57.545 --> 01:17:58.425
<v Speaker 1>Nope.

01:17:58.745 --> 01:17:59.705
<v Speaker 1>Fained.

01:17:59.785 --> 01:18:00.265
<v Speaker 1>Nope.

01:18:02.100 --> 01:18:04.019
<v Speaker 1>Can't remember I had to regex.

01:18:08.659 --> 01:18:09.619
<v Speaker 1>Search.

01:18:12.580 --> 01:18:14.340
<v Speaker 1>Can I do regex?

01:18:14.340 --> 01:18:14.900
<v Speaker 1>Nope.

01:18:16.305 --> 01:18:17.665
<v Speaker 1>Let's Google it.

01:18:19.505 --> 01:18:20.225
<v Speaker 1>JS

01:18:20.465 --> 01:18:22.225
<v Speaker 1>regex extract

01:18:22.225 --> 01:18:23.345
<v Speaker 1>from string.

01:18:32.160 --> 01:18:33.040
<v Speaker 1>Undo.

01:18:38.480 --> 01:18:41.040
<v Speaker 1>Okay. So what we want to get is

01:18:44.325 --> 01:18:45.445
<v Speaker 1>scroll up.

01:18:45.605 --> 01:18:48.245
<v Speaker 1>We start that cat output. Yes. We want

01:18:48.245 --> 01:18:48.965
<v Speaker 1>this.

01:18:50.005 --> 01:18:51.925
<v Speaker 1>But we're regexing for this.

01:18:54.005 --> 01:18:55.285
<v Speaker 1>Well, it's server

01:18:55.960 --> 01:18:56.919
<v Speaker 1>colon

01:18:57.159 --> 01:18:58.199
<v Speaker 1>space

01:18:58.199 --> 01:18:59.159
<v Speaker 1>http

01:18:59.159 --> 01:18:59.800
<v Speaker 1>s

01:19:01.559 --> 01:19:02.999
<v Speaker 1>capture group.

01:19:05.639 --> 01:19:08.280
<v Speaker 1>We can just do dot star because we

01:19:08.280 --> 01:19:11.185
<v Speaker 1>have a deterministic end, which a colon six

01:19:11.185 --> 01:19:12.304
<v Speaker 1>four four three.

01:19:13.344 --> 01:19:16.224
<v Speaker 1>We can then see that our IP address

01:19:18.225 --> 01:19:23.985
<v Speaker 1>is 1

01:19:26.200 --> 01:19:27.880
<v Speaker 1>Are there any functions on that to make

01:19:27.880 --> 01:19:30.040
<v Speaker 1>sure I'm getting the right capture?

01:19:32.200 --> 01:19:32.920
<v Speaker 1>No.

01:19:36.520 --> 01:19:37.239
<v Speaker 1>Okay.

01:19:38.200 --> 01:19:39.560
<v Speaker 1>K. Config.

01:19:45.915 --> 01:19:47.355
<v Speaker 1>And here,

01:19:50.555 --> 01:19:51.915
<v Speaker 1>So I need to make sure that's gonna

01:19:51.915 --> 01:19:52.555
<v Speaker 1>be a string.

01:19:54.670 --> 01:19:56.270
<v Speaker 1>So this is returning.

01:19:56.270 --> 01:19:58.030
<v Speaker 1>I need to work it. I should close

01:19:58.030 --> 01:19:59.869
<v Speaker 1>that tab too quickly. It's in there.

01:20:00.830 --> 01:20:01.630
<v Speaker 1>Where do you want?

01:20:13.205 --> 01:20:14.245
<v Speaker 1>Let's return this.

01:20:22.320 --> 01:20:24.160
<v Speaker 2>Yeah. Marcos is right. It should be the

01:20:24.160 --> 01:20:25.840
<v Speaker 2>load balancer IP, not the

01:20:26.880 --> 01:20:28.320
<v Speaker 2>oh, wait a minute.

01:20:29.040 --> 01:20:30.720
<v Speaker 2>This is so much easier than we're making

01:20:30.720 --> 01:20:31.360
<v Speaker 2>it.

01:20:31.600 --> 01:20:32.960
<v Speaker 1>Oh, help me.

01:20:33.520 --> 01:20:36.400
<v Speaker 2>Yeah. Because get service

01:20:37.485 --> 01:20:39.005
<v Speaker 2>and Ingress

01:20:39.005 --> 01:20:40.124
<v Speaker 2>NGINX.

01:20:40.125 --> 01:20:40.764
<v Speaker 2>Right?

01:20:41.885 --> 01:20:44.765
<v Speaker 2>So the service is gonna be your Ingress

01:20:44.765 --> 01:20:46.125
<v Speaker 2>NGINX controller.

01:20:50.460 --> 01:20:51.579
<v Speaker 2>And then

01:20:54.860 --> 01:20:58.300
<v Speaker 2>you're going to pipe that into

01:20:59.420 --> 01:21:01.099
<v Speaker 2>you're gonna do dash o

01:21:02.060 --> 01:21:02.540
<v Speaker 2>JSON.

01:21:03.885 --> 01:21:07.004
<v Speaker 2>Pipe that into j q dash r,

01:21:07.085 --> 01:21:08.764
<v Speaker 2>and you're gonna want

01:21:11.565 --> 01:21:12.204
<v Speaker 2>dot

01:21:12.684 --> 01:21:13.484
<v Speaker 2>spec

01:21:14.925 --> 01:21:17.324
<v Speaker 2>dot

01:21:23.900 --> 01:21:26.220
<v Speaker 2>oh, because this particular service doesn't actually have

01:21:26.220 --> 01:21:27.580
<v Speaker 2>a load balancer IP.

01:21:29.340 --> 01:21:31.315
<v Speaker 2>Export config.

01:21:31.315 --> 01:21:33.395
<v Speaker 2>That's temp. KOU.

01:21:34.435 --> 01:21:36.034
<v Speaker 2>Oh, yeah. That's the one.

01:21:37.395 --> 01:21:39.395
<v Speaker 2>I'll get to this cluster.

01:21:39.555 --> 01:21:41.795
<v Speaker 2>Ah, who makes me use MFA for everything?

01:21:41.795 --> 01:21:43.155
<v Speaker 2>Oh, right. Never mind.

01:21:45.180 --> 01:21:45.820
<v Speaker 2>Okay.

01:21:46.780 --> 01:21:48.219
<v Speaker 2>K. Get service.

01:21:48.620 --> 01:21:49.579
<v Speaker 2>Ingress.

01:21:50.940 --> 01:21:51.340
<v Speaker 2>Internet.

01:21:57.045 --> 01:21:58.645
<v Speaker 2>K namespace.

01:21:58.885 --> 01:22:00.244
<v Speaker 2>Yeah. The Service.

01:22:00.645 --> 01:22:02.485
<v Speaker 1>This is the end this is the end

01:22:02.485 --> 01:22:04.805
<v Speaker 1>cluster address. Right? That's not the one we

01:22:04.805 --> 01:22:05.284
<v Speaker 1>want.

01:22:05.685 --> 01:22:11.045
<v Speaker 2>No. You want the load balancer.

01:22:08.240 --> 01:22:09.920
<v Speaker 1>No. The way I'm doing it is right.

01:22:09.920 --> 01:22:11.520
<v Speaker 1>We don't need the load balancer because we're

01:22:11.760 --> 01:22:14.480
<v Speaker 1>if kube control is working, that's the IP

01:22:14.480 --> 01:22:16.480
<v Speaker 1>address that we want. Right. But the IP

01:22:16.480 --> 01:22:17.200
<v Speaker 2>address

01:22:17.680 --> 01:22:20.320
<v Speaker 2>is gonna go to the load balancer

01:22:20.880 --> 01:22:21.680
<v Speaker 2>for

01:22:22.240 --> 01:22:23.520
<v Speaker 2>the NGINX.

01:22:26.225 --> 01:22:28.785
<v Speaker 2>So if there's a different interface that NGINX

01:22:28.785 --> 01:22:30.065
<v Speaker 2>is listening on

01:22:32.225 --> 01:22:34.545
<v Speaker 2>because that's what Marcos is saying is

01:22:38.880 --> 01:22:41.200
<v Speaker 1>I'm gonna keep going. I I think I'm

01:22:41.200 --> 01:22:41.760
<v Speaker 1>right.

01:22:43.520 --> 01:22:45.760
<v Speaker 1>I'm not seeing I'm gonna keep going.

01:22:46.400 --> 01:22:47.280
<v Speaker 2>That way

01:22:48.560 --> 01:22:49.920
<v Speaker 2>that way we got it in our back

01:22:49.920 --> 01:22:51.040
<v Speaker 2>pocket. How about that?

01:22:55.155 --> 01:22:56.114
<v Speaker 1>20.

01:22:56.114 --> 01:22:57.235
<v Speaker 1>So y

01:22:57.554 --> 01:22:58.434
<v Speaker 1>0.

01:22:58.515 --> 01:23:01.074
<v Speaker 1>That return to string. That's

01:23:01.074 --> 01:23:02.434
<v Speaker 2>base

01:23:03.395 --> 01:23:04.675
<v Speaker 2>dot spec.

01:23:07.099 --> 01:23:09.340
<v Speaker 1>Alright. Let's see what we get with that.

01:23:14.300 --> 01:23:15.659
<v Speaker 2>Status? Oh, I see.

01:23:20.845 --> 01:23:22.845
<v Speaker 1>I think Marikos is tapped out. He's like,

01:23:22.845 --> 01:23:23.565
<v Speaker 1>fuck these guys.

01:23:35.130 --> 01:23:36.169
<v Speaker 2>There we go.

01:23:36.809 --> 01:23:42.170
<v Speaker 2>Two j q dash r dot status.

01:23:47.385 --> 01:23:48.345
<v Speaker 2>Dot

01:23:48.425 --> 01:23:49.385
<v Speaker 2>ingress.

01:23:53.385 --> 01:23:54.105
<v Speaker 2>No.

01:23:54.825 --> 01:23:56.985
<v Speaker 2>Or no. Got lot of balance. Rejects didn't

01:23:56.985 --> 01:23:57.385
<v Speaker 1>match.

01:24:01.490 --> 01:24:02.850
<v Speaker 2>No. What what?

01:24:03.010 --> 01:24:05.170
<v Speaker 2>Oh, it's a camel case.

01:24:12.145 --> 01:24:14.865
<v Speaker 1>Shouldn't have charged it my version. I'm super

01:24:14.865 --> 01:24:16.705
<v Speaker 2>awesome at typing, by the way. I just

01:24:16.705 --> 01:24:17.905
<v Speaker 2>wanna point that out.

01:24:23.185 --> 01:24:25.025
<v Speaker 2>Type for a living, and I never figured

01:24:25.025 --> 01:24:26.225
<v Speaker 2>out how to touch type.

01:24:28.210 --> 01:24:30.610
<v Speaker 1>Boom. Okay. My Regex is good.

01:24:32.290 --> 01:24:33.329
<v Speaker 1>Group one.

01:24:33.730 --> 01:24:35.969
<v Speaker 2>I'm gonna give you this just as a

01:24:35.969 --> 01:24:37.409
<v Speaker 2>fallback if

01:24:38.850 --> 01:24:39.810
<v Speaker 2>you need it

01:24:40.975 --> 01:24:42.494
<v Speaker 2>because this gets me

01:24:43.215 --> 01:24:44.974
<v Speaker 2>it directly from

01:24:45.455 --> 01:24:47.455
<v Speaker 2>who we need rather than having a process.

01:24:47.695 --> 01:24:48.974
<v Speaker 1>Pull up a REPL.

01:24:50.095 --> 01:24:50.895
<v Speaker 1>Excel.

01:24:52.335 --> 01:24:52.815
<v Speaker 1>Js.

01:24:54.090 --> 01:24:56.410
<v Speaker 2>Yeah. Marcus is saying you need the external

01:24:56.410 --> 01:24:57.290
<v Speaker 2>IP.

01:25:02.890 --> 01:25:03.210
<v Speaker 1>No.

01:25:10.495 --> 01:25:12.415
<v Speaker 1>Oh, wait. I'm passing in the wrong oh

01:25:12.415 --> 01:25:13.375
<v Speaker 1>my god.

01:25:16.975 --> 01:25:18.015
<v Speaker 1>I hate myself.

01:25:19.909 --> 01:25:22.389
<v Speaker 2>Wanna hit yourself? That's what we're here for.

01:25:23.349 --> 01:25:25.590
<v Speaker 1>I mean, if I do it right,

01:25:26.389 --> 01:25:27.590
<v Speaker 1>let's say that,

01:25:28.150 --> 01:25:29.829
<v Speaker 1>Rx.exec

01:25:30.869 --> 01:25:33.270
<v Speaker 1>and pass in the rate value.

01:25:34.945 --> 01:25:36.784
<v Speaker 2>That's an error. There you go.

01:25:38.385 --> 01:25:39.105
<v Speaker 1>Then

01:25:39.505 --> 01:25:41.585
<v Speaker 1>in fact, I should have seen that. Const

01:25:41.824 --> 01:25:44.065
<v Speaker 1>a equals and then a

01:25:44.785 --> 01:25:45.744
<v Speaker 1>zero.

01:25:46.065 --> 01:25:46.465
<v Speaker 1>Oh.

01:25:49.179 --> 01:25:50.139
<v Speaker 1>I should be able

01:25:52.460 --> 01:25:53.419
<v Speaker 1>a one.

01:25:54.940 --> 01:25:56.060
<v Speaker 1>But I can see it here.

01:26:07.264 --> 01:26:10.144
<v Speaker 1>Wonder if the Rx just gets blown away.

01:26:11.425 --> 01:26:11.984
<v Speaker 1>Right.

01:26:14.545 --> 01:26:14.945
<v Speaker 1>So

01:26:16.030 --> 01:26:18.510
<v Speaker 1>far a b c equals r x dot

01:26:18.510 --> 01:26:19.790
<v Speaker 1>ex exec

01:26:22.030 --> 01:26:23.550
<v Speaker 1>with our server value.

01:26:29.495 --> 01:26:31.175
<v Speaker 1>Yeah. Okay. We're good.

01:26:32.215 --> 01:26:32.935
<v Speaker 1>Okay.

01:26:34.455 --> 01:26:36.295
<v Speaker 1>Let's get back in that computer now.

01:26:53.179 --> 01:26:54.780
<v Speaker 1>This is gonna work.

01:27:01.775 --> 01:27:03.455
<v Speaker 1>Shouldn't be getting too cocky, should I?

01:27:11.120 --> 01:27:13.120
<v Speaker 1>Load container from my okay. That's just my

01:27:13.120 --> 01:27:14.880
<v Speaker 1>Dagger code being wrong.

01:27:15.200 --> 01:27:15.920
<v Speaker 1>Container.

01:27:17.120 --> 01:27:18.239
<v Speaker 1>That worked.

01:27:21.280 --> 01:27:23.360
<v Speaker 1>We have weighted that, so that's fine.

01:27:26.555 --> 01:27:28.315
<v Speaker 1>Helm value should be okay.

01:27:28.635 --> 01:27:30.395
<v Speaker 1>And we can just debug that if we

01:27:30.395 --> 01:27:31.195
<v Speaker 1>need to.

01:27:32.795 --> 01:27:34.074
<v Speaker 1>Oh, I'm not returning.

01:27:34.795 --> 01:27:35.355
<v Speaker 1>There we go.

01:28:01.435 --> 01:28:03.435
<v Speaker 1>So this is going to get me my

01:28:03.435 --> 01:28:04.315
<v Speaker 1>terminal.

01:28:14.395 --> 01:28:14.795
<v Speaker 1>And

01:28:15.490 --> 01:28:16.849
<v Speaker 1>Oh, it's close.

01:28:22.850 --> 01:28:23.730
<v Speaker 1>There we go.

01:28:25.010 --> 01:28:25.890
<v Speaker 1>Wrong index.

01:28:29.235 --> 01:28:31.875
<v Speaker 1>Okay. I think that's fine. So let's

01:28:32.435 --> 01:28:34.595
<v Speaker 1>let's try it. Right? So what do we

01:28:34.595 --> 01:28:35.555
<v Speaker 1>want to do now? We want to do

01:28:35.555 --> 01:28:36.514
<v Speaker 1>a Helm deploy.

01:28:37.075 --> 01:28:38.275
<v Speaker 2>Right. So

01:28:38.835 --> 01:28:40.114
<v Speaker 2>we're gonna do

01:28:41.020 --> 01:28:43.420
<v Speaker 2>you look at the docs.

01:28:44.540 --> 01:28:45.500
<v Speaker 1>OpenUser.

01:28:45.500 --> 01:28:47.739
<v Speaker 1>The docs seem like so long ago.

01:28:48.220 --> 01:28:49.100
<v Speaker 2>I know.

01:28:50.780 --> 01:28:53.020
<v Speaker 1>Alright. So Oh, yeah. I'll send you manual.

01:28:53.180 --> 01:28:55.100
<v Speaker 2>Portal. Manual deployment.

01:28:58.764 --> 01:29:01.324
<v Speaker 2>So it's gonna be helm install.

01:29:01.965 --> 01:29:04.685
<v Speaker 2>Yep. Except we're gonna add two parameters to

01:29:04.685 --> 01:29:05.244
<v Speaker 2>it.

01:29:06.364 --> 01:29:08.205
<v Speaker 2>And I've gotta remember what they are off

01:29:08.205 --> 01:29:10.844
<v Speaker 2>the top of my head. Home install.

01:29:25.159 --> 01:29:28.760
<v Speaker 1>Dash f

01:29:26.915 --> 01:29:29.235
<v Speaker 1>temp helm eyes.

01:29:30.755 --> 01:29:33.235
<v Speaker 2>We're gonna do helm install.

01:29:37.955 --> 01:29:40.275
<v Speaker 1>Like that. Right? Wait. That's what we're gonna

01:29:40.275 --> 01:29:42.530
<v Speaker 2>do. Okay. So we're gonna do dash dash

01:29:42.530 --> 01:29:45.330
<v Speaker 2>wait and dash dash wait for jobs.

01:29:47.250 --> 01:29:49.330
<v Speaker 1>Yeah. Okay. Because we're doing this

01:29:49.890 --> 01:29:52.450
<v Speaker 1>with that. So it won't really matter for

01:29:52.450 --> 01:29:54.770
<v Speaker 2>this one, but for consistency's sake, I think

01:29:54.770 --> 01:29:55.489
<v Speaker 2>we should

01:29:55.895 --> 01:29:57.495
<v Speaker 1>Yeah. And we could actually just wrap this

01:29:57.495 --> 01:29:59.655
<v Speaker 1>helm install into a function and make them

01:29:59.735 --> 01:30:02.055
<v Speaker 1>Yeah. Happen all the time. Right? But let's

01:30:02.135 --> 01:30:03.735
<v Speaker 1>I wanna see us get something

01:30:04.535 --> 01:30:06.455
<v Speaker 1>running. I wanna see OpenUnison,

01:30:06.455 --> 01:30:09.255
<v Speaker 1>the operator running in this cluster. That will

01:30:09.255 --> 01:30:09.895
<v Speaker 1>make me happy.

01:30:33.565 --> 01:30:35.405
<v Speaker 2>So now this is starting a new k

01:30:35.405 --> 01:30:37.164
<v Speaker 2>threes with each one. Right?

01:30:37.485 --> 01:30:38.364
<v Speaker 1>It is indeed.

01:30:43.320 --> 01:30:44.840
<v Speaker 1>We're now waiting.

01:30:45.400 --> 01:30:47.320
<v Speaker 1>So the helm install is running.

01:30:51.720 --> 01:30:52.680
<v Speaker 1>Feeling pretty confident.

01:30:56.445 --> 01:30:58.045
<v Speaker 1>Oh, no. No. No. Is there something in

01:30:58.045 --> 01:30:59.965
<v Speaker 2>the two e to let you watch the

01:30:59.965 --> 01:31:00.844
<v Speaker 1>alpha

01:31:01.485 --> 01:31:04.525
<v Speaker 1>or again? Sorry? Did you mess something up?

01:31:05.005 --> 01:31:06.844
<v Speaker 1>No. I thought this o u was an

01:31:06.844 --> 01:31:09.730
<v Speaker 1>error, but I actually just called Oh. I

01:31:09.730 --> 01:31:11.489
<v Speaker 1>actually called it that. So it's it's fine.

01:31:20.255 --> 01:31:22.175
<v Speaker 2>Oh, so, like, did we now I'm a

01:31:22.175 --> 01:31:24.335
<v Speaker 2>little confused. Did we generate a new

01:31:25.055 --> 01:31:28.335
<v Speaker 2>file just based on the the couple configs

01:31:28.335 --> 01:31:29.615
<v Speaker 2>you made, or did you pull in

01:31:35.990 --> 01:31:37.510
<v Speaker 2>Well, there's the operator.

01:31:37.590 --> 01:31:38.550
<v Speaker 1>Yay.

01:31:39.430 --> 01:31:40.790
<v Speaker 1>Smashed it.

01:31:41.190 --> 01:31:43.590
<v Speaker 2>So can I see the gallery smile?

01:31:44.310 --> 01:31:45.590
<v Speaker 2>Yeah. I'm just curious.

01:31:48.870 --> 01:31:49.350
<v Speaker 1>Helm.

01:31:52.965 --> 01:31:54.085
<v Speaker 2>Okay. So

01:31:54.485 --> 01:31:56.645
<v Speaker 2>but we're gonna need so what I was

01:31:56.645 --> 01:31:59.204
<v Speaker 2>saying before is we've gotta take this

01:32:00.245 --> 01:32:02.965
<v Speaker 2>and merge it with that default values file

01:32:02.965 --> 01:32:04.164
<v Speaker 2>from the website,

01:32:04.165 --> 01:32:04.965
<v Speaker 2>from the documentation.

01:32:05.360 --> 01:32:07.360
<v Speaker 1>But if that's the defaults, that will just

01:32:07.360 --> 01:32:08.800
<v Speaker 1>be merged with the defaults.

01:32:09.760 --> 01:32:10.959
<v Speaker 2>So

01:32:11.119 --> 01:32:13.920
<v Speaker 2>that is not so the the one that

01:32:13.920 --> 01:32:15.840
<v Speaker 2>we have that we ask you to download

01:32:15.840 --> 01:32:18.559
<v Speaker 2>and start with is actually not

01:32:18.800 --> 01:32:20.239
<v Speaker 2>the default values

01:32:21.244 --> 01:32:24.284
<v Speaker 2>from inside the chart. Gotcha. Because it caused

01:32:24.844 --> 01:32:26.844
<v Speaker 2>us heartburn to go with that route.

01:32:29.085 --> 01:32:30.844
<v Speaker 1>Alright. So let's do this then.

01:32:37.010 --> 01:32:38.689
<v Speaker 1>I'm gonna copy everything,

01:32:39.010 --> 01:32:40.770
<v Speaker 1>but remove our stuff Yeah. Yeah. Just so

01:32:40.770 --> 01:32:43.249
<v Speaker 1>I can cheat and make this easy.

01:32:43.730 --> 01:32:45.250
<v Speaker 1>Okay. I don't wanna I don't wanna build

01:32:45.250 --> 01:32:47.235
<v Speaker 1>this this I don't wanna generate a massive

01:32:47.235 --> 01:32:49.555
<v Speaker 1>TypeScript interface from all of that. Right. I

01:32:49.555 --> 01:32:50.515
<v Speaker 1>want you to do it to show off

01:32:50.515 --> 01:32:52.675
<v Speaker 1>a little bit. So what we're gonna do

01:32:52.675 --> 01:32:54.755
<v Speaker 1>here is const default

01:32:54.755 --> 01:32:55.795
<v Speaker 1>values

01:32:55.875 --> 01:32:56.835
<v Speaker 1>equals

01:32:58.275 --> 01:32:59.635
<v Speaker 1>tag dot with.

01:33:00.199 --> 01:33:01.400
<v Speaker 1>Oh, wait. I need to do that on

01:33:01.400 --> 01:33:02.199
<v Speaker 1>a container.

01:33:02.600 --> 01:33:03.880
<v Speaker 1>Let's go up here.

01:33:06.280 --> 01:33:07.639
<v Speaker 1>Dot with

01:33:09.320 --> 01:33:12.360
<v Speaker 1>dot with. Well so can you is there

01:33:12.360 --> 01:33:14.280
<v Speaker 2>a function where you can

01:33:14.525 --> 01:33:16.205
<v Speaker 2>pull that file in

01:33:16.925 --> 01:33:18.685
<v Speaker 2>and then just update

01:33:19.565 --> 01:33:20.284
<v Speaker 2>it?

01:33:20.445 --> 01:33:22.844
<v Speaker 2>Like, pull it in, parse it as JSON,

01:33:23.485 --> 01:33:25.165
<v Speaker 2>then make the update,

01:33:26.045 --> 01:33:28.445
<v Speaker 2>and then spit that out as

01:33:30.930 --> 01:33:31.730
<v Speaker 2>YAML.

01:33:31.810 --> 01:33:33.250
<v Speaker 2>So that way you still have your tight

01:33:33.250 --> 01:33:35.330
<v Speaker 2>little interface because you're only customizing a couple

01:33:35.330 --> 01:33:37.090
<v Speaker 2>of pieces. You don't need to

01:33:37.570 --> 01:33:39.650
<v Speaker 1>Yeah. I'm just gonna mount this straight in

01:33:39.650 --> 01:33:41.330
<v Speaker 1>as default and then add two f's to

01:33:41.330 --> 01:33:43.305
<v Speaker 1>our helm. I know this is horrible. I

01:33:43.305 --> 01:33:45.145
<v Speaker 1>could read this from a disk. I could

01:33:45.145 --> 01:33:47.545
<v Speaker 1>use f s dot read file sync. Okay.

01:33:47.545 --> 01:33:48.905
<v Speaker 2>I see what you're saying. I just wanna

01:33:48.905 --> 01:33:50.905
<v Speaker 1>get this I just wanna get this rocking.

01:33:50.905 --> 01:33:52.105
<v Speaker 1>So Yeah.

01:33:53.545 --> 01:33:55.225
<v Speaker 1>So default values.

01:33:56.700 --> 01:33:59.020
<v Speaker 1>So now we're applying the default values and

01:33:59.020 --> 01:34:01.180
<v Speaker 1>then ours over the top with the customizations

01:34:01.180 --> 01:34:03.660
<v Speaker 1>for the hosts. So Wait a minute. You're

01:34:03.740 --> 01:34:05.660
<v Speaker 2>you do you can do two dash f's?

01:34:09.514 --> 01:34:10.235
<v Speaker 1>Yeah.

01:34:10.795 --> 01:34:13.114
<v Speaker 2>I never knew that. I learned something new

01:34:13.114 --> 01:34:14.395
<v Speaker 2>today. Well, I learned a lot of new

01:34:14.395 --> 01:34:16.715
<v Speaker 2>things today. I I never tried that without

01:34:16.715 --> 01:34:18.795
<v Speaker 2>it. I'm

01:34:18.795 --> 01:34:20.155
<v Speaker 1>99.9%

01:34:20.155 --> 01:34:22.235
<v Speaker 1>sure you can do as many dash f's

01:34:22.235 --> 01:34:22.795
<v Speaker 1>as you want.

01:34:30.030 --> 01:34:31.869
<v Speaker 1>Yeah. Can specify multiple.

01:34:32.829 --> 01:34:33.869
<v Speaker 1>Alright.

01:34:35.389 --> 01:34:36.989
<v Speaker 1>So we've got That's gonna be pretty cool

01:34:36.989 --> 01:34:37.630
<v Speaker 2>if that works.

01:34:38.225 --> 01:34:40.305
<v Speaker 1>We we've got three of these to do.

01:34:40.305 --> 01:34:41.824
<v Speaker 1>Right? So we've done the operator. Yep.

01:34:45.585 --> 01:34:47.425
<v Speaker 1>Let's go back to the docs. So we've

01:34:47.425 --> 01:34:48.625
<v Speaker 1>got the manual

01:34:48.625 --> 01:34:49.905
<v Speaker 1>process at the bottom.

01:34:52.010 --> 01:34:52.970
<v Speaker 1>We've done

01:34:54.010 --> 01:34:55.770
<v Speaker 1>so now we're doing orchestra. Right?

01:34:56.650 --> 01:34:59.290
<v Speaker 2>Yep. Okay. So even before you do that,

01:34:59.290 --> 01:35:01.770
<v Speaker 2>go back to your values dot YAML, the

01:35:01.770 --> 01:35:03.850
<v Speaker 2>the big mess that you created, not the

01:35:03.850 --> 01:35:04.890
<v Speaker 2>tight little interface.

01:35:05.505 --> 01:35:07.344
<v Speaker 2>Alright. So we're gonna add

01:35:09.425 --> 01:35:11.105
<v Speaker 2>I gotta look this one up for you

01:35:11.105 --> 01:35:11.905
<v Speaker 2>because

01:35:12.145 --> 01:35:13.665
<v Speaker 2>the this is the part I don't have

01:35:13.665 --> 01:35:14.704
<v Speaker 2>documented.

01:35:16.864 --> 01:35:18.225
<v Speaker 2>If I can figure out where the hell.

01:35:21.340 --> 01:35:23.980
<v Speaker 2>Okay. Here we go. Onboard v cluster. So

01:35:23.980 --> 01:35:25.099
<v Speaker 2>I need to

01:35:25.740 --> 01:35:27.020
<v Speaker 2>go to

01:35:29.500 --> 01:35:30.780
<v Speaker 2>no. I don't want the help in. I

01:35:30.780 --> 01:35:31.900
<v Speaker 2>want OpenUnison

01:35:32.515 --> 01:35:33.475
<v Speaker 2>deploy,

01:35:34.035 --> 01:35:37.155
<v Speaker 2>and then you need to have a value.

01:35:47.970 --> 01:35:50.530
<v Speaker 2>Enable wait for a job. Alright. So you're

01:35:50.530 --> 01:35:51.489
<v Speaker 2>gonna add

01:35:52.290 --> 01:35:54.610
<v Speaker 2>top level in that particular

01:35:56.610 --> 01:35:57.010
<v Speaker 1>Mhmm.

01:35:57.895 --> 01:35:59.014
<v Speaker 2>It's gonna be

01:36:01.494 --> 01:36:02.295
<v Speaker 2>OpenUnison.

01:36:02.614 --> 01:36:03.974
<v Speaker 2>Job is

01:36:04.135 --> 01:36:04.775
<v Speaker 2>true.

01:36:05.094 --> 01:36:07.494
<v Speaker 2>So it's gonna be top level in the

01:36:08.614 --> 01:36:11.014
<v Speaker 2>nope. It'll be a top level.

01:36:11.750 --> 01:36:13.510
<v Speaker 2>Don't even bother with this. Just go back

01:36:13.510 --> 01:36:15.510
<v Speaker 2>to the big ugly one.

01:36:16.150 --> 01:36:16.869
<v Speaker 1>No.

01:36:17.270 --> 01:36:18.630
<v Speaker 1>I mean, I guess you could do it

01:36:18.630 --> 01:36:19.590
<v Speaker 2>this way too.

01:36:19.910 --> 01:36:20.630
<v Speaker 1>Yeah.

01:36:21.910 --> 01:36:23.510
<v Speaker 2>I mean, it's just it's just this would

01:36:23.510 --> 01:36:25.429
<v Speaker 2>be more of a constant. You're not gonna

01:36:25.895 --> 01:36:27.975
<v Speaker 2>because you're running it from an IAC tool,

01:36:27.975 --> 01:36:29.094
<v Speaker 2>you're always gonna

01:36:29.735 --> 01:36:31.335
<v Speaker 2>I know. But this is but you could

01:36:31.335 --> 01:36:33.815
<v Speaker 2>do that too. Yeah. Okay. So our helm

01:36:33.815 --> 01:36:36.614
<v Speaker 1>install now changes. The second one is to

01:36:36.614 --> 01:36:37.414
<v Speaker 1>install

01:36:37.735 --> 01:36:38.775
<v Speaker 1>Orchestra.

01:36:39.175 --> 01:36:39.894
<v Speaker 1>Yep.

01:36:40.535 --> 01:36:41.335
<v Speaker 1>Orchestra.

01:36:43.199 --> 01:36:46.159
<v Speaker 1>And everything else is the same. Right? Yeah.

01:36:46.719 --> 01:36:48.159
<v Speaker 1>Alright. What's next?

01:36:49.039 --> 01:36:51.199
<v Speaker 2>And then we're gonna do orchestra login portal.

01:36:56.615 --> 01:36:57.095
<v Speaker 2>K.

01:37:14.270 --> 01:37:16.989
<v Speaker 1>And then We got one more. We we

01:37:16.989 --> 01:37:19.309
<v Speaker 2>don't list it here, but it's called

01:37:21.469 --> 01:37:22.030
<v Speaker 2>medical.

01:37:24.750 --> 01:37:25.710
<v Speaker 2>Had the code open.

01:37:30.304 --> 01:37:31.824
<v Speaker 2>It is called

01:37:33.344 --> 01:37:35.504
<v Speaker 2>I'm digging through my here.

01:37:37.824 --> 01:37:39.905
<v Speaker 2>No. That's cluster management. We don't want cluster

01:37:39.905 --> 01:37:40.385
<v Speaker 2>management.

01:37:41.199 --> 01:37:42.159
<v Speaker 2>Orchestra

01:37:42.159 --> 01:37:44.320
<v Speaker 2>dash cube dash o I d c dash

01:37:44.320 --> 01:37:45.199
<v Speaker 2>proxy.

01:37:52.239 --> 01:37:52.639
<v Speaker 1>Alright.

01:37:59.454 --> 01:38:01.695
<v Speaker 1>Oh, I'm excited.

01:38:02.494 --> 01:38:03.695
<v Speaker 2>Me too, man.

01:38:04.094 --> 01:38:05.934
<v Speaker 2>So now is there something that you can

01:38:05.934 --> 01:38:07.295
<v Speaker 2>do in the two e to let us

01:38:07.295 --> 01:38:08.414
<v Speaker 2>watch the

01:38:09.054 --> 01:38:10.415
<v Speaker 2>standard outlooks

01:38:10.290 --> 01:38:12.050
<v Speaker 2>of the container while it's

01:38:13.570 --> 01:38:14.369
<v Speaker 2>daggering,

01:38:14.370 --> 01:38:15.889
<v Speaker 2>while it's while it's running.

01:38:18.210 --> 01:38:19.570
<v Speaker 1>Yeah. Just in the right, and then we'll

01:38:19.570 --> 01:38:20.450
<v Speaker 1>get a bit of everything.

01:38:32.635 --> 01:38:34.074
<v Speaker 1>Alright. We're helming.

01:38:36.074 --> 01:38:39.755
<v Speaker 2>We're helming. We're helming. We're helming. We're helming.

01:38:42.750 --> 01:38:44.750
<v Speaker 2>Now we don't actually have an authentication

01:38:44.750 --> 01:38:46.269
<v Speaker 2>mechanism set up.

01:38:46.590 --> 01:38:48.190
<v Speaker 2>So So can you just tell us all

01:38:48.270 --> 01:38:50.270
<v Speaker 2>really work, but you should be able to

01:38:50.270 --> 01:38:51.229
<v Speaker 2>get to that

01:38:52.829 --> 01:38:53.230
<v Speaker 2>that

01:38:53.630 --> 01:38:54.750
<v Speaker 2>the test

01:38:55.285 --> 01:38:56.005
<v Speaker 2>of

01:38:56.165 --> 01:38:58.244
<v Speaker 2>checking the OIDC issuer.

01:38:58.565 --> 01:39:00.645
<v Speaker 2>That part should work. All I really want

01:39:00.645 --> 01:39:01.845
<v Speaker 1>us to be able to do is to

01:39:01.845 --> 01:39:03.764
<v Speaker 1>deploy it, which I think we've just done,

01:39:03.765 --> 01:39:05.605
<v Speaker 1>and then be able to curl against an

01:39:05.605 --> 01:39:08.485
<v Speaker 1>API endpoint and then confirm about it. Right?

01:39:08.485 --> 01:39:10.460
<v Speaker 1>You know? In fact, even where we are

01:39:10.460 --> 01:39:12.140
<v Speaker 1>right now, if all these helms work and

01:39:12.140 --> 01:39:13.499
<v Speaker 1>we've deployed OpenUnison,

01:39:13.900 --> 01:39:15.739
<v Speaker 1>everything after that is child's play because you're

01:39:15.739 --> 01:39:18.380
<v Speaker 1>just basically saying, okay. Let's pull another image.

01:39:18.380 --> 01:39:20.620
<v Speaker 1>Maybe it's, like, HTTP pie or maybe it's

01:39:20.620 --> 01:39:23.275
<v Speaker 1>HARL dot dev. Or throw in requests to

01:39:23.275 --> 01:39:24.955
<v Speaker 1>the API server or we're just doing those

01:39:24.955 --> 01:39:27.115
<v Speaker 1>assertions. Are we getting a HTTP 200? Are

01:39:27.115 --> 01:39:27.915
<v Speaker 1>we getting,

01:39:28.155 --> 01:39:29.195
<v Speaker 1>you know, the

01:39:29.595 --> 01:39:32.875
<v Speaker 1>right OIDC configured authentication methods, whatever? At at

01:39:32.875 --> 01:39:35.435
<v Speaker 1>that point, it's it's all on you, and

01:39:35.435 --> 01:39:37.275
<v Speaker 1>I'm I'm seeing you're the audience here. Right?

01:39:37.490 --> 01:39:39.890
<v Speaker 1>Hopefully, what people have seen today is how

01:39:40.530 --> 01:39:42.770
<v Speaker 1>this code is a little gnarly. Right? We

01:39:42.770 --> 01:39:45.490
<v Speaker 1>could maybe spend five minutes to tidy this

01:39:45.490 --> 01:39:47.010
<v Speaker 1>up. But

01:39:47.010 --> 01:39:48.130
<v Speaker 1>what we're doing

01:39:48.450 --> 01:39:49.570
<v Speaker 1>is cool. Like,

01:39:50.114 --> 01:39:52.755
<v Speaker 1>this is cool. We're then take able to

01:39:52.755 --> 01:39:54.514
<v Speaker 1>take our helm value and type it. Now

01:39:54.514 --> 01:39:57.714
<v Speaker 1>we can use VITEST, VITEST, whatever it's called,

01:39:57.715 --> 01:39:58.994
<v Speaker 1>and we can do a whole bunch of

01:39:58.994 --> 01:40:00.034
<v Speaker 1>different comparisons

01:40:00.355 --> 01:40:01.795
<v Speaker 1>based on our values file.

01:40:02.720 --> 01:40:04.560
<v Speaker 1>We can encapsulate a lot of this helm

01:40:04.560 --> 01:40:06.480
<v Speaker 1>logic into a single function so that we're

01:40:06.480 --> 01:40:08.640
<v Speaker 1>not repeating this over and over because the

01:40:08.640 --> 01:40:09.840
<v Speaker 1>only thing changing

01:40:10.080 --> 01:40:12.320
<v Speaker 1>is what is the chart and what is

01:40:12.320 --> 01:40:13.600
<v Speaker 1>the name of the release.

01:40:13.840 --> 01:40:15.475
<v Speaker 1>That is it. So we can we can

01:40:15.475 --> 01:40:17.475
<v Speaker 1>quantify all of that. We're in a a

01:40:17.475 --> 01:40:19.155
<v Speaker 1>really nice position. Plus,

01:40:19.475 --> 01:40:21.235
<v Speaker 1>I mean, I wish we didn't have to

01:40:21.235 --> 01:40:21.955
<v Speaker 1>do this,

01:40:22.195 --> 01:40:23.875
<v Speaker 1>but we've now seen that we could reach

01:40:23.875 --> 01:40:26.275
<v Speaker 1>into these service containers or or the other

01:40:26.275 --> 01:40:27.555
<v Speaker 1>containers and

01:40:27.875 --> 01:40:28.835
<v Speaker 1>extrapolate information

01:40:29.190 --> 01:40:32.710
<v Speaker 1>to then propagate that down into other steps.

01:40:32.710 --> 01:40:35.110
<v Speaker 1>So there's a lot of really cool things

01:40:35.110 --> 01:40:37.670
<v Speaker 1>happening here, and we got an error.

01:40:38.710 --> 01:40:40.310
<v Speaker 1>But it's your chart, I'm gonna say.

01:40:44.875 --> 01:40:46.395
<v Speaker 1>Orchestra failed.

01:40:48.315 --> 01:40:49.675
<v Speaker 2>Don't

01:40:49.675 --> 01:40:51.435
<v Speaker 2>care about that.

01:40:53.035 --> 01:40:55.275
<v Speaker 2>Pod test orchestra.

01:40:55.995 --> 01:40:56.475
<v Speaker 2>Oh,

01:40:57.310 --> 01:40:59.469
<v Speaker 2>so we actually do need to have some

01:40:59.469 --> 01:41:01.309
<v Speaker 2>kind of authentication mechanism

01:41:01.390 --> 01:41:04.749
<v Speaker 2>or the testing pod will fail.

01:41:05.870 --> 01:41:08.670
<v Speaker 2>So if you look at your config

01:41:09.469 --> 01:41:12.030
<v Speaker 2>let's just make our lives easy Mhmm. Even

01:41:12.030 --> 01:41:13.844
<v Speaker 2>though it won't work. So

01:41:14.965 --> 01:41:17.525
<v Speaker 2>we've got see where it says SAML IDP

01:41:17.525 --> 01:41:19.125
<v Speaker 2>underscore URL?

01:41:19.285 --> 01:41:21.365
<v Speaker 2>It's commented line one fifty one and one

01:41:21.365 --> 01:41:24.245
<v Speaker 2>fifty two. Yep. Just uncomment those for now.

01:41:25.719 --> 01:41:27.320
<v Speaker 2>I'll get you past that.

01:41:32.920 --> 01:41:35.400
<v Speaker 2>Yeah. Because we build error checking in where

01:41:35.400 --> 01:41:36.119
<v Speaker 2>we can.

01:41:36.760 --> 01:41:37.480
<v Speaker 1>How rude.

01:41:38.065 --> 01:41:40.545
<v Speaker 2>It really is, isn't it? We should talk

01:41:40.545 --> 01:41:41.744
<v Speaker 2>to somebody about that.

01:41:45.744 --> 01:41:47.264
<v Speaker 1>Alright. I mean, even if we take out

01:41:47.264 --> 01:41:49.505
<v Speaker 1>the orchestra deployment, I'm not that fast. We're

01:41:49.505 --> 01:41:51.264
<v Speaker 1>still in a position where we've deployed a

01:41:51.264 --> 01:41:53.585
<v Speaker 1>collection of helm charts. We've taken advantage of

01:41:53.585 --> 01:41:55.719
<v Speaker 1>Type Script. We're using Dagger.

01:41:55.960 --> 01:41:57.960
<v Speaker 1>We're using lots of parts of Dagger right

01:41:57.960 --> 01:41:59.800
<v Speaker 1>now to show how this works. Like, I'm

01:41:59.960 --> 01:42:01.960
<v Speaker 2>Well and, like, in a real world scenario

01:42:02.120 --> 01:42:04.920
<v Speaker 2>so we're we're deploying OpenUnison in its simplest

01:42:04.920 --> 01:42:07.475
<v Speaker 2>use case here as a login port.

01:42:07.715 --> 01:42:10.595
<v Speaker 2>But what I find really interesting here is

01:42:10.595 --> 01:42:11.235
<v Speaker 2>that

01:42:12.835 --> 01:42:15.155
<v Speaker 2>let's take this to the namespace as a

01:42:15.155 --> 01:42:15.875
<v Speaker 2>service

01:42:16.595 --> 01:42:17.395
<v Speaker 2>example.

01:42:17.635 --> 01:42:19.955
<v Speaker 2>You can build a lot of custom logic

01:42:19.955 --> 01:42:21.235
<v Speaker 2>into OpenUnison.

01:42:21.630 --> 01:42:23.469
<v Speaker 2>So, like, I've got customers

01:42:23.710 --> 01:42:24.430
<v Speaker 2>where

01:42:25.630 --> 01:42:26.030
<v Speaker 2>the

01:42:26.670 --> 01:42:29.870
<v Speaker 2>you know, where there's logic in there to,

01:42:29.870 --> 01:42:31.390
<v Speaker 2>like, integrate,

01:42:32.270 --> 01:42:33.390
<v Speaker 2>you know, integrate

01:42:33.565 --> 01:42:37.085
<v Speaker 2>charge codes into namespace creation to do chargeback

01:42:37.085 --> 01:42:40.364
<v Speaker 2>and and and look back and, you know,

01:42:40.525 --> 01:42:42.604
<v Speaker 2>checking resource constraints

01:42:42.684 --> 01:42:45.004
<v Speaker 2>to figure out if the quota,

01:42:45.164 --> 01:42:48.204
<v Speaker 2>you know, meets some kind of line where

01:42:48.204 --> 01:42:51.300
<v Speaker 2>a manual pro. Like, being able to automate

01:42:51.300 --> 01:42:51.940
<v Speaker 2>that

01:42:53.780 --> 01:42:56.820
<v Speaker 2>testing from those more complex scenarios

01:42:56.900 --> 01:42:59.140
<v Speaker 2>where you're just calling our API. That's a

01:42:59.140 --> 01:43:02.180
<v Speaker 2>really cool use case to me that, you

01:43:02.180 --> 01:43:04.100
<v Speaker 2>know, we're not really doing yet,

01:43:05.115 --> 01:43:06.555
<v Speaker 2>but we could.

01:43:07.115 --> 01:43:09.675
<v Speaker 1>Yeah. You know, we've broken on this Kubernetes

01:43:09.675 --> 01:43:12.075
<v Speaker 1>landscape a while. And when it comes to

01:43:12.075 --> 01:43:14.155
<v Speaker 1>test and Helm charts, the status quo right

01:43:14.155 --> 01:43:14.635
<v Speaker 1>now

01:43:15.275 --> 01:43:17.675
<v Speaker 1>is pretty much just to template it out

01:43:17.675 --> 01:43:18.875
<v Speaker 1>and run

01:43:19.020 --> 01:43:21.579
<v Speaker 1>against it, right, and do assertions against the

01:43:21.579 --> 01:43:24.139
<v Speaker 1>the generated Kubernetes manifest. There's not a lot

01:43:24.139 --> 01:43:26.300
<v Speaker 1>that actually happens in cluster.

01:43:28.539 --> 01:43:29.579
<v Speaker 2>We were in closer.

01:43:32.364 --> 01:43:33.485
<v Speaker 2>New container.

01:43:34.685 --> 01:43:37.804
<v Speaker 1>Yeah. Orchestra. I'm gonna remove Orchestra.

01:43:38.525 --> 01:43:40.605
<v Speaker 2>Well, if you remove Orchestra, you won't have

01:43:40.605 --> 01:43:41.324
<v Speaker 2>anything.

01:43:41.565 --> 01:43:44.445
<v Speaker 1>Oh, we have the operator. I mean, we've

01:43:44.445 --> 01:43:44.605
<v Speaker 1>shown

01:43:45.870 --> 01:43:46.829
<v Speaker 1>some stuff.

01:43:47.790 --> 01:43:49.550
<v Speaker 1>And we guess that we'll do assertions against

01:43:49.550 --> 01:43:51.789
<v Speaker 1>the operator. So let's just do that.

01:43:53.070 --> 01:43:54.830
<v Speaker 1>Yeah. So the status quo for helm testing

01:43:54.830 --> 01:43:56.429
<v Speaker 1>right now is really just to generate that

01:43:56.429 --> 01:43:58.510
<v Speaker 1>YAML, which means you lose access to hooks

01:43:58.510 --> 01:44:00.510
<v Speaker 1>and jobs and all the stuff that they're

01:44:00.510 --> 01:44:01.230
<v Speaker 1>doing in cluster.

01:44:01.925 --> 01:44:04.005
<v Speaker 1>I've not seen a lot of people, if

01:44:04.005 --> 01:44:05.684
<v Speaker 1>any, actually, I've not seen anyone

01:44:06.165 --> 01:44:08.565
<v Speaker 1>deploy to, like, a kind and build assertions

01:44:08.565 --> 01:44:10.405
<v Speaker 1>against that. I'm sure some people are doing

01:44:10.405 --> 01:44:12.724
<v Speaker 1>it, but I I would argue that this

01:44:13.364 --> 01:44:15.205
<v Speaker 1>as code approach allows you to go a

01:44:15.205 --> 01:44:17.445
<v Speaker 1>lot deeper and a lot more automation than

01:44:17.445 --> 01:44:20.380
<v Speaker 1>what has previously been possible. Oh, yeah. I

01:44:20.380 --> 01:44:22.300
<v Speaker 2>mean, like, I'm looking at so the way

01:44:22.300 --> 01:44:25.180
<v Speaker 2>we automate our testing is we've got a

01:44:25.180 --> 01:44:26.540
<v Speaker 2>QA cluster

01:44:27.420 --> 01:44:28.140
<v Speaker 2>that,

01:44:28.300 --> 01:44:28.940
<v Speaker 2>you know,

01:44:29.580 --> 01:44:32.705
<v Speaker 2>we we use Git to do the we

01:44:32.705 --> 01:44:35.505
<v Speaker 2>use GitOps and Argo to do it. But,

01:44:36.465 --> 01:44:38.145
<v Speaker 2>you know, we wanna get into the habit

01:44:38.145 --> 01:44:39.025
<v Speaker 2>of having

01:44:39.265 --> 01:44:41.025
<v Speaker 2>these automated tests

01:44:41.185 --> 01:44:43.105
<v Speaker 2>and to be able to say, okay.

01:44:43.905 --> 01:44:45.585
<v Speaker 2>I wanna run this

01:44:45.910 --> 01:44:48.870
<v Speaker 2>I wanna run this against the cluster that

01:44:48.870 --> 01:44:51.030
<v Speaker 2>has NGINX. I wanna run this against the

01:44:51.030 --> 01:44:52.869
<v Speaker 2>cluster that has Istio.

01:44:53.190 --> 01:44:55.190
<v Speaker 2>I wanna go through the same type of

01:44:55.190 --> 01:44:55.989
<v Speaker 2>steps

01:44:56.870 --> 01:44:58.784
<v Speaker 2>every time. So,

01:44:59.105 --> 01:45:00.864
<v Speaker 2>you know, I like the the fact that

01:45:00.864 --> 01:45:03.344
<v Speaker 2>I can spin up a k three's cluster,

01:45:03.665 --> 01:45:05.824
<v Speaker 2>and he'll talk to it as one option.

01:45:05.824 --> 01:45:07.745
<v Speaker 2>But then I can also see saying, you

01:45:07.745 --> 01:45:09.105
<v Speaker 2>know what? I'm gonna mount in,

01:45:09.585 --> 01:45:12.225
<v Speaker 2>you know, a virtual cluster that's got my

01:45:12.225 --> 01:45:14.469
<v Speaker 2>baseline in it already. So I I like

01:45:14.469 --> 01:45:17.429
<v Speaker 2>that there's that flexibility in there and that

01:45:18.710 --> 01:45:19.749
<v Speaker 2>it's code.

01:45:21.349 --> 01:45:23.510
<v Speaker 1>Yeah. Alright. Let's do It's not code I

01:45:23.510 --> 01:45:25.750
<v Speaker 2>have to recompile every twenty five minutes.

01:45:27.255 --> 01:45:28.054
<v Speaker 1>Let's

01:45:28.135 --> 01:45:30.215
<v Speaker 1>make this nicer. Right? And this will be

01:45:30.215 --> 01:45:31.495
<v Speaker 1>the last thing we do. I know we've

01:45:31.495 --> 01:45:33.415
<v Speaker 1>went way over the time that we set

01:45:33.415 --> 01:45:35.255
<v Speaker 1>aside for this. So I I really am

01:45:35.255 --> 01:45:36.934
<v Speaker 1>sorry, but I hope you're enjoying.

01:45:38.054 --> 01:45:40.375
<v Speaker 1>Let's write a function. It's just called deploy

01:45:40.375 --> 01:45:41.175
<v Speaker 1>helm

01:45:41.415 --> 01:45:41.735
<v Speaker 1>chart.

01:45:42.520 --> 01:45:44.920
<v Speaker 1>This needs a char release name,

01:45:46.440 --> 01:45:47.400
<v Speaker 1>chart name,

01:45:49.480 --> 01:45:50.119
<v Speaker 1>and

01:45:50.360 --> 01:45:51.400
<v Speaker 1>values,

01:45:51.400 --> 01:45:54.199
<v Speaker 1>which is just an object. Any any JavaScript

01:45:54.199 --> 01:45:55.400
<v Speaker 1>object can be serialized.

01:45:55.795 --> 01:45:56.434
<v Speaker 1>So

01:45:57.635 --> 01:45:59.314
<v Speaker 1>this is going to return

01:45:59.315 --> 01:46:00.834
<v Speaker 1>a promise

01:46:01.074 --> 01:46:03.715
<v Speaker 1>container because we probably wanna work with whatever

01:46:03.715 --> 01:46:04.675
<v Speaker 1>we get back,

01:46:05.235 --> 01:46:08.034
<v Speaker 1>and then the function itself can be blah.

01:46:08.034 --> 01:46:09.875
<v Speaker 1>Right? So let's do that.

01:46:12.510 --> 01:46:14.189
<v Speaker 1>Oh, we need to provide a

01:46:21.469 --> 01:46:23.550
<v Speaker 1>yeah. Let's provide the container.

01:46:24.670 --> 01:46:27.355
<v Speaker 1>We we could actually build up our own

01:46:27.355 --> 01:46:28.954
<v Speaker 1>with Helm and use your image,

01:46:30.315 --> 01:46:32.155
<v Speaker 1>but then we did the KubeConfig and stuff.

01:46:32.155 --> 01:46:33.835
<v Speaker 1>So just to make that a little bit

01:46:33.835 --> 01:46:35.355
<v Speaker 1>easier, we're just gonna say that we're gonna

01:46:35.355 --> 01:46:36.554
<v Speaker 1>pass in the container.

01:46:37.034 --> 01:46:38.954
<v Speaker 1>So now we're gonna say container,

01:46:39.435 --> 01:46:41.514
<v Speaker 1>and that's just that code that we have.

01:46:42.130 --> 01:46:44.290
<v Speaker 1>Only we're gonna do some interpolation,

01:46:44.290 --> 01:46:46.930
<v Speaker 1>which is that here, we want the release

01:46:46.930 --> 01:46:47.650
<v Speaker 1>name,

01:46:48.610 --> 01:46:49.970
<v Speaker 1>the chart name,

01:46:51.090 --> 01:46:53.890
<v Speaker 1>and we could add properties for namespace, for

01:46:53.890 --> 01:46:55.955
<v Speaker 1>wait for jobs. In fact, let's even do

01:46:55.955 --> 01:46:57.155
<v Speaker 1>that. Right? Because we don't need to wait

01:46:57.155 --> 01:46:59.075
<v Speaker 1>for jobs all the time. And we're now

01:46:59.075 --> 01:47:00.355
<v Speaker 1>at a point where this should actually be

01:47:00.355 --> 01:47:02.594
<v Speaker 1>a structure. So let's call

01:47:04.915 --> 01:47:06.675
<v Speaker 1>this ops,

01:47:07.795 --> 01:47:08.515
<v Speaker 1>helm ops.

01:47:09.810 --> 01:47:11.409
<v Speaker 1>I'm gonna hate myself for making this more

01:47:11.409 --> 01:47:13.570
<v Speaker 1>complex than I should for the last five

01:47:13.570 --> 01:47:14.929
<v Speaker 1>minutes. However,

01:47:15.090 --> 01:47:17.730
<v Speaker 1>wait for jobs. We're programmers. Making it more

01:47:17.730 --> 01:47:20.530
<v Speaker 2>complex is our job. And

01:47:20.770 --> 01:47:23.329
<v Speaker 1>wait. So there's two different ways. So let's

01:47:23.329 --> 01:47:23.810
<v Speaker 1>take that.

01:47:24.465 --> 01:47:25.264
<v Speaker 1>So

01:47:26.385 --> 01:47:28.145
<v Speaker 1>if we have ops

01:47:28.145 --> 01:47:29.264
<v Speaker 1>dot wait,

01:47:30.864 --> 01:47:31.985
<v Speaker 1>we do

01:47:32.065 --> 01:47:32.945
<v Speaker 1>wait.

01:47:33.505 --> 01:47:34.705
<v Speaker 1>Otherwise, nothing.

01:47:36.800 --> 01:47:38.560
<v Speaker 1>Opt dot wait for jobs.

01:47:40.240 --> 01:47:41.119
<v Speaker 1>Nothing.

01:47:42.800 --> 01:47:44.000
<v Speaker 1>That'll do.

01:47:44.480 --> 01:47:46.800
<v Speaker 1>And we return back our container.

01:47:49.280 --> 01:47:50.720
<v Speaker 1>Oh, no. I just I've not made this

01:47:50.720 --> 01:47:51.520
<v Speaker 1>async. So

01:47:55.185 --> 01:47:55.825
<v Speaker 1>cool.

01:47:57.025 --> 01:48:00.065
<v Speaker 1>This now means that this becomes

01:48:00.705 --> 01:48:02.545
<v Speaker 1>and we can't use the fluent interface anymore

01:48:02.545 --> 01:48:04.225
<v Speaker 1>because it's not attached to a container.

01:48:08.240 --> 01:48:10.400
<v Speaker 1>Const c equals

01:48:12.240 --> 01:48:13.600
<v Speaker 1>look at type.

01:48:16.000 --> 01:48:16.800
<v Speaker 1>And we can do,

01:48:17.775 --> 01:48:19.614
<v Speaker 1>what did I call it, Helm? No.

01:48:19.935 --> 01:48:21.534
<v Speaker 1>Employ Helm chart,

01:48:22.574 --> 01:48:25.695
<v Speaker 1>which takes a c, which takes a release,

01:48:27.535 --> 01:48:28.895
<v Speaker 1>which takes a chart name.

01:48:34.340 --> 01:48:35.780
<v Speaker 1>Operator.

01:48:36.820 --> 01:48:38.660
<v Speaker 1>So it takes our values.

01:48:40.500 --> 01:48:42.820
<v Speaker 1>We've mounted them into the container already.

01:48:45.925 --> 01:48:47.525
<v Speaker 1>So I was gonna make that an object

01:48:47.525 --> 01:48:49.205
<v Speaker 1>and actually do that. So let's come back

01:48:49.205 --> 01:48:50.885
<v Speaker 1>to that in a second. And then the

01:48:50.885 --> 01:48:51.685
<v Speaker 1>ops,

01:48:52.085 --> 01:48:55.445
<v Speaker 1>let me see. Wait. True. Wait for jobs.

01:48:56.165 --> 01:48:56.485
<v Speaker 1>True.

01:49:00.750 --> 01:49:02.909
<v Speaker 1>Let me make this something that we can

01:49:04.110 --> 01:49:05.150
<v Speaker 1>write over.

01:49:07.550 --> 01:49:08.909
<v Speaker 1>So this disappears.

01:49:11.855 --> 01:49:13.855
<v Speaker 1>So we're gonna pass in

01:49:14.495 --> 01:49:16.175
<v Speaker 1>our helm values.

01:49:19.455 --> 01:49:20.895
<v Speaker 1>Can I not redeclare

01:49:21.135 --> 01:49:22.815
<v Speaker 1>even if I make out of what?

01:49:23.740 --> 01:49:26.540
<v Speaker 2>This isn't let redeclare or what does it

01:49:26.540 --> 01:49:27.179
<v Speaker 2>declare?

01:49:27.340 --> 01:49:29.180
<v Speaker 1>I mean, maybe I should be doing var.

01:49:29.180 --> 01:49:32.140
<v Speaker 1>Right? Anyway, let's do it this way. So

01:49:34.380 --> 01:49:37.900
<v Speaker 1>this now becomes no longer needed because we're

01:49:37.900 --> 01:49:39.260
<v Speaker 1>going to do this

01:49:40.995 --> 01:49:42.594
<v Speaker 1>and laying down here

01:49:44.195 --> 01:49:45.875
<v Speaker 1>with our values object.

01:49:46.435 --> 01:49:46.994
<v Speaker 1>So

01:49:47.795 --> 01:49:49.395
<v Speaker 1>with new fail,

01:49:51.680 --> 01:49:52.640
<v Speaker 1>Temp

01:49:52.960 --> 01:49:53.920
<v Speaker 1>values

01:49:53.920 --> 01:49:55.120
<v Speaker 1>dot YAML.

01:49:56.720 --> 01:49:59.040
<v Speaker 1>And that is our YAML dot dump

01:50:03.825 --> 01:50:04.945
<v Speaker 1>and values.

01:50:08.065 --> 01:50:10.385
<v Speaker 1>So not the best refactoring,

01:50:11.345 --> 01:50:13.105
<v Speaker 1>but really trying not to push us onto

01:50:13.105 --> 01:50:15.105
<v Speaker 1>that two hour mark for the stream.

01:50:15.505 --> 01:50:18.225
<v Speaker 1>But you can see how

01:50:17.270 --> 01:50:19.670
<v Speaker 1>this is a simple function that just makes

01:50:19.670 --> 01:50:21.190
<v Speaker 1>this a lot easier. Yep.

01:50:23.989 --> 01:50:25.430
<v Speaker 1>I don't need to see one. We actually

01:50:25.430 --> 01:50:27.190
<v Speaker 1>just want whatever

01:50:29.510 --> 01:50:30.789
<v Speaker 1>it was called above.

01:50:31.190 --> 01:50:31.590
<v Speaker 1>Yeah.

01:50:32.515 --> 01:50:34.035
<v Speaker 1>Oh, set up helm container.

01:50:36.595 --> 01:50:38.275
<v Speaker 1>This now becomes a lot easier for us

01:50:38.275 --> 01:50:39.715
<v Speaker 1>to then chain that together

01:50:40.035 --> 01:50:41.795
<v Speaker 1>and say, okay. We need to deploy another

01:50:41.795 --> 01:50:42.435
<v Speaker 1>chart.

01:50:42.755 --> 01:50:44.275
<v Speaker 1>We can't do it because we didn't create

01:50:44.275 --> 01:50:46.199
<v Speaker 1>a class. There are ways we could have

01:50:46.199 --> 01:50:47.559
<v Speaker 1>made this fluent still.

01:50:49.000 --> 01:50:51.079
<v Speaker 1>Let's see. We can now deploy as many

01:50:51.079 --> 01:50:52.679
<v Speaker 1>charts as we want and we've defined what

01:50:52.679 --> 01:50:54.679
<v Speaker 1>that interface looks like. And I think I

01:50:54.679 --> 01:50:57.320
<v Speaker 1>just think, again, treating this stuff as code

01:50:57.320 --> 01:51:00.445
<v Speaker 1>enables so many different things. We could build

01:51:00.445 --> 01:51:02.844
<v Speaker 1>classes where these are helper functions and give

01:51:02.844 --> 01:51:05.165
<v Speaker 1>us our fluent API to continue this because

01:51:05.165 --> 01:51:07.725
<v Speaker 1>our base layer is going to be a

01:51:07.725 --> 01:51:10.605
<v Speaker 1>certain position, which is to open Unison container

01:51:10.605 --> 01:51:12.790
<v Speaker 1>in this approach. And and now we can

01:51:12.790 --> 01:51:14.230
<v Speaker 1>test this as well, and we can test

01:51:14.230 --> 01:51:16.630
<v Speaker 1>the end to end product based on everything

01:51:16.630 --> 01:51:17.510
<v Speaker 1>that we've done.

01:51:18.550 --> 01:51:20.469
<v Speaker 1>I'm calling a quest there because that is

01:51:20.550 --> 01:51:23.910
<v Speaker 1>that's been an absolute monster session. Let's pop

01:51:23.910 --> 01:51:24.550
<v Speaker 1>back over here.

01:51:25.325 --> 01:51:27.005
<v Speaker 2>But I think we learned a lot. Right?

01:51:27.005 --> 01:51:28.765
<v Speaker 2>Like, the, you know, the goal wasn't to

01:51:28.765 --> 01:51:30.205
<v Speaker 2>learn about OpenUnison.

01:51:30.205 --> 01:51:31.485
<v Speaker 2>The goal was to learn about, you know,

01:51:31.485 --> 01:51:32.844
<v Speaker 2>how do we take Dagger

01:51:33.085 --> 01:51:35.485
<v Speaker 2>and do something really cool with it? And

01:51:35.485 --> 01:51:37.645
<v Speaker 2>I think we accomplished the really cool,

01:51:38.290 --> 01:51:38.929
<v Speaker 2>like,

01:51:39.250 --> 01:51:42.530
<v Speaker 2>being able to say launch a, you know,

01:51:42.530 --> 01:51:45.090
<v Speaker 2>launch a cluster, a k three's cluster,

01:51:45.969 --> 01:51:47.409
<v Speaker 2>integrate with it,

01:51:48.050 --> 01:51:51.170
<v Speaker 2>right, pull in multiple configs in a reusable

01:51:51.170 --> 01:51:51.409
<v Speaker 2>way.

01:51:52.005 --> 01:51:52.725
<v Speaker 1>Yep.

01:51:52.885 --> 01:51:54.885
<v Speaker 2>And test it all out. I mean, that

01:51:55.045 --> 01:51:55.685
<v Speaker 2>that's,

01:51:56.085 --> 01:51:56.805
<v Speaker 2>you know,

01:51:57.365 --> 01:52:00.005
<v Speaker 2>that's pretty cool. Like, that ranks pretty high

01:52:00.005 --> 01:52:01.844
<v Speaker 2>on my pretty cool meter.

01:52:03.285 --> 01:52:04.245
<v Speaker 2>That's nice.

01:52:05.125 --> 01:52:05.765
<v Speaker 1>Nice.

01:52:06.405 --> 01:52:09.240
<v Speaker 1>Alright. Well, I will continue to work on

01:52:09.240 --> 01:52:12.200
<v Speaker 1>this off stream and put together some real

01:52:12.200 --> 01:52:14.040
<v Speaker 1>assertions. What I will do is I will

01:52:14.040 --> 01:52:15.880
<v Speaker 1>comment on this video on YouTube,

01:52:16.360 --> 01:52:18.760
<v Speaker 1>this time next week, hopefully, or earlier,

01:52:18.920 --> 01:52:20.760
<v Speaker 1>with a link to the code and the

01:52:20.760 --> 01:52:22.864
<v Speaker 1>actual build in the test cases. I'll probably

01:52:22.864 --> 01:52:24.385
<v Speaker 1>use hurl dot dev or something like that.

01:52:24.385 --> 01:52:25.745
<v Speaker 1>It's a really cool text based tool for

01:52:25.745 --> 01:52:28.305
<v Speaker 1>making HTTP requests and assertions.

01:52:28.305 --> 01:52:28.545
<v Speaker 1>And,

01:52:29.185 --> 01:52:31.185
<v Speaker 1>yeah, hopefully, we can get this pushed towards

01:52:31.185 --> 01:52:34.465
<v Speaker 1>OpenUnison Helm charts repository as some fun test

01:52:34.465 --> 01:52:36.385
<v Speaker 1>cases to do. Yeah. Absolutely.

01:52:37.240 --> 01:52:38.840
<v Speaker 1>Thank you so much, Mark, for joining me

01:52:38.840 --> 01:52:40.600
<v Speaker 1>today and for kinda guiding me on the

01:52:40.600 --> 01:52:43.080
<v Speaker 1>OpenUnison parts. I hope Dagger has piqued your

01:52:43.080 --> 01:52:44.760
<v Speaker 1>interest and that you're gonna

01:52:45.080 --> 01:52:47.320
<v Speaker 1>venture further into the Daggerverse

01:52:47.400 --> 01:52:48.360
<v Speaker 1>literally unfigured.

01:52:50.225 --> 01:52:50.784
<v Speaker 2>Absolutely.

01:52:52.065 --> 01:52:52.705
<v Speaker 1>Alright.

01:52:53.025 --> 01:52:55.265
<v Speaker 1>Thank you to everyone who stuck with us

01:52:55.265 --> 01:52:57.185
<v Speaker 1>throughout that. I know that was a very

01:52:57.185 --> 01:52:59.025
<v Speaker 1>long session. I hope you found it useful.

01:52:59.025 --> 01:53:01.105
<v Speaker 1>Let us know in the comments, and, feel

01:53:01.105 --> 01:53:03.880
<v Speaker 1>free to say thank you or you suck

01:53:03.880 --> 01:53:05.720
<v Speaker 1>in the comment box as we say goodbye

01:53:05.720 --> 01:53:07.640
<v Speaker 1>for today. But, Mark, thank you again. I

01:53:07.640 --> 01:53:09.000
<v Speaker 1>will speak to you soon. And to everyone

01:53:09.000 --> 01:53:11.159
<v Speaker 1>else, have a wonderful week.

01:53:11.560 --> 01:53:12.360
<v Speaker 2>Bye. Adios.

01:54:15.295 --> 01:54:18.335
<v Speaker 1>Build castles for ones and zeros. We stood

01:54:18.335 --> 01:54:20.255
<v Speaker 1>tall like coheroes.

01:54:20.255 --> 01:54:22.655
<v Speaker 1>For every bug squashed another plan in this

01:54:22.655 --> 01:54:23.614
<v Speaker 1>academy.

01:54:23.614 --> 01:54:24.735
<v Speaker 1>You took this stand.

01:55:18.870 --> 01:55:21.750
<v Speaker 1>Next time, we'll be cheering for you.

01:55:24.550 --> 01:55:26.550
<v Speaker 1>I'll be cheering for you.

01:55:28.230 --> 01:55:28.949
<v Speaker 1>Oh,

01:55:30.230 --> 01:55:30.870
<v Speaker 1>for you.
