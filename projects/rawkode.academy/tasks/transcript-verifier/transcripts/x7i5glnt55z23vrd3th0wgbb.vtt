WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: b7acc58e-74a9-4b1c-ba3b-add1a1445f03
Created: 2025-04-29T20:46:37.315Z
Duration: 2868.0193
Channels: 1

00:01:12.085 --> 00:01:12.965
<v Speaker 0>Hello.

00:01:12.965 --> 00:01:15.604
<v Speaker 0>And welcome to today's episode of Rawkode live.

00:01:15.604 --> 00:01:18.645
<v Speaker 0>I'm your host, Rawkode. Now before we begin,

00:01:18.645 --> 00:01:20.484
<v Speaker 0>I just wanna take a brief moment to

00:01:20.484 --> 00:01:23.045
<v Speaker 0>say thank you to Equinix Medal. They are

00:01:23.045 --> 00:01:25.604
<v Speaker 0>my employer and they provide the time resources

00:01:26.190 --> 00:01:28.270
<v Speaker 0>for me to invest in the show, thank

00:01:28.270 --> 00:01:29.310
<v Speaker 0>great hosts, and get

00:01:29.870 --> 00:01:31.790
<v Speaker 0>find experts to come and share their knowledge

00:01:31.790 --> 00:01:33.950
<v Speaker 0>with us so we can all learn together.

00:01:34.030 --> 00:01:36.110
<v Speaker 0>If you wanna check out Equinix metal piece,

00:01:36.110 --> 00:01:37.870
<v Speaker 0>feel free to use the code Rawkode dash

00:01:37.870 --> 00:01:39.790
<v Speaker 0>live. This will get you $50 in credit.

00:01:39.885 --> 00:01:42.205
<v Speaker 0>That's roughly around a hundred hours if you

00:01:42.205 --> 00:01:43.485
<v Speaker 0>spend it wisely.

00:01:43.645 --> 00:01:45.245
<v Speaker 0>But go the fun route and spend it

00:01:45.245 --> 00:01:46.765
<v Speaker 0>much quicker with larger machines.

00:01:47.805 --> 00:01:49.725
<v Speaker 0>So today, we are gonna take a look

00:01:49.725 --> 00:01:51.485
<v Speaker 0>at the OperatorSDK.

00:01:51.485 --> 00:01:53.325
<v Speaker 0>And I'm very fortunate to be joined by

00:01:53.325 --> 00:01:54.365
<v Speaker 0>a colleague of mine,

00:01:54.810 --> 00:01:57.290
<v Speaker 0>Dennis Kelly. Hello, Dennis. How are you?

00:01:57.770 --> 00:01:59.689
<v Speaker 1>I'm great. Thanks for having me today.

00:02:00.009 --> 00:02:03.369
<v Speaker 0>No. My pleasure. Definitely. So you are a

00:02:03.450 --> 00:02:05.130
<v Speaker 0>you work for Equinix Medal too, which is

00:02:05.130 --> 00:02:07.610
<v Speaker 0>fantastic. So, know Yeah. And you are a

00:02:07.610 --> 00:02:10.405
<v Speaker 0>staff Kubernetes engineer. So you spend a a

00:02:10.405 --> 00:02:12.645
<v Speaker 0>great deal of your time working with Kubernetes.

00:02:12.645 --> 00:02:13.445
<v Speaker 0>Do you wanna

00:02:13.845 --> 00:02:15.525
<v Speaker 0>give a quick introduction of yourself, and then

00:02:15.525 --> 00:02:17.525
<v Speaker 0>we'll talk about the OperatorSDK as well?

00:02:18.325 --> 00:02:19.205
<v Speaker 1>Absolutely.

00:02:19.605 --> 00:02:22.485
<v Speaker 1>Denovan diesel is my Twitter handle, and you

00:02:22.485 --> 00:02:24.405
<v Speaker 1>can find me there and ask questions later

00:02:24.900 --> 00:02:27.460
<v Speaker 1>if you want. My nickname is Deno, but

00:02:27.460 --> 00:02:28.820
<v Speaker 1>I also go by Dennis.

00:02:29.220 --> 00:02:31.700
<v Speaker 1>I work on our delivery engineering team here

00:02:31.700 --> 00:02:34.820
<v Speaker 1>at Equinix Metal, and we stand up the

00:02:34.900 --> 00:02:37.780
<v Speaker 1>Tinkerbell API that we use for provisioning

00:02:37.940 --> 00:02:39.620
<v Speaker 1>on our Kubernetes clusters.

00:02:40.645 --> 00:02:43.205
<v Speaker 1>Actually, only been here a few months, but

00:02:43.205 --> 00:02:46.084
<v Speaker 1>already learning a ton and excited with the

00:02:46.084 --> 00:02:47.845
<v Speaker 1>work I'm doing on the OperatorSDK

00:02:47.845 --> 00:02:48.485
<v Speaker 1>and

00:02:49.205 --> 00:02:50.565
<v Speaker 1>happy to share that today.

00:02:51.125 --> 00:02:53.125
<v Speaker 0>Awesome. I think we actually joined roughly around

00:02:53.125 --> 00:02:54.725
<v Speaker 0>the same time, if I remember correctly. Yeah.

00:02:56.780 --> 00:02:59.739
<v Speaker 0>We have our first comment already. So Hannah

00:02:59.739 --> 00:03:02.140
<v Speaker 0>says, excited for this talk. And I think

00:03:02.140 --> 00:03:03.819
<v Speaker 0>they possibly know you because they say, hey.

00:03:03.819 --> 00:03:04.540
<v Speaker 0>So hi.

00:03:04.860 --> 00:03:05.580
<v Speaker 1>Yes.

00:03:05.739 --> 00:03:07.500
<v Speaker 1>And I I need to give a shout

00:03:07.500 --> 00:03:08.379
<v Speaker 1>out to Hannah,

00:03:08.620 --> 00:03:11.915
<v Speaker 1>and correct everyone on the proper way to

00:03:11.915 --> 00:03:13.995
<v Speaker 1>say Kate's and that's CooperNoodles.

00:03:13.995 --> 00:03:16.955
<v Speaker 1>So we'll be doing some CooperNoodling today.

00:03:17.355 --> 00:03:18.314
<v Speaker 0>CooperNoodles.

00:03:18.314 --> 00:03:20.394
<v Speaker 0>You know, I like it. I'm on board

00:03:20.394 --> 00:03:22.075
<v Speaker 0>with that for sure. So

00:03:22.875 --> 00:03:23.515
<v Speaker 0>can you

00:03:24.310 --> 00:03:25.590
<v Speaker 0>tell us just

00:03:25.750 --> 00:03:28.790
<v Speaker 0>in a summary, what is the OperatorSDK?

00:03:29.829 --> 00:03:30.470
<v Speaker 1>Well,

00:03:31.110 --> 00:03:33.189
<v Speaker 1>even to back up a little further, let's

00:03:33.189 --> 00:03:34.950
<v Speaker 1>talk first What are Kubernetes?

00:03:36.150 --> 00:03:36.709
<v Speaker 1>Yeah.

00:03:36.975 --> 00:03:37.855
<v Speaker 1>Hopefully,

00:03:37.855 --> 00:03:40.335
<v Speaker 1>people understand what Kubernetes is, but the Kubernetes

00:03:40.335 --> 00:03:41.215
<v Speaker 1>operator

00:03:41.455 --> 00:03:41.935
<v Speaker 1>is,

00:03:42.255 --> 00:03:45.215
<v Speaker 1>just an extension of the Kubernetes API.

00:03:45.455 --> 00:03:48.495
<v Speaker 1>When you think about interacting with Kubernetes

00:03:48.495 --> 00:03:50.415
<v Speaker 1>cluster using kubectl

00:03:50.490 --> 00:03:53.610
<v Speaker 1>or kubectl, however you wish to pronounce it,

00:03:54.890 --> 00:03:56.010
<v Speaker 1>you you

00:03:56.250 --> 00:03:57.850
<v Speaker 1>can then extend

00:03:57.850 --> 00:04:00.730
<v Speaker 1>the Kubernetes API to do, like, custom

00:04:02.010 --> 00:04:04.570
<v Speaker 1>automatic programmatic

00:04:04.275 --> 00:04:05.394
<v Speaker 1>things and,

00:04:05.635 --> 00:04:08.035
<v Speaker 1>define custom resources within your,

00:04:08.355 --> 00:04:09.234
<v Speaker 1>Kubernetes

00:04:09.234 --> 00:04:10.035
<v Speaker 1>cluster.

00:04:10.674 --> 00:04:11.235
<v Speaker 1>And,

00:04:11.555 --> 00:04:13.875
<v Speaker 1>you know, it's very popular in kind of

00:04:13.875 --> 00:04:15.235
<v Speaker 1>like the DevOps y,

00:04:15.635 --> 00:04:17.555
<v Speaker 1>area that I work in because,

00:04:18.040 --> 00:04:19.640
<v Speaker 1>you know, there's things that you wanna do

00:04:19.640 --> 00:04:21.480
<v Speaker 1>like backups or,

00:04:21.480 --> 00:04:24.600
<v Speaker 1>you know, customized automated deployments. Say you wanna

00:04:24.600 --> 00:04:26.280
<v Speaker 1>create your own auto scaler,

00:04:26.440 --> 00:04:28.040
<v Speaker 1>the Kubernetes operator

00:04:28.200 --> 00:04:31.480
<v Speaker 1>provides a powerful platform to automate a lot

00:04:31.480 --> 00:04:32.200
<v Speaker 1>of those tasks.

00:04:33.255 --> 00:04:33.895
<v Speaker 1>And,

00:04:34.455 --> 00:04:36.135
<v Speaker 1>the OperatorSDK,

00:04:37.175 --> 00:04:40.134
<v Speaker 1>while it's also while it's available in Golang

00:04:40.134 --> 00:04:41.895
<v Speaker 1>and what will feature today, you can also

00:04:41.895 --> 00:04:43.815
<v Speaker 1>do this with Ansible and Helm,

00:04:44.134 --> 00:04:45.574
<v Speaker 1>and

00:04:45.300 --> 00:04:45.940
<v Speaker 1>other

00:04:46.980 --> 00:04:50.020
<v Speaker 1>platforms, but, it's just a very powerful platform

00:04:50.020 --> 00:04:51.780
<v Speaker 1>that kind of bootstraps

00:04:51.780 --> 00:04:55.140
<v Speaker 1>your operator development environment and makes it easy

00:04:55.140 --> 00:04:56.100
<v Speaker 1>for you to,

00:04:56.580 --> 00:04:59.145
<v Speaker 1>develop operators for your environment.

00:05:00.425 --> 00:05:01.145
<v Speaker 0>Okay.

00:05:01.625 --> 00:05:04.345
<v Speaker 0>So what we're we're gonna write an operator

00:05:04.345 --> 00:05:06.264
<v Speaker 0>today, if I'm not mistaken. Is that is

00:05:06.264 --> 00:05:08.665
<v Speaker 0>that correct? Yes. We're gonna do a

00:05:09.225 --> 00:05:11.625
<v Speaker 1>very simple case. We're gonna call this the

00:05:11.625 --> 00:05:14.250
<v Speaker 1>add operator where we basically take two

00:05:14.490 --> 00:05:16.570
<v Speaker 1>add ins and compute the sum.

00:05:17.050 --> 00:05:17.530
<v Speaker 1>And

00:05:18.490 --> 00:05:21.930
<v Speaker 1>while typically your operators are gonna interact more

00:05:21.930 --> 00:05:25.050
<v Speaker 1>so with objects and resources within

00:05:25.210 --> 00:05:26.889
<v Speaker 1>the Kubernetes ecosystem,

00:05:27.845 --> 00:05:30.165
<v Speaker 1>This will at least demonstrate how to get

00:05:30.165 --> 00:05:32.645
<v Speaker 1>up and running with some simple business logic,

00:05:32.645 --> 00:05:34.965
<v Speaker 1>but then we'll also wire in some useful

00:05:34.965 --> 00:05:37.125
<v Speaker 1>tools that you would actually use

00:05:37.445 --> 00:05:39.125
<v Speaker 1>for interacting with

00:05:40.565 --> 00:05:41.765
<v Speaker 1>those other resources.

00:05:42.850 --> 00:05:46.130
<v Speaker 0>Okay. Will we be running today's operator and

00:05:46.130 --> 00:05:47.890
<v Speaker 0>say that for Kubernetes cluster?

00:05:47.970 --> 00:05:50.770
<v Speaker 1>We sure will. Alright. I've always like you

00:05:50.770 --> 00:05:52.370
<v Speaker 0>know, I've I've dabbled in this in the

00:05:52.370 --> 00:05:54.530
<v Speaker 0>past and never really been terribly successful.

00:05:55.015 --> 00:05:57.015
<v Speaker 0>And I think it's just always the that

00:05:57.015 --> 00:05:59.175
<v Speaker 0>development environment and how you how you work

00:05:59.175 --> 00:06:00.135
<v Speaker 0>with it, how you get it. And so

00:06:00.135 --> 00:06:01.575
<v Speaker 0>I'm looking forward to just seeing you kinda

00:06:01.575 --> 00:06:03.335
<v Speaker 0>break all that down for us and and

00:06:04.215 --> 00:06:05.655
<v Speaker 1>Yeah. Absolutely.

00:06:05.655 --> 00:06:07.575
<v Speaker 0>Learn a lot. So should we get your

00:06:07.575 --> 00:06:09.895
<v Speaker 0>screen up when we get started? Yes.

00:06:10.140 --> 00:06:11.580
<v Speaker 1>Yeah. Let's go there.

00:06:14.060 --> 00:06:15.820
<v Speaker 1>So here you see I have a Mac

00:06:15.820 --> 00:06:17.900
<v Speaker 1>with a terminal open.

00:06:18.300 --> 00:06:20.380
<v Speaker 1>Really, the only prerequisites

00:06:20.380 --> 00:06:20.940
<v Speaker 1>to

00:06:21.500 --> 00:06:24.060
<v Speaker 1>building this is having make installed

00:06:24.735 --> 00:06:26.575
<v Speaker 1>and having Golang.

00:06:27.855 --> 00:06:30.015
<v Speaker 1>And I'm using I think it's

00:06:30.975 --> 00:06:32.335
<v Speaker 1>1.15

00:06:32.335 --> 00:06:34.415
<v Speaker 1>and then the OperatorSDK.

00:06:34.895 --> 00:06:36.815
<v Speaker 1>The latest version is

00:06:37.055 --> 00:06:38.015
<v Speaker 1>1.2.

00:06:38.330 --> 00:06:40.250
<v Speaker 1>That's what I have downloaded, and you can

00:06:40.250 --> 00:06:42.090
<v Speaker 1>get that using brew.

00:06:43.290 --> 00:06:44.090
<v Speaker 1>And so

00:06:44.410 --> 00:06:46.730
<v Speaker 1>when building an operator

00:06:46.890 --> 00:06:48.170
<v Speaker 1>with Golang

00:06:48.170 --> 00:06:50.810
<v Speaker 1>and the operator SDK, you're gonna wanna start

00:06:50.810 --> 00:06:53.290
<v Speaker 1>in a directory that's in your go path.

00:06:53.715 --> 00:06:55.635
<v Speaker 1>And so that's why I have this go

00:06:55.635 --> 00:06:56.835
<v Speaker 1>source GitHub

00:06:56.915 --> 00:06:58.195
<v Speaker 1>demo van diesel.

00:06:58.915 --> 00:06:59.555
<v Speaker 1>And

00:07:00.915 --> 00:07:03.475
<v Speaker 1>I'm just gonna make a directory here

00:07:03.795 --> 00:07:05.075
<v Speaker 1>for our new

00:07:07.960 --> 00:07:08.920
<v Speaker 1>operator,

00:07:09.639 --> 00:07:11.960
<v Speaker 1>and we'll close this guy down for a

00:07:11.960 --> 00:07:12.440
<v Speaker 1>minute.

00:07:12.919 --> 00:07:14.040
<v Speaker 1>We got some

00:07:14.760 --> 00:07:15.960
<v Speaker 1>commands here.

00:07:16.440 --> 00:07:18.199
<v Speaker 1>I'll copy and paste because I am not

00:07:18.199 --> 00:07:19.479
<v Speaker 1>the best typer in the world.

00:07:20.285 --> 00:07:23.005
<v Speaker 1>And so we're gonna knit this directory.

00:07:23.085 --> 00:07:25.725
<v Speaker 1>We're gonna just gonna use the domain example.com,

00:07:25.725 --> 00:07:28.445
<v Speaker 1>and that's basically the domain name for

00:07:28.685 --> 00:07:29.405
<v Speaker 1>the,

00:07:32.205 --> 00:07:33.565
<v Speaker 1>schema that we're going to create.

00:07:35.120 --> 00:07:37.360
<v Speaker 1>And I'll list me as the owner, d

00:07:37.360 --> 00:07:39.280
<v Speaker 1>e kelly at equinix dot

00:07:39.280 --> 00:07:40.479
<v Speaker 1>com. Here,

00:07:41.680 --> 00:07:44.720
<v Speaker 1>it's gonna leverage the controller runtime

00:07:44.720 --> 00:07:45.360
<v Speaker 1>and,

00:07:45.599 --> 00:07:47.440
<v Speaker 1>basically set up our directory

00:07:47.520 --> 00:07:49.599
<v Speaker 1>with all this, boilerplate,

00:07:49.759 --> 00:07:50.159
<v Speaker 1>code.

00:07:50.765 --> 00:07:52.125
<v Speaker 1>And you can see we have a make

00:07:52.125 --> 00:07:55.085
<v Speaker 1>file, a Docker file, a bin where it's

00:07:55.085 --> 00:07:57.885
<v Speaker 1>already built our first manager with basically nothing

00:07:57.885 --> 00:08:00.205
<v Speaker 1>inside of it. And the next thing it's

00:08:00.205 --> 00:08:01.805
<v Speaker 1>gonna want us to do is create our

00:08:01.805 --> 00:08:02.605
<v Speaker 1>API.

00:08:03.565 --> 00:08:04.685
<v Speaker 0>Okay. Do mind if I ask you a

00:08:04.685 --> 00:08:07.060
<v Speaker 0>few questions as we go? No. Please.

00:08:07.300 --> 00:08:07.940
<v Speaker 0>So,

00:08:08.260 --> 00:08:09.940
<v Speaker 0>like, you know, I I've I've never done

00:08:09.940 --> 00:08:11.220
<v Speaker 0>this before. So some of these questions will

00:08:11.220 --> 00:08:12.340
<v Speaker 0>be hopefully

00:08:12.660 --> 00:08:14.900
<v Speaker 0>just to clarify my own understanding. But the

00:08:14.900 --> 00:08:16.020
<v Speaker 0>operator SDK

00:08:16.020 --> 00:08:17.700
<v Speaker 0>has a a binary as a command that

00:08:17.700 --> 00:08:18.340
<v Speaker 0>you have installed.

00:08:18.965 --> 00:08:21.365
<v Speaker 0>It's just for it's just for this boilerplate

00:08:21.365 --> 00:08:22.965
<v Speaker 0>stuff. Right? It's it doesn't really do anything

00:08:22.965 --> 00:08:25.685
<v Speaker 0>else. Everything else is consumed, I'm guessing, by

00:08:25.845 --> 00:08:27.605
<v Speaker 0>something in the go mod that points to

00:08:27.605 --> 00:08:29.205
<v Speaker 0>the operator SDKs.

00:08:30.005 --> 00:08:30.165
<v Speaker 1>Correct.

00:08:32.029 --> 00:08:32.750
<v Speaker 1>So

00:08:32.990 --> 00:08:34.110
<v Speaker 1>OperatorSDK

00:08:34.110 --> 00:08:35.390
<v Speaker 1>is just creating

00:08:35.549 --> 00:08:38.510
<v Speaker 1>the the directory structure for us and

00:08:39.070 --> 00:08:40.750
<v Speaker 1>building our initial

00:08:41.070 --> 00:08:43.309
<v Speaker 1>main .go, which is gonna kind of be

00:08:43.309 --> 00:08:46.029
<v Speaker 1>the manager that gets built. And the manager

00:08:46.029 --> 00:08:47.470
<v Speaker 1>will then have controllers

00:08:48.885 --> 00:08:50.245
<v Speaker 1>for the operator

00:08:50.404 --> 00:08:52.645
<v Speaker 1>and, you know, and then when you want

00:08:52.645 --> 00:08:53.525
<v Speaker 1>to say

00:08:56.325 --> 00:08:58.805
<v Speaker 1>apply a custom resource

00:08:58.805 --> 00:09:01.205
<v Speaker 1>that is of this type, it'll go to

00:09:01.205 --> 00:09:03.285
<v Speaker 1>the reconciler for the operator

00:09:04.270 --> 00:09:07.150
<v Speaker 1>to do the business logic, compute everything, and

00:09:07.150 --> 00:09:08.270
<v Speaker 1>return the results.

00:09:08.910 --> 00:09:11.790
<v Speaker 0>Okay. Sweet. And that domain flag that you

00:09:11.790 --> 00:09:13.390
<v Speaker 0>have passed, is that gonna be like a

00:09:13.390 --> 00:09:16.030
<v Speaker 0>prefix for API version? Like, is that what

00:09:16.030 --> 00:09:18.270
<v Speaker 0>separates out from other controllers?

00:09:20.904 --> 00:09:22.345
<v Speaker 1>This one I have highlighted.

00:09:24.264 --> 00:09:26.024
<v Speaker 1>So, like, the initial

00:09:27.065 --> 00:09:28.024
<v Speaker 1>operator

00:09:28.024 --> 00:09:29.625
<v Speaker 1>in it that we just ran just sets

00:09:29.625 --> 00:09:31.145
<v Speaker 1>up the directory structure,

00:09:31.945 --> 00:09:34.300
<v Speaker 1>and then we're going to actually add the

00:09:34.300 --> 00:09:37.660
<v Speaker 1>schema to our API with this next tab.

00:09:37.660 --> 00:09:39.579
<v Speaker 0>Okay. And I guess I just sorry. And

00:09:39.579 --> 00:09:40.139
<v Speaker 0>you go.

00:09:40.620 --> 00:09:43.019
<v Speaker 1>Go ahead. I I guess I just didn't

00:09:43.019 --> 00:09:45.180
<v Speaker 0>understand the --domainexample.com

00:09:45.180 --> 00:09:46.540
<v Speaker 0>in the previous command.

00:09:48.545 --> 00:09:51.185
<v Speaker 1>So, like, when you create a resource in

00:09:51.185 --> 00:09:52.225
<v Speaker 1>Kubernetes,

00:09:52.945 --> 00:09:55.105
<v Speaker 1>you're telling it it's

00:09:56.785 --> 00:09:59.745
<v Speaker 1>it it has this schema and it's typically

00:09:59.745 --> 00:10:03.780
<v Speaker 1>domain.com/v1

00:10:03.940 --> 00:10:04.980
<v Speaker 1>or whatever.

00:10:05.140 --> 00:10:06.580
<v Speaker 1>And so that's all it's

00:10:06.980 --> 00:10:09.140
<v Speaker 1>that's using that in the Okay. The custom

00:10:09.140 --> 00:10:10.420
<v Speaker 1>resource definition.

00:10:10.660 --> 00:10:12.420
<v Speaker 1>And so it can be anything that you

00:10:12.420 --> 00:10:13.460
<v Speaker 1>want it to be.

00:10:14.260 --> 00:10:15.140
<v Speaker 1>Example.com

00:10:15.140 --> 00:10:16.820
<v Speaker 1>is just kind of the the default.

00:10:18.765 --> 00:10:19.725
<v Speaker 1>But typically,

00:10:20.285 --> 00:10:23.645
<v Speaker 1>you're creating your own schema to extend Kubernetes,

00:10:23.645 --> 00:10:25.405
<v Speaker 1>you would use your own domain name.

00:10:26.125 --> 00:10:26.845
<v Speaker 0>Okay.

00:10:27.245 --> 00:10:27.965
<v Speaker 0>Thanks.

00:10:28.125 --> 00:10:29.565
<v Speaker 1>And it'll make more sense here in a

00:10:29.565 --> 00:10:30.045
<v Speaker 1>minute too.

00:10:32.120 --> 00:10:35.160
<v Speaker 1>Because now we're creating this add operator, and

00:10:35.160 --> 00:10:37.160
<v Speaker 1>we're just gonna put it in a group

00:10:37.160 --> 00:10:39.480
<v Speaker 1>called math. Because say we wanna do a

00:10:39.480 --> 00:10:42.920
<v Speaker 1>subtract subtraction or a multiplication operator later, we

00:10:42.920 --> 00:10:45.080
<v Speaker 1>can still add it to the same project

00:10:45.365 --> 00:10:46.165
<v Speaker 1>or

00:10:46.644 --> 00:10:49.685
<v Speaker 1>just have it part of that schema group.

00:10:51.204 --> 00:10:53.764
<v Speaker 1>And so

00:11:03.339 --> 00:11:05.339
<v Speaker 1>And so now we have kind of all

00:11:05.339 --> 00:11:08.700
<v Speaker 1>the files that we need to start developing

00:11:08.860 --> 00:11:12.220
<v Speaker 1>the operator, and we'll start here with

00:11:13.435 --> 00:11:15.435
<v Speaker 1>the the main entry point.

00:11:15.755 --> 00:11:17.755
<v Speaker 1>And so you can see it's,

00:11:18.475 --> 00:11:20.795
<v Speaker 1>you know, using the controller runtime

00:11:21.195 --> 00:11:21.995
<v Speaker 1>to

00:11:22.714 --> 00:11:23.835
<v Speaker 1>set up everything.

00:11:24.075 --> 00:11:27.269
<v Speaker 1>And the nice thing about this is behind

00:11:27.269 --> 00:11:30.230
<v Speaker 1>the scenes, it's creating the manager for the

00:11:30.230 --> 00:11:31.110
<v Speaker 1>operator

00:11:31.350 --> 00:11:33.670
<v Speaker 1>and adding in a lot of features that

00:11:33.670 --> 00:11:35.670
<v Speaker 1>you'll want down the road, like,

00:11:37.029 --> 00:11:37.670
<v Speaker 1>automatic,

00:11:37.990 --> 00:11:39.269
<v Speaker 1>collection of metrics.

00:11:39.510 --> 00:11:41.430
<v Speaker 1>You can do leader election if you want

00:11:41.430 --> 00:11:43.575
<v Speaker 1>to say run multiple

00:11:44.135 --> 00:11:45.015
<v Speaker 1>replicas.

00:11:46.535 --> 00:11:49.335
<v Speaker 1>And and then it's just wiring in our

00:11:49.335 --> 00:11:52.375
<v Speaker 1>controller into the manager and then starting it

00:11:52.375 --> 00:11:52.935
<v Speaker 1>up.

00:11:55.415 --> 00:11:57.015
<v Speaker 1>And so there is one

00:11:57.850 --> 00:12:00.490
<v Speaker 1>addition to the controller that I'd like to

00:12:00.490 --> 00:12:01.850
<v Speaker 1>add is

00:12:02.330 --> 00:12:05.050
<v Speaker 1>oftentimes with custom or with resources, you're gonna

00:12:05.050 --> 00:12:05.930
<v Speaker 1>want to

00:12:07.130 --> 00:12:09.370
<v Speaker 1>add a recorder so that you can

00:12:10.195 --> 00:12:11.635
<v Speaker 1>publish events.

00:12:11.635 --> 00:12:12.595
<v Speaker 1>So say

00:12:12.755 --> 00:12:15.954
<v Speaker 1>your operator is, you know, building up a

00:12:15.954 --> 00:12:18.595
<v Speaker 1>new application, it may take time for it

00:12:18.595 --> 00:12:21.555
<v Speaker 1>to, you know, download the image,

00:12:21.875 --> 00:12:22.834
<v Speaker 1>deploy

00:12:22.995 --> 00:12:23.954
<v Speaker 1>the container,

00:12:24.600 --> 00:12:27.480
<v Speaker 1>and you can then, since it's asynchronous,

00:12:27.480 --> 00:12:30.120
<v Speaker 1>you can, publish these events so people can

00:12:30.120 --> 00:12:31.160
<v Speaker 1>then check-in

00:12:31.160 --> 00:12:33.240
<v Speaker 1>on the kind of status of their

00:12:33.959 --> 00:12:37.855
<v Speaker 1>resources being built. And so the manager already

00:12:37.855 --> 00:12:40.654
<v Speaker 1>includes a record or has a recorder, so

00:12:40.654 --> 00:12:42.495
<v Speaker 1>we're just gonna add this to

00:12:43.214 --> 00:12:44.815
<v Speaker 1>our reconciler

00:12:46.895 --> 00:12:47.615
<v Speaker 1>right here.

00:12:49.870 --> 00:12:52.590
<v Speaker 1>And so we were creating an event recorder

00:12:52.590 --> 00:12:53.470
<v Speaker 1>for add.

00:12:54.030 --> 00:12:54.590
<v Speaker 1>And,

00:12:54.990 --> 00:12:57.150
<v Speaker 1>you know, other things you could do is,

00:12:57.390 --> 00:13:00.830
<v Speaker 1>you know, here we have a logger that's

00:13:00.830 --> 00:13:03.425
<v Speaker 1>set to use dev mode. You could say

00:13:03.425 --> 00:13:05.025
<v Speaker 1>add another flag

00:13:05.265 --> 00:13:08.785
<v Speaker 1>to your, container startup that says, you know,

00:13:08.785 --> 00:13:10.465
<v Speaker 1>whether or not you wanna use dev for

00:13:10.465 --> 00:13:11.105
<v Speaker 1>production.

00:13:11.585 --> 00:13:14.225
<v Speaker 1>Just have that be a boolean and then

00:13:18.340 --> 00:13:21.060
<v Speaker 1>have that specified here when you set up

00:13:21.060 --> 00:13:21.940
<v Speaker 1>your login.

00:13:22.900 --> 00:13:24.740
<v Speaker 1>And so the nice thing about it is

00:13:24.740 --> 00:13:25.700
<v Speaker 1>it really,

00:13:26.100 --> 00:13:27.940
<v Speaker 1>you know, sets you up to, like, really

00:13:27.940 --> 00:13:30.740
<v Speaker 1>focus on your own business logic and

00:13:31.194 --> 00:13:32.074
<v Speaker 1>your own,

00:13:32.394 --> 00:13:33.995
<v Speaker 1>APIs and controllers.

00:13:34.315 --> 00:13:36.714
<v Speaker 1>And so since we created the API under,

00:13:36.954 --> 00:13:38.555
<v Speaker 1>v one beta one,

00:13:39.274 --> 00:13:41.355
<v Speaker 1>we then go into our ad types, and

00:13:41.355 --> 00:13:43.755
<v Speaker 1>this will be the schema

00:13:44.074 --> 00:13:44.714
<v Speaker 1>for

00:13:45.115 --> 00:13:46.074
<v Speaker 1>our operator.

00:13:47.910 --> 00:13:51.910
<v Speaker 1>And I've, again, kind of prebuilt this before.

00:13:55.589 --> 00:13:58.230
<v Speaker 1>And, again, I'll just copy and paste,

00:13:59.885 --> 00:14:01.405
<v Speaker 1>and you'll see it bigger here on this

00:14:01.405 --> 00:14:02.045
<v Speaker 1>screen.

00:14:02.285 --> 00:14:03.965
<v Speaker 1>And so, again, this is kind of a

00:14:03.965 --> 00:14:05.325
<v Speaker 1>template scaffolding

00:14:05.325 --> 00:14:06.045
<v Speaker 1>file.

00:14:06.445 --> 00:14:08.445
<v Speaker 1>Add spec is

00:14:08.605 --> 00:14:11.965
<v Speaker 1>how we define the desired state of the

00:14:11.965 --> 00:14:12.765
<v Speaker 1>operator.

00:14:13.085 --> 00:14:13.965
<v Speaker 1>And so

00:14:14.370 --> 00:14:15.970
<v Speaker 1>what we wanna be able to do is

00:14:15.970 --> 00:14:18.610
<v Speaker 1>take two add ins and compute the sum.

00:14:18.610 --> 00:14:20.370
<v Speaker 1>And so what we're going to submit to

00:14:20.370 --> 00:14:22.450
<v Speaker 1>the API are those two add ins. We're

00:14:22.450 --> 00:14:23.810
<v Speaker 1>gonna say they're integers,

00:14:26.370 --> 00:14:27.330
<v Speaker 1>and then

00:14:27.785 --> 00:14:29.705
<v Speaker 1>there's a next thing we do for the

00:14:29.705 --> 00:14:32.665
<v Speaker 1>status is the observed state. And so when

00:14:32.665 --> 00:14:34.585
<v Speaker 1>it's all said and done, we wanna have

00:14:34.585 --> 00:14:36.105
<v Speaker 1>that sum computed

00:14:36.265 --> 00:14:37.305
<v Speaker 1>and available.

00:14:42.279 --> 00:14:43.320
<v Speaker 1>And

00:14:44.199 --> 00:14:47.720
<v Speaker 1>so, you know, this really defines the the

00:14:47.720 --> 00:14:50.360
<v Speaker 1>API that we're building for this operator.

00:14:50.519 --> 00:14:52.519
<v Speaker 1>We really don't have to do anything else

00:14:52.519 --> 00:14:55.555
<v Speaker 1>with it because our ad spec and ad

00:14:55.555 --> 00:14:58.035
<v Speaker 1>status then become part of the ad

00:14:58.435 --> 00:14:59.875
<v Speaker 1>struck ad list.

00:15:00.274 --> 00:15:03.154
<v Speaker 1>And then we the schema builder will register

00:15:03.315 --> 00:15:04.915
<v Speaker 1>those two new schemas

00:15:05.880 --> 00:15:09.880
<v Speaker 1>or custom resource definitions within the the cluster.

00:15:11.080 --> 00:15:13.400
<v Speaker 0>Okay. So when we ran that last generate

00:15:13.400 --> 00:15:15.400
<v Speaker 0>command, I noticed that it add I asked

00:15:15.400 --> 00:15:16.760
<v Speaker 0>you two questions. Do you want to add

00:15:16.760 --> 00:15:18.600
<v Speaker 0>a resource and add a controller? So, like,

00:15:18.645 --> 00:15:21.685
<v Speaker 0>that boilerplate is just an empty custom resource

00:15:21.685 --> 00:15:24.245
<v Speaker 0>definition with a controller that's watching it, and

00:15:24.245 --> 00:15:25.845
<v Speaker 0>then we have to then decide

00:15:26.085 --> 00:15:27.685
<v Speaker 0>what gets in that spec, what gets in

00:15:27.685 --> 00:15:29.605
<v Speaker 0>that status. And that's you're just adding that

00:15:29.605 --> 00:15:31.730
<v Speaker 0>to the obstructs, like. Yeah.

00:15:31.970 --> 00:15:34.850
<v Speaker 1>And it's it's easy as that. And so

00:15:34.850 --> 00:15:35.970
<v Speaker 1>the last one

00:15:36.210 --> 00:15:38.930
<v Speaker 1>it can created was our controller.

00:15:42.530 --> 00:15:44.930
<v Speaker 1>And again, kind of boilerplate

00:15:44.930 --> 00:15:45.570
<v Speaker 1>code,

00:15:45.890 --> 00:15:49.545
<v Speaker 1>and and so it's setting up our reconciler

00:15:49.545 --> 00:15:51.464
<v Speaker 1>and our logging for you.

00:15:52.985 --> 00:15:54.824
<v Speaker 1>And so one thing that we did with

00:15:54.824 --> 00:15:56.105
<v Speaker 1>our reconciler

00:15:56.105 --> 00:15:59.464
<v Speaker 1>is we added in an event recorder.

00:16:00.185 --> 00:16:01.144
<v Speaker 1>And so

00:16:01.970 --> 00:16:03.490
<v Speaker 1>we're gonna want to

00:16:03.889 --> 00:16:06.290
<v Speaker 1>also add that to the definition of our

00:16:06.290 --> 00:16:07.810
<v Speaker 1>controller here.

00:16:12.450 --> 00:16:14.850
<v Speaker 1>And I'll and then demonstrate how to use

00:16:14.850 --> 00:16:15.170
<v Speaker 1>that.

00:16:16.175 --> 00:16:18.175
<v Speaker 1>And so the reconciler

00:16:18.175 --> 00:16:20.975
<v Speaker 1>has within it your logging,

00:16:21.375 --> 00:16:21.935
<v Speaker 1>the,

00:16:22.255 --> 00:16:23.214
<v Speaker 1>schema,

00:16:23.214 --> 00:16:25.855
<v Speaker 1>and then it also includes a Kubernetes client

00:16:25.855 --> 00:16:27.215
<v Speaker 1>so that we can

00:16:27.455 --> 00:16:28.255
<v Speaker 1>then,

00:16:28.895 --> 00:16:32.360
<v Speaker 1>query to, like, either list, create, update,

00:16:32.760 --> 00:16:34.840
<v Speaker 1>objects within Kubernetes.

00:16:37.640 --> 00:16:38.680
<v Speaker 1>And so

00:16:39.080 --> 00:16:41.320
<v Speaker 1>what we're gonna do here

00:16:41.480 --> 00:16:43.640
<v Speaker 1>is I'm gonna kind of bring in some

00:16:43.640 --> 00:16:44.680
<v Speaker 1>more boilerplate.

00:16:52.145 --> 00:16:54.785
<v Speaker 1>Because what we're gonna wanna do is when

00:16:54.785 --> 00:16:57.505
<v Speaker 1>we receive

00:16:58.050 --> 00:17:00.370
<v Speaker 1>one of these custom resources

00:17:00.370 --> 00:17:02.770
<v Speaker 1>for the ad, we're gonna pull in that

00:17:02.770 --> 00:17:04.609
<v Speaker 1>as a as a what we call our

00:17:04.609 --> 00:17:05.409
<v Speaker 1>instance.

00:17:05.570 --> 00:17:08.130
<v Speaker 1>And so it's of type math b one

00:17:08.130 --> 00:17:09.169
<v Speaker 1>beta one

00:17:09.410 --> 00:17:10.849
<v Speaker 1>and that ad

00:17:11.605 --> 00:17:14.085
<v Speaker 1>struct that we created in our ad types

00:17:14.085 --> 00:17:14.964
<v Speaker 1>over here.

00:17:16.565 --> 00:17:18.964
<v Speaker 1>And so this ad struct is gonna have

00:17:19.044 --> 00:17:20.085
<v Speaker 1>metadata,

00:17:20.085 --> 00:17:22.645
<v Speaker 1>the ad spec, the ad status, and that

00:17:22.645 --> 00:17:24.724
<v Speaker 1>is the object that we're working with in

00:17:24.724 --> 00:17:25.284
<v Speaker 1>Kubernetes.

00:17:26.380 --> 00:17:29.259
<v Speaker 1>We use our reconciler client

00:17:29.340 --> 00:17:30.700
<v Speaker 1>to get that

00:17:31.580 --> 00:17:32.299
<v Speaker 1>instance.

00:17:35.340 --> 00:17:36.780
<v Speaker 1>And then we're just, you know, kind of

00:17:36.780 --> 00:17:38.700
<v Speaker 1>checking errors

00:17:38.315 --> 00:17:41.515
<v Speaker 1>and also recording events based on those errors.

00:17:41.515 --> 00:17:41.995
<v Speaker 1>So,

00:17:42.555 --> 00:17:45.195
<v Speaker 1>someone wouldn't have to necessarily go into

00:17:45.275 --> 00:17:47.835
<v Speaker 1>log files to debug problems

00:17:47.835 --> 00:17:50.635
<v Speaker 1>with their custom resource that they just created.

00:17:50.635 --> 00:17:53.389
<v Speaker 1>They could just describe it and see, you

00:17:53.389 --> 00:17:55.469
<v Speaker 1>know, what error had occurred.

00:17:55.710 --> 00:17:58.350
<v Speaker 1>And so if the error is that it's

00:17:58.350 --> 00:18:00.029
<v Speaker 1>not found, we want to

00:18:02.669 --> 00:18:04.750
<v Speaker 1>just return it and requeue.

00:18:04.750 --> 00:18:06.830
<v Speaker 1>But if we have a problem reading it,

00:18:06.830 --> 00:18:08.830
<v Speaker 1>then we're gonna retry reading that request.

00:18:09.525 --> 00:18:11.285
<v Speaker 1>And so that's all we're doing here with

00:18:11.285 --> 00:18:12.725
<v Speaker 1>the boilerplate.

00:18:13.765 --> 00:18:14.645
<v Speaker 1>And then

00:18:15.205 --> 00:18:16.005
<v Speaker 1>the

00:18:16.165 --> 00:18:19.045
<v Speaker 1>next thing that we're gonna do is just

00:18:19.365 --> 00:18:19.845
<v Speaker 1>up,

00:18:20.565 --> 00:18:21.605
<v Speaker 1>compute our sum.

00:18:26.220 --> 00:18:28.059
<v Speaker 1>And update the status.

00:18:29.020 --> 00:18:29.900
<v Speaker 1>And so

00:18:30.060 --> 00:18:33.980
<v Speaker 1>here, the instance dot status sum is coming

00:18:33.980 --> 00:18:36.060
<v Speaker 1>from the spec of our two edits.

00:18:38.025 --> 00:18:38.904
<v Speaker 1>And then

00:18:39.865 --> 00:18:42.184
<v Speaker 1>once we calculate that sum, we want to

00:18:42.184 --> 00:18:44.424
<v Speaker 1>update that object in Kubernetes.

00:18:44.424 --> 00:18:46.585
<v Speaker 1>And so here, we're doing this using

00:18:46.905 --> 00:18:49.705
<v Speaker 1>our Kubernetes client again, the status

00:18:49.945 --> 00:18:50.825
<v Speaker 1>update

00:18:51.430 --> 00:18:53.830
<v Speaker 1>on that instance because then it will publish

00:18:53.830 --> 00:18:56.390
<v Speaker 1>the sum into that custom resource.

00:18:57.750 --> 00:18:59.909
<v Speaker 1>And, again, using logging

00:18:59.910 --> 00:19:00.630
<v Speaker 1>to

00:19:01.350 --> 00:19:04.710
<v Speaker 1>and event recording here to post errors.

00:19:06.145 --> 00:19:08.785
<v Speaker 1>And, yeah, I found the event recorder to

00:19:08.785 --> 00:19:10.465
<v Speaker 1>be super helpful because that way

00:19:11.025 --> 00:19:13.745
<v Speaker 1>operators can easily obtain information

00:19:14.305 --> 00:19:17.105
<v Speaker 1>about the status of their custom resource without

00:19:17.105 --> 00:19:18.305
<v Speaker 1>having to go to log files.

00:19:19.050 --> 00:19:21.050
<v Speaker 0>Yeah. I think it's one of my biggest

00:19:21.050 --> 00:19:23.450
<v Speaker 0>frustrations when I'm working with Kubernetes is, like,

00:19:23.450 --> 00:19:25.450
<v Speaker 0>the event log is just sitting there empty,

00:19:25.450 --> 00:19:27.530
<v Speaker 0>and I'm like, well, nothing's working, and I

00:19:27.530 --> 00:19:30.330
<v Speaker 0>have to start Yeah. Hunting down every log

00:19:30.330 --> 00:19:32.490
<v Speaker 0>from everything I I can find. Like Yeah.

00:19:32.490 --> 00:19:33.610
<v Speaker 1>Yeah. And

00:19:34.235 --> 00:19:36.155
<v Speaker 1>so this function down here is set up

00:19:36.155 --> 00:19:39.275
<v Speaker 1>with manager. That is what gets called in

00:19:39.275 --> 00:19:42.875
<v Speaker 1>our main go routine to add this controller

00:19:42.875 --> 00:19:43.914
<v Speaker 1>to the manager.

00:19:44.315 --> 00:19:45.035
<v Speaker 1>And so

00:19:45.275 --> 00:19:45.914
<v Speaker 1>we created

00:19:46.395 --> 00:19:47.515
<v Speaker 1>the repository

00:19:47.515 --> 00:19:49.870
<v Speaker 1>as, you know, the add operator, but we

00:19:49.870 --> 00:19:52.270
<v Speaker 1>could say change the name to MASH dash

00:19:52.270 --> 00:19:55.070
<v Speaker 1>operator and add additional controllers

00:19:55.150 --> 00:19:56.590
<v Speaker 1>into this. So

00:19:56.910 --> 00:20:00.190
<v Speaker 1>and, you know, having these as kind of

00:20:00.190 --> 00:20:00.750
<v Speaker 1>your

00:20:02.225 --> 00:20:03.264
<v Speaker 1>boilerplate

00:20:03.264 --> 00:20:05.264
<v Speaker 1>files, we could copy it over and create

00:20:05.264 --> 00:20:07.184
<v Speaker 1>say a subtraction spec

00:20:07.184 --> 00:20:09.024
<v Speaker 1>and a subtraction controller.

00:20:09.825 --> 00:20:11.424
<v Speaker 0>Okay. So and your

00:20:11.664 --> 00:20:12.465
<v Speaker 0>experience

00:20:12.465 --> 00:20:15.120
<v Speaker 0>then, do you think it's better to do

00:20:15.120 --> 00:20:17.120
<v Speaker 0>you separate out all these reconcilers

00:20:17.120 --> 00:20:19.680
<v Speaker 0>to be their own different controllers?

00:20:19.680 --> 00:20:21.760
<v Speaker 0>Or do you use one controller that kinda

00:20:21.760 --> 00:20:24.560
<v Speaker 0>monitors multiple resources? Like, what is the best

00:20:24.560 --> 00:20:25.120
<v Speaker 0>practice there?

00:20:27.274 --> 00:20:29.914
<v Speaker 1>I think it really depends on, like, the

00:20:29.914 --> 00:20:32.634
<v Speaker 1>business and, you know, as always, like, the

00:20:32.634 --> 00:20:34.154
<v Speaker 1>business and the situation.

00:20:36.715 --> 00:20:39.195
<v Speaker 1>Like, I I like I like to think

00:20:39.195 --> 00:20:42.554
<v Speaker 1>of the operator as a manager of controllers.

00:20:42.740 --> 00:20:43.620
<v Speaker 1>And so,

00:20:44.900 --> 00:20:48.419
<v Speaker 1>sometimes there's different operations that you wanna do

00:20:48.740 --> 00:20:51.780
<v Speaker 1>with from within, like, the same management organis

00:20:51.860 --> 00:20:53.700
<v Speaker 1>so if you're thinking about people, you're gonna

00:20:53.700 --> 00:20:55.780
<v Speaker 1>have a manager, and then you have multiple

00:20:55.780 --> 00:20:59.254
<v Speaker 1>operators working for that manager. And those operators,

00:21:01.335 --> 00:21:03.495
<v Speaker 1>you know, are gonna have these reconcilers, like

00:21:03.495 --> 00:21:05.335
<v Speaker 1>the procedures that it runs

00:21:05.415 --> 00:21:07.495
<v Speaker 1>for to do specific tasks.

00:21:07.735 --> 00:21:10.134
<v Speaker 1>And so, you know, based on

00:21:10.615 --> 00:21:11.975
<v Speaker 1>the request,

00:21:14.110 --> 00:21:16.830
<v Speaker 1>you know, that's gonna define, like, the API.

00:21:16.830 --> 00:21:19.309
<v Speaker 1>That's the request coming in. And then there's

00:21:19.309 --> 00:21:21.950
<v Speaker 1>a procedure to run on those specific,

00:21:22.190 --> 00:21:22.989
<v Speaker 1>values.

00:21:24.669 --> 00:21:27.070
<v Speaker 1>And so you can have multiple operators

00:21:27.325 --> 00:21:29.885
<v Speaker 1>or controllers under one manager,

00:21:29.885 --> 00:21:32.605
<v Speaker 1>and we're actually doing that with more

00:21:32.605 --> 00:21:33.405
<v Speaker 1>extensive

00:21:33.725 --> 00:21:36.045
<v Speaker 1>operators that we're using in production.

00:21:37.245 --> 00:21:38.765
<v Speaker 1>And it and it just makes sense. You're

00:21:38.765 --> 00:21:40.445
<v Speaker 1>deploying one pod and they and they kind

00:21:40.445 --> 00:21:41.885
<v Speaker 1>of share a lot of the same back

00:21:41.885 --> 00:21:42.605
<v Speaker 1>end code

00:21:43.180 --> 00:21:45.580
<v Speaker 1>in terms of other business logic that it's

00:21:45.580 --> 00:21:46.380
<v Speaker 1>gonna perform.

00:21:47.180 --> 00:21:49.260
<v Speaker 1>But if they really don't share any code,

00:21:49.260 --> 00:21:51.500
<v Speaker 1>it's fine also separating them up.

00:21:51.820 --> 00:21:52.860
<v Speaker 0>Okay. Cool. Thanks.

00:21:55.515 --> 00:21:56.475
<v Speaker 1>And so,

00:21:57.595 --> 00:21:59.755
<v Speaker 1>you know, now that we've built

00:21:59.835 --> 00:22:02.715
<v Speaker 1>our the functionality to do everything,

00:22:06.235 --> 00:22:07.515
<v Speaker 1>we're gonna

00:22:07.909 --> 00:22:10.630
<v Speaker 1>we're

00:22:10.630 --> 00:22:13.669
<v Speaker 1>gonna generate the configs

00:22:13.830 --> 00:22:15.349
<v Speaker 1>for this because

00:22:15.429 --> 00:22:17.590
<v Speaker 1>we went in and updated

00:22:20.995 --> 00:22:23.475
<v Speaker 1>our schema here. And so when you update

00:22:23.475 --> 00:22:24.595
<v Speaker 1>the schema

00:22:24.595 --> 00:22:25.634
<v Speaker 1>of your

00:22:26.755 --> 00:22:27.554
<v Speaker 1>controller,

00:22:27.635 --> 00:22:30.515
<v Speaker 1>you then need to recompute the custom resource

00:22:30.515 --> 00:22:31.475
<v Speaker 1>definitions,

00:22:31.715 --> 00:22:33.955
<v Speaker 1>and it's doing it from this code. So

00:22:33.955 --> 00:22:35.475
<v Speaker 1>that way, we don't have to

00:22:36.169 --> 00:22:38.409
<v Speaker 1>build all of that YAML ourselves.

00:22:39.850 --> 00:22:42.410
<v Speaker 0>Is that with that weird comment syntaxes with

00:22:42.410 --> 00:22:44.169
<v Speaker 0>the pluses at the start? Is that a

00:22:44.330 --> 00:22:45.049
<v Speaker 0>I mean,

00:22:45.610 --> 00:22:46.890
<v Speaker 0>is that a Golang thing or is that

00:22:46.890 --> 00:22:49.210
<v Speaker 0>just something the operator SDKs is parsing out

00:22:49.210 --> 00:22:50.490
<v Speaker 0>of the the code?

00:22:51.765 --> 00:22:54.325
<v Speaker 1>Yeah. That's the upper like, the controller

00:22:55.125 --> 00:22:56.005
<v Speaker 1>generator.

00:22:56.005 --> 00:22:58.325
<v Speaker 1>It's taking a look at this ad types

00:22:58.405 --> 00:22:59.925
<v Speaker 1>and then generating

00:23:00.165 --> 00:23:01.125
<v Speaker 1>the spec

00:23:01.525 --> 00:23:04.340
<v Speaker 1>based on this Golang file. Okay.

00:23:04.340 --> 00:23:06.580
<v Speaker 0>See lines thirty seven thirty eight, they look

00:23:06.580 --> 00:23:07.380
<v Speaker 0>special.

00:23:07.540 --> 00:23:09.300
<v Speaker 0>And it's it's not something that I I've

00:23:09.300 --> 00:23:10.980
<v Speaker 0>seen before in Go. I just wasn't sure

00:23:10.980 --> 00:23:12.420
<v Speaker 0>if that's a Go thing. Is this just

00:23:12.420 --> 00:23:15.140
<v Speaker 0>an operator cube builder thing? Like It's a

00:23:15.140 --> 00:23:16.500
<v Speaker 1>it's a operator.

00:23:16.820 --> 00:23:18.740
<v Speaker 1>So it's using those as annotations.

00:23:19.355 --> 00:23:20.395
<v Speaker 0>Alright. Okay.

00:23:21.835 --> 00:23:24.075
<v Speaker 1>And so we can now see

00:23:25.035 --> 00:23:25.595
<v Speaker 1>we'll use

00:23:28.955 --> 00:23:31.275
<v Speaker 1>so we have our map.example.com

00:23:31.275 --> 00:23:31.835
<v Speaker 1>ads.

00:23:33.409 --> 00:23:36.129
<v Speaker 1>And based on the file that we

00:23:37.409 --> 00:23:39.169
<v Speaker 1>created in Golang,

00:23:40.529 --> 00:23:42.210
<v Speaker 1>it's created our

00:23:42.529 --> 00:23:45.409
<v Speaker 1>custom resource definition that will get added to

00:23:45.409 --> 00:23:46.289
<v Speaker 1>Kubernetes.

00:23:49.135 --> 00:23:51.375
<v Speaker 0>Well, even that's all the open API stuff.

00:23:53.775 --> 00:23:55.455
<v Speaker 1>And

00:23:57.135 --> 00:23:57.855
<v Speaker 1>then

00:24:00.910 --> 00:24:03.710
<v Speaker 1>one thing I won't do live here is

00:24:03.710 --> 00:24:05.870
<v Speaker 1>pushing or building the

00:24:06.110 --> 00:24:06.830
<v Speaker 1>the

00:24:07.230 --> 00:24:10.430
<v Speaker 1>building the manager, our our operator, and pushing

00:24:10.430 --> 00:24:11.870
<v Speaker 1>that to a repository.

00:24:12.285 --> 00:24:13.405
<v Speaker 1>Then, you know, I'm

00:24:14.045 --> 00:24:16.045
<v Speaker 1>I don't have the greatest Internet. It would

00:24:16.045 --> 00:24:18.205
<v Speaker 1>take a really long time. So I've already

00:24:18.205 --> 00:24:19.325
<v Speaker 1>pushed this to

00:24:20.685 --> 00:24:22.205
<v Speaker 1>a cluster,

00:24:22.845 --> 00:24:23.645
<v Speaker 1>but

00:24:23.965 --> 00:24:25.245
<v Speaker 1>I can show you what

00:24:25.760 --> 00:24:27.519
<v Speaker 1>you would need to do to make that

00:24:27.519 --> 00:24:28.879
<v Speaker 1>happen here as well.

00:24:30.559 --> 00:24:31.279
<v Speaker 1>So

00:24:31.519 --> 00:24:33.519
<v Speaker 1>what you're gonna wanna do is,

00:24:33.600 --> 00:24:36.320
<v Speaker 1>you know, add this custom resource

00:24:40.175 --> 00:24:42.975
<v Speaker 1>to your cluster. So I'm just k apply

00:24:42.975 --> 00:24:45.054
<v Speaker 1>the config CRD basis.

00:24:47.695 --> 00:24:48.575
<v Speaker 1>And then

00:24:49.135 --> 00:24:50.575
<v Speaker 1>you'll push the

00:24:51.295 --> 00:24:52.975
<v Speaker 1>role in binding

00:24:53.340 --> 00:24:55.259
<v Speaker 1>because, again, all of these are

00:24:56.700 --> 00:24:58.139
<v Speaker 1>generated for you.

00:25:01.900 --> 00:25:03.419
<v Speaker 1>So you'll apply that

00:25:03.740 --> 00:25:05.740
<v Speaker 1>and then apply the role binding.

00:25:08.245 --> 00:25:10.405
<v Speaker 1>And we're just going with the defaults right

00:25:10.405 --> 00:25:12.485
<v Speaker 1>now, but you can go in,

00:25:13.605 --> 00:25:14.245
<v Speaker 1>and,

00:25:14.725 --> 00:25:17.125
<v Speaker 1>you know, change the namespaces

00:25:17.205 --> 00:25:18.404
<v Speaker 1>and the

00:25:18.965 --> 00:25:20.165
<v Speaker 1>user that you wanna use

00:25:21.040 --> 00:25:23.520
<v Speaker 1>for all of this. And the config manager

00:25:23.520 --> 00:25:24.399
<v Speaker 1>manager

00:25:24.560 --> 00:25:26.559
<v Speaker 1>is actually what deploys

00:25:29.200 --> 00:25:30.559
<v Speaker 1>the operator.

00:25:30.960 --> 00:25:32.960
<v Speaker 1>And that's done after you do

00:25:34.960 --> 00:25:37.375
<v Speaker 1>because here in the make file, you can

00:25:37.375 --> 00:25:38.015
<v Speaker 1>see,

00:25:38.815 --> 00:25:40.654
<v Speaker 1>all your options.

00:25:40.815 --> 00:25:41.695
<v Speaker 1>And so,

00:25:41.935 --> 00:25:44.975
<v Speaker 1>like, manager will actually build the operator for

00:25:44.975 --> 00:25:45.534
<v Speaker 1>you,

00:25:47.055 --> 00:25:49.295
<v Speaker 1>and and then you can also do a

00:25:49.295 --> 00:25:51.500
<v Speaker 1>docker build, and that will put it in

00:25:51.500 --> 00:25:54.220
<v Speaker 1>an actual container and then push it. And

00:25:54.220 --> 00:25:55.900
<v Speaker 1>in our case, we're pushing it to a

00:25:55.900 --> 00:25:57.180
<v Speaker 1>COI back end.

00:25:57.740 --> 00:25:58.460
<v Speaker 1>And

00:25:58.860 --> 00:26:01.740
<v Speaker 1>so with this operator now deployed,

00:26:03.900 --> 00:26:04.780
<v Speaker 1>we can

00:26:05.585 --> 00:26:08.625
<v Speaker 1>create our custom resource. And so

00:26:10.145 --> 00:26:12.785
<v Speaker 1>this is where that example.com

00:26:12.785 --> 00:26:15.505
<v Speaker 1>comes in because here our API version

00:26:15.665 --> 00:26:19.050
<v Speaker 1>is math.example.comv

00:26:19.050 --> 00:26:20.330
<v Speaker 1>1 beta one.

00:26:20.570 --> 00:26:21.690
<v Speaker 1>The type of,

00:26:22.250 --> 00:26:24.010
<v Speaker 1>the kind is add.

00:26:24.170 --> 00:26:25.770
<v Speaker 1>We're giving it a name of five plus

00:26:25.770 --> 00:26:26.170
<v Speaker 1>seven.

00:26:30.745 --> 00:26:32.905
<v Speaker 1>Hopefully, I didn't screw anything up in the

00:26:32.905 --> 00:26:33.705
<v Speaker 1>cluster.

00:26:37.625 --> 00:26:39.225
<v Speaker 1>And then we can

00:26:39.385 --> 00:26:40.105
<v Speaker 1>k get.

00:26:44.309 --> 00:26:46.389
<v Speaker 0>And

00:26:48.870 --> 00:26:51.909
<v Speaker 1>we'll wanna do minus o YAML here.

00:26:56.605 --> 00:26:58.765
<v Speaker 1>So you can see the spec had these

00:26:58.765 --> 00:27:00.445
<v Speaker 1>two add ins, five and seven, and we

00:27:00.445 --> 00:27:02.445
<v Speaker 1>define that in our add dot types. We

00:27:02.445 --> 00:27:05.164
<v Speaker 1>computed the sum and pushed it back to

00:27:05.164 --> 00:27:06.524
<v Speaker 1>this custom resource.

00:27:07.725 --> 00:27:08.205
<v Speaker 0>Sweet.

00:27:09.169 --> 00:27:11.489
<v Speaker 1>And so yeah. That's the, like, very

00:27:11.730 --> 00:27:12.609
<v Speaker 1>basic

00:27:14.289 --> 00:27:15.649
<v Speaker 1>business logic.

00:27:15.650 --> 00:27:16.849
<v Speaker 1>You know, oftentimes,

00:27:17.169 --> 00:27:19.169
<v Speaker 1>you know, you'll be submitting

00:27:19.409 --> 00:27:20.289
<v Speaker 1>values

00:27:20.289 --> 00:27:23.809
<v Speaker 1>to, say, pull a list of pods in

00:27:23.809 --> 00:27:24.610
<v Speaker 1>and then

00:27:25.285 --> 00:27:28.085
<v Speaker 1>perform some action on those pods based on

00:27:28.085 --> 00:27:30.645
<v Speaker 1>the output of what's currently running.

00:27:30.885 --> 00:27:34.164
<v Speaker 1>And then your custom resource definition will keep

00:27:34.405 --> 00:27:35.044
<v Speaker 1>that

00:27:36.325 --> 00:27:39.525
<v Speaker 1>group of pods in that this consistent state

00:27:39.525 --> 00:27:40.085
<v Speaker 1>all the time.

00:27:42.180 --> 00:27:43.220
<v Speaker 0>Okay. Able

00:27:43.700 --> 00:27:44.340
<v Speaker 0>yeah.

00:27:44.660 --> 00:27:45.460
<v Speaker 0>So

00:27:46.180 --> 00:27:46.820
<v Speaker 0>I just

00:27:47.380 --> 00:27:49.460
<v Speaker 0>I I I wanna understand this. I'm gonna

00:27:49.460 --> 00:27:51.380
<v Speaker 0>just throw some complete newbie questions at you

00:27:51.380 --> 00:27:52.020
<v Speaker 0>here. Like,

00:27:53.435 --> 00:27:54.955
<v Speaker 0>the boilerplate that you've built. Right? I mean,

00:27:54.955 --> 00:27:56.555
<v Speaker 0>you only added, like, five lines of code

00:27:56.555 --> 00:27:59.034
<v Speaker 0>to this to this project. Right?

00:27:59.835 --> 00:28:01.995
<v Speaker 0>And does this magic reconcile

00:28:02.315 --> 00:28:05.275
<v Speaker 0>function which is being called? Now what triggers

00:28:05.275 --> 00:28:06.475
<v Speaker 0>that reconcile

00:28:06.475 --> 00:28:07.035
<v Speaker 0>to happen?

00:28:08.530 --> 00:28:09.090
<v Speaker 1>So,

00:28:09.570 --> 00:28:10.289
<v Speaker 1>basically,

00:28:10.770 --> 00:28:11.330
<v Speaker 1>this

00:28:11.970 --> 00:28:13.090
<v Speaker 1>reconciler

00:28:13.250 --> 00:28:16.050
<v Speaker 1>is we're what basically, what we're doing is

00:28:16.050 --> 00:28:18.450
<v Speaker 1>extending the Kubernetes API

00:28:18.690 --> 00:28:19.570
<v Speaker 1>to support

00:28:20.164 --> 00:28:21.524
<v Speaker 1>new schema.

00:28:22.005 --> 00:28:24.085
<v Speaker 1>And so what triggers the the

00:28:24.804 --> 00:28:25.684
<v Speaker 1>reconciler

00:28:25.684 --> 00:28:29.205
<v Speaker 1>is when we add this custom resource here.

00:28:29.924 --> 00:28:32.325
<v Speaker 1>So this is the API version and this

00:28:32.325 --> 00:28:34.910
<v Speaker 1>is the kind. And because we uploaded that

00:28:34.910 --> 00:28:37.630
<v Speaker 1>custom resource definition into the cluster,

00:28:37.790 --> 00:28:41.309
<v Speaker 1>Kubernetes now recognize this as this as a

00:28:41.790 --> 00:28:42.670
<v Speaker 1>resource

00:28:42.670 --> 00:28:44.030
<v Speaker 1>within the cluster.

00:28:45.310 --> 00:28:46.270
<v Speaker 1>And so

00:28:48.465 --> 00:28:50.625
<v Speaker 1>and if you look, here's the self link,

00:28:50.625 --> 00:28:54.385
<v Speaker 1>apismap.example.comv1beta1

00:28:54.385 --> 00:28:56.865
<v Speaker 1>namespace system ads, and then this is the

00:28:56.865 --> 00:28:57.664
<v Speaker 1>name of our,

00:28:58.145 --> 00:28:59.345
<v Speaker 1>custom resource.

00:28:59.585 --> 00:29:01.985
<v Speaker 1>And so, basically, we're just creating a new

00:29:01.985 --> 00:29:03.905
<v Speaker 1>resource in Kubernetes

00:29:05.480 --> 00:29:08.120
<v Speaker 1>because, like, you know, by default, it supports,

00:29:08.120 --> 00:29:10.679
<v Speaker 1>you know, pods and secrets and,

00:29:12.279 --> 00:29:14.760
<v Speaker 1>you know, all the various resources within

00:29:14.760 --> 00:29:15.720
<v Speaker 1>Kubernetes

00:29:15.720 --> 00:29:17.000
<v Speaker 1>environment ecosystem,

00:29:17.465 --> 00:29:20.265
<v Speaker 1>and we're extending that API to support this

00:29:20.265 --> 00:29:21.705
<v Speaker 1>mass operation.

00:29:23.065 --> 00:29:25.865
<v Speaker 0>Okay. So if you modify that fail and

00:29:25.865 --> 00:29:26.985
<v Speaker 0>change the five

00:29:27.545 --> 00:29:28.985
<v Speaker 0>to 31

00:29:29.305 --> 00:29:31.760
<v Speaker 0>and apply it again, does that cause the

00:29:31.760 --> 00:29:34.639
<v Speaker 0>reconciled to then rerun and update the status?

00:29:35.120 --> 00:29:37.840
<v Speaker 1>Yeah. We can keep the same name. So

00:29:37.840 --> 00:29:39.999
<v Speaker 1>it'd be it'd still be the same resource,

00:29:41.039 --> 00:29:42.480
<v Speaker 1>but we'll change this to a seven.

00:29:50.934 --> 00:29:54.454
<v Speaker 1>And so here, it it didn't say that

00:29:54.534 --> 00:29:57.894
<v Speaker 1>we created five plus seven. We configured five

00:29:57.894 --> 00:30:00.134
<v Speaker 1>plus seven. We're changing the state of it.

00:30:00.455 --> 00:30:01.575
<v Speaker 1>And so then

00:30:03.350 --> 00:30:05.190
<v Speaker 1>even though the name of the resource is

00:30:05.190 --> 00:30:06.630
<v Speaker 1>five plus seven,

00:30:07.830 --> 00:30:09.270
<v Speaker 1>we have a new sum.

00:30:10.310 --> 00:30:12.710
<v Speaker 0>Cool. And that's just all provided by the

00:30:12.710 --> 00:30:15.350
<v Speaker 0>operator SDK hooking up everything that we need.

00:30:15.805 --> 00:30:17.485
<v Speaker 0>So you really when you said you just

00:30:17.485 --> 00:30:19.165
<v Speaker 0>need to write the business logic, like, that's

00:30:19.165 --> 00:30:20.685
<v Speaker 0>that's that's a pretty cool way of doing

00:30:20.685 --> 00:30:23.085
<v Speaker 0>it. No. Like, I I found this to

00:30:23.085 --> 00:30:26.365
<v Speaker 1>be super powerful and cool because, like, you

00:30:26.365 --> 00:30:29.485
<v Speaker 1>basically get to dive right into your own

00:30:29.485 --> 00:30:31.550
<v Speaker 1>business logic and, you know, say you wanna

00:30:31.550 --> 00:30:33.950
<v Speaker 1>start scaling pods. You can, you know, get

00:30:33.950 --> 00:30:36.510
<v Speaker 1>information about the pods, based on the metadata

00:30:36.510 --> 00:30:37.629
<v Speaker 1>that you provided.

00:30:38.190 --> 00:30:39.950
<v Speaker 1>And then, like, oh, we're at a certain

00:30:39.950 --> 00:30:41.710
<v Speaker 1>we're at a certain low level.

00:30:41.870 --> 00:30:44.910
<v Speaker 1>Let's, say add two more, pods and scale

00:30:44.910 --> 00:30:45.309
<v Speaker 1>the app.

00:30:47.165 --> 00:30:49.005
<v Speaker 0>Okay. Nice. I like it.

00:30:49.565 --> 00:30:50.205
<v Speaker 1>Yeah.

00:30:51.485 --> 00:30:53.565
<v Speaker 1>And and so, yeah, it has a lot

00:30:53.565 --> 00:30:56.605
<v Speaker 1>of applications for software developers, DevOps,

00:30:56.765 --> 00:30:57.645
<v Speaker 1>security,

00:30:57.725 --> 00:31:00.590
<v Speaker 1>even testing because you can, you know, mock

00:31:00.590 --> 00:31:02.430
<v Speaker 1>mock failure situations

00:31:02.510 --> 00:31:03.870
<v Speaker 1>within an operator

00:31:05.230 --> 00:31:07.470
<v Speaker 1>to, you know, test your environment.

00:31:07.630 --> 00:31:10.190
<v Speaker 1>So but it's a really powerful platform for,

00:31:11.070 --> 00:31:12.430
<v Speaker 1>you know, managing Kubernetes.

00:31:13.125 --> 00:31:15.285
<v Speaker 0>K. Definitely. I can I can see what's

00:31:15.605 --> 00:31:17.285
<v Speaker 0>I pretty much believe this is is so

00:31:17.285 --> 00:31:18.005
<v Speaker 0>appealing?

00:31:19.285 --> 00:31:21.205
<v Speaker 0>Just, like, I find the code and right

00:31:21.205 --> 00:31:23.045
<v Speaker 0>away that things is running inside the cluster

00:31:23.045 --> 00:31:25.765
<v Speaker 0>monitor and custom resources, subscribing to events in

00:31:25.765 --> 00:31:28.405
<v Speaker 0>the Kubernetes API, and then call the record

00:31:28.110 --> 00:31:30.110
<v Speaker 0>cell phone. I mean, there's a lot going

00:31:30.110 --> 00:31:32.909
<v Speaker 0>on there under the hood and Yeah. Absolutely.

00:31:32.910 --> 00:31:35.230
<v Speaker 1>And then, you know, the deeper you get

00:31:35.230 --> 00:31:37.309
<v Speaker 1>into it, you know, you can go into

00:31:37.309 --> 00:31:39.309
<v Speaker 1>this controller runtime and learn

00:31:39.549 --> 00:31:41.630
<v Speaker 1>about all the other things a manager can

00:31:41.630 --> 00:31:43.630
<v Speaker 1>provide or a controller can provide

00:31:44.684 --> 00:31:48.044
<v Speaker 1>to extend it. And I showed one example

00:31:48.044 --> 00:31:50.684
<v Speaker 1>of, say, adding that event recorder because then

00:31:50.684 --> 00:31:51.644
<v Speaker 1>when we

00:31:51.885 --> 00:31:53.724
<v Speaker 1>like, we didn't have any errors,

00:31:55.085 --> 00:31:56.364
<v Speaker 1>but, like, when you

00:31:56.845 --> 00:31:58.765
<v Speaker 1>say describe your resource,

00:32:00.130 --> 00:32:01.249
<v Speaker 1>if I can type,

00:32:07.970 --> 00:32:10.130
<v Speaker 1>you know, we have no events posted. But

00:32:10.130 --> 00:32:12.210
<v Speaker 1>say we ran into errors, all of those

00:32:12.210 --> 00:32:13.410
<v Speaker 1>would be listed down here.

00:32:16.815 --> 00:32:17.614
<v Speaker 0>Okay.

00:32:18.654 --> 00:32:20.174
<v Speaker 0>Can we trigger one of those?

00:32:21.215 --> 00:32:22.735
<v Speaker 1>Well,

00:32:22.735 --> 00:32:25.294
<v Speaker 1>I wonder if I I I don't think

00:32:25.710 --> 00:32:26.429
<v Speaker 1>I

00:32:26.590 --> 00:32:28.350
<v Speaker 1>I think that would be hard given the

00:32:28.350 --> 00:32:30.509
<v Speaker 1>errors that we're checking for right now.

00:32:30.990 --> 00:32:31.549
<v Speaker 1>But

00:32:32.990 --> 00:32:34.830
<v Speaker 1>because the other thing too is it sets

00:32:34.830 --> 00:32:36.830
<v Speaker 1>up a a testing framework,

00:32:37.470 --> 00:32:38.750
<v Speaker 1>in the sweet tests.

00:32:39.215 --> 00:32:41.774
<v Speaker 1>And so with this simple example,

00:32:42.015 --> 00:32:44.815
<v Speaker 1>you know, we're not really checking for, say,

00:32:44.815 --> 00:32:45.615
<v Speaker 1>integer

00:32:45.855 --> 00:32:46.735
<v Speaker 1>overflows.

00:32:46.975 --> 00:32:49.935
<v Speaker 1>And so maybe we pass two integers and

00:32:49.935 --> 00:32:51.455
<v Speaker 1>that would then buffer over

00:32:52.095 --> 00:32:52.655
<v Speaker 1>overflow

00:32:53.250 --> 00:32:56.049
<v Speaker 1>the integer that we're putting it in into,

00:32:56.530 --> 00:32:59.090
<v Speaker 1>we could check for that as say a,

00:32:59.730 --> 00:33:00.769
<v Speaker 1>as a

00:33:01.490 --> 00:33:04.450
<v Speaker 1>test case and then air on that so

00:33:04.450 --> 00:33:05.649
<v Speaker 1>that we don't

00:33:06.770 --> 00:33:07.650
<v Speaker 1>cause problems.

00:33:09.445 --> 00:33:10.004
<v Speaker 0>Okay.

00:33:10.485 --> 00:33:11.044
<v Speaker 0>So

00:33:11.365 --> 00:33:13.525
<v Speaker 0>what is the sorry. If you is there

00:33:13.525 --> 00:33:14.725
<v Speaker 0>something else you wanna go on to before

00:33:14.725 --> 00:33:16.244
<v Speaker 0>I just keep throwing stuff at you?

00:33:16.725 --> 00:33:19.445
<v Speaker 1>Keep throwing away. Yeah. So, like, you know,

00:33:19.445 --> 00:33:21.445
<v Speaker 0>as a a developer. Right? I mean, I'm

00:33:21.445 --> 00:33:23.365
<v Speaker 0>sold now is that I I wanna use

00:33:23.610 --> 00:33:25.210
<v Speaker 0>the operator SDK if I'm gonna build an

00:33:25.210 --> 00:33:27.290
<v Speaker 0>operator. Like, you know, if I were to

00:33:27.290 --> 00:33:29.690
<v Speaker 0>make a change to this code now, say

00:33:29.690 --> 00:33:31.610
<v Speaker 0>we wanted add a new event recorder

00:33:31.770 --> 00:33:33.690
<v Speaker 0>just every time it's updated and say, oh,

00:33:33.690 --> 00:33:35.370
<v Speaker 0>we changed the value from the value change

00:33:35.370 --> 00:33:37.530
<v Speaker 0>from this test or whatever. Like, what's my

00:33:37.530 --> 00:33:39.985
<v Speaker 0>development experience like? How do I just do

00:33:39.985 --> 00:33:41.825
<v Speaker 0>go run and it runs on the cluster?

00:33:41.825 --> 00:33:43.745
<v Speaker 0>Do I have to build the image? Do

00:33:43.745 --> 00:33:46.065
<v Speaker 0>need to use other tools, like, scaffold or

00:33:46.065 --> 00:33:47.904
<v Speaker 0>tell? Like, what is the the kind of

00:33:47.904 --> 00:33:48.945
<v Speaker 0>process? So,

00:33:50.304 --> 00:33:52.945
<v Speaker 1>you know, we could say do a

00:33:54.800 --> 00:33:56.080
<v Speaker 1>R recorder.

00:33:58.400 --> 00:34:00.080
<v Speaker 1>We're gonna post it to our sync. Because

00:34:00.080 --> 00:34:02.559
<v Speaker 1>we could also add events to other

00:34:02.560 --> 00:34:04.080
<v Speaker 1>resources within

00:34:04.720 --> 00:34:06.640
<v Speaker 1>but we'll add it to our instance here,

00:34:08.105 --> 00:34:09.065
<v Speaker 1>event

00:34:09.065 --> 00:34:10.425
<v Speaker 1>type info.

00:34:15.464 --> 00:34:16.185
<v Speaker 1>Well

00:34:18.505 --> 00:34:20.264
<v Speaker 0>You're gonna have to get Kubernetes in there

00:34:20.264 --> 00:34:20.824
<v Speaker 0>somewhere too.

00:34:21.489 --> 00:34:22.130
<v Speaker 1>Yeah.

00:34:31.170 --> 00:34:32.210
<v Speaker 1>And so

00:34:32.930 --> 00:34:34.130
<v Speaker 1>if we

00:34:35.574 --> 00:34:37.335
<v Speaker 1>let me see if I can build this

00:34:37.335 --> 00:34:39.495
<v Speaker 1>quick enough to have it,

00:34:39.895 --> 00:34:42.535
<v Speaker 1>add that functionality in. But, basically,

00:34:42.935 --> 00:34:43.975
<v Speaker 1>you

00:34:44.455 --> 00:34:46.775
<v Speaker 1>would see in the like, if you look

00:34:46.775 --> 00:34:49.895
<v Speaker 1>at just a standard event from another resource,

00:34:51.050 --> 00:34:52.330
<v Speaker 1>it would just say,

00:34:52.810 --> 00:34:53.449
<v Speaker 1>you know,

00:34:53.850 --> 00:34:55.290
<v Speaker 1>for for your instance,

00:34:55.530 --> 00:34:57.290
<v Speaker 1>we called it five plus seven

00:34:57.610 --> 00:34:58.330
<v Speaker 1>info

00:34:58.490 --> 00:35:01.610
<v Speaker 1>type sum and then computing sum on Kubernetes.

00:35:02.964 --> 00:35:05.204
<v Speaker 1>And, you know, these are useful when you

00:35:05.204 --> 00:35:07.605
<v Speaker 1>have business logic that's going to take a

00:35:07.605 --> 00:35:08.325
<v Speaker 1>long time.

00:35:08.565 --> 00:35:09.205
<v Speaker 0>Yeah.

00:35:09.845 --> 00:35:12.165
<v Speaker 1>And so we just add that simple line

00:35:12.165 --> 00:35:12.965
<v Speaker 1>and then

00:35:19.100 --> 00:35:21.260
<v Speaker 1>Oh, I forgot to do my imports.

00:35:23.580 --> 00:35:23.980
<v Speaker 1>But,

00:35:26.540 --> 00:35:28.060
<v Speaker 1>I can go back and add that real

00:35:28.060 --> 00:35:28.300
<v Speaker 1>quick.

00:35:34.924 --> 00:35:36.444
<v Speaker 0>So I'll just share a link on the

00:35:36.444 --> 00:35:38.285
<v Speaker 0>screen as well to that repository.

00:35:38.285 --> 00:35:40.605
<v Speaker 0>So, you know, feel free to I can

00:35:41.244 --> 00:35:43.805
<v Speaker 1>yeah. I can make that public. Right now,

00:35:43.805 --> 00:35:45.244
<v Speaker 1>think it's internal to

00:35:45.620 --> 00:35:49.060
<v Speaker 1>school people at Uh-huh. Equinix Medal, but,

00:35:49.860 --> 00:35:50.580
<v Speaker 1>I will,

00:35:50.980 --> 00:35:52.740
<v Speaker 1>I'll I'll talk to my boss. We can

00:35:52.740 --> 00:35:54.420
<v Speaker 1>open that up. I don't see that as

00:35:54.420 --> 00:35:55.140
<v Speaker 1>a problem.

00:35:57.140 --> 00:35:58.820
<v Speaker 1>But, yeah, then you would just make your

00:35:58.820 --> 00:35:59.060
<v Speaker 1>image.

00:36:02.335 --> 00:36:04.735
<v Speaker 1>So you would make your new image. You,

00:36:05.055 --> 00:36:07.695
<v Speaker 1>would then push it to your repository.

00:36:08.175 --> 00:36:10.095
<v Speaker 1>And in our config,

00:36:11.215 --> 00:36:12.095
<v Speaker 1>manager manager,

00:36:12.990 --> 00:36:15.310
<v Speaker 1>you know, this is where it gets deployed.

00:36:15.470 --> 00:36:16.350
<v Speaker 1>And so,

00:36:18.430 --> 00:36:21.550
<v Speaker 1>if, say, you with your Docker push,

00:36:22.830 --> 00:36:24.270
<v Speaker 1>you don't use latest,

00:36:24.590 --> 00:36:26.590
<v Speaker 1>you could then update this file here

00:36:27.174 --> 00:36:27.815
<v Speaker 1>to

00:36:27.974 --> 00:36:28.775
<v Speaker 1>specify

00:36:28.775 --> 00:36:31.494
<v Speaker 1>the specific PIN that you wanted to use,

00:36:31.815 --> 00:36:32.535
<v Speaker 1>and then

00:36:32.775 --> 00:36:35.895
<v Speaker 1>it's just k apply config manager.

00:36:37.414 --> 00:36:39.255
<v Speaker 0>I mean, I take it you're just using

00:36:39.575 --> 00:36:41.095
<v Speaker 0>Docker for Mac here. Right?

00:36:41.670 --> 00:36:42.470
<v Speaker 1>Yes.

00:36:42.470 --> 00:36:43.670
<v Speaker 0>Oh, yeah. So, I mean, if

00:36:44.390 --> 00:36:45.910
<v Speaker 0>you don't actually need to push that to

00:36:45.910 --> 00:36:48.150
<v Speaker 0>a remote repository. Like, if we add image

00:36:48.150 --> 00:36:49.270
<v Speaker 0>pool policy,

00:36:51.109 --> 00:36:52.869
<v Speaker 0>if not present to that, then it should

00:36:52.869 --> 00:36:54.549
<v Speaker 0>just work with the and build Docker for

00:36:54.549 --> 00:36:57.615
<v Speaker 0>Mac one. Yeah. I'm actually I'm actually,

00:36:57.855 --> 00:36:58.255
<v Speaker 1>using

00:36:59.055 --> 00:37:01.695
<v Speaker 1>one of our Kubernetes clusters that are Oh,

00:37:01.935 --> 00:37:03.215
<v Speaker 1>nice. Metal. So

00:37:04.095 --> 00:37:05.775
<v Speaker 1>not not on my Mac.

00:37:06.175 --> 00:37:08.655
<v Speaker 1>That's why some of the, results take a

00:37:08.655 --> 00:37:09.615
<v Speaker 1>while to come back.

00:37:10.335 --> 00:37:10.975
<v Speaker 0>Right. Okay.

00:37:11.910 --> 00:37:14.070
<v Speaker 0>So But, yeah, here,

00:37:14.550 --> 00:37:16.310
<v Speaker 1>I do a Docker login to Quay, and

00:37:16.310 --> 00:37:18.310
<v Speaker 1>then I push the image

00:37:19.829 --> 00:37:22.069
<v Speaker 1>to this packet add operator.

00:37:24.725 --> 00:37:26.725
<v Speaker 1>And then I've updated

00:37:26.885 --> 00:37:28.405
<v Speaker 1>the config to

00:37:28.725 --> 00:37:30.245
<v Speaker 1>use that Quay image.

00:37:31.605 --> 00:37:33.045
<v Speaker 1>Okay. And so, yeah, this is this is

00:37:33.045 --> 00:37:35.445
<v Speaker 1>running on a fully functional Kubernetes cluster.

00:37:35.690 --> 00:37:36.730
<v Speaker 0>Right. Okay.

00:37:37.050 --> 00:37:39.050
<v Speaker 0>That that's why we we're not building and

00:37:39.050 --> 00:37:41.130
<v Speaker 0>pushing. Got it. That makes sense. So can

00:37:41.130 --> 00:37:42.890
<v Speaker 0>we take a, like, take a look at

00:37:42.890 --> 00:37:44.570
<v Speaker 0>that struct as well that we defined for

00:37:44.570 --> 00:37:45.530
<v Speaker 0>our CRD?

00:37:46.330 --> 00:37:46.730
<v Speaker 1>Yeah.

00:37:50.015 --> 00:37:51.934
<v Speaker 0>Because I'm thinking, you know, in my head,

00:37:51.934 --> 00:37:54.414
<v Speaker 0>what if we've got slightly more complex custom

00:37:54.414 --> 00:37:55.375
<v Speaker 0>resources?

00:37:55.454 --> 00:37:57.454
<v Speaker 0>Like, is there a way for us

00:37:57.615 --> 00:37:58.894
<v Speaker 0>oh, yeah. If I I can see some

00:37:58.894 --> 00:38:00.575
<v Speaker 0>sort of annotation stuff here. So maybe we

00:38:00.575 --> 00:38:02.200
<v Speaker 0>can go over that. Like, what if I've

00:38:02.200 --> 00:38:04.920
<v Speaker 0>got mandatory fields versus optional fields? Is is

00:38:04.920 --> 00:38:06.920
<v Speaker 0>there a way for me to kinda specify

00:38:06.920 --> 00:38:07.560
<v Speaker 0>that?

00:38:12.920 --> 00:38:15.640
<v Speaker 1>I don't think I've gotten into

00:38:15.720 --> 00:38:17.160
<v Speaker 1>that

00:38:17.375 --> 00:38:19.455
<v Speaker 1>in with my experience yet.

00:38:20.575 --> 00:38:21.375
<v Speaker 1>But,

00:38:23.295 --> 00:38:26.895
<v Speaker 1>basically, everything is required. So right now.

00:38:27.295 --> 00:38:29.055
<v Speaker 1>And so if

00:38:29.694 --> 00:38:30.974
<v Speaker 1>I modified

00:38:31.340 --> 00:38:31.980
<v Speaker 1>our

00:38:34.220 --> 00:38:35.020
<v Speaker 1>our

00:38:35.740 --> 00:38:37.020
<v Speaker 1>add YAML

00:38:37.980 --> 00:38:40.380
<v Speaker 1>and I removed add in one,

00:38:40.620 --> 00:38:42.060
<v Speaker 1>it's gonna error on us.

00:38:47.175 --> 00:38:47.975
<v Speaker 1>Oh.

00:38:54.855 --> 00:38:56.455
<v Speaker 1>I cannot type.

00:38:57.095 --> 00:38:59.175
<v Speaker 0>Yeah. That's the that's the curse of people

00:38:59.175 --> 00:39:01.335
<v Speaker 0>watching you. Your typing spells always go out

00:39:01.335 --> 00:39:01.815
<v Speaker 0>the window.

00:39:04.750 --> 00:39:07.310
<v Speaker 1>Oh, it's not gonna be required.

00:39:07.310 --> 00:39:10.349
<v Speaker 1>But say I added something that wasn't here,

00:39:10.349 --> 00:39:10.510
<v Speaker 1>like

00:39:23.825 --> 00:39:26.145
<v Speaker 1>That's so weird. I've never seen that yet.

00:39:26.305 --> 00:39:28.065
<v Speaker 1>Of course, during demos demonstration.

00:39:28.770 --> 00:39:30.770
<v Speaker 0>Yeah. I think Kubernetes is just like I

00:39:30.770 --> 00:39:32.370
<v Speaker 0>mean, let's describe it. Let's see what five

00:39:32.370 --> 00:39:34.130
<v Speaker 0>plus seven actually looks like in the cluster.

00:39:34.130 --> 00:39:35.170
<v Speaker 0>Let's get

00:39:36.050 --> 00:39:38.050
<v Speaker 0>or do a dash or YAML, whichever one's

00:39:38.050 --> 00:39:40.290
<v Speaker 0>gonna show us more details. Yeah. But I

00:39:40.290 --> 00:39:40.930
<v Speaker 0>guess Kubernetes.

00:39:41.525 --> 00:39:43.925
<v Speaker 0>So I I actually expected it to work

00:39:43.925 --> 00:39:45.925
<v Speaker 0>when you removed one because I've seen an

00:39:45.925 --> 00:39:47.605
<v Speaker 0>annotation in your structure that says on the

00:39:47.605 --> 00:39:49.285
<v Speaker 0>empty, and that kinda seems to me like

00:39:49.365 --> 00:39:50.805
<v Speaker 0>Yeah. Maybe an optional

00:39:50.965 --> 00:39:53.205
<v Speaker 0>annotation. I'm not really sure. I'm I'm guessing

00:39:53.205 --> 00:39:54.405
<v Speaker 0>more than anything. But

00:39:55.390 --> 00:39:56.030
<v Speaker 1>So

00:39:56.590 --> 00:39:58.270
<v Speaker 1>it looks like it initialized

00:39:58.270 --> 00:40:00.750
<v Speaker 1>add in one to zero even though it's

00:40:00.670 --> 00:40:02.510
<v Speaker 1>it wasn't there because it we still have

00:40:02.510 --> 00:40:03.550
<v Speaker 1>a sum of seven,

00:40:03.790 --> 00:40:05.070
<v Speaker 1>and it didn't air out.

00:40:05.310 --> 00:40:08.270
<v Speaker 1>And I think that has to do with

00:40:07.805 --> 00:40:10.845
<v Speaker 1>you can specify annotations whether to be strict

00:40:10.845 --> 00:40:13.085
<v Speaker 1>or not on your Yeah. Schema.

00:40:15.805 --> 00:40:16.925
<v Speaker 1>And so,

00:40:17.725 --> 00:40:20.365
<v Speaker 1>I think it would be from what I've

00:40:20.365 --> 00:40:22.525
<v Speaker 1>worked with on operators thus far in, like,

00:40:22.530 --> 00:40:24.370
<v Speaker 1>the two months I've been working with them,

00:40:24.530 --> 00:40:25.170
<v Speaker 1>I

00:40:25.810 --> 00:40:27.810
<v Speaker 1>actually air out if we

00:40:28.050 --> 00:40:30.610
<v Speaker 1>don't have the information we need. And then

00:40:30.610 --> 00:40:33.250
<v Speaker 1>if it's not if it's optional, then you

00:40:33.250 --> 00:40:36.245
<v Speaker 1>can default that value or just continue on

00:40:36.245 --> 00:40:38.565
<v Speaker 1>without it depending on what the situation is.

00:40:38.805 --> 00:40:40.325
<v Speaker 0>That's sweet. Cool.

00:40:42.165 --> 00:40:44.565
<v Speaker 0>Alright. If anyone's watching and has any questions,

00:40:44.565 --> 00:40:46.085
<v Speaker 0>feel free to drop them in the chat

00:40:46.085 --> 00:40:48.005
<v Speaker 0>and we'll tackle them before we we finish

00:40:48.005 --> 00:40:49.525
<v Speaker 0>up. I guess I can throw a few

00:40:49.525 --> 00:40:51.390
<v Speaker 0>more at you just know where we where

00:40:51.390 --> 00:40:52.190
<v Speaker 0>we went.

00:40:53.470 --> 00:40:55.230
<v Speaker 0>So let's say let's pop up on a

00:40:55.230 --> 00:40:57.550
<v Speaker 0>reconcile function again. Have a look in there.

00:40:57.710 --> 00:40:58.350
<v Speaker 1>Oh,

00:40:58.670 --> 00:40:59.310
<v Speaker 1>sure.

00:41:02.670 --> 00:41:04.670
<v Speaker 0>I think I'm just I'm still kind of

00:41:04.925 --> 00:41:07.645
<v Speaker 0>amazed at how little effort is actually required

00:41:07.645 --> 00:41:09.405
<v Speaker 0>to to kinda get something

00:41:09.965 --> 00:41:12.045
<v Speaker 0>to get something There's a lot of lots

00:41:12.045 --> 00:41:13.485
<v Speaker 1>of magic going on.

00:41:17.885 --> 00:41:20.540
<v Speaker 0>Yeah. So So, yeah, the only things we

00:41:20.540 --> 00:41:23.340
<v Speaker 1>added was where put your logic here,

00:41:24.220 --> 00:41:26.220
<v Speaker 1>and we return the result at the end.

00:41:26.220 --> 00:41:26.700
<v Speaker 1>So

00:41:30.060 --> 00:41:31.980
<v Speaker 0>Yeah. That's pretty cool. I like it.

00:41:32.805 --> 00:41:34.485
<v Speaker 0>Yeah. So is there any sorry,

00:41:34.885 --> 00:41:35.445
<v Speaker 0>Nico.

00:41:37.045 --> 00:41:39.685
<v Speaker 1>Like, another example would be to go

00:41:41.525 --> 00:41:44.885
<v Speaker 1>can grab stuff from, say, core b one,

00:41:45.285 --> 00:41:46.405
<v Speaker 1>like secret,

00:41:46.645 --> 00:41:47.685
<v Speaker 1>and then

00:41:48.980 --> 00:41:49.860
<v Speaker 1>specify

00:41:50.260 --> 00:41:50.820
<v Speaker 1>the,

00:41:51.940 --> 00:41:53.780
<v Speaker 1>you know, name and namespace

00:41:53.780 --> 00:41:56.500
<v Speaker 1>of that secret and that you could then

00:41:56.500 --> 00:41:58.580
<v Speaker 1>pull that in and manipulate it.

00:41:59.540 --> 00:42:01.925
<v Speaker 1>Again, you can, you know, do,

00:42:02.165 --> 00:42:06.325
<v Speaker 1>our client get on pretty much any resource

00:42:06.405 --> 00:42:08.325
<v Speaker 1>within the communities cluster.

00:42:10.405 --> 00:42:12.565
<v Speaker 1>And, you know, typically, that's what you're going

00:42:12.565 --> 00:42:14.885
<v Speaker 1>to be doing, grabbing pods, grabbing

00:42:16.119 --> 00:42:17.240
<v Speaker 1>secrets,

00:42:17.720 --> 00:42:19.160
<v Speaker 1>defining deployments.

00:42:20.200 --> 00:42:21.400
<v Speaker 0>Yeah. Definitely.

00:42:21.640 --> 00:42:23.000
<v Speaker 0>I I I can

00:42:23.480 --> 00:42:25.160
<v Speaker 0>I mean, I guess we're kind of reaching

00:42:25.160 --> 00:42:26.360
<v Speaker 0>a stage of

00:42:26.680 --> 00:42:28.760
<v Speaker 0>I don't know if it's Kubernetes life cycle

00:42:28.760 --> 00:42:30.440
<v Speaker 0>or or whatever, but there's a bit of

00:42:30.440 --> 00:42:31.755
<v Speaker 0>a proliferation

00:42:31.755 --> 00:42:33.915
<v Speaker 0>of controllers? Like like, everybody seems to have

00:42:33.915 --> 00:42:36.315
<v Speaker 0>a controller for almost anything now. And,

00:42:36.714 --> 00:42:38.155
<v Speaker 0>you know, when you see something like this

00:42:38.155 --> 00:42:39.674
<v Speaker 0>and you're walking through and showing us how

00:42:39.674 --> 00:42:40.635
<v Speaker 0>to take

00:42:40.714 --> 00:42:42.555
<v Speaker 0>advantage of the operator SDK, you can kind

00:42:42.555 --> 00:42:45.320
<v Speaker 0>of understand why. Like, Yeah. Yeah. Because you

00:42:45.320 --> 00:42:47.480
<v Speaker 0>you you get a lot from it, like,

00:42:47.480 --> 00:42:49.880
<v Speaker 0>know, by defining a couple of structs

00:42:49.880 --> 00:42:50.680
<v Speaker 0>angle,

00:42:51.160 --> 00:42:53.480
<v Speaker 0>then you get all these custom resources that

00:42:53.480 --> 00:42:55.320
<v Speaker 0>are available to your Kubernetes cluster.

00:42:55.560 --> 00:42:57.080
<v Speaker 0>We can add the business logic to the

00:42:57.080 --> 00:43:00.055
<v Speaker 0>reconcile function and just deploy it. And then

00:43:00.055 --> 00:43:03.015
<v Speaker 0>we have our own ability to

00:43:03.175 --> 00:43:05.015
<v Speaker 0>tweak the way that Kubernetes works to a

00:43:05.015 --> 00:43:05.895
<v Speaker 0>certain degree.

00:43:06.055 --> 00:43:09.575
<v Speaker 0>It should Yeah. And I'd also mentioned too

00:43:09.575 --> 00:43:10.215
<v Speaker 1>that

00:43:10.535 --> 00:43:12.615
<v Speaker 1>operator

00:43:11.610 --> 00:43:14.330
<v Speaker 1>Pre one point o is kind of different,

00:43:14.330 --> 00:43:14.970
<v Speaker 1>and

00:43:15.290 --> 00:43:18.010
<v Speaker 1>I think a little harder to use where

00:43:18.170 --> 00:43:20.570
<v Speaker 1>that's why I focused on the one dot

00:43:20.570 --> 00:43:21.290
<v Speaker 1>o,

00:43:21.530 --> 00:43:23.130
<v Speaker 1>or one dot x series

00:43:23.290 --> 00:43:23.770
<v Speaker 1>because,

00:43:24.495 --> 00:43:26.575
<v Speaker 1>you know, it already wires up all the

00:43:26.575 --> 00:43:29.695
<v Speaker 1>metrics for you, generates even more of the

00:43:29.855 --> 00:43:31.775
<v Speaker 1>or, like, hides more of the boilerplate that

00:43:31.775 --> 00:43:33.535
<v Speaker 1>you would have to have in your own

00:43:33.535 --> 00:43:34.815
<v Speaker 1>files anyways.

00:43:36.255 --> 00:43:38.975
<v Speaker 1>And there are a ton of examples, especially

00:43:38.975 --> 00:43:41.570
<v Speaker 1>with Golang out there right now. And so

00:43:43.410 --> 00:43:45.650
<v Speaker 1>and again, with, you know, hopefully,

00:43:45.650 --> 00:43:47.090
<v Speaker 1>improve documentation

00:43:47.090 --> 00:43:49.490
<v Speaker 1>and, you know, help the community with that

00:43:49.490 --> 00:43:51.810
<v Speaker 1>to to make this even more viable because

00:43:53.105 --> 00:43:55.585
<v Speaker 1>it's yeah. Super easy to use and really

00:43:55.585 --> 00:43:57.345
<v Speaker 1>nice to get up and running with once

00:43:57.345 --> 00:43:58.785
<v Speaker 1>you understand the concepts.

00:43:59.424 --> 00:44:00.465
<v Speaker 0>Yeah. Definitely.

00:44:01.744 --> 00:44:04.145
<v Speaker 0>Cool. Thank you. Is there anything else you

00:44:04.145 --> 00:44:04.545
<v Speaker 0>wanna cover?

00:44:07.380 --> 00:44:09.700
<v Speaker 1>I think that's it. People can hit us

00:44:09.700 --> 00:44:11.859
<v Speaker 1>up on Twitter after this or

00:44:12.500 --> 00:44:14.660
<v Speaker 1>on YouTube and happy to

00:44:15.059 --> 00:44:17.300
<v Speaker 1>talk about more operator stuff.

00:44:17.619 --> 00:44:20.095
<v Speaker 0>Yeah. Definitely. Feel free to to grab either

00:44:20.095 --> 00:44:21.855
<v Speaker 0>of us on Twitter. I think we're we're

00:44:21.855 --> 00:44:23.055
<v Speaker 0>both I think it's safe to say that

00:44:23.055 --> 00:44:25.215
<v Speaker 0>we both like talking about Kubernetes. So or

00:44:25.215 --> 00:44:26.495
<v Speaker 0>Kubernetes. Sorry.

00:44:26.655 --> 00:44:27.855
<v Speaker 0>Yeah. Yeah. Definitely.

00:44:28.255 --> 00:44:30.655
<v Speaker 0>So like the ad operator, let's talk about

00:44:30.655 --> 00:44:33.160
<v Speaker 0>the the why behind. I'm assuming you build

00:44:33.160 --> 00:44:35.400
<v Speaker 0>this as a demonstration and a training materials

00:44:35.400 --> 00:44:36.840
<v Speaker 0>so that other people can see how to

00:44:36.840 --> 00:44:38.840
<v Speaker 0>get started with assess this.

00:44:39.160 --> 00:44:41.400
<v Speaker 0>You know, it's it's internal right now. Like,

00:44:42.200 --> 00:44:43.880
<v Speaker 0>is it something that you're gonna continue to

00:44:43.880 --> 00:44:45.480
<v Speaker 0>add on with more examples?

00:44:45.640 --> 00:44:47.240
<v Speaker 0>Like, what what's your plan for the ad

00:44:47.240 --> 00:44:47.640
<v Speaker 0>operator?

00:44:49.775 --> 00:44:51.615
<v Speaker 1>I think the first thing is to go

00:44:51.615 --> 00:44:54.895
<v Speaker 1>back and put some open source slide system

00:44:54.895 --> 00:44:58.015
<v Speaker 1>on this and make it a public repository,

00:44:58.974 --> 00:45:00.815
<v Speaker 1>and then, you know, work with the community

00:45:00.990 --> 00:45:02.750
<v Speaker 1>to provide more examples.

00:45:02.910 --> 00:45:04.430
<v Speaker 1>I might just call it, like, the math

00:45:04.430 --> 00:45:05.390
<v Speaker 1>operator.

00:45:05.470 --> 00:45:06.670
<v Speaker 1>That way we can add,

00:45:07.230 --> 00:45:08.030
<v Speaker 1>other,

00:45:08.430 --> 00:45:09.230
<v Speaker 1>controllers

00:45:09.230 --> 00:45:11.390
<v Speaker 1>in there to show how you would wire

00:45:11.390 --> 00:45:13.470
<v Speaker 1>up multiple controllers under one manager,

00:45:13.974 --> 00:45:14.935
<v Speaker 1>demonstrate

00:45:14.935 --> 00:45:17.255
<v Speaker 1>how you use Ginkgo, which is the testing

00:45:17.255 --> 00:45:17.974
<v Speaker 1>framework

00:45:18.135 --> 00:45:19.655
<v Speaker 0>Mhmm. And

00:45:20.055 --> 00:45:22.375
<v Speaker 1>and check more of those edge cases, like,

00:45:22.375 --> 00:45:24.695
<v Speaker 1>say, we're gonna overflow an integer,

00:45:25.655 --> 00:45:27.575
<v Speaker 1>you know, how do we wanna handle some

00:45:27.575 --> 00:45:28.694
<v Speaker 1>of those edge cases

00:45:29.440 --> 00:45:31.680
<v Speaker 1>so that we it's kind

00:45:31.760 --> 00:45:33.120
<v Speaker 1>of a secure example.

00:45:33.360 --> 00:45:36.160
<v Speaker 1>And then, you know, maybe some more examples

00:45:36.160 --> 00:45:38.720
<v Speaker 1>of how you would interact with the Kubernetes

00:45:38.720 --> 00:45:39.760
<v Speaker 1>ecosystem,

00:45:40.160 --> 00:45:41.600
<v Speaker 1>like, listing,

00:45:42.080 --> 00:45:44.240
<v Speaker 1>retrieving objects, updating them

00:45:45.835 --> 00:45:47.755
<v Speaker 1>based on it. And that so that might

00:45:47.755 --> 00:45:50.635
<v Speaker 1>be just become another operator if we say

00:45:50.635 --> 00:45:52.715
<v Speaker 1>move outside of the math concepts.

00:45:53.515 --> 00:45:55.275
<v Speaker 0>Yeah. I I I think based on what

00:45:55.275 --> 00:45:57.195
<v Speaker 0>you're showing me, I think with my limited

00:45:57.195 --> 00:45:59.275
<v Speaker 0>programming skills, even I could probably add like

00:45:59.275 --> 00:46:01.010
<v Speaker 0>a subtract controller to this. I I mean,

00:46:01.010 --> 00:46:02.930
<v Speaker 0>I think I can maybe handle those five

00:46:02.930 --> 00:46:04.850
<v Speaker 0>lines of code. I'm not sure. But at

00:46:04.850 --> 00:46:06.290
<v Speaker 0>least I've got you No. I think I

00:46:06.290 --> 00:46:07.330
<v Speaker 1>think you should actually

00:46:07.810 --> 00:46:10.369
<v Speaker 1>that should be your next task. Exactly. Right?

00:46:10.369 --> 00:46:11.810
<v Speaker 0>I should just be like, hey. Let's add

00:46:11.810 --> 00:46:13.805
<v Speaker 0>this subtract one. Because I could just add

00:46:13.805 --> 00:46:15.964
<v Speaker 0>the types and then the reconciler and then

00:46:15.964 --> 00:46:17.484
<v Speaker 0>like, boop boop. And that's just the way

00:46:17.484 --> 00:46:19.085
<v Speaker 0>it goes. Yeah. Maybe I will do that

00:46:19.085 --> 00:46:20.045
<v Speaker 0>for a bit of fun.

00:46:20.525 --> 00:46:22.444
<v Speaker 1>Yeah. It's it's super easy. Send me the

00:46:22.444 --> 00:46:23.165
<v Speaker 1>PR.

00:46:25.565 --> 00:46:28.380
<v Speaker 0>Alright. Okay. So we just got a couple

00:46:28.380 --> 00:46:30.859
<v Speaker 0>of comments there. So great ad pun

00:46:30.940 --> 00:46:31.740
<v Speaker 0>and

00:46:31.819 --> 00:46:34.220
<v Speaker 0>good values. Because the emoji showed up, it

00:46:34.220 --> 00:46:34.539
<v Speaker 0>doesn't

00:46:35.260 --> 00:46:35.900
<v Speaker 0>Yeah.

00:46:36.619 --> 00:46:39.740
<v Speaker 0>Alright. That was really useful. Really nice introduction

00:46:39.740 --> 00:46:40.940
<v Speaker 0>to OperatorSDK.

00:46:41.415 --> 00:46:43.495
<v Speaker 0>I'm looking I'm hoping we can open source

00:46:43.495 --> 00:46:45.175
<v Speaker 0>this as a bit of a fun experiment

00:46:45.175 --> 00:46:47.095
<v Speaker 0>and encourage people to, you know, come along

00:46:47.095 --> 00:46:49.415
<v Speaker 0>and and add new types and just I

00:46:49.415 --> 00:46:51.095
<v Speaker 0>think it's a really it could be a

00:46:51.095 --> 00:46:53.335
<v Speaker 0>really cool and fun educational resource for anyone

00:46:53.335 --> 00:46:55.095
<v Speaker 0>that wants to put down this path. Yeah.

00:46:55.095 --> 00:46:55.975
<v Speaker 1>It's a great playground.

00:46:56.349 --> 00:46:57.310
<v Speaker 0>Yeah. For sure.

00:46:57.630 --> 00:46:59.470
<v Speaker 0>Alright. Well, thank you very much, Dennis, for

00:46:59.470 --> 00:47:00.750
<v Speaker 0>taking time out of your day to join

00:47:00.750 --> 00:47:02.430
<v Speaker 0>me today and to putting that together and

00:47:02.430 --> 00:47:04.910
<v Speaker 0>walking us through it. Really useful. So My

00:47:04.910 --> 00:47:06.829
<v Speaker 1>pleasure. Thanks for having me again. And then

00:47:06.829 --> 00:47:08.349
<v Speaker 0>we'll try and maybe organize a part two

00:47:08.349 --> 00:47:09.790
<v Speaker 0>then once we get us open source and

00:47:09.790 --> 00:47:11.630
<v Speaker 0>see what we can do. Absolutely.

00:47:12.165 --> 00:47:14.405
<v Speaker 1>Sounds good. Sweet. Thank you. Have a great

00:47:14.405 --> 00:47:15.845
<v Speaker 0>day and Thanks.

00:47:16.325 --> 00:47:16.485
<v Speaker 0>Bye.
