WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: c64bb1de-a9d4-4d06-901d-88e26f99ef95
Created: 2025-04-29T22:28:44.819Z
Duration: 5032.0063
Channels: 1

00:00:42.125 --> 00:00:43.565
<v Speaker 0>Hello. Hello. Hello.

00:00:44.524 --> 00:00:46.924
<v Speaker 1>Hey. How's it going? Hey. How?

00:00:47.964 --> 00:00:49.804
<v Speaker 0>Alright. How are you both today?

00:00:52.469 --> 00:00:54.950
<v Speaker 1>Doing pretty good. I'm fine. Excited to be

00:00:54.950 --> 00:00:55.590
<v Speaker 1>joining.

00:00:56.390 --> 00:00:58.710
<v Speaker 1>This I guess this is my sort of

00:00:58.710 --> 00:01:00.230
<v Speaker 1>second time on the stream. I don't know

00:01:00.230 --> 00:01:01.910
<v Speaker 1>if the first one counts. It wasn't it

00:01:01.910 --> 00:01:04.310
<v Speaker 1>wasn't official. It was impromptu.

00:01:04.310 --> 00:01:04.470
<v Speaker 1>So

00:01:05.345 --> 00:01:08.065
<v Speaker 1>but we kinda The best streams, though. Right?

00:01:08.065 --> 00:01:09.745
<v Speaker 0>The impromptu ones where you have no idea

00:01:09.745 --> 00:01:12.785
<v Speaker 0>what's going on or not. Mean Right. This

00:01:13.665 --> 00:01:15.345
<v Speaker 0>is my twentieth time, and I still have

00:01:15.345 --> 00:01:17.025
<v Speaker 0>no idea how to introduce this stream other

00:01:17.025 --> 00:01:17.585
<v Speaker 0>than I'll be like,

00:01:18.470 --> 00:01:19.270
<v Speaker 3>hi.

00:01:19.430 --> 00:01:19.990
<v Speaker 3>Like

00:01:21.430 --> 00:01:23.190
<v Speaker 0>eventually, I'll come up with some sort of

00:01:23.190 --> 00:01:25.190
<v Speaker 0>script. But for now, when you know, it's

00:01:25.190 --> 00:01:26.070
<v Speaker 0>working alright.

00:01:26.310 --> 00:01:28.230
<v Speaker 1>Yeah. Well, wasn't it. You've been getting these

00:01:28.230 --> 00:01:30.710
<v Speaker 1>streams out super fast. When did you start

00:01:30.710 --> 00:01:33.085
<v Speaker 1>doing this this specific show? Because I've I've

00:01:33.085 --> 00:01:35.565
<v Speaker 1>been watching, and it's like it's almost, like,

00:01:35.565 --> 00:01:38.285
<v Speaker 1>daily at this point. Whereas I think I've

00:01:38.285 --> 00:01:40.525
<v Speaker 1>been doing streams for about a year now,

00:01:40.525 --> 00:01:43.485
<v Speaker 1>and I'm at, like, 21 shows. So, like,

00:01:43.805 --> 00:01:46.125
<v Speaker 1>your pace is

00:01:45.170 --> 00:01:46.930
<v Speaker 1>infinitely faster than mine.

00:01:47.890 --> 00:01:50.450
<v Speaker 0>Yeah. I'm averaging three a week right now.

00:01:50.450 --> 00:01:52.690
<v Speaker 0>Wow. Which is quite a lot. And they're,

00:01:52.690 --> 00:01:53.010
<v Speaker 0>you know

00:01:53.730 --> 00:01:55.010
<v Speaker 0>but, I mean, as you two have just

00:01:55.010 --> 00:01:57.104
<v Speaker 0>found out today, there's, like, zero prep. I

00:01:57.104 --> 00:01:58.945
<v Speaker 0>I pretty much just find people that are

00:01:58.945 --> 00:02:00.784
<v Speaker 0>doing cool shit and, like, say, hey. Do

00:02:00.784 --> 00:02:02.064
<v Speaker 0>you wanna come and join me? And then

00:02:02.064 --> 00:02:02.625
<v Speaker 0>just,

00:02:02.865 --> 00:02:04.865
<v Speaker 0>you know, free flow, kinda go through the

00:02:04.865 --> 00:02:06.784
<v Speaker 0>technology and see what works and what doesn't.

00:02:06.784 --> 00:02:08.224
<v Speaker 0>Like, it's not like there's a whole lot

00:02:08.224 --> 00:02:09.985
<v Speaker 0>of prep going into this that's taking loads

00:02:09.985 --> 00:02:10.384
<v Speaker 0>of time.

00:02:11.210 --> 00:02:13.290
<v Speaker 1>Fair enough. Not that I should be broadcasting

00:02:13.290 --> 00:02:14.810
<v Speaker 0>to other people that are gonna tune in

00:02:14.810 --> 00:02:17.210
<v Speaker 0>and watch. This is really polished, we all

00:02:17.210 --> 00:02:20.010
<v Speaker 0>know exactly what we're doing. We rehearsed for

00:02:20.010 --> 00:02:20.650
<v Speaker 1>weeks.

00:02:22.250 --> 00:02:23.130
<v Speaker 0>Okay.

00:02:23.450 --> 00:02:24.730
<v Speaker 0>So today's mission

00:02:25.085 --> 00:02:28.525
<v Speaker 0>is we're we're gonna talk about some Kubernetes

00:02:29.325 --> 00:02:30.205
<v Speaker 0>cool stuff.

00:02:31.005 --> 00:02:32.685
<v Speaker 0>I believe and you can correct me if

00:02:32.685 --> 00:02:34.765
<v Speaker 0>I'm wrong here. But this is mostly possible

00:02:34.765 --> 00:02:37.405
<v Speaker 0>since Kubernetes one nineteen, which came out last

00:02:37.405 --> 00:02:38.685
<v Speaker 0>week. Is that correct?

00:02:39.810 --> 00:02:41.650
<v Speaker 2>Oh, we are backwards compatible.

00:02:41.730 --> 00:02:44.210
<v Speaker 2>So we are always trying to pull up

00:02:44.370 --> 00:02:46.610
<v Speaker 2>bring up some enhancement to the community which

00:02:46.610 --> 00:02:49.090
<v Speaker 2>works on previous versions of Kubernetes too.

00:02:49.490 --> 00:02:50.610
<v Speaker 2>So yeah.

00:02:50.850 --> 00:02:51.890
<v Speaker 2>But the initial

00:02:52.355 --> 00:02:54.595
<v Speaker 2>reason for our work was that we found

00:02:54.595 --> 00:02:57.075
<v Speaker 2>out during the graduation of seccomp to GA

00:02:57.075 --> 00:02:59.394
<v Speaker 2>in 01/19 that, hey. There are so many

00:02:59.394 --> 00:03:02.275
<v Speaker 2>enhancements which could probably go with that feature,

00:03:02.275 --> 00:03:04.194
<v Speaker 2>but it probably would be better to put

00:03:04.194 --> 00:03:05.460
<v Speaker 2>them out of three.

00:03:05.780 --> 00:03:07.780
<v Speaker 2>And now we have our little community around

00:03:07.780 --> 00:03:09.380
<v Speaker 2>it, and we are getting more and more

00:03:09.380 --> 00:03:11.940
<v Speaker 2>contributors to the project. And, yeah, we're pretty

00:03:11.940 --> 00:03:13.060
<v Speaker 2>happy that we can

00:03:13.620 --> 00:03:16.420
<v Speaker 2>provide some valuable content to the community in

00:03:16.420 --> 00:03:16.820
<v Speaker 2>that way.

00:03:18.165 --> 00:03:20.004
<v Speaker 0>Yeah. I'm I'm really excited to play with

00:03:20.004 --> 00:03:22.084
<v Speaker 0>us today, actually. Mhmm. It's one of those

00:03:22.084 --> 00:03:24.165
<v Speaker 0>things that I know you know, security is

00:03:24.165 --> 00:03:25.605
<v Speaker 0>a big deal, especially

00:03:26.165 --> 00:03:28.644
<v Speaker 0>when we're talking about cloud computing and Kubernetes

00:03:28.644 --> 00:03:31.205
<v Speaker 0>and especially if you've got public facing traffic

00:03:31.205 --> 00:03:32.084
<v Speaker 0>of any kind. So

00:03:32.780 --> 00:03:34.380
<v Speaker 0>we're just in attack factors and all that

00:03:34.380 --> 00:03:35.980
<v Speaker 0>other stuff. I'm not gonna pretend I know

00:03:35.980 --> 00:03:37.500
<v Speaker 0>about security, but I know a few words

00:03:37.500 --> 00:03:39.180
<v Speaker 0>I can drop in, like, attack vector.

00:03:39.820 --> 00:03:42.220
<v Speaker 0>And second operator, which is a project that

00:03:42.220 --> 00:03:43.980
<v Speaker 0>YouTube have been involved in, I think, is

00:03:43.980 --> 00:03:45.820
<v Speaker 0>a big component of that. So do you

00:03:45.820 --> 00:03:46.860
<v Speaker 0>wanna just

00:03:47.055 --> 00:03:48.895
<v Speaker 0>take a minute to describe what this project

00:03:48.895 --> 00:03:51.055
<v Speaker 0>is and and how it works and helps

00:03:51.055 --> 00:03:53.695
<v Speaker 0>people be securing the next one? Dan, do

00:03:53.695 --> 00:03:55.695
<v Speaker 2>you wanna take it? Sure. Yeah. I can

00:03:55.695 --> 00:03:57.295
<v Speaker 1>I can jump in on that? So as

00:03:57.295 --> 00:03:58.255
<v Speaker 1>Sasha said,

00:03:58.575 --> 00:04:01.620
<v Speaker 1>set comp has existed in Kubernetes for for

00:04:01.620 --> 00:04:03.620
<v Speaker 1>quite a while and and and the Linux

00:04:03.620 --> 00:04:06.500
<v Speaker 1>kernel as well. So, basically, set comp is

00:04:06.500 --> 00:04:08.819
<v Speaker 1>just, you know, when you have a process

00:04:08.819 --> 00:04:10.500
<v Speaker 1>running in user space,

00:04:11.060 --> 00:04:13.780
<v Speaker 1>it typically, to do anything meaningful, needs to

00:04:13.780 --> 00:04:15.379
<v Speaker 1>access some of the functionality

00:04:15.915 --> 00:04:17.755
<v Speaker 1>in kernel space. And to do that, it

00:04:17.755 --> 00:04:20.475
<v Speaker 1>uses syscalls. Right? So it says, hi, kernel.

00:04:20.475 --> 00:04:22.555
<v Speaker 1>Like, you have more privilege than me. Please

00:04:22.555 --> 00:04:24.795
<v Speaker 1>go do this task for me.

00:04:25.515 --> 00:04:27.595
<v Speaker 1>And so you can imagine since it has

00:04:27.595 --> 00:04:28.955
<v Speaker 1>to communicate in this language,

00:04:29.530 --> 00:04:31.930
<v Speaker 1>you could pretty easily put in a layer

00:04:31.930 --> 00:04:34.170
<v Speaker 1>they there to filter what calls are going

00:04:34.170 --> 00:04:35.370
<v Speaker 1>through to the kernel.

00:04:35.690 --> 00:04:37.770
<v Speaker 1>And that's a pretty effective way to, you

00:04:37.770 --> 00:04:40.330
<v Speaker 1>know, establish security boundaries on things because the

00:04:40.330 --> 00:04:42.970
<v Speaker 1>the functionality of different syscalls is pretty well

00:04:42.970 --> 00:04:43.290
<v Speaker 1>defined,

00:04:43.905 --> 00:04:45.345
<v Speaker 1>though there are a lot of them, which

00:04:45.345 --> 00:04:46.945
<v Speaker 1>we'll probably find out later on in the

00:04:46.945 --> 00:04:47.985
<v Speaker 1>stream.

00:04:48.625 --> 00:04:51.665
<v Speaker 1>But being able to restrict what syscalls a

00:04:51.665 --> 00:04:53.585
<v Speaker 1>process can accomplish

00:04:54.145 --> 00:04:56.145
<v Speaker 1>is is really effective. And especially when you

00:04:56.145 --> 00:04:57.505
<v Speaker 1>bring in containerization,

00:04:57.665 --> 00:04:59.264
<v Speaker 1>you can apply profiles to that.

00:04:59.990 --> 00:05:01.590
<v Speaker 1>It can get a lot more effective. So

00:05:01.590 --> 00:05:03.110
<v Speaker 1>anyway, you've been able to do this for

00:05:03.110 --> 00:05:05.030
<v Speaker 1>quite a while with annotations

00:05:05.430 --> 00:05:07.350
<v Speaker 1>on pods and containers

00:05:07.669 --> 00:05:09.190
<v Speaker 1>in in Kubernetes,

00:05:09.669 --> 00:05:11.190
<v Speaker 1>and you can also do that on on

00:05:11.190 --> 00:05:13.270
<v Speaker 1>pod security policies to enforce these sorts of

00:05:13.270 --> 00:05:16.705
<v Speaker 1>things. Most container runtimes, which for folks who

00:05:16.705 --> 00:05:18.305
<v Speaker 1>aren't as familiar with Kubernetes,

00:05:18.385 --> 00:05:20.305
<v Speaker 1>Kubernetes is an orchestration

00:05:20.705 --> 00:05:23.105
<v Speaker 1>orchestration layer that sits on top of a

00:05:23.105 --> 00:05:24.945
<v Speaker 1>container runtime. Right? So you could swap out

00:05:24.945 --> 00:05:26.305
<v Speaker 1>the underlying container runtime,

00:05:26.729 --> 00:05:28.169
<v Speaker 1>which we we may talk about a little

00:05:28.169 --> 00:05:29.610
<v Speaker 1>bit. But most of them ship with kind

00:05:29.610 --> 00:05:30.650
<v Speaker 1>of a default

00:05:31.130 --> 00:05:33.930
<v Speaker 1>set comp profile, which is like, this is,

00:05:34.009 --> 00:05:36.169
<v Speaker 1>you know, the bare minimum security you could

00:05:36.169 --> 00:05:37.610
<v Speaker 1>have here. It's like, you it's not gonna

00:05:37.610 --> 00:05:39.050
<v Speaker 1>do anything too atrocious.

00:05:39.595 --> 00:05:41.675
<v Speaker 1>But most people, you won't even see enabling

00:05:41.675 --> 00:05:42.875
<v Speaker 1>that, right, because

00:05:43.115 --> 00:05:45.115
<v Speaker 1>it is an annotation you have to add.

00:05:45.115 --> 00:05:46.955
<v Speaker 1>So it's kind of like unstructured data. It's

00:05:46.955 --> 00:05:48.395
<v Speaker 1>not a formal field if you look at

00:05:48.395 --> 00:05:50.475
<v Speaker 1>the API spec for a pod.

00:05:50.795 --> 00:05:52.395
<v Speaker 1>So, yeah, you don't see it used a

00:05:52.395 --> 00:05:54.155
<v Speaker 1>lot in Kubernetes even though it's been around

00:05:54.155 --> 00:05:54.715
<v Speaker 1>for quite a while.

00:05:55.580 --> 00:05:56.940
<v Speaker 1>And as Sasha mentioned,

00:05:57.340 --> 00:05:59.419
<v Speaker 1>as part of the one dot '19 release,

00:05:59.660 --> 00:06:02.220
<v Speaker 1>Sasha and I and Paulo Gomez,

00:06:02.220 --> 00:06:02.460
<v Speaker 1>who,

00:06:03.099 --> 00:06:04.860
<v Speaker 1>led a big part of this as well,

00:06:05.819 --> 00:06:08.300
<v Speaker 1>graduated set comp to GA. So essentially, what

00:06:08.300 --> 00:06:10.525
<v Speaker 1>that means and this sounds kind of simple,

00:06:10.525 --> 00:06:12.205
<v Speaker 1>but if you're familiar with kind of how

00:06:12.205 --> 00:06:14.205
<v Speaker 1>API changes work in Kubernetes, you'll know it's

00:06:14.205 --> 00:06:15.645
<v Speaker 1>it's not super simple.

00:06:15.965 --> 00:06:17.965
<v Speaker 1>We basically just took those annotations and made

00:06:17.965 --> 00:06:20.365
<v Speaker 1>them a formal part of the security context.

00:06:20.925 --> 00:06:23.325
<v Speaker 1>So that has a number of benefits. One

00:06:23.325 --> 00:06:24.764
<v Speaker 1>of the biggest I see is that it's

00:06:24.764 --> 00:06:26.870
<v Speaker 1>just, you know, a a field that's there

00:06:26.870 --> 00:06:28.389
<v Speaker 1>in the API spec, right, that you can

00:06:28.389 --> 00:06:30.310
<v Speaker 1>set as part of your security context. It's

00:06:30.310 --> 00:06:32.550
<v Speaker 1>in the documentation as such, and it's less

00:06:32.550 --> 00:06:34.389
<v Speaker 1>of kind of like an afterthought.

00:06:34.629 --> 00:06:35.509
<v Speaker 1>So anyway,

00:06:35.909 --> 00:06:37.750
<v Speaker 1>basically, same functionality

00:06:37.750 --> 00:06:40.069
<v Speaker 1>for the most part, but just moving that

00:06:40.575 --> 00:06:43.375
<v Speaker 1>to the actual formal pod spec. And as

00:06:43.375 --> 00:06:45.135
<v Speaker 1>Sacha mentioned, as part of that,

00:06:45.535 --> 00:06:47.935
<v Speaker 1>we wanted to enable you to make it

00:06:47.935 --> 00:06:51.375
<v Speaker 1>easier to use that comp. So once again,

00:06:51.375 --> 00:06:53.455
<v Speaker 1>for folks who aren't as familiar with Kubernetes,

00:06:53.539 --> 00:06:56.020
<v Speaker 1>typically, there are a number of nodes running.

00:06:56.020 --> 00:06:57.699
<v Speaker 1>So each of those nodes have a container

00:06:57.699 --> 00:07:00.660
<v Speaker 1>runtime on them. The Kubernetes scheduler is gonna

00:07:00.660 --> 00:07:02.500
<v Speaker 1>go and take your pods, are made up

00:07:02.500 --> 00:07:04.580
<v Speaker 1>of containers, put those on the nodes, which

00:07:04.580 --> 00:07:06.340
<v Speaker 1>are gonna run those with the container runtime

00:07:06.340 --> 00:07:07.539
<v Speaker 1>that they're interfacing with.

00:07:08.535 --> 00:07:10.055
<v Speaker 1>So you can imagine

00:07:10.615 --> 00:07:13.335
<v Speaker 1>if the if set comp is something that's

00:07:13.335 --> 00:07:14.855
<v Speaker 1>at the kernel layer,

00:07:15.415 --> 00:07:17.495
<v Speaker 1>that is on a per node basis. Right?

00:07:17.495 --> 00:07:20.295
<v Speaker 1>So you can't just say, I I'd like

00:07:20.295 --> 00:07:21.975
<v Speaker 1>the set comp profile to be used and

00:07:21.975 --> 00:07:23.815
<v Speaker 1>assume that it's present on all nodes.

00:07:24.350 --> 00:07:26.270
<v Speaker 1>Right now, you have to actually go in

00:07:26.270 --> 00:07:28.270
<v Speaker 1>and, you know, when you're setting up your

00:07:28.270 --> 00:07:30.190
<v Speaker 1>machine or SSH ing into your machine or

00:07:30.190 --> 00:07:31.470
<v Speaker 1>something like that, you have to go and

00:07:31.470 --> 00:07:33.950
<v Speaker 1>actually put them in a directory that's specified

00:07:33.950 --> 00:07:35.230
<v Speaker 1>with the kubelet flag

00:07:35.710 --> 00:07:37.470
<v Speaker 1>and make sure those are present on all

00:07:37.470 --> 00:07:38.110
<v Speaker 1>of your nodes.

00:07:38.574 --> 00:07:41.055
<v Speaker 1>So it's it's very for something that you

00:07:41.055 --> 00:07:43.534
<v Speaker 1>can configure on a pod spec, it's very

00:07:43.534 --> 00:07:45.854
<v Speaker 1>divorced from the actual running of a workload.

00:07:45.854 --> 00:07:48.335
<v Speaker 1>Right? It's very much a a cluster administrator

00:07:48.335 --> 00:07:49.215
<v Speaker 1>activity,

00:07:50.335 --> 00:07:52.335
<v Speaker 1>which, you know, has has some pros and

00:07:52.335 --> 00:07:54.389
<v Speaker 1>cons. Right? Typically, the cluster administrator is gonna

00:07:54.389 --> 00:07:55.750
<v Speaker 1>be knowledgeable of those things and can do

00:07:55.750 --> 00:07:57.590
<v Speaker 1>it. But if you want to, you know,

00:07:57.590 --> 00:07:59.830
<v Speaker 1>constantly be changing the seccomp profiles that are

00:07:59.830 --> 00:08:02.150
<v Speaker 1>available and creating new ones for for different

00:08:02.150 --> 00:08:04.550
<v Speaker 1>processes you're running in in a different container,

00:08:05.430 --> 00:08:07.270
<v Speaker 1>then that's kind of a pain. Right? So

00:08:07.270 --> 00:08:09.914
<v Speaker 1>let's say I'm I'm running a a workload

00:08:09.914 --> 00:08:12.235
<v Speaker 1>and I'm just a developer in my organization.

00:08:12.235 --> 00:08:13.835
<v Speaker 1>I I need to create my pod.

00:08:14.555 --> 00:08:15.995
<v Speaker 1>You know, I don't want to have to

00:08:15.995 --> 00:08:18.955
<v Speaker 1>email my my cluster administrator and say, hey.

00:08:18.955 --> 00:08:20.794
<v Speaker 1>Will you go make sure there's a seccomp

00:08:20.794 --> 00:08:23.435
<v Speaker 1>profile on this node? And then I'm gonna

00:08:23.435 --> 00:08:25.810
<v Speaker 1>put, you know, like, specific node taints on

00:08:25.810 --> 00:08:27.330
<v Speaker 1>here to make sure the pod gets scheduled

00:08:27.330 --> 00:08:29.090
<v Speaker 1>there and do all that. Like, it it's

00:08:29.090 --> 00:08:31.650
<v Speaker 1>it's mixing of responsibility there, it's kind of,

00:08:31.650 --> 00:08:33.570
<v Speaker 1>like, moving away from this whole pattern that

00:08:33.570 --> 00:08:35.010
<v Speaker 1>Kubernetes is trying to,

00:08:35.410 --> 00:08:36.130
<v Speaker 1>enforce.

00:08:36.530 --> 00:08:38.655
<v Speaker 1>So what we'd like to do is take

00:08:38.655 --> 00:08:41.135
<v Speaker 1>the, set comp functionality and make it available

00:08:41.135 --> 00:08:43.135
<v Speaker 1>more at that developer level,

00:08:43.455 --> 00:08:46.015
<v Speaker 1>or just make it easier for cluster administrators

00:08:46.015 --> 00:08:48.015
<v Speaker 1>to to use and and create pod security

00:08:48.015 --> 00:08:48.735
<v Speaker 1>policies.

00:08:48.895 --> 00:08:49.375
<v Speaker 1>So,

00:08:49.775 --> 00:08:52.440
<v Speaker 1>anyway, the set comp operator is kind of

00:08:52.440 --> 00:08:55.160
<v Speaker 1>typical to Kubernetes operators. It it watches,

00:08:55.560 --> 00:08:57.720
<v Speaker 1>an API type. Right now, we're just using

00:08:57.720 --> 00:08:59.800
<v Speaker 1>config map, so there's no new API type

00:08:59.800 --> 00:09:00.600
<v Speaker 1>that's added.

00:09:01.400 --> 00:09:03.480
<v Speaker 1>And that config map has data in it,

00:09:03.480 --> 00:09:06.225
<v Speaker 1>is basically just set comp profiles. And it'll

00:09:06.225 --> 00:09:07.904
<v Speaker 1>go and it runs as a daemon set.

00:09:07.904 --> 00:09:09.985
<v Speaker 1>So this operator is running on every node,

00:09:10.305 --> 00:09:11.985
<v Speaker 1>and it actually goes and puts those in

00:09:11.985 --> 00:09:13.025
<v Speaker 1>the correct directory,

00:09:13.185 --> 00:09:14.785
<v Speaker 1>which means that you can then say on

00:09:14.785 --> 00:09:15.585
<v Speaker 1>your pod,

00:09:15.825 --> 00:09:17.665
<v Speaker 1>you know, use this set comp profile with

00:09:17.665 --> 00:09:19.345
<v Speaker 1>this name, which I know exists because I

00:09:19.345 --> 00:09:21.760
<v Speaker 1>can queue control, get my config maps that

00:09:21.760 --> 00:09:23.120
<v Speaker 1>are set comp profiles

00:09:23.920 --> 00:09:25.600
<v Speaker 1>and and know which ones are available to

00:09:25.600 --> 00:09:27.120
<v Speaker 1>me, and then apply them to my workloads.

00:09:27.120 --> 00:09:28.720
<v Speaker 1>And we can run through through doing all

00:09:28.720 --> 00:09:30.160
<v Speaker 1>of this, but that's kind of the main

00:09:30.160 --> 00:09:32.240
<v Speaker 1>idea. We'd like to make it really easy

00:09:32.240 --> 00:09:34.480
<v Speaker 1>to use this really valuable functionality.

00:09:36.285 --> 00:09:39.485
<v Speaker 0>Okay. There is a whole lot of information

00:09:39.485 --> 00:09:41.085
<v Speaker 0>there. So I what I'm gonna do is

00:09:41.085 --> 00:09:43.005
<v Speaker 0>make sure that I have understood it correctly,

00:09:43.005 --> 00:09:44.365
<v Speaker 0>and I'm gonna try and scrape it back

00:09:44.365 --> 00:09:45.485
<v Speaker 0>to you now. Sounds

00:09:46.125 --> 00:09:46.685
<v Speaker 1>good.

00:09:47.245 --> 00:09:48.445
<v Speaker 0>So second. Right?

00:09:50.710 --> 00:09:53.190
<v Speaker 0>Let's remove Kubernetes and containers for now. It's

00:09:53.190 --> 00:09:54.790
<v Speaker 0>a Linux kernel primitive

00:09:55.190 --> 00:09:57.350
<v Speaker 0>that allows me to define the syscalls that

00:09:57.350 --> 00:09:59.750
<v Speaker 0>any binary running on that machine are allowed

00:09:59.750 --> 00:10:00.630
<v Speaker 0>to execute.

00:10:02.070 --> 00:10:02.470
<v Speaker 0>Right?

00:10:02.904 --> 00:10:03.785
<v Speaker 2>Exactly.

00:10:03.865 --> 00:10:05.785
<v Speaker 0>The second profile is something that I have

00:10:05.785 --> 00:10:07.225
<v Speaker 0>to craft myself, and I put in a

00:10:07.225 --> 00:10:09.385
<v Speaker 0>directory that Linux kernel expects it to live

00:10:09.385 --> 00:10:10.025
<v Speaker 0>in.

00:10:10.745 --> 00:10:11.545
<v Speaker 0>And

00:10:12.585 --> 00:10:14.425
<v Speaker 0>so how do you connect the profile to

00:10:14.425 --> 00:10:17.065
<v Speaker 0>the binary? Like, it's beside Kubernetes. Like, if

00:10:17.065 --> 00:10:18.345
<v Speaker 0>I was just doing this on a Linux

00:10:18.120 --> 00:10:19.320
<v Speaker 0>machine, how would that work?

00:10:21.480 --> 00:10:22.840
<v Speaker 2>Yeah. I mean,

00:10:23.320 --> 00:10:26.279
<v Speaker 2>it's more or less so the profile profiles

00:10:26.279 --> 00:10:28.440
<v Speaker 2>itself are not not written in JSON. So

00:10:28.440 --> 00:10:30.200
<v Speaker 2>they are just for example, you can use

00:10:30.200 --> 00:10:31.800
<v Speaker 2>libseccom, which is a c library,

00:10:32.345 --> 00:10:34.345
<v Speaker 2>and then you can use it to interface

00:10:34.345 --> 00:10:37.305
<v Speaker 2>with the seccom BPF filter filter, and then

00:10:37.305 --> 00:10:39.705
<v Speaker 2>you can generate or build the filter. For

00:10:39.705 --> 00:10:41.625
<v Speaker 2>example, you allow only a subset of this

00:10:41.625 --> 00:10:44.105
<v Speaker 2>calls for your current currently running architecture.

00:10:44.910 --> 00:10:46.910
<v Speaker 2>And then you have to call something like

00:10:46.910 --> 00:10:49.389
<v Speaker 2>filter load, and then the filter gets loaded

00:10:49.389 --> 00:10:50.750
<v Speaker 2>into the kernel and

00:10:51.149 --> 00:10:52.990
<v Speaker 2>attached to a process. And,

00:10:53.470 --> 00:10:55.790
<v Speaker 2>yeah, that's it. So it's it has to

00:10:55.790 --> 00:10:57.149
<v Speaker 2>be attached to a running process.

00:10:58.985 --> 00:11:00.025
<v Speaker 0>Oh, okay.

00:11:00.505 --> 00:11:02.185
<v Speaker 0>Okay. So that that was a bit of

00:11:02.185 --> 00:11:03.705
<v Speaker 0>a disconnect for me then.

00:11:03.945 --> 00:11:05.705
<v Speaker 0>So I have a running process. I attached

00:11:05.705 --> 00:11:07.225
<v Speaker 0>the profile to it, and that process is

00:11:07.225 --> 00:11:09.785
<v Speaker 0>then secure. If that exits and is rerun

00:11:09.785 --> 00:11:11.385
<v Speaker 0>by someone else, I would have to reattach

00:11:11.385 --> 00:11:12.185
<v Speaker 0>the profile?

00:11:12.720 --> 00:11:14.320
<v Speaker 2>No. I don't I think the profile is

00:11:14.320 --> 00:11:17.440
<v Speaker 2>gone if the process exits. But I think,

00:11:17.440 --> 00:11:18.640
<v Speaker 2>originally,

00:11:18.720 --> 00:11:20.560
<v Speaker 2>seccomp had no support,

00:11:20.560 --> 00:11:22.320
<v Speaker 2>so there was no support for those data

00:11:22.320 --> 00:11:24.880
<v Speaker 2>structure where you can specify differences calls.

00:11:25.199 --> 00:11:27.279
<v Speaker 2>In the first place, it was just something

00:11:27.279 --> 00:11:29.975
<v Speaker 2>like, okay. We want to use seccomp or

00:11:29.975 --> 00:11:31.415
<v Speaker 2>we don't want to use it. And if

00:11:31.415 --> 00:11:33.655
<v Speaker 2>we enable seccomp for a process, then the

00:11:33.655 --> 00:11:36.855
<v Speaker 2>process can't do new SYS calls. So that's

00:11:37.015 --> 00:11:38.935
<v Speaker 2>that was the main intention, but that that

00:11:38.935 --> 00:11:40.295
<v Speaker 2>wasn't flexible enough.

00:11:40.535 --> 00:11:42.455
<v Speaker 2>And then they decided to go for BPF.

00:11:42.455 --> 00:11:44.990
<v Speaker 2>It's not eBPF, so it's not this extended

00:11:44.990 --> 00:11:46.190
<v Speaker 2>BPF

00:11:46.269 --> 00:11:46.990
<v Speaker 2>filtering,

00:11:47.389 --> 00:11:49.550
<v Speaker 2>but it's just a plain BPF.

00:11:49.550 --> 00:11:51.550
<v Speaker 2>So there's more or less something like a

00:11:51.629 --> 00:11:53.389
<v Speaker 2>you can imagine it something like a lightweight

00:11:53.389 --> 00:11:55.470
<v Speaker 2>common module which gets which gets loaded on

00:11:55.470 --> 00:11:58.350
<v Speaker 2>runtime and then, yeah, traces and blocks business

00:11:58.350 --> 00:12:00.435
<v Speaker 2>calls. So we have different actions. Right? So

00:12:00.435 --> 00:12:02.355
<v Speaker 2>we can block business calls, but we can

00:12:02.355 --> 00:12:04.755
<v Speaker 2>also trace them or lock them. It is

00:12:04.755 --> 00:12:05.875
<v Speaker 2>possible as well.

00:12:06.595 --> 00:12:09.795
<v Speaker 0>Okay. Then from my naive perspective, is it

00:12:09.795 --> 00:12:11.875
<v Speaker 0>okay to think of seccomp as, a firewall

00:12:11.875 --> 00:12:15.160
<v Speaker 0>for SIS calls? Yeah. Probably. Yeah. Okay.

00:12:16.760 --> 00:12:18.600
<v Speaker 3>Okay. The next stage there that I don't

00:12:18.600 --> 00:12:21.560
<v Speaker 0>went over was that Kubernetes

00:12:21.560 --> 00:12:24.280
<v Speaker 0>has support for the seccomp profiles, and they're

00:12:24.280 --> 00:12:26.040
<v Speaker 0>handled through annotations

00:12:26.040 --> 00:12:27.880
<v Speaker 0>on the pods

00:12:27.880 --> 00:12:28.360
<v Speaker 0>deck.

00:12:30.105 --> 00:12:31.945
<v Speaker 0>And the challenge with that

00:12:32.264 --> 00:12:33.065
<v Speaker 0>is

00:12:33.065 --> 00:12:34.904
<v Speaker 0>that they don't always exist in all the

00:12:34.904 --> 00:12:37.305
<v Speaker 0>nodes. Is that correct?

00:12:37.545 --> 00:12:38.584
<v Speaker 1>Yeah. So

00:12:39.305 --> 00:12:41.144
<v Speaker 1>there there's a couple challenges. Like, the first

00:12:41.144 --> 00:12:42.425
<v Speaker 1>one there is that

00:12:42.745 --> 00:12:45.170
<v Speaker 1>it's, you know, annotations are are, like, an

00:12:45.170 --> 00:12:48.529
<v Speaker 1>unstructured bag of data. Right? So it's not

00:12:48.529 --> 00:12:51.010
<v Speaker 1>immediately clear. You're not gonna get, like, validation

00:12:51.410 --> 00:12:53.810
<v Speaker 1>on on your annotations like you would with,

00:12:53.810 --> 00:12:55.570
<v Speaker 1>you know, the open API schema of a

00:12:55.570 --> 00:12:57.010
<v Speaker 1>pod. So that's kind of the first thing.

00:12:57.295 --> 00:12:58.895
<v Speaker 1>But more in relation to what you were

00:12:58.895 --> 00:12:59.375
<v Speaker 1>saying,

00:13:00.335 --> 00:13:02.015
<v Speaker 1>so when you

00:13:02.735 --> 00:13:04.895
<v Speaker 1>create a pod with this annotation, let's say

00:13:04.895 --> 00:13:06.815
<v Speaker 1>it's pre one dot 19 before it's moved

00:13:06.815 --> 00:13:08.095
<v Speaker 1>to the actual security context.

00:13:09.150 --> 00:13:11.630
<v Speaker 1>If that pod gets scheduled to a node

00:13:11.630 --> 00:13:13.630
<v Speaker 1>that didn't have that seccomp profile,

00:13:14.510 --> 00:13:16.750
<v Speaker 1>then that would be an issue. Right? Because

00:13:16.750 --> 00:13:18.190
<v Speaker 1>it it couldn't apply it.

00:13:18.670 --> 00:13:21.470
<v Speaker 1>So you could say, you know, typically

00:13:21.495 --> 00:13:23.335
<v Speaker 1>well, actually, I mean, I guess it depends

00:13:23.335 --> 00:13:25.255
<v Speaker 1>on the organization. But typically, you'd either have

00:13:25.255 --> 00:13:27.255
<v Speaker 1>them on all nodes in your cluster or

00:13:27.255 --> 00:13:29.654
<v Speaker 1>you'd have a very specific workload. Maybe this

00:13:29.654 --> 00:13:31.815
<v Speaker 1>is even more likely because set comp isn't

00:13:31.815 --> 00:13:33.735
<v Speaker 1>super common to have enabled

00:13:34.055 --> 00:13:34.855
<v Speaker 1>on workloads.

00:13:35.950 --> 00:13:38.270
<v Speaker 1>You typically have, you know, a specific node

00:13:38.270 --> 00:13:40.510
<v Speaker 1>that you're, like, forcing scheduling to that has

00:13:40.510 --> 00:13:42.750
<v Speaker 1>a set comp profiles there. So so yeah.

00:13:42.750 --> 00:13:43.550
<v Speaker 1>Basically,

00:13:44.110 --> 00:13:46.110
<v Speaker 1>you know, the the pod is an abstraction

00:13:46.110 --> 00:13:47.070
<v Speaker 1>for scheduling,

00:13:47.790 --> 00:13:50.345
<v Speaker 1>but set comp doesn't really, like, fit into

00:13:50.345 --> 00:13:53.385
<v Speaker 1>that abstraction, unfortunately. Right? It's node specific.

00:13:53.545 --> 00:13:55.545
<v Speaker 1>And you see other things like, you know,

00:13:55.545 --> 00:13:56.985
<v Speaker 1>let's say you want to use, like, GPUs

00:13:56.985 --> 00:13:58.824
<v Speaker 1>or something like that, you know, that's on

00:13:58.824 --> 00:14:01.225
<v Speaker 1>a node. There's other times you have to

00:14:01.225 --> 00:14:04.105
<v Speaker 1>do this. But because this is built into

00:14:04.105 --> 00:14:05.225
<v Speaker 1>the container runtime,

00:14:06.920 --> 00:14:08.760
<v Speaker 1>you you basically shouldn't have to do that.

00:14:08.760 --> 00:14:10.280
<v Speaker 1>Right? It's not like it's not like specific

00:14:10.280 --> 00:14:11.720
<v Speaker 1>hardware. It needs to be, you know, like,

00:14:11.720 --> 00:14:13.160
<v Speaker 1>obviously, like a Linux node and that sort

00:14:13.160 --> 00:14:13.800
<v Speaker 1>of thing.

00:14:14.200 --> 00:14:16.040
<v Speaker 1>But we're we're kind of paying a price

00:14:16.040 --> 00:14:17.640
<v Speaker 1>right now that you shouldn't have to, at

00:14:17.640 --> 00:14:18.760
<v Speaker 1>least in our opinion, I think.

00:14:21.225 --> 00:14:21.945
<v Speaker 3>Okay.

00:14:23.705 --> 00:14:26.024
<v Speaker 0>I'm kinda following along. I think the best

00:14:26.024 --> 00:14:27.385
<v Speaker 0>way to tackle this

00:14:28.985 --> 00:14:30.985
<v Speaker 0>is let's play with it. I mean Right?

00:14:31.480 --> 00:14:33.320
<v Speaker 1>Yeah. Yeah. I mean, we also have this

00:14:33.320 --> 00:14:34.920
<v Speaker 2>kind of hierarchy of when it comes to

00:14:34.920 --> 00:14:37.400
<v Speaker 2>annotations or passing data around with annotations. Right?

00:14:37.400 --> 00:14:40.120
<v Speaker 2>So this is, from my perspective, kind of

00:14:40.120 --> 00:14:42.520
<v Speaker 2>a little of a problem for making users

00:14:42.520 --> 00:14:44.520
<v Speaker 2>actually use the feature because they have to

00:14:44.520 --> 00:14:45.160
<v Speaker 2>specify

00:14:45.475 --> 00:14:47.155
<v Speaker 2>an exact annotation.

00:14:47.315 --> 00:14:48.995
<v Speaker 2>And then they can say, okay. Now this

00:14:48.995 --> 00:14:50.675
<v Speaker 2>profile applies to the pod, but they can

00:14:50.675 --> 00:14:54.595
<v Speaker 2>also say, okay. It's it's

00:14:54.595 --> 00:14:56.995
<v Speaker 2>slash container name, and then you can reference

00:14:56.995 --> 00:14:58.995
<v Speaker 2>your container name inside of the pod to

00:14:59.370 --> 00:15:01.850
<v Speaker 2>apply the second profile only to a to

00:15:01.850 --> 00:15:04.570
<v Speaker 2>a single container. So and and this fact

00:15:04.570 --> 00:15:07.370
<v Speaker 2>already makes it pretty complicated to use. And,

00:15:07.370 --> 00:15:08.330
<v Speaker 2>yeah, we can

00:15:08.810 --> 00:15:11.450
<v Speaker 2>solve that issue by having a dedicated field

00:15:11.450 --> 00:15:13.529
<v Speaker 2>in the sec security context of the container

00:15:13.529 --> 00:15:15.795
<v Speaker 2>and the pod. Yeah. If I think if

00:15:15.795 --> 00:15:17.314
<v Speaker 1>we jump over to the repo, we could

00:15:17.314 --> 00:15:18.915
<v Speaker 1>look at some examples. I think we have

00:15:18.915 --> 00:15:21.555
<v Speaker 1>some the pods with annotations and with the

00:15:21.555 --> 00:15:23.315
<v Speaker 1>security context. Probably helpful

00:15:23.795 --> 00:15:26.514
<v Speaker 1>to take a look there. The seccomp operator

00:15:26.514 --> 00:15:30.070
<v Speaker 0>repository. Right? Yep. In Kubernetesorg.

00:15:30.310 --> 00:15:32.150
<v Speaker 0>Yep. That was I think, Tasha already put

00:15:32.150 --> 00:15:34.310
<v Speaker 1>a link in here too. There we go.

00:15:35.110 --> 00:15:35.670
<v Speaker 1>Nice.

00:15:44.685 --> 00:15:47.165
<v Speaker 2>You can ignore this mindset right now. It's

00:15:47.165 --> 00:15:48.845
<v Speaker 2>just our our brain dump.

00:15:49.645 --> 00:15:51.404
<v Speaker 0>I'm not sure I want to ignore it.

00:15:51.404 --> 00:15:52.765
<v Speaker 1>It's

00:15:52.765 --> 00:15:53.485
<v Speaker 1>very colorful.

00:15:53.850 --> 00:15:55.930
<v Speaker 0>Later. Later. Okay. So

00:15:56.730 --> 00:15:58.490
<v Speaker 0>what do you want me to pop open

00:15:58.490 --> 00:16:01.130
<v Speaker 0>then? I think installation and usage might be

00:16:01.130 --> 00:16:01.690
<v Speaker 1>good.

00:16:02.649 --> 00:16:04.009
<v Speaker 1>It's the app there at the top. That

00:16:04.009 --> 00:16:05.209
<v Speaker 0>would make sense. Yeah. Definitely.

00:16:08.575 --> 00:16:11.375
<v Speaker 1>Alright. So, yeah, we have the our stream

00:16:11.375 --> 00:16:14.495
<v Speaker 1>there. And then here, we're first, it's looking

00:16:14.495 --> 00:16:16.255
<v Speaker 1>at installing the operator

00:16:16.575 --> 00:16:17.535
<v Speaker 1>itself,

00:16:18.255 --> 00:16:20.095
<v Speaker 1>and then it's looking at creating a profile.

00:16:20.095 --> 00:16:22.730
<v Speaker 1>So we talked about beforehand

00:16:23.209 --> 00:16:25.209
<v Speaker 1>that right now, you'd go and actually kind

00:16:25.209 --> 00:16:27.850
<v Speaker 1>of, like, put this these JSON files

00:16:28.010 --> 00:16:29.930
<v Speaker 1>in a specific path on

00:16:30.329 --> 00:16:31.209
<v Speaker 1>your node.

00:16:31.529 --> 00:16:33.370
<v Speaker 1>And so what we're showing here basically is

00:16:33.370 --> 00:16:35.930
<v Speaker 1>just putting those JSON files in a config

00:16:35.930 --> 00:16:37.775
<v Speaker 1>map. And what the operator is gonna do

00:16:37.775 --> 00:16:39.775
<v Speaker 1>is it's gonna see that because of the

00:16:39.775 --> 00:16:42.735
<v Speaker 1>annotation there that's, you know, set comp.security at

00:16:42.735 --> 00:16:44.335
<v Speaker 1>kubernetes.i0/

00:16:44.335 --> 00:16:46.415
<v Speaker 1>profile. So it's gonna say the operator is

00:16:46.415 --> 00:16:48.415
<v Speaker 1>saying, look at all config maps with this

00:16:48.415 --> 00:16:49.295
<v Speaker 1>annotation on it,

00:16:50.090 --> 00:16:51.850
<v Speaker 1>and then it's gonna take all of those

00:16:51.850 --> 00:16:54.490
<v Speaker 1>profiles in line there and just put them

00:16:54.730 --> 00:16:55.930
<v Speaker 1>in a directory

00:16:56.410 --> 00:16:58.170
<v Speaker 1>on all of your nodes. Right? So it's

00:16:58.170 --> 00:16:59.610
<v Speaker 1>a daemon set. This operator is running on

00:16:59.610 --> 00:17:01.610
<v Speaker 1>every node. So each one of those processes

00:17:01.610 --> 00:17:03.450
<v Speaker 1>will go and actually put that on the

00:17:03.450 --> 00:17:03.690
<v Speaker 1>node.

00:17:04.934 --> 00:17:07.414
<v Speaker 1>And if you scroll down, then we'll show

00:17:07.414 --> 00:17:08.694
<v Speaker 1>usage of it,

00:17:09.255 --> 00:17:12.374
<v Speaker 1>which this usage obviously is not specific to

00:17:13.174 --> 00:17:15.335
<v Speaker 1>just seccomp operator. You could manually put these

00:17:15.335 --> 00:17:16.535
<v Speaker 1>in there and then do it, but you'll

00:17:16.535 --> 00:17:16.855
<v Speaker 1>see

00:17:17.909 --> 00:17:19.349
<v Speaker 1>the top one here

00:17:19.829 --> 00:17:20.549
<v Speaker 1>is

00:17:20.950 --> 00:17:22.869
<v Speaker 1>with one dot 19 where we have the

00:17:22.869 --> 00:17:25.029
<v Speaker 1>security context there and set comp profiles and

00:17:25.029 --> 00:17:27.669
<v Speaker 1>actually actual field there. And then you'll see

00:17:27.669 --> 00:17:29.510
<v Speaker 1>before one dot 19 below that,

00:17:30.225 --> 00:17:31.745
<v Speaker 1>you have that annotation,

00:17:32.385 --> 00:17:34.145
<v Speaker 1>you know, which is a little more cumbersome.

00:17:34.145 --> 00:17:35.905
<v Speaker 1>Right? You're not gonna get that validation and

00:17:35.905 --> 00:17:36.865
<v Speaker 1>that sort of thing.

00:17:37.585 --> 00:17:39.345
<v Speaker 1>So, yeah, that's a general idea. And as

00:17:39.345 --> 00:17:41.985
<v Speaker 1>as Sasha also mentioned, you know, a security

00:17:41.985 --> 00:17:43.345
<v Speaker 1>context, you can have it at the pod

00:17:43.345 --> 00:17:45.210
<v Speaker 1>level, and then you can also have it

00:17:45.210 --> 00:17:48.090
<v Speaker 1>more granularly at the container level. Can just

00:17:48.090 --> 00:17:50.010
<v Speaker 1>like any other thing, the security context, the

00:17:50.010 --> 00:17:51.930
<v Speaker 1>container level, the more granular one is gonna

00:17:51.930 --> 00:17:52.730
<v Speaker 1>override

00:17:53.370 --> 00:17:55.450
<v Speaker 1>the the top one. But if you're doing

00:17:55.450 --> 00:17:58.265
<v Speaker 1>that with the the annotations here, they're, like,

00:17:58.265 --> 00:18:00.425
<v Speaker 1>at the same level but overriding each other.

00:18:00.425 --> 00:18:01.785
<v Speaker 1>So it can be a little bit confusing

00:18:01.785 --> 00:18:03.785
<v Speaker 1>as well. Here, they're both being applied at

00:18:03.785 --> 00:18:04.905
<v Speaker 1>the pod level, though.

00:18:05.945 --> 00:18:07.304
<v Speaker 0>Alright. Got it.

00:18:08.185 --> 00:18:08.905
<v Speaker 0>So

00:18:09.730 --> 00:18:11.970
<v Speaker 0>I guess I could just run through these

00:18:12.450 --> 00:18:14.289
<v Speaker 0>steps on my cluster. Right?

00:18:14.610 --> 00:18:16.770
<v Speaker 1>Yeah. Yeah. Sounds good to It's be nice

00:18:16.770 --> 00:18:18.609
<v Speaker 0>and easy. It's gonna work. And then

00:18:19.010 --> 00:18:19.970
<v Speaker 0>that's it.

00:18:20.289 --> 00:18:21.009
<v Speaker 0>So

00:18:21.250 --> 00:18:22.690
<v Speaker 0>I am running

00:18:24.585 --> 00:18:26.424
<v Speaker 3>on a Mac.

00:18:27.145 --> 00:18:27.784
<v Speaker 3>And

00:18:28.825 --> 00:18:30.425
<v Speaker 3>I still still don't know how to look

00:18:30.425 --> 00:18:31.784
<v Speaker 0>at tabs. There we go.

00:18:34.184 --> 00:18:36.745
<v Speaker 0>So that means that I have

00:18:38.550 --> 00:18:40.870
<v Speaker 0>it's several version of one sixteen. So if

00:18:40.870 --> 00:18:43.190
<v Speaker 0>I'm working with the Docker for Mac Kubernetes,

00:18:43.270 --> 00:18:45.030
<v Speaker 0>that means I need to use the annotation

00:18:45.030 --> 00:18:46.230
<v Speaker 0>based approach. Right?

00:18:47.430 --> 00:18:49.350
<v Speaker 1>Yes. You would you would need to if

00:18:49.350 --> 00:18:51.350
<v Speaker 1>you're using one dot 16 Kubernetes.

00:18:52.230 --> 00:18:52.870
<v Speaker 3>Perfect.

00:18:54.365 --> 00:18:56.365
<v Speaker 3>Well, let's install

00:18:58.445 --> 00:18:59.485
<v Speaker 0>this operator.

00:19:01.645 --> 00:19:03.645
<v Speaker 0>And I appreciate that there's a QPC channel

00:19:03.645 --> 00:19:04.685
<v Speaker 0>apply and not create.

00:19:08.360 --> 00:19:10.440
<v Speaker 0>And this is going to put stuff, I'm

00:19:10.440 --> 00:19:13.240
<v Speaker 0>assuming, in my cube system namespace?

00:19:14.920 --> 00:19:16.440
<v Speaker 2>No. We use it. Yeah.

00:19:17.480 --> 00:19:20.120
<v Speaker 0>Exactly. Yeah. And so you'll just see one

00:19:20.120 --> 00:19:21.960
<v Speaker 1>pod running here, right, because it's a a

00:19:21.960 --> 00:19:22.680
<v Speaker 1>single node

00:19:23.044 --> 00:19:24.965
<v Speaker 1>cluster you have here, presumably.

00:19:25.845 --> 00:19:27.765
<v Speaker 1>So it's a daemon set, so just one

00:19:27.765 --> 00:19:28.884
<v Speaker 1>will be running here.

00:19:30.405 --> 00:19:32.404
<v Speaker 1>One thing you could also do is

00:19:33.365 --> 00:19:35.285
<v Speaker 1>if you well, I guess you can see

00:19:35.285 --> 00:19:36.885
<v Speaker 1>it right there. The other things are created.

00:19:36.885 --> 00:19:37.205
<v Speaker 1>So

00:19:37.770 --> 00:19:40.010
<v Speaker 1>you can see that we have a config

00:19:40.010 --> 00:19:43.130
<v Speaker 1>map, which is for the seccomp pro the

00:19:43.130 --> 00:19:46.090
<v Speaker 1>seccomp operator itself. So, you know, as you

00:19:46.090 --> 00:19:47.210
<v Speaker 1>would want

00:19:47.530 --> 00:19:49.690
<v Speaker 1>with something that is gonna manage your seccomp

00:19:49.690 --> 00:19:51.850
<v Speaker 1>for you, we apply seccomp to it as

00:19:51.850 --> 00:19:53.945
<v Speaker 1>well. So that's what that config map is

00:19:53.945 --> 00:19:56.265
<v Speaker 1>for. Then you'll also see the default profiles

00:19:56.265 --> 00:19:56.905
<v Speaker 1>there,

00:19:57.385 --> 00:19:59.305
<v Speaker 1>which is just a collection

00:19:59.705 --> 00:20:01.465
<v Speaker 1>of profiles that would be,

00:20:02.265 --> 00:20:04.985
<v Speaker 1>we think, universally useful, especially right now when

00:20:04.985 --> 00:20:06.505
<v Speaker 1>people are just kinda getting their feet wet

00:20:06.505 --> 00:20:07.225
<v Speaker 1>with set comp.

00:20:08.400 --> 00:20:10.160
<v Speaker 1>There's some things to try out.

00:20:10.880 --> 00:20:11.840
<v Speaker 1>So yeah.

00:20:12.640 --> 00:20:14.880
<v Speaker 0>Alright. So I guess I could just pop

00:20:14.880 --> 00:20:15.920
<v Speaker 0>this open there and take a look at

00:20:15.920 --> 00:20:18.320
<v Speaker 0>it. Right? Yeah. Go for it. And you're

00:20:18.320 --> 00:20:20.000
<v Speaker 0>gonna be able to tell me what is

00:20:20.000 --> 00:20:22.455
<v Speaker 0>actually going on here. Yeah. We're gonna describe

00:20:22.455 --> 00:20:24.855
<v Speaker 1>every Sense call to you and exactly what

00:20:24.855 --> 00:20:26.375
<v Speaker 1>happens in the current model.

00:20:28.135 --> 00:20:30.215
<v Speaker 0>Well, here's a random pop quiz for you.

00:20:30.215 --> 00:20:31.975
<v Speaker 0>How many Sense calls are there?

00:20:33.175 --> 00:20:35.655
<v Speaker 1>What is it? 200? So is there 300

00:20:35.655 --> 00:20:38.649
<v Speaker 1>yet? I don't think so. There's 200 something.

00:20:38.650 --> 00:20:42.570
<v Speaker 0>Yeah. 200 something. Okay. So very matter then.

00:20:42.570 --> 00:20:45.529
<v Speaker 0>The seccomp operator shifts with his own seccomp

00:20:45.529 --> 00:20:46.489
<v Speaker 0>profile.

00:20:46.570 --> 00:20:47.210
<v Speaker 1>Right.

00:20:47.450 --> 00:20:49.049
<v Speaker 1>Yeah. And and, Sasha,

00:20:49.835 --> 00:20:51.595
<v Speaker 1>I mean, you or you or I could

00:20:51.595 --> 00:20:53.355
<v Speaker 1>go through how we actually there there is

00:20:53.355 --> 00:20:55.435
<v Speaker 1>some, like the net container, I think, is

00:20:55.435 --> 00:20:57.355
<v Speaker 1>kind of interesting how this gets applied. So

00:20:57.355 --> 00:20:59.035
<v Speaker 1>we might wanna look at actually you know,

00:20:59.035 --> 00:21:00.315
<v Speaker 1>there's kind of like a chicken and egg

00:21:00.315 --> 00:21:02.075
<v Speaker 1>thing. Right? Are you using how can the

00:21:02.075 --> 00:21:03.995
<v Speaker 1>seccomp operator, like, do the things it needs

00:21:03.995 --> 00:21:04.395
<v Speaker 1>to do

00:21:05.040 --> 00:21:07.840
<v Speaker 1>with the seccomp profile if it doesn't exist

00:21:07.840 --> 00:21:09.520
<v Speaker 1>yet to put the seccomp profile there? You

00:21:09.520 --> 00:21:10.960
<v Speaker 1>know, like, there there's a chicken egg thing

00:21:10.960 --> 00:21:11.840
<v Speaker 1>we can go through

00:21:12.320 --> 00:21:13.840
<v Speaker 1>in a little bit. But,

00:21:14.560 --> 00:21:15.920
<v Speaker 1>Sasha, do you wanna give kind of, like,

00:21:15.920 --> 00:21:18.640
<v Speaker 1>a rundown of what this profile has here

00:21:18.640 --> 00:21:20.805
<v Speaker 1>just like the different sections of the the

00:21:20.805 --> 00:21:22.965
<v Speaker 1>JSON here? Yeah. First of all, we have

00:21:22.965 --> 00:21:25.445
<v Speaker 2>our default action. So we just want to

00:21:25.445 --> 00:21:27.765
<v Speaker 2>throw an arrow in any case if anyone

00:21:28.085 --> 00:21:31.045
<v Speaker 2>any of the SIS calls which are allowed.

00:21:31.045 --> 00:21:33.480
<v Speaker 2>So this is the list down there. Any

00:21:33.480 --> 00:21:35.400
<v Speaker 2>other Syscalls should be forbidden.

00:21:35.880 --> 00:21:37.800
<v Speaker 2>And then we have our architecture. So we

00:21:37.800 --> 00:21:40.520
<v Speaker 2>don't have support for something like MIPS or

00:21:40.520 --> 00:21:42.360
<v Speaker 2>s three ninety or something like this. So

00:21:42.360 --> 00:21:45.159
<v Speaker 2>we just support x x x eight

00:21:45.560 --> 00:21:48.195
<v Speaker 2>architectures for now. And then you have a,

00:21:48.195 --> 00:21:49.955
<v Speaker 2>yeah, a list of SIS calls which are

00:21:49.955 --> 00:21:51.555
<v Speaker 2>allowed. And if you go a little bit

00:21:51.555 --> 00:21:53.555
<v Speaker 2>more down, can you go down to the

00:21:53.555 --> 00:21:55.235
<v Speaker 2>list? And there should be also an action

00:21:55.235 --> 00:21:57.315
<v Speaker 2>related to those SIS calls. Yes. So it's

00:21:57.315 --> 00:21:58.195
<v Speaker 2>the action allow.

00:21:59.250 --> 00:22:01.490
<v Speaker 2>And and those SYS calls are allowed. We

00:22:01.490 --> 00:22:02.770
<v Speaker 2>could also do it the other way around.

00:22:02.770 --> 00:22:04.850
<v Speaker 2>Right? So we could allow all SYS calls

00:22:05.010 --> 00:22:07.570
<v Speaker 2>and and deny some of them. But, yeah,

00:22:07.570 --> 00:22:09.250
<v Speaker 2>if there's a new SYS call coming into

00:22:09.250 --> 00:22:11.090
<v Speaker 2>a system, then we probably would allow it.

00:22:11.025 --> 00:22:13.025
<v Speaker 2>So it's not not the intention, not the

00:22:13.025 --> 00:22:15.505
<v Speaker 2>right security approach from my from our perspective

00:22:15.505 --> 00:22:16.225
<v Speaker 2>here.

00:22:16.705 --> 00:22:19.025
<v Speaker 2>And now we have a little list of

00:22:19.025 --> 00:22:21.665
<v Speaker 2>SYS calls, and some of them are necessary

00:22:21.665 --> 00:22:23.825
<v Speaker 2>to actually spawn the process. For example, if

00:22:23.825 --> 00:22:25.184
<v Speaker 2>you look at execve,

00:22:25.745 --> 00:22:26.865
<v Speaker 2>if we wouldn't

00:22:27.240 --> 00:22:30.120
<v Speaker 2>be allowed to run execve,

00:22:30.120 --> 00:22:33.400
<v Speaker 2>then we wouldn't be allowed to actually spawn

00:22:33.400 --> 00:22:34.759
<v Speaker 2>any process.

00:22:34.840 --> 00:22:37.799
<v Speaker 2>So run c or the underlying container runtime

00:22:37.880 --> 00:22:39.960
<v Speaker 2>wouldn't be

00:22:39.255 --> 00:22:41.335
<v Speaker 2>allowed to actually execute

00:22:42.055 --> 00:22:43.575
<v Speaker 2>the workload process.

00:22:43.575 --> 00:22:46.054
<v Speaker 2>So this is something we have to

00:22:46.455 --> 00:22:48.455
<v Speaker 2>really keep keep in mind. And there's also

00:22:48.455 --> 00:22:51.495
<v Speaker 2>something like uname down below, probably. Let me

00:22:51.655 --> 00:22:53.735
<v Speaker 2>it's just a rough guess. Yeah. There's uname.

00:22:54.019 --> 00:22:55.779
<v Speaker 2>And this is something which is required, for

00:22:55.779 --> 00:22:57.460
<v Speaker 2>example, for the Go runtime. So we wrote

00:22:57.460 --> 00:22:58.579
<v Speaker 2>a Go application,

00:22:58.659 --> 00:23:00.980
<v Speaker 2>and when we start this Go application, then

00:23:00.980 --> 00:23:02.980
<v Speaker 2>it does something like a u name to

00:23:02.980 --> 00:23:03.859
<v Speaker 2>look up some,

00:23:04.259 --> 00:23:06.500
<v Speaker 2>yeah, resources on which system we are running

00:23:06.500 --> 00:23:08.475
<v Speaker 2>on and stuff like that. So the runtime

00:23:08.475 --> 00:23:10.075
<v Speaker 2>has a little garbage collector

00:23:10.715 --> 00:23:13.275
<v Speaker 2>running in in the background, and it's necessary

00:23:13.275 --> 00:23:15.275
<v Speaker 2>to run the uname. If we, for example,

00:23:15.275 --> 00:23:17.514
<v Speaker 2>would deploy something like a c binary,

00:23:18.235 --> 00:23:20.475
<v Speaker 2>which is statically linked, then we probably would

00:23:20.475 --> 00:23:22.630
<v Speaker 2>not need uname at all, or we wouldn't

00:23:22.630 --> 00:23:24.790
<v Speaker 2>need to use calls like read or something

00:23:24.790 --> 00:23:25.509
<v Speaker 2>like this.

00:23:26.630 --> 00:23:27.190
<v Speaker 2>And

00:23:27.670 --> 00:23:30.550
<v Speaker 2>it's what it wasn't that easy to craft

00:23:30.550 --> 00:23:31.429
<v Speaker 2>the profile,

00:23:31.510 --> 00:23:34.470
<v Speaker 2>but we kinda recorded the SIS calls. And

00:23:34.485 --> 00:23:36.645
<v Speaker 2>even after recording the SIS calls, we just

00:23:36.645 --> 00:23:38.245
<v Speaker 2>saw that, okay, there are some SIS calls

00:23:38.245 --> 00:23:38.965
<v Speaker 2>missing.

00:23:39.365 --> 00:23:39.845
<v Speaker 2>And

00:23:40.405 --> 00:23:42.565
<v Speaker 2>this also kinda influences how we develop the

00:23:42.565 --> 00:23:44.005
<v Speaker 2>application. Right? So if we want to add

00:23:44.005 --> 00:23:46.965
<v Speaker 2>now new features which need new SIS calls,

00:23:46.965 --> 00:23:49.125
<v Speaker 2>then we indirectly have to adapt this the

00:23:49.125 --> 00:23:52.299
<v Speaker 2>second profile as well. And this can be

00:23:52.299 --> 00:23:53.099
<v Speaker 2>kinda

00:23:53.100 --> 00:23:53.899
<v Speaker 2>pain,

00:23:54.700 --> 00:23:55.580
<v Speaker 2>but

00:23:55.740 --> 00:23:58.460
<v Speaker 2>yeah. I mean, it's really a security driven

00:23:58.460 --> 00:24:01.580
<v Speaker 2>development approach, and I really really appreciate that.

00:24:01.740 --> 00:24:03.740
<v Speaker 1>Yeah. So, Rasha, I think you pointed out

00:24:03.740 --> 00:24:06.235
<v Speaker 1>something really important there about some of these

00:24:06.235 --> 00:24:09.434
<v Speaker 1>syscalls are, like, kind of unrelated to the

00:24:09.434 --> 00:24:12.315
<v Speaker 1>actual process that's eventually getting run. Right? Some

00:24:12.315 --> 00:24:13.915
<v Speaker 1>of them are specific to it running in

00:24:13.915 --> 00:24:15.274
<v Speaker 1>a container runtime,

00:24:15.595 --> 00:24:16.235
<v Speaker 1>etcetera,

00:24:16.635 --> 00:24:18.794
<v Speaker 1>which I think really emphasizes something we were

00:24:18.794 --> 00:24:20.380
<v Speaker 1>talking about before we started the stream about

00:24:20.380 --> 00:24:22.540
<v Speaker 1>wanting to be able to record the profiles

00:24:22.540 --> 00:24:24.700
<v Speaker 1>using the set comp operator.

00:24:25.500 --> 00:24:27.420
<v Speaker 1>Because if you were just, you know, looking

00:24:27.420 --> 00:24:28.940
<v Speaker 1>at this binary by itself,

00:24:29.340 --> 00:24:31.500
<v Speaker 1>depending on, you know, how you are running

00:24:31.500 --> 00:24:33.660
<v Speaker 1>it on your machine, you may not need

00:24:33.660 --> 00:24:35.705
<v Speaker 1>all of these different calls here or you

00:24:35.705 --> 00:24:37.625
<v Speaker 1>may need some that aren't present here, etcetera.

00:24:37.625 --> 00:24:38.105
<v Speaker 1>So,

00:24:38.505 --> 00:24:40.105
<v Speaker 1>you know, developing one

00:24:40.425 --> 00:24:43.145
<v Speaker 1>for the specific context you're running in

00:24:43.785 --> 00:24:44.585
<v Speaker 1>can be

00:24:45.065 --> 00:24:46.105
<v Speaker 1>a bit challenging,

00:24:46.745 --> 00:24:48.745
<v Speaker 1>which also gets introduced, right, if you want

00:24:48.745 --> 00:24:50.880
<v Speaker 1>to for instance, I I work on another

00:24:50.880 --> 00:24:53.279
<v Speaker 1>open source project for, like, my day job,

00:24:53.279 --> 00:24:53.759
<v Speaker 1>and

00:24:54.159 --> 00:24:56.000
<v Speaker 1>we we did a stream a while back

00:24:56.000 --> 00:24:58.879
<v Speaker 1>of crafting a set comp profile for it.

00:24:59.840 --> 00:25:02.880
<v Speaker 1>It's a little bit difficult to kind of,

00:25:02.880 --> 00:25:04.715
<v Speaker 1>like, ship a set comp profile with your

00:25:04.715 --> 00:25:06.714
<v Speaker 1>thing that's gonna be, like, generic. Right?

00:25:07.355 --> 00:25:09.274
<v Speaker 1>Because you don't know the context that people

00:25:09.274 --> 00:25:10.394
<v Speaker 1>are gonna be running

00:25:10.955 --> 00:25:13.595
<v Speaker 1>your your application in. You don't know the

00:25:13.595 --> 00:25:16.340
<v Speaker 1>underlying container runtime. You don't know a variety

00:25:16.340 --> 00:25:17.540
<v Speaker 1>of different things. You don't even know if

00:25:17.540 --> 00:25:19.460
<v Speaker 1>they're running it in Kubernetes perhaps.

00:25:20.020 --> 00:25:23.140
<v Speaker 1>So shipping a seccomp profile alongside of it

00:25:23.540 --> 00:25:26.100
<v Speaker 1>is difficult. But we think that just as,

00:25:26.100 --> 00:25:26.740
<v Speaker 1>you know,

00:25:27.620 --> 00:25:28.580
<v Speaker 1>you install

00:25:28.755 --> 00:25:30.355
<v Speaker 1>let's say, you know, like a service mesh

00:25:30.355 --> 00:25:32.115
<v Speaker 1>that has, like, security contacts on some of

00:25:32.115 --> 00:25:33.635
<v Speaker 1>the pods that are running, we think you

00:25:33.635 --> 00:25:35.635
<v Speaker 1>should be able to ship a seccomp profile

00:25:35.635 --> 00:25:37.155
<v Speaker 1>with that, and that should be able to

00:25:37.155 --> 00:25:37.635
<v Speaker 1>work.

00:25:38.355 --> 00:25:40.115
<v Speaker 1>And, you know, if if for some reason

00:25:40.115 --> 00:25:41.875
<v Speaker 1>it just absolutely cannot, then we should have

00:25:41.875 --> 00:25:43.235
<v Speaker 1>an easy out for that. Right?

00:25:43.830 --> 00:25:45.590
<v Speaker 1>So that's another area where we'd like to

00:25:45.590 --> 00:25:47.909
<v Speaker 1>make this a a more seamless process.

00:25:50.549 --> 00:25:53.590
<v Speaker 0>Okay. Right. It's it's just it's starting to

00:25:53.590 --> 00:25:55.990
<v Speaker 0>click. I'm getting there. So I think the

00:25:55.990 --> 00:25:58.470
<v Speaker 0>the first question I kind of got is

00:25:59.725 --> 00:26:02.205
<v Speaker 0>we've just deployed this operator now. What is

00:26:02.205 --> 00:26:02.764
<v Speaker 0>the

00:26:03.325 --> 00:26:04.924
<v Speaker 0>what is the process when I get this

00:26:04.924 --> 00:26:07.325
<v Speaker 0>wrong? Like, say, go and run a container

00:26:07.565 --> 00:26:08.604
<v Speaker 0>a pod here,

00:26:09.325 --> 00:26:11.164
<v Speaker 0>which has a profile and is trying to

00:26:11.610 --> 00:26:14.250
<v Speaker 0>execute as this pod doesn't exist. What kind

00:26:14.250 --> 00:26:16.490
<v Speaker 0>of errors, what logs am I getting back?

00:26:16.490 --> 00:26:19.130
<v Speaker 0>Is there something to help me understand what's

00:26:19.130 --> 00:26:19.850
<v Speaker 0>going on?

00:26:23.210 --> 00:26:24.410
<v Speaker 2>Yeah. So

00:26:24.635 --> 00:26:27.115
<v Speaker 2>the first thing during development of such a

00:26:27.115 --> 00:26:29.035
<v Speaker 2>profile could be to put the

00:26:30.155 --> 00:26:31.755
<v Speaker 2>action not to

00:26:32.475 --> 00:26:33.355
<v Speaker 2>arrow,

00:26:33.595 --> 00:26:34.475
<v Speaker 2>but to

00:26:34.715 --> 00:26:37.355
<v Speaker 2>its section. It's a it's a convection lock.

00:26:37.355 --> 00:26:40.509
<v Speaker 2>Right? Mhmm. And which locks the

00:26:40.830 --> 00:26:43.950
<v Speaker 2>error messages into the audit lock. And

00:26:44.350 --> 00:26:46.669
<v Speaker 2>the audit lock is something so it's audit

00:26:46.669 --> 00:26:48.750
<v Speaker 2>d, and audit d is not available on

00:26:48.750 --> 00:26:50.269
<v Speaker 2>every system we have to admit. And it's

00:26:50.269 --> 00:26:53.230
<v Speaker 2>also configured different differently on on systems.

00:26:53.755 --> 00:26:54.315
<v Speaker 2>But

00:26:55.115 --> 00:26:58.635
<v Speaker 2>for many default distributions like Ubuntu, for example,

00:26:58.635 --> 00:27:01.115
<v Speaker 2>then they would did that would result in

00:27:01.115 --> 00:27:03.674
<v Speaker 2>logging the action. And this is call this

00:27:03.914 --> 00:27:05.275
<v Speaker 2>is call number you have to look up.

00:27:05.275 --> 00:27:07.195
<v Speaker 2>This is call name then if you just

00:27:07.195 --> 00:27:07.755
<v Speaker 2>get a number.

00:27:08.780 --> 00:27:11.100
<v Speaker 0>Alright. I've got an idea. So

00:27:11.659 --> 00:27:13.980
<v Speaker 0>before I go through my weird idea, let's

00:27:13.980 --> 00:27:16.140
<v Speaker 0>pop open the other config map. Right? So

00:27:16.140 --> 00:27:17.580
<v Speaker 0>we got the default one.

00:27:17.820 --> 00:27:20.780
<v Speaker 0>So the idea behind this default one then,

00:27:20.780 --> 00:27:22.765
<v Speaker 0>and I'll just put words in your mouth

00:27:22.765 --> 00:27:24.765
<v Speaker 0>and you can correct me, is that this

00:27:24.765 --> 00:27:28.445
<v Speaker 0>should allow most processes to run without so

00:27:28.445 --> 00:27:29.965
<v Speaker 0>I guess it's it's blocking

00:27:31.165 --> 00:27:33.485
<v Speaker 0>the more extreme or dangerous this calls. Is

00:27:33.485 --> 00:27:33.885
<v Speaker 0>that it's

00:27:34.525 --> 00:27:35.405
<v Speaker 0>is that what it does?

00:27:36.410 --> 00:27:38.730
<v Speaker 2>I mean, this this profile and we wanted

00:27:38.730 --> 00:27:40.890
<v Speaker 2>to provide some default profiles for some common

00:27:40.890 --> 00:27:41.690
<v Speaker 2>applications.

00:27:41.770 --> 00:27:42.809
<v Speaker 2>And, for example,

00:27:43.210 --> 00:27:44.730
<v Speaker 2>this is for NGINX,

00:27:44.730 --> 00:27:46.809
<v Speaker 2>I think so. We only have one for

00:27:46.809 --> 00:27:47.770
<v Speaker 2>NGINX right now.

00:27:49.034 --> 00:27:51.115
<v Speaker 0>Oh, okay. I think I misunderstood that. I

00:27:51.115 --> 00:27:53.595
<v Speaker 0>thought this was, like, a default profile that

00:27:53.595 --> 00:27:56.554
<v Speaker 0>would, like, just block really dangerous syscalls and

00:27:56.554 --> 00:27:57.914
<v Speaker 0>let everything else do.

00:27:58.394 --> 00:28:01.914
<v Speaker 2>Oh, no. No. No. Most container runtimes already

00:28:01.914 --> 00:28:03.195
<v Speaker 2>ship their default profile.

00:28:03.640 --> 00:28:04.200
<v Speaker 2>But

00:28:04.520 --> 00:28:05.880
<v Speaker 2>on the other hand, we have to say

00:28:05.880 --> 00:28:08.520
<v Speaker 2>that the default profile in Kubernetes is unconfined,

00:28:08.520 --> 00:28:10.679
<v Speaker 2>so it's not applying seccomp at all.

00:28:11.160 --> 00:28:14.280
<v Speaker 2>But it's the profile called runtime slash default

00:28:14.280 --> 00:28:16.600
<v Speaker 2>or the duplicated profile is docker slash default.

00:28:17.545 --> 00:28:19.305
<v Speaker 1>Yeah. That that's a really good point. So,

00:28:19.305 --> 00:28:22.185
<v Speaker 1>like, right now, without the set comp operator

00:28:22.185 --> 00:28:24.825
<v Speaker 1>at all, you can use the underlying container

00:28:24.825 --> 00:28:27.625
<v Speaker 1>runtime default profile, which does exactly what you're

00:28:27.625 --> 00:28:31.065
<v Speaker 1>talking about, David, that it blocks super dangerous

00:28:31.065 --> 00:28:31.225
<v Speaker 1>things.

00:28:32.920 --> 00:28:35.480
<v Speaker 1>Honestly, like, it, you know, it that is

00:28:35.480 --> 00:28:37.640
<v Speaker 1>enhanced security. It doesn't really go a super

00:28:37.640 --> 00:28:39.799
<v Speaker 1>long way for for preventing things

00:28:40.200 --> 00:28:42.360
<v Speaker 1>because, right, it it doesn't want to

00:28:42.760 --> 00:28:45.755
<v Speaker 1>break your your functionality. Right? But that is

00:28:45.755 --> 00:28:47.515
<v Speaker 1>definitely the first step. I'm glad you pointed

00:28:47.515 --> 00:28:49.115
<v Speaker 1>out. That's definitely the first step to using

00:28:49.115 --> 00:28:51.275
<v Speaker 1>set comp just, you know, using the runtime

00:28:51.275 --> 00:28:53.275
<v Speaker 1>default profile. And if you're seeing issues, then

00:28:53.275 --> 00:28:55.755
<v Speaker 1>you probably have a fairly privileged workload that

00:28:55.755 --> 00:28:57.034
<v Speaker 1>you're trying to run there.

00:28:58.075 --> 00:28:58.554
<v Speaker 0>Alright.

00:28:59.130 --> 00:29:00.250
<v Speaker 0>I'm curious.

00:29:00.570 --> 00:29:02.490
<v Speaker 0>What happens if I don't allow the access

00:29:02.490 --> 00:29:03.370
<v Speaker 0>to this call?

00:29:05.210 --> 00:29:07.770
<v Speaker 1>It it depends. It depends on the application.

00:29:07.770 --> 00:29:10.330
<v Speaker 1>Right? So so this is another good point.

00:29:10.330 --> 00:29:10.809
<v Speaker 1>So

00:29:11.290 --> 00:29:13.450
<v Speaker 1>when recording this calls, it's not like when

00:29:13.450 --> 00:29:15.295
<v Speaker 1>you start a process that it just makes,

00:29:15.295 --> 00:29:17.215
<v Speaker 1>like, every syscall ever. You know, if it

00:29:17.295 --> 00:29:18.895
<v Speaker 1>especially if it's a long running process like

00:29:18.895 --> 00:29:21.055
<v Speaker 1>a like an operator. So the seccomp operator

00:29:21.055 --> 00:29:22.415
<v Speaker 1>is a great example of this.

00:29:23.295 --> 00:29:25.775
<v Speaker 1>You know, depending on input it receives, it

00:29:25.775 --> 00:29:27.935
<v Speaker 1>might make different syscalls. So you can't just,

00:29:27.935 --> 00:29:29.940
<v Speaker 1>you know, like, execute and be like, alright.

00:29:29.940 --> 00:29:32.660
<v Speaker 1>I know everything that's running. You technically should,

00:29:32.660 --> 00:29:34.180
<v Speaker 1>you know, have to go through, like, every

00:29:34.180 --> 00:29:36.419
<v Speaker 1>path to be, like, totally sure

00:29:37.140 --> 00:29:38.340
<v Speaker 1>to to know

00:29:38.660 --> 00:29:41.620
<v Speaker 1>not literally every path. But, you know, basically,

00:29:41.620 --> 00:29:43.060
<v Speaker 1>the idea is that you need to have

00:29:43.060 --> 00:29:45.255
<v Speaker 1>some real world use of it to be

00:29:45.255 --> 00:29:47.655
<v Speaker 1>able to understand what what calls it would

00:29:47.655 --> 00:29:50.935
<v Speaker 1>make, which is a great case for recording,

00:29:50.935 --> 00:29:54.135
<v Speaker 1>right, because you can just monitor something in

00:29:54.135 --> 00:29:56.135
<v Speaker 1>its normal operations and and see what happens

00:29:56.135 --> 00:29:56.455
<v Speaker 1>there.

00:29:58.299 --> 00:29:59.099
<v Speaker 0>Alright.

00:29:59.580 --> 00:30:00.379
<v Speaker 0>Awesome.

00:30:00.940 --> 00:30:02.379
<v Speaker 0>I'm feeling brave now.

00:30:02.700 --> 00:30:03.740
<v Speaker 2>But,

00:30:03.740 --> 00:30:06.220
<v Speaker 2>for example, exit is pretty interesting because it

00:30:06.220 --> 00:30:07.820
<v Speaker 2>would mean that the process is not allowed

00:30:07.820 --> 00:30:09.100
<v Speaker 2>to terminate itself.

00:30:10.165 --> 00:30:12.245
<v Speaker 0>That's what I was wondering. Like, what if

00:30:12.245 --> 00:30:14.485
<v Speaker 0>it what's the what if it's finished?

00:30:14.725 --> 00:30:16.725
<v Speaker 2>Yeah. Yeah. And it this could also this

00:30:16.725 --> 00:30:19.365
<v Speaker 2>could result in that the process just hangs

00:30:19.365 --> 00:30:19.765
<v Speaker 2>around.

00:30:21.300 --> 00:30:23.140
<v Speaker 0>I mean Wouldn't if it tried to make

00:30:23.140 --> 00:30:24.500
<v Speaker 1>a sit well, it depends I guess it

00:30:24.500 --> 00:30:26.020
<v Speaker 1>depends on what your policy is. But if

00:30:26.020 --> 00:30:26.580
<v Speaker 1>it's,

00:30:27.060 --> 00:30:29.540
<v Speaker 1>you know, an error policy, I believe that

00:30:29.540 --> 00:30:32.180
<v Speaker 1>the process is gonna get killed. So maybe

00:30:32.180 --> 00:30:35.745
<v Speaker 1>you're, like, effectively exiting there anyway. Like, maybe

00:30:35.745 --> 00:30:37.905
<v Speaker 1>we should just remove the exit call from

00:30:37.905 --> 00:30:39.985
<v Speaker 1>from all set comp profiles and then just

00:30:39.985 --> 00:30:41.585
<v Speaker 1>have it killed when it makes it.

00:30:42.465 --> 00:30:44.065
<v Speaker 1>But that that's a funny one to look

00:30:44.065 --> 00:30:45.985
<v Speaker 1>at for sure. Yeah. So if the default

00:30:45.985 --> 00:30:48.465
<v Speaker 0>action is to audit and an application wants

00:30:48.465 --> 00:30:50.820
<v Speaker 0>to exit, is it it's just gonna live

00:30:50.820 --> 00:30:51.539
<v Speaker 0>forever.

00:30:52.340 --> 00:30:53.700
<v Speaker 1>No. No. It would it would be if

00:30:53.700 --> 00:30:55.779
<v Speaker 1>the default action was to audit, it would

00:30:55.779 --> 00:30:57.700
<v Speaker 1>log, then the exit call is made and

00:30:57.700 --> 00:30:59.940
<v Speaker 1>allow it to actually exit. So it's not

00:31:00.020 --> 00:31:01.940
<v Speaker 1>yeah. It doesn't, like, it doesn't prohibit it

00:31:01.940 --> 00:31:02.820
<v Speaker 1>from happening.

00:31:03.059 --> 00:31:03.380
<v Speaker 0>Okay.

00:31:03.885 --> 00:31:05.085
<v Speaker 0>Cool. There we go.

00:31:05.645 --> 00:31:07.805
<v Speaker 0>Let's deploy NGINX then. Is that the is

00:31:07.805 --> 00:31:09.005
<v Speaker 0>that the next step here?

00:31:09.485 --> 00:31:12.765
<v Speaker 0>Yeah. Alright. So if I just do this

00:31:12.765 --> 00:31:15.325
<v Speaker 0>the really hacky way and then we edit

00:31:15.325 --> 00:31:15.565
<v Speaker 0>it,

00:31:16.320 --> 00:31:18.159
<v Speaker 0>We can add the profile. Or is there

00:31:18.159 --> 00:31:20.480
<v Speaker 0>something on the documentation here that's gonna make

00:31:20.480 --> 00:31:20.720
<v Speaker 0>this

00:31:23.600 --> 00:31:24.320
<v Speaker 0>okay.

00:31:24.480 --> 00:31:26.159
<v Speaker 0>We'll do it this way. I'll follow the

00:31:26.159 --> 00:31:27.039
<v Speaker 0>documentation,

00:31:27.200 --> 00:31:28.639
<v Speaker 0>and then it could says it.

00:31:31.919 --> 00:31:33.284
<v Speaker 3>So Internet with

00:31:33.285 --> 00:31:33.925
<v Speaker 3>that's not

00:31:37.685 --> 00:31:39.285
<v Speaker 2>Oh, the namespace

00:31:39.285 --> 00:31:41.285
<v Speaker 2>have to be has to be changed, I

00:31:41.285 --> 00:31:43.445
<v Speaker 2>think so. Also, the config with name.

00:31:46.010 --> 00:31:48.090
<v Speaker 0>Oh, so this is the one nineteen syntax,

00:31:48.090 --> 00:31:50.490
<v Speaker 0>actually. So what we're saying is I can't

00:31:50.490 --> 00:31:52.409
<v Speaker 0>use that, and I I I need to

00:31:52.409 --> 00:31:53.450
<v Speaker 0>use this one.

00:31:54.010 --> 00:31:56.090
<v Speaker 0>So I can just copy the annotation.

00:32:01.315 --> 00:32:04.355
<v Speaker 0>So local host, I'm assuming the space operator

00:32:04.355 --> 00:32:06.755
<v Speaker 0>is the operator. My namespace is going to

00:32:06.755 --> 00:32:07.234
<v Speaker 0>be,

00:32:08.355 --> 00:32:09.794
<v Speaker 0>like, operator

00:32:10.914 --> 00:32:12.034
<v Speaker 0>and

00:32:13.220 --> 00:32:14.340
<v Speaker 0>default

00:32:14.500 --> 00:32:15.620
<v Speaker 0>profiles

00:32:16.420 --> 00:32:17.299
<v Speaker 0>NGINX.

00:32:17.540 --> 00:32:20.020
<v Speaker 2>It's NGINX one nineteen, the other one.

00:32:26.075 --> 00:32:27.835
<v Speaker 0>So let so if I wanted to get

00:32:27.835 --> 00:32:29.835
<v Speaker 0>that, that's just the details from

00:32:30.875 --> 00:32:32.395
<v Speaker 0>that I just described

00:32:32.795 --> 00:32:34.155
<v Speaker 3>on tag map.

00:32:35.515 --> 00:32:36.235
<v Speaker 3>Default.

00:32:41.580 --> 00:32:42.219
<v Speaker 0>Alright.

00:32:42.620 --> 00:32:43.259
<v Speaker 0>Just

00:32:49.899 --> 00:32:51.340
<v Speaker 0>trying to make sure that I know how

00:32:51.340 --> 00:32:53.684
<v Speaker 0>that is built up. So this is the

00:32:53.684 --> 00:32:54.804
<v Speaker 0>key here.

00:32:56.085 --> 00:32:58.485
<v Speaker 0>The namespace of the default profiles is coming

00:32:58.485 --> 00:33:00.884
<v Speaker 0>from the names. That's local host operator

00:33:01.445 --> 00:33:02.645
<v Speaker 0>namespace

00:33:02.885 --> 00:33:05.285
<v Speaker 2>Yeah. Contact map name, and then the key

00:33:05.285 --> 00:33:06.885
<v Speaker 0>within the contact map. Yeah.

00:33:07.340 --> 00:33:09.660
<v Speaker 2>So the reason for that long path was

00:33:09.660 --> 00:33:12.220
<v Speaker 2>to not being able to override the second

00:33:12.220 --> 00:33:14.220
<v Speaker 2>profiles from a different namespace if I don't

00:33:14.220 --> 00:33:15.260
<v Speaker 2>have access to it

00:33:15.740 --> 00:33:18.460
<v Speaker 2>and things like that to have a security

00:33:18.460 --> 00:33:19.340
<v Speaker 2>from yeah.

00:33:19.915 --> 00:33:20.635
<v Speaker 2>As

00:33:21.195 --> 00:33:23.515
<v Speaker 2>the parsing is the security pattern here.

00:33:24.155 --> 00:33:26.475
<v Speaker 1>Yeah. And you can also as we'll see

00:33:26.475 --> 00:33:29.035
<v Speaker 1>later on, you can run the operator itself

00:33:29.035 --> 00:33:30.475
<v Speaker 1>in a single namespace.

00:33:31.435 --> 00:33:33.515
<v Speaker 1>Basically, only watching for config maps in a

00:33:33.515 --> 00:33:35.160
<v Speaker 1>namespace. So you could say, like, all of

00:33:35.160 --> 00:33:36.840
<v Speaker 1>my config maps will always be in the

00:33:36.840 --> 00:33:38.680
<v Speaker 1>set comp operator namespace, and I don't want

00:33:38.680 --> 00:33:41.080
<v Speaker 1>people with access to other namespaces and the

00:33:41.080 --> 00:33:43.160
<v Speaker 1>ability to create config maps. Go to do

00:33:43.160 --> 00:33:43.640
<v Speaker 1>that.

00:33:44.120 --> 00:33:46.680
<v Speaker 1>That could become less relevant as one of

00:33:46.680 --> 00:33:48.840
<v Speaker 1>the things we're exploring right now is creating

00:33:48.840 --> 00:33:50.360
<v Speaker 1>a set comp CRD

00:33:50.684 --> 00:33:52.284
<v Speaker 1>where you have a specific type that you

00:33:52.284 --> 00:33:54.205
<v Speaker 1>could grant our back on. So there's kind

00:33:54.205 --> 00:33:55.884
<v Speaker 1>of like a trade off, right, because

00:33:56.764 --> 00:33:58.764
<v Speaker 1>using a config map is something people are

00:33:58.764 --> 00:34:01.004
<v Speaker 1>already familiar with and know how to structure.

00:34:01.644 --> 00:34:03.965
<v Speaker 1>But you have unstructured data in there now.

00:34:03.965 --> 00:34:05.485
<v Speaker 1>Right? It's just like a bag of JSON

00:34:05.940 --> 00:34:08.179
<v Speaker 1>that that's not getting validated on creation.

00:34:08.579 --> 00:34:11.940
<v Speaker 1>And you can't apply our back specifically for

00:34:12.099 --> 00:34:13.619
<v Speaker 1>you know, you could use OPA or something

00:34:13.619 --> 00:34:14.980
<v Speaker 1>to write policies, but

00:34:15.300 --> 00:34:17.380
<v Speaker 1>you can apply our back to say, like,

00:34:17.380 --> 00:34:19.940
<v Speaker 1>you can't create set comp config maps. Right?

00:34:19.940 --> 00:34:21.965
<v Speaker 1>You can only say, you can't create config

00:34:21.965 --> 00:34:23.965
<v Speaker 1>maps or something like that, which, obviously, those

00:34:23.965 --> 00:34:25.565
<v Speaker 1>are used for many different things. You may

00:34:25.565 --> 00:34:26.765
<v Speaker 1>not want to do that.

00:34:27.405 --> 00:34:30.205
<v Speaker 0>Is there a plan to introduce a CID

00:34:30.205 --> 00:34:31.645
<v Speaker 0>in future versions?

00:34:31.885 --> 00:34:33.965
<v Speaker 1>Yeah. There's actually a PR open right now,

00:34:33.965 --> 00:34:35.650
<v Speaker 1>which I definitely wanna give the person a

00:34:35.650 --> 00:34:37.969
<v Speaker 1>shout out. So, Sasha, I didn't remember their

00:34:37.969 --> 00:34:38.610
<v Speaker 1>name.

00:34:38.850 --> 00:34:40.370
<v Speaker 1>If you want to drop it. Colleen. Yeah.

00:34:40.370 --> 00:34:43.010
<v Speaker 1>Colleen. So she's been working on that, and

00:34:43.010 --> 00:34:45.170
<v Speaker 1>and there's a PR open on the repo.

00:34:45.170 --> 00:34:47.614
<v Speaker 1>Folks wanna kinda, like, weigh in on that.

00:34:47.614 --> 00:34:49.614
<v Speaker 1>It's it's a fairly straightforward implementation,

00:34:49.614 --> 00:34:52.734
<v Speaker 1>right, because there's already a a defined, like,

00:34:52.734 --> 00:34:55.614
<v Speaker 1>API for a seccomp profile. So it's kind

00:34:55.614 --> 00:34:57.935
<v Speaker 1>of just, like, adding that in. But there

00:34:57.935 --> 00:34:59.535
<v Speaker 1>are a couple of, you know, like, decisions

00:34:59.535 --> 00:35:01.680
<v Speaker 1>about, you know, how we want that structured,

00:35:01.680 --> 00:35:03.120
<v Speaker 1>if you wanted to be able to put

00:35:03.120 --> 00:35:06.160
<v Speaker 1>multiple in one CRD or, you know, etcetera.

00:35:06.880 --> 00:35:09.520
<v Speaker 1>So definitely, people are welcome to weigh in

00:35:09.520 --> 00:35:10.240
<v Speaker 1>on that.

00:35:12.880 --> 00:35:14.640
<v Speaker 0>Awesome. I'm looking forward to playing with that.

00:35:16.085 --> 00:35:17.045
<v Speaker 3>So

00:35:17.045 --> 00:35:18.645
<v Speaker 3>what was I doing? We were gonna apply

00:35:18.645 --> 00:35:20.645
<v Speaker 0>this into the next platform. There we go.

00:35:21.924 --> 00:35:23.765
<v Speaker 0>That's my problem with these streams. Was that

00:35:23.765 --> 00:35:25.285
<v Speaker 0>I just have too many random thoughts in

00:35:25.285 --> 00:35:26.964
<v Speaker 0>my head, and I just digress far too

00:35:26.964 --> 00:35:28.484
<v Speaker 0>much from what I'm actually supposed to be

00:35:28.484 --> 00:35:28.724
<v Speaker 0>doing.

00:35:29.730 --> 00:35:31.490
<v Speaker 1>That's how you end up talking about interesting

00:35:31.490 --> 00:35:32.530
<v Speaker 1>stuff, though. Right?

00:35:32.930 --> 00:35:34.210
<v Speaker 0>I I hope so.

00:35:35.490 --> 00:35:37.810
<v Speaker 0>I certainly find that interesting. That's for sure.

00:35:37.810 --> 00:35:39.650
<v Speaker 1>It's definitely more fun for the people on

00:35:39.650 --> 00:35:40.370
<v Speaker 1>the stream.

00:35:41.330 --> 00:35:44.204
<v Speaker 0>Cool. I'm glad. I'm glad. So

00:35:44.204 --> 00:35:46.365
<v Speaker 0>we have a test part now

00:35:46.365 --> 00:35:48.125
<v Speaker 0>that is running with the

00:35:48.605 --> 00:35:51.805
<v Speaker 0>engine x profile based on the annotation.

00:35:53.565 --> 00:35:56.125
<v Speaker 0>Let's just Nice. Let me just check then.

00:35:56.125 --> 00:35:57.964
<v Speaker 0>Right? So I I can do a port

00:35:57.964 --> 00:35:58.845
<v Speaker 0>forward

00:36:00.040 --> 00:36:02.119
<v Speaker 0>to our test pods and

00:36:02.119 --> 00:36:04.040
<v Speaker 0>just confirm that I actually have an index.

00:36:04.040 --> 00:36:06.599
<v Speaker 0>Like, that's to me, that's step one here.

00:36:06.599 --> 00:36:06.760
<v Speaker 0>So

00:36:10.440 --> 00:36:10.839
<v Speaker 0>Nice.

00:36:14.225 --> 00:36:16.385
<v Speaker 0>I'm gonna go in the database part.

00:36:21.745 --> 00:36:22.945
<v Speaker 3>Better wrong.

00:36:25.345 --> 00:36:26.145
<v Speaker 1>Let's see here.

00:36:27.840 --> 00:36:29.280
<v Speaker 0>Oh, this says Caulfield.

00:36:30.160 --> 00:36:31.440
<v Speaker 0>Is that what that is?

00:36:32.240 --> 00:36:33.040
<v Speaker 1>Potentially.

00:36:33.040 --> 00:36:33.600
<v Speaker 1>Yeah.

00:36:34.000 --> 00:36:34.640
<v Speaker 2>Yeah.

00:36:36.000 --> 00:36:38.240
<v Speaker 2>Yeah. I mean So I I was gonna

00:36:38.240 --> 00:36:40.400
<v Speaker 0>exec into it to do something the Internet

00:36:40.400 --> 00:36:43.445
<v Speaker 0>wouldn't do, and already it's blocked me. So

00:36:44.645 --> 00:36:46.725
<v Speaker 1>Yeah. That that's a that's a good example

00:36:46.725 --> 00:36:48.485
<v Speaker 1>right there. I mean, like, you know, you

00:36:48.485 --> 00:36:49.285
<v Speaker 1>want to

00:36:50.005 --> 00:36:52.485
<v Speaker 1>restrict your images with things it doesn't need,

00:36:52.485 --> 00:36:54.005
<v Speaker 1>like, you know, you don't want someone to

00:36:54.005 --> 00:36:55.125
<v Speaker 1>be able to exec into it if they

00:36:55.125 --> 00:36:55.605
<v Speaker 1>don't need to.

00:36:56.330 --> 00:36:58.410
<v Speaker 1>But here, that adds another layer. Let's say

00:36:58.410 --> 00:37:00.010
<v Speaker 1>you wanna use the NGINX pod and you

00:37:00.010 --> 00:37:01.610
<v Speaker 1>don't want people to exec into it.

00:37:02.250 --> 00:37:04.890
<v Speaker 1>Apparently, your set comp profile will disallow you

00:37:04.890 --> 00:37:06.010
<v Speaker 1>from doing that here.

00:37:06.730 --> 00:37:08.330
<v Speaker 0>So what I'm gonna do is go add

00:37:08.330 --> 00:37:10.090
<v Speaker 0>that Cisco and just assume I know how

00:37:10.090 --> 00:37:11.530
<v Speaker 0>to do it, please. I know if I

00:37:11.530 --> 00:37:13.025
<v Speaker 0>get anything wrong,

00:37:13.585 --> 00:37:15.105
<v Speaker 0>yell at me. And we do have a

00:37:15.105 --> 00:37:17.345
<v Speaker 0>question if you're feeling brave as well. So

00:37:17.345 --> 00:37:18.865
<v Speaker 0>I'll pop that up just now. We'll like

00:37:18.865 --> 00:37:21.265
<v Speaker 0>you to edit on the conflict note. Cool.

00:37:21.265 --> 00:37:22.225
<v Speaker 0>The question is from

00:37:23.345 --> 00:37:23.985
<v Speaker 0>Go ahead.

00:37:24.465 --> 00:37:26.625
<v Speaker 0>The question is from Robert, and he's saying,

00:37:26.930 --> 00:37:29.730
<v Speaker 0>so could the operator log syscalls and app

00:37:29.730 --> 00:37:31.810
<v Speaker 0>made that prevent it from running by the

00:37:31.810 --> 00:37:32.530
<v Speaker 0>profile?

00:37:33.330 --> 00:37:34.370
<v Speaker 1>Yeah. So

00:37:35.010 --> 00:37:37.090
<v Speaker 1>the if you set the the default action

00:37:37.090 --> 00:37:38.850
<v Speaker 1>or the action on a stanza

00:37:39.410 --> 00:37:41.490
<v Speaker 1>to to log instead of, you know, like,

00:37:41.490 --> 00:37:42.210
<v Speaker 1>error allow,

00:37:42.855 --> 00:37:44.935
<v Speaker 1>then it is gonna log those out.

00:37:45.655 --> 00:37:47.655
<v Speaker 1>I think that that that we could make

00:37:47.655 --> 00:37:49.655
<v Speaker 1>that a little bit easier to consume. Like,

00:37:49.655 --> 00:37:51.655
<v Speaker 1>there there's ways to, right, get to that

00:37:51.655 --> 00:37:52.855
<v Speaker 1>log. Like, for instance,

00:37:53.655 --> 00:37:54.375
<v Speaker 1>in the

00:37:54.920 --> 00:37:57.400
<v Speaker 1>the example in the Kubernetes docs that we

00:37:57.400 --> 00:38:00.200
<v Speaker 1>added, I'm running, like, a kind cluster locally.

00:38:00.200 --> 00:38:02.360
<v Speaker 1>So I just literally tail the syslog on

00:38:02.360 --> 00:38:04.520
<v Speaker 1>my local machine, and I can see those

00:38:04.520 --> 00:38:06.120
<v Speaker 1>syscalls logged out there.

00:38:06.920 --> 00:38:07.160
<v Speaker 1>But,

00:38:07.725 --> 00:38:09.725
<v Speaker 1>you know, we could potentially make that easier

00:38:09.725 --> 00:38:12.445
<v Speaker 1>to consume or or, you know, you you

00:38:12.445 --> 00:38:14.765
<v Speaker 1>could already export those somewhere else and and

00:38:14.765 --> 00:38:17.005
<v Speaker 1>there's probably frequently people are.

00:38:17.165 --> 00:38:19.165
<v Speaker 1>But building something to the operator that would

00:38:19.165 --> 00:38:19.485
<v Speaker 1>do that

00:38:20.220 --> 00:38:22.380
<v Speaker 1>would definitely be interesting as well. We I

00:38:22.380 --> 00:38:23.900
<v Speaker 1>I don't think we want to, like,

00:38:24.540 --> 00:38:26.460
<v Speaker 1>shove too much into this operator. Right? Like,

00:38:26.460 --> 00:38:28.540
<v Speaker 1>it shouldn't be like your logging mechanism, for

00:38:28.540 --> 00:38:30.220
<v Speaker 1>instance. But if there's something around

00:38:31.020 --> 00:38:32.700
<v Speaker 1>making that easier to consume,

00:38:32.940 --> 00:38:34.860
<v Speaker 1>I definitely think so. One thing we could

00:38:34.860 --> 00:38:36.165
<v Speaker 1>do is,

00:38:36.885 --> 00:38:38.165
<v Speaker 1>you know, like, do some sort of, like,

00:38:38.165 --> 00:38:39.045
<v Speaker 1>a venting

00:38:39.125 --> 00:38:39.685
<v Speaker 1>on

00:38:40.005 --> 00:38:42.085
<v Speaker 1>a pod or something like that to say,

00:38:42.085 --> 00:38:44.485
<v Speaker 1>like, oh, this was killed for this reason.

00:38:44.485 --> 00:38:46.725
<v Speaker 1>Right? So there's it should already say if

00:38:46.725 --> 00:38:48.005
<v Speaker 1>we got the pod now, like, you know,

00:38:48.840 --> 00:38:50.840
<v Speaker 1>something happened. It might actually even say that

00:38:50.840 --> 00:38:51.800
<v Speaker 1>message there.

00:38:52.920 --> 00:38:54.520
<v Speaker 1>But, you know, if there's something we can

00:38:54.520 --> 00:38:55.960
<v Speaker 1>add to that to make it a little

00:38:55.960 --> 00:38:58.040
<v Speaker 1>more transparent, that'd be a a great idea

00:38:58.040 --> 00:38:58.520
<v Speaker 1>for sure.

00:39:00.375 --> 00:39:01.095
<v Speaker 0>Awesome.

00:39:01.335 --> 00:39:02.695
<v Speaker 0>Really good answer.

00:39:03.255 --> 00:39:06.295
<v Speaker 0>So while you're answering that question, I did

00:39:06.295 --> 00:39:07.095
<v Speaker 0>edit

00:39:07.815 --> 00:39:10.695
<v Speaker 0>our contact map, and I added that Cisco,

00:39:12.780 --> 00:39:13.100
<v Speaker 0>which

00:39:13.580 --> 00:39:15.020
<v Speaker 0>oh, and then I can't even remember the

00:39:15.020 --> 00:39:16.140
<v Speaker 0>name of it. There we go.

00:39:17.260 --> 00:39:19.340
<v Speaker 0>Get PGRP.

00:39:20.300 --> 00:39:22.380
<v Speaker 0>Which Cisco is that? I'll ask you on

00:39:22.380 --> 00:39:23.100
<v Speaker 0>the spot.

00:39:23.820 --> 00:39:25.740
<v Speaker 1>I have no idea, Sasha. Save me.

00:39:29.005 --> 00:39:29.965
<v Speaker 0>Let's just

00:39:30.205 --> 00:39:32.445
<v Speaker 0>see what It's it's related to users and

00:39:32.445 --> 00:39:34.445
<v Speaker 2>groups somehow, but I'm not exactly sure what

00:39:34.445 --> 00:39:36.445
<v Speaker 2>it does, but it's something like user or

00:39:36.445 --> 00:39:39.165
<v Speaker 2>group. So it looks like it's setting and

00:39:39.165 --> 00:39:40.365
<v Speaker 1>getting process groups.

00:39:41.120 --> 00:39:43.600
<v Speaker 0>Yeah. So it it gets a group ID.

00:39:43.600 --> 00:39:46.880
<v Speaker 0>So I've added that. Now I already have

00:39:46.880 --> 00:39:49.200
<v Speaker 0>a running pod. I'm assuming that would be

00:39:49.200 --> 00:39:50.880
<v Speaker 0>updated in real time. So will I have

00:39:50.880 --> 00:39:52.560
<v Speaker 0>to kill the pod and redeploy?

00:39:52.640 --> 00:39:54.160
<v Speaker 2>Exactly. Yeah. Yeah. Okay.

00:39:55.605 --> 00:39:57.205
<v Speaker 0>So we can delete.

00:39:58.005 --> 00:39:59.845
<v Speaker 0>That's a text part.

00:40:05.365 --> 00:40:06.645
<v Speaker 0>Yeah. Oh, okay.

00:40:09.309 --> 00:40:11.470
<v Speaker 2>I expect another this call now to show

00:40:11.470 --> 00:40:14.109
<v Speaker 2>up. But Yeah. Me too. This

00:40:14.510 --> 00:40:16.349
<v Speaker 1>is the joy of of crafting the second

00:40:16.349 --> 00:40:17.390
<v Speaker 1>part of us. And like I said in

00:40:17.390 --> 00:40:18.190
<v Speaker 1>that tutorial,

00:40:18.349 --> 00:40:20.510
<v Speaker 1>we do it by just logging all of

00:40:20.510 --> 00:40:22.445
<v Speaker 1>them and then, like, adding them. Well, we

00:40:22.445 --> 00:40:23.965
<v Speaker 1>also give you the completed one so you

00:40:23.965 --> 00:40:25.165
<v Speaker 1>don't have to do it. But when I

00:40:25.165 --> 00:40:27.325
<v Speaker 1>was writing that, I was logging them all

00:40:27.325 --> 00:40:29.165
<v Speaker 1>and, you know, it's like, oh, this one

00:40:29.165 --> 00:40:31.405
<v Speaker 1>works now. Alright. What's the next one we

00:40:31.405 --> 00:40:32.445
<v Speaker 1>need to fix?

00:40:33.405 --> 00:40:35.725
<v Speaker 1>So it can be be confusing for sure.

00:40:37.619 --> 00:40:38.980
<v Speaker 0>Yeah. Well,

00:40:39.380 --> 00:40:41.059
<v Speaker 0>I just did the gross period to you

00:40:41.059 --> 00:40:43.299
<v Speaker 0>though, and of course, there's no way that's

00:40:43.299 --> 00:40:44.099
<v Speaker 0>just full.

00:40:45.380 --> 00:40:45.700
<v Speaker 0>Some

00:40:47.779 --> 00:40:48.900
<v Speaker 3>let's give that

00:40:49.380 --> 00:40:49.779
<v Speaker 3>now.

00:40:50.885 --> 00:40:53.525
<v Speaker 3>Okay. So Good. How many of these do

00:40:53.525 --> 00:40:55.204
<v Speaker 0>you think we're gonna have before I actually

00:40:55.204 --> 00:40:56.485
<v Speaker 0>get inside of this

00:40:56.885 --> 00:40:58.085
<v Speaker 0>this container?

00:40:58.325 --> 00:40:59.125
<v Speaker 1>Oh,

00:40:59.765 --> 00:41:01.045
<v Speaker 1>a few for sure.

00:41:04.050 --> 00:41:06.930
<v Speaker 0>There's no Cisco load here, though. It cannot

00:41:06.930 --> 00:41:08.450
<v Speaker 0>set terminal process.

00:41:08.450 --> 00:41:08.850
<v Speaker 0>Alright.

00:41:12.050 --> 00:41:14.450
<v Speaker 0>So let's assume in like, we're already understanding

00:41:14.450 --> 00:41:15.890
<v Speaker 0>why this is a bit painful. Now we

00:41:15.890 --> 00:41:17.010
<v Speaker 0>knew this was coming. So

00:41:19.875 --> 00:41:20.755
<v Speaker 0>why don't

00:41:23.795 --> 00:41:25.315
<v Speaker 0>because it it could be it could be

00:41:25.315 --> 00:41:27.395
<v Speaker 0>dozens. Right? There's no point in going through

00:41:27.395 --> 00:41:28.675
<v Speaker 0>these one by one.

00:41:29.155 --> 00:41:31.395
<v Speaker 1>Yeah. I mean, like, for for for this,

00:41:31.500 --> 00:41:32.860
<v Speaker 1>There may be a point in doing it

00:41:32.860 --> 00:41:35.180
<v Speaker 1>for your your production workload, but

00:41:35.740 --> 00:41:37.260
<v Speaker 1>you're right. There could be there could be

00:41:37.260 --> 00:41:39.100
<v Speaker 1>dozens. Right? Because it's gonna kill on the

00:41:39.100 --> 00:41:39.740
<v Speaker 1>first one.

00:41:40.300 --> 00:41:42.620
<v Speaker 1>You could also set it to log, right,

00:41:42.620 --> 00:41:44.860
<v Speaker 1>and potentially get all of those at once

00:41:45.180 --> 00:41:47.525
<v Speaker 1>Yeah. Seen. So Okay. That that's a really

00:41:47.525 --> 00:41:49.605
<v Speaker 0>good idea. So let's but I I'm curious

00:41:49.605 --> 00:41:50.325
<v Speaker 0>first.

00:41:51.765 --> 00:41:54.164
<v Speaker 0>Can we set the default runtime one first?

00:41:54.164 --> 00:41:55.525
<v Speaker 0>Can you tell me how to do that?

00:41:55.525 --> 00:41:57.525
<v Speaker 0>Then we'll come back and maybe change the

00:41:57.525 --> 00:42:00.244
<v Speaker 0>engine x one to do log instead of

00:42:00.244 --> 00:42:00.645
<v Speaker 0>error.

00:42:01.170 --> 00:42:02.290
<v Speaker 0>Does that make sense?

00:42:03.569 --> 00:42:05.330
<v Speaker 1>Yeah. Sure. Sasha, do you wanna

00:42:05.730 --> 00:42:08.210
<v Speaker 1>instruct that one? I don't we want to

00:42:08.210 --> 00:42:11.010
<v Speaker 2>change oh, okay. I thought we would like

00:42:11.010 --> 00:42:13.809
<v Speaker 2>to change to not to error, but to

00:42:13.809 --> 00:42:16.775
<v Speaker 2>log for the NGINX profile. And then we

00:42:16.775 --> 00:42:18.615
<v Speaker 2>could look into audit log. I'm not sure

00:42:18.615 --> 00:42:21.015
<v Speaker 2>if audit log is audit is configured on

00:42:21.015 --> 00:42:22.935
<v Speaker 2>your system, but I would expect so. So

00:42:22.935 --> 00:42:24.855
<v Speaker 2>we should already see some ZS calls coming

00:42:24.855 --> 00:42:26.135
<v Speaker 2>in from the workload.

00:42:27.575 --> 00:42:29.095
<v Speaker 0>So what I was curious was

00:42:29.655 --> 00:42:31.095
<v Speaker 0>what we're saying is if we don't wanna

00:42:31.095 --> 00:42:31.495
<v Speaker 0>use

00:42:32.380 --> 00:42:35.020
<v Speaker 0>the default ones that are provided, there is

00:42:35.020 --> 00:42:37.260
<v Speaker 0>the container runtime default. I was wondering if

00:42:37.260 --> 00:42:39.580
<v Speaker 0>I could apply that to 10 exec into

00:42:39.580 --> 00:42:40.540
<v Speaker 0>the container.

00:42:41.340 --> 00:42:43.500
<v Speaker 2>Then, yeah, this will work. Yeah. We can

00:42:43.500 --> 00:42:43.980
<v Speaker 2>try it out.

00:42:44.685 --> 00:42:47.245
<v Speaker 0>Yeah. So how do I'm assuming the annotation

00:42:47.245 --> 00:42:49.485
<v Speaker 0>is the same. Right? So Yes.

00:42:49.805 --> 00:42:50.445
<v Speaker 2>Yeah.

00:42:51.805 --> 00:42:53.405
<v Speaker 2>So what's It's

00:42:53.405 --> 00:42:55.565
<v Speaker 2>just runtimes runtime slash default.

00:42:56.900 --> 00:42:58.180
<v Speaker 0>Is that it? That's all I need to

00:42:58.180 --> 00:43:00.020
<v Speaker 0>get a default. Yes. Yeah.

00:43:00.260 --> 00:43:01.940
<v Speaker 0>Why is that not in every piece of

00:43:01.940 --> 00:43:04.420
<v Speaker 0>documentation for deploying pods ever?

00:43:05.620 --> 00:43:07.220
<v Speaker 1>Because because it's an annotation.

00:43:09.805 --> 00:43:10.445
<v Speaker 1>Maybe.

00:43:11.405 --> 00:43:13.805
<v Speaker 1>Maybe because no one knows what seccomp is,

00:43:13.805 --> 00:43:16.125
<v Speaker 1>who's using Kubernetes. I'm not sure. That's that's

00:43:16.125 --> 00:43:18.365
<v Speaker 1>probably a huge generalization, but

00:43:18.685 --> 00:43:20.205
<v Speaker 1>I know a lot of people are not

00:43:20.205 --> 00:43:21.805
<v Speaker 1>familiar with it. But anyway.

00:43:22.850 --> 00:43:25.570
<v Speaker 0>But this I sorry, Andy. Go. Go. Sure.

00:43:25.570 --> 00:43:27.330
<v Speaker 2>Yeah. The fun fact is that that we

00:43:27.330 --> 00:43:29.890
<v Speaker 2>actually running a different application. Right? So we're

00:43:29.890 --> 00:43:31.730
<v Speaker 2>running on top of Bash now and not

00:43:31.730 --> 00:43:33.730
<v Speaker 2>on top of NGINX. So

00:43:34.450 --> 00:43:36.635
<v Speaker 0>So then yeah. Yeah. That's what I was

00:43:36.635 --> 00:43:38.155
<v Speaker 0>really curious. That's what I wanted to do

00:43:38.155 --> 00:43:40.315
<v Speaker 0>with the default NGINX profile because I didn't

00:43:40.315 --> 00:43:41.835
<v Speaker 0>think I would get blocked from getting inside

00:43:41.835 --> 00:43:43.595
<v Speaker 0>the container. That was just a value add.

00:43:43.595 --> 00:43:44.315
<v Speaker 0>That was cool.

00:43:44.715 --> 00:43:46.635
<v Speaker 0>What I wanted to do is something dangerous.

00:43:46.635 --> 00:43:48.860
<v Speaker 0>Like, the attack vector that seccomp is helping

00:43:48.860 --> 00:43:51.660
<v Speaker 0>people with is if someone penetrates my application

00:43:51.660 --> 00:43:53.500
<v Speaker 0>and gets access to the container,

00:43:53.740 --> 00:43:55.260
<v Speaker 0>we wanna stop them doing things that this

00:43:55.260 --> 00:43:56.860
<v Speaker 0>application isn't supposed to do.

00:43:57.420 --> 00:43:58.860
<v Speaker 0>So now that I'm

00:43:59.420 --> 00:44:01.435
<v Speaker 0>in here, like, is there a way for

00:44:01.435 --> 00:44:03.994
<v Speaker 0>me to introspect that second profile? Is it

00:44:03.994 --> 00:44:06.795
<v Speaker 0>available in a container under slash prop slash

00:44:06.795 --> 00:44:07.675
<v Speaker 0>one? Like

00:44:09.195 --> 00:44:10.875
<v Speaker 2>No. I don't think so. The

00:44:11.515 --> 00:44:13.435
<v Speaker 2>con the underlying container runtime,

00:44:13.915 --> 00:44:16.460
<v Speaker 2>our case, probably run c and applied the

00:44:16.460 --> 00:44:18.780
<v Speaker 2>profile already. So it's not possible for the

00:44:18.780 --> 00:44:20.780
<v Speaker 2>process at all to inspect the profile now

00:44:20.780 --> 00:44:22.700
<v Speaker 2>because the process is not that privileged.

00:44:23.180 --> 00:44:25.260
<v Speaker 2>We also yeah. We don't have access to

00:44:25.740 --> 00:44:28.540
<v Speaker 2>to something like this, but what could So

00:44:28.540 --> 00:44:29.900
<v Speaker 3>what would it block me from doing?

00:44:31.045 --> 00:44:33.445
<v Speaker 0>Like, what what would be a bad Cisco?

00:44:33.925 --> 00:44:34.805
<v Speaker 2>I

00:44:35.285 --> 00:44:37.925
<v Speaker 2>mean, runtime default is not very constrained. Right?

00:44:37.925 --> 00:44:40.405
<v Speaker 2>Let me just double check. Yeah. I'm taking

00:44:40.405 --> 00:44:41.285
<v Speaker 1>a look at it right now.

00:44:43.010 --> 00:44:45.809
<v Speaker 1>See. Because I'm assuming it's right. If I

00:44:45.809 --> 00:44:47.410
<v Speaker 0>could run PS, I I would only see

00:44:47.410 --> 00:44:49.250
<v Speaker 0>one port out there anyway. I mean, I

00:44:49.250 --> 00:44:49.890
<v Speaker 0>guess,

00:44:51.010 --> 00:44:52.370
<v Speaker 0>I would be able to

00:44:52.930 --> 00:44:54.609
<v Speaker 0>can I I can send this call to

00:44:54.609 --> 00:44:56.930
<v Speaker 0>the kernel from here? Right? Is that possible?

00:44:56.930 --> 00:44:58.130
<v Speaker 0>Can I just send this as well?

00:45:00.224 --> 00:45:03.664
<v Speaker 1>You could try. Let's

00:45:03.664 --> 00:45:04.145
<v Speaker 1>see.

00:45:04.464 --> 00:45:06.225
<v Speaker 1>Significant syscalls.

00:45:09.825 --> 00:45:11.345
<v Speaker 1>Here, I can I'll drop this in the

00:45:11.345 --> 00:45:12.305
<v Speaker 1>chat too.

00:45:12.625 --> 00:45:14.385
<v Speaker 0>Yeah. I'll do that. Let's do that. I'm

00:45:14.385 --> 00:45:15.560
<v Speaker 0>curious. Do

00:45:16.920 --> 00:45:18.520
<v Speaker 2>we have something like NS enter

00:45:18.760 --> 00:45:19.480
<v Speaker 2>in

00:45:19.560 --> 00:45:21.800
<v Speaker 2>the binary NS enter, for example?

00:45:22.200 --> 00:45:24.040
<v Speaker 0>Yeah. I'm assuming we can maybe get some

00:45:24.040 --> 00:45:26.440
<v Speaker 0>tools. So You could use, like, set NS

00:45:26.440 --> 00:45:29.240
<v Speaker 1>or something like that. Probably Debian based or.

00:45:29.640 --> 00:45:30.040
<v Speaker 2>Yes.

00:45:32.565 --> 00:45:34.405
<v Speaker 2>Yes. Set n s or n s enter

00:45:34.405 --> 00:45:37.125
<v Speaker 2>should not work. This should be blocked probably

00:45:38.005 --> 00:45:40.725
<v Speaker 2>because it would allow modifying the namespace.

00:45:43.125 --> 00:45:44.805
<v Speaker 0>Oh, namespace. It's there. It's.

00:45:47.650 --> 00:45:50.690
<v Speaker 2>No. Is NS enter in path already?

00:45:55.010 --> 00:45:55.650
<v Speaker 0>That

00:45:56.210 --> 00:45:57.090
<v Speaker 0>sounds dangerous.

00:46:03.795 --> 00:46:06.035
<v Speaker 0>Run a program with different preference send. I

00:46:06.035 --> 00:46:07.395
<v Speaker 0>mean, that sounds like something I shouldn't be

00:46:07.395 --> 00:46:09.555
<v Speaker 0>able to do without a default one ten.

00:46:09.635 --> 00:46:13.235
<v Speaker 1>I don't think it's actually explicitly blocked,

00:46:13.235 --> 00:46:14.755
<v Speaker 1>though, from what I'm looking at.

00:46:15.795 --> 00:46:16.035
<v Speaker 1>So

00:46:18.300 --> 00:46:19.340
<v Speaker 1>Let's see.

00:46:19.980 --> 00:46:21.100
<v Speaker 1>Does it have

00:46:21.420 --> 00:46:23.340
<v Speaker 1>wait. Let's look at the ones there.

00:46:23.980 --> 00:46:25.500
<v Speaker 0>Well, that I'll just look at that title

00:46:25.500 --> 00:46:26.460
<v Speaker 0>then. So

00:46:26.620 --> 00:46:29.340
<v Speaker 0>we're looking for set NS and say it's

00:46:29.820 --> 00:46:30.700
<v Speaker 0>been to

00:46:32.535 --> 00:46:34.455
<v Speaker 0>Well, lately, Ubuntu.

00:46:36.055 --> 00:46:38.214
<v Speaker 2>I'll say that in essence is allowed by

00:46:38.214 --> 00:46:39.815
<v Speaker 2>by default, I think so.

00:46:40.375 --> 00:46:41.335
<v Speaker 2>Think so. A

00:46:41.655 --> 00:46:44.135
<v Speaker 2>profile I'm looking at. I look probably, I'm

00:46:44.135 --> 00:46:45.335
<v Speaker 2>looking at a different profile.

00:46:46.270 --> 00:46:48.350
<v Speaker 0>So right now, as an attacker, I'm in

00:46:48.350 --> 00:46:50.110
<v Speaker 0>quite a good position and even work to

00:46:50.110 --> 00:46:50.830
<v Speaker 0>default,

00:46:50.990 --> 00:46:53.150
<v Speaker 0>potentially in a good position of default run

00:46:53.150 --> 00:46:53.710
<v Speaker 0>type.

00:46:54.350 --> 00:46:55.710
<v Speaker 1>Yeah. It depends on what you're trying to

00:46:55.710 --> 00:46:57.950
<v Speaker 1>do. But like we're saying, it's it's pretty

00:46:57.950 --> 00:46:58.590
<v Speaker 1>permissive.

00:47:02.724 --> 00:47:03.525
<v Speaker 0>Okay.

00:47:03.765 --> 00:47:05.285
<v Speaker 0>Right. We'll we'll move on.

00:47:05.685 --> 00:47:06.724
<v Speaker 0>I'm

00:47:06.724 --> 00:47:08.964
<v Speaker 0>not sure what I can do here to

00:47:08.964 --> 00:47:11.285
<v Speaker 0>try and trigger that default set of profiles

00:47:11.285 --> 00:47:13.285
<v Speaker 0>with you. Can we see that profile?

00:47:14.660 --> 00:47:16.340
<v Speaker 1>I'm looking the one I just put in

00:47:16.340 --> 00:47:17.860
<v Speaker 1>the chat here

00:47:18.420 --> 00:47:20.900
<v Speaker 1>looks like the one for Docker.

00:47:26.865 --> 00:47:28.705
<v Speaker 1>So this has a list of all the

00:47:28.705 --> 00:47:29.905
<v Speaker 1>blocked ones.

00:47:30.865 --> 00:47:32.945
<v Speaker 1>I don't know if, like, clone may be

00:47:32.945 --> 00:47:33.425
<v Speaker 1>available.

00:47:38.940 --> 00:47:40.300
<v Speaker 2>That one is also part of the allowed

00:47:40.300 --> 00:47:41.180
<v Speaker 2>sys calls.

00:47:43.099 --> 00:47:45.020
<v Speaker 1>It is part of the allowed ones? Yeah.

00:47:45.020 --> 00:47:47.900
<v Speaker 0>It says block on the docker docs here.

00:47:48.300 --> 00:47:49.900
<v Speaker 2>Alright. It's interesting.

00:47:50.060 --> 00:47:51.500
<v Speaker 0>It also says I can't meant.

00:47:53.785 --> 00:47:56.105
<v Speaker 0>So in theory, if I ever just to,

00:47:57.465 --> 00:47:59.225
<v Speaker 0>like, do a look back, man, if I

00:47:59.225 --> 00:48:01.945
<v Speaker 0>can even remember the syntax for that. Yeah.

00:48:01.945 --> 00:48:03.065
<v Speaker 2>You can just

00:48:03.865 --> 00:48:04.825
<v Speaker 2>yeah. Something like this.

00:48:07.050 --> 00:48:08.170
<v Speaker 0>Either they

00:48:09.210 --> 00:48:12.010
<v Speaker 3>I'm

00:48:12.010 --> 00:48:13.610
<v Speaker 3>never gonna remember that design.

00:48:14.490 --> 00:48:15.050
<v Speaker 3>Which

00:48:18.810 --> 00:48:20.330
<v Speaker 1>profile were you looking at, Sasha?

00:48:21.635 --> 00:48:22.755
<v Speaker 2>I'm

00:48:22.755 --> 00:48:25.395
<v Speaker 2>looking into a containers common

00:48:25.714 --> 00:48:26.595
<v Speaker 1>Oh, okay.

00:48:27.315 --> 00:48:28.275
<v Speaker 2>Profile,

00:48:28.595 --> 00:48:30.915
<v Speaker 2>which is used by bot man in Cryo.

00:48:31.155 --> 00:48:32.675
<v Speaker 2>But it was originally

00:48:33.410 --> 00:48:34.770
<v Speaker 2>adopted by

00:48:35.570 --> 00:48:38.450
<v Speaker 2>from Docker, which is the JSON. Yeah.

00:48:38.770 --> 00:48:40.370
<v Speaker 2>Just the link.

00:48:41.570 --> 00:48:42.450
<v Speaker 2>This one.

00:48:43.410 --> 00:48:44.290
<v Speaker 1>Nice.

00:48:44.690 --> 00:48:45.890
<v Speaker 3>Okay. So that works.

00:48:47.365 --> 00:48:49.205
<v Speaker 2>Yes. But that that that that that says

00:48:49.205 --> 00:48:50.885
<v Speaker 0>pro blocking me there, I'm assuming?

00:48:52.405 --> 00:48:55.045
<v Speaker 1>That's just the permission levels of the user.

00:48:55.045 --> 00:48:56.965
<v Speaker 1>Right? That's so it's not actually even getting

00:48:56.965 --> 00:48:57.605
<v Speaker 1>to

00:48:58.325 --> 00:49:00.005
<v Speaker 1>making this code, I don't think.

00:49:02.120 --> 00:49:03.560
<v Speaker 1>Is that is that how you interpret that,

00:49:03.560 --> 00:49:04.200
<v Speaker 1>Sasha?

00:49:04.520 --> 00:49:05.320
<v Speaker 2>But

00:49:05.320 --> 00:49:07.160
<v Speaker 2>if you just leave those

00:49:07.240 --> 00:49:08.120
<v Speaker 2>arguments

00:49:08.120 --> 00:49:09.960
<v Speaker 2>away and just do something like mount one

00:49:09.960 --> 00:49:12.120
<v Speaker 2>to two or something like this, should probably

00:49:12.120 --> 00:49:13.320
<v Speaker 2>also not work. One,

00:49:15.555 --> 00:49:16.515
<v Speaker 2>Yes.

00:49:16.515 --> 00:49:18.835
<v Speaker 2>Yeah. It's blocking. Looks like that this is

00:49:18.835 --> 00:49:19.475
<v Speaker 2>blocking.

00:49:20.835 --> 00:49:23.234
<v Speaker 0>Okay. So we can test that, right, by

00:49:23.234 --> 00:49:23.875
<v Speaker 0>just

00:49:24.435 --> 00:49:26.755
<v Speaker 0>deleting our wonderful pods here,

00:49:27.474 --> 00:49:29.474
<v Speaker 0>removing that one line, and then see if

00:49:29.474 --> 00:49:31.520
<v Speaker 0>I can execute that. Yeah. I I don't

00:49:31.520 --> 00:49:33.680
<v Speaker 0>know what I'm trying to show to myself

00:49:33.680 --> 00:49:34.800
<v Speaker 0>here. I'm just

00:49:35.520 --> 00:49:37.680
<v Speaker 0>I'm just very curious. So I'd have to

00:49:37.680 --> 00:49:39.040
<v Speaker 2>remove the workload. Right?

00:49:41.200 --> 00:49:42.160
<v Speaker 3>So one.

00:49:42.240 --> 00:49:44.535
<v Speaker 3>Oh, two, one, one.

00:49:45.655 --> 00:49:46.295
<v Speaker 0>Yeah.

00:49:47.494 --> 00:49:49.895
<v Speaker 0>I think that's the same error. Alright.

00:49:51.335 --> 00:49:52.935
<v Speaker 0>Oh, well, there goes that plan.

00:49:55.815 --> 00:49:58.559
<v Speaker 0>So what we're gonna do now is we

00:49:58.559 --> 00:49:59.840
<v Speaker 0>are going to

00:50:01.520 --> 00:50:04.559
<v Speaker 0>change the NGINX profile to not get me

00:50:04.559 --> 00:50:06.720
<v Speaker 0>the error, and then it should allow me

00:50:06.720 --> 00:50:09.040
<v Speaker 0>to exec and and then we can understand

00:50:09.040 --> 00:50:10.960
<v Speaker 0>the default action stuff. So

00:50:12.744 --> 00:50:15.385
<v Speaker 0>I pop open this default profiles again.

00:50:19.945 --> 00:50:21.705
<v Speaker 0>And the default action is

00:50:22.825 --> 00:50:25.440
<v Speaker 0>this. Right? Mhmm. So if you just change

00:50:25.440 --> 00:50:27.280
<v Speaker 1>error note to log,

00:50:28.240 --> 00:50:30.240
<v Speaker 1>then when you encounter something, you know, it'll

00:50:30.240 --> 00:50:30.800
<v Speaker 1>do.

00:50:31.440 --> 00:50:33.840
<v Speaker 1>It'll just log it instead of killing the

00:50:33.840 --> 00:50:34.480
<v Speaker 1>process.

00:50:38.160 --> 00:50:41.365
<v Speaker 3>Alright. Just click that. Okay. And then I

00:50:41.365 --> 00:50:42.405
<v Speaker 3>can delete

00:50:42.964 --> 00:50:44.244
<v Speaker 3>and reapply.

00:50:46.805 --> 00:50:48.164
<v Speaker 0>Did I run get pods?

00:50:58.940 --> 00:51:00.380
<v Speaker 3>What about broken?

00:51:00.380 --> 00:51:02.620
<v Speaker 1>Yeah. Describe describe the pod and see what

00:51:02.620 --> 00:51:03.660
<v Speaker 1>the events look like there.

00:51:09.175 --> 00:51:10.935
<v Speaker 0>And I create some sales tour.

00:51:12.855 --> 00:51:14.535
<v Speaker 0>So is my profile

00:51:15.015 --> 00:51:17.335
<v Speaker 1>Yeah. I'm wondering. Does your profile exist?

00:51:23.309 --> 00:51:25.230
<v Speaker 0>I'm assuming that's what's the problem.

00:51:29.150 --> 00:51:30.589
<v Speaker 0>What do we have done here? So, yeah,

00:51:30.589 --> 00:51:32.190
<v Speaker 0>this is very explicit allow

00:51:32.349 --> 00:51:33.470
<v Speaker 0>or default action.

00:51:34.135 --> 00:51:36.615
<v Speaker 0>But where would I find the default actions

00:51:36.615 --> 00:51:38.535
<v Speaker 0>if I wanted to do if I wanted

00:51:38.535 --> 00:51:40.375
<v Speaker 0>to see what options I have available here?

00:51:40.615 --> 00:51:42.775
<v Speaker 1>I believe the only actions are

00:51:43.095 --> 00:51:44.055
<v Speaker 1>log,

00:51:44.055 --> 00:51:45.815
<v Speaker 1>error, no, and allow.

00:51:47.655 --> 00:51:48.615
<v Speaker 1>I'm fairly certain.

00:51:50.670 --> 00:51:52.590
<v Speaker 1>Let me make sure on that, though.

00:51:53.550 --> 00:51:55.550
<v Speaker 2>Yeah. Those are the actions

00:51:55.550 --> 00:51:57.470
<v Speaker 2>which are part of the runtime spec,

00:51:57.950 --> 00:51:59.630
<v Speaker 2>the OCI runtime spec.

00:52:07.875 --> 00:52:09.395
<v Speaker 0>I always break stuff.

00:52:13.714 --> 00:52:16.914
<v Speaker 1>Yeah. That's interesting. So did you apply the

00:52:16.914 --> 00:52:19.075
<v Speaker 1>updated

00:52:18.570 --> 00:52:20.810
<v Speaker 1>profile before you created this pod?

00:52:21.850 --> 00:52:24.170
<v Speaker 0>Yeah. Well, yeah, I'm Edison in Lane.

00:52:24.490 --> 00:52:26.250
<v Speaker 0>How does the operator handle changes to the

00:52:26.250 --> 00:52:27.530
<v Speaker 0>conflict map? Do I need to restart the

00:52:27.530 --> 00:52:28.170
<v Speaker 0>operator?

00:52:28.570 --> 00:52:29.850
<v Speaker 1>You shouldn't need to.

00:52:30.570 --> 00:52:33.450
<v Speaker 1>See if there will you, Kaye, describe the

00:52:33.450 --> 00:52:35.755
<v Speaker 1>config map? Because we we do event on

00:52:35.755 --> 00:52:37.115
<v Speaker 1>the config map, so you should be able

00:52:37.115 --> 00:52:37.755
<v Speaker 1>to see

00:52:38.155 --> 00:52:39.675
<v Speaker 1>if anything went wrong there.

00:52:49.769 --> 00:52:50.730
<v Speaker 1>Let's see.

00:52:51.049 --> 00:52:53.529
<v Speaker 1>So three minutes ago, that would suggest that

00:52:53.529 --> 00:52:55.369
<v Speaker 1>that was saved successfully.

00:52:58.009 --> 00:52:59.609
<v Speaker 0>Interesting. Why

00:53:00.170 --> 00:53:01.529
<v Speaker 3>don't I edit it again?

00:53:03.555 --> 00:53:05.315
<v Speaker 1>Yeah. And then also look at that pod

00:53:05.315 --> 00:53:08.035
<v Speaker 1>spec and make sure that it's the right

00:53:08.035 --> 00:53:08.675
<v Speaker 1>name.

00:53:09.234 --> 00:53:11.875
<v Speaker 0>For error null, we said it's a a

00:53:11.875 --> 00:53:12.675
<v Speaker 0>note

00:53:13.555 --> 00:53:15.234
<v Speaker 0>that I describe again.

00:53:20.470 --> 00:53:22.789
<v Speaker 0>Five nine four minutes with the a saved

00:53:22.789 --> 00:53:24.230
<v Speaker 0>seccomp profile.

00:53:28.470 --> 00:53:30.390
<v Speaker 0>What does that mean? Is it not picking

00:53:30.390 --> 00:53:32.230
<v Speaker 0>up the changes? It's just a weird Docker

00:53:32.230 --> 00:53:33.990
<v Speaker 0>for matching. We're gonna find the notes.

00:53:37.485 --> 00:53:39.005
<v Speaker 1>Yeah. Try try and

00:53:40.045 --> 00:53:41.805
<v Speaker 0>Oh, we just remove it. Oh, no.

00:53:42.285 --> 00:53:44.445
<v Speaker 1>Yeah. Try try and removing the profile, and

00:53:44.445 --> 00:53:45.965
<v Speaker 1>then let's see if we can

00:53:46.685 --> 00:53:47.645
<v Speaker 1>add it again.

00:53:52.950 --> 00:53:54.950
<v Speaker 1>Or you can just delete the config map

00:53:54.950 --> 00:53:55.750
<v Speaker 1>either way.

00:53:57.670 --> 00:53:59.670
<v Speaker 3>Yeah. Let's delete the config map rather than

00:53:59.670 --> 00:54:01.110
<v Speaker 3>doing that. So delete

00:54:02.675 --> 00:54:04.915
<v Speaker 3>the comp on config map.

00:54:05.075 --> 00:54:07.075
<v Speaker 0>Do you have a copy of it locally?

00:54:07.715 --> 00:54:10.275
<v Speaker 0>I just copied it. Yeah. Oh, cool. You

00:54:11.235 --> 00:54:14.115
<v Speaker 0>can have default profiles

00:54:13.790 --> 00:54:14.910
<v Speaker 3>right, and all.

00:54:15.790 --> 00:54:18.590
<v Speaker 3>And I'll remove all those generated for that.

00:54:24.510 --> 00:54:26.605
<v Speaker 0>The one I need there. Yeah. Make sure

00:54:26.765 --> 00:54:28.605
<v Speaker 1>the app label? Profile true.

00:54:29.965 --> 00:54:30.765
<v Speaker 1>You

00:54:30.765 --> 00:54:32.845
<v Speaker 1>shouldn't need the label, but you do need

00:54:32.845 --> 00:54:34.125
<v Speaker 1>that annotation there.

00:54:36.365 --> 00:54:37.645
<v Speaker 1>But, yeah, if you leave it, it probably

00:54:37.645 --> 00:54:40.605
<v Speaker 1>won't hurt. Yeah. Okay. So we've got this.

00:54:41.859 --> 00:54:43.140
<v Speaker 0>And our profile,

00:54:43.140 --> 00:54:45.540
<v Speaker 0>that was good to me. Let's change this

00:54:45.540 --> 00:54:47.380
<v Speaker 3>back to the log then.

00:54:47.619 --> 00:54:48.340
<v Speaker 1>K.

00:54:49.140 --> 00:54:51.859
<v Speaker 3>And we'll apply our default profile.

00:54:54.995 --> 00:54:55.635
<v Speaker 1>Nice.

00:54:55.875 --> 00:54:57.715
<v Speaker 0>So let's read this gray

00:54:58.675 --> 00:55:00.995
<v Speaker 0>for a second, by the way. Okay. Cool.

00:55:01.955 --> 00:55:03.875
<v Speaker 0>So now that we've got this as log,

00:55:04.035 --> 00:55:05.715
<v Speaker 0>what we're seeing is

00:55:06.675 --> 00:55:10.435
<v Speaker 0>and we can now redeploy

00:55:09.690 --> 00:55:12.170
<v Speaker 0>our engine x part,

00:55:13.290 --> 00:55:15.609
<v Speaker 3>and I may or may not be able

00:55:15.609 --> 00:55:16.970
<v Speaker 3>to exact into that.

00:55:18.010 --> 00:55:19.930
<v Speaker 3>Oh, that load definitely seems to be

00:55:22.325 --> 00:55:23.765
<v Speaker 1>Yeah. That's interesting.

00:55:28.165 --> 00:55:31.285
<v Speaker 1>Oh, let's

00:55:31.285 --> 00:55:31.445
<v Speaker 1>see.

00:55:36.640 --> 00:55:38.640
<v Speaker 1>Air training. That's interesting.

00:55:38.720 --> 00:55:40.000
<v Speaker 1>I haven't seen this.

00:55:41.920 --> 00:55:42.800
<v Speaker 2>Can we

00:55:43.360 --> 00:55:45.360
<v Speaker 0>Should we just touch Docker for Mac?

00:55:45.600 --> 00:55:48.080
<v Speaker 0>Is that where we where we move over

00:55:48.080 --> 00:55:49.760
<v Speaker 0>to our app at a straight up black

00:55:49.760 --> 00:55:51.695
<v Speaker 0>box? Maybe that's going to be a bit

00:55:51.695 --> 00:55:52.335
<v Speaker 0>easier.

00:55:53.775 --> 00:55:55.375
<v Speaker 1>We could give that a try.

00:55:56.975 --> 00:55:58.735
<v Speaker 0>Yeah. I'm just curious if Docker for Mac

00:55:58.735 --> 00:56:00.735
<v Speaker 0>maybe doesn't implement

00:56:00.735 --> 00:56:01.455
<v Speaker 0>the

00:56:01.695 --> 00:56:04.190
<v Speaker 0>the default action. I mean, is that possible?

00:56:04.190 --> 00:56:05.950
<v Speaker 0>You're saying it's an OCI specs thing, so

00:56:05.950 --> 00:56:07.310
<v Speaker 0>it really shouldn't be. Right?

00:56:08.990 --> 00:56:10.750
<v Speaker 1>Yeah. It shouldn't be an issue to change

00:56:10.750 --> 00:56:12.750
<v Speaker 1>it from error node to log. But,

00:56:14.349 --> 00:56:15.630
<v Speaker 1>yeah, we could try it on on your

00:56:15.630 --> 00:56:18.005
<v Speaker 1>Linux box if you want. There was something

00:56:18.005 --> 00:56:19.445
<v Speaker 0>that Sasha said earlier

00:56:19.845 --> 00:56:20.645
<v Speaker 0>where

00:56:22.645 --> 00:56:24.805
<v Speaker 0>it logs to audit d. Is that what

00:56:24.805 --> 00:56:25.925
<v Speaker 0>you Yeah.

00:56:25.925 --> 00:56:28.165
<v Speaker 0>But now what if that doesn't exist? Because

00:56:28.165 --> 00:56:29.445
<v Speaker 0>this is gonna be

00:56:30.420 --> 00:56:32.660
<v Speaker 0>a Linux cut VM. Like, I I'm not

00:56:32.660 --> 00:56:34.339
<v Speaker 0>sure if things like audit d would be

00:56:34.339 --> 00:56:34.820
<v Speaker 0>there.

00:56:36.660 --> 00:56:38.420
<v Speaker 1>I think it should still work.

00:56:38.980 --> 00:56:40.579
<v Speaker 1>I don't know. Correct me if I'm wrong,

00:56:40.579 --> 00:56:41.220
<v Speaker 1>Sasha.

00:56:41.780 --> 00:56:43.140
<v Speaker 0>I'm just I'm not swinging in.

00:56:43.855 --> 00:56:46.495
<v Speaker 2>I'm not completely sure about the included

00:56:46.495 --> 00:56:48.815
<v Speaker 2>bits into the logging mechanism.

00:56:48.975 --> 00:56:50.895
<v Speaker 2>I know it looks to warlock messages, and

00:56:50.895 --> 00:56:52.895
<v Speaker 2>it can also look to, yeah, to audit

00:56:52.895 --> 00:56:54.335
<v Speaker 2>d, but

00:56:55.900 --> 00:56:56.940
<v Speaker 2>I'm not sure.

00:56:57.420 --> 00:56:58.220
<v Speaker 2>Interesting.

00:56:59.100 --> 00:56:59.820
<v Speaker 0>Okay.

00:57:00.460 --> 00:57:01.820
<v Speaker 0>Yeah. Let's try it on the Linux box

00:57:01.820 --> 00:57:02.860
<v Speaker 1>and see what happens.

00:57:03.020 --> 00:57:04.060
<v Speaker 3>Yeah.

00:57:04.860 --> 00:57:05.660
<v Speaker 3>Alright.

00:57:06.380 --> 00:57:08.140
<v Speaker 3>So

00:57:11.255 --> 00:57:12.935
<v Speaker 3>if we close this one,

00:57:15.654 --> 00:57:17.494
<v Speaker 0>this is my end of XPN. But I

00:57:17.494 --> 00:57:19.174
<v Speaker 0>came prepared because I figured there might be

00:57:19.174 --> 00:57:20.214
<v Speaker 0>something that happened.

00:57:20.775 --> 00:57:22.855
<v Speaker 0>Docker from Mac. Although, I'm not that prepared

00:57:22.855 --> 00:57:24.295
<v Speaker 0>because I didn't install Cain.

00:57:25.070 --> 00:57:26.590
<v Speaker 0>So I

00:57:28.030 --> 00:57:31.150
<v Speaker 0>don't think that's gonna be available there.

00:57:35.470 --> 00:57:37.710
<v Speaker 0>Cube. Otherwise, I'll just take care of it.

00:57:37.710 --> 00:57:39.470
<v Speaker 0>Yeah. Okay. Let's just get the Kind off.

00:57:43.145 --> 00:57:43.785
<v Speaker 3>We

00:57:46.025 --> 00:57:48.025
<v Speaker 0>also have a question. So why don't I

00:57:48.025 --> 00:57:50.265
<v Speaker 0>leave that to YouTube when I did this?

00:57:51.465 --> 00:57:54.185
<v Speaker 0>So Bella is asking maybe a silly question.

00:57:54.185 --> 00:57:56.025
<v Speaker 0>There's also a saying there's safe space here.

00:57:56.470 --> 00:57:57.910
<v Speaker 0>Can this operator

00:57:58.390 --> 00:58:01.030
<v Speaker 0>be used on pod specific labels?

00:58:04.470 --> 00:58:05.590
<v Speaker 2>Not right now.

00:58:06.390 --> 00:58:08.230
<v Speaker 2>But we were thinking

00:58:08.310 --> 00:58:09.935
<v Speaker 2>oh, I it just depends on what pod

00:58:09.935 --> 00:58:12.975
<v Speaker 2>specific labels means. I would interpret it as

00:58:12.975 --> 00:58:14.575
<v Speaker 2>that we have something like

00:58:15.055 --> 00:58:16.335
<v Speaker 2>a filter mechanism

00:58:17.535 --> 00:58:19.375
<v Speaker 2>for those for the profiles to apply the

00:58:19.375 --> 00:58:20.255
<v Speaker 2>profiles to a pod.

00:58:21.220 --> 00:58:23.940
<v Speaker 2>Then we were considering that. But we have

00:58:23.940 --> 00:58:24.900
<v Speaker 2>no real

00:58:26.740 --> 00:58:27.460
<v Speaker 2>feature

00:58:27.620 --> 00:58:29.780
<v Speaker 2>how we could implement it. So one idea

00:58:29.780 --> 00:58:32.420
<v Speaker 2>would be to have something like mutating webhooks

00:58:32.420 --> 00:58:33.220
<v Speaker 2>that we have

00:58:33.885 --> 00:58:36.045
<v Speaker 2>that we could, yeah, reference

00:58:36.285 --> 00:58:38.525
<v Speaker 2>second profiles in a more easy way directly

00:58:38.525 --> 00:58:41.085
<v Speaker 2>from the workload so that the operator can

00:58:41.325 --> 00:58:42.125
<v Speaker 2>actually

00:58:42.285 --> 00:58:43.165
<v Speaker 2>modify

00:58:43.165 --> 00:58:46.365
<v Speaker 2>a pod to apply a workload automatically after

00:58:46.365 --> 00:58:47.645
<v Speaker 2>recording or something like this.

00:58:48.410 --> 00:58:50.010
<v Speaker 1>Yeah. The closest you could get to that

00:58:50.010 --> 00:58:51.530
<v Speaker 1>right now, I guess, is using a pod

00:58:51.530 --> 00:58:53.610
<v Speaker 1>security policy that enforces

00:58:53.930 --> 00:58:56.250
<v Speaker 1>Yep. Using it, which isn't going to actually

00:58:56.250 --> 00:58:57.850
<v Speaker 1>add it for you. Right? It's just gonna

00:58:57.850 --> 00:58:59.370
<v Speaker 1>say, like, oh, you can't,

00:58:59.690 --> 00:59:02.605
<v Speaker 1>you can't create this pod without the seccomp

00:59:02.605 --> 00:59:05.085
<v Speaker 1>annotation or or security context here.

00:59:08.605 --> 00:59:11.085
<v Speaker 0>Alright. Thank you for that question. If anyone

00:59:11.085 --> 00:59:12.605
<v Speaker 0>else has any more questions, feel free to

00:59:12.605 --> 00:59:13.965
<v Speaker 0>drop them in the chat. We will do

00:59:13.965 --> 00:59:16.045
<v Speaker 0>our best to well, I won't, but, you

00:59:16.045 --> 00:59:16.205
<v Speaker 0>know,

00:59:17.470 --> 00:59:19.230
<v Speaker 0>my wonderful guest here will do their best

00:59:19.230 --> 00:59:21.310
<v Speaker 0>to answer them. So I now have a

00:59:21.310 --> 00:59:23.310
<v Speaker 0>cane cluster. Is it by magic?

00:59:23.710 --> 00:59:26.510
<v Speaker 0>I I have no I don't have cane

00:59:26.510 --> 00:59:27.150
<v Speaker 0>CTL.

00:59:35.115 --> 00:59:36.954
<v Speaker 0>Thank you for being too confident.

00:59:38.075 --> 00:59:40.154
<v Speaker 0>See, you learn so much on this livestream.

00:59:40.154 --> 00:59:42.315
<v Speaker 0>Right? You learn how to install kubectl.

00:59:42.315 --> 00:59:44.075
<v Speaker 0>You learn how to set comp stuff. You're

00:59:44.075 --> 00:59:45.515
<v Speaker 0>gonna have to break everything.

00:59:45.755 --> 00:59:47.960
<v Speaker 3>I I am just on fire.

00:59:47.960 --> 00:59:48.360
<v Speaker 3>So

00:59:50.760 --> 00:59:52.040
<v Speaker 0>On

00:59:53.240 --> 00:59:55.080
<v Speaker 2>kind, it should definitely work

00:59:56.280 --> 00:59:58.200
<v Speaker 2>because we have end to end test running

00:59:58.200 --> 01:00:00.599
<v Speaker 2>in kind, which also checks for the audit

01:00:00.599 --> 01:00:02.975
<v Speaker 2>log, which also uses the audit log.

01:00:04.975 --> 01:00:06.815
<v Speaker 0>Okay. We're back to where we were. So

01:00:06.815 --> 01:00:07.535
<v Speaker 0>let's

01:00:08.255 --> 01:00:09.295
<v Speaker 0>edit it.

01:00:10.735 --> 01:00:12.255
<v Speaker 0>Not gonna have my auto complete now. That's

01:00:12.255 --> 01:00:13.375
<v Speaker 0>gonna drive me crazy.

01:00:13.695 --> 01:00:15.615
<v Speaker 0>Edit our config map

01:00:16.569 --> 01:00:17.930
<v Speaker 0>default profiles.

01:00:19.210 --> 01:00:22.170
<v Speaker 0>We're gonna change this to error node log.

01:00:22.250 --> 01:00:22.890
<v Speaker 2>Yeah.

01:00:24.410 --> 01:00:26.010
<v Speaker 0>We are going to

01:00:27.210 --> 01:00:28.410
<v Speaker 0>run

01:00:30.655 --> 01:00:31.855
<v Speaker 0>this part.

01:00:34.655 --> 01:00:36.335
<v Speaker 3>X dot yaml.

01:00:38.095 --> 01:00:40.175
<v Speaker 0>And we are using

01:00:40.255 --> 01:00:42.895
<v Speaker 0>the default profile, which we've now just modified.

01:00:43.809 --> 01:00:45.569
<v Speaker 0>And kind spun off for one eighteen, so

01:00:45.569 --> 01:00:47.329
<v Speaker 0>we're still gonna use an annotation instead of

01:00:47.329 --> 01:00:48.609
<v Speaker 0>the security project.

01:00:49.250 --> 01:00:50.210
<v Speaker 1>Sounds good.

01:00:53.730 --> 01:00:54.850
<v Speaker 0>That one's

01:00:55.329 --> 01:00:56.450
<v Speaker 0>won't be the same error?

01:00:59.005 --> 01:01:01.725
<v Speaker 1>Looks like you do. Well no. So this

01:01:01.725 --> 01:01:02.925
<v Speaker 0>is a new machine. It won't have the

01:01:02.925 --> 01:01:04.365
<v Speaker 0>image yet. Oh, gotcha.

01:01:07.965 --> 01:01:10.445
<v Speaker 3>Yeah. Yeah. We'll connect the image. It's gonna

01:01:10.445 --> 01:01:10.925
<v Speaker 0>be okay.

01:01:15.160 --> 01:01:16.839
<v Speaker 0>I'm so impatient.

01:01:16.839 --> 01:01:17.320
<v Speaker 0>Like,

01:01:19.559 --> 01:01:20.440
<v Speaker 3>what is next?

01:01:23.495 --> 01:01:25.495
<v Speaker 0>Although, maybe it's not gonna kill the image

01:01:25.495 --> 01:01:27.175
<v Speaker 0>because I would expect that to come now,

01:01:27.175 --> 01:01:29.255
<v Speaker 0>which means maybe there is an error.

01:01:30.455 --> 01:01:31.095
<v Speaker 0>Maybe

01:01:32.535 --> 01:01:34.215
<v Speaker 1>Yeah. Let's see. Yeah. I'm just gonna push

01:01:34.215 --> 01:01:35.895
<v Speaker 0>it. Code. Oh, no. That's good.

01:01:37.059 --> 01:01:38.820
<v Speaker 1>Okay. So now it's running.

01:01:39.300 --> 01:01:40.660
<v Speaker 1>Nice. So

01:01:41.380 --> 01:01:43.700
<v Speaker 0>with it with this profile, what was failing

01:01:43.700 --> 01:01:45.780
<v Speaker 0>with Docker for Mac was my ability to

01:01:45.780 --> 01:01:48.100
<v Speaker 0>then exec inside of this container.

01:01:48.339 --> 01:01:48.579
<v Speaker 0>Yeah.

01:01:49.205 --> 01:01:51.765
<v Speaker 0>There's no works, but we don't care about

01:01:51.765 --> 01:01:53.605
<v Speaker 0>that. What we actually wanna care about is

01:01:53.605 --> 01:01:55.045
<v Speaker 0>where did this log?

01:01:55.445 --> 01:01:56.325
<v Speaker 3>Or Yeah.

01:01:56.965 --> 01:01:58.405
<v Speaker 2>Now we have to exit the node.

01:02:02.270 --> 01:02:02.910
<v Speaker 0>So

01:02:03.070 --> 01:02:04.990
<v Speaker 0>yes. That's right. We're in. I'm not on

01:02:04.990 --> 01:02:05.950
<v Speaker 0>the action. Yeah.

01:02:06.510 --> 01:02:07.310
<v Speaker 0>So

01:02:08.030 --> 01:02:09.550
<v Speaker 0>we can jump and say it.

01:02:13.164 --> 01:02:13.885
<v Speaker 3>K.

01:02:14.444 --> 01:02:17.165
<v Speaker 2>Yeah. Now we can look into Warlock

01:02:19.085 --> 01:02:20.605
<v Speaker 2>AuditD, probably.

01:02:22.845 --> 01:02:25.005
<v Speaker 2>It's not there

01:02:26.490 --> 01:02:28.970
<v Speaker 2>because I think time doesn't ship all the

01:02:28.970 --> 01:02:29.610
<v Speaker 2>d.

01:02:29.770 --> 01:02:31.930
<v Speaker 1>You should be able to actually, just on

01:02:31.930 --> 01:02:33.050
<v Speaker 1>the machine itself,

01:02:33.210 --> 01:02:35.210
<v Speaker 1>they should flow through to the syslog. Right?

01:02:35.210 --> 01:02:36.970
<v Speaker 1>So you could probably tail the syslog. So

01:02:36.970 --> 01:02:38.090
<v Speaker 1>if you just do, like, tail

01:02:39.695 --> 01:02:40.255
<v Speaker 1>dash

01:02:40.495 --> 01:02:41.215
<v Speaker 1>let's see.

01:02:41.855 --> 01:02:43.695
<v Speaker 1>And if you could grep for

01:02:44.415 --> 01:02:46.655
<v Speaker 1>test pod. Yeah. Yeah. That's it.

01:02:47.135 --> 01:02:49.215
<v Speaker 2>Nice. That's the audit log. Yeah.

01:02:49.855 --> 01:02:51.535
<v Speaker 1>So there you get the syscall. You've got

01:02:51.535 --> 01:02:54.570
<v Speaker 1>+1 09271113489.

01:02:54.570 --> 01:02:56.490
<v Speaker 1>So these are all ones.

01:02:56.810 --> 01:02:58.890
<v Speaker 1>So so since we have that allow block,

01:03:00.090 --> 01:03:02.090
<v Speaker 1>the you know, that's that whatever block is

01:03:02.090 --> 01:03:04.170
<v Speaker 1>gonna take precedent of the default action. Right?

01:03:04.170 --> 01:03:05.850
<v Speaker 1>So these are all ones that would be

01:03:06.585 --> 01:03:09.145
<v Speaker 1>blocked in Arano. So, you know, if we

01:03:09.145 --> 01:03:10.744
<v Speaker 1>wanna switch it back to Arano, we need

01:03:10.744 --> 01:03:12.345
<v Speaker 1>to add all of these different

01:03:12.985 --> 01:03:14.265
<v Speaker 1>syscalls there.

01:03:15.945 --> 01:03:17.945
<v Speaker 2>And you can run something like a new

01:03:17.945 --> 01:03:20.425
<v Speaker 2>syscall and then your this is call number,

01:03:20.425 --> 01:03:21.705
<v Speaker 2>and then you get the name for it.

01:03:24.000 --> 01:03:24.960
<v Speaker 2>Yeah.

01:03:26.000 --> 01:03:26.720
<v Speaker 2>Ah.

01:03:27.200 --> 01:03:29.200
<v Speaker 2>Okay. If it exists.

01:03:29.680 --> 01:03:30.480
<v Speaker 1>I

01:03:30.800 --> 01:03:33.120
<v Speaker 1>actually Well, don't know what he used this

01:03:33.120 --> 01:03:34.000
<v Speaker 0>call is.

01:03:34.160 --> 01:03:35.120
<v Speaker 0>What what is that?

01:03:39.645 --> 01:03:41.645
<v Speaker 0>Not sure which one. I actually haven't used

01:03:41.645 --> 01:03:42.765
<v Speaker 1>it before either.

01:03:43.165 --> 01:03:45.165
<v Speaker 1>Typically, I just use one of those websites,

01:03:45.165 --> 01:03:47.484
<v Speaker 1>you know, that has, like, the searchable thing.

01:03:47.484 --> 01:03:50.125
<v Speaker 2>It's probably part of the auto d package.

01:03:50.125 --> 01:03:50.285
<v Speaker 0>Yeah.

01:03:52.100 --> 01:03:54.500
<v Speaker 2>Yeah. That's what I got from here. So

01:03:54.660 --> 01:03:55.380
<v Speaker 0>I see,

01:03:55.540 --> 01:03:58.500
<v Speaker 0>yeah, audit d there. So Nice.

01:03:59.140 --> 01:04:00.660
<v Speaker 2>Now it should be available.

01:04:01.300 --> 01:04:05.220
<v Speaker 3>Yeah. I'm learning. I'm learning. Yeah. Really? Yeah.

01:04:05.220 --> 01:04:06.815
<v Speaker 0>I just pick random numbers.

01:04:07.615 --> 01:04:09.295
<v Speaker 0>Yeah. I'm

01:04:09.295 --> 01:04:12.015
<v Speaker 0>so easily impressed. Okay. That's really cool too.

01:04:13.135 --> 01:04:13.775
<v Speaker 0>So

01:04:14.255 --> 01:04:16.174
<v Speaker 0>how how do I send this as can

01:04:16.174 --> 01:04:17.535
<v Speaker 0>I just send a random Cisco for the

01:04:17.535 --> 01:04:19.135
<v Speaker 0>kernel? Is there, like, a way of debugging

01:04:19.135 --> 01:04:19.454
<v Speaker 0>that?

01:04:21.630 --> 01:04:22.270
<v Speaker 3>Yeah.

01:04:23.869 --> 01:04:25.390
<v Speaker 3>Alright. We'll pass on that.

01:04:26.270 --> 01:04:28.109
<v Speaker 0>I'll stop trying to stop running, like, random

01:04:28.109 --> 01:04:28.830
<v Speaker 0>brain

01:04:28.990 --> 01:04:30.830
<v Speaker 0>thoughts actually. Yeah. So

01:04:31.310 --> 01:04:33.615
<v Speaker 2>But for example, you could also do something

01:04:33.615 --> 01:04:35.535
<v Speaker 2>like if you have a running or a

01:04:35.535 --> 01:04:37.615
<v Speaker 2>binary application, something like okay.

01:04:38.335 --> 01:04:40.415
<v Speaker 2>S trace, for example, is pretty easy to

01:04:40.415 --> 01:04:42.255
<v Speaker 2>use. So if we run something like S

01:04:42.255 --> 01:04:44.735
<v Speaker 2>trace minus c and then l s,

01:04:46.650 --> 01:04:48.650
<v Speaker 2>s trace is not available. Yeah.

01:04:49.450 --> 01:04:51.770
<v Speaker 0>We can fix that. Yeah. I know that

01:04:51.930 --> 01:04:53.690
<v Speaker 0>I know that package then. S

01:04:54.650 --> 01:04:56.490
<v Speaker 2>trace minus c and then l s, for

01:04:56.490 --> 01:04:59.609
<v Speaker 2>example, should give us an idea about which

01:05:00.025 --> 01:05:03.385
<v Speaker 2>SYS calls are now required to run this.

01:05:03.465 --> 01:05:05.785
<v Speaker 2>And if we now run something like s

01:05:05.785 --> 01:05:08.425
<v Speaker 2>trace minus c l s slash,

01:05:09.225 --> 01:05:11.065
<v Speaker 2>then there should be yeah. Then we have

01:05:11.065 --> 01:05:12.665
<v Speaker 2>a different list of SYS calls because it's

01:05:12.665 --> 01:05:14.505
<v Speaker 2>higher privileged. Interesting. Right?

01:05:17.570 --> 01:05:19.650
<v Speaker 2>So it really depends on the application and

01:05:19.650 --> 01:05:20.690
<v Speaker 2>what we want to do.

01:05:21.250 --> 01:05:22.690
<v Speaker 2>And allowing something like

01:05:23.330 --> 01:05:26.050
<v Speaker 2>exec ing into a container workload is probably

01:05:26.715 --> 01:05:29.835
<v Speaker 2>good if you think about debugging an application,

01:05:29.995 --> 01:05:30.555
<v Speaker 2>but

01:05:30.875 --> 01:05:33.035
<v Speaker 2>we also have to reconsider then that we

01:05:33.035 --> 01:05:33.915
<v Speaker 2>then allow

01:05:34.395 --> 01:05:35.035
<v Speaker 2>yeah.

01:05:35.995 --> 01:05:38.395
<v Speaker 2>We have to allow additional resources to actually

01:05:38.395 --> 01:05:40.955
<v Speaker 2>do something with with the bash, for example.

01:05:40.955 --> 01:05:41.355
<v Speaker 1>Right.

01:05:41.770 --> 01:05:42.650
<v Speaker 0>So

01:05:43.530 --> 01:05:44.810
<v Speaker 0>does that not make generating

01:05:45.770 --> 01:05:47.530
<v Speaker 0>I'm not gonna say easy, but, you know,

01:05:47.530 --> 01:05:49.450
<v Speaker 0>if I can just do s traced s

01:05:49.450 --> 01:05:51.450
<v Speaker 0>c l s, and then assuming I just

01:05:51.450 --> 01:05:52.970
<v Speaker 0>do, like Yeah.

01:05:54.730 --> 01:05:55.610
<v Speaker 3>Print

01:05:55.690 --> 01:05:56.570
<v Speaker 3>by

01:06:00.005 --> 01:06:01.285
<v Speaker 3>how did that not work?

01:06:04.964 --> 01:06:05.925
<v Speaker 0>I mean and

01:06:07.125 --> 01:06:09.650
<v Speaker 0>that should work. I know it. Yeah. Yeah.

01:06:10.610 --> 01:06:12.530
<v Speaker 2>Yeah. We had some discussions last week about

01:06:12.530 --> 01:06:14.930
<v Speaker 2>how we could record those profiles, and the

01:06:14.930 --> 01:06:17.090
<v Speaker 2>idea was, yeah, we could some run something

01:06:17.090 --> 01:06:18.610
<v Speaker 2>like S Trace, but S Trace has a

01:06:18.610 --> 01:06:20.050
<v Speaker 2>has a performance implication.

01:06:20.290 --> 01:06:21.970
<v Speaker 2>And if we, for example, run it without

01:06:21.970 --> 01:06:23.810
<v Speaker 2>minus c, then we get all the details

01:06:23.810 --> 01:06:25.404
<v Speaker 2>which we don't need. So we also get

01:06:25.404 --> 01:06:26.845
<v Speaker 2>all the paths for

01:06:27.404 --> 01:06:29.724
<v Speaker 2>which got accessed during the loading of the

01:06:29.724 --> 01:06:31.244
<v Speaker 2>libraries and things like that.

01:06:32.045 --> 01:06:32.685
<v Speaker 2>And

01:06:33.005 --> 01:06:35.244
<v Speaker 2>there is some new feature on the Linux

01:06:35.244 --> 01:06:37.644
<v Speaker 2>kernel. I'm not sure if it's that new,

01:06:37.644 --> 01:06:39.244
<v Speaker 2>but it's called the second modifier.

01:06:39.950 --> 01:06:41.950
<v Speaker 2>And this is pretty interesting because we can

01:06:41.950 --> 01:06:44.990
<v Speaker 2>create some client server architecture we call in

01:06:44.990 --> 01:06:46.670
<v Speaker 2>between seconds. So we can have something like

01:06:46.670 --> 01:06:47.470
<v Speaker 2>a server,

01:06:47.869 --> 01:06:51.069
<v Speaker 2>which is monitoring the actual application, and the

01:06:51.069 --> 01:06:53.710
<v Speaker 2>server provides a file descriptor for clients.

01:06:53.710 --> 01:06:54.190
<v Speaker 2>So

01:06:56.085 --> 01:06:58.085
<v Speaker 2>which could be a different process, on our

01:06:58.085 --> 01:06:59.605
<v Speaker 2>case, probably the operator.

01:06:59.765 --> 01:07:01.445
<v Speaker 2>And this operator gets then all the ZIS

01:07:01.445 --> 01:07:04.405
<v Speaker 2>calls during the or due to the second

01:07:04.405 --> 01:07:05.685
<v Speaker 2>notifier feature.

01:07:05.925 --> 01:07:08.005
<v Speaker 2>And one idea would was to

01:07:08.165 --> 01:07:10.680
<v Speaker 2>yeah. How could we now bring this into

01:07:10.680 --> 01:07:11.640
<v Speaker 2>the operator?

01:07:12.680 --> 01:07:15.400
<v Speaker 2>And there are multiple ways. For example, there's

01:07:15.400 --> 01:07:17.640
<v Speaker 2>a different container runtime like c run, which

01:07:17.640 --> 01:07:19.880
<v Speaker 2>now propose something like a plug in mechanism

01:07:19.880 --> 01:07:20.840
<v Speaker 2>that we can

01:07:21.320 --> 01:07:24.040
<v Speaker 2>have something like a notifier plug in to

01:07:24.040 --> 01:07:25.640
<v Speaker 2>record to record the profiles.

01:07:26.075 --> 01:07:26.795
<v Speaker 2>And

01:07:27.035 --> 01:07:28.954
<v Speaker 2>but all of those topics are not really

01:07:28.954 --> 01:07:31.434
<v Speaker 2>standard. So we also have to say, okay.

01:07:31.434 --> 01:07:33.674
<v Speaker 2>We probably can't support it on every machine

01:07:33.674 --> 01:07:35.674
<v Speaker 2>because, yeah, not every Linux can also support

01:07:35.674 --> 01:07:37.355
<v Speaker 2>the second modifier, for example.

01:07:37.835 --> 01:07:39.595
<v Speaker 2>There are also some ideas about

01:07:40.000 --> 01:07:42.800
<v Speaker 2>to do the same, like like the s

01:07:42.800 --> 01:07:45.120
<v Speaker 2>trace thing. We could compile a little BPF

01:07:45.120 --> 01:07:47.600
<v Speaker 2>module into something like an OCI hook, and

01:07:47.600 --> 01:07:49.920
<v Speaker 2>this OCI hook will be trickled right before

01:07:49.920 --> 01:07:51.280
<v Speaker 2>the workload starts,

01:07:51.360 --> 01:07:53.280
<v Speaker 2>gets the process ID, and then starts the

01:07:53.280 --> 01:07:55.705
<v Speaker 2>recording, and then puts the recorded SIS calls

01:07:55.705 --> 01:07:57.305
<v Speaker 2>into a predefined

01:07:57.305 --> 01:07:58.505
<v Speaker 2>JSON blob.

01:07:59.065 --> 01:08:01.385
<v Speaker 2>Yeah. But this would also not work, for

01:08:01.385 --> 01:08:03.385
<v Speaker 2>example, with container d because container d does

01:08:03.385 --> 01:08:06.505
<v Speaker 2>not support OCI hooks yet. Or, for example,

01:08:06.505 --> 01:08:08.185
<v Speaker 2>it would also not work with Docker.

01:08:08.345 --> 01:08:08.825
<v Speaker 2>So

01:08:09.300 --> 01:08:10.740
<v Speaker 2>we are just evaluating,

01:08:10.740 --> 01:08:12.500
<v Speaker 2>and we are thinking about possible

01:08:12.500 --> 01:08:14.660
<v Speaker 2>solutions around it. But

01:08:15.300 --> 01:08:18.340
<v Speaker 2>it's not that easy. Right? So Yeah. It

01:08:19.780 --> 01:08:22.340
<v Speaker 0>this is really is is really high for

01:08:22.340 --> 01:08:23.939
<v Speaker 2>those profiles. If we want to have something

01:08:23.939 --> 01:08:26.845
<v Speaker 2>like s trace, what is also BPF trace,

01:08:26.845 --> 01:08:28.205
<v Speaker 2>for example, which can

01:08:28.445 --> 01:08:29.805
<v Speaker 2>where we can register

01:08:30.045 --> 01:08:32.604
<v Speaker 2>tracing points for this calls on the system,

01:08:32.604 --> 01:08:34.205
<v Speaker 2>but then we would record this this calls

01:08:34.205 --> 01:08:35.965
<v Speaker 2>on the whole system and would have to

01:08:35.965 --> 01:08:38.524
<v Speaker 2>look for our process so our container process.

01:08:39.079 --> 01:08:41.079
<v Speaker 0>I guess the the challenge there, though, is,

01:08:41.079 --> 01:08:43.159
<v Speaker 0>right, is that in order to use s

01:08:43.159 --> 01:08:46.039
<v Speaker 0>trace or BPF to extract syscalls from the

01:08:46.039 --> 01:08:48.679
<v Speaker 0>application, you have to run through every code

01:08:48.679 --> 01:08:51.079
<v Speaker 0>path. Right? Because, like, even just with that

01:08:51.079 --> 01:08:53.079
<v Speaker 0>really trivial l s example that you showed

01:08:53.079 --> 01:08:55.444
<v Speaker 0>me that the syscalls that were used between

01:08:55.444 --> 01:08:57.685
<v Speaker 0>one director and another were different. Like, so

01:08:57.685 --> 01:08:59.444
<v Speaker 0>if I were to profile or try to

01:08:59.444 --> 01:09:01.764
<v Speaker 0>create create profile for engine x and

01:09:02.165 --> 01:09:04.165
<v Speaker 0>someone just hadn't had a certain endpoint that

01:09:04.165 --> 01:09:06.564
<v Speaker 0>uses, like, a redirect syntax, then you'd never

01:09:06.564 --> 01:09:08.580
<v Speaker 0>know that syscall was there. Yeah. Is there

01:09:08.580 --> 01:09:10.899
<v Speaker 0>not I'm sure there isn't or maybe there

01:09:10.899 --> 01:09:13.380
<v Speaker 0>is. But, like, I'm assuming just analyzing the

01:09:13.380 --> 01:09:15.540
<v Speaker 0>ELF binary itself is the best way to

01:09:15.540 --> 01:09:16.579
<v Speaker 0>get that information.

01:09:16.979 --> 01:09:18.260
<v Speaker 0>Is that not possible?

01:09:19.380 --> 01:09:21.859
<v Speaker 2>Yeah. This could be possible as well.

01:09:24.955 --> 01:09:26.795
<v Speaker 2>I mean, if the binary is stripped, then

01:09:26.795 --> 01:09:28.155
<v Speaker 2>we don't have a chance to get to

01:09:28.155 --> 01:09:29.595
<v Speaker 2>this call back in.

01:09:32.555 --> 01:09:34.155
<v Speaker 0>So you said that at

01:09:34.395 --> 01:09:36.475
<v Speaker 0>the start of this kind of stream,

01:09:37.010 --> 01:09:39.090
<v Speaker 0>you've been working on a way to generate

01:09:39.090 --> 01:09:41.090
<v Speaker 0>profiles. Is that something you you wanna walk

01:09:41.090 --> 01:09:41.729
<v Speaker 0>us through?

01:09:42.130 --> 01:09:43.890
<v Speaker 2>Yeah. Yeah. I can show it I can

01:09:43.890 --> 01:09:45.250
<v Speaker 2>show it to you if you want.

01:09:46.370 --> 01:09:48.770
<v Speaker 2>Let me just share the screen here.

01:09:49.495 --> 01:09:51.495
<v Speaker 2>Well, you should see see it now. Right?

01:09:51.495 --> 01:09:54.055
<v Speaker 2>So I just played around a bit. So

01:09:56.135 --> 01:09:57.495
<v Speaker 2>yeah. I mean,

01:09:58.055 --> 01:10:00.295
<v Speaker 2>I have this OCI hook installed,

01:10:00.855 --> 01:10:03.450
<v Speaker 2>which is just a JSON which executes a

01:10:03.450 --> 01:10:06.410
<v Speaker 2>binary right before the container workload starts. And

01:10:06.410 --> 01:10:08.489
<v Speaker 2>I have to be run Podman as a

01:10:08.489 --> 01:10:10.650
<v Speaker 2>privileged user here because otherwise, the the hook

01:10:10.650 --> 01:10:13.210
<v Speaker 2>wouldn't be able to export through record the

01:10:13.210 --> 01:10:15.210
<v Speaker 2>SYS calls. So this is a real drawback.

01:10:15.210 --> 01:10:16.969
<v Speaker 2>We have to increase the

01:10:17.565 --> 01:10:20.844
<v Speaker 2>or decrease the security footprint by doing something

01:10:20.844 --> 01:10:23.085
<v Speaker 2>like recording those calls. So this could be

01:10:23.085 --> 01:10:25.005
<v Speaker 2>could be a problem in the future. But

01:10:25.005 --> 01:10:26.285
<v Speaker 2>what we would

01:10:26.285 --> 01:10:27.805
<v Speaker 2>have to do now is just to add

01:10:27.805 --> 01:10:30.125
<v Speaker 2>another annotation to the workload, which is this,

01:10:30.125 --> 01:10:32.445
<v Speaker 2>and that way, IO container strace this call.

01:10:32.960 --> 01:10:35.840
<v Speaker 2>And then we can specify an output file.

01:10:36.800 --> 01:10:37.360
<v Speaker 2>And,

01:10:38.400 --> 01:10:40.560
<v Speaker 2>for example, for other container runtimes like Cryo,

01:10:40.560 --> 01:10:41.840
<v Speaker 2>it would work in the same way. We

01:10:41.840 --> 01:10:44.560
<v Speaker 2>could also just add this annotation to the

01:10:44.560 --> 01:10:47.440
<v Speaker 2>Kubernetes workload and then record the profile into

01:10:47.440 --> 01:10:48.000
<v Speaker 2>a directory.

01:10:48.465 --> 01:10:50.785
<v Speaker 2>And if we now run something like let

01:10:50.785 --> 01:10:52.945
<v Speaker 2>me just change that. Yeah. We

01:10:53.425 --> 01:10:54.625
<v Speaker 2>run echo

01:10:54.705 --> 01:10:55.505
<v Speaker 2>high

01:10:55.665 --> 01:10:58.705
<v Speaker 2>without attaching a TTY and without doing anything

01:10:58.705 --> 01:10:59.505
<v Speaker 2>in bash,

01:11:00.065 --> 01:11:01.989
<v Speaker 2>then it should succeed.

01:11:01.989 --> 01:11:05.030
<v Speaker 2>Yeah. This succeed. And if we now look

01:11:05.030 --> 01:11:07.030
<v Speaker 2>into the profile,

01:11:09.190 --> 01:11:10.869
<v Speaker 2>then we can see that we have now

01:11:10.869 --> 01:11:13.030
<v Speaker 2>a generated profile here. So it has the

01:11:13.030 --> 01:11:15.750
<v Speaker 2>same default action for error and some just

01:11:15.750 --> 01:11:16.389
<v Speaker 2>calls in.

01:11:18.765 --> 01:11:19.405
<v Speaker 2>Also,

01:11:19.805 --> 01:11:21.085
<v Speaker 2>me just save that.

01:11:22.125 --> 01:11:24.765
<v Speaker 2>And now let's do something different. Now we

01:11:24.765 --> 01:11:28.125
<v Speaker 2>want to to attach a TTY and also

01:11:28.125 --> 01:11:30.045
<v Speaker 2>run echo high. I just

01:11:31.680 --> 01:11:33.520
<v Speaker 2>just override it, and then we

01:11:34.800 --> 01:11:36.559
<v Speaker 2>have a look into that.

01:11:39.440 --> 01:11:41.679
<v Speaker 2>Save it as my second profile.

01:11:42.480 --> 01:11:44.000
<v Speaker 2>And if we know this goes,

01:11:45.715 --> 01:11:48.115
<v Speaker 2>and we can see that we have, for

01:11:48.115 --> 01:11:50.435
<v Speaker 2>example, different set of SYS calls here,

01:11:50.675 --> 01:11:52.035
<v Speaker 2>which is pretty interesting.

01:11:53.635 --> 01:11:54.835
<v Speaker 0>Very cool.

01:11:55.395 --> 01:11:56.595
<v Speaker 0>And I guess

01:11:57.315 --> 01:11:59.120
<v Speaker 0>sorry, Nico. I mean, we can yeah. We

01:11:59.120 --> 01:12:00.880
<v Speaker 2>can we could also do something that's just

01:12:00.880 --> 01:12:03.440
<v Speaker 2>attached to the profile and run something like

01:12:03.760 --> 01:12:06.160
<v Speaker 2>l s or what what else could we

01:12:06.160 --> 01:12:07.680
<v Speaker 2>do. We could do something like r and

01:12:07.680 --> 01:12:09.040
<v Speaker 2>d and remove

01:12:09.200 --> 01:12:11.280
<v Speaker 2>or we could create a directory,

01:12:11.680 --> 01:12:13.280
<v Speaker 2>and we could remove it again.

01:12:14.005 --> 01:12:15.605
<v Speaker 2>But this works. And if we now Can

01:12:15.605 --> 01:12:17.685
<v Speaker 0>you click our minus nine one? Oh,

01:12:18.645 --> 01:12:19.285
<v Speaker 2>we

01:12:20.485 --> 01:12:22.165
<v Speaker 2>can try it afterwards. One second.

01:12:23.285 --> 01:12:25.925
<v Speaker 2>And we know it created a third profile.

01:12:25.925 --> 01:12:26.805
<v Speaker 2>It's just

01:12:27.125 --> 01:12:29.125
<v Speaker 2>with our second and our third.

01:12:29.940 --> 01:12:32.020
<v Speaker 2>We can see that we have, yeah, many

01:12:32.020 --> 01:12:33.860
<v Speaker 2>more. We have to execute batch, for example.

01:12:33.860 --> 01:12:35.940
<v Speaker 2>We have to fork a process. We also

01:12:35.940 --> 01:12:37.220
<v Speaker 2>have to get

01:12:37.220 --> 01:12:39.620
<v Speaker 2>our current directory, for example. Otherwise, we would

01:12:39.620 --> 01:12:42.100
<v Speaker 2>not be able to change into a directory.

01:12:42.420 --> 01:12:44.260
<v Speaker 2>And we also should have yeah. We have

01:12:44.260 --> 01:12:44.820
<v Speaker 2>on deal.

01:12:45.895 --> 01:12:47.815
<v Speaker 2>And we also have

01:12:47.975 --> 01:12:50.055
<v Speaker 2>MKDO, probably. Yes.

01:12:51.895 --> 01:12:54.375
<v Speaker 0>So how did you exit that container?

01:12:54.775 --> 01:12:55.815
<v Speaker 0>Control d?

01:12:56.295 --> 01:12:57.015
<v Speaker 2>Yes.

01:12:57.255 --> 01:12:59.255
<v Speaker 0>And because I don't see the exit Cisco.

01:12:59.255 --> 01:13:02.830
<v Speaker 0>A completely random observation, but it wasn't there.

01:13:02.830 --> 01:13:04.590
<v Speaker 2>I mean, mean, I'm not sure if it

01:13:04.590 --> 01:13:07.150
<v Speaker 2>triggers exit in the back, but let me

01:13:07.150 --> 01:13:07.950
<v Speaker 2>just check.

01:13:13.390 --> 01:13:15.870
<v Speaker 2>Yeah. The second and the fourth, probably.

01:13:17.495 --> 01:13:19.335
<v Speaker 2>Okay. For batch, we need all those SYS

01:13:19.335 --> 01:13:20.775
<v Speaker 2>calls down here

01:13:21.255 --> 01:13:22.855
<v Speaker 2>and exit.

01:13:23.415 --> 01:13:25.494
<v Speaker 2>Exit is part of both, probably.

01:13:25.735 --> 01:13:27.735
<v Speaker 2>No. It's not. It's exit group. It's not

01:13:27.735 --> 01:13:29.415
<v Speaker 2>exit group, but it's part of both. I'm

01:13:29.415 --> 01:13:31.015
<v Speaker 2>pretty sure that I if I run control

01:13:31.015 --> 01:13:33.829
<v Speaker 2>v, then it will do something like detaching

01:13:33.829 --> 01:13:35.750
<v Speaker 2>from the TTi and then doing something like

01:13:35.750 --> 01:13:38.550
<v Speaker 2>exit exit group or exit the process.

01:13:39.429 --> 01:13:41.030
<v Speaker 0>Okay. So here's a

01:13:41.429 --> 01:13:42.389
<v Speaker 0>random

01:13:42.550 --> 01:13:43.269
<v Speaker 0>thought.

01:13:43.909 --> 01:13:45.989
<v Speaker 0>Can you just run that against

01:13:46.389 --> 01:13:47.110
<v Speaker 0>NGINX?

01:13:47.545 --> 01:13:49.865
<v Speaker 0>Oh, yeah. Mean, how how how accurate would

01:13:49.865 --> 01:13:51.545
<v Speaker 0>that be to the default profile that is

01:13:51.545 --> 01:13:53.625
<v Speaker 0>shipping on the second popular end?

01:13:53.865 --> 01:13:54.505
<v Speaker 2>Yeah.

01:13:55.465 --> 01:13:57.784
<v Speaker 2>I can do that. So NGINX.

01:13:58.825 --> 01:14:00.585
<v Speaker 2>Okay. It was And I mean, I 19.

01:14:01.260 --> 01:14:03.739
<v Speaker 0>I'm curious now. Right? So you from what

01:14:03.739 --> 01:14:05.340
<v Speaker 0>you've been telling me so far, this dash

01:14:05.340 --> 01:14:07.820
<v Speaker 0>dash annotation on Podman is using something called

01:14:07.820 --> 01:14:10.219
<v Speaker 0>an OCI hook. Can you explain that that

01:14:10.219 --> 01:14:12.219
<v Speaker 0>to me? What what what does OCI hooks

01:14:12.219 --> 01:14:12.859
<v Speaker 0>enable?

01:14:13.579 --> 01:14:15.500
<v Speaker 2>Yeah. So the OCI

01:14:17.395 --> 01:14:18.835
<v Speaker 2>runtime specification

01:14:18.835 --> 01:14:21.475
<v Speaker 2>has a direct feature baked into, which is

01:14:21.475 --> 01:14:24.195
<v Speaker 2>called OCI hooks. And runtimes can support it

01:14:24.195 --> 01:14:26.995
<v Speaker 2>to, for example, run a pre start hook,

01:14:27.315 --> 01:14:28.594
<v Speaker 2>which

01:14:28.755 --> 01:14:31.955
<v Speaker 2>gets executed directly before the container workload starts.

01:14:32.540 --> 01:14:35.260
<v Speaker 2>And this hook is just can can can

01:14:35.260 --> 01:14:36.380
<v Speaker 2>be any binary,

01:14:37.100 --> 01:14:38.940
<v Speaker 2>and then we can pass our information down

01:14:38.940 --> 01:14:41.660
<v Speaker 2>to that hook like the output path of

01:14:41.660 --> 01:14:42.300
<v Speaker 2>our

01:14:42.620 --> 01:14:44.139
<v Speaker 2>yeah. For our profile.

01:14:44.620 --> 01:14:47.625
<v Speaker 2>And but not every container runtime supports it

01:14:47.625 --> 01:14:49.065
<v Speaker 2>for now because I'm not sure. I don't

01:14:49.065 --> 01:14:51.065
<v Speaker 2>think that container t supports it,

01:14:51.305 --> 01:14:53.145
<v Speaker 2>and this is going to be a problem

01:14:53.145 --> 01:14:55.865
<v Speaker 2>to bring a feature via an OCI hook

01:14:55.865 --> 01:14:57.305
<v Speaker 2>down to to all users.

01:14:59.930 --> 01:15:02.010
<v Speaker 2>Yeah. So now we have this NGINX still

01:15:02.010 --> 01:15:04.330
<v Speaker 2>running. I just can exit it again.

01:15:04.730 --> 01:15:08.250
<v Speaker 2>And if we look at NGINX

01:15:08.250 --> 01:15:10.170
<v Speaker 2>dot JSON, then it looks like this.

01:15:11.705 --> 01:15:13.625
<v Speaker 2>And we can also I just would like

01:15:13.625 --> 01:15:15.065
<v Speaker 2>to reformat it.

01:15:18.745 --> 01:15:22.025
<v Speaker 2>And we can also diff this one

01:15:23.225 --> 01:15:26.505
<v Speaker 2>with the one in the seccomp operator.

01:15:29.329 --> 01:15:30.690
<v Speaker 0>I mean, what I would expect to see

01:15:30.690 --> 01:15:33.090
<v Speaker 0>different here is that there's no accept call

01:15:33.090 --> 01:15:34.929
<v Speaker 0>because we never browse to it. So I

01:15:34.929 --> 01:15:36.690
<v Speaker 0>guess things like that would cause the profiles

01:15:36.690 --> 01:15:37.729
<v Speaker 0>to be different.

01:15:38.849 --> 01:15:40.769
<v Speaker 2>I

01:15:41.730 --> 01:15:43.329
<v Speaker 2>think we

01:15:45.335 --> 01:15:47.575
<v Speaker 2>I think I have to resort

01:15:47.575 --> 01:15:49.655
<v Speaker 2>this one. Yeah. There there you go. There's

01:15:49.655 --> 01:15:52.295
<v Speaker 0>no except. So Yeah. Because we never went

01:15:52.295 --> 01:15:54.215
<v Speaker 0>down that code path. We never actually made

01:15:54.215 --> 01:15:56.409
<v Speaker 0>a request to reset it. It's a very

01:15:56.409 --> 01:15:58.650
<v Speaker 0>cool tool. That's that's nice. I mean, that

01:15:58.650 --> 01:16:00.409
<v Speaker 0>would make this so so much easier for

01:16:00.409 --> 01:16:02.409
<v Speaker 0>people to I can just share that.

01:16:03.610 --> 01:16:05.050
<v Speaker 2>It's this one.

01:16:06.570 --> 01:16:08.649
<v Speaker 2>But it's also, say, on BPF hook.

01:16:09.210 --> 01:16:09.530
<v Speaker 2>Yeah.

01:16:11.825 --> 01:16:13.585
<v Speaker 2>Has to run with a higher set of

01:16:13.585 --> 01:16:16.945
<v Speaker 2>privileges. We have to need something like admin.

01:16:16.945 --> 01:16:18.945
<v Speaker 2>Yeah. So this is pretty high privileged

01:16:19.105 --> 01:16:21.985
<v Speaker 2>when it turns to security from the security

01:16:21.985 --> 01:16:22.945
<v Speaker 2>perspective.

01:16:23.185 --> 01:16:25.665
<v Speaker 2>And we also need the kernel headers

01:16:25.930 --> 01:16:26.889
<v Speaker 2>on disk,

01:16:26.970 --> 01:16:29.210
<v Speaker 2>which is also kind of strange, but we

01:16:29.210 --> 01:16:31.210
<v Speaker 2>have to compile a BPF module on the

01:16:31.210 --> 01:16:33.610
<v Speaker 2>fly right before executing the hook.

01:16:33.930 --> 01:16:36.410
<v Speaker 2>And, yeah, therefore, we would have a need

01:16:36.410 --> 01:16:38.090
<v Speaker 2>for for having the actual

01:16:38.925 --> 01:16:42.204
<v Speaker 2>kernel headers for the currently running kernel on

01:16:42.204 --> 01:16:42.844
<v Speaker 2>disk.

01:16:43.085 --> 01:16:43.324
<v Speaker 2>So

01:16:44.364 --> 01:16:46.525
<v Speaker 0>So is it possible then if say, I'm

01:16:46.525 --> 01:16:49.085
<v Speaker 0>using Kryo as a run time for Kubernetes

01:16:49.085 --> 01:16:51.804
<v Speaker 0>and just to enable that tracing on all

01:16:51.804 --> 01:16:54.125
<v Speaker 0>my applications for a week, two weeks, and

01:16:54.125 --> 01:16:55.539
<v Speaker 0>and collect profiles.

01:16:55.620 --> 01:16:58.020
<v Speaker 2>Yeah. This this would be this would be

01:16:58.020 --> 01:16:59.780
<v Speaker 2>possible, but I'm not sure if it's a

01:16:59.780 --> 01:17:02.100
<v Speaker 2>good idea to do that into in production.

01:17:02.100 --> 01:17:04.500
<v Speaker 2>Right? So I'm not completely sure about the

01:17:04.500 --> 01:17:07.380
<v Speaker 2>security implications we we introduced

01:17:07.380 --> 01:17:08.100
<v Speaker 2>with that hook.

01:17:09.485 --> 01:17:12.045
<v Speaker 0>So we we also have another question, which

01:17:11.965 --> 01:17:13.565
<v Speaker 0>think is is touching on a few things

01:17:13.565 --> 01:17:16.364
<v Speaker 0>that we've covered today. So Igor is saying,

01:17:16.364 --> 01:17:18.445
<v Speaker 0>it may be hard to debug a failing

01:17:18.445 --> 01:17:21.324
<v Speaker 0>application with a second profile active, which I

01:17:21.324 --> 01:17:23.405
<v Speaker 0>think we've kind of already confirmed because I

01:17:23.405 --> 01:17:24.764
<v Speaker 0>couldn't exec them to the container.

01:17:25.930 --> 01:17:27.770
<v Speaker 0>What are what are my options for

01:17:28.090 --> 01:17:30.010
<v Speaker 0>can I change a profile

01:17:31.050 --> 01:17:32.810
<v Speaker 0>and line actively, or do I always have

01:17:32.810 --> 01:17:35.290
<v Speaker 0>to restart the process to make a modification

01:17:35.290 --> 01:17:36.810
<v Speaker 0>to that? No.

01:17:36.970 --> 01:17:38.730
<v Speaker 2>I mean, we have to restart the process.

01:17:38.730 --> 01:17:41.095
<v Speaker 2>Right? And this is also some implication we

01:17:41.095 --> 01:17:44.215
<v Speaker 2>had. It's about a general architecture of Kubernetes.

01:17:44.215 --> 01:17:45.735
<v Speaker 2>Right? If you change an annotation,

01:17:45.975 --> 01:17:46.455
<v Speaker 2>then

01:17:46.855 --> 01:17:49.575
<v Speaker 2>it it restarts the profile. But for example,

01:17:49.575 --> 01:17:51.335
<v Speaker 2>if you change the content of the profile,

01:17:51.335 --> 01:17:53.255
<v Speaker 2>which is not directly referenced by the or

01:17:53.255 --> 01:17:55.310
<v Speaker 2>which is only referenced by text by the

01:17:55.310 --> 01:17:57.630
<v Speaker 2>annotation, then it won't have any influence on

01:17:57.630 --> 01:17:58.750
<v Speaker 2>the actual workload.

01:17:58.910 --> 01:18:00.030
<v Speaker 2>So yeah.

01:18:01.950 --> 01:18:02.750
<v Speaker 3>Yeah.

01:18:02.910 --> 01:18:06.590
<v Speaker 2>We thought about solving this somehow, but it's

01:18:06.590 --> 01:18:08.750
<v Speaker 2>probably not cool if the operator comes around

01:18:08.750 --> 01:18:12.045
<v Speaker 2>and restarts your workload because just the second

01:18:12.045 --> 01:18:14.205
<v Speaker 2>profile updated, something like this.

01:18:15.565 --> 01:18:17.244
<v Speaker 2>Not not that easy decision.

01:18:18.765 --> 01:18:21.244
<v Speaker 1>Yeah. Well, that that brings up another point.

01:18:21.645 --> 01:18:23.165
<v Speaker 1>I mean, a big thing right now is

01:18:23.165 --> 01:18:25.245
<v Speaker 1>if you actually delete a config map,

01:18:26.660 --> 01:18:28.740
<v Speaker 1>then it's not going to actually get cleaned

01:18:28.740 --> 01:18:30.020
<v Speaker 1>up out of the directory.

01:18:30.260 --> 01:18:32.340
<v Speaker 1>So that that profile still exists even if

01:18:32.340 --> 01:18:34.420
<v Speaker 1>you delete it. Delete the config map that

01:18:34.420 --> 01:18:35.540
<v Speaker 1>led to its creation.

01:18:36.100 --> 01:18:38.740
<v Speaker 1>And you may think, you know, initially, that's

01:18:38.740 --> 01:18:40.420
<v Speaker 1>not a good thing and, you know, maybe

01:18:40.420 --> 01:18:40.820
<v Speaker 1>it's not.

01:18:41.495 --> 01:18:43.895
<v Speaker 1>But what if you delete a config map

01:18:43.895 --> 01:18:46.375
<v Speaker 1>and there's a pod using that set comp

01:18:46.375 --> 01:18:48.775
<v Speaker 1>profile and then later on that pod gets

01:18:48.775 --> 01:18:49.574
<v Speaker 1>restarted?

01:18:49.575 --> 01:18:51.255
<v Speaker 1>It's just gonna fail, right, because it's not

01:18:51.255 --> 01:18:52.695
<v Speaker 1>gonna be able to access that set comp

01:18:52.695 --> 01:18:54.775
<v Speaker 1>profile. So right now, we're we're thinking about

01:18:58.250 --> 01:18:59.690
<v Speaker 1>actually, I muted there.

01:18:59.850 --> 01:19:01.050
<v Speaker 1>How we want to,

01:19:01.370 --> 01:19:02.889
<v Speaker 1>be able to clean those up.

01:19:03.530 --> 01:19:05.530
<v Speaker 1>And one way to do that is to,

01:19:05.530 --> 01:19:06.730
<v Speaker 1>you know, get a list of all the

01:19:06.730 --> 01:19:09.275
<v Speaker 1>pods and say, alright. I'm going to clean

01:19:09.275 --> 01:19:11.195
<v Speaker 1>this up if no pod is currently using

01:19:11.195 --> 01:19:12.635
<v Speaker 1>this seccomp profile.

01:19:12.795 --> 01:19:14.635
<v Speaker 1>So that case, you don't get, you know,

01:19:14.635 --> 01:19:16.155
<v Speaker 1>where, like, a pod gets evicted and then

01:19:16.155 --> 01:19:17.114
<v Speaker 1>can't restart.

01:19:18.715 --> 01:19:20.635
<v Speaker 1>Or you could do things like, you know,

01:19:20.635 --> 01:19:23.119
<v Speaker 1>keep a a global list, you know, somehow

01:19:23.119 --> 01:19:25.999
<v Speaker 1>of of what pods are are are there.

01:19:26.000 --> 01:19:27.760
<v Speaker 1>So just trying to do that without, you

01:19:27.760 --> 01:19:29.840
<v Speaker 1>know, huge performance implications.

01:19:30.480 --> 01:19:32.800
<v Speaker 1>But in general, like, pods and, you know,

01:19:32.800 --> 01:19:34.800
<v Speaker 1>getting pods with a certain annotation is not

01:19:35.165 --> 01:19:37.165
<v Speaker 1>a super big deal, especially, you know, we

01:19:37.165 --> 01:19:38.845
<v Speaker 1>don't anticipate that people are gonna gonna be

01:19:38.845 --> 01:19:41.565
<v Speaker 1>deleting set comp profiles, like, multiple times a

01:19:41.565 --> 01:19:43.005
<v Speaker 1>second or something like that.

01:19:43.405 --> 01:19:45.645
<v Speaker 1>So that's likely something we can do, but

01:19:45.805 --> 01:19:47.485
<v Speaker 1>it may also be something where we want

01:19:47.485 --> 01:19:49.805
<v Speaker 1>to be configurable depending on how folks wanna

01:19:49.805 --> 01:19:50.525
<v Speaker 1>interact with it.

01:19:53.010 --> 01:19:54.130
<v Speaker 0>Awesome. So

01:19:55.010 --> 01:19:58.209
<v Speaker 0>is there anything with the seccomp

01:19:58.610 --> 01:20:01.409
<v Speaker 0>operator that we haven't covered yet?

01:20:01.730 --> 01:20:02.850
<v Speaker 0>Is it what am I missing?

01:20:04.074 --> 01:20:05.675
<v Speaker 1>I think we've covered most of it in

01:20:05.675 --> 01:20:07.915
<v Speaker 1>its current state. We have, like and we've

01:20:07.915 --> 01:20:09.434
<v Speaker 1>mentioned a lot of a lot of ideas

01:20:09.434 --> 01:20:10.314
<v Speaker 1>for the future.

01:20:10.635 --> 01:20:13.275
<v Speaker 1>So if anyone's tuned in today and and

01:20:13.275 --> 01:20:15.434
<v Speaker 1>saying, you know, I I need this functionality,

01:20:15.434 --> 01:20:17.355
<v Speaker 1>like, definitely open an issue. Definitely show up

01:20:17.355 --> 01:20:19.840
<v Speaker 1>to our meetings. There's also the set comp

01:20:19.840 --> 01:20:21.200
<v Speaker 1>operator profile

01:20:21.200 --> 01:20:23.600
<v Speaker 1>or channel in Kubernetes Slack.

01:20:24.400 --> 01:20:26.480
<v Speaker 1>One big thing, which I don't think we

01:20:26.480 --> 01:20:28.720
<v Speaker 1>touched on yet or maybe I just forgot,

01:20:29.360 --> 01:20:31.920
<v Speaker 1>is we're thinking about right now renaming

01:20:32.080 --> 01:20:33.520
<v Speaker 1>this to the security operator.

01:20:34.325 --> 01:20:36.485
<v Speaker 1>The reason for that being is that you

01:20:36.485 --> 01:20:38.725
<v Speaker 1>can pretty easily extend this functionality to some

01:20:38.725 --> 01:20:40.805
<v Speaker 1>other things, namely the most obvious would be

01:20:40.805 --> 01:20:41.765
<v Speaker 1>AppArmor,

01:20:42.405 --> 01:20:44.565
<v Speaker 1>which is kind of similar to to set

01:20:44.565 --> 01:20:45.125
<v Speaker 1>comp,

01:20:45.845 --> 01:20:47.285
<v Speaker 1>and we'd like to be able to support

01:20:47.285 --> 01:20:49.125
<v Speaker 1>that. And I I think Sasha is actually

01:20:49.125 --> 01:20:51.980
<v Speaker 1>leading the charge for making AppArmor GA as

01:20:51.980 --> 01:20:54.380
<v Speaker 1>well in Kubernetes for an upcoming release, hopefully,

01:20:54.380 --> 01:20:55.420
<v Speaker 1>one dot 20.

01:20:56.860 --> 01:20:58.460
<v Speaker 1>And so as that happens, it'd be a

01:20:58.460 --> 01:21:01.020
<v Speaker 1>great time to also introduce AppArmor functionality into

01:21:01.020 --> 01:21:01.580
<v Speaker 1>the operator.

01:21:02.725 --> 01:21:04.405
<v Speaker 1>And then there's also some other things we

01:21:04.405 --> 01:21:06.485
<v Speaker 1>can do with security. So in general, set

01:21:06.485 --> 01:21:07.685
<v Speaker 1>comp is one the things we think is

01:21:07.685 --> 01:21:08.405
<v Speaker 1>valuable

01:21:09.845 --> 01:21:12.245
<v Speaker 1>and is underused because it's it's hard to

01:21:12.245 --> 01:21:14.005
<v Speaker 1>work with, and we'd like to extend that

01:21:14.005 --> 01:21:14.965
<v Speaker 1>to other things as well.

01:21:15.740 --> 01:21:17.820
<v Speaker 1>So, you know, that kind of opens up

01:21:17.820 --> 01:21:19.740
<v Speaker 1>the scope of the operator quite a bit.

01:21:19.820 --> 01:21:21.740
<v Speaker 1>But, hopefully, it becomes something that people can

01:21:21.740 --> 01:21:23.260
<v Speaker 1>kind of, like, trust on to help make

01:21:23.260 --> 01:21:25.740
<v Speaker 1>using security features of Kubernetes

01:21:25.820 --> 01:21:26.620
<v Speaker 1>a lot easier.

01:21:29.025 --> 01:21:29.664
<v Speaker 0>Awesome.

01:21:30.065 --> 01:21:32.385
<v Speaker 0>I guess the the next question after that

01:21:32.385 --> 01:21:33.184
<v Speaker 0>then is

01:21:33.505 --> 01:21:35.025
<v Speaker 0>what's next for this Stack On top here

01:21:35.025 --> 01:21:36.945
<v Speaker 0>besides the our commerce stuff? Is there anything

01:21:36.945 --> 01:21:39.025
<v Speaker 0>else coming coming soon?

01:21:40.304 --> 01:21:42.705
<v Speaker 2>Yeah. So we are working on the CRD,

01:21:42.970 --> 01:21:45.210
<v Speaker 2>which should which is based on the RCA

01:21:45.210 --> 01:21:46.409
<v Speaker 2>runtime specs.

01:21:46.650 --> 01:21:49.370
<v Speaker 2>The second profile specification, so it should be

01:21:50.010 --> 01:21:52.170
<v Speaker 2>give us some good opportunity to validate the

01:21:52.170 --> 01:21:53.210
<v Speaker 2>content early on.

01:21:53.610 --> 01:21:54.170
<v Speaker 2>And

01:21:54.650 --> 01:21:56.890
<v Speaker 2>then we are working on the recording, but

01:21:56.625 --> 01:21:58.705
<v Speaker 2>I'm I'm not sure if the recording makes

01:21:58.705 --> 01:22:01.185
<v Speaker 2>it into a feature anytime soon, or maybe

01:22:01.185 --> 01:22:02.785
<v Speaker 2>we are target we are trying to target

01:22:02.785 --> 01:22:05.105
<v Speaker 2>another release for this year. And yeah.

01:22:06.065 --> 01:22:07.905
<v Speaker 2>Let's see. At least as a proof of

01:22:07.905 --> 01:22:10.465
<v Speaker 2>concept, we could edit, and then we could

01:22:10.465 --> 01:22:12.385
<v Speaker 2>try to get some feedback from users.

01:22:14.120 --> 01:22:16.600
<v Speaker 0>Awesome. Well, I just wanna thank you both

01:22:16.600 --> 01:22:19.400
<v Speaker 0>for making seccomp understandable for me and for

01:22:19.400 --> 01:22:21.320
<v Speaker 0>making it easier for everyone with your hard

01:22:21.320 --> 01:22:24.520
<v Speaker 0>work. Like, honestly, I didn't expect seccomp being

01:22:24.520 --> 01:22:26.525
<v Speaker 0>something that I would kinda be able to

01:22:26.525 --> 01:22:27.965
<v Speaker 0>get a handle on in such a short

01:22:27.965 --> 01:22:29.165
<v Speaker 0>amount of time. And I think you've both

01:22:29.165 --> 01:22:30.605
<v Speaker 0>done a great job of kinda walking through

01:22:30.605 --> 01:22:32.844
<v Speaker 0>this. That's amazing. Thank you. Thank you. That

01:22:32.925 --> 01:22:34.925
<v Speaker 0>which means you're both now committed for helping

01:22:34.925 --> 01:22:37.165
<v Speaker 0>me understand the SEO Linux future date because

01:22:37.165 --> 01:22:38.764
<v Speaker 0>I have no idea how the hell that

01:22:38.764 --> 01:22:39.324
<v Speaker 0>works either.

01:22:40.180 --> 01:22:42.340
<v Speaker 1>Yeah. Well, that that's another area where, you

01:22:42.340 --> 01:22:43.780
<v Speaker 1>know, it brings some of that functionality to

01:22:43.780 --> 01:22:45.780
<v Speaker 1>the operator would be would be awesome. So

01:22:45.940 --> 01:22:47.540
<v Speaker 1>but thanks for having us on. It's been

01:22:47.540 --> 01:22:48.420
<v Speaker 1>super fun.

01:22:49.300 --> 01:22:51.140
<v Speaker 1>And outside of this episode, I love all

01:22:51.140 --> 01:22:52.900
<v Speaker 1>the stuff you're doing with the the other

01:22:52.900 --> 01:22:54.820
<v Speaker 1>folks you've had on as well. So appreciate

01:22:54.820 --> 01:22:57.225
<v Speaker 1>you making good good content to help people

01:22:57.225 --> 01:22:58.985
<v Speaker 1>learn and, you know, be aware of things

01:22:58.985 --> 01:23:00.185
<v Speaker 1>happening in the community.

01:23:00.985 --> 01:23:03.305
<v Speaker 0>Thank you very much. That's awesome. Feel happy

01:23:03.305 --> 01:23:04.745
<v Speaker 0>now. Well,

01:23:04.985 --> 01:23:06.345
<v Speaker 0>I will let you both get back to

01:23:06.345 --> 01:23:07.065
<v Speaker 0>your days.

01:23:07.465 --> 01:23:09.145
<v Speaker 0>If anyone has questions, you can reach out

01:23:09.145 --> 01:23:10.469
<v Speaker 0>to all of us on Twitter. All of

01:23:10.469 --> 01:23:12.150
<v Speaker 0>our handles are nicely on the screen. Of

01:23:12.150 --> 01:23:13.749
<v Speaker 0>course, there's comments on YouTube.

01:23:13.989 --> 01:23:15.750
<v Speaker 0>And thank you very much for watching, and

01:23:15.750 --> 01:23:17.989
<v Speaker 0>have a nice day all. Thank you. See

01:23:17.989 --> 01:23:19.590
<v Speaker 2>you. Bye bye. Cheers. Bye.
