WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 2009a7eb-5aef-4e5f-8841-96c4766391fb
Created: 2025-04-29T22:06:58.102Z
Duration: 4398.0225
Channels: 1

00:01:02.199 --> 00:01:03.079
<v Speaker 0>Hello,

00:01:03.159 --> 00:01:06.165
<v Speaker 0>and welcome to today's session. Today, I am

00:01:06.165 --> 00:01:08.965
<v Speaker 0>joined by David Simmons, head of developer relations

00:01:08.965 --> 00:01:10.245
<v Speaker 0>request DB,

00:01:10.965 --> 00:01:12.405
<v Speaker 0>and we are going to take a look

00:01:12.405 --> 00:01:13.685
<v Speaker 0>at Kubernetes.

00:01:13.845 --> 00:01:16.405
<v Speaker 0>How are you, David? I'm great. I love

00:01:16.405 --> 00:01:18.830
<v Speaker 1>the sig sig v there at the end

00:01:18.830 --> 00:01:20.750
<v Speaker 1>of your countdown. That's awesome.

00:01:22.430 --> 00:01:24.670
<v Speaker 0>Yeah. I wanted to do something that is

00:01:24.670 --> 00:01:27.230
<v Speaker 0>kinda geeky and took inspiration from the IT

00:01:27.230 --> 00:01:29.150
<v Speaker 0>crowd. I really like the their intro and

00:01:29.150 --> 00:01:31.070
<v Speaker 0>the ending where it's kinda windows crashes and

00:01:31.070 --> 00:01:33.790
<v Speaker 0>it it does that weird trailing thing. Yep.

00:01:33.790 --> 00:01:35.604
<v Speaker 0>But I I don't have the creative expertise

00:01:35.604 --> 00:01:38.165
<v Speaker 0>to actually do anything that intricate, flashing a

00:01:38.165 --> 00:01:39.525
<v Speaker 0>red banner on the screen.

00:01:39.845 --> 00:01:41.604
<v Speaker 0>I got that better. You got that better.

00:01:41.604 --> 00:01:43.845
<v Speaker 1>Yeah. I love the IT crowd too. That's

00:01:43.845 --> 00:01:45.284
<v Speaker 1>that's fantastic.

00:01:45.845 --> 00:01:46.965
<v Speaker 0>Oh, yeah. It's so funny.

00:01:47.710 --> 00:01:50.510
<v Speaker 0>So today's session, let's

00:01:50.510 --> 00:01:52.510
<v Speaker 0>let's start with a question actually.

00:01:53.390 --> 00:01:56.190
<v Speaker 0>In a word, what is your knowledge or

00:01:56.190 --> 00:01:57.549
<v Speaker 0>expertise of Kubernetes?

00:01:59.229 --> 00:02:01.310
<v Speaker 1>Well, the the word I would choose, I

00:02:01.310 --> 00:02:03.534
<v Speaker 1>probably don't wanna say on on a a

00:02:03.534 --> 00:02:05.615
<v Speaker 1>live private, but I

00:02:05.854 --> 00:02:07.215
<v Speaker 1>so here's my thing.

00:02:07.775 --> 00:02:09.134
<v Speaker 1>And this is why I sort of, you

00:02:09.134 --> 00:02:10.735
<v Speaker 1>know, talk to you about doing this is

00:02:10.735 --> 00:02:11.215
<v Speaker 1>I

00:02:12.095 --> 00:02:12.975
<v Speaker 1>understand

00:02:13.295 --> 00:02:15.535
<v Speaker 1>the point of Docker for the most part.

00:02:16.840 --> 00:02:19.640
<v Speaker 1>I don't like using it mostly because the

00:02:19.640 --> 00:02:22.120
<v Speaker 1>Mac version of Docker will suck the life

00:02:22.120 --> 00:02:24.840
<v Speaker 1>out of absolutely any machine

00:02:25.320 --> 00:02:26.200
<v Speaker 1>so far.

00:02:27.000 --> 00:02:28.600
<v Speaker 1>And so Kubernetes

00:02:28.600 --> 00:02:31.080
<v Speaker 1>is just, like seems to me to be

00:02:31.315 --> 00:02:34.275
<v Speaker 1>just extra Docker, and I don't get it.

00:02:35.955 --> 00:02:37.315
<v Speaker 1>Because I don't most of that, you know,

00:02:37.315 --> 00:02:38.834
<v Speaker 1>people say, oh, I'm gonna run, you know,

00:02:38.834 --> 00:02:41.235
<v Speaker 1>these 16 Docker containers. Like, if I tried

00:02:41.235 --> 00:02:43.475
<v Speaker 1>to run 16 Docker containers on this laptop,

00:02:43.475 --> 00:02:45.235
<v Speaker 1>it would die, and it's a brand new

00:02:45.235 --> 00:02:46.435
<v Speaker 1>Mac laptop. So

00:02:48.800 --> 00:02:52.000
<v Speaker 0>Yeah. I like that description. Kubernetes is extra

00:02:52.000 --> 00:02:53.760
<v Speaker 0>docker. I think we'll try and build on

00:02:53.760 --> 00:02:56.000
<v Speaker 0>that today a little bit. But you're right.

00:02:56.000 --> 00:02:57.840
<v Speaker 0>Definitely right. But docker for Mac, where it

00:02:57.840 --> 00:02:59.760
<v Speaker 0>is the easiest way to kind of have

00:02:59.760 --> 00:03:02.320
<v Speaker 0>a working Kubernetes control planning on a Mac.

00:03:02.915 --> 00:03:05.875
<v Speaker 0>The battery consumption is is pretty ridiculous. I

00:03:05.875 --> 00:03:08.435
<v Speaker 0>am very vigilant on closing it now

00:03:08.595 --> 00:03:10.755
<v Speaker 0>whenever I definitely do not need it.

00:03:11.474 --> 00:03:13.955
<v Speaker 0>So that's great. We're starting from essentially

00:03:14.515 --> 00:03:16.610
<v Speaker 0>a fresh slate and

00:03:16.690 --> 00:03:18.690
<v Speaker 0>you're gonna keep me right as we kind

00:03:18.690 --> 00:03:20.210
<v Speaker 0>of go through today's

00:03:20.370 --> 00:03:23.250
<v Speaker 0>I guess it's a tutorial of sorts where

00:03:23.410 --> 00:03:25.650
<v Speaker 0>I will do stuff with Kubernetes. You're gonna

00:03:25.650 --> 00:03:27.730
<v Speaker 0>probe me with loads of questions. We're gonna

00:03:27.730 --> 00:03:30.849
<v Speaker 0>try and get something working on Kubernetes and

00:03:30.849 --> 00:03:31.330
<v Speaker 0>hopefully,

00:03:33.145 --> 00:03:33.785
<v Speaker 0>I

00:03:33.945 --> 00:03:35.625
<v Speaker 0>have the ability to explain what the hell

00:03:35.625 --> 00:03:37.145
<v Speaker 0>I'm doing, which is questionable

00:03:37.625 --> 00:03:38.985
<v Speaker 0>at best, but we will see how we

00:03:38.985 --> 00:03:40.985
<v Speaker 0>get on. That's where the fun part is.

00:03:41.865 --> 00:03:43.705
<v Speaker 0>Yeah. So what I would say for the

00:03:43.705 --> 00:03:46.025
<v Speaker 0>people that are watching on YouTube, feel free

00:03:46.025 --> 00:03:48.480
<v Speaker 0>to liberally use the comments. If you wish

00:03:48.480 --> 00:03:49.920
<v Speaker 0>to ask questions, we will make sure that

00:03:49.920 --> 00:03:51.680
<v Speaker 0>we try and tackle them as we go.

00:03:51.680 --> 00:03:54.000
<v Speaker 0>So leave comments, we will address them.

00:03:54.959 --> 00:03:56.640
<v Speaker 0>I think what I'll do is just share

00:03:56.640 --> 00:03:59.120
<v Speaker 0>my screen and we'll dive straight in.

00:04:00.480 --> 00:04:02.560
<v Speaker 0>This maybe seems a bit brave,

00:04:02.720 --> 00:04:02.959
<v Speaker 0>but

00:04:05.165 --> 00:04:05.885
<v Speaker 0>there.

00:04:08.365 --> 00:04:09.485
<v Speaker 0>Awesome. Okay.

00:04:10.365 --> 00:04:12.845
<v Speaker 0>So this is just the Kubernetes website. What

00:04:12.845 --> 00:04:15.325
<v Speaker 0>I would say today is I am

00:04:15.485 --> 00:04:17.485
<v Speaker 0>I would say rather knowledgeable in Kubernetes. I

00:04:17.485 --> 00:04:19.250
<v Speaker 0>know what I'm doing, but I have not

00:04:19.250 --> 00:04:21.410
<v Speaker 0>memorized all of the YAML in the world.

00:04:21.410 --> 00:04:23.410
<v Speaker 0>So where I am not able to generate

00:04:23.410 --> 00:04:25.169
<v Speaker 0>the YAML for my Versus Code Editor, I

00:04:25.169 --> 00:04:27.169
<v Speaker 0>will be using the documentation and that is

00:04:27.169 --> 00:04:29.970
<v Speaker 0>okay. Nobody expects you to remember how to

00:04:29.970 --> 00:04:32.050
<v Speaker 0>type tens of thousands of different combinations of

00:04:32.050 --> 00:04:32.449
<v Speaker 0>YAML.

00:04:33.004 --> 00:04:34.604
<v Speaker 0>We'll just normalize that.

00:04:35.085 --> 00:04:37.884
<v Speaker 1>Then I was just telling somebody that I'm

00:04:37.884 --> 00:04:40.125
<v Speaker 1>mentoring. The number of times I still have

00:04:40.125 --> 00:04:42.044
<v Speaker 1>to Google, you know, how to do a

00:04:42.044 --> 00:04:44.365
<v Speaker 1>four loop in whatever given language I happen

00:04:44.365 --> 00:04:46.525
<v Speaker 1>to be using that day is ridiculous. I've

00:04:46.525 --> 00:04:49.780
<v Speaker 1>been coding for thirty years. So don't don't

00:04:49.780 --> 00:04:51.300
<v Speaker 1>ever let somebody tell you that you should

00:04:51.300 --> 00:04:52.500
<v Speaker 1>know all this stuff.

00:04:52.900 --> 00:04:55.300
<v Speaker 0>Oh, yeah. For sure. Definitely. Like, the longer

00:04:55.300 --> 00:04:57.460
<v Speaker 0>you do this, the more you forget, and

00:04:57.460 --> 00:04:59.139
<v Speaker 0>you always have to kinda look that stuff

00:04:59.139 --> 00:05:01.220
<v Speaker 0>up. It's Mhmm. Natural. In fact, I would

00:05:01.585 --> 00:05:03.025
<v Speaker 0>think people that are good at this are

00:05:03.025 --> 00:05:04.784
<v Speaker 0>people that are really good at understanding the

00:05:04.784 --> 00:05:06.705
<v Speaker 0>problem, but enough to ask the right question

00:05:06.705 --> 00:05:08.784
<v Speaker 0>to then go find the answer rather than

00:05:08.784 --> 00:05:11.264
<v Speaker 0>just inherently knowing the answer. Right.

00:05:12.224 --> 00:05:14.944
<v Speaker 0>Alright. So let's I just reset my Kubernetes

00:05:14.944 --> 00:05:16.990
<v Speaker 0>cluster, which is what the screen is here.

00:05:16.990 --> 00:05:18.510
<v Speaker 0>It's done. Now,

00:05:19.390 --> 00:05:21.070
<v Speaker 0>I am gonna type a few commands. I

00:05:21.070 --> 00:05:22.990
<v Speaker 0>don't and then we'll we'll backtrack a little

00:05:22.990 --> 00:05:24.750
<v Speaker 0>bit and talk about what Kubernetes is doing,

00:05:24.750 --> 00:05:25.230
<v Speaker 0>but

00:05:25.790 --> 00:05:26.590
<v Speaker 0>our main

00:05:26.990 --> 00:05:29.150
<v Speaker 0>way that we are going to consume Kubernetes

00:05:29.150 --> 00:05:31.470
<v Speaker 0>today is through the kube control command line

00:05:31.470 --> 00:05:31.950
<v Speaker 0>application,

00:05:32.574 --> 00:05:34.495
<v Speaker 0>which we can run on our terminal.

00:05:35.055 --> 00:05:36.655
<v Speaker 0>And the first primitive that we're gonna cover

00:05:36.655 --> 00:05:38.655
<v Speaker 0>today is a concept of a pod.

00:05:39.455 --> 00:05:40.815
<v Speaker 0>So when I run get pods, you'll see

00:05:40.815 --> 00:05:42.335
<v Speaker 0>that I have nothing. So that's just me

00:05:42.335 --> 00:05:44.495
<v Speaker 0>doing the whole magician sleeve thing. Right? There's

00:05:44.495 --> 00:05:46.175
<v Speaker 0>nothing pre running here. This is an empty

00:05:46.175 --> 00:05:49.560
<v Speaker 0>vanilla generic Docker for Mac Kubernetes cluster.

00:05:50.360 --> 00:05:52.200
<v Speaker 0>So let's back up a little bit and

00:05:52.200 --> 00:05:54.040
<v Speaker 0>I'll go back to just our nice little

00:05:54.040 --> 00:05:55.320
<v Speaker 0>talking mode.

00:05:56.120 --> 00:05:58.680
<v Speaker 0>As let's try and break down and understand

00:05:59.240 --> 00:06:02.040
<v Speaker 0>what we should cover as a backstory or

00:06:02.040 --> 00:06:03.855
<v Speaker 0>context first. So

00:06:05.375 --> 00:06:06.175
<v Speaker 0>containers,

00:06:06.255 --> 00:06:08.975
<v Speaker 0>the docker a bit of this conversation. Kubernetes

00:06:08.975 --> 00:06:12.095
<v Speaker 0>is a control plane for managing and orchestrating

00:06:12.095 --> 00:06:14.655
<v Speaker 0>containers across one or more machines.

00:06:16.719 --> 00:06:19.280
<v Speaker 0>If we were to explain a container,

00:06:20.240 --> 00:06:22.240
<v Speaker 0>then we have to kinda get down into

00:06:22.240 --> 00:06:23.840
<v Speaker 0>some Linux primitives.

00:06:25.039 --> 00:06:27.199
<v Speaker 0>So a container has a way of using

00:06:27.199 --> 00:06:30.294
<v Speaker 0>the Linux kernel to segment certain aspects of

00:06:30.294 --> 00:06:32.855
<v Speaker 0>the the process that is running to protect

00:06:32.855 --> 00:06:34.615
<v Speaker 0>it from the rest of the host.

00:06:35.495 --> 00:06:37.095
<v Speaker 1>Right. That maybe is that sounds a little

00:06:37.095 --> 00:06:39.255
<v Speaker 0>bit more complicated than I maybe intended it

00:06:39.255 --> 00:06:39.574
<v Speaker 0>to be.

00:06:41.169 --> 00:06:43.650
<v Speaker 1>No. The the container part makes sense to

00:06:43.650 --> 00:06:46.129
<v Speaker 1>me and and sort of having something to

00:06:46.129 --> 00:06:48.610
<v Speaker 1>control all the different containers makes sense to

00:06:48.610 --> 00:06:51.729
<v Speaker 1>me. But coming from you know, having grown

00:06:51.729 --> 00:06:55.009
<v Speaker 1>up in the the old world, you know,

00:06:55.009 --> 00:06:55.889
<v Speaker 1>client server,

00:06:57.105 --> 00:06:58.705
<v Speaker 1>you know, each

00:06:58.865 --> 00:07:01.585
<v Speaker 1>sort of server has its own

00:07:03.825 --> 00:07:04.945
<v Speaker 1>part in this.

00:07:05.585 --> 00:07:06.865
<v Speaker 1>A lot of what I don't get is

00:07:06.865 --> 00:07:09.505
<v Speaker 1>how how you can spin up extra containers

00:07:09.505 --> 00:07:11.425
<v Speaker 1>and have the rest of the containers know

00:07:11.425 --> 00:07:13.180
<v Speaker 1>about what's going on. Right?

00:07:15.980 --> 00:07:18.460
<v Speaker 1>And how this actually helps me rather than,

00:07:18.460 --> 00:07:19.980
<v Speaker 1>why don't I just have, you know, a

00:07:19.980 --> 00:07:22.060
<v Speaker 1>big server that can do this and and

00:07:22.060 --> 00:07:23.180
<v Speaker 1>call it a day?

00:07:24.745 --> 00:07:25.865
<v Speaker 0>Hi, doggy.

00:07:26.264 --> 00:07:26.985
<v Speaker 0>Yeah.

00:07:29.305 --> 00:07:32.825
<v Speaker 0>Rawkode. So you're comfortable with the container. Excellent.

00:07:33.384 --> 00:07:35.145
<v Speaker 0>And you wanna understand the sum of the

00:07:35.145 --> 00:07:37.944
<v Speaker 0>magic components of what Kubernetes is doing. Yes.

00:07:37.944 --> 00:07:39.785
<v Speaker 0>So with that, let's go straight into, like,

00:07:40.500 --> 00:07:42.660
<v Speaker 0>let's go into the pod one zero one

00:07:42.660 --> 00:07:43.620
<v Speaker 0>then. So

00:07:44.500 --> 00:07:46.900
<v Speaker 0>let me just make sure this is readable.

00:07:47.139 --> 00:07:47.940
<v Speaker 0>So

00:07:51.780 --> 00:07:53.060
<v Speaker 0>Oh, I have to save that as a

00:07:53.060 --> 00:07:54.419
<v Speaker 0>file. Okay. So

00:07:55.585 --> 00:07:56.705
<v Speaker 0>I'm on computer.

00:07:57.345 --> 00:08:00.465
<v Speaker 1>It could it it could entirely turn into

00:08:00.465 --> 00:08:02.945
<v Speaker 1>a a a live session of me yelling

00:08:02.945 --> 00:08:04.705
<v Speaker 1>at my dogs, by the way. Just so

00:08:04.705 --> 00:08:05.425
<v Speaker 1>we know.

00:08:07.185 --> 00:08:09.345
<v Speaker 0>That that's I'm perfectly comfortable with that. Don't

00:08:09.345 --> 00:08:11.590
<v Speaker 0>you worry about it. Now, I'm gonna just

00:08:11.590 --> 00:08:13.990
<v Speaker 0>quickly get this to as minimal as I

00:08:13.990 --> 00:08:15.270
<v Speaker 0>need it to be and then we'll go

00:08:15.270 --> 00:08:17.510
<v Speaker 0>through the different components of this. So

00:08:18.949 --> 00:08:20.389
<v Speaker 0>we can't deploy

00:08:20.789 --> 00:08:22.949
<v Speaker 0>a container to Kubernetes,

00:08:24.594 --> 00:08:27.074
<v Speaker 0>really. What we deploy to Kubernetes,

00:08:27.235 --> 00:08:28.995
<v Speaker 0>it's a primitive called a pod,

00:08:29.474 --> 00:08:32.595
<v Speaker 0>and a pod is a collection of one

00:08:32.595 --> 00:08:33.955
<v Speaker 0>or more containers.

00:08:34.834 --> 00:08:36.995
<v Speaker 0>So Okay. With with Docker, you could do

00:08:36.995 --> 00:08:39.220
<v Speaker 0>Docker run NGINX, and what that does is

00:08:39.220 --> 00:08:42.419
<v Speaker 0>it creates Linux name spaces and control groups

00:08:42.419 --> 00:08:44.500
<v Speaker 0>to kinda wrap that process up in its

00:08:44.500 --> 00:08:47.220
<v Speaker 0>own little bubble. Yep. But Kubernetes doesn't do

00:08:47.220 --> 00:08:49.380
<v Speaker 0>that. It actually creates the bubble and then

00:08:49.380 --> 00:08:51.060
<v Speaker 0>puts containers inside of it and it can

00:08:51.060 --> 00:08:52.660
<v Speaker 0>have more than one container that share the

00:08:52.660 --> 00:08:54.019
<v Speaker 0>same resources within that bubble.

00:08:55.275 --> 00:08:57.035
<v Speaker 0>I mean, I'm not comfortable with that analogy,

00:08:57.035 --> 00:08:58.635
<v Speaker 0>but it's what I just blurbed out my

00:08:58.635 --> 00:08:59.915
<v Speaker 0>mouth. So I'm gonna stick with it for

00:08:59.915 --> 00:09:01.115
<v Speaker 0>now. Okay.

00:09:01.675 --> 00:09:03.835
<v Speaker 1>It actually that actually makes sense to me,

00:09:03.835 --> 00:09:04.315
<v Speaker 1>which

00:09:04.715 --> 00:09:07.355
<v Speaker 1>is either really good or really scary depending.

00:09:09.010 --> 00:09:10.210
<v Speaker 0>Excellent. So

00:09:10.530 --> 00:09:12.210
<v Speaker 0>we've got a concept of a pod and

00:09:12.210 --> 00:09:13.570
<v Speaker 0>we can think of it as a container

00:09:13.570 --> 00:09:15.330
<v Speaker 0>for now, but it's it's

00:09:15.330 --> 00:09:16.930
<v Speaker 0>important to understand that it can be one

00:09:16.930 --> 00:09:19.090
<v Speaker 0>or more containers and it's not it's not

00:09:19.090 --> 00:09:19.970
<v Speaker 0>directly

00:09:20.050 --> 00:09:20.610
<v Speaker 0>mappable.

00:09:21.264 --> 00:09:24.225
<v Speaker 0>Now Kubernetes is all YAML driven.

00:09:24.385 --> 00:09:26.705
<v Speaker 0>You can use JSON, but you know,

00:09:26.945 --> 00:09:28.385
<v Speaker 0>that would be a bit cruel.

00:09:28.625 --> 00:09:30.625
<v Speaker 0>YAML is slightly a bit easier to work

00:09:30.625 --> 00:09:32.065
<v Speaker 0>with because we have the option of doing

00:09:32.065 --> 00:09:33.345
<v Speaker 0>comments as well. So

00:09:35.360 --> 00:09:38.160
<v Speaker 0>when we describe the YAML for any resource

00:09:38.160 --> 00:09:40.160
<v Speaker 0>in Kubernetes, so you know this format works

00:09:40.160 --> 00:09:42.079
<v Speaker 0>for every different type of resource that we're

00:09:42.079 --> 00:09:43.200
<v Speaker 0>gonna work with today.

00:09:43.519 --> 00:09:45.279
<v Speaker 0>Then generally what we have is an API

00:09:45.279 --> 00:09:47.759
<v Speaker 0>version and a kind. The API version and

00:09:47.759 --> 00:09:49.360
<v Speaker 0>kind perform or

00:09:50.375 --> 00:09:52.615
<v Speaker 0>they're like a key that says this is

00:09:52.615 --> 00:09:54.375
<v Speaker 0>the object type that we're working with. So

00:09:54.375 --> 00:09:55.975
<v Speaker 0>you know, imagine there was a b two

00:09:55.975 --> 00:09:57.415
<v Speaker 0>pod and a b one pod, although that's

00:09:57.415 --> 00:09:57.975
<v Speaker 0>not the These

00:09:58.855 --> 00:10:01.095
<v Speaker 0>two are directly linked and will very rarely

00:10:01.095 --> 00:10:01.335
<v Speaker 0>change.

00:10:02.010 --> 00:10:03.450
<v Speaker 0>We then have the option to pass and

00:10:03.450 --> 00:10:05.370
<v Speaker 0>submit a data. So you know, this is

00:10:05.370 --> 00:10:07.130
<v Speaker 0>just pretty much as it looks. We have

00:10:07.130 --> 00:10:08.650
<v Speaker 0>the ability to say the name of this

00:10:08.650 --> 00:10:10.330
<v Speaker 0>pod is going to be NGINX and we

00:10:10.330 --> 00:10:12.170
<v Speaker 0>can apply some labels to it, which allow

00:10:12.170 --> 00:10:14.570
<v Speaker 0>us to query those pods using our own

00:10:14.570 --> 00:10:16.730
<v Speaker 0>selectors from the command line. Okay.

00:10:17.425 --> 00:10:18.065
<v Speaker 0>So

00:10:18.225 --> 00:10:20.545
<v Speaker 0>while that is important, the start of that,

00:10:20.545 --> 00:10:22.385
<v Speaker 0>it doesn't actually affect what we run when

00:10:22.385 --> 00:10:23.905
<v Speaker 0>we apply this to the cluster.

00:10:25.025 --> 00:10:26.785
<v Speaker 0>To do that, we have something called a

00:10:26.785 --> 00:10:28.305
<v Speaker 0>spec or a specification

00:10:28.305 --> 00:10:31.329
<v Speaker 0>and we have the the most important key

00:10:31.329 --> 00:10:32.930
<v Speaker 0>in a pod is to list the containers

00:10:32.930 --> 00:10:35.250
<v Speaker 0>that this pod is going to have. Okay.

00:10:35.250 --> 00:10:36.769
<v Speaker 0>And we're only gonna have one for the

00:10:36.769 --> 00:10:37.490
<v Speaker 0>time being,

00:10:37.810 --> 00:10:40.449
<v Speaker 0>but this pod spec here, or this container

00:10:40.449 --> 00:10:42.290
<v Speaker 0>spec is very similar to what you would

00:10:42.290 --> 00:10:43.730
<v Speaker 0>do on the command line with a docker

00:10:43.730 --> 00:10:46.795
<v Speaker 0>container run or docker run command. Right. So

00:10:46.795 --> 00:10:48.555
<v Speaker 0>we can give it a name, we tell

00:10:48.555 --> 00:10:50.154
<v Speaker 0>it the image that we wish to run,

00:10:50.394 --> 00:10:51.834
<v Speaker 0>and I'm just going to give this a

00:10:51.834 --> 00:10:53.595
<v Speaker 0>hint that it exposes a port for us.

00:10:53.595 --> 00:10:55.915
<v Speaker 0>We're saying NGINX has a port 80 that

00:10:55.915 --> 00:10:57.675
<v Speaker 0>will be available where I can send requests

00:10:57.675 --> 00:10:59.035
<v Speaker 0>to this container.

00:11:00.555 --> 00:11:01.195
<v Speaker 0>And that's it.

00:11:01.920 --> 00:11:02.560
<v Speaker 0>So

00:11:03.200 --> 00:11:05.520
<v Speaker 0>that means that I can do a cube

00:11:05.520 --> 00:11:06.320
<v Speaker 0>control

00:11:06.720 --> 00:11:07.760
<v Speaker 0>apply.

00:11:07.920 --> 00:11:11.120
<v Speaker 0>We use the dash f, so flag

00:11:11.120 --> 00:11:13.200
<v Speaker 0>to say that we want to apply a

00:11:13.200 --> 00:11:13.760
<v Speaker 0>file

00:11:14.185 --> 00:11:16.185
<v Speaker 0>and I can pass in our pod dot

00:11:16.185 --> 00:11:17.625
<v Speaker 0>yaml. Okay.

00:11:18.345 --> 00:11:19.865
<v Speaker 0>And that creates a pod.

00:11:21.305 --> 00:11:21.945
<v Speaker 0>Now

00:11:22.185 --> 00:11:23.785
<v Speaker 0>because I know my muscle memory is gonna

00:11:23.785 --> 00:11:26.024
<v Speaker 0>kick in soon, I'll clarify that I am

00:11:26.024 --> 00:11:28.425
<v Speaker 0>very likely just to start typing key as

00:11:28.425 --> 00:11:29.384
<v Speaker 0>just an alias

00:11:30.089 --> 00:11:31.450
<v Speaker 0>or cube control.

00:11:32.329 --> 00:11:34.170
<v Speaker 0>Oh, well now I've just broken that alias

00:11:34.170 --> 00:11:35.930
<v Speaker 0>for cube control. What I

00:11:37.370 --> 00:11:39.130
<v Speaker 0>meant was that k is alias to cube

00:11:39.130 --> 00:11:42.010
<v Speaker 0>control. So I can really run get pods

00:11:42.195 --> 00:11:44.115
<v Speaker 0>and what we see here is that we

00:11:44.115 --> 00:11:45.635
<v Speaker 0>have a pod called NGINX, which is what

00:11:45.635 --> 00:11:47.875
<v Speaker 0>we called it. We can see this ready

00:11:47.875 --> 00:11:49.715
<v Speaker 0>but here it says one of one. That

00:11:49.715 --> 00:11:51.795
<v Speaker 0>means one container was in the spec and

00:11:51.795 --> 00:11:54.435
<v Speaker 0>we have one running and the status is

00:11:54.435 --> 00:11:56.275
<v Speaker 0>here. It has not been restarted

00:11:56.910 --> 00:11:58.910
<v Speaker 0>and it was created twenty four seconds ago.

00:12:00.029 --> 00:12:02.910
<v Speaker 1>So when you applied that pod dot yaml,

00:12:02.910 --> 00:12:05.630
<v Speaker 1>it not all it it basically it it

00:12:05.630 --> 00:12:08.350
<v Speaker 1>started that pod and started it running.

00:12:11.305 --> 00:12:13.465
<v Speaker 0>Yes. That is correct. So

00:12:13.945 --> 00:12:16.345
<v Speaker 0>we can go into the details of how

00:12:16.665 --> 00:12:19.705
<v Speaker 0>this kind of declarative approach works from the

00:12:19.705 --> 00:12:21.785
<v Speaker 0>API point of view or the or the,

00:12:21.785 --> 00:12:22.105
<v Speaker 0>you know,

00:12:22.960 --> 00:12:24.480
<v Speaker 0>We we can talk about how the controllers

00:12:24.480 --> 00:12:26.240
<v Speaker 0>within Kubernetes work if you want or we

00:12:26.240 --> 00:12:28.160
<v Speaker 0>can keep focusing on the workload a bit.

00:12:28.160 --> 00:12:29.680
<v Speaker 0>So that's entirely up to you. Let let's

00:12:29.680 --> 00:12:31.840
<v Speaker 1>do the workload a bit because that's that's

00:12:32.560 --> 00:12:34.320
<v Speaker 0>Alright. So we'll just go in the assumption

00:12:34.320 --> 00:12:36.000
<v Speaker 0>for now and maybe we'll we'll change that

00:12:36.000 --> 00:12:37.595
<v Speaker 0>later. But when you apply something to the

00:12:37.595 --> 00:12:39.515
<v Speaker 0>cluster, something creates that and it works. That's

00:12:39.515 --> 00:12:40.075
<v Speaker 0>I'm happy with that assumption for Okay.

00:12:42.315 --> 00:12:43.595
<v Speaker 0>So we have a few

00:12:44.555 --> 00:12:47.115
<v Speaker 0>a few introspection commands that become really important

00:12:47.115 --> 00:12:49.580
<v Speaker 0>when working with our Kubernetes clusters. So you

00:12:49.580 --> 00:12:51.180
<v Speaker 0>know, we've seen that we ran get pods

00:12:51.180 --> 00:12:52.700
<v Speaker 0>which gets me a list of pods.

00:12:53.020 --> 00:12:54.460
<v Speaker 0>I can also add a name to that

00:12:54.460 --> 00:12:56.940
<v Speaker 0>to fetch a single pod which does nothing

00:12:56.940 --> 00:13:00.300
<v Speaker 0>differently right now. Right. But one really important

00:13:00.300 --> 00:13:02.220
<v Speaker 0>thing when you're working with Kubernetes is that

00:13:02.220 --> 00:13:03.500
<v Speaker 0>sometimes you'll

00:13:04.795 --> 00:13:07.515
<v Speaker 0>actually want to get a bit more information.

00:13:08.155 --> 00:13:10.235
<v Speaker 0>So you can use the dash o flag,

00:13:10.555 --> 00:13:12.475
<v Speaker 0>which just means get me this pod information

00:13:12.475 --> 00:13:14.555
<v Speaker 0>in YAML and we can actually see a

00:13:14.555 --> 00:13:16.475
<v Speaker 0>lot more information about what is going on

00:13:16.475 --> 00:13:17.515
<v Speaker 0>underneath the hood here.

00:13:18.709 --> 00:13:20.630
<v Speaker 0>One other option we have is wide,

00:13:21.029 --> 00:13:22.949
<v Speaker 0>which just gives us again a bit more

00:13:22.949 --> 00:13:23.670
<v Speaker 0>information.

00:13:23.750 --> 00:13:24.230
<v Speaker 0>So

00:13:25.269 --> 00:13:27.269
<v Speaker 0>the dash o yaml one is

00:13:28.149 --> 00:13:30.949
<v Speaker 0>slightly more important because it's a really good

00:13:30.165 --> 00:13:33.365
<v Speaker 0>hacky way of then writing pod2.yaml

00:13:33.365 --> 00:13:35.845
<v Speaker 0>and then being able to generate fake resources.

00:13:36.084 --> 00:13:38.084
<v Speaker 0>But we won't cover that just now

00:13:39.204 --> 00:13:40.725
<v Speaker 0>because I'll end up rambling.

00:13:42.324 --> 00:13:42.565
<v Speaker 0>So

00:13:43.290 --> 00:13:46.010
<v Speaker 0>that's a pod. One or more containers, we

00:13:46.010 --> 00:13:47.930
<v Speaker 0>create the YAML, we apply it.

00:13:49.529 --> 00:13:51.770
<v Speaker 0>One thing is really important about pods

00:13:51.930 --> 00:13:54.410
<v Speaker 0>is that they are the lowest common denominator

00:13:54.410 --> 00:13:56.410
<v Speaker 0>or the primitive or the atomic unit of

00:13:56.410 --> 00:13:58.410
<v Speaker 0>what we make run inside Kubernetes.

00:13:59.455 --> 00:14:01.375
<v Speaker 0>However, what is really important is that this

00:14:01.375 --> 00:14:04.255
<v Speaker 0>is an immutable pods back. Pods cannot be

00:14:04.255 --> 00:14:04.895
<v Speaker 0>changed.

00:14:06.575 --> 00:14:09.375
<v Speaker 0>So if I were to kind of prove

00:14:09.375 --> 00:14:10.095
<v Speaker 0>that,

00:14:10.495 --> 00:14:13.535
<v Speaker 0>let's say I want to do NGINX two

00:14:13.535 --> 00:14:15.759
<v Speaker 0>or if that's Yeah. Let's do that NGINX

00:14:15.759 --> 00:14:16.399
<v Speaker 0>two

00:14:16.879 --> 00:14:18.720
<v Speaker 0>and then I try to reapply.

00:14:21.360 --> 00:14:22.639
<v Speaker 0>You can see here

00:14:23.839 --> 00:14:27.199
<v Speaker 0>that the pod NGINX is invalid spec forbidden,

00:14:27.199 --> 00:14:29.915
<v Speaker 0>pod updates may not change fields other than

00:14:29.915 --> 00:14:31.274
<v Speaker 0>container image

00:14:31.995 --> 00:14:35.115
<v Speaker 0>or active deadline seconds or tolerations.

00:14:35.514 --> 00:14:37.115
<v Speaker 0>So you cannot modify

00:14:37.195 --> 00:14:39.195
<v Speaker 0>anything particularly useful

00:14:39.755 --> 00:14:41.435
<v Speaker 0>about a pod directly.

00:14:41.915 --> 00:14:42.954
<v Speaker 1>Once it's running?

00:14:44.260 --> 00:14:47.140
<v Speaker 0>Oh, yes. Once it's been applied. Yeah. Even

00:14:47.140 --> 00:14:48.580
<v Speaker 0>if it failed, you still wouldn't be able

00:14:48.580 --> 00:14:50.820
<v Speaker 0>to modify it. So our only option now

00:14:51.940 --> 00:14:54.500
<v Speaker 0>would be to delete it. However, I think

00:14:54.500 --> 00:14:56.180
<v Speaker 0>that I guess there's one more important command

00:14:56.180 --> 00:14:56.420
<v Speaker 0>here.

00:14:58.505 --> 00:15:01.065
<v Speaker 0>We applied it. We created it. We done

00:15:01.065 --> 00:15:03.144
<v Speaker 0>a get pods. We can also run a

00:15:03.144 --> 00:15:04.745
<v Speaker 0>cube control logs

00:15:05.545 --> 00:15:07.464
<v Speaker 0>on our pods to pull out that log

00:15:07.464 --> 00:15:09.144
<v Speaker 0>information if we need to do any sort

00:15:09.144 --> 00:15:11.625
<v Speaker 0>of debugging to work out why something is

00:15:11.625 --> 00:15:12.185
<v Speaker 0>crashing.

00:15:13.450 --> 00:15:14.170
<v Speaker 0>Okay.

00:15:15.930 --> 00:15:18.170
<v Speaker 0>Alright. Let's delete that.

00:15:19.610 --> 00:15:20.890
<v Speaker 0>Delete it correctly.

00:15:24.250 --> 00:15:26.170
<v Speaker 0>Alright. When you ask you like a delete

00:15:26.170 --> 00:15:27.529
<v Speaker 0>command, it will wait

00:15:27.855 --> 00:15:29.935
<v Speaker 0>until that resource has been cleaned up, so

00:15:29.935 --> 00:15:31.375
<v Speaker 0>you may find that it just hangs there

00:15:31.375 --> 00:15:34.095
<v Speaker 0>for a little bit and it's

00:15:34.095 --> 00:15:36.735
<v Speaker 0>quite normal, nothing to worry about. It goes

00:15:36.735 --> 00:15:39.214
<v Speaker 0>away. We can then run get pods and

00:15:39.214 --> 00:15:40.334
<v Speaker 0>we're back to where we started.

00:15:42.580 --> 00:15:45.540
<v Speaker 0>Any questions on that little bit of surface

00:15:45.540 --> 00:15:47.940
<v Speaker 0>data that we touched so far? No. But

00:15:47.940 --> 00:15:49.940
<v Speaker 1>it managed to make this the fan spin

00:15:49.940 --> 00:15:51.700
<v Speaker 1>up on my laptop, so I'm wondering how

00:15:51.700 --> 00:15:53.540
<v Speaker 1>you did that because, you know, rocker.

00:15:56.285 --> 00:15:56.925
<v Speaker 0>Yeah.

00:15:57.485 --> 00:15:59.325
<v Speaker 0>Yep. Don't worry. Mine's just taken off too.

00:15:59.325 --> 00:16:00.125
<v Speaker 0>So Okay.

00:16:01.885 --> 00:16:04.125
<v Speaker 0>So we don't work with pods. I think

00:16:04.125 --> 00:16:05.805
<v Speaker 0>that's that's really important

00:16:05.805 --> 00:16:06.685
<v Speaker 0>as import

00:16:08.045 --> 00:16:11.565
<v Speaker 0>wordfuffle there. As important as understanding pods are

00:16:11.780 --> 00:16:13.780
<v Speaker 0>and as port as important as they are,

00:16:13.780 --> 00:16:15.460
<v Speaker 0>we never work with them directly. We have

00:16:15.460 --> 00:16:17.620
<v Speaker 0>other abstractions within the Kubernetes

00:16:18.100 --> 00:16:20.180
<v Speaker 0>API that allows us to work with them

00:16:20.180 --> 00:16:21.860
<v Speaker 0>in a slightly more manageable fashion.

00:16:22.020 --> 00:16:24.420
<v Speaker 1>Okay. So what I'm gonna do is just

00:16:25.895 --> 00:16:27.335
<v Speaker 0>create a new file

00:16:29.415 --> 00:16:31.575
<v Speaker 0>and call this deployment dot yellow.

00:16:33.735 --> 00:16:34.375
<v Speaker 0>So

00:16:36.135 --> 00:16:38.935
<v Speaker 0>when you first in fact, when you first

00:16:38.935 --> 00:16:41.410
<v Speaker 0>or even a thousand days into deploying to

00:16:41.410 --> 00:16:43.730
<v Speaker 0>Kubernetes, the deployment object as the de facto

00:16:43.730 --> 00:16:45.570
<v Speaker 0>right now for if you wanna take your

00:16:45.570 --> 00:16:47.730
<v Speaker 0>application and run it on Kubernetes, you use

00:16:47.730 --> 00:16:49.010
<v Speaker 0>the deployment spec.

00:16:49.410 --> 00:16:50.770
<v Speaker 0>It is a

00:16:50.930 --> 00:16:52.610
<v Speaker 0>super set of a pod that comes with

00:16:52.610 --> 00:16:54.690
<v Speaker 0>a controller that does loads of magic stuff.

00:16:55.404 --> 00:16:58.125
<v Speaker 0>Magic stuffs includes modifying or at least rotating

00:16:58.125 --> 00:17:00.685
<v Speaker 0>the pods when the spec changes, scaling up,

00:17:00.685 --> 00:17:01.725
<v Speaker 0>scaling down,

00:17:02.045 --> 00:17:05.484
<v Speaker 0>handling update strategies, all of that magical mystery

00:17:05.484 --> 00:17:07.005
<v Speaker 0>stuff that we're gonna try and cover.

00:17:09.119 --> 00:17:11.119
<v Speaker 0>I am using a Versus code plugin for

00:17:11.119 --> 00:17:13.520
<v Speaker 0>Kubernetes. That means I do not need to

00:17:13.520 --> 00:17:16.000
<v Speaker 0>take a lot of YAML for the common

00:17:16.000 --> 00:17:16.799
<v Speaker 0>resources.

00:17:17.280 --> 00:17:18.079
<v Speaker 0>So

00:17:18.480 --> 00:17:20.080
<v Speaker 0>that's why you can see it being templated

00:17:20.080 --> 00:17:22.565
<v Speaker 0>out like this. Yep. And I'm gonna use

00:17:22.565 --> 00:17:24.645
<v Speaker 0>engine x as a

00:17:25.445 --> 00:17:26.965
<v Speaker 0>a base for most of the stuff we

00:17:26.965 --> 00:17:28.645
<v Speaker 0>deploy today, because I think we're all familiar

00:17:28.645 --> 00:17:29.845
<v Speaker 0>with it, we know what it is and

00:17:29.845 --> 00:17:31.125
<v Speaker 0>there's no magic there.

00:17:32.885 --> 00:17:34.965
<v Speaker 0>I am gonna continue to remove this resources

00:17:34.965 --> 00:17:35.525
<v Speaker 0>block.

00:17:36.190 --> 00:17:37.550
<v Speaker 0>In fact, I'll do it one more time

00:17:37.550 --> 00:17:38.910
<v Speaker 0>to show why

00:17:39.070 --> 00:17:40.830
<v Speaker 0>it's kinda there. You can see all the

00:17:40.830 --> 00:17:42.910
<v Speaker 0>squiggles I get. That is my editor telling

00:17:42.910 --> 00:17:44.670
<v Speaker 0>me that you should not apply

00:17:44.990 --> 00:17:48.030
<v Speaker 0>a Kubernetes resource without resource management because it

00:17:48.030 --> 00:17:50.190
<v Speaker 0>could eat up all your resources.

00:17:50.670 --> 00:17:50.910
<v Speaker 0>So

00:17:51.875 --> 00:17:54.034
<v Speaker 0>I can kinda silence that to one line

00:17:54.034 --> 00:17:56.274
<v Speaker 0>while pushing an empty block.

00:18:00.034 --> 00:18:01.154
<v Speaker 0>And you'll see,

00:18:02.195 --> 00:18:04.580
<v Speaker 0>there's a couple of things different from this,

00:18:04.580 --> 00:18:06.340
<v Speaker 0>but still very very similar to what we

00:18:06.340 --> 00:18:08.420
<v Speaker 0>kind of played with with the pod. So

00:18:08.420 --> 00:18:09.540
<v Speaker 0>you can see that our

00:18:10.340 --> 00:18:12.980
<v Speaker 0>object key, the combination of API version and

00:18:12.980 --> 00:18:15.300
<v Speaker 0>kind has changed. Mhmm. The fact that this

00:18:15.300 --> 00:18:16.980
<v Speaker 0>has changed from v one to apps just

00:18:16.980 --> 00:18:18.660
<v Speaker 0>means that we've dropped out of the core

00:18:18.660 --> 00:18:21.125
<v Speaker 0>namespace, which is where the pod lives, and

00:18:21.125 --> 00:18:23.445
<v Speaker 0>we're now into an application specific namespace, which

00:18:23.445 --> 00:18:25.124
<v Speaker 0>is handled by a different seg,

00:18:25.445 --> 00:18:27.605
<v Speaker 0>the working groups and segs of Kubernetes project

00:18:27.605 --> 00:18:29.524
<v Speaker 0>all handled different API touch points.

00:18:30.005 --> 00:18:31.765
<v Speaker 0>The object that we're now deploying with is

00:18:31.765 --> 00:18:32.725
<v Speaker 0>called a deployment

00:18:33.130 --> 00:18:36.010
<v Speaker 0>and it still has some metadata that we

00:18:36.010 --> 00:18:37.850
<v Speaker 0>can apply to it. We still wanna be

00:18:37.850 --> 00:18:39.290
<v Speaker 0>able to name the object that we put

00:18:39.290 --> 00:18:40.489
<v Speaker 0>in the cluster. Okay.

00:18:42.410 --> 00:18:43.049
<v Speaker 0>Now

00:18:44.410 --> 00:18:45.770
<v Speaker 0>this bit here,

00:18:47.155 --> 00:18:49.795
<v Speaker 0>but this pod and container spec has not

00:18:49.795 --> 00:18:52.035
<v Speaker 0>changed. It's just slightly

00:18:52.035 --> 00:18:52.835
<v Speaker 0>deeper

00:18:53.075 --> 00:18:55.475
<v Speaker 0>and Right. The YAML structure. And what we

00:18:55.475 --> 00:18:58.675
<v Speaker 0>have here is the actual deployment spec and

00:18:58.675 --> 00:19:00.755
<v Speaker 0>the bottom bit is the pod spec within

00:19:00.755 --> 00:19:01.795
<v Speaker 0>the deployment spec.

00:19:03.049 --> 00:19:05.450
<v Speaker 0>So when we create a deployment, we're saying

00:19:05.450 --> 00:19:07.450
<v Speaker 0>we want to deploy this pod, but we

00:19:07.450 --> 00:19:08.169
<v Speaker 0>have some

00:19:08.809 --> 00:19:11.450
<v Speaker 0>we have some information that surrounds or encapsulated

00:19:11.450 --> 00:19:13.129
<v Speaker 0>that that is really important.

00:19:14.169 --> 00:19:16.090
<v Speaker 0>And the most important thing with the deployment

00:19:16.090 --> 00:19:18.490
<v Speaker 0>is something called labels and selectors.

00:19:19.585 --> 00:19:20.304
<v Speaker 0>Now,

00:19:21.105 --> 00:19:23.744
<v Speaker 0>I think it may be best

00:19:24.304 --> 00:19:26.865
<v Speaker 0>to apply this first and then double back

00:19:26.865 --> 00:19:29.184
<v Speaker 0>on the selectors when we have something running

00:19:29.184 --> 00:19:30.865
<v Speaker 0>that we can maybe take a look at.

00:19:30.865 --> 00:19:31.265
<v Speaker 0>Okay.

00:19:37.270 --> 00:19:38.550
<v Speaker 0>Okay. So

00:19:39.510 --> 00:19:41.430
<v Speaker 0>we applied that just like we did the

00:19:41.430 --> 00:19:45.670
<v Speaker 0>pod only this time, you know, it's got

00:19:44.325 --> 00:19:46.245
<v Speaker 0>a different prefix before it. It doesn't say

00:19:46.245 --> 00:19:46.964
<v Speaker 0>pod

00:19:47.125 --> 00:19:49.524
<v Speaker 0>and we can run get deployments

00:19:50.325 --> 00:19:52.164
<v Speaker 0>and we see something better similar to what

00:19:52.164 --> 00:19:54.245
<v Speaker 0>we had with our pod spec. Yep. So

00:19:54.245 --> 00:19:55.845
<v Speaker 0>we have the name. We still got one

00:19:55.845 --> 00:19:56.565
<v Speaker 0>of one containers.

00:19:57.310 --> 00:19:59.470
<v Speaker 0>Now we don't have something called the status.

00:19:59.550 --> 00:20:01.630
<v Speaker 0>We got up to date and available. We'll

00:20:01.630 --> 00:20:03.390
<v Speaker 0>talk about why this spec is a little

00:20:03.390 --> 00:20:04.110
<v Speaker 0>bit different.

00:20:05.230 --> 00:20:06.830
<v Speaker 0>But what's important is if we run get

00:20:06.830 --> 00:20:07.549
<v Speaker 0>pods,

00:20:07.950 --> 00:20:10.110
<v Speaker 0>you'll find that it does still create a

00:20:10.110 --> 00:20:10.910
<v Speaker 0>pod of bars.

00:20:11.655 --> 00:20:13.495
<v Speaker 0>It's just called it's it's just now a

00:20:13.495 --> 00:20:14.295
<v Speaker 0>managed

00:20:14.535 --> 00:20:15.174
<v Speaker 0>pod.

00:20:15.575 --> 00:20:16.295
<v Speaker 1>Right.

00:20:17.015 --> 00:20:19.255
<v Speaker 1>So it's got that it's got the

00:20:19.815 --> 00:20:21.655
<v Speaker 1>ugly string on the end of it

00:20:22.295 --> 00:20:25.175
<v Speaker 1>because it's managed by somebody else, something else.

00:20:25.175 --> 00:20:25.495
<v Speaker 1>Right?

00:20:26.280 --> 00:20:27.240
<v Speaker 0>Yes.

00:20:27.240 --> 00:20:28.920
<v Speaker 0>So this is a

00:20:29.880 --> 00:20:31.160
<v Speaker 0>three piece tuple,

00:20:31.400 --> 00:20:33.640
<v Speaker 0>and each segment in this tuple

00:20:33.720 --> 00:20:34.680
<v Speaker 0>identifies

00:20:34.680 --> 00:20:36.680
<v Speaker 0>a different layer of abstraction.

00:20:37.960 --> 00:20:39.720
<v Speaker 0>So let me try and explain how the

00:20:39.720 --> 00:20:41.080
<v Speaker 0>deployment actually works.

00:20:41.715 --> 00:20:43.315
<v Speaker 0>When you create a deployment,

00:20:43.395 --> 00:20:45.715
<v Speaker 0>it gets created on the cluster and nothing

00:20:45.715 --> 00:20:46.355
<v Speaker 0>happens.

00:20:47.155 --> 00:20:49.635
<v Speaker 0>There is a deployment controller that notices that

00:20:49.635 --> 00:20:51.475
<v Speaker 0>object and then it creates something called a

00:20:51.475 --> 00:20:52.595
<v Speaker 0>replica set.

00:20:53.955 --> 00:20:55.395
<v Speaker 0>Get replica sets.

00:20:57.250 --> 00:20:58.690
<v Speaker 0>And you can see the the now got

00:20:58.690 --> 00:21:00.929
<v Speaker 0>a two piece tuple. Yep. So so this

00:21:00.929 --> 00:21:03.090
<v Speaker 0>is the deployment name and then this is

00:21:03.090 --> 00:21:05.249
<v Speaker 0>the identifier for the replica set.

00:21:05.570 --> 00:21:07.809
<v Speaker 0>And then there's a controller that monitors the

00:21:07.809 --> 00:21:10.935
<v Speaker 0>replica sets and goes, oh, we need pods

00:21:10.935 --> 00:21:13.495
<v Speaker 0>and then this is the pod ID.

00:21:14.215 --> 00:21:16.295
<v Speaker 0>So we got this layer of command. Right.

00:21:16.295 --> 00:21:17.575
<v Speaker 0>Deployment creates

00:21:17.975 --> 00:21:18.935
<v Speaker 0>deployment

00:21:18.935 --> 00:21:21.735
<v Speaker 0>creates replica sets, replica sets create pods and

00:21:21.735 --> 00:21:22.775
<v Speaker 0>we create a deployment.

00:21:24.750 --> 00:21:26.430
<v Speaker 0>Now it's very confusing,

00:21:26.430 --> 00:21:27.309
<v Speaker 0>it can be

00:21:27.710 --> 00:21:31.070
<v Speaker 0>a little bit difficult to understand and that's

00:21:31.070 --> 00:21:32.430
<v Speaker 0>just to do with the way that Kubernetes

00:21:32.430 --> 00:21:34.750
<v Speaker 0>works, so that's controller model and people, know

00:21:34.750 --> 00:21:37.070
<v Speaker 0>the controls are only responsible for one really

00:21:37.070 --> 00:21:38.350
<v Speaker 0>small part of the API.

00:21:39.725 --> 00:21:42.205
<v Speaker 0>So disregard that unless you really wanna know

00:21:42.205 --> 00:21:43.805
<v Speaker 0>about it, we can talk about it later.

00:21:43.965 --> 00:21:45.485
<v Speaker 0>What we really care about is we created

00:21:45.485 --> 00:21:47.245
<v Speaker 0>a deployment and we get a pod out

00:21:47.245 --> 00:21:49.485
<v Speaker 0>the other side. If we just pretend our

00:21:49.485 --> 00:21:51.645
<v Speaker 0>view here is get deployments

00:21:52.540 --> 00:21:54.780
<v Speaker 0>and pods, you can just do a get

00:21:54.780 --> 00:21:56.460
<v Speaker 0>with a comma and it'll pull out multiple

00:21:56.460 --> 00:21:58.140
<v Speaker 0>types. Okay. So you can see we've got

00:21:58.140 --> 00:21:59.100
<v Speaker 0>our deployment,

00:21:59.580 --> 00:22:01.580
<v Speaker 0>we have our pod. Yep.

00:22:01.980 --> 00:22:02.779
<v Speaker 0>Okay.

00:22:02.940 --> 00:22:03.580
<v Speaker 0>Next.

00:22:05.660 --> 00:22:07.179
<v Speaker 0>Labels and selectors.

00:22:07.420 --> 00:22:07.660
<v Speaker 0>So

00:22:08.485 --> 00:22:11.044
<v Speaker 0>because I've already that it's good now that

00:22:11.044 --> 00:22:13.524
<v Speaker 0>I covered that that hierarchy of abstraction.

00:22:14.645 --> 00:22:16.725
<v Speaker 0>The deployment controller needs a way to know

00:22:16.725 --> 00:22:18.164
<v Speaker 0>which replica sets

00:22:18.565 --> 00:22:19.684
<v Speaker 0>it created.

00:22:20.005 --> 00:22:21.789
<v Speaker 0>The replica set controller needs a way to

00:22:21.789 --> 00:22:23.389
<v Speaker 0>know which pods it created, so that if

00:22:23.389 --> 00:22:25.230
<v Speaker 0>I delete the replica set, it deletes the

00:22:25.230 --> 00:22:25.789
<v Speaker 0>pod

00:22:26.110 --> 00:22:28.350
<v Speaker 0>and if I delete the deployment, it deletes

00:22:28.350 --> 00:22:29.469
<v Speaker 0>the replica sets.

00:22:29.950 --> 00:22:32.269
<v Speaker 0>These labels are used to do that matching.

00:22:33.615 --> 00:22:35.855
<v Speaker 0>At least they form a a base of

00:22:35.855 --> 00:22:36.735
<v Speaker 0>the matching.

00:22:38.255 --> 00:22:40.255
<v Speaker 0>So if I do a describe on deployment

00:22:40.255 --> 00:22:41.375
<v Speaker 0>NGINX.

00:22:45.855 --> 00:22:46.495
<v Speaker 0>Let's see.

00:22:48.799 --> 00:22:51.360
<v Speaker 0>You can see that this has a selector

00:22:51.360 --> 00:22:54.080
<v Speaker 0>that says all of the replica sets and

00:22:54.080 --> 00:22:56.799
<v Speaker 0>it doesn't say here replica set, but because

00:22:56.799 --> 00:22:59.280
<v Speaker 0>we've kinda covered that hierarchy we know. Any

00:22:59.280 --> 00:23:01.520
<v Speaker 0>replica set that says app equals NGINX is

00:23:01.520 --> 00:23:04.240
<v Speaker 0>gonna be controlled somehow by this resource.

00:23:04.735 --> 00:23:06.255
<v Speaker 0>I can then do a describe on the

00:23:06.255 --> 00:23:07.294
<v Speaker 0>replica set.

00:23:09.615 --> 00:23:10.575
<v Speaker 0>Excuse me.

00:23:11.534 --> 00:23:14.654
<v Speaker 0>And we should see our label as app

00:23:14.654 --> 00:23:17.455
<v Speaker 0>equals engine x. Yep. And of course, if

00:23:17.455 --> 00:23:19.135
<v Speaker 0>I do a describe all the way down

00:23:19.135 --> 00:23:19.615
<v Speaker 0>the tree,

00:23:20.960 --> 00:23:22.240
<v Speaker 0>we're gonna see

00:23:24.160 --> 00:23:26.400
<v Speaker 0>labels app equals engine x.

00:23:26.800 --> 00:23:29.200
<v Speaker 0>Labels are a way to identify how the

00:23:29.200 --> 00:23:31.920
<v Speaker 0>different layers of abstractions are actually owned or

00:23:31.920 --> 00:23:33.680
<v Speaker 0>controlled or operated etcetera.

00:23:34.845 --> 00:23:36.924
<v Speaker 0>Does that make sense? Yes, it does.

00:23:37.245 --> 00:23:38.684
<v Speaker 0>Awesome. Good.

00:23:39.405 --> 00:23:41.645
<v Speaker 0>Now because this is employment, we can modify

00:23:41.645 --> 00:23:42.845
<v Speaker 0>anything we want.

00:23:43.565 --> 00:23:46.445
<v Speaker 0>So let's keep the name the same. Let's

00:23:46.445 --> 00:23:48.445
<v Speaker 0>not confuse the the per Kubernetes

00:23:48.830 --> 00:23:49.630
<v Speaker 0>and

00:23:49.630 --> 00:23:50.669
<v Speaker 0>let's do

00:23:50.990 --> 00:23:52.990
<v Speaker 0>app engine x tutorial.

00:23:54.110 --> 00:23:56.029
<v Speaker 0>Now these do need to match up,

00:23:56.350 --> 00:23:57.870
<v Speaker 0>otherwise we're gonna have a mesh match in

00:23:57.870 --> 00:23:58.830
<v Speaker 0>the selector.

00:23:59.070 --> 00:24:00.990
<v Speaker 0>So if I say this and I try

00:24:00.990 --> 00:24:03.309
<v Speaker 0>and apply this, it should hopefully

00:24:03.470 --> 00:24:04.110
<v Speaker 0>complain.

00:24:04.445 --> 00:24:05.164
<v Speaker 0>Yeah.

00:24:06.045 --> 00:24:08.045
<v Speaker 0>So these do always have to match otherwise

00:24:08.045 --> 00:24:09.965
<v Speaker 0>you'll have resources that were created that were

00:24:09.965 --> 00:24:12.605
<v Speaker 0>not operated by their controller. Right.

00:24:12.765 --> 00:24:15.005
<v Speaker 0>And we can modify the containers. So say

00:24:15.005 --> 00:24:17.165
<v Speaker 0>that I don't want to run NGINX. What

00:24:17.165 --> 00:24:18.845
<v Speaker 0>about if I wanna run httpd?

00:24:19.470 --> 00:24:21.149
<v Speaker 0>So I'm gonna change that image

00:24:21.790 --> 00:24:24.270
<v Speaker 0>and I will change the name of the

00:24:24.270 --> 00:24:24.989
<v Speaker 0>container.

00:24:25.150 --> 00:24:27.149
<v Speaker 0>And while I'm here, just for good measure,

00:24:27.630 --> 00:24:29.710
<v Speaker 0>there are many other fields on the deployment

00:24:29.710 --> 00:24:31.549
<v Speaker 0>spec that we can change. The most important

00:24:31.549 --> 00:24:32.750
<v Speaker 0>one is the replicas.

00:24:33.345 --> 00:24:35.665
<v Speaker 0>What if I wanna scale this deployment? I

00:24:35.665 --> 00:24:37.424
<v Speaker 0>can set the replicas to five.

00:24:38.145 --> 00:24:39.825
<v Speaker 0>And if I apply this,

00:24:41.585 --> 00:24:42.385
<v Speaker 0>I broke it.

00:24:46.470 --> 00:24:47.830
<v Speaker 1>You changed the name.

00:24:48.230 --> 00:24:49.350
<v Speaker 0>So, yeah, these

00:24:49.830 --> 00:24:52.070
<v Speaker 0>bets are immutable because I'd already created the

00:24:52.070 --> 00:24:54.870
<v Speaker 0>deployment. So I'll cheat and just modify the

00:24:54.870 --> 00:24:56.389
<v Speaker 0>name to create a new resource.

00:24:56.950 --> 00:24:59.029
<v Speaker 0>And I will delete the old deployment

00:24:59.190 --> 00:25:00.149
<v Speaker 0>like so.

00:25:00.390 --> 00:25:02.654
<v Speaker 0>And we'll pretend that all worked.

00:25:02.975 --> 00:25:03.614
<v Speaker 0>So

00:25:03.934 --> 00:25:04.734
<v Speaker 0>deployments,

00:25:05.294 --> 00:25:06.735
<v Speaker 0>we now have this new one and you

00:25:06.735 --> 00:25:07.934
<v Speaker 0>can see that we're

00:25:08.095 --> 00:25:09.774
<v Speaker 0>we're starting to scale up.

00:25:10.015 --> 00:25:12.575
<v Speaker 0>So we have two available at five,

00:25:12.735 --> 00:25:14.735
<v Speaker 0>five available out of five. So

00:25:15.550 --> 00:25:17.070
<v Speaker 0>pretty quick. It doesn't take a lot of

00:25:17.070 --> 00:25:18.590
<v Speaker 0>effort to scale the service.

00:25:18.830 --> 00:25:20.350
<v Speaker 0>You can imagine if this was a production

00:25:20.350 --> 00:25:21.390
<v Speaker 0>thing and I want you to be able

00:25:21.390 --> 00:25:23.230
<v Speaker 0>to scale on demand or in reaction to

00:25:23.230 --> 00:25:24.510
<v Speaker 0>metrics or whatever.

00:25:24.830 --> 00:25:27.310
<v Speaker 0>It's as simple as modifying my YAML and

00:25:27.310 --> 00:25:28.830
<v Speaker 0>saying, I need more of these, please.

00:25:30.615 --> 00:25:33.335
<v Speaker 1>So you can modify the scale of it

00:25:33.335 --> 00:25:34.935
<v Speaker 1>in,

00:25:35.015 --> 00:25:37.815
<v Speaker 1>you know, at runtime, basically. Right? You can

00:25:37.815 --> 00:25:40.695
<v Speaker 1>add more or remove or remove them, and

00:25:40.695 --> 00:25:42.880
<v Speaker 1>it will scale appropriately?

00:25:43.760 --> 00:25:45.920
<v Speaker 0>That is correct. So let's assume we come

00:25:45.920 --> 00:25:47.440
<v Speaker 0>in here and we're like, alright.

00:25:47.760 --> 00:25:50.720
<v Speaker 0>We've weathered the storm, whatever magic event happened

00:25:50.720 --> 00:25:53.440
<v Speaker 0>on Twitter. We now can, you know, maybe

00:25:53.440 --> 00:25:55.200
<v Speaker 0>comfortably go back down to just having two

00:25:55.200 --> 00:25:55.760
<v Speaker 0>replicas.

00:25:56.505 --> 00:25:59.145
<v Speaker 0>We just reapply our deployment.yaml.

00:26:00.025 --> 00:26:02.585
<v Speaker 0>I'm gonna run a get pods with dash

00:26:02.585 --> 00:26:04.585
<v Speaker 0>w which just means watch and I was

00:26:04.585 --> 00:26:06.425
<v Speaker 0>too slow. I mean, it's already scaled that

00:26:06.425 --> 00:26:07.865
<v Speaker 0>resource down for me. So yeah.

00:26:09.150 --> 00:26:11.230
<v Speaker 0>So yeah. We can modify the spec and

00:26:11.230 --> 00:26:12.510
<v Speaker 0>that's just comes down to the way that

00:26:12.510 --> 00:26:14.990
<v Speaker 0>Kubernetes works. Whenever you apply NF into the

00:26:14.990 --> 00:26:17.470
<v Speaker 0>cluster, those controllers set in the background and

00:26:17.470 --> 00:26:18.669
<v Speaker 0>monitor the spec.

00:26:18.830 --> 00:26:21.150
<v Speaker 0>Whenever that spec changes, it goes out of

00:26:21.150 --> 00:26:22.990
<v Speaker 0>its way to do a reconciliation

00:26:22.990 --> 00:26:25.305
<v Speaker 0>loop and get the cluster into the state

00:26:25.305 --> 00:26:26.985
<v Speaker 0>that we declaratively define.

00:26:29.305 --> 00:26:31.305
<v Speaker 1>Which explains why you can't really change the

00:26:31.305 --> 00:26:32.664
<v Speaker 1>name in the

00:26:32.905 --> 00:26:35.145
<v Speaker 1>on a on a running cluster because then

00:26:35.145 --> 00:26:35.705
<v Speaker 1>it would

00:26:36.440 --> 00:26:39.000
<v Speaker 1>not understand what it's supposed to change, and

00:26:39.000 --> 00:26:40.760
<v Speaker 1>it would cause all sorts of

00:26:42.360 --> 00:26:44.120
<v Speaker 1>mayhem. That's a good a good point. I

00:26:44.120 --> 00:26:45.640
<v Speaker 0>had actually thought up of that change on

00:26:45.640 --> 00:26:47.960
<v Speaker 0>the selector on an existing deployment. It would

00:26:47.960 --> 00:26:50.520
<v Speaker 0>actually put you in a moment of flux

00:26:50.415 --> 00:26:52.655
<v Speaker 0>where it didn't know which resources to clean

00:26:52.655 --> 00:26:53.615
<v Speaker 0>up or create.

00:26:54.495 --> 00:26:56.975
<v Speaker 0>So if that makes sense. There are some

00:26:57.055 --> 00:26:59.455
<v Speaker 0>letter immutable fields across it, you'll have them

00:26:59.455 --> 00:27:01.775
<v Speaker 0>at one point or another and if you're

00:27:01.775 --> 00:27:03.615
<v Speaker 0>anything like me, you'll forget. But

00:27:04.095 --> 00:27:04.815
<v Speaker 0>we can

00:27:05.140 --> 00:27:07.540
<v Speaker 0>use test deployment spec now as a basis

00:27:07.540 --> 00:27:10.020
<v Speaker 0>for most workloads that we wanna deploy to

00:27:10.020 --> 00:27:11.059
<v Speaker 0>our cluster.

00:27:12.740 --> 00:27:15.140
<v Speaker 1>Okay. Any any questions on that or are

00:27:15.140 --> 00:27:17.299
<v Speaker 0>we happy? No. We're happy. And we can

00:27:17.299 --> 00:27:19.299
<v Speaker 1>add other services to that

00:27:20.455 --> 00:27:23.414
<v Speaker 1>that pod by just adding more containers to

00:27:23.414 --> 00:27:25.654
<v Speaker 1>the pod. Is that the idea? Or

00:27:25.975 --> 00:27:28.215
<v Speaker 1>now I'm really gonna confuse it.

00:27:29.335 --> 00:27:31.815
<v Speaker 0>No. So there are use cases. So this

00:27:31.815 --> 00:27:34.855
<v Speaker 0>is a really common pattern in Kubernetes called

00:27:34.519 --> 00:27:35.399
<v Speaker 0>sidecar.

00:27:36.200 --> 00:27:37.799
<v Speaker 0>Sidecar is generally

00:27:38.279 --> 00:27:39.879
<v Speaker 0>a name that we use for any pod

00:27:39.879 --> 00:27:41.479
<v Speaker 0>that has multiple containers.

00:27:42.279 --> 00:27:43.960
<v Speaker 0>Something that you may wish to do and

00:27:43.960 --> 00:27:45.799
<v Speaker 0>a better software that we're both familiar with

00:27:45.799 --> 00:27:47.479
<v Speaker 0>would be deploying Telegraph.

00:27:47.639 --> 00:27:48.279
<v Speaker 0>Mhmm.

00:27:48.600 --> 00:27:51.399
<v Speaker 0>So assuming we wanted to do

00:27:51.055 --> 00:27:54.175
<v Speaker 0>have a sidecar container, a Telegraph container running

00:27:54.175 --> 00:27:56.815
<v Speaker 0>next to our application and scraping metrics and

00:27:56.815 --> 00:27:59.295
<v Speaker 0>our Prometheus based pool sale operation,

00:28:00.095 --> 00:28:02.575
<v Speaker 0>then we could add a container like so,

00:28:02.575 --> 00:28:04.095
<v Speaker 0>and then I can just reapply this.

00:28:07.100 --> 00:28:09.100
<v Speaker 0>And what we're gonna see here is our

00:28:09.100 --> 00:28:11.740
<v Speaker 0>new one here has ready zero of two.

00:28:11.740 --> 00:28:13.180
<v Speaker 0>Now that just means that it's currently pulling

00:28:13.180 --> 00:28:15.340
<v Speaker 0>the telegraph image. Yep. I can run a

00:28:15.340 --> 00:28:17.500
<v Speaker 0>a watch on this with dash w and

00:28:17.500 --> 00:28:18.380
<v Speaker 0>it will work this time.

00:28:18.985 --> 00:28:20.904
<v Speaker 0>And we'll see that change as the image

00:28:20.904 --> 00:28:21.624
<v Speaker 0>pulls.

00:28:21.705 --> 00:28:23.385
<v Speaker 0>It's now spinning up the pods, so it's

00:28:23.385 --> 00:28:25.304
<v Speaker 0>now killing the old pods. So you know,

00:28:25.304 --> 00:28:26.825
<v Speaker 0>it spun up the new one the first,

00:28:27.304 --> 00:28:30.024
<v Speaker 0>waited until it was almost running, started tearing

00:28:30.024 --> 00:28:31.465
<v Speaker 0>down the old one and then the other

00:28:31.465 --> 00:28:32.264
<v Speaker 0>one gets terminated.

00:28:33.130 --> 00:28:34.490
<v Speaker 0>What we can do now is run get

00:28:34.490 --> 00:28:35.929
<v Speaker 0>pods and you see that we have two

00:28:35.929 --> 00:28:38.650
<v Speaker 0>pods, each with two pods both running and

00:28:38.650 --> 00:28:39.289
<v Speaker 0>happy.

00:28:41.210 --> 00:28:42.330
<v Speaker 0>So that is

00:28:43.130 --> 00:28:44.890
<v Speaker 0>this is a pattern

00:28:44.890 --> 00:28:48.205
<v Speaker 0>that is used to enrich or augment the

00:28:48.205 --> 00:28:51.325
<v Speaker 0>functionality of a container or application with some

00:28:51.325 --> 00:28:52.845
<v Speaker 0>other piece of functionality.

00:28:53.325 --> 00:28:55.645
<v Speaker 0>However, you would not use this pattern to

00:28:55.645 --> 00:28:58.205
<v Speaker 0>deploy every service in your application

00:28:58.684 --> 00:28:59.965
<v Speaker 0>as a single deployment.

00:29:00.409 --> 00:29:02.809
<v Speaker 0>What you would do is have multiple deployments.

00:29:05.049 --> 00:29:06.089
<v Speaker 0>So let's

00:29:06.169 --> 00:29:09.690
<v Speaker 0>let's add something then to this. Let's add

00:29:10.090 --> 00:29:13.210
<v Speaker 0>a new file, and we call this our

00:29:14.845 --> 00:29:18.284
<v Speaker 0>deployment two, very unique and original name.

00:29:20.365 --> 00:29:21.085
<v Speaker 0>Yep.

00:29:21.405 --> 00:29:21.725
<v Speaker 0>There

00:29:22.525 --> 00:29:23.885
<v Speaker 0>what image should we deploy?

00:29:30.030 --> 00:29:31.950
<v Speaker 0>We can just deploy NGINX

00:29:32.030 --> 00:29:32.830
<v Speaker 0>again.

00:29:33.390 --> 00:29:34.590
<v Speaker 0>But we'll give it a name that's not

00:29:34.590 --> 00:29:36.670
<v Speaker 0>NGINX. We'll just pretend. Because that image is

00:29:36.670 --> 00:29:37.950
<v Speaker 0>already in my cluster. I don't need to

00:29:37.950 --> 00:29:39.790
<v Speaker 0>pull anything new, which is Right. Really a

00:29:39.790 --> 00:29:40.110
<v Speaker 0>good thing.

00:29:40.905 --> 00:29:43.625
<v Speaker 0>So let's pretend this is some stateful database

00:29:43.625 --> 00:29:44.505
<v Speaker 0>application,

00:29:45.305 --> 00:29:48.425
<v Speaker 0>Oracle DB because you know, why not?

00:29:50.265 --> 00:29:52.425
<v Speaker 0>We'll call our selectors. We'll just make this

00:29:52.425 --> 00:29:53.465
<v Speaker 0>match as well,

00:29:53.865 --> 00:29:55.980
<v Speaker 0>so we don't have any conflicts. But we're

00:29:55.980 --> 00:29:58.220
<v Speaker 0>still just gonna deploy NGINX and then we're

00:29:58.220 --> 00:30:00.140
<v Speaker 0>gonna continue to pretend it's Oracle.

00:30:02.460 --> 00:30:05.100
<v Speaker 0>And I'm not going to expose any ports.

00:30:06.540 --> 00:30:07.420
<v Speaker 0>Alright. We will,

00:30:07.965 --> 00:30:09.485
<v Speaker 0>cause we're gonna show off some of the

00:30:09.485 --> 00:30:11.965
<v Speaker 0>networking functionality that we get with Kubernetes.

00:30:12.365 --> 00:30:13.085
<v Speaker 1>Okay.

00:30:13.804 --> 00:30:15.644
<v Speaker 0>So this is our second deployment.

00:30:15.965 --> 00:30:18.124
<v Speaker 0>It's Oracle DB and

00:30:19.804 --> 00:30:21.325
<v Speaker 0>we can apply it

00:30:22.470 --> 00:30:23.830
<v Speaker 0>in the same fashion.

00:30:23.910 --> 00:30:25.990
<v Speaker 0>We run get deployments

00:30:26.150 --> 00:30:27.269
<v Speaker 0>and pods.

00:30:27.990 --> 00:30:29.590
<v Speaker 0>And you can see that we now have

00:30:29.590 --> 00:30:31.670
<v Speaker 0>two deployments. We have our engine x tutorial.

00:30:31.670 --> 00:30:33.029
<v Speaker 0>We have Oracle DB.

00:30:33.430 --> 00:30:35.669
<v Speaker 0>Right. And we have our collection of pods.

00:30:35.670 --> 00:30:36.070
<v Speaker 1>Yep.

00:30:38.615 --> 00:30:39.414
<v Speaker 0>Okay.

00:30:39.654 --> 00:30:40.374
<v Speaker 0>Now

00:30:41.735 --> 00:30:42.455
<v Speaker 0>we

00:30:42.695 --> 00:30:44.774
<v Speaker 0>want this stuff to talk to each other.

00:30:45.174 --> 00:30:46.934
<v Speaker 1>We do. And I always have a hard

00:30:46.934 --> 00:30:48.695
<v Speaker 1>time with this with Docker

00:30:48.695 --> 00:30:51.200
<v Speaker 1>containers because it's like, well, that's running in

00:30:51.200 --> 00:30:52.720
<v Speaker 1>a Docker container. You can't talk to it.

00:30:52.720 --> 00:30:53.679
<v Speaker 1>I

00:30:53.840 --> 00:30:54.960
<v Speaker 1>wanna talk to it.

00:30:56.480 --> 00:30:58.000
<v Speaker 0>Alright. Let's see if we can make that

00:30:58.000 --> 00:30:59.280
<v Speaker 0>happen then. So

00:30:59.840 --> 00:31:01.840
<v Speaker 0>primitives were covered thus far are pods and

00:31:01.840 --> 00:31:02.320
<v Speaker 0>deployments.

00:31:02.995 --> 00:31:05.794
<v Speaker 0>There is another really important one called a

00:31:05.794 --> 00:31:06.594
<v Speaker 0>service.

00:31:06.995 --> 00:31:09.475
<v Speaker 0>And that service provides DNS

00:31:09.475 --> 00:31:12.995
<v Speaker 0>based discovery of the other services within our

00:31:12.995 --> 00:31:14.274
<v Speaker 0>Kubernetes cluster.

00:31:15.715 --> 00:31:17.715
<v Speaker 0>So it's called a service.yaml.

00:31:19.730 --> 00:31:21.570
<v Speaker 0>And we have auto complete, which makes my

00:31:21.570 --> 00:31:22.690
<v Speaker 0>life a lot easier.

00:31:23.730 --> 00:31:25.809
<v Speaker 0>So we'll expose

00:31:25.809 --> 00:31:26.609
<v Speaker 0>our

00:31:26.769 --> 00:31:28.209
<v Speaker 0>engine x one

00:31:30.850 --> 00:31:32.370
<v Speaker 0>and

00:31:32.044 --> 00:31:34.684
<v Speaker 0>we'll make it available on port 80. We

00:31:34.684 --> 00:31:36.525
<v Speaker 0>don't need to specify a target port as

00:31:36.525 --> 00:31:37.965
<v Speaker 0>long as I'm not getting this wrong in

00:31:37.965 --> 00:31:40.365
<v Speaker 0>my brain. The target port will default to

00:31:40.365 --> 00:31:42.044
<v Speaker 0>the port. So Okay.

00:31:42.285 --> 00:31:45.164
<v Speaker 0>What this channel says is I want a

00:31:45.164 --> 00:31:46.924
<v Speaker 0>service to exist called NGINX.

00:31:47.720 --> 00:31:48.679
<v Speaker 0>That name

00:31:49.080 --> 00:31:51.480
<v Speaker 0>will be created as a DNS resolution within

00:31:51.480 --> 00:31:54.120
<v Speaker 0>the cluster, so I can then query NGINX

00:31:54.120 --> 00:31:55.800
<v Speaker 0>as if it were a URL.

00:31:56.600 --> 00:31:58.440
<v Speaker 0>The selector is the same as what we

00:31:58.440 --> 00:32:00.600
<v Speaker 0>had in our deployment. So selector says

00:32:01.585 --> 00:32:03.585
<v Speaker 0>all of the pods that have this label

00:32:03.585 --> 00:32:04.945
<v Speaker 0>app engine x,

00:32:05.345 --> 00:32:06.624
<v Speaker 0>we will allow

00:32:06.784 --> 00:32:09.664
<v Speaker 0>to answer requests for the engine x service.

00:32:09.985 --> 00:32:10.704
<v Speaker 1>Okay.

00:32:11.105 --> 00:32:13.184
<v Speaker 0>So this could also based on our current

00:32:13.184 --> 00:32:15.024
<v Speaker 0>examples be Oracle DB.

00:32:15.585 --> 00:32:15.985
<v Speaker 0>Okay.

00:32:17.500 --> 00:32:19.260
<v Speaker 0>And we have to tell it which port,

00:32:19.260 --> 00:32:21.500
<v Speaker 0>so we can publish services on any port

00:32:21.500 --> 00:32:23.340
<v Speaker 0>that we want, port 80, port four forty

00:32:23.340 --> 00:32:24.620
<v Speaker 0>three, port 53,

00:32:24.620 --> 00:32:25.179
<v Speaker 0>whatever.

00:32:25.500 --> 00:32:27.180
<v Speaker 0>Because this is a web service, I'm gonna

00:32:27.180 --> 00:32:29.820
<v Speaker 0>export it on port 80 and

00:32:30.140 --> 00:32:31.260
<v Speaker 0>we can apply

00:32:31.885 --> 00:32:32.684
<v Speaker 0>Like so.

00:32:33.965 --> 00:32:34.605
<v Speaker 0>Now

00:32:34.924 --> 00:32:36.365
<v Speaker 0>what command do you think we run to

00:32:36.365 --> 00:32:37.485
<v Speaker 0>list the services?

00:32:41.485 --> 00:32:42.845
<v Speaker 1>Probably get services.

00:32:43.165 --> 00:32:44.605
<v Speaker 0>Yeah. It's not a trick question.

00:32:45.500 --> 00:32:48.220
<v Speaker 0>That's what I guess is is nice. The

00:32:48.220 --> 00:32:51.259
<v Speaker 0>entire Kubernetes API surface is mostly just the

00:32:51.259 --> 00:32:53.419
<v Speaker 0>restful API and then the commands that we

00:32:53.419 --> 00:32:56.460
<v Speaker 0>use to query that become very intuitive very

00:32:56.460 --> 00:32:56.779
<v Speaker 0>quickly.

00:32:58.135 --> 00:33:00.054
<v Speaker 0>Well, what we can see here is that

00:33:00.054 --> 00:33:02.695
<v Speaker 0>we have an NGINX service of type cluster

00:33:02.695 --> 00:33:03.414
<v Speaker 0>IP.

00:33:03.815 --> 00:33:05.975
<v Speaker 0>Cluster IP just means that it's gonna generate

00:33:05.975 --> 00:33:08.054
<v Speaker 0>an IP within the service IP range for

00:33:08.054 --> 00:33:08.855
<v Speaker 0>the cluster.

00:33:09.495 --> 00:33:12.615
<v Speaker 0>You can see here we got a 10Dot105Dot193Dot142.

00:33:12.615 --> 00:33:15.940
<v Speaker 0>Right. Right. Not exported externally and the port

00:33:15.940 --> 00:33:17.700
<v Speaker 0>that we defined is also there.

00:33:19.300 --> 00:33:21.220
<v Speaker 0>So if we want to see this working,

00:33:23.460 --> 00:33:25.700
<v Speaker 0>we can go inside of a port. So

00:33:26.164 --> 00:33:28.485
<v Speaker 0>very much like docker exec, we have the

00:33:28.485 --> 00:33:31.604
<v Speaker 0>ability to ability to do cube control exec

00:33:32.085 --> 00:33:35.445
<v Speaker 0>and I'll jump inside this Oracle DB container

00:33:36.725 --> 00:33:38.965
<v Speaker 0>and I have a bash shell here. Right.

00:33:38.965 --> 00:33:39.765
<v Speaker 0>Do I have curl?

00:33:40.260 --> 00:33:42.260
<v Speaker 0>I do have curl. Excellent. That makes my

00:33:42.260 --> 00:33:43.539
<v Speaker 0>life a little bit easier.

00:33:44.500 --> 00:33:46.580
<v Speaker 0>So I can do curl http

00:33:46.660 --> 00:33:47.779
<v Speaker 0>engine x.

00:33:50.180 --> 00:33:51.220
<v Speaker 0>No, I can't.

00:33:51.620 --> 00:33:53.220
<v Speaker 0>Alright. We may have our first

00:33:53.945 --> 00:33:54.904
<v Speaker 0>problem.

00:33:54.905 --> 00:33:56.985
<v Speaker 0>Ah, the labels were wrong. Okay. So now

00:33:56.985 --> 00:33:59.465
<v Speaker 0>we're into debugging a service. Okay.

00:33:59.865 --> 00:34:02.585
<v Speaker 0>Because when I created this deployment,

00:34:02.585 --> 00:34:05.305
<v Speaker 0>I updated these selectors with the new ones.

00:34:05.305 --> 00:34:07.145
<v Speaker 0>So my selector on the service, if I

00:34:07.145 --> 00:34:10.120
<v Speaker 0>split screen here. Yep. Is NGINX and not

00:34:10.120 --> 00:34:11.400
<v Speaker 1>NGINX tutorial.

00:34:11.960 --> 00:34:12.760
<v Speaker 0>Exactly.

00:34:12.760 --> 00:34:14.679
<v Speaker 0>Now the way you debug this in Kubernetes

00:34:14.679 --> 00:34:16.760
<v Speaker 0>is to describe our service.

00:34:19.640 --> 00:34:21.000
<v Speaker 0>Now what's important here

00:34:21.725 --> 00:34:24.205
<v Speaker 0>is our endpoints are none.

00:34:24.605 --> 00:34:26.685
<v Speaker 0>That's this is the first indicator that the

00:34:26.685 --> 00:34:28.445
<v Speaker 0>service you've created, you've made a mess of

00:34:28.445 --> 00:34:30.525
<v Speaker 0>it. Because it's not there's yeah.

00:34:30.925 --> 00:34:32.765
<v Speaker 1>There's no endpoint to the service.

00:34:33.085 --> 00:34:33.885
<v Speaker 0>Exactly.

00:34:33.885 --> 00:34:35.324
<v Speaker 0>So I'm never gonna be able to create

00:34:35.324 --> 00:34:37.859
<v Speaker 0>it. So we can fix that with

00:34:37.940 --> 00:34:38.900
<v Speaker 0>tutorial.

00:34:39.779 --> 00:34:42.179
<v Speaker 0>We reapply our service and before I even

00:34:42.179 --> 00:34:43.699
<v Speaker 0>query it, I'm just going to scrape this

00:34:43.699 --> 00:34:46.179
<v Speaker 0>thing again and right away we've got two

00:34:46.179 --> 00:34:48.179
<v Speaker 0>endpoints that are happy to answer that question

00:34:48.179 --> 00:34:51.535
<v Speaker 0>of can I speak to engine x? Yep.

00:34:53.535 --> 00:34:55.775
<v Speaker 0>Alright. So let's try that exec again.

00:34:58.015 --> 00:35:00.175
<v Speaker 0>Is my curl there? Yep. And you can

00:35:00.175 --> 00:35:02.175
<v Speaker 0>see if I curl engine x the service

00:35:02.175 --> 00:35:02.575
<v Speaker 0>name,

00:35:03.099 --> 00:35:05.420
<v Speaker 0>I get a response from our engine x

00:35:05.420 --> 00:35:06.780
<v Speaker 0>deployment pods.

00:35:06.940 --> 00:35:07.660
<v Speaker 1>Great.

00:35:08.380 --> 00:35:10.300
<v Speaker 0>And that works ubiquitously

00:35:10.300 --> 00:35:12.220
<v Speaker 0>across your Kubernetes cluster.

00:35:13.180 --> 00:35:15.020
<v Speaker 0>So why don't we tackle

00:35:15.099 --> 00:35:17.020
<v Speaker 0>the very explicit

00:35:17.020 --> 00:35:19.235
<v Speaker 0>DNS name that happens here.

00:35:19.555 --> 00:35:22.195
<v Speaker 0>Now it's not the NGINX as

00:35:22.995 --> 00:35:25.315
<v Speaker 0>a valid domain name. What is actually happening

00:35:25.315 --> 00:35:27.635
<v Speaker 0>here is that it's being completed by the

00:35:27.635 --> 00:35:29.235
<v Speaker 0>DNS within the cluster

00:35:30.035 --> 00:35:30.995
<v Speaker 0>to

00:35:32.120 --> 00:35:34.600
<v Speaker 0>s v c.cluster.local.

00:35:35.640 --> 00:35:36.600
<v Speaker 0>Like so.

00:35:37.080 --> 00:35:38.760
<v Speaker 0>And this is a predetermined

00:35:38.760 --> 00:35:41.000
<v Speaker 0>format that works in almost

00:35:41.000 --> 00:35:43.560
<v Speaker 0>every Kubernetes cluster. So this is the service

00:35:43.560 --> 00:35:46.165
<v Speaker 0>name NGINX, then we get dot followed by

00:35:46.165 --> 00:35:47.285
<v Speaker 0>the namespace,

00:35:47.285 --> 00:35:49.045
<v Speaker 0>which I know we've not covered yet,

00:35:49.925 --> 00:35:52.964
<v Speaker 0>followed by the resource type. So SVC is

00:35:52.964 --> 00:35:54.245
<v Speaker 0>just short for service

00:35:54.565 --> 00:35:57.359
<v Speaker 0>and then this cluster dot local is the

00:35:57.359 --> 00:36:00.079
<v Speaker 0>cluster domain name. Now most cluster ship with

00:36:00.079 --> 00:36:02.240
<v Speaker 0>cluster dot local. I think it's rare that

00:36:02.240 --> 00:36:04.240
<v Speaker 0>I see this changed. However, I guess it

00:36:04.240 --> 00:36:05.760
<v Speaker 0>is important to know that

00:36:06.000 --> 00:36:07.599
<v Speaker 0>it's not gonna be there a % of

00:36:07.599 --> 00:36:09.760
<v Speaker 0>the time. Whoever spends up the Kubernetes cluster

00:36:09.760 --> 00:36:12.400
<v Speaker 0>can pick anything they want. You can have

00:36:12.204 --> 00:36:14.765
<v Speaker 0>david dot lol cat or something. So

00:36:16.845 --> 00:36:17.325
<v Speaker 0>because

00:36:19.005 --> 00:36:21.165
<v Speaker 0>of the way the DNS resolution works, I

00:36:21.165 --> 00:36:22.285
<v Speaker 0>can query that

00:36:22.924 --> 00:36:25.085
<v Speaker 0>at each level. This is something in DNS

00:36:25.085 --> 00:36:27.630
<v Speaker 0>resolution called end dots it's configured within the

00:36:27.630 --> 00:36:28.670
<v Speaker 0>cluster. So

00:36:29.150 --> 00:36:31.309
<v Speaker 0>you got a lot of flexibility with service

00:36:31.309 --> 00:36:32.030
<v Speaker 0>discovery.

00:36:32.910 --> 00:36:33.790
<v Speaker 0>Now something that

00:36:34.430 --> 00:36:37.150
<v Speaker 0>something else that is really cool about this

00:36:37.150 --> 00:36:38.750
<v Speaker 0>because it's not cool enough that you get

00:36:38.750 --> 00:36:40.030
<v Speaker 0>DNS based resolution.

00:36:40.565 --> 00:36:42.805
<v Speaker 0>You also get rounds robbing

00:36:42.805 --> 00:36:43.845
<v Speaker 0>load balancing.

00:36:44.565 --> 00:36:47.045
<v Speaker 1>So so it's also doing the load balancer

00:36:47.045 --> 00:36:49.045
<v Speaker 1>as well as the because I saw that

00:36:49.045 --> 00:36:51.685
<v Speaker 1>it when you did the describe the service,

00:36:51.685 --> 00:36:53.445
<v Speaker 1>it had two endpoints. So it will basically

00:36:53.445 --> 00:36:55.205
<v Speaker 1>load balance between those two endpoints.

00:36:56.810 --> 00:36:59.530
<v Speaker 0>That is correct. Now let's visualize that.

00:36:59.930 --> 00:37:02.490
<v Speaker 0>Let's modify our image here.

00:37:06.650 --> 00:37:08.890
<v Speaker 0>No. So this is an image that exists

00:37:08.890 --> 00:37:10.410
<v Speaker 0>on the public Docker registry.

00:37:11.505 --> 00:37:13.505
<v Speaker 0>Is from the functions as a service project

00:37:13.505 --> 00:37:14.785
<v Speaker 0>open fast and

00:37:15.265 --> 00:37:19.025
<v Speaker 0>the node info name just means that this

00:37:19.025 --> 00:37:19.905
<v Speaker 0>container

00:37:19.905 --> 00:37:22.305
<v Speaker 0>will respond with whatever the host name is

00:37:22.305 --> 00:37:22.545
<v Speaker 0>called.

00:37:23.340 --> 00:37:26.140
<v Speaker 0>Now because of Kubernetes networking, the host name

00:37:26.140 --> 00:37:27.820
<v Speaker 0>is the pod name. You can see here

00:37:27.820 --> 00:37:29.580
<v Speaker 0>on the Oracle one that this is the

00:37:29.580 --> 00:37:31.180
<v Speaker 0>the name of my pod.

00:37:31.500 --> 00:37:32.060
<v Speaker 0>So

00:37:32.540 --> 00:37:33.900
<v Speaker 0>if I reapply

00:37:33.900 --> 00:37:35.340
<v Speaker 0>our deployment one,

00:37:38.885 --> 00:37:41.205
<v Speaker 0>we should see those all will be rotating.

00:37:41.685 --> 00:37:44.165
<v Speaker 0>Yep. So the first one's on its way.

00:37:45.205 --> 00:37:46.485
<v Speaker 0>Let's just watch.

00:37:46.565 --> 00:37:49.045
<v Speaker 0>It's pulling in that functions node info.

00:37:49.700 --> 00:37:51.700
<v Speaker 0>Now it's replacing the other two.

00:37:55.380 --> 00:37:57.060
<v Speaker 0>We just got one more to go.

00:38:00.339 --> 00:38:02.099
<v Speaker 0>Alright. We're good. So

00:38:02.965 --> 00:38:04.885
<v Speaker 0>these are now these two parts here are

00:38:04.885 --> 00:38:07.045
<v Speaker 0>running the node info.

00:38:07.765 --> 00:38:10.485
<v Speaker 0>Don't break. Okay. The node info image.

00:38:10.885 --> 00:38:12.885
<v Speaker 0>So I'm gonna jump back into Oracle and

00:38:12.885 --> 00:38:14.724
<v Speaker 0>just run this again. So we're gonna see

00:38:14.724 --> 00:38:17.120
<v Speaker 0>different output. This is no longer going to

00:38:17.120 --> 00:38:20.240
<v Speaker 0>be the output from NGINX or Apache web

00:38:20.240 --> 00:38:20.880
<v Speaker 0>server.

00:38:24.000 --> 00:38:26.160
<v Speaker 0>That was unexpected. Ah, the port has changed.

00:38:28.095 --> 00:38:29.935
<v Speaker 0>I never thought of that. Okay. So this

00:38:29.935 --> 00:38:32.575
<v Speaker 0>port is actually eighty eighty in that container.

00:38:32.895 --> 00:38:33.615
<v Speaker 1>Okay.

00:38:34.255 --> 00:38:36.415
<v Speaker 0>So now we need to target port.

00:38:36.974 --> 00:38:38.335
<v Speaker 0>So I'm still going to expose it on

00:38:38.335 --> 00:38:40.175
<v Speaker 0>port 80. I don't wanna change my curl

00:38:40.175 --> 00:38:40.575
<v Speaker 0>command.

00:38:41.150 --> 00:38:42.430
<v Speaker 0>Right. I want it I want it to

00:38:42.430 --> 00:38:44.510
<v Speaker 0>work like that. So now the target port

00:38:44.510 --> 00:38:46.350
<v Speaker 0>and the port are actually different. So we

00:38:46.350 --> 00:38:47.870
<v Speaker 0>just specify it like so.

00:38:49.150 --> 00:38:51.070
<v Speaker 0>So now I need to reapply

00:38:51.230 --> 00:38:53.070
<v Speaker 0>our deployment.yaml

00:38:53.070 --> 00:38:54.910
<v Speaker 0>and our service. And we can do that

00:38:54.910 --> 00:38:56.955
<v Speaker 0>in one line or with two dash f

00:38:56.955 --> 00:38:58.315
<v Speaker 0>flags. Okay.

00:39:00.875 --> 00:39:01.675
<v Speaker 0>We

00:39:01.835 --> 00:39:04.235
<v Speaker 0>shouldn't actually need to wait. That should all

00:39:04.235 --> 00:39:04.955
<v Speaker 0>restart

00:39:06.075 --> 00:39:07.115
<v Speaker 0>pretty quickly.

00:39:07.195 --> 00:39:09.275
<v Speaker 0>Quicker than that. Come on. I guess the

00:39:09.275 --> 00:39:10.875
<v Speaker 0>shutdown is actually what's making it take a

00:39:10.875 --> 00:39:12.155
<v Speaker 0>little bit longer than I thought it would.

00:39:12.849 --> 00:39:14.050
<v Speaker 0>I'll be patient.

00:39:14.369 --> 00:39:15.570
<v Speaker 0>I'm very patient.

00:39:20.290 --> 00:39:22.130
<v Speaker 0>Okay. So we got two new ones running

00:39:22.130 --> 00:39:24.050
<v Speaker 0>and the old one's shutting down, that's okay,

00:39:24.050 --> 00:39:25.410
<v Speaker 0>but we have these two which are twenty

00:39:25.410 --> 00:39:26.050
<v Speaker 0>seconds old.

00:39:29.015 --> 00:39:31.494
<v Speaker 0>So we go back into Oracle DB and

00:39:31.494 --> 00:39:33.575
<v Speaker 0>we can hopefully curl NGINX.

00:39:33.575 --> 00:39:34.215
<v Speaker 0>Perfect.

00:39:34.454 --> 00:39:35.974
<v Speaker 1>Yep. And it gives you the host name.

00:39:35.974 --> 00:39:37.734
<v Speaker 1>Yeah. So now we have the host name,

00:39:37.734 --> 00:39:40.135
<v Speaker 0>the platform, the architecture, how many CPUs are

00:39:40.135 --> 00:39:41.335
<v Speaker 0>available and the uptime.

00:39:41.730 --> 00:39:43.730
<v Speaker 0>And if I hit this more than once,

00:39:45.010 --> 00:39:45.890
<v Speaker 0>there we go.

00:39:46.770 --> 00:39:48.369
<v Speaker 0>You see the host name changed on the

00:39:48.369 --> 00:39:50.530
<v Speaker 0>third try. Now we've only got two two

00:39:50.530 --> 00:39:51.410
<v Speaker 0>pods.

00:39:52.369 --> 00:39:53.810
<v Speaker 0>So it did take a couple of tries,

00:39:53.810 --> 00:39:55.170
<v Speaker 0>but you can see we are getting load

00:39:55.170 --> 00:39:58.675
<v Speaker 0>balancing across those service endpoints. So another really

00:39:58.675 --> 00:40:00.515
<v Speaker 0>cool kind of quality

00:40:00.515 --> 00:40:01.954
<v Speaker 0>of life thing that you get for free

00:40:01.954 --> 00:40:03.955
<v Speaker 0>that used to be really difficult or,

00:40:04.194 --> 00:40:05.875
<v Speaker 0>you know, configure an h a proxy to

00:40:05.875 --> 00:40:07.714
<v Speaker 0>do, you know, the load balancing part. It

00:40:07.714 --> 00:40:08.994
<v Speaker 0>can be a little bit cumbersome.

00:40:09.690 --> 00:40:10.970
<v Speaker 0>This is nice. Right?

00:40:11.369 --> 00:40:12.010
<v Speaker 1>Yeah.

00:40:12.570 --> 00:40:15.050
<v Speaker 1>So my question about all of this is,

00:40:15.050 --> 00:40:15.770
<v Speaker 1>you know,

00:40:16.250 --> 00:40:19.690
<v Speaker 1>how much overhead am I adding with all

00:40:19.690 --> 00:40:22.410
<v Speaker 1>of this? I know that, you know, Docker,

00:40:22.410 --> 00:40:25.585
<v Speaker 1>at least on Docker Mac, is is just

00:40:25.585 --> 00:40:27.265
<v Speaker 1>a resource pig.

00:40:27.585 --> 00:40:30.225
<v Speaker 1>So am I am I adding a ton

00:40:30.225 --> 00:40:33.185
<v Speaker 1>of overhead to whatever I'm doing, you know,

00:40:33.185 --> 00:40:35.585
<v Speaker 1>just to get this this little bit of

00:40:35.585 --> 00:40:36.385
<v Speaker 1>niceness?

00:40:38.705 --> 00:40:40.465
<v Speaker 0>Yeah. I mean, there's no

00:40:41.769 --> 00:40:43.769
<v Speaker 0>there there is a cost. It's not free

00:40:43.769 --> 00:40:46.089
<v Speaker 0>of course. There are many, not many. There

00:40:46.089 --> 00:40:47.769
<v Speaker 0>are a few components that need to be

00:40:47.769 --> 00:40:49.690
<v Speaker 0>running on the the bare metal for this

00:40:49.690 --> 00:40:50.410
<v Speaker 0>to work.

00:40:50.730 --> 00:40:53.049
<v Speaker 0>The Docker for Mac is a slightly unique

00:40:53.049 --> 00:40:55.849
<v Speaker 0>situation and that because Mac doesn't understand container

00:40:55.849 --> 00:40:57.075
<v Speaker 0>primitives directly,

00:40:57.635 --> 00:40:59.635
<v Speaker 0>Docker for Mac does run a virtual machine

00:40:59.875 --> 00:41:01.795
<v Speaker 0>that virtual machine running is gonna be a

00:41:01.795 --> 00:41:02.835
<v Speaker 0>battery sync.

00:41:03.315 --> 00:41:03.795
<v Speaker 0>So

00:41:05.075 --> 00:41:07.315
<v Speaker 0>let's just talk about maybe the bare metal

00:41:07.315 --> 00:41:08.994
<v Speaker 0>experience rather than the Docker for Mac one

00:41:08.994 --> 00:41:10.720
<v Speaker 0>because I think that's that's just something we

00:41:10.720 --> 00:41:12.160
<v Speaker 0>have to live with if we if we

00:41:12.160 --> 00:41:13.440
<v Speaker 0>run Macs. So

00:41:13.680 --> 00:41:15.760
<v Speaker 0>on a bare metal environment, the overhead for

00:41:15.760 --> 00:41:16.960
<v Speaker 0>running containers

00:41:16.960 --> 00:41:18.160
<v Speaker 0>with Kubernetes

00:41:18.880 --> 00:41:21.280
<v Speaker 0>will be there is a cubelet process on

00:41:21.280 --> 00:41:21.680
<v Speaker 0>the machine,

00:41:22.494 --> 00:41:24.655
<v Speaker 0>which is responsible for start and stopping and

00:41:24.655 --> 00:41:26.095
<v Speaker 0>handling the containers.

00:41:26.734 --> 00:41:27.855
<v Speaker 0>There is

00:41:27.855 --> 00:41:29.615
<v Speaker 0>a cube proxy

00:41:30.015 --> 00:41:32.095
<v Speaker 0>or a CNI implementation.

00:41:32.095 --> 00:41:33.855
<v Speaker 0>So there is some sort of networking on

00:41:33.855 --> 00:41:35.855
<v Speaker 0>the machine that actually knows how to do

00:41:35.855 --> 00:41:38.440
<v Speaker 0>all the IP table manipulation.

00:41:38.840 --> 00:41:40.280
<v Speaker 0>So there's a cost there.

00:41:40.680 --> 00:41:42.280
<v Speaker 0>There is also

00:41:43.320 --> 00:41:46.200
<v Speaker 0>across the cluster, but not across every node,

00:41:46.280 --> 00:41:48.040
<v Speaker 0>there is API servers,

00:41:48.040 --> 00:41:49.000
<v Speaker 0>schedulers,

00:41:49.080 --> 00:41:49.720
<v Speaker 0>and

00:41:50.345 --> 00:41:51.545
<v Speaker 0>etcd.

00:41:51.785 --> 00:41:54.664
<v Speaker 0>Oh, and DNS. So those those four control

00:41:54.664 --> 00:41:57.385
<v Speaker 0>plane components which have to be scheduled somewhere,

00:41:57.545 --> 00:41:59.385
<v Speaker 0>if not on all the working nodes. Well,

00:41:59.385 --> 00:42:00.424
<v Speaker 0>probably not on all the working nodes, but

00:42:00.424 --> 00:42:01.625
<v Speaker 0>they have to be scheduled somewhere and highly

00:42:01.625 --> 00:42:04.530
<v Speaker 0>available. So there is a cost. It's actually

00:42:04.530 --> 00:42:06.530
<v Speaker 0>not too bad considering the things you get

00:42:06.530 --> 00:42:07.410
<v Speaker 0>for free.

00:42:08.050 --> 00:42:09.810
<v Speaker 0>Because if you were gonna do this manually,

00:42:09.810 --> 00:42:11.490
<v Speaker 0>I mean besides all the automation you would

00:42:11.490 --> 00:42:13.250
<v Speaker 0>have to write to dynamically

00:42:13.250 --> 00:42:15.890
<v Speaker 0>reconfigure HAProxy as services come and go.

00:42:16.625 --> 00:42:19.185
<v Speaker 0>This is probably a little bit cheaper,

00:42:19.505 --> 00:42:21.825
<v Speaker 0>but with the painful point of, well, shit.

00:42:21.825 --> 00:42:23.265
<v Speaker 0>You need to learn all this stuff now.

00:42:23.265 --> 00:42:23.825
<v Speaker 0>So,

00:42:25.345 --> 00:42:26.785
<v Speaker 0>you know, choose your battle.

00:42:27.105 --> 00:42:28.065
<v Speaker 1>Yeah. Yep.

00:42:30.069 --> 00:42:33.829
<v Speaker 0>Okay. So we covered pods. We covered deployments.

00:42:33.829 --> 00:42:35.430
<v Speaker 0>We have covered discovery

00:42:35.430 --> 00:42:39.349
<v Speaker 0>and load balancing across pods with services.

00:42:39.349 --> 00:42:42.150
<v Speaker 0>Now we've only looked at one service type,

00:42:42.150 --> 00:42:43.589
<v Speaker 0>which was the cluster IP.

00:42:44.184 --> 00:42:46.025
<v Speaker 0>That is the default, that is why there's

00:42:46.025 --> 00:42:47.865
<v Speaker 0>nothing in my YAML that says this is

00:42:47.865 --> 00:42:48.905
<v Speaker 0>cluster IP,

00:42:49.145 --> 00:42:50.505
<v Speaker 0>but you can pretend

00:42:51.145 --> 00:42:53.224
<v Speaker 0>that we had this line here, so that

00:42:53.224 --> 00:42:55.305
<v Speaker 0>is just the default. There are other service

00:42:55.305 --> 00:42:56.025
<v Speaker 0>types.

00:42:56.505 --> 00:42:58.984
<v Speaker 0>I don't think they're gonna be particularly important

00:42:58.984 --> 00:43:02.170
<v Speaker 0>for today. They are typically used to expose

00:43:02.170 --> 00:43:05.450
<v Speaker 0>services from the cluster outside of the cluster.

00:43:08.810 --> 00:43:09.610
<v Speaker 0>Okay.

00:43:09.770 --> 00:43:11.290
<v Speaker 0>How about

00:43:14.835 --> 00:43:15.715
<v Speaker 0>configuration?

00:43:16.675 --> 00:43:17.395
<v Speaker 0>So

00:43:19.075 --> 00:43:21.315
<v Speaker 0>what do we have running right now?

00:43:24.835 --> 00:43:28.595
<v Speaker 0>Okay. Let's do this. Let's change our functions

00:43:28.595 --> 00:43:31.420
<v Speaker 0>as a service back to engine x.

00:43:35.820 --> 00:43:37.260
<v Speaker 0>Oh, that's a good point. We could do

00:43:37.260 --> 00:43:38.300
<v Speaker 0>that too. Okay.

00:43:38.700 --> 00:43:40.380
<v Speaker 0>Sorry. Too many ideas.

00:43:40.700 --> 00:43:43.340
<v Speaker 0>I'll leave telegraph in. We change this port

00:43:43.340 --> 00:43:43.580
<v Speaker 0>back,

00:43:44.495 --> 00:43:46.175
<v Speaker 0>and we'll leave all that of it. So

00:43:46.175 --> 00:43:48.095
<v Speaker 0>really all I wanna do right now is

00:43:48.095 --> 00:43:48.975
<v Speaker 0>get

00:43:48.975 --> 00:43:49.695
<v Speaker 0>our

00:43:52.975 --> 00:43:56.815
<v Speaker 0>get our engine x

00:43:56.430 --> 00:43:57.630
<v Speaker 0>back to normal.

00:44:03.230 --> 00:44:05.710
<v Speaker 0>We'll give that a few seconds. So Okay.

00:44:06.750 --> 00:44:08.670
<v Speaker 0>What we're gonna do now is

00:44:08.750 --> 00:44:12.025
<v Speaker 0>we wanna inject some arbitrary information

00:44:12.025 --> 00:44:13.865
<v Speaker 0>into this NGINX

00:44:13.865 --> 00:44:14.745
<v Speaker 0>pod

00:44:14.985 --> 00:44:17.065
<v Speaker 0>so that we can change the behavior.

00:44:17.465 --> 00:44:20.585
<v Speaker 0>Right now responding with the NGINX

00:44:22.200 --> 00:44:23.400
<v Speaker 0>and hello

00:44:23.400 --> 00:44:26.839
<v Speaker 0>world style page or basic default page isn't

00:44:26.839 --> 00:44:27.960
<v Speaker 0>terribly useful.

00:44:28.440 --> 00:44:30.200
<v Speaker 0>So we wanna see how we can pass

00:44:30.200 --> 00:44:32.040
<v Speaker 0>in some sort of configuration to change that

00:44:32.040 --> 00:44:32.840
<v Speaker 0>behavior.

00:44:32.920 --> 00:44:34.599
<v Speaker 0>We may even just do that to configure

00:44:34.599 --> 00:44:36.920
<v Speaker 0>Telegraph to probe engine x or something like

00:44:36.920 --> 00:44:38.885
<v Speaker 0>that. But we we wanna show how we

00:44:38.885 --> 00:44:40.565
<v Speaker 0>can configure the the

00:44:40.645 --> 00:44:43.685
<v Speaker 0>processes running within our pods. Okay.

00:44:44.885 --> 00:44:46.805
<v Speaker 0>Now to do that, we need a new

00:44:46.805 --> 00:44:48.005
<v Speaker 0>resource type.

00:44:48.645 --> 00:44:51.285
<v Speaker 0>So let's call this config map dot yaml.

00:45:00.300 --> 00:45:02.460
<v Speaker 0>Config maps. And

00:45:03.500 --> 00:45:07.100
<v Speaker 0>we'll call this NGINX. Now config maps are

00:45:07.434 --> 00:45:10.154
<v Speaker 0>YAML definitions of key value pairs that live

00:45:10.154 --> 00:45:11.595
<v Speaker 0>inside of our cluster.

00:45:12.714 --> 00:45:13.994
<v Speaker 0>So I could have

00:45:14.395 --> 00:45:15.515
<v Speaker 0>username

00:45:16.154 --> 00:45:17.115
<v Speaker 0>Rawkode.

00:45:17.914 --> 00:45:20.635
<v Speaker 0>I could have index.HTML

00:45:20.940 --> 00:45:24.540
<v Speaker 0>and use YAML's multilane thingamajiggy to say hello.

00:45:25.260 --> 00:45:26.380
<v Speaker 0>I am

00:45:26.780 --> 00:45:27.820
<v Speaker 0>Rawkode.

00:45:28.859 --> 00:45:29.500
<v Speaker 0>And

00:45:29.660 --> 00:45:31.740
<v Speaker 0>if I want, I could do some sort

00:45:31.740 --> 00:45:32.620
<v Speaker 0>of list.

00:45:33.020 --> 00:45:34.619
<v Speaker 0>So I could do numbers

00:45:36.835 --> 00:45:37.475
<v Speaker 0>One,

00:45:38.035 --> 00:45:38.675
<v Speaker 0>two,

00:45:39.155 --> 00:45:39.955
<v Speaker 0>three.

00:45:42.195 --> 00:45:43.955
<v Speaker 0>Why is this yelling at me?

00:45:53.880 --> 00:45:55.080
<v Speaker 0>It is a string.

00:46:01.640 --> 00:46:03.160
<v Speaker 0>Why am I failing at YAML?

00:46:05.885 --> 00:46:07.165
<v Speaker 1>Because it's YAML.

00:46:15.165 --> 00:46:15.805
<v Speaker 0>This I

00:46:17.005 --> 00:46:18.445
<v Speaker 0>every time I think there's nothing wrong with

00:46:18.445 --> 00:46:20.685
<v Speaker 0>my YAML, I'm always proven wrong. So

00:46:22.180 --> 00:46:24.740
<v Speaker 0>the YAML linter is my friend.

00:46:27.540 --> 00:46:29.140
<v Speaker 0>My YAML is fine.

00:46:29.780 --> 00:46:30.500
<v Speaker 1>Mhmm.

00:46:31.220 --> 00:46:33.540
<v Speaker 0>Okay. I'm just gonna assume it's wrong and

00:46:33.540 --> 00:46:35.380
<v Speaker 0>Versus Code is just a little bit confused.

00:46:36.605 --> 00:46:37.244
<v Speaker 0>So

00:46:38.525 --> 00:46:40.445
<v Speaker 0>let's apply our config map.

00:46:41.484 --> 00:46:43.484
<v Speaker 0>And the type got an array is bit

00:46:43.565 --> 00:46:44.445
<v Speaker 0>oh, okay.

00:46:45.085 --> 00:46:47.805
<v Speaker 0>Yeah. It's right. I'm wrong. Config map key

00:46:47.805 --> 00:46:50.285
<v Speaker 0>value pairs cannot have sub types.

00:46:50.285 --> 00:46:51.645
<v Speaker 0>So let's just do numbers

00:46:52.340 --> 00:46:53.220
<v Speaker 0>like this.

00:46:53.700 --> 00:46:55.060
<v Speaker 0>Just me being silly.

00:46:57.700 --> 00:46:59.540
<v Speaker 0>Okay. So we can apply that. And now

00:46:59.540 --> 00:47:02.100
<v Speaker 0>we have something called a configuration map available

00:47:02.100 --> 00:47:04.100
<v Speaker 0>inside of our cluster. We can do get

00:47:04.100 --> 00:47:06.645
<v Speaker 0>config maps. We see engine x. We can

00:47:06.645 --> 00:47:08.165
<v Speaker 0>query engine x.

00:47:08.485 --> 00:47:11.045
<v Speaker 0>We can use the output toggle that we

00:47:11.045 --> 00:47:12.085
<v Speaker 0>were using earlier,

00:47:12.645 --> 00:47:14.565
<v Speaker 0>and we can see our data is now

00:47:14.565 --> 00:47:17.445
<v Speaker 0>stored here inside of our config map. Okay.

00:47:18.530 --> 00:47:20.050
<v Speaker 0>That is now in a position

00:47:20.849 --> 00:47:23.170
<v Speaker 0>where we can consume this within our pods

00:47:23.170 --> 00:47:24.210
<v Speaker 0>and deployments

00:47:24.210 --> 00:47:26.770
<v Speaker 0>and inject the inside of the containers.

00:47:27.170 --> 00:47:28.369
<v Speaker 0>And there are two ways we can do

00:47:28.369 --> 00:47:28.930
<v Speaker 0>this.

00:47:30.609 --> 00:47:30.930
<v Speaker 0>So

00:47:33.245 --> 00:47:34.605
<v Speaker 0>let's open

00:47:34.765 --> 00:47:35.485
<v Speaker 0>this.

00:47:38.525 --> 00:47:40.285
<v Speaker 0>What should we do first?

00:47:40.285 --> 00:47:42.125
<v Speaker 0>Let's do exposing

00:47:42.285 --> 00:47:44.525
<v Speaker 0>these as environment variables.

00:47:47.090 --> 00:47:49.010
<v Speaker 0>So we can do env from,

00:47:51.330 --> 00:47:53.090
<v Speaker 0>contact map reference,

00:47:56.050 --> 00:47:58.050
<v Speaker 0>give it the name of engine x.

00:48:00.045 --> 00:48:01.965
<v Speaker 0>So these three lanes here

00:48:02.605 --> 00:48:05.085
<v Speaker 0>tell our deployment that there is a config

00:48:05.085 --> 00:48:07.484
<v Speaker 0>map called engine x that we want to

00:48:07.484 --> 00:48:10.445
<v Speaker 0>expose as environment variables within the container.

00:48:10.765 --> 00:48:11.244
<v Speaker 1>Okay.

00:48:12.670 --> 00:48:14.590
<v Speaker 0>I can reapply my deployment.

00:48:17.230 --> 00:48:18.910
<v Speaker 0>And what we will do is just to

00:48:18.910 --> 00:48:20.750
<v Speaker 0>connect and to one of those pods.

00:48:24.465 --> 00:48:26.225
<v Speaker 0>That was just restarted.

00:48:26.945 --> 00:48:27.825
<v Speaker 0>Let's try again.

00:48:37.059 --> 00:48:38.420
<v Speaker 0>Oh, there's two pods.

00:48:38.819 --> 00:48:41.140
<v Speaker 0>Yeah. So sorry. There's two containers. You need

00:48:41.140 --> 00:48:42.980
<v Speaker 0>to specify the container name when there are

00:48:42.980 --> 00:48:45.460
<v Speaker 0>two. So dash c nginx and then run

00:48:45.460 --> 00:48:47.619
<v Speaker 0>bash. I was getting confused about which one

00:48:47.619 --> 00:48:48.579
<v Speaker 0>I wanted to run-in.

00:48:50.575 --> 00:48:52.495
<v Speaker 0>And that pod is away because that's the

00:48:52.495 --> 00:48:52.735
<v Speaker 0>one that

00:48:54.895 --> 00:48:56.415
<v Speaker 0>should just wait until all the pods have

00:48:56.415 --> 00:48:58.975
<v Speaker 0>restarted before I get inside of them, shouldn't

00:48:58.975 --> 00:49:00.255
<v Speaker 0>I? Alright.

00:49:00.975 --> 00:49:03.620
<v Speaker 0>So this ID has changed, so let's do

00:49:03.620 --> 00:49:05.620
<v Speaker 0>this. Okay. So now we've got a proper

00:49:05.620 --> 00:49:07.940
<v Speaker 0>pod name. We tell it which container and

00:49:07.940 --> 00:49:09.300
<v Speaker 0>we want to run bash.

00:49:09.700 --> 00:49:10.340
<v Speaker 0>Finally.

00:49:10.500 --> 00:49:11.380
<v Speaker 1>There you go.

00:49:12.260 --> 00:49:13.940
<v Speaker 0>We can run the e n v

00:49:14.660 --> 00:49:15.300
<v Speaker 0>command

00:49:16.145 --> 00:49:17.985
<v Speaker 0>and we'll see here

00:49:18.385 --> 00:49:19.825
<v Speaker 0>HTML

00:49:19.825 --> 00:49:22.145
<v Speaker 0>equals hello, I am Rawkode.

00:49:22.145 --> 00:49:24.385
<v Speaker 0>We have numbers equals numbers

00:49:25.105 --> 00:49:27.265
<v Speaker 0>and username equals Rawkode.

00:49:28.030 --> 00:49:30.270
<v Speaker 0>So now I have a way to dynamically

00:49:30.270 --> 00:49:33.550
<v Speaker 0>configure my application as long as it understands

00:49:33.550 --> 00:49:35.070
<v Speaker 0>environment variables.

00:49:35.230 --> 00:49:38.190
<v Speaker 1>So for things like if you were, for

00:49:38.190 --> 00:49:41.390
<v Speaker 1>instance, running a a database that had a

00:49:41.790 --> 00:49:43.710
<v Speaker 1>that you had to pass in a

00:49:44.005 --> 00:49:44.805
<v Speaker 1>a key

00:49:45.285 --> 00:49:46.085
<v Speaker 1>for

00:49:46.565 --> 00:49:47.365
<v Speaker 1>inserts,

00:49:47.365 --> 00:49:48.805
<v Speaker 1>you could run and they can get that

00:49:48.805 --> 00:49:51.205
<v Speaker 1>from an environment variable. You pass it in

00:49:51.205 --> 00:49:54.405
<v Speaker 1>there, and then all of the the various

00:49:54.405 --> 00:49:55.285
<v Speaker 1>pods

00:49:55.285 --> 00:49:56.805
<v Speaker 1>pick up that value. Right?

00:49:57.500 --> 00:49:59.260
<v Speaker 0>That is correct. Yes.

00:50:00.540 --> 00:50:01.980
<v Speaker 0>Now we have another option.

00:50:03.020 --> 00:50:05.099
<v Speaker 0>If we don't want if our application cannot

00:50:05.099 --> 00:50:07.500
<v Speaker 0>be configured through environment variables, we have the

00:50:07.500 --> 00:50:09.099
<v Speaker 0>ability to use a volume.

00:50:11.105 --> 00:50:13.744
<v Speaker 0>So in our deployment spec here, we can

00:50:13.744 --> 00:50:15.585
<v Speaker 0>see volumes.

00:50:16.224 --> 00:50:18.065
<v Speaker 0>We'll call this config.

00:50:18.545 --> 00:50:20.625
<v Speaker 0>The volume can come from somewhere.

00:50:22.190 --> 00:50:23.950
<v Speaker 0>So we can see here that it is

00:50:23.950 --> 00:50:25.470
<v Speaker 0>a config map

00:50:26.509 --> 00:50:27.630
<v Speaker 0>with the name

00:50:27.869 --> 00:50:28.910
<v Speaker 0>NGINX.

00:50:29.470 --> 00:50:32.990
<v Speaker 0>So this says define a volume called config

00:50:33.069 --> 00:50:36.190
<v Speaker 0>with the contents of the config map NGINX.

00:50:36.734 --> 00:50:37.454
<v Speaker 1>Okay.

00:50:38.095 --> 00:50:39.615
<v Speaker 0>Now that doesn't do anything

00:50:40.095 --> 00:50:42.815
<v Speaker 0>on its own. We then have to mount

00:50:43.775 --> 00:50:46.335
<v Speaker 0>the volume into the container that we want

00:50:46.335 --> 00:50:47.214
<v Speaker 0>to have it.

00:50:47.535 --> 00:50:48.175
<v Speaker 0>So

00:50:48.575 --> 00:50:50.575
<v Speaker 0>here, we can do volume mounts,

00:50:51.530 --> 00:50:53.930
<v Speaker 0>mount path, I'll call it config,

00:50:54.329 --> 00:50:56.010
<v Speaker 0>and the volume that we wish to mount

00:50:56.010 --> 00:50:57.290
<v Speaker 0>is config. Yeah.

00:50:58.170 --> 00:50:58.890
<v Speaker 0>Okay.

00:50:59.369 --> 00:51:01.610
<v Speaker 0>So now we can come back over here.

00:51:01.849 --> 00:51:03.290
<v Speaker 0>I love that when you just do one

00:51:03.290 --> 00:51:05.369
<v Speaker 0>of these introduction to Kubernetes things, it's just,

00:51:05.369 --> 00:51:07.575
<v Speaker 0>hey, look at all of this YAML. Yeah.

00:51:07.575 --> 00:51:08.135
<v Speaker 1>I'm

00:51:08.375 --> 00:51:09.175
<v Speaker 0>really sorry.

00:51:09.974 --> 00:51:11.895
<v Speaker 1>No. And I don't know whether it's really

00:51:11.895 --> 00:51:13.575
<v Speaker 1>scary or or

00:51:14.055 --> 00:51:16.295
<v Speaker 1>but it's actually starting to make sense. So

00:51:16.295 --> 00:51:18.295
<v Speaker 1>that should probably scare people that are watching

00:51:18.295 --> 00:51:20.295
<v Speaker 1>this because it's actually starting to make sense

00:51:20.295 --> 00:51:20.535
<v Speaker 1>to me.

00:51:21.819 --> 00:51:23.740
<v Speaker 0>Well, that's good. I'm glad that I'm not

00:51:23.740 --> 00:51:27.579
<v Speaker 0>just bombarding you with YAML. Okay. So we're

00:51:27.579 --> 00:51:29.260
<v Speaker 0>gonna go back inside one of our new

00:51:29.260 --> 00:51:31.099
<v Speaker 0>pods, not one of our old pods. And

00:51:31.099 --> 00:51:32.540
<v Speaker 0>just so I don't have the old one,

00:51:32.540 --> 00:51:35.020
<v Speaker 0>I will copy and paste. We specify the

00:51:35.020 --> 00:51:35.420
<v Speaker 0>container

00:51:35.945 --> 00:51:38.265
<v Speaker 0>and we specify the command. So we still

00:51:38.265 --> 00:51:40.265
<v Speaker 0>have our environment variables here.

00:51:40.425 --> 00:51:41.545
<v Speaker 0>Yep. However,

00:51:41.625 --> 00:51:43.465
<v Speaker 0>we should now have

00:51:44.505 --> 00:51:46.265
<v Speaker 0>this conflict directory.

00:51:46.585 --> 00:51:47.225
<v Speaker 1>Yep.

00:51:47.465 --> 00:51:48.985
<v Speaker 0>Where I can cat

00:51:49.420 --> 00:51:51.180
<v Speaker 0>each of those values

00:51:53.100 --> 00:51:53.980
<v Speaker 0>like so.

00:51:54.860 --> 00:51:56.540
<v Speaker 0>I know that's a little bit difficult to

00:51:56.540 --> 00:51:58.540
<v Speaker 0>see because it kinda happened in lane.

00:51:59.500 --> 00:52:01.340
<v Speaker 0>But, you know Yeah. There's a Rawkode at

00:52:01.340 --> 00:52:03.100
<v Speaker 0>the start of that and the numbers here.

00:52:03.100 --> 00:52:05.660
<v Speaker 1>Yep. And our multilane

00:52:05.205 --> 00:52:06.085
<v Speaker 0>string.

00:52:06.645 --> 00:52:07.365
<v Speaker 0>There.

00:52:09.605 --> 00:52:11.125
<v Speaker 0>So those are the

00:52:12.565 --> 00:52:15.525
<v Speaker 0>that's how we configure our pods with non

00:52:15.525 --> 00:52:16.805
<v Speaker 0>secret information.

00:52:18.340 --> 00:52:19.620
<v Speaker 0>There is something

00:52:19.859 --> 00:52:22.900
<v Speaker 0>very similar to a config map called a

00:52:22.900 --> 00:52:23.700
<v Speaker 0>secret,

00:52:25.060 --> 00:52:27.220
<v Speaker 0>which is kind of secret, but not completely

00:52:27.220 --> 00:52:27.940
<v Speaker 0>secret.

00:52:28.900 --> 00:52:30.020
<v Speaker 1>Okay. So

00:52:31.300 --> 00:52:32.020
<v Speaker 0>let's let's just

00:52:33.695 --> 00:52:35.775
<v Speaker 1>So we're calling it secret, but it's not

00:52:35.775 --> 00:52:36.975
<v Speaker 1>really secret.

00:52:37.215 --> 00:52:38.495
<v Speaker 0>Yes. Unfortunately.

00:52:39.695 --> 00:52:41.055
<v Speaker 0>So what I'm gonna do is

00:52:41.615 --> 00:52:43.855
<v Speaker 0>YAML allows us to do three dashes to

00:52:43.855 --> 00:52:46.480
<v Speaker 0>split one document into multiple types. I'm just

00:52:46.480 --> 00:52:48.400
<v Speaker 0>gonna use that here. I'm gonna copy the

00:52:48.400 --> 00:52:49.520
<v Speaker 0>config map,

00:52:49.760 --> 00:52:52.000
<v Speaker 0>paste it, and I'm just gonna change this

00:52:52.000 --> 00:52:52.720
<v Speaker 0>to be

00:52:53.840 --> 00:52:54.720
<v Speaker 0>secret.

00:52:57.440 --> 00:52:58.960
<v Speaker 0>I'm going to change

00:52:59.040 --> 00:53:00.800
<v Speaker 0>this to be string data.

00:53:03.665 --> 00:53:05.505
<v Speaker 0>I think that's enough.

00:53:06.625 --> 00:53:09.025
<v Speaker 0>We'll see. So let's reapply our conflict map

00:53:09.025 --> 00:53:10.785
<v Speaker 0>and we should expect to see a secret

00:53:10.785 --> 00:53:11.665
<v Speaker 0>created

00:53:11.745 --> 00:53:12.625
<v Speaker 0>like so.

00:53:14.145 --> 00:53:14.545
<v Speaker 0>So

00:53:15.390 --> 00:53:17.950
<v Speaker 0>why does my screen share keep tearing like

00:53:17.950 --> 00:53:18.590
<v Speaker 0>that?

00:53:19.869 --> 00:53:20.830
<v Speaker 0>There we go.

00:53:22.270 --> 00:53:25.069
<v Speaker 0>I am running Mac Big Sur. So, you

00:53:25.069 --> 00:53:28.510
<v Speaker 0>know You're inside your container there, so that's

00:53:28.510 --> 00:53:29.390
<v Speaker 1>probably not gonna work.

00:53:30.565 --> 00:53:33.445
<v Speaker 0>Good catch. Thank you. Alright. So

00:53:34.485 --> 00:53:36.645
<v Speaker 0>cool. So we reapplied that. Now you can

00:53:36.645 --> 00:53:38.725
<v Speaker 0>see our contact map is unchanged. We didn't

00:53:38.725 --> 00:53:41.285
<v Speaker 0>modify it. However, we did create a secret

00:53:41.285 --> 00:53:41.525
<v Speaker 0>there.

00:53:42.450 --> 00:53:43.250
<v Speaker 1>Yep.

00:53:43.650 --> 00:53:45.250
<v Speaker 0>We can run get secrets.

00:53:46.290 --> 00:53:48.290
<v Speaker 0>You can see our engine x one is

00:53:48.290 --> 00:53:48.850
<v Speaker 0>here.

00:53:49.410 --> 00:53:52.130
<v Speaker 0>I'm gonna pull out that one secret pass

00:53:52.130 --> 00:53:53.330
<v Speaker 0>and the negotiation.

00:53:53.330 --> 00:53:55.250
<v Speaker 0>So I'd say, hey, commit back in YAML.

00:53:57.395 --> 00:53:59.475
<v Speaker 0>And we have our secrets.

00:53:59.955 --> 00:54:02.995
<v Speaker 0>Uh-huh. Those do those strings look secret?

00:54:03.555 --> 00:54:04.835
<v Speaker 1>Not particularly.

00:54:05.635 --> 00:54:08.915
<v Speaker 0>No. This is our wonderful favorite encoding,

00:54:09.395 --> 00:54:10.435
<v Speaker 0>base 64.

00:54:16.650 --> 00:54:17.370
<v Speaker 0>So

00:54:18.570 --> 00:54:21.850
<v Speaker 0>secrets are not terribly secret. There are things

00:54:22.090 --> 00:54:23.210
<v Speaker 0>and stuff

00:54:23.450 --> 00:54:26.330
<v Speaker 0>one can do as a Kubernetes operator

00:54:25.745 --> 00:54:28.945
<v Speaker 0>to improve the situation. But by default, our

00:54:28.945 --> 00:54:31.345
<v Speaker 0>secrets are available to anyone with permission to

00:54:31.345 --> 00:54:32.225
<v Speaker 0>query them.

00:54:32.465 --> 00:54:34.385
<v Speaker 0>They're just sophisticated

00:54:34.385 --> 00:54:35.825
<v Speaker 0>through basics before.

00:54:37.025 --> 00:54:39.505
<v Speaker 0>And that is why we also specified string

00:54:39.505 --> 00:54:40.785
<v Speaker 0>data in this file.

00:54:41.799 --> 00:54:43.880
<v Speaker 1>It's better than Rawk 13, I guess. But

00:54:46.039 --> 00:54:47.799
<v Speaker 0>But whenever you see that equals sign, you

00:54:47.799 --> 00:54:49.400
<v Speaker 0>immediately know that I'm just gonna base decode

00:54:49.400 --> 00:54:51.480
<v Speaker 0>that and I've got access to whatever. But

00:54:51.640 --> 00:54:52.200
<v Speaker 0>yeah.

00:54:52.599 --> 00:54:54.359
<v Speaker 0>That's string data. If I had not changed

00:54:54.359 --> 00:54:55.799
<v Speaker 0>that to string data, if I had stuck

00:54:55.799 --> 00:54:57.715
<v Speaker 0>with data, this would have failed

00:54:57.875 --> 00:55:00.115
<v Speaker 0>because it's not base 64 encoded.

00:55:00.835 --> 00:55:02.915
<v Speaker 0>It would have said, hey, those values don't

00:55:02.915 --> 00:55:04.995
<v Speaker 0>look encoded to the way I want.

00:55:05.315 --> 00:55:06.755
<v Speaker 0>So we can pass them in a string

00:55:06.755 --> 00:55:09.155
<v Speaker 0>data. Of course, when it comes to secret

00:55:09.155 --> 00:55:09.555
<v Speaker 0>management,

00:55:09.990 --> 00:55:11.990
<v Speaker 0>there's a whole world of tooling and other

00:55:11.990 --> 00:55:13.270
<v Speaker 0>options for Kubernetes,

00:55:13.430 --> 00:55:14.950
<v Speaker 0>but this is what is baked down and

00:55:14.950 --> 00:55:17.110
<v Speaker 0>built in for free. The good news is

00:55:17.110 --> 00:55:19.990
<v Speaker 0>like you still do you still need authentication

00:55:19.990 --> 00:55:22.150
<v Speaker 0>to the Kubernetes API. You still need a

00:55:22.150 --> 00:55:23.990
<v Speaker 0>cube config that lets you do the query.

00:55:25.205 --> 00:55:27.845
<v Speaker 0>Things are encrypted on the the node machines

00:55:27.845 --> 00:55:28.965
<v Speaker 0>at rest,

00:55:28.965 --> 00:55:30.645
<v Speaker 0>so and in transit.

00:55:30.805 --> 00:55:32.565
<v Speaker 0>So there there's that plus.

00:55:32.805 --> 00:55:34.325
<v Speaker 0>But have you ever get access to the

00:55:34.325 --> 00:55:36.405
<v Speaker 0>cluster with this fashion, then your secrets are

00:55:36.405 --> 00:55:39.910
<v Speaker 0>compromised immediately. So Well, you know, physical access

00:55:39.910 --> 00:55:42.470
<v Speaker 1>is is game over for most things, so

00:55:42.630 --> 00:55:44.390
<v Speaker 1>in security land. So

00:55:45.670 --> 00:55:46.710
<v Speaker 0>That is true.

00:55:48.710 --> 00:55:49.510
<v Speaker 0>Alright. So

00:55:51.135 --> 00:55:53.535
<v Speaker 0>any questions before we start tackling a few

00:55:53.535 --> 00:55:55.855
<v Speaker 0>other bits and pieces? No. This is great.

00:55:55.855 --> 00:55:58.815
<v Speaker 1>I'm actually I'm I'm actually learning stuff and

00:55:58.815 --> 00:56:00.975
<v Speaker 1>and this is making sense. So

00:56:02.015 --> 00:56:02.415
<v Speaker 0>Alright.

00:56:03.840 --> 00:56:06.400
<v Speaker 0>When we spoke about the service DNS lookup

00:56:06.400 --> 00:56:08.800
<v Speaker 0>earlier, we mentioned something called a namespace.

00:56:09.280 --> 00:56:11.600
<v Speaker 0>So we'll just really really quickly cover what

00:56:11.600 --> 00:56:13.840
<v Speaker 0>that is. I don't wanna spend too much

00:56:13.840 --> 00:56:15.520
<v Speaker 0>more time on it. So

00:56:17.205 --> 00:56:18.965
<v Speaker 0>I don't wanna spend any time on namespaces

00:56:18.965 --> 00:56:20.565
<v Speaker 0>because they're super uninteresting.

00:56:20.565 --> 00:56:23.205
<v Speaker 0>But Okay. They're important to know. So

00:56:24.085 --> 00:56:25.445
<v Speaker 0>namespace YAML.

00:56:25.685 --> 00:56:26.565
<v Speaker 0>We have a yeah.

00:56:30.190 --> 00:56:31.470
<v Speaker 0>We have kind.

00:56:31.870 --> 00:56:33.150
<v Speaker 0>And this is the only one I can

00:56:33.150 --> 00:56:35.710
<v Speaker 0>ever remember how to type. So yeah.

00:56:39.630 --> 00:56:40.430
<v Speaker 0>Tada.

00:56:41.710 --> 00:56:45.310
<v Speaker 0>I bet you that doesn't apply now but

00:56:50.325 --> 00:56:50.885
<v Speaker 0>Oh,

00:56:51.204 --> 00:56:52.244
<v Speaker 0>metadata,

00:56:52.244 --> 00:56:53.285
<v Speaker 0>silly me.

00:56:54.244 --> 00:56:56.244
<v Speaker 0>I was right, didn't apply. So

00:56:57.150 --> 00:56:59.710
<v Speaker 0>namespaces are in the core v one group,

00:56:59.710 --> 00:57:01.069
<v Speaker 0>which is why it's just v one, the

00:57:01.069 --> 00:57:03.950
<v Speaker 0>kindness namespace, the namespace is called my namespace.

00:57:03.950 --> 00:57:06.109
<v Speaker 0>Much like every other object, I can tell

00:57:06.109 --> 00:57:07.550
<v Speaker 0>get namespaces

00:57:08.270 --> 00:57:10.910
<v Speaker 0>and we have our new namespace. Now Yep.

00:57:11.645 --> 00:57:14.365
<v Speaker 0>Everything that we have created thus far has

00:57:14.365 --> 00:57:16.925
<v Speaker 0>been created in the default namespace.

00:57:18.285 --> 00:57:20.285
<v Speaker 0>I can run get pods when I see

00:57:20.285 --> 00:57:21.325
<v Speaker 0>stuff and things.

00:57:22.445 --> 00:57:24.685
<v Speaker 0>Yep. And if I do get pods dash

00:57:24.685 --> 00:57:25.405
<v Speaker 0>in

00:57:25.565 --> 00:57:27.250
<v Speaker 0>my namespace,

00:57:27.890 --> 00:57:29.089
<v Speaker 0>no stuff in things.

00:57:29.809 --> 00:57:32.529
<v Speaker 0>Oh. But namespaces are a way to logically

00:57:32.529 --> 00:57:35.329
<v Speaker 0>group things depending on your own workloads

00:57:35.329 --> 00:57:37.089
<v Speaker 0>and configuration setup,

00:57:37.089 --> 00:57:39.569
<v Speaker 0>team dynamics, Conway's law, whatever you wish to

00:57:39.569 --> 00:57:42.125
<v Speaker 0>apply to that logical grouping is entirely up

00:57:42.125 --> 00:57:44.045
<v Speaker 0>to you. But namespace is a way to

00:57:44.045 --> 00:57:46.365
<v Speaker 0>encapsulate encapsulate that altogether.

00:57:50.605 --> 00:57:53.965
<v Speaker 0>What is funny though is you can

00:57:55.150 --> 00:57:57.790
<v Speaker 0>I can't delete the name? Yeah. You can

00:57:57.790 --> 00:58:00.110
<v Speaker 0>delete the namespace and it will blow away

00:58:00.110 --> 00:58:01.870
<v Speaker 0>all of the resources. There's nothing in my

00:58:01.870 --> 00:58:04.270
<v Speaker 0>namespace but it would have destroyed everything.

00:58:04.670 --> 00:58:06.590
<v Speaker 0>I didn't realize default was

00:58:06.605 --> 00:58:08.765
<v Speaker 1>Does it so what when you say it

00:58:08.765 --> 00:58:11.325
<v Speaker 1>destroys everything, that destroys the pods and everything

00:58:11.325 --> 00:58:14.365
<v Speaker 1>in it or just the namespace around it?

00:58:16.045 --> 00:58:18.204
<v Speaker 0>No. It should destroy all of the pods.

00:58:18.204 --> 00:58:19.805
<v Speaker 0>So if we do

00:58:21.710 --> 00:58:23.950
<v Speaker 0>let's just reapply this then. So let's copy

00:58:23.950 --> 00:58:24.910
<v Speaker 0>this deployment.

00:58:27.470 --> 00:58:29.550
<v Speaker 0>I mean, if I remember correctly, it just

00:58:29.710 --> 00:58:31.470
<v Speaker 0>it doesn't really care. So

00:58:31.869 --> 00:58:34.270
<v Speaker 0>we can specify the namespace and our metadata

00:58:34.425 --> 00:58:36.825
<v Speaker 0>and I can say deploy to my namespace

00:58:38.585 --> 00:58:39.465
<v Speaker 0>like so.

00:58:41.385 --> 00:58:43.065
<v Speaker 0>We'll reapply our

00:58:44.105 --> 00:58:46.585
<v Speaker 0>my namespace namespace with the deployment. We run

00:58:46.585 --> 00:58:47.785
<v Speaker 0>get pods by namespace.

00:58:48.900 --> 00:58:50.579
<v Speaker 0>I'll at least let them be healthy before

00:58:50.579 --> 00:58:52.020
<v Speaker 0>I try and kill them. So

00:58:56.260 --> 00:58:57.860
<v Speaker 0>I actually think I've

00:58:58.500 --> 00:58:59.940
<v Speaker 0>run out of resources.

00:59:01.060 --> 00:59:02.180
<v Speaker 0>So let's debug that.

00:59:02.885 --> 00:59:04.645
<v Speaker 0>The reason these I think these are stuck

00:59:04.645 --> 00:59:06.005
<v Speaker 0>in container creating

00:59:06.005 --> 00:59:08.005
<v Speaker 0>is if I describe the pod,

00:59:08.405 --> 00:59:09.765
<v Speaker 0>I think it's gonna tell me that it

00:59:09.765 --> 00:59:11.445
<v Speaker 0>can't allocate resources.

00:59:14.165 --> 00:59:14.964
<v Speaker 0>Namespace.

00:59:18.120 --> 00:59:20.280
<v Speaker 0>Oh, no. It's the contact map. Okay.

00:59:21.160 --> 00:59:23.960
<v Speaker 1>Oh, you're trying to mount the the the

00:59:24.120 --> 00:59:26.520
<v Speaker 1>config map from two different places?

00:59:27.320 --> 00:59:28.920
<v Speaker 0>That is correct.

00:59:29.160 --> 00:59:33.320
<v Speaker 0>So I'm just gonna copy in everything

00:59:33.255 --> 00:59:35.175
<v Speaker 0>just so that this applies.

00:59:37.575 --> 00:59:39.015
<v Speaker 0>Update the metadata.

00:59:40.775 --> 00:59:42.454
<v Speaker 0>I don't even think we did anything with

00:59:42.454 --> 00:59:44.295
<v Speaker 0>the secret, but I'll create it anyway.

00:59:49.090 --> 00:59:51.650
<v Speaker 0>We'll apply that once more. We'll run get

00:59:51.650 --> 00:59:52.370
<v Speaker 0>pods

00:59:52.850 --> 00:59:53.650
<v Speaker 0>and

00:59:53.730 --> 00:59:55.890
<v Speaker 0>yeah. So there's this also weird thing

00:59:57.330 --> 00:59:59.730
<v Speaker 0>where that pod is now stuck waiting for

00:59:59.730 --> 01:00:00.850
<v Speaker 0>something that didn't exist.

01:00:01.425 --> 01:00:02.865
<v Speaker 0>So you you kinda have to give it

01:00:02.865 --> 01:00:03.905
<v Speaker 0>a wee shiggle.

01:00:04.865 --> 01:00:06.225
<v Speaker 1>Give it a what? I need to hear

01:00:06.225 --> 01:00:07.025
<v Speaker 1>that again.

01:00:07.185 --> 01:00:08.305
<v Speaker 0>A wee shiggle.

01:00:08.385 --> 01:00:09.345
<v Speaker 1>Oh, okay.

01:00:09.665 --> 01:00:10.625
<v Speaker 1>That's dandy.

01:00:12.065 --> 01:00:14.065
<v Speaker 0>Just give it a wee a wee shiggle

01:00:14.065 --> 01:00:15.825
<v Speaker 0>and then it'll restart or so. You just

01:00:15.825 --> 01:00:18.039
<v Speaker 0>delete it, it comes back. Is this still

01:00:18.039 --> 01:00:18.920
<v Speaker 0>gonna fail?

01:00:19.319 --> 01:00:21.080
<v Speaker 0>Did I update all the right stuff?

01:00:23.880 --> 01:00:25.799
<v Speaker 0>I think it did. Oh, there we go.

01:00:25.799 --> 01:00:27.720
<v Speaker 0>Just me being impatient again.

01:00:28.680 --> 01:00:30.200
<v Speaker 0>So that that's now running.

01:00:31.155 --> 01:00:33.315
<v Speaker 0>And we look inside our my namespace again

01:00:33.315 --> 01:00:35.155
<v Speaker 0>and we call get secrets, we'll see our

01:00:35.155 --> 01:00:37.315
<v Speaker 0>secrets, we'll see our config map.

01:00:37.555 --> 01:00:40.515
<v Speaker 0>Like that's all what we expect and we'll

01:00:40.515 --> 01:00:42.355
<v Speaker 0>just delete my namespace

01:00:43.809 --> 01:00:46.530
<v Speaker 0>and it's away. It's now currently deleting that

01:00:46.530 --> 01:00:48.930
<v Speaker 0>secret, that config map, that deployment, that replicas

01:00:48.930 --> 01:00:50.370
<v Speaker 0>there and those two pods.

01:00:51.890 --> 01:00:55.010
<v Speaker 0>So, you know, careful with deleting namespaces. I

01:00:55.010 --> 01:00:57.890
<v Speaker 1>was gonna say, so deleting namespaces can be

01:00:57.890 --> 01:00:58.450
<v Speaker 1>extremely

01:00:58.905 --> 01:00:59.785
<v Speaker 1>destructive.

01:01:01.065 --> 01:01:03.385
<v Speaker 0>It can be. There's a concept in Kubernetes

01:01:03.385 --> 01:01:05.785
<v Speaker 0>called a a validating webhook.

01:01:06.585 --> 01:01:09.385
<v Speaker 0>What you'll find is most production clusters won't

01:01:09.385 --> 01:01:11.625
<v Speaker 0>allow you to issue a delete against the

01:01:11.625 --> 01:01:12.825
<v Speaker 0>namespace anyway

01:01:13.170 --> 01:01:15.490
<v Speaker 0>because of the validating webhook. They'll be like,

01:01:15.490 --> 01:01:17.569
<v Speaker 0>hey, are you really sure you wanna be

01:01:17.569 --> 01:01:18.290
<v Speaker 0>doing this?

01:01:18.930 --> 01:01:19.650
<v Speaker 0>So

01:01:20.770 --> 01:01:21.730
<v Speaker 0>alright.

01:01:22.849 --> 01:01:26.770
<v Speaker 0>So we've covered pods, deployments, contact maps, services,

01:01:26.770 --> 01:01:28.130
<v Speaker 0>and namespaces.

01:01:31.385 --> 01:01:32.985
<v Speaker 0>What else is fun?

01:01:33.625 --> 01:01:35.305
<v Speaker 1>Who was it the other day that posted

01:01:35.305 --> 01:01:37.785
<v Speaker 1>that they took out the entire web service

01:01:37.785 --> 01:01:38.905
<v Speaker 1>for some

01:01:38.985 --> 01:01:41.625
<v Speaker 1>application for the entire country of Norway because

01:01:41.625 --> 01:01:42.265
<v Speaker 1>YAML

01:01:43.420 --> 01:01:44.220
<v Speaker 1>misinterpreted

01:01:44.220 --> 01:01:46.700
<v Speaker 1>the word no in their YAML file.

01:01:49.580 --> 01:01:52.060
<v Speaker 0>Hi. That's one of my biggest gripes with

01:01:52.060 --> 01:01:55.020
<v Speaker 0>YAML is its ability to take billion logic

01:01:55.020 --> 01:01:57.475
<v Speaker 0>from anywhere it wants. No. It's just true.

01:01:57.475 --> 01:02:00.195
<v Speaker 0>False zero one is infuriating.

01:02:00.275 --> 01:02:01.875
<v Speaker 0>Yeah. But I hadn't read that story. You'll

01:02:01.875 --> 01:02:03.155
<v Speaker 0>need to share that with me.

01:02:03.875 --> 01:02:05.875
<v Speaker 0>Now I'm sure I'm forgetting stuff. We'll call

01:02:05.875 --> 01:02:06.435
<v Speaker 0>it

01:02:07.235 --> 01:02:07.955
<v Speaker 0>pressure.

01:02:08.115 --> 01:02:09.875
<v Speaker 0>However, I do have a workshop that I've

01:02:09.875 --> 01:02:11.155
<v Speaker 0>given before and I'm gonna see

01:02:12.270 --> 01:02:13.950
<v Speaker 0>what I would cover in that. So we

01:02:13.950 --> 01:02:14.910
<v Speaker 0>did pods.

01:02:16.190 --> 01:02:18.110
<v Speaker 0>We didn't do port forwarding, so we can

01:02:18.110 --> 01:02:19.390
<v Speaker 0>take a look at that.

01:02:21.550 --> 01:02:23.390
<v Speaker 0>We did deployments.

01:02:23.790 --> 01:02:25.230
<v Speaker 1>We did a little bit of port forwarding

01:02:25.230 --> 01:02:27.310
<v Speaker 1>when you when you pushed

01:02:27.545 --> 01:02:30.185
<v Speaker 1>one port to you exposed one port as

01:02:30.185 --> 01:02:30.745
<v Speaker 1>a

01:02:33.305 --> 01:02:35.305
<v Speaker 1>80 max to eighty eighty.

01:02:37.545 --> 01:02:40.265
<v Speaker 0>Yeah. That that is true. You're right. So

01:02:43.450 --> 01:02:46.330
<v Speaker 0>oh, the big nasty world of R back.

01:02:46.730 --> 01:02:48.250
<v Speaker 0>Don't know if I wanna touch that on

01:02:48.250 --> 01:02:48.970
<v Speaker 0>the stream.

01:02:50.250 --> 01:02:52.490
<v Speaker 0>Alright. So let's see. Let's come back to

01:02:52.490 --> 01:02:53.610
<v Speaker 0>our configuration

01:02:53.610 --> 01:02:56.250
<v Speaker 0>here. So we have this deployment dot YAML.

01:02:58.955 --> 01:03:00.875
<v Speaker 0>Let's spin this back up again.

01:03:03.435 --> 01:03:04.955
<v Speaker 0>Yeah. Let's do that and then we'll do

01:03:04.955 --> 01:03:07.195
<v Speaker 0>something with that telegraph container, so we can

01:03:07.195 --> 01:03:08.395
<v Speaker 0>see the

01:03:08.395 --> 01:03:10.955
<v Speaker 0>the cool perks from having multiple container pods

01:03:10.955 --> 01:03:12.315
<v Speaker 0>and why they're useful. So

01:03:13.510 --> 01:03:15.830
<v Speaker 0>but we still have that running, don't we?

01:03:16.230 --> 01:03:16.870
<v Speaker 0>Cool.

01:03:17.350 --> 01:03:20.310
<v Speaker 1>Yes. That's still running. So there's a command

01:03:20.310 --> 01:03:22.390
<v Speaker 0>we can use on the on the command

01:03:22.390 --> 01:03:23.590
<v Speaker 0>line configuring,

01:03:23.830 --> 01:03:25.030
<v Speaker 0>called port forward,

01:03:25.350 --> 01:03:27.270
<v Speaker 0>where we can specify the name of a

01:03:27.270 --> 01:03:28.230
<v Speaker 0>pod

01:03:30.205 --> 01:03:33.965
<v Speaker 0>followed by a host container port triples.

01:03:34.605 --> 01:03:36.045
<v Speaker 0>So on the left hand side of this

01:03:36.045 --> 01:03:37.965
<v Speaker 0>colon, we say this is the host port

01:03:37.965 --> 01:03:40.045
<v Speaker 0>we want to expose this pod on and

01:03:40.045 --> 01:03:42.605
<v Speaker 0>we want to forward traffic to the Container

01:03:42.605 --> 01:03:43.565
<v Speaker 0>Port 80.

01:03:43.645 --> 01:03:44.045
<v Speaker 0>Okay.

01:03:45.220 --> 01:03:46.980
<v Speaker 0>And that's really good for

01:03:47.220 --> 01:03:49.940
<v Speaker 0>one to actually hack your application from your

01:03:49.940 --> 01:03:50.820
<v Speaker 0>own machine.

01:03:53.300 --> 01:03:54.900
<v Speaker 0>So I can just fire open a browser

01:03:54.900 --> 01:03:57.460
<v Speaker 0>now. Yep. Go to local host on Port

01:03:57.460 --> 01:04:00.085
<v Speaker 0>8080, and it pushes me through to the

01:04:00.085 --> 01:04:02.885
<v Speaker 0>container Port 80 where NGINX is greeting me

01:04:02.885 --> 01:04:05.845
<v Speaker 0>with his welcome hello world estail page. Yep.

01:04:08.645 --> 01:04:09.525
<v Speaker 0>Alright.

01:04:09.685 --> 01:04:12.885
<v Speaker 0>So let's try and do something with this

01:04:12.885 --> 01:04:13.925
<v Speaker 0>telegraph now.

01:04:14.799 --> 01:04:17.440
<v Speaker 0>Now the one of the coolest things about

01:04:17.440 --> 01:04:19.920
<v Speaker 0>containers within a pod is that they share

01:04:19.920 --> 01:04:21.040
<v Speaker 0>the same

01:04:21.520 --> 01:04:22.960
<v Speaker 0>TCP stack.

01:04:24.559 --> 01:04:27.440
<v Speaker 0>What does that mean? Right. Let's

01:04:27.845 --> 01:04:29.045
<v Speaker 0>go inside

01:04:31.925 --> 01:04:32.805
<v Speaker 0>NGINX.

01:04:32.805 --> 01:04:34.645
<v Speaker 0>Only I'm not gonna end NGINX. I'm gonna

01:04:34.645 --> 01:04:35.925
<v Speaker 0>go into telegraph

01:04:35.925 --> 01:04:36.965
<v Speaker 0>container

01:04:38.085 --> 01:04:39.444
<v Speaker 0>and I'm gonna run bash.

01:04:40.640 --> 01:04:42.400
<v Speaker 0>I don't think I'll have p s. Oh,

01:04:42.400 --> 01:04:44.240
<v Speaker 0>I do. Okay. So we can see here

01:04:44.240 --> 01:04:46.480
<v Speaker 0>we have pad one which is telegraph,

01:04:46.480 --> 01:04:49.040
<v Speaker 0>doing this telegraphy thing. And then

01:04:49.280 --> 01:04:52.880
<v Speaker 0>my two processes here. Yep. There is no

01:04:53.040 --> 01:04:54.800
<v Speaker 0>engine x running in this container.

01:04:57.115 --> 01:04:57.915
<v Speaker 0>However,

01:04:59.434 --> 01:05:01.194
<v Speaker 0>if I do a curl on local host,

01:05:01.194 --> 01:05:03.675
<v Speaker 0>we do get NGINX back.

01:05:04.635 --> 01:05:06.795
<v Speaker 0>So this is to do with the containers

01:05:06.795 --> 01:05:08.795
<v Speaker 0>within the pods sharing

01:05:09.355 --> 01:05:10.875
<v Speaker 0>the same TCP stack.

01:05:11.589 --> 01:05:13.750
<v Speaker 0>Meaning that they both respond on local host

01:05:13.750 --> 01:05:14.870
<v Speaker 0>provided that

01:05:14.950 --> 01:05:16.869
<v Speaker 0>don't try to open the same port, otherwise

01:05:16.869 --> 01:05:18.230
<v Speaker 0>things will start to break.

01:05:19.589 --> 01:05:20.710
<v Speaker 0>So the reason

01:05:20.869 --> 01:05:23.750
<v Speaker 0>I like this sidecar pattern

01:05:23.845 --> 01:05:26.805
<v Speaker 0>is the telegraph in theory could be configured

01:05:26.805 --> 01:05:29.285
<v Speaker 0>to fetch metrics from NGINX on local host

01:05:29.285 --> 01:05:29.765
<v Speaker 0>without

01:05:30.245 --> 01:05:32.805
<v Speaker 0>because this doesn't actually go over a TCP

01:05:32.805 --> 01:05:35.685
<v Speaker 0>stack. It's using the networking within the container,

01:05:35.685 --> 01:05:37.925
<v Speaker 0>so there's no overhead of opening a TCP

01:05:37.925 --> 01:05:39.765
<v Speaker 0>socket and blah blah blah. You know, it's

01:05:40.000 --> 01:05:41.760
<v Speaker 0>it's a lot simpler than that.

01:05:43.840 --> 01:05:46.000
<v Speaker 0>So in theory, we could create a config

01:05:46.000 --> 01:05:46.640
<v Speaker 0>map

01:05:46.880 --> 01:05:49.200
<v Speaker 0>which tells Telegraph to use the NGINX plugin

01:05:49.200 --> 01:05:51.040
<v Speaker 0>on local host and go and fetch the

01:05:51.040 --> 01:05:53.280
<v Speaker 0>status page from NGINX and then spit out

01:05:53.280 --> 01:05:54.320
<v Speaker 0>metrics to

01:05:54.645 --> 01:05:55.685
<v Speaker 0>to somewhere.

01:05:55.845 --> 01:05:58.085
<v Speaker 0>There's quite a lot of of benefit there.

01:05:58.485 --> 01:05:58.965
<v Speaker 0>Okay.

01:06:02.085 --> 01:06:02.965
<v Speaker 0>Let's

01:06:02.965 --> 01:06:03.685
<v Speaker 0>cover

01:06:04.325 --> 01:06:05.445
<v Speaker 0>one more

01:06:06.485 --> 01:06:08.245
<v Speaker 0>primitive of Kubernetes

01:06:08.870 --> 01:06:10.470
<v Speaker 0>and we'll

01:06:10.550 --> 01:06:12.470
<v Speaker 0>see if there are any questions and then

01:06:12.470 --> 01:06:14.070
<v Speaker 0>I think we will be

01:06:14.630 --> 01:06:15.350
<v Speaker 0>done.

01:06:16.390 --> 01:06:17.030
<v Speaker 0>Maybe.

01:06:18.150 --> 01:06:20.630
<v Speaker 0>We do have a comment from Rick Brown,

01:06:20.630 --> 01:06:22.390
<v Speaker 0>a former colleague of David and I's.

01:06:22.955 --> 01:06:25.195
<v Speaker 0>He has sworn at Yamal for years. It

01:06:25.195 --> 01:06:26.635
<v Speaker 0>still doesn't make sense.

01:06:27.115 --> 01:06:29.355
<v Speaker 0>Yamal is the devil we're stuck with, not

01:06:29.355 --> 01:06:31.515
<v Speaker 0>the one we have to enjoy, unfortunately.

01:06:33.915 --> 01:06:35.980
<v Speaker 0>I don't think I've ever spoken to anyone

01:06:35.980 --> 01:06:38.140
<v Speaker 0>who's been like, yay, Kubernetes. I get to

01:06:38.140 --> 01:06:39.420
<v Speaker 0>write more YAML. I just

01:06:40.380 --> 01:06:42.060
<v Speaker 0>YAML fatigue is real.

01:06:42.780 --> 01:06:43.900
<v Speaker 1>Yes. It is.

01:06:44.460 --> 01:06:46.860
<v Speaker 1>And pretty much everything these days is is

01:06:46.860 --> 01:06:48.220
<v Speaker 1>now turning to YAML.

01:06:51.525 --> 01:06:52.165
<v Speaker 0>Yeah.

01:06:52.325 --> 01:06:54.885
<v Speaker 0>That's what I'm saying. YAML. YAML. YAML.

01:06:55.685 --> 01:06:57.205
<v Speaker 0>Okay. So the the

01:06:57.685 --> 01:06:59.285
<v Speaker 0>the last primitive, I think, is important for

01:06:59.285 --> 01:07:00.565
<v Speaker 0>today. I mean, we have covered a large

01:07:00.565 --> 01:07:02.484
<v Speaker 0>chunk. Like, see, if I were to say

01:07:03.250 --> 01:07:05.730
<v Speaker 0>your average Kubernetes consumer

01:07:05.730 --> 01:07:06.850
<v Speaker 0>or developer,

01:07:07.330 --> 01:07:09.250
<v Speaker 0>the API touch points that they're gonna use

01:07:09.250 --> 01:07:12.130
<v Speaker 0>within the cluster is 95%

01:07:12.130 --> 01:07:13.170
<v Speaker 0>deployments

01:07:13.490 --> 01:07:16.450
<v Speaker 0>with a sprinkling or dash of conflict maps

01:07:16.450 --> 01:07:17.330
<v Speaker 0>and secrets.

01:07:17.410 --> 01:07:19.645
<v Speaker 0>And There's not really much more to go

01:07:19.645 --> 01:07:21.484
<v Speaker 0>into there. Now there are few things on

01:07:21.484 --> 01:07:23.165
<v Speaker 0>the deployment we can dig into with regards

01:07:23.165 --> 01:07:24.445
<v Speaker 0>to liveness probes.

01:07:25.325 --> 01:07:27.325
<v Speaker 0>We can maybe cover that. But there is

01:07:27.325 --> 01:07:28.045
<v Speaker 0>one more

01:07:28.444 --> 01:07:29.725
<v Speaker 0>primitive here

01:07:30.204 --> 01:07:31.244
<v Speaker 0>that is useful,

01:07:32.390 --> 01:07:34.470
<v Speaker 0>And that is a daemon set.

01:07:37.430 --> 01:07:39.750
<v Speaker 0>So I'm gonna deploy

01:07:39.910 --> 01:07:40.710
<v Speaker 0>telegraph.

01:07:40.710 --> 01:07:42.390
<v Speaker 0>Now we don't need

01:07:42.950 --> 01:07:45.190
<v Speaker 0>replicas and there's a reason for that.

01:07:47.905 --> 01:07:50.865
<v Speaker 0>We do still need our selectors.

01:07:55.265 --> 01:07:56.704
<v Speaker 0>Let's

01:07:56.704 --> 01:07:57.505
<v Speaker 0>remove that.

01:07:59.150 --> 01:08:00.590
<v Speaker 0>I'll get this to a stage where I

01:08:00.590 --> 01:08:02.830
<v Speaker 0>think there's a a slim hope that it'll

01:08:02.830 --> 01:08:04.670
<v Speaker 0>work and then we can go through it.

01:08:06.110 --> 01:08:08.110
<v Speaker 0>I'm not confident of course.

01:08:08.670 --> 01:08:09.870
<v Speaker 0>So alright.

01:08:10.270 --> 01:08:12.615
<v Speaker 0>I don't think, can't remember the API version

01:08:12.615 --> 01:08:13.895
<v Speaker 0>and maybe apps v one or it may

01:08:13.895 --> 01:08:15.495
<v Speaker 0>just be v one. We'll find out for

01:08:15.495 --> 01:08:17.655
<v Speaker 0>trial and error and fire. We do not

01:08:17.655 --> 01:08:20.054
<v Speaker 0>need a replica because a daemon set

01:08:20.135 --> 01:08:21.255
<v Speaker 0>deploys

01:08:21.734 --> 01:08:25.095
<v Speaker 0>one instance of the spec on every node

01:08:25.095 --> 01:08:25.975
<v Speaker 0>within a cluster.

01:08:26.580 --> 01:08:27.380
<v Speaker 1>Okay.

01:08:28.099 --> 01:08:29.619
<v Speaker 1>That makes sense. Replicas

01:08:29.779 --> 01:08:31.300
<v Speaker 0>is a few tail.

01:08:32.179 --> 01:08:33.939
<v Speaker 0>When I say nodes in the clusters, we

01:08:33.939 --> 01:08:36.020
<v Speaker 0>can run get nodes. That's just docker for

01:08:36.020 --> 01:08:37.779
<v Speaker 0>desktop, so I only have one node.

01:08:38.995 --> 01:08:41.555
<v Speaker 0>So this should run one telegraph d s,

01:08:41.555 --> 01:08:44.114
<v Speaker 0>which is a telegraph image with no configuration.

01:08:45.955 --> 01:08:46.675
<v Speaker 0>Assuming

01:08:49.635 --> 01:08:51.795
<v Speaker 0>the API version is right, which it is.

01:08:51.795 --> 01:08:52.114
<v Speaker 0>Perfect.

01:08:53.229 --> 01:08:54.749
<v Speaker 1>Well done. So now

01:08:55.149 --> 01:08:56.989
<v Speaker 0>I can run and get pods

01:08:57.069 --> 01:08:58.109
<v Speaker 0>and you see

01:08:58.429 --> 01:08:59.550
<v Speaker 0>we have this.

01:09:00.109 --> 01:09:00.749
<v Speaker 0>So

01:09:01.869 --> 01:09:04.349
<v Speaker 0>the parent object is different. It's no longer

01:09:04.349 --> 01:09:06.989
<v Speaker 0>a deployment, but it still has a similar

01:09:06.989 --> 01:09:07.949
<v Speaker 0>level of

01:09:10.565 --> 01:09:13.205
<v Speaker 0>abstraction to the point where eventually a pod

01:09:13.205 --> 01:09:14.005
<v Speaker 0>is created.

01:09:14.485 --> 01:09:16.805
<v Speaker 0>However, we can run get daemon sets and

01:09:16.805 --> 01:09:18.245
<v Speaker 0>we can see here that we have one

01:09:18.245 --> 01:09:20.245
<v Speaker 0>desired because we have one node and we

01:09:20.245 --> 01:09:21.125
<v Speaker 0>have one available.

01:09:21.880 --> 01:09:24.120
<v Speaker 0>So a daemon set is the kind of

01:09:24.120 --> 01:09:25.479
<v Speaker 0>process you would run,

01:09:25.960 --> 01:09:27.960
<v Speaker 0>know, telegraph as a really good example because

01:09:27.960 --> 01:09:29.880
<v Speaker 0>you probably wanna get hardware

01:09:30.279 --> 01:09:32.520
<v Speaker 0>metrics or bare metal metrics, node based metrics

01:09:32.520 --> 01:09:35.239
<v Speaker 0>from every machine in the cluster, CPU, memory,

01:09:35.535 --> 01:09:37.935
<v Speaker 0>failed size, all that kind of stuff.

01:09:38.735 --> 01:09:40.895
<v Speaker 0>And a daemon set would be the definitive

01:09:40.895 --> 01:09:43.535
<v Speaker 0>way to do that in the Kubernetes world.

01:09:43.535 --> 01:09:45.535
<v Speaker 1>So maybe

01:09:45.535 --> 01:09:47.295
<v Speaker 1>I'm getting this wrong, but it seems that

01:09:47.295 --> 01:09:49.055
<v Speaker 1>a daemon set is basically,

01:09:49.135 --> 01:09:52.569
<v Speaker 1>like, run this run this daemon on each

01:09:56.010 --> 01:09:57.929
<v Speaker 1>container in the cluster. Right?

01:09:58.409 --> 01:10:01.289
<v Speaker 0>Exactly. I run this container in every node

01:10:01.289 --> 01:10:03.770
<v Speaker 0>in the cluster. Right. Okay. Yeah. Yes.

01:10:06.085 --> 01:10:08.245
<v Speaker 0>Okay. Cool. So

01:10:09.925 --> 01:10:11.525
<v Speaker 0>I don't think there's much more to cover

01:10:11.525 --> 01:10:12.885
<v Speaker 0>in today's session.

01:10:14.005 --> 01:10:16.485
<v Speaker 0>I think I'm happy with that. I am.

01:10:16.485 --> 01:10:18.565
<v Speaker 1>Actually, this I learned a this has been

01:10:18.565 --> 01:10:18.805
<v Speaker 1>great.

01:10:19.610 --> 01:10:21.690
<v Speaker 1>I'm hoping it was useful for somebody that

01:10:21.690 --> 01:10:23.929
<v Speaker 1>was watching as well than, you know, watching

01:10:23.929 --> 01:10:24.969
<v Speaker 1>me be dumb,

01:10:25.929 --> 01:10:28.250
<v Speaker 1>which is entertaining in and of itself, I'm

01:10:28.250 --> 01:10:28.889
<v Speaker 1>sure. But

01:10:30.010 --> 01:10:32.585
<v Speaker 0>Yeah. I mean, I I think what I'll

01:10:32.585 --> 01:10:34.824
<v Speaker 0>kinda caveat this session with and that, you

01:10:34.824 --> 01:10:35.625
<v Speaker 0>know, this is not

01:10:36.265 --> 01:10:37.304
<v Speaker 0>you've learned

01:10:37.945 --> 01:10:40.025
<v Speaker 0>everything there is to know about Kubernetes because

01:10:40.025 --> 01:10:42.505
<v Speaker 0>obviously the the details and the intricate nature

01:10:42.505 --> 01:10:44.344
<v Speaker 0>of some of the components goes much deeper

01:10:44.344 --> 01:10:44.745
<v Speaker 0>than this.

01:10:46.000 --> 01:10:48.239
<v Speaker 0>But this is, know, if you were to

01:10:48.239 --> 01:10:50.719
<v Speaker 0>start developing against Kubernetes tomorrow, this would be

01:10:50.719 --> 01:10:52.880
<v Speaker 0>enough to get you working and not banging

01:10:52.880 --> 01:10:54.479
<v Speaker 0>your head off of too many walls.

01:10:54.800 --> 01:10:57.360
<v Speaker 0>Right. Just working with deployments, contact maps. I

01:10:57.360 --> 01:10:57.520
<v Speaker 0>mean,

01:10:58.285 --> 01:11:00.125
<v Speaker 0>that is most of the the thing you're

01:11:00.125 --> 01:11:01.325
<v Speaker 0>doing. Now there are things we could get

01:11:01.325 --> 01:11:03.405
<v Speaker 0>into. We could talk about helm package manager

01:11:03.405 --> 01:11:04.364
<v Speaker 0>in Kubernetes

01:11:04.445 --> 01:11:07.085
<v Speaker 0>for deploying third party applications, you know, not

01:11:07.085 --> 01:11:08.925
<v Speaker 0>your own code to Kubernetes.

01:11:09.245 --> 01:11:11.005
<v Speaker 0>Then there's a whole other world of stuff

01:11:11.005 --> 01:11:12.960
<v Speaker 0>we could cover there. There's then the day

01:11:12.960 --> 01:11:16.079
<v Speaker 0>one and day two stuff. There's security, performance,

01:11:16.559 --> 01:11:17.519
<v Speaker 0>management,

01:11:17.519 --> 01:11:20.400
<v Speaker 0>RBAC. Like, there's so much stuff. But because

01:11:20.400 --> 01:11:21.919
<v Speaker 0>I didn't notice overwhelm.

01:11:22.079 --> 01:11:23.519
<v Speaker 1>I did notice that all that stuff was

01:11:23.519 --> 01:11:25.840
<v Speaker 1>running as root, which is probably not such

01:11:25.840 --> 01:11:26.480
<v Speaker 1>a great idea

01:11:27.325 --> 01:11:28.845
<v Speaker 1>if you don't have to run it as

01:11:28.845 --> 01:11:29.405
<v Speaker 1>root.

01:11:30.285 --> 01:11:32.285
<v Speaker 0>Yeah. So all of the containers are running

01:11:32.285 --> 01:11:34.685
<v Speaker 0>by root, is an ideal. There's things like

01:11:34.685 --> 01:11:36.605
<v Speaker 0>security to context and the seccomp we can

01:11:36.605 --> 01:11:37.324
<v Speaker 0>get into.

01:11:37.725 --> 01:11:40.220
<v Speaker 0>Not only that, but, you know, every Kubernetes

01:11:40.220 --> 01:11:43.660
<v Speaker 0>command I've run is as a cluster admin

01:11:43.660 --> 01:11:46.060
<v Speaker 0>of this cluster. I'm not I'm

01:11:46.060 --> 01:11:48.700
<v Speaker 0>not taking advantage of leveraging the role based

01:11:48.700 --> 01:11:50.940
<v Speaker 0>access control within Kubernetes to restrict my access.

01:11:51.255 --> 01:11:53.574
<v Speaker 0>So I cannot delete a namespace with every

01:11:53.574 --> 01:11:56.295
<v Speaker 0>resource in the world under it. So and

01:11:56.855 --> 01:11:58.854
<v Speaker 0>although this was never meant to be a

01:11:59.094 --> 01:12:01.335
<v Speaker 0>guide to everything Kubernetes. This is Yeah. E

01:12:01.335 --> 01:12:03.975
<v Speaker 0>commerce guide to Kubernetes to get people and

01:12:03.975 --> 01:12:06.135
<v Speaker 0>yourself comfortable enough to deploy those

01:12:06.740 --> 01:12:08.660
<v Speaker 0>primitives that you use day in and day

01:12:08.660 --> 01:12:10.580
<v Speaker 0>out. And I think what we've covered is

01:12:10.580 --> 01:12:12.100
<v Speaker 0>a really good representation

01:12:12.100 --> 01:12:14.900
<v Speaker 0>of those challenges and Yeah. Our our tasks.

01:12:14.900 --> 01:12:16.980
<v Speaker 1>This is great. This has been awesome.

01:12:18.225 --> 01:12:21.105
<v Speaker 0>Alright. Do you have any final questions before

01:12:21.105 --> 01:12:23.185
<v Speaker 0>I let you get back to your day?

01:12:25.265 --> 01:12:26.864
<v Speaker 1>Not that I can think of.

01:12:29.345 --> 01:12:30.625
<v Speaker 1>This has been super fun.

01:12:31.690 --> 01:12:34.329
<v Speaker 0>Alright. Well, thank you very much for taking

01:12:34.329 --> 01:12:35.770
<v Speaker 0>the time out of your day and joining

01:12:35.770 --> 01:12:38.250
<v Speaker 0>me and letting me just throw loads and

01:12:38.250 --> 01:12:39.770
<v Speaker 0>loads of Yamal at you. I know it

01:12:39.770 --> 01:12:41.610
<v Speaker 0>must have been extremely uncomfortable, but I do

01:12:41.610 --> 01:12:44.125
<v Speaker 0>appreciate your time. It was a pleasure. Yeah.

01:12:44.125 --> 01:12:45.485
<v Speaker 1>It was a pleasure. No. I learned a

01:12:45.485 --> 01:12:47.565
<v Speaker 1>lot. Thank you. Thanks for taking the time.

01:12:48.125 --> 01:12:50.205
<v Speaker 0>Cheers, David. I will speak to you soon.

01:12:50.205 --> 01:12:52.365
<v Speaker 0>Have a good day, everyone. Bye. Bye.
