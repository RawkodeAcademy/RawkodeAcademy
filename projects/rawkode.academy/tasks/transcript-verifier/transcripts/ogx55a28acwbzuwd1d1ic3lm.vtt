WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: e7365f07-bda4-4c36-8a13-4165c69fa7b4
Created: 2025-04-29T21:26:23.000Z
Duration: 4276.017
Channels: 1

00:01:26.380 --> 00:01:29.340
<v Speaker 0>Hello and welcome to today's episode of Rawkode

00:01:29.340 --> 00:01:29.659
<v Speaker 0>live.

00:01:30.175 --> 00:01:32.815
<v Speaker 0>I am Rawkode, your host also known as

00:01:32.815 --> 00:01:34.815
<v Speaker 0>David McKay but all the good handles were

00:01:34.815 --> 00:01:36.174
<v Speaker 0>taken unfortunately.

00:01:36.975 --> 00:01:40.175
<v Speaker 0>I wanna thank my employer, Equinix Medal. They

00:01:40.175 --> 00:01:41.775
<v Speaker 0>afford me time

00:01:41.775 --> 00:01:44.095
<v Speaker 0>to invest and to producing these shows and

00:01:44.095 --> 00:01:46.190
<v Speaker 0>getting you know, experts around the world to

00:01:46.190 --> 00:01:47.630
<v Speaker 0>come and introduce us to all of their

00:01:47.630 --> 00:01:50.670
<v Speaker 0>fantastic software. So thank you Equinix metal. If

00:01:50.670 --> 00:01:52.590
<v Speaker 0>you wanna try out Equinix metal, can use

00:01:52.590 --> 00:01:55.070
<v Speaker 0>the code Rawkode live. This will get you

00:01:55.070 --> 00:01:56.030
<v Speaker 0>$50

00:01:56.030 --> 00:01:57.310
<v Speaker 0>of compute time.

00:01:57.470 --> 00:01:58.910
<v Speaker 0>You can splash that in a few hours

00:01:58.910 --> 00:02:01.465
<v Speaker 0>with 400 gig of ram and 96 cores

00:02:01.465 --> 00:02:03.465
<v Speaker 0>or more or you can be a little

00:02:03.465 --> 00:02:05.705
<v Speaker 0>bit more conservative and have that run for

00:02:05.705 --> 00:02:07.625
<v Speaker 0>up to ten hours or a couple of

00:02:07.625 --> 00:02:09.544
<v Speaker 0>days depending on the machine and hardware that

00:02:09.544 --> 00:02:11.385
<v Speaker 0>you use. So check that out. It's good

00:02:11.385 --> 00:02:11.865
<v Speaker 0>to have a fun.

00:02:12.980 --> 00:02:14.739
<v Speaker 0>We also have a Discord channel if you

00:02:14.739 --> 00:02:16.659
<v Speaker 0>want to continue this conversation or you're not

00:02:16.659 --> 00:02:18.900
<v Speaker 0>watching this live and have questions. You can

00:02:18.900 --> 00:02:21.460
<v Speaker 0>find that at Rawkodelive/chat.

00:02:21.700 --> 00:02:23.939
<v Speaker 0>Now today we're gonna be taking a look

00:02:23.939 --> 00:02:24.740
<v Speaker 0>at Linkerd,

00:02:24.980 --> 00:02:27.700
<v Speaker 0>a cloud native service mesh by Buoyant

00:02:28.085 --> 00:02:30.405
<v Speaker 0>And we are very lucky that today we

00:02:30.405 --> 00:02:30.885
<v Speaker 0>have

00:02:32.005 --> 00:02:35.045
<v Speaker 0>Thomas, Thomas Rampelberg from Buoyant himself who's gonna

00:02:35.045 --> 00:02:38.084
<v Speaker 0>guide us through our Linkerd journey. Hello, Thomas.

00:02:38.084 --> 00:02:38.645
<v Speaker 0>How are you?

00:02:40.329 --> 00:02:42.170
<v Speaker 1>I am doing fantastic.

00:02:42.250 --> 00:02:43.770
<v Speaker 1>So excited to be here.

00:02:44.329 --> 00:02:46.330
<v Speaker 0>Awesome. Do you wanna just

00:02:46.969 --> 00:02:48.329
<v Speaker 0>tell us a little bit about what you

00:02:48.329 --> 00:02:49.610
<v Speaker 0>do at at Buoyant?

00:02:49.769 --> 00:02:52.250
<v Speaker 1>Yeah. You bet. I'm a software engineer at

00:02:52.250 --> 00:02:52.569
<v Speaker 1>Buoyant.

00:02:53.675 --> 00:02:55.835
<v Speaker 1>Buoyant's kind of the creators of the service

00:02:55.835 --> 00:02:59.355
<v Speaker 1>mesh. Linkerd version one was the first original

00:02:59.355 --> 00:03:02.075
<v Speaker 1>one. We went through a pretty big rewrite

00:03:02.075 --> 00:03:04.635
<v Speaker 1>based off of everything we've learned from version

00:03:04.635 --> 00:03:07.035
<v Speaker 1>one, and, we've got Linkerd two, which is

00:03:07.035 --> 00:03:07.515
<v Speaker 1>the

00:03:07.900 --> 00:03:09.980
<v Speaker 1>product that we're gonna be talking about today.

00:03:09.980 --> 00:03:12.540
<v Speaker 1>And I do software engineering and help maintain

00:03:12.540 --> 00:03:13.180
<v Speaker 1>that.

00:03:13.820 --> 00:03:14.700
<v Speaker 0>Awesome.

00:03:14.940 --> 00:03:17.100
<v Speaker 0>Now service mesh might be a new term

00:03:17.100 --> 00:03:18.300
<v Speaker 0>to some of the people that we have

00:03:18.300 --> 00:03:20.540
<v Speaker 0>watching. So can we maybe just break that

00:03:20.540 --> 00:03:21.740
<v Speaker 0>down a little bit and say what are

00:03:21.740 --> 00:03:23.740
<v Speaker 0>some of the responsibilities for a service mesh?

00:03:24.194 --> 00:03:26.035
<v Speaker 1>Yeah. You bet. So

00:03:26.114 --> 00:03:27.555
<v Speaker 1>let's talk a little bit about

00:03:28.435 --> 00:03:29.795
<v Speaker 1>how it all got started.

00:03:30.995 --> 00:03:33.635
<v Speaker 1>Back in the day at Twitter, they kinda

00:03:33.635 --> 00:03:35.315
<v Speaker 1>started out as a monolith

00:03:35.970 --> 00:03:39.010
<v Speaker 1>giant Ruby on Rails application. And as the

00:03:39.010 --> 00:03:40.690
<v Speaker 1>organization scaled and

00:03:41.409 --> 00:03:43.090
<v Speaker 1>folks got more and more frustrated with the

00:03:43.090 --> 00:03:45.090
<v Speaker 1>fail whale, they needed to go split out

00:03:45.090 --> 00:03:46.290
<v Speaker 1>into microservices.

00:03:47.250 --> 00:03:49.090
<v Speaker 1>Once you start splitting out into microservices,

00:03:49.555 --> 00:03:52.035
<v Speaker 1>there's these concerns that pretty much everybody needs

00:03:52.035 --> 00:03:53.395
<v Speaker 1>to go and implement.

00:03:54.035 --> 00:03:56.035
<v Speaker 1>You need to have a common

00:03:56.115 --> 00:03:56.755
<v Speaker 1>observable

00:03:56.995 --> 00:03:59.395
<v Speaker 1>observability stacks. You need to have metrics that

00:03:59.395 --> 00:04:02.035
<v Speaker 1>are the same across all the microservices, whatever

00:04:02.035 --> 00:04:04.790
<v Speaker 1>language they're written in. You need to have

00:04:04.950 --> 00:04:05.750
<v Speaker 1>reliability

00:04:05.750 --> 00:04:06.550
<v Speaker 1>concerns,

00:04:06.550 --> 00:04:07.350
<v Speaker 1>retries,

00:04:07.350 --> 00:04:09.030
<v Speaker 1>time outs, routing decisions,

00:04:09.350 --> 00:04:10.630
<v Speaker 1>smart load balancing,

00:04:11.350 --> 00:04:13.110
<v Speaker 1>and you need to have security,

00:04:13.110 --> 00:04:14.310
<v Speaker 1>so MTLS.

00:04:14.870 --> 00:04:15.990
<v Speaker 1>Those three things

00:04:16.795 --> 00:04:19.595
<v Speaker 1>at Twitter, they created a library called Finagle

00:04:19.595 --> 00:04:20.475
<v Speaker 1>to

00:04:20.555 --> 00:04:22.555
<v Speaker 1>implement that because they were writing all of

00:04:22.555 --> 00:04:24.875
<v Speaker 1>their microservices in a single language, Scala.

00:04:25.595 --> 00:04:28.155
<v Speaker 1>But most organizations who do microservices, one of

00:04:28.155 --> 00:04:29.595
<v Speaker 1>the big wins there is that you get

00:04:29.595 --> 00:04:32.090
<v Speaker 1>to write in whatever language you want. And

00:04:32.090 --> 00:04:32.650
<v Speaker 1>so,

00:04:33.289 --> 00:04:35.930
<v Speaker 1>Linkerd, the first service mesh, was kind of

00:04:35.930 --> 00:04:37.610
<v Speaker 1>created as a way to go and pull

00:04:37.610 --> 00:04:38.810
<v Speaker 1>all of the

00:04:39.449 --> 00:04:41.690
<v Speaker 1>we're gonna call them operational concerns,

00:04:41.690 --> 00:04:45.849
<v Speaker 1>like security and reliability and, metrics out of

00:04:45.849 --> 00:04:46.650
<v Speaker 1>developers'

00:04:46.650 --> 00:04:48.985
<v Speaker 1>apps and into a proxy that the operators

00:04:48.985 --> 00:04:52.185
<v Speaker 1>can go and deploy. And so Linkerd two

00:04:52.745 --> 00:04:55.385
<v Speaker 1>basically does that. It is a sidecar proxy

00:04:55.385 --> 00:04:57.865
<v Speaker 1>that gets deployed alongside your application

00:04:58.264 --> 00:05:00.264
<v Speaker 1>and that

00:04:59.470 --> 00:05:01.710
<v Speaker 1>goes and provides all of those benefits. The

00:05:01.710 --> 00:05:03.550
<v Speaker 1>sidecar proxy is what we call a data

00:05:03.550 --> 00:05:05.470
<v Speaker 1>plane, and then there's a control plane that

00:05:05.470 --> 00:05:08.430
<v Speaker 1>goes and manages all of the service discovery

00:05:08.430 --> 00:05:10.990
<v Speaker 1>and policy enforcement. And then all of that

00:05:10.990 --> 00:05:13.870
<v Speaker 1>runs on top of the Kubernetes platform itself.

00:05:15.275 --> 00:05:16.074
<v Speaker 0>Wow.

00:05:16.634 --> 00:05:19.035
<v Speaker 0>It does a lot. So that's awesome.

00:05:19.275 --> 00:05:21.594
<v Speaker 0>I always think like when, you know, I'm

00:05:21.594 --> 00:05:23.194
<v Speaker 0>talking to people about why they should be

00:05:23.194 --> 00:05:24.794
<v Speaker 0>cloud native or why they should adopt micro

00:05:24.794 --> 00:05:26.634
<v Speaker 0>services and you know, one of the common

00:05:26.634 --> 00:05:28.074
<v Speaker 0>themes that comes up is people say that

00:05:28.074 --> 00:05:30.140
<v Speaker 0>it simplifies the code that they write. Like

00:05:30.140 --> 00:05:31.900
<v Speaker 0>they get to write smaller services

00:05:32.060 --> 00:05:34.860
<v Speaker 0>that do very small things, but what they

00:05:34.860 --> 00:05:36.540
<v Speaker 0>don't realize is that all they're doing is

00:05:36.540 --> 00:05:39.180
<v Speaker 0>moving that complexity down to the infrastructure layer,

00:05:39.180 --> 00:05:41.260
<v Speaker 0>down to the network layer and that's why

00:05:41.260 --> 00:05:44.155
<v Speaker 0>tools like Kubernetes and Linkerd are just so

00:05:44.155 --> 00:05:46.555
<v Speaker 0>important when it comes to these new these

00:05:46.555 --> 00:05:49.515
<v Speaker 0>new microservice architectures or cloud native architectures.

00:05:50.075 --> 00:05:50.635
<v Speaker 1>You're

00:05:51.035 --> 00:05:53.035
<v Speaker 1>totally getting me set up for a rant.

00:05:53.115 --> 00:05:56.155
<v Speaker 1>Microservices in my opinion don't actually solve a

00:05:56.155 --> 00:05:58.870
<v Speaker 1>technology problem. They solve a human problem. The

00:05:58.870 --> 00:06:01.030
<v Speaker 1>whole purpose of microservices is to go and

00:06:01.030 --> 00:06:04.069
<v Speaker 1>give teams inside organizations ownership of their own

00:06:04.069 --> 00:06:06.389
<v Speaker 1>destiny. So it's not about, like, writing little

00:06:06.389 --> 00:06:09.030
<v Speaker 1>tiny pieces of code because you're exactly right.

00:06:09.030 --> 00:06:11.485
<v Speaker 1>That little tiny piece of code that runs

00:06:11.485 --> 00:06:13.405
<v Speaker 1>as a single service may be easy, but

00:06:13.405 --> 00:06:14.605
<v Speaker 1>now you need to think about all the

00:06:14.605 --> 00:06:16.445
<v Speaker 1>interconnections there. And

00:06:16.925 --> 00:06:19.885
<v Speaker 1>if you go and write a thousand microservices,

00:06:19.885 --> 00:06:22.125
<v Speaker 1>you've got a thousand x the complexity of

00:06:22.125 --> 00:06:24.750
<v Speaker 1>just shoving it into one place. Yep. Exactly.

00:06:24.750 --> 00:06:26.590
<v Speaker 0>I love that, the human problem line. I'm

00:06:26.590 --> 00:06:28.270
<v Speaker 0>gonna steal that. I borrow it, of course.

00:06:28.270 --> 00:06:30.509
<v Speaker 0>I credit you. Please do. I think more

00:06:30.509 --> 00:06:32.190
<v Speaker 1>folks need to hear it. And it's a

00:06:32.190 --> 00:06:34.669
<v Speaker 1>very important problem to solve. It it's very

00:06:34.669 --> 00:06:36.590
<v Speaker 1>powerful. It's the problem, to your point, that

00:06:36.590 --> 00:06:39.150
<v Speaker 1>all of the cloud native solutions solve is

00:06:39.535 --> 00:06:42.575
<v Speaker 1>giving teams and developers control over their own

00:06:42.575 --> 00:06:46.495
<v Speaker 1>destiny, but it's a human problem. Yeah. Definitely.

00:06:46.975 --> 00:06:47.695
<v Speaker 0>So

00:06:47.935 --> 00:06:50.975
<v Speaker 0>let's you know, that let's this stream is

00:06:50.975 --> 00:06:53.135
<v Speaker 0>all about getting hands on and showing the

00:06:53.135 --> 00:06:55.360
<v Speaker 0>technology and and how it works. So let

00:06:55.360 --> 00:06:56.080
<v Speaker 0>me cover

00:06:56.479 --> 00:06:57.200
<v Speaker 0>the,

00:06:57.919 --> 00:06:59.680
<v Speaker 0>there we go. Let me cover where we

00:06:59.680 --> 00:07:00.560
<v Speaker 0>are. So

00:07:00.720 --> 00:07:02.880
<v Speaker 0>with our stream I do very little upfront,

00:07:02.880 --> 00:07:04.639
<v Speaker 0>but of course we do need a few

00:07:04.639 --> 00:07:06.319
<v Speaker 0>things in advance for this. We want to

00:07:06.319 --> 00:07:09.200
<v Speaker 0>focus on the Linkerd aspects and nothing else.

00:07:09.759 --> 00:07:11.315
<v Speaker 0>So in order for that, I have used

00:07:11.315 --> 00:07:13.715
<v Speaker 0>Equinix metal and the cluster API and I

00:07:13.715 --> 00:07:17.075
<v Speaker 0>provisioned us two Linkerd clusters, Linkerd one and

00:07:17.075 --> 00:07:20.595
<v Speaker 0>Linkerd two, not very imaginative naming, but hopefully

00:07:20.595 --> 00:07:21.555
<v Speaker 0>something I would forget.

00:07:22.640 --> 00:07:24.960
<v Speaker 0>That's it. That's all I've done. Everything else

00:07:24.960 --> 00:07:26.400
<v Speaker 0>we're gonna do live and we're gonna do

00:07:26.400 --> 00:07:27.120
<v Speaker 0>it now.

00:07:27.680 --> 00:07:30.480
<v Speaker 0>Now I also have the Linkerd homepage here

00:07:30.480 --> 00:07:33.200
<v Speaker 0>and I'm assuming like everyone always does, they

00:07:33.200 --> 00:07:35.040
<v Speaker 0>tell me let's go to the docs. So

00:07:36.375 --> 00:07:38.615
<v Speaker 0>what is step one for getting started with

00:07:38.615 --> 00:07:39.975
<v Speaker 0>Linkerd on

00:07:40.055 --> 00:07:40.935
<v Speaker 0>Kubernetes?

00:07:42.375 --> 00:07:44.375
<v Speaker 1>Let's go hit that getting started link there

00:07:44.375 --> 00:07:45.095
<v Speaker 1>and

00:07:45.335 --> 00:07:47.735
<v Speaker 1>hopefully it will be self explanatory.

00:07:48.150 --> 00:07:49.590
<v Speaker 0>I knew you were gonna say that, but

00:07:49.590 --> 00:07:51.910
<v Speaker 0>I always ask it. I always ask. Alright.

00:07:51.910 --> 00:07:54.150
<v Speaker 0>So I'm I'm not gonna run cube control

00:07:54.150 --> 00:07:56.550
<v Speaker 0>version. I'm pretty confident with that.

00:07:56.949 --> 00:07:58.230
<v Speaker 0>In order to Actually,

00:07:58.710 --> 00:08:00.789
<v Speaker 1>is your cluster 119 or 118?

00:08:01.455 --> 00:08:03.294
<v Speaker 0>It's 119 Dot 3.

00:08:03.694 --> 00:08:04.895
<v Speaker 0>Oh,

00:08:05.294 --> 00:08:06.815
<v Speaker 1>I should've asked this before.

00:08:08.814 --> 00:08:10.895
<v Speaker 1>We'll have you use we'll have you use

00:08:10.895 --> 00:08:11.615
<v Speaker 1>the edge.

00:08:12.495 --> 00:08:15.615
<v Speaker 1>The TLDR there is that, Kubernetes one

00:08:16.349 --> 00:08:17.310
<v Speaker 1>nineteen

00:08:17.469 --> 00:08:18.990
<v Speaker 1>has some interesting

00:08:19.389 --> 00:08:22.189
<v Speaker 1>upgrades because of Golang, and certificates don't work

00:08:22.189 --> 00:08:24.349
<v Speaker 1>quite the way that they should. So if

00:08:24.349 --> 00:08:26.909
<v Speaker 1>you see that step one install command there,

00:08:26.909 --> 00:08:29.949
<v Speaker 1>instead of doing run Linkerd install, add a

00:08:29.949 --> 00:08:32.355
<v Speaker 1>dash edge to the end of the the

00:08:32.355 --> 00:08:35.154
<v Speaker 1>install, and we'll get you a edge version

00:08:35.154 --> 00:08:36.195
<v Speaker 1>that will work.

00:08:36.995 --> 00:08:39.154
<v Speaker 1>For those who are paying attention here, our

00:08:39.154 --> 00:08:41.714
<v Speaker 1>edges are unstable versions. But

00:08:42.115 --> 00:08:44.355
<v Speaker 1>as of probably this week, we'll have a

00:08:44.355 --> 00:08:46.675
<v Speaker 1>new stable version coming out

00:08:47.649 --> 00:08:50.209
<v Speaker 1>based off of our unstable. So you'll be

00:08:50.209 --> 00:08:52.130
<v Speaker 1>seeing the latest and greatest here.

00:08:53.089 --> 00:08:54.690
<v Speaker 0>Well, we do like to live life on

00:08:54.690 --> 00:08:56.850
<v Speaker 0>edge here, literally. So

00:08:57.170 --> 00:08:58.945
<v Speaker 0>oh, I need to change this. So you

00:08:58.945 --> 00:09:01.345
<v Speaker 0>want me to add Yep. Dash Edge just

00:09:01.345 --> 00:09:03.185
<v Speaker 1>on the URL? Nope. On the

00:09:05.105 --> 00:09:07.745
<v Speaker 0>Install Edge. Fix that. Yep. That's it.

00:09:12.610 --> 00:09:15.490
<v Speaker 0>Okay. So let's see if I can run

00:09:16.050 --> 00:09:18.770
<v Speaker 0>Linkerd version.

00:09:20.450 --> 00:09:21.410
<v Speaker 1>This is a

00:09:22.210 --> 00:09:25.655
<v Speaker 1>COBRA. So yep. Alright. Edge twenty ten six.

00:09:25.655 --> 00:09:27.815
<v Speaker 0>So I think we're over the first hurdle.

00:09:27.815 --> 00:09:29.335
<v Speaker 0>We're now running the Edge one.

00:09:31.095 --> 00:09:32.215
<v Speaker 0>Okay. So

00:09:34.455 --> 00:09:37.095
<v Speaker 0>now recommending that I run a Linkerd check

00:09:37.095 --> 00:09:39.660
<v Speaker 0>pre. So what what does this do? What's

00:09:39.660 --> 00:09:40.780
<v Speaker 0>what's it looking for?

00:09:41.420 --> 00:09:43.740
<v Speaker 1>So we're just gonna validate that your cluster

00:09:43.740 --> 00:09:44.300
<v Speaker 1>is

00:09:44.700 --> 00:09:45.500
<v Speaker 1>all

00:09:45.660 --> 00:09:49.180
<v Speaker 1>ready to get Linkerd installed on it. A

00:09:49.180 --> 00:09:50.540
<v Speaker 1>lot of that's going to be

00:09:51.020 --> 00:09:53.345
<v Speaker 1>RBAC and making sure that you've not got

00:09:53.345 --> 00:09:55.185
<v Speaker 1>any crazy settings on your cluster.

00:09:55.905 --> 00:09:58.225
<v Speaker 1>We're we feel pretty strongly in our check

00:09:58.225 --> 00:09:59.185
<v Speaker 1>infrastructure.

00:10:00.225 --> 00:10:02.625
<v Speaker 1>As I'm sure you've probably noticed, Kubernetes clusters

00:10:02.625 --> 00:10:04.145
<v Speaker 1>tend to be a little bit of snowflakes.

00:10:04.410 --> 00:10:05.690
<v Speaker 1>Everyone is different.

00:10:06.410 --> 00:10:08.170
<v Speaker 1>Even though we say that it's all cattle,

00:10:08.170 --> 00:10:08.810
<v Speaker 1>it's not.

00:10:09.690 --> 00:10:11.529
<v Speaker 1>Clusters are pets. And so we like to

00:10:11.529 --> 00:10:14.170
<v Speaker 1>make sure that folks know that Linkerd can

00:10:14.170 --> 00:10:16.010
<v Speaker 1>get running on their cluster right away.

00:10:16.410 --> 00:10:17.935
<v Speaker 0>So if that comes back and tells us

00:10:17.935 --> 00:10:20.095
<v Speaker 0>that our cluster is not applicable, we're just

00:10:20.095 --> 00:10:21.455
<v Speaker 0>packing up and going to the pub. Right?

00:10:21.455 --> 00:10:21.935
<v Speaker 0>That's

00:10:23.935 --> 00:10:25.775
<v Speaker 1>I could I could go for the pub.

00:10:28.575 --> 00:10:30.255
<v Speaker 0>Looks like we're getting texts. I'm sorry, mate.

00:10:30.440 --> 00:10:32.520
<v Speaker 0>We're ever stuck here. Okay. So

00:10:33.079 --> 00:10:35.320
<v Speaker 0>status checks are all green.

00:10:35.320 --> 00:10:36.120
<v Speaker 0>So

00:10:36.279 --> 00:10:39.399
<v Speaker 0>this is just creating the Kubernetes API, checking

00:10:39.399 --> 00:10:41.480
<v Speaker 0>the Kubernetes versions and making sure that our

00:10:41.480 --> 00:10:42.920
<v Speaker 0>back permissions are in place that it can

00:10:42.920 --> 00:10:45.795
<v Speaker 0>create a proven it needs. Yep.

00:10:46.115 --> 00:10:47.875
<v Speaker 0>And I see net admin and net raw,

00:10:47.875 --> 00:10:49.395
<v Speaker 0>which I guess makes sense as a service

00:10:49.395 --> 00:10:51.475
<v Speaker 0>mesh. We've got some networking stuff that has

00:10:51.475 --> 00:10:52.995
<v Speaker 0>to happen so. Yep.

00:10:53.795 --> 00:10:54.595
<v Speaker 0>Okay.

00:10:54.595 --> 00:10:57.075
<v Speaker 0>So then we go through the Linkerd install

00:10:57.075 --> 00:10:58.700
<v Speaker 0>and we're just gonna apply that straight to

00:10:58.700 --> 00:11:01.260
<v Speaker 0>Kubernetes, which is going to install, I'm assuming,

00:11:01.260 --> 00:11:03.740
<v Speaker 0>our Linkerd control plane and data plane?

00:11:04.220 --> 00:11:06.140
<v Speaker 1>Just the control plane, though. The control plane

00:11:06.140 --> 00:11:07.500
<v Speaker 1>uses the data plane.

00:11:08.220 --> 00:11:08.860
<v Speaker 0>Okay.

00:11:10.220 --> 00:11:12.380
<v Speaker 1>And then that command, Linkerd install, just outputs

00:11:12.380 --> 00:11:14.995
<v Speaker 1>YAML. So if you so felt like auditing

00:11:14.995 --> 00:11:16.835
<v Speaker 1>or taking a look at that, you could.

00:11:17.715 --> 00:11:20.115
<v Speaker 1>And this is kind of meant for

00:11:20.595 --> 00:11:22.275
<v Speaker 1>kicking the tires and getting started.

00:11:23.155 --> 00:11:25.155
<v Speaker 1>As you asked before the stream gets started,

00:11:25.315 --> 00:11:26.915
<v Speaker 1>there is a Helm chart that you can

00:11:26.915 --> 00:11:29.320
<v Speaker 1>use. But like most things, Helm, it takes

00:11:29.320 --> 00:11:30.920
<v Speaker 1>a while to go figure out what settings

00:11:30.920 --> 00:11:32.360
<v Speaker 1>you want and how to configure it. So

00:11:32.360 --> 00:11:34.920
<v Speaker 1>we kinda recommend getting started with this and

00:11:34.920 --> 00:11:36.440
<v Speaker 1>then figuring out where you wanted to go

00:11:36.440 --> 00:11:37.880
<v Speaker 1>for a production install.

00:11:38.440 --> 00:11:39.959
<v Speaker 0>Yeah. I I can see there's there's obviously

00:11:39.959 --> 00:11:41.399
<v Speaker 0>quite a lot going on here with this

00:11:41.399 --> 00:11:42.995
<v Speaker 0>kind of quick start approach.

00:11:43.235 --> 00:11:44.195
<v Speaker 0>Grafana,

00:11:44.355 --> 00:11:45.075
<v Speaker 0>there's

00:11:46.195 --> 00:11:49.315
<v Speaker 0>proxy injectors, Linkerd web, so I'm assuming we've

00:11:49.315 --> 00:11:51.315
<v Speaker 0>got some sort of dashboard or UI.

00:11:51.635 --> 00:11:52.995
<v Speaker 0>Yep. Lots of lots of stuff for us

00:11:52.995 --> 00:11:54.355
<v Speaker 0>to poke and play with which is good.

00:11:56.000 --> 00:11:58.320
<v Speaker 0>Alright. Let's see. So we now have this

00:11:58.320 --> 00:12:00.240
<v Speaker 0>command. So this is no longer the precheck,

00:12:00.240 --> 00:12:01.440
<v Speaker 0>but it's now gonna make sure that what

00:12:01.440 --> 00:12:02.480
<v Speaker 0>we've just applied

00:12:02.720 --> 00:12:03.680
<v Speaker 0>works.

00:12:04.000 --> 00:12:04.880
<v Speaker 1>Exactly.

00:12:05.600 --> 00:12:07.360
<v Speaker 1>And we're gonna sit and wait while the

00:12:07.360 --> 00:12:08.800
<v Speaker 1>con containers come up.

00:12:09.964 --> 00:12:10.845
<v Speaker 1>It's

00:12:10.845 --> 00:12:12.765
<v Speaker 1>pretty frustrating to go and

00:12:13.084 --> 00:12:14.765
<v Speaker 1>try and run through the get started guide

00:12:14.765 --> 00:12:16.605
<v Speaker 1>and not have everything ready yet.

00:12:18.285 --> 00:12:19.964
<v Speaker 0>It'll be alright. I mean,

00:12:20.925 --> 00:12:22.925
<v Speaker 0>it's it's good to see that stuff running.

00:12:22.925 --> 00:12:23.084
<v Speaker 0>So,

00:12:24.209 --> 00:12:26.449
<v Speaker 0>I mean there's not a not exciting television

00:12:26.449 --> 00:12:28.209
<v Speaker 0>but people have to see what happens here

00:12:28.209 --> 00:12:29.250
<v Speaker 0>and you know what, I love it when

00:12:29.250 --> 00:12:30.769
<v Speaker 0>it fails. Don't get me wrong, see when

00:12:30.769 --> 00:12:32.129
<v Speaker 0>the docs are great and it works and

00:12:32.129 --> 00:12:34.449
<v Speaker 0>we just we go through it, cool. I

00:12:34.449 --> 00:12:35.889
<v Speaker 0>love intuitive docs, I love it when I

00:12:35.889 --> 00:12:37.274
<v Speaker 0>don't have to think but at the same

00:12:37.274 --> 00:12:38.795
<v Speaker 0>time when things break, it's also good to

00:12:38.795 --> 00:12:40.235
<v Speaker 0>be able to dig in and see what's

00:12:40.235 --> 00:12:42.555
<v Speaker 0>actually happening under the hood so. Totally.

00:12:43.115 --> 00:12:44.635
<v Speaker 0>But we're out of luck even on our

00:12:44.635 --> 00:12:46.714
<v Speaker 0>Linkerd Edge release here, we're still just getting

00:12:46.714 --> 00:12:48.315
<v Speaker 0>this little green tick everywhere we go.

00:12:50.440 --> 00:12:52.120
<v Speaker 0>Alright. Let's keep going.

00:12:54.120 --> 00:12:55.080
<v Speaker 0>I'm done.

00:12:55.560 --> 00:12:56.280
<v Speaker 0>Right?

00:12:56.440 --> 00:12:59.400
<v Speaker 1>Yep. You have a working install.

00:13:00.840 --> 00:13:02.680
<v Speaker 0>So if I just run, I won't bother

00:13:02.680 --> 00:13:03.560
<v Speaker 0>with ampersand.

00:13:03.705 --> 00:13:05.225
<v Speaker 0>This is gonna do some sort of port

00:13:05.225 --> 00:13:06.505
<v Speaker 0>forward, I presume.

00:13:06.825 --> 00:13:09.385
<v Speaker 0>Yep. It's opened in the wrong That

00:13:09.865 --> 00:13:12.265
<v Speaker 1>that is actually literally just a wrapper around

00:13:12.265 --> 00:13:16.025
<v Speaker 1>kubectl port forward. We actually use that code.

00:13:16.025 --> 00:13:16.265
<v Speaker 1>So

00:13:17.110 --> 00:13:19.590
<v Speaker 0>Alright. Okay. Yeah. It keeps it nice and

00:13:19.590 --> 00:13:21.510
<v Speaker 0>simple for people with a link of DCLI.

00:13:21.510 --> 00:13:23.830
<v Speaker 0>So I get that. Yep. So this is

00:13:23.830 --> 00:13:25.590
<v Speaker 0>a dashboard.

00:13:27.430 --> 00:13:28.870
<v Speaker 0>It's just showing me

00:13:29.195 --> 00:13:31.274
<v Speaker 0>my is this like a Kubernetes dashboard? I

00:13:31.274 --> 00:13:32.475
<v Speaker 0>see that it showed me cron jobs and

00:13:32.475 --> 00:13:34.315
<v Speaker 0>daemon size deployments. I mean, is this Linkerd

00:13:34.315 --> 00:13:37.355
<v Speaker 0>specific or what's going on here? Yeah. So

00:13:37.355 --> 00:13:38.715
<v Speaker 1>this is Linkerd specific.

00:13:39.515 --> 00:13:41.195
<v Speaker 1>Because the control plane

00:13:41.370 --> 00:13:43.530
<v Speaker 1>dog food's the data plane itself, if you

00:13:43.530 --> 00:13:45.530
<v Speaker 1>go click on that Linkerd

00:13:46.090 --> 00:13:48.650
<v Speaker 1>but or Linkerd link there, you'll actually see

00:13:48.650 --> 00:13:50.650
<v Speaker 1>the full health of what's happening in the

00:13:50.650 --> 00:13:53.610
<v Speaker 1>control plane right now, including the service topology

00:13:54.125 --> 00:13:56.045
<v Speaker 1>and all of the deployments. And so you've

00:13:56.045 --> 00:13:58.204
<v Speaker 1>switched over to Linkerd namespace now.

00:13:58.605 --> 00:14:00.204
<v Speaker 1>You could go click on deployments.

00:14:00.524 --> 00:14:02.685
<v Speaker 1>We keep it super close to the Kubernetes

00:14:02.685 --> 00:14:03.485
<v Speaker 1>dashboard

00:14:03.885 --> 00:14:05.964
<v Speaker 1>so that it's easy to understand what's going

00:14:05.964 --> 00:14:08.930
<v Speaker 1>on, but it is Linkerd specific

00:14:08.930 --> 00:14:09.970
<v Speaker 1>functionality.

00:14:09.970 --> 00:14:10.690
<v Speaker 1>And then,

00:14:11.649 --> 00:14:14.209
<v Speaker 1>while this is super Linkerd specific,

00:14:14.370 --> 00:14:16.290
<v Speaker 1>we also have Grafana links,

00:14:16.610 --> 00:14:17.810
<v Speaker 1>if you notice that

00:14:18.209 --> 00:14:19.810
<v Speaker 1>link right there that you can go to

00:14:19.810 --> 00:14:21.889
<v Speaker 1>for prebuilt dashboards. So if you wanted to

00:14:21.889 --> 00:14:24.355
<v Speaker 1>put this up on a TV,

00:14:25.475 --> 00:14:27.394
<v Speaker 1>something like that, you can do that as

00:14:27.394 --> 00:14:27.875
<v Speaker 1>well.

00:14:29.954 --> 00:14:32.435
<v Speaker 0>Alright. There's

00:14:32.435 --> 00:14:34.595
<v Speaker 0>a lot then. Right? So this quick start

00:14:34.595 --> 00:14:38.100
<v Speaker 0>installer has given me Linkerd running on my

00:14:38.100 --> 00:14:40.260
<v Speaker 0>cluster as a surface mesh. Yep. But it's

00:14:40.260 --> 00:14:41.940
<v Speaker 0>also got a Grafana, which we've seen an

00:14:41.940 --> 00:14:44.580
<v Speaker 0>install. It's get I'm assuming there's then Prometheus

00:14:44.580 --> 00:14:46.580
<v Speaker 0>being deployed also. That's how the metrics are

00:14:46.580 --> 00:14:47.940
<v Speaker 0>getting from Linkerd into

00:14:48.180 --> 00:14:50.740
<v Speaker 0>the Grafana and you're deploying all of these

00:14:50.740 --> 00:14:51.700
<v Speaker 0>pre canned dashboards.

00:14:52.225 --> 00:14:53.905
<v Speaker 0>Yep. I guess, to give me confidence that

00:14:53.905 --> 00:14:55.825
<v Speaker 0>Linkerd is doing what I expected to do.

00:14:55.825 --> 00:14:56.705
<v Speaker 0>Right? Exactly.

00:14:58.225 --> 00:15:00.145
<v Speaker 1>I I believe pretty strongly in

00:15:00.945 --> 00:15:03.265
<v Speaker 1>letting folks validate what they just got done

00:15:03.265 --> 00:15:05.025
<v Speaker 1>doing and making sure that it's all healthy.

00:15:05.025 --> 00:15:06.865
<v Speaker 1>And so that's kinda how we get to

00:15:06.865 --> 00:15:07.425
<v Speaker 1>this point here.

00:15:08.070 --> 00:15:09.910
<v Speaker 0>Okay. I mean, this is pretty sweet. I

00:15:09.910 --> 00:15:10.870
<v Speaker 0>like in this.

00:15:11.910 --> 00:15:13.750
<v Speaker 0>So I'm assuming that

00:15:14.550 --> 00:15:17.110
<v Speaker 0>by looking at this, I mean, there's not

00:15:17.110 --> 00:15:19.510
<v Speaker 0>really anything running in my cluster yet. So

00:15:19.590 --> 00:15:21.350
<v Speaker 0>Yeah. Right. This this is just Linkerd

00:15:21.915 --> 00:15:24.555
<v Speaker 0>set an idle test at a certain degree?

00:15:24.714 --> 00:15:26.075
<v Speaker 0>Mhmm. Okay.

00:15:26.635 --> 00:15:28.714
<v Speaker 0>So if I I'm just I'm just gonna

00:15:28.714 --> 00:15:30.555
<v Speaker 0>guess that maybe there's demo app, but there

00:15:30.555 --> 00:15:32.475
<v Speaker 0>is a demo app. So Sure enough.

00:15:33.515 --> 00:15:35.595
<v Speaker 0>No. I kinda skipped over a step there.

00:15:35.595 --> 00:15:37.860
<v Speaker 0>I'm gonna assume it's maybe not important. This

00:15:37.860 --> 00:15:38.740
<v Speaker 0>is just

00:15:39.779 --> 00:15:41.700
<v Speaker 1>That's pretty fun to take a look at.

00:15:41.940 --> 00:15:43.140
<v Speaker 1>Pull it up, and we can chat a

00:15:43.140 --> 00:15:44.020
<v Speaker 1>little bit about it.

00:15:45.380 --> 00:15:47.220
<v Speaker 0>Okay. Can I close the port forward, or

00:15:47.220 --> 00:15:48.980
<v Speaker 0>should I leave that open? Or Nah.

00:15:51.045 --> 00:15:54.245
<v Speaker 1>So we come with a tool what is

00:15:54.245 --> 00:15:55.205
<v Speaker 1>this? Top?

00:15:55.525 --> 00:15:57.685
<v Speaker 1>This is top. So we come with a

00:15:57.685 --> 00:15:58.805
<v Speaker 1>tool called top,

00:15:58.965 --> 00:15:59.845
<v Speaker 1>and this is

00:16:01.605 --> 00:16:04.645
<v Speaker 1>watching all of the communications in the cluster

00:16:04.645 --> 00:16:05.365
<v Speaker 1>live

00:16:05.750 --> 00:16:07.670
<v Speaker 1>and then showing you the top of what's

00:16:07.670 --> 00:16:09.350
<v Speaker 1>happening in the cluster. And so you'll see

00:16:09.350 --> 00:16:09.990
<v Speaker 1>each,

00:16:10.470 --> 00:16:12.790
<v Speaker 1>path, the source, destination. And so this is

00:16:12.790 --> 00:16:14.149
<v Speaker 1>a fun way to kinda take a look

00:16:14.149 --> 00:16:16.230
<v Speaker 1>at what's going on inside the cluster. Here,

00:16:16.230 --> 00:16:17.190
<v Speaker 1>you'll see that,

00:16:17.589 --> 00:16:20.225
<v Speaker 1>the the Linkerd installed Prometheus is going and

00:16:20.225 --> 00:16:22.545
<v Speaker 1>scraping a whole bunch of deployments.

00:16:22.785 --> 00:16:26.385
<v Speaker 1>Those IP addresses are actually kubelets going and

00:16:26.385 --> 00:16:28.865
<v Speaker 1>doing readiness and liveness checks as you can

00:16:28.865 --> 00:16:31.265
<v Speaker 1>see by ready and ping. And so

00:16:31.860 --> 00:16:34.019
<v Speaker 1>as the scrapes and the rest of that

00:16:34.019 --> 00:16:35.699
<v Speaker 1>happens, you'll see these go up,

00:16:36.579 --> 00:16:38.259
<v Speaker 1>with success rate and all the data. So

00:16:38.259 --> 00:16:40.660
<v Speaker 1>this is kind of a fun thing to

00:16:40.660 --> 00:16:42.420
<v Speaker 1>pull up if you are

00:16:42.765 --> 00:16:45.165
<v Speaker 1>doing a deployment or something like that. You

00:16:45.165 --> 00:16:46.765
<v Speaker 1>can kinda watch the health of what's going

00:16:46.765 --> 00:16:48.605
<v Speaker 1>on as the deployment goes out in real

00:16:48.605 --> 00:16:49.165
<v Speaker 1>time.

00:16:49.645 --> 00:16:50.525
<v Speaker 0>Awesome.

00:16:50.765 --> 00:16:51.485
<v Speaker 0>So

00:16:51.885 --> 00:16:54.045
<v Speaker 0>let me throw a few questions at you

00:16:54.045 --> 00:16:55.805
<v Speaker 0>then. Because I'm I'm I'm curious like like

00:16:55.805 --> 00:16:57.565
<v Speaker 0>right now what role Linkerd is playing in

00:16:57.565 --> 00:16:59.620
<v Speaker 0>this in this idle state. Like,

00:17:00.740 --> 00:17:03.220
<v Speaker 0>we're not injecting a SAICAR into anything that

00:17:03.220 --> 00:17:05.460
<v Speaker 0>is preexisting in my cluster. Is is that

00:17:05.460 --> 00:17:08.179
<v Speaker 0>right? Correct. Your your cluster is working the

00:17:08.179 --> 00:17:08.659
<v Speaker 1>way

00:17:08.980 --> 00:17:10.179
<v Speaker 1>it should be

00:17:10.980 --> 00:17:12.099
<v Speaker 1>specifically because

00:17:13.345 --> 00:17:15.905
<v Speaker 1>the service mesh goes and gets

00:17:16.945 --> 00:17:18.305
<v Speaker 1>part of the data path.

00:17:18.465 --> 00:17:18.944
<v Speaker 1>And,

00:17:19.985 --> 00:17:21.185
<v Speaker 1>let's be honest,

00:17:21.585 --> 00:17:23.985
<v Speaker 1>service meshes aren't perfect software, and so stuff

00:17:23.985 --> 00:17:27.025
<v Speaker 1>is gonna break. And and we

00:17:26.099 --> 00:17:28.660
<v Speaker 1>really, really encourage folks to do things incrementally.

00:17:28.660 --> 00:17:30.260
<v Speaker 1>And so kind of where you're going with

00:17:30.260 --> 00:17:31.940
<v Speaker 1>this, I think, is just add it to

00:17:31.940 --> 00:17:33.700
<v Speaker 1>one workload and then slowly roll it out

00:17:33.700 --> 00:17:35.460
<v Speaker 1>on your cluster. So we try pretty hard

00:17:35.460 --> 00:17:38.020
<v Speaker 1>not to touch or modify anything until you

00:17:38.020 --> 00:17:40.544
<v Speaker 1>are ready to opt into it. Yeah. I

00:17:40.544 --> 00:17:42.065
<v Speaker 0>think you've read my mind to a certain

00:17:42.065 --> 00:17:43.585
<v Speaker 0>degree there. What I'm thinking is, you know,

00:17:43.585 --> 00:17:44.865
<v Speaker 0>not a lot of people are in a

00:17:44.865 --> 00:17:46.945
<v Speaker 0>position like this where they're they have this

00:17:46.945 --> 00:17:49.265
<v Speaker 0>fresh cluster, they're deploying their workloads with the

00:17:49.265 --> 00:17:51.505
<v Speaker 0>service mesh already preexisting. So like,

00:17:52.140 --> 00:17:55.340
<v Speaker 0>I can take a very heavy production based

00:17:55.340 --> 00:17:58.300
<v Speaker 0>cluster add Linkerd to it with probably not

00:17:58.300 --> 00:17:59.980
<v Speaker 0>too much of an overhead and then slowly

00:17:59.980 --> 00:18:02.860
<v Speaker 0>start to roll out those sidecars wherever it

00:18:02.860 --> 00:18:05.260
<v Speaker 0>maybe makes sense or wherever the priority for

00:18:05.260 --> 00:18:07.020
<v Speaker 0>retries and all the other features comes in

00:18:07.035 --> 00:18:08.955
<v Speaker 0>and just Exactly. Take my time with it.

00:18:08.955 --> 00:18:10.155
<v Speaker 0>Right? Yep. Okay.

00:18:11.435 --> 00:18:12.075
<v Speaker 0>So

00:18:12.395 --> 00:18:14.554
<v Speaker 0>let's get this demo app deployed then.

00:18:15.835 --> 00:18:17.515
<v Speaker 0>So emoji photo

00:18:19.275 --> 00:18:20.875
<v Speaker 0>and we're gonna curl

00:18:21.035 --> 00:18:21.995
<v Speaker 0>and apply.

00:18:23.770 --> 00:18:25.450
<v Speaker 1>And this is just a

00:18:25.850 --> 00:18:28.650
<v Speaker 1>gRPC app that's got a couple microservices in

00:18:28.650 --> 00:18:31.049
<v Speaker 1>it, and we'll be able to walk through

00:18:31.450 --> 00:18:34.250
<v Speaker 1>how to go and diagnose an issue because

00:18:34.250 --> 00:18:36.170
<v Speaker 1>we've actually got a bug in the application.

00:18:37.095 --> 00:18:38.054
<v Speaker 0>Intentionally?

00:18:38.054 --> 00:18:41.575
<v Speaker 0>Or Intentionally. Yep. Yeah. Okay. It's

00:18:41.575 --> 00:18:43.495
<v Speaker 1>pretty fun to go and see how easy

00:18:43.495 --> 00:18:45.975
<v Speaker 1>it is to track down issues that were

00:18:45.975 --> 00:18:48.615
<v Speaker 1>something that would take you forever before Linkerd.

00:18:49.820 --> 00:18:52.300
<v Speaker 1>We had one Linkerd user who, rolled out

00:18:52.300 --> 00:18:53.340
<v Speaker 1>a service,

00:18:53.980 --> 00:18:55.259
<v Speaker 1>and it was

00:18:55.580 --> 00:18:57.500
<v Speaker 1>order of magnitude slower. No one could figure

00:18:57.500 --> 00:18:59.820
<v Speaker 1>out what was going on, and they, just

00:18:59.820 --> 00:19:01.740
<v Speaker 1>ran top. And sure enough, there was the

00:19:01.740 --> 00:19:04.225
<v Speaker 1>endpoint that was going slow. And so that,

00:19:04.225 --> 00:19:05.985
<v Speaker 1>you know, got them to the exact piece

00:19:05.985 --> 00:19:07.664
<v Speaker 1>of code they needed to change within, you

00:19:07.664 --> 00:19:09.184
<v Speaker 1>know, five or ten minutes.

00:19:09.664 --> 00:19:10.544
<v Speaker 0>Awesome.

00:19:11.265 --> 00:19:13.585
<v Speaker 0>Alright. So let's do the port forward and

00:19:13.585 --> 00:19:14.945
<v Speaker 0>see what we're playing with then.

00:19:19.740 --> 00:19:21.260
<v Speaker 0>Okay. Let's see.

00:19:21.660 --> 00:19:22.940
<v Speaker 0>So

00:19:29.980 --> 00:19:33.660
<v Speaker 0>Yep. I get to vote on my

00:19:32.715 --> 00:19:33.914
<v Speaker 0>favorite emoji.

00:19:34.154 --> 00:19:35.914
<v Speaker 1>Yep. And the the

00:19:36.635 --> 00:19:38.794
<v Speaker 1>spoiler here is that the bug is the

00:19:38.794 --> 00:19:40.635
<v Speaker 1>donut emoji. If you try and vote for

00:19:40.635 --> 00:19:42.395
<v Speaker 1>that, it will give you think it's a

00:19:42.395 --> 00:19:43.195
<v Speaker 1>four zero four.

00:19:45.840 --> 00:19:47.440
<v Speaker 1>Yep. Yeah. Okay.

00:19:48.160 --> 00:19:50.960
<v Speaker 0>But any other emoji, let's do I mean,

00:19:50.960 --> 00:19:53.119
<v Speaker 0>everybody likes the monkey. There we go.

00:19:55.039 --> 00:19:56.399
<v Speaker 0>Where's the

00:19:57.120 --> 00:19:59.375
<v Speaker 1>So we've got a voice in here. So

00:19:59.375 --> 00:20:01.855
<v Speaker 1>we've got a load generator that is going

00:20:01.855 --> 00:20:04.015
<v Speaker 1>and voting pretty much randomly so that you

00:20:04.015 --> 00:20:06.335
<v Speaker 1>can go and see the data that's going

00:20:06.335 --> 00:20:08.575
<v Speaker 1>through instead of having to generate

00:20:08.575 --> 00:20:10.095
<v Speaker 1>one or two requests yourself.

00:20:12.670 --> 00:20:14.510
<v Speaker 0>Okay. That makes sense. Okay. So that these

00:20:14.510 --> 00:20:16.430
<v Speaker 0>are just gonna arbitrarily go up then as

00:20:16.430 --> 00:20:18.910
<v Speaker 0>that load generator is applying the the fake

00:20:18.910 --> 00:20:19.950
<v Speaker 0>votes. Okay.

00:20:20.350 --> 00:20:20.909
<v Speaker 0>So

00:20:21.230 --> 00:20:24.430
<v Speaker 0>we've identified the bug and the donut. Right?

00:20:25.144 --> 00:20:26.585
<v Speaker 0>Is that the next step? Are you gonna

00:20:26.585 --> 00:20:29.144
<v Speaker 0>show me how we we we resolve this?

00:20:29.465 --> 00:20:31.225
<v Speaker 1>I think so. Let's go back to the

00:20:31.225 --> 00:20:33.144
<v Speaker 1>docs. We should it should walk us through

00:20:33.144 --> 00:20:35.705
<v Speaker 1>what's going on there. We don't need docs.

00:20:35.705 --> 00:20:36.744
<v Speaker 0>We'll make Ah,

00:20:37.304 --> 00:20:39.840
<v Speaker 1>that's right. So we haven't actually we added

00:20:39.840 --> 00:20:41.920
<v Speaker 1>EmojiVoto, but we haven't actually added,

00:20:42.160 --> 00:20:44.480
<v Speaker 1>Linkerd to it yet. So what you're using

00:20:44.480 --> 00:20:46.640
<v Speaker 1>is the unmatched service. And so the next

00:20:46.640 --> 00:20:48.240
<v Speaker 1>step here is for us to add Linkerd

00:20:48.240 --> 00:20:48.800
<v Speaker 1>in.

00:20:49.120 --> 00:20:51.280
<v Speaker 1>And to do that, we're just going to

00:20:51.280 --> 00:20:53.200
<v Speaker 1>get the YAML directly from the cluster.

00:20:53.855 --> 00:20:56.495
<v Speaker 1>Obviously, this is a demo. I wouldn't do

00:20:56.495 --> 00:20:59.455
<v Speaker 1>this in production or anything like that. And

00:20:59.455 --> 00:21:01.294
<v Speaker 1>then we're gonna run the Linkerd inject.

00:21:01.935 --> 00:21:03.775
<v Speaker 1>And, yeah, why don't you just cut and

00:21:03.775 --> 00:21:05.775
<v Speaker 1>paste that because

00:21:06.380 --> 00:21:07.900
<v Speaker 1>what this is gonna show off is the

00:21:07.900 --> 00:21:10.060
<v Speaker 1>only thing that inject does by default is

00:21:10.060 --> 00:21:12.540
<v Speaker 1>add that annotation right there, that Linkerd inject

00:21:12.540 --> 00:21:13.260
<v Speaker 1>enabled,

00:21:13.660 --> 00:21:15.660
<v Speaker 1>which is then going to go and hit

00:21:15.660 --> 00:21:18.220
<v Speaker 1>the proxy injector and have when the pods

00:21:18.220 --> 00:21:20.300
<v Speaker 1>are created on the Kubernetes cluster,

00:21:21.135 --> 00:21:22.335
<v Speaker 1>the proxy

00:21:22.335 --> 00:21:24.735
<v Speaker 1>and the in its in a container will

00:21:24.735 --> 00:21:25.615
<v Speaker 1>get added on.

00:21:26.335 --> 00:21:28.655
<v Speaker 0>Okay. So it's just that one annotation? It's

00:21:28.655 --> 00:21:31.615
<v Speaker 0>it's not an NF analysis? Yep. And so

00:21:31.615 --> 00:21:33.135
<v Speaker 1>you can add that yourself if you so

00:21:33.135 --> 00:21:33.775
<v Speaker 1>felt like it.

00:21:34.900 --> 00:21:37.140
<v Speaker 1>Inject, we'll do a manual inject as well.

00:21:37.140 --> 00:21:39.780
<v Speaker 1>If you're in an environment where mutating webhooks

00:21:39.780 --> 00:21:41.620
<v Speaker 1>don't work for you, you can go and

00:21:41.620 --> 00:21:43.860
<v Speaker 1>add it directly into the pod spec there.

00:21:44.500 --> 00:21:44.980
<v Speaker 1>But

00:21:45.300 --> 00:21:47.860
<v Speaker 1>for most folks, we recommend the

00:21:48.100 --> 00:21:49.379
<v Speaker 1>injection

00:21:50.115 --> 00:21:52.835
<v Speaker 1>proxy injector kinda process there.

00:21:53.395 --> 00:21:55.395
<v Speaker 0>Alright. So we'll we'll just go ahead and

00:21:55.395 --> 00:21:56.514
<v Speaker 0>apply that then.

00:21:56.995 --> 00:21:57.794
<v Speaker 0>And

00:22:02.115 --> 00:22:02.434
<v Speaker 0>cool.

00:22:05.539 --> 00:22:07.539
<v Speaker 0>So I injected the okay. So there's there's

00:22:07.539 --> 00:22:08.820
<v Speaker 0>four different no.

00:22:09.620 --> 00:22:11.779
<v Speaker 0>Yeah. Four different deployments and they've each been

00:22:11.779 --> 00:22:14.340
<v Speaker 0>injected. So if I run get the place.

00:22:16.235 --> 00:22:18.874
<v Speaker 1>Emoji photo namespace. Emoji photo.

00:22:21.674 --> 00:22:23.834
<v Speaker 0>And I'm just gonna just scrape

00:22:24.715 --> 00:22:26.394
<v Speaker 0>a pod and

00:22:27.835 --> 00:22:28.875
<v Speaker 0>grab the first one.

00:22:30.360 --> 00:22:32.520
<v Speaker 0>Let me just see the sidecar should be

00:22:32.520 --> 00:22:34.360
<v Speaker 0>there. Is that right? Yep.

00:22:37.480 --> 00:22:38.840
<v Speaker 0>Linkerd proxy.

00:22:39.000 --> 00:22:39.720
<v Speaker 0>Okay.

00:22:40.679 --> 00:22:43.480
<v Speaker 0>So now less traffic, if I do the

00:22:43.559 --> 00:22:44.679
<v Speaker 0>I'm gonna assume it's gonna tell me to

00:22:44.679 --> 00:22:46.664
<v Speaker 0>put forward again. Or not. It's telling me

00:22:46.664 --> 00:22:48.904
<v Speaker 0>to oh, we've got a checker. Alright. Let's

00:22:48.904 --> 00:22:49.784
<v Speaker 0>do that. Even

00:22:50.585 --> 00:22:53.065
<v Speaker 1>more checks. So you've checked control plane. Now

00:22:53.065 --> 00:22:54.585
<v Speaker 1>let's check the data plane and make sure

00:22:54.585 --> 00:22:56.825
<v Speaker 1>that that is phoning home and everything's working

00:22:56.825 --> 00:22:58.745
<v Speaker 1>there, which it is now. So that's great.

00:22:59.470 --> 00:23:02.509
<v Speaker 0>So these check commands, right, they obviously give

00:23:02.509 --> 00:23:04.509
<v Speaker 0>me a little bit of confidence and that

00:23:04.509 --> 00:23:06.509
<v Speaker 0>the changes I'm doing are are doing what

00:23:06.509 --> 00:23:08.669
<v Speaker 0>I'm doing. Do these have other applications and

00:23:08.669 --> 00:23:10.750
<v Speaker 0>production workloads to check that things are going

00:23:10.750 --> 00:23:12.830
<v Speaker 0>on or is it really just for this

00:23:12.195 --> 00:23:13.315
<v Speaker 0>this walk through?

00:23:13.715 --> 00:23:15.154
<v Speaker 1>That's a really great question.

00:23:15.875 --> 00:23:17.955
<v Speaker 1>They were kind of originally

00:23:17.955 --> 00:23:18.835
<v Speaker 1>made

00:23:18.835 --> 00:23:20.514
<v Speaker 1>for interactive,

00:23:20.514 --> 00:23:22.514
<v Speaker 1>someone setting the cluster up and working around

00:23:22.514 --> 00:23:23.075
<v Speaker 1>and doing it.

00:23:25.280 --> 00:23:27.039
<v Speaker 1>But quite a few folks,

00:23:28.480 --> 00:23:29.519
<v Speaker 1>I'm sorry.

00:23:31.360 --> 00:23:33.440
<v Speaker 1>Let me fiddle with this for a second

00:23:33.440 --> 00:23:34.080
<v Speaker 1>here.

00:23:36.320 --> 00:23:37.919
<v Speaker 1>Quite a few folks

00:23:39.865 --> 00:23:42.265
<v Speaker 1>use it in production as health checks as

00:23:42.265 --> 00:23:44.825
<v Speaker 1>well. And so it can be used for

00:23:44.825 --> 00:23:45.384
<v Speaker 1>both.

00:23:46.745 --> 00:23:48.345
<v Speaker 0>Yeah. That was kind of my my my

00:23:48.345 --> 00:23:49.545
<v Speaker 0>vibe is I ran that. It's like it

00:23:49.545 --> 00:23:51.145
<v Speaker 0>would obviously be quite nice. But, I mean,

00:23:51.145 --> 00:23:52.585
<v Speaker 0>these check things obviously have a lot of

00:23:52.585 --> 00:23:54.680
<v Speaker 0>logic to understand that Linkerd is healthy. So

00:23:54.680 --> 00:23:56.440
<v Speaker 0>maybe I could continuously run them every half

00:23:56.440 --> 00:23:58.440
<v Speaker 0>an hour and hour, make sure my my

00:23:58.440 --> 00:24:01.240
<v Speaker 0>cluster is is Linkerd happy to a certain

00:24:01.240 --> 00:24:03.480
<v Speaker 0>point. We actually have an open issue at

00:24:03.480 --> 00:24:05.240
<v Speaker 1>the moment to add a JSON

00:24:05.720 --> 00:24:07.559
<v Speaker 1>endpoint on the control plane to let you

00:24:07.559 --> 00:24:09.605
<v Speaker 1>kind of automate this whole part of the

00:24:09.605 --> 00:24:11.924
<v Speaker 1>process, which I'm pretty excited to see land.

00:24:12.245 --> 00:24:13.284
<v Speaker 0>Okay. Cool.

00:24:15.284 --> 00:24:18.804
<v Speaker 0>So what let what does this Linkerd stat

00:24:18.804 --> 00:24:20.164
<v Speaker 0>deploy command?

00:24:20.965 --> 00:24:22.644
<v Speaker 1>Run it, let's see what gets output.

00:24:24.650 --> 00:24:28.169
<v Speaker 1>So that is the golden signals,

00:24:28.490 --> 00:24:29.450
<v Speaker 1>of

00:24:29.530 --> 00:24:32.570
<v Speaker 1>your deployments. The Google SRA handbook says that

00:24:32.570 --> 00:24:35.049
<v Speaker 1>a golden signal is kinda the most important

00:24:35.049 --> 00:24:36.809
<v Speaker 1>thing to pay attention to. If you've gotta

00:24:36.809 --> 00:24:39.289
<v Speaker 1>monitor something, you should monitor the golden signals.

00:24:39.289 --> 00:24:41.684
<v Speaker 1>And those are success rate,

00:24:42.085 --> 00:24:42.965
<v Speaker 1>RPS,

00:24:42.965 --> 00:24:43.924
<v Speaker 1>and latency.

00:24:44.165 --> 00:24:47.205
<v Speaker 1>In particular, p 99 is kind of the

00:24:47.205 --> 00:24:50.405
<v Speaker 1>latency that you wanna measure. P 99 means

00:24:50.885 --> 00:24:54.085
<v Speaker 1>the ninety ninth percentile of latency. So if

00:24:54.085 --> 00:24:55.125
<v Speaker 1>you take the average,

00:24:56.060 --> 00:24:57.419
<v Speaker 1>which is p 50,

00:24:57.660 --> 00:25:00.220
<v Speaker 1>what you're gonna do is end up missing

00:25:00.220 --> 00:25:01.980
<v Speaker 1>quite a bit of latency. Your p 99

00:25:01.980 --> 00:25:04.460
<v Speaker 1>is gonna be pretty sensitive, and so users

00:25:04.460 --> 00:25:05.580
<v Speaker 1>run into that,

00:25:06.220 --> 00:25:08.620
<v Speaker 1>you know, ninety ninth percentile slow kind of

00:25:08.620 --> 00:25:10.220
<v Speaker 1>latency. You'll know about it immediately.

00:25:10.865 --> 00:25:11.505
<v Speaker 1>But

00:25:11.985 --> 00:25:13.665
<v Speaker 1>as you can see here,

00:25:14.065 --> 00:25:16.865
<v Speaker 1>we've actually got success rate issues because of

00:25:16.865 --> 00:25:18.304
<v Speaker 1>our donut emoji.

00:25:19.025 --> 00:25:21.265
<v Speaker 0>Yeah. I see that. The 83% success on

00:25:21.265 --> 00:25:22.945
<v Speaker 0>voting and the 91 on the web. So

00:25:22.945 --> 00:25:25.080
<v Speaker 0>this is our error. Now And without

00:25:25.720 --> 00:25:26.519
<v Speaker 1>Linkerd,

00:25:26.840 --> 00:25:29.080
<v Speaker 1>you would kind of be up to a

00:25:29.080 --> 00:25:30.840
<v Speaker 1>user giving you a phone call and saying,

00:25:30.840 --> 00:25:33.240
<v Speaker 1>hey. This isn't working. What's going on?

00:25:33.640 --> 00:25:35.720
<v Speaker 1>And because it's a user, they probably wouldn't

00:25:35.720 --> 00:25:37.320
<v Speaker 1>tell you that it was the donut emoji

00:25:37.320 --> 00:25:39.445
<v Speaker 1>or that the web was the app was

00:25:39.445 --> 00:25:41.684
<v Speaker 1>broken or, you know, all kinds of stuff.

00:25:41.765 --> 00:25:44.485
<v Speaker 1>And this gives you a pretty easy, again,

00:25:44.485 --> 00:25:46.405
<v Speaker 1>way to go look and immediately figure out

00:25:46.405 --> 00:25:47.524
<v Speaker 1>what's going on there.

00:25:48.565 --> 00:25:49.205
<v Speaker 0>Okay.

00:25:50.164 --> 00:25:52.580
<v Speaker 0>That that's nice. So I'm gonna throw something

00:25:52.580 --> 00:25:53.780
<v Speaker 0>out there. Don't know if it's gonna come

00:25:53.780 --> 00:25:55.540
<v Speaker 0>up another part and we should just I'm

00:25:55.540 --> 00:25:57.780
<v Speaker 0>just being impatient. But right now I'm thinking

00:25:57.780 --> 00:25:59.860
<v Speaker 0>the load generator that the quick start is

00:25:59.860 --> 00:26:01.860
<v Speaker 0>deployed here. Can can we wrap that up?

00:26:02.020 --> 00:26:02.900
<v Speaker 0>Does that come later?

00:26:03.554 --> 00:26:06.355
<v Speaker 1>What do you mean? Like, it's generating load,

00:26:06.355 --> 00:26:07.794
<v Speaker 0>but not a lot. Can we, like, have

00:26:07.794 --> 00:26:09.074
<v Speaker 0>it Oh, sure.

00:26:09.475 --> 00:26:11.634
<v Speaker 1>I mean, we could scale that deployment up.

00:26:11.875 --> 00:26:13.634
<v Speaker 0>Alright. Okay. Should we do that now, or

00:26:13.634 --> 00:26:15.235
<v Speaker 0>should we will we stick to the the

00:26:15.235 --> 00:26:16.914
<v Speaker 0>script that that We can do it now

00:26:16.914 --> 00:26:18.115
<v Speaker 1>if you wanna take a look at that.

00:26:18.420 --> 00:26:20.260
<v Speaker 1>I don't see any reason why not. I'm

00:26:20.260 --> 00:26:22.660
<v Speaker 0>just curious. So if I do all

00:26:22.660 --> 00:26:23.540
<v Speaker 0>pods

00:26:24.020 --> 00:26:25.460
<v Speaker 1>It's in VoteBot.

00:26:27.540 --> 00:26:29.300
<v Speaker 1>So if you just do a, you know,

00:26:29.300 --> 00:26:32.820
<v Speaker 1>scale replicas on VoteBot to Okay. Okay.

00:26:32.820 --> 00:26:33.700
<v Speaker 0>Emojiboto.

00:26:37.105 --> 00:26:38.704
<v Speaker 0>I just added a deployment.

00:26:38.945 --> 00:26:40.625
<v Speaker 0>I can never remember the scale command. What

00:26:40.625 --> 00:26:41.744
<v Speaker 0>is it? Scale

00:26:42.304 --> 00:26:43.264
<v Speaker 0>emoji.

00:26:43.664 --> 00:26:44.464
<v Speaker 1>Deploy

00:26:44.544 --> 00:26:45.584
<v Speaker 1>emoji

00:26:45.585 --> 00:26:47.664
<v Speaker 1>or deploy vote dash bot.

00:26:49.390 --> 00:26:50.190
<v Speaker 0>Vote

00:26:51.390 --> 00:26:54.270
<v Speaker 0>replica SQL. A dash dash replicas.

00:26:54.990 --> 00:26:56.270
<v Speaker 1>Yeah. Yeah.

00:26:56.830 --> 00:26:58.430
<v Speaker 0>Like I said, I never remember the skill

00:26:58.430 --> 00:26:59.790
<v Speaker 0>command. I always end up just gonna end

00:26:59.790 --> 00:27:02.355
<v Speaker 0>modifying the spec. But, alright. Let's see. Well,

00:27:02.355 --> 00:27:04.995
<v Speaker 0>have we got one just now? Yep. Yeah.

00:27:06.355 --> 00:27:08.995
<v Speaker 0>We've got one pod, two containers. Let's

00:27:10.995 --> 00:27:12.515
<v Speaker 0>how brave are we doing? Let's do 10.

00:27:15.840 --> 00:27:18.320
<v Speaker 0>And I'm a run emoji photo, get pods.

00:27:18.320 --> 00:27:19.119
<v Speaker 0>Let's see.

00:27:21.440 --> 00:27:23.519
<v Speaker 0>So have I run our

00:27:24.559 --> 00:27:25.440
<v Speaker 0>stat command?

00:27:28.415 --> 00:27:30.495
<v Speaker 1>So we'll see the RPS go up here,

00:27:30.495 --> 00:27:32.415
<v Speaker 1>but the stat command is based off of

00:27:32.415 --> 00:27:34.815
<v Speaker 1>Prometheus. And so there's about a sixty second

00:27:34.815 --> 00:27:36.095
<v Speaker 1>lag between

00:27:36.335 --> 00:27:38.095
<v Speaker 1>when you do something and when you actually

00:27:38.095 --> 00:27:39.535
<v Speaker 1>see it. If you were to do a

00:27:39.535 --> 00:27:41.215
<v Speaker 1>top here, you would see the

00:27:41.970 --> 00:27:43.809
<v Speaker 1>rate go up pretty much immediately.

00:27:45.090 --> 00:27:47.090
<v Speaker 0>What was that top Just do a top

00:27:47.330 --> 00:27:48.289
<v Speaker 1>deploy.

00:27:51.730 --> 00:27:53.970
<v Speaker 1>And so you can see here that there's

00:27:53.970 --> 00:27:54.929
<v Speaker 1>quite a few

00:27:55.250 --> 00:27:56.690
<v Speaker 1>requests coming in now.

00:27:58.105 --> 00:27:58.825
<v Speaker 0>Okay.

00:27:59.625 --> 00:28:01.144
<v Speaker 0>Well, I can be patient and wait for

00:28:01.144 --> 00:28:02.744
<v Speaker 0>our stack command to update.

00:28:02.904 --> 00:28:04.985
<v Speaker 0>So But there we go. We've got it

00:28:04.985 --> 00:28:07.464
<v Speaker 1>up to almost 20 r p s now.

00:28:07.625 --> 00:28:09.865
<v Speaker 0>Alright. Remind me before we finish the scale

00:28:09.865 --> 00:28:11.385
<v Speaker 0>up to like a thousand or something just

00:28:11.385 --> 00:28:11.544
<v Speaker 0>for

00:28:13.789 --> 00:28:14.830
<v Speaker 1>Nothing good.

00:28:15.070 --> 00:28:15.710
<v Speaker 0>Yeah.

00:28:16.190 --> 00:28:19.149
<v Speaker 0>Okay. So we ran the top deploy

00:28:20.030 --> 00:28:23.070
<v Speaker 0>and then we're going to run a Linkerd

00:28:23.070 --> 00:28:24.190
<v Speaker 0>tap.

00:28:24.510 --> 00:28:26.429
<v Speaker 0>Mhmm. Let's

00:28:26.054 --> 00:28:27.494
<v Speaker 0>wrong copy.

00:28:27.894 --> 00:28:29.335
<v Speaker 1>So TAP

00:28:29.335 --> 00:28:30.374
<v Speaker 1>is like

00:28:30.934 --> 00:28:31.894
<v Speaker 1>Wireshark

00:28:31.894 --> 00:28:34.615
<v Speaker 1>for your cluster. So this is the live

00:28:34.615 --> 00:28:37.014
<v Speaker 1>requests as they're going through the service mesh.

00:28:38.200 --> 00:28:39.160
<v Speaker 1>And the

00:28:39.320 --> 00:28:41.240
<v Speaker 1>big use there would be that you can

00:28:41.240 --> 00:28:43.080
<v Speaker 1>actually get all of the details that you

00:28:43.080 --> 00:28:45.240
<v Speaker 1>wanted on what's failing pretty quickly.

00:28:46.440 --> 00:28:47.000
<v Speaker 1>Tap,

00:28:47.720 --> 00:28:49.800
<v Speaker 1>will also do full headers, and so you

00:28:49.800 --> 00:28:52.025
<v Speaker 1>could go and look into, you know, the

00:28:52.025 --> 00:28:53.865
<v Speaker 1>actual headers that are going through for these

00:28:53.865 --> 00:28:56.264
<v Speaker 1>requests, go do even more debugging.

00:28:56.985 --> 00:28:59.465
<v Speaker 0>Ah, okay. Cool. So we can actually see

00:28:59.465 --> 00:29:02.105
<v Speaker 0>every single thing that's happening on the Mhmm.

00:29:02.184 --> 00:29:04.345
<v Speaker 0>The network. Nice. Okay. Yep.

00:29:04.664 --> 00:29:06.670
<v Speaker 0>And it's also available in the dashboard. So

00:29:06.830 --> 00:29:07.630
<v Speaker 1>Exactly.

00:29:10.270 --> 00:29:12.510
<v Speaker 0>Yeah. We can probably pop open the dashboard

00:29:12.510 --> 00:29:15.950
<v Speaker 0>in Grafana once we've wonderful. We've done it.

00:29:16.110 --> 00:29:18.350
<v Speaker 0>Yep. That's it. That's pretty much it. So

00:29:18.350 --> 00:29:20.430
<v Speaker 0>how do we identify the donut

00:29:21.245 --> 00:29:24.204
<v Speaker 0>problem? So you could do a

00:29:24.205 --> 00:29:27.565
<v Speaker 1>tap and just grep for a

00:29:28.365 --> 00:29:30.125
<v Speaker 1>status that's, like, four zero four.

00:29:36.220 --> 00:29:37.580
<v Speaker 1>That should

00:29:37.820 --> 00:29:40.140
<v Speaker 1>might be a 500.

00:29:40.140 --> 00:29:41.899
<v Speaker 1>Try a 500.

00:29:43.580 --> 00:29:45.260
<v Speaker 0>I was wondering. Do we also have no.

00:29:45.260 --> 00:29:46.620
<v Speaker 0>Was gonna say There it goes. Have to

00:29:46.620 --> 00:29:47.980
<v Speaker 0>wait for a donut vote, but we have

00:29:47.980 --> 00:29:50.380
<v Speaker 0>five hundreds coming through. Okay. Yep. And so,

00:29:50.380 --> 00:29:52.195
<v Speaker 1>you know, that pretty much tells you right

00:29:52.195 --> 00:29:53.154
<v Speaker 1>there that

00:29:53.394 --> 00:29:55.394
<v Speaker 1>those requests are failing

00:29:55.715 --> 00:29:58.355
<v Speaker 1>both on the outside and the inside on

00:29:58.355 --> 00:29:59.234
<v Speaker 1>the proxy.

00:29:59.475 --> 00:30:01.554
<v Speaker 1>And you could then look at the logs

00:30:01.554 --> 00:30:03.794
<v Speaker 1>here, which has the paths, and figure out

00:30:04.274 --> 00:30:05.154
<v Speaker 1>what's happening there.

00:30:06.600 --> 00:30:07.880
<v Speaker 0>Alright. Nice.

00:30:09.240 --> 00:30:12.440
<v Speaker 0>So that's our demo application finished.

00:30:12.760 --> 00:30:14.919
<v Speaker 0>Yep. So can we

00:30:15.720 --> 00:30:18.440
<v Speaker 0>use this demo application to explore some of

00:30:18.440 --> 00:30:20.600
<v Speaker 0>the other features that Linkerd brings to the

00:30:20.600 --> 00:30:20.840
<v Speaker 0>table?

00:30:22.145 --> 00:30:23.184
<v Speaker 1>We

00:30:23.505 --> 00:30:25.265
<v Speaker 1>might need to install different

00:30:25.424 --> 00:30:27.424
<v Speaker 1>depending on which way way we wanna go.

00:30:27.905 --> 00:30:29.424
<v Speaker 1>We can go look at,

00:30:33.184 --> 00:30:34.625
<v Speaker 1>let's

00:30:34.220 --> 00:30:35.500
<v Speaker 1>go through the

00:30:36.140 --> 00:30:36.940
<v Speaker 1>smorgasbord,

00:30:36.940 --> 00:30:38.380
<v Speaker 1>and I'll let you pick pick your own

00:30:38.380 --> 00:30:39.419
<v Speaker 1>adventure here.

00:30:41.580 --> 00:30:42.700
<v Speaker 1>We could do,

00:30:43.580 --> 00:30:45.500
<v Speaker 1>take a look at tracing, which is kind

00:30:45.500 --> 00:30:48.300
<v Speaker 1>of interesting. We could go look at

00:30:49.315 --> 00:30:51.635
<v Speaker 1>retries and timeouts. Maybe the easiest thing to

00:30:51.635 --> 00:30:53.315
<v Speaker 1>do would be a look at TLS

00:30:53.315 --> 00:30:55.475
<v Speaker 1>and how that's been automatically set up. I

00:30:55.475 --> 00:30:56.755
<v Speaker 1>don't think we'll need a new demo app

00:30:56.755 --> 00:30:57.395
<v Speaker 1>for that.

00:30:59.475 --> 00:31:02.115
<v Speaker 1>Some other fun stuff to look at

00:31:02.995 --> 00:31:04.435
<v Speaker 1>would be

00:31:06.600 --> 00:31:08.120
<v Speaker 1>retries and timeouts,

00:31:08.520 --> 00:31:10.920
<v Speaker 1>or perhaps the most interesting one of all

00:31:10.920 --> 00:31:13.000
<v Speaker 1>would be chatting a little bit about canary

00:31:13.000 --> 00:31:15.800
<v Speaker 1>rollouts, why they're important, and how Linkerd helps

00:31:15.800 --> 00:31:16.280
<v Speaker 1>you out there.

00:31:17.265 --> 00:31:18.945
<v Speaker 1>But those are all kinda good.

00:31:19.505 --> 00:31:21.905
<v Speaker 0>Yeah. There's there's pretty much we could just

00:31:21.905 --> 00:31:23.265
<v Speaker 0>go through every feature if we had the

00:31:23.265 --> 00:31:25.825
<v Speaker 0>time. But let's let's cherry pick them. Why

00:31:25.825 --> 00:31:27.905
<v Speaker 0>don't we because I think we've got you

00:31:27.905 --> 00:31:30.130
<v Speaker 0>know, we have access to this Grafana and

00:31:30.130 --> 00:31:31.730
<v Speaker 0>a dashboard setup and I'd like us to

00:31:31.730 --> 00:31:32.930
<v Speaker 0>be able to see how we can use

00:31:32.930 --> 00:31:35.250
<v Speaker 0>that. So what if we start with something

00:31:35.250 --> 00:31:38.450
<v Speaker 0>hopefully easy, I'm making some assumptions here. But

00:31:38.450 --> 00:31:41.090
<v Speaker 0>what if we just do fall injection and

00:31:41.355 --> 00:31:43.355
<v Speaker 0>start making things break and then see what

00:31:43.355 --> 00:31:45.994
<v Speaker 0>happens in our dashboard for you? Sure.

00:31:46.315 --> 00:31:47.034
<v Speaker 0>Okay.

00:31:48.395 --> 00:31:50.715
<v Speaker 0>I don't know what happened there. Okay. So

00:31:51.035 --> 00:31:52.715
<v Speaker 0>I should probably click on the feature. Is

00:31:52.715 --> 00:31:53.835
<v Speaker 0>that gonna take me to the docs?

00:31:55.150 --> 00:31:57.230
<v Speaker 1>Yeah. We and we've got a tutorial for

00:31:57.230 --> 00:31:57.710
<v Speaker 1>that.

00:31:58.430 --> 00:31:59.630
<v Speaker 1>Alright. So

00:32:00.350 --> 00:32:02.510
<v Speaker 1>But this is a different demo application that

00:32:02.510 --> 00:32:04.110
<v Speaker 1>we'll need to install.

00:32:04.350 --> 00:32:06.030
<v Speaker 0>That's okay. We've got a we can do

00:32:06.030 --> 00:32:07.634
<v Speaker 0>that. So this is just gonna create a

00:32:07.634 --> 00:32:10.115
<v Speaker 0>Bix app namespace and deploy Bix app thing.

00:32:10.115 --> 00:32:11.634
<v Speaker 0>So let's just let that go.

00:32:13.075 --> 00:32:15.715
<v Speaker 1>And if you scroll up, actually, you'll be

00:32:15.715 --> 00:32:16.835
<v Speaker 1>able to see a picture of what the

00:32:16.835 --> 00:32:19.390
<v Speaker 1>architecture looks like a little bit more. So

00:32:19.390 --> 00:32:21.630
<v Speaker 1>there's the architecture for this. We've got a

00:32:21.630 --> 00:32:22.750
<v Speaker 1>traffic generator.

00:32:22.830 --> 00:32:24.830
<v Speaker 1>It's a web app front end. There's a

00:32:24.830 --> 00:32:26.750
<v Speaker 1>author service and a book service. And so

00:32:26.750 --> 00:32:27.549
<v Speaker 1>we'll be

00:32:28.030 --> 00:32:29.470
<v Speaker 1>injecting

00:32:32.375 --> 00:32:35.014
<v Speaker 1>we will be injecting errors

00:32:35.095 --> 00:32:36.054
<v Speaker 1>into

00:32:39.095 --> 00:32:39.894
<v Speaker 1>the,

00:32:40.375 --> 00:32:42.695
<v Speaker 1>Books app calls themselves.

00:32:43.575 --> 00:32:45.815
<v Speaker 1>This is kind of an interesting tutorial because

00:32:45.815 --> 00:32:48.549
<v Speaker 1>it uses a primitive called traffic split,

00:32:48.710 --> 00:32:50.789
<v Speaker 1>which is also how we do the canary

00:32:50.789 --> 00:32:51.590
<v Speaker 1>rollouts.

00:32:52.230 --> 00:32:53.909
<v Speaker 1>But a traffic split basically

00:32:54.309 --> 00:32:57.190
<v Speaker 1>allows you to weight traffic. And so

00:32:57.510 --> 00:32:59.510
<v Speaker 1>the traffic coming out of

00:33:00.695 --> 00:33:02.934
<v Speaker 1>any service to books

00:33:03.175 --> 00:33:05.335
<v Speaker 1>will get split. 90%

00:33:05.335 --> 00:33:08.135
<v Speaker 1>will go directly to books, and 10% will

00:33:08.135 --> 00:33:10.135
<v Speaker 1>get sent to this fault injector that we're

00:33:10.135 --> 00:33:11.015
<v Speaker 1>gonna spin up.

00:33:12.535 --> 00:33:14.880
<v Speaker 0>Okay. So we're kinda we're taking off a

00:33:14.880 --> 00:33:17.040
<v Speaker 0>few of the features then with this tutorial,

00:33:17.040 --> 00:33:18.000
<v Speaker 0>which is Yep.

00:33:18.560 --> 00:33:19.200
<v Speaker 0>Good.

00:33:19.760 --> 00:33:22.240
<v Speaker 0>So we can probably skip the stats. Right?

00:33:22.240 --> 00:33:23.600
<v Speaker 0>Or should we just take a look at

00:33:23.600 --> 00:33:26.000
<v Speaker 0>them? So you're gonna wanna do that command

00:33:26.000 --> 00:33:26.560
<v Speaker 1>just above.

00:33:28.184 --> 00:33:30.344
<v Speaker 1>The Books app also comes with

00:33:31.705 --> 00:33:33.945
<v Speaker 1>a failure in it by default, and so

00:33:33.945 --> 00:33:35.625
<v Speaker 1>let's patch it and make it so that

00:33:35.625 --> 00:33:37.225
<v Speaker 1>it's not failing anymore so we can see

00:33:37.225 --> 00:33:39.225
<v Speaker 1>what the fault injection actually is doing.

00:33:40.810 --> 00:33:43.130
<v Speaker 0>Right. Okay. So we're faxing it so that

00:33:43.130 --> 00:33:45.290
<v Speaker 0>we can break it again. Right? Exactly.

00:33:46.410 --> 00:33:47.290
<v Speaker 0>Nice.

00:33:47.450 --> 00:33:48.890
<v Speaker 0>So what we should see when we are

00:33:48.890 --> 00:33:50.170
<v Speaker 0>on the stat here, this has just given

00:33:50.170 --> 00:33:52.250
<v Speaker 0>us just a little bit of confidence that

00:33:52.250 --> 00:33:53.850
<v Speaker 0>we're gonna get that success rate back up

00:33:53.850 --> 00:33:54.330
<v Speaker 0>to

00:33:55.035 --> 00:33:56.235
<v Speaker 0>to a %?

00:33:56.715 --> 00:33:57.435
<v Speaker 1>Eventually.

00:33:57.595 --> 00:34:00.395
<v Speaker 0>Eventually. Again, status on Prometheus and so it'll

00:34:00.395 --> 00:34:01.995
<v Speaker 1>take a while for that all to fall

00:34:01.995 --> 00:34:02.475
<v Speaker 1>off.

00:34:03.595 --> 00:34:05.675
<v Speaker 0>Okay. Well, books and web app are going

00:34:05.675 --> 00:34:08.074
<v Speaker 0>down, but offers went up. So maybe we

00:34:08.074 --> 00:34:09.915
<v Speaker 0>just need to get that a little bit

00:34:09.330 --> 00:34:10.210
<v Speaker 0>of time.

00:34:10.610 --> 00:34:11.250
<v Speaker 0>Yep.

00:34:11.570 --> 00:34:13.250
<v Speaker 0>Alright. Let's see what we're supposed to do

00:34:13.250 --> 00:34:16.450
<v Speaker 0>next. So we wanna create a faulty

00:34:17.010 --> 00:34:19.570
<v Speaker 0>back end. So to do this,

00:34:21.010 --> 00:34:21.890
<v Speaker 0>we're

00:34:21.890 --> 00:34:25.525
<v Speaker 0>creating an NGINX config that returns five hundreds

00:34:25.525 --> 00:34:26.165
<v Speaker 0>and

00:34:26.725 --> 00:34:27.685
<v Speaker 0>deploying it.

00:34:27.925 --> 00:34:29.845
<v Speaker 0>Yep. Right. Got it.

00:34:31.525 --> 00:34:34.085
<v Speaker 0>So let's get this copy. Is very complicated.

00:34:37.320 --> 00:34:39.160
<v Speaker 1>And

00:34:40.200 --> 00:34:41.960
<v Speaker 1>this is just going to always return a

00:34:41.960 --> 00:34:44.280
<v Speaker 1>500 for any request that comes through it.

00:34:46.840 --> 00:34:49.000
<v Speaker 0>Yeah. The so the nginx config here, I

00:34:49.000 --> 00:34:51.080
<v Speaker 0>mean, it's just saying always return a 500.

00:34:51.534 --> 00:34:53.215
<v Speaker 0>Right. And we just we're just that's deployment

00:34:53.215 --> 00:34:54.415
<v Speaker 0>of services just

00:34:54.655 --> 00:34:56.574
<v Speaker 0>to deploy that NGINX config. Right? It's mean

00:34:56.574 --> 00:34:59.055
<v Speaker 0>there's nothing Right. Particularly interesting there. But you

00:34:59.055 --> 00:35:00.735
<v Speaker 1>could imagine making this

00:35:01.055 --> 00:35:03.215
<v Speaker 1>NGINX config so that it returns

00:35:03.455 --> 00:35:04.255
<v Speaker 1>malformed

00:35:04.569 --> 00:35:08.170
<v Speaker 1>responses or error codes other than 500 or,

00:35:08.170 --> 00:35:09.930
<v Speaker 1>you know, randomly returns

00:35:09.930 --> 00:35:10.730
<v Speaker 1>responses.

00:35:10.730 --> 00:35:14.170
<v Speaker 1>And so the testing is pretty extensive that

00:35:14.170 --> 00:35:15.450
<v Speaker 1>you could do with this kind of a

00:35:15.450 --> 00:35:16.090
<v Speaker 1>pattern.

00:35:16.490 --> 00:35:18.970
<v Speaker 1>It composes really well. Ah, okay.

00:35:21.224 --> 00:35:22.744
<v Speaker 0>This traffic split

00:35:22.744 --> 00:35:26.905
<v Speaker 0>is the service mesh interface component Mhmm. That

00:35:26.905 --> 00:35:29.545
<v Speaker 0>allows us to say whenever someone requests

00:35:29.704 --> 00:35:31.944
<v Speaker 0>the book service, we're going to Mhmm. Gather

00:35:32.910 --> 00:35:35.950
<v Speaker 0>90% of the request for the working 110%

00:35:35.950 --> 00:35:37.390
<v Speaker 0>through the error injector.

00:35:37.550 --> 00:35:38.190
<v Speaker 1>Yep.

00:35:39.069 --> 00:35:41.550
<v Speaker 0>I can read you all. Okay.

00:35:42.430 --> 00:35:44.589
<v Speaker 0>So that that is my spec just means

00:35:44.589 --> 00:35:46.750
<v Speaker 0>that it should work on any service measure.

00:35:46.750 --> 00:35:48.750
<v Speaker 0>This is not Linkerd specific at this moment

00:35:48.750 --> 00:35:48.545
<v Speaker 0>in time. Is is that right? At this

00:35:48.545 --> 00:35:50.385
<v Speaker 0>moment in time. Is is that right? As

00:35:51.345 --> 00:35:54.625
<v Speaker 1>long as your service mesh implements this CRD,

00:35:54.625 --> 00:35:55.105
<v Speaker 1>yes.

00:35:55.985 --> 00:35:56.625
<v Speaker 1>And

00:35:56.785 --> 00:35:57.825
<v Speaker 1>let's see.

00:35:58.865 --> 00:35:59.745
<v Speaker 1>Console,

00:36:00.225 --> 00:36:01.105
<v Speaker 1>Istio,

00:36:01.185 --> 00:36:02.705
<v Speaker 1>and traffic

00:36:03.460 --> 00:36:05.780
<v Speaker 1>all implement that spec

00:36:06.260 --> 00:36:07.620
<v Speaker 1>along with Linkerd.

00:36:08.100 --> 00:36:10.580
<v Speaker 1>Though sometimes it requires components. Like with Istio,

00:36:10.580 --> 00:36:12.660
<v Speaker 1>you would need to install a extra component.

00:36:12.980 --> 00:36:13.940
<v Speaker 1>Oh, and

00:36:14.900 --> 00:36:17.700
<v Speaker 1>the open service mesh from Microsoft also implements

00:36:17.700 --> 00:36:18.420
<v Speaker 1>traffic splits.

00:36:21.194 --> 00:36:22.555
<v Speaker 0>Okay. So I'm just

00:36:23.434 --> 00:36:25.355
<v Speaker 0>I I think we're being too nice here.

00:36:25.355 --> 00:36:25.915
<v Speaker 0>So

00:36:27.515 --> 00:36:30.474
<v Speaker 0>let's make things properly feel. So we'll just

00:36:30.474 --> 00:36:31.115
<v Speaker 0>bump that up.

00:36:32.660 --> 00:36:33.380
<v Speaker 0>Okay.

00:36:34.340 --> 00:36:36.020
<v Speaker 0>So that means

00:36:36.100 --> 00:36:38.100
<v Speaker 0>let me go back to this instead of

00:36:38.100 --> 00:36:39.380
<v Speaker 0>guessing all the time.

00:36:42.100 --> 00:36:43.940
<v Speaker 0>Okay. I'm not what what does this do?

00:36:43.940 --> 00:36:45.780
<v Speaker 0>I'm not sure I'm understanding that from first

00:36:45.780 --> 00:36:46.340
<v Speaker 0>sight.

00:36:47.220 --> 00:36:48.180
<v Speaker 1>So

00:36:49.164 --> 00:36:51.405
<v Speaker 1>along with being able to look at the

00:36:51.724 --> 00:36:54.605
<v Speaker 1>metrics on a per service basis, we also

00:36:54.605 --> 00:36:55.964
<v Speaker 1>allow you to look on them look at

00:36:55.964 --> 00:36:58.204
<v Speaker 1>them on a per route basis. So if

00:36:58.204 --> 00:37:00.125
<v Speaker 1>you tell us what routes you have, we

00:37:00.125 --> 00:37:01.964
<v Speaker 1>will collect metrics on those. This is just

00:37:01.964 --> 00:37:04.030
<v Speaker 1>kind of showing off that you can do

00:37:04.030 --> 00:37:06.270
<v Speaker 1>that. We haven't told

00:37:07.630 --> 00:37:08.430
<v Speaker 1>the

00:37:09.950 --> 00:37:12.109
<v Speaker 1>control plane about what those metrics what those

00:37:12.109 --> 00:37:14.350
<v Speaker 1>routes are, so we won't see a ton.

00:37:14.670 --> 00:37:17.150
<v Speaker 1>But this will give us the, two. So

00:37:17.705 --> 00:37:19.465
<v Speaker 1>what this is saying on some level is

00:37:19.465 --> 00:37:20.905
<v Speaker 1>the web app deployment

00:37:20.905 --> 00:37:23.865
<v Speaker 1>when it sends requests to the books service.

00:37:23.865 --> 00:37:25.545
<v Speaker 1>Let's take a look at those metrics.

00:37:26.105 --> 00:37:27.145
<v Speaker 0>Ah, okay.

00:37:28.425 --> 00:37:31.305
<v Speaker 0>So the Linkerd CLI is pretty much providing

00:37:31.110 --> 00:37:33.670
<v Speaker 0>a lot of really cool visibility features here

00:37:33.670 --> 00:37:35.110
<v Speaker 0>into our applications.

00:37:35.750 --> 00:37:37.350
<v Speaker 1>This one might be

00:37:37.910 --> 00:37:39.190
<v Speaker 1>interesting.

00:37:39.910 --> 00:37:42.790
<v Speaker 1>Why don't we do a stat

00:37:45.825 --> 00:37:47.185
<v Speaker 1>on deploy

00:37:47.825 --> 00:37:50.225
<v Speaker 1>web app? Or but that actually shows it

00:37:50.225 --> 00:37:52.545
<v Speaker 1>right there. We can see that the books

00:37:52.545 --> 00:37:56.065
<v Speaker 1>service has got a 20 50% success rate,

00:37:56.065 --> 00:37:58.625
<v Speaker 1>and the web app has a 2025%

00:37:58.625 --> 00:38:00.920
<v Speaker 1>success rate. So that actually gives us pretty

00:38:00.920 --> 00:38:02.119
<v Speaker 1>good details right there.

00:38:02.680 --> 00:38:05.240
<v Speaker 0>So why did the roots command not

00:38:05.240 --> 00:38:06.760
<v Speaker 0>give us anything there?

00:38:07.880 --> 00:38:10.119
<v Speaker 1>I'm I would need to go dig into

00:38:10.119 --> 00:38:11.799
<v Speaker 1>it. We're on the edge, and I'm wondering

00:38:11.799 --> 00:38:13.960
<v Speaker 1>if there's a unique configuration

00:38:13.960 --> 00:38:15.480
<v Speaker 1>issue that we need to look into there.

00:38:18.415 --> 00:38:20.575
<v Speaker 0>Okay. I wonder if I just set the

00:38:20.575 --> 00:38:22.815
<v Speaker 0>error rate too higher if I'm I'm messing

00:38:22.815 --> 00:38:24.655
<v Speaker 0>with it, but we'll move on.

00:38:25.455 --> 00:38:26.015
<v Speaker 0>So

00:38:26.655 --> 00:38:28.494
<v Speaker 0>yeah. Okay. Let me run that stat again.

00:38:30.700 --> 00:38:31.980
<v Speaker 0>Okay. So yeah. So we can see the

00:38:31.980 --> 00:38:34.620
<v Speaker 0>50% give or take error rate then within

00:38:34.620 --> 00:38:37.020
<v Speaker 0>the booked service. Mhmm. Excellent. Okay.

00:38:39.980 --> 00:38:40.860
<v Speaker 0>I mean,

00:38:41.180 --> 00:38:43.340
<v Speaker 0>so that was it. That that fault injection

00:38:43.500 --> 00:38:44.220
<v Speaker 0>this this

00:38:44.835 --> 00:38:46.035
<v Speaker 0>traffic split

00:38:46.195 --> 00:38:47.635
<v Speaker 0>was our fault injection.

00:38:48.115 --> 00:38:49.635
<v Speaker 0>Mhmm. So

00:38:49.635 --> 00:38:52.755
<v Speaker 0>the fault injection can be that's not necessarily

00:38:52.755 --> 00:38:56.035
<v Speaker 0>something specifically that Linkerd is providing like, you

00:38:56.035 --> 00:38:58.960
<v Speaker 0>know, to mock HTTP responses. It's something I

00:38:58.960 --> 00:39:01.039
<v Speaker 0>can just configure my own use case, my

00:39:01.039 --> 00:39:03.519
<v Speaker 0>own faults, and then split the traffic across

00:39:03.519 --> 00:39:05.599
<v Speaker 0>that. There's quite a lot more flexibility there

00:39:05.599 --> 00:39:06.400
<v Speaker 0>than

00:39:06.480 --> 00:39:08.240
<v Speaker 0>Linkerd is saying, oh, I'm gonna respond but

00:39:08.240 --> 00:39:11.335
<v Speaker 0>that that's 400 for x percentage. Right.

00:39:12.055 --> 00:39:12.935
<v Speaker 1>One

00:39:12.935 --> 00:39:15.335
<v Speaker 1>of the big themes for us as a

00:39:15.335 --> 00:39:17.255
<v Speaker 1>project is kind of doing composition,

00:39:17.495 --> 00:39:19.015
<v Speaker 1>giving you the primitives that you need to

00:39:19.015 --> 00:39:21.655
<v Speaker 1>go build higher level kind of concepts.

00:39:22.970 --> 00:39:25.450
<v Speaker 1>I can write a NGINX config to do

00:39:25.450 --> 00:39:28.010
<v Speaker 1>fault injection that does insane things,

00:39:28.569 --> 00:39:30.809
<v Speaker 1>and it's just some a bunch of functionality

00:39:30.809 --> 00:39:32.890
<v Speaker 1>we don't really ever want to implement in

00:39:32.890 --> 00:39:35.529
<v Speaker 1>Linkerd because it complicates and adds complexity and

00:39:35.529 --> 00:39:36.970
<v Speaker 1>makes it harder for everyone to use.

00:39:38.415 --> 00:39:39.055
<v Speaker 0>Okay.

00:39:40.255 --> 00:39:42.575
<v Speaker 0>With regards to this traffic split then,

00:39:42.815 --> 00:39:44.175
<v Speaker 0>this is also how you would do the

00:39:44.175 --> 00:39:45.775
<v Speaker 0>canary deploy, or is there something on top

00:39:45.775 --> 00:39:47.455
<v Speaker 0>of that that would be provided?

00:39:48.015 --> 00:39:48.655
<v Speaker 1>So

00:39:49.375 --> 00:39:52.020
<v Speaker 1>that's the primitive that we provide. There's a

00:39:52.020 --> 00:39:55.380
<v Speaker 1>CNCF project called Flagger that is absolutely fantastic

00:39:55.380 --> 00:39:57.380
<v Speaker 1>that then goes and does the orchestration of

00:39:57.380 --> 00:39:58.180
<v Speaker 1>the Canary,

00:39:58.500 --> 00:39:59.620
<v Speaker 1>rollout because

00:39:59.780 --> 00:40:02.180
<v Speaker 1>a Canary would wouldn't just split the traffic

00:40:02.180 --> 00:40:04.755
<v Speaker 1>ten ninety. It would split the traffic ten

00:40:04.755 --> 00:40:06.515
<v Speaker 1>ninety and then watch the

00:40:06.675 --> 00:40:09.315
<v Speaker 1>metrics until they make sure they're successful and

00:40:09.315 --> 00:40:12.275
<v Speaker 1>then slowly increase the traffic split until it's

00:40:12.275 --> 00:40:14.755
<v Speaker 1>a % on the new version.

00:40:16.210 --> 00:40:16.850
<v Speaker 0>Okay.

00:40:17.170 --> 00:40:19.330
<v Speaker 0>And I'm assuming the back ends list on

00:40:19.330 --> 00:40:20.530
<v Speaker 0>this traffic split,

00:40:20.770 --> 00:40:23.090
<v Speaker 0>right now we're doing two, but there's no

00:40:23.090 --> 00:40:26.450
<v Speaker 0>reason that it could be more? Mhmm. Okay.

00:40:26.610 --> 00:40:27.010
<v Speaker 0>Nice.

00:40:28.085 --> 00:40:29.845
<v Speaker 0>Okay. I can see a lot of different

00:40:29.845 --> 00:40:31.925
<v Speaker 0>use cases for that kind of feature then.

00:40:32.325 --> 00:40:35.045
<v Speaker 1>Yep. We use traffic split pretty heavily on

00:40:35.045 --> 00:40:36.965
<v Speaker 1>our multi cluster stuff as well.

00:40:38.085 --> 00:40:39.684
<v Speaker 0>Awesome. Hopefully, we have a little bit of

00:40:39.684 --> 00:40:40.805
<v Speaker 0>time to take a look at that.

00:40:42.180 --> 00:40:44.020
<v Speaker 0>Okay. So we're

00:40:44.020 --> 00:40:46.340
<v Speaker 0>got this amazing cloud native application.

00:40:46.660 --> 00:40:48.180
<v Speaker 0>We all got the ability to do a

00:40:48.180 --> 00:40:51.380
<v Speaker 0>canary deploys and traffic traffic splitting, traffic shaping,

00:40:51.380 --> 00:40:52.820
<v Speaker 0>whatever we wanna call that.

00:40:53.700 --> 00:40:55.859
<v Speaker 0>What about the retries and the timers then?

00:40:57.305 --> 00:40:58.744
<v Speaker 1>So we've got a

00:40:59.464 --> 00:41:00.984
<v Speaker 1>tutorial for that.

00:41:02.424 --> 00:41:03.865
<v Speaker 1>There should be a link at the top

00:41:03.865 --> 00:41:04.505
<v Speaker 1>there

00:41:05.144 --> 00:41:06.585
<v Speaker 1>if we wanna go and

00:41:06.825 --> 00:41:08.185
<v Speaker 1>configure the retries.

00:41:08.585 --> 00:41:09.384
<v Speaker 0>Ah, there we go.

00:41:11.890 --> 00:41:12.610
<v Speaker 0>So

00:41:12.850 --> 00:41:14.130
<v Speaker 0>this is

00:41:18.770 --> 00:41:20.370
<v Speaker 0>See if I can work this out.

00:41:23.010 --> 00:41:25.010
<v Speaker 1>Ah, so if you see the link there

00:41:25.010 --> 00:41:27.384
<v Speaker 1>right above retries, check out the retries section

00:41:27.384 --> 00:41:28.505
<v Speaker 1>of the Books demo.

00:41:29.305 --> 00:41:31.625
<v Speaker 1>So we've already got the Books app running

00:41:31.625 --> 00:41:33.625
<v Speaker 1>there. If you scroll

00:41:33.865 --> 00:41:36.025
<v Speaker 1>up, what we're gonna need to do is

00:41:36.025 --> 00:41:36.984
<v Speaker 1>add the

00:41:40.550 --> 00:41:41.910
<v Speaker 1>service profile.

00:41:42.470 --> 00:41:44.150
<v Speaker 1>So scroll down a little bit.

00:41:45.830 --> 00:41:47.030
<v Speaker 1>Keep on going.

00:41:47.350 --> 00:41:49.750
<v Speaker 1>It's a section titled service profile.

00:41:49.830 --> 00:41:51.030
<v Speaker 1>Oh, wait.

00:41:52.445 --> 00:41:53.245
<v Speaker 1>Sorry.

00:41:53.325 --> 00:41:56.605
<v Speaker 1>Nope. Scroll up. It's the it's the literally

00:41:56.605 --> 00:41:59.085
<v Speaker 1>that section right there. Okay. Okay. So there

00:41:59.085 --> 00:42:01.965
<v Speaker 1>we go. So the service profiles are

00:42:02.845 --> 00:42:04.365
<v Speaker 1>I kind of hinted that you need to

00:42:04.365 --> 00:42:06.365
<v Speaker 1>tell us what routes you have, and the

00:42:06.365 --> 00:42:07.885
<v Speaker 1>reason for that is that

00:42:08.340 --> 00:42:10.500
<v Speaker 1>cardinality is the cluster

00:42:10.500 --> 00:42:11.140
<v Speaker 1>killer.

00:42:12.660 --> 00:42:14.580
<v Speaker 1>The more cardinality you have, the bigger your

00:42:14.580 --> 00:42:16.660
<v Speaker 1>Prometheus gets. The bigger your Prometheus gets, the

00:42:16.660 --> 00:42:19.460
<v Speaker 1>slower your cluster gets. And so we need

00:42:19.460 --> 00:42:20.340
<v Speaker 1>you to tell us what

00:42:21.485 --> 00:42:23.805
<v Speaker 1>routes you've got. We can consume,

00:42:24.125 --> 00:42:26.605
<v Speaker 1>Swagger or open API specifications

00:42:26.605 --> 00:42:29.485
<v Speaker 1>and, gRPC proto buffs. We've also got a

00:42:29.485 --> 00:42:31.485
<v Speaker 1>couple other commands to go and help you

00:42:31.485 --> 00:42:34.080
<v Speaker 1>build out those service profiles. But why don't

00:42:34.080 --> 00:42:36.960
<v Speaker 1>we grab the Swagger profile here for the

00:42:36.960 --> 00:42:38.240
<v Speaker 1>Books app and

00:42:38.960 --> 00:42:41.200
<v Speaker 1>generate a service profile for that and then

00:42:41.200 --> 00:42:42.480
<v Speaker 1>apply it to the cluster?

00:42:44.160 --> 00:42:46.080
<v Speaker 0>Okay. I'm just gonna take a look at

00:42:46.080 --> 00:42:47.040
<v Speaker 0>what this

00:42:47.120 --> 00:42:47.680
<v Speaker 0>output.

00:42:54.474 --> 00:42:57.595
<v Speaker 0>Okay. So a service profile. Okay. It's just

00:42:58.075 --> 00:43:00.315
<v Speaker 0>a list of the roots then. Yep.

00:43:00.714 --> 00:43:02.635
<v Speaker 1>That are rejects. Yeah. That's about it.

00:43:04.660 --> 00:43:06.820
<v Speaker 0>I always suspect to like be revealed by

00:43:06.820 --> 00:43:08.900
<v Speaker 0>some massive complexity thing and then you're like,

00:43:08.900 --> 00:43:11.700
<v Speaker 0>oh, it's just YAML. Always YAML.

00:43:12.340 --> 00:43:14.660
<v Speaker 0>Okay. It's YAML all the way down. Yeah.

00:43:14.660 --> 00:43:17.155
<v Speaker 0>It really is. In fact, the service profile

00:43:17.155 --> 00:43:18.515
<v Speaker 0>was right there in the docs and I

00:43:18.515 --> 00:43:20.515
<v Speaker 0>just wasn't looking at it. Okay. Perfect.

00:43:21.155 --> 00:43:23.635
<v Speaker 0>So now that we have a service profile,

00:43:24.515 --> 00:43:26.115
<v Speaker 0>do I need to run this as well?

00:43:26.115 --> 00:43:29.315
<v Speaker 1>Yeah. Let's add profiles for the other two

00:43:29.315 --> 00:43:30.435
<v Speaker 1>services, the

00:43:31.619 --> 00:43:33.619
<v Speaker 1>author service and the book service.

00:43:36.660 --> 00:43:38.579
<v Speaker 0>And then we can verify that with the

00:43:38.579 --> 00:43:39.299
<v Speaker 0>tap command.

00:43:44.815 --> 00:43:46.495
<v Speaker 0>So what do we have here?

00:43:46.895 --> 00:43:48.735
<v Speaker 1>That's showing us the

00:43:51.855 --> 00:43:54.095
<v Speaker 1>route. So if you see the path there.

00:43:57.260 --> 00:43:58.460
<v Speaker 0>Yes.

00:43:58.460 --> 00:44:00.220
<v Speaker 0>There we go. Alright. Path.

00:44:03.020 --> 00:44:04.940
<v Speaker 0>Is that right? Mhmm.

00:44:04.940 --> 00:44:06.220
<v Speaker 1>Is

00:44:06.220 --> 00:44:09.420
<v Speaker 1>there an r t underscore route in there

00:44:09.420 --> 00:44:10.220
<v Speaker 1>somewhere?

00:44:10.300 --> 00:44:11.260
<v Speaker 1>I'm not seeing it.

00:44:18.295 --> 00:44:20.135
<v Speaker 1>We might be running into some

00:44:21.495 --> 00:44:23.495
<v Speaker 1>bleeding edge issues. Oh, no.

00:44:24.055 --> 00:44:25.175
<v Speaker 1>It's there. I see it.

00:44:26.780 --> 00:44:30.060
<v Speaker 0>Oh, there. Yep. Okay. Cool. So that's,

00:44:30.780 --> 00:44:33.820
<v Speaker 1>the name of each of the routes in

00:44:33.820 --> 00:44:36.220
<v Speaker 1>the service profile shows up there. And so

00:44:36.220 --> 00:44:37.900
<v Speaker 1>if you wanted to put a fancy name

00:44:37.900 --> 00:44:40.060
<v Speaker 1>in instead of just post books ID edit,

00:44:40.060 --> 00:44:40.780
<v Speaker 1>you could do that.

00:44:43.165 --> 00:44:45.085
<v Speaker 0>Okay. So we've

00:44:45.805 --> 00:44:48.525
<v Speaker 0>added we've we've told Linkerd that each of

00:44:48.525 --> 00:44:50.445
<v Speaker 0>our services has a Swagger file. We created

00:44:50.445 --> 00:44:52.685
<v Speaker 0>a service profile based on that Swagger file.

00:44:54.140 --> 00:44:56.380
<v Speaker 0>Now how do I tell it to do

00:44:57.500 --> 00:44:58.380
<v Speaker 1>retries?

00:44:59.100 --> 00:45:00.780
<v Speaker 1>Straight to the retries.

00:45:02.940 --> 00:45:05.340
<v Speaker 1>So if you see, we've got a edit

00:45:05.340 --> 00:45:06.860
<v Speaker 1>command down

00:45:07.340 --> 00:45:08.620
<v Speaker 1>a couple steps there.

00:45:09.535 --> 00:45:11.295
<v Speaker 1>So if we run that edit there.

00:45:13.375 --> 00:45:15.295
<v Speaker 0>Okay. And then we're gonna make an edit

00:45:15.295 --> 00:45:16.895
<v Speaker 0>to the root. So we have so we

00:45:16.895 --> 00:45:17.455
<v Speaker 0>have to okay.

00:45:19.615 --> 00:45:20.975
<v Speaker 0>So let me see if I if I

00:45:20.975 --> 00:45:23.349
<v Speaker 0>understand this correctly then. So when we enable

00:45:23.349 --> 00:45:26.230
<v Speaker 0>the sidecar injection on our pods,

00:45:27.430 --> 00:45:29.830
<v Speaker 0>we have to still apply service profiles and

00:45:29.830 --> 00:45:31.349
<v Speaker 0>have retriable. So it's not something that the

00:45:31.349 --> 00:45:33.349
<v Speaker 0>sidecar just does by default and it sees

00:45:33.349 --> 00:45:35.430
<v Speaker 0>some sort of http error and the thing

00:45:35.430 --> 00:45:37.255
<v Speaker 0>like we we have to be very explicit

00:45:37.255 --> 00:45:38.455
<v Speaker 0>about the way that we want that to

00:45:38.455 --> 00:45:39.015
<v Speaker 0>function.

00:45:39.335 --> 00:45:41.895
<v Speaker 1>Exactly. And that is because

00:45:42.535 --> 00:45:44.615
<v Speaker 1>not all routes you want to retry.

00:45:44.775 --> 00:45:46.935
<v Speaker 1>Imagine having a credit card

00:45:48.309 --> 00:45:50.630
<v Speaker 1>charge getting retried a thousand times. That would

00:45:50.630 --> 00:45:51.670
<v Speaker 1>be pretty bad.

00:45:52.309 --> 00:45:55.029
<v Speaker 1>There's also, retries with great,

00:45:55.270 --> 00:45:55.910
<v Speaker 1>with

00:45:56.230 --> 00:45:58.630
<v Speaker 1>great power becomes great responsibility.

00:45:59.589 --> 00:46:02.545
<v Speaker 1>Retries really are a great tool, but it's

00:46:02.545 --> 00:46:04.465
<v Speaker 1>something you need to be very conscious about

00:46:04.465 --> 00:46:06.225
<v Speaker 1>turning on. And so that's

00:46:06.225 --> 00:46:08.385
<v Speaker 1>kind of where we are here. You really

00:46:08.385 --> 00:46:09.665
<v Speaker 1>can only do them for,

00:46:10.305 --> 00:46:12.545
<v Speaker 1>item potent requests, so anything that's not got

00:46:12.545 --> 00:46:14.385
<v Speaker 1>a body, get head, that kind of thing.

00:46:15.030 --> 00:46:17.030
<v Speaker 1>And you really only wanna do it when

00:46:17.030 --> 00:46:18.310
<v Speaker 1>you're %

00:46:18.310 --> 00:46:20.070
<v Speaker 1>confident that that's the thing that you want

00:46:20.070 --> 00:46:22.070
<v Speaker 1>to do. So that's why we have you

00:46:22.070 --> 00:46:23.910
<v Speaker 1>attach it on a per route basis.

00:46:24.230 --> 00:46:27.830
<v Speaker 1>And now, obviously, because these service profiles are

00:46:27.830 --> 00:46:28.630
<v Speaker 1>regexes,

00:46:29.025 --> 00:46:31.585
<v Speaker 1>you could write a dot star regex

00:46:31.744 --> 00:46:34.545
<v Speaker 1>for your service profile and then retry everything.

00:46:34.944 --> 00:46:37.424
<v Speaker 1>I wouldn't recommend that, but it's something that

00:46:37.424 --> 00:46:38.145
<v Speaker 1>you could do.

00:46:38.625 --> 00:46:41.025
<v Speaker 0>Would it be possible to I'm assuming with

00:46:41.025 --> 00:46:42.865
<v Speaker 0>the regex, it would be. Right? I could

00:46:42.865 --> 00:46:44.760
<v Speaker 0>just match an old get request and assume

00:46:44.760 --> 00:46:46.200
<v Speaker 0>that a get request is not gonna have

00:46:46.200 --> 00:46:48.040
<v Speaker 0>any sort of mutation on the server side,

00:46:48.040 --> 00:46:51.080
<v Speaker 0>and that's probably okay to be Exactly. Retried.

00:46:51.080 --> 00:46:52.040
<v Speaker 1>Okay. Again,

00:46:53.240 --> 00:46:54.760
<v Speaker 1>I would strongly

00:46:55.160 --> 00:46:56.920
<v Speaker 1>not recommend that, but it's doable.

00:46:58.145 --> 00:46:58.945
<v Speaker 0>Okay.

00:46:59.105 --> 00:47:01.585
<v Speaker 0>So let's it keeps opening in my other

00:47:01.585 --> 00:47:02.704
<v Speaker 0>window. So let's just

00:47:04.224 --> 00:47:05.105
<v Speaker 0>alright.

00:47:05.265 --> 00:47:06.785
<v Speaker 0>And we want

00:47:08.065 --> 00:47:10.545
<v Speaker 0>to just add this as retriable here.

00:47:11.100 --> 00:47:13.660
<v Speaker 1>So Specifically to that author's

00:47:13.660 --> 00:47:14.940
<v Speaker 1>line. Yeah.

00:47:15.820 --> 00:47:18.300
<v Speaker 0>Which author's

00:47:18.300 --> 00:47:19.820
<v Speaker 0>hedge request. Okay.

00:47:20.940 --> 00:47:22.380
<v Speaker 0>This one here.

00:47:22.700 --> 00:47:23.340
<v Speaker 0>Yep.

00:47:24.460 --> 00:47:25.660
<v Speaker 0>Done. Yep.

00:47:29.085 --> 00:47:31.085
<v Speaker 0>That was painless.

00:47:31.165 --> 00:47:31.885
<v Speaker 0>So

00:47:32.045 --> 00:47:32.925
<v Speaker 0>let's

00:47:34.365 --> 00:47:35.885
<v Speaker 0>see what this tells us now.

00:47:40.370 --> 00:47:41.490
<v Speaker 1>So

00:47:41.490 --> 00:47:43.730
<v Speaker 1>this might be our issue with the

00:47:43.970 --> 00:47:46.930
<v Speaker 1>edge. I don't understand why we're not getting

00:47:47.570 --> 00:47:49.490
<v Speaker 1>stats here. But if you go back and

00:47:49.490 --> 00:47:51.650
<v Speaker 1>take a look at the docs, we'll see

00:47:51.650 --> 00:47:53.570
<v Speaker 1>what the output is supposed to look like

00:47:53.570 --> 00:47:53.970
<v Speaker 1>at least.

00:47:55.275 --> 00:47:57.115
<v Speaker 1>And so here, we're showing you the effective

00:47:57.115 --> 00:48:00.234
<v Speaker 1>success and the actual success, which is

00:48:00.714 --> 00:48:03.115
<v Speaker 1>pretty cool. This is the difference. The

00:48:03.515 --> 00:48:06.555
<v Speaker 1>retries gets your effective success up from the

00:48:06.555 --> 00:48:09.035
<v Speaker 1>actual because we're retrying, but it has the

00:48:09.035 --> 00:48:10.555
<v Speaker 1>downside of increasing latency.

00:48:11.780 --> 00:48:12.980
<v Speaker 0>Now is this

00:48:13.220 --> 00:48:15.380
<v Speaker 0>edge bug that we're we're running into something

00:48:15.380 --> 00:48:17.060
<v Speaker 0>that's only do we think that's likely only

00:48:17.060 --> 00:48:19.300
<v Speaker 0>to be affecting this command? Like, if I

00:48:19.300 --> 00:48:21.220
<v Speaker 0>put forward to the dashboard or to the

00:48:21.220 --> 00:48:22.500
<v Speaker 0>confana, would we be able to get a

00:48:22.500 --> 00:48:23.780
<v Speaker 0>more visual look at that?

00:48:25.715 --> 00:48:27.555
<v Speaker 1>This would be the right command to see

00:48:27.555 --> 00:48:28.755
<v Speaker 1>this data. So

00:48:29.075 --> 00:48:30.995
<v Speaker 1>and it's all getting pulled from Prometheus, so

00:48:30.995 --> 00:48:32.515
<v Speaker 1>I don't think we'll have a more visual

00:48:32.515 --> 00:48:34.195
<v Speaker 1>way to take a look at that. Alright.

00:48:34.195 --> 00:48:35.155
<v Speaker 0>Okay. No worries.

00:48:35.635 --> 00:48:38.510
<v Speaker 0>So, okay. I think we understand retries there.

00:48:38.510 --> 00:48:40.270
<v Speaker 0>I'm gonna assume timeouts are pretty much in

00:48:40.270 --> 00:48:42.110
<v Speaker 0>the exact same vein. We find

00:48:42.590 --> 00:48:44.830
<v Speaker 0>the path that we want to

00:48:45.630 --> 00:48:48.270
<v Speaker 0>apply our realtor. Yeah. And we we add

00:48:48.270 --> 00:48:49.484
<v Speaker 0>on the timeout. So

00:48:49.884 --> 00:48:51.805
<v Speaker 0>Yep. We won't we won't run through that.

00:48:51.884 --> 00:48:53.484
<v Speaker 0>Let's see what else we can quickly do

00:48:53.484 --> 00:48:54.045
<v Speaker 0>then.

00:48:54.525 --> 00:48:56.444
<v Speaker 0>So is there anything that you're particularly drawn

00:48:56.444 --> 00:48:57.805
<v Speaker 0>to that you'd like to move on to

00:48:57.805 --> 00:48:58.365
<v Speaker 0>Nick?

00:49:01.085 --> 00:49:02.045
<v Speaker 1>That's a good question.

00:49:05.349 --> 00:49:07.910
<v Speaker 1>Why don't just for fun, why don't we

00:49:07.910 --> 00:49:09.110
<v Speaker 1>go and do the

00:49:13.750 --> 00:49:15.829
<v Speaker 1>it is let me make sure I can

00:49:15.829 --> 00:49:16.869
<v Speaker 1>find docs here.

00:49:22.055 --> 00:49:23.495
<v Speaker 1>Let's go to

00:49:24.135 --> 00:49:26.695
<v Speaker 1>the securing your service doc.

00:49:31.380 --> 00:49:33.140
<v Speaker 1>Alright. Let's go. It's

00:49:33.140 --> 00:49:33.780
<v Speaker 1>under

00:49:34.019 --> 00:49:36.180
<v Speaker 1>feet it's under tasks. So if you click

00:49:36.180 --> 00:49:37.460
<v Speaker 1>the task link there,

00:49:37.700 --> 00:49:39.619
<v Speaker 1>down towards the bottom, there is a securing

00:49:39.619 --> 00:49:40.500
<v Speaker 1>your service.

00:49:43.940 --> 00:49:47.515
<v Speaker 1>Okay. And so sorry, Anigo. Oh, yeah. So,

00:49:48.395 --> 00:49:49.915
<v Speaker 1>we do MTLS,

00:49:50.075 --> 00:49:52.315
<v Speaker 1>by default out of the box with Linkerd.

00:49:52.315 --> 00:49:54.315
<v Speaker 1>We actually make it really hard for you

00:49:54.315 --> 00:49:55.195
<v Speaker 1>to turn off.

00:49:55.675 --> 00:49:56.955
<v Speaker 1>Encryption is great,

00:49:57.195 --> 00:49:58.730
<v Speaker 1>but it's a little hard to validate. And

00:49:58.730 --> 00:49:59.930
<v Speaker 1>so this doc will kind of walk us

00:49:59.930 --> 00:50:00.730
<v Speaker 1>through using,

00:50:00.970 --> 00:50:03.130
<v Speaker 1>not just or pretty much all the Linkerd

00:50:03.130 --> 00:50:04.250
<v Speaker 1>tools and

00:50:04.410 --> 00:50:06.970
<v Speaker 1>a couple lower level ones to go and

00:50:07.050 --> 00:50:09.450
<v Speaker 1>validate that MTLS is really working between all

00:50:09.450 --> 00:50:10.010
<v Speaker 1>of the nodes.

00:50:12.235 --> 00:50:14.795
<v Speaker 0>So MTLS is already running on the pods

00:50:14.795 --> 00:50:17.115
<v Speaker 0>that I've enabled the sidecar on?

00:50:18.715 --> 00:50:20.395
<v Speaker 1>Yeah. Ah, okay.

00:50:20.635 --> 00:50:21.515
<v Speaker 1>MTLS,

00:50:21.515 --> 00:50:23.195
<v Speaker 1>like I said, is enabled out of the

00:50:23.195 --> 00:50:23.515
<v Speaker 1>box.

00:50:24.130 --> 00:50:25.010
<v Speaker 1>In fact,

00:50:25.570 --> 00:50:27.570
<v Speaker 1>tap, the command we've been talking about that,

00:50:27.730 --> 00:50:29.330
<v Speaker 1>Wireshark for your cluster,

00:50:29.490 --> 00:50:30.450
<v Speaker 1>requires,

00:50:30.690 --> 00:50:32.050
<v Speaker 1>m t l s because we need the

00:50:32.050 --> 00:50:34.930
<v Speaker 1>identity to validate that some rando isn't making

00:50:34.930 --> 00:50:36.369
<v Speaker 1>calls on your cluster to get all of

00:50:36.369 --> 00:50:38.585
<v Speaker 1>the traffic going through it. Okay. So that

00:50:38.585 --> 00:50:41.625
<v Speaker 0>that just means that all of the requests

00:50:41.625 --> 00:50:44.585
<v Speaker 0>that leave my pods are being encrypted for

00:50:44.585 --> 00:50:46.265
<v Speaker 0>me and I've not had to do it

00:50:46.265 --> 00:50:47.785
<v Speaker 0>at then. Exactly.

00:50:48.424 --> 00:50:50.265
<v Speaker 0>I mean, I'm sold already on that feature.

00:50:50.490 --> 00:50:51.930
<v Speaker 0>I I I thought we were gonna have

00:50:51.930 --> 00:50:53.369
<v Speaker 0>to go enable something but the fact that

00:50:53.369 --> 00:50:56.170
<v Speaker 0>that's just no because I just installed Linkerd

00:50:56.170 --> 00:50:58.250
<v Speaker 0>and injected the second, that's pretty awesome.

00:50:59.210 --> 00:51:01.130
<v Speaker 0>So you said it's hard for us to

00:51:01.130 --> 00:51:03.530
<v Speaker 0>confirm that that works but not impossible.

00:51:03.530 --> 00:51:03.770
<v Speaker 0>Right?

00:51:05.945 --> 00:51:07.865
<v Speaker 0>I mean, how how do I know that

00:51:07.865 --> 00:51:09.465
<v Speaker 0>that I just trust it?

00:51:09.945 --> 00:51:11.945
<v Speaker 1>Well, that was my point. Let's go and

00:51:11.945 --> 00:51:13.225
<v Speaker 1>take the steps.

00:51:13.385 --> 00:51:14.585
<v Speaker 1>I don't trust it.

00:51:15.945 --> 00:51:18.025
<v Speaker 0>Alright. Let's see what this command is gonna

00:51:18.025 --> 00:51:18.585
<v Speaker 0>return.

00:51:19.320 --> 00:51:20.280
<v Speaker 0>Alright. So that's

00:51:21.960 --> 00:51:24.840
<v Speaker 0>okay. All of those are secured. We we

00:51:24.840 --> 00:51:26.840
<v Speaker 0>have our favorite little green tech here.

00:51:27.560 --> 00:51:28.280
<v Speaker 0>So,

00:51:28.760 --> 00:51:30.440
<v Speaker 0>yes, I see the output.

00:51:30.760 --> 00:51:31.640
<v Speaker 0>Awesome.

00:51:32.360 --> 00:51:34.280
<v Speaker 0>And we can run the tap again.

00:51:38.095 --> 00:51:39.535
<v Speaker 0>And it's suggesting

00:51:41.135 --> 00:51:42.815
<v Speaker 0>is there anything at the top that would

00:51:42.815 --> 00:51:44.815
<v Speaker 0>suggest it's encrypted? Or is Yeah. So you

00:51:44.815 --> 00:51:46.655
<v Speaker 1>see the TLS equals there?

00:51:47.950 --> 00:51:50.270
<v Speaker 1>So there's TLS not provided by remote. That's

00:51:50.270 --> 00:51:51.230
<v Speaker 1>not encrypted.

00:51:51.470 --> 00:51:53.230
<v Speaker 1>But if there's TLS equals true, then it

00:51:53.230 --> 00:51:54.270
<v Speaker 1>is encrypted.

00:51:55.230 --> 00:51:56.270
<v Speaker 0>Ah.

00:51:56.830 --> 00:51:58.510
<v Speaker 0>And so you'll see some commands there that

00:51:58.510 --> 00:52:01.365
<v Speaker 1>aren't encrypted. Those are ones we can't. If

00:52:01.365 --> 00:52:03.605
<v Speaker 1>it's coming from the Kubelet, that's not injected

00:52:03.605 --> 00:52:04.885
<v Speaker 1>with the Linkerd proxy.

00:52:04.965 --> 00:52:06.885
<v Speaker 1>We don't control both sides of the connection.

00:52:06.885 --> 00:52:09.365
<v Speaker 1>But anything that's a request between two services,

00:52:09.365 --> 00:52:10.485
<v Speaker 1>we definitely can.

00:52:10.645 --> 00:52:12.565
<v Speaker 1>That's where you see the TLS true.

00:52:13.765 --> 00:52:14.725
<v Speaker 0>Okay. That makes sense.

00:52:15.549 --> 00:52:17.390
<v Speaker 0>So we can validate MTLS

00:52:17.390 --> 00:52:18.109
<v Speaker 0>with

00:52:18.349 --> 00:52:19.390
<v Speaker 0>t sharp.

00:52:19.950 --> 00:52:21.470
<v Speaker 1>And this is the like,

00:52:22.109 --> 00:52:24.109
<v Speaker 1>don't just take our word for it with

00:52:24.109 --> 00:52:25.630
<v Speaker 1>all of the tools that Linkerd has put

00:52:25.630 --> 00:52:28.510
<v Speaker 1>together. This actually adds a debugging container

00:52:28.510 --> 00:52:31.225
<v Speaker 1>to your sidecar that adds,

00:52:32.505 --> 00:52:33.945
<v Speaker 1>or it adds a

00:52:34.265 --> 00:52:36.745
<v Speaker 1>debugging container to your pod that you can

00:52:36.745 --> 00:52:38.985
<v Speaker 1>then go and run debugging tools on. We

00:52:38.985 --> 00:52:40.265
<v Speaker 1>use it a lot to go and debug

00:52:40.265 --> 00:52:42.185
<v Speaker 1>the service mesh itself, but this is a

00:52:42.185 --> 00:52:43.785
<v Speaker 1>great way to see the, like, raw

00:52:44.380 --> 00:52:46.140
<v Speaker 1>bytes as they go through and make sure

00:52:46.140 --> 00:52:47.900
<v Speaker 1>that they are actually encrypted.

00:52:49.260 --> 00:52:50.060
<v Speaker 0>Awesome.

00:52:50.060 --> 00:52:53.740
<v Speaker 0>Okay. Let's just reapply that. So it's

00:52:55.980 --> 00:52:58.395
<v Speaker 0>okay. So it's injected that. Okay. So it's

00:52:58.395 --> 00:53:01.035
<v Speaker 0>updated the sidecar with the debug option then

00:53:01.035 --> 00:53:02.475
<v Speaker 0>on each of those deployment.

00:53:03.035 --> 00:53:05.195
<v Speaker 1>Specifically, it's added an annotation

00:53:05.195 --> 00:53:07.275
<v Speaker 1>that will go and add another

00:53:07.515 --> 00:53:08.475
<v Speaker 1>pod

00:53:08.555 --> 00:53:10.635
<v Speaker 1>or another container to the pod,

00:53:10.795 --> 00:53:12.235
<v Speaker 1>which is that debug container.

00:53:16.500 --> 00:53:18.420
<v Speaker 0>Alright. Let's spend the deployment.

00:53:21.060 --> 00:53:23.540
<v Speaker 0>Yeah. Okay. So it just enabled debug sig

00:53:23.540 --> 00:53:24.260
<v Speaker 0>capture.

00:53:24.820 --> 00:53:26.260
<v Speaker 0>Good. Because that means it's quite easy for

00:53:26.260 --> 00:53:28.020
<v Speaker 0>me to add that then without the actual

00:53:28.020 --> 00:53:30.575
<v Speaker 0>Linkerd inject aspect. Exactly.

00:53:30.895 --> 00:53:32.975
<v Speaker 0>So then we can get a remote shell

00:53:33.055 --> 00:53:35.855
<v Speaker 0>by jumping and say one jumping inside of

00:53:35.855 --> 00:53:38.895
<v Speaker 0>that debug container and our emoji portal voting

00:53:38.895 --> 00:53:39.695
<v Speaker 0>service.

00:53:39.855 --> 00:53:40.415
<v Speaker 0>Mhmm.

00:53:41.214 --> 00:53:42.575
<v Speaker 0>And t shark.

00:53:45.880 --> 00:53:48.200
<v Speaker 1>And T Shark is just a command line

00:53:48.200 --> 00:53:50.680
<v Speaker 1>Wireshark. We're gonna be looking at the port

00:53:50.680 --> 00:53:51.960
<v Speaker 1>eighty eighty and

00:53:52.680 --> 00:53:54.600
<v Speaker 1>taking a look at SSL and then looking

00:53:54.600 --> 00:53:56.040
<v Speaker 1>at what's going on on local host.

00:53:58.155 --> 00:54:00.795
<v Speaker 0>And if a not local host. Right? Right.

00:54:00.875 --> 00:54:01.515
<v Speaker 0>Okay.

00:54:01.835 --> 00:54:04.235
<v Speaker 0>So it's actually it's looking specifically for requests

00:54:04.235 --> 00:54:06.315
<v Speaker 0>which are leaving the service to another service,

00:54:06.315 --> 00:54:08.715
<v Speaker 0>which is where the MTLS boundaries are, I

00:54:08.715 --> 00:54:11.035
<v Speaker 0>guess. So this is actually coming in, but

00:54:11.035 --> 00:54:13.160
<v Speaker 1>it's coming in on the proxy,

00:54:13.160 --> 00:54:13.880
<v Speaker 1>e g,

00:54:14.840 --> 00:54:15.560
<v Speaker 1>the

00:54:15.640 --> 00:54:18.600
<v Speaker 1>exterior IP address, not the interior IP address.

00:54:18.600 --> 00:54:20.840
<v Speaker 1>Because the way that service meshes work is

00:54:20.840 --> 00:54:23.320
<v Speaker 1>that we have some IP tables games that

00:54:23.320 --> 00:54:25.765
<v Speaker 1>go and redirect all of the incoming traffic

00:54:25.765 --> 00:54:27.765
<v Speaker 1>into the proxy that then forwards it to

00:54:27.765 --> 00:54:28.805
<v Speaker 1>the local host.

00:54:29.445 --> 00:54:30.485
<v Speaker 1>And so if we were to look at

00:54:30.485 --> 00:54:33.205
<v Speaker 1>local hosts, we would actually see everything

00:54:35.525 --> 00:54:37.525
<v Speaker 1>in clear text. But as you can see

00:54:37.525 --> 00:54:40.005
<v Speaker 1>here, we've got nothing but

00:54:41.560 --> 00:54:43.400
<v Speaker 1>TLS data going through

00:54:44.200 --> 00:54:46.440
<v Speaker 1>except for that ready, which is, again,

00:54:46.920 --> 00:54:47.640
<v Speaker 1>the

00:54:47.720 --> 00:54:50.119
<v Speaker 1>Kubelet calling in and validating that our service

00:54:50.119 --> 00:54:50.920
<v Speaker 1>is up.

00:54:51.880 --> 00:54:54.599
<v Speaker 0>Yeah. The the SYNACK packets. Right? These Mhmm.

00:54:54.599 --> 00:54:55.160
<v Speaker 0>Yeah. Okay.

00:54:56.025 --> 00:54:58.185
<v Speaker 0>Okay. That's pretty sweet. I like that.

00:54:58.825 --> 00:54:59.545
<v Speaker 0>Nice.

00:55:00.265 --> 00:55:02.505
<v Speaker 0>And that that's it. So we've covered

00:55:03.625 --> 00:55:04.585
<v Speaker 0>retries,

00:55:04.744 --> 00:55:06.984
<v Speaker 0>timers with Xenbin, MTLS.

00:55:07.720 --> 00:55:09.400
<v Speaker 0>I mean and that was

00:55:10.120 --> 00:55:12.360
<v Speaker 0>safe to say that was all pretty trivial.

00:55:12.840 --> 00:55:14.840
<v Speaker 0>Mhmm. That does not really require too much

00:55:14.840 --> 00:55:16.760
<v Speaker 0>effort on my part which is good otherwise

00:55:16.760 --> 00:55:18.040
<v Speaker 0>it would all have been wrong.

00:55:19.160 --> 00:55:21.400
<v Speaker 0>So I'm really happy with that. That's great.

00:55:23.235 --> 00:55:24.035
<v Speaker 0>Now

00:55:25.635 --> 00:55:27.395
<v Speaker 0>shall we is the

00:55:28.115 --> 00:55:29.475
<v Speaker 0>on a home page,

00:55:30.595 --> 00:55:32.355
<v Speaker 0>we have this big deal about the multi

00:55:32.355 --> 00:55:35.555
<v Speaker 0>cluster Kubernetes thing. Mhmm. Is that something we're

00:55:35.555 --> 00:55:36.590
<v Speaker 0>gonna be to look at with the one

00:55:36.590 --> 00:55:38.590
<v Speaker 0>nineteen, or do you think we may run

00:55:38.590 --> 00:55:40.030
<v Speaker 0>into some issues with that?

00:55:41.550 --> 00:55:44.110
<v Speaker 1>We can definitely give it a try. We

00:55:44.110 --> 00:55:46.430
<v Speaker 1>changed the way that multicluster works, so we're

00:55:46.430 --> 00:55:47.710
<v Speaker 1>actually going to need to go and take

00:55:47.710 --> 00:55:48.670
<v Speaker 1>a look at the

00:55:49.935 --> 00:55:52.255
<v Speaker 1>pull requests on the docs website if we

00:55:52.255 --> 00:55:53.935
<v Speaker 1>want to get that one up and up

00:55:53.935 --> 00:55:54.735
<v Speaker 1>and running.

00:55:55.215 --> 00:55:56.815
<v Speaker 1>But we can definitely give it a try

00:55:56.815 --> 00:55:58.415
<v Speaker 1>and see what happens there.

00:55:59.375 --> 00:56:01.695
<v Speaker 0>Sure. Why not? Let's see what happens.

00:56:02.335 --> 00:56:03.695
<v Speaker 1>So if you go to

00:56:05.570 --> 00:56:06.690
<v Speaker 1>let me find

00:56:10.610 --> 00:56:12.450
<v Speaker 1>those docs too.

00:56:13.970 --> 00:56:15.650
<v Speaker 0>So I'm assuming I'll need to go through

00:56:15.650 --> 00:56:18.530
<v Speaker 0>the standard install Linkerd command on my other

00:56:18.530 --> 00:56:20.210
<v Speaker 0>cluster. Right? Oh, so,

00:56:21.385 --> 00:56:23.545
<v Speaker 1>actually, what you're gonna wanna do is

00:56:24.905 --> 00:56:26.025
<v Speaker 1>uninstall

00:56:26.025 --> 00:56:26.825
<v Speaker 1>Linkerd

00:56:26.825 --> 00:56:27.465
<v Speaker 1>from

00:56:27.705 --> 00:56:30.185
<v Speaker 1>your current cluster and then do a reinstall.

00:56:30.185 --> 00:56:32.105
<v Speaker 1>And the reason for that is that to

00:56:32.105 --> 00:56:33.385
<v Speaker 1>get multicluster

00:56:33.705 --> 00:56:35.910
<v Speaker 1>up and running, we need to have a

00:56:35.910 --> 00:56:37.350
<v Speaker 1>common trust anchor.

00:56:37.670 --> 00:56:40.390
<v Speaker 1>And the the reason for that is that

00:56:40.390 --> 00:56:41.830
<v Speaker 1>the trust anchor,

00:56:42.150 --> 00:56:44.150
<v Speaker 1>is how we do authentication

00:56:44.310 --> 00:56:47.109
<v Speaker 1>so that users can't randos can't be requesting

00:56:47.109 --> 00:56:48.550
<v Speaker 1>services inside your cluster.

00:56:49.565 --> 00:56:50.525
<v Speaker 1>And so,

00:56:51.005 --> 00:56:53.325
<v Speaker 1>actually, what you're gonna wanna do is

00:56:55.645 --> 00:56:57.005
<v Speaker 0>Just change this to the gonna send

00:56:57.645 --> 00:56:59.325
<v Speaker 1>you a link

00:56:59.885 --> 00:57:01.485
<v Speaker 1>because

00:57:04.500 --> 00:57:07.220
<v Speaker 1>it's probably going to be easiest that way.

00:57:08.260 --> 00:57:10.180
<v Speaker 1>Give me just a second here. Yeah. Of

00:57:10.180 --> 00:57:10.660
<v Speaker 0>course.

00:57:16.260 --> 00:57:19.380
<v Speaker 1>That is gonna be the

00:57:18.635 --> 00:57:19.995
<v Speaker 1>docs for that.

00:57:20.875 --> 00:57:22.395
<v Speaker 0>Okay. So should I

00:57:22.714 --> 00:57:24.954
<v Speaker 0>first do the Linkerd install, but delete path

00:57:24.954 --> 00:57:26.635
<v Speaker 0>to get rid of all this? So I

00:57:26.635 --> 00:57:27.915
<v Speaker 1>would do an uninstall.

00:57:28.714 --> 00:57:29.435
<v Speaker 0>Oh,

00:57:29.835 --> 00:57:30.555
<v Speaker 0>that's easy.

00:57:32.000 --> 00:57:33.920
<v Speaker 1>Uninstall and then pipe that into

00:57:34.160 --> 00:57:35.520
<v Speaker 1>kubectl delete.

00:57:39.359 --> 00:57:42.319
<v Speaker 1>And since we've got those two other namespaces,

00:57:42.319 --> 00:57:44.559
<v Speaker 1>you probably want to clean up the emoji

00:57:44.559 --> 00:57:46.640
<v Speaker 1>photo and book sat namespaces.

00:57:47.795 --> 00:57:48.755
<v Speaker 1>The reason

00:57:49.075 --> 00:57:51.235
<v Speaker 1>why we need to do an uninstall here

00:57:51.235 --> 00:57:52.755
<v Speaker 1>is that we

00:57:53.475 --> 00:57:56.515
<v Speaker 1>install a couple API services, which are Kubernetes

00:57:56.515 --> 00:57:57.315
<v Speaker 1>resources.

00:57:57.715 --> 00:58:00.755
<v Speaker 1>And if you delete a namespace and have

00:58:00.755 --> 00:58:03.609
<v Speaker 1>an API service running, Kubernetes loses its little

00:58:03.609 --> 00:58:04.890
<v Speaker 1>mind. And so,

00:58:05.770 --> 00:58:07.450
<v Speaker 1>you definitely wanna do that, but you can

00:58:07.450 --> 00:58:09.530
<v Speaker 1>just delete the namespaces for Books app and

00:58:09.530 --> 00:58:10.650
<v Speaker 1>Emoji photo.

00:58:13.849 --> 00:58:15.930
<v Speaker 0>Was thinking about completing it. Maybe I should

00:58:15.930 --> 00:58:16.810
<v Speaker 0>just detect it.

00:58:19.315 --> 00:58:20.435
<v Speaker 0>Yeah. Okay.

00:58:23.235 --> 00:58:25.955
<v Speaker 0>Delete it. Let's fill up these docs.

00:58:26.995 --> 00:58:29.475
<v Speaker 0>Well, eventually delete it. I have

00:58:29.875 --> 00:58:30.915
<v Speaker 0>confidence. So

00:58:32.950 --> 00:58:33.990
<v Speaker 0>we're going

00:58:34.870 --> 00:58:36.390
<v Speaker 0>way off script then.

00:58:37.030 --> 00:58:38.390
<v Speaker 1>Way off script.

00:58:39.190 --> 00:58:41.830
<v Speaker 1>Oh, in fact, so way way off strip

00:58:42.070 --> 00:58:43.510
<v Speaker 1>script that the

00:58:44.470 --> 00:58:46.950
<v Speaker 1>command that I thought was in there to

00:58:46.950 --> 00:58:49.655
<v Speaker 1>cut and paste stuff is not there. Let

00:58:49.655 --> 00:58:50.215
<v Speaker 1>me

00:58:51.895 --> 00:58:53.815
<v Speaker 1>give you that command real quick.

00:59:00.375 --> 00:59:01.730
<v Speaker 0>So is that a command I have to

00:59:01.730 --> 00:59:04.369
<v Speaker 0>run before the multicluster install, or can I

00:59:04.369 --> 00:59:07.250
<v Speaker 0>go ahead and just start it? Well,

00:59:07.250 --> 00:59:09.170
<v Speaker 1>so the multicluster install is only gonna install

00:59:09.170 --> 00:59:10.770
<v Speaker 1>the multicluster components.

00:59:11.650 --> 00:59:15.170
<v Speaker 1>What you're gonna wanna do is

00:59:13.955 --> 00:59:16.595
<v Speaker 1>click on the if you scroll up on

00:59:16.595 --> 00:59:17.875
<v Speaker 1>that dock a little bit,

00:59:18.195 --> 00:59:20.515
<v Speaker 1>you'll see that you require two clusters and

00:59:20.515 --> 00:59:22.435
<v Speaker 1>a control plane installation that shares a common

00:59:22.435 --> 00:59:25.795
<v Speaker 1>trust anchor. So click on the, trust anchor

00:59:25.795 --> 00:59:26.515
<v Speaker 1>link there,

00:59:30.380 --> 00:59:33.020
<v Speaker 1>and we're going to create a

00:59:34.539 --> 00:59:36.140
<v Speaker 1>trust anchor certificate.

00:59:37.900 --> 00:59:40.700
<v Speaker 1>I would recommend doing a brew install step

00:59:40.700 --> 00:59:41.339
<v Speaker 1>here.

00:59:41.579 --> 00:59:43.740
<v Speaker 1>But if you are a

00:59:44.765 --> 00:59:45.485
<v Speaker 1>crazy

00:59:45.645 --> 00:59:46.605
<v Speaker 1>OpenSSL

00:59:46.605 --> 00:59:47.805
<v Speaker 1>Kung Fu artist,

00:59:48.685 --> 00:59:50.045
<v Speaker 1>I won't stop you.

00:59:51.005 --> 00:59:51.645
<v Speaker 1>No.

00:59:52.125 --> 00:59:54.205
<v Speaker 1>Brew install step dash

00:59:54.365 --> 00:59:55.325
<v Speaker 1>CLI.

00:59:58.310 --> 01:00:00.550
<v Speaker 0>I can always quickly look that up.

01:00:04.630 --> 01:00:06.310
<v Speaker 0>It's just step, I think.

01:00:06.630 --> 01:00:07.109
<v Speaker 1>Cool.

01:00:11.685 --> 01:00:13.605
<v Speaker 0>And I'm assuming established as some sort of

01:00:13.605 --> 01:00:15.205
<v Speaker 0>utility for generating

01:00:15.365 --> 01:00:17.765
<v Speaker 0>x five zero nine certificate or something similar.

01:00:17.765 --> 01:00:20.405
<v Speaker 0>Yeah. It's actually a great CLI that does

01:00:20.405 --> 01:00:21.765
<v Speaker 1>a lot more than that, but we use

01:00:21.765 --> 01:00:24.085
<v Speaker 1>it just for generating the certificates.

01:00:25.780 --> 01:00:26.500
<v Speaker 0>Okay.

01:00:27.059 --> 01:00:27.780
<v Speaker 0>So

01:00:28.260 --> 01:00:28.740
<v Speaker 0>we

01:00:29.380 --> 01:00:32.260
<v Speaker 1>So that created a trust anchor. And

01:00:34.660 --> 01:00:36.740
<v Speaker 1>then you're gonna wanna go and

01:00:37.380 --> 01:00:39.220
<v Speaker 1>do the step certificate

01:00:41.035 --> 01:00:42.395
<v Speaker 1>and create a

01:00:42.795 --> 01:00:44.875
<v Speaker 1>issuer certificate. So there is

01:00:45.355 --> 01:00:45.915
<v Speaker 1>a,

01:00:46.235 --> 01:00:48.875
<v Speaker 1>trust anchor that goes and installs that kind

01:00:48.875 --> 01:00:51.675
<v Speaker 1>of maintains is a CA and maintains the

01:00:51.675 --> 01:00:54.590
<v Speaker 1>trust across your two clusters. And then, theoretically,

01:00:54.590 --> 01:00:55.630
<v Speaker 1>though, we don't need to do it here.

01:00:55.630 --> 01:00:56.990
<v Speaker 1>You would have an issuer cert that you

01:00:56.990 --> 01:00:59.070
<v Speaker 1>rotate on a regular basis that's

01:00:59.150 --> 01:01:02.270
<v Speaker 1>actually what the proxies get their certificates from.

01:01:02.910 --> 01:01:04.670
<v Speaker 0>Okay. That's this is making sense to me

01:01:04.670 --> 01:01:06.270
<v Speaker 0>now. The fact that we're gonna do multi

01:01:06.270 --> 01:01:08.270
<v Speaker 0>cluster means so we we need a CA

01:01:08.270 --> 01:01:10.484
<v Speaker 0>that is trusted on both for the communication

01:01:10.484 --> 01:01:11.845
<v Speaker 0>to be effectively

01:01:11.924 --> 01:01:13.845
<v Speaker 0>encrypted across that boundary.

01:01:14.005 --> 01:01:15.365
<v Speaker 0>Can I do I mean, do I have

01:01:15.365 --> 01:01:16.964
<v Speaker 0>to use something here? Could this work into

01:01:16.964 --> 01:01:19.525
<v Speaker 0>tools like Vault to provide that top level

01:01:19.525 --> 01:01:19.845
<v Speaker 0>CA?

01:01:21.540 --> 01:01:24.260
<v Speaker 1>Well, so this is an unfortunate

01:01:26.580 --> 01:01:29.060
<v Speaker 1>colocation of terms. There is a type of

01:01:29.060 --> 01:01:31.380
<v Speaker 1>certificate that is a CA certificate,

01:01:31.380 --> 01:01:33.460
<v Speaker 1>and then there is a type of service

01:01:33.460 --> 01:01:34.980
<v Speaker 1>that is an online CA.

01:01:35.395 --> 01:01:38.035
<v Speaker 1>So you can use Vault to go and

01:01:38.035 --> 01:01:40.355
<v Speaker 1>get the certificates if you wanted to,

01:01:41.395 --> 01:01:43.155
<v Speaker 1>but this is just a way to add

01:01:43.155 --> 01:01:44.195
<v Speaker 1>them yourself.

01:01:45.155 --> 01:01:46.115
<v Speaker 1>While the

01:01:46.275 --> 01:01:48.035
<v Speaker 1>trust anchor needs to be generated,

01:01:48.660 --> 01:01:50.660
<v Speaker 1>we also allow you to do automatic cert

01:01:50.660 --> 01:01:52.660
<v Speaker 1>rotation with cert manager if you so wanted

01:01:52.660 --> 01:01:54.820
<v Speaker 1>to do that. Oh, sweet. Okay.

01:01:55.700 --> 01:01:57.220
<v Speaker 0>So is my next step just to keep

01:01:57.220 --> 01:01:59.859
<v Speaker 0>following through with this? Yep. Alright. And so

01:01:59.859 --> 01:02:01.380
<v Speaker 1>that'll install it on

01:02:01.619 --> 01:02:03.540
<v Speaker 1>one cluster, and so you'll wanna then just

01:02:03.540 --> 01:02:06.235
<v Speaker 1>select the context that you want for the

01:02:06.235 --> 01:02:07.275
<v Speaker 1>other cluster.

01:02:11.755 --> 01:02:13.195
<v Speaker 0>All the things.

01:02:15.035 --> 01:02:16.555
<v Speaker 1>All the things all over again.

01:02:17.250 --> 01:02:20.130
<v Speaker 0>Alright. So kube config equals

01:02:20.130 --> 01:02:21.090
<v Speaker 0>Linkerd

01:02:21.410 --> 01:02:23.170
<v Speaker 0>two dot JSON.

01:02:25.330 --> 01:02:26.770
<v Speaker 0>Let's see if that works. We'll see if

01:02:26.770 --> 01:02:28.050
<v Speaker 0>we got created or configured.

01:02:30.595 --> 01:02:32.275
<v Speaker 0>Alright. Let's just do this.

01:02:36.675 --> 01:02:38.835
<v Speaker 0>And then reapply that command.

01:02:41.960 --> 01:02:42.680
<v Speaker 0>Okay.

01:02:44.119 --> 01:02:47.319
<v Speaker 0>So we have Linkerd configured with our trust

01:02:47.319 --> 01:02:48.119
<v Speaker 0>anchor

01:02:48.279 --> 01:02:51.160
<v Speaker 0>deployed to cluster one and cluster two. I'm

01:02:51.160 --> 01:02:52.119
<v Speaker 0>assuming

01:02:52.200 --> 01:02:54.599
<v Speaker 0>we can skip this helm and jump That

01:02:54.599 --> 01:02:57.075
<v Speaker 1>was just a alternative for him. Actually, just

01:02:57.075 --> 01:02:59.155
<v Speaker 1>go back, and we should be able to

01:02:59.395 --> 01:03:01.875
<v Speaker 1>continue the docs as they are laid out.

01:03:02.115 --> 01:03:04.035
<v Speaker 0>Okay. So now we're doing the multicluster installed

01:03:04.035 --> 01:03:06.915
<v Speaker 0>to each cluster. Mhmm. Alright. So let's just

01:03:06.915 --> 01:03:08.035
<v Speaker 0>do cluster two first.

01:03:09.510 --> 01:03:11.430
<v Speaker 0>I should just split this, shouldn't I? That'd

01:03:11.430 --> 01:03:12.470
<v Speaker 0>a bit easier.

01:03:13.990 --> 01:03:15.190
<v Speaker 0>Linkerd two,

01:03:16.950 --> 01:03:19.190
<v Speaker 0>then do d one, and then do Linkerd

01:03:19.190 --> 01:03:19.590
<v Speaker 0>one.

01:03:22.395 --> 01:03:23.195
<v Speaker 0>Alright.

01:03:23.595 --> 01:03:24.875
<v Speaker 0>So we

01:03:25.115 --> 01:03:25.835
<v Speaker 0>have

01:03:26.555 --> 01:03:29.115
<v Speaker 0>a check command. I love these check commands.

01:03:31.115 --> 01:03:32.795
<v Speaker 0>And we got all the green ticks.

01:03:34.680 --> 01:03:36.280
<v Speaker 0>Good.

01:03:37.160 --> 01:03:39.800
<v Speaker 0>So we've not linked the clusters yet.

01:03:39.880 --> 01:03:40.200
<v Speaker 0>So

01:03:46.275 --> 01:03:48.115
<v Speaker 0>See if I can work with that. So

01:03:48.115 --> 01:03:50.835
<v Speaker 0>what's the context and and this context?

01:03:51.474 --> 01:03:52.275
<v Speaker 1>So

01:03:52.275 --> 01:03:53.954
<v Speaker 1>you probably won't need to worry about the

01:03:53.954 --> 01:03:57.075
<v Speaker 1>context here. This is kind of from a

01:03:59.075 --> 01:04:00.750
<v Speaker 1>blog post that we've got that talks about

01:04:00.750 --> 01:04:02.590
<v Speaker 1>two different clusters, the East cluster and the

01:04:02.590 --> 01:04:04.190
<v Speaker 1>West cluster, and kind of walks you through

01:04:04.190 --> 01:04:04.670
<v Speaker 1>things.

01:04:04.990 --> 01:04:07.230
<v Speaker 1>You'll wanna delete the context

01:04:07.230 --> 01:04:09.550
<v Speaker 1>from this one, but the idea here is

01:04:09.550 --> 01:04:12.190
<v Speaker 1>is that you're gonna run the Linkerd CLI

01:04:12.190 --> 01:04:14.030
<v Speaker 1>on your Linkerd one cluster.

01:04:14.454 --> 01:04:16.775
<v Speaker 1>That's going to the multicluster link is going

01:04:16.775 --> 01:04:17.975
<v Speaker 1>from the

01:04:18.855 --> 01:04:20.214
<v Speaker 1>excuse me. Let me come at this from

01:04:20.214 --> 01:04:22.375
<v Speaker 1>a different angle. When you run Linkerd multi

01:04:22.375 --> 01:04:25.335
<v Speaker 1>cluster link on Linkerd cluster

01:04:25.415 --> 01:04:25.655
<v Speaker 1>one,

01:04:26.470 --> 01:04:29.590
<v Speaker 1>going to output all of the, required

01:04:29.590 --> 01:04:30.550
<v Speaker 1>configuration

01:04:30.550 --> 01:04:33.190
<v Speaker 1>for Linkerd cluster two to talk to Linkerd

01:04:33.190 --> 01:04:34.150
<v Speaker 1>cluster one.

01:04:34.790 --> 01:04:36.310
<v Speaker 1>And so what you're gonna wanna do is

01:04:36.310 --> 01:04:39.750
<v Speaker 1>run the Linkerd multi cluster link

01:04:40.224 --> 01:04:42.785
<v Speaker 1>on cluster one, get the YAML, and then

01:04:42.785 --> 01:04:44.785
<v Speaker 1>apply that YAML to cluster two.

01:04:45.744 --> 01:04:47.585
<v Speaker 0>Got it. Okay. So I can modify this

01:04:47.585 --> 01:04:50.145
<v Speaker 0>in line. So let me pull this along.

01:04:52.160 --> 01:04:54.640
<v Speaker 0>So instead of context east here, which is

01:04:54.640 --> 01:04:56.720
<v Speaker 0>just a Kubernetes config, I can leave that

01:04:56.720 --> 01:04:58.880
<v Speaker 0>blank which is just in cluster one

01:04:58.880 --> 01:05:00.960
<v Speaker 0>and we give this a name. So can

01:05:00.960 --> 01:05:03.440
<v Speaker 0>I just call this Linkerd one? Yep. And

01:05:03.440 --> 01:05:05.680
<v Speaker 0>then here, we're actually just gonna point it

01:05:05.680 --> 01:05:07.440
<v Speaker 0>to the other cube config,

01:05:07.440 --> 01:05:07.920
<v Speaker 0>I guess.

01:05:09.974 --> 01:05:10.695
<v Speaker 1>Yep.

01:05:11.175 --> 01:05:12.535
<v Speaker 0>Linkerd

01:05:12.535 --> 01:05:13.895
<v Speaker 0>two

01:05:13.895 --> 01:05:15.015
<v Speaker 0>dot JSON.

01:05:15.575 --> 01:05:17.735
<v Speaker 0>And that's gonna link cluster one to cluster

01:05:18.694 --> 01:05:19.255
<v Speaker 0>two.

01:05:19.734 --> 01:05:20.135
<v Speaker 1>Right.

01:05:24.920 --> 01:05:26.680
<v Speaker 0>What did I get wrong?

01:05:27.799 --> 01:05:30.520
<v Speaker 1>Let's it says no objects passed to apply.

01:05:30.520 --> 01:05:31.960
<v Speaker 1>There might have been an error there.

01:05:37.240 --> 01:05:38.920
<v Speaker 0>K. What's the

01:05:44.415 --> 01:05:45.615
<v Speaker 0>No ingress.

01:05:46.415 --> 01:05:50.575
<v Speaker 1>So the problem there is that we need

01:05:51.710 --> 01:05:54.589
<v Speaker 1>to have a load balancer with an IP

01:05:54.589 --> 01:05:55.310
<v Speaker 1>address

01:05:55.549 --> 01:05:57.549
<v Speaker 1>public IP address so these two clusters can

01:05:57.549 --> 01:05:58.510
<v Speaker 1>talk to each other.

01:05:59.150 --> 01:06:01.710
<v Speaker 1>So this is saying that we don't have

01:06:01.710 --> 01:06:04.109
<v Speaker 1>a gateway address there yet. So why don't

01:06:04.109 --> 01:06:05.150
<v Speaker 1>we run

01:06:05.735 --> 01:06:06.695
<v Speaker 1>kubectl

01:06:06.695 --> 01:06:08.215
<v Speaker 1>on the

01:06:08.695 --> 01:06:11.415
<v Speaker 1>Linkerd dash multi cluster namespace and look at

01:06:11.415 --> 01:06:12.375
<v Speaker 1>the services,

01:06:13.015 --> 01:06:14.695
<v Speaker 1>figure out what's going on there,

01:06:17.655 --> 01:06:18.775
<v Speaker 1>dash multi cluster?

01:06:24.330 --> 01:06:26.010
<v Speaker 1>So we're still waiting for you to get

01:06:26.010 --> 01:06:28.010
<v Speaker 1>a external IP address.

01:06:30.570 --> 01:06:31.690
<v Speaker 0>Which will never work.

01:06:32.275 --> 01:06:32.995
<v Speaker 0>Uh-oh.

01:06:33.875 --> 01:06:35.395
<v Speaker 0>Yeah. So this is a

01:06:35.955 --> 01:06:38.115
<v Speaker 0>bare metal cluster that needs a very special

01:06:38.115 --> 01:06:40.195
<v Speaker 0>type of load balancer either QVIP

01:06:40.195 --> 01:06:42.995
<v Speaker 0>or metal l b. Let me quickly

01:06:45.650 --> 01:06:46.609
<v Speaker 0>grab

01:06:46.770 --> 01:06:47.490
<v Speaker 0>that

01:06:48.289 --> 01:06:49.650
<v Speaker 0>and see if I can get that working

01:06:49.650 --> 01:06:51.650
<v Speaker 0>in under a minute. And if not, we

01:06:51.650 --> 01:06:53.250
<v Speaker 0>will abort.

01:06:53.730 --> 01:06:54.369
<v Speaker 1>Cool.

01:06:54.690 --> 01:06:55.890
<v Speaker 0>Okay.

01:06:55.890 --> 01:06:56.770
<v Speaker 0>So let's see.

01:06:57.695 --> 01:06:59.535
<v Speaker 1>So the while you're doing that, let me

01:06:59.535 --> 01:07:01.295
<v Speaker 1>kind of explain what's going on here.

01:07:02.575 --> 01:07:04.175
<v Speaker 1>We've actually got a blog post that talks

01:07:04.175 --> 01:07:05.055
<v Speaker 1>a lot about it.

01:07:06.095 --> 01:07:06.735
<v Speaker 1>In,

01:07:07.295 --> 01:07:08.495
<v Speaker 1>our experience,

01:07:09.055 --> 01:07:11.375
<v Speaker 1>when you start talking about multiple clusters of

01:07:11.375 --> 01:07:11.935
<v Speaker 1>Kubernetes,

01:07:12.410 --> 01:07:15.290
<v Speaker 1>it is, very unlikely that they can route

01:07:15.290 --> 01:07:16.490
<v Speaker 1>to each other.

01:07:16.970 --> 01:07:18.090
<v Speaker 1>Imagine having

01:07:18.250 --> 01:07:20.410
<v Speaker 1>a cluster in two different cloud providers, for

01:07:20.410 --> 01:07:20.970
<v Speaker 1>example.

01:07:21.290 --> 01:07:25.130
<v Speaker 1>Having a flat routable network is basically impossible.

01:07:25.130 --> 01:07:27.375
<v Speaker 1>And, I mean, you can do it. It

01:07:27.375 --> 01:07:29.455
<v Speaker 1>just requires a whole bunch of effort. And

01:07:29.455 --> 01:07:31.775
<v Speaker 1>so what we do is rely on

01:07:32.095 --> 01:07:34.495
<v Speaker 1>services with load balancer IPs that are public

01:07:34.495 --> 01:07:37.215
<v Speaker 1>and routable, and then we can just,

01:07:37.615 --> 01:07:41.270
<v Speaker 1>pass traffic through those those gateways into your

01:07:41.270 --> 01:07:41.910
<v Speaker 1>cluster.

01:07:42.230 --> 01:07:44.070
<v Speaker 1>And so you don't need to think about

01:07:44.070 --> 01:07:46.550
<v Speaker 1>any low level networking here. It just gets

01:07:46.550 --> 01:07:47.510
<v Speaker 1>an external

01:07:47.510 --> 01:07:50.470
<v Speaker 1>IP address in most cloud providers, and you're

01:07:50.470 --> 01:07:50.950
<v Speaker 1>good to go.

01:07:53.405 --> 01:07:55.085
<v Speaker 0>So I did install

01:07:56.205 --> 01:07:57.645
<v Speaker 0>QVIP.

01:07:58.365 --> 01:08:00.365
<v Speaker 0>But to be honest, I am not sure

01:08:00.605 --> 01:08:01.885
<v Speaker 0>if I'm gonna need to be able to

01:08:01.885 --> 01:08:03.725
<v Speaker 0>set that up with anything.

01:08:03.965 --> 01:08:05.724
<v Speaker 0>Let's see if I can see anything immediately

01:08:05.724 --> 01:08:06.845
<v Speaker 0>in the logs and if not.

01:08:09.100 --> 01:08:11.260
<v Speaker 0>But data like leader.

01:08:14.220 --> 01:08:15.820
<v Speaker 0>And we should have

01:08:15.900 --> 01:08:17.020
<v Speaker 0>a CCM.

01:08:23.935 --> 01:08:25.375
<v Speaker 0>Cloud controller

01:08:26.655 --> 01:08:27.615
<v Speaker 0>running.

01:08:29.535 --> 01:08:31.375
<v Speaker 0>I think we may

01:08:31.695 --> 01:08:32.015
<v Speaker 0>we

01:08:34.080 --> 01:08:36.239
<v Speaker 0>we'll give it we'll give it thirty seconds.

01:08:36.560 --> 01:08:38.639
<v Speaker 0>May get an IP address. In fact, I

01:08:38.639 --> 01:08:39.760
<v Speaker 0>could probably

01:08:40.639 --> 01:08:43.439
<v Speaker 0>take a look here and see if we

01:08:45.279 --> 01:08:46.494
<v Speaker 0>have thing.

01:08:49.055 --> 01:08:50.175
<v Speaker 0>Yeah. Potentially.

01:08:50.415 --> 01:08:52.415
<v Speaker 0>So normally there would be one elastic guy.

01:08:52.415 --> 01:08:54.415
<v Speaker 0>Oh no. Because I have two clusters. Okay.

01:08:54.415 --> 01:08:56.335
<v Speaker 0>They're maybe not gonna get one then.

01:08:56.654 --> 01:08:57.215
<v Speaker 0>Drats.

01:08:58.510 --> 01:09:00.270
<v Speaker 1>Bummer. Failed. Oh, well.

01:09:01.229 --> 01:09:02.990
<v Speaker 0>It doesn't matter. Like, that would have been

01:09:02.990 --> 01:09:04.910
<v Speaker 0>cool to show off, but I didn't think

01:09:04.910 --> 01:09:07.070
<v Speaker 0>about the ingress aspect of it. So next

01:09:07.070 --> 01:09:09.069
<v Speaker 0>time, I'll definitely get that working.

01:09:09.550 --> 01:09:11.484
<v Speaker 1>Cool. Yeah. I'm I'm sorry. I didn't even

01:09:11.484 --> 01:09:12.204
<v Speaker 1>think about

01:09:12.524 --> 01:09:14.124
<v Speaker 1>giving you heads up on that one.

01:09:14.764 --> 01:09:16.524
<v Speaker 0>Well, I guess you wouldn't have to. Right?

01:09:16.524 --> 01:09:18.764
<v Speaker 0>Normally, not a problem. Cloud providers have this

01:09:18.764 --> 01:09:20.524
<v Speaker 0>little add on that that works with the

01:09:20.524 --> 01:09:23.540
<v Speaker 0>load balancer service type. Unfortunately, bare metal just

01:09:23.540 --> 01:09:25.060
<v Speaker 0>as a little bit different and does require

01:09:25.060 --> 01:09:26.740
<v Speaker 0>a little bit of upfront work. I could

01:09:26.740 --> 01:09:29.460
<v Speaker 0>have installed metal l b, cube dip. I

01:09:29.460 --> 01:09:31.060
<v Speaker 0>think with cube up actually, I need to

01:09:31.060 --> 01:09:32.819
<v Speaker 0>tell it the elastic IP that it has

01:09:32.819 --> 01:09:34.740
<v Speaker 0>control of so they can pass that

01:09:35.104 --> 01:09:37.185
<v Speaker 0>And then I just don't have that config

01:09:37.185 --> 01:09:39.104
<v Speaker 0>and I keep randomly heading that going, maybe

01:09:39.104 --> 01:09:41.505
<v Speaker 0>it'll just magically come into fruition. But it's

01:09:41.505 --> 01:09:42.385
<v Speaker 0>not gonna happen.

01:09:43.024 --> 01:09:45.425
<v Speaker 0>Anyway, I think that's great. Is there anything

01:09:45.425 --> 01:09:47.265
<v Speaker 0>else quickly you wanna go over before we

01:09:47.265 --> 01:09:49.024
<v Speaker 0>wrap up with that you think would be

01:09:49.024 --> 01:09:49.824
<v Speaker 0>cool to show off?

01:09:50.530 --> 01:09:52.130
<v Speaker 1>No. I think that's pretty good.

01:09:52.530 --> 01:09:53.810
<v Speaker 1>We've kind of covered

01:09:53.970 --> 01:09:55.890
<v Speaker 1>most of the feature set, to be honest.

01:09:56.610 --> 01:09:58.210
<v Speaker 0>Yeah. I mean, there was a lot going

01:09:58.210 --> 01:09:59.890
<v Speaker 0>on there. And again, it was really trivial,

01:09:59.890 --> 01:10:01.650
<v Speaker 0>really easy to play with. I I just

01:10:01.650 --> 01:10:03.010
<v Speaker 0>like how intuitive

01:10:03.125 --> 01:10:05.445
<v Speaker 0>the the CLI was itself and how easy

01:10:05.445 --> 01:10:07.525
<v Speaker 0>it was to work through the documentation.

01:10:07.525 --> 01:10:09.364
<v Speaker 0>Like it was just well, it was a

01:10:09.364 --> 01:10:12.324
<v Speaker 0>pleasure to work with actually. Good. Thank you.

01:10:12.804 --> 01:10:14.485
<v Speaker 0>Well, I wanted to say thank you very

01:10:14.485 --> 01:10:15.925
<v Speaker 0>much for joining me, taking the time out

01:10:15.925 --> 01:10:18.190
<v Speaker 0>of your day to come and show us

01:10:18.190 --> 01:10:20.590
<v Speaker 0>Linkerd. I'm looking forward to exploring and playing

01:10:20.590 --> 01:10:22.909
<v Speaker 0>with it more. It's a really cool tool

01:10:22.909 --> 01:10:24.670
<v Speaker 0>and service mesh like we, you know, we

01:10:24.670 --> 01:10:26.349
<v Speaker 0>we touched a little better on this just

01:10:26.349 --> 01:10:28.030
<v Speaker 0>why would I want this thing in my

01:10:28.030 --> 01:10:30.270
<v Speaker 0>cluster, you know, with the complexities that we're

01:10:30.270 --> 01:10:31.869
<v Speaker 0>pushing down from the software layer

01:10:33.515 --> 01:10:35.435
<v Speaker 0>And I think Linkerd plays a big part

01:10:35.435 --> 01:10:37.275
<v Speaker 0>of that. Thank you for joining me. Have

01:10:37.275 --> 01:10:38.715
<v Speaker 0>a great day and I will hopefully speak

01:10:38.715 --> 01:10:41.595
<v Speaker 0>to you again soon. Awesome. Alright. Bye.
