WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 5e051426-9c72-4fd5-9d40-d224a25eaab9
Created: 2025-04-29T20:36:52.230Z
Duration: 5298.7075
Channels: 1

00:01:22.780 --> 00:01:25.820
<v Speaker 0>Hello, and welcome to today's episode of Rawkode

00:01:25.820 --> 00:01:27.900
<v Speaker 0>live. I'm your host, Rawkode.

00:01:28.140 --> 00:01:29.900
<v Speaker 0>Today, we're gonna take a look at my

00:01:29.900 --> 00:01:32.780
<v Speaker 0>favorite SaaS and open source integration framework,

00:01:32.780 --> 00:01:33.900
<v Speaker 0>Pipedream.

00:01:34.060 --> 00:01:35.659
<v Speaker 0>But before we do that, I need to

00:01:35.659 --> 00:01:37.595
<v Speaker 0>say thank you to my employer, Equinix Medal.

00:01:37.595 --> 00:01:39.835
<v Speaker 0>Equinix Medal is a bare metal cloud,

00:01:40.235 --> 00:01:42.155
<v Speaker 0>and they give me the time and the

00:01:42.155 --> 00:01:44.635
<v Speaker 0>resources to invest in this show and produce

00:01:44.635 --> 00:01:46.475
<v Speaker 0>content so that we can all learn together.

00:01:46.715 --> 00:01:48.555
<v Speaker 0>If you wanna check out Equinix Medal, you

00:01:48.555 --> 00:01:50.479
<v Speaker 0>can visit medal.equinix.com,

00:01:50.479 --> 00:01:52.320
<v Speaker 0>and you can use the code Rawkode dash

00:01:52.320 --> 00:01:55.119
<v Speaker 0>live. This will give you $50 in credit.

00:01:55.280 --> 00:01:57.680
<v Speaker 0>That $50 can get you around one hundred

00:01:57.680 --> 00:01:59.759
<v Speaker 0>hours of compute on our smallest instance, but

00:01:59.759 --> 00:02:01.280
<v Speaker 0>it's much more fun to get the bigger

00:02:01.280 --> 00:02:03.119
<v Speaker 0>instances and spend it a little bit quicker.

00:02:03.119 --> 00:02:04.159
<v Speaker 0>So check it out and let me know

00:02:04.159 --> 00:02:04.720
<v Speaker 0>how you get up.

00:02:05.615 --> 00:02:08.255
<v Speaker 0>Now, today, I am joined by the cofounder

00:02:08.255 --> 00:02:11.775
<v Speaker 0>and engineer at Pipedream, Dylan Sather. Hey. How

00:02:11.775 --> 00:02:14.175
<v Speaker 0>are you, Dylan? Good. Good. Thank you for

00:02:14.175 --> 00:02:16.735
<v Speaker 1>having me, David. No. No. It's my pleasure.

00:02:16.975 --> 00:02:18.655
<v Speaker 0>I know it's it's not hyperbole when I

00:02:18.655 --> 00:02:20.255
<v Speaker 0>say that this is my favorite SaaS product,

00:02:20.300 --> 00:02:21.900
<v Speaker 0>and I I'm really looking forward to showing

00:02:21.900 --> 00:02:24.460
<v Speaker 0>people it today. Awesome. Mhmm.

00:02:24.940 --> 00:02:27.420
<v Speaker 0>Do you wanna just give yourself a quick

00:02:27.420 --> 00:02:28.300
<v Speaker 0>introduction,

00:02:28.380 --> 00:02:30.620
<v Speaker 0>and then we'll kinda talk about Pipedream after

00:02:30.620 --> 00:02:31.180
<v Speaker 0>that?

00:02:31.580 --> 00:02:31.820
<v Speaker 1>Sure.

00:02:32.795 --> 00:02:36.315
<v Speaker 1>Yes. So I am one of eight cofounders

00:02:36.315 --> 00:02:37.355
<v Speaker 1>at Pipedream.

00:02:37.435 --> 00:02:39.195
<v Speaker 1>I'll go into a little bit of our

00:02:39.195 --> 00:02:41.755
<v Speaker 1>team history in a moment, but we've worked

00:02:41.755 --> 00:02:44.235
<v Speaker 1>together for about ten years as a team.

00:02:44.810 --> 00:02:47.610
<v Speaker 1>We founded Pipedream just a couple of years

00:02:47.610 --> 00:02:50.650
<v Speaker 1>ago and then launched Pipedream in October of

00:02:50.650 --> 00:02:52.650
<v Speaker 1>twenty nineteen officially.

00:02:53.209 --> 00:02:55.610
<v Speaker 1>I've done a little bit of engineering,

00:02:55.610 --> 00:02:59.045
<v Speaker 1>data science, teaching in my career, but I

00:02:59.045 --> 00:03:00.885
<v Speaker 1>really love right now, I I do a

00:03:00.885 --> 00:03:03.445
<v Speaker 1>lot of developer advocacy work for Pipedream,

00:03:03.445 --> 00:03:05.845
<v Speaker 1>and so happy to share with everyone. I'm

00:03:05.845 --> 00:03:07.205
<v Speaker 1>really excited to show it off.

00:03:08.005 --> 00:03:08.645
<v Speaker 0>Awesome.

00:03:09.365 --> 00:03:12.005
<v Speaker 0>Do you have a few slides, I believe,

00:03:12.005 --> 00:03:14.040
<v Speaker 0>that we're gonna run through? Yes.

00:03:14.600 --> 00:03:16.120
<v Speaker 0>I mean, we could talk about Pipedream first

00:03:16.120 --> 00:03:17.320
<v Speaker 0>if you want or we can do the

00:03:17.320 --> 00:03:18.360
<v Speaker 0>slides and then we have a little bit

00:03:18.360 --> 00:03:19.880
<v Speaker 0>of a chat. It's up to you. Yeah.

00:03:19.880 --> 00:03:22.600
<v Speaker 1>We'll give I'll I'll give the 10,000 foot

00:03:22.600 --> 00:03:24.920
<v Speaker 1>view first. The slides kinda cover,

00:03:25.655 --> 00:03:28.135
<v Speaker 1>really the high level of what Pipedream is,

00:03:28.135 --> 00:03:29.735
<v Speaker 1>how people use it. I think that will

00:03:29.735 --> 00:03:31.095
<v Speaker 1>set the stage for

00:03:31.815 --> 00:03:33.255
<v Speaker 1>for the rest of the

00:03:33.655 --> 00:03:34.855
<v Speaker 1>conversation.

00:03:35.495 --> 00:03:38.855
<v Speaker 1>So can you see the presentation and present

00:03:38.855 --> 00:03:42.330
<v Speaker 1>mode okay? I can. Looks great. Great. Great.

00:03:42.330 --> 00:03:42.970
<v Speaker 1>Okay.

00:03:43.450 --> 00:03:45.450
<v Speaker 1>So I briefly went over this.

00:03:45.930 --> 00:03:48.730
<v Speaker 1>You know, my my technical title at Pipedream

00:03:48.730 --> 00:03:50.810
<v Speaker 1>is a product hacker. That just it's a

00:03:50.810 --> 00:03:53.290
<v Speaker 1>title that I invented at my former company,

00:03:53.290 --> 00:03:53.850
<v Speaker 1>BrightRole,

00:03:54.125 --> 00:03:55.805
<v Speaker 1>kinda captures the

00:03:55.885 --> 00:03:56.685
<v Speaker 1>multifaceted

00:03:56.685 --> 00:03:59.005
<v Speaker 1>nature of my role as a as a

00:03:59.005 --> 00:04:01.085
<v Speaker 1>technical cofounder here at Pipedream.

00:04:01.405 --> 00:04:03.724
<v Speaker 1>Again, I do a lot of developer advocacy

00:04:03.724 --> 00:04:05.965
<v Speaker 1>and some data science work, a little product

00:04:05.965 --> 00:04:06.845
<v Speaker 1>management work for us.

00:04:08.020 --> 00:04:11.140
<v Speaker 1>Formerly, I I taught data analytics at Berkeley

00:04:11.140 --> 00:04:14.020
<v Speaker 1>and was a data scientist at BrightRoll and

00:04:14.020 --> 00:04:14.980
<v Speaker 1>Instacart

00:04:14.980 --> 00:04:16.100
<v Speaker 1>for a couple years.

00:04:16.580 --> 00:04:19.459
<v Speaker 1>Like I mentioned, our team, there are eight

00:04:19.459 --> 00:04:20.980
<v Speaker 1>of us right now. We worked together for

00:04:20.980 --> 00:04:23.365
<v Speaker 1>about the past ten years, primarily at a

00:04:23.365 --> 00:04:24.725
<v Speaker 1>company called BrightRoll.

00:04:24.725 --> 00:04:26.405
<v Speaker 1>It was a video advertising

00:04:26.405 --> 00:04:27.445
<v Speaker 1>exchange

00:04:27.764 --> 00:04:29.365
<v Speaker 1>that did a lot of programmatic

00:04:29.925 --> 00:04:32.565
<v Speaker 1>delivery of advertising on the Internet. So it's

00:04:32.565 --> 00:04:35.125
<v Speaker 1>a lot of really high scale

00:04:35.285 --> 00:04:38.040
<v Speaker 1>and big data challenges there. I this to

00:04:38.040 --> 00:04:39.560
<v Speaker 1>David a little while ago. We actually used

00:04:39.560 --> 00:04:41.720
<v Speaker 1>Equinix at BrightRoll. We had a a big

00:04:41.720 --> 00:04:44.680
<v Speaker 1>cage down in, data center here in California.

00:04:45.560 --> 00:04:48.360
<v Speaker 1>So thank you, David, and Equinix.

00:04:48.760 --> 00:04:49.720
<v Speaker 1>Pipedream,

00:04:49.720 --> 00:04:52.465
<v Speaker 1>like I mentioned, launched in October 2019. It's

00:04:52.465 --> 00:04:54.224
<v Speaker 1>a little over a year ago, and we've

00:04:54.224 --> 00:04:56.145
<v Speaker 1>been building the platform and improving it ever

00:04:56.145 --> 00:04:56.705
<v Speaker 1>since.

00:04:57.824 --> 00:04:58.945
<v Speaker 1>So, fundamentally,

00:04:59.185 --> 00:05:02.145
<v Speaker 1>Pipedream is an integration platform. If you've heard

00:05:02.145 --> 00:05:04.305
<v Speaker 1>of or ever used tools like Zapier,

00:05:04.729 --> 00:05:06.410
<v Speaker 1>if Integromat,

00:05:06.490 --> 00:05:09.770
<v Speaker 1>Pipedream falls broadly into that category. I'll talk

00:05:09.770 --> 00:05:11.690
<v Speaker 1>about how we're similar to those tools and

00:05:11.690 --> 00:05:13.130
<v Speaker 1>also how we're different. So

00:05:13.690 --> 00:05:16.970
<v Speaker 1>an integration platform fundamentally just helps you automate

00:05:16.970 --> 00:05:17.850
<v Speaker 1>workflows

00:05:18.315 --> 00:05:19.675
<v Speaker 1>often between

00:05:19.675 --> 00:05:21.755
<v Speaker 1>or within applications.

00:05:22.075 --> 00:05:24.155
<v Speaker 1>Apps is a broad term. You know, by

00:05:24.155 --> 00:05:26.075
<v Speaker 1>that, I mean, any API

00:05:26.395 --> 00:05:29.275
<v Speaker 1>or service provided by some app.

00:05:30.330 --> 00:05:32.009
<v Speaker 1>Pipedream workflows

00:05:32.009 --> 00:05:34.409
<v Speaker 1>are event driven, and this is pretty common

00:05:34.409 --> 00:05:35.930
<v Speaker 1>with these platforms.

00:05:36.250 --> 00:05:37.690
<v Speaker 1>So some event

00:05:37.849 --> 00:05:39.370
<v Speaker 1>typically triggers

00:05:39.370 --> 00:05:42.410
<v Speaker 1>a workflow that can be an HTTP request,

00:05:42.490 --> 00:05:43.289
<v Speaker 1>an email,

00:05:43.835 --> 00:05:46.315
<v Speaker 1>an event from a third party API or

00:05:46.315 --> 00:05:48.875
<v Speaker 1>SaaS service. And then when that event occurs,

00:05:48.875 --> 00:05:51.755
<v Speaker 1>we run some workflow, some set of steps

00:05:51.835 --> 00:05:53.755
<v Speaker 1>that define our automation.

00:05:54.315 --> 00:05:55.355
<v Speaker 1>So, for example,

00:05:55.515 --> 00:05:57.660
<v Speaker 1>it's a common ones. Every time a new

00:05:57.660 --> 00:05:59.820
<v Speaker 1>file is uploaded to Google Drive, I wanna

00:05:59.820 --> 00:06:01.660
<v Speaker 1>receive an email. So I might wanna watch

00:06:01.660 --> 00:06:04.460
<v Speaker 1>a specific folder and get notified immediately when

00:06:04.460 --> 00:06:05.900
<v Speaker 1>someone uploads a file.

00:06:06.620 --> 00:06:09.340
<v Speaker 1>I might save tweets to Google Sheets if

00:06:09.340 --> 00:06:11.224
<v Speaker 1>I'm, you a data scientist and do an

00:06:11.224 --> 00:06:14.905
<v Speaker 1>analysis on some political tweets, for example. I

00:06:14.905 --> 00:06:17.064
<v Speaker 1>may wanna just save all of those for

00:06:17.064 --> 00:06:17.865
<v Speaker 1>archival

00:06:17.865 --> 00:06:19.465
<v Speaker 1>and analysis later.

00:06:20.905 --> 00:06:24.104
<v Speaker 1>Pipedream, like many integration platforms, supports cron jobs.

00:06:24.349 --> 00:06:26.030
<v Speaker 1>So every day, I wanna run a SQL

00:06:26.030 --> 00:06:28.750
<v Speaker 1>query, send those results to Slack.

00:06:29.629 --> 00:06:32.750
<v Speaker 1>And, you know, Pipedream, many platforms,

00:06:32.990 --> 00:06:35.310
<v Speaker 1>do have this generic HTTP

00:06:35.310 --> 00:06:37.150
<v Speaker 1>interface. So I can spin up a workflow.

00:06:37.575 --> 00:06:39.575
<v Speaker 1>I get an HTTP endpoint.

00:06:39.735 --> 00:06:42.055
<v Speaker 1>I can send any HTTP request to that

00:06:42.055 --> 00:06:42.775
<v Speaker 1>endpoint,

00:06:42.935 --> 00:06:44.775
<v Speaker 1>and then, for example, you know, save the

00:06:44.775 --> 00:06:48.215
<v Speaker 1>payload to s three or some storage somewhere.

00:06:49.175 --> 00:06:51.335
<v Speaker 1>So where Pipedream differs than the other integration

00:06:51.335 --> 00:06:54.169
<v Speaker 1>platform most other integration platforms that I mentioned

00:06:54.169 --> 00:06:54.810
<v Speaker 1>before.

00:06:55.210 --> 00:06:57.690
<v Speaker 1>We squarely target developers.

00:06:57.690 --> 00:06:59.770
<v Speaker 1>So I wanna go through what this means.

00:07:00.169 --> 00:07:01.290
<v Speaker 1>Fundamentally,

00:07:01.370 --> 00:07:03.850
<v Speaker 1>at the top, this diagram, I think, kind

00:07:03.850 --> 00:07:06.410
<v Speaker 1>of explains the the general premise of Pipedream

00:07:06.410 --> 00:07:08.975
<v Speaker 1>well. Like I mentioned, you have triggers. Okay?

00:07:08.975 --> 00:07:11.215
<v Speaker 1>The trigger can be an HTTP request,

00:07:11.295 --> 00:07:13.055
<v Speaker 1>an incoming Slack message.

00:07:13.375 --> 00:07:15.535
<v Speaker 1>Whatever starts your workflow,

00:07:15.695 --> 00:07:17.055
<v Speaker 1>that event is the trigger.

00:07:17.455 --> 00:07:18.735
<v Speaker 1>Now in Pipedream,

00:07:18.975 --> 00:07:20.895
<v Speaker 1>I could run any Node. Js code that

00:07:20.895 --> 00:07:24.340
<v Speaker 1>I want. We have thousands of prepackaged steps

00:07:24.340 --> 00:07:26.260
<v Speaker 1>that we call actions. We'll go over some

00:07:26.260 --> 00:07:27.060
<v Speaker 1>of these today.

00:07:27.780 --> 00:07:29.540
<v Speaker 1>Actions are just

00:07:29.780 --> 00:07:32.820
<v Speaker 1>node code that someone else wrote and packaged

00:07:32.820 --> 00:07:35.700
<v Speaker 1>it such that Pipedream provides a UI

00:07:35.780 --> 00:07:37.745
<v Speaker 1>for interacting with that step. You don't have

00:07:37.745 --> 00:07:39.185
<v Speaker 1>to write the note code. You can just

00:07:39.185 --> 00:07:41.824
<v Speaker 1>use the preexisting code that we've written. But

00:07:41.824 --> 00:07:43.824
<v Speaker 1>behind the scenes, everything is actually note code,

00:07:43.824 --> 00:07:45.345
<v Speaker 1>and you can write your own.

00:07:45.665 --> 00:07:47.505
<v Speaker 1>So I have a lot of workflows where

00:07:47.505 --> 00:07:49.745
<v Speaker 1>I trigger an event on some incoming event

00:07:49.745 --> 00:07:51.025
<v Speaker 1>from AWS, for example.

00:07:51.850 --> 00:07:54.250
<v Speaker 1>And then I run custom node code without

00:07:54.250 --> 00:07:56.330
<v Speaker 1>using any of the pre built steps because

00:07:56.330 --> 00:07:58.890
<v Speaker 1>my workflow is is very custom to my

00:07:58.890 --> 00:08:01.210
<v Speaker 1>use case. Right? Nobody's created a step for

00:08:01.210 --> 00:08:03.370
<v Speaker 1>that before. So Pipedream gives you this flexibility.

00:08:04.005 --> 00:08:07.125
<v Speaker 1>And then we also have managed off. This

00:08:07.125 --> 00:08:08.965
<v Speaker 1>is one of the other secret sauces of

00:08:08.965 --> 00:08:11.765
<v Speaker 1>Pipedream that integration platforms do well.

00:08:12.565 --> 00:08:15.205
<v Speaker 1>We essentially let you one click a lot

00:08:15.205 --> 00:08:16.005
<v Speaker 1>into

00:08:16.164 --> 00:08:18.919
<v Speaker 1>hundreds of apps. Some apps, you enter your

00:08:18.919 --> 00:08:20.759
<v Speaker 1>API key because that's the way that integration

00:08:20.759 --> 00:08:24.040
<v Speaker 1>works. But Pipedream stores that authorization

00:08:24.520 --> 00:08:25.400
<v Speaker 1>information,

00:08:25.479 --> 00:08:27.720
<v Speaker 1>and then it uses that within your workflow.

00:08:27.800 --> 00:08:29.800
<v Speaker 1>So we, for example, refresh

00:08:29.880 --> 00:08:32.520
<v Speaker 1>authorization token so that you manage none

00:08:32.674 --> 00:08:35.394
<v Speaker 1>of what is often a complex off process

00:08:35.394 --> 00:08:37.714
<v Speaker 1>for these apps. You just one click, you're

00:08:37.714 --> 00:08:39.954
<v Speaker 1>in, and you can use your own account

00:08:39.954 --> 00:08:41.875
<v Speaker 1>and get access to your resources.

00:08:42.995 --> 00:08:45.875
<v Speaker 1>Some of Pipedream's key ideas, just to reiterate

00:08:45.875 --> 00:08:46.514
<v Speaker 1>some of these things,

00:08:47.210 --> 00:08:49.450
<v Speaker 1>I shouldn't have to write code to build

00:08:49.450 --> 00:08:51.290
<v Speaker 1>a workflow. So we we do this is

00:08:51.290 --> 00:08:53.210
<v Speaker 1>why we see ourselves as similar to the

00:08:53.210 --> 00:08:55.290
<v Speaker 1>Zapier's of the if this, then that's of

00:08:55.290 --> 00:08:56.010
<v Speaker 1>the world.

00:08:56.650 --> 00:08:59.530
<v Speaker 1>Even as an engineer, I don't want to

00:08:59.530 --> 00:09:02.295
<v Speaker 1>write code if I'm just developing a quick

00:09:02.295 --> 00:09:05.015
<v Speaker 1>integration. Right? If it's tangential to

00:09:05.175 --> 00:09:06.695
<v Speaker 1>my core workflow,

00:09:06.855 --> 00:09:08.215
<v Speaker 1>I just wanna get it out and get

00:09:08.215 --> 00:09:11.095
<v Speaker 1>something working. Okay? But the key idea is

00:09:11.095 --> 00:09:13.255
<v Speaker 1>that I can write code. Right? If I

00:09:13.255 --> 00:09:16.110
<v Speaker 1>need to extend it, I wanna be able

00:09:16.110 --> 00:09:18.029
<v Speaker 1>to get into the code and modify it

00:09:18.029 --> 00:09:20.670
<v Speaker 1>slightly if that step doesn't quite suit my

00:09:20.670 --> 00:09:21.310
<v Speaker 1>needs.

00:09:21.790 --> 00:09:23.950
<v Speaker 1>When I do write code, it should be

00:09:23.950 --> 00:09:24.589
<v Speaker 1>easy.

00:09:24.910 --> 00:09:26.670
<v Speaker 1>I shouldn't have to spin up,

00:09:27.485 --> 00:09:29.885
<v Speaker 1>for example, a a Docker container or a

00:09:29.885 --> 00:09:32.445
<v Speaker 1>pod in Kubernetes just to run a basic

00:09:32.445 --> 00:09:34.685
<v Speaker 1>workflow. Right? I shouldn't have to create a

00:09:34.685 --> 00:09:36.365
<v Speaker 1>AWS Lambda script.

00:09:37.245 --> 00:09:39.245
<v Speaker 1>In the end, right, I just wanna be

00:09:39.245 --> 00:09:42.240
<v Speaker 1>able to quickly write code, deploy it, test

00:09:42.240 --> 00:09:45.360
<v Speaker 1>it, and ship it. So we'll go into

00:09:45.360 --> 00:09:48.000
<v Speaker 1>how that development workflow works in Pipedream.

00:09:48.080 --> 00:09:50.480
<v Speaker 1>I mentioned that everything is JavaScript. Okay? So

00:09:50.480 --> 00:09:52.720
<v Speaker 1>even the prebuilt steps that you use in

00:09:52.720 --> 00:09:55.645
<v Speaker 1>Pipedream, it's all just node code. You can

00:09:55.645 --> 00:09:57.405
<v Speaker 1>click into a step and modify it in

00:09:57.405 --> 00:09:59.325
<v Speaker 1>any way you want. When you write custom

00:09:59.325 --> 00:10:02.285
<v Speaker 1>node code, you can require any NPM package.

00:10:03.085 --> 00:10:04.605
<v Speaker 1>So you can extend,

00:10:04.925 --> 00:10:07.485
<v Speaker 1>Pipedream to, you know, the NPM ecosystem.

00:10:09.050 --> 00:10:11.850
<v Speaker 1>Integrations are open source. Okay. So all the

00:10:11.850 --> 00:10:13.610
<v Speaker 1>actions that we provide,

00:10:13.850 --> 00:10:15.769
<v Speaker 1>again, you can see and modify that code

00:10:15.769 --> 00:10:18.329
<v Speaker 1>to suit your needs. We'll talk about event

00:10:18.329 --> 00:10:22.329
<v Speaker 1>sources. Event sources fundamentally are workflow triggers, I

00:10:22.329 --> 00:10:22.570
<v Speaker 1>mentioned.

00:10:23.345 --> 00:10:25.345
<v Speaker 1>Anytime you receive a new tweet,

00:10:25.585 --> 00:10:26.785
<v Speaker 1>run your workflow.

00:10:26.945 --> 00:10:27.665
<v Speaker 1>That

00:10:28.385 --> 00:10:30.785
<v Speaker 1>trigger, right, anytime I receive a new tweet,

00:10:30.785 --> 00:10:32.545
<v Speaker 1>we call that an event source.

00:10:32.705 --> 00:10:35.025
<v Speaker 1>Those are also open source in our GitHub

00:10:35.025 --> 00:10:37.105
<v Speaker 1>repo, and I'll show you a link to

00:10:37.105 --> 00:10:37.745
<v Speaker 1>that at the end.

00:10:38.399 --> 00:10:41.279
<v Speaker 1>So anyone can submit PRs for new triggers,

00:10:41.279 --> 00:10:42.480
<v Speaker 1>anyone can modify

00:10:42.879 --> 00:10:44.639
<v Speaker 1>any existing event sources.

00:10:45.600 --> 00:10:48.319
<v Speaker 1>We have things that, again, as a developer

00:10:48.319 --> 00:10:49.279
<v Speaker 1>platform,

00:10:49.839 --> 00:10:52.765
<v Speaker 1>we have expectations of developers for, I need

00:10:52.765 --> 00:10:55.005
<v Speaker 1>to maintain state across executions.

00:10:55.005 --> 00:10:57.165
<v Speaker 1>I need a key value store, for example.

00:10:57.645 --> 00:10:59.645
<v Speaker 1>I need to manage the concurrency and rate

00:10:59.645 --> 00:11:00.285
<v Speaker 1>limiting.

00:11:00.685 --> 00:11:03.485
<v Speaker 1>I might need to serialize the execution of

00:11:03.485 --> 00:11:04.605
<v Speaker 1>my workflows.

00:11:04.845 --> 00:11:07.964
<v Speaker 1>If I'm managing state that depends on a

00:11:07.340 --> 00:11:09.980
<v Speaker 1>single execution finishing before the next begins, or

00:11:09.980 --> 00:11:11.820
<v Speaker 1>I have a downstream API

00:11:11.980 --> 00:11:13.580
<v Speaker 1>that's rate limited. So I have to make

00:11:13.580 --> 00:11:16.540
<v Speaker 1>sure incoming events are buffered

00:11:16.620 --> 00:11:19.020
<v Speaker 1>and then are executed at a given rate

00:11:19.020 --> 00:11:21.260
<v Speaker 1>limit so I don't hit those rate limits

00:11:21.260 --> 00:11:22.380
<v Speaker 1>in my downstream service.

00:11:22.725 --> 00:11:24.725
<v Speaker 1>So all of the controls that you expect

00:11:24.725 --> 00:11:25.285
<v Speaker 1>from,

00:11:25.765 --> 00:11:27.365
<v Speaker 1>you know, again, a mature

00:11:27.605 --> 00:11:28.485
<v Speaker 1>platform,

00:11:28.805 --> 00:11:31.765
<v Speaker 1>that provides state and these controls Pipedream provides.

00:11:31.765 --> 00:11:32.245
<v Speaker 1>We

00:11:33.045 --> 00:11:36.404
<v Speaker 1>also believe that, low volume workflow should be

00:11:36.404 --> 00:11:37.205
<v Speaker 1>free,

00:11:37.285 --> 00:11:38.005
<v Speaker 1>and, currently,

00:11:38.510 --> 00:11:42.110
<v Speaker 1>our free tier provides a hundred thousand invocations.

00:11:42.270 --> 00:11:44.430
<v Speaker 1>So I can run a workflow that's an

00:11:44.430 --> 00:11:45.150
<v Speaker 1>invocation.

00:11:45.950 --> 00:11:48.750
<v Speaker 1>Hundred thousand invocations per month. Okay?

00:11:49.230 --> 00:11:51.390
<v Speaker 1>There are daily caps and some other platform

00:11:51.390 --> 00:11:53.470
<v Speaker 1>limits that we embed, but fundamentally,

00:11:53.550 --> 00:11:55.925
<v Speaker 1>we love to provide the platform for free

00:11:55.925 --> 00:11:57.765
<v Speaker 1>so people can use it. If you need

00:11:57.765 --> 00:11:59.445
<v Speaker 1>to run more than a hundred thousand invocations

00:11:59.445 --> 00:12:01.765
<v Speaker 1>a month, you can upgrade to our professional

00:12:01.765 --> 00:12:02.485
<v Speaker 1>tier.

00:12:03.685 --> 00:12:05.765
<v Speaker 1>So the last slide, I just wanted to

00:12:05.765 --> 00:12:08.085
<v Speaker 1>this will segue nicely into what David and

00:12:08.085 --> 00:12:08.885
<v Speaker 1>I are gonna do today.

00:12:09.399 --> 00:12:11.800
<v Speaker 1>But, you know, we often hear the question

00:12:11.800 --> 00:12:14.040
<v Speaker 1>for new Pipedream developers. Where does Pipedream fit

00:12:14.040 --> 00:12:15.080
<v Speaker 1>into my stack?

00:12:15.320 --> 00:12:17.240
<v Speaker 1>So I wanted to call out four common

00:12:17.240 --> 00:12:19.480
<v Speaker 1>use cases just to kind of pin those

00:12:19.480 --> 00:12:20.279
<v Speaker 1>in your mind.

00:12:20.839 --> 00:12:22.920
<v Speaker 1>One, one of the most common ones is

00:12:22.920 --> 00:12:25.480
<v Speaker 1>I have an asynchronous

00:12:24.455 --> 00:12:25.335
<v Speaker 1>HTTP

00:12:25.335 --> 00:12:26.535
<v Speaker 1>driven workflow.

00:12:27.015 --> 00:12:29.095
<v Speaker 1>The trigger here is just an example of

00:12:29.095 --> 00:12:30.695
<v Speaker 1>the HTTP driven workflow.

00:12:30.775 --> 00:12:33.335
<v Speaker 1>But, fundamentally, I have some logic where I

00:12:33.335 --> 00:12:36.215
<v Speaker 1>wanna send, for example, an HTTP request to

00:12:36.215 --> 00:12:37.015
<v Speaker 1>Pipedream,

00:12:37.095 --> 00:12:39.829
<v Speaker 1>and then Pipedream manage all the other logic

00:12:39.829 --> 00:12:41.589
<v Speaker 1>for what I'm gonna do in my workflow.

00:12:41.589 --> 00:12:43.670
<v Speaker 1>But Pipedream responds immediately

00:12:43.910 --> 00:12:45.829
<v Speaker 1>to me with a 200 okay. Once I

00:12:45.829 --> 00:12:48.470
<v Speaker 1>send the request, Pipedream says, I've got it,

00:12:48.630 --> 00:12:49.750
<v Speaker 1>and I'm gonna run the rest of this

00:12:49.750 --> 00:12:50.790
<v Speaker 1>logic asynchronously.

00:12:51.075 --> 00:12:53.075
<v Speaker 1>And Pipedream workflows can run up to five

00:12:53.075 --> 00:12:55.155
<v Speaker 1>minutes for each indication.

00:12:55.555 --> 00:12:57.715
<v Speaker 1>So, again, Pipedream is handling all of that

00:12:57.715 --> 00:12:59.715
<v Speaker 1>workflow logic async, and you can continue to

00:12:59.715 --> 00:13:02.995
<v Speaker 1>send events, get that immediate 200 okay response

00:13:02.995 --> 00:13:04.995
<v Speaker 1>to process that. I linked to a workflow

00:13:04.995 --> 00:13:06.755
<v Speaker 1>here that actually handles our

00:13:06.970 --> 00:13:09.210
<v Speaker 1>new user sign up flow. This is a

00:13:09.210 --> 00:13:10.810
<v Speaker 1>common one. So we just send the HTTP

00:13:10.810 --> 00:13:14.090
<v Speaker 1>request with the user's email, their name.

00:13:14.570 --> 00:13:16.650
<v Speaker 1>We send the user an email behind the

00:13:16.650 --> 00:13:19.370
<v Speaker 1>scenes. We track it for analytics purposes, etcetera.

00:13:20.165 --> 00:13:22.485
<v Speaker 1>We also provide the ability to create your

00:13:22.485 --> 00:13:24.245
<v Speaker 1>own HTTP APIs.

00:13:24.245 --> 00:13:26.245
<v Speaker 1>So if you need to respond back to

00:13:26.245 --> 00:13:27.045
<v Speaker 1>the client,

00:13:27.285 --> 00:13:29.204
<v Speaker 1>you can do that from a Pipedream workflow.

00:13:29.204 --> 00:13:31.445
<v Speaker 1>Right? So incoming request comes.

00:13:31.764 --> 00:13:34.404
<v Speaker 1>I hit some third party API from the

00:13:34.404 --> 00:13:34.884
<v Speaker 1>workflow.

00:13:35.220 --> 00:13:37.459
<v Speaker 1>I crunch the data, and I respond with

00:13:37.459 --> 00:13:39.459
<v Speaker 1>that back to the client. One of the

00:13:39.459 --> 00:13:41.379
<v Speaker 1>simplest examples is I can actually turn a

00:13:41.379 --> 00:13:42.660
<v Speaker 1>Google spreadsheet

00:13:42.899 --> 00:13:44.579
<v Speaker 1>into a JSON API.

00:13:44.980 --> 00:13:46.579
<v Speaker 1>So take the data I have in a

00:13:46.579 --> 00:13:49.540
<v Speaker 1>spreadsheet, return it back, format it as JSON

00:13:49.540 --> 00:13:50.259
<v Speaker 1>to the client.

00:13:51.115 --> 00:13:54.075
<v Speaker 1>Cron jobs are a big one for us.

00:13:54.075 --> 00:13:55.835
<v Speaker 1>I believe Pipedream is one of the easiest

00:13:55.835 --> 00:13:57.755
<v Speaker 1>ways to run a Cron job. Hopefully, we

00:13:57.755 --> 00:13:59.835
<v Speaker 1>can just show that off really quickly today.

00:14:00.075 --> 00:14:00.875
<v Speaker 1>Internally,

00:14:01.115 --> 00:14:02.395
<v Speaker 1>you know, we run a lot of SQL

00:14:02.395 --> 00:14:03.995
<v Speaker 1>queries through database checks.

00:14:04.550 --> 00:14:07.750
<v Speaker 1>Send a lot of custom metrics to CloudWatch,

00:14:07.750 --> 00:14:09.430
<v Speaker 1>for example, on a schedule,

00:14:09.990 --> 00:14:10.790
<v Speaker 1>etcetera.

00:14:11.189 --> 00:14:14.790
<v Speaker 1>Finally, the big class of workflows is ones

00:14:14.790 --> 00:14:18.045
<v Speaker 1>that are triggered from, again, these SaaS or

00:14:18.045 --> 00:14:20.205
<v Speaker 1>third party API events.

00:14:20.365 --> 00:14:22.365
<v Speaker 1>Every time I get a new tweet, I

00:14:22.365 --> 00:14:23.885
<v Speaker 1>wanna send it to Google Sheets.

00:14:24.365 --> 00:14:26.525
<v Speaker 1>Internally, we do a lot with AWS.

00:14:26.685 --> 00:14:29.885
<v Speaker 1>So I have AWS events triggering a workflow,

00:14:29.885 --> 00:14:31.885
<v Speaker 1>and I'm making other AWS API calls.

00:14:32.550 --> 00:14:34.390
<v Speaker 1>Or, we do a lot with, again, our

00:14:34.390 --> 00:14:36.310
<v Speaker 1>professional plan. We have a lot of customers

00:14:36.310 --> 00:14:37.430
<v Speaker 1>via Stripe,

00:14:37.510 --> 00:14:39.430
<v Speaker 1>so we're handling a lot of internal workflows

00:14:39.430 --> 00:14:40.150
<v Speaker 1>there.

00:14:40.310 --> 00:14:42.070
<v Speaker 1>I linked to a workflow here that shows

00:14:42.070 --> 00:14:45.030
<v Speaker 1>how to send, anytime that customer cancels, how

00:14:45.030 --> 00:14:46.915
<v Speaker 1>to send that to Slack. We do some

00:14:46.915 --> 00:14:49.795
<v Speaker 1>other workflows related to that. So, again, these

00:14:49.795 --> 00:14:52.515
<v Speaker 1>four categories, it's not exclusive, but these are

00:14:52.515 --> 00:14:54.195
<v Speaker 1>a lot of the things people use Pipedream

00:14:54.195 --> 00:14:55.235
<v Speaker 1>workflows for.

00:14:56.115 --> 00:14:58.930
<v Speaker 1>That's it for now. I hope that gives

00:14:58.930 --> 00:15:00.690
<v Speaker 1>a good introduction to Pipedream.

00:15:01.329 --> 00:15:03.250
<v Speaker 1>And, yeah, we can hopefully kick it off

00:15:03.250 --> 00:15:05.490
<v Speaker 1>with some specific examples from here.

00:15:05.810 --> 00:15:08.130
<v Speaker 0>Yes. Thank you for that. I'm I'm I

00:15:08.130 --> 00:15:10.209
<v Speaker 0>think that sets the scene well. Hopefully, everyone

00:15:10.209 --> 00:15:10.769
<v Speaker 0>understands

00:15:11.535 --> 00:15:13.615
<v Speaker 0>the kind of the the value proposition.

00:15:13.695 --> 00:15:15.535
<v Speaker 0>And then now we get to get hands

00:15:15.535 --> 00:15:17.535
<v Speaker 0>on and actually show them how to put

00:15:17.535 --> 00:15:19.774
<v Speaker 0>some of this into practice, which is gonna

00:15:19.774 --> 00:15:22.175
<v Speaker 0>be really cool. So let me pop up

00:15:22.175 --> 00:15:22.975
<v Speaker 0>my screen.

00:15:24.380 --> 00:15:26.860
<v Speaker 0>So if anyone wants to follow along, the

00:15:26.860 --> 00:15:29.340
<v Speaker 0>docs are available at docs.pipedream.com.

00:15:29.900 --> 00:15:31.420
<v Speaker 0>A lot of what Dylan has just said

00:15:31.420 --> 00:15:33.180
<v Speaker 0>is also here along with a lot more

00:15:33.180 --> 00:15:35.020
<v Speaker 0>information. The docs are pretty nifty.

00:15:35.915 --> 00:15:38.314
<v Speaker 0>But I am feeling particularly brave today, so

00:15:38.314 --> 00:15:40.394
<v Speaker 0>we're just gonna go straight to my account.

00:15:42.154 --> 00:15:45.355
<v Speaker 0>So shall we try and break down some

00:15:45.355 --> 00:15:47.514
<v Speaker 0>of that vocabulary then that you've had in

00:15:47.514 --> 00:15:48.875
<v Speaker 0>your slides and that we have in front

00:15:48.875 --> 00:15:51.110
<v Speaker 0>of us here just to familiarize people with

00:15:51.110 --> 00:15:53.190
<v Speaker 0>what they're looking at from the the kind

00:15:53.190 --> 00:15:55.430
<v Speaker 0>of the dashboard point of view. So Yes.

00:15:56.230 --> 00:15:59.350
<v Speaker 0>So we have workflows. Do you wanna kinda

00:15:59.350 --> 00:16:01.029
<v Speaker 0>just tell us what a workflow is in

00:16:01.029 --> 00:16:01.990
<v Speaker 0>the context of Pipedream?

00:16:02.585 --> 00:16:03.705
<v Speaker 1>Yeah. A workflow

00:16:04.345 --> 00:16:05.945
<v Speaker 1>is specifically

00:16:05.945 --> 00:16:07.545
<v Speaker 1>a linear sequence

00:16:07.545 --> 00:16:08.905
<v Speaker 1>of steps.

00:16:09.465 --> 00:16:11.865
<v Speaker 1>The first step of a workflow maybe if

00:16:11.865 --> 00:16:13.225
<v Speaker 1>you want, we could just create a new

00:16:13.225 --> 00:16:15.785
<v Speaker 1>workflow now to walk people through it. So

00:16:15.785 --> 00:16:17.545
<v Speaker 1>you've got that blue new button.

00:16:18.560 --> 00:16:20.880
<v Speaker 1>What triggers should we use?

00:16:21.920 --> 00:16:23.440
<v Speaker 0>Well, we just start with the simple cron

00:16:23.440 --> 00:16:25.680
<v Speaker 0>scheduler? That's great. So, yeah, you can see

00:16:25.680 --> 00:16:27.040
<v Speaker 1>here. I'll I'll briefly

00:16:27.760 --> 00:16:29.920
<v Speaker 1>actually, maybe click the x because I I

00:16:29.920 --> 00:16:32.320
<v Speaker 1>skipped over probably a pretty important step. You

00:16:32.320 --> 00:16:35.005
<v Speaker 1>can delete any step at any time. So

00:16:35.165 --> 00:16:37.085
<v Speaker 1>when I create a new workflow,

00:16:37.404 --> 00:16:39.245
<v Speaker 1>I'm presented with this menu

00:16:39.485 --> 00:16:41.805
<v Speaker 1>of possible triggers that I can select.

00:16:42.205 --> 00:16:44.365
<v Speaker 1>The top option is I mentioned the term

00:16:44.365 --> 00:16:45.965
<v Speaker 1>event source. We'll talk about that in a

00:16:45.965 --> 00:16:47.485
<v Speaker 1>sec. But an event source is

00:16:48.149 --> 00:16:51.110
<v Speaker 1>a, you know, trigger essentially for a workflow

00:16:51.110 --> 00:16:52.630
<v Speaker 1>that wraps logic

00:16:52.709 --> 00:16:55.510
<v Speaker 1>for how to source that event from the

00:16:55.510 --> 00:16:57.830
<v Speaker 1>third party app or API.

00:16:57.990 --> 00:17:00.310
<v Speaker 1>So an event source for Twitter, for example,

00:17:00.310 --> 00:17:02.389
<v Speaker 1>again, lets me run a workflow on your

00:17:02.389 --> 00:17:05.175
<v Speaker 1>tweets. You also have these simple, what we

00:17:05.175 --> 00:17:06.694
<v Speaker 1>call native triggers,

00:17:07.015 --> 00:17:07.974
<v Speaker 1>HTTP,

00:17:07.974 --> 00:17:10.054
<v Speaker 1>Cron, email, and SDK.

00:17:10.454 --> 00:17:11.415
<v Speaker 1>Those four,

00:17:11.655 --> 00:17:13.575
<v Speaker 1>you have available to you at any time.

00:17:13.575 --> 00:17:15.095
<v Speaker 1>So I can create an HTTP endpoint.

00:17:15.550 --> 00:17:17.390
<v Speaker 1>And like David just did, we can create

00:17:17.390 --> 00:17:19.630
<v Speaker 1>a cron job. So we can select the

00:17:19.630 --> 00:17:21.149
<v Speaker 1>cron scheduler trigger,

00:17:21.470 --> 00:17:23.869
<v Speaker 1>and then our workflow will run on the

00:17:23.869 --> 00:17:25.230
<v Speaker 1>schedule we specify.

00:17:25.710 --> 00:17:28.349
<v Speaker 1>And, we have, you know, simple human readable.

00:17:28.349 --> 00:17:30.750
<v Speaker 1>I can schedule a workflow every hour, every

00:17:30.750 --> 00:17:33.355
<v Speaker 1>minute. You can enter a cron expression

00:17:33.835 --> 00:17:36.075
<v Speaker 1>in a time zone as well if you

00:17:36.075 --> 00:17:37.595
<v Speaker 1>want that level of control.

00:17:38.875 --> 00:17:40.955
<v Speaker 1>You have a a lot of options there.

00:17:41.915 --> 00:17:42.715
<v Speaker 1>So

00:17:42.795 --> 00:17:44.235
<v Speaker 1>we have a cron trigger.

00:17:45.270 --> 00:17:47.430
<v Speaker 1>You know, we can select any trigger at

00:17:47.430 --> 00:17:50.870
<v Speaker 1>this point and go ahead and deploy the

00:17:50.950 --> 00:17:53.590
<v Speaker 1>workflow to memorialize this. Once we deploy the

00:17:53.590 --> 00:17:55.030
<v Speaker 1>workflow, we have the trigger.

00:17:55.350 --> 00:17:57.270
<v Speaker 1>You also see this big run now button,

00:17:57.695 --> 00:18:00.575
<v Speaker 1>and that lets us trigger a workflow manually.

00:18:00.575 --> 00:18:02.894
<v Speaker 1>So we can do that for our tests.

00:18:04.255 --> 00:18:06.015
<v Speaker 1>You'll notice here, there's not a lot of

00:18:06.015 --> 00:18:08.255
<v Speaker 1>interesting information that comes in the event, but

00:18:08.255 --> 00:18:11.309
<v Speaker 1>the second that David clicked run now, notice

00:18:11.309 --> 00:18:12.349
<v Speaker 1>on the left,

00:18:12.669 --> 00:18:14.750
<v Speaker 1>we have this event and what we call

00:18:14.750 --> 00:18:15.950
<v Speaker 1>the inspector.

00:18:15.950 --> 00:18:18.589
<v Speaker 1>Okay? So that's just where incoming events live.

00:18:19.470 --> 00:18:21.789
<v Speaker 1>When we set a test event, we automatically

00:18:21.789 --> 00:18:24.765
<v Speaker 1>selected that event as well, that's why you

00:18:24.765 --> 00:18:28.285
<v Speaker 1>see this data in the top trigger step.

00:18:28.365 --> 00:18:30.605
<v Speaker 1>So the most interesting information, which we expand

00:18:30.605 --> 00:18:33.005
<v Speaker 1>by default, is the incoming event data.

00:18:33.405 --> 00:18:36.570
<v Speaker 1>And steps dot trigger dot event is the

00:18:36.570 --> 00:18:38.890
<v Speaker 1>name of the variable that allows you to

00:18:38.890 --> 00:18:41.130
<v Speaker 1>access that event data in future steps of

00:18:41.130 --> 00:18:42.009
<v Speaker 1>your workflow.

00:18:42.410 --> 00:18:43.369
<v Speaker 1>So for Cron,

00:18:43.610 --> 00:18:45.610
<v Speaker 1>again, it's not that interesting. And, typically, we

00:18:45.610 --> 00:18:47.929
<v Speaker 1>wouldn't access the actual event data, but you

00:18:47.929 --> 00:18:50.090
<v Speaker 1>do actually have the epic time stamp of

00:18:50.090 --> 00:18:50.730
<v Speaker 1>the indication.

00:18:51.285 --> 00:18:53.685
<v Speaker 1>And then the timer config there indicates this

00:18:53.685 --> 00:18:55.684
<v Speaker 1>is actually triggered manually

00:18:55.925 --> 00:18:56.804
<v Speaker 1>versus

00:18:56.965 --> 00:18:59.525
<v Speaker 1>triggered on its own schedule. So if you

00:18:59.525 --> 00:19:01.925
<v Speaker 1>wanted logic that maybe only ran on test

00:19:01.925 --> 00:19:03.685
<v Speaker 1>events, you could actually do that here, for

00:19:03.685 --> 00:19:03.925
<v Speaker 1>example.

00:19:04.620 --> 00:19:07.420
<v Speaker 1>If you briefly select steps dot trigger dot

00:19:07.420 --> 00:19:08.299
<v Speaker 1>context

00:19:08.700 --> 00:19:10.460
<v Speaker 1>and expand that accordion,

00:19:10.620 --> 00:19:13.900
<v Speaker 1>this is also metadata about the workflow invocation.

00:19:13.900 --> 00:19:16.220
<v Speaker 1>So for example, this also shows the time

00:19:16.220 --> 00:19:18.245
<v Speaker 1>stamp at which it ran. There's a unique

00:19:18.245 --> 00:19:20.884
<v Speaker 1>event ID that Pipedream assigned so that if

00:19:20.884 --> 00:19:22.644
<v Speaker 1>you wanted to store that in your own

00:19:22.644 --> 00:19:23.764
<v Speaker 1>downstream system,

00:19:24.485 --> 00:19:27.524
<v Speaker 1>you know, all the metadata here, your your

00:19:27.524 --> 00:19:28.724
<v Speaker 1>user ID,

00:19:28.884 --> 00:19:31.230
<v Speaker 1>the deployment ID is technically

00:19:31.710 --> 00:19:34.990
<v Speaker 1>it it changes every new version you deploy

00:19:34.990 --> 00:19:36.190
<v Speaker 1>of your workflow.

00:19:37.470 --> 00:19:38.270
<v Speaker 1>Briefly,

00:19:38.270 --> 00:19:40.030
<v Speaker 1>I'll just also mention at the top header,

00:19:40.030 --> 00:19:42.190
<v Speaker 1>just above the workflow, you'll notice a couple

00:19:42.190 --> 00:19:42.510
<v Speaker 1>of things.

00:19:43.555 --> 00:19:46.115
<v Speaker 1>You can add a title to your workflow,

00:19:46.595 --> 00:19:49.635
<v Speaker 1>you know, my awesome cron job or whatever.

00:19:50.115 --> 00:19:51.875
<v Speaker 1>You'll notice we we made a couple of

00:19:51.875 --> 00:19:53.715
<v Speaker 1>edits, and so we're already on version three.

00:19:53.715 --> 00:19:55.155
<v Speaker 1>But if you click on that drop down,

00:19:55.155 --> 00:19:57.315
<v Speaker 1>you can always revert back to a previous

00:19:57.710 --> 00:19:59.549
<v Speaker 1>version of your workflow as well.

00:19:59.950 --> 00:20:01.950
<v Speaker 1>And, you'll see the code in read only

00:20:01.950 --> 00:20:04.190
<v Speaker 1>mode. You can then redeploy that version if

00:20:04.190 --> 00:20:06.590
<v Speaker 1>you want or go back to the latest

00:20:06.590 --> 00:20:07.309
<v Speaker 1>version.

00:20:08.030 --> 00:20:11.764
<v Speaker 1>Code is always private by default, but you

00:20:11.764 --> 00:20:13.605
<v Speaker 1>can make it public. And so a lot

00:20:13.605 --> 00:20:15.205
<v Speaker 1>of the workflows in the slide deck that

00:20:15.205 --> 00:20:17.524
<v Speaker 1>I I shared that we'll share later, we've

00:20:17.524 --> 00:20:19.284
<v Speaker 1>made those workflows public so that you can

00:20:19.284 --> 00:20:21.044
<v Speaker 1>see it, and then you can copy that

00:20:21.044 --> 00:20:23.205
<v Speaker 1>for your own use case. So that's one

00:20:23.205 --> 00:20:24.965
<v Speaker 1>interesting thing about the open source nature of

00:20:24.965 --> 00:20:26.960
<v Speaker 1>Pipedream we love is, you know, I've written

00:20:26.960 --> 00:20:28.800
<v Speaker 1>a workflow once. I can share that with

00:20:28.800 --> 00:20:31.280
<v Speaker 1>someone. You can copy it. You can remix

00:20:31.280 --> 00:20:33.600
<v Speaker 1>it in any way you want. Right? So

00:20:33.600 --> 00:20:35.120
<v Speaker 1>public workflows

00:20:35.280 --> 00:20:38.000
<v Speaker 1>are really nice for, sharing code in that

00:20:38.000 --> 00:20:38.559
<v Speaker 1>manner.

00:20:38.800 --> 00:20:41.095
<v Speaker 1>Your data is always private. We're actually working

00:20:41.095 --> 00:20:43.175
<v Speaker 1>on a feature to allow even data to

00:20:43.175 --> 00:20:44.215
<v Speaker 1>be made public,

00:20:44.455 --> 00:20:46.215
<v Speaker 1>which is also an interesting use case for

00:20:46.215 --> 00:20:48.535
<v Speaker 1>demo purposes. Right? Or I wanna show off

00:20:48.535 --> 00:20:49.735
<v Speaker 1>an event stream.

00:20:50.295 --> 00:20:52.295
<v Speaker 1>I wanna create an analysis. Again, I'm a

00:20:52.295 --> 00:20:54.900
<v Speaker 1>data scientist, and I'm processing tweets. I wanna

00:20:54.900 --> 00:20:56.980
<v Speaker 1>actually show those incoming tweets and show how

00:20:56.980 --> 00:20:57.780
<v Speaker 1>that data

00:20:58.020 --> 00:21:00.660
<v Speaker 1>changes to the course of the workflow,

00:21:00.740 --> 00:21:02.740
<v Speaker 1>right, to show step by step

00:21:02.820 --> 00:21:06.020
<v Speaker 1>all the transformations I'm doing. So that'll come

00:21:06.020 --> 00:21:09.620
<v Speaker 1>later, but, again, by default, code's private, data's

00:21:09.620 --> 00:21:09.940
<v Speaker 1>private.

00:21:11.294 --> 00:21:13.374
<v Speaker 1>And then we've we've got our

00:21:13.615 --> 00:21:15.215
<v Speaker 1>trigger step now.

00:21:15.695 --> 00:21:18.174
<v Speaker 1>And like I mentioned, you know, workflows are,

00:21:18.174 --> 00:21:20.494
<v Speaker 1>right now, a linear sequence of steps.

00:21:20.735 --> 00:21:23.375
<v Speaker 1>So we show the option then to create

00:21:23.375 --> 00:21:25.980
<v Speaker 1>the next step, and this is where actions

00:21:25.980 --> 00:21:26.940
<v Speaker 1>come in.

00:21:27.340 --> 00:21:29.420
<v Speaker 1>So you'll and if you scroll down a

00:21:29.420 --> 00:21:31.980
<v Speaker 1>little bit, you'll see below this a list

00:21:31.980 --> 00:21:33.900
<v Speaker 1>of common apps as well, but you can

00:21:33.900 --> 00:21:35.500
<v Speaker 1>search for anything

00:21:35.900 --> 00:21:37.900
<v Speaker 1>in the search bar at the very top

00:21:37.900 --> 00:21:39.100
<v Speaker 1>of the step selector.

00:21:40.235 --> 00:21:42.235
<v Speaker 1>So what kind of code do you wanna

00:21:42.235 --> 00:21:43.515
<v Speaker 1>run? Do you wanna just run Node JS

00:21:43.515 --> 00:21:45.435
<v Speaker 1>code or run a custom action for this?

00:21:47.195 --> 00:21:49.515
<v Speaker 0>Yeah. Why don't we just run some Node

00:21:49.515 --> 00:21:51.275
<v Speaker 0>JS code now, and then we'll maybe add

00:21:51.275 --> 00:21:52.715
<v Speaker 0>on a couple more to run through some

00:21:52.715 --> 00:21:54.395
<v Speaker 0>of the more common ones and take it

00:21:54.395 --> 00:21:55.989
<v Speaker 0>from there. Cool.

00:21:56.150 --> 00:21:58.549
<v Speaker 1>So the very first option, run Node JS

00:21:58.549 --> 00:21:59.190
<v Speaker 1>code.

00:22:00.070 --> 00:22:02.070
<v Speaker 1>Notice that at the very top of the

00:22:02.070 --> 00:22:04.870
<v Speaker 1>step, by default, this step has a name.

00:22:04.870 --> 00:22:06.869
<v Speaker 1>It's step stop Node JS.

00:22:07.190 --> 00:22:09.909
<v Speaker 1>And that'll become important later because

00:22:10.150 --> 00:22:11.830
<v Speaker 1>when steps

00:22:11.255 --> 00:22:12.615
<v Speaker 1>return data,

00:22:13.895 --> 00:22:16.535
<v Speaker 1>we are able to reference that data at

00:22:16.535 --> 00:22:18.135
<v Speaker 1>that step's namespace.

00:22:18.535 --> 00:22:19.975
<v Speaker 1>And so I'll walk through that in a

00:22:19.975 --> 00:22:21.735
<v Speaker 1>second, but just remember that all steps are

00:22:21.735 --> 00:22:22.375
<v Speaker 1>named.

00:22:22.935 --> 00:22:25.850
<v Speaker 1>I can connect apps to this custom step.

00:22:25.850 --> 00:22:27.370
<v Speaker 1>So if I wanted to write custom note

00:22:27.370 --> 00:22:30.730
<v Speaker 1>code where I interacted with the Spotify API,

00:22:30.730 --> 00:22:33.849
<v Speaker 1>for example, I could connect my Spotify account.

00:22:34.250 --> 00:22:36.090
<v Speaker 1>And, you can do that by clicking the

00:22:36.090 --> 00:22:38.335
<v Speaker 1>plus button at the very top left of

00:22:38.335 --> 00:22:40.415
<v Speaker 1>it. We won't do this now, but, if

00:22:40.415 --> 00:22:41.695
<v Speaker 1>you click on that, it should open a

00:22:41.695 --> 00:22:42.415
<v Speaker 1>modal

00:22:42.575 --> 00:22:44.815
<v Speaker 1>that allows you to select any

00:22:45.295 --> 00:22:47.935
<v Speaker 1>app and then an associated account

00:22:48.095 --> 00:22:49.855
<v Speaker 1>you would select for that app. So, again,

00:22:49.855 --> 00:22:52.700
<v Speaker 1>even custom Node JS code, you can actually

00:22:52.700 --> 00:22:55.260
<v Speaker 1>connect apps so that you have access to

00:22:55.260 --> 00:22:56.940
<v Speaker 1>your authorization data.

00:22:57.500 --> 00:22:59.420
<v Speaker 1>For now, maybe just, you know, do a

00:22:59.420 --> 00:23:01.340
<v Speaker 1>console log statement, and we can see how

00:23:01.340 --> 00:23:01.740
<v Speaker 1>that works.

00:23:06.965 --> 00:23:07.605
<v Speaker 0>Easy.

00:23:08.165 --> 00:23:08.965
<v Speaker 0>Awesome.

00:23:09.045 --> 00:23:11.765
<v Speaker 1>Awesome. So we also have keyboard shortcuts,

00:23:12.085 --> 00:23:15.685
<v Speaker 1>and, depends on your platform, but, command d

00:23:15.685 --> 00:23:17.685
<v Speaker 1>on a Mac and control d on a

00:23:17.685 --> 00:23:20.085
<v Speaker 1>PC or Linux should deploy your workflow,

00:23:20.740 --> 00:23:22.899
<v Speaker 1>you can click on the deploy button up

00:23:22.899 --> 00:23:23.379
<v Speaker 1>there.

00:23:23.860 --> 00:23:25.940
<v Speaker 1>But now, you know, notice the version at

00:23:25.940 --> 00:23:28.659
<v Speaker 1>the top, increment, it's version four. Right? So

00:23:28.659 --> 00:23:31.059
<v Speaker 1>every every deploy you make cuts a new

00:23:31.059 --> 00:23:32.339
<v Speaker 1>version of your workflow,

00:23:32.500 --> 00:23:34.740
<v Speaker 1>deploys it to a whole new execution

00:23:34.740 --> 00:23:37.195
<v Speaker 1>environment on the back end. I should note

00:23:37.195 --> 00:23:39.835
<v Speaker 1>that everyone's workflows are sandboxed

00:23:39.835 --> 00:23:40.475
<v Speaker 1>inside

00:23:41.595 --> 00:23:44.315
<v Speaker 1>every version of a workflow, technically, is sandboxed

00:23:44.315 --> 00:23:45.835
<v Speaker 1>inside its own virtual machine.

00:23:46.155 --> 00:23:48.155
<v Speaker 1>So all the memory and disk is yours

00:23:48.155 --> 00:23:48.955
<v Speaker 1>and yours alone.

00:23:50.200 --> 00:23:53.560
<v Speaker 1>Go ahead and click run now again,

00:23:53.720 --> 00:23:55.560
<v Speaker 1>and let's take a look at what this

00:23:55.560 --> 00:23:56.280
<v Speaker 1>produces.

00:23:58.040 --> 00:23:58.600
<v Speaker 1>So

00:23:58.840 --> 00:24:01.640
<v Speaker 1>any console logs, any standard output or standard

00:24:01.640 --> 00:24:04.200
<v Speaker 1>error shows up below the step that produced

00:24:04.200 --> 00:24:07.075
<v Speaker 1>it. Okay? So any logs

00:24:07.155 --> 00:24:08.675
<v Speaker 1>you wanna log, you just put a console

00:24:08.675 --> 00:24:11.235
<v Speaker 1>log statement there, and you're good. Now notice

00:24:11.235 --> 00:24:14.355
<v Speaker 1>we say no return values or exports

00:24:14.435 --> 00:24:15.875
<v Speaker 1>for this step.

00:24:16.915 --> 00:24:19.395
<v Speaker 1>You have you worked with custom step exports?

00:24:21.629 --> 00:24:23.309
<v Speaker 0>I believe so. Yes. You mean when you

00:24:23.309 --> 00:24:25.469
<v Speaker 0>use desktop to set something? Exactly.

00:24:26.269 --> 00:24:28.909
<v Speaker 1>Exactly. So we have this concept that we

00:24:28.909 --> 00:24:30.349
<v Speaker 1>call step exports.

00:24:30.990 --> 00:24:33.549
<v Speaker 1>Return values work the same way, and we

00:24:33.549 --> 00:24:34.990
<v Speaker 1>can maybe show off both. But

00:24:35.725 --> 00:24:37.485
<v Speaker 1>if you deselect

00:24:37.485 --> 00:24:38.524
<v Speaker 1>the event

00:24:38.605 --> 00:24:40.205
<v Speaker 1>just by clicking on the event in the

00:24:40.205 --> 00:24:42.684
<v Speaker 1>inspector and get back to the code,

00:24:43.404 --> 00:24:46.125
<v Speaker 1>just below the console log step, maybe we

00:24:46.125 --> 00:24:48.125
<v Speaker 1>can add a step export to show people

00:24:48.125 --> 00:24:48.765
<v Speaker 1>how this works.

00:24:49.930 --> 00:24:50.490
<v Speaker 1>So

00:24:51.050 --> 00:24:54.490
<v Speaker 1>notice David's type this dot name. Okay?

00:24:54.810 --> 00:24:57.450
<v Speaker 1>When I deploy and run this, let's maybe

00:24:57.450 --> 00:24:58.970
<v Speaker 1>just see end to end how it works

00:24:58.970 --> 00:25:00.330
<v Speaker 1>because it's easy to show up with the

00:25:00.330 --> 00:25:00.970
<v Speaker 1>observability.

00:25:04.985 --> 00:25:07.144
<v Speaker 1>So we've got that original console log statement,

00:25:07.144 --> 00:25:08.985
<v Speaker 1>and now we see steps .nodejs

00:25:08.985 --> 00:25:10.424
<v Speaker 1>dot name data.

00:25:10.825 --> 00:25:13.304
<v Speaker 1>So, again, the name of my step is

00:25:13.304 --> 00:25:14.664
<v Speaker 1>steps.nodejs.

00:25:14.985 --> 00:25:16.585
<v Speaker 1>Steps Node j s Name,

00:25:17.090 --> 00:25:18.929
<v Speaker 1>I exported from

00:25:19.010 --> 00:25:19.809
<v Speaker 1>steps

00:25:19.890 --> 00:25:22.850
<v Speaker 1>dot Node. Js by saying this dot name.

00:25:22.930 --> 00:25:24.690
<v Speaker 1>So the context of steps

00:25:24.770 --> 00:25:25.730
<v Speaker 1>you know, JavaScript

00:25:26.290 --> 00:25:28.450
<v Speaker 1>if you're familiar with JavaScript, you probably hate

00:25:28.450 --> 00:25:29.010
<v Speaker 1>this.

00:25:29.650 --> 00:25:31.975
<v Speaker 1>It took me a long time to learn

00:25:32.135 --> 00:25:34.135
<v Speaker 1>this, especially as an old data scientist, one

00:25:34.135 --> 00:25:35.335
<v Speaker 1>from Python. But

00:25:35.815 --> 00:25:38.055
<v Speaker 1>in the context of steps, this just refers

00:25:38.055 --> 00:25:39.335
<v Speaker 1>to the current step.

00:25:39.655 --> 00:25:42.535
<v Speaker 1>By saying this dot name equals value, I

00:25:42.535 --> 00:25:43.895
<v Speaker 1>export that value

00:25:44.290 --> 00:25:47.330
<v Speaker 1>at that step dot property name. So in

00:25:47.330 --> 00:25:49.330
<v Speaker 1>this case, name. If you hover over that

00:25:49.330 --> 00:25:52.370
<v Speaker 1>row, you'll see the option to copy either

00:25:52.370 --> 00:25:55.170
<v Speaker 1>the variable path steps dot no g s

00:25:55.170 --> 00:25:56.210
<v Speaker 1>dot name or the value.

00:25:56.745 --> 00:25:59.625
<v Speaker 1>Okay? So in future steps, I can reference

00:25:59.625 --> 00:26:00.664
<v Speaker 1>that export

00:26:00.745 --> 00:26:01.385
<v Speaker 1>against,

00:26:01.545 --> 00:26:03.705
<v Speaker 1>workflows as linear sequence of steps.

00:26:03.945 --> 00:26:04.745
<v Speaker 1>And so,

00:26:05.465 --> 00:26:08.185
<v Speaker 1>when I run one step, I get access

00:26:08.185 --> 00:26:10.665
<v Speaker 1>to that data. Maybe just a console log

00:26:10.665 --> 00:26:13.019
<v Speaker 1>it, and we can confirm that everything

00:26:13.500 --> 00:26:14.700
<v Speaker 1>works okay.

00:26:22.780 --> 00:26:23.420
<v Speaker 1>There we go.

00:26:24.215 --> 00:26:25.255
<v Speaker 1>So

00:26:25.255 --> 00:26:27.174
<v Speaker 1>a lot of our actions,

00:26:28.455 --> 00:26:31.415
<v Speaker 1>for again, common apps like Twitter and Spotify,

00:26:31.415 --> 00:26:33.895
<v Speaker 1>etcetera, you know, that's all pre baked to

00:26:33.895 --> 00:26:36.135
<v Speaker 1>note code. They have their own step exports.

00:26:36.135 --> 00:26:37.975
<v Speaker 1>They return data automatically,

00:26:38.480 --> 00:26:40.400
<v Speaker 1>and then you'll often see that data below

00:26:40.400 --> 00:26:41.120
<v Speaker 1>a step.

00:26:41.600 --> 00:26:42.240
<v Speaker 0>I

00:26:43.360 --> 00:26:44.240
<v Speaker 0>think there's

00:26:44.480 --> 00:26:46.800
<v Speaker 0>I mean, we covered quite a lot there,

00:26:46.800 --> 00:26:48.160
<v Speaker 0>but I just wanna highlight some of the

00:26:48.160 --> 00:26:49.760
<v Speaker 0>things that I think just make this such

00:26:49.760 --> 00:26:51.440
<v Speaker 0>a cool platform to be building on top

00:26:51.440 --> 00:26:51.919
<v Speaker 0>of.

00:26:52.320 --> 00:26:53.040
<v Speaker 0>So

00:26:53.545 --> 00:26:56.665
<v Speaker 0>firstly, the event inspector on the left is

00:26:56.665 --> 00:26:59.465
<v Speaker 0>invaluable when you start to connect to other

00:27:00.185 --> 00:27:02.505
<v Speaker 0>sources and triggers where you don't really understand

00:27:02.505 --> 00:27:04.745
<v Speaker 0>what the payload is gonna be like yet.

00:27:05.225 --> 00:27:07.145
<v Speaker 0>And the auto complete and the ability to

00:27:07.145 --> 00:27:09.220
<v Speaker 0>copy the pass from these

00:27:09.620 --> 00:27:10.419
<v Speaker 0>tools

00:27:10.500 --> 00:27:13.299
<v Speaker 0>inside of each step are also invaluable. Like,

00:27:13.299 --> 00:27:15.620
<v Speaker 0>see those two things alone are just phenomenal.

00:27:15.620 --> 00:27:17.299
<v Speaker 0>And I think as we start to build

00:27:17.299 --> 00:27:19.299
<v Speaker 0>out more, why that is so cool will

00:27:19.299 --> 00:27:22.765
<v Speaker 0>definitely become apparent to people. The automatic versioning

00:27:22.765 --> 00:27:25.325
<v Speaker 0>is very, very cool. I love the idea

00:27:25.325 --> 00:27:27.565
<v Speaker 0>of making my things public. What actually happens

00:27:27.565 --> 00:27:29.325
<v Speaker 0>for me personally is that my code is

00:27:29.325 --> 00:27:30.925
<v Speaker 0>so awful. I think I'll clean that up

00:27:30.925 --> 00:27:31.565
<v Speaker 0>later

00:27:31.965 --> 00:27:33.659
<v Speaker 0>and then make it public. But at the

00:27:33.659 --> 00:27:35.100
<v Speaker 0>same time, it works and then I never

00:27:35.100 --> 00:27:36.700
<v Speaker 0>clean it up. So, like, you know, double

00:27:36.700 --> 00:27:38.459
<v Speaker 0>edged sword for me at least anyway.

00:27:38.700 --> 00:27:40.460
<v Speaker 0>But being able to share them is very,

00:27:40.460 --> 00:27:41.099
<v Speaker 0>very cool.

00:27:41.500 --> 00:27:44.139
<v Speaker 0>And, yeah, the authentication thing, again, you know,

00:27:44.139 --> 00:27:46.460
<v Speaker 0>not having to manage off for any of

00:27:46.460 --> 00:27:48.059
<v Speaker 0>this, you know, the ability to just click,

00:27:48.059 --> 00:27:48.539
<v Speaker 0>hey.

00:27:48.860 --> 00:27:51.015
<v Speaker 0>I wanna do something with Spotify and have

00:27:51.015 --> 00:27:53.735
<v Speaker 0>that automatically pass in my credentials to that

00:27:53.735 --> 00:27:55.335
<v Speaker 0>step for me to consume.

00:27:55.495 --> 00:27:58.054
<v Speaker 0>We're very very, very cool. Cool. Good to

00:27:58.054 --> 00:27:58.614
<v Speaker 1>hear.

00:27:59.655 --> 00:28:01.495
<v Speaker 0>Alright. Let's do something a little bit more

00:28:01.495 --> 00:28:04.980
<v Speaker 0>tangible then. That's like a good plan. So

00:28:04.980 --> 00:28:06.740
<v Speaker 0>let's just I guess we don't need to

00:28:06.740 --> 00:28:08.100
<v Speaker 0>create a new workflow. I'll just clean this

00:28:08.100 --> 00:28:09.299
<v Speaker 0>up a little bit.

00:28:10.740 --> 00:28:12.500
<v Speaker 0>We're not gonna go with cron. Should we

00:28:12.500 --> 00:28:14.499
<v Speaker 0>bring in the Twitter integration?

00:28:14.500 --> 00:28:15.539
<v Speaker 1>Yeah. Let's do it.

00:28:16.435 --> 00:28:18.755
<v Speaker 0>Alright. So let's filter on Twitter.

00:28:19.875 --> 00:28:20.434
<v Speaker 0>And

00:28:20.995 --> 00:28:21.795
<v Speaker 1>So

00:28:22.995 --> 00:28:24.595
<v Speaker 1>this is this is part of our UX

00:28:24.595 --> 00:28:25.235
<v Speaker 1>that

00:28:25.635 --> 00:28:27.475
<v Speaker 1>we are currently optimizing,

00:28:27.475 --> 00:28:30.435
<v Speaker 1>actually. But to create a did you wanna

00:28:30.435 --> 00:28:31.635
<v Speaker 1>create a new Twitter source?

00:28:32.650 --> 00:28:34.410
<v Speaker 0>Yeah. I did. So then I tried to

00:28:34.410 --> 00:28:35.930
<v Speaker 0>filter, but I think I need to scroll

00:28:35.930 --> 00:28:37.049
<v Speaker 0>down. But So

00:28:37.450 --> 00:28:39.210
<v Speaker 1>that you know, you should be able to

00:28:39.210 --> 00:28:41.210
<v Speaker 1>search Twitter, see Twitter, and create it. Right

00:28:41.210 --> 00:28:43.130
<v Speaker 1>now, you have to click create event source,

00:28:43.690 --> 00:28:45.770
<v Speaker 1>and then that brings you into the menu

00:28:45.770 --> 00:28:48.365
<v Speaker 1>for creating any so event source is just

00:28:48.365 --> 00:28:51.725
<v Speaker 1>to reiterate, right, are, essentially just workflow triggers.

00:28:51.725 --> 00:28:52.924
<v Speaker 1>You can do a lot more with event

00:28:52.924 --> 00:28:54.764
<v Speaker 1>sources, so we can talk about that later

00:28:54.764 --> 00:28:56.524
<v Speaker 1>if we have the time. But you create

00:28:56.524 --> 00:28:58.445
<v Speaker 1>an event source to create a,

00:28:59.164 --> 00:29:01.565
<v Speaker 1>trigger from a third party SaaS app. Select

00:29:01.565 --> 00:29:02.125
<v Speaker 1>the app.

00:29:02.630 --> 00:29:05.510
<v Speaker 1>You've got a range of specific sources.

00:29:07.750 --> 00:29:09.910
<v Speaker 0>Let's do search mentions.

00:29:11.190 --> 00:29:13.110
<v Speaker 0>And this this connect button is always my

00:29:13.110 --> 00:29:15.110
<v Speaker 0>favorite thing because that's the old one. And

00:29:15.110 --> 00:29:16.470
<v Speaker 0>I just go, hey. Cool.

00:29:16.790 --> 00:29:17.190
<v Speaker 1>Yeah.

00:29:18.304 --> 00:29:20.864
<v Speaker 1>Yeah. If you didn't have an existing account,

00:29:20.945 --> 00:29:23.184
<v Speaker 1>you would be prompted to

00:29:23.345 --> 00:29:25.985
<v Speaker 1>authorize Pipedream's access to your Twitter account with

00:29:25.985 --> 00:29:27.184
<v Speaker 1>our Pipedream app,

00:29:27.585 --> 00:29:29.664
<v Speaker 1>and you'd be good to go.

00:29:31.585 --> 00:29:33.265
<v Speaker 0>So I'll just add

00:29:34.159 --> 00:29:36.159
<v Speaker 0>this hashtag. I have I've never actually used

00:29:36.159 --> 00:29:37.679
<v Speaker 0>this hashtag on a show. I'm just gonna

00:29:37.760 --> 00:29:39.200
<v Speaker 0>this is the first time. So, you know,

00:29:39.200 --> 00:29:40.960
<v Speaker 0>I think there's only two sample tweets that

00:29:40.960 --> 00:29:42.720
<v Speaker 0>I was doing with earlier. But we'll do

00:29:42.720 --> 00:29:44.399
<v Speaker 0>a search for Rawkode live,

00:29:45.200 --> 00:29:45.760
<v Speaker 0>recent.

00:29:46.355 --> 00:29:48.915
<v Speaker 0>We can filter it to not include retweets

00:29:48.915 --> 00:29:50.595
<v Speaker 0>or not include replies.

00:29:51.955 --> 00:29:53.475
<v Speaker 0>The language filter,

00:29:53.475 --> 00:29:54.275
<v Speaker 0>locale.

00:29:54.275 --> 00:29:55.795
<v Speaker 0>Like, there there's loads of ways to be

00:29:55.795 --> 00:29:57.395
<v Speaker 0>able to interact. Like, I don't need to

00:29:57.395 --> 00:29:59.075
<v Speaker 0>understand the Twitter API.

00:29:59.075 --> 00:30:00.595
<v Speaker 0>Like, someone else has already went to the

00:30:00.595 --> 00:30:02.890
<v Speaker 0>effort and contributed this the project,

00:30:03.370 --> 00:30:04.409
<v Speaker 0>which is great.

00:30:04.730 --> 00:30:05.289
<v Speaker 0>And

00:30:05.850 --> 00:30:07.130
<v Speaker 0>but, Claudia, you're doing this It took

00:30:07.770 --> 00:30:09.929
<v Speaker 1>a it us a while. Event sources

00:30:10.170 --> 00:30:13.210
<v Speaker 1>can be pretty difficult to build, and it

00:30:13.210 --> 00:30:16.010
<v Speaker 1>really depends on the third party API. But,

00:30:15.875 --> 00:30:17.155
<v Speaker 1>again, you can take a look at all

00:30:17.155 --> 00:30:19.395
<v Speaker 1>the source code in GitHub for this if

00:30:19.395 --> 00:30:21.315
<v Speaker 1>you did wanna understand how it works and

00:30:21.315 --> 00:30:22.675
<v Speaker 1>you didn't wanna tweak it.

00:30:24.275 --> 00:30:24.595
<v Speaker 1>We

00:30:25.075 --> 00:30:26.835
<v Speaker 1>I I think you may have seen,

00:30:27.315 --> 00:30:29.475
<v Speaker 1>but if you scroll down just a little

00:30:29.475 --> 00:30:31.510
<v Speaker 1>bit before you create source, you also can

00:30:31.510 --> 00:30:33.029
<v Speaker 1>see the component code,

00:30:33.830 --> 00:30:34.870
<v Speaker 1>right there.

00:30:35.030 --> 00:30:35.350
<v Speaker 1>We

00:30:35.910 --> 00:30:37.590
<v Speaker 1>again, the the diction, I think, is one

00:30:37.590 --> 00:30:39.430
<v Speaker 1>of the hardest parts when you're getting familiar

00:30:39.430 --> 00:30:40.870
<v Speaker 1>with Pipedream because we do use a lot

00:30:40.870 --> 00:30:41.909
<v Speaker 1>of specific terms.

00:30:42.230 --> 00:30:42.790
<v Speaker 1>Components

00:30:43.375 --> 00:30:45.775
<v Speaker 1>are, just this term for a a Node.

00:30:45.775 --> 00:30:46.815
<v Speaker 1>Js module

00:30:47.054 --> 00:30:49.855
<v Speaker 1>that, is written in a specific format to

00:30:49.855 --> 00:30:52.014
<v Speaker 1>create things like event sources.

00:30:52.495 --> 00:30:55.215
<v Speaker 1>So, that's all that is is, the component

00:30:55.215 --> 00:30:57.290
<v Speaker 1>is just the event source. It's a node

00:30:57.290 --> 00:30:59.050
<v Speaker 1>module. You can see how it works. When

00:30:59.050 --> 00:31:01.450
<v Speaker 1>you create the source, you can even edit

00:31:01.450 --> 00:31:02.490
<v Speaker 1>that source

00:31:03.929 --> 00:31:06.170
<v Speaker 1>on your own. So in your account, that

00:31:06.170 --> 00:31:07.770
<v Speaker 1>event source gets created. But if you click

00:31:07.770 --> 00:31:09.050
<v Speaker 1>edit code and configuration,

00:31:09.784 --> 00:31:11.705
<v Speaker 1>then you can edit. You can change the

00:31:11.705 --> 00:31:13.145
<v Speaker 1>configuration if you wanted to and you can

00:31:13.145 --> 00:31:14.985
<v Speaker 1>edit the code. So all of that's available

00:31:14.985 --> 00:31:15.705
<v Speaker 1>to you.

00:31:16.505 --> 00:31:17.304
<v Speaker 0>Nice.

00:31:18.265 --> 00:31:21.544
<v Speaker 0>And we actually see I think this is

00:31:21.544 --> 00:31:22.664
<v Speaker 0>one of the I have a lot of

00:31:22.664 --> 00:31:25.620
<v Speaker 0>favorite things about Pipedream. So that's this here.

00:31:25.620 --> 00:31:27.860
<v Speaker 0>This preview of what the event data worked

00:31:27.860 --> 00:31:30.260
<v Speaker 0>with. Because, obviously, I'm gonna wanna do something

00:31:30.260 --> 00:31:31.620
<v Speaker 0>with this and just being able to see

00:31:31.620 --> 00:31:32.980
<v Speaker 0>that and be able to copy the past

00:31:32.980 --> 00:31:34.980
<v Speaker 0>and stuff is really Mhmm. Mhmm.

00:31:36.225 --> 00:31:38.624
<v Speaker 1>I hear you. There's my last tweet.

00:31:38.945 --> 00:31:40.864
<v Speaker 1>Nice. Nice. Yeah.

00:31:42.065 --> 00:31:43.504
<v Speaker 0>Alright. So Sorry,

00:31:44.304 --> 00:31:44.864
<v Speaker 0>Nico.

00:31:47.025 --> 00:31:49.345
<v Speaker 0>No. Okay. So let's try and do something

00:31:49.345 --> 00:31:49.825
<v Speaker 0>with this.

00:31:51.480 --> 00:31:53.880
<v Speaker 0>Now there's a loads there's loads of integrations

00:31:53.880 --> 00:31:56.520
<v Speaker 0>that we can play with. We spoke briefly

00:31:56.520 --> 00:31:58.760
<v Speaker 0>just before we went live, and I said,

00:31:58.760 --> 00:32:00.440
<v Speaker 0>hey, it would be cool if we could

00:32:00.440 --> 00:32:03.240
<v Speaker 0>have people tweet Rawkode live as a hashtag

00:32:03.240 --> 00:32:04.840
<v Speaker 0>and the name of a song, and we're

00:32:04.840 --> 00:32:06.115
<v Speaker 0>gonna try and attempt to look up that

00:32:06.115 --> 00:32:07.875
<v Speaker 0>song on Spotify and add it to a

00:32:07.875 --> 00:32:08.594
<v Speaker 0>playlist.

00:32:09.955 --> 00:32:11.475
<v Speaker 0>So let's see if we can get that

00:32:11.475 --> 00:32:13.554
<v Speaker 0>going. So that that's that's your queue. People

00:32:13.554 --> 00:32:16.034
<v Speaker 0>are watching. If you can use the Rawkode

00:32:16.034 --> 00:32:17.075
<v Speaker 0>live hashtag

00:32:17.075 --> 00:32:18.434
<v Speaker 0>and just type the name of a song

00:32:18.434 --> 00:32:19.880
<v Speaker 0>and then we'll do our best to try

00:32:19.880 --> 00:32:21.240
<v Speaker 0>and add that to a playlist.

00:32:21.480 --> 00:32:22.840
<v Speaker 0>And if you all don't do it, I'll

00:32:22.840 --> 00:32:25.240
<v Speaker 0>just tweet my own. That's okay. Yeah. Yeah.

00:32:25.560 --> 00:32:27.560
<v Speaker 0>Just means I'll prefer the music anyway.

00:32:28.200 --> 00:32:30.440
<v Speaker 0>So I'm gonna click send us test event.

00:32:31.894 --> 00:32:34.375
<v Speaker 0>And now we can begin to work with

00:32:34.375 --> 00:32:35.734
<v Speaker 0>this data. So

00:32:36.855 --> 00:32:38.294
<v Speaker 0>I guess the first thing we need to

00:32:38.294 --> 00:32:39.334
<v Speaker 0>do is

00:32:39.575 --> 00:32:43.335
<v Speaker 0>look up the tweet text or maybe split

00:32:43.335 --> 00:32:45.220
<v Speaker 0>the tweet text. See, I never really thought

00:32:45.220 --> 00:32:47.059
<v Speaker 0>this through today. It's probably harder than I

00:32:47.059 --> 00:32:48.900
<v Speaker 0>thought it was gonna be. Let's just let's

00:32:48.900 --> 00:32:50.340
<v Speaker 0>just assume the only bit of text that

00:32:50.340 --> 00:32:51.779
<v Speaker 0>comes through is just the name of a

00:32:51.779 --> 00:32:52.340
<v Speaker 0>song.

00:32:52.820 --> 00:32:54.100
<v Speaker 0>Cool. So we'll just go straight to the

00:32:54.100 --> 00:32:55.539
<v Speaker 0>lookup stage. We're not gonna try and parse

00:32:55.539 --> 00:32:56.259
<v Speaker 0>anything.

00:32:56.580 --> 00:32:56.900
<v Speaker 0>Cool.

00:32:59.424 --> 00:33:01.024
<v Speaker 0>And let's see.

00:33:03.424 --> 00:33:05.984
<v Speaker 0>Do we need I'm assuming because

00:33:06.465 --> 00:33:07.904
<v Speaker 0>is there a get track?

00:33:08.065 --> 00:33:08.705
<v Speaker 0>Let's see.

00:33:11.060 --> 00:33:12.260
<v Speaker 1>Yeah. Let's see.

00:33:12.980 --> 00:33:14.740
<v Speaker 0>We'll just So we'll just check.

00:33:15.300 --> 00:33:17.780
<v Speaker 1>Right. It's oh, yeah. I guess so I

00:33:17.780 --> 00:33:19.140
<v Speaker 1>think get tracks

00:33:19.220 --> 00:33:22.180
<v Speaker 1>might take the Spotify ID

00:33:22.665 --> 00:33:23.865
<v Speaker 1>for that track.

00:33:24.265 --> 00:33:26.825
<v Speaker 1>But I think there's a search action

00:33:27.385 --> 00:33:28.105
<v Speaker 1>that

00:33:29.545 --> 00:33:32.105
<v Speaker 1>I'm not sure exactly how the Spotify API

00:33:32.105 --> 00:33:33.385
<v Speaker 1>works, but we can work through it.

00:33:34.740 --> 00:33:35.380
<v Speaker 1>Try

00:33:35.540 --> 00:33:37.380
<v Speaker 1>try just doing Spotify,

00:33:37.380 --> 00:33:38.980
<v Speaker 1>and then you'll see a search for an

00:33:38.980 --> 00:33:41.460
<v Speaker 1>item, get slash Oh, there we go. Yeah.

00:33:42.740 --> 00:33:44.500
<v Speaker 0>Let's connect this up,

00:33:45.140 --> 00:33:46.500
<v Speaker 0>and then we could just pass in the

00:33:46.500 --> 00:33:48.740
<v Speaker 0>terms. So let's assume

00:33:49.105 --> 00:33:51.664
<v Speaker 0>we're using the previous event that we have

00:33:51.664 --> 00:33:52.224
<v Speaker 0>here

00:33:52.544 --> 00:33:54.784
<v Speaker 0>that the full text is what we want.

00:33:54.945 --> 00:33:55.184
<v Speaker 0>So

00:33:57.264 --> 00:33:59.184
<v Speaker 0>In fact, we will need to remove the

00:33:59.184 --> 00:34:00.465
<v Speaker 0>Rawkode live from it.

00:34:03.010 --> 00:34:05.250
<v Speaker 0>There. The plot seconds. Okay. So we're gonna

00:34:05.250 --> 00:34:06.450
<v Speaker 0>add a custom

00:34:06.450 --> 00:34:08.929
<v Speaker 0>step before we do that then

00:34:09.570 --> 00:34:11.890
<v Speaker 0>where we wanna take

00:34:12.690 --> 00:34:14.050
<v Speaker 0>our full text.

00:34:18.045 --> 00:34:19.565
<v Speaker 0>We can just paste this in.

00:34:19.965 --> 00:34:21.725
<v Speaker 0>And this is a string. I already know

00:34:21.725 --> 00:34:24.205
<v Speaker 0>that's a string, and I'm getting all complete.

00:34:25.324 --> 00:34:27.485
<v Speaker 0>So let's just do a really crude

00:34:28.284 --> 00:34:28.925
<v Speaker 0>replace.

00:34:34.810 --> 00:34:37.210
<v Speaker 0>And then I this is where your knowledge

00:34:37.210 --> 00:34:38.969
<v Speaker 0>is gonna come in. Does this update in

00:34:38.969 --> 00:34:40.570
<v Speaker 0>line and I'll have access to that, or

00:34:40.570 --> 00:34:42.890
<v Speaker 0>should I try and set

00:34:44.034 --> 00:34:46.675
<v Speaker 0>something like this? Yeah. You will

00:34:46.915 --> 00:34:49.554
<v Speaker 1>either do this dot song title or you

00:34:49.554 --> 00:34:50.675
<v Speaker 1>can just return

00:34:50.995 --> 00:34:52.355
<v Speaker 1>steps dot trigger.

00:34:53.315 --> 00:34:54.915
<v Speaker 1>Both of those would give you access to

00:34:54.915 --> 00:34:55.715
<v Speaker 1>return value.

00:34:56.429 --> 00:34:58.030
<v Speaker 1>And then that's

00:34:58.829 --> 00:35:01.069
<v Speaker 1>you know, let's let's see if I'm correct.

00:35:01.069 --> 00:35:04.350
<v Speaker 1>I think that dollar return value reference

00:35:04.990 --> 00:35:06.830
<v Speaker 1>should be accessible in

00:35:07.230 --> 00:35:09.390
<v Speaker 1>the param selector of the next step.

00:35:10.585 --> 00:35:12.665
<v Speaker 1>The value you won't see a a a

00:35:12.665 --> 00:35:15.145
<v Speaker 1>value associated with it. But if you select

00:35:15.145 --> 00:35:16.025
<v Speaker 1>steps,

00:35:17.145 --> 00:35:20.905
<v Speaker 1>Node. Js, return dollar return value. Right? That's

00:35:21.545 --> 00:35:23.145
<v Speaker 1>when you use return

00:35:23.145 --> 00:35:26.150
<v Speaker 1>instead of a specific sec step export, that's

00:35:26.150 --> 00:35:27.910
<v Speaker 1>how we represent that.

00:35:29.670 --> 00:35:30.310
<v Speaker 0>Okay.

00:35:30.710 --> 00:35:33.030
<v Speaker 0>And then this one's a type, so I'm

00:35:33.030 --> 00:35:34.790
<v Speaker 0>gonna say track.

00:35:36.070 --> 00:35:38.390
<v Speaker 1>And then I think you had an ST

00:35:38.664 --> 00:35:42.184
<v Speaker 1>at the front of the search the query

00:35:42.184 --> 00:35:42.984
<v Speaker 1>brand.

00:35:44.105 --> 00:35:46.105
<v Speaker 0>Good catch. And,

00:35:46.664 --> 00:35:48.905
<v Speaker 1>yeah, I think let's give it a try.

00:35:49.545 --> 00:35:50.345
<v Speaker 0>Alright.

00:35:50.505 --> 00:35:52.825
<v Speaker 0>No one's tweeted me yet. I'm disappointed, so

00:35:52.825 --> 00:35:54.825
<v Speaker 0>I'm going to say

00:35:56.860 --> 00:35:58.460
<v Speaker 1>My team should be listening too, and there's

00:35:58.460 --> 00:36:00.780
<v Speaker 1>some music fans there. So, hopefully,

00:36:01.420 --> 00:36:02.140
<v Speaker 1>someone

00:36:02.540 --> 00:36:04.300
<v Speaker 1>someone has a good song in mind.

00:36:04.780 --> 00:36:07.180
<v Speaker 0>Alright. Well, I have now tweeted a song.

00:36:07.180 --> 00:36:09.805
<v Speaker 0>I'm gonna head deploy. Let's just let this

00:36:09.805 --> 00:36:10.525
<v Speaker 0>run.

00:36:12.365 --> 00:36:13.245
<v Speaker 0>And

00:36:13.245 --> 00:36:14.925
<v Speaker 0>this is now on

00:36:15.485 --> 00:36:17.405
<v Speaker 0>what was it? Fifteen seconds we set this

00:36:17.405 --> 00:36:18.125
<v Speaker 0>up for?

00:36:19.245 --> 00:36:20.365
<v Speaker 0>Yeah. I think so.

00:36:21.130 --> 00:36:23.369
<v Speaker 0>Nice. I guess for now, we can have

00:36:23.369 --> 00:36:25.050
<v Speaker 0>the test event, which will be my last

00:36:25.050 --> 00:36:27.050
<v Speaker 0>previous tweet. And we should still be able

00:36:27.050 --> 00:36:28.730
<v Speaker 0>to see at least the response come back

00:36:28.730 --> 00:36:30.490
<v Speaker 0>with, I would assume, nothing.

00:36:31.450 --> 00:36:33.130
<v Speaker 1>Yeah. Let's see what Spotify does with that.

00:36:35.695 --> 00:36:37.055
<v Speaker 0>Okay. So

00:36:37.295 --> 00:36:38.255
<v Speaker 0>let's see.

00:36:38.895 --> 00:36:41.055
<v Speaker 0>Yeah. There's a return value and a dead

00:36:41.055 --> 00:36:42.895
<v Speaker 0>remove or hashtag.

00:36:43.375 --> 00:36:44.335
<v Speaker 0>It's good.

00:36:45.375 --> 00:36:47.455
<v Speaker 0>Magically, we got some songs. No. We didn't.

00:36:48.410 --> 00:36:51.050
<v Speaker 0>We got seven fields, but no items. Right.

00:36:51.050 --> 00:36:51.930
<v Speaker 1>Right. Right.

00:36:53.610 --> 00:36:54.570
<v Speaker 0>Alright.

00:36:54.650 --> 00:36:57.130
<v Speaker 0>I didn't enable the trigger. There we go.

00:36:58.330 --> 00:37:00.330
<v Speaker 1>And then if you scroll up,

00:37:00.970 --> 00:37:03.050
<v Speaker 1>you'll go ahead and deselect the

00:37:03.585 --> 00:37:05.345
<v Speaker 1>specific event again.

00:37:06.305 --> 00:37:07.265
<v Speaker 1>And then,

00:37:08.224 --> 00:37:10.545
<v Speaker 1>under the test banner, go ahead and expand

00:37:10.545 --> 00:37:12.065
<v Speaker 1>that test accordion

00:37:12.465 --> 00:37:14.145
<v Speaker 1>and hit that refresh

00:37:14.145 --> 00:37:14.545
<v Speaker 1>button.

00:37:15.810 --> 00:37:16.370
<v Speaker 1>And

00:37:17.090 --> 00:37:18.690
<v Speaker 1>now go so this is, you know, one

00:37:18.690 --> 00:37:20.450
<v Speaker 1>of your test suites still that I that

00:37:20.690 --> 00:37:22.610
<v Speaker 1>there we go. Your new one should show

00:37:22.610 --> 00:37:24.610
<v Speaker 1>up there. There's a again, we're working on

00:37:24.610 --> 00:37:26.370
<v Speaker 1>this UX to improve it. It's a couple

00:37:26.370 --> 00:37:28.050
<v Speaker 1>of steps just to get that new test

00:37:28.050 --> 00:37:28.770
<v Speaker 1>data in there.

00:37:30.474 --> 00:37:32.635
<v Speaker 0>Okay. So let's just send this as a

00:37:32.635 --> 00:37:34.875
<v Speaker 0>test event and make sure our workflow does

00:37:34.875 --> 00:37:35.675
<v Speaker 0>hopefully

00:37:35.755 --> 00:37:37.115
<v Speaker 0>what we wanted it to.

00:37:38.315 --> 00:37:39.355
<v Speaker 0>Let's see.

00:37:40.234 --> 00:37:42.075
<v Speaker 0>So it removed the hashtag,

00:37:44.360 --> 00:37:46.360
<v Speaker 0>and we got 20 options.

00:37:46.760 --> 00:37:47.720
<v Speaker 0>This is good.

00:37:48.280 --> 00:37:50.360
<v Speaker 1>And so it looks like someone else might

00:37:50.360 --> 00:37:52.200
<v Speaker 1>have tweeted as well because you see that

00:37:52.200 --> 00:37:54.600
<v Speaker 1>another event came in just above it.

00:37:55.240 --> 00:37:57.160
<v Speaker 0>Well, that that may be the actual trigger

00:37:57.160 --> 00:37:58.600
<v Speaker 0>pulling in my event.

00:37:59.535 --> 00:38:01.454
<v Speaker 0>No. It's not. It's someone else. Yeah. When

00:38:01.454 --> 00:38:04.095
<v Speaker 1>you so when you selected that, you know,

00:38:04.095 --> 00:38:05.775
<v Speaker 1>turn on the trigger

00:38:06.575 --> 00:38:07.295
<v Speaker 1>switch,

00:38:07.855 --> 00:38:10.095
<v Speaker 1>that turned the trigger live such that now

00:38:10.095 --> 00:38:11.775
<v Speaker 1>we are receiving live events. But it looks

00:38:11.775 --> 00:38:13.295
<v Speaker 1>like it's working, so maybe that's fine.

00:38:14.930 --> 00:38:15.650
<v Speaker 0>Nice.

00:38:16.210 --> 00:38:18.450
<v Speaker 0>Well, that's a good start. Let me pull

00:38:18.450 --> 00:38:19.170
<v Speaker 0>them up.

00:38:19.890 --> 00:38:21.730
<v Speaker 0>Yeah. Okay. Cool. We just have someone else

00:38:21.730 --> 00:38:23.730
<v Speaker 0>tweet. Thank you, Frank.

00:38:24.290 --> 00:38:25.490
<v Speaker 1>Yeah. Thanks.

00:38:25.970 --> 00:38:26.850
<v Speaker 1>If you this

00:38:27.410 --> 00:38:27.650
<v Speaker 1>is,

00:38:28.425 --> 00:38:30.585
<v Speaker 1>the the reason we have that toggle so

00:38:30.585 --> 00:38:31.785
<v Speaker 1>that while you're developing your

00:38:34.105 --> 00:38:36.905
<v Speaker 1>pause the live stream of them and then

00:38:37.705 --> 00:38:40.025
<v Speaker 1>turn it live once you develop your workflow.

00:38:43.640 --> 00:38:45.800
<v Speaker 0>Okay. So we're

00:38:45.800 --> 00:38:47.800
<v Speaker 0>not gonna do anything sophisticated here. We'll just

00:38:47.800 --> 00:38:50.520
<v Speaker 0>grab the first response from this items list,

00:38:50.520 --> 00:38:52.600
<v Speaker 0>and let's add that to a playlist.

00:38:53.560 --> 00:38:55.480
<v Speaker 0>Let me get my Spotify up as well.

00:38:58.904 --> 00:39:00.025
<v Speaker 0>Let's see.

00:39:07.464 --> 00:39:09.305
<v Speaker 0>But what we have here is an empty

00:39:09.305 --> 00:39:10.105
<v Speaker 0>Pipedream

00:39:10.105 --> 00:39:12.010
<v Speaker 0>playlist. Let's see if we can get this

00:39:12.010 --> 00:39:12.650
<v Speaker 0>going.

00:39:13.529 --> 00:39:15.690
<v Speaker 0>So we just wanna add another step. We're

00:39:15.690 --> 00:39:17.530
<v Speaker 0>using the selector.

00:39:18.730 --> 00:39:20.890
<v Speaker 0>I'm pretty sure there isn't oh,

00:39:21.289 --> 00:39:23.529
<v Speaker 0>we ought to scroll down. There is an

00:39:23.529 --> 00:39:25.369
<v Speaker 0>add track. I'm sure I looked for this.

00:39:27.505 --> 00:39:28.385
<v Speaker 0>Let's

00:39:28.385 --> 00:39:29.025
<v Speaker 0>see.

00:39:29.185 --> 00:39:30.945
<v Speaker 0>Add tracks to playlist.

00:39:32.945 --> 00:39:33.745
<v Speaker 0>Alright.

00:39:35.345 --> 00:39:38.625
<v Speaker 0>Let's

00:39:38.625 --> 00:39:39.905
<v Speaker 0>see. How do I get my

00:39:40.930 --> 00:39:42.610
<v Speaker 0>Spotify ID?

00:39:45.970 --> 00:39:46.610
<v Speaker 0>Are

00:39:47.730 --> 00:39:49.170
<v Speaker 0>you still there? Oh, I think I lost

00:39:49.170 --> 00:39:49.410
<v Speaker 0>Dylan.

00:39:54.425 --> 00:39:56.665
<v Speaker 0>Alright. I'll just keep mumbling through it. Let's

00:39:56.665 --> 00:39:58.345
<v Speaker 0>see. How did I get the ID?

00:39:58.985 --> 00:40:00.665
<v Speaker 1>Yeah. Can you hear me okay now?

00:40:02.265 --> 00:40:04.105
<v Speaker 0>Yep. You're you seem to be back now.

00:40:04.105 --> 00:40:05.705
<v Speaker 0>I'm not sure what happened there. Can you

00:40:05.705 --> 00:40:06.505
<v Speaker 1>hear me okay now?

00:40:07.539 --> 00:40:08.820
<v Speaker 0>Yeah. I can hear you.

00:40:10.579 --> 00:40:11.380
<v Speaker 0>Yep.

00:40:12.660 --> 00:40:14.580
<v Speaker 0>Yeah. Thank you, Frank. Appreciate it.

00:40:15.940 --> 00:40:17.700
<v Speaker 0>Okay. So

00:40:20.775 --> 00:40:22.375
<v Speaker 0>I wonder if there's a way for me

00:40:22.375 --> 00:40:24.055
<v Speaker 0>to get my Spotify

00:40:24.055 --> 00:40:25.655
<v Speaker 0>ID from

00:40:27.815 --> 00:40:28.214
<v Speaker 0>here.

00:40:35.200 --> 00:40:36.640
<v Speaker 0>Let's connect it.

00:40:39.600 --> 00:40:41.360
<v Speaker 0>Dylan's definitely gone there.

00:40:43.280 --> 00:40:44.880
<v Speaker 0>Alright. I'm just gonna log in to the

00:40:44.880 --> 00:40:47.040
<v Speaker 0>Spotify web interface to get those IDs.

00:40:49.155 --> 00:40:50.355
<v Speaker 0>Oh, and he's back.

00:40:50.675 --> 00:40:51.555
<v Speaker 0>There you go.

00:40:52.035 --> 00:40:54.435
<v Speaker 0>Welcome back. I yeah. I moved to a

00:40:54.435 --> 00:40:56.355
<v Speaker 1>place with that with better WiFi. I hope

00:40:56.355 --> 00:40:57.395
<v Speaker 1>you can hear me okay.

00:40:57.955 --> 00:41:00.195
<v Speaker 0>Oh, yeah. Yeah. You're you're sounding good now.

00:41:00.275 --> 00:41:01.475
<v Speaker 0>Great. So I was just gonna log in

00:41:01.475 --> 00:41:03.200
<v Speaker 0>to the Spotify web interface cause I realized

00:41:03.200 --> 00:41:04.799
<v Speaker 0>I didn't know how to get my Spotify

00:41:04.799 --> 00:41:05.839
<v Speaker 0>user ID.

00:41:06.400 --> 00:41:08.000
<v Speaker 1>There there is a

00:41:08.480 --> 00:41:09.760
<v Speaker 1>get me

00:41:09.920 --> 00:41:11.920
<v Speaker 1>endpoint in Spotify.

00:41:11.920 --> 00:41:13.440
<v Speaker 1>I think we should have an action for

00:41:13.440 --> 00:41:15.839
<v Speaker 1>that, and that should return your user ID.

00:41:16.005 --> 00:41:17.525
<v Speaker 1>So you may wanna add that,

00:41:17.845 --> 00:41:19.605
<v Speaker 1>you know, near the top of your workflow.

00:41:21.125 --> 00:41:23.605
<v Speaker 0>Good idea. Alright. It's about it.

00:41:27.285 --> 00:41:28.724
<v Speaker 0>Yep. Got me. There we go.

00:41:30.930 --> 00:41:31.650
<v Speaker 0>Connect.

00:41:34.530 --> 00:41:36.849
<v Speaker 0>And I'm just gonna assume I'm gonna wanna

00:41:36.849 --> 00:41:38.450
<v Speaker 0>list playlist as well.

00:41:39.250 --> 00:41:40.369
<v Speaker 0>So let's see.

00:41:44.675 --> 00:41:46.275
<v Speaker 0>Users playlists.

00:41:49.795 --> 00:41:51.715
<v Speaker 0>Cool. Alright. So

00:41:51.875 --> 00:41:54.195
<v Speaker 0>what we want to do is

00:41:56.275 --> 00:41:58.430
<v Speaker 0>save. I'm gonna have to remove the playlist

00:41:58.430 --> 00:42:00.430
<v Speaker 0>or not, like, because I can't satisfy that.

00:42:01.789 --> 00:42:03.470
<v Speaker 0>I can make it up. Right. A b

00:42:03.470 --> 00:42:05.470
<v Speaker 0>c one. Yeah. And if

00:42:05.470 --> 00:42:07.390
<v Speaker 1>you'd like, do you see when you hover

00:42:07.390 --> 00:42:09.869
<v Speaker 1>over the step, there's that green toggle in

00:42:09.869 --> 00:42:10.589
<v Speaker 1>the top right?

00:42:11.995 --> 00:42:14.075
<v Speaker 0>Yeah. There we go. And if you want,

00:42:14.075 --> 00:42:15.595
<v Speaker 1>you could just disable any of these steps.

00:42:15.595 --> 00:42:16.155
<v Speaker 1>Right?

00:42:20.635 --> 00:42:22.795
<v Speaker 0>Alright. Let's just turn these off just now.

00:42:22.950 --> 00:42:24.310
<v Speaker 0>So we should be in a position where

00:42:24.310 --> 00:42:26.150
<v Speaker 0>if I deploy this, I'm now gonna be

00:42:26.150 --> 00:42:29.030
<v Speaker 0>requesting my own profile information from Spotify.

00:42:29.510 --> 00:42:31.589
<v Speaker 0>Have to use their ID, pass it into

00:42:31.589 --> 00:42:34.070
<v Speaker 0>the get playlist one, get the playlist ID,

00:42:34.230 --> 00:42:36.070
<v Speaker 0>and then add our track to the playlist.

00:42:37.325 --> 00:42:39.165
<v Speaker 1>I like the way this is coming together.

00:42:40.045 --> 00:42:41.645
<v Speaker 0>Well, yeah. It's it's it's nice to see

00:42:41.645 --> 00:42:43.085
<v Speaker 0>how I mean, that these are things that

00:42:43.085 --> 00:42:44.285
<v Speaker 0>people are gonna have to do as they

00:42:44.285 --> 00:42:45.805
<v Speaker 0>start to play with it and explore with

00:42:45.805 --> 00:42:47.485
<v Speaker 0>it. And it's nice you you don't need

00:42:47.485 --> 00:42:50.045
<v Speaker 0>to leave less workflow experience to do any

00:42:50.045 --> 00:42:52.045
<v Speaker 0>of that either. So Mhmm. Right.

00:42:53.270 --> 00:42:54.710
<v Speaker 0>Alright. So get me.

00:42:55.589 --> 00:42:57.670
<v Speaker 0>Let's oh, we need to click run.

00:43:02.150 --> 00:43:04.470
<v Speaker 1>If you expand the test accordion one more

00:43:04.470 --> 00:43:04.950
<v Speaker 1>time,

00:43:05.270 --> 00:43:06.069
<v Speaker 1>it should

00:43:07.415 --> 00:43:09.415
<v Speaker 1>go ahead and deselect this event

00:43:10.295 --> 00:43:12.535
<v Speaker 1>and then expand the test accordion

00:43:12.775 --> 00:43:14.695
<v Speaker 1>at the Oh, yeah. Yeah. Yeah. Yeah.

00:43:15.415 --> 00:43:16.775
<v Speaker 0>We go. And then send it.

00:43:17.335 --> 00:43:19.655
<v Speaker 0>See, I know this stuff. I'm just

00:43:20.900 --> 00:43:21.780
<v Speaker 0>being silly.

00:43:22.020 --> 00:43:22.820
<v Speaker 0>Alright.

00:43:23.540 --> 00:43:26.020
<v Speaker 0>Okay. There's me. There's my ID.

00:43:26.740 --> 00:43:29.060
<v Speaker 0>So I'm gonna enable the playlist action.

00:43:29.700 --> 00:43:31.940
<v Speaker 0>We're gonna drop in our user ID here.

00:43:33.140 --> 00:43:34.260
<v Speaker 0>I'm gonna deploy this.

00:43:37.715 --> 00:43:39.475
<v Speaker 0>And then we're gonna come back up here

00:43:40.355 --> 00:43:41.875
<v Speaker 0>and run this again.

00:43:42.755 --> 00:43:43.955
<v Speaker 0>And now we should get a list of

00:43:43.955 --> 00:43:44.515
<v Speaker 0>playlists.

00:43:48.690 --> 00:43:49.730
<v Speaker 0>There we go.

00:43:49.970 --> 00:43:52.210
<v Speaker 0>So I have eight. I'll assume the recent

00:43:52.210 --> 00:43:54.369
<v Speaker 0>one is this one. Nope. That's my refs

00:43:54.369 --> 00:43:55.170
<v Speaker 0>playlist.

00:43:56.930 --> 00:43:58.530
<v Speaker 0>Film scores for coding,

00:43:59.330 --> 00:43:59.970
<v Speaker 0>covers.

00:44:00.575 --> 00:44:02.095
<v Speaker 0>You know, you're getting an insight into my

00:44:02.095 --> 00:44:02.655
<v Speaker 0>music.

00:44:05.934 --> 00:44:06.734
<v Speaker 0>Boost.

00:44:06.894 --> 00:44:08.575
<v Speaker 0>Of course, it was the first one, wasn't

00:44:08.575 --> 00:44:09.375
<v Speaker 0>it? And

00:44:10.734 --> 00:44:12.255
<v Speaker 0>this is the ID that we want. So

00:44:12.255 --> 00:44:13.695
<v Speaker 0>I'm gonna disable

00:44:14.015 --> 00:44:14.335
<v Speaker 0>this.

00:44:15.420 --> 00:44:17.500
<v Speaker 0>I'm gonna enable our

00:44:18.380 --> 00:44:19.020
<v Speaker 0>ad,

00:44:19.500 --> 00:44:21.580
<v Speaker 0>and we pop open these params.

00:44:21.819 --> 00:44:23.900
<v Speaker 0>We can put in the playlist ID, and

00:44:23.900 --> 00:44:25.900
<v Speaker 0>then we drop the user ID again,

00:44:26.059 --> 00:44:26.859
<v Speaker 0>which is here.

00:44:31.045 --> 00:44:34.085
<v Speaker 0>And then we need to just ensure

00:44:35.845 --> 00:44:38.085
<v Speaker 0>that we pass through a track URI from

00:44:38.085 --> 00:44:39.125
<v Speaker 0>the search as well.

00:44:40.310 --> 00:44:42.710
<v Speaker 0>So let's disable to get me.

00:44:44.150 --> 00:44:45.990
<v Speaker 0>And today, move

00:44:46.630 --> 00:44:48.790
<v Speaker 0>the track there. It's just above

00:44:48.790 --> 00:44:49.590
<v Speaker 1>this last yeah.

00:44:53.684 --> 00:44:54.484
<v Speaker 0>K.

00:44:55.125 --> 00:44:56.884
<v Speaker 0>I'm gonna need to run a test event.

00:44:56.884 --> 00:44:58.484
<v Speaker 0>So let's just deploy this

00:45:03.525 --> 00:45:04.325
<v Speaker 0>and do this.

00:45:07.260 --> 00:45:09.820
<v Speaker 0>Alright. So let's do an emojis step,

00:45:10.140 --> 00:45:12.620
<v Speaker 0>skipping over those, and here's a search.

00:45:14.860 --> 00:45:17.100
<v Speaker 0>And it's got an href, which I'm assuming

00:45:17.100 --> 00:45:17.820
<v Speaker 0>is all we need.

00:45:18.595 --> 00:45:20.675
<v Speaker 1>You know, that href looks like

00:45:21.475 --> 00:45:23.475
<v Speaker 1>the reference for

00:45:23.555 --> 00:45:24.755
<v Speaker 1>that query.

00:45:24.755 --> 00:45:26.035
<v Speaker 0>You're correct. Yeah. Inside.

00:45:27.635 --> 00:45:29.795
<v Speaker 1>And it's funny that it returned multiple items,

00:45:29.795 --> 00:45:30.755
<v Speaker 1>but I guess we could just take the

00:45:30.755 --> 00:45:32.600
<v Speaker 1>first one. Right? Yeah. We'll just grab the

00:45:32.600 --> 00:45:34.920
<v Speaker 0>first one. So we've got this items with

00:45:34.920 --> 00:45:36.920
<v Speaker 0>20 songs that it found. We want this

00:45:36.920 --> 00:45:38.920
<v Speaker 0>URI, so we're gonna use the helper copy

00:45:38.920 --> 00:45:39.640
<v Speaker 0>path.

00:45:39.960 --> 00:45:41.800
<v Speaker 0>We're gonna re enable this.

00:45:42.760 --> 00:45:44.120
<v Speaker 0>Pop open the params.

00:45:45.414 --> 00:45:46.775
<v Speaker 0>Add our variable,

00:45:49.335 --> 00:45:50.375
<v Speaker 0>and deploy.

00:45:51.575 --> 00:45:52.775
<v Speaker 0>And that may

00:45:52.934 --> 00:45:54.454
<v Speaker 0>just be crazy enough to work.

00:45:58.160 --> 00:46:00.320
<v Speaker 0>Alright. I'll just fire for the same test

00:46:00.320 --> 00:46:01.040
<v Speaker 0>event.

00:46:03.440 --> 00:46:05.040
<v Speaker 0>And then now we'll see if the Spotify

00:46:05.040 --> 00:46:07.440
<v Speaker 0>app oh, wow. There we go. Awesome.

00:46:09.405 --> 00:46:10.685
<v Speaker 1>Awesome. That was fun.

00:46:11.485 --> 00:46:13.405
<v Speaker 1>That was. I love the

00:46:15.005 --> 00:46:17.485
<v Speaker 1>just the iteration of, like, having to get

00:46:17.485 --> 00:46:19.165
<v Speaker 1>my user ID. And it's it's all the

00:46:19.165 --> 00:46:22.045
<v Speaker 1>grunt work involved in every integration, like you

00:46:22.045 --> 00:46:24.869
<v Speaker 1>said. Right? It it it's tough to piece

00:46:24.869 --> 00:46:27.030
<v Speaker 1>the steps together, and the problem is just

00:46:27.030 --> 00:46:28.950
<v Speaker 1>always more complex when you work with these

00:46:28.950 --> 00:46:30.150
<v Speaker 1>third party APIs.

00:46:30.150 --> 00:46:32.710
<v Speaker 1>But, yeah, we think the observability and the

00:46:32.710 --> 00:46:34.869
<v Speaker 1>testing at least helps as much as we

00:46:34.869 --> 00:46:35.109
<v Speaker 1>can.

00:46:37.225 --> 00:46:37.945
<v Speaker 0>Definitely.

00:46:38.985 --> 00:46:41.625
<v Speaker 0>Alright. Now just because, Frank, you were kind

00:46:41.625 --> 00:46:43.305
<v Speaker 0>enough to send me this, I'm gonna send

00:46:43.305 --> 00:46:44.505
<v Speaker 0>your event through too.

00:46:45.545 --> 00:46:46.665
<v Speaker 0>Just to see what we get in the

00:46:46.665 --> 00:46:48.265
<v Speaker 0>playlist, and then we'll move on to another

00:46:48.265 --> 00:46:48.585
<v Speaker 0>demo.

00:46:50.840 --> 00:46:53.400
<v Speaker 0>Come on. There we go. And flames. Good

00:46:53.400 --> 00:46:54.040
<v Speaker 0>chin.

00:46:54.680 --> 00:46:57.160
<v Speaker 0>Awesome. Thank you, Frank. That was fun. Awesome.

00:46:58.520 --> 00:46:59.240
<v Speaker 0>Alright.

00:47:00.520 --> 00:47:02.600
<v Speaker 0>What else are you feeling? Anything

00:47:02.680 --> 00:47:03.720
<v Speaker 0>you wanna pick up here?

00:47:04.875 --> 00:47:07.515
<v Speaker 1>Let's see. Let's you wanna do some stuff

00:47:07.515 --> 00:47:08.875
<v Speaker 1>with Discord.

00:47:08.875 --> 00:47:11.515
<v Speaker 1>Right? Yeah. Let's do something with Discord. Yeah.

00:47:12.795 --> 00:47:13.515
<v Speaker 0>So

00:47:13.835 --> 00:47:16.235
<v Speaker 0>we have I can't remember if there's a

00:47:16.235 --> 00:47:17.035
<v Speaker 0>Discord.

00:47:17.195 --> 00:47:17.995
<v Speaker 0>Do we want no.

00:47:19.310 --> 00:47:19.950
<v Speaker 0>Yeah.

00:47:20.750 --> 00:47:22.670
<v Speaker 0>I'm just having an internal monologue for myself

00:47:22.670 --> 00:47:24.670
<v Speaker 0>so you're not invited to. So Yeah. Yeah.

00:47:24.670 --> 00:47:27.470
<v Speaker 0>Let's create an event source. We have Discord

00:47:27.470 --> 00:47:28.590
<v Speaker 0>already connected.

00:47:29.550 --> 00:47:31.070
<v Speaker 0>I think we did Discord

00:47:31.485 --> 00:47:33.325
<v Speaker 0>bot, and then we did a

00:47:33.645 --> 00:47:36.605
<v Speaker 1>You had the Pipedream bot installed on your

00:47:36.605 --> 00:47:39.405
<v Speaker 1>guild. Right? I do. Yes. Go ahead and

00:47:39.405 --> 00:47:40.925
<v Speaker 1>try to select Discord,

00:47:40.925 --> 00:47:41.405
<v Speaker 1>actually.

00:47:42.685 --> 00:47:43.325
<v Speaker 1>And

00:47:43.645 --> 00:47:46.285
<v Speaker 1>as long as you select the the same

00:47:47.660 --> 00:47:50.220
<v Speaker 1>off provision, the same, you know, guild that

00:47:50.220 --> 00:47:52.220
<v Speaker 1>you had, then I think this should work.

00:47:52.460 --> 00:47:54.220
<v Speaker 1>And the the reason so we have two

00:47:54.220 --> 00:47:57.020
<v Speaker 1>Discord integrations. There's the Discord one where we

00:47:57.020 --> 00:47:59.580
<v Speaker 1>install the Pipedream bot in your guild. That

00:47:59.580 --> 00:48:01.580
<v Speaker 1>actually allows us to listen for new messages

00:48:01.580 --> 00:48:02.220
<v Speaker 1>immediately.

00:48:02.835 --> 00:48:05.155
<v Speaker 1>So you add a new message to whatever

00:48:05.155 --> 00:48:06.995
<v Speaker 1>channel you wanna listen to.

00:48:07.555 --> 00:48:09.955
<v Speaker 1>You can actually select multiple channels here. Right?

00:48:10.115 --> 00:48:11.474
<v Speaker 1>And then Pipedream

00:48:11.474 --> 00:48:13.555
<v Speaker 1>should ping this event source,

00:48:14.195 --> 00:48:15.075
<v Speaker 1>immediately.

00:48:15.075 --> 00:48:17.315
<v Speaker 1>If you use the Discord bot integration,

00:48:17.315 --> 00:48:19.160
<v Speaker 1>you can run your own bot. So if

00:48:19.160 --> 00:48:20.760
<v Speaker 1>that's your use case, you could actually set

00:48:20.760 --> 00:48:23.320
<v Speaker 1>up your own bot in your guild, connect

00:48:23.320 --> 00:48:24.680
<v Speaker 1>that bot to Pipedream.

00:48:24.680 --> 00:48:27.880
<v Speaker 1>That integration, though, runs on a cron since

00:48:27.880 --> 00:48:29.960
<v Speaker 1>there's no real time integration for listening for

00:48:29.960 --> 00:48:32.325
<v Speaker 1>bot messages. So can kinda see these event

00:48:32.325 --> 00:48:34.165
<v Speaker 1>sources. Some work instantly

00:48:34.245 --> 00:48:37.765
<v Speaker 1>because there's a webhook or a WebSocket integration

00:48:37.765 --> 00:48:39.285
<v Speaker 1>that talks to Pipedream.

00:48:39.525 --> 00:48:42.325
<v Speaker 1>Some, because the API doesn't support webhooks, we

00:48:42.325 --> 00:48:44.005
<v Speaker 1>have to run on a schedule like you

00:48:44.005 --> 00:48:46.005
<v Speaker 1>did for Twitter. So just a a brief

00:48:46.005 --> 00:48:47.760
<v Speaker 1>description kind of of, you know, that's all

00:48:47.760 --> 00:48:49.440
<v Speaker 1>the work that we do. We build an

00:48:49.440 --> 00:48:50.800
<v Speaker 1>event source internally.

00:48:51.520 --> 00:48:52.800
<v Speaker 0>Nice. Okay.

00:48:54.000 --> 00:48:54.640
<v Speaker 0>So

00:48:55.040 --> 00:48:57.920
<v Speaker 0>let's just see your discord method. Let's get

00:48:57.920 --> 00:48:58.560
<v Speaker 0>this live.

00:49:00.414 --> 00:49:01.535
<v Speaker 0>Great. So

00:49:06.335 --> 00:49:07.454
<v Speaker 0>why don't we

00:49:08.654 --> 00:49:11.615
<v Speaker 0>just have it relay messages onto my Twitter

00:49:11.615 --> 00:49:14.060
<v Speaker 0>account then? What can go wrong with that?

00:49:14.140 --> 00:49:14.700
<v Speaker 0>So

00:49:16.300 --> 00:49:17.820
<v Speaker 0>it's right now it's it's listening for an

00:49:17.820 --> 00:49:18.940
<v Speaker 0>event. So

00:49:19.820 --> 00:49:21.020
<v Speaker 0>did I prepare?

00:49:21.020 --> 00:49:23.740
<v Speaker 0>I did. Okay. So we can just see.

00:49:23.900 --> 00:49:24.620
<v Speaker 0>Hello.

00:49:25.820 --> 00:49:26.620
<v Speaker 0>Livestream.

00:49:28.035 --> 00:49:29.954
<v Speaker 0>You're saying that should be yeah. That was

00:49:29.954 --> 00:49:32.195
<v Speaker 0>pretty instant there. Awesome. Okay.

00:49:33.395 --> 00:49:34.355
<v Speaker 0>So

00:49:34.355 --> 00:49:36.434
<v Speaker 0>let's do something with that. Now I do

00:49:36.434 --> 00:49:38.115
<v Speaker 0>have my Twitter connected too.

00:49:40.470 --> 00:49:42.950
<v Speaker 0>We can just have this post a tweet.

00:49:43.670 --> 00:49:44.950
<v Speaker 0>Do you wanna do anything in in the

00:49:44.950 --> 00:49:47.430
<v Speaker 0>middle first or just post it direct? Yeah.

00:49:47.430 --> 00:49:49.190
<v Speaker 1>Let's let's try direct to make sure it

00:49:49.190 --> 00:49:51.670
<v Speaker 1>works. Then maybe we could could decorate it,

00:49:51.670 --> 00:49:53.349
<v Speaker 1>you know, somewhat of a Spotify example. I'm

00:49:53.349 --> 00:49:55.964
<v Speaker 1>just let me think about, like, data we

00:49:55.964 --> 00:49:57.484
<v Speaker 1>could get about it. Right? Like, I feel

00:49:57.484 --> 00:49:59.325
<v Speaker 1>like there's another API we could use

00:49:59.724 --> 00:50:01.724
<v Speaker 1>in the middle. Yeah. I wonder if we

00:50:01.724 --> 00:50:03.485
<v Speaker 0>could do some sort of

00:50:03.805 --> 00:50:06.125
<v Speaker 0>guest lookup or something like that to attach

00:50:06.125 --> 00:50:08.045
<v Speaker 0>to it. We're doing it great with Giphy,

00:50:08.045 --> 00:50:09.244
<v Speaker 1>and so that that's a great example.

00:50:09.990 --> 00:50:12.710
<v Speaker 0>Alright. So in fact, I'll just copy the

00:50:12.710 --> 00:50:14.230
<v Speaker 0>path here instead of

00:50:14.630 --> 00:50:16.630
<v Speaker 0>picking something random. So let's see what do

00:50:16.630 --> 00:50:17.190
<v Speaker 0>we have.

00:50:17.590 --> 00:50:19.190
<v Speaker 0>Let's then click the author name.

00:50:22.164 --> 00:50:23.685
<v Speaker 0>Rawkode

00:50:24.645 --> 00:50:25.285
<v Speaker 0>says,

00:50:26.244 --> 00:50:27.685
<v Speaker 0>where was my message?

00:50:30.005 --> 00:50:31.365
<v Speaker 0>Hello, livestream.

00:50:32.164 --> 00:50:35.365
<v Speaker 0>I guess, content. Is that just escaped, I

00:50:35.365 --> 00:50:38.090
<v Speaker 0>guess? Yeah. I I actually don't know. That's

00:50:38.090 --> 00:50:38.730
<v Speaker 1>funny. Well,

00:50:39.610 --> 00:50:41.370
<v Speaker 0>we're we'll find out. So

00:50:41.770 --> 00:50:43.370
<v Speaker 0>we're now set our status.

00:50:44.250 --> 00:50:45.770
<v Speaker 0>We can just deploy this.

00:50:46.890 --> 00:50:48.650
<v Speaker 0>I guess what we've done is just to

00:50:48.650 --> 00:50:50.250
<v Speaker 0>save you that we're gonna replicate all the

00:50:50.250 --> 00:50:51.210
<v Speaker 0>messages from here.

00:50:52.355 --> 00:50:55.555
<v Speaker 0>This is really to my from

00:50:57.875 --> 00:50:59.555
<v Speaker 0>my Discord

00:50:59.555 --> 00:50:59.954
<v Speaker 0>with.

00:51:07.280 --> 00:51:08.800
<v Speaker 0>Oh, I didn't turn on.

00:51:09.760 --> 00:51:11.360
<v Speaker 1>I

00:51:11.520 --> 00:51:13.760
<v Speaker 1>know. We're it's one of the UX things

00:51:13.760 --> 00:51:15.920
<v Speaker 1>we we need to improve. But the the

00:51:15.920 --> 00:51:17.760
<v Speaker 1>the event should have come in. So if

00:51:17.760 --> 00:51:19.445
<v Speaker 1>you select it as a test event, should

00:51:19.445 --> 00:51:20.725
<v Speaker 1>work. But, yeah, you could try that again.

00:51:20.725 --> 00:51:21.845
<v Speaker 1>Perfect. And

00:51:23.685 --> 00:51:26.165
<v Speaker 0>let's go check out my Twitter.

00:51:31.440 --> 00:51:34.079
<v Speaker 0>Rawkode says this is really it from my

00:51:34.079 --> 00:51:35.839
<v Speaker 0>Discord with Pipedream. Okay. Let's do something a

00:51:35.839 --> 00:51:37.760
<v Speaker 0>bit more fun with this then. Not that

00:51:37.760 --> 00:51:39.600
<v Speaker 0>that wasn't fun, but we can tell. So

00:51:41.760 --> 00:51:43.040
<v Speaker 0>you said to us, I've never played with

00:51:43.040 --> 00:51:44.320
<v Speaker 0>the Gaffee integration.

00:51:44.480 --> 00:51:44.720
<v Speaker 0>So

00:51:45.875 --> 00:51:46.755
<v Speaker 0>let's see.

00:51:48.035 --> 00:51:50.435
<v Speaker 0>What we need to do? Search.

00:51:51.954 --> 00:51:55.075
<v Speaker 0>Gif search, I guess. Gif search, I believe,

00:51:55.075 --> 00:51:56.035
<v Speaker 1>is the one. Yeah.

00:51:57.714 --> 00:51:58.674
<v Speaker 0>API key.

00:52:01.720 --> 00:52:03.160
<v Speaker 1>Yes. Yes.

00:52:04.279 --> 00:52:05.640
<v Speaker 0>Alright. I'll do that

00:52:05.960 --> 00:52:07.000
<v Speaker 0>over here.

00:52:09.720 --> 00:52:11.160
<v Speaker 0>Think I have a Giphy account.

00:52:12.465 --> 00:52:30.305
<v Speaker 0>And

00:52:26.960 --> 00:52:29.440
<v Speaker 0>An interesting bit, but I'm promised. Second.

00:52:43.725 --> 00:52:45.005
<v Speaker 0>Telling me it sent me a two factor

00:52:45.005 --> 00:52:47.165
<v Speaker 0>code, but I don't have one.

00:52:48.365 --> 00:52:50.765
<v Speaker 0>Alright. Okay. Let's scratch that plan.

00:52:53.300 --> 00:52:55.300
<v Speaker 1>Yeah. I'm looking through some other,

00:52:56.100 --> 00:52:57.460
<v Speaker 1>you know, text

00:52:57.460 --> 00:52:59.060
<v Speaker 1>decoration APIs,

00:52:59.060 --> 00:53:00.740
<v Speaker 1>like anything that we could pass

00:53:01.540 --> 00:53:03.700
<v Speaker 1>text to. I guess, you know, one thing

00:53:03.700 --> 00:53:04.260
<v Speaker 1>you

00:53:05.075 --> 00:53:05.875
<v Speaker 1>could do

00:53:06.595 --> 00:53:08.994
<v Speaker 1>I forget if Giphy has any public

00:53:09.234 --> 00:53:11.315
<v Speaker 1>API endpoints. I don't know if they do.

00:53:13.954 --> 00:53:15.714
<v Speaker 1>There is a are you a Star Wars

00:53:15.714 --> 00:53:16.035
<v Speaker 0>fan?

00:53:17.210 --> 00:53:17.930
<v Speaker 0>Yeah.

00:53:18.569 --> 00:53:19.450
<v Speaker 1>Star

00:53:19.450 --> 00:53:20.570
<v Speaker 1>Wars API.

00:53:21.450 --> 00:53:22.170
<v Speaker 1>And,

00:53:23.609 --> 00:53:25.770
<v Speaker 1>you know, I'm wondering if we could just,

00:53:25.770 --> 00:53:27.930
<v Speaker 1>just as an example, you know, hit that

00:53:27.930 --> 00:53:29.770
<v Speaker 1>API to decorate it with

00:53:31.505 --> 00:53:32.225
<v Speaker 1>some

00:53:32.705 --> 00:53:34.625
<v Speaker 1>you know, you can, for instance, get a

00:53:34.625 --> 00:53:37.985
<v Speaker 1>a random starship or a species or a

00:53:37.985 --> 00:53:40.385
<v Speaker 1>planet. They have APIs actually for listing

00:53:40.545 --> 00:53:41.825
<v Speaker 1>all those resources.

00:53:42.065 --> 00:53:43.825
<v Speaker 1>So we could we could just decorate it

00:53:43.825 --> 00:53:45.185
<v Speaker 1>with that as a simple example.

00:53:46.010 --> 00:53:46.810
<v Speaker 1>There's

00:53:48.010 --> 00:53:49.050
<v Speaker 1>yeah. What do what do you think about

00:53:49.050 --> 00:53:50.650
<v Speaker 1>that? There's there's a Reddit integration that we

00:53:50.650 --> 00:53:51.370
<v Speaker 1>could use.

00:53:52.410 --> 00:53:54.490
<v Speaker 1>Yeah. Well, what's the Star Wars API? We'll

00:53:54.490 --> 00:53:56.089
<v Speaker 0>just we'll we'll just we don't even need

00:53:56.089 --> 00:53:57.690
<v Speaker 0>to use it. We're just we're just composing

00:53:57.690 --> 00:54:00.170
<v Speaker 0>random stuff here. So Yeah. Yeah. So if

00:54:00.170 --> 00:54:02.474
<v Speaker 1>you search for a a new step, it's

00:54:02.474 --> 00:54:03.275
<v Speaker 1>technically

00:54:03.515 --> 00:54:05.595
<v Speaker 1>Swapi, SWAPI.

00:54:08.075 --> 00:54:08.795
<v Speaker 0>K.

00:54:11.275 --> 00:54:12.395
<v Speaker 0>It starts it.

00:54:13.434 --> 00:54:15.515
<v Speaker 1>Yeah. And I think maybe just try the

00:54:15.515 --> 00:54:18.420
<v Speaker 1>return random character name. Like, that that wraps

00:54:18.420 --> 00:54:19.700
<v Speaker 1>a little bit of logic.

00:54:20.020 --> 00:54:22.260
<v Speaker 1>You'll notice they have a a people API.

00:54:22.260 --> 00:54:23.540
<v Speaker 1>And so, you know, if you hit that,

00:54:23.540 --> 00:54:24.900
<v Speaker 1>you get a list of people back. We

00:54:24.900 --> 00:54:26.500
<v Speaker 1>just happen to return a random

00:54:27.140 --> 00:54:28.660
<v Speaker 1>Star Wars character. Right?

00:54:29.484 --> 00:54:31.484
<v Speaker 1>And and then you can use that return

00:54:31.484 --> 00:54:33.565
<v Speaker 1>value in future steps. Let's make sure that

00:54:33.565 --> 00:54:34.365
<v Speaker 1>still works.

00:54:34.765 --> 00:54:37.085
<v Speaker 0>Yeah. So I just disabled the auto tweet.

00:54:37.325 --> 00:54:38.765
<v Speaker 0>And then what we'll do is we'll fire

00:54:38.765 --> 00:54:40.525
<v Speaker 0>through one test event, and then we'll see

00:54:40.525 --> 00:54:41.965
<v Speaker 0>what we get back from

00:54:43.480 --> 00:54:44.360
<v Speaker 0>Rawkode.

00:54:44.680 --> 00:54:46.040
<v Speaker 0>We got CTPOs.

00:54:46.040 --> 00:54:48.120
<v Speaker 0>I'm gonna copy the path, re enable our

00:54:48.120 --> 00:54:48.760
<v Speaker 0>tweet.

00:54:49.160 --> 00:54:51.320
<v Speaker 0>And instead of me tweeting it then, we'll

00:54:51.320 --> 00:54:52.120
<v Speaker 0>just say

00:54:52.520 --> 00:54:54.920
<v Speaker 0>that the author is a random stuff.

00:54:56.200 --> 00:54:56.440
<v Speaker 0>Not?

00:54:58.865 --> 00:55:00.385
<v Speaker 0>So that's all enabled.

00:55:02.545 --> 00:55:04.625
<v Speaker 0>Oh, yeah. I'll send the discourse manager. So

00:55:04.625 --> 00:55:05.345
<v Speaker 0>let's see.

00:55:05.905 --> 00:55:07.905
<v Speaker 0>So somebody from Star Wars

00:55:08.545 --> 00:55:09.425
<v Speaker 0>says,

00:55:09.984 --> 00:55:10.385
<v Speaker 0>hello.

00:55:10.820 --> 00:55:13.700
<v Speaker 0>These are the correct droids.

00:55:13.780 --> 00:55:14.580
<v Speaker 0>I know.

00:55:19.220 --> 00:55:20.260
<v Speaker 0>There we go.

00:55:22.180 --> 00:55:23.940
<v Speaker 0>We got that. We got that. And we

00:55:23.940 --> 00:55:26.125
<v Speaker 0>posted the tweet. So our two t two

00:55:26.125 --> 00:55:26.924
<v Speaker 0>says these are

00:55:27.644 --> 00:55:28.685
<v Speaker 1>Awesome.

00:55:29.724 --> 00:55:31.405
<v Speaker 0>We rushed Twitter account.

00:55:32.125 --> 00:55:34.765
<v Speaker 0>And there we go. Awesome. I like that.

00:55:34.765 --> 00:55:37.404
<v Speaker 0>That was good. Do you wanna go into

00:55:37.404 --> 00:55:39.329
<v Speaker 1>some of the there there are some advanced

00:55:39.329 --> 00:55:41.410
<v Speaker 1>settings here that I think could be interesting

00:55:41.410 --> 00:55:42.849
<v Speaker 1>to peruse

00:55:43.009 --> 00:55:44.930
<v Speaker 1>just to kinda take this and,

00:55:45.170 --> 00:55:47.650
<v Speaker 1>you know, we've obviously been playing around with

00:55:47.730 --> 00:55:49.329
<v Speaker 1>some kind of trivial

00:55:49.490 --> 00:55:51.650
<v Speaker 1>if this then, you know, do this. But

00:55:51.650 --> 00:55:53.305
<v Speaker 1>I wanted to show off some more advanced

00:55:53.305 --> 00:55:54.425
<v Speaker 1>examples where,

00:55:54.505 --> 00:55:56.185
<v Speaker 1>for example, like, concurrency,

00:55:56.345 --> 00:55:57.465
<v Speaker 1>can come into play.

00:55:58.425 --> 00:56:00.185
<v Speaker 0>Yeah. Let's do it. Okay.

00:56:00.585 --> 00:56:02.505
<v Speaker 1>So if you go into your settings,

00:56:04.185 --> 00:56:05.545
<v Speaker 1>near the top

00:56:05.960 --> 00:56:08.359
<v Speaker 1>Right. So I just wanna walk through we

00:56:08.359 --> 00:56:09.720
<v Speaker 1>can walk through each of these because they're

00:56:09.720 --> 00:56:11.960
<v Speaker 1>they're actually all interesting features of Pipedream.

00:56:12.440 --> 00:56:13.400
<v Speaker 1>First of all,

00:56:13.720 --> 00:56:15.960
<v Speaker 1>we we haven't talked about errors because you

00:56:15.960 --> 00:56:17.960
<v Speaker 1>actually haven't made any. So congratulations.

00:56:18.440 --> 00:56:20.359
<v Speaker 1>Cool that we've gotten this far without throwing

00:56:20.359 --> 00:56:20.920
<v Speaker 1>any error.

00:56:21.485 --> 00:56:23.165
<v Speaker 1>Maybe we can do that just to see

00:56:23.165 --> 00:56:25.245
<v Speaker 1>how it works in a moment. But at

00:56:25.245 --> 00:56:26.205
<v Speaker 1>a high level,

00:56:26.365 --> 00:56:27.245
<v Speaker 1>Pipedream

00:56:27.245 --> 00:56:29.725
<v Speaker 1>will, number one, display

00:56:30.045 --> 00:56:33.005
<v Speaker 1>any error that's thrown by a node step

00:56:33.260 --> 00:56:35.579
<v Speaker 1>within the step and show you very clearly,

00:56:35.579 --> 00:56:37.420
<v Speaker 1>you know, what step that happened in, and

00:56:37.420 --> 00:56:39.260
<v Speaker 1>we try to surface as much information as

00:56:39.260 --> 00:56:41.420
<v Speaker 1>we can about the error. We also

00:56:41.660 --> 00:56:43.660
<v Speaker 1>forward that error to what we call the

00:56:43.660 --> 00:56:44.940
<v Speaker 1>global error workflow.

00:56:45.675 --> 00:56:46.635
<v Speaker 1>By default,

00:56:46.715 --> 00:56:47.995
<v Speaker 1>maybe if you open this in a new

00:56:47.995 --> 00:56:49.355
<v Speaker 1>tab, we can just take a look. Have

00:56:49.355 --> 00:56:51.275
<v Speaker 1>you messed around with this at all?

00:56:51.915 --> 00:56:54.395
<v Speaker 0>So I only noticed the global error workflow

00:56:54.395 --> 00:56:56.075
<v Speaker 0>maybe a couple of days ago. I wasn't

00:56:56.075 --> 00:56:57.435
<v Speaker 0>sure if I just missed it all this

00:56:57.435 --> 00:56:59.770
<v Speaker 0>time or if it was near. So Yeah.

00:56:59.770 --> 00:57:01.369
<v Speaker 1>It you know, it's meant to be hidden

00:57:01.369 --> 00:57:03.690
<v Speaker 1>because it it runs on autopilot.

00:57:03.690 --> 00:57:06.970
<v Speaker 1>Now the the idea is, by default, this

00:57:06.970 --> 00:57:08.490
<v Speaker 1>is just another workflow.

00:57:08.809 --> 00:57:10.490
<v Speaker 1>So if an error happens in one of

00:57:10.490 --> 00:57:11.369
<v Speaker 1>your workflows,

00:57:11.609 --> 00:57:13.609
<v Speaker 1>it just sends the error to this workflow.

00:57:14.195 --> 00:57:15.555
<v Speaker 1>And this workflow

00:57:15.795 --> 00:57:18.115
<v Speaker 1>sends you an email with all the details

00:57:18.115 --> 00:57:20.115
<v Speaker 1>of the errors. You've probably gotten those emails

00:57:20.115 --> 00:57:21.875
<v Speaker 1>before, I imagine, when you when you have

00:57:21.875 --> 00:57:22.515
<v Speaker 1>an error.

00:57:23.235 --> 00:57:25.795
<v Speaker 1>But in essence, you know, by default, you'll

00:57:25.795 --> 00:57:27.235
<v Speaker 1>receive one email

00:57:27.549 --> 00:57:30.430
<v Speaker 1>per unique error per workflow

00:57:30.670 --> 00:57:32.270
<v Speaker 1>every twenty four hours.

00:57:32.510 --> 00:57:35.150
<v Speaker 1>So all that means is we don't wanna

00:57:35.150 --> 00:57:36.670
<v Speaker 1>spam you. If you have a high volume

00:57:36.670 --> 00:57:39.630
<v Speaker 1>workflow that throws the same exact error, you'll

00:57:39.630 --> 00:57:41.150
<v Speaker 1>only get one email in a twenty four

00:57:41.150 --> 00:57:41.710
<v Speaker 1>hour period.

00:57:42.245 --> 00:57:44.085
<v Speaker 1>But if you get a new error, you'll

00:57:44.085 --> 00:57:45.765
<v Speaker 1>get a new email. Right? Because it's a

00:57:45.765 --> 00:57:47.285
<v Speaker 1>new issue. You need to troubleshoot.

00:57:47.365 --> 00:57:49.605
<v Speaker 1>So by default, this workflow handles all that

00:57:49.605 --> 00:57:51.605
<v Speaker 1>logic for you. If you you know, this

00:57:51.605 --> 00:57:53.845
<v Speaker 1>logic is just what I described. But if

00:57:53.845 --> 00:57:55.205
<v Speaker 1>you scroll down briefly,

00:57:55.605 --> 00:57:56.565
<v Speaker 1>you'll see the

00:57:57.280 --> 00:57:58.240
<v Speaker 1>email,

00:57:58.960 --> 00:58:00.000
<v Speaker 1>me step.

00:58:00.160 --> 00:58:02.160
<v Speaker 1>So you can email yourself

00:58:02.160 --> 00:58:04.080
<v Speaker 1>from any Pipedream workflow.

00:58:05.280 --> 00:58:08.080
<v Speaker 1>There's this action, email me, that you can

00:58:08.080 --> 00:58:11.095
<v Speaker 1>search for in any workflow. You can also

00:58:11.255 --> 00:58:13.095
<v Speaker 1>use this special

00:58:13.335 --> 00:58:15.015
<v Speaker 1>function in node,

00:58:15.175 --> 00:58:17.175
<v Speaker 1>dollar send dot email.

00:58:17.655 --> 00:58:19.095
<v Speaker 1>So dollar send

00:58:19.175 --> 00:58:20.215
<v Speaker 1>exposes

00:58:20.695 --> 00:58:24.055
<v Speaker 1>bunch of these special functions, dollar send dot

00:58:24.055 --> 00:58:26.830
<v Speaker 1>email, dollar send dot s three,

00:58:26.910 --> 00:58:28.910
<v Speaker 1>dollar send dot h t t p

00:58:29.390 --> 00:58:32.350
<v Speaker 1>is a Pipedream built integration for quickly sending

00:58:32.350 --> 00:58:35.230
<v Speaker 1>data to common destinations like that. Email is

00:58:35.230 --> 00:58:36.270
<v Speaker 1>just one of those destinations.

00:58:36.954 --> 00:58:39.835
<v Speaker 1>So, again, we're essentially just dogfooding

00:58:39.835 --> 00:58:42.954
<v Speaker 1>our own product tier by creating this workflow

00:58:42.954 --> 00:58:45.434
<v Speaker 1>and then letting it drive your error notifications

00:58:45.434 --> 00:58:47.195
<v Speaker 1>for all of your workflows.

00:58:47.434 --> 00:58:48.875
<v Speaker 1>And the cool thing is since it's a

00:58:48.875 --> 00:58:51.115
<v Speaker 1>workflow, you can modify it in any way

00:58:51.115 --> 00:58:51.515
<v Speaker 1>you want.

00:58:52.190 --> 00:58:54.270
<v Speaker 1>If you wanted to send oh, and you

00:58:54.270 --> 00:58:56.350
<v Speaker 1>did. There we go. That's awesome.

00:58:57.710 --> 00:58:59.630
<v Speaker 0>Yeah. But I noticed the new well, I

00:58:59.630 --> 00:59:01.070
<v Speaker 0>thought it was a new feature. I was

00:59:01.070 --> 00:59:02.350
<v Speaker 0>like, hell, I wonder if I can send

00:59:02.350 --> 00:59:03.950
<v Speaker 0>all the errors to my Discord. Although I

00:59:03.950 --> 00:59:06.190
<v Speaker 0>haven't had any errors yet. So Right.

00:59:07.345 --> 00:59:09.745
<v Speaker 1>Yeah. Exactly. This is exactly what we hope

00:59:09.745 --> 00:59:11.985
<v Speaker 1>people will do. Right? If you use Discord

00:59:11.985 --> 00:59:14.785
<v Speaker 1>or Slack or what you know, Telegram, right,

00:59:14.785 --> 00:59:16.225
<v Speaker 1>you should be able to send

00:59:16.385 --> 00:59:19.585
<v Speaker 1>messages to your destination of choice. So the

00:59:19.585 --> 00:59:21.265
<v Speaker 1>global error workflow, if you go back to

00:59:21.265 --> 00:59:22.225
<v Speaker 1>your workflow settings,

00:59:22.869 --> 00:59:25.750
<v Speaker 1>you know, that's essentially by default, it's on.

00:59:26.550 --> 00:59:28.390
<v Speaker 1>There's a ton of other you know, I

00:59:28.390 --> 00:59:30.470
<v Speaker 1>wish we had time to cover this. I

00:59:30.470 --> 00:59:31.750
<v Speaker 1>I don't think it's worth going into the

00:59:31.750 --> 00:59:33.030
<v Speaker 1>whole API today.

00:59:33.430 --> 00:59:35.109
<v Speaker 1>But I'll briefly show you if you look

00:59:35.109 --> 00:59:37.830
<v Speaker 1>at our API docs back in back in

00:59:37.830 --> 00:59:38.310
<v Speaker 1>docs.

00:59:38.765 --> 00:59:40.285
<v Speaker 0>Mhmm. And then

00:59:40.765 --> 00:59:42.125
<v Speaker 1>scroll down to the

00:59:42.845 --> 00:59:43.965
<v Speaker 1>API

00:59:45.005 --> 00:59:45.885
<v Speaker 1>section.

00:59:45.885 --> 00:59:47.405
<v Speaker 1>Go to the REST API.

00:59:48.845 --> 00:59:49.565
<v Speaker 1>This

00:59:49.885 --> 00:59:52.365
<v Speaker 1>lists all of our API endpoints we expose

00:59:52.365 --> 00:59:53.405
<v Speaker 1>in our REST API.

00:59:53.920 --> 00:59:56.720
<v Speaker 1>There's a lot that you can do. The

00:59:56.720 --> 00:59:58.320
<v Speaker 1>reason I thought of this is

00:59:58.560 --> 01:00:00.720
<v Speaker 1>we have an endpoint for retrieving the workflow

01:00:00.720 --> 01:00:02.240
<v Speaker 1>errors via API.

01:00:02.400 --> 01:00:05.040
<v Speaker 1>So if, for example, you wanted highly custom

01:00:05.120 --> 01:00:06.160
<v Speaker 1>error handling,

01:00:06.400 --> 01:00:08.080
<v Speaker 1>you know, for a specific workflow,

01:00:08.585 --> 01:00:10.585
<v Speaker 1>'d actually get the workflow errors for a

01:00:10.585 --> 01:00:11.625
<v Speaker 1>specific workflow,

01:00:11.944 --> 01:00:13.865
<v Speaker 1>send those to a custom workflow.

01:00:14.345 --> 01:00:15.625
<v Speaker 1>It's similar to

01:00:16.184 --> 01:00:18.184
<v Speaker 1>are you familiar with AWS Lambda? Do you

01:00:18.184 --> 01:00:19.385
<v Speaker 1>work with Lambda at all?

01:00:20.585 --> 01:00:22.730
<v Speaker 0>I have done in the past. Yeah. Yeah.

01:00:22.730 --> 01:00:24.650
<v Speaker 1>There's, you know, there's concepts in Lambda and

01:00:24.650 --> 01:00:26.809
<v Speaker 1>in other systems where you essentially have an

01:00:26.809 --> 01:00:29.210
<v Speaker 1>error handler per Lambda function.

01:00:29.369 --> 01:00:30.010
<v Speaker 1>Right?

01:00:30.170 --> 01:00:32.650
<v Speaker 1>The global error workflow, I think, simplifies it

01:00:32.650 --> 01:00:33.930
<v Speaker 1>because you don't need to think about error

01:00:33.930 --> 01:00:36.650
<v Speaker 1>handling. Right? All errors by default are sent

01:00:36.650 --> 01:00:38.865
<v Speaker 1>to this global workflow. You get an email,

01:00:38.865 --> 01:00:40.865
<v Speaker 1>you deal with them. But the idea is

01:00:40.865 --> 01:00:42.865
<v Speaker 1>if you want that advanced control

01:00:43.025 --> 01:00:45.185
<v Speaker 1>for, I wanna handle errors for this workflow

01:00:45.185 --> 01:00:46.705
<v Speaker 1>in this specific way,

01:00:47.105 --> 01:00:48.785
<v Speaker 1>you can actually have your own

01:00:48.945 --> 01:00:51.665
<v Speaker 1>error handling workflow set up for a specific

01:00:51.665 --> 01:00:52.065
<v Speaker 1>workflow.

01:00:52.610 --> 01:00:55.330
<v Speaker 1>And some of the endpoints here with workflows

01:00:55.330 --> 01:00:57.330
<v Speaker 1>and specifically subscriptions

01:00:57.970 --> 01:00:59.570
<v Speaker 1>allow you to subscribe

01:00:59.650 --> 01:01:02.050
<v Speaker 1>to errors or events

01:01:02.290 --> 01:01:04.050
<v Speaker 1>from specific workflows.

01:01:04.450 --> 01:01:06.530
<v Speaker 1>So, you know, the UI is really just

01:01:06.530 --> 01:01:08.130
<v Speaker 1>a skin on top of all of this.

01:01:08.205 --> 01:01:09.565
<v Speaker 1>But behind the scenes,

01:01:09.805 --> 01:01:11.805
<v Speaker 1>you have a lot of capabilities to really

01:01:11.805 --> 01:01:14.445
<v Speaker 1>extend how workflows work. So, again, if you

01:01:14.445 --> 01:01:16.285
<v Speaker 1>wanna listen for workflow errors,

01:01:16.685 --> 01:01:19.245
<v Speaker 1>you can do that. If you want multiple

01:01:19.245 --> 01:01:21.405
<v Speaker 1>triggers for one workflow,

01:01:21.565 --> 01:01:23.245
<v Speaker 1>you can actually set that up as well.

01:01:24.400 --> 01:01:26.800
<v Speaker 1>And it it works in all different directions.

01:01:26.800 --> 01:01:30.320
<v Speaker 1>So these the subscription model via API allows

01:01:30.320 --> 01:01:32.960
<v Speaker 1>you to essentially have a workflow subscribed to

01:01:32.960 --> 01:01:35.520
<v Speaker 1>events coming in from multiple sources.

01:01:35.760 --> 01:01:38.265
<v Speaker 1>You can then have those workflows in mid

01:01:38.265 --> 01:01:40.825
<v Speaker 1>events and have other work multiple workflows subscribe

01:01:40.825 --> 01:01:41.705
<v Speaker 1>to those.

01:01:41.945 --> 01:01:43.865
<v Speaker 1>So for pretty complex workflows,

01:01:44.345 --> 01:01:46.505
<v Speaker 1>some people need these capabilities.

01:01:46.505 --> 01:01:48.025
<v Speaker 1>And, you know, I just wanted to highlight

01:01:48.025 --> 01:01:48.905
<v Speaker 1>that it's possible

01:01:49.420 --> 01:01:51.500
<v Speaker 1>via the rest API. So if you're interested,

01:01:51.500 --> 01:01:52.700
<v Speaker 1>take a look at the docs.

01:01:53.420 --> 01:01:55.260
<v Speaker 0>That's well, one of the meant the one

01:01:55.260 --> 01:01:56.700
<v Speaker 0>of the use cases you mentioned there is

01:01:56.700 --> 01:01:58.540
<v Speaker 0>something I actually tried to do this week

01:01:58.540 --> 01:02:00.540
<v Speaker 0>was have multiple triggers on our workflow.

01:02:01.885 --> 01:02:02.445
<v Speaker 0>So

01:02:03.245 --> 01:02:04.525
<v Speaker 0>Yeah. Nice to know that I can do

01:02:04.525 --> 01:02:07.485
<v Speaker 0>that advice and Yeah. Yeah. We we were

01:02:07.485 --> 01:02:09.485
<v Speaker 1>still working on all the UI components.

01:02:09.565 --> 01:02:12.445
<v Speaker 1>So you'll you'll be able to list and

01:02:12.445 --> 01:02:13.165
<v Speaker 1>create

01:02:13.325 --> 01:02:14.849
<v Speaker 1>the triggers

01:02:15.010 --> 01:02:16.849
<v Speaker 1>via the API. You won't see it in

01:02:16.849 --> 01:02:17.970
<v Speaker 1>the UI yet,

01:02:18.210 --> 01:02:20.289
<v Speaker 1>but, you know, we're we're working on all

01:02:20.289 --> 01:02:20.930
<v Speaker 1>of that.

01:02:21.250 --> 01:02:23.250
<v Speaker 1>The the next things I wanted to show

01:02:23.250 --> 01:02:25.810
<v Speaker 1>off, you know, you, by default,

01:02:26.049 --> 01:02:28.885
<v Speaker 1>have this time out of thirty seconds. If

01:02:28.885 --> 01:02:31.365
<v Speaker 1>your workflow runs for longer than thirty seconds,

01:02:31.605 --> 01:02:33.525
<v Speaker 1>it would time out, but you can increase

01:02:33.525 --> 01:02:35.285
<v Speaker 1>that up to three hundred seconds, up to

01:02:35.285 --> 01:02:36.165
<v Speaker 1>five minutes.

01:02:36.325 --> 01:02:38.165
<v Speaker 1>We keep it at thirty seconds because, you

01:02:38.165 --> 01:02:39.125
<v Speaker 1>know, we don't want you to make a

01:02:39.125 --> 01:02:39.765
<v Speaker 1>mistake

01:02:40.220 --> 01:02:42.619
<v Speaker 1>and then have your workflow just run, run,

01:02:42.619 --> 01:02:45.420
<v Speaker 1>run and use your compute time because on

01:02:45.420 --> 01:02:48.140
<v Speaker 1>the free tier, you are capped on on

01:02:48.140 --> 01:02:49.980
<v Speaker 1>compute time on a daily quota.

01:02:50.140 --> 01:02:52.299
<v Speaker 1>It's pretty generous again. So most people don't

01:02:52.299 --> 01:02:54.835
<v Speaker 1>hit it. But, again, we default to thirty

01:02:54.835 --> 01:02:56.595
<v Speaker 1>seconds just to keep you under that cap.

01:02:56.595 --> 01:02:58.435
<v Speaker 1>But for long running workflows, it does make

01:02:58.435 --> 01:03:00.275
<v Speaker 1>sense to increase it.

01:03:00.755 --> 01:03:03.795
<v Speaker 1>And then under that, you'll see you have

01:03:03.795 --> 01:03:07.100
<v Speaker 1>a lot of controls over throttling and concurrency.

01:03:07.100 --> 01:03:08.860
<v Speaker 1>So I mentioned both of these earlier.

01:03:09.260 --> 01:03:09.660
<v Speaker 1>But,

01:03:10.060 --> 01:03:11.660
<v Speaker 1>concurrency, I think, is the easiest one to

01:03:11.660 --> 01:03:13.580
<v Speaker 1>understand for people. Right? Like, you can,

01:03:14.460 --> 01:03:16.860
<v Speaker 1>if you check the limit concurrency,

01:03:17.500 --> 01:03:18.380
<v Speaker 1>box,

01:03:18.860 --> 01:03:19.740
<v Speaker 1>by default,

01:03:20.565 --> 01:03:23.445
<v Speaker 1>this serializes the execution of your workflow. So

01:03:24.005 --> 01:03:25.845
<v Speaker 1>if there's something you're doing in your workflow

01:03:25.845 --> 01:03:27.285
<v Speaker 1>where you're handling state

01:03:27.525 --> 01:03:30.005
<v Speaker 1>and that state should not be mutated by

01:03:30.005 --> 01:03:32.645
<v Speaker 1>multiple executions of the same workflow,

01:03:32.805 --> 01:03:34.724
<v Speaker 1>right, where you have some global shared, like,

01:03:34.724 --> 01:03:35.445
<v Speaker 1>singleton state,

01:03:35.880 --> 01:03:38.599
<v Speaker 1>you can serialize your workflow here so that

01:03:38.759 --> 01:03:41.480
<v Speaker 1>incoming Discord messages. Right? If you get multiple

01:03:41.480 --> 01:03:44.279
<v Speaker 1>messages at the same time, we'll queue up

01:03:44.279 --> 01:03:47.160
<v Speaker 1>those messages and then only run your workflow

01:03:47.319 --> 01:03:49.480
<v Speaker 1>one message at a time. Right?

01:03:50.345 --> 01:03:53.385
<v Speaker 1>The throttling works in combination if you want.

01:03:53.385 --> 01:03:54.585
<v Speaker 1>Right? You could

01:03:55.464 --> 01:03:56.345
<v Speaker 1>but normally,

01:03:56.505 --> 01:03:57.865
<v Speaker 1>you know, you might you might use it,

01:03:57.865 --> 01:03:59.385
<v Speaker 1>like I mentioned earlier, with a rate limit

01:03:59.385 --> 01:04:00.984
<v Speaker 1>use case. Like, let's say you receive the

01:04:00.984 --> 01:04:01.785
<v Speaker 1>Discord messages,

01:04:02.680 --> 01:04:05.240
<v Speaker 1>you're doing something with the Spotify API.

01:04:05.480 --> 01:04:08.040
<v Speaker 1>Spotify API might have its own rate limit,

01:04:08.280 --> 01:04:09.800
<v Speaker 1>and so you need to balance

01:04:10.280 --> 01:04:13.000
<v Speaker 1>the incoming messages with that Spotify rate limit

01:04:13.000 --> 01:04:14.360
<v Speaker 1>so that you don't hit you know, if

01:04:14.360 --> 01:04:15.720
<v Speaker 1>you get a thousand matches at once from

01:04:15.720 --> 01:04:16.120
<v Speaker 1>Discord,

01:04:16.555 --> 01:04:18.635
<v Speaker 1>you may get rate limited on Spotify sense.

01:04:18.635 --> 01:04:20.635
<v Speaker 1>You can throttle the execution to only run,

01:04:20.635 --> 01:04:21.275
<v Speaker 1>say,

01:04:21.515 --> 01:04:24.875
<v Speaker 1>60 events every minute, right, if that's the

01:04:24.875 --> 01:04:26.155
<v Speaker 1>Spotify rate limit.

01:04:26.395 --> 01:04:28.555
<v Speaker 1>So this is where the advanced controls really

01:04:28.555 --> 01:04:31.450
<v Speaker 1>come in to play. Like, it's again, it's

01:04:31.450 --> 01:04:33.530
<v Speaker 1>subtle. Right? But with with APIs, especially, we

01:04:33.530 --> 01:04:35.770
<v Speaker 1>see it all the time. You have either

01:04:35.770 --> 01:04:37.530
<v Speaker 1>state related issues.

01:04:38.250 --> 01:04:40.490
<v Speaker 1>Like, if you're even writing to Google Sheets,

01:04:40.490 --> 01:04:42.970
<v Speaker 1>it's not a state related issue. But if

01:04:42.970 --> 01:04:44.250
<v Speaker 1>you blast

01:04:44.595 --> 01:04:45.155
<v Speaker 1>this

01:04:45.395 --> 01:04:48.595
<v Speaker 1>Discord source with messages and try to send

01:04:48.595 --> 01:04:50.595
<v Speaker 1>all those messages to Google Sheets,

01:04:50.835 --> 01:04:54.275
<v Speaker 1>parallel executions of the workflow will overwrite the

01:04:54.275 --> 01:04:55.235
<v Speaker 1>same row.

01:04:55.795 --> 01:04:58.115
<v Speaker 1>And so you wanna manage that, right, you

01:04:58.115 --> 01:04:59.075
<v Speaker 1>have to serialize it.

01:05:00.099 --> 01:05:02.820
<v Speaker 1>All these controls come into play for complex

01:05:02.820 --> 01:05:04.580
<v Speaker 1>workflow, so that's why we built them.

01:05:05.140 --> 01:05:05.940
<v Speaker 0>Nice.

01:05:07.380 --> 01:05:08.100
<v Speaker 0>Alright.

01:05:09.540 --> 01:05:10.820
<v Speaker 0>So let's

01:05:10.900 --> 01:05:12.660
<v Speaker 0>show one more thing that I think is

01:05:12.660 --> 01:05:13.380
<v Speaker 0>cool.

01:05:14.099 --> 01:05:16.155
<v Speaker 0>We can maybe just talk about. We don't

01:05:16.155 --> 01:05:18.235
<v Speaker 0>need to show just because of time about

01:05:18.235 --> 01:05:19.435
<v Speaker 0>the SQL store.

01:05:19.915 --> 01:05:21.675
<v Speaker 0>And then I believe you've got a couple

01:05:21.675 --> 01:05:23.195
<v Speaker 0>of your own examples that you're just gonna

01:05:23.195 --> 01:05:24.875
<v Speaker 0>quickly run this through as well to show

01:05:25.115 --> 01:05:27.515
<v Speaker 0>Yeah. What can be done. So the one

01:05:27.515 --> 01:05:29.410
<v Speaker 0>thing that I really enjoy that I also

01:05:29.410 --> 01:05:30.850
<v Speaker 0>want to show and maybe we can cause

01:05:30.850 --> 01:05:32.530
<v Speaker 0>an error here as well. I think we

01:05:32.530 --> 01:05:34.930
<v Speaker 0>got about twenty minutes left. So as the

01:05:34.930 --> 01:05:35.730
<v Speaker 0>webhook,

01:05:36.370 --> 01:05:38.450
<v Speaker 0>I think this is really, really cool.

01:05:39.570 --> 01:05:42.210
<v Speaker 0>Been able to integrate with GitHub for their

01:05:42.210 --> 01:05:44.485
<v Speaker 0>push events for the API or GitLab or

01:05:44.485 --> 01:05:46.645
<v Speaker 0>any other sources or even the Slack API.

01:05:46.645 --> 01:05:48.325
<v Speaker 0>I don't know if they still do that,

01:05:48.325 --> 01:05:49.925
<v Speaker 0>but they're going by Pipedreams are really cool.

01:05:50.645 --> 01:05:53.685
<v Speaker 0>Where Pipedream just gives me this URL that

01:05:53.685 --> 01:05:54.805
<v Speaker 0>I can pass around

01:05:54.965 --> 01:05:57.285
<v Speaker 0>anywhere I want and then get the payslot

01:05:57.000 --> 01:05:59.240
<v Speaker 0>back to here as well. Right. We don't

01:05:59.240 --> 01:06:00.440
<v Speaker 0>we don't need to do anything from this.

01:06:00.440 --> 01:06:02.200
<v Speaker 0>I just think it's a really one of

01:06:02.200 --> 01:06:04.280
<v Speaker 0>the really cool triggers that I like to

01:06:04.280 --> 01:06:06.760
<v Speaker 0>play with as well. Yeah. Yeah. We I

01:06:06.760 --> 01:06:08.840
<v Speaker 1>mean, we use it all the time for

01:06:08.840 --> 01:06:10.280
<v Speaker 1>internal workflows.

01:06:10.360 --> 01:06:12.235
<v Speaker 1>And, you know, like you said, it's like

01:06:12.235 --> 01:06:14.955
<v Speaker 1>we we've tried to build up

01:06:15.195 --> 01:06:17.675
<v Speaker 1>event sources to abstract

01:06:17.995 --> 01:06:20.155
<v Speaker 1>webhook delivery from a lot of apps. So

01:06:20.155 --> 01:06:21.115
<v Speaker 1>for GitHub,

01:06:21.355 --> 01:06:23.755
<v Speaker 1>you know, we're actually creating a webhook subscription

01:06:23.755 --> 01:06:24.795
<v Speaker 1>in your repo

01:06:25.119 --> 01:06:27.280
<v Speaker 1>that points to an endpoint behind the scenes

01:06:27.280 --> 01:06:28.400
<v Speaker 1>so that you don't have to set up

01:06:28.400 --> 01:06:30.240
<v Speaker 1>any of this. But, of course, we don't

01:06:30.240 --> 01:06:32.000
<v Speaker 1>have full coverage of event sources for every

01:06:32.000 --> 01:06:34.400
<v Speaker 1>app. So anytime you have

01:06:34.640 --> 01:06:37.280
<v Speaker 1>a custom app that supports webhooks,

01:06:37.280 --> 01:06:38.560
<v Speaker 1>like you said, you can go in here.

01:06:38.925 --> 01:06:40.925
<v Speaker 1>This endpoint's unique to your workflow. You just

01:06:40.925 --> 01:06:42.285
<v Speaker 1>copy it and paste it in the webhook

01:06:42.285 --> 01:06:43.005
<v Speaker 1>settings,

01:06:43.165 --> 01:06:44.605
<v Speaker 1>and you're getting events here.

01:06:45.485 --> 01:06:48.285
<v Speaker 1>And this is more you know, we we

01:06:48.285 --> 01:06:50.365
<v Speaker 1>didn't look at the event data much before

01:06:50.365 --> 01:06:52.525
<v Speaker 1>for cron because it wasn't that interesting. But

01:06:52.525 --> 01:06:54.525
<v Speaker 1>this test event, you can see how

01:06:55.539 --> 01:06:57.460
<v Speaker 1>there's a couple things here I'll mention. When

01:06:57.460 --> 01:07:00.660
<v Speaker 1>we receive, for example, JSON data in the

01:07:00.660 --> 01:07:01.780
<v Speaker 1>incoming payload,

01:07:01.859 --> 01:07:03.940
<v Speaker 1>we parse it as a JavaScript object,

01:07:03.940 --> 01:07:05.460
<v Speaker 1>and that's what you see in body.

01:07:06.020 --> 01:07:08.819
<v Speaker 1>So, you know, we do and multipart form

01:07:08.819 --> 01:07:09.460
<v Speaker 1>data,

01:07:09.619 --> 01:07:11.825
<v Speaker 1>other data, we think pretty hard about, like,

01:07:11.825 --> 01:07:13.664
<v Speaker 1>what are the most common formats and how

01:07:13.664 --> 01:07:15.744
<v Speaker 1>do you wanna consume those within a workflow.

01:07:15.984 --> 01:07:18.865
<v Speaker 1>A JavaScript object is often the easiest mechanism.

01:07:18.944 --> 01:07:21.025
<v Speaker 1>So, again, you send JSON,

01:07:21.265 --> 01:07:23.345
<v Speaker 1>you get it as an object in steps

01:07:23.345 --> 01:07:24.865
<v Speaker 1>dot triggered on event dot body.

01:07:25.830 --> 01:07:28.070
<v Speaker 1>And then you can inspect it just like

01:07:28.070 --> 01:07:30.870
<v Speaker 1>you you have before. So, yeah, the HTTP

01:07:30.870 --> 01:07:32.230
<v Speaker 1>trigger is pretty cool. We've got an email

01:07:32.230 --> 01:07:33.270
<v Speaker 1>trigger as well.

01:07:34.310 --> 01:07:36.470
<v Speaker 1>If you quit out of this and then

01:07:36.470 --> 01:07:37.270
<v Speaker 1>select

01:07:37.430 --> 01:07:38.710
<v Speaker 1>the email trigger,

01:07:42.215 --> 01:07:42.935
<v Speaker 1>Also,

01:07:43.095 --> 01:07:45.095
<v Speaker 1>unique email address

01:07:45.335 --> 01:07:46.855
<v Speaker 1>specific to your workflow.

01:07:47.175 --> 01:07:49.015
<v Speaker 1>So you can send any emails here with

01:07:49.015 --> 01:07:49.975
<v Speaker 1>attachments,

01:07:50.615 --> 01:07:51.175
<v Speaker 1>and

01:07:51.735 --> 01:07:54.455
<v Speaker 1>those will actually get

01:07:53.369 --> 01:07:56.329
<v Speaker 1>get rendered in the event inspector so you

01:07:56.329 --> 01:07:58.890
<v Speaker 1>can parse an email data or handle attachments

01:07:58.890 --> 01:07:59.849
<v Speaker 1>in that way.

01:08:01.130 --> 01:08:02.650
<v Speaker 0>Oh, cool. I actually didn't know about that

01:08:02.650 --> 01:08:04.250
<v Speaker 0>one. That one's quite handy, actually. I can

01:08:04.250 --> 01:08:05.609
<v Speaker 0>think of a few things I'd like to

01:08:05.895 --> 01:08:07.335
<v Speaker 0>get out of my inbox and then to

01:08:07.335 --> 01:08:09.175
<v Speaker 0>some sort of automations. Yeah.

01:08:09.655 --> 01:08:11.495
<v Speaker 1>I'm a big I before

01:08:12.215 --> 01:08:13.975
<v Speaker 1>well, in in between BrightRoll, you know, I

01:08:13.975 --> 01:08:15.175
<v Speaker 1>worked with this team for a long time

01:08:15.175 --> 01:08:17.495
<v Speaker 1>at BrightRoll. In between BrightRoll and Pipedream, I

01:08:17.495 --> 01:08:20.149
<v Speaker 1>founded a company called Mail Coach where we

01:08:20.149 --> 01:08:21.750
<v Speaker 1>did a lot with programmatic

01:08:23.189 --> 01:08:25.350
<v Speaker 1>filter creation in Gmail.

01:08:25.430 --> 01:08:27.350
<v Speaker 1>So trying to really help cut down on

01:08:27.350 --> 01:08:29.830
<v Speaker 1>email volume for people. I wish I had

01:08:29.830 --> 01:08:31.990
<v Speaker 1>Pipedream at that point because there's a lot

01:08:31.990 --> 01:08:34.070
<v Speaker 1>of automations that I I wish I could

01:08:34.070 --> 01:08:34.470
<v Speaker 1>have done,

01:08:35.475 --> 01:08:38.195
<v Speaker 1>you know, where you have a user who's

01:08:38.195 --> 01:08:40.195
<v Speaker 1>trying to, you know, process some email. We're

01:08:40.195 --> 01:08:41.795
<v Speaker 1>trying to create a filter off of it.

01:08:41.795 --> 01:08:43.715
<v Speaker 1>There's just so many automations with email that

01:08:43.715 --> 01:08:45.314
<v Speaker 1>I think you can do that are interesting.

01:08:46.195 --> 01:08:48.835
<v Speaker 1>And, yeah, programmatic filter creation with Gmail is

01:08:48.835 --> 01:08:50.195
<v Speaker 1>a big one on my mind because I

01:08:50.195 --> 01:08:52.010
<v Speaker 1>try to get as much email out of

01:08:52.010 --> 01:08:53.449
<v Speaker 1>my inbox as possible too.

01:08:55.370 --> 01:08:57.770
<v Speaker 0>And what about the the SDK? Do wanna

01:08:57.770 --> 01:08:59.689
<v Speaker 0>give us a little bit of information on

01:08:59.689 --> 01:09:03.130
<v Speaker 0>this? Yeah. The the SDK is you can

01:09:03.130 --> 01:09:05.914
<v Speaker 1>see example notes snippets and Ruby snippets. So

01:09:05.914 --> 01:09:07.034
<v Speaker 1>we we publish

01:09:07.434 --> 01:09:11.274
<v Speaker 1>yeah. Actually, sorry, three clients. There's the JavaScript

01:09:11.274 --> 01:09:12.154
<v Speaker 1>browser

01:09:12.314 --> 01:09:14.394
<v Speaker 1>version that you can load on a on

01:09:14.394 --> 01:09:16.074
<v Speaker 1>a front end app. There's the node version,

01:09:16.074 --> 01:09:18.474
<v Speaker 1>and then there's the Ruby SDK. And so

01:09:18.680 --> 01:09:20.600
<v Speaker 1>if you're sending events

01:09:20.760 --> 01:09:21.640
<v Speaker 1>from,

01:09:21.960 --> 01:09:23.080
<v Speaker 1>you know, whatever

01:09:23.160 --> 01:09:26.600
<v Speaker 1>client browser or server side service you want,

01:09:27.320 --> 01:09:28.359
<v Speaker 1>you can

01:09:28.520 --> 01:09:30.760
<v Speaker 1>trigger an event in this way. Right? So

01:09:30.760 --> 01:09:32.120
<v Speaker 1>the relevant code is the very bottom.

01:09:32.604 --> 01:09:33.724
<v Speaker 1>Once you've,

01:09:34.444 --> 01:09:36.045
<v Speaker 1>you know, got the PD SDK, you can

01:09:36.045 --> 01:09:37.484
<v Speaker 1>just send event to

01:09:37.804 --> 01:09:41.005
<v Speaker 1>that endpoint ID with whatever shape you want.

01:09:41.165 --> 01:09:43.644
<v Speaker 1>Now this shape is, pretty custom.

01:09:44.045 --> 01:09:44.764
<v Speaker 1>And so,

01:09:45.085 --> 01:09:45.724
<v Speaker 1>essentially,

01:09:46.280 --> 01:09:48.600
<v Speaker 1>you know, before with HTTP and email, we

01:09:48.600 --> 01:09:49.160
<v Speaker 1>saw

01:09:50.120 --> 01:09:52.360
<v Speaker 1>steps dot trigger dot event dot body, for

01:09:52.360 --> 01:09:53.880
<v Speaker 1>example, because the body

01:09:54.520 --> 01:09:57.000
<v Speaker 1>is you know, represents the payload in the

01:09:57.000 --> 01:09:58.120
<v Speaker 1>HTTP context.

01:09:58.485 --> 01:09:59.684
<v Speaker 1>With the SDK,

01:09:59.685 --> 01:10:01.284
<v Speaker 1>you can fully control the shape of the

01:10:01.284 --> 01:10:02.965
<v Speaker 1>event that you wanna come in, and it

01:10:02.965 --> 01:10:04.804
<v Speaker 1>helps to simplify things. And, again, if you're

01:10:04.804 --> 01:10:06.725
<v Speaker 1>sending data server side from an app you

01:10:06.725 --> 01:10:08.965
<v Speaker 1>own and then you wanna trigger a Pipedream

01:10:08.965 --> 01:10:11.364
<v Speaker 1>workflow off of that, the SDK is often

01:10:11.364 --> 01:10:12.804
<v Speaker 1>a a pretty easy option

01:10:13.429 --> 01:10:14.949
<v Speaker 1>because you get a lot more control over

01:10:14.949 --> 01:10:16.309
<v Speaker 1>that incoming event shape.

01:10:17.510 --> 01:10:19.110
<v Speaker 0>Have you ever had anyone tried to build

01:10:19.110 --> 01:10:21.269
<v Speaker 0>their own Google Analytics using this?

01:10:22.150 --> 01:10:23.349
<v Speaker 1>Not that I know of.

01:10:23.909 --> 01:10:25.670
<v Speaker 1>That's a really good use case, though. I

01:10:25.670 --> 01:10:26.790
<v Speaker 1>mean, I I could you know, we have

01:10:26.790 --> 01:10:29.190
<v Speaker 1>people sending data to Google Analytics

01:10:29.255 --> 01:10:31.655
<v Speaker 1>and Amplitude and and other services.

01:10:32.375 --> 01:10:34.295
<v Speaker 1>But I mean, I I could envision just

01:10:34.295 --> 01:10:36.375
<v Speaker 1>a lot you could do here with that.

01:10:36.375 --> 01:10:37.415
<v Speaker 0>I've

01:10:37.415 --> 01:10:39.495
<v Speaker 0>been trying to remove well, I have removed

01:10:39.495 --> 01:10:41.655
<v Speaker 0>Google Analytics from my from my own website.

01:10:41.655 --> 01:10:42.935
<v Speaker 0>I'm trying to use things that are a

01:10:42.935 --> 01:10:45.550
<v Speaker 0>bit more privacy focused and Mhmm. Doing something

01:10:45.550 --> 01:10:47.790
<v Speaker 0>like this is actually probably a pretty good

01:10:47.790 --> 01:10:50.430
<v Speaker 0>step towards getting better at that. Totally. Totally.

01:10:51.470 --> 01:10:52.990
<v Speaker 0>Alright. Let's see what else did we not

01:10:52.990 --> 01:10:55.230
<v Speaker 0>cover. Yeah. We can do it right People

01:10:55.230 --> 01:10:56.990
<v Speaker 1>will probably take just five minutes to cover

01:10:56.990 --> 01:10:58.270
<v Speaker 1>if you if you wanna do that. I

01:10:58.270 --> 01:10:59.150
<v Speaker 1>can show you how that works.

01:10:59.815 --> 01:11:00.695
<v Speaker 1>So Yeah.

01:11:01.015 --> 01:11:03.495
<v Speaker 1>This is actually good because since you don't

01:11:03.495 --> 01:11:05.415
<v Speaker 1>have any tables, you see the default experience

01:11:05.415 --> 01:11:06.534
<v Speaker 1>here. We

01:11:07.095 --> 01:11:09.255
<v Speaker 1>walk you through just a basic tutorial, but

01:11:09.255 --> 01:11:11.175
<v Speaker 1>I'll I'll walk everyone through this now.

01:11:12.130 --> 01:11:13.650
<v Speaker 1>The SQL service

01:11:14.130 --> 01:11:14.849
<v Speaker 1>is

01:11:14.930 --> 01:11:15.809
<v Speaker 1>essentially

01:11:16.130 --> 01:11:18.210
<v Speaker 1>like, we we thought a lot about

01:11:18.530 --> 01:11:20.930
<v Speaker 1>what is the use case for me wanting

01:11:20.930 --> 01:11:23.170
<v Speaker 1>to query analytics data that I get in

01:11:23.170 --> 01:11:25.010
<v Speaker 1>a workflow. Like, it's very common that I

01:11:25.010 --> 01:11:27.385
<v Speaker 1>receive data from a webhook from,

01:11:27.545 --> 01:11:28.905
<v Speaker 1>for example, Stripe

01:11:28.905 --> 01:11:30.185
<v Speaker 1>or SendGrid.

01:11:30.425 --> 01:11:32.425
<v Speaker 1>And I wanna run some basic analytics on

01:11:32.425 --> 01:11:34.585
<v Speaker 1>that to look at how many unsubscribes

01:11:35.065 --> 01:11:37.145
<v Speaker 1>or clicks we got for a given SendGrid

01:11:37.145 --> 01:11:38.025
<v Speaker 1>campaign, for example.

01:11:39.170 --> 01:11:41.250
<v Speaker 1>As a data scientist, like, I don't wanna

01:11:41.250 --> 01:11:43.890
<v Speaker 1>do all the work to manage my data

01:11:43.890 --> 01:11:46.690
<v Speaker 1>warehouse for all these workflows that are often

01:11:46.690 --> 01:11:49.090
<v Speaker 1>just one offs. Like, if it's not core

01:11:49.090 --> 01:11:52.050
<v Speaker 1>data and I just wanna really quickly run

01:11:52.050 --> 01:11:52.770
<v Speaker 1>some SQL

01:11:53.195 --> 01:11:55.835
<v Speaker 1>on incoming data from a webhook or some

01:11:55.835 --> 01:11:58.955
<v Speaker 1>source. The SQL service is kind of our

01:11:58.955 --> 01:12:01.595
<v Speaker 1>intent at, like, getting to the simplest possible

01:12:01.595 --> 01:12:04.075
<v Speaker 1>way to do that. So the idea is

01:12:04.075 --> 01:12:05.675
<v Speaker 1>you just send JSON

01:12:06.090 --> 01:12:07.210
<v Speaker 1>to a table.

01:12:07.610 --> 01:12:09.449
<v Speaker 1>We actually create

01:12:09.690 --> 01:12:12.330
<v Speaker 1>the table schema behind the scenes and manage

01:12:12.330 --> 01:12:14.490
<v Speaker 1>that for you. So every user essentially has

01:12:14.490 --> 01:12:15.690
<v Speaker 1>their own database,

01:12:16.090 --> 01:12:17.610
<v Speaker 1>and you can create any number of tables

01:12:17.610 --> 01:12:19.690
<v Speaker 1>in the SQL service simply just by sending

01:12:19.690 --> 01:12:22.165
<v Speaker 1>JSON data to a table with a specific

01:12:22.165 --> 01:12:22.645
<v Speaker 1>name.

01:12:23.205 --> 01:12:25.445
<v Speaker 1>We create the table with that schema.

01:12:25.605 --> 01:12:27.365
<v Speaker 1>If you send new data with a new

01:12:27.365 --> 01:12:29.365
<v Speaker 1>schema to that same table, we adjust the

01:12:29.365 --> 01:12:30.645
<v Speaker 1>schema over time.

01:12:30.885 --> 01:12:33.925
<v Speaker 1>So it's essentially a dynamic schema managed for

01:12:33.925 --> 01:12:35.989
<v Speaker 1>each of your tables, And, again, it's all

01:12:35.989 --> 01:12:36.710
<v Speaker 1>hosted.

01:12:37.190 --> 01:12:38.389
<v Speaker 1>It's free to use,

01:12:38.949 --> 01:12:41.190
<v Speaker 1>and we the only restriction is that we

01:12:41.190 --> 01:12:43.909
<v Speaker 1>expire all the data after thirty days automatically.

01:12:44.390 --> 01:12:47.350
<v Speaker 1>But, for for common use cases where, again,

01:12:47.350 --> 01:12:49.110
<v Speaker 1>I just need to get some insight. Like,

01:12:49.110 --> 01:12:50.550
<v Speaker 1>that I'm a data guy. Right? So I

01:12:50.550 --> 01:12:52.765
<v Speaker 1>think of, how can I ask all these

01:12:52.765 --> 01:12:55.325
<v Speaker 1>interesting questions of my data? I immediately go

01:12:55.325 --> 01:12:57.485
<v Speaker 1>to SQL, but I just don't wanna manage

01:12:57.485 --> 01:12:59.325
<v Speaker 1>the database and the schema for all this

01:12:59.325 --> 01:13:01.085
<v Speaker 1>data, especially JSON

01:13:01.325 --> 01:13:04.364
<v Speaker 1>where the schema can change so much constantly.

01:13:04.365 --> 01:13:04.525
<v Speaker 1>Right?

01:13:05.250 --> 01:13:07.010
<v Speaker 1>So that's the principle.

01:13:07.330 --> 01:13:09.730
<v Speaker 1>Let's see how it works.

01:13:10.290 --> 01:13:12.770
<v Speaker 1>If you go to a new workflow

01:13:14.850 --> 01:13:16.530
<v Speaker 1>does that all make sense, by the way?

01:13:16.610 --> 01:13:18.835
<v Speaker 0>Yeah. Yeah. It does. Cool. Yeah. Cool. I'll

01:13:18.835 --> 01:13:20.594
<v Speaker 0>I'll say yes. I'll I'll work at it

01:13:20.594 --> 01:13:22.434
<v Speaker 0>as we go here. You

01:13:23.474 --> 01:13:26.195
<v Speaker 1>can select any trigger you want and then

01:13:26.195 --> 01:13:28.755
<v Speaker 1>add a new Node. Js code step.

01:13:33.159 --> 01:13:35.960
<v Speaker 1>So this is where the dollar send function

01:13:35.960 --> 01:13:37.639
<v Speaker 1>comes in. We we do actually have an

01:13:37.639 --> 01:13:39.159
<v Speaker 1>action for this as well, but I'll show

01:13:39.159 --> 01:13:41.080
<v Speaker 1>you the the code because it's a little

01:13:41.080 --> 01:13:43.159
<v Speaker 1>bit easier. Dollar send dot SQL.

01:13:44.925 --> 01:13:46.285
<v Speaker 1>And that accepts

01:13:46.285 --> 01:13:49.245
<v Speaker 1>a JavaScript object as an argument. So

01:13:49.885 --> 01:13:51.245
<v Speaker 1>with two properties,

01:13:51.885 --> 01:13:52.765
<v Speaker 1>table.

01:13:54.365 --> 01:13:55.885
<v Speaker 1>You can enter whatever name you want here.

01:13:59.240 --> 01:14:00.040
<v Speaker 0>K. Sure.

01:14:01.000 --> 01:14:02.680
<v Speaker 1>And then payload.

01:14:03.240 --> 01:14:06.680
<v Speaker 1>And payload itself accepts a JavaScript object, and

01:14:06.680 --> 01:14:08.440
<v Speaker 1>so put in whatever fields you want here.

01:14:14.275 --> 01:14:14.914
<v Speaker 0>Awesome.

01:14:16.594 --> 01:14:18.034
<v Speaker 0>But people will believe me if I have

01:14:18.034 --> 01:14:18.755
<v Speaker 0>anyone.

01:14:19.795 --> 01:14:20.834
<v Speaker 1>Yeah. Yeah.

01:14:21.395 --> 01:14:23.395
<v Speaker 1>Go ahead and deploy that

01:14:26.989 --> 01:14:28.670
<v Speaker 1>and run a test event.

01:14:31.230 --> 01:14:32.270
<v Speaker 1>And so

01:14:32.350 --> 01:14:36.110
<v Speaker 1>we with destinations like this, we we actually

01:14:36.110 --> 01:14:36.989
<v Speaker 1>batch

01:14:37.310 --> 01:14:39.550
<v Speaker 1>all the incoming events

01:14:39.255 --> 01:14:41.255
<v Speaker 1>that you would send within a sixty second

01:14:41.255 --> 01:14:41.895
<v Speaker 1>period

01:14:42.615 --> 01:14:44.295
<v Speaker 1>and then send those to the SQL service

01:14:44.295 --> 01:14:46.135
<v Speaker 1>for processing. So it does take just a

01:14:46.135 --> 01:14:47.655
<v Speaker 1>little bit of time the first time you

01:14:47.655 --> 01:14:48.535
<v Speaker 1>create a table.

01:14:49.175 --> 01:14:50.695
<v Speaker 1>But the idea is, you know, you have

01:14:50.695 --> 01:14:52.535
<v Speaker 1>thousands of events coming at the same time.

01:14:52.920 --> 01:14:55.239
<v Speaker 1>We're dispatching all those and delivering those once

01:14:55.239 --> 01:14:56.920
<v Speaker 1>a minute to the SQL service.

01:14:57.800 --> 01:15:01.400
<v Speaker 1>But if you go back to the SQL

01:15:01.400 --> 01:15:02.119
<v Speaker 1>tab,

01:15:02.840 --> 01:15:03.719
<v Speaker 1>we can

01:15:04.840 --> 01:15:07.480
<v Speaker 1>just, again, wait a second and refresh this.

01:15:08.045 --> 01:15:10.045
<v Speaker 1>But pretty soon, the table's gonna show up

01:15:10.045 --> 01:15:11.005
<v Speaker 1>on the left,

01:15:12.285 --> 01:15:13.804
<v Speaker 1>and then we can

01:15:14.045 --> 01:15:15.725
<v Speaker 1>start querying. If you go back to your

01:15:15.725 --> 01:15:17.645
<v Speaker 1>workflow, you can also check on the status

01:15:17.645 --> 01:15:18.765
<v Speaker 1>of the execution.

01:15:19.085 --> 01:15:21.645
<v Speaker 1>So we do when we deliver the event,

01:15:21.645 --> 01:15:23.085
<v Speaker 1>if you click on that event on the

01:15:23.085 --> 01:15:23.405
<v Speaker 1>left

01:15:24.390 --> 01:15:26.230
<v Speaker 1>and you check oh, there we go. So

01:15:26.230 --> 01:15:27.429
<v Speaker 1>we should be good now.

01:15:28.390 --> 01:15:29.030
<v Speaker 1>Oh,

01:15:29.510 --> 01:15:32.230
<v Speaker 1>it it takes just a little longer, so

01:15:32.230 --> 01:15:33.989
<v Speaker 1>there's a lot going on behind the scenes.

01:15:34.790 --> 01:15:37.270
<v Speaker 1>So let's fingers crossed. We've we've had luck

01:15:37.270 --> 01:15:38.230
<v Speaker 1>in this demo so far.

01:15:39.555 --> 01:15:42.355
<v Speaker 0>What database is actually running behind the scenes?

01:15:42.355 --> 01:15:45.635
<v Speaker 1>Yeah. We we use Amazon Athena.

01:15:46.035 --> 01:15:48.275
<v Speaker 1>And so all the data's in s three,

01:15:49.235 --> 01:15:51.155
<v Speaker 1>and then we create

01:15:51.715 --> 01:15:54.500
<v Speaker 1>we use Athena as the query engine. AWS

01:15:54.500 --> 01:15:55.460
<v Speaker 1>Glue

01:15:55.540 --> 01:15:57.139
<v Speaker 1>manages the schema.

01:15:57.540 --> 01:15:59.620
<v Speaker 1>So Athena can inherit Glue. I didn't know

01:15:59.620 --> 01:16:01.060
<v Speaker 1>anything about Glue before I used it for

01:16:01.060 --> 01:16:01.860
<v Speaker 1>this. But,

01:16:02.580 --> 01:16:04.980
<v Speaker 1>essentially, Glue manages your schema. So you see

01:16:04.980 --> 01:16:07.155
<v Speaker 1>the schema there, name and age. And if

01:16:07.155 --> 01:16:09.395
<v Speaker 1>you just select star from Rawkode,

01:16:09.395 --> 01:16:11.235
<v Speaker 1>you should get your data.

01:16:17.474 --> 01:16:18.034
<v Speaker 1>There you go.

01:16:19.320 --> 01:16:21.960
<v Speaker 1>So, yeah, you can, you know, Athena's pretty

01:16:21.960 --> 01:16:23.479
<v Speaker 1>powerful as a query engine.

01:16:24.040 --> 01:16:25.159
<v Speaker 1>You know, supports

01:16:25.400 --> 01:16:28.040
<v Speaker 1>window functions, all the kind of advanced capabilities

01:16:28.040 --> 01:16:30.679
<v Speaker 1>you'd expect out of a a legitimate database.

01:16:30.679 --> 01:16:31.400
<v Speaker 1>And so,

01:16:31.800 --> 01:16:33.800
<v Speaker 1>again, if you have any questions you wanna

01:16:33.800 --> 01:16:35.845
<v Speaker 1>ask, you know, really quickly of your data

01:16:35.845 --> 01:16:37.685
<v Speaker 1>and you don't wanna manage data warehouse, this

01:16:37.685 --> 01:16:38.565
<v Speaker 1>is a good option.

01:16:38.805 --> 01:16:39.844
<v Speaker 0>Yeah. Definitely.

01:16:40.965 --> 01:16:42.565
<v Speaker 0>Alright. Thank you for that. That's just that

01:16:42.565 --> 01:16:44.405
<v Speaker 0>is the first time I played with

01:16:45.285 --> 01:16:46.725
<v Speaker 0>SQL SQL

01:16:47.285 --> 01:16:48.645
<v Speaker 0>stuff. So that was cool to see.

01:16:49.639 --> 01:16:50.439
<v Speaker 0>Awesome.

01:16:51.400 --> 01:16:52.280
<v Speaker 0>I guess,

01:16:53.400 --> 01:16:55.000
<v Speaker 0>yeah, we kinda covered quite a lot there.

01:16:55.000 --> 01:16:56.520
<v Speaker 0>So why don't we do you wanna run

01:16:56.520 --> 01:16:57.959
<v Speaker 0>through some of your

01:16:58.440 --> 01:17:00.760
<v Speaker 0>your own use cases then? Sure. Yeah. I'll

01:17:00.760 --> 01:17:02.280
<v Speaker 1>I'll briefly you know, I had a couple

01:17:02.280 --> 01:17:04.275
<v Speaker 1>more slides to show some example work I'll

01:17:04.275 --> 01:17:05.955
<v Speaker 1>share my screen again, and I'll show you

01:17:05.955 --> 01:17:08.355
<v Speaker 1>a couple that we run internally that are

01:17:08.355 --> 01:17:09.474
<v Speaker 1>a little more advanced.

01:17:09.955 --> 01:17:12.755
<v Speaker 1>And these are all linked

01:17:13.715 --> 01:17:14.434
<v Speaker 1>from

01:17:14.995 --> 01:17:16.114
<v Speaker 1>from here.

01:17:16.435 --> 01:17:17.955
<v Speaker 1>So later on, if you wanna take a

01:17:17.955 --> 01:17:18.755
<v Speaker 1>look, they're all public.

01:17:19.390 --> 01:17:20.750
<v Speaker 1>I'll start off with a a little more

01:17:20.750 --> 01:17:22.030
<v Speaker 1>advanced one. I won't go over all of

01:17:22.030 --> 01:17:23.790
<v Speaker 1>this code, but I'll talk about the use

01:17:23.790 --> 01:17:24.349
<v Speaker 1>case.

01:17:25.630 --> 01:17:27.550
<v Speaker 1>So we run Kubernetes

01:17:27.950 --> 01:17:28.989
<v Speaker 1>internally,

01:17:29.310 --> 01:17:31.230
<v Speaker 1>and we have a for those of you

01:17:31.230 --> 01:17:32.805
<v Speaker 1>who are familiar with Kubernetes,

01:17:33.045 --> 01:17:35.445
<v Speaker 1>we have a public node group.

01:17:35.845 --> 01:17:37.285
<v Speaker 1>So Kubernetes,

01:17:37.525 --> 01:17:38.965
<v Speaker 1>you know, lets us manage a ton of

01:17:38.965 --> 01:17:41.125
<v Speaker 1>different services really easily. You love it.

01:17:41.445 --> 01:17:43.925
<v Speaker 1>We have this public node group that's responsible

01:17:43.925 --> 01:17:48.100
<v Speaker 1>for some public facing services, including destination delivery,

01:17:48.100 --> 01:17:49.860
<v Speaker 1>actually. It's a dollarsend. SQL.

01:17:50.340 --> 01:17:50.980
<v Speaker 1>And,

01:17:51.460 --> 01:17:53.780
<v Speaker 1>essentially, we have this problem where

01:17:54.260 --> 01:17:56.500
<v Speaker 1>I'll I'll briefly just show you since we

01:17:56.500 --> 01:17:57.300
<v Speaker 1>have a little bit of time.

01:17:58.165 --> 01:18:00.804
<v Speaker 1>Other destination. So all the destinations, all the

01:18:00.804 --> 01:18:02.725
<v Speaker 1>dollar send primitives

01:18:02.725 --> 01:18:05.844
<v Speaker 1>I showed off, dollarsend.email,

01:18:05.844 --> 01:18:07.364
<v Speaker 1>dollar send SQL.

01:18:07.764 --> 01:18:09.764
<v Speaker 1>There's one more dollarsend.http

01:18:09.764 --> 01:18:10.565
<v Speaker 1>that's

01:18:10.565 --> 01:18:11.764
<v Speaker 1>probably the most commonly used.

01:18:12.680 --> 01:18:14.600
<v Speaker 1>This allows you to send an HTTP request

01:18:14.600 --> 01:18:15.640
<v Speaker 1>from a workflow.

01:18:16.600 --> 01:18:17.960
<v Speaker 1>The key

01:18:18.200 --> 01:18:21.960
<v Speaker 1>benefit of using the HTTP destination

01:18:22.120 --> 01:18:22.840
<v Speaker 1>here

01:18:23.400 --> 01:18:24.760
<v Speaker 1>versus using

01:18:25.080 --> 01:18:27.400
<v Speaker 1>a a client like Axios

01:18:27.605 --> 01:18:30.324
<v Speaker 1>or, Gott that you might typically be familiar

01:18:30.324 --> 01:18:31.764
<v Speaker 1>with in JavaScript.

01:18:32.005 --> 01:18:34.965
<v Speaker 1>The benefit of using this over those is

01:18:35.045 --> 01:18:38.485
<v Speaker 1>these HTTP requests are actually handled asynchronously.

01:18:38.965 --> 01:18:41.364
<v Speaker 1>And so when you run dollarsend dot HTTP,

01:18:42.120 --> 01:18:44.120
<v Speaker 1>if you have thousands of HTTP requests you

01:18:44.120 --> 01:18:46.040
<v Speaker 1>wanna send, you're actually not charged for the

01:18:46.040 --> 01:18:46.999
<v Speaker 1>compute time

01:18:47.480 --> 01:18:51.079
<v Speaker 1>of waiting for the response from the server,

01:18:51.080 --> 01:18:52.600
<v Speaker 1>you know, which can take maybe two to

01:18:52.600 --> 01:18:55.639
<v Speaker 1>three hundred milliseconds for some services, right, or

01:18:55.639 --> 01:18:56.360
<v Speaker 1>even longer. So

01:18:57.135 --> 01:18:59.054
<v Speaker 1>given that you're capped on compute time in

01:18:59.054 --> 01:19:00.014
<v Speaker 1>the free tier,

01:19:00.414 --> 01:19:00.974
<v Speaker 1>you

01:19:01.295 --> 01:19:04.335
<v Speaker 1>wanna manage that, especially for high volume workflows.

01:19:04.335 --> 01:19:06.014
<v Speaker 1>Dollar send out HTTP

01:19:06.494 --> 01:19:08.894
<v Speaker 1>lets you send, you know, again, any number

01:19:08.894 --> 01:19:11.420
<v Speaker 1>of HTTP requests. We send the HTTP request

01:19:11.420 --> 01:19:12.860
<v Speaker 1>behind the scenes,

01:19:13.179 --> 01:19:14.060
<v Speaker 1>asynchronously

01:19:14.060 --> 01:19:15.739
<v Speaker 1>outside of your workflow.

01:19:16.380 --> 01:19:18.460
<v Speaker 1>So, there's a lot going on there. The

01:19:18.460 --> 01:19:19.580
<v Speaker 1>point is it saves you a ton of

01:19:19.580 --> 01:19:20.940
<v Speaker 1>compute time if you're making a lot of

01:19:20.940 --> 01:19:21.820
<v Speaker 1>HTTP requests.

01:19:22.355 --> 01:19:22.995
<v Speaker 1>Now

01:19:23.155 --> 01:19:24.755
<v Speaker 1>one of the first questions we got was,

01:19:24.755 --> 01:19:27.955
<v Speaker 1>well, I need to white list Pipedream's IPs

01:19:28.355 --> 01:19:30.515
<v Speaker 1>so I can send data to services that

01:19:30.515 --> 01:19:33.235
<v Speaker 1>I own or services that require an IP

01:19:33.235 --> 01:19:33.795
<v Speaker 1>white list.

01:19:34.370 --> 01:19:36.530
<v Speaker 1>These are our list of IPs. Now

01:19:37.010 --> 01:19:39.810
<v Speaker 1>when we add we're constantly adding

01:19:39.970 --> 01:19:42.770
<v Speaker 1>new nodes that handle this traffic

01:19:43.410 --> 01:19:45.890
<v Speaker 1>in our Kubernetes cluster. So one of the

01:19:45.890 --> 01:19:48.165
<v Speaker 1>issues we ran across was we have this

01:19:48.165 --> 01:19:49.845
<v Speaker 1>static list of IPs that we don't wanna

01:19:49.845 --> 01:19:50.485
<v Speaker 1>change.

01:19:50.965 --> 01:19:52.805
<v Speaker 1>We need to keep those that list, you

01:19:52.805 --> 01:19:54.725
<v Speaker 1>know, again, fairly static for users,

01:19:55.045 --> 01:19:56.805
<v Speaker 1>but we get new nodes. How do we

01:19:56.805 --> 01:19:57.605
<v Speaker 1>assign

01:19:58.085 --> 01:20:00.565
<v Speaker 1>static IPs to those nodes automatically?

01:20:00.565 --> 01:20:02.565
<v Speaker 1>Well, we have a Pipedream workflow handle this.

01:20:03.100 --> 01:20:05.179
<v Speaker 1>When a new node comes online

01:20:05.420 --> 01:20:07.260
<v Speaker 1>in our public node group,

01:20:07.660 --> 01:20:09.420
<v Speaker 1>we get an event from AWS

01:20:09.580 --> 01:20:11.739
<v Speaker 1>that comes into you can't see it because

01:20:11.739 --> 01:20:13.260
<v Speaker 1>this is the public version, but in my

01:20:13.260 --> 01:20:14.380
<v Speaker 1>copy of the workflow,

01:20:14.699 --> 01:20:17.180
<v Speaker 1>I have the HTTP endpoint that David showed

01:20:17.180 --> 01:20:20.175
<v Speaker 1>off a few minutes ago. So AWS events

01:20:20.255 --> 01:20:22.094
<v Speaker 1>trigger this workflow.

01:20:22.495 --> 01:20:23.935
<v Speaker 1>And then, again, I won't go over this

01:20:23.935 --> 01:20:26.255
<v Speaker 1>code, but there's a lot of stuff here

01:20:26.255 --> 01:20:26.815
<v Speaker 1>that,

01:20:27.055 --> 01:20:29.614
<v Speaker 1>we've done to basically handle that event,

01:20:29.935 --> 01:20:31.295
<v Speaker 1>get the node group, and then use the

01:20:31.295 --> 01:20:32.335
<v Speaker 1>AWS API

01:20:32.860 --> 01:20:33.980
<v Speaker 1>to assign

01:20:34.060 --> 01:20:35.180
<v Speaker 1>one of

01:20:35.580 --> 01:20:37.260
<v Speaker 1>our pool of IPs

01:20:37.260 --> 01:20:38.620
<v Speaker 1>to that new node.

01:20:39.100 --> 01:20:42.060
<v Speaker 1>So pretty narrow problem, but, you know, we

01:20:42.060 --> 01:20:42.780
<v Speaker 1>realized,

01:20:42.940 --> 01:20:45.900
<v Speaker 1>okay. I just wanna listen for new nodes,

01:20:46.385 --> 01:20:48.945
<v Speaker 1>and I wanna assign an IP address to

01:20:48.945 --> 01:20:50.465
<v Speaker 1>that node when it comes online.

01:20:50.545 --> 01:20:52.625
<v Speaker 1>So a Pipedream workflow was perfect because it's

01:20:52.625 --> 01:20:55.345
<v Speaker 1>just an event driven asynchronous workflow.

01:20:55.745 --> 01:20:57.185
<v Speaker 1>So you can take a look at that

01:20:57.185 --> 01:20:59.345
<v Speaker 1>a little more. But I just wanted to

01:20:59.345 --> 01:21:00.705
<v Speaker 1>kinda show you that, you know, we use

01:21:00.705 --> 01:21:01.825
<v Speaker 1>Pipedream a lot internally

01:21:02.280 --> 01:21:04.199
<v Speaker 1>for our own workflows for some pretty hefty

01:21:04.199 --> 01:21:05.559
<v Speaker 1>production use cases.

01:21:05.800 --> 01:21:07.320
<v Speaker 1>So I know we've been going over Discord

01:21:07.320 --> 01:21:09.239
<v Speaker 1>and Twitter and, you know, Pipedream is fantastic

01:21:09.239 --> 01:21:11.159
<v Speaker 1>for those use cases, but it it does

01:21:11.239 --> 01:21:13.239
<v Speaker 1>really help glue together a lot of AWS

01:21:13.239 --> 01:21:16.039
<v Speaker 1>services and and other services as well. So

01:21:16.039 --> 01:21:17.480
<v Speaker 1>that's why I like that example.

01:21:19.005 --> 01:21:21.085
<v Speaker 1>Have another DevOps. See, I know your audience,

01:21:21.645 --> 01:21:24.285
<v Speaker 1>you know, loves Kubernetes and ops stuff. So

01:21:24.285 --> 01:21:26.125
<v Speaker 1>I'll show you one more here.

01:21:27.485 --> 01:21:30.285
<v Speaker 1>SSL Mate is this great API. I think

01:21:30.285 --> 01:21:33.645
<v Speaker 1>they operate a specific API, sorry, called cert

01:21:33.180 --> 01:21:34.060
<v Speaker 1>spotter

01:21:34.300 --> 01:21:35.580
<v Speaker 1>that lets you,

01:21:36.380 --> 01:21:39.260
<v Speaker 1>basically find certificates,

01:21:39.660 --> 01:21:42.220
<v Speaker 1>given a bunch of criteria. So domain is

01:21:42.220 --> 01:21:44.780
<v Speaker 1>the main criteria. You can basically list all

01:21:44.780 --> 01:21:46.300
<v Speaker 1>the SSL certs

01:21:46.300 --> 01:21:48.140
<v Speaker 1>that have been published for a domain. We

01:21:48.140 --> 01:21:51.394
<v Speaker 1>wanna make sure that no certs are published

01:21:51.795 --> 01:21:53.715
<v Speaker 1>for any domains we own that we don't

01:21:53.715 --> 01:21:54.434
<v Speaker 1>know about.

01:21:54.994 --> 01:21:57.314
<v Speaker 1>Now that's just a common security thing that

01:21:57.554 --> 01:21:58.195
<v Speaker 1>some,

01:21:58.434 --> 01:22:00.355
<v Speaker 1>that's bitten some companies in the past where

01:22:00.355 --> 01:22:02.914
<v Speaker 1>someone actually creates an SSL cert for a

01:22:02.914 --> 01:22:05.340
<v Speaker 1>domain that they don't own. So we wanna

01:22:05.340 --> 01:22:05.900
<v Speaker 1>get

01:22:06.220 --> 01:22:07.820
<v Speaker 1>new domains

01:22:08.620 --> 01:22:10.699
<v Speaker 1>sent sorry. New certs

01:22:10.700 --> 01:22:13.420
<v Speaker 1>sent to us anytime we get

01:22:13.740 --> 01:22:16.140
<v Speaker 1>a a new cert spotted on the web.

01:22:16.220 --> 01:22:18.380
<v Speaker 1>So you just list your domains here for

01:22:18.380 --> 01:22:19.660
<v Speaker 1>Pipedream.com,

01:22:19.660 --> 01:22:20.140
<v Speaker 1>for example.

01:22:20.725 --> 01:22:23.125
<v Speaker 1>This hits the search spotter API.

01:22:23.844 --> 01:22:26.085
<v Speaker 1>This runs on a cron schedule so that

01:22:26.085 --> 01:22:28.565
<v Speaker 1>every few minutes, it's checking for new certs.

01:22:28.805 --> 01:22:30.324
<v Speaker 1>And then it just

01:22:31.525 --> 01:22:34.405
<v Speaker 1>down here, I use dollar send dot email

01:22:34.405 --> 01:22:36.245
<v Speaker 1>to email me any new certs.

01:22:36.920 --> 01:22:39.479
<v Speaker 1>We haven't talked too much about dollar checkpoint,

01:22:39.800 --> 01:22:41.719
<v Speaker 1>but dollar checkpoint is

01:22:42.600 --> 01:22:44.360
<v Speaker 1>it gives you it's a variable that gives

01:22:44.360 --> 01:22:46.840
<v Speaker 1>you access to the built in key value

01:22:46.840 --> 01:22:48.040
<v Speaker 1>store for workflows.

01:22:48.835 --> 01:22:51.955
<v Speaker 1>So I'll briefly just show you those docs.

01:22:53.395 --> 01:22:54.594
<v Speaker 1>Let me search

01:22:55.395 --> 01:22:56.995
<v Speaker 1>flow state.

01:22:58.435 --> 01:23:00.755
<v Speaker 1>But anytime you need to save data in

01:23:00.755 --> 01:23:02.595
<v Speaker 1>a workflow and retrieve it in a future

01:23:02.595 --> 01:23:03.155
<v Speaker 1>execution,

01:23:04.270 --> 01:23:07.469
<v Speaker 1>Workflow state using the variable dollar checkpoint

01:23:07.550 --> 01:23:09.469
<v Speaker 1>lets you do that. There's also step level

01:23:09.469 --> 01:23:10.110
<v Speaker 1>state.

01:23:10.270 --> 01:23:12.190
<v Speaker 1>So this dot dollar checkpoint allows you to

01:23:12.190 --> 01:23:13.070
<v Speaker 1>save data

01:23:13.230 --> 01:23:15.869
<v Speaker 1>within a specific step and reference that data

01:23:15.869 --> 01:23:16.190
<v Speaker 1>later.

01:23:16.705 --> 01:23:18.385
<v Speaker 1>These docs are extensive and have a lot

01:23:18.385 --> 01:23:20.224
<v Speaker 1>of examples, but briefly,

01:23:21.344 --> 01:23:23.105
<v Speaker 1>you know, we need to keep track of

01:23:23.425 --> 01:23:25.985
<v Speaker 1>any certificates we've seen previously

01:23:25.985 --> 01:23:28.224
<v Speaker 1>in previous executions of the workflow.

01:23:28.465 --> 01:23:30.304
<v Speaker 1>And then I only wanna get notified of

01:23:30.304 --> 01:23:31.265
<v Speaker 1>new certificates.

01:23:32.690 --> 01:23:35.730
<v Speaker 1>So cert spotter lists all the certificates in

01:23:35.730 --> 01:23:37.170
<v Speaker 1>the workflow. I keep track of the ones

01:23:37.170 --> 01:23:38.449
<v Speaker 1>I've seen so far.

01:23:38.929 --> 01:23:41.170
<v Speaker 1>And any new certificates that come in, I

01:23:41.170 --> 01:23:42.530
<v Speaker 1>only email those.

01:23:42.850 --> 01:23:44.770
<v Speaker 1>And I say, new cert found for domains.

01:23:45.085 --> 01:23:45.644
<v Speaker 1>Okay?

01:23:46.204 --> 01:23:48.525
<v Speaker 1>So those are couple, examples. I I linked

01:23:48.525 --> 01:23:50.684
<v Speaker 1>to a lot of other blogs, including some

01:23:50.684 --> 01:23:51.324
<v Speaker 1>from,

01:23:51.724 --> 01:23:55.165
<v Speaker 1>Raymond Camden, who, is a developer advocate at

01:23:55.165 --> 01:23:55.804
<v Speaker 1>here

01:23:56.125 --> 01:23:58.204
<v Speaker 1>and, blogs about us a lot. He uses

01:23:58.204 --> 01:23:59.970
<v Speaker 1>Pipedream for some demos internally. Internally. He's got

01:23:59.970 --> 01:24:01.810
<v Speaker 1>a couple great blog posts here.

01:24:02.610 --> 01:24:05.330
<v Speaker 1>I wrote up a blog post about how

01:24:05.330 --> 01:24:08.610
<v Speaker 1>I used Pipedream to avoid parking tickets

01:24:09.330 --> 01:24:11.970
<v Speaker 1>in San Francisco. That's a pretty fun one

01:24:12.505 --> 01:24:16.025
<v Speaker 1>and utilizes some APIs that the San Francisco

01:24:16.585 --> 01:24:18.905
<v Speaker 1>the city of San Francisco provides on street

01:24:18.905 --> 01:24:19.945
<v Speaker 1>cleaning schedules.

01:24:20.425 --> 01:24:22.665
<v Speaker 1>So there's just a lot of examples here

01:24:22.665 --> 01:24:24.265
<v Speaker 1>that I thought you know, a variety that

01:24:24.265 --> 01:24:25.945
<v Speaker 1>I thought might be helpful for people new

01:24:25.945 --> 01:24:26.505
<v Speaker 1>to Pipedream.

01:24:27.890 --> 01:24:30.130
<v Speaker 1>The, other thing I wanted to mention was,

01:24:30.210 --> 01:24:31.410
<v Speaker 1>you know, all of our code is on

01:24:31.410 --> 01:24:33.890
<v Speaker 1>GitHub. Okay? I'll look at this repo really

01:24:33.890 --> 01:24:34.530
<v Speaker 1>quickly.

01:24:35.730 --> 01:24:38.450
<v Speaker 1>This repo contains all the code for primarily

01:24:38.450 --> 01:24:41.170
<v Speaker 1>our event sources. We're planning to add our

01:24:40.745 --> 01:24:43.385
<v Speaker 1>actions to GitHub soon as well so people

01:24:43.385 --> 01:24:45.545
<v Speaker 1>can submit PRs against those. So all the,

01:24:45.545 --> 01:24:48.665
<v Speaker 1>like, Spotify and Twitter actions David used today,

01:24:49.065 --> 01:24:51.625
<v Speaker 1>those are gonna be in GitHub, hopefully pretty

01:24:51.625 --> 01:24:53.990
<v Speaker 1>soon. Our docs are also here. So a

01:24:53.990 --> 01:24:55.350
<v Speaker 1>lot of good stuff here if you wanna

01:24:55.350 --> 01:24:57.670
<v Speaker 1>consume Pipedream content and kinda see what we're

01:24:57.670 --> 01:24:58.550
<v Speaker 1>open sourcing.

01:24:59.830 --> 01:25:02.390
<v Speaker 1>We also run a a big Slack community.

01:25:02.390 --> 01:25:04.790
<v Speaker 1>So any questions you have, we're more than

01:25:04.790 --> 01:25:05.110
<v Speaker 1>happy

01:25:05.685 --> 01:25:08.645
<v Speaker 1>to answer them. We use GitHub discussions and

01:25:08.645 --> 01:25:11.124
<v Speaker 1>Slack both as our help channels.

01:25:11.925 --> 01:25:14.804
<v Speaker 1>And then just a bunch of docs and

01:25:14.804 --> 01:25:16.885
<v Speaker 1>resources that I thought would be helpful. So

01:25:16.885 --> 01:25:19.045
<v Speaker 1>as you dive into Pipedream, these are all

01:25:19.045 --> 01:25:20.885
<v Speaker 1>good places to start to understand

01:25:21.420 --> 01:25:24.060
<v Speaker 1>more about the concepts we talked about. But

01:25:24.060 --> 01:25:25.900
<v Speaker 1>I'll let you peruse those in your own

01:25:25.900 --> 01:25:26.380
<v Speaker 1>time.

01:25:27.179 --> 01:25:27.900
<v Speaker 0>Yeah.

01:25:27.980 --> 01:25:29.820
<v Speaker 0>I'll make sure there's a link to those

01:25:29.820 --> 01:25:30.539
<v Speaker 0>slides

01:25:30.620 --> 01:25:32.780
<v Speaker 0>and the show notes so people can hopefully

01:25:32.780 --> 01:25:34.620
<v Speaker 0>get a link to that and then trace

01:25:34.620 --> 01:25:35.900
<v Speaker 0>all those additional resources.

01:25:37.325 --> 01:25:38.845
<v Speaker 0>I feel like we we we covered an

01:25:38.845 --> 01:25:40.045
<v Speaker 0>awful lot. I

01:25:40.525 --> 01:25:42.125
<v Speaker 0>hope that people that are watching are you

01:25:42.125 --> 01:25:43.645
<v Speaker 0>know, your interest has peaked and you're signing

01:25:43.645 --> 01:25:45.645
<v Speaker 0>up for a Pipedream account now. The

01:25:46.445 --> 01:25:49.590
<v Speaker 0>free tier is ridiculously generous. I've gotta say,

01:25:49.590 --> 01:25:51.270
<v Speaker 0>like, I don't think anyone's gonna run into

01:25:51.270 --> 01:25:53.510
<v Speaker 0>any issues getting started with Pipedream there.

01:25:54.389 --> 01:25:54.949
<v Speaker 0>So

01:25:55.190 --> 01:25:56.550
<v Speaker 0>there was one thing that popped into my

01:25:56.550 --> 01:25:57.989
<v Speaker 0>head there just as we were wrapping up.

01:25:57.989 --> 01:25:59.830
<v Speaker 0>So I'm curious about you said you were

01:25:59.830 --> 01:26:02.389
<v Speaker 0>gonna make the potentially make the actions available

01:26:02.389 --> 01:26:03.350
<v Speaker 0>on github.com.

01:26:04.125 --> 01:26:05.725
<v Speaker 0>Yes. Would I be able to have my

01:26:05.725 --> 01:26:08.445
<v Speaker 0>own actions repo and pointpipedream.com

01:26:08.445 --> 01:26:11.725
<v Speaker 0>to it eventually? Yeah. We we envision you

01:26:11.725 --> 01:26:12.205
<v Speaker 1>know,

01:26:12.765 --> 01:26:14.605
<v Speaker 1>the the one of the biggest points of

01:26:14.605 --> 01:26:16.685
<v Speaker 1>feedback we heard and actually the top issue

01:26:17.120 --> 01:26:19.680
<v Speaker 1>on our GitHub repo by upvotes is I

01:26:19.680 --> 01:26:21.600
<v Speaker 1>wanna serialize workflows

01:26:21.600 --> 01:26:22.639
<v Speaker 1>as code,

01:26:23.360 --> 01:26:26.160
<v Speaker 1>hack on workflows locally, keep workflow code in

01:26:26.160 --> 01:26:28.560
<v Speaker 1>my own Git repo. Actions would be the

01:26:28.560 --> 01:26:30.239
<v Speaker 1>same. We we envision

01:26:30.455 --> 01:26:32.135
<v Speaker 1>you know, we're not there yet. Right? But

01:26:32.135 --> 01:26:33.895
<v Speaker 1>the vision is that you should be able

01:26:33.895 --> 01:26:35.975
<v Speaker 1>to manage Pipedream workflows like you manage any

01:26:35.975 --> 01:26:36.534
<v Speaker 1>code.

01:26:36.935 --> 01:26:39.494
<v Speaker 1>So both with workflows and

01:26:39.655 --> 01:26:42.135
<v Speaker 1>actions, even private actions you haven't published,

01:26:42.535 --> 01:26:45.255
<v Speaker 1>those ideally would live in your own repos.

01:26:45.610 --> 01:26:48.490
<v Speaker 1>Public actions that we publish, we wanna contribute.

01:26:48.570 --> 01:26:50.010
<v Speaker 1>You know, you could put those in the

01:26:50.010 --> 01:26:52.090
<v Speaker 1>Pipedream GitHub repo just like our public event

01:26:52.090 --> 01:26:53.050
<v Speaker 1>sources are.

01:26:53.370 --> 01:26:54.970
<v Speaker 1>But if you look at the event source

01:26:54.970 --> 01:26:57.050
<v Speaker 1>documentation, that that's kinda where we're headed. So

01:26:57.050 --> 01:26:58.090
<v Speaker 1>event sources,

01:26:58.170 --> 01:26:59.370
<v Speaker 1>those are in GitHub.

01:26:59.770 --> 01:27:02.455
<v Speaker 1>You can keep your own event sources in

01:27:02.455 --> 01:27:05.415
<v Speaker 1>your own repo private, manage those programmatically via

01:27:05.415 --> 01:27:06.855
<v Speaker 1>the CLI and API.

01:27:07.015 --> 01:27:08.615
<v Speaker 1>So all the docs are on event sources.

01:27:08.615 --> 01:27:10.535
<v Speaker 1>That's essentially the same vision we wanna apply

01:27:10.535 --> 01:27:12.135
<v Speaker 1>to workflows and actions.

01:27:12.375 --> 01:27:14.375
<v Speaker 1>Everything can be serialized to code. Everything can

01:27:14.375 --> 01:27:15.015
<v Speaker 1>be kept in Git.

01:27:15.930 --> 01:27:17.690
<v Speaker 0>Nice. Awesome. Yeah.

01:27:18.170 --> 01:27:20.969
<v Speaker 0>Alright. Well, thank you for joining me today.

01:27:21.050 --> 01:27:22.650
<v Speaker 0>That was really insightful.

01:27:23.130 --> 01:27:25.050
<v Speaker 0>I actually learned quite a lot, which was

01:27:25.050 --> 01:27:27.690
<v Speaker 0>really good. And I think we covered I

01:27:27.690 --> 01:27:29.449
<v Speaker 0>can't believe we never had any errors. I'm

01:27:29.449 --> 01:27:31.715
<v Speaker 0>actually surprised at myself for that. But Yeah.

01:27:31.715 --> 01:27:34.035
<v Speaker 1>Good job. I know. That's not how my

01:27:34.035 --> 01:27:36.675
<v Speaker 0>normal Pipedream day to day goes. So I

01:27:36.675 --> 01:27:38.275
<v Speaker 0>make a lot of bugs. But thank you

01:27:38.275 --> 01:27:39.395
<v Speaker 0>again for taking the time out of your

01:27:39.395 --> 01:27:41.875
<v Speaker 0>day, for joining us today, showing us Pipedream,

01:27:41.875 --> 01:27:42.275
<v Speaker 0>and

01:27:42.755 --> 01:27:44.355
<v Speaker 0>have a great day. Thank you again. Thank

01:27:44.355 --> 01:27:45.955
<v Speaker 1>you. Thank you for having me, David. My

01:27:45.955 --> 01:27:46.915
<v Speaker 0>pleasure. Thank you. Bye.
