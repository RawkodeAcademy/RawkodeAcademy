WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: e69b7957-e16f-497c-89fa-c0206278389f
Created: 2025-04-29T17:23:08.702Z
Duration: 4266.2783
Channels: 1

00:01:16.630 --> 00:01:17.430
<v Speaker 0>Hello,

00:01:17.430 --> 00:01:20.470
<v Speaker 0>and welcome to today's episode of Rawkode Live

00:01:20.470 --> 00:01:22.150
<v Speaker 0>at the Rawkode Academy.

00:01:22.150 --> 00:01:24.150
<v Speaker 0>I am your host, Rawkode.

00:01:24.470 --> 00:01:26.470
<v Speaker 0>Thank you for joining us today. Today, we

00:01:26.470 --> 00:01:29.110
<v Speaker 0>are taking a look at jsPolicy,

00:01:29.355 --> 00:01:33.355
<v Speaker 0>faster and easier policies for Kubernetes using TypeScript

00:01:33.355 --> 00:01:34.715
<v Speaker 0>and JavaScript.

00:01:34.795 --> 00:01:37.515
<v Speaker 0>If you like rating everything as code, today

00:01:37.515 --> 00:01:39.115
<v Speaker 0>is a great episode for you.

00:01:39.755 --> 00:01:41.195
<v Speaker 0>Before we begin, there's a little bit of

00:01:41.195 --> 00:01:43.650
<v Speaker 0>housekeeping. Please remember to subscribe to the channel

00:01:43.650 --> 00:01:45.730
<v Speaker 0>and tick the bell to get notifications of

00:01:45.730 --> 00:01:47.570
<v Speaker 0>all new episodes. And I would also really

00:01:47.570 --> 00:01:49.090
<v Speaker 0>appreciate it if you could like the video

00:01:49.090 --> 00:01:51.250
<v Speaker 0>and comment and share with all of your

00:01:51.250 --> 00:01:52.610
<v Speaker 0>technologist friends.

00:01:53.010 --> 00:01:55.075
<v Speaker 0>You can also support the Academy with the

00:01:55.075 --> 00:01:57.875
<v Speaker 0>various membership options available. You can find them

00:01:57.875 --> 00:01:59.555
<v Speaker 0>at rockload.live.

00:01:59.875 --> 00:02:02.675
<v Speaker 0>There is Sandbox, incubation, and graduated, a level

00:02:02.675 --> 00:02:04.995
<v Speaker 0>for individuals and organizations.

00:02:05.715 --> 00:02:07.395
<v Speaker 0>And if you wanna come and chat with

00:02:07.395 --> 00:02:10.590
<v Speaker 0>nearly 600 technologists on cloud native Kubernetes and

00:02:10.590 --> 00:02:12.989
<v Speaker 0>everything in between, join us in the Discord

00:02:12.989 --> 00:02:15.630
<v Speaker 0>available at Rawkode.chat.

00:02:16.670 --> 00:02:19.470
<v Speaker 0>Alright. Let's introduce today's wonderful guest. I am

00:02:19.470 --> 00:02:21.470
<v Speaker 0>joined once again by Rich and Lucas from

00:02:21.470 --> 00:02:23.665
<v Speaker 0>the Loft team. Hey there. How are you

00:02:23.665 --> 00:02:24.465
<v Speaker 0>both doing?

00:02:25.985 --> 00:02:27.985
<v Speaker 1>Really good. It's good to be on again,

00:02:27.985 --> 00:02:28.545
<v Speaker 1>David.

00:02:29.025 --> 00:02:30.545
<v Speaker 0>I always feel really bad when I throw

00:02:30.545 --> 00:02:31.825
<v Speaker 0>that question out to two people, and I

00:02:31.825 --> 00:02:33.505
<v Speaker 0>just let them decide who's gonna go first.

00:02:33.505 --> 00:02:35.425
<v Speaker 0>And I really should just

00:02:35.310 --> 00:02:36.590
<v Speaker 0>I I should be better than this. I

00:02:36.590 --> 00:02:38.670
<v Speaker 0>should say, hey, Rich. Hey, Lucas. How's it

00:02:38.670 --> 00:02:40.750
<v Speaker 0>going? Or maybe that doesn't really help. I'll

00:02:40.750 --> 00:02:41.550
<v Speaker 0>work on it.

00:02:42.190 --> 00:02:44.110
<v Speaker 0>Okay. So for anyone who doesn't remember you

00:02:44.110 --> 00:02:46.190
<v Speaker 0>from last name, as unfamiliar reviews from Twitter,

00:02:46.190 --> 00:02:48.030
<v Speaker 0>etcetera, can we just get some introductions? And

00:02:48.030 --> 00:02:49.470
<v Speaker 0>we'll start with you, Rich, just because you're

00:02:49.470 --> 00:02:51.155
<v Speaker 0>on the left, and then feel free to

00:02:51.155 --> 00:02:52.275
<v Speaker 0>hand that over to Lucas.

00:02:52.995 --> 00:02:53.715
<v Speaker 1>Yeah.

00:02:54.115 --> 00:02:56.515
<v Speaker 1>My name is Rich Burrows. I'm a senior

00:02:56.515 --> 00:02:58.755
<v Speaker 1>developer advocate at Loft Labs.

00:02:58.995 --> 00:03:00.835
<v Speaker 1>I've been with the company for about six

00:03:00.835 --> 00:03:04.500
<v Speaker 1>months right now. We work a lot on

00:03:05.060 --> 00:03:06.180
<v Speaker 1>making Kubernetes

00:03:06.180 --> 00:03:09.380
<v Speaker 1>easier for developers to use and also

00:03:09.780 --> 00:03:12.580
<v Speaker 1>people like platform engineers who own the clusters

00:03:12.580 --> 00:03:15.780
<v Speaker 1>and are managing them. So we are very

00:03:15.780 --> 00:03:18.265
<v Speaker 1>interested in multitenancy,

00:03:18.265 --> 00:03:19.625
<v Speaker 1>self-service,

00:03:20.265 --> 00:03:22.025
<v Speaker 1>all of those kinds of things. We really

00:03:22.025 --> 00:03:25.545
<v Speaker 1>are looking to find the areas that that

00:03:25.545 --> 00:03:27.944
<v Speaker 1>people are kind of bumping their shins on

00:03:27.944 --> 00:03:29.145
<v Speaker 1>and try to make them easier.

00:03:30.519 --> 00:03:32.280
<v Speaker 0>Thank you for sharing. Lucas?

00:03:33.799 --> 00:03:35.720
<v Speaker 2>Yeah. I'm Lucas, CEO

00:03:35.720 --> 00:03:38.360
<v Speaker 2>of Loft Labs. I have the pleasure of

00:03:38.360 --> 00:03:40.920
<v Speaker 2>working with Rich on all of these exciting

00:03:40.920 --> 00:03:41.720
<v Speaker 2>topics. And,

00:03:42.375 --> 00:03:44.055
<v Speaker 2>yeah, we're really on a mission to,

00:03:44.375 --> 00:03:45.735
<v Speaker 2>you know, help companies

00:03:45.814 --> 00:03:48.534
<v Speaker 2>roll out Kubernetes and expand their use from

00:03:48.694 --> 00:03:51.174
<v Speaker 2>you know, essentially, right now, they may have,

00:03:51.174 --> 00:03:53.495
<v Speaker 2>you know, 10 or 20 or even 40

00:03:53.495 --> 00:03:55.735
<v Speaker 2>people having access to Kubernetes, and we help

00:03:55.735 --> 00:03:57.840
<v Speaker 2>them to do, you know, essentially the leap

00:03:57.840 --> 00:04:00.640
<v Speaker 2>to a thousand or even 5,000 engineers or

00:04:00.640 --> 00:04:01.200
<v Speaker 2>more.

00:04:01.519 --> 00:04:03.599
<v Speaker 2>And, obviously, there's a lot of tooling and

00:04:03.599 --> 00:04:06.720
<v Speaker 2>automation required. And jsPolicy,

00:04:07.040 --> 00:04:09.485
<v Speaker 2>which we're talking about today, is, you know,

00:04:09.485 --> 00:04:11.005
<v Speaker 2>one of the projects that we're working on

00:04:11.005 --> 00:04:12.525
<v Speaker 2>in the open source space

00:04:12.685 --> 00:04:15.005
<v Speaker 2>that may make that transition a little easier.

00:04:16.125 --> 00:04:17.725
<v Speaker 0>Awesome. Thank you for sharing.

00:04:17.964 --> 00:04:21.165
<v Speaker 0>For people that aren't familiar or don't remember,

00:04:21.165 --> 00:04:22.445
<v Speaker 0>we had you on recently, and we took

00:04:22.445 --> 00:04:23.325
<v Speaker 0>a look at vCluster.

00:04:23.740 --> 00:04:25.900
<v Speaker 0>So you're kinda tackling a lot of these

00:04:25.900 --> 00:04:28.379
<v Speaker 0>really difficult problems that people have with Kubernetes.

00:04:28.379 --> 00:04:30.060
<v Speaker 0>The first one with multitenancy,

00:04:30.139 --> 00:04:32.139
<v Speaker 0>and we had an absolutely flawless demo. So

00:04:32.139 --> 00:04:33.659
<v Speaker 0>you have set the bar high, I'm afraid.

00:04:33.659 --> 00:04:35.259
<v Speaker 0>And we're we're not gonna accept anything less

00:04:35.259 --> 00:04:35.500
<v Speaker 0>today.

00:04:36.305 --> 00:04:37.824
<v Speaker 0>And now jsPolicy,

00:04:37.824 --> 00:04:39.905
<v Speaker 0>which is tackling that really difficult thing where

00:04:39.905 --> 00:04:41.985
<v Speaker 0>people are wanting to write more admission controllers

00:04:41.985 --> 00:04:44.785
<v Speaker 0>and policies to restrict the segment access to

00:04:44.785 --> 00:04:46.945
<v Speaker 0>their Kubernetes clusters as well. So

00:04:48.419 --> 00:04:51.220
<v Speaker 0>I'm I'm curious about the what's the what's

00:04:51.220 --> 00:04:52.820
<v Speaker 0>the drive there? Like, I mean, these are

00:04:52.820 --> 00:04:54.660
<v Speaker 0>really difficult problems. Are you just sitting down

00:04:54.660 --> 00:04:56.900
<v Speaker 0>and going, right, what's painful for us and

00:04:56.900 --> 00:04:58.340
<v Speaker 0>let's solve it for other people? Or do

00:04:58.340 --> 00:05:00.259
<v Speaker 0>you you got some other semantic videos in

00:05:00.259 --> 00:05:00.419
<v Speaker 0>there?

00:05:02.115 --> 00:05:04.675
<v Speaker 2>Yeah. I think it's it's pretty much customer

00:05:04.675 --> 00:05:06.835
<v Speaker 2>driven. Right? We're in a lot of conversations

00:05:06.835 --> 00:05:09.474
<v Speaker 2>with these platform teams that essentially run into

00:05:09.474 --> 00:05:10.435
<v Speaker 2>these problems

00:05:11.074 --> 00:05:13.395
<v Speaker 2>that have to manage Kubernetes at scale for

00:05:13.395 --> 00:05:14.754
<v Speaker 2>a large number of engineers.

00:05:15.470 --> 00:05:17.710
<v Speaker 2>And, you know, in these conversations, we just

00:05:17.710 --> 00:05:18.910
<v Speaker 2>spot challenges.

00:05:19.310 --> 00:05:21.790
<v Speaker 2>And, yeah, I I mean, there are definitely

00:05:21.790 --> 00:05:24.270
<v Speaker 2>pretty hard problems. And with the technologies that

00:05:24.270 --> 00:05:26.350
<v Speaker 2>we're building, we're trying to make it as

00:05:26.350 --> 00:05:27.550
<v Speaker 2>easy as possible

00:05:27.710 --> 00:05:30.509
<v Speaker 2>for these platform team teams to essentially, you

00:05:30.509 --> 00:05:33.765
<v Speaker 2>know, enable developers to more efficiently work with

00:05:33.765 --> 00:05:37.445
<v Speaker 2>Kubernetes. And, yeah, they are complicated. So big

00:05:37.445 --> 00:05:41.205
<v Speaker 2>shout out to, you know, LoftLab's CTO,

00:05:41.605 --> 00:05:42.405
<v Speaker 2>Fabian,

00:05:42.645 --> 00:05:44.485
<v Speaker 2>who is actually grinding a lot of the

00:05:44.485 --> 00:05:46.950
<v Speaker 2>code on this end. You know? We may

00:05:46.950 --> 00:05:49.110
<v Speaker 2>come up with feature ideas and throw them

00:05:49.270 --> 00:05:51.990
<v Speaker 2>at at Fabian, but he's actually the brain

00:05:51.990 --> 00:05:54.150
<v Speaker 2>of, you know, how do we actually implement

00:05:54.150 --> 00:05:56.950
<v Speaker 2>this and, you know, make it work at

00:05:56.950 --> 00:05:58.630
<v Speaker 2>scale. So big shout out to him.

00:05:59.455 --> 00:06:02.175
<v Speaker 1>Yeah. He's fantastic. We've also had some new

00:06:02.175 --> 00:06:04.335
<v Speaker 1>engineering hires recently too, so the team is

00:06:04.335 --> 00:06:04.895
<v Speaker 1>growing.

00:06:05.855 --> 00:06:06.735
<v Speaker 0>Awesome.

00:06:07.215 --> 00:06:09.775
<v Speaker 0>Maybe we can kind of address jsPolicy

00:06:09.775 --> 00:06:11.055
<v Speaker 0>directly then.

00:06:11.295 --> 00:06:13.190
<v Speaker 0>I mean, do you wanna give the the

00:06:13.190 --> 00:06:15.990
<v Speaker 0>the pitch first? Like, what is j what

00:06:15.990 --> 00:06:17.270
<v Speaker 0>is jsPolicy,

00:06:17.270 --> 00:06:18.790
<v Speaker 0>and why should people take note?

00:06:20.229 --> 00:06:21.830
<v Speaker 0>Who wants to tackle that? Yeah. I'm Indian.

00:06:21.830 --> 00:06:22.790
<v Speaker 0>Yeah. There we go.

00:06:23.910 --> 00:06:26.550
<v Speaker 2>Yeah. The other behind jsPolicy is essentially

00:06:26.870 --> 00:06:28.310
<v Speaker 2>writing policies

00:06:28.470 --> 00:06:29.425
<v Speaker 2>as code.

00:06:29.745 --> 00:06:32.225
<v Speaker 2>And I think the the pain point that

00:06:32.225 --> 00:06:33.025
<v Speaker 2>we saw

00:06:33.425 --> 00:06:35.825
<v Speaker 2>was essentially that OPA with

00:06:35.905 --> 00:06:36.705
<v Speaker 2>Rigo

00:06:36.785 --> 00:06:38.545
<v Speaker 2>has a language. You know, it's kind of

00:06:38.545 --> 00:06:39.665
<v Speaker 2>like the default

00:06:39.825 --> 00:06:42.305
<v Speaker 2>standard when you're looking at dynamic admission control

00:06:42.305 --> 00:06:45.100
<v Speaker 2>in Kubernetes. Everybody looks at Policy Agent,

00:06:45.420 --> 00:06:48.060
<v Speaker 2>and they have to adopt Regal

00:06:48.620 --> 00:06:51.020
<v Speaker 2>as their policy language,

00:06:52.540 --> 00:06:54.300
<v Speaker 2>which is not a, you know, Turing complete

00:06:54.300 --> 00:06:56.300
<v Speaker 2>programming language and feels,

00:06:56.780 --> 00:06:59.500
<v Speaker 2>you know, very off for a lot of

00:06:59.805 --> 00:07:00.605
<v Speaker 2>engineers.

00:07:00.685 --> 00:07:03.565
<v Speaker 2>And, you know, we are thinking, can't we

00:07:03.565 --> 00:07:06.365
<v Speaker 2>simplify that by essentially just taking a language

00:07:06.444 --> 00:07:07.645
<v Speaker 2>that people know,

00:07:09.085 --> 00:07:11.324
<v Speaker 2>you know, but still assure that when people

00:07:11.324 --> 00:07:14.205
<v Speaker 2>write these policies that they can maintain them

00:07:14.205 --> 00:07:16.419
<v Speaker 2>very well, that they can test them very

00:07:16.419 --> 00:07:18.980
<v Speaker 2>well, and that it's very integrated into what's

00:07:18.980 --> 00:07:21.540
<v Speaker 2>what's already existing in terms of ecosystem.

00:07:21.860 --> 00:07:24.740
<v Speaker 2>And JavaScript and TypeScript just have such a

00:07:24.740 --> 00:07:27.300
<v Speaker 2>vibrant ecosystem when you're looking at, you know,

00:07:27.300 --> 00:07:28.980
<v Speaker 2>testing frameworks

00:07:28.515 --> 00:07:31.315
<v Speaker 2>and CICD integration, all these kind of things.

00:07:31.315 --> 00:07:33.955
<v Speaker 2>Right? It's pretty seamless because, you know, it's

00:07:33.955 --> 00:07:36.915
<v Speaker 2>it's just such a popular language and such

00:07:36.915 --> 00:07:38.675
<v Speaker 2>a, you know, vibrant ecosystem.

00:07:38.675 --> 00:07:41.155
<v Speaker 2>So, yeah, we tried JavaScript,

00:07:41.155 --> 00:07:44.650
<v Speaker 2>and that seems to, you know, reduce the

00:07:45.129 --> 00:07:45.930
<v Speaker 2>complexity

00:07:45.930 --> 00:07:47.610
<v Speaker 2>a lot in terms of you know, if

00:07:47.610 --> 00:07:49.530
<v Speaker 2>I write a a policy in Rigo and

00:07:49.530 --> 00:07:51.050
<v Speaker 2>I look like three months later, I look

00:07:51.050 --> 00:07:53.370
<v Speaker 2>at that policy. Right? I'm having a pretty

00:07:53.370 --> 00:07:55.770
<v Speaker 2>hard time understanding of what it actually does.

00:07:56.395 --> 00:07:58.155
<v Speaker 2>And, I may be the person who actually

00:07:58.155 --> 00:08:00.235
<v Speaker 2>wrote that policy. Right? So I don't wanna

00:08:00.235 --> 00:08:02.794
<v Speaker 2>know how anybody else feels that has no

00:08:02.794 --> 00:08:04.955
<v Speaker 2>clue about this policy in the first place.

00:08:05.194 --> 00:08:06.314
<v Speaker 2>And we hope to make that a little

00:08:06.314 --> 00:08:09.275
<v Speaker 2>bit easier with JavaScript, especially since most companies

00:08:09.790 --> 00:08:12.430
<v Speaker 2>already have people that know JavaScript. Although they

00:08:12.430 --> 00:08:14.670
<v Speaker 2>may, you know, not necessarily be part of

00:08:14.670 --> 00:08:16.830
<v Speaker 2>the platform team, they may actually be working

00:08:16.830 --> 00:08:18.270
<v Speaker 2>on some front end stuff,

00:08:18.510 --> 00:08:20.750
<v Speaker 2>but they are definitely qualified engineers

00:08:20.830 --> 00:08:23.390
<v Speaker 2>in pretty much any company that know JavaScript.

00:08:24.335 --> 00:08:26.175
<v Speaker 1>Yeah. I'd I'd add a couple of things.

00:08:26.175 --> 00:08:28.255
<v Speaker 1>You know? First first, you don't have to

00:08:28.255 --> 00:08:30.655
<v Speaker 1>be a JavaScript expert to, you know, write

00:08:30.655 --> 00:08:33.535
<v Speaker 1>some basic policies with the tool. You don't

00:08:33.535 --> 00:08:36.095
<v Speaker 1>have to go the TypeScript route. You know?

00:08:36.095 --> 00:08:38.335
<v Speaker 1>We'll we'll kinda show you the basics too.

00:08:39.580 --> 00:08:40.220
<v Speaker 1>But,

00:08:41.020 --> 00:08:42.780
<v Speaker 1>you know, the thing I like about it

00:08:42.780 --> 00:08:43.660
<v Speaker 1>is that

00:08:44.460 --> 00:08:47.020
<v Speaker 1>it shouldn't have to be the platform engineers

00:08:47.020 --> 00:08:49.180
<v Speaker 1>who write all the policies, in my opinion.

00:08:49.180 --> 00:08:50.940
<v Speaker 1>You know, there are some policies that you

00:08:50.940 --> 00:08:53.685
<v Speaker 1>wanna be maybe cluster wide and and and

00:08:53.685 --> 00:08:56.005
<v Speaker 1>have those folks writing, but I feel like

00:08:56.325 --> 00:08:58.565
<v Speaker 1>other people, you know, potentially should be able

00:08:58.565 --> 00:09:01.205
<v Speaker 1>to contribute too. And and, you know, you

00:09:01.205 --> 00:09:04.165
<v Speaker 1>you could have platform teams I mean, application

00:09:05.205 --> 00:09:07.900
<v Speaker 1>engineer teams, you know, writing policies

00:09:08.060 --> 00:09:10.540
<v Speaker 1>or at least being able to read them

00:09:10.540 --> 00:09:13.180
<v Speaker 1>and understand them. Right? So so, like, even

00:09:13.180 --> 00:09:15.100
<v Speaker 1>if they're not the ones writing them, they

00:09:15.100 --> 00:09:16.940
<v Speaker 1>can at least look at the policies and

00:09:16.940 --> 00:09:18.540
<v Speaker 1>and kinda know what's going on.

00:09:20.195 --> 00:09:22.355
<v Speaker 0>Yeah. That makes a lot of sense. I

00:09:22.355 --> 00:09:23.475
<v Speaker 0>mean, JavaScript

00:09:24.515 --> 00:09:25.795
<v Speaker 0>I mean, this has to be the biggest

00:09:25.795 --> 00:09:27.795
<v Speaker 0>programming language in the world these days, I

00:09:27.795 --> 00:09:30.515
<v Speaker 0>think, with just the ecosystem is there. And

00:09:30.515 --> 00:09:33.080
<v Speaker 0>it doesn't matter if your background is from

00:09:33.080 --> 00:09:35.160
<v Speaker 0>the front end world or JavaScript world anyway

00:09:35.160 --> 00:09:37.160
<v Speaker 0>because it's a c derivative language. Like, it

00:09:37.160 --> 00:09:39.640
<v Speaker 0>feels familiar even if you've never read a

00:09:39.640 --> 00:09:42.519
<v Speaker 0>line of JavaScript before to go developers, to

00:09:42.519 --> 00:09:44.600
<v Speaker 0>c developers, c plus plus developers, even Java

00:09:44.600 --> 00:09:47.065
<v Speaker 0>developers to a certain degree. Like, the language

00:09:47.065 --> 00:09:49.865
<v Speaker 0>primitives and constructs are are mostly familiar. So

00:09:49.865 --> 00:09:52.185
<v Speaker 0>I think it's a really sensible choice for

00:09:52.185 --> 00:09:53.705
<v Speaker 0>a tool like this. And to go back

00:09:53.705 --> 00:09:55.945
<v Speaker 0>to Lukasys point, like, I mean, we've all

00:09:55.945 --> 00:09:57.385
<v Speaker 0>been the person that looks at a bit

00:09:57.385 --> 00:09:59.065
<v Speaker 0>of of code Regal or not Regal, but

00:09:59.065 --> 00:10:00.970
<v Speaker 0>then goes, the hell is this code doing?

00:10:00.970 --> 00:10:02.570
<v Speaker 0>Who what idea wrote this? And then you

00:10:02.570 --> 00:10:04.970
<v Speaker 0>run the git log or whatever the git

00:10:04.970 --> 00:10:06.490
<v Speaker 0>show, and you go, oh, it was it

00:10:06.490 --> 00:10:08.490
<v Speaker 0>was me. I've certainly been guilty of that

00:10:08.490 --> 00:10:10.890
<v Speaker 0>many, many times. So I think it's it's

00:10:10.890 --> 00:10:14.010
<v Speaker 0>nice that I will have the potential and

00:10:14.010 --> 00:10:15.130
<v Speaker 0>ability to write

00:10:15.705 --> 00:10:17.945
<v Speaker 0>policies in JavaScript because,

00:10:18.425 --> 00:10:20.905
<v Speaker 0>hopefully, it solves that burden and that just

00:10:20.985 --> 00:10:23.465
<v Speaker 0>that cognitive load that it takes to read

00:10:23.465 --> 00:10:26.425
<v Speaker 0>and consume, even YAML at times. So very

00:10:26.425 --> 00:10:27.545
<v Speaker 0>excited for today's session.

00:10:28.589 --> 00:10:31.230
<v Speaker 1>Yeah. When when Lucas first told me about

00:10:31.230 --> 00:10:33.150
<v Speaker 1>the project and and showed me what they

00:10:33.150 --> 00:10:35.070
<v Speaker 1>were working on, kind of the prototype,

00:10:35.390 --> 00:10:37.230
<v Speaker 1>I I was immediately

00:10:37.230 --> 00:10:39.150
<v Speaker 1>struck by how easy it was to just

00:10:39.150 --> 00:10:41.630
<v Speaker 1>read the example policies and understand what's going

00:10:41.630 --> 00:10:43.395
<v Speaker 1>on. And and I'm not somebody who writes

00:10:43.395 --> 00:10:45.395
<v Speaker 1>a lot of JavaScript. You know? So it's

00:10:45.395 --> 00:10:48.275
<v Speaker 1>it's not like I I have more than

00:10:48.275 --> 00:10:50.915
<v Speaker 1>a very, you know, very, very fundamental understanding

00:10:50.915 --> 00:10:52.995
<v Speaker 1>of it. But you'll you'll see as we

00:10:52.995 --> 00:10:55.235
<v Speaker 1>get into this that, like, it's pretty easy

00:10:55.235 --> 00:10:57.310
<v Speaker 1>to tell what's going on. Uh-huh. I'm I'm

00:10:57.310 --> 00:10:59.790
<v Speaker 0>I'm worried now, Rich. You said easy twice,

00:10:59.790 --> 00:11:01.710
<v Speaker 0>and I'm like, oh, like, that's that is

00:11:01.790 --> 00:11:04.110
<v Speaker 1>I shouldn't have said that for a demo.

00:11:04.190 --> 00:11:05.630
<v Speaker 0>Then when something goes wrong, I'm gonna go,

00:11:05.630 --> 00:11:07.070
<v Speaker 0>you said it was easy, and then Hulk

00:11:07.070 --> 00:11:08.430
<v Speaker 0>smashed my computer. So

00:11:09.545 --> 00:11:10.265
<v Speaker 0>okay.

00:11:10.665 --> 00:11:12.345
<v Speaker 0>Let's pull up the homepage

00:11:12.585 --> 00:11:14.825
<v Speaker 0>because I think, you know, and I'll I'll

00:11:14.825 --> 00:11:16.585
<v Speaker 0>put some words in the viewer's mouth here.

00:11:16.585 --> 00:11:18.345
<v Speaker 0>It's like, we've already mentioned Regal and Opa,

00:11:18.345 --> 00:11:20.025
<v Speaker 0>and we've got Qyvernal that people are familiar

00:11:20.025 --> 00:11:21.465
<v Speaker 0>with and we've had episodes on in the

00:11:21.465 --> 00:11:24.105
<v Speaker 0>past. And there is this kind of comparison

00:11:24.105 --> 00:11:26.040
<v Speaker 0>here. Do you maybe wanna run through this

00:11:26.040 --> 00:11:28.279
<v Speaker 0>and just tell people what is different in

00:11:28.279 --> 00:11:30.839
<v Speaker 0>jsPolicy versus these other systems?

00:11:32.920 --> 00:11:35.240
<v Speaker 2>Yeah. I mean, obviously, the the the biggest

00:11:35.240 --> 00:11:38.600
<v Speaker 2>different differentiator is how you define these policies.

00:11:39.275 --> 00:11:42.395
<v Speaker 2>In Kavana, it's it's mostly YAML,

00:11:43.115 --> 00:11:44.795
<v Speaker 2>very, very close to Kubernetes.

00:11:45.515 --> 00:11:47.755
<v Speaker 2>I mean, in the end, you know, jsPolicy

00:11:47.755 --> 00:11:50.795
<v Speaker 2>and and OPAL also have their CRDs.

00:11:50.795 --> 00:11:53.675
<v Speaker 2>Right? But the actual policy logic is not

00:11:53.675 --> 00:11:56.530
<v Speaker 2>defined in in in YAML itself.

00:11:57.970 --> 00:12:01.410
<v Speaker 2>All of them support validating policies, of course.

00:12:02.050 --> 00:12:04.050
<v Speaker 2>There are some differences regarding

00:12:04.290 --> 00:12:05.890
<v Speaker 2>mutating policies.

00:12:06.610 --> 00:12:08.770
<v Speaker 2>You have a especially when you look at

00:12:08.770 --> 00:12:09.330
<v Speaker 2>Kibana,

00:12:10.095 --> 00:12:12.255
<v Speaker 2>that is pretty challenging to express

00:12:12.415 --> 00:12:15.454
<v Speaker 2>changing an object in YAML, right, just because

00:12:15.454 --> 00:12:18.495
<v Speaker 2>of the limitation of that declarative language

00:12:18.814 --> 00:12:19.695
<v Speaker 2>versus,

00:12:20.254 --> 00:12:23.055
<v Speaker 2>you know, in in JS policy,

00:12:23.134 --> 00:12:26.240
<v Speaker 2>essentially, it's it's mutating an object just as

00:12:26.240 --> 00:12:28.000
<v Speaker 2>you would do in any, you know, kind

00:12:28.000 --> 00:12:30.240
<v Speaker 2>of object oriented language. Right? You have this

00:12:30.240 --> 00:12:33.120
<v Speaker 2>JSON object. And and, I mean, it's kind

00:12:33.120 --> 00:12:34.640
<v Speaker 2>of funny. You know, Kubernetes,

00:12:34.640 --> 00:12:37.680
<v Speaker 2>essentially, we're writing YAML code, but kubectl under

00:12:37.680 --> 00:12:40.000
<v Speaker 2>the hood converts everything to JSON, right, and

00:12:40.000 --> 00:12:42.024
<v Speaker 2>before it sends to the API server.

00:12:42.264 --> 00:12:44.105
<v Speaker 2>So what better language to,

00:12:44.505 --> 00:12:47.065
<v Speaker 2>you know, manipulate these objects with than JavaScript?

00:12:47.065 --> 00:12:49.625
<v Speaker 2>I mean, it's literally the JavaScript object notation.

00:12:49.625 --> 00:12:50.665
<v Speaker 2>And so

00:12:51.384 --> 00:12:53.225
<v Speaker 2>it's pretty straightforward to essentially,

00:12:53.750 --> 00:12:56.070
<v Speaker 2>you know, have something like pod dot spec

00:12:56.070 --> 00:12:58.230
<v Speaker 2>dot something, you know,

00:12:58.790 --> 00:13:01.910
<v Speaker 2>and then essentially write equals new value. Right?

00:13:01.910 --> 00:13:03.430
<v Speaker 2>It's pretty straightforward.

00:13:04.950 --> 00:13:07.350
<v Speaker 2>And I think one thing that is really,

00:13:07.350 --> 00:13:09.269
<v Speaker 2>really different about jsPolicy is

00:13:09.755 --> 00:13:11.915
<v Speaker 2>a new type of policy, actually.

00:13:12.235 --> 00:13:15.515
<v Speaker 2>We introduced a policy that is reactive,

00:13:16.635 --> 00:13:18.875
<v Speaker 2>and we call them controller policies

00:13:19.275 --> 00:13:21.995
<v Speaker 2>because they're kinda similar to actually writing a

00:13:21.995 --> 00:13:23.595
<v Speaker 2>fully fledged Kubernetes controller.

00:13:25.290 --> 00:13:27.610
<v Speaker 2>So, essentially, there are a couple of things

00:13:27.610 --> 00:13:29.850
<v Speaker 2>that you cannot do with policies. So let's

00:13:29.850 --> 00:13:30.649
<v Speaker 2>say you

00:13:31.769 --> 00:13:34.329
<v Speaker 2>wanna have a network policy in each newly

00:13:34.329 --> 00:13:36.170
<v Speaker 2>created namespace. Right?

00:13:36.730 --> 00:13:38.810
<v Speaker 2>That could be a policy in your company.

00:13:39.405 --> 00:13:40.845
<v Speaker 2>How do you enforce

00:13:40.845 --> 00:13:43.885
<v Speaker 2>that this network policy is there? Right?

00:13:44.765 --> 00:13:47.165
<v Speaker 2>That is really hard in admission control

00:13:47.405 --> 00:13:48.125
<v Speaker 2>because

00:13:48.285 --> 00:13:50.205
<v Speaker 2>in the regular admission control flow,

00:13:51.500 --> 00:13:55.100
<v Speaker 2>that is part of the namespace creation request.

00:13:55.100 --> 00:13:57.660
<v Speaker 2>Right? If I run kubectl create namespace,

00:13:58.459 --> 00:14:01.180
<v Speaker 2>the admission control happens first before the namespace

00:14:01.180 --> 00:14:03.660
<v Speaker 2>object is actually persisted in etcd.

00:14:04.139 --> 00:14:06.835
<v Speaker 2>But the the network policy can only be

00:14:06.835 --> 00:14:07.955
<v Speaker 2>created after

00:14:08.275 --> 00:14:10.755
<v Speaker 2>the namespace exists because it has to live

00:14:10.755 --> 00:14:11.875
<v Speaker 2>in that namespace.

00:14:12.275 --> 00:14:14.275
<v Speaker 2>It's pretty challenging. So what we do with

00:14:14.275 --> 00:14:17.475
<v Speaker 2>controller policies is essentially introducing a new class

00:14:17.475 --> 00:14:18.115
<v Speaker 2>of policies

00:14:19.139 --> 00:14:22.500
<v Speaker 2>or that essentially lets you react to Kubernetes

00:14:22.660 --> 00:14:23.300
<v Speaker 2>events.

00:14:23.540 --> 00:14:25.540
<v Speaker 2>So we have the event in Kubernetes that

00:14:25.540 --> 00:14:28.420
<v Speaker 2>is, you know, thrown. Namespace has been created.

00:14:28.420 --> 00:14:30.660
<v Speaker 2>Right? And you can watch on that event

00:14:30.660 --> 00:14:32.500
<v Speaker 2>and then essentially react to that,

00:14:33.815 --> 00:14:36.375
<v Speaker 2>You know, whether you check if a network

00:14:36.375 --> 00:14:39.015
<v Speaker 2>policy has been applied within five minutes or

00:14:39.015 --> 00:14:39.495
<v Speaker 2>so

00:14:39.975 --> 00:14:42.135
<v Speaker 2>or if you, you know, created

00:14:42.454 --> 00:14:45.654
<v Speaker 2>yourself throughout that controller policy, there's, you know,

00:14:45.654 --> 00:14:46.774
<v Speaker 2>just so many options.

00:14:48.070 --> 00:14:50.470
<v Speaker 2>And then another big difference is essentially

00:14:50.710 --> 00:14:53.830
<v Speaker 2>JS policy is based on JavaScript. So you

00:14:53.830 --> 00:14:56.070
<v Speaker 2>can make use of the entire,

00:14:56.070 --> 00:14:59.270
<v Speaker 2>like, tool chain regarding testing frameworks,

00:14:59.270 --> 00:15:02.855
<v Speaker 2>regarding package management. Right? You can essentially there's

00:15:02.855 --> 00:15:04.214
<v Speaker 2>NPM. Js,

00:15:04.454 --> 00:15:06.615
<v Speaker 2>the registry for NPM packages.

00:15:06.935 --> 00:15:09.574
<v Speaker 2>You can essentially use any JavaScript or TypeScript

00:15:09.574 --> 00:15:12.615
<v Speaker 2>library out there and just import that

00:15:13.014 --> 00:15:15.014
<v Speaker 2>and use it in your JavaScript policy.

00:15:15.440 --> 00:15:17.200
<v Speaker 2>And we see that as a huge benefit

00:15:17.200 --> 00:15:19.520
<v Speaker 2>to essentially share policy code

00:15:20.079 --> 00:15:22.000
<v Speaker 2>because right now, you know,

00:15:22.399 --> 00:15:24.240
<v Speaker 2>you have to create something like a policy

00:15:24.240 --> 00:15:25.760
<v Speaker 2>hub or something like that

00:15:26.079 --> 00:15:28.800
<v Speaker 2>to essentially share policies, like a totally different

00:15:28.800 --> 00:15:29.360
<v Speaker 2>ecosystem,

00:15:29.855 --> 00:15:31.215
<v Speaker 2>and it's a lot of work to build

00:15:31.215 --> 00:15:32.895
<v Speaker 2>that up and to maintain that.

00:15:33.935 --> 00:15:36.015
<v Speaker 2>But if we're already having NPM. Js, you

00:15:36.015 --> 00:15:38.895
<v Speaker 2>know, that's essentially a given. It's pretty straightforward

00:15:38.895 --> 00:15:42.175
<v Speaker 2>for people to run NPM publish and even

00:15:42.175 --> 00:15:44.815
<v Speaker 2>publish things to their own internal registry

00:15:45.020 --> 00:15:47.260
<v Speaker 2>and, you know, share things across teams and

00:15:47.260 --> 00:15:48.140
<v Speaker 2>things like that.

00:15:48.860 --> 00:15:50.620
<v Speaker 2>You don't need to reinvent the wheel, and

00:15:50.620 --> 00:15:52.940
<v Speaker 2>that's a pretty interesting concept.

00:15:54.060 --> 00:15:56.220
<v Speaker 1>Yeah. Most companies are gonna already have that

00:15:56.220 --> 00:15:58.060
<v Speaker 1>internal registry too. You know? So

00:15:59.115 --> 00:16:01.435
<v Speaker 0>Yeah. I'm I'm sold. Like, you know, the

00:16:01.435 --> 00:16:03.274
<v Speaker 0>package management and been haven't been able to

00:16:03.274 --> 00:16:05.915
<v Speaker 0>distribute my policies via NPM and pull them

00:16:05.915 --> 00:16:07.915
<v Speaker 0>in that way, think, is is super cool

00:16:08.235 --> 00:16:10.715
<v Speaker 0>just because I'm familiar enough with that tooling.

00:16:10.955 --> 00:16:12.714
<v Speaker 0>And, you know, I think anyone who's written

00:16:12.714 --> 00:16:15.279
<v Speaker 0>any kind of open policies, testing them is

00:16:15.279 --> 00:16:17.040
<v Speaker 0>really hard and been able to fall back

00:16:17.040 --> 00:16:20.320
<v Speaker 0>on pretty mature testing frameworks available in the

00:16:20.399 --> 00:16:22.880
<v Speaker 0>kind of node and JavaScript ecosystem, I think

00:16:22.880 --> 00:16:24.240
<v Speaker 0>is an absolute bonus.

00:16:24.639 --> 00:16:25.680
<v Speaker 0>And I'm

00:16:25.680 --> 00:16:28.000
<v Speaker 0>really excited about controller policies. And I want

00:16:28.000 --> 00:16:29.355
<v Speaker 0>to see if maybe we could play around

00:16:29.355 --> 00:16:30.795
<v Speaker 0>a little bit with that today.

00:16:31.275 --> 00:16:33.675
<v Speaker 0>You know, mutating admission controllers are great for

00:16:33.675 --> 00:16:36.315
<v Speaker 0>modifying the the YAML that's kind of being

00:16:36.315 --> 00:16:38.235
<v Speaker 0>admitted, but being able to actually

00:16:38.475 --> 00:16:41.435
<v Speaker 0>react to that and deploy more or other

00:16:41.435 --> 00:16:42.795
<v Speaker 0>things, I think, is really cool too.

00:16:43.620 --> 00:16:45.860
<v Speaker 0>So this is gonna be fun.

00:16:46.580 --> 00:16:48.740
<v Speaker 0>Now you pointed this out to me just

00:16:48.740 --> 00:16:50.980
<v Speaker 0>before we went live. So I figured we

00:16:50.980 --> 00:16:52.900
<v Speaker 0>could run through a couple of these just

00:16:52.900 --> 00:16:55.540
<v Speaker 0>to show people what the JS policy looks

00:16:55.540 --> 00:16:57.380
<v Speaker 0>like, what it's actually doing, how it can

00:16:57.540 --> 00:16:59.365
<v Speaker 0>how just how it works as a high

00:16:59.365 --> 00:17:00.725
<v Speaker 0>level overview. And then what we'll do is

00:17:00.725 --> 00:17:02.805
<v Speaker 0>we'll dive over to my cluster and get

00:17:02.805 --> 00:17:04.085
<v Speaker 0>all of this running.

00:17:04.565 --> 00:17:07.605
<v Speaker 0>So this is like your JS policy playground

00:17:07.605 --> 00:17:09.444
<v Speaker 0>in a sense and that we have access

00:17:09.444 --> 00:17:09.924
<v Speaker 0>to

00:17:10.645 --> 00:17:12.565
<v Speaker 0>a policy here

00:17:13.540 --> 00:17:16.660
<v Speaker 0>and a standard Kubernetes object here, and we

00:17:16.660 --> 00:17:18.420
<v Speaker 0>have a traffic light system to tell us

00:17:18.420 --> 00:17:19.539
<v Speaker 0>what is happening.

00:17:20.180 --> 00:17:22.339
<v Speaker 0>Did I mess that up? Yeah. Really right.

00:17:22.819 --> 00:17:24.339
<v Speaker 1>No. That's totally right.

00:17:24.980 --> 00:17:27.220
<v Speaker 1>I really like starting with this deny default

00:17:27.220 --> 00:17:29.540
<v Speaker 1>namespace one too because I feel like it's

00:17:30.554 --> 00:17:33.275
<v Speaker 1>something that everybody's gonna understand,

00:17:33.275 --> 00:17:35.674
<v Speaker 1>right, even people without a lot of Kubernetes

00:17:35.674 --> 00:17:39.034
<v Speaker 1>experience that, you know, we just don't want

00:17:39.035 --> 00:17:41.995
<v Speaker 1>things to to get launched into that namespace.

00:17:44.250 --> 00:17:45.369
<v Speaker 0>Okay. So

00:17:46.009 --> 00:17:48.889
<v Speaker 0>let's just run through this this policy then.

00:17:50.090 --> 00:17:51.929
<v Speaker 0>We've got our API version in kind, which

00:17:51.929 --> 00:17:53.370
<v Speaker 0>I'm sure you're all familiar with. We've got

00:17:53.370 --> 00:17:55.370
<v Speaker 0>access to policy.jspolicy.com.

00:17:56.195 --> 00:17:57.395
<v Speaker 0>I have not seen v one beta one

00:17:57.395 --> 00:17:58.915
<v Speaker 0>in a while. That's a nice flashback. I'm

00:17:58.915 --> 00:18:00.995
<v Speaker 0>glad to see that still kicking. And then

00:18:00.995 --> 00:18:03.554
<v Speaker 0>we've got Kang JS policy. We've got metadata.

00:18:03.875 --> 00:18:05.634
<v Speaker 0>And then here's the guts of it.

00:18:06.435 --> 00:18:09.155
<v Speaker 0>So we have to tell it which operations

00:18:09.155 --> 00:18:11.395
<v Speaker 0>that we want to apply the policy to,

00:18:12.929 --> 00:18:14.129
<v Speaker 0>which resources.

00:18:15.010 --> 00:18:16.929
<v Speaker 0>We've got the scope. So I guess names

00:18:16.929 --> 00:18:19.169
<v Speaker 0>based and cluster wide would be my two

00:18:19.169 --> 00:18:20.289
<v Speaker 0>options here.

00:18:20.770 --> 00:18:23.090
<v Speaker 0>And then we've got a JavaScript key

00:18:23.330 --> 00:18:25.009
<v Speaker 0>that just has a conditional

00:18:25.410 --> 00:18:25.890
<v Speaker 0>in it.

00:18:28.404 --> 00:18:29.765
<v Speaker 0>I mean, I can just look at that,

00:18:29.765 --> 00:18:30.965
<v Speaker 0>and I I understand

00:18:30.965 --> 00:18:32.885
<v Speaker 0>what's going on, which I think is a

00:18:32.885 --> 00:18:34.644
<v Speaker 0>pretty Exactly. No. Yeah.

00:18:35.284 --> 00:18:36.804
<v Speaker 1>Like I said, when I first when I

00:18:36.804 --> 00:18:39.284
<v Speaker 1>first started looking at this, I was just

00:18:39.679 --> 00:18:42.160
<v Speaker 1>almost shocked at how easy it was to,

00:18:42.160 --> 00:18:44.559
<v Speaker 1>like, look at these things and understand them

00:18:44.559 --> 00:18:47.280
<v Speaker 1>even as somebody who's not written really much

00:18:47.280 --> 00:18:48.480
<v Speaker 1>JavaScript at all.

00:18:49.840 --> 00:18:51.840
<v Speaker 0>Yeah. So we're we've got a policy here

00:18:51.840 --> 00:18:53.920
<v Speaker 0>that says whenever I create a resource, any

00:18:53.920 --> 00:18:56.495
<v Speaker 0>resource, as designated by the star,

00:18:57.135 --> 00:19:00.495
<v Speaker 0>as the request object's namespace is default, we

00:19:00.495 --> 00:19:02.415
<v Speaker 0>just deny it. I'm assuming deny is just

00:19:02.415 --> 00:19:05.375
<v Speaker 0>a a special function that blocks the the

00:19:05.375 --> 00:19:06.815
<v Speaker 0>admission of the the object.

00:19:08.309 --> 00:19:09.590
<v Speaker 0>So

00:19:09.590 --> 00:19:11.590
<v Speaker 0>let's take a look. We got this ability

00:19:11.590 --> 00:19:12.389
<v Speaker 0>here

00:19:12.950 --> 00:19:14.389
<v Speaker 0>to then create

00:19:14.549 --> 00:19:15.669
<v Speaker 0>an object.

00:19:16.309 --> 00:19:18.469
<v Speaker 0>This is in the default namespace,

00:19:19.590 --> 00:19:21.830
<v Speaker 0>and we get a deny. Nice and simple.

00:19:25.085 --> 00:19:26.684
<v Speaker 0>So I guess the fix here

00:19:27.565 --> 00:19:29.244
<v Speaker 0>is to change the namespace

00:19:30.365 --> 00:19:31.644
<v Speaker 0>and it works.

00:19:32.125 --> 00:19:34.125
<v Speaker 0>That's cool. I think it's a nice visual

00:19:34.125 --> 00:19:36.284
<v Speaker 0>way to introduce people to the project and

00:19:36.284 --> 00:19:39.160
<v Speaker 0>just understand what's actually happening. Although, I suspect

00:19:39.160 --> 00:19:40.840
<v Speaker 0>at some point in my career, I'm gonna

00:19:40.840 --> 00:19:43.160
<v Speaker 0>start dropping actual real policies and payload and

00:19:43.160 --> 00:19:44.680
<v Speaker 0>workloads into this than just using it as

00:19:44.680 --> 00:19:48.120
<v Speaker 0>a sanity check. But we've

00:19:48.120 --> 00:19:49.960
<v Speaker 0>got people in the chat already asking if

00:19:49.960 --> 00:19:51.640
<v Speaker 0>they can use us to break clusters on

00:19:51.640 --> 00:19:53.005
<v Speaker 0>clustered. Thanks,

00:19:53.005 --> 00:19:55.164
<v Speaker 0>Russell. They're always thinking ahead of me.

00:19:56.685 --> 00:19:58.525
<v Speaker 0>We got a question from a mad hand

00:19:58.525 --> 00:20:00.205
<v Speaker 0>as well in the chat asking, is this

00:20:00.205 --> 00:20:01.725
<v Speaker 0>similar to Pulumi?

00:20:02.845 --> 00:20:05.085
<v Speaker 0>Wondering if want to tackle maybe the differences

00:20:05.085 --> 00:20:05.405
<v Speaker 0>here.

00:20:08.220 --> 00:20:10.940
<v Speaker 2>I I guess could be seen like that.

00:20:10.940 --> 00:20:13.420
<v Speaker 2>Oh, sorry, Rich. Go ahead. Oh, I was

00:20:13.420 --> 00:20:14.940
<v Speaker 1>just gonna say, I don't I don't know

00:20:14.940 --> 00:20:16.620
<v Speaker 1>that Pulumi has

00:20:17.580 --> 00:20:19.499
<v Speaker 1>functions for for

00:20:19.580 --> 00:20:21.900
<v Speaker 1>doing policy stuff, but I could be wrong.

00:20:23.505 --> 00:20:25.025
<v Speaker 0>Not to my knowledge. I guess, like, I

00:20:25.025 --> 00:20:27.345
<v Speaker 1>I think Lucas was about to say that

00:20:27.345 --> 00:20:30.304
<v Speaker 1>it's it's maybe a bit similar in that,

00:20:30.465 --> 00:20:32.545
<v Speaker 1>you know, you're able to use a language

00:20:32.545 --> 00:20:35.185
<v Speaker 1>that is a standard language that you're already

00:20:35.185 --> 00:20:37.650
<v Speaker 1>familiar with, you know, to to do the

00:20:37.650 --> 00:20:39.570
<v Speaker 1>things that you wanna do as opposed to,

00:20:39.570 --> 00:20:41.810
<v Speaker 1>like, having to, like, learn a a new

00:20:41.810 --> 00:20:44.530
<v Speaker 1>language or a DSL or something like that.

00:20:45.010 --> 00:20:46.530
<v Speaker 0>Yeah. I mean, from what I can see

00:20:46.530 --> 00:20:48.610
<v Speaker 0>here, I'll just add my kind of perspective

00:20:48.610 --> 00:20:50.210
<v Speaker 0>to it. You know, I I would probably

00:20:50.210 --> 00:20:51.970
<v Speaker 0>use Pulumi to apply these policies

00:20:52.725 --> 00:20:54.885
<v Speaker 0>to my cluster and then use JS policy

00:20:54.885 --> 00:20:57.684
<v Speaker 0>within the cluster to be the controller and

00:20:57.684 --> 00:20:58.565
<v Speaker 0>the admission

00:20:58.645 --> 00:21:00.085
<v Speaker 0>aspect of it. So I think they work

00:21:00.085 --> 00:21:01.924
<v Speaker 0>side by side together pretty well.

00:21:02.485 --> 00:21:04.725
<v Speaker 1>Yeah. The scope of Pulumi is a lot

00:21:04.725 --> 00:21:05.284
<v Speaker 1>bigger.

00:21:06.565 --> 00:21:07.285
<v Speaker 0>Yeah. That's true.

00:21:08.240 --> 00:21:10.800
<v Speaker 0>Alright. Let's take a look at this, this

00:21:10.800 --> 00:21:13.760
<v Speaker 0>add node selector. So this is a mutating

00:21:13.760 --> 00:21:14.720
<v Speaker 0>policy.

00:21:14.960 --> 00:21:17.040
<v Speaker 0>So this just means that

00:21:17.760 --> 00:21:19.600
<v Speaker 0>when we apply something to the cluster, we

00:21:19.600 --> 00:21:21.760
<v Speaker 0>can use jsPolicy to augment it or make

00:21:21.760 --> 00:21:23.520
<v Speaker 0>it conform to whatever policies

00:21:23.755 --> 00:21:24.715
<v Speaker 0>we have.

00:21:25.355 --> 00:21:27.835
<v Speaker 0>Is that I've never had to describe mutating

00:21:27.835 --> 00:21:29.674
<v Speaker 0>the mission controls before. Does that does that

00:21:29.674 --> 00:21:30.315
<v Speaker 0>make sense?

00:21:31.195 --> 00:21:33.195
<v Speaker 1>I think so. Yeah. So the same yeah.

00:21:33.195 --> 00:21:35.515
<v Speaker 2>Fixing resources, right, to make them match the

00:21:35.515 --> 00:21:36.875
<v Speaker 2>policy is is a good description.

00:21:37.890 --> 00:21:39.330
<v Speaker 1>Cool. Yeah. I think an, you know, an

00:21:39.330 --> 00:21:39.970
<v Speaker 1>example

00:21:40.290 --> 00:21:42.929
<v Speaker 1>that people would probably be familiar with is,

00:21:43.090 --> 00:21:44.850
<v Speaker 1>you know, making sure that things have labels

00:21:44.850 --> 00:21:45.970
<v Speaker 1>on them. You know?

00:21:47.970 --> 00:21:48.610
<v Speaker 0>Yeah.

00:21:49.490 --> 00:21:52.465
<v Speaker 0>Cool. Well, what I love right. First and

00:21:52.465 --> 00:21:53.825
<v Speaker 0>foremost, right, it's not even the fact that

00:21:53.825 --> 00:21:55.825
<v Speaker 0>this is a mutating policy, right, is that

00:21:55.825 --> 00:21:58.385
<v Speaker 0>I have comments that live within the multilayer

00:21:58.385 --> 00:22:00.625
<v Speaker 0>YAML that are gonna persist if I do

00:22:00.625 --> 00:22:03.025
<v Speaker 0>a get or describe on this YAML. Right?

00:22:03.025 --> 00:22:04.940
<v Speaker 0>They're not gonna disappear on me, which is

00:22:04.940 --> 00:22:07.180
<v Speaker 0>something that happens with the control plane. When

00:22:07.180 --> 00:22:09.100
<v Speaker 0>I apply YAML with comments, they're all stripped

00:22:09.100 --> 00:22:09.659
<v Speaker 0>out.

00:22:09.980 --> 00:22:11.820
<v Speaker 0>So I really like that

00:22:12.060 --> 00:22:13.580
<v Speaker 0>assuming it works the way I think it

00:22:13.580 --> 00:22:14.059
<v Speaker 0>does.

00:22:15.020 --> 00:22:17.740
<v Speaker 0>But what this admission controller is doing is

00:22:19.774 --> 00:22:22.095
<v Speaker 0>we've got create again. This time, we're only

00:22:22.095 --> 00:22:23.534
<v Speaker 0>mutating pods.

00:22:26.014 --> 00:22:27.054
<v Speaker 0>And

00:22:27.375 --> 00:22:29.134
<v Speaker 0>if it has

00:22:29.774 --> 00:22:30.815
<v Speaker 0>a label

00:22:30.894 --> 00:22:33.134
<v Speaker 0>called add node selector true,

00:22:36.350 --> 00:22:38.509
<v Speaker 0>it sets Yeah. It's like Okay. So it's

00:22:38.509 --> 00:22:40.429
<v Speaker 2>adding the the namespaces,

00:22:40.429 --> 00:22:41.709
<v Speaker 2>right, that have this

00:22:42.350 --> 00:22:42.989
<v Speaker 2>label.

00:22:43.309 --> 00:22:46.029
<v Speaker 2>So the namespace has that label then. But,

00:22:46.029 --> 00:22:47.549
<v Speaker 2>again, like, in this demo, we don't have

00:22:47.549 --> 00:22:49.710
<v Speaker 2>a real cluster, so it won't really check

00:22:49.710 --> 00:22:52.164
<v Speaker 2>the the namespace has that label.

00:22:53.125 --> 00:22:55.445
<v Speaker 0>Oh, right. Okay. So the namespace selector says,

00:22:55.445 --> 00:22:57.524
<v Speaker 0>if the namespace itself has a label called

00:22:57.524 --> 00:22:59.124
<v Speaker 0>node add selector true,

00:22:59.445 --> 00:23:01.284
<v Speaker 0>then what our policy is doing here is

00:23:01.284 --> 00:23:03.205
<v Speaker 0>saying, okay, add a node selector

00:23:03.205 --> 00:23:05.890
<v Speaker 0>through value test test two and then mutate

00:23:05.890 --> 00:23:07.730
<v Speaker 0>the object. So it's just adding a node

00:23:07.730 --> 00:23:08.929
<v Speaker 0>selector to the

00:23:09.330 --> 00:23:10.450
<v Speaker 0>YAML. So

00:23:14.130 --> 00:23:15.090
<v Speaker 0>there we go.

00:23:15.410 --> 00:23:17.090
<v Speaker 0>Adds these fields here.

00:23:18.615 --> 00:23:20.774
<v Speaker 0>I like it. Nice and simple.

00:23:21.575 --> 00:23:22.615
<v Speaker 0>Here's

00:23:22.615 --> 00:23:24.775
<v Speaker 0>a question then that comes into mind. So

00:23:24.775 --> 00:23:26.535
<v Speaker 0>far what we've seen in these examples is

00:23:26.535 --> 00:23:28.534
<v Speaker 0>that we use this JavaScript key.

00:23:28.935 --> 00:23:30.855
<v Speaker 0>Does that change the TypeScript for TypeScript or

00:23:30.855 --> 00:23:32.215
<v Speaker 0>is it just a generic key and I

00:23:32.215 --> 00:23:33.815
<v Speaker 0>could put TypeScript in here if I want?

00:23:33.830 --> 00:23:34.150
<v Speaker 0>Like

00:23:35.590 --> 00:23:37.270
<v Speaker 2>Yeah. That's kind of diving a little bit

00:23:37.270 --> 00:23:38.230
<v Speaker 2>more into,

00:23:38.550 --> 00:23:40.870
<v Speaker 2>you know, the architecture of JS policy.

00:23:41.190 --> 00:23:41.990
<v Speaker 2>Essentially,

00:23:41.990 --> 00:23:43.990
<v Speaker 2>there are there are three different

00:23:44.230 --> 00:23:45.269
<v Speaker 2>CRDs

00:23:45.590 --> 00:23:46.710
<v Speaker 2>that we're introducing.

00:23:47.804 --> 00:23:49.565
<v Speaker 2>There's the jsPolicyCRD

00:23:49.565 --> 00:23:50.764
<v Speaker 2>that you're seeing here,

00:23:51.485 --> 00:23:55.004
<v Speaker 2>and then there's the jsPolicyBundleCRD.

00:23:55.644 --> 00:23:57.404
<v Speaker 2>You know, folks that may be familiar with

00:23:57.404 --> 00:24:00.044
<v Speaker 2>JavaScript know about these, like, Webpack bundles and

00:24:00.044 --> 00:24:02.764
<v Speaker 2>things like that. It's essentially compressing JavaScript to,

00:24:03.180 --> 00:24:06.220
<v Speaker 2>you know, embedding all the dependencies and making

00:24:06.220 --> 00:24:08.940
<v Speaker 2>it highly efficient, essentially optimizing the code.

00:24:09.340 --> 00:24:11.260
<v Speaker 2>And the same thing happens when you

00:24:11.980 --> 00:24:14.380
<v Speaker 2>take TypeScript and you compile it down to,

00:24:14.380 --> 00:24:17.100
<v Speaker 2>like, vanilla JavaScript. Right? Because that's essentially what's

00:24:17.100 --> 00:24:18.460
<v Speaker 2>running in your browser later on.

00:24:20.095 --> 00:24:22.815
<v Speaker 2>And, you know, you there's two ways of

00:24:22.815 --> 00:24:26.015
<v Speaker 2>creating a policy. You can either embed the

00:24:26.015 --> 00:24:28.494
<v Speaker 2>JavaScript logic like it is here

00:24:28.655 --> 00:24:30.895
<v Speaker 2>and write it in line in the, you

00:24:30.895 --> 00:24:32.174
<v Speaker 2>know, spec JavaScript.

00:24:33.380 --> 00:24:36.340
<v Speaker 2>But you can also create that JS policy

00:24:36.340 --> 00:24:37.220
<v Speaker 2>bundle

00:24:37.860 --> 00:24:41.380
<v Speaker 2>and leave this spec JavaScript out, and then

00:24:41.380 --> 00:24:43.620
<v Speaker 2>JS policy would take that bundle.

00:24:44.020 --> 00:24:46.180
<v Speaker 2>If you do the inline route like we

00:24:46.180 --> 00:24:48.955
<v Speaker 2>do here, what actually happens behind the scenes

00:24:48.955 --> 00:24:51.595
<v Speaker 2>is when you're creating a JS policy object

00:24:51.595 --> 00:24:52.715
<v Speaker 2>like shown here

00:24:53.115 --> 00:24:57.034
<v Speaker 2>and the controller sees that spec JavaScript object,

00:24:57.115 --> 00:24:58.795
<v Speaker 2>it actually runs Webpack

00:24:59.000 --> 00:25:01.160
<v Speaker 2>and creates that bundle for you.

00:25:01.560 --> 00:25:03.640
<v Speaker 2>So in the end, what what the you

00:25:03.640 --> 00:25:06.600
<v Speaker 2>know, we're using v eight. That's like Google's

00:25:07.160 --> 00:25:08.120
<v Speaker 2>JavaScript

00:25:08.120 --> 00:25:10.600
<v Speaker 2>execution engine that they run-in Chrome, etcetera,

00:25:11.425 --> 00:25:13.265
<v Speaker 2>And we actually let it run only the

00:25:13.265 --> 00:25:15.424
<v Speaker 2>Javis the JS policy bundle.

00:25:16.545 --> 00:25:18.705
<v Speaker 2>But how that's created is essentially up to

00:25:18.705 --> 00:25:20.785
<v Speaker 2>the user. It can be, you know, created

00:25:20.785 --> 00:25:23.745
<v Speaker 2>out of your type TypeScript project with a

00:25:23.745 --> 00:25:24.385
<v Speaker 2>custom,

00:25:24.545 --> 00:25:26.730
<v Speaker 2>you know, CICD pipeline or whatever that creates

00:25:26.730 --> 00:25:29.209
<v Speaker 2>a bundle object and then the JS policy,

00:25:29.529 --> 00:25:31.690
<v Speaker 2>or you do it in line and then,

00:25:31.690 --> 00:25:32.249
<v Speaker 2>essentially,

00:25:32.730 --> 00:25:35.210
<v Speaker 2>the controller would would do that translation for

00:25:35.210 --> 00:25:35.690
<v Speaker 2>you.

00:25:36.169 --> 00:25:37.289
<v Speaker 0>Alright. Very cool.

00:25:39.455 --> 00:25:40.815
<v Speaker 0>Okay. My next question.

00:25:41.535 --> 00:25:43.615
<v Speaker 0>Does it support Wasm bundles?

00:25:46.175 --> 00:25:48.655
<v Speaker 2>No. Not at this point. It's actually a

00:25:48.655 --> 00:25:50.095
<v Speaker 2>pretty pretty interesting

00:25:50.335 --> 00:25:52.735
<v Speaker 2>route to go. I think, you know, Cube

00:25:52.735 --> 00:25:55.590
<v Speaker 2>Warden from the Rancher folks is pretty much

00:25:55.590 --> 00:25:57.669
<v Speaker 2>focused on that. It's kinda funny. We were

00:25:57.990 --> 00:25:59.910
<v Speaker 2>pretty much working at the same time on

00:25:59.910 --> 00:26:02.710
<v Speaker 2>jsPolicy when they were starting to work on.

00:26:03.590 --> 00:26:05.750
<v Speaker 2>And we had a little chat before KubeCon

00:26:05.750 --> 00:26:08.145
<v Speaker 2>Europe when they announced it, And it was

00:26:08.145 --> 00:26:10.465
<v Speaker 2>super interesting for you know, to hear

00:26:11.265 --> 00:26:13.105
<v Speaker 2>that they essentially had the same idea at

00:26:13.105 --> 00:26:15.185
<v Speaker 2>the same time but went a different route

00:26:15.185 --> 00:26:16.945
<v Speaker 2>because they're like they went the WASM route,

00:26:16.945 --> 00:26:18.465
<v Speaker 2>and we went, like, the v eight, you

00:26:18.465 --> 00:26:18.945
<v Speaker 2>know,

00:26:19.505 --> 00:26:20.785
<v Speaker 2>plain JavaScript route.

00:26:22.370 --> 00:26:24.850
<v Speaker 0>Yeah. Cool. Yeah. I

00:26:24.850 --> 00:26:26.530
<v Speaker 0>think it just shows that there is a

00:26:26.530 --> 00:26:28.370
<v Speaker 0>demand and a need that people want to

00:26:28.370 --> 00:26:30.130
<v Speaker 0>be able to write their policies and languages

00:26:30.130 --> 00:26:32.210
<v Speaker 0>that they understand and have the ability to

00:26:32.210 --> 00:26:34.130
<v Speaker 0>do conditionals and loops and all these other

00:26:34.130 --> 00:26:35.890
<v Speaker 0>things that we need. So,

00:26:36.895 --> 00:26:38.014
<v Speaker 0>yeah. Definitely.

00:26:38.335 --> 00:26:40.254
<v Speaker 0>Okay. You mentioned the architecture.

00:26:40.895 --> 00:26:43.054
<v Speaker 0>We do have the architecture on the docs

00:26:43.054 --> 00:26:44.254
<v Speaker 0>page if I remember.

00:26:46.335 --> 00:26:47.374
<v Speaker 0>Is this the one?

00:26:48.575 --> 00:26:50.174
<v Speaker 2>Yeah. Exactly. Yeah. Yeah. Okay.

00:26:51.660 --> 00:26:53.980
<v Speaker 2>Yeah. You can kinda see with these

00:26:54.380 --> 00:26:56.059
<v Speaker 2>little red bubbles

00:26:56.140 --> 00:26:57.660
<v Speaker 2>of what the execution

00:26:57.660 --> 00:26:59.179
<v Speaker 2>order essentially is.

00:26:59.980 --> 00:27:02.540
<v Speaker 2>You know, when the when the kubectl request

00:27:02.620 --> 00:27:05.100
<v Speaker 2>comes in at the Kubernetes API server,

00:27:06.235 --> 00:27:07.914
<v Speaker 2>It's essentially calling

00:27:08.554 --> 00:27:11.274
<v Speaker 2>the webhook manager inside JS policy,

00:27:11.674 --> 00:27:13.674
<v Speaker 2>and that webhook manager really looks at the

00:27:13.674 --> 00:27:15.995
<v Speaker 2>JS policy objects, which you see here in

00:27:15.995 --> 00:27:17.595
<v Speaker 2>green. The the three green

00:27:18.480 --> 00:27:21.040
<v Speaker 2>areas are essentially the CRDs that we're introducing,

00:27:21.040 --> 00:27:22.159
<v Speaker 2>the jsPolicy,

00:27:22.240 --> 00:27:23.679
<v Speaker 2>jsPolicyBundle,

00:27:23.920 --> 00:27:26.000
<v Speaker 2>and then jsPolicyViolations,

00:27:26.240 --> 00:27:28.720
<v Speaker 2>which essentially is, you know, more for reporting

00:27:28.720 --> 00:27:30.640
<v Speaker 2>purpose to see, you know, what went wrong

00:27:30.640 --> 00:27:32.800
<v Speaker 2>inside the cluster, which policies

00:27:33.065 --> 00:27:36.025
<v Speaker 2>were actually hit and denied and requests and

00:27:36.025 --> 00:27:36.904
<v Speaker 2>things like that.

00:27:37.865 --> 00:27:39.465
<v Speaker 2>And then jsPolicy,

00:27:40.424 --> 00:27:42.664
<v Speaker 2>those objects essentially define,

00:27:43.465 --> 00:27:45.785
<v Speaker 2>you know, which objects to target. So they

00:27:45.785 --> 00:27:48.950
<v Speaker 2>tell the webhook manager, hey. Whenever we're creating,

00:27:48.950 --> 00:27:51.270
<v Speaker 2>as we saw earlier, pods or and, you

00:27:51.270 --> 00:27:51.670
<v Speaker 2>know,

00:27:52.310 --> 00:27:53.590
<v Speaker 2>things with certain

00:27:53.990 --> 00:27:55.430
<v Speaker 2>labels that match,

00:27:55.670 --> 00:27:56.310
<v Speaker 2>you know,

00:27:57.190 --> 00:27:59.030
<v Speaker 2>those kind of things are defined in that

00:27:59.030 --> 00:28:02.790
<v Speaker 2>jsPolicy resource. Also, operations that create, delete, you

00:28:02.790 --> 00:28:02.870
<v Speaker 2>know,

00:28:03.674 --> 00:28:06.315
<v Speaker 2>whatever is sent to the Kubernetes API server.

00:28:06.634 --> 00:28:09.434
<v Speaker 2>And then that webhook manager essentially would call

00:28:09.595 --> 00:28:11.034
<v Speaker 2>mutating, validating

00:28:11.274 --> 00:28:13.434
<v Speaker 2>webhooks as part of the regular, you know,

00:28:13.434 --> 00:28:14.315
<v Speaker 2>Kubernetes,

00:28:15.195 --> 00:28:17.755
<v Speaker 2>you know, API server request workflow.

00:28:19.260 --> 00:28:21.500
<v Speaker 2>And it's essentially, you know, mutating

00:28:22.060 --> 00:28:23.660
<v Speaker 2>webhooks executed

00:28:23.660 --> 00:28:24.860
<v Speaker 2>sequentially

00:28:24.860 --> 00:28:27.260
<v Speaker 2>because otherwise, you kind of have, like, you

00:28:27.260 --> 00:28:28.780
<v Speaker 2>know, who wins both,

00:28:28.780 --> 00:28:31.180
<v Speaker 2>right, the object. Right? Both mutated.

00:28:32.005 --> 00:28:33.284
<v Speaker 2>So they executed

00:28:33.365 --> 00:28:35.764
<v Speaker 2>sequentially just like Kubernetes does it.

00:28:36.485 --> 00:28:38.884
<v Speaker 2>And then validating is executed

00:28:38.885 --> 00:28:41.445
<v Speaker 2>in parallel because, you know, if one of

00:28:41.445 --> 00:28:44.645
<v Speaker 2>them tells you deny, it's automatically denied. So

00:28:44.860 --> 00:28:47.100
<v Speaker 2>we can speed things up by running them

00:28:47.100 --> 00:28:50.380
<v Speaker 2>in parallel. Kubernetes does these web calls under

00:28:50.380 --> 00:28:51.499
<v Speaker 2>the hood, essentially.

00:28:51.899 --> 00:28:54.220
<v Speaker 2>And then objects are persisted in c r

00:28:54.220 --> 00:28:55.980
<v Speaker 2>d in in etcd,

00:28:55.980 --> 00:28:58.445
<v Speaker 2>which is step number three here. And then

00:28:58.445 --> 00:29:01.565
<v Speaker 2>there's the part that typically admission control frameworks

00:29:01.565 --> 00:29:03.645
<v Speaker 2>don't address because it's outside of the scope

00:29:03.645 --> 00:29:05.725
<v Speaker 2>of regular admission control workflow,

00:29:06.125 --> 00:29:09.005
<v Speaker 2>and that's these events that are created from

00:29:09.165 --> 00:29:10.365
<v Speaker 2>the API server

00:29:10.600 --> 00:29:12.360
<v Speaker 2>when new resources,

00:29:12.360 --> 00:29:14.519
<v Speaker 2>you know, are added to etcd or altered

00:29:14.519 --> 00:29:17.159
<v Speaker 2>or anything happens inside the Kubernetes cluster.

00:29:17.799 --> 00:29:20.759
<v Speaker 2>And that's essentially when these controller policies would

00:29:20.759 --> 00:29:21.559
<v Speaker 2>be executed.

00:29:23.225 --> 00:29:24.345
<v Speaker 0>Okay. So

00:29:24.585 --> 00:29:26.105
<v Speaker 0>we'll we'll get hands on in just a

00:29:26.105 --> 00:29:27.465
<v Speaker 0>second, but I've got one question because I

00:29:27.465 --> 00:29:28.905
<v Speaker 0>wanna make sure I understood this little bit

00:29:28.905 --> 00:29:29.545
<v Speaker 0>correctly.

00:29:29.785 --> 00:29:32.745
<v Speaker 0>So jsPolicy when running my cluster is

00:29:33.225 --> 00:29:36.140
<v Speaker 0>registered as a dynamic admission controller like these

00:29:36.140 --> 00:29:37.739
<v Speaker 0>other tools, and that handles

00:29:37.820 --> 00:29:39.899
<v Speaker 0>the mutating and validating aspect.

00:29:40.059 --> 00:29:41.820
<v Speaker 0>But you're actually setting is it just like

00:29:41.820 --> 00:29:44.220
<v Speaker 0>a a global watch on the Kubernetes API

00:29:44.220 --> 00:29:46.220
<v Speaker 0>server that says give me all changes and

00:29:46.220 --> 00:29:48.460
<v Speaker 0>it goes through the controller policies?

00:29:50.175 --> 00:29:52.575
<v Speaker 2>I think we're watching on events here.

00:29:52.975 --> 00:29:54.415
<v Speaker 0>Okay. So it's just the Since

00:29:55.855 --> 00:29:56.495
<v Speaker 2>yeah.

00:29:57.455 --> 00:30:00.015
<v Speaker 0>Alright. Okay. Let's is there anything else in

00:30:00.015 --> 00:30:01.615
<v Speaker 0>the documentation you would like to go over

00:30:01.615 --> 00:30:03.775
<v Speaker 0>before we deploy this to our cluster?

00:30:06.010 --> 00:30:08.250
<v Speaker 2>No. Let's get some hands on experience with

00:30:08.250 --> 00:30:10.010
<v Speaker 2>it. Sounds good. Awesome.

00:30:10.730 --> 00:30:13.130
<v Speaker 0>So should I do quick start or the

00:30:13.130 --> 00:30:15.289
<v Speaker 0>fill guide install? You got a preference?

00:30:16.410 --> 00:30:18.170
<v Speaker 2>No. Let's do quick start. That that's probably

00:30:18.170 --> 00:30:19.530
<v Speaker 2>the easiest one to get started with.

00:30:21.284 --> 00:30:23.524
<v Speaker 0>Okay. So it wants me to use helm

00:30:23.605 --> 00:30:26.085
<v Speaker 0>to deploy to my cluster.

00:30:27.605 --> 00:30:29.684
<v Speaker 0>I think I have helm.

00:30:32.005 --> 00:30:32.804
<v Speaker 0>I do. Okay.

00:30:33.630 --> 00:30:36.190
<v Speaker 0>So we just do a standard install, create

00:30:36.190 --> 00:30:37.230
<v Speaker 0>namespace,

00:30:37.230 --> 00:30:38.270
<v Speaker 0>off we go.

00:30:41.390 --> 00:30:42.750
<v Speaker 0>If they want it long.

00:30:46.885 --> 00:30:47.684
<v Speaker 0>Done.

00:30:48.645 --> 00:30:50.804
<v Speaker 0>So let's see what we've got installed on

00:30:50.804 --> 00:30:51.524
<v Speaker 0>our

00:30:51.605 --> 00:30:52.565
<v Speaker 0>cluster.

00:30:52.725 --> 00:30:55.605
<v Speaker 0>And I'm assuming I created just by that

00:30:55.605 --> 00:30:57.924
<v Speaker 0>create namespace that we have a jsPolicy

00:30:57.924 --> 00:30:59.044
<v Speaker 0>namespace. Okay.

00:31:00.325 --> 00:31:01.605
<v Speaker 0>Let's take a look.

00:31:05.899 --> 00:31:06.700
<v Speaker 0>Pods.

00:31:07.419 --> 00:31:09.100
<v Speaker 0>So it's just a single pod. This is

00:31:09.100 --> 00:31:12.460
<v Speaker 0>the one that's running the v runtime

00:31:12.460 --> 00:31:14.940
<v Speaker 0>and the I'm assuming, like, an HTTP server

00:31:14.940 --> 00:31:16.380
<v Speaker 0>to receive the

00:31:16.635 --> 00:31:18.875
<v Speaker 0>the the Webex from the API server.

00:31:20.395 --> 00:31:22.715
<v Speaker 2>Right. You can also run this in essentially

00:31:22.715 --> 00:31:25.275
<v Speaker 2>more high available mode. Right? Essentially, spin up

00:31:25.275 --> 00:31:27.195
<v Speaker 2>more replicas and things like that. That is

00:31:27.195 --> 00:31:27.835
<v Speaker 2>also possible.

00:31:28.810 --> 00:31:30.010
<v Speaker 0>Alright. Nice.

00:31:30.890 --> 00:31:31.770
<v Speaker 0>Okay.

00:31:31.770 --> 00:31:32.490
<v Speaker 0>So

00:31:33.930 --> 00:31:34.650
<v Speaker 0>validating.

00:31:38.810 --> 00:31:40.890
<v Speaker 0>We have a jsPolicy validating when I put

00:31:40.890 --> 00:31:43.210
<v Speaker 0>good mesh controller, and I'm assuming the exact

00:31:43.210 --> 00:31:45.225
<v Speaker 0>same on the mutating side.

00:31:47.225 --> 00:31:47.945
<v Speaker 0>No.

00:31:49.625 --> 00:31:50.424
<v Speaker 0>Interesting.

00:31:53.865 --> 00:31:56.265
<v Speaker 0>So is that what we create a policy

00:31:56.265 --> 00:31:58.425
<v Speaker 2>which is mutating, you may see a change

00:31:58.425 --> 00:31:58.665
<v Speaker 2>there.

00:32:00.419 --> 00:32:02.659
<v Speaker 0>Alright. Okay. So it's only add to it.

00:32:02.659 --> 00:32:05.139
<v Speaker 0>The mutating admission controller is probably only added

00:32:05.139 --> 00:32:07.220
<v Speaker 0>when it's required. Okay. I'll trust you for

00:32:07.220 --> 00:32:09.940
<v Speaker 0>now. So let's create our first policy. So

00:32:09.940 --> 00:32:11.460
<v Speaker 0>this is just the exact same one that

00:32:11.460 --> 00:32:13.059
<v Speaker 0>we kind of had in

00:32:15.225 --> 00:32:16.585
<v Speaker 0>the playground

00:32:16.665 --> 00:32:17.305
<v Speaker 0>area.

00:32:18.105 --> 00:32:20.585
<v Speaker 0>Let's just create this. So we'll call it

00:32:20.585 --> 00:32:21.625
<v Speaker 0>deny

00:32:21.865 --> 00:32:22.905
<v Speaker 0>default.

00:32:22.905 --> 00:32:24.105
<v Speaker 0>I can't type.

00:32:24.745 --> 00:32:26.585
<v Speaker 0>What really can't type? I have to look

00:32:26.585 --> 00:32:27.705
<v Speaker 0>at the keyboard number from there.

00:32:31.980 --> 00:32:32.779
<v Speaker 0>Done.

00:32:34.620 --> 00:32:36.220
<v Speaker 0>My computer's

00:32:36.539 --> 00:32:38.220
<v Speaker 0>struggling a little bit with me, but we'll

00:32:38.220 --> 00:32:38.780
<v Speaker 0>get through it.

00:32:41.924 --> 00:32:44.164
<v Speaker 0>So would I this is the

00:32:45.284 --> 00:32:47.125
<v Speaker 0>yeah. This I I kinda caught this during

00:32:47.125 --> 00:32:48.565
<v Speaker 0>the playground, and I wasn't sure where to

00:32:48.565 --> 00:32:50.565
<v Speaker 0>ask a question or not. But this is

00:32:50.565 --> 00:32:51.764
<v Speaker 0>a namespaced,

00:32:52.404 --> 00:32:53.365
<v Speaker 0>but it's actually

00:32:54.929 --> 00:32:56.450
<v Speaker 0>checking the namespace.

00:32:56.450 --> 00:32:58.769
<v Speaker 0>So if I apply this to

00:32:59.889 --> 00:33:02.129
<v Speaker 0>the jsPolicy namespace,

00:33:02.529 --> 00:33:04.610
<v Speaker 0>I mean, in theory, no object should ever

00:33:04.610 --> 00:33:06.929
<v Speaker 0>come in where the request namespace is default.

00:33:06.929 --> 00:33:07.169
<v Speaker 0>Right?

00:33:08.595 --> 00:33:10.274
<v Speaker 0>Like, should this That's correct.

00:33:10.595 --> 00:33:12.355
<v Speaker 0>Yep. So how would I make this just

00:33:12.355 --> 00:33:14.514
<v Speaker 0>a cluster wide one instead of a namespaced?

00:33:16.355 --> 00:33:19.075
<v Speaker 2>No. No. I mean so this essentially means

00:33:19.395 --> 00:33:21.520
<v Speaker 2>when you're creating namespaced

00:33:21.520 --> 00:33:22.320
<v Speaker 2>resources

00:33:22.320 --> 00:33:25.520
<v Speaker 2>regardless of which namespace. So the jsPolicy object

00:33:25.520 --> 00:33:28.000
<v Speaker 2>is not namespaced. Right? It's a cluster wide

00:33:28.000 --> 00:33:28.720
<v Speaker 2>resource.

00:33:29.600 --> 00:33:32.720
<v Speaker 0>Ah, okay. I completely missed that. Right. Gotcha.

00:33:32.720 --> 00:33:35.155
<v Speaker 0>That makes more sense. So let's apply it

00:33:35.155 --> 00:33:36.915
<v Speaker 0>then. But it doesn't matter where the namespace

00:33:36.915 --> 00:33:38.275
<v Speaker 0>is. I should now just be able to

00:33:38.275 --> 00:33:39.635
<v Speaker 0>run get JS

00:33:41.315 --> 00:33:42.195
<v Speaker 0>policy.

00:33:43.715 --> 00:33:45.155
<v Speaker 0>I'm wondering if the Pluto is gonna be

00:33:45.155 --> 00:33:47.370
<v Speaker 0>policies like that or like this. There we

00:33:47.370 --> 00:33:47.850
<v Speaker 0>go.

00:33:48.170 --> 00:33:51.450
<v Speaker 2>Yeah. You can also now run jsPolicyBundle

00:33:51.450 --> 00:33:53.850
<v Speaker 2>to actually see, you know, that that inline

00:33:53.850 --> 00:33:57.450
<v Speaker 2>JavaScript has been converted to that pep bundle

00:33:57.450 --> 00:33:58.090
<v Speaker 2>in the end.

00:33:59.825 --> 00:34:00.945
<v Speaker 0>Yeah.

00:34:01.105 --> 00:34:02.625
<v Speaker 0>Let me just learn how to type again,

00:34:02.625 --> 00:34:04.705
<v Speaker 0>though. There we go. Okay.

00:34:05.585 --> 00:34:07.985
<v Speaker 0>When we apply the jsPolicy,

00:34:08.545 --> 00:34:10.784
<v Speaker 0>it's being compelled to an artifact, and that's

00:34:10.784 --> 00:34:12.065
<v Speaker 0>what we have in the bundle. So if

00:34:12.065 --> 00:34:12.945
<v Speaker 0>I run

00:34:14.130 --> 00:34:15.650
<v Speaker 0>dash o yaml

00:34:16.929 --> 00:34:18.290
<v Speaker 0>on this.

00:34:22.369 --> 00:34:24.130
<v Speaker 0>I'm not sure what I did there. Oh,

00:34:24.130 --> 00:34:24.609
<v Speaker 0>because

00:34:25.170 --> 00:34:26.690
<v Speaker 0>I need that first. Yeah.

00:34:29.705 --> 00:34:31.305
<v Speaker 0>And this is the bundle, which is just

00:34:31.305 --> 00:34:33.145
<v Speaker 0>base 64 encoded, I guess.

00:34:34.745 --> 00:34:36.025
<v Speaker 2>That's correct. Yeah.

00:34:36.665 --> 00:34:38.185
<v Speaker 0>I mean, I can't help myself, but take

00:34:38.185 --> 00:34:39.385
<v Speaker 0>a look now. So

00:34:42.505 --> 00:34:43.785
<v Speaker 0>oh, it's binary encoded.

00:34:45.190 --> 00:34:47.910
<v Speaker 0>Well, it's not just the webpack output as,

00:34:47.910 --> 00:34:49.590
<v Speaker 0>like, minified JavaScript.

00:34:49.590 --> 00:34:50.390
<v Speaker 0>It's actually

00:34:50.630 --> 00:34:52.950
<v Speaker 0>stored as a a binary file. Okay.

00:34:54.469 --> 00:34:54.710
<v Speaker 0>Cool.

00:34:56.235 --> 00:34:57.435
<v Speaker 0>So I guess

00:34:57.595 --> 00:35:00.075
<v Speaker 0>to confirm that our policy here is working,

00:35:00.075 --> 00:35:01.355
<v Speaker 0>in fact, I'm sure I should just stick

00:35:01.355 --> 00:35:03.115
<v Speaker 0>with those guys instead of making this option

00:35:03.115 --> 00:35:03.755
<v Speaker 0>there.

00:35:04.475 --> 00:35:06.155
<v Speaker 0>So we have applied our policy

00:35:07.595 --> 00:35:09.115
<v Speaker 0>and then we can see an action by

00:35:09.115 --> 00:35:11.435
<v Speaker 0>trying to create some workload and the default

00:35:11.435 --> 00:35:12.075
<v Speaker 0>namespace.

00:35:12.530 --> 00:35:15.089
<v Speaker 0>So here, we're just gonna say kubectl create

00:35:15.089 --> 00:35:16.609
<v Speaker 0>deployment NGINX

00:35:16.609 --> 00:35:18.130
<v Speaker 0>where the image is this.

00:35:19.250 --> 00:35:22.130
<v Speaker 0>And our admission controller denies it saying we

00:35:22.130 --> 00:35:24.770
<v Speaker 0>are not allowed. Perfect. Exactly what we wanted.

00:35:28.755 --> 00:35:29.555
<v Speaker 0>Okay.

00:35:29.715 --> 00:35:30.355
<v Speaker 0>So

00:35:31.715 --> 00:35:33.475
<v Speaker 0>should we start I mean, do you wanna

00:35:33.475 --> 00:35:35.715
<v Speaker 0>dive straight into mutation controllers,

00:35:36.435 --> 00:35:37.555
<v Speaker 0>or should I go take a look at

00:35:37.555 --> 00:35:39.395
<v Speaker 0>some of the basics on the applied policies?

00:35:39.555 --> 00:35:40.595
<v Speaker 0>What interests you both?

00:35:42.180 --> 00:35:44.740
<v Speaker 2>Yeah. I think the the the coolest part

00:35:44.740 --> 00:35:46.420
<v Speaker 2>is actually

00:35:46.420 --> 00:35:48.340
<v Speaker 2>taking a look at the examples.

00:35:48.820 --> 00:35:51.380
<v Speaker 2>So if you hit that GitHub button,

00:35:51.700 --> 00:35:54.515
<v Speaker 2>that icon on the right upper corner Mhmm.

00:35:54.835 --> 00:35:56.755
<v Speaker 2>In the in the project itself,

00:35:56.915 --> 00:35:59.155
<v Speaker 2>there is a lot of, you know, example

00:35:59.155 --> 00:36:00.035
<v Speaker 2>policies

00:36:01.155 --> 00:36:03.395
<v Speaker 2>that really help to to get started with

00:36:03.395 --> 00:36:03.955
<v Speaker 2>things.

00:36:04.595 --> 00:36:06.595
<v Speaker 2>You can either filter by feature or by

00:36:06.595 --> 00:36:07.155
<v Speaker 2>use case.

00:36:07.910 --> 00:36:09.990
<v Speaker 2>You can also dive into, you know, more

00:36:09.990 --> 00:36:11.510
<v Speaker 2>TypeScript based stuff,

00:36:11.670 --> 00:36:13.190
<v Speaker 2>more advanced use cases.

00:36:13.750 --> 00:36:15.590
<v Speaker 0>Okay. Let's take a look at

00:36:15.830 --> 00:36:16.550
<v Speaker 0>feature

00:36:16.630 --> 00:36:17.510
<v Speaker 0>first.

00:36:18.310 --> 00:36:19.350
<v Speaker 0>And SSJS

00:36:19.350 --> 00:36:21.750
<v Speaker 0>policy features. Is that what that means? That's

00:36:21.750 --> 00:36:23.965
<v Speaker 0>right. Yeah. Correct. Yep.

00:36:25.085 --> 00:36:26.445
<v Speaker 0>What's your favorite, Rich?

00:36:30.205 --> 00:36:31.805
<v Speaker 1>Probably the mutating one.

00:36:33.244 --> 00:36:34.205
<v Speaker 0>Alright.

00:36:35.645 --> 00:36:36.925
<v Speaker 0>I'm just gonna copy this.

00:36:50.424 --> 00:36:52.744
<v Speaker 0>Computer is about twenty seconds behind me, but

00:36:52.744 --> 00:36:54.185
<v Speaker 0>I'm sure it's gonna catch up.

00:36:58.345 --> 00:37:00.665
<v Speaker 0>There we go. Okay. So

00:37:00.904 --> 00:37:02.265
<v Speaker 0>let's see if I can work out what

00:37:02.265 --> 00:37:04.424
<v Speaker 0>this does without having to to ask for

00:37:04.424 --> 00:37:06.110
<v Speaker 0>help. In fact, I'm I'm gonna delete the

00:37:06.110 --> 00:37:07.550
<v Speaker 0>comment before we do it.

00:37:09.070 --> 00:37:09.790
<v Speaker 0>So

00:37:10.190 --> 00:37:12.270
<v Speaker 0>we have a mutating policy

00:37:12.910 --> 00:37:15.550
<v Speaker 0>that looks at the create and update operations

00:37:15.550 --> 00:37:16.510
<v Speaker 0>of pods.

00:37:18.285 --> 00:37:19.565
<v Speaker 0>It's checking

00:37:19.885 --> 00:37:21.405
<v Speaker 0>our annotations.

00:37:23.325 --> 00:37:25.244
<v Speaker 0>Okay. So we've got an optional, so there

00:37:25.244 --> 00:37:27.325
<v Speaker 0>may not be any annotations and if there's

00:37:27.325 --> 00:37:28.525
<v Speaker 0>a required annotation.

00:37:30.910 --> 00:37:32.110
<v Speaker 0>Now I'm confused.

00:37:35.230 --> 00:37:37.230
<v Speaker 0>Okay. So this isn't alright. Okay. I was

00:37:37.230 --> 00:37:39.390
<v Speaker 0>overthinking this. This could be anything. I could

00:37:39.390 --> 00:37:41.310
<v Speaker 0>say that I have a requirement that all

00:37:41.310 --> 00:37:44.110
<v Speaker 0>pods should have a Rawkode annotation

00:37:44.495 --> 00:37:45.615
<v Speaker 0>that says

00:37:46.175 --> 00:37:47.055
<v Speaker 0>live.

00:37:47.695 --> 00:37:49.695
<v Speaker 0>And if this doesn't exist, this is just

00:37:49.695 --> 00:37:51.135
<v Speaker 0>adding that annotation.

00:37:53.135 --> 00:37:55.855
<v Speaker 0>Is that correct? Yeah. Right. Okay. Yeah. In

00:37:55.855 --> 00:37:57.295
<v Speaker 0>my head, for some weird reason, I was

00:37:57.295 --> 00:37:59.055
<v Speaker 0>like, we had some configuration that said all

00:37:59.055 --> 00:38:01.510
<v Speaker 0>pods must have this required annotation label that

00:38:01.510 --> 00:38:03.430
<v Speaker 0>would add other labels and very

00:38:03.430 --> 00:38:05.510
<v Speaker 0>much overcomplicating that for no real rhyme or

00:38:05.510 --> 00:38:06.470
<v Speaker 0>reason. So

00:38:07.829 --> 00:38:08.869
<v Speaker 0>so now

00:38:09.269 --> 00:38:11.430
<v Speaker 0>let's apply this to our cluster first.

00:38:19.075 --> 00:38:22.515
<v Speaker 0>And if we try this NGINX deployment again,

00:38:22.755 --> 00:38:24.115
<v Speaker 0>but if I just run this in the

00:38:24.115 --> 00:38:25.475
<v Speaker 0>jsPolicy namespace,

00:38:25.800 --> 00:38:27.480
<v Speaker 0>then what we should see is our nginx

00:38:27.480 --> 00:38:30.280
<v Speaker 0>pods all have the Rawkode live annotation,

00:38:30.280 --> 00:38:32.440
<v Speaker 0>if I've understood this correctly.

00:38:33.240 --> 00:38:35.240
<v Speaker 0>So I'm going to describe

00:38:35.400 --> 00:38:36.360
<v Speaker 0>pod

00:38:37.240 --> 00:38:38.280
<v Speaker 0>jsPolicy.

00:38:41.355 --> 00:38:43.035
<v Speaker 0>And if we scroll up

00:38:44.315 --> 00:38:47.195
<v Speaker 0>nice. We mutated that and added our Rawkode

00:38:47.195 --> 00:38:48.315
<v Speaker 0>live annotation.

00:38:50.635 --> 00:38:53.195
<v Speaker 0>It's nice. It it's it's not difficult.

00:38:53.195 --> 00:38:54.235
<v Speaker 0>It's just

00:38:55.230 --> 00:38:56.670
<v Speaker 0>it's just JavaScript.

00:38:57.230 --> 00:38:59.950
<v Speaker 1>It would have been probably even less difficult

00:38:59.950 --> 00:39:02.190
<v Speaker 1>if you hadn't deleted the comment too.

00:39:02.430 --> 00:39:03.310
<v Speaker 0>Well, I mean, I've

00:39:04.270 --> 00:39:06.030
<v Speaker 0>I'd I'd I just wanted to see if

00:39:06.030 --> 00:39:07.550
<v Speaker 0>I could work it out with I know.

00:39:07.550 --> 00:39:07.950
<v Speaker 0>I know.

00:39:08.755 --> 00:39:09.955
<v Speaker 1>I'm just saying.

00:39:10.195 --> 00:39:12.115
<v Speaker 0>Alright. I'll read the comment. I mean, someone's

00:39:12.115 --> 00:39:13.555
<v Speaker 0>spent a lot of time and effort to

00:39:13.555 --> 00:39:16.195
<v Speaker 0>actually read and write these comments, so it

00:39:16.195 --> 00:39:17.395
<v Speaker 0>would be it would be rude of me

00:39:17.395 --> 00:39:19.075
<v Speaker 0>just to delete it. So

00:39:19.955 --> 00:39:22.115
<v Speaker 0>there's some really important information here that I

00:39:22.115 --> 00:39:23.400
<v Speaker 0>can see already on scanner. So we have

00:39:23.400 --> 00:39:26.280
<v Speaker 0>the ability to, like, exit early with a

00:39:26.280 --> 00:39:27.880
<v Speaker 0>deny or a low statement.

00:39:28.040 --> 00:39:29.800
<v Speaker 0>What happens if I met

00:39:29.800 --> 00:39:31.960
<v Speaker 0>deny and allow and just let the function

00:39:32.040 --> 00:39:32.920
<v Speaker 0>return?

00:39:33.720 --> 00:39:34.920
<v Speaker 0>Is there a default action?

00:39:36.485 --> 00:39:38.725
<v Speaker 2>No. It's essentially that webhook would not do

00:39:38.725 --> 00:39:41.365
<v Speaker 2>anything as part of your, you know, API

00:39:41.365 --> 00:39:42.485
<v Speaker 2>server request.

00:39:43.925 --> 00:39:46.325
<v Speaker 0>Okay. And then we can call mutate if

00:39:46.325 --> 00:39:47.765
<v Speaker 0>we make any modifications.

00:39:48.085 --> 00:39:50.325
<v Speaker 0>I mean, the API is is is pretty

00:39:50.540 --> 00:39:54.220
<v Speaker 0>simple. Deny, allow, mutate, and off you go.

00:39:54.460 --> 00:39:56.060
<v Speaker 0>It's pretty cool. Right. There are a couple

00:39:56.060 --> 00:39:59.180
<v Speaker 2>of more functions, actually, special functions. Obviously, you

00:39:59.180 --> 00:40:01.500
<v Speaker 2>can use anything built in in JavaScript

00:40:01.500 --> 00:40:02.460
<v Speaker 2>and anything

00:40:02.785 --> 00:40:04.065
<v Speaker 2>that is possible,

00:40:04.465 --> 00:40:05.905
<v Speaker 2>you know, via any kind of, you know,

00:40:05.905 --> 00:40:07.905
<v Speaker 2>JavaScript libraries which you're importing.

00:40:08.385 --> 00:40:10.065
<v Speaker 2>But if you go back to the to

00:40:10.065 --> 00:40:12.465
<v Speaker 2>the other tab with the documentation,

00:40:12.625 --> 00:40:13.105
<v Speaker 2>you

00:40:13.665 --> 00:40:14.625
<v Speaker 2>can expand

00:40:14.705 --> 00:40:17.745
<v Speaker 2>functions down there on the bottom JavaScript reference.

00:40:18.620 --> 00:40:21.180
<v Speaker 2>And you see there, there's more functions that

00:40:21.180 --> 00:40:22.060
<v Speaker 2>we added,

00:40:22.540 --> 00:40:24.540
<v Speaker 2>you know, essentially for ease of use. I

00:40:24.540 --> 00:40:26.940
<v Speaker 2>think one of my favorites is actually lists

00:40:26.940 --> 00:40:27.900
<v Speaker 2>and get.

00:40:28.940 --> 00:40:31.500
<v Speaker 2>That is essentially to receive resources out of

00:40:31.500 --> 00:40:32.540
<v Speaker 2>the Kubernetes cluster.

00:40:33.225 --> 00:40:35.545
<v Speaker 2>So let's say you wanna have a policy

00:40:35.545 --> 00:40:36.505
<v Speaker 2>that

00:40:36.825 --> 00:40:39.945
<v Speaker 2>makes sure your ingress host names are unique.

00:40:40.025 --> 00:40:40.665
<v Speaker 2>Right?

00:40:41.065 --> 00:40:43.145
<v Speaker 2>You can't just look at the current object

00:40:43.145 --> 00:40:45.465
<v Speaker 2>coming in. You actually need to take a

00:40:45.465 --> 00:40:47.625
<v Speaker 2>look at all the ingresses in your cluster.

00:40:47.625 --> 00:40:47.865
<v Speaker 2>Right?

00:40:48.490 --> 00:40:51.210
<v Speaker 2>And you essentially need to retrieve those resources

00:40:51.210 --> 00:40:52.970
<v Speaker 2>somehow. You can do that with list, for

00:40:52.970 --> 00:40:53.530
<v Speaker 2>example.

00:40:54.410 --> 00:40:55.770
<v Speaker 0>Ah, very cool.

00:40:56.090 --> 00:40:56.970
<v Speaker 0>So I have, like

00:40:58.010 --> 00:41:00.330
<v Speaker 0>I I give this very opinionated view of

00:41:00.330 --> 00:41:02.410
<v Speaker 0>of what get ops means to me and

00:41:02.410 --> 00:41:03.930
<v Speaker 0>my own production infrastructure.

00:41:04.385 --> 00:41:05.744
<v Speaker 0>And, like, one of the things I try

00:41:05.744 --> 00:41:08.625
<v Speaker 0>to emit from all of my repositories is

00:41:09.265 --> 00:41:10.465
<v Speaker 0>domain information.

00:41:10.545 --> 00:41:11.984
<v Speaker 0>Like, this is rockode.com

00:41:11.984 --> 00:41:13.985
<v Speaker 0>or this is staging.rockode.com.

00:41:14.545 --> 00:41:17.025
<v Speaker 0>I'm actually trying to rely on the

00:41:17.840 --> 00:41:20.480
<v Speaker 0>component that provisions the cluster to inject a

00:41:20.480 --> 00:41:22.400
<v Speaker 0>config map that has, oh, this is what

00:41:22.400 --> 00:41:24.640
<v Speaker 0>your domain is for this cluster. Mhmm. I

00:41:24.640 --> 00:41:28.240
<v Speaker 0>could now use JS policy with a mutating

00:41:28.240 --> 00:41:31.200
<v Speaker 0>policy that says go fetch this config map,

00:41:31.275 --> 00:41:32.954
<v Speaker 0>pull out the value for the domain, and

00:41:32.954 --> 00:41:34.875
<v Speaker 0>inject that into all of the ingresses as

00:41:34.875 --> 00:41:36.315
<v Speaker 0>I apply them to the cluster

00:41:36.635 --> 00:41:39.355
<v Speaker 0>and just simplify my entire setup there.

00:41:41.275 --> 00:41:42.954
<v Speaker 0>That is awesome. I love it when I

00:41:42.954 --> 00:41:44.580
<v Speaker 0>click through episodes like this, and I have

00:41:44.580 --> 00:41:46.580
<v Speaker 0>a real use case for the thing myself

00:41:46.580 --> 00:41:48.260
<v Speaker 0>that I can go and just deploy No

00:41:48.260 --> 00:41:48.900
<v Speaker 0>way. Them.

00:41:49.460 --> 00:41:51.220
<v Speaker 1>It happened the last time you came up

00:41:51.220 --> 00:41:53.380
<v Speaker 1>with use cases that we hadn't thought of.

00:41:53.380 --> 00:41:56.580
<v Speaker 1>So it's it's really fun to to get

00:41:56.580 --> 00:41:57.780
<v Speaker 1>you to take a look at these things

00:41:57.780 --> 00:42:00.204
<v Speaker 1>because you definitely always have, like, some new

00:42:00.204 --> 00:42:02.205
<v Speaker 1>takes that that we hadn't even

00:42:02.444 --> 00:42:03.165
<v Speaker 1>considered.

00:42:03.565 --> 00:42:05.085
<v Speaker 0>Yeah. I I I just like to do

00:42:05.085 --> 00:42:07.724
<v Speaker 0>weird stuff with technology. But this I I'm

00:42:07.724 --> 00:42:09.325
<v Speaker 0>really excited about this. Like, I can I

00:42:09.325 --> 00:42:12.210
<v Speaker 0>can already see this fixing my GitOps? Because

00:42:12.210 --> 00:42:13.730
<v Speaker 0>I I just don't like putting that information

00:42:13.730 --> 00:42:15.330
<v Speaker 0>in the repository, and I'm not a big

00:42:15.330 --> 00:42:17.330
<v Speaker 0>fan of my GitOps tooling right back to

00:42:17.330 --> 00:42:19.170
<v Speaker 0>the repository with this information.

00:42:19.410 --> 00:42:20.770
<v Speaker 0>And this solves a lot of these problems

00:42:20.770 --> 00:42:22.610
<v Speaker 0>because it's much more dynamic

00:42:22.690 --> 00:42:24.530
<v Speaker 0>than I've had access to through things like

00:42:24.530 --> 00:42:26.585
<v Speaker 0>Kiverrno and and Open in the past. So

00:42:26.585 --> 00:42:28.184
<v Speaker 0>it just opens up a whole bunch of

00:42:28.184 --> 00:42:30.345
<v Speaker 0>these I I don't wanna say, like, power

00:42:30.345 --> 00:42:31.865
<v Speaker 0>user things, but, you know, people that are

00:42:31.865 --> 00:42:33.865
<v Speaker 0>going slightly off the beaten track and just

00:42:33.865 --> 00:42:36.585
<v Speaker 0>wanna do more exploratory experimental stuff,

00:42:36.904 --> 00:42:38.904
<v Speaker 0>having the ability to do those on the

00:42:38.904 --> 00:42:39.944
<v Speaker 0>fly lookups,

00:42:41.260 --> 00:42:43.020
<v Speaker 0>it's almost a superpower. And I think I

00:42:43.020 --> 00:42:45.020
<v Speaker 0>said that with v cluster too. So user

00:42:45.020 --> 00:42:47.420
<v Speaker 0>user winning me over with your technology.

00:42:48.220 --> 00:42:49.740
<v Speaker 1>I think I think there's

00:42:50.140 --> 00:42:51.580
<v Speaker 1>there's an important

00:42:51.900 --> 00:42:55.100
<v Speaker 1>thing in terms of being opinionated with tools.

00:42:55.100 --> 00:42:58.125
<v Speaker 1>Like, a lot of users, I think, especially

00:42:58.125 --> 00:42:59.245
<v Speaker 1>newer folks,

00:42:59.645 --> 00:43:01.485
<v Speaker 1>want you to be opinionated. They want you

00:43:01.485 --> 00:43:04.365
<v Speaker 1>to, you know, have a an example architecture

00:43:04.365 --> 00:43:06.365
<v Speaker 1>or, you know, to to be able to

00:43:06.365 --> 00:43:09.085
<v Speaker 1>tell them really in basic terms how to

00:43:09.085 --> 00:43:11.260
<v Speaker 1>use the tool, but you're always gonna have

00:43:11.260 --> 00:43:13.579
<v Speaker 1>those folks who have different use cases, right,

00:43:13.579 --> 00:43:14.619
<v Speaker 1>and different needs

00:43:15.099 --> 00:43:17.900
<v Speaker 1>that, like, the the basic kind of opinionated

00:43:17.900 --> 00:43:21.099
<v Speaker 1>workflow won't address. And and so the tools

00:43:21.099 --> 00:43:23.260
<v Speaker 1>also have to be flexible enough for people

00:43:23.260 --> 00:43:24.539
<v Speaker 1>to be able to do the things that

00:43:24.539 --> 00:43:25.420
<v Speaker 1>they need to do.

00:43:26.355 --> 00:43:28.195
<v Speaker 1>Yeah. Well said.

00:43:29.235 --> 00:43:29.955
<v Speaker 0>Okay.

00:43:30.355 --> 00:43:32.195
<v Speaker 0>Maybe we could cover a couple more of

00:43:32.195 --> 00:43:33.075
<v Speaker 0>these functions,

00:43:33.315 --> 00:43:34.915
<v Speaker 0>and then we'll jump back to that examples

00:43:34.915 --> 00:43:36.195
<v Speaker 0>and take a look at a couple more

00:43:36.195 --> 00:43:37.155
<v Speaker 0>of the features.

00:43:37.475 --> 00:43:39.475
<v Speaker 0>So I see read files saying, and, immediately,

00:43:39.475 --> 00:43:41.710
<v Speaker 0>I'm thinking this can read a file from

00:43:41.710 --> 00:43:42.350
<v Speaker 0>somewhere.

00:43:42.910 --> 00:43:45.150
<v Speaker 0>Yeah, so this is pulling in secret information

00:43:45.310 --> 00:43:46.910
<v Speaker 0>from the secrets directory.

00:43:47.630 --> 00:43:49.950
<v Speaker 0>Oh, that's what And fetching, so I can

00:43:49.950 --> 00:43:52.830
<v Speaker 0>actually pull remote URLs from like guests or

00:43:52.830 --> 00:43:53.630
<v Speaker 0>online,

00:43:53.630 --> 00:43:55.390
<v Speaker 0>etcetera, and just pull them into account.

00:43:57.505 --> 00:43:59.345
<v Speaker 0>I guess that's the cool thing about having

00:43:59.345 --> 00:44:01.345
<v Speaker 0>access to the JavaScript stuff.

00:44:02.305 --> 00:44:04.385
<v Speaker 0>What else do we see? What's re queue?

00:44:06.305 --> 00:44:07.185
<v Speaker 0>Let's see.

00:44:07.905 --> 00:44:10.170
<v Speaker 2>That's That's a good question. I think that's

00:44:10.170 --> 00:44:11.770
<v Speaker 2>for controller policies.

00:44:11.850 --> 00:44:13.690
<v Speaker 0>Yeah. This one has a big comment. That

00:44:13.690 --> 00:44:15.130
<v Speaker 0>should be a warning saying for me that

00:44:15.130 --> 00:44:17.210
<v Speaker 0>just just move on. Go look at something

00:44:17.210 --> 00:44:19.210
<v Speaker 0>else. Come back to this one. Oh, yeah.

00:44:19.210 --> 00:44:21.450
<v Speaker 2>Yeah. This is for controller policies. You see

00:44:21.450 --> 00:44:23.370
<v Speaker 2>that on the bottom, right, in line 30?

00:44:23.595 --> 00:44:24.315
<v Speaker 0>Yeah.

00:44:24.715 --> 00:44:26.875
<v Speaker 2>The controller policies are a little bit different

00:44:26.875 --> 00:44:29.994
<v Speaker 2>because, essentially, they're not happening as part of

00:44:29.994 --> 00:44:31.115
<v Speaker 2>your kubectl

00:44:31.115 --> 00:44:32.235
<v Speaker 2>request. Right?

00:44:32.555 --> 00:44:35.515
<v Speaker 2>They happen afterwards based on events, and they're

00:44:35.515 --> 00:44:36.155
<v Speaker 2>queued. Right?

00:44:37.000 --> 00:44:39.480
<v Speaker 2>So, essentially, event comes in, and then you

00:44:39.480 --> 00:44:41.720
<v Speaker 2>have these policies which which I'll put in

00:44:41.720 --> 00:44:43.160
<v Speaker 2>a queue and execute it,

00:44:44.040 --> 00:44:46.200
<v Speaker 2>I think, you know, first in,

00:44:46.680 --> 00:44:47.560
<v Speaker 2>first out.

00:44:48.200 --> 00:44:50.360
<v Speaker 2>And then you can essentially add the the

00:44:50.360 --> 00:44:51.720
<v Speaker 2>request to the queue again.

00:44:53.165 --> 00:44:55.005
<v Speaker 2>You know, there may be certain use cases

00:44:55.005 --> 00:44:57.325
<v Speaker 2>where you wanna reevaluate an event later on

00:44:57.325 --> 00:44:57.885
<v Speaker 2>again.

00:45:00.125 --> 00:45:01.405
<v Speaker 0>Okay. Cool.

00:45:02.765 --> 00:45:04.765
<v Speaker 0>Let's pick one more just because I think

00:45:04.765 --> 00:45:05.885
<v Speaker 0>it fits in with some of the stuff

00:45:05.885 --> 00:45:07.085
<v Speaker 0>we've already looked at. So I see a

00:45:07.085 --> 00:45:09.380
<v Speaker 0>warn here. We've seen deny. We've seen allow

00:45:09.460 --> 00:45:12.180
<v Speaker 0>I guess, one allows it, but logs somewhere

00:45:12.180 --> 00:45:14.100
<v Speaker 0>that, hey. You may wanna look at this

00:45:14.100 --> 00:45:16.420
<v Speaker 0>in due course. Is that correct?

00:45:17.380 --> 00:45:19.460
<v Speaker 2>Yes. That's that's exactly it.

00:45:20.980 --> 00:45:22.260
<v Speaker 0>Nice. Intuitive,

00:45:22.340 --> 00:45:24.845
<v Speaker 0>which is good. Alright. Let's pick it up.

00:45:24.925 --> 00:45:27.005
<v Speaker 1>In, you know, a a situation you might

00:45:27.005 --> 00:45:27.645
<v Speaker 1>wanna

00:45:27.964 --> 00:45:30.125
<v Speaker 1>use that in is, you know, something you're

00:45:30.125 --> 00:45:32.204
<v Speaker 1>gonna deprecate down the road, you know, and

00:45:32.204 --> 00:45:34.685
<v Speaker 1>you wanna start letting the developers know that,

00:45:34.685 --> 00:45:36.525
<v Speaker 1>you know, they can't they can't depend on

00:45:36.525 --> 00:45:37.724
<v Speaker 1>that thing being there anymore.

00:45:38.570 --> 00:45:40.010
<v Speaker 0>Yeah. 100%.

00:45:40.330 --> 00:45:42.890
<v Speaker 0>And something we see, like sorry. Need to

00:45:42.890 --> 00:45:44.410
<v Speaker 0>look at this. You also show it in

00:45:44.410 --> 00:45:45.530
<v Speaker 2>in kubectl.

00:45:45.530 --> 00:45:48.090
<v Speaker 2>Right? So the developer is in the end,

00:45:48.090 --> 00:45:49.850
<v Speaker 2>you know, able to see that output as

00:45:49.850 --> 00:45:50.010
<v Speaker 2>well,

00:45:50.694 --> 00:45:53.975
<v Speaker 2>which is pretty powerful. I think kubectl itself

00:45:54.055 --> 00:45:56.055
<v Speaker 2>does it as well with, like, the deprecated

00:45:56.055 --> 00:45:57.734
<v Speaker 2>ingress, you know, better

00:45:58.135 --> 00:46:00.295
<v Speaker 2>resources, etcetera. They they did that for a

00:46:00.295 --> 00:46:02.055
<v Speaker 2>couple of versions before actually

00:46:02.295 --> 00:46:03.895
<v Speaker 2>killing

00:46:04.030 --> 00:46:05.950
<v Speaker 2>that API group off, which makes a lot

00:46:05.950 --> 00:46:07.870
<v Speaker 2>of sense because other otherwise, you know, not

00:46:07.870 --> 00:46:09.710
<v Speaker 2>everybody reads the chains logs every time they

00:46:09.710 --> 00:46:11.870
<v Speaker 2>come out and makes sense their page is

00:46:11.870 --> 00:46:12.750
<v Speaker 2>long. Right?

00:46:13.790 --> 00:46:16.190
<v Speaker 0>Yeah. Definitely. I mean, one of the things

00:46:16.425 --> 00:46:17.945
<v Speaker 0>I think it fits in really well with

00:46:17.945 --> 00:46:19.545
<v Speaker 0>with this kind of tooling is that we've

00:46:19.545 --> 00:46:22.265
<v Speaker 0>seen pod security policies being deprecated recently.

00:46:22.665 --> 00:46:24.425
<v Speaker 0>And the answer to that is to rely

00:46:24.425 --> 00:46:27.065
<v Speaker 0>on tools like OPA and Caverno, and I'm

00:46:27.065 --> 00:46:28.185
<v Speaker 0>assuming JS policy.

00:46:28.920 --> 00:46:31.079
<v Speaker 0>Is that something that's available to people? Like,

00:46:31.079 --> 00:46:33.319
<v Speaker 0>do you ship a bundle that is the

00:46:33.319 --> 00:46:36.200
<v Speaker 0>basic pod security policies for people to take

00:46:36.200 --> 00:46:38.200
<v Speaker 0>advantage of, or is that something that they

00:46:38.200 --> 00:46:40.119
<v Speaker 0>would just write their own policies for to

00:46:40.119 --> 00:46:41.240
<v Speaker 0>enforce the bets that they want?

00:46:43.035 --> 00:46:44.795
<v Speaker 2>I'm actually not sure if we have an

00:46:44.795 --> 00:46:47.035
<v Speaker 2>example in there, but we we may.

00:46:47.595 --> 00:46:50.395
<v Speaker 2>I know that we have something about escalating

00:46:51.595 --> 00:46:52.395
<v Speaker 2>privileges

00:46:52.395 --> 00:46:54.875
<v Speaker 2>of bots, but I don't know exactly if

00:46:54.875 --> 00:46:56.234
<v Speaker 2>we have pod security policy.

00:46:57.170 --> 00:46:59.810
<v Speaker 0>We do have denied privilege escalation. So maybe

00:46:59.810 --> 00:47:00.930
<v Speaker 0>that's a good one to take a look

00:47:00.930 --> 00:47:01.410
<v Speaker 0>at.

00:47:05.250 --> 00:47:06.930
<v Speaker 0>And we also have a

00:47:08.210 --> 00:47:10.290
<v Speaker 0>couple of oh, we've got one question and

00:47:10.290 --> 00:47:11.970
<v Speaker 0>no mocking me in the chat.

00:47:13.695 --> 00:47:15.215
<v Speaker 0>There we go. Hi, Noah.

00:47:16.895 --> 00:47:18.895
<v Speaker 0>So I use my clustered automation for all

00:47:18.895 --> 00:47:21.135
<v Speaker 0>these clusters just because it's it's so well

00:47:21.135 --> 00:47:22.255
<v Speaker 0>written now.

00:47:22.655 --> 00:47:25.615
<v Speaker 0>But, yeah, the ambassador ingress controller is currently

00:47:25.615 --> 00:47:27.560
<v Speaker 0>broken since I upgraded the clusters to one

00:47:27.560 --> 00:47:29.960
<v Speaker 0>twenty two because of a deprecation,

00:47:30.040 --> 00:47:31.960
<v Speaker 0>and and I'm not getting warnings about that.

00:47:31.960 --> 00:47:32.360
<v Speaker 0>So

00:47:32.760 --> 00:47:34.520
<v Speaker 0>yeah. Very funny at all. Thank you for

00:47:34.520 --> 00:47:35.080
<v Speaker 0>watching.

00:47:36.040 --> 00:47:36.920
<v Speaker 0>Russell

00:47:37.240 --> 00:47:38.280
<v Speaker 0>has got a question.

00:47:39.234 --> 00:47:40.115
<v Speaker 0>So

00:47:40.115 --> 00:47:41.555
<v Speaker 0>what are the scopes?

00:47:41.555 --> 00:47:43.795
<v Speaker 0>The namespace filtering looks to be done by

00:47:43.795 --> 00:47:45.875
<v Speaker 0>the JavaScript. So it seems like namespace scope

00:47:45.875 --> 00:47:46.995
<v Speaker 0>isn't required.

00:47:47.075 --> 00:47:48.994
<v Speaker 0>Does the scope alter the shape of request

00:47:48.994 --> 00:47:49.715
<v Speaker 0>object?

00:47:49.875 --> 00:47:51.555
<v Speaker 0>I think that's the same assumption I made

00:47:51.555 --> 00:47:53.955
<v Speaker 0>that Lucas kinda tackled earlier, but

00:47:54.515 --> 00:47:56.170
<v Speaker 0>do you wanna add anything to that?

00:47:57.290 --> 00:48:00.010
<v Speaker 2>Yeah. I mean, essentially, you can specify within

00:48:00.010 --> 00:48:02.890
<v Speaker 2>the policy really the scope of that policy.

00:48:02.890 --> 00:48:05.130
<v Speaker 2>Right? Whether that whether you're restricted to a

00:48:05.130 --> 00:48:07.290
<v Speaker 2>certain group or you're to

00:48:07.905 --> 00:48:10.305
<v Speaker 2>an API server version or resource, in this

00:48:10.305 --> 00:48:11.585
<v Speaker 2>case, pods. Right?

00:48:12.385 --> 00:48:14.145
<v Speaker 2>And then a certain operation,

00:48:15.265 --> 00:48:15.985
<v Speaker 2>you can,

00:48:16.305 --> 00:48:18.625
<v Speaker 2>you know, restrict it to a certain namespace.

00:48:19.345 --> 00:48:21.905
<v Speaker 2>And, essentially, we we won't even receive that

00:48:21.905 --> 00:48:24.040
<v Speaker 2>request, right, when

00:48:24.040 --> 00:48:26.680
<v Speaker 2>when you don't specify that. So there's really,

00:48:26.839 --> 00:48:29.319
<v Speaker 2>like, no overhead for any other resources. It's

00:48:29.319 --> 00:48:31.480
<v Speaker 2>only those resource that you actually specify that

00:48:31.480 --> 00:48:33.720
<v Speaker 2>will be validated by the particular policy.

00:48:33.880 --> 00:48:36.440
<v Speaker 2>So that is pretty extensive filtering capabilities.

00:48:37.985 --> 00:48:39.665
<v Speaker 1>Yeah. So, yeah, you don't have the thing

00:48:39.665 --> 00:48:41.825
<v Speaker 1>firing off, you know, when people are

00:48:42.385 --> 00:48:44.545
<v Speaker 1>altering other other kinds of resources.

00:48:45.585 --> 00:48:47.425
<v Speaker 0>Yeah. And I think I'll just

00:48:48.705 --> 00:48:51.025
<v Speaker 0>highlight something that Luca said earlier just so

00:48:51.025 --> 00:48:53.380
<v Speaker 0>it's not missed. But all GS policies are

00:48:53.380 --> 00:48:55.140
<v Speaker 0>cluster wide. Right?

00:48:56.740 --> 00:48:57.700
<v Speaker 0>I took a note of that in my

00:48:57.700 --> 00:48:59.780
<v Speaker 0>head, so yeah. Okay. Yeah. So all the

00:48:59.780 --> 00:49:03.060
<v Speaker 2>policies policy object itself is cluster wide. Right?

00:49:03.060 --> 00:49:04.260
<v Speaker 0>Yeah. Exactly. Got it.

00:49:04.985 --> 00:49:08.265
<v Speaker 0>Okay. So we pulled up the privilege escalation

00:49:08.265 --> 00:49:09.625
<v Speaker 0>one. So this is an example of one

00:49:09.625 --> 00:49:11.145
<v Speaker 0>of the pod security policies that kind of

00:49:11.145 --> 00:49:11.945
<v Speaker 0>disappears.

00:49:12.185 --> 00:49:14.025
<v Speaker 0>And there's a little bit of syntax in

00:49:14.025 --> 00:49:14.905
<v Speaker 0>here that's

00:49:18.590 --> 00:49:20.750
<v Speaker 0>that's just JavaScript, isn't it? So this is

00:49:21.550 --> 00:49:23.390
<v Speaker 0>I'm gonna try and explain JavaScript, and I'm

00:49:23.390 --> 00:49:25.630
<v Speaker 0>gonna feel measurably. Feel free to correct me

00:49:25.630 --> 00:49:26.830
<v Speaker 0>here. Right? So

00:49:27.470 --> 00:49:29.230
<v Speaker 0>we're just seeing that we want to take

00:49:29.230 --> 00:49:30.270
<v Speaker 0>a look at all the containers

00:49:30.875 --> 00:49:32.155
<v Speaker 0>and the pod.

00:49:32.395 --> 00:49:34.234
<v Speaker 0>I love that it defaults to empty. I

00:49:34.234 --> 00:49:35.915
<v Speaker 0>mean, can you apply a pod with no

00:49:35.915 --> 00:49:37.035
<v Speaker 0>containers? I'm not sure.

00:49:37.595 --> 00:49:39.994
<v Speaker 0>The any containers definitely could be defaulted to

00:49:39.994 --> 00:49:40.555
<v Speaker 0>empty.

00:49:40.795 --> 00:49:43.434
<v Speaker 0>And then this is the spread operator in

00:49:42.810 --> 00:49:44.730
<v Speaker 0>JavaScript. So essentially what we're saying is get

00:49:44.730 --> 00:49:46.890
<v Speaker 0>all the containers and all the other containers,

00:49:46.890 --> 00:49:50.090
<v Speaker 0>and then we're using the for each iterator

00:49:50.730 --> 00:49:52.890
<v Speaker 0>where we're just checking to see if the

00:49:52.890 --> 00:49:54.890
<v Speaker 0>security context is set in any of them.

00:49:54.890 --> 00:49:56.730
<v Speaker 0>And then you just got a deny message

00:49:56.730 --> 00:49:57.850
<v Speaker 0>here that says that's not allowed.

00:49:58.464 --> 00:49:59.105
<v Speaker 0>Like

00:49:59.744 --> 00:50:00.465
<v Speaker 0>yeah.

00:50:01.825 --> 00:50:03.665
<v Speaker 0>I love that I can read this. I've

00:50:03.665 --> 00:50:05.025
<v Speaker 0>gotta say it's pretty nice.

00:50:06.385 --> 00:50:08.145
<v Speaker 0>Okay. A question from

00:50:08.385 --> 00:50:09.025
<v Speaker 0>Frank.

00:50:09.984 --> 00:50:12.305
<v Speaker 0>Is it possible to validate existing

00:50:12.690 --> 00:50:15.329
<v Speaker 0>objects or resources, I guess, and get some

00:50:15.329 --> 00:50:17.490
<v Speaker 0>phase of report out of them?

00:50:19.250 --> 00:50:21.170
<v Speaker 2>Yeah. I mean, you can you can actually

00:50:21.170 --> 00:50:23.250
<v Speaker 2>take a look at, you know, what you've

00:50:23.250 --> 00:50:24.290
<v Speaker 2>already denied

00:50:24.369 --> 00:50:25.730
<v Speaker 2>in your example

00:50:25.890 --> 00:50:28.815
<v Speaker 2>by, you know, getting the resource JS policy

00:50:28.815 --> 00:50:30.015
<v Speaker 2>violations,

00:50:30.734 --> 00:50:32.494
<v Speaker 2>which should give you an insight of, you

00:50:32.494 --> 00:50:34.015
<v Speaker 2>know, what has been violated.

00:50:34.734 --> 00:50:36.734
<v Speaker 0>Okay. So that's a that's a new custom

00:50:36.734 --> 00:50:37.535
<v Speaker 0>resource?

00:50:38.335 --> 00:50:41.135
<v Speaker 2>Exactly. Yeah. That's more for the reporting purpose.

00:50:45.380 --> 00:50:46.180
<v Speaker 0>Vial

00:50:48.660 --> 00:50:49.619
<v Speaker 0>there we go.

00:50:54.500 --> 00:50:55.700
<v Speaker 0>Well, let's take a look at this in

00:50:55.700 --> 00:50:57.355
<v Speaker 0>YAML. I mean, I'm assuming I can maybe

00:50:57.355 --> 00:50:58.875
<v Speaker 0>describe it too.

00:51:04.235 --> 00:51:05.435
<v Speaker 0>Too early.

00:51:07.595 --> 00:51:07.995
<v Speaker 0>Okay.

00:51:09.440 --> 00:51:10.960
<v Speaker 0>Oh, there we go. So we got a

00:51:10.960 --> 00:51:13.840
<v Speaker 0>violation here. So this is gripped by the

00:51:13.840 --> 00:51:15.520
<v Speaker 0>policy itself, and then

00:51:15.840 --> 00:51:17.760
<v Speaker 0>the status is just a list of violations

00:51:17.760 --> 00:51:18.960
<v Speaker 0>that is denied.

00:51:20.480 --> 00:51:22.720
<v Speaker 0>And we've got a timestamp, the object that

00:51:22.720 --> 00:51:23.600
<v Speaker 0>was denied,

00:51:23.680 --> 00:51:24.560
<v Speaker 0>and then the message.

00:51:26.214 --> 00:51:28.295
<v Speaker 0>So I think what Frank is saying is,

00:51:28.295 --> 00:51:31.095
<v Speaker 0>like, say, I've got my production infrastructure already

00:51:31.175 --> 00:51:32.215
<v Speaker 0>up and running,

00:51:32.615 --> 00:51:34.535
<v Speaker 0>and then I think, okay. I've watched the

00:51:34.535 --> 00:51:36.695
<v Speaker 0>Rawkode live episodes and jsPolicy is like the

00:51:36.695 --> 00:51:38.455
<v Speaker 0>bee's knees, so I'm gonna go and deploy

00:51:38.455 --> 00:51:39.575
<v Speaker 0>it to all of my clusters now.

00:51:40.240 --> 00:51:42.080
<v Speaker 0>It's not gonna work on any of the

00:51:42.080 --> 00:51:44.080
<v Speaker 0>resources within the cluster until

00:51:44.320 --> 00:51:46.320
<v Speaker 0>we do a new update or apply or

00:51:46.320 --> 00:51:47.760
<v Speaker 0>something like that, or is there a way

00:51:47.760 --> 00:51:49.520
<v Speaker 0>to retrospectively

00:51:49.520 --> 00:51:50.880
<v Speaker 0>scan existing resources?

00:51:52.755 --> 00:51:55.075
<v Speaker 2>No. That does not exist at this point.

00:51:55.395 --> 00:51:57.474
<v Speaker 2>But I I think none of the policy

00:51:57.474 --> 00:52:00.595
<v Speaker 2>engines do that right now. I mean, essentially,

00:52:00.755 --> 00:52:03.075
<v Speaker 2>everybody's just hooking into the regular admission control

00:52:03.075 --> 00:52:03.395
<v Speaker 2>web

00:52:03.954 --> 00:52:06.010
<v Speaker 2>Yeah. You know, webhooks and, you know, they're

00:52:06.010 --> 00:52:08.089
<v Speaker 2>not being fired on existing objects and set

00:52:08.250 --> 00:52:11.690
<v Speaker 2>unless you, you know, reapply them. But, I

00:52:11.690 --> 00:52:14.089
<v Speaker 2>mean, some some objects may

00:52:14.329 --> 00:52:15.690
<v Speaker 2>I mean, even if you were to just

00:52:15.690 --> 00:52:17.930
<v Speaker 2>add an annotation to all objects, like a

00:52:17.930 --> 00:52:19.609
<v Speaker 2>random annotation, you set it to true and

00:52:19.609 --> 00:52:20.490
<v Speaker 2>then you remove it again.

00:52:21.265 --> 00:52:23.265
<v Speaker 2>You may have policies which only listen to

00:52:23.265 --> 00:52:23.985
<v Speaker 2>create

00:52:24.465 --> 00:52:28.385
<v Speaker 2>because they forbid create actions. So there's

00:52:28.385 --> 00:52:30.785
<v Speaker 2>no way to essentially capture everything, I think.

00:52:31.425 --> 00:52:33.025
<v Speaker 0>Yeah. Although, I guess this is where your

00:52:33.025 --> 00:52:35.210
<v Speaker 0>controller policies could come in. I mean, you

00:52:35.210 --> 00:52:37.530
<v Speaker 0>could probably write something as a controller policy

00:52:37.530 --> 00:52:38.329
<v Speaker 0>that did

00:52:38.730 --> 00:52:41.130
<v Speaker 0>that looked for violations and triggered updates via

00:52:41.130 --> 00:52:43.530
<v Speaker 0>annotations or labels or something silly like that

00:52:43.530 --> 00:52:44.970
<v Speaker 0>just to force them to go through the

00:52:44.970 --> 00:52:46.089
<v Speaker 0>loop. But that

00:52:46.730 --> 00:52:48.089
<v Speaker 0>that's the segue. We don't need to go

00:52:48.089 --> 00:52:48.809
<v Speaker 0>into that right now.

00:52:49.895 --> 00:52:52.455
<v Speaker 0>But, Frank, there are violation reports that are

00:52:52.455 --> 00:52:55.255
<v Speaker 0>available here. I'm assuming you could write tooling

00:52:55.255 --> 00:52:56.855
<v Speaker 0>to pull those out and store them in

00:52:56.855 --> 00:52:59.335
<v Speaker 0>Prometheus or InfluxDB or anything like that to

00:52:59.335 --> 00:53:00.535
<v Speaker 0>get access to them.

00:53:01.015 --> 00:53:04.055
<v Speaker 0>Frank is actually the author of the kivernal

00:53:04.055 --> 00:53:05.015
<v Speaker 0>policy reporter,

00:53:05.310 --> 00:53:07.390
<v Speaker 0>So I'm gonna ask him Oh, nice. Okay.

00:53:07.390 --> 00:53:08.990
<v Speaker 0>Gonna ask him now to add support for

00:53:08.990 --> 00:53:10.830
<v Speaker 0>this so that we can take advantage of

00:53:10.830 --> 00:53:12.190
<v Speaker 0>all that great tooling as well.

00:53:13.310 --> 00:53:14.590
<v Speaker 0>Okay. Let's

00:53:14.590 --> 00:53:16.670
<v Speaker 0>jump back to our examples.

00:53:17.630 --> 00:53:18.935
<v Speaker 0>So Let's see if we can pick maybe

00:53:18.935 --> 00:53:21.655
<v Speaker 0>just one more feature and then we can

00:53:21.655 --> 00:53:23.255
<v Speaker 0>see what we wanna do after that.

00:53:24.695 --> 00:53:26.215
<v Speaker 0>So either

00:53:26.215 --> 00:53:27.815
<v Speaker 0>of you have anything that you want to

00:53:27.815 --> 00:53:29.735
<v Speaker 0>show off before I pick one randomly.

00:53:32.340 --> 00:53:35.060
<v Speaker 2>I think dependencies may be interesting to see.

00:53:35.540 --> 00:53:38.180
<v Speaker 0>Does this mean it's gonna give something from

00:53:38.180 --> 00:53:39.140
<v Speaker 0>NPM?

00:53:40.020 --> 00:53:42.020
<v Speaker 2>Yeah. Exactly. Alright. Okay. Cool.

00:53:44.255 --> 00:53:46.255
<v Speaker 0>Oh, you're pulling on low dash. I was

00:53:46.255 --> 00:53:48.255
<v Speaker 0>expecting left pad. You've let me down.

00:53:48.495 --> 00:53:48.735
<v Speaker 0>But

00:53:51.375 --> 00:53:53.615
<v Speaker 0>well, let's see. We got a

00:53:53.935 --> 00:53:56.895
<v Speaker 0>create operation on pods. Only now we have

00:53:56.895 --> 00:53:59.455
<v Speaker 0>access to a dependencies key on the spec

00:53:59.280 --> 00:54:01.840
<v Speaker 0>where we can just list any NPM dependency.

00:54:03.040 --> 00:54:05.760
<v Speaker 0>And then in the JavaScript, we're just using

00:54:05.760 --> 00:54:07.280
<v Speaker 0>Lodash to do

00:54:08.320 --> 00:54:09.120
<v Speaker 0>comparisons.

00:54:09.520 --> 00:54:11.360
<v Speaker 0>It's pretty neat the way that works. I'm

00:54:11.360 --> 00:54:14.240
<v Speaker 0>assuming then that when the JS policy is

00:54:14.365 --> 00:54:15.645
<v Speaker 0>ingested,

00:54:15.645 --> 00:54:17.485
<v Speaker 0>that the Webpack step is just pulling all

00:54:17.485 --> 00:54:19.085
<v Speaker 0>those in and spinning out the bundle just

00:54:19.085 --> 00:54:20.605
<v Speaker 0>like all the other policies.

00:54:20.765 --> 00:54:21.325
<v Speaker 2>Yep.

00:54:21.645 --> 00:54:23.885
<v Speaker 2>Yeah. That's correct. That's essentially why we separate

00:54:23.885 --> 00:54:26.365
<v Speaker 2>a JS policy from JS policy bundle.

00:54:27.330 --> 00:54:29.730
<v Speaker 2>And, again, like, typically

00:54:30.210 --> 00:54:32.930
<v Speaker 2>so this is actually a little ugly. Right?

00:54:32.930 --> 00:54:36.450
<v Speaker 2>Because you're writing JavaScript within YAML. Right?

00:54:37.090 --> 00:54:40.130
<v Speaker 2>So the benefits I was mentioning earlier regarding

00:54:40.130 --> 00:54:42.615
<v Speaker 2>tooling don't apply to this because, like, your

00:54:42.615 --> 00:54:45.495
<v Speaker 2>IDE will not, you know, show code highlighting,

00:54:45.815 --> 00:54:47.335
<v Speaker 2>fix your imports,

00:54:48.055 --> 00:54:50.055
<v Speaker 2>you know, and your package JSON cannot be

00:54:50.055 --> 00:54:52.215
<v Speaker 2>scanned by dependency

00:54:52.375 --> 00:54:53.415
<v Speaker 2>vulnerabilities

00:54:53.415 --> 00:54:54.615
<v Speaker 2>and things like that.

00:54:55.815 --> 00:54:56.455
<v Speaker 2>So

00:54:56.660 --> 00:54:59.380
<v Speaker 2>the actual best approach is to create these

00:54:59.380 --> 00:55:00.580
<v Speaker 2>bundles yourself

00:55:01.060 --> 00:55:03.460
<v Speaker 2>and essentially just have a JavaScript object, a

00:55:03.460 --> 00:55:04.580
<v Speaker 2>package JSON,

00:55:05.300 --> 00:55:07.860
<v Speaker 2>and essentially create these bundles and then create

00:55:07.860 --> 00:55:10.740
<v Speaker 2>the JS policy without dependencies and without JavaScript

00:55:10.740 --> 00:55:12.955
<v Speaker 2>here. But if you just wanna test something

00:55:12.955 --> 00:55:14.235
<v Speaker 2>on the on the fly,

00:55:14.955 --> 00:55:16.795
<v Speaker 2>essentially, this dependencies

00:55:17.115 --> 00:55:19.595
<v Speaker 2>section allows you to do the same as

00:55:19.595 --> 00:55:22.075
<v Speaker 2>the dependencies section in your package JSON.

00:55:25.060 --> 00:55:26.660
<v Speaker 0>Okay. So I'm trying to think how this

00:55:26.660 --> 00:55:28.180
<v Speaker 0>would work, and, like, I I get up.

00:55:28.180 --> 00:55:30.260
<v Speaker 0>So so it's that I would have

00:55:31.300 --> 00:55:34.579
<v Speaker 0>my own repository with just, like, NPM in

00:55:34.579 --> 00:55:36.579
<v Speaker 0>it that creates a JavaScript project. I start

00:55:36.579 --> 00:55:38.500
<v Speaker 0>to write all of my policies as JavaScript,

00:55:38.500 --> 00:55:41.035
<v Speaker 0>probably each one being its own module.

00:55:41.355 --> 00:55:43.355
<v Speaker 0>And then I would configure my webpack to

00:55:43.355 --> 00:55:43.915
<v Speaker 0>just

00:55:44.555 --> 00:55:46.155
<v Speaker 0>compare each of those down.

00:55:47.595 --> 00:55:48.875
<v Speaker 0>And then I guess I you would just

00:55:48.875 --> 00:55:50.555
<v Speaker 0>use CICD to then

00:55:51.115 --> 00:55:53.595
<v Speaker 0>genetically generate the YAML and apply them. I'm

00:55:53.595 --> 00:55:55.035
<v Speaker 0>not do do we have an example of

00:55:55.035 --> 00:55:55.835
<v Speaker 0>what that would look like?

00:55:57.089 --> 00:55:59.089
<v Speaker 2>Yeah. If you go if you go to

00:55:59.089 --> 00:55:59.890
<v Speaker 2>the docs,

00:56:00.130 --> 00:56:01.810
<v Speaker 2>there's actually a project

00:56:01.890 --> 00:56:03.569
<v Speaker 2>that is set up for TypeScript, but you

00:56:03.569 --> 00:56:05.650
<v Speaker 2>could just write JavaScript in it as well.

00:56:05.730 --> 00:56:07.410
<v Speaker 2>Mhmm. You see that there are JS policy

00:56:07.410 --> 00:56:07.970
<v Speaker 2>SDK,

00:56:09.474 --> 00:56:11.715
<v Speaker 2>like, policies. Yeah. Exactly.

00:56:12.194 --> 00:56:14.515
<v Speaker 2>And you can find that project on GitHub,

00:56:14.515 --> 00:56:17.075
<v Speaker 2>and it's essentially a starter project. Right? You

00:56:17.075 --> 00:56:18.195
<v Speaker 2>can check that out.

00:56:19.234 --> 00:56:20.515
<v Speaker 2>And, essentially,

00:56:20.915 --> 00:56:23.234
<v Speaker 2>it it has the, you know, webpack and

00:56:23.234 --> 00:56:24.515
<v Speaker 2>everything configured

00:56:25.250 --> 00:56:26.849
<v Speaker 2>so that you can directly, you know, get

00:56:26.849 --> 00:56:28.770
<v Speaker 2>started, write your policies with them.

00:56:29.970 --> 00:56:32.049
<v Speaker 0>I've gotta say, I have tried writing a

00:56:32.049 --> 00:56:34.049
<v Speaker 0>webpack config in the past and failed every

00:56:34.049 --> 00:56:36.369
<v Speaker 0>single time. So I'm glad it exists.

00:56:37.329 --> 00:56:39.250
<v Speaker 0>So let's see what this looks like then.

00:56:42.905 --> 00:56:44.585
<v Speaker 0>Okay. So we got policies

00:56:44.585 --> 00:56:45.465
<v Speaker 0>and then

00:56:48.345 --> 00:56:50.585
<v Speaker 0>annotations apply. Okay. Let's take a look at

00:56:50.585 --> 00:56:51.625
<v Speaker 0>the namespace one.

00:56:54.330 --> 00:56:56.090
<v Speaker 0>Okay. So you just provide, like, the scale

00:56:56.090 --> 00:56:57.930
<v Speaker 0>and oh, I was just betting that to

00:56:57.930 --> 00:56:58.570
<v Speaker 0>be a

00:56:58.810 --> 00:56:59.930
<v Speaker 0>a bundle?

00:57:01.530 --> 00:57:03.610
<v Speaker 2>No. This is actually just the the policy

00:57:03.610 --> 00:57:06.730
<v Speaker 2>because the the bundle is created by webpack,

00:57:06.730 --> 00:57:08.145
<v Speaker 2>right, from

00:57:08.145 --> 00:57:10.305
<v Speaker 2>your source code that is in this index

00:57:10.305 --> 00:57:11.985
<v Speaker 2>TypeScript file. Right?

00:57:12.785 --> 00:57:15.905
<v Speaker 2>And the YAML code is essentially just

00:57:16.305 --> 00:57:18.865
<v Speaker 2>defining the JS policy, like, you know, the

00:57:18.865 --> 00:57:21.665
<v Speaker 2>scope of the policy. Right? Which objects

00:57:21.549 --> 00:57:23.710
<v Speaker 2>is it mutating? Is it validating?

00:57:24.349 --> 00:57:26.750
<v Speaker 2>Things like that. And then the pop the

00:57:26.750 --> 00:57:28.750
<v Speaker 2>bundle is created on demand.

00:57:29.230 --> 00:57:30.430
<v Speaker 0>Okay. Got it.

00:57:30.750 --> 00:57:31.630
<v Speaker 0>Does

00:57:31.630 --> 00:57:33.549
<v Speaker 0>this show me how it's applied to the

00:57:33.549 --> 00:57:33.950
<v Speaker 0>cluster?

00:57:35.295 --> 00:57:36.895
<v Speaker 2>Yeah. If you scroll down in the read

00:57:36.895 --> 00:57:39.454
<v Speaker 2>me, it it shows you the NPM commands.

00:57:39.454 --> 00:57:42.015
<v Speaker 2>Right? So, essentially, you have the NPM run

00:57:42.015 --> 00:57:42.895
<v Speaker 2>compile,

00:57:43.214 --> 00:57:45.615
<v Speaker 2>which is doing the compile step, and the

00:57:45.615 --> 00:57:48.560
<v Speaker 2>output of that compile step is essentially

00:57:49.120 --> 00:57:51.520
<v Speaker 2>you're gonna see a policies folder. So right

00:57:51.520 --> 00:57:52.960
<v Speaker 2>now, you just have a source folder and

00:57:52.960 --> 00:57:54.800
<v Speaker 2>a test folder. It's

00:57:54.800 --> 00:57:56.640
<v Speaker 2>gonna create a policies folder, which is on

00:57:56.640 --> 00:57:59.520
<v Speaker 2>gitignore because there's no reason to version these.

00:57:59.520 --> 00:58:01.365
<v Speaker 2>You know? I mean, you saw that earlier.

00:58:01.365 --> 00:58:02.165
<v Speaker 2>Right? They're

00:58:03.285 --> 00:58:04.405
<v Speaker 2>base 64

00:58:04.405 --> 00:58:05.365
<v Speaker 2>encoded,

00:58:05.365 --> 00:58:05.925
<v Speaker 2>and

00:58:06.805 --> 00:58:09.525
<v Speaker 2>they're also g g zips, essentially.

00:58:10.085 --> 00:58:12.085
<v Speaker 2>So that's why you saw, like, you know,

00:58:12.085 --> 00:58:13.765
<v Speaker 2>the binary kind of output earlier.

00:58:14.769 --> 00:58:16.529
<v Speaker 2>You we would actually have to unzip it

00:58:16.529 --> 00:58:17.250
<v Speaker 2>as well.

00:58:17.569 --> 00:58:19.250
<v Speaker 2>So there's no reason to version that in

00:58:19.250 --> 00:58:22.450
<v Speaker 2>Git because it's essentially just your source code.

00:58:23.650 --> 00:58:25.970
<v Speaker 2>And you can run that compile command, and

00:58:25.970 --> 00:58:28.130
<v Speaker 2>it would create that policies folder. And that

00:58:28.130 --> 00:58:29.490
<v Speaker 2>policies folder would contain

00:58:29.985 --> 00:58:32.145
<v Speaker 2>the policy YAML and the policy

00:58:32.465 --> 00:58:33.745
<v Speaker 2>bundle YAML

00:58:33.985 --> 00:58:36.465
<v Speaker 2>for each one of the policies that has

00:58:36.465 --> 00:58:39.265
<v Speaker 2>a folder in this, you know, source folder.

00:58:40.865 --> 00:58:42.465
<v Speaker 0>Okay. So, yeah, you can see all the

00:58:42.465 --> 00:58:44.865
<v Speaker 0>different scripts configured on the the package dot

00:58:44.865 --> 00:58:47.480
<v Speaker 0>JSON there. So of the standard compile, the

00:58:47.480 --> 00:58:49.880
<v Speaker 0>webpack bundling, and then there's the apply step

00:58:49.880 --> 00:58:50.920
<v Speaker 0>here too. So

00:58:51.640 --> 00:58:53.160
<v Speaker 0>okay. That makes a lot more sense. Is

00:58:53.160 --> 00:58:54.360
<v Speaker 2>actually pretty cool.

00:58:54.839 --> 00:58:57.960
<v Speaker 2>It's so we have this compile watch, which,

00:58:58.535 --> 00:59:00.535
<v Speaker 2>you know, whenever you change the source code

00:59:00.535 --> 00:59:03.095
<v Speaker 2>or the policy YAML, it would automatically, you

00:59:03.095 --> 00:59:05.095
<v Speaker 2>know, kind of do the note one watching

00:59:05.095 --> 00:59:05.735
<v Speaker 2>step.

00:59:07.095 --> 00:59:09.495
<v Speaker 2>But you can also run the watch reply,

00:59:09.495 --> 00:59:12.230
<v Speaker 2>which would not only create the YAMLs, but

00:59:12.230 --> 00:59:13.990
<v Speaker 2>also run essentially kubectl

00:59:13.990 --> 00:59:16.630
<v Speaker 2>apply, right, which is pretty smooth if you're,

00:59:16.630 --> 00:59:18.470
<v Speaker 2>you know, working in test cluster. You don't

00:59:18.470 --> 00:59:20.950
<v Speaker 2>even have to manually do the kubectl apply

00:59:20.950 --> 00:59:22.150
<v Speaker 2>when you're writing your policies.

00:59:23.845 --> 00:59:26.485
<v Speaker 0>Okay. Got it. And you're just doing that

00:59:26.485 --> 00:59:28.725
<v Speaker 0>through a webpack plugin. Right? The the writing

00:59:28.725 --> 00:59:30.645
<v Speaker 0>the YAML, the policy YAML? Is that right?

00:59:30.645 --> 00:59:32.645
<v Speaker 0>Is that what this is? Yeah. Correct. Okay.

00:59:32.645 --> 00:59:33.685
<v Speaker 2>Yes. Exactly.

00:59:33.845 --> 00:59:36.165
<v Speaker 0>Okay. And in the end, you know, that

00:59:35.730 --> 00:59:36.610
<v Speaker 2>policy

00:59:37.090 --> 00:59:39.810
<v Speaker 2>that JS policy code, you know, if you

00:59:39.810 --> 00:59:42.210
<v Speaker 2>really wanna do, like, GitOps, etcetera, that is

00:59:42.210 --> 00:59:44.210
<v Speaker 2>also something you could, you know, check-in in

00:59:44.210 --> 00:59:45.490
<v Speaker 2>your repository,

00:59:45.490 --> 00:59:47.410
<v Speaker 2>that, you know, policies folder.

00:59:48.765 --> 00:59:50.845
<v Speaker 2>But, again, like, it's it's not a requirement.

00:59:50.845 --> 00:59:51.805
<v Speaker 2>You could essentially

00:59:52.125 --> 00:59:54.525
<v Speaker 2>also have a CICD pipeline, which essentially does

00:59:54.525 --> 00:59:57.005
<v Speaker 2>that NPM compiled step and then runs kubectl

00:59:57.005 --> 00:59:57.885
<v Speaker 2>apply.

00:59:58.045 --> 00:59:59.244
<v Speaker 2>It's pretty much the same thing.

01:00:00.090 --> 01:00:01.690
<v Speaker 0>Yeah. I think some of them are seeing

01:00:01.690 --> 01:00:03.770
<v Speaker 0>now with, like, Argo and Flux is that

01:00:03.770 --> 01:00:06.090
<v Speaker 0>they're really providing the ability to run custom

01:00:06.090 --> 01:00:08.330
<v Speaker 0>commands on these repositories as well. So, I

01:00:08.330 --> 01:00:09.930
<v Speaker 0>mean, we're almost at a stage where I

01:00:09.930 --> 01:00:12.330
<v Speaker 0>could just hook this repository up to Argo

01:00:12.330 --> 01:00:14.090
<v Speaker 0>or Flux and just say, here, go run

01:00:14.090 --> 01:00:14.730
<v Speaker 0>an NPM

01:00:15.085 --> 01:00:17.165
<v Speaker 0>up up compile apply, and that would just

01:00:17.165 --> 01:00:18.925
<v Speaker 0>that would just do it. So

01:00:19.725 --> 01:00:21.165
<v Speaker 0>okay. Very cool.

01:00:21.725 --> 01:00:23.645
<v Speaker 0>Is there a if I click on the

01:00:23.645 --> 01:00:25.085
<v Speaker 0>test directory, is it gonna have a test,

01:00:25.085 --> 01:00:25.965
<v Speaker 0>or is it gonna be empty?

01:00:27.990 --> 01:00:30.070
<v Speaker 2>Oh, sure. Has, one sample test.

01:00:32.950 --> 01:00:34.390
<v Speaker 2>That's one sample test.

01:00:34.950 --> 01:00:35.590
<v Speaker 0>Nice.

01:00:35.990 --> 01:00:36.950
<v Speaker 0>So, yeah, we can

01:00:37.670 --> 01:00:39.270
<v Speaker 0>it's always nice to see an example of

01:00:39.270 --> 01:00:39.750
<v Speaker 0>tests.

01:00:41.035 --> 01:00:42.875
<v Speaker 0>I like testing, so I've been able to

01:00:42.875 --> 01:00:44.475
<v Speaker 0>see how to do that. Yeah. I'm definitely

01:00:44.475 --> 01:00:46.875
<v Speaker 0>gonna be forking this repository and stealing it

01:00:46.875 --> 01:00:49.835
<v Speaker 0>from my ingress objection thing. So very nice.

01:00:49.835 --> 01:00:51.435
<v Speaker 2>Yeah. It's also kinda nice. You can see

01:00:51.435 --> 01:00:53.115
<v Speaker 2>here that we're actually importing on the top

01:00:53.115 --> 01:00:56.260
<v Speaker 2>the official, like, Kubernetes client node. Right? And

01:00:56.260 --> 01:00:58.740
<v Speaker 2>we're creating pod objects down there. And because

01:00:58.740 --> 01:00:59.780
<v Speaker 2>it's TypeScript,

01:00:59.940 --> 01:01:01.300
<v Speaker 2>everything is typed,

01:01:01.780 --> 01:01:03.700
<v Speaker 2>which is pretty neat. So we're essentially creating

01:01:03.700 --> 01:01:06.820
<v Speaker 2>v one spec, you know, for the pod

01:01:07.300 --> 01:01:09.060
<v Speaker 2>and things like that. And it's essentially,

01:01:09.725 --> 01:01:11.645
<v Speaker 2>you know, a a lot more reliable than

01:01:11.645 --> 01:01:12.365
<v Speaker 2>having

01:01:13.485 --> 01:01:15.325
<v Speaker 2>only end to end tests where you apply

01:01:15.325 --> 01:01:17.245
<v Speaker 2>YAML to your cluster and see if the

01:01:17.245 --> 01:01:19.885
<v Speaker 2>policy actually works. You You can actually run

01:01:19.885 --> 01:01:22.045
<v Speaker 2>very fine granular tests on pretty much each

01:01:22.045 --> 01:01:22.765
<v Speaker 2>function

01:01:22.925 --> 01:01:24.365
<v Speaker 2>that you're writing in JavaScript.

01:01:25.770 --> 01:01:26.490
<v Speaker 0>Awesome.

01:01:27.370 --> 01:01:28.650
<v Speaker 0>Okay. We got I expect

01:01:29.050 --> 01:01:30.810
<v Speaker 1>there will be some folks who don't get

01:01:30.810 --> 01:01:33.050
<v Speaker 1>this deep, you know, who will just use

01:01:33.050 --> 01:01:34.170
<v Speaker 1>it and do,

01:01:34.330 --> 01:01:36.650
<v Speaker 1>you know, things more like what you see

01:01:36.650 --> 01:01:39.530
<v Speaker 1>in the examples. And and that's totally fine,

01:01:39.530 --> 01:01:41.355
<v Speaker 1>but, you know, there is this, you know,

01:01:41.355 --> 01:01:44.075
<v Speaker 1>extra power to to use all of the

01:01:44.075 --> 01:01:46.475
<v Speaker 1>the tools that come in that JavaScript ecosystem

01:01:46.475 --> 01:01:48.315
<v Speaker 1>if you if you wanna get that deep.

01:01:48.475 --> 01:01:49.515
<v Speaker 0>Yeah. Definitely.

01:01:50.395 --> 01:01:52.395
<v Speaker 0>We've got a question also Oh, I'm sorry.

01:01:52.395 --> 01:01:53.515
<v Speaker 0>I didn't go Oh, sorry. Go ahead.

01:01:54.869 --> 01:01:55.910
<v Speaker 0>I was just gonna say we have a

01:01:55.910 --> 01:01:58.230
<v Speaker 0>a question from Jack in the chat, which

01:01:58.230 --> 01:01:59.910
<v Speaker 0>I think I can even answer. But he

01:01:59.910 --> 01:02:02.789
<v Speaker 0>said, why import whole of Lodash here? I

01:02:02.789 --> 01:02:05.670
<v Speaker 0>mean, the answer is because you can. Right?

01:02:05.910 --> 01:02:07.430
<v Speaker 0>That's

01:02:07.430 --> 01:02:08.309
<v Speaker 0>why we would do it.

01:02:09.714 --> 01:02:11.315
<v Speaker 2>Yeah. I mean, in the end, I think

01:02:11.315 --> 01:02:13.395
<v Speaker 2>Webpack is gonna strip a lot away

01:02:13.795 --> 01:02:15.555
<v Speaker 2>that may not be needed even.

01:02:15.954 --> 01:02:18.355
<v Speaker 2>I I I'm not a Webpack expert, so

01:02:18.355 --> 01:02:19.555
<v Speaker 2>I don't know how it works, but I

01:02:19.555 --> 01:02:21.714
<v Speaker 2>think they're doing a lot of optimizations in

01:02:21.714 --> 01:02:23.490
<v Speaker 2>there. It does a lot of tree shaking

01:02:23.490 --> 01:02:25.490
<v Speaker 0>and modification and a whole bunch of other

01:02:25.490 --> 01:02:28.130
<v Speaker 0>fancy stuff that I've seen the compiler talks

01:02:28.210 --> 01:02:29.490
<v Speaker 0>from conferences,

01:02:29.490 --> 01:02:30.930
<v Speaker 0>but I had never paid enough attention to

01:02:30.930 --> 01:02:32.930
<v Speaker 0>understand it. Yeah. I believe you're right.

01:02:34.464 --> 01:02:35.105
<v Speaker 0>Okay.

01:02:35.345 --> 01:02:36.865
<v Speaker 2>I think one thing I wanted to point

01:02:36.865 --> 01:02:39.825
<v Speaker 2>out is sharing functions as well. If you

01:02:39.825 --> 01:02:42.625
<v Speaker 2>go to the policies folder again Mhmm. To

01:02:42.625 --> 01:02:44.785
<v Speaker 2>the to the source folder, sorry, with that

01:02:44.785 --> 01:02:46.145
<v Speaker 2>contains these policies,

01:02:46.385 --> 01:02:48.224
<v Speaker 2>you see this lip folder as well, right,

01:02:48.869 --> 01:02:50.630
<v Speaker 2>on the one level higher.

01:02:51.750 --> 01:02:53.829
<v Speaker 2>And that's essentially where you could, you know,

01:02:53.829 --> 01:02:57.109
<v Speaker 2>define functions that would be used by several

01:02:57.109 --> 01:02:58.230
<v Speaker 2>of your policies.

01:02:58.470 --> 01:03:00.710
<v Speaker 2>So, typically, your policies

01:03:00.710 --> 01:03:02.789
<v Speaker 2>are grouped by resources.

01:03:02.789 --> 01:03:03.029
<v Speaker 2>Right?

01:03:04.035 --> 01:03:06.194
<v Speaker 2>So you have certain policies which apply to

01:03:06.194 --> 01:03:06.995
<v Speaker 2>deployments.

01:03:07.315 --> 01:03:09.234
<v Speaker 2>You may have other ones which apply to

01:03:09.234 --> 01:03:12.115
<v Speaker 2>pods. Right? They have a totally different spec,

01:03:12.355 --> 01:03:14.915
<v Speaker 2>but you may wanna check similar things. You

01:03:14.915 --> 01:03:16.195
<v Speaker 2>may wanna prevent,

01:03:16.435 --> 01:03:19.280
<v Speaker 2>you know, privilege escalation, for example, and that's

01:03:19.280 --> 01:03:21.359
<v Speaker 2>part of the pod spec. But you also

01:03:21.359 --> 01:03:24.160
<v Speaker 2>wanna check it for deployments and stateful sets.

01:03:25.200 --> 01:03:27.360
<v Speaker 2>And in Lib, you'll find a function

01:03:27.520 --> 01:03:29.840
<v Speaker 2>which essentially can be shared and called from

01:03:29.840 --> 01:03:31.440
<v Speaker 2>both of these policies, essentially.

01:03:34.505 --> 01:03:37.065
<v Speaker 0>Where's the end containers or metadata?

01:03:41.145 --> 01:03:42.985
<v Speaker 2>Yeah. I think if you go to containers

01:03:42.985 --> 01:03:44.985
<v Speaker 2>and then validate capabilities,

01:03:44.985 --> 01:03:46.825
<v Speaker 2>for example, is one of them, or validate

01:03:46.825 --> 01:03:48.345
<v Speaker 2>images is another one. Right?

01:03:49.050 --> 01:03:51.130
<v Speaker 2>We're essentially running something here on the pod

01:03:51.130 --> 01:03:53.770
<v Speaker 2>spec, and this function expects the pod pod

01:03:53.770 --> 01:03:56.490
<v Speaker 2>spec as an input. Right? Alright. Okay. And

01:03:56.490 --> 01:03:58.570
<v Speaker 2>if you're now going to the policies

01:03:58.970 --> 01:03:59.690
<v Speaker 2>again,

01:04:00.570 --> 01:04:03.130
<v Speaker 2>so to your source to the source folder

01:04:04.655 --> 01:04:06.175
<v Speaker 2>and then policies,

01:04:06.175 --> 01:04:08.734
<v Speaker 2>and then you'll see deployments and parts. It's

01:04:08.734 --> 01:04:11.455
<v Speaker 2>two different right? We're validating them differently because

01:04:11.455 --> 01:04:13.775
<v Speaker 2>we may run different checks on them. Right?

01:04:13.775 --> 01:04:16.655
<v Speaker 2>Like, deployments might have, like, eight other functions

01:04:16.655 --> 01:04:17.935
<v Speaker 2>that need to be checked. Right?

01:04:18.609 --> 01:04:21.170
<v Speaker 2>They may have different annotations, etcetera, but both

01:04:21.170 --> 01:04:23.970
<v Speaker 2>of them wanna do that cap capabilities check.

01:04:24.770 --> 01:04:26.450
<v Speaker 2>And then we can essentially if you go

01:04:26.450 --> 01:04:28.690
<v Speaker 2>into validate ports, for example,

01:04:31.490 --> 01:04:33.490
<v Speaker 2>and then in the actual TypeScript code,

01:04:33.935 --> 01:04:36.415
<v Speaker 2>you'll see that we're running this validate container

01:04:36.415 --> 01:04:37.375
<v Speaker 2>capabilities,

01:04:37.375 --> 01:04:39.215
<v Speaker 2>and we're passing the pods back to it.

01:04:39.215 --> 01:04:39.695
<v Speaker 2>Right?

01:04:40.975 --> 01:04:42.415
<v Speaker 2>It's pretty straightforward.

01:04:44.255 --> 01:04:46.575
<v Speaker 0>Yeah. I like that. Being able to extract

01:04:46.575 --> 01:04:48.655
<v Speaker 0>all the common functionality into

01:04:48.940 --> 01:04:52.300
<v Speaker 0>shareable libraries to avoid duplicating code everywhere that

01:04:52.300 --> 01:04:54.540
<v Speaker 0>you go. And just having simple functions like

01:04:54.540 --> 01:04:57.660
<v Speaker 0>validate namespace and validate container images. Yeah, that

01:04:57.660 --> 01:04:59.020
<v Speaker 0>makes a lot of sense.

01:05:00.700 --> 01:05:01.820
<v Speaker 0>Very nice. I like that.

01:05:03.215 --> 01:05:05.055
<v Speaker 0>Alright. Is there anything

01:05:05.535 --> 01:05:07.295
<v Speaker 0>else from an example of repository you would

01:05:07.295 --> 01:05:09.135
<v Speaker 0>like to show our audience before we finish

01:05:09.135 --> 01:05:10.015
<v Speaker 0>up for today?

01:05:12.095 --> 01:05:14.095
<v Speaker 2>I think that was a lot of content

01:05:14.095 --> 01:05:14.495
<v Speaker 2>already.

01:05:16.380 --> 01:05:18.059
<v Speaker 0>No. That that that's alright. We have we

01:05:18.059 --> 01:05:19.420
<v Speaker 0>have covered a lot.

01:05:21.180 --> 01:05:22.780
<v Speaker 0>A lot for hold on. Let me pop

01:05:22.780 --> 01:05:23.660
<v Speaker 0>it back over to

01:05:24.619 --> 01:05:26.940
<v Speaker 0>there we go. Yeah. There there there is

01:05:26.940 --> 01:05:28.700
<v Speaker 0>a lot here. I mean, I think

01:05:29.605 --> 01:05:33.205
<v Speaker 0>just exploring the capabilities from the validating and

01:05:33.205 --> 01:05:34.965
<v Speaker 0>mutating aspect and be able to bring that

01:05:34.965 --> 01:05:36.005
<v Speaker 0>into my cluster

01:05:36.245 --> 01:05:38.085
<v Speaker 0>and to be able to enforce the policies

01:05:38.085 --> 01:05:39.525
<v Speaker 0>that I need and make the changes that

01:05:39.525 --> 01:05:41.605
<v Speaker 0>I need is a great way just to

01:05:41.605 --> 01:05:43.045
<v Speaker 0>get started and kick the tires on this

01:05:43.045 --> 01:05:44.405
<v Speaker 0>and build out that tooling. I really,

01:05:45.300 --> 01:05:46.900
<v Speaker 0>you know, need to explore how to apply

01:05:46.900 --> 01:05:48.420
<v Speaker 0>this to my cluster and get it started,

01:05:48.420 --> 01:05:49.940
<v Speaker 0>and I'm very excited to do that.

01:05:50.340 --> 01:05:52.260
<v Speaker 0>And we never really touched a lot on

01:05:52.260 --> 01:05:54.500
<v Speaker 0>the controller stuff, but there's just a whole

01:05:54.500 --> 01:05:57.140
<v Speaker 0>bunch of different capabilities there that I could

01:05:57.140 --> 01:05:58.980
<v Speaker 0>just have a field day with playing with.

01:06:00.275 --> 01:06:02.035
<v Speaker 1>I think there's, you know, potentially at least

01:06:02.035 --> 01:06:03.635
<v Speaker 1>a couple of different types of users of

01:06:03.635 --> 01:06:06.195
<v Speaker 1>this. Right? Like, one is the people

01:06:06.675 --> 01:06:09.315
<v Speaker 1>like you who, you know, are very familiar

01:06:09.315 --> 01:06:11.875
<v Speaker 1>with JavaScript and TypeScript and and wanna get

01:06:11.875 --> 01:06:14.340
<v Speaker 1>deep and and do those things. But I

01:06:14.340 --> 01:06:16.500
<v Speaker 1>think, you know, another set is the folks

01:06:16.500 --> 01:06:19.300
<v Speaker 1>that were the reason that this got built,

01:06:19.300 --> 01:06:20.660
<v Speaker 1>which are the people who

01:06:20.900 --> 01:06:22.340
<v Speaker 1>have tried to use some of the other

01:06:22.340 --> 01:06:24.660
<v Speaker 1>tools and, you know, had difficulty for some

01:06:24.660 --> 01:06:27.605
<v Speaker 1>reason and are looking for something where the

01:06:27.605 --> 01:06:30.244
<v Speaker 1>policies are are easier to read. And,

01:06:30.645 --> 01:06:32.405
<v Speaker 1>you know, the thing that I wanna emphasize

01:06:32.405 --> 01:06:33.285
<v Speaker 1>is that

01:06:34.085 --> 01:06:36.724
<v Speaker 1>you should be doing admission control, whichever of

01:06:36.724 --> 01:06:39.620
<v Speaker 1>these tools that you use. Right? Yeah. Like,

01:06:39.620 --> 01:06:41.540
<v Speaker 1>if you're not doing it at all and

01:06:41.540 --> 01:06:43.220
<v Speaker 1>you're not doing it because

01:06:43.300 --> 01:06:45.460
<v Speaker 1>you tried and it was hard,

01:06:45.940 --> 01:06:48.180
<v Speaker 1>I really recommend taking a look at at

01:06:48.180 --> 01:06:49.300
<v Speaker 1>jsPolicy.

01:06:50.900 --> 01:06:54.665
<v Speaker 0>Yeah. You're 100% right. Like, people need to

01:06:54.665 --> 01:06:56.825
<v Speaker 0>be adding policies to their cluster,

01:06:57.145 --> 01:06:59.385
<v Speaker 0>especially with policy could be policies being deprecated.

01:06:59.385 --> 01:07:00.905
<v Speaker 0>There's a whole bunch of malicious things there

01:07:00.905 --> 01:07:02.744
<v Speaker 0>that just need to be stamped out, and

01:07:02.744 --> 01:07:03.545
<v Speaker 0>jsPolicy

01:07:03.545 --> 01:07:04.585
<v Speaker 0>is a nice way of doing that. I

01:07:04.585 --> 01:07:07.145
<v Speaker 0>really like that capability of working with Versus

01:07:07.145 --> 01:07:09.930
<v Speaker 0>Code, getting syntax highlight, and, you know, even

01:07:09.930 --> 01:07:11.050
<v Speaker 0>using Copilot.

01:07:11.050 --> 01:07:12.650
<v Speaker 0>I wonder how many of my policies I

01:07:12.650 --> 01:07:14.090
<v Speaker 0>could probably write if I just let it

01:07:14.090 --> 01:07:15.290
<v Speaker 0>try and do it for me.

01:07:15.770 --> 01:07:17.530
<v Speaker 0>That's really funny. Sorry.

01:07:17.849 --> 01:07:18.490
<v Speaker 0>How'd you go?

01:07:19.210 --> 01:07:20.650
<v Speaker 1>No. I I was just gonna say I

01:07:20.650 --> 01:07:22.330
<v Speaker 1>I hadn't even thought about that. I I

01:07:22.330 --> 01:07:24.755
<v Speaker 1>don't have access to Copilot yet, so I

01:07:24.755 --> 01:07:26.755
<v Speaker 1>haven't I haven't I've gotta be honest. I'm

01:07:26.755 --> 01:07:28.675
<v Speaker 0>so amazed by it. And I know there's

01:07:28.675 --> 01:07:30.515
<v Speaker 0>a there's a whole bunch of ethical debates

01:07:30.515 --> 01:07:32.195
<v Speaker 0>right now about whether we should be using

01:07:32.195 --> 01:07:34.355
<v Speaker 0>it and such, but I have found that

01:07:34.355 --> 01:07:36.035
<v Speaker 0>it reads my mind. Like, I can just

01:07:36.035 --> 01:07:36.995
<v Speaker 0>write, I want to

01:07:37.480 --> 01:07:39.160
<v Speaker 0>start something with this, and then it goes,

01:07:39.160 --> 01:07:40.520
<v Speaker 0>oh, you're trying to do this thing. And

01:07:40.520 --> 01:07:42.280
<v Speaker 0>I'm like, yeah. I am trying to do

01:07:42.280 --> 01:07:43.000
<v Speaker 0>that thing.

01:07:43.400 --> 01:07:44.520
<v Speaker 0>So maybe

01:07:44.840 --> 01:07:47.240
<v Speaker 0>in time, as more people adopt JS policy

01:07:47.240 --> 01:07:48.760
<v Speaker 0>and are writing their policies, we'll find that

01:07:48.760 --> 01:07:50.680
<v Speaker 0>a lot of that Copilot magic is gonna

01:07:50.680 --> 01:07:51.160
<v Speaker 0>work there.

01:07:51.945 --> 01:07:53.945
<v Speaker 0>And pod security policies be I can see

01:07:53.945 --> 01:07:55.945
<v Speaker 0>that being distributed as an NPM package, and

01:07:55.945 --> 01:07:57.785
<v Speaker 0>I'm leading on top of that more and

01:07:57.785 --> 01:07:58.265
<v Speaker 0>more

01:07:58.585 --> 01:08:00.665
<v Speaker 0>best practices that are really hard to find

01:08:00.665 --> 01:08:02.905
<v Speaker 0>in the Kubernetes ecosystems. And I think with

01:08:02.905 --> 01:08:05.130
<v Speaker 0>JS policy, Loft are now in a really

01:08:05.130 --> 01:08:07.290
<v Speaker 0>unique position to be able to distribute that

01:08:07.290 --> 01:08:09.210
<v Speaker 0>in a very consumable way that we haven't

01:08:09.210 --> 01:08:11.530
<v Speaker 0>really seen before. Very exciting stuff.

01:08:12.569 --> 01:08:14.650
<v Speaker 0>Any final words before I let you both

01:08:14.650 --> 01:08:15.690
<v Speaker 0>get back to your day?

01:08:18.895 --> 01:08:21.135
<v Speaker 2>Just thank you so much for for another

01:08:21.135 --> 01:08:23.775
<v Speaker 2>invitation. That that that's really great that we,

01:08:23.775 --> 01:08:24.335
<v Speaker 2>you know,

01:08:24.815 --> 01:08:27.455
<v Speaker 2>are talking about a second project just, like,

01:08:27.455 --> 01:08:29.055
<v Speaker 2>I think, like, a month later or so

01:08:29.055 --> 01:08:29.854
<v Speaker 2>or two months later.

01:08:30.829 --> 01:08:32.349
<v Speaker 2>It was a lot of fun talking about

01:08:32.349 --> 01:08:33.149
<v Speaker 2>vCluster,

01:08:33.149 --> 01:08:35.149
<v Speaker 2>and it looks like jsPolicy

01:08:35.710 --> 01:08:38.269
<v Speaker 2>went smooth regarding the demo as well. Like

01:08:38.269 --> 01:08:39.949
<v Speaker 2>to see that I was since you mentioned

01:08:39.949 --> 01:08:41.550
<v Speaker 2>at the beginning, I was kind of afraid,

01:08:41.550 --> 01:08:43.789
<v Speaker 2>you know, is this gonna break something?

01:08:44.234 --> 01:08:45.915
<v Speaker 2>But it didn't This one this one is

01:08:45.915 --> 01:08:48.795
<v Speaker 1>a little different because vCluster is something that

01:08:48.875 --> 01:08:51.274
<v Speaker 1>had been part of our commercial prod product

01:08:51.274 --> 01:08:53.435
<v Speaker 1>before we open sourced it. Right? And so

01:08:53.435 --> 01:08:55.514
<v Speaker 1>people have been kicking the tires on that

01:08:55.514 --> 01:08:58.390
<v Speaker 1>for for quite a while, but but jsPolicy

01:08:58.390 --> 01:09:00.389
<v Speaker 1>is is quite a bit newer.

01:09:01.270 --> 01:09:03.590
<v Speaker 1>But it it's always fun to to see

01:09:03.590 --> 01:09:05.430
<v Speaker 1>your take on these rules, David. Like, you

01:09:05.430 --> 01:09:07.670
<v Speaker 1>know, you always come up with some things

01:09:07.670 --> 01:09:10.069
<v Speaker 1>that I hadn't even thought of, and so

01:09:10.069 --> 01:09:11.990
<v Speaker 1>it's it's a real pleasure to get to

01:09:11.990 --> 01:09:12.470
<v Speaker 1>come on here.

01:09:13.135 --> 01:09:14.415
<v Speaker 0>Well, yeah. Thank you.

01:09:15.615 --> 01:09:16.734
<v Speaker 0>It's just really

01:09:16.975 --> 01:09:18.655
<v Speaker 0>I'm I'm really happy with what I've seen

01:09:18.655 --> 01:09:20.175
<v Speaker 0>so far. And like I said, I've already

01:09:20.175 --> 01:09:21.615
<v Speaker 0>got a direct use case that I'm gonna

01:09:21.615 --> 01:09:22.734
<v Speaker 0>have to go and kick a tires with

01:09:22.734 --> 01:09:24.575
<v Speaker 0>us this week. So, you know, I'll be

01:09:24.575 --> 01:09:26.620
<v Speaker 0>sure to to share my successes or failures

01:09:26.620 --> 01:09:28.220
<v Speaker 0>but I'm pretty confident based on what I've

01:09:28.220 --> 01:09:30.140
<v Speaker 0>seen today that it's it's gonna be wonderful

01:09:30.140 --> 01:09:31.500
<v Speaker 0>for for what I need.

01:09:32.300 --> 01:09:34.620
<v Speaker 0>Unfortunately for you too know how it goes.

01:09:35.100 --> 01:09:37.260
<v Speaker 0>Unfortunately for you too, that you've now come

01:09:37.260 --> 01:09:39.184
<v Speaker 0>on and demoed two projects that I really,

01:09:39.184 --> 01:09:40.864
<v Speaker 0>really like. So, like, the third one's gonna

01:09:40.864 --> 01:09:42.545
<v Speaker 0>have to be phenomenal. I don't know why

01:09:42.545 --> 01:09:44.704
<v Speaker 0>you've got cooking in the kitchen, but it's

01:09:44.704 --> 01:09:45.744
<v Speaker 0>gonna have to be good.

01:09:46.625 --> 01:09:48.385
<v Speaker 0>So no pressure. I think we I think

01:09:48.385 --> 01:09:50.625
<v Speaker 1>we've maybe taken a break from launching new

01:09:50.625 --> 01:09:52.864
<v Speaker 1>open source tools for a little bit. We

01:09:53.184 --> 01:09:56.060
<v Speaker 1>we'll see. Would yeah. Because you're already tackling

01:09:56.060 --> 01:09:59.420
<v Speaker 0>difficult problems like policy and multitenant. Like, anytime

01:09:59.420 --> 01:10:00.940
<v Speaker 0>I now have a difficult problem, I'm just

01:10:00.940 --> 01:10:02.780
<v Speaker 0>gonna have to be like, hey. Here's the

01:10:02.780 --> 01:10:05.180
<v Speaker 0>thing. Please go run with it. So we'll

01:10:05.180 --> 01:10:05.260
<v Speaker 0>see.

01:10:06.395 --> 01:10:08.395
<v Speaker 0>Alright. Thank you both again. It was an

01:10:08.395 --> 01:10:10.235
<v Speaker 0>absolute pleasure to work through this. A very

01:10:10.235 --> 01:10:12.555
<v Speaker 0>exciting tool. I encourage everyone who's watched and

01:10:12.555 --> 01:10:14.235
<v Speaker 0>followed along to go check it out and

01:10:14.235 --> 01:10:16.795
<v Speaker 0>simplify your policy management on Kubernetes.

01:10:17.355 --> 01:10:19.035
<v Speaker 0>I hope you both have a wonderful day.

01:10:19.035 --> 01:10:20.395
<v Speaker 0>I'll let you go now, and I'll hopefully

01:10:20.395 --> 01:10:21.900
<v Speaker 0>speak to you again soon. Have a good

01:10:21.900 --> 01:10:23.900
<v Speaker 0>one. Bye. Thanks, Steven.

01:10:24.620 --> 01:10:25.020
<v Speaker 0>Bye.
