WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 66cf29e7-c7b2-4fb2-b8ac-ba7ff3d83832
Created: 2025-04-29T22:36:20.671Z
Duration: 3078.0225
Channels: 1

00:01:28.905 --> 00:01:30.505
<v Speaker 0>Hello. Hello. Hello.

00:01:30.905 --> 00:01:31.625
<v Speaker 0>Hello.

00:01:32.185 --> 00:01:33.785
<v Speaker 0>Hey, Dan. How's it going?

00:01:34.265 --> 00:01:36.825
<v Speaker 1>It's going very well at the moment. I

00:01:36.825 --> 00:01:38.825
<v Speaker 1>I will start off by apologizing to the

00:01:38.825 --> 00:01:40.560
<v Speaker 1>fact that I appear to be a circle

00:01:40.560 --> 00:01:41.200
<v Speaker 1>that

00:01:41.840 --> 00:01:44.160
<v Speaker 1>pulses as I speak. My machine is so

00:01:44.160 --> 00:01:45.680
<v Speaker 1>unstable at the moment that

00:01:46.320 --> 00:01:48.240
<v Speaker 1>webcams cause it to power cycle at the

00:01:48.240 --> 00:01:48.720
<v Speaker 1>moment.

00:01:50.400 --> 00:01:51.600
<v Speaker 0>Because computers.

00:01:52.825 --> 00:01:55.305
<v Speaker 0>Yes. Maybe I'll I could do this this

00:01:55.305 --> 00:01:56.665
<v Speaker 0>minor inconvenience,

00:01:56.665 --> 00:01:58.745
<v Speaker 0>and we will just respect the

00:01:58.985 --> 00:02:00.665
<v Speaker 0>the circle, I guess.

00:02:01.305 --> 00:02:02.825
<v Speaker 0>Plus, we're not here to see your face.

00:02:02.825 --> 00:02:04.825
<v Speaker 0>We're here to see your code and your

00:02:04.825 --> 00:02:05.465
<v Speaker 0>demonstration.

00:02:07.510 --> 00:02:09.670
<v Speaker 0>Fear not. Excellent. So

00:02:11.030 --> 00:02:11.910
<v Speaker 0>today,

00:02:12.070 --> 00:02:13.910
<v Speaker 0>we're gonna take a look at one of

00:02:13.910 --> 00:02:15.830
<v Speaker 0>your open source project.

00:02:16.310 --> 00:02:18.070
<v Speaker 0>It's called kube VIP.

00:02:18.070 --> 00:02:20.950
<v Speaker 0>So why don't you just give a quick

00:02:20.085 --> 00:02:22.645
<v Speaker 0>thirty seconds intro about yourself and the project,

00:02:22.645 --> 00:02:23.845
<v Speaker 0>and then we'll take it from there.

00:02:24.645 --> 00:02:25.765
<v Speaker 1>Sure. So,

00:02:26.965 --> 00:02:29.365
<v Speaker 1>yeah, I've I've been kind of involved

00:02:29.445 --> 00:02:31.205
<v Speaker 1>a little bit in writing kind of software

00:02:31.205 --> 00:02:32.805
<v Speaker 1>around bare metal for a little bit of

00:02:32.805 --> 00:02:33.205
<v Speaker 1>time now.

00:02:34.379 --> 00:02:36.700
<v Speaker 1>It mainly stemmed from a customer that we

00:02:36.700 --> 00:02:39.020
<v Speaker 1>had when I was based in Hep Heptio.

00:02:40.060 --> 00:02:41.659
<v Speaker 1>Traveled all the way to go see this

00:02:41.659 --> 00:02:43.900
<v Speaker 1>customer in The Middle East, and I was

00:02:43.900 --> 00:02:46.060
<v Speaker 1>basically left to my own devices

00:02:46.220 --> 00:02:46.939
<v Speaker 1>in that

00:02:48.584 --> 00:02:50.584
<v Speaker 1>these people this customer was like, we want

00:02:50.584 --> 00:02:53.145
<v Speaker 1>a Kubernetes cluster on bare metal,

00:02:53.545 --> 00:02:54.584
<v Speaker 1>and we'll see you at the end of

00:02:54.584 --> 00:02:55.145
<v Speaker 1>the week,

00:02:55.864 --> 00:02:58.825
<v Speaker 1>which was nice. So I I kind of,

00:02:58.825 --> 00:03:00.745
<v Speaker 1>you know, I spent the week writing

00:03:01.064 --> 00:03:03.040
<v Speaker 1>a load of bash scripts to kind of

00:03:03.040 --> 00:03:04.640
<v Speaker 1>automate the process and,

00:03:04.879 --> 00:03:06.079
<v Speaker 1>you know, kind of the few things that

00:03:06.079 --> 00:03:08.079
<v Speaker 1>they specified was they wanted it as cloud

00:03:08.079 --> 00:03:09.520
<v Speaker 1>like as possible.

00:03:11.599 --> 00:03:12.240
<v Speaker 1>And,

00:03:12.400 --> 00:03:13.760
<v Speaker 1>you know, I kind of did with the

00:03:13.760 --> 00:03:15.200
<v Speaker 1>best that I could within that that one

00:03:15.200 --> 00:03:17.439
<v Speaker 1>week and kind of handed over to them

00:03:17.439 --> 00:03:19.265
<v Speaker 1>this this cluster all running on

00:03:19.665 --> 00:03:21.345
<v Speaker 1>a bunch of Dell machines.

00:03:22.224 --> 00:03:24.465
<v Speaker 1>But, you know, it's kinda quite clear that

00:03:24.465 --> 00:03:26.465
<v Speaker 1>I'd handed something over to them that they

00:03:26.465 --> 00:03:28.305
<v Speaker 1>still really weren't gonna be able to use

00:03:28.305 --> 00:03:29.105
<v Speaker 1>once I'd left.

00:03:31.620 --> 00:03:33.219
<v Speaker 1>But, you know, I kind of carried on

00:03:33.219 --> 00:03:34.900
<v Speaker 1>working with them a little bit after that.

00:03:35.620 --> 00:03:38.260
<v Speaker 1>And the more customers that I kind of

00:03:38.260 --> 00:03:39.859
<v Speaker 1>worked with that were looking kinda doing more

00:03:39.859 --> 00:03:41.060
<v Speaker 1>and more bare metal

00:03:41.620 --> 00:03:42.099
<v Speaker 1>deployments,

00:03:42.924 --> 00:03:44.525
<v Speaker 1>the more I kind of realized that there

00:03:44.525 --> 00:03:46.685
<v Speaker 1>was kind of quite a sizable hole in

00:03:46.685 --> 00:03:47.485
<v Speaker 1>terms of

00:03:48.125 --> 00:03:50.685
<v Speaker 1>what there was in the ecosystem in order

00:03:50.685 --> 00:03:52.525
<v Speaker 1>to kind of just do the deployment.

00:03:53.644 --> 00:03:55.485
<v Speaker 1>And then as we as I looked at

00:03:55.485 --> 00:03:57.325
<v Speaker 1>kind of trying to automate that and scale

00:03:57.325 --> 00:03:58.444
<v Speaker 1>those sorts of things up,

00:04:00.020 --> 00:04:03.060
<v Speaker 1>dealing with the load balancing part in front

00:04:03.060 --> 00:04:05.380
<v Speaker 1>of the in front of your control plane

00:04:06.180 --> 00:04:08.420
<v Speaker 1>started to annoy me in terms of what

00:04:08.420 --> 00:04:10.020
<v Speaker 1>was out there at the moment.

00:04:10.420 --> 00:04:11.860
<v Speaker 1>So I ended up

00:04:13.175 --> 00:04:15.175
<v Speaker 1>fiddling as I, I guess, I often do

00:04:15.175 --> 00:04:16.535
<v Speaker 1>and kind of coming up with

00:04:16.855 --> 00:04:18.695
<v Speaker 1>few ideas and how I could kind of

00:04:18.695 --> 00:04:20.615
<v Speaker 1>make things a bit easier,

00:04:20.935 --> 00:04:23.015
<v Speaker 1>especially in kind of conjunction things like cluster

00:04:23.015 --> 00:04:25.255
<v Speaker 1>API, which Jason was talking about

00:04:25.735 --> 00:04:26.455
<v Speaker 1>last week.

00:04:28.510 --> 00:04:29.950
<v Speaker 1>And that's kind of led me to where

00:04:29.950 --> 00:04:31.070
<v Speaker 1>I am at the moment.

00:04:33.470 --> 00:04:34.270
<v Speaker 0>Wow.

00:04:34.270 --> 00:04:37.710
<v Speaker 0>Interesting. Really, really interesting. So this

00:04:38.750 --> 00:04:40.350
<v Speaker 0>project is part of

00:04:41.444 --> 00:04:44.245
<v Speaker 0>I'm still laughing at clouds like Kubernetes,

00:04:44.245 --> 00:04:45.925
<v Speaker 0>but I'm gonna come back to that later.

00:04:46.004 --> 00:04:48.724
<v Speaker 0>That's that's the QVIP project is is part

00:04:48.724 --> 00:04:51.205
<v Speaker 0>of something broader called Plunder app. Do you

00:04:51.205 --> 00:04:52.725
<v Speaker 0>wanna just cover that as well?

00:04:53.284 --> 00:04:54.884
<v Speaker 1>Yeah. Sure. So

00:04:55.470 --> 00:04:56.670
<v Speaker 1>Plunder is

00:04:56.990 --> 00:05:00.510
<v Speaker 1>essentially a a bare metal provisioning tool.

00:05:01.950 --> 00:05:04.270
<v Speaker 1>So it's it's effectively

00:05:04.990 --> 00:05:07.310
<v Speaker 1>a a wrapper or or a load of

00:05:07.310 --> 00:05:10.015
<v Speaker 1>code around a bunch of, like, super old

00:05:10.015 --> 00:05:11.055
<v Speaker 1>technologies.

00:05:12.575 --> 00:05:13.935
<v Speaker 1>So, like, mainly

00:05:14.015 --> 00:05:14.975
<v Speaker 1>DHCP,

00:05:14.975 --> 00:05:15.775
<v Speaker 1>TFTP,

00:05:15.775 --> 00:05:17.455
<v Speaker 1>and HTTP, which are all

00:05:18.015 --> 00:05:20.655
<v Speaker 1>20 or 30 years old and are kinda

00:05:20.655 --> 00:05:21.695
<v Speaker 1>quite hard to manage

00:05:23.680 --> 00:05:26.000
<v Speaker 1>from a a static point of view. A

00:05:26.000 --> 00:05:28.160
<v Speaker 1>lot of configuration files and things like that.

00:05:28.160 --> 00:05:30.400
<v Speaker 1>So the main goal around all of this

00:05:30.400 --> 00:05:32.320
<v Speaker 1>was to basically put an API on top

00:05:32.320 --> 00:05:33.200
<v Speaker 1>of all of this,

00:05:33.680 --> 00:05:35.760
<v Speaker 1>and that is effectively what Plunder does. It

00:05:35.760 --> 00:05:38.480
<v Speaker 1>it it provides an API

00:05:38.185 --> 00:05:39.305
<v Speaker 1>on top of

00:05:39.945 --> 00:05:41.865
<v Speaker 1>DHCP and TFTP.

00:05:41.945 --> 00:05:43.305
<v Speaker 1>And it it it actually

00:05:43.865 --> 00:05:46.265
<v Speaker 1>has all of those technologies built in. So

00:05:46.265 --> 00:05:48.185
<v Speaker 1>even though it's a single binary, it runs

00:05:48.185 --> 00:05:49.945
<v Speaker 1>as, like, three or four different servers.

00:05:51.330 --> 00:05:52.930
<v Speaker 1>And then exposes all of those in a

00:05:52.930 --> 00:05:54.050
<v Speaker 1>way that we can I can kind of

00:05:54.050 --> 00:05:54.850
<v Speaker 1>automate

00:05:55.730 --> 00:05:57.970
<v Speaker 1>and actually do then bare metal provisioning?

00:05:58.449 --> 00:05:59.330
<v Speaker 1>So that's

00:05:59.570 --> 00:06:01.810
<v Speaker 1>again, you know, I had an itch and

00:06:01.810 --> 00:06:03.570
<v Speaker 1>this is kind of the the scratch to

00:06:03.570 --> 00:06:06.210
<v Speaker 1>that itch, I suppose, on on bare metal

00:06:06.210 --> 00:06:06.690
<v Speaker 1>provisioning.

00:06:08.265 --> 00:06:10.825
<v Speaker 0>Yeah. I mean, tackling these kind of problems.

00:06:10.825 --> 00:06:12.745
<v Speaker 0>I mean, would you say you have masochistic

00:06:13.225 --> 00:06:14.105
<v Speaker 0>tendencies?

00:06:14.505 --> 00:06:15.305
<v Speaker 1>Well, so,

00:06:15.705 --> 00:06:17.545
<v Speaker 1>I mean, I I I did a talk

00:06:17.545 --> 00:06:19.145
<v Speaker 1>about this at one of the Go

00:06:19.545 --> 00:06:21.465
<v Speaker 1>meetups not so long ago where I had

00:06:21.465 --> 00:06:23.840
<v Speaker 1>to apologize. Well, I I felt that I

00:06:23.840 --> 00:06:25.360
<v Speaker 1>should apologize because

00:06:25.840 --> 00:06:27.920
<v Speaker 1>I was developing a lot of this whilst

00:06:27.920 --> 00:06:29.920
<v Speaker 1>I was kind of, you know, working with

00:06:29.920 --> 00:06:32.240
<v Speaker 1>customers. And at one point, I was in

00:06:32.240 --> 00:06:33.680
<v Speaker 1>a a hotel in Germany,

00:06:34.320 --> 00:06:36.080
<v Speaker 1>and I've been developing this

00:06:36.825 --> 00:06:38.585
<v Speaker 1>on my laptop with a bunch of VMs

00:06:38.585 --> 00:06:40.905
<v Speaker 1>and things. And I left my laptop kinda

00:06:40.905 --> 00:06:42.505
<v Speaker 1>connected to the network. And when I came

00:06:42.505 --> 00:06:43.625
<v Speaker 1>back from dinner,

00:06:44.665 --> 00:06:46.825
<v Speaker 1>I noticed that one of the wall computers

00:06:46.825 --> 00:06:48.745
<v Speaker 1>that they had, which advertised what was taking

00:06:48.745 --> 00:06:50.105
<v Speaker 1>place in one of the conference rooms,

00:06:50.600 --> 00:06:53.080
<v Speaker 1>actually had a Linux prompt being displayed on

00:06:53.080 --> 00:06:53.560
<v Speaker 1>it.

00:06:53.960 --> 00:06:55.960
<v Speaker 1>It turned out that all of those machines

00:06:55.960 --> 00:06:57.320
<v Speaker 1>would DHCP

00:06:57.320 --> 00:06:59.320
<v Speaker 1>boot on the same network as the Wi

00:06:59.320 --> 00:06:59.960
<v Speaker 1>Fi.

00:07:00.280 --> 00:07:03.639
<v Speaker 1>And I've been basically giving out leases to

00:07:04.245 --> 00:07:06.645
<v Speaker 1>various machines around the hotel which should start

00:07:06.645 --> 00:07:08.725
<v Speaker 1>provisioning themselves from Plunder.

00:07:09.125 --> 00:07:09.605
<v Speaker 1>So they

00:07:10.165 --> 00:07:12.645
<v Speaker 1>yeah. I mean, it's it's dangerous technology

00:07:12.645 --> 00:07:14.325
<v Speaker 1>in the wrong hands, I suppose.

00:07:14.885 --> 00:07:17.445
<v Speaker 0>Please never work on this project when you're

00:07:17.445 --> 00:07:18.805
<v Speaker 0>on a plane, at least if I'm on

00:07:18.805 --> 00:07:21.150
<v Speaker 0>it, for sure. Yeah. Yeah. Okay.

00:07:23.069 --> 00:07:23.790
<v Speaker 0>So

00:07:23.949 --> 00:07:26.270
<v Speaker 0>we're gonna take a look at is it

00:07:26.270 --> 00:07:28.510
<v Speaker 0>kube kube-vet or kube-vip?

00:07:29.550 --> 00:07:31.710
<v Speaker 1>I I've called it kube-vip,

00:07:31.710 --> 00:07:33.895
<v Speaker 1>but, I mean, it it's I I mean,

00:07:33.895 --> 00:07:35.815
<v Speaker 1>I have no there's no kube cuddle, kube

00:07:35.815 --> 00:07:36.455
<v Speaker 1>control

00:07:37.015 --> 00:07:39.575
<v Speaker 1>arguments here on on that one. Well, that's

00:07:39.575 --> 00:07:41.095
<v Speaker 0>a cloud native way. Like, we have to

00:07:41.095 --> 00:07:43.415
<v Speaker 0>we have to argue or debate the semantics

00:07:43.415 --> 00:07:45.975
<v Speaker 0>of the pronunciation. So I'm gonna say kube-vip.

00:07:45.975 --> 00:07:47.760
<v Speaker 0>You can continue to say vet, then we'll

00:07:47.760 --> 00:07:49.760
<v Speaker 0>let other people make their own team or

00:07:49.760 --> 00:07:51.360
<v Speaker 0>decisions. No problem.

00:07:52.240 --> 00:07:54.960
<v Speaker 0>So let's let's look at the

00:07:55.040 --> 00:07:57.360
<v Speaker 0>the GitHub page here. So it's a Kubernetes

00:07:57.360 --> 00:08:00.400
<v Speaker 0>control plane, virtual IP, and load balancer. So

00:08:00.675 --> 00:08:03.875
<v Speaker 0>what makes bare metal different from, you know,

00:08:03.875 --> 00:08:05.794
<v Speaker 0>maybe Kubernetes customers that people are used to

00:08:05.794 --> 00:08:08.915
<v Speaker 0>running on AWS, GCP, etcetera?

00:08:09.955 --> 00:08:11.794
<v Speaker 1>The biggest thing that's kind of missing is

00:08:11.794 --> 00:08:13.075
<v Speaker 1>the out of the box

00:08:14.410 --> 00:08:17.290
<v Speaker 1>IP address and kind of load balancer.

00:08:17.290 --> 00:08:17.850
<v Speaker 1>So

00:08:18.410 --> 00:08:19.850
<v Speaker 1>with AWS

00:08:19.850 --> 00:08:20.650
<v Speaker 1>or

00:08:21.770 --> 00:08:23.050
<v Speaker 1>Azure, etcetera,

00:08:23.930 --> 00:08:25.210
<v Speaker 1>all of the bits that you kind of

00:08:25.210 --> 00:08:26.650
<v Speaker 1>need to have

00:08:26.970 --> 00:08:29.690
<v Speaker 1>another IP address that that can move around

00:08:30.465 --> 00:08:32.465
<v Speaker 1>or you'd be used to point at a

00:08:32.465 --> 00:08:34.225
<v Speaker 1>different member of the control plane is is

00:08:34.225 --> 00:08:35.424
<v Speaker 1>already exists.

00:08:35.985 --> 00:08:37.665
<v Speaker 1>When we look at bare metal,

00:08:38.865 --> 00:08:40.785
<v Speaker 1>a lot of those technologies you have to

00:08:40.785 --> 00:08:42.065
<v Speaker 1>implement yourself

00:08:42.705 --> 00:08:44.625
<v Speaker 1>and manage them yourself as well.

00:08:45.389 --> 00:08:48.670
<v Speaker 1>So Are we using something like KeepAliveD?

00:08:48.910 --> 00:08:51.069
<v Speaker 1>Is that Yes. Is that doing something similar,

00:08:51.069 --> 00:08:53.790
<v Speaker 0>like, is responsibility school? It is. Yes. So

00:08:53.790 --> 00:08:55.149
<v Speaker 1>KeepAliveD,

00:08:55.949 --> 00:08:57.629
<v Speaker 1>there there are a couple of others I

00:08:57.629 --> 00:08:59.070
<v Speaker 1>think I mentioned at the bottom

00:08:59.709 --> 00:09:00.190
<v Speaker 1>on there.

00:09:00.995 --> 00:09:02.755
<v Speaker 1>They do work in the in in a

00:09:02.755 --> 00:09:05.475
<v Speaker 1>similar manner and that you would have a

00:09:05.475 --> 00:09:07.395
<v Speaker 1>keep alive cluster as such.

00:09:08.195 --> 00:09:10.675
<v Speaker 1>And that would do some level of

00:09:11.315 --> 00:09:13.635
<v Speaker 1>voting or whatever cluster management

00:09:14.070 --> 00:09:16.470
<v Speaker 1>and move an IP address around.

00:09:18.230 --> 00:09:20.230
<v Speaker 1>The problem that I kind of found there

00:09:20.230 --> 00:09:21.670
<v Speaker 1>is that I would then need to have

00:09:21.670 --> 00:09:22.470
<v Speaker 1>to manage

00:09:23.030 --> 00:09:24.550
<v Speaker 1>an an extra cluster,

00:09:24.950 --> 00:09:26.150
<v Speaker 1>a keep alive cluster,

00:09:26.470 --> 00:09:27.910
<v Speaker 1>and the configuration

00:09:27.910 --> 00:09:29.190
<v Speaker 1>that goes within

00:09:29.885 --> 00:09:31.245
<v Speaker 1>so you keepalive.conf

00:09:31.245 --> 00:09:33.805
<v Speaker 1>and things like that. Ideally, I wanted something

00:09:33.805 --> 00:09:35.404
<v Speaker 1>that was slightly

00:09:35.404 --> 00:09:36.685
<v Speaker 1>easier to manage.

00:09:37.404 --> 00:09:38.925
<v Speaker 1>And I suppose to a certain degree, something

00:09:38.925 --> 00:09:40.365
<v Speaker 1>that was a bit more tightly coupled to

00:09:40.365 --> 00:09:40.925
<v Speaker 1>Kubernetes.

00:09:42.320 --> 00:09:43.280
<v Speaker 0>Nice.

00:09:43.280 --> 00:09:43.840
<v Speaker 0>Okay.

00:09:45.120 --> 00:09:46.400
<v Speaker 0>So I believe

00:09:46.560 --> 00:09:48.000
<v Speaker 0>that you

00:09:48.160 --> 00:09:48.880
<v Speaker 0>are

00:09:49.040 --> 00:09:51.680
<v Speaker 0>boldly gonna attempt to show us

00:09:52.000 --> 00:09:55.200
<v Speaker 0>this project in action in two different ways.

00:09:55.200 --> 00:09:57.404
<v Speaker 0>Right? Do wanna cover what those are gonna

00:09:57.404 --> 00:09:59.245
<v Speaker 0>be? Sure. Yes. So

00:10:00.125 --> 00:10:01.245
<v Speaker 1>the original

00:10:01.245 --> 00:10:02.685
<v Speaker 1>plan for for

00:10:02.845 --> 00:10:05.165
<v Speaker 1>kube-vip or whatever kind of wasn't its first

00:10:05.165 --> 00:10:06.845
<v Speaker 1>guide was really just

00:10:08.220 --> 00:10:10.620
<v Speaker 1>to be able to have basically a fourth

00:10:10.620 --> 00:10:13.500
<v Speaker 1>IP address or or an IP address that

00:10:13.500 --> 00:10:15.020
<v Speaker 1>I would hit,

00:10:15.260 --> 00:10:16.459
<v Speaker 1>and then I would go to one of

00:10:16.459 --> 00:10:18.940
<v Speaker 1>the control plane members underneath.

00:10:20.459 --> 00:10:21.339
<v Speaker 1>And then

00:10:22.265 --> 00:10:25.225
<v Speaker 1>as as often happens, I was like, oh,

00:10:25.705 --> 00:10:27.625
<v Speaker 1>I've always wanted to work out how to

00:10:27.625 --> 00:10:30.425
<v Speaker 1>write a load balancer inside Kubernetes, so service

00:10:30.425 --> 00:10:31.865
<v Speaker 1>type load balancer,

00:10:33.065 --> 00:10:34.505
<v Speaker 1>which is

00:10:35.839 --> 00:10:37.920
<v Speaker 1>a rabbit hole to a certain degree and

00:10:37.920 --> 00:10:40.160
<v Speaker 1>and having to do various other things. But,

00:10:40.880 --> 00:10:42.240
<v Speaker 1>you know, I kind of I quite happily

00:10:42.880 --> 00:10:44.880
<v Speaker 1>I was very surprised even when I I

00:10:44.880 --> 00:10:46.320
<v Speaker 1>finally managed to get that to work. So

00:10:46.320 --> 00:10:47.279
<v Speaker 1>kube-vip is

00:10:47.760 --> 00:10:49.519
<v Speaker 1>not only a

00:10:49.875 --> 00:10:52.675
<v Speaker 1>a virtual IP and load balancer that sits

00:10:52.675 --> 00:10:54.915
<v Speaker 1>in front of the control plane, but you

00:10:54.915 --> 00:10:57.155
<v Speaker 1>can also deploy it within

00:10:57.875 --> 00:10:59.075
<v Speaker 1>within Kubernetes

00:10:59.395 --> 00:11:01.555
<v Speaker 1>and then use that as a load balancer

00:11:02.130 --> 00:11:04.290
<v Speaker 1>for, you know, for deployment or for for

00:11:04.290 --> 00:11:05.650
<v Speaker 1>pods and things like that.

00:11:07.250 --> 00:11:07.970
<v Speaker 0>Okay.

00:11:08.930 --> 00:11:10.610
<v Speaker 0>You're just setting out with loads of sentences

00:11:10.610 --> 00:11:12.450
<v Speaker 0>today that I never thought I'd hear anyone

00:11:12.450 --> 00:11:13.890
<v Speaker 0>in my life say that

00:11:14.370 --> 00:11:15.970
<v Speaker 0>I want to know how to write a

00:11:15.970 --> 00:11:18.645
<v Speaker 0>service load balancer for Kubernetes. Like, surely, less

00:11:18.645 --> 00:11:20.165
<v Speaker 0>than three people in the world have ever

00:11:20.165 --> 00:11:21.445
<v Speaker 0>uttered those words.

00:11:21.925 --> 00:11:24.085
<v Speaker 1>No. I actually I mean, I I luckily

00:11:24.085 --> 00:11:25.285
<v Speaker 1>managed to find a load of work by,

00:11:25.285 --> 00:11:26.965
<v Speaker 1>like, people like James Mondly,

00:11:27.205 --> 00:11:29.125
<v Speaker 1>who'd kind of had to play with it

00:11:29.125 --> 00:11:32.405
<v Speaker 1>years ago and and whatnot. And whilst

00:11:33.030 --> 00:11:35.510
<v Speaker 1>the way that you write controllers has changed

00:11:35.510 --> 00:11:37.030
<v Speaker 1>and, you know, there's a lot of kind

00:11:37.030 --> 00:11:39.750
<v Speaker 1>of frameworks around there and things like that,

00:11:41.270 --> 00:11:43.430
<v Speaker 1>I I the docs still do suffer a

00:11:43.430 --> 00:11:44.950
<v Speaker 1>little bit. You are kind of left in

00:11:44.950 --> 00:11:46.230
<v Speaker 1>the dark in terms of

00:11:46.725 --> 00:11:48.245
<v Speaker 1>why do I need to implement this and

00:11:48.245 --> 00:11:49.605
<v Speaker 1>how does it work. But

00:11:50.245 --> 00:11:52.085
<v Speaker 1>I did struggle for quite some time, but

00:11:52.085 --> 00:11:53.285
<v Speaker 1>I was kind of, like, you know, kinda

00:11:53.285 --> 00:11:54.964
<v Speaker 1>quite happy that I did actually manage to

00:11:54.964 --> 00:11:56.325
<v Speaker 1>work out what was going on towards the

00:11:56.325 --> 00:11:56.805
<v Speaker 1>end.

00:11:58.005 --> 00:11:59.845
<v Speaker 0>Nice. So I'm looking forward to seeing it.

00:11:59.850 --> 00:12:02.009
<v Speaker 0>So what I'm gonna do now is I'm

00:12:02.009 --> 00:12:03.209
<v Speaker 0>gonna pop your screen.

00:12:03.850 --> 00:12:04.730
<v Speaker 0>Wichita.

00:12:05.690 --> 00:12:07.930
<v Speaker 0>Yep. And it is now being shared.

00:12:08.410 --> 00:12:09.690
<v Speaker 0>So I can see

00:12:10.009 --> 00:12:11.370
<v Speaker 0>three terminals.

00:12:11.370 --> 00:12:13.290
<v Speaker 0>So what's going on here?

00:12:13.935 --> 00:12:16.415
<v Speaker 1>So we have three

00:12:17.615 --> 00:12:20.175
<v Speaker 1>three bare metal nodes that are

00:12:21.535 --> 00:12:23.775
<v Speaker 1>running on packet. And

00:12:25.615 --> 00:12:27.215
<v Speaker 1>so they're they're all up and running.

00:12:28.130 --> 00:12:30.130
<v Speaker 1>The only things that have happened to these

00:12:30.130 --> 00:12:32.450
<v Speaker 1>is they're running basically Ubuntu 18 o four.

00:12:32.770 --> 00:12:33.650
<v Speaker 1>I've

00:12:33.890 --> 00:12:36.290
<v Speaker 1>done an app to get install of

00:12:36.770 --> 00:12:39.090
<v Speaker 1>the various packages that are required.

00:12:41.025 --> 00:12:43.905
<v Speaker 1>So we can now basically initialize a a

00:12:43.905 --> 00:12:47.105
<v Speaker 1>Kubernetes cluster in a in a manner.

00:12:48.625 --> 00:12:50.385
<v Speaker 1>So one thing I will do is I'm

00:12:50.385 --> 00:12:52.145
<v Speaker 1>just gonna quickly pop open one more terminal

00:12:52.145 --> 00:12:53.345
<v Speaker 1>and make that a little bit bigger.

00:12:57.760 --> 00:13:00.880
<v Speaker 1>Right. Okay. So what we're gonna do on

00:13:00.880 --> 00:13:03.280
<v Speaker 1>on the on the bigger pane, this one

00:13:03.280 --> 00:13:05.680
<v Speaker 1>here, is we will go through the two

00:13:05.680 --> 00:13:06.400
<v Speaker 1>steps

00:13:07.120 --> 00:13:09.840
<v Speaker 1>that are needed in order to initialize our

00:13:09.840 --> 00:13:11.745
<v Speaker 1>first control plane node.

00:13:13.185 --> 00:13:13.825
<v Speaker 1>And

00:13:14.385 --> 00:13:16.305
<v Speaker 1>the method around this is kind of a

00:13:16.305 --> 00:13:17.665
<v Speaker 1>bit important. A lot of this is tied

00:13:17.665 --> 00:13:18.945
<v Speaker 1>to kube a d m.

00:13:19.904 --> 00:13:22.065
<v Speaker 1>I know there are multiple different ways of

00:13:22.065 --> 00:13:23.745
<v Speaker 1>initializing a Kubernetes cluster.

00:13:25.329 --> 00:13:26.130
<v Speaker 1>I've

00:13:26.130 --> 00:13:27.810
<v Speaker 1>always been kind of in the q a

00:13:27.810 --> 00:13:29.330
<v Speaker 1>d m camp, I suppose.

00:13:30.690 --> 00:13:32.450
<v Speaker 1>This always seemed like kind of the and

00:13:32.450 --> 00:13:34.370
<v Speaker 1>given its kind of popularity and how you

00:13:34.370 --> 00:13:35.970
<v Speaker 1>use that with cluster API,

00:13:36.529 --> 00:13:38.209
<v Speaker 1>it made sense for me at least to

00:13:38.209 --> 00:13:40.065
<v Speaker 1>follow that method. There are a number of

00:13:40.065 --> 00:13:43.345
<v Speaker 1>different ways that you could perhaps instantiate

00:13:43.345 --> 00:13:45.985
<v Speaker 1>the the Vip side of things, but, yeah,

00:13:45.985 --> 00:13:47.105
<v Speaker 1>I'll step through that.

00:13:47.665 --> 00:13:48.225
<v Speaker 1>So

00:13:48.865 --> 00:13:49.505
<v Speaker 1>okay.

00:13:49.904 --> 00:13:52.385
<v Speaker 1>So on our first node, the first thing

00:13:52.385 --> 00:13:53.425
<v Speaker 1>that we're going to do

00:13:54.410 --> 00:13:56.410
<v Speaker 1>is to do a docker run.

00:13:58.330 --> 00:13:59.370
<v Speaker 0>Oh, crap.

00:14:02.170 --> 00:14:04.010
<v Speaker 1>I don't know how best one second. I

00:14:04.010 --> 00:14:05.130
<v Speaker 1>will need to do something.

00:14:06.455 --> 00:14:08.215
<v Speaker 1>I'll move this window over here a second

00:14:08.215 --> 00:14:09.655
<v Speaker 1>so that I can take my key out

00:14:09.655 --> 00:14:11.175
<v Speaker 1>of the history.

00:14:13.575 --> 00:14:16.135
<v Speaker 0>It's always the way, isn't it? Yeah. It's

00:14:16.135 --> 00:14:16.375
<v Speaker 1>pretty

00:14:18.670 --> 00:14:20.990
<v Speaker 0>I just moved the window. Nothing to see

00:14:20.990 --> 00:14:23.630
<v Speaker 0>here. I'll come back and choose the moment.

00:14:24.510 --> 00:14:26.110
<v Speaker 0>I lost track of the amount of times

00:14:26.110 --> 00:14:29.390
<v Speaker 0>I've put access keys or tokens onto Yes.

00:14:29.390 --> 00:14:29.790
<v Speaker 1>Yeah.

00:14:32.985 --> 00:14:33.625
<v Speaker 1>So

00:14:33.865 --> 00:14:34.905
<v Speaker 1>one second.

00:14:37.865 --> 00:14:41.145
<v Speaker 0>If anyone has any questions about kube-vip,

00:14:41.145 --> 00:14:44.345
<v Speaker 0>plunder, packet, anything like that, just feel free

00:14:44.345 --> 00:14:46.345
<v Speaker 0>to drop them into the chat on YouTube,

00:14:46.760 --> 00:14:48.760
<v Speaker 0>Periscope, Twitter, or Twitch.

00:14:48.920 --> 00:14:51.000
<v Speaker 1>Cool. We will do our best to answer.

00:14:51.240 --> 00:14:52.680
<v Speaker 1>So if we can pretend we didn't see

00:14:52.680 --> 00:14:53.240
<v Speaker 1>that,

00:14:54.680 --> 00:14:57.720
<v Speaker 1>what's actually happening here is that we're gonna

00:14:57.720 --> 00:15:00.280
<v Speaker 1>do a docker run using the kube vip

00:15:01.160 --> 00:15:01.480
<v Speaker 1>image.

00:15:03.355 --> 00:15:04.075
<v Speaker 1>And

00:15:04.555 --> 00:15:06.475
<v Speaker 1>passing it a number of flags. So there's

00:15:06.475 --> 00:15:07.995
<v Speaker 1>a number of kind of key important ones

00:15:07.995 --> 00:15:08.795
<v Speaker 1>really here.

00:15:09.595 --> 00:15:11.835
<v Speaker 1>The main one really is we're we're gonna

00:15:11.835 --> 00:15:13.595
<v Speaker 1>be using BGP

00:15:14.610 --> 00:15:17.170
<v Speaker 1>and we're gonna be binding to an internal

00:15:17.170 --> 00:15:19.410
<v Speaker 1>interface and and whatnot. But the main thing

00:15:19.410 --> 00:15:21.490
<v Speaker 1>here is that we're actually gonna be using

00:15:22.370 --> 00:15:24.690
<v Speaker 1>kube-vip to generate a static pod manifest.

00:15:26.465 --> 00:15:28.305
<v Speaker 1>So the reason why we're doing this really

00:15:28.305 --> 00:15:29.825
<v Speaker 1>has been kind of a lot of work

00:15:29.825 --> 00:15:32.065
<v Speaker 1>that's kind of get around the chicken and

00:15:32.065 --> 00:15:33.185
<v Speaker 1>egg problem

00:15:33.505 --> 00:15:36.545
<v Speaker 1>of running a VIP and load balancer inside

00:15:36.545 --> 00:15:37.745
<v Speaker 1>a Kubernetes cluster.

00:15:38.570 --> 00:15:40.410
<v Speaker 1>Now, the reason why this is a chicken

00:15:40.410 --> 00:15:42.890
<v Speaker 1>and egg problem is that of the way

00:15:42.890 --> 00:15:43.930
<v Speaker 1>that kube-adm

00:15:43.930 --> 00:15:45.370
<v Speaker 1>init actually works.

00:15:45.690 --> 00:15:47.850
<v Speaker 1>So I'll generate this manifest and we'll kick

00:15:47.850 --> 00:15:49.130
<v Speaker 1>off the kube-adm init.

00:16:00.535 --> 00:16:02.855
<v Speaker 1>And, we'll leave this pinging. So, what's actually

00:16:02.855 --> 00:16:05.335
<v Speaker 1>the the chicken and egg scenario here is

00:16:05.335 --> 00:16:07.815
<v Speaker 1>essentially the

00:16:07.140 --> 00:16:08.660
<v Speaker 1>kube-adm in it.

00:16:09.540 --> 00:16:11.220
<v Speaker 1>If we want to use a control plane,

00:16:11.220 --> 00:16:13.220
<v Speaker 1>we need to give it the IP address

00:16:13.220 --> 00:16:14.820
<v Speaker 1>of the control plane

00:16:15.380 --> 00:16:17.220
<v Speaker 1>the load balance that that we're wanting to

00:16:17.220 --> 00:16:18.180
<v Speaker 1>make use of.

00:16:19.140 --> 00:16:21.815
<v Speaker 1>Now, if we are in AWS or we

00:16:21.815 --> 00:16:24.055
<v Speaker 1>have an appliance like an f five load

00:16:24.055 --> 00:16:24.935
<v Speaker 1>balancer,

00:16:25.735 --> 00:16:28.455
<v Speaker 1>that device already exists or we can build

00:16:28.455 --> 00:16:30.775
<v Speaker 1>that functionality before we actually

00:16:31.655 --> 00:16:33.815
<v Speaker 1>build up our Kubernetes cluster.

00:16:34.400 --> 00:16:36.560
<v Speaker 1>So we can see here we have successfully

00:16:36.560 --> 00:16:38.080
<v Speaker 1>deployed the first node.

00:16:39.040 --> 00:16:40.800
<v Speaker 1>And on the right hand window, we can

00:16:40.800 --> 00:16:43.600
<v Speaker 1>now see that our EIP exists

00:16:44.560 --> 00:16:46.160
<v Speaker 1>to actually access. So

00:16:47.435 --> 00:16:49.035
<v Speaker 1>kind of coming back to that chicken and

00:16:49.035 --> 00:16:50.235
<v Speaker 1>egg scenario,

00:16:51.355 --> 00:16:53.995
<v Speaker 1>we need a way of bringing up the

00:16:53.995 --> 00:16:55.915
<v Speaker 1>load balancer kind of at the same time

00:16:55.915 --> 00:16:57.915
<v Speaker 1>that we bring up the Kubernetes cluster

00:16:58.154 --> 00:16:59.755
<v Speaker 1>because kube-adm

00:16:59.755 --> 00:17:03.514
<v Speaker 1>in it will start all of the manifests

00:17:02.390 --> 00:17:03.830
<v Speaker 1>that exist within

00:17:04.310 --> 00:17:06.230
<v Speaker 1>the manifests directory.

00:17:06.550 --> 00:17:08.790
<v Speaker 1>Once it has basically told kubelet to start

00:17:08.790 --> 00:17:09.669
<v Speaker 1>all of those,

00:17:10.230 --> 00:17:13.589
<v Speaker 1>the kube-adm init's kind of final steps are

00:17:13.589 --> 00:17:14.710
<v Speaker 1>to

00:17:16.835 --> 00:17:18.355
<v Speaker 1>to basically

00:17:19.715 --> 00:17:21.954
<v Speaker 1>check that control plane endpoint

00:17:22.035 --> 00:17:22.835
<v Speaker 1>and

00:17:22.835 --> 00:17:25.635
<v Speaker 1>basically do a a get on health to

00:17:25.635 --> 00:17:27.475
<v Speaker 1>make sure that things are up and running

00:17:27.475 --> 00:17:28.115
<v Speaker 1>as expected.

00:17:29.200 --> 00:17:31.920
<v Speaker 1>So we will add now in our additional

00:17:31.920 --> 00:17:33.680
<v Speaker 1>nodes as you would do.

00:17:35.360 --> 00:17:37.040
<v Speaker 0>Okay. So this is just the other two

00:17:37.040 --> 00:17:39.440
<v Speaker 0>other bare metal machines which are now joining

00:17:39.440 --> 00:17:40.400
<v Speaker 0>the cluster.

00:17:41.760 --> 00:17:44.320
<v Speaker 1>So this will take a few seconds also.

00:17:47.975 --> 00:17:48.615
<v Speaker 1>But

00:17:49.095 --> 00:17:50.775
<v Speaker 1>there's another thing that we have to be

00:17:50.775 --> 00:17:52.615
<v Speaker 1>aware of here. So we can generate the

00:17:52.615 --> 00:17:53.495
<v Speaker 1>manifest

00:17:53.575 --> 00:17:54.375
<v Speaker 1>first

00:17:55.415 --> 00:17:56.695
<v Speaker 1>when we do a kube a d m

00:17:56.695 --> 00:17:57.495
<v Speaker 1>in it.

00:17:57.815 --> 00:18:00.055
<v Speaker 1>However, a kube a d m join

00:18:00.630 --> 00:18:04.309
<v Speaker 1>will error if that static pod manifest exists

00:18:04.550 --> 00:18:07.430
<v Speaker 1>on join. So the manifest directory has to

00:18:07.430 --> 00:18:09.029
<v Speaker 1>be empty on a join,

00:18:09.190 --> 00:18:11.030
<v Speaker 1>but it can be pre populated on an

00:18:11.030 --> 00:18:11.909
<v Speaker 1>in it, which

00:18:13.585 --> 00:18:14.945
<v Speaker 1>I don't know. I mean, I'm waving my

00:18:14.945 --> 00:18:16.225
<v Speaker 1>hands in the air, but my camera's not

00:18:16.225 --> 00:18:16.865
<v Speaker 1>on, so

00:18:17.985 --> 00:18:18.945
<v Speaker 1>such is life.

00:18:19.825 --> 00:18:22.625
<v Speaker 1>So the final step really on the first

00:18:22.625 --> 00:18:25.185
<v Speaker 1>node, we generate the static pod manifest. Kube

00:18:25.185 --> 00:18:27.105
<v Speaker 1>adm init will then bring up all of

00:18:27.105 --> 00:18:30.340
<v Speaker 1>the static pod manifests in that directory, including

00:18:30.660 --> 00:18:32.419
<v Speaker 1>the kube vip manifest.

00:18:32.740 --> 00:18:34.580
<v Speaker 1>So as everything all comes up, our vip

00:18:34.580 --> 00:18:35.940
<v Speaker 1>is initiated

00:18:35.940 --> 00:18:37.539
<v Speaker 1>and is substantiated.

00:18:38.980 --> 00:18:40.340
<v Speaker 1>Kube a d m in it can speak

00:18:40.340 --> 00:18:42.905
<v Speaker 1>through that vip to the control plane, and

00:18:42.905 --> 00:18:45.385
<v Speaker 1>we now have that up and running.

00:18:45.705 --> 00:18:47.945
<v Speaker 1>On the additional nodes, we join them using

00:18:47.945 --> 00:18:49.705
<v Speaker 1>the normal kube ADM join.

00:18:50.025 --> 00:18:51.865
<v Speaker 1>The last step here

00:18:59.320 --> 00:19:00.120
<v Speaker 1>One second.

00:19:08.635 --> 00:19:10.955
<v Speaker 1>If we do the same docker run command,

00:19:10.955 --> 00:19:13.195
<v Speaker 1>that will generate the same static pod manifest

00:19:13.195 --> 00:19:16.475
<v Speaker 1>into the etcd manifest Kubernetes manifest directory.

00:19:16.715 --> 00:19:18.794
<v Speaker 1>And now kube-vip will be running

00:19:19.115 --> 00:19:21.115
<v Speaker 1>on all three of the control plane nodes

00:19:21.115 --> 00:19:22.635
<v Speaker 1>as a static pod manifest.

00:19:25.440 --> 00:19:27.840
<v Speaker 1>And the way that kube-vip works is that

00:19:27.840 --> 00:19:28.880
<v Speaker 1>it uses

00:19:28.960 --> 00:19:30.080
<v Speaker 1>the Kubernetes

00:19:30.080 --> 00:19:30.960
<v Speaker 1>scheduler

00:19:30.960 --> 00:19:32.080
<v Speaker 1>leader election.

00:19:33.600 --> 00:19:36.240
<v Speaker 1>So if I grab our token here,

00:19:37.335 --> 00:19:39.734
<v Speaker 1>we can kind of see this in action,

00:19:40.294 --> 00:19:40.855
<v Speaker 1>which is

00:19:46.455 --> 00:19:47.815
<v Speaker 1>so we can see our

00:19:48.054 --> 00:19:48.854
<v Speaker 1>three

00:19:49.015 --> 00:19:51.735
<v Speaker 1>kube-vip pods that are actually running. And if

00:19:51.735 --> 00:19:52.695
<v Speaker 1>we

00:19:58.429 --> 00:20:00.190
<v Speaker 1>we can see here

00:20:00.669 --> 00:20:03.230
<v Speaker 1>that we have the lock and we have

00:20:03.230 --> 00:20:05.070
<v Speaker 1>assumed leadership of the cluster.

00:20:06.125 --> 00:20:08.764
<v Speaker 1>And we're also using BGP

00:20:09.725 --> 00:20:11.084
<v Speaker 1>to inform

00:20:11.404 --> 00:20:14.205
<v Speaker 1>the routers that that exist within the packet

00:20:14.205 --> 00:20:14.924
<v Speaker 1>network.

00:20:15.325 --> 00:20:18.924
<v Speaker 1>The traffic for our external IP address should

00:20:18.924 --> 00:20:20.044
<v Speaker 1>come to this node.

00:20:20.630 --> 00:20:22.470
<v Speaker 1>Now this is important because

00:20:22.710 --> 00:20:24.710
<v Speaker 1>we're gonna kill the first node.

00:20:25.430 --> 00:20:27.110
<v Speaker 1>And we should see on the window on

00:20:27.110 --> 00:20:28.870
<v Speaker 1>the right, we will lose a few packets

00:20:28.870 --> 00:20:29.670
<v Speaker 1>as

00:20:29.830 --> 00:20:32.150
<v Speaker 1>a leader election will take place in the

00:20:32.150 --> 00:20:34.935
<v Speaker 1>cluster, and our EIP will move to one

00:20:34.935 --> 00:20:36.855
<v Speaker 1>of the other nodes in that cluster.

00:20:37.335 --> 00:20:39.575
<v Speaker 1>So three, two, one.

00:20:40.135 --> 00:20:41.495
<v Speaker 0>Sounds ambitious.

00:20:42.055 --> 00:20:42.695
<v Speaker 0>Oh.

00:20:44.135 --> 00:20:44.455
<v Speaker 0>Boom.

00:20:45.490 --> 00:20:47.249
<v Speaker 1>So That was fast.

00:20:47.490 --> 00:20:50.289
<v Speaker 1>Yeah. It it so it turns out we

00:20:50.690 --> 00:20:52.369
<v Speaker 1>can actually do it faster than that.

00:20:53.010 --> 00:20:55.010
<v Speaker 1>I've just not had the chance this weekend

00:20:55.010 --> 00:20:56.769
<v Speaker 1>to implement that functionality,

00:20:56.770 --> 00:20:57.249
<v Speaker 1>but

00:20:57.890 --> 00:20:59.970
<v Speaker 1>I'm still learning a lot about BGP.

00:20:59.970 --> 00:21:02.285
<v Speaker 1>It's a bit of a terrifying

00:21:02.285 --> 00:21:03.245
<v Speaker 1>technology.

00:21:03.245 --> 00:21:05.965
<v Speaker 1>There was another major outage this weekend

00:21:06.765 --> 00:21:09.245
<v Speaker 1>that took place. And when I was implementing

00:21:09.245 --> 00:21:11.245
<v Speaker 1>this for the first time inside the

00:21:11.805 --> 00:21:13.645
<v Speaker 1>inside the packet network,

00:21:13.645 --> 00:21:15.760
<v Speaker 1>I actually had to ask a number of

00:21:15.760 --> 00:21:16.960
<v Speaker 1>network engineers

00:21:17.360 --> 00:21:19.520
<v Speaker 1>to sit and monitor the switches for the

00:21:19.520 --> 00:21:21.760
<v Speaker 1>first time I actually did a failover

00:21:22.800 --> 00:21:25.040
<v Speaker 1>to make sure I didn't break anything inside

00:21:25.040 --> 00:21:26.160
<v Speaker 1>the packs. The last thing I wanna do

00:21:26.160 --> 00:21:27.600
<v Speaker 1>is start breaking bits of the Internet and

00:21:27.600 --> 00:21:30.155
<v Speaker 1>whatnot. But it's a You were responsible for

00:21:30.155 --> 00:21:32.395
<v Speaker 0>the CenturyLink outage. Is that what you're saying?

00:21:32.475 --> 00:21:34.235
<v Speaker 1>Luckily, I don't think it was me, but

00:21:34.715 --> 00:21:36.475
<v Speaker 1>there was a Zoom outage when I actually

00:21:36.475 --> 00:21:37.835
<v Speaker 1>tried this the first time. But I don't

00:21:37.835 --> 00:21:39.115
<v Speaker 1>think I had anything to do with that.

00:21:40.740 --> 00:21:42.740
<v Speaker 1>But, yeah, it it's a it is a

00:21:42.740 --> 00:21:44.659
<v Speaker 1>bit of a terrifying technology. But

00:21:45.060 --> 00:21:47.300
<v Speaker 1>it turns out in inside the packet now,

00:21:47.300 --> 00:21:48.740
<v Speaker 1>we have a lot of safeguards in place

00:21:48.740 --> 00:21:50.659
<v Speaker 1>to prevent people doing anything

00:21:51.220 --> 00:21:54.020
<v Speaker 1>anything kind of too silly with with BGP.

00:21:54.985 --> 00:21:56.905
<v Speaker 0>Yeah. So so just for the, you know,

00:21:56.905 --> 00:21:58.585
<v Speaker 0>the people that are watching. Right? That the

00:21:58.585 --> 00:22:00.664
<v Speaker 0>high level of BGP is if you

00:22:01.304 --> 00:22:03.784
<v Speaker 0>can speak to the router and say, want

00:22:03.784 --> 00:22:05.624
<v Speaker 0>to register myself as

00:22:05.865 --> 00:22:06.905
<v Speaker 0>the responder

00:22:06.905 --> 00:22:09.390
<v Speaker 0>for this IP address or prefix, and then

00:22:09.390 --> 00:22:11.149
<v Speaker 0>that router will send direct all the traffic

00:22:11.149 --> 00:22:13.230
<v Speaker 0>that looking for that IP address or prefix

00:22:13.230 --> 00:22:15.549
<v Speaker 0>to your machine. Is that Yep. Okay.

00:22:15.789 --> 00:22:16.749
<v Speaker 1>Yep. So

00:22:17.390 --> 00:22:19.470
<v Speaker 1>yes. Well done. That's better than I could

00:22:19.470 --> 00:22:20.429
<v Speaker 1>have explained it, actually.

00:22:21.975 --> 00:22:24.054
<v Speaker 1>Yeah. So, I I mean, effectively,

00:22:24.295 --> 00:22:26.215
<v Speaker 1>what's actually happening is when one of the

00:22:26.215 --> 00:22:28.855
<v Speaker 1>kube-vip nodes gets the leader election and and

00:22:28.855 --> 00:22:31.575
<v Speaker 1>is given the leader lease,

00:22:32.855 --> 00:22:36.960
<v Speaker 1>that that particular pod will then start advertising

00:22:37.440 --> 00:22:39.200
<v Speaker 1>an IP address in a number of different

00:22:39.200 --> 00:22:39.760
<v Speaker 1>ways.

00:22:40.080 --> 00:22:43.120
<v Speaker 1>Within packet or using just BGP generally,

00:22:43.920 --> 00:22:46.160
<v Speaker 1>we will need to give it the peering

00:22:46.160 --> 00:22:48.560
<v Speaker 1>details for a router in that network.

00:22:49.065 --> 00:22:50.745
<v Speaker 1>So it can connect to that network and

00:22:50.745 --> 00:22:51.304
<v Speaker 1>say

00:22:52.264 --> 00:22:54.585
<v Speaker 1>traffic that wants to hit this particular IP

00:22:54.585 --> 00:22:56.745
<v Speaker 1>address should be routed through me. I'm the

00:22:56.745 --> 00:22:57.384
<v Speaker 1>leader.

00:22:58.505 --> 00:22:59.384
<v Speaker 1>Alternatively,

00:23:00.345 --> 00:23:02.264
<v Speaker 1>in a a layer two manner,

00:23:03.100 --> 00:23:05.980
<v Speaker 1>we can use ARP. So I it's disabled

00:23:05.980 --> 00:23:08.139
<v Speaker 1>inside here because it it simply just won't

00:23:08.139 --> 00:23:08.699
<v Speaker 1>work

00:23:09.419 --> 00:23:11.179
<v Speaker 1>because it's blocked within packet.

00:23:11.500 --> 00:23:13.019
<v Speaker 1>But on a different network,

00:23:14.299 --> 00:23:16.779
<v Speaker 1>what would happen on leader election is that

00:23:16.779 --> 00:23:19.795
<v Speaker 1>a a node that is allocated the leader

00:23:19.795 --> 00:23:22.995
<v Speaker 1>lease will suddenly do an ARP broadcast to

00:23:22.995 --> 00:23:24.275
<v Speaker 1>switches and

00:23:24.675 --> 00:23:25.955
<v Speaker 1>network devices,

00:23:26.835 --> 00:23:28.115
<v Speaker 1>which says that

00:23:29.475 --> 00:23:31.875
<v Speaker 1>if you want to this IP address, which

00:23:31.875 --> 00:23:34.860
<v Speaker 1>is our VIP, is accessible on this MAC

00:23:34.860 --> 00:23:35.499
<v Speaker 1>address,

00:23:35.740 --> 00:23:37.179
<v Speaker 1>which is the MAC address of the host

00:23:37.179 --> 00:23:39.339
<v Speaker 1>that now has a leader election. So that's

00:23:39.340 --> 00:23:42.139
<v Speaker 1>layer two updates, which says where traffic should

00:23:42.139 --> 00:23:42.779
<v Speaker 1>actually go.

00:23:45.505 --> 00:23:46.144
<v Speaker 0>Okay.

00:23:46.784 --> 00:23:47.424
<v Speaker 0>Cool.

00:23:47.745 --> 00:23:49.505
<v Speaker 1>Well, you get into the weeds in networking

00:23:49.505 --> 00:23:51.025
<v Speaker 1>here. It's been a it's been a learning

00:23:51.025 --> 00:23:53.184
<v Speaker 1>experience for for me as well.

00:23:54.385 --> 00:23:57.860
<v Speaker 0>So just to clarify then, this is this

00:23:57.860 --> 00:23:59.540
<v Speaker 0>is very much a bare metal problem. Right?

00:23:59.540 --> 00:24:01.460
<v Speaker 0>This is not something you would experience on

00:24:01.460 --> 00:24:04.660
<v Speaker 0>GCP or AWS because of all the virtualization,

00:24:04.660 --> 00:24:06.260
<v Speaker 0>and there's just something there

00:24:06.420 --> 00:24:07.220
<v Speaker 0>reconfiguring

00:24:07.220 --> 00:24:08.740
<v Speaker 0>the network and all the VMs. Right? This

00:24:08.740 --> 00:24:11.355
<v Speaker 0>is but on bare metal, we we don't

00:24:11.355 --> 00:24:13.435
<v Speaker 0>have that flexibility. And that's why this is

00:24:13.435 --> 00:24:14.715
<v Speaker 0>needed. Is that correct?

00:24:14.955 --> 00:24:16.075
<v Speaker 1>Yes. Within

00:24:16.315 --> 00:24:18.795
<v Speaker 1>within, you know, kind of Azure and AWS,

00:24:18.795 --> 00:24:20.154
<v Speaker 1>a lot of this functionality

00:24:20.155 --> 00:24:22.075
<v Speaker 1>is provided through software.

00:24:22.315 --> 00:24:24.590
<v Speaker 1>You won't you wouldn't need to implement any

00:24:24.590 --> 00:24:25.629
<v Speaker 1>of this yourself.

00:24:25.789 --> 00:24:26.429
<v Speaker 1>There

00:24:26.750 --> 00:24:28.990
<v Speaker 1>exists a myriad of services in all of

00:24:28.990 --> 00:24:30.509
<v Speaker 1>these cloud providers. So,

00:24:31.070 --> 00:24:32.509
<v Speaker 1>you know, you don't need to worry about

00:24:32.509 --> 00:24:34.029
<v Speaker 1>any of these sorts of things. A simple

00:24:34.029 --> 00:24:36.190
<v Speaker 1>API call to the AWS SDK

00:24:37.125 --> 00:24:40.005
<v Speaker 1>and, you know, your your elastic IP will

00:24:40.005 --> 00:24:41.924
<v Speaker 1>move anywhere it needs to go.

00:24:43.125 --> 00:24:45.765
<v Speaker 0>And one final thing. There's there's nothing packet

00:24:45.765 --> 00:24:48.885
<v Speaker 0>specific here. Right? This is using BGP, which

00:24:48.885 --> 00:24:51.210
<v Speaker 0>would work in any bare metal cluster with

00:24:51.210 --> 00:24:52.570
<v Speaker 0>a a root over there to handle the

00:24:52.570 --> 00:24:55.930
<v Speaker 0>request. Right? Yes. The so the only thing

00:24:55.930 --> 00:24:58.010
<v Speaker 1>that is packet specific, which is why I

00:24:58.010 --> 00:24:58.810
<v Speaker 1>accidentally

00:24:58.810 --> 00:25:01.130
<v Speaker 1>flashed my API key to the to the

00:25:01.130 --> 00:25:02.169
<v Speaker 1>world, I suppose,

00:25:02.410 --> 00:25:03.450
<v Speaker 1>is that

00:25:04.585 --> 00:25:06.584
<v Speaker 1>using that API key,

00:25:07.065 --> 00:25:10.264
<v Speaker 1>kube-vip can look up all of the BGP

00:25:10.264 --> 00:25:12.505
<v Speaker 1>configuration that we would normally have to specify

00:25:12.505 --> 00:25:13.304
<v Speaker 1>manually.

00:25:14.024 --> 00:25:14.584
<v Speaker 1>So

00:25:15.225 --> 00:25:17.865
<v Speaker 1>with the API token, kube-vip can actually look

00:25:17.865 --> 00:25:19.465
<v Speaker 1>up all of the pairing information

00:25:20.080 --> 00:25:22.560
<v Speaker 1>so that it knows who to give the

00:25:22.560 --> 00:25:24.400
<v Speaker 1>addresses to and things like that. So it

00:25:24.400 --> 00:25:26.640
<v Speaker 1>was it's just another kind of

00:25:27.040 --> 00:25:30.160
<v Speaker 1>ease easy easy step, well, for me at

00:25:30.160 --> 00:25:30.640
<v Speaker 1>least,

00:25:31.280 --> 00:25:32.560
<v Speaker 1>to skip out, you know, kind of having

00:25:32.560 --> 00:25:34.240
<v Speaker 1>to do things manually and whatnot.

00:25:35.595 --> 00:25:37.435
<v Speaker 0>Okay. They're right. This will work anywhere that

00:25:37.435 --> 00:25:39.755
<v Speaker 1>there are reasons that advertise on BGP.

00:25:40.395 --> 00:25:41.115
<v Speaker 1>Right.

00:25:41.355 --> 00:25:43.035
<v Speaker 0>So I think what we've covered there then

00:25:43.035 --> 00:25:45.914
<v Speaker 0>is the VIP aspect of kube

00:25:46.315 --> 00:25:46.875
<v Speaker 0>VIP.

00:25:48.550 --> 00:25:50.550
<v Speaker 0>And we have a and I should have

00:25:50.550 --> 00:25:52.230
<v Speaker 0>said that there just to kinda break that

00:25:52.230 --> 00:25:53.510
<v Speaker 0>up. But we

00:25:54.150 --> 00:25:58.390
<v Speaker 0>have a highly available Kubernetes control plane with

00:25:58.390 --> 00:25:59.190
<v Speaker 0>relative ease.

00:26:01.304 --> 00:26:04.345
<v Speaker 1>Yes. So I tried to make it follow

00:26:04.345 --> 00:26:06.184
<v Speaker 1>as much of the kube a d m

00:26:07.945 --> 00:26:09.945
<v Speaker 1>path steps, whatever you wanna call it, as

00:26:09.945 --> 00:26:10.904
<v Speaker 1>much as possible,

00:26:11.705 --> 00:26:13.544
<v Speaker 1>and to automate things as much as possible

00:26:13.544 --> 00:26:14.264
<v Speaker 1>as well. So

00:26:15.370 --> 00:26:18.009
<v Speaker 1>either dropping static pods

00:26:18.649 --> 00:26:20.490
<v Speaker 1>either dropping static manifests

00:26:20.490 --> 00:26:22.249
<v Speaker 1>into the manifest directory.

00:26:22.649 --> 00:26:24.330
<v Speaker 1>Another option is

00:26:26.090 --> 00:26:26.729
<v Speaker 1>doing

00:26:26.970 --> 00:26:28.730
<v Speaker 1>either kube a d m in it in

00:26:28.730 --> 00:26:29.370
<v Speaker 1>phases

00:26:29.554 --> 00:26:32.595
<v Speaker 1>or having a program that runs and watches

00:26:32.595 --> 00:26:33.154
<v Speaker 1>for

00:26:33.395 --> 00:26:35.315
<v Speaker 1>the API server coming up for the first

00:26:35.315 --> 00:26:38.355
<v Speaker 1>time and immediately dropping a daemon set

00:26:38.515 --> 00:26:40.914
<v Speaker 1>in there before the kube a d m

00:26:40.914 --> 00:26:42.115
<v Speaker 1>in it process finishes.

00:26:42.730 --> 00:26:45.049
<v Speaker 1>That daemon set comes up along with the

00:26:45.049 --> 00:26:45.609
<v Speaker 1>vip.

00:26:46.330 --> 00:26:47.529
<v Speaker 1>Kube a d m in it can hit

00:26:47.529 --> 00:26:49.210
<v Speaker 1>that vip and verify that the cluster's up

00:26:49.210 --> 00:26:51.130
<v Speaker 1>and running and things like that. It's very

00:26:51.130 --> 00:26:53.450
<v Speaker 1>hacky, but there's no real nice options at

00:26:53.450 --> 00:26:53.769
<v Speaker 1>the moment.

00:26:54.725 --> 00:26:56.805
<v Speaker 0>Could we not? I don't I don't wanna,

00:26:56.805 --> 00:26:58.405
<v Speaker 0>you know, go into this too much. It's

00:26:58.405 --> 00:26:59.685
<v Speaker 0>not really what we're trying to cover, but,

00:26:59.685 --> 00:27:01.685
<v Speaker 0>like, this feels like something system d could

00:27:01.685 --> 00:27:03.925
<v Speaker 0>solve using their triggers. Like, when this process

00:27:03.925 --> 00:27:05.765
<v Speaker 0>comes up, then go and, you know, write

00:27:05.765 --> 00:27:07.765
<v Speaker 0>this manifest as directory if it doesn't exist.

00:27:08.320 --> 00:27:09.360
<v Speaker 1>Yes.

00:27:09.360 --> 00:27:09.919
<v Speaker 1>Possibly.

00:27:10.720 --> 00:27:11.440
<v Speaker 1>I mean

00:27:11.840 --> 00:27:14.480
<v Speaker 1>so things like cluster API vSphere,

00:27:15.840 --> 00:27:17.040
<v Speaker 1>that will

00:27:17.440 --> 00:27:19.760
<v Speaker 1>they've added now some webhooks in there, I

00:27:19.760 --> 00:27:22.560
<v Speaker 1>think, which will generate just static manifest

00:27:22.560 --> 00:27:23.280
<v Speaker 1>YAML

00:27:23.665 --> 00:27:26.945
<v Speaker 1>as part of the deployment of new cluster

00:27:26.945 --> 00:27:31.184
<v Speaker 1>API vSphere VMs. So they've actually taken the

00:27:31.665 --> 00:27:34.385
<v Speaker 1>instantiation part and added that into

00:27:34.625 --> 00:27:35.985
<v Speaker 1>their provider themselves.

00:27:37.580 --> 00:27:39.500
<v Speaker 1>So there are a number of different ways

00:27:39.500 --> 00:27:41.179
<v Speaker 1>to do it. It's just

00:27:42.540 --> 00:27:45.340
<v Speaker 1>kube-vip needs to come up before kube-adm init

00:27:45.340 --> 00:27:46.220
<v Speaker 1>finishes.

00:27:47.820 --> 00:27:48.940
<v Speaker 1>But Kubernetes

00:27:48.940 --> 00:27:50.460
<v Speaker 1>isn't up before

00:27:50.625 --> 00:27:52.465
<v Speaker 1>kube- ADM and it starts and things like

00:27:52.465 --> 00:27:54.305
<v Speaker 1>that. So you need to find your way

00:27:54.305 --> 00:27:56.465
<v Speaker 1>into the middle of the process one way

00:27:56.465 --> 00:27:57.184
<v Speaker 1>or another.

00:27:59.665 --> 00:28:02.385
<v Speaker 0>Right. Okay. That sounds too complicated. I'm gonna

00:28:02.385 --> 00:28:04.960
<v Speaker 0>just pretend and say, cool. Yeah. Good luck

00:28:04.960 --> 00:28:06.720
<v Speaker 0>fixing that. So

00:28:07.200 --> 00:28:10.560
<v Speaker 0>let's talk about the second part of give

00:28:10.560 --> 00:28:12.320
<v Speaker 0>that plan. Okay.

00:28:12.560 --> 00:28:14.480
<v Speaker 0>As as a load balancer. Right?

00:28:14.800 --> 00:28:16.320
<v Speaker 1>Yes. So

00:28:18.465 --> 00:28:21.345
<v Speaker 1>this largely works in the same way. So

00:28:21.345 --> 00:28:22.465
<v Speaker 1>these are gonna be a little bit hard

00:28:22.465 --> 00:28:23.664
<v Speaker 1>to see. We really, really need to focus

00:28:23.664 --> 00:28:25.184
<v Speaker 1>on the main window here.

00:28:25.825 --> 00:28:28.465
<v Speaker 1>I have a a five node cluster

00:28:29.265 --> 00:28:30.465
<v Speaker 1>that's up and running

00:28:31.940 --> 00:28:32.580
<v Speaker 1>with

00:28:33.460 --> 00:28:34.580
<v Speaker 1>two control

00:28:34.980 --> 00:28:35.620
<v Speaker 1>two

00:28:35.780 --> 00:28:38.020
<v Speaker 1>two worker nodes and and three control plane

00:28:38.020 --> 00:28:40.180
<v Speaker 1>nodes. They've been brought up in the same

00:28:40.180 --> 00:28:42.580
<v Speaker 1>same way. The only real difference here is

00:28:42.580 --> 00:28:44.100
<v Speaker 1>these machines aren't on packet.

00:28:44.340 --> 00:28:44.980
<v Speaker 1>So

00:28:46.165 --> 00:28:48.965
<v Speaker 1>the control play notes are simply using ARP

00:28:49.285 --> 00:28:50.565
<v Speaker 1>for that. However,

00:28:50.725 --> 00:28:52.085
<v Speaker 1>the main part that we're gonna be looking

00:28:52.085 --> 00:28:54.325
<v Speaker 1>at really is deploying an application

00:28:55.765 --> 00:28:58.085
<v Speaker 1>and then using kube-vip to advertise

00:28:59.340 --> 00:29:01.419
<v Speaker 1>it in the same manner. So

00:29:02.620 --> 00:29:04.460
<v Speaker 1>relatively straightforward.

00:29:05.659 --> 00:29:07.500
<v Speaker 1>I shouldn't have to use my own code,

00:29:07.500 --> 00:29:08.860
<v Speaker 1>but I'm actually having to get the docs

00:29:08.860 --> 00:29:09.659
<v Speaker 1>up at this point.

00:29:11.995 --> 00:29:15.434
<v Speaker 1>So if you go to kubevip.io

00:29:15.915 --> 00:29:17.994
<v Speaker 1>actually, I can pop it here, I think.

00:29:19.275 --> 00:29:20.715
<v Speaker 1>If we actually go to the main website

00:29:20.715 --> 00:29:21.514
<v Speaker 1>itself

00:29:24.075 --> 00:29:26.559
<v Speaker 0>Nice logo. We got to judge every project

00:29:26.559 --> 00:29:28.399
<v Speaker 0>by its logo. Absolutely.

00:29:29.919 --> 00:29:32.240
<v Speaker 1>So there is documentation for either doing the

00:29:32.240 --> 00:29:34.320
<v Speaker 1>control plane load balancer, which as I mentioned

00:29:34.320 --> 00:29:34.959
<v Speaker 1>is

00:29:35.120 --> 00:29:37.279
<v Speaker 1>one additional step to kube-eighty m in it.

00:29:38.095 --> 00:29:40.335
<v Speaker 1>And then actually doing a a Kubernetes service

00:29:40.335 --> 00:29:41.774
<v Speaker 1>type load balancer.

00:29:43.135 --> 00:29:45.615
<v Speaker 1>The load balancer part is a little bit

00:29:45.615 --> 00:29:46.654
<v Speaker 1>more involved

00:29:46.895 --> 00:29:47.854
<v Speaker 1>in that

00:29:48.495 --> 00:29:50.975
<v Speaker 1>we need to deploy a couple of manifests.

00:29:50.990 --> 00:29:52.830
<v Speaker 1>And the reason being

00:29:52.910 --> 00:29:53.549
<v Speaker 1>is,

00:29:54.910 --> 00:29:56.430
<v Speaker 1>I guess, there's a few things that we

00:29:56.430 --> 00:29:58.030
<v Speaker 1>need to kind of consider when doing service

00:29:58.030 --> 00:29:59.150
<v Speaker 1>type load balancer.

00:30:00.270 --> 00:30:01.870
<v Speaker 1>The main part really is the fact that

00:30:01.870 --> 00:30:05.070
<v Speaker 1>we we basically need a a CCM, cloud

00:30:05.070 --> 00:30:05.790
<v Speaker 1>controller,

00:30:07.195 --> 00:30:09.114
<v Speaker 1>Because the cloud controller

00:30:09.914 --> 00:30:12.794
<v Speaker 1>is the component inside the Kubernetes cluster that

00:30:12.794 --> 00:30:14.315
<v Speaker 1>will sit and listen

00:30:14.955 --> 00:30:17.914
<v Speaker 1>for things like service type load balances. And

00:30:17.914 --> 00:30:19.594
<v Speaker 1>it's the cloud controller

00:30:19.914 --> 00:30:22.610
<v Speaker 1>which would speak to something in order to

00:30:22.610 --> 00:30:24.290
<v Speaker 1>actually set that load balancer

00:30:24.530 --> 00:30:25.090
<v Speaker 1>up.

00:30:25.490 --> 00:30:27.570
<v Speaker 1>So for instance, in AWS,

00:30:27.570 --> 00:30:28.770
<v Speaker 1>the CCM

00:30:29.330 --> 00:30:31.650
<v Speaker 1>will more than likely speak to,

00:30:32.290 --> 00:30:34.610
<v Speaker 1>you know, your elastic IP service,

00:30:34.930 --> 00:30:36.370
<v Speaker 1>provision that elastic IP,

00:30:37.144 --> 00:30:39.065
<v Speaker 1>you know, kind of do all of the

00:30:39.065 --> 00:30:39.784
<v Speaker 1>plumbing

00:30:39.945 --> 00:30:42.424
<v Speaker 1>to bring that traffic back into your Kubernetes

00:30:42.424 --> 00:30:44.585
<v Speaker 1>cluster and whatnot. We need to do the

00:30:44.585 --> 00:30:46.344
<v Speaker 1>same with kube-vip.

00:30:47.784 --> 00:30:48.825
<v Speaker 1>So

00:30:50.179 --> 00:30:52.419
<v Speaker 1>what I'm gonna do though so these are

00:30:52.419 --> 00:30:54.659
<v Speaker 1>the two manifests that actually

00:30:55.780 --> 00:30:57.460
<v Speaker 1>will just get you running out of the

00:30:57.460 --> 00:30:58.179
<v Speaker 1>box.

00:30:58.580 --> 00:31:01.059
<v Speaker 1>I've actually been working on some additional functionality

00:31:01.059 --> 00:31:02.259
<v Speaker 1>which may break

00:31:02.845 --> 00:31:04.125
<v Speaker 1>probably will break.

00:31:07.085 --> 00:31:09.085
<v Speaker 0>Controller DHCP.

00:31:09.565 --> 00:31:11.885
<v Speaker 1>So this is some this is a suggestion

00:31:11.885 --> 00:31:12.605
<v Speaker 1>by

00:31:13.165 --> 00:31:15.405
<v Speaker 1>a colleague when I was at VMware

00:31:16.205 --> 00:31:18.765
<v Speaker 1>who wanted

00:31:17.970 --> 00:31:20.370
<v Speaker 1>to be able to do service type load

00:31:20.370 --> 00:31:21.169
<v Speaker 1>balancer,

00:31:21.970 --> 00:31:23.570
<v Speaker 1>but for, like, home networks

00:31:25.010 --> 00:31:26.610
<v Speaker 1>where they didn't really want to have to

00:31:26.610 --> 00:31:28.690
<v Speaker 1>worry about managing their own IPs and and

00:31:28.690 --> 00:31:29.010
<v Speaker 1>whatnot.

00:31:30.225 --> 00:31:32.785
<v Speaker 1>So this will we'll go through the normal

00:31:32.785 --> 00:31:34.545
<v Speaker 1>steps, then hopefully, we'll be able to demo

00:31:34.545 --> 00:31:35.664
<v Speaker 1>this as well.

00:31:36.304 --> 00:31:39.025
<v Speaker 1>But what we've actually done here is we've

00:31:39.025 --> 00:31:39.744
<v Speaker 1>created

00:31:40.225 --> 00:31:42.225
<v Speaker 1>we've we've applied two manifests.

00:31:43.025 --> 00:31:45.585
<v Speaker 1>The first manifest will deploy the

00:31:46.840 --> 00:31:48.360
<v Speaker 1>plunder cloud provider.

00:31:48.360 --> 00:31:50.840
<v Speaker 1>So this now will

00:31:52.039 --> 00:31:54.519
<v Speaker 1>take this cluster. And when

00:31:55.559 --> 00:31:57.159
<v Speaker 1>somebody wants to deploy

00:31:57.399 --> 00:32:00.425
<v Speaker 1>a service type load balancer, that cloud controller

00:32:00.425 --> 00:32:02.184
<v Speaker 1>will basically handle

00:32:02.345 --> 00:32:04.265
<v Speaker 1>all of the bits that are actually required

00:32:04.265 --> 00:32:05.145
<v Speaker 1>to do that.

00:32:05.945 --> 00:32:09.385
<v Speaker 1>The second manifest is the manifest that deploys

00:32:09.385 --> 00:32:10.345
<v Speaker 1>kube-vip

00:32:10.905 --> 00:32:12.265
<v Speaker 1>within

00:32:12.500 --> 00:32:14.260
<v Speaker 1>within a cluster itself.

00:32:15.380 --> 00:32:17.380
<v Speaker 1>And the architecture for this is

00:32:17.540 --> 00:32:19.540
<v Speaker 1>a little bit funny. I've got a diagram

00:32:19.540 --> 00:32:20.820
<v Speaker 1>of it somewhere.

00:32:20.980 --> 00:32:22.900
<v Speaker 1>Here we go. I don't know if this

00:32:22.900 --> 00:32:24.020
<v Speaker 1>will be visible or not.

00:32:27.975 --> 00:32:30.055
<v Speaker 1>But the way that it kind of works

00:32:30.055 --> 00:32:33.415
<v Speaker 1>is that you typically will deploy a kube

00:32:33.415 --> 00:32:34.695
<v Speaker 1>vip cluster

00:32:37.015 --> 00:32:38.054
<v Speaker 1>inside

00:32:38.455 --> 00:32:39.255
<v Speaker 1>a

00:32:39.255 --> 00:32:40.135
<v Speaker 1>a namespace.

00:32:41.040 --> 00:32:43.120
<v Speaker 1>What this allows you to do is to

00:32:43.120 --> 00:32:44.000
<v Speaker 1>specify

00:32:45.280 --> 00:32:47.760
<v Speaker 1>a side arrange for that namespace.

00:32:51.040 --> 00:32:51.840
<v Speaker 1>A file option?

00:32:52.575 --> 00:32:54.414
<v Speaker 1>Oh. No. It's not here. I'm just I'm

00:32:54.414 --> 00:32:56.254
<v Speaker 0>just reading this diagram and

00:32:56.575 --> 00:32:58.975
<v Speaker 1>Okay. So, basically, this allows us to use

00:32:58.975 --> 00:33:00.815
<v Speaker 1>a different network range

00:33:00.815 --> 00:33:02.174
<v Speaker 1>for each namespace.

00:33:03.054 --> 00:33:04.894
<v Speaker 1>It it it also allows us to kind

00:33:04.894 --> 00:33:06.815
<v Speaker 1>of have segregation

00:33:07.630 --> 00:33:10.109
<v Speaker 1>based upon network configuration

00:33:10.270 --> 00:33:12.429
<v Speaker 1>in a particular namespace as well.

00:33:13.630 --> 00:33:15.309
<v Speaker 1>In the deployment that we've done here, we've

00:33:15.309 --> 00:33:18.190
<v Speaker 1>just deployed kube-vip in the default namespace.

00:33:18.270 --> 00:33:19.549
<v Speaker 1>We should be able to see this.

00:33:24.185 --> 00:33:24.985
<v Speaker 1>So

00:33:25.545 --> 00:33:27.784
<v Speaker 1>what's also happening here is

00:33:29.465 --> 00:33:30.184
<v Speaker 1>the

00:33:30.825 --> 00:33:32.585
<v Speaker 1>I I I can't remember why I did

00:33:32.585 --> 00:33:34.825
<v Speaker 1>this, but the the manifest for kube-vip

00:33:36.350 --> 00:33:38.670
<v Speaker 1>will always attempt to deploy

00:33:39.950 --> 00:33:42.030
<v Speaker 1>three instances at least.

00:33:42.670 --> 00:33:45.230
<v Speaker 1>But I've only got two nodes here, and

00:33:45.790 --> 00:33:48.110
<v Speaker 1>there was logic in the manifest to stop

00:33:48.110 --> 00:33:48.830
<v Speaker 1>to

00:33:48.990 --> 00:33:51.865
<v Speaker 1>kube-vip instances sitting on the same node. That's

00:33:51.865 --> 00:33:53.385
<v Speaker 1>why we have a a a one that's

00:33:53.385 --> 00:33:55.225
<v Speaker 1>left in pending. If I were to add

00:33:55.225 --> 00:33:57.225
<v Speaker 1>an extra node an extra worker, then it

00:33:57.225 --> 00:33:59.945
<v Speaker 1>would just deploy on that that additional worker.

00:34:02.505 --> 00:34:03.225
<v Speaker 1>So

00:34:03.500 --> 00:34:05.900
<v Speaker 1>we've got kube-vip up and running. What we

00:34:05.900 --> 00:34:07.420
<v Speaker 1>will do now is

00:34:07.820 --> 00:34:08.700
<v Speaker 1>we will

00:34:09.420 --> 00:34:11.020
<v Speaker 1>let shrink it down a little bit.

00:34:11.500 --> 00:34:14.220
<v Speaker 1>Do something quite obvious. We will

00:34:15.420 --> 00:34:17.660
<v Speaker 1>we'll deploy we'll create a quick deployment.

00:34:18.460 --> 00:34:20.525
<v Speaker 1>So we're doing an NGINX deployment,

00:34:22.924 --> 00:34:25.165
<v Speaker 1>which shouldn't take long to come up.

00:34:27.404 --> 00:34:28.764
<v Speaker 1>And finally,

00:34:30.605 --> 00:34:32.830
<v Speaker 1>let me just check the namespace.

00:34:32.830 --> 00:34:34.670
<v Speaker 1>So one of the other ways that this

00:34:34.670 --> 00:34:35.870
<v Speaker 1>works as well

00:34:36.190 --> 00:34:36.910
<v Speaker 1>is

00:34:42.270 --> 00:34:44.510
<v Speaker 1>it uses a

00:34:45.975 --> 00:34:48.614
<v Speaker 1>config map in the cube system namespace, which

00:34:48.614 --> 00:34:49.415
<v Speaker 1>is where

00:34:50.055 --> 00:34:51.735
<v Speaker 1>the cloud controller lives.

00:34:51.895 --> 00:34:53.815
<v Speaker 1>So that whoever is admin of the cluster

00:34:53.815 --> 00:34:54.775
<v Speaker 1>defines

00:34:55.415 --> 00:34:58.215
<v Speaker 1>the network ranges that kube-vip can run-in a

00:34:58.215 --> 00:34:59.495
<v Speaker 1>particular namespace.

00:34:59.735 --> 00:35:00.615
<v Speaker 1>We can see

00:35:01.630 --> 00:35:02.350
<v Speaker 1>here.

00:35:03.310 --> 00:35:03.950
<v Speaker 1>So

00:35:04.270 --> 00:35:06.030
<v Speaker 1>the way that it works is the network

00:35:06.030 --> 00:35:08.190
<v Speaker 1>range space and then the namespace.

00:35:08.190 --> 00:35:10.110
<v Speaker 1>So in the default namespace,

00:35:10.670 --> 00:35:12.990
<v Speaker 1>if I were to do a expose of

00:35:12.990 --> 00:35:14.270
<v Speaker 1>service type load balancer,

00:35:15.485 --> 00:35:17.885
<v Speaker 1>this is the network range that those IP

00:35:17.885 --> 00:35:19.485
<v Speaker 1>addresses can actually come from.

00:35:20.205 --> 00:35:20.765
<v Speaker 1>So

00:35:21.085 --> 00:35:23.885
<v Speaker 1>in in this config map, you typically say

00:35:23.885 --> 00:35:24.445
<v Speaker 1>that

00:35:25.085 --> 00:35:27.485
<v Speaker 1>perhaps in my namespace finance,

00:35:28.700 --> 00:35:30.460
<v Speaker 1>they get a side arrange of these 10

00:35:30.460 --> 00:35:31.580
<v Speaker 1>IP addresses.

00:35:31.740 --> 00:35:32.300
<v Speaker 1>In

00:35:33.020 --> 00:35:36.140
<v Speaker 1>in my debug or development environment, they may

00:35:36.140 --> 00:35:38.460
<v Speaker 1>have a hundred IP addresses in this particular

00:35:38.780 --> 00:35:39.980
<v Speaker 1>subnet and things like that.

00:35:42.525 --> 00:35:43.964
<v Speaker 1>So the

00:35:43.964 --> 00:35:46.365
<v Speaker 1>final step so we we we have kube-vip

00:35:46.365 --> 00:35:47.325
<v Speaker 1>up and running.

00:35:52.845 --> 00:35:55.005
<v Speaker 0>So now you're gonna load balance those two

00:35:55.005 --> 00:35:57.350
<v Speaker 0>engine x pods. Right? Yes.

00:35:58.150 --> 00:36:00.230
<v Speaker 1>There we go. So what we're gonna do,

00:36:00.950 --> 00:36:02.550
<v Speaker 1>we will expose those

00:36:08.325 --> 00:36:10.565
<v Speaker 1>And there we go. What's happened here is

00:36:10.565 --> 00:36:12.085
<v Speaker 1>that the cloud provider

00:36:12.325 --> 00:36:13.605
<v Speaker 1>will have looked up

00:36:14.085 --> 00:36:14.805
<v Speaker 1>the

00:36:15.045 --> 00:36:18.085
<v Speaker 1>the range in the in the config map.

00:36:19.045 --> 00:36:21.285
<v Speaker 1>It will have found an available IP address.

00:36:21.285 --> 00:36:23.970
<v Speaker 1>So IPAM is also managed by the cloud

00:36:23.970 --> 00:36:24.770
<v Speaker 1>controller.

00:36:25.330 --> 00:36:25.730
<v Speaker 1>It

00:36:26.450 --> 00:36:28.930
<v Speaker 1>will find a free IP address. All of

00:36:28.930 --> 00:36:30.290
<v Speaker 1>them will have been free at this point,

00:36:30.290 --> 00:36:31.570
<v Speaker 1>but it will have then selected the first

00:36:31.570 --> 00:36:34.130
<v Speaker 1>IP address in that side arrange.

00:36:35.010 --> 00:36:37.410
<v Speaker 1>And it will then use that IP address.

00:36:38.565 --> 00:36:41.365
<v Speaker 1>Kube vip is told that that is the

00:36:41.365 --> 00:36:42.085
<v Speaker 1>vip

00:36:42.325 --> 00:36:43.845
<v Speaker 1>for the load balancer.

00:36:44.325 --> 00:36:46.645
<v Speaker 1>So it will then take care of using

00:36:46.645 --> 00:36:48.485
<v Speaker 1>up to broadcast

00:36:49.125 --> 00:36:50.565
<v Speaker 1>that whichever

00:36:50.885 --> 00:36:53.204
<v Speaker 1>is the leader vip instance

00:36:52.790 --> 00:36:54.790
<v Speaker 1>now has this IP address.

00:36:55.109 --> 00:36:57.030
<v Speaker 1>And if we hit this IP address,

00:37:01.750 --> 00:37:03.589
<v Speaker 1>we should go through to one of the

00:37:03.589 --> 00:37:04.790
<v Speaker 1>NGINX instances.

00:37:05.030 --> 00:37:05.830
<v Speaker 1>So

00:37:07.164 --> 00:37:09.005
<v Speaker 1>that has basically

00:37:09.085 --> 00:37:11.805
<v Speaker 1>used the same technologies that we talked about

00:37:11.805 --> 00:37:12.365
<v Speaker 1>earlier.

00:37:12.765 --> 00:37:15.565
<v Speaker 1>These are the layer two technologies to advertise

00:37:16.365 --> 00:37:18.444
<v Speaker 1>an internal IP address that the rest of

00:37:18.444 --> 00:37:20.900
<v Speaker 1>the network can access that will load balance

00:37:20.900 --> 00:37:23.380
<v Speaker 1>back to those instances underneath.

00:37:24.580 --> 00:37:26.580
<v Speaker 1>So some additional things I'm looking at are

00:37:26.580 --> 00:37:28.020
<v Speaker 1>adding BGP

00:37:28.020 --> 00:37:29.780
<v Speaker 1>into this part of it.

00:37:31.140 --> 00:37:32.915
<v Speaker 1>It's a little bit more complicated

00:37:32.915 --> 00:37:34.675
<v Speaker 1>in that we're not really gonna be in

00:37:34.675 --> 00:37:36.435
<v Speaker 1>charge of the IP ranges

00:37:36.515 --> 00:37:38.515
<v Speaker 1>in most places in most cases.

00:37:38.995 --> 00:37:40.515
<v Speaker 1>So we'll I'll need to have some logic

00:37:40.515 --> 00:37:41.315
<v Speaker 1>in there,

00:37:41.635 --> 00:37:43.395
<v Speaker 1>but it's

00:37:43.395 --> 00:37:45.475
<v Speaker 1>certainly doable. All of the code already exists.

00:37:47.720 --> 00:37:50.680
<v Speaker 1>And the other thing that I was hoping

00:37:50.680 --> 00:37:51.880
<v Speaker 1>to demonstrate,

00:37:51.880 --> 00:37:53.640
<v Speaker 1>if I can remember the

00:37:53.640 --> 00:37:54.280
<v Speaker 1>right

00:37:54.520 --> 00:37:55.800
<v Speaker 1>line for it,

00:37:57.160 --> 00:37:57.800
<v Speaker 1>is

00:38:00.795 --> 00:38:03.035
<v Speaker 0>because you mentioned some sort of DHCP

00:38:03.035 --> 00:38:04.075
<v Speaker 0>stuff. Right?

00:38:05.355 --> 00:38:07.035
<v Speaker 0>Or if that or is that already what's

00:38:07.035 --> 00:38:09.835
<v Speaker 0>happening with the this load balancer IP address?

00:38:09.835 --> 00:38:11.915
<v Speaker 1>No. The so the IP address that was

00:38:11.915 --> 00:38:13.275
<v Speaker 1>allocated, that 201,

00:38:13.869 --> 00:38:15.470
<v Speaker 1>that came from the

00:38:15.790 --> 00:38:17.390
<v Speaker 1>the cloud controller.

00:38:17.710 --> 00:38:18.670
<v Speaker 1>Here it is.

00:38:19.869 --> 00:38:22.430
<v Speaker 1>So this I can't this might work.

00:38:28.055 --> 00:38:29.975
<v Speaker 1>And let's give the name

00:38:31.175 --> 00:38:32.375
<v Speaker 1>dash DHCP.

00:38:39.300 --> 00:38:40.100
<v Speaker 1>Right.

00:38:40.740 --> 00:38:42.260
<v Speaker 1>What was done there? Nope.

00:38:42.660 --> 00:38:43.700
<v Speaker 1>I need to give it the

00:38:46.740 --> 00:38:48.820
<v Speaker 1>that's the name of the deployment. Our load

00:38:48.820 --> 00:38:51.300
<v Speaker 1>balance will be called dash d h c

00:38:51.300 --> 00:38:51.540
<v Speaker 1>p.

00:38:52.825 --> 00:38:55.625
<v Speaker 0>Right there also. Right. Okay. So what I've

00:38:55.625 --> 00:38:56.425
<v Speaker 1>done here

00:38:57.305 --> 00:38:58.985
<v Speaker 1>is we've specified

00:38:59.145 --> 00:39:01.065
<v Speaker 1>a load balancer IP

00:39:01.305 --> 00:39:03.545
<v Speaker 1>of 0000,

00:39:03.865 --> 00:39:06.025
<v Speaker 1>which obviously is a kind of a nonsensical

00:39:06.025 --> 00:39:06.585
<v Speaker 1>IP address.

00:39:08.190 --> 00:39:10.510
<v Speaker 1>And if I've gotten the right image downloaded,

00:39:10.510 --> 00:39:11.870
<v Speaker 1>was in a bit of a rush.

00:39:12.590 --> 00:39:14.830
<v Speaker 1>What will actually have happened

00:39:15.230 --> 00:39:18.350
<v Speaker 1>is that instead of the cloud provider

00:39:18.750 --> 00:39:21.470
<v Speaker 1>looking at the cider range and finding an

00:39:21.470 --> 00:39:23.735
<v Speaker 1>IP address that is available,

00:39:24.375 --> 00:39:26.695
<v Speaker 1>that the kube vip instance that was the

00:39:26.695 --> 00:39:27.415
<v Speaker 1>leader

00:39:27.895 --> 00:39:31.015
<v Speaker 1>will have actually done a DHCP request

00:39:31.015 --> 00:39:32.935
<v Speaker 1>from the network that it's on,

00:39:34.215 --> 00:39:36.055
<v Speaker 1>which the the idea behind this is kind

00:39:36.055 --> 00:39:37.735
<v Speaker 1>of edge environments where

00:39:38.240 --> 00:39:40.319
<v Speaker 1>we don't wanna worry about IPAM. We basically

00:39:40.319 --> 00:39:42.560
<v Speaker 1>may have a tiny Kubernetes cluster

00:39:42.640 --> 00:39:45.119
<v Speaker 1>that sits under a small router somewhere.

00:39:46.640 --> 00:39:48.960
<v Speaker 1>And we can basically just have the router

00:39:48.960 --> 00:39:50.720
<v Speaker 1>use DHCP leases

00:39:50.799 --> 00:39:53.520
<v Speaker 1>and apply those into our load balancer instance.

00:39:56.855 --> 00:39:57.575
<v Speaker 1>Nice.

00:39:57.975 --> 00:39:59.255
<v Speaker 1>Oh, it's not worked.

00:40:01.655 --> 00:40:03.735
<v Speaker 1>Maybe I've got the wrong pods downloaded.

00:40:04.135 --> 00:40:06.215
<v Speaker 1>If it had worked That'd be impressive.

00:40:06.295 --> 00:40:08.215
<v Speaker 1>Yeah. If it had worked, we would have

00:40:08.215 --> 00:40:08.855
<v Speaker 1>had the

00:40:09.670 --> 00:40:13.590
<v Speaker 1>the DHCP IP address here, not the 000.

00:40:15.030 --> 00:40:17.190
<v Speaker 1>Damn it. Live demos.

00:40:20.550 --> 00:40:20.950
<v Speaker 0>Okay.

00:40:22.745 --> 00:40:23.625
<v Speaker 0>That's okay.

00:40:24.105 --> 00:40:25.465
<v Speaker 0>I should give the script to figure it

00:40:25.465 --> 00:40:25.945
<v Speaker 0>out.

00:40:27.065 --> 00:40:28.745
<v Speaker 0>Oh, you're gonna try and fix it. Oh.

00:40:28.745 --> 00:40:30.345
<v Speaker 0>Live live debugging.

00:40:30.825 --> 00:40:32.185
<v Speaker 1>I've got the wrong interface.

00:40:35.490 --> 00:40:37.010
<v Speaker 1>It's ends 160,

00:40:37.010 --> 00:40:38.530
<v Speaker 1>and then my config is wrong.

00:40:39.330 --> 00:40:40.130
<v Speaker 0>Oh.

00:40:40.370 --> 00:40:42.130
<v Speaker 1>That's what's wrong. So it's it's basically

00:40:42.770 --> 00:40:44.610
<v Speaker 1>if my config had have been right,

00:40:45.890 --> 00:40:48.325
<v Speaker 1>what would have happened is that it would

00:40:48.325 --> 00:40:51.525
<v Speaker 1>have done a DHCP request on that interface,

00:40:53.605 --> 00:40:55.765
<v Speaker 1>and we wouldn't have had this issue.

00:40:57.205 --> 00:40:58.725
<v Speaker 1>If we have time, I can probably try

00:40:58.725 --> 00:41:00.085
<v Speaker 1>and fix it. If not, it's not really

00:41:00.085 --> 00:41:01.690
<v Speaker 1>the end of the world. It's a config

00:41:01.690 --> 00:41:03.450
<v Speaker 1>issue, not not my code

00:41:04.090 --> 00:41:04.890
<v Speaker 1>apparently.

00:41:04.890 --> 00:41:07.050
<v Speaker 1>But Yeah. Yeah. Yeah. There we go. Excellent.

00:41:09.530 --> 00:41:10.810
<v Speaker 1>So yeah. That's

00:41:10.890 --> 00:41:13.050
<v Speaker 0>So that allows you to have kubernetes sorry.

00:41:13.050 --> 00:41:15.210
<v Speaker 0>I'm kinda talking over there. That allows you

00:41:15.210 --> 00:41:16.525
<v Speaker 0>to have services

00:41:16.525 --> 00:41:19.805
<v Speaker 0>which register themselves on the the the physical

00:41:19.805 --> 00:41:22.045
<v Speaker 0>network. Right? That's kind of what this is

00:41:22.045 --> 00:41:24.605
<v Speaker 0>doing. Yeah. Absolutely. That service would be available

00:41:24.605 --> 00:41:26.125
<v Speaker 0>to anything on my network whether it's part

00:41:26.125 --> 00:41:29.085
<v Speaker 0>of the Kubernetes cluster or not. Yes. Absolutely.

00:41:29.485 --> 00:41:30.445
<v Speaker 1>So

00:41:30.980 --> 00:41:32.980
<v Speaker 1>the the the person who came up with

00:41:32.980 --> 00:41:34.180
<v Speaker 1>this idea was,

00:41:34.980 --> 00:41:37.220
<v Speaker 1>yeah, just for for, like, home lab usage.

00:41:38.500 --> 00:41:40.340
<v Speaker 1>Instead of having to worry about,

00:41:40.660 --> 00:41:41.940
<v Speaker 1>you know, kind of coming up with IP

00:41:41.940 --> 00:41:43.140
<v Speaker 1>addresses and whatnot,

00:41:44.099 --> 00:41:45.780
<v Speaker 1>the the plan was that

00:41:48.045 --> 00:41:48.845
<v Speaker 1>DHCP

00:41:48.845 --> 00:41:51.165
<v Speaker 1>that already exists in the building of

00:41:51.245 --> 00:41:53.085
<v Speaker 1>from his ADSL router,

00:41:53.805 --> 00:41:55.725
<v Speaker 1>it basically, if I do an expose

00:41:55.885 --> 00:41:57.725
<v Speaker 1>and pass the IP address, then, you know,

00:41:57.725 --> 00:41:59.405
<v Speaker 1>my router will give me an IP address

00:41:59.405 --> 00:42:00.045
<v Speaker 1>on the network.

00:42:01.400 --> 00:42:02.760
<v Speaker 1>And I don't really have to care about

00:42:02.760 --> 00:42:04.200
<v Speaker 0>it. I'll just get the IP address to

00:42:04.200 --> 00:42:05.320
<v Speaker 1>get services.

00:42:05.960 --> 00:42:08.200
<v Speaker 1>And that router supplied IP address is my

00:42:08.200 --> 00:42:09.720
<v Speaker 1>load balancer IP address.

00:42:11.160 --> 00:42:12.840
<v Speaker 0>Very, very cool. I like it.

00:42:14.904 --> 00:42:16.825
<v Speaker 0>So I guess the

00:42:17.704 --> 00:42:20.184
<v Speaker 0>the big scary question I've got there is

00:42:20.184 --> 00:42:23.224
<v Speaker 0>everything you're showing so far is IPv four.

00:42:25.065 --> 00:42:25.545
<v Speaker 1>Run.

00:42:29.170 --> 00:42:31.010
<v Speaker 0>What's what's this the status of I p

00:42:31.010 --> 00:42:32.210
<v Speaker 0>v six? Is is

00:42:32.690 --> 00:42:35.170
<v Speaker 0>that's still applicable? Is this still something that

00:42:35.170 --> 00:42:37.010
<v Speaker 0>you want to support? Does this support you?

00:42:37.010 --> 00:42:38.290
<v Speaker 0>Or it doesn't support already?

00:42:39.714 --> 00:42:41.795
<v Speaker 1>I have not even tested

00:42:41.875 --> 00:42:43.715
<v Speaker 1>I p v six at this point.

00:42:44.355 --> 00:42:46.275
<v Speaker 1>As I mentioned, this is mainly been to

00:42:46.275 --> 00:42:47.795
<v Speaker 1>kind of scratch an

00:42:47.795 --> 00:42:48.675
<v Speaker 1>itch

00:42:49.714 --> 00:42:51.234
<v Speaker 1>internally, and I I don't really have any

00:42:51.234 --> 00:42:52.915
<v Speaker 1>I p v six

00:42:53.640 --> 00:42:54.760
<v Speaker 1>in my house

00:42:55.240 --> 00:42:57.000
<v Speaker 1>really to test this. And

00:42:57.240 --> 00:42:59.559
<v Speaker 1>the people that are starting to use this,

00:42:59.559 --> 00:43:01.000
<v Speaker 1>nobody has actually raised

00:43:01.240 --> 00:43:03.079
<v Speaker 1>a requirement for I p v six at

00:43:03.079 --> 00:43:03.800
<v Speaker 1>the moment.

00:43:04.279 --> 00:43:04.760
<v Speaker 1>However,

00:43:06.135 --> 00:43:08.615
<v Speaker 1>all of the things that it's actually doing,

00:43:09.335 --> 00:43:09.975
<v Speaker 1>there

00:43:10.135 --> 00:43:12.855
<v Speaker 1>shouldn't be any real reason why it would

00:43:12.855 --> 00:43:14.295
<v Speaker 1>be an issue to implement

00:43:14.455 --> 00:43:15.735
<v Speaker 1>I p v six support.

00:43:18.360 --> 00:43:20.520
<v Speaker 0>Okay. Maybe that's something I'll try and

00:43:21.320 --> 00:43:23.560
<v Speaker 0>okay. Maybe spin up a cluster. Is that

00:43:23.560 --> 00:43:25.640
<v Speaker 0>a hack and pack? We'll try to I

00:43:25.640 --> 00:43:27.000
<v Speaker 0>p v six only.

00:43:28.120 --> 00:43:30.200
<v Speaker 1>I think there is some some of the

00:43:30.200 --> 00:43:32.725
<v Speaker 1>Go API. Some of the Go calls are

00:43:32.725 --> 00:43:34.725
<v Speaker 1>maybe IPv four specific.

00:43:34.725 --> 00:43:36.085
<v Speaker 1>I can't remember off the top of my

00:43:36.085 --> 00:43:36.645
<v Speaker 1>head.

00:43:37.285 --> 00:43:39.605
<v Speaker 1>And for the BGP stuff, it is specifically

00:43:39.605 --> 00:43:40.885
<v Speaker 1>doing IPv

00:43:40.885 --> 00:43:41.605
<v Speaker 1>four

00:43:42.885 --> 00:43:44.005
<v Speaker 1>routes that it's adding.

00:43:44.650 --> 00:43:46.890
<v Speaker 1>So that definitely will would result in an

00:43:46.890 --> 00:43:47.450
<v Speaker 1>error

00:43:49.610 --> 00:43:51.210
<v Speaker 1>off the top of my head. But as

00:43:51.210 --> 00:43:53.450
<v Speaker 1>I mentioned, I don't see I don't see

00:43:53.450 --> 00:43:55.610
<v Speaker 1>why not. It's just not been done. That's

00:43:55.610 --> 00:43:55.850
<v Speaker 1>all.

00:43:57.375 --> 00:43:58.895
<v Speaker 0>Alright. That's

00:43:59.055 --> 00:44:01.455
<v Speaker 0>awesome. There is a lot to take in

00:44:01.455 --> 00:44:03.535
<v Speaker 0>there, but that is all very, very cool.

00:44:04.015 --> 00:44:05.375
<v Speaker 0>What's coming next?

00:44:05.455 --> 00:44:08.255
<v Speaker 0>What's next on the plunder head list? So

00:44:08.495 --> 00:44:10.495
<v Speaker 1>there's a couple of things that have been

00:44:10.495 --> 00:44:12.495
<v Speaker 1>suggested by a couple of colleagues

00:44:13.880 --> 00:44:16.360
<v Speaker 1>that are are basically kind of half implemented

00:44:16.360 --> 00:44:17.000
<v Speaker 1>and

00:44:17.160 --> 00:44:19.320
<v Speaker 1>should be coming in in next release.

00:44:20.120 --> 00:44:21.880
<v Speaker 1>One is UPnP.

00:44:22.680 --> 00:44:24.680
<v Speaker 1>So what that means is that if we

00:44:24.680 --> 00:44:26.920
<v Speaker 1>do a kube-ctl expose again, these are kind

00:44:26.920 --> 00:44:28.760
<v Speaker 1>of like home or edge networks and things

00:44:28.760 --> 00:44:29.160
<v Speaker 1>like that.

00:44:30.095 --> 00:44:31.455
<v Speaker 1>And we enable that.

00:44:31.934 --> 00:44:34.734
<v Speaker 1>The the ports that we specify as part

00:44:34.734 --> 00:44:37.295
<v Speaker 1>of the expose would also be specified on

00:44:37.295 --> 00:44:38.175
<v Speaker 1>your router.

00:44:38.494 --> 00:44:40.575
<v Speaker 1>So you could do a kube-ctl expose

00:44:40.895 --> 00:44:41.855
<v Speaker 1>port

00:44:41.855 --> 00:44:43.055
<v Speaker 1>one eighty eighty,

00:44:43.760 --> 00:44:46.480
<v Speaker 1>and your router would port forward immediately

00:44:46.960 --> 00:44:49.440
<v Speaker 1>to the kube-vip instance in your Kubernetes cluster.

00:44:49.440 --> 00:44:51.120
<v Speaker 1>So you could expose a service

00:44:51.359 --> 00:44:53.120
<v Speaker 1>at home to the Internet

00:44:53.280 --> 00:44:54.559
<v Speaker 1>using UPnP.

00:44:57.015 --> 00:44:57.655
<v Speaker 0>Okay.

00:44:59.575 --> 00:45:01.255
<v Speaker 1>And finally I'd I'd

00:45:02.055 --> 00:45:04.375
<v Speaker 0>I do. Does that that make sense?

00:45:05.255 --> 00:45:07.255
<v Speaker 0>Yeah. I think I'm just catching up with

00:45:07.255 --> 00:45:09.095
<v Speaker 0>you. I'm just I'm just thinking about it.

00:45:09.095 --> 00:45:09.734
<v Speaker 0>So yeah.

00:45:11.100 --> 00:45:13.660
<v Speaker 1>So it's it's basically normally, if you had

00:45:13.660 --> 00:45:15.420
<v Speaker 1>a service inside your house, you would need

00:45:15.420 --> 00:45:17.020
<v Speaker 1>to go to your router and enable port

00:45:17.020 --> 00:45:17.740
<v Speaker 1>forwarding.

00:45:18.380 --> 00:45:18.860
<v Speaker 1>But

00:45:19.500 --> 00:45:22.060
<v Speaker 1>the majority of home routers typically will support

00:45:22.060 --> 00:45:23.100
<v Speaker 1>UPNP,

00:45:24.204 --> 00:45:27.165
<v Speaker 1>which would allow us to basically broadcast

00:45:27.165 --> 00:45:29.964
<v Speaker 1>one of the whichever kube-vip instances leader will

00:45:29.964 --> 00:45:30.765
<v Speaker 1>broadcast

00:45:31.645 --> 00:45:32.845
<v Speaker 1>this port.

00:45:32.845 --> 00:45:35.165
<v Speaker 1>I wanna expose it via UPnP

00:45:35.325 --> 00:45:36.605
<v Speaker 1>back to myself,

00:45:37.299 --> 00:45:39.220
<v Speaker 1>and UPnP will take care of the port

00:45:39.220 --> 00:45:40.579
<v Speaker 1>forwarding automatically.

00:45:40.579 --> 00:45:42.180
<v Speaker 1>So a kube-ctl

00:45:42.180 --> 00:45:42.980
<v Speaker 1>expose

00:45:43.539 --> 00:45:44.980
<v Speaker 1>will automatically

00:45:45.220 --> 00:45:46.980
<v Speaker 1>tell your home router,

00:45:47.220 --> 00:45:48.900
<v Speaker 1>open this port on your firewall,

00:45:49.345 --> 00:45:51.585
<v Speaker 1>and incoming traffic on that port should also

00:45:51.585 --> 00:45:53.345
<v Speaker 1>come to this kube-vip instance.

00:45:53.905 --> 00:45:56.305
<v Speaker 1>So Ah, I get it. I get it.

00:45:56.305 --> 00:45:56.945
<v Speaker 0>Okay.

00:45:57.665 --> 00:45:59.185
<v Speaker 0>And what do you know? It just took

00:45:59.185 --> 00:46:00.465
<v Speaker 0>a bit longer than most.

00:46:01.265 --> 00:46:03.425
<v Speaker 1>A multicast DNS as well was something I

00:46:03.425 --> 00:46:05.369
<v Speaker 1>was thinking about implementing. So

00:46:06.730 --> 00:46:08.970
<v Speaker 1>we could expose a service and we would

00:46:08.970 --> 00:46:12.170
<v Speaker 1>m DNS it. So a bit like Bonjour

00:46:12.410 --> 00:46:14.730
<v Speaker 1>well, exactly like Bonjour services and things like

00:46:14.730 --> 00:46:15.210
<v Speaker 1>that.

00:46:15.849 --> 00:46:18.089
<v Speaker 1>A service would be advertised on the network.

00:46:18.089 --> 00:46:20.010
<v Speaker 1>Your load balance service will be advertised

00:46:20.565 --> 00:46:21.685
<v Speaker 1>through multicast

00:46:21.685 --> 00:46:22.565
<v Speaker 1>DNS.

00:46:24.724 --> 00:46:27.125
<v Speaker 1>Not entirely sure who or anybody would ever

00:46:27.125 --> 00:46:28.165
<v Speaker 1>use that, but

00:46:29.204 --> 00:46:30.565
<v Speaker 1>I don't know. I was I was coming

00:46:30.565 --> 00:46:31.925
<v Speaker 1>up with a bunch of random ideas one

00:46:31.925 --> 00:46:33.605
<v Speaker 1>night, that just seemed like something to implement

00:46:33.605 --> 00:46:33.925
<v Speaker 1>as well.

00:46:34.710 --> 00:46:37.030
<v Speaker 0>Alright. Random ideas are the best ideas. Yeah.

00:46:37.030 --> 00:46:38.869
<v Speaker 1>Absolutely. And then maybe IPv6.

00:46:38.869 --> 00:46:39.109
<v Speaker 1>So

00:46:39.830 --> 00:46:43.430
<v Speaker 0>Yeah. Definitely IPv6 because, you know, IPv4 is

00:46:43.910 --> 00:46:45.349
<v Speaker 0>we're done with that. Right? The whole world

00:46:45.349 --> 00:46:47.190
<v Speaker 0>is IPv6 now. That's what I hear.

00:46:47.835 --> 00:46:50.715
<v Speaker 0>So we got two comments. So Bradley said

00:46:50.715 --> 00:46:51.355
<v Speaker 0>sweet.

00:46:51.755 --> 00:46:53.994
<v Speaker 0>I think that was on the u m

00:46:53.994 --> 00:46:55.435
<v Speaker 0>p UPnP

00:46:55.435 --> 00:46:56.075
<v Speaker 0>stuff.

00:46:56.315 --> 00:46:58.235
<v Speaker 0>But he also asked a question.

00:46:58.875 --> 00:47:00.475
<v Speaker 0>And I think we're just jumping back maybe

00:47:00.475 --> 00:47:01.915
<v Speaker 0>five minutes now. But what he says is,

00:47:01.920 --> 00:47:03.760
<v Speaker 0>am I right in thinking that your router

00:47:03.760 --> 00:47:06.240
<v Speaker 0>would be able to handle a DHCP request

00:47:06.240 --> 00:47:07.600
<v Speaker 0>from the controller

00:47:07.760 --> 00:47:10.800
<v Speaker 0>and assign your machine another IP address?

00:47:11.040 --> 00:47:13.520
<v Speaker 0>So I guess this is the DHCP support

00:47:13.520 --> 00:47:15.520
<v Speaker 0>that he's referencing here. So

00:47:16.115 --> 00:47:17.954
<v Speaker 1>it it really does need a diagram because

00:47:17.954 --> 00:47:20.115
<v Speaker 1>it's a little bit hard to explain.

00:47:20.115 --> 00:47:22.275
<v Speaker 1>But what what would actually happen what should

00:47:22.275 --> 00:47:23.635
<v Speaker 1>have happened is

00:47:25.234 --> 00:47:25.955
<v Speaker 1>the

00:47:26.194 --> 00:47:28.914
<v Speaker 1>when you specify an expose and you want

00:47:28.914 --> 00:47:30.035
<v Speaker 1>to use DHCP,

00:47:31.770 --> 00:47:35.610
<v Speaker 1>kube-vip will basically run a DHCP server requesting

00:47:35.610 --> 00:47:38.170
<v Speaker 1>another IP address on the network.

00:47:38.730 --> 00:47:41.610
<v Speaker 1>It will create an additional interface

00:47:41.610 --> 00:47:44.244
<v Speaker 1>within the host that's the leader, and it

00:47:44.244 --> 00:47:45.205
<v Speaker 1>will bind

00:47:45.525 --> 00:47:46.165
<v Speaker 1>the

00:47:46.565 --> 00:47:47.445
<v Speaker 1>lease,

00:47:47.765 --> 00:47:49.605
<v Speaker 1>your DHCP IP address

00:47:50.085 --> 00:47:50.885
<v Speaker 1>to

00:47:51.045 --> 00:47:53.045
<v Speaker 1>to that additional interface. So

00:47:54.005 --> 00:47:54.965
<v Speaker 1>we have

00:47:55.365 --> 00:47:58.140
<v Speaker 1>your eth 0. You can have ETH 0

00:47:58.140 --> 00:48:01.180
<v Speaker 1>colon zero, ETH zero colon one. These are

00:48:01.180 --> 00:48:02.700
<v Speaker 1>additional stacks,

00:48:03.020 --> 00:48:05.660
<v Speaker 1>TCP stacks that live on the same physical

00:48:05.660 --> 00:48:06.380
<v Speaker 1>interface.

00:48:06.700 --> 00:48:08.780
<v Speaker 1>So we can broadcast from the physical interface

00:48:08.780 --> 00:48:10.220
<v Speaker 1>and then bind that configuration

00:48:10.865 --> 00:48:12.865
<v Speaker 1>to a kind of pseudo adapter,

00:48:13.105 --> 00:48:14.704
<v Speaker 1>which will take care of handling the traffic

00:48:14.704 --> 00:48:16.465
<v Speaker 1>and passing it back to kube-vip

00:48:16.625 --> 00:48:18.305
<v Speaker 1>and pass that then to the pods that

00:48:18.305 --> 00:48:19.265
<v Speaker 1>sit underneath.

00:48:19.585 --> 00:48:21.025
<v Speaker 1>So effectively,

00:48:21.744 --> 00:48:23.760
<v Speaker 1>you know, kind of the same way a

00:48:23.760 --> 00:48:26.560
<v Speaker 1>virtual machine would spin up a virtual Ethernet

00:48:26.560 --> 00:48:28.800
<v Speaker 1>adapter and do a DHCP request. We're kinda

00:48:28.800 --> 00:48:30.000
<v Speaker 1>doing something similar

00:48:30.720 --> 00:48:32.640
<v Speaker 1>with kube-vip, but we're basically just spinning up

00:48:32.640 --> 00:48:33.200
<v Speaker 1>a

00:48:33.920 --> 00:48:36.000
<v Speaker 1>it's a a Mac v tap that we're

00:48:36.000 --> 00:48:38.724
<v Speaker 1>actually using in order to do a layer

00:48:38.724 --> 00:48:41.525
<v Speaker 1>two. I want a DHCP address,

00:48:41.685 --> 00:48:43.205
<v Speaker 1>and it will then take care of assigning

00:48:43.205 --> 00:48:44.805
<v Speaker 1>that and doing what it needs to do.

00:48:47.285 --> 00:48:49.605
<v Speaker 0>Okay. I understood some of that. Wonderful.

00:48:50.645 --> 00:48:51.685
<v Speaker 1>Sorry. Have to.

00:48:52.390 --> 00:48:54.870
<v Speaker 1>Documentation is solely lacking, unfortunately.

00:48:56.630 --> 00:48:58.790
<v Speaker 0>Probably, I just asked one more question then.

00:48:58.790 --> 00:49:01.190
<v Speaker 0>He's asking, can you use zero conf? I

00:49:01.190 --> 00:49:02.790
<v Speaker 0>don't know what that is. For the DNS

00:49:02.790 --> 00:49:03.510
<v Speaker 0>multicast.

00:49:05.474 --> 00:49:07.555
<v Speaker 1>It's a good question. I I so

00:49:08.835 --> 00:49:11.715
<v Speaker 1>I mean, zero conf normally is

00:49:12.275 --> 00:49:14.674
<v Speaker 1>when something boots up for the first time,

00:49:14.674 --> 00:49:16.515
<v Speaker 1>it will do kind of some level of

00:49:16.835 --> 00:49:18.355
<v Speaker 1>request on the network for

00:49:19.080 --> 00:49:19.880
<v Speaker 1>configuration

00:49:19.880 --> 00:49:21.160
<v Speaker 1>information. So

00:49:21.480 --> 00:49:22.680
<v Speaker 1>some switches

00:49:23.400 --> 00:49:25.480
<v Speaker 1>will do zero confident. You turn them on

00:49:25.480 --> 00:49:26.680
<v Speaker 1>for the first time, and they will pull

00:49:26.680 --> 00:49:28.440
<v Speaker 1>their config from somewhere.

00:49:29.880 --> 00:49:32.585
<v Speaker 1>I'm not sure how that would. The the

00:49:32.585 --> 00:49:34.505
<v Speaker 1>idea for the the the I was looking

00:49:34.505 --> 00:49:36.585
<v Speaker 1>up for MDNS was basically

00:49:37.545 --> 00:49:39.865
<v Speaker 1>I would do an expose of my NGINX

00:49:39.865 --> 00:49:41.785
<v Speaker 1>and anything that uses

00:49:43.385 --> 00:49:45.480
<v Speaker 1>an MDNS looker would be able to find

00:49:45.480 --> 00:49:47.400
<v Speaker 1>that on the network, get its IP address,

00:49:47.400 --> 00:49:49.080
<v Speaker 1>and suddenly start speaking to it. So it's

00:49:49.080 --> 00:49:49.560
<v Speaker 1>it's

00:49:50.040 --> 00:49:51.560
<v Speaker 1>in my head, I was gonna use it

00:49:51.560 --> 00:49:53.480
<v Speaker 1>as another way of kind of service discovery.

00:49:55.400 --> 00:49:57.080
<v Speaker 0>Alright. Okay. Cool.

00:49:58.835 --> 00:50:01.075
<v Speaker 0>I think that handles all of our questions.

00:50:01.075 --> 00:50:03.875
<v Speaker 0>Do you have any closing thoughts that you'd

00:50:03.875 --> 00:50:04.915
<v Speaker 0>like to finish up?

00:50:07.395 --> 00:50:09.155
<v Speaker 1>No. Not so far. I'm

00:50:09.474 --> 00:50:11.714
<v Speaker 1>if anybody has any

00:50:11.714 --> 00:50:14.035
<v Speaker 1>suggestions or or things that

00:50:14.410 --> 00:50:16.090
<v Speaker 1>they would like to see implemented,

00:50:16.090 --> 00:50:16.650
<v Speaker 1>then

00:50:18.010 --> 00:50:20.170
<v Speaker 1>feel free. I'm always kind of looking for

00:50:20.170 --> 00:50:21.690
<v Speaker 1>new things to implement

00:50:21.850 --> 00:50:23.770
<v Speaker 1>and kind of fiddle with.

00:50:24.890 --> 00:50:25.210
<v Speaker 1>Yeah.

00:50:27.375 --> 00:50:28.655
<v Speaker 1>You know, it's out there. If you wanna

00:50:28.655 --> 00:50:30.335
<v Speaker 1>use it, go for it. If you've got

00:50:30.335 --> 00:50:32.095
<v Speaker 1>any feedback, I'd love to hear it.

00:50:33.055 --> 00:50:35.695
<v Speaker 0>Alright. Well, thank you very much, pulsing circle,

00:50:35.695 --> 00:50:38.175
<v Speaker 0>Dan. It's been an absolute pleasure. I have

00:50:38.175 --> 00:50:39.535
<v Speaker 0>learned a ton.

00:50:39.695 --> 00:50:41.215
<v Speaker 0>So thank you very much for joining me.

00:50:41.215 --> 00:50:42.655
<v Speaker 0>That was it was really cool. I enjoyed

00:50:42.655 --> 00:50:45.190
<v Speaker 0>that. Thank you. Alright. Have a nice day.

00:50:45.190 --> 00:50:47.030
<v Speaker 0>I'll speak to you all soon. Thanks. Bye.
