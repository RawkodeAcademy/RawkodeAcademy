WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 55186e30-179b-4f03-beb1-ac31e7f4d038
Created: 2025-04-29T19:17:45.497Z
Duration: 5064.36
Channels: 1

00:00:27.300 --> 00:00:29.940
<v Speaker 0>Hello, and welcome to today's episode of Rawkode

00:00:29.940 --> 00:00:32.980
<v Speaker 0>live. I'm your host, Rawkode. Before we begin,

00:00:32.980 --> 00:00:34.420
<v Speaker 0>I've just got a little bit of housekeeping

00:00:34.420 --> 00:00:35.780
<v Speaker 0>to sort out, and then we'll move on

00:00:35.780 --> 00:00:38.820
<v Speaker 0>with today's session. Today's session is a Kubernetes

00:00:38.820 --> 00:00:40.820
<v Speaker 0>security lab slash workshop.

00:00:42.005 --> 00:00:45.445
<v Speaker 0>Now I would please encourage you to click

00:00:45.445 --> 00:00:47.525
<v Speaker 0>subscribe on YouTube and click the bell. This

00:00:47.525 --> 00:00:50.085
<v Speaker 0>will get you notifications for all new episodes.

00:00:50.165 --> 00:00:51.925
<v Speaker 0>As I explore the cloud native landscape, you

00:00:51.925 --> 00:00:53.045
<v Speaker 0>get to do it with me, and we

00:00:53.045 --> 00:00:54.005
<v Speaker 0>can all learn together.

00:00:55.170 --> 00:00:57.490
<v Speaker 0>We also have a rather active Discord server

00:00:57.490 --> 00:00:59.170
<v Speaker 0>available at Rawkode.chat.

00:00:59.170 --> 00:01:00.690
<v Speaker 0>If you're not watching live, that is the

00:01:00.690 --> 00:01:02.450
<v Speaker 0>best place to come and ask questions, suggest

00:01:02.450 --> 00:01:04.610
<v Speaker 0>new episodes, and get involved with the community.

00:01:04.610 --> 00:01:06.450
<v Speaker 0>Please feel free to jump in there, say

00:01:06.450 --> 00:01:06.690
<v Speaker 0>hello,

00:01:07.385 --> 00:01:09.785
<v Speaker 0>and I'll speak to you soon. And lastly,

00:01:09.785 --> 00:01:11.785
<v Speaker 0>I wanna thank Equinix Medal. They are my

00:01:11.785 --> 00:01:14.505
<v Speaker 0>employer, and they allow me the resources, the

00:01:14.505 --> 00:01:16.585
<v Speaker 0>time, and the energy to invest into this

00:01:16.585 --> 00:01:18.585
<v Speaker 0>show producing this content. So thank you very

00:01:18.585 --> 00:01:19.065
<v Speaker 0>much.

00:01:19.705 --> 00:01:21.829
<v Speaker 0>Thank you very much, Equinix Medal. You could

00:01:21.829 --> 00:01:24.549
<v Speaker 0>check out Equinix Medal with a $50 code.

00:01:24.549 --> 00:01:27.189
<v Speaker 0>Use Rawkode dash live. $50

00:01:27.189 --> 00:01:29.189
<v Speaker 0>is roughly around one hundred hours of compute.

00:01:29.189 --> 00:01:31.109
<v Speaker 0>Use it as wisely as you wish.

00:01:31.670 --> 00:01:35.030
<v Speaker 0>Okay. Now I know nothing about Kubernetes security,

00:01:35.030 --> 00:01:35.509
<v Speaker 0>but

00:01:35.955 --> 00:01:37.155
<v Speaker 0>but fortunately,

00:01:37.314 --> 00:01:39.954
<v Speaker 0>I'm joined by someone who does. Rory McKeon,

00:01:39.955 --> 00:01:40.994
<v Speaker 0>a cloud

00:01:41.314 --> 00:01:43.875
<v Speaker 0>oh, I forgot. A cloud developer advocate and

00:01:43.875 --> 00:01:45.475
<v Speaker 0>security at Aqua Security.

00:01:45.715 --> 00:01:47.795
<v Speaker 0>Is that close? Yeah. Cool. Yeah. Yeah. That's

00:01:47.795 --> 00:01:50.515
<v Speaker 1>very good. We we went for cloud native

00:01:50.230 --> 00:01:51.830
<v Speaker 1>security advocate. We were trying to work out

00:01:51.830 --> 00:01:53.430
<v Speaker 1>what we're gonna call this that I do,

00:01:53.430 --> 00:01:54.870
<v Speaker 1>and that's what we've come up with. Cloud

00:01:54.870 --> 00:01:57.030
<v Speaker 0>native security advocate. Awesome.

00:01:57.110 --> 00:01:59.990
<v Speaker 0>So why don't we just quickly start with

00:01:59.990 --> 00:02:01.670
<v Speaker 0>you telling us a little bit about you,

00:02:01.670 --> 00:02:02.790
<v Speaker 0>and then we'll talk about what we plan

00:02:02.790 --> 00:02:03.510
<v Speaker 0>to cover today.

00:02:04.455 --> 00:02:05.735
<v Speaker 1>Sure. Yeah. So

00:02:06.215 --> 00:02:07.655
<v Speaker 1>I said I'm an Equinix,

00:02:07.735 --> 00:02:09.655
<v Speaker 1>a cloud native security advocate. So my role

00:02:09.655 --> 00:02:12.135
<v Speaker 1>is basically trying to educate and inform

00:02:12.215 --> 00:02:15.815
<v Speaker 1>around around cloud native security, Kubernetes security, containers.

00:02:15.815 --> 00:02:17.334
<v Speaker 1>That's why I'm really happy to be doing

00:02:17.334 --> 00:02:19.709
<v Speaker 1>this today. I've been doing container security now

00:02:19.709 --> 00:02:22.829
<v Speaker 1>for about five years. Started with my previous

00:02:22.829 --> 00:02:23.310
<v Speaker 1>role,

00:02:23.629 --> 00:02:26.189
<v Speaker 1>and I've been doing a number of things

00:02:26.189 --> 00:02:28.510
<v Speaker 1>around that, working with CIS benchmarks, which if

00:02:28.510 --> 00:02:29.870
<v Speaker 1>you do not come across, well worth looking

00:02:29.870 --> 00:02:31.204
<v Speaker 1>at. But the other thing I did was

00:02:31.204 --> 00:02:33.125
<v Speaker 1>I did a training course, and that's where

00:02:33.125 --> 00:02:34.724
<v Speaker 1>the lab that we're looking at today came

00:02:34.724 --> 00:02:35.205
<v Speaker 1>from.

00:02:35.605 --> 00:02:37.924
<v Speaker 1>As part of developing the training course, a

00:02:37.924 --> 00:02:40.165
<v Speaker 1>common question from people on it was, how

00:02:40.165 --> 00:02:42.680
<v Speaker 1>can I practice this after the course? Now

00:02:42.680 --> 00:02:44.360
<v Speaker 1>I thought, that's a good question.

00:02:44.680 --> 00:02:46.600
<v Speaker 1>And then thanks to the wonders of

00:02:46.920 --> 00:02:49.880
<v Speaker 1>kind, which we'll see, and Ansible, we worked

00:02:49.880 --> 00:02:51.320
<v Speaker 1>out actually, it's not too difficult. We can

00:02:51.320 --> 00:02:52.360
<v Speaker 1>give you a little lab that you can

00:02:52.360 --> 00:02:54.440
<v Speaker 1>work on anytime you like. I actually practice

00:02:54.440 --> 00:02:57.275
<v Speaker 1>some, like, attack techniques in a safe place,

00:02:57.275 --> 00:02:59.515
<v Speaker 1>right, where you're not potentially attacking someone's thing

00:02:59.515 --> 00:03:00.715
<v Speaker 1>that you don't own.

00:03:01.115 --> 00:03:02.955
<v Speaker 1>So and that's where this came from.

00:03:03.595 --> 00:03:04.315
<v Speaker 0>Awesome.

00:03:04.475 --> 00:03:06.075
<v Speaker 0>Well, I must say you have your work

00:03:06.075 --> 00:03:07.915
<v Speaker 0>cut out for you today teaching me security

00:03:07.915 --> 00:03:08.315
<v Speaker 0>stuff.

00:03:08.890 --> 00:03:11.290
<v Speaker 0>No easy task. But I'm looking forward to

00:03:11.290 --> 00:03:12.890
<v Speaker 0>playing with this lab and

00:03:13.050 --> 00:03:15.610
<v Speaker 0>hopefully not skating myself too much, but, you

00:03:15.610 --> 00:03:17.450
<v Speaker 0>know, it might be par for the course

00:03:17.450 --> 00:03:18.570
<v Speaker 0>I think with this.

00:03:20.330 --> 00:03:20.730
<v Speaker 0>Okay.

00:03:22.895 --> 00:03:24.895
<v Speaker 0>I guess we should just share my screen.

00:03:24.895 --> 00:03:27.295
<v Speaker 0>We'll give everyone a link to the repository.

00:03:28.015 --> 00:03:29.535
<v Speaker 0>We're gonna be using Docker for Mac for

00:03:29.535 --> 00:03:31.375
<v Speaker 0>this today. So hopefully that is something that

00:03:31.375 --> 00:03:33.295
<v Speaker 0>you can all do at home as you

00:03:33.295 --> 00:03:34.015
<v Speaker 0>follow along.

00:03:36.560 --> 00:03:38.400
<v Speaker 0>So how how old is this lab? How

00:03:38.400 --> 00:03:40.160
<v Speaker 0>long have you been working on it? Two

00:03:40.160 --> 00:03:41.760
<v Speaker 1>year I think it's about two years. So

00:03:41.760 --> 00:03:44.000
<v Speaker 1>we started doing the training course. The first

00:03:44.000 --> 00:03:45.200
<v Speaker 1>time we did it for a conference was

00:03:45.200 --> 00:03:46.800
<v Speaker 1>Black Hat twenty eighteen EU.

00:03:47.545 --> 00:03:49.065
<v Speaker 1>And, it was like the a couple of

00:03:49.065 --> 00:03:50.905
<v Speaker 1>runs after that, people started saying, hey. This

00:03:50.905 --> 00:03:52.665
<v Speaker 1>is great, but I want to practice at

00:03:52.665 --> 00:03:54.665
<v Speaker 1>home, which I can which you understand because

00:03:54.665 --> 00:03:56.265
<v Speaker 1>you do these training courses, and it's a

00:03:56.265 --> 00:03:57.865
<v Speaker 1>lot of information in a short space of

00:03:57.865 --> 00:03:58.345
<v Speaker 1>time.

00:03:58.665 --> 00:04:00.105
<v Speaker 1>So, absolutely, people want to take it away.

00:04:00.105 --> 00:04:01.385
<v Speaker 1>And I was at the time, was playing

00:04:01.385 --> 00:04:03.180
<v Speaker 1>a bit with with Ansible and then also

00:04:03.180 --> 00:04:05.180
<v Speaker 1>getting into kind. So if if people on

00:04:05.180 --> 00:04:07.580
<v Speaker 1>the have not used kind already, use kind

00:04:07.580 --> 00:04:08.780
<v Speaker 1>is the one that you should take from

00:04:08.780 --> 00:04:10.220
<v Speaker 1>today. Kind is awesome.

00:04:10.940 --> 00:04:12.379
<v Speaker 1>If you don't have anything with security, take

00:04:12.379 --> 00:04:14.220
<v Speaker 1>that because kind makes this work.

00:04:15.685 --> 00:04:17.524
<v Speaker 0>Yeah. I guess we could quickly cover what

00:04:17.524 --> 00:04:18.964
<v Speaker 0>kind does, and then people will also see

00:04:18.964 --> 00:04:20.725
<v Speaker 0>an action as we start to spin up

00:04:20.725 --> 00:04:23.205
<v Speaker 0>our first kind of Kubernetes clusters. But kind,

00:04:23.205 --> 00:04:25.285
<v Speaker 0>I believe, stands for Kubernetes and Docker and

00:04:25.285 --> 00:04:27.285
<v Speaker 0>allows you to have a fully functioning

00:04:27.285 --> 00:04:29.205
<v Speaker 0>multi node, which I think is really cool,

00:04:29.340 --> 00:04:32.220
<v Speaker 0>Kubernetes cluster running purely in containers.

00:04:32.860 --> 00:04:34.699
<v Speaker 0>I think it makes really good for this

00:04:34.699 --> 00:04:36.300
<v Speaker 1>kind of thing because you want to,

00:04:36.620 --> 00:04:37.979
<v Speaker 1>you know, you want to throw away container.

00:04:37.979 --> 00:04:39.020
<v Speaker 1>Right? You don't want to you don't want

00:04:39.020 --> 00:04:41.500
<v Speaker 1>these things hanging around because they're deliberately insecure.

00:04:41.500 --> 00:04:42.940
<v Speaker 1>You don't want them on the Internet because

00:04:42.940 --> 00:04:43.979
<v Speaker 1>they're deliberately insecure.

00:04:44.585 --> 00:04:47.545
<v Speaker 1>Having them in a nice isolated kind environment,

00:04:47.545 --> 00:04:48.585
<v Speaker 1>I think, really helps.

00:04:49.225 --> 00:04:50.745
<v Speaker 0>Yeah. I couldn't agree more.

00:04:51.145 --> 00:04:53.785
<v Speaker 0>So what's the format for this? You know?

00:04:53.785 --> 00:04:55.465
<v Speaker 0>Do we just need to spin up our

00:04:55.465 --> 00:04:57.145
<v Speaker 0>first cluster? Is it gonna get me through

00:04:57.305 --> 00:04:58.960
<v Speaker 0>I know I should probably read the documentation,

00:04:58.960 --> 00:05:01.840
<v Speaker 0>but I'm always particularly impatient. So so right.

00:05:01.840 --> 00:05:03.280
<v Speaker 1>So, essentially, we've got a couple of things

00:05:03.280 --> 00:05:05.120
<v Speaker 1>to start with. You scroll yeah. You see

00:05:05.120 --> 00:05:07.440
<v Speaker 1>the getting started there. So, essentially, what there

00:05:07.440 --> 00:05:08.480
<v Speaker 1>is is

00:05:08.720 --> 00:05:11.199
<v Speaker 1>there's a a kind of client machine container.

00:05:11.785 --> 00:05:13.945
<v Speaker 1>There's a little container that what you can

00:05:13.945 --> 00:05:15.385
<v Speaker 1>use as kind of the client when you're

00:05:15.385 --> 00:05:16.825
<v Speaker 1>actually attacking the clusters.

00:05:17.145 --> 00:05:18.265
<v Speaker 1>And then what we've got is we've got

00:05:18.265 --> 00:05:20.185
<v Speaker 1>a series of different clusters,

00:05:20.505 --> 00:05:22.505
<v Speaker 1>each one with a different vulnerability. Right? So

00:05:22.505 --> 00:05:23.785
<v Speaker 1>it's gonna be each one has got something

00:05:23.785 --> 00:05:25.400
<v Speaker 1>wrong with it, the name the clue is

00:05:25.400 --> 00:05:26.520
<v Speaker 1>generally in the name,

00:05:26.919 --> 00:05:28.360
<v Speaker 1>and we can kinda go through and attack

00:05:28.360 --> 00:05:29.879
<v Speaker 1>each one. But you can do some of

00:05:29.879 --> 00:05:31.719
<v Speaker 1>the stuff straight from, like, the Mac, but

00:05:31.719 --> 00:05:33.080
<v Speaker 1>it's easier if you kinda go into this

00:05:33.080 --> 00:05:35.319
<v Speaker 1>client container because it's got the tools installed,

00:05:35.319 --> 00:05:36.840
<v Speaker 1>which is kind of gets rid of why

00:05:36.840 --> 00:05:38.039
<v Speaker 1>I don't have a tool to do that

00:05:38.039 --> 00:05:38.520
<v Speaker 1>with.

00:05:39.159 --> 00:05:39.800
<v Speaker 1>So

00:05:40.455 --> 00:05:41.175
<v Speaker 1>yep.

00:05:41.335 --> 00:05:43.095
<v Speaker 0>I was just gonna say, I I get

00:05:43.175 --> 00:05:46.135
<v Speaker 0>is this teaching, like, best practices in defensive

00:05:46.135 --> 00:05:48.294
<v Speaker 0>security by giving people a kind of attackers'

00:05:48.294 --> 00:05:49.815
<v Speaker 0>playground? Is that the is that the the

00:05:49.815 --> 00:05:50.455
<v Speaker 0>goal?

00:05:50.695 --> 00:05:53.090
<v Speaker 1>Yeah. The idea I think is to an

00:05:53.090 --> 00:05:53.730
<v Speaker 1>extent,

00:05:54.130 --> 00:05:56.450
<v Speaker 1>I think people some of it's quite obvious.

00:05:56.450 --> 00:05:58.530
<v Speaker 1>Right? Some of it's gonna be you'll see

00:05:58.530 --> 00:06:00.290
<v Speaker 1>something, okay, that you would never do that.

00:06:00.290 --> 00:06:02.290
<v Speaker 1>Other ones, it can kind of inform you

00:06:02.290 --> 00:06:04.130
<v Speaker 1>of, like, oh, I didn't realize that, for

00:06:04.130 --> 00:06:05.970
<v Speaker 1>example, how easy it was to go from

00:06:05.970 --> 00:06:08.685
<v Speaker 1>create pods to I control the whole cluster.

00:06:08.685 --> 00:06:10.445
<v Speaker 1>So if you got a a developers who've

00:06:10.445 --> 00:06:12.205
<v Speaker 1>got create pod access,

00:06:12.525 --> 00:06:14.285
<v Speaker 1>we can say, hey. This is how easy

00:06:14.285 --> 00:06:16.045
<v Speaker 1>it is to go from there to they

00:06:16.045 --> 00:06:17.805
<v Speaker 1>could own the whole cluster anytime they wanted

00:06:17.805 --> 00:06:18.285
<v Speaker 1>to.

00:06:18.685 --> 00:06:20.440
<v Speaker 1>And I think that kind of, you know,

00:06:20.440 --> 00:06:23.400
<v Speaker 1>that's all not always understood. Yeah. Okay. That

00:06:23.400 --> 00:06:24.120
<v Speaker 0>makes sense.

00:06:25.000 --> 00:06:26.120
<v Speaker 0>Alright. So

00:06:26.440 --> 00:06:28.039
<v Speaker 0>the first thing I need to do is

00:06:28.039 --> 00:06:30.360
<v Speaker 0>it to run the client machine? Yeah. So

00:06:30.360 --> 00:06:31.960
<v Speaker 1>that that that should bring up the client

00:06:31.960 --> 00:06:32.280
<v Speaker 1>machine.

00:06:32.885 --> 00:06:34.725
<v Speaker 0>So that's This is our acid test for

00:06:34.725 --> 00:06:37.125
<v Speaker 1>is is everything working in the prereqs? Should

00:06:37.125 --> 00:06:37.605
<v Speaker 0>be.

00:06:38.325 --> 00:06:40.885
<v Speaker 0>Oh, we're gonna find out. Okay. Let's see

00:06:40.885 --> 00:06:41.685
<v Speaker 0>what happens.

00:06:42.005 --> 00:06:43.285
<v Speaker 1>Let's find out.

00:06:44.405 --> 00:06:45.125
<v Speaker 1>That's fine.

00:06:47.890 --> 00:06:49.090
<v Speaker 1>Actually, yeah, I set this up because I

00:06:49.090 --> 00:06:50.770
<v Speaker 1>was having problems with my CI.

00:06:51.010 --> 00:06:53.010
<v Speaker 1>Oh, application warning.

00:06:54.930 --> 00:06:55.570
<v Speaker 1>Oh,

00:06:55.890 --> 00:06:59.170
<v Speaker 1>if you do just a straight create cluster,

00:06:59.730 --> 00:07:01.435
<v Speaker 1>I know what that is. That is and

00:07:01.435 --> 00:07:02.875
<v Speaker 1>this is the first thing that that that

00:07:02.875 --> 00:07:04.955
<v Speaker 1>I forgot. When kind first comes up, it

00:07:04.955 --> 00:07:07.115
<v Speaker 1>creates a Docker network for kind.

00:07:07.595 --> 00:07:08.795
<v Speaker 0>Ah, right.

00:07:08.955 --> 00:07:10.795
<v Speaker 1>And so if you've never run kind on

00:07:10.795 --> 00:07:13.035
<v Speaker 1>the machine you're using so usually, of course,

00:07:13.035 --> 00:07:14.395
<v Speaker 1>I've run kind for something else.

00:07:15.080 --> 00:07:16.680
<v Speaker 1>So I don't hit that, but that will

00:07:16.680 --> 00:07:17.160
<v Speaker 1>be

00:07:17.560 --> 00:07:19.400
<v Speaker 1>I'm trying to create something. That's that's I

00:07:19.400 --> 00:07:20.840
<v Speaker 1>should take notes or something.

00:07:21.720 --> 00:07:23.560
<v Speaker 1>Bugs that come up when someone else tries

00:07:23.560 --> 00:07:24.680
<v Speaker 1>this because I know what I know I

00:07:24.680 --> 00:07:25.800
<v Speaker 1>know what goes wrong when I try it.

00:07:27.175 --> 00:07:28.935
<v Speaker 0>I think what threw me off there was

00:07:28.935 --> 00:07:31.815
<v Speaker 0>just that really noisy deprecation warning for the

00:07:31.815 --> 00:07:34.535
<v Speaker 0>one really sensible error at the end. The

00:07:34.535 --> 00:07:36.135
<v Speaker 1>one actually useful error at the bottom but

00:07:36.135 --> 00:07:36.775
<v Speaker 1>it's like because

00:07:37.335 --> 00:07:38.935
<v Speaker 0>I was like, oh, shit. We're not gonna

00:07:38.935 --> 00:07:40.135
<v Speaker 0>be able to fix all that. I don't

00:07:40.375 --> 00:07:42.855
<v Speaker 0>it's just that one little thing here which

00:07:42.330 --> 00:07:44.090
<v Speaker 0>makes a lot of sense. That's just something

00:07:44.090 --> 00:07:46.409
<v Speaker 1>Ansible that changed down the line, actually, probably.

00:07:46.409 --> 00:07:47.849
<v Speaker 1>That's on my list of oh, that's gonna

00:07:47.849 --> 00:07:49.530
<v Speaker 1>break at some point, but not yet.

00:07:51.849 --> 00:07:53.770
<v Speaker 0>Do we have to wait on this kind

00:07:53.770 --> 00:07:56.169
<v Speaker 0>cluster? Do you think it's already Probably will

00:07:56.330 --> 00:07:57.825
<v Speaker 1>I don't think it'll create the network straight

00:07:57.825 --> 00:07:59.905
<v Speaker 1>off. It shouldn't take super long. We got

00:07:59.905 --> 00:08:02.065
<v Speaker 1>a preparing note. But it's got there. I'll

00:08:02.065 --> 00:08:03.665
<v Speaker 0>put this later finish, I guess. What's the

00:08:03.745 --> 00:08:04.865
<v Speaker 1>And you you've got you've got the Mac

00:08:04.865 --> 00:08:06.705
<v Speaker 1>terminals. You get the nice pretty graphics.

00:08:08.385 --> 00:08:09.505
<v Speaker 1>That's, like, kind of

00:08:09.940 --> 00:08:13.220
<v Speaker 0>They're not standard, though? On some terminals on

00:08:13.220 --> 00:08:14.980
<v Speaker 1>a lot of terminals, you don't get them.

00:08:14.980 --> 00:08:17.220
<v Speaker 1>Like, some of the emojis don't exist. So

00:08:17.220 --> 00:08:19.300
<v Speaker 1>you get, well, just little gray boxes or

00:08:19.300 --> 00:08:19.860
<v Speaker 1>whatever.

00:08:20.580 --> 00:08:22.260
<v Speaker 0>Yeah. Yeah. I guess you gotta have, like,

00:08:22.885 --> 00:08:24.805
<v Speaker 0>a font with the glyphs being done or

00:08:24.805 --> 00:08:27.765
<v Speaker 0>power line symbols or something like that. That's

00:08:27.765 --> 00:08:29.045
<v Speaker 1>it. You've gotta have some kind of and

00:08:29.045 --> 00:08:30.805
<v Speaker 1>I I know some of the it's obviously

00:08:30.805 --> 00:08:32.325
<v Speaker 1>the Mac that has it, but but some

00:08:32.325 --> 00:08:33.525
<v Speaker 1>of the terminals I've used, you have to

00:08:33.525 --> 00:08:35.044
<v Speaker 1>go and find a specific font and install

00:08:35.044 --> 00:08:36.965
<v Speaker 1>it to get the the shiny graphics.

00:08:37.829 --> 00:08:40.789
<v Speaker 0>I run the Cascadia font Cascadia code font

00:08:40.789 --> 00:08:43.110
<v Speaker 0>from Microsoft, which ships with the power limbo

00:08:43.269 --> 00:08:45.750
<v Speaker 0>power light symbols baked in really cool. Love

00:08:47.510 --> 00:08:49.430
<v Speaker 0>that. I mean, I I I think I

00:08:49.430 --> 00:08:51.829
<v Speaker 0>spend more time tweaking my terminal, my color

00:08:51.829 --> 00:08:53.385
<v Speaker 0>theme, and my fonts than I actually do

00:08:53.385 --> 00:08:54.425
<v Speaker 0>any real work.

00:08:55.065 --> 00:08:57.465
<v Speaker 0>Mhmm. And I think it's a slippery slope.

00:08:57.465 --> 00:08:59.065
<v Speaker 0>I don't know if other developers are like

00:08:59.065 --> 00:09:00.904
<v Speaker 0>that or if that's just something that I

00:09:00.904 --> 00:09:02.745
<v Speaker 0>waste my time doing. But I've I know

00:09:02.745 --> 00:09:04.345
<v Speaker 1>what I do. I I I spent a

00:09:04.345 --> 00:09:05.145
<v Speaker 1>whole time

00:09:05.750 --> 00:09:08.150
<v Speaker 1>creating like a whole Ansible playbook to set

00:09:08.150 --> 00:09:09.670
<v Speaker 1>up my terminal to do all sorts of

00:09:09.670 --> 00:09:10.150
<v Speaker 1>stuff.

00:09:10.470 --> 00:09:11.430
<v Speaker 1>At least I went to the point of

00:09:11.510 --> 00:09:13.190
<v Speaker 1>well, I I did the bike sharing going

00:09:13.190 --> 00:09:14.470
<v Speaker 1>and actually automating it.

00:09:14.790 --> 00:09:16.310
<v Speaker 1>So let's try that now. Hopefully, that should

00:09:16.310 --> 00:09:16.870
<v Speaker 1>now be happier.

00:09:17.654 --> 00:09:19.575
<v Speaker 0>Yeah. I'm sure it will be. I've got

00:09:19.654 --> 00:09:21.175
<v Speaker 0>nothing but confidence in the sounds of all

00:09:21.175 --> 00:09:24.055
<v Speaker 0>people. Yeah. I've got yeah. So it's gonna

00:09:24.055 --> 00:09:25.015
<v Speaker 0>complain.

00:09:25.334 --> 00:09:27.415
<v Speaker 1>Here's where it complains about the deprecation.

00:09:30.120 --> 00:09:31.800
<v Speaker 1>And it's going and pulling the image in

00:09:31.800 --> 00:09:32.600
<v Speaker 1>the background.

00:09:33.240 --> 00:09:33.960
<v Speaker 0>Think this is

00:09:42.645 --> 00:09:44.725
<v Speaker 0>So that's client machine, and then we have

00:09:44.725 --> 00:09:46.245
<v Speaker 0>to let's just carry on with the instructions,

00:09:46.245 --> 00:09:47.685
<v Speaker 0>I guess. Yeah. So So what we do

00:09:47.685 --> 00:09:48.645
<v Speaker 1>is once we go on that, if you

00:09:48.645 --> 00:09:49.925
<v Speaker 1>have to scroll down, we can look at

00:09:49.925 --> 00:09:52.245
<v Speaker 1>our vulnerable cluster list. So these are the

00:09:52.245 --> 00:09:52.885
<v Speaker 1>ones

00:09:53.205 --> 00:09:54.725
<v Speaker 1>this kind of thing where you can implement

00:09:54.725 --> 00:09:57.170
<v Speaker 1>lots of these. These are essentially all the

00:09:57.170 --> 00:09:59.170
<v Speaker 1>different ones, and and this this these these

00:09:59.170 --> 00:10:01.730
<v Speaker 1>examples were built essentially from the course. These

00:10:01.730 --> 00:10:03.810
<v Speaker 1>are things where we cover this on the

00:10:03.810 --> 00:10:05.730
<v Speaker 1>course, so I thought, right. Time to write

00:10:05.730 --> 00:10:06.610
<v Speaker 1>a playbook.

00:10:06.930 --> 00:10:08.210
<v Speaker 1>And you as you can said, you can

00:10:08.210 --> 00:10:09.570
<v Speaker 1>see from the names that that each one

00:10:09.570 --> 00:10:10.930
<v Speaker 1>of them's got kind of a descriptive name.

00:10:11.415 --> 00:10:12.055
<v Speaker 1>So,

00:10:12.455 --> 00:10:15.415
<v Speaker 1>for example, we got unauthenticated a p unauthenticated

00:10:15.415 --> 00:10:16.535
<v Speaker 1>API server,

00:10:16.695 --> 00:10:18.615
<v Speaker 1>then near the bottom, which is an API

00:10:18.615 --> 00:10:21.015
<v Speaker 1>server that has anonymous access possible.

00:10:22.135 --> 00:10:24.535
<v Speaker 1>And we've got unauthenticated dashboard. So you'll know

00:10:24.535 --> 00:10:27.255
<v Speaker 1>that, like, people like Tesla, some years ago,

00:10:27.334 --> 00:10:28.830
<v Speaker 1>in the early days of Kubernetes, they were

00:10:28.830 --> 00:10:30.670
<v Speaker 1>using the Kubernetes dashboard and left it on

00:10:30.670 --> 00:10:32.270
<v Speaker 1>the Internet without authentication,

00:10:32.670 --> 00:10:34.670
<v Speaker 1>and that ended badly for them.

00:10:35.390 --> 00:10:37.310
<v Speaker 1>So this is just an example of that.

00:10:37.310 --> 00:10:39.975
<v Speaker 1>So Yeah. The Kubernetes dashboard for so long

00:10:39.975 --> 00:10:42.135
<v Speaker 0>never shipped with any authentication anyway.

00:10:42.615 --> 00:10:45.335
<v Speaker 1>Yeah. Yeah. So so that that one so,

00:10:45.335 --> 00:10:46.775
<v Speaker 1>yeah, there's there's there's there's there's various things

00:10:46.775 --> 00:10:47.975
<v Speaker 1>that actually work kinda like in the old

00:10:47.975 --> 00:10:50.215
<v Speaker 1>days. In the old days of Kubernetes,

00:10:51.255 --> 00:10:53.655
<v Speaker 1>we're actually at the defaults. So the kubelet

00:10:53.655 --> 00:10:55.490
<v Speaker 1>for a long time I think there's about

00:10:55.490 --> 00:10:58.050
<v Speaker 1>three versions the kubelet shipped with no authentication

00:10:58.050 --> 00:10:58.930
<v Speaker 1>possible.

00:10:59.650 --> 00:11:01.010
<v Speaker 1>So you just you had to know the

00:11:01.010 --> 00:11:02.930
<v Speaker 1>port was there, and you could always compromise

00:11:02.930 --> 00:11:04.610
<v Speaker 1>the machine, which was fun.

00:11:05.010 --> 00:11:07.250
<v Speaker 1>That's actually how I got into Kubernetes security.

00:11:07.490 --> 00:11:09.090
<v Speaker 1>I I literally started looking at it. It

00:11:09.090 --> 00:11:09.730
<v Speaker 1>was 2018,

00:11:10.525 --> 00:11:11.085
<v Speaker 1>and

00:11:11.805 --> 00:11:13.725
<v Speaker 1>and someone said said to me they sent

00:11:13.725 --> 00:11:14.925
<v Speaker 1>me a link and said, this is possible.

00:11:14.925 --> 00:11:16.125
<v Speaker 1>I said, no. That can't be right. I

00:11:16.125 --> 00:11:18.285
<v Speaker 1>didn't believe that. And I was like, oh,

00:11:18.285 --> 00:11:19.725
<v Speaker 1>that works. And then I went and found

00:11:19.725 --> 00:11:21.405
<v Speaker 1>the GitHub issue, and it did work for,

00:11:21.405 --> 00:11:22.045
<v Speaker 1>like, three versions.

00:11:22.540 --> 00:11:23.260
<v Speaker 0>Wow.

00:11:24.220 --> 00:11:24.940
<v Speaker 1>So,

00:11:25.900 --> 00:11:27.340
<v Speaker 1>hopefully yeah. So what we're gonna do is

00:11:27.340 --> 00:11:28.780
<v Speaker 1>once we've once the client machine's up, we

00:11:28.780 --> 00:11:29.900
<v Speaker 1>can just pick one of these.

00:11:30.860 --> 00:11:32.700
<v Speaker 1>What should we do to start with? So

00:11:32.700 --> 00:11:34.860
<v Speaker 0>these are This is simple. All Ansible products.

00:11:34.860 --> 00:11:36.300
<v Speaker 0>Right? I can just run Ansible against any

00:11:36.300 --> 00:11:37.685
<v Speaker 0>of these. It's gonna create a new cluster

00:11:37.685 --> 00:11:38.965
<v Speaker 0>with that vulnerability.

00:11:39.365 --> 00:11:41.125
<v Speaker 1>With that on it. Probably

00:11:42.005 --> 00:11:44.005
<v Speaker 1>the insecure port is, like, the easiest. Okay.

00:11:44.005 --> 00:11:45.525
<v Speaker 1>So it's it's happy now. Yeah.

00:11:45.845 --> 00:11:47.925
<v Speaker 1>So the insecure port is probably the most

00:11:47.925 --> 00:11:48.165
<v Speaker 1>simple.

00:11:49.660 --> 00:11:51.660
<v Speaker 0>Okay. This is gonna give me a client

00:11:51.660 --> 00:11:54.300
<v Speaker 0>cluster running Kubernetes with no authentication. Or no.

00:11:54.300 --> 00:11:56.060
<v Speaker 0>It's gonna be using the because that's a

00:11:56.060 --> 00:11:58.860
<v Speaker 0>real Yeah. Insecure port we're running. Yeah. The

00:11:59.900 --> 00:12:02.220
<v Speaker 1>old parameter insecure port was, I think, only

00:12:02.220 --> 00:12:03.580
<v Speaker 1>got deprecated in 01/20,

00:12:03.995 --> 00:12:05.595
<v Speaker 1>I want to say. Yeah. That was It

00:12:05.595 --> 00:12:09.355
<v Speaker 1>was surprisingly recent. It was recent. Okay. Ansible

00:12:09.355 --> 00:12:10.315
<v Speaker 0>and secure

00:12:10.475 --> 00:12:12.635
<v Speaker 1>So it's Ansible the Ansible dash playbook.

00:12:15.834 --> 00:12:18.074
<v Speaker 0>I'm sure there's I'm sure there's docs there.

00:12:19.480 --> 00:12:21.160
<v Speaker 1>If if if it's just it's just the

00:12:21.160 --> 00:12:22.840
<v Speaker 1>same command as it's ansible dash playbook and

00:12:22.840 --> 00:12:24.600
<v Speaker 1>then that that file should do it.

00:12:25.640 --> 00:12:29.160
<v Speaker 1>Yeah. And then the insecure. Yeah.

00:12:29.800 --> 00:12:30.680
<v Speaker 1>So that should do.

00:12:33.765 --> 00:12:35.285
<v Speaker 0>Okay. So how do I test that my

00:12:35.285 --> 00:12:36.725
<v Speaker 0>hacker tools are working?

00:12:37.285 --> 00:12:39.205
<v Speaker 1>So what we can do is once we've

00:12:39.685 --> 00:12:41.205
<v Speaker 1>once this has come up, we can just

00:12:41.205 --> 00:12:44.085
<v Speaker 1>docker exec into that client container,

00:12:44.485 --> 00:12:45.685
<v Speaker 1>and that will be that's got all the

00:12:45.685 --> 00:12:46.885
<v Speaker 1>tools and everything. And it should be on

00:12:46.965 --> 00:12:48.005
<v Speaker 1>and it's on the same network, so we

00:12:48.005 --> 00:12:49.900
<v Speaker 1>don't have worry about anything about what Docker

00:12:49.900 --> 00:12:51.500
<v Speaker 1>for Mac is doing in terms of with

00:12:51.500 --> 00:12:53.420
<v Speaker 1>network weirdness, which is kinda why I did

00:12:53.420 --> 00:12:54.940
<v Speaker 1>this because Docker for Mac and Docker for

00:12:54.940 --> 00:12:58.380
<v Speaker 1>Windows use some very clever but moderately complicated

00:12:58.380 --> 00:12:58.940
<v Speaker 1>things

00:12:59.260 --> 00:13:01.420
<v Speaker 1>with networking. And and I just thought that's

00:13:01.420 --> 00:13:02.300
<v Speaker 1>going to cause

00:13:02.620 --> 00:13:04.780
<v Speaker 1>things to fail in kind of odd ways.

00:13:05.685 --> 00:13:07.365
<v Speaker 1>So it's easier if we just have a

00:13:07.365 --> 00:13:09.845
<v Speaker 1>client machine on the same network as the

00:13:09.845 --> 00:13:11.125
<v Speaker 1>the target cluster.

00:13:11.365 --> 00:13:12.885
<v Speaker 0>Yeah. That makes a lot of sense.

00:13:14.485 --> 00:13:16.245
<v Speaker 0>I guess we'll just give this a a

00:13:16.245 --> 00:13:18.085
<v Speaker 0>few seconds. So all those Yeah. So this

00:13:18.085 --> 00:13:20.330
<v Speaker 1>stuff should be cached. Right? It's Yeah. Once

00:13:20.330 --> 00:13:22.250
<v Speaker 1>once they come down, once they're cached. And

00:13:22.250 --> 00:13:23.450
<v Speaker 1>what I did was I've

00:13:24.250 --> 00:13:26.970
<v Speaker 1>I kind of, like, created custom kind so

00:13:26.970 --> 00:13:28.890
<v Speaker 1>kind of a node image, and I've just

00:13:28.890 --> 00:13:30.490
<v Speaker 1>customized that. And because,

00:13:31.050 --> 00:13:33.735
<v Speaker 1>I guess, as versions go on, they'll stop

00:13:33.735 --> 00:13:35.415
<v Speaker 1>supporting the old broken stuff. So as things

00:13:35.415 --> 00:13:37.495
<v Speaker 1>get better mean, to be fair, I'm seeing

00:13:37.495 --> 00:13:39.335
<v Speaker 1>about kind of things that were really bad

00:13:39.335 --> 00:13:41.255
<v Speaker 1>for security in Kubernetes history. They are going

00:13:41.255 --> 00:13:42.935
<v Speaker 1>away, you know, one at a time. You

00:13:42.935 --> 00:13:45.575
<v Speaker 1>know, insecure port is going Kubel always needs

00:13:45.575 --> 00:13:47.415
<v Speaker 1>authentication now. So things are improving, so I'm

00:13:47.415 --> 00:13:48.855
<v Speaker 1>kind of trying to keep the old stuff

00:13:48.855 --> 00:13:50.450
<v Speaker 1>so we can kind of demonstrate still demonstrate

00:13:50.450 --> 00:13:52.930
<v Speaker 1>these things because a lot of companies still

00:13:52.930 --> 00:13:55.570
<v Speaker 1>do run older clusters. You know, companies do

00:13:55.570 --> 00:13:57.410
<v Speaker 1>not always move on to the new shiny

00:13:57.890 --> 00:13:58.770
<v Speaker 1>that quickly.

00:13:59.089 --> 00:14:01.570
<v Speaker 0>Well, yeah. I think it was just yesterday.

00:14:01.570 --> 00:14:03.490
<v Speaker 0>The Kubernetes project announced they were slowing down

00:14:03.490 --> 00:14:05.665
<v Speaker 0>the release cadence, just three releases a year

00:14:05.665 --> 00:14:07.425
<v Speaker 0>to try and help organizations.

00:14:07.505 --> 00:14:09.425
<v Speaker 0>You know, four is is a big ask

00:14:09.425 --> 00:14:11.904
<v Speaker 0>for some organization to upgrade their production clusters

00:14:11.904 --> 00:14:13.185
<v Speaker 0>four times per year.

00:14:13.505 --> 00:14:16.385
<v Speaker 1>Yeah. So, I mean, I one of the

00:14:16.385 --> 00:14:17.825
<v Speaker 1>one of the the things I always said

00:14:17.825 --> 00:14:19.185
<v Speaker 1>at every I think every talk I've done

00:14:19.185 --> 00:14:21.960
<v Speaker 1>and definitely the training for enterprise customers is

00:14:21.960 --> 00:14:24.200
<v Speaker 1>you do realize this thing will need upgraded

00:14:24.200 --> 00:14:26.280
<v Speaker 1>every single year. So I used to work

00:14:26.280 --> 00:14:29.160
<v Speaker 1>for large UK banks, and I know that

00:14:29.160 --> 00:14:30.440
<v Speaker 1>is not their way.

00:14:30.760 --> 00:14:32.200
<v Speaker 1>That is not the way they do things.

00:14:32.200 --> 00:14:34.360
<v Speaker 1>They don't upgrade whole systems every year.

00:14:35.320 --> 00:14:36.675
<v Speaker 1>So so having a new thing that, you

00:14:36.675 --> 00:14:37.875
<v Speaker 1>know, you're gonna have to upgrade every year

00:14:37.875 --> 00:14:38.755
<v Speaker 1>is going to be a bit of a

00:14:38.755 --> 00:14:41.075
<v Speaker 1>kinda culture shock, I think, in some cases.

00:14:42.995 --> 00:14:45.555
<v Speaker 1>And even even enterprise things like OpenShift now,

00:14:45.555 --> 00:14:47.075
<v Speaker 1>they they've got the same release the same

00:14:47.075 --> 00:14:48.995
<v Speaker 1>support life cycle as Kubernetes. They used to

00:14:48.995 --> 00:14:50.355
<v Speaker 1>have, like, a really long one, but not

00:14:50.355 --> 00:14:50.595
<v Speaker 1>anymore.

00:14:51.680 --> 00:14:53.520
<v Speaker 0>Yeah. I remember, you know, back when you

00:14:53.520 --> 00:14:54.720
<v Speaker 0>used your groups there a thing, I used

00:14:54.720 --> 00:14:56.160
<v Speaker 0>to speak to people that worked at banks.

00:14:56.160 --> 00:14:57.839
<v Speaker 0>They would always tell me that, you know,

00:14:57.839 --> 00:14:59.520
<v Speaker 0>it's not a job for everyone because you

00:14:59.520 --> 00:15:00.880
<v Speaker 0>have to get comfortable writing a line of

00:15:00.880 --> 00:15:02.320
<v Speaker 0>code and then waiting six months for that

00:15:02.320 --> 00:15:02.880
<v Speaker 0>to hit production.

00:15:03.535 --> 00:15:05.135
<v Speaker 0>Yeah. That's the Yeah.

00:15:05.615 --> 00:15:06.735
<v Speaker 1>Yeah.

00:15:06.895 --> 00:15:08.735
<v Speaker 1>A lot of the banks are running systems

00:15:08.735 --> 00:15:10.095
<v Speaker 1>that have been there

00:15:10.495 --> 00:15:13.295
<v Speaker 1>literally since, like, the seventies and eighties,

00:15:13.615 --> 00:15:16.310
<v Speaker 1>and they're still running the bank. And their

00:15:16.310 --> 00:15:17.910
<v Speaker 1>big problem now is that the people who

00:15:17.910 --> 00:15:19.910
<v Speaker 1>write who manage them are all retiring.

00:15:20.310 --> 00:15:21.670
<v Speaker 1>So if you ever want a really stable

00:15:21.670 --> 00:15:25.190
<v Speaker 1>job, learn how to code COBOL on mainframes

00:15:25.350 --> 00:15:26.870
<v Speaker 1>and go work for a bank, and you

00:15:26.870 --> 00:15:28.230
<v Speaker 1>will never be redundant.

00:15:29.825 --> 00:15:31.665
<v Speaker 1>Which is not great, Cobalt. Decided to bake

00:15:31.665 --> 00:15:33.185
<v Speaker 0>my feet, so I fired.

00:15:33.345 --> 00:15:35.025
<v Speaker 0>There you see. I've

00:15:35.025 --> 00:15:36.865
<v Speaker 1>evicted our cat because otherwise, he would have

00:15:36.865 --> 00:15:37.985
<v Speaker 1>made his presence known.

00:15:39.345 --> 00:15:39.825
<v Speaker 1>So

00:15:40.785 --> 00:15:42.385
<v Speaker 1>so now we should be up and running,

00:15:43.760 --> 00:15:46.320
<v Speaker 1>and it looks so our client so our

00:15:46.320 --> 00:15:47.920
<v Speaker 1>our server tells you there at the bottom.

00:15:47.920 --> 00:15:49.200
<v Speaker 1>The last thing it's doing is printing it

00:15:49.200 --> 00:15:51.440
<v Speaker 1>saying the target IP address of our, you

00:15:51.440 --> 00:15:53.200
<v Speaker 1>know, vulnerable cluster is of that.

00:15:54.000 --> 00:15:55.840
<v Speaker 1>So we can now docker exec

00:15:56.475 --> 00:15:57.995
<v Speaker 1>into the client machine.

00:15:58.235 --> 00:16:00.315
<v Speaker 0>Is it just called client machine? Yeah. So

00:16:00.315 --> 00:16:02.635
<v Speaker 1>minus IT client machine

00:16:03.595 --> 00:16:05.514
<v Speaker 1>and then bin bash should work.

00:16:08.475 --> 00:16:09.435
<v Speaker 0>Where's the name?

00:16:09.960 --> 00:16:12.040
<v Speaker 0>Oh, just go client. Sorry. Oh, client. Yeah.

00:16:12.040 --> 00:16:12.520
<v Speaker 0>Consistent

00:16:15.080 --> 00:16:17.560
<v Speaker 1>naming, I never get it right. So now

00:16:18.120 --> 00:16:19.960
<v Speaker 1>so now we're in our client, and we

00:16:19.960 --> 00:16:22.280
<v Speaker 1>now have access to the same network as

00:16:22.280 --> 00:16:23.960
<v Speaker 1>our target. We know that our target server

00:16:23.960 --> 00:16:26.345
<v Speaker 1>has got is on my IP address.

00:16:26.745 --> 00:16:28.665
<v Speaker 1>So for this one, this one should be

00:16:28.665 --> 00:16:30.025
<v Speaker 1>really fairly straightforward.

00:16:31.225 --> 00:16:32.585
<v Speaker 1>We can check first thing you would do

00:16:32.585 --> 00:16:34.025
<v Speaker 1>if you were actually attacking a cluster or

00:16:34.025 --> 00:16:35.705
<v Speaker 1>if you're looking at machine, you'd probably port

00:16:35.705 --> 00:16:37.945
<v Speaker 1>scan it. Right? So you you'd say, okay.

00:16:37.945 --> 00:16:39.625
<v Speaker 1>I want to know what services are there

00:16:39.625 --> 00:16:40.265
<v Speaker 1>for me to attack.

00:16:42.149 --> 00:16:43.910
<v Speaker 1>And in the lab client, we've got nMap

00:16:43.910 --> 00:16:46.149
<v Speaker 1>installed, which is kinda like the usual port

00:16:46.149 --> 00:16:46.870
<v Speaker 1>scanner.

00:16:47.269 --> 00:16:49.430
<v Speaker 1>So if if you just nMap should be

00:16:49.430 --> 00:16:50.470
<v Speaker 1>installed there.

00:16:51.110 --> 00:16:53.670
<v Speaker 0>K. Yeah. So if we do

00:16:54.389 --> 00:16:57.895
<v Speaker 1>nMap minus small s, then capital t,

00:16:59.894 --> 00:17:00.935
<v Speaker 1>minus v,

00:17:01.575 --> 00:17:02.695
<v Speaker 1>minus n,

00:17:04.135 --> 00:17:05.654
<v Speaker 1>then just the IP address.

00:17:06.855 --> 00:17:07.894
<v Speaker 1>It should

00:17:09.174 --> 00:17:11.015
<v Speaker 1>there we go. And you can see we've

00:17:11.015 --> 00:17:12.054
<v Speaker 1>got port eighty eighty o,

00:17:13.070 --> 00:17:14.829
<v Speaker 1>which is our insecure server

00:17:15.310 --> 00:17:16.349
<v Speaker 1>insecure port.

00:17:18.430 --> 00:17:20.270
<v Speaker 1>And so now we know we've got access

00:17:20.270 --> 00:17:21.390
<v Speaker 1>to that. So if we were, you know,

00:17:21.390 --> 00:17:22.510
<v Speaker 1>looking at this machine, we go, okay. It's

00:17:22.510 --> 00:17:23.550
<v Speaker 1>port if if we got an idea that

00:17:23.550 --> 00:17:26.195
<v Speaker 1>it's Kubernetes server, we know, okay. This is,

00:17:26.515 --> 00:17:27.795
<v Speaker 1>this is what we're probably going to want

00:17:27.795 --> 00:17:29.555
<v Speaker 1>to attack. And so then we need to

00:17:29.555 --> 00:17:31.795
<v Speaker 1>actually tell kubectl this where you get you

00:17:31.795 --> 00:17:34.035
<v Speaker 1>you see how your memory for kubectl,

00:17:35.155 --> 00:17:36.195
<v Speaker 1>flags is.

00:17:37.315 --> 00:17:37.955
<v Speaker 1>Okay.

00:17:38.355 --> 00:17:39.715
<v Speaker 1>And I and I'll I'll what I'll do

00:17:39.715 --> 00:17:41.690
<v Speaker 1>is I'll mention actually actually a pretty important

00:17:41.690 --> 00:17:43.290
<v Speaker 1>point for the repository.

00:17:43.290 --> 00:17:45.529
<v Speaker 1>In the in the GitHub repository,

00:17:45.850 --> 00:17:47.049
<v Speaker 1>there's two folders.

00:17:47.530 --> 00:17:50.649
<v Speaker 1>If you scroll, there's one called scenario setups

00:17:50.810 --> 00:17:52.490
<v Speaker 1>and one called scenario walkthroughs.

00:17:53.135 --> 00:17:54.815
<v Speaker 1>So the scenario setups is just like how

00:17:54.815 --> 00:17:56.175
<v Speaker 1>you get it running because there's a couple

00:17:56.175 --> 00:17:57.535
<v Speaker 1>that have a bit more to do. And

00:17:57.535 --> 00:17:59.775
<v Speaker 1>then in scenario walkthroughs, there's kinda like the

00:17:59.775 --> 00:18:02.255
<v Speaker 1>cheat sheet. Alright. Okay. So so if we

00:18:02.255 --> 00:18:03.935
<v Speaker 1>get stuck and and I I probably would

00:18:03.935 --> 00:18:05.375
<v Speaker 1>remember all the things to do with these,

00:18:05.375 --> 00:18:06.735
<v Speaker 1>we can always go in there and it

00:18:06.735 --> 00:18:07.375
<v Speaker 1>remind us.

00:18:08.530 --> 00:18:10.370
<v Speaker 1>So for this one, it should be super

00:18:10.370 --> 00:18:11.010
<v Speaker 1>simple.

00:18:11.170 --> 00:18:13.490
<v Speaker 1>So this one should be, like, awesomely simple.

00:18:14.050 --> 00:18:15.250
<v Speaker 1>We just do

00:18:15.410 --> 00:18:16.530
<v Speaker 1>kubectl

00:18:18.050 --> 00:18:19.170
<v Speaker 1>minus s

00:18:21.045 --> 00:18:22.725
<v Speaker 1>and then HTTP

00:18:24.085 --> 00:18:26.085
<v Speaker 1>and then the IP address, 8080, and then

00:18:26.085 --> 00:18:26.805
<v Speaker 1>anything.

00:18:27.365 --> 00:18:28.085
<v Speaker 1>Yeah.

00:18:29.765 --> 00:18:30.565
<v Speaker 1>And

00:18:30.965 --> 00:18:31.525
<v Speaker 1>oh.

00:18:32.405 --> 00:18:33.845
<v Speaker 1>Oh, here we go. That's come back. And

00:18:33.845 --> 00:18:35.525
<v Speaker 1>we're okay. Yeah. So was gonna thought before.

00:18:35.670 --> 00:18:37.990
<v Speaker 1>Yep. So we got access. Now this is

00:18:37.990 --> 00:18:40.310
<v Speaker 1>the thing with the insecure API port for

00:18:40.310 --> 00:18:42.950
<v Speaker 1>people who might not have encountered it is

00:18:43.110 --> 00:18:45.350
<v Speaker 1>it's an old thing, and it allowed

00:18:45.430 --> 00:18:46.470
<v Speaker 1>completely

00:18:46.470 --> 00:18:48.390
<v Speaker 1>cluster admin access. Right? If you get access

00:18:48.390 --> 00:18:50.630
<v Speaker 1>to that, it's cluster admin. You are cluster

00:18:50.630 --> 00:18:51.030
<v Speaker 1>admin.

00:18:51.715 --> 00:18:53.715
<v Speaker 1>This was still in use in the default

00:18:53.715 --> 00:18:56.435
<v Speaker 1>install of some Kubernetes distributions until, like, a

00:18:56.435 --> 00:18:57.555
<v Speaker 1>couple of versions ago.

00:18:57.795 --> 00:19:00.755
<v Speaker 1>So it's not amazingly unlikely you might find

00:19:00.755 --> 00:19:02.035
<v Speaker 1>this. And we have when I used to

00:19:02.035 --> 00:19:03.715
<v Speaker 1>be a pen tester in my previous role,

00:19:03.715 --> 00:19:05.555
<v Speaker 1>we did find clusters that had this running.

00:19:06.030 --> 00:19:07.630
<v Speaker 1>People would use it for, like, monitoring. So

00:19:07.630 --> 00:19:08.910
<v Speaker 1>they'd say, okay. I I can't be bothered,

00:19:08.910 --> 00:19:10.110
<v Speaker 1>like, configuring,

00:19:10.190 --> 00:19:12.670
<v Speaker 1>like, rules and and creds for monitoring services.

00:19:12.670 --> 00:19:14.270
<v Speaker 1>I'll just use the insecure support.

00:19:15.150 --> 00:19:17.150
<v Speaker 1>I'd like that never happened, but it did.

00:19:18.030 --> 00:19:20.934
<v Speaker 0>I I'm definitely guilty of throwing my monitor

00:19:20.934 --> 00:19:23.414
<v Speaker 0>in the end secure port. But I don't

00:19:23.414 --> 00:19:24.775
<v Speaker 0>know if I was being really naive or

00:19:24.775 --> 00:19:26.615
<v Speaker 0>just misunderstood, but I also thought it was

00:19:26.615 --> 00:19:28.934
<v Speaker 0>read only. I'm assuming it's not. No. It's

00:19:28.934 --> 00:19:31.335
<v Speaker 1>totally close. It's cluster admin. If you get

00:19:31.335 --> 00:19:33.549
<v Speaker 1>in secure port, that's it. It's game over.

00:19:33.549 --> 00:19:35.629
<v Speaker 0>Of course. Your entire cluster is yeah. It

00:19:35.710 --> 00:19:37.870
<v Speaker 1>well, this is one of the problems is

00:19:37.870 --> 00:19:38.349
<v Speaker 1>that

00:19:39.070 --> 00:19:42.750
<v Speaker 1>not super well known, and it's not always

00:19:42.750 --> 00:19:44.475
<v Speaker 1>super well documented, some of the stuff. I

00:19:44.475 --> 00:19:46.235
<v Speaker 1>mean, actually, that's not that's not fair. The

00:19:46.235 --> 00:19:48.955
<v Speaker 1>Kubernetes documents like documentation site is amazing. Knowing

00:19:48.955 --> 00:19:50.955
<v Speaker 1>where to look to find everything can be

00:19:50.955 --> 00:19:52.955
<v Speaker 1>a challenge if you don't know. So if

00:19:52.955 --> 00:19:54.395
<v Speaker 1>you don't know that that's a problem, you

00:19:54.395 --> 00:19:55.835
<v Speaker 1>don't know to go looking for it.

00:19:56.795 --> 00:19:57.835
<v Speaker 1>So

00:19:58.540 --> 00:20:00.060
<v Speaker 1>in terms of, like, the way the lab

00:20:00.060 --> 00:20:00.940
<v Speaker 1>is structured,

00:20:01.900 --> 00:20:03.660
<v Speaker 1>what I set up is, like, the target,

00:20:03.660 --> 00:20:04.700
<v Speaker 1>and it's in in the read me. It

00:20:04.700 --> 00:20:07.100
<v Speaker 1>says, the target for every attack is to

00:20:07.100 --> 00:20:10.140
<v Speaker 1>try and get the certificate authority private key

00:20:10.745 --> 00:20:12.905
<v Speaker 1>from the the the cluster master.

00:20:13.385 --> 00:20:15.385
<v Speaker 1>And and the idea for that is that

00:20:16.105 --> 00:20:18.185
<v Speaker 1>that's the golden key. Right? If you ever

00:20:18.185 --> 00:20:20.025
<v Speaker 1>get that on a real Kubernetes cluster,

00:20:20.185 --> 00:20:22.985
<v Speaker 1>you've got persistent backdoor access to the cluster

00:20:22.985 --> 00:20:25.065
<v Speaker 1>for the lifetime of that key, which is

00:20:25.065 --> 00:20:26.185
<v Speaker 1>usually measured in years.

00:20:27.440 --> 00:20:29.040
<v Speaker 1>So if you ever give someone read access

00:20:29.040 --> 00:20:31.520
<v Speaker 1>to that file, that's your cluster is theirs

00:20:31.520 --> 00:20:33.039
<v Speaker 1>for as long as they want it,

00:20:33.520 --> 00:20:36.080
<v Speaker 1>until that key expires. And most clusters I've

00:20:36.080 --> 00:20:37.680
<v Speaker 1>seen installed will go somewhere between two and

00:20:37.680 --> 00:20:38.399
<v Speaker 1>ten years.

00:20:38.960 --> 00:20:40.880
<v Speaker 1>So, realistically, the life of the cluster.

00:20:42.035 --> 00:20:45.235
<v Speaker 1>Oopsie. So, yeah, that's this is a a

00:20:45.235 --> 00:20:46.355
<v Speaker 1>fun this

00:20:47.155 --> 00:20:49.075
<v Speaker 1>is, like, my big one of my big

00:20:49.875 --> 00:20:51.794
<v Speaker 1>things, again, people should know about your security

00:20:51.794 --> 00:20:53.875
<v Speaker 1>is protecting that file. Like, read access to

00:20:53.875 --> 00:20:55.235
<v Speaker 1>that file is super, super sensitive.

00:20:56.419 --> 00:20:59.059
<v Speaker 0>So I'm assuming then that with this secure

00:20:59.059 --> 00:21:00.900
<v Speaker 0>port enabled, I can just create a pod

00:21:00.900 --> 00:21:03.220
<v Speaker 0>spec with a host path mode for slash,

00:21:03.539 --> 00:21:06.179
<v Speaker 0>let's say, Kubernetes PKI and then everything I

00:21:06.179 --> 00:21:08.340
<v Speaker 0>need is sitting there. Yeah. We can And

00:21:08.340 --> 00:21:09.460
<v Speaker 1>so the fun Probably

00:21:09.940 --> 00:21:11.915
<v Speaker 1>the easiest way of doing this one is

00:21:11.915 --> 00:21:14.235
<v Speaker 1>you can actually because it's QBADM

00:21:14.235 --> 00:21:15.754
<v Speaker 1>that runs all the clusters,

00:21:16.075 --> 00:21:19.114
<v Speaker 1>the control plane components run as pods,

00:21:19.915 --> 00:21:21.434
<v Speaker 1>so you can just exec into them. Of

00:21:21.434 --> 00:21:22.794
<v Speaker 1>course they can. Yeah. So

00:21:23.755 --> 00:21:25.835
<v Speaker 1>what we can do is if we

00:21:26.580 --> 00:21:28.980
<v Speaker 1>there's no there's no yeah. Oh,

00:21:31.620 --> 00:21:34.580
<v Speaker 0>yeah. My dash s. Okay. Yeah. I

00:21:35.460 --> 00:21:37.220
<v Speaker 0>should really just export those but I don't

00:21:37.220 --> 00:21:38.660
<v Speaker 0>think I'll be in this cluster too long.

00:21:40.304 --> 00:21:42.705
<v Speaker 1>Oh, nice to be s. Yep.

00:21:42.945 --> 00:21:43.585
<v Speaker 0>It

00:21:44.705 --> 00:21:46.225
<v Speaker 1>will be for all the other ones also.

00:21:47.585 --> 00:21:49.345
<v Speaker 0>So you're saying I could just jump into

00:21:49.345 --> 00:21:51.105
<v Speaker 0>the API Yeah. I'm in the API server.

00:21:52.519 --> 00:21:54.279
<v Speaker 0>There won't be a binary there, will there,

00:21:54.279 --> 00:21:54.839
<v Speaker 0>Shell?

00:21:55.240 --> 00:21:57.080
<v Speaker 1>Bing Shell? Probably Bing Shell, I reckon will

00:21:57.080 --> 00:21:57.639
<v Speaker 1>work.

00:21:59.960 --> 00:22:00.679
<v Speaker 1>Trash.

00:22:01.000 --> 00:22:02.759
<v Speaker 1>Try Bing Shell. I wonder if Bing Shell

00:22:02.759 --> 00:22:03.479
<v Speaker 1>will work.

00:22:04.200 --> 00:22:04.840
<v Speaker 1>I thought Bing Shell.

00:22:06.485 --> 00:22:07.925
<v Speaker 1>Yeah. They all seem to be they also

00:22:08.005 --> 00:22:09.205
<v Speaker 1>I think, I mean, those there's some plans

00:22:09.205 --> 00:22:12.565
<v Speaker 1>to not. So in, yeah, in PKI

00:22:12.645 --> 00:22:13.845
<v Speaker 0>And there we go. That's the c a

00:22:13.845 --> 00:22:15.605
<v Speaker 1>key. So yeah. So if if you literally

00:22:16.085 --> 00:22:18.165
<v Speaker 1>read access to that key is and that's,

00:22:18.165 --> 00:22:19.285
<v Speaker 1>a big thing

00:22:20.140 --> 00:22:22.460
<v Speaker 1>that that people should know about running Kubernetes

00:22:22.460 --> 00:22:25.179
<v Speaker 1>is be awesomely careful with that key.

00:22:25.740 --> 00:22:27.899
<v Speaker 0>Because if you give someone This one? Yeah.

00:22:27.900 --> 00:22:29.740
<v Speaker 1>The the reason why you need to be

00:22:29.740 --> 00:22:31.740
<v Speaker 1>so careful is if someone can read that

00:22:31.740 --> 00:22:34.994
<v Speaker 1>key, they can create a new client certificate

00:22:35.475 --> 00:22:36.195
<v Speaker 1>and

00:22:36.355 --> 00:22:38.035
<v Speaker 1>sign it. We think that we're using that

00:22:38.035 --> 00:22:40.995
<v Speaker 1>key to sign. And because client certificate authentication

00:22:40.995 --> 00:22:43.395
<v Speaker 1>is always turned on in Kubernetes and you

00:22:43.395 --> 00:22:44.115
<v Speaker 1>can't turn it off,

00:22:45.799 --> 00:22:47.720
<v Speaker 1>You can create a a credential. Just say,

00:22:47.720 --> 00:22:49.799
<v Speaker 1>want this credential to last for five years,

00:22:49.799 --> 00:22:51.240
<v Speaker 1>and I want it to be member of

00:22:51.240 --> 00:22:52.679
<v Speaker 1>group system masters,

00:22:52.919 --> 00:22:54.359
<v Speaker 1>which is cluster admin access.

00:22:54.840 --> 00:22:56.759
<v Speaker 1>So if anyone ever reads that key,

00:22:57.000 --> 00:22:57.880
<v Speaker 1>it's yeah.

00:22:58.775 --> 00:22:59.734
<v Speaker 1>So that's why.

00:23:00.855 --> 00:23:02.215
<v Speaker 0>I guess from a,

00:23:02.455 --> 00:23:04.375
<v Speaker 0>like, a defensive point of view, like, if

00:23:04.375 --> 00:23:05.895
<v Speaker 0>you've got a you'd want to have your

00:23:05.895 --> 00:23:08.054
<v Speaker 0>audit controller log stuff like this as well.

00:23:08.054 --> 00:23:09.654
<v Speaker 0>Right? Is that is that possible?

00:23:10.695 --> 00:23:13.015
<v Speaker 1>You can you can put

00:23:14.510 --> 00:23:16.590
<v Speaker 1>yes. Yeah. You can definitely do things like,

00:23:16.590 --> 00:23:17.229
<v Speaker 1>for example,

00:23:17.789 --> 00:23:20.030
<v Speaker 1>tools like Falco, I'm guessing, or other runtime

00:23:20.030 --> 00:23:20.989
<v Speaker 1>security tools.

00:23:21.309 --> 00:23:23.150
<v Speaker 1>So there's a variety of those. Tracy is

00:23:23.150 --> 00:23:25.470
<v Speaker 1>there as well. We can alert on you

00:23:25.470 --> 00:23:27.869
<v Speaker 1>doing things like exacting shells and containers.

00:23:28.270 --> 00:23:29.795
<v Speaker 1>So if you exact a shell into a

00:23:29.795 --> 00:23:32.275
<v Speaker 1>container, then you're going to you're gonna get

00:23:32.275 --> 00:23:33.395
<v Speaker 1>you're gonna get caught.

00:23:34.995 --> 00:23:37.315
<v Speaker 1>I think, for me, probably the hardest part,

00:23:37.315 --> 00:23:38.755
<v Speaker 1>though, is if people want to do, like,

00:23:38.755 --> 00:23:40.595
<v Speaker 1>backups of their clusters. I've never seen a

00:23:40.595 --> 00:23:42.230
<v Speaker 1>great idea for you know, you're gonna want

00:23:42.230 --> 00:23:43.430
<v Speaker 1>to back these files up because you need

00:23:43.430 --> 00:23:45.510
<v Speaker 1>them, but you have to be really careful

00:23:45.510 --> 00:23:46.710
<v Speaker 1>where you back them up.

00:23:49.510 --> 00:23:51.030
<v Speaker 1>And I have seen I've seen at least

00:23:51.030 --> 00:23:52.710
<v Speaker 1>one distribution that actually

00:23:53.110 --> 00:23:54.470
<v Speaker 1>puts them in a config map.

00:23:55.045 --> 00:23:55.924
<v Speaker 0>Oh, wow.

00:23:56.485 --> 00:23:59.045
<v Speaker 0>I was gonna suggest, like, a public accidentally

00:23:59.045 --> 00:24:01.285
<v Speaker 0>public SD bucket, which I've seen before as

00:24:01.285 --> 00:24:03.765
<v Speaker 0>well. That will I have also seen

00:24:04.005 --> 00:24:06.085
<v Speaker 1>again, when I used to do pentest of

00:24:06.085 --> 00:24:07.685
<v Speaker 1>clusters, I have seen people check them into

00:24:07.685 --> 00:24:10.950
<v Speaker 1>GitHub. Private repositories, obviously, but still checked into

00:24:10.950 --> 00:24:12.550
<v Speaker 1>GitHub. But, of course, then you don't know

00:24:12.550 --> 00:24:14.630
<v Speaker 1>who's cloned it. Right? So someone's cloned it.

00:24:14.870 --> 00:24:16.550
<v Speaker 1>You have no idea what they've done with

00:24:16.550 --> 00:24:17.750
<v Speaker 1>it once they've cloned it. Then they leave

00:24:17.750 --> 00:24:19.190
<v Speaker 1>the company. They move team.

00:24:20.870 --> 00:24:21.910
<v Speaker 0>Yeah. Yeah. Because

00:24:22.470 --> 00:24:23.510
<v Speaker 1>the only way to fix that is rotate

00:24:23.510 --> 00:24:23.910
<v Speaker 1>everything.

00:24:26.025 --> 00:24:26.585
<v Speaker 0>Okay.

00:24:26.985 --> 00:24:28.745
<v Speaker 0>We got a question. You happy to take

00:24:28.745 --> 00:24:30.585
<v Speaker 0>questions as we go? Yeah. Yeah. Questions are

00:24:30.585 --> 00:24:31.465
<v Speaker 1>absolutely fine.

00:24:32.345 --> 00:24:34.345
<v Speaker 0>Noel was asking, you said the docs are

00:24:34.345 --> 00:24:35.145
<v Speaker 0>extensive.

00:24:35.145 --> 00:24:36.905
<v Speaker 0>Are all of the exercises that we're gonna

00:24:36.905 --> 00:24:39.065
<v Speaker 0>do in this repository doc?

00:24:40.559 --> 00:24:42.320
<v Speaker 0>Are they mentioned are the docs mentioned, I

00:24:42.320 --> 00:24:43.999
<v Speaker 0>guess, in the the lab?

00:24:44.399 --> 00:24:47.200
<v Speaker 1>Yeah. So in the setup and walk throughs,

00:24:47.200 --> 00:24:48.880
<v Speaker 1>I think I've got walk throughs for every

00:24:48.880 --> 00:24:51.600
<v Speaker 1>single one apart from two. There's two that

00:24:51.600 --> 00:24:53.600
<v Speaker 1>aren't done yet. But so so everyone we

00:24:53.600 --> 00:24:55.679
<v Speaker 1>do today, definitely, the walk throughs will be

00:24:56.055 --> 00:24:57.175
<v Speaker 1>in that folder.

00:24:58.695 --> 00:25:01.895
<v Speaker 0>Okay. Perfect. And Cool. A random comment from

00:25:01.895 --> 00:25:04.055
<v Speaker 0>who's asking if we can show how to

00:25:04.055 --> 00:25:05.015
<v Speaker 0>install Rancher.

00:25:05.095 --> 00:25:07.895
<v Speaker 0>I'm afraid not, but there is a video

00:25:07.895 --> 00:25:09.735
<v Speaker 0>on the YouTube channel. Please feel free to

00:25:09.735 --> 00:25:11.735
<v Speaker 0>go check that out. Alright. I do Rancher.

00:25:11.870 --> 00:25:13.870
<v Speaker 1>I have done rancher. I like rancher. Rancher's

00:25:13.870 --> 00:25:15.870
<v Speaker 1>really cool. It's actually a different episode, actually.

00:25:15.870 --> 00:25:17.630
<v Speaker 0>The jukebox episode where I just kinda stream

00:25:17.630 --> 00:25:18.990
<v Speaker 0>and say, right, what what are we doing?

00:25:18.990 --> 00:25:20.190
<v Speaker 0>Let the audience Yeah.

00:25:20.830 --> 00:25:22.270
<v Speaker 1>I was I was a great fan of

00:25:22.270 --> 00:25:23.710
<v Speaker 1>the of TGIK.

00:25:24.270 --> 00:25:25.550
<v Speaker 1>Yes. And they do that sometimes where they

00:25:25.550 --> 00:25:27.725
<v Speaker 1>will say, let's try this. I haven't done

00:25:27.725 --> 00:25:29.404
<v Speaker 1>it before. And and that you you you

00:25:29.404 --> 00:25:31.325
<v Speaker 1>tend to find some fun stuff there. Oh,

00:25:31.325 --> 00:25:31.964
<v Speaker 0>definitely.

00:25:32.765 --> 00:25:34.365
<v Speaker 1>Okay. So that's our first one. Right? So

00:25:34.365 --> 00:25:36.604
<v Speaker 1>we've we've got the kind of concept now.

00:25:37.164 --> 00:25:39.404
<v Speaker 1>Have cluster, attack cluster,

00:25:39.804 --> 00:25:40.605
<v Speaker 1>find the key file.

00:25:41.450 --> 00:25:43.370
<v Speaker 1>Okay. Should we do another one? I would

00:25:43.370 --> 00:25:45.530
<v Speaker 0>love to. Should I start shutting stuff down?

00:25:45.530 --> 00:25:47.050
<v Speaker 0>Is that important? Yeah. You you if you

00:25:47.050 --> 00:25:48.330
<v Speaker 1>just if you exit that, then I it

00:25:48.330 --> 00:25:49.690
<v Speaker 1>just if you shut down the

00:25:50.650 --> 00:25:52.250
<v Speaker 1>if you you can get clusters,

00:25:54.455 --> 00:25:56.295
<v Speaker 1>and it'll tell you the name and then

00:25:56.295 --> 00:25:58.615
<v Speaker 1>just shut down the insecure board one.

00:26:00.375 --> 00:26:02.375
<v Speaker 0>Shut it down or kill it? I'll just

00:26:02.375 --> 00:26:04.455
<v Speaker 1>delete it. Minus minus name I think it

00:26:04.455 --> 00:26:06.455
<v Speaker 1>needs. Yeah. It's like minus minus name for

00:26:06.455 --> 00:26:06.695
<v Speaker 1>the

00:26:07.279 --> 00:26:07.919
<v Speaker 0>Alright.

00:26:09.600 --> 00:26:11.039
<v Speaker 1>Depends on I think it one of the

00:26:11.039 --> 00:26:12.480
<v Speaker 1>problems I've got these is my machine is

00:26:12.480 --> 00:26:14.799
<v Speaker 1>so powerful. I end up leaving these running

00:26:14.880 --> 00:26:15.919
<v Speaker 1>and I come back and I got like

00:26:15.919 --> 00:26:16.880
<v Speaker 1>10 kind clusters.

00:26:19.915 --> 00:26:22.395
<v Speaker 0>Yeah. I'm I'm not sure my Mac software

00:26:22.395 --> 00:26:25.115
<v Speaker 0>running the streaming software and Yeah.

00:26:25.755 --> 00:26:27.355
<v Speaker 0>At least my fans are probably all I've

00:26:27.355 --> 00:26:28.555
<v Speaker 0>got headphones on, I'm not sure. But I'm

00:26:28.555 --> 00:26:30.715
<v Speaker 0>pretty sure my fans are already going mental.

00:26:30.715 --> 00:26:31.674
<v Speaker 0>So Yeah.

00:26:31.995 --> 00:26:33.355
<v Speaker 1>I I went the whole desktop route now

00:26:33.355 --> 00:26:35.290
<v Speaker 1>and now it's like a four gig RAM.

00:26:35.290 --> 00:26:36.730
<v Speaker 1>You just don't notice. I left an OpenShift

00:26:36.730 --> 00:26:38.650
<v Speaker 1>cluster running and didn't notice, which is impressive.

00:26:39.850 --> 00:26:41.610
<v Speaker 0>That is pretty good. I like that.

00:26:42.490 --> 00:26:44.410
<v Speaker 0>Okay. So Well, I have to pick one.

00:26:44.410 --> 00:26:46.010
<v Speaker 0>Do you wanna pick one? Should we should

00:26:46.010 --> 00:26:47.930
<v Speaker 1>we do kubelet? Kubelet's so there's one there

00:26:47.930 --> 00:26:50.595
<v Speaker 1>r w kubelet no auth. Yep. I I

00:26:50.595 --> 00:26:52.515
<v Speaker 1>I kinda like that one because, again,

00:26:52.915 --> 00:26:54.755
<v Speaker 1>the the the the kubelet has its own

00:26:54.755 --> 00:26:56.034
<v Speaker 1>HTTP API,

00:26:56.355 --> 00:26:56.914
<v Speaker 1>but

00:26:57.715 --> 00:26:59.635
<v Speaker 1>go try finding documentation on it.

00:27:00.515 --> 00:27:02.035
<v Speaker 1>It's one place where there's not you can

00:27:02.035 --> 00:27:02.675
<v Speaker 1>go read the code,

00:27:03.870 --> 00:27:05.390
<v Speaker 1>but it there's not, like so because it's

00:27:05.390 --> 00:27:07.630
<v Speaker 1>not intended for external use, but it does

00:27:07.630 --> 00:27:08.670
<v Speaker 1>have one. So we can we can have

00:27:08.670 --> 00:27:10.350
<v Speaker 1>a look with that. That's that's quite a

00:27:10.350 --> 00:27:12.430
<v Speaker 1>fun one. Yeah. Okay. So that means I

00:27:12.430 --> 00:27:14.750
<v Speaker 0>have to run Ansible playbook, pass in this,

00:27:15.495 --> 00:27:17.335
<v Speaker 0>and let it spin up our new cluster.

00:27:17.495 --> 00:27:18.855
<v Speaker 1>Yeah. So and it should be faster this

00:27:18.855 --> 00:27:20.695
<v Speaker 1>time because it's gonna have the image, I

00:27:20.695 --> 00:27:21.174
<v Speaker 1>think.

00:27:22.775 --> 00:27:25.095
<v Speaker 0>We'll see. So I actually wasn't aware that

00:27:25.095 --> 00:27:28.215
<v Speaker 0>the kubelet had an API. Why? Yeah. What's

00:27:28.215 --> 00:27:30.530
<v Speaker 0>the intended use? Do we know? It's the

00:27:30.530 --> 00:27:33.090
<v Speaker 1>API server talking to the Kubelet.

00:27:33.410 --> 00:27:35.090
<v Speaker 1>So the API server has to tell the

00:27:35.090 --> 00:27:36.850
<v Speaker 1>Kubelet to tell the CRI to go do

00:27:36.850 --> 00:27:37.409
<v Speaker 1>stuff.

00:27:37.810 --> 00:27:40.530
<v Speaker 1>Yes. And it's this API and it's actually

00:27:40.690 --> 00:27:43.005
<v Speaker 1>it's an interesting one because it's one of

00:27:43.005 --> 00:27:44.125
<v Speaker 1>the places where

00:27:44.765 --> 00:27:47.485
<v Speaker 1>the TLS configuration of, like, QBIDM clusters is

00:27:47.485 --> 00:27:48.924
<v Speaker 1>not perfect out of the box.

00:27:49.165 --> 00:27:51.245
<v Speaker 1>It uses a self signed certificate. So, usually,

00:27:51.245 --> 00:27:53.405
<v Speaker 1>that's, like, signed in the certificate authority. But

00:27:53.405 --> 00:27:55.405
<v Speaker 1>for when the API server's talking to the

00:27:55.405 --> 00:27:55.885
<v Speaker 1>Kubelet,

00:27:56.260 --> 00:27:58.740
<v Speaker 1>the certificate is by default just self signed.

00:27:58.740 --> 00:28:00.179
<v Speaker 1>So there's a risk of, like, man in

00:28:00.179 --> 00:28:01.139
<v Speaker 1>the middle and stuff.

00:28:01.780 --> 00:28:04.020
<v Speaker 0>So the ship the Kubelet doesn't subscribe with

00:28:04.020 --> 00:28:05.940
<v Speaker 0>a watch then, like, all the other component?

00:28:06.179 --> 00:28:07.620
<v Speaker 1>It goes that way. But if the but

00:28:07.620 --> 00:28:09.505
<v Speaker 1>the API server, somebody seems to go the

00:28:09.505 --> 00:28:11.345
<v Speaker 1>other way and say, hey, mister Kubel, go

00:28:11.345 --> 00:28:13.185
<v Speaker 1>and do stuff. I think that's my understanding

00:28:13.185 --> 00:28:15.265
<v Speaker 1>of it. I will accept corrections on that

00:28:15.265 --> 00:28:16.784
<v Speaker 1>point though, for sure.

00:28:17.905 --> 00:28:20.545
<v Speaker 0>Alright. Okay. Well, you know, I I love

00:28:20.545 --> 00:28:22.145
<v Speaker 0>to learn on these things. So that's something

00:28:22.145 --> 00:28:24.169
<v Speaker 0>I had no idea about, which is cool.

00:28:24.169 --> 00:28:25.610
<v Speaker 0>Yeah. But now we're gonna take advantage of

00:28:25.610 --> 00:28:26.970
<v Speaker 0>it, I guess. We're yeah. We're gonna show

00:28:26.970 --> 00:28:28.250
<v Speaker 1>how you can take advantage of it. And

00:28:28.250 --> 00:28:29.450
<v Speaker 1>this this one's this one's a little bit

00:28:29.450 --> 00:28:30.890
<v Speaker 1>fun because we we're gonna do all our

00:28:30.890 --> 00:28:32.489
<v Speaker 1>hacking for this one with curl.

00:28:32.970 --> 00:28:33.770
<v Speaker 0>Curl.

00:28:33.770 --> 00:28:34.409
<v Speaker 0>Okay.

00:28:34.650 --> 00:28:36.330
<v Speaker 0>I I know a few curl flags.

00:28:38.745 --> 00:28:40.825
<v Speaker 1>I yeah. That's one of the fun things

00:28:40.825 --> 00:28:42.024
<v Speaker 1>I one of the reasons I like

00:28:42.825 --> 00:28:45.144
<v Speaker 1>I'm a great fan of HTTP APIs,

00:28:45.865 --> 00:28:47.304
<v Speaker 1>and and I also get annoyed when things

00:28:47.304 --> 00:28:50.810
<v Speaker 1>go gRPC from a attacker's perspective. HTTPs are

00:28:50.810 --> 00:28:52.250
<v Speaker 1>so many tools. You know, you can just

00:28:52.250 --> 00:28:53.370
<v Speaker 1>use anything which

00:28:54.170 --> 00:28:56.810
<v Speaker 1>which talks that. And and then with gRPC,

00:28:56.810 --> 00:28:58.330
<v Speaker 1>it's into, like, what proto do you have

00:28:58.330 --> 00:28:59.769
<v Speaker 1>and do you have all the other things?

00:29:01.370 --> 00:29:02.970
<v Speaker 0>I guess even with issue two p, if

00:29:02.970 --> 00:29:04.410
<v Speaker 0>the only tool you had was Telnet, you

00:29:04.410 --> 00:29:05.930
<v Speaker 0>could probably still make that work. Yeah.

00:29:06.785 --> 00:29:08.865
<v Speaker 1>Exactly. Yeah. But you're always gonna have Carol.

00:29:08.865 --> 00:29:09.345
<v Speaker 0>Yeah.

00:29:10.785 --> 00:29:13.424
<v Speaker 0>The Carol author on Twitter always posts, like,

00:29:13.424 --> 00:29:15.345
<v Speaker 0>messages about the release and the Carol birthday

00:29:15.345 --> 00:29:17.025
<v Speaker 0>and and all the new contributors and stuff.

00:29:17.025 --> 00:29:18.865
<v Speaker 0>And just the sheer age and size of

00:29:18.865 --> 00:29:20.865
<v Speaker 0>that project always amazes me. Yeah. I think

00:29:20.865 --> 00:29:22.049
<v Speaker 0>it's 23

00:29:22.049 --> 00:29:24.450
<v Speaker 0>years old this year, like, this month it

00:29:24.450 --> 00:29:25.009
<v Speaker 0>was.

00:29:25.250 --> 00:29:26.690
<v Speaker 1>Yeah. It's been going such a long I

00:29:26.850 --> 00:29:28.529
<v Speaker 1>he's got some really great information about things

00:29:28.529 --> 00:29:29.089
<v Speaker 1>like

00:29:29.809 --> 00:29:31.409
<v Speaker 1>how all the different weird things you can

00:29:31.409 --> 00:29:32.529
<v Speaker 1>put in URLs.

00:29:32.610 --> 00:29:34.289
<v Speaker 1>So people are ever thinking of doing, like,

00:29:34.289 --> 00:29:37.414
<v Speaker 1>regex on HTTP URLs, be really careful.

00:29:37.815 --> 00:29:39.095
<v Speaker 1>It's it's astonishing

00:29:39.095 --> 00:29:40.695
<v Speaker 1>the weird stuff you can put in URLs

00:29:40.695 --> 00:29:42.454
<v Speaker 1>and how it's not part of a spec.

00:29:42.534 --> 00:29:44.134
<v Speaker 1>So you can say I'm spec compliant, and

00:29:44.134 --> 00:29:45.654
<v Speaker 1>it still will do something odd.

00:29:45.894 --> 00:29:46.855
<v Speaker 1>That's great fun.

00:29:47.980 --> 00:29:48.700
<v Speaker 0>Alright.

00:29:49.100 --> 00:29:51.259
<v Speaker 0>Okay. So I'm gonna copy this IP address.

00:29:51.259 --> 00:29:53.019
<v Speaker 0>I'm gonna assuming I'm going back into my

00:29:53.019 --> 00:29:54.700
<v Speaker 0>Docker, my client.

00:29:54.860 --> 00:29:55.979
<v Speaker 1>Yeah. That's the one.

00:29:56.940 --> 00:29:57.499
<v Speaker 0>And,

00:29:57.899 --> 00:29:59.340
<v Speaker 0>I mean, in theory, I could just run

00:29:59.340 --> 00:30:00.700
<v Speaker 0>the same command to see if things are

00:30:00.700 --> 00:30:03.025
<v Speaker 0>running. Right? But I'm assuming that's not Yeah.

00:30:03.025 --> 00:30:04.545
<v Speaker 1>So this should fail horribly. It should say,

00:30:04.545 --> 00:30:06.305
<v Speaker 1>no. I'm gonna I'm not yeah. I'm not

00:30:06.305 --> 00:30:08.144
<v Speaker 1>gonna play ball with that. Okay.

00:30:09.185 --> 00:30:10.785
<v Speaker 1>But if we do if we do the

00:30:10.865 --> 00:30:11.745
<v Speaker 1>actually, if you go up, we should look

00:30:11.745 --> 00:30:13.105
<v Speaker 1>at nmap. Actually, I don't know. Or just

00:30:13.105 --> 00:30:15.265
<v Speaker 1>retype that, actually. We can do nmap again,

00:30:15.265 --> 00:30:15.985
<v Speaker 1>we can show that the

00:30:18.060 --> 00:30:19.580
<v Speaker 1>Oh, it might not oh, it might not

00:30:19.580 --> 00:30:21.340
<v Speaker 1>know the port. If you give it minus

00:30:21.340 --> 00:30:22.220
<v Speaker 1>p,

00:30:23.420 --> 00:30:25.260
<v Speaker 1>just before the IP address,

00:30:26.540 --> 00:30:29.420
<v Speaker 1>and then do minus p 10250,

00:30:32.485 --> 00:30:33.924
<v Speaker 1>Let's see if hopefully, it should find it.

00:30:33.924 --> 00:30:35.445
<v Speaker 0>Yes. Is that is that not the read

00:30:35.445 --> 00:30:37.684
<v Speaker 0>only port, actually? That that that's read write.

00:30:37.684 --> 00:30:39.445
<v Speaker 1>So read only is 10255.

00:30:39.445 --> 00:30:41.605
<v Speaker 1>5 5 o. That was deprecated, wasn't it?

00:30:41.605 --> 00:30:43.445
<v Speaker 1>Yeah. I was gonna say that's gone because

00:30:43.445 --> 00:30:44.804
<v Speaker 1>that was again, it was one of the

00:30:44.804 --> 00:30:47.100
<v Speaker 1>early ones and and it was could not

00:30:47.100 --> 00:30:49.180
<v Speaker 1>authenticate the read read only port. There was

00:30:49.180 --> 00:30:50.700
<v Speaker 1>no option to do it. So it was

00:30:50.700 --> 00:30:52.780
<v Speaker 1>it was great information disclosure. If you're a

00:30:52.780 --> 00:30:55.340
<v Speaker 1>pen tester, hit that port, and you get

00:30:55.900 --> 00:30:57.740
<v Speaker 1>quite a lot of kinda useful information, definitely

00:30:57.740 --> 00:30:58.460
<v Speaker 1>starting points.

00:31:00.115 --> 00:31:01.795
<v Speaker 1>I in the early days, there was cAdvisor

00:31:01.795 --> 00:31:03.795
<v Speaker 1>as well on four one nine four, but

00:31:03.795 --> 00:31:04.915
<v Speaker 1>that that went. I think it went a

00:31:04.915 --> 00:31:05.955
<v Speaker 1>lower in the browser.

00:31:06.195 --> 00:31:07.795
<v Speaker 0>Yeah. The the one zero two five five

00:31:07.795 --> 00:31:09.235
<v Speaker 0>is actually the the read only port I

00:31:09.235 --> 00:31:10.755
<v Speaker 0>use for monitoring. So now I feel less

00:31:10.755 --> 00:31:12.115
<v Speaker 0>guilty that I wasn't

00:31:12.330 --> 00:31:13.929
<v Speaker 0>I I am I'm happy that I wasn't

00:31:13.929 --> 00:31:15.289
<v Speaker 0>using the API servers

00:31:15.529 --> 00:31:16.889
<v Speaker 0>and secure ones. Yeah.

00:31:17.850 --> 00:31:19.529
<v Speaker 1>Oh, the API server and secure ones. Yeah.

00:31:19.529 --> 00:31:21.769
<v Speaker 1>Well, you've seen that's that's how yeah. The

00:31:21.769 --> 00:31:22.809
<v Speaker 1>the read only

00:31:23.370 --> 00:31:24.809
<v Speaker 1>keyboard port is not terrible.

00:31:25.395 --> 00:31:27.155
<v Speaker 1>It's not I mean, as a pen tester,

00:31:27.155 --> 00:31:28.355
<v Speaker 1>I liked it. I I, you know, I

00:31:28.355 --> 00:31:29.395
<v Speaker 1>was I was always happy when I saw

00:31:29.395 --> 00:31:30.915
<v Speaker 1>it. But it wasn't like a game over.

00:31:30.915 --> 00:31:32.035
<v Speaker 1>It wasn't I I would have finished my

00:31:32.035 --> 00:31:33.555
<v Speaker 1>job today and that's me done. Yeah. You

00:31:33.555 --> 00:31:35.794
<v Speaker 0>have all the information that you need. Right?

00:31:35.955 --> 00:31:37.235
<v Speaker 0>Almost? Yeah. But each host?

00:31:37.860 --> 00:31:39.540
<v Speaker 1>Yeah. It tells you things like, you know,

00:31:39.540 --> 00:31:41.220
<v Speaker 1>what images am I running? What flags is

00:31:41.220 --> 00:31:42.820
<v Speaker 1>the API server running? If you had control

00:31:42.820 --> 00:31:45.059
<v Speaker 1>plane node? Lots of cool stuff that might

00:31:45.059 --> 00:31:46.740
<v Speaker 1>otherwise lead you, you know

00:31:47.780 --> 00:31:49.460
<v Speaker 1>but, yeah, it's not game over. But this

00:31:49.460 --> 00:31:50.740
<v Speaker 1>is this is the read write one. So

00:31:50.740 --> 00:31:52.100
<v Speaker 1>this is this is the one with the

00:31:52.100 --> 00:31:53.220
<v Speaker 1>with the funky API.

00:31:54.965 --> 00:31:57.205
<v Speaker 1>So to testing that, what we can do

00:31:57.205 --> 00:31:59.125
<v Speaker 1>just to get started, if you curl minus

00:31:59.125 --> 00:32:00.724
<v Speaker 1>k because it's gonna be HTTPS.

00:32:04.565 --> 00:32:06.164
<v Speaker 1>And, yeah, it's HTTPS

00:32:06.164 --> 00:32:07.365
<v Speaker 1>on that. And then

00:32:09.284 --> 00:32:10.620
<v Speaker 1>And you should get four zero four. Right?

00:32:10.620 --> 00:32:12.620
<v Speaker 1>So that that's fine. The the base URL

00:32:12.620 --> 00:32:14.140
<v Speaker 1>says, no. Go away. I'm not I'm not

00:32:14.220 --> 00:32:16.060
<v Speaker 1>want but but because it's given us something,

00:32:16.060 --> 00:32:17.100
<v Speaker 1>we know it's running, and we know it's

00:32:17.100 --> 00:32:18.140
<v Speaker 1>not authenticated.

00:32:18.300 --> 00:32:19.740
<v Speaker 1>Because if it was authenticated at this point,

00:32:19.740 --> 00:32:21.580
<v Speaker 1>it would say, no. Go away. You haven't

00:32:21.580 --> 00:32:23.500
<v Speaker 1>given me the client certificate I was expecting.

00:32:24.785 --> 00:32:27.505
<v Speaker 1>So from attacker's perspective, just seeing that 404

00:32:27.505 --> 00:32:29.265
<v Speaker 1>is, like, that's okay. I've got something to

00:32:29.265 --> 00:32:30.065
<v Speaker 1>look at here.

00:32:30.705 --> 00:32:32.465
<v Speaker 1>So then you need to know then you

00:32:32.465 --> 00:32:33.424
<v Speaker 1>need to know the

00:32:34.225 --> 00:32:35.825
<v Speaker 1>the end end points. And then the first

00:32:35.825 --> 00:32:36.784
<v Speaker 1>one is pods.

00:32:37.585 --> 00:32:38.225
<v Speaker 1>Nice and simple.

00:32:38.840 --> 00:32:39.880
<v Speaker 1>And,

00:32:41.000 --> 00:32:42.120
<v Speaker 1>yeah, Jake is there

00:32:42.440 --> 00:32:43.720
<v Speaker 1>for that reason

00:32:44.600 --> 00:32:46.920
<v Speaker 1>because otherwise, you're there forever. So now we

00:32:46.920 --> 00:32:49.080
<v Speaker 0>we we know every pod that this kubelet

00:32:49.080 --> 00:32:52.264
<v Speaker 0>is is running on the machine. Every pod,

00:32:52.265 --> 00:32:54.424
<v Speaker 1>every security context,

00:32:54.745 --> 00:32:56.105
<v Speaker 1>every volume amount,

00:32:56.505 --> 00:32:57.785
<v Speaker 1>everything. And this is kinda what you got

00:32:57.785 --> 00:32:59.144
<v Speaker 1>out of the read only port.

00:33:00.665 --> 00:33:02.184
<v Speaker 1>So it is actually kind of

00:33:03.865 --> 00:33:05.145
<v Speaker 1>it's kinda gives you an idea of the

00:33:05.145 --> 00:33:06.345
<v Speaker 1>level of information disclosure.

00:33:06.799 --> 00:33:08.000
<v Speaker 1>But what we need to do now, and

00:33:08.000 --> 00:33:09.120
<v Speaker 1>this is this is the fun part. We

00:33:09.120 --> 00:33:10.640
<v Speaker 1>might need a text file to, like, copy

00:33:10.640 --> 00:33:11.919
<v Speaker 1>paste bits and pieces,

00:33:12.400 --> 00:33:14.399
<v Speaker 1>is all the information we need

00:33:14.799 --> 00:33:16.559
<v Speaker 1>to get access to

00:33:17.039 --> 00:33:18.559
<v Speaker 1>that key

00:33:18.640 --> 00:33:20.885
<v Speaker 1>is in the information we just got. Because

00:33:20.885 --> 00:33:22.885
<v Speaker 1>there's an endpoint on the kubelet API called

00:33:22.885 --> 00:33:23.524
<v Speaker 1>run,

00:33:23.764 --> 00:33:26.644
<v Speaker 1>and it lets you run commands inside pods.

00:33:28.725 --> 00:33:30.485
<v Speaker 1>But we need some bits of information to

00:33:30.485 --> 00:33:31.364
<v Speaker 1>make it work.

00:33:32.245 --> 00:33:35.445
<v Speaker 0>Okay. Let's get that text Yeah. Open.

00:33:36.980 --> 00:33:38.900
<v Speaker 0>Documents.

00:33:39.380 --> 00:33:41.620
<v Speaker 0>I will you don't need to see it.

00:33:41.620 --> 00:33:42.660
<v Speaker 0>Right? I can just leave it off screen.

00:33:42.660 --> 00:33:44.980
<v Speaker 0>Yeah. Yeah. Okay. So the first thing we

00:33:44.980 --> 00:33:47.540
<v Speaker 1>need is namespace. Now that's always gonna be

00:33:47.540 --> 00:33:49.235
<v Speaker 1>cube system because we wanna try and get

00:33:49.235 --> 00:33:50.674
<v Speaker 1>the API server pod. So if we do

00:33:50.835 --> 00:33:52.434
<v Speaker 1>the endpoint is is run,

00:33:54.514 --> 00:33:56.034
<v Speaker 1>and then it's gonna be slash. And the

00:33:56.034 --> 00:33:57.634
<v Speaker 1>next thing you put after this after slash

00:33:57.715 --> 00:33:59.954
<v Speaker 1>after slash, then it's cube system.

00:34:00.115 --> 00:34:01.394
<v Speaker 1>Then what we need to know is we

00:34:01.394 --> 00:34:02.355
<v Speaker 1>need to know the pod name.

00:34:03.200 --> 00:34:04.800
<v Speaker 1>And so the pod name, we're gonna scroll

00:34:04.800 --> 00:34:06.080
<v Speaker 1>up until we see if can find the

00:34:06.080 --> 00:34:07.840
<v Speaker 1>API server pod in that output.

00:34:08.239 --> 00:34:09.679
<v Speaker 1>It will be there somewhere, but it might

00:34:09.679 --> 00:34:11.679
<v Speaker 1>be a way up. Let's hope the scroll

00:34:11.679 --> 00:34:14.000
<v Speaker 1>back buffer doesn't Oh, my god. Was there

00:34:14.000 --> 00:34:15.360
<v Speaker 0>from pods.

00:34:17.045 --> 00:34:17.925
<v Speaker 0>Correct.

00:34:18.165 --> 00:34:18.805
<v Speaker 0>Okay.

00:34:20.325 --> 00:34:21.445
<v Speaker 0>Network. Oh.

00:34:23.685 --> 00:34:25.605
<v Speaker 1>Wonder whether Why does the network?

00:34:26.645 --> 00:34:28.645
<v Speaker 1>Is it is it API test server or

00:34:30.245 --> 00:34:30.885
<v Speaker 1>Yeah.

00:34:31.045 --> 00:34:31.125
<v Speaker 1>Correct.

00:34:34.540 --> 00:34:35.260
<v Speaker 0>Okay.

00:34:38.139 --> 00:34:40.219
<v Speaker 0>That's it for API probably wasn't my best

00:34:40.219 --> 00:34:41.900
<v Speaker 0>move, but we we are we do have

00:34:41.900 --> 00:34:43.739
<v Speaker 0>it kinda restricted. I wonder if we can

00:34:43.739 --> 00:34:45.339
<v Speaker 1>find out the where is it going to

00:34:45.339 --> 00:34:45.579
<v Speaker 1>be?

00:34:46.905 --> 00:34:48.585
<v Speaker 1>Yeah. There we go. So that's that named

00:34:48.585 --> 00:34:50.505
<v Speaker 1>cube dash API server dash.

00:34:53.945 --> 00:34:55.945
<v Speaker 1>That'll be that one there, I think. Yeah.

00:34:55.705 --> 00:34:57.385
<v Speaker 1>Think that's pointing the screen that you guys

00:34:57.385 --> 00:34:58.265
<v Speaker 1>are pointing.

00:34:58.585 --> 00:35:00.425
<v Speaker 0>I pasted that into my thingy. Okay. Yeah.

00:35:00.425 --> 00:35:01.065
<v Speaker 1>So you got that.

00:35:01.779 --> 00:35:02.820
<v Speaker 1>So we

00:35:03.539 --> 00:35:04.500
<v Speaker 1>have that,

00:35:05.220 --> 00:35:06.820
<v Speaker 1>and then after that

00:35:07.539 --> 00:35:09.700
<v Speaker 1>so, yeah, paste that in and then slash,

00:35:10.900 --> 00:35:12.579
<v Speaker 1>and then the name of the container, is

00:35:12.579 --> 00:35:14.339
<v Speaker 1>always kubit dash API server.

00:35:14.500 --> 00:35:15.460
<v Speaker 1>That one's pretty simple.

00:35:17.445 --> 00:35:18.805
<v Speaker 1>We've got a nice case. So now we

00:35:18.805 --> 00:35:20.085
<v Speaker 1>need to tell it so the way this

00:35:20.085 --> 00:35:22.805
<v Speaker 1>API works is you're posting. So you post

00:35:22.965 --> 00:35:24.645
<v Speaker 1>the command you want it to run.

00:35:25.685 --> 00:35:28.405
<v Speaker 1>So we do minus capital x post.

00:35:33.140 --> 00:35:34.580
<v Speaker 0>Mhmm. Yeah. And

00:35:34.980 --> 00:35:36.820
<v Speaker 1>at the end of it all, we want

00:35:36.900 --> 00:35:38.660
<v Speaker 1>minus lowercase d

00:35:40.180 --> 00:35:42.100
<v Speaker 1>and then space,

00:35:42.340 --> 00:35:43.140
<v Speaker 1>open quotes,

00:35:44.635 --> 00:35:45.595
<v Speaker 1>c m d

00:35:45.835 --> 00:35:47.595
<v Speaker 1>equals let's do who am I to be

00:35:47.675 --> 00:35:49.195
<v Speaker 1>to start with. Let's see if that's gonna

00:35:49.195 --> 00:35:49.835
<v Speaker 1>work.

00:35:55.035 --> 00:35:55.435
<v Speaker 0>Yay.

00:35:56.370 --> 00:35:58.450
<v Speaker 0>I think Noel has maybe done this lab

00:35:58.450 --> 00:36:00.530
<v Speaker 0>before. Otherwise, he's just been doing bad things

00:36:00.530 --> 00:36:02.450
<v Speaker 0>to other people's kubelets, but I kind of

00:36:02.450 --> 00:36:03.490
<v Speaker 0>suggested that.

00:36:03.890 --> 00:36:05.330
<v Speaker 0>I can add there. Okay.

00:36:05.890 --> 00:36:06.850
<v Speaker 0>I have

00:36:07.090 --> 00:36:09.330
<v Speaker 0>the ability to run any command as you

00:36:09.330 --> 00:36:11.010
<v Speaker 0>were inside the kubel API.

00:36:11.925 --> 00:36:14.165
<v Speaker 1>Yeah. So this is this is why leaving

00:36:14.165 --> 00:36:16.165
<v Speaker 1>the Kubel open is really dangerous

00:36:16.325 --> 00:36:19.685
<v Speaker 1>because, basically, you are essentially, Kubel controls Docker.

00:36:19.685 --> 00:36:21.205
<v Speaker 1>So you think about I've got Docker exec,

00:36:21.205 --> 00:36:23.285
<v Speaker 1>that's what you've got, essentially. You've got anything

00:36:23.285 --> 00:36:24.325
<v Speaker 1>you can do with Docker.

00:36:24.645 --> 00:36:25.925
<v Speaker 1>Yeah. I see it up here.

00:36:27.690 --> 00:36:29.930
<v Speaker 1>And that's backdoor access to the cluster. So

00:36:29.930 --> 00:36:32.170
<v Speaker 1>anyone leaving the kubelet open and there have

00:36:32.170 --> 00:36:33.690
<v Speaker 1>been cases. So, like,

00:36:34.810 --> 00:36:37.609
<v Speaker 1>Aqua have a research team who have honeypots,

00:36:37.609 --> 00:36:39.690
<v Speaker 1>and they look for people scanning the Internet.

00:36:39.690 --> 00:36:41.369
<v Speaker 1>And one of the things that the the

00:36:41.369 --> 00:36:43.130
<v Speaker 1>crypto coin mining community

00:36:43.185 --> 00:36:45.425
<v Speaker 1>have worked out is that cubelets allow you

00:36:45.425 --> 00:36:48.065
<v Speaker 1>to execute code and execute commands on machines.

00:36:48.385 --> 00:36:49.985
<v Speaker 1>So they absolutely do look for these.

00:36:50.305 --> 00:36:51.825
<v Speaker 1>And if you leave so if anyone ever

00:36:51.825 --> 00:36:53.825
<v Speaker 1>left a cubelet port open on the Internet,

00:36:53.825 --> 00:36:56.145
<v Speaker 1>you can basically expect someone to do that

00:36:55.470 --> 00:36:56.430
<v Speaker 1>quite simply.

00:36:58.030 --> 00:36:59.790
<v Speaker 1>But that that that vulnerability was actually that

00:36:59.790 --> 00:37:00.750
<v Speaker 1>was the thing that got me to Kubernetes

00:37:00.750 --> 00:37:02.270
<v Speaker 1>security. So that was in 2018.

00:37:02.270 --> 00:37:04.270
<v Speaker 1>That was that always worked. That worked on

00:37:04.270 --> 00:37:07.150
<v Speaker 1>every cluster. And, like, for about probably the

00:37:07.150 --> 00:37:09.150
<v Speaker 1>first couple of Kubernetes security reviews I did,

00:37:09.905 --> 00:37:12.465
<v Speaker 1>that was my oh, look. My cluster.

00:37:14.785 --> 00:37:17.825
<v Speaker 0>Well, that's eye opening. This is at least,

00:37:17.825 --> 00:37:18.065
<v Speaker 0>like

00:37:19.025 --> 00:37:20.625
<v Speaker 1>It's a it's a fun one. I like

00:37:20.625 --> 00:37:21.265
<v Speaker 1>that one.

00:37:21.905 --> 00:37:23.665
<v Speaker 1>It's So it's not a well documented API.

00:37:23.665 --> 00:37:26.400
<v Speaker 0>So simple as well. Just Yeah. A quick

00:37:26.400 --> 00:37:28.640
<v Speaker 0>curl command. As a fact that I understand

00:37:28.640 --> 00:37:31.040
<v Speaker 0>why the kubelet run API endpoint is there,

00:37:31.839 --> 00:37:33.520
<v Speaker 0>but just super dangerous.

00:37:34.160 --> 00:37:36.400
<v Speaker 0>But that's just now authenticated only. Right? That's

00:37:36.400 --> 00:37:38.000
<v Speaker 0>what you were saying. That's that's how Yeah.

00:37:38.000 --> 00:37:39.680
<v Speaker 0>So it it by default,

00:37:40.395 --> 00:37:42.555
<v Speaker 1>obviously, you can turn that off. Right? So

00:37:42.555 --> 00:37:44.875
<v Speaker 1>it is it is possible if you misconfigure

00:37:44.875 --> 00:37:46.715
<v Speaker 1>the Kubelet or if someone tries to do

00:37:46.715 --> 00:37:48.235
<v Speaker 1>something with Kubelet that they could make a

00:37:48.235 --> 00:37:48.795
<v Speaker 1>mistake.

00:37:49.115 --> 00:37:50.875
<v Speaker 1>And it's kind of a good reason why

00:37:50.875 --> 00:37:51.755
<v Speaker 1>it's worth,

00:37:52.155 --> 00:37:54.795
<v Speaker 1>like, periodically having these things these these tools,

00:37:55.440 --> 00:37:57.680
<v Speaker 1>like, Kube Hunter and some other tools, which

00:37:57.680 --> 00:38:00.320
<v Speaker 1>will, like, probe these. There's also CyberArk. I've

00:38:00.320 --> 00:38:02.160
<v Speaker 1>got a tool called Kubelet Cuddle,

00:38:02.560 --> 00:38:04.720
<v Speaker 1>which will automate that process. So instead of

00:38:04.720 --> 00:38:06.160
<v Speaker 1>using curl, they actually have a tool, a

00:38:06.160 --> 00:38:08.560
<v Speaker 1>Go binary. You run the Go binary against

00:38:08.560 --> 00:38:09.760
<v Speaker 1>that API, and it does all this for

00:38:09.760 --> 00:38:09.839
<v Speaker 1>you,

00:38:10.734 --> 00:38:12.175
<v Speaker 1>which is really super neat.

00:38:13.055 --> 00:38:15.775
<v Speaker 1>So, yeah, it's worth kinda doing those periodically

00:38:15.775 --> 00:38:17.214
<v Speaker 1>on your clusters. You should just get back

00:38:17.214 --> 00:38:18.575
<v Speaker 1>nothing. Right? You should create, nope. You're not

00:38:18.575 --> 00:38:19.375
<v Speaker 1>authenticated.

00:38:19.454 --> 00:38:20.255
<v Speaker 1>Go away.

00:38:21.855 --> 00:38:22.495
<v Speaker 0>Okay.

00:38:22.734 --> 00:38:24.960
<v Speaker 0>We have a comment say in our use

00:38:24.960 --> 00:38:26.640
<v Speaker 0>of the word crypto community. It was maybe

00:38:26.640 --> 00:38:28.400
<v Speaker 0>a little bit harsh. I don't think it

00:38:28.400 --> 00:38:31.040
<v Speaker 0>was intended to be Crypto mining. Crypto mining.

00:38:31.040 --> 00:38:32.640
<v Speaker 1>Oh, I said crypto mining community. Sorry. I

00:38:32.640 --> 00:38:34.560
<v Speaker 1>understand. Yeah. I I mean, crypto I said

00:38:34.560 --> 00:38:36.800
<v Speaker 1>crypto mining community. Sorry. Maybe I wasn't I

00:38:36.800 --> 00:38:38.964
<v Speaker 1>wasn't clear. My accent might not have crypto.

00:38:38.964 --> 00:38:40.484
<v Speaker 1>No. I wouldn't say crypto community, but crypto

00:38:40.484 --> 00:38:41.525
<v Speaker 1>mining community.

00:38:41.845 --> 00:38:44.244
<v Speaker 1>The people who go around, compromising people's machines

00:38:44.244 --> 00:38:46.484
<v Speaker 1>for crypto mining for clarity. Yeah. I I

00:38:46.484 --> 00:38:47.685
<v Speaker 0>I know what you mean. There are a

00:38:47.685 --> 00:38:49.125
<v Speaker 0>lot of people out there that are scripting

00:38:49.125 --> 00:38:50.805
<v Speaker 0>all of these weird and wacky ways to

00:38:50.805 --> 00:38:52.724
<v Speaker 0>be able to run crypto miners on any

00:38:52.724 --> 00:38:54.869
<v Speaker 0>sort of computer across the entire Internet. We

00:38:54.869 --> 00:38:56.070
<v Speaker 0>mean those people.

00:38:56.549 --> 00:38:58.390
<v Speaker 1>Yeah. Those people. The people who are yeah.

00:38:58.390 --> 00:38:59.910
<v Speaker 1>So for clarity, the people who are doing

00:38:59.910 --> 00:39:02.710
<v Speaker 1>that look for cubelets because they provide compute

00:39:02.710 --> 00:39:04.069
<v Speaker 1>in the same way as the API server

00:39:04.069 --> 00:39:07.030
<v Speaker 1>provides compute or the Docker socket provides compute.

00:39:08.065 --> 00:39:09.905
<v Speaker 0>It I mean, that port number, I guess,

00:39:09.905 --> 00:39:11.665
<v Speaker 0>you find that open anywhere, you're it's pretty

00:39:11.665 --> 00:39:13.185
<v Speaker 0>much just a a green flag. You know

00:39:13.185 --> 00:39:14.785
<v Speaker 0>right away you can probably get access to

00:39:14.785 --> 00:39:18.225
<v Speaker 0>it. Yeah. It yeah. Unlike eighty eighty can

00:39:18.225 --> 00:39:19.425
<v Speaker 1>be a bit you know, a lot of

00:39:19.425 --> 00:39:21.105
<v Speaker 1>things use the eighty eighty because it's, the

00:39:21.105 --> 00:39:23.840
<v Speaker 1>alternate web port. But the Kubelet port, one

00:39:23.840 --> 00:39:25.680
<v Speaker 1>zero two five o, that's there's not a

00:39:25.680 --> 00:39:27.280
<v Speaker 1>lot of other things. So yeah.

00:39:27.840 --> 00:39:28.960
<v Speaker 1>And there are scanning

00:39:29.280 --> 00:39:31.280
<v Speaker 1>services that will hit that now. So I'm

00:39:31.280 --> 00:39:33.760
<v Speaker 1>pretty sure Binary Edge, which is another similar

00:39:33.760 --> 00:39:34.560
<v Speaker 1>thing to Shodan,

00:39:35.445 --> 00:39:37.365
<v Speaker 1>it will it it indexes one zero two

00:39:37.365 --> 00:39:38.085
<v Speaker 1>five o.

00:39:38.645 --> 00:39:40.325
<v Speaker 0>So I should I should run it on

00:39:40.325 --> 00:39:41.765
<v Speaker 0>port one zero two five one then. So

00:39:41.765 --> 00:39:43.205
<v Speaker 0>up here. Yay.

00:39:43.685 --> 00:39:44.645
<v Speaker 1>Absolutely.

00:39:44.645 --> 00:39:46.165
<v Speaker 1>Actually, no. There's something that runs on one

00:39:46.165 --> 00:39:47.845
<v Speaker 1>zero two five one. Weirdly,

00:39:48.005 --> 00:39:49.845
<v Speaker 1>all of the components like scheduler and controller

00:39:49.845 --> 00:39:52.619
<v Speaker 1>manager run on ports, generally just for health

00:39:52.619 --> 00:39:53.180
<v Speaker 1>check.

00:39:53.660 --> 00:39:55.420
<v Speaker 1>They only look at health zed end point,

00:39:55.420 --> 00:39:56.940
<v Speaker 1>but you you find there's loads of ports

00:39:56.940 --> 00:39:57.580
<v Speaker 1>now.

00:39:57.900 --> 00:40:00.220
<v Speaker 1>But, yeah, you could run a different port,

00:40:00.460 --> 00:40:01.740
<v Speaker 1>obviously, authentication.

00:40:02.460 --> 00:40:04.220
<v Speaker 0>Yeah. Just keep that turned on. Don't turn

00:40:04.220 --> 00:40:07.145
<v Speaker 0>off. Don't turn off. Don't ever break it.

00:40:07.785 --> 00:40:08.905
<v Speaker 0>So

00:40:09.305 --> 00:40:11.625
<v Speaker 0>I'm gonna have to get the list again.

00:40:11.625 --> 00:40:13.225
<v Speaker 0>You know, I'll I'll leave it running till

00:40:13.225 --> 00:40:14.825
<v Speaker 0>my computer start crying, and then maybe I'll

00:40:14.825 --> 00:40:16.265
<v Speaker 0>start shutting down. Yeah. Let's start spinning up

00:40:16.265 --> 00:40:18.265
<v Speaker 0>the next one at least first. So we've

00:40:18.265 --> 00:40:21.820
<v Speaker 0>done n secure with a read write, kubelet.

00:40:21.900 --> 00:40:23.180
<v Speaker 0>That was a scary one.

00:40:23.580 --> 00:40:25.340
<v Speaker 1>Do we want to do

00:40:26.380 --> 00:40:28.060
<v Speaker 1>a kind of a user one or do

00:40:28.060 --> 00:40:29.260
<v Speaker 1>want to do an x c d? X

00:40:29.260 --> 00:40:30.540
<v Speaker 1>c d is like the other one for,

00:40:30.540 --> 00:40:31.580
<v Speaker 1>like, server stuff.

00:40:32.484 --> 00:40:34.325
<v Speaker 1>It's like the other like, obviously, the database

00:40:34.325 --> 00:40:35.605
<v Speaker 1>where things are, or you wanna do an

00:40:35.605 --> 00:40:37.925
<v Speaker 1>SSH to things one. Well, I I guess

00:40:37.925 --> 00:40:39.845
<v Speaker 0>the attack factor with x e d is,

00:40:39.845 --> 00:40:41.525
<v Speaker 0>like, I if I put something into x

00:40:41.525 --> 00:40:44.005
<v Speaker 0>e d, like, the compute the API server

00:40:44.005 --> 00:40:45.525
<v Speaker 0>is gonna make that run somewhere. Is that

00:40:45.525 --> 00:40:47.125
<v Speaker 0>the attack factor there, or is it something

00:40:47.125 --> 00:40:47.845
<v Speaker 0>else? So

00:40:48.540 --> 00:40:51.420
<v Speaker 1>if you allow the if if you either

00:40:51.420 --> 00:40:53.660
<v Speaker 1>get creds for the etcd server or if

00:40:53.660 --> 00:40:55.660
<v Speaker 1>someone puts etcd unauthenticated

00:40:55.900 --> 00:40:57.340
<v Speaker 1>so, for example, they turn off it'll put

00:40:57.340 --> 00:40:59.020
<v Speaker 1>authentication properly on etcd,

00:40:59.180 --> 00:41:01.340
<v Speaker 1>then, obviously, you can dump out anything's in

00:41:01.340 --> 00:41:01.820
<v Speaker 1>etcd.

00:41:02.155 --> 00:41:03.515
<v Speaker 1>So it's a question of how do you

00:41:03.515 --> 00:41:06.475
<v Speaker 1>go from iPhone port twenty three seventy nine,

00:41:06.475 --> 00:41:07.915
<v Speaker 1>which is the XCD port,

00:41:08.155 --> 00:41:10.155
<v Speaker 1>to running code on the cluster?

00:41:12.235 --> 00:41:13.755
<v Speaker 1>And and there's a couple of steps to

00:41:13.755 --> 00:41:15.490
<v Speaker 1>that, which are kind of fun. We we

00:41:15.490 --> 00:41:16.450
<v Speaker 1>can if you want, we can look at

00:41:16.450 --> 00:41:18.130
<v Speaker 1>that. That's the last of the big server

00:41:18.130 --> 00:41:20.370
<v Speaker 1>port attacks. Yeah. Why not? Let's do it.

00:41:20.370 --> 00:41:22.370
<v Speaker 0>So we do have a question, which I'll

00:41:22.370 --> 00:41:23.570
<v Speaker 0>get to in a second, but we'll spend

00:41:23.570 --> 00:41:24.770
<v Speaker 0>this one up first.

00:41:25.410 --> 00:41:27.410
<v Speaker 0>Let that run. Okay.

00:41:27.890 --> 00:41:29.250
<v Speaker 0>Noel is back with a question.

00:41:30.525 --> 00:41:32.285
<v Speaker 0>Are any of these vulnerabilities that we are

00:41:32.285 --> 00:41:33.724
<v Speaker 0>looking at or or part of the labs

00:41:33.724 --> 00:41:35.805
<v Speaker 0>still shut by QBADM by default?

00:41:36.525 --> 00:41:37.085
<v Speaker 1>No.

00:41:37.325 --> 00:41:38.845
<v Speaker 1>QBADM QBADM,

00:41:38.845 --> 00:41:40.204
<v Speaker 1>I've done a lot of work. And and

00:41:40.204 --> 00:41:43.085
<v Speaker 1>this great props to the QBADM team. They've

00:41:43.085 --> 00:41:44.684
<v Speaker 1>done a lot of work on, like, the

00:41:44.684 --> 00:41:47.400
<v Speaker 1>defaults so that this doesn't because, obviously, this

00:41:47.400 --> 00:41:49.640
<v Speaker 1>would be super dangerous if if if this

00:41:49.640 --> 00:41:50.840
<v Speaker 1>is allowed by default.

00:41:52.520 --> 00:41:55.080
<v Speaker 1>I would say that all the major distributions

00:41:55.080 --> 00:41:55.800
<v Speaker 1>now

00:41:56.359 --> 00:41:57.560
<v Speaker 1>get this right.

00:41:57.800 --> 00:41:59.560
<v Speaker 1>If you'd asked me that question two years

00:41:59.560 --> 00:42:01.795
<v Speaker 1>ago, I would not be saying the same

00:42:01.795 --> 00:42:02.355
<v Speaker 1>thing.

00:42:02.915 --> 00:42:03.795
<v Speaker 1>But now,

00:42:04.755 --> 00:42:06.595
<v Speaker 1>it's it's it's it's getting a lot better.

00:42:06.755 --> 00:42:08.835
<v Speaker 1>That said, you know, the there are, like,

00:42:08.835 --> 00:42:09.955
<v Speaker 1>a 20,

00:42:09.955 --> 00:42:11.875
<v Speaker 1>I think, certified distributions.

00:42:12.530 --> 00:42:14.050
<v Speaker 1>Do all of them get all of these

00:42:14.050 --> 00:42:16.450
<v Speaker 1>right all the time is a good question.

00:42:16.770 --> 00:42:18.210
<v Speaker 1>And if someone has a load of time

00:42:18.210 --> 00:42:19.010
<v Speaker 1>on their hands,

00:42:19.570 --> 00:42:21.410
<v Speaker 1>you could totally go and find out probably,

00:42:21.970 --> 00:42:23.410
<v Speaker 1>but you'd have to have a lot of

00:42:23.410 --> 00:42:24.050
<v Speaker 1>time in your hands.

00:42:25.625 --> 00:42:26.185
<v Speaker 0>So,

00:42:27.305 --> 00:42:29.385
<v Speaker 0>I mean, I guess, it's q QPDM just

00:42:29.385 --> 00:42:30.505
<v Speaker 0>must be the best way for people to

00:42:30.505 --> 00:42:31.865
<v Speaker 0>go. Like, if they're not going down to

00:42:31.865 --> 00:42:34.425
<v Speaker 0>OpenShift or any other distribution Yeah. Like, people

00:42:34.425 --> 00:42:37.145
<v Speaker 0>shouldn't be manually configuring all of this themselves.

00:42:37.145 --> 00:42:39.065
<v Speaker 0>They should just Yeah. Use QPDM.

00:42:39.065 --> 00:42:41.030
<v Speaker 0>Right? I I would say that. Yeah. I

00:42:41.030 --> 00:42:42.310
<v Speaker 1>I I QPDM,

00:42:42.310 --> 00:42:43.670
<v Speaker 1>there's a lot of,

00:42:43.990 --> 00:42:46.950
<v Speaker 1>like, weird edge cases that you don't know.

00:42:47.110 --> 00:42:49.670
<v Speaker 1>Actually, ETCD is a good one. So the

00:42:49.670 --> 00:42:51.030
<v Speaker 1>way ETCD works

00:42:52.070 --> 00:42:53.510
<v Speaker 1>with its authentication

00:42:53.830 --> 00:42:55.190
<v Speaker 1>is it trusts

00:42:55.565 --> 00:42:59.005
<v Speaker 1>any certificate issued by the certificate authority it's

00:42:59.005 --> 00:43:00.285
<v Speaker 1>been told to trust.

00:43:00.685 --> 00:43:03.085
<v Speaker 1>So you have to have different certificate authorities,

00:43:03.085 --> 00:43:04.845
<v Speaker 1>one for XCD and one for Kubernetes. You

00:43:04.845 --> 00:43:06.925
<v Speaker 1>can't use the same one, or anyone with

00:43:06.925 --> 00:43:08.525
<v Speaker 1>a client cert for Kubernetes would be able

00:43:08.525 --> 00:43:09.165
<v Speaker 1>to get to XCD.

00:43:10.290 --> 00:43:12.210
<v Speaker 1>And SCD has no authorization, so it just

00:43:12.210 --> 00:43:13.730
<v Speaker 1>gives everything to anyone

00:43:13.970 --> 00:43:15.810
<v Speaker 1>in the way that Kubernetes sets it up.

00:43:15.810 --> 00:43:17.330
<v Speaker 1>So it's that's a that's a kind of

00:43:17.330 --> 00:43:18.690
<v Speaker 1>a weird edge case. You wouldn't have thought

00:43:18.690 --> 00:43:20.210
<v Speaker 1>of that. I wouldn't have thought of that.

00:43:20.290 --> 00:43:20.850
<v Speaker 1>But

00:43:21.170 --> 00:43:22.690
<v Speaker 1>knowing that, yeah, that's the sort of thing

00:43:22.690 --> 00:43:23.730
<v Speaker 1>that could be a DM have done the

00:43:23.730 --> 00:43:25.855
<v Speaker 1>work. They've they've worked out what's needed and

00:43:25.855 --> 00:43:27.214
<v Speaker 1>done the hard work to do that.

00:43:27.535 --> 00:43:29.134
<v Speaker 0>Oh, yeah. I can imagine, like, you know,

00:43:29.134 --> 00:43:31.615
<v Speaker 0>certificate authority and certificate management is a pain

00:43:31.615 --> 00:43:33.055
<v Speaker 0>in the ass the best of times. If

00:43:33.055 --> 00:43:35.535
<v Speaker 0>I was hand rolling my own Kubernetes clusters,

00:43:35.694 --> 00:43:37.454
<v Speaker 0>it makes it insensible to just say, hey.

00:43:37.454 --> 00:43:38.815
<v Speaker 0>I'm gonna have one CA. I'm gonna provision

00:43:38.815 --> 00:43:40.740
<v Speaker 0>and send a bunch of certificates and not

00:43:40.740 --> 00:43:42.260
<v Speaker 0>really think beyond that. But then when you

00:43:42.260 --> 00:43:44.740
<v Speaker 0>realize that, oh, anything why am I clustered

00:43:44.740 --> 00:43:46.420
<v Speaker 0>now has the ability to speak to the

00:43:46.420 --> 00:43:47.940
<v Speaker 0>database that powers it.

00:43:48.420 --> 00:43:50.420
<v Speaker 1>That's And I've I've seen I've seen distributions

00:43:50.420 --> 00:43:52.740
<v Speaker 1>made that mistake. I've absolutely seen distributions made

00:43:52.740 --> 00:43:54.500
<v Speaker 1>that mistake because it's not something that's well

00:43:54.500 --> 00:43:56.265
<v Speaker 1>known. You know, if you don't know that,

00:43:56.265 --> 00:43:58.105
<v Speaker 1>and it's and it's not obvious. And the

00:43:58.105 --> 00:44:00.425
<v Speaker 1>thing is what I find with what in

00:44:00.425 --> 00:44:01.865
<v Speaker 1>my kind of I'm I'm just a security

00:44:01.865 --> 00:44:03.385
<v Speaker 1>person, but from from what I've seen of

00:44:03.385 --> 00:44:04.745
<v Speaker 1>how people use Kubernetes,

00:44:04.825 --> 00:44:07.464
<v Speaker 1>it's a big complicated system. When you take

00:44:07.464 --> 00:44:10.400
<v Speaker 1>out the box, you use it as provided.

00:44:10.400 --> 00:44:11.840
<v Speaker 1>You don't go playing with it because you

00:44:11.840 --> 00:44:12.720
<v Speaker 1>want it to work.

00:44:14.000 --> 00:44:15.040
<v Speaker 0>Yeah. That's

00:44:15.200 --> 00:44:15.680
<v Speaker 0>true.

00:44:17.680 --> 00:44:19.120
<v Speaker 0>Okay. Let's see.

00:44:19.520 --> 00:44:21.600
<v Speaker 0>Oh, it's still spinning. Okay. It's still spinning?

00:44:22.245 --> 00:44:24.085
<v Speaker 1>Maybe your laptop's fans are actually, it should

00:44:24.085 --> 00:44:26.325
<v Speaker 1>be kinda is quite nice and light. It's

00:44:26.325 --> 00:44:28.645
<v Speaker 1>it's Oh, yeah. They're they're taken off. Maybe

00:44:28.645 --> 00:44:30.085
<v Speaker 0>I should have cut the other one.

00:44:30.405 --> 00:44:31.445
<v Speaker 1>Alright. It's

00:44:31.845 --> 00:44:33.365
<v Speaker 1>it's got past the hard part.

00:44:34.565 --> 00:44:36.005
<v Speaker 0>We could still shut that down.

00:44:37.460 --> 00:44:39.619
<v Speaker 0>So delete cluster

00:44:40.020 --> 00:44:42.819
<v Speaker 0>name and that was a redrary.

00:44:42.819 --> 00:44:43.380
<v Speaker 0>Yeah.

00:44:43.700 --> 00:44:44.100
<v Speaker 0>Okay.

00:44:48.579 --> 00:44:50.020
<v Speaker 0>I would have laughed if I shut down

00:44:50.020 --> 00:44:51.700
<v Speaker 0>s t d no off, but I'm okay.

00:44:52.545 --> 00:44:53.185
<v Speaker 1>Yeah.

00:44:53.665 --> 00:44:56.065
<v Speaker 0>Alright. So we have our IP and I'm

00:44:56.065 --> 00:44:58.065
<v Speaker 0>gonna jump back into our

00:44:58.385 --> 00:45:00.224
<v Speaker 0>oh, client machine. There we go.

00:45:04.530 --> 00:45:06.210
<v Speaker 0>Are we we end mapping?

00:45:06.610 --> 00:45:07.970
<v Speaker 1>No. We can yep. We can end map.

00:45:07.970 --> 00:45:10.050
<v Speaker 1>We can end map for Port 2379.

00:45:10.050 --> 00:45:11.650
<v Speaker 1>That should be our our port of choice

00:45:11.650 --> 00:45:12.210
<v Speaker 1>here.

00:45:15.810 --> 00:45:18.050
<v Speaker 1>Oh, it's 0 5. It is one up.

00:45:18.165 --> 00:45:20.085
<v Speaker 1>Shut the other one down, it's it's last

00:45:20.085 --> 00:45:21.045
<v Speaker 1>digits five.

00:45:22.885 --> 00:45:23.925
<v Speaker 0>Very good. Cool.

00:45:24.565 --> 00:45:27.045
<v Speaker 1>And it oh, nMap knows it's nMap knows

00:45:27.045 --> 00:45:29.365
<v Speaker 1>about that port now. Because that service line

00:45:29.365 --> 00:45:31.580
<v Speaker 1>just comes from nMap's database. Yeah.

00:45:31.740 --> 00:45:33.100
<v Speaker 1>So it must have, like, decided it knows

00:45:33.100 --> 00:45:34.620
<v Speaker 1>what SCD is now, which is cool.

00:45:35.660 --> 00:45:38.380
<v Speaker 0>Making hacker's lives easier everywhere. Yeah.

00:45:39.500 --> 00:45:42.220
<v Speaker 1>You know, you gotta use mMap. I it

00:45:42.220 --> 00:45:44.620
<v Speaker 1>shows you that I spent a large number

00:45:44.620 --> 00:45:47.015
<v Speaker 1>of years using nmap that I've got because

00:45:47.015 --> 00:45:48.375
<v Speaker 1>I can remember all this. The one it's

00:45:48.375 --> 00:45:49.734
<v Speaker 1>the one command I don't forget the flags

00:45:49.734 --> 00:45:51.255
<v Speaker 1>on. Everything else, I'll have to look up.

00:45:51.255 --> 00:45:54.134
<v Speaker 1>But nmap, I'm fine. No. Nmap and TCP

00:45:54.134 --> 00:45:56.934
<v Speaker 0>tumper tools I reached to as a very,

00:45:56.934 --> 00:45:59.174
<v Speaker 0>very last resort. So they're definitely not something

00:45:59.174 --> 00:45:59.974
<v Speaker 0>I'm comfortable with.

00:46:01.470 --> 00:46:02.670
<v Speaker 0>Yeah.

00:46:05.230 --> 00:46:07.710
<v Speaker 1>So what we're gonna do so obviously, etcd

00:46:07.710 --> 00:46:10.750
<v Speaker 1>is gRPC. It's not HTTP. Although,

00:46:10.830 --> 00:46:12.830
<v Speaker 1>there is an HTTP API in there. It's

00:46:12.830 --> 00:46:13.390
<v Speaker 1>just a bit hidden.

00:46:26.270 --> 00:46:27.390
<v Speaker 1>Should do the job.

00:46:27.950 --> 00:46:29.630
<v Speaker 1>And the first thing we need to do

00:46:29.630 --> 00:46:31.630
<v Speaker 1>is the really weird thing that I always

00:46:31.630 --> 00:46:32.270
<v Speaker 1>forget,

00:46:32.510 --> 00:46:34.430
<v Speaker 1>which is need to export an environment variable

00:46:34.430 --> 00:46:36.910
<v Speaker 1>to tell it we're using version three. Yes.

00:46:38.315 --> 00:46:39.835
<v Speaker 1>So it's export

00:46:40.875 --> 00:46:42.875
<v Speaker 1>alright. So export. X c d c t

00:46:42.875 --> 00:46:43.515
<v Speaker 1>l

00:46:44.395 --> 00:46:46.955
<v Speaker 1>underscore API equals three.

00:46:48.395 --> 00:46:50.715
<v Speaker 0>Yeah. I have a Otherwise cheat sheet that

00:46:50.715 --> 00:46:52.235
<v Speaker 0>I always use to configure s c d

00:46:52.315 --> 00:46:54.860
<v Speaker 0>Yeah. When on clustered especially just because I

00:46:54.860 --> 00:46:56.460
<v Speaker 0>could never remember those

00:46:56.700 --> 00:46:58.700
<v Speaker 0>that Yeah. The temptation to get it working.

00:46:58.860 --> 00:47:00.700
<v Speaker 1>I never remember that and I always wonder

00:47:00.700 --> 00:47:02.060
<v Speaker 1>why it doesn't work. And then I go

00:47:02.060 --> 00:47:04.620
<v Speaker 1>after about three or four tries, oh, that.

00:47:05.020 --> 00:47:06.140
<v Speaker 1>So now it's like one of those things

00:47:06.140 --> 00:47:07.660
<v Speaker 1>I think I've done enough that burned into

00:47:07.660 --> 00:47:07.980
<v Speaker 1>my brain.

00:47:09.885 --> 00:47:11.565
<v Speaker 1>So we should now be able to talk

00:47:11.565 --> 00:47:12.125
<v Speaker 1>to

00:47:12.925 --> 00:47:14.765
<v Speaker 1>the servers on

00:47:15.325 --> 00:47:16.925
<v Speaker 1>o five. So we need to give it

00:47:16.925 --> 00:47:17.885
<v Speaker 1>some flags.

00:47:18.205 --> 00:47:22.045
<v Speaker 1>First one is dash dash insecure dash skip

00:47:21.300 --> 00:47:22.580
<v Speaker 1>TLS verify

00:47:22.660 --> 00:47:24.820
<v Speaker 1>because who cares about verifying TLS?

00:47:25.940 --> 00:47:28.340
<v Speaker 1>And then we need to say minus minus

00:47:28.340 --> 00:47:29.140
<v Speaker 1>insecure

00:47:29.140 --> 00:47:32.180
<v Speaker 1>dash transport equals false because it is on

00:47:33.300 --> 00:47:34.420
<v Speaker 1>HTTPS.

00:47:35.465 --> 00:47:36.985
<v Speaker 1>Then we need to tell the endpoints. This

00:47:36.985 --> 00:47:38.345
<v Speaker 1>is the HTTP cuddle's got a lot of

00:47:38.345 --> 00:47:40.505
<v Speaker 1>flags. So minus minus endpoints,

00:47:40.505 --> 00:47:41.225
<v Speaker 1>plural,

00:47:41.865 --> 00:47:42.665
<v Speaker 1>equals

00:47:42.905 --> 00:47:44.505
<v Speaker 1>yeah. It's HTTPS.

00:47:45.545 --> 00:47:47.625
<v Speaker 1>I think you might need to get HTTPS

00:47:47.625 --> 00:47:48.105
<v Speaker 1>for the start.

00:47:48.920 --> 00:47:51.000
<v Speaker 0>It's not an example there. So I I

00:47:51.000 --> 00:47:53.800
<v Speaker 0>kind of omitted it. But Yeah. I think

00:47:53.960 --> 00:47:55.880
<v Speaker 1>yeah. I've I've I've just kinda got

00:47:56.760 --> 00:47:57.480
<v Speaker 0>Let's see.

00:47:57.880 --> 00:47:59.480
<v Speaker 1>And then at the end, we we just

00:47:59.480 --> 00:48:00.440
<v Speaker 1>say get

00:48:01.240 --> 00:48:01.960
<v Speaker 1>slash.

00:48:02.375 --> 00:48:04.375
<v Speaker 1>No. Are we do if we yeah. We'll

00:48:04.375 --> 00:48:07.415
<v Speaker 1>we'll try get slash minus minus prefix. I'll

00:48:07.415 --> 00:48:09.655
<v Speaker 1>try yeah. Minus minus prefix.

00:48:10.055 --> 00:48:12.055
<v Speaker 1>It's minus minus keys only.

00:48:13.335 --> 00:48:15.015
<v Speaker 1>This is why I wrote all this down.

00:48:16.855 --> 00:48:17.255
<v Speaker 1>We go.

00:48:18.760 --> 00:48:21.320
<v Speaker 1>And so that is what that's done is

00:48:21.320 --> 00:48:23.720
<v Speaker 1>that's just dumped out everything you ever

00:48:24.040 --> 00:48:26.520
<v Speaker 1>like, that's everything SCD knows about in terms

00:48:26.520 --> 00:48:27.400
<v Speaker 1>of cluster.

00:48:29.240 --> 00:48:30.920
<v Speaker 1>And as you can see, one of the

00:48:30.920 --> 00:48:33.320
<v Speaker 1>cool things that's in that list is secrets.

00:48:34.715 --> 00:48:36.875
<v Speaker 1>And this is why access to SCD is

00:48:36.875 --> 00:48:38.235
<v Speaker 1>so incredibly dangerous

00:48:38.315 --> 00:48:40.395
<v Speaker 1>because that's every secret in the cluster.

00:48:42.715 --> 00:48:44.075
<v Speaker 0>And are those available

00:48:44.315 --> 00:48:46.635
<v Speaker 0>in plain text, or is Kubernetes not providing

00:48:46.635 --> 00:48:48.075
<v Speaker 0>any level of encryption there?

00:48:48.720 --> 00:48:49.280
<v Speaker 1>The

00:48:49.520 --> 00:48:51.280
<v Speaker 1>they are but we're going getting them over

00:48:51.280 --> 00:48:54.160
<v Speaker 1>the API. So it's good the by default,

00:48:54.160 --> 00:48:55.200
<v Speaker 1>it's in plain text.

00:48:55.600 --> 00:48:58.240
<v Speaker 1>You can get the API server to encrypt,

00:48:58.720 --> 00:48:59.840
<v Speaker 1>but it's not default.

00:49:00.240 --> 00:49:02.800
<v Speaker 1>So guess what? People don't turn things on.

00:49:02.800 --> 00:49:03.520
<v Speaker 1>They aren't false.

00:49:04.255 --> 00:49:05.135
<v Speaker 1>Very often,

00:49:05.375 --> 00:49:06.735
<v Speaker 1>you should turn it on.

00:49:07.855 --> 00:49:09.375
<v Speaker 1>But, obviously, if you go via the Kubernetes

00:49:09.375 --> 00:49:10.975
<v Speaker 1>API, you'll still get them in plain text.

00:49:10.975 --> 00:49:12.095
<v Speaker 1>Right? Because you have to be able to

00:49:12.095 --> 00:49:14.735
<v Speaker 1>get them back. But, yeah, we this case

00:49:14.735 --> 00:49:16.655
<v Speaker 1>is a default install, so it doesn't encrypt

00:49:16.655 --> 00:49:18.575
<v Speaker 1>them by default. So we we can get

00:49:18.575 --> 00:49:20.040
<v Speaker 1>them out in plain text. Well, kind of

00:49:20.040 --> 00:49:20.840
<v Speaker 1>plain text.

00:49:22.360 --> 00:49:24.920
<v Speaker 1>So what we're gonna do is we need

00:49:25.560 --> 00:49:28.280
<v Speaker 1>we need our our a token that's gonna

00:49:28.280 --> 00:49:30.280
<v Speaker 1>give us, like, access, like, good access.

00:49:32.325 --> 00:49:34.085
<v Speaker 1>I'm gonna shout out to one that used

00:49:34.085 --> 00:49:35.685
<v Speaker 1>to be really great. There's a there's a

00:49:35.685 --> 00:49:37.205
<v Speaker 1>secret. In Kubernetes,

00:49:37.685 --> 00:49:39.445
<v Speaker 1>it's the only service account token that you

00:49:39.445 --> 00:49:41.204
<v Speaker 1>can get cluster admin without out of the

00:49:41.204 --> 00:49:44.244
<v Speaker 1>box, which is the cluster role aggregation controller,

00:49:45.290 --> 00:49:47.210
<v Speaker 1>which I bet I had never heard of.

00:49:48.330 --> 00:49:50.330
<v Speaker 1>And it used to be there's there's it

00:49:50.490 --> 00:49:52.170
<v Speaker 1>used to be cluster admin.

00:49:52.410 --> 00:49:54.330
<v Speaker 1>And it's not cluster admin anymore,

00:49:54.410 --> 00:49:56.730
<v Speaker 1>but it has impersonate rights so it can

00:49:56.730 --> 00:49:58.330
<v Speaker 1>become cluster admin if it wants to be.

00:50:00.695 --> 00:50:02.375
<v Speaker 1>We have a complex one to play with,

00:50:02.375 --> 00:50:02.775
<v Speaker 1>though.

00:50:03.335 --> 00:50:05.575
<v Speaker 1>So what we've got, if you scroll up

00:50:05.575 --> 00:50:06.455
<v Speaker 1>a little bit,

00:50:07.575 --> 00:50:09.975
<v Speaker 1>I think I put one on here called

00:50:09.975 --> 00:50:10.695
<v Speaker 1>admins account.

00:50:11.799 --> 00:50:12.599
<v Speaker 0>Yep.

00:50:13.319 --> 00:50:15.240
<v Speaker 1>So if you get that path

00:50:17.400 --> 00:50:18.520
<v Speaker 1>and then

00:50:18.760 --> 00:50:21.720
<v Speaker 1>we yeah. But that just get that, basically.

00:50:23.319 --> 00:50:24.599
<v Speaker 1>And this is where we get the the

00:50:24.599 --> 00:50:25.880
<v Speaker 1>the light that is

00:50:26.440 --> 00:50:27.160
<v Speaker 1>gRPC.

00:50:28.215 --> 00:50:29.575
<v Speaker 1>But if you see where it starts e

00:50:29.575 --> 00:50:31.815
<v Speaker 1>y? E y j That's j w t.

00:50:31.815 --> 00:50:34.935
<v Speaker 0>Right? Yeah. And down to the point where

00:50:34.935 --> 00:50:36.615
<v Speaker 1>just for the hash sign.

00:50:37.895 --> 00:50:39.975
<v Speaker 1>It's like a hash sign Yeah. So

00:50:40.855 --> 00:50:42.630
<v Speaker 1>they are up to e y j. If

00:50:42.950 --> 00:50:44.390
<v Speaker 1>you get that and

00:50:45.190 --> 00:50:46.070
<v Speaker 1>then

00:50:47.109 --> 00:50:48.390
<v Speaker 1>do kubectl

00:50:51.109 --> 00:50:53.510
<v Speaker 1>dash dash insecure skip TLS verify because we

00:50:53.510 --> 00:50:55.750
<v Speaker 1>don't have the the the TLS setup.

00:50:57.109 --> 00:50:58.230
<v Speaker 1>Minus s

00:50:58.964 --> 00:51:00.325
<v Speaker 1>HTTPS,

00:51:01.365 --> 00:51:03.525
<v Speaker 1>the IP address 6443.

00:51:04.724 --> 00:51:06.565
<v Speaker 0>What was the IP address? Sorry. 172

00:51:06.805 --> 00:51:07.445
<v Speaker 1>0,

00:51:07.845 --> 00:51:08.805
<v Speaker 1>0 5.

00:51:09.125 --> 00:51:09.444
<v Speaker 0>0 5.

00:51:11.010 --> 00:51:12.610
<v Speaker 1>It's not 18 or 20. I think it's

00:51:12.770 --> 00:51:13.730
<v Speaker 0>143.

00:51:13.890 --> 00:51:16.210
<v Speaker 1>Yeah. And then minus minus token

00:51:18.530 --> 00:51:19.170
<v Speaker 1>that.

00:51:21.010 --> 00:51:22.770
<v Speaker 1>And then, like, get p or something. We'll

00:51:22.770 --> 00:51:23.330
<v Speaker 1>get nodes. Yeah.

00:51:25.235 --> 00:51:26.835
<v Speaker 0>I mean, just maybe get an IP address

00:51:26.835 --> 00:51:29.155
<v Speaker 0>wrong. No. It's not it works.

00:51:29.395 --> 00:51:30.275
<v Speaker 1>So that

00:51:30.755 --> 00:51:32.595
<v Speaker 1>is literally how you go from

00:51:32.915 --> 00:51:35.155
<v Speaker 1>so we we're now we've

00:51:35.155 --> 00:51:36.995
<v Speaker 1>now got some access. If you wanna know

00:51:36.995 --> 00:51:39.150
<v Speaker 1>how much access we've got, the best my

00:51:39.150 --> 00:51:41.150
<v Speaker 1>favorite one of my favorite commands is

00:51:41.710 --> 00:51:43.790
<v Speaker 1>auth can I minus manage list?

00:51:47.869 --> 00:51:50.190
<v Speaker 1>So we just yeah. Auth can I?

00:51:51.734 --> 00:51:53.654
<v Speaker 1>It's the off space can I and then

00:51:53.734 --> 00:51:55.575
<v Speaker 0>Off space can I? Yeah. And then that

00:51:55.414 --> 00:51:57.494
<v Speaker 1>that's

00:51:58.375 --> 00:51:59.015
<v Speaker 1>And

00:51:59.494 --> 00:52:00.694
<v Speaker 1>we have the magic at the top, which

00:52:00.694 --> 00:52:02.214
<v Speaker 1>is star.star. Star Star.

00:52:03.540 --> 00:52:04.660
<v Speaker 0>Anything.

00:52:05.300 --> 00:52:06.740
<v Speaker 1>Which is anything. So this is a cluster

00:52:06.740 --> 00:52:08.100
<v Speaker 1>admin account,

00:52:08.100 --> 00:52:09.860
<v Speaker 1>which just so for for for for ease

00:52:09.860 --> 00:52:12.180
<v Speaker 1>of of of doing stuff, this was just

00:52:12.180 --> 00:52:13.780
<v Speaker 1>cluster admin because we're trying to demonstrate the

00:52:13.780 --> 00:52:15.860
<v Speaker 1>ACD part, not the, like, provest part.

00:52:16.944 --> 00:52:18.545
<v Speaker 1>There was also a great quote that Iain

00:52:18.545 --> 00:52:20.385
<v Speaker 1>Coldwater did, which I use in all my

00:52:20.385 --> 00:52:22.545
<v Speaker 1>talks, which is we're all made of stars,

00:52:22.545 --> 00:52:24.065
<v Speaker 1>but your RBAC shouldn't be.

00:52:25.585 --> 00:52:27.905
<v Speaker 0>I like that. It's yeah. I love it

00:52:27.905 --> 00:52:29.265
<v Speaker 1>because it's it's so true.

00:52:29.665 --> 00:52:31.025
<v Speaker 1>There's a lot of

00:52:31.890 --> 00:52:32.769
<v Speaker 1>temptation.

00:52:32.769 --> 00:52:34.530
<v Speaker 1>Again, Kubernetes is complicated.

00:52:35.490 --> 00:52:36.930
<v Speaker 1>RBAC is complicated.

00:52:37.170 --> 00:52:38.609
<v Speaker 1>There's a lot of temptation, I think, for

00:52:38.609 --> 00:52:39.890
<v Speaker 1>people who really have a problem with it

00:52:39.890 --> 00:52:41.570
<v Speaker 1>to just say, give it cluster admin.

00:52:42.130 --> 00:52:44.690
<v Speaker 1>I was actually looking at installs for various

00:52:44.690 --> 00:52:47.184
<v Speaker 1>open source projects last week, and I noticed

00:52:47.184 --> 00:52:48.464
<v Speaker 1>that a lot of them said, if you're

00:52:48.464 --> 00:52:49.744
<v Speaker 1>doing this in GKE,

00:52:49.984 --> 00:52:51.984
<v Speaker 1>you won't have enough rights to begin with,

00:52:51.984 --> 00:52:53.505
<v Speaker 1>so just run this command to make yourself

00:52:53.505 --> 00:52:54.465
<v Speaker 1>cluster admin.

00:52:54.865 --> 00:52:56.545
<v Speaker 1>And I was like, it didn't ever say

00:52:56.545 --> 00:52:58.385
<v Speaker 1>after that, and by the way, remove cluster

00:52:58.385 --> 00:53:00.065
<v Speaker 1>admin from your account afterwards.

00:53:00.065 --> 00:53:02.385
<v Speaker 1>It just said, make yourself cluster admin.

00:53:02.810 --> 00:53:04.810
<v Speaker 1>And I was like, yeah, that's really super

00:53:04.810 --> 00:53:05.930
<v Speaker 1>super dangerous

00:53:06.570 --> 00:53:08.650
<v Speaker 1>because cluster admin can do anything.

00:53:08.730 --> 00:53:11.130
<v Speaker 0>I think every JKE tutorial I've seen, whether

00:53:11.130 --> 00:53:13.369
<v Speaker 0>it be installed in Celeb, installed in Rawkode,

00:53:13.369 --> 00:53:15.290
<v Speaker 0>any of these things, they all start with,

00:53:15.290 --> 00:53:17.345
<v Speaker 0>oh, you have to elevate your privileges. That's

00:53:17.345 --> 00:53:18.224
<v Speaker 0>the first thing you have to do with

00:53:18.224 --> 00:53:18.865
<v Speaker 0>JK.

00:53:19.265 --> 00:53:21.105
<v Speaker 1>And and they always say cluster admin. Don't

00:53:21.105 --> 00:53:23.184
<v Speaker 1>say elevate it using this profile that we've

00:53:23.184 --> 00:53:25.025
<v Speaker 1>designed to only give you the things you

00:53:25.025 --> 00:53:25.505
<v Speaker 1>need.

00:53:25.825 --> 00:53:27.825
<v Speaker 1>It's just go get cluster admin.

00:53:28.224 --> 00:53:29.664
<v Speaker 0>And And then that rule is just lying

00:53:29.664 --> 00:53:31.664
<v Speaker 0>there around forever. Right? It's like a Yeah.

00:53:32.100 --> 00:53:33.700
<v Speaker 1>And then someone if someone gets your account

00:53:33.700 --> 00:53:34.820
<v Speaker 1>or gets your token,

00:53:35.300 --> 00:53:36.820
<v Speaker 1>you're gonna have a bad time. And and

00:53:36.820 --> 00:53:38.660
<v Speaker 1>as more and more things go in as

00:53:38.660 --> 00:53:39.620
<v Speaker 1>CRDs,

00:53:39.620 --> 00:53:41.060
<v Speaker 1>so more and more of, like, people install

00:53:41.060 --> 00:53:43.220
<v Speaker 1>things like, say, my Kubernetes cluster is now

00:53:43.220 --> 00:53:44.820
<v Speaker 1>good to manage all my databases through an

00:53:44.820 --> 00:53:45.140
<v Speaker 1>operator,

00:53:45.665 --> 00:53:47.585
<v Speaker 1>you're not just giving them Kubernetes access. You're

00:53:47.585 --> 00:53:49.905
<v Speaker 1>giving them database access too to all the

00:53:49.905 --> 00:53:52.065
<v Speaker 1>databases you're managing via Kubernetes.

00:53:52.065 --> 00:53:53.745
<v Speaker 1>Or even if you're doing OpenShift,

00:53:53.825 --> 00:53:55.505
<v Speaker 1>to the machine nodes as well because, like,

00:53:55.505 --> 00:53:57.105
<v Speaker 1>machine in OpenShift

00:53:57.105 --> 00:53:59.905
<v Speaker 1>now, you're managing the VMs via OpenShift.

00:54:01.440 --> 00:54:03.200
<v Speaker 1>So, yeah, that is my one of my

00:54:03.200 --> 00:54:06.000
<v Speaker 1>rants about why cluster admin is super dangerous,

00:54:06.320 --> 00:54:07.840
<v Speaker 1>but and we see it too often.

00:54:08.560 --> 00:54:10.480
<v Speaker 0>Yeah. That makes a lot a lot of

00:54:10.480 --> 00:54:13.040
<v Speaker 0>sense, and I'm gonna definitely think twice about

00:54:13.040 --> 00:54:16.160
<v Speaker 0>those sneaky little oh, just do this example.

00:54:16.160 --> 00:54:19.125
<v Speaker 1>It's it's it's it's yeah. It's super common.

00:54:19.125 --> 00:54:20.325
<v Speaker 1>That and the other one I've noticed is

00:54:20.325 --> 00:54:22.485
<v Speaker 1>operators. So this is a, like, a QBADM

00:54:22.485 --> 00:54:23.125
<v Speaker 1>cluster.

00:54:23.285 --> 00:54:24.485
<v Speaker 1>And as I said, there's no one who

00:54:24.485 --> 00:54:26.005
<v Speaker 1>gets cluster admin by default.

00:54:26.325 --> 00:54:28.325
<v Speaker 1>But to give you an example, an OpenShift

00:54:28.325 --> 00:54:31.150
<v Speaker 1>four five cluster, I think, has 42 accounts

00:54:31.150 --> 00:54:33.310
<v Speaker 1>that get cluster admin. Oh, wow.

00:54:33.630 --> 00:54:35.710
<v Speaker 1>So there's 42 different operators. They're all the

00:54:35.710 --> 00:54:38.590
<v Speaker 1>operators. They're all the operator service accounts.

00:54:38.750 --> 00:54:40.030
<v Speaker 1>So if this if I was running this

00:54:40.030 --> 00:54:41.950
<v Speaker 1>command against an OpenShift cluster, we would have

00:54:41.950 --> 00:54:43.630
<v Speaker 1>a load of different choices that we could

00:54:43.630 --> 00:54:45.775
<v Speaker 1>use to get cluster admin because I said

00:54:45.855 --> 00:54:47.375
<v Speaker 1>because I think it's 40 something. I just

00:54:47.455 --> 00:54:49.855
<v Speaker 1>it was over 40 that have cluster admin.

00:54:49.855 --> 00:54:52.015
<v Speaker 1>So it's it's it's one I'm kinda hoping

00:54:52.015 --> 00:54:53.455
<v Speaker 1>they might fix that, and it's just, like,

00:54:53.455 --> 00:54:55.455
<v Speaker 1>early days ago. Because it it

00:54:56.250 --> 00:54:58.010
<v Speaker 1>it it's kinda like, you know, in the

00:54:58.010 --> 00:55:00.010
<v Speaker 1>old Windows world saying, do people need domain

00:55:00.010 --> 00:55:01.610
<v Speaker 1>admin? And the answer is you should never

00:55:01.610 --> 00:55:02.810
<v Speaker 1>need domain admin.

00:55:02.970 --> 00:55:04.490
<v Speaker 1>You should need you know, so there must

00:55:04.490 --> 00:55:06.250
<v Speaker 1>be some smaller quantity of rights we can

00:55:06.330 --> 00:55:08.570
<v Speaker 1>you can give people than than that. Yeah.

00:55:08.570 --> 00:55:09.210
<v Speaker 0>That makes sense.

00:55:11.475 --> 00:55:13.235
<v Speaker 1>So for this one, if you wanna finish

00:55:13.235 --> 00:55:15.155
<v Speaker 1>it off, we can just do the exec

00:55:15.155 --> 00:55:16.115
<v Speaker 1>command again.

00:55:19.235 --> 00:55:21.075
<v Speaker 1>So we can just as we get p

00:55:21.075 --> 00:55:22.835
<v Speaker 1>o and then make cube system names Oh,

00:55:22.835 --> 00:55:24.035
<v Speaker 1>yeah. Yeah. Okay.

00:55:25.820 --> 00:55:28.140
<v Speaker 0>To get the the CSR or mission.

00:55:28.460 --> 00:55:29.820
<v Speaker 1>Yeah. Our mission.

00:55:30.620 --> 00:55:32.140
<v Speaker 1>They probably want to I think we'll to

00:55:32.140 --> 00:55:33.740
<v Speaker 1>get PO first in in KubeSystem to

00:55:34.300 --> 00:55:34.940
<v Speaker 0>Yeah.

00:55:35.500 --> 00:55:36.860
<v Speaker 0>I was just thinking that.

00:55:37.340 --> 00:55:38.700
<v Speaker 0>Was like, oh, I I wouldn't remember that

00:55:38.700 --> 00:55:41.424
<v Speaker 0>name. They they are predictable names, but because

00:55:41.424 --> 00:55:44.145
<v Speaker 1>kinda's kinda our Kubernetes is good like that.

00:55:44.145 --> 00:55:44.545
<v Speaker 0>I

00:55:53.184 --> 00:55:53.664
<v Speaker 0>got it.

00:55:54.410 --> 00:55:56.810
<v Speaker 1>So that's it. Right? That's yeah. Yep. That's

00:55:56.810 --> 00:55:59.850
<v Speaker 1>another another backdoored cluster. Another cluster you can

00:55:59.850 --> 00:56:01.530
<v Speaker 1>you can keep access to forever.

00:56:02.490 --> 00:56:03.930
<v Speaker 1>Of course, until you delete it in, like,

00:56:03.930 --> 00:56:05.370
<v Speaker 1>one minute's time. Cool.

00:56:07.375 --> 00:56:09.295
<v Speaker 0>I am learning loads.

00:56:09.295 --> 00:56:10.015
<v Speaker 0>Thank you.

00:56:10.735 --> 00:56:13.295
<v Speaker 1>No worries. Learning a lot I think what

00:56:13.295 --> 00:56:14.575
<v Speaker 0>I like here is I've I've learned a

00:56:14.575 --> 00:56:15.935
<v Speaker 0>lot of things that I really need to

00:56:15.935 --> 00:56:18.575
<v Speaker 0>start checking on my production clusters. Little subtle

00:56:18.575 --> 00:56:20.895
<v Speaker 0>changes. And I think because I use Kubitiam,

00:56:20.895 --> 00:56:23.430
<v Speaker 0>I'm probably okay. But it's still nice to

00:56:23.430 --> 00:56:25.109
<v Speaker 0>know which things there need to be checked

00:56:25.109 --> 00:56:26.390
<v Speaker 0>on a regular basis.

00:56:26.630 --> 00:56:28.790
<v Speaker 1>It's yeah. The the the port ones I

00:56:28.790 --> 00:56:29.430
<v Speaker 1>said,

00:56:29.670 --> 00:56:31.750
<v Speaker 1>for all the mainstream investors, you shouldn't have

00:56:31.750 --> 00:56:32.390
<v Speaker 1>a problem.

00:56:32.710 --> 00:56:34.710
<v Speaker 1>RBAC rights is a different story.

00:56:35.535 --> 00:56:36.494
<v Speaker 1>The

00:56:36.494 --> 00:56:38.494
<v Speaker 1>thing that kinda gets me about about RBAC

00:56:38.494 --> 00:56:39.135
<v Speaker 1>is

00:56:39.295 --> 00:56:41.855
<v Speaker 1>it's so easy for some install programs. It's

00:56:41.855 --> 00:56:43.295
<v Speaker 1>like what you said. It's so easy for

00:56:43.295 --> 00:56:44.735
<v Speaker 1>some installer to say,

00:56:45.055 --> 00:56:45.935
<v Speaker 1>just do this.

00:56:46.335 --> 00:56:48.174
<v Speaker 1>And I've seen installers that do things like

00:56:48.174 --> 00:56:50.520
<v Speaker 1>give the default service account in the default

00:56:50.520 --> 00:56:52.040
<v Speaker 1>namespace cluster admin.

00:56:52.600 --> 00:56:53.960
<v Speaker 1>I was like, you might you wouldn't unless

00:56:53.960 --> 00:56:56.040
<v Speaker 1>you read the manifest, you'll not notice. Yeah.

00:56:56.040 --> 00:56:57.400
<v Speaker 1>And then forevermore,

00:56:57.400 --> 00:56:59.080
<v Speaker 1>every single pod that ever gets deployed into

00:56:59.080 --> 00:57:00.600
<v Speaker 1>that namespace gets cluster admin,

00:57:01.080 --> 00:57:02.520
<v Speaker 1>which is, of course, it's gonna hit you

00:57:02.520 --> 00:57:03.960
<v Speaker 1>sooner or later. It's just how long.

00:57:05.995 --> 00:57:08.075
<v Speaker 0>Nice. Alright. What what do you wanna do

00:57:08.075 --> 00:57:09.755
<v Speaker 0>next? What else is this one? We've done

00:57:09.755 --> 00:57:11.035
<v Speaker 0>a lot of server stuff. You said there's

00:57:11.035 --> 00:57:12.635
<v Speaker 0>other stuff. Yeah. Let let let's do a

00:57:12.635 --> 00:57:14.075
<v Speaker 1>let's do a kind of a a privilege

00:57:14.075 --> 00:57:15.755
<v Speaker 1>escalation one. Should

00:57:16.315 --> 00:57:19.435
<v Speaker 1>we do to create pods easy? That one's

00:57:18.720 --> 00:57:20.960
<v Speaker 1>that one's alright. So SSH to create pods

00:57:20.960 --> 00:57:21.600
<v Speaker 1>easy.

00:57:21.840 --> 00:57:23.520
<v Speaker 0>What's wrong with create pods hard?

00:57:24.160 --> 00:57:26.320
<v Speaker 1>What is wrong with pods hard is harder.

00:57:26.320 --> 00:57:27.760
<v Speaker 1>And we we can do pods hard but

00:57:27.760 --> 00:57:28.880
<v Speaker 1>we're gonna have to do fun stuff with

00:57:28.880 --> 00:57:30.000
<v Speaker 1>like reverse shells and things.

00:57:30.735 --> 00:57:32.415
<v Speaker 0>Let's start with easy mode and then if

00:57:32.415 --> 00:57:33.455
<v Speaker 0>we have the Yeah. I was gonna say

00:57:33.455 --> 00:57:34.575
<v Speaker 1>we'll start with easy and we'll see how

00:57:34.575 --> 00:57:36.095
<v Speaker 1>we go on because because pod's hard, it

00:57:36.095 --> 00:57:37.455
<v Speaker 1>like it gets a bit harder.

00:57:39.455 --> 00:57:41.215
<v Speaker 0>Yeah. I think this is just Like, you

00:57:41.215 --> 00:57:42.895
<v Speaker 0>know, there's there's so many here. Right? We're

00:57:42.895 --> 00:57:44.415
<v Speaker 0>not gonna do all of these. Yeah. No.

00:57:44.415 --> 00:57:46.020
<v Speaker 1>We're not we're not all of them. And

00:57:46.020 --> 00:57:48.820
<v Speaker 1>and definitely, if if anyone's, like, watching and

00:57:48.820 --> 00:57:51.060
<v Speaker 1>thinking, hey. They haven't covered x.

00:57:51.860 --> 00:57:53.540
<v Speaker 1>Issues or PRs

00:57:53.700 --> 00:57:55.060
<v Speaker 1>are always extremely

00:57:55.060 --> 00:57:55.700
<v Speaker 1>welcome.

00:57:57.380 --> 00:58:00.865
<v Speaker 0>Is the automation to build the vulnerable images

00:58:00.865 --> 00:58:03.424
<v Speaker 0>all here for people to piggyback on? Yeah.

00:58:03.424 --> 00:58:04.865
<v Speaker 1>So the the the images are all in

00:58:04.865 --> 00:58:06.305
<v Speaker 1>the if you wanted to create one, it

00:58:06.305 --> 00:58:07.424
<v Speaker 1>would just be I would just look at

00:58:07.424 --> 00:58:08.465
<v Speaker 1>one of the existing

00:58:09.424 --> 00:58:11.265
<v Speaker 1>playbooks. They're all fairly straightforward.

00:58:13.070 --> 00:58:14.670
<v Speaker 1>So these are these are manifests where you've

00:58:14.750 --> 00:58:16.510
<v Speaker 1>you like, pick, like, the XCD no auth

00:58:17.950 --> 00:58:19.230
<v Speaker 1>yeah. These are the tasks.

00:58:19.710 --> 00:58:21.470
<v Speaker 1>If you just pick one of the playbooks,

00:58:21.470 --> 00:58:23.310
<v Speaker 1>the XCD no auth one or something Yeah.

00:58:23.310 --> 00:58:25.470
<v Speaker 1>Okay. Yeah. They they you can be able

00:58:25.470 --> 00:58:26.030
<v Speaker 1>see it's not.

00:58:28.835 --> 00:58:30.755
<v Speaker 1>So all we really do is say, right,

00:58:30.755 --> 00:58:32.835
<v Speaker 1>start up a a kind cluster, and then

00:58:32.835 --> 00:58:34.195
<v Speaker 1>we just have a little task to say,

00:58:34.595 --> 00:58:36.035
<v Speaker 1>you know, in this, give it a one

00:58:36.355 --> 00:58:37.555
<v Speaker 1>you know, I'm gonna do a a custom

00:58:37.555 --> 00:58:39.395
<v Speaker 1>client cluster, and I've got a cluster you

00:58:39.395 --> 00:58:41.075
<v Speaker 1>see there's a cluster config there? This is

00:58:41.075 --> 00:58:43.250
<v Speaker 1>etcd no auth. Mhmm. So what kind lets

00:58:43.250 --> 00:58:44.690
<v Speaker 1>you do is it lets you

00:58:45.730 --> 00:58:47.890
<v Speaker 1>it lets you customize

00:58:47.890 --> 00:58:50.369
<v Speaker 1>how QBADM is installed. So for example, you

00:58:50.369 --> 00:58:51.890
<v Speaker 1>can change a port number, you can turn

00:58:51.890 --> 00:58:54.450
<v Speaker 1>off authentication, you can change an API server

00:58:54.450 --> 00:58:55.730
<v Speaker 1>flag to do something it shouldn't.

00:58:56.515 --> 00:58:57.635
<v Speaker 1>And k that's one of the things I

00:58:57.635 --> 00:58:58.835
<v Speaker 1>really like about kind is you can just

00:58:58.835 --> 00:59:00.675
<v Speaker 1>write these configs. They're a little bit funny

00:59:00.675 --> 00:59:01.715
<v Speaker 1>to get used to, but once you're used

00:59:01.715 --> 00:59:03.155
<v Speaker 1>to them, they're they're really easy.

00:59:04.595 --> 00:59:06.755
<v Speaker 0>Awesome. Yeah. Definitely. I'm gonna play with that.

00:59:06.755 --> 00:59:07.955
<v Speaker 0>One of the things I've wanted to do

00:59:07.955 --> 00:59:10.275
<v Speaker 0>with, like, the clustered stuff is, like, provide

00:59:10.275 --> 00:59:12.430
<v Speaker 0>reproducible ones that people can do and try

00:59:12.430 --> 00:59:14.030
<v Speaker 0>and fix on their own time as well.

00:59:14.270 --> 00:59:16.030
<v Speaker 0>And maybe doing that through kind with this

00:59:16.030 --> 00:59:17.710
<v Speaker 0>config approach would be a a decent way

00:59:17.710 --> 00:59:18.430
<v Speaker 0>to do that.

00:59:18.830 --> 00:59:21.390
<v Speaker 1>Yeah. For, like, for, like, Kubernetes level stuff,

00:59:21.390 --> 00:59:22.830
<v Speaker 1>I think that that would that would work.

00:59:22.830 --> 00:59:24.030
<v Speaker 1>Mean, obviously, if you're doing that low level

00:59:24.030 --> 00:59:25.150
<v Speaker 1>things kind,

00:59:25.230 --> 00:59:27.265
<v Speaker 1>the one place that doesn't shine. But it

00:59:27.265 --> 00:59:29.265
<v Speaker 1>it absolutely for for for things like this,

00:59:29.265 --> 00:59:31.185
<v Speaker 1>you know, you could you could get clustered

00:59:31.905 --> 00:59:33.585
<v Speaker 1>kind of broken clusters quite easily, I think,

00:59:33.585 --> 00:59:35.185
<v Speaker 1>for anything like OS level or not.

00:59:35.745 --> 00:59:37.585
<v Speaker 0>Yeah. The people that modify the kernel and

00:59:37.585 --> 00:59:39.320
<v Speaker 0>the directory and the proxy directory. I I

00:59:39.320 --> 00:59:40.520
<v Speaker 0>don't like those people, and I will not

00:59:40.520 --> 00:59:43.160
<v Speaker 0>build reproducible versions of that because it's Yeah.

00:59:44.200 --> 00:59:46.440
<v Speaker 1>I guess I guess there's I I've always

00:59:46.440 --> 00:59:48.040
<v Speaker 1>wanted to do more with, like

00:59:49.000 --> 00:59:50.520
<v Speaker 1>you know, because kind is great to a

00:59:50.520 --> 00:59:52.440
<v Speaker 1>point, and then for anything like Kubernetes level,

00:59:52.625 --> 00:59:53.825
<v Speaker 1>fine. But if you wanna do low level

00:59:53.825 --> 00:59:55.665
<v Speaker 1>stuff, I know there's there's good automation for,

00:59:55.665 --> 00:59:57.505
<v Speaker 1>like, building raw machines

00:59:57.665 --> 00:59:59.105
<v Speaker 1>Yeah. And doing that. You that's what you'd

00:59:59.105 --> 01:00:00.145
<v Speaker 1>need to do that, I guess.

01:00:03.825 --> 01:00:05.505
<v Speaker 0>So this one's doing a bit more, it

01:00:05.505 --> 01:00:07.530
<v Speaker 0>looks like. Yeah. So this one, what this

01:00:07.530 --> 01:00:09.450
<v Speaker 1>is doing is is so the idea of

01:00:09.450 --> 01:00:12.970
<v Speaker 1>these SSH to something ones is to simulate

01:00:12.970 --> 01:00:14.570
<v Speaker 1>an idea that you've got

01:00:14.970 --> 01:00:16.410
<v Speaker 1>you're a legitimate user,

01:00:17.290 --> 01:00:19.130
<v Speaker 1>and you've got some level of access to

01:00:19.130 --> 01:00:19.610
<v Speaker 1>the cluster.

01:00:20.225 --> 01:00:22.225
<v Speaker 1>And how and and so it's so it's

01:00:22.225 --> 01:00:24.225
<v Speaker 1>it's this a lot of these are basically

01:00:24.545 --> 01:00:26.465
<v Speaker 1>things that are in our back. I'm like,

01:00:26.465 --> 01:00:27.665
<v Speaker 1>what can I do? So if I've got

01:00:27.665 --> 01:00:29.585
<v Speaker 1>create pod, what can I do? If I've

01:00:29.585 --> 01:00:31.825
<v Speaker 1>got the ability to read pod logs, what

01:00:31.825 --> 01:00:33.099
<v Speaker 1>can I do? You know, all that sort

01:00:33.099 --> 01:00:34.140
<v Speaker 1>of thing. And it's how easy would it

01:00:34.140 --> 01:00:35.980
<v Speaker 1>be for someone who has that access to

01:00:35.980 --> 01:00:38.300
<v Speaker 1>to go and get, you know, cluster admin.

01:00:39.980 --> 01:00:40.620
<v Speaker 1>So

01:00:40.940 --> 01:00:41.980
<v Speaker 1>what we need to do with this one

01:00:42.060 --> 01:00:43.660
<v Speaker 1>I'm gonna get my setup thing up for

01:00:43.660 --> 01:00:46.220
<v Speaker 1>this, actually. We need to SSH into

01:00:46.775 --> 01:00:48.775
<v Speaker 1>the place that we have the

01:00:49.495 --> 01:00:52.935
<v Speaker 1>so it's SSH minus p 32,001,

01:00:55.095 --> 01:00:57.175
<v Speaker 1>and it's SSH user

01:00:57.495 --> 01:00:59.175
<v Speaker 1>at and then just the IP address.

01:01:00.930 --> 01:01:03.650
<v Speaker 1>All one word on the ssh user. No.

01:01:03.650 --> 01:01:04.930
<v Speaker 0>I passed the dash l so we should

01:01:04.930 --> 01:01:05.650
<v Speaker 0>be okay.

01:01:06.130 --> 01:01:08.210
<v Speaker 1>Oh, that's the the user's ssh user all

01:01:08.210 --> 01:01:10.690
<v Speaker 1>one word? Not ssh dash user?

01:01:11.730 --> 01:01:13.570
<v Speaker 1>Cool. I should do it. And password's the

01:01:13.570 --> 01:01:13.730
<v Speaker 1>same.

01:01:16.805 --> 01:01:17.925
<v Speaker 1>So

01:01:18.805 --> 01:01:20.485
<v Speaker 1>we're now what I've done is I've given

01:01:20.565 --> 01:01:22.645
<v Speaker 1>we've given this service account in this pod

01:01:22.645 --> 01:01:24.165
<v Speaker 1>a level of access.

01:01:25.925 --> 01:01:26.965
<v Speaker 1>If you do,

01:01:27.765 --> 01:01:29.605
<v Speaker 1>like, a command, it should it should be

01:01:29.605 --> 01:01:30.885
<v Speaker 1>able to talk to the API server.

01:01:35.760 --> 01:01:38.000
<v Speaker 1>But you don't have right to get nodes.

01:01:40.079 --> 01:01:41.760
<v Speaker 1>You do have right to get pods. I

01:01:41.760 --> 01:01:43.760
<v Speaker 0>have some access. Yeah. So you have some

01:01:43.760 --> 01:01:46.244
<v Speaker 1>access, but not all the access, which is

01:01:46.484 --> 01:01:48.085
<v Speaker 1>if you think about it, that's a it's

01:01:48.085 --> 01:01:49.365
<v Speaker 1>more likely to be

01:01:49.765 --> 01:01:50.565
<v Speaker 1>what,

01:01:50.644 --> 01:01:52.724
<v Speaker 1>you know, somebody who's trying to get extra

01:01:52.724 --> 01:01:53.605
<v Speaker 1>access can do.

01:01:54.805 --> 01:01:55.924
<v Speaker 1>So if you can see what we've got

01:01:55.924 --> 01:01:56.885
<v Speaker 1>here, we've got

01:01:57.285 --> 01:01:59.444
<v Speaker 1>right to create pod exec, which is a

01:01:59.444 --> 01:02:01.619
<v Speaker 1>subresource of pod, and we can get and

01:02:01.619 --> 01:02:02.980
<v Speaker 1>list pod logs,

01:02:03.859 --> 01:02:06.099
<v Speaker 1>and then we can get all those new

01:02:06.099 --> 01:02:07.380
<v Speaker 1>things to pods. But that's all we can

01:02:07.380 --> 01:02:08.579
<v Speaker 1>do. Right? We can't get to nodes. We

01:02:08.579 --> 01:02:10.180
<v Speaker 1>can't get to anything else.

01:02:10.500 --> 01:02:12.500
<v Speaker 1>So the question is how would we get

01:02:12.660 --> 01:02:13.460
<v Speaker 1>access to

01:02:14.415 --> 01:02:16.175
<v Speaker 1>to to access the underlying

01:02:16.735 --> 01:02:18.175
<v Speaker 1>to the underlying node?

01:02:18.335 --> 01:02:20.255
<v Speaker 1>And and so there's no pod security policies

01:02:20.255 --> 01:02:21.455
<v Speaker 1>on these clusters,

01:02:21.535 --> 01:02:23.695
<v Speaker 1>which means that that, technically, if we can

01:02:23.695 --> 01:02:25.535
<v Speaker 1>create pods, we can do bad stuff.

01:02:26.015 --> 01:02:27.215
<v Speaker 1>So there's a couple of ways we can

01:02:27.215 --> 01:02:27.535
<v Speaker 1>do this,

01:02:28.320 --> 01:02:30.960
<v Speaker 1>but let me get the where are we?

01:02:32.640 --> 01:02:34.640
<v Speaker 1>The easiest way. So this is the easiest

01:02:34.640 --> 01:02:36.160
<v Speaker 1>way. It's kind of a neat one. If

01:02:36.160 --> 01:02:38.800
<v Speaker 1>in the in the root of that machine

01:02:38.960 --> 01:02:40.320
<v Speaker 1>root of that

01:02:41.125 --> 01:02:42.645
<v Speaker 1>pod you're in there, there should be a

01:02:42.645 --> 01:02:44.645
<v Speaker 1>manifest called key dumper pod.

01:02:45.925 --> 01:02:47.765
<v Speaker 1>I think it's the root directory, if I

01:02:47.765 --> 01:02:48.645
<v Speaker 1>remember rightly.

01:02:50.885 --> 01:02:53.205
<v Speaker 1>Key dumper pod. There it is. Yeah. So

01:02:53.205 --> 01:02:54.885
<v Speaker 1>if we count that out or LSR or

01:02:54.885 --> 01:02:55.205
<v Speaker 1>whatever,

01:02:56.440 --> 01:02:57.320
<v Speaker 1>what we'll see is

01:02:57.960 --> 01:03:00.120
<v Speaker 1>this is just a neat way of demonstrating

01:03:00.600 --> 01:03:02.840
<v Speaker 1>if you give someone create pod, what can

01:03:02.840 --> 01:03:03.400
<v Speaker 1>they do?

01:03:05.320 --> 01:03:06.760
<v Speaker 1>And we'll see what that what that does

01:03:06.760 --> 01:03:08.600
<v Speaker 1>is it it's just gonna do like, give

01:03:08.600 --> 01:03:10.120
<v Speaker 1>me a pod within BusyBox,

01:03:10.280 --> 01:03:11.080
<v Speaker 1>mount the

01:03:11.744 --> 01:03:14.625
<v Speaker 1>Etsy Kubernetes PKI directory in, and then just

01:03:14.625 --> 01:03:16.385
<v Speaker 1>cap the key. Yep.

01:03:17.265 --> 01:03:18.865
<v Speaker 1>So if we create that

01:03:19.184 --> 01:03:20.625
<v Speaker 1>that pod on the cluster,

01:03:28.090 --> 01:03:29.210
<v Speaker 1>It should.

01:03:29.370 --> 01:03:31.130
<v Speaker 1>Fun part is it's going to say oh,

01:03:31.130 --> 01:03:32.330
<v Speaker 1>what else do saw? It's say create create

01:03:32.330 --> 01:03:33.850
<v Speaker 1>create create initially then.

01:03:34.170 --> 01:03:35.690
<v Speaker 1>Once it's done it, I think it'll go

01:03:35.690 --> 01:03:37.450
<v Speaker 1>to crash back off loop. We don't actually

01:03:37.450 --> 01:03:37.690
<v Speaker 1>care.

01:03:39.395 --> 01:03:40.595
<v Speaker 0>There we go. Hey.

01:03:41.475 --> 01:03:43.555
<v Speaker 1>And there's your key. Nice and easy.

01:03:44.595 --> 01:03:46.275
<v Speaker 1>But if you anyone

01:03:46.515 --> 01:03:48.275
<v Speaker 1>so think about it. If you give anyone

01:03:49.155 --> 01:03:51.315
<v Speaker 1>create pod on your cluster

01:03:51.869 --> 01:03:53.630
<v Speaker 1>and you don't have a PSP

01:03:54.029 --> 01:03:57.230
<v Speaker 1>that stops them from mounting host volumes,

01:03:57.950 --> 01:03:59.550
<v Speaker 1>there's nothing stopping doing that.

01:04:00.990 --> 01:04:04.589
<v Speaker 1>Yeah. Because every worker everything that runs, like,

01:04:04.589 --> 01:04:06.109
<v Speaker 0>Kiplit has that

01:04:06.485 --> 01:04:08.325
<v Speaker 0>CA key available. Is that right?

01:04:08.725 --> 01:04:11.125
<v Speaker 1>Yeah. Well, everything every control plane node. Every

01:04:11.125 --> 01:04:13.205
<v Speaker 0>control plane node. Yeah. So the this is

01:04:13.205 --> 01:04:14.485
<v Speaker 1>actually a fun one, and I and I

01:04:14.485 --> 01:04:16.245
<v Speaker 1>was I was actually discussing on the Kubernetes

01:04:16.245 --> 01:04:18.005
<v Speaker 1>Slack today is

01:04:18.165 --> 01:04:19.205
<v Speaker 1>what's the security

01:04:20.060 --> 01:04:22.460
<v Speaker 1>trade off of running the kubelet on the

01:04:22.460 --> 01:04:23.580
<v Speaker 1>control plane nodes?

01:04:24.619 --> 01:04:26.540
<v Speaker 1>So kubelet m by default will ship will

01:04:26.540 --> 01:04:28.060
<v Speaker 1>run all will run the kubelet on the

01:04:28.060 --> 01:04:29.500
<v Speaker 1>control plane nodes, and will run the API

01:04:29.500 --> 01:04:31.580
<v Speaker 1>server inside a pod. But it means you

01:04:31.580 --> 01:04:33.500
<v Speaker 1>can get to that node through the Kubernetes

01:04:33.500 --> 01:04:33.900
<v Speaker 1>API.

01:04:37.454 --> 01:04:38.494
<v Speaker 1>And if you can get to the node

01:04:38.494 --> 01:04:39.775
<v Speaker 1>through the Kubernetes API,

01:04:39.855 --> 01:04:41.615
<v Speaker 1>then you can do this.

01:04:41.935 --> 01:04:44.255
<v Speaker 1>And there's obviously, there's tolerant there's tents. People

01:04:44.255 --> 01:04:46.335
<v Speaker 1>always taint their control plane nodes, but tents

01:04:46.335 --> 01:04:48.495
<v Speaker 1>are not security control. Yeah. They're options.

01:04:48.734 --> 01:04:50.570
<v Speaker 1>Yeah. You can just tolerate any taint. So

01:04:50.570 --> 01:04:52.570
<v Speaker 1>whenever I'm doing this, I just put tolerate

01:04:52.570 --> 01:04:53.370
<v Speaker 1>everything.

01:04:53.450 --> 01:04:55.290
<v Speaker 1>Tolerate all the things I don't care about

01:04:55.290 --> 01:04:57.530
<v Speaker 1>taint. So anytime anyone

01:04:57.770 --> 01:04:59.770
<v Speaker 1>is running their control plane components

01:04:59.850 --> 01:05:00.890
<v Speaker 1>in pods,

01:05:02.010 --> 01:05:04.010
<v Speaker 1>if you have any users who can create

01:05:04.010 --> 01:05:06.865
<v Speaker 1>pods and can mount host volumes,

01:05:07.105 --> 01:05:09.424
<v Speaker 1>then that's possible. Is it possible to tell

01:05:09.424 --> 01:05:11.905
<v Speaker 0>the kubelet to only run static manifests and

01:05:11.905 --> 01:05:13.825
<v Speaker 0>never accept other workloads?

01:05:14.145 --> 01:05:15.665
<v Speaker 1>I don't

01:05:15.984 --> 01:05:18.065
<v Speaker 1>think so. Good question, though. I I don't

01:05:18.065 --> 01:05:20.240
<v Speaker 1>think so. That would be a cool PR.

01:05:20.240 --> 01:05:22.640
<v Speaker 0>I'm sure someone Yeah. We get interested. Yeah.

01:05:22.960 --> 01:05:23.680
<v Speaker 1>It's

01:05:24.080 --> 01:05:26.240
<v Speaker 1>it's kinda like one of those things where

01:05:26.320 --> 01:05:28.000
<v Speaker 1>like, if think about it, you need things

01:05:28.000 --> 01:05:28.640
<v Speaker 1>like

01:05:29.200 --> 01:05:30.080
<v Speaker 1>CNI

01:05:30.080 --> 01:05:31.839
<v Speaker 1>and probably logging solutions

01:05:31.920 --> 01:05:32.800
<v Speaker 0>Yeah. And everything else.

01:05:33.665 --> 01:05:35.505
<v Speaker 1>And it's whether you want to go down

01:05:35.505 --> 01:05:36.865
<v Speaker 1>that line of,

01:05:37.905 --> 01:05:40.464
<v Speaker 1>like, the the management overhead of of doing

01:05:40.464 --> 01:05:43.025
<v Speaker 1>that yourself with, like, system d or wherever

01:05:43.025 --> 01:05:44.705
<v Speaker 1>else to run these components on the control

01:05:44.705 --> 01:05:46.145
<v Speaker 1>plane. So it's it's one of those areas

01:05:46.145 --> 01:05:47.505
<v Speaker 1>where I think there's definitely a trade off.

01:05:48.050 --> 01:05:49.490
<v Speaker 1>You know, there's ease of use on the

01:05:49.490 --> 01:05:51.570
<v Speaker 1>one hand, and there's, like, you if you

01:05:51.570 --> 01:05:53.410
<v Speaker 1>do it this way, you have it depends

01:05:53.410 --> 01:05:54.690
<v Speaker 1>on who your user base is. Right? If

01:05:54.690 --> 01:05:56.530
<v Speaker 1>you trust all your users or maybe you

01:05:56.530 --> 01:05:59.090
<v Speaker 1>deploy everything to your clusters via CICD and

01:05:59.090 --> 01:06:01.434
<v Speaker 1>there are no interactive users, this may not

01:06:01.434 --> 01:06:03.115
<v Speaker 1>be that bad because you can have a

01:06:03.115 --> 01:06:05.434
<v Speaker 1>review process in your CICD pipeline that says,

01:06:05.434 --> 01:06:07.994
<v Speaker 1>hey. Post volumes. I don't think so.

01:06:08.395 --> 01:06:10.395
<v Speaker 0>I I guess you're probably more likely to

01:06:10.395 --> 01:06:11.915
<v Speaker 0>have some sort of a measure controller that

01:06:11.915 --> 01:06:13.994
<v Speaker 0>just that wouldn't allow this anyway. Think that

01:06:13.994 --> 01:06:15.674
<v Speaker 0>would be like, something like Kivernal running in

01:06:15.674 --> 01:06:18.450
<v Speaker 0>your cluster would automatically stop. Yeah. Yeah. Kivernal

01:06:18.450 --> 01:06:19.730
<v Speaker 1>and and are

01:06:20.850 --> 01:06:22.450
<v Speaker 1>probably gonna be the two ways people will

01:06:22.450 --> 01:06:24.450
<v Speaker 1>stop this going forward.

01:06:24.610 --> 01:06:26.370
<v Speaker 1>One thing I I kinda noticed though is

01:06:26.370 --> 01:06:28.130
<v Speaker 1>you need to be

01:06:29.015 --> 01:06:30.535
<v Speaker 1>you need to be whitelisting

01:06:30.535 --> 01:06:33.735
<v Speaker 1>acceptable volume types, not blacklisting

01:06:33.735 --> 01:06:34.535
<v Speaker 1>unacceptable

01:06:34.535 --> 01:06:35.495
<v Speaker 1>volume types.

01:06:35.655 --> 01:06:37.255
<v Speaker 1>And the reason is that new volume types

01:06:37.255 --> 01:06:38.055
<v Speaker 1>come along.

01:06:39.175 --> 01:06:40.295
<v Speaker 1>So you might get something like a new

01:06:40.295 --> 01:06:41.655
<v Speaker 1>volume type that comes along and allows you

01:06:41.655 --> 01:06:44.450
<v Speaker 1>to do this, like ephemeral volumes or which

01:06:44.450 --> 01:06:46.849
<v Speaker 1>are coming along. And ephemeral volumes

01:06:47.650 --> 01:06:49.010
<v Speaker 1>so if you say I'm gonna block host

01:06:49.010 --> 01:06:51.089
<v Speaker 1>volume, host path volumes, and then ephemeral volumes

01:06:51.089 --> 01:06:53.010
<v Speaker 1>come along, if you're using a blacklist and

01:06:53.010 --> 01:06:53.970
<v Speaker 1>you don't keep up to date on the

01:06:53.970 --> 01:06:55.329
<v Speaker 1>fact that ephemeral volumes just came along,

01:06:55.955 --> 01:06:58.355
<v Speaker 1>you won't know that and that may allow

01:06:58.355 --> 01:07:01.155
<v Speaker 1>a bypass. Yeah. So, yeah. Tricky.

01:07:02.515 --> 01:07:04.355
<v Speaker 0>Yeah. I don't think I like security in

01:07:04.355 --> 01:07:06.115
<v Speaker 0>the Kubernetes landscape anymore.

01:07:07.395 --> 01:07:09.955
<v Speaker 1>It's it a lot of it comes comes

01:07:09.955 --> 01:07:11.395
<v Speaker 1>down to, like, what you're trying to do.

01:07:12.000 --> 01:07:13.280
<v Speaker 1>I I've seen

01:07:13.760 --> 01:07:14.960
<v Speaker 1>and and there is quite a lot of

01:07:14.960 --> 01:07:16.240
<v Speaker 1>push for this at the moment looking at

01:07:16.240 --> 01:07:18.960
<v Speaker 1>multitenancy and especially, like, hard multitenancy.

01:07:19.600 --> 01:07:21.920
<v Speaker 1>I would be really super hesitant to say

01:07:21.920 --> 01:07:23.600
<v Speaker 1>I could do hard multitenancy in the Kubernetes

01:07:23.600 --> 01:07:26.535
<v Speaker 1>cluster. I I'm sure that it's possible,

01:07:26.775 --> 01:07:28.775
<v Speaker 1>but I'm also sure it's really difficult to

01:07:28.775 --> 01:07:29.495
<v Speaker 1>get right,

01:07:30.135 --> 01:07:31.975
<v Speaker 1>and you have to be super careful.

01:07:33.415 --> 01:07:35.415
<v Speaker 0>Yeah. I I I think I agree. I

01:07:35.415 --> 01:07:36.775
<v Speaker 0>guess I I I've never had to worry

01:07:36.775 --> 01:07:38.480
<v Speaker 0>about multi 10 say, and I Kubernetes cluster

01:07:38.480 --> 01:07:40.000
<v Speaker 0>as well. I I don't feel like I

01:07:40.000 --> 01:07:42.160
<v Speaker 0>have any experience there to comment, but, yeah,

01:07:42.160 --> 01:07:43.359
<v Speaker 0>I think I'm on your side of the

01:07:43.359 --> 01:07:45.119
<v Speaker 0>fence there. Just even thinking about that and

01:07:45.119 --> 01:07:46.800
<v Speaker 0>keeping us secure seems like a bit of

01:07:46.800 --> 01:07:47.680
<v Speaker 0>a main field.

01:07:47.920 --> 01:07:48.480
<v Speaker 1>Well,

01:07:48.720 --> 01:07:50.240
<v Speaker 1>you need to get your R back completely

01:07:50.240 --> 01:07:52.704
<v Speaker 1>right. You need to get your pod security

01:07:52.704 --> 01:07:54.625
<v Speaker 1>policies, what you would have used as it's

01:07:54.625 --> 01:07:56.225
<v Speaker 1>going away either the new

01:07:56.545 --> 01:07:57.665
<v Speaker 1>I haven't given the name yet, I don't

01:07:57.665 --> 01:07:59.265
<v Speaker 1>think. Hierarchical The new replacement.

01:07:59.825 --> 01:08:02.065
<v Speaker 1>Well, yeah. I I think something like that

01:08:02.065 --> 01:08:06.030
<v Speaker 1>where either hierarchical namespaces or cluster API. If

01:08:06.030 --> 01:08:08.190
<v Speaker 1>I was going to try and design a

01:08:08.990 --> 01:08:09.870
<v Speaker 1>Kubernetes

01:08:09.950 --> 01:08:12.510
<v Speaker 1>multi tenancy thing, I would probably more inclined

01:08:12.510 --> 01:08:14.270
<v Speaker 1>to try and do it via cluster API

01:08:14.270 --> 01:08:16.830
<v Speaker 1>where you're giving your tenants a cluster each,

01:08:16.830 --> 01:08:18.030
<v Speaker 1>not a namespace each.

01:08:18.615 --> 01:08:21.095
<v Speaker 0>There is actually a cluster API, a nested

01:08:21.095 --> 01:08:23.734
<v Speaker 0>provider, which runs Kubernetes clusters on Kubernetes.

01:08:24.295 --> 01:08:26.535
<v Speaker 0>Maybe that's an option people could go for

01:08:26.535 --> 01:08:27.734
<v Speaker 0>more hard

01:08:28.135 --> 01:08:29.175
<v Speaker 0>multi tenancy.

01:08:29.895 --> 01:08:32.215
<v Speaker 1>Yeah. That or or if you can

01:08:33.300 --> 01:08:34.660
<v Speaker 1>don't think I actually quite like the idea

01:08:34.660 --> 01:08:38.020
<v Speaker 1>of is clusters where the nodes run, like,

01:08:38.020 --> 01:08:40.260
<v Speaker 1>Firecracker or something or, you know, some other,

01:08:40.260 --> 01:08:42.580
<v Speaker 1>like, serverless style container where there's no real

01:08:42.580 --> 01:08:45.540
<v Speaker 1>node to get to. And, actually, a fair

01:08:45.540 --> 01:08:47.140
<v Speaker 1>point to make and it's probably worth mentioning

01:08:47.140 --> 01:08:47.700
<v Speaker 1>for these is

01:08:48.314 --> 01:08:50.234
<v Speaker 1>things like this obviously aren't a problem in

01:08:50.234 --> 01:08:52.955
<v Speaker 1>managed Kubernetes because in managed Kubernetes, you have

01:08:52.955 --> 01:08:54.715
<v Speaker 1>no access to the control plane. So if

01:08:54.715 --> 01:08:57.354
<v Speaker 1>you're running AKS, GKE, EKS, there's no key

01:08:57.354 --> 01:08:58.715
<v Speaker 1>to go and get. There are other problems

01:08:58.715 --> 01:09:00.395
<v Speaker 1>and there are other things to think about,

01:09:00.475 --> 01:09:01.435
<v Speaker 1>but this isn't one of them.

01:09:02.310 --> 01:09:05.270
<v Speaker 0>Yeah. Definitely. I do like the firecracker approach

01:09:05.270 --> 01:09:07.029
<v Speaker 0>as well. I actually have an episode with

01:09:07.029 --> 01:09:08.869
<v Speaker 0>the people that we've worked coming up and

01:09:08.869 --> 01:09:11.349
<v Speaker 0>looking at their fire cube project which is

01:09:11.349 --> 01:09:12.149
<v Speaker 0>Yeah. Firecracker

01:09:13.875 --> 01:09:15.635
<v Speaker 1>I Yeah. But I think that that kind

01:09:15.635 --> 01:09:18.594
<v Speaker 1>of the ultimate container runtime approach where I

01:09:18.594 --> 01:09:20.434
<v Speaker 1>mean, Docker's great. I love Docker.

01:09:20.594 --> 01:09:22.354
<v Speaker 1>But it's it's got what I always call

01:09:22.354 --> 01:09:24.994
<v Speaker 1>a flexible security model, and it's flexible. And

01:09:24.994 --> 01:09:26.194
<v Speaker 1>if you want to and you have the

01:09:26.194 --> 01:09:27.394
<v Speaker 1>access, you can just turn it all off.

01:09:27.909 --> 01:09:30.309
<v Speaker 1>You know, privileged containers are a thing. Yes.

01:09:31.269 --> 01:09:32.949
<v Speaker 1>You know? So so that's the problem with

01:09:32.949 --> 01:09:35.189
<v Speaker 1>flexibility. It's really cool, but it can be

01:09:35.189 --> 01:09:37.349
<v Speaker 1>removed if someone has the rights. Yeah.

01:09:37.909 --> 01:09:39.750
<v Speaker 0>I think there's there's other run times out

01:09:39.750 --> 01:09:42.015
<v Speaker 0>there that are maybe targeting the more security

01:09:42.015 --> 01:09:44.654
<v Speaker 0>conscious clusters. Cata containers is the other one

01:09:44.654 --> 01:09:45.935
<v Speaker 0>that kinda pops in the head. I think

01:09:45.935 --> 01:09:46.814
<v Speaker 0>they're And

01:09:47.215 --> 01:09:49.774
<v Speaker 1>gVisor as well. And gVisor. Ones that yeah.

01:09:49.774 --> 01:09:51.774
<v Speaker 1>Those are are other ways of achieving. So

01:09:51.774 --> 01:09:53.710
<v Speaker 1>things like that, I think, if I was

01:09:53.710 --> 01:09:55.630
<v Speaker 1>going to someone said to me, you're engineering

01:09:55.630 --> 01:09:56.750
<v Speaker 1>you're

01:09:56.750 --> 01:09:58.989
<v Speaker 1>engineering multitenancy clusters, and I wasn't able to

01:09:58.989 --> 01:10:00.909
<v Speaker 1>run away, I I would be looking at

01:10:00.909 --> 01:10:02.349
<v Speaker 1>at at something like that.

01:10:03.550 --> 01:10:04.349
<v Speaker 0>That's cool.

01:10:04.989 --> 01:10:07.230
<v Speaker 0>That's the kind of segue in conversation there.

01:10:07.230 --> 01:10:09.685
<v Speaker 0>I like that. Yeah. Why don't we we

01:10:09.685 --> 01:10:11.045
<v Speaker 0>compromise this one. We got we got the

01:10:11.045 --> 01:10:12.485
<v Speaker 0>CA Yeah. That was done. We've we've got

01:10:12.485 --> 01:10:14.245
<v Speaker 1>that one. That that that's that's create that

01:10:14.245 --> 01:10:16.405
<v Speaker 1>was create pods easy. Alright. How about we

01:10:16.405 --> 01:10:18.325
<v Speaker 0>look at one more and then we'll we'll

01:10:18.325 --> 01:10:19.685
<v Speaker 0>leave the rest up to the viewers to

01:10:19.685 --> 01:10:21.525
<v Speaker 0>try it over time and I'll I'll do

01:10:21.525 --> 01:10:23.389
<v Speaker 0>the same and another bit of play. Well,

01:10:23.389 --> 01:10:24.670
<v Speaker 0>if you could only pack one more to

01:10:24.670 --> 01:10:25.790
<v Speaker 0>first to take a look at what we

01:10:25.790 --> 01:10:27.469
<v Speaker 0>see. What do we want to do?

01:10:30.989 --> 01:10:32.429
<v Speaker 1>I'd say Tiller. I I was gonna say

01:10:32.429 --> 01:10:34.110
<v Speaker 1>Tiller, but not Tiller because no one uses

01:10:34.110 --> 01:10:35.790
<v Speaker 1>it anymore. But I I was I was

01:10:35.790 --> 01:10:37.710
<v Speaker 1>really talking to an ex colleague of mine.

01:10:37.845 --> 01:10:39.765
<v Speaker 1>He said he found it this week. So

01:10:40.485 --> 01:10:42.085
<v Speaker 0>Alright. So we're gonna take a look at

01:10:42.085 --> 01:10:43.845
<v Speaker 0>Teller, which is the Look at the the

01:10:43.925 --> 01:10:46.085
<v Speaker 1>Teller from Helm v two. So this is

01:10:46.085 --> 01:10:46.645
<v Speaker 1>now

01:10:47.685 --> 01:10:49.525
<v Speaker 1>this is now deprecated.

01:10:49.765 --> 01:10:52.140
<v Speaker 1>But, again, as we were saying before, in

01:10:52.140 --> 01:10:53.340
<v Speaker 1>large enterprises,

01:10:53.660 --> 01:10:55.580
<v Speaker 1>something being deprecated does not mean it will

01:10:55.580 --> 01:10:56.540
<v Speaker 1>go away tomorrow.

01:10:57.580 --> 01:11:00.540
<v Speaker 1>If you are a a security engineer or

01:11:00.540 --> 01:11:02.940
<v Speaker 1>you are a penetration tester and you are

01:11:02.940 --> 01:11:04.860
<v Speaker 1>dealing with the enterprise world, you will regularly

01:11:04.860 --> 01:11:07.145
<v Speaker 1>come across things that are very old and

01:11:07.145 --> 01:11:08.025
<v Speaker 1>have been in there for a long time

01:11:08.025 --> 01:11:09.705
<v Speaker 1>because it took two years to get them

01:11:09.705 --> 01:11:11.385
<v Speaker 1>installed, and people are not going to uninstall

01:11:11.385 --> 01:11:12.985
<v Speaker 1>them just because they're deprecated.

01:11:13.705 --> 01:11:16.185
<v Speaker 0>Yeah. And Tethr was so ubiquitous. You know?

01:11:16.185 --> 01:11:17.865
<v Speaker 0>I I I can't think of a single

01:11:17.865 --> 01:11:20.665
<v Speaker 0>Kubernetes user that wasn't using Helm two Yeah.

01:11:20.745 --> 01:11:22.185
<v Speaker 0>A couple of years ago. Like, it was

01:11:22.185 --> 01:11:24.559
<v Speaker 0>just everywhere. And for a notable reason, like,

01:11:24.559 --> 01:11:25.840
<v Speaker 0>Helm makes a lot of things a lot

01:11:25.840 --> 01:11:28.079
<v Speaker 0>easier. Deploying third party applications that you don't

01:11:28.079 --> 01:11:29.119
<v Speaker 0>know how to operate.

01:11:29.599 --> 01:11:31.679
<v Speaker 0>Helm has a chart for it. But unfortunately,

01:11:31.679 --> 01:11:33.840
<v Speaker 0>the teller was this kind of cluster admin

01:11:33.840 --> 01:11:34.879
<v Speaker 0>operator

01:11:34.880 --> 01:11:38.045
<v Speaker 0>setting in everybody's Kubernetes cluster available to do

01:11:38.045 --> 01:11:39.005
<v Speaker 0>bad bidding.

01:11:39.565 --> 01:11:41.965
<v Speaker 1>And and for a year, for one glorious

01:11:41.965 --> 01:11:43.164
<v Speaker 1>year, it was how

01:11:43.485 --> 01:11:45.245
<v Speaker 1>the people in the team and myself compromised

01:11:45.245 --> 01:11:46.204
<v Speaker 1>most clusters.

01:11:46.844 --> 01:11:49.245
<v Speaker 1>I'm not I'm not even joking. Literally, for

01:11:49.245 --> 01:11:49.645
<v Speaker 1>one year,

01:11:50.290 --> 01:11:53.410
<v Speaker 1>most Kubernetes security reviews we did ended with,

01:11:53.410 --> 01:11:55.650
<v Speaker 1>we are cluster admin because we found Tiller.

01:11:56.210 --> 01:11:58.130
<v Speaker 0>That must have been just like your as

01:11:58.130 --> 01:11:59.330
<v Speaker 0>soon as you see that, right, you're just

01:11:59.330 --> 01:12:01.090
<v Speaker 0>like, okay. This is this is the game

01:12:01.090 --> 01:12:02.850
<v Speaker 0>over. Right? The

01:12:02.850 --> 01:12:05.170
<v Speaker 1>thing is that Tiller does have authentication,

01:12:05.815 --> 01:12:08.614
<v Speaker 1>but the default installed didn't turn it on.

01:12:08.695 --> 01:12:10.614
<v Speaker 1>It it warned you. There was a line,

01:12:10.695 --> 01:12:12.054
<v Speaker 1>to be fair to them, in the thing

01:12:12.054 --> 01:12:14.054
<v Speaker 1>that said don't do this. But if you

01:12:14.054 --> 01:12:16.774
<v Speaker 1>hold the the the the getting started thing,

01:12:17.094 --> 01:12:19.494
<v Speaker 1>it didn't put authentication on. And as a

01:12:19.494 --> 01:12:19.735
<v Speaker 1>result,

01:12:20.360 --> 01:12:22.599
<v Speaker 1>we saw I mean, I'm talking production clusters,

01:12:22.599 --> 01:12:24.840
<v Speaker 1>not just dev clusters. I'm talking about production

01:12:24.840 --> 01:12:26.440
<v Speaker 1>clusters. We found them and they people had

01:12:26.440 --> 01:12:27.959
<v Speaker 1>installed it and they hadn't,

01:12:28.199 --> 01:12:29.800
<v Speaker 1>you know, turned on authentication.

01:12:31.559 --> 01:12:33.639
<v Speaker 0>Yeah. I mean, I think I I've definitely

01:12:33.639 --> 01:12:35.639
<v Speaker 0>done the hell install and let Tethr just

01:12:35.639 --> 01:12:36.575
<v Speaker 0>do its thing.

01:12:37.055 --> 01:12:38.975
<v Speaker 0>It's I I actually wasn't even aware that

01:12:38.975 --> 01:12:42.015
<v Speaker 0>I could turn on any Rawkode authentication on

01:12:42.015 --> 01:12:42.495
<v Speaker 0>it.

01:12:43.055 --> 01:12:44.015
<v Speaker 1>Yeah.

01:12:44.015 --> 01:12:44.655
<v Speaker 1>It's

01:12:44.975 --> 01:12:46.175
<v Speaker 1>it's one of those things. And I said,

01:12:46.175 --> 01:12:48.335
<v Speaker 1>yeah, for one glorious year, that was, like,

01:12:48.335 --> 01:12:48.575
<v Speaker 1>you know,

01:12:49.760 --> 01:12:51.920
<v Speaker 1>a a not inconsiderable number of clusters that

01:12:51.920 --> 01:12:53.120
<v Speaker 1>we would write a report. And it was,

01:12:53.120 --> 01:12:54.960
<v Speaker 1>like, critical at the top. You're running Tiller

01:12:54.960 --> 01:12:55.679
<v Speaker 1>authentication.

01:12:56.560 --> 01:12:58.639
<v Speaker 0>Yeah. We got a a comment from

01:12:58.880 --> 01:12:59.440
<v Speaker 0>who

01:13:00.160 --> 01:13:00.719
<v Speaker 0>says,

01:13:01.199 --> 01:13:03.680
<v Speaker 0>Helm template. A really good way to do

01:13:03.680 --> 01:13:05.575
<v Speaker 0>it. The downside is you lose access to

01:13:05.575 --> 01:13:07.175
<v Speaker 0>the hooks, but well, not with Helm three,

01:13:07.175 --> 01:13:08.295
<v Speaker 0>of course. But with Helm two, you don't

01:13:08.295 --> 01:13:09.895
<v Speaker 0>have access to, like, the post install hooks,

01:13:09.895 --> 01:13:11.895
<v Speaker 0>the pre install hooks, all those things actually

01:13:11.895 --> 01:13:13.895
<v Speaker 0>make the chart work. So, like, 90% of

01:13:13.895 --> 01:13:15.335
<v Speaker 0>the time, was cool and it worked, and

01:13:15.335 --> 01:13:16.935
<v Speaker 0>I did it as well. But there's always

01:13:16.935 --> 01:13:18.695
<v Speaker 0>that chart that it just caused a lot

01:13:18.695 --> 01:13:19.015
<v Speaker 0>of problems.

01:13:20.230 --> 01:13:21.670
<v Speaker 0>And but a good way to do it.

01:13:22.710 --> 01:13:24.630
<v Speaker 1>That was it. And the the yeah. Helm

01:13:24.630 --> 01:13:26.630
<v Speaker 1>is great and it it simplifies complex and

01:13:26.630 --> 01:13:28.150
<v Speaker 1>sold a lot. But Yes.

01:13:29.430 --> 01:13:30.710
<v Speaker 1>I mean, they've changed it now. Right? And

01:13:30.710 --> 01:13:32.630
<v Speaker 1>and it's all CRDs. Not not not I

01:13:32.630 --> 01:13:34.615
<v Speaker 1>will say that CRDs don't me a little

01:13:34.615 --> 01:13:35.175
<v Speaker 1>bit,

01:13:36.375 --> 01:13:37.735
<v Speaker 1>mainly because of what I said before about

01:13:37.735 --> 01:13:39.255
<v Speaker 1>people giving out star rights.

01:13:39.815 --> 01:13:41.415
<v Speaker 1>So you start seeing more and more things

01:13:41.415 --> 01:13:42.535
<v Speaker 1>as CRDs.

01:13:42.935 --> 01:13:44.135
<v Speaker 1>Things like, for example,

01:13:45.175 --> 01:13:47.335
<v Speaker 1>in traditional infosec, you might say read only

01:13:47.335 --> 01:13:49.575
<v Speaker 1>rights are sent are safe. Like, saying, oh,

01:13:49.575 --> 01:13:51.470
<v Speaker 1>you know, I'll give someone read only. That's

01:13:51.470 --> 01:13:53.950
<v Speaker 1>okay. But not in Kubernetes if you start

01:13:53.950 --> 01:13:55.230
<v Speaker 1>putting sensitive things

01:13:55.470 --> 01:13:56.590
<v Speaker 1>in your cluster.

01:13:56.910 --> 01:13:58.670
<v Speaker 1>And a lot of things I've noticed don't

01:13:58.670 --> 01:14:00.270
<v Speaker 1>use secrets reliably.

01:14:00.350 --> 01:14:01.870
<v Speaker 1>So you can't say give someone read only

01:14:01.870 --> 01:14:03.150
<v Speaker 1>to everything bar secrets

01:14:03.485 --> 01:14:05.085
<v Speaker 1>because people will put the sensitive thing in

01:14:05.085 --> 01:14:06.765
<v Speaker 1>a config map or they'll put it in

01:14:06.765 --> 01:14:09.804
<v Speaker 1>a OpenShift deployment config or something like that.

01:14:10.685 --> 01:14:11.244
<v Speaker 0>Yeah.

01:14:11.965 --> 01:14:14.285
<v Speaker 0>And there's something I've seen is, like, even

01:14:14.285 --> 01:14:16.230
<v Speaker 0>though Helm two is now deprecated, most people

01:14:16.230 --> 01:14:17.670
<v Speaker 0>are moving away from it, they're moving away

01:14:17.670 --> 01:14:19.910
<v Speaker 0>to operators which aren't exactly given much less

01:14:19.910 --> 01:14:22.070
<v Speaker 0>permissions than what the teller probably was originally

01:14:22.070 --> 01:14:22.710
<v Speaker 0>anyway.

01:14:23.110 --> 01:14:24.950
<v Speaker 1>As I as I said, yeah, OpenShift operators

01:14:24.950 --> 01:14:27.270
<v Speaker 1>definitely the quantity of cluster admin is high.

01:14:28.515 --> 01:14:29.795
<v Speaker 1>It's not I'm sure it's not all of

01:14:29.795 --> 01:14:31.475
<v Speaker 1>them, but definitely it's a good number. So

01:14:31.475 --> 01:14:32.755
<v Speaker 1>it's it's one to watch if you're going

01:14:32.755 --> 01:14:34.835
<v Speaker 1>to operators is what are they doing with

01:14:34.835 --> 01:14:35.635
<v Speaker 1>RBAC?

01:14:35.795 --> 01:14:37.474
<v Speaker 1>I mean, how much rates are they getting?

01:14:37.475 --> 01:14:38.675
<v Speaker 1>And and what does that mean?

01:14:39.900 --> 01:14:42.300
<v Speaker 0>Because they're designed to work in most clusters,

01:14:42.300 --> 01:14:44.620
<v Speaker 0>which means they're probably overpromised up front. And

01:14:44.620 --> 01:14:47.020
<v Speaker 0>if you really want to reign that in,

01:14:47.020 --> 01:14:49.179
<v Speaker 0>there's gonna be a lot of, probably,

01:14:49.340 --> 01:14:50.940
<v Speaker 0>work to be done there.

01:14:51.420 --> 01:14:53.820
<v Speaker 1>Yeah. And I'm surprised when people are designing

01:14:53.820 --> 01:14:55.980
<v Speaker 1>operators that that's the approach they're taking because

01:14:55.695 --> 01:14:57.534
<v Speaker 1>it it it is complicated.

01:14:57.935 --> 01:15:00.014
<v Speaker 1>And as you said, realistically, people want it

01:15:00.014 --> 01:15:01.774
<v Speaker 1>to work in as many clusters as possible.

01:15:01.775 --> 01:15:03.135
<v Speaker 0>Yep. Definitely.

01:15:04.175 --> 01:15:07.215
<v Speaker 0>Alright. We have our new Kubernetes cluster. I'm

01:15:07.215 --> 01:15:09.215
<v Speaker 0>assuming there's a teller involved here, so I'm

01:15:09.215 --> 01:15:11.660
<v Speaker 0>gonna jump into my client machine. Go back

01:15:11.660 --> 01:15:13.980
<v Speaker 1>into client. Yep. And

01:15:13.980 --> 01:15:16.060
<v Speaker 1>what we're gonna do here so

01:15:18.300 --> 01:15:18.940
<v Speaker 1>oh,

01:15:19.500 --> 01:15:20.060
<v Speaker 1>I

01:15:20.300 --> 01:15:21.739
<v Speaker 1>should have checked.

01:15:22.140 --> 01:15:23.340
<v Speaker 1>So what we're gonna do is we're we're

01:15:23.340 --> 01:15:24.860
<v Speaker 1>going to first, we need to find the

01:15:24.860 --> 01:15:26.425
<v Speaker 1>teller. So the first thing we need do

01:15:26.425 --> 01:15:27.385
<v Speaker 1>is find Tiller.

01:15:27.625 --> 01:15:30.105
<v Speaker 1>To do that, we're going to port scan

01:15:30.105 --> 01:15:30.825
<v Speaker 1>the

01:15:31.305 --> 01:15:32.105
<v Speaker 1>service

01:15:32.185 --> 01:15:34.585
<v Speaker 1>port range. So by default,

01:15:36.105 --> 01:15:36.665
<v Speaker 1>Kubernetes

01:15:36.905 --> 01:15:38.905
<v Speaker 1>has a range of ports that assigns for

01:15:38.905 --> 01:15:40.840
<v Speaker 1>services. So if you expose a service or

01:15:40.840 --> 01:15:42.120
<v Speaker 1>a node port, it'll say these are the

01:15:42.120 --> 01:15:46.680
<v Speaker 1>ports I'm gonna use, and it's 60,000

01:15:46.680 --> 01:15:50.040
<v Speaker 1>to 30 to to three two seven six

01:15:50.040 --> 01:15:50.280
<v Speaker 1>seven.

01:15:54.655 --> 01:15:56.015
<v Speaker 1>And if we do that,

01:15:56.655 --> 01:15:59.055
<v Speaker 1>it should there we go. So in this

01:15:59.055 --> 01:16:00.735
<v Speaker 1>case, it's gonna be on thirty nine three

01:16:00.735 --> 01:16:01.295
<v Speaker 1>four.

01:16:01.615 --> 01:16:04.255
<v Speaker 1>So another handy tip if you are security

01:16:04.255 --> 01:16:06.975
<v Speaker 1>reviewing a Kubernetes cluster is scan that port

01:16:06.975 --> 01:16:09.080
<v Speaker 1>range. So anyone who's put a node port

01:16:09.080 --> 01:16:11.239
<v Speaker 1>service into the cluster, it'll turn up there.

01:16:11.640 --> 01:16:14.440
<v Speaker 0>Bad node ports. Bad. Bad node port. Yeah.

01:16:14.440 --> 01:16:15.800
<v Speaker 1>Bad node ports. But, again,

01:16:16.280 --> 01:16:18.679
<v Speaker 1>I I like Convenient. Really convenient.

01:16:18.760 --> 01:16:21.715
<v Speaker 1>Yeah. Really convenient. Really handy. And and one

01:16:21.715 --> 01:16:23.875
<v Speaker 1>of the the the big things I've found

01:16:23.875 --> 01:16:26.034
<v Speaker 1>with Kubernetes clusters is that

01:16:26.355 --> 01:16:29.475
<v Speaker 1>people will deploy services inside them thinking that

01:16:29.475 --> 01:16:31.155
<v Speaker 1>the network they're on is secure, and so

01:16:31.155 --> 01:16:32.435
<v Speaker 1>they don't have to worry about, like, authentication

01:16:32.435 --> 01:16:34.400
<v Speaker 1>on that service. So

01:16:34.400 --> 01:16:36.000
<v Speaker 1>looking for node ports is always a good

01:16:36.000 --> 01:16:37.439
<v Speaker 1>kind of point of attack.

01:16:38.159 --> 01:16:38.559
<v Speaker 1>So

01:16:39.440 --> 01:16:40.800
<v Speaker 1>now that we've got this,

01:16:41.199 --> 01:16:43.360
<v Speaker 1>we can we can try talking to it.

01:16:44.159 --> 01:16:46.000
<v Speaker 1>The primary in there is we can use

01:16:46.000 --> 01:16:47.679
<v Speaker 1>Helm there's a vendor called Helm two,

01:16:48.355 --> 01:16:49.635
<v Speaker 1>which I I I did because there's no

01:16:49.635 --> 01:16:50.995
<v Speaker 1>Helm three as well. So I've Helm two

01:16:50.995 --> 01:16:51.635
<v Speaker 1>binary,

01:16:52.515 --> 01:16:53.875
<v Speaker 1>and we need to tell it where to

01:16:53.875 --> 01:16:55.795
<v Speaker 1>go. So it's host

01:16:57.475 --> 01:16:59.315
<v Speaker 1>and then 172

01:16:59.715 --> 01:17:01.555
<v Speaker 1>well, yeah. It's 1721804.

01:17:02.030 --> 01:17:05.230
<v Speaker 1>The port we just got, which was 3935,

01:17:05.230 --> 01:17:07.470
<v Speaker 1>I want to say. Instantly forgotten. Oh, it's

01:17:07.470 --> 01:17:09.230
<v Speaker 1>30 was it 30935? I think it was

01:17:09.230 --> 01:17:10.030
<v Speaker 1>3093

01:17:10.350 --> 01:17:12.430
<v Speaker 1>And then version is a good command to

01:17:12.430 --> 01:17:13.550
<v Speaker 1>get it to to tell us.

01:17:14.485 --> 01:17:15.445
<v Speaker 0>Let me check and see if that's what

01:17:15.445 --> 01:17:18.164
<v Speaker 1>it is. 94. Oh, 94. So close.

01:17:19.364 --> 01:17:22.245
<v Speaker 0>Still can't type it anyway. Okay. I'm do

01:17:22.245 --> 01:17:22.724
<v Speaker 0>that.

01:17:23.285 --> 01:17:25.125
<v Speaker 1>And that so that if you find

01:17:26.565 --> 01:17:28.005
<v Speaker 1>if you find it, then that's that's a

01:17:28.005 --> 01:17:30.590
<v Speaker 1>good way to go. Interestingly, if you're inside

01:17:30.590 --> 01:17:32.990
<v Speaker 1>the cluster, so if you're, like, starting from

01:17:33.230 --> 01:17:35.070
<v Speaker 1>I'm actually inside the cluster,

01:17:35.550 --> 01:17:37.390
<v Speaker 1>you can also get it through DNS

01:17:37.550 --> 01:17:40.350
<v Speaker 1>because all services get registered with DNS,

01:17:41.165 --> 01:17:43.005
<v Speaker 1>and Tiller is then on a predictable name.

01:17:43.005 --> 01:17:44.925
<v Speaker 1>It's like, I think, it's tiller.Kubernetes

01:17:45.085 --> 01:17:47.245
<v Speaker 1>no. .Kubernetessystem.service.

01:17:47.245 --> 01:17:48.925
<v Speaker 1>You can just dig for that name, and

01:17:48.925 --> 01:17:50.445
<v Speaker 1>if that name pops back, you know Tiller's

01:17:50.445 --> 01:17:52.285
<v Speaker 1>there. You can always find tiller. There's no

01:17:52.285 --> 01:17:53.725
<v Speaker 1>good way of hiding it unless you break

01:17:53.725 --> 01:17:54.525
<v Speaker 1>DNS or something.

01:17:56.050 --> 01:17:56.610
<v Speaker 1>Damn.

01:17:57.890 --> 01:17:58.449
<v Speaker 1>So

01:17:58.850 --> 01:18:00.849
<v Speaker 1>we've got that. If we do

01:18:01.250 --> 01:18:03.170
<v Speaker 1>l s, so the same command with l

01:18:03.170 --> 01:18:05.410
<v Speaker 1>s at the end, it'll Shady Helm chart

01:18:05.410 --> 01:18:05.969
<v Speaker 0>here?

01:18:06.530 --> 01:18:08.290
<v Speaker 1>There's a there are in so where is

01:18:08.290 --> 01:18:09.570
<v Speaker 1>it? It's in

01:18:09.730 --> 01:18:10.130
<v Speaker 1>charts.

01:18:10.785 --> 01:18:13.425
<v Speaker 1>There is indeed a thing called Priv SSH

01:18:13.425 --> 01:18:13.985
<v Speaker 1>chart.

01:18:17.025 --> 01:18:19.105
<v Speaker 0>And am I just gonna install it? Yeah.

01:18:19.105 --> 01:18:21.185
<v Speaker 1>If you just install that chart, the Priv

01:18:21.185 --> 01:18:22.385
<v Speaker 1>SSH chart one.

01:18:23.265 --> 01:18:24.864
<v Speaker 0>Name Priv SSH.

01:18:32.110 --> 01:18:34.590
<v Speaker 0>It should done. Hey.

01:18:35.550 --> 01:18:38.590
<v Speaker 1>So that's now installed essentially a privileged SSH

01:18:38.590 --> 01:18:39.150
<v Speaker 1>server

01:18:39.445 --> 01:18:40.245
<v Speaker 1>into

01:18:40.725 --> 01:18:42.725
<v Speaker 1>the cluster. This is if you phoned Tiller

01:18:42.725 --> 01:18:44.405
<v Speaker 1>on a on a

01:18:44.805 --> 01:18:46.725
<v Speaker 1>a a cluster, that's that's it. You know?

01:18:46.725 --> 01:18:47.285
<v Speaker 1>Because

01:18:47.525 --> 01:18:49.125
<v Speaker 1>if he's got no authentication, that's what you

01:18:49.125 --> 01:18:51.765
<v Speaker 1>can do. So what we're gonna do is

01:18:51.925 --> 01:18:54.400
<v Speaker 1>it's on a port, 31846

01:18:54.400 --> 01:19:00.080
<v Speaker 1>there. Not local host. It's 172180431846.

01:19:00.400 --> 01:19:01.040
<v Speaker 1>Yeah.

01:19:02.960 --> 01:19:04.960
<v Speaker 1>Oh, I'm gonna get that PRS wrong? Oh,

01:19:04.960 --> 01:19:06.160
<v Speaker 1>it's minus p. You have to put the

01:19:06.240 --> 01:19:07.120
<v Speaker 1>if that's the h, you have to give

01:19:07.120 --> 01:19:08.574
<v Speaker 1>it the port as a minus p. Oh,

01:19:08.574 --> 01:19:09.695
<v Speaker 0>of course. I

01:19:10.175 --> 01:19:11.934
<v Speaker 1>always get that wrong.

01:19:12.415 --> 01:19:14.334
<v Speaker 1>Every time. The s h always gets me.

01:19:14.735 --> 01:19:17.375
<v Speaker 1>And the the password is really insecure, all

01:19:17.375 --> 01:19:18.175
<v Speaker 1>lowercase.

01:19:19.855 --> 01:19:21.375
<v Speaker 1>Because I I put this image up on

01:19:21.375 --> 01:19:22.014
<v Speaker 1>the

01:19:22.449 --> 01:19:23.889
<v Speaker 1>I put this image up there, and I

01:19:23.889 --> 01:19:25.010
<v Speaker 1>was like, you know, I I wanna make

01:19:25.010 --> 01:19:27.010
<v Speaker 1>really sure people understand this is not something

01:19:27.010 --> 01:19:29.010
<v Speaker 1>they should ever use in a real life

01:19:29.010 --> 01:19:30.530
<v Speaker 1>situation. So I said, let's make the password

01:19:30.530 --> 01:19:32.610
<v Speaker 1>really insecure. Don't do this.

01:19:33.170 --> 01:19:34.369
<v Speaker 0>And now we have

01:19:35.145 --> 01:19:37.705
<v Speaker 0>a service account instead of a Kubernetes cluster.

01:19:37.705 --> 01:19:39.705
<v Speaker 1>Now we're now we're actually on the node.

01:19:39.705 --> 01:19:41.065
<v Speaker 1>So we're actually s c h onto the

01:19:41.065 --> 01:19:43.225
<v Speaker 1>node. If you you look in the yeah.

01:19:43.225 --> 01:19:44.425
<v Speaker 1>So if you look at we're actually on

01:19:44.425 --> 01:19:45.145
<v Speaker 1>the the

01:19:45.465 --> 01:19:47.305
<v Speaker 1>we haven't got the if you do share

01:19:47.305 --> 01:19:48.425
<v Speaker 1>route slash host, actually.

01:19:52.450 --> 01:19:54.050
<v Speaker 1>There you go. You're now completely on the

01:19:54.050 --> 01:19:56.370
<v Speaker 1>node. That's the whole node. That's the API

01:19:56.370 --> 01:19:57.250
<v Speaker 1>server node.

01:19:58.690 --> 01:19:59.410
<v Speaker 0>Okay.

01:19:59.650 --> 01:20:02.385
<v Speaker 0>So that that SSH is actually running a

01:20:02.545 --> 01:20:04.065
<v Speaker 1>It's running a privileged container

01:20:04.705 --> 01:20:06.784
<v Speaker 1>with all the host namespaces and everything else.

01:20:06.945 --> 01:20:08.785
<v Speaker 1>So that's the full node. That's if that

01:20:08.785 --> 01:20:09.985
<v Speaker 1>was a real cluster, you'd be on the

01:20:09.985 --> 01:20:11.824
<v Speaker 1>on the a p on the master.

01:20:12.145 --> 01:20:13.264
<v Speaker 1>And there's our

01:20:13.665 --> 01:20:15.025
<v Speaker 0>Sneaky.

01:20:16.320 --> 01:20:17.760
<v Speaker 0>I thought you were just gonna get me

01:20:17.760 --> 01:20:20.719
<v Speaker 0>inside of a poet and then maybe do

01:20:20.719 --> 01:20:22.159
<v Speaker 0>some sneaky stuff. Yeah. But the fact that

01:20:22.320 --> 01:20:24.400
<v Speaker 0>No. A teller could just go ahead and

01:20:24.400 --> 01:20:25.599
<v Speaker 0>actually do that. Yeah.

01:20:26.639 --> 01:20:28.320
<v Speaker 1>So that's if you think about how that

01:20:28.320 --> 01:20:30.159
<v Speaker 1>worked, that was a combination of teller being

01:20:30.159 --> 01:20:32.595
<v Speaker 1>there, Tiller being cluster admin, which is the

01:20:32.595 --> 01:20:33.155
<v Speaker 1>default,

01:20:34.035 --> 01:20:35.635
<v Speaker 1>and no pod security policies.

01:20:35.875 --> 01:20:36.514
<v Speaker 1>So

01:20:36.755 --> 01:20:39.235
<v Speaker 1>pod security policies would have made that harder

01:20:39.235 --> 01:20:39.875
<v Speaker 1>at least,

01:20:40.995 --> 01:20:43.475
<v Speaker 1>although, probably, cluster admin could bypass them if

01:20:43.475 --> 01:20:45.235
<v Speaker 1>there was any pubs you know, PSPs that

01:20:45.235 --> 01:20:48.429
<v Speaker 1>allow it. And it's as it yeah. We

01:20:48.429 --> 01:20:50.190
<v Speaker 1>did this is something that I did to

01:20:50.190 --> 01:20:51.070
<v Speaker 1>real clusters

01:20:52.270 --> 01:20:54.270
<v Speaker 1>because if you have till it was there,

01:20:54.270 --> 01:20:55.229
<v Speaker 1>this was possible.

01:20:57.230 --> 01:20:58.749
<v Speaker 0>Awesome. That was

01:20:59.310 --> 01:21:02.155
<v Speaker 0>very, very cool, but also very, very scary.

01:21:02.635 --> 01:21:04.795
<v Speaker 0>Just so many different I get I mean,

01:21:04.795 --> 01:21:07.435
<v Speaker 0>the Kubernetes is a large distributed system. There

01:21:07.435 --> 01:21:10.075
<v Speaker 0>are just so many different ways for someone

01:21:10.075 --> 01:21:11.035
<v Speaker 0>who is

01:21:11.755 --> 01:21:13.915
<v Speaker 0>either a hacker or a pen tester or

01:21:13.915 --> 01:21:15.275
<v Speaker 0>even just a security advocate.

01:21:15.840 --> 01:21:17.920
<v Speaker 0>There's so many different avenues there that you

01:21:17.920 --> 01:21:19.520
<v Speaker 0>can just go and knock on a door

01:21:19.520 --> 01:21:21.280
<v Speaker 0>and say, hello, are you here? Yeah.

01:21:21.680 --> 01:21:23.600
<v Speaker 1>And and and there's new ones coming along,

01:21:23.600 --> 01:21:25.120
<v Speaker 1>and this is why, you know, one of

01:21:25.120 --> 01:21:27.360
<v Speaker 1>the things you'd always do, and I definitely

01:21:27.360 --> 01:21:29.795
<v Speaker 1>still do is each Kubernetes release,

01:21:30.115 --> 01:21:31.555
<v Speaker 1>I go and read the release notes.

01:21:31.795 --> 01:21:33.955
<v Speaker 1>And I say, what's coming this time? What's

01:21:33.955 --> 01:21:36.515
<v Speaker 1>what's new? What's what's changing? And sometimes it's

01:21:36.515 --> 01:21:38.035
<v Speaker 1>it's stuff that's hardened stuff down. Now I'll

01:21:38.035 --> 01:21:39.155
<v Speaker 1>be going, well, I'll be ticking something off

01:21:39.155 --> 01:21:40.995
<v Speaker 1>going, right, that's off my list because that's

01:21:40.995 --> 01:21:43.235
<v Speaker 1>been closed. Another time, it'll be, oh, look.

01:21:43.235 --> 01:21:43.875
<v Speaker 1>A new feature.

01:21:44.490 --> 01:21:45.530
<v Speaker 1>What does that do?

01:21:46.330 --> 01:21:47.850
<v Speaker 1>There there was a fun one in in

01:21:47.850 --> 01:21:48.890
<v Speaker 1>01/21.

01:21:48.890 --> 01:21:50.570
<v Speaker 1>It was already in beta, but now it's

01:21:50.570 --> 01:21:51.210
<v Speaker 1>stable,

01:21:51.450 --> 01:21:52.810
<v Speaker 1>which is you can use

01:21:53.130 --> 01:21:54.090
<v Speaker 1>external

01:21:54.090 --> 01:21:55.850
<v Speaker 1>helpers in KubeConfig files.

01:21:56.090 --> 01:21:57.770
<v Speaker 1>So if you look at external authentication helper

01:21:58.010 --> 01:22:00.405
<v Speaker 0>Oh, I saw that. Yeah. Yeah. If if

01:22:00.405 --> 01:22:02.485
<v Speaker 1>someone gives you a kube config file and

01:22:02.485 --> 01:22:04.645
<v Speaker 1>you don't trust them, read it because you

01:22:04.645 --> 01:22:06.645
<v Speaker 1>can execute any binary off the person's regime

01:22:06.645 --> 01:22:08.005
<v Speaker 1>when they run kube kettle. So as soon

01:22:08.005 --> 01:22:09.205
<v Speaker 1>as I run kube kettle, it'll just call

01:22:09.205 --> 01:22:11.285
<v Speaker 1>that binary and run it. Yeah. They use

01:22:11.285 --> 01:22:14.180
<v Speaker 0>that for EKS and JKE authentication. Now it

01:22:14.180 --> 01:22:16.580
<v Speaker 0>reaches out to the Google Cloud SDK command

01:22:16.580 --> 01:22:18.260
<v Speaker 0>line and the AWS command line to make

01:22:18.260 --> 01:22:19.620
<v Speaker 0>sure that you get an SDS token or

01:22:19.620 --> 01:22:20.260
<v Speaker 0>whatever.

01:22:20.820 --> 01:22:22.740
<v Speaker 1>It it but but there's no, like, validation

01:22:22.740 --> 01:22:24.500
<v Speaker 1>of what the binary is. So the binary

01:22:24.500 --> 01:22:24.980
<v Speaker 1>can be anything.

01:22:26.115 --> 01:22:28.275
<v Speaker 1>So so so the the rule the that

01:22:28.275 --> 01:22:29.235
<v Speaker 1>was just a new one for me. Was

01:22:29.235 --> 01:22:31.555
<v Speaker 1>like, I will always read every kubectl file

01:22:31.555 --> 01:22:33.475
<v Speaker 1>I get before I use it from now

01:22:33.475 --> 01:22:34.675
<v Speaker 1>on. Because

01:22:35.075 --> 01:22:36.835
<v Speaker 1>if someone wants to be like, to make

01:22:36.835 --> 01:22:38.035
<v Speaker 1>a bit fun, they could make it do

01:22:38.035 --> 01:22:39.450
<v Speaker 1>all sorts of fun Well, yeah. They could

01:22:39.450 --> 01:22:41.690
<v Speaker 0>curl their own endpoint on the Internet, pass

01:22:41.690 --> 01:22:44.330
<v Speaker 0>it through your SSH private key or anything

01:22:44.330 --> 01:22:46.330
<v Speaker 0>like that. Yeah. Easily. Yeah. Or or or

01:22:46.330 --> 01:22:48.090
<v Speaker 1>download a backdoor and run it. You know,

01:22:48.090 --> 01:22:50.010
<v Speaker 1>just download a you know, curl something and

01:22:50.010 --> 01:22:51.690
<v Speaker 1>and and and run. And away you go

01:22:51.690 --> 01:22:53.050
<v Speaker 1>and that's their machine, you're like, oh.

01:22:54.595 --> 01:22:55.395
<v Speaker 0>Awesome.

01:22:56.675 --> 01:22:57.715
<v Speaker 0>So, yeah.

01:22:58.115 --> 01:22:59.635
<v Speaker 0>I'm gonna I'm gonna have to play with

01:22:59.635 --> 01:23:01.235
<v Speaker 0>the rest of those scenarios. It was just

01:23:01.315 --> 01:23:03.635
<v Speaker 0>Yeah. It's too interesting and too much fun.

01:23:03.635 --> 01:23:05.075
<v Speaker 0>So, you know, thank you for guiding me

01:23:05.075 --> 01:23:07.475
<v Speaker 0>through the first four or five scenarios that

01:23:07.475 --> 01:23:09.390
<v Speaker 0>we did there. Thank for even having that

01:23:09.390 --> 01:23:11.710
<v Speaker 0>repository online and making that available to people

01:23:11.710 --> 01:23:12.910
<v Speaker 0>to kind of play with.

01:23:13.390 --> 01:23:15.630
<v Speaker 0>And I definitely I'm gonna encourage myself and

01:23:15.630 --> 01:23:17.950
<v Speaker 0>others to maybe subscribe and watch that repository

01:23:17.950 --> 01:23:19.630
<v Speaker 0>and see what new stuff gets added with

01:23:19.630 --> 01:23:20.510
<v Speaker 0>each Kubernetes release.

01:23:21.265 --> 01:23:23.105
<v Speaker 1>Yeah. And and if anyone's got any ideas,

01:23:23.105 --> 01:23:24.065
<v Speaker 1>they wanna see something,

01:23:24.705 --> 01:23:27.025
<v Speaker 1>I'm I'm I'm open to issues or PRs.

01:23:27.745 --> 01:23:29.985
<v Speaker 0>Yeah. Definitely. I'm gonna check out your kind

01:23:29.985 --> 01:23:31.745
<v Speaker 0>tooling for the animal stuff. I think that's

01:23:31.745 --> 01:23:33.985
<v Speaker 0>really cool for preparing other scenarios like this

01:23:33.985 --> 01:23:34.705
<v Speaker 0>as well. Yeah.

01:23:35.480 --> 01:23:37.960
<v Speaker 0>Alright. Well, thank you for joining me. Have

01:23:37.960 --> 01:23:39.960
<v Speaker 0>a great day. Congratulations on your new role.

01:23:39.960 --> 01:23:41.880
<v Speaker 0>I'm looking forward to us hopefully doing more

01:23:41.880 --> 01:23:43.640
<v Speaker 0>stuff like this in the future. And maybe

01:23:43.640 --> 01:23:45.080
<v Speaker 0>we'll even get to meet up when there's

01:23:45.080 --> 01:23:47.560
<v Speaker 0>no lockdown. I know. Could be a beer

01:23:47.560 --> 01:23:49.795
<v Speaker 1>at some point. I hope so, mate. Alright.

01:23:49.795 --> 01:23:51.875
<v Speaker 0>Thank you again. Have a wonderful evening, and

01:23:51.875 --> 01:23:53.554
<v Speaker 0>I will speak to you soon. Cheers. Bye.

01:23:53.635 --> 01:23:54.034
<v Speaker 1>Bye.
