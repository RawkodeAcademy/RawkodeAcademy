WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 039cad45-4146-4fa9-ba67-98da3f78de90
Created: 2025-04-29T14:56:06.540Z
Duration: 1304.0044
Channels: 1

00:00:02.000 --> 00:00:04.319
<v Speaker 0>Hello, and welcome back to the complete guide

00:00:04.319 --> 00:00:05.440
<v Speaker 0>to Kubescape.

00:00:05.839 --> 00:00:07.839
<v Speaker 0>In this second video, we'll be taking a

00:00:07.839 --> 00:00:09.519
<v Speaker 0>look at how to use Kubescape

00:00:09.519 --> 00:00:12.719
<v Speaker 0>from your own machine via the Kubescape CLI.

00:00:13.554 --> 00:00:16.274
<v Speaker 0>We'll then be progressing to using Kubescape in

00:00:16.274 --> 00:00:18.994
<v Speaker 0>CI environments like GitHub Actions,

00:00:19.075 --> 00:00:21.954
<v Speaker 0>allowing us to scan for misconfigurations

00:00:22.115 --> 00:00:23.715
<v Speaker 0>right from the pull request.

00:00:24.115 --> 00:00:26.320
<v Speaker 0>Before we get started, thank you again to

00:00:26.320 --> 00:00:29.360
<v Speaker 0>Armo for sponsoring this series on the complete

00:00:29.360 --> 00:00:30.640
<v Speaker 0>guide to Kubescape.

00:00:30.960 --> 00:00:32.159
<v Speaker 0>Let's have some fun.

00:00:32.400 --> 00:00:33.200
<v Speaker 0>Alright.

00:00:33.360 --> 00:00:35.040
<v Speaker 0>Let's take a high level look at the

00:00:35.040 --> 00:00:36.480
<v Speaker 0>Kubescape CLI.

00:00:36.800 --> 00:00:40.960
<v Speaker 0>First, we can run kubescapescandot.

00:00:41.815 --> 00:00:44.295
<v Speaker 0>Now before I run this, I'll just show

00:00:44.295 --> 00:00:46.934
<v Speaker 0>you that in this directory, we have the

00:00:46.934 --> 00:00:48.215
<v Speaker 0>Google microservice

00:00:48.215 --> 00:00:51.655
<v Speaker 0>demo and the Weaveworks Sockshop demo.

00:00:51.894 --> 00:00:53.495
<v Speaker 0>So there's a lot of manifests

00:00:53.750 --> 00:00:56.390
<v Speaker 0>and not only that, there's a mixed variety

00:00:56.390 --> 00:00:57.989
<v Speaker 0>of types of manifests.

00:00:58.070 --> 00:00:59.510
<v Speaker 0>In some of these directories, we have a

00:00:59.510 --> 00:01:01.909
<v Speaker 0>helm chart, and some we have customized, and

00:01:01.909 --> 00:01:04.469
<v Speaker 0>some we have straight up Kubernetes YAML.

00:01:05.349 --> 00:01:08.869
<v Speaker 0>So let's run Kubescape scan dot. This will

00:01:08.869 --> 00:01:10.645
<v Speaker 0>scan recursively

00:01:10.645 --> 00:01:12.565
<v Speaker 0>through all of these manifests and types of

00:01:12.565 --> 00:01:15.205
<v Speaker 0>manifests to give us a report on this

00:01:15.205 --> 00:01:15.925
<v Speaker 0>configuration.

00:01:24.390 --> 00:01:25.110
<v Speaker 0>Nice.

00:01:26.390 --> 00:01:29.110
<v Speaker 0>So from here, we can see that we

00:01:29.110 --> 00:01:29.670
<v Speaker 0>have

00:01:31.350 --> 00:01:32.310
<v Speaker 0>48

00:01:32.310 --> 00:01:33.670
<v Speaker 0>failed controls

00:01:33.670 --> 00:01:34.950
<v Speaker 0>out of 70,

00:01:35.590 --> 00:01:36.950
<v Speaker 0>but none are critical.

00:01:37.110 --> 00:01:38.390
<v Speaker 0>So silver lining.

00:01:40.284 --> 00:01:42.365
<v Speaker 0>As far as the high severity goes, we

00:01:42.365 --> 00:01:43.325
<v Speaker 0>can see that

00:01:44.604 --> 00:01:47.884
<v Speaker 0>we are delivering application credentials and configuration files.

00:01:49.805 --> 00:01:51.965
<v Speaker 0>We are not applying security context to pods

00:01:51.965 --> 00:01:52.685
<v Speaker 0>and containers.

00:01:53.140 --> 00:01:55.380
<v Speaker 0>We have some pods and containers with

00:01:55.860 --> 00:01:57.220
<v Speaker 0>elevated privileges,

00:01:57.380 --> 00:01:59.860
<v Speaker 0>host network access, host path mounts,

00:02:00.180 --> 00:02:03.060
<v Speaker 0>the ability to list Kubernetes secrets, so on.

00:02:04.500 --> 00:02:06.260
<v Speaker 0>We can see here that a hundred and

00:02:06.260 --> 00:02:06.980
<v Speaker 0>nine

00:02:07.060 --> 00:02:08.100
<v Speaker 0>of our resources

00:02:08.615 --> 00:02:11.255
<v Speaker 0>are not applying the correct community context to

00:02:11.255 --> 00:02:12.695
<v Speaker 0>pods and containers.

00:02:13.495 --> 00:02:15.095
<v Speaker 0>If we scroll down a bit more, we'll

00:02:15.095 --> 00:02:17.335
<v Speaker 0>see that we have a hundred and nine

00:02:17.335 --> 00:02:19.495
<v Speaker 0>images allowed from any registry

00:02:20.990 --> 00:02:23.550
<v Speaker 0>and a hundred nine containers or pods without

00:02:23.550 --> 00:02:25.070
<v Speaker 0>a seccomp profile.

00:02:27.230 --> 00:02:28.190
<v Speaker 0>In fairness,

00:02:28.350 --> 00:02:30.510
<v Speaker 0>some of these are quite standard. Seccomp is

00:02:30.510 --> 00:02:32.510
<v Speaker 0>not something that I see as widely adopted.

00:02:32.990 --> 00:02:34.910
<v Speaker 0>But now that we have a target, a

00:02:34.910 --> 00:02:36.110
<v Speaker 0>number to reduce,

00:02:36.845 --> 00:02:39.805
<v Speaker 0>let's start applying those seccomp profiles even if

00:02:39.805 --> 00:02:42.685
<v Speaker 0>you're just using the new defaults in Kubernetes

00:02:42.685 --> 00:02:45.245
<v Speaker 0>one twenty three. Let's run a couple more

00:02:45.245 --> 00:02:47.245
<v Speaker 0>scans before we dive into these in a

00:02:47.245 --> 00:02:48.045
<v Speaker 0>little bit more detail.

00:02:50.010 --> 00:02:51.850
<v Speaker 0>When we ran the first scan, we didn't

00:02:51.850 --> 00:02:55.210
<v Speaker 0>specify any framework, so it was analyzing against

00:02:55.210 --> 00:02:56.090
<v Speaker 0>all of them.

00:02:56.810 --> 00:02:59.210
<v Speaker 0>However, we can say we want to scan,

00:02:59.450 --> 00:03:01.290
<v Speaker 0>get the NSA framework

00:03:01.290 --> 00:03:02.330
<v Speaker 0>in this directory.

00:03:09.185 --> 00:03:11.345
<v Speaker 0>So depending on what your security posture is

00:03:11.345 --> 00:03:14.065
<v Speaker 0>and which frameworks you choose internally to adopt,

00:03:14.224 --> 00:03:16.064
<v Speaker 0>this will narrow the scope of the controls

00:03:16.064 --> 00:03:18.410
<v Speaker 0>being used against your scan. It might make

00:03:18.410 --> 00:03:20.010
<v Speaker 0>it a little bit easier to start getting

00:03:20.010 --> 00:03:22.970
<v Speaker 0>those numbers down and improving your security posture.

00:03:23.530 --> 00:03:24.810
<v Speaker 0>Now if we take a look at the

00:03:24.810 --> 00:03:27.130
<v Speaker 0>extra code of this command, we'll see it's

00:03:27.130 --> 00:03:27.770
<v Speaker 0>zero.

00:03:28.410 --> 00:03:30.410
<v Speaker 0>It may be that you actually want to

00:03:30.410 --> 00:03:33.034
<v Speaker 0>fill this because there's a severity threshold that

00:03:33.034 --> 00:03:35.595
<v Speaker 0>goes against your service levels. Perhaps you don't

00:03:35.595 --> 00:03:38.475
<v Speaker 0>want to allow anything with a critical violation

00:03:39.275 --> 00:03:41.034
<v Speaker 0>to pass your CI process.

00:03:44.640 --> 00:03:46.960
<v Speaker 0>For this, we can add severity

00:03:47.200 --> 00:03:48.240
<v Speaker 0>threshold,

00:03:49.680 --> 00:03:51.840
<v Speaker 0>and we'll say that we want to fail

00:03:51.840 --> 00:03:53.519
<v Speaker 0>on anything that's critical.

00:03:58.855 --> 00:04:01.095
<v Speaker 0>If we echo the response here, we get

00:04:01.095 --> 00:04:01.895
<v Speaker 0>a zero.

00:04:02.215 --> 00:04:03.895
<v Speaker 0>Now let's run that again

00:04:04.375 --> 00:04:05.095
<v Speaker 0>with hi.

00:04:10.520 --> 00:04:12.200
<v Speaker 0>And you'll see that we have a fatal

00:04:12.200 --> 00:04:14.040
<v Speaker 0>warning at the end of the command telling

00:04:14.040 --> 00:04:15.880
<v Speaker 0>us that our threshold was met.

00:04:18.040 --> 00:04:19.320
<v Speaker 0>And if we do an echo on the

00:04:19.320 --> 00:04:21.400
<v Speaker 0>result code, we have a one.

00:04:21.720 --> 00:04:23.240
<v Speaker 0>So this is a nice way to build

00:04:23.240 --> 00:04:26.194
<v Speaker 0>a short feedback loop to know if various

00:04:26.194 --> 00:04:28.675
<v Speaker 0>frameworks or controls are in violation of what

00:04:28.675 --> 00:04:31.155
<v Speaker 0>you're trying to adopt with your security posture.

00:04:31.555 --> 00:04:32.835
<v Speaker 0>Speaking of controls,

00:04:34.034 --> 00:04:36.995
<v Speaker 0>we can actually run Kubescape to scan for

00:04:36.995 --> 00:04:38.354
<v Speaker 0>individual controls too.

00:04:39.280 --> 00:04:41.199
<v Speaker 0>Perhaps we want to make sure that host

00:04:41.199 --> 00:04:43.199
<v Speaker 0>paths are not used in any of our

00:04:43.199 --> 00:04:44.560
<v Speaker 0>Kubernetes manifest.

00:04:45.520 --> 00:04:47.120
<v Speaker 0>So how do we get the ID of

00:04:47.120 --> 00:04:48.000
<v Speaker 0>that control?

00:04:49.360 --> 00:04:50.720
<v Speaker 0>Well, we can run Kubescape

00:04:53.025 --> 00:04:53.905
<v Speaker 0>list

00:04:54.385 --> 00:04:55.345
<v Speaker 0>control,

00:04:55.825 --> 00:04:58.145
<v Speaker 0>which will list all the controls available for

00:04:58.145 --> 00:04:59.345
<v Speaker 0>us to filter on.

00:05:00.785 --> 00:05:02.225
<v Speaker 0>We can then grep

00:05:02.625 --> 00:05:03.585
<v Speaker 0>for host path.

00:05:07.200 --> 00:05:08.640
<v Speaker 0>Now that we have the name, we can

00:05:08.640 --> 00:05:09.920
<v Speaker 0>run Kubescape

00:05:09.920 --> 00:05:12.400
<v Speaker 0>scan for a single control.

00:05:12.960 --> 00:05:14.960
<v Speaker 0>I'm going to use host path mount, which

00:05:14.960 --> 00:05:16.320
<v Speaker 0>is just the name of the control that

00:05:16.320 --> 00:05:17.600
<v Speaker 0>we want to scan for,

00:05:18.080 --> 00:05:19.360
<v Speaker 0>and then pass in our path.

00:05:23.795 --> 00:05:25.635
<v Speaker 0>And here we'll see we have two failed

00:05:25.635 --> 00:05:26.515
<v Speaker 0>resources

00:05:26.995 --> 00:05:29.395
<v Speaker 0>that are using a control we don't want

00:05:29.395 --> 00:05:30.275
<v Speaker 0>them to use.

00:05:30.595 --> 00:05:32.035
<v Speaker 0>And as it says at the bottom of

00:05:32.035 --> 00:05:32.595
<v Speaker 0>this output,

00:05:33.510 --> 00:05:35.030
<v Speaker 0>simply a dash v

00:05:35.350 --> 00:05:38.070
<v Speaker 0>to get more information on the resources themselves.

00:05:39.670 --> 00:05:42.230
<v Speaker 0>Now we can see that our Prometheus exporter

00:05:42.230 --> 00:05:43.830
<v Speaker 0>and Fluent d daemon

00:05:45.350 --> 00:05:47.670
<v Speaker 0>are the resources in violation of this control.

00:05:49.525 --> 00:05:50.245
<v Speaker 0>However,

00:05:50.645 --> 00:05:53.685
<v Speaker 0>we know that Prometheus and Fluentd do need

00:05:54.405 --> 00:05:57.205
<v Speaker 0>slightly more elevated access to the host, including

00:05:57.205 --> 00:05:58.485
<v Speaker 0>host path nodes.

00:05:58.805 --> 00:06:00.840
<v Speaker 0>It's the nature of what they do, So

00:06:00.840 --> 00:06:03.240
<v Speaker 0>you can log in to Kubescape SaaS like

00:06:03.240 --> 00:06:04.760
<v Speaker 0>we did in the first video,

00:06:05.160 --> 00:06:06.440
<v Speaker 0>add the exceptions,

00:06:07.000 --> 00:06:09.480
<v Speaker 0>and we're good. These violations will no longer

00:06:09.480 --> 00:06:11.320
<v Speaker 0>be present on the CLI.

00:06:11.400 --> 00:06:13.560
<v Speaker 0>Let's take a look at two more features

00:06:13.560 --> 00:06:15.000
<v Speaker 0>of the Kubescape CLI.

00:06:16.305 --> 00:06:19.505
<v Speaker 0>Let's go into the Google demo directory.

00:06:22.385 --> 00:06:23.585
<v Speaker 0>And you'll see here,

00:06:24.145 --> 00:06:25.825
<v Speaker 0>we have a tree

00:06:26.545 --> 00:06:28.945
<v Speaker 0>that is a customized directory.

00:06:29.380 --> 00:06:32.100
<v Speaker 0>This is a set of Kubernetes manifest where

00:06:32.100 --> 00:06:34.420
<v Speaker 0>we have a customization dot YAML.

00:06:35.940 --> 00:06:37.700
<v Speaker 0>If you're familiar with customize,

00:06:37.780 --> 00:06:39.540
<v Speaker 0>this will allow us to take a safe

00:06:39.540 --> 00:06:40.660
<v Speaker 0>set of resources

00:06:41.140 --> 00:06:42.500
<v Speaker 0>and apply some overlays,

00:06:44.895 --> 00:06:47.135
<v Speaker 0>which means that when we're scanning these,

00:06:47.455 --> 00:06:48.975
<v Speaker 0>we can't just scan

00:06:49.295 --> 00:06:51.295
<v Speaker 0>what is inside the base directory,

00:06:51.295 --> 00:06:52.975
<v Speaker 0>the vanilla manifest.

00:06:53.135 --> 00:06:54.575
<v Speaker 0>We have to account for the fact that

00:06:54.575 --> 00:06:58.815
<v Speaker 0>the customizations may change or reshape those manifests.

00:06:59.800 --> 00:07:02.440
<v Speaker 0>And Kubescape supports us at the box.

00:07:06.040 --> 00:07:07.160
<v Speaker 0>If we run

00:07:08.200 --> 00:07:09.480
<v Speaker 0>if we run

00:07:09.800 --> 00:07:12.280
<v Speaker 0>Kubescapescandot,

00:07:12.920 --> 00:07:17.080
<v Speaker 0>we'll see on the info login line that

00:07:15.135 --> 00:07:16.735
<v Speaker 0>the scanner has started,

00:07:20.175 --> 00:07:21.935
<v Speaker 0>and then we have this line here.

00:07:22.735 --> 00:07:24.895
<v Speaker 0>Customizations are actually detected,

00:07:25.215 --> 00:07:26.975
<v Speaker 0>scanning the rendered

00:07:27.295 --> 00:07:27.695
<v Speaker 0>objects.

00:07:28.550 --> 00:07:31.430
<v Speaker 0>This is important. It's important for Kubescape to

00:07:31.430 --> 00:07:33.830
<v Speaker 0>understand that we don't just use vanilla manifest

00:07:33.830 --> 00:07:36.630
<v Speaker 0>because those won't be what hit our clusters

00:07:36.630 --> 00:07:37.430
<v Speaker 0>directly.

00:07:38.710 --> 00:07:39.990
<v Speaker 0>And to confirm this works,

00:07:43.695 --> 00:07:46.335
<v Speaker 0>we can modify the customization file.

00:07:48.655 --> 00:07:50.255
<v Speaker 0>We can see that we have some common

00:07:50.255 --> 00:07:51.055
<v Speaker 0>labels,

00:07:53.295 --> 00:07:54.255
<v Speaker 0>updates app,

00:07:56.080 --> 00:07:57.200
<v Speaker 0>hello world,

00:07:58.640 --> 00:07:59.680
<v Speaker 0>and app,

00:08:01.520 --> 00:08:02.480
<v Speaker 0>hello world.

00:08:04.720 --> 00:08:06.720
<v Speaker 0>Now when we save this and scan again,

00:08:13.975 --> 00:08:17.575
<v Speaker 0>Our label usage for resources went from 25

00:08:19.095 --> 00:08:20.135
<v Speaker 0>to 13.

00:08:23.575 --> 00:08:24.375
<v Speaker 0>Awesome.

00:08:25.015 --> 00:08:25.495
<v Speaker 0>Now,

00:08:26.160 --> 00:08:29.920
<v Speaker 0>Kubescape doesn't just handle customize and customizations,

00:08:30.560 --> 00:08:31.440
<v Speaker 0>but also

00:08:32.960 --> 00:08:33.920
<v Speaker 0>help charts.

00:08:35.120 --> 00:08:36.720
<v Speaker 0>Here we have a chart on YAML and

00:08:36.720 --> 00:08:38.160
<v Speaker 0>a templates directory

00:08:38.720 --> 00:08:39.280
<v Speaker 0>like so.

00:08:40.515 --> 00:08:41.635
<v Speaker 0>Now, of course,

00:08:41.795 --> 00:08:44.275
<v Speaker 0>templates within a Helm chart could be straight

00:08:44.275 --> 00:08:46.115
<v Speaker 0>up Kubernetes manifest YAML,

00:08:46.435 --> 00:08:47.955
<v Speaker 0>but more often than not,

00:08:48.115 --> 00:08:51.635
<v Speaker 0>they are littered and composed of many, many

00:08:51.635 --> 00:08:52.995
<v Speaker 0>Go template string.

00:08:53.795 --> 00:08:55.555
<v Speaker 0>But Kubescape doesn't mind.

00:08:56.330 --> 00:08:58.170
<v Speaker 0>If we do a Kubescape scan,

00:09:00.490 --> 00:09:02.170
<v Speaker 0>then we'll see that we have the same

00:09:02.170 --> 00:09:02.970
<v Speaker 0>label,

00:09:03.130 --> 00:09:04.890
<v Speaker 0>Kubernetes common label,

00:09:05.450 --> 00:09:08.010
<v Speaker 0>failed resources. Only this time, the number is

00:09:08.010 --> 00:09:08.410
<v Speaker 0>12.

00:09:09.095 --> 00:09:12.135
<v Speaker 0>So let's change the helm value style.

00:09:13.815 --> 00:09:15.975
<v Speaker 0>And here, I'm going to add labels,

00:09:16.455 --> 00:09:17.415
<v Speaker 0>k that,

00:09:18.295 --> 00:09:19.415
<v Speaker 0>hello world,

00:09:19.655 --> 00:09:20.295
<v Speaker 0>and app.

00:09:23.269 --> 00:09:24.070
<v Speaker 0>Hello

00:09:25.190 --> 00:09:25.990
<v Speaker 0>world.

00:09:26.790 --> 00:09:28.630
<v Speaker 0>And run Kubescape scan

00:09:30.070 --> 00:09:30.870
<v Speaker 0>one more time.

00:09:35.495 --> 00:09:37.335
<v Speaker 0>We'll see that our label usage went from

00:09:37.335 --> 00:09:37.975
<v Speaker 0>12

00:09:38.455 --> 00:09:39.415
<v Speaker 0>to seven.

00:09:39.975 --> 00:09:41.815
<v Speaker 0>Now that is because I only patched a

00:09:41.815 --> 00:09:44.135
<v Speaker 0>few of those deployment. Yaml to actually use

00:09:44.135 --> 00:09:46.295
<v Speaker 0>the new top level labels value in the

00:09:46.295 --> 00:09:49.290
<v Speaker 0>values file. However, it's enough to confirm that

00:09:49.290 --> 00:09:52.410
<v Speaker 0>Kubescape is rendering our helm chart before

00:09:52.490 --> 00:09:53.930
<v Speaker 0>applying the controls,

00:09:54.170 --> 00:09:56.010
<v Speaker 0>and the same for customize.

00:09:56.810 --> 00:09:58.010
<v Speaker 0>And that's pretty cool.

00:09:58.410 --> 00:10:00.089
<v Speaker 0>So let's move on to the second part

00:10:00.089 --> 00:10:00.889
<v Speaker 0>of today's demo.

00:10:01.665 --> 00:10:04.705
<v Speaker 0>How do we integrate Kubescape into our CI

00:10:04.705 --> 00:10:05.585
<v Speaker 0>process?

00:10:06.065 --> 00:10:07.665
<v Speaker 0>It's all very well and good that I

00:10:07.665 --> 00:10:08.625
<v Speaker 0>can install

00:10:08.705 --> 00:10:12.065
<v Speaker 0>Kubescape locally on my machine, scan my resources,

00:10:12.545 --> 00:10:14.385
<v Speaker 0>but it's 2022,

00:10:14.385 --> 00:10:15.745
<v Speaker 0>almost 2023.

00:10:15.825 --> 00:10:17.025
<v Speaker 0>We need to automate this.

00:10:17.639 --> 00:10:19.240
<v Speaker 0>So we need to bake this in to

00:10:19.240 --> 00:10:20.519
<v Speaker 0>our CI process

00:10:20.680 --> 00:10:22.600
<v Speaker 0>so we get alerts for the controls that

00:10:22.600 --> 00:10:24.839
<v Speaker 0>we care about the most, whether that be

00:10:24.839 --> 00:10:27.879
<v Speaker 0>all the criticals or a certain framework or

00:10:27.879 --> 00:10:29.480
<v Speaker 0>one or two controls that you never want

00:10:29.480 --> 00:10:31.959
<v Speaker 0>to hack your production cluster, that is up

00:10:31.959 --> 00:10:34.375
<v Speaker 0>to you. So let's see how it's done.

00:10:34.775 --> 00:10:36.055
<v Speaker 0>So here I am

00:10:37.175 --> 00:10:40.455
<v Speaker 0>in the GitHub repository for the clustered automation.

00:10:41.335 --> 00:10:43.575
<v Speaker 0>Why? Well, because in here,

00:10:44.535 --> 00:10:46.695
<v Speaker 0>we have a deployment manifest.

00:10:47.660 --> 00:10:49.740
<v Speaker 0>A config map, a service on a stateful

00:10:49.740 --> 00:10:50.860
<v Speaker 0>set for Postgres,

00:10:51.260 --> 00:10:53.500
<v Speaker 0>and a service for the clustered application.

00:10:54.380 --> 00:10:56.460
<v Speaker 0>These manifests have not been written with security

00:10:56.460 --> 00:10:59.420
<v Speaker 0>in mind, given that they're used primarily for

00:10:59.420 --> 00:11:01.020
<v Speaker 0>a show in breaking Kubernetes clusters.

00:11:01.575 --> 00:11:02.295
<v Speaker 0>However,

00:11:02.535 --> 00:11:04.775
<v Speaker 0>why don't we set this repository up to

00:11:04.775 --> 00:11:05.815
<v Speaker 0>take advantage

00:11:05.975 --> 00:11:08.775
<v Speaker 0>of Kubescape in a CI environment?

00:11:09.575 --> 00:11:11.095
<v Speaker 0>Now, until recently,

00:11:11.335 --> 00:11:14.215
<v Speaker 0>you would have to orchestrate and manage getting

00:11:14.215 --> 00:11:16.055
<v Speaker 0>the Kubescape CLI yourself,

00:11:16.870 --> 00:11:19.350
<v Speaker 0>running it against your code, and uploading the

00:11:19.350 --> 00:11:20.230
<v Speaker 0>artifact

00:11:20.389 --> 00:11:21.990
<v Speaker 0>on your GitHub release.

00:11:23.430 --> 00:11:24.870
<v Speaker 0>But that's all changed

00:11:25.189 --> 00:11:26.870
<v Speaker 0>from the first week in December.

00:11:27.670 --> 00:11:29.430
<v Speaker 0>There's now a GitHub action

00:11:29.855 --> 00:11:32.735
<v Speaker 0>that automates this entire process for you.

00:11:33.775 --> 00:11:35.135
<v Speaker 0>So the first thing we're going to do

00:11:35.135 --> 00:11:37.055
<v Speaker 0>is create a new workflow.

00:11:38.255 --> 00:11:40.255
<v Speaker 0>We'll call this security

00:11:40.255 --> 00:11:41.295
<v Speaker 0>dot YAML.

00:11:42.015 --> 00:11:43.775
<v Speaker 0>We can give this a name and say

00:11:43.775 --> 00:11:45.215
<v Speaker 0>security scanning

00:11:46.370 --> 00:11:47.490
<v Speaker 0>or clustered

00:11:47.810 --> 00:11:48.930
<v Speaker 0>manifests.

00:11:50.210 --> 00:11:53.170
<v Speaker 0>We want to run this on push events

00:11:53.490 --> 00:11:55.890
<v Speaker 0>and we'll do all of them and pull

00:11:55.890 --> 00:11:56.290
<v Speaker 0>request.

00:12:04.535 --> 00:12:06.375
<v Speaker 0>Next, we define a job

00:12:06.855 --> 00:12:09.495
<v Speaker 0>and we'll just call this Kubescape and we're

00:12:09.495 --> 00:12:11.175
<v Speaker 0>going to say that it runs on

00:12:11.495 --> 00:12:12.615
<v Speaker 0>Ubuntu latest.

00:12:14.120 --> 00:12:15.720
<v Speaker 0>Now we have a few steps as part

00:12:15.720 --> 00:12:19.240
<v Speaker 0>of this. One, as with all GitHub actions,

00:12:19.720 --> 00:12:21.480
<v Speaker 0>we need to do checkout.

00:12:22.040 --> 00:12:24.120
<v Speaker 0>Well, maybe we're going to use checkout b

00:12:24.120 --> 00:12:24.440
<v Speaker 0>three.

00:12:26.375 --> 00:12:27.175
<v Speaker 0>Now,

00:12:28.855 --> 00:12:30.055
<v Speaker 0>we can use

00:12:33.415 --> 00:12:34.775
<v Speaker 0>the Kubescape

00:12:36.855 --> 00:12:37.975
<v Speaker 0>GitHub

00:12:38.135 --> 00:12:39.015
<v Speaker 0>action

00:12:40.535 --> 00:12:41.735
<v Speaker 0>on the latest version.

00:12:42.750 --> 00:12:44.510
<v Speaker 0>Now at the moment, we don't want this

00:12:44.510 --> 00:12:45.390
<v Speaker 0>to fail

00:12:46.670 --> 00:12:48.590
<v Speaker 0>if there is an error, so we're gonna

00:12:48.590 --> 00:12:50.430
<v Speaker 0>set this to true.

00:12:52.590 --> 00:12:54.430
<v Speaker 0>Now we can configure the action

00:12:55.470 --> 00:12:57.390
<v Speaker 0>using the with keyword.

00:12:58.265 --> 00:13:00.505
<v Speaker 0>Now we can configure the format

00:13:00.905 --> 00:13:02.905
<v Speaker 0>using the format key.

00:13:04.345 --> 00:13:06.345
<v Speaker 0>How do we work out which formats are

00:13:06.345 --> 00:13:07.145
<v Speaker 0>supported?

00:13:11.465 --> 00:13:13.625
<v Speaker 0>It's the same formats provided

00:13:13.580 --> 00:13:15.340
<v Speaker 0>in the Kubescape scan

00:13:15.340 --> 00:13:16.380
<v Speaker 0>help output.

00:13:19.500 --> 00:13:21.500
<v Speaker 0>You'll see here we can use pretty printer,

00:13:21.500 --> 00:13:25.340
<v Speaker 0>JSON, GA unit, Prometheus, PDF, HTML,

00:13:25.340 --> 00:13:26.300
<v Speaker 0>or SADIF.

00:13:27.740 --> 00:13:29.180
<v Speaker 0>Let's grab

00:13:28.965 --> 00:13:30.165
<v Speaker 0>pretty printer.

00:13:34.085 --> 00:13:36.165
<v Speaker 0>Next, we can specify the path that we

00:13:36.165 --> 00:13:37.125
<v Speaker 0>wish to scan.

00:13:37.605 --> 00:13:40.165
<v Speaker 0>For me, that's going to be workload

00:13:40.485 --> 00:13:42.485
<v Speaker 0>opt Kubernetes.

00:13:43.525 --> 00:13:46.060
<v Speaker 0>Workload opt Kubernetes.

00:13:47.020 --> 00:13:48.700
<v Speaker 0>And that should be enough to get this

00:13:48.700 --> 00:13:49.420
<v Speaker 0>started.

00:13:49.660 --> 00:13:51.500
<v Speaker 0>So let's commit and push.

00:14:07.845 --> 00:14:08.565
<v Speaker 0>Alright.

00:14:09.525 --> 00:14:11.205
<v Speaker 0>Now we can pop over

00:14:11.285 --> 00:14:12.325
<v Speaker 0>to the run itself,

00:14:16.019 --> 00:14:18.019
<v Speaker 0>And we'll give that just a moment.

00:14:18.899 --> 00:14:19.779
<v Speaker 0>I'm done.

00:14:20.579 --> 00:14:21.300
<v Speaker 0>Now,

00:14:21.459 --> 00:14:24.740
<v Speaker 0>that completed relatively fast because it's not really

00:14:24.740 --> 00:14:25.940
<v Speaker 0>scanning much.

00:14:26.500 --> 00:14:28.585
<v Speaker 0>And you'll see when we expand it, there's

00:14:28.585 --> 00:14:31.545
<v Speaker 0>also very little output that is available to

00:14:31.545 --> 00:14:32.105
<v Speaker 0>us.

00:14:32.425 --> 00:14:34.265
<v Speaker 0>And this is because when you specify the

00:14:34.265 --> 00:14:36.745
<v Speaker 0>output format, Kubescape is going to write that

00:14:36.745 --> 00:14:39.465
<v Speaker 0>format to a file. In our case, a

00:14:39.465 --> 00:14:41.065
<v Speaker 0>results dot out file.

00:14:43.460 --> 00:14:45.140
<v Speaker 0>We can come back to our action and

00:14:45.140 --> 00:14:46.580
<v Speaker 0>add another step.

00:14:48.100 --> 00:14:49.860
<v Speaker 0>So let's add a step

00:14:50.100 --> 00:14:52.580
<v Speaker 0>so that we can see the output.

00:14:52.740 --> 00:14:54.340
<v Speaker 0>Here, we can do cat

00:14:54.725 --> 00:14:55.685
<v Speaker 0>result

00:14:57.125 --> 00:14:58.085
<v Speaker 0>dot out.

00:14:58.485 --> 00:15:00.165
<v Speaker 0>And we'll be nice and we'll give this

00:15:00.165 --> 00:15:01.045
<v Speaker 0>a name,

00:15:06.165 --> 00:15:06.645
<v Speaker 0>like so.

00:15:16.100 --> 00:15:17.780
<v Speaker 0>We add a commit message,

00:15:18.339 --> 00:15:19.300
<v Speaker 0>and we push.

00:15:21.620 --> 00:15:23.140
<v Speaker 0>Now we can pop over

00:15:23.380 --> 00:15:24.714
<v Speaker 0>to to our action

00:15:25.915 --> 00:15:28.634
<v Speaker 0>where our next action has no running,

00:15:31.834 --> 00:15:32.314
<v Speaker 0>hopefully.

00:15:47.600 --> 00:15:49.440
<v Speaker 0>Alright. We can open the results,

00:15:50.695 --> 00:15:51.575
<v Speaker 0>and now

00:15:52.214 --> 00:15:55.815
<v Speaker 0>the output from our scan is visible from

00:15:55.815 --> 00:15:57.175
<v Speaker 0>all our action runners.

00:15:57.975 --> 00:15:59.975
<v Speaker 0>Because this is probably not the best way

00:16:00.295 --> 00:16:01.095
<v Speaker 0>to get started.

00:16:03.250 --> 00:16:05.970
<v Speaker 0>Let's come back and modify the format

00:16:06.930 --> 00:16:08.290
<v Speaker 0>to be JUnit.

00:16:13.330 --> 00:16:16.610
<v Speaker 0>And now we're going to use an action

00:16:17.025 --> 00:16:19.425
<v Speaker 0>for publishing g unit reports.

00:16:22.225 --> 00:16:23.745
<v Speaker 0>And we can tell it to run

00:16:25.025 --> 00:16:26.705
<v Speaker 0>with the report paths

00:16:29.185 --> 00:16:31.025
<v Speaker 0>of anything dot XML.

00:16:32.040 --> 00:16:33.560
<v Speaker 0>And now we can push this,

00:16:34.200 --> 00:16:36.840
<v Speaker 0>and we'll see a new XML report added

00:16:36.840 --> 00:16:37.880
<v Speaker 0>to our repository.

00:16:53.785 --> 00:16:55.625
<v Speaker 0>Let's go back to our actions.

00:17:07.800 --> 00:17:10.599
<v Speaker 0>Now we can see the JUnit report parser.

00:17:11.400 --> 00:17:14.599
<v Speaker 0>It's created a lovely report

00:17:13.365 --> 00:17:14.884
<v Speaker 0>from all the controls.

00:17:15.444 --> 00:17:17.365
<v Speaker 0>And what's even nicer about this

00:17:17.765 --> 00:17:19.525
<v Speaker 0>is if we come back to the summary

00:17:19.525 --> 00:17:20.644
<v Speaker 0>of this job

00:17:21.925 --> 00:17:23.444
<v Speaker 0>and scroll to the bottom,

00:17:24.085 --> 00:17:27.045
<v Speaker 0>we'll see the test report here where we

00:17:27.045 --> 00:17:28.165
<v Speaker 0>ran 406

00:17:28.165 --> 00:17:31.419
<v Speaker 0>tests, 40 passed, a whole bunch were skipped,

00:17:31.420 --> 00:17:32.780
<v Speaker 0>and we have 47

00:17:32.780 --> 00:17:33.580
<v Speaker 0>failing.

00:17:34.220 --> 00:17:35.340
<v Speaker 0>So increasing

00:17:36.380 --> 00:17:38.779
<v Speaker 0>the ability to understand, visualize

00:17:39.420 --> 00:17:41.420
<v Speaker 0>the controls that are failing with our manifest.

00:17:43.295 --> 00:17:45.934
<v Speaker 0>Let's take a look at one more improvement.

00:17:52.975 --> 00:17:56.440
<v Speaker 0>Now we're going to change from JUnit

00:17:57.559 --> 00:17:58.679
<v Speaker 0>to SARIF.

00:17:59.080 --> 00:18:00.599
<v Speaker 0>What is SARIF?

00:18:01.480 --> 00:18:02.119
<v Speaker 0>Well,

00:18:03.480 --> 00:18:06.120
<v Speaker 0>it is the static analysis

00:18:06.120 --> 00:18:07.720
<v Speaker 0>results interchange

00:18:07.720 --> 00:18:08.360
<v Speaker 0>format.

00:18:09.735 --> 00:18:10.455
<v Speaker 0>Easy.

00:18:12.135 --> 00:18:14.054
<v Speaker 0>It is a common format used,

00:18:14.135 --> 00:18:16.695
<v Speaker 0>especially by CodeQL from GitHub,

00:18:17.015 --> 00:18:20.135
<v Speaker 0>for understanding the results of static static analysis

00:18:20.135 --> 00:18:20.934
<v Speaker 0>scanning

00:18:21.255 --> 00:18:23.015
<v Speaker 0>of code and other artifacts.

00:18:23.419 --> 00:18:25.179
<v Speaker 0>So now we need to change the final

00:18:25.179 --> 00:18:25.820
<v Speaker 0>step

00:18:26.539 --> 00:18:28.460
<v Speaker 0>and remove the g unit

00:18:29.419 --> 00:18:30.139
<v Speaker 0>uploading.

00:18:31.179 --> 00:18:32.860
<v Speaker 0>So now that we've removed the g unit

00:18:32.860 --> 00:18:35.019
<v Speaker 0>test, the g unit step,

00:18:35.580 --> 00:18:36.539
<v Speaker 0>let's pop down.

00:18:38.125 --> 00:18:39.404
<v Speaker 0>Thank you, Copilot.

00:18:39.885 --> 00:18:43.165
<v Speaker 0>And add the GitHub official CodeQL action for

00:18:43.165 --> 00:18:45.245
<v Speaker 0>uploading a SARIF artifact.

00:18:46.684 --> 00:18:48.765
<v Speaker 0>You'll see here that it's set to SARIF

00:18:48.765 --> 00:18:52.230
<v Speaker 0>file would be kubescape results dot SARIF.

00:18:54.309 --> 00:18:55.509
<v Speaker 0>We can add

00:18:55.990 --> 00:18:57.429
<v Speaker 0>the output file

00:18:59.270 --> 00:19:00.950
<v Speaker 0>to the kubescape step

00:19:01.894 --> 00:19:03.174
<v Speaker 0>and just ensure

00:19:04.695 --> 00:19:06.054
<v Speaker 0>that the names match.

00:19:06.855 --> 00:19:08.214
<v Speaker 0>We can save this,

00:19:13.735 --> 00:19:15.414
<v Speaker 0>write a nice commit message

00:19:16.135 --> 00:19:16.695
<v Speaker 0>and push.

00:19:19.390 --> 00:19:21.630
<v Speaker 0>And now when we go back to GitHub

00:19:21.630 --> 00:19:23.950
<v Speaker 0>to our most recent run of GitHub actions

00:19:23.950 --> 00:19:24.670
<v Speaker 0>runner,

00:19:25.470 --> 00:19:27.390
<v Speaker 0>hopefully give it just a few seconds to

00:19:27.390 --> 00:19:28.030
<v Speaker 0>complete,

00:19:28.750 --> 00:19:31.470
<v Speaker 0>it will upload the SARIF file to GitHub

00:19:31.470 --> 00:19:32.270
<v Speaker 0>code scanning.

00:19:38.485 --> 00:19:39.365
<v Speaker 0>Finally.

00:19:39.925 --> 00:19:41.285
<v Speaker 0>Now that took nearly two and a half

00:19:41.285 --> 00:19:44.005
<v Speaker 0>minutes. However, it's important to note the Kubescape

00:19:44.005 --> 00:19:46.820
<v Speaker 0>scan was very quick. The upload to code

00:19:46.820 --> 00:19:49.620
<v Speaker 0>scanning is very quick. However, you may find

00:19:49.620 --> 00:19:51.940
<v Speaker 0>there's a delay waiting for CodeQL

00:19:51.940 --> 00:19:53.940
<v Speaker 0>to analyze the report.

00:19:55.620 --> 00:19:57.940
<v Speaker 0>But now that that's finished, we can go

00:19:57.940 --> 00:20:00.340
<v Speaker 0>to the security tab on our repository.

00:20:01.655 --> 00:20:03.895
<v Speaker 0>From here, you'll see that code scanning alerts

00:20:03.895 --> 00:20:05.014
<v Speaker 0>have been enabled.

00:20:05.175 --> 00:20:06.295
<v Speaker 0>And when we click on a few of

00:20:06.295 --> 00:20:07.095
<v Speaker 0>the alerts,

00:20:07.495 --> 00:20:09.174
<v Speaker 0>you'll see something interesting.

00:20:10.375 --> 00:20:13.335
<v Speaker 0>Our workflow security scanning for clustered manifest,

00:20:14.420 --> 00:20:16.100
<v Speaker 0>which ran one minute ago,

00:20:16.820 --> 00:20:17.860
<v Speaker 0>has opened

00:20:17.940 --> 00:20:18.980
<v Speaker 0>37

00:20:18.980 --> 00:20:21.620
<v Speaker 0>code scanning issues for me to work on,

00:20:22.580 --> 00:20:23.299
<v Speaker 0>integrating

00:20:23.700 --> 00:20:26.660
<v Speaker 0>the entire Kubescape process

00:20:26.235 --> 00:20:27.914
<v Speaker 0>into your GitHub workflow.

00:20:29.115 --> 00:20:30.635
<v Speaker 0>From here, we can click on one of

00:20:30.635 --> 00:20:31.115
<v Speaker 0>them.

00:20:31.835 --> 00:20:34.315
<v Speaker 0>It will show us the manifest where the

00:20:34.315 --> 00:20:35.674
<v Speaker 0>control was violated.

00:20:36.235 --> 00:20:38.315
<v Speaker 0>It gives us a nice error message

00:20:38.750 --> 00:20:41.950
<v Speaker 0>and tells you how to remediate the problem.

00:20:45.470 --> 00:20:46.429
<v Speaker 0>From here,

00:20:47.070 --> 00:20:49.070
<v Speaker 0>you can choose to dismiss the alert as

00:20:49.070 --> 00:20:51.630
<v Speaker 0>won't fix false positive or it's just a

00:20:51.630 --> 00:20:51.950
<v Speaker 0>test,

00:20:52.735 --> 00:20:54.815
<v Speaker 0>or you could create an issue

00:20:56.575 --> 00:20:59.455
<v Speaker 0>for someone on your team or in open

00:20:59.455 --> 00:21:02.014
<v Speaker 0>source land to come and provide a fix.

00:21:03.054 --> 00:21:05.215
<v Speaker 0>So that is Kubescape integrated

00:21:05.215 --> 00:21:07.534
<v Speaker 0>in the CI process with GitHub actions.

00:21:08.160 --> 00:21:09.360
<v Speaker 0>That's pretty sweet.

00:21:10.320 --> 00:21:12.480
<v Speaker 0>So there you have it. Kubescape on the

00:21:12.480 --> 00:21:13.360
<v Speaker 0>CLI,

00:21:13.520 --> 00:21:15.120
<v Speaker 0>integrated into CI,

00:21:15.360 --> 00:21:18.320
<v Speaker 0>and even one step further, integrated directly

00:21:18.320 --> 00:21:20.400
<v Speaker 0>into your GitHub development workflow.

00:21:23.785 --> 00:21:25.945
<v Speaker 0>Go check it out. Have some fun.

00:21:26.345 --> 00:21:28.985
<v Speaker 0>If you have any questions or any problems,

00:21:29.065 --> 00:21:31.865
<v Speaker 0>leave a comment in the comment section below

00:21:32.819 --> 00:21:34.579
<v Speaker 0>or reach out via Twitter. I can't wait

00:21:34.579 --> 00:21:36.339
<v Speaker 0>to speak to you. Have a great day.
