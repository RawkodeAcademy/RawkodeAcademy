WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 5ae6ee2c-5a6e-44fa-869a-3bea95bdea09
Created: 2025-04-29T18:40:14.960Z
Duration: 4350.288
Channels: 1

00:01:01.199 --> 00:01:03.839
<v Speaker 0>Hello, and welcome to today's episode of Rawkode

00:01:03.839 --> 00:01:04.239
<v Speaker 0>live.

00:01:04.724 --> 00:01:06.405
<v Speaker 0>I'm your host Rawkode.

00:01:06.485 --> 00:01:08.244
<v Speaker 0>Today is clustered,

00:01:08.244 --> 00:01:11.765
<v Speaker 0>but slightly different. Today is clustered newcomers edition.

00:01:12.085 --> 00:01:15.525
<v Speaker 0>We, I have broken a Kubernetes cluster in

00:01:15.525 --> 00:01:18.565
<v Speaker 0>a few ways to aim and hopefully provide

00:01:18.565 --> 00:01:21.470
<v Speaker 0>a journey for people that aren't as

00:01:22.510 --> 00:01:24.990
<v Speaker 0>long in the tooth and the Kubernetes landscape.

00:01:24.990 --> 00:01:26.910
<v Speaker 0>They wanna understand some of the more primitive

00:01:26.910 --> 00:01:27.710
<v Speaker 0>aspects,

00:01:28.510 --> 00:01:29.230
<v Speaker 0>basics,

00:01:29.950 --> 00:01:31.150
<v Speaker 0>I don't know a whole bunch of other

00:01:31.150 --> 00:01:32.510
<v Speaker 0>stuff. It's really hard to break a cluster

00:01:32.510 --> 00:01:34.430
<v Speaker 0>when the people have no idea. So we're

00:01:34.430 --> 00:01:36.615
<v Speaker 0>gonna see how it goes. Now before we

00:01:36.615 --> 00:01:38.775
<v Speaker 0>get started, I wanna encourage you all to

00:01:38.775 --> 00:01:40.695
<v Speaker 0>please subscribe to the YouTube channel, click the

00:01:40.695 --> 00:01:42.534
<v Speaker 0>bell. This will get you notifications for all

00:01:42.534 --> 00:01:45.255
<v Speaker 0>future episodes of Rawkode live and clustered.

00:01:45.494 --> 00:01:47.095
<v Speaker 0>And, of course, if you wanna talk about

00:01:47.095 --> 00:01:50.055
<v Speaker 0>cloud native Kubernetes and anything in between, please

00:01:50.055 --> 00:01:51.494
<v Speaker 0>join us in the Discord server.

00:01:52.430 --> 00:01:55.710
<v Speaker 0>Alright. Now joining me today, I have Jeremy,

00:01:55.710 --> 00:01:58.030
<v Speaker 0>Jason, and Tom, three wonderful

00:01:58.030 --> 00:02:01.149
<v Speaker 0>colleagues from Equinix. Hello, all. How are you

00:02:01.149 --> 00:02:01.470
<v Speaker 0>doing?

00:02:03.905 --> 00:02:05.825
<v Speaker 0>Hey. Go. Hi, Charles. Great.

00:02:07.585 --> 00:02:09.025
<v Speaker 2>Today? Excellent.

00:02:10.305 --> 00:02:11.185
<v Speaker 0>Awesome.

00:02:11.425 --> 00:02:13.185
<v Speaker 0>Why don't we just do a quick round

00:02:13.185 --> 00:02:15.105
<v Speaker 0>of introductions, get to know everybody, and then

00:02:15.105 --> 00:02:16.144
<v Speaker 0>we'll get started for today.

00:02:20.050 --> 00:02:22.610
<v Speaker 0>I pass the baton to you, Jeremy.

00:02:23.410 --> 00:02:24.290
<v Speaker 1>Excellent.

00:02:25.170 --> 00:02:27.810
<v Speaker 2>I am Penguin, Jeremy to my mother-in-law.

00:02:27.810 --> 00:02:31.330
<v Speaker 1>I am David's teammate at Equinix Medal,

00:02:31.570 --> 00:02:32.850
<v Speaker 1>and I'm looking forward to,

00:02:33.375 --> 00:02:35.695
<v Speaker 1>he said, pretend you know nothing about Kubernetes.

00:02:35.695 --> 00:02:37.055
<v Speaker 1>And so this is not this is not

00:02:37.055 --> 00:02:38.095
<v Speaker 1>method acting.

00:02:38.735 --> 00:02:39.935
<v Speaker 1>It's this should be a this should be

00:02:39.935 --> 00:02:40.975
<v Speaker 1>a real easy one.

00:02:41.775 --> 00:02:43.775
<v Speaker 1>Oh, I suppose a quick question. Should I

00:02:43.775 --> 00:02:45.055
<v Speaker 1>also be in the discord, or is that

00:02:45.055 --> 00:02:46.815
<v Speaker 1>where you'll be taunting us off screen?

00:02:47.560 --> 00:02:48.680
<v Speaker 0>You do not have to be on the

00:02:48.680 --> 00:02:51.319
<v Speaker 0>Discord. No. It's all good. Everything will come

00:02:51.319 --> 00:02:53.959
<v Speaker 0>through the YouTube comments, and my laughter comes

00:02:53.959 --> 00:02:55.560
<v Speaker 0>in all places. Very good.

00:02:55.959 --> 00:02:56.520
<v Speaker 1>Perfect.

00:02:59.255 --> 00:03:01.095
<v Speaker 3>Yes. And I'm Jason.

00:03:02.055 --> 00:03:02.775
<v Speaker 3>Also,

00:03:03.895 --> 00:03:06.375
<v Speaker 3>of these fine gentlemen at Equinix Metal.

00:03:06.695 --> 00:03:09.415
<v Speaker 3>I've been active in the operational life cycle

00:03:09.415 --> 00:03:12.295
<v Speaker 3>management space in Kubernetes since 2015,

00:03:12.775 --> 00:03:16.040
<v Speaker 3>and I'm looking forward to help walking

00:03:16.440 --> 00:03:19.240
<v Speaker 3>Tom and Jeremy through fixing this cluster.

00:03:22.200 --> 00:03:25.240
<v Speaker 2>And I am Tom Crow. I also work

00:03:25.240 --> 00:03:27.000
<v Speaker 2>here on the developer

00:03:27.000 --> 00:03:28.440
<v Speaker 2>relations advocacy team.

00:03:29.474 --> 00:03:30.915
<v Speaker 2>And, I

00:03:31.555 --> 00:03:34.034
<v Speaker 2>wear as a badge of honor or shame

00:03:34.034 --> 00:03:35.955
<v Speaker 2>depending on where you are that I have

00:03:35.955 --> 00:03:37.875
<v Speaker 2>never been able to keep a Kubernetes cluster

00:03:37.875 --> 00:03:39.315
<v Speaker 2>up and running. So,

00:03:39.875 --> 00:03:41.555
<v Speaker 2>I have a lot of experience on the

00:03:41.555 --> 00:03:43.155
<v Speaker 2>working with broken clusters,

00:03:43.235 --> 00:03:45.610
<v Speaker 2>very little experience fixing them. So I'm looking

00:03:45.610 --> 00:03:47.530
<v Speaker 2>forward to what we can do today. Is

00:03:47.530 --> 00:03:49.130
<v Speaker 0>there such a thing as a working Kubernetes

00:03:49.130 --> 00:03:51.370
<v Speaker 0>cluster? I'm not entirely sure.

00:03:52.010 --> 00:03:52.730
<v Speaker 2>That's

00:03:52.810 --> 00:03:54.330
<v Speaker 2>that's my white whale.

00:03:55.690 --> 00:03:57.530
<v Speaker 0>Alright. Well, I wanna say thank you all

00:03:57.530 --> 00:03:59.050
<v Speaker 0>for joining me today. I know this was

00:03:59.050 --> 00:04:00.730
<v Speaker 0>a little bit short notice, but I really

00:04:00.730 --> 00:04:02.145
<v Speaker 0>appreciate this and I think this will be

00:04:02.145 --> 00:04:03.825
<v Speaker 0>a whole lot of fun. So

00:04:04.305 --> 00:04:07.345
<v Speaker 0>we're gonna start by popping over my screen

00:04:07.345 --> 00:04:09.505
<v Speaker 0>share. We have teleport as we always use

00:04:09.505 --> 00:04:11.985
<v Speaker 0>on clusters. We have just the one cluster

00:04:12.065 --> 00:04:13.850
<v Speaker 0>that is broken. My

00:04:14.170 --> 00:04:16.649
<v Speaker 0>involvement today will merely be to click the

00:04:16.649 --> 00:04:17.610
<v Speaker 0>connect button,

00:04:18.089 --> 00:04:20.010
<v Speaker 0>which I think I do rather finely.

00:04:20.089 --> 00:04:21.690
<v Speaker 0>I will zoom in on the phone and

00:04:21.690 --> 00:04:23.210
<v Speaker 0>if you could all do me a favor,

00:04:23.290 --> 00:04:24.570
<v Speaker 0>join this active session,

00:04:25.675 --> 00:04:27.675
<v Speaker 0>give me an echo hello, not all at

00:04:27.675 --> 00:04:29.275
<v Speaker 0>once. Well, I guess you can go for

00:04:29.275 --> 00:04:30.794
<v Speaker 0>it if you want. I see one connection

00:04:30.794 --> 00:04:31.515
<v Speaker 0>so far.

00:04:32.155 --> 00:04:33.435
<v Speaker 0>Let's get two more.

00:04:34.155 --> 00:04:36.875
<v Speaker 0>There we go. Thank you. Four connections.

00:04:36.955 --> 00:04:38.880
<v Speaker 0>I've never noticed this on teleport before, but

00:04:38.880 --> 00:04:40.400
<v Speaker 0>it has this lovely little number at the

00:04:40.400 --> 00:04:41.760
<v Speaker 0>top left, and then you can hover it

00:04:41.760 --> 00:04:42.720
<v Speaker 0>to see the name.

00:04:42.960 --> 00:04:43.520
<v Speaker 0>Cool.

00:04:44.640 --> 00:04:45.440
<v Speaker 0>Yeah.

00:04:46.480 --> 00:04:47.120
<v Speaker 0>Wow.

00:04:48.080 --> 00:04:49.440
<v Speaker 0>There we go. Right.

00:04:49.760 --> 00:04:52.080
<v Speaker 0>We have hopefully a still broken cluster.

00:04:53.115 --> 00:04:55.514
<v Speaker 0>Fifty fifty at this point, I think. But

00:04:55.514 --> 00:04:57.194
<v Speaker 0>I am not gonna say any more just

00:04:57.194 --> 00:04:58.955
<v Speaker 0>now. I'll let Jason

00:04:59.514 --> 00:05:01.755
<v Speaker 0>share his thoughts and insights with you both.

00:05:01.755 --> 00:05:03.915
<v Speaker 0>And Jeremy and Tom, best of luck.

00:05:04.794 --> 00:05:07.170
<v Speaker 3>Yeah. So from the spot that we're in

00:05:07.170 --> 00:05:09.170
<v Speaker 3>right now, I think we have one of

00:05:09.170 --> 00:05:11.170
<v Speaker 3>two options. One of them is is we

00:05:11.170 --> 00:05:12.130
<v Speaker 3>can try to

00:05:13.090 --> 00:05:15.570
<v Speaker 3>access the application deployed on the cluster and

00:05:15.570 --> 00:05:17.570
<v Speaker 3>see where things are from that state. Or

00:05:17.570 --> 00:05:19.410
<v Speaker 3>since we're already at the command line,

00:05:19.650 --> 00:05:22.485
<v Speaker 3>we can do a little inspection with kubectl

00:05:22.485 --> 00:05:24.565
<v Speaker 3>and see what the state of the control

00:05:24.565 --> 00:05:26.485
<v Speaker 3>plane is and try to see if

00:05:26.885 --> 00:05:28.725
<v Speaker 3>we at least get a response back that

00:05:28.725 --> 00:05:29.205
<v Speaker 3>way.

00:05:30.405 --> 00:05:32.245
<v Speaker 1>Yeah. How would we check on if the

00:05:35.220 --> 00:05:37.620
<v Speaker 1>I was voting option one, but alright.

00:05:42.500 --> 00:05:44.820
<v Speaker 1>Yeah. So our what is our desired state?

00:05:44.820 --> 00:05:46.660
<v Speaker 1>What what should we be seeing if the

00:05:46.660 --> 00:05:47.620
<v Speaker 1>application was working?

00:05:48.905 --> 00:05:49.945
<v Speaker 3>So, ideally,

00:05:50.505 --> 00:05:52.745
<v Speaker 3>I believe that we're looking at a WordPress

00:05:52.745 --> 00:05:53.544
<v Speaker 3>application,

00:05:53.785 --> 00:05:55.865
<v Speaker 3>normally deployed on these clusters.

00:05:57.705 --> 00:05:58.425
<v Speaker 3>Although,

00:05:58.505 --> 00:05:59.225
<v Speaker 3>generally,

00:05:59.785 --> 00:06:01.705
<v Speaker 3>I don't think we actually expose it out

00:06:01.705 --> 00:06:03.760
<v Speaker 3>to the Internet. So you you would actually

00:06:03.760 --> 00:06:05.600
<v Speaker 3>have to proxy things through. So we probably

00:06:05.600 --> 00:06:07.680
<v Speaker 3>need to start with the control plane anyway

00:06:07.760 --> 00:06:10.240
<v Speaker 3>and see where things are there since

00:06:10.720 --> 00:06:13.280
<v Speaker 3>kubectl proxy is probably not gonna work for

00:06:13.280 --> 00:06:15.760
<v Speaker 3>us if our API server is not up

00:06:15.760 --> 00:06:16.160
<v Speaker 3>already.

00:06:17.545 --> 00:06:18.265
<v Speaker 3>Okay.

00:06:19.305 --> 00:06:21.625
<v Speaker 3>So probably the easiest place to start is

00:06:21.625 --> 00:06:24.905
<v Speaker 3>we can do something like kubectl version,

00:06:25.385 --> 00:06:26.265
<v Speaker 3>which should,

00:06:26.585 --> 00:06:28.505
<v Speaker 3>if the API server is up,

00:06:29.065 --> 00:06:31.145
<v Speaker 3>actually tell us what version of the server

00:06:31.145 --> 00:06:32.025
<v Speaker 3>we're connected to.

00:06:33.060 --> 00:06:34.740
<v Speaker 3>And, actually, in this case,

00:06:36.419 --> 00:06:38.020
<v Speaker 3>we are going to have to

00:06:38.500 --> 00:06:40.820
<v Speaker 3>set the cube config either through the environment

00:06:40.820 --> 00:06:42.820
<v Speaker 3>variable or the command line flag to connect

00:06:42.820 --> 00:06:43.460
<v Speaker 3>to it.

00:06:44.180 --> 00:06:47.425
<v Speaker 3>So in this case, if doing the environment

00:06:47.425 --> 00:06:48.145
<v Speaker 3>variable,

00:06:48.305 --> 00:06:49.905
<v Speaker 3>it should be kubeconfig,

00:06:49.905 --> 00:06:51.185
<v Speaker 3>all capital letters,

00:06:51.505 --> 00:06:52.625
<v Speaker 3>no spaces.

00:06:53.585 --> 00:06:54.944
<v Speaker 3>And then we can do

00:06:57.104 --> 00:06:59.505
<v Speaker 3>set it to etsy kubernetes

00:06:59.985 --> 00:07:02.430
<v Speaker 3>admin dot conf, I think, is the default

00:07:02.430 --> 00:07:02.830
<v Speaker 3>one by

00:07:03.390 --> 00:07:05.470
<v Speaker 3>no. The default admin config.

00:07:06.190 --> 00:07:06.990
<v Speaker 0>Yep.

00:07:07.150 --> 00:07:07.950
<v Speaker 0>That's right.

00:07:09.150 --> 00:07:11.790
<v Speaker 0>I think that's true for all Kubernetes clusters.

00:07:11.790 --> 00:07:12.270
<v Speaker 0>Right?

00:07:12.750 --> 00:07:13.150
<v Speaker 0>Yes.

00:07:16.435 --> 00:07:17.555
<v Speaker 3>Oh,

00:07:19.315 --> 00:07:20.995
<v Speaker 3>you didn't actually export

00:07:21.235 --> 00:07:22.435
<v Speaker 3>that environment variable.

00:07:28.300 --> 00:07:29.900
<v Speaker 3>I was gonna say, I'd be a little

00:07:29.900 --> 00:07:34.060
<v Speaker 3>surprised if Micaiah started to wrap up. Already?

00:07:35.500 --> 00:07:37.020
<v Speaker 2>For for times like this where we have

00:07:37.020 --> 00:07:39.259
<v Speaker 2>to go back and redo things, David, it'd

00:07:39.259 --> 00:07:41.020
<v Speaker 2>be nice if we had some circus music.

00:07:42.935 --> 00:07:44.775
<v Speaker 2>I'll work it back in?

00:07:48.055 --> 00:07:50.135
<v Speaker 3>Nope. Yeah. I think it's supposed to be

00:07:50.135 --> 00:07:52.775
<v Speaker 3>just conf, not config. Oh, admin dot conf.

00:07:52.775 --> 00:07:53.175
<v Speaker 1>Yeah.

00:07:57.629 --> 00:07:59.470
<v Speaker 3>Ah, there we go. Okay. So we did

00:07:59.470 --> 00:08:01.230
<v Speaker 3>get a response back from the server,

00:08:01.629 --> 00:08:03.150
<v Speaker 3>and we can see that the server is

00:08:03.150 --> 00:08:05.710
<v Speaker 3>running version one dot 20 dot four. It

00:08:05.710 --> 00:08:07.789
<v Speaker 3>matches our client version, which is what I

00:08:07.789 --> 00:08:09.870
<v Speaker 3>would expect on a Kubernetes based cluster.

00:08:12.405 --> 00:08:12.965
<v Speaker 3>Now

00:08:13.685 --> 00:08:14.805
<v Speaker 3>we can do

00:08:15.685 --> 00:08:17.525
<v Speaker 3>you know, basically, we can start with just

00:08:17.525 --> 00:08:19.205
<v Speaker 3>looking to see what the state of pods

00:08:19.205 --> 00:08:20.325
<v Speaker 3>are in the cluster.

00:08:20.805 --> 00:08:22.565
<v Speaker 3>So if you did, like, a get pods

00:08:22.565 --> 00:08:23.845
<v Speaker 3>dash capital a,

00:08:24.580 --> 00:08:25.300
<v Speaker 3>that'll

00:08:25.540 --> 00:08:28.420
<v Speaker 3>or kubectl get pods dash capital a.

00:08:28.740 --> 00:08:29.540
<v Speaker 3>That

00:08:29.860 --> 00:08:32.260
<v Speaker 3>should tell us, you know, what the current

00:08:32.260 --> 00:08:34.340
<v Speaker 3>status is of the pods across

00:08:34.580 --> 00:08:35.700
<v Speaker 3>all namespaces.

00:08:38.915 --> 00:08:39.795
<v Speaker 3>And

00:08:39.875 --> 00:08:42.915
<v Speaker 3>it looks like most everything is running except

00:08:42.915 --> 00:08:43.635
<v Speaker 3>for

00:08:44.035 --> 00:08:46.435
<v Speaker 3>that one pod in the default namespace.

00:08:49.480 --> 00:08:52.120
<v Speaker 3>So what we can do here is we

00:08:52.120 --> 00:08:55.720
<v Speaker 3>can actually do a kubectl describe on that

00:08:55.720 --> 00:08:58.040
<v Speaker 3>pod, and that will give us additional information

00:08:58.360 --> 00:09:00.920
<v Speaker 3>whether it's events that have been generated for

00:09:00.920 --> 00:09:02.760
<v Speaker 3>that pod or the status of the pod.

00:09:02.760 --> 00:09:04.360
<v Speaker 3>It'll give us a nice summary of

00:09:04.795 --> 00:09:06.155
<v Speaker 3>where things sit there.

00:09:21.230 --> 00:09:23.310
<v Speaker 3>You'll have to do a dash in to

00:09:23.310 --> 00:09:24.830
<v Speaker 3>set the namespace there.

00:09:34.855 --> 00:09:36.695
<v Speaker 1>I think Tom was riding on top of

00:09:36.695 --> 00:09:37.175
<v Speaker 1>me.

00:09:37.815 --> 00:09:38.375
<v Speaker 2>Sorry.

00:09:39.415 --> 00:09:40.135
<v Speaker 0>Jeremy.

00:09:40.855 --> 00:09:43.050
<v Speaker 0>Let's do this Passion. Pair programming styles. So

00:09:43.050 --> 00:09:44.650
<v Speaker 0>Jeremy, you take just now and I'll yell

00:09:44.650 --> 00:09:46.650
<v Speaker 0>switch, and then we'll have a talk to

00:09:46.650 --> 00:09:47.690
<v Speaker 0>you over for a bit.

00:09:49.770 --> 00:09:50.730
<v Speaker 2>There we go.

00:09:52.250 --> 00:09:54.250
<v Speaker 3>Alright. And you now actually have to tell

00:09:54.250 --> 00:09:56.090
<v Speaker 3>it the resource that we want. So you

00:09:56.090 --> 00:09:57.530
<v Speaker 3>wanna tell it a pod,

00:09:58.625 --> 00:10:01.105
<v Speaker 3>and it doesn't matter what order you

00:10:01.105 --> 00:10:03.584
<v Speaker 3>put the flags in with everything else. This

00:10:03.584 --> 00:10:05.505
<v Speaker 3>is actually gonna give you all of the

00:10:05.505 --> 00:10:06.225
<v Speaker 3>pods,

00:10:06.464 --> 00:10:08.065
<v Speaker 3>but there's only that one pod in that

00:10:08.065 --> 00:10:09.745
<v Speaker 3>namespace. So it

00:10:10.385 --> 00:10:11.665
<v Speaker 3>works effectively the same.

00:10:14.519 --> 00:10:15.320
<v Speaker 2>Okay.

00:10:17.320 --> 00:10:17.720
<v Speaker 2>We got

00:10:18.839 --> 00:10:19.560
<v Speaker 2>wait.

00:10:19.640 --> 00:10:19.720
<v Speaker 2>Alright.

00:10:26.115 --> 00:10:28.195
<v Speaker 3>So we can see here that it could

00:10:28.195 --> 00:10:31.154
<v Speaker 3>not actually create the pod sandbox for this.

00:10:43.300 --> 00:10:44.820
<v Speaker 3>And we're seeing a

00:10:45.380 --> 00:10:48.020
<v Speaker 3>connection reset by peer. So that's that's a

00:10:48.020 --> 00:10:48.820
<v Speaker 3>fun one.

00:10:51.620 --> 00:10:53.140
<v Speaker 3>The other thing we can see,

00:10:53.460 --> 00:10:55.700
<v Speaker 3>we can see some various other information here.

00:10:55.700 --> 00:10:57.140
<v Speaker 3>If we scroll up a little bit,

00:10:58.985 --> 00:11:00.905
<v Speaker 3>we can see that there are no node

00:11:00.905 --> 00:11:03.385
<v Speaker 3>selectors involved that we're dealing with here.

00:11:06.665 --> 00:11:08.025
<v Speaker 0>Is it one

00:11:08.025 --> 00:11:09.305
<v Speaker 1>port off? Should

00:11:09.865 --> 00:11:13.130
<v Speaker 1>eighty eighty and 8081 be the or different?

00:11:16.570 --> 00:11:19.370
<v Speaker 3>Where are you seeing that? Where yeah. Where's

00:11:19.370 --> 00:11:21.930
<v Speaker 2>8081, Jeremy? Oh, up there. It says port

00:11:22.090 --> 00:11:24.250
<v Speaker 2>eighty eighty one TCP,

00:11:24.330 --> 00:11:25.210
<v Speaker 2>but the

00:11:25.615 --> 00:11:29.135
<v Speaker 2>readiness is showing Liveness and readiness below are

00:11:29.135 --> 00:11:32.175
<v Speaker 1>looking at Eighty eighty. 80 80.

00:11:33.535 --> 00:11:36.415
<v Speaker 3>Yep. So I think that you have something

00:11:36.415 --> 00:11:36.655
<v Speaker 3>there.

00:11:38.970 --> 00:11:40.730
<v Speaker 3>Now we just gotta figure out which one

00:11:40.730 --> 00:11:41.850
<v Speaker 3>of the two is incorrect.

00:11:51.445 --> 00:11:53.685
<v Speaker 0>So let's talk about that. Right?

00:11:57.125 --> 00:11:58.645
<v Speaker 0>Are you gonna say something, Tom?

00:12:00.325 --> 00:12:02.084
<v Speaker 2>Well, I'm seeing up here as I went

00:12:02.084 --> 00:12:03.685
<v Speaker 2>up higher, it's saying the connection to the

00:12:03.685 --> 00:12:06.084
<v Speaker 2>server eighty eighty was refused. You specify the

00:12:06.084 --> 00:12:07.339
<v Speaker 2>right host report?

00:12:12.940 --> 00:12:15.740
<v Speaker 0>Okay. But just thinking out loud. Okay.

00:12:16.380 --> 00:12:17.660
<v Speaker 2>So what were you gonna say, David?

00:12:19.005 --> 00:12:21.245
<v Speaker 0>Yeah. I think it was a keen eye

00:12:21.245 --> 00:12:23.485
<v Speaker 0>spot in the 8081 and the 8080.

00:12:25.405 --> 00:12:26.125
<v Speaker 0>But,

00:12:26.365 --> 00:12:28.765
<v Speaker 0>Jason, would that cause a container not to

00:12:28.765 --> 00:12:29.325
<v Speaker 0>start?

00:12:31.165 --> 00:12:33.485
<v Speaker 3>I wouldn't necessarily expect that to cause the

00:12:33.485 --> 00:12:35.990
<v Speaker 3>container not to start. I would expect that

00:12:35.990 --> 00:12:36.550
<v Speaker 3>to,

00:12:37.269 --> 00:12:39.110
<v Speaker 3>cause more issues with,

00:12:40.629 --> 00:12:42.870
<v Speaker 3>after the container's already started,

00:12:43.110 --> 00:12:45.750
<v Speaker 3>because the liveness and readiness probes don't kick

00:12:45.750 --> 00:12:48.230
<v Speaker 3>in until after the pod has been created.

00:12:55.384 --> 00:12:57.704
<v Speaker 0>Alright. So what are our likely candidates? So

00:12:57.704 --> 00:12:58.665
<v Speaker 0>if we have a

00:12:59.305 --> 00:13:01.464
<v Speaker 0>unable to create sandbox or container not starting,

00:13:01.464 --> 00:13:03.144
<v Speaker 0>what are the go to things we should

00:13:03.144 --> 00:13:03.545
<v Speaker 0>be checking?

00:13:05.760 --> 00:13:06.400
<v Speaker 3>Well,

00:13:06.640 --> 00:13:08.960
<v Speaker 3>probably the first thing, we'd probably wanna see

00:13:08.960 --> 00:13:11.279
<v Speaker 3>what node this is assigned to so that

00:13:11.279 --> 00:13:14.000
<v Speaker 3>we can go ahead and inspect things on

00:13:14.000 --> 00:13:14.960
<v Speaker 3>that node.

00:13:15.279 --> 00:13:16.080
<v Speaker 3>Obviously,

00:13:16.080 --> 00:13:18.320
<v Speaker 3>you might wanna check to see if container

00:13:18.320 --> 00:13:19.440
<v Speaker 3>d is actually

00:13:19.680 --> 00:13:20.000
<v Speaker 3>running.

00:13:21.945 --> 00:13:24.105
<v Speaker 3>And if there are if it is, are

00:13:24.105 --> 00:13:26.425
<v Speaker 3>there any errors in there or in the

00:13:26.505 --> 00:13:28.585
<v Speaker 3>cubelet logs trying to

00:13:29.145 --> 00:13:31.625
<v Speaker 3>connect to container d on that server?

00:13:33.225 --> 00:13:33.625
<v Speaker 0>Okay.

00:13:35.110 --> 00:13:36.870
<v Speaker 0>So Jeremy, Tom, do you know how to

00:13:36.870 --> 00:13:39.350
<v Speaker 0>check which node part was scheduled on?

00:13:41.510 --> 00:13:42.709
<v Speaker 1>Nope. Where's that?

00:13:44.790 --> 00:13:46.070
<v Speaker 3>So

00:13:46.470 --> 00:13:48.015
<v Speaker 3>one of the places that I would probably

00:13:48.015 --> 00:13:51.295
<v Speaker 3>look is if you actually do kubectl describe

00:13:51.295 --> 00:13:53.615
<v Speaker 3>on the nodes, it'll show you what pods

00:13:53.615 --> 00:13:54.655
<v Speaker 3>are scheduled

00:13:55.135 --> 00:13:56.415
<v Speaker 3>on all of those nodes.

00:14:14.805 --> 00:14:16.565
<v Speaker 0>You know what? I didn't know that.

00:14:17.045 --> 00:14:18.085
<v Speaker 0>I

00:14:19.925 --> 00:14:21.524
<v Speaker 0>had no idea you could describe a node

00:14:21.524 --> 00:14:23.045
<v Speaker 0>and get a list of pods. That's awesome.

00:14:30.680 --> 00:14:32.040
<v Speaker 0>This looks like ours.

00:14:32.600 --> 00:14:33.320
<v Speaker 3>Yep.

00:14:33.560 --> 00:14:34.840
<v Speaker 2>There we go. That's it.

00:14:36.920 --> 00:14:39.160
<v Speaker 3>So what's the node name for that node?

00:14:46.115 --> 00:14:48.195
<v Speaker 0>It is VVXCW.

00:14:49.075 --> 00:14:49.795
<v Speaker 1>Yes.

00:14:51.395 --> 00:14:55.154
<v Speaker 3>Yep. So we should probably switch over to

00:14:55.235 --> 00:14:57.635
<v Speaker 3>a teleport session on that node.

00:14:59.610 --> 00:15:00.970
<v Speaker 0>I have made it. So

00:15:05.370 --> 00:15:07.610
<v Speaker 1>DVXCW.

00:15:07.610 --> 00:15:09.450
<v Speaker 1>Okay. Here we go. We're in.

00:15:14.505 --> 00:15:17.465
<v Speaker 0>I think Tom oh, there we go. Alright.

00:15:17.945 --> 00:15:20.185
<v Speaker 2>I had to do a weird reload, but

00:15:20.185 --> 00:15:21.065
<v Speaker 2>we're we're back.

00:15:23.060 --> 00:15:26.260
<v Speaker 3>Alright. So probably first thing first, we can

00:15:26.260 --> 00:15:28.660
<v Speaker 3>check to see if container d is actually

00:15:28.660 --> 00:15:30.900
<v Speaker 3>running on this host or not.

00:15:32.420 --> 00:15:33.940
<v Speaker 3>You know, you can do that either through,

00:15:33.940 --> 00:15:35.380
<v Speaker 3>like, p s or

00:15:36.885 --> 00:15:39.285
<v Speaker 3>system d commands to check the status of

00:15:39.285 --> 00:15:39.845
<v Speaker 3>the service.

00:16:01.665 --> 00:16:03.585
<v Speaker 0>So p s on its own will actually

00:16:03.585 --> 00:16:06.225
<v Speaker 0>only list a few processes. You'll wanted to

00:16:06.305 --> 00:16:08.465
<v Speaker 0>add some selectors to it. I tend to

00:16:08.465 --> 00:16:10.385
<v Speaker 0>use p s a u x to list

00:16:10.385 --> 00:16:11.585
<v Speaker 0>all processes.

00:16:15.720 --> 00:16:16.680
<v Speaker 2>There we go.

00:16:17.160 --> 00:16:19.720
<v Speaker 3>Alright. So we can see container d is

00:16:19.720 --> 00:16:20.920
<v Speaker 3>actually running.

00:16:21.160 --> 00:16:22.840
<v Speaker 3>Running. Yeah.

00:16:24.040 --> 00:16:26.440
<v Speaker 3>And we know the cubelet's running from

00:16:26.680 --> 00:16:29.024
<v Speaker 3>knowing that, you know, there's a node resource

00:16:29.024 --> 00:16:30.625
<v Speaker 3>there and it at least tried to schedule

00:16:30.625 --> 00:16:31.824
<v Speaker 3>it on this host.

00:16:32.545 --> 00:16:34.225
<v Speaker 3>So we can take a look at

00:16:34.944 --> 00:16:36.944
<v Speaker 3>either the kubelet logs first or the container

00:16:36.944 --> 00:16:39.264
<v Speaker 3>d logs and and try to see if

00:16:41.019 --> 00:16:43.740
<v Speaker 3>there's anything in either of those saying why

00:16:44.459 --> 00:16:47.020
<v Speaker 3>we're not seeing a running container.

00:16:48.779 --> 00:16:50.620
<v Speaker 0>Let's

00:16:50.620 --> 00:16:52.060
<v Speaker 0>look at the container d logs. Where are

00:16:52.060 --> 00:16:52.459
<v Speaker 1>those found?

00:16:53.285 --> 00:16:55.925
<v Speaker 3>Alright. So we should be able to use

00:16:56.005 --> 00:16:57.204
<v Speaker 3>journal cuddle

00:16:58.485 --> 00:17:00.884
<v Speaker 3>dash u. I think it's just container d,

00:17:00.884 --> 00:17:01.845
<v Speaker 3>the service.

00:17:03.365 --> 00:17:04.244
<v Speaker 3>And

00:17:04.885 --> 00:17:06.885
<v Speaker 3>then probably give it a dash l too

00:17:06.885 --> 00:17:08.405
<v Speaker 3>to make sure that

00:17:10.859 --> 00:17:12.619
<v Speaker 3>we get the full line length.

00:17:16.539 --> 00:17:18.700
<v Speaker 0>You'll need to add a dash dash no

00:17:18.700 --> 00:17:19.499
<v Speaker 0>pager.

00:17:20.940 --> 00:17:22.299
<v Speaker 0>Or I think you can do

00:17:23.075 --> 00:17:24.034
<v Speaker 0>l f.

00:17:24.755 --> 00:17:25.875
<v Speaker 0>I can't remember.

00:17:26.195 --> 00:17:26.835
<v Speaker 0>Go

00:17:29.715 --> 00:17:31.635
<v Speaker 3>for it. Yeah. Try l f.

00:17:32.115 --> 00:17:34.835
<v Speaker 0>No. The dash l f. Sorry. Yep.

00:17:35.635 --> 00:17:36.675
<v Speaker 1>Just an add an f to the l.

00:17:36.675 --> 00:17:37.715
<v Speaker 0>Yep. There you go. Yep.

00:17:39.770 --> 00:17:40.490
<v Speaker 2>Oh,

00:17:41.210 --> 00:17:43.049
<v Speaker 2>failed to create container tasks.

00:17:48.650 --> 00:17:49.770
<v Speaker 2>What are we getting here?

00:17:54.645 --> 00:17:55.284
<v Speaker 0>Just

00:17:55.525 --> 00:17:57.445
<v Speaker 0>so that I feel less guilty, I did

00:17:57.445 --> 00:17:59.285
<v Speaker 0>think the error message on this one would

00:17:59.285 --> 00:18:01.044
<v Speaker 0>be a lot more explicit.

00:18:05.285 --> 00:18:06.804
<v Speaker 2>OCI runtime

00:18:06.965 --> 00:18:08.085
<v Speaker 2>created failed.

00:18:10.380 --> 00:18:11.019
<v Speaker 0>It

00:18:11.500 --> 00:18:12.940
<v Speaker 0>doesn't look like container d is gonna give

00:18:12.940 --> 00:18:15.339
<v Speaker 0>you much. I would maybe try JSON's suggestion.

00:18:20.779 --> 00:18:22.379
<v Speaker 1>Kubelet logs would be where?

00:18:22.940 --> 00:18:25.405
<v Speaker 3>It'll be the pretty much the same journal

00:18:25.405 --> 00:18:27.885
<v Speaker 3>coddle command except instead of container d, we

00:18:27.885 --> 00:18:28.925
<v Speaker 3>want Kuplet.

00:18:37.325 --> 00:18:39.005
<v Speaker 0>Alright. Only I'll switch now.

00:18:40.420 --> 00:18:41.140
<v Speaker 2>Okay.

00:18:41.460 --> 00:18:41.940
<v Speaker 2>RPC.

00:19:03.475 --> 00:19:04.835
<v Speaker 0>Alright. I think I'll throw a hand in

00:19:04.835 --> 00:19:06.515
<v Speaker 0>because the header message isn't what I expected

00:19:06.515 --> 00:19:07.235
<v Speaker 0>it to be here.

00:19:07.820 --> 00:19:08.620
<v Speaker 0>I

00:19:10.220 --> 00:19:11.419
<v Speaker 0>only modified

00:19:11.500 --> 00:19:13.980
<v Speaker 0>the deployment resource. So you can do this

00:19:13.980 --> 00:19:15.660
<v Speaker 0>all from the control plane by taking a

00:19:15.660 --> 00:19:16.940
<v Speaker 0>look at the YAML.

00:19:18.380 --> 00:19:20.700
<v Speaker 0>Yeah. That that's where I was gonna head

00:19:20.700 --> 00:19:21.580
<v Speaker 3>next

00:19:22.005 --> 00:19:24.085
<v Speaker 3>because as far as the kubelet and container

00:19:24.085 --> 00:19:26.485
<v Speaker 3>d, they're not really giving us much.

00:19:26.725 --> 00:19:28.965
<v Speaker 0>Yeah. I'm surprised by that, to be honest.

00:19:30.485 --> 00:19:32.085
<v Speaker 0>I should have checked it, but I I

00:19:32.085 --> 00:19:33.365
<v Speaker 0>I thought it would have been okay.

00:19:34.660 --> 00:19:36.900
<v Speaker 0>Yeah. Yeah. So I'll I'll jump back over.

00:19:36.900 --> 00:19:38.660
<v Speaker 0>You can close this tab. Think it's safe

00:19:38.660 --> 00:19:40.020
<v Speaker 0>to say we'll we'll work from the control

00:19:40.020 --> 00:19:40.580
<v Speaker 0>plane.

00:19:41.300 --> 00:19:42.580
<v Speaker 0>Yeah. Okay.

00:19:43.140 --> 00:19:45.460
<v Speaker 0>There you go. Alright. So let's go ahead

00:19:45.460 --> 00:19:48.420
<v Speaker 3>and do a describe on the full deployment

00:19:48.995 --> 00:19:50.755
<v Speaker 3>for that. So if we do a kubectl

00:19:50.755 --> 00:19:52.115
<v Speaker 3>get deployments,

00:19:53.475 --> 00:19:55.955
<v Speaker 3>let's see what that deployment is called so

00:19:55.955 --> 00:19:57.715
<v Speaker 3>that we can go ahead and describe it.

00:19:58.755 --> 00:20:00.195
<v Speaker 2>We're doing a kubectl. What was that?

00:20:02.690 --> 00:20:04.610
<v Speaker 1>Get deployment? Get deployments.

00:20:04.850 --> 00:20:06.610
<v Speaker 1>Oh, easy enough.

00:20:07.330 --> 00:20:09.490
<v Speaker 1>Deployment singular. It helps if you spell it

00:20:09.490 --> 00:20:11.010
<v Speaker 2>right. I quite like deployments.

00:20:15.044 --> 00:20:17.284
<v Speaker 3>Alright. And so we can just do a

00:20:17.284 --> 00:20:20.565
<v Speaker 3>describe on that cluster deployment. So kubectl describe

00:20:20.565 --> 00:20:21.445
<v Speaker 3>deployment

00:20:21.684 --> 00:20:22.325
<v Speaker 3>clustered.

00:20:31.640 --> 00:20:34.120
<v Speaker 1>With a k. Yep. Yep. I see that.

00:20:34.120 --> 00:20:34.919
<v Speaker 2>Got it.

00:20:36.520 --> 00:20:38.600
<v Speaker 0>Alright. Nobody can take the nerve and watch.

00:20:38.600 --> 00:20:39.960
<v Speaker 0>That is the rule. It's a lot more

00:20:39.960 --> 00:20:41.720
<v Speaker 2>nerve wracking to tell you why, you know,

00:20:41.720 --> 00:20:43.480
<v Speaker 2>you're live. This is insane.

00:20:44.255 --> 00:20:46.975
<v Speaker 1>Are you on a nonstandard keyboard, Tom? I'm

00:20:46.975 --> 00:20:48.255
<v Speaker 2>on a standard keyboard. That's what makes it

00:20:48.255 --> 00:20:50.175
<v Speaker 2>worse. I hear you on your mechanical keyboard,

00:20:50.175 --> 00:20:51.775
<v Speaker 2>so you have an excuse, Jeremy.

00:20:53.055 --> 00:20:54.015
<v Speaker 3>Where are we here?

00:20:58.179 --> 00:20:59.460
<v Speaker 2>Okay.

00:20:59.460 --> 00:21:00.100
<v Speaker 2>Now,

00:21:00.580 --> 00:21:02.179
<v Speaker 2>live link is ready. Yeah. So you should

00:21:02.179 --> 00:21:03.700
<v Speaker 0>probably just go through this top to bottom

00:21:03.700 --> 00:21:06.499
<v Speaker 0>and look for anything in over there. Ordinary.

00:21:08.100 --> 00:21:09.140
<v Speaker 2>Okay. So we've got

00:21:10.500 --> 00:21:11.059
<v Speaker 2>There's

00:21:12.154 --> 00:21:14.955
<v Speaker 2>default. Is that correct the correct URL for

00:21:15.755 --> 00:21:18.554
<v Speaker 3>GitHub Container Registry there? Yeah. Yeah. That that

00:21:18.715 --> 00:21:19.274
<v Speaker 0>that's all good.

00:21:24.210 --> 00:21:25.970
<v Speaker 3>The next thing is we can take a

00:21:25.970 --> 00:21:28.369
<v Speaker 3>look at the port configurations.

00:21:29.730 --> 00:21:32.770
<v Speaker 3>There's one in there that's kinda standing out

00:21:32.770 --> 00:21:34.450
<v Speaker 3>to me. It's a little bit odd just

00:21:34.450 --> 00:21:35.169
<v Speaker 3>looking at it.

00:21:36.685 --> 00:21:38.924
<v Speaker 1>The liveness and readiness

00:21:39.165 --> 00:21:40.684
<v Speaker 1>URLs have no

00:21:40.925 --> 00:21:43.245
<v Speaker 1>have no IP associated with them.

00:21:45.245 --> 00:21:46.925
<v Speaker 1>Just a just a port.

00:21:52.799 --> 00:21:55.120
<v Speaker 3>Yeah. There there's also some else that's standing

00:21:55.120 --> 00:21:56.799
<v Speaker 3>out as a little bit odd to me

00:21:56.799 --> 00:21:58.479
<v Speaker 3>too as far as

00:21:58.720 --> 00:22:00.879
<v Speaker 3>some of that container configuration.

00:22:01.679 --> 00:22:02.320
<v Speaker 0>What's that?

00:22:05.165 --> 00:22:06.605
<v Speaker 1>Host port zero?

00:22:08.285 --> 00:22:09.405
<v Speaker 2>Yeah.

00:22:09.565 --> 00:22:10.685
<v Speaker 2>Zero TCP.

00:22:10.685 --> 00:22:12.525
<v Speaker 2>Yeah. Host port zero is

00:22:13.085 --> 00:22:13.804
<v Speaker 0>okay.

00:22:14.525 --> 00:22:16.845
<v Speaker 0>We're not actually exposing the host port. That's

00:22:16.845 --> 00:22:17.805
<v Speaker 0>just what that looks like.

00:22:18.550 --> 00:22:19.350
<v Speaker 0>Okay.

00:22:26.310 --> 00:22:27.270
<v Speaker 1>What is

00:22:28.070 --> 00:22:29.030
<v Speaker 1>GHCR

00:22:29.030 --> 00:22:29.430
<v Speaker 0>radio?

00:22:33.294 --> 00:22:34.894
<v Speaker 3>That said, I do think

00:22:35.535 --> 00:22:37.855
<v Speaker 3>y'all were on to something with the

00:22:38.735 --> 00:22:41.294
<v Speaker 3>the port configuration and the liveness and readiness

00:22:41.294 --> 00:22:42.815
<v Speaker 3>probes not matching up.

00:22:43.620 --> 00:22:46.420
<v Speaker 3>So we probably need to bring those back

00:22:46.420 --> 00:22:47.539
<v Speaker 3>into alignment.

00:22:49.140 --> 00:22:51.300
<v Speaker 0>Yeah. So I've spoken to the developer,

00:22:51.300 --> 00:22:52.980
<v Speaker 0>and he expects the application to run on

00:22:52.980 --> 00:22:54.580
<v Speaker 0>port eighty eighty. Just

00:22:54.820 --> 00:22:55.460
<v Speaker 0>put that there.

00:22:56.655 --> 00:22:58.655
<v Speaker 2>Okay. So we need to change

00:23:01.855 --> 00:23:03.934
<v Speaker 2>this the eighty eighty one to eighty eighty?

00:23:04.495 --> 00:23:06.415
<v Speaker 0>So Noah was also asked in the comments

00:23:06.415 --> 00:23:08.095
<v Speaker 0>about the no IP in the probes.

00:23:08.550 --> 00:23:11.270
<v Speaker 0>Yeah. This is just standard convention on liveness

00:23:11.270 --> 00:23:13.750
<v Speaker 0>and readiness probes. The IP can be embedded

00:23:13.750 --> 00:23:14.630
<v Speaker 0>that runs

00:23:15.190 --> 00:23:16.790
<v Speaker 0>against the pod itself, so will know the

00:23:16.790 --> 00:23:18.870
<v Speaker 0>port as necessary. The output always throws me

00:23:18.870 --> 00:23:21.190
<v Speaker 0>as well. It's weird, but it is okay.

00:23:22.625 --> 00:23:25.025
<v Speaker 3>Okay. So we wanna edit this thing in

00:23:25.025 --> 00:23:27.345
<v Speaker 3>place. We can do kubectl edit,

00:23:27.745 --> 00:23:30.145
<v Speaker 3>and that'll let us drop us into an

00:23:30.145 --> 00:23:30.785
<v Speaker 3>editor

00:23:31.105 --> 00:23:33.585
<v Speaker 3>to make changes to the resource. You wanna

00:23:33.585 --> 00:23:35.185
<v Speaker 3>tell it what resource, so in this case,

00:23:35.185 --> 00:23:35.665
<v Speaker 3>a deployment,

00:23:36.440 --> 00:23:38.120
<v Speaker 3>and the name of the resource.

00:23:38.200 --> 00:23:39.879
<v Speaker 3>So in this case, clustered.

00:23:40.120 --> 00:23:41.159
<v Speaker 2>Clustered.

00:23:45.640 --> 00:23:48.360
<v Speaker 1>I think with an e. Yeah. There we

00:23:48.360 --> 00:23:48.600
<v Speaker 2>go.

00:23:50.835 --> 00:23:52.354
<v Speaker 0>K. 8880.

00:23:54.195 --> 00:23:56.835
<v Speaker 1>Looks good. Scroll down. Either that or you

00:23:56.835 --> 00:23:59.154
<v Speaker 1>can search for 8081.

00:23:59.235 --> 00:23:59.634
<v Speaker 1>Yep.

00:24:01.875 --> 00:24:03.235
<v Speaker 2>I'm not seeing 8081.

00:24:04.300 --> 00:24:06.300
<v Speaker 1>You hit the bottom? You can search in

00:24:06.300 --> 00:24:08.380
<v Speaker 0>Vim by pushing forward slash and then type

00:24:08.380 --> 00:24:09.580
<v Speaker 0>in your search term.

00:24:10.780 --> 00:24:12.620
<v Speaker 2>Oh, I I see what I've done.

00:24:15.580 --> 00:24:18.780
<v Speaker 1>Yep. There you go. Classic table. Yep. There

00:24:18.780 --> 00:24:19.100
<v Speaker 2>we go.

00:24:21.755 --> 00:24:23.835
<v Speaker 2>Where did it go? Here it goes.

00:24:24.875 --> 00:24:25.995
<v Speaker 1>There it is. Yep.

00:24:28.475 --> 00:24:29.835
<v Speaker 1>Line 51, I think. Yep.

00:24:38.830 --> 00:24:41.550
<v Speaker 0>Shift and a to add to that line.

00:24:41.550 --> 00:24:42.350
<v Speaker 0>Shift.

00:24:43.070 --> 00:24:44.910
<v Speaker 0>And then push one and then hit escape.

00:24:44.910 --> 00:24:47.245
<v Speaker 0>Yeah. Sorry. Vem is the default editor. If

00:24:47.245 --> 00:24:48.525
<v Speaker 0>you've not used it before, it is a

00:24:48.525 --> 00:24:49.725
<v Speaker 0>pain in the ass.

00:24:49.885 --> 00:24:52.845
<v Speaker 0>So just type one zero and then escape

00:24:52.845 --> 00:24:55.325
<v Speaker 0>and then colon w q.

00:24:57.485 --> 00:24:58.924
<v Speaker 0>Yeah. Sorry about that, Tom.

00:24:59.565 --> 00:25:00.125
<v Speaker 2>No worries.

00:25:01.060 --> 00:25:02.660
<v Speaker 1>How many how many ways are there to

00:25:02.660 --> 00:25:03.220
<v Speaker 1>enter into There

00:25:05.540 --> 00:25:07.140
<v Speaker 0>are probably I don't know. I use four

00:25:07.140 --> 00:25:09.060
<v Speaker 0>or five regularly, but I'm sure there's many,

00:25:09.060 --> 00:25:10.660
<v Speaker 0>many more. But shift a to stay in

00:25:10.660 --> 00:25:12.100
<v Speaker 0>the current line, j to jump down the

00:25:12.100 --> 00:25:13.539
<v Speaker 0>next line. There's a whole bunch more.

00:25:14.180 --> 00:25:16.420
<v Speaker 0>Or I. I think so. But that's booting.

00:25:16.875 --> 00:25:17.674
<v Speaker 2>That

00:25:17.995 --> 00:25:20.315
<v Speaker 2>took okay. So if we we fixed that.

00:25:22.315 --> 00:25:23.115
<v Speaker 3>Alright.

00:25:23.915 --> 00:25:25.195
<v Speaker 3>So we can go ahead and take a

00:25:25.195 --> 00:25:26.715
<v Speaker 3>look at those pods again to see if

00:25:26.715 --> 00:25:27.595
<v Speaker 3>that pod

00:25:28.155 --> 00:25:30.715
<v Speaker 3>does finish coming up. Because right now,

00:25:31.470 --> 00:25:33.470
<v Speaker 3>the state of that deployment is showing one

00:25:33.470 --> 00:25:35.950
<v Speaker 3>desired, one updated, two total, and

00:25:37.470 --> 00:25:38.910
<v Speaker 3>two unavailable still.

00:25:47.385 --> 00:25:49.225
<v Speaker 0>That would be too harsh, Kevin.

00:25:50.585 --> 00:25:52.825
<v Speaker 1>What is it? He said, don't tell anyone

00:25:52.825 --> 00:25:53.945
<v Speaker 0>how to explain them.

00:25:55.305 --> 00:25:56.745
<v Speaker 2>I haven't touched them at all in a

00:25:56.745 --> 00:25:58.825
<v Speaker 2>in a minute. Let's see. Good Throw the

00:25:58.825 --> 00:26:01.570
<v Speaker 2>throw the whole throw the whole computer away.

00:26:02.690 --> 00:26:04.210
<v Speaker 0>Did you run it get pods?

00:26:05.169 --> 00:26:07.650
<v Speaker 3>I think he ran the deployment again. Yeah.

00:26:07.650 --> 00:26:09.249
<v Speaker 0>I did. Describe on the deployment.

00:26:10.690 --> 00:26:11.649
<v Speaker 2>Hello.

00:26:12.049 --> 00:26:12.850
<v Speaker 2>Get pods.

00:26:15.784 --> 00:26:18.184
<v Speaker 3>Alright. And we still see it's container So

00:26:19.865 --> 00:26:21.705
<v Speaker 3>we'll wanna hit go ahead and do another

00:26:21.705 --> 00:26:22.505
<v Speaker 3>describe

00:26:22.505 --> 00:26:24.745
<v Speaker 3>on that second instance there, the one with

00:26:24.745 --> 00:26:26.345
<v Speaker 3>the age of seventy five seconds.

00:26:35.050 --> 00:26:36.169
<v Speaker 2>This one here?

00:26:38.170 --> 00:26:40.410
<v Speaker 3>It doesn't show me your cursor, so we

00:26:40.410 --> 00:26:42.330
<v Speaker 3>want the second one of the two. Yep.

00:26:42.410 --> 00:26:45.235
<v Speaker 2>44 v 22? Okay. You need to describe

00:26:45.235 --> 00:26:47.315
<v Speaker 0>pods. Just the last part. Yep. And I

00:26:47.315 --> 00:26:49.315
<v Speaker 2>need pods. Yep. Describe

00:26:50.595 --> 00:26:51.554
<v Speaker 2>pods.

00:26:51.635 --> 00:26:52.914
<v Speaker 2>Delete space.

00:26:56.835 --> 00:26:58.835
<v Speaker 3>You need the whole name. There you go.

00:27:00.220 --> 00:27:01.339
<v Speaker 2>Need a space.

00:27:01.580 --> 00:27:03.099
<v Speaker 2>Okay. This is nerve racking.

00:27:03.899 --> 00:27:05.580
<v Speaker 0>It's alright. You can swap back in in

00:27:05.580 --> 00:27:06.219
<v Speaker 0>a minute.

00:27:06.700 --> 00:27:07.500
<v Speaker 2>If

00:27:07.500 --> 00:27:09.820
<v Speaker 2>you have not done this on Rawkode Live,

00:27:09.820 --> 00:27:11.659
<v Speaker 2>I recommend I recommend it. That's a lot

00:27:11.659 --> 00:27:11.980
<v Speaker 2>of fun.

00:27:14.735 --> 00:27:16.735
<v Speaker 0>Almost a decent year.

00:27:19.935 --> 00:27:22.815
<v Speaker 3>Alright. And we're still seeing the same issue

00:27:22.815 --> 00:27:23.375
<v Speaker 3>there.

00:27:24.015 --> 00:27:24.335
<v Speaker 3>Yeah.

00:27:25.070 --> 00:27:27.150
<v Speaker 3>However, one of the things that I'm thinking

00:27:27.150 --> 00:27:29.230
<v Speaker 3>of is as we're setting up the pod

00:27:29.230 --> 00:27:30.030
<v Speaker 3>sandbox,

00:27:30.030 --> 00:27:31.549
<v Speaker 3>we need to interact with

00:27:32.110 --> 00:27:35.070
<v Speaker 3>another pluggable component of the cluster

00:27:35.230 --> 00:27:37.390
<v Speaker 3>to kinda make that pod sandbox,

00:27:37.390 --> 00:27:39.085
<v Speaker 3>and that's gonna be

00:27:39.404 --> 00:27:41.404
<v Speaker 3>whatever CNI is deployed.

00:27:42.044 --> 00:27:43.565
<v Speaker 0>I have not touched the CNI.

00:27:43.804 --> 00:27:45.645
<v Speaker 3>You have not touched the CNI. So that

00:27:45.645 --> 00:27:47.404
<v Speaker 0>was good. It's it's really

00:27:47.565 --> 00:27:50.125
<v Speaker 0>you'll kick yourself, Jason. It's staring you in

00:27:50.125 --> 00:27:50.525
<v Speaker 0>the face.

00:27:54.030 --> 00:27:55.470
<v Speaker 2>Alright. I I would like to phone a

00:27:55.470 --> 00:27:57.390
<v Speaker 2>friend. Audience watching. Give us a hint if

00:27:57.390 --> 00:27:58.590
<v Speaker 2>you see that. I don't think the audio

00:27:58.670 --> 00:28:00.350
<v Speaker 0>like, the audience are normally pretty quick to

00:28:00.350 --> 00:28:02.030
<v Speaker 0>to phone in what they think it is,

00:28:02.030 --> 00:28:03.550
<v Speaker 0>and no one has mentioned this yet. I'm

00:28:03.550 --> 00:28:04.750
<v Speaker 0>really, really surprised.

00:28:05.550 --> 00:28:06.910
<v Speaker 0>But in the interest of time, do you

00:28:06.910 --> 00:28:08.510
<v Speaker 0>want me to get throw something out there?

00:28:09.125 --> 00:28:10.565
<v Speaker 2>Is that your way of saying that not

00:28:10.565 --> 00:28:12.405
<v Speaker 2>only are your guests, but your audience is

00:28:12.405 --> 00:28:14.485
<v Speaker 2>also disappointing you greatly on this one, David?

00:28:14.485 --> 00:28:15.684
<v Speaker 0>Yeah. Exactly.

00:28:17.525 --> 00:28:19.445
<v Speaker 2>Yeah. Can can you throw us a bone?

00:28:20.725 --> 00:28:23.045
<v Speaker 0>Alright. I've highlighted the oh, you might not

00:28:23.045 --> 00:28:24.325
<v Speaker 0>be able to see the screen share.

00:28:25.300 --> 00:28:26.580
<v Speaker 1>Yeah. I see the share.

00:28:26.980 --> 00:28:29.140
<v Speaker 1>Limits c m. C p five.

00:28:30.900 --> 00:28:31.940
<v Speaker 3>Oh,

00:28:32.100 --> 00:28:32.740
<v Speaker 3>yes.

00:28:33.220 --> 00:28:35.380
<v Speaker 0>So I really expected the error message to

00:28:35.380 --> 00:28:36.020
<v Speaker 0>complain

00:28:37.605 --> 00:28:38.965
<v Speaker 0>about the limits. But

00:28:39.365 --> 00:28:42.485
<v Speaker 0>Yeah. That was disappointing. So we we probably

00:28:42.485 --> 00:28:46.565
<v Speaker 3>want more than one Mibi byte of memory

00:28:46.565 --> 00:28:47.764
<v Speaker 3>for our pod.

00:28:48.885 --> 00:28:50.565
<v Speaker 0>I have so much respect for you for

00:28:50.565 --> 00:28:52.405
<v Speaker 0>actually calling it a Mibi byte and not,

00:28:52.730 --> 00:28:53.530
<v Speaker 0>you know,

00:28:54.810 --> 00:28:57.210
<v Speaker 0>maxing up SI and non SI standards.

00:28:57.690 --> 00:28:59.530
<v Speaker 3>Alright. So we probably wanna go in and

00:28:59.530 --> 00:29:01.770
<v Speaker 3>re edit that deployment and increase

00:29:02.330 --> 00:29:04.169
<v Speaker 3>that memory count a little bit.

00:29:04.810 --> 00:29:06.810
<v Speaker 2>What's the the full deployment here?

00:29:07.455 --> 00:29:08.335
<v Speaker 0>After

00:29:08.335 --> 00:29:10.335
<v Speaker 0>this command, it's swoppy time again.

00:29:13.054 --> 00:29:14.015
<v Speaker 0>Nope.

00:29:14.015 --> 00:29:16.255
<v Speaker 0>The deployment's just called clustered. That's the the

00:29:16.255 --> 00:29:18.335
<v Speaker 0>pod. Yeah. Yep. That's the pod. I'm not

00:29:18.335 --> 00:29:20.095
<v Speaker 2>going to do the full thing. And, Jeremy,

00:29:20.095 --> 00:29:20.495
<v Speaker 2>you're up.

00:29:21.649 --> 00:29:22.690
<v Speaker 1>Alright.

00:29:23.250 --> 00:29:25.809
<v Speaker 1>We are going back down to two Mibi

00:29:25.809 --> 00:29:26.529
<v Speaker 2>bytes.

00:29:27.730 --> 00:29:29.490
<v Speaker 2>We'll just keep adding a Mibi byte until

00:29:29.490 --> 00:29:29.890
<v Speaker 2>it works.

00:29:35.455 --> 00:29:38.335
<v Speaker 0>So should we talk about resource requests and

00:29:38.335 --> 00:29:40.335
<v Speaker 0>limits where we get the quick TDLDR

00:29:40.335 --> 00:29:41.215
<v Speaker 0>on that?

00:29:42.015 --> 00:29:43.294
<v Speaker 2>Yeah. What do you what do need to

00:29:43.294 --> 00:29:45.215
<v Speaker 2>get a Kubernetes cluster up and running? What

00:29:45.215 --> 00:29:46.654
<v Speaker 2>what should we have here as a minimum?

00:29:47.780 --> 00:29:49.460
<v Speaker 3>So that's

00:29:49.460 --> 00:29:52.659
<v Speaker 3>highly gonna depend on your application.

00:29:53.220 --> 00:29:53.779
<v Speaker 3>And

00:29:54.419 --> 00:29:56.419
<v Speaker 3>underneath the resources, have

00:29:56.740 --> 00:29:57.619
<v Speaker 3>two different

00:29:58.580 --> 00:29:59.539
<v Speaker 3>kind of

00:30:00.554 --> 00:30:03.434
<v Speaker 3>types of resource limits that you you have

00:30:03.434 --> 00:30:05.595
<v Speaker 3>the limits and then you have the requests.

00:30:06.315 --> 00:30:08.475
<v Speaker 3>Mhmm. The requests are used to make scheduling

00:30:08.475 --> 00:30:10.794
<v Speaker 3>decisions to say, you know, where should I

00:30:10.794 --> 00:30:12.234
<v Speaker 3>schedule this pod

00:30:12.235 --> 00:30:14.315
<v Speaker 3>based on how much memory

00:30:15.080 --> 00:30:18.919
<v Speaker 3>I'm gonna request from it. Limits actually put

00:30:20.040 --> 00:30:22.680
<v Speaker 3>actual kinda guard barriers. It will not let

00:30:22.680 --> 00:30:24.360
<v Speaker 3>the application use anymore.

00:30:24.680 --> 00:30:27.400
<v Speaker 3>It'll define some c groups on the host

00:30:27.775 --> 00:30:29.775
<v Speaker 3>and limit the amount of memory that you

00:30:29.775 --> 00:30:31.615
<v Speaker 3>have specifically to what you set in the

00:30:31.615 --> 00:30:32.335
<v Speaker 3>limits.

00:30:33.775 --> 00:30:35.855
<v Speaker 2>So this is what'll keep me from so

00:30:35.855 --> 00:30:38.095
<v Speaker 2>this is what'll keep me from deploying a

00:30:38.095 --> 00:30:41.054
<v Speaker 2>a 300 gigabyte

00:30:40.290 --> 00:30:41.970
<v Speaker 2>server somewhere for

00:30:43.250 --> 00:30:45.090
<v Speaker 2>my my cluster. Right?

00:30:45.490 --> 00:30:47.810
<v Speaker 3>Yeah. Exactly. This is what allows you to

00:30:47.810 --> 00:30:49.090
<v Speaker 3>basically define,

00:30:49.330 --> 00:30:51.330
<v Speaker 3>you know, how much over provisioning you want

00:30:51.330 --> 00:30:53.490
<v Speaker 3>in your cluster and Mhmm.

00:30:53.890 --> 00:30:56.385
<v Speaker 3>You know, avoid, you know, too much over

00:30:56.385 --> 00:30:58.065
<v Speaker 3>provisioning for those applications.

00:30:58.305 --> 00:31:00.465
<v Speaker 3>And generally for Kubernetes clusters,

00:31:00.865 --> 00:31:03.345
<v Speaker 3>you disable swap on the host. So

00:31:03.985 --> 00:31:06.225
<v Speaker 3>when things do actually run out of physical

00:31:06.225 --> 00:31:07.585
<v Speaker 3>memory on the host,

00:31:07.745 --> 00:31:10.945
<v Speaker 3>you're looking specifically at oom kills rather than

00:31:12.190 --> 00:31:13.469
<v Speaker 3>thrashing swap

00:31:13.470 --> 00:31:16.190
<v Speaker 3>when those things go bad. So you really

00:31:16.190 --> 00:31:19.229
<v Speaker 3>wanna make sure that when you're defining your

00:31:19.470 --> 00:31:20.589
<v Speaker 3>applications,

00:31:20.590 --> 00:31:22.429
<v Speaker 3>you want to try to match

00:31:23.070 --> 00:31:24.829
<v Speaker 3>your request and limits

00:31:25.070 --> 00:31:28.155
<v Speaker 3>closely to what, you know, the application generally

00:31:28.155 --> 00:31:28.874
<v Speaker 3>uses.

00:31:29.195 --> 00:31:31.035
<v Speaker 3>And you can you know, if sometimes it'll

00:31:31.035 --> 00:31:32.315
<v Speaker 3>surge a little bit, you can set the

00:31:32.315 --> 00:31:34.315
<v Speaker 3>limits a little bit higher than the requests,

00:31:35.035 --> 00:31:36.075
<v Speaker 3>that sort of thing.

00:31:37.195 --> 00:31:39.995
<v Speaker 3>In this case, we're talking about a WordPress

00:31:39.995 --> 00:31:42.920
<v Speaker 3>application, I or is this a WordPress application

00:31:42.920 --> 00:31:44.600
<v Speaker 3>or is this something else? Yeah. It's just

00:31:44.600 --> 00:31:46.440
<v Speaker 0>a small rust binary. I mean, we could

00:31:46.440 --> 00:31:48.680
<v Speaker 0>either remove the limits altogether or you can

00:31:48.680 --> 00:31:51.320
<v Speaker 0>throw it up to, you know, one CPU

00:31:51.320 --> 00:31:52.920
<v Speaker 0>and a hundred mega RAM or something like

00:31:52.920 --> 00:31:54.520
<v Speaker 0>That's probably over provisioning,

00:31:54.520 --> 00:31:54.680
<v Speaker 0>but

00:31:56.195 --> 00:31:57.875
<v Speaker 0>they also don't need to be set.

00:32:00.515 --> 00:32:02.275
<v Speaker 0>You can set that to 500 or 1,000

00:32:02.275 --> 00:32:03.395
<v Speaker 0>whenever you fancy.

00:32:05.315 --> 00:32:06.755
<v Speaker 0>And the way to work this out as

00:32:06.755 --> 00:32:08.580
<v Speaker 0>a question I think we all probably get

00:32:08.580 --> 00:32:09.860
<v Speaker 0>a lot is, oh, how do I set

00:32:09.860 --> 00:32:12.660
<v Speaker 0>them as this continuous profile, good metrics, all

00:32:12.660 --> 00:32:15.060
<v Speaker 0>of that. Just really really start to understand

00:32:15.060 --> 00:32:15.940
<v Speaker 0>your application

00:32:16.100 --> 00:32:18.740
<v Speaker 0>under multiple scenarios to low load, high load,

00:32:18.740 --> 00:32:18.980
<v Speaker 0>etcetera.

00:32:20.005 --> 00:32:22.325
<v Speaker 3>Yep. And there's things like the

00:32:22.804 --> 00:32:23.605
<v Speaker 3>vertical

00:32:24.085 --> 00:32:25.924
<v Speaker 3>autoscaler that you can use

00:32:26.725 --> 00:32:28.804
<v Speaker 3>to get a baseline for what your application

00:32:28.804 --> 00:32:30.644
<v Speaker 3>uses. It'll automatically

00:32:31.205 --> 00:32:33.525
<v Speaker 3>increase those limits for you

00:32:34.140 --> 00:32:34.780
<v Speaker 3>as

00:32:34.940 --> 00:32:37.260
<v Speaker 3>use kind of increases on the application.

00:32:37.820 --> 00:32:38.860
<v Speaker 2>We're running.

00:32:43.340 --> 00:32:44.620
<v Speaker 2>David, did we do the thing?

00:32:46.725 --> 00:32:48.885
<v Speaker 0>I'll be honest. I did not expect that

00:32:48.885 --> 00:32:50.644
<v Speaker 0>to be running after that.

00:32:54.085 --> 00:32:55.445
<v Speaker 0>So clearly,

00:32:55.605 --> 00:32:57.365
<v Speaker 0>one of the other breaks has not really

00:32:57.365 --> 00:32:59.445
<v Speaker 0>panned out, but that's okay. But if you

00:32:59.445 --> 00:33:00.725
<v Speaker 0>can do a get pods on the cube

00:33:00.725 --> 00:33:02.420
<v Speaker 0>system namespace, we can maybe take a look

00:33:02.420 --> 00:33:03.620
<v Speaker 0>at what should have happened.

00:33:04.580 --> 00:33:06.419
<v Speaker 0>There are more things to fix, don't worry.

00:33:07.380 --> 00:33:09.539
<v Speaker 1>Kube cuddle. Nope. Kube cuddle.

00:33:10.180 --> 00:33:11.860
<v Speaker 0>And I can see the chat.

00:33:12.420 --> 00:33:13.860
<v Speaker 2>Oh, this isn't my turn anyway. This is

00:33:13.860 --> 00:33:14.820
<v Speaker 2>your turn, Jeremy. Sorry.

00:33:18.095 --> 00:33:20.735
<v Speaker 3>To follow-up on the profiling discussion, Noel in

00:33:20.735 --> 00:33:22.575
<v Speaker 3>the chat is mentioning that there was a

00:33:22.575 --> 00:33:25.215
<v Speaker 3>talk at KubeCon talking about using the VPA

00:33:25.215 --> 00:33:26.654
<v Speaker 3>to profile applications.

00:33:27.054 --> 00:33:27.455
<v Speaker 0>Nice.

00:33:28.830 --> 00:33:30.350
<v Speaker 2>Yep. There we go. Oh, okay.

00:33:31.710 --> 00:33:34.830
<v Speaker 1>Which namespace am I? In kube system namespace,

00:33:34.830 --> 00:33:37.549
<v Speaker 0>please. Kube dash system. That's where all of

00:33:37.549 --> 00:33:39.470
<v Speaker 0>the Kubernetes control plane stuff runs.

00:33:46.025 --> 00:33:47.865
<v Speaker 0>I think I'm about to learn something else

00:33:47.865 --> 00:33:49.865
<v Speaker 0>today that I didn't know. Yeah.

00:33:50.345 --> 00:33:51.545
<v Speaker 0>You see anything weird here?

00:33:56.860 --> 00:33:58.860
<v Speaker 3>Our scheduler is not

00:33:58.860 --> 00:34:00.940
<v Speaker 3>happy right now. But we did get a

00:34:00.940 --> 00:34:01.979
<v Speaker 0>scheduled pod.

00:34:03.500 --> 00:34:05.739
<v Speaker 1>We did. It's running, but it's not ready.

00:34:06.460 --> 00:34:06.860
<v Speaker 0>Yes.

00:34:09.284 --> 00:34:09.844
<v Speaker 3>So,

00:34:10.165 --> 00:34:12.324
<v Speaker 3>we can go ahead and, do a describe

00:34:12.324 --> 00:34:14.245
<v Speaker 3>on that, and see

00:34:14.484 --> 00:34:15.685
<v Speaker 3>what's going on there.

00:34:21.949 --> 00:34:23.630
<v Speaker 3>And then in this case, we'll also have

00:34:23.630 --> 00:34:26.510
<v Speaker 3>to specify the namespace like we did above,

00:34:26.510 --> 00:34:28.270
<v Speaker 3>so dash n cube dash system.

00:34:39.815 --> 00:34:41.735
<v Speaker 3>And then you'll probably wanna copy and paste

00:34:41.735 --> 00:34:43.575
<v Speaker 3>because I we haven't configured

00:34:43.815 --> 00:34:45.895
<v Speaker 3>tab completion on this host.

00:34:46.614 --> 00:34:48.375
<v Speaker 2>So I do have a question. If the

00:34:48.375 --> 00:34:50.215
<v Speaker 2>scheduler is not working, why how did it

00:34:50.215 --> 00:34:50.614
<v Speaker 2>schedule?

00:34:52.830 --> 00:34:55.230
<v Speaker 0>So I didn't expect the scheduler to really

00:34:55.230 --> 00:34:56.910
<v Speaker 0>respond to any requests

00:34:56.910 --> 00:34:58.350
<v Speaker 0>because it wouldn't end up in a service

00:34:58.350 --> 00:34:59.950
<v Speaker 0>endpoint, but that was really naive of me

00:34:59.950 --> 00:35:01.950
<v Speaker 0>and I now understand that that's stupid because

00:35:01.950 --> 00:35:03.950
<v Speaker 0>it's a controller that's actually listening to the

00:35:03.950 --> 00:35:06.224
<v Speaker 0>Kubernetes API server. So

00:35:07.184 --> 00:35:08.385
<v Speaker 0>the thing I did

00:35:09.025 --> 00:35:11.984
<v Speaker 0>is merely amusing at best, but completely pointless

00:35:11.984 --> 00:35:13.505
<v Speaker 0>and clustered at worst.

00:35:17.664 --> 00:35:18.944
<v Speaker 0>Because there's only one schedule.

00:35:20.460 --> 00:35:21.820
<v Speaker 0>Anyway, it doesn't matter.

00:35:22.140 --> 00:35:23.580
<v Speaker 0>You you can fix it or not fix

00:35:23.580 --> 00:35:24.940
<v Speaker 0>it. It's up to you. It may be

00:35:24.940 --> 00:35:26.940
<v Speaker 0>interesting to look at what I changed.

00:35:33.245 --> 00:35:34.445
<v Speaker 1>Alright. Describe

00:35:34.845 --> 00:35:37.245
<v Speaker 0>Let me just scroll up, scroll down. Like

00:35:38.925 --> 00:35:39.725
<v Speaker 2>Let's go up.

00:35:49.780 --> 00:35:52.420
<v Speaker 3>So and because it's showing that it's not

00:35:52.420 --> 00:35:53.780
<v Speaker 3>ready, that tells us that the,

00:35:54.420 --> 00:35:55.780
<v Speaker 3>readiness probe

00:35:55.780 --> 00:35:56.900
<v Speaker 3>is not firing.

00:35:59.525 --> 00:36:01.125
<v Speaker 3>And if we look at the

00:36:01.445 --> 00:36:02.325
<v Speaker 3>liveness

00:36:02.725 --> 00:36:04.325
<v Speaker 3>probe definition there,

00:36:04.965 --> 00:36:07.685
<v Speaker 3>we can see that there are indeed failures.

00:36:08.565 --> 00:36:10.485
<v Speaker 3>And we can also compare the

00:36:10.725 --> 00:36:11.365
<v Speaker 3>actual

00:36:11.870 --> 00:36:14.510
<v Speaker 3>command line used for it to that

00:36:16.110 --> 00:36:18.110
<v Speaker 3>to that probe configuration.

00:36:21.710 --> 00:36:23.070
<v Speaker 0>And if I jump out at you, Jeremy,

00:36:23.070 --> 00:36:23.550
<v Speaker 0>or Tom?

00:36:28.545 --> 00:36:29.825
<v Speaker 1>Not just yet.

00:36:31.665 --> 00:36:34.305
<v Speaker 3>So there's a flag at the end of

00:36:36.465 --> 00:36:39.400
<v Speaker 3>the defined command there that is standing out

00:36:39.400 --> 00:36:40.120
<v Speaker 3>to me.

00:36:45.560 --> 00:36:46.920
<v Speaker 2>I sense failure.

00:36:50.280 --> 00:36:52.120
<v Speaker 3>So if we're looking just a little bit

00:36:52.120 --> 00:36:53.240
<v Speaker 3>up of where

00:36:53.640 --> 00:36:56.575
<v Speaker 3>Makai has highlighted on his screen,

00:36:57.055 --> 00:36:59.055
<v Speaker 3>we see the tail end of command line

00:36:59.055 --> 00:36:59.935
<v Speaker 3>arguments there.

00:37:08.860 --> 00:37:11.900
<v Speaker 1>Is that a little bit more? So

00:37:11.900 --> 00:37:14.700
<v Speaker 1>you've got port zero there, but also,

00:37:15.980 --> 00:37:16.780
<v Speaker 1>port

00:37:18.220 --> 00:37:19.020
<v Speaker 1>ten

00:37:19.100 --> 00:37:20.140
<v Speaker 1>one twos,

00:37:20.460 --> 00:37:22.380
<v Speaker 1>one zero two five nine

00:37:22.815 --> 00:37:23.535
<v Speaker 1>as

00:37:24.335 --> 00:37:25.135
<v Speaker 1>the

00:37:25.454 --> 00:37:27.455
<v Speaker 1>for liveness and startup.

00:37:27.695 --> 00:37:28.735
<v Speaker 2>Yeah. Yeah.

00:37:31.615 --> 00:37:33.775
<v Speaker 0>I haven't I haven't modified ports.

00:37:34.734 --> 00:37:35.695
<v Speaker 0>Okay. Not out of.

00:37:36.500 --> 00:37:38.420
<v Speaker 0>Yeah. That port zero is another thing that

00:37:38.420 --> 00:37:42.100
<v Speaker 0>always confuses me on clustered, but preferably legal.

00:37:42.819 --> 00:37:44.420
<v Speaker 3>Oh, yes. That's probably

00:37:45.940 --> 00:37:47.620
<v Speaker 3>is that disabling the

00:37:47.940 --> 00:37:49.300
<v Speaker 3>HTTP endpoint for it?

00:37:50.605 --> 00:37:52.365
<v Speaker 0>I don't recall, but let's say that sounds

00:37:52.365 --> 00:37:53.565
<v Speaker 0>like a pretty good shit.

00:37:56.285 --> 00:37:58.845
<v Speaker 0>Again, it's it's it's it's simpler

00:37:59.245 --> 00:38:01.405
<v Speaker 0>than user thinking about it.

00:38:05.210 --> 00:38:06.970
<v Speaker 0>Anyone in chat see the

00:38:08.010 --> 00:38:09.210
<v Speaker 0>see the thing?

00:38:13.850 --> 00:38:15.450
<v Speaker 0>Oh, you're gonna kick yourselves again.

00:38:16.695 --> 00:38:18.295
<v Speaker 2>Hold hold on. I'm not It is a

00:38:18.295 --> 00:38:19.895
<v Speaker 0>it's a pressure, though. Do you know you

00:38:19.895 --> 00:38:21.575
<v Speaker 0>got people watching you and you're looking at

00:38:21.575 --> 00:38:22.535
<v Speaker 0>it, like

00:38:22.935 --> 00:38:23.575
<v Speaker 0>but

00:38:23.735 --> 00:38:25.415
<v Speaker 0>I I I promise you, I have kept

00:38:25.415 --> 00:38:26.295
<v Speaker 0>all of these

00:38:26.935 --> 00:38:27.895
<v Speaker 0>superficial

00:38:27.895 --> 00:38:28.455
<v Speaker 0>breaks.

00:38:32.830 --> 00:38:34.670
<v Speaker 0>You see any difference between the liveness probe

00:38:34.670 --> 00:38:35.870
<v Speaker 0>and the startup probe?

00:38:36.270 --> 00:38:39.310
<v Speaker 3>Oh, there's a nice long delay in there.

00:38:39.550 --> 00:38:42.510
<v Speaker 2>That fifty to thousand second delay.

00:38:42.990 --> 00:38:44.750
<v Speaker 0>You know how many hours fifty thousand seconds

00:38:44.750 --> 00:38:44.990
<v Speaker 0>is?

00:38:46.065 --> 00:38:46.785
<v Speaker 0>Thirteen.

00:38:49.905 --> 00:38:51.905
<v Speaker 2>Okay. That felt too obvious though.

00:38:53.105 --> 00:38:55.265
<v Speaker 0>I I have kept I have kept the

00:38:55.265 --> 00:38:57.105
<v Speaker 0>the break simple and I love the one

00:38:57.105 --> 00:38:59.410
<v Speaker 0>that's just showing. It's like even the simple

00:38:59.410 --> 00:39:01.730
<v Speaker 0>things are so easy to overlook when you're

00:39:01.730 --> 00:39:03.330
<v Speaker 0>trying to fix something because

00:39:04.290 --> 00:39:06.130
<v Speaker 0>but yeah, there you go. So

00:39:06.450 --> 00:39:07.890
<v Speaker 0>how how do we fix

00:39:08.770 --> 00:39:11.090
<v Speaker 0>the scheduler, Jason? What's different about that to

00:39:11.090 --> 00:39:12.290
<v Speaker 0>other workloads on the cluster?

00:39:14.954 --> 00:39:16.235
<v Speaker 3>So,

00:39:16.954 --> 00:39:17.595
<v Speaker 3>obviously,

00:39:18.875 --> 00:39:21.194
<v Speaker 3>what we're looking at here is the static

00:39:21.194 --> 00:39:21.995
<v Speaker 3>pod

00:39:22.075 --> 00:39:24.875
<v Speaker 3>mirror manifest. So the control plane components on

00:39:24.875 --> 00:39:26.474
<v Speaker 3>a Kubernetes based cluster

00:39:26.640 --> 00:39:29.520
<v Speaker 3>are deployed via static manifest. And

00:39:30.319 --> 00:39:32.480
<v Speaker 3>if we actually try to edit them through

00:39:32.480 --> 00:39:34.559
<v Speaker 3>the API, they would not actually have any

00:39:34.559 --> 00:39:35.280
<v Speaker 3>effect.

00:39:35.760 --> 00:39:37.920
<v Speaker 3>So we'd actually wanna look on disk at

00:39:37.920 --> 00:39:39.440
<v Speaker 3>the configuration here,

00:39:40.079 --> 00:39:40.640
<v Speaker 3>and

00:39:41.795 --> 00:39:44.595
<v Speaker 3>that's basically gonna be in the Etsy Kubernetes

00:39:44.595 --> 00:39:45.715
<v Speaker 3>manifest directory

00:39:46.515 --> 00:39:48.995
<v Speaker 3>by default. So assuming that

00:39:49.795 --> 00:39:52.435
<v Speaker 3>Micaiah has an thrown us a curveball and

00:39:52.435 --> 00:39:53.395
<v Speaker 3>modified

00:39:53.555 --> 00:39:56.275
<v Speaker 3>where the manifests are, that's where we wanna

00:39:56.275 --> 00:39:58.700
<v Speaker 3>look for the kube scheduler manifests scheduler configuration

00:39:58.700 --> 00:39:59.340
<v Speaker 0>there.

00:40:00.220 --> 00:40:02.460
<v Speaker 0>I have not done that. I

00:40:02.460 --> 00:40:12.674
<v Speaker 0>promise. Yeah. So a lot of the comments

00:40:12.674 --> 00:40:14.915
<v Speaker 0>there are were pointing to the Port Zito

00:40:14.915 --> 00:40:16.915
<v Speaker 0>as well, but that is a a red

00:40:16.915 --> 00:40:17.635
<v Speaker 0>herring.

00:40:20.755 --> 00:40:22.595
<v Speaker 3>And that's one of the fun things

00:40:22.915 --> 00:40:24.115
<v Speaker 3>because Kubernetes

00:40:24.115 --> 00:40:25.235
<v Speaker 3>now is

00:40:25.580 --> 00:40:27.660
<v Speaker 3>let's see. It's 2021,

00:40:27.900 --> 00:40:30.140
<v Speaker 3>originally started in 2014,

00:40:30.140 --> 00:40:30.940
<v Speaker 3>the project.

00:40:31.500 --> 00:40:32.940
<v Speaker 3>So we have a little bit of legacy

00:40:32.940 --> 00:40:35.660
<v Speaker 3>now. So every once in a while, there

00:40:35.660 --> 00:40:37.980
<v Speaker 3>are a lot of command line flags that

00:40:37.980 --> 00:40:39.900
<v Speaker 3>need to be set in kind of awkward

00:40:39.900 --> 00:40:40.780
<v Speaker 3>ways to

00:40:41.105 --> 00:40:43.105
<v Speaker 3>kind of deal with that legacy. So you

00:40:43.105 --> 00:40:44.465
<v Speaker 3>do end up with some of those

00:40:45.025 --> 00:40:47.904
<v Speaker 3>things that look weird but are actually perfectly

00:40:47.904 --> 00:40:48.465
<v Speaker 3>fine.

00:40:48.785 --> 00:40:49.425
<v Speaker 0>Yep.

00:40:50.865 --> 00:40:53.505
<v Speaker 0>And it's only through trial, editor, and experience

00:40:53.505 --> 00:40:54.704
<v Speaker 0>that you actually pack up in a lot

00:40:54.704 --> 00:40:57.350
<v Speaker 0>of those. Like, even prior to clustered, I

00:40:57.350 --> 00:40:58.870
<v Speaker 0>had no idea about all these random port

00:40:58.870 --> 00:41:01.670
<v Speaker 0>zeros and stuff. Yeah. Nor nor should you.

00:41:02.310 --> 00:41:04.070
<v Speaker 1>I was gonna use Vom to edit it

00:41:04.070 --> 00:41:05.990
<v Speaker 1>to see if that was it jumped right

00:41:05.990 --> 00:41:08.310
<v Speaker 1>to the place. So I assumed that that

00:41:08.310 --> 00:41:10.775
<v Speaker 0>was the That's cool. Vim has

00:41:11.015 --> 00:41:12.855
<v Speaker 0>been useful for that before on clustered, I

00:41:12.855 --> 00:41:13.655
<v Speaker 0>gotta say.

00:41:14.934 --> 00:41:16.135
<v Speaker 1>I assume

00:41:16.535 --> 00:41:19.015
<v Speaker 1>there's a way to erase your most recent

00:41:19.174 --> 00:41:21.970
<v Speaker 1>most recent edited line. Yeah.

00:41:21.970 --> 00:41:24.370
<v Speaker 0>I'm sure there's probably some Vim cache fail.

00:41:24.370 --> 00:41:25.010
<v Speaker 0>I could

00:41:25.650 --> 00:41:27.970
<v Speaker 0>blow away, but yeah. You can save that

00:41:27.970 --> 00:41:30.290
<v Speaker 0>five ten and it's all good. Just save

00:41:30.290 --> 00:41:31.650
<v Speaker 0>it and then I should get.

00:41:33.665 --> 00:41:35.825
<v Speaker 0>There you go. One bug fixed.

00:41:41.985 --> 00:41:44.145
<v Speaker 0>Get pods as your your nother star here.

00:41:44.145 --> 00:41:45.825
<v Speaker 0>I'd keep focusing on that. Yeah.

00:41:50.930 --> 00:41:52.450
<v Speaker 0>So that should be on. You should see

00:41:52.450 --> 00:41:53.890
<v Speaker 0>that go to ready and

00:41:54.450 --> 00:41:56.450
<v Speaker 0>what so the delay to ten seconds. Yeah.

00:41:56.450 --> 00:41:57.970
<v Speaker 0>Just let it open seconds.

00:41:59.089 --> 00:42:00.690
<v Speaker 0>And so you can actually do a get

00:42:00.690 --> 00:42:02.530
<v Speaker 0>pods add a dash w to the end

00:42:02.530 --> 00:42:04.210
<v Speaker 0>of that. That would actually watch the event.

00:42:04.494 --> 00:42:06.015
<v Speaker 1>Watching it? Yeah.

00:42:09.055 --> 00:42:11.055
<v Speaker 0>It depends on how many I think it

00:42:11.055 --> 00:42:12.734
<v Speaker 0>was three. So when I guess to thirty

00:42:12.734 --> 00:42:14.655
<v Speaker 0>seconds, we should see a one on one.

00:42:16.175 --> 00:42:18.415
<v Speaker 0>And after this is healthy, we'll swap back

00:42:18.415 --> 00:42:19.295
<v Speaker 0>to Tom, please.

00:42:21.760 --> 00:42:22.800
<v Speaker 2>No. Thank you.

00:42:25.839 --> 00:42:28.000
<v Speaker 0>Noel is enjoying it. The simple things that

00:42:28.000 --> 00:42:28.960
<v Speaker 0>get overlooked.

00:42:29.039 --> 00:42:31.680
<v Speaker 0>Yeah. Definitely. It's it's easy to overlook the

00:42:31.680 --> 00:42:32.160
<v Speaker 0>simple things.

00:42:35.655 --> 00:42:37.095
<v Speaker 0>One scheduler.

00:42:37.095 --> 00:42:38.375
<v Speaker 0>We don't have to wait on it as

00:42:38.375 --> 00:42:39.975
<v Speaker 0>as we found out the break doesn't even

00:42:39.975 --> 00:42:42.375
<v Speaker 0>work anyway because the scheduler continues to act

00:42:42.375 --> 00:42:44.375
<v Speaker 0>as a scheduler even when it's not ready.

00:42:44.375 --> 00:42:46.455
<v Speaker 0>So we we can just get pods and

00:42:46.455 --> 00:42:47.495
<v Speaker 0>move on just now.

00:42:55.130 --> 00:42:57.450
<v Speaker 0>No. There are no honks or rec rolls.

00:42:57.450 --> 00:42:58.410
<v Speaker 0>I was there.

00:42:58.970 --> 00:43:00.410
<v Speaker 0>Let's take it easy on this one.

00:43:03.375 --> 00:43:04.095
<v Speaker 0>Alright.

00:43:04.255 --> 00:43:05.215
<v Speaker 0>Thanks for listening. We

00:43:06.095 --> 00:43:07.615
<v Speaker 2>look like we're running. Right?

00:43:08.415 --> 00:43:10.175
<v Speaker 3>Do we wanna go ahead and run that

00:43:10.175 --> 00:43:12.095
<v Speaker 3>again for all namespaces

00:43:12.255 --> 00:43:14.815
<v Speaker 3>and see where everything else is sitting to?

00:43:14.815 --> 00:43:18.335
<v Speaker 3>So get pods dash capital a? Yep. Yep.

00:43:22.150 --> 00:43:23.350
<v Speaker 2>Everything is running.

00:43:25.270 --> 00:43:28.790
<v Speaker 1>Everything is running. Everything is ready. Yep. Mhmm.

00:43:29.110 --> 00:43:30.230
<v Speaker 0>Do you want me to try a port

00:43:30.230 --> 00:43:31.270
<v Speaker 0>forward from my local machine?

00:43:31.914 --> 00:43:34.234
<v Speaker 3>Yeah. Let's give that a shot and check

00:43:34.234 --> 00:43:35.994
<v Speaker 3>on the status of that application.

00:43:41.994 --> 00:43:43.275
<v Speaker 0>Newcomers.

00:43:43.515 --> 00:43:44.154
<v Speaker 0>Export.

00:43:45.359 --> 00:43:46.960
<v Speaker 0>K. Get pods.

00:43:49.039 --> 00:43:51.119
<v Speaker 2>He's a little faster than we are, Jeremy.

00:43:53.519 --> 00:43:56.079
<v Speaker 1>Well, it's it's it's that auto completing there.

00:43:56.079 --> 00:43:56.480
<v Speaker 3>Exactly.

00:43:59.435 --> 00:44:05.995
<v Speaker 0>Alright. So our application. Uh-oh.

00:44:05.995 --> 00:44:06.715
<v Speaker 2>Uh-oh.

00:44:08.315 --> 00:44:09.435
<v Speaker 2>But we fixed the thing.

00:44:11.000 --> 00:44:12.440
<v Speaker 0>You fixed one thing.

00:44:12.920 --> 00:44:14.760
<v Speaker 2>Could you tell your browser could you tell

00:44:14.760 --> 00:44:16.599
<v Speaker 2>your browser that it should be working and

00:44:16.599 --> 00:44:18.360
<v Speaker 2>ask to try hard try harder?

00:44:19.480 --> 00:44:20.920
<v Speaker 1>It's a part of a horror movie where

00:44:20.920 --> 00:44:23.255
<v Speaker 1>everyone's dancing around the fire celebrating while an

00:44:23.255 --> 00:44:25.015
<v Speaker 0>emergency emerges

00:44:26.135 --> 00:44:28.055
<v Speaker 1>from the lake and creeps up onto the

00:44:28.055 --> 00:44:30.455
<v Speaker 1>dock. Khalid thinks it seems fine.

00:44:30.775 --> 00:44:33.015
<v Speaker 0>My browser doesn't seem to think it's fine.

00:44:33.015 --> 00:44:34.295
<v Speaker 0>If we pop over

00:44:35.020 --> 00:44:36.700
<v Speaker 0>we're not getting any error messages. So we

00:44:36.700 --> 00:44:39.740
<v Speaker 0>are getting successfully a request to our cluster

00:44:39.740 --> 00:44:41.020
<v Speaker 0>pod. However,

00:44:41.340 --> 00:44:42.860
<v Speaker 0>it would seem that we are not getting

00:44:42.860 --> 00:44:45.340
<v Speaker 0>a response from our cluster pod.

00:44:45.820 --> 00:44:47.260
<v Speaker 0>I'm not sure what the timeout is supposed

00:44:47.260 --> 00:44:49.500
<v Speaker 0>to be here. You will see a connection

00:44:49.500 --> 00:44:51.955
<v Speaker 0>to a database timing out when it eventually

00:44:51.955 --> 00:44:52.675
<v Speaker 0>lands.

00:44:53.315 --> 00:44:55.155
<v Speaker 3>And you are talking directly to the pod

00:44:55.155 --> 00:44:57.714
<v Speaker 3>here, so we don't have to look too

00:44:57.714 --> 00:44:59.875
<v Speaker 3>deeply into things like

00:45:01.395 --> 00:45:03.795
<v Speaker 3>the service networking and and that sort of

00:45:03.795 --> 00:45:05.875
<v Speaker 3>thing. So we can definitely just start looking

00:45:05.875 --> 00:45:07.315
<v Speaker 3>directly at

00:45:08.410 --> 00:45:09.450
<v Speaker 3>the pod.

00:45:09.850 --> 00:45:11.850
<v Speaker 3>If we're expecting it to talk to a

00:45:11.850 --> 00:45:12.730
<v Speaker 3>database,

00:45:12.810 --> 00:45:14.890
<v Speaker 3>we probably wanna figure out where that database

00:45:14.890 --> 00:45:16.010
<v Speaker 3>is supposed to be

00:45:16.250 --> 00:45:18.810
<v Speaker 3>so that we can, you know, actually talk

00:45:18.810 --> 00:45:20.705
<v Speaker 3>to it. One of the things standing out

00:45:20.705 --> 00:45:22.625
<v Speaker 3>to me is that I didn't see any

00:45:22.625 --> 00:45:24.705
<v Speaker 3>pods related to a database.

00:45:29.025 --> 00:45:31.105
<v Speaker 2>David, are we supposed to have a database?

00:45:31.665 --> 00:45:33.745
<v Speaker 0>I have a drone. Keep control

00:45:34.730 --> 00:45:35.930
<v Speaker 0>something something.

00:45:37.289 --> 00:45:38.569
<v Speaker 0>I mean, how does this speak to a

00:45:38.569 --> 00:45:39.290
<v Speaker 0>database?

00:45:39.849 --> 00:45:41.770
<v Speaker 2>That's that's not a command, David.

00:45:43.530 --> 00:45:44.730
<v Speaker 0>So I'm gonna have to tweak the time

00:45:44.730 --> 00:45:46.410
<v Speaker 0>out on my Rust application. Really, you should

00:45:46.410 --> 00:45:47.849
<v Speaker 0>have an error message right now saying it's

00:45:47.849 --> 00:45:49.450
<v Speaker 0>trying to speak to something called Postgres.

00:45:49.835 --> 00:45:51.915
<v Speaker 0>So there's your queue. There's your queue.

00:45:52.714 --> 00:45:53.515
<v Speaker 2>Okay.

00:45:54.315 --> 00:45:55.674
<v Speaker 3>So one of the things we can look

00:45:55.674 --> 00:45:57.915
<v Speaker 3>at here is we can look at,

00:45:58.474 --> 00:46:00.154
<v Speaker 3>you know, what types of resources would we

00:46:00.154 --> 00:46:01.914
<v Speaker 3>use to even deploy a database. So we

00:46:01.914 --> 00:46:03.900
<v Speaker 3>can look to see if there's any stateful

00:46:03.900 --> 00:46:05.980
<v Speaker 3>sets to find in the cluster.

00:46:09.020 --> 00:46:11.500
<v Speaker 3>So just like a kubectl get

00:46:11.660 --> 00:46:12.540
<v Speaker 3>stateful set.

00:46:16.905 --> 00:46:18.665
<v Speaker 2>Postgres is not ready.

00:46:19.065 --> 00:46:19.785
<v Speaker 3>Yeah.

00:46:20.425 --> 00:46:21.785
<v Speaker 3>So we can do the same thing that

00:46:21.785 --> 00:46:23.225
<v Speaker 3>we did with the previous ones. We can

00:46:23.225 --> 00:46:25.545
<v Speaker 3>run describe on there and see what type

00:46:25.545 --> 00:46:27.305
<v Speaker 3>of data it gives us there.

00:46:30.050 --> 00:46:31.570
<v Speaker 3>And you'll need to tell it what you

00:46:31.570 --> 00:46:33.490
<v Speaker 3>wanna describe. So in this case, a stateful

00:46:33.490 --> 00:46:34.130
<v Speaker 3>set.

00:46:34.450 --> 00:46:35.250
<v Speaker 2>Stateful

00:46:35.250 --> 00:46:36.290
<v Speaker 2>set.

00:46:41.170 --> 00:46:41.650
<v Speaker 0>Okay.

00:46:43.425 --> 00:46:45.025
<v Speaker 3>Alright. And

00:46:45.585 --> 00:46:47.345
<v Speaker 3>one of the things that I noticed is

00:46:47.345 --> 00:46:49.265
<v Speaker 3>it wasn't even trying to

00:46:50.225 --> 00:46:52.065
<v Speaker 3>deploy a pod here. Otherwise, we would have

00:46:52.065 --> 00:46:52.705
<v Speaker 3>seen

00:46:53.585 --> 00:46:55.425
<v Speaker 3>that when we were doing the pod output.

00:46:57.400 --> 00:46:57.960
<v Speaker 3>So

00:46:58.840 --> 00:47:00.760
<v Speaker 3>if we look at the configuration

00:47:00.760 --> 00:47:01.560
<v Speaker 3>of this,

00:47:03.960 --> 00:47:05.640
<v Speaker 3>you know, there's some that stands out to

00:47:05.640 --> 00:47:06.120
<v Speaker 3>me

00:47:06.440 --> 00:47:07.240
<v Speaker 3>immediately

00:47:07.240 --> 00:47:07.960
<v Speaker 3>that

00:47:08.440 --> 00:47:10.760
<v Speaker 3>explains why we weren't seeing any type of

00:47:10.760 --> 00:47:11.320
<v Speaker 3>pod creation.

00:47:11.815 --> 00:47:14.055
<v Speaker 0>Yeah. Please don't write down my password. I

00:47:14.055 --> 00:47:16.055
<v Speaker 0>use this for everything. I was gonna say

00:47:16.055 --> 00:47:18.775
<v Speaker 2>besides besides the terribly weak password?

00:47:19.495 --> 00:47:22.615
<v Speaker 1>It seems that we've desired zero replicas,

00:47:22.615 --> 00:47:24.535
<v Speaker 1>which seems like exactly what we've got.

00:47:25.400 --> 00:47:26.440
<v Speaker 2>Yes. Yep.

00:47:27.400 --> 00:47:28.680
<v Speaker 0>What we can do is we can

00:47:31.240 --> 00:47:32.360
<v Speaker 0>Database list.

00:47:33.000 --> 00:47:34.120
<v Speaker 1>Database list.

00:47:34.520 --> 00:47:36.760
<v Speaker 3>We we can actually use the kubectl scale

00:47:36.760 --> 00:47:39.585
<v Speaker 3>command here to go ahead and change that.

00:47:39.665 --> 00:47:41.985
<v Speaker 3>Alternatively, you could just do an edit

00:47:42.385 --> 00:47:44.385
<v Speaker 3>on that resource and change it like we

00:47:44.385 --> 00:47:46.465
<v Speaker 3>did before. But since

00:47:48.545 --> 00:47:51.425
<v Speaker 3>since stateful sets exposed the scale subresource,

00:47:52.720 --> 00:47:55.120
<v Speaker 3>we can just do kubectl

00:47:55.440 --> 00:47:56.400
<v Speaker 3>scale.

00:47:56.880 --> 00:47:57.840
<v Speaker 3>We're gonna

00:47:58.480 --> 00:48:00.000
<v Speaker 3>and and if you just hit enter there,

00:48:00.000 --> 00:48:01.600
<v Speaker 3>it'll help guide us through what we need

00:48:01.600 --> 00:48:01.920
<v Speaker 3>to do.

00:48:07.065 --> 00:48:07.865
<v Speaker 3>So

00:48:08.265 --> 00:48:10.985
<v Speaker 3>let actually, do kubectl scale dash dash help,

00:48:10.985 --> 00:48:11.705
<v Speaker 3>and that'll give us

00:48:15.945 --> 00:48:17.625
<v Speaker 3>and I think in this case, we just

00:48:17.625 --> 00:48:19.625
<v Speaker 3>tell it what we want to scale.

00:48:23.140 --> 00:48:24.180
<v Speaker 3>Yep. So

00:48:24.980 --> 00:48:27.620
<v Speaker 3>we'll wanna specify that dash dash replicas,

00:48:27.780 --> 00:48:29.780
<v Speaker 3>and we probably don't wanna go higher than

00:48:29.780 --> 00:48:32.180
<v Speaker 3>one here. I don't know if this

00:48:33.675 --> 00:48:35.835
<v Speaker 0>There's there's no PVCs being used. All the

00:48:35.835 --> 00:48:37.515
<v Speaker 0>data is loaded through and then a container.

00:48:37.515 --> 00:48:39.035
<v Speaker 0>You can scale it to whatever you wish.

00:48:39.195 --> 00:48:40.715
<v Speaker 0>It'll it'll be fine.

00:48:43.675 --> 00:48:44.795
<v Speaker 1>Yep.

00:48:44.795 --> 00:48:46.235
<v Speaker 1>Replicas, however many,

00:48:47.310 --> 00:48:50.270
<v Speaker 1>Three ten whatever stateful set slash.

00:48:51.550 --> 00:48:53.790
<v Speaker 0>And that says swap your time again, please.

00:48:57.310 --> 00:48:58.350
<v Speaker 2>Anything else? We good?

00:48:59.275 --> 00:49:00.075
<v Speaker 3>You know,

00:49:00.715 --> 00:49:01.595
<v Speaker 3>Postgres

00:49:01.835 --> 00:49:02.795
<v Speaker 3>q l.

00:49:04.955 --> 00:49:07.915
<v Speaker 1>No space and probably singular instead of

00:49:08.875 --> 00:49:09.995
<v Speaker 2>Big reset?

00:49:10.875 --> 00:49:11.995
<v Speaker 1>Yep. Slash.

00:49:14.250 --> 00:49:16.410
<v Speaker 0>So you can use the singular, the plural,

00:49:16.410 --> 00:49:18.330
<v Speaker 0>or the short versions across all of these

00:49:18.330 --> 00:49:20.170
<v Speaker 0>commands as well. Okay.

00:49:20.970 --> 00:49:21.850
<v Speaker 0>But yeah.

00:49:22.490 --> 00:49:24.250
<v Speaker 0>Best to pick one and stick to it.

00:49:24.890 --> 00:49:26.970
<v Speaker 3>There's an extra e in there, looks like.

00:49:27.905 --> 00:49:29.345
<v Speaker 2>Oh, there it is. Post

00:49:29.905 --> 00:49:30.705
<v Speaker 2>egress.

00:49:32.865 --> 00:49:33.665
<v Speaker 3>Failed.

00:49:34.385 --> 00:49:35.265
<v Speaker 3>Alright.

00:49:36.065 --> 00:49:36.705
<v Speaker 3>So

00:49:37.345 --> 00:49:38.065
<v Speaker 3>we

00:49:38.145 --> 00:49:39.185
<v Speaker 3>take a look at those.

00:49:41.010 --> 00:49:42.690
<v Speaker 3>Take a look at that again, we should

00:49:42.690 --> 00:49:44.690
<v Speaker 3>see it's created a pod.

00:49:45.090 --> 00:49:48.850
<v Speaker 2>Yep. There we go. Create pod, stateful. Successful.

00:49:48.850 --> 00:49:49.250
<v Speaker 2>And

00:49:50.770 --> 00:49:53.490
<v Speaker 3>now we're just waiting to see if the

00:49:53.490 --> 00:49:56.210
<v Speaker 3>liveness and readiness probes

00:49:56.495 --> 00:49:57.615
<v Speaker 3>finish up.

00:50:05.775 --> 00:50:08.415
<v Speaker 0>It'd probably run a git pods or something.

00:50:08.575 --> 00:50:08.895
<v Speaker 0>Yeah.

00:50:10.329 --> 00:50:13.050
<v Speaker 0>Great tip, whoever's typing, but control r and

00:50:13.050 --> 00:50:15.369
<v Speaker 0>then type part of a command will

00:50:15.369 --> 00:50:17.210
<v Speaker 0>bring it front and center for you.

00:50:18.490 --> 00:50:20.650
<v Speaker 3>Alright. So it looks like those Postgres pods

00:50:20.650 --> 00:50:22.890
<v Speaker 3>are in a good state now, so we

00:50:22.890 --> 00:50:23.450
<v Speaker 3>can

00:50:24.375 --> 00:50:26.935
<v Speaker 3>potentially go back and try that application again.

00:50:29.255 --> 00:50:31.975
<v Speaker 2>And, David, that'll be hitting command r. We'll

00:50:31.975 --> 00:50:34.055
<v Speaker 2>do that for you? No. So if you

00:50:34.055 --> 00:50:35.975
<v Speaker 0>do Oh, control. Control r

00:50:37.175 --> 00:50:38.295
<v Speaker 0>and then type pods.

00:50:43.470 --> 00:50:44.430
<v Speaker 0>There you go.

00:50:45.150 --> 00:50:47.230
<v Speaker 0>And then hit return, you get your command.

00:50:50.029 --> 00:50:52.349
<v Speaker 0>So that's Oh. Still timing out. I meant

00:50:53.390 --> 00:50:54.910
<v Speaker 2>Nope. But so it's not gonna work if

00:50:54.910 --> 00:50:55.470
<v Speaker 2>you refresh.

00:50:59.674 --> 00:51:00.394
<v Speaker 0>So we got

00:51:01.115 --> 00:51:03.434
<v Speaker 0>well, look at your custard pod.

00:51:09.190 --> 00:51:10.550
<v Speaker 1>Up at the top there,

00:51:10.950 --> 00:51:12.150
<v Speaker 1>MGTPW

00:51:12.230 --> 00:51:15.270
<v Speaker 1>Right here. That one's not restarting. Unready restarted

00:51:15.270 --> 00:51:16.310
<v Speaker 1>five times.

00:51:16.630 --> 00:51:17.030
<v Speaker 0>Yep.

00:51:23.135 --> 00:51:23.935
<v Speaker 3>So

00:51:23.935 --> 00:51:25.214
<v Speaker 3>one of the things we can do here

00:51:25.214 --> 00:51:27.215
<v Speaker 3>is we can actually look at the logs

00:51:27.295 --> 00:51:30.255
<v Speaker 3>for that clustered pod and see I'm really

00:51:30.255 --> 00:51:33.055
<v Speaker 0>sorry. There there's no logout. There's

00:51:33.055 --> 00:51:34.015
<v Speaker 0>no logout.

00:51:34.015 --> 00:51:36.400
<v Speaker 0>Just because it's it's a really simple application.

00:51:36.400 --> 00:51:38.640
<v Speaker 0>I have to terrible Who built this application?

00:51:41.120 --> 00:51:43.440
<v Speaker 0>You'll wanna just I would just dive through

00:51:43.360 --> 00:51:44.880
<v Speaker 0>We can only do we

00:51:45.120 --> 00:51:46.480
<v Speaker 2>can only do so much with what we're

00:51:46.480 --> 00:51:47.120
<v Speaker 2>given here, David.

00:51:48.525 --> 00:51:50.765
<v Speaker 0>Just just do a see, we've done a

00:51:50.765 --> 00:51:52.924
<v Speaker 0>lot of describes. Do I get pod dash

00:51:52.924 --> 00:51:54.525
<v Speaker 0>o yaml and and take a look at

00:51:54.525 --> 00:51:55.325
<v Speaker 0>the definition?

00:51:55.645 --> 00:51:56.684
<v Speaker 0>I'm

00:51:56.684 --> 00:51:58.045
<v Speaker 0>gonna be honest. I don't remember what the

00:51:58.045 --> 00:51:59.484
<v Speaker 0>last break in that fail is.

00:51:59.885 --> 00:52:01.565
<v Speaker 2>Get get pod yaml?

00:52:02.319 --> 00:52:04.000
<v Speaker 0>Get pod, the name of the pod. So

00:52:04.000 --> 00:52:05.520
<v Speaker 0>just copy and paste the clustered one in

00:52:05.520 --> 00:52:07.520
<v Speaker 0>and then do a dash o YAML, which

00:52:07.520 --> 00:52:09.280
<v Speaker 0>will output the spec.

00:52:10.960 --> 00:52:12.480
<v Speaker 0>And a great tip from the audience there

00:52:12.480 --> 00:52:14.559
<v Speaker 0>as well. Alias and cube control to key

00:52:14.559 --> 00:52:16.895
<v Speaker 0>is a good time saver.

00:52:17.135 --> 00:52:17.535
<v Speaker 0>Yeah.

00:52:29.300 --> 00:52:30.980
<v Speaker 0>Really? I need to start upgrading these clusters

00:52:30.980 --> 00:52:32.180
<v Speaker 0>to one two one so we don't go

00:52:32.180 --> 00:52:33.140
<v Speaker 0>to managed fields.

00:52:40.565 --> 00:52:41.605
<v Speaker 2>Let

00:52:42.485 --> 00:52:43.445
<v Speaker 2>us see.

00:52:47.045 --> 00:52:49.925
<v Speaker 0>Oh, okay. You broke it yourselves. That wasn't

00:52:49.925 --> 00:52:50.165
<v Speaker 0>me.

00:52:54.740 --> 00:52:56.740
<v Speaker 0>The CPU should be 1,000. Yeah.

00:52:58.020 --> 00:52:59.380
<v Speaker 0>It wasn't me. Good.

00:53:01.540 --> 00:53:03.220
<v Speaker 0>I I couldn't remember what the other break

00:53:03.220 --> 00:53:05.060
<v Speaker 0>was there. Yeah. You just wanted to keep

00:53:05.060 --> 00:53:06.020
<v Speaker 0>control head on that.

00:53:10.995 --> 00:53:12.915
<v Speaker 0>Who's got the the keys?

00:53:13.715 --> 00:53:16.595
<v Speaker 1>That was Tom most recently. Okay.

00:53:16.995 --> 00:53:18.435
<v Speaker 2>Oh, it's your turn, Jeremy. Sorry. I'll stop

00:53:18.435 --> 00:53:19.235
<v Speaker 2>talking to you. Go ahead.

00:53:22.070 --> 00:53:23.110
<v Speaker 2>Hands off.

00:53:24.390 --> 00:53:26.550
<v Speaker 0>Alright. We're almost there. Come on, team.

00:53:30.150 --> 00:53:32.950
<v Speaker 0>We wanted our kube control edit deployment clustered.

00:53:48.830 --> 00:53:51.870
<v Speaker 1>Is is someone firing keystrokes in there?

00:53:52.670 --> 00:53:55.310
<v Speaker 0>But I'm judging by Tom's laughter. Yes.

00:53:59.214 --> 00:54:02.095
<v Speaker 1>You can't trip me while I'm while I'm

00:54:02.095 --> 00:54:02.975
<v Speaker 1>crawling.

00:54:06.095 --> 00:54:07.535
<v Speaker 0>And while we're in here, let's fix one

00:54:07.535 --> 00:54:09.135
<v Speaker 0>more thing that I don't think we we

00:54:09.135 --> 00:54:11.295
<v Speaker 0>need to worry about, but let's search for

00:54:11.295 --> 00:54:11.775
<v Speaker 0>policy.

00:54:14.730 --> 00:54:16.970
<v Speaker 0>I did modify the image pool policy.

00:54:17.050 --> 00:54:18.810
<v Speaker 0>Maybe Jason will be so kind just to

00:54:18.810 --> 00:54:20.410
<v Speaker 0>tell us why that was such a stupid

00:54:20.410 --> 00:54:21.290
<v Speaker 0>thing to say.

00:54:23.690 --> 00:54:26.490
<v Speaker 3>Yeah. So the image pool policy,

00:54:26.650 --> 00:54:27.210
<v Speaker 3>basically,

00:54:28.570 --> 00:54:31.655
<v Speaker 3>you know, it it depends on how you're

00:54:32.295 --> 00:54:35.015
<v Speaker 3>validating and deploying your containers that you wanna

00:54:35.015 --> 00:54:36.455
<v Speaker 3>use in the environments.

00:54:36.695 --> 00:54:38.375
<v Speaker 3>So right now, that one being set to

00:54:38.375 --> 00:54:39.815
<v Speaker 3>never means that,

00:54:40.375 --> 00:54:43.255
<v Speaker 3>basically, it will never try to pull down

00:54:43.670 --> 00:54:45.590
<v Speaker 3>the pod onto the host as part of

00:54:45.590 --> 00:54:46.790
<v Speaker 3>bringing up that

00:54:47.430 --> 00:54:49.590
<v Speaker 3>that pod. It'll expect that that container has

00:54:49.590 --> 00:54:50.790
<v Speaker 3>already been pulled

00:54:50.950 --> 00:54:52.790
<v Speaker 3>onto the host by some other

00:54:53.030 --> 00:54:54.070
<v Speaker 3>process.

00:54:54.950 --> 00:54:55.430
<v Speaker 3>Generally,

00:54:56.925 --> 00:54:59.165
<v Speaker 3>you want it to set at least to,

00:54:59.165 --> 00:55:01.245
<v Speaker 3>if not present, so that when the pod

00:55:01.245 --> 00:55:02.125
<v Speaker 3>is scheduled,

00:55:02.285 --> 00:55:03.005
<v Speaker 3>it'll,

00:55:03.805 --> 00:55:05.565
<v Speaker 3>you know, pull that container

00:55:06.045 --> 00:55:06.605
<v Speaker 3>image

00:55:07.165 --> 00:55:08.845
<v Speaker 3>if it isn't already on the host.

00:55:09.950 --> 00:55:11.950
<v Speaker 3>In some cases, some people set it to

00:55:11.950 --> 00:55:12.830
<v Speaker 3>always,

00:55:14.190 --> 00:55:14.830
<v Speaker 3>but

00:55:15.390 --> 00:55:18.750
<v Speaker 3>that has some other implications too. Because if

00:55:18.750 --> 00:55:20.750
<v Speaker 3>you're relying on the behavior of always, that

00:55:20.750 --> 00:55:21.869
<v Speaker 3>means you're modifying

00:55:22.275 --> 00:55:24.915
<v Speaker 3>the tags that you're using for images,

00:55:24.994 --> 00:55:25.474
<v Speaker 3>and

00:55:26.035 --> 00:55:27.315
<v Speaker 3>that could lead to

00:55:27.795 --> 00:55:30.275
<v Speaker 3>other potential issues there too. So

00:55:33.075 --> 00:55:33.875
<v Speaker 3>it

00:55:33.875 --> 00:55:35.555
<v Speaker 3>doesn't really matter what we set it to

00:55:35.555 --> 00:55:36.675
<v Speaker 3>for this case.

00:55:36.914 --> 00:55:38.355
<v Speaker 3>But Go up, Jeremy.

00:55:41.290 --> 00:55:44.170
<v Speaker 1>Which line? CPU one. Two more. Yeah. CPU

00:55:44.170 --> 00:55:47.050
<v Speaker 2>is one down two. Down three. Right there.

00:55:47.370 --> 00:55:49.770
<v Speaker 0>It should be 1,000. So one CPU actually

00:55:49.770 --> 00:55:51.610
<v Speaker 0>means one millicore of a CPU.

00:55:54.875 --> 00:55:56.715
<v Speaker 0>But I'm surprised that's a string.

00:55:57.035 --> 00:55:58.555
<v Speaker 0>Is that supposed to be a string?

00:56:02.635 --> 00:56:03.755
<v Speaker 3>There's

00:56:03.835 --> 00:56:06.234
<v Speaker 3>a few fields in Kubernetes

00:56:06.234 --> 00:56:08.635
<v Speaker 3>that are defined as int or string,

00:56:09.300 --> 00:56:11.540
<v Speaker 3>and will take either an integer or a

00:56:11.540 --> 00:56:13.460
<v Speaker 3>string as content.

00:56:15.220 --> 00:56:17.300
<v Speaker 3>So I expect that's probably what we're dealing

00:56:17.300 --> 00:56:19.140
<v Speaker 3>with here for the CPU limits.

00:56:19.860 --> 00:56:22.660
<v Speaker 0>Alright. So that should assuming your container gets

00:56:22.660 --> 00:56:24.180
<v Speaker 0>scheduled on the original

00:56:24.775 --> 00:56:26.775
<v Speaker 0>node where the image is pulled, you should

00:56:26.775 --> 00:56:27.495
<v Speaker 0>be okay.

00:56:29.015 --> 00:56:30.935
<v Speaker 0>And it's pending. So you we got really

00:56:30.935 --> 00:56:32.535
<v Speaker 0>unlucky there, and you're gonna have to modify

00:56:32.535 --> 00:56:34.375
<v Speaker 0>the image pull policy, I'm afraid.

00:56:34.855 --> 00:56:35.255
<v Speaker 0>Yep.

00:56:38.230 --> 00:56:41.270
<v Speaker 1>Where's that? Just Oh, did it. Same file?

00:56:41.270 --> 00:56:41.910
<v Speaker 1>Yeah.

00:56:49.670 --> 00:56:52.310
<v Speaker 3>So you you can just search for never

00:56:52.310 --> 00:56:53.110
<v Speaker 3>here,

00:56:53.190 --> 00:56:56.465
<v Speaker 3>and for simplicity, just replace it with always.

00:56:57.025 --> 00:56:58.465
<v Speaker 0>With a capital m.

00:56:58.785 --> 00:56:59.505
<v Speaker 0>Yep.

00:57:04.945 --> 00:57:07.025
<v Speaker 0>Are you on your ERCODOX today, Jeremy?

00:57:08.020 --> 00:57:08.740
<v Speaker 1>Yes.

00:57:10.900 --> 00:57:12.100
<v Speaker 0>That's not does that

00:57:13.300 --> 00:57:15.700
<v Speaker 1>what jumps me there? That jumps me there.

00:57:16.020 --> 00:57:16.740
<v Speaker 1>Right.

00:57:17.700 --> 00:57:20.420
<v Speaker 0>So always and have not present. Always is

00:57:20.420 --> 00:57:22.315
<v Speaker 0>probably easier for now.

00:57:23.515 --> 00:57:24.315
<v Speaker 0>Perfect.

00:57:27.995 --> 00:57:30.315
<v Speaker 0>Okay. There's one more thing, another to fix

00:57:30.315 --> 00:57:31.275
<v Speaker 0>our application.

00:57:32.635 --> 00:57:32.795
<v Speaker 0>And

00:57:38.200 --> 00:57:40.359
<v Speaker 0>hopefully, just pulling on a new node

00:57:40.599 --> 00:57:41.880
<v Speaker 0>should be harmless.

00:57:42.599 --> 00:57:44.599
<v Speaker 0>You can do it watch again if you

00:57:44.599 --> 00:57:44.839
<v Speaker 0>want.

00:57:51.055 --> 00:57:53.615
<v Speaker 3>I dropped the dash a here because

00:57:54.975 --> 00:57:57.375
<v Speaker 3>just getting things in the default namespace will

00:57:57.375 --> 00:57:59.055
<v Speaker 3>make the output a little bit clearer.

00:58:07.430 --> 00:58:09.590
<v Speaker 0>Handing is what I need to be honest.

00:58:13.190 --> 00:58:14.710
<v Speaker 0>Mind if I type for a second?

00:58:15.190 --> 00:58:15.750
<v Speaker 1>Go for it.

00:58:16.434 --> 00:58:18.355
<v Speaker 2>Is that breaking the rules? Are we allowed

00:58:18.355 --> 00:58:20.275
<v Speaker 2>to do that? Well, I mean, it's not

00:58:20.275 --> 00:58:22.595
<v Speaker 0>a break that I brought, so I think

00:58:22.595 --> 00:58:23.475
<v Speaker 0>it's alright.

00:58:23.635 --> 00:58:24.515
<v Speaker 0>Okay.

00:58:24.515 --> 00:58:26.194
<v Speaker 0>And there's me using my alias. Sorry.

00:58:32.119 --> 00:58:35.720
<v Speaker 0>So I think I Oh, insufficient CPU.

00:58:37.880 --> 00:58:38.440
<v Speaker 0>One k?

00:58:46.275 --> 00:58:47.155
<v Speaker 0>There we go.

00:58:49.234 --> 00:58:50.674
<v Speaker 0>So that I think that was that string

00:58:50.674 --> 00:58:52.595
<v Speaker 0>conversion thing and then goes change it to

00:58:52.595 --> 00:58:54.035
<v Speaker 0>one

00:58:53.510 --> 00:58:56.069
<v Speaker 0>k. It must be using like string string

00:58:56.069 --> 00:58:58.790
<v Speaker 0>to y or whatever that function is.

00:58:59.670 --> 00:59:00.150
<v Speaker 0>So

00:59:00.790 --> 00:59:03.350
<v Speaker 0>the 100 m just as explicitly say one

00:59:04.150 --> 00:59:07.589
<v Speaker 0>one CPU, 1,000 milli cores. That's weird. I've

00:59:07.589 --> 00:59:08.710
<v Speaker 0>never I've never seen that before.

00:59:10.145 --> 00:59:11.905
<v Speaker 0>Me now, you're all teaching me stuff as

00:59:11.905 --> 00:59:13.025
<v Speaker 0>well. That's awesome.

00:59:13.505 --> 00:59:15.665
<v Speaker 0>Hey, you got your pod back. You want

00:59:15.665 --> 00:59:17.425
<v Speaker 0>me to do a port forward? Can we

00:59:17.585 --> 00:59:20.145
<v Speaker 2>check, see if it's working? Of course.

00:59:22.305 --> 00:59:23.185
<v Speaker 0>Get pods.

00:59:29.100 --> 00:59:30.060
<v Speaker 0>This one.

00:59:36.940 --> 00:59:37.340
<v Speaker 0>Okay.

00:59:38.265 --> 00:59:40.105
<v Speaker 0>Now it's complaining, and I'm sure we'll get

00:59:40.105 --> 00:59:41.704
<v Speaker 0>a time out and hopefully just a few

00:59:41.704 --> 00:59:43.145
<v Speaker 0>seconds, but I can't

00:59:43.385 --> 00:59:45.145
<v Speaker 0>reach the postcard service.

00:59:45.224 --> 00:59:47.065
<v Speaker 0>You'll need to do both of that.

00:59:48.184 --> 00:59:49.545
<v Speaker 0>It's the last thing, I swear.

00:59:53.200 --> 00:59:55.920
<v Speaker 3>Well, so if it can't reach the Postgres

00:59:55.920 --> 00:59:56.640
<v Speaker 3>service,

00:59:57.680 --> 00:59:58.799
<v Speaker 3>you know, some of the things that we

00:59:58.799 --> 01:00:00.240
<v Speaker 3>can look at are,

01:00:01.440 --> 01:00:02.960
<v Speaker 3>you know, how's it trying to reach a

01:00:02.960 --> 01:00:05.465
<v Speaker 3>Postgres service? How's the application configured to talk

01:00:05.465 --> 01:00:06.425
<v Speaker 3>to the database?

01:00:07.065 --> 01:00:07.705
<v Speaker 3>And

01:00:08.025 --> 01:00:09.305
<v Speaker 3>based on that,

01:00:10.025 --> 01:00:11.785
<v Speaker 3>we may need to look at the actual

01:00:11.785 --> 01:00:13.145
<v Speaker 3>service that's fronting

01:00:13.465 --> 01:00:15.385
<v Speaker 3>the stateful set if there is one.

01:00:15.705 --> 01:00:16.905
<v Speaker 0>I think that's a good idea.

01:00:18.430 --> 01:00:19.150
<v Speaker 0>Yeah.

01:00:19.790 --> 01:00:20.910
<v Speaker 2>That was subtle.

01:00:21.550 --> 01:00:22.990
<v Speaker 3>So we can go ahead and just do

01:00:22.990 --> 01:00:26.430
<v Speaker 3>a kubectl get services here and see what's

01:00:26.430 --> 01:00:28.030
<v Speaker 3>defined as far as services.

01:00:30.190 --> 01:00:31.070
<v Speaker 2>Who's up now?

01:00:33.155 --> 01:00:35.555
<v Speaker 2>Jeremy. Yeah. Jeremy, go on. I

01:00:37.234 --> 01:00:38.755
<v Speaker 1>may need to refresh my

01:00:39.395 --> 01:00:41.714
<v Speaker 1>refresh my teleport. You should hear you should

01:00:41.714 --> 01:00:43.474
<v Speaker 1>hear banging clicking. Alright. Tom, you're up. And

01:00:43.474 --> 01:00:44.515
<v Speaker 1>no Alright.

01:00:45.600 --> 01:00:48.080
<v Speaker 0>So cube control get SVC

01:00:48.080 --> 01:00:50.000
<v Speaker 0>or get services. Oh, woah. Woah. What just

01:00:50.000 --> 01:00:50.560
<v Speaker 2>happened?

01:00:50.960 --> 01:00:53.280
<v Speaker 0>I could see. To reload sometimes when someone

01:00:53.280 --> 01:00:54.960
<v Speaker 0>joins it. I guess a low can Yeah.

01:00:54.960 --> 01:00:55.520
<v Speaker 1>Okay.

01:00:55.840 --> 01:00:57.520
<v Speaker 1>I could see it, but not control it.

01:01:00.305 --> 01:01:02.625
<v Speaker 0>Secure Cube control mode. I like it.

01:01:05.105 --> 01:01:07.585
<v Speaker 0>SVC. The cuddles. SVC.

01:01:07.585 --> 01:01:09.745
<v Speaker 2>Okay. There we go. Cubic

01:01:09.985 --> 01:01:10.945
<v Speaker 3>TLS.

01:01:11.265 --> 01:01:11.905
<v Speaker 3>Yeah.

01:01:12.785 --> 01:01:15.025
<v Speaker 0>So we do have a Postgres service. I'll

01:01:15.025 --> 01:01:15.345
<v Speaker 0>let

01:01:15.830 --> 01:01:17.430
<v Speaker 0>Jason get It is running.

01:01:20.870 --> 01:01:21.510
<v Speaker 3>Yep.

01:01:23.030 --> 01:01:24.710
<v Speaker 3>We can go ahead and I'm

01:01:24.710 --> 01:01:26.310
<v Speaker 0>I'm curious, Jason. Do mind if I jump

01:01:26.310 --> 01:01:28.310
<v Speaker 0>in for a second? Yep. Like, based on

01:01:28.310 --> 01:01:29.910
<v Speaker 0>all of the kube control stuff we've been

01:01:29.910 --> 01:01:31.510
<v Speaker 0>doing so far, Jeremy and Tom. Right?

01:01:32.125 --> 01:01:33.805
<v Speaker 0>We've done a get service. What do you

01:01:33.805 --> 01:01:34.605
<v Speaker 0>think's next?

01:01:36.045 --> 01:01:39.165
<v Speaker 1>Probably describe that service. Describe that service? Good

01:01:39.165 --> 01:01:41.725
<v Speaker 0>call. I was just curious if, you know,

01:01:41.725 --> 01:01:44.285
<v Speaker 0>hopefully things were were landing there. If

01:01:44.525 --> 01:01:45.325
<v Speaker 0>at the

01:01:45.650 --> 01:01:47.810
<v Speaker 0>there's said jumping in too. Describe it.

01:01:50.370 --> 01:01:51.650
<v Speaker 3>One of the other things I was gonna

01:01:51.650 --> 01:01:53.090
<v Speaker 3>say too is a lot of the commands

01:01:53.090 --> 01:01:55.010
<v Speaker 3>also have a wide mode. So if you

01:01:55.010 --> 01:01:57.330
<v Speaker 3>do like a dash o wide, sometimes,

01:01:57.890 --> 01:01:59.730
<v Speaker 3>you know, it'll give you more detail on

01:01:59.730 --> 01:02:01.404
<v Speaker 3>that GET as well. Yeah. That's a great

01:02:01.404 --> 01:02:02.205
<v Speaker 0>tip too.

01:02:02.444 --> 01:02:04.045
<v Speaker 0>You should do that as well.

01:02:05.805 --> 01:02:07.645
<v Speaker 0>Like the kubectl thing,

01:02:07.724 --> 01:02:09.005
<v Speaker 0>as you know, it's

01:02:09.005 --> 01:02:11.645
<v Speaker 0>a rest like client get, describe,

01:02:11.805 --> 01:02:14.630
<v Speaker 0>edit. These things are just the staples of

01:02:14.630 --> 01:02:17.110
<v Speaker 0>all Kubernetes interactions, at least through a kube

01:02:17.110 --> 01:02:18.070
<v Speaker 0>control, anyway.

01:02:18.630 --> 01:02:20.870
<v Speaker 2>So what's wrong with that? It's get service

01:02:20.870 --> 01:02:22.790
<v Speaker 0>dash o wait. Yeah. It works for the

01:02:22.790 --> 01:02:25.510
<v Speaker 3>get, not for describe. Gotcha. And you guys

01:02:25.510 --> 01:02:26.470
<v Speaker 0>need to describe.

01:02:26.710 --> 01:02:27.830
<v Speaker 2>Delete describe.

01:02:28.390 --> 01:02:29.270
<v Speaker 2>Yes. Yes. Yes.

01:02:30.005 --> 01:02:31.445
<v Speaker 2>Okay.

01:02:31.445 --> 01:02:32.565
<v Speaker 2>Boom. Okay.

01:02:38.805 --> 01:02:39.525
<v Speaker 0>Alright.

01:02:41.765 --> 01:02:42.805
<v Speaker 3>So

01:02:43.640 --> 01:02:46.360
<v Speaker 3>let's see. Looking at that Postgres service,

01:02:46.760 --> 01:02:48.760
<v Speaker 3>we can see that it's

01:02:49.880 --> 01:02:52.440
<v Speaker 3>a type of cluster IP. That makes sense.

01:02:52.440 --> 01:02:55.000
<v Speaker 3>We have an app equals Postgres for the

01:02:55.000 --> 01:02:55.640
<v Speaker 3>selector.

01:02:56.735 --> 01:02:58.255
<v Speaker 3>It has an IP.

01:02:58.655 --> 01:02:59.295
<v Speaker 3>And

01:03:00.255 --> 01:03:02.575
<v Speaker 3>if we look at the port

01:03:11.040 --> 01:03:12.560
<v Speaker 3>And this is

01:03:13.440 --> 01:03:15.120
<v Speaker 3>where it's been a while since I dealt

01:03:15.120 --> 01:03:16.240
<v Speaker 3>with Postgres.

01:03:16.240 --> 01:03:19.200
<v Speaker 3>I don't quite remember if it listens on

01:03:19.200 --> 01:03:20.000
<v Speaker 3>TCP.

01:03:20.000 --> 01:03:21.920
<v Speaker 3>It's supposed to listen on TCP in addition

01:03:21.920 --> 01:03:23.920
<v Speaker 3>to UDP or if it's just a UDP

01:03:23.920 --> 01:03:25.724
<v Speaker 3>service. Good catch.

01:03:26.924 --> 01:03:29.484
<v Speaker 2>So we need both? No. TCP.

01:03:30.125 --> 01:03:31.645
<v Speaker 2>Just TCP. Okay.

01:03:35.885 --> 01:03:36.444
<v Speaker 3>Yep. So

01:03:39.800 --> 01:03:41.240
<v Speaker 2>Edit.

01:03:49.960 --> 01:03:51.640
<v Speaker 2>And then it's

01:03:52.875 --> 01:03:54.715
<v Speaker 0>s s you go at the resource tab

01:03:54.715 --> 01:03:56.475
<v Speaker 0>first. Edit the service.

01:03:59.195 --> 01:04:00.235
<v Speaker 2>Here we go.

01:04:00.635 --> 01:04:01.595
<v Speaker 2>Protocol.

01:04:02.315 --> 01:04:03.115
<v Speaker 2>Go down.

01:04:13.809 --> 01:04:15.010
<v Speaker 0>Alright. You're almost there.

01:04:23.755 --> 01:04:26.155
<v Speaker 0>You'll probably wanna describe your service again

01:04:28.555 --> 01:04:29.995
<v Speaker 0>with a a dash of weight.

01:04:40.370 --> 01:04:42.050
<v Speaker 0>So this is the output that's the most

01:04:42.050 --> 01:04:42.850
<v Speaker 0>important.

01:04:44.610 --> 01:04:47.090
<v Speaker 3>Alright. And if you look at that service

01:04:47.090 --> 01:04:49.250
<v Speaker 3>above the Kubernetes service, you can see that

01:04:49.250 --> 01:04:51.705
<v Speaker 3>there are some endpoints defined for that one.

01:04:56.905 --> 01:04:59.705
<v Speaker 3>And we're don't have any endpoints currently for

01:04:59.705 --> 01:05:01.225
<v Speaker 3>the Postgres service.

01:05:02.345 --> 01:05:05.865
<v Speaker 3>And and the way that the service maps

01:05:05.160 --> 01:05:07.800
<v Speaker 3>pods is it actually looks for

01:05:08.040 --> 01:05:10.520
<v Speaker 3>that label selector that's defined. So in this

01:05:10.520 --> 01:05:12.440
<v Speaker 3>case, app equals Postgres.

01:05:13.000 --> 01:05:14.520
<v Speaker 3>So one of the things we can do,

01:05:15.400 --> 01:05:18.680
<v Speaker 3>we can look look at that Postgres stateful

01:05:18.680 --> 01:05:19.960
<v Speaker 3>set and see

01:05:20.555 --> 01:05:22.315
<v Speaker 3>to make sure that it has that

01:05:23.035 --> 01:05:25.035
<v Speaker 3>that label actually set on it.

01:05:26.155 --> 01:05:28.795
<v Speaker 2>But we don't so since that's not set,

01:05:29.355 --> 01:05:30.635
<v Speaker 2>no endpoints

01:05:31.195 --> 01:05:32.075
<v Speaker 2>from Noel.

01:05:32.650 --> 01:05:34.490
<v Speaker 2>No. Well, yeah, the only thing you know

01:05:34.490 --> 01:05:36.650
<v Speaker 0>right now is there's no endpoints, and Jason

01:05:36.650 --> 01:05:38.970
<v Speaker 0>has given you some great advice that endpoints

01:05:38.970 --> 01:05:41.130
<v Speaker 0>are connected to selectors.

01:05:41.770 --> 01:05:43.450
<v Speaker 0>So we probably wanna check

01:05:44.330 --> 01:05:46.985
<v Speaker 0>that this selector exists on our deployment, The

01:05:46.985 --> 01:05:48.345
<v Speaker 0>app equals Postgres.

01:05:48.345 --> 01:05:50.985
<v Speaker 0>So if you describe our cluster deployment

01:05:53.705 --> 01:05:55.465
<v Speaker 0>yeah. They already answered it. They're jumping in

01:05:55.465 --> 01:05:57.705
<v Speaker 0>with the endpoints and label check too. Because

01:05:57.705 --> 01:05:59.545
<v Speaker 0>I think that's based everybody at some point.

01:05:59.545 --> 01:05:59.705
<v Speaker 0>Right?

01:06:01.890 --> 01:06:02.690
<v Speaker 3>Oh, yeah.

01:06:07.970 --> 01:06:09.010
<v Speaker 0>Deployment

01:06:09.010 --> 01:06:09.890
<v Speaker 0>custard.

01:06:09.970 --> 01:06:10.210
<v Speaker 0>Yeah.

01:06:17.315 --> 01:06:18.994
<v Speaker 0>I'd have to consider calling to see these

01:06:18.994 --> 01:06:20.835
<v Speaker 0>custards, but it wasn't as catchy.

01:06:21.075 --> 01:06:22.515
<v Speaker 2>Alright.

01:06:24.755 --> 01:06:25.315
<v Speaker 3>So you The

01:06:26.275 --> 01:06:28.275
<v Speaker 3>important part here is what we're gonna wanna

01:06:28.275 --> 01:06:30.740
<v Speaker 3>look at is the actual pod template, not

01:06:30.740 --> 01:06:34.020
<v Speaker 3>necessarily the labels on the deployment itself.

01:06:34.339 --> 01:06:36.260
<v Speaker 3>So underneath the pod template

01:06:37.059 --> 01:06:39.140
<v Speaker 3>actually, this is the clustered

01:06:39.619 --> 01:06:41.619
<v Speaker 3>deployment. We wanna look at the Postgres deployment.

01:06:49.985 --> 01:06:52.305
<v Speaker 3>Oh, sorry. Not deployment. Stateful set.

01:07:05.060 --> 01:07:07.060
<v Speaker 3>Yep. So if we look at that pod

01:07:07.060 --> 01:07:07.860
<v Speaker 3>template,

01:07:07.940 --> 01:07:09.060
<v Speaker 3>labels

01:07:09.140 --> 01:07:11.220
<v Speaker 3>app equals PostgresQL,

01:07:11.875 --> 01:07:15.475
<v Speaker 3>And I think the service was for Postgres,

01:07:15.475 --> 01:07:17.715
<v Speaker 3>not for PostgresQL.

01:07:17.715 --> 01:07:18.515
<v Speaker 3>Ah,

01:07:18.515 --> 01:07:19.395
<v Speaker 3>Postgres.

01:07:20.515 --> 01:07:22.355
<v Speaker 0>Clumsy fingers. Sorry, y'all.

01:07:25.359 --> 01:07:27.680
<v Speaker 1>I I I don't believe you're sorry.

01:07:27.920 --> 01:07:29.520
<v Speaker 1>Sorry is So

01:07:29.839 --> 01:07:31.280
<v Speaker 0>Sorry is the cover of box. And you

01:07:31.280 --> 01:07:32.640
<v Speaker 1>would do you would do it again.

01:07:33.040 --> 01:07:35.920
<v Speaker 2>Does it matter, Jason, which one we change?

01:07:37.520 --> 01:07:38.320
<v Speaker 3>So

01:07:38.545 --> 01:07:39.745
<v Speaker 3>it shouldn't

01:07:39.745 --> 01:07:40.465
<v Speaker 3>matter.

01:07:42.865 --> 01:07:44.705
<v Speaker 3>The the one thing,

01:07:47.265 --> 01:07:48.945
<v Speaker 3>the stateful set,

01:07:49.345 --> 01:07:52.370
<v Speaker 3>I don't think a stateful set define. Does

01:07:52.370 --> 01:07:54.450
<v Speaker 3>it have a label selector for the

01:07:54.930 --> 01:07:56.370
<v Speaker 3>pods that it manages?

01:07:57.010 --> 01:07:59.250
<v Speaker 3>I do not Yeah. I would edit the

01:07:59.250 --> 01:08:00.850
<v Speaker 0>service just in case. It's it's more like

01:08:01.010 --> 01:08:01.090
<v Speaker 0>Yeah.

01:08:10.055 --> 01:08:12.214
<v Speaker 0>I think even potentially

01:08:12.214 --> 01:08:15.494
<v Speaker 0>the template labels as well are immutable on

01:08:15.494 --> 01:08:17.415
<v Speaker 0>deployments and stateful sets. I don't even remember

01:08:17.415 --> 01:08:18.854
<v Speaker 0>if those can can be changed.

01:08:21.229 --> 01:08:24.029
<v Speaker 3>You want No. No. Close. You don't need

01:08:24.029 --> 01:08:26.029
<v Speaker 3>deployment there. You just want the service.

01:08:26.350 --> 01:08:28.189
<v Speaker 0>The service is called Postgres.

01:08:28.989 --> 01:08:31.469
<v Speaker 0>Yeah. That was the I've the I've got

01:08:31.469 --> 01:08:32.670
<v Speaker 2>the typo there

01:08:33.949 --> 01:08:36.474
<v Speaker 2>and an extra space. Let's edit that,

01:08:37.274 --> 01:08:39.354
<v Speaker 2>and let's find our label.

01:08:42.555 --> 01:08:44.395
<v Speaker 3>And it's actually the

01:08:44.395 --> 01:08:45.354
<v Speaker 3>selector.

01:08:45.755 --> 01:08:47.994
<v Speaker 2>Oh, selector right there. Okay. See it.

01:08:48.395 --> 01:08:50.475
<v Speaker 2>Postgres. Let's change that to q l.

01:09:10.975 --> 01:09:12.255
<v Speaker 2>Just go back.

01:09:14.975 --> 01:09:17.774
<v Speaker 3>You wanna describe that service

01:09:17.774 --> 01:09:18.495
<v Speaker 3>again. Yep.

01:09:23.910 --> 01:09:25.830
<v Speaker 1>There should be an l in Cuddle.

01:09:26.229 --> 01:09:26.949
<v Speaker 2>Yep.

01:09:29.430 --> 01:09:32.149
<v Speaker 0>I'm gonna add documentation and and a code

01:09:32.149 --> 01:09:33.670
<v Speaker 0>of conduct for the show where you have

01:09:33.670 --> 01:09:35.750
<v Speaker 0>to pronounce the cube controller. You're not invited

01:09:35.654 --> 01:09:38.215
<v Speaker 0>back. I'm just I'm just Alright.

01:09:39.494 --> 01:09:41.334
<v Speaker 3>So now we do have endpoints.

01:09:42.054 --> 01:09:44.135
<v Speaker 3>Good job. So assuming the application is test

01:09:44.135 --> 01:09:46.694
<v Speaker 3>it? Configured correctly to talk to the service,

01:09:47.014 --> 01:09:49.369
<v Speaker 3>it should be able to. Ta da.

01:09:49.849 --> 01:09:50.649
<v Speaker 0>That's it.

01:09:51.290 --> 01:09:52.889
<v Speaker 0>He was just like, random box. I keep

01:09:52.889 --> 01:09:55.130
<v Speaker 0>meaning to re encode it. But we're getting

01:09:55.130 --> 01:09:57.929
<v Speaker 0>we are getting our wonderful cloud native quotes

01:09:57.929 --> 01:09:59.530
<v Speaker 0>at the top of our service. So

01:10:00.864 --> 01:10:01.824
<v Speaker 2>it's all good.

01:10:02.065 --> 01:10:04.624
<v Speaker 0>It's working. Good job. Fair enough there.

01:10:05.425 --> 01:10:06.385
<v Speaker 1>Yay. Awesome

01:10:09.185 --> 01:10:10.704
<v Speaker 2>work. I need a nap.

01:10:11.824 --> 01:10:13.344
<v Speaker 3>I'm

01:10:13.344 --> 01:10:15.264
<v Speaker 3>just glad for this time I wasn't having

01:10:15.264 --> 01:10:16.304
<v Speaker 3>to type live on air.

01:10:17.850 --> 01:10:20.330
<v Speaker 1>Come fix a cluster they said. It'll be

01:10:20.330 --> 01:10:21.210
<v Speaker 1>fun

01:10:21.210 --> 01:10:22.250
<v Speaker 1>they said.

01:10:22.570 --> 01:10:25.370
<v Speaker 0>Well, I mean, let's let's focus on right.

01:10:26.170 --> 01:10:28.490
<v Speaker 0>Did you did you learn a little Kubernetes

01:10:28.490 --> 01:10:29.290
<v Speaker 0>today?

01:10:29.850 --> 01:10:32.395
<v Speaker 0>Yes. I hope that's coming through. I think

01:10:32.395 --> 01:10:34.074
<v Speaker 0>a lot of these breaks are things that

01:10:34.074 --> 01:10:36.155
<v Speaker 0>just happened day in and day out in

01:10:36.155 --> 01:10:38.554
<v Speaker 0>Kubernetes. So easy to make labels selectors being

01:10:38.554 --> 01:10:40.235
<v Speaker 0>wrong, ports being mismatched,

01:10:40.315 --> 01:10:41.594
<v Speaker 0>protocol and just,

01:10:42.155 --> 01:10:44.554
<v Speaker 0>you know, really simple things that can really

01:10:44.554 --> 01:10:45.275
<v Speaker 0>trip people up.

01:10:46.340 --> 01:10:48.420
<v Speaker 0>You know, I hope this helped build a

01:10:48.420 --> 01:10:50.500
<v Speaker 0>little bit of familiarity with kubectl.

01:10:50.500 --> 01:10:52.260
<v Speaker 0>Jason does a great job of guiding you

01:10:52.260 --> 01:10:53.619
<v Speaker 0>through all of that. And I think you

01:10:53.619 --> 01:10:55.619
<v Speaker 0>both answered both asked a lot of really

01:10:55.619 --> 01:10:57.940
<v Speaker 0>good questions throughout that as well. And and

01:10:57.940 --> 01:11:01.145
<v Speaker 0>hopefully we just provide some really good fundamental

01:11:01.145 --> 01:11:04.105
<v Speaker 0>Kubernetes knowledge. So thank you for joining me

01:11:04.105 --> 01:11:05.704
<v Speaker 0>all today. I really enjoyed

01:11:05.945 --> 01:11:08.025
<v Speaker 0>watching you suffer a little bit, but

01:11:08.665 --> 01:11:10.585
<v Speaker 0>also Was was glad was

01:11:10.905 --> 01:11:12.585
<v Speaker 1>glad to be here and also

01:11:13.145 --> 01:11:15.990
<v Speaker 1>easily illustrates the use of a second set

01:11:15.990 --> 01:11:17.430
<v Speaker 1>of eyes even if you don't know what

01:11:17.430 --> 01:11:18.790
<v Speaker 1>the problem is. The

01:11:19.270 --> 01:11:21.510
<v Speaker 1>the frequently phone a friend is a

01:11:21.990 --> 01:11:24.230
<v Speaker 1>and bounce something off instead of bang your

01:11:24.230 --> 01:11:25.510
<v Speaker 1>head on it by yourself.

01:11:26.710 --> 01:11:29.910
<v Speaker 2>I am now only referring to this

01:11:29.475 --> 01:11:30.914
<v Speaker 2>sadism with David.

01:11:32.114 --> 01:11:33.554
<v Speaker 0>Well, I'm gonna move the comments so I

01:11:33.554 --> 01:11:35.155
<v Speaker 0>stop getting my eyes covered up.

01:11:36.514 --> 01:11:38.195
<v Speaker 2>So no. That was fun. Thanks for having

01:11:38.195 --> 01:11:40.114
<v Speaker 2>me. That was a lot of fun. Nerve

01:11:40.114 --> 01:11:41.955
<v Speaker 2>racking, but it's so much fun. And, Jason,

01:11:42.690 --> 01:11:44.930
<v Speaker 2>thank you for joining us. This would have

01:11:44.930 --> 01:11:45.250
<v Speaker 2>been a

01:11:46.130 --> 01:11:47.570
<v Speaker 2>six hours later, we'd still be

01:11:48.449 --> 01:11:49.810
<v Speaker 2>I'd still be where I where I was

01:11:49.810 --> 01:11:51.170
<v Speaker 2>when I started, so thank you for your

01:11:51.170 --> 01:11:51.650
<v Speaker 2>help.

01:11:52.449 --> 01:11:53.250
<v Speaker 3>Absolutely.

01:11:53.570 --> 01:11:55.905
<v Speaker 0>Alright. Thanks for having me. Thank you, everybody.

01:11:55.905 --> 01:11:57.425
<v Speaker 0>Have a wonderful day. We'll see you all

01:11:57.425 --> 01:11:58.945
<v Speaker 0>next week. Thanks. Bye all.
