WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 551110a9-68f9-4cb7-9e2f-065b6aa98c30
Created: 2025-04-29T20:06:38.324Z
Duration: 5620.002
Channels: 1

00:01:25.320 --> 00:01:27.880
<v Speaker 0>Hello, and welcome to today's episode of Rawkode

00:01:27.880 --> 00:01:29.719
<v Speaker 0>live. I am your host, Rawkode.

00:01:30.335 --> 00:01:31.854
<v Speaker 0>Today, we're gonna be taking a look at

00:01:31.854 --> 00:01:33.935
<v Speaker 0>one of my favorite tools for managing Kubernetes

00:01:33.935 --> 00:01:36.015
<v Speaker 0>manifest. That is Kapitan.

00:01:36.015 --> 00:01:38.335
<v Speaker 0>It helps reduce the complexity or manage the

00:01:38.335 --> 00:01:41.534
<v Speaker 0>complexity of your Kubernetes Terraform and other deployments

00:01:41.534 --> 00:01:42.255
<v Speaker 0>and configurations.

00:01:42.680 --> 00:01:44.759
<v Speaker 0>To do that and to join me today,

00:01:44.920 --> 00:01:47.560
<v Speaker 0>I have Alessandro and Ricardo from the Kapitan

00:01:47.560 --> 00:01:49.159
<v Speaker 0>team. Hello. Hi.

00:01:50.119 --> 00:01:50.920
<v Speaker 1>Hi.

00:01:51.960 --> 00:01:54.200
<v Speaker 1>Hi, David. Thank you for having us here.

00:01:54.200 --> 00:01:56.134
<v Speaker 0>No. It's my pleasure. I really do mean

00:01:56.134 --> 00:01:57.255
<v Speaker 0>it. See this is one of my favorite

00:01:57.255 --> 00:01:59.575
<v Speaker 0>tools. I'm really glad that I'm joined by

00:01:59.575 --> 00:02:00.854
<v Speaker 0>both of you today, and we can share

00:02:00.854 --> 00:02:02.295
<v Speaker 0>that and show that to everyone that is

00:02:02.295 --> 00:02:02.935
<v Speaker 0>watching.

00:02:03.494 --> 00:02:06.375
<v Speaker 0>Shall we start briefly then with some introductions?

00:02:06.375 --> 00:02:08.535
<v Speaker 0>We'll start with Alessandro since you're first on

00:02:08.535 --> 00:02:09.735
<v Speaker 0>the screen, and then we'll move down to

00:02:09.735 --> 00:02:10.134
<v Speaker 0>Ricardo.

00:02:11.190 --> 00:02:13.510
<v Speaker 1>Yeah. So my name is Alessandro de Maria.

00:02:13.510 --> 00:02:15.030
<v Speaker 1>I'm head of SRE

00:02:15.190 --> 00:02:16.630
<v Speaker 1>at Synthes,

00:02:16.870 --> 00:02:19.270
<v Speaker 1>a company that deals with automation

00:02:19.270 --> 00:02:21.670
<v Speaker 1>in biology. So it's a it's quite a

00:02:21.670 --> 00:02:23.430
<v Speaker 1>a a relative kind of a

00:02:24.675 --> 00:02:25.475
<v Speaker 1>a field,

00:02:26.754 --> 00:02:27.555
<v Speaker 1>know, in

00:02:27.795 --> 00:02:28.675
<v Speaker 1>in this case.

00:02:28.995 --> 00:02:31.395
<v Speaker 1>And I used to work at DeepMind before,

00:02:31.474 --> 00:02:34.195
<v Speaker 1>so that's where I met Ricardo,

00:02:34.595 --> 00:02:36.595
<v Speaker 1>and we got together to work on on

00:02:36.595 --> 00:02:37.155
<v Speaker 1>Kapitan.

00:02:37.900 --> 00:02:39.820
<v Speaker 1>So at the moment, it's, I think, three

00:02:39.820 --> 00:02:41.980
<v Speaker 1>or four four years that we've open sourced

00:02:41.980 --> 00:02:44.300
<v Speaker 1>it. And I think this year, we've seen

00:02:44.300 --> 00:02:47.340
<v Speaker 1>much more interest, and we want to take

00:02:47.340 --> 00:02:48.380
<v Speaker 1>advantage of

00:02:49.180 --> 00:02:51.180
<v Speaker 1>as much as we can view on everybody

00:02:51.180 --> 00:02:52.784
<v Speaker 1>else in the community to see if we

00:02:52.784 --> 00:02:55.105
<v Speaker 1>can make it more popular and give it,

00:02:55.265 --> 00:02:56.305
<v Speaker 1>you know, better

00:02:58.224 --> 00:02:59.585
<v Speaker 1>better opportunity.

00:03:00.385 --> 00:03:01.345
<v Speaker 1>That's for me.

00:03:01.745 --> 00:03:02.385
<v Speaker 2>Cool.

00:03:02.704 --> 00:03:05.265
<v Speaker 2>Hi. I'm Ricardo. I am currently a software

00:03:05.265 --> 00:03:07.265
<v Speaker 2>engineer at Google. I think it needs no

00:03:07.265 --> 00:03:07.745
<v Speaker 2>introductions.

00:03:08.360 --> 00:03:10.040
<v Speaker 2>More specifically, Google Health.

00:03:10.440 --> 00:03:11.000
<v Speaker 2>And

00:03:11.560 --> 00:03:12.920
<v Speaker 2>be before that,

00:03:13.319 --> 00:03:15.560
<v Speaker 2>I was also a deep mind, as Alessandro

00:03:15.560 --> 00:03:16.280
<v Speaker 2>said.

00:03:16.520 --> 00:03:18.600
<v Speaker 2>And we were running

00:03:19.080 --> 00:03:21.400
<v Speaker 2>a team of SRE there, and that's when

00:03:21.400 --> 00:03:21.640
<v Speaker 2>we,

00:03:22.625 --> 00:03:24.385
<v Speaker 2>you know, had the idea to create something

00:03:24.385 --> 00:03:25.345
<v Speaker 2>like Kapitan.

00:03:25.345 --> 00:03:25.905
<v Speaker 2>And

00:03:26.385 --> 00:03:27.905
<v Speaker 2>thank you for having me here.

00:03:28.385 --> 00:03:29.985
<v Speaker 0>Awesome. Thank you very much.

00:03:30.465 --> 00:03:33.265
<v Speaker 0>Alright. So why don't we start then

00:03:33.505 --> 00:03:35.905
<v Speaker 0>and just tell people what Kapitan

00:03:35.905 --> 00:03:36.224
<v Speaker 0>is?

00:03:37.200 --> 00:03:38.240
<v Speaker 0>Do you wanna give us the slides for

00:03:38.240 --> 00:03:39.840
<v Speaker 0>that or do wanna talk about it first?

00:03:40.880 --> 00:03:42.480
<v Speaker 1>Yeah. I think the slides is a is

00:03:42.480 --> 00:03:43.840
<v Speaker 1>a good way. We try to

00:03:44.800 --> 00:03:46.480
<v Speaker 1>I think let me open, make sure that

00:03:46.480 --> 00:03:48.640
<v Speaker 1>they are open. Yes. So we try to

00:03:49.985 --> 00:03:51.985
<v Speaker 1>it, and pretty much every time it comes

00:03:51.985 --> 00:03:54.465
<v Speaker 1>out in a different from a different point

00:03:54.465 --> 00:03:56.704
<v Speaker 1>of view. I don't know if these slides

00:03:56.704 --> 00:03:57.585
<v Speaker 1>are already

00:03:57.745 --> 00:04:00.545
<v Speaker 1>visible. Yeah? They are. Please. Yeah. Yes. Perfect.

00:04:00.625 --> 00:04:01.185
<v Speaker 1>Yeah. So

00:04:02.840 --> 00:04:05.800
<v Speaker 1>Kapitani is a tool, again, that we created

00:04:05.800 --> 00:04:06.360
<v Speaker 1>in

00:04:06.600 --> 00:04:08.520
<v Speaker 1>a deep mind at the time where,

00:04:08.840 --> 00:04:11.960
<v Speaker 1>there were fewer opportunities, fewer other tools. I

00:04:11.960 --> 00:04:13.640
<v Speaker 1>think, Helm was already,

00:04:14.200 --> 00:04:16.535
<v Speaker 1>out there, but we were looking for something

00:04:16.535 --> 00:04:17.654
<v Speaker 1>slightly different,

00:04:17.975 --> 00:04:20.615
<v Speaker 1>especially because we were we had a a

00:04:20.615 --> 00:04:21.335
<v Speaker 1>very

00:04:21.975 --> 00:04:23.415
<v Speaker 1>kind of particular

00:04:23.415 --> 00:04:25.735
<v Speaker 1>setup with DeepMind Health where we were we

00:04:25.735 --> 00:04:26.775
<v Speaker 1>were working on

00:04:27.590 --> 00:04:29.350
<v Speaker 1>lots of components that we were doing doing

00:04:29.350 --> 00:04:30.630
<v Speaker 1>ourselves. So

00:04:31.910 --> 00:04:34.070
<v Speaker 1>I'll start with with this kind of slide

00:04:34.070 --> 00:04:35.830
<v Speaker 1>just to explain a little bit

00:04:36.310 --> 00:04:38.230
<v Speaker 1>what led us to to work with

00:04:39.430 --> 00:04:40.470
<v Speaker 1>to work on Kapitan.

00:04:42.595 --> 00:04:43.715
<v Speaker 1>With Helm,

00:04:44.835 --> 00:04:46.995
<v Speaker 1>sorry. With with Kubernetes,

00:04:47.235 --> 00:04:49.715
<v Speaker 1>we realized at the beginning that there were

00:04:49.715 --> 00:04:51.155
<v Speaker 1>so many resources,

00:04:51.155 --> 00:04:54.195
<v Speaker 1>so many manifests for each given workload that

00:04:54.195 --> 00:04:54.915
<v Speaker 1>we have to manage.

00:04:55.600 --> 00:04:57.920
<v Speaker 1>And, pretty much, we realized that,

00:04:58.560 --> 00:05:01.920
<v Speaker 1>a good part of those resources were, well,

00:05:01.920 --> 00:05:03.280
<v Speaker 1>ball boilerplate.

00:05:03.520 --> 00:05:07.520
<v Speaker 1>There were some application specific kind of configurations,

00:05:08.225 --> 00:05:10.625
<v Speaker 1>and and they were also, like, environment or

00:05:10.625 --> 00:05:12.785
<v Speaker 1>release specific. But pretty much, you you kept

00:05:12.785 --> 00:05:15.585
<v Speaker 1>repeating the same kind of configuration over and

00:05:15.585 --> 00:05:17.825
<v Speaker 1>over and over. And while

00:05:18.705 --> 00:05:21.425
<v Speaker 1>I think other tooling like Helm was

00:05:22.310 --> 00:05:25.830
<v Speaker 1>had the advantage of a a packaging kind

00:05:25.830 --> 00:05:28.390
<v Speaker 1>of application that were written for,

00:05:28.710 --> 00:05:30.870
<v Speaker 1>like, off the shelf kind of application. We

00:05:30.870 --> 00:05:31.830
<v Speaker 1>were looking at

00:05:32.390 --> 00:05:34.310
<v Speaker 1>we were not gonna use that anyway because

00:05:34.310 --> 00:05:37.035
<v Speaker 1>we were developing our own application. So we

00:05:37.035 --> 00:05:38.395
<v Speaker 1>looked at it in a in a different

00:05:38.395 --> 00:05:40.475
<v Speaker 1>way and from a different perspective.

00:05:40.875 --> 00:05:42.715
<v Speaker 1>And, I think the point is that we

00:05:42.715 --> 00:05:45.755
<v Speaker 1>wanted to be able to not just configure,

00:05:46.155 --> 00:05:47.595
<v Speaker 1>the one application,

00:05:47.595 --> 00:05:49.035
<v Speaker 1>but to, like, act actually

00:05:49.560 --> 00:05:53.240
<v Speaker 1>manage the full deployment, the full environment.

00:05:53.320 --> 00:05:55.560
<v Speaker 1>We wanted to make sure that if you,

00:05:56.920 --> 00:05:58.600
<v Speaker 1>if you write a

00:05:59.080 --> 00:06:01.000
<v Speaker 1>piece of configuration information

00:06:01.985 --> 00:06:03.585
<v Speaker 1>of something that you have it within your

00:06:03.585 --> 00:06:04.465
<v Speaker 1>infrastructure,

00:06:04.705 --> 00:06:05.985
<v Speaker 1>you could share it

00:06:06.705 --> 00:06:07.745
<v Speaker 1>across

00:06:07.745 --> 00:06:09.985
<v Speaker 1>many other systems. And I think probably this

00:06:09.985 --> 00:06:12.385
<v Speaker 1>is what we are going to explain today.

00:06:12.865 --> 00:06:13.425
<v Speaker 1>So

00:06:13.825 --> 00:06:17.585
<v Speaker 1>first of all, now mean, this is now

00:06:16.919 --> 00:06:19.800
<v Speaker 1>jumping to, nowadays. We have Kubernetes

00:06:20.280 --> 00:06:23.160
<v Speaker 1>resources coming from many different places. So we

00:06:23.160 --> 00:06:26.280
<v Speaker 1>have, like, a Helm charts, which is, by

00:06:26.280 --> 00:06:28.280
<v Speaker 1>by far the most popular way to get,

00:06:28.440 --> 00:06:30.759
<v Speaker 1>kind of a to get started with Kubernetes.

00:06:30.759 --> 00:06:31.639
<v Speaker 1>We have customized.

00:06:32.164 --> 00:06:35.445
<v Speaker 1>We have some controllers that sometimes, like, create

00:06:35.845 --> 00:06:37.285
<v Speaker 1>new

00:06:38.565 --> 00:06:41.764
<v Speaker 1>inject kind of configuration right into the cluster,

00:06:41.925 --> 00:06:44.485
<v Speaker 1>and many other kind of different ways that

00:06:44.485 --> 00:06:47.205
<v Speaker 1>you basically end up using every day

00:06:47.660 --> 00:06:48.220
<v Speaker 1>to,

00:06:48.940 --> 00:06:50.780
<v Speaker 1>to to get your deployment, to get to

00:06:50.780 --> 00:06:52.860
<v Speaker 1>get your infrastructure running.

00:06:53.580 --> 00:06:55.419
<v Speaker 1>With on top of that, there are new

00:06:55.419 --> 00:06:58.620
<v Speaker 1>CRDs being added every day. So it it

00:06:58.620 --> 00:07:01.100
<v Speaker 1>is really, if you look at, from a

00:07:01.275 --> 00:07:03.995
<v Speaker 1>from a user perspective, if you imagine how

00:07:03.995 --> 00:07:05.995
<v Speaker 1>many resources you have to deal with,

00:07:06.634 --> 00:07:08.875
<v Speaker 1>when using Kubernetes is just a a a

00:07:08.875 --> 00:07:10.875
<v Speaker 1>huge amount a huge number.

00:07:11.195 --> 00:07:11.914
<v Speaker 1>And so

00:07:13.650 --> 00:07:16.210
<v Speaker 1>we started to to look at, you know,

00:07:16.210 --> 00:07:17.729
<v Speaker 1>the this kind of tools. So we we

00:07:17.729 --> 00:07:19.570
<v Speaker 1>keep comparing with what's out there.

00:07:20.290 --> 00:07:21.410
<v Speaker 1>Like, the most,

00:07:21.889 --> 00:07:22.450
<v Speaker 1>known,

00:07:23.330 --> 00:07:26.449
<v Speaker 1>tools are Helm, Customize, Tanka. There are many

00:07:26.449 --> 00:07:27.970
<v Speaker 1>others. I don't want to include all of

00:07:27.970 --> 00:07:30.195
<v Speaker 1>them. But I I think pretty much what

00:07:30.275 --> 00:07:31.955
<v Speaker 1>the the reason what led that led us

00:07:31.955 --> 00:07:34.675
<v Speaker 1>to develop Kapitan, we still haven't seen, like,

00:07:34.675 --> 00:07:37.475
<v Speaker 1>an alternative for to to fill our need

00:07:37.475 --> 00:07:40.355
<v Speaker 1>is that most of these other application tend

00:07:40.355 --> 00:07:41.075
<v Speaker 1>to focus

00:07:41.680 --> 00:07:43.520
<v Speaker 1>on one component

00:07:43.520 --> 00:07:44.320
<v Speaker 1>at a time

00:07:44.640 --> 00:07:47.040
<v Speaker 1>or one application at a time and don't

00:07:47.040 --> 00:07:49.280
<v Speaker 1>have, like, the the ability to capture the

00:07:49.280 --> 00:07:51.920
<v Speaker 1>full deployments or the full setup you have

00:07:51.920 --> 00:07:54.560
<v Speaker 1>across all your infrastructure, at least not in

00:07:54.560 --> 00:07:57.585
<v Speaker 1>the way that we we we we become

00:07:57.585 --> 00:07:59.665
<v Speaker 1>used to to do.

00:08:00.625 --> 00:08:01.665
<v Speaker 1>They don't

00:08:02.545 --> 00:08:03.985
<v Speaker 1>allow to

00:08:04.465 --> 00:08:07.665
<v Speaker 1>or or promote the reuse of configuration data.

00:08:07.985 --> 00:08:08.305
<v Speaker 1>Oops.

00:08:10.750 --> 00:08:12.110
<v Speaker 1>Configuration data.

00:08:12.349 --> 00:08:13.710
<v Speaker 1>And I think, in

00:08:14.110 --> 00:08:16.430
<v Speaker 1>general, every year of these kind of components

00:08:16.430 --> 00:08:18.830
<v Speaker 1>have a slightly different kind of approach for

00:08:18.830 --> 00:08:20.669
<v Speaker 1>for some aspect of it. So the way

00:08:20.669 --> 00:08:22.915
<v Speaker 1>you deal with the secrets on Helm would

00:08:22.915 --> 00:08:25.155
<v Speaker 1>probably be different than you do it with

00:08:25.155 --> 00:08:28.195
<v Speaker 1>customized probably different than you do in Tanka.

00:08:30.755 --> 00:08:33.235
<v Speaker 1>Yeah. And in general, I think another component,

00:08:33.235 --> 00:08:34.674
<v Speaker 1>I think this is something that would become

00:08:34.674 --> 00:08:37.715
<v Speaker 1>more clear when

00:08:36.860 --> 00:08:39.740
<v Speaker 1>as we go through the presentation is that

00:08:40.700 --> 00:08:43.339
<v Speaker 1>we all these components that all these other

00:08:43.339 --> 00:08:44.700
<v Speaker 1>systems tend to

00:08:45.260 --> 00:08:47.260
<v Speaker 1>defer rendering the

00:08:47.580 --> 00:08:50.935
<v Speaker 1>produce manifest to the last stage, while we

00:08:50.935 --> 00:08:54.535
<v Speaker 1>think that managing the the compiled the rendered

00:08:54.615 --> 00:08:56.454
<v Speaker 1>version of the of the manifest is is

00:08:56.454 --> 00:08:58.055
<v Speaker 1>a is an important feature

00:08:58.135 --> 00:09:01.014
<v Speaker 1>that helps us, when we want to, review

00:09:01.014 --> 00:09:02.135
<v Speaker 1>our changes. So

00:09:03.660 --> 00:09:05.420
<v Speaker 1>and again, in general, these are all kind

00:09:05.420 --> 00:09:07.820
<v Speaker 1>of Kubernetes centric. So at the end, it's

00:09:07.820 --> 00:09:09.020
<v Speaker 1>like you have this

00:09:10.700 --> 00:09:11.660
<v Speaker 1>idea

00:09:11.740 --> 00:09:13.580
<v Speaker 1>that everything you will be

00:09:14.060 --> 00:09:15.980
<v Speaker 1>dealing with in on a day by day

00:09:15.980 --> 00:09:18.415
<v Speaker 1>kind of everything to do with Kubernetes. In

00:09:18.415 --> 00:09:21.295
<v Speaker 1>reality, we have many other

00:09:22.415 --> 00:09:24.335
<v Speaker 1>components. And this is what, I mean, gives

00:09:24.335 --> 00:09:24.655
<v Speaker 1>gives

00:09:25.375 --> 00:09:27.855
<v Speaker 1>brings back to the idea of we we

00:09:27.855 --> 00:09:30.450
<v Speaker 1>always call it a generic configuration

00:09:30.450 --> 00:09:32.610
<v Speaker 1>system. It's that the same system can be

00:09:32.610 --> 00:09:33.730
<v Speaker 1>used for Terraform,

00:09:33.730 --> 00:09:35.330
<v Speaker 1>can be used for Istio,

00:09:35.730 --> 00:09:37.170
<v Speaker 1>can be used for Spinnaker,

00:09:37.170 --> 00:09:39.410
<v Speaker 1>pipeline, can be used for Ansible, and and

00:09:39.410 --> 00:09:40.530
<v Speaker 1>for many other tools.

00:09:43.705 --> 00:09:44.585
<v Speaker 1>We've

00:09:44.585 --> 00:09:46.825
<v Speaker 1>also seen that some people are using Kapitan

00:09:46.825 --> 00:09:47.465
<v Speaker 1>for

00:09:48.905 --> 00:09:51.065
<v Speaker 1>for for generating basically

00:09:52.265 --> 00:09:54.505
<v Speaker 1>a configuration for their internal

00:09:54.505 --> 00:09:55.625
<v Speaker 1>or legacy

00:09:56.825 --> 00:09:57.145
<v Speaker 1>tools.

00:09:57.710 --> 00:09:59.790
<v Speaker 1>And we wanted to be able, from a

00:09:59.790 --> 00:10:03.470
<v Speaker 1>center point, to manage playbooks, documentation, and dashboards.

00:10:04.030 --> 00:10:05.870
<v Speaker 1>I realized

00:10:05.870 --> 00:10:08.350
<v Speaker 1>that in these slides, I'm pretty sure I

00:10:08.350 --> 00:10:10.270
<v Speaker 1>have it somewhere, but I think it's it's

00:10:10.270 --> 00:10:12.135
<v Speaker 1>in a little bit. I think I I

00:10:12.375 --> 00:10:14.855
<v Speaker 1>these are basically setting up the the kind

00:10:14.855 --> 00:10:16.535
<v Speaker 1>of understanding of what Kapitan

00:10:16.695 --> 00:10:18.695
<v Speaker 1>is and what we're trying to achieve. We're

00:10:18.695 --> 00:10:20.774
<v Speaker 1>trying to to give you a single place

00:10:20.774 --> 00:10:23.495
<v Speaker 1>from which you can manage playbooks, documentation,

00:10:23.495 --> 00:10:24.055
<v Speaker 1>dashboards,

00:10:24.350 --> 00:10:26.590
<v Speaker 1>and every systems that you have out there,

00:10:26.590 --> 00:10:27.310
<v Speaker 1>ideally.

00:10:28.430 --> 00:10:29.710
<v Speaker 1>And so, basically,

00:10:30.510 --> 00:10:31.950
<v Speaker 1>with that consideration,

00:10:32.270 --> 00:10:35.150
<v Speaker 1>we were trying to basically have that one

00:10:35.150 --> 00:10:36.110
<v Speaker 1>single thing

00:10:36.524 --> 00:10:38.685
<v Speaker 1>can control all of your infrastructure. And this

00:10:38.685 --> 00:10:40.685
<v Speaker 1>is basically what I'm trying to

00:10:41.565 --> 00:10:42.204
<v Speaker 1>to

00:10:42.444 --> 00:10:45.324
<v Speaker 1>explain, to introduce what Kapitan actually is.

00:10:45.565 --> 00:10:47.644
<v Speaker 1>Kapitan is effectively

00:10:47.964 --> 00:10:50.524
<v Speaker 1>a a tool that allows you to generate

00:10:50.524 --> 00:10:51.165
<v Speaker 1>files

00:10:51.410 --> 00:10:54.130
<v Speaker 1>to be consumed by other systems. So it

00:10:54.130 --> 00:10:57.010
<v Speaker 1>doesn't Kapitan is not a tool for Kubernetes.

00:10:57.010 --> 00:10:59.650
<v Speaker 1>It's not for Terraform. It's just something that

00:10:59.650 --> 00:11:02.930
<v Speaker 1>somehow does its job of creating configuration and

00:11:02.930 --> 00:11:04.050
<v Speaker 1>then gets out of the way.

00:11:05.505 --> 00:11:06.545
<v Speaker 1>And I

00:11:06.945 --> 00:11:09.985
<v Speaker 1>think this very generic approach has the the

00:11:09.985 --> 00:11:11.185
<v Speaker 1>the benefit

00:11:11.745 --> 00:11:12.385
<v Speaker 1>of

00:11:12.705 --> 00:11:14.225
<v Speaker 1>allowing you to

00:11:15.425 --> 00:11:18.145
<v Speaker 1>pretty much enable the same workflow and the

00:11:18.145 --> 00:11:19.505
<v Speaker 1>same kind of approach

00:11:19.930 --> 00:11:21.210
<v Speaker 1>when managing

00:11:21.370 --> 00:11:25.050
<v Speaker 1>different classes of, systems and different classes of

00:11:25.050 --> 00:11:26.010
<v Speaker 1>technologies,

00:11:26.250 --> 00:11:27.530
<v Speaker 1>which is unfortunately

00:11:27.530 --> 00:11:29.850
<v Speaker 1>where we stand right now. We don't just

00:11:29.850 --> 00:11:31.930
<v Speaker 1>deal with Kubernetes at the moment. We deal

00:11:31.930 --> 00:11:35.130
<v Speaker 1>with many other kind of systems at once.

00:11:37.265 --> 00:11:39.265
<v Speaker 1>I think this is a a stop right

00:11:39.265 --> 00:11:41.185
<v Speaker 1>here. I think I talked already enough, and

00:11:41.185 --> 00:11:42.785
<v Speaker 1>I don't know if you have already questions

00:11:42.785 --> 00:11:45.425
<v Speaker 1>regarding this. I also realized that I don't

00:11:45.425 --> 00:11:47.425
<v Speaker 1>have a view of a of a of

00:11:47.425 --> 00:11:50.350
<v Speaker 1>you on the screen, so I'll just quickly

00:11:51.550 --> 00:11:52.430
<v Speaker 1>move the

00:11:53.550 --> 00:11:55.470
<v Speaker 1>move the presentation out of the way so

00:11:55.470 --> 00:11:57.790
<v Speaker 1>I can position it somewhere else. Otherwise, I

00:11:57.790 --> 00:11:58.830
<v Speaker 1>don't get any

00:11:59.070 --> 00:11:59.550
<v Speaker 1>here you go.

00:12:00.285 --> 00:12:02.685
<v Speaker 0>Alright. Very good. Back back here. We're we're

00:12:02.685 --> 00:12:04.524
<v Speaker 0>back on the now. So thank you for

00:12:04.524 --> 00:12:06.365
<v Speaker 0>that those intro slates.

00:12:06.764 --> 00:12:09.005
<v Speaker 0>If anyone watching has questions, please feel free

00:12:09.005 --> 00:12:11.005
<v Speaker 0>to use the comment section on YouTube. Leave

00:12:11.005 --> 00:12:12.204
<v Speaker 0>a comment to us, and we'll do our

00:12:12.204 --> 00:12:13.725
<v Speaker 0>best to handle them as we go or

00:12:13.725 --> 00:12:15.390
<v Speaker 0>group them at the end depending on how

00:12:15.390 --> 00:12:16.430
<v Speaker 0>relevant they are.

00:12:16.990 --> 00:12:18.830
<v Speaker 0>Now I think what we should do is

00:12:18.830 --> 00:12:21.710
<v Speaker 0>just get started. Right? We're gonna show people

00:12:21.710 --> 00:12:23.310
<v Speaker 0>how this works, how to install it, and

00:12:23.310 --> 00:12:25.550
<v Speaker 0>how to start using it. So So we

00:12:25.950 --> 00:12:28.350
<v Speaker 1>sorry. We we I do have more slides.

00:12:28.350 --> 00:12:29.630
<v Speaker 1>I didn't want to just I I just

00:12:29.630 --> 00:12:32.045
<v Speaker 1>wanted to give you the time to to

00:12:32.285 --> 00:12:34.285
<v Speaker 1>you know, if there was some any specific

00:12:34.285 --> 00:12:35.325
<v Speaker 1>question right now.

00:12:36.285 --> 00:12:38.045
<v Speaker 1>Unless you you think we should we should

00:12:38.045 --> 00:12:40.045
<v Speaker 1>move on. But I I just wanted to

00:12:40.125 --> 00:12:42.845
<v Speaker 1>quickly explain some basic concept before we move

00:12:42.845 --> 00:12:44.605
<v Speaker 1>on. Otherwise, you you you know, up to

00:12:44.605 --> 00:12:46.180
<v Speaker 1>you what what you want to do. No.

00:12:46.180 --> 00:12:47.620
<v Speaker 0>I mean, that's what I was when I

00:12:47.620 --> 00:12:48.900
<v Speaker 0>pulled up the website there, I was literally

00:12:48.900 --> 00:12:50.500
<v Speaker 0>gonna go through the key concepts to give

00:12:50.500 --> 00:12:52.100
<v Speaker 0>the the audience a bit of a vocabulary

00:12:52.100 --> 00:12:53.940
<v Speaker 0>and what that means. Okay. We have slides,

00:12:53.940 --> 00:12:55.460
<v Speaker 0>then that's perfect. I think I think yeah.

00:12:55.460 --> 00:12:57.140
<v Speaker 1>I think we have slides with that, and

00:12:57.620 --> 00:12:59.540
<v Speaker 1>we we let's see if if we made

00:13:00.965 --> 00:13:03.125
<v Speaker 1>a if you made it clear and and

00:13:03.125 --> 00:13:06.085
<v Speaker 1>if you can help us later. So let

00:13:06.085 --> 00:13:08.005
<v Speaker 1>me go Your slides are visible. Yeah.

00:13:08.965 --> 00:13:10.405
<v Speaker 1>Here we go. Yeah. Now I I can

00:13:10.405 --> 00:13:12.005
<v Speaker 1>see myself before I was a bit blind.

00:13:12.005 --> 00:13:13.285
<v Speaker 1>Sorry for for that.

00:13:14.360 --> 00:13:16.199
<v Speaker 1>So, like, Kapitan,

00:13:16.199 --> 00:13:18.279
<v Speaker 1>first of all, comes with batteries

00:13:18.279 --> 00:13:20.920
<v Speaker 1>included. I mean, the tool itself has a

00:13:20.920 --> 00:13:23.320
<v Speaker 1>a a range of features, which we will

00:13:23.320 --> 00:13:25.959
<v Speaker 1>discover through the website as well. So first

00:13:25.959 --> 00:13:28.120
<v Speaker 1>of all, we have this concept of the

00:13:28.120 --> 00:13:32.375
<v Speaker 1>inventory that allows you to reuse values and

00:13:33.175 --> 00:13:36.855
<v Speaker 1>share configuration data across many of the systems

00:13:36.855 --> 00:13:38.695
<v Speaker 1>that we will be dealing with. So you

00:13:38.695 --> 00:13:40.535
<v Speaker 1>will be able to define the configuration for

00:13:40.535 --> 00:13:42.455
<v Speaker 1>something and reuse it in

00:13:42.935 --> 00:13:44.135
<v Speaker 1>a cup Kubernetes,

00:13:45.980 --> 00:13:47.020
<v Speaker 1>Terraform,

00:13:47.020 --> 00:13:48.060
<v Speaker 1>documentation,

00:13:48.060 --> 00:13:49.740
<v Speaker 1>and so on. So that's the the kind

00:13:49.740 --> 00:13:51.100
<v Speaker 1>of first thing.

00:13:52.460 --> 00:13:53.340
<v Speaker 1>Second,

00:13:53.420 --> 00:13:56.300
<v Speaker 1>the same inventory data that you have can

00:13:56.300 --> 00:13:59.020
<v Speaker 1>be reused through a number of very powerful

00:13:59.020 --> 00:14:01.845
<v Speaker 1>into input types. So you can use, Ginger,

00:14:01.845 --> 00:14:03.845
<v Speaker 1>JSON, it, Cadet, Helm,

00:14:04.005 --> 00:14:05.685
<v Speaker 1>or other kind of tools to

00:14:06.165 --> 00:14:07.925
<v Speaker 1>to render, to create,

00:14:08.085 --> 00:14:10.565
<v Speaker 1>templates for whatever you want to whatever your

00:14:10.565 --> 00:14:11.125
<v Speaker 1>task is.

00:14:12.269 --> 00:14:14.589
<v Speaker 1>And I think the the third important key

00:14:14.589 --> 00:14:15.310
<v Speaker 1>is that,

00:14:15.790 --> 00:14:18.029
<v Speaker 1>Kapitan handles natively,

00:14:18.509 --> 00:14:20.589
<v Speaker 1>secrets with a with a very kind of

00:14:20.589 --> 00:14:21.149
<v Speaker 1>a

00:14:21.870 --> 00:14:24.350
<v Speaker 1>very nice kind of a support for, for

00:14:24.350 --> 00:14:27.175
<v Speaker 1>secrets. And we handle the majority of secrets

00:14:27.175 --> 00:14:29.975
<v Speaker 1>back end with the the ability to easily

00:14:29.975 --> 00:14:32.295
<v Speaker 1>extend to to add more and more secret

00:14:32.295 --> 00:14:34.455
<v Speaker 1>back ends as we go. And in general,

00:14:34.455 --> 00:14:36.615
<v Speaker 1>we have a, like, a an an external

00:14:36.615 --> 00:14:40.570
<v Speaker 1>ability to fetch dependencies externally. So instance, because

00:14:40.570 --> 00:14:42.170
<v Speaker 1>we have the Helm integration,

00:14:42.250 --> 00:14:44.650
<v Speaker 1>we can fetch Helm right from the repository,

00:14:44.650 --> 00:14:45.930
<v Speaker 1>and we can now just bring it in

00:14:45.930 --> 00:14:47.290
<v Speaker 1>through through Kapitan.

00:14:49.210 --> 00:14:51.210
<v Speaker 1>So the inventory is I think it's the

00:14:51.210 --> 00:14:53.210
<v Speaker 1>it's the the one concept I wanted to

00:14:53.210 --> 00:14:55.745
<v Speaker 1>be able to explain. The inventory

00:14:55.825 --> 00:14:58.785
<v Speaker 1>is basically becomes the single source of truth

00:14:58.785 --> 00:14:59.425
<v Speaker 1>for

00:14:59.745 --> 00:15:00.625
<v Speaker 1>Kapitan.

00:15:00.625 --> 00:15:03.025
<v Speaker 1>So it's a a YAML based structure

00:15:03.185 --> 00:15:04.225
<v Speaker 1>that lets you

00:15:05.025 --> 00:15:08.065
<v Speaker 1>define configuration in different files and then merge

00:15:08.065 --> 00:15:10.130
<v Speaker 1>them together in a way that it makes

00:15:10.130 --> 00:15:11.410
<v Speaker 1>sense to you and in a way that

00:15:11.410 --> 00:15:13.010
<v Speaker 1>I think will become clear as we start

00:15:13.010 --> 00:15:14.530
<v Speaker 1>using it. I think

00:15:15.490 --> 00:15:17.410
<v Speaker 2>so sorry. Sorry, Ale. The thing another thing

00:15:17.410 --> 00:15:19.010
<v Speaker 2>we can say is that the the inventory

00:15:19.010 --> 00:15:19.650
<v Speaker 2>is

00:15:20.370 --> 00:15:21.810
<v Speaker 2>somewhat inspired

00:15:21.810 --> 00:15:23.170
<v Speaker 2>by the puppet Hira.

00:15:24.305 --> 00:15:27.345
<v Speaker 2>No. It's essentially a essentially a tree of

00:15:27.345 --> 00:15:28.145
<v Speaker 2>values

00:15:28.545 --> 00:15:31.905
<v Speaker 2>that you can refer to within your programming

00:15:31.905 --> 00:15:33.985
<v Speaker 2>of templates. So you can always

00:15:34.945 --> 00:15:37.425
<v Speaker 2>ensure that the values exist somewhere. You don't

00:15:37.425 --> 00:15:38.865
<v Speaker 2>have to have them hardcoded

00:15:39.290 --> 00:15:41.530
<v Speaker 2>in your code, but they'll belong in the

00:15:41.530 --> 00:15:42.970
<v Speaker 2>inventory. That's the idea.

00:15:44.170 --> 00:15:46.810
<v Speaker 1>So, yeah, define it once, use it multiple

00:15:46.810 --> 00:15:50.890
<v Speaker 1>times, use it across multiple targets, multiple templates.

00:15:51.290 --> 00:15:52.330
<v Speaker 1>And the

00:15:52.490 --> 00:15:54.730
<v Speaker 1>basic idea revolves around the concept of a

00:15:54.730 --> 00:15:56.705
<v Speaker 1>target, which is what what you are working

00:15:56.705 --> 00:15:59.025
<v Speaker 1>on. So your current project you're working on,

00:15:59.185 --> 00:16:01.904
<v Speaker 1>and classes, which is pieces of inventory that

00:16:01.904 --> 00:16:04.385
<v Speaker 1>you can share across different targets.

00:16:06.145 --> 00:16:08.305
<v Speaker 1>The the one new thing that we have

00:16:08.465 --> 00:16:11.610
<v Speaker 1>so if people have experience with Kapitan before

00:16:11.930 --> 00:16:13.770
<v Speaker 1>and they run away from it because they

00:16:13.770 --> 00:16:15.370
<v Speaker 1>thought it was too difficult,

00:16:15.930 --> 00:16:17.610
<v Speaker 1>the one thing that we would like to

00:16:17.610 --> 00:16:20.410
<v Speaker 1>show you today is this kind of new

00:16:20.410 --> 00:16:22.785
<v Speaker 1>approach that we have to

00:16:23.265 --> 00:16:24.625
<v Speaker 1>easily generate

00:16:25.345 --> 00:16:26.465
<v Speaker 1>configuration

00:16:26.465 --> 00:16:28.705
<v Speaker 1>straight from the inventory, which I think is

00:16:28.705 --> 00:16:30.785
<v Speaker 1>extremely powerful. And I think this is what

00:16:30.945 --> 00:16:32.145
<v Speaker 1>if we have to

00:16:33.025 --> 00:16:34.225
<v Speaker 1>if we have to

00:16:35.230 --> 00:16:37.470
<v Speaker 1>do any demo or any kind of a

00:16:37.470 --> 00:16:39.709
<v Speaker 1>a way to show how to use Kapitan,

00:16:39.709 --> 00:16:41.470
<v Speaker 1>and I think that's that's what we we

00:16:41.470 --> 00:16:43.470
<v Speaker 1>will be doing today. So there is no

00:16:43.470 --> 00:16:46.029
<v Speaker 1>JSONET doc cadet at all. So if you

00:16:46.029 --> 00:16:49.389
<v Speaker 1>if you've if you've always associate associate Kapitan

00:16:49.389 --> 00:16:51.045
<v Speaker 1>to just on it, it's a a

00:16:51.765 --> 00:16:54.165
<v Speaker 1>a it now becomes clear that JSONET is

00:16:54.165 --> 00:16:56.805
<v Speaker 1>something that can power Kapitan, like Cadet or

00:16:56.805 --> 00:16:57.525
<v Speaker 1>Python,

00:16:57.605 --> 00:16:59.445
<v Speaker 1>but it's not necessarily the only way to

00:16:59.445 --> 00:17:00.725
<v Speaker 1>to experience it.

00:17:01.525 --> 00:17:03.525
<v Speaker 1>And the way to describe is like a

00:17:03.525 --> 00:17:05.765
<v Speaker 1>a a very powerful plug in where you

00:17:05.765 --> 00:17:08.440
<v Speaker 1>can define something that you want to create,

00:17:08.440 --> 00:17:10.520
<v Speaker 1>the Kapitan will generate it for you. So

00:17:10.520 --> 00:17:12.520
<v Speaker 1>we can go that in a into into

00:17:12.520 --> 00:17:14.760
<v Speaker 1>details soon, but the plan is to release

00:17:14.920 --> 00:17:16.520
<v Speaker 1>at the moment, we have a Kubernetes one,

00:17:16.520 --> 00:17:18.875
<v Speaker 1>which we will be playing with today. But

00:17:18.875 --> 00:17:20.875
<v Speaker 1>we will the plan is to release more

00:17:20.875 --> 00:17:22.714
<v Speaker 1>and more generators as we go

00:17:23.355 --> 00:17:24.635
<v Speaker 1>as we go along.

00:17:25.115 --> 00:17:25.755
<v Speaker 1>And

00:17:26.235 --> 00:17:28.875
<v Speaker 1>any I think, probably pretty much, this is

00:17:28.875 --> 00:17:31.355
<v Speaker 1>the last part. Everything else, I think we

00:17:31.355 --> 00:17:33.770
<v Speaker 1>can even go back later. But this is

00:17:33.770 --> 00:17:36.090
<v Speaker 1>basically the workflow we will see today as

00:17:36.090 --> 00:17:38.409
<v Speaker 1>we play with the Kapitan. So you will

00:17:38.409 --> 00:17:38.889
<v Speaker 1>be

00:17:39.210 --> 00:17:40.090
<v Speaker 1>editing

00:17:40.090 --> 00:17:41.850
<v Speaker 1>the configuration in Kapitan.

00:17:41.929 --> 00:17:42.489
<v Speaker 1>Usually,

00:17:42.890 --> 00:17:45.530
<v Speaker 1>we generator usually will be editing the inventory.

00:17:45.530 --> 00:17:47.770
<v Speaker 1>So every edit editing kind of a YAML

00:17:47.770 --> 00:17:48.250
<v Speaker 1>structures.

00:17:48.615 --> 00:17:50.294
<v Speaker 1>Kapitan will compile

00:17:50.535 --> 00:17:51.254
<v Speaker 1>and create

00:17:51.815 --> 00:17:54.534
<v Speaker 1>outputs for you, like output manifests.

00:17:54.695 --> 00:17:57.175
<v Speaker 1>And once that kind of review process has

00:17:57.175 --> 00:17:57.815
<v Speaker 1>finished,

00:17:58.135 --> 00:17:59.975
<v Speaker 1>you you do what you want to do

00:17:59.975 --> 00:18:01.975
<v Speaker 1>with those outputs. Most of the time is

00:18:01.975 --> 00:18:04.700
<v Speaker 1>to deploy to your environment. They can be

00:18:04.700 --> 00:18:06.539
<v Speaker 1>anything else. It can be including,

00:18:07.580 --> 00:18:09.420
<v Speaker 1>you know, like, a running script or generic

00:18:09.420 --> 00:18:12.460
<v Speaker 1>documentation and everything else. And I think with

00:18:12.460 --> 00:18:14.780
<v Speaker 1>this, I've covered the main concept. There is

00:18:14.780 --> 00:18:16.540
<v Speaker 1>a little bit more, but I think we

00:18:16.540 --> 00:18:19.100
<v Speaker 1>can, go on with the with your demo

00:18:19.405 --> 00:18:20.525
<v Speaker 1>and and

00:18:20.525 --> 00:18:22.845
<v Speaker 1>the on the website and and we can

00:18:22.845 --> 00:18:24.765
<v Speaker 1>see we can discover new things as we

00:18:24.765 --> 00:18:26.125
<v Speaker 1>go along.

00:18:27.165 --> 00:18:29.885
<v Speaker 0>Alright. Perfect. Thank you very much, Alessandro.

00:18:31.660 --> 00:18:33.980
<v Speaker 0>Yeah. I I mean, you you've covered so

00:18:33.980 --> 00:18:35.420
<v Speaker 0>much of the project there that I just

00:18:35.580 --> 00:18:36.940
<v Speaker 0>I think I'll highlight a few of the

00:18:36.940 --> 00:18:39.580
<v Speaker 0>things that that I really like about Kapitan.

00:18:40.380 --> 00:18:42.140
<v Speaker 0>The first one is just the way that

00:18:42.140 --> 00:18:45.100
<v Speaker 0>I can actually have reusable composable

00:18:45.565 --> 00:18:47.725
<v Speaker 0>artifacts by using this, and it's not a

00:18:47.725 --> 00:18:49.885
<v Speaker 0>case of, like, this hierarchical designer if I

00:18:49.885 --> 00:18:51.645
<v Speaker 0>have to inherit a whole manifest and then

00:18:51.645 --> 00:18:53.405
<v Speaker 0>be able to, like, overly tweaks in a

00:18:53.405 --> 00:18:54.845
<v Speaker 0>weird way. Like, I feel like that constraint

00:18:54.845 --> 00:18:56.525
<v Speaker 0>is removed from me, which I think is

00:18:56.525 --> 00:18:57.085
<v Speaker 0>really powerful.

00:18:57.860 --> 00:19:00.100
<v Speaker 0>The secret management's built in, I think, was

00:19:00.100 --> 00:19:01.460
<v Speaker 0>one of the reasons that I got drawn

00:19:01.460 --> 00:19:03.060
<v Speaker 0>to it in the first place, not having

00:19:03.060 --> 00:19:04.900
<v Speaker 0>to manage and deal with, you know, sealed

00:19:04.900 --> 00:19:07.700
<v Speaker 0>secrets or or SOPs and also tools and

00:19:07.700 --> 00:19:09.460
<v Speaker 0>trying to daisy chain them together

00:19:10.195 --> 00:19:11.555
<v Speaker 0>was a big one as well.

00:19:12.195 --> 00:19:14.275
<v Speaker 0>And I guess lastly, a feature that you

00:19:14.275 --> 00:19:15.715
<v Speaker 0>haven't mentioned, but I think it's really important

00:19:15.715 --> 00:19:16.995
<v Speaker 0>is that every time I say the name,

00:19:16.995 --> 00:19:18.835
<v Speaker 0>I sing El Kapitan by OPM, which I

00:19:18.835 --> 00:19:20.515
<v Speaker 0>think is is really important to having a

00:19:20.515 --> 00:19:22.515
<v Speaker 0>happy working day for me. So that's really

00:19:22.515 --> 00:19:22.755
<v Speaker 0>cool.

00:19:23.850 --> 00:19:24.570
<v Speaker 0>Now,

00:19:25.770 --> 00:19:27.850
<v Speaker 0>let's get started. Right?

00:19:28.250 --> 00:19:30.010
<v Speaker 0>We have to do that? Okay. Let's do

00:19:30.010 --> 00:19:30.809
<v Speaker 1>it. Yeah. Absolutely.

00:19:31.850 --> 00:19:33.370
<v Speaker 0>Okay. Let's see.

00:19:34.330 --> 00:19:36.170
<v Speaker 0>So this is the

00:19:36.165 --> 00:19:38.005
<v Speaker 0>Kapitan website,

00:19:38.965 --> 00:19:41.365
<v Speaker 0>and we are gonna go to the getting

00:19:41.365 --> 00:19:43.285
<v Speaker 0>started page. Or do you wanna start somewhere

00:19:43.285 --> 00:19:44.805
<v Speaker 0>else? I'll let you two guide me a

00:19:44.805 --> 00:19:45.605
<v Speaker 0>little bit here.

00:19:46.485 --> 00:19:47.605
<v Speaker 2>No. That's good.

00:19:48.405 --> 00:19:48.805
<v Speaker 2>Yep.

00:19:50.120 --> 00:19:51.400
<v Speaker 2>Overview is good.

00:19:53.320 --> 00:19:54.200
<v Speaker 0>Alright.

00:19:54.440 --> 00:19:56.040
<v Speaker 0>So we need to

00:19:56.840 --> 00:19:58.920
<v Speaker 0>get Kapitan installed.

00:19:59.080 --> 00:20:00.280
<v Speaker 0>Oh, Sam, you're have to go back and

00:20:00.280 --> 00:20:02.440
<v Speaker 0>see. So I I yeah. I think if

00:20:02.440 --> 00:20:04.840
<v Speaker 1>you if you probably the best way to

00:20:04.465 --> 00:20:06.145
<v Speaker 1>if you go back to the homepage

00:20:06.305 --> 00:20:08.305
<v Speaker 1>and if you follow the Kapitan

00:20:08.305 --> 00:20:09.185
<v Speaker 1>reference,

00:20:09.585 --> 00:20:12.305
<v Speaker 1>our reef reference repository to get started with

00:20:12.305 --> 00:20:13.105
<v Speaker 1>Kapitan,

00:20:13.185 --> 00:20:15.025
<v Speaker 1>which is in the community section,

00:20:15.665 --> 00:20:16.465
<v Speaker 1>the third,

00:20:17.905 --> 00:20:19.105
<v Speaker 1>right in the middle of your screen.

00:20:20.250 --> 00:20:23.049
<v Speaker 2>There you go. Yeah. Exactly. So I think,

00:20:23.770 --> 00:20:24.970
<v Speaker 1>because Kapitan,

00:20:24.970 --> 00:20:25.450
<v Speaker 1>basically,

00:20:26.570 --> 00:20:28.810
<v Speaker 1>it's a it's a tool that obviously requires

00:20:28.810 --> 00:20:32.090
<v Speaker 1>the, inventory to be set up, for you.

00:20:32.090 --> 00:20:34.365
<v Speaker 1>So we've done is we've created, like, an

00:20:34.365 --> 00:20:36.445
<v Speaker 1>ideal kind of a setup that you can

00:20:36.445 --> 00:20:37.644
<v Speaker 1>use to get started.

00:20:37.965 --> 00:20:39.725
<v Speaker 1>And I think this is probably the best

00:20:39.725 --> 00:20:42.365
<v Speaker 1>way for you to experience it literally

00:20:42.365 --> 00:20:42.845
<v Speaker 1>as not

00:20:43.485 --> 00:20:46.365
<v Speaker 1>as simple as cloning it and and running

00:20:46.365 --> 00:20:48.929
<v Speaker 1>Kapitan from there. So I think that's

00:20:49.410 --> 00:20:50.129
<v Speaker 1>something

00:20:50.370 --> 00:20:51.090
<v Speaker 1>that we can

00:20:59.970 --> 00:21:03.170
<v Speaker 0>Okay. Alright. We have the Kapitan templates.

00:21:03.784 --> 00:21:04.504
<v Speaker 1>Yeah.

00:21:05.865 --> 00:21:08.424
<v Speaker 1>So there is a we will go through

00:21:08.904 --> 00:21:11.065
<v Speaker 1>the you know, this kind of repository, but

00:21:11.065 --> 00:21:12.504
<v Speaker 1>pretty much you can see that

00:21:12.825 --> 00:21:14.745
<v Speaker 1>as soon as you have a terminal open

00:21:14.745 --> 00:21:16.585
<v Speaker 1>and you run Kapitan compile,

00:21:17.050 --> 00:21:19.130
<v Speaker 1>you will be able to, hopefully,

00:21:20.490 --> 00:21:21.049
<v Speaker 1>see

00:21:21.850 --> 00:21:24.330
<v Speaker 1>Kapitan downloading the latest image. So we're using

00:21:24.330 --> 00:21:26.090
<v Speaker 1>a Docker image to speed up kind of

00:21:26.090 --> 00:21:28.010
<v Speaker 1>the the process of getting started.

00:21:28.650 --> 00:21:31.450
<v Speaker 1>You can also install Kapitan yourself, but I

00:21:31.450 --> 00:21:32.890
<v Speaker 1>think Docker image is

00:21:33.665 --> 00:21:36.384
<v Speaker 1>is is the the approach Universal way.

00:21:36.625 --> 00:21:37.745
<v Speaker 1>Yeah. Yeah. Exactly.

00:21:37.985 --> 00:21:40.145
<v Speaker 0>Yeah. So Kapitan is available through PEP as

00:21:40.145 --> 00:21:42.384
<v Speaker 0>well, isn't it? Yep. Yeah. Yes.

00:21:43.585 --> 00:21:45.585
<v Speaker 1>And and so this process that you can

00:21:45.585 --> 00:21:48.910
<v Speaker 1>see here, these are basically a example and

00:21:48.910 --> 00:21:50.990
<v Speaker 1>templates that have been compiled for you. So

00:21:50.990 --> 00:21:53.070
<v Speaker 1>from from here, we can we can carry

00:21:53.070 --> 00:21:55.309
<v Speaker 1>on and discover how to get started with

00:21:55.309 --> 00:21:56.109
<v Speaker 1>Kapitan.

00:21:56.830 --> 00:21:58.270
<v Speaker 0>Is this you want to go through the

00:21:58.270 --> 00:21:59.630
<v Speaker 0>slow walkthrough, or should I go back to

00:21:59.630 --> 00:22:01.309
<v Speaker 0>the getting started guide? What's your preference?

00:22:03.044 --> 00:22:05.124
<v Speaker 1>I think this is basically an

00:22:05.365 --> 00:22:07.924
<v Speaker 1>explanation of this repository in general.

00:22:08.804 --> 00:22:10.725
<v Speaker 1>I don't know. Perhaps we can I I

00:22:10.725 --> 00:22:11.284
<v Speaker 1>can

00:22:13.365 --> 00:22:14.885
<v Speaker 1>guide you? So if you go back to

00:22:14.885 --> 00:22:15.844
<v Speaker 1>Kapitan

00:22:16.245 --> 00:22:17.125
<v Speaker 1>reference. Yeah.

00:22:18.150 --> 00:22:18.630
<v Speaker 1>And,

00:22:19.350 --> 00:22:21.030
<v Speaker 1>if you go to the top,

00:22:21.430 --> 00:22:23.030
<v Speaker 1>of the repository

00:22:23.510 --> 00:22:25.430
<v Speaker 1>sorry. If you go just scroll up a

00:22:25.430 --> 00:22:27.510
<v Speaker 1>little bit, and there is a, just after

00:22:27.510 --> 00:22:30.630
<v Speaker 1>Kapitan reference, there is a manifest generator documentation

00:22:31.144 --> 00:22:33.464
<v Speaker 1>That could be a a good way to

00:22:33.784 --> 00:22:35.624
<v Speaker 1>to kind of get started. Mhmm.

00:22:36.424 --> 00:22:37.705
<v Speaker 1>It's it's

00:22:37.705 --> 00:22:40.424
<v Speaker 1>kind of assuming that you already know that

00:22:40.424 --> 00:22:42.424
<v Speaker 1>you need to create a target. So I

00:22:42.424 --> 00:22:44.184
<v Speaker 1>I think the the the one thing you

00:22:44.184 --> 00:22:46.370
<v Speaker 1>will discover is that we need to work

00:22:46.370 --> 00:22:47.889
<v Speaker 1>more on on getting

00:22:48.370 --> 00:22:49.489
<v Speaker 1>Kapitan,

00:22:50.049 --> 00:22:52.289
<v Speaker 1>you know, to be to be used more

00:22:52.289 --> 00:22:52.929
<v Speaker 1>easily.

00:22:53.970 --> 00:22:56.289
<v Speaker 1>But, yeah, basically, if we go here in

00:22:56.289 --> 00:22:58.129
<v Speaker 1>the repository and you

00:22:58.289 --> 00:22:59.490
<v Speaker 1>navigate through the

00:23:00.105 --> 00:23:00.825
<v Speaker 1>targets

00:23:01.065 --> 00:23:02.424
<v Speaker 1>inventory targets

00:23:02.825 --> 00:23:03.705
<v Speaker 1>folder.

00:23:04.105 --> 00:23:05.625
<v Speaker 1>Yeah. And then you can create a new

00:23:05.625 --> 00:23:06.904
<v Speaker 1>file if you want.

00:23:07.145 --> 00:23:09.625
<v Speaker 1>So create call it, like, demo dot yaml.

00:23:09.625 --> 00:23:11.225
<v Speaker 1>So he this way, we're basically

00:23:11.785 --> 00:23:14.265
<v Speaker 1>telling Kapitan we want to create a new

00:23:15.740 --> 00:23:17.580
<v Speaker 1>project. We want to work on something new.

00:23:17.659 --> 00:23:18.539
<v Speaker 1>So if you

00:23:19.179 --> 00:23:22.539
<v Speaker 1>compile compile now, if you run the the

00:23:22.539 --> 00:23:24.940
<v Speaker 1>the compile process you run before, this time

00:23:24.940 --> 00:23:26.539
<v Speaker 1>you will have to do it quite often.

00:23:26.539 --> 00:23:27.899
<v Speaker 1>So perhaps I don't know if you want

00:23:27.899 --> 00:23:28.299
<v Speaker 1>to have a,

00:23:30.535 --> 00:23:33.335
<v Speaker 1>like, a a view right right in Visual

00:23:33.335 --> 00:23:35.095
<v Speaker 1>Studio code. I think that will be

00:23:35.895 --> 00:23:36.615
<v Speaker 1>quicker.

00:23:36.775 --> 00:23:38.855
<v Speaker 1>But the the process is always like,

00:23:39.015 --> 00:23:41.095
<v Speaker 1>you edit something, you compile, and you see

00:23:41.095 --> 00:23:44.455
<v Speaker 1>what happens, basically. So it's something minor thing.

00:23:44.455 --> 00:23:44.775
<v Speaker 2>Sorry.

00:23:46.040 --> 00:23:47.399
<v Speaker 2>There is a limitation,

00:23:47.720 --> 00:23:49.800
<v Speaker 2>the moment in inventory. Your your files need

00:23:49.800 --> 00:23:50.360
<v Speaker 2>to be

00:23:51.000 --> 00:23:53.480
<v Speaker 2>a dot YAML without a without an a.

00:23:53.480 --> 00:23:55.559
<v Speaker 2>So y m l, not y

00:23:55.880 --> 00:23:58.200
<v Speaker 1>Oh. A. Oh. Yeah. Well,

00:23:58.520 --> 00:24:00.280
<v Speaker 1>that's perfect. Yeah. Yeah.

00:24:02.865 --> 00:24:04.224
<v Speaker 0>Yeah. Go for it.

00:24:05.825 --> 00:24:06.864
<v Speaker 1>And so

00:24:07.424 --> 00:24:08.945
<v Speaker 1>you will see, hopefully,

00:24:09.345 --> 00:24:09.984
<v Speaker 1>your

00:24:10.544 --> 00:24:12.065
<v Speaker 2>Also, you have to put stuff in there.

00:24:12.065 --> 00:24:12.624
<v Speaker 2>Right?

00:24:13.424 --> 00:24:15.409
<v Speaker 1>Oh, yes. Okay. I

00:24:15.810 --> 00:24:17.250
<v Speaker 0>I just wonder what it was gonna do

00:24:17.250 --> 00:24:19.090
<v Speaker 0>with an empty YAML file. Is it just

00:24:19.090 --> 00:24:21.490
<v Speaker 0>gonna magically make it up? But I don't

00:24:21.490 --> 00:24:23.490
<v Speaker 1>know. I don't know. I'm just gonna say,

00:24:23.490 --> 00:24:25.170
<v Speaker 1>the fact that you didn't crash is already

00:24:25.170 --> 00:24:27.010
<v Speaker 1>at that time. So

00:24:27.825 --> 00:24:28.705
<v Speaker 1>So so the

00:24:29.184 --> 00:24:32.304
<v Speaker 1>the the target is is is we just

00:24:32.304 --> 00:24:33.905
<v Speaker 1>need to add a little bit of boilerplate.

00:24:33.905 --> 00:24:36.065
<v Speaker 1>So if you if you create, like, the

00:24:36.304 --> 00:24:37.825
<v Speaker 1>the top plate, if you in the the

00:24:37.825 --> 00:24:39.424
<v Speaker 1>top part, if you write classes

00:24:39.910 --> 00:24:41.990
<v Speaker 1>and you create, like, a list of classes

00:24:41.990 --> 00:24:43.669
<v Speaker 1>and the first one is common,

00:24:43.750 --> 00:24:45.670
<v Speaker 1>that's the boilerplate you need. And I think

00:24:45.670 --> 00:24:48.230
<v Speaker 1>from from then on, you can probably follow

00:24:48.230 --> 00:24:50.150
<v Speaker 1>the the rest of the documentation you have

00:24:50.150 --> 00:24:52.150
<v Speaker 1>now. So if you go back to that

00:24:53.905 --> 00:24:54.385
<v Speaker 1>document

00:24:54.705 --> 00:24:55.985
<v Speaker 1>the, you know, the the page that we

00:24:55.985 --> 00:24:58.385
<v Speaker 1>opened before with the agent yeah. This one.

00:24:58.545 --> 00:25:01.025
<v Speaker 1>So you can, I think, already start using

00:25:01.025 --> 00:25:02.785
<v Speaker 1>with with this generator?

00:25:03.265 --> 00:25:05.665
<v Speaker 1>So as I said before, the generator is,

00:25:05.665 --> 00:25:08.780
<v Speaker 1>like, something that allows you to quickly create

00:25:08.780 --> 00:25:11.260
<v Speaker 1>configuration for you. So in that case, we

00:25:11.260 --> 00:25:13.580
<v Speaker 1>will be creating a configuration for a component

00:25:13.580 --> 00:25:14.860
<v Speaker 1>called the EcoServer.

00:25:15.580 --> 00:25:18.220
<v Speaker 0>Okay. Can we then just take a moment

00:25:18.220 --> 00:25:20.460
<v Speaker 0>to maybe explain to people what a target

00:25:20.460 --> 00:25:22.540
<v Speaker 0>and a a class is in this context?

00:25:22.540 --> 00:25:22.780
<v Speaker 1>Yeah.

00:25:23.495 --> 00:25:25.255
<v Speaker 1>Yeah. So this is something I went through

00:25:25.255 --> 00:25:28.375
<v Speaker 1>in the presentation, like, briefly before. But, basically,

00:25:28.375 --> 00:25:31.575
<v Speaker 1>a target is is like your leaf file

00:25:31.575 --> 00:25:33.975
<v Speaker 1>to get to get Kapitan started. You know,

00:25:33.975 --> 00:25:36.570
<v Speaker 1>you define a target, and that will usually

00:25:36.570 --> 00:25:37.289
<v Speaker 1>be

00:25:37.450 --> 00:25:40.730
<v Speaker 1>mapping to a manifest or a number of

00:25:41.050 --> 00:25:43.690
<v Speaker 1>sorry. A namespace, a Kubernetes namespace,

00:25:43.690 --> 00:25:44.889
<v Speaker 1>or, like,

00:25:45.210 --> 00:25:47.210
<v Speaker 1>an application something you want to work on.

00:25:47.635 --> 00:25:49.955
<v Speaker 1>It can be if you're working with Kubernetes,

00:25:50.115 --> 00:25:52.195
<v Speaker 1>most likely will be all the application that

00:25:52.195 --> 00:25:55.154
<v Speaker 1>you want to stuff into a namespace.

00:25:55.554 --> 00:25:57.554
<v Speaker 1>If you're working with Terraform, it could be,

00:25:57.554 --> 00:25:59.075
<v Speaker 1>like, a project that you want to create.

00:25:59.700 --> 00:26:02.500
<v Speaker 0>So without app or correlate like, when I

00:26:02.500 --> 00:26:03.940
<v Speaker 0>think of a target, would that be, like,

00:26:03.940 --> 00:26:05.700
<v Speaker 0>my production environment? Would it be my staging

00:26:05.700 --> 00:26:08.100
<v Speaker 0>environment? Exactly. Exactly. It's

00:26:08.100 --> 00:26:10.019
<v Speaker 2>up to you, really. It's really up to

00:26:10.019 --> 00:26:12.019
<v Speaker 2>to how how you or your team work.

00:26:12.995 --> 00:26:15.235
<v Speaker 2>Some people share environments, some people share clusters,

00:26:15.235 --> 00:26:17.715
<v Speaker 2>some people share namespaces. So Yeah. It's really

00:26:17.715 --> 00:26:19.315
<v Speaker 2>your your deployable

00:26:19.315 --> 00:26:21.715
<v Speaker 2>group of stuff in a way. That's how

00:26:21.715 --> 00:26:24.115
<v Speaker 2>you should think about it. So here, we'll

00:26:24.115 --> 00:26:26.115
<v Speaker 2>call it call it namespace, but, essentially, it's

00:26:26.115 --> 00:26:27.315
<v Speaker 2>a target. That's what it is.

00:26:28.730 --> 00:26:31.370
<v Speaker 1>Yeah. Some people ask us that question. And

00:26:31.370 --> 00:26:32.330
<v Speaker 1>the thing is that

00:26:32.809 --> 00:26:34.889
<v Speaker 1>the inventory in Kapitania is so

00:26:35.769 --> 00:26:37.769
<v Speaker 1>generic, and you can reuse in whichever way

00:26:37.769 --> 00:26:40.169
<v Speaker 1>you want. Ultimately, it depends on once you

00:26:40.169 --> 00:26:41.690
<v Speaker 1>get the feel for it, you will understand

00:26:41.690 --> 00:26:45.315
<v Speaker 1>how to organize it. Sometimes it's a namespace.

00:26:45.395 --> 00:26:47.395
<v Speaker 1>Some other cases, perhaps you want to define

00:26:47.395 --> 00:26:49.235
<v Speaker 1>an application that you want to deploy to

00:26:49.235 --> 00:26:51.635
<v Speaker 1>many clusters at once. So, you know, how

00:26:51.635 --> 00:26:52.755
<v Speaker 1>how you use it,

00:26:53.315 --> 00:26:54.515
<v Speaker 1>it's up to you. Our

00:26:55.070 --> 00:26:57.309
<v Speaker 1>typical way to use it is to define

00:26:57.309 --> 00:26:59.470
<v Speaker 1>all the applications you would want to install

00:26:59.470 --> 00:27:02.190
<v Speaker 1>on a a Kubernetes namespace, which I think

00:27:02.190 --> 00:27:04.669
<v Speaker 1>is, in this case, we will be defining

00:27:05.070 --> 00:27:07.470
<v Speaker 1>a target called demo, and we will write

00:27:07.470 --> 00:27:09.230
<v Speaker 1>all the applications that we want to create

00:27:09.230 --> 00:27:09.710
<v Speaker 1>within it.

00:27:10.805 --> 00:27:11.845
<v Speaker 0>Okay. And

00:27:13.765 --> 00:27:15.684
<v Speaker 1>the classes is

00:27:17.045 --> 00:27:19.605
<v Speaker 1>still an inventory file while the target is

00:27:19.605 --> 00:27:21.764
<v Speaker 1>the first one Kapitan goes to look for.

00:27:21.925 --> 00:27:23.205
<v Speaker 1>Classes are

00:27:24.510 --> 00:27:26.910
<v Speaker 1>other YAML file that looks exactly the same,

00:27:27.390 --> 00:27:28.750
<v Speaker 1>but they they group

00:27:29.070 --> 00:27:30.190
<v Speaker 1>other kind of

00:27:30.590 --> 00:27:31.710
<v Speaker 1>configurations.

00:27:32.190 --> 00:27:34.990
<v Speaker 1>And so they're they're used for

00:27:35.150 --> 00:27:35.950
<v Speaker 1>sharing

00:27:35.950 --> 00:27:37.870
<v Speaker 1>that kind of information with the with the

00:27:37.870 --> 00:27:40.405
<v Speaker 1>target. So as you add the class, the

00:27:40.405 --> 00:27:42.485
<v Speaker 1>class will bring in all these other kind

00:27:42.485 --> 00:27:42.965
<v Speaker 1>of

00:27:44.165 --> 00:27:46.725
<v Speaker 1>values from from the files they are defined.

00:27:46.805 --> 00:27:49.685
<v Speaker 1>And ultimately, we've created, a merge to representation

00:27:49.685 --> 00:27:51.125
<v Speaker 1>of your inventory,

00:27:51.285 --> 00:27:52.245
<v Speaker 1>which will be

00:27:52.725 --> 00:27:55.045
<v Speaker 1>composed of all the classes you have imported

00:27:55.170 --> 00:27:58.370
<v Speaker 1>plus the definition you have at target level.

00:27:58.930 --> 00:28:00.690
<v Speaker 2>So one one thing that we can also

00:28:00.690 --> 00:28:02.850
<v Speaker 2>show in a minute is,

00:28:03.170 --> 00:28:05.250
<v Speaker 2>you know, this might be a bit hard

00:28:05.250 --> 00:28:06.210
<v Speaker 2>to picture

00:28:06.290 --> 00:28:09.115
<v Speaker 2>mentally how it ends up, you know, merging

00:28:09.115 --> 00:28:11.355
<v Speaker 2>everything. So you can run the inventory on

00:28:11.355 --> 00:28:13.434
<v Speaker 2>the command line. You will see it's rendered.

00:28:14.235 --> 00:28:15.995
<v Speaker 2>So you don't really have to try and

00:28:15.995 --> 00:28:17.755
<v Speaker 2>understand what will happen. You can actually see

00:28:17.755 --> 00:28:20.235
<v Speaker 2>it before you create anything.

00:28:22.810 --> 00:28:25.210
<v Speaker 1>Yeah. So now if you run Kapitan

00:28:25.370 --> 00:28:26.170
<v Speaker 1>inventory

00:28:26.410 --> 00:28:27.370
<v Speaker 1>inventory

00:28:27.770 --> 00:28:30.810
<v Speaker 1>hyphen t Oh, for that.

00:28:31.610 --> 00:28:32.250
<v Speaker 1>Yeah.

00:28:32.970 --> 00:28:36.090
<v Speaker 1>Space hyphen t and then demo, which is

00:28:36.090 --> 00:28:36.730
<v Speaker 1>your target,

00:28:37.905 --> 00:28:39.105
<v Speaker 1>you will basically

00:28:39.265 --> 00:28:40.065
<v Speaker 1>see

00:28:40.145 --> 00:28:40.785
<v Speaker 1>the

00:28:40.945 --> 00:28:44.465
<v Speaker 1>inventory that so far has been created for

00:28:44.465 --> 00:28:46.545
<v Speaker 1>the demo target you're working on. And this

00:28:46.545 --> 00:28:49.025
<v Speaker 1>is basically brought in by the common

00:28:49.585 --> 00:28:50.545
<v Speaker 1>boilerplate

00:28:50.430 --> 00:28:52.670
<v Speaker 1>kind of a class, and I use I

00:28:52.750 --> 00:28:54.430
<v Speaker 1>use that word. But, basically, it's like a

00:28:54.430 --> 00:28:56.270
<v Speaker 1>predefined set of configuration

00:28:56.350 --> 00:28:58.430
<v Speaker 1>allows you to get started with it.

00:28:59.630 --> 00:29:02.030
<v Speaker 0>Okay. From from that Try and summarize that

00:29:02.030 --> 00:29:03.865
<v Speaker 0>a little bit. Right? So I think the

00:29:03.865 --> 00:29:05.785
<v Speaker 0>targets were well explained. You know, they're they're

00:29:05.785 --> 00:29:07.865
<v Speaker 0>groups of things or targets,

00:29:07.865 --> 00:29:09.385
<v Speaker 0>like namespaces

00:29:09.385 --> 00:29:11.705
<v Speaker 0>or environments that you wish to deploy to.

00:29:12.265 --> 00:29:14.265
<v Speaker 0>Classes can be as small or as large

00:29:14.265 --> 00:29:16.265
<v Speaker 0>as you want, and they can be composed

00:29:16.020 --> 00:29:17.700
<v Speaker 0>together. So you can have loads and loads

00:29:17.700 --> 00:29:19.540
<v Speaker 0>of small classes that can be grouped together

00:29:19.540 --> 00:29:21.780
<v Speaker 0>by some sort of aggregator class allowing you

00:29:21.780 --> 00:29:22.900
<v Speaker 0>to, you know,

00:29:23.380 --> 00:29:25.700
<v Speaker 0>really get down to the nitty gritty of

00:29:25.700 --> 00:29:28.580
<v Speaker 0>small tiny classes, but then provide a single

00:29:28.580 --> 00:29:30.905
<v Speaker 0>class to deploy to your target. So Yes.

00:29:30.905 --> 00:29:33.625
<v Speaker 0>A really, really flexible and composable solution, which

00:29:33.625 --> 00:29:35.145
<v Speaker 0>I think is Yes. Yep. Is key for

00:29:35.145 --> 00:29:36.104
<v Speaker 0>people to understand.

00:29:36.505 --> 00:29:38.745
<v Speaker 1>Yeah. I I I think the key aspect

00:29:38.745 --> 00:29:40.585
<v Speaker 1>to which I I like to

00:29:41.304 --> 00:29:43.304
<v Speaker 1>to to talk about is the fact that

00:29:43.919 --> 00:29:46.159
<v Speaker 1>the class can you can name class with

00:29:46.159 --> 00:29:48.320
<v Speaker 1>the in whichever name you want, which usually

00:29:48.320 --> 00:29:51.039
<v Speaker 1>is it's helpful to map them in in

00:29:51.039 --> 00:29:52.079
<v Speaker 1>terms of business

00:29:52.480 --> 00:29:54.320
<v Speaker 1>concept or at least things that are related

00:29:54.320 --> 00:29:56.235
<v Speaker 1>to your activity. So,

00:29:56.635 --> 00:29:59.115
<v Speaker 1>if, say that you are changing a value

00:29:59.115 --> 00:29:59.755
<v Speaker 1>for

00:29:59.915 --> 00:30:02.475
<v Speaker 1>a, Java server that you want to have

00:30:02.475 --> 00:30:03.434
<v Speaker 1>no memory,

00:30:03.675 --> 00:30:06.554
<v Speaker 1>rather than just, write that kind of a

00:30:06.795 --> 00:30:08.075
<v Speaker 1>a value

00:30:08.075 --> 00:30:10.549
<v Speaker 1>in a in a values file somewhere, you

00:30:10.549 --> 00:30:13.190
<v Speaker 1>can map it as a a profiles dot

00:30:13.190 --> 00:30:15.669
<v Speaker 1>production or profiles dot high memory.

00:30:15.910 --> 00:30:18.710
<v Speaker 1>So it allows you to basically group together

00:30:19.030 --> 00:30:21.910
<v Speaker 1>values that would normally not have much meaning,

00:30:21.910 --> 00:30:23.830
<v Speaker 1>but you can you can attach some sort

00:30:23.830 --> 00:30:24.309
<v Speaker 1>of

00:30:25.395 --> 00:30:27.395
<v Speaker 1>meaning by just naming the class in in

00:30:27.395 --> 00:30:29.235
<v Speaker 1>in a way that makes sense to you.

00:30:30.675 --> 00:30:33.795
<v Speaker 0>Yeah. Although, at Java, JVM need more memory.

00:30:33.795 --> 00:30:35.235
<v Speaker 0>It's completely unheard of. So that was a

00:30:35.235 --> 00:30:36.355
<v Speaker 0>terrible example.

00:30:36.675 --> 00:30:37.795
<v Speaker 2>Terrible example.

00:30:38.115 --> 00:30:38.755
<v Speaker 1>Sorry.

00:30:39.790 --> 00:30:40.429
<v Speaker 1>Alright.

00:30:41.870 --> 00:30:45.550
<v Speaker 0>Okay. So we have our wrong folder. We

00:30:45.550 --> 00:30:47.470
<v Speaker 0>now have our demo target, which is pulling

00:30:47.470 --> 00:30:49.150
<v Speaker 0>in the common class. We can take a

00:30:49.150 --> 00:30:50.750
<v Speaker 0>look at the common class here. We can

00:30:50.750 --> 00:30:53.005
<v Speaker 0>see that it's just pulling in another class,

00:30:53.005 --> 00:30:54.845
<v Speaker 0>Kapitan common, and we've got a few parameters

00:30:54.845 --> 00:30:56.605
<v Speaker 0>that can be provided.

00:30:57.325 --> 00:30:57.804
<v Speaker 1>Yes.

00:30:58.125 --> 00:30:58.845
<v Speaker 0>Okay.

00:30:59.325 --> 00:31:01.325
<v Speaker 0>What you wanna go back to the manifest

00:31:01.325 --> 00:31:04.125
<v Speaker 0>generation step. Right? Yes. So if you now

00:31:04.125 --> 00:31:05.884
<v Speaker 1>cut and paste this first part,

00:31:06.285 --> 00:31:07.164
<v Speaker 1>so the

00:31:08.220 --> 00:31:09.580
<v Speaker 1>yep. That one.

00:31:12.059 --> 00:31:14.779
<v Speaker 1>And you will add it to the target.

00:31:16.059 --> 00:31:16.700
<v Speaker 1>Yeah.

00:31:17.179 --> 00:31:17.899
<v Speaker 1>So here

00:31:18.460 --> 00:31:20.379
<v Speaker 1>is where you start basically

00:31:20.620 --> 00:31:23.740
<v Speaker 1>adding your own custom setup to the target.

00:31:23.775 --> 00:31:25.775
<v Speaker 1>So you are add you're defining something up

00:31:25.775 --> 00:31:27.135
<v Speaker 1>in the parameters.

00:31:27.615 --> 00:31:29.775
<v Speaker 1>So classes and parameters, you will see them

00:31:29.775 --> 00:31:32.815
<v Speaker 1>replicating all the other, classes as well.

00:31:33.935 --> 00:31:35.535
<v Speaker 1>And here, what we are doing is we

00:31:35.535 --> 00:31:38.010
<v Speaker 1>are defining a special kind of a through

00:31:38.010 --> 00:31:39.850
<v Speaker 1>a special syntax. We are saying,

00:31:40.250 --> 00:31:42.330
<v Speaker 1>I want to basically create a new component.

00:31:42.330 --> 00:31:44.650
<v Speaker 1>I want to call it echo server, and

00:31:44.650 --> 00:31:46.650
<v Speaker 1>I want an to to have an image

00:31:46.650 --> 00:31:47.290
<v Speaker 1>called

00:31:47.450 --> 00:31:49.210
<v Speaker 1>like that. But this is a a beautiful

00:31:49.210 --> 00:31:51.284
<v Speaker 1>project I always use very easy to get

00:31:51.284 --> 00:31:53.684
<v Speaker 1>started like a a a web server, and

00:31:53.684 --> 00:31:55.365
<v Speaker 1>it's very easy to to to play with

00:31:55.365 --> 00:31:58.005
<v Speaker 1>it, basically. If you compile right now, you

00:31:58.005 --> 00:31:59.605
<v Speaker 1>will see a couple of things happening, and

00:31:59.605 --> 00:32:01.284
<v Speaker 1>we can go through that as they happen.

00:32:06.659 --> 00:32:09.059
<v Speaker 1>So you obviously, you see your demo

00:32:09.059 --> 00:32:11.539
<v Speaker 1>being compiled up there. So next time, if

00:32:11.539 --> 00:32:13.700
<v Speaker 1>you compile with hyphen t demo, it will

00:32:13.700 --> 00:32:15.620
<v Speaker 1>speed up, and we only compile that specific

00:32:15.620 --> 00:32:17.380
<v Speaker 1>kind of environment. I think that's

00:32:18.914 --> 00:32:20.674
<v Speaker 1>if it takes time here, it's for Docker.

00:32:20.674 --> 00:32:21.554
<v Speaker 1>It's not us.

00:32:21.875 --> 00:32:22.754
<v Speaker 1>So

00:32:22.755 --> 00:32:24.275
<v Speaker 1>if it takes a little bit longer, a

00:32:24.275 --> 00:32:25.955
<v Speaker 1>couple of seconds longer, it's just for for

00:32:25.955 --> 00:32:27.235
<v Speaker 1>the for the fact that we're using a

00:32:27.235 --> 00:32:28.595
<v Speaker 1>Docker image.

00:32:29.395 --> 00:32:30.434
<v Speaker 1>K. Now

00:32:30.755 --> 00:32:31.715
<v Speaker 1>when

00:32:31.715 --> 00:32:32.674
<v Speaker 1>you compile

00:32:33.190 --> 00:32:33.590
<v Speaker 1>target,

00:32:34.310 --> 00:32:37.350
<v Speaker 1>the output gets producing the compiled folder. So

00:32:37.350 --> 00:32:38.950
<v Speaker 1>if you do get this now

00:32:39.350 --> 00:32:41.510
<v Speaker 1>or if you go and look at it

00:32:41.510 --> 00:32:43.910
<v Speaker 1>through oh, sorry. Get get status so to

00:32:43.910 --> 00:32:45.110
<v Speaker 1>to have a look at the files.

00:32:46.445 --> 00:32:47.645
<v Speaker 1>You will see that

00:32:48.765 --> 00:32:51.565
<v Speaker 1>several files have already been compiled for you.

00:32:52.605 --> 00:32:54.525
<v Speaker 1>And the and the the one for your

00:32:54.525 --> 00:32:57.565
<v Speaker 1>target will be under the compiled demo.

00:32:57.725 --> 00:32:58.365
<v Speaker 1>So

00:32:58.560 --> 00:33:00.160
<v Speaker 1>the manifest folder

00:33:00.240 --> 00:33:03.280
<v Speaker 1>is the one where we would be interacting

00:33:03.280 --> 00:33:06.080
<v Speaker 1>with the most because that's where the generator

00:33:06.480 --> 00:33:09.440
<v Speaker 1>places the the files that you are that

00:33:09.440 --> 00:33:11.915
<v Speaker 1>you are creating. So if you, you know,

00:33:11.915 --> 00:33:14.395
<v Speaker 1>in the editor, open that folder, you will

00:33:14.395 --> 00:33:17.515
<v Speaker 1>see already that there is already some magic

00:33:17.515 --> 00:33:19.754
<v Speaker 1>happening there, and we can go through

00:33:20.795 --> 00:33:23.195
<v Speaker 1>to basically explain a little bit

00:33:23.560 --> 00:33:25.159
<v Speaker 1>more what what's happening.

00:33:25.560 --> 00:33:28.520
<v Speaker 1>And and yeah. So with the the configuration

00:33:28.520 --> 00:33:31.240
<v Speaker 1>you've defined allows us to say

00:33:31.480 --> 00:33:33.559
<v Speaker 1>to to to generate the default

00:33:33.720 --> 00:33:36.040
<v Speaker 1>object that we use most commonly, which is

00:33:36.040 --> 00:33:36.680
<v Speaker 1>the deployment.

00:33:37.105 --> 00:33:39.505
<v Speaker 1>So it's just, basically getting rid of all

00:33:39.505 --> 00:33:40.624
<v Speaker 1>the boilerplate

00:33:40.784 --> 00:33:43.584
<v Speaker 1>and, adding all these kind of a a

00:33:43.664 --> 00:33:46.784
<v Speaker 1>kind of a sane initial setup for your,

00:33:47.345 --> 00:33:47.984
<v Speaker 1>generator

00:33:48.225 --> 00:33:50.144
<v Speaker 1>for your for your deployment

00:33:50.970 --> 00:33:52.570
<v Speaker 1>in a way that, you know, you have

00:33:52.570 --> 00:33:54.570
<v Speaker 1>something already working out there.

00:33:56.410 --> 00:33:58.970
<v Speaker 0>Okay. Can we maybe try and break down

00:33:58.970 --> 00:34:00.409
<v Speaker 0>how we got from

00:34:01.610 --> 00:34:02.330
<v Speaker 0>from

00:34:02.410 --> 00:34:03.129
<v Speaker 0>this

00:34:03.285 --> 00:34:05.685
<v Speaker 0>Yeah. To a deployment? How does that generate

00:34:05.685 --> 00:34:07.845
<v Speaker 0>or work and interact with what's going on?

00:34:08.085 --> 00:34:11.364
<v Speaker 1>So so the the generator is is essentially

00:34:11.364 --> 00:34:13.525
<v Speaker 1>a a plug in that we have within

00:34:14.005 --> 00:34:17.739
<v Speaker 1>within this repository we have installed here that

00:34:17.739 --> 00:34:19.100
<v Speaker 1>basically activates

00:34:19.100 --> 00:34:20.940
<v Speaker 1>on whenever you define

00:34:21.420 --> 00:34:23.580
<v Speaker 1>this the structure you have here, and then

00:34:23.580 --> 00:34:25.500
<v Speaker 1>you can expand it to to add more

00:34:25.500 --> 00:34:28.140
<v Speaker 1>value, so to add more components. So every

00:34:28.140 --> 00:34:29.820
<v Speaker 1>time you find something other components,

00:34:30.225 --> 00:34:32.705
<v Speaker 1>it will basically take that object and try

00:34:32.705 --> 00:34:35.105
<v Speaker 1>to do something with it. So, you know,

00:34:35.105 --> 00:34:37.105
<v Speaker 1>the I I hate I hope I'm not

00:34:37.105 --> 00:34:39.585
<v Speaker 1>getting I'm gonna get, like, a a a

00:34:43.985 --> 00:34:45.010
<v Speaker 1>a a CRD.

00:34:45.010 --> 00:34:47.250
<v Speaker 1>You define your own CRD of how you

00:34:47.250 --> 00:34:48.770
<v Speaker 1>want the deployment to look like. I've used

00:34:48.770 --> 00:34:51.329
<v Speaker 1>a very bad example here. But, you know,

00:34:51.329 --> 00:34:54.210
<v Speaker 1>it's like you are defining, like, something

00:34:54.210 --> 00:34:56.609
<v Speaker 1>that you wanted to turn into a more

00:34:56.609 --> 00:34:59.065
<v Speaker 1>complex kind of a a a representation. Presentation.

00:34:59.065 --> 00:35:01.065
<v Speaker 1>So in this case, we want to create

00:35:01.065 --> 00:35:02.825
<v Speaker 1>a component. We want to call it echo

00:35:02.825 --> 00:35:05.065
<v Speaker 1>server, and we want to have that image.

00:35:05.225 --> 00:35:07.225
<v Speaker 1>And we can see how we can build

00:35:07.225 --> 00:35:09.065
<v Speaker 1>on on that quite quickly.

00:35:09.465 --> 00:35:10.825
<v Speaker 2>I think one one more thing we can

00:35:10.825 --> 00:35:13.180
<v Speaker 2>say sorry, David. One one more thing we

00:35:13.180 --> 00:35:14.380
<v Speaker 2>say is that every

00:35:14.860 --> 00:35:15.740
<v Speaker 2>inventory

00:35:16.220 --> 00:35:18.140
<v Speaker 2>has the classes and parameters.

00:35:18.300 --> 00:35:20.620
<v Speaker 2>So every every file has the cam classes

00:35:20.620 --> 00:35:21.900
<v Speaker 2>and parameters keys.

00:35:22.620 --> 00:35:23.900
<v Speaker 2>The parameters essentially

00:35:26.375 --> 00:35:28.135
<v Speaker 2>feed the input parameters

00:35:28.135 --> 00:35:30.535
<v Speaker 2>to a template. And in this case, the

00:35:30.535 --> 00:35:31.255
<v Speaker 2>template

00:35:31.494 --> 00:35:33.494
<v Speaker 2>is what Ali said as the you know,

00:35:33.494 --> 00:35:35.655
<v Speaker 2>it's the what we've brought in

00:35:36.375 --> 00:35:36.615
<v Speaker 2>by

00:35:38.090 --> 00:35:39.850
<v Speaker 2>cloning the Kapitan reference,

00:35:40.090 --> 00:35:42.490
<v Speaker 2>Kapitan templates example. Right? So we already have

00:35:42.490 --> 00:35:44.570
<v Speaker 2>a a a baked in template for you

00:35:44.570 --> 00:35:45.290
<v Speaker 2>to use.

00:35:46.490 --> 00:35:47.930
<v Speaker 2>And that another way you could use this,

00:35:47.930 --> 00:35:49.290
<v Speaker 2>you can actually write your own templates, but

00:35:49.290 --> 00:35:51.130
<v Speaker 2>for the demo's purpose, we have a baked

00:35:51.130 --> 00:35:53.965
<v Speaker 2>in template for you. So that's why there's

00:35:53.965 --> 00:35:55.725
<v Speaker 2>a lot of magic happening. So what we've

00:35:55.725 --> 00:35:57.725
<v Speaker 2>just done when we've done compile was

00:35:58.045 --> 00:36:00.445
<v Speaker 2>we have now created a new directory compiled,

00:36:00.685 --> 00:36:02.285
<v Speaker 2>and we've added a new target, which is

00:36:02.285 --> 00:36:03.405
<v Speaker 2>a demo target,

00:36:03.885 --> 00:36:06.140
<v Speaker 2>with all the files that it generates for

00:36:06.140 --> 00:36:08.620
<v Speaker 2>you. And in this case, it generates,

00:36:08.940 --> 00:36:11.660
<v Speaker 2>a bunch of Kubernetes manifest files

00:36:11.900 --> 00:36:14.700
<v Speaker 2>based on this input from this target.

00:36:15.900 --> 00:36:17.820
<v Speaker 0>Okay. Now would it be fair to say

00:36:17.820 --> 00:36:20.735
<v Speaker 0>in my naive assumption here that this components

00:36:20.735 --> 00:36:22.495
<v Speaker 0>and echo server keys

00:36:22.655 --> 00:36:25.215
<v Speaker 0>correlate to this file, that Ginger template file

00:36:25.215 --> 00:36:26.335
<v Speaker 0>that we have over here?

00:36:27.055 --> 00:36:29.455
<v Speaker 1>That's a coincidence for now. We we will

00:36:29.455 --> 00:36:31.615
<v Speaker 1>use it. We will use it. It has

00:36:31.615 --> 00:36:33.480
<v Speaker 1>nothing to do with that. So this is

00:36:33.480 --> 00:36:35.080
<v Speaker 1>the the bit that is difficult to get.

00:36:35.080 --> 00:36:36.600
<v Speaker 1>It's like, with Helm,

00:36:37.240 --> 00:36:39.240
<v Speaker 1>just to give an example, with Helm, you

00:36:39.240 --> 00:36:41.000
<v Speaker 1>have a value files, and then you have

00:36:41.000 --> 00:36:43.880
<v Speaker 1>a a templates that are made of goal

00:36:43.880 --> 00:36:46.280
<v Speaker 1>line templates, basically. Right? The text templates.

00:36:46.725 --> 00:36:48.325
<v Speaker 1>So you see that kind of a you're

00:36:48.325 --> 00:36:50.245
<v Speaker 1>now what you are doing is you are

00:36:50.245 --> 00:36:52.565
<v Speaker 1>looking around and you say, Where are where

00:36:52.565 --> 00:36:55.365
<v Speaker 1>is where is the the the magician hat?

00:36:55.365 --> 00:36:57.205
<v Speaker 1>Where where are the templates are coming from?

00:36:57.205 --> 00:37:00.645
<v Speaker 1>Right? What we have effectively is what we

00:37:00.645 --> 00:37:01.839
<v Speaker 1>called generator,

00:37:01.839 --> 00:37:03.520
<v Speaker 1>which, you were right to to go on

00:37:03.520 --> 00:37:04.960
<v Speaker 1>the components.

00:37:05.200 --> 00:37:06.960
<v Speaker 1>I think if you go to components,

00:37:06.960 --> 00:37:07.920
<v Speaker 1>generators, Kubernetes.

00:37:08.720 --> 00:37:10.800
<v Speaker 1>That's it. Don't look into it. Don't open.

00:37:12.160 --> 00:37:13.760
<v Speaker 1>No. I mean, it's just

00:37:14.405 --> 00:37:16.165
<v Speaker 1>It's just Python

00:37:16.165 --> 00:37:17.605
<v Speaker 1>Python

00:37:17.605 --> 00:37:18.965
<v Speaker 1>code that basically

00:37:19.205 --> 00:37:20.085
<v Speaker 1>using

00:37:20.085 --> 00:37:22.645
<v Speaker 1>this software no. I'm kidding. You can open

00:37:22.645 --> 00:37:23.445
<v Speaker 1>if you want, but it just

00:37:24.165 --> 00:37:25.605
<v Speaker 1>it will it will look nice.

00:37:26.005 --> 00:37:27.045
<v Speaker 1>It's basically

00:37:27.845 --> 00:37:29.320
<v Speaker 1>Cadet, which is

00:37:29.800 --> 00:37:31.640
<v Speaker 1>kind of a our own kind of language

00:37:31.640 --> 00:37:32.520
<v Speaker 1>that that

00:37:32.760 --> 00:37:33.560
<v Speaker 1>Ricardo

00:37:33.560 --> 00:37:37.880
<v Speaker 1>has written that simplifies the generation of manifests

00:37:37.880 --> 00:37:40.280
<v Speaker 1>or files or templates in that way. And

00:37:40.280 --> 00:37:41.160
<v Speaker 1>so

00:37:41.335 --> 00:37:43.575
<v Speaker 1>that kind of generator has been created to

00:37:43.575 --> 00:37:46.535
<v Speaker 1>react to the configuration that you define. So

00:37:46.535 --> 00:37:49.335
<v Speaker 1>if you write components echo server image, it

00:37:49.335 --> 00:37:51.415
<v Speaker 1>will create a deployment with that image.

00:37:51.815 --> 00:37:53.895
<v Speaker 0>Okay. Can I test the hypothesis then? What

00:37:53.895 --> 00:37:54.695
<v Speaker 0>if I Yes.

00:37:55.869 --> 00:37:56.590
<v Speaker 0>Index

00:37:57.070 --> 00:37:57.950
<v Speaker 0>image,

00:37:58.030 --> 00:37:58.830
<v Speaker 0>NGINX

00:37:58.830 --> 00:37:59.790
<v Speaker 0>latest.

00:38:00.190 --> 00:38:01.470
<v Speaker 0>And if I what if I just start

00:38:01.470 --> 00:38:03.150
<v Speaker 0>going a little bit crazy here?

00:38:03.470 --> 00:38:04.910
<v Speaker 1>Okay. You you you need to get the

00:38:04.910 --> 00:38:07.470
<v Speaker 1>right setup, but that's the general idea is

00:38:07.470 --> 00:38:10.830
<v Speaker 1>correct. You're almost you're close there. So

00:38:11.275 --> 00:38:12.315
<v Speaker 1>NGINX,

00:38:12.315 --> 00:38:14.395
<v Speaker 1>perfectly fine. Image NGINX,

00:38:14.395 --> 00:38:17.035
<v Speaker 1>perfectly fine. Ports, rather than making it a

00:38:17.035 --> 00:38:19.435
<v Speaker 1>list, just add the h t t p

00:38:19.435 --> 00:38:21.435
<v Speaker 1>under that. So, like, create another key on

00:38:21.435 --> 00:38:22.235
<v Speaker 1>the ports,

00:38:22.395 --> 00:38:25.370
<v Speaker 1>h t p, and then add the container

00:38:25.370 --> 00:38:28.010
<v Speaker 1>port but with the yeah. Okay. Just

00:38:28.730 --> 00:38:29.210
<v Speaker 1>okay.

00:38:30.010 --> 00:38:32.330
<v Speaker 1>And then container underscore port

00:38:32.730 --> 00:38:34.010
<v Speaker 1>because that's how

00:38:34.890 --> 00:38:35.690
<v Speaker 1>port a. And

00:38:36.655 --> 00:38:39.215
<v Speaker 1>compile away compile away and please make it

00:38:39.215 --> 00:38:40.975
<v Speaker 1>crash to to embarrass me and

00:38:41.775 --> 00:38:43.775
<v Speaker 1>everybody else. Go for it, and let's see

00:38:43.775 --> 00:38:44.735
<v Speaker 1>let's see what happens.

00:38:49.150 --> 00:38:51.150
<v Speaker 1>Pace on crash. Pace on crash. There we

00:38:51.390 --> 00:38:51.950
<v Speaker 2>crash.

00:38:52.190 --> 00:38:54.750
<v Speaker 1>So Anything else? So now so

00:38:54.750 --> 00:38:56.670
<v Speaker 1>what do you expect what do you expect

00:38:56.670 --> 00:38:57.470
<v Speaker 1>to happen?

00:38:58.110 --> 00:38:59.870
<v Speaker 0>I have expect to see an engine x

00:38:59.870 --> 00:39:02.030
<v Speaker 0>deployment with this image and the container port

00:39:02.030 --> 00:39:04.510
<v Speaker 0>configured with a name and exposing port 80.

00:39:04.855 --> 00:39:07.175
<v Speaker 0>Alright. Exactly. You got it there. Yeah. There

00:39:07.175 --> 00:39:07.815
<v Speaker 2>you go.

00:39:08.215 --> 00:39:10.215
<v Speaker 0>Alright. Let's see. So Okay.

00:39:10.615 --> 00:39:13.095
<v Speaker 0>Nice. So now now now you're wondering how

00:39:13.095 --> 00:39:14.695
<v Speaker 1>far we can go with this. Right?

00:39:16.775 --> 00:39:18.695
<v Speaker 0>Yeah. Okay. I mean, maybe you could help

00:39:18.695 --> 00:39:19.975
<v Speaker 0>me understand why,

00:39:20.135 --> 00:39:21.569
<v Speaker 0>you know, because this is starting to look

00:39:21.569 --> 00:39:23.410
<v Speaker 0>like a pod spec. I know it's not

00:39:23.410 --> 00:39:25.809
<v Speaker 0>a pod spec, but this set is probably

00:39:25.809 --> 00:39:28.450
<v Speaker 0>gonna be unfamiliar to people coming from Kubernetes.

00:39:28.450 --> 00:39:29.010
<v Speaker 0>Mhmm.

00:39:30.210 --> 00:39:31.970
<v Speaker 1>So how do how do I learn how

00:39:31.970 --> 00:39:33.970
<v Speaker 0>this generator works then? How how do I

00:39:33.970 --> 00:39:35.730
<v Speaker 0>know what other keys are available to me?

00:39:36.315 --> 00:39:37.835
<v Speaker 1>So if you if you go and look

00:39:37.835 --> 00:39:40.395
<v Speaker 1>at the page that you skipped through to

00:39:40.395 --> 00:39:40.795
<v Speaker 0>to the

00:39:42.234 --> 00:39:44.555
<v Speaker 0>because you you you you are so excited

00:39:44.555 --> 00:39:46.155
<v Speaker 1>to to work on this. You you can

00:39:46.155 --> 00:39:48.234
<v Speaker 1>basically understand a little bit more about how

00:39:48.234 --> 00:39:50.060
<v Speaker 1>it works. And I think the easiest way

00:39:50.060 --> 00:39:51.660
<v Speaker 1>is to go through the examples that we

00:39:51.660 --> 00:39:53.500
<v Speaker 1>have and we see what we have available.

00:39:54.620 --> 00:39:55.180
<v Speaker 1>So

00:39:55.660 --> 00:39:57.500
<v Speaker 1>you're right. Obviously,

00:39:57.500 --> 00:39:59.900
<v Speaker 1>we've this is a Kubernetes generator.

00:39:59.900 --> 00:40:00.460
<v Speaker 1>So

00:40:01.020 --> 00:40:02.940
<v Speaker 1>it looks a little bit like a a

00:40:02.940 --> 00:40:03.260
<v Speaker 1>pod,

00:40:04.455 --> 00:40:06.535
<v Speaker 1>but there is a bit more. So some

00:40:06.535 --> 00:40:08.775
<v Speaker 1>of those commands apply to the pod, but

00:40:08.775 --> 00:40:10.615
<v Speaker 1>some some of those kind of definition

00:40:11.655 --> 00:40:14.215
<v Speaker 1>apply to the pod, some other apply to

00:40:15.015 --> 00:40:17.815
<v Speaker 1>configuration file config files or secrets.

00:40:17.895 --> 00:40:19.175
<v Speaker 1>I I think

00:40:19.680 --> 00:40:21.680
<v Speaker 1>as we go through this, you will you

00:40:21.680 --> 00:40:23.599
<v Speaker 1>will understand all the other capabilities. So if

00:40:23.599 --> 00:40:26.000
<v Speaker 1>you skip this two kind of main

00:40:27.280 --> 00:40:28.640
<v Speaker 1>section, global

00:40:28.640 --> 00:40:29.599
<v Speaker 1>general

00:40:29.599 --> 00:40:30.320
<v Speaker 1>setup,

00:40:30.640 --> 00:40:33.520
<v Speaker 1>and and you go to ports and services.

00:40:33.839 --> 00:40:35.785
<v Speaker 1>So here should explain exactly what you were

00:40:35.785 --> 00:40:38.185
<v Speaker 1>working on. So you've created, like, a port

00:40:38.185 --> 00:40:39.865
<v Speaker 1>setup. So you define

00:40:40.025 --> 00:40:41.865
<v Speaker 1>a port with a with a name, so

00:40:41.865 --> 00:40:44.265
<v Speaker 1>I should be port. And then you've you

00:40:44.265 --> 00:40:46.960
<v Speaker 1>went for container port eighty eighty, which is

00:40:47.360 --> 00:40:49.920
<v Speaker 1>intuitively, you got very close to to to

00:40:49.920 --> 00:40:53.120
<v Speaker 1>actually the the configuration of of this setup.

00:40:53.840 --> 00:40:55.440
<v Speaker 1>And you can basically

00:40:55.520 --> 00:40:58.160
<v Speaker 1>it it's a it's a a new format

00:40:58.160 --> 00:40:59.840
<v Speaker 1>that you need to learn. So, obviously, you

00:40:59.840 --> 00:41:01.520
<v Speaker 1>need to learn how to configure it that

00:41:01.520 --> 00:41:04.055
<v Speaker 1>way. But the main advantage you have already

00:41:04.055 --> 00:41:05.494
<v Speaker 1>here, and you can see over the other

00:41:05.494 --> 00:41:06.615
<v Speaker 1>software, is like

00:41:07.575 --> 00:41:08.775
<v Speaker 1>and by

00:41:08.775 --> 00:41:11.015
<v Speaker 1>all means, I use Helm as a comparison

00:41:11.015 --> 00:41:13.015
<v Speaker 1>just because it's it's

00:41:13.015 --> 00:41:14.455
<v Speaker 1>easier to most

00:41:14.615 --> 00:41:16.855
<v Speaker 1>people know it. It's like, while with Helm,

00:41:17.260 --> 00:41:18.780
<v Speaker 1>you still have to do pretty much the

00:41:18.780 --> 00:41:21.500
<v Speaker 1>same job in the values file. Right? Each

00:41:21.500 --> 00:41:24.380
<v Speaker 1>values file drives the template in perhaps a

00:41:24.380 --> 00:41:26.780
<v Speaker 1>completely different way. Right? So depending on the

00:41:26.780 --> 00:41:28.700
<v Speaker 1>template, you will have a different value file

00:41:28.700 --> 00:41:30.755
<v Speaker 1>that you need to. Every time you have

00:41:30.755 --> 00:41:31.955
<v Speaker 1>a new chart, you need to go through

00:41:31.955 --> 00:41:33.715
<v Speaker 1>the values file and understand how to fill

00:41:33.715 --> 00:41:34.755
<v Speaker 1>it in to

00:41:34.835 --> 00:41:37.235
<v Speaker 1>to to to make it behave the way

00:41:37.235 --> 00:41:38.035
<v Speaker 1>you want.

00:41:38.675 --> 00:41:41.235
<v Speaker 1>Now, obviously, there are standards and people tend

00:41:41.235 --> 00:41:43.635
<v Speaker 1>to use templates in roughly the same way.

00:41:43.635 --> 00:41:44.435
<v Speaker 1>So the values

00:41:44.770 --> 00:41:46.770
<v Speaker 1>that you define are pretty much always gonna

00:41:46.770 --> 00:41:47.570
<v Speaker 1>be the same.

00:41:47.890 --> 00:41:50.130
<v Speaker 1>But but that's down to to to to

00:41:50.130 --> 00:41:52.130
<v Speaker 1>code in standards. It's not because

00:41:52.530 --> 00:41:55.330
<v Speaker 1>Helm enforces you to have a specific structure.

00:41:55.490 --> 00:41:56.530
<v Speaker 1>In our case,

00:41:56.850 --> 00:41:58.930
<v Speaker 1>those definition, once you learn how to use

00:41:58.930 --> 00:42:00.595
<v Speaker 1>it, you can use it to create any

00:42:00.595 --> 00:42:02.675
<v Speaker 1>other kind of template you want to create.

00:42:03.155 --> 00:42:05.235
<v Speaker 1>So it's a it's a it's a good

00:42:05.235 --> 00:42:07.315
<v Speaker 1>to be use of that those configuration right

00:42:07.315 --> 00:42:07.795
<v Speaker 1>there.

00:42:08.435 --> 00:42:10.355
<v Speaker 0>Yeah. Well, I I love what this one

00:42:10.355 --> 00:42:11.875
<v Speaker 0>is doing. So I I need to see

00:42:11.875 --> 00:42:13.155
<v Speaker 0>this see this happen.

00:42:14.150 --> 00:42:16.310
<v Speaker 0>I mean, this is you know,

00:42:17.030 --> 00:42:19.190
<v Speaker 0>nine times out of 10, and that's arbitrary,

00:42:19.190 --> 00:42:21.670
<v Speaker 0>but probably a pretty close number. Nine out

00:42:21.670 --> 00:42:22.950
<v Speaker 0>of 10 times, what I'm doing with Kubernetes

00:42:22.950 --> 00:42:24.630
<v Speaker 0>is deploying a deployment that has a service

00:42:24.630 --> 00:42:27.030
<v Speaker 0>that exposes that thing. Right? And Exactly. Exactly.

00:42:27.245 --> 00:42:29.725
<v Speaker 1>Exactly. Just template that down to something as

00:42:29.725 --> 00:42:32.525
<v Speaker 0>simple as, hey. My Yeah. You know, target

00:42:32.525 --> 00:42:34.845
<v Speaker 0>should have these components, and this is how

00:42:34.845 --> 00:42:35.965
<v Speaker 0>I tweak them versus Yeah.

00:42:36.605 --> 00:42:37.485
<v Speaker 1>Yeah. Fantastic.

00:42:38.045 --> 00:42:40.619
<v Speaker 1>At the moment, for for the benefit of

00:42:40.619 --> 00:42:43.260
<v Speaker 1>the demo, at the moment, we are doing

00:42:43.260 --> 00:42:45.020
<v Speaker 1>everything in the in this target

00:42:45.099 --> 00:42:46.060
<v Speaker 1>directory.

00:42:47.660 --> 00:42:49.500
<v Speaker 1>You won't find a service there yet. Just

00:42:49.500 --> 00:42:50.940
<v Speaker 1>give me a second. I'll recreate the service

00:42:50.940 --> 00:42:51.339
<v Speaker 1>as well.

00:42:52.055 --> 00:42:54.215
<v Speaker 1>But, like, at the moment, we are doing

00:42:54.215 --> 00:42:56.375
<v Speaker 1>everything in the targets file just for other

00:42:56.375 --> 00:42:57.175
<v Speaker 1>convenience.

00:42:57.335 --> 00:42:59.335
<v Speaker 1>But effectively, you will be moving this kind

00:42:59.335 --> 00:43:02.375
<v Speaker 1>of configuration in the more appropriate class later.

00:43:02.455 --> 00:43:04.400
<v Speaker 1>But for now, let's let's carry on. So

00:43:04.400 --> 00:43:06.880
<v Speaker 1>to have the, if you now scroll down

00:43:06.880 --> 00:43:08.800
<v Speaker 1>and you find expose a service,

00:43:09.040 --> 00:43:09.680
<v Speaker 1>and then,

00:43:10.720 --> 00:43:12.160
<v Speaker 1>there should be a

00:43:12.400 --> 00:43:13.120
<v Speaker 1>a

00:43:13.200 --> 00:43:16.720
<v Speaker 1>service directory as, directive as well. So okay.

00:43:16.720 --> 00:43:17.440
<v Speaker 1>So let,

00:43:17.920 --> 00:43:19.680
<v Speaker 1>if you go back to the, target.

00:43:21.575 --> 00:43:23.974
<v Speaker 0>Yep. And and let me make sure that

00:43:23.974 --> 00:43:25.895
<v Speaker 1>I don't make a mistake there. But if

00:43:25.895 --> 00:43:26.695
<v Speaker 1>you write

00:43:27.175 --> 00:43:28.055
<v Speaker 1>service,

00:43:29.255 --> 00:43:31.335
<v Speaker 1>so you create a new key called service

00:43:31.415 --> 00:43:32.535
<v Speaker 1>alongside ports.

00:43:34.089 --> 00:43:35.210
<v Speaker 1>Yes?

00:43:35.210 --> 00:43:35.770
<v Speaker 1>Yep.

00:43:36.010 --> 00:43:39.050
<v Speaker 1>And and then another key type,

00:43:39.369 --> 00:43:41.610
<v Speaker 1>and you say cluster

00:43:43.450 --> 00:43:44.410
<v Speaker 1>cluster

00:43:44.490 --> 00:43:45.370
<v Speaker 1>IP.

00:43:45.450 --> 00:43:48.330
<v Speaker 1>Mhmm. Yeah. Now if you compile

00:43:49.665 --> 00:43:50.385
<v Speaker 1>so

00:43:50.465 --> 00:43:51.265
<v Speaker 1>here,

00:43:51.345 --> 00:43:53.665
<v Speaker 1>I think this is the one problem

00:43:54.145 --> 00:43:56.065
<v Speaker 1>that we have right now is that probably

00:43:56.065 --> 00:43:58.385
<v Speaker 1>possibly we haven't been extremely

00:43:58.465 --> 00:44:00.145
<v Speaker 1>I might have made a mistake there. Just

00:44:00.145 --> 00:44:01.985
<v Speaker 1>double check with the Thank you. That's okay.

00:44:02.600 --> 00:44:03.640
<v Speaker 2>So if you go on Did you create

00:44:03.640 --> 00:44:06.440
<v Speaker 1>it? Oh, yeah. Just look at look inside

00:44:06.440 --> 00:44:08.280
<v Speaker 1>the bundle. Yeah. Exactly. Yes.

00:44:09.400 --> 00:44:11.000
<v Speaker 1>This is one of the thing that annoy

00:44:11.000 --> 00:44:12.840
<v Speaker 1>me the most when I start using Kubernetes

00:44:12.840 --> 00:44:15.080
<v Speaker 1>is that you have to match the labels

00:44:15.735 --> 00:44:18.055
<v Speaker 1>across deployment and service.

00:44:18.375 --> 00:44:18.775
<v Speaker 1>And

00:44:19.175 --> 00:44:21.335
<v Speaker 1>I was like, you know, it's a beautiful

00:44:21.335 --> 00:44:23.495
<v Speaker 1>kind of a a power

00:44:24.855 --> 00:44:27.015
<v Speaker 1>ability to decouple the service from from the

00:44:27.015 --> 00:44:28.935
<v Speaker 1>Kubernetes. But, you know, how many times do

00:44:28.935 --> 00:44:30.775
<v Speaker 1>you actually use it like that? It's like,

00:44:31.250 --> 00:44:32.210
<v Speaker 1>it's

00:44:32.210 --> 00:44:34.290
<v Speaker 1>just that gets in the way sometimes when

00:44:34.290 --> 00:44:37.089
<v Speaker 1>you want to do things your way. Yeah.

00:44:37.089 --> 00:44:39.410
<v Speaker 1>So that that's why the default is to

00:44:39.410 --> 00:44:40.369
<v Speaker 1>make sure that

00:44:40.690 --> 00:44:44.210
<v Speaker 1>the deployment is called echo server, the service

00:44:44.210 --> 00:44:47.325
<v Speaker 1>is called echo server, The labels are consistent

00:44:47.325 --> 00:44:48.445
<v Speaker 1>across the two,

00:44:48.685 --> 00:44:51.085
<v Speaker 1>and and you carry on building the the

00:44:51.085 --> 00:44:53.485
<v Speaker 1>service as as you need. If you need

00:44:53.485 --> 00:44:55.325
<v Speaker 1>to deviate from it, you can still do

00:44:55.325 --> 00:44:58.205
<v Speaker 1>it. But for the time being, this is

00:44:58.680 --> 00:45:01.160
<v Speaker 1>an ability to quickly get started with it.

00:45:01.400 --> 00:45:02.760
<v Speaker 0>So does that not

00:45:03.240 --> 00:45:05.640
<v Speaker 0>have an implicit cluster IP by default?

00:45:06.119 --> 00:45:07.720
<v Speaker 0>Would that just now remove that from my

00:45:07.720 --> 00:45:08.360
<v Speaker 0>bundle?

00:45:09.480 --> 00:45:11.160
<v Speaker 1>It will and now it will remove it.

00:45:11.160 --> 00:45:11.400
<v Speaker 1>Yeah.

00:45:12.515 --> 00:45:15.075
<v Speaker 0>Right. Okay. Cool. Okay. Thanks.

00:45:15.395 --> 00:45:15.955
<v Speaker 1>So

00:45:16.275 --> 00:45:18.115
<v Speaker 1>yeah. So I think if you go through

00:45:18.115 --> 00:45:20.035
<v Speaker 1>that page, you will be able to see

00:45:20.035 --> 00:45:21.075
<v Speaker 1>other examples.

00:45:21.475 --> 00:45:23.075
<v Speaker 1>And and I think if you look in

00:45:23.075 --> 00:45:25.235
<v Speaker 1>other kind of a components classes,

00:45:25.520 --> 00:45:27.119
<v Speaker 1>you can you can understand a little bit

00:45:27.119 --> 00:45:28.800
<v Speaker 1>more what you can do. But let's carry

00:45:28.800 --> 00:45:31.040
<v Speaker 1>on with what we have here. So if

00:45:31.040 --> 00:45:33.040
<v Speaker 1>you go down a little bit let's see

00:45:33.040 --> 00:45:34.560
<v Speaker 1>what else. Yeah. Like,

00:45:35.920 --> 00:45:38.000
<v Speaker 1>liveness and readiness checks,

00:45:38.000 --> 00:45:40.795
<v Speaker 1>you want to add them. So I already

00:45:40.795 --> 00:45:42.875
<v Speaker 1>defined the fact that he he can talk

00:45:43.035 --> 00:45:43.435
<v Speaker 1>point

00:45:43.995 --> 00:45:45.675
<v Speaker 1>to the specific port.

00:45:46.795 --> 00:45:47.515
<v Speaker 1>I just hope

00:45:48.235 --> 00:45:49.195
<v Speaker 1>I haven't

00:45:49.755 --> 00:45:52.155
<v Speaker 1>checked that page in quite a while, so

00:45:52.155 --> 00:45:53.755
<v Speaker 1>I'm just hoping that everything works.

00:45:54.670 --> 00:45:56.350
<v Speaker 1>In case we can route

00:45:56.350 --> 00:45:57.550
<v Speaker 1>immediately to

00:45:58.110 --> 00:46:00.350
<v Speaker 1>to an example that is already built for

00:46:00.350 --> 00:46:01.870
<v Speaker 1>that. Yeah. There we go. Great. There we

00:46:01.870 --> 00:46:02.350
<v Speaker 0>go.

00:46:02.830 --> 00:46:04.590
<v Speaker 1>Okay. Now, obviously

00:46:05.390 --> 00:46:07.230
<v Speaker 1>ahead, And one thing one thing that we

00:46:07.230 --> 00:46:08.190
<v Speaker 2>should mention is that

00:46:08.775 --> 00:46:10.615
<v Speaker 2>when I when we briefly mentioned in in

00:46:10.615 --> 00:46:12.135
<v Speaker 2>the in the in the slide of the

00:46:12.135 --> 00:46:13.895
<v Speaker 2>workflow of Kapitan is that

00:46:14.454 --> 00:46:16.934
<v Speaker 2>you are just generating stuff here. And and

00:46:16.934 --> 00:46:18.694
<v Speaker 2>the idea of how you should use is

00:46:18.694 --> 00:46:19.255
<v Speaker 2>really

00:46:19.815 --> 00:46:21.095
<v Speaker 2>you generate

00:46:23.200 --> 00:46:25.280
<v Speaker 2>the the compiled files,

00:46:25.280 --> 00:46:27.200
<v Speaker 2>and you check them in into your in

00:46:27.200 --> 00:46:28.720
<v Speaker 2>your, you know, get whatever.

00:46:29.280 --> 00:46:32.080
<v Speaker 2>And then these ones are are deployed as

00:46:32.080 --> 00:46:34.800
<v Speaker 2>they are into the cluster. So it becomes

00:46:34.800 --> 00:46:36.480
<v Speaker 2>really super easy to know exactly what you

00:46:36.480 --> 00:46:39.055
<v Speaker 2>have. Basically, your your your snapshot is your

00:46:39.055 --> 00:46:41.615
<v Speaker 2>your your your state is all defined in

00:46:41.615 --> 00:46:42.175
<v Speaker 2>Git.

00:46:42.655 --> 00:46:44.815
<v Speaker 2>As opposed to, for example, Helm or other

00:46:44.815 --> 00:46:45.455
<v Speaker 2>tools,

00:46:45.775 --> 00:46:47.535
<v Speaker 2>you don't really it's don't really see by

00:46:47.535 --> 00:46:49.775
<v Speaker 2>default what it is actually rendering and applying

00:46:49.775 --> 00:46:51.930
<v Speaker 2>to the cluster. We just have that view

00:46:51.930 --> 00:46:53.849
<v Speaker 2>of the parameters you you are exposed to

00:46:53.849 --> 00:46:55.770
<v Speaker 2>and everything else kind of magic unless you

00:46:55.770 --> 00:46:57.770
<v Speaker 2>dig into the code. Our approach is a

00:46:57.770 --> 00:46:58.970
<v Speaker 2>bit more verbose,

00:46:59.130 --> 00:47:01.290
<v Speaker 2>which might be a bit more overwhelming at

00:47:01.290 --> 00:47:04.810
<v Speaker 2>first, but eventually, you have a much clearer

00:47:04.810 --> 00:47:05.849
<v Speaker 2>picture of what you're

00:47:06.744 --> 00:47:08.185
<v Speaker 2>applying to your cluster.

00:47:09.305 --> 00:47:10.105
<v Speaker 0>Excellent.

00:47:11.385 --> 00:47:12.665
<v Speaker 0>Okay. So

00:47:13.225 --> 00:47:15.065
<v Speaker 0>what should we wanna look at next?

00:47:15.625 --> 00:47:17.865
<v Speaker 1>Let's look at config maps. I think that's

00:47:17.865 --> 00:47:19.945
<v Speaker 1>where the fun starts from my point of

00:47:19.945 --> 00:47:22.010
<v Speaker 1>view. You've not been having fun yet? Come

00:47:22.010 --> 00:47:22.490
<v Speaker 2>on.

00:47:23.850 --> 00:47:25.050
<v Speaker 2>I should buy stuff. So,

00:47:28.090 --> 00:47:30.010
<v Speaker 1>obviously, one of the things they use most

00:47:30.010 --> 00:47:31.210
<v Speaker 1>of the time are, like,

00:47:31.610 --> 00:47:34.410
<v Speaker 1>again, config maps and secrets. And with the

00:47:34.410 --> 00:47:36.954
<v Speaker 1>generators, you basically pretty much define it exactly

00:47:36.954 --> 00:47:39.115
<v Speaker 1>the same way. So if you now copy

00:47:39.115 --> 00:47:41.755
<v Speaker 1>and paste that into your configuration,

00:47:42.795 --> 00:47:44.715
<v Speaker 1>you would see more magic happening,

00:47:45.595 --> 00:47:46.795
<v Speaker 1>which is basically

00:47:48.810 --> 00:47:50.650
<v Speaker 1>yeah. Add it whatever you want to, whichever

00:47:50.650 --> 00:47:53.130
<v Speaker 1>component you you expect it to happen. So

00:47:53.130 --> 00:47:55.370
<v Speaker 1>this is just make sure it's indented. Yeah.

00:47:55.370 --> 00:47:56.810
<v Speaker 1>It's it's the right indented. Yeah.

00:47:58.570 --> 00:48:00.170
<v Speaker 0>So here, I can add

00:48:00.410 --> 00:48:01.770
<v Speaker 0>key and secret

00:48:02.474 --> 00:48:05.355
<v Speaker 0>value pair, whatever, and that's just gonna work.

00:48:05.355 --> 00:48:06.635
<v Speaker 2>Yep. Yep.

00:48:11.835 --> 00:48:13.914
<v Speaker 1>So what we tend to do is every

00:48:13.914 --> 00:48:15.770
<v Speaker 1>time we make a change, you, like, get

00:48:15.770 --> 00:48:17.770
<v Speaker 1>commit so that then you can easily see

00:48:17.770 --> 00:48:20.650
<v Speaker 1>the diff, like, of of what you're changing.

00:48:20.730 --> 00:48:22.490
<v Speaker 1>Obviously, in this case, it's

00:48:22.730 --> 00:48:24.650
<v Speaker 1>you know, we we just playing with it.

00:48:24.650 --> 00:48:27.210
<v Speaker 1>As you can see, has generated another

00:48:27.450 --> 00:48:29.130
<v Speaker 1>file, NGINX config

00:48:29.545 --> 00:48:30.265
<v Speaker 1>with

00:48:30.585 --> 00:48:31.705
<v Speaker 1>with that content.

00:48:32.025 --> 00:48:34.345
<v Speaker 1>And nice thing is that on top of

00:48:34.345 --> 00:48:36.665
<v Speaker 1>the simple value that you can define this

00:48:36.665 --> 00:48:39.145
<v Speaker 1>way, this is just to add value to

00:48:39.145 --> 00:48:40.185
<v Speaker 1>the Necoserver.

00:48:40.345 --> 00:48:43.625
<v Speaker 1>We also suffer support to the the idea

00:48:43.625 --> 00:48:44.185
<v Speaker 1>of

00:48:45.060 --> 00:48:45.540
<v Speaker 1>connecting

00:48:45.860 --> 00:48:47.540
<v Speaker 1>of rendering templates

00:48:47.540 --> 00:48:48.580
<v Speaker 1>that come from

00:48:49.060 --> 00:48:50.660
<v Speaker 1>an actual Jinja file.

00:48:50.820 --> 00:48:52.900
<v Speaker 1>So the one the the the Jinja file

00:48:52.900 --> 00:48:54.340
<v Speaker 1>you pointed at before

00:48:54.420 --> 00:48:56.180
<v Speaker 1>under the components folder,

00:48:56.420 --> 00:48:58.255
<v Speaker 1>that is just a a file that is

00:48:58.255 --> 00:49:00.255
<v Speaker 1>there that we can now reuse and see

00:49:00.255 --> 00:49:02.095
<v Speaker 1>how it works. So if you if you

00:49:02.095 --> 00:49:04.735
<v Speaker 1>remember that you were in the components

00:49:04.735 --> 00:49:05.615
<v Speaker 1>folder

00:49:05.695 --> 00:49:08.095
<v Speaker 1>and there was a a Ginger file

00:49:09.135 --> 00:49:10.095
<v Speaker 1>that you

00:49:10.175 --> 00:49:12.790
<v Speaker 1>pointed up before. Yeah. So we could we

00:49:12.790 --> 00:49:15.109
<v Speaker 1>could we can now tell the generator that

00:49:15.109 --> 00:49:15.990
<v Speaker 1>you want to

00:49:16.790 --> 00:49:18.630
<v Speaker 1>use this template in in the in the

00:49:18.630 --> 00:49:20.390
<v Speaker 1>compile the in the

00:49:20.630 --> 00:49:22.309
<v Speaker 1>example we are doing. So if you copy

00:49:22.309 --> 00:49:24.309
<v Speaker 1>that component cycle server if you if you

00:49:24.309 --> 00:49:26.150
<v Speaker 1>copy the path to this file,

00:49:27.925 --> 00:49:30.005
<v Speaker 1>and then we can define it here,

00:49:30.805 --> 00:49:32.565
<v Speaker 1>and you call it another name. So create

00:49:32.565 --> 00:49:36.005
<v Speaker 1>that other key. Say saying, like, example.comfour.

00:49:38.724 --> 00:49:40.565
<v Speaker 2>If you go one level before.

00:49:41.250 --> 00:49:43.330
<v Speaker 1>Yeah. It just inside data.

00:49:43.570 --> 00:49:46.690
<v Speaker 1>Exactly. And then add a key called template,

00:49:47.250 --> 00:49:48.850
<v Speaker 1>and then you put up path.

00:49:49.570 --> 00:49:51.330
<v Speaker 1>And then you add

00:49:51.650 --> 00:49:53.890
<v Speaker 1>a

00:49:56.215 --> 00:49:57.655
<v Speaker 1>another key.

00:49:58.375 --> 00:50:00.615
<v Speaker 0>Oh, wait. I'm lost. So what is m

00:50:00.615 --> 00:50:02.055
<v Speaker 2>server config? Yeah.

00:50:04.615 --> 00:50:06.135
<v Speaker 1>I mean, this is just a

00:50:06.375 --> 00:50:09.200
<v Speaker 1>an example. We have others, but pretty much

00:50:09.200 --> 00:50:10.960
<v Speaker 1>any kind and then you have another key

00:50:10.960 --> 00:50:12.000
<v Speaker 1>called values,

00:50:12.880 --> 00:50:16.400
<v Speaker 1>which is where you basically specify the context.

00:50:16.640 --> 00:50:18.559
<v Speaker 1>So in this in this case, if you

00:50:18.559 --> 00:50:20.880
<v Speaker 1>write example, which is what the valuable that

00:50:20.880 --> 00:50:23.119
<v Speaker 1>that kind of a template is looking for,

00:50:23.415 --> 00:50:24.455
<v Speaker 1>Right? Hello.

00:50:24.615 --> 00:50:27.095
<v Speaker 1>And, yeah, compile away,

00:50:27.575 --> 00:50:28.935
<v Speaker 2>and let's see what happens.

00:50:29.095 --> 00:50:29.735
<v Speaker 1>Yep.

00:50:31.575 --> 00:50:32.295
<v Speaker 2>Oh,

00:50:33.335 --> 00:50:34.375
<v Speaker 2>it didn't crash. Great.

00:50:36.940 --> 00:50:38.860
<v Speaker 1>I'm just waiting for that to happen. There

00:50:38.860 --> 00:50:41.820
<v Speaker 1>you go. There you go. Yeah. So very

00:50:41.820 --> 00:50:42.620
<v Speaker 1>simple,

00:50:42.620 --> 00:50:45.580
<v Speaker 1>very quick to get started with it. Now

00:50:45.900 --> 00:50:47.420
<v Speaker 1>in the values

00:50:47.420 --> 00:50:49.865
<v Speaker 1>kind of key that you defined, you have

00:50:49.865 --> 00:50:53.145
<v Speaker 1>access to the full feature of the inventory,

00:50:53.145 --> 00:50:53.705
<v Speaker 1>which is

00:50:54.025 --> 00:50:55.545
<v Speaker 1>variable interpolation.

00:50:55.545 --> 00:50:58.265
<v Speaker 1>So you can now take a value from

00:50:58.265 --> 00:51:00.105
<v Speaker 1>anywhere else in the inventory

00:51:00.744 --> 00:51:01.385
<v Speaker 1>and

00:51:16.565 --> 00:51:19.205
<v Speaker 1>And then something like a target name,

00:51:19.765 --> 00:51:20.965
<v Speaker 1>just to make it easy.

00:51:23.285 --> 00:51:25.125
<v Speaker 1>What we are saying here is we are

00:51:25.125 --> 00:51:27.845
<v Speaker 1>telling Kapitan or we're telling the inventory

00:51:27.925 --> 00:51:31.910
<v Speaker 1>to replace that value with the inventory value

00:51:31.910 --> 00:51:33.030
<v Speaker 1>called target

00:51:33.349 --> 00:51:36.069
<v Speaker 1>name, which can be defined in any other

00:51:36.069 --> 00:51:38.390
<v Speaker 1>class as long as it's within the inventory.

00:51:38.549 --> 00:51:40.630
<v Speaker 1>So this is very powerful because allows you

00:51:40.630 --> 00:51:43.990
<v Speaker 1>to basically refer to to other kind of

00:51:44.150 --> 00:51:47.095
<v Speaker 1>values that you have configured somewhere else.

00:51:48.055 --> 00:51:50.134
<v Speaker 1>So now, again, if you compile, you will

00:51:50.134 --> 00:51:51.894
<v Speaker 1>see the expected change,

00:51:57.849 --> 00:51:58.570
<v Speaker 1>Hopefully.

00:51:59.530 --> 00:52:00.490
<v Speaker 1>So far

00:52:00.890 --> 00:52:02.650
<v Speaker 1>okay. For this demo.

00:52:02.970 --> 00:52:05.369
<v Speaker 1>Yeah. It it can be much more complex.

00:52:05.369 --> 00:52:06.570
<v Speaker 1>So if you look at the

00:52:07.050 --> 00:52:08.970
<v Speaker 1>com the example for

00:52:09.690 --> 00:52:12.730
<v Speaker 1>component sorry. Inventory classes components,

00:52:12.730 --> 00:52:13.290
<v Speaker 1>my SQL,

00:52:14.785 --> 00:52:17.105
<v Speaker 1>likely, I added it, right, yesterday,

00:52:17.185 --> 00:52:19.425
<v Speaker 1>a bit more of so inventory,

00:52:19.825 --> 00:52:21.265
<v Speaker 1>classes, components,

00:52:21.585 --> 00:52:22.465
<v Speaker 1>MySQL.

00:52:22.945 --> 00:52:24.545
<v Speaker 1>So this is obviously

00:52:24.545 --> 00:52:26.865
<v Speaker 1>a little bit more of a complicated setup.

00:52:26.865 --> 00:52:27.985
<v Speaker 1>If you want, we can look at it

00:52:27.985 --> 00:52:30.100
<v Speaker 1>later. But pretty much, you can see other

00:52:30.100 --> 00:52:31.300
<v Speaker 1>kind of configuration,

00:52:31.540 --> 00:52:33.620
<v Speaker 1>and you can see that the templates here

00:52:33.700 --> 00:52:34.500
<v Speaker 1>reads

00:52:34.500 --> 00:52:36.340
<v Speaker 1>the the the settings

00:52:36.500 --> 00:52:38.260
<v Speaker 1>block that you see up there. So we

00:52:38.260 --> 00:52:39.140
<v Speaker 1>are referring

00:52:39.220 --> 00:52:41.140
<v Speaker 1>to another kind of a part of the

00:52:41.140 --> 00:52:42.580
<v Speaker 1>inventory configuration,

00:52:42.740 --> 00:52:43.860
<v Speaker 1>allows you to easily

00:52:44.575 --> 00:52:46.975
<v Speaker 1>play and and and change with these parameters

00:52:46.975 --> 00:52:50.095
<v Speaker 1>as you create different components of MySQL across

00:52:50.095 --> 00:52:51.855
<v Speaker 1>all the different components.

00:52:52.415 --> 00:52:54.255
<v Speaker 2>So I think one one thing we can

00:52:54.255 --> 00:52:56.495
<v Speaker 2>also look at is something we we already

00:52:56.750 --> 00:52:58.510
<v Speaker 2>mentioned before is, if you go back in

00:52:58.510 --> 00:52:59.470
<v Speaker 2>the terminal, David,

00:52:59.790 --> 00:53:00.990
<v Speaker 2>you can type

00:53:01.230 --> 00:53:02.750
<v Speaker 2>Kapitan inventory

00:53:02.750 --> 00:53:04.110
<v Speaker 2>dash t demo

00:53:04.990 --> 00:53:06.830
<v Speaker 2>dash uppercase f.

00:53:08.109 --> 00:53:10.270
<v Speaker 2>Yeah. So it flattens out inventory, and it

00:53:10.270 --> 00:53:11.309
<v Speaker 2>renders the inventory.

00:53:13.895 --> 00:53:16.055
<v Speaker 2>So now you will see everything rendered for

00:53:16.055 --> 00:53:16.615
<v Speaker 2>you.

00:53:16.935 --> 00:53:17.655
<v Speaker 2>And,

00:53:17.735 --> 00:53:18.535
<v Speaker 2>for example,

00:53:19.335 --> 00:53:21.095
<v Speaker 2>you can grep for

00:53:21.895 --> 00:53:22.615
<v Speaker 2>target name.

00:53:28.210 --> 00:53:29.730
<v Speaker 2>Well, there you go. Right? So

00:53:30.050 --> 00:53:31.890
<v Speaker 2>this is that this is just a simple

00:53:31.890 --> 00:53:34.290
<v Speaker 2>example of how you can visualize

00:53:34.290 --> 00:53:35.250
<v Speaker 2>the inventory

00:53:35.250 --> 00:53:36.210
<v Speaker 2>rendered

00:53:36.530 --> 00:53:40.770
<v Speaker 2>and how you can actually use other

00:53:39.535 --> 00:53:43.215
<v Speaker 2>validating the inventory in your templates or within

00:53:43.215 --> 00:53:44.335
<v Speaker 2>your classes,

00:53:44.335 --> 00:53:44.895
<v Speaker 2>whatever.

00:53:45.295 --> 00:53:45.935
<v Speaker 0>K?

00:53:46.735 --> 00:53:47.455
<v Speaker 0>Nice.

00:53:48.175 --> 00:53:49.855
<v Speaker 0>Alright. We have a question,

00:53:51.309 --> 00:53:52.829
<v Speaker 0>which may be quite tricky, but I'm gonna

00:53:52.829 --> 00:53:54.349
<v Speaker 0>give you it anyway. So Yeah.

00:53:54.670 --> 00:53:57.230
<v Speaker 0>Sharath is asking, is it possible to give

00:53:57.230 --> 00:54:00.349
<v Speaker 0>Kapitan knowledge of what Kubernetes version is the

00:54:00.349 --> 00:54:02.190
<v Speaker 0>target so that I can adjust the API

00:54:02.190 --> 00:54:03.950
<v Speaker 0>version and kind appropriately

00:54:03.950 --> 00:54:04.510
<v Speaker 0>if needed?

00:54:06.805 --> 00:54:07.685
<v Speaker 1>Yeah. So

00:54:08.325 --> 00:54:10.965
<v Speaker 1>at the current generator, it doesn't do that,

00:54:11.605 --> 00:54:14.325
<v Speaker 1>but we are planning on on on allowing

00:54:14.325 --> 00:54:16.165
<v Speaker 1>it. At the moment, we are you know,

00:54:16.165 --> 00:54:17.445
<v Speaker 1>this generator is something that

00:54:17.980 --> 00:54:19.740
<v Speaker 1>it was originally

00:54:19.740 --> 00:54:20.620
<v Speaker 1>originally

00:54:20.700 --> 00:54:23.420
<v Speaker 1>generated created a a synthase, which is the

00:54:23.420 --> 00:54:24.300
<v Speaker 1>company that

00:54:24.700 --> 00:54:25.660
<v Speaker 1>where I'm working.

00:54:25.980 --> 00:54:29.500
<v Speaker 1>And I've then converted into cadet.

00:54:29.580 --> 00:54:31.420
<v Speaker 1>We are adding more and more features, one

00:54:31.420 --> 00:54:33.100
<v Speaker 1>of which is adding schemas

00:54:33.245 --> 00:54:35.325
<v Speaker 1>and add adding the ability to also target

00:54:35.325 --> 00:54:37.565
<v Speaker 1>a specific Kubernetes version. So at the moment,

00:54:37.565 --> 00:54:39.885
<v Speaker 1>it's not possible. So we tend to default

00:54:39.885 --> 00:54:41.725
<v Speaker 1>to the latest version available,

00:54:41.885 --> 00:54:43.565
<v Speaker 1>but we see that that's something that is

00:54:43.565 --> 00:54:45.165
<v Speaker 1>needed. And effectively,

00:54:45.245 --> 00:54:48.540
<v Speaker 1>it wouldn't be more difficult than just defining

00:54:48.700 --> 00:54:49.660
<v Speaker 1>somewhere,

00:54:50.700 --> 00:54:51.420
<v Speaker 1>you know,

00:54:52.460 --> 00:54:54.540
<v Speaker 1>an inventory value that points to

00:54:55.099 --> 00:54:56.220
<v Speaker 1>the Kubernetes

00:54:56.220 --> 00:54:58.140
<v Speaker 1>setup that you have, and then from that,

00:54:58.140 --> 00:54:59.339
<v Speaker 1>it will understand

00:54:59.339 --> 00:55:01.675
<v Speaker 1>what version to use. So not possible at

00:55:01.675 --> 00:55:04.155
<v Speaker 1>the moment, but definitely something feasible.

00:55:04.234 --> 00:55:05.995
<v Speaker 2>And if I might if I might

00:55:06.555 --> 00:55:07.995
<v Speaker 2>reiterate a little bit,

00:55:08.315 --> 00:55:09.835
<v Speaker 2>not possible generators.

00:55:10.714 --> 00:55:12.555
<v Speaker 2>If you use plain Kapitan,

00:55:12.555 --> 00:55:13.675
<v Speaker 2>you're completely

00:55:14.155 --> 00:55:14.954
<v Speaker 2>free to do

00:55:16.040 --> 00:55:17.480
<v Speaker 2>this feature yourself,

00:55:17.720 --> 00:55:19.080
<v Speaker 2>if that helps. Yeah.

00:55:19.960 --> 00:55:20.600
<v Speaker 2>So

00:55:20.840 --> 00:55:22.920
<v Speaker 1>the this is an important thing. So if

00:55:22.920 --> 00:55:25.400
<v Speaker 1>people have experience with Kapitan before,

00:55:25.720 --> 00:55:27.080
<v Speaker 1>before the

00:55:27.080 --> 00:55:29.560
<v Speaker 1>path to do what you've done now was

00:55:29.560 --> 00:55:31.885
<v Speaker 1>to create, like, a JSON or a cadet

00:55:31.885 --> 00:55:34.765
<v Speaker 1>file for each component, and then every time

00:55:34.765 --> 00:55:36.285
<v Speaker 1>you had to repeat pretty much the same

00:55:36.285 --> 00:55:38.365
<v Speaker 1>stuff. So you could reuse some some things.

00:55:38.605 --> 00:55:40.924
<v Speaker 1>Like, in in this way, we realized that

00:55:40.924 --> 00:55:43.244
<v Speaker 1>pretty much all like, in our situation,

00:55:43.244 --> 00:55:45.085
<v Speaker 1>my company, we have, like, microservices

00:55:45.180 --> 00:55:47.420
<v Speaker 1>all configured the same way, but with a

00:55:47.420 --> 00:55:48.540
<v Speaker 1>couple of variations.

00:55:48.780 --> 00:55:50.619
<v Speaker 1>And I just got tired of dealing with

00:55:50.619 --> 00:55:52.700
<v Speaker 1>all those different kind of variation across TAM.

00:55:52.700 --> 00:55:53.819
<v Speaker 1>So I say, I think there must be

00:55:53.819 --> 00:55:56.059
<v Speaker 1>a better way, which is what led us

00:55:56.059 --> 00:55:58.540
<v Speaker 1>to to use the to to this approach.

00:56:01.115 --> 00:56:02.315
<v Speaker 1>Do you want

00:56:02.715 --> 00:56:03.995
<v Speaker 1>yeah. Do you want to

00:56:05.115 --> 00:56:07.275
<v Speaker 1>continue with more fun? I think we have

00:56:07.275 --> 00:56:08.235
<v Speaker 1>a couple more

00:56:08.474 --> 00:56:11.035
<v Speaker 1>things that might be of interest.

00:56:11.195 --> 00:56:13.115
<v Speaker 1>So first of all, the same setup you

00:56:13.115 --> 00:56:15.390
<v Speaker 1>see now with the config maps. If you

00:56:15.390 --> 00:56:16.670
<v Speaker 1>even just create

00:56:17.230 --> 00:56:18.990
<v Speaker 1>instead of config map, you create the same

00:56:18.990 --> 00:56:20.270
<v Speaker 1>setup with written

00:56:22.109 --> 00:56:24.670
<v Speaker 1>secrets, it will work exactly the same. So

00:56:24.670 --> 00:56:26.670
<v Speaker 1>interface for for both of them is the

00:56:26.670 --> 00:56:28.915
<v Speaker 1>same. And you can do all the things

00:56:28.915 --> 00:56:30.115
<v Speaker 1>that you're expecting

00:56:30.275 --> 00:56:32.195
<v Speaker 1>out of the same setup. So you can

00:56:32.195 --> 00:56:32.915
<v Speaker 1>mount

00:56:34.115 --> 00:56:35.635
<v Speaker 1>the config map

00:56:36.275 --> 00:56:39.315
<v Speaker 1>into the pod you defined like that. Yeah.

00:56:42.470 --> 00:56:44.869
<v Speaker 0>Oh, that's the minus go on. We can

00:56:44.869 --> 00:56:45.670
<v Speaker 0>close that.

00:56:45.990 --> 00:56:47.670
<v Speaker 0>So here, I can just say that I

00:56:47.670 --> 00:56:48.950
<v Speaker 0>actually want to maintenance.

00:56:49.109 --> 00:56:50.870
<v Speaker 1>Yes. Under that directory.

00:56:51.190 --> 00:56:52.390
<v Speaker 1>And yeah.

00:56:53.109 --> 00:56:54.710
<v Speaker 1>And then we do all the conf needed

00:56:54.710 --> 00:56:55.829
<v Speaker 1>configuration for it.

00:56:58.045 --> 00:57:00.285
<v Speaker 0>And if I pop open our bundle again,

00:57:00.285 --> 00:57:01.325
<v Speaker 0>we should see

00:57:02.445 --> 00:57:03.325
<v Speaker 0>we

00:57:04.445 --> 00:57:06.205
<v Speaker 0>have our volume and configured

00:57:06.445 --> 00:57:09.085
<v Speaker 1>Yeah. And our volumes here. Very cool. Yeah.

00:57:09.800 --> 00:57:10.520
<v Speaker 1>Now

00:57:11.640 --> 00:57:12.440
<v Speaker 1>the

00:57:12.760 --> 00:57:13.640
<v Speaker 1>standard

00:57:13.720 --> 00:57:15.880
<v Speaker 1>setup that we have is that every time

00:57:15.880 --> 00:57:17.880
<v Speaker 1>you create, like, a a configuration

00:57:18.440 --> 00:57:19.560
<v Speaker 1>config map,

00:57:19.720 --> 00:57:22.440
<v Speaker 1>it's named after the component you define. So

00:57:22.440 --> 00:57:24.654
<v Speaker 1>if you have only one config map, it's

00:57:24.654 --> 00:57:27.535
<v Speaker 1>named after the same component. Obviously, this is

00:57:27.615 --> 00:57:29.375
<v Speaker 1>doesn't work if you if you, for any

00:57:29.375 --> 00:57:31.214
<v Speaker 1>reason, you need more than one config map

00:57:31.214 --> 00:57:32.015
<v Speaker 1>defined.

00:57:32.095 --> 00:57:34.015
<v Speaker 1>In that case, the name morphs to be

00:57:34.015 --> 00:57:36.734
<v Speaker 1>component name and then the config map name

00:57:36.734 --> 00:57:38.414
<v Speaker 1>so that you can have a you know,

00:57:38.414 --> 00:57:40.290
<v Speaker 1>the the the default is to make sure

00:57:40.290 --> 00:57:41.330
<v Speaker 1>that it's as

00:57:42.930 --> 00:57:45.330
<v Speaker 1>as easy as possible to refer to to

00:57:45.330 --> 00:57:47.250
<v Speaker 1>to to that specific config map.

00:57:47.810 --> 00:57:48.770
<v Speaker 1>Yeah. So

00:57:49.170 --> 00:57:50.050
<v Speaker 1>we can

00:57:50.610 --> 00:57:51.570
<v Speaker 1>also

00:57:51.785 --> 00:57:53.785
<v Speaker 1>I don't know if we have all the

00:57:53.785 --> 00:57:56.585
<v Speaker 1>the the explanation here, but you can also

00:57:56.585 --> 00:57:59.545
<v Speaker 1>mount only specific files. So you can also

00:58:00.105 --> 00:58:00.905
<v Speaker 1>just

00:58:03.065 --> 00:58:06.905
<v Speaker 1>yeah. You can also do the sub path

00:58:06.420 --> 00:58:08.500
<v Speaker 1>bound. So you can say, I want to

00:58:08.500 --> 00:58:11.140
<v Speaker 1>just mount this specific file under this directory.

00:58:11.220 --> 00:58:12.819
<v Speaker 1>Not sure if I if we have to

00:58:12.819 --> 00:58:14.500
<v Speaker 1>come into the all of it, but

00:58:14.980 --> 00:58:18.740
<v Speaker 1>it's it's all possible, and it's it's something

00:58:18.740 --> 00:58:19.700
<v Speaker 1>that in

00:58:19.859 --> 00:58:21.380
<v Speaker 1>any case can be improved

00:58:21.775 --> 00:58:22.575
<v Speaker 1>very quickly.

00:58:23.695 --> 00:58:26.015
<v Speaker 1>Alright. Oh, yes. There it goes. Filtering files

00:58:26.015 --> 00:58:28.415
<v Speaker 1>to mount. There we go. Look at that.

00:58:28.895 --> 00:58:30.575
<v Speaker 0>Oh, yeah. So we can use an ATOM.

00:58:30.575 --> 00:58:32.255
<v Speaker 0>There we go. Yeah.

00:58:33.935 --> 00:58:36.335
<v Speaker 0>And secrets are pretty much just the same

00:58:36.335 --> 00:58:38.720
<v Speaker 0>thing. Right? Yeah. The secret the only difference

00:58:38.720 --> 00:58:40.560
<v Speaker 1>is that you also have the ability to

00:58:40.560 --> 00:58:43.040
<v Speaker 1>base 64 encode it. So if you create,

00:58:43.040 --> 00:58:44.160
<v Speaker 1>like, a simple

00:58:44.720 --> 00:58:46.320
<v Speaker 1>if you create a simple

00:58:46.960 --> 00:58:47.760
<v Speaker 1>value

00:58:47.839 --> 00:58:49.760
<v Speaker 1>and you want the base 64 encode it,

00:58:50.045 --> 00:58:51.885
<v Speaker 1>it it does it for you. Right? That's

00:58:51.885 --> 00:58:54.685
<v Speaker 1>the only difference with the config map, really.

00:58:55.645 --> 00:58:57.245
<v Speaker 0>K. And we have the ability to hook

00:58:57.245 --> 00:59:00.765
<v Speaker 0>into various cloud KMS systems or local GPG

00:59:00.765 --> 00:59:03.325
<v Speaker 0>in order to actually store and encrypt those

00:59:03.325 --> 00:59:05.485
<v Speaker 0>secrets at a safe in Opsi fashion?

00:59:06.500 --> 00:59:08.660
<v Speaker 2>Yes. And or the best of them all,

00:59:08.660 --> 00:59:11.060
<v Speaker 2>base 64, the most secure them all. This

00:59:11.780 --> 00:59:12.580
<v Speaker 2>setup.

00:59:14.660 --> 00:59:16.339
<v Speaker 0>Yeah. I don't even just I just string

00:59:16.339 --> 00:59:17.940
<v Speaker 0>the key and just YOLO it all the

00:59:17.940 --> 00:59:20.865
<v Speaker 0>way. So Yeah. So so, like, you won't

00:59:20.865 --> 00:59:22.945
<v Speaker 1>be able to use this example right away

00:59:22.945 --> 00:59:25.825
<v Speaker 1>now. But if we just accept

00:59:25.825 --> 00:59:27.105
<v Speaker 1>the fact that we are in a demo

00:59:27.105 --> 00:59:28.385
<v Speaker 1>and we are all friends,

00:59:28.625 --> 00:59:31.265
<v Speaker 1>and and if you change the if you

00:59:31.265 --> 00:59:33.425
<v Speaker 1>copy this and you change g k m

00:59:33.425 --> 00:59:36.990
<v Speaker 1>s with you you replace with plain,

00:59:39.150 --> 00:59:42.110
<v Speaker 1>so under under the oh, yes. That's perfect.

00:59:42.110 --> 00:59:42.670
<v Speaker 1>Yeah.

00:59:44.510 --> 00:59:46.670
<v Speaker 1>Yeah. Just change it to plain. So let's

00:59:46.670 --> 00:59:50.055
<v Speaker 1>pretend we are on a a safe network

00:59:50.055 --> 00:59:50.935
<v Speaker 1>and a

00:59:51.175 --> 00:59:51.975
<v Speaker 1>safe Internet.

00:59:52.455 --> 00:59:54.135
<v Speaker 1>This is I think if you

00:59:54.695 --> 00:59:55.495
<v Speaker 1>compile,

00:59:56.535 --> 00:59:58.775
<v Speaker 1>I think it gives you a very good

00:59:58.775 --> 00:59:59.575
<v Speaker 1>idea

00:59:59.575 --> 01:00:01.255
<v Speaker 1>of of what happens.

01:00:01.655 --> 01:00:02.214
<v Speaker 1>So

01:00:02.559 --> 01:00:05.520
<v Speaker 1>the import so this is basic Safari encoded.

01:00:05.520 --> 01:00:06.160
<v Speaker 1>So,

01:00:07.440 --> 01:00:08.720
<v Speaker 1>you know, you have to,

01:00:11.200 --> 01:00:13.280
<v Speaker 1>yeah, decode that. That's true.

01:00:14.799 --> 01:00:16.944
<v Speaker 1>But, basically, the the,

01:00:17.265 --> 01:00:17.985
<v Speaker 1>important,

01:00:18.865 --> 01:00:20.785
<v Speaker 1>feature that I would like to point out

01:00:20.785 --> 01:00:21.585
<v Speaker 1>is that,

01:00:22.385 --> 01:00:23.185
<v Speaker 1>Kapitan's

01:00:23.265 --> 01:00:25.665
<v Speaker 1>when they are generating a secret, Kapitan has

01:00:25.665 --> 01:00:27.425
<v Speaker 1>a number of functions that you can use

01:00:27.425 --> 01:00:29.825
<v Speaker 1>to bootstrap the value of the of that

01:00:29.825 --> 01:00:32.920
<v Speaker 1>secret. So you can automatically generate a random

01:00:32.920 --> 01:00:34.600
<v Speaker 1>string, automatically generate,

01:00:34.840 --> 01:00:36.440
<v Speaker 1>like, an error say key

01:00:36.520 --> 01:00:38.520
<v Speaker 1>and the and the relative kind of public

01:00:38.520 --> 01:00:40.280
<v Speaker 1>keys, and and we can add more and

01:00:40.280 --> 01:00:42.120
<v Speaker 1>more function as we go. And I think

01:00:42.120 --> 01:00:44.360
<v Speaker 1>this is what we call, like, declarative secrets

01:00:44.360 --> 01:00:46.600
<v Speaker 1>in a way with a very fancy name

01:00:46.805 --> 01:00:49.045
<v Speaker 1>because what we want to do is capture

01:00:49.045 --> 01:00:50.965
<v Speaker 1>not only the fact that you have a

01:00:50.965 --> 01:00:53.845
<v Speaker 1>secret, but also how you generated it.

01:00:54.005 --> 01:00:56.325
<v Speaker 1>And I think that's quite important. I think

01:00:56.325 --> 01:00:58.005
<v Speaker 1>it's a it's it's a nice

01:00:58.405 --> 01:00:59.765
<v Speaker 1>approach that

01:01:00.250 --> 01:01:01.770
<v Speaker 1>we we tend to use and we tend

01:01:01.770 --> 01:01:02.250
<v Speaker 1>to

01:01:02.570 --> 01:01:05.050
<v Speaker 1>tell people to, you know, to go for.

01:01:05.290 --> 01:01:07.210
<v Speaker 2>I think one cool detail is that if

01:01:07.210 --> 01:01:09.210
<v Speaker 2>you go back to to your previous file

01:01:09.210 --> 01:01:11.130
<v Speaker 2>and you change plain to

01:01:11.450 --> 01:01:13.530
<v Speaker 2>base 64 and then you compile again,

01:01:15.065 --> 01:01:17.545
<v Speaker 2>you will see something a bit different.

01:01:25.224 --> 01:01:25.945
<v Speaker 2>Right.

01:01:26.025 --> 01:01:28.424
<v Speaker 2>So that is what we call the reference.

01:01:28.424 --> 01:01:30.550
<v Speaker 2>And if you check the

01:01:31.109 --> 01:01:32.790
<v Speaker 2>Kapitan. Dev documentation,

01:01:32.790 --> 01:01:34.790
<v Speaker 2>it actually calls that a reference, and which

01:01:34.790 --> 01:01:37.190
<v Speaker 2>means that that it actually points to

01:01:37.589 --> 01:01:38.710
<v Speaker 2>the state

01:01:38.950 --> 01:01:40.310
<v Speaker 2>that is saved,

01:01:41.125 --> 01:01:44.005
<v Speaker 2>you know, directly called refs in your repository,

01:01:44.965 --> 01:01:46.805
<v Speaker 2>which means that the next time you compile

01:01:46.805 --> 01:01:47.685
<v Speaker 2>the same thing,

01:01:48.245 --> 01:01:51.925
<v Speaker 2>the reference to that compiled state is reused.

01:01:52.165 --> 01:01:54.005
<v Speaker 2>So, for example, if we were to use

01:01:54.005 --> 01:01:56.245
<v Speaker 2>real encryption, not base 64, it's not encryption.

01:01:57.300 --> 01:02:00.420
<v Speaker 2>For example, a GPG or GKMS,

01:02:01.060 --> 01:02:03.460
<v Speaker 2>you are the developer. You are deciding what

01:02:03.460 --> 01:02:05.780
<v Speaker 2>the secret is like. You commit that.

01:02:06.260 --> 01:02:09.060
<v Speaker 2>The second developer does not necessarily need to

01:02:09.060 --> 01:02:11.555
<v Speaker 2>have access to your the same secrets,

01:02:11.635 --> 01:02:12.755
<v Speaker 2>but he can still

01:02:13.714 --> 01:02:16.755
<v Speaker 2>recompile stuff and have the same results. Right?

01:02:16.914 --> 01:02:19.714
<v Speaker 2>Decrypting is a different story, but that's the

01:02:19.714 --> 01:02:20.355
<v Speaker 2>idea.

01:02:21.474 --> 01:02:24.035
<v Speaker 2>Yeah. And so when you apply, you have

01:02:24.035 --> 01:02:25.474
<v Speaker 2>to reveal the file, by the way.

01:02:26.980 --> 01:02:28.820
<v Speaker 1>And and if you look at now at

01:02:28.820 --> 01:02:31.460
<v Speaker 1>your directory, there will be other files being

01:02:31.460 --> 01:02:33.140
<v Speaker 1>created under the refs

01:02:33.380 --> 01:02:34.340
<v Speaker 1>directory,

01:02:34.580 --> 01:02:36.420
<v Speaker 1>and those are the one that I think

01:02:36.420 --> 01:02:37.700
<v Speaker 1>Ricardo Ricardo

01:02:37.700 --> 01:02:40.885
<v Speaker 1>is referring to that hold the information about

01:02:40.885 --> 01:02:41.765
<v Speaker 1>the password.

01:02:42.005 --> 01:02:44.645
<v Speaker 1>So in in this case, we are basically

01:02:46.005 --> 01:02:49.605
<v Speaker 1>generating the password, writing into this reference file

01:02:49.605 --> 01:02:50.805
<v Speaker 1>that you check-in.

01:02:51.120 --> 01:02:51.920
<v Speaker 1>Obviously,

01:02:51.920 --> 01:02:54.000
<v Speaker 1>not the basic c four one, but the

01:02:54.080 --> 01:02:55.920
<v Speaker 1>when you use a a a real back

01:02:55.920 --> 01:02:58.080
<v Speaker 1>end, like a secret back end, you can

01:02:58.080 --> 01:02:59.280
<v Speaker 1>securely

01:02:59.440 --> 01:03:01.920
<v Speaker 1>store with you the encrypted version of that

01:03:01.920 --> 01:03:02.640
<v Speaker 1>password,

01:03:02.800 --> 01:03:05.405
<v Speaker 1>and you can share it around only at

01:03:05.405 --> 01:03:06.685
<v Speaker 1>the act of revealing.

01:03:06.685 --> 01:03:09.244
<v Speaker 1>So only only when you need to apply

01:03:09.244 --> 01:03:12.845
<v Speaker 1>that configuration to the cluster, only then you

01:03:12.845 --> 01:03:15.885
<v Speaker 1>need the the permission to read that secret.

01:03:15.965 --> 01:03:18.285
<v Speaker 1>So all your other colleagues can be using

01:03:18.285 --> 01:03:18.925
<v Speaker 1>Kapitan

01:03:19.280 --> 01:03:22.640
<v Speaker 1>without having to need access to these secrets,

01:03:22.960 --> 01:03:25.119
<v Speaker 1>which is already, for instance, a difference with

01:03:25.920 --> 01:03:29.119
<v Speaker 1>I must say, I don't use other tools,

01:03:29.119 --> 01:03:29.600
<v Speaker 1>obviously.

01:03:30.560 --> 01:03:32.400
<v Speaker 1>But, like, if you use GitCrypt or if

01:03:32.400 --> 01:03:33.839
<v Speaker 1>you use other alternatives,

01:03:33.839 --> 01:03:35.645
<v Speaker 1>I think, much you need to set up

01:03:35.645 --> 01:03:37.244
<v Speaker 1>your environment to be able to read those

01:03:37.244 --> 01:03:39.085
<v Speaker 1>secrets even if you are not the person

01:03:39.085 --> 01:03:41.485
<v Speaker 1>that is meant to consume those those secrets.

01:03:41.485 --> 01:03:44.125
<v Speaker 1>In this case, we there is a nice

01:03:44.125 --> 01:03:46.285
<v Speaker 1>properties, the fact that you only need to

01:03:46.285 --> 01:03:47.405
<v Speaker 1>reveal these

01:03:48.125 --> 01:03:48.685
<v Speaker 1>secrets

01:03:49.270 --> 01:03:51.750
<v Speaker 1>when you are applying

01:03:51.750 --> 01:03:54.070
<v Speaker 1>this kind of configuration to the cluster,

01:03:54.150 --> 01:03:55.990
<v Speaker 1>which is something that we can also delegate

01:03:55.990 --> 01:03:58.470
<v Speaker 1>to another project we have, which is Tesoro,

01:03:58.550 --> 01:04:00.630
<v Speaker 1>which is basically a tool that runs in

01:04:00.630 --> 01:04:01.430
<v Speaker 1>the cluster.

01:04:01.590 --> 01:04:02.870
<v Speaker 1>It's the only one that needs to be

01:04:02.870 --> 01:04:05.244
<v Speaker 1>able how to decipher the secrets, and then

01:04:05.244 --> 01:04:07.244
<v Speaker 1>everybody else can be locked out of of

01:04:07.244 --> 01:04:10.125
<v Speaker 1>understanding, you know, even understanding what the secrets

01:04:10.125 --> 01:04:10.925
<v Speaker 1>is about.

01:04:12.765 --> 01:04:13.485
<v Speaker 0>Very

01:04:14.925 --> 01:04:17.805
<v Speaker 0>powerful secret management there, I think. Lots of

01:04:17.805 --> 01:04:18.605
<v Speaker 0>flexibility

01:04:19.085 --> 01:04:19.725
<v Speaker 0>to

01:04:20.040 --> 01:04:21.320
<v Speaker 0>and then just being able to hook into

01:04:21.320 --> 01:04:23.320
<v Speaker 0>those cloud KMSs, I think that's important. We

01:04:23.320 --> 01:04:25.400
<v Speaker 0>shouldn't be using I would argue we shouldn't

01:04:25.400 --> 01:04:27.640
<v Speaker 0>be using local GPG or shipping around private

01:04:27.640 --> 01:04:29.160
<v Speaker 0>keys and things like that. You know, that's

01:04:29.160 --> 01:04:32.360
<v Speaker 0>how excels there. This is this is something

01:04:32.360 --> 01:04:34.280
<v Speaker 1>I'm I'm trying to get people to understand

01:04:34.280 --> 01:04:36.695
<v Speaker 1>is that even if you have your own

01:04:36.855 --> 01:04:40.935
<v Speaker 1>kind of bare metal installation of Kubernetes,

01:04:41.335 --> 01:04:42.855
<v Speaker 1>you can still use, like,

01:04:43.415 --> 01:04:46.215
<v Speaker 1>KMS from Google or KMS from AWS

01:04:46.295 --> 01:04:47.895
<v Speaker 1>to you know, you you can use just

01:04:47.895 --> 01:04:50.135
<v Speaker 1>those tools, and they are so cheap to

01:04:50.135 --> 01:04:52.660
<v Speaker 1>use. They doesn't even make sense unless you

01:04:52.660 --> 01:04:54.020
<v Speaker 1>have a specific need.

01:04:54.420 --> 01:04:56.740
<v Speaker 1>Bringing up the whole vault setup just to

01:04:56.740 --> 01:04:58.020
<v Speaker 1>make sure that you have the, you know,

01:04:58.020 --> 01:05:00.180
<v Speaker 1>this couple capabilities, it doesn't make sense to

01:05:00.180 --> 01:05:02.420
<v Speaker 1>us. So that's why g k m s

01:05:02.420 --> 01:05:04.980
<v Speaker 1>is standing over the AWS version of the

01:05:04.980 --> 01:05:06.845
<v Speaker 1>Azure version if you really,

01:05:07.565 --> 01:05:08.685
<v Speaker 1>you know, fancy

01:05:09.724 --> 01:05:11.244
<v Speaker 1>trying all the different clouds.

01:05:11.405 --> 01:05:12.924
<v Speaker 1>They are they are available for you through

01:05:12.924 --> 01:05:15.565
<v Speaker 1>Kapitan built in, and you can just, you

01:05:15.565 --> 01:05:16.925
<v Speaker 1>know, get going very quickly.

01:05:18.204 --> 01:05:21.180
<v Speaker 0>Yeah. I often work with bare metal Kubernetes

01:05:21.180 --> 01:05:23.580
<v Speaker 0>environments as I think you may be aware,

01:05:23.580 --> 01:05:25.820
<v Speaker 0>and I often use GKMS

01:05:25.820 --> 01:05:28.220
<v Speaker 0>pretty much. So it's just yeah. You're right.

01:05:28.220 --> 01:05:29.980
<v Speaker 0>It's almost free to a certain point depending

01:05:29.980 --> 01:05:31.260
<v Speaker 0>on how much you need to access it.

01:05:31.260 --> 01:05:31.660
<v Speaker 0>Yeah.

01:05:32.220 --> 01:05:32.540
<v Speaker 2>Perfect.

01:05:33.525 --> 01:05:35.605
<v Speaker 0>Alright. Let's show off some more cool stuff

01:05:35.605 --> 01:05:37.205
<v Speaker 0>before we finish off then.

01:05:37.924 --> 01:05:39.365
<v Speaker 0>And if you wanna lead us towards

01:05:39.924 --> 01:05:41.684
<v Speaker 1>I I think I

01:05:41.684 --> 01:05:43.765
<v Speaker 1>think this is something that I think you

01:05:43.765 --> 01:05:45.924
<v Speaker 1>got to the other nice section I would

01:05:45.924 --> 01:05:47.444
<v Speaker 1>have wanted to explore.

01:05:48.069 --> 01:05:50.950
<v Speaker 1>The fact that so far we defined basically

01:05:51.030 --> 01:05:53.270
<v Speaker 1>things that are related to the deployment, the

01:05:53.270 --> 01:05:55.349
<v Speaker 1>secrets, and coughing maps, you know, the the

01:05:55.349 --> 01:05:58.630
<v Speaker 1>typical stuff that you normally expect to to

01:05:58.630 --> 01:05:59.830
<v Speaker 1>have it on deployment.

01:06:00.069 --> 01:06:01.990
<v Speaker 1>But sometimes there are kind of other

01:06:02.415 --> 01:06:04.255
<v Speaker 1>features that you want to other kind of

01:06:04.255 --> 01:06:06.975
<v Speaker 1>characteristic you want to build into your deployments,

01:06:07.295 --> 01:06:09.455
<v Speaker 1>which would normally require you to have a

01:06:09.455 --> 01:06:12.175
<v Speaker 1>specific template just to deal with that. So

01:06:12.175 --> 01:06:14.095
<v Speaker 1>the generator takes care of that. So, like,

01:06:14.095 --> 01:06:15.455
<v Speaker 1>in the case of network policies,

01:06:15.800 --> 01:06:18.040
<v Speaker 1>if you define the network policy kind of

01:06:18.040 --> 01:06:19.880
<v Speaker 1>block, you will create a network policy for

01:06:19.880 --> 01:06:20.360
<v Speaker 1>you.

01:06:20.680 --> 01:06:22.040
<v Speaker 1>Prometheus rules,

01:06:22.280 --> 01:06:23.400
<v Speaker 1>if you define

01:06:23.720 --> 01:06:24.360
<v Speaker 1>the

01:06:24.840 --> 01:06:27.480
<v Speaker 1>this kind of a setup, it will basically

01:06:27.480 --> 01:06:30.119
<v Speaker 1>automatically create all the Prometheus kind of configuration

01:06:30.119 --> 01:06:32.295
<v Speaker 1>that you all the kind of related to.

01:06:32.295 --> 01:06:34.855
<v Speaker 1>This is the example where you're using the

01:06:34.935 --> 01:06:36.375
<v Speaker 1>parameters operator.

01:06:37.015 --> 01:06:38.375
<v Speaker 1>And the same if you go down, there

01:06:38.375 --> 01:06:39.735
<v Speaker 1>is another service

01:06:41.974 --> 01:06:43.335
<v Speaker 1>service monitor.

01:06:43.335 --> 01:06:45.175
<v Speaker 1>So now if you cut and paste this

01:06:45.175 --> 01:06:46.295
<v Speaker 1>into your configuration,

01:06:46.830 --> 01:06:48.110
<v Speaker 1>you you basically

01:06:48.270 --> 01:06:49.950
<v Speaker 1>by adding a little bit of a of

01:06:49.950 --> 01:06:52.430
<v Speaker 1>a of an extra configuration bit, you you

01:06:52.430 --> 01:06:55.710
<v Speaker 1>you can generate many other associated

01:06:55.710 --> 01:06:56.590
<v Speaker 1>ancillary

01:06:56.590 --> 01:06:57.950
<v Speaker 1>kind of resources

01:06:59.694 --> 01:07:02.815
<v Speaker 1>that logically belong to that application.

01:07:03.135 --> 01:07:05.535
<v Speaker 1>So within the same application, you can define

01:07:05.535 --> 01:07:07.455
<v Speaker 1>many other kind of behaviors

01:07:07.615 --> 01:07:10.414
<v Speaker 1>without having to deal with a specific template

01:07:10.414 --> 01:07:12.734
<v Speaker 1>for creating service monitoring

01:07:12.734 --> 01:07:14.255
<v Speaker 1>and network policy.

01:07:14.859 --> 01:07:15.820
<v Speaker 1>And and

01:07:16.220 --> 01:07:16.860
<v Speaker 1>also

01:07:17.660 --> 01:07:20.540
<v Speaker 1>while with the other tooling, again, because they

01:07:22.060 --> 01:07:24.620
<v Speaker 1>they require you to have the templating

01:07:24.700 --> 01:07:27.180
<v Speaker 1>specific for the feature you want to enable.

01:07:28.025 --> 01:07:30.825
<v Speaker 1>So in if you are unlucky enough to

01:07:30.825 --> 01:07:31.705
<v Speaker 1>use a,

01:07:32.345 --> 01:07:33.545
<v Speaker 1>like, perhaps

01:07:33.945 --> 01:07:36.505
<v Speaker 1>a a chart that hasn't been looked after

01:07:36.505 --> 01:07:39.945
<v Speaker 1>properly and probably doesn't have the service manager

01:07:40.425 --> 01:07:40.985
<v Speaker 1>configuration,

01:07:41.859 --> 01:07:43.380
<v Speaker 1>I think you need to add it yourself.

01:07:43.380 --> 01:07:45.300
<v Speaker 1>I don't use it, but my the my

01:07:45.619 --> 01:07:47.140
<v Speaker 1>understanding is that you need to go and

01:07:47.140 --> 01:07:48.820
<v Speaker 1>add the template to that chart and make

01:07:48.820 --> 01:07:50.660
<v Speaker 1>sure they work for you. But if you

01:07:50.660 --> 01:07:53.460
<v Speaker 1>go down the generator route, you can basically

01:07:54.744 --> 01:07:57.385
<v Speaker 1>every feature we add to the generator can

01:07:57.385 --> 01:07:59.305
<v Speaker 1>be can be used by any,

01:07:59.945 --> 01:08:01.385
<v Speaker 1>component you define.

01:08:02.744 --> 01:08:04.905
<v Speaker 2>So is that to say that I could

01:08:05.145 --> 01:08:06.585
<v Speaker 0>have Kapitan

01:08:07.080 --> 01:08:09.800
<v Speaker 0>reference a helm chart that I'm still using,

01:08:09.800 --> 01:08:12.120
<v Speaker 0>but I wanna enrich with new manifests and

01:08:12.120 --> 01:08:13.320
<v Speaker 0>Kapitan can

01:08:13.640 --> 01:08:15.960
<v Speaker 0>generate or compel them into it for me.

01:08:16.280 --> 01:08:18.680
<v Speaker 1>So that's what we we would be working

01:08:18.680 --> 01:08:20.760
<v Speaker 1>on. It's not possible yet. What I meant

01:08:20.760 --> 01:08:21.240
<v Speaker 1>is that

01:08:22.444 --> 01:08:24.844
<v Speaker 1>both the echo server and the NGINX that

01:08:24.844 --> 01:08:27.724
<v Speaker 1>you defined can both benefit from these kind

01:08:27.724 --> 01:08:28.604
<v Speaker 1>of features,

01:08:29.324 --> 01:08:30.844
<v Speaker 1>which is something that, you know, like, you

01:08:30.844 --> 01:08:32.604
<v Speaker 1>can have, like, 20 components

01:08:33.085 --> 01:08:34.124
<v Speaker 1>and easily

01:08:34.284 --> 01:08:36.604
<v Speaker 1>add to all of them consistently

01:08:36.740 --> 01:08:39.620
<v Speaker 1>the same configuration, the serve same service monitor

01:08:39.620 --> 01:08:40.580
<v Speaker 1>configuration,

01:08:40.979 --> 01:08:43.060
<v Speaker 1>and the the same kind of network policy

01:08:43.060 --> 01:08:45.860
<v Speaker 1>policy, like, consistently across all of them. So

01:08:45.860 --> 01:08:48.420
<v Speaker 1>I'm I'm just saying that even if there

01:08:48.420 --> 01:08:50.865
<v Speaker 1>is a feature missing of the generator, the

01:08:50.865 --> 01:08:52.785
<v Speaker 1>moment in which we add the feature to

01:08:52.785 --> 01:08:53.744
<v Speaker 1>the generator,

01:08:53.825 --> 01:08:54.944
<v Speaker 1>it automatically

01:08:55.345 --> 01:08:57.344
<v Speaker 1>it's automatically available

01:08:57.345 --> 01:08:58.465
<v Speaker 1>to all the

01:08:58.705 --> 01:08:59.425
<v Speaker 1>manifest

01:08:59.665 --> 01:09:01.505
<v Speaker 1>all the definition you've created of all the

01:09:01.505 --> 01:09:01.984
<v Speaker 1>components.

01:09:04.140 --> 01:09:05.340
<v Speaker 1>I don't know if you if that was

01:09:05.340 --> 01:09:06.219
<v Speaker 1>clear, if you feel like

01:09:07.100 --> 01:09:08.300
<v Speaker 1>if

01:09:08.300 --> 01:09:10.219
<v Speaker 1>I can explain if I if I need

01:09:10.219 --> 01:09:12.540
<v Speaker 1>to to to repeat that again. But I

01:09:12.540 --> 01:09:14.619
<v Speaker 1>think I find it interesting that

01:09:15.179 --> 01:09:16.939
<v Speaker 1>we can easily add more and more

01:09:18.545 --> 01:09:20.545
<v Speaker 1>magic kind of a generator

01:09:20.545 --> 01:09:22.705
<v Speaker 1>kind of a a incantation.

01:09:22.945 --> 01:09:24.385
<v Speaker 1>And the moment in which we add it

01:09:24.385 --> 01:09:26.305
<v Speaker 1>to the to the and we publish that

01:09:26.305 --> 01:09:27.825
<v Speaker 1>kind of a a feature,

01:09:27.985 --> 01:09:29.585
<v Speaker 1>it's available to all your

01:09:29.825 --> 01:09:31.825
<v Speaker 1>components that you've defined through Kapitan.

01:09:32.700 --> 01:09:34.700
<v Speaker 1>It's very easy to to deploy a feature

01:09:34.700 --> 01:09:35.899
<v Speaker 1>across all of them.

01:09:37.260 --> 01:09:38.859
<v Speaker 0>That makes sense. Awesome.

01:09:39.580 --> 01:09:40.380
<v Speaker 0>Okay.

01:09:41.180 --> 01:09:41.579
<v Speaker 1>What

01:09:43.580 --> 01:09:43.899
<v Speaker 0>next?

01:09:44.625 --> 01:09:46.785
<v Speaker 0>I think I just ended the reference. Right?

01:09:46.785 --> 01:09:49.024
<v Speaker 0>We kinda covered the generators,

01:09:49.024 --> 01:09:51.505
<v Speaker 0>how they work, what they do, what's coming.

01:09:51.505 --> 01:09:52.944
<v Speaker 0>I mean, you've covered quite a lot there.

01:09:52.944 --> 01:09:53.984
<v Speaker 0>Is there I think

01:09:54.465 --> 01:09:56.225
<v Speaker 2>think we can pass some of the stuff

01:09:56.225 --> 01:09:58.065
<v Speaker 2>he places into the target into a a

01:09:58.065 --> 01:09:59.745
<v Speaker 2>class. So just to make a target a

01:09:59.745 --> 01:10:00.305
<v Speaker 2>bit neater.

01:10:01.449 --> 01:10:02.169
<v Speaker 2>Right?

01:10:04.409 --> 01:10:06.329
<v Speaker 0>Okay. Yes. So

01:10:06.810 --> 01:10:08.489
<v Speaker 1>to be honest, you can also

01:10:08.810 --> 01:10:10.250
<v Speaker 1>yeah. Or you use a class that we

01:10:10.250 --> 01:10:12.090
<v Speaker 1>have there. So if you want, you can

01:10:12.969 --> 01:10:14.650
<v Speaker 1>so the echo server is sending with the

01:10:14.650 --> 01:10:17.005
<v Speaker 1>final ready. So if instead of defining your

01:10:17.005 --> 01:10:17.804
<v Speaker 1>own version,

01:10:18.045 --> 01:10:19.885
<v Speaker 1>you you load the class called

01:10:21.885 --> 01:10:23.724
<v Speaker 1>so if you yeah. If you in the

01:10:23.724 --> 01:10:25.004
<v Speaker 1>classes section,

01:10:25.645 --> 01:10:28.284
<v Speaker 1>if you load the class called components

01:10:28.284 --> 01:10:29.244
<v Speaker 1>echo server,

01:10:30.800 --> 01:10:31.599
<v Speaker 1>yep,

01:10:31.680 --> 01:10:33.040
<v Speaker 1>which has already, like,

01:10:33.680 --> 01:10:35.120
<v Speaker 1>lots of configuration

01:10:35.120 --> 01:10:37.360
<v Speaker 1>defined, which are beyond the the what you

01:10:37.360 --> 01:10:38.800
<v Speaker 1>had before.

01:10:39.360 --> 01:10:41.280
<v Speaker 1>So if you just load that class, it

01:10:41.280 --> 01:10:44.080
<v Speaker 1>will basically inherit all these features automatically. It's

01:10:44.080 --> 01:10:46.215
<v Speaker 1>it's like an example class that we have

01:10:46.215 --> 01:10:46.695
<v Speaker 1>there.

01:10:47.575 --> 01:10:49.095
<v Speaker 1>And at the same time, if you want,

01:10:49.095 --> 01:10:50.215
<v Speaker 1>you can install

01:10:50.215 --> 01:10:52.295
<v Speaker 1>MySQL by just simply adding

01:10:53.015 --> 01:10:53.415
<v Speaker 1>component

01:10:54.135 --> 01:10:56.615
<v Speaker 1>components MySQL to the classes section up there.

01:10:57.540 --> 01:10:59.460
<v Speaker 0>And so we could in theory, I mean,

01:10:59.460 --> 01:11:00.820
<v Speaker 0>we could just remove all of this and

01:11:00.820 --> 01:11:03.060
<v Speaker 0>use those classes that were provided. Right? So

01:11:03.060 --> 01:11:03.940
<v Speaker 0>that would be And

01:11:05.940 --> 01:11:07.780
<v Speaker 1>I think this is good because we can

01:11:07.780 --> 01:11:09.860
<v Speaker 1>show you how you can override the content

01:11:09.860 --> 01:11:11.815
<v Speaker 1>of those classes, which is something that until

01:11:11.815 --> 01:11:13.255
<v Speaker 1>now we didn't need to because we were

01:11:13.255 --> 01:11:14.295
<v Speaker 1>doing it, by the way.

01:11:15.095 --> 01:11:15.895
<v Speaker 0>Yeah.

01:11:17.255 --> 01:11:19.095
<v Speaker 0>We could do that. Right? That's I think

01:11:19.095 --> 01:11:20.855
<v Speaker 0>that's okay. Yep. That's fine.

01:11:21.975 --> 01:11:23.895
<v Speaker 0>Then we can recompile, and we'll end up

01:11:23.895 --> 01:11:25.655
<v Speaker 0>in a pretty similar place. It said, now

01:11:25.655 --> 01:11:28.030
<v Speaker 0>we're gonna have an added MySQL bundle and

01:11:28.030 --> 01:11:31.630
<v Speaker 0>a modified echo server. So Yes. See.

01:11:33.790 --> 01:11:35.550
<v Speaker 0>So, yep, we've got our Mhmm.

01:11:35.950 --> 01:11:37.790
<v Speaker 0>Yeah. Table set for MySQL.

01:11:38.430 --> 01:11:40.590
<v Speaker 0>And where is our echo server?

01:11:41.230 --> 01:11:43.925
<v Speaker 0>Very, similar. Nice. Yes. And

01:11:44.324 --> 01:11:46.405
<v Speaker 1>if you look at the echo server class

01:11:46.405 --> 01:11:47.764
<v Speaker 1>now, the

01:11:47.844 --> 01:11:49.764
<v Speaker 1>inventory classes component

01:11:49.925 --> 01:11:51.044
<v Speaker 1>echo server,

01:11:51.284 --> 01:11:54.085
<v Speaker 1>you basically it's it's a you know, it's

01:11:54.085 --> 01:11:56.770
<v Speaker 1>a it's probably the most complete example that

01:11:56.770 --> 01:11:58.370
<v Speaker 1>we have. So that everything you can think

01:11:58.370 --> 01:12:00.769
<v Speaker 1>of has been added to this class. So

01:12:01.010 --> 01:12:03.890
<v Speaker 1>but we can see that another kind of

01:12:03.969 --> 01:12:05.969
<v Speaker 1>you know, you have network policies defined. You

01:12:05.969 --> 01:12:08.050
<v Speaker 1>have a a side container as well, you

01:12:08.050 --> 01:12:10.114
<v Speaker 1>know, additional containers. So you have a side

01:12:10.114 --> 01:12:12.915
<v Speaker 1>container with NGINX, which is also nice. And

01:12:12.915 --> 01:12:14.675
<v Speaker 1>you could see that pretty much the the

01:12:14.675 --> 01:12:16.514
<v Speaker 1>configuration is pretty much the same.

01:12:17.715 --> 01:12:20.195
<v Speaker 1>So pick something that you want to override,

01:12:20.195 --> 01:12:21.635
<v Speaker 1>and we can override it on the at

01:12:21.635 --> 01:12:22.675
<v Speaker 1>the parameter level.

01:12:23.460 --> 01:12:24.739
<v Speaker 1>Yeah. So this is

01:12:26.100 --> 01:12:28.180
<v Speaker 0>Alright. And something that may be common then,

01:12:28.180 --> 01:12:29.540
<v Speaker 0>like, if I were to take if I

01:12:29.540 --> 01:12:31.460
<v Speaker 0>wanted to deploy this echo server across multiple

01:12:31.460 --> 01:12:34.020
<v Speaker 0>environments from staging to production, then the probes

01:12:34.020 --> 01:12:36.364
<v Speaker 0>may change slightly. Like, I mean, in production,

01:12:36.364 --> 01:12:38.605
<v Speaker 0>be a little bit more hesitant with or

01:12:38.605 --> 01:12:40.765
<v Speaker 0>a bit more aggressive with the time out,

01:12:40.765 --> 01:12:42.205
<v Speaker 0>whereas in staging, I make it a bit

01:12:42.205 --> 01:12:42.764
<v Speaker 0>longer.

01:12:43.085 --> 01:12:45.565
<v Speaker 1>Exactly. Exactly. So we can do that. Right?

01:12:45.565 --> 01:12:47.565
<v Speaker 1>So in the target, because it's a demo

01:12:47.565 --> 01:12:49.565
<v Speaker 1>environment, perhaps we the time out of what

01:12:49.565 --> 01:12:51.480
<v Speaker 1>we want it to be, instead of three

01:12:51.480 --> 01:12:53.080
<v Speaker 1>seconds, we can we can it can be,

01:12:53.080 --> 01:12:55.320
<v Speaker 1>like, I don't know, eight

01:12:55.560 --> 01:12:56.440
<v Speaker 1>10.

01:12:56.680 --> 01:12:59.000
<v Speaker 0>Yeah. Ten seconds. I know. Yeah. So the

01:12:59.000 --> 01:13:00.600
<v Speaker 1>the way it works is that you can

01:13:00.600 --> 01:13:01.960
<v Speaker 1>now in the demo target,

01:13:04.785 --> 01:13:06.625
<v Speaker 1>you basically recreate

01:13:06.625 --> 01:13:07.185
<v Speaker 1>the

01:13:07.585 --> 01:13:11.425
<v Speaker 1>the YAML structure up until the parameter

01:13:11.505 --> 01:13:13.185
<v Speaker 1>you want to change. So it will be

01:13:13.185 --> 01:13:14.065
<v Speaker 1>components,

01:13:14.305 --> 01:13:15.425
<v Speaker 1>echo server,

01:13:17.425 --> 01:13:18.945
<v Speaker 1>liveness check,

01:13:19.560 --> 01:13:20.999
<v Speaker 1>I think it was called.

01:13:22.040 --> 01:13:22.999
<v Speaker 1>Will underscore.

01:13:23.239 --> 01:13:23.960
<v Speaker 1>I think it

01:13:27.079 --> 01:13:29.639
<v Speaker 1>yeah. And then time out.

01:13:29.639 --> 01:13:31.079
<v Speaker 1>Yeah. Just make sure I was just checking.

01:13:31.965 --> 01:13:32.844
<v Speaker 1>Yeah. Excellent.

01:13:35.324 --> 01:13:37.164
<v Speaker 1>And then we

01:13:37.405 --> 01:13:38.604
<v Speaker 0>can turn to

01:13:39.724 --> 01:13:40.764
<v Speaker 0>health check

01:13:40.925 --> 01:13:43.644
<v Speaker 0>liveness time out seconds. There you go.

01:13:45.724 --> 01:13:46.525
<v Speaker 0>Health check.

01:13:51.340 --> 01:13:52.300
<v Speaker 0>I'm at

01:13:52.780 --> 01:13:53.500
<v Speaker 0>I can't

01:13:54.220 --> 01:13:55.179
<v Speaker 1>Yep. And

01:13:56.700 --> 01:13:58.700
<v Speaker 0>What we should see when you tile this

01:13:58.700 --> 01:14:01.100
<v Speaker 0>in is that our echo server bundle, we're

01:14:01.100 --> 01:14:02.860
<v Speaker 0>gonna have this time out

01:14:03.895 --> 01:14:05.655
<v Speaker 0>of the liveness probe,

01:14:06.535 --> 01:14:07.495
<v Speaker 0>which is here.

01:14:08.455 --> 01:14:11.255
<v Speaker 0>We should see lane 40 changed at ten.

01:14:11.255 --> 01:14:11.895
<v Speaker 1>Yeah.

01:14:12.535 --> 01:14:15.335
<v Speaker 1>Which is where committing it to get, you

01:14:15.335 --> 01:14:15.735
<v Speaker 1>know, like,

01:14:16.620 --> 01:14:18.540
<v Speaker 1>helps in this case because you can see

01:14:18.620 --> 01:14:20.539
<v Speaker 1>easily see the diffs between them.

01:14:21.739 --> 01:14:23.739
<v Speaker 2>There you go. Has it changed? Yeah. Changed.

01:14:23.739 --> 01:14:24.380
<v Speaker 1>Gotcha.

01:14:24.860 --> 01:14:26.619
<v Speaker 1>Now now this is now

01:14:27.100 --> 01:14:28.940
<v Speaker 1>this is an important thing that I think

01:14:28.940 --> 01:14:30.460
<v Speaker 1>you can go back to something I said

01:14:30.460 --> 01:14:32.564
<v Speaker 1>before. If you go back to the target,

01:14:32.724 --> 01:14:34.644
<v Speaker 1>what you've done here is to add a

01:14:34.644 --> 01:14:37.525
<v Speaker 1>time out seconds. But the reason why you

01:14:37.525 --> 01:14:39.204
<v Speaker 1>wanted to add the time out second is

01:14:39.204 --> 01:14:41.925
<v Speaker 1>because you said it's different environment type.

01:14:42.244 --> 01:14:44.164
<v Speaker 1>So if instead of doing it this way,

01:14:44.760 --> 01:14:47.000
<v Speaker 1>you you create a class called,

01:14:47.160 --> 01:14:50.199
<v Speaker 1>like, a a subdirectory called profiles,

01:14:50.680 --> 01:14:53.480
<v Speaker 1>and then you say, I don't know, testing

01:14:53.480 --> 01:14:55.239
<v Speaker 1>or them demo or

01:14:55.560 --> 01:14:57.240
<v Speaker 1>low latency or Whatever.

01:14:58.325 --> 01:15:00.085
<v Speaker 1>Whatever you want to call it. You can

01:15:00.085 --> 01:15:03.845
<v Speaker 1>then copy this configuration that now doesn't make

01:15:03.845 --> 01:15:06.085
<v Speaker 1>sense. In a in three months time, you

01:15:06.085 --> 01:15:08.805
<v Speaker 1>won't remember what this is about. Right? But

01:15:08.805 --> 01:15:11.525
<v Speaker 1>you can add it under something called profiles,

01:15:12.260 --> 01:15:12.980
<v Speaker 1>you know,

01:15:13.380 --> 01:15:14.180
<v Speaker 1>testing

01:15:15.780 --> 01:15:17.780
<v Speaker 1>yeah. Testing. Well, you know, you you come

01:15:17.780 --> 01:15:19.540
<v Speaker 1>up with a word that you you like.

01:15:19.540 --> 01:15:20.900
<v Speaker 0>So we have a new class?

01:15:21.060 --> 01:15:23.780
<v Speaker 1>Yes. It can. There's a new class called

01:15:23.940 --> 01:15:27.185
<v Speaker 1>whatever you want. Like, I think staging and

01:15:27.425 --> 01:15:29.665
<v Speaker 1>oh, yeah. Like, environment staging.

01:15:29.665 --> 01:15:32.065
<v Speaker 0>Let's call it forgiving. Let's use the forgiving.

01:15:32.545 --> 01:15:34.545
<v Speaker 0>Yep. Forgiving is good.

01:15:35.985 --> 01:15:37.985
<v Speaker 0>And then we call this whatever we want.

01:15:37.985 --> 01:15:38.865
<v Speaker 0>So let's just see.

01:15:40.200 --> 01:15:41.719
<v Speaker 0>Main dot YAML.

01:15:42.680 --> 01:15:45.640
<v Speaker 2>Yeah. We that's okay. Sorry. Something we need

01:15:45.640 --> 01:15:46.440
<v Speaker 2>to work on.

01:15:48.440 --> 01:15:49.159
<v Speaker 0>Yeah.

01:15:49.480 --> 01:15:50.280
<v Speaker 0>And

01:15:50.760 --> 01:15:52.119
<v Speaker 0>then from here,

01:15:52.200 --> 01:15:55.584
<v Speaker 0>I could just augment this with my forgiving

01:15:56.465 --> 01:15:57.664
<v Speaker 0>Main. Main.

01:15:57.905 --> 01:15:58.624
<v Speaker 1>Yeah.

01:15:58.705 --> 01:15:59.505
<v Speaker 1>Forgiving.

01:16:01.105 --> 01:16:03.105
<v Speaker 1>Now you you managed to turn into something

01:16:03.105 --> 01:16:05.025
<v Speaker 1>even more difficult to understand what he was

01:16:05.025 --> 01:16:06.784
<v Speaker 1>referring to. But

01:16:07.025 --> 01:16:07.665
<v Speaker 1>but

01:16:08.350 --> 01:16:10.910
<v Speaker 1>but you you you get you get my

01:16:10.910 --> 01:16:11.790
<v Speaker 1>point. Right?

01:16:13.150 --> 01:16:15.070
<v Speaker 0>Well, I think what I'm in my head,

01:16:15.070 --> 01:16:16.750
<v Speaker 0>what I was thinking is, you know, there

01:16:16.750 --> 01:16:18.590
<v Speaker 0>are certain constraints that I wanna apply to

01:16:18.590 --> 01:16:20.590
<v Speaker 0>different environments. And I'll forget it was a

01:16:20.590 --> 01:16:22.270
<v Speaker 0>terrible name, but, you know, I'm gonna be

01:16:22.270 --> 01:16:24.965
<v Speaker 0>running maybe consistent performance performance testing on this

01:16:24.965 --> 01:16:27.844
<v Speaker 1>environment. I'm using debugging tools enabled. So things

01:16:27.844 --> 01:16:29.844
<v Speaker 0>will generally be slower. Yeah. We have Exactly.

01:16:29.925 --> 01:16:33.044
<v Speaker 0>Chaos being artificially injecting time out, whatever. So

01:16:33.364 --> 01:16:35.684
<v Speaker 0>being able to group these together as a

01:16:35.684 --> 01:16:37.125
<v Speaker 0>a component that is reusable

01:16:37.460 --> 01:16:39.860
<v Speaker 0>to apply to the target environment as kinda

01:16:39.860 --> 01:16:41.380
<v Speaker 0>what I was going for there. But yeah.

01:16:41.380 --> 01:16:41.940
<v Speaker 1>Maybe Exactly.

01:16:42.580 --> 01:16:44.739
<v Speaker 1>And and I think something else you can

01:16:44.739 --> 01:16:46.340
<v Speaker 1>do just because we are we are playing

01:16:46.340 --> 01:16:48.580
<v Speaker 1>with the with the organizing it better. In

01:16:48.580 --> 01:16:50.900
<v Speaker 1>the forgiving main or even in the echo

01:16:50.900 --> 01:16:53.665
<v Speaker 1>server setup, instead of defining

01:16:53.665 --> 01:16:55.665
<v Speaker 1>the time out like this, you can actually

01:16:55.665 --> 01:16:58.065
<v Speaker 1>define a time out seconds on on the

01:16:58.065 --> 01:16:59.744
<v Speaker 1>on the under parameters.

01:16:59.985 --> 01:17:02.625
<v Speaker 1>Exactly. You're already there. Yeah.

01:17:03.025 --> 01:17:04.545
<v Speaker 1>So this means that

01:17:05.390 --> 01:17:06.350
<v Speaker 1>now

01:17:06.670 --> 01:17:08.590
<v Speaker 1>and and if especially if you apply to

01:17:08.590 --> 01:17:09.630
<v Speaker 1>other components,

01:17:09.950 --> 01:17:11.550
<v Speaker 1>it it define it means that you can

01:17:11.550 --> 01:17:13.550
<v Speaker 1>define that across

01:17:13.870 --> 01:17:16.350
<v Speaker 1>all the components that you have around your

01:17:16.510 --> 01:17:18.270
<v Speaker 1>you know, all the components you are deploying,

01:17:18.270 --> 01:17:19.950
<v Speaker 1>you make sure that you consistently apply to

01:17:19.950 --> 01:17:21.825
<v Speaker 1>all all the different kind of deployments you

01:17:21.825 --> 01:17:22.304
<v Speaker 1>have.

01:17:23.585 --> 01:17:25.265
<v Speaker 2>And, also, you can go ahead and and

01:17:25.265 --> 01:17:27.985
<v Speaker 2>duplicate that targets and call it prods and

01:17:27.985 --> 01:17:30.545
<v Speaker 2>then change the value. And now you have

01:17:31.505 --> 01:17:32.785
<v Speaker 2>two very similar targets.

01:17:33.420 --> 01:17:35.180
<v Speaker 0>With Yeah. No. I've got no no. My

01:17:35.180 --> 01:17:36.940
<v Speaker 0>forgiving name is getting worse and worse as

01:17:36.940 --> 01:17:38.940
<v Speaker 0>we change the name. Right? But Hey. The

01:17:38.940 --> 01:17:40.380
<v Speaker 0>the name should be something that makes sense

01:17:40.380 --> 01:17:41.580
<v Speaker 2>for you. If it makes sense for you,

01:17:41.580 --> 01:17:42.699
<v Speaker 2>then we're good. Right?

01:17:44.380 --> 01:17:46.155
<v Speaker 0>Yeah. You're right. Okay. So and then, like

01:17:46.155 --> 01:17:47.995
<v Speaker 0>you said, we can say, hey, Rawkode. We're

01:17:47.995 --> 01:17:50.075
<v Speaker 0>gonna have a slightly different performance

01:17:50.075 --> 01:17:52.395
<v Speaker 0>testing one. So hold on. Wrong. Yeah. No.

01:17:52.395 --> 01:17:53.835
<v Speaker 0>That's the right directory. Okay.

01:17:54.395 --> 01:17:56.315
<v Speaker 0>Performance.YAML.

01:17:56.555 --> 01:17:58.955
<v Speaker 0>And, actually, we we really wanna test this,

01:17:58.955 --> 01:18:00.395
<v Speaker 0>and we're gonna go with with a one.

01:18:00.630 --> 01:18:02.790
<v Speaker 0>So now that's these are factored, but we

01:18:02.870 --> 01:18:04.469
<v Speaker 0>that's not today's lesson. So

01:18:04.870 --> 01:18:06.150
<v Speaker 0>Yeah. So,

01:18:08.389 --> 01:18:10.949
<v Speaker 1>basically I think this is Sorry, Nico. I

01:18:10.949 --> 01:18:12.310
<v Speaker 0>was on the No. No. Go. Go. Go.

01:18:12.310 --> 01:18:14.345
<v Speaker 1>Go. Go. Please. I I just, you know,

01:18:14.345 --> 01:18:16.025
<v Speaker 0>I I I love confirming why I really

01:18:16.025 --> 01:18:17.785
<v Speaker 0>work I enjoy working with a tool, and

01:18:17.785 --> 01:18:19.785
<v Speaker 0>it's just this composability. The way that we're

01:18:19.785 --> 01:18:22.585
<v Speaker 0>moving things around and grouping things into use

01:18:22.585 --> 01:18:24.985
<v Speaker 0>cases and behaviors that we wanted and augment

01:18:24.985 --> 01:18:27.305
<v Speaker 0>into our targets. I think this is really,

01:18:27.305 --> 01:18:27.865
<v Speaker 0>really powerful.

01:18:28.770 --> 01:18:31.170
<v Speaker 1>There are some some aspects of it that

01:18:31.170 --> 01:18:33.170
<v Speaker 1>you will become even more clear as you

01:18:33.170 --> 01:18:35.410
<v Speaker 1>use it. And it's something that I had

01:18:35.410 --> 01:18:37.010
<v Speaker 1>a colleague of mine that used it for

01:18:37.010 --> 01:18:39.969
<v Speaker 1>several kind of weeks, and then he did,

01:18:39.970 --> 01:18:41.170
<v Speaker 1>a a refactoring

01:18:41.170 --> 01:18:43.170
<v Speaker 1>of the inventory to, you know, to shuffling

01:18:43.170 --> 01:18:45.475
<v Speaker 1>things around. And he compiled,

01:18:45.635 --> 01:18:47.235
<v Speaker 1>and he didn't see any change in the

01:18:47.235 --> 01:18:48.995
<v Speaker 1>compiled folder. It was like, oh, something is

01:18:48.995 --> 01:18:51.235
<v Speaker 1>broken. Something is not working. But that's exactly

01:18:51.235 --> 01:18:53.715
<v Speaker 1>the beauty of adding the compiled

01:18:53.955 --> 01:18:56.595
<v Speaker 1>files together with the template is that you

01:18:56.595 --> 01:18:57.715
<v Speaker 1>can refactor

01:18:58.200 --> 01:19:00.600
<v Speaker 1>the inventory or the templates as much as

01:19:00.600 --> 01:19:01.400
<v Speaker 1>you want.

01:19:01.880 --> 01:19:03.560
<v Speaker 1>But if you don't change the kind of

01:19:03.560 --> 01:19:05.880
<v Speaker 1>a functional behavior of what you're doing,

01:19:06.520 --> 01:19:09.000
<v Speaker 1>you have a immediate guarantee that whatever you've

01:19:09.000 --> 01:19:11.480
<v Speaker 1>done hasn't disrupted your your workflow.

01:19:11.560 --> 01:19:13.000
<v Speaker 1>So now you can you can move things

01:19:13.000 --> 01:19:15.165
<v Speaker 1>around and it it doesn't

01:19:15.645 --> 01:19:16.205
<v Speaker 1>change.

01:19:16.445 --> 01:19:18.605
<v Speaker 0>Yeah. Kinda like TDD for your manifest. When

01:19:18.605 --> 01:19:20.045
<v Speaker 0>you're refactoring, you wanna make sure all your

01:19:20.045 --> 01:19:21.565
<v Speaker 0>tests pass here. You'd wanna make sure your

01:19:21.565 --> 01:19:24.285
<v Speaker 0>output doesn't change. So Yeah. So what what

01:19:24.285 --> 01:19:24.525
<v Speaker 1>we

01:19:25.325 --> 01:19:26.445
<v Speaker 2>Actually, you can actually

01:19:26.940 --> 01:19:28.460
<v Speaker 2>you write can write test for you. Right?

01:19:28.460 --> 01:19:30.219
<v Speaker 2>You can write test to validate

01:19:30.460 --> 01:19:33.020
<v Speaker 2>your YAML. So you it is it's gonna

01:19:33.020 --> 01:19:34.620
<v Speaker 2>be up to you. Yeah. I can imagine

01:19:34.620 --> 01:19:36.700
<v Speaker 0>once you do the compilation step, being able

01:19:36.700 --> 01:19:39.020
<v Speaker 0>to run some sort of over rego against

01:19:39.020 --> 01:19:40.620
<v Speaker 0>it to, you know Yeah. Make sure that

01:19:40.620 --> 01:19:41.900
<v Speaker 0>it conforms to all the rules that we

01:19:41.900 --> 01:19:43.545
<v Speaker 0>have in place for those environments, which we're

01:19:43.545 --> 01:19:46.105
<v Speaker 0>really careful as well. Yep. Yeah. So before

01:19:46.105 --> 01:19:48.824
<v Speaker 1>we had a JSONET based generator.

01:19:49.065 --> 01:19:51.065
<v Speaker 1>So when I wrote the cadet based one,

01:19:51.065 --> 01:19:52.105
<v Speaker 1>the Python one,

01:19:52.425 --> 01:19:54.505
<v Speaker 1>the only thing that changed was the speed

01:19:54.505 --> 01:19:55.225
<v Speaker 1>of compiling.

01:19:55.690 --> 01:19:58.010
<v Speaker 1>Other than that, it was pretty much it

01:19:58.010 --> 01:20:00.250
<v Speaker 1>produced no output, which gave me the immediate

01:20:00.250 --> 01:20:03.289
<v Speaker 1>guarantee that whatever I had done, I was

01:20:03.289 --> 01:20:06.170
<v Speaker 1>able, with the cadet version, to basically recreate

01:20:06.170 --> 01:20:08.969
<v Speaker 1>exactly the same behavior in the JSONX version.

01:20:09.455 --> 01:20:11.295
<v Speaker 1>And and and so you you have an

01:20:11.295 --> 01:20:14.415
<v Speaker 1>immediate reassurance that what you've done hasn't impacted

01:20:14.415 --> 01:20:16.255
<v Speaker 1>any any component.

01:20:17.855 --> 01:20:19.054
<v Speaker 0>Yeah. Excellent.

01:20:20.095 --> 01:20:21.935
<v Speaker 0>Is there anything else that you would like

01:20:21.935 --> 01:20:23.775
<v Speaker 0>to cover before we finish up for today?

01:20:27.040 --> 01:20:28.720
<v Speaker 0>What's your favorite feature? Have we touched on

01:20:28.720 --> 01:20:29.840
<v Speaker 0>it? Have we done it? Have we shown

01:20:29.840 --> 01:20:32.400
<v Speaker 0>it? We've we've touched on a lot of

01:20:32.400 --> 01:20:32.960
<v Speaker 2>stuff.

01:20:35.360 --> 01:20:36.000
<v Speaker 0>I know that it's

01:20:37.115 --> 01:20:38.955
<v Speaker 0>potentially gonna be a demo. Did we cover

01:20:38.955 --> 01:20:40.235
<v Speaker 0>everything that's in your demo, or would you

01:20:40.235 --> 01:20:41.435
<v Speaker 0>like to go ahead with that?

01:20:41.835 --> 01:20:44.555
<v Speaker 1>Yeah. Pretty much, basically, the only thing I

01:20:44.555 --> 01:20:46.555
<v Speaker 1>was going to do is, like, through go

01:20:46.555 --> 01:20:47.915
<v Speaker 1>through exactly the same.

01:20:48.235 --> 01:20:49.595
<v Speaker 1>And and,

01:20:50.395 --> 01:20:50.875
<v Speaker 1>you know,

01:20:52.219 --> 01:20:54.619
<v Speaker 1>I think we've covered everything. I think another

01:20:54.860 --> 01:20:56.380
<v Speaker 1>bit that we can show

01:20:56.860 --> 01:20:58.699
<v Speaker 1>actually, we can even tell without even having

01:20:58.699 --> 01:21:00.780
<v Speaker 1>to to go through the pain of of

01:21:00.780 --> 01:21:02.059
<v Speaker 1>recompiling. But

01:21:02.540 --> 01:21:04.380
<v Speaker 1>you can add if you want to have

01:21:04.380 --> 01:21:07.900
<v Speaker 1>virtual pod auto scaling, you know, just do

01:21:07.185 --> 01:21:08.145
<v Speaker 1>VPA

01:21:08.225 --> 01:21:10.145
<v Speaker 1>auto. Boom. It works. If you want to

01:21:10.145 --> 01:21:12.864
<v Speaker 1>have a a pod disruption policy,

01:21:12.945 --> 01:21:14.945
<v Speaker 1>you just have to define pod structure policy

01:21:14.945 --> 01:21:16.785
<v Speaker 1>and it works. So it's all kind of

01:21:16.785 --> 01:21:18.865
<v Speaker 1>a small other kind of features that you

01:21:18.865 --> 01:21:20.225
<v Speaker 1>can we can add and we add it

01:21:20.225 --> 01:21:21.425
<v Speaker 1>to the generators

01:21:21.750 --> 01:21:23.030
<v Speaker 1>so that you can

01:21:23.510 --> 01:21:24.469
<v Speaker 1>easily

01:21:24.550 --> 01:21:27.350
<v Speaker 1>take advantage of a of a of a

01:21:27.350 --> 01:21:27.909
<v Speaker 1>other

01:21:28.550 --> 01:21:29.429
<v Speaker 1>kind of

01:21:31.030 --> 01:21:33.750
<v Speaker 1>Kubernetes features that otherwise would would have to

01:21:33.750 --> 01:21:35.270
<v Speaker 1>be maintained manually.

01:21:35.350 --> 01:21:37.430
<v Speaker 1>Yeah. Think it's called auto,

01:21:38.275 --> 01:21:40.514
<v Speaker 1>uppercase uppercase

01:21:40.514 --> 01:21:41.314
<v Speaker 1>auto.

01:21:41.795 --> 01:21:43.715
<v Speaker 1>That's it. Yeah. I'm not gonna that's an

01:21:43.715 --> 01:21:45.074
<v Speaker 0>opportunity here to see if I can add

01:21:45.074 --> 01:21:47.394
<v Speaker 0>a BPA to this. So you know? I

01:21:48.835 --> 01:21:50.755
<v Speaker 2>guess another thing we can do is just

01:21:50.755 --> 01:21:52.594
<v Speaker 2>really show the scripts, which is

01:21:53.260 --> 01:21:54.620
<v Speaker 2>probably a controversial

01:21:54.780 --> 01:21:55.660
<v Speaker 2>feature,

01:21:56.620 --> 01:21:58.940
<v Speaker 2>but you can actually generate executable

01:21:58.940 --> 01:21:59.739
<v Speaker 2>scripts,

01:22:02.700 --> 01:22:04.219
<v Speaker 2>which we already did.

01:22:06.860 --> 01:22:09.365
<v Speaker 1>There you go. Added it? Yeah. Got it.

01:22:09.365 --> 01:22:11.285
<v Speaker 0>Yeah. Oh, it's I went too far down.

01:22:11.285 --> 01:22:12.405
<v Speaker 0>There we go. There we There we go.

01:22:12.725 --> 01:22:14.245
<v Speaker 2>DPA. Yeah. Nice.

01:22:16.005 --> 01:22:16.885
<v Speaker 1>Yeah.

01:22:18.085 --> 01:22:18.725
<v Speaker 1>So

01:22:19.365 --> 01:22:22.325
<v Speaker 1>if you if you now open the another

01:22:22.565 --> 01:22:23.765
<v Speaker 1>target file

01:22:23.910 --> 01:22:26.230
<v Speaker 1>so for instance, the tutorial one,

01:22:26.630 --> 01:22:28.550
<v Speaker 1>it should be one called tutorial.

01:22:30.950 --> 01:22:31.750
<v Speaker 1>Yes.

01:22:32.470 --> 01:22:34.310
<v Speaker 1>So in the top part, you see that

01:22:34.310 --> 01:22:36.630
<v Speaker 1>project to local host Kubernetes kind.

01:22:37.115 --> 01:22:39.115
<v Speaker 1>If you copy and paste that into your

01:22:39.115 --> 01:22:40.075
<v Speaker 1>configuration,

01:22:41.275 --> 01:22:42.235
<v Speaker 1>into your

01:22:43.595 --> 01:22:44.875
<v Speaker 1>target file

01:22:47.035 --> 01:22:47.675
<v Speaker 2>yeah.

01:22:48.955 --> 01:22:49.275
<v Speaker 1>So

01:22:49.755 --> 01:22:50.555
<v Speaker 1>and compile.

01:22:51.170 --> 01:22:52.770
<v Speaker 1>What we are doing here is that we

01:22:52.770 --> 01:22:54.370
<v Speaker 1>are and you can open that class to

01:22:54.370 --> 01:22:56.370
<v Speaker 1>see basically what it has. We're basically

01:22:56.850 --> 01:22:58.530
<v Speaker 1>you'll see here a change in the scripts

01:22:58.530 --> 01:23:01.170
<v Speaker 1>file, which is actually was already there. Mhmm.

01:23:01.170 --> 01:23:04.130
<v Speaker 1>What you see now is that we've basically

01:23:04.290 --> 01:23:07.645
<v Speaker 1>imported information about a specific Kubernetes. As you

01:23:07.645 --> 01:23:09.724
<v Speaker 1>can imagine, it's called KIND in this case.

01:23:10.045 --> 01:23:11.804
<v Speaker 1>And do you have KIND installed in your

01:23:11.804 --> 01:23:13.165
<v Speaker 1>machine just to prevent

01:23:14.045 --> 01:23:16.045
<v Speaker 1>actually, open setup cluster.

01:23:16.284 --> 01:23:16.844
<v Speaker 1>Yeah?

01:23:17.085 --> 01:23:19.410
<v Speaker 0>I I do have KIND available. Yes. Great.

01:23:19.410 --> 01:23:22.370
<v Speaker 2>Yeah. So now if you run on the

01:23:22.370 --> 01:23:23.170
<v Speaker 1>terminal,

01:23:24.050 --> 01:23:25.090
<v Speaker 1>compiled

01:23:28.530 --> 01:23:30.850
<v Speaker 1>just execute it right from where you are.

01:23:30.850 --> 01:23:31.489
<v Speaker 1>So compile.

01:23:33.385 --> 01:23:36.745
<v Speaker 0>Demo scripts. Demo scripts cluster.

01:23:36.745 --> 01:23:38.264
<v Speaker 1>Yeah. Go for it. Let's see if it

01:23:38.264 --> 01:23:39.624
<v Speaker 1>works. I mean, this is a

01:23:40.105 --> 01:23:40.425
<v Speaker 1>I think

01:23:41.145 --> 01:23:43.625
<v Speaker 2>The demo gods, man. So far, they've been

01:23:43.625 --> 01:23:44.025
<v Speaker 2>with us.

01:23:45.030 --> 01:23:47.270
<v Speaker 1>Demo. We haven't we haven't broken a single

01:23:47.270 --> 01:23:48.630
<v Speaker 0>compile. I mean, we just have to, like,

01:23:48.630 --> 01:23:50.309
<v Speaker 0>break it on purpose. This is insane.

01:23:52.550 --> 01:23:54.309
<v Speaker 2>This is live typing. I promise.

01:23:56.309 --> 01:23:58.309
<v Speaker 1>And I I think the time it takes

01:23:58.309 --> 01:24:00.015
<v Speaker 1>for here to set up to remind everybody

01:24:00.015 --> 01:24:00.735
<v Speaker 1>listening

01:24:01.135 --> 01:24:04.495
<v Speaker 1>on the stream to retweet and talk about

01:24:04.495 --> 01:24:07.855
<v Speaker 1>Kapitan and and sponsor us if you can.

01:24:08.335 --> 01:24:10.335
<v Speaker 1>And file bugs. Basically, we we are,

01:24:12.630 --> 01:24:14.550
<v Speaker 1>yeah, and and the file, all the bugs

01:24:14.550 --> 01:24:16.790
<v Speaker 1>you find. But we are going to spend

01:24:16.790 --> 01:24:19.110
<v Speaker 1>much more time to make it working this

01:24:19.110 --> 01:24:19.989
<v Speaker 1>year. So

01:24:21.030 --> 01:24:22.630
<v Speaker 1>I think we are on a on a

01:24:22.630 --> 01:24:23.830
<v Speaker 1>good path. I think we have a good

01:24:23.830 --> 01:24:25.429
<v Speaker 1>idea, and it would be nice to see

01:24:25.429 --> 01:24:26.230
<v Speaker 1>more people

01:24:26.775 --> 01:24:28.295
<v Speaker 1>taking advantage of it.

01:24:28.935 --> 01:24:31.094
<v Speaker 0>I guess adding new

01:24:31.175 --> 01:24:33.094
<v Speaker 0>automations to the generators could be a really

01:24:33.094 --> 01:24:35.255
<v Speaker 0>good way for people to contribute, adding new

01:24:35.255 --> 01:24:37.815
<v Speaker 0>keys that Yeah. Get expanded into behaviors that

01:24:37.815 --> 01:24:38.695
<v Speaker 0>they wanna see,

01:24:39.255 --> 01:24:40.614
<v Speaker 0>you know Exactly. Trivialized.

01:24:42.000 --> 01:24:44.160
<v Speaker 1>So the the beauty of the generator is

01:24:44.160 --> 01:24:46.480
<v Speaker 1>that, for instance, we can create now a

01:24:46.480 --> 01:24:48.159
<v Speaker 1>spinnaker generator.

01:24:48.800 --> 01:24:50.480
<v Speaker 1>For instance, for in my case, we use

01:24:50.480 --> 01:24:53.280
<v Speaker 1>spinnaker at work. The spinnaker generator can

01:24:53.760 --> 01:24:55.840
<v Speaker 1>see the compiled

01:24:57.215 --> 01:24:59.454
<v Speaker 1>echo server. They compile the

01:25:00.094 --> 01:25:02.735
<v Speaker 1>deployment you've created. And based on that, you

01:25:02.735 --> 01:25:04.895
<v Speaker 1>can create a pipeline to deploy those kind

01:25:04.895 --> 01:25:05.934
<v Speaker 1>of configurations.

01:25:06.255 --> 01:25:07.855
<v Speaker 1>So and then if you have a secret,

01:25:07.855 --> 01:25:09.135
<v Speaker 1>you will automatically

01:25:09.855 --> 01:25:11.054
<v Speaker 1>instruct Spinnaker,

01:25:11.250 --> 01:25:13.010
<v Speaker 1>then now there is a new manifest to

01:25:13.010 --> 01:25:13.810
<v Speaker 1>be deployed.

01:25:13.970 --> 01:25:16.130
<v Speaker 1>So, actually, by using the same kind of

01:25:16.130 --> 01:25:17.090
<v Speaker 1>configuration,

01:25:17.730 --> 01:25:18.610
<v Speaker 1>multiple

01:25:18.770 --> 01:25:22.210
<v Speaker 1>generator can provide a different behavior. So if

01:25:22.210 --> 01:25:24.675
<v Speaker 1>you add an Argo CD generator, you will

01:25:24.675 --> 01:25:27.314
<v Speaker 1>create all the Arco CD configuration

01:25:27.954 --> 01:25:30.114
<v Speaker 1>that you need to to deploy your configure.

01:25:30.114 --> 01:25:32.034
<v Speaker 1>So I think the generator pattern is something

01:25:32.034 --> 01:25:34.755
<v Speaker 1>as trivial to add, and it will give

01:25:34.755 --> 01:25:36.835
<v Speaker 1>a lot of benefit to the people using

01:25:36.835 --> 01:25:37.315
<v Speaker 1>Kapitan.

01:25:37.820 --> 01:25:39.900
<v Speaker 1>So now if you do and run compile

01:25:39.900 --> 01:25:41.420
<v Speaker 1>demo scripts setup

01:25:42.460 --> 01:25:43.340
<v Speaker 1>context

01:25:44.620 --> 01:25:46.220
<v Speaker 1>and you actually don't even need to run

01:25:46.220 --> 01:25:48.620
<v Speaker 1>this because it it's automatically when you run

01:25:48.620 --> 01:25:49.660
<v Speaker 1>cube control, but yeah.

01:25:51.275 --> 01:25:52.554
<v Speaker 1>And then you run

01:25:52.955 --> 01:25:54.875
<v Speaker 1>cube cube control

01:25:55.275 --> 01:25:56.235
<v Speaker 1>get bugs.

01:26:00.235 --> 01:26:01.355
<v Speaker 1>Get bugs.

01:26:01.595 --> 01:26:04.170
<v Speaker 1>I mean, there's nothing now, but Yeah. And

01:26:04.170 --> 01:26:04.650
<v Speaker 1>then if you

01:26:05.290 --> 01:26:06.650
<v Speaker 1>instead of instead

01:26:06.969 --> 01:26:08.329
<v Speaker 1>of cube control

01:26:08.890 --> 01:26:11.050
<v Speaker 1>dot s h, you run apply dot s

01:26:11.050 --> 01:26:11.610
<v Speaker 1>h.

01:26:13.770 --> 01:26:14.489
<v Speaker 0>Yeah.

01:26:17.915 --> 01:26:19.995
<v Speaker 1>And the here, we actually see if if

01:26:19.995 --> 01:26:21.835
<v Speaker 1>they we've generated

01:26:21.835 --> 01:26:23.915
<v Speaker 1>a rubbish or or if they actually yeah.

01:26:23.915 --> 01:26:26.075
<v Speaker 1>Here we go. Yeah. Our secret. Okay.

01:26:26.075 --> 01:26:28.395
<v Speaker 1>No. I see. It's a secret. Yeah. Exactly.

01:26:28.760 --> 01:26:30.360
<v Speaker 1>And the vertical

01:26:30.440 --> 01:26:32.600
<v Speaker 1>pod autoscaler, I think it's a different version

01:26:32.600 --> 01:26:33.400
<v Speaker 1>just to

01:26:34.440 --> 01:26:36.520
<v Speaker 1>need to update that. I

01:26:37.320 --> 01:26:38.840
<v Speaker 1>think you already I don't know what that

01:26:38.840 --> 01:26:40.920
<v Speaker 1>question we had earlier. Exactly.

01:26:40.920 --> 01:26:42.120
<v Speaker 1>Yeah. I was just

01:26:42.440 --> 01:26:45.465
<v Speaker 1>going to reply to. It's very relevant to

01:26:45.465 --> 01:26:46.744
<v Speaker 1>that comment.

01:26:48.344 --> 01:26:50.665
<v Speaker 1>But, basically, the the point is here, if

01:26:50.665 --> 01:26:52.344
<v Speaker 1>we just take away the the good part

01:26:52.344 --> 01:26:54.104
<v Speaker 1>of it, not the fact that it crashed,

01:26:54.745 --> 01:26:55.465
<v Speaker 1>is that

01:26:55.705 --> 01:26:58.585
<v Speaker 1>it enables you to create scripts that are

01:26:58.585 --> 01:26:59.065
<v Speaker 1>already

01:26:59.450 --> 01:27:01.770
<v Speaker 1>configured to operate with a specific

01:27:02.570 --> 01:27:03.449
<v Speaker 1>deployment.

01:27:03.610 --> 01:27:06.090
<v Speaker 1>So it doesn't matter on which context your

01:27:06.090 --> 01:27:09.050
<v Speaker 1>machine is is funding at. You can you

01:27:09.050 --> 01:27:12.330
<v Speaker 1>know that you can run get pods under

01:27:11.665 --> 01:27:13.905
<v Speaker 1>using the script to to point to exactly

01:27:13.905 --> 01:27:15.745
<v Speaker 1>the version that you're you're

01:27:17.025 --> 01:27:17.905
<v Speaker 1>you want to have

01:27:19.344 --> 01:27:21.025
<v Speaker 1>you want to be working with.

01:27:21.264 --> 01:27:22.864
<v Speaker 1>So the same thing is that if you

01:27:22.864 --> 01:27:24.545
<v Speaker 1>now go compiled

01:27:25.105 --> 01:27:25.665
<v Speaker 1>tutorial

01:27:26.890 --> 01:27:27.770
<v Speaker 1>scripts

01:27:28.490 --> 01:27:29.369
<v Speaker 1>apply

01:27:30.410 --> 01:27:33.130
<v Speaker 1>right away so we we try this and

01:27:33.130 --> 01:27:35.690
<v Speaker 1>probably we fail for the same reason, but

01:27:35.770 --> 01:27:37.210
<v Speaker 1>it basically will

01:27:37.610 --> 01:27:39.610
<v Speaker 1>recreate the context

01:27:39.505 --> 01:27:41.345
<v Speaker 1>and and deploy these

01:27:41.425 --> 01:27:42.305
<v Speaker 1>values

01:27:42.705 --> 01:27:44.785
<v Speaker 1>without you having to do anything with it.

01:27:45.185 --> 01:27:46.305
<v Speaker 1>If you do yeah.

01:27:47.265 --> 01:27:49.025
<v Speaker 2>So this this this is a very a

01:27:49.025 --> 01:27:52.385
<v Speaker 2>very powerful obstruction. I mean, for people who

01:27:52.385 --> 01:27:55.000
<v Speaker 2>work with Kubernetes every day, fine. It's perfectly

01:27:55.000 --> 01:27:56.840
<v Speaker 2>obvious. But we had,

01:27:57.239 --> 01:27:59.320
<v Speaker 2>you know, people who were not so familiar

01:27:59.320 --> 01:28:01.480
<v Speaker 2>with it, and they've got extremely confused with

01:28:01.480 --> 01:28:04.519
<v Speaker 2>the difference between namespaces and context and clusters.

01:28:04.600 --> 01:28:05.960
<v Speaker 2>So the idea is that we we can

01:28:05.960 --> 01:28:08.265
<v Speaker 2>actually template all of this in the script

01:28:08.265 --> 01:28:10.745
<v Speaker 2>that is runnable, and the script is basically

01:28:10.745 --> 01:28:11.945
<v Speaker 2>omnipresent.

01:28:11.945 --> 01:28:13.625
<v Speaker 2>Right? If you run that, it just works

01:28:13.625 --> 01:28:15.864
<v Speaker 2>for that particular setting. It doesn't work for

01:28:15.864 --> 01:28:17.785
<v Speaker 2>anything else. So you you basically end up

01:28:17.785 --> 01:28:18.425
<v Speaker 2>running

01:28:18.825 --> 01:28:21.320
<v Speaker 2>the scripts for the target you I think

01:28:21.320 --> 01:28:22.039
<v Speaker 1>you're

01:28:23.559 --> 01:28:25.159
<v Speaker 1>think you're breaking up, Ricardo. Don't know if

01:28:25.159 --> 01:28:27.480
<v Speaker 1>it's just me. No. Was okay on my

01:28:27.480 --> 01:28:28.359
<v Speaker 0>side, I think.

01:28:28.920 --> 01:28:30.519
<v Speaker 1>Okay. So it's it's just me then.

01:28:33.165 --> 01:28:34.765
<v Speaker 1>I I know about all that stuff, so

01:28:34.765 --> 01:28:35.485
<v Speaker 1>it's fine.

01:28:37.325 --> 01:28:39.965
<v Speaker 0>Alright. Excellent. Yep.

01:28:40.045 --> 01:28:42.205
<v Speaker 0>Do want to show anything else? Last chance.

01:28:43.325 --> 01:28:46.125
<v Speaker 2>Good. I think the only other other example

01:28:46.125 --> 01:28:47.885
<v Speaker 1>that I would like to show is

01:28:48.450 --> 01:28:50.370
<v Speaker 1>if you look at so you open briefly

01:28:50.370 --> 01:28:51.010
<v Speaker 1>the

01:28:52.370 --> 01:28:53.650
<v Speaker 1>we works

01:28:54.450 --> 01:28:55.410
<v Speaker 1>class.

01:28:56.050 --> 01:28:59.410
<v Speaker 0>Uh-huh. Yep. So if you go inventory

01:28:59.970 --> 01:29:00.450
<v Speaker 1>classes.

01:29:02.335 --> 01:29:03.375
<v Speaker 0>It was there.

01:29:04.095 --> 01:29:05.775
<v Speaker 1>I have the feeling I have a

01:29:06.255 --> 01:29:07.455
<v Speaker 1>yeah. Inventory,

01:29:08.095 --> 01:29:08.975
<v Speaker 1>classes.

01:29:08.975 --> 01:29:09.695
<v Speaker 1>Yeah.

01:29:11.215 --> 01:29:12.335
<v Speaker 1>Ah, there we go.

01:29:13.455 --> 01:29:14.335
<v Speaker 1>Components.

01:29:14.495 --> 01:29:15.775
<v Speaker 1>Yeah. Workshop.

01:29:15.855 --> 01:29:16.335
<v Speaker 1>So now

01:29:18.340 --> 01:29:20.900
<v Speaker 1>here here, basically, I have replicated

01:29:20.900 --> 01:29:22.820
<v Speaker 1>all the configuration

01:29:22.820 --> 01:29:24.260
<v Speaker 1>for the WeWorks

01:29:24.260 --> 01:29:26.420
<v Speaker 1>soft shop example that they have on on

01:29:26.420 --> 01:29:27.220
<v Speaker 1>the repo.

01:29:27.940 --> 01:29:30.100
<v Speaker 1>I was looking for something with enough kind

01:29:30.100 --> 01:29:30.660
<v Speaker 1>of

01:29:31.295 --> 01:29:33.375
<v Speaker 1>a complicated kind of setup just to to

01:29:33.375 --> 01:29:35.534
<v Speaker 1>prove the point that manifests work nicely. If

01:29:35.534 --> 01:29:37.455
<v Speaker 1>you open any of these files, you can

01:29:37.455 --> 01:29:40.094
<v Speaker 1>pretty much see the configuration of how to

01:29:40.094 --> 01:29:42.255
<v Speaker 1>recreate that kind of a specific

01:29:42.655 --> 01:29:43.135
<v Speaker 1>component.

01:29:44.560 --> 01:29:45.280
<v Speaker 1>The

01:29:46.000 --> 01:29:48.080
<v Speaker 1>information the bit I wanted to

01:29:48.480 --> 01:29:51.120
<v Speaker 1>talk about is this application sock shop that

01:29:53.280 --> 01:29:55.120
<v Speaker 1>is a way to basically

01:29:55.760 --> 01:29:57.040
<v Speaker 1>define a common

01:29:57.695 --> 01:29:59.535
<v Speaker 1>variables that you want to apply to all

01:29:59.535 --> 01:30:01.695
<v Speaker 1>these components at once. So now if you

01:30:01.695 --> 01:30:03.295
<v Speaker 1>go in the inventory

01:30:03.615 --> 01:30:04.574
<v Speaker 1>inventory

01:30:04.975 --> 01:30:08.255
<v Speaker 1>classes, applications shop that you see right there

01:30:10.900 --> 01:30:13.139
<v Speaker 0>Sorry. Application stock shop. Yep.

01:30:13.619 --> 01:30:16.099
<v Speaker 1>Yep. That that's the one. Yep. So

01:30:16.659 --> 01:30:18.980
<v Speaker 1>you can see that from this kind of

01:30:18.980 --> 01:30:21.539
<v Speaker 1>application, we've obviously called in all the different

01:30:21.539 --> 01:30:22.260
<v Speaker 1>components,

01:30:22.340 --> 01:30:24.900
<v Speaker 1>but we also some define some default

01:30:24.900 --> 01:30:27.355
<v Speaker 1>behavior at the end. If you go scroll

01:30:27.355 --> 01:30:29.514
<v Speaker 1>to the bottom. So we define some

01:30:29.755 --> 01:30:30.795
<v Speaker 1>defaults

01:30:30.795 --> 01:30:32.554
<v Speaker 1>that we want to apply to all those

01:30:32.554 --> 01:30:34.955
<v Speaker 1>components that match the same application class at

01:30:34.955 --> 01:30:37.994
<v Speaker 1>once, which is yet another way to define

01:30:37.994 --> 01:30:39.915
<v Speaker 1>kind of a a characteristic

01:30:39.915 --> 01:30:41.940
<v Speaker 1>that you want to to be applied to

01:30:41.940 --> 01:30:44.739
<v Speaker 1>all your components at once that you're generating.

01:30:45.060 --> 01:30:47.460
<v Speaker 1>So in the case that you went before

01:30:47.460 --> 01:30:48.980
<v Speaker 1>for changing

01:30:48.980 --> 01:30:50.020
<v Speaker 1>the time out,

01:30:50.340 --> 01:30:52.580
<v Speaker 1>if you change the time out with this

01:30:52.580 --> 01:30:53.220
<v Speaker 1>kind of a

01:30:53.860 --> 01:30:55.860
<v Speaker 1>if you basically make your comp all your

01:30:55.860 --> 01:30:56.500
<v Speaker 1>component

01:30:56.675 --> 01:30:58.355
<v Speaker 1>belongs to an application

01:30:58.515 --> 01:31:01.555
<v Speaker 1>or even if you just change the generator

01:31:01.715 --> 01:31:02.595
<v Speaker 1>default

01:31:02.915 --> 01:31:04.275
<v Speaker 1>time out version,

01:31:04.435 --> 01:31:06.115
<v Speaker 1>you can then apply that time out to

01:31:06.115 --> 01:31:08.595
<v Speaker 1>all your components at once without having to

01:31:08.595 --> 01:31:11.795
<v Speaker 1>go through echo server, MySQL, NGINX, and so

01:31:11.795 --> 01:31:14.829
<v Speaker 1>on. So I think that's another important aspect.

01:31:14.989 --> 01:31:17.230
<v Speaker 1>The fact that the generator has different level

01:31:17.230 --> 01:31:19.949
<v Speaker 1>of in of of kind of defaults,

01:31:19.949 --> 01:31:21.869
<v Speaker 1>you can override that as well.

01:31:24.030 --> 01:31:24.429
<v Speaker 0>Excellent.

01:31:26.284 --> 01:31:28.284
<v Speaker 0>Alright. And I think that's it for me.

01:31:28.605 --> 01:31:30.844
<v Speaker 0>Yeah. We we covered an awful lot actually

01:31:30.844 --> 01:31:32.685
<v Speaker 0>there. I'm really happy with how much we've

01:31:32.685 --> 01:31:34.685
<v Speaker 0>gotten through there, and we never broke up

01:31:34.844 --> 01:31:37.485
<v Speaker 0>never broke a single compile. So that was

01:31:37.804 --> 01:31:39.165
<v Speaker 0>pretty successful, I'll say.

01:31:40.940 --> 01:31:42.540
<v Speaker 0>I wanted to say thank you both for

01:31:42.540 --> 01:31:44.540
<v Speaker 0>you for joining me today. You know, I

01:31:44.540 --> 01:31:46.219
<v Speaker 0>think it was really good to go through

01:31:46.219 --> 01:31:48.460
<v Speaker 0>Kapitan from start to finish. You know, I

01:31:48.460 --> 01:31:50.380
<v Speaker 0>think we covered all of the major vocabulary

01:31:50.380 --> 01:31:52.060
<v Speaker 0>that people need to be familiar with. You

01:31:52.060 --> 01:31:53.820
<v Speaker 0>know, we broke down the generators and and

01:31:53.820 --> 01:31:55.500
<v Speaker 0>what they're useful for and how they work

01:31:55.575 --> 01:31:57.575
<v Speaker 0>and just really showed a really great way

01:31:57.575 --> 01:32:00.375
<v Speaker 0>for interacting and working with Kubernetes customers. So,

01:32:00.375 --> 01:32:02.215
<v Speaker 0>again, thank you both for joining me, and

01:32:02.215 --> 01:32:03.735
<v Speaker 0>that was really good fun.

01:32:05.255 --> 01:32:07.255
<v Speaker 0>Anything you want to say before we finish

01:32:07.255 --> 01:32:08.775
<v Speaker 0>up? I know that you want to encourage

01:32:08.775 --> 01:32:09.655
<v Speaker 0>contributions.

01:32:09.655 --> 01:32:12.590
<v Speaker 0>So, you know, the repository is at github.com

01:32:12.590 --> 01:32:14.510
<v Speaker 0>slash someone help me out there.

01:32:16.270 --> 01:32:17.710
<v Speaker 2>Yeah. Sure. So so

01:32:19.790 --> 01:32:22.429
<v Speaker 2>You, me? Me? You gotta find something. Maintain

01:32:22.430 --> 01:32:23.070
<v Speaker 1>it.

01:32:23.390 --> 01:32:23.550
<v Speaker 1>It.

01:32:24.685 --> 01:32:26.605
<v Speaker 0>Yeah. Good luck on it out there, Alessandro.

01:32:26.605 --> 01:32:27.885
<v Speaker 0>So I'll let Ricardo

01:32:27.965 --> 01:32:30.605
<v Speaker 0>give some details there. Yeah. Sure. So, yeah,

01:32:30.605 --> 01:32:32.525
<v Speaker 2>if you wanna contribute and you shared, there's

01:32:32.525 --> 01:32:33.645
<v Speaker 2>no reason why I shouldn't,

01:32:34.125 --> 01:32:36.285
<v Speaker 2>you can go to github.com/kapitan.

01:32:39.020 --> 01:32:41.099
<v Speaker 2>Kapitan with a k, just like Kapitan.

01:32:41.500 --> 01:32:43.500
<v Speaker 2>As many bugs, as many ideas. There's a

01:32:43.500 --> 01:32:45.580
<v Speaker 2>lot of people actually helping out in this

01:32:45.580 --> 01:32:46.780
<v Speaker 2>really fun community.

01:32:47.020 --> 01:32:49.820
<v Speaker 2>We're also on Slack, the Kubernetes Slack under,

01:32:50.699 --> 01:32:51.580
<v Speaker 2>hashtag Kapitan.

01:32:52.385 --> 01:32:53.905
<v Speaker 0>Oh, crap. I don't think I'm in there.

01:32:53.905 --> 01:32:55.264
<v Speaker 0>I'm gonna have to get in there. Alright.

01:32:55.745 --> 01:32:57.985
<v Speaker 0>Mhmm. Alright. Again, thank you very much. That

01:32:57.985 --> 01:33:00.225
<v Speaker 0>was that was great. Really great project. Everyone

01:33:00.225 --> 01:33:01.745
<v Speaker 0>should definitely check it out, I think, to

01:33:01.745 --> 01:33:03.824
<v Speaker 0>get a lot of value from adopting Kapitan.

01:33:04.065 --> 01:33:05.585
<v Speaker 0>Have a great day. I'll speak to you

01:33:05.585 --> 01:33:06.545
<v Speaker 0>both soon. Thank you.

01:33:07.410 --> 01:33:09.570
<v Speaker 1>Thanks. Thank you, David. Take care.
