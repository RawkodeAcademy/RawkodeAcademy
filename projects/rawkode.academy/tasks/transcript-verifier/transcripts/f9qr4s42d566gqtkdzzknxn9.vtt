WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: fd037add-f21f-45c7-92df-a34b4933bf94
Created: 2025-04-29T14:45:43.857Z
Duration: 1287.5159
Channels: 1

00:00:05.040 --> 00:00:07.600
<v Speaker 0>Hello, and welcome back to the Rawkode Academy.

00:00:07.600 --> 00:00:09.679
<v Speaker 0>I'm your host, David Flanagan. Although you may

00:00:09.679 --> 00:00:11.679
<v Speaker 0>know me, across the Internet is Rawkode.

00:00:12.875 --> 00:00:15.754
<v Speaker 0>Today is the third episode of our Portainer

00:00:15.754 --> 00:00:17.355
<v Speaker 0>in production series.

00:00:17.595 --> 00:00:19.515
<v Speaker 0>Before we begin, I'd like to say thank

00:00:19.515 --> 00:00:21.515
<v Speaker 0>you to the team at Portainer who sponsored

00:00:21.515 --> 00:00:23.755
<v Speaker 0>my time to put this course together. It's

00:00:23.755 --> 00:00:25.275
<v Speaker 0>been a whole lot of fun. I'm really

00:00:25.275 --> 00:00:27.835
<v Speaker 0>enjoying using Portainer, and you're gonna see why.

00:00:28.130 --> 00:00:28.929
<v Speaker 0>So

00:00:29.650 --> 00:00:31.890
<v Speaker 0>what is on the menu for today?

00:00:32.610 --> 00:00:35.170
<v Speaker 0>Well, I wanted to see if I could

00:00:35.170 --> 00:00:36.449
<v Speaker 0>choose Portainer

00:00:36.449 --> 00:00:38.050
<v Speaker 0>with Equinix Medal

00:00:38.370 --> 00:00:39.170
<v Speaker 0>together

00:00:39.329 --> 00:00:40.690
<v Speaker 0>to deliver an application

00:00:41.515 --> 00:00:42.875
<v Speaker 0>to my customers

00:00:43.274 --> 00:00:45.754
<v Speaker 0>with as low latency as possible.

00:00:47.195 --> 00:00:47.995
<v Speaker 0>Now

00:00:48.235 --> 00:00:50.395
<v Speaker 0>I can do this with Equinix Medal

00:00:50.555 --> 00:00:51.515
<v Speaker 0>by using

00:00:52.395 --> 00:00:53.995
<v Speaker 0>global Anycast

00:00:54.074 --> 00:00:55.835
<v Speaker 0>BGP advertising

00:00:56.670 --> 00:00:59.470
<v Speaker 0>to route traffic to any region they support.

00:01:00.670 --> 00:01:02.750
<v Speaker 0>But it comes with a maintenance overhead.

00:01:02.750 --> 00:01:05.150
<v Speaker 0>I then need to manage bare metal in

00:01:05.150 --> 00:01:07.470
<v Speaker 0>Asia, The US, and Europe

00:01:07.870 --> 00:01:08.670
<v Speaker 0>continuously.

00:01:09.325 --> 00:01:11.965
<v Speaker 0>I need to update my applications. I need

00:01:11.965 --> 00:01:15.085
<v Speaker 0>to use something like SaltStack or Ansible to

00:01:15.085 --> 00:01:16.925
<v Speaker 0>push out updates to all of them at

00:01:16.925 --> 00:01:17.805
<v Speaker 0>the same time.

00:01:18.205 --> 00:01:20.365
<v Speaker 0>It's cumbersome. And in fact, this is why

00:01:20.365 --> 00:01:23.165
<v Speaker 0>we fall back to tools like Docker Swarm,

00:01:23.165 --> 00:01:24.285
<v Speaker 0>Nomad, and Kubernetes.

00:01:25.110 --> 00:01:25.910
<v Speaker 0>However,

00:01:26.470 --> 00:01:28.870
<v Speaker 0>those all bring a level of complexity as

00:01:28.870 --> 00:01:29.350
<v Speaker 0>well.

00:01:29.990 --> 00:01:31.830
<v Speaker 0>And I love Kubernetes.

00:01:31.830 --> 00:01:34.070
<v Speaker 0>I talk about Kubernetes all the time. However,

00:01:34.470 --> 00:01:35.750
<v Speaker 0>it's a pain in the ass when you

00:01:35.750 --> 00:01:37.510
<v Speaker 0>have to distribute it and scale it globally.

00:01:38.185 --> 00:01:41.465
<v Speaker 0>Kubernetes using etcd is a very chatty system,

00:01:41.465 --> 00:01:43.865
<v Speaker 0>and in fact, it's often encouraged and recommended

00:01:43.865 --> 00:01:46.585
<v Speaker 0>never to scale your Kubernetes cluster beyond a

00:01:46.585 --> 00:01:47.545
<v Speaker 0>single region.

00:01:48.105 --> 00:01:49.945
<v Speaker 0>So if I want to deploy an application

00:01:49.945 --> 00:01:51.145
<v Speaker 0>to my customers

00:01:51.705 --> 00:01:54.530
<v Speaker 0>all around the world with low latency,

00:01:54.610 --> 00:01:55.570
<v Speaker 0>Kubernetes

00:01:55.570 --> 00:01:57.010
<v Speaker 0>is not a good fit.

00:01:57.650 --> 00:02:00.370
<v Speaker 0>Now if I were doing microservices with thousands

00:02:00.370 --> 00:02:02.370
<v Speaker 0>of services, I'd maybe find a way to

00:02:02.370 --> 00:02:04.930
<v Speaker 0>make it work, but I'm not. I'm scaling

00:02:04.930 --> 00:02:06.049
<v Speaker 0>a few containers.

00:02:06.930 --> 00:02:07.570
<v Speaker 0>So

00:02:08.435 --> 00:02:10.754
<v Speaker 0>let's move all of this to a platform

00:02:10.754 --> 00:02:11.555
<v Speaker 0>designed

00:02:11.555 --> 00:02:12.995
<v Speaker 0>to do this properly,

00:02:13.075 --> 00:02:14.355
<v Speaker 0>and that is Portainer.

00:02:14.995 --> 00:02:17.875
<v Speaker 0>I'm gonna show you how to run Portainer

00:02:17.875 --> 00:02:20.595
<v Speaker 0>in an edge environment. Now I'm only using

00:02:20.595 --> 00:02:23.635
<v Speaker 0>three nodes around the world. However, Portainer scales

00:02:23.635 --> 00:02:26.650
<v Speaker 0>that has been tested to over 15,000

00:02:26.650 --> 00:02:27.770
<v Speaker 0>edge connections.

00:02:28.330 --> 00:02:29.850
<v Speaker 0>So it doesn't matter if you've got my

00:02:29.850 --> 00:02:33.130
<v Speaker 0>scale for a few people or your scale

00:02:33.290 --> 00:02:34.410
<v Speaker 0>for a few million.

00:02:35.610 --> 00:02:37.290
<v Speaker 0>So let's take a look at the code

00:02:37.290 --> 00:02:39.564
<v Speaker 0>to spin up and manage Portainer in an

00:02:39.564 --> 00:02:41.965
<v Speaker 0>edge environment all around the world on Equinix

00:02:41.965 --> 00:02:45.165
<v Speaker 0>Metal with any cast written using BGP.

00:02:45.484 --> 00:02:47.564
<v Speaker 0>This demo was super fun for me. I

00:02:47.564 --> 00:02:49.645
<v Speaker 0>hope you enjoy it. Let's dive right in.

00:02:49.805 --> 00:02:51.245
<v Speaker 0>Alright. So today,

00:02:52.530 --> 00:02:55.250
<v Speaker 0>everything that I'm going to show you is

00:02:55.250 --> 00:02:58.610
<v Speaker 0>available on the Portainer in production repository.

00:02:58.610 --> 00:03:01.410
<v Speaker 0>The link is in the description below.

00:03:01.810 --> 00:03:03.970
<v Speaker 0>We are using Terraform CDK

00:03:03.970 --> 00:03:06.290
<v Speaker 0>to automate the provisioning of four bare metal

00:03:06.290 --> 00:03:06.690
<v Speaker 0>devices.

00:03:07.515 --> 00:03:09.595
<v Speaker 0>One, Portainer admin node,

00:03:09.754 --> 00:03:11.435
<v Speaker 0>which will act as the central point for

00:03:11.435 --> 00:03:14.155
<v Speaker 0>distributing commands down to our edge agents,

00:03:14.474 --> 00:03:17.194
<v Speaker 0>and three edge agents, three bare metal devices

00:03:17.194 --> 00:03:20.155
<v Speaker 0>distributed around the world, all sharing one common

00:03:20.155 --> 00:03:21.995
<v Speaker 0>Anycast BGP advertisement.

00:03:23.500 --> 00:03:25.820
<v Speaker 0>This will allow us to request a simple

00:03:25.820 --> 00:03:27.260
<v Speaker 0>NGINX container

00:03:27.420 --> 00:03:30.300
<v Speaker 0>from anywhere in the world and see very

00:03:30.300 --> 00:03:32.220
<v Speaker 0>low latency response time.

00:03:32.460 --> 00:03:33.820
<v Speaker 0>Now I'm gonna spin this up in a

00:03:33.820 --> 00:03:35.740
<v Speaker 0>way that we see it with two edge

00:03:35.740 --> 00:03:38.425
<v Speaker 0>agents, one in The US and one in

00:03:38.425 --> 00:03:39.065
<v Speaker 0>Europe.

00:03:39.865 --> 00:03:42.345
<v Speaker 0>We'll see that the response time from Asia

00:03:42.345 --> 00:03:43.465
<v Speaker 0>and Australia

00:03:43.545 --> 00:03:44.745
<v Speaker 0>is pretty poor.

00:03:45.225 --> 00:03:47.705
<v Speaker 0>We're gonna bring in a third node,

00:03:48.025 --> 00:03:49.830
<v Speaker 0>and we're not gonna install anything to it.

00:03:49.830 --> 00:03:52.230
<v Speaker 0>We're gonna let Portainer do what Portainer does

00:03:52.230 --> 00:03:54.390
<v Speaker 0>best, which is manage all of these edge

00:03:54.390 --> 00:03:57.430
<v Speaker 0>devices for us using edge stacks. We'll then

00:03:57.430 --> 00:03:59.110
<v Speaker 0>rerun our tests, and we'll see that we've

00:03:59.110 --> 00:04:02.310
<v Speaker 0>substantially improved the latency to our customers in

00:04:02.310 --> 00:04:05.215
<v Speaker 0>that region. And that is the goal. Right?

00:04:05.215 --> 00:04:07.775
<v Speaker 0>We wanna be able to have ephemeral

00:04:07.775 --> 00:04:10.095
<v Speaker 0>automated compute infrastructure

00:04:10.495 --> 00:04:13.535
<v Speaker 0>handled for us with all our applications deployed

00:04:13.535 --> 00:04:16.415
<v Speaker 0>via Portainer with no manual intervention.

00:04:18.310 --> 00:04:20.630
<v Speaker 0>So let's take a look at the Terraform

00:04:20.630 --> 00:04:21.510
<v Speaker 0>CDK.

00:04:23.350 --> 00:04:25.030
<v Speaker 0>Now, we are gonna do this in a

00:04:25.030 --> 00:04:27.510
<v Speaker 0>two phase deploy. One to deploy the admin

00:04:27.510 --> 00:04:30.790
<v Speaker 0>node to get the token that we need,

00:04:30.790 --> 00:04:32.070
<v Speaker 0>which is the edge key here,

00:04:32.875 --> 00:04:35.115
<v Speaker 0>to then do the second part of our

00:04:35.115 --> 00:04:37.355
<v Speaker 0>deployment with the edge agents.

00:04:37.835 --> 00:04:41.035
<v Speaker 0>Now we've got the Portainer admin Terraform stack,

00:04:42.075 --> 00:04:44.475
<v Speaker 0>which uses Cloud init, and I'll show you

00:04:44.475 --> 00:04:46.235
<v Speaker 0>the scripts to do the provisioning in just

00:04:46.235 --> 00:04:46.555
<v Speaker 0>a moment.

00:04:47.810 --> 00:04:50.290
<v Speaker 0>To handle deploying Portainer as an admin node

00:04:50.290 --> 00:04:51.410
<v Speaker 0>and as an agent.

00:04:51.730 --> 00:04:53.410
<v Speaker 0>And then we have the Equinix provider so

00:04:53.410 --> 00:04:55.650
<v Speaker 0>that we can provision some bare metal devices

00:04:55.650 --> 00:04:57.570
<v Speaker 0>with a BGP advertisement.

00:04:58.450 --> 00:05:01.730
<v Speaker 0>We reserve a global IPv four address on

00:05:01.730 --> 00:05:04.505
<v Speaker 0>the Equinix metal network. We build our cloud

00:05:04.505 --> 00:05:05.865
<v Speaker 0>and a configuration,

00:05:06.345 --> 00:05:08.185
<v Speaker 0>and we deploy the device.

00:05:08.825 --> 00:05:11.225
<v Speaker 0>Now I am enabling a BGP session on

00:05:11.225 --> 00:05:13.625
<v Speaker 0>the admin node. We could in theory

00:05:13.865 --> 00:05:16.265
<v Speaker 0>double down and use that as a edge

00:05:16.265 --> 00:05:19.170
<v Speaker 0>compute node if we wanted. However, for today,

00:05:19.170 --> 00:05:20.450
<v Speaker 0>I'm not really doing that.

00:05:22.050 --> 00:05:25.010
<v Speaker 0>We use Terraform outputs to publish the admin

00:05:25.010 --> 00:05:26.450
<v Speaker 0>IP, so that we can get to the

00:05:26.450 --> 00:05:29.330
<v Speaker 0>web interface and the BGP IP, so that

00:05:29.330 --> 00:05:32.290
<v Speaker 0>we can request traffic or we can request

00:05:31.965 --> 00:05:33.805
<v Speaker 0>the NGINX application.

00:05:35.245 --> 00:05:38.365
<v Speaker 0>Next, we define the Portainer at the Edge

00:05:38.365 --> 00:05:39.085
<v Speaker 0>stack.

00:05:39.324 --> 00:05:41.485
<v Speaker 0>Now this also uses Cloud in it and

00:05:41.485 --> 00:05:43.485
<v Speaker 0>Equinix just like we do above.

00:05:43.725 --> 00:05:46.125
<v Speaker 0>The user data that we're generating Web Cloud

00:05:46.125 --> 00:05:48.445
<v Speaker 0>in it is just a little bit different

00:05:47.940 --> 00:05:50.260
<v Speaker 0>and that we are setting up BGP and

00:05:50.260 --> 00:05:54.580
<v Speaker 0>our Portainer agent instead of the Portainer installation

00:05:54.580 --> 00:05:55.300
<v Speaker 0>script.

00:05:55.620 --> 00:05:56.660
<v Speaker 0>Like so.

00:05:58.340 --> 00:06:01.300
<v Speaker 0>Then we provision the device. This time, we

00:06:01.300 --> 00:06:03.300
<v Speaker 0>are passing in the edge key and the

00:06:03.300 --> 00:06:04.500
<v Speaker 0>global BGP

00:06:05.005 --> 00:06:07.085
<v Speaker 0>IP address as custom data so that we

00:06:07.085 --> 00:06:09.165
<v Speaker 0>can fetch that back down from a user

00:06:09.165 --> 00:06:10.125
<v Speaker 0>data script.

00:06:10.445 --> 00:06:12.685
<v Speaker 0>And then we output the worker IP,

00:06:12.845 --> 00:06:15.085
<v Speaker 0>and we also configure the BGP session.

00:06:15.645 --> 00:06:18.350
<v Speaker 0>So this is not terribly complicated. It's just

00:06:18.350 --> 00:06:21.230
<v Speaker 0>a hundred and so lines of Terraform CDK.

00:06:21.870 --> 00:06:23.630
<v Speaker 0>You can pull this, you can run it

00:06:23.630 --> 00:06:26.510
<v Speaker 0>yourself, it should just work TM.

00:06:27.710 --> 00:06:30.030
<v Speaker 0>Now down here, we have defined our stacks

00:06:30.030 --> 00:06:31.950
<v Speaker 0>in Terraform CDK, but we actually need to

00:06:31.950 --> 00:06:33.390
<v Speaker 0>tell it what to synthesize and what to

00:06:33.390 --> 00:06:35.445
<v Speaker 0>run. So we generate the application.

00:06:35.605 --> 00:06:37.125
<v Speaker 0>We create the admin stack.

00:06:37.365 --> 00:06:39.525
<v Speaker 0>We can now have this new container at

00:06:39.525 --> 00:06:42.165
<v Speaker 0>the edge stack. We can actually duplicate this

00:06:42.245 --> 00:06:45.045
<v Speaker 0>as many times as we want to any

00:06:45.045 --> 00:06:47.845
<v Speaker 0>facility within or any metro or facility within

00:06:47.845 --> 00:06:48.725
<v Speaker 0>the network,

00:06:49.340 --> 00:06:52.220
<v Speaker 0>and it continues to scale out geographically as

00:06:52.220 --> 00:06:55.020
<v Speaker 0>much as we want. Perhaps we want more

00:06:55.020 --> 00:06:56.700
<v Speaker 0>infrastructure on the East Coast and the West

00:06:56.700 --> 00:06:58.700
<v Speaker 0>Coast Of The US. Perhaps we want infrastructure

00:06:58.700 --> 00:07:00.860
<v Speaker 0>in Central Europe, Western Europe, and how to

00:07:00.860 --> 00:07:03.525
<v Speaker 0>infrastructure distributed across Asia. That is up to

00:07:03.525 --> 00:07:05.685
<v Speaker 0>you. You know your customers,

00:07:06.164 --> 00:07:08.324
<v Speaker 0>and once you have the stack run up,

00:07:08.324 --> 00:07:11.044
<v Speaker 0>Portainer does all the heavy lifting. All you

00:07:11.044 --> 00:07:12.725
<v Speaker 0>need to do is spin up new nodes,

00:07:12.725 --> 00:07:15.125
<v Speaker 0>join a Portainer cluster, and you're you're golden.

00:07:17.680 --> 00:07:19.919
<v Speaker 0>And then we synthesize and we run it.

00:07:20.479 --> 00:07:22.639
<v Speaker 0>So we have no edge key here, so

00:07:22.639 --> 00:07:24.159
<v Speaker 0>I'm gonna walk you through the process of

00:07:24.159 --> 00:07:26.720
<v Speaker 0>spinning up the Portainer admin stack,

00:07:26.960 --> 00:07:30.065
<v Speaker 0>turning on edge compute, getting that key, and

00:07:30.065 --> 00:07:32.305
<v Speaker 0>then we'll take a look at the edge

00:07:32.305 --> 00:07:33.825
<v Speaker 0>deployment mechanism.

00:07:35.025 --> 00:07:36.225
<v Speaker 0>So first step,

00:07:36.865 --> 00:07:38.544
<v Speaker 0>as you'll see, I've already ran these commands

00:07:38.544 --> 00:07:40.465
<v Speaker 0>a few times, is to do a CDK

00:07:40.465 --> 00:07:42.065
<v Speaker 0>t f deploy

00:07:42.065 --> 00:07:42.385
<v Speaker 0>admin.

00:07:43.200 --> 00:07:45.280
<v Speaker 0>This will set up everything that we need

00:07:45.280 --> 00:07:48.240
<v Speaker 0>to get the edge key available for the

00:07:48.240 --> 00:07:49.600
<v Speaker 0>edge compute

00:07:49.600 --> 00:07:50.560
<v Speaker 0>deployment.

00:07:51.440 --> 00:07:53.120
<v Speaker 0>Now this is bare metal. It is not

00:07:53.120 --> 00:07:55.600
<v Speaker 0>a virtual machine on any of the hyperscalers,

00:07:55.925 --> 00:07:58.005
<v Speaker 0>So we're not gonna see this return in

00:07:58.005 --> 00:08:00.325
<v Speaker 0>ten seconds, thirty seconds, or even a minute.

00:08:00.325 --> 00:08:02.165
<v Speaker 0>It's gonna be closer to one to two

00:08:02.165 --> 00:08:02.805
<v Speaker 0>minutes.

00:08:03.125 --> 00:08:05.205
<v Speaker 0>So I'm gonna go poof,

00:08:05.445 --> 00:08:07.525
<v Speaker 0>now back in a second. Sweet.

00:08:07.605 --> 00:08:10.210
<v Speaker 0>We have our admin stack deployed. We have

00:08:10.210 --> 00:08:12.850
<v Speaker 0>our BGP address, which won't be resolving any

00:08:12.850 --> 00:08:14.690
<v Speaker 0>traffic at the moment. And we have our

00:08:14.690 --> 00:08:17.090
<v Speaker 0>admin IP, which will allow us to set

00:08:17.090 --> 00:08:19.010
<v Speaker 0>up our Portainer instance.

00:08:19.490 --> 00:08:21.410
<v Speaker 0>Let's copy our admin IP

00:08:24.225 --> 00:08:26.225
<v Speaker 0>and pop it open in our browser.

00:08:26.945 --> 00:08:29.505
<v Speaker 0>We will be presented with the Portainer setup

00:08:29.505 --> 00:08:30.225
<v Speaker 0>screen.

00:08:30.305 --> 00:08:32.385
<v Speaker 0>We've seen this before, so I'm not gonna

00:08:32.385 --> 00:08:34.065
<v Speaker 0>spend any time on it just now.

00:08:39.759 --> 00:08:42.159
<v Speaker 0>Provide my password. I hit go.

00:08:44.319 --> 00:08:46.319
<v Speaker 0>And I'm going to provide my license key.

00:08:46.319 --> 00:08:47.199
<v Speaker 0>Remember,

00:08:47.600 --> 00:08:49.920
<v Speaker 0>the business edition of Portainer is free for

00:08:49.920 --> 00:08:50.800
<v Speaker 0>up to five nodes.

00:08:51.345 --> 00:08:53.105
<v Speaker 0>So if you're a small scale deployment like

00:08:53.105 --> 00:08:56.225
<v Speaker 0>me, take advantage of that. Sign up now.

00:08:56.464 --> 00:08:57.185
<v Speaker 0>Okay.

00:08:57.665 --> 00:08:59.985
<v Speaker 0>Now that we have Portainer admin node running,

00:09:00.064 --> 00:09:01.345
<v Speaker 0>the first thing we wanna do is go

00:09:01.345 --> 00:09:02.144
<v Speaker 0>to settings.

00:09:02.464 --> 00:09:04.865
<v Speaker 0>From here, we can click on edge compute

00:09:05.500 --> 00:09:08.779
<v Speaker 0>where we turn on the edge compute features

00:09:08.940 --> 00:09:10.220
<v Speaker 0>and click save.

00:09:14.459 --> 00:09:16.139
<v Speaker 0>We then want to scroll down to the

00:09:16.139 --> 00:09:18.459
<v Speaker 0>automatic edge environment creation.

00:09:19.725 --> 00:09:21.725
<v Speaker 0>You will see your admin IP address and

00:09:21.725 --> 00:09:24.204
<v Speaker 0>port number here. You can disable the waiting

00:09:24.204 --> 00:09:25.885
<v Speaker 0>room if you want. However, we're going to

00:09:25.885 --> 00:09:27.565
<v Speaker 0>leave that on so you can see how

00:09:27.565 --> 00:09:29.404
<v Speaker 0>it works in this demo.

00:09:30.524 --> 00:09:33.644
<v Speaker 0>Now because I'm using my CDK

00:09:33.120 --> 00:09:35.600
<v Speaker 0>Terraform or Terraform CDK automation,

00:09:35.839 --> 00:09:38.240
<v Speaker 0>I don't need to worry about edge ID

00:09:38.400 --> 00:09:39.280
<v Speaker 0>generators

00:09:39.360 --> 00:09:43.360
<v Speaker 0>or dropping an environment variables into this script

00:09:43.360 --> 00:09:44.480
<v Speaker 0>here because

00:09:45.200 --> 00:09:47.404
<v Speaker 0>it's already done. So just go check out

00:09:47.404 --> 00:09:48.524
<v Speaker 0>that automation

00:09:48.524 --> 00:09:51.885
<v Speaker 0>and CloudEdit configuration scripts to see how I

00:09:51.885 --> 00:09:53.325
<v Speaker 0>generate those values.

00:09:54.285 --> 00:09:56.445
<v Speaker 0>The only thing I really want is this

00:09:56.445 --> 00:09:57.885
<v Speaker 0>edge key here.

00:09:58.365 --> 00:10:00.640
<v Speaker 0>So we're going to copy this and switch

00:10:00.640 --> 00:10:03.440
<v Speaker 0>back to Versus Code to drop it in,

00:10:03.760 --> 00:10:04.480
<v Speaker 0>like so.

00:10:05.440 --> 00:10:08.320
<v Speaker 0>From there, we can run a CDKTF

00:10:08.320 --> 00:10:09.360
<v Speaker 0>deploy,

00:10:10.320 --> 00:10:11.680
<v Speaker 0>and we're going to deploy

00:10:12.320 --> 00:10:13.600
<v Speaker 0>US and EU.

00:10:14.334 --> 00:10:16.895
<v Speaker 0>However, I also specify admin.

00:10:17.135 --> 00:10:19.375
<v Speaker 0>That's just because that The US and EU

00:10:19.375 --> 00:10:22.255
<v Speaker 0>stacks do have that dependency on the admin

00:10:22.255 --> 00:10:24.654
<v Speaker 0>stack, so it will force you to specify

00:10:24.654 --> 00:10:25.615
<v Speaker 0>all three.

00:10:26.654 --> 00:10:28.175
<v Speaker 0>We click the button,

00:10:28.575 --> 00:10:29.615
<v Speaker 0>we wait a few moments,

00:10:30.150 --> 00:10:32.390
<v Speaker 0>and we'll get an approval prompt for two

00:10:32.390 --> 00:10:33.910
<v Speaker 0>stacks to be deployed.

00:10:37.990 --> 00:10:40.310
<v Speaker 0>We had approved twice. Those devices are now

00:10:40.310 --> 00:10:42.710
<v Speaker 0>created on the Equinix middle platform, and I'll

00:10:42.710 --> 00:10:44.390
<v Speaker 0>be back in just a moment to show

00:10:44.390 --> 00:10:45.590
<v Speaker 0>you the next step.

00:10:46.545 --> 00:10:47.345
<v Speaker 0>Sweet.

00:10:47.585 --> 00:10:49.745
<v Speaker 0>We now have a worker IP in The

00:10:49.745 --> 00:10:50.465
<v Speaker 0>US

00:10:50.705 --> 00:10:53.425
<v Speaker 0>and a worker IP in The EU.

00:10:54.145 --> 00:10:56.225
<v Speaker 0>Now before I go to the browser and

00:10:56.225 --> 00:10:57.585
<v Speaker 0>show you the next step, I do wanna

00:10:57.585 --> 00:10:59.105
<v Speaker 0>push out one caveat.

00:10:59.750 --> 00:11:02.149
<v Speaker 0>If you're running the same automation and you

00:11:02.149 --> 00:11:04.310
<v Speaker 0>go to your browser, you may not see

00:11:04.310 --> 00:11:06.149
<v Speaker 0>the pending nodes right away.

00:11:06.630 --> 00:11:08.870
<v Speaker 0>The reason this is is that CDKFTF

00:11:08.870 --> 00:11:11.029
<v Speaker 0>is not waiting for the user data to

00:11:11.029 --> 00:11:11.670
<v Speaker 0>finish provisioning.

00:11:12.235 --> 00:11:14.395
<v Speaker 0>So while these bare metal devices are now

00:11:14.395 --> 00:11:16.395
<v Speaker 0>available and I have IP addresses,

00:11:16.715 --> 00:11:19.435
<v Speaker 0>the cloud in it process is probably still

00:11:19.435 --> 00:11:21.755
<v Speaker 0>running, and it can take anywhere from thirty

00:11:21.755 --> 00:11:23.515
<v Speaker 0>seconds up to a minute and a half

00:11:23.515 --> 00:11:24.475
<v Speaker 0>to complete.

00:11:24.955 --> 00:11:27.275
<v Speaker 0>That is because it's pulling down a Docker

00:11:27.275 --> 00:11:29.350
<v Speaker 0>image. It's then starting in the Docker image,

00:11:29.350 --> 00:11:31.190
<v Speaker 0>it has to register with the Portainer admin

00:11:31.190 --> 00:11:33.990
<v Speaker 0>instance blah blah blah blah blah. Now because

00:11:33.990 --> 00:11:35.590
<v Speaker 0>of the per video, when I go to

00:11:35.590 --> 00:11:37.830
<v Speaker 0>my browser, things are magically gonna be there.

00:11:37.830 --> 00:11:40.390
<v Speaker 0>Please just remember, it can take a few

00:11:40.390 --> 00:11:40.870
<v Speaker 0>more seconds.

00:11:41.755 --> 00:11:43.915
<v Speaker 0>And that being said, let's now go to

00:11:43.915 --> 00:11:46.475
<v Speaker 0>my Portainer admin instance. So we can click

00:11:46.475 --> 00:11:47.675
<v Speaker 0>on edge devices

00:11:49.035 --> 00:11:50.955
<v Speaker 0>and click on the waiting room.

00:11:52.235 --> 00:11:53.995
<v Speaker 0>And we'll see at the moment, I have

00:11:53.995 --> 00:11:55.595
<v Speaker 0>one of my devices waiting.

00:11:56.290 --> 00:11:58.850
<v Speaker 0>Hit refresh and by the power and magic

00:11:58.850 --> 00:12:01.650
<v Speaker 0>of video, now both are available. We can

00:12:01.650 --> 00:12:03.570
<v Speaker 0>now click on this and see that we're

00:12:03.570 --> 00:12:06.210
<v Speaker 0>happy to associate these devices with our Portainer

00:12:06.210 --> 00:12:06.690
<v Speaker 0>cluster.

00:12:08.205 --> 00:12:10.205
<v Speaker 0>Now where we click on edge devices,

00:12:10.445 --> 00:12:12.365
<v Speaker 0>we will see that we have Portainer at

00:12:12.365 --> 00:12:14.525
<v Speaker 0>the edge Frankfurt and Portainer at the edge

00:12:14.525 --> 00:12:17.245
<v Speaker 0>Dallas. This is our US and European

00:12:17.485 --> 00:12:18.285
<v Speaker 0>devices.

00:12:18.365 --> 00:12:20.525
<v Speaker 0>Now, Portainer has a cool feature where you

00:12:20.525 --> 00:12:21.565
<v Speaker 0>can enable groups.

00:12:22.840 --> 00:12:25.240
<v Speaker 0>This is not important for today's Edge stacks

00:12:25.240 --> 00:12:27.800
<v Speaker 0>demo. However, if you have more than one

00:12:27.800 --> 00:12:29.560
<v Speaker 0>administrator of your cluster,

00:12:29.880 --> 00:12:31.480
<v Speaker 0>you may be able to use groups to

00:12:31.480 --> 00:12:33.800
<v Speaker 0>be able to facilitate access to multiple edge

00:12:33.800 --> 00:12:34.920
<v Speaker 0>devices with ease.

00:12:35.785 --> 00:12:37.465
<v Speaker 0>To do so, I will create a group

00:12:37.465 --> 00:12:38.425
<v Speaker 0>called production,

00:12:38.985 --> 00:12:40.665
<v Speaker 0>and instead of saying this is static and

00:12:40.665 --> 00:12:42.905
<v Speaker 0>selecting the two machines, I'm gonna make this

00:12:42.905 --> 00:12:45.225
<v Speaker 0>dynamic, and I'm gonna base it on environment

00:12:45.225 --> 00:12:48.185
<v Speaker 0>variables. We can say environment production,

00:12:49.220 --> 00:12:51.220
<v Speaker 0>and we'll see that the two devices already

00:12:51.220 --> 00:12:54.019
<v Speaker 0>provisioned are now available to add to our

00:12:54.019 --> 00:12:54.899
<v Speaker 0>edge group.

00:12:55.300 --> 00:12:58.100
<v Speaker 0>Now, again, not important for the stacks demo,

00:12:58.100 --> 00:13:00.660
<v Speaker 0>but for managing access to more than one

00:13:00.660 --> 00:13:01.779
<v Speaker 0>edge device,

00:13:01.779 --> 00:13:03.220
<v Speaker 0>groups are super cool feature.

00:13:04.915 --> 00:13:07.555
<v Speaker 0>Next up, we're gonna add our edge stack.

00:13:07.954 --> 00:13:09.714
<v Speaker 0>So we go to edge stacks, we click

00:13:09.714 --> 00:13:10.355
<v Speaker 0>add,

00:13:10.675 --> 00:13:12.595
<v Speaker 0>and I'm gonna call this NGINX. We're gonna

00:13:12.595 --> 00:13:14.995
<v Speaker 0>use a very simple Docker compose file to

00:13:14.995 --> 00:13:17.235
<v Speaker 0>deploy NGINX to each of our edge location.

00:13:18.500 --> 00:13:21.300
<v Speaker 0>We then select the group of production

00:13:21.540 --> 00:13:24.260
<v Speaker 0>and the type of deployment will be composed.

00:13:25.860 --> 00:13:27.700
<v Speaker 0>Now if you go to the repository in

00:13:27.700 --> 00:13:29.940
<v Speaker 0>the description below, you will see that there

00:13:29.940 --> 00:13:31.380
<v Speaker 0>is a docker composed file.

00:13:33.215 --> 00:13:34.975
<v Speaker 0>You can copy this or type it. It's

00:13:34.975 --> 00:13:35.855
<v Speaker 0>very simple.

00:13:36.255 --> 00:13:38.895
<v Speaker 0>It's just going to deploy NGINX and expose

00:13:38.895 --> 00:13:41.135
<v Speaker 0>it on the host or node port of

00:13:41.135 --> 00:13:42.255
<v Speaker 0>8,080.

00:13:43.695 --> 00:13:44.815
<v Speaker 0>And then we say deploy.

00:13:46.170 --> 00:13:48.730
<v Speaker 0>You'll see here we have status indicators,

00:13:48.730 --> 00:13:52.090
<v Speaker 0>blue, green, and red. Let's turn on auto

00:13:52.090 --> 00:13:54.650
<v Speaker 0>refresh to ten seconds,

00:13:55.370 --> 00:13:58.170
<v Speaker 0>and you'll see now we have two successful

00:13:58.170 --> 00:13:58.810
<v Speaker 0>environments.

00:13:59.945 --> 00:14:03.065
<v Speaker 0>Blue for acknowledged and red for failed.

00:14:03.545 --> 00:14:04.985
<v Speaker 0>If we click on this

00:14:06.825 --> 00:14:08.265
<v Speaker 0>and then environments,

00:14:08.585 --> 00:14:10.905
<v Speaker 0>you'll see that this stack is successfully deployed

00:14:10.905 --> 00:14:13.225
<v Speaker 0>in both Dallas and Frankfurt.

00:14:15.600 --> 00:14:17.920
<v Speaker 0>Well, let's go back to our CDKTF

00:14:17.920 --> 00:14:19.440
<v Speaker 0>for just a moment.

00:14:20.000 --> 00:14:22.480
<v Speaker 0>We have this BGP advertisement

00:14:22.480 --> 00:14:23.200
<v Speaker 0>here.

00:14:25.040 --> 00:14:27.040
<v Speaker 0>So let's pop this open in our browser.

00:14:28.194 --> 00:14:30.514
<v Speaker 0>And if I browse to eighty eighty, we

00:14:30.514 --> 00:14:33.635
<v Speaker 0>are presented with the NGINX web page.

00:14:34.595 --> 00:14:37.394
<v Speaker 0>So let's check the performance of our application

00:14:37.394 --> 00:14:40.915
<v Speaker 0>using a nice web performance checker

00:14:40.800 --> 00:14:42.800
<v Speaker 0>from KeyCDN.

00:14:45.440 --> 00:14:49.680
<v Speaker 0>You can go to tools.KeyCDN.com/performance,

00:14:50.160 --> 00:14:51.600
<v Speaker 0>where you can drop in

00:14:51.760 --> 00:14:54.959
<v Speaker 0>your URL and port number and say test.

00:15:01.825 --> 00:15:03.345
<v Speaker 0>Now what we see here

00:15:03.585 --> 00:15:06.225
<v Speaker 0>is pretty standard for web applications,

00:15:07.345 --> 00:15:09.665
<v Speaker 0>especially deployed in this topology.

00:15:10.760 --> 00:15:13.880
<v Speaker 0>The latency for European and US websites is

00:15:13.880 --> 00:15:16.920
<v Speaker 0>pretty high in Asia and Australia.

00:15:17.480 --> 00:15:19.160
<v Speaker 0>You can see Frankfurt has

00:15:19.800 --> 00:15:22.760
<v Speaker 0>less than two milliseconds response time or at

00:15:22.760 --> 00:15:24.760
<v Speaker 0>least a connect time. We have less than

00:15:24.760 --> 00:15:27.605
<v Speaker 0>three milliseconds for time to first date.

00:15:27.925 --> 00:15:28.644
<v Speaker 0>This

00:15:28.884 --> 00:15:30.324
<v Speaker 0>is peak performance.

00:15:31.125 --> 00:15:33.285
<v Speaker 0>Now Amsterdam is gonna rise a little bit,

00:15:33.285 --> 00:15:35.045
<v Speaker 0>but you're still on the European continent and

00:15:35.045 --> 00:15:37.204
<v Speaker 0>the traffic is still pretty decent. And the

00:15:37.204 --> 00:15:38.165
<v Speaker 0>same for London.

00:15:39.530 --> 00:15:42.010
<v Speaker 0>Now New York being on the East Coast

00:15:42.010 --> 00:15:43.690
<v Speaker 0>is a little bit higher, but you can

00:15:43.690 --> 00:15:44.890
<v Speaker 0>see in Dallas,

00:15:45.050 --> 00:15:47.690
<v Speaker 0>at least where our infrastructure is actually hosted,

00:15:47.690 --> 00:15:50.410
<v Speaker 0>we've got less than four milliseconds on the

00:15:50.410 --> 00:15:52.970
<v Speaker 0>connect and five milliseconds on the time to

00:15:52.970 --> 00:15:53.450
<v Speaker 0>first pay.

00:15:55.155 --> 00:15:57.475
<v Speaker 0>Pop down to San Francisco, we've got the

00:15:57.475 --> 00:15:58.835
<v Speaker 0>West Coast. So if you're not sure where

00:15:58.835 --> 00:16:00.595
<v Speaker 0>Dallas is, it's in Texas. It's kinda right

00:16:00.595 --> 00:16:02.595
<v Speaker 0>in the middle. That's why both the coast

00:16:02.595 --> 00:16:03.795
<v Speaker 0>are a little bit slower.

00:16:04.355 --> 00:16:05.795
<v Speaker 0>Let's look at Singapore.

00:16:06.515 --> 00:16:09.235
<v Speaker 0>We're waiting over two hundred milliseconds

00:16:10.035 --> 00:16:10.915
<v Speaker 0>for the connect,

00:16:11.370 --> 00:16:13.530
<v Speaker 0>and we're waiting almost half a second for

00:16:13.530 --> 00:16:14.650
<v Speaker 0>time to first bite.

00:16:15.050 --> 00:16:16.010
<v Speaker 0>Sydney

00:16:16.010 --> 00:16:18.490
<v Speaker 0>is not much better. Two hundred milliseconds or

00:16:18.490 --> 00:16:20.010
<v Speaker 0>at least a hundred ninety milliseconds on the

00:16:20.010 --> 00:16:22.170
<v Speaker 0>connect with three hundred and seventy three milliseconds

00:16:22.170 --> 00:16:24.810
<v Speaker 0>on the time to first bite. Tokyo's high

00:16:24.810 --> 00:16:26.330
<v Speaker 0>and Bangalore is high.

00:16:27.615 --> 00:16:30.255
<v Speaker 0>So we can improve this performance,

00:16:30.815 --> 00:16:32.735
<v Speaker 0>and I'm not gonna do anything

00:16:32.975 --> 00:16:33.855
<v Speaker 0>except

00:16:33.935 --> 00:16:35.935
<v Speaker 0>for deploy our other stack.

00:16:36.735 --> 00:16:39.615
<v Speaker 0>Now the Terraform CDK will provision the instance

00:16:39.615 --> 00:16:41.615
<v Speaker 0>or cloud and it will install a Portainer

00:16:41.615 --> 00:16:44.410
<v Speaker 0>agent. Portainer stacks will detect

00:16:44.490 --> 00:16:45.610
<v Speaker 0>the new device.

00:16:46.010 --> 00:16:48.570
<v Speaker 0>We will approve it because we have the

00:16:48.570 --> 00:16:50.890
<v Speaker 0>waiting room turned on. However, you could turn

00:16:50.890 --> 00:16:51.530
<v Speaker 0>that off.

00:16:52.170 --> 00:16:54.570
<v Speaker 0>Once we approve that device, Portainer will realize

00:16:54.570 --> 00:16:55.770
<v Speaker 0>that it is part of

00:16:56.255 --> 00:16:57.695
<v Speaker 0>our stack configuration,

00:16:57.855 --> 00:17:00.175
<v Speaker 0>deploy NGINX, we'll be able to rerun the

00:17:00.175 --> 00:17:02.735
<v Speaker 0>tests, and everything will be super fast and

00:17:02.735 --> 00:17:04.734
<v Speaker 0>low latency everywhere we go.

00:17:05.454 --> 00:17:06.414
<v Speaker 0>Let's do it.

00:17:07.135 --> 00:17:09.454
<v Speaker 0>So let's do our CDK deploy,

00:17:09.934 --> 00:17:10.895
<v Speaker 0>and remember,

00:17:10.895 --> 00:17:11.295
<v Speaker 0>because

00:17:12.790 --> 00:17:14.869
<v Speaker 0>each of our edge deploys have a dependency

00:17:14.869 --> 00:17:16.790
<v Speaker 0>on the admin stack, we need to add

00:17:16.790 --> 00:17:18.069
<v Speaker 0>the admin stack too.

00:17:18.390 --> 00:17:20.230
<v Speaker 0>However, nothing will need to be deployed for

00:17:20.230 --> 00:17:21.990
<v Speaker 0>the admin stack, and that will just offer

00:17:21.990 --> 00:17:26.005
<v Speaker 0>us one change for our compute stack, which

00:17:26.005 --> 00:17:28.004
<v Speaker 0>is our Asian compute node.

00:17:28.804 --> 00:17:31.445
<v Speaker 0>So for the last time, I will be

00:17:31.445 --> 00:17:33.044
<v Speaker 0>back in just a moment.

00:17:33.845 --> 00:17:36.165
<v Speaker 0>Alright. It's almost time for the moment of

00:17:36.165 --> 00:17:39.205
<v Speaker 0>truth. We now have an IP address for

00:17:39.205 --> 00:17:40.804
<v Speaker 0>our Asian compute node.

00:17:41.220 --> 00:17:43.700
<v Speaker 0>So let's head over to the Portainer admin

00:17:43.700 --> 00:17:46.020
<v Speaker 0>interface and check out our waiting room.

00:17:53.745 --> 00:17:56.065
<v Speaker 0>And there we go. We have our Singapore

00:17:56.065 --> 00:17:58.144
<v Speaker 0>instance ready to be associated.

00:17:58.705 --> 00:18:00.384
<v Speaker 0>If we come to our stacks,

00:18:00.945 --> 00:18:01.745
<v Speaker 0>hopefully,

00:18:01.745 --> 00:18:03.265
<v Speaker 0>that the refresh is right, although it may

00:18:03.265 --> 00:18:04.225
<v Speaker 0>be a little too fast.

00:18:05.760 --> 00:18:06.720
<v Speaker 0>There we go.

00:18:07.040 --> 00:18:10.399
<v Speaker 0>We caught it. We have our acknowledged environment,

00:18:10.400 --> 00:18:12.560
<v Speaker 0>and I wait for the automatic refresh in

00:18:12.560 --> 00:18:14.960
<v Speaker 0>ten seconds or refresh it myself manually. We

00:18:14.960 --> 00:18:17.200
<v Speaker 0>should see that turn green.

00:18:19.405 --> 00:18:20.044
<v Speaker 0>Hey.

00:18:20.685 --> 00:18:22.285
<v Speaker 0>Love it when stuff works.

00:18:23.965 --> 00:18:26.445
<v Speaker 0>We can click on this, click on environments,

00:18:26.445 --> 00:18:27.565
<v Speaker 0>they're all okay.

00:18:28.605 --> 00:18:30.765
<v Speaker 0>And what I really love about this

00:18:31.080 --> 00:18:33.479
<v Speaker 0>is that we don't need to worry

00:18:33.640 --> 00:18:34.519
<v Speaker 0>too much

00:18:35.080 --> 00:18:38.200
<v Speaker 0>about the management layer of a geographically

00:18:38.200 --> 00:18:40.039
<v Speaker 0>distributed compute cluster.

00:18:40.360 --> 00:18:43.320
<v Speaker 0>This is something that Kubernetes is notoriously bad

00:18:43.320 --> 00:18:46.575
<v Speaker 0>at. Stretching Kubernetes clusters across more than one

00:18:46.575 --> 00:18:48.655
<v Speaker 0>region is super painful.

00:18:48.895 --> 00:18:50.495
<v Speaker 0>You pay a lot of money on egress

00:18:50.495 --> 00:18:53.775
<v Speaker 0>traffic because the communication patterns for the kubelet

00:18:53.775 --> 00:18:55.455
<v Speaker 0>and the API server

00:18:55.455 --> 00:18:57.295
<v Speaker 0>were built under the assumption that these things

00:18:57.295 --> 00:18:59.375
<v Speaker 0>were almost collocated within the same building.

00:19:00.200 --> 00:19:01.000
<v Speaker 0>Portainer

00:19:01.000 --> 00:19:04.360
<v Speaker 0>is different, especially with their edge compute semantics.

00:19:05.800 --> 00:19:07.960
<v Speaker 0>So we have to complete the demo. Let's

00:19:07.960 --> 00:19:10.760
<v Speaker 0>check key CDN to see the performance of

00:19:10.760 --> 00:19:11.320
<v Speaker 0>our application.

00:19:14.725 --> 00:19:16.885
<v Speaker 0>So I'm not going to change anything. It's

00:19:16.885 --> 00:19:19.205
<v Speaker 0>the same IP address, the same port,

00:19:19.605 --> 00:19:22.005
<v Speaker 0>but a different topology for our deployment.

00:19:28.120 --> 00:19:31.240
<v Speaker 0>And those numbers are looking pretty different already.

00:19:32.120 --> 00:19:32.920
<v Speaker 0>Singapore,

00:19:32.920 --> 00:19:34.680
<v Speaker 0>we have three and four milliseconds.

00:19:34.680 --> 00:19:36.440
<v Speaker 0>Of course, that is where we deployed the

00:19:36.440 --> 00:19:37.320
<v Speaker 0>other node.

00:19:37.560 --> 00:19:40.065
<v Speaker 0>Sydney is a little bit higher, but much

00:19:40.065 --> 00:19:42.065
<v Speaker 0>less than what it was without the Singapore

00:19:42.065 --> 00:19:42.784
<v Speaker 0>region.

00:19:43.184 --> 00:19:46.784
<v Speaker 0>And Tokyo and Bangalore have improved slightly as

00:19:46.784 --> 00:19:47.264
<v Speaker 0>well.

00:19:47.825 --> 00:19:49.024
<v Speaker 0>So that's pretty cool.

00:19:49.265 --> 00:19:51.424
<v Speaker 0>And this is one last thing we haven't

00:19:51.424 --> 00:19:54.010
<v Speaker 0>looked at, which is edge jobs.

00:19:54.730 --> 00:19:57.130
<v Speaker 0>Now that we have our geographically

00:19:57.130 --> 00:19:58.970
<v Speaker 0>distributed compute cluster

00:19:59.050 --> 00:20:01.450
<v Speaker 0>with our application being delivered to our customers

00:20:01.450 --> 00:20:03.530
<v Speaker 0>and a low latency environment using any cache

00:20:03.530 --> 00:20:04.570
<v Speaker 0>routing with BGP,

00:20:05.325 --> 00:20:07.005
<v Speaker 0>We may have admin things that we need

00:20:07.005 --> 00:20:08.844
<v Speaker 0>to run on a regular cadence,

00:20:09.725 --> 00:20:12.044
<v Speaker 0>and Portainer supports this through

00:20:12.365 --> 00:20:13.565
<v Speaker 0>edge jobs.

00:20:13.644 --> 00:20:15.644
<v Speaker 0>Now let's assume we wanted to run a

00:20:15.644 --> 00:20:15.965
<v Speaker 0>backup.

00:20:17.490 --> 00:20:19.570
<v Speaker 0>We can use cron syntax if we want

00:20:19.570 --> 00:20:21.330
<v Speaker 0>or the basic configuration.

00:20:21.650 --> 00:20:23.570
<v Speaker 0>We can mark this as recurring and say

00:20:23.570 --> 00:20:25.169
<v Speaker 0>run once per day.

00:20:26.050 --> 00:20:26.929
<v Speaker 0>From here,

00:20:29.170 --> 00:20:31.490
<v Speaker 0>we can use whatever script we want.

00:20:32.715 --> 00:20:35.275
<v Speaker 0>So if you need to backup any of

00:20:35.275 --> 00:20:38.475
<v Speaker 0>your volumes or your containers or logs to

00:20:38.475 --> 00:20:41.515
<v Speaker 0>Amazon s three or GCS or anything like

00:20:41.515 --> 00:20:42.075
<v Speaker 0>that,

00:20:42.795 --> 00:20:43.755
<v Speaker 0>script it away.

00:20:46.220 --> 00:20:48.700
<v Speaker 0>We can select the node or nodes we

00:20:48.700 --> 00:20:50.860
<v Speaker 0>wish to run it and click create.

00:20:52.060 --> 00:20:54.300
<v Speaker 0>As simple as that, we have our backups

00:20:54.300 --> 00:20:55.580
<v Speaker 0>good to go.

00:20:55.820 --> 00:20:58.140
<v Speaker 0>So that is the edge compute capabilities of

00:20:58.140 --> 00:20:58.780
<v Speaker 0>Portainer.

00:20:59.295 --> 00:21:02.095
<v Speaker 0>Coupled with Equinix Medal and BGP written, you

00:21:02.095 --> 00:21:04.575
<v Speaker 0>can get some pretty impressive architectures

00:21:04.575 --> 00:21:07.615
<v Speaker 0>to satisfy your customers wherever they are.

00:21:08.575 --> 00:21:10.415
<v Speaker 0>Join us for the next video in this

00:21:10.415 --> 00:21:12.975
<v Speaker 0>course. I'm gonna be diving deep into how

00:21:12.975 --> 00:21:15.570
<v Speaker 0>Portainer can enrich Kubernetes.

00:21:15.970 --> 00:21:17.650
<v Speaker 0>I'm very excited for the next video. I

00:21:17.650 --> 00:21:19.730
<v Speaker 0>hope you are too. I'll see you soon.

00:21:20.049 --> 00:21:21.809
<v Speaker 0>Until next time. Have a good day.
