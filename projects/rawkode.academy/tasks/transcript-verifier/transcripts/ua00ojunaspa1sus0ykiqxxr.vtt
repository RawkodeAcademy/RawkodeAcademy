WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 7ae2b839-366d-4e9c-a1d9-15a06e016ee1
Created: 2025-04-29T18:46:26.544Z
Duration: 4460.699
Channels: 1

00:00:37.325 --> 00:00:40.605
<v Speaker 0>Hello. Welcome to today's episode of Rawkode Live.

00:00:40.605 --> 00:00:42.045
<v Speaker 0>I'm your host, Rawkode.

00:00:42.205 --> 00:00:44.765
<v Speaker 0>Today, we are taking a look at Promscale.

00:00:45.085 --> 00:00:46.925
<v Speaker 0>We're gonna learn all about that in just

00:00:46.925 --> 00:00:48.925
<v Speaker 0>a few minutes, but before we get started,

00:00:48.925 --> 00:00:50.365
<v Speaker 0>I do have a little bit of housekeeping.

00:00:51.870 --> 00:00:54.910
<v Speaker 0>So first, please subscribe to this YouTube channel

00:00:54.910 --> 00:00:56.830
<v Speaker 0>and click the bell. This is gonna get

00:00:56.830 --> 00:00:59.150
<v Speaker 0>you notifications for all future episodes of Rawkode

00:00:59.150 --> 00:01:00.990
<v Speaker 0>Live as we explore the vast cloud native

00:01:00.990 --> 00:01:02.030
<v Speaker 0>landscape together.

00:01:02.830 --> 00:01:04.510
<v Speaker 0>Also, if you like to chat, we have

00:01:04.510 --> 00:01:06.510
<v Speaker 0>a very active Discord server where we're talking

00:01:06.510 --> 00:01:08.705
<v Speaker 0>all things cloud native Kubernetes and everything in

00:01:08.705 --> 00:01:10.545
<v Speaker 0>between. So come and say hello. I look

00:01:10.545 --> 00:01:11.665
<v Speaker 0>forward to meeting you.

00:01:12.385 --> 00:01:14.145
<v Speaker 0>And one last thing, I just wanna thank

00:01:14.145 --> 00:01:16.785
<v Speaker 0>my employer Equinix Medal. They provide the resources

00:01:16.785 --> 00:01:18.225
<v Speaker 0>and time for me to invest in the

00:01:18.225 --> 00:01:19.825
<v Speaker 0>show so that we can all learn cloud

00:01:19.825 --> 00:01:22.189
<v Speaker 0>native together. So thank you very much. Thank

00:01:22.189 --> 00:01:24.909
<v Speaker 0>you very much Equinix metal. You can check

00:01:24.909 --> 00:01:27.229
<v Speaker 0>out Equinix metal was a code Rawkode

00:01:27.229 --> 00:01:29.390
<v Speaker 0>that will get you $200 and compute that

00:01:29.390 --> 00:01:31.229
<v Speaker 0>as around four hundred hours on a modest

00:01:31.229 --> 00:01:32.909
<v Speaker 0>instance. So check it out, have some fun

00:01:32.909 --> 00:01:34.350
<v Speaker 0>and let me know how you get on.

00:01:35.454 --> 00:01:37.454
<v Speaker 0>Alright. Now to guide me today on our

00:01:37.454 --> 00:01:39.774
<v Speaker 0>journey into Promscale, I am joined by Matt

00:01:39.774 --> 00:01:43.295
<v Speaker 0>and Vanneef from the Promscale and Timescale

00:01:43.375 --> 00:01:45.774
<v Speaker 0>teams. Hello there. How are you both?

00:01:47.869 --> 00:01:49.390
<v Speaker 1>Hey. How are you doing?

00:01:50.270 --> 00:01:52.430
<v Speaker 0>The the joys like of when you have

00:01:52.430 --> 00:01:53.869
<v Speaker 0>two guests on the show and then you

00:01:53.869 --> 00:01:55.310
<v Speaker 0>throw out the how are you question there's

00:01:55.310 --> 00:01:57.310
<v Speaker 0>always this like oh who's gonna go first?

00:01:58.590 --> 00:02:00.189
<v Speaker 0>So every time I do it I catch

00:02:00.189 --> 00:02:01.710
<v Speaker 0>myself but just a little bit too late

00:02:01.710 --> 00:02:04.354
<v Speaker 0>and I'm like oh, okay. Okay. So Matt,

00:02:04.354 --> 00:02:06.195
<v Speaker 0>hi. How are you? Welcome to the show.

00:02:07.235 --> 00:02:10.995
<v Speaker 1>Yeah. Thank you for having me David. I'm

00:02:10.995 --> 00:02:13.474
<v Speaker 1>doing well. Awesome. Do you wanna just tell

00:02:13.474 --> 00:02:14.915
<v Speaker 0>us who you are? What you do at

00:02:14.915 --> 00:02:15.715
<v Speaker 0>timescale?

00:02:15.715 --> 00:02:17.315
<v Speaker 0>Anything else you wanna share with us?

00:02:18.200 --> 00:02:18.840
<v Speaker 1>Yeah.

00:02:20.600 --> 00:02:23.080
<v Speaker 1>So I I've been at timescale

00:02:23.080 --> 00:02:23.800
<v Speaker 1>for

00:02:23.959 --> 00:02:24.920
<v Speaker 1>a long time,

00:02:25.160 --> 00:02:26.280
<v Speaker 1>pretty much since

00:02:27.240 --> 00:02:28.440
<v Speaker 1>timescale

00:02:28.440 --> 00:02:29.560
<v Speaker 1>was a company.

00:02:29.800 --> 00:02:33.160
<v Speaker 1>I used to develop the core database product,

00:02:33.775 --> 00:02:34.415
<v Speaker 1>And

00:02:34.735 --> 00:02:36.415
<v Speaker 1>about a year

00:02:37.375 --> 00:02:39.455
<v Speaker 1>ago, I moved on to

00:02:39.935 --> 00:02:43.215
<v Speaker 1>become the team lead for Promscale,

00:02:43.695 --> 00:02:45.535
<v Speaker 1>which we will tell you about today.

00:02:46.415 --> 00:02:48.815
<v Speaker 0>Awesome. Thank you. And, Vineeth, how are you

00:02:48.815 --> 00:02:49.135
<v Speaker 0>today?

00:02:50.420 --> 00:02:51.060
<v Speaker 2>Yeah.

00:02:51.540 --> 00:02:53.700
<v Speaker 2>Hello, everyone. My name is Vinith. So

00:02:54.260 --> 00:02:56.740
<v Speaker 2>thanks for having us, David. So it's really

00:02:56.740 --> 00:02:58.580
<v Speaker 2>a pleasure to join Rawkode.

00:02:58.660 --> 00:02:59.220
<v Speaker 2>And,

00:02:59.620 --> 00:03:01.780
<v Speaker 2>yeah, I work at timescale in the team

00:03:01.780 --> 00:03:02.580
<v Speaker 2>observability,

00:03:03.125 --> 00:03:06.245
<v Speaker 2>and my I primarily contribute to projects at

00:03:06.245 --> 00:03:07.685
<v Speaker 2>tops and from scale.

00:03:07.924 --> 00:03:10.405
<v Speaker 2>And it's been last seven months I've been

00:03:10.405 --> 00:03:13.445
<v Speaker 2>working with timescale, and previously, I worked with

00:03:14.325 --> 00:03:17.125
<v Speaker 2>other cloud native companies. And I also contributed

00:03:17.125 --> 00:03:20.290
<v Speaker 2>to Cortex and Open Policy Agent and Kubernetes

00:03:20.290 --> 00:03:21.730
<v Speaker 2>upstream previously.

00:03:22.050 --> 00:03:24.690
<v Speaker 2>So yeah. You keep yourself busy.

00:03:25.570 --> 00:03:26.690
<v Speaker 2>Yep. Yep.

00:03:27.650 --> 00:03:29.730
<v Speaker 0>Awesome. Well, thank you both so much for

00:03:29.730 --> 00:03:31.585
<v Speaker 0>taking time out of your days joining us

00:03:31.585 --> 00:03:33.425
<v Speaker 0>today and and hopefully, you know, we're gonna

00:03:33.425 --> 00:03:35.025
<v Speaker 0>take a look at Promscale today and a

00:03:35.025 --> 00:03:37.185
<v Speaker 0>little bit of TOBS. So why don't we

00:03:37.185 --> 00:03:39.905
<v Speaker 0>start with just a little bit of introduction.

00:03:40.305 --> 00:03:42.625
<v Speaker 0>I believe Matt, you've got your screen ready

00:03:42.625 --> 00:03:44.065
<v Speaker 0>for us here and you're just gonna

00:03:45.050 --> 00:03:46.970
<v Speaker 0>present a couple of slides. So please feel

00:03:46.970 --> 00:03:48.570
<v Speaker 0>free to take it away whenever you are

00:03:48.570 --> 00:03:49.130
<v Speaker 0>ready.

00:03:49.690 --> 00:03:50.490
<v Speaker 1>Yep.

00:03:51.530 --> 00:03:52.250
<v Speaker 1>So

00:03:52.730 --> 00:03:53.930
<v Speaker 1>hi everyone.

00:03:54.570 --> 00:03:56.650
<v Speaker 1>Most of this I already covered.

00:03:57.715 --> 00:04:00.275
<v Speaker 1>These are the ways you can kind of

00:04:00.594 --> 00:04:03.155
<v Speaker 1>get in touch with me on the Internet.

00:04:04.034 --> 00:04:06.114
<v Speaker 1>The other thing I was saying is if

00:04:06.114 --> 00:04:07.555
<v Speaker 1>you're interested in

00:04:07.795 --> 00:04:09.555
<v Speaker 1>any of the things I like to geek

00:04:09.555 --> 00:04:12.674
<v Speaker 1>out about, skiing theater, travel, or photography,

00:04:13.070 --> 00:04:14.830
<v Speaker 1>Just hit me up on one of the

00:04:14.830 --> 00:04:15.950
<v Speaker 1>Slack channels.

00:04:16.110 --> 00:04:19.150
<v Speaker 1>I'm always more than happy to chat,

00:04:19.230 --> 00:04:22.990
<v Speaker 1>especially in this pandemic world we live in.

00:04:25.230 --> 00:04:28.990
<v Speaker 1>And I will let Vinit also introduce

00:04:28.605 --> 00:04:29.325
<v Speaker 1>himself.

00:04:30.205 --> 00:04:33.325
<v Speaker 2>Yep. So yeah. Like, hi again, and my

00:04:33.325 --> 00:04:34.605
<v Speaker 2>name is Vinit, and I work as a

00:04:34.605 --> 00:04:36.925
<v Speaker 2>software engineer and Promscale team

00:04:37.245 --> 00:04:39.645
<v Speaker 2>and the observability team and timescale.

00:04:39.805 --> 00:04:41.725
<v Speaker 2>And feel free to reach out to me

00:04:41.725 --> 00:04:44.285
<v Speaker 2>to talk anything about cloud native open telemetry

00:04:44.285 --> 00:04:47.220
<v Speaker 2>or all, like, observability in general. So I'm

00:04:47.220 --> 00:04:49.699
<v Speaker 2>very active in CNC of Slack and TimescaleDB

00:04:49.699 --> 00:04:51.699
<v Speaker 2>community Slack. So you can reach out to

00:04:51.699 --> 00:04:54.259
<v Speaker 2>me at the rate we need. And feel

00:04:54.259 --> 00:04:55.060
<v Speaker 2>free to

00:04:56.020 --> 00:04:59.060
<v Speaker 2>mail me to beneaththattimescale.com

00:04:59.060 --> 00:05:02.595
<v Speaker 2>to discuss anything about tops, Promscale, or timescale

00:05:02.595 --> 00:05:05.315
<v Speaker 2>d b. And on my free time, I

00:05:05.315 --> 00:05:08.115
<v Speaker 2>just keep cycling, hiking, and reading books.

00:05:08.515 --> 00:05:10.195
<v Speaker 2>Like, if you want to discuss about anything

00:05:10.195 --> 00:05:12.115
<v Speaker 2>or even join me in India, just feel

00:05:12.115 --> 00:05:13.475
<v Speaker 2>free to reach out to me.

00:05:16.930 --> 00:05:18.610
<v Speaker 1>Great. So

00:05:18.610 --> 00:05:20.610
<v Speaker 1>let's start with what

00:05:20.689 --> 00:05:21.490
<v Speaker 1>Promiscale

00:05:21.490 --> 00:05:22.130
<v Speaker 1>is.

00:05:23.409 --> 00:05:24.370
<v Speaker 1>Promiscale

00:05:24.370 --> 00:05:27.090
<v Speaker 1>is an open source long term store for

00:05:27.090 --> 00:05:28.530
<v Speaker 1>Prometheus data,

00:05:28.610 --> 00:05:30.930
<v Speaker 1>which is built on top of TimescaleDB.

00:05:31.675 --> 00:05:33.115
<v Speaker 1>And TimescaleDB

00:05:33.115 --> 00:05:36.715
<v Speaker 1>itself is an extension to postgres SQL.

00:05:36.794 --> 00:05:39.435
<v Speaker 1>So this is a relational database

00:05:39.595 --> 00:05:40.875
<v Speaker 1>that stores

00:05:40.955 --> 00:05:42.235
<v Speaker 1>Prometheus

00:05:42.715 --> 00:05:43.595
<v Speaker 1>observability

00:05:43.595 --> 00:05:44.155
<v Speaker 1>data.

00:05:44.470 --> 00:05:47.990
<v Speaker 1>And what's unique about us is that we

00:05:47.990 --> 00:05:48.950
<v Speaker 1>store

00:05:49.110 --> 00:05:52.230
<v Speaker 1>all of this data in the relational database,

00:05:52.470 --> 00:05:56.150
<v Speaker 1>which allows you to use SQL analytics

00:05:56.230 --> 00:05:58.389
<v Speaker 1>to get much more insights

00:05:58.645 --> 00:05:59.605
<v Speaker 1>into

00:05:59.764 --> 00:06:00.805
<v Speaker 1>your

00:06:00.965 --> 00:06:01.845
<v Speaker 1>observability

00:06:01.845 --> 00:06:02.645
<v Speaker 1>data.

00:06:04.005 --> 00:06:05.764
<v Speaker 1>The basic architecture

00:06:05.764 --> 00:06:07.125
<v Speaker 1>is as follows.

00:06:08.165 --> 00:06:11.125
<v Speaker 1>Prometheus uses the remote right

00:06:11.125 --> 00:06:13.285
<v Speaker 1>and the remote read protocols

00:06:13.285 --> 00:06:15.980
<v Speaker 1>to speak to the Promscale connector.

00:06:16.780 --> 00:06:19.100
<v Speaker 1>The connector on ingestible

00:06:19.100 --> 00:06:19.900
<v Speaker 1>just

00:06:19.980 --> 00:06:22.060
<v Speaker 1>ingest data from Prometheus

00:06:22.060 --> 00:06:24.940
<v Speaker 1>and the write it to time scale DB,

00:06:25.100 --> 00:06:27.820
<v Speaker 1>which can be a single node installation

00:06:27.980 --> 00:06:28.860
<v Speaker 1>or

00:06:29.145 --> 00:06:30.025
<v Speaker 1>horizontally

00:06:30.025 --> 00:06:32.345
<v Speaker 1>scale, but there should be the installation.

00:06:33.465 --> 00:06:35.785
<v Speaker 1>And then you can install

00:06:36.585 --> 00:06:39.385
<v Speaker 1>you can use any kind of visualization or

00:06:39.385 --> 00:06:40.905
<v Speaker 1>analysis tools,

00:06:41.065 --> 00:06:42.825
<v Speaker 1>speaking either SQL

00:06:42.825 --> 00:06:43.865
<v Speaker 1>or PromQL

00:06:44.430 --> 00:06:48.190
<v Speaker 1>to to get data back out of the

00:06:48.190 --> 00:06:50.990
<v Speaker 1>store. If you are speaking PromQL,

00:06:50.990 --> 00:06:51.550
<v Speaker 1>you,

00:06:51.950 --> 00:06:54.270
<v Speaker 1>connect directly to the connector,

00:06:54.830 --> 00:06:56.750
<v Speaker 1>while if you are speaking SQL,

00:06:57.315 --> 00:06:59.235
<v Speaker 1>you speak directly

00:06:59.235 --> 00:07:00.915
<v Speaker 1>to the PromscaleDB

00:07:00.915 --> 00:07:01.795
<v Speaker 1>database.

00:07:03.555 --> 00:07:04.915
<v Speaker 1>But at this point,

00:07:05.155 --> 00:07:07.795
<v Speaker 1>you guys might be looking at me a

00:07:07.795 --> 00:07:11.075
<v Speaker 1>little bit side eyed because

00:07:11.930 --> 00:07:13.130
<v Speaker 1>traditionally,

00:07:14.090 --> 00:07:15.690
<v Speaker 1>relational databases

00:07:15.770 --> 00:07:16.570
<v Speaker 1>didn't

00:07:16.650 --> 00:07:17.450
<v Speaker 1>scale

00:07:18.330 --> 00:07:20.410
<v Speaker 1>for this kind of workload

00:07:20.410 --> 00:07:22.090
<v Speaker 1>because this workload

00:07:22.090 --> 00:07:23.610
<v Speaker 1>is very large. Right?

00:07:24.395 --> 00:07:25.514
<v Speaker 1>Preservability

00:07:25.514 --> 00:07:26.235
<v Speaker 1>can

00:07:26.955 --> 00:07:27.675
<v Speaker 1>ingest

00:07:28.074 --> 00:07:30.235
<v Speaker 1>billions of rows a day or

00:07:30.475 --> 00:07:32.875
<v Speaker 1>or even tens or hundreds of billions of

00:07:32.875 --> 00:07:34.235
<v Speaker 1>rows a day. But

00:07:36.315 --> 00:07:39.480
<v Speaker 1>time scale makes this possible because it allows

00:07:39.480 --> 00:07:40.440
<v Speaker 1>you to

00:07:41.000 --> 00:07:42.680
<v Speaker 1>scale your postgres

00:07:42.680 --> 00:07:45.400
<v Speaker 1>cluster to allow you to ingest

00:07:45.560 --> 00:07:47.400
<v Speaker 1>that kind of data volume.

00:07:47.639 --> 00:07:49.480
<v Speaker 1>In addition, it supports

00:07:49.560 --> 00:07:52.040
<v Speaker 1>column the time series compression

00:07:52.285 --> 00:07:55.165
<v Speaker 1>so that your data isn't huge on disk

00:07:55.245 --> 00:07:58.685
<v Speaker 1>and so that your budget doesn't explode. Right?

00:07:58.845 --> 00:08:01.405
<v Speaker 1>And so we use all of the

00:08:02.445 --> 00:08:06.445
<v Speaker 1>kind of best in class column compression

00:08:06.525 --> 00:08:07.965
<v Speaker 1>algorithms

00:08:07.610 --> 00:08:11.370
<v Speaker 1>including Gorilla and delta delta encoding,

00:08:11.610 --> 00:08:12.250
<v Speaker 1>etcetera.

00:08:14.970 --> 00:08:15.930
<v Speaker 1>In addition,

00:08:16.010 --> 00:08:17.210
<v Speaker 1>traditionally,

00:08:17.290 --> 00:08:18.890
<v Speaker 1>relational databases

00:08:19.290 --> 00:08:21.690
<v Speaker 1>can only scale up and not out.

00:08:22.275 --> 00:08:22.915
<v Speaker 1>But

00:08:23.475 --> 00:08:24.355
<v Speaker 1>timescale,

00:08:24.355 --> 00:08:27.315
<v Speaker 1>again, allows you to horizontally

00:08:28.195 --> 00:08:29.475
<v Speaker 1>scale out

00:08:30.195 --> 00:08:31.395
<v Speaker 1>your database

00:08:31.395 --> 00:08:35.794
<v Speaker 1>as it has a multi node version that

00:08:34.929 --> 00:08:35.809
<v Speaker 1>scales

00:08:37.970 --> 00:08:42.530
<v Speaker 1>kind of like you would any NoSQL database.

00:08:44.850 --> 00:08:45.170
<v Speaker 1>So

00:08:47.644 --> 00:08:49.644
<v Speaker 1>kind of maybe I told you a little

00:08:49.644 --> 00:08:50.524
<v Speaker 1>bit about

00:08:50.764 --> 00:08:52.925
<v Speaker 1>why this is possible,

00:08:53.004 --> 00:08:53.485
<v Speaker 1>but

00:08:54.764 --> 00:08:57.805
<v Speaker 1>why would you want to store your data

00:08:57.805 --> 00:08:59.005
<v Speaker 1>in Promscale?

00:08:59.404 --> 00:09:00.445
<v Speaker 1>Was it

00:09:00.764 --> 00:09:02.285
<v Speaker 1>or a couple of reasons.

00:09:03.140 --> 00:09:04.820
<v Speaker 1>First of all, unlike

00:09:04.980 --> 00:09:07.460
<v Speaker 1>most kind of for me, TS DataSource, we

00:09:07.460 --> 00:09:08.660
<v Speaker 1>support backfill,

00:09:08.660 --> 00:09:11.060
<v Speaker 1>which allows you to easily support

00:09:11.540 --> 00:09:13.860
<v Speaker 1>ingesting old data or

00:09:14.260 --> 00:09:15.700
<v Speaker 1>kind of migrating

00:09:15.725 --> 00:09:17.885
<v Speaker 1>all data into the system.

00:09:18.205 --> 00:09:20.045
<v Speaker 1>We support flexible

00:09:20.045 --> 00:09:22.045
<v Speaker 1>querying, as I mentioned before,

00:09:22.365 --> 00:09:23.885
<v Speaker 1>either in the PromQL

00:09:23.885 --> 00:09:25.085
<v Speaker 1>or SQL,

00:09:25.165 --> 00:09:26.205
<v Speaker 1>your choice.

00:09:28.285 --> 00:09:31.620
<v Speaker 1>We support the flexible ingest. You could use

00:09:31.620 --> 00:09:33.940
<v Speaker 1>the standard Prometheus

00:09:34.019 --> 00:09:37.300
<v Speaker 1>pull based model or you can push data

00:09:37.300 --> 00:09:38.260
<v Speaker 1>directly

00:09:38.420 --> 00:09:39.700
<v Speaker 1>to Promscale

00:09:39.700 --> 00:09:40.500
<v Speaker 1>itself.

00:09:42.260 --> 00:09:45.220
<v Speaker 1>It is easy to deploy and use, and

00:09:45.220 --> 00:09:48.125
<v Speaker 1>hopefully, the demo will kind of illustrate to

00:09:48.125 --> 00:09:49.805
<v Speaker 1>that. And we have

00:09:50.365 --> 00:09:53.165
<v Speaker 1>a lot of community support on our Slack

00:09:53.165 --> 00:09:53.885
<v Speaker 1>channel.

00:09:56.605 --> 00:09:59.100
<v Speaker 1>But and I didn't want to cover a

00:09:59.100 --> 00:10:01.260
<v Speaker 1>little bit about why

00:10:01.660 --> 00:10:05.899
<v Speaker 1>we're concentrating on Prometheus because I think some

00:10:05.899 --> 00:10:07.260
<v Speaker 1>people might not

00:10:08.139 --> 00:10:09.660
<v Speaker 1>be so familiar.

00:10:11.275 --> 00:10:13.595
<v Speaker 1>I think it's safe to say that Prometheus

00:10:13.595 --> 00:10:16.715
<v Speaker 1>is becoming the common data format

00:10:16.795 --> 00:10:18.315
<v Speaker 1>for metrics

00:10:18.315 --> 00:10:19.675
<v Speaker 1>in the industry.

00:10:19.835 --> 00:10:22.955
<v Speaker 1>And that's mainly because of its easy to

00:10:22.955 --> 00:10:25.680
<v Speaker 1>understand data layout. It's really

00:10:25.920 --> 00:10:27.279
<v Speaker 1>a time

00:10:27.279 --> 00:10:28.560
<v Speaker 1>series based

00:10:28.720 --> 00:10:30.959
<v Speaker 1>layout where you have a timestamp,

00:10:31.279 --> 00:10:31.839
<v Speaker 1>a

00:10:32.320 --> 00:10:34.480
<v Speaker 1>and a set of values

00:10:34.560 --> 00:10:35.760
<v Speaker 1>associated

00:10:36.079 --> 00:10:40.205
<v Speaker 1>with a tag set of key value pairs

00:10:40.205 --> 00:10:41.885
<v Speaker 1>describing your data.

00:10:42.205 --> 00:10:43.805
<v Speaker 1>And PromQL

00:10:43.805 --> 00:10:44.605
<v Speaker 1>has

00:10:44.845 --> 00:10:47.725
<v Speaker 1>really become at the standard in data reporting

00:10:47.725 --> 00:10:48.845
<v Speaker 1>queries today.

00:10:50.490 --> 00:10:51.850
<v Speaker 1>The other major

00:10:52.250 --> 00:10:55.530
<v Speaker 1>thing is it's cloud friendly. It's cloud native

00:10:55.530 --> 00:10:56.650
<v Speaker 1>to Kubernetes.

00:10:56.890 --> 00:10:57.530
<v Speaker 1>And

00:10:59.450 --> 00:11:01.850
<v Speaker 1>I think an important point to realize is

00:11:01.850 --> 00:11:06.010
<v Speaker 1>that the pool based model that

00:11:05.165 --> 00:11:06.205
<v Speaker 1>Prometheus

00:11:07.165 --> 00:11:08.685
<v Speaker 1>uses is

00:11:08.845 --> 00:11:09.965
<v Speaker 1>really good

00:11:10.445 --> 00:11:12.445
<v Speaker 1>when you have microservices

00:11:12.445 --> 00:11:13.085
<v Speaker 1>that

00:11:13.885 --> 00:11:15.005
<v Speaker 1>come and go

00:11:15.485 --> 00:11:16.845
<v Speaker 1>very quickly.

00:11:17.084 --> 00:11:17.805
<v Speaker 1>Combined

00:11:18.285 --> 00:11:18.925
<v Speaker 1>with

00:11:19.930 --> 00:11:22.010
<v Speaker 1>kind of a service discovery,

00:11:22.010 --> 00:11:24.810
<v Speaker 1>it really allows you to monitor

00:11:24.890 --> 00:11:25.610
<v Speaker 1>a

00:11:25.769 --> 00:11:26.810
<v Speaker 1>fast

00:11:26.810 --> 00:11:28.810
<v Speaker 1>paced cloud native environment.

00:11:31.805 --> 00:11:32.764
<v Speaker 1>And now

00:11:33.805 --> 00:11:35.245
<v Speaker 1>I'll look to beneath,

00:11:35.565 --> 00:11:37.485
<v Speaker 1>say a few words about

00:11:37.565 --> 00:11:39.404
<v Speaker 1>tabs, which is

00:11:39.805 --> 00:11:42.605
<v Speaker 1>the observability stack for Kubernetes.

00:11:44.125 --> 00:11:45.404
<v Speaker 2>Yep. So

00:11:45.964 --> 00:11:49.540
<v Speaker 2>Right. So, like, have another tool called TOPS,

00:11:49.540 --> 00:11:51.860
<v Speaker 2>which is the observability stack for Kubernetes. So

00:11:51.860 --> 00:11:54.660
<v Speaker 2>let's start why TOPS and what is it

00:11:54.660 --> 00:11:58.180
<v Speaker 2>all about. So deploying observability is way, way,

00:11:58.180 --> 00:12:00.740
<v Speaker 2>way harder in your Kubernetes cluster because you

00:12:00.740 --> 00:12:02.820
<v Speaker 2>already have your workloads running, and then you

00:12:02.820 --> 00:12:05.685
<v Speaker 2>want set up Prometheus and to put the

00:12:05.685 --> 00:12:08.404
<v Speaker 2>service discovery enable, like, what port what services

00:12:08.404 --> 00:12:10.565
<v Speaker 2>you want to scrape. And if it's Kubernetes

00:12:10.565 --> 00:12:12.325
<v Speaker 2>cluster, you need to run the cube state

00:12:12.325 --> 00:12:14.485
<v Speaker 2>metrics and all this. Like, you have so

00:12:14.485 --> 00:12:16.404
<v Speaker 2>many moving parts and so much of network

00:12:16.404 --> 00:12:17.045
<v Speaker 2>configuration,

00:12:17.920 --> 00:12:20.000
<v Speaker 2>observability level configuration,

00:12:20.080 --> 00:12:22.320
<v Speaker 2>and you need to configure like, if you're

00:12:22.320 --> 00:12:25.200
<v Speaker 2>using Promscale, you need to as a point,

00:12:25.200 --> 00:12:27.440
<v Speaker 2>the remote read and write in Prometheus to

00:12:27.440 --> 00:12:30.000
<v Speaker 2>Promscale and from Promscale to Timescale DB. So

00:12:30.125 --> 00:12:32.925
<v Speaker 2>any observability tool you install in Kubernetes cluster,

00:12:32.925 --> 00:12:34.685
<v Speaker 2>you need to configure it and make sure

00:12:34.685 --> 00:12:36.925
<v Speaker 2>that everything is working as expected.

00:12:37.245 --> 00:12:39.485
<v Speaker 2>So here comes the tops. So tops is

00:12:39.485 --> 00:12:42.045
<v Speaker 2>all about shipping observability stack in just one

00:12:42.045 --> 00:12:45.699
<v Speaker 2>command. And tops comes with all these components.

00:12:45.779 --> 00:12:46.260
<v Speaker 2>Like,

00:12:47.139 --> 00:12:49.699
<v Speaker 2>one interesting fact is that we just launched

00:12:49.699 --> 00:12:52.339
<v Speaker 2>tops, like, released tops, like, a couple of

00:12:52.339 --> 00:12:55.940
<v Speaker 2>hours back by switching the Prometheus and Grafana

00:12:55.940 --> 00:12:58.775
<v Speaker 2>help charts to keep Promscale. So we just

00:12:58.775 --> 00:13:02.055
<v Speaker 2>swapped out, and this is the first demo

00:13:02.055 --> 00:13:04.775
<v Speaker 2>we are doing post lot lot release.

00:13:04.855 --> 00:13:07.495
<v Speaker 2>And you are just looking at the latest

00:13:07.495 --> 00:13:10.860
<v Speaker 2>and greatest tops as of today. So, Alex,

00:13:10.860 --> 00:13:13.420
<v Speaker 2>just fingers crossed for that. And if you

00:13:13.420 --> 00:13:15.579
<v Speaker 2>look at into the components for queue Promscale,

00:13:15.579 --> 00:13:17.500
<v Speaker 2>so queue Promscale by default out of the

00:13:17.500 --> 00:13:19.100
<v Speaker 2>box comes with Promscale

00:13:19.500 --> 00:13:21.500
<v Speaker 2>alert manager, node exporter,

00:13:21.500 --> 00:13:24.334
<v Speaker 2>and Promscale operator to manage the Prometheus and

00:13:24.334 --> 00:13:27.135
<v Speaker 2>alert managers as a custom resource definitions.

00:13:27.295 --> 00:13:29.295
<v Speaker 2>And you have cube state metrics to it

00:13:29.375 --> 00:13:31.134
<v Speaker 2>it's something like it's an exporter for your

00:13:31.134 --> 00:13:32.415
<v Speaker 2>Kubernetes cluster.

00:13:32.654 --> 00:13:34.095
<v Speaker 2>So you get all the metrics out of

00:13:34.095 --> 00:13:36.894
<v Speaker 2>your API server. And we also install Promscale

00:13:36.894 --> 00:13:39.990
<v Speaker 2>and TimescaleDB for long term storage of metrics

00:13:39.990 --> 00:13:42.470
<v Speaker 2>coming from Prometheus, and we have PromLens.

00:13:42.470 --> 00:13:45.190
<v Speaker 2>Like, if you are building PromQL queries, so

00:13:45.190 --> 00:13:46.470
<v Speaker 2>it'll be just running.

00:13:46.710 --> 00:13:49.190
<v Speaker 2>Anytime you have any problems or questions with

00:13:49.190 --> 00:13:51.750
<v Speaker 2>the PromQL queries, just jump into PromLens and

00:13:51.750 --> 00:13:52.550
<v Speaker 2>build the queries.

00:13:57.005 --> 00:13:59.644
<v Speaker 2>Yeah. And why did we switch to cube

00:13:59.644 --> 00:14:01.644
<v Speaker 2>parameters? Because this is one of the biggest

00:14:01.644 --> 00:14:04.204
<v Speaker 2>and recent changes we have decided in the

00:14:04.204 --> 00:14:06.445
<v Speaker 2>last one month. And because

00:14:06.605 --> 00:14:09.790
<v Speaker 2>there's a lot of community and the community

00:14:09.790 --> 00:14:12.590
<v Speaker 2>acceptance for the cube Prometheus. So any user

00:14:12.590 --> 00:14:15.070
<v Speaker 2>we talk about Prometheus, they're already either using

00:14:15.070 --> 00:14:17.470
<v Speaker 2>Prometheus operator or they are using the cube

00:14:17.470 --> 00:14:18.350
<v Speaker 2>Prometheus.

00:14:18.510 --> 00:14:19.950
<v Speaker 2>And we have seen,

00:14:20.750 --> 00:14:21.070
<v Speaker 2>like,

00:14:22.105 --> 00:14:24.745
<v Speaker 2>heavy lifting already being managed by the Prometheus

00:14:24.745 --> 00:14:27.065
<v Speaker 2>operator and with the Q Prometheus tags. So

00:14:27.065 --> 00:14:29.225
<v Speaker 2>we wanted to switch to the Q Prometheus

00:14:29.225 --> 00:14:31.625
<v Speaker 2>because there's a higher a native high high

00:14:31.625 --> 00:14:34.600
<v Speaker 2>availability support for Prometheus and alert manager.

00:14:34.760 --> 00:14:37.240
<v Speaker 2>And also, offers Kubernetes mix sense, which is

00:14:37.240 --> 00:14:39.399
<v Speaker 2>out of the box alerts and dashboards for

00:14:39.399 --> 00:14:40.840
<v Speaker 2>your Kubernetes cluster.

00:14:40.920 --> 00:14:43.880
<v Speaker 2>So it's already pre baked for you. And

00:14:43.959 --> 00:14:47.240
<v Speaker 2>configuring Prometheus and alert manager as custom resources.

00:14:47.240 --> 00:14:48.875
<v Speaker 2>So every time you need to make changes

00:14:48.875 --> 00:14:50.714
<v Speaker 2>to your Prometheus cluster, there is no need

00:14:50.714 --> 00:14:53.515
<v Speaker 2>that you get into the Prometheus config, change

00:14:53.515 --> 00:14:56.395
<v Speaker 2>the alert manager endpoint, add alerting rules or

00:14:56.395 --> 00:14:58.315
<v Speaker 2>recording rules. You just put it in in

00:14:58.315 --> 00:15:00.955
<v Speaker 2>the form of custom resources, and Prometheus operator

00:15:00.955 --> 00:15:01.675
<v Speaker 2>will

00:15:02.795 --> 00:15:04.980
<v Speaker 2>reconcile it with the Prometheus for you. And

00:15:04.980 --> 00:15:07.860
<v Speaker 2>you have Prometheus operator for life cycle management

00:15:07.860 --> 00:15:10.500
<v Speaker 2>of the Prometheus, the config, and the alert

00:15:10.500 --> 00:15:12.740
<v Speaker 2>manager. So this is the main motivation for

00:15:12.740 --> 00:15:13.540
<v Speaker 2>us to

00:15:14.020 --> 00:15:16.500
<v Speaker 2>switch to the cube Prometheus from native Prometheus

00:15:16.500 --> 00:15:17.380
<v Speaker 2>and Grafana.

00:15:20.315 --> 00:15:22.555
<v Speaker 2>And this is the top's architecture as of

00:15:22.555 --> 00:15:25.355
<v Speaker 2>today. So post launch, like, so many components

00:15:25.355 --> 00:15:27.035
<v Speaker 2>have been changed. So I just put the

00:15:27.035 --> 00:15:29.915
<v Speaker 2>sketch as of today. And we have

00:15:30.315 --> 00:15:33.115
<v Speaker 2>the Kubernetes API server, which gets scraped by

00:15:33.115 --> 00:15:35.880
<v Speaker 2>the cube state metrics, and Prometheus scrapes the

00:15:35.880 --> 00:15:37.960
<v Speaker 2>cube state metrics. And you see all these

00:15:37.960 --> 00:15:38.760
<v Speaker 2>components

00:15:39.480 --> 00:15:41.960
<v Speaker 2>in your Kubernetes cluster. So you see this

00:15:41.960 --> 00:15:43.400
<v Speaker 2>dotted section

00:15:43.400 --> 00:15:46.040
<v Speaker 2>where the tops architecture comes. So once you

00:15:46.040 --> 00:15:49.235
<v Speaker 2>just do tops install, all these components gets

00:15:49.235 --> 00:15:51.875
<v Speaker 2>installed by default for you. So you get

00:15:51.875 --> 00:15:54.035
<v Speaker 2>all the observability for your Kubernetes cluster from

00:15:54.035 --> 00:15:56.115
<v Speaker 2>cube state metrics, and you get node level

00:15:56.115 --> 00:15:58.035
<v Speaker 2>metrics using the node exporter.

00:15:58.194 --> 00:16:00.995
<v Speaker 2>And you have alert manager to pop up

00:16:00.995 --> 00:16:03.010
<v Speaker 2>the alerts for you if by

00:16:03.010 --> 00:16:05.490
<v Speaker 2>default from the Kubernetes mix and alerts.

00:16:05.730 --> 00:16:07.730
<v Speaker 2>And you have Grafana

00:16:07.970 --> 00:16:11.090
<v Speaker 2>for to query the Promscale and Timescale DB.

00:16:11.090 --> 00:16:13.730
<v Speaker 2>So here, if you observe one interesting thing

00:16:13.730 --> 00:16:16.050
<v Speaker 2>is that the Grafana points to Promscale but

00:16:16.050 --> 00:16:18.375
<v Speaker 2>not Prometheus Because Promscale is the long term

00:16:18.375 --> 00:16:19.095
<v Speaker 2>storage

00:16:19.255 --> 00:16:22.615
<v Speaker 2>for Promscale, and Grafana directly by default adds

00:16:22.615 --> 00:16:25.575
<v Speaker 2>the data sources from scale for Promscale,

00:16:25.655 --> 00:16:27.975
<v Speaker 2>and you run all your Promscale queries to

00:16:27.975 --> 00:16:30.775
<v Speaker 2>Promscale. So Promscale takes care of

00:16:31.540 --> 00:16:32.580
<v Speaker 2>executing

00:16:32.580 --> 00:16:34.900
<v Speaker 2>the Promscale queries on top of Timescale DB

00:16:34.900 --> 00:16:37.220
<v Speaker 2>for you, and you just get all the

00:16:37.860 --> 00:16:41.380
<v Speaker 2>Promscale results by from the Promscale. And if

00:16:41.380 --> 00:16:43.860
<v Speaker 2>you are interested to use SQL for analytics

00:16:43.860 --> 00:16:45.860
<v Speaker 2>or for visualization within Grafana,

00:16:46.225 --> 00:16:48.705
<v Speaker 2>Like, you have timescale DB data source already

00:16:48.705 --> 00:16:50.945
<v Speaker 2>enabled for you in Grafana by default, and

00:16:50.945 --> 00:16:53.825
<v Speaker 2>you can run a scale queries from Grafana

00:16:54.225 --> 00:16:57.025
<v Speaker 2>on top of timescale DB. And apart from

00:16:57.025 --> 00:16:58.545
<v Speaker 2>this, if you have any other services running

00:16:58.545 --> 00:17:02.225
<v Speaker 2>in cluster, Prometheus by default has the additional

00:17:01.530 --> 00:17:04.010
<v Speaker 2>script configs enabled for you. And if you

00:17:04.010 --> 00:17:07.050
<v Speaker 2>have the annotations enabled for your services, parts,

00:17:07.050 --> 00:17:10.010
<v Speaker 2>and endpoints, the Prometheus by default scripts all

00:17:10.010 --> 00:17:11.690
<v Speaker 2>those services for you. So you do not

00:17:11.690 --> 00:17:13.849
<v Speaker 2>need to make any changes for that. So

00:17:13.849 --> 00:17:16.090
<v Speaker 2>this is the here top's architecture in high

00:17:16.090 --> 00:17:16.330
<v Speaker 2>level.

00:17:19.005 --> 00:17:20.364
<v Speaker 2>And so,

00:17:20.605 --> 00:17:22.605
<v Speaker 2>like, this this is something I always

00:17:23.164 --> 00:17:26.044
<v Speaker 2>I'm always excited to share about because

00:17:26.284 --> 00:17:28.284
<v Speaker 2>so if you talk about tops in general,

00:17:28.284 --> 00:17:30.044
<v Speaker 2>you have seen all those components. So if

00:17:30.044 --> 00:17:32.510
<v Speaker 2>you see tops has the two sections, like,

00:17:32.510 --> 00:17:33.870
<v Speaker 2>primarily, if you look at as a at

00:17:33.870 --> 00:17:35.950
<v Speaker 2>at a as a project. So one is

00:17:35.950 --> 00:17:38.670
<v Speaker 2>the helm chart. So all this packaging

00:17:38.670 --> 00:17:41.710
<v Speaker 2>of timescale d b, Promscale, Q Prometheus, all

00:17:41.710 --> 00:17:43.534
<v Speaker 2>this happens as a helm chart. So you

00:17:43.534 --> 00:17:45.615
<v Speaker 2>can directly install TOPS as a Helm chart,

00:17:45.615 --> 00:17:47.534
<v Speaker 2>and it's already available. And if you are

00:17:47.534 --> 00:17:48.974
<v Speaker 2>using TOPS CLA,

00:17:49.294 --> 00:17:50.974
<v Speaker 2>you'd not care about

00:17:51.215 --> 00:17:53.615
<v Speaker 2>what Helm and what are the changes happening

00:17:53.615 --> 00:17:55.054
<v Speaker 2>in Helm and how to

00:17:55.455 --> 00:17:57.695
<v Speaker 2>manage the full life cycle management of your

00:17:57.695 --> 00:18:00.399
<v Speaker 2>TOPS and your observability stack. So top CLA

00:18:00.399 --> 00:18:02.399
<v Speaker 2>offers you all that commands. So you just

00:18:02.399 --> 00:18:05.039
<v Speaker 2>run tops install, and all the architecture is

00:18:05.039 --> 00:18:07.200
<v Speaker 2>installed for you. And you have upgrade

00:18:07.440 --> 00:18:09.679
<v Speaker 2>upgrade to upgrade the tops from previous versions

00:18:09.679 --> 00:18:11.915
<v Speaker 2>to the new version, and you have all

00:18:11.915 --> 00:18:13.275
<v Speaker 2>the set of comments. And if you see

00:18:13.355 --> 00:18:15.515
<v Speaker 2>look at the sub commands also. So if

00:18:15.515 --> 00:18:17.195
<v Speaker 2>you have the final running and you want

00:18:17.195 --> 00:18:19.755
<v Speaker 2>to get the password in Kubernetes cluster in

00:18:19.755 --> 00:18:21.995
<v Speaker 2>the native way, you need to find what

00:18:21.995 --> 00:18:23.980
<v Speaker 2>secret it is mounted to, and and you

00:18:23.980 --> 00:18:26.539
<v Speaker 2>need to find the secret base 64 encoded

00:18:26.539 --> 00:18:28.539
<v Speaker 2>string and decode it and use it. So

00:18:28.539 --> 00:18:31.659
<v Speaker 2>it's always a long process to get the

00:18:31.659 --> 00:18:33.899
<v Speaker 2>passwords out of your Grafana or change the

00:18:33.899 --> 00:18:36.220
<v Speaker 2>password and everything. So tops just offers you

00:18:36.220 --> 00:18:38.860
<v Speaker 2>the comments like tops Grafana get password. It

00:18:38.860 --> 00:18:41.225
<v Speaker 2>just shares the password for you from Grafana.

00:18:41.225 --> 00:18:43.145
<v Speaker 2>Change password. It just updates the password for

00:18:43.145 --> 00:18:45.304
<v Speaker 2>you. And even if you do port forward,

00:18:45.385 --> 00:18:47.625
<v Speaker 2>it just load port forwards to your local

00:18:47.625 --> 00:18:49.465
<v Speaker 2>system so that it's easy for you

00:18:50.105 --> 00:18:53.225
<v Speaker 2>to manage and reach to the the Grafana.

00:18:53.250 --> 00:18:54.530
<v Speaker 2>Same with TimescaleDB.

00:18:54.530 --> 00:18:55.890
<v Speaker 2>Like, if you want to run the SQL

00:18:55.890 --> 00:18:57.890
<v Speaker 2>commands, you just run TimescaleDB

00:18:57.890 --> 00:18:59.650
<v Speaker 2>connect, and it just gets you to the

00:18:59.650 --> 00:19:01.650
<v Speaker 2>PSQL prompt of TimescaleDB,

00:19:01.650 --> 00:19:03.730
<v Speaker 2>and you can run all the SQL queries

00:19:03.730 --> 00:19:05.975
<v Speaker 2>then and there. And you have metrics. So

00:19:05.975 --> 00:19:08.775
<v Speaker 2>one interesting fact about the Promscale

00:19:08.775 --> 00:19:11.255
<v Speaker 2>long term storage for metrics is that you

00:19:11.255 --> 00:19:12.215
<v Speaker 2>can get the

00:19:12.935 --> 00:19:15.735
<v Speaker 2>retention policies per metric level. It's not like

00:19:16.375 --> 00:19:19.015
<v Speaker 2>it's not it's not global retention policies. You

00:19:19.015 --> 00:19:20.535
<v Speaker 2>can apply the global retention

00:19:20.535 --> 00:19:23.330
<v Speaker 2>policies also per parametric retention policies. You can

00:19:23.330 --> 00:19:25.649
<v Speaker 2>say that this metric is important to me

00:19:25.649 --> 00:19:28.769
<v Speaker 2>and have the retention policy for this particular

00:19:28.769 --> 00:19:31.889
<v Speaker 2>metric for sixty days and have the global

00:19:31.889 --> 00:19:34.690
<v Speaker 2>retention policy to thirty days. So all this

00:19:34.850 --> 00:19:36.049
<v Speaker 2>metric level

00:19:36.289 --> 00:19:38.645
<v Speaker 2>life cycle management also can be handled by

00:19:38.645 --> 00:19:41.365
<v Speaker 2>docs. And one other problem we keep noticing

00:19:41.365 --> 00:19:44.885
<v Speaker 2>with u observability stack operators is that volume

00:19:44.885 --> 00:19:45.684
<v Speaker 2>expansion.

00:19:45.845 --> 00:19:48.405
<v Speaker 2>So the more and more you start

00:19:48.799 --> 00:19:51.440
<v Speaker 2>scraping the targets on getting the data into

00:19:51.440 --> 00:19:53.919
<v Speaker 2>your long term storage, you need to expand

00:19:53.919 --> 00:19:56.880
<v Speaker 2>your persistent volumes. So you have this persistent

00:19:56.880 --> 00:19:59.120
<v Speaker 2>volume claims and everything for you. So there's

00:19:59.120 --> 00:20:01.200
<v Speaker 2>a top volume comment for you to expand,

00:20:01.475 --> 00:20:04.355
<v Speaker 2>And you have put forward comments for all

00:20:04.355 --> 00:20:06.195
<v Speaker 2>the important components

00:20:06.195 --> 00:20:08.595
<v Speaker 2>which the operator would like to interact with.

00:20:08.595 --> 00:20:11.075
<v Speaker 2>So you just do put forward for Promscale,

00:20:11.075 --> 00:20:14.320
<v Speaker 2>Prominence, Prometheus, anything just just port forward for

00:20:14.320 --> 00:20:15.919
<v Speaker 2>you. It's as simple as

00:20:16.399 --> 00:20:18.880
<v Speaker 2>running cubic deal port forward for you, but

00:20:18.880 --> 00:20:21.039
<v Speaker 2>tops does all that for you. It just

00:20:21.039 --> 00:20:23.440
<v Speaker 2>finds all the parts, the services, and it

00:20:23.440 --> 00:20:26.285
<v Speaker 2>does port forward for you. So this is

00:20:26.285 --> 00:20:28.525
<v Speaker 2>the top CLA what it offers for you

00:20:28.525 --> 00:20:29.485
<v Speaker 2>in high level.

00:20:33.245 --> 00:20:33.965
<v Speaker 1>Great.

00:20:34.365 --> 00:20:35.165
<v Speaker 1>Before

00:20:35.165 --> 00:20:37.830
<v Speaker 1>I kind of go into the Promscale vision,

00:20:37.830 --> 00:20:40.230
<v Speaker 1>David, do you want to kind of kick

00:20:40.230 --> 00:20:42.549
<v Speaker 1>off the install of tabs?

00:20:42.710 --> 00:20:44.629
<v Speaker 1>Because it might take a few minutes.

00:20:45.110 --> 00:20:47.590
<v Speaker 1>So we can come back to this after.

00:20:47.590 --> 00:20:48.789
<v Speaker 0>Of course. No worries.

00:20:49.765 --> 00:20:52.245
<v Speaker 0>So we have my screen share

00:20:52.405 --> 00:20:56.164
<v Speaker 0>up now. I'm looking at the Promscale repository,

00:20:56.245 --> 00:20:59.284
<v Speaker 0>but here's the Tobs one. Okay. So

00:21:01.045 --> 00:21:02.965
<v Speaker 0>in order to install Tobs,

00:21:03.045 --> 00:21:04.405
<v Speaker 0>will I just do the

00:21:05.070 --> 00:21:06.509
<v Speaker 0>the curl bash?

00:21:07.070 --> 00:21:08.589
<v Speaker 1>Yep. Yep. And

00:21:09.710 --> 00:21:11.950
<v Speaker 1>and we also have, you

00:21:12.269 --> 00:21:12.749
<v Speaker 1>know,

00:21:13.309 --> 00:21:15.950
<v Speaker 1>direct downloads from our

00:21:16.029 --> 00:21:18.590
<v Speaker 1>release page on GitHub because I know a

00:21:18.590 --> 00:21:20.590
<v Speaker 1>lot of people don't like curl bash,

00:21:21.034 --> 00:21:23.835
<v Speaker 1>But yeah, that's the easiest way to do

00:21:23.835 --> 00:21:26.075
<v Speaker 1>it. I'm happy to curl bash all day.

00:21:26.075 --> 00:21:27.835
<v Speaker 0>Don't worry about it. Okay. Yeah.

00:21:29.995 --> 00:21:31.514
<v Speaker 0>Alright. Yeah. Just move

00:21:31.995 --> 00:21:32.474
<v Speaker 0>it.

00:21:33.914 --> 00:21:35.570
<v Speaker 1>Yep. Alright.

00:21:41.330 --> 00:21:43.730
<v Speaker 0>And then it will oh, what

00:21:44.530 --> 00:21:46.610
<v Speaker 0>keep context will it use? Whatever I've currently

00:21:46.610 --> 00:21:47.250
<v Speaker 0>got?

00:21:47.730 --> 00:21:48.130
<v Speaker 1>Yeah.

00:21:48.544 --> 00:21:49.664
<v Speaker 2>Yep. Yep.

00:21:54.705 --> 00:21:57.585
<v Speaker 2>Yes. Fingers crossed. Like, you're just trying the

00:21:57.585 --> 00:22:00.304
<v Speaker 2>release which like, this it was released, like,

00:22:00.304 --> 00:22:01.345
<v Speaker 2>couple of hours back.

00:22:02.730 --> 00:22:05.450
<v Speaker 1>And we've already had one hotfix. So

00:22:06.890 --> 00:22:09.210
<v Speaker 2>Okay. So yours it says that failed to

00:22:09.210 --> 00:22:11.450
<v Speaker 2>pass. Can you just show me the Helm

00:22:11.450 --> 00:22:12.650
<v Speaker 2>version you are using?

00:22:13.930 --> 00:22:15.770
<v Speaker 0>Yeah. Yeah. Sure. So

00:22:17.315 --> 00:22:19.394
<v Speaker 0>oh, it's a Go app. Right? So

00:22:22.195 --> 00:22:23.554
<v Speaker 0>three five four.

00:22:26.515 --> 00:22:28.434
<v Speaker 2>Okay. It should be good. Like, it says

00:22:28.434 --> 00:22:31.315
<v Speaker 2>that parse helm show values from YAML to

00:22:31.315 --> 00:22:33.770
<v Speaker 2>JSON mapping are not allowed in this context

00:22:33.770 --> 00:22:34.729
<v Speaker 2>stream.

00:22:35.850 --> 00:22:38.249
<v Speaker 2>So Have you seen that before?

00:22:39.210 --> 00:22:40.169
<v Speaker 2>No. Like,

00:22:40.330 --> 00:22:42.570
<v Speaker 2>it's just passing the values. What

00:22:43.929 --> 00:22:45.850
<v Speaker 2>can we do for this is

00:22:48.085 --> 00:22:48.804
<v Speaker 1>Failed

00:22:49.125 --> 00:22:51.365
<v Speaker 1>to I mean, when and though try again.

00:22:51.365 --> 00:22:51.924
<v Speaker 0>Right?

00:22:52.565 --> 00:22:53.285
<v Speaker 1>Yeah. Yeah.

00:23:00.309 --> 00:23:01.830
<v Speaker 1>Failed

00:23:01.830 --> 00:23:03.429
<v Speaker 1>to post home

00:23:03.590 --> 00:23:07.349
<v Speaker 1>for values from YAML to JSON YAML.

00:23:08.549 --> 00:23:11.029
<v Speaker 0>Let's talk about what tops install is doing.

00:23:11.029 --> 00:23:11.669
<v Speaker 0>Alright?

00:23:11.830 --> 00:23:12.549
<v Speaker 0>It

00:23:12.950 --> 00:23:13.830
<v Speaker 0>is

00:23:15.885 --> 00:23:16.445
<v Speaker 0>installing

00:23:16.925 --> 00:23:19.565
<v Speaker 0>things from this chart repository? Yes.

00:23:21.165 --> 00:23:22.125
<v Speaker 1>This.

00:23:26.525 --> 00:23:28.365
<v Speaker 0>And then there's this values file that was

00:23:28.365 --> 00:23:29.565
<v Speaker 0>changed four hours ago.

00:23:31.220 --> 00:23:34.340
<v Speaker 0>Right. We suspect maybe there's a I bet

00:23:34.340 --> 00:23:36.020
<v Speaker 0>it's like a space or something in this

00:23:36.020 --> 00:23:36.659
<v Speaker 0>file.

00:23:41.700 --> 00:23:42.980
<v Speaker 0>Alright. Let's So.

00:23:47.235 --> 00:23:49.235
<v Speaker 0>I'm just gonna validate your YAML just in

00:23:49.235 --> 00:23:50.754
<v Speaker 0>case. Okay.

00:23:50.755 --> 00:23:51.475
<v Speaker 1>Great.

00:23:53.475 --> 00:23:54.835
<v Speaker 1>Vinit, could you,

00:23:55.635 --> 00:23:56.995
<v Speaker 1>kind of Google that error?

00:23:58.710 --> 00:24:00.549
<v Speaker 2>It's like I'm just able to I just

00:24:00.549 --> 00:24:01.910
<v Speaker 2>went into the code with it. I'm just

00:24:01.910 --> 00:24:03.910
<v Speaker 2>looking at so help show values. So what

00:24:03.910 --> 00:24:06.710
<v Speaker 2>we do before doing help ins help install

00:24:06.710 --> 00:24:08.789
<v Speaker 2>is that we do help show values,

00:24:08.950 --> 00:24:10.790
<v Speaker 2>and and we try to pass it to

00:24:10.790 --> 00:24:12.870
<v Speaker 2>Jason to analyze the data in the values.

00:24:12.915 --> 00:24:15.955
<v Speaker 0>So help show values as not

00:24:15.955 --> 00:24:18.995
<v Speaker 2>giving the results as expected is my understanding.

00:24:19.075 --> 00:24:21.395
<v Speaker 2>So can you just try to run help

00:24:21.395 --> 00:24:23.955
<v Speaker 2>show values for the release tops for the

00:24:23.955 --> 00:24:24.995
<v Speaker 2>help chat

00:24:25.475 --> 00:24:27.235
<v Speaker 2>tops so that

00:24:27.940 --> 00:24:29.299
<v Speaker 2>what's happening there.

00:24:29.460 --> 00:24:31.300
<v Speaker 0>Yeah. Of course. No worries. Let's just take

00:24:31.300 --> 00:24:32.660
<v Speaker 0>clone as repository.

00:24:34.900 --> 00:24:36.740
<v Speaker 0>Give that a Or the easiest way we

00:24:36.740 --> 00:24:38.740
<v Speaker 2>can do is that maybe you can just

00:24:38.740 --> 00:24:41.300
<v Speaker 2>point to these values and chat explicitly and

00:24:41.300 --> 00:24:42.764
<v Speaker 2>check does that work.

00:24:43.725 --> 00:24:45.004
<v Speaker 0>Show

00:24:45.164 --> 00:24:45.964
<v Speaker 0>values.

00:24:49.725 --> 00:24:50.445
<v Speaker 0>Oh, that's good.

00:24:54.360 --> 00:24:55.159
<v Speaker 2>Okay.

00:24:55.240 --> 00:24:55.879
<v Speaker 2>So

00:24:56.840 --> 00:24:58.360
<v Speaker 2>let's just run this

00:24:58.600 --> 00:25:00.999
<v Speaker 2>command, like, helm install

00:25:01.160 --> 00:25:03.880
<v Speaker 2>sorry, tabs install. Sorry. Yeah. Tabs install and

00:25:03.880 --> 00:25:05.960
<v Speaker 2>just point to the chart directory you have

00:25:05.960 --> 00:25:08.679
<v Speaker 2>locally just to understand, like, does it

00:25:09.185 --> 00:25:09.825
<v Speaker 0>make

00:25:10.145 --> 00:25:12.065
<v Speaker 0>So yep. I can see I can see

00:25:12.065 --> 00:25:14.144
<v Speaker 2>and I can see and chart.

00:25:14.705 --> 00:25:16.945
<v Speaker 2>I can see and point

00:25:16.945 --> 00:25:18.465
<v Speaker 2>it to the current working

00:25:18.865 --> 00:25:19.985
<v Speaker 2>directory. Yep.

00:25:22.545 --> 00:25:23.745
<v Speaker 2>And it's the same.

00:25:24.385 --> 00:25:24.785
<v Speaker 2>So

00:25:25.240 --> 00:25:26.519
<v Speaker 2>very strangely.

00:25:31.000 --> 00:25:33.080
<v Speaker 2>But maybe just you can just go with

00:25:33.080 --> 00:25:34.919
<v Speaker 2>the Promscale vision and after I'll try to

00:25:34.919 --> 00:25:36.679
<v Speaker 2>set up this environment and try to look

00:25:36.679 --> 00:25:38.120
<v Speaker 2>at the issue in the meantime.

00:25:38.775 --> 00:25:39.415
<v Speaker 1>Okay.

00:25:39.895 --> 00:25:41.975
<v Speaker 1>What do you think? Yeah. And and we

00:25:41.975 --> 00:25:44.215
<v Speaker 1>do have a backup

00:25:44.775 --> 00:25:45.815
<v Speaker 1>environment

00:25:46.375 --> 00:25:47.335
<v Speaker 1>in case

00:25:47.815 --> 00:25:49.735
<v Speaker 1>in case something like this

00:25:49.975 --> 00:25:50.855
<v Speaker 1>happened.

00:25:51.335 --> 00:25:51.975
<v Speaker 1>But yeah.

00:25:55.590 --> 00:25:56.309
<v Speaker 1>Okay.

00:25:56.950 --> 00:26:00.070
<v Speaker 1>Yeah. So let me just give a quick

00:26:00.070 --> 00:26:01.030
<v Speaker 1>overview

00:26:01.030 --> 00:26:01.750
<v Speaker 1>of

00:26:05.750 --> 00:26:07.855
<v Speaker 1>of kind of where we are going with

00:26:07.855 --> 00:26:09.454
<v Speaker 1>the Promscale

00:26:10.014 --> 00:26:11.534
<v Speaker 1>products in general.

00:26:12.095 --> 00:26:14.494
<v Speaker 1>We kind of think that the Promscale

00:26:14.735 --> 00:26:15.534
<v Speaker 1>should

00:26:16.495 --> 00:26:17.614
<v Speaker 1>be the

00:26:18.014 --> 00:26:18.735
<v Speaker 1>flexible

00:26:20.090 --> 00:26:21.770
<v Speaker 1>data storage format

00:26:21.770 --> 00:26:23.530
<v Speaker 1>for the observability

00:26:23.530 --> 00:26:26.570
<v Speaker 1>data. I should say data storage system.

00:26:27.450 --> 00:26:29.289
<v Speaker 1>So we want to support,

00:26:30.730 --> 00:26:31.370
<v Speaker 1>different,

00:26:31.690 --> 00:26:32.730
<v Speaker 1>architectures

00:26:32.730 --> 00:26:34.650
<v Speaker 1>in terms of pull and push.

00:26:35.125 --> 00:26:38.004
<v Speaker 1>We want to support different formats

00:26:38.485 --> 00:26:40.644
<v Speaker 1>in terms of remote write

00:26:40.804 --> 00:26:41.924
<v Speaker 1>JSON

00:26:42.085 --> 00:26:42.884
<v Speaker 1>text,

00:26:44.565 --> 00:26:46.565
<v Speaker 1>different query languages,

00:26:46.965 --> 00:26:47.205
<v Speaker 1>different

00:26:49.460 --> 00:26:52.020
<v Speaker 1>data ages, and by that, I mean, support

00:26:52.020 --> 00:26:53.220
<v Speaker 1>for backfill.

00:26:53.380 --> 00:26:55.460
<v Speaker 1>We want to support different

00:26:56.100 --> 00:26:58.660
<v Speaker 1>data types, not only floats

00:26:58.660 --> 00:27:00.660
<v Speaker 1>that are traditional for metrics,

00:27:01.384 --> 00:27:02.024
<v Speaker 1>but

00:27:02.264 --> 00:27:03.865
<v Speaker 1>shrinkers and symbols

00:27:03.865 --> 00:27:05.144
<v Speaker 1>that kind of,

00:27:05.625 --> 00:27:08.424
<v Speaker 1>are used by other systems.

00:27:08.504 --> 00:27:10.344
<v Speaker 1>You can think of Telegraph

00:27:10.504 --> 00:27:14.184
<v Speaker 1>or something else and even different data

00:27:14.504 --> 00:27:16.105
<v Speaker 1>modalities or signals.

00:27:17.410 --> 00:27:19.730
<v Speaker 1>Right now, we support metrics,

00:27:20.130 --> 00:27:21.250
<v Speaker 1>but we

00:27:21.490 --> 00:27:24.450
<v Speaker 1>hope to expand with traces,

00:27:25.170 --> 00:27:26.930
<v Speaker 1>loggers, and events as well.

00:27:29.425 --> 00:27:31.265
<v Speaker 1>But you might think why

00:27:31.345 --> 00:27:34.065
<v Speaker 1>why have all this less ability? Why, for

00:27:34.065 --> 00:27:37.025
<v Speaker 1>example, do you want to put all of

00:27:37.025 --> 00:27:39.025
<v Speaker 1>your sync signals

00:27:39.265 --> 00:27:40.785
<v Speaker 1>into one database?

00:27:41.425 --> 00:27:41.905
<v Speaker 1>Well,

00:27:43.750 --> 00:27:45.909
<v Speaker 1>databases are hard to run,

00:27:47.110 --> 00:27:50.230
<v Speaker 1>and it's this thing called state,

00:27:50.390 --> 00:27:52.070
<v Speaker 1>which is the bane of

00:27:52.470 --> 00:27:54.150
<v Speaker 1>a lot of our existence.

00:27:57.335 --> 00:27:59.575
<v Speaker 1>Say this hard. Right? You have to have

00:27:59.575 --> 00:28:00.615
<v Speaker 1>PVCs.

00:28:00.775 --> 00:28:03.174
<v Speaker 1>You have to have proper backups,

00:28:03.255 --> 00:28:04.375
<v Speaker 1>high availability,

00:28:04.775 --> 00:28:05.735
<v Speaker 1>failover.

00:28:06.455 --> 00:28:09.255
<v Speaker 1>In addition to just state, there's the regular

00:28:09.255 --> 00:28:10.135
<v Speaker 1>problems

00:28:10.135 --> 00:28:11.975
<v Speaker 1>of dealing with the security

00:28:12.640 --> 00:28:13.279
<v Speaker 1>with

00:28:14.000 --> 00:28:15.519
<v Speaker 1>scaling and tuning.

00:28:16.000 --> 00:28:16.720
<v Speaker 1>So

00:28:18.559 --> 00:28:20.960
<v Speaker 1>and the valid question is why deal with

00:28:20.960 --> 00:28:22.639
<v Speaker 1>this multiple times?

00:28:22.880 --> 00:28:24.799
<v Speaker 1>If you could have just one database

00:28:25.174 --> 00:28:27.894
<v Speaker 1>where you throw all your data into,

00:28:28.054 --> 00:28:29.815
<v Speaker 1>isn't that preferable?

00:28:30.215 --> 00:28:32.775
<v Speaker 1>In addition to kind of the ease of

00:28:32.775 --> 00:28:33.575
<v Speaker 1>use

00:28:34.855 --> 00:28:35.255
<v Speaker 1>story,

00:28:38.010 --> 00:28:39.370
<v Speaker 1>There's also

00:28:41.610 --> 00:28:44.970
<v Speaker 1>an advantage in terms of analyzing the data.

00:28:45.130 --> 00:28:47.370
<v Speaker 1>If you have all of your data in

00:28:47.370 --> 00:28:48.730
<v Speaker 1>a single database,

00:28:48.730 --> 00:28:52.170
<v Speaker 1>you could use joins between the different data

00:28:52.170 --> 00:28:53.745
<v Speaker 1>types to do

00:28:54.545 --> 00:28:55.665
<v Speaker 1>correlations

00:28:56.225 --> 00:28:58.385
<v Speaker 1>and more powerful analytics

00:28:58.385 --> 00:28:59.585
<v Speaker 1>and prediction.

00:29:03.265 --> 00:29:03.905
<v Speaker 1>So yeah.

00:29:06.390 --> 00:29:08.230
<v Speaker 1>We have some resources

00:29:08.230 --> 00:29:11.270
<v Speaker 1>for you here, but I'm sure we'll also

00:29:11.270 --> 00:29:13.430
<v Speaker 1>have that at the

00:29:13.670 --> 00:29:16.710
<v Speaker 1>bottom of the video or whatever.

00:29:19.335 --> 00:29:21.335
<v Speaker 1>Yeah. Yeah. I like those those things to

00:29:21.335 --> 00:29:23.175
<v Speaker 0>the show notes. Don't worry. We'll make sure

00:29:23.175 --> 00:29:25.175
<v Speaker 0>they're available to people. They can check them

00:29:25.175 --> 00:29:25.654
<v Speaker 0>out.

00:29:27.015 --> 00:29:27.415
<v Speaker 1>Yeah.

00:29:31.810 --> 00:29:32.690
<v Speaker 1>Russell,

00:29:33.330 --> 00:29:35.330
<v Speaker 1>DMS would be my

00:29:35.890 --> 00:29:36.690
<v Speaker 1>my

00:29:36.930 --> 00:29:39.809
<v Speaker 1>first guess as well. But I think

00:29:40.210 --> 00:29:41.090
<v Speaker 1>with

00:29:41.250 --> 00:29:42.450
<v Speaker 1>show values,

00:29:42.610 --> 00:29:45.650
<v Speaker 1>it's probably

00:29:44.404 --> 00:29:46.965
<v Speaker 1>one of those rare cases where it's not

00:29:46.965 --> 00:29:47.764
<v Speaker 1>DNS.

00:29:48.565 --> 00:29:50.404
<v Speaker 0>Well, that's the trouble with the live demo.

00:29:50.404 --> 00:29:52.404
<v Speaker 0>Right? You never know what to expect. But

00:29:52.885 --> 00:29:53.684
<v Speaker 1>Yeah.

00:29:55.205 --> 00:29:56.005
<v Speaker 1>So,

00:29:56.005 --> 00:29:56.804
<v Speaker 1>Vineeth,

00:29:57.365 --> 00:29:58.245
<v Speaker 1>do you have any

00:29:59.860 --> 00:30:02.259
<v Speaker 1>suggestions or should we just

00:30:02.500 --> 00:30:04.099
<v Speaker 1>share your screen

00:30:04.260 --> 00:30:05.539
<v Speaker 1>with access

00:30:05.539 --> 00:30:06.179
<v Speaker 1>to

00:30:07.860 --> 00:30:09.219
<v Speaker 1>to our

00:30:09.779 --> 00:30:10.580
<v Speaker 1>Kubernetes

00:30:10.580 --> 00:30:11.220
<v Speaker 1>environment?

00:30:12.645 --> 00:30:15.685
<v Speaker 2>Yep. So currently, I I am just removing

00:30:15.685 --> 00:30:17.605
<v Speaker 2>the existing top setup so that I can

00:30:17.605 --> 00:30:19.765
<v Speaker 2>start sharing the screen and install the setup

00:30:19.765 --> 00:30:22.165
<v Speaker 2>again and to show it. So just give

00:30:22.165 --> 00:30:24.165
<v Speaker 2>me a few seconds so it's just getting

00:30:24.165 --> 00:30:24.565
<v Speaker 2>deleted.

00:30:25.520 --> 00:30:27.039
<v Speaker 0>Of course. No problem. Okay.

00:30:28.080 --> 00:30:30.239
<v Speaker 1>I So can I ask a few questions?

00:30:30.480 --> 00:30:31.200
<v Speaker 1>Sure.

00:30:33.039 --> 00:30:35.840
<v Speaker 0>Alright. So your your slides have definitely

00:30:36.159 --> 00:30:38.400
<v Speaker 0>they set a really good scene about where

00:30:38.400 --> 00:30:39.440
<v Speaker 0>I think all of these things,

00:30:40.054 --> 00:30:41.975
<v Speaker 0>like connect together. So I just wanted to

00:30:41.975 --> 00:30:44.215
<v Speaker 0>make sure that my understanding of it was

00:30:44.215 --> 00:30:45.335
<v Speaker 0>correct. So

00:30:46.455 --> 00:30:47.494
<v Speaker 0>Promscale

00:30:47.895 --> 00:30:48.855
<v Speaker 0>is like,

00:30:49.095 --> 00:30:49.815
<v Speaker 0>I mean,

00:30:51.174 --> 00:30:53.335
<v Speaker 0>it's really just like a connector, I think

00:30:53.335 --> 00:30:55.300
<v Speaker 0>you called it, right? It allows you to

00:30:55.300 --> 00:30:55.860
<v Speaker 0>use

00:30:56.100 --> 00:30:57.380
<v Speaker 0>timescale DB

00:30:57.540 --> 00:31:00.580
<v Speaker 0>for the long term storage of Prometheus data.

00:31:00.580 --> 00:31:02.900
<v Speaker 0>So what you're saying is like, you are

00:31:02.900 --> 00:31:03.620
<v Speaker 0>aware

00:31:03.860 --> 00:31:06.340
<v Speaker 0>that Kubernetes exists and people are running Prometheus

00:31:06.340 --> 00:31:07.940
<v Speaker 0>and we've got open metrics and all of

00:31:07.940 --> 00:31:09.825
<v Speaker 0>these things that are just automatically

00:31:09.825 --> 00:31:12.385
<v Speaker 0>deployed. Like, you you highlight Prometheus,

00:31:12.385 --> 00:31:14.225
<v Speaker 0>which I think is a fantastic example

00:31:14.385 --> 00:31:16.625
<v Speaker 0>of just the community rallying together to get

00:31:16.625 --> 00:31:19.345
<v Speaker 0>metrics to be almost commoditized

00:31:19.425 --> 00:31:20.304
<v Speaker 0>within our Kubernetes.

00:31:21.610 --> 00:31:23.850
<v Speaker 0>And Promscale just allows you to drop that

00:31:23.850 --> 00:31:26.730
<v Speaker 0>into the cluster and take advantage and consume

00:31:26.730 --> 00:31:29.370
<v Speaker 0>those metrics, but while using TimescaleDB on the

00:31:29.370 --> 00:31:30.090
<v Speaker 0>backend.

00:31:30.490 --> 00:31:33.210
<v Speaker 0>And I thought that was, is really interesting.

00:31:33.904 --> 00:31:36.304
<v Speaker 0>Does that mean that Promscale,

00:31:36.304 --> 00:31:37.504
<v Speaker 0>it just has like

00:31:37.904 --> 00:31:40.065
<v Speaker 0>a limited time to left data? Is it

00:31:40.065 --> 00:31:42.225
<v Speaker 0>like three days, seven days and then everything

00:31:42.225 --> 00:31:43.904
<v Speaker 0>falls back to timescale DB?

00:31:47.440 --> 00:31:48.400
<v Speaker 1>Promiscule

00:31:48.400 --> 00:31:51.840
<v Speaker 1>itself is completely only a soft state. It

00:31:51.840 --> 00:31:53.920
<v Speaker 1>doesn't even save data

00:31:54.240 --> 00:31:54.960
<v Speaker 1>for

00:31:55.920 --> 00:31:56.800
<v Speaker 1>minutes.

00:31:57.120 --> 00:31:58.080
<v Speaker 1>It it actually

00:31:58.800 --> 00:32:02.385
<v Speaker 1>immediately puts the data into time scale to

00:32:02.385 --> 00:32:04.865
<v Speaker 1>be itself. Okay. So Promscale still runs in

00:32:04.865 --> 00:32:07.344
<v Speaker 0>the cluster and that's providing my

00:32:07.664 --> 00:32:10.865
<v Speaker 0>shorter term storage for things to be consumed

00:32:10.865 --> 00:32:13.265
<v Speaker 0>through the collectors which then oh, yeah. It

00:32:13.265 --> 00:32:15.184
<v Speaker 0>uses the remote rate and read API

00:32:15.480 --> 00:32:16.759
<v Speaker 0>to prompt. Yeah. Okay.

00:32:17.240 --> 00:32:19.400
<v Speaker 1>So is it is it you could think

00:32:19.400 --> 00:32:21.880
<v Speaker 1>of Promscale

00:32:21.880 --> 00:32:23.480
<v Speaker 1>as an alternative

00:32:23.480 --> 00:32:26.999
<v Speaker 1>to Cortex or Thanos or Victoria Metrics

00:32:27.000 --> 00:32:29.320
<v Speaker 1>or any of the other long term stores.

00:32:29.320 --> 00:32:31.664
<v Speaker 0>Yeah. And the way that

00:32:32.304 --> 00:32:35.905
<v Speaker 1>Prometheus works is the remote, right, and point

00:32:35.905 --> 00:32:36.945
<v Speaker 1>actually

00:32:39.985 --> 00:32:41.585
<v Speaker 1>pushes data out

00:32:41.825 --> 00:32:43.585
<v Speaker 1>not instantaneously,

00:32:43.585 --> 00:32:46.220
<v Speaker 1>but pretty close to instantaneously

00:32:46.220 --> 00:32:49.020
<v Speaker 1>as soon as the scripts it. So, like,

00:32:49.020 --> 00:32:50.700
<v Speaker 1>the latency between

00:32:51.660 --> 00:32:55.019
<v Speaker 1>Prometheus having the data and the data being

00:32:55.100 --> 00:32:56.220
<v Speaker 1>inside

00:32:56.220 --> 00:32:57.020
<v Speaker 1>of

00:32:58.255 --> 00:32:59.135
<v Speaker 1>Promscale,

00:32:59.135 --> 00:33:00.095
<v Speaker 1>TimescaleDB,

00:33:00.095 --> 00:33:02.255
<v Speaker 1>or however you want to think about it,

00:33:02.255 --> 00:33:03.295
<v Speaker 1>that latency

00:33:03.295 --> 00:33:06.015
<v Speaker 1>is usually less than a second.

00:33:08.895 --> 00:33:13.000
<v Speaker 0>Okay. Yeah. Yeah. So when you mentioned

00:33:13.000 --> 00:33:16.039
<v Speaker 0>that I can send you know, an SQL

00:33:16.039 --> 00:33:16.919
<v Speaker 0>query

00:33:17.400 --> 00:33:19.960
<v Speaker 0>to from Grafana to timescale. That's just how

00:33:19.960 --> 00:33:21.960
<v Speaker 0>that works. Right? As we've covered timescale a

00:33:21.960 --> 00:33:23.480
<v Speaker 0>little bit in the past, I'm I'm pretty

00:33:23.480 --> 00:33:26.164
<v Speaker 0>happy with that now. Now is Promscale

00:33:26.485 --> 00:33:28.565
<v Speaker 0>is it just forwarding the query to the

00:33:28.565 --> 00:33:30.485
<v Speaker 0>local Prometheus or is it actually doing any

00:33:30.485 --> 00:33:32.804
<v Speaker 0>transpilation and then send it to timescale?

00:33:33.765 --> 00:33:35.365
<v Speaker 1>So

00:33:36.900 --> 00:33:39.540
<v Speaker 1>on the query side, the PromScale

00:33:39.540 --> 00:33:40.500
<v Speaker 1>does not

00:33:41.460 --> 00:33:42.900
<v Speaker 1>contact Prometheus

00:33:42.900 --> 00:33:44.740
<v Speaker 1>at all. It

00:33:46.020 --> 00:33:49.059
<v Speaker 1>it takes the PromQL query,

00:33:49.380 --> 00:33:50.180
<v Speaker 1>converts

00:33:50.180 --> 00:33:52.845
<v Speaker 1>it to a SQL query

00:33:53.165 --> 00:33:55.405
<v Speaker 1>that it then executes

00:33:55.405 --> 00:33:56.845
<v Speaker 1>on the database.

00:33:57.005 --> 00:33:59.005
<v Speaker 1>It gets the data. It does some post

00:33:59.005 --> 00:33:59.885
<v Speaker 1>processing,

00:34:00.925 --> 00:34:01.885
<v Speaker 1>namely

00:34:02.285 --> 00:34:04.205
<v Speaker 1>some of the functions

00:34:04.205 --> 00:34:06.045
<v Speaker 1>that PromQL provides,

00:34:06.370 --> 00:34:08.050
<v Speaker 1>we just reuse that

00:34:08.690 --> 00:34:10.929
<v Speaker 1>in the goal layer and the connector, if

00:34:10.929 --> 00:34:13.090
<v Speaker 1>you will, and then it returns

00:34:13.170 --> 00:34:14.130
<v Speaker 1>the results.

00:34:14.690 --> 00:34:15.650
<v Speaker 2>Fancy.

00:34:15.650 --> 00:34:16.290
<v Speaker 2>So

00:34:17.170 --> 00:34:19.409
<v Speaker 2>just a heads up here, David. Can you

00:34:19.409 --> 00:34:21.295
<v Speaker 2>just share screen? I just think I just

00:34:21.295 --> 00:34:22.735
<v Speaker 2>found the issue. Maybe we'll just give that

00:34:22.735 --> 00:34:24.815
<v Speaker 2>right. If not, I'll start sharing the screen

00:34:24.815 --> 00:34:27.215
<v Speaker 2>and write the demo. So can you just

00:34:27.215 --> 00:34:29.695
<v Speaker 2>get into the tops repository, like, the web

00:34:29.695 --> 00:34:31.455
<v Speaker 2>one web? So I I just wanted to

00:34:31.455 --> 00:34:34.010
<v Speaker 2>point you to an issue there. So there

00:34:34.010 --> 00:34:35.609
<v Speaker 2>is an issue already filed and we closed

00:34:35.609 --> 00:34:37.929
<v Speaker 2>it. So it's the cube config permission issue.

00:34:37.929 --> 00:34:39.690
<v Speaker 2>So can you give your cube config all

00:34:39.690 --> 00:34:40.730
<v Speaker 2>the permissions,

00:34:40.889 --> 00:34:42.969
<v Speaker 2>like, the seven seven seven or something like

00:34:42.969 --> 00:34:46.329
<v Speaker 2>that? So just change the cube config permissions

00:34:46.329 --> 00:34:49.065
<v Speaker 2>so that it's available for everyone.

00:34:49.225 --> 00:34:49.785
<v Speaker 2>So

00:34:52.665 --> 00:34:54.265
<v Speaker 0>so should I use my cube config or

00:34:54.265 --> 00:34:57.145
<v Speaker 0>your cube config? Yep. Your config. Yeah. Your

00:34:57.145 --> 00:34:58.985
<v Speaker 2>cube config. So whatever you have tried so

00:34:58.985 --> 00:35:00.505
<v Speaker 2>far. So I'm I just want to say

00:35:00.505 --> 00:35:02.265
<v Speaker 2>that change the file permissions.

00:35:02.630 --> 00:35:04.230
<v Speaker 2>So there is an issue with the file

00:35:04.230 --> 00:35:05.910
<v Speaker 2>permissions with helm.

00:35:05.910 --> 00:35:08.790
<v Speaker 2>So you just need to give the file

00:35:08.790 --> 00:35:10.550
<v Speaker 2>all root privileges.

00:35:12.550 --> 00:35:14.950
<v Speaker 2>So it's a it's absolute issue with helm,

00:35:14.950 --> 00:35:17.234
<v Speaker 2>and I just went through the closed issues

00:35:17.234 --> 00:35:18.515
<v Speaker 2>and tops and then

00:35:19.155 --> 00:35:21.954
<v Speaker 2>yeah. Just try to run Helm installments. Yes.

00:35:21.954 --> 00:35:23.155
<v Speaker 2>Just install here.

00:35:23.395 --> 00:35:25.234
<v Speaker 2>Let's see how does that work.

00:35:29.720 --> 00:35:31.160
<v Speaker 2>So it says the same?

00:35:31.400 --> 00:35:32.760
<v Speaker 1>Yeah. Yeah. It

00:35:35.160 --> 00:35:37.079
<v Speaker 0>is definitely 777

00:35:37.079 --> 00:35:39.800
<v Speaker 0>now. I'll just reset it one more time.

00:35:41.400 --> 00:35:42.760
<v Speaker 0>Dot q config.

00:35:44.675 --> 00:35:46.515
<v Speaker 0>At host install.

00:35:53.635 --> 00:35:55.875
<v Speaker 0>Yeah. I think it may be something different.

00:35:58.050 --> 00:35:58.770
<v Speaker 0>Strange.

00:35:58.930 --> 00:35:59.570
<v Speaker 2>So

00:35:59.810 --> 00:36:00.610
<v Speaker 2>so

00:36:00.770 --> 00:36:02.290
<v Speaker 2>okay. I I haven't

00:36:02.770 --> 00:36:05.010
<v Speaker 2>okay. I cannot okay. I just thought of

00:36:05.010 --> 00:36:07.410
<v Speaker 2>sharing you the issue which was opened upstream

00:36:07.410 --> 00:36:09.890
<v Speaker 2>and they just changed this cube config file

00:36:09.890 --> 00:36:11.345
<v Speaker 2>and it was just fixed. So I was

00:36:11.345 --> 00:36:13.825
<v Speaker 2>just thinking maybe that's the issue to

00:36:14.065 --> 00:36:15.425
<v Speaker 2>for this thing.

00:36:17.345 --> 00:36:18.065
<v Speaker 0>Mhmm.

00:36:18.545 --> 00:36:19.265
<v Speaker 1>Yeah.

00:36:21.585 --> 00:36:23.505
<v Speaker 0>So what's the cube config you sent me?

00:36:23.505 --> 00:36:25.184
<v Speaker 0>Is this a cluster where it may work?

00:36:26.520 --> 00:36:28.360
<v Speaker 2>Yeah. So I just want to install it

00:36:28.360 --> 00:36:30.440
<v Speaker 2>on my end because only the installation is

00:36:30.440 --> 00:36:32.120
<v Speaker 2>not working, but you can drive the demo

00:36:32.120 --> 00:36:34.280
<v Speaker 2>forward. So I'll just share the screen for

00:36:34.280 --> 00:36:36.680
<v Speaker 2>a couple of minutes to install and

00:36:37.000 --> 00:36:38.920
<v Speaker 2>set the things up. Yeah. Go for it.

00:36:40.275 --> 00:36:43.875
<v Speaker 2>So I'll just start sharing my screen. Yep.

00:36:45.075 --> 00:36:46.915
<v Speaker 2>I think you're able to see my screen

00:36:46.915 --> 00:36:47.555
<v Speaker 2>now.

00:36:49.315 --> 00:36:50.915
<v Speaker 0>Yep. Let me just pop that up.

00:36:53.300 --> 00:36:54.740
<v Speaker 0>Alright. We can see it.

00:36:55.700 --> 00:36:56.340
<v Speaker 2>Yeah.

00:37:00.660 --> 00:37:02.740
<v Speaker 2>So this is the Kubernetes cluster which I

00:37:02.740 --> 00:37:05.140
<v Speaker 2>have is in DigitalOcean, and it's in New

00:37:05.140 --> 00:37:06.845
<v Speaker 2>York region. So there will be a slight

00:37:06.845 --> 00:37:09.164
<v Speaker 2>latency issue. So just bear with me on

00:37:09.164 --> 00:37:09.805
<v Speaker 2>that.

00:37:13.244 --> 00:37:15.484
<v Speaker 2>I'm turning problems installed to the cluster. This

00:37:15.484 --> 00:37:17.565
<v Speaker 2>has the cube system components, nothing

00:37:17.885 --> 00:37:18.525
<v Speaker 2>else.

00:37:19.484 --> 00:37:21.724
<v Speaker 2>So it's just running the

00:37:22.130 --> 00:37:23.330
<v Speaker 2>prompt install.

00:37:24.290 --> 00:37:25.650
<v Speaker 2>By the way, like, if you want to

00:37:25.650 --> 00:37:27.970
<v Speaker 2>install Promscale and the TimescaleDB,

00:37:27.970 --> 00:37:30.210
<v Speaker 2>we are we do have our tops,

00:37:30.530 --> 00:37:32.610
<v Speaker 2>like, the Promscale help chart dedicatedly for you.

00:37:32.610 --> 00:37:35.365
<v Speaker 2>You can directly use the Promscale help chart,

00:37:35.365 --> 00:37:37.684
<v Speaker 2>and then you can just get started with

00:37:37.684 --> 00:37:39.845
<v Speaker 2>Promscale. So tops is something like you want

00:37:39.845 --> 00:37:42.325
<v Speaker 2>to get the complete absorbency stack, then you

00:37:42.325 --> 00:37:44.565
<v Speaker 2>can just get into tops. If not, you

00:37:44.565 --> 00:37:46.724
<v Speaker 2>just want Promscale with Timescale DB, you can

00:37:46.724 --> 00:37:49.605
<v Speaker 2>directly use the health chart of

00:37:51.040 --> 00:37:52.880
<v Speaker 2>Promscale and time scale DB.

00:37:54.560 --> 00:37:56.880
<v Speaker 2>So as it's getting started there, let's just

00:37:56.880 --> 00:37:59.119
<v Speaker 2>do get parts to understand what it's exactly

00:37:59.119 --> 00:38:00.160
<v Speaker 2>doing there.

00:38:01.359 --> 00:38:03.839
<v Speaker 2>So it says it's installing the observability stack.

00:38:19.660 --> 00:38:21.420
<v Speaker 1>In in the meantime,

00:38:21.580 --> 00:38:22.300
<v Speaker 1>actually,

00:38:25.820 --> 00:38:26.460
<v Speaker 1>David,

00:38:26.860 --> 00:38:29.340
<v Speaker 1>can you try on your machine

00:38:29.340 --> 00:38:30.140
<v Speaker 1>running

00:38:30.140 --> 00:38:32.220
<v Speaker 1>the and

00:38:32.220 --> 00:38:35.180
<v Speaker 1>passing it to

00:38:34.075 --> 00:38:36.315
<v Speaker 1>yamllint.com?

00:38:39.115 --> 00:38:40.635
<v Speaker 0>Okay. So what do want me to do?

00:38:40.635 --> 00:38:41.435
<v Speaker 0>Sorry. You want me to

00:38:43.995 --> 00:38:46.900
<v Speaker 1>The show values that we have before

00:38:47.140 --> 00:38:48.260
<v Speaker 1>that command

00:38:49.380 --> 00:38:51.460
<v Speaker 1>move it into p b copy.

00:38:52.100 --> 00:38:55.540
<v Speaker 0>Yep. Okay. So we wanna go to the

00:38:56.020 --> 00:38:57.540
<v Speaker 0>tops chart.

00:38:57.540 --> 00:38:59.780
<v Speaker 0>We run helm show values. We want a

00:38:59.780 --> 00:39:01.220
<v Speaker 0>p b copy to my buffer.

00:39:03.665 --> 00:39:05.425
<v Speaker 0>Oh, yeah. I've got a relative path on

00:39:05.425 --> 00:39:06.785
<v Speaker 0>my cube config.

00:39:07.345 --> 00:39:09.665
<v Speaker 0>So let's do Promscale.

00:39:10.065 --> 00:39:10.785
<v Speaker 0>Yep.

00:39:11.585 --> 00:39:13.745
<v Speaker 0>P b copy. And you want me to

00:39:13.745 --> 00:39:15.745
<v Speaker 0>drop this into a YAMLlinter?

00:39:16.830 --> 00:39:19.630
<v Speaker 1>Yeah. YAMLlinter.com.

00:39:24.430 --> 00:39:25.390
<v Speaker 0>It is

00:39:25.550 --> 00:39:26.110
<v Speaker 0>valid.

00:39:26.350 --> 00:39:28.030
<v Speaker 1>Valid? YAML.

00:39:29.630 --> 00:39:30.350
<v Speaker 1>Interesting.

00:39:30.510 --> 00:39:32.885
<v Speaker 0>Yeah. I have. I mean, could it be

00:39:32.885 --> 00:39:33.765
<v Speaker 0>my cluster?

00:39:34.484 --> 00:39:36.805
<v Speaker 0>I mean I don't think it's your cluster.

00:39:36.805 --> 00:39:38.005
<v Speaker 1>It might be like

00:39:39.685 --> 00:39:41.525
<v Speaker 1>I have a feeling it might be like

00:39:41.525 --> 00:39:42.245
<v Speaker 1>the

00:39:42.724 --> 00:39:46.645
<v Speaker 1>YAML library on your system, but I don't

00:39:45.660 --> 00:39:47.020
<v Speaker 1>know actually

00:39:47.020 --> 00:39:48.140
<v Speaker 1>how to

00:39:48.539 --> 00:39:50.299
<v Speaker 0>Should we upgrade helm just in case? I

00:39:50.299 --> 00:39:51.500
<v Speaker 1>have check that.

00:39:55.260 --> 00:39:56.619
<v Speaker 0>Maybe my helm's a little.

00:40:01.865 --> 00:40:02.825
<v Speaker 0>Let's see.

00:40:06.345 --> 00:40:07.785
<v Speaker 0>Of course now we have to wait on

00:40:07.785 --> 00:40:10.025
<v Speaker 0>brew which is not exactly fast. Yeah.

00:40:13.305 --> 00:40:16.505
<v Speaker 0>Let's see, do we have

00:40:18.180 --> 00:40:19.460
<v Speaker 0>upgrade?

00:40:22.260 --> 00:40:24.820
<v Speaker 1>And they always get confused before

00:40:24.900 --> 00:40:28.020
<v Speaker 1>between brew upgrade and brew update.

00:40:28.340 --> 00:40:30.685
<v Speaker 1>But yeah. Yeah. I think d five four

00:40:30.685 --> 00:40:32.445
<v Speaker 0>is the latest. So either the venture just

00:40:32.445 --> 00:40:33.885
<v Speaker 0>a bug in that version.

00:40:34.925 --> 00:40:37.165
<v Speaker 0>Yeah. You can't downgrade with brews. I think

00:40:37.165 --> 00:40:38.765
<v Speaker 0>I'm kinda stuck with this one.

00:40:39.085 --> 00:40:40.925
<v Speaker 0>We do have a question from

00:40:40.925 --> 00:40:43.484
<v Speaker 0>Russell if we wanna tackle that just now.

00:40:44.880 --> 00:40:46.240
<v Speaker 0>Russell is asking,

00:40:46.480 --> 00:40:48.720
<v Speaker 0>am I right in thinking that timescale DB

00:40:49.119 --> 00:40:51.200
<v Speaker 0>as a back end could live outside of

00:40:51.200 --> 00:40:52.640
<v Speaker 0>my Kubernetes cluster?

00:40:54.000 --> 00:40:54.960
<v Speaker 1>Yes.

00:40:55.039 --> 00:40:55.440
<v Speaker 1>Absolutely.

00:40:56.385 --> 00:40:57.265
<v Speaker 1>You can

00:41:00.705 --> 00:41:03.825
<v Speaker 1>actually, you can have both Promscale

00:41:03.825 --> 00:41:05.185
<v Speaker 1>and TimescaleDB

00:41:05.185 --> 00:41:07.905
<v Speaker 1>live outside your closet, but Promscale

00:41:07.905 --> 00:41:10.145
<v Speaker 1>can live either inside or outside.

00:41:10.960 --> 00:41:11.600
<v Speaker 1>So

00:41:11.760 --> 00:41:12.480
<v Speaker 1>it's

00:41:13.840 --> 00:41:15.360
<v Speaker 1>those two components,

00:41:15.360 --> 00:41:17.840
<v Speaker 1>you have some some flexibility

00:41:17.840 --> 00:41:18.480
<v Speaker 1>in.

00:41:19.360 --> 00:41:20.080
<v Speaker 0>Right.

00:41:20.400 --> 00:41:22.000
<v Speaker 0>Beneath, did you install,

00:41:22.000 --> 00:41:25.195
<v Speaker 0>Harish? Okay? Yep. Yep. So you're you're can

00:41:25.195 --> 00:41:26.395
<v Speaker 2>you just share

00:41:26.395 --> 00:41:28.475
<v Speaker 2>the screen for me, like Yeah. Of course.

00:41:28.475 --> 00:41:30.315
<v Speaker 0>Yeah. I'll put your screen up. Hold on.

00:41:30.635 --> 00:41:32.075
<v Speaker 0>Yep. There we go.

00:41:32.395 --> 00:41:33.035
<v Speaker 2>So

00:41:33.195 --> 00:41:34.155
<v Speaker 2>yes. So

00:41:34.395 --> 00:41:37.115
<v Speaker 2>one click, we just ran this tabs install

00:41:37.115 --> 00:41:37.915
<v Speaker 2>command and,

00:41:38.430 --> 00:41:40.430
<v Speaker 2>like, after a couple of minute, it just

00:41:40.430 --> 00:41:42.589
<v Speaker 2>gives you an output saying that happy observing

00:41:42.589 --> 00:41:44.349
<v Speaker 2>and what all good installed and how you

00:41:44.349 --> 00:41:46.829
<v Speaker 2>can manage for time scaling and problems. And

00:41:46.829 --> 00:41:48.270
<v Speaker 2>in the other tab, when I just took

00:41:48.270 --> 00:41:50.750
<v Speaker 2>the FPL gate ports, you have all the

00:41:50.829 --> 00:41:52.510
<v Speaker 2>all the stack installed for you.

00:41:53.265 --> 00:41:54.305
<v Speaker 2>So just to give

00:41:56.224 --> 00:41:57.744
<v Speaker 2>yep. So if you see here, we have

00:41:57.744 --> 00:41:59.744
<v Speaker 2>alert manager, Prometheus,

00:42:00.224 --> 00:42:03.105
<v Speaker 2>Grafana, and the Grafana DB to store all

00:42:03.105 --> 00:42:03.744
<v Speaker 2>this

00:42:04.224 --> 00:42:07.585
<v Speaker 2>extra dashboards and configurations metadata used for Grafana

00:42:07.585 --> 00:42:09.744
<v Speaker 2>and the timescale DB. So there's a job

00:42:09.240 --> 00:42:11.400
<v Speaker 2>to run it. And we have Prometheus operator

00:42:11.400 --> 00:42:13.880
<v Speaker 2>cube state metrics, and we do have Promscale

00:42:13.880 --> 00:42:15.640
<v Speaker 2>and timescale DB running here.

00:42:15.960 --> 00:42:18.760
<v Speaker 2>So this is the complete observability stack that

00:42:18.760 --> 00:42:20.360
<v Speaker 2>is offered by

00:42:21.160 --> 00:42:23.400
<v Speaker 2>the tops. They it just installed it. And

00:42:23.400 --> 00:42:25.640
<v Speaker 2>once you

00:42:24.675 --> 00:42:26.515
<v Speaker 2>stack has been installed, you can just do

00:42:26.515 --> 00:42:28.195
<v Speaker 2>Grafana and get password.

00:42:31.155 --> 00:42:33.075
<v Speaker 2>And you can just see the password for

00:42:33.075 --> 00:42:35.155
<v Speaker 2>the Grafana UI, and you do put forward

00:42:35.155 --> 00:42:37.075
<v Speaker 2>and just log in to the Grafana and

00:42:37.075 --> 00:42:38.195
<v Speaker 2>just start

00:42:38.589 --> 00:42:41.310
<v Speaker 2>performing the queries. So from here, I'll let

00:42:41.630 --> 00:42:43.950
<v Speaker 2>David take over the demo and drive it

00:42:43.950 --> 00:42:46.750
<v Speaker 2>forward for querying using SQL, prompt queue, and

00:42:46.750 --> 00:42:49.150
<v Speaker 2>everything. So, David, I just shared the queue

00:42:49.150 --> 00:42:50.990
<v Speaker 2>config file for you with you. So I

00:42:50.990 --> 00:42:52.990
<v Speaker 2>think you should be accessible you should be

00:42:52.990 --> 00:42:54.755
<v Speaker 2>able to access this cluster now.

00:42:55.155 --> 00:42:58.195
<v Speaker 0>Three cluster. I like it. Thanks. I'll keep

00:42:58.195 --> 00:43:00.195
<v Speaker 0>this one. Mhmm. Yep. Yeah.

00:43:00.995 --> 00:43:03.635
<v Speaker 0>Alright. I've got access to that. That's that's

00:43:04.035 --> 00:43:06.450
<v Speaker 0>so weird. I really hope it's not my

00:43:06.450 --> 00:43:09.330
<v Speaker 0>home version or something similar with that, let's

00:43:09.330 --> 00:43:11.970
<v Speaker 0>keep going. So you're saying I can run

00:43:11.970 --> 00:43:12.770
<v Speaker 0>tops

00:43:12.770 --> 00:43:13.810
<v Speaker 0>and you did

00:43:14.290 --> 00:43:15.330
<v Speaker 0>Grafana

00:43:15.890 --> 00:43:16.690
<v Speaker 0>get password.

00:43:18.375 --> 00:43:19.415
<v Speaker 0>Copy this.

00:43:19.575 --> 00:43:20.855
<v Speaker 0>And then you said I could just do

00:43:20.855 --> 00:43:22.935
<v Speaker 0>port forward. Right? Like this.

00:43:23.495 --> 00:43:24.295
<v Speaker 1>Yep.

00:43:26.775 --> 00:43:28.695
<v Speaker 0>Alright. So I can go to local host

00:43:28.695 --> 00:43:31.230
<v Speaker 0>setting. Already I love the top CLI as

00:43:31.230 --> 00:43:32.830
<v Speaker 0>like a helper just to get rid of

00:43:32.830 --> 00:43:34.590
<v Speaker 0>some of that really annoying

00:43:34.590 --> 00:43:35.550
<v Speaker 0>repetitive

00:43:35.550 --> 00:43:36.830
<v Speaker 0>get pods,

00:43:36.910 --> 00:43:38.830
<v Speaker 0>get labels port forward

00:43:39.390 --> 00:43:40.190
<v Speaker 0>etcetera.

00:43:41.390 --> 00:43:42.270
<v Speaker 0>Admin

00:43:42.910 --> 00:43:43.710
<v Speaker 0>password.

00:43:48.464 --> 00:43:49.185
<v Speaker 0>Alright.

00:43:49.825 --> 00:43:51.425
<v Speaker 0>What do we wanna look at first?

00:43:53.025 --> 00:43:55.185
<v Speaker 1>You might want to look at the kind

00:43:55.185 --> 00:43:57.265
<v Speaker 1>of the default dashboards

00:43:57.345 --> 00:43:58.625
<v Speaker 1>that are included.

00:44:00.260 --> 00:44:03.220
<v Speaker 0>The Cube Prometheus dashboards. Right? Yeah.

00:44:08.660 --> 00:44:09.619
<v Speaker 0>Do you have a favorite?

00:44:13.515 --> 00:44:15.915
<v Speaker 1>Let's look at it. Yeah.

00:44:19.835 --> 00:44:21.275
<v Speaker 2>One thing I just wanted to give a

00:44:21.275 --> 00:44:22.234
<v Speaker 2>try because

00:44:22.474 --> 00:44:23.994
<v Speaker 2>I do not want to give up on

00:44:23.994 --> 00:44:26.635
<v Speaker 2>running tops in your Kubernetes cluster. So I

00:44:26.635 --> 00:44:28.154
<v Speaker 2>just have a one comment. How can I

00:44:28.154 --> 00:44:29.780
<v Speaker 2>share it with you? Like, I just want

00:44:29.780 --> 00:44:31.460
<v Speaker 2>you to run that command, and let's just

00:44:31.460 --> 00:44:33.940
<v Speaker 2>give a final try. So do we have

00:44:33.940 --> 00:44:35.700
<v Speaker 2>a chat for weekend?

00:44:35.700 --> 00:44:37.780
<v Speaker 2>Or If you have your Slack open, my

00:44:37.940 --> 00:44:40.180
<v Speaker 0>CNCS Slack is there, or you can email

00:44:40.180 --> 00:44:42.180
<v Speaker 0>me. But, yeah, we don't have a Okay.

00:44:42.420 --> 00:44:42.900
<v Speaker 2>I'm in.

00:44:46.735 --> 00:44:48.815
<v Speaker 2>Okay. I am on the CNC of Slack.

00:44:48.815 --> 00:44:50.975
<v Speaker 2>I'm trying to okay. I'm just sending you

00:44:50.975 --> 00:44:53.695
<v Speaker 2>the message over there. So for a minute,

00:44:53.695 --> 00:44:55.375
<v Speaker 2>like, maybe you can run this command by

00:44:55.375 --> 00:44:57.695
<v Speaker 2>pointing your cube config file, and let's just

00:44:57.695 --> 00:44:59.855
<v Speaker 2>install a new cluster. So that's the last

00:44:59.460 --> 00:45:01.460
<v Speaker 2>try I just have. So this is one

00:45:01.460 --> 00:45:03.700
<v Speaker 2>fix I suggested in our Slack community over

00:45:03.780 --> 00:45:06.420
<v Speaker 2>long, long time ago, and he's he replied,

00:45:06.420 --> 00:45:07.859
<v Speaker 2>it just works. So I just want to

00:45:07.859 --> 00:45:08.740
<v Speaker 2>give it a try.

00:45:09.140 --> 00:45:09.460
<v Speaker 2>So

00:45:10.339 --> 00:45:13.184
<v Speaker 0>Yeah. Sure. Of course. Alright. So let's let's

00:45:13.184 --> 00:45:15.505
<v Speaker 0>just close this for a second.

00:45:16.625 --> 00:45:19.505
<v Speaker 0>Jump back over here. Close the port forward.

00:45:20.865 --> 00:45:21.744
<v Speaker 0>Let's see.

00:45:28.560 --> 00:45:30.480
<v Speaker 0>It's just spinning but it's coming.

00:45:35.120 --> 00:45:35.920
<v Speaker 0>Okay.

00:45:36.160 --> 00:45:36.560
<v Speaker 0>So,

00:45:43.575 --> 00:45:45.575
<v Speaker 0>shimod go dash r

00:45:45.974 --> 00:45:48.135
<v Speaker 0>and it's gonna be the cube config which

00:45:48.135 --> 00:45:48.935
<v Speaker 0>I have

00:45:49.255 --> 00:45:50.055
<v Speaker 0>here.

00:45:50.934 --> 00:45:51.494
<v Speaker 2>Yep.

00:45:53.140 --> 00:45:55.780
<v Speaker 0>So that's removing read access from group and

00:45:55.780 --> 00:45:56.420
<v Speaker 0>other.

00:45:59.780 --> 00:46:00.820
<v Speaker 0>Okay.

00:46:00.820 --> 00:46:02.740
<v Speaker 0>So let's try again.

00:46:03.700 --> 00:46:05.140
<v Speaker 0>Make sure I'm on the right cluster.

00:46:08.785 --> 00:46:20.945
<v Speaker 1>It's

00:46:20.945 --> 00:46:21.185
<v Speaker 1>working.

00:46:24.440 --> 00:46:25.640
<v Speaker 0>So

00:46:26.839 --> 00:46:27.560
<v Speaker 0>it's

00:46:28.119 --> 00:46:30.599
<v Speaker 0>it's a Helm bug that requires the file

00:46:30.599 --> 00:46:33.080
<v Speaker 0>to be six four four as you have

00:46:33.080 --> 00:46:34.359
<v Speaker 0>to read access

00:46:34.795 --> 00:46:35.355
<v Speaker 0>from

00:46:36.075 --> 00:46:37.195
<v Speaker 0>group and other.

00:46:37.755 --> 00:46:40.155
<v Speaker 2>So if you just can you open another

00:46:40.155 --> 00:46:43.355
<v Speaker 2>tab to list the parts? Yep. So it's

00:46:43.355 --> 00:46:46.635
<v Speaker 2>always the system related configurations,

00:46:46.715 --> 00:46:48.235
<v Speaker 2>David. Like, it's not the top. So I

00:46:48.235 --> 00:46:50.800
<v Speaker 2>usually run the top in our CI in

00:46:50.800 --> 00:46:54.080
<v Speaker 2>Linux, Mac, and every possible environment to test

00:46:54.080 --> 00:46:56.160
<v Speaker 2>our CLI. And it just passes there, and

00:46:56.160 --> 00:46:57.840
<v Speaker 2>when it comes to our users, like, users

00:46:57.840 --> 00:46:59.920
<v Speaker 2>just complain once in a while, and I

00:46:59.920 --> 00:47:02.320
<v Speaker 2>always see, okay. Oh, boy. It's your configurations

00:47:02.320 --> 00:47:04.645
<v Speaker 2>and all. So it's always there.

00:47:05.444 --> 00:47:07.365
<v Speaker 2>So do you see any new ports yet?

00:47:07.365 --> 00:47:09.204
<v Speaker 2>I think you see the new top sports

00:47:09.204 --> 00:47:11.125
<v Speaker 2>coming up. Yeah. I think you are good

00:47:11.125 --> 00:47:13.045
<v Speaker 2>to go with your own cluster, there's no

00:47:13.045 --> 00:47:15.045
<v Speaker 2>need of a back end cluster from my

00:47:15.045 --> 00:47:16.165
<v Speaker 2>end. Well,

00:47:16.325 --> 00:47:19.950
<v Speaker 0>good effort tracking than what has gotta be

00:47:19.950 --> 00:47:21.710
<v Speaker 0>a really infuriating bug.

00:47:23.869 --> 00:47:25.630
<v Speaker 0>I I I'm really if you had told

00:47:25.630 --> 00:47:27.230
<v Speaker 0>me the problem was gonna be

00:47:27.550 --> 00:47:29.070
<v Speaker 0>why does Helen care?

00:47:31.150 --> 00:47:32.750
<v Speaker 0>And why is there any message to do

00:47:32.750 --> 00:47:34.510
<v Speaker 0>with your Yeah. Doesn't make any sense to

00:47:34.510 --> 00:47:34.670
<v Speaker 1>me.

00:47:38.224 --> 00:47:40.145
<v Speaker 0>Hell, it's a great project. We all have

00:47:40.145 --> 00:47:42.065
<v Speaker 0>bugs in our software, but that one is

00:47:42.065 --> 00:47:42.945
<v Speaker 0>pretty special.

00:47:43.424 --> 00:47:44.065
<v Speaker 0>Okay.

00:47:45.505 --> 00:47:47.505
<v Speaker 0>You got kudos there from Russell.

00:47:48.030 --> 00:47:49.870
<v Speaker 0>Great work in getting the demo back on.

00:47:51.390 --> 00:47:52.350
<v Speaker 0>Are back on

00:47:53.230 --> 00:47:54.270
<v Speaker 0>my cluster

00:47:54.670 --> 00:47:56.270
<v Speaker 0>tops install has worked.

00:47:57.310 --> 00:47:59.070
<v Speaker 0>Everyone watching has now learned the hard way

00:47:59.070 --> 00:48:00.670
<v Speaker 0>that you must check the permissions on your

00:48:00.670 --> 00:48:02.895
<v Speaker 0>cube config otherwise helm will yell at you

00:48:02.895 --> 00:48:03.455
<v Speaker 0>and

00:48:04.575 --> 00:48:06.575
<v Speaker 0>we have already kind of checked,

00:48:06.655 --> 00:48:08.895
<v Speaker 0>so we think the things are running. I'm

00:48:08.895 --> 00:48:10.095
<v Speaker 0>gonna see if I can get my own

00:48:10.095 --> 00:48:11.775
<v Speaker 0>Grafana password there.

00:48:15.055 --> 00:48:15.935
<v Speaker 0>PB copy,

00:48:17.550 --> 00:48:18.670
<v Speaker 0>Port forward.

00:48:28.750 --> 00:48:31.070
<v Speaker 0>Maybe the pod change. Just make sure that

00:48:30.795 --> 00:48:32.635
<v Speaker 2>your pods are in running state. Just make

00:48:32.635 --> 00:48:34.395
<v Speaker 2>sure. Like, it just takes couple of minutes

00:48:34.395 --> 00:48:36.075
<v Speaker 2>to start up and all that. Might not

00:48:36.075 --> 00:48:37.595
<v Speaker 0>quite be ready yet.

00:48:38.714 --> 00:48:40.155
<v Speaker 0>Where's Grafana?

00:48:40.635 --> 00:48:43.035
<v Speaker 0>Yeah. Okay. Only one container's ready just now.

00:48:43.035 --> 00:48:44.075
<v Speaker 0>So we'll give that a few seconds.

00:48:45.710 --> 00:48:47.230
<v Speaker 0>Oh, there we go. No.

00:48:47.470 --> 00:48:48.830
<v Speaker 2>No.

00:48:48.910 --> 00:48:49.470
<v Speaker 2>Alright.

00:48:52.109 --> 00:48:52.750
<v Speaker 0>So

00:48:54.029 --> 00:48:55.310
<v Speaker 0>we've got access

00:48:55.630 --> 00:48:56.990
<v Speaker 0>to all of the

00:48:57.405 --> 00:48:58.525
<v Speaker 0>Prometheus

00:48:58.525 --> 00:48:59.565
<v Speaker 0>dashboards.

00:48:59.965 --> 00:49:02.125
<v Speaker 0>You also mentioned that installs PromLens.

00:49:02.125 --> 00:49:05.005
<v Speaker 0>That's the project from Julius Vulture. Right? The

00:49:05.005 --> 00:49:06.845
<v Speaker 0>the UI for Prometheus.

00:49:07.805 --> 00:49:09.485
<v Speaker 1>Yeah. And we

00:49:09.645 --> 00:49:11.645
<v Speaker 1>find that it's useful for

00:49:12.530 --> 00:49:14.850
<v Speaker 1>people getting started with

00:49:20.290 --> 00:49:22.690
<v Speaker 1>people getting started with the PromQL.

00:49:27.235 --> 00:49:28.275
<v Speaker 1>There's

00:49:30.195 --> 00:49:31.875
<v Speaker 1>I think PromQL

00:49:33.875 --> 00:49:35.875
<v Speaker 1>is a simple language, but there are a

00:49:35.875 --> 00:49:37.155
<v Speaker 1>lot of similarities

00:49:37.235 --> 00:49:39.119
<v Speaker 1>to it, and Promslens

00:49:39.119 --> 00:49:41.280
<v Speaker 1>does a great job of visually kind of

00:49:41.280 --> 00:49:42.319
<v Speaker 1>showing

00:49:42.319 --> 00:49:43.520
<v Speaker 1>what's going on.

00:49:45.359 --> 00:49:47.039
<v Speaker 0>Yeah. I'm a big fan of Promslens. I

00:49:47.039 --> 00:49:48.559
<v Speaker 0>think it's really interesting. Yeah. And I like

00:49:48.559 --> 00:49:50.160
<v Speaker 0>the way that it just kind of introduces

00:49:50.160 --> 00:49:51.760
<v Speaker 0>you to the language without it getting too

00:49:51.760 --> 00:49:54.765
<v Speaker 0>overwhelming as well. I'm I'm just gonna grab

00:49:54.765 --> 00:49:56.445
<v Speaker 0>some logs on this. I don't know what's

00:49:56.445 --> 00:49:57.965
<v Speaker 0>going on with our graph. So

00:49:58.285 --> 00:50:01.005
<v Speaker 2>Just do hyphen c Grafana. Yep. It's the

00:50:01.005 --> 00:50:02.925
<v Speaker 2>container Grafana, so you need to run hyphen

00:50:02.925 --> 00:50:04.845
<v Speaker 2>c Grafana to see the log. Yep.

00:50:06.285 --> 00:50:08.300
<v Speaker 2>So I think now it's running. So it

00:50:08.300 --> 00:50:10.540
<v Speaker 2>says you're able to take the logs. Right?

00:50:10.540 --> 00:50:11.980
<v Speaker 2>It contains Oh, there we go. Okay. So

00:50:11.980 --> 00:50:14.220
<v Speaker 0>the database just had completely jet, which is

00:50:14.220 --> 00:50:15.820
<v Speaker 0>just the job to set up.

00:50:16.620 --> 00:50:19.020
<v Speaker 0>Yeah. The least little things are sent to

00:50:19.020 --> 00:50:20.460
<v Speaker 0>test us. However,

00:50:20.895 --> 00:50:22.735
<v Speaker 0>we're gonna port forward now.

00:50:24.415 --> 00:50:26.015
<v Speaker 0>Look at that. There we go.

00:50:30.815 --> 00:50:32.655
<v Speaker 0>Make sure I got the right password.

00:50:36.655 --> 00:50:39.800
<v Speaker 2>So I think it's usually the trailing slashes.

00:50:39.800 --> 00:50:42.600
<v Speaker 2>This they get dependent sometimes. So it's the

00:50:42.600 --> 00:50:44.440
<v Speaker 2>common issue that this keeps in here.

00:50:47.080 --> 00:50:47.880
<v Speaker 2>And

00:50:47.880 --> 00:50:49.960
<v Speaker 2>so all these dashboards are from the Kubernetes

00:50:49.960 --> 00:50:52.395
<v Speaker 2>mix. And so we have dedicated dashboards from

00:50:52.395 --> 00:50:54.715
<v Speaker 2>the Proms Promscale team. So if you just

00:50:54.715 --> 00:50:57.515
<v Speaker 2>scroll down, you have something called Kubernetes hardware

00:50:57.515 --> 00:51:00.555
<v Speaker 2>monitoring and cluster monitoring that tag as this

00:51:00.555 --> 00:51:01.435
<v Speaker 2>Kubernetes.

00:51:01.435 --> 00:51:02.395
<v Speaker 2>So it is

00:51:02.715 --> 00:51:04.315
<v Speaker 2>it can it can yeah. These are the

00:51:04.315 --> 00:51:05.675
<v Speaker 2>blue one blue label. So you can just

00:51:05.675 --> 00:51:07.850
<v Speaker 2>open one of that dashboard. So it's like

00:51:07.850 --> 00:51:10.170
<v Speaker 2>an aggregated metrics to understand what is the

00:51:10.170 --> 00:51:12.650
<v Speaker 2>state of your cluster. So rest all Kubernetes

00:51:12.650 --> 00:51:14.970
<v Speaker 2>makes sense. Dashboards are dedicated to your stateful

00:51:14.970 --> 00:51:17.450
<v Speaker 2>sets, demon sets, and all that. So you

00:51:17.450 --> 00:51:20.650
<v Speaker 2>have different dashboards, and we we have plans,

00:51:20.650 --> 00:51:22.685
<v Speaker 2>and we have efforts to build more

00:51:23.165 --> 00:51:26.365
<v Speaker 2>dashboard for timescale DB, prompt scale, observability, and

00:51:26.365 --> 00:51:28.365
<v Speaker 2>all that. So you'll see more and more

00:51:28.365 --> 00:51:31.645
<v Speaker 2>dashboards and observability joining the family of tops

00:51:31.645 --> 00:51:33.485
<v Speaker 2>to get more insights into your cluster.

00:51:34.690 --> 00:51:37.090
<v Speaker 1>And all of these dashboards,

00:51:37.090 --> 00:51:38.530
<v Speaker 1>they are executing

00:51:38.530 --> 00:51:40.130
<v Speaker 1>PromQL queries

00:51:40.130 --> 00:51:41.570
<v Speaker 1>against PromScale

00:51:41.570 --> 00:51:42.450
<v Speaker 1>directly.

00:51:42.770 --> 00:51:46.050
<v Speaker 1>So this is not going through Prometheus

00:51:46.130 --> 00:51:46.850
<v Speaker 1>even though

00:51:47.715 --> 00:51:48.595
<v Speaker 1>some people,

00:51:49.875 --> 00:51:51.555
<v Speaker 1>do query Prometheus

00:51:51.555 --> 00:51:52.435
<v Speaker 1>instead,

00:51:52.515 --> 00:51:53.395
<v Speaker 1>but that

00:51:53.715 --> 00:51:56.915
<v Speaker 1>that kind of, has more latency because then

00:51:56.915 --> 00:52:00.515
<v Speaker 1>Prometheus needs to remote read to Promiscale,

00:52:00.920 --> 00:52:04.600
<v Speaker 1>which then needs to read from TimescaleDB.

00:52:04.680 --> 00:52:08.120
<v Speaker 1>So we recommend for people to reduce

00:52:08.120 --> 00:52:10.440
<v Speaker 1>one hop there and just

00:52:11.320 --> 00:52:12.760
<v Speaker 1>execute queries

00:52:13.240 --> 00:52:14.440
<v Speaker 1>directly against

00:52:15.494 --> 00:52:16.615
<v Speaker 1>Promscale.

00:52:17.335 --> 00:52:19.414
<v Speaker 0>And is that what Promscale is configured to

00:52:19.414 --> 00:52:20.135
<v Speaker 0>speak to?

00:52:21.335 --> 00:52:22.214
<v Speaker 1>Yes.

00:52:22.214 --> 00:52:22.775
<v Speaker 2>Yeah.

00:52:23.255 --> 00:52:25.734
<v Speaker 2>Promscale is also configured to Promscale, and you

00:52:25.734 --> 00:52:27.974
<v Speaker 2>can also show the data sources here. So

00:52:27.974 --> 00:52:28.855
<v Speaker 2>if you just

00:52:29.174 --> 00:52:32.140
<v Speaker 2>go to the data sources symbol, yep, you

00:52:32.140 --> 00:52:34.540
<v Speaker 2>can see, like, we have the Prometheus data

00:52:34.540 --> 00:52:36.860
<v Speaker 2>source. It is you see the Promscale endpoint

00:52:36.860 --> 00:52:39.900
<v Speaker 2>is being added there, and you have TimescaleDB

00:52:40.620 --> 00:52:43.724
<v Speaker 2>data source as well. So this, by default,

00:52:43.724 --> 00:52:45.805
<v Speaker 2>all the dashboards are powered up by the

00:52:45.805 --> 00:52:48.684
<v Speaker 2>Prometheus data source, but Promscale is the endpoint

00:52:48.684 --> 00:52:51.005
<v Speaker 2>there. So yep. And

00:52:51.565 --> 00:52:53.884
<v Speaker 2>I think we can get started with getting

00:52:53.884 --> 00:52:56.525
<v Speaker 2>started with Promscale doc for SQL queries. So

00:52:56.525 --> 00:52:59.590
<v Speaker 2>where you can see the beauty of Promscale

00:52:59.590 --> 00:53:01.670
<v Speaker 2>and Timescale DB and analytics you can get

00:53:01.670 --> 00:53:02.950
<v Speaker 2>out of our stack.

00:53:03.510 --> 00:53:03.990
<v Speaker 2>Alright.

00:53:04.869 --> 00:53:05.510
<v Speaker 0>Perfect.

00:53:06.470 --> 00:53:08.790
<v Speaker 0>So do you want to work through this?

00:53:08.790 --> 00:53:09.830
<v Speaker 0>Is that what you were saying there?

00:53:10.475 --> 00:53:11.435
<v Speaker 2>Yes.

00:53:11.435 --> 00:53:12.875
<v Speaker 2>I think Matt will

00:53:13.275 --> 00:53:14.075
<v Speaker 1>Yeah.

00:53:14.715 --> 00:53:15.835
<v Speaker 1>We kind of

00:53:16.875 --> 00:53:20.635
<v Speaker 1>we already kind of went through parts one,

00:53:20.875 --> 00:53:21.995
<v Speaker 1>two, three

00:53:22.715 --> 00:53:24.155
<v Speaker 1>because we installed.

00:53:25.839 --> 00:53:26.800
<v Speaker 1>And so

00:53:30.400 --> 00:53:32.480
<v Speaker 1>yeah. Let's go through part four.

00:53:32.640 --> 00:53:33.120
<v Speaker 1>Alright.

00:53:38.160 --> 00:53:39.040
<v Speaker 0>Let's see.

00:53:39.280 --> 00:53:39.599
<v Speaker 1>Yeah.

00:53:41.905 --> 00:53:43.984
<v Speaker 2>So before we do this, we just need

00:53:43.984 --> 00:53:45.744
<v Speaker 2>to update the time scale DB data source

00:53:45.744 --> 00:53:48.305
<v Speaker 2>with Postgres as the user because we have

00:53:48.305 --> 00:53:50.865
<v Speaker 2>Grafana DB as the user. So just get

00:53:50.865 --> 00:53:53.025
<v Speaker 2>into your like, can you open your CLI,

00:53:53.025 --> 00:53:53.744
<v Speaker 2>David? I just

00:53:54.570 --> 00:53:56.730
<v Speaker 2>can you just run talks timescale d b

00:53:56.730 --> 00:53:59.130
<v Speaker 2>get password to get the password of timescale

00:53:59.130 --> 00:53:59.530
<v Speaker 2>d b?

00:54:06.345 --> 00:54:07.225
<v Speaker 0>Yep. So,

00:54:08.505 --> 00:54:10.185
<v Speaker 2>yep, you just need to port forward the

00:54:10.185 --> 00:54:12.265
<v Speaker 2>graph on again and just copy the password.

00:54:12.265 --> 00:54:15.145
<v Speaker 2>So what like, we just released to us

00:54:15.145 --> 00:54:16.984
<v Speaker 2>back end. We were just we just found

00:54:16.984 --> 00:54:19.305
<v Speaker 2>one bug, a small bug, which is that

00:54:19.785 --> 00:54:21.224
<v Speaker 2>we just created a dedicated

00:54:22.150 --> 00:54:23.190
<v Speaker 2>user for

00:54:23.670 --> 00:54:24.470
<v Speaker 2>TimescaleDB

00:54:24.470 --> 00:54:27.030
<v Speaker 2>in Grafana, which is Grafana as the user,

00:54:27.030 --> 00:54:29.750
<v Speaker 2>but it doesn't has the admin permissions to

00:54:29.990 --> 00:54:30.950
<v Speaker 2>to

00:54:30.950 --> 00:54:32.869
<v Speaker 2>query the DB. So we are just updating

00:54:32.869 --> 00:54:35.350
<v Speaker 2>the user role in the TimescaleDB data source

00:54:35.350 --> 00:54:37.734
<v Speaker 2>so that the queries just work fine. So

00:54:37.734 --> 00:54:40.055
<v Speaker 2>you just need to the user should be

00:54:40.055 --> 00:54:42.615
<v Speaker 2>a post Chris, and in the password section,

00:54:42.615 --> 00:54:43.974
<v Speaker 2>you need to reset it to the password

00:54:43.974 --> 00:54:45.575
<v Speaker 2>which we copied. And

00:54:48.615 --> 00:54:49.975
<v Speaker 2>just test the connection.

00:54:50.375 --> 00:54:52.455
<v Speaker 2>Save and test. It's green. Yep.

00:54:53.120 --> 00:54:53.920
<v Speaker 1>Yep.

00:54:56.240 --> 00:54:56.800
<v Speaker 1>And

00:54:57.360 --> 00:54:59.920
<v Speaker 1>now we can just create a new

00:55:00.240 --> 00:55:01.200
<v Speaker 1>New dashboard.

00:55:01.920 --> 00:55:02.960
<v Speaker 1>New dashboard.

00:55:06.295 --> 00:55:07.015
<v Speaker 0>Okay.

00:55:07.175 --> 00:55:07.895
<v Speaker 2>And

00:55:08.295 --> 00:55:10.695
<v Speaker 2>just add the data source as the timescale

00:55:10.695 --> 00:55:11.415
<v Speaker 2>DB.

00:55:14.375 --> 00:55:17.095
<v Speaker 2>And, yeah, usually, like, you have our beautiful

00:55:17.095 --> 00:55:19.655
<v Speaker 2>UI to just inject the values, but we

00:55:19.655 --> 00:55:21.660
<v Speaker 2>already copied. So you can also see the

00:55:21.740 --> 00:55:24.780
<v Speaker 2>all the metrics available from here here. But

00:55:24.859 --> 00:55:26.700
<v Speaker 2>can you just click on this

00:55:27.500 --> 00:55:29.339
<v Speaker 2>the edit icon you see here? Right? You

00:55:29.339 --> 00:55:31.099
<v Speaker 2>can just copy paste the complete query, which

00:55:31.099 --> 00:55:33.180
<v Speaker 2>we we have noticed from we which we

00:55:33.180 --> 00:55:35.180
<v Speaker 2>have seen from the docs. Yep.

00:55:38.105 --> 00:55:40.905
<v Speaker 2>Copy and then edit like yeah. And

00:55:42.105 --> 00:55:44.345
<v Speaker 2>you just need to paste it here. And

00:55:44.345 --> 00:55:46.425
<v Speaker 2>can you just take the visualization as table

00:55:46.425 --> 00:55:47.865
<v Speaker 2>in the right, the visualization?

00:55:50.310 --> 00:55:51.910
<v Speaker 2>In the right, you have at the right

00:55:51.910 --> 00:55:53.830
<v Speaker 2>section, panel section. In the panel, you have

00:55:53.830 --> 00:55:54.630
<v Speaker 0>visualization.

00:55:54.710 --> 00:55:55.910
<v Speaker 0>Yeah. Yeah. Yeah. Okay. Yeah.

00:55:56.470 --> 00:55:58.550
<v Speaker 2>And this selected table,

00:55:58.550 --> 00:55:59.910
<v Speaker 2>like, the sixth one.

00:56:00.790 --> 00:56:02.150
<v Speaker 2>Yep. And

00:56:03.565 --> 00:56:05.485
<v Speaker 2>you just need to get the data for

00:56:05.485 --> 00:56:07.805
<v Speaker 2>this and the table, but okay. You need

00:56:07.805 --> 00:56:10.125
<v Speaker 2>to add prom metric dot to the table.

00:56:10.125 --> 00:56:12.125
<v Speaker 2>So it's in the scheme of prom hyphen

00:56:12.125 --> 00:56:12.925
<v Speaker 2>metric.

00:56:13.325 --> 00:56:13.965
<v Speaker 2>So

00:56:14.205 --> 00:56:16.365
<v Speaker 1>prom Prom underscore underscore metric.

00:56:17.650 --> 00:56:18.370
<v Speaker 1>Yeah.

00:56:19.170 --> 00:56:21.810
<v Speaker 2>And then just click somewhere else. Like, the

00:56:21.810 --> 00:56:24.450
<v Speaker 2>enter doesn't work here, so it's the issue

00:56:24.450 --> 00:56:26.130
<v Speaker 2>with the Grafana UI. So you just need

00:56:26.130 --> 00:56:28.930
<v Speaker 2>to click on the outside of the query.

00:56:30.865 --> 00:56:31.984
<v Speaker 0>Yeah. It's not.

00:56:34.224 --> 00:56:34.865
<v Speaker 2>So

00:56:35.744 --> 00:56:37.825
<v Speaker 2>okay. You need to select

00:56:37.984 --> 00:56:39.825
<v Speaker 2>instead of time series and format it as

00:56:39.984 --> 00:56:41.505
<v Speaker 2>just select the table. Oh, yeah. Yeah.

00:56:42.980 --> 00:56:43.619
<v Speaker 1>There

00:56:43.780 --> 00:56:46.180
<v Speaker 1>we go. So yep. So we have the

00:56:46.180 --> 00:56:47.140
<v Speaker 2>data here.

00:56:49.460 --> 00:56:51.619
<v Speaker 2>Matt, I think you can just talk

00:56:51.940 --> 00:56:53.619
<v Speaker 2>just go ahead with all the other queries

00:56:53.619 --> 00:56:55.140
<v Speaker 2>we have in the doc. Like, each query

00:56:55.140 --> 00:56:57.380
<v Speaker 2>has a background and interesting story. Yeah.

00:56:58.455 --> 00:56:59.575
<v Speaker 1>Yeah. So

00:57:00.295 --> 00:57:03.335
<v Speaker 1>this is kind of allowing you to

00:57:03.975 --> 00:57:06.135
<v Speaker 1>query the data point.

00:57:06.775 --> 00:57:09.175
<v Speaker 1>It's a little bit isn't quite

00:57:09.335 --> 00:57:11.815
<v Speaker 1>that interesting. I will point out

00:57:12.055 --> 00:57:13.815
<v Speaker 1>that

00:57:20.349 --> 00:57:21.230
<v Speaker 1>that

00:57:21.790 --> 00:57:24.030
<v Speaker 1>we allow you to ingest

00:57:24.750 --> 00:57:26.750
<v Speaker 1>data both

00:57:26.035 --> 00:57:29.315
<v Speaker 1>via Prometheus and via direct push.

00:57:29.475 --> 00:57:33.315
<v Speaker 1>And when people ingest data via direct push,

00:57:35.075 --> 00:57:38.115
<v Speaker 1>sometimes the PromQL semantics

00:57:38.355 --> 00:57:39.875
<v Speaker 1>don't quite match

00:57:40.530 --> 00:57:41.730
<v Speaker 1>because PromQL

00:57:41.730 --> 00:57:44.130
<v Speaker 1>expects data to be regular.

00:57:44.290 --> 00:57:46.930
<v Speaker 1>And so this is one way where you

00:57:46.930 --> 00:57:49.490
<v Speaker 1>could just get the raw data for all

00:57:49.490 --> 00:57:51.410
<v Speaker 1>of your points directly.

00:57:53.650 --> 00:57:55.890
<v Speaker 1>But this is a simple

00:57:56.105 --> 00:57:58.105
<v Speaker 1>example just to give you a study, but

00:57:58.105 --> 00:58:01.545
<v Speaker 1>then if you go back to the tutorial,

00:58:01.785 --> 00:58:03.545
<v Speaker 1>there are more advanced

00:58:04.505 --> 00:58:05.704
<v Speaker 1>queries you could do.

00:58:10.390 --> 00:58:11.910
<v Speaker 1>So for this

00:58:12.230 --> 00:58:13.590
<v Speaker 1>is a good example,

00:58:13.590 --> 00:58:15.750
<v Speaker 1>actually, of an advanced query.

00:58:18.630 --> 00:58:21.430
<v Speaker 0>So So this is doing a percentile

00:58:22.035 --> 00:58:23.875
<v Speaker 0>Yeah. Which the

00:58:24.675 --> 00:58:26.115
<v Speaker 0>0.5%

00:58:26.115 --> 00:58:26.995
<v Speaker 0>of

00:58:27.954 --> 00:58:29.474
<v Speaker 0>oh, so okay. So it's trying to work

00:58:29.474 --> 00:58:32.355
<v Speaker 0>out what the 95 ninety fifth percentile is

00:58:32.355 --> 00:58:34.994
<v Speaker 0>of the duration of the goal runtime garbage

00:58:34.994 --> 00:58:37.395
<v Speaker 0>collection in seconds over the last

00:58:38.170 --> 00:58:39.610
<v Speaker 0>five minutes. Yeah.

00:58:39.930 --> 00:58:41.690
<v Speaker 1>This is kind of hard to see. It's

00:58:41.690 --> 00:58:43.930
<v Speaker 1>zero dot five. So this is actually the

00:58:43.930 --> 00:58:44.730
<v Speaker 1>median.

00:58:45.690 --> 00:58:48.090
<v Speaker 0>Oh, zero oh, yeah. Okay. Okay. Yeah.

00:58:48.810 --> 00:58:51.530
<v Speaker 1>So this is actually getting the median of

00:58:51.530 --> 00:58:52.410
<v Speaker 1>the duration.

00:58:52.994 --> 00:58:55.154
<v Speaker 1>And the one thing I I will point

00:58:55.154 --> 00:58:57.315
<v Speaker 1>out is that this is a query you

00:58:57.315 --> 00:58:59.155
<v Speaker 1>cannot do in PromQL.

00:58:59.634 --> 00:59:01.474
<v Speaker 1>Because in PromQL,

00:59:02.035 --> 00:59:04.674
<v Speaker 1>everything has to be done on a per

00:59:04.674 --> 00:59:05.954
<v Speaker 1>series basis

00:59:06.119 --> 00:59:07.720
<v Speaker 1>before you aggregate

00:59:07.720 --> 00:59:08.359
<v Speaker 1>it,

00:59:08.839 --> 00:59:09.480
<v Speaker 1>and

00:59:09.960 --> 00:59:11.240
<v Speaker 1>this is doing

00:59:11.319 --> 00:59:13.560
<v Speaker 1>kind of a global median.

00:59:17.319 --> 00:59:19.640
<v Speaker 1>And these kind of queries

00:59:19.640 --> 00:59:22.039
<v Speaker 1>are actually quite important

00:59:21.954 --> 00:59:23.955
<v Speaker 1>if you're doing things like

00:59:27.875 --> 00:59:30.035
<v Speaker 1>if you're doing things like

00:59:33.315 --> 00:59:34.755
<v Speaker 1>capacity planning

00:59:34.755 --> 00:59:38.010
<v Speaker 1>or deeper analysis of your system. For capacity

00:59:38.010 --> 00:59:39.530
<v Speaker 1>planning, you might

00:59:39.610 --> 00:59:40.810
<v Speaker 1>switch this.

00:59:41.290 --> 00:59:43.370
<v Speaker 1>David, as you already said from a zero

00:59:43.370 --> 00:59:45.370
<v Speaker 1>dot five to zero nine five,

00:59:45.690 --> 00:59:48.250
<v Speaker 1>but it's the same basic idea where you

00:59:48.250 --> 00:59:49.770
<v Speaker 1>want to get your global

00:59:52.425 --> 00:59:53.545
<v Speaker 1>kind of

00:59:54.505 --> 00:59:56.425
<v Speaker 1>percentile instead of

00:59:58.425 --> 01:00:00.985
<v Speaker 1>what the Promscale forces you to do, which

01:00:00.985 --> 01:00:02.185
<v Speaker 1>is a

01:00:02.905 --> 01:00:04.025
<v Speaker 1>double aggregation.

01:00:04.590 --> 01:00:06.190
<v Speaker 1>First, you aggregate

01:00:06.190 --> 01:00:09.070
<v Speaker 1>on the per series level and then you

01:00:09.070 --> 01:00:10.510
<v Speaker 1>aggregate globally,

01:00:10.670 --> 01:00:13.870
<v Speaker 1>which isn't quite the same thing statistically.

01:00:15.550 --> 01:00:16.590
<v Speaker 0>Nice. Okay.

01:00:17.075 --> 01:00:18.435
<v Speaker 1>So this is

01:00:18.835 --> 01:00:20.595
<v Speaker 1>kind of showing

01:00:20.994 --> 01:00:23.234
<v Speaker 1>already the value of

01:00:23.474 --> 01:00:24.835
<v Speaker 1>doing some

01:00:24.835 --> 01:00:26.275
<v Speaker 1>stuff in SQL.

01:00:28.275 --> 01:00:29.954
<v Speaker 0>Yeah. That that makes a lot of sense

01:00:29.954 --> 01:00:30.355
<v Speaker 0>to me.

01:00:31.869 --> 01:00:33.470
<v Speaker 0>Because I think, you

01:00:35.390 --> 01:00:36.030
<v Speaker 0>using

01:00:37.070 --> 01:00:39.869
<v Speaker 0>SQL SQL as a language that most people

01:00:39.869 --> 01:00:41.950
<v Speaker 0>have been familiar with for their entire careers

01:00:41.950 --> 01:00:42.830
<v Speaker 0>as well.

01:00:43.310 --> 01:00:45.065
<v Speaker 0>I know that people at

01:00:45.464 --> 01:00:47.224
<v Speaker 0>least I don't. I speak for myself only

01:00:47.224 --> 01:00:49.545
<v Speaker 0>here. I didn't enjoy learning PromQL.

01:00:49.545 --> 01:00:51.385
<v Speaker 0>In fact, I hated it. I really really

01:00:51.385 --> 01:00:53.785
<v Speaker 0>hated it. I worked for Influx Data, Influx

01:00:53.785 --> 01:00:56.265
<v Speaker 0>DB. I hated learning Flux and I still

01:00:56.265 --> 01:00:58.710
<v Speaker 0>hate writing Flux. You know, I've I've got

01:00:58.710 --> 01:01:01.350
<v Speaker 0>twenty years of knowledge of SQL in my

01:01:01.350 --> 01:01:03.270
<v Speaker 0>head that I wanna be able to use

01:01:03.430 --> 01:01:05.350
<v Speaker 0>for these kind of things. And I I

01:01:05.350 --> 01:01:08.070
<v Speaker 0>love where Promscale is fitting into this architecture

01:01:08.070 --> 01:01:10.470
<v Speaker 0>like, you know, like we said at the

01:01:10.470 --> 01:01:12.985
<v Speaker 0>start, you know, is now the de facto

01:01:12.985 --> 01:01:15.705
<v Speaker 0>way to get metrics out of a Kubernetes

01:01:15.705 --> 01:01:18.985
<v Speaker 0>cluster. I want access to those living dashboards

01:01:18.985 --> 01:01:20.025
<v Speaker 0>that are available,

01:01:20.425 --> 01:01:22.905
<v Speaker 0>but I don't particularly wanna use Prometheus for

01:01:22.905 --> 01:01:24.345
<v Speaker 0>my long term storage and be able to,

01:01:24.770 --> 01:01:26.530
<v Speaker 0>you know, just augment and then drop in

01:01:26.530 --> 01:01:28.530
<v Speaker 0>that timescale DB and prompt skill set in

01:01:28.530 --> 01:01:30.770
<v Speaker 0>the middle. I think it's a really interesting

01:01:30.770 --> 01:01:32.930
<v Speaker 0>architecture that just opens up

01:01:33.170 --> 01:01:34.610
<v Speaker 0>more possibilities

01:01:36.130 --> 01:01:39.170
<v Speaker 0>for people to have better observability longer term

01:01:39.170 --> 01:01:41.345
<v Speaker 0>as well. And something that I can't remember

01:01:41.345 --> 01:01:43.265
<v Speaker 0>who mentioned it, sorry now but you you

01:01:43.265 --> 01:01:45.265
<v Speaker 0>talked about push as well. Like yes, we've

01:01:45.265 --> 01:01:47.345
<v Speaker 0>got Promscale, we've got Prometheus doing the pool

01:01:47.345 --> 01:01:50.065
<v Speaker 0>within the cluster and writing using the remote

01:01:50.065 --> 01:01:51.744
<v Speaker 0>API to Promscale.

01:01:52.190 --> 01:01:55.150
<v Speaker 0>But I can push directly event driven or

01:01:55.150 --> 01:01:57.630
<v Speaker 0>events or traces right into timescale DB and

01:01:57.630 --> 01:01:59.470
<v Speaker 0>increase that observability

01:01:59.470 --> 01:02:01.630
<v Speaker 0>within all of my systems as well. And

01:02:01.630 --> 01:02:03.390
<v Speaker 0>I think that is a superpower.

01:02:03.630 --> 01:02:05.070
<v Speaker 0>That is this really really cool.

01:02:07.225 --> 01:02:08.265
<v Speaker 1>So Yeah.

01:02:08.985 --> 01:02:10.345
<v Speaker 0>What do what what should we take a

01:02:10.345 --> 01:02:11.865
<v Speaker 0>look at? Let's see or just pick one

01:02:11.865 --> 01:02:13.305
<v Speaker 0>or two more things that we can kind

01:02:13.305 --> 01:02:15.785
<v Speaker 0>of we can draw off. I think it's

01:02:15.785 --> 01:02:18.265
<v Speaker 0>really interesting to me that the Promscale does

01:02:18.265 --> 01:02:19.545
<v Speaker 0>query translation

01:02:19.545 --> 01:02:20.105
<v Speaker 0>to

01:02:20.480 --> 01:02:22.480
<v Speaker 0>to SQL. So maybe we could take a

01:02:22.480 --> 01:02:24.079
<v Speaker 0>look at that. But you saw the experts.

01:02:24.079 --> 01:02:25.520
<v Speaker 0>What what would you like to show?

01:02:31.039 --> 01:02:31.920
<v Speaker 0>No pressure.

01:02:32.319 --> 01:02:32.960
<v Speaker 1>Yeah.

01:02:33.680 --> 01:02:37.279
<v Speaker 1>Let's just just

01:02:35.265 --> 01:02:37.185
<v Speaker 1>let us see

01:02:38.305 --> 01:02:39.105
<v Speaker 1>which

01:02:39.265 --> 01:02:40.465
<v Speaker 1>actually, let me

01:02:41.265 --> 01:02:44.065
<v Speaker 1>see if there's any other queries

01:02:44.145 --> 01:02:45.105
<v Speaker 1>in that

01:02:46.625 --> 01:02:48.385
<v Speaker 1>in that tutorial

01:02:48.625 --> 01:02:50.145
<v Speaker 1>that we want to highlight.

01:02:50.859 --> 01:02:53.020
<v Speaker 0>It looks like the third query here, is

01:02:53.020 --> 01:02:53.580
<v Speaker 0>that

01:02:54.540 --> 01:02:56.220
<v Speaker 0>because I don't have the labels as JSON.

01:02:56.220 --> 01:02:58.060
<v Speaker 0>What's your JSONB function do?

01:02:58.619 --> 01:03:00.780
<v Speaker 1>Yeah. So this takes

01:03:02.475 --> 01:03:04.635
<v Speaker 1>the label and then the return of them

01:03:04.635 --> 01:03:06.235
<v Speaker 1>as as JSONB

01:03:06.235 --> 01:03:06.955
<v Speaker 1>objects.

01:03:07.035 --> 01:03:09.995
<v Speaker 1>So this is if you want to do,

01:03:09.995 --> 01:03:10.475
<v Speaker 1>like,

01:03:11.035 --> 01:03:11.835
<v Speaker 1>queries

01:03:12.075 --> 01:03:13.515
<v Speaker 1>using

01:03:16.100 --> 01:03:17.140
<v Speaker 1>using

01:03:18.260 --> 01:03:19.940
<v Speaker 1>per series analysis.

01:03:19.940 --> 01:03:22.340
<v Speaker 1>Right? You're getting now back

01:03:23.060 --> 01:03:24.100
<v Speaker 1>your

01:03:26.820 --> 01:03:27.700
<v Speaker 1>your

01:03:28.500 --> 01:03:30.580
<v Speaker 1>time series

01:03:29.785 --> 01:03:31.305
<v Speaker 1>values directly

01:03:31.305 --> 01:03:32.825
<v Speaker 1>along with the

01:03:33.385 --> 01:03:36.025
<v Speaker 1>labels that you are familiar with.

01:03:37.065 --> 01:03:37.865
<v Speaker 0>Nice.

01:03:38.585 --> 01:03:38.985
<v Speaker 1>Yeah.

01:03:42.279 --> 01:03:45.400
<v Speaker 1>I'm thinking what we can show you in

01:03:45.400 --> 01:03:46.599
<v Speaker 1>terms of the

01:03:47.480 --> 01:03:49.080
<v Speaker 1>translation.

01:03:49.960 --> 01:03:50.599
<v Speaker 1>Oh,

01:03:51.799 --> 01:03:52.520
<v Speaker 1>so

01:03:53.559 --> 01:03:56.039
<v Speaker 1>I think going

01:03:55.734 --> 01:03:57.015
<v Speaker 1>through the

01:03:58.135 --> 01:03:59.815
<v Speaker 1>the entire

01:04:00.615 --> 01:04:01.575
<v Speaker 1>transpilation

01:04:01.575 --> 01:04:02.855
<v Speaker 1>process

01:04:03.415 --> 01:04:05.895
<v Speaker 1>is is gonna be cumbersome,

01:04:05.895 --> 01:04:07.735
<v Speaker 1>but I do want to

01:04:07.895 --> 01:04:08.695
<v Speaker 1>point

01:04:08.775 --> 01:04:11.255
<v Speaker 1>people to a

01:04:13.740 --> 01:04:14.460
<v Speaker 1>to

01:04:15.180 --> 01:04:17.020
<v Speaker 1>our GitHub page.

01:04:17.740 --> 01:04:19.980
<v Speaker 1>And on our GitHub page

01:04:20.860 --> 01:04:23.340
<v Speaker 1>let me just make sure that there's a

01:04:23.340 --> 01:04:23.660
<v Speaker 1>link.

01:04:28.385 --> 01:04:30.705
<v Speaker 1>So if you go to the GitHub page,

01:04:30.705 --> 01:04:33.105
<v Speaker 1>there is a

01:04:41.390 --> 01:04:44.190
<v Speaker 1>There's a link to our design doc Oh,

01:04:44.190 --> 01:04:45.390
<v Speaker 0>yes. Which is Yeah.

01:04:47.470 --> 01:04:48.990
<v Speaker 1>Which is actually

01:04:50.815 --> 01:04:54.575
<v Speaker 1>a live public design doc that we had

01:04:55.535 --> 01:04:56.975
<v Speaker 1>hosted online

01:04:57.055 --> 01:04:59.295
<v Speaker 1>when we first started the project.

01:04:59.455 --> 01:05:00.975
<v Speaker 1>And this design doc

01:05:01.135 --> 01:05:02.895
<v Speaker 1>goes into the details

01:05:03.135 --> 01:05:03.615
<v Speaker 1>of

01:05:04.050 --> 01:05:05.730
<v Speaker 1>how we designed

01:05:05.810 --> 01:05:07.730
<v Speaker 1>the SQL schema

01:05:07.730 --> 01:05:10.450
<v Speaker 1>to actually store this kind of data.

01:05:10.770 --> 01:05:11.410
<v Speaker 1>And

01:05:13.410 --> 01:05:15.410
<v Speaker 1>it's it's pretty technical,

01:05:15.410 --> 01:05:18.130
<v Speaker 1>but the bottom line is that

01:05:19.405 --> 01:05:22.125
<v Speaker 1>we kind of have a very unique way

01:05:22.204 --> 01:05:22.845
<v Speaker 1>of

01:05:23.165 --> 01:05:25.325
<v Speaker 1>storing these label set

01:05:25.484 --> 01:05:28.045
<v Speaker 1>that allows a very efficient

01:05:28.045 --> 01:05:29.484
<v Speaker 1>kind of storage

01:05:29.484 --> 01:05:30.525
<v Speaker 1>mechanism

01:05:30.525 --> 01:05:31.725
<v Speaker 1>inside a

01:05:31.964 --> 01:05:32.685
<v Speaker 1>a

01:05:32.765 --> 01:05:33.645
<v Speaker 1>prompt q l.

01:05:34.740 --> 01:05:35.540
<v Speaker 1>Sorry.

01:05:35.540 --> 01:05:37.780
<v Speaker 1>Inside of a relational database.

01:05:38.100 --> 01:05:39.060
<v Speaker 1>And so

01:05:40.100 --> 01:05:42.660
<v Speaker 1>I think if people are really interested in

01:05:42.660 --> 01:05:44.980
<v Speaker 1>how we do this kind of

01:05:45.620 --> 01:05:46.500
<v Speaker 1>translation,

01:05:47.085 --> 01:05:49.885
<v Speaker 1>this is the the way to get that

01:05:49.885 --> 01:05:50.765
<v Speaker 1>information.

01:05:52.045 --> 01:05:54.925
<v Speaker 0>Alright. Awesome. I'll make sure that the design

01:05:54.925 --> 01:05:56.765
<v Speaker 0>doc here is also in the the show

01:05:56.765 --> 01:05:58.765
<v Speaker 0>notes. So if anyone does want some light

01:05:58.765 --> 01:06:00.685
<v Speaker 0>reading with their coffee tomorrow morning, this is

01:06:00.685 --> 01:06:02.205
<v Speaker 0>a good way to understand how it all

01:06:02.205 --> 01:06:04.970
<v Speaker 0>works. So Yeah. I think I'll enjoy reading

01:06:04.970 --> 01:06:05.690
<v Speaker 0>myself.

01:06:09.450 --> 01:06:09.930
<v Speaker 1>Yeah. I

01:06:12.650 --> 01:06:15.770
<v Speaker 1>was wondering if you had any any other

01:06:15.770 --> 01:06:16.170
<v Speaker 1>questions.

01:06:17.925 --> 01:06:19.605
<v Speaker 2>But just to give you a heads up

01:06:19.605 --> 01:06:21.285
<v Speaker 2>here in this so if you just scroll

01:06:21.285 --> 01:06:23.445
<v Speaker 2>down, we we have a bonus section. So

01:06:23.445 --> 01:06:25.685
<v Speaker 2>it's a very complex query. Like, if you're

01:06:25.765 --> 01:06:28.005
<v Speaker 2>you can just execute, but it just shows

01:06:28.005 --> 01:06:29.925
<v Speaker 2>you the power of SQL if you just

01:06:29.925 --> 01:06:31.845
<v Speaker 2>go deep down into the metrics. So this

01:06:31.845 --> 01:06:34.040
<v Speaker 2>is the big query, and you can see

01:06:34.040 --> 01:06:35.960
<v Speaker 2>like what it it has to offer for

01:06:35.960 --> 01:06:37.800
<v Speaker 2>you. You can just see That's script.

01:06:42.920 --> 01:06:44.760
<v Speaker 0>Alright. Let's copy. Let's copy it.

01:06:46.194 --> 01:06:47.555
<v Speaker 0>Let's see if I can guess where it

01:06:47.555 --> 01:06:49.075
<v Speaker 0>does then. I'll

01:06:49.234 --> 01:06:51.155
<v Speaker 0>let you correct me.

01:06:51.315 --> 01:06:52.195
<v Speaker 0>I mean

01:06:54.035 --> 01:06:54.675
<v Speaker 0>Okay.

01:06:55.234 --> 01:06:58.035
<v Speaker 0>Gonna select. It's got a meta max. It's

01:06:58.035 --> 01:06:59.795
<v Speaker 0>looking at container

01:06:59.795 --> 01:07:01.954
<v Speaker 0>memory limits

01:07:02.170 --> 01:07:04.490
<v Speaker 0>where there's a real value. Okay.

01:07:05.610 --> 01:07:06.890
<v Speaker 0>That makes sense.

01:07:07.050 --> 01:07:10.090
<v Speaker 0>Now it's then being passed into another select,

01:07:11.690 --> 01:07:13.690
<v Speaker 0>which is where No, I give up. Go

01:07:13.690 --> 01:07:14.490
<v Speaker 0>for it. What is it?

01:07:17.005 --> 01:07:18.845
<v Speaker 0>I can't juggle that much context in my

01:07:18.845 --> 01:07:20.285
<v Speaker 0>head at the same time there.

01:07:20.525 --> 01:07:22.845
<v Speaker 0>Assuming you're gonna pull out with the

01:07:24.605 --> 01:07:27.165
<v Speaker 0>statistical thing on how much container limits I

01:07:27.165 --> 01:07:28.445
<v Speaker 0>have on my cluster. I don't know.

01:07:30.540 --> 01:07:32.620
<v Speaker 2>So if you just scroll up, so there's

01:07:32.620 --> 01:07:34.460
<v Speaker 2>a small description in one line. It just

01:07:34.460 --> 01:07:35.260
<v Speaker 2>says that

01:07:35.820 --> 01:07:37.900
<v Speaker 2>so it just gives you the Kubernetes containers

01:07:37.900 --> 01:07:40.620
<v Speaker 2>that are over provisioned by finding those containers

01:07:40.620 --> 01:07:43.935
<v Speaker 2>whose 99 percentile memory utilization is low. So

01:07:43.935 --> 01:07:46.415
<v Speaker 2>this is one interesting way to understand how

01:07:46.415 --> 01:07:48.655
<v Speaker 2>your containers are over provisioned. So there is

01:07:48.655 --> 01:07:51.455
<v Speaker 2>a a big post by Dan Liu about

01:07:51.455 --> 01:07:53.455
<v Speaker 2>talking about a simple way to get more

01:07:53.455 --> 01:07:56.735
<v Speaker 2>values from metrics. So we just went through

01:07:56.735 --> 01:07:58.655
<v Speaker 2>that post and this query was built by

01:07:58.655 --> 01:08:00.335
<v Speaker 2>the

01:07:59.690 --> 01:08:00.330
<v Speaker 2>demon.

01:08:01.290 --> 01:08:03.050
<v Speaker 0>So you're telling me if I had just

01:08:03.050 --> 01:08:04.730
<v Speaker 0>scrolled up a little bit, I could've read

01:08:04.730 --> 01:08:06.810
<v Speaker 0>that verbatim and everyone would've thought I was

01:08:06.810 --> 01:08:07.690
<v Speaker 0>so smart.

01:08:09.450 --> 01:08:11.450
<v Speaker 0>And you like I think that's true. Looks

01:08:11.610 --> 01:08:15.145
<v Speaker 0>there's 30 lines of script SQL query madness

01:08:15.145 --> 01:08:16.665
<v Speaker 0>trying to work out what it was doing.

01:08:16.665 --> 01:08:18.425
<v Speaker 0>Thanks for me. Thank you. Anyway

01:08:18.745 --> 01:08:21.465
<v Speaker 1>But but by the way, I will say

01:08:21.465 --> 01:08:22.585
<v Speaker 1>that for

01:08:22.824 --> 01:08:25.864
<v Speaker 1>people watching, even if you learn

01:08:26.240 --> 01:08:28.800
<v Speaker 1>kind of nothing else from this talk,

01:08:29.040 --> 01:08:32.000
<v Speaker 1>go and look at that post by Dan

01:08:32.000 --> 01:08:33.760
<v Speaker 1>Liu. It really, I think,

01:08:35.680 --> 01:08:36.800
<v Speaker 1>the power

01:08:36.960 --> 01:08:38.560
<v Speaker 1>that you might

01:08:38.720 --> 01:08:41.680
<v Speaker 1>want to get from your

01:08:42.364 --> 01:08:44.045
<v Speaker 1>from your observability

01:08:44.045 --> 01:08:46.684
<v Speaker 1>data. And he really describes

01:08:47.005 --> 01:08:48.204
<v Speaker 1>kind of the

01:08:49.005 --> 01:08:50.204
<v Speaker 1>the real

01:08:50.444 --> 01:08:52.125
<v Speaker 1>business value

01:08:52.205 --> 01:08:54.204
<v Speaker 1>that search analysis

01:08:54.444 --> 01:08:56.765
<v Speaker 1>has in terms of saving people money.

01:08:57.740 --> 01:09:00.220
<v Speaker 0>Yeah. Okay. I will throw this into the

01:09:00.220 --> 01:09:01.740
<v Speaker 0>show notes as well. Lots for people to

01:09:01.740 --> 01:09:02.380
<v Speaker 0>read.

01:09:02.700 --> 01:09:04.460
<v Speaker 0>We have tomorrow's coffee.

01:09:04.939 --> 01:09:07.260
<v Speaker 0>And I ran that query. I updated the

01:09:07.260 --> 01:09:09.580
<v Speaker 0>from statements to sync with the prompt metric

01:09:09.580 --> 01:09:11.500
<v Speaker 0>and we can see here that we've got

01:09:11.500 --> 01:09:14.205
<v Speaker 0>all these containers that have some sort of

01:09:14.205 --> 01:09:15.564
<v Speaker 0>max memory allowed.

01:09:16.604 --> 01:09:17.725
<v Speaker 0>And we can see,

01:09:18.445 --> 01:09:20.285
<v Speaker 0>yeah, the percentile and all that.

01:09:22.685 --> 01:09:25.149
<v Speaker 1>Yeah. So How would you rate I'm assuming

01:09:25.389 --> 01:09:27.149
<v Speaker 0>I mean, you couldn't rate that in prompt

01:09:27.149 --> 01:09:28.750
<v Speaker 0>q l. Right? That just that just wouldn't

01:09:28.750 --> 01:09:30.510
<v Speaker 0>be possible. No. No.

01:09:32.349 --> 01:09:33.069
<v Speaker 0>Yeah.

01:09:33.789 --> 01:09:36.349
<v Speaker 0>Alright. Awesome. So the so I I guess

01:09:36.349 --> 01:09:38.909
<v Speaker 1>the point here is that

01:09:39.265 --> 01:09:39.984
<v Speaker 1>if

01:09:40.385 --> 01:09:41.985
<v Speaker 1>your percentile

01:09:41.985 --> 01:09:42.944
<v Speaker 1>used

01:09:43.105 --> 01:09:44.305
<v Speaker 1>is low,

01:09:44.785 --> 01:09:47.984
<v Speaker 1>you're probably over provisioning those containers.

01:09:48.305 --> 01:09:51.265
<v Speaker 1>You could do with provisioning them with less

01:09:51.560 --> 01:09:52.359
<v Speaker 1>data.

01:09:53.160 --> 01:09:55.000
<v Speaker 0>Yeah. That makes sense to me. Yeah.

01:09:57.080 --> 01:09:59.719
<v Speaker 0>Alright. We have a question from Russell.

01:10:00.840 --> 01:10:02.120
<v Speaker 0>Let's get that on the screen.

01:10:03.495 --> 01:10:05.575
<v Speaker 0>Russell also says, forgive me. I don't know

01:10:05.575 --> 01:10:07.975
<v Speaker 0>a lot about timescale, but can I use

01:10:07.975 --> 01:10:09.735
<v Speaker 0>all of the tools that I'm already familiar

01:10:09.735 --> 01:10:11.815
<v Speaker 0>with that already speak Postgres?

01:10:13.895 --> 01:10:17.575
<v Speaker 1>Yeah. This is

01:10:15.890 --> 01:10:17.890
<v Speaker 1>one of the beauties of the setup. You

01:10:17.890 --> 01:10:18.929
<v Speaker 1>absolutely

01:10:19.010 --> 01:10:19.650
<v Speaker 1>can

01:10:20.210 --> 01:10:23.410
<v Speaker 1>connect any tool that speaks postgres to this,

01:10:23.410 --> 01:10:26.850
<v Speaker 1>and you can use any of your available

01:10:28.050 --> 01:10:30.050
<v Speaker 1>postgres features

01:10:30.445 --> 01:10:31.565
<v Speaker 1>including, like

01:10:32.125 --> 01:10:34.285
<v Speaker 1>so time is gonna be as an extension

01:10:34.285 --> 01:10:36.765
<v Speaker 1>on top of Postgres. You can also install

01:10:36.765 --> 01:10:39.965
<v Speaker 1>other extensions. You can combine this with, for

01:10:39.965 --> 01:10:41.965
<v Speaker 1>example, geospatial data

01:10:41.965 --> 01:10:43.245
<v Speaker 1>using PostGIS.

01:10:44.370 --> 01:10:46.370
<v Speaker 1>All of the regular postgres

01:10:46.370 --> 01:10:47.409
<v Speaker 1>machinery

01:10:47.570 --> 01:10:50.449
<v Speaker 1>just works out of the box for you.

01:10:50.850 --> 01:10:51.650
<v Speaker 0>Awesome.

01:10:51.810 --> 01:10:53.890
<v Speaker 0>I can imagine that's quite a high value

01:10:53.890 --> 01:10:55.890
<v Speaker 0>selling point to people that are looking for

01:10:55.890 --> 01:10:57.730
<v Speaker 0>a database for time series data. Like, been

01:10:57.730 --> 01:10:58.449
<v Speaker 0>able to use

01:10:58.975 --> 01:11:01.455
<v Speaker 0>not just postgres, but you know, all the

01:11:01.455 --> 01:11:03.855
<v Speaker 0>tooling that they've been again comfortable with.

01:11:05.215 --> 01:11:07.614
<v Speaker 1>Very interesting. Yep. Tableau,

01:11:07.614 --> 01:11:08.655
<v Speaker 1>Power BI,

01:11:08.815 --> 01:11:10.175
<v Speaker 1>of these

01:11:10.574 --> 01:11:11.535
<v Speaker 1>things do work

01:11:12.030 --> 01:11:13.389
<v Speaker 1>with time scale.

01:11:14.270 --> 01:11:15.070
<v Speaker 0>Nice.

01:11:15.310 --> 01:11:18.190
<v Speaker 1>Yeah. Alright. Last chance. Maybe just another thing

01:11:18.190 --> 01:11:21.550
<v Speaker 2>to just just another thing. So we are

01:11:21.550 --> 01:11:24.750
<v Speaker 2>also working on building more analytic functions for

01:11:24.750 --> 01:11:27.035
<v Speaker 2>SQL. So what are the queries you are

01:11:27.035 --> 01:11:28.955
<v Speaker 2>seeing so big so they can be optimized

01:11:28.955 --> 01:11:31.275
<v Speaker 2>if you start using the analytic functions which

01:11:31.275 --> 01:11:33.275
<v Speaker 2>will be offered by timescale?

01:11:33.595 --> 01:11:35.515
<v Speaker 2>So already we are working and there's another

01:11:35.515 --> 01:11:37.995
<v Speaker 2>dedicated for project as timescale analytics.

01:11:38.389 --> 01:11:40.230
<v Speaker 2>So, yep, I just wanted to give a

01:11:40.230 --> 01:11:41.909
<v Speaker 2>heads up on that too. So you'll have

01:11:41.909 --> 01:11:44.630
<v Speaker 2>more SQL and more insights to your monitoring

01:11:44.630 --> 01:11:46.789
<v Speaker 2>data with the analytic functions.

01:11:47.270 --> 01:11:47.989
<v Speaker 0>Awesome.

01:11:48.469 --> 01:11:50.389
<v Speaker 0>I've got one other kind of random question

01:11:50.389 --> 01:11:51.989
<v Speaker 0>that's floating around my head. Just, you know,

01:11:51.989 --> 01:11:53.265
<v Speaker 0>you're saying that I can use all of

01:11:53.265 --> 01:11:55.505
<v Speaker 0>the postcard stuff. Know, I've been quite lucky

01:11:55.505 --> 01:11:57.585
<v Speaker 0>in my career. I've always I think exclusively

01:11:57.585 --> 01:11:59.664
<v Speaker 0>use postcards. I've never touched that

01:11:59.985 --> 01:12:03.265
<v Speaker 0>terrible one from Oracle. But they're like, you

01:12:03.265 --> 01:12:05.265
<v Speaker 0>know, I have access to views and triggers

01:12:05.265 --> 01:12:06.385
<v Speaker 0>and PLSQL.

01:12:06.560 --> 01:12:08.239
<v Speaker 0>Is all of that available to me with

01:12:08.239 --> 01:12:09.040
<v Speaker 0>timescale?

01:12:09.680 --> 01:12:10.960
<v Speaker 1>Yes. Yes.

01:12:11.280 --> 01:12:12.239
<v Speaker 0>Alright. I'm In

01:12:15.280 --> 01:12:16.800
<v Speaker 1>fact, a lot of

01:12:17.120 --> 01:12:20.365
<v Speaker 1>those features that you mentioned is how we

01:12:20.365 --> 01:12:21.085
<v Speaker 1>built

01:12:21.245 --> 01:12:21.965
<v Speaker 1>promise

01:12:22.205 --> 01:12:24.205
<v Speaker 1>a promise scale to begin with. The promise

01:12:24.205 --> 01:12:27.165
<v Speaker 1>scale is a collection of, you know, besides

01:12:27.245 --> 01:12:29.485
<v Speaker 1>all of the go code and go machinery,

01:12:29.485 --> 01:12:32.685
<v Speaker 1>it's sequence groups, sequence functions,

01:12:32.990 --> 01:12:33.870
<v Speaker 1>triggers,

01:12:33.870 --> 01:12:34.750
<v Speaker 1>etcetera.

01:12:34.830 --> 01:12:38.190
<v Speaker 1>So even we ourselves are using that underneath

01:12:38.190 --> 01:12:38.989
<v Speaker 1>the hood.

01:12:39.310 --> 01:12:42.190
<v Speaker 0>Alright. Awesome. Alright. I'll give you your last

01:12:42.190 --> 01:12:43.790
<v Speaker 0>chance. Is there anything else you wanna show

01:12:43.790 --> 01:12:45.150
<v Speaker 0>today before we finish up?

01:12:47.925 --> 01:12:51.365
<v Speaker 1>No. I would just encourage people to to

01:12:51.365 --> 01:12:53.685
<v Speaker 1>join our Slack channel and to

01:12:54.405 --> 01:12:56.725
<v Speaker 1>we're more than happy to answer any questions

01:12:56.725 --> 01:12:57.765
<v Speaker 1>that people might have.

01:13:00.280 --> 01:13:01.400
<v Speaker 0>Alright. Awesome.

01:13:02.199 --> 01:13:02.920
<v Speaker 0>Well,

01:13:03.000 --> 01:13:04.760
<v Speaker 0>I hope you've enjoyed having us look at

01:13:04.760 --> 01:13:07.639
<v Speaker 0>Promscale. It is a really cool way to

01:13:08.120 --> 01:13:10.679
<v Speaker 0>who can do the existing Prometheus ecosystem that

01:13:10.679 --> 01:13:12.440
<v Speaker 0>already has a whole bunch of value in

01:13:12.440 --> 01:13:13.000
<v Speaker 0>Kubernetes,

01:13:13.445 --> 01:13:17.365
<v Speaker 0>but have a Postgres based long term storage

01:13:17.365 --> 01:13:19.285
<v Speaker 0>for your metrics, which I think we've seen

01:13:19.285 --> 01:13:21.445
<v Speaker 0>through the sequel and the conversations today

01:13:21.685 --> 01:13:22.405
<v Speaker 0>offers

01:13:22.725 --> 01:13:23.764
<v Speaker 0>fantastic

01:13:23.845 --> 01:13:25.365
<v Speaker 0>benefits to you and your business.

01:13:25.940 --> 01:13:26.739
<v Speaker 0>Alright.

01:13:26.820 --> 01:13:28.580
<v Speaker 0>Matt and Vinith, thank you so much for

01:13:28.580 --> 01:13:30.100
<v Speaker 0>joining me today. I know we had a

01:13:30.100 --> 01:13:32.020
<v Speaker 0>couple of problems. I am not I'm I'm

01:13:32.020 --> 01:13:33.940
<v Speaker 0>probably gonna lose sleep over that helm thing.

01:13:33.940 --> 01:13:35.460
<v Speaker 0>It's gonna bother me so much.

01:13:35.700 --> 01:13:37.940
<v Speaker 0>But we got past it. We got everything

01:13:37.940 --> 01:13:40.020
<v Speaker 0>working and it was really cool to see

01:13:40.020 --> 01:13:41.220
<v Speaker 0>it. So thank you both for your time

01:13:41.220 --> 01:13:41.540
<v Speaker 0>today.

01:13:43.435 --> 01:13:45.915
<v Speaker 1>Thank you, David. Alright. Have a great day.

01:13:45.915 --> 01:13:48.235
<v Speaker 2>I'll see soon. Thanks for having us. Yep.

01:13:48.235 --> 01:13:49.675
<v Speaker 2>I'll see you all soon. Thanks. Bye. Bye

01:13:49.675 --> 01:13:50.795
<v Speaker 2>bye. Bye.
