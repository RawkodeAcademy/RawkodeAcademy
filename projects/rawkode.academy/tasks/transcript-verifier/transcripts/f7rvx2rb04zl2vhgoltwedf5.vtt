WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 803d8485-438e-42b3-8ce3-d5e5611a112f
Created: 2025-04-29T16:54:09.269Z
Duration: 4452.526
Channels: 1

00:01:47.770 --> 00:01:52.010
<v Speaker 0>Hello, and welcome back to the Rawkode Academy.

00:01:52.410 --> 00:01:54.570
<v Speaker 0>I'm your host, David Flanagan, although you may

00:01:54.570 --> 00:01:56.810
<v Speaker 0>know me from across the Internet as Rawkode.

00:01:57.690 --> 00:02:00.010
<v Speaker 0>Today, we are taking a look at two

00:02:00.010 --> 00:02:03.385
<v Speaker 0>brand new tools for building secure container

00:02:03.385 --> 00:02:05.225
<v Speaker 0>images. That is apko

00:02:05.225 --> 00:02:06.585
<v Speaker 0>and melange.

00:02:07.305 --> 00:02:09.465
<v Speaker 0>Joining us today from ChainGuard,

00:02:09.465 --> 00:02:11.545
<v Speaker 0>I'm gonna introduce us to these tools, show

00:02:11.545 --> 00:02:13.930
<v Speaker 0>us how to get started, and explain to

00:02:13.930 --> 00:02:15.769
<v Speaker 0>me why they're interesting because I'm not very

00:02:15.769 --> 00:02:16.650
<v Speaker 0>smart.

00:02:17.129 --> 00:02:17.770
<v Speaker 0>It's.

00:02:19.129 --> 00:02:20.730
<v Speaker 0>Hello.

00:02:21.370 --> 00:02:22.330
<v Speaker 0>How are you?

00:02:22.569 --> 00:02:23.290
<v Speaker 1>Hey.

00:02:24.090 --> 00:02:24.970
<v Speaker 1>Hey, everybody.

00:02:25.930 --> 00:02:27.370
<v Speaker 0>No. How'd you go? Please feel free to

00:02:27.370 --> 00:02:27.930
<v Speaker 0>introduce yourself.

00:02:30.145 --> 00:02:31.585
<v Speaker 1>I'm Ariadne.

00:02:31.585 --> 00:02:33.025
<v Speaker 1>I'm the

00:02:33.745 --> 00:02:37.425
<v Speaker 1>security chair for the Alpine Linux distribution, and

00:02:37.425 --> 00:02:38.145
<v Speaker 1>I'm

00:02:38.865 --> 00:02:39.665
<v Speaker 1>also

00:02:40.465 --> 00:02:41.905
<v Speaker 1>a software

00:02:41.985 --> 00:02:43.025
<v Speaker 1>engineer at.

00:02:43.584 --> 00:02:43.985
<v Speaker 1>And,

00:02:45.630 --> 00:02:47.470
<v Speaker 1>basically, I'm the

00:02:47.790 --> 00:02:48.270
<v Speaker 1>author

00:02:48.750 --> 00:02:52.190
<v Speaker 1>primary author of apko and melange.

00:02:52.750 --> 00:02:53.390
<v Speaker 1>So,

00:02:54.430 --> 00:02:56.110
<v Speaker 1>yeah, that's basically it.

00:02:57.235 --> 00:02:59.795
<v Speaker 0>Awesome. Thank you very much. I mean, it's

00:02:59.795 --> 00:03:01.394
<v Speaker 0>an absolute pleasure to have you here. I

00:03:01.394 --> 00:03:03.235
<v Speaker 0>mean, you've kept me hanging for months, if

00:03:03.235 --> 00:03:05.075
<v Speaker 0>not years, but I'm so glad that you've

00:03:05.155 --> 00:03:05.715
<v Speaker 1>Yeah.

00:03:06.194 --> 00:03:08.114
<v Speaker 0>Been able to come on and share some

00:03:08.114 --> 00:03:11.060
<v Speaker 0>of that knowledge with us today. So for,

00:03:11.299 --> 00:03:12.900
<v Speaker 0>you know, for me and for anyone else

00:03:12.900 --> 00:03:15.299
<v Speaker 0>that isn't familiar or aware of what apko

00:03:15.299 --> 00:03:17.140
<v Speaker 0>and melange are, can you give us, like,

00:03:17.140 --> 00:03:19.700
<v Speaker 0>the the high level overview before we, you

00:03:19.700 --> 00:03:21.299
<v Speaker 0>know, jump to the screen share and try

00:03:21.299 --> 00:03:22.420
<v Speaker 0>to understand what these things are?

00:03:23.665 --> 00:03:25.825
<v Speaker 1>Yes. So apko

00:03:25.825 --> 00:03:26.625
<v Speaker 1>is

00:03:26.625 --> 00:03:27.345
<v Speaker 1>a

00:03:29.905 --> 00:03:30.545
<v Speaker 1>image

00:03:30.785 --> 00:03:32.065
<v Speaker 1>composition tool.

00:03:32.305 --> 00:03:33.585
<v Speaker 1>It kind

00:03:33.585 --> 00:03:35.185
<v Speaker 1>of acts like Docker

00:03:35.265 --> 00:03:38.625
<v Speaker 1>in terms of you have a configuration file

00:03:39.159 --> 00:03:41.239
<v Speaker 1>that defines a bunch of things, and then

00:03:41.239 --> 00:03:43.560
<v Speaker 1>it spits out an image and publishes it

00:03:43.560 --> 00:03:44.280
<v Speaker 1>somewhere.

00:03:46.439 --> 00:03:47.320
<v Speaker 1>And then

00:03:47.879 --> 00:03:50.920
<v Speaker 1>the key thing about apko is that instead

00:03:50.920 --> 00:03:52.120
<v Speaker 1>of having, like,

00:03:53.245 --> 00:03:55.885
<v Speaker 1>things like the run statement or

00:03:56.365 --> 00:03:58.125
<v Speaker 1>copy statement or whatever,

00:03:58.285 --> 00:03:59.485
<v Speaker 1>it only

00:03:59.725 --> 00:04:03.085
<v Speaker 1>assembles images from APK packages.

00:04:03.485 --> 00:04:04.125
<v Speaker 1>The

00:04:04.845 --> 00:04:06.925
<v Speaker 1>reason why this is a big deal is

00:04:06.925 --> 00:04:07.325
<v Speaker 1>because

00:04:07.970 --> 00:04:10.530
<v Speaker 1>if you try to scan an image made

00:04:10.530 --> 00:04:11.490
<v Speaker 1>with Docker,

00:04:12.530 --> 00:04:13.330
<v Speaker 1>generally

00:04:14.450 --> 00:04:15.250
<v Speaker 1>speaking,

00:04:15.330 --> 00:04:16.690
<v Speaker 1>the scanners

00:04:16.850 --> 00:04:17.810
<v Speaker 1>can't

00:04:18.050 --> 00:04:18.850
<v Speaker 1>really see

00:04:20.225 --> 00:04:22.705
<v Speaker 1>all of the different things that have been

00:04:22.705 --> 00:04:24.625
<v Speaker 1>put into the image. Like, it can only

00:04:24.625 --> 00:04:26.225
<v Speaker 1>see, like, what's been

00:04:27.185 --> 00:04:29.985
<v Speaker 1>added to the image through various package managers

00:04:29.985 --> 00:04:33.905
<v Speaker 1>like APK or NPM or PyPI or whatever.

00:04:34.305 --> 00:04:35.185
<v Speaker 1>So

00:04:35.610 --> 00:04:38.410
<v Speaker 1>the idea behind apko is that if you

00:04:38.410 --> 00:04:40.889
<v Speaker 1>have an assembly tool that only deals with

00:04:40.889 --> 00:04:41.690
<v Speaker 1>packages,

00:04:41.690 --> 00:04:44.810
<v Speaker 1>then you can guarantee that the scanners

00:04:44.889 --> 00:04:45.930
<v Speaker 1>can scan

00:04:46.169 --> 00:04:49.290
<v Speaker 1>everything that's in the image because it's all

00:04:50.015 --> 00:04:52.095
<v Speaker 1>in the image, and it's all recorded in

00:04:52.095 --> 00:04:53.855
<v Speaker 1>the package manager database.

00:04:53.855 --> 00:04:54.495
<v Speaker 1>So

00:04:54.975 --> 00:04:57.215
<v Speaker 1>that that's a pko in a nutshell.

00:04:57.615 --> 00:04:58.255
<v Speaker 1>But

00:04:58.575 --> 00:05:00.735
<v Speaker 1>the other key thing about Docker is that

00:05:00.735 --> 00:05:02.735
<v Speaker 1>you can use it to build things

00:05:03.599 --> 00:05:05.759
<v Speaker 1>in sort of a cloud native way.

00:05:07.520 --> 00:05:10.639
<v Speaker 1>But as previously mentioned, if you build things

00:05:10.639 --> 00:05:13.280
<v Speaker 1>with Docker, then the scanners can't necessarily see

00:05:13.280 --> 00:05:16.080
<v Speaker 1>them. So Yep. You need you need a

00:05:16.080 --> 00:05:17.439
<v Speaker 1>second tool to

00:05:18.825 --> 00:05:21.625
<v Speaker 1>take code and turn it into an artifact

00:05:21.625 --> 00:05:24.185
<v Speaker 1>that can be processed by apko.

00:05:24.905 --> 00:05:25.545
<v Speaker 1>And

00:05:25.865 --> 00:05:27.705
<v Speaker 1>then when you combine these

00:05:27.865 --> 00:05:29.305
<v Speaker 1>two tools together,

00:05:30.345 --> 00:05:33.305
<v Speaker 1>you get something that can actually be scanned

00:05:34.030 --> 00:05:35.390
<v Speaker 1>100%

00:05:35.950 --> 00:05:39.470
<v Speaker 1>by, like, Trivy or Snyke or,

00:05:40.670 --> 00:05:43.310
<v Speaker 1>Encore, whatever scan tool you wanna use.

00:05:47.185 --> 00:05:49.985
<v Speaker 1>It it the key thing is that they

00:05:49.985 --> 00:05:51.185
<v Speaker 1>have the visibility.

00:05:51.425 --> 00:05:54.305
<v Speaker 1>So that that's basically what the tools do.

00:05:54.305 --> 00:05:55.985
<v Speaker 0>I love that you said a % and

00:05:55.985 --> 00:05:58.065
<v Speaker 0>then play it safe with, like, 99.9

00:05:58.065 --> 00:05:59.425
<v Speaker 0>or something like that. Like, it was just

00:05:59.505 --> 00:06:01.580
<v Speaker 0>this is it's gotta make sure that trivia

00:06:01.580 --> 00:06:03.020
<v Speaker 0>and all of that work well with us,

00:06:03.020 --> 00:06:04.780
<v Speaker 0>which is really cool. So I'm gonna try

00:06:04.780 --> 00:06:06.220
<v Speaker 0>and just make sure that I understood that

00:06:06.220 --> 00:06:09.740
<v Speaker 0>correctly. Is that the combination of apko

00:06:09.740 --> 00:06:11.740
<v Speaker 0>and melange mean that

00:06:12.300 --> 00:06:14.620
<v Speaker 0>and my repository where I'm building my super

00:06:14.620 --> 00:06:16.944
<v Speaker 0>million dollar application is that we could use

00:06:16.944 --> 00:06:19.825
<v Speaker 0>these two tools to turn that code into

00:06:20.145 --> 00:06:21.905
<v Speaker 0>an APK package,

00:06:22.465 --> 00:06:24.944
<v Speaker 0>which can then be turned into a container

00:06:24.944 --> 00:06:26.385
<v Speaker 0>image and published.

00:06:26.785 --> 00:06:28.944
<v Speaker 0>And it gets around this weird problem

00:06:29.490 --> 00:06:30.930
<v Speaker 0>that I think we've all had at some

00:06:30.930 --> 00:06:32.690
<v Speaker 0>point is that when we just copy random

00:06:32.690 --> 00:06:35.250
<v Speaker 0>binaries and take container image, all these scanning

00:06:35.250 --> 00:06:37.009
<v Speaker 0>things fall over. And does not fall over,

00:06:37.009 --> 00:06:38.610
<v Speaker 0>but they have no idea what it is

00:06:38.610 --> 00:06:40.450
<v Speaker 0>because they don't actually do

00:06:40.930 --> 00:06:43.395
<v Speaker 0>binary introspection or anything like that. They they

00:06:43.395 --> 00:06:44.835
<v Speaker 0>need to know where it came from

00:06:45.075 --> 00:06:47.555
<v Speaker 0>and the metadata about versions, etcetera.

00:06:48.035 --> 00:06:49.555
<v Speaker 0>These two pieces of software these

00:06:50.195 --> 00:06:52.595
<v Speaker 0>two pieces of software together give us that

00:06:52.835 --> 00:06:54.355
<v Speaker 0>traceability, visibility,

00:06:54.915 --> 00:06:56.755
<v Speaker 0>and so that's making sure that our container

00:06:56.755 --> 00:06:58.560
<v Speaker 0>images can be scanned with these these tools,

00:06:58.560 --> 00:07:01.439
<v Speaker 0>which is a really big deal. Like, this

00:07:01.439 --> 00:07:04.240
<v Speaker 0>is really important step for understanding

00:07:04.560 --> 00:07:07.199
<v Speaker 0>the security footprint of our applications when we

00:07:07.199 --> 00:07:08.479
<v Speaker 0>are shipping them to production.

00:07:09.599 --> 00:07:12.560
<v Speaker 1>Right. Exactly. And that's that's that's the point

00:07:13.225 --> 00:07:14.345
<v Speaker 1>is

00:07:14.345 --> 00:07:17.305
<v Speaker 1>making sure that the final stage in your

00:07:17.305 --> 00:07:18.665
<v Speaker 1>image composition

00:07:18.665 --> 00:07:22.585
<v Speaker 1>process is putting out something that is 100%

00:07:22.665 --> 00:07:23.865
<v Speaker 1>visible to,

00:07:25.145 --> 00:07:28.540
<v Speaker 1>the scan tools. And the other nice thing

00:07:28.540 --> 00:07:31.260
<v Speaker 1>about this is since you have all of

00:07:31.260 --> 00:07:34.060
<v Speaker 1>that visibility up front, you can actually,

00:07:34.140 --> 00:07:35.500
<v Speaker 1>at that time,

00:07:36.620 --> 00:07:38.940
<v Speaker 1>build what's called an SBOM,

00:07:38.940 --> 00:07:41.340
<v Speaker 1>which is a software build materials file.

00:07:42.195 --> 00:07:42.835
<v Speaker 1>And

00:07:43.794 --> 00:07:46.675
<v Speaker 1>if you have that up front, then you

00:07:46.675 --> 00:07:49.074
<v Speaker 1>don't have to worry about whether or not

00:07:49.074 --> 00:07:51.475
<v Speaker 1>a scanner is able to put it back

00:07:51.475 --> 00:07:52.755
<v Speaker 1>together after the fact.

00:07:53.760 --> 00:07:55.520
<v Speaker 1>So you can be confident

00:07:55.840 --> 00:07:56.560
<v Speaker 1>in

00:07:57.680 --> 00:07:59.920
<v Speaker 1>the results of your scan tools and the

00:07:59.920 --> 00:08:01.040
<v Speaker 1>results of your

00:08:01.440 --> 00:08:04.080
<v Speaker 1>SCA tools and so on. Because

00:08:04.880 --> 00:08:08.080
<v Speaker 1>if you're doing everything after the fact, then

00:08:09.005 --> 00:08:11.725
<v Speaker 1>you're missing things, basically. And

00:08:12.525 --> 00:08:15.165
<v Speaker 1>the other nice benefit to all of this

00:08:15.165 --> 00:08:19.165
<v Speaker 1>is Alpine images are already really small. But

00:08:20.445 --> 00:08:22.125
<v Speaker 1>since

00:08:21.530 --> 00:08:24.330
<v Speaker 1>we have these tools now, you can actually

00:08:24.330 --> 00:08:25.850
<v Speaker 1>build containers

00:08:25.850 --> 00:08:26.970
<v Speaker 1>that have

00:08:27.130 --> 00:08:29.849
<v Speaker 1>only the components of Alpine that you require

00:08:29.849 --> 00:08:31.530
<v Speaker 1>to support your application.

00:08:33.770 --> 00:08:35.529
<v Speaker 1>And so for an example,

00:08:36.485 --> 00:08:38.084
<v Speaker 1>we built an NGINX

00:08:38.084 --> 00:08:39.605
<v Speaker 1>Ingress controller,

00:08:40.404 --> 00:08:42.245
<v Speaker 1>container for Kubernetes,

00:08:43.204 --> 00:08:45.445
<v Speaker 1>just as a proof of concept, and it

00:08:45.445 --> 00:08:47.524
<v Speaker 1>weighs in at 8.3

00:08:47.524 --> 00:08:48.404
<v Speaker 1>megabytes

00:08:48.404 --> 00:08:49.125
<v Speaker 1>instead of

00:08:50.330 --> 00:08:54.250
<v Speaker 1>the 34 megabyte NGINX Alpine image or the

00:08:54.330 --> 00:08:56.570
<v Speaker 1>like, I think it's a 40

00:08:56.570 --> 00:08:57.610
<v Speaker 1>megabytes

00:08:57.930 --> 00:08:59.370
<v Speaker 1>NGINX Docker

00:08:59.770 --> 00:09:00.570
<v Speaker 1>images.

00:09:02.010 --> 00:09:03.050
<v Speaker 1>And

00:09:05.165 --> 00:09:07.325
<v Speaker 1>just kinda looking in the chat here,

00:09:07.805 --> 00:09:10.125
<v Speaker 1>I noticed that somebody mentioned Chimera,

00:09:10.525 --> 00:09:12.605
<v Speaker 1>and Chimera should already be

00:09:14.845 --> 00:09:16.845
<v Speaker 1>fully supported by apko

00:09:16.845 --> 00:09:19.020
<v Speaker 1>and melange if you want to use that

00:09:19.020 --> 00:09:19.980
<v Speaker 1>as your base

00:09:20.220 --> 00:09:21.660
<v Speaker 1>instead of Alpine.

00:09:22.620 --> 00:09:23.420
<v Speaker 0>Nice.

00:09:24.220 --> 00:09:24.860
<v Speaker 0>So,

00:09:25.260 --> 00:09:28.300
<v Speaker 0>I mean, Alpine images were already small enough

00:09:28.300 --> 00:09:31.180
<v Speaker 0>and being widely adopted because of their size,

00:09:31.180 --> 00:09:34.005
<v Speaker 0>and you've went, nah, not small enough. And

00:09:34.005 --> 00:09:35.845
<v Speaker 0>now we're stripping even more stuff out of

00:09:35.845 --> 00:09:37.045
<v Speaker 0>that. That's

00:09:37.205 --> 00:09:39.125
<v Speaker 0>that's pretty wild, but I like it.

00:09:39.765 --> 00:09:41.125
<v Speaker 1>So Yeah. The

00:09:42.565 --> 00:09:43.365
<v Speaker 1>the

00:09:44.005 --> 00:09:46.085
<v Speaker 1>the smallest proof of concept

00:09:46.760 --> 00:09:49.560
<v Speaker 1>image that I made with a prototype of

00:09:49.560 --> 00:09:51.560
<v Speaker 1>this tool last year,

00:09:52.200 --> 00:09:55.320
<v Speaker 1>I built a simple hello world application

00:09:55.880 --> 00:09:58.200
<v Speaker 1>that just contained Mucil,

00:09:58.440 --> 00:10:01.240
<v Speaker 1>LibC, and hell and the hello world application,

00:10:01.955 --> 00:10:03.155
<v Speaker 1>and that

00:10:03.555 --> 00:10:04.995
<v Speaker 1>clocked in at

00:10:05.395 --> 00:10:07.715
<v Speaker 1>around 400 kilobytes.

00:10:08.355 --> 00:10:08.995
<v Speaker 1>So

00:10:10.035 --> 00:10:11.555
<v Speaker 1>this tool enables

00:10:11.555 --> 00:10:12.915
<v Speaker 1>extremely small

00:10:13.715 --> 00:10:14.595
<v Speaker 1>images, like,

00:10:15.420 --> 00:10:16.780
<v Speaker 1>much smaller than

00:10:17.180 --> 00:10:18.780
<v Speaker 1>the Alpine base image.

00:10:20.220 --> 00:10:23.180
<v Speaker 0>Yeah. That's pretty cool. So, I mean,

00:10:26.220 --> 00:10:27.260
<v Speaker 0>I guess

00:10:28.175 --> 00:10:28.735
<v Speaker 0>what I

00:10:30.015 --> 00:10:33.055
<v Speaker 0>so you're just 400 k. Right? So does

00:10:33.055 --> 00:10:34.654
<v Speaker 0>that include a shell, or are we removing

00:10:34.654 --> 00:10:36.495
<v Speaker 0>the shell when we talk about this?

00:10:37.055 --> 00:10:39.535
<v Speaker 1>That removes the shell, and that's kind of

00:10:39.535 --> 00:10:42.370
<v Speaker 1>a security feature because if you don't have

00:10:42.370 --> 00:10:43.970
<v Speaker 1>a shell in there, then

00:10:44.610 --> 00:10:46.050
<v Speaker 1>you know, like, say that you have, like,

00:10:46.050 --> 00:10:47.570
<v Speaker 1>a WordPress container,

00:10:49.490 --> 00:10:50.610
<v Speaker 1>and then somebody

00:10:51.250 --> 00:10:54.050
<v Speaker 1>gets, like, r 57 shell p a not

00:10:54.050 --> 00:10:55.330
<v Speaker 1>PHP installed on it.

00:10:55.985 --> 00:10:58.785
<v Speaker 1>They can't then take that r 57 shell

00:10:58.785 --> 00:11:01.024
<v Speaker 1>and then get that to get an actual

00:11:01.024 --> 00:11:04.385
<v Speaker 1>shell and then root your container or whatever.

00:11:05.345 --> 00:11:07.505
<v Speaker 1>You know? If there's no shell there, then

00:11:07.745 --> 00:11:08.785
<v Speaker 1>it's already more

00:11:09.390 --> 00:11:12.590
<v Speaker 1>secure just from not having that attack surface.

00:11:12.990 --> 00:11:15.150
<v Speaker 0>Yeah. But there there are better approaches now

00:11:15.150 --> 00:11:16.590
<v Speaker 0>for when you do need to be able

00:11:16.590 --> 00:11:19.310
<v Speaker 0>to, you know, do debugs on production. You

00:11:19.310 --> 00:11:21.870
<v Speaker 0>know, have to control debug, which can add

00:11:21.870 --> 00:11:24.430
<v Speaker 0>a new container, web tooling, enter your pod.

00:11:24.430 --> 00:11:27.845
<v Speaker 0>Like, there's really no reason anymore for shipping

00:11:27.845 --> 00:11:29.685
<v Speaker 0>a shell inside of our application.

00:11:30.085 --> 00:11:30.965
<v Speaker 1>Exactly.

00:11:31.845 --> 00:11:34.805
<v Speaker 0>Awesome. Well, I'm really excited to play with

00:11:34.805 --> 00:11:37.285
<v Speaker 0>this now. So I am gonna pop over

00:11:37.880 --> 00:11:39.720
<v Speaker 0>to the screen share.

00:11:41.000 --> 00:11:42.839
<v Speaker 0>And all I have here is

00:11:43.480 --> 00:11:45.720
<v Speaker 0>I'll pay Linux 3.15

00:11:45.720 --> 00:11:47.800
<v Speaker 0>or three fifteen. I'm not sure.

00:11:48.920 --> 00:11:50.920
<v Speaker 0>First machine running on the node. I haven't

00:11:50.920 --> 00:11:52.680
<v Speaker 0>done anything else. I know we've got a

00:11:52.680 --> 00:11:54.634
<v Speaker 0>little bit of setup to run through,

00:11:54.875 --> 00:11:57.355
<v Speaker 0>but we're we're starting from scratch, which is

00:11:57.355 --> 00:11:59.194
<v Speaker 0>where you, the audience, would also be starting

00:11:59.194 --> 00:12:00.634
<v Speaker 0>from. So we're gonna show you every step

00:12:00.634 --> 00:12:02.475
<v Speaker 0>of the way how to to start playing

00:12:02.475 --> 00:12:04.634
<v Speaker 0>with these two tools together.

00:12:05.915 --> 00:12:06.555
<v Speaker 1>Cool.

00:12:07.754 --> 00:12:09.260
<v Speaker 1>Alright. So

00:12:12.060 --> 00:12:15.020
<v Speaker 0>I'm a first we're gonna have to update

00:12:15.420 --> 00:12:17.980
<v Speaker 1>to Alpine Edge because some of the tools

00:12:17.980 --> 00:12:19.900
<v Speaker 1>that we need are only available

00:12:20.380 --> 00:12:22.700
<v Speaker 1>in Alpine Edge right now. So

00:12:23.204 --> 00:12:24.964
<v Speaker 1>if you pull up the

00:12:25.285 --> 00:12:26.725
<v Speaker 1>repositories file

00:12:28.805 --> 00:12:32.404
<v Speaker 1>and then you've replaced the v 3.15

00:12:32.565 --> 00:12:33.605
<v Speaker 1>with Edge

00:12:35.459 --> 00:12:37.220
<v Speaker 1>for both of those repos,

00:12:38.899 --> 00:12:41.300
<v Speaker 1>and then we'll have to add the testing

00:12:41.300 --> 00:12:42.660
<v Speaker 1>repo as well.

00:12:44.820 --> 00:12:45.620
<v Speaker 1>Alright?

00:12:46.180 --> 00:12:47.220
<v Speaker 1>And then

00:12:47.620 --> 00:12:48.020
<v Speaker 1>yep.

00:12:51.035 --> 00:12:53.755
<v Speaker 1>And then, if you do APK

00:12:53.755 --> 00:12:54.635
<v Speaker 1>upgrade

00:12:55.515 --> 00:12:57.755
<v Speaker 1>dash capital u

00:12:58.795 --> 00:13:00.155
<v Speaker 1>and then a

00:13:00.315 --> 00:13:03.275
<v Speaker 1>and hit enter, it'll upgrade the distribution to

00:13:03.275 --> 00:13:03.675
<v Speaker 1>Edge,

00:13:04.959 --> 00:13:06.960
<v Speaker 1>which will take, like, two seconds.

00:13:12.720 --> 00:13:15.120
<v Speaker 1>Well, maybe a little longer on It it's

00:13:15.120 --> 00:13:17.360
<v Speaker 0>moving fast. Because there is most upgrades with

00:13:17.360 --> 00:13:17.760
<v Speaker 0>this stuff.

00:13:21.774 --> 00:13:23.935
<v Speaker 1>Well, that's that's one of the reasons why

00:13:23.935 --> 00:13:24.654
<v Speaker 1>people

00:13:24.894 --> 00:13:26.095
<v Speaker 1>enjoy using

00:13:26.334 --> 00:13:28.015
<v Speaker 1>Alpine is because the

00:13:28.735 --> 00:13:30.334
<v Speaker 1>package manager is

00:13:30.815 --> 00:13:31.695
<v Speaker 1>quite speedy.

00:13:32.580 --> 00:13:33.700
<v Speaker 0>Yeah. Definitely.

00:13:34.420 --> 00:13:36.180
<v Speaker 0>We wanna tackle a question just now. Are

00:13:36.180 --> 00:13:37.380
<v Speaker 0>you happy with that? Like

00:13:38.820 --> 00:13:41.380
<v Speaker 1>Yeah. I saw that Sam

00:13:41.780 --> 00:13:43.060
<v Speaker 1>asked in the

00:13:43.620 --> 00:13:44.420
<v Speaker 1>chat about

00:13:47.155 --> 00:13:48.835
<v Speaker 1>comparison to distroless.

00:13:48.995 --> 00:13:50.595
<v Speaker 1>And, actually,

00:13:51.235 --> 00:13:52.355
<v Speaker 1>the apko

00:13:52.355 --> 00:13:53.635
<v Speaker 1>and melange

00:13:54.595 --> 00:13:55.395
<v Speaker 1>stack

00:13:55.555 --> 00:13:58.675
<v Speaker 1>are intended to kinda be a spiritual successor

00:13:58.675 --> 00:13:59.555
<v Speaker 1>to distroless.

00:14:00.780 --> 00:14:03.420
<v Speaker 1>And don't worry. We're working on a GLIBC

00:14:03.420 --> 00:14:04.700
<v Speaker 1>version of it,

00:14:06.300 --> 00:14:09.900
<v Speaker 1>to support people who need GLIBC compatibility.

00:14:10.220 --> 00:14:10.780
<v Speaker 1>So

00:14:13.315 --> 00:14:14.835
<v Speaker 0>I'm just gonna give up trying to fix

00:14:14.835 --> 00:14:16.115
<v Speaker 0>my I don't know why my comments are

00:14:16.115 --> 00:14:18.755
<v Speaker 0>so huge and just taking over the whole

00:14:18.915 --> 00:14:20.035
<v Speaker 0>thing. Yeah.

00:14:20.995 --> 00:14:23.555
<v Speaker 1>So, basically, it's the same

00:14:25.500 --> 00:14:26.780
<v Speaker 1>concept conceptually,

00:14:26.780 --> 00:14:28.140
<v Speaker 1>and it's sort of meant to be a

00:14:28.140 --> 00:14:29.420
<v Speaker 1>spiritual successor.

00:14:29.820 --> 00:14:32.780
<v Speaker 1>Of course, Google's Distroless project

00:14:33.100 --> 00:14:36.140
<v Speaker 1>uses Bazel to build all of the base

00:14:36.140 --> 00:14:37.820
<v Speaker 1>images, and it's

00:14:38.780 --> 00:14:40.860
<v Speaker 1>really a pain to

00:14:42.125 --> 00:14:44.125
<v Speaker 1>deal with Bazel because

00:14:45.564 --> 00:14:49.485
<v Speaker 1>it's just it it's Bazel is very verbose

00:14:50.365 --> 00:14:51.644
<v Speaker 1>in terms of,

00:14:53.165 --> 00:14:55.485
<v Speaker 1>like, how you

00:14:55.130 --> 00:14:58.330
<v Speaker 1>actually use it to build the the legacy

00:14:58.330 --> 00:14:59.850
<v Speaker 1>Distroless images.

00:15:00.650 --> 00:15:02.970
<v Speaker 1>Like, you have to literally spell out each

00:15:03.290 --> 00:15:07.290
<v Speaker 1>detail, like, go download this dot dev file

00:15:07.445 --> 00:15:09.125
<v Speaker 1>with this checksum

00:15:09.125 --> 00:15:10.805
<v Speaker 1>and then this one and this one and

00:15:10.805 --> 00:15:13.285
<v Speaker 1>this one. And you have to actually solve

00:15:13.285 --> 00:15:16.485
<v Speaker 1>all the dependencies yourself by hand. So

00:15:16.964 --> 00:15:18.085
<v Speaker 1>apko

00:15:18.325 --> 00:15:20.005
<v Speaker 1>and melange,

00:15:21.680 --> 00:15:23.519
<v Speaker 1>it's built on APK,

00:15:23.519 --> 00:15:26.240
<v Speaker 1>and it uses the APK solver and all

00:15:26.720 --> 00:15:28.640
<v Speaker 1>of that. So it makes everything a lot

00:15:28.640 --> 00:15:30.640
<v Speaker 1>simpler in terms of

00:15:32.800 --> 00:15:33.760
<v Speaker 1>actually,

00:15:33.760 --> 00:15:36.720
<v Speaker 1>like, going from zero to having an image

00:15:36.720 --> 00:15:39.415
<v Speaker 1>versus with Distroless where you're

00:15:39.815 --> 00:15:40.935
<v Speaker 1>having to

00:15:42.375 --> 00:15:46.295
<v Speaker 1>write, like, three to 400 lines of Bazel

00:15:47.495 --> 00:15:48.775
<v Speaker 1>Starlark

00:15:48.775 --> 00:15:49.815
<v Speaker 1>configuration,

00:15:49.895 --> 00:15:50.375
<v Speaker 1>I believe.

00:15:51.690 --> 00:15:54.490
<v Speaker 1>I believe the configuration language of Bazel is

00:15:54.490 --> 00:15:56.730
<v Speaker 1>called Starlark. So you have to write, like,

00:15:56.730 --> 00:15:58.970
<v Speaker 1>three to 400 lines of Starlark in order

00:15:58.970 --> 00:16:01.290
<v Speaker 1>to actually, like, add new things

00:16:02.010 --> 00:16:02.810
<v Speaker 1>to

00:16:04.970 --> 00:16:06.250
<v Speaker 1>Distroless, and it's

00:16:07.635 --> 00:16:09.155
<v Speaker 1>so we decided,

00:16:09.635 --> 00:16:10.355
<v Speaker 1>you know,

00:16:10.995 --> 00:16:14.115
<v Speaker 1>let's kind of rework that to

00:16:17.795 --> 00:16:19.235
<v Speaker 1>simplify it. And

00:16:19.709 --> 00:16:22.269
<v Speaker 1>so that's how a p co a p

00:16:22.269 --> 00:16:23.949
<v Speaker 1>k o and melange

00:16:23.949 --> 00:16:25.389
<v Speaker 1>came up came about.

00:16:25.709 --> 00:16:29.230
<v Speaker 0>Nice. Yeah. I think Bazel is a really

00:16:29.230 --> 00:16:31.470
<v Speaker 0>phenomenal piece of software, but I just can't

00:16:31.470 --> 00:16:33.885
<v Speaker 0>use it. I find it too difficult, too

00:16:33.885 --> 00:16:34.765
<v Speaker 0>cumbersome.

00:16:34.845 --> 00:16:38.445
<v Speaker 0>I'm not a fan of Starlark, because we're

00:16:38.445 --> 00:16:39.725
<v Speaker 0>Python dialect.

00:16:39.885 --> 00:16:41.965
<v Speaker 0>I don't want the JVM on my machines

00:16:41.965 --> 00:16:43.885
<v Speaker 0>most of the time, so I just it's

00:16:43.885 --> 00:16:45.245
<v Speaker 0>it's not a tool that I feel comfortable

00:16:45.245 --> 00:16:47.085
<v Speaker 0>going through even though I appreciate

00:16:48.040 --> 00:16:50.040
<v Speaker 0>what it does and why like, you know,

00:16:50.040 --> 00:16:51.560
<v Speaker 0>companies like Google use it.

00:16:52.280 --> 00:16:54.200
<v Speaker 0>Yeah. So it's nice that there's there are

00:16:54.200 --> 00:16:55.240
<v Speaker 0>more more

00:16:55.240 --> 00:16:57.000
<v Speaker 0>alternatives to that coming up.

00:16:57.560 --> 00:17:00.120
<v Speaker 0>We got PGSA is still faster. Why am

00:17:00.120 --> 00:17:01.720
<v Speaker 0>I I give up the comments on this

00:17:01.720 --> 00:17:01.880
<v Speaker 0>thing.

00:17:03.105 --> 00:17:05.425
<v Speaker 0>Still faster than apt. Yep. We've got Nuno

00:17:05.425 --> 00:17:07.264
<v Speaker 0>following along in WSL two.

00:17:07.505 --> 00:17:09.025
<v Speaker 0>I'll move it one more time, but it

00:17:09.025 --> 00:17:11.905
<v Speaker 0>it just stay. Right? And then we've got

00:17:11.905 --> 00:17:13.505
<v Speaker 0>a question from John

00:17:13.665 --> 00:17:15.185
<v Speaker 0>John Sun Junior.

00:17:16.859 --> 00:17:18.859
<v Speaker 0>Any thoughts on how this was compared to

00:17:18.859 --> 00:17:19.740
<v Speaker 0>Next Day?

00:17:20.220 --> 00:17:22.300
<v Speaker 0>I think that's the the question. Are you

00:17:22.300 --> 00:17:24.539
<v Speaker 0>familiar with Next Day? I

00:17:25.099 --> 00:17:27.580
<v Speaker 1>have some passing familiarity.

00:17:31.195 --> 00:17:31.835
<v Speaker 1>So

00:17:32.235 --> 00:17:34.715
<v Speaker 1>if I'm right, I think Nixiri is the

00:17:34.715 --> 00:17:35.915
<v Speaker 1>thing that builds

00:17:35.995 --> 00:17:38.315
<v Speaker 1>images on demand with

00:17:38.315 --> 00:17:39.115
<v Speaker 1>Nick. Okay.

00:17:40.315 --> 00:17:40.635
<v Speaker 1>Great.

00:17:42.280 --> 00:17:43.720
<v Speaker 1>Yeah. We're

00:17:43.720 --> 00:17:47.800
<v Speaker 1>considering doing something similar. There's a service called

00:17:47.800 --> 00:17:49.160
<v Speaker 1>Contain.me,

00:17:50.120 --> 00:17:50.760
<v Speaker 1>which

00:17:51.240 --> 00:17:53.640
<v Speaker 1>builds a whole bunch of images on demand.

00:17:53.640 --> 00:17:54.120
<v Speaker 1>And

00:17:54.520 --> 00:17:56.360
<v Speaker 1>one thing that we're thinking about doing

00:17:56.955 --> 00:17:58.635
<v Speaker 1>is contributing,

00:17:58.635 --> 00:18:00.394
<v Speaker 1>like, an APKO

00:18:01.115 --> 00:18:04.475
<v Speaker 1>version of that so that you can actually

00:18:05.355 --> 00:18:06.154
<v Speaker 1>build

00:18:07.275 --> 00:18:08.315
<v Speaker 1>APKO

00:18:08.315 --> 00:18:10.794
<v Speaker 1>images on demand through Contain.me.

00:18:12.769 --> 00:18:14.210
<v Speaker 1>The apko

00:18:14.210 --> 00:18:16.369
<v Speaker 1>internals themselves are

00:18:16.929 --> 00:18:17.730
<v Speaker 1>designed

00:18:17.730 --> 00:18:18.849
<v Speaker 1>to allow

00:18:21.090 --> 00:18:23.169
<v Speaker 1>one to completely programmatically

00:18:23.169 --> 00:18:23.969
<v Speaker 1>drive,

00:18:24.049 --> 00:18:26.289
<v Speaker 1>like, the apko

00:18:27.055 --> 00:18:28.095
<v Speaker 1>image composition

00:18:29.855 --> 00:18:31.375
<v Speaker 1>composition engine.

00:18:31.455 --> 00:18:32.174
<v Speaker 1>So

00:18:33.055 --> 00:18:35.215
<v Speaker 1>building something like that would not be that

00:18:35.215 --> 00:18:37.535
<v Speaker 1>hard to do, and it is something that

00:18:37.535 --> 00:18:40.575
<v Speaker 1>is on a road map for APKO.

00:18:41.539 --> 00:18:42.499
<v Speaker 0>Alright.

00:18:44.260 --> 00:18:46.419
<v Speaker 0>Sam says thank you as well for that

00:18:46.419 --> 00:18:48.979
<v Speaker 0>very detailed answer. Yeah. Definitely.

00:18:50.260 --> 00:18:50.979
<v Speaker 0>Okay.

00:18:51.620 --> 00:18:53.674
<v Speaker 0>So slight segue there, but we have our

00:18:53.674 --> 00:18:55.915
<v Speaker 0>APK upgrade finished, like, a year ago. So

00:18:55.915 --> 00:18:57.355
<v Speaker 0>we're we're we're good. We can move on

00:18:57.355 --> 00:18:57.994
<v Speaker 0>now.

00:18:58.875 --> 00:19:00.634
<v Speaker 0>What are the the next steps?

00:19:01.355 --> 00:19:03.754
<v Speaker 1>Alright. So we're gonna have to install some

00:19:03.915 --> 00:19:04.955
<v Speaker 1>packages.

00:19:06.075 --> 00:19:06.794
<v Speaker 1>So

00:19:07.110 --> 00:19:09.670
<v Speaker 1>we're gonna need Go. Obviously, the tools are

00:19:09.670 --> 00:19:10.629
<v Speaker 1>built to Go.

00:19:11.429 --> 00:19:12.470
<v Speaker 1>Buildbase,

00:19:14.150 --> 00:19:15.990
<v Speaker 1>which is build dash base.

00:19:16.710 --> 00:19:19.510
<v Speaker 1>We're gonna need git to download the source

00:19:19.510 --> 00:19:20.309
<v Speaker 1>code, obviously,

00:19:21.595 --> 00:19:23.994
<v Speaker 1>And then we're going to need bubble wrap,

00:19:26.475 --> 00:19:29.034
<v Speaker 1>which is a lightweight container thing.

00:19:29.195 --> 00:19:29.994
<v Speaker 1>And then

00:19:30.395 --> 00:19:32.154
<v Speaker 1>we're gonna need fruit,

00:19:33.515 --> 00:19:35.195
<v Speaker 1>which is p r o o t.

00:19:35.970 --> 00:19:38.129
<v Speaker 0>Yeah. I've not heard of Bubble Wrap.

00:19:39.169 --> 00:19:40.929
<v Speaker 1>Bubble Wrap is from

00:19:41.250 --> 00:19:43.970
<v Speaker 1>Red Hat. It's the container

00:19:46.929 --> 00:19:48.929
<v Speaker 1>engine that's used by Flatpak.

00:19:50.705 --> 00:19:51.745
<v Speaker 0>Alright.

00:19:51.745 --> 00:19:54.625
<v Speaker 0>There we go. Learning lots of stuff today.

00:19:54.625 --> 00:19:55.424
<v Speaker 0>That's great.

00:19:56.065 --> 00:19:57.825
<v Speaker 0>Oh, we never got go1.eighteen,

00:19:57.825 --> 00:19:59.585
<v Speaker 0>so we can't use genetics yet.

00:19:59.985 --> 00:20:01.825
<v Speaker 0>Maybe next week. Well, the

00:20:02.545 --> 00:20:03.985
<v Speaker 1>good news is that

00:20:04.705 --> 00:20:07.790
<v Speaker 1>apko does not target go1.18

00:20:07.790 --> 00:20:09.070
<v Speaker 1>yet. So

00:20:10.190 --> 00:20:12.590
<v Speaker 0>Yeah. I mean, that only dropped yesterday, right,

00:20:12.590 --> 00:20:13.790
<v Speaker 0>I think? So

00:20:15.310 --> 00:20:17.710
<v Speaker 1>Yeah. I see a lot of buzz around

00:20:17.710 --> 00:20:19.790
<v Speaker 0>on Twitter. People seem to be very, very

00:20:19.790 --> 00:20:21.790
<v Speaker 0>excited about being able to use generic.

00:20:22.885 --> 00:20:24.644
<v Speaker 1>Yeah. It's gonna simplify

00:20:24.885 --> 00:20:27.925
<v Speaker 1>quite a bit of both apko and melange

00:20:27.925 --> 00:20:29.845
<v Speaker 1>to be able to use it, I think.

00:20:30.245 --> 00:20:31.445
<v Speaker 0>Pulumi too.

00:20:32.245 --> 00:20:34.325
<v Speaker 0>Yeah. We we have to wrap all of

00:20:34.325 --> 00:20:37.790
<v Speaker 0>our primitive types and Pulumi primitive type wrappers

00:20:37.790 --> 00:20:38.590
<v Speaker 0>so that

00:20:38.910 --> 00:20:40.830
<v Speaker 0>because there's a lack of genetics.

00:20:40.910 --> 00:20:42.190
<v Speaker 0>So that'll be a a nice change for

00:20:42.190 --> 00:20:43.309
<v Speaker 0>Pulumi in the future.

00:20:43.710 --> 00:20:44.590
<v Speaker 0>Jason's

00:20:44.590 --> 00:20:45.710
<v Speaker 0>saying, Dwight.

00:20:46.190 --> 00:20:48.110
<v Speaker 0>I'm assuming that's an office joke.

00:20:49.710 --> 00:20:50.510
<v Speaker 1>I I guess.

00:20:51.995 --> 00:20:54.715
<v Speaker 1>Alright. We got we got all those packages.

00:20:56.154 --> 00:20:56.955
<v Speaker 1>Alright.

00:20:56.955 --> 00:20:57.595
<v Speaker 1>So,

00:20:58.554 --> 00:21:01.195
<v Speaker 1>I mean, technically, we don't need fruit. Fruit's

00:21:01.195 --> 00:21:03.914
<v Speaker 1>only if you want to do things rootless,

00:21:03.914 --> 00:21:07.070
<v Speaker 1>but since we're keeping things simple, let's just

00:21:07.070 --> 00:21:10.190
<v Speaker 1>not bother with doing things rootless today.

00:21:10.590 --> 00:21:12.669
<v Speaker 0>I I I thought we're anyway, so we'll

00:21:12.669 --> 00:21:14.109
<v Speaker 0>just Yeah. So

00:21:16.429 --> 00:21:18.509
<v Speaker 1>the next step is to

00:21:20.585 --> 00:21:21.224
<v Speaker 1>well,

00:21:22.745 --> 00:21:24.904
<v Speaker 1>which one do you wanna play with first?

00:21:24.904 --> 00:21:25.465
<v Speaker 1>Because

00:21:25.705 --> 00:21:29.065
<v Speaker 1>there's kind of apko is pretty useful on

00:21:29.065 --> 00:21:30.825
<v Speaker 1>its own without having to

00:21:32.780 --> 00:21:34.140
<v Speaker 1>deal with melange.

00:21:34.140 --> 00:21:36.059
<v Speaker 1>So maybe it might be good to go

00:21:36.059 --> 00:21:37.419
<v Speaker 1>with apko

00:21:37.419 --> 00:21:38.860
<v Speaker 1>first and then

00:21:39.340 --> 00:21:42.380
<v Speaker 1>go through melange and then show how they're

00:21:42.380 --> 00:21:45.465
<v Speaker 1>combined at the end. So, I mean, based

00:21:45.465 --> 00:21:48.184
<v Speaker 0>on my my understanding so far, which

00:21:48.905 --> 00:21:51.065
<v Speaker 0>apko means we could right now

00:21:51.545 --> 00:21:52.745
<v Speaker 0>declaratively

00:21:52.745 --> 00:21:55.625
<v Speaker 0>build a container image by just point or

00:21:55.625 --> 00:21:58.025
<v Speaker 0>just using some alpine packages. Right?

00:21:58.850 --> 00:22:00.210
<v Speaker 0>Yeah. So if we just wanted to build

00:22:00.210 --> 00:22:02.130
<v Speaker 0>an engine x container image, we could we

00:22:02.130 --> 00:22:03.409
<v Speaker 0>could do that now?

00:22:04.050 --> 00:22:06.130
<v Speaker 1>Yeah. Yeah. Cool. Yeah. Let's see it in

00:22:06.130 --> 00:22:08.690
<v Speaker 0>action. That sounds great. Alright. So

00:22:08.930 --> 00:22:10.770
<v Speaker 1>the next step then is going to be

00:22:10.770 --> 00:22:14.494
<v Speaker 1>to download the apko source code, which is

00:22:18.495 --> 00:22:19.215
<v Speaker 1>at,

00:22:20.015 --> 00:22:23.214
<v Speaker 1>chain guard dev slash apko,

00:22:23.855 --> 00:22:25.534
<v Speaker 1>chain guard dash dev.

00:22:25.615 --> 00:22:26.654
<v Speaker 0>Oh, yep. Alright.

00:22:31.169 --> 00:22:33.570
<v Speaker 1>And then you can go in there, and

00:22:33.570 --> 00:22:35.169
<v Speaker 1>you can type in make,

00:22:35.250 --> 00:22:36.609
<v Speaker 1>a p k o,

00:22:37.730 --> 00:22:40.049
<v Speaker 1>and then hit enter, and it'll

00:22:40.289 --> 00:22:40.850
<v Speaker 1>make it.

00:22:42.665 --> 00:22:43.544
<v Speaker 1>And then

00:22:46.585 --> 00:22:48.505
<v Speaker 1>it's gonna download a whole bunch of stuff

00:22:48.505 --> 00:22:49.065
<v Speaker 1>here.

00:22:49.785 --> 00:22:51.865
<v Speaker 0>We got a comment from the notes saying,

00:22:51.865 --> 00:22:53.705
<v Speaker 0>not sure if this was intentional,

00:22:54.049 --> 00:22:57.250
<v Speaker 0>but melange equals mix in French, and melanger

00:22:57.250 --> 00:22:58.369
<v Speaker 0>is to mix.

00:23:01.250 --> 00:23:02.610
<v Speaker 1>That that was intentional.

00:23:06.245 --> 00:23:09.125
<v Speaker 1>The idea is that you can mix the

00:23:09.125 --> 00:23:11.445
<v Speaker 1>artifacts into an image and then

00:23:11.685 --> 00:23:13.205
<v Speaker 1>everything's scannable.

00:23:13.205 --> 00:23:16.085
<v Speaker 1>So that that's why I called it that.

00:23:18.725 --> 00:23:21.800
<v Speaker 0>Well, we're just waiting on some Go dependencies

00:23:21.800 --> 00:23:22.600
<v Speaker 0>right now,

00:23:23.080 --> 00:23:24.279
<v Speaker 0>which won't be long.

00:23:25.960 --> 00:23:28.520
<v Speaker 1>It'll it'll be about thirty

00:23:28.520 --> 00:23:31.480
<v Speaker 1>years because it's building Docker right now.

00:23:32.600 --> 00:23:34.040
<v Speaker 1>Oh. Well, parts of Docker.

00:23:35.185 --> 00:23:38.785
<v Speaker 0>Is it using BuildKit? Is it using other

00:23:38.785 --> 00:23:40.145
<v Speaker 0>parts of Docker? I'm not even sure if

00:23:40.145 --> 00:23:41.825
<v Speaker 0>I could name other parts of Docker now.

00:23:43.905 --> 00:23:47.425
<v Speaker 1>The parts of Docker that are related to

00:23:47.425 --> 00:23:48.385
<v Speaker 1>uploading

00:23:48.510 --> 00:23:49.390
<v Speaker 1>images.

00:23:49.470 --> 00:23:50.029
<v Speaker 1>Like,

00:23:50.910 --> 00:23:54.590
<v Speaker 1>we use Go container registry to actually compose

00:23:54.590 --> 00:23:56.429
<v Speaker 1>the images and upload them,

00:23:56.910 --> 00:23:59.710
<v Speaker 1>but that depends on Docker a little bit

00:23:59.710 --> 00:24:02.110
<v Speaker 1>to do some of the stuff. So

00:24:02.625 --> 00:24:04.625
<v Speaker 1>those are the parts of Docker that it

00:24:04.625 --> 00:24:05.265
<v Speaker 1>builds.

00:24:06.625 --> 00:24:07.265
<v Speaker 0>Yeah.

00:24:07.505 --> 00:24:09.425
<v Speaker 0>Well, I'm glad that when I spun up

00:24:09.425 --> 00:24:11.505
<v Speaker 0>the little node machine, I didn't cheap out

00:24:11.505 --> 00:24:13.105
<v Speaker 0>and go for the smallest one. I did

00:24:13.105 --> 00:24:13.745
<v Speaker 0>get, like, the

00:24:14.640 --> 00:24:16.320
<v Speaker 0>four cores and eight gigs of RAM, I

00:24:16.320 --> 00:24:18.320
<v Speaker 0>think. So that hopefully, that helps speed that

00:24:18.320 --> 00:24:18.799
<v Speaker 0>up.

00:24:20.000 --> 00:24:21.919
<v Speaker 1>Yeah. My my usual development

00:24:22.400 --> 00:24:25.920
<v Speaker 1>environment is these days is a 32

00:24:25.920 --> 00:24:28.455
<v Speaker 1>gig RAM line node with 16

00:24:28.455 --> 00:24:30.934
<v Speaker 1>cores and Nice. Apko

00:24:31.415 --> 00:24:34.215
<v Speaker 1>goes really fast on that. So it it

00:24:34.215 --> 00:24:36.294
<v Speaker 1>should go reasonably fast on this.

00:24:37.175 --> 00:24:38.855
<v Speaker 0>Well, it has built, I'm assuming.

00:24:39.740 --> 00:24:43.100
<v Speaker 0>Yeah. We got our apko thing here, and

00:24:43.100 --> 00:24:45.020
<v Speaker 0>we have some sub sub commands.

00:24:46.540 --> 00:24:48.140
<v Speaker 1>Yeah. So

00:24:51.915 --> 00:24:52.715
<v Speaker 1>if

00:24:52.715 --> 00:24:53.435
<v Speaker 1>we

00:24:55.355 --> 00:24:56.315
<v Speaker 1>let's see.

00:24:57.195 --> 00:24:59.595
<v Speaker 1>So if we look at, examples

00:24:59.595 --> 00:25:02.155
<v Speaker 1>slash NGINX.YAML.

00:25:04.450 --> 00:25:05.170
<v Speaker 1>Oh.

00:25:07.250 --> 00:25:09.090
<v Speaker 0>I mean, I just said nginx randomly. I

00:25:09.090 --> 00:25:10.290
<v Speaker 0>don't know if it's just gonna be sat

00:25:10.290 --> 00:25:12.370
<v Speaker 0>there in the examples directory waiting on this.

00:25:12.370 --> 00:25:14.850
<v Speaker 0>So that's serendipitous. I like that.

00:25:15.090 --> 00:25:15.730
<v Speaker 1>Yeah.

00:25:16.610 --> 00:25:18.050
<v Speaker 1>So this is

00:25:18.450 --> 00:25:22.505
<v Speaker 1>what we used to build an NGINX based

00:25:25.785 --> 00:25:27.145
<v Speaker 1>ingress controller

00:25:27.145 --> 00:25:30.105
<v Speaker 1>as a proof of concept for Kubernetes,

00:25:30.105 --> 00:25:32.345
<v Speaker 1>the one that I mentioned that was eight

00:25:32.345 --> 00:25:33.750
<v Speaker 1>megs earlier.

00:25:33.910 --> 00:25:34.470
<v Speaker 1>Mhmm.

00:25:35.350 --> 00:25:37.030
<v Speaker 1>This is it. So

00:25:37.430 --> 00:25:39.830
<v Speaker 1>we can actually build that and

00:25:40.070 --> 00:25:42.710
<v Speaker 1>import it into a local Docker instance if

00:25:42.710 --> 00:25:44.070
<v Speaker 1>you want to set up

00:25:44.630 --> 00:25:45.350
<v Speaker 1>Docker.

00:25:47.345 --> 00:25:48.865
<v Speaker 1>We'll do that in a second.

00:25:49.425 --> 00:25:52.145
<v Speaker 1>Now the interesting thing here is the service

00:25:52.145 --> 00:25:52.945
<v Speaker 1>bundle

00:25:53.345 --> 00:25:55.825
<v Speaker 1>entry point type, which is a

00:25:56.225 --> 00:25:57.424
<v Speaker 1>new innovation

00:25:57.425 --> 00:25:59.985
<v Speaker 1>for apko versus, like, Docker

00:26:00.559 --> 00:26:01.919
<v Speaker 1>or something like that,

00:26:03.760 --> 00:26:06.480
<v Speaker 1>a lot of people, they'll build, like, a

00:26:06.640 --> 00:26:09.920
<v Speaker 1>container that contains, like, two or three tightly

00:26:09.920 --> 00:26:12.000
<v Speaker 1>coupled services together, and

00:26:12.445 --> 00:26:14.525
<v Speaker 1>they'll all be in the same container.

00:26:15.645 --> 00:26:16.285
<v Speaker 1>And

00:26:16.845 --> 00:26:21.085
<v Speaker 1>so what this does is it will automatically

00:26:22.445 --> 00:26:24.365
<v Speaker 1>ensure that s six

00:26:25.005 --> 00:26:26.125
<v Speaker 1>gets installed,

00:26:26.205 --> 00:26:28.559
<v Speaker 1>and it configures it. And it sets up

00:26:28.559 --> 00:26:30.880
<v Speaker 1>the entry point where it just launches s

00:26:30.880 --> 00:26:31.440
<v Speaker 1>six.

00:26:32.640 --> 00:26:35.360
<v Speaker 1>So if you, like, build and run this

00:26:35.360 --> 00:26:36.960
<v Speaker 1>image, it will

00:26:38.160 --> 00:26:39.360
<v Speaker 1>run NGINX

00:26:39.485 --> 00:26:41.005
<v Speaker 1>under a supervisor

00:26:41.805 --> 00:26:45.164
<v Speaker 1>with s six running as PID one. And

00:26:46.125 --> 00:26:46.845
<v Speaker 1>Nice.

00:26:47.005 --> 00:26:48.765
<v Speaker 1>So it makes all of that a lot

00:26:48.765 --> 00:26:49.645
<v Speaker 1>simpler

00:26:49.885 --> 00:26:50.285
<v Speaker 1>than,

00:26:53.480 --> 00:26:56.039
<v Speaker 1>like, dealing with s six overlay or something

00:26:56.039 --> 00:26:57.959
<v Speaker 1>like that. It's just a nice,

00:26:58.919 --> 00:27:00.519
<v Speaker 1>declarative configuration

00:27:00.519 --> 00:27:03.080
<v Speaker 1>for the services that you want to supervise

00:27:03.080 --> 00:27:04.279
<v Speaker 1>with s six.

00:27:05.240 --> 00:27:06.120
<v Speaker 0>Okay.

00:27:08.165 --> 00:27:10.804
<v Speaker 0>Does Docker not have something similar where you

00:27:10.804 --> 00:27:11.445
<v Speaker 0>do

00:27:12.645 --> 00:27:14.645
<v Speaker 0>dash in it and it runs everything under

00:27:14.645 --> 00:27:17.445
<v Speaker 0>tiny, or is this different from that?

00:27:20.500 --> 00:27:22.900
<v Speaker 1>It does have the ability to run things

00:27:22.900 --> 00:27:24.019
<v Speaker 1>under Tiny,

00:27:24.340 --> 00:27:27.620
<v Speaker 1>but this is an actual, like, process supervisor,

00:27:27.620 --> 00:27:30.900
<v Speaker 1>which ensures that, like, if NGINX were to

00:27:30.900 --> 00:27:32.259
<v Speaker 1>crash or whatever,

00:27:32.580 --> 00:27:36.575
<v Speaker 1>it would automatically restart it. So Alright. Okay.

00:27:36.894 --> 00:27:39.375
<v Speaker 0>Okay. Gotcha. Plus, you could have multiple services

00:27:39.375 --> 00:27:41.294
<v Speaker 0>as well with the s six approach Exactly.

00:27:41.294 --> 00:27:43.134
<v Speaker 0>Which you can do with the container image.

00:27:43.375 --> 00:27:45.934
<v Speaker 0>Not that people should go crazy and throw

00:27:45.934 --> 00:27:48.735
<v Speaker 0>lots of different services into container images, but,

00:27:48.735 --> 00:27:51.020
<v Speaker 0>you know, there are use cases here. Sure.

00:27:51.020 --> 00:27:51.659
<v Speaker 0>Yeah.

00:27:52.140 --> 00:27:54.779
<v Speaker 0>Okay. So I'm I'm just gonna assume

00:27:56.380 --> 00:27:58.139
<v Speaker 0>that this might work.

00:28:01.740 --> 00:28:02.059
<v Speaker 1>Close.

00:28:05.275 --> 00:28:07.275
<v Speaker 0>I was I was making that up. But

00:28:08.475 --> 00:28:10.715
<v Speaker 1>Well, we have to go back into the

00:28:10.715 --> 00:28:11.755
<v Speaker 1>other directory,

00:28:13.995 --> 00:28:15.435
<v Speaker 1>or that'll work. Yeah.

00:28:16.710 --> 00:28:19.029
<v Speaker 1>So it's apko build

00:28:19.030 --> 00:28:21.750
<v Speaker 1>and then the config dot YAML file that

00:28:21.750 --> 00:28:22.789
<v Speaker 1>you want to run.

00:28:23.429 --> 00:28:25.190
<v Speaker 1>And then we can just call that, like,

00:28:25.190 --> 00:28:28.309
<v Speaker 1>a p k o dash nginx colon latest

00:28:28.309 --> 00:28:30.229
<v Speaker 1>or whatever you wanna call it.

00:28:30.950 --> 00:28:31.429
<v Speaker 1>And then,

00:28:33.005 --> 00:28:35.725
<v Speaker 1>like, a p k o nginx dot tar

00:28:35.725 --> 00:28:37.565
<v Speaker 1>because that's the thing that you can import

00:28:37.565 --> 00:28:38.684
<v Speaker 1>into Docker

00:28:40.044 --> 00:28:42.684
<v Speaker 1>if you don't wanna, like, publish or whatever.

00:28:42.924 --> 00:28:44.125
<v Speaker 1>And

00:28:46.990 --> 00:28:47.790
<v Speaker 1>if

00:28:47.790 --> 00:28:49.470
<v Speaker 1>you hit enter,

00:28:49.550 --> 00:28:52.750
<v Speaker 1>it will build the image for the local

00:28:52.750 --> 00:28:53.870
<v Speaker 1>architecture,

00:28:54.910 --> 00:28:55.870
<v Speaker 1>and it's done.

00:28:56.190 --> 00:28:57.230
<v Speaker 1>That's it.

00:28:58.270 --> 00:28:59.070
<v Speaker 0>That was fast.

00:29:01.905 --> 00:29:05.424
<v Speaker 1>And now if you, APK add Docker

00:29:08.865 --> 00:29:09.825
<v Speaker 1>and then

00:29:11.184 --> 00:29:12.465
<v Speaker 1>start the Docker service,

00:29:17.190 --> 00:29:19.110
<v Speaker 1>Yeah. Service Docker start.

00:29:19.910 --> 00:29:21.990
<v Speaker 0>And If you do Docker

00:29:24.965 --> 00:29:28.085
<v Speaker 0>Load. It's import? Load. Right? I can never

00:29:28.085 --> 00:29:30.245
<v Speaker 0>remember if it's or load. But

00:29:30.965 --> 00:29:32.485
<v Speaker 1>And then you do

00:29:32.885 --> 00:29:34.965
<v Speaker 1>the less than sign

00:29:36.485 --> 00:29:39.445
<v Speaker 1>and then, yeah, apko nginx dot tar.

00:29:45.049 --> 00:29:47.449
<v Speaker 1>The Docker daemon is not running.

00:29:48.250 --> 00:29:49.289
<v Speaker 1>Why is it not running?

00:29:59.235 --> 00:30:00.915
<v Speaker 0>You're looking there. I I think it was

00:30:00.915 --> 00:30:01.634
<v Speaker 0>just there.

00:30:02.035 --> 00:30:02.595
<v Speaker 0>Oh, no.

00:30:07.870 --> 00:30:08.429
<v Speaker 1>It's

00:30:09.150 --> 00:30:10.190
<v Speaker 1>check the

00:30:10.350 --> 00:30:11.789
<v Speaker 1>VarLog docker

00:30:11.789 --> 00:30:12.590
<v Speaker 1>log.

00:30:17.630 --> 00:30:19.789
<v Speaker 1>It might be something related to c groups.

00:30:20.804 --> 00:30:21.684
<v Speaker 1>Oh,

00:30:24.325 --> 00:30:25.764
<v Speaker 1>we're gonna have to

00:30:33.470 --> 00:30:35.790
<v Speaker 1>Okay. Go to ETC

00:30:35.790 --> 00:30:37.470
<v Speaker 1>APK repositories.

00:30:38.430 --> 00:30:39.950
<v Speaker 1>Open that up in

00:30:41.390 --> 00:30:42.190
<v Speaker 1>in

00:30:42.750 --> 00:30:43.950
<v Speaker 1>your editor of choice.

00:30:46.375 --> 00:30:48.615
<v Speaker 1>We need to bring back our

00:30:48.775 --> 00:30:49.815
<v Speaker 1>five point

00:30:51.095 --> 00:30:52.055
<v Speaker 1>3.15

00:30:52.055 --> 00:30:52.855
<v Speaker 1>kernel.

00:30:53.975 --> 00:30:54.695
<v Speaker 1>So

00:30:55.495 --> 00:30:57.015
<v Speaker 1>if you do 3.15

00:30:57.015 --> 00:30:58.775
<v Speaker 1>and then you put a tag at the

00:30:58.775 --> 00:31:00.110
<v Speaker 1>front of it, So

00:31:00.270 --> 00:31:00.670
<v Speaker 1>a

00:31:01.630 --> 00:31:03.790
<v Speaker 1>at the front of that line, if you

00:31:03.790 --> 00:31:06.190
<v Speaker 1>put at 3.15

00:31:06.190 --> 00:31:07.390
<v Speaker 1>and then space

00:31:09.230 --> 00:31:11.230
<v Speaker 0>Like that? At the front at the front

00:31:11.230 --> 00:31:12.670
<v Speaker 1>of it. Alright. Okay.

00:31:16.325 --> 00:31:18.085
<v Speaker 1>And then save it.

00:31:20.085 --> 00:31:21.525
<v Speaker 1>APK update.

00:31:23.845 --> 00:31:25.285
<v Speaker 1>Mhmm. And then APK

00:31:25.285 --> 00:31:26.085
<v Speaker 1>add

00:31:26.245 --> 00:31:28.165
<v Speaker 1>Linux dash vert

00:31:29.760 --> 00:31:32.080
<v Speaker 1>at 3.15.

00:31:37.440 --> 00:31:38.159
<v Speaker 1>And

00:31:39.520 --> 00:31:40.320
<v Speaker 1>then

00:31:41.200 --> 00:31:42.880
<v Speaker 0>Restart Docker? Uh-oh.

00:31:44.045 --> 00:31:45.645
<v Speaker 0>Are you gonna say reboot? Yeah. We might

00:31:45.645 --> 00:31:46.365
<v Speaker 1>we

00:31:46.605 --> 00:31:48.684
<v Speaker 1>might have to reboot it because it looks

00:31:48.684 --> 00:31:50.845
<v Speaker 1>like there was a kernel update in

00:31:51.725 --> 00:31:52.524
<v Speaker 1>since

00:31:52.684 --> 00:31:53.725
<v Speaker 1>Linode

00:31:55.245 --> 00:31:56.285
<v Speaker 1>built their

00:31:58.150 --> 00:31:59.670
<v Speaker 1>Alpine image. So

00:32:01.350 --> 00:32:03.270
<v Speaker 1>we're gonna have to reboot it, I think,

00:32:03.270 --> 00:32:06.230
<v Speaker 1>in order to get the necessary modules for

00:32:06.230 --> 00:32:07.590
<v Speaker 1>Docker to

00:32:07.750 --> 00:32:08.790
<v Speaker 1>actually start up.

00:32:11.865 --> 00:32:14.105
<v Speaker 1>Okay. Some Well, this is a a VM.

00:32:14.105 --> 00:32:15.385
<v Speaker 1>98 moments.

00:32:16.425 --> 00:32:18.265
<v Speaker 0>It it may be quick. It

00:32:22.825 --> 00:32:24.665
<v Speaker 1>usually

00:32:27.090 --> 00:32:29.489
<v Speaker 0>Comment. We should have just added pod man.

00:32:29.649 --> 00:32:30.850
<v Speaker 0>I I think that may have had the

00:32:30.850 --> 00:32:31.889
<v Speaker 0>same issue,

00:32:32.850 --> 00:32:33.889
<v Speaker 0>but maybe not.

00:32:36.985 --> 00:32:38.585
<v Speaker 0>Let's see. Did we go oh, we got

00:32:38.585 --> 00:32:40.664
<v Speaker 0>a few more questions there. So Nuno's looking

00:32:40.664 --> 00:32:41.464
<v Speaker 0>for hoodie.

00:32:42.424 --> 00:32:44.744
<v Speaker 0>I'll maybe run some swag giveaways soon, mate.

00:32:45.945 --> 00:32:48.904
<v Speaker 0>Nuno also said crane from gold containers is

00:32:48.904 --> 00:32:50.745
<v Speaker 0>definitely one gem that not many people know

00:32:50.745 --> 00:32:50.985
<v Speaker 0>about.

00:32:52.500 --> 00:32:54.580
<v Speaker 0>I guess that would be as a alternative

00:32:54.580 --> 00:32:57.700
<v Speaker 0>to using Docker's container registry package. Is that

00:32:57.700 --> 00:32:59.860
<v Speaker 0>what Nuno's suggesting there?

00:33:02.420 --> 00:33:05.954
<v Speaker 0>I'm not sure. Well, Crane Crane uses the

00:33:06.914 --> 00:33:10.835
<v Speaker 1>same Docker components that apko uses because apko

00:33:10.835 --> 00:33:11.714
<v Speaker 1>uses

00:33:12.115 --> 00:33:13.874
<v Speaker 1>Go Container Registry

00:33:13.955 --> 00:33:15.875
<v Speaker 1>underneath just like Crane does.

00:33:16.860 --> 00:33:18.380
<v Speaker 0>Okay. There we go.

00:33:19.020 --> 00:33:21.260
<v Speaker 0>Say I'm a bit late. Welcome.

00:33:23.180 --> 00:33:25.580
<v Speaker 0>And that was fast as a good tagline

00:33:25.580 --> 00:33:26.700
<v Speaker 0>for apko.

00:33:27.900 --> 00:33:29.420
<v Speaker 0>Yeah. Feel free to quote me. Stick that

00:33:29.420 --> 00:33:32.205
<v Speaker 0>on the website if you want. And Yeah.

00:33:32.125 --> 00:33:33.725
<v Speaker 0>Fucking IP tables.

00:33:34.845 --> 00:33:37.005
<v Speaker 1>It's always IP tables.

00:33:37.245 --> 00:33:40.284
<v Speaker 0>Yeah. Fucking networking. It's always hard, isn't it?

00:33:40.285 --> 00:33:41.245
<v Speaker 0>We've

00:33:41.245 --> 00:33:43.165
<v Speaker 0>got Devia, hey there. That's Welcome.

00:33:44.220 --> 00:33:47.580
<v Speaker 1>It it's it's because I forgot that there

00:33:47.580 --> 00:33:50.220
<v Speaker 1>was a security update for the kernel because

00:33:50.220 --> 00:33:51.899
<v Speaker 1>of the dirty pipe

00:33:51.900 --> 00:33:52.539
<v Speaker 1>thing.

00:33:52.780 --> 00:33:53.419
<v Speaker 1>So

00:33:54.140 --> 00:33:55.740
<v Speaker 0>Well, no. I don't remember that.

00:33:57.175 --> 00:33:59.015
<v Speaker 0>He's bragging that he doesn't have to reboot

00:33:59.015 --> 00:34:01.255
<v Speaker 0>with WSL too. So, you know, I'm glad

00:34:01.255 --> 00:34:02.534
<v Speaker 0>you're still following along.

00:34:03.255 --> 00:34:04.375
<v Speaker 0>I'm assuming

00:34:04.695 --> 00:34:06.455
<v Speaker 0>that should be available now.

00:34:09.574 --> 00:34:12.054
<v Speaker 1>Just assuming that the automatic

00:34:12.054 --> 00:34:13.655
<v Speaker 1>reboot

00:34:12.989 --> 00:34:14.830
<v Speaker 1>thing rebooted it.

00:34:19.710 --> 00:34:21.949
<v Speaker 0>I wonder if we've lost our machine.

00:34:22.110 --> 00:34:23.230
<v Speaker 0>Let's let's see.

00:34:24.270 --> 00:34:26.590
<v Speaker 0>I can pull up the Yeah. Linode content.

00:34:26.590 --> 00:34:27.949
<v Speaker 1>Sometimes Linode,

00:34:30.145 --> 00:34:33.105
<v Speaker 1>it doesn't re reboot. It just, like, shuts

00:34:33.105 --> 00:34:33.905
<v Speaker 1>it down.

00:34:36.145 --> 00:34:38.225
<v Speaker 0>Okay. I will reboot it from

00:34:38.704 --> 00:34:39.344
<v Speaker 0>oh,

00:34:40.145 --> 00:34:41.824
<v Speaker 0>is that I tried to reboot it from

00:34:41.824 --> 00:34:43.264
<v Speaker 0>the console, and it told me that the

00:34:43.264 --> 00:34:44.304
<v Speaker 0>the node is busy.

00:34:46.280 --> 00:34:48.920
<v Speaker 1>Yeah. I think it's already trying to reboot

00:34:48.920 --> 00:34:50.520
<v Speaker 1>it itself.

00:34:54.440 --> 00:34:56.120
<v Speaker 0>Let's just set up

00:34:57.285 --> 00:34:58.805
<v Speaker 0>some monitoring.

00:34:58.805 --> 00:35:00.405
<v Speaker 0>This is how I do my monitoring for

00:35:00.405 --> 00:35:01.125
<v Speaker 0>servers.

00:35:03.285 --> 00:35:05.765
<v Speaker 1>I mean, that's how everybody does the monitoring

00:35:05.765 --> 00:35:06.805
<v Speaker 1>servers.

00:35:08.325 --> 00:35:10.165
<v Speaker 0>Yep. Just

00:35:09.890 --> 00:35:12.210
<v Speaker 0>scrape that with Remetheus. Call it done. There

00:35:12.210 --> 00:35:13.250
<v Speaker 0>we go. There we go.

00:35:14.450 --> 00:35:16.850
<v Speaker 1>Finally, it's done rebooting. So

00:35:18.850 --> 00:35:21.730
<v Speaker 0>Alright. We'll just wait for SSH to start,

00:35:21.730 --> 00:35:22.770
<v Speaker 0>which will just be a moment.

00:35:24.855 --> 00:35:26.375
<v Speaker 0>I'll grab the password.

00:35:32.215 --> 00:35:32.855
<v Speaker 1>Yeah.

00:35:34.935 --> 00:35:35.415
<v Speaker 1>Alright.

00:35:36.069 --> 00:35:36.710
<v Speaker 1>So

00:35:37.030 --> 00:35:37.990
<v Speaker 1>if we

00:35:39.510 --> 00:35:40.150
<v Speaker 0>Perfect.

00:35:40.549 --> 00:35:42.550
<v Speaker 1>Start Docker now, it should work.

00:35:44.309 --> 00:35:46.150
<v Speaker 0>Yeah. That's a happy go. Okay.

00:35:46.950 --> 00:35:49.030
<v Speaker 0>Alright. Is that nothing So we're back then

00:35:49.030 --> 00:35:51.349
<v Speaker 1>to the apko slash examples.

00:35:51.349 --> 00:35:53.195
<v Speaker 1>We should have that a p k o

00:35:53.355 --> 00:35:56.075
<v Speaker 1>a p k o nginx dot tar, and

00:35:56.075 --> 00:35:57.515
<v Speaker 1>then we can load it in.

00:35:59.355 --> 00:36:00.315
<v Speaker 1>And

00:36:03.435 --> 00:36:05.515
<v Speaker 1>if you do docker,

00:36:06.315 --> 00:36:06.715
<v Speaker 1>run

00:36:07.490 --> 00:36:09.890
<v Speaker 1>apko nginx full latest,

00:36:12.690 --> 00:36:14.530
<v Speaker 1>it should start

00:36:16.130 --> 00:36:19.010
<v Speaker 1>the nginx thing up. Should I detach it

00:36:19.010 --> 00:36:20.530
<v Speaker 0>or just keep it front and center?

00:36:22.615 --> 00:36:24.295
<v Speaker 1>You can just go ahead and detach it

00:36:24.295 --> 00:36:25.255
<v Speaker 1>if you want.

00:36:29.974 --> 00:36:32.535
<v Speaker 1>And then if you do docker p s

00:36:34.375 --> 00:36:36.535
<v Speaker 1>so and then if you do, like, p

00:36:36.535 --> 00:36:39.280
<v Speaker 1>s three or whatever, it'll show that it's

00:36:39.280 --> 00:36:41.280
<v Speaker 1>all running under s six.

00:36:44.320 --> 00:36:45.360
<v Speaker 0>You

00:36:46.160 --> 00:36:47.440
<v Speaker 0>mean just on the host?

00:36:48.560 --> 00:36:49.120
<v Speaker 0>Yeah.

00:36:49.680 --> 00:36:51.440
<v Speaker 0>I thought e f would give me the

00:36:51.440 --> 00:36:51.920
<v Speaker 0>tree.

00:36:57.565 --> 00:36:59.005
<v Speaker 0>How would you get the tree?

00:37:00.365 --> 00:37:01.725
<v Speaker 1>P s tree.

00:37:02.205 --> 00:37:03.165
<v Speaker 0>Oh, really?

00:37:05.005 --> 00:37:06.125
<v Speaker 1>It's just one word.

00:37:06.990 --> 00:37:07.710
<v Speaker 0>Oh,

00:37:09.470 --> 00:37:11.470
<v Speaker 0>how have I not seen that command before?

00:37:12.510 --> 00:37:14.270
<v Speaker 1>Yeah. Is that an Alpine thing?

00:37:16.590 --> 00:37:17.310
<v Speaker 1>Yeah.

00:37:18.430 --> 00:37:18.910
<v Speaker 0>Alright.

00:37:21.665 --> 00:37:22.385
<v Speaker 1>Oh.

00:37:24.065 --> 00:37:26.705
<v Speaker 1>We're not not quite seeing what I think

00:37:26.705 --> 00:37:28.225
<v Speaker 0>we wanted to see. Is that right?

00:37:29.665 --> 00:37:30.225
<v Speaker 0>Or are we?

00:37:35.000 --> 00:37:36.920
<v Speaker 1>Should all still be it should still be

00:37:37.400 --> 00:37:39.240
<v Speaker 1>it should be running.

00:37:41.800 --> 00:37:44.440
<v Speaker 0>Yeah. It looks it appears to be running.

00:37:45.240 --> 00:37:46.520
<v Speaker 1>Oh, there you go.

00:37:47.000 --> 00:37:48.680
<v Speaker 0>Alright. So

00:37:51.275 --> 00:37:54.715
<v Speaker 0>we do have That nginx run. Right? Particular

00:37:55.595 --> 00:37:58.795
<v Speaker 1>that particular example container might be

00:38:01.530 --> 00:38:05.130
<v Speaker 1>might not be correctly running anymore because it's

00:38:05.130 --> 00:38:07.610
<v Speaker 1>kind of an older proof of concept, and

00:38:07.610 --> 00:38:10.490
<v Speaker 1>we changed a few things. So but

00:38:12.970 --> 00:38:14.650
<v Speaker 1>but as you can see, it

00:38:15.355 --> 00:38:18.395
<v Speaker 1>has s six running in it, and there's

00:38:18.395 --> 00:38:20.395
<v Speaker 1>NGINX inside it. And

00:38:21.595 --> 00:38:22.155
<v Speaker 1>Yeah.

00:38:23.835 --> 00:38:24.555
<v Speaker 1>Yeah.

00:38:25.115 --> 00:38:25.755
<v Speaker 1>So

00:38:27.035 --> 00:38:29.115
<v Speaker 0>Alright. We got a conference in Forest.

00:38:29.520 --> 00:38:31.360
<v Speaker 0>Is that really a thing you can pass

00:38:31.360 --> 00:38:33.120
<v Speaker 0>to p s? No.

00:38:34.320 --> 00:38:35.440
<v Speaker 1>Probably

00:38:35.440 --> 00:38:36.240
<v Speaker 1>on

00:38:36.480 --> 00:38:39.440
<v Speaker 1>some of them. Yeah. Okay. Like, if you

00:38:39.440 --> 00:38:42.720
<v Speaker 1>did APK add util dash Linux, it would

00:38:42.720 --> 00:38:45.365
<v Speaker 1>probably work. I'm I'm I'm not I'm not

00:38:45.365 --> 00:38:47.045
<v Speaker 0>that bothered. It's okay.

00:38:47.445 --> 00:38:49.765
<v Speaker 0>So let's recap that because

00:38:50.165 --> 00:38:51.445
<v Speaker 0>this was interesting.

00:38:52.005 --> 00:38:52.885
<v Speaker 0>We have

00:38:53.205 --> 00:38:55.605
<v Speaker 0>about a dozen lines of YAML, probably less.

00:38:55.685 --> 00:38:58.280
<v Speaker 0>We've got kind of two main components. First

00:38:58.280 --> 00:39:00.360
<v Speaker 0>one is called content, which will allow us

00:39:00.360 --> 00:39:02.600
<v Speaker 0>to specify Alpine repositories

00:39:02.600 --> 00:39:04.200
<v Speaker 0>and Alpine packages

00:39:04.280 --> 00:39:06.040
<v Speaker 0>that we want to get into a container

00:39:06.040 --> 00:39:06.760
<v Speaker 0>image.

00:39:07.320 --> 00:39:09.255
<v Speaker 0>So that's pretty nifty. We then got the

00:39:09.255 --> 00:39:11.255
<v Speaker 0>ability to do an entry point. Now this

00:39:11.255 --> 00:39:12.455
<v Speaker 0>is something new

00:39:13.015 --> 00:39:14.694
<v Speaker 0>that you're bringing to the table here called

00:39:14.694 --> 00:39:16.934
<v Speaker 0>service bundle, which will give us a supervisor

00:39:16.934 --> 00:39:18.215
<v Speaker 0>inside of our container,

00:39:18.375 --> 00:39:20.135
<v Speaker 0>and we can specify the services of that

00:39:20.135 --> 00:39:20.855
<v Speaker 0>we wanna start.

00:39:21.570 --> 00:39:23.330
<v Speaker 0>Now Yep. Just in the name of

00:39:24.050 --> 00:39:25.730
<v Speaker 0>why does it do that sometimes?

00:39:27.170 --> 00:39:28.610
<v Speaker 0>And the name of completeness,

00:39:28.610 --> 00:39:31.010
<v Speaker 0>I I have to really curious about whether

00:39:32.050 --> 00:39:32.690
<v Speaker 0>what is

00:39:34.065 --> 00:39:36.224
<v Speaker 0>fluffing my words because them is fluffing my

00:39:36.224 --> 00:39:36.865
<v Speaker 0>text.

00:39:38.625 --> 00:39:41.105
<v Speaker 0>What would a standard entry point look like

00:39:41.105 --> 00:39:44.625
<v Speaker 0>here? Like, just Ben followed by a path,

00:39:44.625 --> 00:39:46.145
<v Speaker 0>or can I can I still do this?

00:39:47.480 --> 00:39:50.359
<v Speaker 1>You can do entry point and then command

00:39:50.359 --> 00:39:51.319
<v Speaker 1>colon

00:39:51.319 --> 00:39:53.640
<v Speaker 1>and then whatever command you want to run.

00:39:55.640 --> 00:39:57.079
<v Speaker 0>So I could just do So, like I

00:39:57.079 --> 00:39:58.839
<v Speaker 0>know that path isn't correct, but but that

00:39:58.839 --> 00:40:00.520
<v Speaker 0>would that would just work as normal. Exactly.

00:40:01.005 --> 00:40:03.565
<v Speaker 0>And would that also take list of args

00:40:03.565 --> 00:40:04.765
<v Speaker 0>if they were required?

00:40:06.444 --> 00:40:08.525
<v Speaker 0>Or would it all just be blah blah

00:40:08.525 --> 00:40:10.684
<v Speaker 0>blah? It it would all be like that.

00:40:10.684 --> 00:40:12.445
<v Speaker 1>Yeah. Okay. Cool.

00:40:13.565 --> 00:40:15.164
<v Speaker 0>I like that. That's

00:40:17.060 --> 00:40:18.740
<v Speaker 0>that's nice. But it has that

00:40:19.460 --> 00:40:20.980
<v Speaker 0>that precondition

00:40:20.980 --> 00:40:24.180
<v Speaker 0>that we need to have our applications bundled

00:40:24.420 --> 00:40:25.860
<v Speaker 0>as APKs,

00:40:25.860 --> 00:40:27.780
<v Speaker 0>which is what you're gonna show us the

00:40:27.780 --> 00:40:28.420
<v Speaker 0>magic

00:40:28.660 --> 00:40:30.100
<v Speaker 0>melange for now. Right?

00:40:32.025 --> 00:40:32.665
<v Speaker 1>Yes.

00:40:33.065 --> 00:40:33.705
<v Speaker 1>So

00:40:34.664 --> 00:40:36.105
<v Speaker 0>Unless there was something else you wanted to

00:40:36.105 --> 00:40:38.505
<v Speaker 0>show with apko first, and I I I

00:40:38.505 --> 00:40:40.025
<v Speaker 0>don't wanna take it off. No. I mean

00:40:40.744 --> 00:40:42.665
<v Speaker 1>no. I mean, that's basically it.

00:40:43.145 --> 00:40:46.424
<v Speaker 1>Apko is just the assembly tool, and so

00:40:47.010 --> 00:40:49.330
<v Speaker 1>now now we get to see where

00:40:50.210 --> 00:40:52.770
<v Speaker 1>we can actually, like, start building our own

00:40:52.770 --> 00:40:54.370
<v Speaker 1>stuff to put into

00:40:54.850 --> 00:40:56.050
<v Speaker 1>an APKO

00:40:56.050 --> 00:40:56.850
<v Speaker 1>image.

00:40:56.850 --> 00:40:59.650
<v Speaker 1>And so

00:41:01.625 --> 00:41:03.305
<v Speaker 1>as a proof of concept,

00:41:03.385 --> 00:41:04.425
<v Speaker 1>we have

00:41:07.305 --> 00:41:10.744
<v Speaker 1>the GNU hello world program that we're going

00:41:10.744 --> 00:41:11.865
<v Speaker 1>to run-in a container.

00:41:14.330 --> 00:41:14.970
<v Speaker 1>And

00:41:17.930 --> 00:41:19.210
<v Speaker 0>Okay. So

00:41:19.450 --> 00:41:21.930
<v Speaker 0>I guess I have to make Milan by

00:41:22.330 --> 00:41:23.130
<v Speaker 0>typing.

00:41:23.530 --> 00:41:26.730
<v Speaker 0>Wow. Absolutely well. We have to build it

00:41:26.730 --> 00:41:28.815
<v Speaker 0>first, and then we're are we working through

00:41:28.815 --> 00:41:30.815
<v Speaker 0>one of the example directories?

00:41:35.295 --> 00:41:36.655
<v Speaker 1>Yeah. So

00:41:37.535 --> 00:41:39.375
<v Speaker 1>melange is a

00:41:39.780 --> 00:41:40.740
<v Speaker 1>pipeline

00:41:40.740 --> 00:41:41.700
<v Speaker 1>oriented

00:41:41.700 --> 00:41:42.580
<v Speaker 1>builder.

00:41:42.580 --> 00:41:44.420
<v Speaker 1>Like, if you're familiar with

00:41:47.460 --> 00:41:49.940
<v Speaker 1>GitHub actions or something like that,

00:41:50.260 --> 00:41:50.980
<v Speaker 1>then

00:41:51.460 --> 00:41:54.245
<v Speaker 1>this should all be fairly familiar to you.

00:41:54.245 --> 00:41:55.845
<v Speaker 1>So if we pull up, like, a the

00:41:55.845 --> 00:41:59.125
<v Speaker 1>GNU hello world examples, so that's an example

00:41:59.125 --> 00:42:00.085
<v Speaker 1>slash

00:42:01.045 --> 00:42:03.365
<v Speaker 1>GNU hello dot YAML.

00:42:07.205 --> 00:42:08.645
<v Speaker 1>There's just

00:42:08.910 --> 00:42:09.550
<v Speaker 1>two made

00:42:10.030 --> 00:42:11.070
<v Speaker 1>three major

00:42:12.270 --> 00:42:13.390
<v Speaker 1>components here.

00:42:14.349 --> 00:42:17.630
<v Speaker 1>First is the package metadata that gets

00:42:18.829 --> 00:42:19.869
<v Speaker 1>collected into

00:42:21.675 --> 00:42:23.115
<v Speaker 1>the APK

00:42:23.835 --> 00:42:25.835
<v Speaker 1>package metadata section.

00:42:26.555 --> 00:42:28.155
<v Speaker 1>And that includes,

00:42:28.155 --> 00:42:31.115
<v Speaker 1>like, you know, package name, version, what it

00:42:31.115 --> 00:42:31.675
<v Speaker 1>does,

00:42:32.235 --> 00:42:34.475
<v Speaker 1>and then, like, the copyright data and all

00:42:34.475 --> 00:42:34.795
<v Speaker 1>of that.

00:42:35.540 --> 00:42:36.980
<v Speaker 1>And then the second

00:42:37.300 --> 00:42:40.740
<v Speaker 1>section here is the environment section, and that's

00:42:40.740 --> 00:42:41.540
<v Speaker 1>literally

00:42:41.780 --> 00:42:44.900
<v Speaker 1>just the description of an apko image

00:42:46.180 --> 00:42:48.820
<v Speaker 1>that you want to build in order to

00:42:48.820 --> 00:42:50.500
<v Speaker 1>build

00:42:51.714 --> 00:42:52.835
<v Speaker 1>the package.

00:42:53.635 --> 00:42:54.595
<v Speaker 0>So, like, a base

00:42:55.075 --> 00:42:56.515
<v Speaker 0>like, a base image?

00:42:56.994 --> 00:42:59.234
<v Speaker 1>Yeah. You define your base image for the

00:42:59.234 --> 00:43:01.235
<v Speaker 1>build environment. Okay. Cool.

00:43:01.714 --> 00:43:03.234
<v Speaker 1>And then you have the pipeline,

00:43:04.130 --> 00:43:06.930
<v Speaker 1>and that's literally just like a GitHub action

00:43:06.930 --> 00:43:08.210
<v Speaker 1>style pipeline.

00:43:08.450 --> 00:43:10.210
<v Speaker 1>You can see that there's a bunch of

00:43:10.210 --> 00:43:12.370
<v Speaker 1>steps that use prebaked

00:43:16.315 --> 00:43:18.955
<v Speaker 1>tasks, and we have inputs for those tasks

00:43:18.955 --> 00:43:21.435
<v Speaker 1>like fetching. And then this is what the

00:43:21.995 --> 00:43:24.315
<v Speaker 1>SHA two fifty six is supposed to be,

00:43:24.395 --> 00:43:26.635
<v Speaker 1>and then we want to configure, make, and

00:43:26.635 --> 00:43:29.755
<v Speaker 1>make install it, and it's autoconf based and

00:43:29.755 --> 00:43:30.475
<v Speaker 1>all of that.

00:43:34.450 --> 00:43:37.250
<v Speaker 1>And then we have the sub packages section,

00:43:37.250 --> 00:43:39.890
<v Speaker 1>and that lets you run steps in order

00:43:39.890 --> 00:43:42.050
<v Speaker 1>to, like, split things out into

00:43:42.690 --> 00:43:45.170
<v Speaker 1>sub packages. Like, if you want to have

00:43:45.170 --> 00:43:49.015
<v Speaker 1>the main pages in a doc package instead

00:43:49.015 --> 00:43:49.655
<v Speaker 1>of

00:43:50.055 --> 00:43:52.535
<v Speaker 1>having it in the main package, that allows

00:43:52.535 --> 00:43:54.135
<v Speaker 1>you to slim down your

00:43:57.495 --> 00:44:00.295
<v Speaker 1>packages a little bit, which in turn allows

00:44:00.295 --> 00:44:02.055
<v Speaker 1>you to slim down your images.

00:44:04.930 --> 00:44:07.970
<v Speaker 1>And then each subpackage has its own pipeline

00:44:07.970 --> 00:44:11.090
<v Speaker 1>and metadata and so on. So

00:44:12.130 --> 00:44:12.850
<v Speaker 0>So

00:44:13.570 --> 00:44:15.330
<v Speaker 0>where do these use these

00:44:15.970 --> 00:44:17.810
<v Speaker 0>functions or targets

00:44:17.970 --> 00:44:18.530
<v Speaker 0>come from?

00:44:20.795 --> 00:44:23.434
<v Speaker 1>Those are bundled in the pipeline's

00:44:23.434 --> 00:44:24.395
<v Speaker 1>directory.

00:44:24.875 --> 00:44:26.635
<v Speaker 1>So if you get out of that

00:44:28.234 --> 00:44:30.875
<v Speaker 1>and we go back to the pipeline's directory,

00:44:34.160 --> 00:44:36.880
<v Speaker 1>you can kinda see, like, the fetch dot

00:44:36.880 --> 00:44:37.760
<v Speaker 1>YAML

00:44:37.920 --> 00:44:38.720
<v Speaker 1>one.

00:44:41.360 --> 00:44:41.840
<v Speaker 0>And

00:44:42.160 --> 00:44:44.480
<v Speaker 0>So there's a base one, a primitive pipeline

00:44:44.480 --> 00:44:47.360
<v Speaker 0>called run, which run arbitrary commands or scripts.

00:44:48.355 --> 00:44:49.395
<v Speaker 1>Exactly.

00:44:49.555 --> 00:44:50.755
<v Speaker 1>And we

00:44:51.555 --> 00:44:52.675
<v Speaker 1>replace

00:44:52.675 --> 00:44:54.355
<v Speaker 1>the expressions

00:44:55.075 --> 00:44:56.755
<v Speaker 1>based on our inputs,

00:44:56.835 --> 00:44:57.555
<v Speaker 1>and then

00:44:57.955 --> 00:44:58.915
<v Speaker 1>that gets

00:44:59.155 --> 00:45:01.555
<v Speaker 1>templated into a shell script, and then it

00:45:01.555 --> 00:45:03.140
<v Speaker 1>runs the the

00:45:03.220 --> 00:45:05.540
<v Speaker 1>fragment there in a shell. And

00:45:07.540 --> 00:45:08.340
<v Speaker 1>it's

00:45:10.580 --> 00:45:12.020
<v Speaker 1>it's basically

00:45:12.340 --> 00:45:14.580
<v Speaker 1>what you see on the screen there.

00:45:16.914 --> 00:45:19.315
<v Speaker 1>So what that does is it fetches the

00:45:19.315 --> 00:45:19.875
<v Speaker 1>thing,

00:45:20.674 --> 00:45:21.635
<v Speaker 1>and then it

00:45:22.275 --> 00:45:25.395
<v Speaker 1>does the SHA two fifty six comparison,

00:45:25.555 --> 00:45:26.355
<v Speaker 1>and then

00:45:27.154 --> 00:45:29.474
<v Speaker 1>it extracts it. And if any of these

00:45:29.474 --> 00:45:30.835
<v Speaker 1>steps in this

00:45:31.315 --> 00:45:33.190
<v Speaker 1>run fragment fail,

00:45:33.830 --> 00:45:35.510
<v Speaker 1>the pipeline fails

00:45:35.830 --> 00:45:36.950
<v Speaker 1>automatically.

00:45:37.030 --> 00:45:37.670
<v Speaker 1>So

00:45:39.030 --> 00:45:41.510
<v Speaker 1>and then the failures bubble up and

00:45:41.670 --> 00:45:43.190
<v Speaker 1>all of that. So

00:45:43.990 --> 00:45:44.390
<v Speaker 0>Cool.

00:45:45.695 --> 00:45:48.575
<v Speaker 0>Why the double braces instead of just, like

00:45:49.055 --> 00:45:49.695
<v Speaker 0>you know?

00:45:50.975 --> 00:45:53.775
<v Speaker 1>We didn't want to conflict

00:45:54.175 --> 00:45:56.575
<v Speaker 1>with normal shell scripting

00:45:57.260 --> 00:45:58.940
<v Speaker 1>variable substitution.

00:45:59.020 --> 00:45:59.660
<v Speaker 1>So

00:46:00.060 --> 00:46:01.900
<v Speaker 1>we have our own syntax

00:46:01.900 --> 00:46:04.620
<v Speaker 1>for doing variable substitution

00:46:05.660 --> 00:46:08.619
<v Speaker 1>in the actual, like, configuration

00:46:08.619 --> 00:46:09.500
<v Speaker 1>files

00:46:09.775 --> 00:46:11.455
<v Speaker 1>so that there's no

00:46:11.775 --> 00:46:12.495
<v Speaker 1>conflict,

00:46:13.295 --> 00:46:14.655
<v Speaker 1>conflicts between,

00:46:16.975 --> 00:46:18.495
<v Speaker 1>the shell and

00:46:18.895 --> 00:46:19.935
<v Speaker 1>all of that.

00:46:20.495 --> 00:46:21.535
<v Speaker 1>Cool. So

00:46:23.860 --> 00:46:25.460
<v Speaker 0>Alright. I'm gonna look at one more just

00:46:25.460 --> 00:46:27.060
<v Speaker 0>because I'm curious.

00:46:27.220 --> 00:46:28.740
<v Speaker 0>I'm assuming they're all

00:46:31.619 --> 00:46:33.620
<v Speaker 1>Yeah. Much the same. Cool.

00:46:34.020 --> 00:46:36.420
<v Speaker 0>Is there any other parameters beyond runs, or

00:46:36.420 --> 00:46:38.964
<v Speaker 0>is are all the other pipelines constructed from

00:46:38.964 --> 00:46:40.005
<v Speaker 0>our run statement?

00:46:41.045 --> 00:46:44.005
<v Speaker 1>It's just constructed from a run statement.

00:46:44.165 --> 00:46:45.525
<v Speaker 0>Okay. Cool.

00:46:46.244 --> 00:46:46.885
<v Speaker 0>So

00:46:47.205 --> 00:46:49.045
<v Speaker 0>if we go back to our examples,

00:46:49.925 --> 00:46:50.645
<v Speaker 0>I'm assuming

00:46:52.400 --> 00:46:54.480
<v Speaker 0>that we can run melange help, and it

00:46:54.480 --> 00:46:56.000
<v Speaker 0>looks very similar to what we got with

00:46:56.000 --> 00:46:57.200
<v Speaker 0>apko.

00:46:58.400 --> 00:46:59.120
<v Speaker 1>Yeah.

00:46:59.440 --> 00:47:01.600
<v Speaker 0>Except where you have some key gen stuff

00:47:01.600 --> 00:47:02.960
<v Speaker 0>too. I don't think I noticed that on

00:47:02.960 --> 00:47:03.600
<v Speaker 0>apko.

00:47:05.445 --> 00:47:08.165
<v Speaker 1>Well, because apko

00:47:08.405 --> 00:47:09.925
<v Speaker 1>is just a,

00:47:12.085 --> 00:47:13.765
<v Speaker 1>image composition tool.

00:47:14.165 --> 00:47:17.205
<v Speaker 1>But to, like, interact with the packaging system,

00:47:17.205 --> 00:47:18.405
<v Speaker 1>then you need to be able to, like,

00:47:18.450 --> 00:47:21.810
<v Speaker 1>sign packages and sign indexes and so on.

00:47:22.450 --> 00:47:23.170
<v Speaker 1>So

00:47:25.650 --> 00:47:26.690
<v Speaker 1>our first step

00:47:27.250 --> 00:47:29.650
<v Speaker 1>I would go back to the main directory.

00:47:29.730 --> 00:47:29.970
<v Speaker 0>Mhmm.

00:47:31.755 --> 00:47:34.395
<v Speaker 1>Our first step is we need to generate

00:47:35.115 --> 00:47:37.035
<v Speaker 1>a key pair to, like, sign all of

00:47:37.035 --> 00:47:38.155
<v Speaker 1>our things with.

00:47:38.315 --> 00:47:40.234
<v Speaker 1>So if you do melange

00:47:40.954 --> 00:47:41.994
<v Speaker 1>keygen,

00:47:42.474 --> 00:47:45.595
<v Speaker 1>it'll actually generate the key pair that we're

00:47:45.595 --> 00:47:46.154
<v Speaker 1>going to use.

00:47:47.030 --> 00:47:47.670
<v Speaker 1>And

00:47:49.430 --> 00:47:51.670
<v Speaker 1>if you look, you can see that there's

00:47:51.670 --> 00:47:53.670
<v Speaker 1>now melange dot r s a and the

00:47:53.670 --> 00:47:55.590
<v Speaker 1>melange dot r s a dot pub.

00:47:58.150 --> 00:47:59.750
<v Speaker 1>Those are just standard

00:47:59.830 --> 00:48:01.349
<v Speaker 1>x five zero nine

00:48:02.055 --> 00:48:03.095
<v Speaker 1>key pairs,

00:48:03.255 --> 00:48:06.135
<v Speaker 1>and there's nothing really that special about them.

00:48:08.694 --> 00:48:11.335
<v Speaker 1>Now we can actually build something.

00:48:12.214 --> 00:48:14.775
<v Speaker 1>So if you do melange,

00:48:16.550 --> 00:48:17.350
<v Speaker 1>build

00:48:20.710 --> 00:48:23.830
<v Speaker 1>examples slash g n u hello dot yaml

00:48:23.830 --> 00:48:25.750
<v Speaker 1>and then dash dash

00:48:26.310 --> 00:48:27.350
<v Speaker 1>workspace

00:48:27.350 --> 00:48:28.710
<v Speaker 1>d I r

00:48:30.924 --> 00:48:31.885
<v Speaker 1>equals,

00:48:31.885 --> 00:48:33.724
<v Speaker 1>like, work or something,

00:48:35.964 --> 00:48:37.805
<v Speaker 1>and then do dash,

00:48:40.765 --> 00:48:43.405
<v Speaker 1>and then do dash dash signing key

00:48:43.645 --> 00:48:45.964
<v Speaker 1>equals melange dot r s a.

00:48:46.970 --> 00:48:50.090
<v Speaker 1>It's signing dash key. Oh, right. Yep.

00:48:52.329 --> 00:48:54.010
<v Speaker 0>It's the r s d.

00:48:54.970 --> 00:48:56.570
<v Speaker 1>And then hit enter.

00:48:56.730 --> 00:48:59.930
<v Speaker 1>It should build GNU hello and

00:49:00.089 --> 00:49:00.650
<v Speaker 1>sign it.

00:49:03.734 --> 00:49:04.455
<v Speaker 1>Oh.

00:49:04.855 --> 00:49:05.575
<v Speaker 1>Oh,

00:49:08.055 --> 00:49:11.415
<v Speaker 1>right. Anything that melange the user

00:49:11.575 --> 00:49:12.135
<v Speaker 0>share?

00:49:13.095 --> 00:49:14.375
<v Speaker 1>We have to do

00:49:14.775 --> 00:49:15.655
<v Speaker 1>make install.

00:49:16.130 --> 00:49:18.290
<v Speaker 1>That that's the part we were missing.

00:49:18.930 --> 00:49:20.370
<v Speaker 0>Alright. Okay. Cool.

00:49:23.090 --> 00:49:23.890
<v Speaker 1>Alright.

00:49:24.130 --> 00:49:24.850
<v Speaker 1>So

00:49:25.170 --> 00:49:26.210
<v Speaker 1>now it should work.

00:49:34.955 --> 00:49:36.475
<v Speaker 0>Bad substitution.

00:49:39.115 --> 00:49:40.395
<v Speaker 1>Bad substitution.

00:49:42.930 --> 00:49:43.890
<v Speaker 1>That's

00:49:43.890 --> 00:49:44.530
<v Speaker 1>weird.

00:49:44.930 --> 00:49:46.050
<v Speaker 1>Go to

00:49:50.849 --> 00:49:51.170
<v Speaker 1>go

00:49:52.369 --> 00:49:54.130
<v Speaker 1>well, we can fix that real quick. Go

00:49:54.130 --> 00:49:54.690
<v Speaker 1>to

00:49:55.170 --> 00:49:57.490
<v Speaker 1>open nano or

00:49:57.165 --> 00:50:00.285
<v Speaker 1>open the user share melange pipelines

00:50:00.285 --> 00:50:01.245
<v Speaker 1>autocomf

00:50:01.245 --> 00:50:02.365
<v Speaker 1>configure

00:50:02.445 --> 00:50:03.565
<v Speaker 1>dot yaml.

00:50:07.085 --> 00:50:07.805
<v Speaker 1>Apparently,

00:50:08.205 --> 00:50:11.485
<v Speaker 1>the part that doesn't delete the inputs dot

00:50:11.485 --> 00:50:12.925
<v Speaker 1>ops

00:50:12.410 --> 00:50:15.290
<v Speaker 1>thing is not working correctly for some reason.

00:50:15.290 --> 00:50:16.970
<v Speaker 1>So if we just delete that,

00:50:17.290 --> 00:50:18.650
<v Speaker 1>it should work fine.

00:50:21.850 --> 00:50:23.050
<v Speaker 1>Kind of

00:50:25.135 --> 00:50:26.335
<v Speaker 1>that was working

00:50:26.734 --> 00:50:28.095
<v Speaker 1>earlier today,

00:50:28.174 --> 00:50:28.655
<v Speaker 1>but

00:50:30.575 --> 00:50:32.575
<v Speaker 1>oh, right. We had to delete the workspace

00:50:32.575 --> 00:50:34.095
<v Speaker 1>to reset everything.

00:50:35.615 --> 00:50:38.980
<v Speaker 0>So my work or something. Delete that. Yeah.

00:50:40.420 --> 00:50:42.260
<v Speaker 1>Alright. If we run it again, now it

00:50:42.260 --> 00:50:42.820
<v Speaker 1>should work.

00:50:50.415 --> 00:50:53.455
<v Speaker 1>And here, it's doing the apko step.

00:50:54.095 --> 00:50:56.815
<v Speaker 0>Nice. And there we go. Now it's working.

00:50:58.495 --> 00:51:01.295
<v Speaker 0>This is awesome. It it should be noted

00:51:01.295 --> 00:51:04.100
<v Speaker 1>that melange is not released yet. So

00:51:05.460 --> 00:51:07.380
<v Speaker 0>But I thank you for coming on to

00:51:07.380 --> 00:51:09.860
<v Speaker 0>show us that, it's it's it's going very

00:51:09.860 --> 00:51:10.420
<v Speaker 0>well.

00:51:11.220 --> 00:51:12.980
<v Speaker 0>We have an APK. So

00:51:13.540 --> 00:51:14.980
<v Speaker 1>so you now have,

00:51:15.620 --> 00:51:17.060
<v Speaker 1>some signed APKs.

00:51:18.894 --> 00:51:20.415
<v Speaker 1>And if we

00:51:21.535 --> 00:51:23.055
<v Speaker 1>create a repository

00:51:23.295 --> 00:51:24.974
<v Speaker 1>like, if you do

00:51:26.974 --> 00:51:29.295
<v Speaker 1>if you copy the melange dot r s

00:51:29.295 --> 00:51:31.694
<v Speaker 1>a dot pub to

00:51:33.730 --> 00:51:35.970
<v Speaker 1>e t c apk keys,

00:51:40.050 --> 00:51:42.290
<v Speaker 1>and then you do apk add

00:51:43.970 --> 00:51:46.050
<v Speaker 1>and then the hello dot apk,

00:51:49.665 --> 00:51:51.345
<v Speaker 1>it should install it.

00:51:51.905 --> 00:51:54.385
<v Speaker 1>And then if you do hello, you'll get

00:51:54.385 --> 00:51:56.545
<v Speaker 1>the GNU hello world program,

00:51:57.585 --> 00:51:58.145
<v Speaker 1>which

00:51:59.985 --> 00:52:02.305
<v Speaker 1>they managed to make a hello world program

00:52:02.305 --> 00:52:05.400
<v Speaker 1>that compiles to a 500 kilobyte package.

00:52:05.480 --> 00:52:06.200
<v Speaker 1>So

00:52:07.960 --> 00:52:08.520
<v Speaker 1>yeah.

00:52:11.160 --> 00:52:12.920
<v Speaker 1>So we have an APK here.

00:52:14.440 --> 00:52:16.200
<v Speaker 1>Now the next step

00:52:17.015 --> 00:52:17.975
<v Speaker 1>would be,

00:52:18.135 --> 00:52:20.855
<v Speaker 1>I guess, to make a container that has

00:52:20.855 --> 00:52:23.415
<v Speaker 1>that hello world package in it, which

00:52:24.295 --> 00:52:25.495
<v Speaker 1>should answer

00:52:25.495 --> 00:52:27.335
<v Speaker 1>a mean's question.

00:52:27.335 --> 00:52:27.735
<v Speaker 1>He was

00:52:28.855 --> 00:52:30.215
<v Speaker 1>they were asking about

00:52:31.880 --> 00:52:33.320
<v Speaker 1>circular dependency.

00:52:34.520 --> 00:52:37.000
<v Speaker 1>And the answer is no. There's no circular

00:52:37.000 --> 00:52:38.440
<v Speaker 1>dependency because,

00:52:40.840 --> 00:52:44.680
<v Speaker 1>melange only depends on the apko

00:52:45.744 --> 00:52:48.705
<v Speaker 1>go package. It doesn't depend on the apko,

00:52:48.705 --> 00:52:50.465
<v Speaker 1>like, command itself.

00:52:50.705 --> 00:52:51.265
<v Speaker 1>So

00:52:51.984 --> 00:52:55.185
<v Speaker 1>they're otherwise completely independent tools of each other.

00:52:59.869 --> 00:53:00.670
<v Speaker 1>So

00:53:02.670 --> 00:53:03.790
<v Speaker 1>if we

00:53:04.910 --> 00:53:08.190
<v Speaker 1>go and make a directory somewhere,

00:53:10.349 --> 00:53:11.630
<v Speaker 1>doesn't really matter where.

00:53:16.335 --> 00:53:16.974
<v Speaker 0>Okay.

00:53:18.974 --> 00:53:21.134
<v Speaker 1>And then we make a apko

00:53:21.134 --> 00:53:22.654
<v Speaker 1>dot yaml file.

00:53:29.579 --> 00:53:30.780
<v Speaker 0>Was it packages?

00:53:31.339 --> 00:53:32.700
<v Speaker 1>It's contents.

00:53:32.780 --> 00:53:33.500
<v Speaker 0>Damn.

00:53:33.900 --> 00:53:35.900
<v Speaker 0>Alright. And

00:53:36.859 --> 00:53:39.180
<v Speaker 1>then we do repositories

00:53:41.154 --> 00:53:42.115
<v Speaker 1>colon,

00:53:42.275 --> 00:53:44.435
<v Speaker 1>and then we do, like, HTTP,

00:53:44.674 --> 00:53:46.915
<v Speaker 1>you know, the usual Alpine one,

00:53:47.315 --> 00:53:48.515
<v Speaker 1>d l c d n

00:53:49.954 --> 00:53:52.194
<v Speaker 1>Alpine Linux Org. Copy it.

00:54:05.070 --> 00:54:08.265
<v Speaker 0>Okay. Yeah. That that works. And then

00:54:08.825 --> 00:54:11.145
<v Speaker 1>Do we need we replace either of these?

00:54:12.025 --> 00:54:13.545
<v Speaker 0>The base We do need to keep,

00:54:13.865 --> 00:54:15.465
<v Speaker 1>Alpine base layout.

00:54:17.464 --> 00:54:19.145
<v Speaker 1>And if we do hello,

00:54:19.224 --> 00:54:20.425
<v Speaker 1>and then if we go

00:54:20.770 --> 00:54:21.410
<v Speaker 1>up

00:54:21.890 --> 00:54:22.530
<v Speaker 1>to

00:54:23.650 --> 00:54:26.530
<v Speaker 1>the first one, to the repository section, we'll

00:54:26.530 --> 00:54:28.450
<v Speaker 1>make a local work we'll make a local

00:54:28.450 --> 00:54:29.890
<v Speaker 1>repo. Mhmm.

00:54:32.930 --> 00:54:35.250
<v Speaker 1>And we can have that, like, in

00:54:36.455 --> 00:54:37.655
<v Speaker 1>slash home

00:54:37.655 --> 00:54:38.535
<v Speaker 1>slash

00:54:38.695 --> 00:54:41.015
<v Speaker 1>or, like, wherever you're gonna put it,

00:54:42.135 --> 00:54:43.735
<v Speaker 1>root slash repo.

00:54:43.735 --> 00:54:45.335
<v Speaker 1>Sure. That works.

00:54:47.735 --> 00:54:49.495
<v Speaker 1>You don't actually have to use the file

00:54:49.495 --> 00:54:51.990
<v Speaker 1>colon slash slash. I would just recommend having

00:54:51.990 --> 00:54:54.230
<v Speaker 1>it as slash root slash repository.

00:54:54.390 --> 00:54:55.350
<v Speaker 0>Yeah. Okay.

00:54:56.790 --> 00:54:58.710
<v Speaker 1>And then we can just do, like, entry

00:54:58.710 --> 00:55:00.550
<v Speaker 1>point user bin hello.

00:55:03.865 --> 00:55:06.265
<v Speaker 1>Like, the command. It it still needs to

00:55:06.265 --> 00:55:08.425
<v Speaker 0>be defined. You were showing me some fancy

00:55:09.145 --> 00:55:10.585
<v Speaker 0>Sorry. Hand there.

00:55:10.745 --> 00:55:11.305
<v Speaker 0>User

00:55:11.705 --> 00:55:13.385
<v Speaker 1>Not yet, but soon.

00:55:14.585 --> 00:55:15.145
<v Speaker 0>Like so.

00:55:16.599 --> 00:55:18.760
<v Speaker 1>Yeah. And then save it.

00:55:20.760 --> 00:55:22.680
<v Speaker 1>Alright. So the next thing we have to

00:55:22.680 --> 00:55:25.160
<v Speaker 1>do is actually set up a repository.

00:55:26.040 --> 00:55:27.960
<v Speaker 1>So make DIR repository,

00:55:28.944 --> 00:55:30.785
<v Speaker 1>and then go in there and then make

00:55:30.785 --> 00:55:33.185
<v Speaker 1>DIR x eighty six sixty four.

00:55:37.665 --> 00:55:38.545
<v Speaker 1>And then

00:55:38.944 --> 00:55:39.665
<v Speaker 1>go in there.

00:55:42.119 --> 00:55:44.040
<v Speaker 1>If we copy the

00:55:45.240 --> 00:55:48.040
<v Speaker 1>APKs for the melange directory

00:55:51.240 --> 00:55:53.799
<v Speaker 1>okay. Now if we do APK

00:55:54.585 --> 00:55:55.465
<v Speaker 1>index

00:55:57.065 --> 00:55:58.985
<v Speaker 1>dash dash output,

00:56:02.425 --> 00:56:03.225
<v Speaker 1>apk

00:56:03.225 --> 00:56:05.865
<v Speaker 1>index dot tar dot it has to be

00:56:05.865 --> 00:56:06.744
<v Speaker 1>capitalized. Sorry.

00:56:07.340 --> 00:56:10.780
<v Speaker 0>Oh, yeah. Like, a p that's right. Yeah.

00:56:11.180 --> 00:56:13.180
<v Speaker 1>Dot tar.gz,

00:56:15.980 --> 00:56:17.100
<v Speaker 1>space star,

00:56:17.660 --> 00:56:18.780
<v Speaker 1>space star.a

00:56:18.780 --> 00:56:19.180
<v Speaker 1>p k,

00:56:22.674 --> 00:56:24.115
<v Speaker 1>and then hit enter.

00:56:25.875 --> 00:56:26.595
<v Speaker 1>Okay.

00:56:26.755 --> 00:56:28.595
<v Speaker 1>Now we have to sign that,

00:56:29.714 --> 00:56:31.635
<v Speaker 1>which we're going to use melange to sign

00:56:31.635 --> 00:56:32.195
<v Speaker 1>it.

00:56:32.674 --> 00:56:34.194
<v Speaker 1>So if you do melange

00:56:36.510 --> 00:56:38.190
<v Speaker 1>sign dash index

00:56:40.110 --> 00:56:42.430
<v Speaker 1>and then dash dash signing key

00:56:44.750 --> 00:56:47.790
<v Speaker 1>equals root melange dot melange dot r s

00:56:47.790 --> 00:56:50.110
<v Speaker 1>a dot pub or dot r s a

00:56:50.110 --> 00:56:50.430
<v Speaker 1>rather,

00:56:51.915 --> 00:56:53.835
<v Speaker 1>and then a p k index dot tar

00:56:53.835 --> 00:56:54.315
<v Speaker 1>dot d

00:56:55.035 --> 00:56:56.715
<v Speaker 1>dot tar dot g z,

00:56:57.275 --> 00:56:58.475
<v Speaker 1>it'll sign it.

00:57:00.635 --> 00:57:02.875
<v Speaker 1>Okay. Now we have a signed index.

00:57:05.990 --> 00:57:07.910
<v Speaker 1>If you go back to the directory of

00:57:07.910 --> 00:57:09.109
<v Speaker 1>our apko

00:57:09.109 --> 00:57:09.910
<v Speaker 1>dot

00:57:09.910 --> 00:57:11.190
<v Speaker 1>yaml file

00:57:12.789 --> 00:57:13.990
<v Speaker 0>Jitter.

00:57:16.390 --> 00:57:16.789
<v Speaker 0>Yep.

00:57:19.385 --> 00:57:20.985
<v Speaker 1>We can now do

00:57:21.385 --> 00:57:23.385
<v Speaker 1>we can now run that a p k

00:57:23.385 --> 00:57:25.865
<v Speaker 1>o dot YAML using the a p k

00:57:25.865 --> 00:57:27.065
<v Speaker 1>o build command.

00:57:28.025 --> 00:57:30.425
<v Speaker 0>I don't think we may can stop that.

00:57:30.425 --> 00:57:31.704
<v Speaker 0>So I'm gonna have to do a p

00:57:31.704 --> 00:57:33.545
<v Speaker 0>k o a p k o

00:57:33.549 --> 00:57:35.150
<v Speaker 0>build. Yeah. We didn't.

00:57:35.549 --> 00:57:38.030
<v Speaker 0>And then it was just the failed. Yeah.

00:57:38.670 --> 00:57:41.630
<v Speaker 1>And then hello colon latest and then

00:57:42.190 --> 00:57:43.869
<v Speaker 1>hello dot tar or something.

00:57:49.964 --> 00:57:51.085
<v Speaker 0>Do I need to add my

00:57:52.365 --> 00:57:54.205
<v Speaker 0>no. Oh, right.

00:57:54.285 --> 00:57:55.805
<v Speaker 1>Right. Right. Right. Right. Right.

00:57:57.085 --> 00:57:58.445
<v Speaker 1>You have to do,

00:57:59.805 --> 00:58:01.085
<v Speaker 1>go go up

00:58:01.779 --> 00:58:03.300
<v Speaker 1>and bring that

00:58:03.779 --> 00:58:05.619
<v Speaker 1>or no. No. No. No. Go back to

00:58:05.619 --> 00:58:06.980
<v Speaker 1>the new DIR.

00:58:09.059 --> 00:58:11.540
<v Speaker 1>Bring that apko command back up

00:58:13.299 --> 00:58:16.740
<v Speaker 1>because we have to actually add the

00:58:19.595 --> 00:58:21.035
<v Speaker 0>Yep. Yeah. That one.

00:58:21.835 --> 00:58:23.755
<v Speaker 1>We have to actually add the

00:58:24.875 --> 00:58:27.435
<v Speaker 1>key to the trusted key ring. So it's

00:58:27.435 --> 00:58:29.915
<v Speaker 1>a p k o build dash k.

00:58:32.040 --> 00:58:33.400
<v Speaker 0>Is that for n secure?

00:58:34.520 --> 00:58:37.240
<v Speaker 1>No. That's the add of the key. Alright.

00:58:37.240 --> 00:58:38.600
<v Speaker 0>So it's dash k

00:58:38.760 --> 00:58:40.280
<v Speaker 1>and then the

00:58:40.440 --> 00:58:42.920
<v Speaker 1>e t c a p k dot

00:58:43.240 --> 00:58:44.680
<v Speaker 1>or e tcapk

00:58:44.680 --> 00:58:46.920
<v Speaker 1>melange R p r s a dot pub.

00:58:50.895 --> 00:58:51.935
<v Speaker 1>Yeah. That.

00:58:52.815 --> 00:58:54.095
<v Speaker 1>It should work.

00:58:54.895 --> 00:58:55.855
<v Speaker 1>There we go.

00:58:56.655 --> 00:58:59.694
<v Speaker 1>Alright. So we now have a hello dot

00:58:59.694 --> 00:59:00.494
<v Speaker 1>tar

00:59:00.810 --> 00:59:03.370
<v Speaker 1>with the hello world package in it.

00:59:03.610 --> 00:59:05.530
<v Speaker 1>And if you do docker load

00:59:11.690 --> 00:59:13.930
<v Speaker 1>and if you execute it, it should say

00:59:13.930 --> 00:59:14.970
<v Speaker 1>hello world

00:59:15.210 --> 00:59:15.930
<v Speaker 1>in theory.

00:59:21.905 --> 00:59:22.705
<v Speaker 0>Ta da.

00:59:25.665 --> 00:59:28.785
<v Speaker 0>Nice. And that is a one megabyte

00:59:29.744 --> 00:59:30.385
<v Speaker 1>container.

00:59:35.040 --> 00:59:37.040
<v Speaker 0>Yeah. That's pretty trim.

00:59:39.359 --> 00:59:40.000
<v Speaker 1>So

00:59:40.400 --> 00:59:42.320
<v Speaker 1>That's cool. That's a p k

00:59:42.480 --> 00:59:43.920
<v Speaker 1>that's APKO

00:59:43.920 --> 00:59:47.065
<v Speaker 1>melange and then a how apko and melange

00:59:47.065 --> 00:59:48.425
<v Speaker 1>are used together.

00:59:49.865 --> 00:59:51.225
<v Speaker 0>Very, very cool.

00:59:51.785 --> 00:59:54.425
<v Speaker 1>Obviously, like, in a enterprise,

00:59:54.745 --> 00:59:57.625
<v Speaker 1>like, so called secure software factory,

00:59:59.369 --> 01:00:00.730
<v Speaker 1>you would have, like,

01:00:00.970 --> 01:00:02.250
<v Speaker 1>actual repository

01:00:02.250 --> 01:00:06.410
<v Speaker 1>management instead of, like, using a local repo,

01:00:06.569 --> 01:00:07.770
<v Speaker 1>ideally. But

01:00:09.930 --> 01:00:12.490
<v Speaker 1>setting all of that up, it would not

01:00:12.490 --> 01:00:13.609
<v Speaker 1>be fun for,

01:00:15.195 --> 01:00:18.475
<v Speaker 0>like Yeah. A single episode of Rawkode Academy.

01:00:18.475 --> 01:00:18.955
<v Speaker 1>So

01:00:20.635 --> 01:00:22.955
<v Speaker 0>I feel a bit silly for asking

01:00:22.955 --> 01:00:26.075
<v Speaker 0>you from Alpine Security working for chain guard,

01:00:26.075 --> 01:00:28.670
<v Speaker 0>from apko, melange, and s bombs and all

01:00:28.670 --> 01:00:30.270
<v Speaker 0>this stuff. If dash k was the same

01:00:30.270 --> 01:00:31.710
<v Speaker 0>as curls and secure.

01:00:34.750 --> 01:00:36.190
<v Speaker 0>I'll edit that out for sure.

01:00:37.230 --> 01:00:38.990
<v Speaker 0>But that's really cool. I love that

01:00:39.870 --> 01:00:40.670
<v Speaker 0>we can

01:00:41.230 --> 01:00:43.455
<v Speaker 0>have this workflow

01:00:43.855 --> 01:00:46.895
<v Speaker 0>where we build APKs, we build emojis,

01:00:47.454 --> 01:00:49.535
<v Speaker 0>and we get the stain and verification

01:00:49.535 --> 01:00:50.734
<v Speaker 0>all the way along. And we have a

01:00:50.734 --> 01:00:52.494
<v Speaker 0>question about the about the s bomb, so

01:00:52.494 --> 01:00:53.535
<v Speaker 0>I'll get to that in just a second.

01:00:54.650 --> 01:00:56.810
<v Speaker 0>But this is just a really cool workflow.

01:00:56.810 --> 01:00:59.210
<v Speaker 0>I'm assuming that, you know, given a bit

01:00:59.210 --> 01:01:00.010
<v Speaker 0>more time,

01:01:00.410 --> 01:01:02.170
<v Speaker 0>there'll be GitHub actions and

01:01:02.330 --> 01:01:04.410
<v Speaker 0>that it's gonna make this really, really easy

01:01:04.410 --> 01:01:05.930
<v Speaker 0>for people to get started.

01:01:06.170 --> 01:01:07.210
<v Speaker 0>Is that the plan? So,

01:01:07.815 --> 01:01:10.055
<v Speaker 1>yes, so for apko,

01:01:10.055 --> 01:01:12.615
<v Speaker 1>we already have GitHub actions. Like, if you

01:01:12.615 --> 01:01:14.775
<v Speaker 1>go to the distroless organization

01:01:15.734 --> 01:01:17.015
<v Speaker 1>on GitHub,

01:01:18.775 --> 01:01:21.860
<v Speaker 1>you can see that we're actually rebuilding the

01:01:21.860 --> 01:01:22.660
<v Speaker 1>Alpine

01:01:23.060 --> 01:01:25.700
<v Speaker 1>base image based on whatever is an Alpine

01:01:25.700 --> 01:01:28.820
<v Speaker 1>Edge every night. And that's fully done with

01:01:28.820 --> 01:01:30.340
<v Speaker 1>GitHub actions.

01:01:30.420 --> 01:01:30.980
<v Speaker 1>And

01:01:31.780 --> 01:01:34.020
<v Speaker 1>the way that we've set this up is

01:01:34.305 --> 01:01:37.745
<v Speaker 1>people should be able to go and reuse

01:01:38.785 --> 01:01:39.985
<v Speaker 1>these actions

01:01:41.744 --> 01:01:44.545
<v Speaker 1>without any problem. We have a template repo

01:01:44.545 --> 01:01:44.945
<v Speaker 1>up,

01:01:46.400 --> 01:01:47.440
<v Speaker 1>for example,

01:01:48.720 --> 01:01:49.440
<v Speaker 1>that

01:01:50.720 --> 01:01:52.560
<v Speaker 1>has everything that you need.

01:01:54.480 --> 01:01:55.120
<v Speaker 0>And

01:01:59.120 --> 01:02:00.640
<v Speaker 1>that's a good starting point.

01:02:02.924 --> 01:02:05.325
<v Speaker 1>Thanks, obviously, to at

01:02:05.325 --> 01:02:06.525
<v Speaker 1>for

01:02:06.525 --> 01:02:10.045
<v Speaker 1>doing the legwork on the template repo.

01:02:10.684 --> 01:02:13.164
<v Speaker 1>But if you use that template repo, you

01:02:13.164 --> 01:02:14.525
<v Speaker 1>can have automatically

01:02:14.525 --> 01:02:16.045
<v Speaker 1>refreshed images

01:02:16.045 --> 01:02:16.684
<v Speaker 1>every night.

01:02:18.680 --> 01:02:20.599
<v Speaker 1>And it'll go and it'll sign them with

01:02:20.599 --> 01:02:21.560
<v Speaker 1>cosign,

01:02:21.799 --> 01:02:26.360
<v Speaker 1>and, like, every single part of the pipeline

01:02:26.520 --> 01:02:27.960
<v Speaker 1>will be, like,

01:02:28.520 --> 01:02:29.960
<v Speaker 1>ideal for

01:02:30.359 --> 01:02:32.200
<v Speaker 1>the supply chain security

01:02:32.875 --> 01:02:34.715
<v Speaker 1>aspect of it because

01:02:35.115 --> 01:02:37.995
<v Speaker 1>you'll have images that can be scanned,

01:02:37.995 --> 01:02:39.355
<v Speaker 1>and then they'll be

01:02:39.595 --> 01:02:41.835
<v Speaker 1>always up to date. And

01:02:43.115 --> 01:02:44.955
<v Speaker 1>it'll be

01:02:48.740 --> 01:02:52.260
<v Speaker 1>yeah. It it'll be always up to date,

01:02:52.260 --> 01:02:53.620
<v Speaker 1>and it'll be

01:02:54.260 --> 01:02:55.220
<v Speaker 1>scannable.

01:02:55.220 --> 01:02:55.860
<v Speaker 1>And

01:02:56.740 --> 01:02:59.460
<v Speaker 1>as you can see here, it's not that

01:02:59.460 --> 01:03:00.660
<v Speaker 1>complicated to do.

01:03:01.745 --> 01:03:03.905
<v Speaker 0>Yeah. It feels to me, like, haven't walked

01:03:03.905 --> 01:03:06.945
<v Speaker 0>through this with you now. There's only one

01:03:06.945 --> 01:03:09.745
<v Speaker 0>part that I think can't really be ephemeral,

01:03:09.745 --> 01:03:11.105
<v Speaker 0>and that would be the key gen step.

01:03:11.105 --> 01:03:13.025
<v Speaker 0>Right? That would be something that we did.

01:03:13.105 --> 01:03:14.705
<v Speaker 0>We do once and we store as a

01:03:14.705 --> 01:03:16.865
<v Speaker 0>GitHub action secret or in some other secure

01:03:16.865 --> 01:03:19.480
<v Speaker 0>place, like like Vault or something. Right? Then

01:03:19.480 --> 01:03:21.000
<v Speaker 0>that would be a pair of key.

01:03:21.559 --> 01:03:24.040
<v Speaker 1>You you would use something like Vault

01:03:24.200 --> 01:03:26.039
<v Speaker 1>ideally. Like, if you were going to use

01:03:26.039 --> 01:03:28.760
<v Speaker 1>melange to, like, have automatically

01:03:28.760 --> 01:03:30.920
<v Speaker 1>built APK repository

01:03:30.920 --> 01:03:32.664
<v Speaker 1>for the public to use, You would use

01:03:32.664 --> 01:03:34.425
<v Speaker 1>something like Vault and integrations

01:03:35.464 --> 01:03:37.385
<v Speaker 1>for managing APK,

01:03:38.345 --> 01:03:41.545
<v Speaker 1>assigning material if Vault already exist. Yeah.

01:03:43.065 --> 01:03:43.545
<v Speaker 1>So

01:03:44.040 --> 01:03:46.360
<v Speaker 0>And the other thing there would be the

01:03:46.360 --> 01:03:48.680
<v Speaker 0>the APK repository that we created. I mean,

01:03:48.680 --> 01:03:50.200
<v Speaker 0>that could be a femoral. That doesn't need

01:03:50.200 --> 01:03:51.800
<v Speaker 0>to be maintained or long lived. It could

01:03:51.880 --> 01:03:54.680
<v Speaker 0>that can only exist during the CICD process.

01:03:54.680 --> 01:03:57.400
<v Speaker 0>Is that is that fair? Correct. Right. Okay.

01:03:57.400 --> 01:03:57.720
<v Speaker 1>Correct.

01:03:58.355 --> 01:04:00.275
<v Speaker 1>But, I mean, if you want it to

01:04:00.275 --> 01:04:03.315
<v Speaker 1>be permanent, there's stuff like JFrog,

01:04:03.315 --> 01:04:04.275
<v Speaker 1>artifactory,

01:04:04.275 --> 01:04:04.835
<v Speaker 1>and

01:04:05.474 --> 01:04:08.035
<v Speaker 1>stuff like that that already supports

01:04:08.355 --> 01:04:09.315
<v Speaker 1>managing

01:04:09.474 --> 01:04:10.835
<v Speaker 1>APK repositories.

01:04:11.000 --> 01:04:14.200
<v Speaker 1>So there's there's no shortage of options out

01:04:14.200 --> 01:04:14.760
<v Speaker 1>there

01:04:15.480 --> 01:04:16.280
<v Speaker 1>for

01:04:16.599 --> 01:04:18.280
<v Speaker 1>all of that. And,

01:04:19.960 --> 01:04:22.280
<v Speaker 1>obviously, we we would like to hear

01:04:22.440 --> 01:04:25.720
<v Speaker 1>people's opinions on what's already out on the

01:04:25.224 --> 01:04:27.305
<v Speaker 1>market for managing

01:04:28.425 --> 01:04:29.625
<v Speaker 1>APK repositories

01:04:29.625 --> 01:04:31.065
<v Speaker 1>in a corporate

01:04:31.704 --> 01:04:32.425
<v Speaker 1>setting

01:04:32.665 --> 01:04:33.465
<v Speaker 1>because

01:04:34.265 --> 01:04:35.065
<v Speaker 1>I

01:04:35.065 --> 01:04:36.825
<v Speaker 1>have opinions on it. But

01:04:38.390 --> 01:04:41.270
<v Speaker 0>Okay. Let's tackle a few more questions that

01:04:41.270 --> 01:04:42.550
<v Speaker 0>we've got today.

01:04:43.110 --> 01:04:44.950
<v Speaker 0>So we got one here

01:04:46.230 --> 01:04:47.030
<v Speaker 0>from

01:04:47.030 --> 01:04:49.350
<v Speaker 0>g I could one. Do things that are

01:04:49.350 --> 01:04:51.995
<v Speaker 0>fetched or added using pipeline stage Like, this

01:04:51.995 --> 01:04:54.315
<v Speaker 0>get added or are they represented

01:04:54.315 --> 01:04:55.995
<v Speaker 0>in the bill of materials?

01:04:58.075 --> 01:04:59.195
<v Speaker 1>Not yet.

01:05:00.875 --> 01:05:01.915
<v Speaker 1>Right now,

01:05:02.555 --> 01:05:06.235
<v Speaker 1>the Alpine ecosystem is still using APK version

01:05:06.235 --> 01:05:06.715
<v Speaker 1>two,

01:05:08.049 --> 01:05:11.730
<v Speaker 1>which does not really support capturing

01:05:11.730 --> 01:05:13.250
<v Speaker 1>all of that data yet.

01:05:15.329 --> 01:05:17.970
<v Speaker 1>But APK version three does.

01:05:18.049 --> 01:05:18.690
<v Speaker 1>And

01:05:18.849 --> 01:05:22.289
<v Speaker 1>once everything switches over to APK version three

01:05:22.855 --> 01:05:24.055
<v Speaker 1>ecosystem,

01:05:24.855 --> 01:05:26.615
<v Speaker 1>all of that will be in the SBOM

01:05:26.615 --> 01:05:28.135
<v Speaker 1>for free.

01:05:30.055 --> 01:05:32.135
<v Speaker 1>That that's our intention anyway.

01:05:34.375 --> 01:05:35.015
<v Speaker 0>Alright.

01:05:35.300 --> 01:05:36.260
<v Speaker 0>Let's see.

01:05:36.980 --> 01:05:37.540
<v Speaker 0>We got

01:05:39.220 --> 01:05:40.100
<v Speaker 0>ta da.

01:05:40.980 --> 01:05:43.140
<v Speaker 0>We got I agree. Oh, no. My comments

01:05:43.140 --> 01:05:45.220
<v Speaker 0>are just coming in the middle again. Thank

01:05:45.220 --> 01:05:45.700
<v Speaker 0>you.

01:05:47.060 --> 01:05:49.700
<v Speaker 0>Creating a local repo in Nortem just out

01:05:49.700 --> 01:05:51.745
<v Speaker 0>of memory. Yeah. I was impressed by that

01:05:51.745 --> 01:05:53.185
<v Speaker 0>too. The fact that you were just pulling

01:05:53.185 --> 01:05:54.865
<v Speaker 0>these plucking these commands out of your head.

01:05:54.865 --> 01:05:56.545
<v Speaker 0>But I guess you did this DND out.

01:05:56.545 --> 01:05:57.345
<v Speaker 0>Right? This is

01:05:58.625 --> 01:06:00.385
<v Speaker 1>Well, I mean, it it does help when

01:06:00.385 --> 01:06:03.025
<v Speaker 1>you, like, made a lot of this stuff.

01:06:05.160 --> 01:06:06.520
<v Speaker 0>We got a wave

01:06:07.560 --> 01:06:08.360
<v Speaker 0>at

01:06:09.320 --> 01:06:12.680
<v Speaker 0>yep. Converted all emojis to melange and apko.

01:06:12.680 --> 01:06:14.359
<v Speaker 0>Yeah. I'm gonna be right behind you there.

01:06:14.359 --> 01:06:16.805
<v Speaker 0>This is a really impressive tool chain. And

01:06:16.805 --> 01:06:18.805
<v Speaker 0>it's so early. It's it's cool to be

01:06:18.805 --> 01:06:20.885
<v Speaker 0>just seeing how this evolves as well.

01:06:21.525 --> 01:06:22.005
<v Speaker 0>Yeah.

01:06:23.925 --> 01:06:26.885
<v Speaker 1>Especially if melange, there there's a lot that's

01:06:26.885 --> 01:06:28.165
<v Speaker 1>still subject to change,

01:06:30.700 --> 01:06:33.340
<v Speaker 1>but we're hoping to have, like, a release

01:06:33.340 --> 01:06:34.060
<v Speaker 1>out

01:06:34.860 --> 01:06:35.900
<v Speaker 1>pretty soon.

01:06:36.540 --> 01:06:38.220
<v Speaker 1>There's a couple of other

01:06:38.860 --> 01:06:39.740
<v Speaker 1>initiatives

01:06:39.740 --> 01:06:42.380
<v Speaker 1>that are in the pipeline for

01:06:44.234 --> 01:06:46.795
<v Speaker 1>my team at Shingard to kind of figure

01:06:46.795 --> 01:06:47.915
<v Speaker 1>out first.

01:06:50.954 --> 01:06:51.595
<v Speaker 1>Like

01:06:53.035 --> 01:06:55.275
<v Speaker 1>like I said, we kinda see all of

01:06:55.275 --> 01:07:00.070
<v Speaker 1>this as a spiritual successor to Google's distroless.

01:07:00.070 --> 01:07:00.710
<v Speaker 1>So

01:07:01.590 --> 01:07:03.190
<v Speaker 1>if if you think about

01:07:04.150 --> 01:07:07.670
<v Speaker 1>Google's distroless as, like, distroless one,

01:07:11.270 --> 01:07:14.085
<v Speaker 1>this is, like, distroless two that we're building,

01:07:14.085 --> 01:07:14.725
<v Speaker 1>basically.

01:07:18.165 --> 01:07:20.565
<v Speaker 1>And so we're kind of trying to come

01:07:20.565 --> 01:07:22.325
<v Speaker 1>up with some ways to

01:07:23.925 --> 01:07:27.285
<v Speaker 1>ease the transition away from Distroless one to

01:07:27.285 --> 01:07:28.245
<v Speaker 1>Distroless two.

01:07:31.340 --> 01:07:32.060
<v Speaker 1>So

01:07:32.220 --> 01:07:34.220
<v Speaker 1>at the moment, those are the things that

01:07:34.220 --> 01:07:37.500
<v Speaker 1>are kind of getting ready to take priority.

01:07:37.500 --> 01:07:38.060
<v Speaker 1>But

01:07:40.140 --> 01:07:43.180
<v Speaker 1>the hope is that we'll have a

01:07:43.715 --> 01:07:44.515
<v Speaker 1>early

01:07:45.075 --> 01:07:48.515
<v Speaker 1>preview release of melange out later this week.

01:07:48.995 --> 01:07:50.275
<v Speaker 0>Wow. Quick.

01:07:51.315 --> 01:07:53.875
<v Speaker 1>And then apko 0.2,

01:07:53.875 --> 01:07:57.155
<v Speaker 1>which we walked through using is also due

01:07:57.155 --> 01:07:58.755
<v Speaker 1>out this week. So

01:07:59.849 --> 01:08:01.210
<v Speaker 1>that's kind of

01:08:01.609 --> 01:08:04.730
<v Speaker 1>the pipeline there. And then we're doing some

01:08:04.730 --> 01:08:08.089
<v Speaker 1>similar tooling for Debian to kind of support

01:08:09.210 --> 01:08:09.849
<v Speaker 1>the

01:08:10.170 --> 01:08:11.769
<v Speaker 1>legacy distroless

01:08:11.945 --> 01:08:13.545
<v Speaker 1>users as

01:08:13.705 --> 01:08:17.224
<v Speaker 1>we try to evolve the Distroless ecosystem

01:08:17.865 --> 01:08:19.145
<v Speaker 1>in this direction.

01:08:23.064 --> 01:08:23.784
<v Speaker 1>And

01:08:25.500 --> 01:08:27.899
<v Speaker 0>Is this you know, it's hard to tell

01:08:27.899 --> 01:08:29.420
<v Speaker 0>with the with with the projects we're still

01:08:29.420 --> 01:08:32.220
<v Speaker 0>in this this kind of discovery phase and

01:08:32.220 --> 01:08:35.020
<v Speaker 0>rapid evolution, but is this something that people

01:08:35.020 --> 01:08:36.700
<v Speaker 0>can get involved with? Are you looking for

01:08:36.700 --> 01:08:39.580
<v Speaker 0>contributors to come along and even provide feedback

01:08:39.580 --> 01:08:42.714
<v Speaker 0>or write code? Yes. You are. Yeah. Absolutely.

01:08:43.114 --> 01:08:46.954
<v Speaker 1>We've already been merging patches from external contributors.

01:08:48.875 --> 01:08:50.554
<v Speaker 1>I think, PJ

01:08:50.795 --> 01:08:53.649
<v Speaker 1>earlier in the chat, he's one of the

01:08:53.649 --> 01:08:55.090
<v Speaker 1>external contributors

01:08:55.090 --> 01:08:57.409
<v Speaker 1>that has contributed code to

01:08:58.369 --> 01:08:59.489
<v Speaker 1>apko.

01:09:00.130 --> 01:09:03.329
<v Speaker 1>And then there's another big contributor that's outside

01:09:03.329 --> 01:09:06.210
<v Speaker 1>ChainGuard that's contributed a lot to both apko

01:09:06.210 --> 01:09:07.090
<v Speaker 1>and melange

01:09:09.194 --> 01:09:10.874
<v Speaker 1>named Cruskal,

01:09:11.835 --> 01:09:13.914
<v Speaker 1>and we're trying to, like,

01:09:14.795 --> 01:09:17.515
<v Speaker 1>always get more people involved in in the

01:09:17.515 --> 01:09:18.635
<v Speaker 1>project. We

01:09:19.114 --> 01:09:21.594
<v Speaker 1>fully understand at that

01:09:22.570 --> 01:09:24.970
<v Speaker 1>we need to do all of our work

01:09:24.970 --> 01:09:27.529
<v Speaker 1>in a fully open source way. And

01:09:28.090 --> 01:09:30.650
<v Speaker 1>so everybody's welcome to participate

01:09:30.650 --> 01:09:34.090
<v Speaker 1>and Awesome. Contribute, like, ideas,

01:09:34.090 --> 01:09:36.490
<v Speaker 1>bug reports, patches, whatever they want to do.

01:09:37.735 --> 01:09:38.375
<v Speaker 0>Cool.

01:09:38.775 --> 01:09:41.575
<v Speaker 0>We have a a couple more questions then,

01:09:41.575 --> 01:09:42.694
<v Speaker 0>and then we'll

01:09:43.095 --> 01:09:45.015
<v Speaker 0>we'll wrap this up. We got one from

01:09:45.015 --> 01:09:45.814
<v Speaker 0>Moz

01:09:47.175 --> 01:09:49.175
<v Speaker 0>saying, sorry. I joined late. I'm curious if

01:09:49.175 --> 01:09:51.015
<v Speaker 0>melange can be used to send Docker images.

01:09:51.779 --> 01:09:53.779
<v Speaker 0>Now I must have been melange is using

01:09:53.779 --> 01:09:54.739
<v Speaker 0>cosign

01:09:54.900 --> 01:09:57.059
<v Speaker 0>to to the same input, or is that

01:09:57.059 --> 01:09:57.619
<v Speaker 0>wrong?

01:09:59.380 --> 01:10:00.420
<v Speaker 1>Melange

01:10:00.420 --> 01:10:01.619
<v Speaker 1>just uses

01:10:02.260 --> 01:10:06.340
<v Speaker 1>the APK style RSA signatures to sign packages.

01:10:05.955 --> 01:10:06.755
<v Speaker 1>Packages.

01:10:07.715 --> 01:10:09.795
<v Speaker 1>To sign, like, a Docker image, you would

01:10:09.795 --> 01:10:10.835
<v Speaker 1>use cosign,

01:10:10.835 --> 01:10:11.554
<v Speaker 1>which

01:10:12.915 --> 01:10:15.475
<v Speaker 1>that uses all the Sigstore infrastructure.

01:10:16.275 --> 01:10:16.595
<v Speaker 1>And

01:10:18.540 --> 01:10:20.780
<v Speaker 1>SigStore is kind of the modern way of

01:10:20.780 --> 01:10:21.659
<v Speaker 1>doing it.

01:10:24.300 --> 01:10:26.540
<v Speaker 1>One thing that I will say is that

01:10:27.260 --> 01:10:29.420
<v Speaker 1>we are kind of looking at a way

01:10:29.420 --> 01:10:32.620
<v Speaker 1>to integrate in the SigStore full CO style

01:10:32.620 --> 01:10:34.795
<v Speaker 1>signatures into APKs

01:10:34.795 --> 01:10:37.274
<v Speaker 1>so that you can have the keyless signing

01:10:37.675 --> 01:10:38.874
<v Speaker 1>instead

01:10:39.514 --> 01:10:41.195
<v Speaker 1>of having to deal with

01:10:42.554 --> 01:10:45.355
<v Speaker 1>having, like, a key in in stored in,

01:10:45.355 --> 01:10:47.915
<v Speaker 1>like, Vault or as a GitHub action secret

01:10:47.915 --> 01:10:48.474
<v Speaker 1>or whatever.

01:10:50.590 --> 01:10:53.470
<v Speaker 1>But that's gonna take some work on the

01:10:53.470 --> 01:10:55.869
<v Speaker 1>APK side to do first. So

01:10:56.910 --> 01:10:57.550
<v Speaker 0>Cool.

01:10:58.750 --> 01:10:59.949
<v Speaker 0>Alright.

01:11:01.230 --> 01:11:02.155
<v Speaker 0>And is

01:11:02.155 --> 01:11:05.355
<v Speaker 0>asking, would you mind explaining the intent behind

01:11:05.355 --> 01:11:06.554
<v Speaker 0>the distro listing?

01:11:06.795 --> 01:11:08.715
<v Speaker 0>Can we achieve the same thing by building

01:11:08.715 --> 01:11:11.035
<v Speaker 0>images from scratch based images?

01:11:13.860 --> 01:11:14.500
<v Speaker 1>Right.

01:11:14.740 --> 01:11:15.380
<v Speaker 1>So

01:11:15.620 --> 01:11:18.500
<v Speaker 1>the point behind Distro is is that

01:11:18.580 --> 01:11:20.180
<v Speaker 1>you can take

01:11:20.660 --> 01:11:23.380
<v Speaker 1>just the components out of a software distribution

01:11:23.380 --> 01:11:26.500
<v Speaker 1>that you actually need to support an application

01:11:26.500 --> 01:11:28.660
<v Speaker 1>and have it done automatically.

01:11:29.355 --> 01:11:29.995
<v Speaker 1>So

01:11:32.315 --> 01:11:34.395
<v Speaker 1>you can do things

01:11:34.635 --> 01:11:37.355
<v Speaker 1>like build a statically linked binary

01:11:37.355 --> 01:11:40.395
<v Speaker 1>and then copy it over into a scratch

01:11:40.395 --> 01:11:40.795
<v Speaker 1>image.

01:11:41.450 --> 01:11:43.290
<v Speaker 1>But the problem there is

01:11:43.450 --> 01:11:46.250
<v Speaker 1>that if you do that, like, the tooling,

01:11:46.250 --> 01:11:47.850
<v Speaker 1>like, Trivy and

01:11:48.490 --> 01:11:51.450
<v Speaker 1>Snake and all of those scanners, they will

01:11:51.450 --> 01:11:52.570
<v Speaker 1>not understand

01:11:53.050 --> 01:11:55.690
<v Speaker 1>what's going on, and they won't know how

01:11:55.690 --> 01:11:56.635
<v Speaker 1>to scan it.

01:11:57.034 --> 01:11:57.434
<v Speaker 1>So

01:11:58.315 --> 01:12:01.915
<v Speaker 1>by using this distroless technique and capturing everything

01:12:01.915 --> 01:12:03.114
<v Speaker 1>into packages,

01:12:03.835 --> 01:12:05.915
<v Speaker 1>you can have full transparency

01:12:05.915 --> 01:12:07.834
<v Speaker 1>to the scanners, basically.

01:12:09.195 --> 01:12:11.034
<v Speaker 1>And that's a powerful thing

01:12:11.420 --> 01:12:14.300
<v Speaker 1>because right now, the scanners miss

01:12:14.780 --> 01:12:18.140
<v Speaker 1>a lot of details because they can't see

01:12:18.940 --> 01:12:21.340
<v Speaker 1>the app that you're trying to scan.

01:12:21.580 --> 01:12:23.820
<v Speaker 0>Yeah. With the statically linked binary, you you

01:12:23.820 --> 01:12:25.905
<v Speaker 0>don't know if you're using a version of

01:12:25.905 --> 01:12:28.864
<v Speaker 0>open SSL for instance that has some current

01:12:28.864 --> 01:12:29.985
<v Speaker 0>CVE

01:12:30.945 --> 01:12:34.145
<v Speaker 0>Exactly. Problems with your application. That's that's the

01:12:34.145 --> 01:12:36.065
<v Speaker 0>problem in the space that these tools are

01:12:36.065 --> 01:12:37.505
<v Speaker 0>are trying to solve and why they're so

01:12:37.505 --> 01:12:37.744
<v Speaker 0>important.

01:12:39.369 --> 01:12:42.090
<v Speaker 0>Alright. Well, we're all out of questions. Is

01:12:42.090 --> 01:12:43.929
<v Speaker 0>there anything else that you would like to

01:12:43.929 --> 01:12:45.929
<v Speaker 0>show or share before we wrap up for

01:12:45.929 --> 01:12:46.570
<v Speaker 0>today?

01:12:47.690 --> 01:12:48.889
<v Speaker 1>I think that's it.

01:12:50.225 --> 01:12:53.185
<v Speaker 0>Awesome. Well, thank you so much for taking

01:12:53.185 --> 01:12:55.105
<v Speaker 0>time out of your day and for coming

01:12:55.105 --> 01:12:56.625
<v Speaker 0>on to kind of walk us through this.

01:12:56.625 --> 01:12:58.785
<v Speaker 0>I really am really excited by this, and

01:12:58.785 --> 01:13:00.305
<v Speaker 0>I can't wait to start kicking the tires

01:13:00.305 --> 01:13:02.385
<v Speaker 0>on it. And it's just really

01:13:04.449 --> 01:13:07.170
<v Speaker 0>chilling in a space that can hopefully pry

01:13:07.170 --> 01:13:08.050
<v Speaker 0>us away

01:13:08.130 --> 01:13:10.369
<v Speaker 0>from the the Docker file and all these

01:13:10.369 --> 01:13:13.570
<v Speaker 0>other convoluted build tools. So very exciting. Yeah.

01:13:13.570 --> 01:13:14.289
<v Speaker 1>Absolutely.

01:13:14.690 --> 01:13:15.570
<v Speaker 1>And

01:13:16.065 --> 01:13:18.385
<v Speaker 1>it's been good coming on the show, and

01:13:18.705 --> 01:13:20.465
<v Speaker 1>hope to do it again sometime.

01:13:20.864 --> 01:13:22.545
<v Speaker 0>Alright. Well, have a great day. I'll speak

01:13:22.545 --> 01:13:24.224
<v Speaker 0>to you soon, and thank you again.

01:13:24.465 --> 01:13:26.305
<v Speaker 0>Have a nice day. Alright. Bye.
