WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 8e63e40f-02fa-484f-b880-3057c930ec03
Created: 2025-04-29T13:11:16.832Z
Duration: 2587.4758
Channels: 1

00:00:00.000 --> 00:00:02.000
<v Speaker 0>Welcome to Cloud Native Compass,

00:00:02.240 --> 00:00:04.799
<v Speaker 0>a podcast to help you navigate the vast

00:00:04.799 --> 00:00:07.040
<v Speaker 0>landscape of the cloud native ecosystem.

00:00:07.040 --> 00:00:09.840
<v Speaker 1>We're your hosts. I'm David Flanagan, a technology

00:00:09.840 --> 00:00:12.320
<v Speaker 1>magpie that can't stop playing with new shiny

00:00:12.320 --> 00:00:15.355
<v Speaker 1>things. I'm Laura Santa Maria, a forever learner

00:00:15.355 --> 00:00:17.435
<v Speaker 0>who is constantly breaking production.

00:00:17.675 --> 00:00:19.435
<v Speaker 0>If you want to learn about how the

00:00:19.435 --> 00:00:22.634
<v Speaker 0>cloud native and container developer experience is broken

00:00:22.635 --> 00:00:25.835
<v Speaker 0>and how WebAssembly can bring substantial improvements to

00:00:25.835 --> 00:00:27.035
<v Speaker 0>your day to day,

00:00:27.515 --> 00:00:30.400
<v Speaker 0>then this is the episode for you. Today,

00:00:30.400 --> 00:00:33.200
<v Speaker 1>we're chatting with Laszlo Fugas, a self proclaimed

00:00:33.200 --> 00:00:34.880
<v Speaker 1>WebAssembly skeptic.

00:00:34.880 --> 00:00:37.360
<v Speaker 1>Laszlo responded to one of my tweets shelling

00:00:37.360 --> 00:00:38.400
<v Speaker 1>WebAssembly,

00:00:38.400 --> 00:00:40.480
<v Speaker 1>and we decided to get together and share

00:00:40.480 --> 00:00:41.120
<v Speaker 1>our opinions.

00:00:41.805 --> 00:00:43.245
<v Speaker 0>Let's get to it.

00:00:43.645 --> 00:00:45.485
<v Speaker 1>So, Laszlo, could you please tell us a

00:00:45.485 --> 00:00:47.805
<v Speaker 1>little bit about you? Yeah. Of course, David.

00:00:47.805 --> 00:00:49.645
<v Speaker 2>First of all, thank you for having me.

00:00:49.645 --> 00:00:51.085
<v Speaker 2>And it's good to see you guys, Laura

00:00:51.085 --> 00:00:53.965
<v Speaker 2>and David. So I am Laszlo Fogosh. I

00:00:53.965 --> 00:00:55.245
<v Speaker 2>am based in Budapest,

00:00:55.245 --> 00:00:57.085
<v Speaker 2>and I'm running a small company, a small

00:00:57.290 --> 00:00:59.449
<v Speaker 2>bootstrapped startup called Gimlet.

00:00:59.450 --> 00:01:02.809
<v Speaker 2>It's basically a GitHub space application delivery platform.

00:01:02.890 --> 00:01:05.049
<v Speaker 2>You know, many teams are building platforms these

00:01:05.049 --> 00:01:07.369
<v Speaker 2>days, and it's it's the era that we

00:01:07.369 --> 00:01:08.810
<v Speaker 2>are building platforms. And that's what that's what

00:01:08.810 --> 00:01:11.295
<v Speaker 2>what I was doing previously.

00:01:12.095 --> 00:01:14.335
<v Speaker 2>I was a consultant building these platforms and

00:01:14.335 --> 00:01:16.575
<v Speaker 2>now I we put, all the knowledge and

00:01:16.575 --> 00:01:18.575
<v Speaker 2>all the best practices into this tool called

00:01:18.575 --> 00:01:19.375
<v Speaker 2>Gimlet.

00:01:19.615 --> 00:01:21.134
<v Speaker 2>We have a SaaS and it's open source

00:01:21.134 --> 00:01:22.814
<v Speaker 2>and you can go and check it out.

00:01:23.290 --> 00:01:25.930
<v Speaker 2>And, yeah, that's about me probably.

00:01:26.170 --> 00:01:29.289
<v Speaker 1>Alright. Thank you. So today's conversation came around

00:01:29.289 --> 00:01:30.090
<v Speaker 1>because

00:01:30.250 --> 00:01:33.210
<v Speaker 1>I was being lazy and looking to Twitter

00:01:33.210 --> 00:01:35.770
<v Speaker 1>for to review my abstracts for events that

00:01:35.770 --> 00:01:38.235
<v Speaker 1>I was speaking at. And the abstract was

00:01:38.235 --> 00:01:38.875
<v Speaker 1>around

00:01:39.195 --> 00:01:40.875
<v Speaker 1>me trying to talk about

00:01:41.115 --> 00:01:42.795
<v Speaker 1>not in a clickbait way, but, like, what

00:01:42.795 --> 00:01:44.635
<v Speaker 1>cloud native two point o is gonna look

00:01:44.635 --> 00:01:47.275
<v Speaker 1>like because I don't think that it's entirely

00:01:47.275 --> 00:01:48.315
<v Speaker 1>container based.

00:01:48.555 --> 00:01:50.075
<v Speaker 1>And I've been doing a lot with WebAssembly.

00:01:50.470 --> 00:01:53.030
<v Speaker 1>And you responded to my tweet and you

00:01:53.030 --> 00:01:56.150
<v Speaker 1>called yourself a self professed WebAssembly skeptic. Yes.

00:01:56.150 --> 00:01:57.510
<v Speaker 1>And I thought, you know what? That's a

00:01:57.510 --> 00:01:59.110
<v Speaker 1>really balanced conversation

00:01:59.110 --> 00:02:01.750
<v Speaker 1>where I am not bullish on WebAssembly, but

00:02:01.750 --> 00:02:02.470
<v Speaker 1>I'm definitely

00:02:03.275 --> 00:02:04.635
<v Speaker 1>leaning that way.

00:02:04.955 --> 00:02:06.395
<v Speaker 1>And I thought it'd be good just to

00:02:06.395 --> 00:02:08.155
<v Speaker 1>have those two points of view. And, you

00:02:08.155 --> 00:02:09.514
<v Speaker 1>know, we've also got a lot of others

00:02:09.514 --> 00:02:10.794
<v Speaker 1>and I wanna know where you used to

00:02:10.794 --> 00:02:12.235
<v Speaker 1>land on the WebAssembly.

00:02:12.235 --> 00:02:14.155
<v Speaker 1>I don't know, fence per se.

00:02:14.555 --> 00:02:15.595
<v Speaker 0>I am

00:02:15.995 --> 00:02:18.395
<v Speaker 0>probably a little more cautiously optimistic

00:02:18.900 --> 00:02:21.380
<v Speaker 0>just because I I've I've seen a lot.

00:02:21.380 --> 00:02:23.540
<v Speaker 0>I've heard a lot about it. I do

00:02:23.540 --> 00:02:26.100
<v Speaker 0>feel like there's a hype train going on,

00:02:26.739 --> 00:02:28.500
<v Speaker 0>just a little bit. And I think I

00:02:28.500 --> 00:02:30.739
<v Speaker 0>know who's driving said hype train. David.

00:02:31.575 --> 00:02:33.735
<v Speaker 0>But, you know, that's that's okay. However, I

00:02:33.735 --> 00:02:34.855
<v Speaker 0>do think that

00:02:35.334 --> 00:02:37.815
<v Speaker 0>there is definitely a need for what it's

00:02:37.815 --> 00:02:38.375
<v Speaker 0>doing.

00:02:38.694 --> 00:02:39.495
<v Speaker 0>Unfortunately,

00:02:39.495 --> 00:02:41.735
<v Speaker 0>with the world of manifests and all kinds

00:02:41.735 --> 00:02:42.855
<v Speaker 0>of chaos and

00:02:43.360 --> 00:02:46.560
<v Speaker 0>different things that Docker really brought to our

00:02:46.560 --> 00:02:48.480
<v Speaker 0>whole world. And you think about just how

00:02:48.480 --> 00:02:50.000
<v Speaker 0>much YAML we write

00:02:50.160 --> 00:02:51.520
<v Speaker 0>on a daily basis.

00:02:52.000 --> 00:02:53.680
<v Speaker 0>And that's when you have this moment of,

00:02:53.680 --> 00:02:56.480
<v Speaker 0>like, please someone save me from YAML and

00:02:56.480 --> 00:02:58.400
<v Speaker 0>pages and pages and pages of it. Maybe

00:02:58.400 --> 00:03:00.215
<v Speaker 0>that's just me, skeptical

00:03:00.215 --> 00:03:03.415
<v Speaker 0>old sysadmin that I can be. So Alright.

00:03:03.415 --> 00:03:05.895
<v Speaker 1>So, I mean, then it's perfect. We've got

00:03:05.895 --> 00:03:07.095
<v Speaker 1>the left. We've got the right. We've got

00:03:07.095 --> 00:03:09.735
<v Speaker 1>the center. So we're all Right in the

00:03:09.735 --> 00:03:12.055
<v Speaker 0>middle. Right in the middle. Well, maybe a

00:03:12.055 --> 00:03:13.700
<v Speaker 0>little more pro than con, but that's okay.

00:03:13.700 --> 00:03:15.060
<v Speaker 1>It's alright. You can be less leading. I'll

00:03:15.060 --> 00:03:15.700
<v Speaker 1>take it.

00:03:16.740 --> 00:03:18.100
<v Speaker 1>But it means that as we have our

00:03:18.100 --> 00:03:20.260
<v Speaker 1>conversation today, we can discuss the pros and

00:03:20.260 --> 00:03:22.100
<v Speaker 1>cons. We can have balances. We can understand

00:03:22.100 --> 00:03:24.580
<v Speaker 1>what's important to everyone here. And then, hopefully,

00:03:24.820 --> 00:03:26.980
<v Speaker 1>you know, we all leave with the understanding

00:03:26.980 --> 00:03:29.805
<v Speaker 1>that I'm right. That's that's the ideal situation.

00:03:30.125 --> 00:03:30.605
<v Speaker 0>Or

00:03:30.925 --> 00:03:32.925
<v Speaker 0>we just, you know, throw things at our

00:03:32.925 --> 00:03:34.925
<v Speaker 0>screens and then lock everything up. I do

00:03:34.925 --> 00:03:36.685
<v Speaker 1>have my throwing device. It's okay. It's a

00:03:36.685 --> 00:03:37.965
<v Speaker 1>a pink planet.

00:03:39.965 --> 00:03:42.285
<v Speaker 0>In this visual medium that is a podcast.

00:03:42.980 --> 00:03:44.740
<v Speaker 1>It'll be on YouTube too. People can definitely

00:03:44.740 --> 00:03:46.020
<v Speaker 0>see what you're doing. I

00:03:46.180 --> 00:03:48.580
<v Speaker 0>know. I know. But someone's listening on audio

00:03:48.580 --> 00:03:50.020
<v Speaker 0>and wondering, what is he about to throw

00:03:50.020 --> 00:03:52.260
<v Speaker 1>at and this is squishy, and I can't

00:03:52.260 --> 00:03:53.780
<v Speaker 1>stop letting it go. So,

00:03:54.500 --> 00:03:56.895
<v Speaker 1>anyway, let let's let's focus. Let's not get

00:03:56.895 --> 00:03:58.735
<v Speaker 1>derailed within the first five minutes of the

00:03:58.735 --> 00:04:00.095
<v Speaker 1>episode. Right? All we've done so far is

00:04:00.095 --> 00:04:03.375
<v Speaker 1>introductions. I'm very good, Seth, though. Alright. So

00:04:04.255 --> 00:04:06.095
<v Speaker 1>I guess let's talk, actually, the abstract type

00:04:06.095 --> 00:04:07.375
<v Speaker 1>of postage of Twitter. I gave the talk

00:04:07.375 --> 00:04:09.250
<v Speaker 1>two weeks ago in Glasgow. And I'm just

00:04:09.250 --> 00:04:11.730
<v Speaker 1>gonna get, like, the quick thirty second overview

00:04:11.730 --> 00:04:13.890
<v Speaker 1>of what I think WebAssembly brings to the

00:04:13.890 --> 00:04:15.330
<v Speaker 1>table in creative architectures,

00:04:15.330 --> 00:04:16.930
<v Speaker 1>and then we'll start talking about the pros,

00:04:16.930 --> 00:04:18.769
<v Speaker 1>the cons, and, you know, take a look

00:04:18.769 --> 00:04:20.290
<v Speaker 1>at maybe where it's not a good fit.

00:04:20.290 --> 00:04:21.810
<v Speaker 1>Because, of course, it's not a catch all

00:04:21.810 --> 00:04:23.635
<v Speaker 1>tool. Right? It's it's not gonna solve all

00:04:23.635 --> 00:04:24.755
<v Speaker 1>the problems for everybody.

00:04:25.395 --> 00:04:27.155
<v Speaker 1>But if we take a look at container

00:04:27.155 --> 00:04:28.915
<v Speaker 1>based development today, and I'm gonna focus on

00:04:28.915 --> 00:04:30.755
<v Speaker 1>development and then we can talk about delivery

00:04:30.755 --> 00:04:33.075
<v Speaker 1>as well. I don't think anyone

00:04:33.715 --> 00:04:34.515
<v Speaker 1>enjoys

00:04:34.950 --> 00:04:37.830
<v Speaker 1>building micro service applications with containers

00:04:37.830 --> 00:04:39.350
<v Speaker 1>on their local machine.

00:04:39.590 --> 00:04:41.190
<v Speaker 1>And there's a few main reasons that that

00:04:41.190 --> 00:04:43.430
<v Speaker 1>really just sucks. Right? Is that containers are

00:04:43.430 --> 00:04:44.470
<v Speaker 1>not that lightweight.

00:04:44.870 --> 00:04:46.950
<v Speaker 1>We're probably using Macs or Windows,

00:04:47.430 --> 00:04:49.190
<v Speaker 1>and those have to run a virtual machine,

00:04:49.190 --> 00:04:50.870
<v Speaker 1>which then my containers run-in.

00:04:50.950 --> 00:04:53.485
<v Speaker 1>For interpreted languages, we have to sync loads

00:04:53.485 --> 00:04:55.164
<v Speaker 1>of code into that virtual machine, which is

00:04:55.164 --> 00:04:57.324
<v Speaker 1>a slow and painful process regardless of which

00:04:57.324 --> 00:05:00.925
<v Speaker 1>modern driver we're using and other virtualization features.

00:05:01.645 --> 00:05:04.010
<v Speaker 1>To the point where, like, a a standard,

00:05:04.010 --> 00:05:06.570
<v Speaker 1>not even a larger standard Python or PHP

00:05:06.570 --> 00:05:08.090
<v Speaker 1>web app can take, like, a five second

00:05:08.090 --> 00:05:09.930
<v Speaker 1>refresh and a change, and that's just not

00:05:09.930 --> 00:05:12.410
<v Speaker 1>acceptable. Right? It's not a good experience. And

00:05:12.410 --> 00:05:14.410
<v Speaker 1>that's assuming you've got one container,

00:05:14.490 --> 00:05:16.090
<v Speaker 1>but if you've got microservices,

00:05:16.090 --> 00:05:17.610
<v Speaker 1>so you're trying to run that entire thing

00:05:17.884 --> 00:05:19.805
<v Speaker 1>locally. And, like, how many containers can you

00:05:19.805 --> 00:05:21.485
<v Speaker 1>run-in your machine before it blows up? That's

00:05:21.485 --> 00:05:23.645
<v Speaker 1>probably not that many. So then the developer

00:05:23.645 --> 00:05:25.485
<v Speaker 1>experience pushes us towards,

00:05:25.965 --> 00:05:28.365
<v Speaker 1>like, shared dev containers, like, back in the

00:05:28.365 --> 00:05:29.965
<v Speaker 1>nineties and the early two thousands.

00:05:30.365 --> 00:05:32.525
<v Speaker 1>And I like shared development environments. So cool.

00:05:32.525 --> 00:05:34.660
<v Speaker 1>But then this they have to sync the

00:05:34.660 --> 00:05:36.419
<v Speaker 1>files even further or I have to build

00:05:36.419 --> 00:05:38.020
<v Speaker 1>a container and push it to a private

00:05:38.020 --> 00:05:40.660
<v Speaker 1>registry and deploy that. And, like, the whole

00:05:40.660 --> 00:05:42.900
<v Speaker 1>workflow is a mess. Now I know there's

00:05:42.900 --> 00:05:45.300
<v Speaker 1>someone listening right now who's good, just use

00:05:45.300 --> 00:05:46.020
<v Speaker 1>Linux.

00:05:46.500 --> 00:05:47.860
<v Speaker 1>I have used Linux

00:05:48.415 --> 00:05:51.775
<v Speaker 1>day in and day out since 02/2001.

00:05:51.855 --> 00:05:54.015
<v Speaker 1>And I can tell you that I like

00:05:54.015 --> 00:05:57.215
<v Speaker 1>Linux, but I've never enjoyed using Linux. Right?

00:05:57.615 --> 00:06:00.735
<v Speaker 1>It's always something. Like What did you just

00:06:00.735 --> 00:06:02.975
<v Speaker 0>admit? I mean, I was an Rk Linux

00:06:02.850 --> 00:06:05.010
<v Speaker 1>user, so no one liked me anyway. But,

00:06:05.330 --> 00:06:07.170
<v Speaker 1>you know, compiling my I three used to

00:06:07.170 --> 00:06:08.610
<v Speaker 1>be the highlight of my week and tweaking

00:06:08.610 --> 00:06:10.610
<v Speaker 1>my configs, but I was never really getting

00:06:10.610 --> 00:06:12.530
<v Speaker 1>anything done. I spent more time

00:06:12.770 --> 00:06:15.490
<v Speaker 1>nursing and playing and tweaking the config in

00:06:15.490 --> 00:06:17.410
<v Speaker 1>the box than actually doing anything that was

00:06:17.410 --> 00:06:19.705
<v Speaker 1>useful to my life or career. And, you

00:06:19.705 --> 00:06:21.065
<v Speaker 1>know, when you go to Mac, things just

00:06:21.065 --> 00:06:23.145
<v Speaker 1>work. The apps are nice. They look nice.

00:06:23.225 --> 00:06:24.905
<v Speaker 1>You're not worried about a migration from x

00:06:24.905 --> 00:06:26.585
<v Speaker 1>11 to Weyland. And I don't wanna, like,

00:06:26.585 --> 00:06:28.825
<v Speaker 1>completely segue this entire episode to be a

00:06:28.825 --> 00:06:30.985
<v Speaker 1>certain minute rant about Linux because I like

00:06:30.985 --> 00:06:32.425
<v Speaker 1>Linux. I'm just not gonna use it as

00:06:32.425 --> 00:06:34.770
<v Speaker 1>my desktop daily driver. However,

00:06:35.010 --> 00:06:36.290
<v Speaker 1>I don't know if Lazlo's looking at me

00:06:36.290 --> 00:06:37.970
<v Speaker 1>with that discontent because he's like, I run

00:06:37.970 --> 00:06:39.570
<v Speaker 1>Linux every single day. I

00:06:40.210 --> 00:06:41.490
<v Speaker 0>was gonna say I do think the most

00:06:41.490 --> 00:06:43.410
<v Speaker 0>hilarious thing about this right now is that

00:06:43.410 --> 00:06:46.725
<v Speaker 0>Lazlo's on Linux. David, you're on Mac. I'm

00:06:46.725 --> 00:06:49.925
<v Speaker 0>on Windows right now because my purse my

00:06:49.925 --> 00:06:51.845
<v Speaker 0>personal dev machine is on Linux, but my

00:06:51.845 --> 00:06:54.324
<v Speaker 0>work machine is on Windows. And so we

00:06:54.324 --> 00:06:57.605
<v Speaker 0>can have a lovely conversation about containerization

00:06:57.764 --> 00:07:00.405
<v Speaker 0>across three different operating systems and how much

00:07:00.405 --> 00:07:02.550
<v Speaker 0>of a pain that is to deal with,

00:07:02.710 --> 00:07:05.670
<v Speaker 0>especially when you're on lockdown corporate hardware.

00:07:05.910 --> 00:07:08.230
<v Speaker 1>I'm gonna add one more thing to the

00:07:08.230 --> 00:07:09.990
<v Speaker 1>frustration bucket, and then I'm gonna let you

00:07:09.990 --> 00:07:12.150
<v Speaker 1>both take it over from there. Right. So

00:07:12.150 --> 00:07:14.229
<v Speaker 1>let's move past the fact that developing microservices

00:07:14.229 --> 00:07:15.910
<v Speaker 1>on containers on a virtual machine on a

00:07:15.910 --> 00:07:17.985
<v Speaker 1>Mac or Windows desktop environment that isn't Linux

00:07:17.985 --> 00:07:19.265
<v Speaker 1>can be quite painful.

00:07:19.745 --> 00:07:21.585
<v Speaker 1>Even if you get past that and you

00:07:21.585 --> 00:07:23.985
<v Speaker 1>do run Linux, there's still challenges. One is

00:07:23.985 --> 00:07:26.705
<v Speaker 1>that what if you want to build multi

00:07:26.705 --> 00:07:28.625
<v Speaker 1>platform container images? Like, we should be these

00:07:28.625 --> 00:07:30.465
<v Speaker 1>days. Right? It's not just AMD sixty four,

00:07:30.465 --> 00:07:32.705
<v Speaker 1>but we have to accept ARM sixty four

00:07:32.310 --> 00:07:35.110
<v Speaker 1>Graviton processors, and AWS. Right? These are now

00:07:35.110 --> 00:07:36.550
<v Speaker 1>becoming more commonplace.

00:07:36.790 --> 00:07:38.950
<v Speaker 1>So you have to change your entire build

00:07:38.950 --> 00:07:40.630
<v Speaker 1>pipeline. As much as Docker wants you to

00:07:40.630 --> 00:07:41.990
<v Speaker 1>think that it's just a Docker build, it

00:07:41.990 --> 00:07:43.750
<v Speaker 1>is not. There are tweaks and things that

00:07:43.750 --> 00:07:44.550
<v Speaker 1>you need to do.

00:07:45.190 --> 00:07:46.945
<v Speaker 1>It's just painful,

00:07:46.945 --> 00:07:48.865
<v Speaker 1>especially again on my m one Mac where

00:07:48.865 --> 00:07:50.145
<v Speaker 1>I pull an image and it says, we

00:07:50.145 --> 00:07:51.665
<v Speaker 1>don't support Arm. Sorry.

00:07:51.985 --> 00:07:53.185
<v Speaker 1>And then you have to go and use

00:07:53.185 --> 00:07:55.905
<v Speaker 1>Rosette or or some other crazy workaround. So

00:07:55.985 --> 00:07:58.065
<v Speaker 1>yeah. I just don't think the experience is

00:07:58.065 --> 00:07:59.720
<v Speaker 1>great. And I have a lot of sympathy

00:07:59.720 --> 00:08:01.640
<v Speaker 1>and empathy for, like, people that are new

00:08:01.640 --> 00:08:03.240
<v Speaker 1>to this that are on their Macs, and

00:08:03.240 --> 00:08:05.000
<v Speaker 1>they're like, they just wanna get started. And

00:08:05.000 --> 00:08:06.680
<v Speaker 1>they're like, imagine your first day in a

00:08:06.680 --> 00:08:08.520
<v Speaker 1>job, and you're like, you pull you you're

00:08:08.520 --> 00:08:10.120
<v Speaker 1>I'm on Mac. You're so happy. It's, like,

00:08:10.120 --> 00:08:12.200
<v Speaker 1>amazing computer this company's given you. It's your

00:08:12.200 --> 00:08:14.014
<v Speaker 1>first day as a developer. And then you

00:08:14.014 --> 00:08:15.775
<v Speaker 1>see a warning message about not being able

00:08:15.775 --> 00:08:17.534
<v Speaker 1>to run an ARM 64 container on side

00:08:17.534 --> 00:08:20.735
<v Speaker 1>of an AMD an AMD sixty four AMD

00:08:21.215 --> 00:08:23.615
<v Speaker 1>sixty four container on an ARM 64 machine.

00:08:23.775 --> 00:08:27.455
<v Speaker 1>So difficult. Right? Well, I'm definitely hearing you.

00:08:27.455 --> 00:08:29.134
<v Speaker 2>I mean, I'm on Linux, so that that

00:08:29.215 --> 00:08:31.110
<v Speaker 2>that's that's better. But I

00:08:33.350 --> 00:08:35.589
<v Speaker 2>I occasionally have to be on those cross

00:08:35.589 --> 00:08:38.070
<v Speaker 2>platform images and ARM has been an issue

00:08:38.070 --> 00:08:40.390
<v Speaker 2>and I'm I'm doing go and sometimes I'm

00:08:40.390 --> 00:08:42.404
<v Speaker 2>getting some linker issues, which is like a

00:08:42.404 --> 00:08:44.324
<v Speaker 2>pain to debug, especially that I'm not on

00:08:44.324 --> 00:08:46.725
<v Speaker 2>Mac. So I definitely hear you, and I

00:08:46.725 --> 00:08:48.565
<v Speaker 2>do believe that there is a problem there.

00:08:49.204 --> 00:08:51.925
<v Speaker 2>You mentioned the developer inner inner loop kind

00:08:51.925 --> 00:08:54.404
<v Speaker 2>of setup that people develop inside containers.

00:08:55.060 --> 00:08:57.699
<v Speaker 2>Now, I'm doing containers since 02/2016

00:08:57.699 --> 00:09:00.500
<v Speaker 2>and, you know, developing applications

00:09:00.500 --> 00:09:02.740
<v Speaker 2>and helping people and everything.

00:09:03.060 --> 00:09:05.379
<v Speaker 2>And this inner loop, I never understood how

00:09:05.379 --> 00:09:05.940
<v Speaker 2>can people,

00:09:06.945 --> 00:09:10.305
<v Speaker 2>like, bear, like, developing in a container. It's

00:09:10.305 --> 00:09:13.185
<v Speaker 2>just not productive enough. It's like it's it's

00:09:13.185 --> 00:09:15.025
<v Speaker 2>it's not made for that. And I know

00:09:15.025 --> 00:09:16.225
<v Speaker 2>there are tools and there are,

00:09:17.345 --> 00:09:19.585
<v Speaker 2>telepresence and other tools which which you can

00:09:19.585 --> 00:09:20.865
<v Speaker 2>use and all that. But

00:09:21.879 --> 00:09:24.279
<v Speaker 2>I just I just wire my you know,

00:09:24.279 --> 00:09:26.600
<v Speaker 2>I have this component, that component, all the

00:09:26.600 --> 00:09:29.399
<v Speaker 2>boxes and the arrows between them. I just

00:09:29.399 --> 00:09:31.879
<v Speaker 2>rewire things in my head, and I just

00:09:31.879 --> 00:09:34.040
<v Speaker 2>run my processes on my laptop. So I

00:09:34.040 --> 00:09:35.720
<v Speaker 2>I don't develop inside a container.

00:09:36.225 --> 00:09:36.625
<v Speaker 2>So,

00:09:37.105 --> 00:09:38.704
<v Speaker 2>that's why perhaps my,

00:09:39.185 --> 00:09:41.345
<v Speaker 2>appreciation of containers a little bit higher than

00:09:41.345 --> 00:09:43.665
<v Speaker 2>yours that I just I just put this

00:09:43.665 --> 00:09:45.665
<v Speaker 2>problem into a box and never open it.

00:09:45.904 --> 00:09:48.065
<v Speaker 1>I think you're right. Like, I think the

00:09:48.065 --> 00:09:50.144
<v Speaker 1>local developer experience just should be native tools

00:09:50.144 --> 00:09:52.000
<v Speaker 1>as much as possible. I know we we

00:09:52.000 --> 00:09:53.040
<v Speaker 1>try to get away from that because you

00:09:53.040 --> 00:09:54.800
<v Speaker 1>don't want someone running node 16 and someone

00:09:54.800 --> 00:09:56.560
<v Speaker 1>running node 18 and someone running node 20

00:09:56.560 --> 00:09:59.120
<v Speaker 1>across the team and all getting different outcomes.

00:09:59.120 --> 00:10:00.720
<v Speaker 1>But then it doesn't really matter. Right? As

00:10:00.720 --> 00:10:02.079
<v Speaker 1>long as the test pass and you ship

00:10:02.079 --> 00:10:04.160
<v Speaker 1>a container, that's the same on every production

00:10:04.160 --> 00:10:06.639
<v Speaker 1>node. Yeah. Like, develop locally. I think that's

00:10:06.639 --> 00:10:08.995
<v Speaker 1>great. But what about and if you get

00:10:08.995 --> 00:10:10.675
<v Speaker 1>your microservices right, you can do that in

00:10:10.675 --> 00:10:13.075
<v Speaker 1>isolation for a single microservice. But is there

00:10:13.075 --> 00:10:14.595
<v Speaker 1>ever a cause, ever a need where you

00:10:14.595 --> 00:10:16.755
<v Speaker 1>need to build that, run integration test against

00:10:16.755 --> 00:10:19.635
<v Speaker 1>multiple services? Do you solely rely on automation

00:10:19.635 --> 00:10:20.755
<v Speaker 1>for that? Do you try to do it

00:10:20.755 --> 00:10:23.759
<v Speaker 1>locally? Like, what's your experience there? Yeah. So

00:10:23.759 --> 00:10:25.040
<v Speaker 2>so microservices,

00:10:25.120 --> 00:10:27.120
<v Speaker 2>I typically, like, work on just a single

00:10:27.120 --> 00:10:28.959
<v Speaker 2>service. So I'm not, like, developing 10 at

00:10:28.959 --> 00:10:30.800
<v Speaker 2>a time, and I need to recompile all

00:10:30.800 --> 00:10:33.920
<v Speaker 2>of them all the time. So, yes, occasionally,

00:10:33.920 --> 00:10:35.360
<v Speaker 2>I start up a stack,

00:10:35.839 --> 00:10:37.440
<v Speaker 2>you know, of of 10 applications

00:10:38.045 --> 00:10:40.525
<v Speaker 2>that are my immediate dependencies.

00:10:40.525 --> 00:10:42.285
<v Speaker 2>And I and I use those as like

00:10:42.285 --> 00:10:43.645
<v Speaker 2>a static dependency,

00:10:44.045 --> 00:10:46.205
<v Speaker 2>you know, could run on my laptop or

00:10:46.205 --> 00:10:47.965
<v Speaker 2>on a remote machine. So it doesn't really

00:10:47.965 --> 00:10:48.525
<v Speaker 1>matter.

00:10:48.925 --> 00:10:49.565
<v Speaker 1>Yeah.

00:10:49.805 --> 00:10:52.410
<v Speaker 0>I mean, I've dealt with enough pipelines

00:10:52.410 --> 00:10:55.210
<v Speaker 0>and running pipelines and mostly

00:10:55.370 --> 00:10:57.930
<v Speaker 0>so I've done the Docker within Docker thing

00:10:57.930 --> 00:10:58.970
<v Speaker 0>way back when,

00:10:59.530 --> 00:11:01.210
<v Speaker 0>which was hell

00:11:01.210 --> 00:11:02.330
<v Speaker 0>on three legs.

00:11:03.985 --> 00:11:04.625
<v Speaker 0>But

00:11:04.945 --> 00:11:06.625
<v Speaker 0>to me, in general, like, if you're gonna

00:11:06.625 --> 00:11:08.785
<v Speaker 0>be building any kind of containerization

00:11:08.785 --> 00:11:10.945
<v Speaker 0>and any kind of microservices system, you have

00:11:10.945 --> 00:11:12.545
<v Speaker 0>to be running some kind of pipeline to

00:11:12.545 --> 00:11:14.705
<v Speaker 0>test everything and put it all together on

00:11:14.705 --> 00:11:16.305
<v Speaker 0>the machines you're expecting it to run on

00:11:17.120 --> 00:11:18.960
<v Speaker 0>Just because there's so much

00:11:19.440 --> 00:11:21.520
<v Speaker 0>different things going on that

00:11:21.839 --> 00:11:23.839
<v Speaker 0>you're not you're gonna miss, like, this little

00:11:23.839 --> 00:11:25.360
<v Speaker 0>bit or that little bit if you're running

00:11:25.360 --> 00:11:27.920
<v Speaker 0>a system that is not the same. Like,

00:11:27.920 --> 00:11:29.519
<v Speaker 0>maybe a weird networking

00:11:29.519 --> 00:11:31.839
<v Speaker 0>error or some kind of load

00:11:32.095 --> 00:11:32.975
<v Speaker 0>concern

00:11:33.135 --> 00:11:36.895
<v Speaker 0>going across whatever system you're running. So I

00:11:36.895 --> 00:11:38.975
<v Speaker 0>don't know. Like, I can kind of see

00:11:38.975 --> 00:11:39.615
<v Speaker 0>the

00:11:39.935 --> 00:11:42.015
<v Speaker 0>we're trying to get everybody to run everything

00:11:42.015 --> 00:11:44.735
<v Speaker 0>locally and make it look nice before it

00:11:44.735 --> 00:11:47.350
<v Speaker 0>even ends up on your automation pipelines and

00:11:47.350 --> 00:11:49.270
<v Speaker 0>your testing and everything like that. But

00:11:49.830 --> 00:11:52.070
<v Speaker 0>if you don't have that pipeline, I feel

00:11:52.070 --> 00:11:53.990
<v Speaker 0>like you're completely missing out when you're dealing

00:11:53.990 --> 00:11:55.190
<v Speaker 0>with containerization

00:11:55.430 --> 00:11:57.990
<v Speaker 0>because there has to be some kind of

00:11:57.990 --> 00:11:58.310
<v Speaker 0>testing

00:11:58.865 --> 00:12:00.305
<v Speaker 0>going on in there, and there has to

00:12:00.305 --> 00:12:01.745
<v Speaker 0>be some kind of good work going on

00:12:01.745 --> 00:12:03.264
<v Speaker 0>in there if you expect your containers to

00:12:03.264 --> 00:12:05.425
<v Speaker 0>run. And, yes, if you are a brand

00:12:05.425 --> 00:12:06.144
<v Speaker 0>new dev,

00:12:06.464 --> 00:12:08.704
<v Speaker 0>it's complete chaos, you have no idea what's

00:12:08.704 --> 00:12:10.065
<v Speaker 0>going on. And you have to wait for

00:12:10.065 --> 00:12:11.904
<v Speaker 0>some engineer to come and work with you,

00:12:11.904 --> 00:12:14.305
<v Speaker 0>which is really, really disconcerting

00:12:14.520 --> 00:12:17.160
<v Speaker 0>as a beginner. Or I can see that

00:12:17.160 --> 00:12:19.160
<v Speaker 0>point. They could write WebAssembly applications.

00:12:21.480 --> 00:12:24.280
<v Speaker 0>Or they could do that. But, you know,

00:12:24.280 --> 00:12:26.440
<v Speaker 0>I don't know. Like, how much chaos is

00:12:26.440 --> 00:12:28.245
<v Speaker 0>that bringing in? Well, I mean, when you

00:12:28.245 --> 00:12:30.805
<v Speaker 1>write a WebAssembly application, there's there's no containers,

00:12:30.805 --> 00:12:33.125
<v Speaker 1>there's no virtual machine. You work natively with

00:12:33.125 --> 00:12:34.725
<v Speaker 1>your own tool chain, whether that be Rust

00:12:34.725 --> 00:12:37.685
<v Speaker 1>or Go, Python, you know, the language support

00:12:37.685 --> 00:12:39.685
<v Speaker 1>is almost ubiquitous at this point in time.

00:12:40.620 --> 00:12:42.940
<v Speaker 1>And, you know, for go and Rust, it's

00:12:42.940 --> 00:12:45.900
<v Speaker 1>just a compilation target. You just say compile

00:12:45.900 --> 00:12:48.780
<v Speaker 1>for Wasm and it's done. That's it. You

00:12:48.780 --> 00:12:50.540
<v Speaker 1>don't really need to worry about anything else.

00:12:50.860 --> 00:12:52.780
<v Speaker 1>You get some bytecode that you ship and

00:12:52.780 --> 00:12:54.860
<v Speaker 1>then OCI registry. You don't we know you're

00:12:54.860 --> 00:12:57.005
<v Speaker 1>not throwing away all the good things that

00:12:57.005 --> 00:12:59.645
<v Speaker 1>containers and that ecosystem has brought to the

00:12:59.645 --> 00:13:02.205
<v Speaker 1>developer experience. I still like the docker push,

00:13:02.205 --> 00:13:03.645
<v Speaker 1>the docker build model. Why not use it

00:13:03.645 --> 00:13:05.325
<v Speaker 1>for more stuff? In fact, we already do

00:13:05.325 --> 00:13:05.805
<v Speaker 1>it.

00:13:07.085 --> 00:13:08.685
<v Speaker 1>So I don't know. It's like I don't

00:13:08.685 --> 00:13:10.925
<v Speaker 1>think WebAssembly fits everything. I mean, get into

00:13:10.925 --> 00:13:13.510
<v Speaker 1>that. But I think the developer experience is

00:13:13.510 --> 00:13:15.750
<v Speaker 1>solved. We don't need virtual machines. We don't

00:13:15.750 --> 00:13:16.630
<v Speaker 1>need containers.

00:13:16.950 --> 00:13:19.750
<v Speaker 1>The here's another thing. We talk about microservices.

00:13:19.750 --> 00:13:21.750
<v Speaker 1>If everything was WebAssembly I don't think there's

00:13:21.750 --> 00:13:23.190
<v Speaker 1>really ever a situation where that's gonna be

00:13:23.190 --> 00:13:25.350
<v Speaker 1>true yet or maybe even in the next

00:13:25.350 --> 00:13:25.670
<v Speaker 1>ten years.

00:13:26.475 --> 00:13:27.834
<v Speaker 1>But WebAssembly's

00:13:27.834 --> 00:13:30.875
<v Speaker 1>are binaries are super lightweight. Like, the startup

00:13:30.875 --> 00:13:31.595
<v Speaker 1>time

00:13:31.915 --> 00:13:34.555
<v Speaker 1>from a Wasm runtime to running your bytecode

00:13:34.555 --> 00:13:36.235
<v Speaker 1>is under a microsecond

00:13:36.394 --> 00:13:39.035
<v Speaker 1>or under a millisecond. This measures the microseconds.

00:13:39.834 --> 00:13:41.435
<v Speaker 1>Whereas for a container, you're probably

00:13:42.000 --> 00:13:44.320
<v Speaker 1>And the best case scenario, container startup is,

00:13:44.320 --> 00:13:46.800
<v Speaker 1>like, three hundred milliseconds, four hundred milliseconds.

00:13:48.320 --> 00:13:49.840
<v Speaker 1>So it's not like for a micro service

00:13:49.840 --> 00:13:52.400
<v Speaker 1>architecture, you need to run every single container

00:13:52.400 --> 00:13:54.400
<v Speaker 1>or you would. But in WebAssembly,

00:13:55.045 --> 00:13:58.245
<v Speaker 1>you would just have little pointers to WebAssembly

00:13:58.245 --> 00:14:00.085
<v Speaker 1>batteries that could be spun up on demand

00:14:00.085 --> 00:14:01.525
<v Speaker 1>as requests flow

00:14:01.685 --> 00:14:02.885
<v Speaker 1>through your architecture.

00:14:03.205 --> 00:14:04.805
<v Speaker 1>And I think that's really powerful. I think

00:14:04.805 --> 00:14:06.885
<v Speaker 1>it opens up new patterns that we probably

00:14:06.885 --> 00:14:09.125
<v Speaker 1>haven't been able to take advantage or seen

00:14:09.440 --> 00:14:11.519
<v Speaker 1>before. Now there was promise. I don't know

00:14:11.519 --> 00:14:12.080
<v Speaker 1>if

00:14:12.320 --> 00:14:14.240
<v Speaker 1>how much attention y'all were paying in, like,

00:14:14.240 --> 00:14:15.839
<v Speaker 1>2017,

00:14:15.839 --> 00:14:18.160
<v Speaker 1>'20 '18, but the concept of Unicarnals was

00:14:18.160 --> 00:14:20.000
<v Speaker 1>pretty big. And in fact, Docker bought, like,

00:14:20.000 --> 00:14:21.680
<v Speaker 1>the Oxford based Unicarnal company.

00:14:22.795 --> 00:14:24.395
<v Speaker 1>And now we've never seen unique kernels. I

00:14:24.395 --> 00:14:25.675
<v Speaker 1>don't know if there's a correlation there, and

00:14:25.675 --> 00:14:27.515
<v Speaker 1>they wanted everyone just to use containers.

00:14:27.915 --> 00:14:29.835
<v Speaker 1>But the the promise is nice. Like, every

00:14:29.835 --> 00:14:31.755
<v Speaker 1>HTTP request that comes in, you get a

00:14:31.755 --> 00:14:33.675
<v Speaker 1>micro VM that spun up, answered it, and

00:14:33.675 --> 00:14:36.290
<v Speaker 1>shut back down. And that model works quite

00:14:36.290 --> 00:14:39.090
<v Speaker 1>well. Can I latch onto one of your

00:14:39.090 --> 00:14:39.970
<v Speaker 2>sentences

00:14:39.970 --> 00:14:42.290
<v Speaker 2>when you said, like, if you want to,

00:14:42.290 --> 00:14:44.610
<v Speaker 2>you know, compile for WebAssembly, it's just a

00:14:44.610 --> 00:14:46.770
<v Speaker 2>compiler target? And, you know, you have your

00:14:46.770 --> 00:14:49.410
<v Speaker 2>application. You compile it. It's the WebAssembly

00:14:50.185 --> 00:14:54.025
<v Speaker 2>bytecode, binary, whatever and then it just runs.

00:14:54.105 --> 00:14:55.305
<v Speaker 2>And that feels

00:14:55.305 --> 00:14:58.585
<v Speaker 2>like a very amazing scenario. So all the

00:14:58.585 --> 00:15:00.745
<v Speaker 2>things that you said, it just sounds amazing.

00:15:00.985 --> 00:15:03.920
<v Speaker 2>But my question is: can just recompile all

00:15:03.920 --> 00:15:05.920
<v Speaker 2>my application to WebAssembly

00:15:05.920 --> 00:15:06.640
<v Speaker 2>today?

00:15:07.200 --> 00:15:09.840
<v Speaker 2>Or if not today, is it really the

00:15:09.840 --> 00:15:12.000
<v Speaker 2>goal and will we reach this point in

00:15:12.000 --> 00:15:14.160
<v Speaker 2>time where we can just recompile everything and

00:15:14.160 --> 00:15:16.800
<v Speaker 2>be in this wonderful place that you described?

00:15:18.735 --> 00:15:20.575
<v Speaker 1>Yeah. Good question. Can

00:15:22.655 --> 00:15:24.335
<v Speaker 1>you take an existing application and compare it

00:15:24.335 --> 00:15:26.895
<v Speaker 1>to WebAssembly? No. It's not gonna happen. Will

00:15:26.895 --> 00:15:27.775
<v Speaker 1>it ever happen?

00:15:28.175 --> 00:15:31.215
<v Speaker 1>I don't think so. The way the server

00:15:31.215 --> 00:15:34.290
<v Speaker 1>side WebAssembly works at least is that

00:15:35.090 --> 00:15:37.410
<v Speaker 1>there's a whole bunch of abstractions via the

00:15:37.410 --> 00:15:39.890
<v Speaker 1>component model. So let me talk about WebAssembly

00:15:39.890 --> 00:15:42.930
<v Speaker 1>a little bit. WebAssembly is a very constrained

00:15:42.930 --> 00:15:44.850
<v Speaker 1>sandbox that runs in your browser. It can

00:15:44.850 --> 00:15:47.425
<v Speaker 1>run-in other places that doesn't have access to

00:15:47.425 --> 00:15:49.425
<v Speaker 1>fail systems and networking

00:15:49.425 --> 00:15:50.385
<v Speaker 1>sockets,

00:15:50.385 --> 00:15:51.665
<v Speaker 1>any of the stuff that we have to

00:15:51.665 --> 00:15:53.345
<v Speaker 1>spec from standard POSIX. Right?

00:15:53.985 --> 00:15:56.545
<v Speaker 1>Because of that, anything that's built without any

00:15:56.545 --> 00:15:58.385
<v Speaker 1>of those requirements probably could be compelled to

00:15:58.385 --> 00:16:00.465
<v Speaker 1>WebAssembly and go run-in your browser. People have

00:16:00.465 --> 00:16:02.380
<v Speaker 1>actually compelled Git to

00:16:03.580 --> 00:16:05.740
<v Speaker 1>a WebAssembly module, and they hook out to

00:16:05.740 --> 00:16:07.740
<v Speaker 1>the fetch API and the browser to get

00:16:07.740 --> 00:16:10.460
<v Speaker 1>the repository and do other stuff. However, very

00:16:10.460 --> 00:16:12.380
<v Speaker 1>cool. But we need to if we wanted

00:16:12.380 --> 00:16:13.980
<v Speaker 1>to service the WebAssembly, we we need these

00:16:13.980 --> 00:16:15.654
<v Speaker 1>things. We need sockets. We need file systems.

00:16:15.654 --> 00:16:17.654
<v Speaker 1>We need speak to databases. We need caching.

00:16:17.654 --> 00:16:19.415
<v Speaker 1>We need you know, we don't wanna throw

00:16:19.415 --> 00:16:20.695
<v Speaker 1>away service mesh and a good stuff there.

00:16:20.695 --> 00:16:22.295
<v Speaker 1>We wanna retry logic. We don't wanna build

00:16:22.295 --> 00:16:24.535
<v Speaker 1>a center applications because the WebAssembly should be

00:16:24.535 --> 00:16:26.055
<v Speaker 1>small and lightweight and compact and all these

00:16:26.055 --> 00:16:28.120
<v Speaker 1>other good things. And that's where the component

00:16:28.120 --> 00:16:29.640
<v Speaker 1>model comes in. It's like, okay. We're gonna

00:16:29.640 --> 00:16:31.480
<v Speaker 1>give you a sandbox to run your WebAssembly,

00:16:31.480 --> 00:16:33.160
<v Speaker 1>but we're gonna expose things on the outside

00:16:33.160 --> 00:16:34.520
<v Speaker 1>via these APIs.

00:16:34.920 --> 00:16:36.680
<v Speaker 1>So you have the ability to call open

00:16:36.680 --> 00:16:38.920
<v Speaker 1>on a failed scripture or close or read

00:16:38.920 --> 00:16:41.160
<v Speaker 1>or write. You have the ability to open

00:16:41.375 --> 00:16:43.055
<v Speaker 1>right now, you can't open sockets because they

00:16:43.055 --> 00:16:45.535
<v Speaker 1>go make an HTTP request or a Redis

00:16:45.535 --> 00:16:47.615
<v Speaker 1>request or a Postgres request,

00:16:48.334 --> 00:16:49.855
<v Speaker 1>means that if you want to compile existing

00:16:49.855 --> 00:16:52.255
<v Speaker 1>applications to be server side WebAssembly on these

00:16:52.255 --> 00:16:54.894
<v Speaker 1>runtimes, the way that they communicate with Redis

00:16:54.894 --> 00:16:57.199
<v Speaker 1>and HTTP and Postgres and MongoDB, all these

00:16:57.199 --> 00:16:59.120
<v Speaker 1>other good stuff would have to be conformant

00:16:59.120 --> 00:17:01.600
<v Speaker 1>to the APIs and abstractions provided by the

00:17:01.600 --> 00:17:03.440
<v Speaker 1>component model. And what I think is gonna

00:17:03.440 --> 00:17:04.960
<v Speaker 1>be a side effect here, and I haven't

00:17:04.960 --> 00:17:07.200
<v Speaker 1>seen anything to confirm this yet, but I

00:17:07.200 --> 00:17:09.615
<v Speaker 1>I really hope is that these interfaces we

00:17:09.615 --> 00:17:11.375
<v Speaker 1>have in the component model will probably filter

00:17:11.375 --> 00:17:13.775
<v Speaker 1>through to container based applications at some point.

00:17:14.175 --> 00:17:16.015
<v Speaker 1>I I think they'll they'll provide, like, a

00:17:16.015 --> 00:17:18.735
<v Speaker 1>substrate for all future application development where we

00:17:18.735 --> 00:17:19.775
<v Speaker 1>don't need to have,

00:17:20.175 --> 00:17:22.815
<v Speaker 1>you know, people build and bespoke performing MongoDB

00:17:22.815 --> 00:17:24.619
<v Speaker 1>APIs and stuff. We can

00:17:24.940 --> 00:17:26.299
<v Speaker 1>you know, if I don't know how much

00:17:26.299 --> 00:17:28.220
<v Speaker 1>of architecture geeks you are. Right? But there's

00:17:28.220 --> 00:17:31.340
<v Speaker 1>hexagonal architectures, ports and adapter architectures, that's onion

00:17:31.340 --> 00:17:33.740
<v Speaker 1>architectures, there's clean architectures. They're all the same

00:17:33.740 --> 00:17:35.340
<v Speaker 1>thing with different names that people have just

00:17:35.340 --> 00:17:36.779
<v Speaker 1>signed to promote over the last ten years.

00:17:37.235 --> 00:17:39.795
<v Speaker 1>And the component model really resembles that. It's

00:17:39.795 --> 00:17:41.235
<v Speaker 1>the ability to write a small piece of

00:17:41.235 --> 00:17:43.315
<v Speaker 1>code that says go and write something on

00:17:43.315 --> 00:17:45.475
<v Speaker 1>a database and write this file and speak

00:17:45.475 --> 00:17:46.995
<v Speaker 1>to this HTTP endpoint.

00:17:47.315 --> 00:17:50.195
<v Speaker 1>And those components can be swapped out with

00:17:50.195 --> 00:17:53.140
<v Speaker 1>any other implementation whenever you want because they're

00:17:53.140 --> 00:17:55.060
<v Speaker 1>all little LEGO bricks. And I think that

00:17:55.060 --> 00:17:57.300
<v Speaker 1>is really neat from the WebAssembly component model

00:17:57.300 --> 00:17:59.780
<v Speaker 1>stuff, and hopefully, it does leak over. Did

00:17:59.780 --> 00:18:00.899
<v Speaker 1>that answer your question?

00:18:02.180 --> 00:18:04.340
<v Speaker 2>It did. So it's it's kind of an

00:18:04.340 --> 00:18:07.140
<v Speaker 2>SDK that I have an API that I

00:18:07.140 --> 00:18:10.155
<v Speaker 2>can call to do, like, you know, important

00:18:10.155 --> 00:18:11.914
<v Speaker 2>stuff. Yeah. So

00:18:12.235 --> 00:18:13.835
<v Speaker 1>if we take, like, a Wasm runtime just

00:18:13.835 --> 00:18:17.195
<v Speaker 1>now, like Wasm time, WasmR, WasmCloud, WasmEdge, there's

00:18:17.195 --> 00:18:18.715
<v Speaker 1>a whole bunch of them. Right? Right?

00:18:19.275 --> 00:18:21.675
<v Speaker 1>You basically can just run a WebAssembly file.

00:18:21.675 --> 00:18:22.395
<v Speaker 1>We're doing

00:18:23.010 --> 00:18:25.730
<v Speaker 1>Wasm or Wasm time file, and it runs.

00:18:25.730 --> 00:18:27.570
<v Speaker 1>Right? If it doesn't use any components, it's

00:18:27.570 --> 00:18:29.330
<v Speaker 1>fine. Now if you want to enrich or

00:18:29.330 --> 00:18:31.810
<v Speaker 1>augment that runtime with new functionality, like, say,

00:18:31.810 --> 00:18:33.330
<v Speaker 1>I want to provide the ability for them

00:18:33.330 --> 00:18:36.434
<v Speaker 1>to call Postgres APIs, issue the APIs, etcetera,

00:18:36.515 --> 00:18:38.115
<v Speaker 1>then you just add on the components as

00:18:38.115 --> 00:18:40.435
<v Speaker 1>part of the bootstrap. So every WebAssembly module

00:18:40.435 --> 00:18:42.675
<v Speaker 1>that you run, you get you you kind

00:18:42.675 --> 00:18:45.875
<v Speaker 1>of remove that ambient privilege. Right? Because I'm

00:18:45.875 --> 00:18:48.195
<v Speaker 1>a POSIX container Linux based process, I can

00:18:48.195 --> 00:18:49.635
<v Speaker 1>speak to every network in the world. I

00:18:49.635 --> 00:18:51.490
<v Speaker 1>can speak to all the file systems. I

00:18:51.490 --> 00:18:53.410
<v Speaker 1>can read memory and all that stuff. But

00:18:53.410 --> 00:18:55.010
<v Speaker 1>the sandbox, you have to be very explicit

00:18:55.010 --> 00:18:57.730
<v Speaker 1>and say, actually, you can only speak HTTP.

00:18:57.730 --> 00:18:59.010
<v Speaker 1>And we only used to speak to these

00:18:59.010 --> 00:19:01.010
<v Speaker 1>domains, and you can only speak to Postgres,

00:19:01.010 --> 00:19:02.450
<v Speaker 1>but you can only speak to these tables

00:19:02.450 --> 00:19:05.215
<v Speaker 1>or these databases as issues or this all

00:19:05.215 --> 00:19:08.335
<v Speaker 1>becomes infrastructure platform stuff. Your application developers don't

00:19:08.335 --> 00:19:10.654
<v Speaker 1>care. It's just do can I can I

00:19:10.654 --> 00:19:11.934
<v Speaker 1>speak to this table? That's all I really

00:19:11.934 --> 00:19:13.294
<v Speaker 1>want. Can I get rows from it? Can

00:19:13.294 --> 00:19:15.375
<v Speaker 1>I can I pull down what is my

00:19:15.375 --> 00:19:17.134
<v Speaker 1>IP.com? Whatever. Right?

00:19:17.375 --> 00:19:18.575
<v Speaker 1>I I think that's a

00:19:19.300 --> 00:19:21.060
<v Speaker 1>a strong distinction between where we are to

00:19:21.060 --> 00:19:21.539
<v Speaker 1>see

00:19:22.020 --> 00:19:23.860
<v Speaker 1>with the service development. It's very different, but

00:19:23.860 --> 00:19:26.580
<v Speaker 2>I think it's very powerful. Gotcha. So so

00:19:26.580 --> 00:19:28.740
<v Speaker 2>let me just just explain,

00:19:28.740 --> 00:19:30.500
<v Speaker 2>like, my background. Why am I the world

00:19:30.500 --> 00:19:31.860
<v Speaker 2>the biggest WebAssembly

00:19:31.860 --> 00:19:32.659
<v Speaker 2>skeptic,

00:19:32.980 --> 00:19:35.835
<v Speaker 2>which, you know, like, like, I I I

00:19:35.835 --> 00:19:38.155
<v Speaker 2>am proudly wearing this badge, but not because

00:19:38.155 --> 00:19:41.035
<v Speaker 2>I know much about WebAssembly, but more like,

00:19:41.035 --> 00:19:43.835
<v Speaker 2>you know, when you are on Twitter and

00:19:43.835 --> 00:19:46.235
<v Speaker 2>when you're reading news, there are many things

00:19:46.235 --> 00:19:47.915
<v Speaker 2>come come come at you. And then you

00:19:47.915 --> 00:19:49.540
<v Speaker 2>have to sort of put them into little

00:19:49.540 --> 00:19:51.780
<v Speaker 2>buckets. This is important. This could be important.

00:19:52.020 --> 00:19:54.340
<v Speaker 2>This is absolutely not important. Like, you know,

00:19:54.340 --> 00:19:56.500
<v Speaker 2>you put crypto in certain boxes as well.

00:19:56.740 --> 00:19:59.220
<v Speaker 2>And then here comes WebAssembly and and then

00:19:59.220 --> 00:20:01.220
<v Speaker 2>I and, you know, as as a person

00:20:01.220 --> 00:20:03.620
<v Speaker 2>who is like vested into in in in

00:20:03.075 --> 00:20:06.514
<v Speaker 2>containers and in in platform engineering and Kubernetes

00:20:06.514 --> 00:20:07.474
<v Speaker 2>and all that,

00:20:07.875 --> 00:20:09.475
<v Speaker 2>obviously, you have to be on the lookout

00:20:09.475 --> 00:20:11.875
<v Speaker 2>of what's coming and and and what's gonna

00:20:11.875 --> 00:20:15.475
<v Speaker 2>change this this ecosystem and and whether WebAssembly

00:20:15.475 --> 00:20:18.340
<v Speaker 2>is something I should, like, focus on, like,

00:20:18.340 --> 00:20:20.740
<v Speaker 2>very much or it will be handled for

00:20:20.740 --> 00:20:23.059
<v Speaker 2>me by the tools I have already. And

00:20:23.059 --> 00:20:24.660
<v Speaker 2>that's sort of the question I'm I'm trying

00:20:24.660 --> 00:20:26.900
<v Speaker 2>to gauge here. And also, like, a very

00:20:26.900 --> 00:20:29.620
<v Speaker 2>similar situation I was in, like, six five,

00:20:29.620 --> 00:20:32.295
<v Speaker 2>six years ago, 02/1718,

00:20:32.295 --> 00:20:33.655
<v Speaker 2>then Lambda,

00:20:33.655 --> 00:20:35.335
<v Speaker 2>Amazon Lambda came out and there was a

00:20:35.335 --> 00:20:36.774
<v Speaker 2>huge push. Like, everything

00:20:37.335 --> 00:20:39.095
<v Speaker 2>everything is gonna be a function. Everything is

00:20:39.095 --> 00:20:42.215
<v Speaker 2>gonna be Lambda and your containers are already,

00:20:42.455 --> 00:20:44.615
<v Speaker 2>deprecated even though you haven't really used them

00:20:44.615 --> 00:20:47.289
<v Speaker 2>in production. And then, you know, you you

00:20:47.289 --> 00:20:49.289
<v Speaker 2>have to sort of put these news somewhere,

00:20:49.289 --> 00:20:51.690
<v Speaker 2>and, and then I put Lambda into the,

00:20:51.690 --> 00:20:54.330
<v Speaker 2>yeah. Well, could be useful for certain things

00:20:54.330 --> 00:20:55.450
<v Speaker 2>kind of box,

00:20:55.690 --> 00:20:58.090
<v Speaker 2>but, but not for me, kind of box.

00:20:58.090 --> 00:21:00.425
<v Speaker 2>And and I'm just following the the the

00:21:00.425 --> 00:21:03.145
<v Speaker 2>WebAssembly news from a certain distance. And then

00:21:03.145 --> 00:21:05.065
<v Speaker 2>when I'm hearing, you know, like news, I

00:21:05.065 --> 00:21:07.545
<v Speaker 2>try to sort of, like, match against my

00:21:07.545 --> 00:21:08.585
<v Speaker 2>previous assumption.

00:21:08.825 --> 00:21:11.385
<v Speaker 2>Does it change something? Does it, like, reassure

00:21:12.265 --> 00:21:15.070
<v Speaker 2>me? And and and I'm picking up some

00:21:15.070 --> 00:21:17.070
<v Speaker 2>some news here and there. And and the

00:21:17.070 --> 00:21:18.669
<v Speaker 2>thing that you said as well, that WebAssembly

00:21:18.669 --> 00:21:20.350
<v Speaker 2>is more like an SDK. So it's it

00:21:20.350 --> 00:21:21.949
<v Speaker 2>won't be like a general purpose

00:21:22.110 --> 00:21:23.629
<v Speaker 2>application modernization

00:21:23.629 --> 00:21:24.590
<v Speaker 2>platform.

00:21:24.590 --> 00:21:26.909
<v Speaker 2>It's more like a a really cool tool

00:21:26.909 --> 00:21:29.955
<v Speaker 2>that allows you to do amazing things like

00:21:29.955 --> 00:21:33.395
<v Speaker 2>much less hassle than with containers. And overall,

00:21:33.395 --> 00:21:35.075
<v Speaker 2>you can have a much better experience than

00:21:35.075 --> 00:21:36.515
<v Speaker 2>all the container people.

00:21:36.835 --> 00:21:38.435
<v Speaker 2>But it's you have to be sort of

00:21:38.435 --> 00:21:40.435
<v Speaker 2>in a in a privileged position to actually

00:21:40.435 --> 00:21:43.970
<v Speaker 2>use these technologies or you're you're you're you're

00:21:43.970 --> 00:21:46.370
<v Speaker 2>getting where I'm I'm I'm trying to go

00:21:46.370 --> 00:21:47.249
<v Speaker 2>with this. Right?

00:21:47.730 --> 00:21:50.210
<v Speaker 1>Yeah. Don't imagine it's an easy sale.

00:21:50.450 --> 00:21:52.369
<v Speaker 1>Like, I can imagine Laura

00:21:52.370 --> 00:21:54.130
<v Speaker 1>going back into the office tomorrow and going,

00:21:54.130 --> 00:21:56.785
<v Speaker 1>I just had this amazing conversation about WebAssembly,

00:21:56.785 --> 00:21:58.864
<v Speaker 1>and we should just rewrite everything now. Like,

00:21:59.664 --> 00:22:01.745
<v Speaker 1>it's just Everybody's gonna look at me like

00:22:01.745 --> 00:22:02.864
<v Speaker 0>I grew three heads.

00:22:03.184 --> 00:22:05.424
<v Speaker 0>I mean, like, the the fact that I'm

00:22:05.424 --> 00:22:07.745
<v Speaker 0>looking at is so there's a couple things.

00:22:07.745 --> 00:22:10.260
<v Speaker 0>One, every time somebody comes up with something

00:22:10.260 --> 00:22:11.460
<v Speaker 0>that's gonna revolutionize

00:22:11.460 --> 00:22:13.940
<v Speaker 0>the system, my question always is,

00:22:14.260 --> 00:22:17.140
<v Speaker 0>why are we making another tool versus dealing

00:22:17.140 --> 00:22:18.979
<v Speaker 0>with some of the underlying problems?

00:22:19.140 --> 00:22:20.580
<v Speaker 0>Now in this case, it does feel like

00:22:20.580 --> 00:22:22.340
<v Speaker 0>it's dealing with some of the underlying problems,

00:22:22.340 --> 00:22:23.059
<v Speaker 0>absolutely.

00:22:23.299 --> 00:22:23.779
<v Speaker 0>But

00:22:24.715 --> 00:22:27.355
<v Speaker 0>I'm I'm always a little skeptical when somebody

00:22:27.355 --> 00:22:30.154
<v Speaker 0>says, here, just use this tool, and it

00:22:30.154 --> 00:22:32.875
<v Speaker 0>fixes your problem. Always skeptical of that because

00:22:32.875 --> 00:22:35.434
<v Speaker 0>to me, you're just creating more problems. It's

00:22:35.434 --> 00:22:36.955
<v Speaker 0>kinda like the x k c d except

00:22:36.955 --> 00:22:37.434
<v Speaker 0>backwards.

00:22:37.880 --> 00:22:39.240
<v Speaker 0>You know, how many standards do we have?

00:22:39.240 --> 00:22:40.920
<v Speaker 0>Oh, we have another standard. Well, it's how

00:22:40.920 --> 00:22:42.200
<v Speaker 0>many problems do we have? Oh, we can

00:22:42.200 --> 00:22:43.800
<v Speaker 0>make it so it's only one problem. No.

00:22:43.800 --> 00:22:45.720
<v Speaker 0>Now we just added another problem to it.

00:22:45.960 --> 00:22:46.600
<v Speaker 0>So

00:22:47.320 --> 00:22:49.480
<v Speaker 0>I'm I'm always a little worried about that

00:22:49.480 --> 00:22:52.455
<v Speaker 0>because to me, it's more about we're abstracting

00:22:52.455 --> 00:22:54.855
<v Speaker 0>away so many layers as we as we

00:22:54.855 --> 00:22:57.174
<v Speaker 0>move into containerization and things like that.

00:22:57.575 --> 00:22:59.895
<v Speaker 0>As we've as we have moved into containerization,

00:22:59.895 --> 00:23:01.975
<v Speaker 0>we attempted to abstract away networking.

00:23:02.055 --> 00:23:03.575
<v Speaker 0>Well, we added virtual networking.

00:23:04.210 --> 00:23:06.610
<v Speaker 0>Good luck remembering both. We, you know, we

00:23:06.610 --> 00:23:08.450
<v Speaker 0>try to do all of these different things.

00:23:08.450 --> 00:23:10.530
<v Speaker 0>So when I hear that, okay. Well, we're

00:23:10.530 --> 00:23:12.290
<v Speaker 0>now taking all these things and breaking them

00:23:12.290 --> 00:23:14.370
<v Speaker 0>out into modules that now you can, like,

00:23:14.370 --> 00:23:16.050
<v Speaker 0>plug and play and change all this. I'm

00:23:16.050 --> 00:23:18.385
<v Speaker 0>like, okay. So we have regular networking, virtual

00:23:18.385 --> 00:23:20.065
<v Speaker 0>networking. Now do we have another version of

00:23:20.065 --> 00:23:22.145
<v Speaker 0>networking? Is it always gonna be DNS in

00:23:22.145 --> 00:23:25.265
<v Speaker 0>the end? Like, that's always my question when

00:23:25.265 --> 00:23:28.225
<v Speaker 0>I see these, especially thinking through all of

00:23:28.225 --> 00:23:30.920
<v Speaker 0>the different layers beyond just I'm developing my

00:23:30.920 --> 00:23:33.080
<v Speaker 0>application to how am I gonna run it?

00:23:33.080 --> 00:23:34.920
<v Speaker 0>How am I gonna maintain it? What infrastructure

00:23:34.920 --> 00:23:36.519
<v Speaker 0>do I need to be on top of?

00:23:36.760 --> 00:23:38.920
<v Speaker 0>How does this affect that infrastructure? What am

00:23:38.920 --> 00:23:41.080
<v Speaker 0>I gonna do here? So that's my question

00:23:41.080 --> 00:23:41.800
<v Speaker 0>to you is

00:23:42.405 --> 00:23:44.645
<v Speaker 0>why are we making another tool, and do

00:23:44.645 --> 00:23:46.565
<v Speaker 0>we really need a platform for any of

00:23:46.565 --> 00:23:49.205
<v Speaker 0>this? Like, maybe I'm just going down the

00:23:49.205 --> 00:23:51.525
<v Speaker 0>rabbit hole here, but I'll ask this to

00:23:51.525 --> 00:23:52.645
<v Speaker 0>both of you because both of you are

00:23:52.645 --> 00:23:54.325
<v Speaker 0>talking about platforms like they're the best thing

00:23:54.325 --> 00:23:56.245
<v Speaker 0>ever, and my response is, why?

00:23:57.790 --> 00:23:58.350
<v Speaker 0>So,

00:23:58.750 --> 00:24:00.590
<v Speaker 0>you know, when it comes to WebAssembly, that's

00:24:00.590 --> 00:24:02.670
<v Speaker 0>part of where my skepticism comes in. And

00:24:02.670 --> 00:24:04.350
<v Speaker 0>that's why I'm in the neutral zone of,

00:24:04.350 --> 00:24:06.510
<v Speaker 0>like, cautiously optimistic that maybe it'll fix some

00:24:06.510 --> 00:24:09.390
<v Speaker 0>things, but what new problems is it actually

00:24:09.075 --> 00:24:10.355
<v Speaker 0>introducing to me? Yeah. You were in a

00:24:10.355 --> 00:24:12.274
<v Speaker 1>neutral zone, but now it's like, et to

00:24:12.274 --> 00:24:14.755
<v Speaker 1>Laura. You've just went complete build skeptic on

00:24:14.755 --> 00:24:15.874
<v Speaker 1>me. So

00:24:16.995 --> 00:24:17.394
<v Speaker 0>I

00:24:18.034 --> 00:24:20.355
<v Speaker 0>am playing the devil's advocate here. Let's hear

00:24:20.355 --> 00:24:20.914
<v Speaker 0>it.

00:24:21.635 --> 00:24:23.810
<v Speaker 1>So let's let's address all of these things

00:24:23.810 --> 00:24:25.170
<v Speaker 1>at the same time. I'm gonna do my

00:24:25.170 --> 00:24:27.890
<v Speaker 1>best. So, Lasse mentioned serverless. Right?

00:24:28.450 --> 00:24:30.050
<v Speaker 1>I think you were right to be skeptical

00:24:30.050 --> 00:24:31.090
<v Speaker 1>about serverless.

00:24:31.410 --> 00:24:33.730
<v Speaker 1>The idea like, serverless was was really promising

00:24:33.730 --> 00:24:35.250
<v Speaker 1>when Lambda launched. The idea is that we

00:24:35.250 --> 00:24:37.170
<v Speaker 1>could take JavaScript codes, run it in a

00:24:37.170 --> 00:24:39.945
<v Speaker 1>VA isolate, super fast performance,

00:24:40.185 --> 00:24:42.345
<v Speaker 1>do lots of really good things. It's amazing.

00:24:42.665 --> 00:24:43.385
<v Speaker 1>However,

00:24:43.865 --> 00:24:46.425
<v Speaker 1>people wanted to do more in Lambda. And

00:24:46.425 --> 00:24:49.065
<v Speaker 1>now Lambdas are essentially they started doing, like,

00:24:49.065 --> 00:24:50.760
<v Speaker 1>container layer stuff where you could, like, pull

00:24:50.760 --> 00:24:53.080
<v Speaker 1>layers from containers and bootstrapping them, and so

00:24:53.080 --> 00:24:55.640
<v Speaker 1>you could run other commands, use other languages.

00:24:56.040 --> 00:24:58.440
<v Speaker 1>Now they're all running in, like, Firecracker virtual

00:24:58.440 --> 00:24:59.160
<v Speaker 1>machines.

00:24:59.960 --> 00:25:01.480
<v Speaker 1>And it's really just got to the point

00:25:01.480 --> 00:25:03.800
<v Speaker 1>where you could do some really powerful stuff

00:25:03.345 --> 00:25:04.784
<v Speaker 1>with it, but you then have to kinda

00:25:04.784 --> 00:25:07.025
<v Speaker 1>go all in on AWS. And that means

00:25:07.025 --> 00:25:09.905
<v Speaker 1>paying for other managed services using their VPCs,

00:25:09.905 --> 00:25:12.945
<v Speaker 1>using their managed databases, using their everything. Is

00:25:12.945 --> 00:25:14.865
<v Speaker 1>it right? I'm not a big fan of

00:25:14.865 --> 00:25:17.679
<v Speaker 1>that approach. I think that's probably helped several

00:25:17.679 --> 00:25:19.040
<v Speaker 1>of us back. Now we do have open

00:25:19.040 --> 00:25:21.360
<v Speaker 1>source things, but they're all container based. And

00:25:21.360 --> 00:25:23.280
<v Speaker 1>again, we can't fix the code start time

00:25:23.280 --> 00:25:25.040
<v Speaker 1>with the containers. Mean, speak to Alex Ellis.

00:25:25.040 --> 00:25:26.320
<v Speaker 1>He's been trying to fix this for open

00:25:26.320 --> 00:25:28.160
<v Speaker 1>fast for, like, what, seven years.

00:25:29.165 --> 00:25:31.405
<v Speaker 1>The problem is they have to start using

00:25:31.405 --> 00:25:32.924
<v Speaker 1>proxies in the containers

00:25:33.005 --> 00:25:35.565
<v Speaker 1>to then keep your containers long running and

00:25:35.565 --> 00:25:37.565
<v Speaker 1>scaling them on demand based on traffic. And

00:25:37.565 --> 00:25:39.005
<v Speaker 1>there's a whole bunch of complexity there in

00:25:39.005 --> 00:25:39.725
<v Speaker 1>that too.

00:25:40.205 --> 00:25:42.445
<v Speaker 1>And if we just use WebAssembly, people can

00:25:42.445 --> 00:25:44.605
<v Speaker 1>write in their own languages, compile to common

00:25:44.340 --> 00:25:46.419
<v Speaker 1>target, be in retro components, and you get

00:25:46.419 --> 00:25:47.859
<v Speaker 1>a lot of the benefits. However,

00:25:48.340 --> 00:25:50.419
<v Speaker 1>I don't think applications should be full serverless.

00:25:50.419 --> 00:25:53.059
<v Speaker 1>I don't think applications should be full WebAssembly

00:25:53.059 --> 00:25:55.460
<v Speaker 1>either, which does resemble the serverless model. Right?

00:25:55.460 --> 00:25:57.220
<v Speaker 1>Request and spin it up, shut it down,

00:25:57.635 --> 00:25:58.755
<v Speaker 1>keep on trucking.

00:25:59.555 --> 00:26:01.715
<v Speaker 1>I think we still need containers. I still

00:26:01.875 --> 00:26:04.195
<v Speaker 1>I'm never gonna run a WebAssembly database. I

00:26:04.195 --> 00:26:05.795
<v Speaker 1>don't think so at least anyway. I mean,

00:26:05.795 --> 00:26:07.475
<v Speaker 1>I'm always gonna use post credits and that's

00:26:07.475 --> 00:26:09.315
<v Speaker 1>gonna be a long running container based application

00:26:09.315 --> 00:26:12.070
<v Speaker 1>that does Linux file system stuff. I want

00:26:12.070 --> 00:26:14.070
<v Speaker 1>that to be performing. That means hooking into

00:26:14.070 --> 00:26:15.350
<v Speaker 1>the kernel and doing all bunch of other

00:26:15.350 --> 00:26:18.390
<v Speaker 1>things. Same stream processing, you know, Kafka's red

00:26:18.390 --> 00:26:20.390
<v Speaker 1>pandas, all this other stuff. And if it

00:26:20.390 --> 00:26:21.990
<v Speaker 1>was state, I probably would just want it

00:26:21.990 --> 00:26:22.950
<v Speaker 1>to be in the container.

00:26:23.190 --> 00:26:25.430
<v Speaker 1>But I think user facing stuff, asynchronous stuff,

00:26:25.430 --> 00:26:28.375
<v Speaker 1>reactive event driven stuff, probably can and hopefully

00:26:28.375 --> 00:26:31.095
<v Speaker 1>will be at some point built on WebAssembly's

00:26:31.095 --> 00:26:31.735
<v Speaker 1>parameters.

00:26:32.055 --> 00:26:33.415
<v Speaker 1>But that's from the cloud native point of

00:26:33.415 --> 00:26:35.654
<v Speaker 1>view. I'm gonna loop it right back again

00:26:35.655 --> 00:26:37.335
<v Speaker 1>to, like, speak about Gimlet in a weird

00:26:37.335 --> 00:26:40.215
<v Speaker 1>way. It's like you're kinda talking about WebAssembly

00:26:40.215 --> 00:26:42.850
<v Speaker 1>skepticism. But WebAssembly doesn't need to just be

00:26:42.850 --> 00:26:45.650
<v Speaker 1>like serverless functions. It can actually be used

00:26:45.650 --> 00:26:47.330
<v Speaker 1>to extend applications.

00:26:47.810 --> 00:26:50.850
<v Speaker 1>Like, imagine being able to run your Gimlet

00:26:50.850 --> 00:26:53.250
<v Speaker 1>container inside of your Kubernetes cluster and you

00:26:53.250 --> 00:26:55.405
<v Speaker 1>want to allow people like me who, you

00:26:55.405 --> 00:26:56.845
<v Speaker 1>know, I'm gonna use Gimlet and do this

00:26:56.845 --> 00:26:59.165
<v Speaker 1>thing. But to change the behavior, extend the

00:26:59.165 --> 00:27:02.045
<v Speaker 1>functionality, build in different source transformations to the

00:27:02.045 --> 00:27:03.885
<v Speaker 1>the entire GitHub's pipeline, whatever.

00:27:04.365 --> 00:27:05.805
<v Speaker 1>You don't wanna just say cars and bring

00:27:05.805 --> 00:27:08.720
<v Speaker 1>in more containers. It's just over very bloated.

00:27:08.720 --> 00:27:10.879
<v Speaker 1>But you could provide a WebAssembly module with

00:27:10.879 --> 00:27:12.559
<v Speaker 1>a certain interface and say, I'm gonna call

00:27:12.559 --> 00:27:14.159
<v Speaker 1>this function in your module. I'm gonna pass

00:27:14.159 --> 00:27:15.360
<v Speaker 1>you on a string of bytes, which is

00:27:15.360 --> 00:27:17.200
<v Speaker 1>all the YAML. You can do your transformations

00:27:17.200 --> 00:27:19.039
<v Speaker 1>and then spit it back out. And we're

00:27:19.039 --> 00:27:20.320
<v Speaker 1>seeing this with desktop applications.

00:27:21.315 --> 00:27:23.634
<v Speaker 1>Will Versus code be WebAssembly extension point at

00:27:23.634 --> 00:27:25.394
<v Speaker 1>some point in the future? Yes.

00:27:26.034 --> 00:27:28.034
<v Speaker 1>Helix, one of the terminal

00:27:28.674 --> 00:27:31.955
<v Speaker 1>editors has a WebAssembly in potential. There's Zellage,

00:27:31.955 --> 00:27:33.955
<v Speaker 1>which is a terminal multiplexer retina rust that

00:27:33.955 --> 00:27:35.235
<v Speaker 1>has a WebAssembly extension point.

00:27:36.390 --> 00:27:37.510
<v Speaker 1>I think it's just a really

00:27:38.310 --> 00:27:40.310
<v Speaker 1>because that runtime is so ubiquitous, it doesn't

00:27:40.310 --> 00:27:42.310
<v Speaker 1>rely on Linux or architectures or anything like

00:27:42.310 --> 00:27:44.550
<v Speaker 1>that. We can stick it anywhere and everywhere.

00:27:44.550 --> 00:27:46.470
<v Speaker 1>Like, your iOS and your Android phones could

00:27:46.470 --> 00:27:48.070
<v Speaker 1>all be running WebAssembly at some point under

00:27:48.070 --> 00:27:49.430
<v Speaker 1>the hood with a send wrapper and a

00:27:49.430 --> 00:27:50.950
<v Speaker 1>thread that's just the native components.

00:27:52.184 --> 00:27:54.905
<v Speaker 1>So I think the versatility of it pushes

00:27:54.905 --> 00:27:56.825
<v Speaker 1>it beyond what we've seen with Lambda and

00:27:56.825 --> 00:27:59.225
<v Speaker 1>serverless. It could still provide that style of

00:27:59.225 --> 00:28:00.744
<v Speaker 1>functionality and execution,

00:28:01.145 --> 00:28:03.145
<v Speaker 1>but the promise is much more vast and

00:28:03.145 --> 00:28:04.745
<v Speaker 1>I think that will appeal to developers.

00:28:05.340 --> 00:28:06.940
<v Speaker 1>Not that you can ever learn, a single

00:28:06.940 --> 00:28:09.820
<v Speaker 1>language and a single completion target and build

00:28:09.820 --> 00:28:11.340
<v Speaker 1>every application of the world, but I think

00:28:11.340 --> 00:28:14.140
<v Speaker 1>WebAssembly gets you pretty close. Yeah. I I

00:28:14.140 --> 00:28:16.059
<v Speaker 0>do I do like the idea that

00:28:16.460 --> 00:28:18.540
<v Speaker 0>someone who has learned a language and learned

00:28:18.540 --> 00:28:20.635
<v Speaker 0>it well, not like just, you know, taking

00:28:20.635 --> 00:28:22.795
<v Speaker 0>a boot camp, but learned it really, really

00:28:22.795 --> 00:28:24.795
<v Speaker 0>well, will be able to actually build something

00:28:24.795 --> 00:28:27.115
<v Speaker 0>without having to know all about virtualization and

00:28:27.115 --> 00:28:29.035
<v Speaker 0>containers and this and that and the other,

00:28:29.275 --> 00:28:31.355
<v Speaker 0>or how AWS works, how to find your

00:28:31.355 --> 00:28:33.435
<v Speaker 0>way through all the AWS mess and just

00:28:33.435 --> 00:28:35.350
<v Speaker 0>deploy some kind of serverless thing. I do

00:28:35.350 --> 00:28:36.870
<v Speaker 0>like that idea. That is the one thing

00:28:36.870 --> 00:28:38.870
<v Speaker 0>that I was gonna say is probably the

00:28:38.870 --> 00:28:41.269
<v Speaker 0>biggest benefit to WebAssembly to me is that

00:28:41.429 --> 00:28:43.510
<v Speaker 0>it removes a lot of roadblocks from people

00:28:43.510 --> 00:28:45.909
<v Speaker 0>trying to get something out the door or,

00:28:45.909 --> 00:28:48.230
<v Speaker 0>like, people wanting to work. Like, I'm a

00:28:48.805 --> 00:28:51.205
<v Speaker 0>I'm a Python person. David's a Go person.

00:28:51.205 --> 00:28:52.965
<v Speaker 1>I'm not a Go person. Mostly.

00:28:53.045 --> 00:28:55.445
<v Speaker 1>You take that back. Okay. Fine. Pick a

00:28:55.445 --> 00:28:58.245
<v Speaker 0>language. I'm just trying to pick something. I'm

00:28:58.245 --> 00:28:59.765
<v Speaker 0>trying to help you here, dude.

00:29:01.240 --> 00:29:02.919
<v Speaker 0>But going through and saying, like, if the

00:29:02.919 --> 00:29:05.639
<v Speaker 0>two of us wanna build a application together,

00:29:05.880 --> 00:29:07.240
<v Speaker 0>I can work in my language because I

00:29:07.240 --> 00:29:08.600
<v Speaker 0>know it very well. David can work in

00:29:08.600 --> 00:29:10.440
<v Speaker 0>his language because he knows it very well,

00:29:10.440 --> 00:29:12.440
<v Speaker 0>and we can compile something together. I do

00:29:12.440 --> 00:29:14.279
<v Speaker 0>like that without having to know about containers

00:29:14.279 --> 00:29:15.799
<v Speaker 0>and how to make everything work in between.

00:29:16.225 --> 00:29:18.304
<v Speaker 0>That's kinda nice. Yeah. Definitely.

00:29:19.345 --> 00:29:20.705
<v Speaker 1>I have written a lot of Go code

00:29:20.705 --> 00:29:21.904
<v Speaker 1>just for the record. I'm not saying that

00:29:21.904 --> 00:29:23.904
<v Speaker 1>for bad about Go. I know. I I

00:29:23.904 --> 00:29:25.825
<v Speaker 1>do like writing It's mostly because when David

00:29:25.825 --> 00:29:27.105
<v Speaker 0>and I worked together, it was one of

00:29:27.105 --> 00:29:28.784
<v Speaker 0>these things. Like, whenever my Go broke, I

00:29:28.784 --> 00:29:30.670
<v Speaker 0>went to David and went, help me. It's

00:29:30.670 --> 00:29:32.270
<v Speaker 0>not working. Well, yeah, I'm not in the

00:29:32.270 --> 00:29:34.030
<v Speaker 1>unfortunate position that I work with so many

00:29:34.030 --> 00:29:35.550
<v Speaker 1>languages that I'm terrible at all of them.

00:29:35.550 --> 00:29:36.830
<v Speaker 1>Like, I I don't really feel that I'm

00:29:36.830 --> 00:29:38.190
<v Speaker 1>good at any language anymore.

00:29:38.750 --> 00:29:40.190
<v Speaker 1>I I every time I write Rust, I

00:29:40.190 --> 00:29:41.230
<v Speaker 1>put Go in there. Every time I write

00:29:41.230 --> 00:29:42.350
<v Speaker 1>Go, there's some Rust in there. And every

00:29:42.350 --> 00:29:43.950
<v Speaker 1>time I write some PHP, there's some Haskell.

00:29:43.950 --> 00:29:45.695
<v Speaker 1>And I'm just like, can't remember how to

00:29:45.695 --> 00:29:47.375
<v Speaker 1>do anything in any language at all. But

00:29:47.375 --> 00:29:48.815
<v Speaker 1>that So what happens when you try to

00:29:48.815 --> 00:29:49.615
<v Speaker 0>write Python?

00:29:49.935 --> 00:29:51.375
<v Speaker 1>I I mean, that's when I just asked

00:29:51.375 --> 00:29:52.174
<v Speaker 1>you for help.

00:29:55.375 --> 00:29:57.135
<v Speaker 1>I can't even keep up with Python. Like,

00:29:57.135 --> 00:29:59.420
<v Speaker 1>I was told that is no longer relevant.

00:29:59.420 --> 00:30:01.420
<v Speaker 1>I should be using poetry. Black's been replaced

00:30:01.420 --> 00:30:03.100
<v Speaker 1>by something called ref, and I'm just like,

00:30:03.100 --> 00:30:04.620
<v Speaker 1>what? Like, the tool chains have changed in

00:30:04.620 --> 00:30:05.980
<v Speaker 1>twelve months. Yep. So

00:30:06.540 --> 00:30:07.740
<v Speaker 0>Yeah. Miracles.

00:30:08.780 --> 00:30:09.580
<v Speaker 0>Anyway,

00:30:09.660 --> 00:30:11.340
<v Speaker 0>sorry. Let's look at told you. Once we

00:30:11.340 --> 00:30:12.620
<v Speaker 1>start talking, we're it's we're not it's not

00:30:12.620 --> 00:30:14.195
<v Speaker 1>even gonna be about WebAssembly anymore. We're just

00:30:14.195 --> 00:30:15.794
<v Speaker 1>gonna go off in some random tangent.

00:30:16.275 --> 00:30:17.715
<v Speaker 1>Alright. I mean, we're how how are we

00:30:17.715 --> 00:30:19.795
<v Speaker 1>feeling about WebAssembly right now? I know I've

00:30:19.795 --> 00:30:21.555
<v Speaker 1>kind of rambled a lot and tried to

00:30:21.555 --> 00:30:23.395
<v Speaker 1>hopefully distill some of the good things about

00:30:23.395 --> 00:30:25.955
<v Speaker 1>WebAssembly. I I mean, I hope it's had

00:30:25.955 --> 00:30:27.955
<v Speaker 1>a positive impact in where we're gonna sit.

00:30:28.630 --> 00:30:30.309
<v Speaker 2>Like me, Laszlo?

00:30:30.390 --> 00:30:31.269
<v Speaker 2>Yeah.

00:30:31.350 --> 00:30:33.350
<v Speaker 2>Yeah. Okay. Sure. So I I like where

00:30:33.350 --> 00:30:35.590
<v Speaker 2>this conversation is going. Containers are not gonna

00:30:35.590 --> 00:30:37.109
<v Speaker 2>be replaced with WebAssembly.

00:30:37.110 --> 00:30:39.109
<v Speaker 2>That's that's a good good

00:30:39.510 --> 00:30:40.869
<v Speaker 2>outcome for me.

00:30:41.429 --> 00:30:43.664
<v Speaker 2>Plus, I think you conferred to me that

00:30:43.664 --> 00:30:46.384
<v Speaker 2>that there are these WebAssembly primitives and then

00:30:46.544 --> 00:30:49.025
<v Speaker 2>you build the castle from from those primitives.

00:30:49.025 --> 00:30:51.424
<v Speaker 2>And and I actually liked the interoperability

00:30:52.705 --> 00:30:53.585
<v Speaker 2>kind of

00:30:54.145 --> 00:30:55.745
<v Speaker 2>use case that you that you described.

00:30:56.220 --> 00:30:57.820
<v Speaker 2>I also like to bring in another use

00:30:57.820 --> 00:30:58.700
<v Speaker 2>case like

00:30:58.860 --> 00:31:02.540
<v Speaker 2>with containers and and Kubernetes and platforms. We

00:31:02.540 --> 00:31:04.540
<v Speaker 2>are all want to build the next Heroku

00:31:04.540 --> 00:31:06.460
<v Speaker 2>or at least for for some time, we

00:31:06.460 --> 00:31:07.820
<v Speaker 2>were trying. Yeah.

00:31:08.140 --> 00:31:10.700
<v Speaker 2>And maybe it's not gonna happen for Kubernetes,

00:31:10.700 --> 00:31:12.755
<v Speaker 2>but it's gonna happen for Web Assembly. I

00:31:12.755 --> 00:31:15.235
<v Speaker 2>I can more easily see that because it's

00:31:15.235 --> 00:31:17.715
<v Speaker 2>a it's a it's a limited problem space

00:31:17.715 --> 00:31:19.475
<v Speaker 2>to solve. There are these primitives and so

00:31:19.475 --> 00:31:20.034
<v Speaker 2>on,

00:31:20.355 --> 00:31:22.595
<v Speaker 2>a lot less ground to cover. So perhaps

00:31:22.595 --> 00:31:24.914
<v Speaker 2>maybe the next Heroku is gonna be WebAssembly.

00:31:24.914 --> 00:31:26.674
<v Speaker 2>And I'm gonna be cool with that.

00:31:26.995 --> 00:31:27.315
<v Speaker 1>Yeah.

00:31:27.960 --> 00:31:29.480
<v Speaker 1>I think it would be a lot easier

00:31:29.480 --> 00:31:31.480
<v Speaker 1>to build the next Rawkode on WebAssembly. I

00:31:31.480 --> 00:31:32.600
<v Speaker 1>mean, if we look at all the people

00:31:32.600 --> 00:31:34.919
<v Speaker 1>trying to build platforms today based on containers,

00:31:34.919 --> 00:31:35.880
<v Speaker 1>I mean, there's a

00:31:36.520 --> 00:31:38.280
<v Speaker 1>I mean, it's it's not easy. Right? Like,

00:31:38.280 --> 00:31:39.960
<v Speaker 1>people give you your code as a container

00:31:39.960 --> 00:31:41.480
<v Speaker 1>and you just run it somewhere and the

00:31:41.480 --> 00:31:43.795
<v Speaker 1>job's done. But, actually, there's a whole lot

00:31:43.795 --> 00:31:45.795
<v Speaker 1>more to it. Like, let's take a look

00:31:45.795 --> 00:31:48.515
<v Speaker 1>at running an application in Kubernetes today, right,

00:31:48.515 --> 00:31:49.715
<v Speaker 1>in 2023.

00:31:49.715 --> 00:31:52.035
<v Speaker 1>Yes. Can you rate a deployment YAML with

00:31:52.035 --> 00:31:54.835
<v Speaker 1>an image tag and just run it? Sure.

00:31:54.835 --> 00:31:56.355
<v Speaker 1>Why not? Is

00:31:56.515 --> 00:31:59.299
<v Speaker 1>that a good idea? Probably not.

00:31:59.620 --> 00:32:02.500
<v Speaker 1>You need network policies. You need seccomp profiles.

00:32:03.140 --> 00:32:06.100
<v Speaker 1>If you have SE Linux, AppArmor, Evan running

00:32:06.100 --> 00:32:07.620
<v Speaker 1>on a host, you have to satisfy those

00:32:07.620 --> 00:32:08.740
<v Speaker 1>constraints too.

00:32:09.060 --> 00:32:10.660
<v Speaker 1>You gotta run your container not as a

00:32:10.660 --> 00:32:13.695
<v Speaker 1>root user. If you then consumes persistent volume

00:32:13.695 --> 00:32:15.695
<v Speaker 1>claims, you've then got to juggle the permissions

00:32:15.695 --> 00:32:17.295
<v Speaker 1>to make sure that you've got great access

00:32:17.295 --> 00:32:18.414
<v Speaker 1>to it if you need it.

00:32:18.815 --> 00:32:19.535
<v Speaker 1>There's

00:32:19.695 --> 00:32:22.095
<v Speaker 1>I mean, that's just you think that your

00:32:22.095 --> 00:32:24.175
<v Speaker 1>service machine, your retry logic for network requests.

00:32:24.870 --> 00:32:26.230
<v Speaker 1>I think WebAssembly,

00:32:26.230 --> 00:32:28.470
<v Speaker 1>a lot of those disappear because the sandbox

00:32:28.470 --> 00:32:31.110
<v Speaker 1>isn't is, you know, is is not politics.

00:32:31.110 --> 00:32:32.950
<v Speaker 1>It's not the Linux kernel. It's not a

00:32:32.950 --> 00:32:36.390
<v Speaker 1>Linux elf binary. It's its own thing. Different

00:32:36.390 --> 00:32:39.190
<v Speaker 1>characteristics is built with sandboxing in mind.

00:32:40.025 --> 00:32:42.105
<v Speaker 1>It's really difficult to do hard things in

00:32:42.105 --> 00:32:44.025
<v Speaker 1>it, which could be a stumbling block too,

00:32:44.025 --> 00:32:45.465
<v Speaker 1>but that's another thing. But

00:32:45.945 --> 00:32:48.025
<v Speaker 1>I do like where, you know, Docker I

00:32:48.025 --> 00:32:49.385
<v Speaker 1>mean, let's in fact, we didn't even address

00:32:49.385 --> 00:32:50.184
<v Speaker 1>that. Right?

00:32:50.745 --> 00:32:52.105
<v Speaker 1>Who invented containers?

00:32:52.105 --> 00:32:52.585
<v Speaker 1>Docker.

00:32:53.240 --> 00:32:55.880
<v Speaker 1>What has every Docker feature request included

00:32:55.880 --> 00:32:56.840
<v Speaker 1>in the last

00:32:57.240 --> 00:33:00.200
<v Speaker 1>12 well, okay. Who made containers acceptable? Wait.

00:33:00.200 --> 00:33:02.840
<v Speaker 1>Who made containers accessible? Okay. Okay. I was

00:33:02.840 --> 00:33:04.280
<v Speaker 0>gonna say, hold on a second. There was

00:33:04.280 --> 00:33:06.455
<v Speaker 0>more to containers before Docker came along, but

00:33:06.455 --> 00:33:08.855
<v Speaker 0>Docker didn't make it as a whole. Before.

00:33:08.855 --> 00:33:10.535
<v Speaker 1>Blah blah blah. Nobody was using them as

00:33:10.535 --> 00:33:12.775
<v Speaker 1>a Google. Come on. So Docker's what put

00:33:12.775 --> 00:33:15.095
<v Speaker 1>it in people's hands. And, you know, if

00:33:15.095 --> 00:33:16.295
<v Speaker 1>we look at the last twelve months of

00:33:16.295 --> 00:33:17.255
<v Speaker 1>Docker releases,

00:33:17.539 --> 00:33:20.100
<v Speaker 1>they're all WebAssembly based. Right? It's all about

00:33:20.100 --> 00:33:21.139
<v Speaker 1>bringing in

00:33:21.380 --> 00:33:24.340
<v Speaker 1>WebAssembly support to Docker desktop, to Docker Compose,

00:33:24.340 --> 00:33:26.980
<v Speaker 1>to the Docker Hub, shipping images with Docker

00:33:26.980 --> 00:33:29.219
<v Speaker 1>build build and push and pull.

00:33:29.380 --> 00:33:32.005
<v Speaker 1>The fact that they are so heavily invested

00:33:32.005 --> 00:33:34.245
<v Speaker 1>in containers, they need containers for them to

00:33:34.245 --> 00:33:36.405
<v Speaker 1>be a profitable successful company, which they've struggled

00:33:36.405 --> 00:33:38.325
<v Speaker 1>with. And they're now investing all this effort

00:33:38.325 --> 00:33:39.365
<v Speaker 1>into WebAssembly.

00:33:39.525 --> 00:33:41.365
<v Speaker 1>It's just that little tick for me that

00:33:41.365 --> 00:33:43.525
<v Speaker 1>this is something that has a bit of

00:33:43.525 --> 00:33:45.580
<v Speaker 1>longevity to it, something that a company like

00:33:45.580 --> 00:33:47.740
<v Speaker 1>Docker is investing in. They see the promise

00:33:47.740 --> 00:33:50.139
<v Speaker 1>of containers and WebAssembly set by site. And

00:33:50.139 --> 00:33:51.820
<v Speaker 1>that's yeah. Like, it's a big tech. I

00:33:51.820 --> 00:33:53.899
<v Speaker 1>think that just affirms everything that I need

00:33:53.899 --> 00:33:54.459
<v Speaker 1>to know

00:33:54.940 --> 00:33:57.820
<v Speaker 1>about my joy of working and promoting WebAssembly

00:33:57.820 --> 00:34:00.455
<v Speaker 1>too. And and just maybe maybe a final

00:34:00.455 --> 00:34:02.615
<v Speaker 2>thought that actually I'm I'm picking up that

00:34:02.615 --> 00:34:04.615
<v Speaker 2>news as well because, of course, I'm I

00:34:04.615 --> 00:34:06.455
<v Speaker 2>have to, like, hedge my bet. Like, I'm

00:34:06.455 --> 00:34:08.215
<v Speaker 2>in containers and, you know, I'm building

00:34:08.534 --> 00:34:10.935
<v Speaker 2>platforms for companies and stuff and I know

00:34:10.935 --> 00:34:14.069
<v Speaker 2>containers. Should I, like, learn the WebAssembly world?

00:34:14.069 --> 00:34:16.630
<v Speaker 2>And and I'm hearing this news that, hey,

00:34:16.630 --> 00:34:17.589
<v Speaker 2>I actually,

00:34:17.589 --> 00:34:19.429
<v Speaker 2>maybe today, I have no idea that I

00:34:19.429 --> 00:34:22.310
<v Speaker 2>could run a WebAssembly container on, you know,

00:34:22.469 --> 00:34:24.630
<v Speaker 2>on on container d or maybe even in

00:34:24.630 --> 00:34:25.190
<v Speaker 2>Kubernetes.

00:34:25.815 --> 00:34:27.895
<v Speaker 2>It's probably not true. So please

00:34:28.375 --> 00:34:30.614
<v Speaker 2>tell me what's the state of this. But

00:34:30.614 --> 00:34:32.695
<v Speaker 2>if if things converge like this,

00:34:32.935 --> 00:34:35.415
<v Speaker 2>that's actually very good for, you know, both

00:34:35.415 --> 00:34:37.255
<v Speaker 2>the old and the new world. So I'm

00:34:37.255 --> 00:34:38.855
<v Speaker 2>I'm pretty pleased with this direction.

00:34:39.389 --> 00:34:40.829
<v Speaker 1>So the good news is that you can

00:34:40.829 --> 00:34:42.829
<v Speaker 1>run your WebAssembly side by side with containers

00:34:42.829 --> 00:34:46.190
<v Speaker 1>and Docker or Kubernetes using the container called

00:34:46.190 --> 00:34:47.389
<v Speaker 1>run Wazee.

00:34:47.389 --> 00:34:48.829
<v Speaker 1>And the way that this works is it

00:34:48.829 --> 00:34:51.150
<v Speaker 1>runs a container with a long running process,

00:34:51.150 --> 00:34:52.750
<v Speaker 1>which is the Wasm run time. So that'll

00:34:52.750 --> 00:34:55.324
<v Speaker 1>be Wasm Edge, Wasm Cloud, Wasm or Wasm

00:34:55.324 --> 00:34:57.165
<v Speaker 1>Time, whatever one you choose to use.

00:34:57.565 --> 00:34:59.805
<v Speaker 1>And at the event, spin up the

00:35:00.365 --> 00:35:03.325
<v Speaker 1>WebAssembly modules and response to request coming in.

00:35:03.325 --> 00:35:06.125
<v Speaker 1>Actually, not dissimilar to what, like, OpenFuzz does

00:35:06.125 --> 00:35:07.085
<v Speaker 1>with their

00:35:09.020 --> 00:35:11.420
<v Speaker 1>Well, it should be proxy that opens and

00:35:11.420 --> 00:35:13.900
<v Speaker 1>runs functions. So it's the kind of the

00:35:13.900 --> 00:35:15.660
<v Speaker 1>best of both. I mean, you still need

00:35:15.660 --> 00:35:17.740
<v Speaker 1>the concept of container for container d. It

00:35:17.740 --> 00:35:19.500
<v Speaker 1>still needs to run a long run-in process

00:35:19.500 --> 00:35:22.060
<v Speaker 1>and hook up networking and handle all the

00:35:22.060 --> 00:35:24.725
<v Speaker 1>permissions and the services and all that all

00:35:24.725 --> 00:35:26.725
<v Speaker 1>that boring stuff. Right? The plumbing.

00:35:27.365 --> 00:35:29.365
<v Speaker 1>But your WebAssembly module just has taken a

00:35:29.365 --> 00:35:30.965
<v Speaker 1>little thing that's inside of it and gets

00:35:30.965 --> 00:35:32.805
<v Speaker 1>executed every time when you request something.

00:35:33.285 --> 00:35:35.125
<v Speaker 1>And it works really well. There's a little

00:35:35.125 --> 00:35:36.565
<v Speaker 1>bit of a faff right now.

00:35:37.210 --> 00:35:39.290
<v Speaker 1>So the container, the shim shims out to

00:35:39.290 --> 00:35:41.210
<v Speaker 1>the host to run the WebAssembly,

00:35:41.210 --> 00:35:43.450
<v Speaker 1>WasmR, WasmTime, etcetera, runtime.

00:35:43.610 --> 00:35:44.810
<v Speaker 1>So you have to make sure that your

00:35:44.810 --> 00:35:47.690
<v Speaker 1>nodes have those binaries available right now. There

00:35:47.690 --> 00:35:49.850
<v Speaker 1>is a project called k Wasm. It's available

00:35:49.850 --> 00:35:51.770
<v Speaker 1>at kWasm.sh

00:35:51.435 --> 00:35:53.755
<v Speaker 1>from the liquid reply people in Germany.

00:35:54.235 --> 00:35:55.595
<v Speaker 1>Runs as a daemon set, and every time

00:35:55.595 --> 00:35:56.955
<v Speaker 1>a new node comes into your cluster, it

00:35:56.955 --> 00:35:58.715
<v Speaker 1>literally just downloads all the binaries and sticks

00:35:58.715 --> 00:36:00.955
<v Speaker 1>them into the user local bin for you.

00:36:01.195 --> 00:36:03.195
<v Speaker 1>Shouldn't need to exist, and they hope to

00:36:03.195 --> 00:36:04.635
<v Speaker 1>deprecate it at some point. But for now,

00:36:04.635 --> 00:36:06.155
<v Speaker 1>it's the easiest way to get started. So,

00:36:06.490 --> 00:36:08.410
<v Speaker 1>yeah, you you kinda can. And you know

00:36:08.410 --> 00:36:09.610
<v Speaker 1>what? It's nice. Like,

00:36:09.930 --> 00:36:13.050
<v Speaker 1>the OCI image that your WebAssembly module is

00:36:13.050 --> 00:36:15.610
<v Speaker 1>kinda pushed with is teeny. It's, like, five

00:36:15.610 --> 00:36:16.250
<v Speaker 1>meg

00:36:16.570 --> 00:36:18.570
<v Speaker 1>to eight meg depending on the complexity of

00:36:18.570 --> 00:36:20.090
<v Speaker 1>your application. At least that's what I've seen

00:36:20.090 --> 00:36:22.075
<v Speaker 1>when I've taken my real world Web Assembly

00:36:22.075 --> 00:36:23.835
<v Speaker 1>and pushed it. I mean, if we compare

00:36:23.835 --> 00:36:25.275
<v Speaker 1>that to a container image,

00:36:25.835 --> 00:36:27.995
<v Speaker 1>it's rare that they're less than what? Fifty,

00:36:27.995 --> 00:36:29.595
<v Speaker 1>sixty meg. And then in the worst case,

00:36:29.595 --> 00:36:31.995
<v Speaker 1>I've seen images with gigs gigs and gigs

00:36:31.995 --> 00:36:34.555
<v Speaker 1>and gigs inside of them. Just because, again,

00:36:35.180 --> 00:36:37.900
<v Speaker 1>optimizing container images is not something that you

00:36:37.900 --> 00:36:41.020
<v Speaker 1>do by default. Right? You do from Ubuntu,

00:36:41.100 --> 00:36:42.940
<v Speaker 1>apt install, everything in the world that I

00:36:42.940 --> 00:36:44.940
<v Speaker 1>need, compel this thing, and then execute a

00:36:44.940 --> 00:36:46.700
<v Speaker 1>tiny little banner at the end. You then

00:36:46.700 --> 00:36:49.545
<v Speaker 1>have to go learn, oh, multistage builds and

00:36:49.545 --> 00:36:51.385
<v Speaker 1>I can chain commands together to remove the

00:36:51.385 --> 00:36:52.745
<v Speaker 1>cache and I can do all these weird

00:36:52.745 --> 00:36:54.985
<v Speaker 1>things. Right? You've been in a container space

00:36:54.985 --> 00:36:56.905
<v Speaker 1>long enough. You've done all of this. You

00:36:56.905 --> 00:36:58.425
<v Speaker 1>have to learn it the hard way. Whereas

00:36:58.425 --> 00:36:59.705
<v Speaker 1>the WebAssembly is just

00:37:00.260 --> 00:37:01.060
<v Speaker 1>build,

00:37:01.060 --> 00:37:03.220
<v Speaker 1>take a little module, off you go. It's

00:37:03.220 --> 00:37:05.780
<v Speaker 1>quite nice. So I'm curious based on everything

00:37:05.780 --> 00:37:08.180
<v Speaker 1>we've said and the fact that, Laszlo, you're

00:37:08.180 --> 00:37:10.980
<v Speaker 1>you're building Gimlet, it's a GitOps platform. Like,

00:37:10.980 --> 00:37:12.660
<v Speaker 1>do you is there anything in your head

00:37:12.660 --> 00:37:15.815
<v Speaker 1>that's thinking WebAssembly could be a value add

00:37:15.815 --> 00:37:18.295
<v Speaker 1>here and that positive? Could I extend Gimlet

00:37:18.295 --> 00:37:20.295
<v Speaker 1>in a way with this? Like, same me

00:37:20.295 --> 00:37:21.734
<v Speaker 1>up to write the first plugin, but I'm

00:37:21.734 --> 00:37:23.734
<v Speaker 1>curious. What do you think WebAssembly could could

00:37:23.734 --> 00:37:24.295
<v Speaker 1>bring to it?

00:37:26.250 --> 00:37:27.130
<v Speaker 2>So

00:37:27.130 --> 00:37:29.290
<v Speaker 2>so I learned a lot. So so I

00:37:29.290 --> 00:37:31.690
<v Speaker 2>I was the world's biggest skeptic not because

00:37:31.690 --> 00:37:33.770
<v Speaker 2>I knew stuff, but but because I'm just

00:37:33.770 --> 00:37:36.090
<v Speaker 2>picking up some news and it's still in

00:37:36.090 --> 00:37:38.490
<v Speaker 2>the same bucket. But you are mentioning some

00:37:38.490 --> 00:37:41.315
<v Speaker 2>use cases, which I don't fully see the,

00:37:41.635 --> 00:37:43.474
<v Speaker 2>the full scale of, like like what can

00:37:43.474 --> 00:37:45.714
<v Speaker 2>be achieved and stuff and how can it

00:37:45.714 --> 00:37:48.275
<v Speaker 2>be utilized. So you definitely,

00:37:48.515 --> 00:37:50.675
<v Speaker 2>put something in my mind. And when I'm

00:37:50.675 --> 00:37:53.450
<v Speaker 2>hearing news, I'm gonna put on this lens

00:37:53.450 --> 00:37:55.530
<v Speaker 2>as well. And I'm gonna try to

00:37:55.849 --> 00:37:58.010
<v Speaker 2>to entertain the thought a little bit more.

00:37:58.010 --> 00:38:00.569
<v Speaker 2>So that's and and honestly, I I learned

00:38:00.569 --> 00:38:03.450
<v Speaker 2>a ton. So it was definitely moving my

00:38:03.450 --> 00:38:06.410
<v Speaker 2>WebAssembly appreciation to the right direction, like to

00:38:06.410 --> 00:38:07.289
<v Speaker 2>the David direction.

00:38:07.895 --> 00:38:10.055
<v Speaker 2>It's still on on that that side of

00:38:10.055 --> 00:38:11.175
<v Speaker 2>the spectrum, but,

00:38:11.895 --> 00:38:12.455
<v Speaker 2>you know,

00:38:12.855 --> 00:38:13.975
<v Speaker 2>it's a it's a step.

00:38:14.375 --> 00:38:17.494
<v Speaker 1>I'll take it. Over you, Laura. There you

00:38:17.494 --> 00:38:17.975
<v Speaker 0>go.

00:38:18.695 --> 00:38:20.615
<v Speaker 0>I'm still cautiously optimistic,

00:38:21.460 --> 00:38:22.900
<v Speaker 0>mostly because I haven't had a chance to

00:38:22.900 --> 00:38:24.420
<v Speaker 0>really play with it yet. I think once

00:38:24.420 --> 00:38:25.620
<v Speaker 0>I get a chance to really get a

00:38:25.860 --> 00:38:27.540
<v Speaker 0>really tough spend some time with it, I

00:38:27.540 --> 00:38:28.820
<v Speaker 0>think is when I'm gonna start

00:38:29.220 --> 00:38:30.900
<v Speaker 0>seeing a lot of the benefits that you're

00:38:30.900 --> 00:38:33.780
<v Speaker 0>talking about. But for now, you can you

00:38:33.780 --> 00:38:35.620
<v Speaker 0>can still put me in the cautiously optimistic

00:38:35.620 --> 00:38:37.025
<v Speaker 0>camp because my

00:38:37.345 --> 00:38:40.065
<v Speaker 0>skeptical ops brain is still kinda like,

00:38:40.465 --> 00:38:42.705
<v Speaker 0>what am I missing here?

00:38:44.705 --> 00:38:47.025
<v Speaker 0>Because it can't be all rainbows and unicorns

00:38:47.025 --> 00:38:48.225
<v Speaker 0>the way he wanna paint it.

00:38:49.180 --> 00:38:50.940
<v Speaker 1>Well, what we could do We'll see. Is

00:38:50.940 --> 00:38:52.700
<v Speaker 1>take something in the calendar for twelve months

00:38:52.700 --> 00:38:55.180
<v Speaker 1>from today where we get back together and

00:38:55.180 --> 00:38:57.420
<v Speaker 1>we see where we are. Right? Alright. I

00:38:57.420 --> 00:38:59.900
<v Speaker 1>mean, I I am very open. There's your

00:38:59.900 --> 00:39:01.580
<v Speaker 0>remind me. Exactly. Right.

00:39:02.635 --> 00:39:04.315
<v Speaker 1>It'll be in my calendar any moment now.

00:39:04.315 --> 00:39:05.995
<v Speaker 1>But, yeah, I think it'd be fun just

00:39:05.995 --> 00:39:07.995
<v Speaker 1>to see what was ready, what was wrong.

00:39:07.995 --> 00:39:10.155
<v Speaker 1>Are we seeing adoption of WebAssembly, it's safe

00:39:10.155 --> 00:39:11.835
<v Speaker 1>by saying containers and Kubernetes?

00:39:12.155 --> 00:39:13.515
<v Speaker 1>I mean, I really hope so. I think

00:39:13.515 --> 00:39:15.275
<v Speaker 1>there's a lot of benefits to people adopting

00:39:15.275 --> 00:39:17.035
<v Speaker 1>this pattern. So we'll see.

00:39:18.039 --> 00:39:18.839
<v Speaker 0>There's

00:39:18.839 --> 00:39:20.520
<v Speaker 0>definitely some stuff there, and it will be

00:39:20.520 --> 00:39:22.440
<v Speaker 0>interesting to see. I think in a hybrid

00:39:22.440 --> 00:39:24.599
<v Speaker 0>cloud world, like, to be brutally honest, like,

00:39:24.599 --> 00:39:26.039
<v Speaker 0>I'm seeing a lot of hybrid cloud world

00:39:26.039 --> 00:39:28.359
<v Speaker 0>and private cloud discussions and

00:39:29.000 --> 00:39:29.960
<v Speaker 0>repatriation

00:39:29.960 --> 00:39:31.160
<v Speaker 0>of workloads,

00:39:31.160 --> 00:39:33.845
<v Speaker 0>especially in enterprises. And I'm just really curious

00:39:33.845 --> 00:39:35.045
<v Speaker 0>to see if this might,

00:39:35.684 --> 00:39:37.684
<v Speaker 0>change some things, maybe get some people off

00:39:37.684 --> 00:39:40.325
<v Speaker 0>of Java in Spring where they've been living

00:39:40.325 --> 00:39:41.845
<v Speaker 0>for decades.

00:39:42.165 --> 00:39:43.365
<v Speaker 2>Probably not.

00:39:43.525 --> 00:39:46.085
<v Speaker 1>I can dream. Please let me dream that

00:39:46.085 --> 00:39:47.605
<v Speaker 2>I don't have to do any more Java.

00:39:48.780 --> 00:39:50.780
<v Speaker 2>So so the good news is you you

00:39:50.780 --> 00:39:53.180
<v Speaker 2>learned Java twenty year or fifteen years ago.

00:39:53.180 --> 00:39:54.540
<v Speaker 2>You learned Spring

00:39:54.540 --> 00:39:56.540
<v Speaker 2>Spring Boot, like, ten years ago, and and

00:39:56.540 --> 00:39:57.980
<v Speaker 2>you can use that knowledge ten years from

00:39:57.980 --> 00:39:59.980
<v Speaker 2>now. Mean, it's it's kinda like still knowing

00:39:59.980 --> 00:40:02.460
<v Speaker 0>Fortran. Right? I can always find a job

00:40:02.460 --> 00:40:03.260
<v Speaker 0>knowing Fortran

00:40:03.645 --> 00:40:06.045
<v Speaker 0>even fifty years from now. Who knows?

00:40:07.325 --> 00:40:10.045
<v Speaker 0>David, here here's my statement. When they make

00:40:10.445 --> 00:40:11.325
<v Speaker 0>Fortran

00:40:11.325 --> 00:40:12.445
<v Speaker 0>a WebAssembly,

00:40:12.445 --> 00:40:13.965
<v Speaker 0>then we know it has

00:40:14.925 --> 00:40:17.245
<v Speaker 0>reached the big time or jumped the shark.

00:40:17.245 --> 00:40:18.045
<v Speaker 0>I'm not sure which one.

00:40:20.170 --> 00:40:21.370
<v Speaker 1>It exists.

00:40:21.370 --> 00:40:22.250
<v Speaker 1>There you go.

00:40:23.690 --> 00:40:24.490
<v Speaker 0>No.

00:40:24.650 --> 00:40:25.450
<v Speaker 0>No.

00:40:28.330 --> 00:40:30.090
<v Speaker 1>Sorry to burst that bubble so quickly, but

00:40:30.090 --> 00:40:32.010
<v Speaker 1>now you're that's it. You're you're converted.

00:40:33.435 --> 00:40:36.235
<v Speaker 1>Yeah. I mean, the language support is ridiculous.

00:40:36.555 --> 00:40:39.435
<v Speaker 1>If you just Google for WebAssembly supported languages.

00:40:39.435 --> 00:40:40.795
<v Speaker 1>Like, the slide I had up, I talked

00:40:40.795 --> 00:40:42.795
<v Speaker 1>two weeks ago, I had 40 languages on

00:40:42.795 --> 00:40:44.315
<v Speaker 1>it, and that was me just picking the

00:40:44.315 --> 00:40:46.395
<v Speaker 1>the best ones and the worst ones. Like,

00:40:46.395 --> 00:40:48.110
<v Speaker 1>the fact that brain fuck can be compelled

00:40:48.110 --> 00:40:49.790
<v Speaker 1>to WebAssembly tells you everything that you need

00:40:49.790 --> 00:40:50.430
<v Speaker 1>to know. So

00:40:51.390 --> 00:40:53.150
<v Speaker 0>It does tell me actually a lot that

00:40:53.150 --> 00:40:54.670
<v Speaker 0>I need to know. Okay.

00:40:55.310 --> 00:40:57.470
<v Speaker 0>Actually, that really does. Alright.

00:40:57.710 --> 00:41:00.605
<v Speaker 0>Loll code? Rockstar? Anyway. I don't think Rawkstar

00:41:00.605 --> 00:41:02.525
<v Speaker 1>does. I I think that's been done. Okay.

00:41:02.525 --> 00:41:04.204
<v Speaker 1>But I'm sure we can hang down and

00:41:04.204 --> 00:41:05.805
<v Speaker 1>tell him to get all over that. So

00:41:05.964 --> 00:41:08.365
<v Speaker 0>There we go. Alright. Awesome. Thank you both

00:41:08.365 --> 00:41:09.885
<v Speaker 1>for entertaining my

00:41:10.365 --> 00:41:12.525
<v Speaker 1>I don't know. Not rants, but, you know,

00:41:13.000 --> 00:41:14.360
<v Speaker 1>WebAssembly,

00:41:14.840 --> 00:41:15.800
<v Speaker 1>admiration,

00:41:15.800 --> 00:41:16.600
<v Speaker 1>adoration,

00:41:16.600 --> 00:41:18.280
<v Speaker 1>whatever the word may be. I'm not entirely

00:41:18.280 --> 00:41:18.840
<v Speaker 1>sure.

00:41:19.400 --> 00:41:21.400
<v Speaker 0>I wanna put little stickers on your video

00:41:21.400 --> 00:41:22.920
<v Speaker 0>of, like, little fan,

00:41:23.000 --> 00:41:24.280
<v Speaker 0>like, signs.

00:41:24.520 --> 00:41:26.120
<v Speaker 1>Yeah. If you if you wanna edit, you

00:41:26.120 --> 00:41:28.360
<v Speaker 1>can feel free. I I'm happy to give

00:41:28.360 --> 00:41:29.195
<v Speaker 1>that up. So,

00:41:29.675 --> 00:41:31.595
<v Speaker 1>Laszlo, do you wanna do you wanna share

00:41:31.595 --> 00:41:33.515
<v Speaker 1>any links to your projects, your Twitters, your

00:41:33.515 --> 00:41:35.435
<v Speaker 1>GitHub, your LinkedIn, anything like that before we

00:41:35.435 --> 00:41:37.595
<v Speaker 1>wrap up today? This is the shameless plug

00:41:37.595 --> 00:41:40.475
<v Speaker 1>moment, so take take it away. Yeah. Sure.

00:41:40.920 --> 00:41:43.080
<v Speaker 0>Shameless plug. Do it. So

00:41:43.400 --> 00:41:45.880
<v Speaker 2>I I only have Twitter, and I'm so

00:41:45.880 --> 00:41:48.200
<v Speaker 2>sorry about that. So that's Laslow CPH.

00:41:48.280 --> 00:41:49.559
<v Speaker 2>And I know there are there are these

00:41:49.559 --> 00:41:51.799
<v Speaker 2>other platforms. And I'm also a Twitter Blue,

00:41:51.799 --> 00:41:52.839
<v Speaker 2>which I don't know how to get rid

00:41:52.839 --> 00:41:55.765
<v Speaker 2>of. So please don't don't judge me. I

00:41:55.765 --> 00:41:57.925
<v Speaker 1>said, like, I did that through. I said,

00:41:57.925 --> 00:41:59.205
<v Speaker 1>don't because I wanted to do it. I

00:41:59.205 --> 00:42:00.805
<v Speaker 1>wanted to sorry. I I wanted to take

00:42:00.805 --> 00:42:02.885
<v Speaker 1>advantage of, like, the more than ten minutes,

00:42:02.885 --> 00:42:04.325
<v Speaker 1>ten eighty p video because I thought, oh,

00:42:04.325 --> 00:42:05.765
<v Speaker 1>I could push all the video through Twitter.

00:42:05.765 --> 00:42:07.445
<v Speaker 1>And then I canceled it because I was

00:42:07.445 --> 00:42:09.200
<v Speaker 1>like, this is shit. And Elon Musk is

00:42:09.200 --> 00:42:11.600
<v Speaker 1>well doing really stupid things with the platform.

00:42:12.079 --> 00:42:14.400
<v Speaker 1>And it it didn't go away. It stuck

00:42:14.400 --> 00:42:15.680
<v Speaker 1>with me. I stopped paying, and I had

00:42:15.680 --> 00:42:17.520
<v Speaker 1>it for, like, three months. Exactly.

00:42:17.520 --> 00:42:19.599
<v Speaker 2>Exactly. It's there. It's there. It's like they're

00:42:19.599 --> 00:42:21.440
<v Speaker 2>reviewing, like, every, I don't know, forever.

00:42:21.924 --> 00:42:24.325
<v Speaker 2>Anyway, so it's Lasso CPH on Twitter and

00:42:24.325 --> 00:42:25.365
<v Speaker 2>Gimlet.io

00:42:25.365 --> 00:42:26.885
<v Speaker 2>on the InterVabs.

00:42:26.885 --> 00:42:29.285
<v Speaker 2>So, please check this out. And, yeah. There

00:42:29.285 --> 00:42:31.125
<v Speaker 0>we go. Thank you for, for having me

00:42:31.125 --> 00:42:33.685
<v Speaker 1>and, teaching us WebAssembly.

00:42:33.765 --> 00:42:36.550
<v Speaker 2>Alright. Appreciate you. Thanks for coming on. Thank

00:42:36.550 --> 00:42:37.350
<v Speaker 2>you, Laura.

00:42:37.750 --> 00:42:39.830
<v Speaker 0>Thanks for joining us. If you wanna keep

00:42:39.830 --> 00:42:42.470
<v Speaker 1>up with us, consider subscribing to the podcast

00:42:42.470 --> 00:42:44.869
<v Speaker 1>on your favorite podcasting app or even go

00:42:44.869 --> 00:42:46.790
<v Speaker 1>to cloudnativecompass.fm.

00:42:47.184 --> 00:42:48.625
<v Speaker 0>And if you want us to talk with

00:42:48.625 --> 00:42:51.505
<v Speaker 0>someone specific or cover a specific topic,

00:42:51.744 --> 00:42:53.825
<v Speaker 0>reach out to us on any social media

00:42:53.825 --> 00:42:54.465
<v Speaker 0>platform.

00:42:54.704 --> 00:42:56.944
<v Speaker 1>Until next time when exploring the cloud native

00:42:56.944 --> 00:42:57.744
<v Speaker 1>landscape

00:42:57.825 --> 00:42:58.705
<v Speaker 1>on 3.

00:42:58.865 --> 00:43:00.545
<v Speaker 0>On 3. 1,

00:43:00.785 --> 00:43:01.345
<v Speaker 1>2,

00:43:01.664 --> 00:43:01.904
<v Speaker 1>3.

00:43:02.600 --> 00:43:04.520
<v Speaker 1>Don't forget your compass. Forget your compass.
