WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 55a9e616-0b59-4344-8d3a-5ae87ed9506f
Created: 2025-04-29T20:26:25.150Z
Duration: 5375.0312
Channels: 1

00:00:47.415 --> 00:00:50.295
<v Speaker 0>Hello and welcome to today's episode of Rawkode

00:00:50.295 --> 00:00:50.695
<v Speaker 0>live.

00:00:51.350 --> 00:00:53.350
<v Speaker 0>Today we're gonna be taking a look at

00:00:53.350 --> 00:00:56.629
<v Speaker 0>behavior driven development test automation and to do

00:00:56.629 --> 00:00:59.110
<v Speaker 0>that I have my favorite friend and BDD

00:00:59.110 --> 00:01:01.909
<v Speaker 0>all around Guduk here in McNulty joining me.

00:01:02.390 --> 00:01:03.989
<v Speaker 0>Hello. Hi, David.

00:01:05.349 --> 00:01:06.950
<v Speaker 1>I'm glad to hear I'm your favorite friend.

00:01:07.965 --> 00:01:10.365
<v Speaker 0>Favorite friend and BDD consultant.

00:01:10.365 --> 00:01:12.604
<v Speaker 0>That was a Oh, okay. Strong

00:01:12.924 --> 00:01:13.564
<v Speaker 0>end.

00:01:13.805 --> 00:01:15.325
<v Speaker 0>Of course, I love spending time with you.

00:01:15.325 --> 00:01:17.405
<v Speaker 0>I learned so much especially around this space

00:01:17.405 --> 00:01:19.325
<v Speaker 0>which is one of those things I really

00:01:19.325 --> 00:01:21.470
<v Speaker 0>wish I was I wish I could do

00:01:21.470 --> 00:01:23.950
<v Speaker 0>it more often but again as a developer

00:01:23.950 --> 00:01:26.909
<v Speaker 0>advocate, I'm not really a product driven person.

00:01:27.950 --> 00:01:29.390
<v Speaker 0>And my role is probably just to hack

00:01:29.390 --> 00:01:30.510
<v Speaker 0>on stuff. So

00:01:32.110 --> 00:01:32.670
<v Speaker 0>tough.

00:01:33.390 --> 00:01:34.590
<v Speaker 1>Yeah. I feel I feel the same way

00:01:34.590 --> 00:01:36.825
<v Speaker 1>really. I do a lot of help teams

00:01:36.825 --> 00:01:38.985
<v Speaker 1>do this. But then I leave again.

00:01:39.785 --> 00:01:40.345
<v Speaker 1>Then

00:01:40.665 --> 00:01:42.425
<v Speaker 1>don't know about you. My career has been

00:01:42.425 --> 00:01:45.385
<v Speaker 1>a a sort of flip flop between working

00:01:45.385 --> 00:01:47.545
<v Speaker 1>on a product long term, doing lots of

00:01:47.545 --> 00:01:48.985
<v Speaker 1>different things. And you get bored of one,

00:01:48.985 --> 00:01:50.425
<v Speaker 1>don't you, and want to

00:01:51.560 --> 00:01:52.520
<v Speaker 1>do the other.

00:01:52.760 --> 00:01:55.640
<v Speaker 0>Yeah. I definitely like to experiment and I'm

00:01:55.640 --> 00:01:57.320
<v Speaker 0>always playing with new things. I was lately

00:01:57.320 --> 00:01:59.320
<v Speaker 0>like I'm a technology magpie.

00:01:59.800 --> 00:02:01.479
<v Speaker 0>So it's not often that I'm just working

00:02:01.479 --> 00:02:03.000
<v Speaker 0>on a product full time. In fact, I

00:02:03.000 --> 00:02:05.635
<v Speaker 0>haven't done in at least three maybe four

00:02:05.635 --> 00:02:06.435
<v Speaker 0>years now

00:02:07.235 --> 00:02:09.634
<v Speaker 0>but now that I'm starting to find a

00:02:09.634 --> 00:02:11.395
<v Speaker 0>lot more use cases for like, I've got

00:02:11.395 --> 00:02:12.915
<v Speaker 0>a couple of open source projects that I'm

00:02:12.915 --> 00:02:14.275
<v Speaker 0>trying to get to a point where they're

00:02:14.275 --> 00:02:16.275
<v Speaker 0>usable by other people and I'm starting to

00:02:16.275 --> 00:02:16.834
<v Speaker 0>think right.

00:02:17.520 --> 00:02:19.600
<v Speaker 0>They're not products that I'm selling but there's

00:02:19.600 --> 00:02:21.760
<v Speaker 0>still something that expose an API and expose

00:02:21.760 --> 00:02:23.360
<v Speaker 0>behaviors that I wanna be able to make

00:02:23.360 --> 00:02:24.640
<v Speaker 0>sure people understand

00:02:24.800 --> 00:02:27.680
<v Speaker 0>not just implicitly but through explicit documentation and

00:02:27.680 --> 00:02:29.280
<v Speaker 0>so far in a series we've

00:02:29.440 --> 00:02:31.760
<v Speaker 0>we've taken this get synced project which is

00:02:32.565 --> 00:02:34.405
<v Speaker 0>supposed to be a project that allows people

00:02:34.405 --> 00:02:36.325
<v Speaker 0>to build their own get up style operators

00:02:36.325 --> 00:02:39.045
<v Speaker 0>and controllers that monitor the status of a

00:02:39.045 --> 00:02:41.925
<v Speaker 0>get repository and then have certain behaviors act

00:02:41.925 --> 00:02:43.525
<v Speaker 0>on that and trying to expose that to

00:02:43.525 --> 00:02:44.245
<v Speaker 0>people is

00:02:44.565 --> 00:02:46.485
<v Speaker 0>what have we done now about three episodes

00:02:46.485 --> 00:02:47.845
<v Speaker 0>this is maybe number four.

00:02:48.590 --> 00:02:50.670
<v Speaker 1>This is three, I think. The three. Alright.

00:02:50.670 --> 00:02:51.870
<v Speaker 0>Okay. So we we did

00:02:52.830 --> 00:02:55.310
<v Speaker 1>First time we talked about what you're gonna

00:02:55.310 --> 00:02:55.870
<v Speaker 1>build.

00:02:56.430 --> 00:02:59.550
<v Speaker 0>Yep. They mapped naturally actually to these these

00:02:59.550 --> 00:03:02.105
<v Speaker 1>different steps of sort of BDD process. And

00:03:02.105 --> 00:03:03.465
<v Speaker 1>the first one, talked about what it was

00:03:03.465 --> 00:03:04.585
<v Speaker 1>you were gonna build, and we did some

00:03:04.585 --> 00:03:06.905
<v Speaker 1>example mapping as a way of having that

00:03:06.905 --> 00:03:07.625
<v Speaker 1>conversation.

00:03:07.705 --> 00:03:08.345
<v Speaker 1>Yeah.

00:03:08.505 --> 00:03:09.785
<v Speaker 1>Which is what you do in real life.

00:03:09.785 --> 00:03:11.065
<v Speaker 1>You talk to the you talk about what

00:03:11.065 --> 00:03:11.865
<v Speaker 1>you're gonna build.

00:03:12.425 --> 00:03:12.665
<v Speaker 1>Ideally,

00:03:14.700 --> 00:03:16.300
<v Speaker 1>you know, early on before it's all been

00:03:16.300 --> 00:03:18.860
<v Speaker 1>nailed down, you actually have as a group,

00:03:18.860 --> 00:03:20.140
<v Speaker 1>decide what you're gonna build.

00:03:20.780 --> 00:03:22.780
<v Speaker 1>The second session, we then

00:03:23.820 --> 00:03:25.180
<v Speaker 1>we had a bit a gap, which is

00:03:25.180 --> 00:03:26.380
<v Speaker 1>good because it's kind of what happens in

00:03:26.380 --> 00:03:27.660
<v Speaker 1>real life. It's not the ideal.

00:03:28.245 --> 00:03:29.445
<v Speaker 1>We had a gap, and then we had

00:03:29.445 --> 00:03:30.965
<v Speaker 1>to try and remember what the conversation was

00:03:30.965 --> 00:03:32.085
<v Speaker 1>and write it down.

00:03:32.325 --> 00:03:33.685
<v Speaker 1>So that's what we did last session. We

00:03:33.685 --> 00:03:36.725
<v Speaker 1>wrote down in this Gherkin syntax.

00:03:38.005 --> 00:03:39.445
<v Speaker 1>And, hopefully, both of those

00:03:39.765 --> 00:03:41.285
<v Speaker 1>steps are useful on their own, but then

00:03:41.285 --> 00:03:43.365
<v Speaker 1>this last step is we're gonna use that

00:03:44.540 --> 00:03:46.860
<v Speaker 1>written notes from our conversation

00:03:47.340 --> 00:03:48.780
<v Speaker 1>to drive our tests.

00:03:49.260 --> 00:03:50.220
<v Speaker 1>And it's been

00:03:50.460 --> 00:03:51.180
<v Speaker 1>weeks.

00:03:52.140 --> 00:03:53.660
<v Speaker 0>Well, we kept the

00:03:54.700 --> 00:03:57.340
<v Speaker 0>Months. The December break and, you know, we've

00:03:57.340 --> 00:03:59.765
<v Speaker 0>eased into I've definitely eased into January. I

00:03:59.765 --> 00:04:01.205
<v Speaker 0>haven't done too much streaming in the first

00:04:01.205 --> 00:04:03.045
<v Speaker 0>couple of weeks. I've just been, you know,

00:04:03.525 --> 00:04:05.525
<v Speaker 0>slowly but surely getting back into my groove

00:04:05.525 --> 00:04:06.085
<v Speaker 0>now.

00:04:06.325 --> 00:04:07.685
<v Speaker 0>So it has been a while.

00:04:08.245 --> 00:04:10.245
<v Speaker 1>And I think tends to encourage people to

00:04:10.245 --> 00:04:11.605
<v Speaker 1>do these things over a short time scale

00:04:11.605 --> 00:04:14.005
<v Speaker 1>but this time scale of like four to

00:04:14.005 --> 00:04:14.805
<v Speaker 1>six weeks

00:04:15.550 --> 00:04:17.230
<v Speaker 1>is probably realistic for a lot of people,

00:04:17.230 --> 00:04:18.990
<v Speaker 1>isn't it? So we might find we don't

00:04:18.990 --> 00:04:20.990
<v Speaker 1>quite remember what we talked about and we

00:04:20.990 --> 00:04:22.350
<v Speaker 1>have to rely on our notes.

00:04:22.510 --> 00:04:23.950
<v Speaker 0>Well, it's a good thing we have all

00:04:23.950 --> 00:04:26.350
<v Speaker 0>these scenarios now inside of a repository that

00:04:26.350 --> 00:04:29.790
<v Speaker 0>we can Exactly. To build together this test

00:04:28.905 --> 00:04:30.105
<v Speaker 0>test automation.

00:04:30.585 --> 00:04:32.745
<v Speaker 0>The fun thing is it's I also haven't

00:04:32.745 --> 00:04:35.465
<v Speaker 0>written any rust in a good month, maybe

00:04:35.465 --> 00:04:37.065
<v Speaker 0>longer now. So I'm hoping that all comes

00:04:37.065 --> 00:04:38.585
<v Speaker 0>flooding back to me. Don't think you've ever

00:04:38.585 --> 00:04:40.825
<v Speaker 0>written any rust. Is that right? Correct. Correct.

00:04:40.825 --> 00:04:43.900
<v Speaker 0>Cool. So we'll use this as a bidirectional

00:04:43.900 --> 00:04:45.100
<v Speaker 0>flow of information.

00:04:46.300 --> 00:04:48.780
<v Speaker 0>So we have a hello. Hello, Mohammed. Thanks

00:04:48.780 --> 00:04:50.700
<v Speaker 0>for joining us. Oh, hi, Mohammed.

00:04:52.060 --> 00:04:53.340
<v Speaker 1>We we

00:04:54.700 --> 00:04:56.380
<v Speaker 1>also have should point out this is something

00:04:56.380 --> 00:04:57.980
<v Speaker 1>you've kind of already written.

00:04:59.555 --> 00:05:01.235
<v Speaker 1>I don't know if the code you've got

00:05:01.235 --> 00:05:02.435
<v Speaker 1>covers the

00:05:02.835 --> 00:05:04.275
<v Speaker 1>scenarios we're gonna talk about.

00:05:06.115 --> 00:05:07.555
<v Speaker 0>But we can come in and kind of

00:05:07.555 --> 00:05:08.915
<v Speaker 1>pretend you haven't written it yet.

00:05:09.395 --> 00:05:10.355
<v Speaker 0>Of course. Yeah.

00:05:11.075 --> 00:05:12.995
<v Speaker 0>I did start this, but I think what

00:05:13.849 --> 00:05:15.770
<v Speaker 0>context is important, isn't it? What happened is

00:05:15.770 --> 00:05:18.410
<v Speaker 0>I started hacking away on the code internally

00:05:18.410 --> 00:05:19.449
<v Speaker 0>on a project

00:05:20.009 --> 00:05:21.930
<v Speaker 0>and it worked. And then I thought, well

00:05:21.930 --> 00:05:24.169
<v Speaker 0>actually I probably wanna use this on more

00:05:24.169 --> 00:05:26.169
<v Speaker 0>than one controllers. I'm gonna extract it to

00:05:26.169 --> 00:05:29.164
<v Speaker 0>a library. I extracted it to a library

00:05:29.164 --> 00:05:30.365
<v Speaker 0>really crudely

00:05:30.685 --> 00:05:33.245
<v Speaker 0>and then went I can't really expect other

00:05:33.245 --> 00:05:34.604
<v Speaker 0>people to use this if I don't tell

00:05:34.604 --> 00:05:36.125
<v Speaker 0>them how it works and I don't have

00:05:36.125 --> 00:05:38.604
<v Speaker 0>testing around it and the nature of the

00:05:39.419 --> 00:05:42.060
<v Speaker 0>library itself is all integration. It works directly

00:05:42.060 --> 00:05:43.900
<v Speaker 0>with lib kit like I'm not actually doing

00:05:43.900 --> 00:05:44.700
<v Speaker 0>anything

00:05:45.340 --> 00:05:47.820
<v Speaker 0>on my own logic, it's all just orchestrating

00:05:47.820 --> 00:05:48.940
<v Speaker 0>this on the library.

00:05:49.259 --> 00:05:51.100
<v Speaker 0>So BDD seems like a good way to

00:05:51.100 --> 00:05:53.335
<v Speaker 0>write these kind of integration tests and ensure

00:05:53.335 --> 00:05:54.215
<v Speaker 0>that it worked.

00:05:54.935 --> 00:05:57.335
<v Speaker 0>Don't suspect there are any unit tests

00:05:57.414 --> 00:06:00.775
<v Speaker 0>really for this application but maybe I'll surprise.

00:06:01.735 --> 00:06:03.495
<v Speaker 1>Yes. So the kind of tests

00:06:05.490 --> 00:06:08.610
<v Speaker 1>that naturally come from BDD scenarios are acceptance

00:06:08.610 --> 00:06:09.330
<v Speaker 1>tests.

00:06:09.889 --> 00:06:11.090
<v Speaker 1>So they're generally

00:06:14.050 --> 00:06:16.130
<v Speaker 1>the black box at some level. We can

00:06:16.130 --> 00:06:18.095
<v Speaker 1>talk a bit more about what level that

00:06:18.095 --> 00:06:20.815
<v Speaker 1>block operates at, but you're kind of probing

00:06:20.815 --> 00:06:22.415
<v Speaker 1>the system at some level and saying it

00:06:22.415 --> 00:06:24.095
<v Speaker 1>should do what I want in this situation.

00:06:24.095 --> 00:06:25.455
<v Speaker 1>You don't you don't really care how it's

00:06:25.455 --> 00:06:26.175
<v Speaker 1>working

00:06:26.335 --> 00:06:28.175
<v Speaker 1>beneath the level you're testing at.

00:06:28.815 --> 00:06:31.695
<v Speaker 1>In some domains, you would then also want

00:06:31.695 --> 00:06:34.650
<v Speaker 1>to write unit tests and integration tests and

00:06:34.810 --> 00:06:36.090
<v Speaker 1>contract tests.

00:06:36.810 --> 00:06:38.170
<v Speaker 1>But they're all kind of

00:06:38.970 --> 00:06:42.170
<v Speaker 1>in internal quality metrics almost, aren't they?

00:06:42.490 --> 00:06:45.290
<v Speaker 1>Whereas the if you're writing acceptance tests, you're

00:06:45.290 --> 00:06:46.410
<v Speaker 1>kind of validating

00:06:46.490 --> 00:06:48.170
<v Speaker 1>the external quality.

00:06:48.665 --> 00:06:50.105
<v Speaker 1>Does it do the thing

00:06:50.425 --> 00:06:52.345
<v Speaker 1>that it's required to do

00:06:53.385 --> 00:06:55.145
<v Speaker 1>at the level I'm testing it?

00:06:56.025 --> 00:06:57.545
<v Speaker 1>Which which are two different things. One is

00:06:57.545 --> 00:06:58.505
<v Speaker 1>one is

00:07:00.265 --> 00:07:02.825
<v Speaker 1>the acceptance test level, the external quality is

00:07:02.825 --> 00:07:04.025
<v Speaker 1>something that's on the

00:07:04.400 --> 00:07:06.720
<v Speaker 1>on the boundary of where the business engages

00:07:06.720 --> 00:07:08.560
<v Speaker 1>with technology in that both

00:07:08.960 --> 00:07:10.240
<v Speaker 1>parties care

00:07:10.560 --> 00:07:12.160
<v Speaker 1>about the external behavior,

00:07:12.560 --> 00:07:15.439
<v Speaker 1>both parties care that it does what it's

00:07:15.439 --> 00:07:17.895
<v Speaker 1>supposed to do, and both parties can sort

00:07:17.895 --> 00:07:19.814
<v Speaker 1>of evaluate whether it does what it's supposed

00:07:19.814 --> 00:07:20.455
<v Speaker 1>to do.

00:07:21.254 --> 00:07:25.014
<v Speaker 1>And the internal quality is the professional responsibility

00:07:25.014 --> 00:07:27.655
<v Speaker 1>of developers, isn't it? And it's and it's

00:07:27.655 --> 00:07:29.814
<v Speaker 1>it's the developers decide whether they write unit

00:07:29.814 --> 00:07:30.375
<v Speaker 1>tests, really.

00:07:31.460 --> 00:07:33.460
<v Speaker 1>You can have a manager bashing with a

00:07:33.460 --> 00:07:35.060
<v Speaker 1>code coverage chart, it doesn't mean they're any

00:07:35.060 --> 00:07:35.620
<v Speaker 1>good.

00:07:36.500 --> 00:07:38.260
<v Speaker 1>So all that internal stuff is kind of

00:07:38.260 --> 00:07:40.420
<v Speaker 1>away from the business, sort of internal to

00:07:40.420 --> 00:07:41.780
<v Speaker 1>the technology team.

00:07:43.220 --> 00:07:45.060
<v Speaker 1>Did we write any unit tests? Do we

00:07:45.060 --> 00:07:45.780
<v Speaker 1>need to?

00:07:46.180 --> 00:07:48.445
<v Speaker 1>Probably not in this case. Well,

00:07:48.525 --> 00:07:50.045
<v Speaker 0>let's see. Shall we?

00:07:50.445 --> 00:07:53.725
<v Speaker 1>We'll see. Yeah. Interesting to spot some tests

00:07:53.725 --> 00:07:54.285
<v Speaker 1>that don't

00:07:55.245 --> 00:07:56.925
<v Speaker 1>spot some worries

00:07:56.925 --> 00:07:59.245
<v Speaker 1>we have that aren't covered by the tests

00:07:59.245 --> 00:07:59.965
<v Speaker 1>we're about to write.

00:08:02.030 --> 00:08:04.830
<v Speaker 0>Yes. Definitely. Okay. Let me let's let's fill

00:08:04.830 --> 00:08:07.230
<v Speaker 0>it open. So here's our scenario

00:08:07.310 --> 00:08:09.550
<v Speaker 1>first. The the feature file.

00:08:10.750 --> 00:08:12.590
<v Speaker 0>Yes. We will. Yeah. Let's jump into the

00:08:12.590 --> 00:08:16.745
<v Speaker 0>feature files. So this is all on getthat.com/Rawkode/getsync.

00:08:17.065 --> 00:08:19.385
<v Speaker 0>I already have it cloned locally. Got some

00:08:19.385 --> 00:08:21.305
<v Speaker 0>code open, so we'll float that away and

00:08:21.305 --> 00:08:23.865
<v Speaker 0>we're gonna start with the first feature.

00:08:25.625 --> 00:08:27.865
<v Speaker 0>Which we did two episodes ago or last

00:08:27.865 --> 00:08:30.000
<v Speaker 0>episode even, sorry. So

00:08:31.440 --> 00:08:34.640
<v Speaker 0>I'm loving this not implemented annotations because well,

00:08:34.640 --> 00:08:36.559
<v Speaker 0>we haven't really hooked any of this up

00:08:36.559 --> 00:08:38.799
<v Speaker 0>yet. But I was really happy with the

00:08:39.120 --> 00:08:41.440
<v Speaker 0>way that we built these that with this

00:08:41.440 --> 00:08:42.080
<v Speaker 0>feature fail.

00:08:42.905 --> 00:08:44.745
<v Speaker 0>It really came together, I feel. And we

00:08:44.745 --> 00:08:47.065
<v Speaker 0>really destroyed what we wanted to happen even

00:08:47.065 --> 00:08:49.465
<v Speaker 0>with just like the first basic use case.

00:08:50.185 --> 00:08:52.265
<v Speaker 0>Yeah. So should we just Yeah. Go through

00:08:52.265 --> 00:08:54.505
<v Speaker 0>this like example by example to understand what

00:08:54.505 --> 00:08:55.545
<v Speaker 0>the application does?

00:08:56.825 --> 00:08:59.190
<v Speaker 1>Yeah. If if you that's. Yeah. Is that

00:08:59.190 --> 00:09:01.510
<v Speaker 0>what you would do? We should be recognizing

00:09:01.510 --> 00:09:02.310
<v Speaker 1>them. Right?

00:09:03.670 --> 00:09:05.589
<v Speaker 1>So that what did you write? Git git

00:09:05.589 --> 00:09:07.510
<v Speaker 1>sync expects to clone it. Oh, it's about

00:09:07.510 --> 00:09:09.430
<v Speaker 1>cloning when it starts up. I remember.

00:09:11.385 --> 00:09:13.465
<v Speaker 0>Yeah. We focused on the first feature was

00:09:13.465 --> 00:09:15.945
<v Speaker 0>like when I run getSync as a controller

00:09:16.025 --> 00:09:17.385
<v Speaker 0>Yeah. The first thing I have to do

00:09:17.385 --> 00:09:18.105
<v Speaker 0>is

00:09:18.585 --> 00:09:20.425
<v Speaker 0>well, it's gotta be configured in some way

00:09:20.425 --> 00:09:22.745
<v Speaker 0>and I think we've intentionally omitted all of

00:09:22.745 --> 00:09:25.439
<v Speaker 0>the config language because we hadn't really implemented

00:09:25.439 --> 00:09:26.639
<v Speaker 0>that in the code yet. But we said

00:09:26.639 --> 00:09:28.639
<v Speaker 0>that we would have a director that we

00:09:28.639 --> 00:09:30.079
<v Speaker 0>need to get a local copy of and

00:09:30.079 --> 00:09:31.839
<v Speaker 0>there are some conditions and some edge cases

00:09:31.839 --> 00:09:33.680
<v Speaker 0>where that may fail or we may have

00:09:33.680 --> 00:09:35.600
<v Speaker 0>to do some magic handling.

00:09:36.240 --> 00:09:37.519
<v Speaker 1>Yeah. And that config stuff.

00:09:38.805 --> 00:09:40.885
<v Speaker 1>Yes. It's really important when you're

00:09:41.205 --> 00:09:43.205
<v Speaker 1>writing tests or just with

00:09:43.685 --> 00:09:46.485
<v Speaker 1>BDD hat on, right? Writing tests and describing

00:09:46.485 --> 00:09:48.085
<v Speaker 1>something to a human is the same thing.

00:09:48.165 --> 00:09:50.965
<v Speaker 1>So it's really important when you're explaining things

00:09:50.520 --> 00:09:52.280
<v Speaker 1>or writing tests is to come up with

00:09:52.280 --> 00:09:53.880
<v Speaker 1>a simple example, and there's a there's a

00:09:53.880 --> 00:09:55.320
<v Speaker 1>sort of skill to that of picking things

00:09:55.320 --> 00:09:56.040
<v Speaker 1>apart.

00:09:56.520 --> 00:09:57.080
<v Speaker 1>So

00:09:57.720 --> 00:09:59.400
<v Speaker 1>I remember when we were talking last time,

00:09:59.400 --> 00:10:00.440
<v Speaker 1>we just started

00:10:00.760 --> 00:10:03.640
<v Speaker 1>mentioning these config concerns. We made a deliberate

00:10:03.640 --> 00:10:06.635
<v Speaker 1>decision. We're gonna remove that from the conversation.

00:10:07.515 --> 00:10:09.915
<v Speaker 1>So there's nothing in here explaining why it

00:10:09.915 --> 00:10:12.075
<v Speaker 1>goes into a particular folder on your disk,

00:10:12.075 --> 00:10:12.795
<v Speaker 1>for instance.

00:10:13.915 --> 00:10:15.755
<v Speaker 1>We would expect though

00:10:15.995 --> 00:10:17.835
<v Speaker 1>that when we build the configs,

00:10:18.155 --> 00:10:19.890
<v Speaker 1>if think about it in terms of bootstrapping

00:10:19.890 --> 00:10:21.170
<v Speaker 1>a project from the start,

00:10:21.970 --> 00:10:24.050
<v Speaker 1>we might then hard code everything. Hard code

00:10:24.050 --> 00:10:25.650
<v Speaker 1>all the config and get this working.

00:10:26.130 --> 00:10:27.490
<v Speaker 1>And then when we want to build the

00:10:27.490 --> 00:10:28.850
<v Speaker 1>thing where it reads a

00:10:29.970 --> 00:10:32.405
<v Speaker 1>I don't know. TOML file? What do Rust

00:10:32.405 --> 00:10:34.005
<v Speaker 1>people use? YAML?

00:10:34.405 --> 00:10:35.925
<v Speaker 1>No. It's it's TOML.

00:10:36.165 --> 00:10:38.485
<v Speaker 1>Yeah. That's when we'd write maybe a different

00:10:38.485 --> 00:10:39.125
<v Speaker 1>feature.

00:10:40.005 --> 00:10:42.085
<v Speaker 1>When the file looks like this, then it

00:10:42.085 --> 00:10:44.085
<v Speaker 1>should go into this folder. You know, all

00:10:44.085 --> 00:10:46.520
<v Speaker 1>those edge cases. And we talk it through.

00:10:48.520 --> 00:10:50.760
<v Speaker 1>So you you kinda wanna split these things

00:10:50.760 --> 00:10:52.280
<v Speaker 1>apart in a way that they're understandable to

00:10:52.280 --> 00:10:55.000
<v Speaker 1>people, but also with the sort of production

00:10:56.040 --> 00:10:56.760
<v Speaker 1>thinking.

00:10:57.080 --> 00:10:59.000
<v Speaker 1>You wanna split them apart in a way

00:10:59.000 --> 00:11:01.295
<v Speaker 1>where you could deliver them separately. You know,

00:11:01.295 --> 00:11:03.375
<v Speaker 1>we could we could build this thing we're

00:11:03.375 --> 00:11:04.415
<v Speaker 1>looking at right now

00:11:04.815 --> 00:11:07.295
<v Speaker 1>without worrying about config, just hard code stuff.

00:11:07.295 --> 00:11:09.375
<v Speaker 1>Mhmm. And kinda come back to the config

00:11:09.375 --> 00:11:10.095
<v Speaker 1>later.

00:11:12.095 --> 00:11:13.694
<v Speaker 0>Good. Because I think that's how the code

00:11:13.694 --> 00:11:14.815
<v Speaker 0>actually works as well.

00:11:18.530 --> 00:11:19.250
<v Speaker 0>Now,

00:11:20.770 --> 00:11:22.850
<v Speaker 0>I wanna make sure I understand this correctly.

00:11:22.850 --> 00:11:24.930
<v Speaker 0>Right? So when

00:11:29.970 --> 00:11:31.730
<v Speaker 0>so when it comes to implementing the test,

00:11:31.730 --> 00:11:33.295
<v Speaker 0>right, for each of these, do we just

00:11:33.295 --> 00:11:35.935
<v Speaker 0>pick the first example and we start adding

00:11:35.935 --> 00:11:38.655
<v Speaker 0>the step definitions for this to make it

00:11:38.895 --> 00:11:41.855
<v Speaker 0>work? Yeah. Why not? Okay.

00:11:42.735 --> 00:11:43.295
<v Speaker 1>I

00:11:43.775 --> 00:11:45.055
<v Speaker 1>mean, really it's the order that you want

00:11:45.055 --> 00:11:45.775
<v Speaker 1>to build it in.

00:11:47.460 --> 00:11:49.460
<v Speaker 0>Think it's I'm just a little confused because

00:11:49.460 --> 00:11:51.140
<v Speaker 0>I know that already some of this code

00:11:51.140 --> 00:11:51.940
<v Speaker 0>exists.

00:11:52.260 --> 00:11:54.420
<v Speaker 1>Yeah. It's tricky, isn't it? So sometimes you

00:11:54.420 --> 00:11:56.020
<v Speaker 1>want this if it's something where that you

00:11:56.020 --> 00:11:57.860
<v Speaker 1>understand how it's gonna work Yeah.

00:11:59.015 --> 00:12:01.015
<v Speaker 1>Sometimes you just work through it sequentially

00:12:02.455 --> 00:12:05.015
<v Speaker 1>or you pick the happy path first.

00:12:05.655 --> 00:12:07.175
<v Speaker 1>Sometimes if it's like

00:12:09.255 --> 00:12:10.695
<v Speaker 1>if you don't quite know how it's gonna

00:12:10.695 --> 00:12:12.295
<v Speaker 1>work, you might be able to pick one

00:12:12.295 --> 00:12:14.410
<v Speaker 1>of the sort of edge cases that's gonna

00:12:14.410 --> 00:12:15.610
<v Speaker 1>be easy to implement

00:12:16.490 --> 00:12:18.330
<v Speaker 1>first just to sort of get you going.

00:12:19.769 --> 00:12:21.209
<v Speaker 1>I must admit, I tend to just do

00:12:21.209 --> 00:12:22.890
<v Speaker 1>it top to bottom if I if I

00:12:22.890 --> 00:12:24.170
<v Speaker 1>feel like I know what's gonna happen because

00:12:24.170 --> 00:12:25.690
<v Speaker 1>it feels like a nice logical way of

00:12:25.690 --> 00:12:26.089
<v Speaker 1>progressing.

00:12:27.365 --> 00:12:28.725
<v Speaker 0>Yeah. Because I feel that when we did

00:12:28.885 --> 00:12:30.885
<v Speaker 0>when we wrote the scenarios that way as

00:12:30.885 --> 00:12:32.565
<v Speaker 0>well, we we tried to keep the simpler

00:12:32.565 --> 00:12:33.845
<v Speaker 0>things at the top. So it feels to

00:12:33.845 --> 00:12:35.285
<v Speaker 0>me that if we start to build it

00:12:35.285 --> 00:12:37.765
<v Speaker 0>as simpler test cases, we're starting to understand

00:12:37.765 --> 00:12:39.365
<v Speaker 0>how the library is actually gonna work. And

00:12:39.365 --> 00:12:41.570
<v Speaker 0>hopefully, of those steps become really reusable as

00:12:41.570 --> 00:12:43.890
<v Speaker 0>we get further down the more complex

00:12:44.050 --> 00:12:44.850
<v Speaker 0>stages.

00:12:45.329 --> 00:12:46.930
<v Speaker 1>Yeah. When when we were the order we

00:12:46.930 --> 00:12:48.130
<v Speaker 1>put them in the document is really for

00:12:48.130 --> 00:12:48.930
<v Speaker 1>a reader.

00:12:50.209 --> 00:12:51.970
<v Speaker 1>But that might naturally map to the order

00:12:51.970 --> 00:12:52.610
<v Speaker 1>we do them in.

00:12:53.345 --> 00:12:55.505
<v Speaker 1>What I meant about picking edge cases is

00:12:55.505 --> 00:12:58.145
<v Speaker 1>sometimes it's like, I've got no idea how

00:12:58.145 --> 00:12:59.585
<v Speaker 1>I'm gonna do the actual functionality, but if

00:12:59.585 --> 00:13:01.425
<v Speaker 1>I make myself implement the scenario

00:13:01.825 --> 00:13:02.545
<v Speaker 1>where

00:13:02.705 --> 00:13:04.385
<v Speaker 1>it throws an error message,

00:13:04.945 --> 00:13:06.625
<v Speaker 1>at least it will get me typing something,

00:13:06.625 --> 00:13:08.240
<v Speaker 1>and I'll have to name some objects. Objects

00:13:08.240 --> 00:13:08.880
<v Speaker 1>and

00:13:09.199 --> 00:13:10.959
<v Speaker 1>I'll have started thinking bit more and hopefully

00:13:10.959 --> 00:13:12.720
<v Speaker 1>by the time I finished that, I'd have

00:13:13.279 --> 00:13:15.680
<v Speaker 1>had more thoughts about the the core.

00:13:17.839 --> 00:13:19.680
<v Speaker 1>And we discussed them with this two this

00:13:19.920 --> 00:13:21.839
<v Speaker 1>so should we just pick the first example?

00:13:22.945 --> 00:13:24.865
<v Speaker 0>Yeah. I think what I wanna do first

00:13:24.865 --> 00:13:27.665
<v Speaker 0>is make sure so I didn't stall. I

00:13:27.665 --> 00:13:29.025
<v Speaker 0>hopefully have for whom I need. I just

00:13:29.025 --> 00:13:31.745
<v Speaker 0>wanna make sure I run cargo test. I

00:13:31.745 --> 00:13:33.265
<v Speaker 0>guess I should see all of the scenarios

00:13:33.265 --> 00:13:34.865
<v Speaker 0>listed as not implemented.

00:13:35.185 --> 00:13:36.225
<v Speaker 0>This would be

00:13:37.630 --> 00:13:39.470
<v Speaker 1>They should not appear.

00:13:40.590 --> 00:13:43.790
<v Speaker 0>They shouldn't appear. I'll

00:13:43.790 --> 00:13:45.550
<v Speaker 1>expect them to be filtered out.

00:13:50.605 --> 00:13:53.084
<v Speaker 1>Oh, okay. So we get the not implemented

00:13:53.084 --> 00:13:55.485
<v Speaker 0>yet sketch, not implemented yet sketch, not implemented

00:13:55.485 --> 00:13:57.325
<v Speaker 0>yet sketch, so forth.

00:13:57.805 --> 00:13:59.964
<v Speaker 0>I'm I'm good. I like that list. I

00:13:59.964 --> 00:14:01.805
<v Speaker 0>can see how far we are through as

00:14:01.805 --> 00:14:02.365
<v Speaker 0>we build out.

00:14:03.000 --> 00:14:05.080
<v Speaker 1>Okay. So let's talk about two different things.

00:14:05.080 --> 00:14:07.640
<v Speaker 1>That's not related to the tag not implemented.

00:14:09.320 --> 00:14:12.200
<v Speaker 1>That's telling you there's no matching step in

00:14:12.200 --> 00:14:12.760
<v Speaker 1>your

00:14:13.400 --> 00:14:14.280
<v Speaker 1>cucumber

00:14:14.680 --> 00:14:14.920
<v Speaker 1>file.

00:14:17.055 --> 00:14:17.775
<v Speaker 1>Okay.

00:14:18.654 --> 00:14:20.654
<v Speaker 1>What would normally happen is you'd run

00:14:21.615 --> 00:14:24.495
<v Speaker 1>is this inside a test runner or something

00:14:24.895 --> 00:14:27.055
<v Speaker 1>or make file or somewhere? So you'd you'd

00:14:27.055 --> 00:14:30.015
<v Speaker 1>run Cucumber with and filter out that tag

00:14:30.015 --> 00:14:31.214
<v Speaker 1>explicitly

00:14:33.050 --> 00:14:34.730
<v Speaker 1>if you didn't want this.

00:14:35.370 --> 00:14:37.610
<v Speaker 1>There's a difference between it means they're not

00:14:37.610 --> 00:14:40.250
<v Speaker 1>they're not implemented that you're seeing. It's saying

00:14:40.250 --> 00:14:42.490
<v Speaker 1>the test automation hasn't been implemented for that

00:14:42.490 --> 00:14:42.730
<v Speaker 1>step.

00:14:43.945 --> 00:14:46.265
<v Speaker 1>Whereas what our tag means is

00:14:47.385 --> 00:14:49.865
<v Speaker 1>this feature hasn't been implemented

00:14:50.105 --> 00:14:51.145
<v Speaker 1>in the code.

00:14:52.505 --> 00:14:53.465
<v Speaker 1>Right.

00:14:54.185 --> 00:14:55.385
<v Speaker 1>Does that make sense?

00:14:56.985 --> 00:14:57.385
<v Speaker 1>Kinda.

00:14:58.900 --> 00:15:00.740
<v Speaker 1>See a I can't remember what the flag

00:15:00.740 --> 00:15:02.500
<v Speaker 1>is. It's like tags equals

00:15:03.300 --> 00:15:05.460
<v Speaker 0>Well, I don't know if it's library specifically.

00:15:05.700 --> 00:15:07.140
<v Speaker 0>Maybe it's

00:15:07.220 --> 00:15:08.180
<v Speaker 1>The cucumber's

00:15:09.140 --> 00:15:12.100
<v Speaker 1>the cucumber CLIs tend to have very consistent

00:15:15.595 --> 00:15:17.595
<v Speaker 1>command line flags. Are you running QCamera at

00:15:17.595 --> 00:15:18.475
<v Speaker 1>the command line?

00:15:19.995 --> 00:15:22.795
<v Speaker 0>Yes. Through this Rust library. Yes. So I'm

00:15:22.795 --> 00:15:25.435
<v Speaker 0>using cargo's test tool, which then uses a

00:15:25.435 --> 00:15:27.194
<v Speaker 0>whole bunch of macros to generate Rust tests

00:15:27.194 --> 00:15:30.120
<v Speaker 0>and all this crazy weirdness. But I don't

00:15:30.120 --> 00:15:31.639
<v Speaker 0>think it's important right now is it? That's

00:15:31.639 --> 00:15:33.000
<v Speaker 0>we should we should be able to know

00:15:33.000 --> 00:15:35.959
<v Speaker 0>just to say, hey, okay. We haven't implemented

00:15:35.959 --> 00:15:38.199
<v Speaker 0>this scenario. So let's let's start

00:15:38.439 --> 00:15:39.639
<v Speaker 0>and see what happens.

00:15:40.120 --> 00:15:40.439
<v Speaker 0>Yeah.

00:15:41.925 --> 00:15:43.045
<v Speaker 0>Okay. So

00:15:43.525 --> 00:15:46.085
<v Speaker 0>let's pop open our test suite here.

00:15:47.445 --> 00:15:49.445
<v Speaker 1>So if people have never used Cucumber, what's

00:15:49.445 --> 00:15:51.125
<v Speaker 1>gonna happen is Cucumber is gonna run through

00:15:51.125 --> 00:15:52.805
<v Speaker 1>the steps in the Gherkin file

00:15:53.125 --> 00:15:54.325
<v Speaker 1>and for each

00:15:55.100 --> 00:15:56.779
<v Speaker 1>given when or then step, it's gonna try

00:15:56.779 --> 00:15:58.860
<v Speaker 1>and execute a line of code. So all

00:15:58.940 --> 00:16:01.339
<v Speaker 1>and that's all QCamper's doing, is it's matching

00:16:01.339 --> 00:16:03.260
<v Speaker 1>these steps to lines of code that that

00:16:03.260 --> 00:16:04.540
<v Speaker 1>David has to write.

00:16:05.660 --> 00:16:07.420
<v Speaker 1>So we have to tell it what to

00:16:07.420 --> 00:16:08.540
<v Speaker 1>do when it sees,

00:16:09.045 --> 00:16:11.205
<v Speaker 1>given I have no directory called.

00:16:16.245 --> 00:16:19.365
<v Speaker 0>Right. Let's see. Is it still legible if

00:16:19.365 --> 00:16:20.565
<v Speaker 0>I just do a split here?

00:16:23.649 --> 00:16:25.250
<v Speaker 0>Not quite is it? Alright.

00:16:25.730 --> 00:16:27.970
<v Speaker 0>I'll just copy this first scenario into my

00:16:27.970 --> 00:16:29.730
<v Speaker 0>my code I think so.

00:16:30.610 --> 00:16:31.330
<v Speaker 0>Okay.

00:16:32.050 --> 00:16:34.130
<v Speaker 0>And we'll put it here.

00:16:36.130 --> 00:16:38.529
<v Speaker 0>Hopefully we can keep that kind of and

00:16:38.529 --> 00:16:40.905
<v Speaker 0>display as we start. Now I

00:16:41.545 --> 00:16:44.345
<v Speaker 0>am not overly familiar with this library, I

00:16:44.345 --> 00:16:45.705
<v Speaker 0>have a

00:16:46.665 --> 00:16:49.145
<v Speaker 0>month ago I attempted to try and stitch

00:16:49.145 --> 00:16:50.665
<v Speaker 0>this together and then we talked about doing

00:16:50.665 --> 00:16:52.505
<v Speaker 0>this episode and I thought okay, let's let's

00:16:52.505 --> 00:16:54.260
<v Speaker 0>wait because we'll just do it together.

00:16:54.900 --> 00:16:56.820
<v Speaker 0>But we have this builder thing where I

00:16:56.820 --> 00:16:59.220
<v Speaker 0>can say I wanna handle a given step

00:16:59.620 --> 00:17:00.500
<v Speaker 0>and

00:17:02.660 --> 00:17:04.980
<v Speaker 0>the name I think just matches what we

00:17:04.980 --> 00:17:06.754
<v Speaker 0>have and say of

00:17:06.755 --> 00:17:09.075
<v Speaker 0>our scenario and then we just we just

00:17:09.075 --> 00:17:11.474
<v Speaker 0>tell it a function to run to execute

00:17:11.474 --> 00:17:12.514
<v Speaker 0>that step.

00:17:12.674 --> 00:17:14.114
<v Speaker 0>So Okay.

00:17:14.595 --> 00:17:16.914
<v Speaker 0>That means I can do given I have

00:17:16.914 --> 00:17:18.994
<v Speaker 0>no directory

00:17:18.599 --> 00:17:19.319
<v Speaker 0>called

00:17:20.839 --> 00:17:22.599
<v Speaker 0>get stink. I'll need to work out how

00:17:22.599 --> 00:17:23.880
<v Speaker 0>to parameterize

00:17:23.880 --> 00:17:24.519
<v Speaker 0>that.

00:17:25.720 --> 00:17:28.759
<v Speaker 0>Then we run some function and this function

00:17:29.400 --> 00:17:30.679
<v Speaker 0>I've already got.

00:17:31.240 --> 00:17:33.755
<v Speaker 0>Yeah. A couple of them here as examples

00:17:33.755 --> 00:17:36.715
<v Speaker 0>that I tried to do previously. So we

00:17:38.315 --> 00:17:40.475
<v Speaker 0>want to do nothing.

00:17:41.595 --> 00:17:43.515
<v Speaker 0>So I have no directory called get sync.

00:17:43.515 --> 00:17:45.115
<v Speaker 0>The implementation there

00:17:45.659 --> 00:17:47.419
<v Speaker 0>would be doing that. Yes. And it's

00:17:51.019 --> 00:17:53.179
<v Speaker 0>not because we changed the step. Right?

00:17:54.940 --> 00:17:56.940
<v Speaker 0>I have to actually enforce that that directory

00:17:56.940 --> 00:17:58.059
<v Speaker 0>does not exist.

00:17:59.659 --> 00:18:02.505
<v Speaker 1>Yeah. You could just check the directory doesn't

00:18:02.505 --> 00:18:05.065
<v Speaker 1>exist or you maybe would delete it. You

00:18:05.065 --> 00:18:06.985
<v Speaker 1>gotta think about, like, if your test crashed

00:18:06.985 --> 00:18:08.904
<v Speaker 1>mid run and things like that. So

00:18:11.625 --> 00:18:13.385
<v Speaker 1>different ways of handling it. What I'll give

00:18:13.385 --> 00:18:13.945
<v Speaker 1>you some options.

00:18:16.200 --> 00:18:18.760
<v Speaker 1>Option one is we check there isn't a

00:18:18.760 --> 00:18:20.360
<v Speaker 1>directory called git sync and we throw an

00:18:20.360 --> 00:18:21.479
<v Speaker 1>error if there is.

00:18:22.360 --> 00:18:24.600
<v Speaker 1>Okay. And the operator has to fix it.

00:18:25.320 --> 00:18:27.880
<v Speaker 1>Option two, we always create a new temp

00:18:27.880 --> 00:18:29.799
<v Speaker 1>folder and use that as the current working

00:18:29.799 --> 00:18:30.440
<v Speaker 1>directory

00:18:31.685 --> 00:18:33.284
<v Speaker 1>in our sort of setup.

00:18:33.765 --> 00:18:35.605
<v Speaker 1>So that kinda guarantees there's never gonna be

00:18:35.605 --> 00:18:37.285
<v Speaker 1>a Git sync folder.

00:18:37.285 --> 00:18:38.965
<v Speaker 1>So we're always making some, like,

00:18:40.965 --> 00:18:42.885
<v Speaker 1>unique ID prefix temp folder.

00:18:46.090 --> 00:18:47.289
<v Speaker 1>Or we do nothing.

00:18:48.650 --> 00:18:50.490
<v Speaker 1>We hope the next step crashes.

00:18:52.570 --> 00:18:54.090
<v Speaker 0>Okay. So

00:18:56.490 --> 00:18:58.250
<v Speaker 0>I do the

00:18:58.250 --> 00:19:01.075
<v Speaker 0>second one there that you mentioned. So when

00:19:02.434 --> 00:19:04.674
<v Speaker 0>this is the setup method for the world,

00:19:04.674 --> 00:19:06.114
<v Speaker 0>the world is just the

00:19:06.355 --> 00:19:08.275
<v Speaker 0>state that all of these scenarios run-in. One

00:19:08.275 --> 00:19:09.635
<v Speaker 0>of the things I do as part of

00:19:09.635 --> 00:19:10.835
<v Speaker 0>the setup is

00:19:11.715 --> 00:19:12.595
<v Speaker 0>create

00:19:12.755 --> 00:19:13.875
<v Speaker 0>a temporary directory.

00:19:14.640 --> 00:19:15.440
<v Speaker 0>Okay. So

00:19:16.160 --> 00:19:18.400
<v Speaker 0>this should be available to us and side

00:19:18.400 --> 00:19:19.840
<v Speaker 0>of our do nothing.

00:19:20.640 --> 00:19:22.480
<v Speaker 0>So we should have a clean environment.

00:19:23.440 --> 00:19:27.535
<v Speaker 0>We can access world.dir

00:19:27.535 --> 00:19:28.654
<v Speaker 0>if we want.

00:19:29.295 --> 00:19:31.775
<v Speaker 0>However, for the moment why don't we just

00:19:31.775 --> 00:19:32.414
<v Speaker 0>do

00:19:36.095 --> 00:19:37.695
<v Speaker 0>let's just do a print right and see

00:19:37.695 --> 00:19:39.375
<v Speaker 0>we're in just I just wanna see it

00:19:39.375 --> 00:19:41.549
<v Speaker 0>running although I think the printer actually swallowed

00:19:41.549 --> 00:19:42.669
<v Speaker 0>by the test runner.

00:19:42.830 --> 00:19:46.509
<v Speaker 0>I am a new world and directory

00:19:46.909 --> 00:19:48.669
<v Speaker 0>and we'll just tell it which directory this

00:19:48.669 --> 00:19:50.830
<v Speaker 0>is. The world that there.

00:19:52.350 --> 00:19:52.830
<v Speaker 0>Like so.

00:19:56.605 --> 00:19:58.844
<v Speaker 1>Okay. Yep. Let's do that.

00:19:59.164 --> 00:20:01.325
<v Speaker 0>Alright. Okay. That does something end of the

00:20:01.325 --> 00:20:02.364
<v Speaker 1>line twelve

00:20:02.524 --> 00:20:03.325
<v Speaker 1>eleven.

00:20:05.884 --> 00:20:06.524
<v Speaker 0>Sorry?

00:20:06.924 --> 00:20:08.764
<v Speaker 1>Do you need a semicolon at the end

00:20:08.764 --> 00:20:09.884
<v Speaker 1>of line 11, I think.

00:20:12.970 --> 00:20:15.369
<v Speaker 0>Oh, yeah. I need to fix that. Yeah.

00:20:15.370 --> 00:20:16.090
<v Speaker 0>Why

00:20:16.570 --> 00:20:17.769
<v Speaker 0>is this complaining?

00:20:19.770 --> 00:20:20.730
<v Speaker 0>So

00:20:21.210 --> 00:20:22.970
<v Speaker 0>okay. So I need to fix it. She's

00:20:22.970 --> 00:20:24.410
<v Speaker 0>one of these annoying rust things where I

00:20:24.410 --> 00:20:25.755
<v Speaker 0>have to wrangle it into something that can

00:20:25.755 --> 00:20:26.955
<v Speaker 0>actually be displayed.

00:20:27.115 --> 00:20:27.755
<v Speaker 0>So

00:20:28.075 --> 00:20:29.914
<v Speaker 0>does a path have display?

00:20:35.035 --> 00:20:35.674
<v Speaker 0>No.

00:20:37.915 --> 00:20:39.869
<v Speaker 1>So just to explain for the watchers.

00:20:42.269 --> 00:20:44.429
<v Speaker 1>What you're doing in your in your this

00:20:44.429 --> 00:20:46.429
<v Speaker 1>is called a step definition file.

00:20:46.909 --> 00:20:48.590
<v Speaker 1>What you do here is you define for

00:20:48.590 --> 00:20:50.669
<v Speaker 1>each line of text what code should be

00:20:50.669 --> 00:20:52.190
<v Speaker 1>executed. But you're not doing it in any

00:20:52.190 --> 00:20:52.909
<v Speaker 1>particular order.

00:20:53.535 --> 00:20:55.455
<v Speaker 1>You're just defining a kind of dictionary or

00:20:55.455 --> 00:20:57.935
<v Speaker 1>a glossary for Cucumber to use because the

00:20:57.935 --> 00:20:59.855
<v Speaker 1>same steps might happen time after time in

00:20:59.855 --> 00:21:00.815
<v Speaker 1>the Gherkin.

00:21:00.975 --> 00:21:03.215
<v Speaker 1>We have one one function here that's gonna

00:21:03.215 --> 00:21:04.174
<v Speaker 1>get executed.

00:21:04.495 --> 00:21:06.175
<v Speaker 1>And so the point of the world object,

00:21:08.520 --> 00:21:11.320
<v Speaker 1>each scenario, each example is independent. But when

00:21:11.320 --> 00:21:12.599
<v Speaker 1>you run each example,

00:21:13.240 --> 00:21:14.440
<v Speaker 1>you want it to have some sort of

00:21:14.440 --> 00:21:16.840
<v Speaker 1>shared state. So maybe we create something and

00:21:16.840 --> 00:21:18.760
<v Speaker 1>then a later step references it. The world

00:21:18.760 --> 00:21:20.440
<v Speaker 1>is where all that state lives.

00:21:20.840 --> 00:21:22.840
<v Speaker 1>So it's just somewhere for

00:21:22.414 --> 00:21:23.534
<v Speaker 1>stuff to live.

00:21:24.414 --> 00:21:25.774
<v Speaker 1>And it gets destroyed at the end of

00:21:25.774 --> 00:21:27.695
<v Speaker 1>each example and created new for the next

00:21:27.695 --> 00:21:29.934
<v Speaker 1>example. Or it should be. I haven't used

00:21:29.934 --> 00:21:31.054
<v Speaker 1>Cucumber Rust.

00:21:35.294 --> 00:21:37.590
<v Speaker 0>Okay. That should maybe work. Yeah. It seems

00:21:37.590 --> 00:21:38.309
<v Speaker 0>to have to work. Okay.

00:21:40.230 --> 00:21:41.750
<v Speaker 0>Let me try and explain this as best

00:21:41.750 --> 00:21:43.430
<v Speaker 0>as I can with my limited knowledge. So

00:21:43.430 --> 00:21:45.590
<v Speaker 0>we've hooked up the given. This is actually

00:21:45.590 --> 00:21:47.110
<v Speaker 0>not gonna match because of this. So we

00:21:47.110 --> 00:21:48.550
<v Speaker 0>need to look up how to do that.

00:21:48.550 --> 00:21:49.910
<v Speaker 0>And then tell them that the test function

00:21:49.910 --> 00:21:52.025
<v Speaker 0>is do nothing. We have or do nothing

00:21:52.025 --> 00:21:52.585
<v Speaker 0>here.

00:21:52.985 --> 00:21:55.785
<v Speaker 0>Now the way the print macro works is

00:21:55.785 --> 00:21:57.705
<v Speaker 0>that when I pass in this, it actually

00:21:57.705 --> 00:21:59.385
<v Speaker 0>looks for a trait

00:21:59.385 --> 00:22:00.744
<v Speaker 0>on the

00:22:02.505 --> 00:22:03.624
<v Speaker 0>the structure that

00:22:04.025 --> 00:22:06.570
<v Speaker 0>knows how to display the value, which this

00:22:06.570 --> 00:22:08.970
<v Speaker 0>does not have although never yeah, there we

00:22:08.970 --> 00:22:11.450
<v Speaker 0>go. So we can force it into debug

00:22:11.529 --> 00:22:13.770
<v Speaker 0>display with that which just means it doesn't

00:22:13.770 --> 00:22:15.289
<v Speaker 0>matter if it doesn't have display just print

00:22:15.289 --> 00:22:17.210
<v Speaker 0>out the bytes or whatever we have access

00:22:17.210 --> 00:22:19.210
<v Speaker 0>to. So I'm just trying to print it

00:22:19.065 --> 00:22:19.544
<v Speaker 0>out.

00:22:19.945 --> 00:22:21.784
<v Speaker 0>Now let's confirm my

00:22:22.024 --> 00:22:24.184
<v Speaker 0>thing here that this won't work. This won't

00:22:24.184 --> 00:22:24.904
<v Speaker 0>match.

00:22:27.065 --> 00:22:27.304
<v Speaker 1>So

00:22:31.200 --> 00:22:33.599
<v Speaker 0>we should just see all the skits. Excellent.

00:22:33.760 --> 00:22:36.799
<v Speaker 0>Not excellent but now we can work out

00:22:36.799 --> 00:22:38.960
<v Speaker 0>what we wanna do there. Did it skip

00:22:38.960 --> 00:22:40.559
<v Speaker 1>it? Hang on. Let me go. We have

00:22:40.559 --> 00:22:42.159
<v Speaker 0>because we don't have a match yet. That

00:22:42.720 --> 00:22:43.679
<v Speaker 1>should be alright.

00:22:44.480 --> 00:22:47.519
<v Speaker 0>No. Because we have this quote

00:22:47.705 --> 00:22:50.345
<v Speaker 0>called get sync and quotes and here I

00:22:50.345 --> 00:22:51.705
<v Speaker 0>use different quotes.

00:22:52.825 --> 00:22:54.265
<v Speaker 1>I think just escape them.

00:22:55.625 --> 00:22:57.545
<v Speaker 0>Could but I was gonna try and parameterize

00:22:57.545 --> 00:22:58.345
<v Speaker 0>it properly.

00:22:59.145 --> 00:23:00.985
<v Speaker 1>Let's let's see see if this works first.

00:23:01.940 --> 00:23:02.659
<v Speaker 0>Okay.

00:23:03.059 --> 00:23:04.100
<v Speaker 0>Okay. Okay.

00:23:04.420 --> 00:23:05.299
<v Speaker 0>Let's try.

00:23:10.340 --> 00:23:12.020
<v Speaker 1>I just forget how long things take in

00:23:12.020 --> 00:23:13.139
<v Speaker 1>compiled languages.

00:23:13.860 --> 00:23:14.340
<v Speaker 0>K.

00:23:18.105 --> 00:23:19.625
<v Speaker 1>Alright. So it's not matching.

00:23:21.545 --> 00:23:24.105
<v Speaker 0>Okay. It could be there's magic syntax here

00:23:24.105 --> 00:23:26.185
<v Speaker 0>that understands when that's in quotes. There's some

00:23:26.185 --> 00:23:27.304
<v Speaker 0>sort of variable

00:23:27.545 --> 00:23:29.385
<v Speaker 0>capture. Could be so So why don't I

00:23:29.385 --> 00:23:30.345
<v Speaker 0>take that out first?

00:23:32.900 --> 00:23:34.659
<v Speaker 0>Let's open that feature fail.

00:23:37.460 --> 00:23:39.380
<v Speaker 1>Yeah. Just put like, given I have no

00:23:39.380 --> 00:23:40.259
<v Speaker 1>directory.

00:23:40.580 --> 00:23:41.700
<v Speaker 1>Oh, yeah. There you go.

00:23:43.860 --> 00:23:45.540
<v Speaker 0>And then we'll work out the last bit.

00:23:47.335 --> 00:23:50.534
<v Speaker 0>So that should match exactly.

00:23:53.015 --> 00:23:54.135
<v Speaker 1>Why is there a hat at the start

00:23:54.135 --> 00:23:54.535
<v Speaker 1>of that?

00:23:59.779 --> 00:24:01.219
<v Speaker 0>I shouldn't have the Kevin.

00:24:02.100 --> 00:24:03.539
<v Speaker 0>I think that's why it didn't match last

00:24:03.539 --> 00:24:05.219
<v Speaker 0>time with the escape. Okay.

00:24:06.019 --> 00:24:07.219
<v Speaker 0>Why is there a what? Sorry?

00:24:07.779 --> 00:24:09.219
<v Speaker 1>I thought there was a

00:24:10.500 --> 00:24:12.740
<v Speaker 1>start of expression at this start, but maybe

00:24:12.740 --> 00:24:13.700
<v Speaker 1>it's just because I'm looking at it on

00:24:13.700 --> 00:24:14.260
<v Speaker 1>the wrong screen.

00:24:22.985 --> 00:24:23.945
<v Speaker 0>There we go.

00:24:27.065 --> 00:24:28.184
<v Speaker 1>Did you have a pair here?

00:24:30.760 --> 00:24:32.520
<v Speaker 0>No. There will be a way to turn

00:24:32.520 --> 00:24:33.240
<v Speaker 0>that on.

00:24:34.520 --> 00:24:36.760
<v Speaker 0>We're meaning that we'll we'll work it out.

00:24:36.920 --> 00:24:39.720
<v Speaker 0>I have run into problems with the rusting

00:24:39.720 --> 00:24:42.120
<v Speaker 0>swallowing them before. I know there's an environment

00:24:42.120 --> 00:24:43.320
<v Speaker 0>variable to disable it.

00:24:43.975 --> 00:24:46.294
<v Speaker 0>I'll grab it from another project and which

00:24:46.294 --> 00:24:47.254
<v Speaker 0>I'm pretty sure I have that in a

00:24:47.254 --> 00:24:49.014
<v Speaker 0>make fail. But right now, I don't think

00:24:49.014 --> 00:24:49.894
<v Speaker 0>it's important.

00:24:50.855 --> 00:24:51.815
<v Speaker 1>Okay. So

00:24:52.934 --> 00:24:55.095
<v Speaker 1>yeah. You you want to add a pattern

00:24:55.095 --> 00:24:57.335
<v Speaker 1>matching thing there, don't you? Yeah. So let's

00:24:57.335 --> 00:24:58.934
<v Speaker 0>see how we do that with this library.

00:25:01.970 --> 00:25:04.290
<v Speaker 0>There is There's a thing called cucumber expressions

00:25:04.290 --> 00:25:06.130
<v Speaker 1>but it might not support it.

00:25:08.770 --> 00:25:10.290
<v Speaker 1>Let's see. Language

00:25:10.290 --> 00:25:11.970
<v Speaker 1>but oh, it looks like it does rejects.

00:25:12.304 --> 00:25:14.705
<v Speaker 0>Well, have their own test written and this

00:25:14.705 --> 00:25:16.065
<v Speaker 0>of course. So

00:25:17.825 --> 00:25:20.384
<v Speaker 1>You can do given underscore rejects.

00:25:23.345 --> 00:25:24.145
<v Speaker 0>Okay.

00:25:24.145 --> 00:25:26.460
<v Speaker 0>So there is an everything is great for

00:25:26.460 --> 00:25:28.140
<v Speaker 0>wrapped in quotes. So yeah. I knew that

00:25:28.140 --> 00:25:30.220
<v Speaker 0>triggered some sort of capture. So how do

00:25:30.220 --> 00:25:32.059
<v Speaker 0>they implement that in

00:25:33.660 --> 00:25:35.500
<v Speaker 0>code? So capture runner.

00:25:42.174 --> 00:25:43.534
<v Speaker 0>We're sort of given.

00:25:46.254 --> 00:25:49.534
<v Speaker 0>Oh, this is like a completely different syntax.

00:25:51.215 --> 00:25:51.855
<v Speaker 0>There we go.

00:25:57.510 --> 00:25:58.870
<v Speaker 1>That is completely different.

00:26:01.910 --> 00:26:03.990
<v Speaker 0>I was hoping for just a dot given.

00:26:04.630 --> 00:26:06.070
<v Speaker 1>You look in the in the documentation, it

00:26:06.070 --> 00:26:07.990
<v Speaker 1>says use given underscore regex, and then you

00:26:07.990 --> 00:26:09.590
<v Speaker 1>can make it a regex, and you can

00:26:09.590 --> 00:26:10.310
<v Speaker 1>use a pattern.

00:26:15.245 --> 00:26:17.965
<v Speaker 1>Sorry. The other there's some then rejects and

00:26:17.965 --> 00:26:18.765
<v Speaker 1>things like that.

00:26:19.485 --> 00:26:21.005
<v Speaker 1>You can see how they do it.

00:26:21.565 --> 00:26:24.525
<v Speaker 0>Right. Where's their docs? Where's their docs? Here.

00:26:24.525 --> 00:26:27.245
<v Speaker 1>On this page, scroll down. See the then

00:26:27.245 --> 00:26:29.190
<v Speaker 1>underscore rejects. Stop.

00:26:29.350 --> 00:26:31.909
<v Speaker 0>Stop. Oh, yeah. Yeah. Yeah. Gotcha. Gotcha. Gotcha.

00:26:32.950 --> 00:26:34.710
<v Speaker 1>If do that, you'll able use a regex

00:26:34.710 --> 00:26:37.509
<v Speaker 1>as your pattern, then you capture the matches.

00:26:39.429 --> 00:26:42.484
<v Speaker 1>But I I imagine it'll be given rejects.

00:26:45.044 --> 00:26:45.684
<v Speaker 0>Okay.

00:26:47.205 --> 00:26:49.524
<v Speaker 0>Yes. We have given a sync, given rejects,

00:26:49.524 --> 00:26:51.125
<v Speaker 0>given rejects async.

00:26:51.125 --> 00:26:53.284
<v Speaker 0>I just want rejects.

00:26:53.365 --> 00:26:55.524
<v Speaker 0>Okay. Yeah. I don't know about async.

00:26:55.950 --> 00:26:58.269
<v Speaker 0>So now we can pass an a

00:26:58.669 --> 00:27:01.230
<v Speaker 0>rejects literal and I'm pretty sure I can

00:27:01.230 --> 00:27:02.830
<v Speaker 0>use anything I want here

00:27:03.309 --> 00:27:05.150
<v Speaker 0>because we need access to double quotes. So

00:27:05.150 --> 00:27:05.870
<v Speaker 0>let's do that.

00:27:09.425 --> 00:27:11.025
<v Speaker 0>I might be wrong about that. I'll come

00:27:11.025 --> 00:27:11.665
<v Speaker 0>back to Yeah,

00:27:12.545 --> 00:27:14.625
<v Speaker 0>I'm not sure anymore. We expect it to

00:27:14.625 --> 00:27:16.304
<v Speaker 0>be I have no

00:27:16.625 --> 00:27:18.465
<v Speaker 0>blah blah blah called

00:27:18.785 --> 00:27:19.585
<v Speaker 0>blah.

00:27:21.265 --> 00:27:23.025
<v Speaker 0>Yeah, it doesn't like that, does it? Okay.

00:27:25.029 --> 00:27:25.829
<v Speaker 0>Rust

00:27:26.389 --> 00:27:27.190
<v Speaker 0>rejects

00:27:27.190 --> 00:27:28.149
<v Speaker 0>literal.

00:27:31.110 --> 00:27:33.350
<v Speaker 0>I am a Google driven developer. Do not

00:27:33.350 --> 00:27:34.149
<v Speaker 0>judge me.

00:27:36.389 --> 00:27:37.909
<v Speaker 1>They're just we can just use the quotes

00:27:37.909 --> 00:27:38.549
<v Speaker 1>and

00:27:39.945 --> 00:27:40.825
<v Speaker 1>quote them.

00:27:41.065 --> 00:27:43.705
<v Speaker 0>Duck duck go. You always just get rubbish

00:27:43.705 --> 00:27:44.585
<v Speaker 0>or codey stuff.

00:27:51.430 --> 00:27:54.070
<v Speaker 0>Why is it not just returning the language

00:27:54.070 --> 00:27:55.190
<v Speaker 0>construct for this?

00:28:14.635 --> 00:28:16.315
<v Speaker 0>Never mind. Let's do it their way.

00:28:17.595 --> 00:28:19.434
<v Speaker 0>I'll come back to that and I'll escape

00:28:19.434 --> 00:28:19.914
<v Speaker 0>for now.

00:28:21.750 --> 00:28:23.909
<v Speaker 0>So this is now a captured group.

00:28:24.550 --> 00:28:26.549
<v Speaker 0>And what we're gonna see is

00:28:28.630 --> 00:28:29.830
<v Speaker 0>alphanumeric.

00:28:30.470 --> 00:28:31.830
<v Speaker 0>No. That's alphanumeric.

00:28:31.830 --> 00:28:33.190
<v Speaker 0>Yes. Spaces.

00:28:33.535 --> 00:28:35.534
<v Speaker 1>That's not that's spaces.

00:28:36.415 --> 00:28:38.255
<v Speaker 1>That's not space. Do you put a dollar

00:28:38.255 --> 00:28:39.455
<v Speaker 1>at the end for safety?

00:28:42.175 --> 00:28:43.134
<v Speaker 0>For safety.

00:28:43.775 --> 00:28:46.430
<v Speaker 0>And this changes our function definition now where

00:28:46.430 --> 00:28:48.510
<v Speaker 0>we actually need to pass in.

00:28:49.070 --> 00:28:50.670
<v Speaker 0>I know I could probably still pass it

00:28:50.670 --> 00:28:52.830
<v Speaker 0>and like, so I just need to

00:28:53.710 --> 00:28:55.950
<v Speaker 0>make sure and I should probably rename this.

00:28:55.950 --> 00:28:56.669
<v Speaker 0>This is

00:28:59.470 --> 00:29:00.510
<v Speaker 0>directory

00:29:01.310 --> 00:29:02.244
<v Speaker 0>does not

00:29:02.565 --> 00:29:03.364
<v Speaker 0>exist.

00:29:04.245 --> 00:29:04.965
<v Speaker 0>Mhmm.

00:29:05.205 --> 00:29:06.004
<v Speaker 0>And

00:29:07.365 --> 00:29:10.405
<v Speaker 0>we know Yeah. Sometimes name them actively, like

00:29:10.405 --> 00:29:12.404
<v Speaker 1>check directory doesn't exist or,

00:29:14.405 --> 00:29:15.205
<v Speaker 1>you know,

00:29:15.924 --> 00:29:16.725
<v Speaker 1>it doesn't matter.

00:29:19.350 --> 00:29:20.870
<v Speaker 0>K. And at least one I want us

00:29:20.870 --> 00:29:22.470
<v Speaker 0>to know what matches is.

00:29:23.750 --> 00:29:26.390
<v Speaker 0>They don't use an external function definition.

00:29:26.550 --> 00:29:27.590
<v Speaker 0>So Excuse

00:29:28.790 --> 00:29:28.950
<v Speaker 0>me.

00:29:42.565 --> 00:29:43.685
<v Speaker 0>Tell me the type.

00:29:50.280 --> 00:29:51.239
<v Speaker 0>There we go.

00:29:52.840 --> 00:29:54.679
<v Speaker 1>The list of strings. Yep.

00:29:56.200 --> 00:29:56.840
<v Speaker 0>See.

00:29:57.400 --> 00:29:58.120
<v Speaker 1>Not a single.

00:30:05.235 --> 00:30:07.475
<v Speaker 0>It's better to arguments phone one.

00:30:11.315 --> 00:30:12.115
<v Speaker 1>Look, your

00:30:12.559 --> 00:30:14.960
<v Speaker 1>string is finished there, is it? At least

00:30:14.960 --> 00:30:16.799
<v Speaker 1>the highlighter thinks your string is

00:30:18.320 --> 00:30:20.159
<v Speaker 0>So it takes it out. Itself,

00:30:20.880 --> 00:30:22.880
<v Speaker 0>and then it takes the name string, and

00:30:22.880 --> 00:30:24.480
<v Speaker 0>then it takes the test function.

00:30:25.415 --> 00:30:27.494
<v Speaker 1>There's something funny with the created string.

00:30:29.095 --> 00:30:32.054
<v Speaker 1>The highlighting seems to be indicating a problem.

00:30:32.934 --> 00:30:34.294
<v Speaker 0>Yeah. Okay. So

00:30:38.870 --> 00:30:40.630
<v Speaker 1>Oh, no. Still a problem. So we have

00:30:40.630 --> 00:30:43.509
<v Speaker 0>a mismatch types here as a vector string.

00:30:45.350 --> 00:30:46.629
<v Speaker 0>Okay. So

00:30:48.470 --> 00:30:51.195
<v Speaker 0>what we expect is is a back

00:30:52.075 --> 00:30:52.715
<v Speaker 0>string.

00:30:53.435 --> 00:30:55.115
<v Speaker 0>K. That keeps that happy.

00:30:55.515 --> 00:30:57.755
<v Speaker 0>Now we wanna get these quotes in.

00:31:00.395 --> 00:31:00.795
<v Speaker 0>Yeah.

00:31:02.560 --> 00:31:04.800
<v Speaker 0>Yeah. It's not happy with that. It's a

00:31:04.800 --> 00:31:06.400
<v Speaker 1>reject string. What how do you

00:31:08.400 --> 00:31:09.200
<v Speaker 0>No. I was

00:31:10.480 --> 00:31:12.320
<v Speaker 0>this is just a raw string literal. Hold

00:31:12.320 --> 00:31:14.240
<v Speaker 0>on. I'm gonna I looked up the wrong

00:31:14.240 --> 00:31:15.440
<v Speaker 0>thing. So it's raw string.

00:31:19.475 --> 00:31:21.875
<v Speaker 0>REST raw string literals. There we go. I'm

00:31:21.875 --> 00:31:23.955
<v Speaker 1>pretty sure you can use anything. Yeah. There

00:31:23.955 --> 00:31:24.595
<v Speaker 0>we go.

00:31:25.315 --> 00:31:25.635
<v Speaker 0>So

00:31:30.600 --> 00:31:33.399
<v Speaker 0>I got the syntax a little wrong.

00:31:34.919 --> 00:31:36.440
<v Speaker 0>So we do

00:31:37.640 --> 00:31:39.400
<v Speaker 0>pound and then I think it can be

00:31:39.400 --> 00:31:41.000
<v Speaker 0>anything I want and then I can end

00:31:41.000 --> 00:31:42.840
<v Speaker 0>up with that and now I should be

00:31:42.840 --> 00:31:43.960
<v Speaker 0>able to just put that in.

00:31:45.375 --> 00:31:47.775
<v Speaker 0>I'm making it really angry at the moment.

00:31:47.775 --> 00:31:48.414
<v Speaker 0>Hold on.

00:31:51.215 --> 00:31:52.655
<v Speaker 0>And then we end up with the same

00:31:52.655 --> 00:31:53.455
<v Speaker 0>way

00:31:54.655 --> 00:31:56.015
<v Speaker 0>with the hash on the end.

00:32:06.559 --> 00:32:08.639
<v Speaker 1>Doesn't look right. Right.

00:32:08.640 --> 00:32:10.479
<v Speaker 0>Okay. We got there.

00:32:12.240 --> 00:32:14.320
<v Speaker 0>It's happy. Right? It doesn't look right.

00:32:15.045 --> 00:32:17.205
<v Speaker 0>It's right. So what I'm gonna do here

00:32:17.205 --> 00:32:18.325
<v Speaker 0>is print

00:32:19.605 --> 00:32:22.485
<v Speaker 0>the capture and our configured environment. So we

00:32:22.485 --> 00:32:25.125
<v Speaker 0>are saying I'm in a new world and

00:32:25.125 --> 00:32:26.085
<v Speaker 0>directory

00:32:27.125 --> 00:32:28.565
<v Speaker 0>and don't

00:32:28.590 --> 00:32:29.149
<v Speaker 0>expect

00:32:29.950 --> 00:32:32.110
<v Speaker 0>this parameter which we should be able to

00:32:32.110 --> 00:32:34.349
<v Speaker 0>do as matches.

00:32:39.630 --> 00:32:41.149
<v Speaker 0>And this is a vector.

00:32:41.390 --> 00:32:42.269
<v Speaker 0>I

00:32:42.350 --> 00:32:43.555
<v Speaker 0>guess we can just print out the whole

00:32:43.555 --> 00:32:44.275
<v Speaker 0>vector

00:32:45.955 --> 00:32:46.835
<v Speaker 0>like so.

00:32:47.155 --> 00:32:49.955
<v Speaker 0>And now we need the rust format log

00:32:49.955 --> 00:32:50.755
<v Speaker 0>thingy

00:32:50.835 --> 00:32:54.115
<v Speaker 0>which I'm sure I've got in

00:32:54.275 --> 00:32:55.315
<v Speaker 0>this directory.

00:33:03.730 --> 00:33:05.330
<v Speaker 0>Rust FMT

00:33:05.810 --> 00:33:07.170
<v Speaker 0>log tests.

00:33:14.385 --> 00:33:15.744
<v Speaker 0>Just go to Google.

00:33:16.465 --> 00:33:18.705
<v Speaker 0>Rust show prints

00:33:18.705 --> 00:33:19.984
<v Speaker 0>and tests.

00:33:22.945 --> 00:33:24.945
<v Speaker 0>There's like a weird environment variable.

00:33:29.070 --> 00:33:31.870
<v Speaker 0>That's quite old. Let's send a new article.

00:33:35.950 --> 00:33:36.669
<v Speaker 1>Mhmm.

00:33:39.790 --> 00:33:40.750
<v Speaker 0>Rust log.

00:33:44.255 --> 00:33:46.015
<v Speaker 0>And no capture. Okay.

00:33:49.055 --> 00:33:50.335
<v Speaker 0>Let's hope for the best.

00:33:51.855 --> 00:33:52.655
<v Speaker 1>It may work.

00:33:58.669 --> 00:33:59.710
<v Speaker 0>Okay. Let's see.

00:34:08.375 --> 00:34:11.014
<v Speaker 0>So this is print output. Okay. So this

00:34:11.014 --> 00:34:13.255
<v Speaker 0>is using the ENV logger from my actual

00:34:13.255 --> 00:34:15.815
<v Speaker 0>source code which I'm not using in my

00:34:15.815 --> 00:34:17.015
<v Speaker 0>test cases.

00:34:17.335 --> 00:34:19.335
<v Speaker 0>So let's use that instead.

00:34:20.559 --> 00:34:22.719
<v Speaker 1>So it's it's also not matching the

00:34:22.960 --> 00:34:23.679
<v Speaker 1>step.

00:34:25.039 --> 00:34:25.760
<v Speaker 0>Oh.

00:34:27.440 --> 00:34:29.039
<v Speaker 0>Let's test my rejects then.

00:34:38.695 --> 00:34:41.094
<v Speaker 0>I'm sure I probably just messed that up.

00:34:42.614 --> 00:34:45.415
<v Speaker 0>So I have no directory

00:34:45.415 --> 00:34:46.375
<v Speaker 0>called

00:34:46.455 --> 00:34:48.775
<v Speaker 0>get sync. This is our string that we're

00:34:48.775 --> 00:34:49.815
<v Speaker 0>testing with

00:34:51.510 --> 00:34:52.230
<v Speaker 0>and it worked.

00:35:09.855 --> 00:35:11.535
<v Speaker 0>Let's make sure

00:35:13.215 --> 00:35:15.695
<v Speaker 0>I didn't change anything in the feature file.

00:35:19.055 --> 00:35:20.980
<v Speaker 0>There we go. Alright.

00:35:25.220 --> 00:35:26.660
<v Speaker 1>So in some languages,

00:35:26.900 --> 00:35:29.860
<v Speaker 1>this is slightly easier because your IDE will

00:35:30.740 --> 00:35:33.045
<v Speaker 1>know about Cucumber. I'm gonna let you click

00:35:33.045 --> 00:35:35.205
<v Speaker 1>from the step into the definition and

00:35:35.365 --> 00:35:36.965
<v Speaker 1>tell you when they're not matched.

00:35:37.925 --> 00:35:39.925
<v Speaker 1>Yeah. That step's passing. So

00:35:40.244 --> 00:35:43.045
<v Speaker 1>New York Cucumbers have this paradigm where as

00:35:43.045 --> 00:35:44.885
<v Speaker 1>long as there's no error during the execution,

00:35:45.800 --> 00:35:47.320
<v Speaker 1>even if there's no lines of code in

00:35:47.320 --> 00:35:48.360
<v Speaker 1>the step definition,

00:35:48.599 --> 00:35:49.560
<v Speaker 1>it passes.

00:35:52.359 --> 00:35:55.400
<v Speaker 0>Looks okay. So Well, we need to what

00:35:55.400 --> 00:35:56.520
<v Speaker 1>we should do is make it check there

00:35:56.520 --> 00:35:57.800
<v Speaker 1>isn't a folder called git sync.

00:36:02.595 --> 00:36:03.315
<v Speaker 0>Okay.

00:36:05.875 --> 00:36:07.635
<v Speaker 1>So instead of jotting.

00:36:07.715 --> 00:36:10.275
<v Speaker 0>First, check if directory exists.

00:36:10.275 --> 00:36:10.995
<v Speaker 0>I

00:36:13.155 --> 00:36:14.275
<v Speaker 0>don't remember how to code.

00:36:17.530 --> 00:36:19.210
<v Speaker 0>Yeah. I'm trying to share before

00:36:19.770 --> 00:36:21.369
<v Speaker 0>I even look at that. I'm pretty sure

00:36:21.369 --> 00:36:23.930
<v Speaker 0>it's gonna be really trivial and it's gonna

00:36:23.930 --> 00:36:25.690
<v Speaker 0>be like, we just want

00:36:27.290 --> 00:36:28.170
<v Speaker 0>path

00:36:28.985 --> 00:36:30.025
<v Speaker 0>equals

00:36:32.345 --> 00:36:33.385
<v Speaker 0>path

00:36:33.545 --> 00:36:34.745
<v Speaker 0>or from

00:36:36.265 --> 00:36:38.265
<v Speaker 0>whatever we want it from and then there's

00:36:38.345 --> 00:36:39.385
<v Speaker 1>You kinda want it to be the current

00:36:39.385 --> 00:36:40.665
<v Speaker 1>working directory, don't we?

00:36:44.720 --> 00:36:46.320
<v Speaker 0>Path new exists.

00:36:46.720 --> 00:36:48.000
<v Speaker 0>That was pretty close.

00:36:50.000 --> 00:36:51.119
<v Speaker 0>Okay. So

00:36:53.359 --> 00:36:55.280
<v Speaker 1>So can you assert that or something like

00:36:55.280 --> 00:36:57.280
<v Speaker 1>that? How do errors work in Rust?

00:36:58.319 --> 00:37:00.345
<v Speaker 0>We could do an assert. Yeah.

00:37:02.825 --> 00:37:04.905
<v Speaker 0>So if we do an assert equals where

00:37:04.905 --> 00:37:07.305
<v Speaker 0>we've got we don't wanna direct you to

00:37:07.305 --> 00:37:07.945
<v Speaker 0>exist.

00:37:09.225 --> 00:37:10.985
<v Speaker 0>We wanna use the path module.

00:37:13.010 --> 00:37:14.450
<v Speaker 0>We can just do from

00:37:15.089 --> 00:37:16.530
<v Speaker 0>I know they use new but it doesn't

00:37:16.530 --> 00:37:17.410
<v Speaker 0>really matter.

00:37:17.890 --> 00:37:20.369
<v Speaker 0>And what we're passing and is going to

00:37:20.369 --> 00:37:21.010
<v Speaker 0>be

00:37:21.569 --> 00:37:23.010
<v Speaker 0>the matches.

00:37:25.650 --> 00:37:27.410
<v Speaker 0>Give me some help here. That is the

00:37:27.410 --> 00:37:28.290
<v Speaker 0>zero

00:37:30.105 --> 00:37:30.905
<v Speaker 0>dot

00:37:31.545 --> 00:37:32.265
<v Speaker 0>exist.

00:37:33.465 --> 00:37:34.345
<v Speaker 0>Like so.

00:37:36.105 --> 00:37:36.985
<v Speaker 1>Run it.

00:37:37.385 --> 00:37:39.865
<v Speaker 0>Yeah. That's vector thing. I'm trying to remember.

00:37:42.105 --> 00:37:43.945
<v Speaker 0>It's better destructive path.

00:37:45.630 --> 00:37:47.470
<v Speaker 0>Than struct string.

00:37:47.630 --> 00:37:48.270
<v Speaker 0>Okay.

00:37:54.270 --> 00:37:55.869
<v Speaker 0>Rust vector

00:37:55.869 --> 00:37:56.430
<v Speaker 0>pop.

00:38:00.475 --> 00:38:01.995
<v Speaker 0>I don't wanna peak to show my head

00:38:01.995 --> 00:38:02.955
<v Speaker 0>to the pop.

00:38:06.155 --> 00:38:07.195
<v Speaker 0>V pop.

00:38:08.155 --> 00:38:09.995
<v Speaker 0>I really should just trust my instincts now

00:38:09.995 --> 00:38:11.435
<v Speaker 0>and again. But anyway.

00:38:12.635 --> 00:38:14.795
<v Speaker 0>And we want this to be

00:38:16.390 --> 00:38:17.830
<v Speaker 0>wanna see what we get because it's a

00:38:17.830 --> 00:38:19.190
<v Speaker 0>vector string. There we go.

00:38:20.230 --> 00:38:20.870
<v Speaker 0>No, we don't.

00:38:29.335 --> 00:38:30.695
<v Speaker 1>It depends if

00:38:31.095 --> 00:38:33.974
<v Speaker 1>the regex library passes you

00:38:34.934 --> 00:38:36.934
<v Speaker 1>the full phrase and the captured group as

00:38:36.934 --> 00:38:38.855
<v Speaker 1>well. It might be is it one or

00:38:38.855 --> 00:38:41.090
<v Speaker 1>two? Zero that you want? Alright. Let's get

00:38:41.090 --> 00:38:42.130
<v Speaker 0>this working then.

00:38:44.130 --> 00:38:45.410
<v Speaker 0>Do have a debugger?

00:38:47.970 --> 00:38:50.210
<v Speaker 0>I'm turning you to rust to be able

00:38:50.210 --> 00:38:52.335
<v Speaker 0>to whip out a debugger and use it

00:38:52.335 --> 00:38:53.775
<v Speaker 0>effectively, I'm afraid.

00:38:54.095 --> 00:38:55.535
<v Speaker 0>I mean, I'm turning you to even be

00:38:55.535 --> 00:38:57.055
<v Speaker 0>doing what I'm doing now but I'm gonna

00:38:57.055 --> 00:38:58.335
<v Speaker 0>keep sticking with it.

00:38:59.375 --> 00:39:01.375
<v Speaker 0>Oh, I actually have a check of exists

00:39:01.375 --> 00:39:02.975
<v Speaker 0>unit tests but

00:39:03.535 --> 00:39:04.734
<v Speaker 0>let's ignore that for now.

00:39:06.050 --> 00:39:07.410
<v Speaker 1>Yeah. I mean, you can mix on that.

00:39:07.410 --> 00:39:09.010
<v Speaker 1>I mean, you might delete some of the

00:39:09.010 --> 00:39:09.890
<v Speaker 1>unit tests

00:39:10.210 --> 00:39:10.930
<v Speaker 1>after.

00:39:11.650 --> 00:39:14.530
<v Speaker 1>It depends, though. Often, you'll have written more

00:39:14.530 --> 00:39:15.890
<v Speaker 1>unit tests than

00:39:16.210 --> 00:39:17.970
<v Speaker 1>were in the acceptance test. Like, you might

00:39:17.970 --> 00:39:19.330
<v Speaker 1>be able to think of more edge cases.

00:39:20.445 --> 00:39:22.525
<v Speaker 1>There might be a example

00:39:22.525 --> 00:39:24.125
<v Speaker 1>of the directory

00:39:24.525 --> 00:39:27.005
<v Speaker 1>being there but not writable, for instance,

00:39:27.165 --> 00:39:28.765
<v Speaker 1>in the acceptance tests.

00:39:29.005 --> 00:39:31.245
<v Speaker 1>And then you, the developer, might be able

00:39:31.245 --> 00:39:32.845
<v Speaker 1>to think of eight reasons why a thing

00:39:32.845 --> 00:39:33.565
<v Speaker 1>isn't writable.

00:39:34.839 --> 00:39:36.760
<v Speaker 1>And so you'd maybe do those

00:39:37.160 --> 00:39:39.000
<v Speaker 1>eight things at unit test level.

00:39:41.000 --> 00:39:43.640
<v Speaker 0>Alright. So I'm just gonna enable this end

00:39:43.640 --> 00:39:44.200
<v Speaker 0>logger.

00:39:56.885 --> 00:39:58.325
<v Speaker 0>Wonder if that would just work there.

00:40:03.569 --> 00:40:05.490
<v Speaker 0>There is a way to get print output

00:40:05.490 --> 00:40:07.410
<v Speaker 0>on a test and now I need it.

00:40:12.609 --> 00:40:13.330
<v Speaker 0>Rust

00:40:13.490 --> 00:40:15.089
<v Speaker 0>test println.

00:40:25.335 --> 00:40:27.975
<v Speaker 0>Yeah. No catcher's not working. Thanks.

00:40:31.950 --> 00:40:33.390
<v Speaker 0>It didn't work, did it?

00:40:39.790 --> 00:40:41.310
<v Speaker 0>Let's try one more time.

00:40:41.550 --> 00:40:43.710
<v Speaker 0>Although I don't see the output here. The

00:40:43.710 --> 00:40:44.030
<v Speaker 1>past.

00:40:45.335 --> 00:40:46.934
<v Speaker 0>I know but I didn't see the print

00:40:46.934 --> 00:40:47.974
<v Speaker 0>statement.

00:40:49.255 --> 00:40:51.255
<v Speaker 1>We're beyond prints now, aren't we?

00:40:53.494 --> 00:40:54.695
<v Speaker 1>Take the print out.

00:40:56.615 --> 00:40:58.454
<v Speaker 0>I've looked in the RS

00:40:58.454 --> 00:40:59.575
<v Speaker 0>lane 26.

00:41:01.160 --> 00:41:03.000
<v Speaker 0>So I'm using info here.

00:41:03.320 --> 00:41:06.120
<v Speaker 0>Okay. So it's already enabled in the project.

00:41:08.520 --> 00:41:10.840
<v Speaker 1>I think there's something where you can

00:41:15.595 --> 00:41:17.435
<v Speaker 1>Now you've already got harness false.

00:41:21.035 --> 00:41:22.875
<v Speaker 0>I know I should turn that on. Okay.

00:41:25.595 --> 00:41:27.595
<v Speaker 1>Call So take out the print take

00:41:27.595 --> 00:41:29.275
<v Speaker 1>out the print anyway. Let me change it

00:41:29.275 --> 00:41:30.315
<v Speaker 0>to debug. So

00:41:41.550 --> 00:41:42.750
<v Speaker 0>Oh, and I put that in the wrong

00:41:42.750 --> 00:41:43.390
<v Speaker 0>place.

00:41:44.110 --> 00:41:45.950
<v Speaker 0>So test live in our own module and

00:41:45.950 --> 00:41:47.695
<v Speaker 0>rust. So I need that here.

00:41:48.415 --> 00:41:51.375
<v Speaker 0>Push enables that macro. Okay. And then we

00:41:51.375 --> 00:41:52.255
<v Speaker 0>run this

00:41:52.494 --> 00:41:54.735
<v Speaker 0>and I want to enable debug logging.

00:41:59.855 --> 00:42:01.295
<v Speaker 0>It's coming back to me. It's a little

00:42:01.295 --> 00:42:01.775
<v Speaker 0>bit surely.

00:42:16.345 --> 00:42:17.945
<v Speaker 0>No. I don't see any

00:42:18.105 --> 00:42:19.625
<v Speaker 0>output there. Do you?

00:42:25.465 --> 00:42:26.585
<v Speaker 1>No. It's matching there.

00:42:31.539 --> 00:42:33.619
<v Speaker 0>Rust log debug.

00:42:34.339 --> 00:42:35.859
<v Speaker 0>I use debug.

00:42:37.779 --> 00:42:39.460
<v Speaker 0>Alright. Let's just get this start working. I

00:42:39.460 --> 00:42:41.460
<v Speaker 0>wanted to kinda know what

00:42:42.260 --> 00:42:43.140
<v Speaker 0>matches was.

00:42:44.234 --> 00:42:44.795
<v Speaker 1>Yeah.

00:42:46.795 --> 00:42:47.595
<v Speaker 0>Alright.

00:42:47.595 --> 00:42:49.994
<v Speaker 0>Let's just try and work through the error

00:42:49.994 --> 00:42:52.875
<v Speaker 0>message. So it's complaining that

00:42:55.035 --> 00:42:57.250
<v Speaker 1>I maybe popped isn't guaranteed to work at

00:42:57.250 --> 00:42:58.290
<v Speaker 1>compile time.

00:42:59.730 --> 00:43:01.730
<v Speaker 0>So I don't think that's a problem. Let's

00:43:01.730 --> 00:43:03.970
<v Speaker 0>do that first. That should satisfy it. Now

00:43:03.970 --> 00:43:05.890
<v Speaker 0>what I wanna see is that we have

00:43:08.865 --> 00:43:09.985
<v Speaker 0>some path

00:43:11.585 --> 00:43:13.505
<v Speaker 0>which we know to be a string

00:43:13.985 --> 00:43:14.705
<v Speaker 0>is

00:43:16.465 --> 00:43:18.705
<v Speaker 0>I don't know why it keeps messing with

00:43:18.705 --> 00:43:19.505
<v Speaker 0>my code.

00:43:19.905 --> 00:43:22.305
<v Speaker 0>Gonna come from matches which is a vector

00:43:22.305 --> 00:43:22.945
<v Speaker 0>or string

00:43:23.730 --> 00:43:25.570
<v Speaker 0>We want the first one

00:43:27.330 --> 00:43:29.410
<v Speaker 1>Mhmm. Which returns an option and I wanna

00:43:29.410 --> 00:43:30.770
<v Speaker 0>be able to unwrap it.

00:43:32.770 --> 00:43:34.770
<v Speaker 0>Now I should be able to use this

00:43:34.930 --> 00:43:35.650
<v Speaker 0>here.

00:43:36.770 --> 00:43:38.450
<v Speaker 1>Maybe it's because we didn't unwrap it.

00:43:43.965 --> 00:43:45.965
<v Speaker 0>Still not very happy about it.

00:43:52.490 --> 00:43:53.849
<v Speaker 1>Oh, you know I'm gonna have close the

00:43:53.849 --> 00:43:56.569
<v Speaker 1>records. What is excess return? You want another

00:43:56.569 --> 00:43:58.410
<v Speaker 1>closing bracket at the end.

00:44:02.010 --> 00:44:03.450
<v Speaker 1>No. It's not always tight.

00:44:06.730 --> 00:44:09.285
<v Speaker 0>So what is excess return? Oh, no. I'm

00:44:09.285 --> 00:44:10.565
<v Speaker 0>doing this wrong. From

00:44:12.484 --> 00:44:14.325
<v Speaker 0>path dot exists.

00:44:14.724 --> 00:44:16.165
<v Speaker 0>Close. There we go.

00:44:16.405 --> 00:44:17.765
<v Speaker 0>User error. Okay.

00:44:20.325 --> 00:44:22.085
<v Speaker 0>Now we're getting the size thing again.

00:44:27.780 --> 00:44:30.260
<v Speaker 0>Let's get playing. So what happens what happens

00:44:30.260 --> 00:44:32.660
<v Speaker 1>if Let's just unwrap this.

00:44:34.980 --> 00:44:36.980
<v Speaker 1>What happens if matches doesn't have any elements

00:44:36.980 --> 00:44:37.220
<v Speaker 1>in?

00:44:39.315 --> 00:44:41.795
<v Speaker 1>What does unwrap what's unwrap then?

00:44:44.994 --> 00:44:46.275
<v Speaker 0>Okay. So we could

00:44:46.835 --> 00:44:48.355
<v Speaker 0>well, it should add her, but we can

00:44:48.355 --> 00:44:49.155
<v Speaker 0>also do

00:44:49.715 --> 00:44:50.515
<v Speaker 0>Okay.

00:44:51.075 --> 00:44:52.595
<v Speaker 0>No. We just want yeah. Let's just let

00:44:52.595 --> 00:44:53.075
<v Speaker 0>the add her.

00:44:54.650 --> 00:44:56.410
<v Speaker 1>You type for me. I think if I

00:44:56.410 --> 00:44:58.410
<v Speaker 0>do it as a reference, should be

00:45:00.810 --> 00:45:01.290
<v Speaker 1>I

00:45:03.450 --> 00:45:04.970
<v Speaker 0>wish I was better at this.

00:45:06.730 --> 00:45:08.665
<v Speaker 0>I definitely have a string here.

00:45:10.505 --> 00:45:13.224
<v Speaker 0>The problem is is that path dot let's

00:45:13.224 --> 00:45:15.705
<v Speaker 0>see what path dot from expects.

00:45:19.704 --> 00:45:21.704
<v Speaker 0>So it supports multiple types. What about if

00:45:21.704 --> 00:45:24.424
<v Speaker 0>I just use new? That one's an OS

00:45:23.970 --> 00:45:25.650
<v Speaker 0>string as a reference. Okay. We can make

00:45:25.650 --> 00:45:26.370
<v Speaker 0>that work.

00:45:26.690 --> 00:45:27.250
<v Speaker 0>So

00:45:29.090 --> 00:45:30.530
<v Speaker 1>new. Is this what

00:45:30.849 --> 00:45:32.370
<v Speaker 1>I decided not to do earlier?

00:45:34.369 --> 00:45:35.010
<v Speaker 0>Yes.

00:45:36.050 --> 00:45:37.490
<v Speaker 0>And I'll pass in a ref.

00:45:40.285 --> 00:45:41.805
<v Speaker 0>Why are you complaining now?

00:45:49.245 --> 00:45:50.765
<v Speaker 0>Why is it error message that was at

00:45:50.765 --> 00:45:51.165
<v Speaker 0>the bottom?

00:45:52.910 --> 00:45:54.590
<v Speaker 0>And the one set as an OS string.

00:46:13.224 --> 00:46:14.825
<v Speaker 0>Why do you hit me so much?

00:46:21.900 --> 00:46:23.900
<v Speaker 0>I'll show a path buff and I'm I'm

00:46:23.900 --> 00:46:25.020
<v Speaker 0>winging it now.

00:46:25.819 --> 00:46:28.540
<v Speaker 0>So that's my string. There's my path buff.

00:46:28.540 --> 00:46:30.460
<v Speaker 0>Please just be happy for once.

00:46:31.740 --> 00:46:33.339
<v Speaker 0>I haven't used it. Okay.

00:46:59.610 --> 00:47:00.330
<v Speaker 1>From.

00:47:03.850 --> 00:47:05.290
<v Speaker 0>Oh, no. Why is that unhappy?

00:47:08.945 --> 00:47:10.785
<v Speaker 0>Oh, yeah. It's immutable.

00:47:12.225 --> 00:47:13.825
<v Speaker 0>Guess we can fix that.

00:47:14.065 --> 00:47:16.225
<v Speaker 0>So as we can do a colon.

00:47:21.010 --> 00:47:23.170
<v Speaker 0>Is it finally happy? It's

00:47:23.970 --> 00:47:24.530
<v Speaker 0>Wow.

00:47:25.970 --> 00:47:27.090
<v Speaker 0>That was

00:47:27.809 --> 00:47:28.770
<v Speaker 0>painful.

00:47:29.250 --> 00:47:29.650
<v Speaker 1>Mhmm.

00:47:35.075 --> 00:47:37.075
<v Speaker 0>Let's see if our assertion works.

00:47:41.634 --> 00:47:43.395
<v Speaker 0>It still works. Okay.

00:47:44.035 --> 00:47:45.394
<v Speaker 0>Do we trust it or do we wanna

00:47:45.394 --> 00:47:47.394
<v Speaker 0>create a directory and see it fail? Well,

00:47:47.394 --> 00:47:49.315
<v Speaker 1>so what I would do is just

00:47:49.954 --> 00:47:52.410
<v Speaker 1>change the string. So never trust the test

00:47:52.410 --> 00:47:55.210
<v Speaker 1>that is broken broken broken passing.

00:47:56.490 --> 00:47:58.330
<v Speaker 1>You wanna see it fail as well.

00:47:59.050 --> 00:48:01.210
<v Speaker 1>So can we give it a path that's

00:48:01.690 --> 00:48:03.290
<v Speaker 1>clearly got a file in?

00:48:06.025 --> 00:48:07.705
<v Speaker 0>Well, yeah. I'm assuming this is maybe a

00:48:07.705 --> 00:48:09.305
<v Speaker 0>root path as well and we're not actually

00:48:09.305 --> 00:48:11.145
<v Speaker 0>using that temp directory that we put in.

00:48:11.145 --> 00:48:12.505
<v Speaker 0>So let's fix that.

00:48:13.305 --> 00:48:15.145
<v Speaker 0>We can confirm that with a

00:48:15.945 --> 00:48:18.100
<v Speaker 0>we can confirm that. That's all I mean.

00:48:18.100 --> 00:48:20.260
<v Speaker 0>Yeah. Okay. Let's create a directory.

00:48:20.340 --> 00:48:20.980
<v Speaker 0>So

00:48:23.460 --> 00:48:24.660
<v Speaker 0>just

00:48:24.660 --> 00:48:25.380
<v Speaker 0>show me.

00:48:30.315 --> 00:48:32.315
<v Speaker 0>Okay. Creator. Thank you.

00:48:34.555 --> 00:48:35.835
<v Speaker 0>Alright. So

00:48:36.875 --> 00:48:39.595
<v Speaker 0>let's cause this to actually break.

00:48:44.155 --> 00:48:45.730
<v Speaker 0>So we want path

00:48:46.130 --> 00:48:46.930
<v Speaker 0>from

00:48:47.170 --> 00:48:48.690
<v Speaker 0>world doctor,

00:48:49.250 --> 00:48:51.730
<v Speaker 0>which is our temp directory joined

00:48:52.610 --> 00:48:54.770
<v Speaker 0>with our matches.

00:48:54.770 --> 00:48:56.610
<v Speaker 0>Oh, no. We have already got that here.

00:48:56.610 --> 00:48:57.730
<v Speaker 0>So pop that up.

00:48:59.665 --> 00:49:01.984
<v Speaker 0>I don't know the directory is terrible but

00:49:01.984 --> 00:49:03.585
<v Speaker 0>we'll call it path just now.

00:49:04.545 --> 00:49:06.305
<v Speaker 0>So that should create it

00:49:07.905 --> 00:49:09.185
<v Speaker 0>once it's happy

00:49:10.865 --> 00:49:11.905
<v Speaker 0>and port fs.

00:49:17.530 --> 00:49:18.330
<v Speaker 0>Rest.

00:49:20.810 --> 00:49:21.930
<v Speaker 0>And whatever.

00:49:25.290 --> 00:49:26.490
<v Speaker 0>I don't know where that goes there.

00:49:31.195 --> 00:49:32.875
<v Speaker 0>Oh yeah, I can't use the question mark

00:49:32.875 --> 00:49:33.675
<v Speaker 0>because

00:49:39.835 --> 00:49:42.475
<v Speaker 0>we don't return a result in this function.

00:49:42.635 --> 00:49:43.035
<v Speaker 0>Okay.

00:49:43.569 --> 00:49:45.890
<v Speaker 0>And now path is complaining. Let's go back

00:49:45.890 --> 00:49:46.930
<v Speaker 0>to path buff.

00:49:48.530 --> 00:49:50.210
<v Speaker 0>Okay. It seems alright.

00:49:52.289 --> 00:49:54.050
<v Speaker 0>No. This is complaining down here

00:49:54.690 --> 00:49:57.285
<v Speaker 0>because this has moved path. So Rust does

00:49:57.285 --> 00:49:59.365
<v Speaker 0>this thing where every time you pass something

00:49:59.845 --> 00:50:00.645
<v Speaker 0>along,

00:50:01.444 --> 00:50:03.365
<v Speaker 0>it moves it in memory so we can

00:50:03.365 --> 00:50:04.964
<v Speaker 0>just say pass a reference to it that

00:50:04.964 --> 00:50:06.165
<v Speaker 0>keeps that happy.

00:50:06.405 --> 00:50:08.005
<v Speaker 0>Why is world complaining here?

00:50:09.010 --> 00:50:11.250
<v Speaker 0>Why is world? Oh yeah. So

00:50:13.730 --> 00:50:14.690
<v Speaker 0>much fun.

00:50:15.570 --> 00:50:16.290
<v Speaker 0>Okay.

00:50:17.730 --> 00:50:19.570
<v Speaker 0>So now this creates a directory which is

00:50:19.570 --> 00:50:21.730
<v Speaker 0>a directory we expect to work. Let's copy

00:50:21.730 --> 00:50:24.555
<v Speaker 0>and paste this exact code for that path

00:50:24.635 --> 00:50:26.475
<v Speaker 0>and this test should fail.

00:50:29.995 --> 00:50:32.075
<v Speaker 1>Why is it going red? Just because I

00:50:32.075 --> 00:50:32.955
<v Speaker 0>hadn't finished.

00:50:34.075 --> 00:50:35.835
<v Speaker 0>Oh that's actually that's just complaining because I'm

00:50:35.835 --> 00:50:37.510
<v Speaker 0>not doing everything with the return type.

00:50:38.470 --> 00:50:40.870
<v Speaker 0>I miss a yellow squiggle not red. Now

00:50:40.870 --> 00:50:42.950
<v Speaker 0>let's run that again. It should

00:50:43.270 --> 00:50:44.470
<v Speaker 0>should fail. Right?

00:50:45.110 --> 00:50:46.070
<v Speaker 1>Yeah. You'd hope to.

00:50:51.265 --> 00:50:52.305
<v Speaker 0>Did

00:50:53.105 --> 00:50:55.585
<v Speaker 0>it? Yeah. True false. So

00:50:56.785 --> 00:50:58.705
<v Speaker 0>now we know this code

00:50:58.865 --> 00:51:01.265
<v Speaker 0>works. If we take out the create.

00:51:01.825 --> 00:51:02.145
<v Speaker 0>Yep.

00:51:03.810 --> 00:51:05.730
<v Speaker 0>Then we should be in a passing situation

00:51:05.890 --> 00:51:06.770
<v Speaker 0>every time.

00:51:08.290 --> 00:51:09.010
<v Speaker 0>Yep.

00:51:14.130 --> 00:51:14.930
<v Speaker 0>There we go.

00:51:17.174 --> 00:51:19.255
<v Speaker 0>We have implemented one

00:51:19.255 --> 00:51:21.095
<v Speaker 0>step in fifty two minutes.

00:51:21.815 --> 00:51:22.535
<v Speaker 1>Yeah.

00:51:22.615 --> 00:51:24.855
<v Speaker 1>I mean, of that was our fault.

00:51:26.454 --> 00:51:28.615
<v Speaker 1>It's worth mentioning. If you had other examples

00:51:28.615 --> 00:51:31.734
<v Speaker 1>that also said, given I have no direct

00:51:30.990 --> 00:51:32.110
<v Speaker 1>recalled something,

00:51:32.270 --> 00:51:34.510
<v Speaker 1>then that they'd all be passing as well.

00:51:35.070 --> 00:51:36.350
<v Speaker 1>So you can see all the other scenarios

00:51:36.350 --> 00:51:38.110
<v Speaker 1>have one saying, given I have a directory

00:51:38.110 --> 00:51:39.310
<v Speaker 1>called git sync

00:51:40.670 --> 00:51:42.350
<v Speaker 1>or a local claim. So as soon as

00:51:42.350 --> 00:51:44.154
<v Speaker 1>we implement each one of these, they

00:51:44.795 --> 00:51:46.315
<v Speaker 1>it it has knock on effects for the

00:51:46.315 --> 00:51:48.795
<v Speaker 1>other scenarios, the other examples as well. So

00:51:48.795 --> 00:51:50.954
<v Speaker 1>what's the second line? What can we go

00:51:50.954 --> 00:51:52.474
<v Speaker 1>back to the output again for a sec?

00:51:52.875 --> 00:51:53.515
<v Speaker 1>Yeah.

00:51:53.994 --> 00:51:56.154
<v Speaker 1>So now it's complaining when I sync the

00:51:56.154 --> 00:51:57.835
<v Speaker 1>blah blah blah blah blah repository.

00:51:59.319 --> 00:52:01.079
<v Speaker 1>Mhmm. It doesn't it doesn't know what to

00:52:01.079 --> 00:52:01.640
<v Speaker 1>do.

00:52:03.240 --> 00:52:03.960
<v Speaker 0>No. Because

00:52:06.119 --> 00:52:08.839
<v Speaker 0>we're so familiar with this one step that

00:52:08.839 --> 00:52:10.760
<v Speaker 0>we have spent so much time and love

00:52:10.760 --> 00:52:11.880
<v Speaker 0>and energy on.

00:52:12.040 --> 00:52:13.800
<v Speaker 0>Would you not then copy and paste that

00:52:13.800 --> 00:52:15.905
<v Speaker 0>to satisfy pretty much every other

00:52:17.025 --> 00:52:18.545
<v Speaker 0>well, it would just be this one, wouldn't

00:52:18.545 --> 00:52:19.105
<v Speaker 0>it?

00:52:19.905 --> 00:52:22.465
<v Speaker 1>They all look different to me. Was I

00:52:22.625 --> 00:52:24.065
<v Speaker 0>have a direction. Yeah. That's what I mean.

00:52:24.065 --> 00:52:25.905
<v Speaker 0>Would you just would I just copy and

00:52:25.905 --> 00:52:27.745
<v Speaker 0>paste this and implement that given step or

00:52:27.745 --> 00:52:29.560
<v Speaker 0>would you just continue with the one example?

00:52:29.560 --> 00:52:30.599
<v Speaker 1>You could do. I would

00:52:31.800 --> 00:52:34.359
<v Speaker 1>I tend to just get one example working

00:52:34.359 --> 00:52:35.640
<v Speaker 1>because I kind of think at the end

00:52:35.640 --> 00:52:37.080
<v Speaker 1>of the example, I'm gonna commit.

00:52:37.480 --> 00:52:39.080
<v Speaker 1>And I'd probably be filtering out the other

00:52:39.080 --> 00:52:40.360
<v Speaker 1>scenarios. Like,

00:52:40.680 --> 00:52:41.800
<v Speaker 1>if you look at the gherkin.

00:52:43.785 --> 00:52:46.105
<v Speaker 0>Yeah. The gherkin. Yeah.

00:52:49.385 --> 00:52:52.105
<v Speaker 1>In terms of like breaking big

00:52:52.665 --> 00:52:54.345
<v Speaker 1>chunks of work down to little chunks, I'd

00:52:54.345 --> 00:52:55.625
<v Speaker 1>quite like to get that first one so

00:52:55.625 --> 00:52:56.105
<v Speaker 1>it works.

00:52:56.829 --> 00:52:59.309
<v Speaker 1>Okay. Let's do it. So Without without any

00:52:59.309 --> 00:53:00.270
<v Speaker 1>error handling.

00:53:02.109 --> 00:53:03.869
<v Speaker 1>But, you know, in that happy in a

00:53:03.869 --> 00:53:05.950
<v Speaker 1>happy case where there's no path already,

00:53:06.030 --> 00:53:08.430
<v Speaker 1>get that working and then, you know, take

00:53:08.430 --> 00:53:09.230
<v Speaker 1>the rest of the day off.

00:53:11.375 --> 00:53:13.215
<v Speaker 1>Have a long lunch. Anyways.

00:53:14.255 --> 00:53:16.734
<v Speaker 0>So we got a given rejects.

00:53:16.734 --> 00:53:20.015
<v Speaker 0>Now we need a when rejects

00:53:21.454 --> 00:53:23.880
<v Speaker 0>where a rejects here

00:53:25.960 --> 00:53:28.839
<v Speaker 0>is gonna be something followed by I'm just

00:53:28.839 --> 00:53:31.400
<v Speaker 0>gonna call the same function for now.

00:53:33.880 --> 00:53:35.880
<v Speaker 1>Yeah. You've got it in common top online

00:53:35.880 --> 00:53:38.545
<v Speaker 1>18. Okay. So we use the same function

00:53:38.545 --> 00:53:40.465
<v Speaker 0>just now so the compiler is happy.

00:53:41.025 --> 00:53:42.945
<v Speaker 0>But I'm gonna modify the string

00:53:43.265 --> 00:53:46.545
<v Speaker 0>and it is I think the

00:53:47.505 --> 00:53:48.225
<v Speaker 0>something

00:53:48.705 --> 00:53:49.665
<v Speaker 0>repository

00:53:49.665 --> 00:53:50.225
<v Speaker 0>and

00:53:51.260 --> 00:53:52.540
<v Speaker 0>this can be

00:53:53.740 --> 00:53:55.660
<v Speaker 0>pretty much anything. I think we just need

00:53:55.660 --> 00:53:58.140
<v Speaker 0>a pretty wide capture here, don't we?

00:53:58.540 --> 00:54:00.220
<v Speaker 0>And then we end with this. I

00:54:02.460 --> 00:54:04.380
<v Speaker 0>mean we could do okay.

00:54:04.859 --> 00:54:08.535
<v Speaker 0>Allow Not not. We allow forward slashes.

00:54:08.935 --> 00:54:10.055
<v Speaker 0>We allow

00:54:10.295 --> 00:54:11.015
<v Speaker 0>colon.

00:54:11.095 --> 00:54:13.255
<v Speaker 1>I I normally do

00:54:15.175 --> 00:54:16.375
<v Speaker 1>not double

00:54:16.775 --> 00:54:17.495
<v Speaker 1>quotes

00:54:18.535 --> 00:54:19.815
<v Speaker 1>in square brackets.

00:54:23.370 --> 00:54:24.170
<v Speaker 1>Hat.

00:54:24.810 --> 00:54:25.930
<v Speaker 1>Carrot. Double

00:54:27.130 --> 00:54:27.770
<v Speaker 1>quote.

00:54:28.410 --> 00:54:29.850
<v Speaker 1>Escapes properly.

00:54:30.730 --> 00:54:31.690
<v Speaker 1>Well, seems alright.

00:54:33.815 --> 00:54:35.575
<v Speaker 0>Well, let's test it. So we've got tester.

00:54:35.575 --> 00:54:41.495
<v Speaker 1>It's

00:54:41.495 --> 00:54:43.735
<v Speaker 1>mostly escaping inside the Rust strings that I'm

00:54:43.735 --> 00:54:45.095
<v Speaker 1>concerned about.

00:54:46.615 --> 00:54:47.975
<v Speaker 0>Okay.

00:54:48.770 --> 00:54:54.930
<v Speaker 0>So we expect this to match. Gethub.com/Kieran/David.

00:54:55.810 --> 00:54:57.810
<v Speaker 0>It doesn't we also want it to match

00:54:57.810 --> 00:54:59.410
<v Speaker 0>a private one.

00:55:01.010 --> 00:55:03.075
<v Speaker 1>No. We we want it to match. I

00:55:03.075 --> 00:55:03.795
<v Speaker 1>sync the

00:55:17.890 --> 00:55:18.930
<v Speaker 0>Yeah. Okay.

00:55:19.570 --> 00:55:20.850
<v Speaker 0>It seems quite happy.

00:55:23.890 --> 00:55:26.210
<v Speaker 0>Right. Now we need a new function.

00:55:26.855 --> 00:55:28.375
<v Speaker 0>So this is

00:55:28.535 --> 00:55:31.015
<v Speaker 0>f n sync get.

00:55:31.974 --> 00:55:33.255
<v Speaker 0>I'm

00:55:33.255 --> 00:55:34.295
<v Speaker 0>just gonna copy.

00:55:35.174 --> 00:55:35.815
<v Speaker 0>Yep.

00:55:36.775 --> 00:55:37.654
<v Speaker 0>Function signature.

00:55:40.320 --> 00:55:42.640
<v Speaker 1>So the the world would be for it

00:55:42.640 --> 00:55:43.440
<v Speaker 0>to pass.

00:55:44.160 --> 00:55:45.680
<v Speaker 1>So in some places,

00:55:46.240 --> 00:55:47.360
<v Speaker 1>like, I don't know if we've done it

00:55:47.360 --> 00:55:48.720
<v Speaker 1>in this scenario, but you might in a

00:55:48.720 --> 00:55:51.120
<v Speaker 1>later step say, on that directory,

00:55:51.625 --> 00:55:53.225
<v Speaker 1>you know, it should be cloned into that

00:55:53.225 --> 00:55:53.945
<v Speaker 1>directory.

00:55:54.585 --> 00:55:57.065
<v Speaker 1>So we might in that first step that

00:55:57.065 --> 00:55:57.545
<v Speaker 1>we

00:55:57.945 --> 00:55:59.625
<v Speaker 1>where we check the folder exists, we might

00:55:59.625 --> 00:56:01.785
<v Speaker 1>want to stash into the world the name

00:56:01.785 --> 00:56:02.745
<v Speaker 1>of the folder.

00:56:02.905 --> 00:56:03.785
<v Speaker 1>Do you see what I mean?

00:56:05.250 --> 00:56:07.570
<v Speaker 1>So even a later step where

00:56:09.170 --> 00:56:10.370
<v Speaker 0>So it is in the world. You got

00:56:13.810 --> 00:56:15.170
<v Speaker 0>The

00:56:15.170 --> 00:56:17.495
<v Speaker 0>direct the temp directory is stashed in the

00:56:17.495 --> 00:56:19.655
<v Speaker 0>world? No. The the name of the directory

00:56:19.655 --> 00:56:21.655
<v Speaker 1>that we're cloning into.

00:56:22.375 --> 00:56:24.455
<v Speaker 1>Let's tackle it later if we need to.

00:56:24.455 --> 00:56:25.975
<v Speaker 0>Oh, okay. I understand.

00:56:26.935 --> 00:56:28.455
<v Speaker 1>The world is somewhere where you might want

00:56:28.455 --> 00:56:29.895
<v Speaker 1>to keep things for later.

00:56:30.440 --> 00:56:31.960
<v Speaker 1>As a general rule,

00:56:33.320 --> 00:56:35.000
<v Speaker 1>and, you know, very general, and you can

00:56:35.000 --> 00:56:36.120
<v Speaker 1>break it sometimes,

00:56:37.080 --> 00:56:39.560
<v Speaker 1>you wanna be storing values in there.

00:56:42.040 --> 00:56:43.400
<v Speaker 1>If you start storing

00:56:44.715 --> 00:56:45.675
<v Speaker 1>entities

00:56:45.675 --> 00:56:47.835
<v Speaker 1>or services in there, it gets messy.

00:56:49.355 --> 00:56:50.715
<v Speaker 0>Okay. So let's

00:56:50.875 --> 00:56:54.475
<v Speaker 0>do that. We do have a directory path

00:56:54.475 --> 00:56:55.115
<v Speaker 0>buff there.

00:56:59.310 --> 00:57:00.910
<v Speaker 0>Oh, no. We saw the temp in that.

00:57:00.910 --> 00:57:02.590
<v Speaker 0>So really what we want is like a

00:57:02.670 --> 00:57:05.310
<v Speaker 0>clone there. Just a string. Just a string.

00:57:05.630 --> 00:57:06.990
<v Speaker 1>Name of the folder.

00:57:08.990 --> 00:57:10.590
<v Speaker 1>We can defer this until we need it

00:57:10.590 --> 00:57:12.270
<v Speaker 1>later. Might make more sense.

00:57:13.595 --> 00:57:14.315
<v Speaker 0>Okay.

00:57:14.395 --> 00:57:15.195
<v Speaker 0>Calendar

00:57:15.515 --> 00:57:17.035
<v Speaker 0>by default will be

00:57:18.234 --> 00:57:18.875
<v Speaker 0>blank.

00:57:19.515 --> 00:57:20.155
<v Speaker 0>Yeah.

00:57:22.474 --> 00:57:23.595
<v Speaker 0>Oh, yeah. It's a string.

00:57:27.490 --> 00:57:28.770
<v Speaker 0>Bank. Okay.

00:57:31.010 --> 00:57:31.890
<v Speaker 1>And then

00:57:32.130 --> 00:57:34.450
<v Speaker 1>in the step we can populate it.

00:57:36.049 --> 00:57:38.130
<v Speaker 0>Okay. In the given step. I mean, we

00:57:38.130 --> 00:57:38.609
<v Speaker 0>could try.

00:57:40.385 --> 00:57:42.305
<v Speaker 0>So what we're seeing here is world dot

00:57:42.305 --> 00:57:46.145
<v Speaker 0>cloned or is now equal to our path.

00:57:47.105 --> 00:57:47.745
<v Speaker 0>Yeah.

00:57:49.744 --> 00:57:51.505
<v Speaker 1>Yeah. So it means in a later step

00:57:51.505 --> 00:57:53.185
<v Speaker 1>if we if the step doesn't have the

00:57:53.185 --> 00:57:54.625
<v Speaker 1>name of the directory in it, we've got

00:57:54.625 --> 00:57:55.800
<v Speaker 1>that context.

00:57:56.760 --> 00:57:58.920
<v Speaker 1>If that's that in that's that state that

00:57:58.920 --> 00:58:00.280
<v Speaker 1>just lives for the example.

00:58:08.200 --> 00:58:09.720
<v Speaker 0>Why is it not letting me make that

00:58:09.720 --> 00:58:10.120
<v Speaker 0>mutable?

00:58:11.525 --> 00:58:12.165
<v Speaker 0>Oh.

00:58:17.605 --> 00:58:20.085
<v Speaker 0>Oh, because when I pass it in here.

00:58:24.405 --> 00:58:25.045
<v Speaker 0>There we go.

00:58:26.120 --> 00:58:26.840
<v Speaker 0>Right.

00:58:27.720 --> 00:58:29.720
<v Speaker 0>So we should have access to that here.

00:58:29.720 --> 00:58:31.400
<v Speaker 0>So what we're saying is we actually want

00:58:31.400 --> 00:58:33.000
<v Speaker 0>to clone it to that location.

00:58:33.480 --> 00:58:33.880
<v Speaker 0>So

00:58:34.440 --> 00:58:36.440
<v Speaker 1>I'm just saying if we needed the string.

00:58:36.840 --> 00:58:38.760
<v Speaker 0>Well, I mean we would anyway. But

00:58:40.005 --> 00:58:41.605
<v Speaker 1>what's this step gonna do?

00:58:42.964 --> 00:58:45.125
<v Speaker 1>This is actually gonna use our library, isn't

00:58:45.125 --> 00:58:45.605
<v Speaker 0>it?

00:58:46.164 --> 00:58:46.805
<v Speaker 1>Yeah.

00:58:47.125 --> 00:58:48.404
<v Speaker 1>So we talked about this last time, but

00:58:48.404 --> 00:58:49.365
<v Speaker 1>let's recap.

00:58:49.444 --> 00:58:51.605
<v Speaker 1>We've if you look at the Gherkin again,

00:58:51.605 --> 00:58:54.404
<v Speaker 1>we've got we wrote five or six examples.

00:58:56.870 --> 00:58:58.870
<v Speaker 1>But we decided that if if they'd all

00:58:58.870 --> 00:59:00.630
<v Speaker 1>been tested at the library, we wouldn't need

00:59:00.630 --> 00:59:02.950
<v Speaker 1>to test them all through the CLI application.

00:59:04.630 --> 00:59:06.870
<v Speaker 1>You still believe that? Yeah. Yeah.

00:59:07.565 --> 00:59:09.884
<v Speaker 1>And we we even tagged them. Right? Can

00:59:09.884 --> 00:59:13.085
<v Speaker 1>you show that? Mhmm. We tagged

00:59:14.924 --> 00:59:16.845
<v Speaker 1>if those first two are tested through the

00:59:16.845 --> 00:59:17.805
<v Speaker 1>CLI,

00:59:18.605 --> 00:59:20.204
<v Speaker 1>in the other examples,

00:59:20.770 --> 00:59:23.090
<v Speaker 1>there's nothing that CLI is doing differently. It's

00:59:23.090 --> 00:59:26.050
<v Speaker 1>just handling whatever error the library throws.

00:59:26.450 --> 00:59:28.050
<v Speaker 1>So we're gonna for a first step, we're

00:59:28.050 --> 00:59:29.890
<v Speaker 1>gonna test everything through the library.

00:59:30.370 --> 00:59:32.610
<v Speaker 1>And then later, David can come and write

00:59:32.610 --> 00:59:34.050
<v Speaker 1>a different set of steps that

00:59:34.484 --> 00:59:36.885
<v Speaker 1>shells out to the CLI command instead,

00:59:37.444 --> 00:59:39.845
<v Speaker 1>instead of calling things directly in Rust,

00:59:40.085 --> 00:59:41.845
<v Speaker 1>which will be slightly slower as well.

00:59:43.765 --> 00:59:44.405
<v Speaker 0>Okay.

00:59:44.964 --> 00:59:45.444
<v Speaker 0>Yep.

00:59:47.560 --> 00:59:48.920
<v Speaker 0>Okay. So

00:59:49.000 --> 00:59:51.640
<v Speaker 0>that means that we need to get sync

00:59:55.079 --> 00:59:57.240
<v Speaker 0>where we can figure the repository,

00:59:58.359 --> 01:00:00.745
<v Speaker 0>which comes from our

01:00:01.145 --> 01:00:02.265
<v Speaker 0>let's

01:00:02.265 --> 01:00:02.745
<v Speaker 0>just

01:00:04.505 --> 01:00:05.865
<v Speaker 0>repo URL

01:00:05.865 --> 01:00:07.625
<v Speaker 0>is actually equal

01:00:09.305 --> 01:00:13.240
<v Speaker 0>to our matches.pop.unwrap.

01:00:15.000 --> 01:00:16.040
<v Speaker 0>And then

01:00:16.200 --> 01:00:18.839
<v Speaker 0>that now becomes repo URL. We also need

01:00:18.839 --> 01:00:20.759
<v Speaker 0>to specify the data clone it too. It's

01:00:20.759 --> 01:00:22.680
<v Speaker 0>repelling from the world. It's our clunder.

01:00:24.215 --> 01:00:26.215
<v Speaker 0>We need an interval. So this is some

01:00:26.215 --> 01:00:27.815
<v Speaker 0>of the configuration that we said we just

01:00:27.815 --> 01:00:29.415
<v Speaker 0>weren't gonna tackle.

01:00:30.695 --> 01:00:32.215
<v Speaker 0>Seconds.

01:00:34.215 --> 01:00:35.015
<v Speaker 0>Call it 30.

01:00:37.140 --> 01:00:38.020
<v Speaker 0>Username,

01:00:38.180 --> 01:00:39.380
<v Speaker 0>no authentication,

01:00:39.460 --> 01:00:42.340
<v Speaker 0>no private key and no passphrase.

01:00:45.619 --> 01:00:47.220
<v Speaker 0>So that gives us a get sync object

01:00:47.220 --> 01:00:48.660
<v Speaker 0>that's not doing anything

01:00:48.660 --> 01:00:50.955
<v Speaker 0>yet and I can't remember exactly how this

01:00:50.955 --> 01:00:52.635
<v Speaker 0>code works so let's take a look.

01:00:53.275 --> 01:00:55.275
<v Speaker 0>Once we have the structure,

01:00:55.275 --> 01:00:57.915
<v Speaker 0>we can just call clone repository

01:00:57.915 --> 01:00:59.515
<v Speaker 0>and it should not

01:00:59.675 --> 01:01:01.275
<v Speaker 0>return an error. So

01:01:01.915 --> 01:01:04.075
<v Speaker 0>that means we need to first assign it,

01:01:04.200 --> 01:01:06.040
<v Speaker 0>So we'll call this get synced

01:01:06.040 --> 01:01:07.080
<v Speaker 0>and then

01:01:07.240 --> 01:01:09.160
<v Speaker 0>what we want to assert is

01:01:09.640 --> 01:01:11.640
<v Speaker 0>that we do not get an error

01:01:13.880 --> 01:01:15.560
<v Speaker 0>we can actually just call the function to

01:01:15.560 --> 01:01:16.360
<v Speaker 0>do Yeah. So

01:01:17.560 --> 01:01:19.400
<v Speaker 1>in given you often have to check something

01:01:19.400 --> 01:01:20.280
<v Speaker 1>or do

01:01:20.705 --> 01:01:22.865
<v Speaker 1>Well, less often in given, actually.

01:01:23.265 --> 01:01:25.105
<v Speaker 1>In when steps, which is at the end,

01:01:25.105 --> 01:01:27.105
<v Speaker 1>you often have to check something and then

01:01:27.105 --> 01:01:28.865
<v Speaker 1>throw an error. Most of the time in

01:01:28.865 --> 01:01:31.585
<v Speaker 1>given and when steps, you're just issuing commands

01:01:31.585 --> 01:01:34.385
<v Speaker 1>and you're trusting the underlying thing to throw

01:01:34.385 --> 01:01:34.945
<v Speaker 1>errors

01:01:36.120 --> 01:01:38.280
<v Speaker 1>or the when won't pass.

01:01:39.720 --> 01:01:41.560
<v Speaker 1>And and this git sync object,

01:01:41.560 --> 01:01:42.200
<v Speaker 1>Dave,

01:01:42.360 --> 01:01:43.080
<v Speaker 1>we

01:01:44.520 --> 01:01:47.160
<v Speaker 1>there's probably some way of initializing that

01:01:47.960 --> 01:01:49.160
<v Speaker 1>ahead of the steps, isn't there?

01:01:50.415 --> 01:01:52.975
<v Speaker 1>Either attaching it to the world or

01:01:55.135 --> 01:01:56.335
<v Speaker 1>we do that later.

01:01:56.815 --> 01:01:58.815
<v Speaker 1>There'll be some hook. The the world life

01:01:58.815 --> 01:02:00.255
<v Speaker 1>cycle is is

01:02:00.415 --> 01:02:02.175
<v Speaker 1>to the example, so there's probably some way

01:02:02.175 --> 01:02:03.500
<v Speaker 1>of creating it in the world at the

01:02:03.500 --> 01:02:04.060
<v Speaker 1>start,

01:02:04.380 --> 01:02:05.660
<v Speaker 1>attaching it to the world

01:02:05.980 --> 01:02:07.420
<v Speaker 1>if we were gonna be using it in

01:02:07.420 --> 01:02:08.460
<v Speaker 1>lots of steps.

01:02:11.740 --> 01:02:13.099
<v Speaker 0>Okay.

01:02:13.099 --> 01:02:15.339
<v Speaker 0>Mhmm. Ugh. Why do you keep complaining at

01:02:15.339 --> 01:02:15.579
<v Speaker 0>me?

01:02:19.125 --> 01:02:20.405
<v Speaker 0>I'm just gonna do this to hack you

01:02:20.405 --> 01:02:22.165
<v Speaker 0>and then I'll come back and fix it

01:02:22.165 --> 01:02:24.725
<v Speaker 0>properly. So cool in world

01:02:25.605 --> 01:02:26.485
<v Speaker 0>world.

01:02:27.765 --> 01:02:29.685
<v Speaker 0>And then I'll use my cool in

01:02:30.165 --> 01:02:30.805
<v Speaker 0>world.

01:02:33.765 --> 01:02:34.165
<v Speaker 1>Cool

01:02:40.539 --> 01:02:41.339
<v Speaker 0>Yeah.

01:02:42.779 --> 01:02:43.900
<v Speaker 0>Don't hate me.

01:02:45.579 --> 01:02:46.940
<v Speaker 0>Well, it doesn't implement clone.

01:02:54.315 --> 01:02:55.835
<v Speaker 0>Alright. That means I need to work this

01:02:55.835 --> 01:02:56.715
<v Speaker 0>out. Okay.

01:03:00.075 --> 01:03:02.795
<v Speaker 0>So the get sync library doesn't take a

01:03:02.795 --> 01:03:06.714
<v Speaker 0>reference to a directory. It expects it to

01:03:05.010 --> 01:03:06.770
<v Speaker 0>be mutable. I don't know why. That's probably

01:03:06.770 --> 01:03:08.770
<v Speaker 0>just a bad design decision.

01:03:08.770 --> 01:03:10.290
<v Speaker 0>So what I'm gonna do

01:03:12.130 --> 01:03:13.730
<v Speaker 0>Well, never has to it should never have

01:03:13.730 --> 01:03:14.610
<v Speaker 0>to modify on

01:03:16.130 --> 01:03:16.930
<v Speaker 1>that point.

01:03:17.410 --> 01:03:20.085
<v Speaker 1>The code that is in the step definitions

01:03:20.085 --> 01:03:21.925
<v Speaker 1>is very similar to the code that people

01:03:21.925 --> 01:03:23.765
<v Speaker 1>using in the library are gonna write.

01:03:24.005 --> 01:03:26.485
<v Speaker 0>Mhmm. So something that's benefit of

01:03:26.885 --> 01:03:28.085
<v Speaker 1>test first

01:03:29.125 --> 01:03:30.005
<v Speaker 1>is that,

01:03:30.885 --> 01:03:32.885
<v Speaker 1>you know, we'd have written these lines without

01:03:32.885 --> 01:03:35.120
<v Speaker 1>having implemented it yet if you're doing pure

01:03:35.120 --> 01:03:36.000
<v Speaker 1>TDD.

01:03:36.480 --> 01:03:38.080
<v Speaker 1>And that means that your

01:03:38.960 --> 01:03:41.920
<v Speaker 1>application API is gonna be very aligned with

01:03:41.920 --> 01:03:43.360
<v Speaker 1>the use cases. So

01:03:44.080 --> 01:03:46.240
<v Speaker 1>the line we're matching at the moment is

01:03:46.880 --> 01:03:48.960
<v Speaker 1>given us, you know, I sync the repository.

01:03:50.145 --> 01:03:51.825
<v Speaker 1>And the fact that came from a conversation

01:03:51.825 --> 01:03:52.785
<v Speaker 1>means that

01:03:53.345 --> 01:03:56.145
<v Speaker 1>that's something we're thinking about as one operation.

01:03:56.705 --> 01:03:59.185
<v Speaker 1>One, you know, one business action.

01:04:00.625 --> 01:04:01.185
<v Speaker 1>So

01:04:01.985 --> 01:04:03.825
<v Speaker 1>that should be one API I call that's

01:04:03.825 --> 01:04:04.865
<v Speaker 1>relatively simple

01:04:05.090 --> 01:04:07.810
<v Speaker 1>and maybe only takes the parameter,

01:04:09.090 --> 01:04:09.810
<v Speaker 1>you know,

01:04:10.210 --> 01:04:12.130
<v Speaker 1>largely only takes the parameter that's mentioned in

01:04:12.130 --> 01:04:12.850
<v Speaker 1>the text.

01:04:15.010 --> 01:04:17.170
<v Speaker 0>Yeah. That's a really frustrating thing with Rust

01:04:17.170 --> 01:04:19.665
<v Speaker 0>and you can't have partial structures without throwing

01:04:19.665 --> 01:04:21.345
<v Speaker 0>lots of optional types around.

01:04:21.745 --> 01:04:23.505
<v Speaker 0>Yeah. So you actually do need to specify

01:04:23.505 --> 01:04:24.305
<v Speaker 0>everything

01:04:24.305 --> 01:04:26.065
<v Speaker 0>here but I could definitely

01:04:29.985 --> 01:04:31.665
<v Speaker 0>Yeah. I'll need to work on that. I

01:04:31.665 --> 01:04:33.345
<v Speaker 0>think the design can be nicer. We shouldn't

01:04:33.345 --> 01:04:35.110
<v Speaker 0>always have to specify this stuff.

01:04:35.670 --> 01:04:37.270
<v Speaker 0>There is a default tree I could maybe

01:04:37.270 --> 01:04:39.190
<v Speaker 0>apply to it that would allow those values

01:04:39.190 --> 01:04:41.510
<v Speaker 0>to come out as none without being explicitly

01:04:41.510 --> 01:04:42.390
<v Speaker 0>specified.

01:04:44.950 --> 01:04:46.630
<v Speaker 1>So and you also try and match the

01:04:46.630 --> 01:04:47.590
<v Speaker 1>naming. So

01:04:48.710 --> 01:04:50.645
<v Speaker 1>what was the text of the step? I've

01:04:50.645 --> 01:04:51.525
<v Speaker 1>I've forgotten.

01:04:52.244 --> 01:04:53.685
<v Speaker 1>Scroll up a little bit, and we'll see

01:04:53.685 --> 01:04:56.565
<v Speaker 1>what the the git the gherkin text was.

01:05:00.645 --> 01:05:02.885
<v Speaker 1>When I sync the repository. So you want

01:05:02.885 --> 01:05:04.645
<v Speaker 1>the you ideally, you want the method to

01:05:04.645 --> 01:05:05.845
<v Speaker 1>be called sync

01:05:06.400 --> 01:05:08.480
<v Speaker 1>and the parameters to be called repository and

01:05:08.480 --> 01:05:09.760
<v Speaker 1>things like that just to make sure you're

01:05:09.760 --> 01:05:11.440
<v Speaker 1>really matching it to the you know, that

01:05:11.440 --> 01:05:13.760
<v Speaker 1>DDD thing of ubiquitous language. Mhmm.

01:05:14.240 --> 01:05:16.080
<v Speaker 1>Try and keep the objects named

01:05:16.640 --> 01:05:18.880
<v Speaker 1>the same way, that kind of thing. Yeah.

01:05:18.880 --> 01:05:21.600
<v Speaker 0>So the sync is what happens after the

01:05:20.655 --> 01:05:22.895
<v Speaker 0>clone when it enters the reconciliation loop. So

01:05:22.895 --> 01:05:24.575
<v Speaker 0>I think the language in the feature is

01:05:24.575 --> 01:05:26.895
<v Speaker 0>probably incorrect here rather than No. I think

01:05:26.895 --> 01:05:27.695
<v Speaker 1>it's correct.

01:05:28.415 --> 01:05:29.775
<v Speaker 1>When I sync it,

01:05:30.975 --> 01:05:32.495
<v Speaker 1>then the first thing the tool does is

01:05:32.495 --> 01:05:33.215
<v Speaker 1>it clones it.

01:05:33.980 --> 01:05:35.500
<v Speaker 1>So I I the user think of it

01:05:35.500 --> 01:05:37.260
<v Speaker 1>as a sync. I don't care about when

01:05:37.260 --> 01:05:38.700
<v Speaker 1>it's initially cloned. Right?

01:05:40.940 --> 01:05:43.579
<v Speaker 1>The way the the user facing API doesn't

01:05:43.579 --> 01:05:45.260
<v Speaker 1>ask the user to clone it first and

01:05:45.260 --> 01:05:46.859
<v Speaker 1>then sync. It's like, hey. You just start

01:05:46.859 --> 01:05:47.260
<v Speaker 1>syncing.

01:05:47.825 --> 01:05:49.184
<v Speaker 0>No. It does ask I think it does

01:05:49.184 --> 01:05:50.785
<v Speaker 0>ask it to oh, yeah. Maybe I could

01:05:50.785 --> 01:05:51.665
<v Speaker 0>fix that. Yeah.

01:05:52.224 --> 01:05:54.065
<v Speaker 1>No. I'm designing it from as if we

01:05:54.065 --> 01:05:56.865
<v Speaker 1>had hadn't written the code yet. Yeah.

01:05:57.744 --> 01:05:59.345
<v Speaker 1>The the kind of when we're in the

01:05:59.345 --> 01:06:00.704
<v Speaker 1>room when we're in the room with those

01:06:00.704 --> 01:06:02.384
<v Speaker 1>business guys that we were pretending in the

01:06:02.384 --> 01:06:02.785
<v Speaker 1>room with,

01:06:04.420 --> 01:06:06.020
<v Speaker 1>Every time they talked about this feature, they

01:06:06.020 --> 01:06:07.620
<v Speaker 1>said, when I sync the repository,

01:06:07.620 --> 01:06:08.820
<v Speaker 1>here's what should happen.

01:06:09.380 --> 01:06:11.380
<v Speaker 1>And they didn't talk about a clone step,

01:06:11.380 --> 01:06:13.060
<v Speaker 1>so we kinda captured that in the way

01:06:13.060 --> 01:06:14.180
<v Speaker 1>we wrote the scenario.

01:06:14.820 --> 01:06:16.260
<v Speaker 1>And therefore, we should try and capture that

01:06:16.260 --> 01:06:16.900
<v Speaker 1>in our API.

01:06:18.345 --> 01:06:19.065
<v Speaker 0>Okay.

01:06:19.945 --> 01:06:20.825
<v Speaker 1>If we can.

01:06:21.865 --> 01:06:23.705
<v Speaker 0>Let's run this test first.

01:06:24.025 --> 01:06:26.185
<v Speaker 1>Yeah. Don't rewrite it now. I'm just making

01:06:26.185 --> 01:06:27.305
<v Speaker 1>points for the viewers.

01:06:36.730 --> 01:06:39.290
<v Speaker 0>It's not a valid regular expression.

01:06:39.770 --> 01:06:42.250
<v Speaker 0>So the escaping thing you were worried about

01:06:42.410 --> 01:06:43.130
<v Speaker 0>has

01:06:43.290 --> 01:06:44.730
<v Speaker 0>no. Let's see why.

01:06:45.450 --> 01:06:47.930
<v Speaker 1>I think that

01:06:46.745 --> 01:06:49.145
<v Speaker 1>quote that double quote needs more.

01:06:51.705 --> 01:06:53.225
<v Speaker 1>Yeah. Maybe it doesn't need.

01:06:56.505 --> 01:06:57.145
<v Speaker 0>Yeah.

01:06:58.265 --> 01:07:00.345
<v Speaker 0>Either add one or remove one. I'm not

01:07:00.345 --> 01:07:01.305
<v Speaker 0>sure. Let's see.

01:07:07.119 --> 01:07:08.640
<v Speaker 0>Which version was that?

01:07:09.680 --> 01:07:11.440
<v Speaker 0>Depends on when it compiled and when I

01:07:11.440 --> 01:07:12.320
<v Speaker 0>saved it.

01:07:12.640 --> 01:07:13.599
<v Speaker 1>Well, look, it matched.

01:07:17.135 --> 01:07:18.815
<v Speaker 1>That's the important thing. There we go. Okay.

01:07:18.815 --> 01:07:19.775
<v Speaker 0>So Yep.

01:07:22.015 --> 01:07:22.655
<v Speaker 0>Worked.

01:07:23.215 --> 01:07:25.775
<v Speaker 1>Now I think I don't trust it. Yep.

01:07:25.775 --> 01:07:28.270
<v Speaker 0>Agreed. So let's how can I make that

01:07:28.270 --> 01:07:30.430
<v Speaker 0>function call fail? Let's take a look at

01:07:30.430 --> 01:07:30.910
<v Speaker 0>it.

01:07:31.230 --> 01:07:32.589
<v Speaker 0>It will fail if

01:07:38.190 --> 01:07:39.984
<v Speaker 1>Actually, we maybe don't need to. I mean,

01:07:39.984 --> 01:07:41.425
<v Speaker 1>we'll find out it's failed when we get

01:07:41.425 --> 01:07:42.865
<v Speaker 1>to the when step, won't we?

01:07:43.744 --> 01:07:45.425
<v Speaker 0>Well, we can copy that line of code

01:07:45.425 --> 01:07:47.585
<v Speaker 0>where we create the directory

01:07:48.065 --> 01:07:50.385
<v Speaker 0>and to this step and if clone

01:07:50.545 --> 01:07:51.585
<v Speaker 0>should fail.

01:07:53.825 --> 01:07:56.170
<v Speaker 0>So we can just do that. Confirm.

01:07:59.850 --> 01:08:01.130
<v Speaker 0>What have I got wrong?

01:08:03.530 --> 01:08:04.730
<v Speaker 0>Path is now

01:08:05.530 --> 01:08:06.890
<v Speaker 0>world dot cloned there.

01:08:18.095 --> 01:08:19.615
<v Speaker 0>So I don't think it'll clone into an

01:08:19.615 --> 01:08:20.495
<v Speaker 0>existing directory.

01:08:26.740 --> 01:08:29.380
<v Speaker 0>Oh, it did. Wonder because it's empty. It

01:08:29.380 --> 01:08:30.340
<v Speaker 0>doesn't care.

01:08:34.900 --> 01:08:36.100
<v Speaker 1>Can you look on your disc and see

01:08:36.100 --> 01:08:36.660
<v Speaker 1>what's going on?

01:08:39.935 --> 01:08:41.295
<v Speaker 0>I could have I knew where it was

01:08:41.295 --> 01:08:43.774
<v Speaker 0>calling to or not getting that output.

01:08:46.814 --> 01:08:49.295
<v Speaker 0>I mean I have rest log enabled.

01:08:51.580 --> 01:08:53.979
<v Speaker 0>Why is my debug statement not coming out

01:08:53.979 --> 01:08:54.780
<v Speaker 0>here?

01:08:59.180 --> 01:09:00.140
<v Speaker 0>Let's try

01:09:01.180 --> 01:09:04.140
<v Speaker 0>header. Right. That should probably always print and

01:09:04.140 --> 01:09:04.780
<v Speaker 0>then

01:09:05.180 --> 01:09:07.005
<v Speaker 0>make sure I have the right import.

01:09:12.525 --> 01:09:12.925
<v Speaker 0>Oops.

01:09:22.489 --> 01:09:23.529
<v Speaker 0>That should

01:09:23.929 --> 01:09:25.849
<v Speaker 0>really let that should print out the messages.

01:09:25.849 --> 01:09:27.849
<v Speaker 0>I'm assuming the best

01:09:29.770 --> 01:09:32.329
<v Speaker 0>BDD library is doing something on top of

01:09:32.329 --> 01:09:32.889
<v Speaker 0>that

01:09:33.449 --> 01:09:34.889
<v Speaker 0>to hide those messages.

01:09:37.745 --> 01:09:39.745
<v Speaker 0>And that's not really important to us right

01:09:39.745 --> 01:09:40.624
<v Speaker 0>now. So

01:09:41.425 --> 01:09:44.465
<v Speaker 0>let's just create a fake fail rust touch

01:09:44.465 --> 01:09:45.184
<v Speaker 0>fail.

01:09:47.585 --> 01:09:49.024
<v Speaker 1>Maybe we should press on

01:09:49.585 --> 01:09:52.109
<v Speaker 1>and go to the when step. And the

01:09:52.109 --> 01:09:53.630
<v Speaker 1>when step will fail if it's not cloning

01:09:53.630 --> 01:09:54.349
<v Speaker 1>properly.

01:09:54.830 --> 01:09:56.190
<v Speaker 1>And the point of the when step is

01:09:56.190 --> 01:09:58.269
<v Speaker 1>to check it's there.

01:10:00.190 --> 01:10:01.070
<v Speaker 0>Alright. Hold on.

01:10:03.994 --> 01:10:05.835
<v Speaker 1>You don't really need to add all this

01:10:05.835 --> 01:10:06.874
<v Speaker 1>extra debug.

01:10:06.955 --> 01:10:09.034
<v Speaker 1>The when step I just don't trust anything,

01:10:09.034 --> 01:10:11.034
<v Speaker 0>dude. And it's you keep going. I'm saying

01:10:11.034 --> 01:10:11.914
<v Speaker 1>it's for the viewers.

01:10:13.195 --> 01:10:14.875
<v Speaker 1>The when step is gonna check whether it

01:10:14.875 --> 01:10:15.594
<v Speaker 1>worked or not.

01:10:16.310 --> 01:10:18.390
<v Speaker 1>So all this extra stuff is just for

01:10:18.390 --> 01:10:20.870
<v Speaker 1>extra debug for future developers.

01:10:22.310 --> 01:10:24.390
<v Speaker 1>You know, you anything you add in your

01:10:24.390 --> 01:10:28.150
<v Speaker 1>given and when that checks it worked okay

01:10:28.905 --> 01:10:30.905
<v Speaker 1>It's just to make failures a bit less

01:10:30.905 --> 01:10:32.425
<v Speaker 1>mysterious next time around.

01:10:37.784 --> 01:10:40.105
<v Speaker 0>So if that failed touch works, then the

01:10:40.105 --> 01:10:41.945
<v Speaker 0>clone has to fail surely.

01:10:47.410 --> 01:10:49.010
<v Speaker 0>Have no idea what my code has done.

01:10:49.010 --> 01:10:51.170
<v Speaker 0>Okay, let's carry on and see what happens.

01:10:54.130 --> 01:10:57.170
<v Speaker 0>So the one step is

01:10:58.865 --> 01:11:01.745
<v Speaker 0>oh no. Then the repository is cloned and

01:11:01.745 --> 01:11:03.505
<v Speaker 0>the git sync directory.

01:11:07.985 --> 01:11:08.385
<v Speaker 0>Okay.

01:11:13.010 --> 01:11:13.650
<v Speaker 0>So

01:11:18.130 --> 01:11:19.570
<v Speaker 0>then reject.

01:11:19.730 --> 01:11:21.010
<v Speaker 0>Alright. Getting the hang of this.

01:11:29.364 --> 01:11:31.684
<v Speaker 0>The repository is cloned and

01:11:32.085 --> 01:11:34.165
<v Speaker 0>no. Do we need to specify this again?

01:11:34.165 --> 01:11:36.005
<v Speaker 0>Do we really use it from the world?

01:11:36.005 --> 01:11:37.204
<v Speaker 0>What would be the

01:11:37.925 --> 01:11:39.420
<v Speaker 0>right approach?

01:11:45.500 --> 01:11:48.060
<v Speaker 1>We have specified it again, so let's use

01:11:48.060 --> 01:11:50.380
<v Speaker 1>it. So we we we write the things

01:11:50.380 --> 01:11:50.940
<v Speaker 1>out

01:11:51.340 --> 01:11:53.100
<v Speaker 1>in a way that is clearest to a

01:11:53.100 --> 01:11:53.500
<v Speaker 1>reader.

01:11:55.715 --> 01:11:58.115
<v Speaker 1>The the what I was saying earlier is

01:11:58.115 --> 01:11:59.315
<v Speaker 1>if we'd written

01:12:00.515 --> 01:12:02.835
<v Speaker 1>and the repository is cloned into that directory,

01:12:02.835 --> 01:12:04.435
<v Speaker 1>we'd have been able to pull the the

01:12:04.435 --> 01:12:06.435
<v Speaker 1>string, get sync out of the world.

01:12:06.675 --> 01:12:08.515
<v Speaker 1>So so write it for a reader first.

01:12:09.540 --> 01:12:11.540
<v Speaker 1>Try not to try to make things clear

01:12:11.540 --> 01:12:13.780
<v Speaker 1>with what details are in which which line.

01:12:13.780 --> 01:12:15.780
<v Speaker 1>Mhmm. Drop out details if there's too much

01:12:15.780 --> 01:12:16.739
<v Speaker 1>stuff in there.

01:12:21.060 --> 01:12:22.420
<v Speaker 0>Okay. So

01:12:23.460 --> 01:12:24.740
<v Speaker 0>this returns world.

01:12:26.185 --> 01:12:28.585
<v Speaker 0>And this one is gonna be called

01:12:32.585 --> 01:12:34.745
<v Speaker 0>do we Check directory exists.

01:12:35.225 --> 01:12:36.985
<v Speaker 0>Check there is colon.

01:12:39.260 --> 01:12:41.659
<v Speaker 1>Oh. Yeah. That's that's stronger, isn't it?

01:12:46.540 --> 01:12:47.820
<v Speaker 0>That's our function.

01:12:49.180 --> 01:12:50.139
<v Speaker 1>Looks so.

01:12:51.020 --> 01:12:52.505
<v Speaker 1>So how do you check if

01:12:52.985 --> 01:12:55.545
<v Speaker 1>directories of client of a repo? I have

01:12:55.545 --> 01:12:57.625
<v Speaker 0>a method for this in my library.

01:12:58.425 --> 01:12:59.145
<v Speaker 1>Great.

01:13:00.585 --> 01:13:02.265
<v Speaker 1>Adds a slight point of failure, doesn't it?

01:13:02.265 --> 01:13:03.545
<v Speaker 1>The library could just lie to you.

01:13:05.389 --> 01:13:06.909
<v Speaker 0>Maybe I don't.

01:13:07.310 --> 01:13:08.909
<v Speaker 0>I can call it a public I thought

01:13:08.909 --> 01:13:10.989
<v Speaker 0>I had a test that opened the origin.

01:13:12.510 --> 01:13:14.510
<v Speaker 0>Oh, no. I do here. Yeah. So does

01:13:14.510 --> 01:13:15.550
<v Speaker 0>clone exist?

01:13:21.594 --> 01:13:22.315
<v Speaker 1>Yep.

01:13:22.635 --> 01:13:23.514
<v Speaker 1>Makes sense.

01:13:26.955 --> 01:13:28.635
<v Speaker 1>Hang on. What was that about not managed

01:13:28.635 --> 01:13:29.675
<v Speaker 1>by git sync?

01:13:30.715 --> 01:13:32.395
<v Speaker 0>So that's one of our other scenarios.

01:13:32.870 --> 01:13:34.710
<v Speaker 0>Maybe we shouldn't use that function.

01:13:36.790 --> 01:13:38.949
<v Speaker 0>So that's actually checks for the motes.

01:13:39.750 --> 01:13:41.190
<v Speaker 0>So I guess we just want to copy

01:13:41.190 --> 01:13:42.630
<v Speaker 0>this code and use it as a test

01:13:42.630 --> 01:13:44.950
<v Speaker 0>condition rather than using this function as a

01:13:45.670 --> 01:13:46.790
<v Speaker 1>No. Think let's call it.

01:13:47.715 --> 01:13:49.235
<v Speaker 0>Right. Okay. So

01:13:51.155 --> 01:13:52.835
<v Speaker 0>I think what we wanna do then is

01:13:52.835 --> 01:13:55.315
<v Speaker 0>store to get sync and our world,

01:13:55.315 --> 01:13:56.434
<v Speaker 0>which we do.

01:13:57.155 --> 01:13:58.434
<v Speaker 0>Actually update

01:13:58.915 --> 01:14:01.074
<v Speaker 0>it then and then just call that method.

01:14:01.940 --> 01:14:03.780
<v Speaker 1>Mhmm. So if we have our get sync

01:14:03.780 --> 01:14:06.099
<v Speaker 0>here, what we actually wanna say is

01:14:07.780 --> 01:14:09.860
<v Speaker 1>So that is there somewhere else we can

01:14:12.500 --> 01:14:13.380
<v Speaker 1>set it?

01:14:15.219 --> 01:14:16.020
<v Speaker 0>How do you mean?

01:14:19.494 --> 01:14:22.054
<v Speaker 1>Because now we're relying on running this step

01:14:22.054 --> 01:14:24.054
<v Speaker 1>before we run the latest step. There may

01:14:24.054 --> 01:14:26.135
<v Speaker 1>be a way of initializing git sync into

01:14:26.135 --> 01:14:28.215
<v Speaker 1>the world before every example,

01:14:30.695 --> 01:14:32.949
<v Speaker 1>depending what kind of hooks system

01:14:33.750 --> 01:14:35.189
<v Speaker 1>Cucumber Rust has.

01:14:36.150 --> 01:14:38.790
<v Speaker 1>This will work. Okay. But we'll work copy

01:14:38.790 --> 01:14:40.070
<v Speaker 0>and paste it for now. I think you're

01:14:40.070 --> 01:14:41.750
<v Speaker 0>right. Yeah. There there is probably some sort

01:14:41.750 --> 01:14:43.590
<v Speaker 0>of setup I can do around this.

01:14:45.195 --> 01:14:47.435
<v Speaker 1>Because you just later on don't want to

01:14:47.435 --> 01:14:49.835
<v Speaker 1>have a scenario where there's a different first

01:14:49.835 --> 01:14:50.474
<v Speaker 1>step

01:14:50.715 --> 01:14:52.235
<v Speaker 1>and then it checks the folder exists and

01:14:52.235 --> 01:14:53.514
<v Speaker 1>then it errors out because there's no git

01:14:53.514 --> 01:14:54.235
<v Speaker 1>sync in the world.

01:14:57.880 --> 01:14:59.960
<v Speaker 0>Okay. So I should be able to do

01:14:59.960 --> 01:15:01.080
<v Speaker 0>get sync.

01:15:07.240 --> 01:15:08.760
<v Speaker 0>Bet you that's not a public function.

01:15:12.645 --> 01:15:14.885
<v Speaker 0>Am I making it public for this? Just

01:15:14.885 --> 01:15:15.844
<v Speaker 0>for today?

01:15:19.205 --> 01:15:23.045
<v Speaker 0>Let's

01:15:23.045 --> 01:15:24.510
<v Speaker 0>see if it works. Right? And then We'll

01:15:24.510 --> 01:15:25.390
<v Speaker 1>refract to remove it.

01:15:41.095 --> 01:15:42.054
<v Speaker 1>Failed.

01:15:44.535 --> 01:15:47.175
<v Speaker 0>It's remote does not match get synced.

01:15:47.335 --> 01:15:47.495
<v Speaker 0>So

01:15:52.610 --> 01:15:54.610
<v Speaker 1>So maybe we're doing too much in that.

01:15:57.489 --> 01:15:59.570
<v Speaker 1>So let's just steal some of the code.

01:15:59.570 --> 01:16:00.850
<v Speaker 1>Let's just steal some of the code.

01:16:12.785 --> 01:16:14.785
<v Speaker 0>That actually it should be okay.

01:16:18.420 --> 01:16:20.739
<v Speaker 1>Now hang on. The the repo,

01:16:21.219 --> 01:16:22.260
<v Speaker 1>shouldn't that be

01:16:23.780 --> 01:16:24.820
<v Speaker 1>a URL?

01:16:28.739 --> 01:16:29.780
<v Speaker 1>Go back up.

01:16:30.100 --> 01:16:31.905
<v Speaker 1>Go go back to the step definition. What

01:16:31.905 --> 01:16:33.104
<v Speaker 1>are we calling it with?

01:16:40.304 --> 01:16:41.025
<v Speaker 1>In the check

01:16:42.545 --> 01:16:43.425
<v Speaker 1>go down a bit.

01:16:48.840 --> 01:16:51.400
<v Speaker 1>Does clone exist? But we're

01:16:51.800 --> 01:16:53.239
<v Speaker 0>We're calling on this.

01:16:53.560 --> 01:16:56.519
<v Speaker 1>Where's repo URL? Where's repo URL coming from?

01:16:57.480 --> 01:17:00.840
<v Speaker 1>That's wrong. It comes from the the match.

01:17:01.160 --> 01:17:03.695
<v Speaker 0>Oh, yeah. We don't have that here. That's

01:17:03.695 --> 01:17:05.135
<v Speaker 1>not in the step. So we what we

01:17:05.135 --> 01:17:06.575
<v Speaker 1>need what we need to have done is

01:17:06.575 --> 01:17:08.415
<v Speaker 1>in the previous step where we did the

01:17:08.415 --> 01:17:10.815
<v Speaker 1>clone, we need to have stashed the repo

01:17:10.815 --> 01:17:13.695
<v Speaker 1>URL into the world. I think we No.

01:17:14.815 --> 01:17:16.415
<v Speaker 0>We don't. Okay. So let's add.

01:17:18.630 --> 01:17:20.070
<v Speaker 1>And it gets a bit messy with having

01:17:20.070 --> 01:17:21.590
<v Speaker 1>all this state, which is why it's a

01:17:21.590 --> 01:17:23.750
<v Speaker 1>good idea to only have values in there.

01:17:24.710 --> 01:17:26.230
<v Speaker 1>You can imagine how messy that would get

01:17:26.230 --> 01:17:27.110
<v Speaker 1>if you had

01:17:28.949 --> 01:17:30.885
<v Speaker 1>I say anyhow, values. I'd just encourage you

01:17:30.885 --> 01:17:33.445
<v Speaker 1>to have the git sync service.

01:17:34.005 --> 01:17:36.085
<v Speaker 1>But don't have entities in there. Don't have

01:17:36.085 --> 01:17:37.605
<v Speaker 1>mutable objects in there.

01:17:38.405 --> 01:17:40.325
<v Speaker 1>You wanna be storing IDs of stuff that

01:17:40.325 --> 01:17:42.005
<v Speaker 1>you could then gonna retrieve again from the

01:17:42.005 --> 01:17:42.725
<v Speaker 1>relevant services.

01:17:44.290 --> 01:17:45.730
<v Speaker 1>So folder names,

01:17:45.890 --> 01:17:47.489
<v Speaker 1>repository URLs.

01:17:50.770 --> 01:17:53.170
<v Speaker 0>Missing

01:17:53.170 --> 01:17:53.890
<v Speaker 0>one twenty.

01:17:58.465 --> 01:17:59.184
<v Speaker 0>Okay.

01:18:00.145 --> 01:18:01.425
<v Speaker 0>So by default,

01:18:02.864 --> 01:18:03.985
<v Speaker 0>string from.

01:18:16.240 --> 01:18:18.000
<v Speaker 0>We've got a partial move.

01:18:18.400 --> 01:18:19.280
<v Speaker 0>Thanks.

01:18:19.280 --> 01:18:19.840
<v Speaker 0>Rest.

01:18:23.520 --> 01:18:26.640
<v Speaker 0>Let's

01:18:37.730 --> 01:18:39.010
<v Speaker 0>Now I need to make it mutable.

01:18:49.495 --> 01:18:51.975
<v Speaker 0>We put URL has moved here. I need

01:18:51.975 --> 01:18:53.175
<v Speaker 0>a clone of it.

01:18:53.895 --> 01:18:55.735
<v Speaker 0>It's horrible code but

01:18:56.135 --> 01:18:58.375
<v Speaker 0>I will fix it later when I understand

01:18:58.375 --> 01:18:58.935
<v Speaker 0>it more.

01:19:03.540 --> 01:19:06.020
<v Speaker 0>That's here as an as a mutable reference

01:19:06.020 --> 01:19:06.820
<v Speaker 0>to it.

01:19:07.540 --> 01:19:08.340
<v Speaker 0>Okay.

01:19:08.420 --> 01:19:10.179
<v Speaker 0>Or not probably mutable reference, but as an

01:19:10.179 --> 01:19:12.019
<v Speaker 0>owner reference and it's moved.

01:19:12.179 --> 01:19:13.540
<v Speaker 0>But I'm just gonna clone it for the

01:19:13.540 --> 01:19:14.340
<v Speaker 0>time being.

01:19:14.980 --> 01:19:16.820
<v Speaker 0>Because that's my answer to everything.

01:19:17.860 --> 01:19:19.864
<v Speaker 0>And then we have something similar here.

01:19:23.785 --> 01:19:25.145
<v Speaker 0>Partial move of world.

01:19:35.440 --> 01:19:37.519
<v Speaker 0>Okay. Just cool it. Whatever.

01:19:44.239 --> 01:19:46.400
<v Speaker 0>Rest can be a little infuriating at times,

01:19:46.400 --> 01:19:48.560
<v Speaker 0>but I still enjoy learning at the same

01:19:48.560 --> 01:19:48.800
<v Speaker 0>time.

01:19:51.204 --> 01:19:52.244
<v Speaker 0>It passed.

01:19:54.085 --> 01:19:56.484
<v Speaker 0>So we have a cloned repository.

01:19:58.005 --> 01:19:58.484
<v Speaker 1>Now

01:19:58.885 --> 01:20:00.564
<v Speaker 1>change the name of that

01:20:00.965 --> 01:20:02.885
<v Speaker 1>folder in the gherkin and run it again.

01:20:04.840 --> 01:20:05.560
<v Speaker 0>Okay.

01:20:07.480 --> 01:20:08.119
<v Speaker 0>Here?

01:20:08.760 --> 01:20:09.160
<v Speaker 0>Mhmm.

01:20:17.425 --> 01:20:18.704
<v Speaker 0>Don't know what happened there.

01:20:19.025 --> 01:20:20.465
<v Speaker 0>So that should fail.

01:20:20.945 --> 01:20:21.664
<v Speaker 0>Yeah.

01:20:22.145 --> 01:20:23.824
<v Speaker 1>Always always check it fails.

01:20:25.265 --> 01:20:25.824
<v Speaker 0>No.

01:20:32.550 --> 01:20:33.349
<v Speaker 0>Okay.

01:20:34.469 --> 01:20:35.269
<v Speaker 0>Why?

01:20:37.350 --> 01:20:38.790
<v Speaker 0>Well, because we're using Probably not using

01:20:39.909 --> 01:20:41.830
<v Speaker 0>We used the clone there from the previous

01:20:41.830 --> 01:20:42.550
<v Speaker 0>step.

01:20:44.230 --> 01:20:46.310
<v Speaker 1>Which is okay. It's just

01:20:47.325 --> 01:20:49.565
<v Speaker 1>you got something in two places kind of

01:20:49.565 --> 01:20:51.244
<v Speaker 1>thing. Yeah. Let's just match it So

01:20:53.725 --> 01:20:54.844
<v Speaker 1>I would do that.

01:20:55.885 --> 01:20:57.245
<v Speaker 1>If it look if you thought it was

01:20:57.245 --> 01:20:58.925
<v Speaker 1>redundant in the gherkin, you could just replace

01:20:58.925 --> 01:21:00.525
<v Speaker 1>it with the phrase like with the same

01:21:00.525 --> 01:21:01.485
<v Speaker 1>that directory.

01:21:02.980 --> 01:21:04.260
<v Speaker 1>And then it makes more sense that you're

01:21:04.260 --> 01:21:05.380
<v Speaker 1>getting it from the world. It's more of

01:21:05.380 --> 01:21:06.260
<v Speaker 1>an expectation.

01:21:06.740 --> 01:21:08.100
<v Speaker 0>Yeah. But that that's not what we have

01:21:08.100 --> 01:21:10.020
<v Speaker 0>noticed. I'm gonna do this.

01:21:20.955 --> 01:21:22.635
<v Speaker 0>Fail, fail, fail.

01:21:32.380 --> 01:21:33.980
<v Speaker 0>How many matches do we have in that

01:21:33.980 --> 01:21:35.659
<v Speaker 0>lane? Have I done have I done something

01:21:35.659 --> 01:21:36.379
<v Speaker 0>silly?

01:21:37.420 --> 01:21:37.820
<v Speaker 0>No.

01:21:49.804 --> 01:21:50.684
<v Speaker 0>Why

01:21:51.485 --> 01:21:52.925
<v Speaker 0>why does that work?

01:21:53.165 --> 01:21:54.125
<v Speaker 0>Why is it passing?

01:22:00.300 --> 01:22:01.739
<v Speaker 0>Oh, we're not asserting

01:22:01.900 --> 01:22:03.340
<v Speaker 0>the functions fine.

01:22:08.060 --> 01:22:10.060
<v Speaker 0>Assert equals. Good. Good work.

01:22:13.785 --> 01:22:15.545
<v Speaker 0>Yeah. So we expect that to say, yes,

01:22:15.545 --> 01:22:16.985
<v Speaker 0>this clone exists.

01:22:19.785 --> 01:22:20.905
<v Speaker 0>It's gonna fail.

01:22:25.465 --> 01:22:27.030
<v Speaker 1>So this is a good example why it's

01:22:27.030 --> 01:22:29.110
<v Speaker 1>good to do that little sanity check.

01:22:31.030 --> 01:22:32.869
<v Speaker 0>No. If we change it in future Now

01:22:32.869 --> 01:22:34.469
<v Speaker 1>when you fix it now when you fix

01:22:34.469 --> 01:22:36.230
<v Speaker 1>it, I'm gonna feel like it's actually testing

01:22:36.230 --> 01:22:36.949
<v Speaker 1>something.

01:22:37.830 --> 01:22:39.030
<v Speaker 1>And I'm gonna feel a lot more com

01:22:39.190 --> 01:22:41.955
<v Speaker 1>confident here. There we go. Great.

01:22:42.355 --> 01:22:44.275
<v Speaker 1>One scenario done. Five more to go. Let's

01:22:44.275 --> 01:22:46.355
<v Speaker 1>go. Well, we haven't got and the bootstrapping

01:22:46.355 --> 01:22:47.235
<v Speaker 0>completes.

01:22:48.595 --> 01:22:49.395
<v Speaker 1>Ah.

01:22:50.035 --> 01:22:50.835
<v Speaker 1>Yeah.

01:22:52.435 --> 01:22:54.275
<v Speaker 1>Does what does what would we actually check?

01:22:56.590 --> 01:22:57.870
<v Speaker 1>That's a tricky one, isn't it? Because it's

01:22:57.870 --> 01:22:59.310
<v Speaker 1>like it hands off to the next

01:22:59.950 --> 01:23:01.230
<v Speaker 1>stage of the process.

01:23:04.190 --> 01:23:05.949
<v Speaker 0>I don't think it means anything,

01:23:06.910 --> 01:23:08.510
<v Speaker 0>to be honest. Does it?

01:23:10.675 --> 01:23:11.475
<v Speaker 1>Maybe not.

01:23:11.875 --> 01:23:13.315
<v Speaker 1>So you could take it out.

01:23:15.795 --> 01:23:18.435
<v Speaker 1>You could I'm really having an empty set.

01:23:18.435 --> 01:23:20.035
<v Speaker 0>Yeah. I think why don't we make it

01:23:20.035 --> 01:23:21.795
<v Speaker 0>empty and then I think when we start

01:23:21.795 --> 01:23:24.840
<v Speaker 0>to add the reconciliation stuff later then maybe

01:23:24.840 --> 01:23:26.520
<v Speaker 0>we'll understand a bit more what it means

01:23:26.520 --> 01:23:28.040
<v Speaker 0>but right now I think there is a

01:23:28.040 --> 01:23:30.200
<v Speaker 0>handover and we should document it as such

01:23:30.200 --> 01:23:32.040
<v Speaker 0>even if I don't know what that means

01:23:32.040 --> 01:23:32.760
<v Speaker 0>yet.

01:23:33.320 --> 01:23:35.239
<v Speaker 1>Yes. So maybe just a comment in there.

01:23:35.400 --> 01:23:36.040
<v Speaker 0>So

01:23:36.920 --> 01:23:38.040
<v Speaker 0>and

01:23:46.875 --> 01:23:49.275
<v Speaker 0>or maybe there's no and maybe it's just

01:23:49.275 --> 01:23:50.155
<v Speaker 0>then

01:23:50.870 --> 01:23:51.590
<v Speaker 0>again

01:23:52.710 --> 01:23:55.510
<v Speaker 0>and the function would do nothing. We have

01:23:55.510 --> 01:23:56.790
<v Speaker 0>a do nothing, don't we?

01:23:57.750 --> 01:23:59.909
<v Speaker 0>I thought we did. I'll add it back.

01:24:01.910 --> 01:24:02.470
<v Speaker 1>Yeah.

01:24:03.355 --> 01:24:05.114
<v Speaker 1>Well, maybe it'd be good to document.

01:24:07.275 --> 01:24:07.915
<v Speaker 0>World.

01:24:11.915 --> 01:24:12.235
<v Speaker 0>Nothing.

01:24:16.190 --> 01:24:17.309
<v Speaker 0>Close that.

01:24:18.830 --> 01:24:19.550
<v Speaker 0>Button.

01:24:33.685 --> 01:24:35.685
<v Speaker 0>Oh, yeah. Because that was a regex. We

01:24:35.685 --> 01:24:37.445
<v Speaker 0>don't have a match and it do nothing.

01:24:37.445 --> 01:24:39.445
<v Speaker 0>So we need to take that out.

01:24:40.245 --> 01:24:41.365
<v Speaker 0>Should fix it.

01:24:55.580 --> 01:24:56.860
<v Speaker 0>Not implemented.

01:24:57.820 --> 01:24:59.580
<v Speaker 0>Oh, I've got the and and the master.

01:24:59.775 --> 01:25:00.735
<v Speaker 0>There we go.

01:25:17.110 --> 01:25:19.590
<v Speaker 1>So if we're doing TDD style, right, you'd

01:25:19.590 --> 01:25:20.070
<v Speaker 1>have

01:25:20.469 --> 01:25:21.429
<v Speaker 1>been writing

01:25:21.989 --> 01:25:23.670
<v Speaker 1>the code as you went.

01:25:24.550 --> 01:25:26.070
<v Speaker 1>So it would have taken longer,

01:25:26.710 --> 01:25:28.389
<v Speaker 1>but would have been sort of interleaved into

01:25:28.389 --> 01:25:29.844
<v Speaker 1>the time you took to write the code

01:25:29.844 --> 01:25:31.204
<v Speaker 1>and think through the problems.

01:25:32.324 --> 01:25:34.005
<v Speaker 1>Possibly, you'd have ended up with a slightly

01:25:34.005 --> 01:25:35.124
<v Speaker 1>cleaner API

01:25:35.205 --> 01:25:37.284
<v Speaker 1>or at least more use case focused,

01:25:38.725 --> 01:25:40.085
<v Speaker 1>but you still have had to solve all

01:25:40.085 --> 01:25:41.284
<v Speaker 1>those tricky problems

01:25:41.605 --> 01:25:43.364
<v Speaker 1>that you undoubtedly had to solve.

01:25:45.040 --> 01:25:46.480
<v Speaker 0>Uh-huh. I mean,

01:25:46.880 --> 01:25:49.199
<v Speaker 0>I think you're right as we were putting

01:25:49.199 --> 01:25:51.520
<v Speaker 0>that together, there were the ways in which

01:25:51.520 --> 01:25:53.360
<v Speaker 0>the code is being called that I don't

01:25:53.360 --> 01:25:55.520
<v Speaker 0>think I'm necessarily happy with. So I wanna

01:25:55.520 --> 01:25:57.520
<v Speaker 0>clean up the API definitely. But I'm happy

01:25:57.520 --> 01:25:59.120
<v Speaker 0>that we have one passing

01:25:59.305 --> 01:26:00.425
<v Speaker 0>scenario

01:26:00.425 --> 01:26:01.545
<v Speaker 0>and I see

01:26:02.825 --> 01:26:04.905
<v Speaker 0>those steps properly from the basis of most

01:26:04.905 --> 01:26:06.345
<v Speaker 0>of the other steps and the other scenarios

01:26:06.345 --> 01:26:08.825
<v Speaker 0>too. I'm hoping like there's not hopefully gonna

01:26:08.825 --> 01:26:10.825
<v Speaker 0>be too much other weird stuff.

01:26:12.739 --> 01:26:14.820
<v Speaker 0>In fact, yeah, looking at those other scenarios,

01:26:14.820 --> 01:26:17.140
<v Speaker 0>they're all get clones but with a different

01:26:17.140 --> 01:26:19.140
<v Speaker 0>origin name or a different remote like those

01:26:19.140 --> 01:26:20.900
<v Speaker 0>would be relatively easy to

01:26:21.380 --> 01:26:23.060
<v Speaker 0>to tweak for each step and reuse those

01:26:23.060 --> 01:26:24.900
<v Speaker 0>step definitions. So that's quite exciting.

01:26:27.605 --> 01:26:28.885
<v Speaker 0>I'm quite happy with that.

01:26:30.405 --> 01:26:32.165
<v Speaker 1>Right now, it's it's quite short in the

01:26:32.165 --> 01:26:34.245
<v Speaker 1>end of the the code. I think it's

01:26:34.245 --> 01:26:34.885
<v Speaker 1>a good

01:26:35.685 --> 01:26:37.285
<v Speaker 1>a good rule of thumb is that your

01:26:37.285 --> 01:26:39.124
<v Speaker 1>step definition shouldn't be too long.

01:26:39.925 --> 01:26:41.980
<v Speaker 1>Because if they are, it means that you

01:26:41.980 --> 01:26:43.260
<v Speaker 1>should probably write a method that does a

01:26:43.260 --> 01:26:43.980
<v Speaker 1>lot of stuff.

01:26:44.460 --> 01:26:45.820
<v Speaker 1>Because it's the kind of the code that

01:26:45.820 --> 01:26:47.420
<v Speaker 1>goes in those steps, it's the kind of

01:26:47.420 --> 01:26:49.180
<v Speaker 1>thing it's the kind of code that will

01:26:49.180 --> 01:26:51.580
<v Speaker 1>go in your CLI command wrappers.

01:26:52.300 --> 01:26:53.820
<v Speaker 1>When a web context, it's the kind of

01:26:53.820 --> 01:26:55.775
<v Speaker 1>code that will go in your controllers. It

01:26:55.775 --> 01:26:58.094
<v Speaker 1>could be like calling calling the real logic.

01:26:58.895 --> 01:27:00.175
<v Speaker 1>So if

01:27:00.655 --> 01:27:02.175
<v Speaker 1>if it's something you think of as one

01:27:02.175 --> 01:27:03.695
<v Speaker 1>step when you're talking to people, you should

01:27:03.695 --> 01:27:05.215
<v Speaker 1>make it, you know,

01:27:05.614 --> 01:27:06.175
<v Speaker 1>an action.

01:27:07.370 --> 01:27:10.490
<v Speaker 1>And if you're doing event sourcing or CQRS

01:27:10.490 --> 01:27:11.369
<v Speaker 1>type stuff,

01:27:12.330 --> 01:27:12.969
<v Speaker 1>it

01:27:13.290 --> 01:27:14.810
<v Speaker 1>should probably be a command,

01:27:15.370 --> 01:27:16.730
<v Speaker 1>sync the repository.

01:27:16.730 --> 01:27:18.810
<v Speaker 0>It shouldn't, you know, it shouldn't map onto

01:27:18.810 --> 01:27:20.975
<v Speaker 1>one thing being said along with us.

01:27:22.415 --> 01:27:23.054
<v Speaker 0>Yeah.

01:27:23.375 --> 01:27:24.655
<v Speaker 0>Well, I I think I need to work

01:27:24.655 --> 01:27:26.895
<v Speaker 0>out what happens after the bootstrapping completes, how

01:27:26.895 --> 01:27:29.855
<v Speaker 0>the reconciliation loop starts, how that handover happens.

01:27:29.855 --> 01:27:30.975
<v Speaker 0>I mean, in my head, I'm using

01:27:31.775 --> 01:27:33.695
<v Speaker 0>this is all built on something called actors.

01:27:34.120 --> 01:27:36.200
<v Speaker 0>I'm using an actress framework in Rust. So

01:27:36.200 --> 01:27:38.440
<v Speaker 0>really what I'm checking is that I

01:27:39.800 --> 01:27:43.080
<v Speaker 0>can start that actor. That's what bootstrapping complete

01:27:43.080 --> 01:27:44.760
<v Speaker 0>means. It's like we've now got a running

01:27:44.760 --> 01:27:45.640
<v Speaker 0>actor in the system.

01:27:47.175 --> 01:27:47.655
<v Speaker 0>So

01:27:48.295 --> 01:27:49.814
<v Speaker 0>I'll need to work on that.

01:27:50.614 --> 01:27:52.295
<v Speaker 0>I'm happy with that. Thank you for your

01:27:52.295 --> 01:27:55.094
<v Speaker 0>help there. That's really good. No problem. Alright.

01:27:56.855 --> 01:27:59.415
<v Speaker 0>Well, thank you again for joining me, sharing

01:27:59.415 --> 01:28:01.494
<v Speaker 0>all of your BDD knowledge. I'm really happy

01:28:01.494 --> 01:28:03.340
<v Speaker 0>we got that scenario completed. I hope it

01:28:03.340 --> 01:28:04.700
<v Speaker 0>was useful for other people. We've done the

01:28:04.700 --> 01:28:07.660
<v Speaker 1>whole journey together. We have done a long

01:28:07.660 --> 01:28:10.140
<v Speaker 0>journey together spread over many many weeks and

01:28:10.140 --> 01:28:11.579
<v Speaker 0>potentially months but

01:28:12.060 --> 01:28:12.940
<v Speaker 0>it's

01:28:13.900 --> 01:28:15.500
<v Speaker 0>it's good because every time we come back

01:28:15.500 --> 01:28:17.340
<v Speaker 0>to it, we do that recap for ourselves

01:28:17.340 --> 01:28:20.055
<v Speaker 0>which hopefully you know, is obviously useful for

01:28:20.055 --> 01:28:21.895
<v Speaker 0>people that are picking up too. So I

01:28:21.895 --> 01:28:23.415
<v Speaker 1>think I think we've shown the whole journey

01:28:23.415 --> 01:28:24.695
<v Speaker 1>from conversation

01:28:24.695 --> 01:28:27.255
<v Speaker 1>to you've now got a scenario that actually

01:28:27.255 --> 01:28:27.895
<v Speaker 1>runs.

01:28:28.935 --> 01:28:30.535
<v Speaker 1>You just make all you do is repeat

01:28:30.535 --> 01:28:31.895
<v Speaker 1>that now for all the other examples that

01:28:31.895 --> 01:28:33.415
<v Speaker 1>you've written, have more conversations,

01:28:34.420 --> 01:28:36.900
<v Speaker 1>and probably write some tests that run the

01:28:36.900 --> 01:28:38.179
<v Speaker 1>command line up.

01:28:38.739 --> 01:28:39.459
<v Speaker 1>But

01:28:39.780 --> 01:28:41.619
<v Speaker 1>it's just different given and whens that just

01:28:41.619 --> 01:28:44.179
<v Speaker 1>be doing slightly different things. Yeah. Well, I

01:28:44.179 --> 01:28:46.099
<v Speaker 0>will keep you updated anyway. Hopefully, I can

01:28:46.099 --> 01:28:48.179
<v Speaker 0>start contributing a bit more to this in

01:28:48.179 --> 01:28:50.295
<v Speaker 0>a regular cadence and actually making it a

01:28:50.295 --> 01:28:51.975
<v Speaker 0>bit more useful than just being the hacky

01:28:51.975 --> 01:28:53.495
<v Speaker 0>prototype that is. But

01:28:53.815 --> 01:28:55.655
<v Speaker 0>it has some very nice scenarios and it

01:28:55.655 --> 01:28:57.575
<v Speaker 0>has some pretty good testing coming up. So

01:28:57.575 --> 01:28:58.375
<v Speaker 0>again,

01:28:58.535 --> 01:28:59.895
<v Speaker 0>thank you for your time, Karen. I will

01:28:59.895 --> 01:29:01.735
<v Speaker 0>speak to you again soon and it's always

01:29:01.350 --> 01:29:03.429
<v Speaker 0>a pleasure. Have a nice day. Thanks, David.

01:29:03.430 --> 01:29:03.910
<v Speaker 1>Bye bye.
