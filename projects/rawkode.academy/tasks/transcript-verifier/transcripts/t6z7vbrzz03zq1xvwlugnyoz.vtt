WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: e67dc5b4-e550-4a84-9d41-c137f61848a8
Created: 2025-04-29T20:36:55.196Z
Duration: 3154.0427
Channels: 1

00:01:05.144 --> 00:01:07.945
<v Speaker 0>Hello and welcome to today's rather impromptu episode

00:01:07.945 --> 00:01:09.865
<v Speaker 0>of Rawkode Live. Today, we're gonna be taking

00:01:09.865 --> 00:01:12.104
<v Speaker 0>a look at Kubernetes services, breaking it down

00:01:12.104 --> 00:01:13.945
<v Speaker 0>and trying to understand how they work, how

00:01:13.945 --> 00:01:15.704
<v Speaker 0>to use them and anything else that pops

00:01:15.704 --> 00:01:18.600
<v Speaker 0>up. Today, I'm joined by Anna Ace and

00:01:18.600 --> 00:01:20.680
<v Speaker 0>Philip. Hello. How are you both?

00:01:21.560 --> 00:01:22.920
<v Speaker 1>Hello. Great.

00:01:23.159 --> 00:01:24.119
<v Speaker 1>Thank you. So,

00:01:25.159 --> 00:01:26.759
<v Speaker 0>at a moment Great to. Thanks for having

00:01:26.759 --> 00:01:28.679
<v Speaker 2>me. Yeah. No. My my pleasure, honestly.

00:01:29.325 --> 00:01:30.604
<v Speaker 0>Let's just quickly

00:01:31.884 --> 00:01:33.645
<v Speaker 0>I'll have you both do a quick introduction,

00:01:33.645 --> 00:01:35.164
<v Speaker 0>and then we'll talk about why we're here,

00:01:35.164 --> 00:01:36.524
<v Speaker 0>what we wanna cover, and then we'll just

00:01:36.524 --> 00:01:38.125
<v Speaker 0>get straight into it and see what happens.

00:01:38.125 --> 00:01:39.965
<v Speaker 0>So, Yves, would you like to go first?

00:01:39.965 --> 00:01:40.765
<v Speaker 1>Awesome.

00:01:40.844 --> 00:01:41.485
<v Speaker 1>Yeah. Sure.

00:01:42.899 --> 00:01:44.100
<v Speaker 1>So I guess,

00:01:44.659 --> 00:01:45.939
<v Speaker 1>also kind of the story of how it

00:01:45.939 --> 00:01:47.219
<v Speaker 1>came to this episode

00:01:47.380 --> 00:01:48.340
<v Speaker 1>in some way.

00:01:49.140 --> 00:01:52.340
<v Speaker 1>I've just recently transitioned into DevOps.

00:01:52.979 --> 00:01:54.740
<v Speaker 1>I've worked for the past years in the

00:01:54.740 --> 00:01:55.539
<v Speaker 1>blockchain industry,

00:01:55.975 --> 00:01:59.175
<v Speaker 1>mainly doing community management and developer relations,

00:01:59.735 --> 00:02:02.455
<v Speaker 1>and then found out about Codefresh,

00:02:02.455 --> 00:02:04.295
<v Speaker 1>which is a CICD platform,

00:02:04.935 --> 00:02:07.975
<v Speaker 1>and joined Codefresh mid of October.

00:02:07.975 --> 00:02:10.639
<v Speaker 1>And since then, I've embarked on this learning

00:02:10.639 --> 00:02:12.960
<v Speaker 1>journey across DevOps and

00:02:13.440 --> 00:02:16.720
<v Speaker 1>specifically learning everything that I can about Kubernetes.

00:02:16.720 --> 00:02:17.200
<v Speaker 1>So

00:02:17.840 --> 00:02:20.160
<v Speaker 1>I've made it my mission, so to say,

00:02:20.160 --> 00:02:22.160
<v Speaker 1>to put everything that I'm learning live

00:02:23.015 --> 00:02:25.015
<v Speaker 1>on a public Notion page where you can

00:02:25.015 --> 00:02:26.375
<v Speaker 1>read my notes and

00:02:26.694 --> 00:02:28.935
<v Speaker 1>everything that I come across and any resources

00:02:28.935 --> 00:02:30.695
<v Speaker 1>that I found particular useful.

00:02:31.175 --> 00:02:31.735
<v Speaker 1>So

00:02:32.375 --> 00:02:34.935
<v Speaker 1>I've just started, end of last year, a

00:02:34.935 --> 00:02:37.160
<v Speaker 1>challenge called one hundred days of Kubernetes, where

00:02:37.160 --> 00:02:39.560
<v Speaker 1>I aim to learn every day something new

00:02:39.560 --> 00:02:42.840
<v Speaker 1>about Kubernetes. And I've realized in the past

00:02:42.840 --> 00:02:43.640
<v Speaker 1>days,

00:02:43.720 --> 00:02:46.599
<v Speaker 1>so to say, that I don't quite understand

00:02:46.599 --> 00:02:49.319
<v Speaker 1>enough about services and specifically ports

00:02:49.955 --> 00:02:51.955
<v Speaker 1>within Kubernetes resources.

00:02:52.034 --> 00:02:54.115
<v Speaker 1>And so that's what this

00:02:54.275 --> 00:02:55.955
<v Speaker 1>episode is going to be more about.

00:02:56.515 --> 00:02:59.635
<v Speaker 1>Yeah. Awesome. Thank you. Philip?

00:03:00.515 --> 00:03:01.715
<v Speaker 2>Yeah. So I'm Philip.

00:03:02.420 --> 00:03:04.900
<v Speaker 2>I ended up on this livestream mostly because

00:03:04.900 --> 00:03:06.739
<v Speaker 2>I saw a tweet and offered to answer

00:03:06.739 --> 00:03:07.620
<v Speaker 2>some questions.

00:03:07.860 --> 00:03:09.220
<v Speaker 2>I've been in

00:03:09.620 --> 00:03:12.180
<v Speaker 2>cloud and containers and Kubernetes for quite a

00:03:12.180 --> 00:03:13.860
<v Speaker 2>long time. It's more like ten years than

00:03:13.860 --> 00:03:15.860
<v Speaker 2>one hundred days. I started a PaaS company

00:03:15.860 --> 00:03:16.660
<v Speaker 2>in 02/2009

00:03:17.415 --> 00:03:20.215
<v Speaker 2>and I'm currently spending my days working on

00:03:20.215 --> 00:03:22.215
<v Speaker 2>an open source Terraform framework

00:03:22.375 --> 00:03:24.935
<v Speaker 2>that helps people do GitOps with Terraform for

00:03:24.935 --> 00:03:26.215
<v Speaker 2>Kubernetes, basically.

00:03:27.015 --> 00:03:27.575
<v Speaker 2>And,

00:03:27.974 --> 00:03:30.540
<v Speaker 2>yeah, well, I just am excited to see

00:03:30.540 --> 00:03:31.900
<v Speaker 2>what the questions are gonna be and if

00:03:31.900 --> 00:03:33.260
<v Speaker 2>we can figure it out together.

00:03:34.620 --> 00:03:37.180
<v Speaker 0>Fingers crossed. I'm I'm I'm sure between us

00:03:37.180 --> 00:03:39.100
<v Speaker 0>we'll we'll get through this for sure.

00:03:40.060 --> 00:03:42.540
<v Speaker 0>Alright. Yes. We'll I'm I'm pretty sure. Yeah.

00:03:42.540 --> 00:03:43.980
<v Speaker 0>I mean, I'm confident. I mean,

00:03:44.735 --> 00:03:46.334
<v Speaker 0>know it's one of those things. The more

00:03:46.334 --> 00:03:48.815
<v Speaker 0>you use Kubernetes, I think the more things

00:03:48.815 --> 00:03:50.655
<v Speaker 0>you learn that you just don't understand were

00:03:50.655 --> 00:03:53.694
<v Speaker 0>there. So but Yeah. But That comes more

00:03:53.694 --> 00:03:54.335
<v Speaker 1>natural.

00:03:55.295 --> 00:03:56.095
<v Speaker 0>Exactly.

00:03:56.735 --> 00:03:58.895
<v Speaker 0>Alright. So why don't we start with

00:03:59.730 --> 00:04:02.210
<v Speaker 0>was there any YAML and specifically that you

00:04:02.210 --> 00:04:03.890
<v Speaker 0>were working with, Anais, that you would like

00:04:03.890 --> 00:04:05.970
<v Speaker 0>us to use and go through to try

00:04:05.970 --> 00:04:07.010
<v Speaker 0>and break down? Or do you want me

00:04:07.010 --> 00:04:08.770
<v Speaker 0>just to throw something together really quickly and

00:04:08.770 --> 00:04:10.850
<v Speaker 0>we can talk about the different components as

00:04:10.850 --> 00:04:11.890
<v Speaker 0>we kind of go?

00:04:12.930 --> 00:04:15.224
<v Speaker 1>Yeah. So I was just using, like, a

00:04:15.224 --> 00:04:16.264
<v Speaker 1>really basic

00:04:16.745 --> 00:04:19.144
<v Speaker 1>React application and kind of deploying

00:04:19.625 --> 00:04:22.185
<v Speaker 1>the container on my cluster and getting up

00:04:22.185 --> 00:04:23.625
<v Speaker 1>and running through a deployment,

00:04:23.785 --> 00:04:26.345
<v Speaker 1>and then started from there to integrate, like,

00:04:26.345 --> 00:04:28.505
<v Speaker 1>services with it on the cluster. So it's

00:04:28.505 --> 00:04:29.625
<v Speaker 1>really basic YAML.

00:04:30.320 --> 00:04:33.280
<v Speaker 1>The main problem was basically that there's there

00:04:33.280 --> 00:04:34.640
<v Speaker 1>are lots of resources,

00:04:34.720 --> 00:04:36.720
<v Speaker 1>but there are little resources that go in

00:04:36.720 --> 00:04:39.120
<v Speaker 1>detail of, like, the different components that make

00:04:39.120 --> 00:04:40.480
<v Speaker 1>up that YAML file.

00:04:41.120 --> 00:04:43.520
<v Speaker 1>So, yeah, feel free to throw something together.

00:04:43.920 --> 00:04:44.720
<v Speaker 1>That might be interesting.

00:04:45.465 --> 00:04:47.384
<v Speaker 0>Hey. Well, yeah. Let's see if I can

00:04:47.384 --> 00:04:49.065
<v Speaker 0>remember how to YAML. But

00:04:49.625 --> 00:04:51.305
<v Speaker 0>what I'll do is

00:04:52.985 --> 00:04:54.104
<v Speaker 0>throw together

00:04:54.985 --> 00:04:56.905
<v Speaker 0>two NGINX services.

00:04:57.145 --> 00:04:59.430
<v Speaker 0>So we'll call this NGINX one and I

00:04:59.430 --> 00:05:01.110
<v Speaker 0>know it's state partially difficult to read, but

00:05:01.110 --> 00:05:03.110
<v Speaker 0>hopefully the code here should be better.

00:05:03.990 --> 00:05:05.670
<v Speaker 0>So we have a deployment, we'll call this

00:05:05.670 --> 00:05:06.790
<v Speaker 0>NGINX one

00:05:07.590 --> 00:05:08.790
<v Speaker 0>and we'll deploy

00:05:08.950 --> 00:05:09.830
<v Speaker 0>NGINX.

00:05:10.925 --> 00:05:12.685
<v Speaker 0>I'll just let this yell at me, and

00:05:12.685 --> 00:05:15.165
<v Speaker 0>nginx runs on port 80. This is what

00:05:15.165 --> 00:05:17.165
<v Speaker 0>I would just call a really standard

00:05:18.205 --> 00:05:18.845
<v Speaker 0>deployment.

00:05:19.165 --> 00:05:21.965
<v Speaker 0>And we'll have two. So let's do, oh,

00:05:22.125 --> 00:05:22.605
<v Speaker 0>too much.

00:05:24.280 --> 00:05:26.280
<v Speaker 0>And what we wanna do is, I'm assuming

00:05:26.280 --> 00:05:28.759
<v Speaker 0>when you were working through the YAML that

00:05:28.759 --> 00:05:31.320
<v Speaker 0>you were working with us, want two services

00:05:31.320 --> 00:05:33.240
<v Speaker 0>or two deployments or pods to be able

00:05:33.240 --> 00:05:35.800
<v Speaker 0>to communicate with each other over the Kubernetes

00:05:35.445 --> 00:05:36.165
<v Speaker 0>control plane.

00:05:37.285 --> 00:05:39.205
<v Speaker 1>Yeah. Yeah. That as well. And

00:05:39.765 --> 00:05:42.325
<v Speaker 1>also, I mean, starting, like, really simple,

00:05:42.885 --> 00:05:44.965
<v Speaker 1>just how do you access

00:05:45.205 --> 00:05:47.045
<v Speaker 1>how would you access starting from, like, the

00:05:47.045 --> 00:05:49.820
<v Speaker 1>beginning? How would you create a note port

00:05:49.820 --> 00:05:50.780
<v Speaker 1>and access

00:05:50.860 --> 00:05:52.220
<v Speaker 1>your application,

00:05:52.460 --> 00:05:53.820
<v Speaker 1>your running application?

00:05:54.700 --> 00:05:57.660
<v Speaker 1>It's like one step back. Yeah. I don't

00:05:57.660 --> 00:05:59.260
<v Speaker 2>think that's actually a step back.

00:06:00.620 --> 00:06:02.780
<v Speaker 2>I would probably start from inside out.

00:06:03.100 --> 00:06:03.660
<v Speaker 2>Right? So,

00:06:04.725 --> 00:06:07.125
<v Speaker 2>I think it's better to first understand what

00:06:07.125 --> 00:06:09.685
<v Speaker 2>a pod does and how the communication

00:06:09.925 --> 00:06:12.565
<v Speaker 2>between multiple containers inside a pod would work.

00:06:12.965 --> 00:06:14.565
<v Speaker 2>And then we can go how can two

00:06:14.565 --> 00:06:16.805
<v Speaker 2>pods talk to each other. And then we

00:06:16.805 --> 00:06:18.565
<v Speaker 2>can go to the point of

00:06:18.805 --> 00:06:19.685
<v Speaker 2>how

00:06:20.449 --> 00:06:22.449
<v Speaker 2>do we deploy a bunch of pods from

00:06:22.449 --> 00:06:25.169
<v Speaker 2>a deployment. Right? Because that's again, it's another

00:06:25.169 --> 00:06:26.850
<v Speaker 2>abstraction layer on top already.

00:06:29.410 --> 00:06:30.770
<v Speaker 2>So I don't know how how

00:06:31.410 --> 00:06:32.930
<v Speaker 2>I don't know how to start this. Should

00:06:32.930 --> 00:06:35.970
<v Speaker 2>we just, like, look at the pod for

00:06:35.325 --> 00:06:36.445
<v Speaker 2>a starting point?

00:06:37.645 --> 00:06:38.125
<v Speaker 0>There

00:06:38.685 --> 00:06:40.125
<v Speaker 0>is quite a lot on what you mentioned

00:06:40.125 --> 00:06:41.245
<v Speaker 0>there. So

00:06:41.565 --> 00:06:42.445
<v Speaker 0>let's let's

00:06:44.205 --> 00:06:45.965
<v Speaker 0>So yeah, what you said there is we

00:06:45.965 --> 00:06:48.685
<v Speaker 0>could talk about the networking model with multiple

00:06:48.685 --> 00:06:50.765
<v Speaker 0>containers in the single pod without ever reaching

00:06:50.765 --> 00:06:53.540
<v Speaker 0>the network stack across the services first,

00:06:53.620 --> 00:06:55.620
<v Speaker 0>That's your suggestion, okay.

00:06:56.340 --> 00:06:57.300
<v Speaker 0>So let's

00:06:57.460 --> 00:06:59.780
<v Speaker 0>modify our first pods back then, I'll add

00:06:59.780 --> 00:07:01.460
<v Speaker 0>a second container, we'll deploy it to the

00:07:01.460 --> 00:07:02.580
<v Speaker 0>cluster and then

00:07:03.060 --> 00:07:06.275
<v Speaker 0>we can talk about what is actually here.

00:07:06.275 --> 00:07:08.115
<v Speaker 0>So we'll call this NGINX one dot two

00:07:08.115 --> 00:07:09.795
<v Speaker 0>and NGINX one dot one

00:07:11.155 --> 00:07:13.475
<v Speaker 0>and that won't actually work, will it? Because

00:07:13.475 --> 00:07:14.835
<v Speaker 0>the ports

00:07:16.354 --> 00:07:18.354
<v Speaker 0>will try to bind on the same interface.

00:07:18.420 --> 00:07:20.580
<v Speaker 0>So let's deploy something else.

00:07:24.260 --> 00:07:26.100
<v Speaker 0>What's that? In this case?

00:07:26.820 --> 00:07:29.140
<v Speaker 0>Yes, please. In this case, how do you

00:07:29.140 --> 00:07:31.140
<v Speaker 1>know that the container port is 80? Is

00:07:31.140 --> 00:07:32.580
<v Speaker 1>it is it by default?

00:07:33.225 --> 00:07:35.145
<v Speaker 2>I'm just yeah, I'm just really familiar with

00:07:35.145 --> 00:07:36.905
<v Speaker 0>NGINX and I know that it runs on

00:07:36.905 --> 00:07:38.905
<v Speaker 0>port 80 as does HTTPD,

00:07:38.905 --> 00:07:41.065
<v Speaker 0>know, this is like the the standard non

00:07:41.065 --> 00:07:42.745
<v Speaker 0>TLS HTTP

00:07:42.824 --> 00:07:43.545
<v Speaker 0>port

00:07:43.865 --> 00:07:44.745
<v Speaker 0>and

00:07:45.289 --> 00:07:47.210
<v Speaker 0>maybe Philip can explain this slightly better than

00:07:47.210 --> 00:07:49.930
<v Speaker 0>I can now. So if you run multiple

00:07:49.930 --> 00:07:52.090
<v Speaker 0>containers in a single pod, they share the

00:07:52.090 --> 00:07:55.289
<v Speaker 0>same namespace of networking space, which means that

00:07:55.289 --> 00:07:57.289
<v Speaker 0>we cannot have two engine access running on

00:07:57.289 --> 00:07:59.735
<v Speaker 0>port I believe, and we can confirm that

00:07:59.735 --> 00:08:01.495
<v Speaker 0>just now actually, but if I try to

00:08:01.495 --> 00:08:03.735
<v Speaker 0>deploy this, it will fail. Is that right,

00:08:03.735 --> 00:08:04.294
<v Speaker 0>Philip?

00:08:05.094 --> 00:08:07.254
<v Speaker 2>Yes. That's pretty right. So I think basically

00:08:07.254 --> 00:08:08.534
<v Speaker 2>the way I look at this, and I'm

00:08:08.534 --> 00:08:10.615
<v Speaker 2>no expert in networking at all, I just

00:08:11.400 --> 00:08:13.639
<v Speaker 2>help myself by, you know, having like a

00:08:13.639 --> 00:08:16.360
<v Speaker 2>bridge to understand this. Basically, I'm looking at

00:08:16.360 --> 00:08:18.840
<v Speaker 2>a port as a computer.

00:08:19.000 --> 00:08:21.000
<v Speaker 2>Right? It has one network interface, has one

00:08:21.000 --> 00:08:23.720
<v Speaker 2>IP address, and so it shares

00:08:25.335 --> 00:08:28.375
<v Speaker 2>the port namespace. Right? So any port inside

00:08:28.375 --> 00:08:30.535
<v Speaker 2>this one computer can only be used once.

00:08:30.695 --> 00:08:32.054
<v Speaker 2>Of course, that isn't true because you can

00:08:32.054 --> 00:08:33.414
<v Speaker 2>have virtual interfaces.

00:08:33.575 --> 00:08:35.495
<v Speaker 2>And then each virtual interface has its own

00:08:35.495 --> 00:08:38.375
<v Speaker 2>set of ports. Right? But for this specific

00:08:38.375 --> 00:08:40.339
<v Speaker 2>example, it's just the port has

00:08:40.579 --> 00:08:42.579
<v Speaker 2>one of those pod IPs.

00:08:42.820 --> 00:08:43.380
<v Speaker 2>Right?

00:08:43.699 --> 00:08:47.459
<v Speaker 2>And so any container you start inside shares

00:08:47.860 --> 00:08:50.180
<v Speaker 2>the number of available ports. So you cannot

00:08:50.180 --> 00:08:51.220
<v Speaker 2>use them twice.

00:08:52.100 --> 00:08:53.779
<v Speaker 2>And if they want to talk to each

00:08:53.779 --> 00:08:54.820
<v Speaker 2>other within

00:08:55.060 --> 00:08:56.135
<v Speaker 2>that that port,

00:08:56.295 --> 00:08:58.055
<v Speaker 2>they can talk to each other. So one

00:08:58.055 --> 00:09:00.375
<v Speaker 2>container talking to another container inside the same

00:09:00.375 --> 00:09:03.095
<v Speaker 2>port, they can talk to each other localhost

00:09:03.575 --> 00:09:05.495
<v Speaker 2>and that port that you are listening on.

00:09:05.495 --> 00:09:07.495
<v Speaker 2>So if you start nginx twice, you would

00:09:07.495 --> 00:09:09.270
<v Speaker 2>have to have one of them listen on

00:09:09.430 --> 00:09:10.150
<v Speaker 2>a different

00:09:10.630 --> 00:09:11.350
<v Speaker 2>port.

00:09:11.670 --> 00:09:14.390
<v Speaker 0>Exactly. And we've just confirmed that. We can

00:09:14.390 --> 00:09:16.630
<v Speaker 0>actually see here that our NGINX two pod

00:09:16.630 --> 00:09:19.029
<v Speaker 0>is relatively happy here, but our NGINX one

00:09:19.029 --> 00:09:21.510
<v Speaker 0>pod does keep adder in and that's because

00:09:21.510 --> 00:09:23.510
<v Speaker 0>it cannot rebind that port number.

00:09:25.165 --> 00:09:26.605
<v Speaker 0>So that means we have to,

00:09:26.925 --> 00:09:29.005
<v Speaker 0>if we wanted to show how the networking

00:09:29.005 --> 00:09:31.405
<v Speaker 0>works within a single pod, we need to

00:09:31.405 --> 00:09:33.165
<v Speaker 0>run something else that doesn't listen on port

00:09:33.165 --> 00:09:33.885
<v Speaker 0>80.

00:09:34.925 --> 00:09:37.165
<v Speaker 0>Any quick suggestions of an image that's

00:09:37.680 --> 00:09:38.880
<v Speaker 0>I can throw in here?

00:09:39.600 --> 00:09:41.600
<v Speaker 2>I'm not super familiar with the NGINX image,

00:09:41.600 --> 00:09:43.440
<v Speaker 2>but it probably has an environment variable that

00:09:43.440 --> 00:09:44.720
<v Speaker 2>you can tell it to use different part

00:09:44.720 --> 00:09:45.280
<v Speaker 2>now.

00:09:46.640 --> 00:09:48.720
<v Speaker 0>Probably. I just don't know what it is.

00:09:49.840 --> 00:09:51.675
<v Speaker 2>Well, so yeah. We would have to check

00:09:51.675 --> 00:09:53.995
<v Speaker 2>out with the images documentation.

00:09:55.275 --> 00:09:57.595
<v Speaker 0>I I just run MariaDB 10. I think

00:09:57.595 --> 00:09:59.035
<v Speaker 0>that's the right tag.

00:09:59.195 --> 00:10:01.915
<v Speaker 0>Yeah. It runs on it's the MySQL port,

00:10:01.915 --> 00:10:02.715
<v Speaker 0>which is gonna be,

00:10:03.459 --> 00:10:05.620
<v Speaker 0>I can't even remember, but it's not port

00:10:05.620 --> 00:10:06.420
<v Speaker 0>80. So

00:10:08.660 --> 00:10:11.060
<v Speaker 0>let's put this in and we run our

00:10:11.060 --> 00:10:12.740
<v Speaker 0>watch again. That should get

00:10:13.940 --> 00:10:14.500
<v Speaker 0>healthy.

00:10:18.825 --> 00:10:20.265
<v Speaker 0>That's the old one that I've heard so

00:10:20.265 --> 00:10:21.785
<v Speaker 0>I'm not worried about that. And the second

00:10:21.785 --> 00:10:23.145
<v Speaker 0>one just hasn't come up yet, so we'll

00:10:23.145 --> 00:10:24.025
<v Speaker 0>give that a moment.

00:10:24.985 --> 00:10:26.185
<v Speaker 0>Yeah. We had a

00:10:28.025 --> 00:10:29.945
<v Speaker 0>no, I've broken that one too. Oh yeah,

00:10:29.945 --> 00:10:30.425
<v Speaker 0>MySQL.

00:10:31.860 --> 00:10:34.020
<v Speaker 0>I I'm feeling miserably.

00:10:34.820 --> 00:10:36.180
<v Speaker 0>So we had some good comments as well

00:10:36.180 --> 00:10:37.540
<v Speaker 0>there at the same time. Let me see.

00:10:37.860 --> 00:10:40.340
<v Speaker 0>So Costa said, TCO sector support, you are

00:10:40.340 --> 00:10:40.900
<v Speaker 0>correct.

00:10:41.220 --> 00:10:43.380
<v Speaker 0>And also use Redis. Yeah. That may have

00:10:43.380 --> 00:10:45.635
<v Speaker 0>been easier. The reason the MariaDB

00:10:45.635 --> 00:10:47.475
<v Speaker 0>slash MySQL one just failed there is that

00:10:47.475 --> 00:10:50.035
<v Speaker 0>it actually can't run without some environment variables,

00:10:50.035 --> 00:10:51.715
<v Speaker 0>so that was a very terrible choice in

00:10:51.715 --> 00:10:52.835
<v Speaker 0>the image by myself.

00:10:55.075 --> 00:10:57.075
<v Speaker 0>Does Redis need environment Yeah, also like a

00:10:57.075 --> 00:10:58.720
<v Speaker 2>bit of an anti pattern, right? You shouldn't

00:10:58.720 --> 00:11:01.600
<v Speaker 2>run your NGINX and your database in the

00:11:01.600 --> 00:11:03.920
<v Speaker 2>same pot. That's a bit of a Cut

00:11:03.920 --> 00:11:05.760
<v Speaker 0>me some slack, fella. This is a demo.

00:11:05.760 --> 00:11:07.600
<v Speaker 0>This isn't this isn't I'm not shipping it

00:11:07.600 --> 00:11:08.720
<v Speaker 0>to production, I promise.

00:11:10.455 --> 00:11:12.215
<v Speaker 2>But we should probably mention this to the

00:11:12.215 --> 00:11:14.535
<v Speaker 2>viewers so they don't, you know, tune out

00:11:14.535 --> 00:11:16.855
<v Speaker 2>because we're complete morons. Oh yeah, someone's just

00:11:16.855 --> 00:11:18.695
<v Speaker 0>tuned in right there and went, they're doing

00:11:18.695 --> 00:11:21.095
<v Speaker 0>what? No. It's closed. So,

00:11:21.735 --> 00:11:23.975
<v Speaker 0>yeah, I wouldn't recommend that part and you're

00:11:23.975 --> 00:11:24.215
<v Speaker 0>correct.

00:11:25.630 --> 00:11:28.190
<v Speaker 0>Yeah, Redis I think is happy with any

00:11:28.190 --> 00:11:30.190
<v Speaker 0>environment variable. So you can see now that

00:11:30.190 --> 00:11:32.430
<v Speaker 0>this has worked. So let's talk about what

00:11:32.430 --> 00:11:33.870
<v Speaker 0>actually happened there.

00:11:35.070 --> 00:11:38.190
<v Speaker 0>If we describe pod one seven which is

00:11:38.190 --> 00:11:39.470
<v Speaker 0>our new one with Redis,

00:11:40.715 --> 00:11:43.595
<v Speaker 0>We can see that we have two containers

00:11:43.595 --> 00:11:45.915
<v Speaker 0>here running on a single pod.

00:11:46.955 --> 00:11:47.595
<v Speaker 0>And

00:11:48.315 --> 00:11:50.635
<v Speaker 0>what happens there is that they share the

00:11:50.635 --> 00:11:52.395
<v Speaker 0>same networking space, they share the same port

00:11:52.395 --> 00:11:54.795
<v Speaker 0>allocations, they can communicate over local host.

00:11:55.940 --> 00:11:57.540
<v Speaker 0>Sorry. Anything we need to be able to

00:11:57.540 --> 00:11:59.620
<v Speaker 0>add there. Does that even make sense to

00:11:59.620 --> 00:12:01.060
<v Speaker 0>everyone what I've just said?

00:12:07.665 --> 00:12:10.144
<v Speaker 0>Yes. Okay. I think it makes sense. Yeah.

00:12:11.185 --> 00:12:12.385
<v Speaker 1>It does make sense.

00:12:12.945 --> 00:12:15.505
<v Speaker 2>If engine x in this case, right, was

00:12:15.505 --> 00:12:17.345
<v Speaker 2>a web application we had written and not

00:12:17.345 --> 00:12:18.785
<v Speaker 2>like this web server only,

00:12:18.945 --> 00:12:21.425
<v Speaker 2>we could now talk to our Redis with

00:12:21.425 --> 00:12:23.639
<v Speaker 2>local host and whatever the Redis port is.

00:12:25.399 --> 00:12:27.560
<v Speaker 2>Yeah. But if you wanted this process in

00:12:27.720 --> 00:12:29.720
<v Speaker 2>if the NGINX process was not NGINX but

00:12:29.720 --> 00:12:31.079
<v Speaker 2>our own web application,

00:12:31.160 --> 00:12:33.000
<v Speaker 2>it can now talk to Redis by connecting

00:12:33.000 --> 00:12:34.600
<v Speaker 2>to local host and the Redis port.

00:12:35.475 --> 00:12:36.195
<v Speaker 0>Yeah.

00:12:36.515 --> 00:12:38.915
<v Speaker 0>And the benefits of that are that it

00:12:38.915 --> 00:12:41.475
<v Speaker 0>doesn't go over your traditional kernel TCP network

00:12:41.475 --> 00:12:45.075
<v Speaker 0>in the stack. Right? It's it's typically faster.

00:12:45.075 --> 00:12:46.435
<v Speaker 0>There's no security

00:12:47.394 --> 00:12:49.154
<v Speaker 0>risks, at least less security risks.

00:12:49.850 --> 00:12:50.890
<v Speaker 0>Is that a that a fair Yeah. Well,

00:12:50.890 --> 00:12:51.690
<v Speaker 0>if you this,

00:12:52.490 --> 00:12:55.130
<v Speaker 2>you're basically talking local host. Right? Those two

00:12:55.130 --> 00:12:57.370
<v Speaker 2>processes will end up on the same node.

00:12:57.370 --> 00:12:59.130
<v Speaker 2>So it's the same local host connection that

00:12:59.130 --> 00:12:59.930
<v Speaker 2>you would have on

00:13:01.370 --> 00:13:02.730
<v Speaker 2>if you were to do this on your

00:13:02.730 --> 00:13:03.850
<v Speaker 2>single computer.

00:13:04.170 --> 00:13:06.065
<v Speaker 2>If you had put those two

00:13:06.545 --> 00:13:09.105
<v Speaker 2>containers into different pods, they may end up

00:13:09.105 --> 00:13:10.865
<v Speaker 2>being scheduled to different nodes.

00:13:11.185 --> 00:13:13.265
<v Speaker 2>And then you would actually have increased latency

00:13:13.265 --> 00:13:15.345
<v Speaker 2>as a first step because you might actually

00:13:15.345 --> 00:13:17.185
<v Speaker 2>end up talking through a real network on

00:13:17.185 --> 00:13:19.750
<v Speaker 2>different machines And that adds

00:13:19.750 --> 00:13:22.790
<v Speaker 2>latency, right? So for web applications, there sometimes

00:13:22.790 --> 00:13:24.390
<v Speaker 2>is a use case where you would do

00:13:24.390 --> 00:13:25.830
<v Speaker 2>something like this because

00:13:26.310 --> 00:13:28.230
<v Speaker 2>you want your cache to be very, very

00:13:28.230 --> 00:13:30.630
<v Speaker 2>fast, right? And you put them right next

00:13:30.630 --> 00:13:32.710
<v Speaker 2>to the actual process that uses the cache.

00:13:33.075 --> 00:13:36.035
<v Speaker 2>Can, in certain applications, have benefits.

00:13:37.315 --> 00:13:38.435
<v Speaker 2>It's kind of hard say with this And

00:13:41.395 --> 00:13:43.395
<v Speaker 1>in this example, let's say they would be

00:13:43.395 --> 00:13:45.570
<v Speaker 1>in different both containers would be in different

00:13:45.570 --> 00:13:47.250
<v Speaker 1>pods, but they would be running in the

00:13:47.250 --> 00:13:49.250
<v Speaker 1>same node? For instance, if I have only

00:13:49.250 --> 00:13:51.010
<v Speaker 1>one node and I can be certain about

00:13:51.010 --> 00:13:52.930
<v Speaker 1>that, they would not be able to communicate

00:13:52.930 --> 00:13:54.850
<v Speaker 1>through localhost, or they would be?

00:13:55.570 --> 00:13:56.530
<v Speaker 2>They would not.

00:13:56.930 --> 00:13:58.834
<v Speaker 1>They would not be. If they are in

00:13:58.834 --> 00:14:01.074
<v Speaker 2>different pods, each pod has its own IP

00:14:00.834 --> 00:14:02.834
<v Speaker 2>And if you want to Okay. Between

00:14:03.795 --> 00:14:05.315
<v Speaker 2>pods Then they would have to know them.

00:14:05.235 --> 00:14:07.635
<v Speaker 2>Have to go to the network for communication.

00:14:08.274 --> 00:14:08.915
<v Speaker 1>Okay.

00:14:09.875 --> 00:14:11.714
<v Speaker 0>Okay. So that covers

00:14:12.274 --> 00:14:13.154
<v Speaker 0>networking

00:14:13.720 --> 00:14:16.360
<v Speaker 0>within a pod using local hosts. You know,

00:14:16.360 --> 00:14:17.320
<v Speaker 0>the only thing you really need to be

00:14:17.320 --> 00:14:19.400
<v Speaker 0>aware of is port collisions. If you navigate

00:14:19.400 --> 00:14:21.320
<v Speaker 0>that, there are use cases for using multiple

00:14:21.320 --> 00:14:23.800
<v Speaker 0>containers in the same port. This in pods,

00:14:23.800 --> 00:14:25.560
<v Speaker 0>this is generally what we call the sidecar

00:14:25.560 --> 00:14:27.480
<v Speaker 0>pattern in Kubernetes land where we want to

00:14:27.480 --> 00:14:30.065
<v Speaker 0>be able to add extra functionality to our

00:14:30.065 --> 00:14:32.705
<v Speaker 0>applications without modifying our own

00:14:33.105 --> 00:14:35.425
<v Speaker 0>code kind of. Yeah.

00:14:35.985 --> 00:14:38.385
<v Speaker 0>Alright, so let's get back to then, I

00:14:38.385 --> 00:14:40.385
<v Speaker 0>know you see the original question was

00:14:41.345 --> 00:14:42.625
<v Speaker 0>networking across

00:14:43.010 --> 00:14:44.450
<v Speaker 0>across pods

00:14:44.450 --> 00:14:47.250
<v Speaker 0>and namespaces and all of our Kubernetes clusters

00:14:47.250 --> 00:14:49.890
<v Speaker 0>and using services. Now there's three different types

00:14:49.890 --> 00:14:51.890
<v Speaker 0>of services if I remember correctly.

00:14:52.130 --> 00:14:54.050
<v Speaker 0>Do we wanna discuss what each of those

00:14:54.050 --> 00:14:55.490
<v Speaker 0>are and the use cases for each?

00:14:58.035 --> 00:15:00.675
<v Speaker 2>I think one thing I guess point out

00:15:00.675 --> 00:15:02.435
<v Speaker 2>before we go there is

00:15:02.675 --> 00:15:05.394
<v Speaker 2>Yeah. The service doesn't actually do the networking.

00:15:05.394 --> 00:15:07.714
<v Speaker 2>Right? Any port can talk to any other

00:15:07.714 --> 00:15:08.355
<v Speaker 2>port.

00:15:08.595 --> 00:15:10.355
<v Speaker 2>The difficulty is just you don't know its

00:15:10.355 --> 00:15:10.995
<v Speaker 2>IP address.

00:15:12.450 --> 00:15:14.610
<v Speaker 2>Services So you wouldn't hard code it. Service

00:15:14.610 --> 00:15:16.770
<v Speaker 2>discovery. They help you how to

00:15:17.170 --> 00:15:18.930
<v Speaker 2>find out who to talk to.

00:15:20.530 --> 00:15:23.570
<v Speaker 2>Right? Yeah. That is correct. The service concept

00:15:23.570 --> 00:15:27.330
<v Speaker 0>or primitive within Kubernetes, right? I mean, service

00:15:27.410 --> 00:15:29.625
<v Speaker 0>discovery, which is, you know, a pretty much

00:15:29.625 --> 00:15:31.545
<v Speaker 0>a solved problem when you adopt Kubernetes and

00:15:31.545 --> 00:15:34.345
<v Speaker 0>load balancing across the pods within that service.

00:15:35.385 --> 00:15:37.625
<v Speaker 2>Right. On what service type you choose, then

00:15:37.625 --> 00:15:39.785
<v Speaker 2>you also would get, for example, load balancing

00:15:39.785 --> 00:15:42.345
<v Speaker 2>because the service has its service IP address.

00:15:43.080 --> 00:15:45.960
<v Speaker 2>It announces the service IP address in DNS.

00:15:46.120 --> 00:15:47.560
<v Speaker 2>And so when you try to talk to

00:15:47.560 --> 00:15:49.320
<v Speaker 2>this service, you can talk to a DNS

00:15:49.320 --> 00:15:52.040
<v Speaker 2>name. It resolves to the service's IP address.

00:15:52.120 --> 00:15:53.720
<v Speaker 2>And the service has endpoints

00:15:53.720 --> 00:15:56.134
<v Speaker 2>which are all the pods that it can

00:15:56.134 --> 00:15:58.454
<v Speaker 2>find via its selector labels. And this is

00:15:58.454 --> 00:16:00.055
<v Speaker 2>how it can end up talking to these

00:16:00.055 --> 00:16:01.095
<v Speaker 2>various pods.

00:16:03.334 --> 00:16:04.134
<v Speaker 2>Okay.

00:16:05.014 --> 00:16:06.454
<v Speaker 2>So this is like a big That was

00:16:06.454 --> 00:16:07.175
<v Speaker 1>a nice explanation.

00:16:08.750 --> 00:16:10.910
<v Speaker 2>To make this more understandable for everybody.

00:16:12.430 --> 00:16:14.750
<v Speaker 1>I think it would be useful, like, for

00:16:14.750 --> 00:16:16.029
<v Speaker 1>this demonstration

00:16:16.029 --> 00:16:18.910
<v Speaker 1>to focus on the difference between cluster IP

00:16:18.910 --> 00:16:20.029
<v Speaker 1>and node port,

00:16:21.070 --> 00:16:23.149
<v Speaker 1>unless we want to, I mean.

00:16:24.085 --> 00:16:25.845
<v Speaker 0>No. No. That makes sense. So To what

00:16:25.845 --> 00:16:26.965
<v Speaker 1>you might understand.

00:16:27.525 --> 00:16:29.765
<v Speaker 0>Cluster IP is is the default service type.

00:16:29.765 --> 00:16:31.525
<v Speaker 0>So we'll get one of those running.

00:16:32.165 --> 00:16:34.645
<v Speaker 0>And node port is got some very specific

00:16:34.645 --> 00:16:37.080
<v Speaker 0>use cases that, okay, I guess it's actually

00:16:37.080 --> 00:16:38.600
<v Speaker 0>the four service tip. The third one would

00:16:38.600 --> 00:16:40.040
<v Speaker 0>be a load balancer type, which is only

00:16:40.040 --> 00:16:41.960
<v Speaker 0>supported in some environments and the fourth one

00:16:41.960 --> 00:16:44.120
<v Speaker 0>would be a headless service, which actually

00:16:45.240 --> 00:16:47.320
<v Speaker 0>handles traffic in a slightly unique way. But

00:16:47.320 --> 00:16:50.045
<v Speaker 0>we're gonna disregard those and focus on cluster

00:16:50.045 --> 00:16:51.725
<v Speaker 0>IP and node port and try and break

00:16:51.725 --> 00:16:53.325
<v Speaker 0>that down for you. So

00:16:54.605 --> 00:16:55.805
<v Speaker 0>let's expose.

00:16:56.845 --> 00:16:57.965
<v Speaker 2>Oh, there's also

00:16:58.525 --> 00:17:00.765
<v Speaker 2>there's also there's no port and host port

00:17:00.765 --> 00:17:02.520
<v Speaker 2>if you wanna make it really complicated. And

00:17:02.520 --> 00:17:03.800
<v Speaker 2>then there is also

00:17:04.599 --> 00:17:06.200
<v Speaker 2>I forgot the name, but there's a service

00:17:06.200 --> 00:17:08.280
<v Speaker 2>type which does nothing but add an entry

00:17:08.280 --> 00:17:09.319
<v Speaker 2>to the DNS,

00:17:09.480 --> 00:17:11.160
<v Speaker 2>to the internal Kubernetes DNS.

00:17:11.560 --> 00:17:13.480
<v Speaker 2>I think it's called external DNS or something

00:17:13.480 --> 00:17:14.119
<v Speaker 2>like

00:17:16.214 --> 00:17:17.094
<v Speaker 0>external name Yeah.

00:17:19.894 --> 00:17:22.054
<v Speaker 2>It's a service type external or something, external

00:17:22.054 --> 00:17:24.454
<v Speaker 2>DNS, something like this, or external name.

00:17:25.654 --> 00:17:27.720
<v Speaker 2>Don't know how to up. Yeah. I don't

00:17:27.720 --> 00:17:28.760
<v Speaker 0>think it's oh,

00:17:29.400 --> 00:17:31.240
<v Speaker 0>the semantics aren't important, but you're right. Yeah.

00:17:31.240 --> 00:17:32.760
<v Speaker 0>There is the ability to bring an external

00:17:32.760 --> 00:17:34.919
<v Speaker 0>services and expose them as a Kubernetes service.

00:17:35.240 --> 00:17:36.360
<v Speaker 0>Okay. So

00:17:38.520 --> 00:17:40.039
<v Speaker 0>let's make a

00:17:40.200 --> 00:17:42.680
<v Speaker 0>service available for our first

00:17:43.455 --> 00:17:46.174
<v Speaker 0>deployment here, which has this label.

00:17:49.615 --> 00:17:51.455
<v Speaker 1>Can the name be anything? Like in this

00:17:51.455 --> 00:17:53.455
<v Speaker 1>case, when you named a service?

00:17:54.174 --> 00:17:55.934
<v Speaker 0>It could be anything that is a DNS

00:17:55.934 --> 00:17:56.815
<v Speaker 0>compatible

00:17:56.815 --> 00:17:57.295
<v Speaker 0>name.

00:17:58.679 --> 00:18:00.039
<v Speaker 0>And so you can't

00:18:00.039 --> 00:18:02.359
<v Speaker 0>use dots, but you can use you know,

00:18:02.440 --> 00:18:03.240
<v Speaker 0>alphanumeric

00:18:03.240 --> 00:18:04.599
<v Speaker 0>and dashes.

00:18:05.720 --> 00:18:07.320
<v Speaker 1>And it doesn't have to be connect in

00:18:07.320 --> 00:18:09.720
<v Speaker 1>this case with the deployment. It just So

00:18:09.720 --> 00:18:12.120
<v Speaker 0>it's connected to something called a selector, which

00:18:12.120 --> 00:18:13.159
<v Speaker 0>is based on the labels.

00:18:13.975 --> 00:18:15.815
<v Speaker 0>So you can see here what I'm telling

00:18:15.815 --> 00:18:18.455
<v Speaker 0>that, I mean services are relatively

00:18:18.455 --> 00:18:20.054
<v Speaker 0>simple as the definition.

00:18:20.215 --> 00:18:21.654
<v Speaker 0>All we're saying here is we wanna make

00:18:21.654 --> 00:18:24.374
<v Speaker 0>something available with this name NGINX one and

00:18:24.855 --> 00:18:28.029
<v Speaker 0>it's gonna find any target which has a

00:18:28.029 --> 00:18:30.749
<v Speaker 0>label called app with the value NGINX one.

00:18:31.389 --> 00:18:31.789
<v Speaker 0>And

00:18:33.309 --> 00:18:35.149
<v Speaker 0>we could Yeah. So I think the question,

00:18:35.789 --> 00:18:38.510
<v Speaker 2>you're free to name the service anything you

00:18:38.510 --> 00:18:40.504
<v Speaker 2>like as long as it is

00:18:41.465 --> 00:18:44.184
<v Speaker 2>according to the Kubernetes naming convention. Right?

00:18:44.985 --> 00:18:46.905
<v Speaker 2>But it probably makes sense to call it

00:18:46.905 --> 00:18:49.225
<v Speaker 2>something that's related to your deployment so you

00:18:49.225 --> 00:18:51.705
<v Speaker 2>keep track of which two things belong together.

00:18:53.200 --> 00:18:55.039
<v Speaker 2>You know, if your deployment is called doc

00:18:55.039 --> 00:18:56.799
<v Speaker 2>and the service is called cat,

00:18:57.200 --> 00:18:58.559
<v Speaker 2>that, you know, may not be the best

00:18:58.559 --> 00:18:59.200
<v Speaker 2>idea.

00:18:59.679 --> 00:19:01.840
<v Speaker 0>Exactly. Yeah. I think, you know, it's always

00:19:01.840 --> 00:19:04.320
<v Speaker 0>valuable to remember that, well, Kubernetes is a

00:19:04.320 --> 00:19:06.155
<v Speaker 0>computer and we'll do whatever is told that

00:19:06.155 --> 00:19:08.235
<v Speaker 0>humans are usually working with this and we

00:19:08.235 --> 00:19:10.475
<v Speaker 0>want to make it as simple as possible.

00:19:10.475 --> 00:19:12.475
<v Speaker 0>Well, standard naming conventions do make a lot

00:19:12.475 --> 00:19:13.914
<v Speaker 0>of sense but I'm gonna go against that

00:19:13.914 --> 00:19:15.755
<v Speaker 0>now because I've already renamed it to anise

00:19:15.755 --> 00:19:17.515
<v Speaker 0>one, so let's go with that.

00:19:18.540 --> 00:19:19.340
<v Speaker 0>Alright,

00:19:20.220 --> 00:19:22.460
<v Speaker 0>now we can get away with very little

00:19:22.460 --> 00:19:23.980
<v Speaker 0>bit of config here and rely a lot

00:19:23.980 --> 00:19:26.380
<v Speaker 0>on the defaults, so I'm just gonna apply

00:19:26.380 --> 00:19:27.980
<v Speaker 0>this, we'll see what we get and we'll

00:19:27.980 --> 00:19:28.620
<v Speaker 0>try and

00:19:29.340 --> 00:19:31.500
<v Speaker 0>understand what's actually happened here. So I've not

00:19:31.500 --> 00:19:33.904
<v Speaker 0>set a service type in the spec, All

00:19:33.904 --> 00:19:36.225
<v Speaker 0>I've done is configure the selector and tell

00:19:36.225 --> 00:19:37.745
<v Speaker 0>it the port that we want the service

00:19:37.745 --> 00:19:40.304
<v Speaker 0>to be available on. This is probably So

00:19:40.705 --> 00:19:42.224
<v Speaker 0>On you go. Yeah.

00:19:42.945 --> 00:19:44.625
<v Speaker 1>No. I wanted to drill more on the

00:19:44.625 --> 00:19:46.065
<v Speaker 1>container port versus port

00:19:47.210 --> 00:19:48.170
<v Speaker 1>On how

00:19:48.330 --> 00:19:50.330
<v Speaker 1>is that the port that's the service and

00:19:50.330 --> 00:19:52.410
<v Speaker 1>then the service forwards that to the container

00:19:52.410 --> 00:19:53.610
<v Speaker 1>port and the container

00:19:54.010 --> 00:19:56.250
<v Speaker 1>port could be something different or do they

00:19:56.250 --> 00:19:57.930
<v Speaker 1>have to like, what is the relation between

00:19:57.930 --> 00:20:00.090
<v Speaker 1>those two ports or they don't have any

00:20:00.090 --> 00:20:02.455
<v Speaker 1>relation? Yeah. Yeah. So the port will be

00:20:02.455 --> 00:20:04.775
<v Speaker 0>the port number that the service IP is

00:20:04.775 --> 00:20:07.175
<v Speaker 0>available on. You can then have that point

00:20:07.175 --> 00:20:08.934
<v Speaker 0>to a different port within the container if

00:20:08.934 --> 00:20:10.855
<v Speaker 0>you need. So like if you have an

00:20:10.855 --> 00:20:12.695
<v Speaker 0>application that listens on a random port and

00:20:12.695 --> 00:20:14.535
<v Speaker 0>you want to expose over a standard port,

00:20:14.535 --> 00:20:16.640
<v Speaker 0>then you can configure that correctly and then

00:20:16.640 --> 00:20:18.240
<v Speaker 0>node port brings in another

00:20:18.400 --> 00:20:19.920
<v Speaker 0>variable to the mix as well that we

00:20:19.920 --> 00:20:21.919
<v Speaker 0>cover when we do other node ports.

00:20:23.040 --> 00:20:24.799
<v Speaker 0>I think that's right.

00:20:26.799 --> 00:20:27.520
<v Speaker 0>Let's apply.

00:20:31.775 --> 00:20:33.135
<v Speaker 0>So now if we run

00:20:33.535 --> 00:20:35.295
<v Speaker 0>kubectl get services,

00:20:36.095 --> 00:20:39.135
<v Speaker 0>you'll see here we have the annex one

00:20:39.135 --> 00:20:40.495
<v Speaker 0>service that we created

00:20:40.735 --> 00:20:42.735
<v Speaker 0>and then now gets a cluster IP because

00:20:42.735 --> 00:20:45.350
<v Speaker 0>that's the default service type. And we can

00:20:45.350 --> 00:20:47.510
<v Speaker 0>ignore external IP for now and it's exposed

00:20:47.510 --> 00:20:48.870
<v Speaker 0>on the port that we told it to

00:20:48.870 --> 00:20:51.350
<v Speaker 0>be available on. It just so happens to

00:20:51.350 --> 00:20:52.950
<v Speaker 0>be the same port that NGINX is listening

00:20:52.950 --> 00:20:53.990
<v Speaker 0>on, but that is

00:20:54.390 --> 00:20:55.830
<v Speaker 0>most irrelevant right now.

00:20:56.470 --> 00:20:59.590
<v Speaker 0>Another really viable command when working with services

00:20:58.965 --> 00:21:02.085
<v Speaker 0>Kubernetes is to describe it and what you're

00:21:02.085 --> 00:21:04.724
<v Speaker 0>looking for here every time is this endpoints

00:21:04.885 --> 00:21:06.804
<v Speaker 0>and more often not if your service isn't

00:21:06.804 --> 00:21:08.645
<v Speaker 0>working within the cluster is because it has

00:21:08.645 --> 00:21:10.804
<v Speaker 0>no endpoints and the number one reason at

00:21:10.804 --> 00:21:12.910
<v Speaker 0>least in my experience here is if there

00:21:12.910 --> 00:21:14.670
<v Speaker 0>are no endpoints on the service, you have

00:21:14.670 --> 00:21:16.429
<v Speaker 0>your selector wrong.

00:21:16.830 --> 00:21:19.150
<v Speaker 0>Meaning I cannot fetch any pods with that

00:21:19.150 --> 00:21:19.950
<v Speaker 0>selector.

00:21:20.670 --> 00:21:22.190
<v Speaker 0>A good way to confirm that that also

00:21:22.190 --> 00:21:23.950
<v Speaker 0>works is to use a label selector when

00:21:23.950 --> 00:21:24.910
<v Speaker 0>you do get pods.

00:21:26.175 --> 00:21:28.175
<v Speaker 0>So we can run this command here and

00:21:28.175 --> 00:21:30.255
<v Speaker 0>if that returns pods, then your endpoint is

00:21:30.255 --> 00:21:31.375
<v Speaker 0>configured correctly.

00:21:32.655 --> 00:21:35.375
<v Speaker 1>The endpoint in this case is the endpoint

00:21:35.375 --> 00:21:38.095
<v Speaker 1>of the of the container like that refers

00:21:38.095 --> 00:21:40.015
<v Speaker 1>to to the pod

00:21:40.255 --> 00:21:41.775
<v Speaker 1>that the containers run-in or?

00:21:42.800 --> 00:21:44.480
<v Speaker 0>So when we apply the service to the

00:21:44.480 --> 00:21:47.120
<v Speaker 0>cluster, the cluster will grab that selector. It

00:21:47.120 --> 00:21:48.560
<v Speaker 0>will look up all of the pods. And

00:21:48.560 --> 00:21:50.640
<v Speaker 0>if they're ready and available, they will be

00:21:50.640 --> 00:21:52.640
<v Speaker 0>added to the endpoints list, which just means

00:21:52.640 --> 00:21:54.960
<v Speaker 0>that they're available to handle any request to

00:21:54.960 --> 00:21:56.560
<v Speaker 0>that service IP address.

00:21:59.195 --> 00:22:00.715
<v Speaker 2>By default, it will just add all of

00:22:00.715 --> 00:22:03.355
<v Speaker 2>them, but you have the readiness check to

00:22:03.355 --> 00:22:05.115
<v Speaker 2>determine if it's actually ready. Right? So if

00:22:05.115 --> 00:22:07.275
<v Speaker 2>you configure a readiness check-in your port,

00:22:07.675 --> 00:22:09.515
<v Speaker 2>this is how you can control

00:22:09.835 --> 00:22:12.840
<v Speaker 2>at what point your application is ready to

00:22:12.840 --> 00:22:14.360
<v Speaker 2>be added as an endpoint.

00:22:14.680 --> 00:22:17.320
<v Speaker 2>Or because the readiness readiness check will run

00:22:17.320 --> 00:22:17.960
<v Speaker 2>continuously

00:22:18.600 --> 00:22:20.440
<v Speaker 2>along the lifetime of the pod,

00:22:20.760 --> 00:22:22.440
<v Speaker 2>it would also remove it from the endpoints

00:22:22.440 --> 00:22:24.920
<v Speaker 2>if at some point in the future your

00:22:24.575 --> 00:22:26.894
<v Speaker 2>readiness check turns false again.

00:22:28.975 --> 00:22:31.135
<v Speaker 2>A by default. The readiness check runs automatically,

00:22:31.135 --> 00:22:32.895
<v Speaker 1>or that's something that will also be defined

00:22:32.895 --> 00:22:34.895
<v Speaker 1>in the YAML in that case? No. In

00:22:34.895 --> 00:22:37.294
<v Speaker 2>the pod, you have the ability to configure

00:22:37.775 --> 00:22:39.055
<v Speaker 2>two health checks,

00:22:39.720 --> 00:22:41.960
<v Speaker 2>the readiness check and the liveness probe.

00:22:42.679 --> 00:22:45.240
<v Speaker 2>And the readiness one determines if it's inside

00:22:45.240 --> 00:22:45.799
<v Speaker 2>the

00:22:47.159 --> 00:22:47.960
<v Speaker 2>endpoints,

00:22:47.960 --> 00:22:50.119
<v Speaker 2>if it's included in load balancing, basically.

00:22:50.679 --> 00:22:52.360
<v Speaker 2>And the other one determines if it's being

00:22:52.440 --> 00:22:53.799
<v Speaker 2>it's going to be restarted

00:22:53.960 --> 00:22:56.214
<v Speaker 2>according to whatever rules you put in there.

00:22:57.095 --> 00:22:58.934
<v Speaker 1>And in that case, like, if I don't

00:22:58.934 --> 00:23:01.095
<v Speaker 1>define the values, they are, by default, defined

00:23:01.095 --> 00:23:04.215
<v Speaker 1>to certain numbers, to certain values? Or No.

00:23:04.215 --> 00:23:05.894
<v Speaker 2>If you don't define it, then it's just

00:23:05.894 --> 00:23:08.375
<v Speaker 2>included in the endpoints immediately as soon as

00:23:08.375 --> 00:23:10.660
<v Speaker 2>Kubernetes has started the container.

00:23:10.820 --> 00:23:12.260
<v Speaker 2>And then it doesn't basically

00:23:12.740 --> 00:23:16.179
<v Speaker 2>determine if the process inside the container

00:23:16.180 --> 00:23:17.780
<v Speaker 2>has had time to come up. For example,

00:23:17.780 --> 00:23:19.220
<v Speaker 2>Java applications can take

00:23:19.620 --> 00:23:20.820
<v Speaker 2>quite a bit of time to boot up

00:23:20.820 --> 00:23:22.385
<v Speaker 2>in a lot of cases. Right? Yeah, couple

00:23:22.385 --> 00:23:23.985
<v Speaker 0>of weeks. So you might, may actually end

00:23:23.985 --> 00:23:26.945
<v Speaker 2>up sending traffic to this process already before

00:23:26.945 --> 00:23:28.864
<v Speaker 2>the process is ready to answer.

00:23:29.585 --> 00:23:30.224
<v Speaker 0>Yeah.

00:23:31.105 --> 00:23:31.904
<v Speaker 0>Yeah,

00:23:32.465 --> 00:23:34.625
<v Speaker 0>maybe it makes sense to go into liveness

00:23:34.625 --> 00:23:35.504
<v Speaker 0>and readiness

00:23:35.985 --> 00:23:38.279
<v Speaker 0>problem, maybe we can do that after a

00:23:38.279 --> 00:23:40.119
<v Speaker 0>little bit of the service stuff unless

00:23:40.919 --> 00:23:42.600
<v Speaker 0>you wanna dive into it then let let

00:23:42.600 --> 00:23:43.159
<v Speaker 0>me know.

00:23:43.799 --> 00:23:44.279
<v Speaker 0>Yeah,

00:23:45.080 --> 00:23:47.880
<v Speaker 0>said there is, you know, a % correct.

00:23:47.880 --> 00:23:50.039
<v Speaker 0>Like if these exist, you can define when

00:23:50.039 --> 00:23:52.519
<v Speaker 0>your application is actually handling traffic correctly or

00:23:52.519 --> 00:23:54.595
<v Speaker 0>is ready to handle traffic and the services

00:23:54.595 --> 00:23:56.515
<v Speaker 0>can add and remove them as needed to

00:23:56.515 --> 00:23:58.434
<v Speaker 0>make sure that you're not delivering,

00:23:58.995 --> 00:24:01.315
<v Speaker 0>you know broken NGINX's to your customers and

00:24:01.315 --> 00:24:01.955
<v Speaker 0>such.

00:24:02.515 --> 00:24:03.475
<v Speaker 0>Yeah, great information.

00:24:05.720 --> 00:24:06.919
<v Speaker 0>Okay. So

00:24:08.920 --> 00:24:09.880
<v Speaker 0>we have

00:24:10.520 --> 00:24:13.160
<v Speaker 0>two deployments, some pods, and a service that

00:24:13.160 --> 00:24:15.559
<v Speaker 0>allows us to now communicate. So I guess,

00:24:16.360 --> 00:24:17.640
<v Speaker 0>what do you think we should cover next?

00:24:17.640 --> 00:24:18.600
<v Speaker 0>Will we talk about

00:24:19.225 --> 00:24:21.945
<v Speaker 0>the DNS conventions for service discovery?

00:24:22.745 --> 00:24:25.225
<v Speaker 2>Yeah. One thing about the selector, we mentioned

00:24:25.225 --> 00:24:26.664
<v Speaker 2>that you have to set the selector, and

00:24:26.664 --> 00:24:28.345
<v Speaker 2>if you don't get it right, then you

00:24:28.345 --> 00:24:29.945
<v Speaker 2>usually end up having no endpoints and it

00:24:29.945 --> 00:24:30.345
<v Speaker 2>doesn't work.

00:24:31.700 --> 00:24:33.540
<v Speaker 2>Should we mention how you get it right?

00:24:33.540 --> 00:24:34.100
<v Speaker 2>What

00:24:34.500 --> 00:24:37.059
<v Speaker 2>labels you actually have to set where in

00:24:37.059 --> 00:24:39.620
<v Speaker 2>order for the selector to find your pods?

00:24:41.140 --> 00:24:42.659
<v Speaker 1>Yes, it's more extensive. I

00:24:44.020 --> 00:24:46.980
<v Speaker 2>found this super confusing because there's metadata labels

00:24:46.980 --> 00:24:47.380
<v Speaker 2>everywhere.

00:24:47.995 --> 00:24:49.434
<v Speaker 2>And I was like, do I put the

00:24:49.434 --> 00:24:51.195
<v Speaker 2>metadata labels in the deployment

00:24:51.434 --> 00:24:53.195
<v Speaker 2>or do they have to be under deployment

00:24:53.195 --> 00:24:56.155
<v Speaker 2>spec templates spec metadata labels? That's one of

00:24:56.155 --> 00:24:58.155
<v Speaker 0>my biggest frustrations

00:24:58.155 --> 00:24:58.794
<v Speaker 0>with

00:24:59.115 --> 00:24:59.674
<v Speaker 0>the

00:24:59.995 --> 00:25:02.549
<v Speaker 0>the selectors on a deployment is that there's

00:25:02.549 --> 00:25:03.509
<v Speaker 0>some replication

00:25:03.509 --> 00:25:05.190
<v Speaker 0>and I don't understand why it's

00:25:05.669 --> 00:25:07.190
<v Speaker 0>maybe not automated.

00:25:07.509 --> 00:25:09.909
<v Speaker 0>But yeah, you wanna break that down then

00:25:09.909 --> 00:25:10.549
<v Speaker 0>Philip?

00:25:11.990 --> 00:25:13.110
<v Speaker 2>No, was a question.

00:25:14.895 --> 00:25:16.415
<v Speaker 2>I'm not claiming I know everything.

00:25:18.175 --> 00:25:19.935
<v Speaker 0>Alright. So hold on. Let me get a

00:25:19.935 --> 00:25:22.415
<v Speaker 0>comment on. So Costa has said, yeah, we

00:25:22.415 --> 00:25:24.015
<v Speaker 0>should have a whole episode on live this

00:25:24.015 --> 00:25:26.095
<v Speaker 0>already readiness approach. I I think you're right.

00:25:26.095 --> 00:25:28.175
<v Speaker 0>There is a lot there. So maybe that's

00:25:27.420 --> 00:25:29.980
<v Speaker 0>something that I'll get scheduled soon. Alright, Very

00:25:29.980 --> 00:25:30.540
<v Speaker 0>cool.

00:25:31.980 --> 00:25:33.820
<v Speaker 0>Yeah, when you define a deployment,

00:25:34.540 --> 00:25:36.060
<v Speaker 0>so that, and much the same way that

00:25:36.060 --> 00:25:39.180
<v Speaker 0>a service works out which pods or endpoints

00:25:39.180 --> 00:25:42.140
<v Speaker 0>to load balance traffic over, a deployment has

00:25:42.140 --> 00:25:43.904
<v Speaker 0>to understand, I don't want to go too

00:25:43.904 --> 00:25:45.024
<v Speaker 0>deep in this because it's a bit of

00:25:45.024 --> 00:25:46.544
<v Speaker 0>a segue, the deployment has to work out

00:25:46.544 --> 00:25:48.144
<v Speaker 0>which replica sets are under its control, and

00:25:48.144 --> 00:25:49.264
<v Speaker 0>then the replica sets have to work out

00:25:49.264 --> 00:25:51.024
<v Speaker 0>which pods are under its control, and this

00:25:51.024 --> 00:25:52.544
<v Speaker 0>is labels all the way down.

00:25:53.184 --> 00:25:54.945
<v Speaker 0>So what we have here in the deployment

00:25:54.945 --> 00:25:58.120
<v Speaker 0>selector is say, all of replicate sets which

00:25:58.120 --> 00:25:59.800
<v Speaker 0>have a label of app and the value

00:25:59.800 --> 00:26:01.640
<v Speaker 0>of NGINX are under our control.

00:26:01.960 --> 00:26:03.880
<v Speaker 0>And then we have a template on the

00:26:03.880 --> 00:26:06.040
<v Speaker 0>pod spec which also adds labels of app

00:26:06.040 --> 00:26:08.120
<v Speaker 0>and NGINX to each of the pods.

00:26:08.600 --> 00:26:10.280
<v Speaker 0>And it's just like labels and all of

00:26:10.280 --> 00:26:12.434
<v Speaker 0>these different resources that grip them all together

00:26:12.434 --> 00:26:14.514
<v Speaker 0>in something like homogenous fashion

00:26:14.674 --> 00:26:15.554
<v Speaker 0>to

00:26:15.955 --> 00:26:16.514
<v Speaker 0>be

00:26:16.835 --> 00:26:18.835
<v Speaker 0>queried against the control plane.

00:26:20.035 --> 00:26:21.955
<v Speaker 0>If I got anything wrong there, feel free

00:26:21.955 --> 00:26:23.635
<v Speaker 0>to jump in and fix it.

00:26:24.870 --> 00:26:25.909
<v Speaker 1>And

00:26:26.550 --> 00:26:28.230
<v Speaker 1>in that case, like

00:26:28.470 --> 00:26:30.470
<v Speaker 1>I mean, as a complete newbie looking at

00:26:30.470 --> 00:26:32.309
<v Speaker 1>that, you would wonder at the beginning, why

00:26:32.309 --> 00:26:34.309
<v Speaker 1>can't you use the name for that as

00:26:35.110 --> 00:26:36.870
<v Speaker 1>a form of label? Do you have to

00:26:36.870 --> 00:26:38.470
<v Speaker 1>define the name? Or what happens if I

00:26:38.470 --> 00:26:39.190
<v Speaker 1>don't define

00:26:39.695 --> 00:26:41.855
<v Speaker 1>the name and a random name is set?

00:26:43.215 --> 00:26:45.054
<v Speaker 2>The labels have the benefit that you could

00:26:45.054 --> 00:26:47.295
<v Speaker 2>have multiple of those and you can query

00:26:47.295 --> 00:26:49.375
<v Speaker 2>for a combination also. Right? So there's some

00:26:49.375 --> 00:26:50.495
<v Speaker 2>rules you could say,

00:26:50.895 --> 00:26:53.215
<v Speaker 2>you can have like an app, engine x1,

00:26:53.215 --> 00:26:54.495
<v Speaker 2>like we have now, and you could have

00:26:54.495 --> 00:26:57.460
<v Speaker 2>another label for example, for an environment

00:26:57.540 --> 00:26:59.460
<v Speaker 2>for staging or prod. And then you could

00:26:59.460 --> 00:27:01.860
<v Speaker 2>make sure that the staging service

00:27:02.020 --> 00:27:03.940
<v Speaker 2>will only ever include

00:27:04.580 --> 00:27:05.779
<v Speaker 2>staging pods

00:27:05.780 --> 00:27:07.780
<v Speaker 2>by also querying for the environment.

00:27:10.025 --> 00:27:12.825
<v Speaker 2>Okay? Yeah. That would be one way. It's

00:27:13.865 --> 00:27:15.544
<v Speaker 2>there's also more advanced

00:27:15.705 --> 00:27:17.225
<v Speaker 2>use for this. But I think what's important

00:27:17.225 --> 00:27:18.184
<v Speaker 2>here is the

00:27:18.985 --> 00:27:22.130
<v Speaker 2>reason why we can set those templates here

00:27:22.130 --> 00:27:24.690
<v Speaker 2>inside the deployment spec is only because the

00:27:24.690 --> 00:27:27.090
<v Speaker 2>deployment is a higher level abstraction already. Yep.

00:27:27.090 --> 00:27:28.289
<v Speaker 2>And it has some

00:27:28.610 --> 00:27:30.529
<v Speaker 2>things it does to the resources that it

00:27:30.529 --> 00:27:33.009
<v Speaker 2>controls, replica sets and pods eventually.

00:27:33.730 --> 00:27:35.645
<v Speaker 2>Right? But if we were to use a

00:27:35.645 --> 00:27:37.805
<v Speaker 2>naked pod, which you almost never do unless

00:27:37.805 --> 00:27:39.325
<v Speaker 2>you want to understand this,

00:27:40.365 --> 00:27:41.805
<v Speaker 2>then you would have to set the labels

00:27:41.805 --> 00:27:43.725
<v Speaker 2>on the pod itself for the service to

00:27:43.725 --> 00:27:44.045
<v Speaker 2>find it.

00:27:47.130 --> 00:27:48.970
<v Speaker 0>Yeah. I mean, I try to avoid talking

00:27:48.970 --> 00:27:50.970
<v Speaker 0>about replica sets as much as possible.

00:27:51.370 --> 00:27:53.210
<v Speaker 0>And as people are learning Kubernetes, I don't

00:27:53.210 --> 00:27:55.130
<v Speaker 0>think there's a lot of value initially to

00:27:55.130 --> 00:27:57.690
<v Speaker 0>understand what their their role is. So maybe

00:27:57.690 --> 00:27:59.290
<v Speaker 0>that's a rather I actually have a

00:28:00.575 --> 00:28:02.415
<v Speaker 2>have a recruiting. If you if you apply

00:28:02.415 --> 00:28:04.895
<v Speaker 2>for a job and I end up recruiting

00:28:04.895 --> 00:28:06.735
<v Speaker 2>you, I'll ask about this quite a lot

00:28:06.735 --> 00:28:08.495
<v Speaker 2>because I think it's important to understand how

00:28:08.495 --> 00:28:09.774
<v Speaker 2>these things work together.

00:28:10.255 --> 00:28:12.095
<v Speaker 2>Because if it breaks and you have to

00:28:12.095 --> 00:28:13.134
<v Speaker 2>figure out why,

00:28:13.295 --> 00:28:14.255
<v Speaker 2>it's better to know.

00:28:15.670 --> 00:28:17.430
<v Speaker 2>Like my question is usually how does a

00:28:17.430 --> 00:28:19.750
<v Speaker 2>rolling update work? What happens inside the Kubernetes

00:28:19.750 --> 00:28:21.510
<v Speaker 2>control plane when you change the image tag

00:28:21.510 --> 00:28:23.110
<v Speaker 2>of your deployment? What does it do?

00:28:24.070 --> 00:28:26.550
<v Speaker 0>I do think that it's ported, but as

00:28:26.550 --> 00:28:29.715
<v Speaker 0>someone on their first month of Kubernetes, does

00:28:29.715 --> 00:28:30.915
<v Speaker 0>that make a lot of sense to break

00:28:30.915 --> 00:28:32.755
<v Speaker 0>it down? Oh, I don't know. Let's say

00:28:32.755 --> 00:28:34.195
<v Speaker 0>we're conflicted on that one.

00:28:37.875 --> 00:28:39.235
<v Speaker 0>Do you want to go next, This

00:28:39.955 --> 00:28:41.315
<v Speaker 0>was your question, and I don't want us

00:28:41.315 --> 00:28:43.315
<v Speaker 0>to get bogged down by details and random

00:28:43.315 --> 00:28:44.720
<v Speaker 0>things. I want to make No. I think

00:28:44.720 --> 00:28:45.999
<v Speaker 1>I think this is great.

00:28:47.519 --> 00:28:49.840
<v Speaker 1>I To be honest, there is also aspects

00:28:49.840 --> 00:28:51.679
<v Speaker 1>that I wouldn't, like, think about it in

00:28:51.679 --> 00:28:52.239
<v Speaker 1>a complex

00:28:53.039 --> 00:28:54.639
<v Speaker 1>manner, like replicasets.

00:28:54.639 --> 00:28:56.159
<v Speaker 1>For me, it's just like, oh, I want

00:28:56.159 --> 00:28:57.519
<v Speaker 1>to have two of the same thing, I

00:28:57.519 --> 00:28:59.279
<v Speaker 1>just use a replica set kind of style.

00:28:59.279 --> 00:29:01.255
<v Speaker 1>Right? So I guess it's something you also

00:29:01.255 --> 00:29:03.655
<v Speaker 1>discover through using it of, like, of the

00:29:03.655 --> 00:29:04.215
<v Speaker 1>specifics

00:29:04.535 --> 00:29:06.535
<v Speaker 1>of how they work and what might go

00:29:06.535 --> 00:29:07.575
<v Speaker 1>wrong or not.

00:29:08.455 --> 00:29:10.535
<v Speaker 1>But what would be cool to maybe go

00:29:10.535 --> 00:29:11.495
<v Speaker 1>into more detail

00:29:12.470 --> 00:29:14.950
<v Speaker 1>is actually a lot of, like, examples when

00:29:14.950 --> 00:29:17.910
<v Speaker 1>you look at basic deployment resources is they

00:29:17.910 --> 00:29:19.110
<v Speaker 1>they show multiple

00:29:19.430 --> 00:29:23.350
<v Speaker 1>port naming. They have, like, target port, port,

00:29:23.430 --> 00:29:24.310
<v Speaker 1>container

00:29:24.310 --> 00:29:24.710
<v Speaker 1>port,

00:29:25.125 --> 00:29:27.365
<v Speaker 1>and and then also when you introduce node

00:29:27.365 --> 00:29:30.005
<v Speaker 1>port, they have, like yeah, node port, they

00:29:30.005 --> 00:29:32.085
<v Speaker 1>have a node port. Right? And I think

00:29:32.085 --> 00:29:34.885
<v Speaker 1>that's then when I'm not too sure if

00:29:34.885 --> 00:29:35.524
<v Speaker 1>people,

00:29:35.685 --> 00:29:37.285
<v Speaker 1>like, also who have used it who have

00:29:37.285 --> 00:29:39.760
<v Speaker 1>been using it over time know the exact

00:29:39.760 --> 00:29:42.160
<v Speaker 1>connection or it's just something that people know

00:29:42.160 --> 00:29:43.919
<v Speaker 1>and they don't really write about.

00:29:44.640 --> 00:29:46.800
<v Speaker 1>So, that might be interesting to go into

00:29:46.800 --> 00:29:47.519
<v Speaker 1>more detail.

00:29:48.160 --> 00:29:51.120
<v Speaker 0>Okay. Service has I think services are a

00:29:51.120 --> 00:29:53.435
<v Speaker 2>little bit overloaded. Right? They have multiple use

00:29:53.435 --> 00:29:55.355
<v Speaker 2>cases. We already talked about the cluster IP

00:29:55.355 --> 00:29:58.235
<v Speaker 2>ones, which gives you another IP address inside

00:29:58.235 --> 00:30:00.155
<v Speaker 2>your cluster, basically, you can talk to.

00:30:00.555 --> 00:30:02.795
<v Speaker 2>A way to find this IP address via

00:30:02.795 --> 00:30:03.675
<v Speaker 2>DNS.

00:30:03.995 --> 00:30:06.315
<v Speaker 2>And then also the load balancing, whenever you

00:30:06.315 --> 00:30:09.119
<v Speaker 2>talk to this cluster IP address,

00:30:09.919 --> 00:30:11.760
<v Speaker 2>it will forward the traffic to one of

00:30:11.760 --> 00:30:13.919
<v Speaker 2>the ports that's behind it via this endpoint

00:30:13.919 --> 00:30:17.200
<v Speaker 2>mechanic that we just discussed. Right? But other

00:30:17.360 --> 00:30:20.080
<v Speaker 2>deployment types sorry, service types may actually do

00:30:20.080 --> 00:30:23.095
<v Speaker 2>something quite different. For example, the node port

00:30:23.095 --> 00:30:23.975
<v Speaker 2>you mentioned,

00:30:24.455 --> 00:30:26.615
<v Speaker 2>basically what node port does is instead of

00:30:26.615 --> 00:30:28.535
<v Speaker 2>reserving an IP address, I think it reserves

00:30:28.535 --> 00:30:29.895
<v Speaker 2>an IP address too, but that's out of

00:30:29.895 --> 00:30:30.774
<v Speaker 2>the point here,

00:30:31.415 --> 00:30:32.774
<v Speaker 2>is it also

00:30:33.495 --> 00:30:36.135
<v Speaker 2>sets up kube proxy to start listening

00:30:36.649 --> 00:30:38.489
<v Speaker 2>on the host, the worker,

00:30:38.730 --> 00:30:41.049
<v Speaker 2>on that specific port. So now you can

00:30:41.049 --> 00:30:42.969
<v Speaker 2>talk to the host's IP address.

00:30:43.690 --> 00:30:44.330
<v Speaker 2>And then

00:30:44.809 --> 00:30:45.850
<v Speaker 2>in case of the

00:30:46.570 --> 00:30:48.570
<v Speaker 2>I sometimes get this wrong and correct me.

00:30:48.570 --> 00:30:50.169
<v Speaker 2>Maybe Chad will correct me if I'm wrong.

00:30:50.169 --> 00:30:52.795
<v Speaker 2>But basically, there's a node port and host

00:30:52.795 --> 00:30:53.435
<v Speaker 2>port.

00:30:53.835 --> 00:30:54.875
<v Speaker 2>Node port

00:30:55.115 --> 00:30:57.995
<v Speaker 2>would set up Kube proxy on any node

00:30:57.995 --> 00:30:59.835
<v Speaker 2>in the cluster independently

00:30:59.835 --> 00:31:01.915
<v Speaker 2>if the port is running on that node

00:31:01.915 --> 00:31:04.820
<v Speaker 2>or not to listen on this port that

00:31:04.820 --> 00:31:05.779
<v Speaker 2>you specify

00:31:06.020 --> 00:31:08.179
<v Speaker 2>and set up IP tables magic

00:31:08.180 --> 00:31:10.419
<v Speaker 2>so that when you talk to any

00:31:10.980 --> 00:31:13.940
<v Speaker 2>node IP address and that port, the traffic

00:31:13.940 --> 00:31:15.700
<v Speaker 2>will end up at your port.

00:31:16.340 --> 00:31:16.660
<v Speaker 2>Okay?

00:31:18.145 --> 00:31:19.664
<v Speaker 2>And host port

00:31:20.225 --> 00:31:23.265
<v Speaker 2>does something similar except it only does this

00:31:23.265 --> 00:31:24.865
<v Speaker 2>on the node

00:31:25.025 --> 00:31:26.465
<v Speaker 2>that does actually

00:31:27.345 --> 00:31:27.985
<v Speaker 2>have

00:31:28.785 --> 00:31:29.745
<v Speaker 2>your pod running.

00:31:32.139 --> 00:31:34.220
<v Speaker 2>Does that make sense? It just saves you

00:31:34.220 --> 00:31:35.419
<v Speaker 2>a hop basically.

00:31:36.539 --> 00:31:37.259
<v Speaker 0>Let's

00:31:37.340 --> 00:31:38.779
<v Speaker 0>let's show this by example.

00:31:39.340 --> 00:31:40.620
<v Speaker 0>I think that's going to make sense. So

00:31:40.620 --> 00:31:42.220
<v Speaker 0>what I'm going to do is

00:31:42.575 --> 00:31:44.414
<v Speaker 0>firstly, we're going to update

00:31:45.055 --> 00:31:47.375
<v Speaker 0>this to be something more useful. So instead

00:31:47.375 --> 00:31:49.215
<v Speaker 0>of MariaDB, what we're actually going to use

00:31:49.215 --> 00:31:51.775
<v Speaker 0>is something from the open files project called

00:31:51.775 --> 00:31:52.335
<v Speaker 0>node info,

00:31:54.720 --> 00:31:56.720
<v Speaker 0>which I should call the right thing.

00:31:57.600 --> 00:31:59.200
<v Speaker 0>And because this is going to expose

00:31:59.440 --> 00:32:00.159
<v Speaker 0>as

00:32:00.640 --> 00:32:03.840
<v Speaker 0>we request the HTTP server on that container,

00:32:03.840 --> 00:32:05.360
<v Speaker 0>it's going to return information about the pod

00:32:05.360 --> 00:32:06.799
<v Speaker 0>to answer the request and that's going to

00:32:06.799 --> 00:32:08.905
<v Speaker 0>show us the load balancing. We'll expose that

00:32:08.905 --> 00:32:10.345
<v Speaker 0>as a cluster IP and I'm also gonna

00:32:10.345 --> 00:32:12.105
<v Speaker 0>expose it as a node port and then

00:32:12.105 --> 00:32:13.545
<v Speaker 0>we will take a look at how that

00:32:13.545 --> 00:32:14.745
<v Speaker 0>actually functions

00:32:15.065 --> 00:32:16.825
<v Speaker 0>and hopefully that answers a lot of the

00:32:16.825 --> 00:32:19.225
<v Speaker 0>questions that we have. So

00:32:19.780 --> 00:32:21.460
<v Speaker 0>we need to expose the port

00:32:22.900 --> 00:32:25.140
<v Speaker 0>and it runs on eighty eighty I believe,

00:32:25.140 --> 00:32:26.580
<v Speaker 0>so we should be okay running that side

00:32:26.580 --> 00:32:28.659
<v Speaker 0>by side with engine X.

00:32:30.020 --> 00:32:32.100
<v Speaker 0>That's already exposed as,

00:32:32.580 --> 00:32:34.420
<v Speaker 0>oh it's not, engine X is exposed as

00:32:34.420 --> 00:32:35.380
<v Speaker 0>annex one

00:32:36.515 --> 00:32:39.155
<v Speaker 0>and we'll also have Anais node info as

00:32:39.155 --> 00:32:40.355
<v Speaker 0>another service,

00:32:40.355 --> 00:32:42.515
<v Speaker 0>gonna have the same selector running on a

00:32:42.515 --> 00:32:43.075
<v Speaker 0>different

00:32:43.475 --> 00:32:44.274
<v Speaker 0>port.

00:32:45.235 --> 00:32:46.434
<v Speaker 0>And finally,

00:32:46.914 --> 00:32:48.195
<v Speaker 0>we'll do this again,

00:32:48.515 --> 00:32:50.995
<v Speaker 0>only this time, we'll add a type

00:32:51.769 --> 00:32:53.209
<v Speaker 0>of node port,

00:32:53.529 --> 00:32:54.649
<v Speaker 0>same selector

00:32:55.210 --> 00:32:56.729
<v Speaker 0>and we'll expose

00:32:57.130 --> 00:32:59.289
<v Speaker 0>the node info. And well, I'm not gonna

00:32:59.289 --> 00:33:01.130
<v Speaker 0>say any other fields right now, I'm just

00:33:01.130 --> 00:33:02.730
<v Speaker 0>gonna leave that as as we'll take a

00:33:02.730 --> 00:33:04.490
<v Speaker 0>look at what is created, but hopefully we'll

00:33:04.490 --> 00:33:06.424
<v Speaker 0>to explain it and show how it works.

00:33:07.785 --> 00:33:09.705
<v Speaker 2>I think what we'll probably have to look

00:33:09.705 --> 00:33:11.545
<v Speaker 2>at is when do you use one or

00:33:11.545 --> 00:33:13.225
<v Speaker 2>the other, right? They have different use cases

00:33:13.225 --> 00:33:14.745
<v Speaker 2>and I think that's what really matters in

00:33:14.745 --> 00:33:14.985
<v Speaker 2>the end.

00:33:17.160 --> 00:33:19.160
<v Speaker 0>I mean in my opinion, that's a really,

00:33:19.160 --> 00:33:20.840
<v Speaker 0>really simple question to answer. So I'm gonna

00:33:20.840 --> 00:33:22.440
<v Speaker 0>throw out my simple approach and let you

00:33:22.440 --> 00:33:23.400
<v Speaker 0>shoot that down.

00:33:23.720 --> 00:33:25.720
<v Speaker 0>But the only time you should ever, ever,

00:33:25.720 --> 00:33:28.360
<v Speaker 0>ever, ever, ever use a node port service

00:33:28.360 --> 00:33:30.280
<v Speaker 0>is if you want to expose something

00:33:31.054 --> 00:33:33.375
<v Speaker 0>outside of your cluster and it's not the

00:33:33.375 --> 00:33:35.054
<v Speaker 0>best way to do it. It's a kind

00:33:35.054 --> 00:33:36.575
<v Speaker 0>of a hacky quick way to do it

00:33:36.575 --> 00:33:38.895
<v Speaker 0>because you don't have any ingress controlled or

00:33:38.895 --> 00:33:40.414
<v Speaker 0>configured for your cluster.

00:33:40.655 --> 00:33:42.495
<v Speaker 0>So yeah, node port is only there if

00:33:42.495 --> 00:33:44.255
<v Speaker 0>you want a hacky quick expose us to

00:33:44.255 --> 00:33:46.459
<v Speaker 0>the wild or the Internet kind of thing.

00:33:47.340 --> 00:33:48.380
<v Speaker 0>Would you agree with that? Yeah, I would

00:33:48.380 --> 00:33:50.299
<v Speaker 2>agree with that. Yeah. No. I if you

00:33:50.299 --> 00:33:52.539
<v Speaker 2>want to expose something outside of the cluster,

00:33:52.539 --> 00:33:54.139
<v Speaker 2>the first thing you should look into is

00:33:54.139 --> 00:33:54.940
<v Speaker 2>ingress.

00:33:55.260 --> 00:33:55.899
<v Speaker 2>Right?

00:33:56.299 --> 00:33:58.365
<v Speaker 2>However, there may be some edge cases where

00:33:58.365 --> 00:34:00.685
<v Speaker 2>you have to go down to a lower

00:34:00.685 --> 00:34:02.284
<v Speaker 2>level and then those

00:34:02.845 --> 00:34:04.924
<v Speaker 2>node port host port services are

00:34:05.245 --> 00:34:06.044
<v Speaker 2>useful.

00:34:06.685 --> 00:34:09.805
<v Speaker 2>You'll if you ever end up setting up,

00:34:10.125 --> 00:34:12.000
<v Speaker 2>for example, NGINX Ingress, if you deploy your

00:34:12.000 --> 00:34:14.719
<v Speaker 2>own Ingress, then you will eventually have to

00:34:14.719 --> 00:34:16.320
<v Speaker 2>touch on this, right, because you need a

00:34:16.320 --> 00:34:17.680
<v Speaker 2>way to somehow get

00:34:17.840 --> 00:34:20.239
<v Speaker 2>the traffic to the NGINX Ingress controller in

00:34:20.239 --> 00:34:21.040
<v Speaker 2>the first place.

00:34:22.800 --> 00:34:24.719
<v Speaker 2>That's also where this host port, node port

00:34:24.675 --> 00:34:26.275
<v Speaker 2>difference comes into play.

00:34:27.475 --> 00:34:30.114
<v Speaker 1>So just clarifying in the in the ML

00:34:30.114 --> 00:34:31.635
<v Speaker 1>resources that you defined,

00:34:31.715 --> 00:34:34.275
<v Speaker 1>in those services where you didn't say node

00:34:34.275 --> 00:34:36.275
<v Speaker 1>port, it's by default cluster IP?

00:34:36.515 --> 00:34:38.610
<v Speaker 0>That is correct. If you emit it,

00:34:38.929 --> 00:34:40.449
<v Speaker 0>the default by

00:34:41.329 --> 00:34:42.130
<v Speaker 0>Kubernetes

00:34:42.130 --> 00:34:44.130
<v Speaker 0>control plane or the defaulters is to set

00:34:44.130 --> 00:34:45.730
<v Speaker 0>this to cluster IP.

00:34:46.530 --> 00:34:47.330
<v Speaker 1>Okay.

00:34:47.569 --> 00:34:49.650
<v Speaker 1>And the ports you just out of simplicity

00:34:49.650 --> 00:34:50.929
<v Speaker 1>reason named them

00:34:51.385 --> 00:34:53.385
<v Speaker 1>and the service the same as in the

00:34:53.705 --> 00:34:54.345
<v Speaker 1>deployment?

00:34:55.065 --> 00:34:57.385
<v Speaker 0>Yeah. So let's run over that again quickly

00:34:57.385 --> 00:34:59.385
<v Speaker 0>then. So the first cluster IP I have,

00:34:59.385 --> 00:35:01.385
<v Speaker 0>I have matched the name with the deployment

00:35:01.385 --> 00:35:03.385
<v Speaker 0>that we want to expose and the selectors

00:35:03.385 --> 00:35:05.385
<v Speaker 0>also match up. This is the ideal approach.

00:35:05.385 --> 00:35:07.770
<v Speaker 0>Right? Generally, this everything lines up, everything's the

00:35:07.770 --> 00:35:09.530
<v Speaker 0>same, if anything differs you can spot it

00:35:09.530 --> 00:35:11.530
<v Speaker 0>right away from the YAML, you understand what's

00:35:11.530 --> 00:35:13.690
<v Speaker 0>going on. Something else that's important to note

00:35:13.690 --> 00:35:15.930
<v Speaker 0>from all of these definitions that I've only

00:35:15.930 --> 00:35:17.930
<v Speaker 0>ever configured port

00:35:18.010 --> 00:35:19.690
<v Speaker 0>and the only port that is important is

00:35:19.690 --> 00:35:20.810
<v Speaker 0>the one in the container that I want

00:35:20.810 --> 00:35:22.765
<v Speaker 0>to expose over the service. You can get

00:35:22.765 --> 00:35:24.365
<v Speaker 0>away nine times out of 10 without ever

00:35:24.365 --> 00:35:26.205
<v Speaker 0>tweaking that and you'll be okay.

00:35:27.085 --> 00:35:28.845
<v Speaker 0>The next one we have is the node

00:35:28.845 --> 00:35:30.205
<v Speaker 0>info service,

00:35:30.205 --> 00:35:32.045
<v Speaker 0>so the selector is the same and that

00:35:32.045 --> 00:35:34.605
<v Speaker 0>I want this deployment, oops, excuse me.

00:35:35.570 --> 00:35:37.570
<v Speaker 0>I still want to target this deployment, but

00:35:37.570 --> 00:35:40.130
<v Speaker 0>I'm exposing a different port numbers. I've just

00:35:40.130 --> 00:35:41.890
<v Speaker 0>named the service to be slightly different.

00:35:42.290 --> 00:35:44.290
<v Speaker 0>Okay here, but obviously looking at it as

00:35:44.290 --> 00:35:45.970
<v Speaker 0>first glance, I'd go, oh, something's a little

00:35:45.970 --> 00:35:47.010
<v Speaker 0>different about this.

00:35:47.490 --> 00:35:49.570
<v Speaker 0>And then finally the note, sorry, and you

00:35:49.570 --> 00:35:49.890
<v Speaker 0>go Philip.

00:35:50.635 --> 00:35:53.035
<v Speaker 2>Could you expose both of them in the

00:35:53.035 --> 00:35:54.075
<v Speaker 2>same service?

00:35:55.995 --> 00:35:58.155
<v Speaker 0>Which is tricky. You can expose multiple ports

00:35:58.155 --> 00:35:59.915
<v Speaker 0>in the same service. Yes.

00:36:01.435 --> 00:36:03.115
<v Speaker 0>I guess And in this case, we could

00:36:03.060 --> 00:36:04.900
<v Speaker 2>because they're inside the same pod.

00:36:05.460 --> 00:36:06.980
<v Speaker 2>Right? So if you look at the first

00:36:06.980 --> 00:36:09.060
<v Speaker 2>one, we could have both of them exposed

00:36:09.060 --> 00:36:09.780
<v Speaker 2>there.

00:36:09.860 --> 00:36:11.220
<v Speaker 2>And because they're in the same pod, this

00:36:11.220 --> 00:36:12.900
<v Speaker 2>works. But if they were in the different

00:36:12.900 --> 00:36:13.540
<v Speaker 2>pods,

00:36:13.780 --> 00:36:15.460
<v Speaker 2>then the selectors would be different and then

00:36:15.460 --> 00:36:17.300
<v Speaker 2>we couldn't do this. Then we would need

00:36:17.300 --> 00:36:18.420
<v Speaker 2>to use two services.

00:36:19.365 --> 00:36:21.045
<v Speaker 0>Yes, you're correct.

00:36:21.445 --> 00:36:22.965
<v Speaker 0>And right, yeah, we should show that as

00:36:22.965 --> 00:36:23.365
<v Speaker 0>well.

00:36:24.725 --> 00:36:25.365
<v Speaker 0>Okay.

00:36:25.765 --> 00:36:27.205
<v Speaker 0>And then the last one is a node

00:36:27.205 --> 00:36:27.845
<v Speaker 0>port.

00:36:28.005 --> 00:36:29.445
<v Speaker 0>So we have a special name for that,

00:36:29.445 --> 00:36:31.525
<v Speaker 0>we're using the same selector, and again, we're

00:36:31.525 --> 00:36:33.285
<v Speaker 0>just targeting the one that we want to

00:36:32.910 --> 00:36:34.349
<v Speaker 0>expose. So this node port is the exact

00:36:34.349 --> 00:36:36.430
<v Speaker 0>same only instead of a cluster IP, it's

00:36:36.430 --> 00:36:37.950
<v Speaker 0>gonna, well you'll still get a cluster IP

00:36:37.950 --> 00:36:39.869
<v Speaker 0>I think, but it's gonna also expose a

00:36:39.869 --> 00:36:40.990
<v Speaker 0>high port number

00:36:41.230 --> 00:36:43.470
<v Speaker 0>that is available in any node within your

00:36:43.470 --> 00:36:45.549
<v Speaker 0>cluster and it will use the cube proxy

00:36:45.549 --> 00:36:47.625
<v Speaker 0>to route that to a port regardless of

00:36:47.625 --> 00:36:49.545
<v Speaker 0>the node it is on. And we won't

00:36:49.545 --> 00:36:50.985
<v Speaker 0>see that working, but we can try and

00:36:50.985 --> 00:36:53.305
<v Speaker 0>explain it just because that's a local cluster,

00:36:53.305 --> 00:36:55.385
<v Speaker 0>there is only one node. Okay,

00:36:55.945 --> 00:36:56.425
<v Speaker 0>so

00:36:56.745 --> 00:36:58.265
<v Speaker 0>let me reapply this so we get the

00:36:58.265 --> 00:36:58.585
<v Speaker 0>changes.

00:37:00.519 --> 00:37:01.240
<v Speaker 0>Oh yeah.

00:37:01.480 --> 00:37:03.880
<v Speaker 0>When you expose multiple ports like this, you

00:37:03.880 --> 00:37:05.400
<v Speaker 0>do need to provide a name to give

00:37:05.400 --> 00:37:07.000
<v Speaker 0>it some form of uniqueness.

00:37:07.799 --> 00:37:09.960
<v Speaker 1>Do you need in that case both if

00:37:09.960 --> 00:37:12.759
<v Speaker 1>they have different labels, both labels or how

00:37:12.759 --> 00:37:13.799
<v Speaker 1>how would it know

00:37:15.405 --> 00:37:16.365
<v Speaker 1>which one to

00:37:17.405 --> 00:37:19.805
<v Speaker 0>So when you call the service IP, you

00:37:19.805 --> 00:37:21.805
<v Speaker 0>can specify a port number and I believe

00:37:21.805 --> 00:37:23.645
<v Speaker 0>it will route you to the right one.

00:37:23.645 --> 00:37:25.885
<v Speaker 0>We'll confirm that actually. I think I've maybe

00:37:25.885 --> 00:37:27.650
<v Speaker 0>maybe just confused myself there.

00:37:28.770 --> 00:37:29.410
<v Speaker 0>Okay.

00:37:30.690 --> 00:37:31.970
<v Speaker 0>So let's take a look at our service

00:37:31.970 --> 00:37:33.730
<v Speaker 0>definitions. So we have our first one which

00:37:33.730 --> 00:37:34.610
<v Speaker 0>is here.

00:37:34.930 --> 00:37:36.850
<v Speaker 0>So annex one cluster IP, we have an

00:37:36.850 --> 00:37:38.530
<v Speaker 0>IP address and we can see that two

00:37:38.530 --> 00:37:40.610
<v Speaker 0>ports are available and we can query either

00:37:40.610 --> 00:37:42.224
<v Speaker 0>one. So we can query on port 80

00:37:42.224 --> 00:37:44.625
<v Speaker 0>default and get the NGINX service, we can

00:37:44.625 --> 00:37:46.385
<v Speaker 0>hit 8,080 and we'll get the node info

00:37:46.385 --> 00:37:47.105
<v Speaker 0>service.

00:37:47.345 --> 00:37:49.345
<v Speaker 0>We have our node info one, which is

00:37:49.345 --> 00:37:51.025
<v Speaker 0>the same as the first one, but

00:37:51.424 --> 00:37:52.625
<v Speaker 0>separate definition.

00:37:53.025 --> 00:37:54.625
<v Speaker 0>And then we have our node port one

00:37:54.625 --> 00:37:56.545
<v Speaker 0>here, so you can see we still get

00:37:56.160 --> 00:37:58.240
<v Speaker 0>cluster IP, so we can still reference it

00:37:58.240 --> 00:37:59.440
<v Speaker 0>within the cluster,

00:37:59.599 --> 00:38:01.839
<v Speaker 0>but we can also see here with this

00:38:01.839 --> 00:38:03.520
<v Speaker 0>colon that we have this high port number

00:38:03.520 --> 00:38:05.520
<v Speaker 0>of 30,202,

00:38:06.400 --> 00:38:08.319
<v Speaker 0>which actually means I can query from outside

00:38:08.319 --> 00:38:10.880
<v Speaker 0>of the cluster on any node IP on

00:38:10.880 --> 00:38:12.515
<v Speaker 0>that port number and it will route me

00:38:12.515 --> 00:38:14.355
<v Speaker 0>to one of the pods in that service.

00:38:15.795 --> 00:38:17.075
<v Speaker 1>Can you try it out?

00:38:17.475 --> 00:38:19.555
<v Speaker 0>Yes. I can. I was gonna say that's

00:38:19.555 --> 00:38:21.475
<v Speaker 0>a lot of work. Let's just actually finally

00:38:21.475 --> 00:38:23.315
<v Speaker 0>show it working. And I I know there's

00:38:23.315 --> 00:38:25.075
<v Speaker 0>lots of comments coming in. Let me get

00:38:25.075 --> 00:38:26.730
<v Speaker 0>back to that in a second once we've

00:38:26.730 --> 00:38:28.970
<v Speaker 0>actually shown something here. So

00:38:29.850 --> 00:38:31.130
<v Speaker 0>let's jump inside

00:38:32.250 --> 00:38:33.930
<v Speaker 0>one of these pods.

00:38:36.010 --> 00:38:39.770
<v Speaker 0>Let's get pods exec and two NGINX two

00:38:39.770 --> 00:38:41.945
<v Speaker 0>because we haven't exposed us at all yet

00:38:41.945 --> 00:38:42.665
<v Speaker 0>and

00:38:42.745 --> 00:38:44.425
<v Speaker 0>hopefully I've got bash.

00:38:44.665 --> 00:38:47.065
<v Speaker 0>Yeah, okay. Do I have curl? Yes.

00:38:48.105 --> 00:38:50.665
<v Speaker 0>So we're we could use the cluster IPs

00:38:50.665 --> 00:38:51.865
<v Speaker 0>for all of this, but one of the

00:38:51.865 --> 00:38:53.945
<v Speaker 0>nice things about Kubernetes is that we DNS

00:38:53.945 --> 00:38:55.880
<v Speaker 0>based discovery, which means we can actually use

00:38:55.880 --> 00:38:58.600
<v Speaker 0>a service name, but then the namespace with

00:38:58.600 --> 00:38:59.960
<v Speaker 0>very little configuration.

00:38:59.960 --> 00:39:01.640
<v Speaker 0>So what that means is I can just

00:39:01.640 --> 00:39:03.240
<v Speaker 0>query and it is one,

00:39:03.400 --> 00:39:05.640
<v Speaker 0>and you'll see I get the nginx response.

00:39:06.760 --> 00:39:08.520
<v Speaker 0>I can also change the port

00:39:08.920 --> 00:39:11.455
<v Speaker 0>and I get the node info response.

00:39:13.375 --> 00:39:14.095
<v Speaker 0>Okay.

00:39:15.615 --> 00:39:18.015
<v Speaker 0>Now I wanna change one more thing here

00:39:18.015 --> 00:39:20.095
<v Speaker 0>to show the load balancing as well. So

00:39:20.095 --> 00:39:22.655
<v Speaker 0>I'm gonna modify the replicas

00:39:22.655 --> 00:39:24.255
<v Speaker 0>on this deployment here.

00:39:28.050 --> 00:39:29.330
<v Speaker 0>Let's just run four

00:39:31.170 --> 00:39:33.010
<v Speaker 0>and then we'll go back in here. So

00:39:34.770 --> 00:39:36.770
<v Speaker 0>we can have that on Port 80 as

00:39:36.770 --> 00:39:37.890
<v Speaker 0>many times as we want and we get

00:39:37.890 --> 00:39:39.545
<v Speaker 0>NGINX. We can head it as many times

00:39:39.545 --> 00:39:41.145
<v Speaker 0>as we want on Port 8080.

00:39:42.984 --> 00:39:44.665
<v Speaker 0>And you'll see

00:39:45.464 --> 00:39:47.625
<v Speaker 0>the last part of the tuple, the naming

00:39:47.625 --> 00:39:49.384
<v Speaker 0>convention here is the pod ID and then

00:39:49.384 --> 00:39:51.144
<v Speaker 0>you can see we had load balanced across

00:39:51.144 --> 00:39:53.730
<v Speaker 0>two different pods there, when we requested that

00:39:53.730 --> 00:39:55.010
<v Speaker 0>service name.

00:39:56.450 --> 00:39:58.770
<v Speaker 0>Does that make sense? We understand what's going

00:39:58.770 --> 00:39:59.730
<v Speaker 0>on there. Okay.

00:40:02.050 --> 00:40:04.050
<v Speaker 2>The one question was also about port and

00:40:04.050 --> 00:40:06.690
<v Speaker 2>target port. Maybe we should talk about this

00:40:05.985 --> 00:40:06.945
<v Speaker 2>also a little bit.

00:40:08.305 --> 00:40:08.945
<v Speaker 0>Yes.

00:40:09.185 --> 00:40:09.745
<v Speaker 0>Let's

00:40:11.105 --> 00:40:14.305
<v Speaker 0>let me demo the node port then we'll

00:40:14.305 --> 00:40:16.465
<v Speaker 0>we'll tackle the target port as well then.

00:40:16.465 --> 00:40:17.025
<v Speaker 0>Okay.

00:40:17.585 --> 00:40:20.385
<v Speaker 0>And we're gonna do

00:40:19.520 --> 00:40:20.240
<v Speaker 0>so

00:40:21.040 --> 00:40:22.800
<v Speaker 0>let's try and get nodes, wait I get

00:40:22.800 --> 00:40:24.720
<v Speaker 0>an IP address. Yes. Okay, so this is

00:40:24.720 --> 00:40:25.280
<v Speaker 0>my

00:40:26.720 --> 00:40:28.720
<v Speaker 0>IP address of my node,

00:40:28.960 --> 00:40:29.680
<v Speaker 0>I think

00:40:30.000 --> 00:40:31.839
<v Speaker 0>Docker for Mac is going to let me

00:40:31.839 --> 00:40:33.965
<v Speaker 0>query that, we're about to find out and

00:40:34.285 --> 00:40:37.405
<v Speaker 0>I'm gonna target on 30202,

00:40:37.405 --> 00:40:38.765
<v Speaker 0>which is that node port, so this is

00:40:38.765 --> 00:40:40.605
<v Speaker 0>me outside of the cluster, this is me

00:40:40.605 --> 00:40:41.805
<v Speaker 0>on my local machine.

00:40:43.645 --> 00:40:45.805
<v Speaker 0>Of course that doesn't work, that was saying,

00:40:46.045 --> 00:40:49.100
<v Speaker 0>docker for Mac does provide a DNS name.

00:40:49.900 --> 00:40:51.420
<v Speaker 0>I have no idea if that's the right

00:40:51.420 --> 00:40:51.900
<v Speaker 0>one.

00:40:55.260 --> 00:40:56.700
<v Speaker 0>Should I use Linux?

00:40:57.180 --> 00:40:59.020
<v Speaker 0>Anyone know how Docker for Mac works?

00:40:59.660 --> 00:41:01.825
<v Speaker 2>Is there a way to SSH into the

00:41:01.825 --> 00:41:04.145
<v Speaker 2>virtual machine that it starts? No, you cannot

00:41:04.145 --> 00:41:06.305
<v Speaker 0>SSH into the virtual machine. There is a

00:41:06.305 --> 00:41:07.505
<v Speaker 0>DNS name though,

00:41:08.465 --> 00:41:10.465
<v Speaker 0>let me, let's just use the docs, right?

00:41:10.465 --> 00:41:12.705
<v Speaker 0>I mean, don't know everything, I Google stuff

00:41:12.705 --> 00:41:15.400
<v Speaker 0>more than I actually know stuff, so Docker

00:41:15.400 --> 00:41:18.440
<v Speaker 0>for Mac DNS name node port. Let's see

00:41:18.440 --> 00:41:19.720
<v Speaker 0>what the internet says.

00:41:20.760 --> 00:41:22.600
<v Speaker 2>Well, I also don't know any of this,

00:41:22.600 --> 00:41:24.680
<v Speaker 2>I have KubeCuttle explain all the time in

00:41:24.680 --> 00:41:26.360
<v Speaker 2>the background here. Yeah, exactly.

00:41:27.295 --> 00:41:29.055
<v Speaker 0>There is a DNS name

00:41:29.215 --> 00:41:31.055
<v Speaker 0>for Docker for Mac that allows you to

00:41:32.095 --> 00:41:34.175
<v Speaker 0>Docker for Mac dot local host.

00:41:34.415 --> 00:41:35.535
<v Speaker 0>Maybe I was close.

00:41:39.789 --> 00:41:42.190
<v Speaker 0>Docker from Mac did actually resolve and the

00:41:42.190 --> 00:41:43.230
<v Speaker 0>Docker from Mac.

00:41:45.069 --> 00:41:46.910
<v Speaker 0>Okay, let's try that IP address.

00:41:56.924 --> 00:41:59.085
<v Speaker 0>I don't think the node port works then

00:41:59.085 --> 00:42:00.924
<v Speaker 0>with Docker for Mac, so I can't show

00:42:00.924 --> 00:42:01.645
<v Speaker 0>you that.

00:42:02.444 --> 00:42:03.484
<v Speaker 0>And I don't know if I have any

00:42:03.484 --> 00:42:06.285
<v Speaker 0>clusters available. However, that would work, trust me.

00:42:06.285 --> 00:42:08.125
<v Speaker 0>Right? I'm a very trustable person.

00:42:09.320 --> 00:42:11.000
<v Speaker 0>The node port just means this,

00:42:11.640 --> 00:42:14.040
<v Speaker 0>I think what happens is the

00:42:16.120 --> 00:42:18.840
<v Speaker 0>CNI implementation or cube proxy whatever one it

00:42:18.840 --> 00:42:21.320
<v Speaker 0>is configures an IP table on all of

00:42:21.320 --> 00:42:23.785
<v Speaker 0>the nodes that says listening on this port

00:42:23.785 --> 00:42:25.305
<v Speaker 0>number, the 30202

00:42:25.305 --> 00:42:26.665
<v Speaker 0>and when the request comes in, it will

00:42:26.665 --> 00:42:29.785
<v Speaker 0>forward it to some pod on your cluster

00:42:29.785 --> 00:42:30.585
<v Speaker 0>somewhere.

00:42:31.305 --> 00:42:33.385
<v Speaker 0>Unfortunately, don't think I can show you it

00:42:33.385 --> 00:42:34.025
<v Speaker 0>working.

00:42:35.145 --> 00:42:36.800
<v Speaker 0>Which leads us on to Philips

00:42:36.960 --> 00:42:37.920
<v Speaker 0>thing now.

00:42:38.080 --> 00:42:39.200
<v Speaker 0>Target ports.

00:42:39.520 --> 00:42:40.560
<v Speaker 0>You wanna

00:42:41.920 --> 00:42:44.080
<v Speaker 0>what one would you like to change, Philip?

00:42:44.880 --> 00:42:46.720
<v Speaker 2>Well, I think we should actually change the

00:42:46.720 --> 00:42:48.480
<v Speaker 2>second one because

00:42:48.560 --> 00:42:49.520
<v Speaker 2>we have

00:42:49.840 --> 00:42:52.160
<v Speaker 2>the second one we listen on eighty eighty

00:42:52.055 --> 00:42:54.775
<v Speaker 2>in the actual process, right? Yeah. Which is

00:42:54.775 --> 00:42:57.255
<v Speaker 2>beneficial because we would rather want to have

00:42:57.255 --> 00:42:59.255
<v Speaker 2>all our ports listen on high level ports

00:42:59.255 --> 00:43:02.215
<v Speaker 2>because it doesn't require root or fancy capability

00:43:02.295 --> 00:43:03.575
<v Speaker 2>magic, right?

00:43:03.895 --> 00:43:05.575
<v Speaker 2>There's like a whole discussion if

00:43:07.410 --> 00:43:10.210
<v Speaker 2>unprivileged processes should be able to require low

00:43:10.210 --> 00:43:11.970
<v Speaker 2>level ports. But by default, on Linux, they

00:43:11.970 --> 00:43:15.010
<v Speaker 2>cannot. So anything that's not root, started by

00:43:15.010 --> 00:43:15.650
<v Speaker 2>root,

00:43:15.810 --> 00:43:16.610
<v Speaker 2>cannot

00:43:17.090 --> 00:43:19.410
<v Speaker 2>bind to any port that's below ten twenty

00:43:19.410 --> 00:43:20.609
<v Speaker 2>four, if I'm not mistaken.

00:43:22.325 --> 00:43:24.565
<v Speaker 2>And so we would need to run our

00:43:24.565 --> 00:43:26.325
<v Speaker 2>web server as root in order to bind

00:43:26.325 --> 00:43:28.805
<v Speaker 2>to port 80, which is usually not

00:43:29.684 --> 00:43:32.405
<v Speaker 2>encouraged. It's actually discouraged. I think that's the

00:43:32.405 --> 00:43:32.885
<v Speaker 2>word.

00:43:33.444 --> 00:43:35.285
<v Speaker 2>The benefit here is that we can use

00:43:35.285 --> 00:43:36.165
<v Speaker 2>a service

00:43:36.440 --> 00:43:39.320
<v Speaker 2>and have the services port be 80 but

00:43:39.320 --> 00:43:41.480
<v Speaker 2>have the target port be 8,080.

00:43:41.560 --> 00:43:43.480
<v Speaker 2>And this way, we can still talk to

00:43:43.480 --> 00:43:46.440
<v Speaker 2>our process by talking to some IP on

00:43:46.440 --> 00:43:47.400
<v Speaker 2>port 80.

00:43:47.960 --> 00:43:50.120
<v Speaker 2>But in the background, it's actually running under

00:43:50.120 --> 00:43:51.880
<v Speaker 2>and listening on port 8,080

00:43:52.065 --> 00:43:54.385
<v Speaker 2>and can be run as an unprivileged user

00:43:54.385 --> 00:43:55.105
<v Speaker 2>then.

00:43:56.464 --> 00:43:57.105
<v Speaker 0>Yes.

00:43:57.345 --> 00:43:59.345
<v Speaker 0>Let me try and Okay. Surmise that in

00:43:59.345 --> 00:44:00.385
<v Speaker 0>one lane then.

00:44:00.704 --> 00:44:03.905
<v Speaker 0>The reason we would use target port is

00:44:03.905 --> 00:44:05.905
<v Speaker 0>when we want our service to be available

00:44:05.905 --> 00:44:08.710
<v Speaker 0>on more traditional or privileged port numbers,

00:44:08.870 --> 00:44:10.950
<v Speaker 0>like we probably always want our web services

00:44:10.950 --> 00:44:13.590
<v Speaker 0>available on four forty three or 80. However,

00:44:13.590 --> 00:44:17.270
<v Speaker 0>the container port or the pod doesn't expose

00:44:17.270 --> 00:44:19.350
<v Speaker 0>the service on that port. The chances are

00:44:19.350 --> 00:44:20.710
<v Speaker 0>your pod is gonna be using something higher

00:44:20.710 --> 00:44:22.985
<v Speaker 0>like eighty eighty or 3,000 or 4,000 or

00:44:22.985 --> 00:44:23.865
<v Speaker 0>3,006

00:44:23.865 --> 00:44:24.585
<v Speaker 0>etcetera.

00:44:24.905 --> 00:44:25.945
<v Speaker 0>And instead,

00:44:26.025 --> 00:44:27.465
<v Speaker 0>what we do is we say, make our

00:44:27.465 --> 00:44:30.425
<v Speaker 0>service available on 80, however the pod is

00:44:30.425 --> 00:44:31.465
<v Speaker 0>going to be listening

00:44:31.865 --> 00:44:33.065
<v Speaker 0>on 8,080.

00:44:34.985 --> 00:44:37.145
<v Speaker 0>Now we can now reapply this,

00:44:39.520 --> 00:44:42.080
<v Speaker 0>and if we exec back into this pod,

00:44:42.319 --> 00:44:43.760
<v Speaker 0>we can do curl

00:44:43.839 --> 00:44:46.559
<v Speaker 0>and the service name here was, I know

00:44:46.559 --> 00:44:47.760
<v Speaker 0>it's node info.

00:44:48.160 --> 00:44:50.079
<v Speaker 0>We had on port 80, you know, so

00:44:50.079 --> 00:44:51.280
<v Speaker 0>it's just a default web port.

00:44:51.984 --> 00:44:54.145
<v Speaker 0>It's been forwarded to the pod on port

00:44:54.145 --> 00:44:56.865
<v Speaker 0>8,080 using the target port definition and then

00:44:56.865 --> 00:44:58.385
<v Speaker 0>gives us our response.

00:44:59.585 --> 00:45:01.265
<v Speaker 0>That's when you would choose target port is

00:45:01.265 --> 00:45:02.385
<v Speaker 0>when you wanna do a little bit of

00:45:02.385 --> 00:45:04.785
<v Speaker 0>juggling to get privileged port numbers available on

00:45:04.785 --> 00:45:07.185
<v Speaker 0>the service that aren't available on your pod.

00:45:09.869 --> 00:45:12.510
<v Speaker 1>Okay. In that case, the target port has

00:45:12.510 --> 00:45:13.550
<v Speaker 1>to match the

00:45:13.790 --> 00:45:14.750
<v Speaker 1>pod port.

00:45:15.550 --> 00:45:17.950
<v Speaker 0>Yes. And then that's when container port comes

00:45:17.950 --> 00:45:19.630
<v Speaker 0>in and you can juggle things even more

00:45:19.630 --> 00:45:21.869
<v Speaker 0>if you really, really, really want to. So

00:45:21.869 --> 00:45:23.845
<v Speaker 0>I think you mentioned this at the start.

00:45:24.404 --> 00:45:27.684
<v Speaker 0>Yeah. When you're configuring your ports here is

00:45:27.684 --> 00:45:30.325
<v Speaker 0>that you can actually expose this.

00:45:33.365 --> 00:45:35.045
<v Speaker 0>I think it's just port, is my auto

00:45:35.045 --> 00:45:36.484
<v Speaker 0>complete wrong or am I wrong?

00:45:40.150 --> 00:45:41.270
<v Speaker 0>Okay.

00:45:41.350 --> 00:45:42.870
<v Speaker 0>Maybe it is supposed to port.

00:45:46.870 --> 00:45:48.310
<v Speaker 0>Correct me, Philip. What have I got wrong

00:45:48.310 --> 00:45:50.870
<v Speaker 0>there? I thought you could specify container port

00:45:50.870 --> 00:45:52.765
<v Speaker 0>and expose it as a different port here,

00:45:52.765 --> 00:45:54.285
<v Speaker 0>but maybe I'm completely wrong.

00:45:54.765 --> 00:45:57.005
<v Speaker 2>I I think the most useful part of

00:45:57.005 --> 00:45:59.245
<v Speaker 2>this is you can name them and then

00:45:59.245 --> 00:46:00.845
<v Speaker 2>address them with the name.

00:46:01.725 --> 00:46:03.405
<v Speaker 2>You don't have to name

00:46:03.485 --> 00:46:06.579
<v Speaker 2>here. Say name something, web for example. Then

00:46:06.579 --> 00:46:08.260
<v Speaker 2>when you reference it from somewhere else, you

00:46:08.260 --> 00:46:09.940
<v Speaker 2>can reference it as the name.

00:46:10.819 --> 00:46:12.820
<v Speaker 0>Yeah. That's a good point as well, actually.

00:46:13.859 --> 00:46:15.220
<v Speaker 0>So you can see What is the benefit

00:46:15.220 --> 00:46:15.860
<v Speaker 1>of that?

00:46:16.740 --> 00:46:18.339
<v Speaker 2>You don't have to remember the port number

00:46:18.339 --> 00:46:20.045
<v Speaker 2>that you possibly.

00:46:20.685 --> 00:46:23.245
<v Speaker 0>Yeah. So here It refers the same. Right?

00:46:23.245 --> 00:46:25.005
<v Speaker 1>It refers yeah. To the

00:46:25.325 --> 00:46:27.245
<v Speaker 1>name port number. If we add a name

00:46:27.245 --> 00:46:29.245
<v Speaker 0>wipe here and a name node info here,

00:46:29.245 --> 00:46:31.645
<v Speaker 0>that means on our service definition instead of

00:46:32.125 --> 00:46:33.405
<v Speaker 0>of referencing

00:46:35.940 --> 00:46:36.660
<v Speaker 0>this.

00:46:40.900 --> 00:46:42.420
<v Speaker 0>Can you put web there or is it

00:46:42.420 --> 00:46:44.340
<v Speaker 0>just named like that? No.

00:46:48.980 --> 00:46:50.260
<v Speaker 0>I thought you could name it.

00:46:53.455 --> 00:46:54.575
<v Speaker 2>No. Here you can. Oh, no. No. That's

00:46:54.815 --> 00:46:57.135
<v Speaker 0>yeah. I'm I'm sorry. I'm being really silly.

00:46:57.135 --> 00:46:58.575
<v Speaker 0>Yeah. This is the pod. This is the

00:46:58.575 --> 00:46:59.775
<v Speaker 0>port we expose it on and then the

00:46:59.775 --> 00:47:01.695
<v Speaker 0>name is the one that is looking

00:47:01.695 --> 00:47:02.335
<v Speaker 0>up.

00:47:02.895 --> 00:47:04.415
<v Speaker 2>Well, I think what you can do here

00:47:04.415 --> 00:47:05.375
<v Speaker 2>with the name is

00:47:06.770 --> 00:47:09.810
<v Speaker 2>Kubernetes will set environment variables automatically

00:47:09.810 --> 00:47:12.450
<v Speaker 2>inside the process's runtime environment

00:47:12.609 --> 00:47:15.250
<v Speaker 2>that expose certain information about

00:47:15.890 --> 00:47:17.730
<v Speaker 2>service discovery. The two ways how you can

00:47:17.730 --> 00:47:19.810
<v Speaker 2>use Kubernetes service discovery is DNS

00:47:20.050 --> 00:47:21.410
<v Speaker 2>and those environment variables.

00:47:21.924 --> 00:47:24.005
<v Speaker 2>And based on these names, it will have

00:47:24.005 --> 00:47:26.085
<v Speaker 2>these environment variables that tell you how to

00:47:26.085 --> 00:47:27.605
<v Speaker 2>find that thing.

00:47:27.845 --> 00:47:29.684
<v Speaker 2>But you it will be something like I

00:47:29.684 --> 00:47:31.525
<v Speaker 2>don't don't you know, don't quote me on

00:47:31.525 --> 00:47:33.765
<v Speaker 2>this, but it's something like There. Oh, yeah.

00:47:33.765 --> 00:47:35.285
<v Speaker 2>You can see them there. Right? So it's

00:47:35.285 --> 00:47:37.950
<v Speaker 2>a service name port four four three, And

00:47:37.950 --> 00:47:39.470
<v Speaker 2>if you give them a name, they will

00:47:39.470 --> 00:47:40.670
<v Speaker 2>probably show up there

00:47:41.070 --> 00:47:42.430
<v Speaker 2>with that name also.

00:47:45.630 --> 00:47:48.510
<v Speaker 0>All right. We had a comment from Noel

00:47:48.510 --> 00:47:51.310
<v Speaker 0>who said try NodePort on localhost.

00:47:51.310 --> 00:47:51.870
<v Speaker 0>Just

00:47:52.875 --> 00:47:53.675
<v Speaker 0>why not?

00:47:56.715 --> 00:47:58.555
<v Speaker 0>Docker for Mac makes it easier than even

00:47:58.555 --> 00:48:00.075
<v Speaker 0>I thought it was supposed to be. So

00:48:00.075 --> 00:48:01.755
<v Speaker 0>you can see Docker for Mac does actually

00:48:01.755 --> 00:48:04.235
<v Speaker 0>handle the node port on my local networking.

00:48:04.235 --> 00:48:05.995
<v Speaker 0>So there you go. Node port does work.

00:48:05.995 --> 00:48:06.555
<v Speaker 0>Thank you, Noel.

00:48:09.279 --> 00:48:10.960
<v Speaker 0>Okay. Let's see. Do we get any I

00:48:10.960 --> 00:48:12.559
<v Speaker 2>think this is a very special case because

00:48:12.559 --> 00:48:15.440
<v Speaker 2>that's like, you know, there's networking magic many

00:48:15.440 --> 00:48:17.359
<v Speaker 2>many times now at this point already when

00:48:17.359 --> 00:48:19.200
<v Speaker 2>you do this on Mac and on local

00:48:19.200 --> 00:48:19.839
<v Speaker 2>host.

00:48:20.160 --> 00:48:22.445
<v Speaker 2>What's I think what's important to remember is

00:48:22.445 --> 00:48:24.525
<v Speaker 2>this. If you have actual for example, you

00:48:24.525 --> 00:48:26.605
<v Speaker 2>start cloud VMs and you were to start

00:48:27.085 --> 00:48:29.485
<v Speaker 2>Kubernetes by hand using kubeadm,

00:48:29.565 --> 00:48:31.565
<v Speaker 2>that those VMs would probably have an IP

00:48:31.565 --> 00:48:32.205
<v Speaker 2>address

00:48:32.525 --> 00:48:34.765
<v Speaker 2>and minus

00:48:34.140 --> 00:48:35.900
<v Speaker 2>security groups or something like this from the

00:48:35.900 --> 00:48:37.099
<v Speaker 2>cloud provider,

00:48:37.180 --> 00:48:39.099
<v Speaker 2>you could talk to those IP addresses.

00:48:39.260 --> 00:48:40.780
<v Speaker 2>Right? And if you say

00:48:41.019 --> 00:48:43.819
<v Speaker 2>node port, some port, you can talk to

00:48:43.819 --> 00:48:45.099
<v Speaker 2>this IP address

00:48:45.900 --> 00:48:48.255
<v Speaker 2>under this port from outside the cluster, and

00:48:48.255 --> 00:48:50.335
<v Speaker 2>the traffic will end up in your container.

00:48:52.815 --> 00:48:54.734
<v Speaker 2>Right? Because now that you can do localhost

00:48:54.734 --> 00:48:56.575
<v Speaker 2>and this port is just another layer of

00:48:56.575 --> 00:48:57.855
<v Speaker 2>networking magic

00:48:57.855 --> 00:49:00.095
<v Speaker 2>to somehow go from his local networking stack

00:49:00.095 --> 00:49:02.015
<v Speaker 2>on the Mac into this Linux virtual machine

00:49:02.015 --> 00:49:04.140
<v Speaker 2>and then inside there

00:49:04.300 --> 00:49:05.980
<v Speaker 2>eventually to the container.

00:49:06.859 --> 00:49:07.580
<v Speaker 0>Yes.

00:49:07.820 --> 00:49:09.580
<v Speaker 0>Lots of magic going on,

00:49:09.980 --> 00:49:11.260
<v Speaker 0>with Docker for Mac.

00:49:12.619 --> 00:49:14.540
<v Speaker 0>Alright. So we're kind of

00:49:15.195 --> 00:49:17.435
<v Speaker 0>approaching the the end of the time that

00:49:17.435 --> 00:49:19.515
<v Speaker 0>I have available at least here. So I

00:49:19.515 --> 00:49:21.435
<v Speaker 0>I wanna just check back and make sure

00:49:21.595 --> 00:49:23.995
<v Speaker 0>we actually explained more things than than raising

00:49:23.995 --> 00:49:26.555
<v Speaker 0>more questions. I hope that services are a

00:49:26.555 --> 00:49:29.115
<v Speaker 0>little bit more comprehendible now and if if

00:49:29.115 --> 00:49:31.040
<v Speaker 0>you have any final questions, let's try and

00:49:31.040 --> 00:49:31.840
<v Speaker 0>tackle them.

00:49:32.400 --> 00:49:34.160
<v Speaker 1>I think that was great.

00:49:34.800 --> 00:49:35.520
<v Speaker 1>Like,

00:49:36.000 --> 00:49:37.280
<v Speaker 1>more of a

00:49:38.000 --> 00:49:41.120
<v Speaker 1>hands on example than what you would get

00:49:41.200 --> 00:49:44.080
<v Speaker 1>the documentation where it's kind of explained from

00:49:44.080 --> 00:49:44.880
<v Speaker 1>one perspective

00:49:45.974 --> 00:49:48.694
<v Speaker 1>on what the different components are. Are there

00:49:48.694 --> 00:49:50.615
<v Speaker 1>any questions from the comments maybe

00:49:50.694 --> 00:49:52.295
<v Speaker 1>that or anything?

00:49:52.855 --> 00:49:55.815
<v Speaker 0>So we do have a few comments and

00:49:55.815 --> 00:49:58.295
<v Speaker 0>not particularly questions, just mostly people telling me

00:49:58.295 --> 00:49:59.730
<v Speaker 0>that I'm wrong, which I love.

00:50:02.130 --> 00:50:03.810
<v Speaker 0>So, Kustis says thank you for host port,

00:50:03.810 --> 00:50:04.930
<v Speaker 0>you don't know about that, he's gonna look

00:50:04.930 --> 00:50:07.250
<v Speaker 0>it up. We also have another comment from

00:50:07.250 --> 00:50:09.890
<v Speaker 0>Kustis who says that developers should or would

00:50:09.890 --> 00:50:12.530
<v Speaker 0>use ingress or load balancer services most of

00:50:12.530 --> 00:50:13.890
<v Speaker 0>the time. Yeah, you're right, I mean I

00:50:13.890 --> 00:50:16.325
<v Speaker 0>would discourage node ports as much as possible.

00:50:16.325 --> 00:50:17.765
<v Speaker 0>They're a temporary solution

00:50:17.925 --> 00:50:20.005
<v Speaker 0>for clusters that don't have a proper ingress

00:50:20.005 --> 00:50:20.885
<v Speaker 0>route yet.

00:50:21.365 --> 00:50:22.885
<v Speaker 0>But they are they're hacking and

00:50:23.685 --> 00:50:24.485
<v Speaker 2>balancer.

00:50:25.045 --> 00:50:27.045
<v Speaker 2>Load balancer is an edge case also. It's

00:50:27.045 --> 00:50:29.605
<v Speaker 2>it's a leftover from previous days. Yes.

00:50:30.849 --> 00:50:32.770
<v Speaker 2>Ingress is the new way, and it should

00:50:32.770 --> 00:50:34.210
<v Speaker 2>always be the default. You set this, and

00:50:34.210 --> 00:50:35.650
<v Speaker 2>I totally agree with this.

00:50:36.210 --> 00:50:39.330
<v Speaker 2>And the default for services should be cluster

00:50:39.330 --> 00:50:41.970
<v Speaker 2>IP. You should use services by default

00:50:42.465 --> 00:50:43.505
<v Speaker 2>to expose

00:50:43.585 --> 00:50:46.225
<v Speaker 2>a number of pods together within your cluster

00:50:46.225 --> 00:50:48.065
<v Speaker 2>so you can talk to them more easily.

00:50:48.065 --> 00:50:49.985
<v Speaker 2>You can find them and you can talk

00:50:49.985 --> 00:50:51.505
<v Speaker 2>to them with a load balancing.

00:50:51.665 --> 00:50:53.185
<v Speaker 2>If you want to expose outside of the

00:50:53.185 --> 00:50:54.945
<v Speaker 2>cluster, the default should always be ingress.

00:50:56.080 --> 00:50:58.320
<v Speaker 2>And then if you have a very specific

00:50:58.320 --> 00:50:59.120
<v Speaker 2>use case,

00:50:59.440 --> 00:51:01.520
<v Speaker 2>there are some other more technical things that

00:51:01.520 --> 00:51:03.839
<v Speaker 2>you then can look into like load balancer,

00:51:03.839 --> 00:51:05.840
<v Speaker 2>like node port, host port, all those

00:51:06.720 --> 00:51:07.615
<v Speaker 2>other things.

00:51:08.415 --> 00:51:10.975
<v Speaker 0>Then we have another comment from Andreas, which

00:51:10.975 --> 00:51:11.935
<v Speaker 0>I'm gonna try

00:51:12.655 --> 00:51:14.015
<v Speaker 0>and shorten a little bit. But when I

00:51:14.015 --> 00:51:15.935
<v Speaker 0>complained that I didn't know why we had

00:51:15.935 --> 00:51:17.935
<v Speaker 0>to have the selector

00:51:17.935 --> 00:51:20.495
<v Speaker 0>different from the template specs, selectors or labels

00:51:20.495 --> 00:51:23.670
<v Speaker 0>within the deployment spec. Apparently that was, it

00:51:23.670 --> 00:51:25.349
<v Speaker 0>didn't used to be enforced. So now if

00:51:25.349 --> 00:51:26.710
<v Speaker 0>I were to try and apply that to

00:51:26.710 --> 00:51:27.990
<v Speaker 0>the customer and they were different, I would

00:51:27.990 --> 00:51:28.630
<v Speaker 0>complain.

00:51:28.950 --> 00:51:29.590
<v Speaker 0>But

00:51:29.910 --> 00:51:31.589
<v Speaker 0>that's just a legacy thing that's kind of

00:51:31.589 --> 00:51:33.030
<v Speaker 0>hung around unfortunately.

00:51:34.550 --> 00:51:36.710
<v Speaker 0>And to say another comment from Noah just

00:51:36.710 --> 00:51:39.295
<v Speaker 0>in remembrance in the past, So that's all

00:51:39.295 --> 00:51:39.935
<v Speaker 0>covered

00:51:40.255 --> 00:51:42.415
<v Speaker 0>and that's all our comments. I think we

00:51:42.415 --> 00:51:43.855
<v Speaker 0>are all good.

00:51:44.415 --> 00:51:46.895
<v Speaker 0>I'll just say thank you both joining me.

00:51:46.895 --> 00:51:48.175
<v Speaker 0>Thank you for your questions. Thank

00:51:48.655 --> 00:51:50.415
<v Speaker 0>you Philip for bringing all of that knowledge

00:51:50.415 --> 00:51:52.330
<v Speaker 0>and helping us And I hope we didn't

00:51:52.330 --> 00:51:54.250
<v Speaker 0>raise more questions than we answered.

00:51:54.490 --> 00:51:56.890
<v Speaker 1>It's great. Thank you. Alright. Have a great

00:51:56.890 --> 00:51:58.170
<v Speaker 0>day. Thank you again and I'll speak to

00:51:58.170 --> 00:52:00.410
<v Speaker 0>both soon. Have a nice day. Bye. Bye

00:52:00.410 --> 00:52:00.650
<v Speaker 0>bye.
