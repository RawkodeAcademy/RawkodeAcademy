WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 30a82e5a-30c7-45f5-baaf-2ad3f23a2373
Created: 2025-04-29T20:46:48.152Z
Duration: 6125.0127
Channels: 1

00:01:21.810 --> 00:01:24.689
<v Speaker 0>Hello. And welcome to today's episode of Rawkode

00:01:24.689 --> 00:01:25.409
<v Speaker 0>live.

00:01:25.649 --> 00:01:27.329
<v Speaker 0>Am your host, Rawkode.

00:01:27.570 --> 00:01:29.490
<v Speaker 0>Now before we begin, I just wanna take

00:01:29.490 --> 00:01:31.890
<v Speaker 0>a moment to thank my employer, Equinix Medal.

00:01:31.890 --> 00:01:34.770
<v Speaker 0>They provide the time for me to invest

00:01:35.075 --> 00:01:37.555
<v Speaker 0>and producing the show and creating

00:01:37.555 --> 00:01:39.475
<v Speaker 0>cloud native content for us all to learn

00:01:39.475 --> 00:01:40.195
<v Speaker 0>together.

00:01:40.835 --> 00:01:43.075
<v Speaker 0>Today, we're gonna be taking a look at

00:01:43.075 --> 00:01:43.954
<v Speaker 0>Kubernetes

00:01:43.954 --> 00:01:45.395
<v Speaker 0>and specifically,

00:01:45.634 --> 00:01:48.034
<v Speaker 0>auto scaling on Kubernetes. And to do that

00:01:48.034 --> 00:01:48.755
<v Speaker 0>today,

00:01:48.994 --> 00:01:49.634
<v Speaker 0>I am join.

00:01:52.720 --> 00:01:54.479
<v Speaker 0>Well, I messed that one up. I'm joined

00:01:54.479 --> 00:01:55.680
<v Speaker 0>by my friend,

00:01:56.159 --> 00:01:58.640
<v Speaker 0>Guy Templeton, an engineer for Skyscanner

00:01:58.640 --> 00:02:01.280
<v Speaker 0>and the co chair of SIG Auto Scaling.

00:02:01.280 --> 00:02:03.840
<v Speaker 0>Hey, Guy. How are you? Hi. Good. Thanks.

00:02:03.840 --> 00:02:04.159
<v Speaker 1>You?

00:02:04.925 --> 00:02:07.085
<v Speaker 0>Yeah. I'm doing alright. I mean, until I

00:02:07.085 --> 00:02:08.764
<v Speaker 0>I removed myself from the stream instead of

00:02:08.764 --> 00:02:10.605
<v Speaker 0>bringing you in. You know,

00:02:11.325 --> 00:02:13.405
<v Speaker 0>that's the joy of of live TV, I

00:02:13.405 --> 00:02:14.365
<v Speaker 0>guess. So

00:02:14.685 --> 00:02:17.325
<v Speaker 0>do you wanna give us a quick introduction

00:02:17.325 --> 00:02:19.245
<v Speaker 0>about yourself, and then we'll talk about what

00:02:19.245 --> 00:02:19.965
<v Speaker 0>we're gonna cover today?

00:02:20.550 --> 00:02:22.230
<v Speaker 1>Yep. So

00:02:22.230 --> 00:02:22.950
<v Speaker 1>as

00:02:23.270 --> 00:02:25.670
<v Speaker 1>you already mentioned, I'm a software engineer at

00:02:25.670 --> 00:02:26.550
<v Speaker 1>Skyscanner,

00:02:26.950 --> 00:02:27.350
<v Speaker 1>my

00:02:28.150 --> 00:02:30.790
<v Speaker 1>focus there has generally been on certain internal

00:02:31.030 --> 00:02:32.310
<v Speaker 1>developer tooling,

00:02:33.110 --> 00:02:35.190
<v Speaker 1>enabling Skyscanner's engineers to

00:02:35.905 --> 00:02:37.185
<v Speaker 1>deploy workloads

00:02:37.185 --> 00:02:39.425
<v Speaker 1>and build their code fast, etcetera.

00:02:39.825 --> 00:02:41.825
<v Speaker 1>As part of that, for the last two

00:02:41.825 --> 00:02:43.584
<v Speaker 1>years or so, I've been on the team

00:02:43.584 --> 00:02:46.065
<v Speaker 1>that has been building out our Kubernetes infrastructure

00:02:46.065 --> 00:02:47.505
<v Speaker 1>on top of AWS

00:02:48.625 --> 00:02:49.505
<v Speaker 1>and migrating

00:02:49.505 --> 00:02:51.265
<v Speaker 1>containerized workloads onto that.

00:02:52.440 --> 00:02:53.960
<v Speaker 1>And that's involved.

00:02:54.120 --> 00:02:55.720
<v Speaker 1>As part of that, I've sort of got

00:02:55.720 --> 00:02:57.720
<v Speaker 1>more and more involved in the Kubernetes community

00:02:57.720 --> 00:02:58.600
<v Speaker 1>over the time

00:02:59.320 --> 00:03:02.120
<v Speaker 1>with a particular focus on sort of cost

00:03:02.120 --> 00:03:02.840
<v Speaker 1>saving

00:03:03.000 --> 00:03:03.240
<v Speaker 1>and

00:03:04.095 --> 00:03:05.295
<v Speaker 1>auto scaling,

00:03:05.535 --> 00:03:07.215
<v Speaker 1>which is likely becoming

00:03:07.215 --> 00:03:10.575
<v Speaker 1>one of the co chairs of psychotic scaling.

00:03:11.935 --> 00:03:13.295
<v Speaker 0>Okay. Awesome.

00:03:13.935 --> 00:03:14.975
<v Speaker 0>I mean, so

00:03:15.215 --> 00:03:17.855
<v Speaker 0>let's start with the easiest question in the

00:03:17.855 --> 00:03:18.895
<v Speaker 0>world. How about that?

00:03:19.840 --> 00:03:22.160
<v Speaker 0>If I run my application on Kubernetes,

00:03:22.720 --> 00:03:25.040
<v Speaker 0>does it just magically auto scale by default?

00:03:25.120 --> 00:03:27.120
<v Speaker 0>I mean, that's a promise of Kubernetes. Right?

00:03:28.160 --> 00:03:28.960
<v Speaker 1>Unfortunately

00:03:29.760 --> 00:03:30.160
<v Speaker 1>not.

00:03:31.185 --> 00:03:34.224
<v Speaker 1>Kubernetes is clever, but but not quite clever

00:03:34.224 --> 00:03:35.985
<v Speaker 1>enough to yet

00:03:36.305 --> 00:03:39.025
<v Speaker 1>to figure out that it needs to scale

00:03:39.025 --> 00:03:40.145
<v Speaker 1>things magically

00:03:40.145 --> 00:03:41.584
<v Speaker 1>and how and what

00:03:42.224 --> 00:03:44.225
<v Speaker 1>where it should scale it, etcetera.

00:03:44.625 --> 00:03:45.425
<v Speaker 1>So that

00:03:46.800 --> 00:03:48.720
<v Speaker 1>as with a lot of Kubernetes, there's currently

00:03:48.720 --> 00:03:50.800
<v Speaker 1>a lot of dials there for people to

00:03:50.800 --> 00:03:53.280
<v Speaker 1>figure out like, to choose the way their

00:03:53.280 --> 00:03:54.560
<v Speaker 1>application scales.

00:03:55.360 --> 00:03:57.920
<v Speaker 1>That can potentially be a bit overwhelming at

00:03:57.920 --> 00:04:00.320
<v Speaker 1>the moment for users because there's so many

00:03:59.915 --> 00:04:01.275
<v Speaker 1>dials

00:04:01.275 --> 00:04:04.075
<v Speaker 1>for them to possibly change and and figure

00:04:04.075 --> 00:04:05.835
<v Speaker 1>out exactly how best to scale

00:04:06.075 --> 00:04:07.115
<v Speaker 1>their workloads,

00:04:07.195 --> 00:04:10.395
<v Speaker 1>how they expose the metrics they choose to

00:04:10.635 --> 00:04:12.795
<v Speaker 1>scale their workloads and make sure that Kubernetes

00:04:12.795 --> 00:04:13.675
<v Speaker 1>understands those.

00:04:14.720 --> 00:04:16.880
<v Speaker 1>And so that's that's what we'll try and

00:04:16.880 --> 00:04:17.680
<v Speaker 1>cover today.

00:04:18.160 --> 00:04:20.399
<v Speaker 1>Scaling both in horizontal sense

00:04:21.440 --> 00:04:23.840
<v Speaker 1>and choosing choosing your metrics, setting up those

00:04:23.840 --> 00:04:26.400
<v Speaker 1>pipelines to get metrics available for scaling,

00:04:26.800 --> 00:04:28.745
<v Speaker 1>as well as vertical auto scaling. So the

00:04:28.745 --> 00:04:30.185
<v Speaker 1>idea of adjusting

00:04:30.185 --> 00:04:33.705
<v Speaker 1>the resources on single pods to to meet

00:04:33.705 --> 00:04:34.905
<v Speaker 1>their requirements.

00:04:36.665 --> 00:04:37.945
<v Speaker 0>Okay. So

00:04:38.185 --> 00:04:38.985
<v Speaker 0>let's

00:04:38.985 --> 00:04:41.305
<v Speaker 0>continue with a little bit of background and

00:04:41.305 --> 00:04:42.825
<v Speaker 0>then I'll get my my screen shared and

00:04:42.825 --> 00:04:44.640
<v Speaker 0>we'll we'll get hands on with this stuff.

00:04:45.039 --> 00:04:47.840
<v Speaker 0>Now, I guess, the naive implementation and the

00:04:47.840 --> 00:04:51.039
<v Speaker 0>people and organizations teams that are adopting Kubernetes

00:04:51.039 --> 00:04:53.199
<v Speaker 0>may do is just to, you know, have

00:04:53.199 --> 00:04:55.040
<v Speaker 0>lots of deployments to the applications

00:04:56.080 --> 00:04:58.080
<v Speaker 0>and use the replicas field and say that

00:04:58.080 --> 00:04:59.655
<v Speaker 0>their spec. Set it to a big high

00:04:59.655 --> 00:05:01.895
<v Speaker 0>number to keep their traffic satisfied.

00:05:02.535 --> 00:05:04.295
<v Speaker 0>And that's not ideal. Right? You're you're what

00:05:04.295 --> 00:05:05.895
<v Speaker 0>you just said there was that, you know,

00:05:05.895 --> 00:05:07.895
<v Speaker 0>you're part of a cost savings initiative. It's

00:05:07.895 --> 00:05:09.415
<v Speaker 0>guys gonna have to reduce cost. And that

00:05:09.415 --> 00:05:12.780
<v Speaker 0>means scaling your application with the expected traffic

00:05:12.780 --> 00:05:14.940
<v Speaker 0>levels at any given time.

00:05:15.900 --> 00:05:17.819
<v Speaker 0>Would you say that using the replicas field

00:05:17.819 --> 00:05:20.620
<v Speaker 0>on a deployment spec is almost an anti

00:05:20.620 --> 00:05:21.180
<v Speaker 0>pattern?

00:05:22.300 --> 00:05:24.379
<v Speaker 1>I would say if you're doing that manually

00:05:24.379 --> 00:05:24.860
<v Speaker 1>yourself,

00:05:26.045 --> 00:05:28.365
<v Speaker 1>yeah, that's that's probably an active pattern.

00:05:29.085 --> 00:05:30.365
<v Speaker 1>I mean, a lot of these tools up

00:05:30.365 --> 00:05:32.925
<v Speaker 1>the hood will effectively be manipulating

00:05:33.165 --> 00:05:36.045
<v Speaker 1>those replica fields on a target, whether that's

00:05:36.045 --> 00:05:36.925
<v Speaker 1>a deployment

00:05:37.645 --> 00:05:38.605
<v Speaker 1>or similar.

00:05:38.845 --> 00:05:41.700
<v Speaker 1>But, yeah. I I think if if you're

00:05:41.780 --> 00:05:45.460
<v Speaker 1>if you're of the having to, like, go

00:05:45.460 --> 00:05:48.100
<v Speaker 1>in at, you know, say you've got protected

00:05:48.100 --> 00:05:50.180
<v Speaker 1>traffic spikes at eight in the morning for

00:05:50.180 --> 00:05:52.180
<v Speaker 1>some reason. If you're going in and, like,

00:05:52.195 --> 00:05:54.275
<v Speaker 1>an engineer is going in at 07:50 every

00:05:54.275 --> 00:05:57.075
<v Speaker 1>morning going better scale up, edit, compute, cut,

00:05:57.075 --> 00:05:58.275
<v Speaker 1>delete, deploy,

00:05:59.075 --> 00:06:01.155
<v Speaker 1>that that's that's probably an anti pattern. And

00:06:01.155 --> 00:06:03.955
<v Speaker 1>there's there are ways that you can achieve

00:06:03.955 --> 00:06:05.460
<v Speaker 1>that without having

00:06:05.780 --> 00:06:07.780
<v Speaker 1>to have an engineer manually edit A cron

00:06:07.780 --> 00:06:08.580
<v Speaker 0>job. Right?

00:06:08.900 --> 00:06:11.380
<v Speaker 1>Yeah. I mean, you could you could do

00:06:11.380 --> 00:06:14.340
<v Speaker 1>that. I'd still say it's not not not

00:06:14.340 --> 00:06:15.940
<v Speaker 1>the ideal solution.

00:06:17.195 --> 00:06:19.435
<v Speaker 0>Yeah. I mean, obviously, I'm

00:06:19.675 --> 00:06:21.435
<v Speaker 0>testing. Right? You know, we we want this

00:06:21.435 --> 00:06:23.195
<v Speaker 0>stuff to be slightly more sophisticated,

00:06:23.195 --> 00:06:25.275
<v Speaker 0>which is where HPAs and VPs come in.

00:06:25.275 --> 00:06:26.875
<v Speaker 0>You know, we actually Yeah.

00:06:27.995 --> 00:06:29.515
<v Speaker 0>We I I know that you're example. I

00:06:29.515 --> 00:06:30.795
<v Speaker 0>don't know if we're we're gonna cover it.

00:06:30.795 --> 00:06:32.310
<v Speaker 0>I'll I'll speculate. But, you know, we wanna

00:06:32.310 --> 00:06:35.189
<v Speaker 0>talk about using metrics from our applications to

00:06:35.189 --> 00:06:35.910
<v Speaker 0>understand

00:06:36.150 --> 00:06:38.949
<v Speaker 0>as the latency of the ninety fifth percentile

00:06:38.949 --> 00:06:40.550
<v Speaker 0>that we respond to our customers, but it

00:06:40.550 --> 00:06:43.909
<v Speaker 0>was an acceptable SLAs and scaling accordingly. Right?

00:06:43.909 --> 00:06:45.110
<v Speaker 1>I guess that. Exactly.

00:06:46.504 --> 00:06:48.345
<v Speaker 0>Alright. So all of the

00:06:49.065 --> 00:06:51.944
<v Speaker 0>stuff we're gonna cover today, you have published

00:06:51.944 --> 00:06:53.944
<v Speaker 0>to get up and it's public. Right? So

00:06:53.944 --> 00:06:56.425
<v Speaker 0>I can share this link? Yeah. Yep. Okay.

00:06:56.425 --> 00:07:01.145
<v Speaker 0>So we're gonna take a look at github.com/gjtempletonslash,

00:07:01.560 --> 00:07:02.760
<v Speaker 0>well, I'm not gonna read that out. It's

00:07:02.760 --> 00:07:04.120
<v Speaker 0>the Kubernetes

00:07:04.440 --> 00:07:06.200
<v Speaker 0>auto scaling by example.

00:07:06.920 --> 00:07:07.480
<v Speaker 0>I

00:07:07.880 --> 00:07:09.480
<v Speaker 0>haven't cloned it yet.

00:07:10.920 --> 00:07:12.120
<v Speaker 0>As I like to do with this show

00:07:12.120 --> 00:07:14.795
<v Speaker 0>is just discuss what I do upfront, which

00:07:14.795 --> 00:07:17.195
<v Speaker 0>is Yeah. Almost as little as possible.

00:07:17.515 --> 00:07:18.555
<v Speaker 0>I don't think it makes a lot of

00:07:18.555 --> 00:07:20.235
<v Speaker 0>sense for people to sit and watch me

00:07:20.235 --> 00:07:22.555
<v Speaker 0>spin up a Kubernetes cluster. So we do

00:07:22.555 --> 00:07:24.555
<v Speaker 0>have a Kubernetes cluster.

00:07:25.115 --> 00:07:28.110
<v Speaker 0>That's it. Good. It's

00:07:28.110 --> 00:07:29.630
<v Speaker 0>a sound like that here. Like, I'm gonna

00:07:29.630 --> 00:07:31.310
<v Speaker 0>run get pods and it's gonna see connection

00:07:31.310 --> 00:07:32.670
<v Speaker 0>not found or something. But we do have

00:07:32.670 --> 00:07:34.750
<v Speaker 0>a Kubernetes cluster. There's not a lot going

00:07:34.750 --> 00:07:36.670
<v Speaker 0>on in this cluster. In fact, it's pretty

00:07:36.670 --> 00:07:38.670
<v Speaker 0>much oh, there's a few things running on

00:07:38.670 --> 00:07:41.575
<v Speaker 0>it, but that's not important. There's networking and

00:07:41.575 --> 00:07:44.535
<v Speaker 0>there's some storage stuff, but no actual workloads

00:07:44.535 --> 00:07:45.415
<v Speaker 0>yet. Yep.

00:07:46.135 --> 00:07:46.855
<v Speaker 0>Right.

00:07:47.015 --> 00:07:47.815
<v Speaker 0>Nice.

00:07:47.975 --> 00:07:49.175
<v Speaker 0>So let's

00:07:49.975 --> 00:07:51.575
<v Speaker 0>take a look at this repository. Let me

00:07:51.575 --> 00:07:52.855
<v Speaker 0>try and zoom in on this a little

00:07:52.855 --> 00:07:54.535
<v Speaker 0>bit so it's still readable.

00:07:56.560 --> 00:07:59.280
<v Speaker 0>There's a dark mode now, isn't there? Yes.

00:07:59.280 --> 00:08:02.320
<v Speaker 1>There is under settings and Oh, right. Yeah.

00:08:02.480 --> 00:08:05.520
<v Speaker 1>It's it's it's pretty good. It's it's great.

00:08:05.520 --> 00:08:07.280
<v Speaker 0>I'll play with that later for next thing.

00:08:07.760 --> 00:08:08.720
<v Speaker 0>So

00:08:08.944 --> 00:08:10.145
<v Speaker 0>this repository

00:08:10.145 --> 00:08:10.865
<v Speaker 0>is

00:08:11.264 --> 00:08:13.505
<v Speaker 0>considerable by anyone. Right? Anyone can just come

00:08:13.505 --> 00:08:15.264
<v Speaker 0>to this repository. It looks like you've documented

00:08:15.264 --> 00:08:17.264
<v Speaker 0>it pretty well. And

00:08:17.505 --> 00:08:18.944
<v Speaker 0>one of the things that you said when

00:08:18.944 --> 00:08:21.505
<v Speaker 0>we're talking about preparation for this episode was

00:08:21.505 --> 00:08:22.865
<v Speaker 0>that I could have just used a kind

00:08:22.865 --> 00:08:23.425
<v Speaker 0>cluster.

00:08:23.930 --> 00:08:24.570
<v Speaker 1>Yep.

00:08:25.050 --> 00:08:26.810
<v Speaker 0>I mean, I have access to bare metal.

00:08:26.810 --> 00:08:29.370
<v Speaker 0>I decided we're not doing that. So Yeah.

00:08:30.409 --> 00:08:31.690
<v Speaker 0>And plus, I think

00:08:31.930 --> 00:08:34.570
<v Speaker 0>sorry, Nico. Yeah. The kind cluster might stress

00:08:34.570 --> 00:08:36.730
<v Speaker 1>your CPU and ram a bit with all

00:08:36.730 --> 00:08:39.485
<v Speaker 1>the workloads and scaling, but it it just

00:08:39.485 --> 00:08:41.245
<v Speaker 1>about worked on my last night. So

00:08:41.804 --> 00:08:43.885
<v Speaker 0>Yeah. No. I figured if if I threw

00:08:43.885 --> 00:08:45.245
<v Speaker 0>a bit more hardware at it, we can

00:08:45.245 --> 00:08:46.525
<v Speaker 0>maybe have a bit more fun with the

00:08:46.525 --> 00:08:48.045
<v Speaker 0>scaling rules and just see if we can,

00:08:48.045 --> 00:08:49.404
<v Speaker 0>like, you know, push it through a little

00:08:49.404 --> 00:08:51.565
<v Speaker 0>bit of a speed run maybe. So,

00:08:52.260 --> 00:08:53.780
<v Speaker 0>yeah, so feel free to check out this

00:08:53.780 --> 00:08:55.540
<v Speaker 0>repository and follow along on your own time.

00:08:55.540 --> 00:08:58.100
<v Speaker 0>Now I'm gonna assume, because I like to

00:08:58.100 --> 00:08:59.620
<v Speaker 0>make loads of assumptions, is that we should

00:08:59.620 --> 00:09:01.140
<v Speaker 0>start with the prerequisites.

00:09:02.340 --> 00:09:04.980
<v Speaker 1>Yeah. I mean, it should explain to you

00:09:04.980 --> 00:09:06.580
<v Speaker 1>what what we expect to have.

00:09:08.045 --> 00:09:09.885
<v Speaker 0>Alright. So Kubectl,

00:09:10.045 --> 00:09:12.525
<v Speaker 0>check. Working Kubernetes cluster,

00:09:13.405 --> 00:09:14.285
<v Speaker 0>hopefully.

00:09:15.005 --> 00:09:15.805
<v Speaker 0>Helm?

00:09:16.365 --> 00:09:18.845
<v Speaker 0>Yes. I'm positive I have Helm.

00:09:21.500 --> 00:09:24.620
<v Speaker 0>Very good. Okay. Cool. Version three. So

00:09:24.780 --> 00:09:25.580
<v Speaker 1>awesome.

00:09:25.820 --> 00:09:27.660
<v Speaker 0>And we don't need to create a kind

00:09:27.660 --> 00:09:30.620
<v Speaker 0>cluster. So prereqs checked off. Now you've broken

00:09:30.620 --> 00:09:33.180
<v Speaker 0>this down into four specific sections. We've got

00:09:33.340 --> 00:09:37.605
<v Speaker 0>Yeah. Resource metric scaling, custom metric scaling, external

00:09:37.605 --> 00:09:40.005
<v Speaker 0>metric scaling, and then the VPA.

00:09:40.405 --> 00:09:41.765
<v Speaker 0>Do you wanna give us a little bit

00:09:41.765 --> 00:09:43.605
<v Speaker 0>of flavor on one, two, and three there?

00:09:43.605 --> 00:09:45.205
<v Speaker 0>Why they're different and what they mean?

00:09:45.605 --> 00:09:47.260
<v Speaker 1>Yep. So

00:09:47.340 --> 00:09:48.460
<v Speaker 1>Kubernetes,

00:09:48.780 --> 00:09:50.780
<v Speaker 1>as with all of its functionality, sort of

00:09:50.780 --> 00:09:53.900
<v Speaker 1>started from the the basic, like,

00:09:54.380 --> 00:09:56.700
<v Speaker 1>the auto scaling people were most familiar with.

00:09:56.700 --> 00:09:59.500
<v Speaker 1>So that's, like, CPU or memory utilization.

00:10:00.485 --> 00:10:01.205
<v Speaker 1>So

00:10:01.365 --> 00:10:04.645
<v Speaker 1>allowing you to configure a a target

00:10:06.565 --> 00:10:08.645
<v Speaker 1>and say, I want this to

00:10:08.885 --> 00:10:10.325
<v Speaker 1>try and make I want to scale this

00:10:10.325 --> 00:10:13.285
<v Speaker 1>and try and maintain, like, 70% CPU utilization.

00:10:13.285 --> 00:10:15.290
<v Speaker 1>So some sort of sweet spot where you

00:10:15.290 --> 00:10:17.290
<v Speaker 1>think you can scale up as more users

00:10:17.290 --> 00:10:20.410
<v Speaker 1>start hitting your site, but also you can

00:10:20.410 --> 00:10:22.970
<v Speaker 1>scale down and still keep a fairly good

00:10:22.970 --> 00:10:25.610
<v Speaker 1>resource utilization so you're not burning money as

00:10:25.610 --> 00:10:26.890
<v Speaker 1>you mentioned at the start.

00:10:27.930 --> 00:10:28.410
<v Speaker 1>That

00:10:28.875 --> 00:10:29.835
<v Speaker 1>that is

00:10:30.395 --> 00:10:32.635
<v Speaker 1>a core API. And then over time, people

00:10:32.635 --> 00:10:34.635
<v Speaker 1>obviously realize, well, I've got I've got a

00:10:34.635 --> 00:10:36.395
<v Speaker 1>lot of workloads that actually that's that's not

00:10:36.395 --> 00:10:37.435
<v Speaker 1>the best metric.

00:10:37.995 --> 00:10:41.995
<v Speaker 1>The CPU and memory are, you know, either

00:10:41.160 --> 00:10:42.519
<v Speaker 1>fairly constant

00:10:42.680 --> 00:10:45.800
<v Speaker 1>or they're not coupled to

00:10:45.959 --> 00:10:47.800
<v Speaker 1>the metrics that I care about, whether that's

00:10:47.800 --> 00:10:50.360
<v Speaker 1>latency or if I know my workloads

00:10:51.079 --> 00:10:53.000
<v Speaker 1>my pods can serve a certain number of

00:10:53.000 --> 00:10:53.800
<v Speaker 1>requests

00:10:53.879 --> 00:10:54.519
<v Speaker 1>per second,

00:10:55.205 --> 00:10:56.965
<v Speaker 1>and then that's that's the metric that I

00:10:56.965 --> 00:10:58.005
<v Speaker 1>most care about.

00:10:59.125 --> 00:10:59.845
<v Speaker 1>So

00:11:00.885 --> 00:11:02.165
<v Speaker 1>over time, that cost

00:11:02.645 --> 00:11:05.685
<v Speaker 1>effectively, changes were made to the APIs

00:11:05.845 --> 00:11:06.565
<v Speaker 1>to

00:11:07.045 --> 00:11:09.045
<v Speaker 1>go through something called API aggregation.

00:11:09.900 --> 00:11:12.380
<v Speaker 1>The idea being that the API server can

00:11:12.380 --> 00:11:15.100
<v Speaker 1>then serve up a number can proxy a

00:11:15.100 --> 00:11:17.020
<v Speaker 1>number of different APIs,

00:11:17.740 --> 00:11:20.300
<v Speaker 1>and those API paths become metrics dot case

00:11:20.300 --> 00:11:22.060
<v Speaker 1>dot I o for resource metrics scaling, so

00:11:22.060 --> 00:11:24.775
<v Speaker 1>the original, and custom dot metrics dot case

00:11:24.775 --> 00:11:26.855
<v Speaker 1>dot I o for custom metrics,

00:11:27.015 --> 00:11:28.615
<v Speaker 1>we'll come back to sort of what the

00:11:28.615 --> 00:11:30.375
<v Speaker 1>definition of custom metrics is.

00:11:30.855 --> 00:11:31.255
<v Speaker 1>External

00:11:32.055 --> 00:11:33.575
<v Speaker 1>dot metrics dot case dot I o for

00:11:33.575 --> 00:11:35.975
<v Speaker 1>external metrics, and we'll we'll touch on that

00:11:36.055 --> 00:11:38.920
<v Speaker 1>a bit as well. But those those effectively

00:11:39.640 --> 00:11:40.760
<v Speaker 1>should cover

00:11:40.920 --> 00:11:43.480
<v Speaker 1>all use cases of a metric that you

00:11:43.480 --> 00:11:46.120
<v Speaker 1>want to scale a workload on horizontally.

00:11:46.760 --> 00:11:47.560
<v Speaker 1>Sweet.

00:11:47.640 --> 00:11:48.520
<v Speaker 0>Awesome.

00:11:49.240 --> 00:11:49.880
<v Speaker 0>So

00:11:50.925 --> 00:11:55.165
<v Speaker 0>let's start with the the resource metrics scaling.

00:11:55.245 --> 00:11:55.725
<v Speaker 0>So

00:11:58.445 --> 00:12:00.365
<v Speaker 0>first, make sure we can access the metrics

00:12:00.365 --> 00:12:01.245
<v Speaker 0>API.

00:12:01.805 --> 00:12:03.165
<v Speaker 0>I mean, can can that fail?

00:12:04.890 --> 00:12:08.010
<v Speaker 1>By default, some setups of Kubernetes will come

00:12:08.010 --> 00:12:10.730
<v Speaker 1>with nothing installed to serve the metrics API.

00:12:10.890 --> 00:12:11.450
<v Speaker 1>So

00:12:11.770 --> 00:12:14.090
<v Speaker 0>Yeah. We can find out how your how

00:12:14.090 --> 00:12:17.050
<v Speaker 1>your cluster is. Yeah. Metrics server is not

00:12:17.050 --> 00:12:20.135
<v Speaker 0>available on my cluster. So this should fail.

00:12:20.774 --> 00:12:23.894
<v Speaker 0>Yep. Apparently, that doesn't copy. So

00:12:25.095 --> 00:12:26.135
<v Speaker 0>Okay.

00:12:27.815 --> 00:12:28.455
<v Speaker 0>Cool.

00:12:28.935 --> 00:12:31.175
<v Speaker 0>So that's these commands here. Right? Yep.

00:12:31.800 --> 00:12:34.600
<v Speaker 0>Okay. So I mean So these these command

00:12:34.760 --> 00:12:37.080
<v Speaker 1>so the second command with the install installation

00:12:37.080 --> 00:12:38.280
<v Speaker 1>of the metric server,

00:12:38.520 --> 00:12:40.840
<v Speaker 1>and I'm I'm going to update this

00:12:41.160 --> 00:12:43.960
<v Speaker 1>later, is you might not need all of

00:12:43.960 --> 00:12:47.160
<v Speaker 1>those options. And those options are generally set

00:12:47.160 --> 00:12:49.855
<v Speaker 1>up for a kind cluster.

00:12:50.735 --> 00:12:52.095
<v Speaker 1>So you're you're using

00:12:52.255 --> 00:12:54.975
<v Speaker 1>Kube dot and secure and other bits

00:12:55.774 --> 00:12:57.375
<v Speaker 1>to to make it work with a kind

00:12:57.375 --> 00:12:59.695
<v Speaker 1>cluster that may not necessarily be

00:13:00.100 --> 00:13:01.940
<v Speaker 1>required for all installations.

00:13:02.180 --> 00:13:05.380
<v Speaker 0>So this is a cluster API cluster, which

00:13:05.380 --> 00:13:07.460
<v Speaker 0>is gonna have a self sane c a.

00:13:07.460 --> 00:13:09.060
<v Speaker 0>So I believe we will still need the

00:13:09.140 --> 00:13:09.540
<v Speaker 0>Okay.

00:13:10.660 --> 00:13:12.500
<v Speaker 0>Awesome. And although I don't like the name

00:13:12.500 --> 00:13:15.235
<v Speaker 0>in security or SSN. Yeah. It's incorrect. Because

00:13:15.235 --> 00:13:17.235
<v Speaker 0>I think it's those people a bit I

00:13:17.235 --> 00:13:18.595
<v Speaker 0>was gonna say really Scottish thing there. I

00:13:18.595 --> 00:13:19.955
<v Speaker 0>think that's because I've got your accent in

00:13:19.955 --> 00:13:22.595
<v Speaker 0>my ear, but ski west. Like, you know,

00:13:22.995 --> 00:13:24.675
<v Speaker 0>it's not insecure. We should we need to

00:13:24.675 --> 00:13:26.274
<v Speaker 0>change our vocabulary there, I think.

00:13:27.640 --> 00:13:28.600
<v Speaker 0>K. So

00:13:29.000 --> 00:13:32.200
<v Speaker 0>preferred address internal IP and secure recovered API

00:13:32.200 --> 00:13:34.120
<v Speaker 0>service dot create true.

00:13:34.120 --> 00:13:35.880
<v Speaker 0>Alright. I'm just gonna go

00:13:36.920 --> 00:13:38.600
<v Speaker 0>for it. What's the worst that can happen?

00:13:39.645 --> 00:13:41.885
<v Speaker 0>Let's deploy some metrics over to our cluster,

00:13:41.885 --> 00:13:44.925
<v Speaker 0>which starts collecting node based metrics.

00:13:45.085 --> 00:13:47.965
<v Speaker 1>Yeah. And that will now be available.

00:13:50.685 --> 00:13:52.285
<v Speaker 0>That just might be the pods not there

00:13:52.285 --> 00:13:54.270
<v Speaker 0>yet. Is that right? Yeah. Yeah. It takes

00:13:54.270 --> 00:13:55.870
<v Speaker 1>it takes about time for the pods to

00:13:55.870 --> 00:13:58.030
<v Speaker 1>come up and basically register itself with the

00:13:58.030 --> 00:14:00.270
<v Speaker 1>API server saying, I'm I'm here and I'm

00:14:00.270 --> 00:14:01.470
<v Speaker 1>serving this API.

00:14:02.030 --> 00:14:04.590
<v Speaker 0>I'm assuming that's gonna deploy to the Kube

00:14:04.590 --> 00:14:06.110
<v Speaker 0>system namespace.

00:14:06.110 --> 00:14:06.430
<v Speaker 0>No.

00:14:12.345 --> 00:14:15.305
<v Speaker 1>Maybe in default. By default, I'm not sure.

00:14:15.865 --> 00:14:17.465
<v Speaker 0>There we go. Alright.

00:14:18.425 --> 00:14:20.265
<v Speaker 0>I guess I I I should have maybe

00:14:20.425 --> 00:14:21.865
<v Speaker 0>oh, if I was doing this in production,

00:14:21.865 --> 00:14:23.305
<v Speaker 0>I would have tweaked that helm command. So

00:14:23.465 --> 00:14:23.785
<v Speaker 1>Yeah.

00:14:24.980 --> 00:14:27.380
<v Speaker 0>No metrics available yet. Now this I'm gonna

00:14:27.380 --> 00:14:29.220
<v Speaker 0>make some more assumptions as that this is

00:14:29.220 --> 00:14:31.220
<v Speaker 0>gonna have some sort of previous ten seconds

00:14:31.220 --> 00:14:32.580
<v Speaker 0>script interval

00:14:32.899 --> 00:14:34.580
<v Speaker 0>thing. Is that maybe right?

00:14:35.060 --> 00:14:36.820
<v Speaker 1>Yes. It does. Okay.

00:14:38.825 --> 00:14:40.825
<v Speaker 1>I can't remember exactly what the default script

00:14:40.825 --> 00:14:41.705
<v Speaker 1>duration is.

00:14:42.105 --> 00:14:44.985
<v Speaker 1>But yeah. It so as you've said, basically,

00:14:44.985 --> 00:14:47.065
<v Speaker 1>the metric server is responsible for,

00:14:47.705 --> 00:14:50.505
<v Speaker 1>these days, going out and scraping the metrics

00:14:50.505 --> 00:14:52.665
<v Speaker 1>endpoints of cubelets. That's why we had to

00:14:52.665 --> 00:14:55.520
<v Speaker 1>pass in a cubelet and secure TLS wagon

00:14:56.320 --> 00:14:58.400
<v Speaker 1>to get it working with self signed certs.

00:14:59.760 --> 00:15:02.480
<v Speaker 1>And that's then responsible for serving up those

00:15:02.480 --> 00:15:03.200
<v Speaker 1>metrics

00:15:03.440 --> 00:15:06.400
<v Speaker 1>through the API path of metrics.caseio.

00:15:06.654 --> 00:15:09.214
<v Speaker 1>And as well as node metrics is also

00:15:09.214 --> 00:15:11.855
<v Speaker 1>the one that's responsible for getting plot metrics

00:15:11.855 --> 00:15:13.855
<v Speaker 1>through those those same APIs.

00:15:14.415 --> 00:15:17.055
<v Speaker 0>Sweet. Well, we now have our top command

00:15:17.055 --> 00:15:17.775
<v Speaker 0>working.

00:15:18.095 --> 00:15:18.495
<v Speaker 1>Awesome.

00:15:21.090 --> 00:15:24.210
<v Speaker 0>So we've got loads of course,

00:15:24.450 --> 00:15:26.770
<v Speaker 0>loads of memory. In fact, we're barely tickling

00:15:26.770 --> 00:15:28.130
<v Speaker 0>this cluster. Yes.

00:15:28.290 --> 00:15:29.810
<v Speaker 0>We can have a better fun with this

00:15:29.810 --> 00:15:31.170
<v Speaker 0>for sure. Alright.

00:15:31.330 --> 00:15:31.810
<v Speaker 0>Very good.

00:15:32.675 --> 00:15:34.834
<v Speaker 0>And that takes the namespace flag. Let's just

00:15:34.834 --> 00:15:35.555
<v Speaker 0>see what's gonna why

00:15:37.795 --> 00:15:39.235
<v Speaker 0>is copy paste

00:15:40.274 --> 00:15:43.394
<v Speaker 0>weird? There we go. Okay. Yeah. So as

00:15:43.394 --> 00:15:45.074
<v Speaker 1>you can see, you're you can now correctly

00:15:45.074 --> 00:15:47.570
<v Speaker 1>get through the API, like, the CPU memory

00:15:47.570 --> 00:15:49.649
<v Speaker 1>usage of different pods.

00:15:50.850 --> 00:15:52.449
<v Speaker 0>Alright. So I mean, I don't mean to

00:15:52.449 --> 00:15:54.050
<v Speaker 0>put you on the spot here and test

00:15:54.050 --> 00:15:55.329
<v Speaker 0>your knowledge, but

00:15:56.449 --> 00:15:58.769
<v Speaker 0>this this metric server, I mean, this used

00:15:58.769 --> 00:16:00.625
<v Speaker 0>to be built and was this previously the

00:16:00.625 --> 00:16:02.625
<v Speaker 0>c adviser stuff that was deprecated and metric

00:16:02.625 --> 00:16:05.345
<v Speaker 0>server server replacement for that? So they they

00:16:05.745 --> 00:16:06.945
<v Speaker 1>the component

00:16:06.945 --> 00:16:07.585
<v Speaker 1>that

00:16:08.785 --> 00:16:11.185
<v Speaker 1>the metric server is a replacement for was

00:16:11.185 --> 00:16:12.625
<v Speaker 1>something called Heapster. And,

00:16:13.389 --> 00:16:15.870
<v Speaker 1>Yep. That was built in and, effectively, had,

00:16:15.870 --> 00:16:18.430
<v Speaker 1>like, pluggable back ends so you could I

00:16:18.430 --> 00:16:19.630
<v Speaker 1>I think the default

00:16:20.029 --> 00:16:22.589
<v Speaker 1>installation option was using mPlugDB as a back

00:16:22.589 --> 00:16:23.149
<v Speaker 1>end.

00:16:24.110 --> 00:16:27.709
<v Speaker 1>That had some slight problems and shortcomings with

00:16:27.709 --> 00:16:28.510
<v Speaker 1>it

00:16:28.935 --> 00:16:30.375
<v Speaker 1>in terms of

00:16:31.015 --> 00:16:33.654
<v Speaker 1>it if it if certainly

00:16:33.654 --> 00:16:36.055
<v Speaker 1>an influx, we experienced a situation where we

00:16:36.055 --> 00:16:37.975
<v Speaker 1>managed to fill the influx back end because

00:16:37.975 --> 00:16:39.895
<v Speaker 1>we've scaled up our clusters without scaling up

00:16:39.895 --> 00:16:40.695
<v Speaker 1>the influx.

00:16:41.735 --> 00:16:44.139
<v Speaker 1>It tried, and one of the problems it

00:16:44.139 --> 00:16:47.100
<v Speaker 1>had was when you push data into whenever

00:16:47.100 --> 00:16:49.980
<v Speaker 1>you created it, it it first pushed data

00:16:49.980 --> 00:16:51.980
<v Speaker 1>into the back end before creating it back.

00:16:51.980 --> 00:16:53.579
<v Speaker 1>So it didn't have a hold a local

00:16:53.579 --> 00:16:54.300
<v Speaker 1>state at all.

00:16:55.115 --> 00:16:57.515
<v Speaker 1>So when you created it, if it dropped

00:16:57.515 --> 00:16:59.435
<v Speaker 1>your data, it just went, I don't know,

00:17:00.714 --> 00:17:02.955
<v Speaker 1>which wasn't wasn't the most fun. So, yeah,

00:17:02.955 --> 00:17:06.075
<v Speaker 1>metric server is effectively, like, built from the

00:17:06.075 --> 00:17:08.234
<v Speaker 1>ground up for this this very purpose.

00:17:10.019 --> 00:17:11.059
<v Speaker 0>Okay. Cool.

00:17:12.019 --> 00:17:13.700
<v Speaker 0>I just feel like this command will work

00:17:13.700 --> 00:17:16.179
<v Speaker 0>because I haven't closed your repository. Oh, yeah.

00:17:16.179 --> 00:17:19.779
<v Speaker 1>Let's

00:17:20.659 --> 00:17:22.740
<v Speaker 1>let's copy that. Go back.

00:17:24.925 --> 00:17:25.964
<v Speaker 0>It's running.

00:17:26.445 --> 00:17:27.964
<v Speaker 0>I don't know why my

00:17:33.965 --> 00:17:36.685
<v Speaker 0>I mean I I was expecting something to

00:17:36.685 --> 00:17:39.325
<v Speaker 1>go wrong today, but it wasn't copy and

00:17:39.325 --> 00:17:41.300
<v Speaker 1>paste. It's always copy. I I don't know

00:17:41.300 --> 00:17:42.580
<v Speaker 0>what it is. I just I don't know

00:17:42.580 --> 00:17:44.820
<v Speaker 0>how to Mac. Like, I I'm a Linux

00:17:44.820 --> 00:17:47.220
<v Speaker 0>user. I'm trying to adapt. It's not going

00:17:47.220 --> 00:17:48.179
<v Speaker 0>well ever.

00:17:48.420 --> 00:17:50.660
<v Speaker 0>I don't understand why copy and paste is

00:17:50.660 --> 00:17:52.740
<v Speaker 0>so difficult. I'm sure it's trivial, and I'm

00:17:52.740 --> 00:17:55.540
<v Speaker 0>pressing controls at a command or something. It's

00:17:57.575 --> 00:18:00.934
<v Speaker 0>perfect. Yeah. Alright. So we're gonna deploy stress

00:18:00.934 --> 00:18:01.894
<v Speaker 0>deploy.

00:18:02.455 --> 00:18:04.294
<v Speaker 0>Yeah. And then before I apply it, you

00:18:04.294 --> 00:18:05.575
<v Speaker 0>know, I wanna make sure you're not gonna

00:18:05.575 --> 00:18:07.335
<v Speaker 0>run a crypto minor on this. So Yep.

00:18:08.930 --> 00:18:11.890
<v Speaker 0>This is gonna run program stress.

00:18:11.890 --> 00:18:14.049
<v Speaker 0>So we're just gonna be artificially

00:18:14.450 --> 00:18:16.290
<v Speaker 0>hammered in the CPU, I guess, a little

00:18:16.290 --> 00:18:17.330
<v Speaker 0>bit. Yep.

00:18:18.530 --> 00:18:20.289
<v Speaker 0>Memory stress as well.

00:18:20.530 --> 00:18:21.090
<v Speaker 0>Alright.

00:18:23.065 --> 00:18:24.265
<v Speaker 0>I'll trust you.

00:18:28.345 --> 00:18:29.065
<v Speaker 0>One.

00:18:31.065 --> 00:18:31.545
<v Speaker 0>One.

00:18:31.945 --> 00:18:33.945
<v Speaker 1>Yeah. Stress. Good boy.

00:18:36.690 --> 00:18:38.130
<v Speaker 0>And a watch on that. So it's gonna

00:18:38.130 --> 00:18:39.730
<v Speaker 0>be pulling down the images and it's just

00:18:39.730 --> 00:18:42.130
<v Speaker 0>gonna create some artificial loads. Let's see why

00:18:42.130 --> 00:18:43.889
<v Speaker 0>we're doing this. What does it say?

00:18:45.410 --> 00:18:47.090
<v Speaker 0>So you want me to run top pods.

00:18:47.090 --> 00:18:48.610
<v Speaker 0>We should see them claiming

00:18:49.515 --> 00:18:51.275
<v Speaker 0>and then we're going over. Actually, applying our

00:18:51.275 --> 00:18:52.795
<v Speaker 0>first HP as well. Shall we take a

00:18:52.795 --> 00:18:54.554
<v Speaker 0>look at that? Oh. Yep.

00:18:55.035 --> 00:18:55.835
<v Speaker 1>Oh.

00:18:56.875 --> 00:18:58.955
<v Speaker 1>There we go. Boom killed.

00:18:59.995 --> 00:19:01.195
<v Speaker 0>Is that supposed to happen?

00:19:02.180 --> 00:19:02.820
<v Speaker 1>No.

00:19:03.460 --> 00:19:06.100
<v Speaker 1>And that may well be because the impeller

00:19:06.100 --> 00:19:07.940
<v Speaker 1>seems to be a lot kinder on kind

00:19:07.940 --> 00:19:09.299
<v Speaker 1>than it is on

00:19:10.340 --> 00:19:11.460
<v Speaker 1>actual clusters.

00:19:13.540 --> 00:19:14.500
<v Speaker 1>So

00:19:14.500 --> 00:19:17.304
<v Speaker 1>we can we can work around it for

00:19:17.304 --> 00:19:17.945
<v Speaker 1>now

00:19:18.825 --> 00:19:19.784
<v Speaker 1>by

00:19:20.664 --> 00:19:23.304
<v Speaker 1>either we can raise the memory limit or

00:19:23.304 --> 00:19:25.544
<v Speaker 1>we can remove the memory limit. I believe

00:19:25.544 --> 00:19:27.065
<v Speaker 1>it up to your discretion.

00:19:27.705 --> 00:19:28.825
<v Speaker 0>Okay. So

00:19:29.380 --> 00:19:31.380
<v Speaker 0>I guess, I don't think I on any

00:19:31.380 --> 00:19:33.539
<v Speaker 0>of these episodes, I've ever really spoken about

00:19:33.539 --> 00:19:35.460
<v Speaker 0>these resource request limits.

00:19:35.700 --> 00:19:37.139
<v Speaker 0>Yeah. Why don't we

00:19:37.539 --> 00:19:39.860
<v Speaker 0>collectively put our knowledge together and just talk

00:19:39.860 --> 00:19:42.195
<v Speaker 0>about what this is? So Yeah. The resource

00:19:42.195 --> 00:19:44.275
<v Speaker 0>request and limits is a way for us

00:19:44.275 --> 00:19:45.234
<v Speaker 0>to tell

00:19:46.195 --> 00:19:48.115
<v Speaker 0>is it the kubelet that is responsible for

00:19:48.115 --> 00:19:49.315
<v Speaker 0>the enforcement of this?

00:19:51.075 --> 00:19:52.595
<v Speaker 1>Yes. So the kubelet

00:19:53.955 --> 00:19:55.715
<v Speaker 1>the kubelet, I think, is

00:19:56.680 --> 00:19:59.560
<v Speaker 1>maybe slightly off here. It pass passing it

00:19:59.560 --> 00:20:02.440
<v Speaker 1>down to the container run time, which actually

00:20:02.840 --> 00:20:04.760
<v Speaker 1>does some enforcement.

00:20:05.400 --> 00:20:07.960
<v Speaker 1>But there's also component of, like, a better

00:20:07.960 --> 00:20:09.560
<v Speaker 1>bit that's left to the kubelet. So in

00:20:09.560 --> 00:20:13.285
<v Speaker 1>terms of ranking the order and which to

00:20:13.285 --> 00:20:16.325
<v Speaker 1>kill pods if resource contention actually happens.

00:20:17.045 --> 00:20:20.485
<v Speaker 0>Okay. So we're suggesting here by setting these

00:20:20.485 --> 00:20:22.405
<v Speaker 0>resources, and we'll talk about requesting limits in

00:20:22.405 --> 00:20:24.190
<v Speaker 0>a second. Yeah. So the cubelet may do

00:20:24.190 --> 00:20:25.950
<v Speaker 0>something, but it also may just create the

00:20:25.950 --> 00:20:28.349
<v Speaker 0>c groups with the CRI implementation.

00:20:28.350 --> 00:20:29.629
<v Speaker 0>Okay. Now

00:20:31.389 --> 00:20:33.789
<v Speaker 0>what is 50 m in CPU?

00:20:33.870 --> 00:20:35.309
<v Speaker 0>I've been asked this question before and I've

00:20:35.309 --> 00:20:36.349
<v Speaker 0>never had a good answer.

00:20:36.909 --> 00:20:39.914
<v Speaker 1>It is 50 millicores,

00:20:40.955 --> 00:20:41.595
<v Speaker 1>which

00:20:41.835 --> 00:20:43.595
<v Speaker 1>there is an internal

00:20:45.435 --> 00:20:46.794
<v Speaker 1>piece called the

00:20:47.355 --> 00:20:50.235
<v Speaker 1>CFS or completely fair scheduler.

00:20:51.460 --> 00:20:53.779
<v Speaker 1>There is a long back story to

00:20:54.980 --> 00:20:57.940
<v Speaker 1>some previous issues with the the kernels maths

00:20:57.940 --> 00:21:00.500
<v Speaker 1>and how it does. Does it effectively, what

00:21:00.500 --> 00:21:03.304
<v Speaker 1>Kubernetes does is by default it has I

00:21:03.304 --> 00:21:05.705
<v Speaker 1>think it's a hundred millisecond time slices.

00:21:06.745 --> 00:21:07.144
<v Speaker 1>These

00:21:08.745 --> 00:21:12.424
<v Speaker 1>these millicores are effectively translated into how much

00:21:12.745 --> 00:21:14.985
<v Speaker 1>CPU time in a given bucket

00:21:15.540 --> 00:21:19.460
<v Speaker 1>can a pod use of a CPU.

00:21:20.100 --> 00:21:21.220
<v Speaker 1>So effectively,

00:21:21.940 --> 00:21:24.020
<v Speaker 1>if it was if I was giving it

00:21:24.020 --> 00:21:27.059
<v Speaker 1>one full core, aka 1,000 millicores,

00:21:27.380 --> 00:21:29.780
<v Speaker 1>I would be saying it can use one

00:21:30.565 --> 00:21:33.845
<v Speaker 1>one second sorry, one hundred millisecond the full

00:21:33.845 --> 00:21:36.405
<v Speaker 1>one hundred milliseconds of that bucket for a

00:21:36.405 --> 00:21:39.445
<v Speaker 1>given CPU core. This is slightly complicated, obviously,

00:21:39.445 --> 00:21:41.845
<v Speaker 1>given that in this case, we're definitely running

00:21:41.845 --> 00:21:43.365
<v Speaker 1>on a big multi core machine.

00:21:44.600 --> 00:21:46.760
<v Speaker 1>So the CFS then comes in and basically

00:21:46.760 --> 00:21:49.799
<v Speaker 1>does throttling where if a container

00:21:50.120 --> 00:21:53.160
<v Speaker 1>uses more CPU in a given slice than

00:21:53.160 --> 00:21:55.080
<v Speaker 1>it should do, it will get throttled for

00:21:55.080 --> 00:21:58.120
<v Speaker 1>the next few buckets of time to average

00:21:58.120 --> 00:21:58.680
<v Speaker 1>out

00:21:59.134 --> 00:22:01.615
<v Speaker 1>so that a single container given a resource

00:22:01.934 --> 00:22:05.215
<v Speaker 1>given a CPU request limit can't request limit

00:22:05.215 --> 00:22:08.014
<v Speaker 1>can't basically use more CPU than it should

00:22:08.014 --> 00:22:08.734
<v Speaker 1>be using.

00:22:09.134 --> 00:22:11.455
<v Speaker 0>Oh, sweet. That's a really good explanation. I

00:22:11.455 --> 00:22:14.070
<v Speaker 0>think even I understood that and I'm not

00:22:14.070 --> 00:22:15.190
<v Speaker 0>the smartest. Okay.

00:22:15.750 --> 00:22:17.669
<v Speaker 0>Now this is an on kill. So I'm

00:22:17.669 --> 00:22:19.590
<v Speaker 0>gonna assume that this has nothing to do

00:22:19.590 --> 00:22:20.789
<v Speaker 0>with our CPU

00:22:20.870 --> 00:22:22.629
<v Speaker 0>limits and it's our memory

00:22:23.030 --> 00:22:23.989
<v Speaker 0>limits.

00:22:24.470 --> 00:22:25.190
<v Speaker 1>Yep.

00:22:25.429 --> 00:22:27.910
<v Speaker 0>We'll bump that up. Now do you wanna

00:22:28.915 --> 00:22:30.675
<v Speaker 0>what's the difference between a limit and a

00:22:30.675 --> 00:22:31.394
<v Speaker 0>request?

00:22:33.715 --> 00:22:36.355
<v Speaker 1>So in CPU terms,

00:22:37.155 --> 00:22:40.434
<v Speaker 1>effectively, you're saying for for a CPU

00:22:41.155 --> 00:22:42.755
<v Speaker 1>request, you're

00:22:42.730 --> 00:22:45.609
<v Speaker 1>guaranteeing that on average this pod can use

00:22:46.169 --> 00:22:48.409
<v Speaker 1>the equivalent of, in this case,

00:22:49.529 --> 00:22:50.809
<v Speaker 1>50 millicores,

00:22:51.450 --> 00:22:53.129
<v Speaker 1>so one twentieth,

00:22:53.370 --> 00:22:56.409
<v Speaker 1>is my math right, of a CPU on

00:22:56.409 --> 00:22:59.005
<v Speaker 1>average over time. In

00:22:59.725 --> 00:23:00.765
<v Speaker 1>memory,

00:23:00.845 --> 00:23:01.405
<v Speaker 1>you're base

00:23:01.965 --> 00:23:04.845
<v Speaker 1>I'm sorry. The limit you're saying,

00:23:05.165 --> 00:23:05.965
<v Speaker 1>however,

00:23:06.045 --> 00:23:07.085
<v Speaker 1>if there's

00:23:08.685 --> 00:23:10.605
<v Speaker 1>spare capacity in the CPU,

00:23:10.765 --> 00:23:12.045
<v Speaker 1>you can use up to,

00:23:12.700 --> 00:23:15.100
<v Speaker 1>in this case, the equivalent of 75 millicores

00:23:15.100 --> 00:23:17.580
<v Speaker 1>of CPU. So if there's contention, if there's

00:23:17.660 --> 00:23:19.980
<v Speaker 1>if the pods real sorry. If the node

00:23:19.980 --> 00:23:22.220
<v Speaker 1>is really highly utilized, so you've got a

00:23:22.220 --> 00:23:25.195
<v Speaker 1>lot of CPU intensive workloads on and all

00:23:25.195 --> 00:23:27.035
<v Speaker 1>of them have far higher limits than the

00:23:27.035 --> 00:23:28.795
<v Speaker 1>requests. They won't all be able to get

00:23:28.795 --> 00:23:30.555
<v Speaker 1>up to their limits,

00:23:30.715 --> 00:23:32.955
<v Speaker 1>but they'll still always get their requests. And

00:23:32.955 --> 00:23:35.275
<v Speaker 1>it's the request that's used for scheduling the

00:23:35.275 --> 00:23:36.315
<v Speaker 1>pods onto the node.

00:23:40.290 --> 00:23:42.210
<v Speaker 0>This is still being on killed.

00:23:43.410 --> 00:23:44.290
<v Speaker 1>The

00:23:45.810 --> 00:23:47.570
<v Speaker 1>other alternative

00:23:47.730 --> 00:23:50.770
<v Speaker 1>because in this in the example HPA, we're

00:23:50.770 --> 00:23:53.095
<v Speaker 1>only scaling on CPU,

00:23:53.095 --> 00:23:53.974
<v Speaker 1>not memory.

00:23:54.534 --> 00:23:57.575
<v Speaker 1>The other alternative you can give you have

00:23:57.575 --> 00:23:59.894
<v Speaker 1>is not giving it resource

00:24:00.135 --> 00:24:02.934
<v Speaker 1>request and limits. This is generally a bad

00:24:02.934 --> 00:24:03.575
<v Speaker 1>idea

00:24:03.735 --> 00:24:04.455
<v Speaker 1>because

00:24:06.030 --> 00:24:07.630
<v Speaker 1>it means that

00:24:08.030 --> 00:24:10.990
<v Speaker 1>sched a, the scheduler doesn't really have much

00:24:10.990 --> 00:24:12.270
<v Speaker 1>information about how

00:24:12.430 --> 00:24:15.630
<v Speaker 1>much resource a given polygism is

00:24:16.590 --> 00:24:17.870
<v Speaker 1>likely to use

00:24:20.125 --> 00:24:22.045
<v Speaker 1>and that will result in

00:24:22.445 --> 00:24:25.645
<v Speaker 1>can result in problems because you get contention.

00:24:26.365 --> 00:24:28.445
<v Speaker 0>Okay. Well, they're

00:24:28.445 --> 00:24:28.925
<v Speaker 0>happy now.

00:24:32.630 --> 00:24:35.830
<v Speaker 0>Why is that not showing me the CPU

00:24:35.830 --> 00:24:37.029
<v Speaker 0>memory one?

00:24:37.190 --> 00:24:39.830
<v Speaker 1>So it's it's the same thing we we

00:24:39.830 --> 00:24:43.270
<v Speaker 1>came came to with first call in that.

00:24:43.270 --> 00:24:44.789
<v Speaker 1>It takes a while to for it to

00:24:44.789 --> 00:24:48.414
<v Speaker 1>first scrape the Kiplet and discover those the

00:24:48.655 --> 00:24:50.735
<v Speaker 1>the metrics for those pods that have been

00:24:50.735 --> 00:24:51.695
<v Speaker 1>newly created.

00:24:51.934 --> 00:24:54.095
<v Speaker 0>Okay. So we'll get that thirty seconds to

00:24:54.095 --> 00:24:56.335
<v Speaker 0>catch up. What we'll do now is

00:24:57.375 --> 00:24:58.174
<v Speaker 0>firstly,

00:24:58.255 --> 00:25:00.255
<v Speaker 0>because I forgot at the start, if anyone

00:25:00.255 --> 00:25:01.855
<v Speaker 0>wants to try Equinix Medal,

00:25:03.269 --> 00:25:05.269
<v Speaker 0>then you can use the code Rawkode dash

00:25:05.269 --> 00:25:07.349
<v Speaker 0>live at metal.equinix.com.

00:25:07.590 --> 00:25:09.350
<v Speaker 0>50 dollars of credit is roughly around a

00:25:09.350 --> 00:25:11.749
<v Speaker 0>hundred hours of compute on a smaller instance.

00:25:11.909 --> 00:25:13.510
<v Speaker 0>But using the small instance is not very

00:25:13.510 --> 00:25:15.110
<v Speaker 0>much fun. So, you know, spend it quicker

00:25:15.110 --> 00:25:15.590
<v Speaker 0>and have

00:25:16.184 --> 00:25:18.664
<v Speaker 0>and and enjoy it. Now we also have

00:25:18.664 --> 00:25:19.705
<v Speaker 0>a comment.

00:25:19.945 --> 00:25:20.504
<v Speaker 0>So

00:25:20.904 --> 00:25:23.385
<v Speaker 0>some path has asked, does the memory or

00:25:23.385 --> 00:25:25.544
<v Speaker 0>can the memory go beyond the limit when

00:25:25.544 --> 00:25:26.745
<v Speaker 0>we're running the stress command?

00:25:29.080 --> 00:25:30.840
<v Speaker 0>And I think the answer is no. We

00:25:30.840 --> 00:25:32.200
<v Speaker 0>just get when it

00:25:33.080 --> 00:25:34.440
<v Speaker 0>so when it has the memory limit, the

00:25:34.440 --> 00:25:36.440
<v Speaker 0>arm killer is just gonna say, hey, you've

00:25:36.440 --> 00:25:38.920
<v Speaker 0>had enough. You're you're barred and kicks out.

00:25:38.920 --> 00:25:39.400
<v Speaker 0>Right?

00:25:39.960 --> 00:25:40.600
<v Speaker 1>Yes.

00:25:42.515 --> 00:25:44.755
<v Speaker 0>So, yeah, you cannot go beyond the memory

00:25:44.755 --> 00:25:47.155
<v Speaker 0>limit. And I think based on what guys

00:25:47.155 --> 00:25:48.675
<v Speaker 0>said a couple of minutes ago as well

00:25:48.675 --> 00:25:49.635
<v Speaker 0>is that you can't

00:25:50.115 --> 00:25:52.275
<v Speaker 0>you can go past this CPU limit, but

00:25:52.275 --> 00:25:54.355
<v Speaker 0>you'll be throttled on subsequent request to bring

00:25:54.355 --> 00:25:55.635
<v Speaker 0>it back under the limit.

00:25:56.220 --> 00:25:58.860
<v Speaker 1>Yeah. And and so this this becomes a

00:25:58.860 --> 00:25:59.899
<v Speaker 1>problem for, like,

00:26:00.460 --> 00:26:03.660
<v Speaker 1>really latency sensitive workloads where if if you're

00:26:03.660 --> 00:26:05.900
<v Speaker 1>getting loads of requests fired and respond really

00:26:05.900 --> 00:26:06.460
<v Speaker 1>fast,

00:26:06.780 --> 00:26:09.179
<v Speaker 1>hit your limit, what if, like, use up

00:26:09.505 --> 00:26:11.744
<v Speaker 1>more than your limit within a time window.

00:26:11.745 --> 00:26:13.745
<v Speaker 1>And then in the next few windows, you're

00:26:13.745 --> 00:26:15.664
<v Speaker 1>you're effectively throttled.

00:26:15.825 --> 00:26:18.225
<v Speaker 1>That can cause your latency to spike because

00:26:18.225 --> 00:26:19.104
<v Speaker 1>your your

00:26:19.424 --> 00:26:21.505
<v Speaker 1>workload's getting throttled, so it's not able to

00:26:21.505 --> 00:26:22.465
<v Speaker 1>respond

00:26:22.705 --> 00:26:24.625
<v Speaker 1>or do the CPU cycles. It needs to

00:26:24.625 --> 00:26:26.039
<v Speaker 1>respond. So you can

00:26:26.600 --> 00:26:29.000
<v Speaker 1>you you should be you're able to, like,

00:26:29.000 --> 00:26:31.639
<v Speaker 1>lower the window slice to try and combat

00:26:31.639 --> 00:26:32.279
<v Speaker 1>that.

00:26:33.080 --> 00:26:34.599
<v Speaker 1>You can remove

00:26:35.720 --> 00:26:36.600
<v Speaker 1>throttling

00:26:36.600 --> 00:26:37.479
<v Speaker 1>completely,

00:26:37.880 --> 00:26:39.240
<v Speaker 1>like, the CFS.

00:26:39.915 --> 00:26:40.715
<v Speaker 1>Some

00:26:40.715 --> 00:26:42.715
<v Speaker 1>some users recommend that.

00:26:43.595 --> 00:26:46.235
<v Speaker 1>Generally, it doesn't seem to be recommended for

00:26:46.315 --> 00:26:47.595
<v Speaker 1>multi tenant

00:26:48.315 --> 00:26:49.275
<v Speaker 1>environments.

00:26:49.355 --> 00:26:51.195
<v Speaker 1>So keep that in mind.

00:26:51.835 --> 00:26:52.715
<v Speaker 0>Alright. Sweet.

00:26:53.350 --> 00:26:55.350
<v Speaker 0>So as we can see here, we actually

00:26:55.350 --> 00:26:57.190
<v Speaker 0>needed just under 250

00:26:57.190 --> 00:26:59.830
<v Speaker 0>mega RAM for the CPU stress. We needed

00:26:59.830 --> 00:27:01.590
<v Speaker 0>almost a gig for the memory stress, but

00:27:01.590 --> 00:27:02.709
<v Speaker 0>they both are happy

00:27:03.190 --> 00:27:05.029
<v Speaker 0>now. So that's So it's

00:27:05.575 --> 00:27:08.775
<v Speaker 1>stressing it's stressing the resources as expected.

00:27:09.655 --> 00:27:12.375
<v Speaker 0>Yeah. Yeah. I'm happy with that. Okay. So

00:27:13.015 --> 00:27:14.535
<v Speaker 0>what we want to do now

00:27:15.415 --> 00:27:17.015
<v Speaker 0>okay. So, yeah, we can see they're hitting

00:27:17.015 --> 00:27:17.895
<v Speaker 0>the resource limits.

00:27:19.960 --> 00:27:22.600
<v Speaker 0>Now we want to apply a horizontal pod

00:27:22.600 --> 00:27:24.520
<v Speaker 0>auto scaler or an HPA

00:27:25.880 --> 00:27:26.760
<v Speaker 0>to

00:27:27.160 --> 00:27:30.200
<v Speaker 0>make that better. So Yep. Let's have a

00:27:30.200 --> 00:27:32.360
<v Speaker 0>look. So that's horizontal pod auto scaler, like,

00:27:32.360 --> 00:27:34.505
<v Speaker 0>you know, Will. We'll we'll go version and

00:27:34.505 --> 00:27:36.504
<v Speaker 0>a kind of metadata that we expect.

00:27:36.825 --> 00:27:38.585
<v Speaker 0>Let's just kinda run through the the specs

00:27:38.585 --> 00:27:39.785
<v Speaker 0>side of this and try and try and

00:27:39.785 --> 00:27:42.825
<v Speaker 0>understand what's going on. So we'll

00:27:42.825 --> 00:27:45.385
<v Speaker 0>come back to scale target ref. I'm assuming

00:27:45.385 --> 00:27:47.705
<v Speaker 0>that's just like a label matcher on what

00:27:48.360 --> 00:27:50.279
<v Speaker 0>we've got. I guess we're covering it now.

00:27:50.840 --> 00:27:52.280
<v Speaker 0>This is gonna say, hey. What is it

00:27:52.280 --> 00:27:54.120
<v Speaker 0>we are trying to scale? Is that right?

00:27:54.120 --> 00:27:56.200
<v Speaker 1>Yeah. Yeah. So API

00:27:56.200 --> 00:27:57.080
<v Speaker 1>version,

00:27:57.080 --> 00:28:00.360
<v Speaker 1>so and kind effectively, we're saying it's a

00:28:00.360 --> 00:28:02.920
<v Speaker 1>deployment in the apps v one

00:28:03.605 --> 00:28:05.605
<v Speaker 1>spec that we've got to scale.

00:28:05.925 --> 00:28:07.045
<v Speaker 1>So there's

00:28:07.045 --> 00:28:08.165
<v Speaker 1>a number of different

00:28:08.885 --> 00:28:09.765
<v Speaker 1>resources

00:28:10.085 --> 00:28:10.965
<v Speaker 1>within

00:28:11.125 --> 00:28:13.445
<v Speaker 1>Kubernetes that all implement this

00:28:14.245 --> 00:28:15.365
<v Speaker 1>behavior called scale,

00:28:16.360 --> 00:28:18.440
<v Speaker 1>And that that effectively is what this gets

00:28:18.440 --> 00:28:19.879
<v Speaker 1>mapped to behind the scenes.

00:28:20.440 --> 00:28:21.320
<v Speaker 0>Sweet.

00:28:21.799 --> 00:28:24.440
<v Speaker 0>We then set the minimum and maximum replicas

00:28:24.440 --> 00:28:26.360
<v Speaker 0>that we want to accept for this. And

00:28:26.360 --> 00:28:29.000
<v Speaker 0>then we define the metrics that we want

00:28:29.000 --> 00:28:29.400
<v Speaker 0>to use

00:28:30.205 --> 00:28:31.805
<v Speaker 0>as a benchmark for scaling.

00:28:32.045 --> 00:28:33.725
<v Speaker 0>Yep. So if I can read this one

00:28:33.725 --> 00:28:35.565
<v Speaker 0>correctly, then what we're saying is

00:28:36.765 --> 00:28:38.125
<v Speaker 0>if the CPU

00:28:38.205 --> 00:28:40.685
<v Speaker 0>of this pod is at 70%

00:28:40.685 --> 00:28:42.045
<v Speaker 0>of its CPU

00:28:42.045 --> 00:28:42.605
<v Speaker 0>limit,

00:28:43.190 --> 00:28:45.590
<v Speaker 0>then it's gonna add on more replicas.

00:28:47.590 --> 00:28:50.710
<v Speaker 1>Not quite. So there's there is there

00:28:50.790 --> 00:28:54.070
<v Speaker 1>is an an algorithm effectively that the HP

00:28:54.070 --> 00:28:54.950
<v Speaker 1>uses.

00:28:54.950 --> 00:28:55.750
<v Speaker 1>So

00:28:56.035 --> 00:28:58.915
<v Speaker 1>the the HPA, unlike a number of the

00:28:58.915 --> 00:29:02.035
<v Speaker 1>other things that signal to scaling owns, that's

00:29:02.035 --> 00:29:04.675
<v Speaker 1>that's actually contained within the core Kubernetes controller

00:29:04.675 --> 00:29:05.554
<v Speaker 1>manager

00:29:07.715 --> 00:29:10.515
<v Speaker 1>code base as a reconciliation

00:29:10.515 --> 00:29:10.995
<v Speaker 1>loop.

00:29:11.789 --> 00:29:14.590
<v Speaker 1>That's

00:29:14.590 --> 00:29:15.549
<v Speaker 1>that's got an algorithm

00:29:16.029 --> 00:29:19.629
<v Speaker 1>in it, which effectively each time it's evaluating,

00:29:19.710 --> 00:29:21.709
<v Speaker 1>you can configure that on the

00:29:22.830 --> 00:29:23.950
<v Speaker 1>controller manager.

00:29:24.590 --> 00:29:27.695
<v Speaker 1>It effectively does the maths of scraping

00:29:27.695 --> 00:29:30.895
<v Speaker 1>the current metrics or getting the metrics for

00:29:30.895 --> 00:29:32.815
<v Speaker 1>the pods currently in the deployment,

00:29:34.815 --> 00:29:35.535
<v Speaker 1>getting

00:29:36.015 --> 00:29:38.174
<v Speaker 1>effectively what is their current

00:29:38.335 --> 00:29:39.295
<v Speaker 1>utilization,

00:29:39.295 --> 00:29:41.295
<v Speaker 1>in this case of the CPU resource,

00:29:44.330 --> 00:29:46.730
<v Speaker 1>dividing that by the desired, so in this

00:29:46.730 --> 00:29:47.850
<v Speaker 1>case, 70,

00:29:48.170 --> 00:29:52.409
<v Speaker 1>and then timesing it by the current replicas.

00:29:53.530 --> 00:29:55.530
<v Speaker 1>So if we're using a %,

00:29:55.530 --> 00:29:57.665
<v Speaker 1>we divide that by 70 so we get

00:29:57.665 --> 00:29:59.105
<v Speaker 1>one point or something

00:29:59.425 --> 00:30:00.544
<v Speaker 1>that messes off.

00:30:01.265 --> 00:30:03.425
<v Speaker 1>Times up by current rep because there's ceiling

00:30:03.425 --> 00:30:05.185
<v Speaker 1>on it and then set that as the

00:30:05.185 --> 00:30:06.785
<v Speaker 1>new desired rep because

00:30:08.385 --> 00:30:08.865
<v Speaker 0>Alright.

00:30:09.470 --> 00:30:12.029
<v Speaker 0>Okay. That makes sense. I like it. So

00:30:12.430 --> 00:30:15.149
<v Speaker 0>we can just apply this to our cluster.

00:30:17.230 --> 00:30:17.789
<v Speaker 0>And

00:30:20.110 --> 00:30:21.310
<v Speaker 0>if we take a look at this,

00:30:22.365 --> 00:30:23.325
<v Speaker 0>we

00:30:23.645 --> 00:30:25.565
<v Speaker 0>can remove those replicas now. Right?

00:30:25.885 --> 00:30:26.605
<v Speaker 1>Yes.

00:30:27.325 --> 00:30:29.485
<v Speaker 0>I I gave a talk at GET upstairs

00:30:29.485 --> 00:30:31.325
<v Speaker 0>about a month ago where actually,

00:30:31.565 --> 00:30:33.165
<v Speaker 0>I I I was bold enough to say

00:30:33.165 --> 00:30:34.925
<v Speaker 0>that setting replicas and either of these specs

00:30:34.925 --> 00:30:37.725
<v Speaker 0>was an anti pattern. And you should just

00:30:37.220 --> 00:30:39.940
<v Speaker 0>HPAs in all scenarios even for local dev.

00:30:40.020 --> 00:30:41.780
<v Speaker 0>Not sure how well it went down, but

00:30:41.780 --> 00:30:44.260
<v Speaker 0>I'm I'm gonna push it. So

00:30:45.300 --> 00:30:47.540
<v Speaker 0>what this means is because we have

00:30:47.940 --> 00:30:49.860
<v Speaker 0>that is already a way. Right? So

00:30:50.475 --> 00:30:53.115
<v Speaker 0>because that CPU thing is always pushing against

00:30:53.115 --> 00:30:54.554
<v Speaker 0>the limit, I guess that's what the stress

00:30:54.554 --> 00:30:56.155
<v Speaker 0>thing is doing is that right away, this

00:30:56.155 --> 00:30:58.635
<v Speaker 0>is when, hey, you probably need more of

00:30:58.635 --> 00:31:00.315
<v Speaker 0>these. And that's when it's hard to scale

00:31:00.315 --> 00:31:01.114
<v Speaker 0>up. Okay.

00:31:01.515 --> 00:31:03.515
<v Speaker 1>So if you and you can also see

00:31:03.515 --> 00:31:04.475
<v Speaker 1>that one

00:31:04.475 --> 00:31:06.169
<v Speaker 1>of the things you can do is you

00:31:06.169 --> 00:31:08.490
<v Speaker 1>can the HPA is quite good at telling

00:31:08.490 --> 00:31:11.130
<v Speaker 1>you why it's done a scaling action. So

00:31:11.130 --> 00:31:13.130
<v Speaker 1>you can do kubectl describe

00:31:13.130 --> 00:31:14.090
<v Speaker 1>HPA.

00:31:19.285 --> 00:31:24.245
<v Speaker 0>Okay. Set the size of our replica set

00:31:24.245 --> 00:31:27.525
<v Speaker 0>to three because the CPU resource utilization percentage

00:31:27.525 --> 00:31:29.445
<v Speaker 0>of request went above a target.

00:31:21.289 --> 00:31:21.850
<v Speaker 0>Yeah.

00:31:30.190 --> 00:31:32.990
<v Speaker 1>Yeah. Cool. And you can see higher

00:31:33.470 --> 00:31:35.870
<v Speaker 1>up, you've got the metric section as well

00:31:35.870 --> 00:31:38.110
<v Speaker 1>with the current and the target.

00:31:40.590 --> 00:31:41.070
<v Speaker 0>Sweet.

00:31:44.184 --> 00:31:45.384
<v Speaker 0>And then we delete.

00:31:46.424 --> 00:31:49.304
<v Speaker 0>So that's it. That's that's That's that's resource

00:31:49.304 --> 00:31:50.664
<v Speaker 1>spectrum scale.

00:31:50.664 --> 00:31:52.345
<v Speaker 1>So you can also we we set this

00:31:52.345 --> 00:31:53.945
<v Speaker 1>up to scale on CPU. You can also

00:31:53.945 --> 00:31:54.984
<v Speaker 1>do resource

00:31:54.985 --> 00:31:57.625
<v Speaker 1>utilization scaling on memory as well.

00:31:58.800 --> 00:31:59.680
<v Speaker 0>Okay. And

00:32:00.000 --> 00:32:02.080
<v Speaker 0>as a a rule of thumb or a

00:32:02.080 --> 00:32:04.160
<v Speaker 0>guide for anyone that wants to start using

00:32:04.160 --> 00:32:05.920
<v Speaker 0>this, is this the is this the first

00:32:05.920 --> 00:32:07.600
<v Speaker 0>place you would start for workloads?

00:32:07.920 --> 00:32:10.240
<v Speaker 1>Yeah. I I think it's the unless you're

00:32:10.240 --> 00:32:11.680
<v Speaker 1>coming into it with

00:32:13.245 --> 00:32:16.045
<v Speaker 1>a real knowledge of, like, what the what

00:32:16.045 --> 00:32:18.285
<v Speaker 1>the metric that's most important for you is,

00:32:18.285 --> 00:32:19.965
<v Speaker 1>I think this is this is certainly the

00:32:19.965 --> 00:32:22.125
<v Speaker 1>easiest to set up. Like, the metric server

00:32:22.125 --> 00:32:22.684
<v Speaker 1>is

00:32:23.645 --> 00:32:27.005
<v Speaker 1>owned and supported by a core a core

00:32:26.750 --> 00:32:28.830
<v Speaker 1>part of the Kubernetes community

00:32:29.070 --> 00:32:30.429
<v Speaker 1>second instrumentation.

00:32:30.590 --> 00:32:33.550
<v Speaker 1>And it's it's it's well tested.

00:32:33.550 --> 00:32:35.470
<v Speaker 1>So this setting up

00:32:36.350 --> 00:32:38.750
<v Speaker 1>the metric server and setting up resource

00:32:38.830 --> 00:32:41.070
<v Speaker 1>scaling is really easy as you've seen. It's

00:32:41.070 --> 00:32:42.190
<v Speaker 1>like, in this case,

00:32:42.865 --> 00:32:44.705
<v Speaker 1>one help chart to set up the metro

00:32:44.705 --> 00:32:47.104
<v Speaker 1>server and then a a couple of

00:32:47.585 --> 00:32:49.424
<v Speaker 1>bare YAML

00:32:49.424 --> 00:32:50.224
<v Speaker 1>objects.

00:32:51.025 --> 00:32:52.224
<v Speaker 0>Okay. Definitely.

00:32:53.265 --> 00:32:55.424
<v Speaker 0>Alright. Plus they don't have to re instrument

00:32:55.424 --> 00:32:57.550
<v Speaker 0>their own application if there's not added premium

00:32:57.550 --> 00:32:59.230
<v Speaker 0>fees metrics or anything like that. Yeah. Yeah.

00:32:59.230 --> 00:33:00.990
<v Speaker 0>So it's yeah. I'd say it's a good

00:33:00.990 --> 00:33:02.030
<v Speaker 0>time point too.

00:33:02.750 --> 00:33:04.830
<v Speaker 0>Alright. Let's take a look at custom metric

00:33:04.830 --> 00:33:05.630
<v Speaker 0>scaling.

00:33:06.190 --> 00:33:06.830
<v Speaker 0>Yeah.

00:33:07.630 --> 00:33:08.910
<v Speaker 0>What are custom metric?

00:33:09.914 --> 00:33:10.554
<v Speaker 1>So

00:33:10.715 --> 00:33:11.914
<v Speaker 1>custom metrics

00:33:11.995 --> 00:33:12.714
<v Speaker 1>are

00:33:14.875 --> 00:33:16.794
<v Speaker 1>metrics which correspond

00:33:16.794 --> 00:33:19.755
<v Speaker 1>to a Kubernetes object. So they're not just

00:33:19.755 --> 00:33:21.115
<v Speaker 1>any arbitrary object,

00:33:21.590 --> 00:33:22.630
<v Speaker 1>like,

00:33:22.630 --> 00:33:23.830
<v Speaker 1>whether external

00:33:24.070 --> 00:33:26.950
<v Speaker 1>to the cluster, so something like QN potentially.

00:33:27.990 --> 00:33:30.870
<v Speaker 1>They are either metrics that are exposed

00:33:30.950 --> 00:33:34.470
<v Speaker 1>by each pod in a, say, a deployment

00:33:35.294 --> 00:33:36.254
<v Speaker 1>or

00:33:36.254 --> 00:33:38.095
<v Speaker 1>potentially on other Kubernetes

00:33:38.095 --> 00:33:40.014
<v Speaker 1>objects. So

00:33:40.014 --> 00:33:43.134
<v Speaker 1>ingress objects are one example. So, effectively, if

00:33:43.134 --> 00:33:45.134
<v Speaker 1>you were deploying a service

00:33:45.215 --> 00:33:47.375
<v Speaker 1>scaling behind an ingress object,

00:33:47.899 --> 00:33:50.460
<v Speaker 1>you can make use of metrics produced by

00:33:50.460 --> 00:33:53.019
<v Speaker 1>that ingress object as well as a custom

00:33:53.019 --> 00:33:53.659
<v Speaker 1>metric.

00:33:55.019 --> 00:33:55.899
<v Speaker 0>Alright.

00:33:56.220 --> 00:34:00.220
<v Speaker 0>So for this then, we need to deploy

00:34:00.220 --> 00:34:01.259
<v Speaker 0>Prometheus.

00:34:01.740 --> 00:34:02.059
<v Speaker 1>Yep.

00:34:03.415 --> 00:34:05.175
<v Speaker 0>Do I really need to put forward?

00:34:06.135 --> 00:34:08.855
<v Speaker 1>That that is just to have a check

00:34:08.855 --> 00:34:10.054
<v Speaker 1>if we

00:34:10.054 --> 00:34:12.614
<v Speaker 1>were if if if you were unsure about

00:34:12.614 --> 00:34:13.575
<v Speaker 1>whether it's

00:34:14.935 --> 00:34:16.054
<v Speaker 1>set up correctly. But

00:34:18.340 --> 00:34:19.219
<v Speaker 0>Okay.

00:34:19.540 --> 00:34:21.380
<v Speaker 0>So helm install.

00:34:21.460 --> 00:34:22.260
<v Speaker 0>Alright.

00:34:25.219 --> 00:34:26.659
<v Speaker 0>Let's see what we got here.

00:34:29.394 --> 00:34:30.594
<v Speaker 0>Right. So we got

00:34:30.914 --> 00:34:32.194
<v Speaker 0>a node exporter,

00:34:32.194 --> 00:34:33.875
<v Speaker 0>a cube state metrics,

00:34:34.194 --> 00:34:36.194
<v Speaker 0>push gateway in the server, and alert manager.

00:34:36.194 --> 00:34:37.875
<v Speaker 0>So with the previous server is obviously the

00:34:37.875 --> 00:34:40.355
<v Speaker 0>database. We've got the alert manager for doing

00:34:40.355 --> 00:34:42.034
<v Speaker 0>alerts. Why are those pending?

00:34:45.719 --> 00:34:47.000
<v Speaker 0>Not like pending.

00:34:47.880 --> 00:34:48.280
<v Speaker 0>Yeah.

00:34:57.905 --> 00:34:59.425
<v Speaker 0>Oh, they requested yes.

00:35:03.905 --> 00:35:05.665
<v Speaker 1>There should be a way to disable that,

00:35:05.665 --> 00:35:06.145
<v Speaker 1>surely.

00:35:06.705 --> 00:35:09.425
<v Speaker 0>So the problem is this cluster is not

00:35:09.425 --> 00:35:11.025
<v Speaker 0>really configured

00:35:10.670 --> 00:35:11.390
<v Speaker 0>for

00:35:11.790 --> 00:35:13.630
<v Speaker 0>storage classes and PVC.

00:35:15.390 --> 00:35:16.030
<v Speaker 0>So

00:35:17.230 --> 00:35:18.110
<v Speaker 0>let's

00:35:19.230 --> 00:35:20.830
<v Speaker 0>let's let's fix that first.

00:35:23.795 --> 00:35:26.355
<v Speaker 0>Let's go over here. Let's grab this helm

00:35:26.355 --> 00:35:27.795
<v Speaker 0>chart. I'm sure we can tell it to

00:35:27.795 --> 00:35:29.875
<v Speaker 0>use a host path. In fact, can edit

00:35:29.875 --> 00:35:31.315
<v Speaker 0>it. Let's just do that.

00:35:32.435 --> 00:35:33.555
<v Speaker 0>Edit, deploy,

00:35:33.795 --> 00:35:36.355
<v Speaker 0>Prometheus server. Is it a staple set or

00:35:36.355 --> 00:35:36.835
<v Speaker 0>deploy?

00:35:39.200 --> 00:35:42.560
<v Speaker 1>You can disable the persistent volumes.

00:35:43.279 --> 00:35:45.279
<v Speaker 0>Well, that's easier. Is that just a helm

00:35:45.279 --> 00:35:46.560
<v Speaker 0>flag I can drop in?

00:35:47.200 --> 00:35:47.920
<v Speaker 1>Yep.

00:35:49.200 --> 00:35:50.720
<v Speaker 1>So

00:35:55.675 --> 00:35:58.715
<v Speaker 1>if we go helm upgrade

00:36:00.714 --> 00:36:03.035
<v Speaker 0>Yeah. What's the last what's the last values

00:36:03.035 --> 00:36:04.315
<v Speaker 0>flag? Do you remember?

00:36:05.994 --> 00:36:06.714
<v Speaker 0>Agreed.

00:36:09.790 --> 00:36:12.590
<v Speaker 0>Reuse values. Okay. So helm upgrade,

00:36:13.070 --> 00:36:14.910
<v Speaker 0>reuse values,

00:36:14.990 --> 00:36:16.110
<v Speaker 0>Prometheus

00:36:16.910 --> 00:36:18.510
<v Speaker 0>set. What do you know there?

00:36:19.390 --> 00:36:20.750
<v Speaker 1>So there's

00:36:21.710 --> 00:36:23.495
<v Speaker 1>to direct. It

00:36:27.095 --> 00:36:27.815
<v Speaker 1>is

00:36:29.175 --> 00:36:31.495
<v Speaker 1>oh, come on. There's a lot of options

00:36:31.495 --> 00:36:32.615
<v Speaker 1>in this chart.

00:36:33.655 --> 00:36:34.615
<v Speaker 0>Are you sure you don't want me just

00:36:34.615 --> 00:36:36.695
<v Speaker 0>to edit the deployment? Yeah. Might might be

00:36:36.695 --> 00:36:37.335
<v Speaker 1>easier to.

00:36:41.420 --> 00:36:42.940
<v Speaker 0>Alright. Let's see.

00:36:43.339 --> 00:36:44.140
<v Speaker 0>So

00:36:48.940 --> 00:36:51.180
<v Speaker 0>I meant okay. It looks fine.

00:36:54.115 --> 00:36:55.075
<v Speaker 0>Oilment.

00:36:55.075 --> 00:36:56.675
<v Speaker 0>Okay. We got data here.

00:37:06.035 --> 00:37:06.355
<v Speaker 0>Thing.

00:37:20.095 --> 00:37:22.815
<v Speaker 1>Let's step back here. Yeah. We we don't

00:37:22.815 --> 00:37:25.295
<v Speaker 0>really need alert manager. No. No. We don't

00:37:25.295 --> 00:37:26.175
<v Speaker 1>in this case. So

00:37:27.055 --> 00:37:27.775
<v Speaker 0>Oh.

00:37:28.655 --> 00:37:30.415
<v Speaker 0>Alright. They're gonna make me create that path

00:37:30.415 --> 00:37:31.775
<v Speaker 0>first. Is that the problem?

00:37:39.579 --> 00:37:42.540
<v Speaker 0>Oh, this error wasn't there. Wasn't there. Yeah.

00:37:48.635 --> 00:37:49.035
<v Speaker 0>See.

00:38:05.400 --> 00:38:08.760
<v Speaker 0>Alright. Come on here. Log dash f. Copy.

00:38:08.760 --> 00:38:10.520
<v Speaker 0>Oh, it's 9 anyway. Oh, it's the other

00:38:10.520 --> 00:38:11.080
<v Speaker 1>one.

00:38:12.440 --> 00:38:15.960
<v Speaker 0>Let's see. Prometheus server

00:38:15.405 --> 00:38:16.365
<v Speaker 0>and

00:38:16.445 --> 00:38:17.485
<v Speaker 0>unable to create

00:38:19.005 --> 00:38:21.965
<v Speaker 1>Open permissions to that. So I have find

00:38:21.965 --> 00:38:23.165
<v Speaker 1>the the command

00:38:23.485 --> 00:38:25.805
<v Speaker 1>the the flag you want. It is

00:38:26.605 --> 00:38:27.005
<v Speaker 1>server.

00:38:29.880 --> 00:38:31.080
<v Speaker 0>Use values.

00:38:31.080 --> 00:38:32.040
<v Speaker 0>Prometheus

00:38:32.119 --> 00:38:33.560
<v Speaker 0>set server.

00:38:34.359 --> 00:38:35.080
<v Speaker 1>Dot

00:38:38.840 --> 00:38:41.480
<v Speaker 1>persistent volume dot enabled

00:38:41.480 --> 00:38:42.760
<v Speaker 1>equals false

00:38:43.625 --> 00:38:44.985
<v Speaker 1>Capital e.

00:38:49.545 --> 00:38:50.265
<v Speaker 0>Okay.

00:38:53.785 --> 00:38:54.825
<v Speaker 0>Oh, yeah. In the chart.

00:38:55.750 --> 00:38:56.630
<v Speaker 1>Oh, yeah.

00:38:57.030 --> 00:38:57.910
<v Speaker 1>In the

00:38:58.310 --> 00:38:59.910
<v Speaker 1>Prometheus community.

00:39:00.470 --> 00:39:01.910
<v Speaker 1>So that's Prometheus.

00:39:04.950 --> 00:39:06.070
<v Speaker 0>Should have used Cane.

00:39:09.055 --> 00:39:11.695
<v Speaker 1>It's I'm taking notes for things that I

00:39:11.695 --> 00:39:13.855
<v Speaker 1>need to fix for people not using kind

00:39:13.855 --> 00:39:14.575
<v Speaker 1>to get.

00:39:14.975 --> 00:39:17.535
<v Speaker 0>Alright. Container crane. So it's it's got

00:39:17.855 --> 00:39:20.415
<v Speaker 0>no persistence, no PVC, our crash with backup

00:39:20.415 --> 00:39:22.335
<v Speaker 0>will disappear now that that's running.

00:39:22.655 --> 00:39:24.610
<v Speaker 0>And this say terminating.

00:39:27.890 --> 00:39:29.970
<v Speaker 0>It'll go away eventually. Right? We have what

00:39:29.970 --> 00:39:31.730
<v Speaker 0>we need. That's important. Yep. Okay.

00:39:33.970 --> 00:39:36.130
<v Speaker 0>So let's do the port forward. Make sure

00:39:36.130 --> 00:39:38.130
<v Speaker 0>we can browse to it. Make sure everything's

00:39:38.130 --> 00:39:38.530
<v Speaker 0>happy.

00:39:41.855 --> 00:39:43.775
<v Speaker 0>Post 1990.

00:39:44.095 --> 00:39:45.855
<v Speaker 0>And we have a Prometheus.

00:39:45.855 --> 00:39:48.575
<v Speaker 0>Now because those node exports are running, we

00:39:48.575 --> 00:39:49.455
<v Speaker 0>should have

00:39:50.095 --> 00:39:52.415
<v Speaker 0>yeah. We'll bunch of status. So

00:39:53.109 --> 00:39:53.910
<v Speaker 1>Yep.

00:39:57.750 --> 00:39:59.030
<v Speaker 0>Desk. Perfect.

00:40:01.270 --> 00:40:01.910
<v Speaker 0>Cool.

00:40:02.070 --> 00:40:02.870
<v Speaker 0>Alright.

00:40:03.349 --> 00:40:05.750
<v Speaker 0>Okay. That then? Yep. So it's called the

00:40:05.750 --> 00:40:07.750
<v Speaker 0>port forward and go back to this tutorial.

00:40:08.295 --> 00:40:10.855
<v Speaker 0>So now we're going to deploy our sample

00:40:10.855 --> 00:40:11.734
<v Speaker 0>application.

00:40:11.734 --> 00:40:13.575
<v Speaker 0>Let's take a look at our YAML.

00:40:16.454 --> 00:40:18.215
<v Speaker 0>Sample deploy.

00:40:18.694 --> 00:40:20.215
<v Speaker 0>So this is

00:40:20.375 --> 00:40:22.135
<v Speaker 0>running

00:40:23.079 --> 00:40:25.160
<v Speaker 0>some auto scale demo thing.

00:40:26.440 --> 00:40:28.119
<v Speaker 0>Got Prometheus annotations.

00:40:28.119 --> 00:40:30.440
<v Speaker 0>So that's gonna be scraped by Prometheus

00:40:31.000 --> 00:40:33.240
<v Speaker 0>and more resource limits. Oh, and even a

00:40:33.240 --> 00:40:34.120
<v Speaker 0>service now.

00:40:34.440 --> 00:40:35.080
<v Speaker 1>Yep.

00:40:35.960 --> 00:40:37.640
<v Speaker 0>Does it need to hard code the cluster

00:40:37.640 --> 00:40:37.960
<v Speaker 0>IP?

00:40:40.055 --> 00:40:40.695
<v Speaker 1>No.

00:40:44.375 --> 00:40:45.815
<v Speaker 0>I don't even know

00:40:46.055 --> 00:40:48.454
<v Speaker 0>if my I don't think 10 or even

00:40:48.454 --> 00:40:50.615
<v Speaker 0>my not even my service side or so.

00:40:52.829 --> 00:40:53.630
<v Speaker 0>Okay.

00:40:53.630 --> 00:40:54.270
<v Speaker 0>So

00:40:54.430 --> 00:40:55.550
<v Speaker 0>let's deploy.

00:40:56.509 --> 00:40:58.750
<v Speaker 0>Yeah. Let's deploy that. Okay. So we're gonna

00:40:58.750 --> 00:41:01.230
<v Speaker 0>apply Kubernetes scaling to

00:41:01.309 --> 00:41:02.109
<v Speaker 0>sample

00:41:02.109 --> 00:41:03.070
<v Speaker 0>deploy.

00:41:03.630 --> 00:41:05.150
<v Speaker 0>We'll

00:41:05.150 --> 00:41:06.109
<v Speaker 0>get the service.

00:41:09.045 --> 00:41:09.845
<v Speaker 0>IP,

00:41:09.845 --> 00:41:12.085
<v Speaker 0>good. Yep. 172 is what I needed.

00:41:12.645 --> 00:41:14.405
<v Speaker 0>We'll make sure we got an endpoint.

00:41:15.445 --> 00:41:16.725
<v Speaker 0>It looks healthy.

00:41:17.445 --> 00:41:18.405
<v Speaker 0>So

00:41:18.405 --> 00:41:20.885
<v Speaker 0>you want the port forward to Prometheus again,

00:41:20.885 --> 00:41:22.085
<v Speaker 0>and we're gonna take a look at the

00:41:22.085 --> 00:41:23.445
<v Speaker 0>HTTP request total.

00:41:24.220 --> 00:41:25.180
<v Speaker 0>Now depending

00:41:25.180 --> 00:41:27.020
<v Speaker 0>on the previous script interval,

00:41:28.300 --> 00:41:30.700
<v Speaker 0>we may just have to kill a little

00:41:30.700 --> 00:41:33.340
<v Speaker 0>bit of time. We lowered that as part

00:41:33.340 --> 00:41:35.180
<v Speaker 1>of the install to thirty seconds.

00:41:36.275 --> 00:41:37.635
<v Speaker 0>Lower that to thirty. I would have lowered

00:41:37.635 --> 00:41:38.675
<v Speaker 0>it to four.

00:41:42.035 --> 00:41:43.715
<v Speaker 0>H t p. There we go.

00:41:44.755 --> 00:41:46.435
<v Speaker 0>And let's just graph it

00:41:47.235 --> 00:41:48.115
<v Speaker 0>over.

00:41:48.995 --> 00:41:50.435
<v Speaker 0>We don't even have a minute yet.

00:41:51.420 --> 00:41:52.460
<v Speaker 0>Is that alright?

00:41:52.619 --> 00:41:54.700
<v Speaker 1>You need an aggregator on it as well

00:41:54.700 --> 00:41:56.220
<v Speaker 1>to Right.

00:42:01.339 --> 00:42:03.180
<v Speaker 0>But yeah. So you need you need multiple

00:42:03.180 --> 00:42:05.260
<v Speaker 1>different things for that anyway. But

00:42:05.984 --> 00:42:07.984
<v Speaker 1>we're get we're getting the main tracking. Yeah.

00:42:07.984 --> 00:42:08.705
<v Speaker 0>Yeah. Are.

00:42:09.825 --> 00:42:11.265
<v Speaker 0>Here we go. So we can see the

00:42:11.265 --> 00:42:12.305
<v Speaker 0>values too.

00:42:12.625 --> 00:42:13.744
<v Speaker 0>Yeah. So we just we have a couple

00:42:13.744 --> 00:42:15.105
<v Speaker 0>of comments. So I can just lose a

00:42:15.105 --> 00:42:16.625
<v Speaker 0>few seconds so we can maybe graph it

00:42:16.625 --> 00:42:16.865
<v Speaker 0>as well.

00:42:19.450 --> 00:42:22.330
<v Speaker 0>Never seen a hard coded service IP before.

00:42:22.890 --> 00:42:24.970
<v Speaker 0>Yeah. I I I'll blame Guy for being

00:42:24.970 --> 00:42:26.730
<v Speaker 0>a bit silly with that cluster IP. I'm

00:42:26.730 --> 00:42:28.330
<v Speaker 0>not sure what you were thinking there. That's

00:42:28.330 --> 00:42:31.035
<v Speaker 1>something. I I have no idea. I I

00:42:31.035 --> 00:42:33.515
<v Speaker 1>suspect that was me. Yeah. It's at 11:30

00:42:33.515 --> 00:42:35.275
<v Speaker 1>on Monday night. But yeah. That seems like

00:42:35.275 --> 00:42:36.315
<v Speaker 1>a good idea. Right?

00:42:36.714 --> 00:42:39.195
<v Speaker 1>Works your kind. It must work everywhere.

00:42:40.795 --> 00:42:42.875
<v Speaker 0>So that's raised from two to three.

00:42:43.115 --> 00:42:45.915
<v Speaker 0>Is the sample application going to be degrading

00:42:45.915 --> 00:42:49.109
<v Speaker 0>over time? Is that This this sample application

00:42:49.109 --> 00:42:50.390
<v Speaker 1>is recording

00:42:50.390 --> 00:42:52.150
<v Speaker 1>all requests made to it,

00:42:52.470 --> 00:42:53.510
<v Speaker 1>which includes

00:42:54.310 --> 00:42:56.070
<v Speaker 1>effectively health checks. That's

00:42:58.390 --> 00:42:59.670
<v Speaker 0>But the http

00:43:00.070 --> 00:43:01.670
<v Speaker 0>oh, okay. This is request or this is

00:43:01.670 --> 00:43:04.315
<v Speaker 0>not the response time. No. Okay. Gotcha. So,

00:43:04.875 --> 00:43:06.555
<v Speaker 0>yeah, that's gonna up to four.

00:43:08.875 --> 00:43:11.515
<v Speaker 1>Yeah. So it's an ever ever increment time.

00:43:11.995 --> 00:43:13.675
<v Speaker 0>I've got it. Okay. Cool. I mean, it

00:43:13.675 --> 00:43:14.795
<v Speaker 0>took me a minute, but I got there.

00:43:14.795 --> 00:43:15.275
<v Speaker 0>Okay.

00:43:16.955 --> 00:43:17.995
<v Speaker 0>So now

00:43:18.819 --> 00:43:21.060
<v Speaker 0>we have to install something else.

00:43:21.700 --> 00:43:23.300
<v Speaker 0>Oh, we can visit the app.

00:43:23.780 --> 00:43:24.900
<v Speaker 0>Oh, we don't need to do that, do

00:43:24.900 --> 00:43:27.140
<v Speaker 0>we? Yeah. Okay. We don't need to do

00:43:27.140 --> 00:43:29.700
<v Speaker 1>that. No. It's it's it's fairly simple. Like,

00:43:29.700 --> 00:43:32.099
<v Speaker 1>it just shows I've served x number of

00:43:32.099 --> 00:43:32.500
<v Speaker 1>requests

00:43:34.155 --> 00:43:35.035
<v Speaker 1>all time.

00:43:36.955 --> 00:43:38.795
<v Speaker 0>Alright. Why not then?

00:43:41.995 --> 00:43:43.595
<v Speaker 0>Eighty eighty eighty eighty.

00:43:48.910 --> 00:43:50.270
<v Speaker 0>Eight. 10.

00:43:54.830 --> 00:43:56.510
<v Speaker 0>I'll go for a nice round 100.

00:44:02.724 --> 00:44:03.765
<v Speaker 0>So now

00:44:04.085 --> 00:44:06.805
<v Speaker 0>we need to install the Mepheus adapter. So

00:44:06.805 --> 00:44:09.445
<v Speaker 0>is that the part that is gonna allow

00:44:09.445 --> 00:44:11.445
<v Speaker 0>us to use custom metrics then as part

00:44:11.445 --> 00:44:13.045
<v Speaker 0>of our HPA rules? Yeah.

00:44:13.605 --> 00:44:14.645
<v Speaker 1>So if you run

00:44:15.285 --> 00:44:17.630
<v Speaker 1>so to start to show this, you can

00:44:17.630 --> 00:44:18.190
<v Speaker 1>do

00:44:21.630 --> 00:44:24.190
<v Speaker 1>you can run against the

00:44:25.310 --> 00:44:26.030
<v Speaker 1>cluster

00:44:26.110 --> 00:44:26.990
<v Speaker 1>kubectl

00:44:26.990 --> 00:44:28.590
<v Speaker 1>get API services.

00:44:35.974 --> 00:44:37.415
<v Speaker 1>Interesting.

00:44:37.815 --> 00:44:39.575
<v Speaker 1>It might be APIservices.a

00:44:39.655 --> 00:44:42.855
<v Speaker 1>you might have to fully qualify it. APIservices.API

00:44:42.855 --> 00:44:43.575
<v Speaker 1>registrations.

00:44:45.170 --> 00:44:46.930
<v Speaker 0>There we go. There is no dash.

00:44:47.570 --> 00:44:48.610
<v Speaker 1>Okay.

00:44:51.090 --> 00:44:53.250
<v Speaker 1>Cool. So what you can see here is

00:44:53.250 --> 00:44:54.530
<v Speaker 1>all the metrics

00:44:54.690 --> 00:44:56.930
<v Speaker 1>that that cluster knows about,

00:44:57.410 --> 00:44:59.895
<v Speaker 1>where the service it should send it to

00:44:59.895 --> 00:45:01.575
<v Speaker 1>is, whether it's available and how old it

00:45:01.575 --> 00:45:03.095
<v Speaker 1>is. So

00:45:03.095 --> 00:45:05.095
<v Speaker 1>you can see that we've already installed v

00:45:05.095 --> 00:45:07.175
<v Speaker 1>one bit one dot metrics. Okay. So IO

00:45:07.175 --> 00:45:09.575
<v Speaker 1>being served by the the metrics server.

00:45:10.135 --> 00:45:13.175
<v Speaker 1>Custom metrics is a different API path

00:45:13.350 --> 00:45:15.030
<v Speaker 1>served by a different component,

00:45:15.030 --> 00:45:17.190
<v Speaker 1>so we need to set up effectively something

00:45:17.190 --> 00:45:20.230
<v Speaker 1>that is going to register itself against the

00:45:20.230 --> 00:45:23.350
<v Speaker 1>API server saying, if you receive a request

00:45:23.510 --> 00:45:26.895
<v Speaker 1>that matches this API path, don't don't try

00:45:26.895 --> 00:45:28.815
<v Speaker 1>and serve it yourself. Instead, send it on

00:45:28.815 --> 00:45:30.255
<v Speaker 1>to me. I will send you data back

00:45:30.255 --> 00:45:31.775
<v Speaker 1>in the format you expect.

00:45:33.375 --> 00:45:35.935
<v Speaker 0>Cool. Alright. Well, let's get that enabled then.

00:45:36.815 --> 00:45:38.255
<v Speaker 0>Hopefully, that doesn't need a PVC.

00:45:43.720 --> 00:45:44.520
<v Speaker 0>Oh, yeah.

00:45:46.599 --> 00:45:47.000
<v Speaker 0>K.

00:45:57.055 --> 00:45:59.295
<v Speaker 1>One one thing that's probably worth mentioning here

00:45:59.295 --> 00:46:01.934
<v Speaker 1>is so we're using the Prometheus adapter for

00:46:01.934 --> 00:46:02.734
<v Speaker 1>this example.

00:46:02.895 --> 00:46:03.695
<v Speaker 1>That

00:46:05.135 --> 00:46:07.250
<v Speaker 1>isn't the only option for setting up custom

00:46:07.250 --> 00:46:10.050
<v Speaker 1>metrics. There's there's a number of other implementations.

00:46:10.369 --> 00:46:12.290
<v Speaker 1>So Lando have got one called

00:46:12.690 --> 00:46:15.890
<v Speaker 1>Kube Metrics Adapter, I think, which has a

00:46:15.890 --> 00:46:17.090
<v Speaker 1>load of functionality.

00:46:17.730 --> 00:46:20.290
<v Speaker 1>There's there's others that have been built by

00:46:20.290 --> 00:46:22.115
<v Speaker 1>other companies

00:46:22.115 --> 00:46:23.795
<v Speaker 1>and communities

00:46:23.795 --> 00:46:24.595
<v Speaker 1>as well.

00:46:25.795 --> 00:46:26.435
<v Speaker 0>Cool.

00:46:26.835 --> 00:46:28.755
<v Speaker 0>Is there a Google Sheets adapter?

00:46:32.435 --> 00:46:34.675
<v Speaker 1>I think the closest you can get is

00:46:34.675 --> 00:46:35.395
<v Speaker 1>Snapdriver.

00:46:37.680 --> 00:46:40.720
<v Speaker 1>And also one other thing, which I think

00:46:41.040 --> 00:46:43.280
<v Speaker 1>a lot of people obviously come across this

00:46:43.280 --> 00:46:45.200
<v Speaker 1>and go, oh, that's that's cool. There's multiple

00:46:45.200 --> 00:46:47.440
<v Speaker 1>different adapters that can do different things. I

00:46:47.440 --> 00:46:48.160
<v Speaker 1>could maybe get

00:46:48.945 --> 00:46:50.225
<v Speaker 1>both install

00:46:50.225 --> 00:46:52.625
<v Speaker 1>multiple of them and that way have functionality

00:46:52.625 --> 00:46:55.265
<v Speaker 1>of that one plus the Prometheus adapter plus

00:46:55.265 --> 00:46:57.185
<v Speaker 1>so I could use data dot metrics and

00:46:57.185 --> 00:46:58.465
<v Speaker 1>Prometheus adapter.

00:46:59.025 --> 00:47:00.865
<v Speaker 1>Unfortunately, at the moment, one of the limitations

00:47:01.080 --> 00:47:03.640
<v Speaker 1>of these API aggregations is you can only

00:47:03.640 --> 00:47:06.280
<v Speaker 1>have one thing registering itself as saying I

00:47:06.280 --> 00:47:07.560
<v Speaker 1>serve these metrics.

00:47:08.360 --> 00:47:09.240
<v Speaker 1>There's not

00:47:09.560 --> 00:47:11.880
<v Speaker 1>there's there's some discussion at the moment to

00:47:12.200 --> 00:47:14.360
<v Speaker 1>build effectively a proxy

00:47:14.440 --> 00:47:16.040
<v Speaker 1>that would say

00:47:15.924 --> 00:47:17.285
<v Speaker 1>would say

00:47:18.484 --> 00:47:21.605
<v Speaker 1>say for this namespace, this component serves metric

00:47:21.605 --> 00:47:24.484
<v Speaker 1>that serves custom metrics and this namespace that

00:47:24.484 --> 00:47:26.644
<v Speaker 1>other component. But the moment is you've got

00:47:26.644 --> 00:47:28.244
<v Speaker 1>to choose one of the solutions.

00:47:29.319 --> 00:47:31.079
<v Speaker 0>Yes. So the problem being if we take

00:47:31.079 --> 00:47:32.760
<v Speaker 0>a look at the API services then, is

00:47:32.760 --> 00:47:35.079
<v Speaker 0>that only one adapter can register as a

00:47:35.079 --> 00:47:37.559
<v Speaker 0>custom metric provider? Yes. If you have metrics

00:47:37.559 --> 00:47:38.200
<v Speaker 0>and

00:47:39.079 --> 00:47:41.480
<v Speaker 0>and Fox DB and Prometheus, you really need

00:47:41.480 --> 00:47:43.319
<v Speaker 0>to pick one for these use cases. Yeah.

00:47:45.194 --> 00:47:47.275
<v Speaker 0>Alright. I'm as and I'm assuming the thing

00:47:47.275 --> 00:47:48.555
<v Speaker 0>you were talking about there would just be,

00:47:48.555 --> 00:47:50.315
<v Speaker 0>like, a gateway that registers this and then

00:47:50.315 --> 00:47:53.194
<v Speaker 0>proxies them onto to different Yeah. Okay. Yeah.

00:47:53.194 --> 00:47:54.474
<v Speaker 1>That's kind of the discussion

00:47:55.194 --> 00:47:56.714
<v Speaker 1>as a kid. But

00:47:57.970 --> 00:48:01.010
<v Speaker 0>Alright. And then if we hit the endpoint,

00:48:02.210 --> 00:48:03.730
<v Speaker 0>we have our

00:48:03.810 --> 00:48:05.970
<v Speaker 0>these all are custom metrics?

00:48:06.450 --> 00:48:07.170
<v Speaker 1>Yep. From us. Yeah.

00:48:09.855 --> 00:48:12.655
<v Speaker 0>So if I grab this for HTTP

00:48:14.655 --> 00:48:16.015
<v Speaker 0>oh, nice.

00:48:16.575 --> 00:48:18.655
<v Speaker 1>And so this is this is where it

00:48:18.655 --> 00:48:21.535
<v Speaker 1>gets interesting. So the Prometheus adapter

00:48:22.340 --> 00:48:24.340
<v Speaker 1>but Prometheus metrics are not

00:48:25.060 --> 00:48:28.660
<v Speaker 1>PromQL is not what the API server speaks.

00:48:28.980 --> 00:48:30.820
<v Speaker 1>So it's sending metrics to a certain API

00:48:30.820 --> 00:48:32.980
<v Speaker 1>path and expects a response back in a

00:48:32.980 --> 00:48:33.860
<v Speaker 1>certain format.

00:48:34.020 --> 00:48:36.500
<v Speaker 1>So Prometheus adapter is about sitting in the

00:48:36.500 --> 00:48:39.105
<v Speaker 1>middle there and you're configuring it as to

00:48:39.105 --> 00:48:39.665
<v Speaker 1>how

00:48:39.905 --> 00:48:41.985
<v Speaker 1>you want to what metrics you want to

00:48:41.985 --> 00:48:44.305
<v Speaker 1>get out of Prometheus and what metrics how

00:48:44.305 --> 00:48:47.265
<v Speaker 1>you transform them into the format that

00:48:47.985 --> 00:48:49.985
<v Speaker 1>the API server expects.

00:48:50.145 --> 00:48:51.425
<v Speaker 1>So you can see one of the things

00:48:51.425 --> 00:48:53.265
<v Speaker 1>you can see here is that

00:48:54.720 --> 00:48:57.520
<v Speaker 1>this name, pods slash h t p request

00:48:57.520 --> 00:48:59.360
<v Speaker 1>per second, that's not the name of the

00:48:59.360 --> 00:49:00.480
<v Speaker 1>metric in

00:49:00.880 --> 00:49:01.840
<v Speaker 1>Prometheus.

00:49:02.320 --> 00:49:04.400
<v Speaker 1>We've been looking at a a

00:49:04.560 --> 00:49:06.400
<v Speaker 1>metric that is supposed by the app called

00:49:06.400 --> 00:49:08.585
<v Speaker 1>h t p request total.

00:49:08.585 --> 00:49:09.145
<v Speaker 1>Yeah.

00:49:10.664 --> 00:49:11.305
<v Speaker 1>So

00:49:11.704 --> 00:49:14.184
<v Speaker 1>do you want to jump to the file

00:49:14.184 --> 00:49:16.025
<v Speaker 1>that we used when we installed the Prometheus

00:49:16.025 --> 00:49:16.825
<v Speaker 1>adapter?

00:49:16.825 --> 00:49:18.664
<v Speaker 1>So we did a bit of as part

00:49:18.664 --> 00:49:20.825
<v Speaker 1>of the the command that that we placed

00:49:20.825 --> 00:49:22.424
<v Speaker 1>then with some configuration.

00:49:23.920 --> 00:49:25.600
<v Speaker 0>This one here. There we go. So

00:49:27.520 --> 00:49:30.000
<v Speaker 1>here you can see we're doing some overriding

00:49:30.000 --> 00:49:32.640
<v Speaker 1>of the default, like, Prometheus endpoint is sitting

00:49:32.640 --> 00:49:35.200
<v Speaker 1>on to match up with Prometheus chart.

00:49:36.695 --> 00:49:39.015
<v Speaker 1>And then we've got these rules.

00:49:39.175 --> 00:49:39.575
<v Speaker 1>So

00:49:40.135 --> 00:49:44.135
<v Speaker 1>for this is Prometheus adapters configuration language. So

00:49:44.135 --> 00:49:47.095
<v Speaker 1>here we're saying, serve up some custom metrics

00:49:47.095 --> 00:49:49.735
<v Speaker 1>rules under these

00:49:50.410 --> 00:49:51.210
<v Speaker 1>these

00:49:51.530 --> 00:49:52.330
<v Speaker 1>queries.

00:49:52.330 --> 00:49:53.930
<v Speaker 1>So in this case, we're saying

00:49:54.650 --> 00:49:55.770
<v Speaker 1>any query

00:49:56.250 --> 00:49:58.890
<v Speaker 1>that matches each field request total,

00:50:00.810 --> 00:50:03.770
<v Speaker 1>which doesn't have the Kubernetes namespace blank and

00:50:03.770 --> 00:50:06.545
<v Speaker 1>doesn't have the Kubernetes pod name blank, that's

00:50:06.545 --> 00:50:08.625
<v Speaker 1>not so important for this this

00:50:08.705 --> 00:50:10.945
<v Speaker 1>sort of thing. But in case you're wanting

00:50:10.945 --> 00:50:11.745
<v Speaker 1>to stop

00:50:12.225 --> 00:50:13.105
<v Speaker 1>potentially

00:50:13.105 --> 00:50:13.985
<v Speaker 1>exposing

00:50:14.305 --> 00:50:16.145
<v Speaker 1>metrics from, like,

00:50:16.705 --> 00:50:17.825
<v Speaker 1>POS containers.

00:50:19.190 --> 00:50:20.710
<v Speaker 1>And then we're saying

00:50:21.589 --> 00:50:23.589
<v Speaker 1>if we come back to resources,

00:50:23.990 --> 00:50:26.310
<v Speaker 1>we're saying if the name matches

00:50:26.630 --> 00:50:27.509
<v Speaker 1>regex

00:50:27.509 --> 00:50:28.309
<v Speaker 1>dot

00:50:28.309 --> 00:50:29.670
<v Speaker 1>underscore total,

00:50:31.625 --> 00:50:32.505
<v Speaker 1>Alright.

00:50:32.825 --> 00:50:35.945
<v Speaker 1>Yeah. Perform this metrics query

00:50:36.265 --> 00:50:36.905
<v Speaker 1>on

00:50:37.625 --> 00:50:38.744
<v Speaker 1>the series.

00:50:39.145 --> 00:50:39.705
<v Speaker 1>So

00:50:40.025 --> 00:50:41.865
<v Speaker 1>do a sum rate

00:50:41.865 --> 00:50:44.184
<v Speaker 1>of the series that you have found

00:50:45.510 --> 00:50:47.350
<v Speaker 1>with the same label matchers.

00:50:47.430 --> 00:50:49.350
<v Speaker 1>And in this case, we're doing the time

00:50:49.350 --> 00:50:51.270
<v Speaker 1>window of the rate is two minutes.

00:50:51.430 --> 00:50:53.910
<v Speaker 1>So effectively, what are the requests per second

00:50:56.785 --> 00:50:57.905
<v Speaker 1>of this

00:50:58.705 --> 00:51:00.785
<v Speaker 1>metric over the last two minutes,

00:51:02.065 --> 00:51:04.625
<v Speaker 1>same group values, and then so all these

00:51:04.625 --> 00:51:06.465
<v Speaker 1>things that are in, like,

00:51:06.785 --> 00:51:08.705
<v Speaker 1>double double angled brackets,

00:51:08.785 --> 00:51:12.200
<v Speaker 1>they're effectively part of the Prometheus adapter's

00:51:12.200 --> 00:51:13.320
<v Speaker 1>query language.

00:51:13.960 --> 00:51:15.160
<v Speaker 1>Got it. So you can you can have

00:51:15.160 --> 00:51:17.160
<v Speaker 1>a look at the Prometheus adapter documentation

00:51:17.160 --> 00:51:19.400
<v Speaker 1>for certain more detail on how these work.

00:51:19.559 --> 00:51:21.160
<v Speaker 1>But then present

00:51:21.160 --> 00:51:21.880
<v Speaker 1>that

00:51:22.040 --> 00:51:23.400
<v Speaker 1>metric as

00:51:24.305 --> 00:51:27.105
<v Speaker 1>this metric. You can see we've got a

00:51:27.105 --> 00:51:29.025
<v Speaker 1>a regex in the matches.

00:51:29.105 --> 00:51:30.865
<v Speaker 1>We're then using that

00:51:31.585 --> 00:51:34.224
<v Speaker 1>group that we've captured as part of the

00:51:34.224 --> 00:51:37.345
<v Speaker 1>presentation of the metrics. So that's where that

00:51:36.990 --> 00:51:39.630
<v Speaker 1>that's how that transformation from a speed request

00:51:39.630 --> 00:51:40.430
<v Speaker 1>total

00:51:40.430 --> 00:51:43.790
<v Speaker 1>to a speed request per second comes in.

00:51:44.270 --> 00:51:45.710
<v Speaker 0>Alright. That's nice.

00:51:48.030 --> 00:51:48.830
<v Speaker 0>So

00:51:49.310 --> 00:51:51.550
<v Speaker 0>or we can actually just request that metric

00:51:51.550 --> 00:51:52.750
<v Speaker 0>then. Right? Yep.

00:51:54.695 --> 00:51:56.295
<v Speaker 0>K. Let's see that.

00:51:57.655 --> 00:51:59.175
<v Speaker 0>Alright. That's nice.

00:52:00.615 --> 00:52:01.175
<v Speaker 1>And

00:52:01.735 --> 00:52:03.815
<v Speaker 1>as as back with the CPU,

00:52:04.215 --> 00:52:07.015
<v Speaker 1>it uses Kubernetes internal presentation

00:52:07.015 --> 00:52:09.519
<v Speaker 1>of numbers. So that's why it's it's had

00:52:09.519 --> 00:52:11.279
<v Speaker 1>an average of 33

00:52:11.279 --> 00:52:14.480
<v Speaker 1>milli requests per second over the last two

00:52:14.480 --> 00:52:15.119
<v Speaker 1>minutes.

00:52:17.920 --> 00:52:18.800
<v Speaker 1>Rather than

00:52:19.279 --> 00:52:21.839
<v Speaker 1>presenting us, like, zero point zero zero or

00:52:21.839 --> 00:52:25.484
<v Speaker 1>something, it presents us 33, at least. Yeah.

00:52:25.565 --> 00:52:27.645
<v Speaker 0>Of course. Why not? Okay.

00:52:28.444 --> 00:52:30.525
<v Speaker 0>Alright. So now we're gonna use

00:52:30.525 --> 00:52:32.444
<v Speaker 0>an HPA like we did with the first

00:52:32.444 --> 00:52:33.244
<v Speaker 0>example

00:52:33.805 --> 00:52:35.885
<v Speaker 0>to scale on our custom metric,

00:52:35.885 --> 00:52:37.885
<v Speaker 0>and then you provided another

00:52:37.885 --> 00:52:40.260
<v Speaker 0>deployment, I I assume, that is gonna generate

00:52:40.260 --> 00:52:43.540
<v Speaker 0>a load to increase those number of requests

00:52:43.860 --> 00:52:44.740
<v Speaker 0>per millisecond. Yeah.

00:52:45.300 --> 00:52:47.380
<v Speaker 1>Yeah. It's in this case, it's a job

00:52:47.380 --> 00:52:49.460
<v Speaker 1>because that way, we can see it scaling

00:52:49.460 --> 00:52:50.500
<v Speaker 1>down again. But

00:52:51.875 --> 00:52:54.275
<v Speaker 0>Alright. So we got our HPA. It looks

00:52:54.275 --> 00:52:55.875
<v Speaker 0>very much like the last one.

00:52:56.115 --> 00:52:56.755
<v Speaker 0>Okay.

00:52:57.555 --> 00:53:00.595
<v Speaker 0>So the metrics type here has changed from

00:53:00.595 --> 00:53:01.474
<v Speaker 0>resource

00:53:01.474 --> 00:53:02.595
<v Speaker 0>to pods.

00:53:02.835 --> 00:53:04.434
<v Speaker 0>Why would that not be custom?

00:53:05.799 --> 00:53:07.640
<v Speaker 1>So under

00:53:08.119 --> 00:53:11.160
<v Speaker 1>custom metrics, there's two different metrics types. There's

00:53:11.160 --> 00:53:13.720
<v Speaker 1>the pods, which is a metric that's exposed

00:53:13.720 --> 00:53:16.680
<v Speaker 1>by every pod in the scale target,

00:53:16.760 --> 00:53:18.840
<v Speaker 1>or there's objects. So that's

00:53:19.160 --> 00:53:20.599
<v Speaker 1>things like ingress objects.

00:53:21.085 --> 00:53:23.165
<v Speaker 1>So effectively that in that case, you're saying

00:53:23.165 --> 00:53:26.125
<v Speaker 1>this is a metric that comes from a

00:53:26.125 --> 00:53:28.525
<v Speaker 1>single object that maps to

00:53:29.085 --> 00:53:31.005
<v Speaker 1>the pods in the scale target.

00:53:31.885 --> 00:53:34.125
<v Speaker 1>But that that changes basically how it does

00:53:34.125 --> 00:53:36.605
<v Speaker 1>the evaluation of the maths behind the scenes.

00:53:38.390 --> 00:53:40.550
<v Speaker 0>Alright. Okay. Okay. I got you. So

00:53:41.590 --> 00:53:43.590
<v Speaker 1>So in this case, we got more than

00:53:43.590 --> 00:53:45.190
<v Speaker 0>one pod. So it's gonna have to actually

00:53:45.190 --> 00:53:47.750
<v Speaker 0>calculate that across rather than on an individual

00:53:47.750 --> 00:53:49.510
<v Speaker 0>pod basis. Okay. That makes sense.

00:53:51.665 --> 00:53:53.425
<v Speaker 0>Oh, I never I never knew that. That's

00:53:53.425 --> 00:53:54.225
<v Speaker 0>really useful.

00:53:54.385 --> 00:53:57.185
<v Speaker 0>Okay. So let's deploy this then.

00:53:57.665 --> 00:53:59.105
<v Speaker 0>We'll just copy the

00:54:00.305 --> 00:54:01.825
<v Speaker 0>password different. Okay.

00:54:02.305 --> 00:54:03.185
<v Speaker 0>Apply

00:54:03.345 --> 00:54:06.650
<v Speaker 0>case to we want a sample h p

00:54:06.650 --> 00:54:08.410
<v Speaker 0>a followed by load.

00:54:10.170 --> 00:54:12.329
<v Speaker 0>We now have a horizontal pod out of

00:54:12.329 --> 00:54:14.970
<v Speaker 0>scaler. Now we wanna generate some load.

00:54:15.050 --> 00:54:17.130
<v Speaker 0>Let's run get pods, see what's going on.

00:54:18.435 --> 00:54:20.595
<v Speaker 0>Our load generator is spinning up.

00:54:21.795 --> 00:54:22.835
<v Speaker 0>And

00:54:24.435 --> 00:54:25.955
<v Speaker 0>we can monitor

00:54:26.115 --> 00:54:26.915
<v Speaker 0>this.

00:54:28.915 --> 00:54:30.995
<v Speaker 0>Cool. So this is gonna because you've got

00:54:30.995 --> 00:54:32.515
<v Speaker 0>the dash w there, it's gonna watch this.

00:54:32.515 --> 00:54:34.460
<v Speaker 0>And what we should see is the number

00:54:34.460 --> 00:54:37.100
<v Speaker 0>of record number of replicas claim

00:54:37.180 --> 00:54:39.099
<v Speaker 0>after thirty seconds, I guess, because that's the

00:54:39.099 --> 00:54:40.460
<v Speaker 0>premium script interval.

00:54:40.540 --> 00:54:42.300
<v Speaker 0>Start claiming towards max pods.

00:54:42.780 --> 00:54:44.460
<v Speaker 1>Yeah. So you could you could see we've

00:54:44.460 --> 00:54:45.099
<v Speaker 1>generated load.

00:54:45.505 --> 00:54:48.945
<v Speaker 1>Suddenly, target is way above sorry. The current

00:54:48.945 --> 00:54:51.585
<v Speaker 1>utilization is way above the target. I each

00:54:51.825 --> 00:54:54.305
<v Speaker 1>the pods on average within that deployment have

00:54:54.305 --> 00:54:55.265
<v Speaker 1>each received

00:54:55.585 --> 00:54:56.865
<v Speaker 1>93.2

00:54:56.865 --> 00:54:59.265
<v Speaker 1>requests per second over the last two minutes

00:54:59.265 --> 00:55:00.065
<v Speaker 1>instead of

00:55:00.590 --> 00:55:01.630
<v Speaker 1>the target

00:55:01.790 --> 00:55:02.830
<v Speaker 1>0.5.

00:55:02.830 --> 00:55:04.350
<v Speaker 1>So it's it's scaling up.

00:55:06.350 --> 00:55:08.350
<v Speaker 0>Yeah. And we can see that this that's

00:55:08.350 --> 00:55:10.510
<v Speaker 0>based on a measurement how much

00:55:10.590 --> 00:55:11.710
<v Speaker 0>how

00:55:11.870 --> 00:55:14.190
<v Speaker 0>far beyond the target we are. It's actually

00:55:14.255 --> 00:55:15.695
<v Speaker 0>hey, we are gonna need more than one

00:55:15.695 --> 00:55:17.055
<v Speaker 0>of these. We're actually gonna scale by three

00:55:17.055 --> 00:55:18.655
<v Speaker 0>and then it's added on another four because

00:55:18.815 --> 00:55:19.615
<v Speaker 0>yeah. Correct.

00:55:20.415 --> 00:55:21.295
<v Speaker 0>Yeah. Cool.

00:55:22.255 --> 00:55:24.495
<v Speaker 0>We have a a question from Sam Path

00:55:24.495 --> 00:55:26.575
<v Speaker 0>again. So you've asked what is the difference

00:55:26.575 --> 00:55:28.815
<v Speaker 0>between horizontal scaling and vertical scaling?

00:55:29.930 --> 00:55:31.690
<v Speaker 0>I mean, we can tackle that now. We're

00:55:31.690 --> 00:55:33.210
<v Speaker 0>also I guess, we're about to show the

00:55:33.210 --> 00:55:34.010
<v Speaker 0>v p a?

00:55:35.610 --> 00:55:38.090
<v Speaker 1>We've got I mean, it depends how long

00:55:38.090 --> 00:55:39.850
<v Speaker 1>we got. But we've got external metrics as

00:55:39.850 --> 00:55:41.050
<v Speaker 1>well. And so

00:55:41.370 --> 00:55:44.090
<v Speaker 1>in this case, we're we're horizontally scaling and

00:55:44.555 --> 00:55:45.515
<v Speaker 1>each new

00:55:46.075 --> 00:55:47.995
<v Speaker 1>pod that we're creating here

00:55:48.155 --> 00:55:50.155
<v Speaker 1>is is being spun up with exactly the

00:55:50.155 --> 00:55:51.355
<v Speaker 1>same resource

00:55:51.355 --> 00:55:53.755
<v Speaker 1>requests and limits as the previous pods in

00:55:53.755 --> 00:55:56.555
<v Speaker 1>the deployment. So nothing is modifying,

00:55:56.555 --> 00:55:59.420
<v Speaker 1>like, how much CPU and memory each pod

00:55:59.420 --> 00:56:01.020
<v Speaker 1>gets. They each get the same that we

00:56:01.020 --> 00:56:02.940
<v Speaker 1>defined right at the start when we went

00:56:02.940 --> 00:56:05.980
<v Speaker 1>kubectl apply deploy.

00:56:05.980 --> 00:56:06.700
<v Speaker 1>Yaml.

00:56:07.579 --> 00:56:09.579
<v Speaker 1>With vertical pod auto scaling

00:56:09.984 --> 00:56:10.945
<v Speaker 1>instead,

00:56:11.825 --> 00:56:13.345
<v Speaker 1>I mean, we'll we'll show in more detail

00:56:13.345 --> 00:56:16.224
<v Speaker 1>later, the resources get adjusted in those pods

00:56:16.224 --> 00:56:18.305
<v Speaker 1>to allow them to scale up and down

00:56:18.305 --> 00:56:19.425
<v Speaker 1>to maintain

00:56:19.425 --> 00:56:20.385
<v Speaker 1>utilization

00:56:20.385 --> 00:56:22.865
<v Speaker 1>within each pod rather than

00:56:23.345 --> 00:56:25.505
<v Speaker 1>so much across the deployment on average.

00:56:26.319 --> 00:56:28.080
<v Speaker 0>Yeah. Horizontal scaling,

00:56:28.240 --> 00:56:31.200
<v Speaker 0>add more instances. Vertical scaling, get the instance

00:56:31.200 --> 00:56:35.040
<v Speaker 0>more power. That's the simple way. I mean,

00:56:35.040 --> 00:56:36.400
<v Speaker 0>yours was much more correct, but I just

00:56:36.400 --> 00:56:37.440
<v Speaker 0>saw it summarize as well.

00:56:38.244 --> 00:56:40.325
<v Speaker 0>Okay. So with that higher max, we've got

00:56:40.325 --> 00:56:41.045
<v Speaker 0>10.

00:56:42.244 --> 00:56:44.724
<v Speaker 0>HP is working well with the custom metrics,

00:56:44.724 --> 00:56:47.365
<v Speaker 0>especially from Prometheus. Really, really cool demo. I

00:56:47.365 --> 00:56:48.005
<v Speaker 0>like that.

00:56:48.724 --> 00:56:50.165
<v Speaker 0>So much, I'm gonna delete it now.

00:56:53.480 --> 00:56:53.960
<v Speaker 0>That was

00:56:54.680 --> 00:56:55.400
<v Speaker 0>k.

00:56:55.480 --> 00:56:56.360
<v Speaker 0>Alright.

00:56:57.400 --> 00:56:59.240
<v Speaker 0>Yeah. That's just a fail of it. Didn't

00:56:59.240 --> 00:57:01.320
<v Speaker 0>really that's the value fail. Okay. Yeah. We

00:57:01.320 --> 00:57:02.200
<v Speaker 0>can ignore that.

00:57:02.680 --> 00:57:03.000
<v Speaker 0>Alright.

00:57:05.165 --> 00:57:05.805
<v Speaker 0>So

00:57:06.605 --> 00:57:08.045
<v Speaker 0>we have another question. I'll come back to

00:57:08.045 --> 00:57:09.244
<v Speaker 0>that in a second. Let's get any setup

00:57:09.244 --> 00:57:11.165
<v Speaker 0>we need done for external metrics.

00:57:11.244 --> 00:57:11.805
<v Speaker 0>So

00:57:13.325 --> 00:57:14.845
<v Speaker 0>you kinda covered us what we were describing

00:57:14.845 --> 00:57:16.285
<v Speaker 0>custom metrics. So

00:57:16.765 --> 00:57:18.525
<v Speaker 0>we got resource metrics which come

00:57:18.950 --> 00:57:21.430
<v Speaker 0>from the the node on a cluster. We

00:57:21.430 --> 00:57:23.430
<v Speaker 0>got a custom metrics which are exposed or

00:57:23.430 --> 00:57:26.630
<v Speaker 0>metrics that we can associate with Kubernetes objects.

00:57:26.950 --> 00:57:30.390
<v Speaker 0>And then external metrics could be anything that

00:57:30.390 --> 00:57:32.309
<v Speaker 0>we want. Okay. Yes. It could it could

00:57:32.309 --> 00:57:33.109
<v Speaker 0>be pulling

00:57:33.995 --> 00:57:37.835
<v Speaker 0>how many domains and and dd146.com

00:57:37.835 --> 00:57:39.275
<v Speaker 0>or whatever. Right? Like, it could be just

00:57:39.355 --> 00:57:41.275
<v Speaker 0>Yep. That was a horrible example, but the

00:57:41.275 --> 00:57:43.275
<v Speaker 0>first thing I my head. It could be

00:57:43.275 --> 00:57:44.875
<v Speaker 0>any arbitrary information. We could just have it

00:57:44.875 --> 00:57:46.475
<v Speaker 0>count the number of tweets on my profile

00:57:46.475 --> 00:57:48.235
<v Speaker 0>in the last hour or something. Right.

00:57:49.590 --> 00:57:51.110
<v Speaker 0>That was a slightly better example of the

00:57:51.110 --> 00:57:51.990
<v Speaker 0>the terrible.

00:57:52.230 --> 00:57:52.870
<v Speaker 0>And

00:57:53.350 --> 00:57:54.230
<v Speaker 0>to do this,

00:57:54.630 --> 00:57:56.470
<v Speaker 0>what you want to do based on what

00:57:56.470 --> 00:57:58.550
<v Speaker 0>I see here is we're gonna deploy RabbitMQ

00:57:58.550 --> 00:58:00.630
<v Speaker 0>and then start throwing messages at a topic

00:58:00.630 --> 00:58:02.470
<v Speaker 0>and then use that as a skill factor.

00:58:02.550 --> 00:58:02.870
<v Speaker 0>Yeah.

00:58:03.585 --> 00:58:07.105
<v Speaker 0>Awesome. Alright. Let's get this running then.

00:58:07.744 --> 00:58:09.505
<v Speaker 0>Is rabbit m q gonna try and get

00:58:09.505 --> 00:58:10.065
<v Speaker 0>persistence?

00:58:16.710 --> 00:58:18.470
<v Speaker 0>We are doing it. I wouldn't want to

00:58:18.470 --> 00:58:19.270
<v Speaker 1>stay.

00:58:21.110 --> 00:58:21.910
<v Speaker 0>Ending.

00:58:22.070 --> 00:58:24.950
<v Speaker 0>Alright. Let's that's a staple set this time.

00:58:26.230 --> 00:58:26.550
<v Speaker 0>Alright. Robert.

00:58:30.724 --> 00:58:31.204
<v Speaker 0>And

00:58:32.484 --> 00:58:35.445
<v Speaker 0>claim. Oh, it's got template and and everything.

00:58:36.484 --> 00:58:38.005
<v Speaker 0>Alright. Let's pull up the chart.

00:58:46.140 --> 00:58:48.300
<v Speaker 0>That's annoying. Okay. The

00:58:49.740 --> 00:58:52.460
<v Speaker 0>colon q exclamation mark doesn't shut down everything.

00:58:52.460 --> 00:58:52.700
<v Speaker 0>Anyway,

00:58:54.234 --> 00:58:56.474
<v Speaker 0>this chart was okay. So it's a bit

00:58:56.474 --> 00:58:58.795
<v Speaker 0>nami the bit nami charts are a pain.

00:59:00.714 --> 00:59:03.275
<v Speaker 0>Because I could never find the example values

00:59:03.355 --> 00:59:04.075
<v Speaker 0>then.

00:59:05.595 --> 00:59:06.635
<v Speaker 1>Persistence

00:59:06.635 --> 00:59:08.075
<v Speaker 1>enabled

00:59:07.650 --> 00:59:10.930
<v Speaker 1>persistence dot enabled equals false, I think, should

00:59:10.930 --> 00:59:11.570
<v Speaker 1>do it.

00:59:11.970 --> 00:59:12.849
<v Speaker 0>Alright.

00:59:14.289 --> 00:59:15.010
<v Speaker 0>So

00:59:18.609 --> 00:59:19.010
<v Speaker 0>alright.

00:59:19.885 --> 00:59:20.765
<v Speaker 0>Upgrade.

00:59:21.165 --> 00:59:22.845
<v Speaker 0>RabbitMQ.

00:59:23.245 --> 00:59:24.845
<v Speaker 0>Reuse values.

00:59:29.485 --> 00:59:31.485
<v Speaker 0>Set okay. One more time, please.

00:59:32.125 --> 00:59:33.405
<v Speaker 1>Persistence

00:59:34.690 --> 00:59:38.530
<v Speaker 1>dot enabled equals false. Okay. Alright. Okay.

00:59:39.010 --> 00:59:41.090
<v Speaker 0>Alright. Let's give that a second. Couple more

00:59:41.090 --> 00:59:41.730
<v Speaker 0>questions,

00:59:41.890 --> 00:59:45.330
<v Speaker 0>comments. So Andrea says, super interesting topic. What's

00:59:45.330 --> 00:59:47.330
<v Speaker 0>your take on AWS Carpenter?

00:59:47.810 --> 00:59:49.090
<v Speaker 0>Do you wanna go first or second?

00:59:52.075 --> 00:59:53.835
<v Speaker 1>I I I will go second.

00:59:54.395 --> 00:59:54.875
<v Speaker 1>I

00:59:55.434 --> 00:59:57.355
<v Speaker 0>think AWS Carpenter is

00:59:58.795 --> 01:00:00.555
<v Speaker 0>firstly, really good and amazing.

01:00:01.115 --> 01:00:03.035
<v Speaker 0>What I find frustrating is the fact that

01:00:03.035 --> 01:00:05.940
<v Speaker 0>we tried to do no doubt was scaling

01:00:06.580 --> 01:00:08.100
<v Speaker 0>based on unschedulable

01:00:08.100 --> 01:00:08.980
<v Speaker 0>pods.

01:00:08.980 --> 01:00:10.740
<v Speaker 0>I think that was a

01:00:11.220 --> 01:00:12.500
<v Speaker 0>I mean, it's not wrong.

01:00:12.740 --> 01:00:14.740
<v Speaker 0>Worked for a while, but you know, using

01:00:14.740 --> 01:00:17.780
<v Speaker 0>actual metrics and calculating your applications health and

01:00:17.780 --> 01:00:19.845
<v Speaker 0>let's say and understanding or using all these

01:00:19.845 --> 01:00:22.005
<v Speaker 0>other metrics to do node auto scaling. I

01:00:22.005 --> 01:00:24.085
<v Speaker 0>think it's a much wiser solution. So I'm

01:00:24.085 --> 01:00:26.325
<v Speaker 0>really excited to see that come out.

01:00:27.925 --> 01:00:31.045
<v Speaker 0>K? Yeah. I I I agree. I think

01:00:31.445 --> 01:00:32.645
<v Speaker 1>I agree for the most part.

01:00:33.510 --> 01:00:34.310
<v Speaker 0>And I think,

01:00:34.790 --> 01:00:37.990
<v Speaker 1>like, there's there's there are historical reasons why

01:00:37.990 --> 01:00:39.270
<v Speaker 1>the cluster autoscaler,

01:00:39.270 --> 01:00:41.910
<v Speaker 1>which is owned by, like, auto scaling, uses

01:00:42.150 --> 01:00:43.910
<v Speaker 1>pending pods as its signal.

01:00:45.095 --> 01:00:48.135
<v Speaker 1>And there are I mean, there's there's, like,

01:00:48.135 --> 01:00:50.775
<v Speaker 1>there are shortcomings to it, obviously. Like, there's

01:00:50.775 --> 01:00:52.855
<v Speaker 1>there's the fact that you can't really have

01:00:52.855 --> 01:00:56.535
<v Speaker 1>much headroom aside from using, like, hacking peanuts

01:00:56.535 --> 01:00:59.010
<v Speaker 1>pods to, like with the that are low

01:00:59.010 --> 01:01:01.490
<v Speaker 1>priority and get chucked away when high priority

01:01:01.490 --> 01:01:02.450
<v Speaker 1>pods scale.

01:01:02.690 --> 01:01:04.370
<v Speaker 1>I'm

01:01:05.810 --> 01:01:09.090
<v Speaker 1>I'm really interested in, like, the the design

01:01:09.090 --> 01:01:10.930
<v Speaker 1>of it and how they're potentially aiming to

01:01:10.930 --> 01:01:12.930
<v Speaker 1>basically be able to scale anything,

01:01:13.375 --> 01:01:15.935
<v Speaker 1>any anything which has a scale target

01:01:16.975 --> 01:01:17.935
<v Speaker 1>implementation.

01:01:20.655 --> 01:01:21.295
<v Speaker 1>That

01:01:21.455 --> 01:01:23.295
<v Speaker 1>that sounds like it's got a lot of

01:01:23.295 --> 01:01:23.935
<v Speaker 1>promise

01:01:24.415 --> 01:01:26.495
<v Speaker 1>for us at Skyscanner, but the ability to

01:01:26.495 --> 01:01:29.890
<v Speaker 1>scale on any arbitrary CloudWatch metrics and metric

01:01:30.050 --> 01:01:31.330
<v Speaker 1>would be cool.

01:01:32.130 --> 01:01:34.370
<v Speaker 1>I'm yeah. I'm I'm I'm

01:01:34.370 --> 01:01:37.490
<v Speaker 1>having some conversations with the web maintainers. They've

01:01:37.490 --> 01:01:38.930
<v Speaker 1>got office hours

01:01:39.730 --> 01:01:40.690
<v Speaker 1>starting

01:01:40.850 --> 01:01:43.010
<v Speaker 1>from January on

01:01:43.635 --> 01:01:44.675
<v Speaker 1>Tuesday

01:01:45.155 --> 01:01:46.195
<v Speaker 1>evenings UK

01:01:46.515 --> 01:01:47.955
<v Speaker 1>well, European time.

01:01:48.515 --> 01:01:50.355
<v Speaker 1>Sort of morning, separate time.

01:01:50.675 --> 01:01:53.395
<v Speaker 1>I would encourage anyone who's interested to

01:01:53.395 --> 01:01:54.755
<v Speaker 1>come on and have a chat.

01:01:55.869 --> 01:01:56.990
<v Speaker 0>Yeah. So,

01:01:57.230 --> 01:01:58.910
<v Speaker 0>I mean, now that you've been a bit

01:01:58.910 --> 01:01:59.070
<v Speaker 0>more

01:02:00.910 --> 01:02:02.830
<v Speaker 0>a bit more conservative in your answer. Like,

01:02:02.830 --> 01:02:04.430
<v Speaker 0>I I don't think that it was wrong.

01:02:04.430 --> 01:02:06.109
<v Speaker 0>Like, we should never have done that approach.

01:02:06.109 --> 01:02:07.710
<v Speaker 0>I just mean that, you know, waiting until

01:02:07.710 --> 01:02:10.670
<v Speaker 0>something that's actually unscheduled before scaling can be

01:02:10.670 --> 01:02:12.805
<v Speaker 0>optimized. Like, we can try to use measures

01:02:12.805 --> 01:02:15.045
<v Speaker 0>to protect when and, you know, we don't

01:02:15.365 --> 01:02:16.885
<v Speaker 0>we we don't wanna failure. It depends how

01:02:16.885 --> 01:02:18.485
<v Speaker 0>quickly or how slow it is to add

01:02:18.485 --> 01:02:20.005
<v Speaker 0>those new notes to the note code. And

01:02:20.005 --> 01:02:21.525
<v Speaker 0>if that takes five minutes and we're waiting

01:02:21.525 --> 01:02:22.965
<v Speaker 0>till something is unschedulable,

01:02:22.965 --> 01:02:25.125
<v Speaker 0>you're talking potentially ten minutes before

01:02:26.040 --> 01:02:28.440
<v Speaker 0>you're in a position. And that makes me

01:02:28.440 --> 01:02:31.400
<v Speaker 0>uncomfortable. So I Yeah. That's I'm actually cool.

01:02:31.640 --> 01:02:33.720
<v Speaker 0>And I'm looking forward to seeing that and

01:02:33.720 --> 01:02:35.480
<v Speaker 0>adopt it and hopefully adapt it to other

01:02:35.480 --> 01:02:36.680
<v Speaker 0>cloud providers too.

01:02:37.560 --> 01:02:38.360
<v Speaker 0>Alright.

01:02:38.440 --> 01:02:39.800
<v Speaker 0>That persistence thing

01:02:40.725 --> 01:02:43.045
<v Speaker 0>did not help, unfortunately. Yeah.

01:02:44.645 --> 01:02:46.485
<v Speaker 0>Even though the flag does seem to be

01:02:46.485 --> 01:02:47.365
<v Speaker 0>correct,

01:02:47.605 --> 01:02:51.045
<v Speaker 0>we still have a persistent volume claim.

01:02:52.085 --> 01:02:54.725
<v Speaker 0>The volume mode is failed system.

01:03:01.290 --> 01:03:02.650
<v Speaker 0>That did not work.

01:03:03.290 --> 01:03:05.610
<v Speaker 0>Alright. That's oh, okay. I just need to

01:03:05.610 --> 01:03:06.730
<v Speaker 0>try and hack at it.

01:03:08.330 --> 01:03:09.290
<v Speaker 1>Sorry about this.

01:03:09.875 --> 01:03:11.954
<v Speaker 0>Oh, no. It's I I should give you

01:03:11.954 --> 01:03:14.434
<v Speaker 0>a fully working cluster instead. I don't I

01:03:14.434 --> 01:03:15.795
<v Speaker 0>cut corners. So

01:03:17.635 --> 01:03:19.875
<v Speaker 0>it was easier for me. Alright.

01:03:20.035 --> 01:03:21.555
<v Speaker 0>So where's this volume?

01:03:22.035 --> 01:03:23.875
<v Speaker 0>What was that called before I delete it?

01:03:25.580 --> 01:03:26.860
<v Speaker 0>Data. Okay.

01:03:28.220 --> 01:03:30.860
<v Speaker 0>So that's not the volume I need.

01:03:31.020 --> 01:03:32.460
<v Speaker 0>Volume notes here.

01:03:32.940 --> 01:03:34.380
<v Speaker 0>Yep. Name data.

01:03:35.900 --> 01:03:37.020
<v Speaker 0>Where's our volumes?

01:03:42.255 --> 01:03:44.175
<v Speaker 0>So

01:03:46.415 --> 01:03:47.135
<v Speaker 0>name,

01:03:47.935 --> 01:03:48.575
<v Speaker 0>beta.

01:03:49.935 --> 01:03:51.935
<v Speaker 0>If we can get this working this time,

01:03:51.935 --> 01:03:52.735
<v Speaker 0>temp,

01:03:52.815 --> 01:03:53.215
<v Speaker 0>rabbit.

01:03:57.810 --> 01:03:59.650
<v Speaker 0>I mean, that shouldn't have a permissions issue.

01:03:59.650 --> 01:04:01.329
<v Speaker 0>It's gonna be trust be that the directory

01:04:01.329 --> 01:04:04.450
<v Speaker 0>doesn't exist, isn't it? I think so. Yeah.

01:04:05.089 --> 01:04:05.890
<v Speaker 0>So

01:04:07.325 --> 01:04:08.925
<v Speaker 0>let's just do that.

01:04:09.644 --> 01:04:11.244
<v Speaker 0>And then I'll work out what they'll notice

01:04:11.244 --> 01:04:13.005
<v Speaker 0>on, and I'll SSHN.

01:04:13.325 --> 01:04:13.724
<v Speaker 1>It's

01:04:14.125 --> 01:04:15.325
<v Speaker 1>And create. Correct?

01:04:15.484 --> 01:04:17.164
<v Speaker 0>Oh, no. It did not it did not

01:04:17.164 --> 01:04:17.644
<v Speaker 0>like that.

01:04:23.460 --> 01:04:25.220
<v Speaker 1>Because updates are okay.

01:04:28.740 --> 01:04:31.060
<v Speaker 1>So is it maybe that we just tried

01:04:31.060 --> 01:04:32.260
<v Speaker 1>to update something that it

01:04:32.980 --> 01:04:34.820
<v Speaker 1>don't know how we should handle that. Right?

01:04:36.305 --> 01:04:38.145
<v Speaker 0>Let's try one more time.

01:04:39.905 --> 01:04:41.665
<v Speaker 0>Back.

01:04:41.825 --> 01:04:43.265
<v Speaker 0>Now let's just make sure that's just doing

01:04:43.265 --> 01:04:45.105
<v Speaker 0>what we expect. So if we did disable

01:04:45.105 --> 01:04:46.065
<v Speaker 0>persistence,

01:04:46.065 --> 01:04:48.065
<v Speaker 0>does it stop the PVC being created?

01:04:48.560 --> 01:04:50.240
<v Speaker 0>That's probably important.

01:04:52.320 --> 01:04:54.000
<v Speaker 1>Stateful set dot nano.

01:04:55.119 --> 01:04:55.920
<v Speaker 0>Yep.

01:05:00.640 --> 01:05:02.080
<v Speaker 0>That's it. And the container,

01:05:04.395 --> 01:05:05.275
<v Speaker 0>Volumes.

01:05:08.235 --> 01:05:10.955
<v Speaker 0>Okay. So yeah. We use an empty there

01:05:11.195 --> 01:05:13.355
<v Speaker 0>and it will not create anything.

01:05:13.755 --> 01:05:15.035
<v Speaker 0>So that should

01:05:15.435 --> 01:05:17.115
<v Speaker 0>it should be okay. Let's just assume it

01:05:17.115 --> 01:05:18.315
<v Speaker 0>was some

01:05:19.380 --> 01:05:20.660
<v Speaker 0>some issue.

01:05:22.819 --> 01:05:24.500
<v Speaker 0>There's my there's my way of clear. There's

01:05:24.500 --> 01:05:25.300
<v Speaker 0>some issue,

01:05:26.740 --> 01:05:28.579
<v Speaker 0>and we're not reusing the values this time.

01:05:28.579 --> 01:05:30.420
<v Speaker 0>Did you give me a values fail?

01:05:30.900 --> 01:05:31.299
<v Speaker 0>No.

01:05:31.955 --> 01:05:34.115
<v Speaker 0>So it's just all the default? Fair. Yeah.

01:05:34.115 --> 01:05:34.515
<v Speaker 1>Alright.

01:05:34.995 --> 01:05:35.715
<v Speaker 0>Let's see.

01:05:37.315 --> 01:05:39.395
<v Speaker 0>And we have another comment from Justin.

01:05:39.795 --> 01:05:42.515
<v Speaker 0>Nice example. Yeah. Well, I mean, it would

01:05:42.515 --> 01:05:44.755
<v Speaker 0>be a nice example, wouldn't it? Yeah. We'll

01:05:44.755 --> 01:05:46.115
<v Speaker 0>try it. We'll try.

01:05:47.910 --> 01:05:49.829
<v Speaker 0>There we go. Alright. So they have more

01:05:49.829 --> 01:05:51.270
<v Speaker 0>great than the handle

01:05:51.589 --> 01:05:53.110
<v Speaker 0>disabling the persistence.

01:05:53.910 --> 01:05:55.030
<v Speaker 1>Less than slack.

01:05:55.589 --> 01:05:57.910
<v Speaker 0>Yeah. So this is fun. I like it

01:05:57.910 --> 01:05:58.950
<v Speaker 0>when things go wrong.

01:05:59.270 --> 01:06:01.455
<v Speaker 0>Just because you you kinda get to challenge

01:06:01.455 --> 01:06:02.975
<v Speaker 0>some of the assumptions you made, and then

01:06:02.975 --> 01:06:05.135
<v Speaker 0>I think, hopefully, that's useful to some people.

01:06:05.135 --> 01:06:07.215
<v Speaker 0>So, you know, we'll see. Yep. Alright. So

01:06:07.215 --> 01:06:08.975
<v Speaker 0>we now have a rabbit in queue, then

01:06:08.975 --> 01:06:10.575
<v Speaker 0>we want to deploy publisher

01:06:10.975 --> 01:06:13.215
<v Speaker 0>to this. So let me fix my pass.

01:06:16.670 --> 01:06:19.070
<v Speaker 0>This is case three.

01:06:22.030 --> 01:06:23.390
<v Speaker 0>And we

01:06:23.390 --> 01:06:26.110
<v Speaker 0>are going to upgrade our adapter

01:06:26.750 --> 01:06:28.190
<v Speaker 0>with our new values fail.

01:06:28.765 --> 01:06:29.405
<v Speaker 1>Yep.

01:06:29.645 --> 01:06:31.645
<v Speaker 0>Have you tested the Hemopgrade on this?

01:06:33.005 --> 01:06:33.725
<v Speaker 1>Yes.

01:06:34.285 --> 01:06:35.885
<v Speaker 1>Yes. That's one I got.

01:06:38.765 --> 01:06:39.885
<v Speaker 0>Alright. Prometheus.

01:06:48.940 --> 01:06:50.700
<v Speaker 0>K. So now we have to wait.

01:06:51.020 --> 01:06:52.940
<v Speaker 0>Well, that collects some more metrics. What we

01:06:52.940 --> 01:06:55.420
<v Speaker 0>should see from our API services then is

01:06:55.420 --> 01:06:58.700
<v Speaker 0>that we have something new registered for custom

01:06:58.205 --> 01:06:58.925
<v Speaker 0>external

01:06:59.085 --> 01:06:59.965
<v Speaker 0>metrics. There

01:07:06.845 --> 01:07:08.205
<v Speaker 0>we go. Yep.

01:07:10.365 --> 01:07:12.845
<v Speaker 0>Field discovery check. I'm assuming

01:07:13.089 --> 01:07:15.329
<v Speaker 0>it's just not healthy yet since they haven't

01:07:15.329 --> 01:07:15.890
<v Speaker 0>updated. I

01:07:16.369 --> 01:07:19.170
<v Speaker 1>guess not. It's probably done the registration

01:07:20.369 --> 01:07:23.089
<v Speaker 1>and then not not updated itself and said

01:07:23.089 --> 01:07:26.050
<v Speaker 1>I'm serving these. Yeah. That's only thirty seconds.

01:07:26.050 --> 01:07:27.650
<v Speaker 0>That's not Yeah. It's not part of the

01:07:27.650 --> 01:07:29.865
<v Speaker 0>readiness appropriate. So let's give that at least

01:07:29.865 --> 01:07:31.545
<v Speaker 0>a faint chance. There we go.

01:07:32.585 --> 01:07:34.105
<v Speaker 0>And grab for external.

01:07:37.545 --> 01:07:39.625
<v Speaker 0>Much better. There we go. That looks good.

01:07:39.625 --> 01:07:40.505
<v Speaker 0>We now have

01:07:40.920 --> 01:07:42.360
<v Speaker 0>external metrics.

01:07:42.520 --> 01:07:44.599
<v Speaker 0>And what we're gonna do is take a

01:07:44.599 --> 01:07:47.400
<v Speaker 0>look at the value of our rabbit and

01:07:47.400 --> 01:07:48.120
<v Speaker 0>cure.

01:07:49.800 --> 01:07:51.000
<v Speaker 0>Yeah.

01:07:51.160 --> 01:07:53.319
<v Speaker 0>Not available yet. So that now may just

01:07:53.319 --> 01:07:55.560
<v Speaker 0>be the thirty second delay from the previous

01:07:55.560 --> 01:07:56.200
<v Speaker 0>script interval.

01:07:57.135 --> 01:07:59.535
<v Speaker 1>And it'll also there's also then another lag

01:07:59.535 --> 01:08:02.415
<v Speaker 1>introduced because, effectively, the the way the Prometheus

01:08:02.415 --> 01:08:05.695
<v Speaker 1>adapter works is it's rather than doing ad

01:08:05.695 --> 01:08:08.335
<v Speaker 1>hoc queries when you create it. It's instead

01:08:08.335 --> 01:08:09.535
<v Speaker 1>doing discovery

01:08:09.535 --> 01:08:12.095
<v Speaker 1>of the series against the Prometheus

01:08:12.470 --> 01:08:14.630
<v Speaker 1>and telling the API server, these are the

01:08:14.630 --> 01:08:16.790
<v Speaker 1>ones I know about. You can create a

01:08:16.790 --> 01:08:17.909
<v Speaker 1>need for this.

01:08:23.189 --> 01:08:24.710
<v Speaker 0>Oh, you got a joke or something?

01:08:31.354 --> 01:08:32.234
<v Speaker 0>Okay.

01:08:32.395 --> 01:08:34.234
<v Speaker 0>So let's let's make sure I because I

01:08:34.234 --> 01:08:35.755
<v Speaker 0>I don't think I understood everything you said

01:08:35.755 --> 01:08:38.955
<v Speaker 0>there. Okay. So we upgraded the Prometheus adapter.

01:08:39.194 --> 01:08:40.555
<v Speaker 0>Let's take a look at the values that

01:08:40.555 --> 01:08:43.069
<v Speaker 0>we've we've modified there then. Let's see what's

01:08:43.069 --> 01:08:44.029
<v Speaker 0>changed. So

01:08:45.630 --> 01:08:48.189
<v Speaker 0>style of the Prometheus thing. Okay. We've added

01:08:48.189 --> 01:08:49.469
<v Speaker 0>our extra.

01:08:50.429 --> 01:08:52.510
<v Speaker 0>Yeah. That's the old one. Right? Yeah. Yeah.

01:08:52.510 --> 01:08:54.029
<v Speaker 1>That's exactly the same as the old one.

01:08:54.354 --> 01:08:55.954
<v Speaker 0>Okay. And then so we've added this new

01:08:55.954 --> 01:08:57.314
<v Speaker 0>external section,

01:08:57.554 --> 01:08:59.474
<v Speaker 0>which has got a new series

01:09:00.675 --> 01:09:02.354
<v Speaker 0>for hand okay. So this is just fetching

01:09:02.354 --> 01:09:04.194
<v Speaker 0>queue lamp size and messages.

01:09:04.514 --> 01:09:05.074
<v Speaker 1>Yeah.

01:09:06.435 --> 01:09:08.835
<v Speaker 0>We're seeing this applies to

01:09:09.729 --> 01:09:11.570
<v Speaker 0>I don't wanna guess. Why don't you you

01:09:11.570 --> 01:09:12.770
<v Speaker 0>walk through this? So

01:09:14.210 --> 01:09:16.210
<v Speaker 1>one one of the things that I mentioned

01:09:16.210 --> 01:09:16.850
<v Speaker 1>before

01:09:17.649 --> 01:09:18.609
<v Speaker 1>is that

01:09:18.930 --> 01:09:20.130
<v Speaker 1>the Kubernetes

01:09:20.130 --> 01:09:22.689
<v Speaker 1>API server is making these requests at at

01:09:22.930 --> 01:09:25.215
<v Speaker 1>sorry. The API originally

01:09:25.215 --> 01:09:27.054
<v Speaker 1>is making these requests through the API and

01:09:27.054 --> 01:09:29.614
<v Speaker 1>then again, proxy. They're made in a really

01:09:29.774 --> 01:09:31.135
<v Speaker 1>specific pattern.

01:09:32.014 --> 01:09:33.614
<v Speaker 1>So if you jump back to the the

01:09:33.614 --> 01:09:35.534
<v Speaker 1>query that wasn't working, I guess, the the

01:09:35.534 --> 01:09:36.495
<v Speaker 1>kubectl get raw.

01:09:40.399 --> 01:09:41.600
<v Speaker 1>You can see

01:09:42.240 --> 01:09:44.800
<v Speaker 1>we'll figure it Why that's not working? You

01:09:44.800 --> 01:09:46.640
<v Speaker 1>can see that it's making this call to

01:09:46.640 --> 01:09:48.479
<v Speaker 1>external.metrics.hsio,

01:09:48.479 --> 01:09:49.920
<v Speaker 1>then an API version.

01:09:50.560 --> 01:09:53.040
<v Speaker 1>That's fine. And then namespaces,

01:09:53.200 --> 01:09:55.440
<v Speaker 1>then a namespace name, and then

01:09:55.975 --> 01:09:57.335
<v Speaker 1>the metric.

01:09:59.415 --> 01:10:01.095
<v Speaker 1>So if we then

01:10:01.895 --> 01:10:03.255
<v Speaker 1>jump back to the

01:10:04.375 --> 01:10:05.975
<v Speaker 1>written up config,

01:10:06.295 --> 01:10:08.935
<v Speaker 1>what we're saying here is that this series

01:10:09.015 --> 01:10:10.535
<v Speaker 1>actually has a label

01:10:10.775 --> 01:10:12.429
<v Speaker 1>called Kubernetes

01:10:12.429 --> 01:10:13.230
<v Speaker 1>namespace.

01:10:13.230 --> 01:10:15.629
<v Speaker 1>So if you scroll a bit further right.

01:10:18.110 --> 01:10:20.590
<v Speaker 1>Yeah. So we've got a label on this

01:10:20.590 --> 01:10:22.429
<v Speaker 1>metric called Kubernetes namespace.

01:10:22.510 --> 01:10:23.869
<v Speaker 1>And what we need to do is map

01:10:23.869 --> 01:10:24.925
<v Speaker 1>that into

01:10:25.325 --> 01:10:27.325
<v Speaker 1>make sure that that

01:10:28.765 --> 01:10:31.645
<v Speaker 1>metric is served up under the path that

01:10:31.885 --> 01:10:34.845
<v Speaker 1>Kubernetes is creating on. So in this case,

01:10:34.845 --> 01:10:36.685
<v Speaker 1>we're saying use the value

01:10:36.925 --> 01:10:40.030
<v Speaker 1>of the label Kubernetes namespace, and actually that

01:10:40.030 --> 01:10:41.869
<v Speaker 1>becomes the resource

01:10:43.230 --> 01:10:44.349
<v Speaker 1>namespace

01:10:44.590 --> 01:10:45.390
<v Speaker 1>label

01:10:45.390 --> 01:10:49.630
<v Speaker 1>when the HPA is querying for it. There's

01:10:49.630 --> 01:10:50.269
<v Speaker 1>also

01:10:50.830 --> 01:10:52.830
<v Speaker 1>if it was a pod specific metric, you

01:10:52.830 --> 01:10:55.185
<v Speaker 1>might also need to or you might want

01:10:55.185 --> 01:10:57.265
<v Speaker 1>to basically use the value of a different

01:10:57.265 --> 01:10:58.945
<v Speaker 1>label as the pod

01:10:59.505 --> 01:11:01.105
<v Speaker 1>metric. So when we were doing the custom

01:11:01.105 --> 01:11:01.905
<v Speaker 1>metrics

01:11:02.465 --> 01:11:03.185
<v Speaker 1>example,

01:11:03.345 --> 01:11:05.905
<v Speaker 1>you can you can actually query for a

01:11:05.905 --> 01:11:07.185
<v Speaker 1>specific pods

01:11:07.450 --> 01:11:08.730
<v Speaker 1>use of

01:11:10.570 --> 01:11:12.730
<v Speaker 1>value for a metric. So you can basically

01:11:12.730 --> 01:11:15.530
<v Speaker 1>map that label value into, say, this is

01:11:15.530 --> 01:11:17.770
<v Speaker 1>the pod name even even if it's some

01:11:17.770 --> 01:11:20.090
<v Speaker 1>weird label because of the way you're exposing

01:11:20.090 --> 01:11:20.730
<v Speaker 1>it somehow.

01:11:22.655 --> 01:11:23.775
<v Speaker 0>Cool. Okay.

01:11:24.655 --> 01:11:25.295
<v Speaker 0>So

01:11:26.335 --> 01:11:28.495
<v Speaker 0>we probably wanna work out

01:11:29.055 --> 01:11:30.255
<v Speaker 0>this. Yep.

01:11:31.055 --> 01:11:33.135
<v Speaker 1>First things first, let's see if the metric

01:11:33.135 --> 01:11:34.735
<v Speaker 1>is getting into

01:11:34.735 --> 01:11:35.455
<v Speaker 1>Prometheus.

01:11:36.640 --> 01:11:38.480
<v Speaker 0>I thought the same.

01:11:38.880 --> 01:11:39.679
<v Speaker 0>Great. Thanks.

01:11:40.720 --> 01:11:42.880
<v Speaker 0>Oh, yours is great. Mine is alright.

01:11:45.440 --> 01:11:47.680
<v Speaker 1>I wouldn't say that. I just I'm just

01:11:47.920 --> 01:11:50.800
<v Speaker 1>yeah. We were put forward into service before

01:11:50.800 --> 01:11:51.120
<v Speaker 1>the time.

01:11:52.515 --> 01:11:55.715
<v Speaker 0>And it's still here. So let's refresh. And

01:11:55.715 --> 01:11:57.395
<v Speaker 0>what we wanna see is do we have

01:11:57.555 --> 01:12:00.755
<v Speaker 0>oh, we do not. Nope. So let's jump

01:12:00.755 --> 01:12:03.235
<v Speaker 1>to the status targets

01:12:04.480 --> 01:12:06.000
<v Speaker 1>on the Prometheus.

01:12:06.480 --> 01:12:07.120
<v Speaker 0>Okay.

01:12:07.440 --> 01:12:09.679
<v Speaker 1>Does it even know about the targets?

01:12:12.160 --> 01:12:13.920
<v Speaker 1>So if you search for rabbit

01:12:16.824 --> 01:12:17.945
<v Speaker 0>It is

01:12:19.864 --> 01:12:21.465
<v Speaker 0>deadline exceeded.

01:12:21.625 --> 01:12:24.425
<v Speaker 0>Alright. Let let's try that then. So

01:12:25.864 --> 01:12:27.304
<v Speaker 0>let's get pods.

01:12:28.744 --> 01:12:30.025
<v Speaker 0>Port forward.

01:12:32.000 --> 01:12:34.559
<v Speaker 0>Grab it. What port was that on?

01:12:35.280 --> 01:12:36.640
<v Speaker 0>9419.

01:12:53.545 --> 01:12:54.985
<v Speaker 0>Okay. No.

01:12:55.304 --> 01:12:58.505
<v Speaker 1>No. It doesn't look healthy. Okay. Oh, well,

01:12:58.505 --> 01:13:00.640
<v Speaker 0>yeah. That's just actually so it does say

01:13:00.640 --> 01:13:03.120
<v Speaker 0>running. Right? Yeah. Okay. Let's take a look.

01:13:03.120 --> 01:13:03.520
<v Speaker 0>Is

01:13:06.560 --> 01:13:08.000
<v Speaker 0>that port number correct?

01:13:12.720 --> 01:13:13.920
<v Speaker 0>1439?

01:13:15.455 --> 01:13:17.534
<v Speaker 1>Red name. Oh,

01:13:17.855 --> 01:13:19.695
<v Speaker 0>wait. Something this is an error message.

01:13:21.295 --> 01:13:22.574
<v Speaker 0>Readiness probe.

01:13:23.215 --> 01:13:24.815
<v Speaker 1>Unable to oh.

01:13:28.175 --> 01:13:29.695
<v Speaker 1>Might this be

01:13:34.790 --> 01:13:37.429
<v Speaker 1>how how how good is the headless service

01:13:37.429 --> 01:13:38.389
<v Speaker 1>support in?

01:13:40.390 --> 01:13:42.870
<v Speaker 0>Yeah. It should work. Let's let's check.

01:13:44.625 --> 01:13:45.905
<v Speaker 0>We've got endpoints.

01:13:53.264 --> 01:13:54.544
<v Speaker 0>Yeah. That looks okay.

01:13:54.945 --> 01:13:55.344
<v Speaker 1>Yeah.

01:14:03.770 --> 01:14:05.290
<v Speaker 0>Okay.

01:14:09.690 --> 01:14:11.155
<v Speaker 0>Let's describe

01:14:11.155 --> 01:14:13.155
<v Speaker 0>pods. We'll try a couple of things. We

01:14:13.155 --> 01:14:15.474
<v Speaker 0>can always jump on to the VPA and

01:14:16.195 --> 01:14:17.795
<v Speaker 0>come back down. So

01:14:18.034 --> 01:14:20.114
<v Speaker 0>what is this actually telling us?

01:14:21.875 --> 01:14:23.554
<v Speaker 0>So it's trying to speak

01:14:25.670 --> 01:14:26.469
<v Speaker 0>to

01:14:27.510 --> 01:14:29.270
<v Speaker 0>okay. So the actually, the service name is

01:14:29.270 --> 01:14:31.110
<v Speaker 0>supposed to be RabbitMQ headless.

01:14:34.230 --> 01:14:35.910
<v Speaker 0>So looks good. Okay. Yeah.

01:14:37.745 --> 01:14:39.185
<v Speaker 0>It's got endpoints.

01:14:41.185 --> 01:14:44.385
<v Speaker 0>I mean, both those services actually look headless.

01:14:44.385 --> 01:14:44.784
<v Speaker 0>But

01:14:47.505 --> 01:14:47.905
<v Speaker 0>okay.

01:14:51.320 --> 01:14:54.280
<v Speaker 0>Let's see. Node rabbit not running at all.

01:14:55.480 --> 01:14:56.280
<v Speaker 1>Nothing.

01:14:56.280 --> 01:14:56.760
<v Speaker 1>So

01:14:57.400 --> 01:14:59.000
<v Speaker 1>suggestion start the node.

01:15:03.080 --> 01:15:03.800
<v Speaker 0>I mean,

01:15:04.360 --> 01:15:06.125
<v Speaker 0>the we we fax everything as to delete

01:15:06.125 --> 01:15:07.085
<v Speaker 0>the pod. Right?

01:15:08.925 --> 01:15:10.845
<v Speaker 1>For for if we if we had to

01:15:10.845 --> 01:15:13.165
<v Speaker 1>look at the full logs or are those

01:15:13.405 --> 01:15:14.525
<v Speaker 0>Oh, we don't even look at the logs

01:15:14.525 --> 01:15:15.165
<v Speaker 0>now. Now.

01:15:17.330 --> 01:15:18.290
<v Speaker 0>Looks good.

01:15:20.370 --> 01:15:21.010
<v Speaker 0>Yeah.

01:15:21.410 --> 01:15:22.690
<v Speaker 0>Are those events old?

01:15:36.885 --> 01:15:38.244
<v Speaker 0>Where's the probes?

01:15:42.405 --> 01:15:45.844
<v Speaker 1>Did we did we make mistake of of

01:15:45.230 --> 01:15:47.949
<v Speaker 1>trying to upgrade rather than reinstalling from scratch?

01:15:49.550 --> 01:15:51.710
<v Speaker 0>Again I I it. Okay. Those are answer

01:15:51.710 --> 01:15:53.710
<v Speaker 0>old. I think it is healthy now.

01:15:55.230 --> 01:15:55.870
<v Speaker 1>And yet?

01:15:58.745 --> 01:15:59.864
<v Speaker 0>I don't know.

01:16:02.105 --> 01:16:03.785
<v Speaker 0>Take a look at this. What do we

01:16:03.785 --> 01:16:05.465
<v Speaker 0>got? Where's the ports?

01:16:07.065 --> 01:16:07.945
<v Speaker 0>Alright.

01:16:08.345 --> 01:16:10.265
<v Speaker 0>Nine four one nine is the metrics.

01:16:12.910 --> 01:16:13.710
<v Speaker 0>K.

01:16:14.190 --> 01:16:15.469
<v Speaker 0>Let's put forward

01:16:16.030 --> 01:16:17.550
<v Speaker 0>in four one nine.

01:16:17.790 --> 01:16:19.870
<v Speaker 0>I'm not I'm not making a mistake there.

01:16:19.870 --> 01:16:22.190
<v Speaker 0>Like, that's right. Isn't it? Nine four Yeah.

01:16:24.910 --> 01:16:26.910
<v Speaker 0>Nine four one nine

01:16:29.985 --> 01:16:30.784
<v Speaker 1>metrics.

01:16:34.705 --> 01:16:36.545
<v Speaker 0>I'm gonna delete the pod, and then we'll

01:16:36.545 --> 01:16:38.545
<v Speaker 0>see if those events disappear. And then we'll

01:16:38.545 --> 01:16:40.705
<v Speaker 0>come we'll do the VPA, and then depending

01:16:40.705 --> 01:16:42.385
<v Speaker 0>on how we're looking for time, we may

01:16:42.385 --> 01:16:43.960
<v Speaker 0>look back. So Yep.

01:16:44.600 --> 01:16:46.120
<v Speaker 0>And I'm sure if you and if you

01:16:46.120 --> 01:16:48.040
<v Speaker 0>wanna try this in your own time, it

01:16:48.760 --> 01:16:51.320
<v Speaker 0>it works in kind and potentially

01:16:51.320 --> 01:16:53.560
<v Speaker 0>something to do with the changes we're making

01:16:53.560 --> 01:16:54.600
<v Speaker 0>live. So we'll see.

01:16:56.045 --> 01:16:57.565
<v Speaker 1>I mean, it wouldn't it wouldn't be the

01:16:57.565 --> 01:17:01.085
<v Speaker 1>live demo without something failing properly hard.

01:17:04.365 --> 01:17:05.405
<v Speaker 0>Maybe better now.

01:17:08.420 --> 01:17:10.260
<v Speaker 0>Let's try that again.

01:17:12.340 --> 01:17:14.659
<v Speaker 0>The response is probably better.

01:17:15.780 --> 01:17:16.020
<v Speaker 1>Yeah.

01:17:22.435 --> 01:17:24.755
<v Speaker 1>Eric. That is not healthy. Yeah.

01:17:27.395 --> 01:17:28.115
<v Speaker 0>Bugs

01:17:28.595 --> 01:17:29.395
<v Speaker 0>starting.

01:17:30.995 --> 01:17:31.635
<v Speaker 0>K.

01:17:32.115 --> 01:17:33.875
<v Speaker 0>Last chance, rabbit. Come on.

01:17:37.369 --> 01:17:39.369
<v Speaker 0>You can have used gnats. No?

01:17:40.010 --> 01:17:40.889
<v Speaker 1>I've

01:17:42.170 --> 01:17:44.489
<v Speaker 1>I thought Rabbit was the easy price.

01:17:47.210 --> 01:17:49.610
<v Speaker 0>I've never really had much problems with Rabbit

01:17:49.610 --> 01:17:51.624
<v Speaker 0>in the past, to be fair. So

01:17:52.744 --> 01:17:54.264
<v Speaker 0>alright. Let's go on to the VP. We'll

01:17:54.264 --> 01:17:56.505
<v Speaker 0>come back to Rabbit. Okay. Yeah. Alright.

01:17:56.665 --> 01:17:58.344
<v Speaker 0>Okay. So let's see what we got over

01:17:58.344 --> 01:17:58.824
<v Speaker 0>here then.

01:18:04.760 --> 01:18:07.640
<v Speaker 0>Good comment there from Justin. Because we have

01:18:07.640 --> 01:18:10.440
<v Speaker 0>disabled persistent storage, it may struggle to initialize

01:18:10.440 --> 01:18:12.520
<v Speaker 0>the second time. I mean, they should start

01:18:12.520 --> 01:18:13.960
<v Speaker 0>from fresh, I hope.

01:18:14.440 --> 01:18:15.400
<v Speaker 0>But we'll definitely

01:18:15.845 --> 01:18:17.445
<v Speaker 0>try that. I may try him on install

01:18:17.445 --> 01:18:19.285
<v Speaker 0>and reinstall when we come back.

01:18:19.925 --> 01:18:21.605
<v Speaker 0>In fact, I'll just check one.

01:18:27.445 --> 01:18:29.045
<v Speaker 0>Should we delete it and then come back

01:18:29.045 --> 01:18:31.285
<v Speaker 0>to it? Or while Let us

01:18:31.600 --> 01:18:34.639
<v Speaker 1>delete and then come back to it. Alright.

01:18:37.520 --> 01:18:38.239
<v Speaker 0>Alright.

01:18:39.360 --> 01:18:41.040
<v Speaker 0>So persistence disabled.

01:18:41.040 --> 01:18:42.480
<v Speaker 0>Let's just leave that while we do the

01:18:42.480 --> 01:18:43.760
<v Speaker 0>VPN. K. Yeah.

01:18:44.925 --> 01:18:47.564
<v Speaker 0>So vertical part of scaling as we kinda

01:18:48.284 --> 01:18:50.204
<v Speaker 0>we just said to people horizontal means add

01:18:50.204 --> 01:18:52.445
<v Speaker 0>more of the thing. The vertical part of

01:18:52.445 --> 01:18:55.885
<v Speaker 0>scaling just means tweak those resource limits

01:18:55.885 --> 01:18:57.405
<v Speaker 0>that we have on our

01:18:57.980 --> 01:18:58.619
<v Speaker 0>objects.

01:18:59.100 --> 01:18:59.659
<v Speaker 0>Yeah.

01:19:00.380 --> 01:19:04.059
<v Speaker 0>We're using cowboys sis what's cowboys sis up?

01:19:05.500 --> 01:19:09.020
<v Speaker 1>It is I can't remember what who they're

01:19:09.020 --> 01:19:12.300
<v Speaker 1>tied to. It's a it's a set of

01:19:11.515 --> 01:19:12.954
<v Speaker 1>quite useful charts.

01:19:13.595 --> 01:19:14.715
<v Speaker 1>You can have a look at them on

01:19:14.715 --> 01:19:17.114
<v Speaker 1>our top so that there is some security

01:19:17.114 --> 01:19:18.235
<v Speaker 1>scanning, etcetera.

01:19:19.595 --> 01:19:21.915
<v Speaker 0>Alright. So we add that. We're gonna deploy

01:19:21.915 --> 01:19:24.155
<v Speaker 0>stress deploy from example four.

01:19:25.900 --> 01:19:27.100
<v Speaker 0>Stress

01:19:27.260 --> 01:19:28.060
<v Speaker 0>deploy.

01:19:28.380 --> 01:19:30.460
<v Speaker 1>And we'll we'll probably need to up the

01:19:30.460 --> 01:19:32.860
<v Speaker 1>memory again because this is a familiar one.

01:19:33.100 --> 01:19:34.220
<v Speaker 0>Alright. Okay.

01:19:35.180 --> 01:19:36.860
<v Speaker 0>Oh, it's okay. I don't know if that's

01:19:36.860 --> 01:19:39.260
<v Speaker 0>a auto scaler. I love that everything is

01:19:39.260 --> 01:19:41.020
<v Speaker 0>just going to this default in space.

01:19:43.955 --> 01:19:45.554
<v Speaker 0>Yeah. On Cal. Okay. So

01:19:47.155 --> 01:19:47.874
<v Speaker 0>it's

01:19:48.034 --> 01:19:49.235
<v Speaker 0>b p a.

01:19:51.635 --> 01:19:52.195
<v Speaker 0>Alright.

01:19:53.810 --> 01:19:55.410
<v Speaker 0>So what was it we said we needed

01:19:55.410 --> 01:19:57.170
<v Speaker 0>here? It was

01:19:59.570 --> 01:20:00.290
<v Speaker 0>I

01:20:00.370 --> 01:20:02.610
<v Speaker 0>I think it was, like, 270

01:20:02.610 --> 01:20:05.410
<v Speaker 1>gigs in that it said 270 megs, sorry,

01:20:05.410 --> 01:20:05.970
<v Speaker 1>in that one.

01:20:07.265 --> 01:20:08.864
<v Speaker 0>It was one gig time here.

01:20:09.265 --> 01:20:10.545
<v Speaker 1>One gig or so.

01:20:11.505 --> 01:20:12.465
<v Speaker 0>Okay.

01:20:15.425 --> 01:20:16.785
<v Speaker 0>Let's reapply

01:20:16.945 --> 01:20:18.304
<v Speaker 0>and deploy.

01:20:18.865 --> 01:20:20.625
<v Speaker 0>Any labels on these just to make it

01:20:20.625 --> 01:20:21.745
<v Speaker 0>feel or not a bit easier?

01:20:22.909 --> 01:20:24.189
<v Speaker 0>There's an app on.

01:20:25.310 --> 01:20:25.710
<v Speaker 0>Yeah.

01:20:38.565 --> 01:20:39.364
<v Speaker 0>Okay.

01:20:42.805 --> 01:20:43.844
<v Speaker 1>I may have

01:20:45.365 --> 01:20:48.165
<v Speaker 1>may have increased the the memory scaling on

01:20:48.165 --> 01:20:50.860
<v Speaker 1>that one from the previous example.

01:20:52.220 --> 01:20:52.940
<v Speaker 0>Let's go with

01:21:02.785 --> 01:21:05.264
<v Speaker 0>Yeah. It's happy. Okay. Cool.

01:21:06.625 --> 01:21:09.185
<v Speaker 1>And just check the CPU one as well.

01:21:12.385 --> 01:21:13.185
<v Speaker 0>Okay.

01:21:13.200 --> 01:21:15.360
<v Speaker 0>So let's bump that up. In fact, that'll

01:21:15.360 --> 01:21:17.040
<v Speaker 0>probably just be the CPU here one thing.

01:21:17.040 --> 01:21:18.480
<v Speaker 0>We actually we did bump that up in

01:21:18.480 --> 01:21:19.440
<v Speaker 0>the last one too.

01:21:21.360 --> 01:21:23.600
<v Speaker 0>But I don't wanna break your your actual

01:21:23.600 --> 01:21:25.840
<v Speaker 0>scaling of that. Yeah. We we can tweak

01:21:25.840 --> 01:21:26.880
<v Speaker 0>as we need. Yeah.

01:21:29.705 --> 01:21:31.625
<v Speaker 0>And that's now healthy.

01:21:31.785 --> 01:21:33.705
<v Speaker 0>Oh, it was healthy. Mhmm.

01:21:35.065 --> 01:21:36.105
<v Speaker 0>The on

01:21:43.480 --> 01:21:45.320
<v Speaker 0>Two. I don't know why I'm being so

01:21:45.320 --> 01:21:47.239
<v Speaker 0>specific with those numbers, but

01:21:48.840 --> 01:21:50.760
<v Speaker 0>and creating running

01:21:52.200 --> 01:21:53.400
<v Speaker 0>all code.

01:21:54.360 --> 01:21:56.040
<v Speaker 1>Let's let's start. Okay.

01:21:56.525 --> 01:21:59.565
<v Speaker 1>Cool. We did this. Let's actually see let's

01:21:59.565 --> 01:22:01.804
<v Speaker 0>try and get those limits down to close

01:22:01.804 --> 01:22:03.965
<v Speaker 0>so the VPA can actually do stuff, I

01:22:03.965 --> 01:22:05.084
<v Speaker 0>guess. Right? Yeah.

01:22:05.405 --> 01:22:06.925
<v Speaker 1>That would still be better.

01:22:07.244 --> 01:22:08.525
<v Speaker 0>So our CPU,

01:22:10.670 --> 01:22:12.350
<v Speaker 0>why was that being on kill just using

01:22:12.350 --> 01:22:13.150
<v Speaker 0>three meg?

01:22:14.030 --> 01:22:15.869
<v Speaker 1>I think I might have just been, like,

01:22:15.869 --> 01:22:17.949
<v Speaker 1>grabbing it before the poll it's like, once

01:22:17.949 --> 01:22:19.869
<v Speaker 1>the poll Oh, right. Started up. But, no,

01:22:19.869 --> 01:22:22.190
<v Speaker 1>I actually started going, I'm here to stress

01:22:22.190 --> 01:22:22.670
<v Speaker 1>your stuff.

01:22:23.755 --> 01:22:25.915
<v Speaker 0>Right. Right. Of course. I keep forgetting about

01:22:25.915 --> 01:22:29.115
<v Speaker 0>that delay. Right. So we we need 1,100

01:22:29.115 --> 01:22:33.355
<v Speaker 0>meg on memory and 80 on the CPU.

01:22:33.355 --> 01:22:34.875
<v Speaker 0>So let's do that first.

01:22:35.435 --> 01:22:37.435
<v Speaker 0>So we'll say request

01:22:38.380 --> 01:22:39.260
<v Speaker 0>80

01:22:40.860 --> 01:22:41.500
<v Speaker 0>memory.

01:22:44.380 --> 01:22:46.780
<v Speaker 0>1,100. So we know that's the baseline.

01:22:47.100 --> 01:22:49.340
<v Speaker 0>So the request will be our baseline.

01:22:49.739 --> 01:22:51.260
<v Speaker 0>Yep. And then we're gonna set some limits.

01:22:51.345 --> 01:22:54.785
<v Speaker 0>So we'll say 112

01:22:54.785 --> 01:22:56.785
<v Speaker 0>because we're being really stingy. So

01:22:57.905 --> 01:22:59.665
<v Speaker 0>we're not really giving it much wiggle room

01:22:59.665 --> 01:23:01.745
<v Speaker 0>there. Yeah. Now let's see if our CPU

01:23:01.745 --> 01:23:02.465
<v Speaker 0>run.

01:23:02.785 --> 01:23:04.545
<v Speaker 0>And there we go. Okay. So we want

01:23:04.400 --> 01:23:05.519
<v Speaker 0>800

01:23:05.679 --> 01:23:08.239
<v Speaker 0>meg cores and 30 meg.

01:23:09.280 --> 01:23:09.919
<v Speaker 0>So

01:23:11.760 --> 01:23:12.800
<v Speaker 0>800.

01:23:14.000 --> 01:23:15.679
<v Speaker 0>That's that's speaking on them. That's actually been

01:23:15.679 --> 01:23:17.645
<v Speaker 0>throttled right now. Yeah.

01:23:19.645 --> 01:23:21.565
<v Speaker 0>I cannot remember basic numbers.

01:23:21.885 --> 01:23:22.765
<v Speaker 0>Okay.

01:23:25.085 --> 01:23:27.325
<v Speaker 0>Folks say, yeah, you can have up you

01:23:27.325 --> 01:23:29.645
<v Speaker 0>can stretch to a thousand and we're only

01:23:29.645 --> 01:23:32.360
<v Speaker 0>gonna give you 42 here. But that's it.

01:23:32.360 --> 01:23:34.679
<v Speaker 0>Pretty finely tuned, I guess.

01:23:36.440 --> 01:23:39.000
<v Speaker 1>Yeah. Pretty pretty finely tuned, like bumping up

01:23:39.000 --> 01:23:40.280
<v Speaker 1>against those limits.

01:23:41.800 --> 01:23:43.960
<v Speaker 0>If we grab on stress, I should just

01:23:43.960 --> 01:23:45.800
<v Speaker 0>return those two. There we go. Okay.

01:23:46.040 --> 01:23:46.599
<v Speaker 0>Oh, no.

01:23:49.775 --> 01:23:51.295
<v Speaker 0>They're both being killed.

01:23:53.935 --> 01:23:55.535
<v Speaker 1>I think it might it might be one

01:23:55.535 --> 01:23:57.375
<v Speaker 1>of those ones where they're actually, like, bumping

01:23:57.375 --> 01:23:59.695
<v Speaker 1>up and down with the memory and depending

01:23:59.695 --> 01:24:01.215
<v Speaker 1>on when you get it, it's

01:24:02.560 --> 01:24:06.159
<v Speaker 1>potentially a useful met a metric or not.

01:24:06.719 --> 01:24:08.400
<v Speaker 0>Oh, alright.

01:24:10.880 --> 01:24:12.159
<v Speaker 0>Yes. Guess we can tweak the b p

01:24:12.159 --> 01:24:13.520
<v Speaker 0>a anyway. So Yeah.

01:24:16.475 --> 01:24:19.114
<v Speaker 0>And 50 should cover everything.

01:24:19.355 --> 01:24:21.835
<v Speaker 0>And let's just see. We know what didn't

01:24:21.835 --> 01:24:24.475
<v Speaker 0>really go much bigger than that. So Sure.

01:24:24.715 --> 01:24:25.115
<v Speaker 1>K.

01:24:30.640 --> 01:24:32.960
<v Speaker 0>Oh, that's the old one. Okay. Yep.

01:24:33.280 --> 01:24:34.480
<v Speaker 0>Running and running.

01:24:34.960 --> 01:24:36.560
<v Speaker 0>Do not touch anything.

01:24:40.320 --> 01:24:41.680
<v Speaker 0>Nope. Memory's dead. No.

01:24:45.045 --> 01:24:47.445
<v Speaker 0>Let's just start speaking of numbers at Lakes.

01:24:47.445 --> 01:24:48.164
<v Speaker 0>Okay.

01:24:56.005 --> 01:24:57.620
<v Speaker 0>Oh, I've got the w. I was wondering

01:24:57.620 --> 01:24:59.300
<v Speaker 0>why that wasn't actually doing the watch, and

01:24:59.300 --> 01:25:00.580
<v Speaker 0>it's because of the

01:25:00.740 --> 01:25:04.980
<v Speaker 0>alright. Okay. Running. Running. No arm kills. The

01:25:04.980 --> 01:25:05.860
<v Speaker 1>CPU

01:25:05.860 --> 01:25:07.140
<v Speaker 1>stress one that's

01:25:07.300 --> 01:25:08.740
<v Speaker 1>running is the older one, though.

01:25:13.215 --> 01:25:15.295
<v Speaker 0>So it is alright. Let's bump up the

01:25:15.295 --> 01:25:16.335
<v Speaker 0>CPU one.

01:25:18.094 --> 01:25:19.775
<v Speaker 0>So I guess it's eating a bit more

01:25:19.775 --> 01:25:20.975
<v Speaker 0>memory than I thought.

01:25:25.500 --> 01:25:27.340
<v Speaker 0>I'm so confident I'm not gonna have to

01:25:27.340 --> 01:25:28.780
<v Speaker 0>tweak that again. I'm just gonna go to

01:25:28.780 --> 01:25:29.739
<v Speaker 0>the next step.

01:25:31.179 --> 01:25:31.899
<v Speaker 1>Okay.

01:25:32.619 --> 01:25:34.219
<v Speaker 0>So let's take a look at our VPA.

01:25:36.955 --> 01:25:37.914
<v Speaker 0>Okay.

01:25:39.435 --> 01:25:40.554
<v Speaker 0>VPA.

01:25:41.515 --> 01:25:43.514
<v Speaker 0>Alright. You wanna run us through this?

01:25:43.835 --> 01:25:44.955
<v Speaker 1>So yeah. This is

01:25:45.835 --> 01:25:47.755
<v Speaker 1>so you can see this is, like, under

01:25:47.755 --> 01:25:50.235
<v Speaker 1>an API version auto scaling dot case dot

01:25:50.315 --> 01:25:52.074
<v Speaker 1>kind of record auto scaler. So this is

01:25:52.074 --> 01:25:54.040
<v Speaker 1>a custom resource definition.

01:25:55.560 --> 01:25:57.560
<v Speaker 1>Some people may be familiar with them, some

01:25:57.560 --> 01:25:58.200
<v Speaker 1>may not.

01:25:59.160 --> 01:26:00.840
<v Speaker 1>But this this basically is

01:26:01.160 --> 01:26:04.360
<v Speaker 1>an extension of the the base Kubernetes APIs

01:26:04.360 --> 01:26:05.800
<v Speaker 1>with a new custom resource,

01:26:06.705 --> 01:26:08.945
<v Speaker 1>and this is this is effectively declaring an

01:26:08.945 --> 01:26:10.864
<v Speaker 1>instance. So that means you can then interact

01:26:10.864 --> 01:26:12.624
<v Speaker 1>with it using kubectl.

01:26:13.425 --> 01:26:14.784
<v Speaker 1>And this custom resource

01:26:15.344 --> 01:26:18.304
<v Speaker 1>these custom resources, sorry, are picked up by

01:26:18.304 --> 01:26:21.185
<v Speaker 1>the vertical pod autoscaler and used to inform

01:26:21.185 --> 01:26:21.665
<v Speaker 1>it

01:26:22.330 --> 01:26:24.170
<v Speaker 1>about what behaviour we want.

01:26:24.730 --> 01:26:26.490
<v Speaker 1>And it also writes back

01:26:27.210 --> 01:26:28.010
<v Speaker 1>status

01:26:28.010 --> 01:26:30.490
<v Speaker 1>to these custom resources so that we can

01:26:30.490 --> 01:26:33.210
<v Speaker 1>basically have a look at what it's saying

01:26:33.210 --> 01:26:33.930
<v Speaker 1>about

01:26:34.330 --> 01:26:36.490
<v Speaker 1>what behaviour it intends to undertake.

01:26:38.615 --> 01:26:40.615
<v Speaker 1>So in this case, we give it some

01:26:40.615 --> 01:26:42.055
<v Speaker 1>metadata, a name,

01:26:42.535 --> 01:26:45.175
<v Speaker 1>usual thing, we expect that. And then as

01:26:45.175 --> 01:26:47.495
<v Speaker 1>with the HKs before, we're giving a spec,

01:26:47.495 --> 01:26:49.415
<v Speaker 1>so a target ref. In this case, we're

01:26:49.415 --> 01:26:51.655
<v Speaker 1>pointing it at the CPU stress app.

01:26:52.470 --> 01:26:53.270
<v Speaker 1>Then

01:26:53.510 --> 01:26:55.030
<v Speaker 1>this is this is where the magic of

01:26:55.030 --> 01:26:56.550
<v Speaker 1>the VPA comes in. We're giving it a

01:26:56.550 --> 01:26:57.590
<v Speaker 1>resource policy.

01:26:58.310 --> 01:26:58.869
<v Speaker 1>So

01:26:59.430 --> 01:27:01.110
<v Speaker 1>we're gonna need to tweak this because we've

01:27:01.110 --> 01:27:02.869
<v Speaker 1>had to throw up the resources.

01:27:03.750 --> 01:27:05.350
<v Speaker 1>So that's that was gonna be my first

01:27:05.350 --> 01:27:08.525
<v Speaker 0>question. It's like, right now, we have both

01:27:08.525 --> 01:27:10.045
<v Speaker 0>of these running, but we actually we, you

01:27:10.045 --> 01:27:11.245
<v Speaker 0>know, we we bumped them a little bit

01:27:11.245 --> 01:27:12.364
<v Speaker 0>higher than we wanted.

01:27:12.685 --> 01:27:14.364
<v Speaker 1>Yeah. Could we I I

01:27:14.765 --> 01:27:16.925
<v Speaker 0>don't know how the VP works specifically. If

01:27:16.925 --> 01:27:18.364
<v Speaker 0>we just put this back down so they're

01:27:18.364 --> 01:27:20.765
<v Speaker 0>both on killing and apply the VP, will

01:27:20.765 --> 01:27:21.645
<v Speaker 0>it fix it?

01:27:24.120 --> 01:27:26.440
<v Speaker 1>It can potentially run into issues.

01:27:26.600 --> 01:27:29.000
<v Speaker 1>So the problem is it it's it's pulling

01:27:29.000 --> 01:27:30.599
<v Speaker 1>it's pulling its data

01:27:30.920 --> 01:27:31.639
<v Speaker 1>from

01:27:31.800 --> 01:27:34.840
<v Speaker 1>the metrics API. So depend if if these

01:27:34.840 --> 01:27:37.505
<v Speaker 1>things are repeatedly on killing and

01:27:37.825 --> 01:27:40.784
<v Speaker 1>therefore the metrics API is giving a misleading

01:27:41.585 --> 01:27:44.225
<v Speaker 1>idea of how much resources these pods are

01:27:44.225 --> 01:27:46.945
<v Speaker 1>using, it might not be able to do

01:27:46.945 --> 01:27:49.185
<v Speaker 1>the maths it needs to do to figure

01:27:49.185 --> 01:27:51.905
<v Speaker 1>out, oh, wait. That needs more CPU or

01:27:51.905 --> 01:27:52.225
<v Speaker 1>memory.

01:27:54.030 --> 01:27:55.229
<v Speaker 0>Okay. So

01:27:56.750 --> 01:27:59.070
<v Speaker 0>this best test CPU thing on the stress

01:27:59.070 --> 01:28:01.949
<v Speaker 0>program, does that mean consume four CPUs?

01:28:03.230 --> 01:28:05.869
<v Speaker 1>It means run it on four threads.

01:28:06.765 --> 01:28:07.725
<v Speaker 0>Right. Okay.

01:28:08.765 --> 01:28:11.325
<v Speaker 0>If we've got this at fifteen hundred and

01:28:11.325 --> 01:28:13.485
<v Speaker 0>five hundred and we go to our VPA,

01:28:13.565 --> 01:28:15.485
<v Speaker 0>does that mean that we want this

01:28:17.565 --> 01:28:19.405
<v Speaker 0>at a minimum I mean, the minimum probably

01:28:19.405 --> 01:28:21.165
<v Speaker 0>has to match. Right? Yes.

01:28:21.699 --> 01:28:23.619
<v Speaker 1>In this case. 500

01:28:23.619 --> 01:28:24.419
<v Speaker 0>m

01:28:24.900 --> 01:28:27.540
<v Speaker 0>and 1,500 m I. And then we can

01:28:27.540 --> 01:28:29.619
<v Speaker 0>say down here, you can have four whole

01:28:29.619 --> 01:28:32.099
<v Speaker 0>course and three GI.

01:28:32.659 --> 01:28:32.980
<v Speaker 1>Yeah.

01:28:36.625 --> 01:28:38.864
<v Speaker 0>And that should work for the memory and

01:28:38.864 --> 01:28:40.945
<v Speaker 0>the CPU. It'll be only targeting the CPU

01:28:40.945 --> 01:28:42.305
<v Speaker 0>one, but this In this case, we're only

01:28:42.305 --> 01:28:44.545
<v Speaker 1>targeting the CPU. Okay. And and we can

01:28:44.545 --> 01:28:48.100
<v Speaker 1>also basically tell it, actually, only monitor and

01:28:48.100 --> 01:28:49.380
<v Speaker 1>modify. And so

01:28:49.700 --> 01:28:51.860
<v Speaker 1>for instance, if you're running a Java app

01:28:51.860 --> 01:28:53.139
<v Speaker 1>where it may be

01:28:53.620 --> 01:28:55.700
<v Speaker 1>always appearing like it's using all of the

01:28:55.700 --> 01:28:58.020
<v Speaker 1>heap, therefore, the memory utilizations

01:28:58.995 --> 01:29:00.275
<v Speaker 1>to Kubernetes

01:29:00.275 --> 01:29:02.755
<v Speaker 1>always looks really high. You may only want

01:29:02.755 --> 01:29:05.235
<v Speaker 1>the VPA to monitor the CPU and never

01:29:05.235 --> 01:29:06.675
<v Speaker 1>to modify the memory.

01:29:07.715 --> 01:29:08.915
<v Speaker 0>Okay. Cool.

01:29:10.035 --> 01:29:11.635
<v Speaker 0>So

01:29:13.800 --> 01:29:15.400
<v Speaker 0>I just apply that. Is it gonna do

01:29:15.400 --> 01:29:16.040
<v Speaker 0>anything?

01:29:17.320 --> 01:29:18.360
<v Speaker 1>So

01:29:18.600 --> 01:29:20.600
<v Speaker 1>if you apply that and then we can

01:29:20.600 --> 01:29:22.520
<v Speaker 1>have a look at the logs of the

01:29:22.520 --> 01:29:25.000
<v Speaker 1>vertical pod one of the vertical pod autoscalers

01:29:25.000 --> 01:29:25.480
<v Speaker 1>components.

01:29:34.365 --> 01:29:35.405
<v Speaker 0>Right.

01:29:38.205 --> 01:29:39.965
<v Speaker 0>There's no events. That means it's not doing

01:29:39.965 --> 01:29:41.325
<v Speaker 0>anything yet. Right?

01:29:42.380 --> 01:29:44.780
<v Speaker 1>Not yet. And that's because, again, we've gotta

01:29:44.780 --> 01:29:47.020
<v Speaker 0>wait for a previous and all those metrics

01:29:47.020 --> 01:29:48.300
<v Speaker 0>to to do something.

01:29:49.020 --> 01:29:49.260
<v Speaker 1>I

01:29:50.219 --> 01:29:51.820
<v Speaker 1>I sorry. I tell a lie. It is

01:29:51.820 --> 01:29:53.739
<v Speaker 1>already picked up. So if you jump back,

01:29:54.915 --> 01:29:57.315
<v Speaker 1>So you can see that it's got these

01:29:57.315 --> 01:29:58.274
<v Speaker 1>conditions,

01:29:58.675 --> 01:29:59.794
<v Speaker 1>status conditions.

01:30:00.034 --> 01:30:02.755
<v Speaker 1>So status is true and it's provided a

01:30:02.755 --> 01:30:03.635
<v Speaker 1>recommendation.

01:30:03.875 --> 01:30:05.954
<v Speaker 1>And you can see below that the recommendation.

01:30:07.635 --> 01:30:09.155
<v Speaker 0>Okay. So we have

01:30:10.969 --> 01:30:13.610
<v Speaker 0>what's the lower bound here in this context?

01:30:14.650 --> 01:30:17.530
<v Speaker 1>So the the lower bound is you

01:30:18.410 --> 01:30:20.969
<v Speaker 1>I'm trying to remember exactly the

01:30:22.170 --> 01:30:22.570
<v Speaker 1>the math.

01:30:25.345 --> 01:30:28.385
<v Speaker 1>The lower bound is how much

01:30:29.745 --> 01:30:30.705
<v Speaker 0>Is it this?

01:30:32.145 --> 01:30:34.385
<v Speaker 1>No. It's how much it's used.

01:30:37.880 --> 01:30:38.760
<v Speaker 1>I

01:30:39.320 --> 01:30:40.840
<v Speaker 1>can't remember exactly. Alright.

01:30:42.760 --> 01:30:44.440
<v Speaker 0>So what does this recommendations

01:30:45.160 --> 01:30:47.160
<v Speaker 0>suggesting right now? Because I I'm I'm not

01:30:47.160 --> 01:30:48.680
<v Speaker 0>sure, Andrew. Is it telling it to increase

01:30:48.680 --> 01:30:49.800
<v Speaker 0>it? Is it telling it

01:30:52.615 --> 01:30:53.655
<v Speaker 1>So

01:30:53.735 --> 01:30:54.535
<v Speaker 1>if you

01:30:55.095 --> 01:30:57.575
<v Speaker 1>so if you scroll up a bit

01:30:57.895 --> 01:30:58.375
<v Speaker 1>again

01:30:58.775 --> 01:31:00.215
<v Speaker 1>so there's there's basically

01:31:01.015 --> 01:31:01.975
<v Speaker 1>there's

01:31:01.975 --> 01:31:05.095
<v Speaker 1>the update policy, update mode. And so VPA

01:31:07.700 --> 01:31:08.579
<v Speaker 1>has

01:31:10.100 --> 01:31:12.020
<v Speaker 1>a number of modes it can operate in.

01:31:12.340 --> 01:31:13.460
<v Speaker 1>So there's

01:31:14.420 --> 01:31:15.380
<v Speaker 1>auto

01:31:17.700 --> 01:31:18.260
<v Speaker 1>recreate,

01:31:19.225 --> 01:31:20.985
<v Speaker 1>Currently, two are the same,

01:31:21.545 --> 01:31:22.825
<v Speaker 1>which basically says

01:31:23.065 --> 01:31:23.785
<v Speaker 1>when you're

01:31:24.425 --> 01:31:26.425
<v Speaker 1>when you do this, recreate

01:31:26.665 --> 01:31:29.065
<v Speaker 1>the pods to change the

01:31:31.305 --> 01:31:31.865
<v Speaker 1>the

01:31:32.185 --> 01:31:34.425
<v Speaker 1>change change the resource

01:31:34.980 --> 01:31:37.940
<v Speaker 1>stuff. So basically, it says if you think

01:31:37.940 --> 01:31:39.860
<v Speaker 1>that we need to change the resource request

01:31:39.860 --> 01:31:42.580
<v Speaker 1>on this, delete it, like, remove an existing

01:31:42.580 --> 01:31:45.220
<v Speaker 1>pod to trigger recreation of the pod with

01:31:45.220 --> 01:31:46.180
<v Speaker 1>the new recommendations.

01:31:47.665 --> 01:31:49.265
<v Speaker 1>There's

01:31:49.265 --> 01:31:52.145
<v Speaker 1>initial, which basically says, like, if a pod

01:31:52.145 --> 01:31:53.585
<v Speaker 1>has been assigned resources,

01:31:53.585 --> 01:31:56.304
<v Speaker 1>never delete it to force recreation of that

01:31:56.304 --> 01:31:58.625
<v Speaker 1>and give it new resources. The reason auto

01:31:58.625 --> 01:32:00.625
<v Speaker 1>and recreate are different is because

01:32:01.010 --> 01:32:01.970
<v Speaker 1>auto,

01:32:02.770 --> 01:32:05.090
<v Speaker 1>in the future, will hopefully be able to

01:32:05.090 --> 01:32:07.970
<v Speaker 1>do in place updates with resources on pods,

01:32:07.970 --> 01:32:10.450
<v Speaker 1>and therefore, be the the recommended way because

01:32:10.450 --> 01:32:11.650
<v Speaker 1>it's the least disruptive.

01:32:12.050 --> 01:32:14.210
<v Speaker 1>And then there's also off, which basically allows

01:32:14.210 --> 01:32:16.185
<v Speaker 1>you to if you're unsure about the VPA

01:32:16.185 --> 01:32:17.705
<v Speaker 1>and how it might affect your workloads, you

01:32:17.705 --> 01:32:19.305
<v Speaker 1>can basically install the VPA,

01:32:19.385 --> 01:32:22.585
<v Speaker 1>say, watch these workloads and, like, record your

01:32:22.585 --> 01:32:23.385
<v Speaker 1>recommendations,

01:32:23.385 --> 01:32:25.385
<v Speaker 1>but don't actually do anything about them.

01:32:25.785 --> 01:32:26.425
<v Speaker 0>Alright.

01:32:26.905 --> 01:32:29.470
<v Speaker 1>So that's what the recommender's doing. There's then

01:32:29.470 --> 01:32:30.750
<v Speaker 1>other components

01:32:31.550 --> 01:32:32.430
<v Speaker 1>in it.

01:32:33.310 --> 01:32:34.510
<v Speaker 1>So there's the

01:32:35.230 --> 01:32:36.270
<v Speaker 1>updater.

01:32:37.150 --> 01:32:40.190
<v Speaker 1>So check that then takes the recommendations produced

01:32:40.190 --> 01:32:41.070
<v Speaker 1>by the recommender,

01:32:42.255 --> 01:32:43.215
<v Speaker 1>checks

01:32:43.614 --> 01:32:46.335
<v Speaker 1>whether the managed pods being monitored by that

01:32:46.335 --> 01:32:48.094
<v Speaker 1>VPA CRD

01:32:48.094 --> 01:32:50.415
<v Speaker 1>are have the correct resources set. And if

01:32:50.415 --> 01:32:52.175
<v Speaker 1>not, it kills them so it can be

01:32:52.175 --> 01:32:53.775
<v Speaker 1>recreated by their controllers.

01:32:53.935 --> 01:32:56.640
<v Speaker 1>So the DPA doesn't actually operate on. It

01:32:56.640 --> 01:32:59.520
<v Speaker 1>doesn't change anything in the deployment that is

01:32:59.600 --> 01:33:03.040
<v Speaker 1>it's monitoring in this space. It's it instead

01:33:03.920 --> 01:33:04.719
<v Speaker 1>has

01:33:04.800 --> 01:33:07.520
<v Speaker 1>the the third and final component at admission

01:33:07.680 --> 01:33:11.525
<v Speaker 1>plugin actually make changes to the pods when

01:33:11.525 --> 01:33:14.485
<v Speaker 1>they're created. So, effectively, the API server, the

01:33:14.485 --> 01:33:16.085
<v Speaker 1>deployment in this case goes

01:33:17.125 --> 01:33:19.125
<v Speaker 1>if a pod's been deleted by the VPA

01:33:19.125 --> 01:33:20.885
<v Speaker 1>goes, well, that's been deleted. I need to

01:33:20.885 --> 01:33:22.804
<v Speaker 1>create a new pod to match my desired

01:33:22.804 --> 01:33:23.045
<v Speaker 1>account.

01:33:23.610 --> 01:33:25.610
<v Speaker 1>Create a create a new pod, and that

01:33:25.770 --> 01:33:27.929
<v Speaker 1>the API server passes it through the admission

01:33:27.929 --> 01:33:29.769
<v Speaker 1>plugin, which takes the recommendation,

01:33:30.090 --> 01:33:32.170
<v Speaker 1>pulls that and sets the resources.

01:33:32.810 --> 01:33:33.929
<v Speaker 0>Ah, okay.

01:33:35.610 --> 01:33:36.570
<v Speaker 0>Alright. So

01:33:37.795 --> 01:33:39.954
<v Speaker 0>this so you're suggesting we can take a

01:33:39.954 --> 01:33:41.715
<v Speaker 0>look at the logs from the recommender?

01:33:42.355 --> 01:33:43.234
<v Speaker 1>Yep.

01:33:48.675 --> 01:33:50.835
<v Speaker 0>Home event will be discarded because it's too

01:33:50.835 --> 01:33:51.074
<v Speaker 0>old.

01:33:51.890 --> 01:33:54.449
<v Speaker 0>Alright. Yeah. I think that's unrelated, isn't it?

01:33:55.730 --> 01:33:57.330
<v Speaker 0>I think that's what we were talking about

01:33:57.330 --> 01:33:58.290
<v Speaker 0>the the thing.

01:33:59.730 --> 01:34:01.730
<v Speaker 0>Then we did the describe, we just did.

01:34:01.730 --> 01:34:02.610
<v Speaker 0>So now

01:34:03.890 --> 01:34:04.929
<v Speaker 0>we can

01:34:05.410 --> 01:34:06.210
<v Speaker 0>scale this up.

01:34:20.980 --> 01:34:23.059
<v Speaker 0>Sure. But I'm looking for here.

01:34:24.500 --> 01:34:26.980
<v Speaker 1>So if you do have a look at

01:34:26.980 --> 01:34:29.460
<v Speaker 1>the if you describe the pods that match

01:34:29.460 --> 01:34:30.659
<v Speaker 1>the label selector,

01:34:33.385 --> 01:34:37.145
<v Speaker 1>Describe pods dash l app equals CPU stress

01:34:37.145 --> 01:34:37.785
<v Speaker 1>up.

01:34:40.665 --> 01:34:41.385
<v Speaker 0>Yep.

01:34:44.985 --> 01:34:46.265
<v Speaker 0>Oh, I bumped the limit up.

01:34:47.179 --> 01:34:47.820
<v Speaker 0>Yep.

01:34:48.300 --> 01:34:49.179
<v Speaker 0>Oh, yeah.

01:34:49.659 --> 01:34:51.099
<v Speaker 0>Because our limit was

01:34:56.860 --> 01:34:59.260
<v Speaker 0>1,500, and it's now decided you probably want

01:34:59.260 --> 01:35:00.300
<v Speaker 0>this as 1,700.

01:35:02.114 --> 01:35:02.914
<v Speaker 0>Phew.

01:35:05.315 --> 01:35:06.994
<v Speaker 0>Alright. That's the end of the v p

01:35:06.994 --> 01:35:08.195
<v Speaker 0>one. Nice. Okay.

01:35:08.594 --> 01:35:09.794
<v Speaker 0>A moment of truth.

01:35:11.715 --> 01:35:12.514
<v Speaker 0>Where's rabbit?

01:35:15.120 --> 01:35:17.520
<v Speaker 1>It's running as to hop on restart.

01:35:18.480 --> 01:35:19.440
<v Speaker 0>Let's see.

01:35:24.240 --> 01:35:26.160
<v Speaker 0>I think I'm getting metrics.

01:35:27.120 --> 01:35:28.960
<v Speaker 1>No. Doesn't look

01:35:29.545 --> 01:35:30.584
<v Speaker 1>too happy.

01:35:30.905 --> 01:35:33.224
<v Speaker 0>Put forward service.

01:35:33.224 --> 01:35:34.744
<v Speaker 0>Correct me for this.

01:35:40.905 --> 01:35:41.304
<v Speaker 0>K.

01:35:46.739 --> 01:35:47.699
<v Speaker 0>And

01:35:47.699 --> 01:35:50.260
<v Speaker 0>if it works no. Okay. We don't have

01:35:50.099 --> 01:35:53.780
<v Speaker 1>No. No. Never mind. No big deal. Yep.

01:35:54.900 --> 01:35:56.019
<v Speaker 0>Cool. Awesome.

01:35:56.659 --> 01:35:59.165
<v Speaker 0>Let me pop that off. So if anyone

01:35:59.165 --> 01:36:01.085
<v Speaker 0>has any questions, we're gonna finish up in

01:36:01.085 --> 01:36:02.205
<v Speaker 0>just a few moments so you can get

01:36:02.205 --> 01:36:03.885
<v Speaker 0>them in now and we'll do our best

01:36:03.885 --> 01:36:04.925
<v Speaker 0>to tackle them.

01:36:05.645 --> 01:36:08.285
<v Speaker 0>I think thank you, guy, for putting all

01:36:08.285 --> 01:36:10.205
<v Speaker 0>that together and, like, you know,

01:36:11.210 --> 01:36:12.970
<v Speaker 0>just given this that kind of running commentary

01:36:12.970 --> 01:36:14.890
<v Speaker 0>as well and explaining all those concepts and

01:36:14.890 --> 01:36:15.930
<v Speaker 0>the vocabulary.

01:36:16.010 --> 01:36:17.130
<v Speaker 0>You know, I think

01:36:18.010 --> 01:36:20.250
<v Speaker 0>using the HP and the VPA is is

01:36:20.250 --> 01:36:22.570
<v Speaker 0>really important when adopting Kubernetes. And it's it's

01:36:22.570 --> 01:36:24.170
<v Speaker 0>just nice to have an example like this

01:36:24.170 --> 01:36:25.450
<v Speaker 0>where we can set and go through it

01:36:25.450 --> 01:36:27.184
<v Speaker 0>from start to finish and really break down

01:36:27.184 --> 01:36:29.905
<v Speaker 0>and understand what's actually happening within the cluster.

01:36:30.224 --> 01:36:30.945
<v Speaker 0>Your

01:36:31.184 --> 01:36:34.145
<v Speaker 0>description of, you know, the resource metrics, the

01:36:34.145 --> 01:36:36.065
<v Speaker 0>custom metrics, and the external metrics was all

01:36:36.065 --> 01:36:37.985
<v Speaker 0>fantastic. That's something that I've had a little

01:36:37.985 --> 01:36:39.585
<v Speaker 0>bit of confusion about in the past. So

01:36:39.585 --> 01:36:41.870
<v Speaker 0>it was good to kinda have that explained

01:36:41.870 --> 01:36:43.949
<v Speaker 0>to me in really nice detail.

01:36:45.550 --> 01:36:47.390
<v Speaker 0>Why don't well, we just wait for more

01:36:47.390 --> 01:36:48.990
<v Speaker 0>and more minute. Like, tell us a little

01:36:48.990 --> 01:36:51.150
<v Speaker 0>bit about seg auto scaling.

01:36:51.470 --> 01:36:52.830
<v Speaker 0>How long have you been in the chair?

01:36:52.830 --> 01:36:55.310
<v Speaker 0>What does that mean? And, you know, can

01:36:55.310 --> 01:36:56.110
<v Speaker 0>people get involved?

01:36:57.055 --> 01:36:58.255
<v Speaker 1>Yeah. Definitely.

01:36:58.655 --> 01:36:59.534
<v Speaker 1>We're

01:36:59.535 --> 01:37:01.935
<v Speaker 1>definitely always looking for more people to get

01:37:01.935 --> 01:37:03.614
<v Speaker 1>involved if people have,

01:37:04.655 --> 01:37:07.055
<v Speaker 1>like, use cases that aren't currently covered by

01:37:07.055 --> 01:37:08.655
<v Speaker 1>the the

01:37:10.710 --> 01:37:13.190
<v Speaker 1>components we all we take care of. So

01:37:13.190 --> 01:37:16.070
<v Speaker 1>we the signal to scaling currently has ownership

01:37:16.070 --> 01:37:18.309
<v Speaker 1>of the cluster autoscaler,

01:37:19.670 --> 01:37:22.630
<v Speaker 1>the HPA code within core Kubernetes,

01:37:24.085 --> 01:37:25.844
<v Speaker 1>vertical pod autoscaler,

01:37:26.005 --> 01:37:27.524
<v Speaker 1>and something called the

01:37:29.125 --> 01:37:30.564
<v Speaker 1>pod mani

01:37:31.125 --> 01:37:33.364
<v Speaker 1>slash add on resizer, which is a really

01:37:33.364 --> 01:37:34.324
<v Speaker 1>sort of

01:37:34.804 --> 01:37:36.804
<v Speaker 1>simple slash dumb

01:37:38.699 --> 01:37:41.500
<v Speaker 1>DPA, basically. So basic basically, it just scales

01:37:41.500 --> 01:37:44.219
<v Speaker 1>up and down in proportion vertically in proportion

01:37:44.219 --> 01:37:46.619
<v Speaker 1>to the size of the cluster or something

01:37:46.619 --> 01:37:47.020
<v Speaker 1>similar.

01:37:49.275 --> 01:37:52.554
<v Speaker 1>We there's there's some plans for for

01:37:52.875 --> 01:37:55.114
<v Speaker 1>us in terms of, like, what our what

01:37:55.114 --> 01:37:55.594
<v Speaker 1>our

01:37:55.995 --> 01:37:58.315
<v Speaker 1>near timeline looks like. We want to so

01:37:58.315 --> 01:37:59.835
<v Speaker 1>you saw a lot of those APIs we

01:37:59.835 --> 01:38:01.355
<v Speaker 1>were using were b two beta two.

01:38:02.630 --> 01:38:04.710
<v Speaker 1>Auto scaling b two beta two, API has

01:38:04.710 --> 01:38:06.389
<v Speaker 1>been around in beta for quite a long

01:38:06.389 --> 01:38:09.030
<v Speaker 1>time. We want to look at promoting

01:38:09.030 --> 01:38:10.149
<v Speaker 1>that to GA.

01:38:10.550 --> 01:38:12.389
<v Speaker 1>There's some bits of functionality that are still

01:38:12.389 --> 01:38:14.630
<v Speaker 1>in alpha that we want to try and

01:38:14.630 --> 01:38:15.110
<v Speaker 1>get into

01:38:16.435 --> 01:38:18.354
<v Speaker 1>beta and GA

01:38:18.355 --> 01:38:19.475
<v Speaker 1>to

01:38:19.475 --> 01:38:22.755
<v Speaker 1>basically enable people using managed services, a lot

01:38:22.755 --> 01:38:23.474
<v Speaker 1>of which

01:38:24.515 --> 01:38:25.795
<v Speaker 1>decide

01:38:25.795 --> 01:38:28.675
<v Speaker 1>to restrict people to beta and above

01:38:28.995 --> 01:38:31.155
<v Speaker 1>feature flags. We want to try and get

01:38:31.155 --> 01:38:31.955
<v Speaker 1>those

01:38:33.130 --> 01:38:33.930
<v Speaker 1>promoted

01:38:33.930 --> 01:38:36.250
<v Speaker 1>so that people can make use of them

01:38:36.250 --> 01:38:37.449
<v Speaker 1>wherever they're running.

01:38:39.610 --> 01:38:41.369
<v Speaker 1>And, yeah, we we've had a lot of

01:38:41.370 --> 01:38:44.090
<v Speaker 1>functionality and new best functionality pushed through by

01:38:44.090 --> 01:38:47.355
<v Speaker 1>users saying we we want best. There's there's

01:38:47.435 --> 01:38:49.035
<v Speaker 1>I I've not included it in the demos

01:38:49.035 --> 01:38:51.514
<v Speaker 1>yet, but there's some really cool functionality called

01:38:51.915 --> 01:38:55.035
<v Speaker 1>scale policies where, basically, you can get really

01:38:55.035 --> 01:38:57.755
<v Speaker 1>granular with how you want a pod a

01:38:57.755 --> 01:38:59.915
<v Speaker 1>service or a deployment to scale up and

01:38:59.915 --> 01:39:02.235
<v Speaker 1>scale down. So you can say, at most,

01:39:02.235 --> 01:39:02.635
<v Speaker 1>I want,

01:39:03.410 --> 01:39:05.490
<v Speaker 1>like, to scale down 10%

01:39:05.490 --> 01:39:08.290
<v Speaker 1>of the pods in this deployment or

01:39:10.050 --> 01:39:11.970
<v Speaker 1>eight pods at a time, whichever is the

01:39:11.970 --> 01:39:13.810
<v Speaker 1>highest or the lowest. So there's a lot

01:39:13.810 --> 01:39:15.650
<v Speaker 1>of granularity you can get in that and

01:39:15.650 --> 01:39:17.090
<v Speaker 1>that users have implemented.

01:39:18.105 --> 01:39:19.385
<v Speaker 1>So, yeah, I've been

01:39:19.864 --> 01:39:21.544
<v Speaker 1>co chair of the

01:39:22.264 --> 01:39:23.385
<v Speaker 1>six since

01:39:24.425 --> 01:39:27.704
<v Speaker 1>earlier this year, April time, maybe.

01:39:28.505 --> 01:39:30.824
<v Speaker 1>Time time has lost all meaning, like,

01:39:31.304 --> 01:39:31.704
<v Speaker 1>everyone.

01:39:32.820 --> 01:39:34.500
<v Speaker 1>And yeah, I I've tried to sort of

01:39:34.500 --> 01:39:35.060
<v Speaker 1>bring

01:39:35.300 --> 01:39:37.140
<v Speaker 1>a more end user focused

01:39:37.140 --> 01:39:37.940
<v Speaker 1>sort of

01:39:38.260 --> 01:39:40.260
<v Speaker 1>view of things because a lot of the

01:39:40.260 --> 01:39:41.780
<v Speaker 1>a lot of the people with heavy involvement

01:39:41.780 --> 01:39:44.660
<v Speaker 1>and maintainers of the code are very much

01:39:44.660 --> 01:39:45.699
<v Speaker 1>like Google.

01:39:45.780 --> 01:39:48.474
<v Speaker 1>Like, they're providers and they get feedback from,

01:39:48.474 --> 01:39:51.275
<v Speaker 1>like, users of g c e and g

01:39:51.275 --> 01:39:51.594
<v Speaker 1>c k

01:39:52.235 --> 01:39:55.355
<v Speaker 1>GKE. Sorry. But, like, I've I've tried to

01:39:55.355 --> 01:39:57.355
<v Speaker 1>sort of bring a more like, I'm I'm

01:39:57.355 --> 01:39:58.874
<v Speaker 1>dealing with clusters

01:39:58.875 --> 01:40:00.795
<v Speaker 1>and Skyscanner day

01:40:00.795 --> 01:40:01.675
<v Speaker 1>to day. So yeah.

01:40:02.520 --> 01:40:05.240
<v Speaker 0>Alright. Thank you. We we have office hours

01:40:05.240 --> 01:40:06.520
<v Speaker 1>every Monday

01:40:07.160 --> 01:40:07.880
<v Speaker 1>at

01:40:09.400 --> 01:40:10.520
<v Speaker 1>4PM

01:40:10.680 --> 01:40:12.280
<v Speaker 1>Central European time.

01:40:12.600 --> 01:40:14.280
<v Speaker 1>Come along if you have any

01:40:15.435 --> 01:40:16.795
<v Speaker 1>any ideas,

01:40:16.795 --> 01:40:18.235
<v Speaker 1>things you want to discuss.

01:40:19.835 --> 01:40:21.594
<v Speaker 0>Alright. Thank you very much.

01:40:22.635 --> 01:40:24.635
<v Speaker 0>We got a comment slash

01:40:25.115 --> 01:40:26.475
<v Speaker 0>question. I'm not sure.

01:40:27.620 --> 01:40:29.700
<v Speaker 0>So firstly, Justin says custom metrics is my

01:40:29.700 --> 01:40:31.620
<v Speaker 0>favorite. Yeah. I can definitely understand why custom

01:40:31.620 --> 01:40:33.940
<v Speaker 0>metrics and very powerful demo that we had

01:40:33.940 --> 01:40:34.500
<v Speaker 0>there.

01:40:34.820 --> 01:40:37.700
<v Speaker 0>And then idea cron based horizontal pod or

01:40:37.700 --> 01:40:40.740
<v Speaker 0>scaler, changing the scale policy on a cron

01:40:40.740 --> 01:40:41.300
<v Speaker 0>interval.

01:40:42.895 --> 01:40:43.455
<v Speaker 0>Yeah.

01:40:43.775 --> 01:40:45.535
<v Speaker 0>Think there's there's maybe a use case for

01:40:45.535 --> 01:40:47.135
<v Speaker 0>that. I mean, I can think if you're

01:40:47.135 --> 01:40:49.135
<v Speaker 0>an e commerce or you're a news outlet,

01:40:49.135 --> 01:40:51.135
<v Speaker 0>you might wanna scale set differently between office

01:40:51.135 --> 01:40:53.855
<v Speaker 0>hours between nine to five as you and

01:40:53.855 --> 01:40:55.990
<v Speaker 0>and maybe you wanna lower your skill and

01:40:55.990 --> 01:40:57.590
<v Speaker 0>policies in the in the evening or during

01:40:57.590 --> 01:41:00.230
<v Speaker 0>the night. Yeah. Definitely. Called you. Alright.

01:41:00.550 --> 01:41:02.310
<v Speaker 0>I know you've got another call to get

01:41:02.310 --> 01:41:04.070
<v Speaker 0>to and we've been overtime. So thank you

01:41:04.070 --> 01:41:05.990
<v Speaker 0>for sticking with me and for having sharing

01:41:05.990 --> 01:41:08.070
<v Speaker 0>your knowledge of us. That was really really

01:41:08.070 --> 01:41:08.550
<v Speaker 0>good.

01:41:09.110 --> 01:41:11.715
<v Speaker 0>And other people can check out that repository,

01:41:11.715 --> 01:41:13.875
<v Speaker 0>have a play, and and enjoy. Yeah. Then

01:41:13.875 --> 01:41:16.434
<v Speaker 1>let me know what is lacking.

01:41:16.675 --> 01:41:18.515
<v Speaker 1>Obviously, I need to go back and revisit

01:41:18.515 --> 01:41:20.755
<v Speaker 1>the limits for those stress deploys and figure

01:41:20.755 --> 01:41:22.434
<v Speaker 1>out why rabbit doesn't work on

01:41:23.155 --> 01:41:24.035
<v Speaker 1>it hits that.

01:41:24.630 --> 01:41:26.230
<v Speaker 0>If you would like a bare metal cluster

01:41:26.230 --> 01:41:27.910
<v Speaker 0>to play with, I will make one all

01:41:27.910 --> 01:41:29.590
<v Speaker 0>for you. Not a problem.

01:41:29.910 --> 01:41:31.910
<v Speaker 0>Alright. You have a a great day, guys.

01:41:31.910 --> 01:41:33.430
<v Speaker 0>Thanks again for joining and sharing your knowledge

01:41:33.430 --> 01:41:34.790
<v Speaker 0>and I'll speak to you again soon. Bye

01:41:34.790 --> 01:41:35.990
<v Speaker 0>bye. Thanks. Bye.
