WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: bd8c4bde-e158-4b44-9946-85ef6baa8fe8
Created: 2025-04-29T20:17:21.541Z
Duration: 5259.303
Channels: 1

00:00:48.235 --> 00:00:51.355
<v Speaker 0>Hey. Hello and welcome to today's episode of

00:00:51.355 --> 00:00:53.595
<v Speaker 0>Rawkode live. I am your host Rawkode.

00:00:54.300 --> 00:00:57.820
<v Speaker 0>Today we're diving back into our Laravel on

00:00:57.820 --> 00:01:01.100
<v Speaker 0>Kubernetes journey and I am joined by a

00:01:01.100 --> 00:01:03.180
<v Speaker 0>previous guest friend and

00:01:03.500 --> 00:01:06.620
<v Speaker 0>budding conference joiner beer drinker

00:01:06.780 --> 00:01:09.340
<v Speaker 0>Alex Bowers. Hey mate, how are you? I'm

00:01:09.005 --> 00:01:11.725
<v Speaker 1>good. Thanks. You? I'm I'm alright. Actually, I'm

00:01:11.725 --> 00:01:13.885
<v Speaker 0>doing quite well. I'm excited to come back

00:01:13.885 --> 00:01:16.205
<v Speaker 0>to my my Laravel stuff here and and

00:01:16.205 --> 00:01:17.645
<v Speaker 0>see what we're doing. Like

00:01:19.325 --> 00:01:21.805
<v Speaker 0>we've done well, sorry. I I think I've

00:01:21.805 --> 00:01:23.680
<v Speaker 0>done five or six episodes on this now.

00:01:23.680 --> 00:01:25.280
<v Speaker 0>You joined us for one of those and

00:01:25.280 --> 00:01:27.680
<v Speaker 0>you reached out and said, there's still a

00:01:27.680 --> 00:01:29.600
<v Speaker 0>few things that we haven't covered yet. Do

00:01:29.600 --> 00:01:32.240
<v Speaker 0>you wanna give us well, first, just a

00:01:32.240 --> 00:01:34.080
<v Speaker 0>little introduction about yourself and then we'll talk

00:01:34.080 --> 00:01:35.840
<v Speaker 0>about what we wanna try and cover today.

00:01:37.095 --> 00:01:40.775
<v Speaker 1>Yeah. Sure. So I'm Alex. I am a

00:01:40.855 --> 00:01:43.415
<v Speaker 1>lead developer at a ecommerce platform in The

00:01:43.415 --> 00:01:44.935
<v Speaker 1>UK called ShopBlocks.

00:01:45.255 --> 00:01:46.775
<v Speaker 1>We use Laravel

00:01:47.575 --> 00:01:49.590
<v Speaker 1>a lot, and we're

00:01:49.590 --> 00:01:52.630
<v Speaker 1>working towards moving into Kubernetes and Docker alongside

00:01:52.630 --> 00:01:54.950
<v Speaker 1>some of our previous infrastructure stuff using.

00:01:56.310 --> 00:01:58.390
<v Speaker 1>And that's basically why I reached out because

00:01:58.390 --> 00:02:01.190
<v Speaker 1>some of the previous streams have

00:02:01.510 --> 00:02:03.030
<v Speaker 1>some topics which

00:02:04.165 --> 00:02:05.845
<v Speaker 1>more collaboration or

00:02:05.845 --> 00:02:08.405
<v Speaker 1>haven't been covered yet. So, hopefully, we can

00:02:08.405 --> 00:02:10.645
<v Speaker 1>cover those today and and if not today

00:02:10.645 --> 00:02:11.285
<v Speaker 1>soon.

00:02:11.525 --> 00:02:13.685
<v Speaker 1>I've got a full list of full

00:02:14.245 --> 00:02:15.845
<v Speaker 1>list of stuff to cover on the post

00:02:15.845 --> 00:02:17.660
<v Speaker 1>and note here, so we'll see where we

00:02:17.660 --> 00:02:18.860
<v Speaker 1>get to in it, but there's quite a

00:02:18.860 --> 00:02:19.820
<v Speaker 1>few things in there.

00:02:20.060 --> 00:02:21.740
<v Speaker 0>We'll certainly try and cross a few of

00:02:21.740 --> 00:02:23.900
<v Speaker 0>them off, and I'm always more than happy

00:02:23.900 --> 00:02:25.660
<v Speaker 0>to schedule more of these if we want

00:02:25.660 --> 00:02:27.420
<v Speaker 0>in the future. And I really wanna make

00:02:27.420 --> 00:02:28.460
<v Speaker 0>sure that we cover

00:02:28.860 --> 00:02:31.725
<v Speaker 0>everything that teams like yours need to get

00:02:31.725 --> 00:02:34.365
<v Speaker 0>their Laravel application running on Kubernetes

00:02:34.365 --> 00:02:35.485
<v Speaker 0>successfully.

00:02:36.285 --> 00:02:37.565
<v Speaker 0>So we'll do our best.

00:02:38.365 --> 00:02:39.085
<v Speaker 0>Alright.

00:02:40.205 --> 00:02:42.125
<v Speaker 0>Why don't we talk a little bit about

00:02:42.125 --> 00:02:44.140
<v Speaker 0>what you're prepared? So we're not using like

00:02:44.140 --> 00:02:46.460
<v Speaker 0>a real production grade application today. Right? You

00:02:46.540 --> 00:02:48.460
<v Speaker 0>you've put something together that is gonna be

00:02:48.940 --> 00:02:50.780
<v Speaker 0>is it close to that? Is it gonna

00:02:50.780 --> 00:02:52.620
<v Speaker 0>use the components that are missing last time?

00:02:52.620 --> 00:02:54.300
<v Speaker 0>Give us a little flavor on that.

00:02:54.540 --> 00:02:56.540
<v Speaker 1>Yeah. So what I've created is

00:02:57.275 --> 00:02:59.115
<v Speaker 1>not something anybody would ever use in production.

00:02:59.115 --> 00:03:00.635
<v Speaker 1>It's got two endpoints.

00:03:02.075 --> 00:03:04.635
<v Speaker 1>One of them creates some jobs,

00:03:04.715 --> 00:03:06.235
<v Speaker 1>and one of them is a

00:03:07.195 --> 00:03:09.435
<v Speaker 1>sends an email. The email that says, hello,

00:03:09.435 --> 00:03:12.349
<v Speaker 1>world. Like, it's very minimalist, but it adds

00:03:12.349 --> 00:03:14.829
<v Speaker 1>things to the queue. It has some scheduled

00:03:14.829 --> 00:03:16.270
<v Speaker 1>tasks to run-in the background.

00:03:16.590 --> 00:03:17.790
<v Speaker 1>It does some

00:03:20.030 --> 00:03:22.109
<v Speaker 1>it has some assets which can be compiled

00:03:22.109 --> 00:03:22.750
<v Speaker 1>and

00:03:23.310 --> 00:03:25.365
<v Speaker 1>just things like that, which every team will

00:03:25.365 --> 00:03:26.805
<v Speaker 1>have. None of them will be as basic

00:03:26.805 --> 00:03:28.565
<v Speaker 1>as this, but if you get the infrastructure

00:03:28.565 --> 00:03:31.525
<v Speaker 1>down to run a scheduled task, it doesn't

00:03:31.525 --> 00:03:33.845
<v Speaker 1>matter what the task is. If you've got

00:03:33.845 --> 00:03:36.165
<v Speaker 1>stuff in the background to run queues, it

00:03:36.165 --> 00:03:37.685
<v Speaker 1>doesn't matter what the queue job is. So

00:03:37.685 --> 00:03:39.525
<v Speaker 1>we've just got some simple code to run

00:03:39.525 --> 00:03:39.845
<v Speaker 1>that stuff.

00:03:41.340 --> 00:03:44.300
<v Speaker 0>Alright. Sweet. Let me just pull up the

00:03:45.180 --> 00:03:46.459
<v Speaker 0>the repository.

00:03:46.459 --> 00:03:48.540
<v Speaker 0>So it's on gethub.com

00:03:49.020 --> 00:03:52.620
<v Speaker 0>username Alex bevers slash Laravel dash example

00:03:52.620 --> 00:03:53.500
<v Speaker 0>dash project.

00:03:54.485 --> 00:03:54.965
<v Speaker 0>I

00:03:56.005 --> 00:03:57.925
<v Speaker 0>already have this cloned

00:03:58.645 --> 00:03:59.445
<v Speaker 0>here.

00:04:00.245 --> 00:04:02.724
<v Speaker 0>We have a live share configured so I

00:04:02.724 --> 00:04:04.965
<v Speaker 0>I should see yep. There's your name there.

00:04:05.125 --> 00:04:06.885
<v Speaker 0>So we're now in a position where we

00:04:06.885 --> 00:04:08.485
<v Speaker 0>can try to address some of those concerns

00:04:08.485 --> 00:04:09.930
<v Speaker 0>and that we're missing. Do you wanna just

00:04:09.930 --> 00:04:12.490
<v Speaker 0>quickly run through that list you've and then

00:04:12.490 --> 00:04:14.010
<v Speaker 0>we're trying to say what is best to

00:04:14.010 --> 00:04:15.210
<v Speaker 0>kick things off with?

00:04:15.930 --> 00:04:16.970
<v Speaker 1>Yeah. So

00:04:17.610 --> 00:04:18.970
<v Speaker 1>one of the things that's probably best to

00:04:18.970 --> 00:04:21.130
<v Speaker 1>start with, I guess, is migrations. Literally every

00:04:21.130 --> 00:04:23.130
<v Speaker 1>application I can ever think of requires migrations

00:04:23.130 --> 00:04:25.425
<v Speaker 1>to run. And you've touched this briefly in

00:04:25.425 --> 00:04:26.305
<v Speaker 1>the past showing

00:04:26.785 --> 00:04:28.465
<v Speaker 1>well, not showing, but saying how it would

00:04:28.465 --> 00:04:29.905
<v Speaker 1>be done. And I think the example still

00:04:29.905 --> 00:04:32.225
<v Speaker 1>had, like, a b c as, like, the

00:04:32.225 --> 00:04:33.345
<v Speaker 1>art into

00:04:34.705 --> 00:04:35.505
<v Speaker 1>into the

00:04:36.465 --> 00:04:37.585
<v Speaker 1>the the worker.

00:04:37.665 --> 00:04:40.860
<v Speaker 1>So that's that's probably the main one. There's

00:04:41.180 --> 00:04:43.100
<v Speaker 1>the two big things beyond that, I guess,

00:04:43.100 --> 00:04:46.460
<v Speaker 1>is queue jobs and schedule jobs. So on

00:04:46.460 --> 00:04:48.380
<v Speaker 1>a normal server, you'd run supervisor,

00:04:49.420 --> 00:04:50.300
<v Speaker 1>and you'd have

00:04:50.620 --> 00:04:54.235
<v Speaker 1>several different workers scheduled to run-in the background

00:04:54.235 --> 00:04:57.595
<v Speaker 1>to run a specific command called q

00:04:58.155 --> 00:04:58.875
<v Speaker 1>work.

00:04:59.275 --> 00:05:00.075
<v Speaker 1>Obviously,

00:05:00.395 --> 00:05:01.915
<v Speaker 1>it isn't gonna be exactly the same as

00:05:01.915 --> 00:05:04.395
<v Speaker 1>that in Kubernetes, so the but it'll be

00:05:04.395 --> 00:05:05.355
<v Speaker 1>similar, I assume.

00:05:06.040 --> 00:05:08.360
<v Speaker 1>And then there's also scheduled task, which normally

00:05:08.360 --> 00:05:09.800
<v Speaker 1>you'd use a contract for

00:05:10.120 --> 00:05:11.240
<v Speaker 1>on your server.

00:05:11.560 --> 00:05:12.920
<v Speaker 1>That's I believe

00:05:13.640 --> 00:05:16.360
<v Speaker 1>it's like a scheduled tasks built into Kubernetes.

00:05:16.360 --> 00:05:17.480
<v Speaker 1>So I assume that's how we manage that

00:05:17.480 --> 00:05:19.400
<v Speaker 1>as well. But those are the three main

00:05:19.400 --> 00:05:20.520
<v Speaker 1>things I'd say, which

00:05:21.425 --> 00:05:23.985
<v Speaker 1>most applications will make use of at some

00:05:23.985 --> 00:05:24.544
<v Speaker 1>point.

00:05:26.865 --> 00:05:29.185
<v Speaker 1>Beyond that, there's a couple of things like

00:05:29.985 --> 00:05:31.345
<v Speaker 1>managing your secrets.

00:05:31.745 --> 00:05:33.505
<v Speaker 1>So you got EUV stuff,

00:05:34.224 --> 00:05:36.465
<v Speaker 1>how that could be released in config map.

00:05:36.465 --> 00:05:38.360
<v Speaker 1>That's less likely to be an issue because

00:05:38.360 --> 00:05:40.199
<v Speaker 1>you can just inject it in the Docker

00:05:40.199 --> 00:05:40.840
<v Speaker 1>file

00:05:41.160 --> 00:05:42.760
<v Speaker 1>sorry, in your Docker

00:05:42.760 --> 00:05:43.320
<v Speaker 1>image.

00:05:44.680 --> 00:05:46.520
<v Speaker 1>Then there's also things like asset deployment, which

00:05:46.520 --> 00:05:48.120
<v Speaker 1>you covered in the past. So that's less

00:05:48.120 --> 00:05:49.160
<v Speaker 1>of an issue then. Yeah.

00:05:50.645 --> 00:05:52.805
<v Speaker 0>Alright. Yeah. There there there's a fair amount

00:05:52.805 --> 00:05:54.165
<v Speaker 0>in there. Let's let's just see what we

00:05:54.165 --> 00:05:55.445
<v Speaker 0>can get through it and then if we

00:05:55.445 --> 00:05:57.685
<v Speaker 0>need to schedule more time, we will definitely

00:05:57.765 --> 00:05:59.685
<v Speaker 0>do that and take it all.

00:05:59.925 --> 00:06:02.485
<v Speaker 0>I think because you've gone to the effort

00:06:02.485 --> 00:06:03.605
<v Speaker 0>to produce this application,

00:06:04.220 --> 00:06:05.660
<v Speaker 0>what we'll try and do is I'll just

00:06:05.660 --> 00:06:07.660
<v Speaker 0>try and send as many pull requests as

00:06:07.660 --> 00:06:09.500
<v Speaker 0>I can to it during this episode as

00:06:09.500 --> 00:06:11.900
<v Speaker 0>we kinda work through this together

00:06:12.140 --> 00:06:13.820
<v Speaker 0>and anything else. We'll just try and make

00:06:13.820 --> 00:06:16.694
<v Speaker 0>this the default example for Kubernetes on file

00:06:16.694 --> 00:06:18.775
<v Speaker 0>or Laravel on Kubernetes actually.

00:06:19.254 --> 00:06:20.294
<v Speaker 0>Alright. So

00:06:21.735 --> 00:06:24.455
<v Speaker 1>let's see database migrations first then. Let's see

00:06:24.455 --> 00:06:25.895
<v Speaker 0>what you've got in place for actually running

00:06:25.895 --> 00:06:27.814
<v Speaker 0>this on Kubernetes and in fact, I I

00:06:27.814 --> 00:06:29.814
<v Speaker 0>I don't have any Kubernetes right now. Hold

00:06:29.814 --> 00:06:30.935
<v Speaker 0>on. Let me start Docker.

00:06:32.550 --> 00:06:36.470
<v Speaker 0>Okay. So we do have a Docker compose

00:06:36.470 --> 00:06:37.190
<v Speaker 0>file.

00:06:37.430 --> 00:06:39.510
<v Speaker 1>That is a default one that comes with

00:06:39.510 --> 00:06:41.830
<v Speaker 1>Laravel. I've not touched that whatsoever. That's a

00:06:41.830 --> 00:06:44.630
<v Speaker 1>development environment only, I think. Something new that

00:06:44.630 --> 00:06:45.750
<v Speaker 1>came with Laravel

00:06:46.035 --> 00:06:48.035
<v Speaker 1>a few months ago from Laravel sale. Fun

00:06:48.035 --> 00:06:49.635
<v Speaker 0>fact. I sent a pull request to the

00:06:49.635 --> 00:06:50.755
<v Speaker 0>Laravel project

00:06:51.395 --> 00:06:52.995
<v Speaker 0>three or four years ago with a Docker

00:06:52.995 --> 00:06:54.515
<v Speaker 0>file and they said, sorry. We don't wanna

00:06:54.515 --> 00:06:56.995
<v Speaker 0>support Docker. Just there you go. Just throwing

00:06:56.995 --> 00:06:59.940
<v Speaker 0>that out there. I'm not better. Just saying.

00:07:00.740 --> 00:07:02.580
<v Speaker 1>They now they now have, like, a first

00:07:02.580 --> 00:07:03.540
<v Speaker 1>party product

00:07:04.020 --> 00:07:04.820
<v Speaker 1>called

00:07:05.300 --> 00:07:09.220
<v Speaker 1>Vapor, which is to deploy onto AWS Lambda.

00:07:09.220 --> 00:07:11.060
<v Speaker 1>And so I assume that's pushed much more

00:07:11.764 --> 00:07:13.205
<v Speaker 1>on the getting

00:07:13.205 --> 00:07:15.925
<v Speaker 1>Docker working because they now make money from

00:07:15.925 --> 00:07:16.405
<v Speaker 1>it. So

00:07:17.605 --> 00:07:20.965
<v Speaker 0>Alright. Well, I'm just clicking the magic reset

00:07:20.965 --> 00:07:22.005
<v Speaker 0>Kubernetes

00:07:22.005 --> 00:07:23.365
<v Speaker 0>because I can't remember the last thing I

00:07:23.365 --> 00:07:24.725
<v Speaker 0>was doing, but that's to be fair. So

00:07:24.725 --> 00:07:26.645
<v Speaker 0>that's now reset and we'll wait for that

00:07:26.645 --> 00:07:27.365
<v Speaker 0>to become healthy.

00:07:28.860 --> 00:07:31.020
<v Speaker 0>Let's see. So that Docker

00:07:31.340 --> 00:07:33.340
<v Speaker 1>compose file, that is not anything I've touched

00:07:33.340 --> 00:07:35.420
<v Speaker 1>at all. I've not done anything for

00:07:35.580 --> 00:07:37.500
<v Speaker 1>development. All I've done is create two Docker

00:07:37.500 --> 00:07:39.900
<v Speaker 1>files, which are inside resources ops Docker.

00:07:42.115 --> 00:07:43.315
<v Speaker 1>I've got two in there. I've got an

00:07:43.315 --> 00:07:44.675
<v Speaker 1>n engine x one and one f p

00:07:44.675 --> 00:07:45.315
<v Speaker 1>m one.

00:07:47.955 --> 00:07:49.875
<v Speaker 1>Those are the files which I've

00:07:50.755 --> 00:07:51.395
<v Speaker 1>started.

00:07:51.715 --> 00:07:53.555
<v Speaker 0>Okay. Well, I mean, this

00:07:54.700 --> 00:07:57.740
<v Speaker 0>this won't work by default unless we use

00:07:57.740 --> 00:07:58.380
<v Speaker 0>sale.

00:08:02.700 --> 00:08:04.460
<v Speaker 0>I I don't actually see a Docker file

00:08:04.460 --> 00:08:06.300
<v Speaker 0>here. Am I being silly?

00:08:07.020 --> 00:08:10.220
<v Speaker 1>So inside it's inside of the

00:08:09.445 --> 00:08:10.325
<v Speaker 1>vendor.

00:08:11.125 --> 00:08:12.725
<v Speaker 1>So when you do a page install, you

00:08:12.725 --> 00:08:13.685
<v Speaker 1>will get a

00:08:14.165 --> 00:08:16.965
<v Speaker 1>a vendor file vendor folder which has Laravel

00:08:16.965 --> 00:08:18.965
<v Speaker 1>sale in there, and that has different times.

00:08:18.965 --> 00:08:20.325
<v Speaker 1>You can specify which one, and it will

00:08:20.325 --> 00:08:21.620
<v Speaker 1>compile based that.

00:08:23.060 --> 00:08:25.780
<v Speaker 0>Alright. That's the half composer.

00:08:26.260 --> 00:08:26.900
<v Speaker 0>I don't

00:08:27.540 --> 00:08:28.340
<v Speaker 0>alright.

00:08:29.220 --> 00:08:29.940
<v Speaker 1>I

00:08:30.660 --> 00:08:32.740
<v Speaker 1>don't believe that you would require Laravel sale

00:08:32.740 --> 00:08:34.179
<v Speaker 1>for this. That would just be for development

00:08:34.179 --> 00:08:35.140
<v Speaker 1>environment only.

00:08:37.284 --> 00:08:39.684
<v Speaker 1>With with Yeah. Let's Yeah. You're right. I'm

00:08:39.684 --> 00:08:41.284
<v Speaker 0>I'm I'm gonna get sidetracked there. I was

00:08:41.284 --> 00:08:43.524
<v Speaker 0>gonna start putting together a development environment for

00:08:43.524 --> 00:08:45.365
<v Speaker 0>this. And to be honest I think that's

00:08:45.365 --> 00:08:47.205
<v Speaker 1>what you've been covered mostly. Sorry. I'd I'd

00:08:47.365 --> 00:08:49.300
<v Speaker 0>yeah. I I don't think it's important. I'm

00:08:49.300 --> 00:08:50.580
<v Speaker 0>just gonna create a Docker file. We just

00:08:50.580 --> 00:08:52.420
<v Speaker 0>want an image with this application in it.

00:08:52.420 --> 00:08:54.020
<v Speaker 0>That's that's all I need. And I'm gonna

00:08:54.020 --> 00:08:54.900
<v Speaker 0>use Have you

00:08:56.020 --> 00:08:57.540
<v Speaker 0>done it? It creates a Docker file,

00:08:58.420 --> 00:09:01.300
<v Speaker 1>which will build an PM and the engine

00:09:01.300 --> 00:09:02.740
<v Speaker 1>x image separately.

00:09:03.140 --> 00:09:05.695
<v Speaker 0>Where are those? Resources ops.

00:09:10.735 --> 00:09:13.214
<v Speaker 0>Ah, is this based on prior art from

00:09:13.214 --> 00:09:15.855
<v Speaker 0>other episodes? Is well, that's exactly a copy

00:09:15.855 --> 00:09:18.290
<v Speaker 1>of the previous streams. Alright. Okay. Good. So

00:09:18.290 --> 00:09:20.209
<v Speaker 0>we don't need I separated them out into

00:09:20.209 --> 00:09:23.410
<v Speaker 1>two separate rather than having the make file

00:09:23.570 --> 00:09:26.450
<v Speaker 1>specify individual targets. I've made it so that

00:09:26.450 --> 00:09:27.170
<v Speaker 1>they

00:09:27.730 --> 00:09:30.050
<v Speaker 1>are just two separate two separate jobs because

00:09:30.050 --> 00:09:31.570
<v Speaker 1>the overlap was very minimal.

00:09:32.305 --> 00:09:34.305
<v Speaker 0>Oh, that's I think that's a good or

00:09:34.305 --> 00:09:36.625
<v Speaker 1>bad idea but that's yeah. It's embedded. Alright.

00:09:36.625 --> 00:09:39.185
<v Speaker 0>And you've already added make target. This is

00:09:39.185 --> 00:09:41.345
<v Speaker 0>already my favorite episode ever because you've done

00:09:41.345 --> 00:09:42.704
<v Speaker 0>all the work. Okay.

00:09:43.824 --> 00:09:47.300
<v Speaker 0>Let's build these then. So I'll just make

00:09:47.300 --> 00:09:49.140
<v Speaker 0>sure I got the target names. We'll do

00:09:49.140 --> 00:09:51.779
<v Speaker 0>build. Let's build FPM first and then we'll

00:09:51.779 --> 00:09:53.060
<v Speaker 0>do build NGINX.

00:09:56.180 --> 00:09:57.860
<v Speaker 0>Okay. So that's gonna give us our two

00:09:57.860 --> 00:09:59.220
<v Speaker 0>images which

00:09:59.220 --> 00:10:00.660
<v Speaker 0>you know, for anyone that's watching,

00:10:01.965 --> 00:10:03.885
<v Speaker 0>go watch the previous episodes, we'll add the

00:10:03.885 --> 00:10:06.045
<v Speaker 0>links into the description afterwards.

00:10:06.125 --> 00:10:08.285
<v Speaker 0>It walks you through the entire process. We're

00:10:08.285 --> 00:10:09.245
<v Speaker 0>gonna assume

00:10:09.805 --> 00:10:11.645
<v Speaker 0>that we're starting from the point we've already

00:10:11.645 --> 00:10:13.965
<v Speaker 0>built your FPM NGINX images and pushed them

00:10:13.965 --> 00:10:16.130
<v Speaker 0>to some container registry and we're gonna try

00:10:16.130 --> 00:10:18.210
<v Speaker 0>and get this working on Kubernetes with all

00:10:18.210 --> 00:10:20.130
<v Speaker 0>the bells and whistles that we've omitted previously.

00:10:22.210 --> 00:10:23.330
<v Speaker 1>Are you going to be doing this on

00:10:23.330 --> 00:10:25.170
<v Speaker 1>Kubernetes locally? I assume are you going to

00:10:25.170 --> 00:10:26.130
<v Speaker 1>be doing this on

00:10:26.450 --> 00:10:27.490
<v Speaker 1>production

00:10:27.650 --> 00:10:28.290
<v Speaker 1>cloud environment?

00:10:30.075 --> 00:10:32.075
<v Speaker 0>I'm just gonna use Docker for Mac unless

00:10:32.075 --> 00:10:33.835
<v Speaker 0>you feel there's a reason we would need

00:10:33.835 --> 00:10:35.995
<v Speaker 0>to have an alternative cluster.

00:10:36.155 --> 00:10:38.315
<v Speaker 0>But I don't think The only thing that

00:10:38.315 --> 00:10:40.155
<v Speaker 1>I would say, purely because I don't know

00:10:40.155 --> 00:10:42.875
<v Speaker 1>much about it locally is external load balances

00:10:42.875 --> 00:10:44.560
<v Speaker 1>and how those sort things work, but that

00:10:44.560 --> 00:10:46.320
<v Speaker 1>can be covered in a far later episode

00:10:46.320 --> 00:10:47.040
<v Speaker 1>anyway.

00:10:47.600 --> 00:10:49.839
<v Speaker 0>Yeah. I have I have done previous episodes

00:10:49.839 --> 00:10:52.320
<v Speaker 0>on ingress and load balancing on Kubernetes

00:10:52.320 --> 00:10:54.160
<v Speaker 0>that aren't they're not Laravel specific and I

00:10:54.160 --> 00:10:55.360
<v Speaker 0>don't think they have to be.

00:10:55.760 --> 00:10:58.000
<v Speaker 1>No. So that's a problem. IP and all

00:10:58.000 --> 00:10:59.805
<v Speaker 1>that sort of thing should be fine. Yeah.

00:10:59.885 --> 00:11:01.645
<v Speaker 0>That's that's that'll be alright. I mean, we

00:11:01.645 --> 00:11:02.925
<v Speaker 0>can talk a little bit about how the

00:11:02.925 --> 00:11:05.725
<v Speaker 0>the services and the ingress work together, but

00:11:05.725 --> 00:11:07.725
<v Speaker 0>I don't think I I don't need a

00:11:07.725 --> 00:11:09.645
<v Speaker 0>cloud environment just to kinda show that off.

00:11:10.045 --> 00:11:11.085
<v Speaker 1>Yeah. That that's fine.

00:11:11.980 --> 00:11:14.220
<v Speaker 1>I don't think there's anything else that I

00:11:14.220 --> 00:11:17.020
<v Speaker 1>could think of that is massively different

00:11:17.420 --> 00:11:20.540
<v Speaker 1>from development or local environment to production environment.

00:11:20.540 --> 00:11:21.260
<v Speaker 1>So Alright.

00:11:22.460 --> 00:11:24.380
<v Speaker 0>Well, it looks like we do have a

00:11:24.380 --> 00:11:25.740
<v Speaker 0>little bit of time to kill while this

00:11:25.740 --> 00:11:27.435
<v Speaker 0>builds. Maybe I should have kicked that off

00:11:27.435 --> 00:11:28.315
<v Speaker 0>previously.

00:11:28.315 --> 00:11:30.875
<v Speaker 0>However, if anyone watching has any questions that

00:11:30.875 --> 00:11:32.235
<v Speaker 0>they want us to address, feel free to

00:11:32.235 --> 00:11:34.555
<v Speaker 0>drop that in the comments or drop me

00:11:34.555 --> 00:11:35.275
<v Speaker 0>a

00:11:35.595 --> 00:11:36.235
<v Speaker 0>tweet

00:11:36.395 --> 00:11:37.675
<v Speaker 0>at Rawkode.

00:11:39.195 --> 00:11:39.755
<v Speaker 0>So

00:11:40.930 --> 00:11:43.890
<v Speaker 0>let me try and understand the migration path

00:11:43.890 --> 00:11:46.370
<v Speaker 0>here. So we're gonna be using the artisan

00:11:46.370 --> 00:11:47.170
<v Speaker 0>command,

00:11:47.890 --> 00:11:49.410
<v Speaker 0>which I don't think is ever important in

00:11:49.410 --> 00:11:51.170
<v Speaker 0>here. We went through this previously. Yeah.

00:11:51.570 --> 00:11:53.810
<v Speaker 0>Which has to run a DB migrate.

00:11:54.345 --> 00:11:57.545
<v Speaker 0>Is that correct? It's PHP artisan migrate.

00:11:58.584 --> 00:12:00.345
<v Speaker 0>So does that I I need a database

00:12:00.345 --> 00:12:03.464
<v Speaker 0>deployed to my Kubernetes cluster then. Right? Yes.

00:12:03.464 --> 00:12:05.545
<v Speaker 1>I've not touched anything to do that yet.

00:12:05.545 --> 00:12:08.980
<v Speaker 0>Alright. Sweet. Finally, something I can do. Okay.

00:12:09.300 --> 00:12:12.340
<v Speaker 1>That yeah. I've tested this locally with MySQL.

00:12:12.340 --> 00:12:13.860
<v Speaker 1>It shouldn't make any difference because it's all

00:12:13.860 --> 00:12:16.820
<v Speaker 1>using the RM. But yeah. Alright. What database

00:12:16.820 --> 00:12:17.540
<v Speaker 0>do you want?

00:12:18.660 --> 00:12:19.700
<v Speaker 1>Let's get MySQL eight.

00:12:21.154 --> 00:12:23.394
<v Speaker 1>Well, MariaDB 10 or whatever is here.

00:12:25.154 --> 00:12:26.035
<v Speaker 0>Alright.

00:12:26.274 --> 00:12:28.514
<v Speaker 0>So I'm assuming you don't really need me

00:12:28.514 --> 00:12:30.755
<v Speaker 0>to go through the production deployment mechanisms for

00:12:30.755 --> 00:12:33.154
<v Speaker 0>MariaDB. We're happy just to use something that's

00:12:33.000 --> 00:12:34.920
<v Speaker 0>MariaDB on Kubernetes. Right?

00:12:35.320 --> 00:12:38.200
<v Speaker 1>Yeah. Yeah. So personally for me, I avoid

00:12:38.200 --> 00:12:41.000
<v Speaker 1>running any databases myself anyway. Just probably use

00:12:41.000 --> 00:12:44.040
<v Speaker 1>managed services. Save so much effort and

00:12:45.880 --> 00:12:48.155
<v Speaker 1>well, some people I guess will be running

00:12:48.155 --> 00:12:50.955
<v Speaker 1>in this. Well, if anyone that is going,

00:12:50.955 --> 00:12:51.995
<v Speaker 0>hey, I wanna know how to do it

00:12:51.995 --> 00:12:54.795
<v Speaker 0>under production. Just use helm. Go and use

00:12:54.795 --> 00:12:55.435
<v Speaker 0>the

00:12:55.835 --> 00:12:57.755
<v Speaker 0>go and use work from other people. There's

00:12:57.755 --> 00:13:00.395
<v Speaker 0>a helm chart says the artifact hub. Let's

00:12:59.970 --> 00:13:01.730
<v Speaker 0>talk about that actually. So

00:13:02.209 --> 00:13:03.730
<v Speaker 0>artifact hub.

00:13:03.970 --> 00:13:05.810
<v Speaker 0>This is from the CNCF.

00:13:05.810 --> 00:13:09.250
<v Speaker 0>It hosts all of the CNCF projects artifacts.

00:13:09.250 --> 00:13:11.569
<v Speaker 0>Go figure. Helm is one of those where

00:13:11.569 --> 00:13:13.490
<v Speaker 0>we can just say, hey, give me MariaDB.

00:13:14.135 --> 00:13:16.214
<v Speaker 0>We could filter on helm charts if we

00:13:16.214 --> 00:13:16.855
<v Speaker 0>wanted.

00:13:17.255 --> 00:13:19.335
<v Speaker 0>We click this and everything you need to

00:13:19.335 --> 00:13:22.135
<v Speaker 0>know to get a pretty production grade deployment

00:13:22.135 --> 00:13:23.654
<v Speaker 0>or MariaDB is gonna be here. You can

00:13:23.654 --> 00:13:25.654
<v Speaker 0>use helm, you tweak the values based on

00:13:25.654 --> 00:13:27.575
<v Speaker 0>whatever you need and you deploy it.

00:13:28.700 --> 00:13:30.460
<v Speaker 0>Probably what I would recommend.

00:13:30.940 --> 00:13:33.100
<v Speaker 0>However, for today, I'm not gonna do that

00:13:34.300 --> 00:13:36.860
<v Speaker 0>just because I just want something quick. What

00:13:36.860 --> 00:13:39.020
<v Speaker 0>I am gonna do is check the

00:13:39.900 --> 00:13:41.740
<v Speaker 0>environment bars I need. I know I need

00:13:41.740 --> 00:13:43.580
<v Speaker 0>to set the MySQL root password, maybe a

00:13:43.580 --> 00:13:45.535
<v Speaker 0>user database. I just wanna make sure I

00:13:45.535 --> 00:13:47.135
<v Speaker 0>got the version right. So it looks like

00:13:47.135 --> 00:13:49.535
<v Speaker 0>we're on 10 is okay. And if I

00:13:49.535 --> 00:13:50.575
<v Speaker 0>just search for

00:13:51.615 --> 00:13:53.535
<v Speaker 0>my SQL

00:13:53.935 --> 00:13:55.295
<v Speaker 0>root password,

00:13:55.695 --> 00:13:57.610
<v Speaker 0>these are the variables that I have available

00:13:57.610 --> 00:13:59.130
<v Speaker 0>to configure this image.

00:14:00.490 --> 00:14:02.730
<v Speaker 0>And I'm gonna drop these in. So we're

00:14:02.730 --> 00:14:04.090
<v Speaker 0>just gonna say environment.

00:14:04.170 --> 00:14:05.770
<v Speaker 0>We'll get some space.

00:14:06.570 --> 00:14:07.530
<v Speaker 0>Let's do

00:14:08.970 --> 00:14:09.850
<v Speaker 0>my SQL.

00:14:11.935 --> 00:14:14.095
<v Speaker 0>I'm pretty sure there's a random route.

00:14:15.535 --> 00:14:17.695
<v Speaker 0>Let's not get too fancy today.

00:14:19.375 --> 00:14:21.055
<v Speaker 0>Okay. Let's set a user

00:14:21.375 --> 00:14:24.630
<v Speaker 0>and we'll set a value of Laravel.

00:14:26.310 --> 00:14:27.990
<v Speaker 0>We'll set the password

00:14:31.190 --> 00:14:32.390
<v Speaker 0>Laravel.

00:14:35.110 --> 00:14:35.830
<v Speaker 0>Host

00:14:36.095 --> 00:14:37.535
<v Speaker 0>no. We don't need the host

00:14:38.255 --> 00:14:39.695
<v Speaker 0>database database.

00:14:49.300 --> 00:14:51.220
<v Speaker 0>We'll just call it all Laravel. Was that

00:14:51.220 --> 00:14:52.500
<v Speaker 0>standard? Is that what you would do in

00:14:52.500 --> 00:14:53.860
<v Speaker 0>your application? Would you tweak it more than

00:14:53.860 --> 00:14:54.340
<v Speaker 0>that?

00:14:55.380 --> 00:14:56.020
<v Speaker 1>So

00:14:56.580 --> 00:14:59.540
<v Speaker 1>I would personally name the database something relevant,

00:14:59.540 --> 00:15:00.900
<v Speaker 1>but obviously, is

00:15:01.395 --> 00:15:03.475
<v Speaker 0>Yeah. I think this is relevant. Perfect. So

00:15:03.475 --> 00:15:04.275
<v Speaker 1>Laravel is

00:15:04.915 --> 00:15:05.715
<v Speaker 1>yeah. Fine.

00:15:06.275 --> 00:15:09.315
<v Speaker 0>Alright. Okay. Cool. And happily, that is also

00:15:09.315 --> 00:15:10.595
<v Speaker 1>the default that we have in the dot

00:15:10.595 --> 00:15:12.355
<v Speaker 1>m b file. So Oh, is it?

00:15:13.875 --> 00:15:16.675
<v Speaker 1>Yeah. The username and password are both different,

00:15:16.755 --> 00:15:18.730
<v Speaker 0>but that's easy to change.

00:15:19.130 --> 00:15:20.250
<v Speaker 0>Alright. Okay.

00:15:21.450 --> 00:15:22.570
<v Speaker 0>Let's deploy

00:15:23.610 --> 00:15:25.530
<v Speaker 0>this. Oh, no. We need to expose this.

00:15:25.530 --> 00:15:26.330
<v Speaker 0>Okay. So

00:15:27.130 --> 00:15:28.330
<v Speaker 0>one of the things we want to do

00:15:28.330 --> 00:15:31.210
<v Speaker 0>is when we apply this deployment to Kubernetes,

00:15:31.210 --> 00:15:33.530
<v Speaker 0>it's gonna create the pods that run MariaDB

00:15:33.105 --> 00:15:35.904
<v Speaker 0>for us. We're gonna by default, the replicas

00:15:35.904 --> 00:15:37.185
<v Speaker 0>will be one but we'll make that a

00:15:37.185 --> 00:15:38.704
<v Speaker 0>bit more explicit. So we're gonna run one

00:15:38.704 --> 00:15:39.345
<v Speaker 0>of these.

00:15:40.464 --> 00:15:42.625
<v Speaker 0>However, what we want to do is

00:15:43.584 --> 00:15:46.945
<v Speaker 0>make sure we can have service discovery around

00:15:46.945 --> 00:15:50.020
<v Speaker 0>this pod which could be pods so that

00:15:50.020 --> 00:15:51.860
<v Speaker 0>we can use DNS to actually speak to

00:15:51.860 --> 00:15:55.060
<v Speaker 0>it. So I'm I'm gonna add a service

00:15:56.580 --> 00:15:57.540
<v Speaker 0>MariaDB.

00:15:59.620 --> 00:16:01.620
<v Speaker 0>The selector has to match

00:16:02.020 --> 00:16:03.380
<v Speaker 0>what we have above

00:16:03.644 --> 00:16:06.045
<v Speaker 0>So you can see app MiriDB matches the

00:16:06.045 --> 00:16:08.045
<v Speaker 0>same labels we apply to the deployment.

00:16:08.764 --> 00:16:10.524
<v Speaker 0>We don't need the target port because this

00:16:10.524 --> 00:16:12.285
<v Speaker 0>is a pretty simple setup. We're just gonna

00:16:12.285 --> 00:16:12.845
<v Speaker 0>say

00:16:13.485 --> 00:16:14.925
<v Speaker 0>port three three zero six.

00:16:16.045 --> 00:16:17.930
<v Speaker 0>So that should be Oh yeah. Good. Those

00:16:17.930 --> 00:16:19.610
<v Speaker 0>are built as well, which is handy.

00:16:19.930 --> 00:16:21.930
<v Speaker 0>So let's deploy.

00:16:22.490 --> 00:16:23.850
<v Speaker 0>Was it resources

00:16:24.889 --> 00:16:25.850
<v Speaker 0>ops

00:16:27.769 --> 00:16:28.649
<v Speaker 0>Kubernetes,

00:16:28.649 --> 00:16:29.050
<v Speaker 0>MaryDB.

00:16:33.965 --> 00:16:35.565
<v Speaker 0>Let's check my cluster.

00:16:37.485 --> 00:16:39.405
<v Speaker 0>There we go. Too many clusters.

00:16:43.245 --> 00:16:44.605
<v Speaker 0>And we should be able to run,

00:16:45.640 --> 00:16:46.680
<v Speaker 0>Get pods.

00:16:46.760 --> 00:16:49.000
<v Speaker 0>Oh, we have an error. I broke it

00:16:50.279 --> 00:16:52.279
<v Speaker 0>because I never set a random root password

00:16:52.279 --> 00:16:54.200
<v Speaker 0>and I never set root password.

00:16:55.240 --> 00:16:56.840
<v Speaker 0>Yeah. That's the one I want.

00:16:57.800 --> 00:16:59.480
<v Speaker 0>It just means that I I won't actually

00:16:59.480 --> 00:17:00.955
<v Speaker 0>know the root password which I think is

00:17:00.955 --> 00:17:01.915
<v Speaker 0>good. So

00:17:03.835 --> 00:17:04.714
<v Speaker 0>value.

00:17:05.115 --> 00:17:06.795
<v Speaker 1>And what do do then? You go into

00:17:06.795 --> 00:17:09.675
<v Speaker 1>the secrets to extract it or Well, we

00:17:09.675 --> 00:17:12.315
<v Speaker 0>already have this user with this database configured.

00:17:12.474 --> 00:17:14.635
<v Speaker 0>So we're making sure that we're That's the

00:17:14.635 --> 00:17:16.450
<v Speaker 1>root password. Right. Yeah. Yeah. It's just the

00:17:16.450 --> 00:17:17.970
<v Speaker 0>root password. So Yeah.

00:17:18.770 --> 00:17:20.849
<v Speaker 0>We can just apply that over the top.

00:17:20.930 --> 00:17:23.170
<v Speaker 0>We're gonna get pods watch. We can already

00:17:23.170 --> 00:17:25.170
<v Speaker 0>see that we have one MariaDB running. The

00:17:25.170 --> 00:17:27.170
<v Speaker 0>error one is now terminating

00:17:27.890 --> 00:17:28.450
<v Speaker 0>and

00:17:28.770 --> 00:17:31.565
<v Speaker 0>that is good. Alright. Database.

00:17:31.805 --> 00:17:33.485
<v Speaker 0>Do we require

00:17:33.725 --> 00:17:34.925
<v Speaker 0>anything else?

00:17:37.965 --> 00:17:39.485
<v Speaker 0>What's the queue processing?

00:17:40.285 --> 00:17:42.045
<v Speaker 1>First of all, sorry. What are we using

00:17:42.045 --> 00:17:42.605
<v Speaker 0>for the queue?

00:17:43.780 --> 00:17:46.260
<v Speaker 1>So the queue can just by default use

00:17:46.260 --> 00:17:47.059
<v Speaker 1>MySQL.

00:17:47.700 --> 00:17:49.780
<v Speaker 1>You can use Redis. You can use,

00:17:51.140 --> 00:17:53.140
<v Speaker 1>like, webMQ and all that sort of stuff.

00:17:53.140 --> 00:17:54.980
<v Speaker 1>But by default, you can just make it

00:17:54.980 --> 00:17:57.805
<v Speaker 1>run using the database. So I'm just going

00:17:57.805 --> 00:18:00.285
<v Speaker 1>to assume that that's the sensible way to

00:18:00.285 --> 00:18:00.845
<v Speaker 1>do it.

00:18:02.365 --> 00:18:03.085
<v Speaker 0>Okay.

00:18:03.485 --> 00:18:09.725
<v Speaker 0>And this deployment that we have here let's

00:18:09.420 --> 00:18:10.220
<v Speaker 0>see.

00:18:10.620 --> 00:18:13.980
<v Speaker 0>Replicas one. Actually, got all of them. Sorry.

00:18:13.980 --> 00:18:15.660
<v Speaker 0>Can you say again, Alex? I'm not sure

00:18:15.660 --> 00:18:16.780
<v Speaker 1>why it's got all those things on the

00:18:16.780 --> 00:18:18.140
<v Speaker 1>line. They didn't have that online.

00:18:18.780 --> 00:18:21.260
<v Speaker 0>That is complaining because I am not setting

00:18:21.260 --> 00:18:22.460
<v Speaker 0>the resources

00:18:22.460 --> 00:18:23.500
<v Speaker 0>required.

00:18:24.140 --> 00:18:25.735
<v Speaker 0>So it's telling me that I could straight

00:18:25.735 --> 00:18:27.014
<v Speaker 0>pods I think.

00:18:29.495 --> 00:18:31.255
<v Speaker 0>Let's

00:18:31.255 --> 00:18:31.734
<v Speaker 0>see.

00:18:32.774 --> 00:18:34.774
<v Speaker 0>Resource limits. Yeah. Okay. So

00:18:40.100 --> 00:18:41.540
<v Speaker 0>there we go. So we can minimize that

00:18:41.540 --> 00:18:43.860
<v Speaker 0>to a single line. Yeah. My my editor

00:18:43.860 --> 00:18:46.420
<v Speaker 0>is just like put you know, in production

00:18:46.420 --> 00:18:48.340
<v Speaker 0>you don't want to deploy things without resource

00:18:48.340 --> 00:18:49.780
<v Speaker 0>limits. You don't want them to just start

00:18:49.780 --> 00:18:52.580
<v Speaker 0>consuming all the CPU and memory across your

00:18:52.580 --> 00:18:54.705
<v Speaker 0>cluster. So you would see constraint as to

00:18:54.705 --> 00:18:56.784
<v Speaker 0>something that I consider to be safe.

00:18:57.585 --> 00:18:59.825
<v Speaker 1>Is that per container or is that a

00:18:59.825 --> 00:19:01.825
<v Speaker 1>part or is that per node or Yeah.

00:19:01.825 --> 00:19:03.345
<v Speaker 0>Per container. So I mean, if we look

00:19:03.345 --> 00:19:05.105
<v Speaker 0>at this as an example, right, you know,

00:19:05.105 --> 00:19:06.960
<v Speaker 0>we've got engine x here which

00:19:07.200 --> 00:19:08.960
<v Speaker 0>really requires nothing.

00:19:09.680 --> 00:19:11.760
<v Speaker 0>So we can see that the limits on

00:19:11.760 --> 00:19:12.399
<v Speaker 0>this

00:19:14.400 --> 00:19:15.279
<v Speaker 0>CPU.

00:19:18.400 --> 00:19:20.000
<v Speaker 0>Now complete is only gonna get me so

00:19:20.000 --> 00:19:20.240
<v Speaker 0>far.

00:19:20.955 --> 00:19:22.474
<v Speaker 0>Let's say 500

00:19:22.955 --> 00:19:23.674
<v Speaker 0>mem.

00:19:24.075 --> 00:19:26.394
<v Speaker 0>NGINX probably isn't gonna require

00:19:26.394 --> 00:19:27.354
<v Speaker 0>too much.

00:19:29.115 --> 00:19:31.195
<v Speaker 0>As I connect with it once.

00:19:34.154 --> 00:19:36.154
<v Speaker 0>No memory limit. I did set memory limit.

00:19:37.950 --> 00:19:39.470
<v Speaker 1>Is it memory? Is it memory?

00:19:41.950 --> 00:19:43.630
<v Speaker 0>You're correct. Cool.

00:19:43.630 --> 00:19:44.510
<v Speaker 0>Thanks, man.

00:19:44.990 --> 00:19:46.510
<v Speaker 0>So we can set that there and then

00:19:46.510 --> 00:19:48.750
<v Speaker 0>FPM is probably gonna require more. So I

00:19:48.750 --> 00:19:50.590
<v Speaker 0>think what we'll do just for the

00:19:51.065 --> 00:19:53.625
<v Speaker 0>for fun, let's just actually set these really

00:19:53.785 --> 00:19:56.265
<v Speaker 0>low and we'll see them crash. We'll try

00:19:56.265 --> 00:19:57.705
<v Speaker 0>and boost them if we need to. Let's

00:19:57.705 --> 00:19:58.585
<v Speaker 0>see what happens.

00:19:59.065 --> 00:20:01.065
<v Speaker 1>Yep. Okay. Let's apply

00:20:01.145 --> 00:20:03.385
<v Speaker 0>this. So we're just gonna apply our deployment.

00:20:03.385 --> 00:20:05.625
<v Speaker 0>I don't what have I got wrong?

00:20:15.280 --> 00:20:17.440
<v Speaker 0>Hard to pick it. The error here, it

00:20:17.440 --> 00:20:18.480
<v Speaker 0>seems to be complaining.

00:20:24.055 --> 00:20:27.255
<v Speaker 0>Okay. My limits can't be unmarshaled.

00:20:27.255 --> 00:20:29.575
<v Speaker 0>Quantities must match the regular expression.

00:20:32.695 --> 00:20:34.215
<v Speaker 0>Okay. So it doesn't want m I b.

00:20:34.215 --> 00:20:35.495
<v Speaker 0>I think it just wants m.

00:20:39.809 --> 00:20:41.729
<v Speaker 1>You've got m I b on two places.

00:20:42.530 --> 00:20:43.970
<v Speaker 0>Of course, I do. Thanks.

00:20:45.890 --> 00:20:46.609
<v Speaker 0>Okay.

00:20:47.330 --> 00:20:48.610
<v Speaker 0>Now we can run get pods.

00:20:50.395 --> 00:20:52.395
<v Speaker 0>Kind of expect that to fail. Now we

00:20:52.395 --> 00:20:54.394
<v Speaker 0>got an image pill policy problem.

00:20:54.475 --> 00:20:56.155
<v Speaker 0>You've this set to always. This is a

00:20:56.155 --> 00:20:57.195
<v Speaker 0>local cluster.

00:20:58.075 --> 00:21:00.394
<v Speaker 0>So we actually want this to be never

00:21:01.515 --> 00:21:03.915
<v Speaker 0>because the image doesn't exist on a remote

00:21:03.915 --> 00:21:06.049
<v Speaker 0>repository or remote registry.

00:21:06.770 --> 00:21:08.850
<v Speaker 1>Okay. So we can just apply that over

00:21:08.850 --> 00:21:09.570
<v Speaker 0>the top.

00:21:10.450 --> 00:21:12.130
<v Speaker 0>And so what the way image pool policy

00:21:12.130 --> 00:21:12.850
<v Speaker 0>works

00:21:13.570 --> 00:21:14.929
<v Speaker 0>is that you know,

00:21:15.330 --> 00:21:17.650
<v Speaker 0>actually seems quite healthy with those figures. So

00:21:17.650 --> 00:21:18.690
<v Speaker 0>we'll leave it for now. But I do

00:21:18.690 --> 00:21:20.024
<v Speaker 0>expect that to crash before the end of

00:21:20.024 --> 00:21:22.745
<v Speaker 0>the episode. Well we try running anything. Yeah.

00:21:22.745 --> 00:21:23.224
<v Speaker 0>Yeah.

00:21:23.865 --> 00:21:27.225
<v Speaker 0>You had image pools policy to always and

00:21:27.225 --> 00:21:28.985
<v Speaker 0>there are times and places where you want

00:21:28.985 --> 00:21:30.504
<v Speaker 0>to use always definitely.

00:21:30.504 --> 00:21:32.585
<v Speaker 0>However when you have an image like this

00:21:32.100 --> 00:21:32.500
<v Speaker 0>that

00:21:33.539 --> 00:21:35.299
<v Speaker 0>let's talk about how this is resolved by

00:21:35.299 --> 00:21:36.499
<v Speaker 0>Kubernetes first.

00:21:36.740 --> 00:21:38.580
<v Speaker 0>When you do not provide a host for

00:21:38.580 --> 00:21:39.619
<v Speaker 0>the registry,

00:21:40.340 --> 00:21:42.580
<v Speaker 0>this assumes that your image

00:21:43.220 --> 00:21:44.260
<v Speaker 0>is

00:21:45.755 --> 00:21:46.394
<v Speaker 0>this.

00:21:49.514 --> 00:21:51.355
<v Speaker 0>It assumes that you're an official image on

00:21:51.355 --> 00:21:53.595
<v Speaker 0>the docker registry. This is a hangover from

00:21:53.595 --> 00:21:56.075
<v Speaker 0>when docker was pretty much the the facto

00:21:56.075 --> 00:21:57.434
<v Speaker 0>container runtime

00:21:57.434 --> 00:21:59.034
<v Speaker 0>and that it assumed you were always gonna

00:21:59.034 --> 00:22:00.554
<v Speaker 0>pull from the docker hub

00:22:01.570 --> 00:22:03.090
<v Speaker 0>and that doesn't exist. So when you have

00:22:03.090 --> 00:22:04.770
<v Speaker 0>an image pool policy is always in your

00:22:04.770 --> 00:22:06.610
<v Speaker 0>cluster, the controllers are gonna reach out and

00:22:06.610 --> 00:22:08.530
<v Speaker 0>try to get the latest hash for

00:22:08.690 --> 00:22:10.930
<v Speaker 0>that image, it doesn't exist, it fails and

00:22:10.930 --> 00:22:11.809
<v Speaker 0>it exits.

00:22:12.210 --> 00:22:13.970
<v Speaker 0>So for local images, what you actually need

00:22:13.970 --> 00:22:15.695
<v Speaker 0>to do is image pool policy never and

00:22:15.695 --> 00:22:17.535
<v Speaker 0>just make sure it's available on the host.

00:22:18.415 --> 00:22:20.015
<v Speaker 0>And it's running and it's happy.

00:22:20.975 --> 00:22:21.775
<v Speaker 0>However,

00:22:22.015 --> 00:22:24.735
<v Speaker 0>our application probably isn't gonna work. First we

00:22:24.735 --> 00:22:27.135
<v Speaker 0>haven't done those database migrations that we actually

00:22:27.135 --> 00:22:29.890
<v Speaker 0>wanna be doing And secondly, it doesn't know

00:22:29.890 --> 00:22:31.970
<v Speaker 0>where MariaDB is yet.

00:22:32.370 --> 00:22:33.730
<v Speaker 1>Well, if you try and access it, you

00:22:33.730 --> 00:22:36.690
<v Speaker 1>should I assume get error pages using

00:22:36.690 --> 00:22:39.090
<v Speaker 1>in the level of a page. Yeah. I

00:22:39.090 --> 00:22:40.530
<v Speaker 0>wish I would assume so for sure.

00:22:42.075 --> 00:22:45.114
<v Speaker 0>So let's port forward as this port 80?

00:22:45.115 --> 00:22:45.754
<v Speaker 0>No.

00:22:46.075 --> 00:22:47.674
<v Speaker 1>Yeah. Yeah. Okay.

00:22:48.315 --> 00:22:49.674
<v Speaker 0>Yeah. It is. Okay.

00:22:50.075 --> 00:22:51.674
<v Speaker 0>So we'll make that available on port eighty

00:22:51.674 --> 00:22:52.634
<v Speaker 0>eighty locally.

00:22:54.075 --> 00:22:55.515
<v Speaker 0>I'm gonna browse to there.

00:22:58.700 --> 00:23:00.940
<v Speaker 0>Alright. Well, our first problem is that we

00:23:00.940 --> 00:23:03.340
<v Speaker 0>need somewhere to store our logs and we're

00:23:03.340 --> 00:23:05.820
<v Speaker 0>getting a permission denied on that.

00:23:06.539 --> 00:23:08.220
<v Speaker 0>Let's take a look at what's going on.

00:23:12.835 --> 00:23:15.475
<v Speaker 0>So I'm gonna jump inside of this pod.

00:23:15.875 --> 00:23:18.195
<v Speaker 0>I hope we got access to bash.

00:23:19.235 --> 00:23:21.395
<v Speaker 1>Oh, it's an Alpine one, not mine. Okay.

00:23:21.475 --> 00:23:22.515
<v Speaker 0>So we have access to bash.

00:23:27.570 --> 00:23:29.249
<v Speaker 0>I didn't look in the Dockerfile

00:23:29.330 --> 00:23:30.690
<v Speaker 0>where Well, I

00:23:31.169 --> 00:23:32.369
<v Speaker 1>think. Let me just check.

00:23:35.490 --> 00:23:36.849
<v Speaker 1>Yeah. That's

00:23:38.610 --> 00:23:39.250
<v Speaker 0>our application.

00:23:40.174 --> 00:23:41.934
<v Speaker 1>No. That's missing most of it.

00:23:43.135 --> 00:23:45.455
<v Speaker 0>That's this is engine actual. Right?

00:23:45.855 --> 00:23:47.535
<v Speaker 1>Oh, you mean engine actual? Oh, sorry. I

00:23:47.535 --> 00:23:48.894
<v Speaker 1>put in the Yeah.

00:23:52.415 --> 00:23:53.455
<v Speaker 0>How is this deployed?

00:23:55.259 --> 00:23:57.019
<v Speaker 0>Oh, the names are quite verbose.

00:23:58.220 --> 00:23:58.859
<v Speaker 0>Yeah.

00:23:59.580 --> 00:24:00.860
<v Speaker 1>I didn't know we're gonna not call in

00:24:00.860 --> 00:24:02.620
<v Speaker 1>something just like FPM as a good idea,

00:24:02.620 --> 00:24:05.179
<v Speaker 1>so I wouldn't should focus on it. Okay.

00:24:05.179 --> 00:24:06.645
<v Speaker 0>Here is our application.

00:24:06.885 --> 00:24:08.965
<v Speaker 0>We are actually the root user, so that

00:24:08.965 --> 00:24:09.925
<v Speaker 0>directory

00:24:09.925 --> 00:24:11.125
<v Speaker 0>failure here,

00:24:11.445 --> 00:24:14.245
<v Speaker 0>storage logs. I'm assuming storage doesn't exist.

00:24:14.725 --> 00:24:15.205
<v Speaker 0>No.

00:24:15.765 --> 00:24:17.125
<v Speaker 1>Storage exists by default.

00:24:23.159 --> 00:24:25.960
<v Speaker 1>What the engine access running as WW data

00:24:25.960 --> 00:24:26.840
<v Speaker 1>there into?

00:24:27.960 --> 00:24:29.960
<v Speaker 1>Oh, sorry. The m PHPFPM.

00:24:32.600 --> 00:24:33.479
<v Speaker 0>Let's see.

00:24:34.600 --> 00:24:35.799
<v Speaker 0>Of course. Right.

00:24:37.965 --> 00:24:39.885
<v Speaker 0>So obviously it's a good idea to not

00:24:39.885 --> 00:24:41.565
<v Speaker 0>run containers as well.

00:24:42.925 --> 00:24:44.605
<v Speaker 0>Well, there is a little bit of juggling

00:24:44.605 --> 00:24:46.365
<v Speaker 0>that has to be done with file system

00:24:46.365 --> 00:24:47.245
<v Speaker 0>permissions.

00:24:48.365 --> 00:24:49.645
<v Speaker 0>So let's

00:24:50.450 --> 00:24:53.250
<v Speaker 0>see the best way to handle this

00:24:54.130 --> 00:24:55.730
<v Speaker 0>as to provide

00:24:55.890 --> 00:24:58.930
<v Speaker 0>temporary or ephemeral storage for things like that

00:24:58.930 --> 00:25:01.490
<v Speaker 0>where we can control the volume that we

00:25:01.490 --> 00:25:02.370
<v Speaker 0>wanna make available.

00:25:03.415 --> 00:25:04.695
<v Speaker 0>So let's do

00:25:07.655 --> 00:25:08.695
<v Speaker 0>okay. So

00:25:09.095 --> 00:25:11.015
<v Speaker 0>we can add a volume to our spec.

00:25:12.295 --> 00:25:13.895
<v Speaker 0>Let's call this logs.

00:25:15.015 --> 00:25:17.575
<v Speaker 0>I think it's a name logs

00:25:19.120 --> 00:25:20.720
<v Speaker 0>We want a

00:25:20.960 --> 00:25:22.240
<v Speaker 0>empty there.

00:25:25.040 --> 00:25:27.279
<v Speaker 0>I don't think that needs any configuration,

00:25:27.440 --> 00:25:30.000
<v Speaker 0>size limit, medium, yep. We can just

00:25:33.845 --> 00:25:36.245
<v Speaker 0>I can't remember. When in doubt, look it

00:25:36.245 --> 00:25:38.164
<v Speaker 0>up. Kubernetes empty there.

00:25:40.165 --> 00:25:42.245
<v Speaker 1>Think seems to remember that empty there if

00:25:42.245 --> 00:25:44.085
<v Speaker 1>there's anything that does wipe it out as

00:25:44.085 --> 00:25:45.845
<v Speaker 1>well. Is that correct? So is that Well,

00:25:45.845 --> 00:25:47.445
<v Speaker 0>yeah. We're just using it for cache. Okay.

00:25:47.445 --> 00:25:49.605
<v Speaker 0>It's not Yeah. Until the empty object. So

00:25:50.700 --> 00:25:53.100
<v Speaker 0>for logs and cache, yeah. I'm totally okay

00:25:53.100 --> 00:25:54.620
<v Speaker 0>with that plus to be honest, we're actually

00:25:54.620 --> 00:25:55.659
<v Speaker 0>gonna remove

00:25:55.660 --> 00:25:57.420
<v Speaker 0>your logging to not be to a fail

00:25:57.420 --> 00:25:59.100
<v Speaker 0>and we're gonna move that to standard out.

00:25:59.100 --> 00:26:00.780
<v Speaker 0>So that's maybe something we could do first.

00:26:00.780 --> 00:26:02.940
<v Speaker 0>However, let's let's try and do it this

00:26:02.940 --> 00:26:04.860
<v Speaker 0>way so we can show it working

00:26:07.404 --> 00:26:09.404
<v Speaker 0>And then we'll change it up a little

00:26:09.404 --> 00:26:12.205
<v Speaker 0>bit. So we now have this volume available.

00:26:12.205 --> 00:26:14.284
<v Speaker 0>So empty charges means get create an empty

00:26:14.284 --> 00:26:17.245
<v Speaker 0>volume ephemeral when a container or pod dies,

00:26:17.520 --> 00:26:19.039
<v Speaker 0>get rid of it. That's it.

00:26:20.000 --> 00:26:22.240
<v Speaker 0>Now we wanna provide logging for our FPM.

00:26:22.240 --> 00:26:23.920
<v Speaker 0>So we're gonna come in here and we're

00:26:23.920 --> 00:26:25.440
<v Speaker 0>gonna see if we have oh, not volume

00:26:25.440 --> 00:26:27.200
<v Speaker 0>devices, it's volume mounts.

00:26:28.800 --> 00:26:30.720
<v Speaker 0>We're gonna have logs

00:26:35.054 --> 00:26:39.295
<v Speaker 0>We wanna mode path of our w html

00:26:39.295 --> 00:26:40.254
<v Speaker 0>storage

00:26:41.295 --> 00:26:42.495
<v Speaker 0>logs

00:26:43.030 --> 00:26:45.430
<v Speaker 0>and we don't need any other flags. Now

00:26:45.430 --> 00:26:47.110
<v Speaker 0>this name here just has to match what

00:26:47.110 --> 00:26:48.629
<v Speaker 0>we have here, which does

00:26:48.630 --> 00:26:50.149
<v Speaker 0>meant it to this location.

00:26:51.990 --> 00:26:52.950
<v Speaker 0>There is

00:26:53.670 --> 00:26:56.710
<v Speaker 0>a way to configure the empty their

00:26:57.590 --> 00:27:00.115
<v Speaker 0>permissions via the security context.

00:27:00.595 --> 00:27:02.035
<v Speaker 0>Let's see if we can pull that out

00:27:02.035 --> 00:27:02.914
<v Speaker 0>our fingers.

00:27:04.515 --> 00:27:05.715
<v Speaker 0>So we can set

00:27:07.075 --> 00:27:08.515
<v Speaker 0>let's see if I can find this.

00:27:17.760 --> 00:27:19.680
<v Speaker 0>Alright. Well, let's try that in a second.

00:27:19.680 --> 00:27:21.280
<v Speaker 0>Let's see what we have first because tomorrow's

00:27:21.280 --> 00:27:23.200
<v Speaker 0>I can't remember. We can set effect.

00:27:24.320 --> 00:27:26.080
<v Speaker 0>Maybe it depends on the version of Kubernetes

00:27:26.080 --> 00:27:29.754
<v Speaker 0>I've got. And this is probably

00:27:29.914 --> 00:27:33.034
<v Speaker 0>revealing too much now that that doesn't entirely

00:27:33.034 --> 00:27:34.875
<v Speaker 0>useful to the people watching but the security

00:27:34.875 --> 00:27:35.755
<v Speaker 0>context

00:27:35.755 --> 00:27:37.835
<v Speaker 0>has changed a lot with the recent version

00:27:37.835 --> 00:27:39.674
<v Speaker 0>of Kubernetes which is one twenty which I

00:27:39.674 --> 00:27:41.595
<v Speaker 0>actually think I'm running

00:27:42.300 --> 00:27:43.820
<v Speaker 0>Version.

00:27:45.660 --> 00:27:46.300
<v Speaker 0>Yeah.

00:27:47.100 --> 00:27:48.940
<v Speaker 0>Client and one nineteen there. Okay. So we

00:27:48.940 --> 00:27:49.740
<v Speaker 0>might be okay.

00:27:50.940 --> 00:27:52.540
<v Speaker 0>We'll apply first and then I'll walk through

00:27:52.540 --> 00:27:54.860
<v Speaker 0>the all those things that are going through

00:27:54.375 --> 00:27:55.014
<v Speaker 0>my head.

00:27:56.055 --> 00:27:57.495
<v Speaker 0>So let's get pods

00:27:57.655 --> 00:28:00.055
<v Speaker 0>and Alex keep me honest here if there's

00:28:00.055 --> 00:28:01.895
<v Speaker 0>anything I say that is gibberish just ask

00:28:01.895 --> 00:28:03.575
<v Speaker 0>me to elaborate on it because sometimes I

00:28:03.575 --> 00:28:04.774
<v Speaker 0>can be bad for that.

00:28:05.415 --> 00:28:07.430
<v Speaker 1>That makes sense for me so far. Sweet.

00:28:07.430 --> 00:28:07.990
<v Speaker 0>Okay.

00:28:09.350 --> 00:28:11.990
<v Speaker 0>Well, if anyone watching is like, I have

00:28:11.990 --> 00:28:13.750
<v Speaker 0>no idea what the hell this madman is

00:28:13.750 --> 00:28:15.910
<v Speaker 0>talking about. Just comment and I will explain

00:28:15.910 --> 00:28:16.710
<v Speaker 0>it. I promise.

00:28:17.110 --> 00:28:18.630
<v Speaker 1>Yeah. I've got I've got chat open as

00:28:18.630 --> 00:28:20.230
<v Speaker 1>well. So if any comments,

00:28:20.630 --> 00:28:23.725
<v Speaker 1>ask questions I can. Sweet. So I

00:28:23.805 --> 00:28:25.965
<v Speaker 0>just need this container name.

00:28:27.325 --> 00:28:29.245
<v Speaker 0>I'm gonna change that next time I deploy

00:28:29.245 --> 00:28:29.885
<v Speaker 0>this

00:28:30.045 --> 00:28:31.805
<v Speaker 0>just to be APM so it's easy for

00:28:31.805 --> 00:28:32.925
<v Speaker 0>me to use in the command line.

00:28:33.900 --> 00:28:34.540
<v Speaker 0>So

00:28:35.100 --> 00:28:37.020
<v Speaker 0>we have storage.

00:28:37.020 --> 00:28:39.660
<v Speaker 0>Yeah. When logs are stolen by route so

00:28:39.660 --> 00:28:41.500
<v Speaker 0>we still need to fix that.

00:28:43.260 --> 00:28:45.580
<v Speaker 0>Now they'll be owned by ever the user

00:28:45.580 --> 00:28:47.020
<v Speaker 0>of the processes.

00:28:47.260 --> 00:28:50.015
<v Speaker 0>So we could change the security context of

00:28:50.015 --> 00:28:50.735
<v Speaker 0>that

00:28:51.615 --> 00:28:52.575
<v Speaker 0>and do

00:28:54.815 --> 00:28:56.174
<v Speaker 0>run as

00:28:58.655 --> 00:29:00.575
<v Speaker 0>ID w w data.

00:29:01.295 --> 00:29:02.655
<v Speaker 0>Oh, no. Not gonna say that anymore.

00:29:04.830 --> 00:29:05.870
<v Speaker 0>82.

00:29:06.510 --> 00:29:08.350
<v Speaker 1>Is that ID always going to be the

00:29:08.350 --> 00:29:09.549
<v Speaker 1>same or

00:29:09.950 --> 00:29:12.350
<v Speaker 0>Yeah. It's built into your image. So But

00:29:12.350 --> 00:29:14.590
<v Speaker 1>like, next time you do the build, would

00:29:14.590 --> 00:29:16.029
<v Speaker 1>it be 82 stuff?

00:29:16.510 --> 00:29:17.550
<v Speaker 0>No. That'll be

00:29:18.045 --> 00:29:20.285
<v Speaker 0>set by what the APM, I that that

00:29:20.285 --> 00:29:21.965
<v Speaker 0>I would not expect that to change.

00:29:22.445 --> 00:29:24.045
<v Speaker 0>Right. You should be safe.

00:29:24.925 --> 00:29:26.605
<v Speaker 0>I don't think you can do this. The

00:29:26.605 --> 00:29:29.005
<v Speaker 0>reason why is that this security context runs

00:29:29.005 --> 00:29:32.045
<v Speaker 0>on the the node essentially is configured as

00:29:32.640 --> 00:29:34.880
<v Speaker 0>part of the namespaces that are set up.

00:29:34.880 --> 00:29:35.280
<v Speaker 0>So

00:29:36.320 --> 00:29:38.320
<v Speaker 0>you will need to use the numeric ID.

00:29:39.760 --> 00:29:41.120
<v Speaker 0>Let's try

00:29:41.440 --> 00:29:44.080
<v Speaker 0>and I'm gonna rename this actually. Let's do

00:29:44.080 --> 00:29:45.520
<v Speaker 0>that now. So

00:29:45.680 --> 00:29:47.705
<v Speaker 0>we're gonna just call that's the image Where's

00:29:47.705 --> 00:29:50.185
<v Speaker 0>the name? There we go. Let's just call

00:29:50.185 --> 00:29:51.705
<v Speaker 0>this fpm so it's easier for me to

00:29:51.705 --> 00:29:53.865
<v Speaker 0>get in and we'll call this one

00:29:54.505 --> 00:29:55.544
<v Speaker 0>engine x.

00:29:55.865 --> 00:29:57.544
<v Speaker 0>Okay. Now we can apply.

00:29:59.385 --> 00:30:00.904
<v Speaker 0>Make sure it's running.

00:30:02.585 --> 00:30:04.720
<v Speaker 0>And we're gonna exec

00:30:05.120 --> 00:30:06.000
<v Speaker 0>IT

00:30:06.640 --> 00:30:07.919
<v Speaker 0>and to this

00:30:08.720 --> 00:30:10.799
<v Speaker 0>or FTM and ash.

00:30:12.559 --> 00:30:14.240
<v Speaker 0>And you can see when I type ID,

00:30:14.240 --> 00:30:15.919
<v Speaker 0>I am now WW data.

00:30:16.160 --> 00:30:19.105
<v Speaker 0>So I run PS everything as WW data.

00:30:19.105 --> 00:30:20.224
<v Speaker 0>This is a much

00:30:20.625 --> 00:30:21.504
<v Speaker 0>saner

00:30:21.825 --> 00:30:22.705
<v Speaker 0>configuration

00:30:22.705 --> 00:30:24.705
<v Speaker 0>and I'm hoping the empty dir

00:30:26.465 --> 00:30:28.304
<v Speaker 0>it's done. Okay. So we need to fix

00:30:28.304 --> 00:30:30.065
<v Speaker 0>that. And if you don't have the empty

00:30:30.065 --> 00:30:32.065
<v Speaker 1>dir at all, would that not just make

00:30:32.065 --> 00:30:33.024
<v Speaker 1>it work?

00:30:34.240 --> 00:30:36.720
<v Speaker 1>Because Laravel will create a folder if they

00:30:36.720 --> 00:30:37.519
<v Speaker 1>need it.

00:30:38.320 --> 00:30:39.119
<v Speaker 0>Hey.

00:30:39.440 --> 00:30:41.999
<v Speaker 0>So you're Okay. I'll get date account,

00:30:42.880 --> 00:30:43.519
<v Speaker 1>yeah.

00:30:43.919 --> 00:30:46.640
<v Speaker 0>Yeah. You're you're actually correct. Maybe I'm over

00:30:46.640 --> 00:30:47.760
<v Speaker 0>complicating this a little bit.

00:30:49.505 --> 00:30:50.945
<v Speaker 1>But also, how come

00:30:51.184 --> 00:30:52.784
<v Speaker 1>how come the files are still in by

00:30:52.784 --> 00:30:54.705
<v Speaker 1>root? Is that because when we built the

00:30:54.705 --> 00:30:57.024
<v Speaker 1>image, it was running as roots?

00:30:57.904 --> 00:30:58.704
<v Speaker 0>Yes.

00:31:00.465 --> 00:31:01.105
<v Speaker 1>Because

00:31:01.930 --> 00:31:03.930
<v Speaker 1>do the do those files not need to

00:31:03.930 --> 00:31:05.450
<v Speaker 1>be owned by WW data as well so

00:31:05.450 --> 00:31:09.450
<v Speaker 1>that FDM can process them? No. They're readable

00:31:09.450 --> 00:31:12.090
<v Speaker 0>by anyone. Something else I would normally do

00:31:12.090 --> 00:31:14.410
<v Speaker 0>as well is enable read only file system.

00:31:14.410 --> 00:31:15.674
<v Speaker 0>So, you know I actually don't want you

00:31:15.674 --> 00:31:16.955
<v Speaker 0>to be able to write to anything which

00:31:16.955 --> 00:31:18.554
<v Speaker 0>is why the empty there is important because

00:31:18.554 --> 00:31:20.634
<v Speaker 0>that will be somewhere we can write to.

00:31:21.035 --> 00:31:23.674
<v Speaker 0>Yeah. I just wish I could remember the

00:31:23.674 --> 00:31:25.754
<v Speaker 0>file system thing that I want here.

00:31:26.395 --> 00:31:27.595
<v Speaker 0>So we're gonna look it up.

00:31:29.770 --> 00:31:31.129
<v Speaker 0>So Kubernetes

00:31:31.210 --> 00:31:32.169
<v Speaker 0>security

00:31:32.410 --> 00:31:33.289
<v Speaker 0>context

00:31:34.250 --> 00:31:37.370
<v Speaker 0>and there is an FS use FS group.

00:31:37.370 --> 00:31:38.169
<v Speaker 0>Is that it?

00:31:42.570 --> 00:31:43.530
<v Speaker 1>There's FS group.

00:31:47.505 --> 00:31:49.265
<v Speaker 0>Yeah. Why is that not all completing for

00:31:49.265 --> 00:31:50.705
<v Speaker 0>me? So this might just be the version

00:31:50.705 --> 00:31:52.705
<v Speaker 0>of Kubernetes I've got. It doesn't have this

00:31:52.705 --> 00:31:53.664
<v Speaker 0>flag anymore.

00:31:55.425 --> 00:31:56.705
<v Speaker 0>Let's just put it in and see what

00:31:56.705 --> 00:31:57.025
<v Speaker 0>happens.

00:31:59.780 --> 00:32:01.700
<v Speaker 0>It's really yelling at me, isn't it?

00:32:05.300 --> 00:32:07.620
<v Speaker 0>Unknown field. Okay. Yeah. That must have been

00:32:07.620 --> 00:32:08.899
<v Speaker 0>removed then.

00:32:10.020 --> 00:32:11.460
<v Speaker 0>So let's see.

00:32:12.260 --> 00:32:12.500
<v Speaker 0>Kubernetes

00:32:13.325 --> 00:32:15.005
<v Speaker 0>m two dir user

00:32:15.565 --> 00:32:16.605
<v Speaker 0>permissions.

00:32:18.605 --> 00:32:19.804
<v Speaker 0>There is a way.

00:32:21.405 --> 00:32:22.605
<v Speaker 0>If it's group.

00:32:22.845 --> 00:32:23.405
<v Speaker 0>Damn it.

00:32:26.010 --> 00:32:27.610
<v Speaker 1>Surely, can remove it. They would've got like

00:32:27.610 --> 00:32:29.450
<v Speaker 1>a deprecation flag to tell you what anyone's

00:32:29.450 --> 00:32:29.930
<v Speaker 1>got.

00:32:30.330 --> 00:32:31.690
<v Speaker 1>That seems sensible.

00:32:32.330 --> 00:32:33.050
<v Speaker 0>No.

00:32:38.275 --> 00:32:40.275
<v Speaker 0>So it's definitely FS group which is good

00:32:40.275 --> 00:32:42.035
<v Speaker 0>because I knew that's what it was. I

00:32:42.035 --> 00:32:43.715
<v Speaker 0>just don't know how to hand I mean

00:32:43.715 --> 00:32:45.155
<v Speaker 0>we could use it in a container. I'd

00:32:45.155 --> 00:32:47.154
<v Speaker 0>like to try and avoid that of course.

00:32:49.475 --> 00:32:51.155
<v Speaker 0>In fact, am I doing that in the

00:32:51.155 --> 00:32:52.674
<v Speaker 0>wrong place? That's what it is.

00:32:53.875 --> 00:32:55.179
<v Speaker 0>So this is the security in context for

00:32:55.179 --> 00:32:57.339
<v Speaker 0>the pod. I bet you if I

00:32:59.500 --> 00:33:00.940
<v Speaker 0>yeah. There we go.

00:33:05.100 --> 00:33:06.539
<v Speaker 0>That should create.

00:33:09.445 --> 00:33:11.924
<v Speaker 1>So do we want the user to be

00:33:12.565 --> 00:33:13.364
<v Speaker 1>on

00:33:16.245 --> 00:33:18.325
<v Speaker 1>on the spec, not on the pod or

00:33:18.325 --> 00:33:18.565
<v Speaker 1>not?

00:33:22.340 --> 00:33:24.100
<v Speaker 0>It depends what user we have inside the

00:33:24.100 --> 00:33:26.980
<v Speaker 0>engine x. So let's let's take a look

00:33:26.980 --> 00:33:27.779
<v Speaker 0>at that.

00:33:29.700 --> 00:33:31.780
<v Speaker 0>Take a look at our password file, which

00:33:31.780 --> 00:33:33.379
<v Speaker 0>is our source of users.

00:33:34.420 --> 00:33:36.634
<v Speaker 0>Yeah. Engine x runs as one zero one

00:33:36.795 --> 00:33:39.035
<v Speaker 0>and we don't have access to w w

00:33:39.035 --> 00:33:40.315
<v Speaker 0>w data here.

00:33:40.555 --> 00:33:42.715
<v Speaker 0>At least, I mean, don't

00:33:42.795 --> 00:33:45.835
<v Speaker 0>see it. Yeah. No. W w w data

00:33:45.835 --> 00:33:46.794
<v Speaker 1>is a

00:33:47.195 --> 00:33:47.835
<v Speaker 1>Yeah.

00:33:48.795 --> 00:33:49.835
<v Speaker 0>Let's try this.

00:33:52.280 --> 00:33:53.800
<v Speaker 0>Just curiosity

00:33:53.800 --> 00:33:55.559
<v Speaker 0>more than anything there. So

00:33:57.480 --> 00:34:00.520
<v Speaker 1>because you're using 82 for the FS group,

00:34:00.600 --> 00:34:02.120
<v Speaker 1>but that would be applying it to the

00:34:02.120 --> 00:34:03.240
<v Speaker 1>engine x one as well, would it not?

00:34:03.975 --> 00:34:06.695
<v Speaker 0>Yep. There's no empty terse there. So Ah,

00:34:06.695 --> 00:34:08.775
<v Speaker 1>right. So any applies if there's empty there.

00:34:09.975 --> 00:34:10.775
<v Speaker 1>Well,

00:34:12.775 --> 00:34:13.415
<v Speaker 0>maybe.

00:34:13.815 --> 00:34:15.494
<v Speaker 1>So it will be There we go. So

00:34:15.655 --> 00:34:17.655
<v Speaker 0>So you get empty there on the engine

00:34:17.655 --> 00:34:19.734
<v Speaker 1>x one as well, you wouldn't be able

00:34:19.560 --> 00:34:21.719
<v Speaker 1>specify the f s quick for each individual

00:34:21.719 --> 00:34:23.640
<v Speaker 1>container. I'll pop that, would you?

00:34:24.040 --> 00:34:25.720
<v Speaker 1>Because they have different IDs.

00:34:27.080 --> 00:34:29.000
<v Speaker 0>No. For that, I then be using an

00:34:29.000 --> 00:34:31.320
<v Speaker 0>an a container that has a root user

00:34:31.320 --> 00:34:32.520
<v Speaker 0>that changes the permission

00:34:33.655 --> 00:34:35.895
<v Speaker 0>on the empty there which would be reused

00:34:35.895 --> 00:34:37.815
<v Speaker 0>across the end of containers. We

00:34:39.095 --> 00:34:40.855
<v Speaker 0>can we can cover that if we think

00:34:40.855 --> 00:34:41.575
<v Speaker 0>that it's important

00:34:42.615 --> 00:34:44.375
<v Speaker 0>let's just try and let's try and get

00:34:44.375 --> 00:34:45.975
<v Speaker 0>this working first and then we can maybe

00:34:45.975 --> 00:34:48.070
<v Speaker 0>do some cleanup. So you can see here

00:34:48.070 --> 00:34:49.110
<v Speaker 0>we've got our

00:34:49.750 --> 00:34:51.589
<v Speaker 0>group right access to here. And in fact,

00:34:51.589 --> 00:34:53.510
<v Speaker 0>that empty door just came with explicit permissions

00:34:53.510 --> 00:34:55.429
<v Speaker 0>for anybody anyway. So we actually

00:34:55.989 --> 00:34:57.830
<v Speaker 0>didn't need to do that, but it's I

00:34:57.830 --> 00:34:58.710
<v Speaker 0>think it's that

00:34:59.270 --> 00:35:01.914
<v Speaker 0>configuration parameter hopefully is useful for others if

00:35:01.914 --> 00:35:03.755
<v Speaker 0>you're looking at a similar situation.

00:35:04.234 --> 00:35:05.435
<v Speaker 0>Let's put forward.

00:35:12.075 --> 00:35:13.035
<v Speaker 0>Eighty eighty.

00:35:13.674 --> 00:35:15.035
<v Speaker 0>So we should be able to write the

00:35:15.035 --> 00:35:15.515
<v Speaker 0>logs.

00:35:18.130 --> 00:35:19.810
<v Speaker 0>And now it's complaining that we've got some

00:35:19.810 --> 00:35:21.810
<v Speaker 0>configuration mission. So this is gonna be that

00:35:21.810 --> 00:35:25.010
<v Speaker 0>dot ENV file that you mentioned. Right? Yes.

00:35:24.930 --> 00:35:26.530
<v Speaker 1>Is. Yeah. Okay. So now we need a

00:35:26.530 --> 00:35:27.490
<v Speaker 0>config map.

00:35:29.570 --> 00:35:30.290
<v Speaker 0>So

00:35:32.130 --> 00:35:34.105
<v Speaker 0>let's create config

00:35:34.105 --> 00:35:35.865
<v Speaker 0>map dot YAML

00:35:37.945 --> 00:35:40.505
<v Speaker 0>spec this out. This is our Laravel config

00:35:40.505 --> 00:35:41.225
<v Speaker 0>map.

00:35:45.545 --> 00:35:45.945
<v Speaker 0>Okay.

00:35:48.950 --> 00:35:51.030
<v Speaker 0>So there is a secret value in here.

00:35:51.030 --> 00:35:52.390
<v Speaker 0>I'm not that fussed about it being secret

00:35:52.390 --> 00:35:54.230
<v Speaker 0>because I'm just gonna delete the key and

00:35:54.230 --> 00:35:56.630
<v Speaker 0>play account probably. I'm never gonna use that

00:35:56.630 --> 00:35:59.590
<v Speaker 0>mail thingy again. So I'm just not gonna

00:35:59.590 --> 00:36:01.830
<v Speaker 0>be too fussed about exposing Yeah.

00:36:02.710 --> 00:36:05.885
<v Speaker 1>You could you could just after the after

00:36:05.885 --> 00:36:06.525
<v Speaker 1>this

00:36:07.005 --> 00:36:08.525
<v Speaker 1>screen share, you can just click the refresh

00:36:08.525 --> 00:36:11.085
<v Speaker 1>button and watch out your views. Right. Nice.

00:36:11.085 --> 00:36:11.645
<v Speaker 0>Okay.

00:36:11.965 --> 00:36:12.605
<v Speaker 0>So

00:36:13.085 --> 00:36:15.244
<v Speaker 0>we we really just want this ENV file

00:36:15.244 --> 00:36:16.525
<v Speaker 0>to be exposed

00:36:16.765 --> 00:36:19.930
<v Speaker 0>as environment variables and a conflict map is

00:36:19.930 --> 00:36:21.930
<v Speaker 0>ideal way to do that. Now some of

00:36:21.930 --> 00:36:23.210
<v Speaker 0>this isn't actually

00:36:24.329 --> 00:36:25.769
<v Speaker 0>some of this I would bake into my

00:36:25.769 --> 00:36:27.450
<v Speaker 0>image. I'm not gonna get

00:36:27.769 --> 00:36:29.865
<v Speaker 0>dogmatic about that now and we can talk

00:36:29.865 --> 00:36:30.665
<v Speaker 0>about that

00:36:31.625 --> 00:36:33.065
<v Speaker 0>once I've got it working.

00:36:33.305 --> 00:36:35.225
<v Speaker 0>But like, know, the app name isn't something

00:36:35.225 --> 00:36:37.065
<v Speaker 0>I'm gonna wanna change

00:36:37.225 --> 00:36:38.425
<v Speaker 0>per environment.

00:36:38.425 --> 00:36:40.825
<v Speaker 0>ConfigMaps to me should only ever change

00:36:41.145 --> 00:36:42.025
<v Speaker 0>variance

00:36:42.105 --> 00:36:43.305
<v Speaker 0>for environmental

00:36:43.305 --> 00:36:45.720
<v Speaker 0>things. Everything else should be baked into the

00:36:45.720 --> 00:36:47.080
<v Speaker 0>image. The app name

00:36:47.800 --> 00:36:49.480
<v Speaker 0>yeah. I'd probably put it in the docker

00:36:49.480 --> 00:36:50.600
<v Speaker 0>image somewhere.

00:36:50.840 --> 00:36:53.960
<v Speaker 1>Yeah. There is something built into Laravel already

00:36:53.960 --> 00:36:55.400
<v Speaker 1>as well, which is

00:36:57.720 --> 00:36:59.800
<v Speaker 1>you can sort of cache the

00:37:00.705 --> 00:37:02.145
<v Speaker 1>what I call, config.

00:37:02.545 --> 00:37:03.185
<v Speaker 1>So

00:37:03.985 --> 00:37:05.825
<v Speaker 1>which is the dot m v files and

00:37:05.825 --> 00:37:08.225
<v Speaker 1>other things that are used for the application.

00:37:08.225 --> 00:37:09.425
<v Speaker 1>They can all get cached, and there's a

00:37:09.425 --> 00:37:11.025
<v Speaker 1>command to do that. So it doesn't actually

00:37:11.025 --> 00:37:12.225
<v Speaker 1>read anything from the environment.

00:37:12.830 --> 00:37:15.390
<v Speaker 1>However, that would require it to be then

00:37:15.950 --> 00:37:18.270
<v Speaker 1>stored within the actual image itself, but enough.

00:37:18.270 --> 00:37:18.910
<v Speaker 1>So

00:37:20.110 --> 00:37:22.110
<v Speaker 1>I guess that's a decision that you can

00:37:22.110 --> 00:37:23.710
<v Speaker 1>make. I'm sure there's a

00:37:24.590 --> 00:37:27.150
<v Speaker 0>yeah. We'll talk about that in a moment.

00:37:27.150 --> 00:37:29.265
<v Speaker 0>I'm sure I could, like reject. I'm I'm

00:37:29.265 --> 00:37:30.545
<v Speaker 0>kinda looking at it going, I'll just be

00:37:30.545 --> 00:37:31.745
<v Speaker 0>quicker to type it.

00:37:32.145 --> 00:37:33.345
<v Speaker 0>But it's the better me going, I could

00:37:33.345 --> 00:37:34.625
<v Speaker 0>just reject all this.

00:37:35.585 --> 00:37:37.505
<v Speaker 0>I am gonna do it. So Yeah.

00:37:41.105 --> 00:37:43.700
<v Speaker 0>So what we want to do is

00:37:44.099 --> 00:37:45.299
<v Speaker 1>What you want to do is just change

00:37:45.299 --> 00:37:47.300
<v Speaker 1>the equals to a column enter. Yep.

00:37:52.180 --> 00:37:54.500
<v Speaker 0>Why is that not let me oh, does

00:37:54.500 --> 00:37:56.339
<v Speaker 0>my Versus code VEM not support that?

00:37:59.355 --> 00:38:01.435
<v Speaker 1>Time for trustee command d on

00:38:01.755 --> 00:38:02.635
<v Speaker 1>the guess, you

00:38:03.035 --> 00:38:04.555
<v Speaker 1>know you know it's gonna happen

00:38:05.355 --> 00:38:08.075
<v Speaker 1>or just command f. Yeah. Let's just do

00:38:08.075 --> 00:38:09.195
<v Speaker 0>it this way. So

00:38:10.635 --> 00:38:11.835
<v Speaker 0>change equals

00:38:12.795 --> 00:38:14.075
<v Speaker 0>to a colon space.

00:38:15.010 --> 00:38:15.890
<v Speaker 0>Go.

00:38:21.250 --> 00:38:22.530
<v Speaker 0>And then, okay.

00:38:23.330 --> 00:38:25.970
<v Speaker 0>So now we need to yeah. That needs

00:38:25.970 --> 00:38:27.010
<v Speaker 0>to be a string.

00:38:27.250 --> 00:38:28.530
<v Speaker 0>Billions not supported.

00:38:29.085 --> 00:38:30.765
<v Speaker 0>Now we want our host. So this is

00:38:30.765 --> 00:38:33.485
<v Speaker 0>gonna be the service name that we've provided,

00:38:34.605 --> 00:38:36.285
<v Speaker 0>which I believe is MariaDB.

00:38:36.605 --> 00:38:38.605
<v Speaker 0>We can run get services.

00:38:38.925 --> 00:38:39.405
<v Speaker 0>Yep.

00:38:42.845 --> 00:38:45.220
<v Speaker 0>So we have our database available at that

00:38:45.220 --> 00:38:47.780
<v Speaker 0>name on that port. That's our database. Our

00:38:47.780 --> 00:38:50.340
<v Speaker 0>username is Laravel and our password is Laravel.

00:38:50.820 --> 00:38:52.180
<v Speaker 0>This would be a secret.

00:38:52.500 --> 00:38:54.180
<v Speaker 0>Let's get it working with Sarah and then

00:38:54.180 --> 00:38:56.100
<v Speaker 0>clean it up. Don't let me forget that.

00:38:56.260 --> 00:38:57.620
<v Speaker 1>Yeah. I won't. Don't worry.

00:38:58.020 --> 00:38:59.780
<v Speaker 0>Broadcast driver, I don't know what that means.

00:38:59.780 --> 00:39:00.875
<v Speaker 0>I don't know what that means. Just think

00:39:00.875 --> 00:39:02.635
<v Speaker 1>we don't use it. So I think all

00:39:02.555 --> 00:39:04.155
<v Speaker 1>those ones, we didn't care about that. The

00:39:04.155 --> 00:39:05.435
<v Speaker 1>session driver actually

00:39:06.234 --> 00:39:07.994
<v Speaker 1>we don't we're not using sessions in this.

00:39:07.994 --> 00:39:10.075
<v Speaker 1>We're fine. We can know that. In production,

00:39:10.075 --> 00:39:12.075
<v Speaker 1>I would normally change that to Redis or

00:39:12.075 --> 00:39:12.555
<v Speaker 1>database.

00:39:16.280 --> 00:39:19.640
<v Speaker 0>Do we need the AWS access stuff? No.

00:39:20.680 --> 00:39:23.320
<v Speaker 1>That's just because you can but with

00:39:23.400 --> 00:39:25.720
<v Speaker 1>the file system plug ins, you can upload

00:39:25.720 --> 00:39:27.345
<v Speaker 1>straight to us by

00:39:28.385 --> 00:39:29.265
<v Speaker 1>by

00:39:29.265 --> 00:39:30.625
<v Speaker 1>default, so that's all.

00:39:35.745 --> 00:39:38.225
<v Speaker 1>How come it's complaining about numbers like 25,

00:39:38.225 --> 00:39:39.025
<v Speaker 1>20 five?

00:39:40.065 --> 00:39:42.740
<v Speaker 1>I thought YAML supports integers and that.

00:39:44.020 --> 00:39:44.900
<v Speaker 0>It does.

00:39:48.660 --> 00:39:49.860
<v Speaker 0>What's it saying?

00:39:52.660 --> 00:39:55.220
<v Speaker 0>I think the contact map just expects a

00:39:54.525 --> 00:39:56.445
<v Speaker 0>string to be honest. Yeah.

00:39:58.285 --> 00:40:00.845
<v Speaker 1>Like everything strings is We're not running memcached.

00:40:00.845 --> 00:40:02.365
<v Speaker 0>We're not running reddish.

00:40:03.005 --> 00:40:05.484
<v Speaker 1>No. I can also go. Alright.

00:40:05.484 --> 00:40:06.845
<v Speaker 0>I think

00:40:08.740 --> 00:40:11.060
<v Speaker 0>that will be enough. So let's apply that

00:40:11.060 --> 00:40:11.700
<v Speaker 0>now

00:40:12.260 --> 00:40:14.420
<v Speaker 0>and then update our deployment to use it.

00:40:15.300 --> 00:40:17.300
<v Speaker 0>So this is really easy.

00:40:19.860 --> 00:40:21.780
<v Speaker 0>What needs to is it NGINX or is

00:40:21.780 --> 00:40:22.660
<v Speaker 0>it FPM?

00:40:22.660 --> 00:40:22.980
<v Speaker 0>Both?

00:40:23.694 --> 00:40:25.694
<v Speaker 1>FPM would be what requires it because it's

00:40:25.694 --> 00:40:29.135
<v Speaker 1>PHP for a process that's running. Yes. Okay.

00:40:29.135 --> 00:40:33.214
<v Speaker 0>So ENV from ConfigMapRef.

00:40:38.870 --> 00:40:41.350
<v Speaker 0>The name of the conflict map. Oh, what

00:40:41.350 --> 00:40:42.870
<v Speaker 0>did they call it? Laravel?

00:40:43.030 --> 00:40:43.750
<v Speaker 1>Yep.

00:40:45.270 --> 00:40:46.070
<v Speaker 0>Yep.

00:40:47.910 --> 00:40:49.350
<v Speaker 1>So does that just, like, basically

00:40:50.205 --> 00:40:51.165
<v Speaker 1>export

00:40:51.485 --> 00:40:53.885
<v Speaker 1>inside of the image before it was it?

00:40:54.445 --> 00:40:57.005
<v Speaker 0>Yes. It will take all of these keys

00:40:57.005 --> 00:40:58.765
<v Speaker 0>and make them environment variables, which is how

00:40:58.765 --> 00:41:00.365
<v Speaker 0>Laravel works. I don't even need to change

00:41:00.365 --> 00:41:01.085
<v Speaker 0>anything.

00:41:01.405 --> 00:41:01.805
<v Speaker 1>Yep.

00:41:03.740 --> 00:41:04.380
<v Speaker 0>So

00:41:04.540 --> 00:41:06.460
<v Speaker 0>let's reapply our deployment.

00:41:08.619 --> 00:41:10.940
<v Speaker 1>So that would behave basically the exact same

00:41:10.940 --> 00:41:13.339
<v Speaker 1>way as if you'd baked into the image

00:41:13.339 --> 00:41:15.339
<v Speaker 1>before you deployed it at all, I guess.

00:41:15.495 --> 00:41:17.735
<v Speaker 1>It would just be a Linux

00:41:18.375 --> 00:41:21.335
<v Speaker 1>environment variable. Mhmm. Yep. Alright.

00:41:23.415 --> 00:41:25.335
<v Speaker 0>Let's see how far we are now.

00:41:27.095 --> 00:41:29.095
<v Speaker 1>The application key might not like that. I'm

00:41:29.095 --> 00:41:30.455
<v Speaker 1>not sure. Oh, okay.

00:41:33.380 --> 00:41:34.980
<v Speaker 0>Let's check our logs.

00:41:36.259 --> 00:41:37.220
<v Speaker 0>Yeah.

00:41:37.779 --> 00:41:39.380
<v Speaker 0>But that's one of the things I was

00:41:39.380 --> 00:41:41.460
<v Speaker 0>gonna complain about next, right, is we'd actually

00:41:41.460 --> 00:41:43.059
<v Speaker 0>don't want to log to a file in

00:41:43.059 --> 00:41:44.579
<v Speaker 0>any container environment.

00:41:44.579 --> 00:41:47.095
<v Speaker 0>That is generally a full path. And you

00:41:47.095 --> 00:41:48.695
<v Speaker 0>wanna log the standard out.

00:41:48.775 --> 00:41:49.335
<v Speaker 0>So

00:41:50.135 --> 00:41:52.535
<v Speaker 0>first let's look at the logs and then

00:41:54.375 --> 00:41:55.495
<v Speaker 0>change that.

00:41:55.895 --> 00:41:56.295
<v Speaker 0>So

00:41:58.135 --> 00:41:59.895
<v Speaker 0>our problem is

00:42:01.000 --> 00:42:02.520
<v Speaker 0>it's trying to write to something and we

00:42:02.520 --> 00:42:04.280
<v Speaker 0>have a read only fail system.

00:42:04.600 --> 00:42:06.120
<v Speaker 0>What's it trying to write to?

00:42:08.840 --> 00:42:10.920
<v Speaker 1>Oh, it caches your views.

00:42:11.480 --> 00:42:13.800
<v Speaker 1>So framework views is like

00:42:14.585 --> 00:42:17.625
<v Speaker 1>it's a cache thing because it comes with

00:42:17.625 --> 00:42:20.585
<v Speaker 1>something called blade, which is a template language

00:42:20.585 --> 00:42:22.265
<v Speaker 1>like Twig and that sort of stuff on

00:42:23.145 --> 00:42:24.505
<v Speaker 1>that sort of stuff thing. So it tries

00:42:24.505 --> 00:42:26.025
<v Speaker 1>to write those two

00:42:26.510 --> 00:42:29.069
<v Speaker 1>problems. Yes. And I don't think there's always

00:42:29.069 --> 00:42:30.990
<v Speaker 1>an opportunity as I have no idea how

00:42:30.990 --> 00:42:32.589
<v Speaker 1>to do that. But that's just this framework

00:42:32.589 --> 00:42:34.510
<v Speaker 0>folder. Right? Yeah.

00:42:36.750 --> 00:42:38.030
<v Speaker 1>Yeah. I assume that all of those have

00:42:38.030 --> 00:42:39.950
<v Speaker 1>been trying to do it into sessions, cache.

00:42:40.265 --> 00:42:41.705
<v Speaker 1>I don't know what testing is as you

00:42:41.785 --> 00:42:42.825
<v Speaker 1>when you want tests

00:42:43.225 --> 00:42:46.025
<v Speaker 1>and also views. Okay. So that's all empty.

00:42:46.025 --> 00:42:47.945
<v Speaker 0>So what I'm gonna do is empty that

00:42:47.945 --> 00:42:48.745
<v Speaker 0>too.

00:42:50.905 --> 00:42:51.545
<v Speaker 1>Yep.

00:42:51.785 --> 00:42:53.705
<v Speaker 1>Believe that they wanna try and keep this

00:42:53.705 --> 00:42:55.170
<v Speaker 0>as a read only file system for as

00:42:55.170 --> 00:42:57.170
<v Speaker 0>long as possible before I've met defeat.

00:42:58.849 --> 00:43:00.690
<v Speaker 0>So we'll bring in this cache

00:43:01.250 --> 00:43:02.690
<v Speaker 0>and we're gonna mount that.

00:43:04.450 --> 00:43:07.170
<v Speaker 1>So would you normally have like a

00:43:07.825 --> 00:43:09.665
<v Speaker 1>a temp to sort of things that could

00:43:09.665 --> 00:43:11.025
<v Speaker 1>be written to for

00:43:11.665 --> 00:43:13.265
<v Speaker 1>say, if somebody was to upload a file

00:43:13.265 --> 00:43:15.025
<v Speaker 1>that needed processing before getting moved on to

00:43:15.025 --> 00:43:16.385
<v Speaker 1>that s three, would you have, like, a

00:43:16.385 --> 00:43:17.105
<v Speaker 1>temp to

00:43:17.585 --> 00:43:19.185
<v Speaker 1>configure which is Rawkode and then we got?

00:43:20.880 --> 00:43:23.440
<v Speaker 0>Yes. So I would definitely use the volumes

00:43:23.440 --> 00:43:25.200
<v Speaker 0>key up here to provide something that was

00:43:25.200 --> 00:43:27.200
<v Speaker 0>ephemeral. Now I would use an empty dir

00:43:27.200 --> 00:43:30.240
<v Speaker 0>definitely for like a local Kubernetes environment and

00:43:30.240 --> 00:43:33.455
<v Speaker 0>some production environments. I may like if I

00:43:33.455 --> 00:43:35.615
<v Speaker 0>need to guarantee that file exists after a

00:43:35.615 --> 00:43:37.935
<v Speaker 0>pod restart, I'd probably use like a persistent

00:43:37.935 --> 00:43:40.015
<v Speaker 0>volume or a host path depending on how

00:43:40.015 --> 00:43:42.255
<v Speaker 0>my cluster is configured but I would use

00:43:42.255 --> 00:43:44.175
<v Speaker 0>a volume of some kind for anything that

00:43:44.175 --> 00:43:45.455
<v Speaker 0>needs right access.

00:43:45.695 --> 00:43:48.170
<v Speaker 0>The reason being this like, you know most

00:43:48.170 --> 00:43:50.810
<v Speaker 0>attacks especially against PHP

00:43:50.810 --> 00:43:54.250
<v Speaker 0>based content management systems is generally through some

00:43:54.410 --> 00:43:57.210
<v Speaker 0>really contrived and illegal upload that executes an

00:43:57.210 --> 00:43:59.530
<v Speaker 0>arbitrary script and then rewrites over your code

00:44:00.105 --> 00:44:01.705
<v Speaker 0>And you could just say you know, that's

00:44:01.705 --> 00:44:03.865
<v Speaker 0>one read only file system argument

00:44:04.025 --> 00:44:06.025
<v Speaker 0>to stop solve that. As long as you

00:44:06.025 --> 00:44:07.625
<v Speaker 0>don't mind going through the process

00:44:09.065 --> 00:44:10.505
<v Speaker 0>of making sure you could write to your

00:44:10.505 --> 00:44:12.185
<v Speaker 0>logs and your cache which I'm gonna try

00:44:12.185 --> 00:44:12.665
<v Speaker 0>and do now.

00:44:14.790 --> 00:44:15.830
<v Speaker 0>Let's try.

00:44:16.550 --> 00:44:17.590
<v Speaker 0>We deploy.

00:44:18.550 --> 00:44:20.230
<v Speaker 0>Let's get our pods. Oh, and let's change

00:44:20.230 --> 00:44:21.830
<v Speaker 0>the login to standard out. Like, we don't

00:44:21.830 --> 00:44:23.430
<v Speaker 0>wanna log to a file anyway. We wanna

00:44:23.430 --> 00:44:25.110
<v Speaker 0>be able to use the logs command.

00:44:25.590 --> 00:44:26.390
<v Speaker 0>So

00:44:26.390 --> 00:44:27.990
<v Speaker 0>how do I configure that with Laravel?

00:44:28.775 --> 00:44:31.735
<v Speaker 1>Change the ENV to STDERR.

00:44:31.735 --> 00:44:32.935
<v Speaker 1>Just send it out.

00:44:33.975 --> 00:44:36.295
<v Speaker 0>So what am I changing? Change stack there

00:44:36.295 --> 00:44:38.615
<v Speaker 1>to STDERR.

00:44:40.855 --> 00:44:42.615
<v Speaker 0>Is that correct? One one d.

00:44:43.390 --> 00:44:45.790
<v Speaker 0>Awesome. Okay. Yeah. Yeah. Yeah.

00:44:46.990 --> 00:44:47.870
<v Speaker 1>That was it.

00:44:49.630 --> 00:44:51.150
<v Speaker 1>There's also I'm sure that's your rate to

00:44:51.150 --> 00:44:53.310
<v Speaker 0>standard out. Right? Yeah. That just send it

00:44:53.310 --> 00:44:55.150
<v Speaker 1>straight to standard out. Okay. Let's do that.

00:44:57.654 --> 00:44:58.775
<v Speaker 0>Let's reapply

00:44:59.654 --> 00:45:01.335
<v Speaker 0>and make sure I'm in the position that

00:45:01.335 --> 00:45:02.935
<v Speaker 0>I kinda wanna be in. So

00:45:03.734 --> 00:45:05.575
<v Speaker 0>I'll yeah. That's the config map I need

00:45:05.575 --> 00:45:06.454
<v Speaker 0>to deploy.

00:45:08.295 --> 00:45:10.375
<v Speaker 0>And then I'll easily delete the pod to

00:45:10.375 --> 00:45:11.575
<v Speaker 0>get that new configuration.

00:45:17.600 --> 00:45:19.040
<v Speaker 0>So now I should

00:45:19.120 --> 00:45:21.360
<v Speaker 0>be able to run logs against this.

00:45:23.920 --> 00:45:25.600
<v Speaker 0>And I have the FPM logs.

00:45:25.920 --> 00:45:27.840
<v Speaker 1>Now if you hit the

00:45:29.125 --> 00:45:30.005
<v Speaker 1>browser,

00:45:30.005 --> 00:45:32.085
<v Speaker 1>you should see something logged, I think, because

00:45:32.085 --> 00:45:33.765
<v Speaker 1>I don't think we fixed the error that

00:45:33.765 --> 00:45:36.005
<v Speaker 1>we have before, did we? I

00:45:36.164 --> 00:45:36.965
<v Speaker 0>hope so.

00:45:37.365 --> 00:45:39.125
<v Speaker 0>Let me run the port forward from another

00:45:39.125 --> 00:45:39.925
<v Speaker 0>location.

00:45:40.325 --> 00:45:41.125
<v Speaker 0>We

00:45:41.125 --> 00:45:42.244
<v Speaker 0>can keep our logs up.

00:45:43.730 --> 00:45:45.410
<v Speaker 0>I was gonna split my terminal, but I

00:45:45.410 --> 00:45:47.250
<v Speaker 0>think that's just gonna make it more confusing.

00:45:48.849 --> 00:45:50.450
<v Speaker 0>Alright. So there is our logs.

00:45:57.355 --> 00:45:59.275
<v Speaker 1>But something's logging. So that's

00:45:59.835 --> 00:46:01.595
<v Speaker 1>looks like that's in the next setup.

00:46:03.515 --> 00:46:05.914
<v Speaker 0>No. No. That's FBM. And we got a

00:46:05.914 --> 00:46:09.035
<v Speaker 0>500. Okay. So the Laravel log configuration is

00:46:09.035 --> 00:46:10.040
<v Speaker 0>obviously obviously not

00:46:10.920 --> 00:46:12.680
<v Speaker 0>quite as simple as that.

00:46:13.160 --> 00:46:16.040
<v Speaker 0>I'm assuming that we're still gonna have something

00:46:16.040 --> 00:46:17.800
<v Speaker 0>in that storage

00:46:17.800 --> 00:46:18.760
<v Speaker 0>logs.

00:46:21.480 --> 00:46:21.800
<v Speaker 0>Yeah.

00:46:23.075 --> 00:46:24.195
<v Speaker 0>Yep.

00:46:30.115 --> 00:46:31.875
<v Speaker 0>Let's just cat it. So

00:46:33.635 --> 00:46:34.755
<v Speaker 0>what failed

00:46:36.995 --> 00:46:38.355
<v Speaker 0>on car and valley?

00:46:40.650 --> 00:46:42.250
<v Speaker 1>Hang on. Sorry. You just put unable to

00:46:42.250 --> 00:46:44.810
<v Speaker 0>create Unable to create logger. Standard out is

00:46:44.810 --> 00:46:45.690
<v Speaker 0>not defined.

00:46:46.090 --> 00:46:49.290
<v Speaker 0>Just oh, so I trusted you. So

00:46:50.410 --> 00:46:51.850
<v Speaker 1>It's option. I'm looking at the code now.

00:46:51.850 --> 00:46:52.570
<v Speaker 0>It is there.

00:46:56.075 --> 00:46:58.635
<v Speaker 1>If you open up the code in configs

00:46:58.635 --> 00:47:00.474
<v Speaker 1>last I'd expect it to be dev standard

00:47:00.474 --> 00:47:01.115
<v Speaker 0>out.

00:47:01.915 --> 00:47:02.474
<v Speaker 0>Like that.

00:47:06.330 --> 00:47:08.490
<v Speaker 0>That's good. That's what it's here for. Right?

00:47:08.490 --> 00:47:10.730
<v Speaker 0>So log to standard out.

00:47:25.674 --> 00:47:27.275
<v Speaker 1>And there's another option which we can just

00:47:27.275 --> 00:47:28.875
<v Speaker 1>use our log, which will put it in

00:47:28.875 --> 00:47:31.674
<v Speaker 1>the FPM log by default, and that should

00:47:31.674 --> 00:47:33.780
<v Speaker 1>put it into the standard log for standard

00:47:33.780 --> 00:47:34.500
<v Speaker 1>error log.

00:47:36.100 --> 00:47:36.980
<v Speaker 0>Alright.

00:47:37.220 --> 00:47:39.060
<v Speaker 1>What we have already should work, so I

00:47:39.060 --> 00:47:39.780
<v Speaker 1>don't understand it.

00:47:52.164 --> 00:47:53.285
<v Speaker 1>That won't work

00:47:54.244 --> 00:47:55.445
<v Speaker 1>because that

00:47:55.845 --> 00:47:58.484
<v Speaker 1>where it's being passed through to monologue, the

00:47:58.644 --> 00:47:59.605
<v Speaker 1>PHP

00:48:00.400 --> 00:48:01.600
<v Speaker 1>logging library.

00:48:04.560 --> 00:48:05.440
<v Speaker 0>I see.

00:48:12.560 --> 00:48:12.960
<v Speaker 0>Okay.

00:48:15.265 --> 00:48:16.225
<v Speaker 0>FPM.

00:48:22.385 --> 00:48:23.025
<v Speaker 0>The

00:48:24.065 --> 00:48:25.744
<v Speaker 0>pod. Yeah.

00:48:25.744 --> 00:48:26.945
<v Speaker 0>We're gonna have to add a service so

00:48:26.945 --> 00:48:28.465
<v Speaker 0>I don't have to keep doing that, but

00:48:28.465 --> 00:48:29.905
<v Speaker 0>let's do it one more time for now.

00:48:38.520 --> 00:48:39.400
<v Speaker 1>Alright.

00:48:42.515 --> 00:48:43.875
<v Speaker 0>Let's go back in.

00:48:49.315 --> 00:48:52.195
<v Speaker 0>FPM

00:48:52.435 --> 00:48:54.515
<v Speaker 0>storage

00:48:54.515 --> 00:48:55.475
<v Speaker 0>logs

00:48:55.635 --> 00:48:58.995
<v Speaker 0>cat

00:48:56.529 --> 00:48:57.250
<v Speaker 0>log.

00:48:58.450 --> 00:49:00.769
<v Speaker 0>Did that fail to set up? Please provide

00:49:00.769 --> 00:49:02.290
<v Speaker 0>a valid cache path.

00:49:06.609 --> 00:49:08.210
<v Speaker 0>Unable to create configured logger.

00:49:08.825 --> 00:49:10.825
<v Speaker 1>Is this because of the empty dev that

00:49:10.825 --> 00:49:12.744
<v Speaker 1>you created framework? I think it expects for

00:49:12.744 --> 00:49:14.265
<v Speaker 1>the cash flow to exist. You might create

00:49:14.265 --> 00:49:15.385
<v Speaker 1>multiple entities.

00:49:16.105 --> 00:49:17.625
<v Speaker 1>I don't think it might not create that

00:49:17.625 --> 00:49:18.585
<v Speaker 1>file folder.

00:49:19.144 --> 00:49:21.305
<v Speaker 0>Okay. I'm also worried about this logger.

00:49:21.704 --> 00:49:23.710
<v Speaker 1>Yeah. No. That that's definitely an issue.

00:49:24.910 --> 00:49:27.070
<v Speaker 1>So I need to create a good logger,

00:49:27.230 --> 00:49:28.190
<v Speaker 1>but to me

00:49:29.150 --> 00:49:31.630
<v Speaker 1>I'll

00:49:31.630 --> 00:49:33.230
<v Speaker 0>leave that as an exercise for another day

00:49:33.230 --> 00:49:34.750
<v Speaker 0>set up logging rather

00:49:34.750 --> 00:49:37.390
<v Speaker 0>than And if you change up to syslog,

00:49:37.870 --> 00:49:39.835
<v Speaker 1>you just try that one last one last

00:49:39.835 --> 00:49:41.195
<v Speaker 1>thing for syslog because that should put it

00:49:41.195 --> 00:49:43.435
<v Speaker 1>straight through as well, would it not? No.

00:49:43.435 --> 00:49:45.435
<v Speaker 0>Syslog may look for syslog in the container

00:49:45.435 --> 00:49:46.475
<v Speaker 0>which one exists.

00:49:47.035 --> 00:49:48.155
<v Speaker 1>Oh, okay.

00:49:48.635 --> 00:49:50.075
<v Speaker 0>Alright. Let's ignore it.

00:49:55.030 --> 00:49:56.550
<v Speaker 0>And let's do

00:50:00.150 --> 00:50:02.470
<v Speaker 0>cash and we're gonna need sessions.

00:50:07.750 --> 00:50:09.525
<v Speaker 0>And again, I don't really wanna spend too

00:50:09.525 --> 00:50:11.205
<v Speaker 0>much time fighting on things that aren't that

00:50:11.205 --> 00:50:13.045
<v Speaker 0>important. So I can always just disable that

00:50:13.045 --> 00:50:14.724
<v Speaker 0>if this doesn't work. Is there anything else

00:50:14.724 --> 00:50:16.565
<v Speaker 0>required in the framework directory?

00:50:18.964 --> 00:50:19.925
<v Speaker 1>Views.

00:50:20.484 --> 00:50:21.125
<v Speaker 0>Views.

00:50:23.140 --> 00:50:24.660
<v Speaker 1>I think there's one called testing as well.

00:50:24.660 --> 00:50:25.860
<v Speaker 1>We measure main model. I don't know what

00:50:25.860 --> 00:50:26.820
<v Speaker 1>testing is.

00:50:31.300 --> 00:50:32.980
<v Speaker 0>Right. Do I have them here?

00:50:34.420 --> 00:50:35.380
<v Speaker 0>Storage,

00:50:35.860 --> 00:50:39.155
<v Speaker 0>framework, cache sessions, testing, Right. Okay.

00:50:42.115 --> 00:50:44.195
<v Speaker 0>I mean, I I would just expect it

00:50:44.195 --> 00:50:45.955
<v Speaker 0>to create them if they're not there. I

00:50:45.955 --> 00:50:47.635
<v Speaker 0>find that. I I I do as well,

00:50:47.635 --> 00:50:49.155
<v Speaker 1>but that's all I can

00:50:50.290 --> 00:50:50.930
<v Speaker 1>choose.

00:50:51.329 --> 00:50:51.970
<v Speaker 0>Okay.

00:50:52.130 --> 00:50:53.570
<v Speaker 0>Modifier deployment.

00:50:55.490 --> 00:50:57.410
<v Speaker 0>Oh, yeah. I've got to actually add them.

00:51:06.425 --> 00:51:08.025
<v Speaker 0>So we need testing

00:51:10.265 --> 00:51:11.465
<v Speaker 0>sessions.

00:51:13.225 --> 00:51:13.865
<v Speaker 0>Yes.

00:51:16.425 --> 00:51:16.905
<v Speaker 0>Alright.

00:51:17.720 --> 00:51:18.840
<v Speaker 0>Take 16.

00:51:22.200 --> 00:51:24.039
<v Speaker 0>But we're not gonna get any logs. Okay.

00:51:24.039 --> 00:51:24.680
<v Speaker 0>So

00:51:25.640 --> 00:51:27.160
<v Speaker 0>let's just fix the port forward.

00:51:38.984 --> 00:51:40.984
<v Speaker 0>Right. That's progress. We're not gonna white screen

00:51:40.984 --> 00:51:41.785
<v Speaker 0>anymore.

00:51:42.105 --> 00:51:42.825
<v Speaker 0>So

00:51:44.265 --> 00:51:45.464
<v Speaker 0>let's see where we are.

00:51:46.089 --> 00:51:47.050
<v Speaker 0>FPM

00:51:47.050 --> 00:51:50.010
<v Speaker 0>ash storage logs cat

00:51:50.010 --> 00:51:50.730
<v Speaker 0>log.

00:51:51.130 --> 00:51:52.570
<v Speaker 0>So now it's complaining.

00:51:53.290 --> 00:51:55.210
<v Speaker 0>Oh, yes. So it doesn't like my I

00:51:55.210 --> 00:51:57.050
<v Speaker 0>just put in a random string there. What's

00:51:57.050 --> 00:51:58.170
<v Speaker 0>that supposed to be?

00:51:58.650 --> 00:52:00.835
<v Speaker 1>There's some r sank commands. HP r s

00:52:00.835 --> 00:52:02.515
<v Speaker 1>n key colon generate.

00:52:03.235 --> 00:52:04.675
<v Speaker 1>If you just run that inside of the

00:52:04.675 --> 00:52:05.955
<v Speaker 1>APM container,

00:52:06.355 --> 00:52:07.315
<v Speaker 1>that should

00:52:11.635 --> 00:52:12.515
<v Speaker 1>key colon generate.

00:52:22.640 --> 00:52:24.640
<v Speaker 0>It's trying to write it to ENV. Don't

00:52:25.040 --> 00:52:26.480
<v Speaker 1>I'll create one locally and just send it

00:52:26.480 --> 00:52:26.960
<v Speaker 1>here.

00:52:27.760 --> 00:52:29.359
<v Speaker 0>Can I not just print it out?

00:52:30.435 --> 00:52:32.995
<v Speaker 1>Yeah. Right. Sure. Well, there we go. Okay.

00:52:32.995 --> 00:52:34.275
<v Speaker 1>Okay. Cool. Nice.

00:52:35.475 --> 00:52:37.315
<v Speaker 0>I hate it when tools are fighting against

00:52:37.315 --> 00:52:38.515
<v Speaker 0>me rather than

00:52:38.835 --> 00:52:40.755
<v Speaker 0>doing my bidding. Right. Okay.

00:52:44.770 --> 00:52:46.450
<v Speaker 1>I've noticed it with three sixty four before

00:52:46.450 --> 00:52:47.330
<v Speaker 1>that's interesting.

00:52:48.370 --> 00:52:50.290
<v Speaker 0>Or maybe that's just a help. No. No.

00:52:50.290 --> 00:52:51.730
<v Speaker 1>It's all up. That's fine.

00:52:52.370 --> 00:52:53.090
<v Speaker 1>Alright.

00:52:55.410 --> 00:52:57.090
<v Speaker 0>Let's just apply that whole directory for a

00:52:57.090 --> 00:52:57.810
<v Speaker 0>bit of quickness.

00:52:58.655 --> 00:53:00.415
<v Speaker 0>Make sure our pods rotate.

00:53:02.095 --> 00:53:03.695
<v Speaker 0>Oh, I only change the config map. So

00:53:03.695 --> 00:53:05.535
<v Speaker 0>I need to delete my pods myself.

00:53:10.415 --> 00:53:12.650
<v Speaker 0>And now we can put forward again.

00:53:18.490 --> 00:53:19.610
<v Speaker 0>And finally,

00:53:19.610 --> 00:53:21.370
<v Speaker 0>I'm really hoping we see a database migration

00:53:21.370 --> 00:53:22.330
<v Speaker 0>that are here.

00:53:24.410 --> 00:53:26.490
<v Speaker 0>Oh, our application worked. It

00:53:27.210 --> 00:53:28.875
<v Speaker 1>really might get nice because we're not acquiring

00:53:28.875 --> 00:53:29.995
<v Speaker 1>any databases

00:53:29.995 --> 00:53:32.235
<v Speaker 1>at the moment. But that is proving that

00:53:32.235 --> 00:53:34.555
<v Speaker 1>the asset completion works as well because

00:53:34.715 --> 00:53:37.755
<v Speaker 1>that's using tailwind to get the data there.

00:53:38.555 --> 00:53:41.035
<v Speaker 0>Alright. It's production now. I'll see you later.

00:53:41.035 --> 00:53:41.355
<v Speaker 0>Thanks.

00:53:45.510 --> 00:53:47.270
<v Speaker 1>So that's actually covered one of the things

00:53:47.270 --> 00:53:49.270
<v Speaker 1>on the list anyway, though. That's the secrets

00:53:49.270 --> 00:53:52.390
<v Speaker 1>and environment stuff. There is something on my

00:53:52.390 --> 00:53:54.390
<v Speaker 1>list, has happened a few times whilst you've

00:53:54.390 --> 00:53:55.589
<v Speaker 1>been doing that, which

00:53:56.065 --> 00:53:57.425
<v Speaker 1>I assume is not the right way of

00:53:57.425 --> 00:53:59.665
<v Speaker 1>doing it. You've just been deleting pods

00:53:59.905 --> 00:54:02.625
<v Speaker 1>to get it to basically redeploy.

00:54:02.865 --> 00:54:03.585
<v Speaker 0>Uh-huh.

00:54:04.145 --> 00:54:05.185
<v Speaker 1>Probably

00:54:06.225 --> 00:54:07.505
<v Speaker 1>a better way of doing it than that,

00:54:07.505 --> 00:54:07.905
<v Speaker 1>I assume.

00:54:09.030 --> 00:54:10.230
<v Speaker 0>Unfortunately,

00:54:10.390 --> 00:54:12.790
<v Speaker 0>not. So the the problem is is that

00:54:13.190 --> 00:54:15.030
<v Speaker 0>when you modify a config map, it gets

00:54:15.030 --> 00:54:17.830
<v Speaker 0>updated in real time pretty much within your

00:54:17.830 --> 00:54:18.550
<v Speaker 0>deployment.

00:54:20.150 --> 00:54:21.990
<v Speaker 0>So like the files will just be synced

00:54:21.990 --> 00:54:23.270
<v Speaker 0>up to there as a fail man. I

00:54:23.270 --> 00:54:24.390
<v Speaker 0>think the environment variables.

00:54:25.404 --> 00:54:26.924
<v Speaker 0>I think they still update in real time,

00:54:26.924 --> 00:54:28.525
<v Speaker 0>I can confirm but I'm not a %

00:54:28.525 --> 00:54:31.164
<v Speaker 0>confident. Your application is really expected to notice

00:54:31.164 --> 00:54:32.525
<v Speaker 0>those changes and reload

00:54:32.845 --> 00:54:34.445
<v Speaker 0>but most applications don't.

00:54:35.244 --> 00:54:36.684
<v Speaker 0>One of the ways to get around it

00:54:36.684 --> 00:54:39.760
<v Speaker 0>is to include the shove, the conflict map

00:54:39.760 --> 00:54:42.240
<v Speaker 0>as an annotation on your deployment which forces

00:54:42.240 --> 00:54:44.799
<v Speaker 0>a reload every time you modify the conflict

00:54:44.799 --> 00:54:46.640
<v Speaker 0>map. It's a bit hacky

00:54:46.720 --> 00:54:48.559
<v Speaker 0>and there are some controllers that can also

00:54:48.559 --> 00:54:50.319
<v Speaker 0>run inside the cluster that monitor for changes

00:54:50.319 --> 00:54:51.839
<v Speaker 0>in the conflict map and rotate your pods

00:54:51.839 --> 00:54:52.240
<v Speaker 0>for you.

00:54:53.755 --> 00:54:55.195
<v Speaker 0>So there's a few ways to do it

00:54:55.195 --> 00:54:57.915
<v Speaker 0>but honestly for the this kind of environment,

00:54:57.915 --> 00:54:59.595
<v Speaker 0>the lean is the right way to do

00:54:59.595 --> 00:55:01.994
<v Speaker 0>it. However, somebody who said that we tackled

00:55:01.994 --> 00:55:03.595
<v Speaker 0>that we haven't was secrets.

00:55:03.915 --> 00:55:06.075
<v Speaker 0>I wouldn't put a secret in this file.

00:55:06.395 --> 00:55:09.170
<v Speaker 0>Sure. Yeah. So let's fix that. Let's take

00:55:09.170 --> 00:55:10.450
<v Speaker 0>out this app key

00:55:11.170 --> 00:55:13.090
<v Speaker 0>and let's create a secret channel.

00:55:14.369 --> 00:55:16.770
<v Speaker 0>I know and this is really good if

00:55:16.770 --> 00:55:19.809
<v Speaker 0>it's gonna feel weird because

00:55:21.675 --> 00:55:23.275
<v Speaker 0>I'm solving one problem

00:55:23.755 --> 00:55:25.435
<v Speaker 0>at a very similar way to the conflict

00:55:25.435 --> 00:55:27.435
<v Speaker 0>map anyway and I'll try do my best

00:55:27.435 --> 00:55:29.835
<v Speaker 0>to explain why this is more, why this

00:55:29.835 --> 00:55:30.635
<v Speaker 0>is better.

00:55:31.915 --> 00:55:32.395
<v Speaker 0>So,

00:55:37.880 --> 00:55:38.520
<v Speaker 0>So

00:55:39.000 --> 00:55:40.520
<v Speaker 0>this is a secret.

00:55:41.160 --> 00:55:43.320
<v Speaker 0>I am storing this as Yamo and my

00:55:43.320 --> 00:55:45.640
<v Speaker 0>repository right now. So it's no more secret

00:55:45.640 --> 00:55:47.080
<v Speaker 0>than a config map.

00:55:47.640 --> 00:55:48.440
<v Speaker 0>Granted.

00:55:49.160 --> 00:55:52.704
<v Speaker 0>However, you're very unlikely to apply your secrets

00:55:52.704 --> 00:55:54.704
<v Speaker 0>to your cluster in this way. You may

00:55:54.704 --> 00:55:57.505
<v Speaker 0>be using vault or some other KMS system

00:55:57.984 --> 00:56:00.625
<v Speaker 0>to provide these as to get these into

00:56:00.625 --> 00:56:02.305
<v Speaker 0>your cluster but you want them to be

00:56:02.305 --> 00:56:04.224
<v Speaker 0>a secret inside of your cluster because they

00:56:04.224 --> 00:56:06.944
<v Speaker 0>have different RBAC rules compared to a conflict

00:56:06.944 --> 00:56:09.970
<v Speaker 0>map, Right? It's generally conflict maps have loose

00:56:09.970 --> 00:56:12.369
<v Speaker 0>our back. Most people can have access to

00:56:12.369 --> 00:56:15.170
<v Speaker 0>them. They're also consumable from within the pods.

00:56:15.170 --> 00:56:16.530
<v Speaker 0>You wanna be able to lock that down

00:56:16.530 --> 00:56:17.730
<v Speaker 0>and you wanna be able to lock the

00:56:17.730 --> 00:56:19.250
<v Speaker 0>pods down as well so that nobody can

00:56:19.250 --> 00:56:20.690
<v Speaker 0>exec into it and just grab the secret.

00:56:21.155 --> 00:56:21.955
<v Speaker 0>So

00:56:22.435 --> 00:56:23.075
<v Speaker 0>while

00:56:23.395 --> 00:56:24.595
<v Speaker 0>from a very

00:56:24.835 --> 00:56:27.155
<v Speaker 0>naive perspective and look at it, naive is

00:56:27.155 --> 00:56:29.155
<v Speaker 0>the wrong word, from a very well from

00:56:29.155 --> 00:56:30.994
<v Speaker 0>this example it doesn't seem like we're improving

00:56:30.994 --> 00:56:32.835
<v Speaker 0>the security at all just by using the

00:56:32.835 --> 00:56:34.515
<v Speaker 0>secrets you are as long as you get

00:56:34.515 --> 00:56:36.170
<v Speaker 0>them into the environment correctly.

00:56:36.490 --> 00:56:38.170
<v Speaker 0>The other thing I wanna kinda cover is

00:56:38.170 --> 00:56:38.650
<v Speaker 0>that

00:56:39.289 --> 00:56:41.369
<v Speaker 0>well, for a start this will fail. There's

00:56:41.369 --> 00:56:42.730
<v Speaker 0>two keys on a secret.

00:56:45.609 --> 00:56:47.290
<v Speaker 0>String data and

00:56:47.529 --> 00:56:48.009
<v Speaker 0>data

00:56:48.585 --> 00:56:49.065
<v Speaker 0>actually

00:56:49.705 --> 00:56:50.585
<v Speaker 0>expects

00:56:50.585 --> 00:56:53.305
<v Speaker 0>your data to be base 64 encoded.

00:56:53.465 --> 00:56:55.705
<v Speaker 0>So if I do base 64,

00:56:55.945 --> 00:56:57.305
<v Speaker 0>paste this in

00:56:58.505 --> 00:56:59.465
<v Speaker 0>and grab this.

00:57:02.290 --> 00:57:04.210
<v Speaker 0>In fact, that's not gonna work because of

00:57:04.210 --> 00:57:06.369
<v Speaker 0>the new lane. So let me just copy

00:57:06.369 --> 00:57:07.330
<v Speaker 0>that properly.

00:57:09.890 --> 00:57:12.450
<v Speaker 0>We should actually done like echo

00:57:12.450 --> 00:57:13.569
<v Speaker 0>dash n,

00:57:14.785 --> 00:57:16.945
<v Speaker 0>which means no new line. Right? Yeah.

00:57:17.185 --> 00:57:18.625
<v Speaker 0>And then base 64

00:57:18.625 --> 00:57:20.545
<v Speaker 0>and this will get us add to value.

00:57:25.425 --> 00:57:27.665
<v Speaker 0>So both of these are correct. So

00:57:27.905 --> 00:57:29.870
<v Speaker 0>when I apply and the fact, let's just

00:57:29.870 --> 00:57:30.590
<v Speaker 0>change

00:57:30.990 --> 00:57:33.150
<v Speaker 0>this. So we'll call this string key instead

00:57:33.150 --> 00:57:35.230
<v Speaker 0>of that key. I can't remember if the

00:57:35.230 --> 00:57:37.150
<v Speaker 0>Kubernetes control plane will allow me to have

00:57:37.150 --> 00:57:38.670
<v Speaker 0>data and string data but we're gonna push

00:57:38.670 --> 00:57:39.950
<v Speaker 0>our luck and see what happens.

00:57:40.190 --> 00:57:40.750
<v Speaker 0>So

00:57:42.030 --> 00:57:43.885
<v Speaker 0>yeah, it doesn't care. Cool.

00:57:44.445 --> 00:57:46.045
<v Speaker 0>Now we should actually see that both these

00:57:46.045 --> 00:57:47.245
<v Speaker 0>values are the same.

00:57:48.525 --> 00:57:51.325
<v Speaker 0>So we'll grab our Laravel dash o Yamo.

00:57:54.125 --> 00:57:55.405
<v Speaker 0>If I could spell secret.

00:57:59.869 --> 00:58:01.789
<v Speaker 0>If we look at the data fields,

00:58:01.789 --> 00:58:03.309
<v Speaker 0>yeah. You see we actually get the same

00:58:03.309 --> 00:58:04.190
<v Speaker 0>value here.

00:58:04.349 --> 00:58:06.750
<v Speaker 0>So string data is a helper that when

00:58:06.750 --> 00:58:08.990
<v Speaker 0>you apply something to the cluster at knows

00:58:08.990 --> 00:58:11.150
<v Speaker 0>that you haven't base 64 encoded it yet

00:58:11.150 --> 00:58:13.415
<v Speaker 0>and it will base 64 encoded for you

00:58:13.415 --> 00:58:15.415
<v Speaker 0>regardless you get the same value at other

00:58:15.415 --> 00:58:18.615
<v Speaker 0>end. String data, a helper good in some

00:58:18.615 --> 00:58:19.335
<v Speaker 0>environments

00:58:19.735 --> 00:58:23.015
<v Speaker 0>data base 64 encoded, not a secret

00:58:23.175 --> 00:58:26.060
<v Speaker 0>but again you wouldn't apply secrets typically in

00:58:26.060 --> 00:58:26.860
<v Speaker 0>this fashion.

00:58:27.340 --> 00:58:29.580
<v Speaker 0>For production use cases you would use like

00:58:29.580 --> 00:58:31.420
<v Speaker 0>SOPs, Fry Mozilla,

00:58:33.180 --> 00:58:34.460
<v Speaker 0>sealed secrets

00:58:35.180 --> 00:58:38.060
<v Speaker 0>or my personal favorite, the Kapitan project.

00:58:38.460 --> 00:58:40.300
<v Speaker 0>So these all handle it slightly differently.

00:58:41.225 --> 00:58:43.785
<v Speaker 0>Stops and sealed secrets will use well in

00:58:43.785 --> 00:58:44.825
<v Speaker 0>fact they all they all do it the

00:58:44.825 --> 00:58:46.025
<v Speaker 0>same way, they all encrypt stuff but the

00:58:46.025 --> 00:58:47.305
<v Speaker 0>way that you interact with the tool is

00:58:47.305 --> 00:58:48.185
<v Speaker 0>slightly different.

00:58:50.265 --> 00:58:51.465
<v Speaker 0>I don't know if it's gonna be like

00:58:51.465 --> 00:58:52.505
<v Speaker 0>a quick thingy here.

00:58:57.559 --> 00:58:59.720
<v Speaker 0>No, because you don't have a Kubernetes specific

00:58:59.720 --> 00:59:00.920
<v Speaker 0>thing. It doesn't matter.

00:59:01.400 --> 00:59:03.160
<v Speaker 0>So stops allows you to encrypt it and

00:59:03.160 --> 00:59:05.000
<v Speaker 0>store the encrypted file within get which means

00:59:05.000 --> 00:59:06.359
<v Speaker 0>you can apply it. You just have to

00:59:06.359 --> 00:59:09.335
<v Speaker 0>remember your continuous integration pipeline to be to

00:59:09.335 --> 00:59:11.734
<v Speaker 0>decrypt it before you do the the apply

00:59:11.734 --> 00:59:13.494
<v Speaker 0>and there are some things that can run-in

00:59:13.494 --> 00:59:14.934
<v Speaker 0>a cluster to try and make that easier

00:59:14.934 --> 00:59:16.855
<v Speaker 0>and more secure, but it's a really good

00:59:16.855 --> 00:59:19.015
<v Speaker 0>way of doing it. Sealed secrets does the

00:59:19.015 --> 00:59:21.335
<v Speaker 0>same. It stores a private key inside of

00:59:21.335 --> 00:59:24.030
<v Speaker 0>your Kubernetes cluster. You can use the sealed

00:59:24.030 --> 00:59:26.110
<v Speaker 0>secrets command line to reach out, encrypt the

00:59:26.110 --> 00:59:28.590
<v Speaker 0>value and you get a text based secret

00:59:29.070 --> 00:59:32.030
<v Speaker 0>like this with obviously an encrypted string which

00:59:32.030 --> 00:59:33.150
<v Speaker 0>is still secret

00:59:33.390 --> 00:59:37.070
<v Speaker 0>and then finally there's the Kapitan project which

00:59:36.345 --> 00:59:38.425
<v Speaker 0>does secret management and hooks up to all

00:59:38.425 --> 00:59:40.505
<v Speaker 0>the key messes and vault. So if you're

00:59:40.505 --> 00:59:42.505
<v Speaker 0>already deploying to cloud provider web at key

00:59:42.505 --> 00:59:44.665
<v Speaker 0>mess, this is honestly, this is just the

00:59:44.665 --> 00:59:46.345
<v Speaker 0>best way to do it and you can

00:59:46.345 --> 00:59:47.705
<v Speaker 0>define them and you have all and they'll

00:59:47.705 --> 00:59:49.785
<v Speaker 0>be they'll be encrypted for you and only

00:59:49.785 --> 00:59:52.490
<v Speaker 0>decryptable and a cluster that access to that

00:59:52.490 --> 00:59:54.730
<v Speaker 0>KMS, so you can use cloud provider I'm

00:59:54.730 --> 00:59:55.370
<v Speaker 0>rules.

00:59:55.609 --> 00:59:56.810
<v Speaker 0>I'm not gonna say any more about it

00:59:56.810 --> 00:59:58.730
<v Speaker 0>because secrets would be deviate and has done

00:59:58.730 --> 01:00:00.650
<v Speaker 0>a path of a lot of time and

01:00:00.650 --> 01:00:01.849
<v Speaker 0>I don't wanna take up too much of

01:00:01.849 --> 01:00:03.369
<v Speaker 0>your time and in fact we only have

01:00:03.369 --> 01:00:05.325
<v Speaker 0>like twenty five minutes left. So

01:00:06.045 --> 01:00:06.925
<v Speaker 0>let's see.

01:00:07.645 --> 01:00:09.485
<v Speaker 0>Did that all make sense? That wasn't too

01:00:09.485 --> 01:00:10.365
<v Speaker 0>much waffle.

01:00:10.525 --> 01:00:12.125
<v Speaker 1>That makes sense to me.

01:00:12.445 --> 01:00:14.045
<v Speaker 1>I need to do something kind of similar

01:00:14.045 --> 01:00:16.605
<v Speaker 1>in Ansible where you use Ansible Bolt, but

01:00:16.605 --> 01:00:19.070
<v Speaker 1>that would have you'd have the encrypted locally,

01:00:19.070 --> 01:00:20.430
<v Speaker 1>so in here, and then when you're trying

01:00:20.430 --> 01:00:22.110
<v Speaker 1>to play it and try and deploy it,

01:00:22.110 --> 01:00:24.190
<v Speaker 1>you use you provide your vault key, which

01:00:24.190 --> 01:00:26.270
<v Speaker 1>is just the password you type in at

01:00:26.270 --> 01:00:28.270
<v Speaker 1>deployment time and encrypt

01:00:28.270 --> 01:00:29.390
<v Speaker 1>it and send the values over.

01:00:30.125 --> 01:00:32.285
<v Speaker 1>We do something kinda similar to what sounds

01:00:32.285 --> 01:00:32.845
<v Speaker 1>like

01:00:33.405 --> 01:00:34.525
<v Speaker 1>a soft one.

01:00:37.005 --> 01:00:38.605
<v Speaker 0>And no surprises.

01:00:39.805 --> 01:00:41.964
<v Speaker 0>We pass our secret through in exactly the

01:00:41.964 --> 01:00:44.640
<v Speaker 0>same way. There are finer grade controls, can

01:00:44.640 --> 01:00:47.520
<v Speaker 0>mount on specific keys and make them optional,

01:00:47.520 --> 01:00:49.440
<v Speaker 0>change the names within the container,

01:00:49.680 --> 01:00:51.040
<v Speaker 0>there's a bunch of stuff you can do.

01:00:51.040 --> 01:00:51.520
<v Speaker 0>Okay.

01:00:53.200 --> 01:00:55.119
<v Speaker 0>Let's make sure we haven't broken anything.

01:00:57.405 --> 01:00:59.165
<v Speaker 0>Let's apply that whole directory.

01:01:03.325 --> 01:01:04.925
<v Speaker 0>Here's our new pod

01:01:06.365 --> 01:01:07.645
<v Speaker 0>port forward.

01:01:09.805 --> 01:01:10.925
<v Speaker 0>We should still see.

01:01:12.430 --> 01:01:13.470
<v Speaker 0>Right. Okay.

01:01:15.390 --> 01:01:17.390
<v Speaker 0>Can't believe we started off saying, let's run

01:01:17.390 --> 01:01:19.230
<v Speaker 0>database migrations. We're like

01:01:20.270 --> 01:01:22.110
<v Speaker 0>fair chunk of our way through this. We

01:01:22.110 --> 01:01:24.750
<v Speaker 0>haven't done it yet. So let's actually run

01:01:24.750 --> 01:01:27.895
<v Speaker 0>these migrations now. So Kubernetes expects us to

01:01:27.895 --> 01:01:29.895
<v Speaker 0>leverage something called an edit container.

01:01:31.335 --> 01:01:33.815
<v Speaker 0>Now if we go to our container definition

01:01:35.095 --> 01:01:35.975
<v Speaker 0>here,

01:01:36.455 --> 01:01:37.255
<v Speaker 0>we

01:01:37.575 --> 01:01:39.095
<v Speaker 0>can just say edit containers

01:01:39.415 --> 01:01:41.095
<v Speaker 0>and we can provide it a name, we'll

01:01:41.095 --> 01:01:42.375
<v Speaker 0>call this database

01:01:42.695 --> 01:01:43.575
<v Speaker 0>migrations

01:01:44.430 --> 01:01:46.109
<v Speaker 0>and it takes pretty much is that same

01:01:46.109 --> 01:01:47.710
<v Speaker 0>spec that you're using

01:01:49.150 --> 01:01:50.590
<v Speaker 0>for the fact that is the same spec

01:01:50.590 --> 01:01:51.630
<v Speaker 0>for your containers,

01:01:51.790 --> 01:01:54.030
<v Speaker 0>you're just trying to override the behavior in

01:01:54.030 --> 01:01:55.550
<v Speaker 0>a way that makes sense for you to

01:01:55.550 --> 01:01:57.385
<v Speaker 0>run certain commands. So you know here I'm

01:01:57.385 --> 01:01:58.265
<v Speaker 0>gonna say run

01:01:58.505 --> 01:01:59.465
<v Speaker 0>FPM.

01:02:00.025 --> 01:02:02.505
<v Speaker 0>The thing I wanna change is that I

01:02:03.145 --> 01:02:05.545
<v Speaker 0>need access to well, I wanna run a

01:02:05.545 --> 01:02:06.425
<v Speaker 0>different command.

01:02:07.145 --> 01:02:09.145
<v Speaker 0>I wanna run PHP

01:02:09.660 --> 01:02:11.740
<v Speaker 0>and then I'm gonna provide some arcs.

01:02:12.220 --> 01:02:13.980
<v Speaker 0>The arcs are gonna be

01:02:14.299 --> 01:02:15.340
<v Speaker 0>artisan

01:02:16.940 --> 01:02:17.820
<v Speaker 0>DB.

01:02:18.700 --> 01:02:19.660
<v Speaker 0>Is that right?

01:02:19.900 --> 01:02:23.099
<v Speaker 1>Just just migrate. Maybe Just migrate. So just

01:02:23.099 --> 01:02:24.380
<v Speaker 0>PHP artisan migrate.

01:02:25.115 --> 01:02:27.195
<v Speaker 1>Yep. And then you'll also need to do

01:02:27.434 --> 01:02:30.234
<v Speaker 1>double dash false, I think, because it will

01:02:30.395 --> 01:02:31.915
<v Speaker 1>by default for a warning saying you're running

01:02:31.915 --> 01:02:33.835
<v Speaker 1>this in a production environment.

01:02:34.474 --> 01:02:35.275
<v Speaker 0>Alright.

01:02:37.994 --> 01:02:39.195
<v Speaker 0>Let's just do it.

01:02:39.835 --> 01:02:42.450
<v Speaker 0>I'm feeling an entry point because it that

01:02:42.450 --> 01:02:44.130
<v Speaker 1>needs to enter at the

01:02:44.450 --> 01:02:46.210
<v Speaker 0>Kubernetes doesn't call it an entry point. So

01:02:46.210 --> 01:02:48.290
<v Speaker 0>in Kubernetes, they use same language. So it's

01:02:48.290 --> 01:02:49.410
<v Speaker 0>command and args,

01:02:49.810 --> 01:02:52.050
<v Speaker 0>whereas Docker, yes, they would call an entry

01:02:52.050 --> 01:02:54.130
<v Speaker 1>point. So what mean is

01:02:55.355 --> 01:02:57.035
<v Speaker 1>for the file path of where you're running

01:02:57.035 --> 01:02:58.635
<v Speaker 1>PHP or send from.

01:02:59.994 --> 01:03:02.795
<v Speaker 0>No. Because every time I've exec into that

01:03:02.795 --> 01:03:04.315
<v Speaker 0>container, you have put me into the work

01:03:04.315 --> 01:03:05.595
<v Speaker 0>in there which seems to be the correct

01:03:05.595 --> 01:03:06.234
<v Speaker 0>location.

01:03:07.035 --> 01:03:08.875
<v Speaker 1>Okay. If I manage to set up properly,

01:03:08.875 --> 01:03:11.180
<v Speaker 1>that is pure coincidence. Yeah.

01:03:11.180 --> 01:03:12.859
<v Speaker 0>And your Docker file. Now let me just

01:03:13.099 --> 01:03:14.539
<v Speaker 0>because you haven't done it for NGINX but

01:03:14.539 --> 01:03:16.060
<v Speaker 0>you have done it for for

01:03:16.220 --> 01:03:17.020
<v Speaker 0>FPM.

01:03:17.260 --> 01:03:20.299
<v Speaker 0>So That's here. Work there. Okay. Yeah. You

01:03:20.299 --> 01:03:21.660
<v Speaker 0>you would want that in your NGINX one

01:03:21.660 --> 01:03:23.740
<v Speaker 0>as well. Now I forgot to set the

01:03:23.740 --> 01:03:26.059
<v Speaker 0>image pool policy to never, which is why

01:03:25.455 --> 01:03:26.415
<v Speaker 0>that's failing.

01:03:26.975 --> 01:03:29.055
<v Speaker 0>So let's top that up.

01:03:30.975 --> 01:03:32.975
<v Speaker 1>So you don't have expect to never in

01:03:33.055 --> 01:03:34.815
<v Speaker 1>because you're doing this locally. If I was

01:03:34.815 --> 01:03:36.175
<v Speaker 1>doing this on a production, you get rid

01:03:36.175 --> 01:03:39.215
<v Speaker 1>all of the neighbors and the actual path

01:03:38.750 --> 01:03:40.670
<v Speaker 1>of the image would be

01:03:41.630 --> 01:03:44.510
<v Speaker 1>private.docker.com/whatever.

01:03:44.510 --> 01:03:46.990
<v Speaker 0>Yeah. You would include the container registry. I

01:03:46.990 --> 01:03:48.750
<v Speaker 0>like to run my own registry within my

01:03:48.750 --> 01:03:51.150
<v Speaker 0>clusters that caches the images. I generally use

01:03:51.150 --> 01:03:52.430
<v Speaker 0>a pool policy

01:03:52.430 --> 01:03:55.085
<v Speaker 0>of, you know, if it's not available, if

01:03:55.085 --> 01:03:56.845
<v Speaker 0>it's not present on the on the machine.

01:03:56.845 --> 01:03:59.244
<v Speaker 0>I don't do an always pool generally because

01:03:59.244 --> 01:04:00.045
<v Speaker 0>I do use

01:04:00.365 --> 01:04:02.685
<v Speaker 0>I I don't use ephemeral tags like latest

01:04:02.685 --> 01:04:04.045
<v Speaker 0>and such that, you know, I would use

01:04:04.045 --> 01:04:05.660
<v Speaker 0>a proper content

01:04:05.980 --> 01:04:07.180
<v Speaker 0>You just need something. Yeah. So

01:04:08.940 --> 01:04:10.860
<v Speaker 0>alright. Let's see why this is failing. I'm

01:04:10.860 --> 01:04:13.100
<v Speaker 0>assuming that the migrate command is trying to

01:04:13.100 --> 01:04:14.940
<v Speaker 0>write to a fail probably

01:04:15.660 --> 01:04:18.060
<v Speaker 0>and that my we're gonna have to sacrifice

01:04:18.060 --> 01:04:20.015
<v Speaker 0>my read only fail system, but let's see.

01:04:20.015 --> 01:04:21.615
<v Speaker 1>I don't believe that it does write any

01:04:21.615 --> 01:04:22.415
<v Speaker 1>files.

01:04:22.895 --> 01:04:26.015
<v Speaker 0>We want the logs for the database migrations.

01:04:26.015 --> 01:04:27.855
<v Speaker 0>We're getting connection refused.

01:04:27.935 --> 01:04:28.415
<v Speaker 0>Okay.

01:04:29.855 --> 01:04:30.415
<v Speaker 0>So

01:04:31.790 --> 01:04:33.310
<v Speaker 1>Did do you create

01:04:33.550 --> 01:04:35.790
<v Speaker 0>I didn't give it the environment variables.

01:04:36.030 --> 01:04:37.310
<v Speaker 1>Ah, okay. Yeah. That is

01:04:38.430 --> 01:04:40.990
<v Speaker 0>So we need this to be copied

01:04:41.550 --> 01:04:42.430
<v Speaker 0>to here.

01:04:44.830 --> 01:04:45.950
<v Speaker 0>Let's reapply

01:04:48.665 --> 01:04:49.945
<v Speaker 0>and see

01:04:50.105 --> 01:04:51.065
<v Speaker 0>what we got.

01:04:53.145 --> 01:04:54.025
<v Speaker 0>It worked.

01:04:56.585 --> 01:04:58.025
<v Speaker 0>You don't seem convinced.

01:04:59.625 --> 01:05:01.300
<v Speaker 1>I typically check the database to make sure

01:05:01.300 --> 01:05:04.420
<v Speaker 1>my breaking work, but, you know Alright. So

01:05:04.420 --> 01:05:07.940
<v Speaker 0>let's grab this. Let's do see database

01:05:07.940 --> 01:05:08.820
<v Speaker 0>migrations.

01:05:11.795 --> 01:05:14.195
<v Speaker 0>Yep. There we go. Oh, okay. Yeah. That

01:05:14.195 --> 01:05:14.755
<v Speaker 1>worked.

01:05:15.315 --> 01:05:17.875
<v Speaker 0>Is there an endpoint in your Laravel application

01:05:17.875 --> 01:05:20.595
<v Speaker 0>that will allow us to consume that database

01:05:20.595 --> 01:05:21.315
<v Speaker 0>at all?

01:05:21.715 --> 01:05:24.275
<v Speaker 1>Yep. So I've created a few endpoints. One

01:05:24.275 --> 01:05:26.840
<v Speaker 1>of them is called create dash posts,

01:05:26.920 --> 01:05:28.520
<v Speaker 1>and that will create just five

01:05:29.800 --> 01:05:31.400
<v Speaker 1>five posts in the areas.

01:05:34.360 --> 01:05:35.080
<v Speaker 0>Create

01:05:35.640 --> 01:05:36.920
<v Speaker 0>slash post or dash post?

01:05:38.424 --> 01:05:39.305
<v Speaker 0>Like so?

01:05:39.865 --> 01:05:42.025
<v Speaker 1>Yep. I know that's a little difficult to

01:05:42.025 --> 01:05:42.585
<v Speaker 0>read, but

01:05:43.625 --> 01:05:45.224
<v Speaker 1>So that should've done it. I didn't give

01:05:45.224 --> 01:05:46.585
<v Speaker 1>any up, by the way. It thought it'd

01:05:46.585 --> 01:05:47.865
<v Speaker 1>in white. That's fine. Can I is there

01:05:47.865 --> 01:05:48.744
<v Speaker 0>a get posts?

01:05:49.385 --> 01:05:51.320
<v Speaker 1>That is a get post. Oh, no. No.

01:05:51.320 --> 01:05:53.240
<v Speaker 1>Sorry. No. If you go to slash posts.

01:05:56.360 --> 01:05:58.440
<v Speaker 1>There you go. That works. Js. But yeah.

01:05:58.440 --> 01:05:59.160
<v Speaker 1>Here you go.

01:05:59.720 --> 01:06:03.000
<v Speaker 1>Great. Awesome. So is working. That's Yeah. Really

01:06:03.000 --> 01:06:05.615
<v Speaker 0>simple. I mean, and it containers they are

01:06:05.615 --> 01:06:07.215
<v Speaker 0>the best way to handle this thing. Of

01:06:07.215 --> 01:06:08.815
<v Speaker 0>course there are caveats. I'm not gonna say

01:06:08.815 --> 01:06:11.215
<v Speaker 0>go and add this to all applications immediately.

01:06:11.455 --> 01:06:14.015
<v Speaker 0>They need to be at important. You have

01:06:14.015 --> 01:06:15.455
<v Speaker 0>to be able to run them. These will

01:06:15.455 --> 01:06:17.870
<v Speaker 0>like in fact, let's show that when I

01:06:17.870 --> 01:06:20.110
<v Speaker 0>scale this up to five, those migrations are

01:06:20.110 --> 01:06:22.430
<v Speaker 0>gonna run on every deployment every time I

01:06:22.430 --> 01:06:24.030
<v Speaker 0>kill a pod. So you really need to

01:06:24.030 --> 01:06:25.950
<v Speaker 0>make sure that they

01:06:26.590 --> 01:06:28.270
<v Speaker 0>don't collide. There's

01:06:28.270 --> 01:06:30.190
<v Speaker 0>locking, you know, you're gonna potentially have to

01:06:30.190 --> 01:06:32.375
<v Speaker 0>running close to each other and they have

01:06:32.375 --> 01:06:33.495
<v Speaker 0>to be item potent.

01:06:34.535 --> 01:06:37.575
<v Speaker 0>So I'm assuming with the ORM that Laravel

01:06:37.575 --> 01:06:39.335
<v Speaker 0>is using that you get all that free.

01:06:39.335 --> 01:06:41.975
<v Speaker 0>Most ORMs do provide something like that so

01:06:41.975 --> 01:06:42.935
<v Speaker 0>you should be good.

01:06:43.255 --> 01:06:45.255
<v Speaker 1>I'm not sure about other issues though because

01:06:45.255 --> 01:06:47.550
<v Speaker 1>they are quite good on,

01:06:47.790 --> 01:06:48.350
<v Speaker 1>like,

01:06:50.030 --> 01:06:52.030
<v Speaker 1>the whole, like, high availability side of things.

01:06:52.030 --> 01:06:53.710
<v Speaker 1>So I'd assume that that's something to do.

01:06:53.710 --> 01:06:55.710
<v Speaker 0>I would assume your your migrate commander does

01:06:55.710 --> 01:06:57.630
<v Speaker 0>a lock on the entire database.

01:06:57.790 --> 01:06:59.630
<v Speaker 0>And in fact, we could probably trigger that

01:06:59.630 --> 01:07:02.665
<v Speaker 0>by, you know, deleting the database, spending it

01:07:02.665 --> 01:07:04.665
<v Speaker 0>back up empty, running a migrate, and trying

01:07:04.665 --> 01:07:06.265
<v Speaker 0>to create posts at the same time or

01:07:06.265 --> 01:07:07.465
<v Speaker 0>get posts at the same time. We'd probably

01:07:07.465 --> 01:07:09.065
<v Speaker 0>see it wait for a while before it

01:07:09.065 --> 01:07:10.585
<v Speaker 0>got access to the table again or the

01:07:10.585 --> 01:07:11.225
<v Speaker 0>database.

01:07:11.625 --> 01:07:13.385
<v Speaker 0>Okay. What what's next on your list? What

01:07:13.385 --> 01:07:16.440
<v Speaker 0>we've got? Twenty minutes. So queue jobs is

01:07:16.440 --> 01:07:19.160
<v Speaker 1>probably the big one. Queue and scheduled jobs.

01:07:20.359 --> 01:07:23.240
<v Speaker 0>Alright. So Kubernetes exposes a primitive

01:07:24.359 --> 01:07:25.480
<v Speaker 0>called jobs,

01:07:26.520 --> 01:07:27.720
<v Speaker 0>which are just like cron jobs.

01:07:30.915 --> 01:07:32.275
<v Speaker 0>I don't think I'm gonna be able to

01:07:32.355 --> 01:07:34.755
<v Speaker 0>oh, I do. I love this plugin.

01:07:34.915 --> 01:07:35.475
<v Speaker 0>So

01:07:36.435 --> 01:07:37.955
<v Speaker 0>we have, you know, just like all our

01:07:37.955 --> 01:07:39.475
<v Speaker 0>other Kubernetes manifests,

01:07:39.475 --> 01:07:41.155
<v Speaker 0>really simple specification

01:07:41.475 --> 01:07:43.650
<v Speaker 0>and we can specify this is the time

01:07:43.650 --> 01:07:46.290
<v Speaker 0>to second time to live seconds after finished.

01:07:46.290 --> 01:07:48.130
<v Speaker 0>Who knows what that is to have help?

01:07:49.970 --> 01:07:51.970
<v Speaker 0>Later on the job is finished execution.

01:07:51.970 --> 01:07:54.770
<v Speaker 0>Yeah. Whatever. Okay. We specify the container and

01:07:54.770 --> 01:07:56.130
<v Speaker 0>we specify the command. Now,

01:07:57.125 --> 01:07:58.805
<v Speaker 0>you'll also wanna be able to tweak when

01:07:58.805 --> 01:07:59.605
<v Speaker 0>this runs.

01:08:03.125 --> 01:08:04.805
<v Speaker 0>I'm using the wrong object.

01:08:07.605 --> 01:08:08.325
<v Speaker 0>Crack up.

01:08:10.390 --> 01:08:12.950
<v Speaker 0>Is that Cronghold? I'm gonna show my own

01:08:12.950 --> 01:08:14.550
<v Speaker 0>ignorance. I've never been able to remember how

01:08:14.550 --> 01:08:16.229
<v Speaker 0>this works there. Kubernetes.

01:08:21.510 --> 01:08:22.790
<v Speaker 0>I spent a lot of my time in

01:08:22.790 --> 01:08:23.430
<v Speaker 0>documentation.

01:08:25.255 --> 01:08:26.615
<v Speaker 0>There we go. There is a thing called

01:08:26.615 --> 01:08:29.015
<v Speaker 1>cron jobs. Yeah. I just couldn't remember what

01:08:29.015 --> 01:08:30.055
<v Speaker 0>this was.

01:08:31.175 --> 01:08:32.695
<v Speaker 1>So it's not too much because I've seen

01:08:32.695 --> 01:08:35.095
<v Speaker 1>like online but Alright. That's batch v one.

01:08:35.095 --> 01:08:35.975
<v Speaker 1>Some

01:08:36.135 --> 01:08:37.735
<v Speaker 1>things just prefer to v one and some

01:08:37.735 --> 01:08:40.455
<v Speaker 1>things refer to like something document.vone.

01:08:41.310 --> 01:08:42.909
<v Speaker 0>Yeah. I'm

01:08:42.909 --> 01:08:44.349
<v Speaker 0>not sure why that yelled at me then.

01:08:44.349 --> 01:08:46.269
<v Speaker 0>Maybe it's because the spec was wrong

01:08:47.469 --> 01:08:49.229
<v Speaker 0>or maybe it never maybe that's not been

01:08:49.229 --> 01:08:51.309
<v Speaker 0>promoted yet actually. So

01:08:53.745 --> 01:08:54.625
<v Speaker 0>yeah. Okay.

01:08:54.865 --> 01:08:56.865
<v Speaker 0>It's not cron jobs haven't had a view

01:08:56.865 --> 01:08:58.465
<v Speaker 0>on yet but jobs have so

01:08:58.945 --> 01:08:59.824
<v Speaker 0>There you go.

01:09:00.225 --> 01:09:01.985
<v Speaker 0>Let's just copy the whole thing and modify

01:09:01.985 --> 01:09:04.625
<v Speaker 0>it to to do our bidding. So we'll

01:09:04.625 --> 01:09:06.465
<v Speaker 0>call this Laravel. I'm just gonna keep calling

01:09:06.465 --> 01:09:08.945
<v Speaker 0>everything Laravel. We can use regular cron sales

01:09:08.945 --> 01:09:11.000
<v Speaker 0>syntax to specify the job.

01:09:11.400 --> 01:09:11.880
<v Speaker 0>I

01:09:12.440 --> 01:09:13.960
<v Speaker 0>don't know how to generate that most of

01:09:13.960 --> 01:09:14.680
<v Speaker 0>the time.

01:09:14.920 --> 01:09:16.520
<v Speaker 1>I just do $5.

01:09:17.080 --> 01:09:19.320
<v Speaker 0>Yeah. Cron maker. I think this is the

01:09:19.320 --> 01:09:20.200
<v Speaker 0>one I use.

01:09:21.160 --> 01:09:23.080
<v Speaker 0>Just say run every five minutes.

01:09:31.694 --> 01:09:33.854
<v Speaker 1>Why wouldn't you just do star star star

01:09:33.854 --> 01:09:34.654
<v Speaker 1>star star?

01:09:35.054 --> 01:09:36.734
<v Speaker 0>I have we because you want it to

01:09:36.734 --> 01:09:37.375
<v Speaker 0>run every minute?

01:09:38.160 --> 01:09:41.840
<v Speaker 1>The current helper and the Laravel

01:09:43.279 --> 01:09:43.999
<v Speaker 1>then

01:09:44.080 --> 01:09:45.999
<v Speaker 1>inside inside of the

01:09:46.479 --> 01:09:49.199
<v Speaker 1>the console kernel determines what jobs inside of

01:09:49.199 --> 01:09:51.520
<v Speaker 1>that should run and at what frequency. So

01:09:51.520 --> 01:09:52.640
<v Speaker 1>you would run this every minute.

01:09:54.355 --> 01:09:56.195
<v Speaker 0>Okay. So I guess I don't understand. I

01:09:56.355 --> 01:09:58.435
<v Speaker 0>I've never built a Laravel application, so let's

01:09:58.435 --> 01:10:00.514
<v Speaker 0>try and cover a few basic questions then.

01:10:01.475 --> 01:10:03.874
<v Speaker 0>Now as the queue processor,

01:10:04.514 --> 01:10:06.435
<v Speaker 0>a long running process that should be deployed

01:10:06.435 --> 01:10:09.635
<v Speaker 0>as a deployment or as a cron job

01:10:08.760 --> 01:10:11.079
<v Speaker 0>that runs regularly? Oh, sorry. Sorry. It depends

01:10:11.239 --> 01:10:13.079
<v Speaker 1>are we dealing with acute job here or

01:10:13.079 --> 01:10:15.159
<v Speaker 1>are we dealing with the scheduled tasks? Because

01:10:15.159 --> 01:10:16.760
<v Speaker 1>there there's two things that need to be

01:10:16.760 --> 01:10:17.479
<v Speaker 1>in anyway.

01:10:18.280 --> 01:10:20.440
<v Speaker 0>Okay. So I'm assuming the scheduled tasks is

01:10:20.440 --> 01:10:22.545
<v Speaker 0>a cron job. Right? Yes. Okay.

01:10:23.025 --> 01:10:24.305
<v Speaker 0>And you would just star star star star

01:10:24.305 --> 01:10:26.065
<v Speaker 0>star star It's just straight up every minute

01:10:26.065 --> 01:10:26.465
<v Speaker 1>when it

01:10:27.425 --> 01:10:29.345
<v Speaker 1>and then all you do is you have

01:10:29.425 --> 01:10:31.185
<v Speaker 1>like, the migrate command, you have one entry

01:10:31.185 --> 01:10:33.825
<v Speaker 1>point which is just a schedule call on

01:10:33.825 --> 01:10:34.385
<v Speaker 1>run, I think.

01:10:40.350 --> 01:10:42.270
<v Speaker 1>Yeah. Schedule call on run.

01:10:43.950 --> 01:10:46.190
<v Speaker 1>Once you've run that every minute, it just

01:10:46.190 --> 01:10:48.510
<v Speaker 1>deals with itself based on your PHP code.

01:10:52.554 --> 01:10:54.954
<v Speaker 0>Okay. So we'll call this

01:10:55.195 --> 01:10:56.074
<v Speaker 0>scheduled.

01:10:56.475 --> 01:10:58.554
<v Speaker 0>This is the same FPM image. What command

01:10:58.554 --> 01:10:59.434
<v Speaker 0>are we running?

01:11:00.795 --> 01:11:02.770
<v Speaker 1>Schedule colon run.

01:11:03.410 --> 01:11:04.370
<v Speaker 0>Is that all?

01:11:05.490 --> 01:11:06.930
<v Speaker 1>Believe so. Let me just check if there's

01:11:06.930 --> 01:11:08.050
<v Speaker 1>a force that's needed.

01:11:11.490 --> 01:11:12.770
<v Speaker 1>Yeah. No. That's it.

01:11:13.250 --> 01:11:15.090
<v Speaker 0>Alright. Let's apply it. So

01:11:17.165 --> 01:11:18.205
<v Speaker 0>jobs

01:11:19.085 --> 01:11:21.645
<v Speaker 0>and then like all the other Kubernetes resources,

01:11:21.645 --> 01:11:23.085
<v Speaker 0>we type get jobs.

01:11:25.965 --> 01:11:28.285
<v Speaker 0>Oh, no. A cron job. I call that

01:11:28.285 --> 01:11:30.030
<v Speaker 0>a job. Yeah. Here we go.

01:11:30.670 --> 01:11:32.030
<v Speaker 0>Okay. And we can wait.

01:11:32.830 --> 01:11:34.830
<v Speaker 0>Let's within a minute, should see a pod

01:11:34.830 --> 01:11:36.909
<v Speaker 0>to get scheduled, which will spin up, run

01:11:36.909 --> 01:11:39.150
<v Speaker 0>that command, shut that down and then that'll

01:11:39.150 --> 01:11:41.625
<v Speaker 0>loop every minute doing the same thing. And

01:11:41.625 --> 01:11:43.145
<v Speaker 1>by pure coincidence,

01:11:43.305 --> 01:11:45.625
<v Speaker 1>we're about to hit quarter past and I've

01:11:45.625 --> 01:11:47.065
<v Speaker 1>got a job in there that every five

01:11:47.065 --> 01:11:48.425
<v Speaker 1>minutes sends an email.

01:11:48.825 --> 01:11:50.585
<v Speaker 1>So we should see that it sends an

01:11:50.585 --> 01:11:51.385
<v Speaker 1>email. Just

01:11:51.785 --> 01:11:53.890
<v Speaker 1>pure coincidence on that, but we should see

01:11:53.890 --> 01:11:55.890
<v Speaker 1>that actually executes that job and just what

01:11:55.890 --> 01:11:57.490
<v Speaker 1>we are gonna do. So we should see

01:11:57.490 --> 01:11:58.369
<v Speaker 0>that email.

01:11:59.170 --> 01:12:02.210
<v Speaker 0>What was that? Was it mail Mail trap.

01:12:03.490 --> 01:12:04.290
<v Speaker 1>The I o. Yeah.

01:12:08.085 --> 01:12:08.725
<v Speaker 1>So

01:12:10.805 --> 01:12:12.725
<v Speaker 0>Oh, it crashed. Oh, no.

01:12:13.445 --> 01:12:15.205
<v Speaker 0>Is it trying to write to a file?

01:12:17.525 --> 01:12:19.685
<v Speaker 0>It will be, won't it? I don't think

01:12:19.685 --> 01:12:20.645
<v Speaker 1>it should write to a file.

01:12:21.780 --> 01:12:24.179
<v Speaker 0>Alright. Let's see. Unless it ends up maybe

01:12:24.179 --> 01:12:26.020
<v Speaker 1>it writes like a cache file thing. Oh,

01:12:26.020 --> 01:12:28.260
<v Speaker 0>no. Could not open input fail schedule run.

01:12:28.260 --> 01:12:30.099
<v Speaker 0>What have I got wrong? Oh, you did

01:12:30.099 --> 01:12:31.460
<v Speaker 1>get the artisan. Artisan.

01:12:39.435 --> 01:12:40.155
<v Speaker 0>Hello.

01:12:40.475 --> 01:12:42.315
<v Speaker 0>What? I didn't know from that.

01:12:42.875 --> 01:12:44.155
<v Speaker 0>Software crashed.

01:12:44.795 --> 01:12:47.355
<v Speaker 1>Okay. No. We

01:12:47.915 --> 01:12:50.555
<v Speaker 0>actually had a few comments there as well.

01:12:50.635 --> 01:12:52.475
<v Speaker 0>We were too busy focused on that. So

01:12:53.350 --> 01:12:55.910
<v Speaker 0>Frank and Nate both commented that we missed

01:12:55.910 --> 01:12:57.429
<v Speaker 0>the hours and thank you.

01:13:01.350 --> 01:13:02.309
<v Speaker 0>So that's

01:13:02.630 --> 01:13:03.989
<v Speaker 0>the fact I kind of I don't know

01:13:03.989 --> 01:13:05.190
<v Speaker 0>if I applied that because

01:13:05.590 --> 01:13:08.145
<v Speaker 0>I got really confused when you disappeared and

01:13:08.145 --> 01:13:09.664
<v Speaker 0>then realized the software crashed.

01:13:09.905 --> 01:13:10.704
<v Speaker 1>Yeah. That's right.

01:13:11.264 --> 01:13:13.184
<v Speaker 1>These things like reconnect and stuff.

01:13:13.744 --> 01:13:15.505
<v Speaker 0>Yeah. So it says unchanged.

01:13:18.224 --> 01:13:20.145
<v Speaker 0>Here we go. So we we this is

01:13:20.145 --> 01:13:22.660
<v Speaker 0>now completing every minute. We've had two of

01:13:22.660 --> 01:13:25.540
<v Speaker 0>them since the crash. Obviously, this one failed.

01:13:26.740 --> 01:13:28.180
<v Speaker 1>So do we know what not to kill

01:13:28.180 --> 01:13:31.140
<v Speaker 1>itself off immediately as soon as it's got

01:13:31.140 --> 01:13:32.020
<v Speaker 1>the exit?

01:13:32.340 --> 01:13:33.700
<v Speaker 1>There's no need for a time to life

01:13:33.700 --> 01:13:35.220
<v Speaker 1>on that. Is that because it's never going

01:13:35.220 --> 01:13:36.660
<v Speaker 1>to reuse the same command again?

01:13:38.085 --> 01:13:39.764
<v Speaker 0>We'll leave it for now. I don't think

01:13:39.764 --> 01:13:40.405
<v Speaker 0>it's

01:13:40.804 --> 01:13:42.164
<v Speaker 0>terribly important.

01:13:43.045 --> 01:13:44.885
<v Speaker 1>Well, they clean themselves up once the CTL

01:13:44.885 --> 01:13:46.164
<v Speaker 1>gets hit, I guess then.

01:13:48.405 --> 01:13:49.925
<v Speaker 0>Yeah. Did that just crash again?

01:13:50.510 --> 01:13:52.430
<v Speaker 0>Oh, that's that's just a broken one. So

01:13:52.430 --> 01:13:53.630
<v Speaker 0>I can just delete that.

01:13:56.670 --> 01:13:58.670
<v Speaker 1>Because would that not mean that every minute

01:13:58.670 --> 01:14:01.150
<v Speaker 1>a new pod is created and that isn't

01:14:01.150 --> 01:14:01.949
<v Speaker 1>being cleared out.

01:14:02.875 --> 01:14:05.034
<v Speaker 1>Eventually, we're just gonna have memory from that.

01:14:05.355 --> 01:14:07.435
<v Speaker 0>No. These ones are gone. They're completed. So

01:14:07.435 --> 01:14:09.755
<v Speaker 0>they they don't take up any resources anymore.

01:14:09.915 --> 01:14:11.514
<v Speaker 0>So Oh, okay. Okay.

01:14:12.554 --> 01:14:14.074
<v Speaker 0>So that seems okay.

01:14:14.474 --> 01:14:16.474
<v Speaker 0>I guess if we wait another two minutes,

01:14:16.474 --> 01:14:19.030
<v Speaker 0>we should see the email come in here

01:14:20.390 --> 01:14:22.630
<v Speaker 0>Yeah. At at twenty past. But you said

01:14:22.630 --> 01:14:23.990
<v Speaker 0>there was one other type of job, so

01:14:23.990 --> 01:14:25.830
<v Speaker 0>let's try and handle that one then.

01:14:26.070 --> 01:14:28.230
<v Speaker 0>Yeah. So this is the more,

01:14:30.635 --> 01:14:32.235
<v Speaker 1>I guess, complicated one.

01:14:32.875 --> 01:14:35.355
<v Speaker 1>What you can have in Laravel is

01:14:36.475 --> 01:14:38.235
<v Speaker 1>queue jobs. So you can queue it up

01:14:38.235 --> 01:14:40.074
<v Speaker 1>using various different queue drivers,

01:14:40.475 --> 01:14:42.875
<v Speaker 1>SES, and you can play database, Redis,

01:14:43.515 --> 01:14:44.315
<v Speaker 1>all those sort of things.

01:14:45.370 --> 01:14:47.770
<v Speaker 1>But the way of using that is the

01:14:47.770 --> 01:14:50.170
<v Speaker 1>same server doesn't make any difference to us.

01:14:51.210 --> 01:14:53.690
<v Speaker 1>What we want to do there is have

01:14:53.690 --> 01:14:56.010
<v Speaker 1>a command that's running long term. It's a

01:14:56.010 --> 01:14:58.625
<v Speaker 1>long running process in the background that

01:14:59.185 --> 01:15:01.905
<v Speaker 1>runs the r s n q colon work.

01:15:03.185 --> 01:15:05.664
<v Speaker 1>That's all that we require.

01:15:06.785 --> 01:15:08.145
<v Speaker 1>But then it gets a bit more complicated

01:15:08.145 --> 01:15:09.745
<v Speaker 1>than that. You can have different named queues

01:15:09.745 --> 01:15:11.665
<v Speaker 1>and have different number of workers per queues

01:15:11.665 --> 01:15:12.945
<v Speaker 1>and and things like that, I guess.

01:15:14.520 --> 01:15:16.760
<v Speaker 0>Yeah. That's just gonna be a new deployment

01:15:16.760 --> 01:15:18.599
<v Speaker 0>for me. I mean, long run-in process means

01:15:18.599 --> 01:15:20.040
<v Speaker 0>it's a deployment. I wanna be able to

01:15:20.040 --> 01:15:21.800
<v Speaker 0>scale up and down depending on how many

01:15:21.800 --> 01:15:24.040
<v Speaker 0>workers I want as well as tweaking the

01:15:24.040 --> 01:15:25.079
<v Speaker 0>parameters.

01:15:25.080 --> 01:15:27.534
<v Speaker 0>So, know, we could I mean, we probably

01:15:27.534 --> 01:15:29.215
<v Speaker 0>would just copy this

01:15:30.175 --> 01:15:31.294
<v Speaker 0>and call it

01:15:32.494 --> 01:15:33.854
<v Speaker 0>queue worker.

01:15:36.094 --> 01:15:37.855
<v Speaker 0>We're not gonna need the NGINX so we

01:15:37.855 --> 01:15:39.454
<v Speaker 0>can remove that. Mhmm.

01:15:45.989 --> 01:15:47.429
<v Speaker 0>Do we do you think we'll need logs,

01:15:47.429 --> 01:15:48.630
<v Speaker 0>cache test? I'm gonna in fact, you know,

01:15:48.630 --> 01:15:49.670
<v Speaker 0>I'm just gonna keep it. I don't wanna

01:15:49.830 --> 01:15:51.429
<v Speaker 1>I think we'd need it all because the

01:15:51.429 --> 01:15:53.670
<v Speaker 1>framework will still hit those. Well, maybe not

01:15:53.670 --> 01:15:56.025
<v Speaker 1>like views and stuff, but if they're bad,

01:15:56.025 --> 01:15:57.625
<v Speaker 1>it's gonna be easy to do. Alright.

01:15:58.505 --> 01:16:00.505
<v Speaker 0>So we update our labels to be queue

01:16:00.505 --> 01:16:01.225
<v Speaker 0>worker

01:16:02.905 --> 01:16:04.425
<v Speaker 0>queue worker

01:16:04.985 --> 01:16:07.065
<v Speaker 0>and then we just modify the command. We

01:16:07.065 --> 01:16:08.825
<v Speaker 0>don't need

01:16:08.730 --> 01:16:09.929
<v Speaker 0>container at all.

01:16:12.250 --> 01:16:14.570
<v Speaker 0>And here we're just gonna see,

01:16:15.530 --> 01:16:17.690
<v Speaker 0>we don't specify the command we're using the

01:16:18.010 --> 01:16:19.770
<v Speaker 0>and built one. So here we just say

01:16:19.770 --> 01:16:20.570
<v Speaker 0>PHP again.

01:16:22.075 --> 01:16:23.835
<v Speaker 0>We specify the args.

01:16:24.315 --> 01:16:26.235
<v Speaker 0>We're gonna run sorry. What was the command?

01:16:26.235 --> 01:16:27.195
<v Speaker 0>Artisan.

01:16:27.355 --> 01:16:28.155
<v Speaker 1>Artisan

01:16:28.155 --> 01:16:30.235
<v Speaker 1>and then q colon work.

01:16:30.555 --> 01:16:31.515
<v Speaker 0>Q work.

01:16:32.075 --> 01:16:32.795
<v Speaker 1>Colon.

01:16:33.115 --> 01:16:33.915
<v Speaker 0>Colon.

01:16:34.955 --> 01:16:37.510
<v Speaker 1>Yeah. And then you need to pass so

01:16:37.510 --> 01:16:39.510
<v Speaker 1>that will work by default. That will run

01:16:39.510 --> 01:16:40.790
<v Speaker 1>the what's called

01:16:41.110 --> 01:16:42.710
<v Speaker 1>all the three queues in Laravel are named,

01:16:42.710 --> 01:16:44.790
<v Speaker 1>and the default one is just called default.

01:16:44.790 --> 01:16:46.230
<v Speaker 1>But what you can do is you can

01:16:46.230 --> 01:16:48.550
<v Speaker 1>then pass through double dash q equals

01:16:49.065 --> 01:16:50.985
<v Speaker 1>and give it a concept based string of

01:16:50.985 --> 01:16:53.225
<v Speaker 1>different queues. So you could put just default

01:16:53.225 --> 01:16:54.745
<v Speaker 1>that and that from the default one.

01:16:55.065 --> 01:16:56.745
<v Speaker 1>So you you have different high high and

01:16:56.745 --> 01:16:58.345
<v Speaker 1>low priority queues. You can make the high

01:16:58.345 --> 01:17:00.905
<v Speaker 1>priority queue have 10 workers, low priority have

01:17:00.600 --> 01:17:02.840
<v Speaker 1>two workers, and that's something for the purpose.

01:17:02.840 --> 01:17:05.160
<v Speaker 0>Yeah. And and that's that exact reason is

01:17:05.160 --> 01:17:07.000
<v Speaker 0>why I would use its own deployment

01:17:07.160 --> 01:17:09.160
<v Speaker 0>for each of the different queue semantics I've

01:17:09.160 --> 01:17:10.440
<v Speaker 0>got so that I can really define the

01:17:10.440 --> 01:17:11.960
<v Speaker 0>quality of service and how quickly I need

01:17:11.960 --> 01:17:13.640
<v Speaker 0>to process and how many workers and how

01:17:13.640 --> 01:17:15.875
<v Speaker 0>many replicas. Like not all queues, I would

01:17:15.875 --> 01:17:17.955
<v Speaker 0>imagine at least in applications I've written in

01:17:17.955 --> 01:17:20.114
<v Speaker 0>the past would be considered equal and I'd

01:17:20.114 --> 01:17:21.715
<v Speaker 0>wanna be able to tweak that. It may

01:17:21.715 --> 01:17:24.114
<v Speaker 0>seem like, I'll just add a new pod,

01:17:24.114 --> 01:17:25.715
<v Speaker 0>add a new container to my main pod

01:17:25.715 --> 01:17:27.875
<v Speaker 0>but I don't think that would be necessarily

01:17:27.875 --> 01:17:29.370
<v Speaker 0>the right way to handle that.

01:17:30.410 --> 01:17:31.450
<v Speaker 0>Let's apply.

01:17:35.050 --> 01:17:36.330
<v Speaker 0>Where are we?

01:17:38.490 --> 01:17:40.730
<v Speaker 0>Queue workers. Right. We now have five queue

01:17:40.730 --> 01:17:42.970
<v Speaker 0>workers. Can we do we can we confirm

01:17:42.970 --> 01:17:43.290
<v Speaker 0>that?

01:17:43.785 --> 01:17:46.665
<v Speaker 1>Yes. We can. So in the rooms, if

01:17:46.665 --> 01:17:49.465
<v Speaker 1>you go to slash queue dash jobs, it

01:17:49.465 --> 01:17:51.145
<v Speaker 1>will should send three emails.

01:17:52.185 --> 01:17:53.785
<v Speaker 1>Oh, first of all, if we check the

01:17:53.785 --> 01:17:55.465
<v Speaker 1>email provider, we should have an email from

01:17:55.465 --> 01:17:56.665
<v Speaker 1>the con job in there now.

01:17:59.710 --> 01:18:00.430
<v Speaker 0>Tada.

01:18:00.830 --> 01:18:01.950
<v Speaker 1>Nice. So

01:18:02.270 --> 01:18:04.110
<v Speaker 1>that means the cron's working. That's great. And

01:18:04.110 --> 01:18:06.430
<v Speaker 1>so all new alignment. That's all working fine.

01:18:06.430 --> 01:18:07.950
<v Speaker 1>Now if you hit q

01:18:08.110 --> 01:18:08.830
<v Speaker 1>dash

01:18:09.390 --> 01:18:09.710
<v Speaker 1>jobs,

01:18:12.244 --> 01:18:15.044
<v Speaker 1>it should send three more emails off.

01:18:15.844 --> 01:18:16.724
<v Speaker 0>There we go.

01:18:17.045 --> 01:18:18.564
<v Speaker 0>There we have our queue workers.

01:18:18.645 --> 01:18:19.604
<v Speaker 0>Easy peasy.

01:18:21.364 --> 01:18:23.525
<v Speaker 1>So there's something that you can because Pigfy

01:18:23.525 --> 01:18:25.940
<v Speaker 1>isn't really designed for long running, at least

01:18:25.940 --> 01:18:27.940
<v Speaker 1>it was never initially designed for long running

01:18:27.940 --> 01:18:28.660
<v Speaker 1>jobs.

01:18:30.260 --> 01:18:32.740
<v Speaker 1>It's kind of basically a a sort of

01:18:32.740 --> 01:18:34.900
<v Speaker 1>hacky way of doing it. The key worker

01:18:34.900 --> 01:18:37.140
<v Speaker 1>is that moment. And so you can sometimes

01:18:37.140 --> 01:18:40.094
<v Speaker 1>get many issues with that. So Laravel does

01:18:40.094 --> 01:18:42.094
<v Speaker 1>provide something called max jobs, which is another

01:18:42.094 --> 01:18:43.614
<v Speaker 1>flag in your past, which means that it'll

01:18:43.614 --> 01:18:45.774
<v Speaker 1>kill off that that worker

01:18:45.855 --> 01:18:47.695
<v Speaker 1>and send, like, an exit signal to it

01:18:47.695 --> 01:18:50.414
<v Speaker 1>after x number of jobs. If you were

01:18:50.414 --> 01:18:52.094
<v Speaker 1>to do that with the

01:18:53.350 --> 01:18:54.310
<v Speaker 1>container,

01:18:54.550 --> 01:18:56.150
<v Speaker 1>would that spin up a new one, which

01:18:56.150 --> 01:18:58.550
<v Speaker 1>is what you'd expect? Or would that then

01:18:58.550 --> 01:19:00.870
<v Speaker 1>start, like, a whole cascade of issues?

01:19:02.230 --> 01:19:04.390
<v Speaker 0>Yeah. What what I would use is the

01:19:04.390 --> 01:19:06.534
<v Speaker 0>resource limits here. You know, I I've already

01:19:06.534 --> 01:19:09.175
<v Speaker 0>defined how much how many resources I'm happy

01:19:09.175 --> 01:19:11.094
<v Speaker 0>for these queue workers to consume. So like

01:19:11.094 --> 01:19:13.175
<v Speaker 0>Kubernetes is gonna restart it when it when

01:19:13.175 --> 01:19:15.254
<v Speaker 0>it starts to break these limits anyway.

01:19:15.494 --> 01:19:17.815
<v Speaker 0>Okay. You wouldn't really need to hook into

01:19:17.815 --> 01:19:19.895
<v Speaker 0>the Laravel aspect there. I would just rely

01:19:19.895 --> 01:19:22.350
<v Speaker 0>on the container scheduling to go, hey, I

01:19:22.350 --> 01:19:23.790
<v Speaker 0>don't really want you to consume in 14

01:19:23.790 --> 01:19:25.710
<v Speaker 0>gig of RAM, I'm gonna restart you now.

01:19:26.429 --> 01:19:28.030
<v Speaker 1>That's cool. So That's that's his job. Don't

01:19:28.030 --> 01:19:30.989
<v Speaker 1>have yourself. That's fine. And what's the 500

01:19:30.989 --> 01:19:32.989
<v Speaker 1>m? That wasn't really covered earlier, I guess,

01:19:32.989 --> 01:19:35.855
<v Speaker 1>for the CPU. So a single CPU is

01:19:35.855 --> 01:19:38.255
<v Speaker 0>broken down into 1,000 units.

01:19:38.815 --> 01:19:40.735
<v Speaker 0>I think they're called milli cores. So you

01:19:40.735 --> 01:19:42.575
<v Speaker 0>can say this is essentially me saying the

01:19:42.575 --> 01:19:44.735
<v Speaker 0>half a core. This this process is restricted

01:19:44.735 --> 01:19:46.575
<v Speaker 0>to half a core of the host machine.

01:19:47.940 --> 01:19:50.660
<v Speaker 1>Does that does that translate to roughly, like,

01:19:50.660 --> 01:19:52.260
<v Speaker 1>every one and two instructions?

01:19:52.900 --> 01:19:55.220
<v Speaker 1>Like, so if there's two pods on there,

01:19:55.220 --> 01:19:56.580
<v Speaker 1>both given half a core,

01:19:56.900 --> 01:19:59.620
<v Speaker 1>they will, like, sort of alternate who can

01:19:59.620 --> 01:20:01.795
<v Speaker 1>get access or is or is that just

01:20:01.795 --> 01:20:03.875
<v Speaker 1>like No. So it depends on how many

01:20:03.875 --> 01:20:06.514
<v Speaker 0>cores are available on the machine. So like,

01:20:06.755 --> 01:20:07.795
<v Speaker 0>I'm not sure if I'm gonna be able

01:20:07.795 --> 01:20:10.355
<v Speaker 0>to get that information from Kubernetes

01:20:10.355 --> 01:20:11.715
<v Speaker 0>here. In fact,

01:20:13.475 --> 01:20:15.475
<v Speaker 0>let's see how permissive our thing is.

01:20:17.640 --> 01:20:19.000
<v Speaker 0>So containers

01:20:19.000 --> 01:20:21.320
<v Speaker 0>don't necessarily obscure the view of the proc

01:20:21.320 --> 01:20:22.360
<v Speaker 0>fail system.

01:20:22.840 --> 01:20:24.040
<v Speaker 0>So typically

01:20:24.200 --> 01:20:25.880
<v Speaker 0>you can just pop in here

01:20:27.239 --> 01:20:29.640
<v Speaker 0>and you'll still see the actual host information.

01:20:29.640 --> 01:20:31.455
<v Speaker 0>So you could see here I've got processors

01:20:31.455 --> 01:20:34.494
<v Speaker 0>which means if I set this to

01:20:36.175 --> 01:20:37.295
<v Speaker 0>4,000

01:20:37.295 --> 01:20:38.334
<v Speaker 0>m and

01:20:40.574 --> 01:20:41.934
<v Speaker 0>scale this,

01:20:42.175 --> 01:20:44.175
<v Speaker 0>we've got it set on five. Yeah. We

01:20:44.175 --> 01:20:45.614
<v Speaker 0>won't see all five of those schedule.

01:20:46.140 --> 01:20:48.060
<v Speaker 0>We should see that fail. So

01:20:53.260 --> 01:20:54.380
<v Speaker 0>yeah. There we go.

01:20:54.780 --> 01:20:57.340
<v Speaker 0>We we have pending queue workers and if

01:20:57.340 --> 01:20:57.980
<v Speaker 0>I

01:20:58.300 --> 01:21:00.300
<v Speaker 0>describe

01:20:59.605 --> 01:21:01.764
<v Speaker 0>one of those, it'll tell me that the

01:21:01.764 --> 01:21:03.124
<v Speaker 0>resources aren't available

01:21:03.364 --> 01:21:04.885
<v Speaker 0>and sufficient CPU.

01:21:05.204 --> 01:21:06.485
<v Speaker 1>Okay. Right.

01:21:07.045 --> 01:21:07.844
<v Speaker 1>Not

01:21:08.324 --> 01:21:09.284
<v Speaker 1>it's not like

01:21:09.685 --> 01:21:11.284
<v Speaker 1>how it allocates it. So

01:21:11.844 --> 01:21:13.685
<v Speaker 0>Well, it's because we're using a limit. Right?

01:21:13.685 --> 01:21:15.445
<v Speaker 0>I mean, I could have said

01:21:18.850 --> 01:21:19.730
<v Speaker 0>requests

01:21:20.770 --> 01:21:22.930
<v Speaker 0>which means I kinda want this but it's

01:21:22.930 --> 01:21:24.770
<v Speaker 0>not a hard request, know, if it's available,

01:21:24.770 --> 01:21:27.090
<v Speaker 0>give me it. Whereas a limit is like,

01:21:27.090 --> 01:21:29.410
<v Speaker 0>it's actually gonna set aside half a quart

01:21:29.410 --> 01:21:30.690
<v Speaker 0>for that process

01:21:30.935 --> 01:21:33.015
<v Speaker 0>and it's gonna set aside 50 mega ram

01:21:33.015 --> 01:21:35.575
<v Speaker 0>for that process and it won't allow me

01:21:35.575 --> 01:21:38.695
<v Speaker 0>to schedule. So there's still contention for any

01:21:38.695 --> 01:21:40.375
<v Speaker 0>pods that are running on the machine, they're

01:21:40.375 --> 01:21:42.615
<v Speaker 0>still competing for resources dependent on the instructions

01:21:42.615 --> 01:21:45.320
<v Speaker 0>we're sending but the scheduler is gonna go,

01:21:45.320 --> 01:21:46.920
<v Speaker 0>I know at some point this is gonna

01:21:46.920 --> 01:21:47.639
<v Speaker 0>have

01:21:48.360 --> 01:21:50.760
<v Speaker 0>4,000 milli cores of CPU and I'm not

01:21:50.760 --> 01:21:52.440
<v Speaker 0>gonna schedule anything that tries to go beyond

01:21:52.440 --> 01:21:54.599
<v Speaker 0>that. Whereas if I leave this as request,

01:21:54.599 --> 01:21:56.440
<v Speaker 0>we should see that

01:21:56.865 --> 01:21:57.425
<v Speaker 0>adjust

01:21:57.745 --> 01:21:59.665
<v Speaker 0>I think it will actually schedule most of

01:21:59.665 --> 01:22:00.305
<v Speaker 0>the time.

01:22:01.745 --> 01:22:03.985
<v Speaker 1>Because they're not using that many at that

01:22:03.985 --> 01:22:04.545
<v Speaker 1>time.

01:22:05.585 --> 01:22:07.265
<v Speaker 0>Oh, no. I okay. So the scheduler is

01:22:07.265 --> 01:22:09.679
<v Speaker 0>gonna say no as well. Alright. So

01:22:10.800 --> 01:22:12.320
<v Speaker 0>but yeah. The request is kinda given the

01:22:12.320 --> 01:22:13.920
<v Speaker 0>scheduler a hand of what you need. The

01:22:13.920 --> 01:22:16.320
<v Speaker 0>limits means restart the process of every goes

01:22:16.320 --> 01:22:18.639
<v Speaker 0>beyond it and then the schedule will do

01:22:18.639 --> 01:22:20.159
<v Speaker 0>its best to make sure you schedule on

01:22:20.159 --> 01:22:21.600
<v Speaker 0>a note where it's not gonna have too

01:22:21.600 --> 01:22:23.280
<v Speaker 0>much contention for those

01:22:23.725 --> 01:22:25.804
<v Speaker 1>So Okay. Yeah. That makes sense.

01:22:26.285 --> 01:22:27.565
<v Speaker 1>Okay. That is

01:22:28.605 --> 01:22:31.565
<v Speaker 1>actually to be fair, everything apart from

01:22:31.725 --> 01:22:33.725
<v Speaker 1>one thing on my list for the pretty

01:22:33.725 --> 01:22:36.045
<v Speaker 1>much. So What did we not cover?

01:22:38.000 --> 01:22:40.239
<v Speaker 1>Release cycle. So how would you not go

01:22:40.239 --> 01:22:42.639
<v Speaker 1>about doing the natural like full on release?

01:22:42.640 --> 01:22:44.880
<v Speaker 1>Not necessarily with like CI's of thought. You

01:22:44.880 --> 01:22:46.160
<v Speaker 1>build a new image, it needs to be

01:22:46.160 --> 01:22:46.800
<v Speaker 1>deployed.

01:22:47.040 --> 01:22:49.600
<v Speaker 1>Can you go in with QCTL,

01:22:49.600 --> 01:22:50.320
<v Speaker 1>delete the pods?

01:22:50.945 --> 01:22:53.185
<v Speaker 1>How would you automate that or something? No.

01:22:53.185 --> 01:22:54.865
<v Speaker 0>I mean it'll it'll handle that for you

01:22:54.865 --> 01:22:56.065
<v Speaker 0>so let's assume

01:22:56.225 --> 01:22:58.065
<v Speaker 0>and we can do this in two minutes.

01:22:59.025 --> 01:22:59.905
<v Speaker 0>So

01:23:00.865 --> 01:23:02.465
<v Speaker 0>yeah, let's use our queue worker. Right?

01:23:03.420 --> 01:23:05.820
<v Speaker 0>So firstly, let's just remove these limits

01:23:06.220 --> 01:23:07.900
<v Speaker 0>so we can get all five and let's

01:23:07.900 --> 01:23:10.220
<v Speaker 0>change the image. Let's say instead of, you

01:23:10.220 --> 01:23:11.820
<v Speaker 0>know, normally we would change the tag here

01:23:11.820 --> 01:23:13.660
<v Speaker 0>to be v 54

01:23:13.660 --> 01:23:15.660
<v Speaker 0>or whatever. Right? But what if I just

01:23:15.660 --> 01:23:17.260
<v Speaker 0>wanna say deploy engine x?

01:23:18.094 --> 01:23:20.015
<v Speaker 0>So the way that this works is if

01:23:20.015 --> 01:23:22.415
<v Speaker 0>I just deploy this and run this really

01:23:22.415 --> 01:23:23.054
<v Speaker 0>quickly,

01:23:23.935 --> 01:23:24.735
<v Speaker 0>is it

01:23:24.975 --> 01:23:26.815
<v Speaker 0>oh, container errors.

01:23:27.614 --> 01:23:28.975
<v Speaker 0>Let's just take off all this stuff that

01:23:28.975 --> 01:23:31.190
<v Speaker 0>we don't need. The security context is why

01:23:31.190 --> 01:23:32.150
<v Speaker 0>that's failing

01:23:34.390 --> 01:23:36.469
<v Speaker 0>and the command won't exist. But there's a

01:23:36.469 --> 01:23:38.550
<v Speaker 0>whole lot of why that was failing. So

01:23:41.350 --> 01:23:42.870
<v Speaker 0>so again for trying to do it too

01:23:42.870 --> 01:23:45.030
<v Speaker 0>quickly. Right. Okay. That's

01:23:44.755 --> 01:23:45.715
<v Speaker 0>pretty generic.

01:23:45.875 --> 01:23:48.114
<v Speaker 0>So let's reapply that and then run this.

01:23:48.515 --> 01:23:50.355
<v Speaker 0>What we're gonna see is that

01:23:50.995 --> 01:23:53.555
<v Speaker 0>and it's it's fast so it's difficult. Right?

01:23:53.555 --> 01:23:55.795
<v Speaker 0>But we actually spun up two

01:23:56.355 --> 01:23:58.150
<v Speaker 0>new ones before shutting down the first one

01:23:58.150 --> 01:23:59.590
<v Speaker 0>then we spun up a third and then

01:23:59.590 --> 01:24:01.670
<v Speaker 0>we started scheduling two more after that and

01:24:01.670 --> 01:24:03.110
<v Speaker 0>then it starts terminating.

01:24:03.270 --> 01:24:05.670
<v Speaker 0>So on top of a deployment object, actually

01:24:05.670 --> 01:24:07.990
<v Speaker 0>have the ability to specify the

01:24:09.670 --> 01:24:10.870
<v Speaker 0>the strategy

01:24:11.190 --> 01:24:14.390
<v Speaker 0>and then we can have a type

01:24:14.035 --> 01:24:16.435
<v Speaker 0>and a rolling update, rolling

01:24:18.115 --> 01:24:18.994
<v Speaker 0>update

01:24:18.995 --> 01:24:21.155
<v Speaker 0>which allows us to specify a search

01:24:21.395 --> 01:24:23.074
<v Speaker 0>or a max unavailable.

01:24:23.395 --> 01:24:23.954
<v Speaker 0>So

01:24:24.275 --> 01:24:26.515
<v Speaker 0>the deployment already knows how to do safe

01:24:26.515 --> 01:24:29.000
<v Speaker 0>deploys with new images. You have to tell

01:24:29.000 --> 01:24:30.760
<v Speaker 0>it to do the rolling update which is

01:24:30.760 --> 01:24:32.920
<v Speaker 0>actually happens by default and you get a

01:24:32.920 --> 01:24:34.440
<v Speaker 0>max surge of

01:24:34.760 --> 01:24:38.200
<v Speaker 0>one I think. You can also use percentages

01:24:38.600 --> 01:24:40.520
<v Speaker 0>so you could say that I want 25%

01:24:40.520 --> 01:24:42.440
<v Speaker 0>of my pods to be unavailable. That means

01:24:42.440 --> 01:24:46.025
<v Speaker 0>that it will sacrifice, let's assume, sorry, lots

01:24:46.025 --> 01:24:46.905
<v Speaker 0>of information.

01:24:47.225 --> 01:24:49.065
<v Speaker 0>Let's assume I have 10 pods running, if

01:24:49.065 --> 01:24:51.304
<v Speaker 0>I have a max unavailable of 25%,

01:24:51.545 --> 01:24:53.545
<v Speaker 0>it's gonna be able to shut down 25%

01:24:53.545 --> 01:24:56.025
<v Speaker 0>of those pods which is two. If it

01:24:56.025 --> 01:24:58.050
<v Speaker 0>was 50% it would shut down five and

01:24:58.210 --> 01:24:59.810
<v Speaker 0>then it would spin up new ones. If

01:24:59.810 --> 01:25:01.409
<v Speaker 0>we go with a surge approach what we

01:25:01.409 --> 01:25:02.769
<v Speaker 0>say is I have 10

01:25:03.090 --> 01:25:04.929
<v Speaker 0>with a max surge of 50, I'll actually

01:25:04.929 --> 01:25:06.289
<v Speaker 0>schedule up to 15

01:25:06.530 --> 01:25:08.290
<v Speaker 0>and then once five are healthy shut down

01:25:08.290 --> 01:25:09.409
<v Speaker 0>five and then spin up more.

01:25:10.285 --> 01:25:12.844
<v Speaker 1>Okay. So so with that in

01:25:12.925 --> 01:25:14.925
<v Speaker 1>combination or we use one or the other?

01:25:14.925 --> 01:25:16.125
<v Speaker 0>You can only use one or the other.

01:25:16.125 --> 01:25:17.965
<v Speaker 0>So you can let's

01:25:17.965 --> 01:25:19.565
<v Speaker 0>let's double check. Right? Because I've been wrong

01:25:19.565 --> 01:25:21.725
<v Speaker 0>a few times a day anyway but

01:25:22.670 --> 01:25:24.429
<v Speaker 0>I didn't care. Okay. I guess you can

01:25:24.429 --> 01:25:25.710
<v Speaker 0>use them both together. I thought you could

01:25:25.710 --> 01:25:27.630
<v Speaker 0>only pick one. So, here I could say

01:25:27.630 --> 01:25:30.909
<v Speaker 0>I I always need at least 75%

01:25:30.909 --> 01:25:32.670
<v Speaker 0>to be running and I don't mind scheduling

01:25:32.670 --> 01:25:35.389
<v Speaker 0>over provisioning by 50%. And then the scheduler

01:25:35.389 --> 01:25:36.909
<v Speaker 0>will work all out for you. You don't

01:25:36.909 --> 01:25:39.335
<v Speaker 0>need to worry about it too much. Okay.

01:25:39.575 --> 01:25:41.655
<v Speaker 1>Okay. So in terms of

01:25:42.615 --> 01:25:44.935
<v Speaker 1>when when you do release, you'd normally have

01:25:44.935 --> 01:25:45.655
<v Speaker 1>a

01:25:47.495 --> 01:25:50.550
<v Speaker 1>your deployment process, your CIO, whatever, would tag

01:25:50.550 --> 01:25:53.110
<v Speaker 1>a new version of the image and then

01:25:53.110 --> 01:25:53.989
<v Speaker 1>would you

01:25:54.469 --> 01:25:57.110
<v Speaker 1>do, like, a cube apart a cube CTL

01:25:57.110 --> 01:25:59.349
<v Speaker 1>apply and that would then start pulling in

01:25:59.349 --> 01:26:01.510
<v Speaker 1>the new images for you? It's it's definitely

01:26:01.510 --> 01:26:03.670
<v Speaker 0>how I would start my, you know, my

01:26:03.670 --> 01:26:07.335
<v Speaker 0>continuous integration deployments ever would just reply over

01:26:07.335 --> 01:26:10.215
<v Speaker 0>the top with that new tag or whatever

01:26:10.215 --> 01:26:12.135
<v Speaker 0>I'm using and that Kubernetes had up from

01:26:12.135 --> 01:26:13.655
<v Speaker 0>there and then eventually you can start to

01:26:13.655 --> 01:26:15.735
<v Speaker 0>look at things like, you know, get ops,

01:26:16.055 --> 01:26:18.680
<v Speaker 0>continuous deployment from within the cluster and get

01:26:18.680 --> 01:26:21.080
<v Speaker 0>a little bit more sophisticated doing progressive rollouts

01:26:21.080 --> 01:26:23.560
<v Speaker 0>making sure that, you know, the metrics don't

01:26:23.560 --> 01:26:25.480
<v Speaker 0>change for the first ten minutes at 10%

01:26:25.480 --> 01:26:27.640
<v Speaker 0>traffic and then scaling up. We could do

01:26:27.640 --> 01:26:29.400
<v Speaker 0>a couple of more episodes on that. I'm

01:26:29.400 --> 01:26:30.520
<v Speaker 0>not gonna be able to do it justice

01:26:30.520 --> 01:26:33.435
<v Speaker 0>and like ten seconds but Yeah. You could

01:26:33.435 --> 01:26:35.514
<v Speaker 0>definitely start with a cube control apply and

01:26:35.514 --> 01:26:36.554
<v Speaker 0>then take it from there.

01:26:36.955 --> 01:26:39.514
<v Speaker 1>Okay. That sounds good. Alright. That's cool. Everything

01:26:39.514 --> 01:26:41.195
<v Speaker 1>I think so. Yeah. We we covered it

01:26:41.195 --> 01:26:41.755
<v Speaker 0>a lot.

01:26:42.315 --> 01:26:44.155
<v Speaker 0>What I'll suggest is I hope people find

01:26:44.155 --> 01:26:46.235
<v Speaker 0>this useful. Leave comments or anything that you

01:26:46.235 --> 01:26:47.710
<v Speaker 0>want us to tackle on a future episode.

01:26:47.710 --> 01:26:49.150
<v Speaker 0>I'm sure Alex would be happy to join

01:26:49.150 --> 01:26:51.469
<v Speaker 0>me. Alex and I'll have our own conversations

01:26:51.469 --> 01:26:52.670
<v Speaker 0>and work out what else we can do

01:26:52.670 --> 01:26:54.429
<v Speaker 0>in the future. We definitely wanna I've already

01:26:54.429 --> 01:26:56.030
<v Speaker 1>got an idea of what we should probably

01:26:56.030 --> 01:26:57.869
<v Speaker 1>hate before, so we'll cover that out of

01:26:57.869 --> 01:26:58.750
<v Speaker 1>outside of the screen.

01:26:59.405 --> 01:27:01.405
<v Speaker 0>Alright. Well, thank you for joining me, Alex.

01:27:01.405 --> 01:27:02.844
<v Speaker 0>It was an absolute pleasure. I had fun

01:27:02.844 --> 01:27:04.364
<v Speaker 0>doing that. I'll see you for the next

01:27:04.364 --> 01:27:06.125
<v Speaker 0>one. Goodbye, everyone. Cheers.
