WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: dbc317e6-b13c-4e85-aeb1-fb1c18d75671
Created: 2025-04-29T22:17:18.730Z
Duration: 5372.017
Channels: 1

00:01:59.605 --> 00:02:00.485
<v Speaker 0>Hello,

00:02:00.725 --> 00:02:01.365
<v Speaker 0>and welcome.

00:02:02.805 --> 00:02:04.005
<v Speaker 0>Thank you, Derek.

00:02:05.445 --> 00:02:07.845
<v Speaker 0>I will pop that on the screen. Thank

00:02:07.845 --> 00:02:09.925
<v Speaker 0>you. Today, I am joined by Derek Ressons,

00:02:10.340 --> 00:02:12.900
<v Speaker 0>the author and maintainer and all around nice

00:02:12.900 --> 00:02:13.540
<v Speaker 0>person

00:02:13.700 --> 00:02:15.299
<v Speaker 0>surrounding xdebug.

00:02:15.299 --> 00:02:16.420
<v Speaker 0>How are you, Derek?

00:02:16.819 --> 00:02:19.060
<v Speaker 1>I'm good. Yourself? It's been a beautiful day

00:02:19.060 --> 00:02:19.700
<v Speaker 1>today.

00:02:20.819 --> 00:02:23.379
<v Speaker 0>It has, which has made my video set

00:02:23.379 --> 00:02:24.659
<v Speaker 0>up a little bit more difficult than I

00:02:24.659 --> 00:02:26.694
<v Speaker 0>wanted it to be. But Yeah. I've been

00:02:26.694 --> 00:02:27.655
<v Speaker 1>I've

00:02:27.655 --> 00:02:29.735
<v Speaker 1>been hacking on SSL related the whole day,

00:02:29.735 --> 00:02:30.775
<v Speaker 1>so there we go.

00:02:31.735 --> 00:02:34.375
<v Speaker 0>Oh, nice. Any nice long walks today? You've

00:02:34.375 --> 00:02:36.215
<v Speaker 0>been walking the chip station. Right?

00:02:37.015 --> 00:02:39.495
<v Speaker 1>Oh, yeah. Not today. That's usually a weekend

00:02:39.495 --> 00:02:42.540
<v Speaker 1>thing, so that's back for Saturday and Sunday.

00:02:42.540 --> 00:02:43.100
<v Speaker 1>Yeah.

00:02:43.420 --> 00:02:45.260
<v Speaker 1>Plan is to walk the length of all

00:02:45.260 --> 00:02:46.620
<v Speaker 1>the London tube lines.

00:02:48.540 --> 00:02:50.620
<v Speaker 0>Yeah. No easy things there.

00:02:50.940 --> 00:02:52.620
<v Speaker 1>Yeah. It's just not it's not hard. It

00:02:52.620 --> 00:02:53.900
<v Speaker 1>just takes a long time.

00:02:54.540 --> 00:02:55.180
<v Speaker 0>Yeah. Yeah.

00:02:55.995 --> 00:02:57.195
<v Speaker 0>So today,

00:02:57.275 --> 00:02:57.995
<v Speaker 0>you've

00:02:58.235 --> 00:03:00.075
<v Speaker 0>very graciously offered to join me

00:03:00.475 --> 00:03:04.475
<v Speaker 0>and teach me how to profile PHP applications

00:03:04.475 --> 00:03:06.475
<v Speaker 0>with xdebug.

00:03:06.475 --> 00:03:07.195
<v Speaker 0>Right.

00:03:07.595 --> 00:03:08.840
<v Speaker 0>Alright. Excellent.

00:03:08.840 --> 00:03:11.560
<v Speaker 0>So before we get started on that, what

00:03:11.560 --> 00:03:13.800
<v Speaker 0>I would like to do is say that

00:03:14.359 --> 00:03:17.000
<v Speaker 0>we do have a Discord where people can

00:03:17.000 --> 00:03:19.640
<v Speaker 0>come and chat and leave questions. You are

00:03:19.640 --> 00:03:22.120
<v Speaker 0>also very welcome to leave questions on YouTube.

00:03:22.885 --> 00:03:25.285
<v Speaker 0>However, if you are feeling brave and you

00:03:25.285 --> 00:03:27.445
<v Speaker 0>wish to pop into the stream and join

00:03:27.445 --> 00:03:29.365
<v Speaker 0>us live to ask your question and have

00:03:29.365 --> 00:03:30.885
<v Speaker 0>a short discussion, then we will try and

00:03:30.885 --> 00:03:32.485
<v Speaker 0>fit that in towards the end. If you

00:03:32.485 --> 00:03:34.005
<v Speaker 0>wanna do that, drop me a message on

00:03:34.005 --> 00:03:35.365
<v Speaker 0>Discord, and we will try to sort it

00:03:35.365 --> 00:03:35.605
<v Speaker 0>out.

00:03:37.269 --> 00:03:39.670
<v Speaker 0>Now to get started today,

00:03:39.989 --> 00:03:40.710
<v Speaker 0>we

00:03:40.790 --> 00:03:43.350
<v Speaker 0>need my screen to be shared.

00:03:44.870 --> 00:03:46.549
<v Speaker 0>And we will do this.

00:03:49.725 --> 00:03:51.805
<v Speaker 0>And by the power of magic, we are

00:03:51.805 --> 00:03:52.365
<v Speaker 0>in.

00:03:53.005 --> 00:03:54.925
<v Speaker 0>So I'm starting off with a pretty

00:03:56.365 --> 00:03:58.125
<v Speaker 0>sorry. Did you say something there, Derek?

00:03:58.685 --> 00:04:00.285
<v Speaker 1>No. I just need to make sure that

00:04:00.285 --> 00:04:02.365
<v Speaker 1>I increase the font size on this because

00:04:02.365 --> 00:04:04.450
<v Speaker 1>I can't read that. There we go. That's

00:04:04.450 --> 00:04:06.530
<v Speaker 1>a bit better. Yeah. So the font size

00:04:06.530 --> 00:04:08.450
<v Speaker 0>on the sidebar, I do not know how

00:04:08.450 --> 00:04:10.210
<v Speaker 0>to make that bigger without zooming in on

00:04:10.210 --> 00:04:12.530
<v Speaker 0>the whole thing because I think it's, like,

00:04:12.530 --> 00:04:14.210
<v Speaker 0>an electron app. I can't remember what code

00:04:14.210 --> 00:04:16.209
<v Speaker 0>is. But the text editor should be nice

00:04:16.209 --> 00:04:18.450
<v Speaker 0>and large for us. Yes. That I can

00:04:18.450 --> 00:04:18.690
<v Speaker 1>write.

00:04:19.375 --> 00:04:20.255
<v Speaker 1>Excellent.

00:04:20.495 --> 00:04:22.335
<v Speaker 1>And, hopefully, your terminal's as well.

00:04:23.615 --> 00:04:24.895
<v Speaker 0>Yeah. My terminal

00:04:25.854 --> 00:04:27.535
<v Speaker 1>Oh, that's easy peasy.

00:04:28.014 --> 00:04:30.014
<v Speaker 0>You know, I've I just now leave it

00:04:30.014 --> 00:04:31.500
<v Speaker 0>like this all the time. So even when

00:04:31.500 --> 00:04:33.180
<v Speaker 0>I'm coding on my own and it's not

00:04:33.180 --> 00:04:34.860
<v Speaker 0>for a stream, I just present it with

00:04:34.860 --> 00:04:36.220
<v Speaker 0>this massive text. And you know what? It's

00:04:36.220 --> 00:04:38.940
<v Speaker 0>it's oddly satisfying. Like, I don't need to

00:04:38.940 --> 00:04:40.780
<v Speaker 0>see 14 functions at once. I just need

00:04:40.780 --> 00:04:43.500
<v Speaker 0>to see see what Yeah. It's true. And

00:04:43.500 --> 00:04:46.005
<v Speaker 1>that is, like, funny how that goes. Let

00:04:46.005 --> 00:04:48.565
<v Speaker 1>me actually put my face in your whole

00:04:48.565 --> 00:04:50.165
<v Speaker 1>screen because you've cut me off a little

00:04:50.165 --> 00:04:52.965
<v Speaker 1>bit. There we go. Oh, hi, Ruth. Sorry

00:04:52.965 --> 00:04:53.685
<v Speaker 0>about that.

00:04:54.324 --> 00:04:56.405
<v Speaker 0>Been live moving your face to the center

00:04:56.405 --> 00:04:57.445
<v Speaker 0>of the screen. Pretty

00:04:58.405 --> 00:05:00.085
<v Speaker 1>Now you can't see my lovely backgrounds.

00:05:00.970 --> 00:05:02.650
<v Speaker 0>We can see better, but don't worry. I

00:05:02.650 --> 00:05:04.169
<v Speaker 0>can I can see it? Okay.

00:05:05.210 --> 00:05:07.210
<v Speaker 0>So I'm starting from a clean slate today.

00:05:07.370 --> 00:05:09.449
<v Speaker 0>Anyone who's watched the stream before will know

00:05:09.449 --> 00:05:11.449
<v Speaker 0>that I have a lot of PHP experience,

00:05:11.610 --> 00:05:14.435
<v Speaker 0>but I haven't really got any modern PHP

00:05:14.435 --> 00:05:16.354
<v Speaker 0>experience. I haven't really written a lot of

00:05:16.354 --> 00:05:19.074
<v Speaker 0>PHP in the last four to five years,

00:05:19.474 --> 00:05:21.555
<v Speaker 0>which means that my computer setup right now

00:05:21.555 --> 00:05:24.514
<v Speaker 0>comes with whatever the Mac gives me.

00:05:25.340 --> 00:05:27.340
<v Speaker 0>I have PHP 7.3,

00:05:27.500 --> 00:05:30.460
<v Speaker 0>and I installed Composer through brew. But I

00:05:30.460 --> 00:05:32.540
<v Speaker 0>haven't done anything else. Nothing else is done

00:05:32.540 --> 00:05:34.060
<v Speaker 0>in advance of this session.

00:05:34.540 --> 00:05:36.300
<v Speaker 1>Do you have any home brew setups or

00:05:36.300 --> 00:05:36.460
<v Speaker 1>not?

00:05:37.474 --> 00:05:39.955
<v Speaker 0>I do have homebrew available. We can install

00:05:39.955 --> 00:05:42.115
<v Speaker 0>anything that we need to get going. Yeah.

00:05:42.115 --> 00:05:44.115
<v Speaker 1>So get rid get first thing I would

00:05:44.115 --> 00:05:45.715
<v Speaker 1>always recommend, get rid of the PHP that

00:05:45.715 --> 00:05:47.074
<v Speaker 1>comes with the Mac because I don't know

00:05:47.074 --> 00:05:48.675
<v Speaker 1>what they've done to it, but it doesn't

00:05:48.675 --> 00:05:49.634
<v Speaker 1>behave as it should.

00:05:50.449 --> 00:05:53.090
<v Speaker 0>It doesn't behave as it should. Okay. Even

00:05:53.090 --> 00:05:54.850
<v Speaker 1>tells it even it even tells you when

00:05:54.850 --> 00:05:56.130
<v Speaker 1>you type PHP. Right?

00:05:56.690 --> 00:05:58.930
<v Speaker 0>So yeah. Because I'm also running Big Sur,

00:05:58.930 --> 00:06:01.010
<v Speaker 0>living life on the edge, it now says

00:06:01.010 --> 00:06:03.415
<v Speaker 0>PHP is not recommended. But I think what

00:06:03.415 --> 00:06:05.015
<v Speaker 0>they actually mean is is no longer gonna

00:06:05.015 --> 00:06:07.335
<v Speaker 0>ship by default with the next version. So

00:06:07.815 --> 00:06:10.375
<v Speaker 0>it's a really terrible message or some developer

00:06:10.375 --> 00:06:11.895
<v Speaker 0>having a very bad joke.

00:06:12.695 --> 00:06:14.855
<v Speaker 0>So can I just do brew install PHP?

00:06:15.289 --> 00:06:15.930
<v Speaker 1>Yes.

00:06:16.650 --> 00:06:18.169
<v Speaker 1>I think so. I don't use a Mac.

00:06:18.169 --> 00:06:19.290
<v Speaker 1>I'm just guessing it.

00:06:21.210 --> 00:06:23.210
<v Speaker 0>I don't really use a Mac either. It's

00:06:23.210 --> 00:06:24.650
<v Speaker 0>something that I took on as part of

00:06:24.650 --> 00:06:27.530
<v Speaker 0>my new role with Packet, and I'm still

00:06:27.770 --> 00:06:29.289
<v Speaker 0>very much getting used to it. I mess

00:06:29.289 --> 00:06:30.569
<v Speaker 0>my tiling window manager.

00:06:30.965 --> 00:06:32.805
<v Speaker 0>That's for sure. Yeah.

00:06:34.165 --> 00:06:35.925
<v Speaker 0>Okay. So let's go over the plan of

00:06:35.925 --> 00:06:39.125
<v Speaker 0>that homebrew that's just breathing. Okay. So I've

00:06:39.525 --> 00:06:40.885
<v Speaker 0>okay. So I lied. I have said a

00:06:40.885 --> 00:06:43.205
<v Speaker 0>couple of things up. So when we were

00:06:43.205 --> 00:06:45.685
<v Speaker 0>talking I got a fear yesterday, Derek, I

00:06:45.685 --> 00:06:47.840
<v Speaker 0>should say, when you tweeted me saying, I

00:06:47.840 --> 00:06:49.680
<v Speaker 0>hope you've got a slow PHP application. And

00:06:49.680 --> 00:06:51.520
<v Speaker 0>I was like, shit. I never thought about

00:06:51.520 --> 00:06:53.040
<v Speaker 0>what we'd actually profile.

00:06:53.520 --> 00:06:55.760
<v Speaker 0>So I got my thinking hat on. And

00:06:55.760 --> 00:06:57.919
<v Speaker 0>I figured we could start with a really

00:06:58.675 --> 00:07:02.035
<v Speaker 0>trivial trivial example where we would Right. Run

00:07:02.035 --> 00:07:04.195
<v Speaker 0>the pro profiler on a one line Huddl

00:07:04.195 --> 00:07:05.315
<v Speaker 0>world application.

00:07:05.715 --> 00:07:07.395
<v Speaker 0>Mhmm. I don't think we're gonna lot out

00:07:07.395 --> 00:07:08.515
<v Speaker 0>of it, but I think just to see

00:07:08.515 --> 00:07:10.995
<v Speaker 0>the tooling and the setup and a simple

00:07:10.995 --> 00:07:13.039
<v Speaker 0>call graph may be beneficial. At least for

00:07:13.039 --> 00:07:14.479
<v Speaker 0>me, I wanna see it in the simplest

00:07:14.479 --> 00:07:16.160
<v Speaker 0>form before we break it with the the

00:07:16.160 --> 00:07:17.040
<v Speaker 0>harder stuff.

00:07:17.440 --> 00:07:19.520
<v Speaker 0>And then I thought about how can we

00:07:19.520 --> 00:07:21.440
<v Speaker 0>make it a little bit more interesting? And

00:07:21.440 --> 00:07:24.159
<v Speaker 0>I thought, well, recursion is generally interesting when

00:07:24.159 --> 00:07:24.960
<v Speaker 0>it comes to profiling.

00:07:25.535 --> 00:07:28.175
<v Speaker 0>So I created a very small factorial function

00:07:28.175 --> 00:07:29.375
<v Speaker 0>that is recursive,

00:07:29.455 --> 00:07:31.215
<v Speaker 0>and we can throw some different values into

00:07:31.215 --> 00:07:31.775
<v Speaker 0>this.

00:07:32.255 --> 00:07:34.335
<v Speaker 0>And I thought, depending on how we get

00:07:34.335 --> 00:07:35.295
<v Speaker 0>on with that

00:07:35.615 --> 00:07:37.055
<v Speaker 0>really, I should have run this plan be

00:07:37.215 --> 00:07:38.975
<v Speaker 0>for you beforehand, but we'll just do that.

00:07:38.975 --> 00:07:40.815
<v Speaker 0>I thought we could inject

00:07:41.819 --> 00:07:43.020
<v Speaker 0>some arbitrary

00:07:43.020 --> 00:07:43.900
<v Speaker 0>errors

00:07:45.099 --> 00:07:46.699
<v Speaker 0>where we add a sleep.

00:07:47.340 --> 00:07:48.939
<v Speaker 0>Now we're looking at this now, but I

00:07:48.939 --> 00:07:50.860
<v Speaker 0>thought if we can I I want to

00:07:50.860 --> 00:07:52.620
<v Speaker 0>see if we can use the profile to

00:07:52.620 --> 00:07:55.294
<v Speaker 0>identify what is causing certain bottlenecks rather than

00:07:55.294 --> 00:07:57.455
<v Speaker 0>just is the factorial function randomly

00:07:57.455 --> 00:07:59.375
<v Speaker 0>coming out of that time? I don't know.

00:07:59.375 --> 00:08:01.134
<v Speaker 0>It just Yeah. We'll see.

00:08:01.455 --> 00:08:02.975
<v Speaker 1>Do you have the

00:08:03.375 --> 00:08:04.895
<v Speaker 1>profiling front end installed?

00:08:08.390 --> 00:08:10.310
<v Speaker 1>You didn't think about it either, did you?

00:08:10.950 --> 00:08:13.110
<v Speaker 0>Versus Code, I'm assuming it has some sort

00:08:13.110 --> 00:08:14.630
<v Speaker 0>of front end. Nah. It's got a deep

00:08:14.710 --> 00:08:17.190
<v Speaker 1>Oh, yeah? No. It doesn't do profiling front

00:08:17.190 --> 00:08:19.670
<v Speaker 1>ends. Luckily, I have a homebrew formula for

00:08:19.670 --> 00:08:21.670
<v Speaker 1>you there too. Okay.

00:08:21.670 --> 00:08:23.350
<v Speaker 0>Alright. That's how just googled.

00:08:24.544 --> 00:08:25.345
<v Speaker 0>Okay.

00:08:26.465 --> 00:08:27.345
<v Speaker 0>The next

00:08:27.505 --> 00:08:29.345
<v Speaker 0>I I set aside four examples. The next

00:08:29.345 --> 00:08:30.945
<v Speaker 0>one being, I figured we could do a

00:08:30.945 --> 00:08:34.145
<v Speaker 0>composer with a really small composer JSON. You

00:08:34.145 --> 00:08:35.825
<v Speaker 0>can see I just got two packages here,

00:08:35.825 --> 00:08:37.985
<v Speaker 0>and we can actually profile composer itself

00:08:38.620 --> 00:08:41.660
<v Speaker 0>before tackling something much larger. Now that's just

00:08:41.660 --> 00:08:44.300
<v Speaker 0>a project I found on GitHub called Zulu.

00:08:44.540 --> 00:08:47.180
<v Speaker 0>It seems to be like a CMS system

00:08:47.180 --> 00:08:49.500
<v Speaker 0>built on Laravel or Symphony. I can't remember.

00:08:49.500 --> 00:08:50.380
<v Speaker 0>It's Symphony.

00:08:50.620 --> 00:08:52.940
<v Speaker 0>And it has a lot of dependencies.

00:08:53.385 --> 00:08:55.545
<v Speaker 0>At least, it's quite hefty. And I did

00:08:55.545 --> 00:08:57.305
<v Speaker 0>run a composer install before this and then

00:08:57.305 --> 00:08:58.825
<v Speaker 0>blew away the vendor folder and the log

00:08:58.825 --> 00:09:01.385
<v Speaker 0>file. It took around a minute, I believe.

00:09:01.385 --> 00:09:03.545
<v Speaker 0>So, hopefully, that gets us something substantial that

00:09:03.545 --> 00:09:04.665
<v Speaker 0>we can take a look at the call

00:09:04.665 --> 00:09:07.260
<v Speaker 0>graph and the profiles, etcetera. Yeah. It's usually

00:09:07.260 --> 00:09:09.580
<v Speaker 1>the the the having the caches available is

00:09:09.580 --> 00:09:12.140
<v Speaker 1>not usually the problem because that's you're just

00:09:12.140 --> 00:09:14.300
<v Speaker 1>waiting for network IO, and who cares about

00:09:14.300 --> 00:09:14.860
<v Speaker 1>that?

00:09:15.580 --> 00:09:17.820
<v Speaker 0>Exactly. I'm more interested than the dependency graph

00:09:17.820 --> 00:09:20.775
<v Speaker 0>resolution and how long that takes. Yeah. So

00:09:20.775 --> 00:09:22.455
<v Speaker 1>for that, it's actually better to have the

00:09:22.455 --> 00:09:24.135
<v Speaker 1>cache in place, but we'll get there when

00:09:24.135 --> 00:09:24.935
<v Speaker 1>we get there.

00:09:27.095 --> 00:09:28.375
<v Speaker 0>Excellent. So

00:09:29.335 --> 00:09:30.935
<v Speaker 0>what do I need to do first?

00:09:31.175 --> 00:09:31.575
<v Speaker 1>Alright.

00:09:32.370 --> 00:09:34.050
<v Speaker 1>Let's have a look back at your terminal,

00:09:34.050 --> 00:09:35.330
<v Speaker 1>whether you actually have

00:09:35.810 --> 00:09:37.330
<v Speaker 1>PHP going now.

00:09:37.650 --> 00:09:40.290
<v Speaker 0>We have seven five four dot 10 just

00:09:40.290 --> 00:09:42.290
<v Speaker 0>coming down the pipe now. So

00:09:43.010 --> 00:09:43.410
<v Speaker 1>Alright.

00:09:44.815 --> 00:09:47.295
<v Speaker 1>If you wouldn't mind starting another terminal where

00:09:47.295 --> 00:09:48.815
<v Speaker 1>you can add some more things

00:09:49.454 --> 00:09:51.535
<v Speaker 1>Indeed. Then we then it can run that

00:09:51.535 --> 00:09:52.415
<v Speaker 1>while we

00:09:53.375 --> 00:09:54.735
<v Speaker 1>when we do actual things.

00:09:55.855 --> 00:09:58.495
<v Speaker 1>Okay. So there's a home also brew install,

00:09:58.495 --> 00:10:00.255
<v Speaker 1>and then it's called q cache grind.

00:10:02.470 --> 00:10:03.510
<v Speaker 1>Q? The

00:10:03.910 --> 00:10:06.230
<v Speaker 1>letter q and a cache grant.

00:10:07.670 --> 00:10:11.190
<v Speaker 0>Cache grant. Grains? Yep. No. Without yes.

00:10:11.350 --> 00:10:12.870
<v Speaker 0>Cache grant? Yep.

00:10:13.735 --> 00:10:16.295
<v Speaker 0>Is that all? Yep. Well,

00:10:16.775 --> 00:10:18.615
<v Speaker 1>whether works is to be seen, but

00:10:21.495 --> 00:10:23.655
<v Speaker 0>So what is this that I'm installing? Is

00:10:23.655 --> 00:10:26.775
<v Speaker 0>it front end for for xdebug specifically or

00:10:26.775 --> 00:10:29.430
<v Speaker 0>profiles in general? It's actually

00:10:29.510 --> 00:10:32.390
<v Speaker 1>not specific for xdebug. The profiling format that

00:10:32.390 --> 00:10:34.550
<v Speaker 1>xdebug outputs is actually

00:10:34.790 --> 00:10:37.510
<v Speaker 1>something that comes out of Vellgrind's tooling. Vellgrind

00:10:37.510 --> 00:10:40.550
<v Speaker 1>is like a low level memory profiling CPU

00:10:40.630 --> 00:10:41.990
<v Speaker 1>emulating tool

00:10:42.555 --> 00:10:46.075
<v Speaker 1>that also allows you to make profiles

00:10:46.075 --> 00:10:46.715
<v Speaker 1>of

00:10:47.835 --> 00:10:50.715
<v Speaker 1>c programs or c plus plus programs. And

00:10:50.715 --> 00:10:52.075
<v Speaker 1>because I don't know how to write front

00:10:52.075 --> 00:10:55.115
<v Speaker 1>ends, especially not nice looking functional graphical front

00:10:55.115 --> 00:10:57.570
<v Speaker 1>ends, I just saw the formats for xdebug

00:10:57.570 --> 00:10:59.650
<v Speaker 1>so that it uses the same. We don't

00:10:59.650 --> 00:11:01.170
<v Speaker 1>really have to look at this. For

00:11:02.130 --> 00:11:04.050
<v Speaker 1>now, we first need to get the profiler

00:11:04.050 --> 00:11:05.890
<v Speaker 1>going. So just let it sit in the

00:11:05.890 --> 00:11:07.250
<v Speaker 1>background for a while, and let's see what

00:11:07.250 --> 00:11:10.274
<v Speaker 1>we're going on. Alright. So Okay. That's still

00:11:10.274 --> 00:11:12.035
<v Speaker 1>that's still the wrong one. Right? Because

00:11:14.675 --> 00:11:16.755
<v Speaker 1>where did it install PHP?

00:11:17.075 --> 00:11:19.075
<v Speaker 1>Where did where did Brew install it?

00:11:19.635 --> 00:11:21.714
<v Speaker 0>May want me to do a BrewLink.

00:11:23.560 --> 00:11:25.960
<v Speaker 1>Okay. Oh, in fact, it probably just wants

00:11:25.960 --> 00:11:28.440
<v Speaker 0>me to pop open a new terminal, doesn't

00:11:28.440 --> 00:11:29.000
<v Speaker 0>it? So

00:11:29.640 --> 00:11:31.640
<v Speaker 1>Yeah. So this is the intricacies that I

00:11:31.640 --> 00:11:32.600
<v Speaker 1>don't really know.

00:11:33.640 --> 00:11:34.760
<v Speaker 0>Magic.

00:11:34.760 --> 00:11:35.560
<v Speaker 0>Right? There we

00:11:36.040 --> 00:11:36.840
<v Speaker 1>Okay. So

00:11:37.824 --> 00:11:40.545
<v Speaker 1>is is peccl available with this

00:11:40.945 --> 00:11:43.105
<v Speaker 1>or not? P e c l. Can you

00:11:43.105 --> 00:11:44.225
<v Speaker 1>just type in and see what it is?

00:11:44.225 --> 00:11:47.264
<v Speaker 1>Otherwise, you might yeah. Excellent. So peccl

00:11:47.264 --> 00:11:48.545
<v Speaker 1>install xdebug.

00:11:49.770 --> 00:11:52.490
<v Speaker 0>And this is me installing the PHP

00:11:52.490 --> 00:11:55.690
<v Speaker 0>extension xdebug. Right? Yes. Yeah. There used to

00:11:55.690 --> 00:11:58.090
<v Speaker 1>be homebrew formulas for all the extensions, but

00:11:58.090 --> 00:11:59.370
<v Speaker 1>I stopped doing that.

00:11:59.610 --> 00:12:02.090
<v Speaker 1>So you now have to use peckle to

00:12:02.090 --> 00:12:02.810
<v Speaker 1>install these things.

00:12:03.525 --> 00:12:05.605
<v Speaker 1>You got a few errors, but you just

00:12:05.605 --> 00:12:06.565
<v Speaker 1>ignore them.

00:12:08.165 --> 00:12:10.405
<v Speaker 0>That's great advice in general, I feel.

00:12:10.885 --> 00:12:12.965
<v Speaker 1>It's just this is this is the the

00:12:13.525 --> 00:12:16.645
<v Speaker 1>so maxed out themselves as being Unix, but

00:12:16.645 --> 00:12:17.765
<v Speaker 1>it is kind of weird.

00:12:19.420 --> 00:12:20.860
<v Speaker 1>But, yeah, now we have to wait for

00:12:20.860 --> 00:12:22.780
<v Speaker 1>it to it's So I have I

00:12:23.980 --> 00:12:26.860
<v Speaker 0>have anticipated us running into some sort of

00:12:27.180 --> 00:12:28.380
<v Speaker 0>Mac issues,

00:12:28.460 --> 00:12:31.660
<v Speaker 0>and I did spin up a Linux machine

00:12:31.660 --> 00:12:33.820
<v Speaker 0>on Packet Cloud just in case we need

00:12:33.820 --> 00:12:37.365
<v Speaker 0>it. So So there's somebody asking at chats,

00:12:37.365 --> 00:12:39.925
<v Speaker 1>would that grind Docker container would also work

00:12:39.925 --> 00:12:41.445
<v Speaker 1>as good as key cache grind?

00:12:42.165 --> 00:12:44.005
<v Speaker 1>I don't think so. I think that grind

00:12:44.005 --> 00:12:46.085
<v Speaker 1>is good for oh, fancy.

00:12:46.165 --> 00:12:48.165
<v Speaker 1>You got the questions on here. Yep.

00:12:49.720 --> 00:12:52.600
<v Speaker 1>So the web client is also a useful

00:12:52.600 --> 00:12:53.240
<v Speaker 1>tool,

00:12:53.640 --> 00:12:55.800
<v Speaker 1>but it is not nearly as powerful as

00:12:55.800 --> 00:12:58.920
<v Speaker 1>q q cache client or the two the

00:12:58.920 --> 00:13:00.680
<v Speaker 1>variant that I use is called k cache

00:13:00.680 --> 00:13:01.480
<v Speaker 1>client, which is

00:13:02.205 --> 00:13:04.285
<v Speaker 1>the same tool but with a slightly different

00:13:04.285 --> 00:13:06.765
<v Speaker 1>looking from that. The k stands for k

00:13:06.765 --> 00:13:08.845
<v Speaker 1>d e and the q stands for QT.

00:13:08.845 --> 00:13:10.205
<v Speaker 1>Of course, as you know, KD is just

00:13:10.205 --> 00:13:12.445
<v Speaker 1>a shell around QT or QT or whatever

00:13:12.445 --> 00:13:13.725
<v Speaker 1>people want to pronounce that.

00:13:14.205 --> 00:13:16.445
<v Speaker 1>But, no, I I don't think a web

00:13:16.445 --> 00:13:18.640
<v Speaker 1>client container or web grinds in general is

00:13:18.640 --> 00:13:20.880
<v Speaker 1>as nice or as useful as

00:13:21.200 --> 00:13:23.279
<v Speaker 1>q cache grinds or cache cache grinds.

00:13:24.240 --> 00:13:26.080
<v Speaker 1>However, it's a lot easier to pronounce.

00:13:26.720 --> 00:13:27.600
<v Speaker 1>I'll give it that.

00:13:28.975 --> 00:13:31.135
<v Speaker 1>Alright. Did it did it install?

00:13:31.295 --> 00:13:33.135
<v Speaker 0>Yes. We have both available now. We have

00:13:33.135 --> 00:13:35.375
<v Speaker 0>two cache grind, and I have xdebug enabled

00:13:35.375 --> 00:13:36.575
<v Speaker 0>in my PHP.

00:13:37.055 --> 00:13:40.095
<v Speaker 1>Can you minus v? Yeah. Just do minus

00:13:40.095 --> 00:13:40.335
<v Speaker 1>v.

00:13:42.240 --> 00:13:45.200
<v Speaker 0>And it's e? V for v. Yeah.

00:13:46.800 --> 00:13:50.240
<v Speaker 1>It shows up. Excellent. Now the only thing

00:13:50.240 --> 00:13:52.880
<v Speaker 1>that you might have to be careful of

00:13:52.880 --> 00:13:56.160
<v Speaker 1>is that xdebug is loaded after opcache.

00:13:59.215 --> 00:14:01.615
<v Speaker 1>And in your case, it's loaded before op

00:14:01.615 --> 00:14:02.335
<v Speaker 1>cache.

00:14:02.815 --> 00:14:03.615
<v Speaker 1>Now this

00:14:04.495 --> 00:14:06.895
<v Speaker 1>shouldn't cause any problems with profiling,

00:14:08.335 --> 00:14:11.375
<v Speaker 1>but I would

00:14:09.959 --> 00:14:12.600
<v Speaker 1>advise not to have them this way around.

00:14:13.880 --> 00:14:15.880
<v Speaker 0>Okay. So do should we change that in

00:14:15.880 --> 00:14:18.040
<v Speaker 0>the PHP NA? Yeah. So if you type

00:14:18.040 --> 00:14:20.200
<v Speaker 1>PHP minus minus I and I,

00:14:21.160 --> 00:14:22.120
<v Speaker 1>two minuses.

00:14:23.080 --> 00:14:24.680
<v Speaker 1>It'll tell you which files it loads,

00:14:25.535 --> 00:14:26.815
<v Speaker 1>and you see that

00:14:27.215 --> 00:14:30.095
<v Speaker 1>what's has done is installed it into PHP

00:14:30.095 --> 00:14:30.895
<v Speaker 1>I nine,

00:14:32.015 --> 00:14:34.415
<v Speaker 1>but it really should have put it in

00:14:35.135 --> 00:14:37.615
<v Speaker 1>a separate file like x op cache has

00:14:37.615 --> 00:14:39.615
<v Speaker 1>done. I don't I don't know what the

00:14:39.615 --> 00:14:41.550
<v Speaker 1>two doesn't do that. So what we need

00:14:41.550 --> 00:14:43.470
<v Speaker 1>to do is Put it there. What we

00:14:43.470 --> 00:14:45.390
<v Speaker 1>need to do is remove it from PHP

00:14:45.390 --> 00:14:45.870
<v Speaker 1>I nine.

00:14:54.545 --> 00:14:56.705
<v Speaker 1>At the top. It's at the top.

00:14:57.825 --> 00:14:58.865
<v Speaker 1>First line.

00:14:59.185 --> 00:15:01.265
<v Speaker 1>Delete delete this line,

00:15:02.945 --> 00:15:04.785
<v Speaker 1>and I'll leave just save the file.

00:15:06.320 --> 00:15:09.120
<v Speaker 1>And now create this new file that is

00:15:09.120 --> 00:15:11.120
<v Speaker 1>called x dash

00:15:11.200 --> 00:15:12.480
<v Speaker 1>xdebug.

00:15:15.440 --> 00:15:17.840
<v Speaker 1>Not any. Yep. And then

00:15:18.560 --> 00:15:20.240
<v Speaker 1>the thing that you just removed, paste it

00:15:20.240 --> 00:15:20.880
<v Speaker 1>back in there.

00:15:23.735 --> 00:15:26.775
<v Speaker 1>Okay. Z zent underscore exten extension

00:15:27.975 --> 00:15:29.575
<v Speaker 1>equals xdebug.

00:15:30.855 --> 00:15:33.415
<v Speaker 1>I would not recommend spaces or quotes.

00:15:36.535 --> 00:15:37.175
<v Speaker 0>Think so?

00:15:37.949 --> 00:15:39.790
<v Speaker 1>Get rid of the quotes. Don't don't need

00:15:39.790 --> 00:15:40.269
<v Speaker 1>them.

00:15:41.069 --> 00:15:41.470
<v Speaker 1>I love

00:15:42.829 --> 00:15:44.750
<v Speaker 1>the reason why I say don't use quotes

00:15:44.750 --> 00:15:47.870
<v Speaker 1>is because people copy and paste this from

00:15:47.870 --> 00:15:48.750
<v Speaker 1>websites,

00:15:48.750 --> 00:15:51.389
<v Speaker 1>and invariably, the quotes have been replaced by

00:15:51.389 --> 00:15:54.035
<v Speaker 1>the curly quotes, and then it doesn't work.

00:15:55.795 --> 00:15:57.155
<v Speaker 1>So I would always say,

00:15:57.875 --> 00:15:59.875
<v Speaker 1>I I I do the minimalist approach. If

00:15:59.875 --> 00:16:02.275
<v Speaker 1>you don't need it, don't enter it anyway.

00:16:02.355 --> 00:16:04.435
<v Speaker 1>PHP minus v should now have it the

00:16:04.435 --> 00:16:05.075
<v Speaker 1>right way around.

00:16:06.920 --> 00:16:07.640
<v Speaker 1>Ta da.

00:16:09.480 --> 00:16:11.720
<v Speaker 1>And I'll verify whether that's what it does

00:16:11.720 --> 00:16:15.080
<v Speaker 1>here. There we go. So, ideally, the tool

00:16:15.080 --> 00:16:18.200
<v Speaker 1>knows about these things and does these things

00:16:18.200 --> 00:16:19.240
<v Speaker 1>right, but

00:16:19.800 --> 00:16:20.520
<v Speaker 1>it doesn't.

00:16:22.175 --> 00:16:24.654
<v Speaker 1>That's why I think the homebrew formulas also

00:16:24.654 --> 00:16:26.654
<v Speaker 1>have been kept because they'd handle these things

00:16:26.654 --> 00:16:27.295
<v Speaker 1>correctly.

00:16:28.015 --> 00:16:29.855
<v Speaker 1>Anyhow, it is loaded.

00:16:30.255 --> 00:16:30.975
<v Speaker 0>Excellent.

00:16:31.135 --> 00:16:33.214
<v Speaker 1>Now we just need to enable the profiler.

00:16:34.680 --> 00:16:36.120
<v Speaker 1>And how do we do that?

00:16:36.920 --> 00:16:38.840
<v Speaker 1>Open up the any file that you've just

00:16:38.840 --> 00:16:39.640
<v Speaker 1>created

00:16:40.840 --> 00:16:41.640
<v Speaker 1>Yep.

00:16:42.120 --> 00:16:43.640
<v Speaker 1>And add the new line

00:16:45.400 --> 00:16:46.680
<v Speaker 1>saying profiler.

00:16:48.965 --> 00:16:50.805
<v Speaker 1>Sorry. Xdebug dot

00:16:55.045 --> 00:16:57.285
<v Speaker 1>underscore enable equals one.

00:17:00.759 --> 00:17:03.319
<v Speaker 1>And if you now type a PHP minus

00:17:03.319 --> 00:17:04.119
<v Speaker 1>minus

00:17:04.119 --> 00:17:06.119
<v Speaker 1>r I xdebug

00:17:09.240 --> 00:17:11.000
<v Speaker 1>no. With a space after the I. Sorry.

00:17:13.895 --> 00:17:14.454
<v Speaker 1>And as

00:17:15.015 --> 00:17:16.775
<v Speaker 1>if you scroll up a little bit, you

00:17:16.775 --> 00:17:17.335
<v Speaker 1>can

00:17:17.655 --> 00:17:19.974
<v Speaker 1>so the line that I was interested in,

00:17:20.535 --> 00:17:22.375
<v Speaker 1>scroll three three or four more. There we

00:17:22.375 --> 00:17:24.934
<v Speaker 1>go. So it tells you the profile is

00:17:24.934 --> 00:17:25.575
<v Speaker 1>on,

00:17:25.895 --> 00:17:27.494
<v Speaker 1>what the output directory is,

00:17:28.220 --> 00:17:29.900
<v Speaker 1>Is that a valid directory?

00:17:35.580 --> 00:17:36.860
<v Speaker 1>Yes. Type it.

00:17:37.420 --> 00:17:40.220
<v Speaker 1>It's empty. Even better. Okay.

00:17:40.460 --> 00:17:43.025
<v Speaker 1>So now if you request your PHP script,

00:17:43.025 --> 00:17:45.185
<v Speaker 1>it should create a profile file. So if

00:17:45.185 --> 00:17:46.304
<v Speaker 1>you type PHP,

00:17:46.305 --> 00:17:48.145
<v Speaker 1>space, the name of your scripts.

00:17:49.905 --> 00:17:51.185
<v Speaker 1>I'm not in the record. So I go

00:17:51.185 --> 00:17:52.705
<v Speaker 0>into my hello world directory.

00:17:52.785 --> 00:17:54.305
<v Speaker 0>Yeah. And I can just do PHP main

00:17:54.305 --> 00:17:55.665
<v Speaker 0>dot PHP. Yes.

00:17:57.480 --> 00:17:59.799
<v Speaker 0>By magic, I have a profile. Yes.

00:18:01.720 --> 00:18:03.559
<v Speaker 1>You have a profile file. Exactly.

00:18:04.280 --> 00:18:06.280
<v Speaker 1>Now what I if you do this for

00:18:06.280 --> 00:18:08.680
<v Speaker 1>websites, I would actually recommend you turn on

00:18:08.680 --> 00:18:10.600
<v Speaker 1>the trigger and stat and install a browser

00:18:10.600 --> 00:18:11.080
<v Speaker 1>extension,

00:18:11.925 --> 00:18:13.525
<v Speaker 1>but we might have a look at that

00:18:13.525 --> 00:18:14.165
<v Speaker 1>later

00:18:14.405 --> 00:18:16.405
<v Speaker 0>Yeah. Sure. If we have time. Any case,

00:18:16.405 --> 00:18:18.245
<v Speaker 1>we have this cache client dot out file.

00:18:18.245 --> 00:18:19.365
<v Speaker 1>Do you want to open it? Let's see

00:18:19.365 --> 00:18:20.245
<v Speaker 1>what's in there.

00:18:23.765 --> 00:18:24.725
<v Speaker 0>Barack

00:18:24.725 --> 00:18:25.925
<v Speaker 0>dev cache client.

00:18:26.870 --> 00:18:27.670
<v Speaker 0>K.

00:18:28.950 --> 00:18:31.270
<v Speaker 1>Well, what do you see here? I see

00:18:31.270 --> 00:18:33.670
<v Speaker 0>the command that was run on the scripts.

00:18:33.830 --> 00:18:35.110
<v Speaker 0>I see

00:18:35.990 --> 00:18:37.670
<v Speaker 0>oh, so it's got some events,

00:18:38.310 --> 00:18:40.390
<v Speaker 0>which I guess are the function calls with

00:18:40.390 --> 00:18:41.910
<v Speaker 0>some numeric values.

00:18:42.875 --> 00:18:45.274
<v Speaker 1>Okay. So the the numeric values are basically

00:18:45.274 --> 00:18:47.355
<v Speaker 1>an index number so that the next time

00:18:47.355 --> 00:18:48.634
<v Speaker 1>it sees the same file,

00:18:49.115 --> 00:18:50.234
<v Speaker 1>it wouldn't

00:18:50.554 --> 00:18:52.394
<v Speaker 1>include the file name and just include the

00:18:52.394 --> 00:18:52.954
<v Speaker 1>number.

00:18:53.914 --> 00:18:55.514
<v Speaker 1>It's just a clever way of

00:18:56.480 --> 00:18:58.320
<v Speaker 1>basically, like an index creation,

00:18:58.800 --> 00:18:59.679
<v Speaker 1>but it's

00:18:59.840 --> 00:19:00.880
<v Speaker 1>doesn't matter.

00:19:01.280 --> 00:19:03.919
<v Speaker 1>It's just a way of the format works.

00:19:04.800 --> 00:19:06.560
<v Speaker 1>And then we have the one one eighty

00:19:06.560 --> 00:19:08.800
<v Speaker 1>eight and thirty two. That's basically stands for

00:19:08.800 --> 00:19:09.679
<v Speaker 1>line one.

00:19:09.920 --> 00:19:11.680
<v Speaker 1>It took a hundred and eighty eight

00:19:13.385 --> 00:19:15.225
<v Speaker 0>microseconds.

00:19:15.545 --> 00:19:17.705
<v Speaker 0>I'd hope it's not milliseconds for Hello World.

00:19:17.705 --> 00:19:19.305
<v Speaker 0>Yeah. Microseconds. Microseconds,

00:19:19.305 --> 00:19:22.024
<v Speaker 1>and then it took 32 bytes of memory.

00:19:23.625 --> 00:19:25.225
<v Speaker 1>And then you get the summary that it

00:19:25.305 --> 00:19:27.305
<v Speaker 1>the actually, whole full execution took

00:19:27.880 --> 00:19:31.399
<v Speaker 1>one dot four milliseconds, and it took 431

00:19:31.720 --> 00:19:34.840
<v Speaker 1>parts parts of memory. However, this is not

00:19:34.840 --> 00:19:36.679
<v Speaker 1>how you'd look at these files. Right? And

00:19:36.679 --> 00:19:38.600
<v Speaker 1>you just want to make sure that the

00:19:38.600 --> 00:19:39.799
<v Speaker 1>first time you do that, we have a

00:19:39.799 --> 00:19:41.000
<v Speaker 1>look at this to see what is actually

00:19:41.000 --> 00:19:41.480
<v Speaker 1>in here. But

00:19:42.285 --> 00:19:44.205
<v Speaker 1>the way how I would view this is

00:19:44.205 --> 00:19:45.885
<v Speaker 1>by using q cache client, or in my

00:19:45.885 --> 00:19:48.685
<v Speaker 1>case, k cache client. So you can q

00:19:48.685 --> 00:19:49.804
<v Speaker 1>cache client,

00:19:51.005 --> 00:19:52.765
<v Speaker 1>and then specify the file name behind.

00:19:54.790 --> 00:19:55.909
<v Speaker 0>Alright.

00:20:00.950 --> 00:20:01.910
<v Speaker 0>Stuff.

00:20:01.910 --> 00:20:03.190
<v Speaker 0>There we go. Yeah.

00:20:03.990 --> 00:20:04.870
<v Speaker 1>Okay.

00:20:05.830 --> 00:20:06.630
<v Speaker 1>Can you

00:20:07.270 --> 00:20:08.230
<v Speaker 1>make this bigger?

00:20:10.955 --> 00:20:13.355
<v Speaker 1>I also don't know how to

00:20:14.715 --> 00:20:16.075
<v Speaker 1>zoom in there.

00:20:21.355 --> 00:20:23.355
<v Speaker 1>Is this not something that your your operator

00:20:23.355 --> 00:20:24.155
<v Speaker 1>system provides?

00:20:25.030 --> 00:20:26.789
<v Speaker 0>So I could

00:20:27.190 --> 00:20:28.309
<v Speaker 0>do this.

00:20:30.630 --> 00:20:34.389
<v Speaker 0>That makes it weird. That changed absolutely nothing.

00:20:37.350 --> 00:20:37.830
<v Speaker 1>Anyway,

00:20:38.325 --> 00:20:40.164
<v Speaker 1>yeah. We'll try to make it work.

00:20:41.445 --> 00:20:42.965
<v Speaker 1>Can you at least make it full screen

00:20:42.965 --> 00:20:45.605
<v Speaker 1>now so we don't get distracted by QCache

00:20:45.605 --> 00:20:46.884
<v Speaker 1>currents error messages?

00:20:47.524 --> 00:20:49.924
<v Speaker 1>Oh, dear god. This is small. How do

00:20:49.924 --> 00:20:51.605
<v Speaker 1>I make this bigger for myself so I

00:20:51.605 --> 00:20:52.485
<v Speaker 1>actually can see it?

00:20:53.440 --> 00:20:55.280
<v Speaker 0>So maybe just an electron,

00:20:56.240 --> 00:20:58.320
<v Speaker 0>file grain, cash grain thing that we could

00:20:58.320 --> 00:21:00.160
<v Speaker 0>use, which would allow me to zoom or

00:21:00.160 --> 00:21:01.760
<v Speaker 0>maybe a web one that can open.

00:21:02.080 --> 00:21:04.400
<v Speaker 1>Anyway, I've yeah. I if it's full screen,

00:21:04.400 --> 00:21:05.040
<v Speaker 1>it works for me.

00:21:06.695 --> 00:21:09.015
<v Speaker 1>I can just about see this. But, yeah,

00:21:09.015 --> 00:21:11.095
<v Speaker 1>there's not a lot of information in here.

00:21:11.575 --> 00:21:12.294
<v Speaker 1>And

00:21:13.015 --> 00:21:15.015
<v Speaker 1>on the so on the on the left

00:21:15.015 --> 00:21:16.934
<v Speaker 1>hand side, you have all the function calls.

00:21:17.415 --> 00:21:19.254
<v Speaker 1>When this case is only main

00:21:20.135 --> 00:21:21.254
<v Speaker 1>because

00:21:22.350 --> 00:21:23.789
<v Speaker 1>yeah. There's sorry.

00:21:27.070 --> 00:21:29.149
<v Speaker 1>Because you didn't call any functions.

00:21:31.230 --> 00:21:33.309
<v Speaker 1>On the right hand side, you have

00:21:34.110 --> 00:21:36.164
<v Speaker 1>a few tabs. If you click on source

00:21:36.164 --> 00:21:37.205
<v Speaker 1>code tab,

00:21:37.445 --> 00:21:38.965
<v Speaker 1>this is fifth one,

00:21:39.525 --> 00:21:41.284
<v Speaker 1>you can actually see your source code. So

00:21:41.284 --> 00:21:42.164
<v Speaker 1>that's handy.

00:21:42.485 --> 00:21:44.404
<v Speaker 1>But echo is not a function call, so

00:21:44.404 --> 00:21:46.325
<v Speaker 1>you can't really see anything in here.

00:21:48.130 --> 00:21:49.730
<v Speaker 1>So it doesn't really do it show you

00:21:49.809 --> 00:21:51.490
<v Speaker 1>it can't show you more because there's nothing

00:21:51.490 --> 00:21:52.210
<v Speaker 1>to show.

00:21:52.770 --> 00:21:53.809
<v Speaker 1>And so our

00:21:54.690 --> 00:21:57.169
<v Speaker 0>the echo on a function call? Just Yeah.

00:21:57.169 --> 00:21:57.729
<v Speaker 1>Sure.

00:21:58.770 --> 00:21:59.729
<v Speaker 1>Absolutely.

00:22:00.530 --> 00:22:01.010
<v Speaker 0>Okay.

00:22:02.285 --> 00:22:04.044
<v Speaker 0>So what we're saying is that's not very

00:22:04.044 --> 00:22:06.284
<v Speaker 0>interesting, but if we do function

00:22:06.365 --> 00:22:07.565
<v Speaker 0>my echo

00:22:08.924 --> 00:22:09.804
<v Speaker 0>string

00:22:10.684 --> 00:22:11.965
<v Speaker 0>oh, I can do this there. Right?

00:22:14.320 --> 00:22:16.080
<v Speaker 0>And then we could do echo

00:22:16.160 --> 00:22:18.240
<v Speaker 0>string. We could do that since PHP seven

00:22:18.240 --> 00:22:19.360
<v Speaker 1>zero already,

00:22:20.320 --> 00:22:21.760
<v Speaker 1>which has been out for five years.

00:22:26.585 --> 00:22:29.545
<v Speaker 0>Okay. So if I Yep. Run this again,

00:22:29.545 --> 00:22:30.904
<v Speaker 0>we'll get a new profile.

00:22:31.145 --> 00:22:31.865
<v Speaker 1>Yep.

00:22:33.865 --> 00:22:35.544
<v Speaker 0>And we can open this.

00:22:36.025 --> 00:22:38.585
<v Speaker 1>Yeah. It's open. So there there's actually a

00:22:38.585 --> 00:22:39.304
<v Speaker 1>trick

00:22:39.385 --> 00:22:40.665
<v Speaker 1>that it doesn't

00:22:40.890 --> 00:22:42.330
<v Speaker 1>change the file name

00:22:43.050 --> 00:22:45.050
<v Speaker 1>because at the moment, it uses the process

00:22:45.050 --> 00:22:45.850
<v Speaker 1>ID

00:22:46.410 --> 00:22:49.050
<v Speaker 1>Okay. Which is what's cache client's standard way

00:22:49.050 --> 00:22:51.290
<v Speaker 1>of doing things are, but you don't have

00:22:51.290 --> 00:22:51.690
<v Speaker 1>to do it.

00:22:53.145 --> 00:22:55.625
<v Speaker 1>And there's ways of changing the output format

00:22:55.625 --> 00:22:56.905
<v Speaker 1>so that if you run it from the

00:22:56.905 --> 00:22:58.345
<v Speaker 1>same directory, it will always be the same

00:22:58.345 --> 00:22:58.985
<v Speaker 1>file

00:22:59.225 --> 00:23:00.585
<v Speaker 1>if you want to do that.

00:23:01.625 --> 00:23:02.905
<v Speaker 0>Yeah. It may make it a bit easier

00:23:02.905 --> 00:23:03.784
<v Speaker 0>for today.

00:23:04.585 --> 00:23:06.265
<v Speaker 0>So you'd be typing down this a lot.

00:23:07.300 --> 00:23:09.700
<v Speaker 1>Okay. Open the any file again then.

00:23:11.140 --> 00:23:11.860
<v Speaker 0>Okay.

00:23:13.220 --> 00:23:13.780
<v Speaker 0>User

00:23:15.300 --> 00:23:15.940
<v Speaker 1>You

00:23:16.580 --> 00:23:19.220
<v Speaker 1>does control r does control r

00:23:20.535 --> 00:23:22.215
<v Speaker 0>So I did, but the problem is I

00:23:22.215 --> 00:23:24.135
<v Speaker 0>have pair director history. So I need to

00:23:24.135 --> 00:23:25.815
<v Speaker 0>go up and then do them.

00:23:26.375 --> 00:23:29.415
<v Speaker 1>Oh, okay. So that is usually a feature,

00:23:29.415 --> 00:23:32.535
<v Speaker 1>but not at the moment. Yes. So

00:23:33.255 --> 00:23:35.735
<v Speaker 1>the setting is xdebug dot

00:23:37.250 --> 00:23:38.050
<v Speaker 1>profiler

00:23:38.370 --> 00:23:39.970
<v Speaker 1>Profiler underscore

00:23:40.210 --> 00:23:41.249
<v Speaker 1>underscore outputs

00:23:42.929 --> 00:23:44.370
<v Speaker 1>underscore name

00:23:45.090 --> 00:23:45.730
<v Speaker 1>Yep.

00:23:46.210 --> 00:23:47.090
<v Speaker 1>Equals

00:23:47.570 --> 00:23:50.530
<v Speaker 1>and now you cache dot out

00:23:53.265 --> 00:23:53.745
<v Speaker 1>dot

00:23:54.625 --> 00:23:56.144
<v Speaker 1>I wasn't quite done yet.

00:23:57.184 --> 00:24:00.624
<v Speaker 1>Don't go ahead of yourself. Dot percent c.

00:24:02.705 --> 00:24:05.320
<v Speaker 1>So the thing the thing behind the percent

00:24:05.320 --> 00:24:07.399
<v Speaker 1>sign is a form of specify, and the

00:24:07.399 --> 00:24:09.479
<v Speaker 1>documentation lists a whole bunch of them.

00:24:09.720 --> 00:24:11.639
<v Speaker 1>The c stands for the

00:24:12.919 --> 00:24:15.720
<v Speaker 1>CRC 32 of your current direct working directory,

00:24:16.645 --> 00:24:18.325
<v Speaker 1>Whereas by default, b two p, which is

00:24:18.325 --> 00:24:19.845
<v Speaker 1>your process ID, but there's a whole bunch

00:24:19.845 --> 00:24:20.404
<v Speaker 1>more,

00:24:20.725 --> 00:24:22.085
<v Speaker 1>such as the full

00:24:23.365 --> 00:24:25.605
<v Speaker 1>the like, the the h t p URL,

00:24:25.605 --> 00:24:27.525
<v Speaker 1>for example, if you want. So that means

00:24:27.525 --> 00:24:29.925
<v Speaker 0>that if I so I could have done

00:24:29.925 --> 00:24:31.700
<v Speaker 0>that without the percentage to you. Right? But

00:24:31.700 --> 00:24:33.460
<v Speaker 0>it means if I changed directory and profiled

00:24:33.460 --> 00:24:34.980
<v Speaker 0>something else, then

00:24:36.260 --> 00:24:38.180
<v Speaker 0>I would overwrite that last profile. So this

00:24:38.180 --> 00:24:40.500
<v Speaker 0>incorporates the file name or directory path into

00:24:40.500 --> 00:24:43.300
<v Speaker 0>that. Is that right? Just the directory part

00:24:43.300 --> 00:24:45.060
<v Speaker 1>at the moment. Yeah. Alright. Okay.

00:24:45.655 --> 00:24:47.175
<v Speaker 1>But, yeah, you can also do the parts

00:24:47.175 --> 00:24:48.535
<v Speaker 1>and other things. There's there's a whole bunch

00:24:48.535 --> 00:24:49.655
<v Speaker 1>of settings if you want to look at

00:24:49.655 --> 00:24:50.615
<v Speaker 1>the documentation.

00:24:51.975 --> 00:24:52.615
<v Speaker 1>Yep.

00:24:53.415 --> 00:24:55.095
<v Speaker 0>Okay. So if I run that again

00:24:55.735 --> 00:24:57.575
<v Speaker 1>Now you should have, of course, the third

00:24:57.575 --> 00:24:58.134
<v Speaker 1>one

00:24:59.015 --> 00:24:59.415
<v Speaker 0>Yep.

00:24:59.940 --> 00:25:01.620
<v Speaker 1>Which is to but that one will never

00:25:01.620 --> 00:25:02.099
<v Speaker 1>change.

00:25:04.340 --> 00:25:06.019
<v Speaker 1>Oh, once you run it from this directory.

00:25:06.019 --> 00:25:07.139
<v Speaker 1>And now you as you can see, you

00:25:07.139 --> 00:25:08.739
<v Speaker 1>have two functions. Right?

00:25:09.539 --> 00:25:10.339
<v Speaker 1>Yes.

00:25:12.659 --> 00:25:14.100
<v Speaker 0>We do. Okay. So our source code is

00:25:14.100 --> 00:25:14.500
<v Speaker 0>gonna be updated,

00:25:15.655 --> 00:25:17.735
<v Speaker 0>and we have two calls over here. So

00:25:17.735 --> 00:25:19.895
<v Speaker 0>we've got main followed by the my echo.

00:25:19.895 --> 00:25:22.295
<v Speaker 0>Okay. Cool. Right. So there's a few interesting

00:25:22.295 --> 00:25:24.935
<v Speaker 1>columns here, which will be more interesting once

00:25:24.935 --> 00:25:26.295
<v Speaker 1>we have some more function calls. But on

00:25:26.295 --> 00:25:28.935
<v Speaker 1>the left hand side, you have includes include,

00:25:28.935 --> 00:25:29.335
<v Speaker 1>it says.

00:25:30.990 --> 00:25:32.350
<v Speaker 1>All the way to the left. All the

00:25:32.350 --> 00:25:33.870
<v Speaker 1>way to the Yep. Yep. Yep. Okay. Yep.

00:25:33.870 --> 00:25:36.670
<v Speaker 1>Include. In Incl stands for inclusive, not include.

00:25:36.670 --> 00:25:40.270
<v Speaker 1>Inclusive. Okay. And self stands for self. So,

00:25:40.270 --> 00:25:42.110
<v Speaker 1>basically, what these things mean that inclusive

00:25:42.830 --> 00:25:44.750
<v Speaker 1>means all the time spent in this function

00:25:44.750 --> 00:25:46.815
<v Speaker 1>and all the functions it has called,

00:25:47.775 --> 00:25:49.934
<v Speaker 1>whereas self says only

00:25:50.575 --> 00:25:53.934
<v Speaker 1>the time spent in this function. So theoretically,

00:25:54.414 --> 00:25:56.495
<v Speaker 1>in simple examples, if you add all the

00:25:56.495 --> 00:25:57.135
<v Speaker 1>self times

00:25:58.414 --> 00:25:59.855
<v Speaker 1>if you add them altogether,

00:26:00.620 --> 00:26:02.460
<v Speaker 1>it should end up at a %,

00:26:02.940 --> 00:26:03.500
<v Speaker 1>which

00:26:04.460 --> 00:26:06.300
<v Speaker 0>Which it is. At the moment, it does.

00:26:06.460 --> 00:26:08.780
<v Speaker 1>There is, of course, often rounding errors in

00:26:08.780 --> 00:26:10.860
<v Speaker 1>there, and there's recursion in there that makes

00:26:10.860 --> 00:26:13.340
<v Speaker 1>that not work. But in a simple example,

00:26:13.340 --> 00:26:14.780
<v Speaker 1>that should all add up to a hundred

00:26:14.780 --> 00:26:15.100
<v Speaker 1>because,

00:26:15.835 --> 00:26:18.475
<v Speaker 1>well, you can't spend time twice. Right?

00:26:19.195 --> 00:26:21.434
<v Speaker 0>Okay. Makes sense. Okay. And

00:26:21.915 --> 00:26:23.995
<v Speaker 1>then on your right hand side,

00:26:25.035 --> 00:26:27.915
<v Speaker 1>there is for example, click on map.

00:26:31.340 --> 00:26:32.940
<v Speaker 1>K. Yeah. And now

00:26:33.580 --> 00:26:35.739
<v Speaker 1>something doesn't render for me correctly

00:26:36.220 --> 00:26:38.700
<v Speaker 1>because the whole screen should be blue.

00:26:39.820 --> 00:26:42.235
<v Speaker 0>So the left hand side, which looks white

00:26:42.235 --> 00:26:44.315
<v Speaker 0>on the preview, is green for me with

00:26:44.315 --> 00:26:45.755
<v Speaker 0>a little bit on the blue. So it's

00:26:45.755 --> 00:26:47.914
<v Speaker 0>like the that seems to represent the self

00:26:47.914 --> 00:26:50.234
<v Speaker 0>values mapped out with colors.

00:26:50.875 --> 00:26:53.195
<v Speaker 1>Yep. Pretty much true. So this is a

00:26:53.195 --> 00:26:55.835
<v Speaker 1>way of seeing in one overview is

00:26:56.320 --> 00:26:58.800
<v Speaker 1>the things that have a large area stacked

00:26:58.800 --> 00:27:00.080
<v Speaker 1>on top of stuff

00:27:01.360 --> 00:27:02.880
<v Speaker 1>is where a lot of time is being

00:27:02.880 --> 00:27:04.560
<v Speaker 1>taken. So in this case, what you would

00:27:04.560 --> 00:27:06.800
<v Speaker 1>expect, 80% is spent in just main

00:27:07.120 --> 00:27:09.680
<v Speaker 1>where that is mostly overhead of parsing it,

00:27:09.680 --> 00:27:11.905
<v Speaker 1>to be fair. And then on the and

00:27:11.905 --> 00:27:13.345
<v Speaker 1>then the 20%

00:27:13.505 --> 00:27:15.425
<v Speaker 1>should be the the blue bit that is

00:27:15.425 --> 00:27:16.705
<v Speaker 1>then the my echo.

00:27:17.665 --> 00:27:20.625
<v Speaker 0>Yep. Perfect. And if we have more interesting

00:27:20.625 --> 00:27:22.785
<v Speaker 1>things, we can see more interesting information. But

00:27:22.785 --> 00:27:24.945
<v Speaker 1>there you go. Now on the bottom half,

00:27:25.669 --> 00:27:27.590
<v Speaker 1>if you click on call graph

00:27:28.710 --> 00:27:29.510
<v Speaker 1>all

00:27:29.510 --> 00:27:30.710
<v Speaker 1>the way all the way in the bottom.

00:27:30.710 --> 00:27:33.190
<v Speaker 1>There we go. Let's hope that works better.

00:27:34.710 --> 00:27:36.549
<v Speaker 1>Just check if click on call graph.

00:27:36.789 --> 00:27:39.190
<v Speaker 0>It's working for me, but it's not updating

00:27:39.190 --> 00:27:39.669
<v Speaker 0>on.

00:27:44.095 --> 00:27:46.495
<v Speaker 0>Oh, I just have to change change screen

00:27:46.495 --> 00:27:47.455
<v Speaker 0>and then magically

00:27:48.175 --> 00:27:50.495
<v Speaker 1>Hey. Yeah. Yeah. Sorry. What can I say?

00:27:50.495 --> 00:27:51.934
<v Speaker 0>Yeah.

00:27:52.575 --> 00:27:54.990
<v Speaker 1>I've never seen that issue before, but, hey,

00:27:54.990 --> 00:27:56.830
<v Speaker 1>now we know it, we can work around

00:27:56.830 --> 00:27:59.230
<v Speaker 1>it. Yes. But, yeah, you can see the

00:27:59.230 --> 00:28:01.230
<v Speaker 1>call graph. Basically, you see in the graph

00:28:01.230 --> 00:28:03.950
<v Speaker 1>which functions calls which function, how often and

00:28:03.950 --> 00:28:05.870
<v Speaker 1>how much time we'll spend in these functions.

00:28:06.190 --> 00:28:06.990
<v Speaker 1>And that,

00:28:07.310 --> 00:28:09.230
<v Speaker 1>once we have something more interesting to show,

00:28:09.805 --> 00:28:12.365
<v Speaker 1>will tell us what is taking up the

00:28:12.365 --> 00:28:14.045
<v Speaker 1>most amount of time or what is the

00:28:14.045 --> 00:28:16.845
<v Speaker 1>the slow path to be to be precise.

00:28:17.565 --> 00:28:20.045
<v Speaker 1>So shall we find a example that is

00:28:20.045 --> 00:28:22.205
<v Speaker 1>more interesting than hello, world?

00:28:22.845 --> 00:28:24.445
<v Speaker 0>Sounds like a good idea.

00:28:24.685 --> 00:28:25.325
<v Speaker 1>I agree.

00:28:27.480 --> 00:28:28.760
<v Speaker 0>So if we

00:28:30.040 --> 00:28:32.600
<v Speaker 0>take a look at our factorial You

00:28:33.000 --> 00:28:35.240
<v Speaker 1>need to do the screen search thing again.

00:28:37.640 --> 00:28:38.520
<v Speaker 0>That is

00:28:38.760 --> 00:28:39.800
<v Speaker 0>peculiar. Okay.

00:28:42.385 --> 00:28:44.625
<v Speaker 0>How about my factorial functions? That should be

00:28:45.025 --> 00:28:46.865
<v Speaker 0>look. You mentioned the recursion this week. He

00:28:46.865 --> 00:28:48.305
<v Speaker 0>went through the hello world from there and

00:28:48.305 --> 00:28:49.905
<v Speaker 0>said that the values may not add up.

00:28:49.905 --> 00:28:51.745
<v Speaker 0>So I guess I was fortunate enough that

00:28:51.745 --> 00:28:53.184
<v Speaker 0>I had some recursion.

00:28:53.425 --> 00:28:56.065
<v Speaker 1>Would you please alter braces around the return?

00:28:59.850 --> 00:29:01.850
<v Speaker 1>No. The top one. The ones in line

00:29:01.850 --> 00:29:02.889
<v Speaker 1>five and seven.

00:29:07.850 --> 00:29:10.490
<v Speaker 0>Was that new either? Is that personal

00:29:11.865 --> 00:29:13.785
<v Speaker 1>It's also not changing, by the way.

00:29:16.425 --> 00:29:18.585
<v Speaker 0>Well, that is let's just turn off my

00:29:18.585 --> 00:29:20.265
<v Speaker 0>screen share and then reshare.

00:29:22.425 --> 00:29:23.625
<v Speaker 0>That is weird.

00:29:26.000 --> 00:29:28.240
<v Speaker 1>You can't admire the Tower Bridge at night

00:29:28.240 --> 00:29:29.279
<v Speaker 1>for a moment here.

00:29:31.600 --> 00:29:32.960
<v Speaker 0>Alright. So if I

00:29:33.520 --> 00:29:35.840
<v Speaker 0>yeah. Okay. I think we're okay. So

00:29:36.160 --> 00:29:39.360
<v Speaker 1>not a personal well, yes, personal preference,

00:29:39.440 --> 00:29:39.840
<v Speaker 1>but

00:29:40.855 --> 00:29:43.655
<v Speaker 1>in the xdebug version that you still run

00:29:43.655 --> 00:29:44.534
<v Speaker 1>two nine

00:29:44.934 --> 00:29:47.575
<v Speaker 1>with all the PHP version that sometimes gets

00:29:47.575 --> 00:29:49.575
<v Speaker 1>line numbers on the wrong places.

00:29:51.174 --> 00:29:54.455
<v Speaker 1>And Okay. Hence, step debugging and profiling

00:29:54.855 --> 00:29:55.655
<v Speaker 1>looks strange,

00:29:56.160 --> 00:29:57.360
<v Speaker 1>although it is

00:29:57.760 --> 00:30:00.000
<v Speaker 1>something that PHP internally does. So I would

00:30:00.000 --> 00:30:02.400
<v Speaker 1>always suggest to other braces. It's also what

00:30:02.400 --> 00:30:04.640
<v Speaker 1>in is there in most coding standards.

00:30:06.000 --> 00:30:08.800
<v Speaker 0>Alright. Good to hear that. Good. Yep.

00:30:09.840 --> 00:30:11.200
<v Speaker 1>Alright. Let's run it.

00:30:12.305 --> 00:30:13.345
<v Speaker 0>Pick a number.

00:30:15.425 --> 00:30:17.184
<v Speaker 1>721.

00:30:18.785 --> 00:30:21.985
<v Speaker 0>So because my PHP is a little rusty,

00:30:22.065 --> 00:30:23.985
<v Speaker 0>I wasn't sure if it read an input,

00:30:23.985 --> 00:30:25.585
<v Speaker 0>so I have just decided to pull it

00:30:25.585 --> 00:30:26.305
<v Speaker 0>from the environment,

00:30:27.720 --> 00:30:29.559
<v Speaker 0>which is why we're using this sometime.

00:30:30.440 --> 00:30:31.159
<v Speaker 1>Okay.

00:30:31.559 --> 00:30:32.840
<v Speaker 1>That's brilliant.

00:30:33.640 --> 00:30:35.799
<v Speaker 0>Is it? It looks like an error.

00:30:38.840 --> 00:30:41.000
<v Speaker 1>K. Scroll up. Let's see what you've done.

00:30:41.000 --> 00:30:42.440
<v Speaker 0>Oh, it's because I've not casted it to

00:30:42.440 --> 00:30:42.920
<v Speaker 0>an end.

00:30:45.375 --> 00:30:46.895
<v Speaker 0>Although it worked when I made Oh, yeah.

00:30:46.895 --> 00:30:48.575
<v Speaker 0>Yeah. Tested this code.

00:30:53.615 --> 00:30:54.975
<v Speaker 1>That's not how you cast it in.

00:30:56.460 --> 00:30:59.020
<v Speaker 1>You you do in in between parentheses in

00:30:59.020 --> 00:31:00.460
<v Speaker 1>front of what you're casting.

00:31:01.020 --> 00:31:02.299
<v Speaker 1>It's not go.

00:31:03.260 --> 00:31:05.179
<v Speaker 0>Are you sure it's not go? That's that's

00:31:05.179 --> 00:31:07.260
<v Speaker 0>what I write mostly these days. Okay. So

00:31:07.260 --> 00:31:08.860
<v Speaker 0>to catch I know. I can tell.

00:31:09.340 --> 00:31:12.374
<v Speaker 1>Yeah. Put in put in in parenthesis.

00:31:14.775 --> 00:31:16.855
<v Speaker 0>And and oh, like c. Like okay. Got

00:31:16.855 --> 00:31:17.335
<v Speaker 0>it.

00:31:18.855 --> 00:31:21.335
<v Speaker 1>Yes. Like c. There we go. That's how

00:31:21.335 --> 00:31:21.815
<v Speaker 1>you do that.

00:31:23.220 --> 00:31:25.140
<v Speaker 1>The first if if that's

00:31:25.300 --> 00:31:28.100
<v Speaker 1>one is true, factorial of a negative number

00:31:28.100 --> 00:31:28.900
<v Speaker 1>as one?

00:31:30.340 --> 00:31:32.100
<v Speaker 0>If less than or equal to one,

00:31:32.900 --> 00:31:34.020
<v Speaker 0>return one.

00:31:35.780 --> 00:31:36.740
<v Speaker 0>That's okay. Okay.

00:31:37.465 --> 00:31:38.665
<v Speaker 1>I think so.

00:31:40.905 --> 00:31:42.345
<v Speaker 1>Let's run this. Index number.

00:31:44.185 --> 00:31:46.505
<v Speaker 0>I can test this through the Let's do

00:31:46.345 --> 00:31:47.065
<v Speaker 1>the proper

00:31:47.625 --> 00:31:49.705
<v Speaker 1>way. Okay. Open up your PHP file.

00:31:50.290 --> 00:31:51.890
<v Speaker 1>You're just doing this how how does she

00:31:51.970 --> 00:31:53.090
<v Speaker 1>how you should do this.

00:31:53.410 --> 00:31:57.090
<v Speaker 1>The number is the int cost of arc

00:31:57.090 --> 00:31:58.529
<v Speaker 1>v one.

00:32:00.210 --> 00:32:01.010
<v Speaker 1>Yeah.

00:32:01.250 --> 00:32:04.315
<v Speaker 1>And then arc v yeah. Exactly. Don't forget

00:32:04.315 --> 00:32:05.995
<v Speaker 1>your semicolon. It's not go.

00:32:07.195 --> 00:32:08.795
<v Speaker 0>So now you just have to pass that

00:32:08.795 --> 00:32:09.675
<v Speaker 0>721

00:32:09.675 --> 00:32:10.795
<v Speaker 0>here. Right? Yes.

00:32:11.755 --> 00:32:12.715
<v Speaker 1>That

00:32:13.195 --> 00:32:13.675
<v Speaker 0>was a

00:32:14.395 --> 00:32:14.955
<v Speaker 1>Okay.

00:32:15.435 --> 00:32:17.355
<v Speaker 1>Well, you have a bug in your code,

00:32:17.355 --> 00:32:17.835
<v Speaker 1>mate,

00:32:18.395 --> 00:32:18.875
<v Speaker 1>because

00:32:19.650 --> 00:32:21.890
<v Speaker 1>this is xdebug telling you if you see

00:32:21.890 --> 00:32:23.250
<v Speaker 1>the whole error message,

00:32:24.530 --> 00:32:26.930
<v Speaker 1>pipe what you type to to less and

00:32:26.930 --> 00:32:28.210
<v Speaker 1>you'll see what I mean.

00:32:29.170 --> 00:32:31.490
<v Speaker 1>There's 250 lines you don't want to scroll

00:32:31.490 --> 00:32:31.970
<v Speaker 1>up.

00:32:32.370 --> 00:32:34.705
<v Speaker 0>So I only tested the small numbers, and

00:32:34.705 --> 00:32:35.505
<v Speaker 0>it works.

00:32:36.705 --> 00:32:38.385
<v Speaker 0>So it's the big number that's causing the

00:32:38.385 --> 00:32:40.065
<v Speaker 0>error. Okay. So let's run over seven two

00:32:40.065 --> 00:32:41.745
<v Speaker 0>one and put

00:32:41.905 --> 00:32:45.585
<v Speaker 0>errors to log. Correct? Yeah. But that will

00:32:48.440 --> 00:32:49.960
<v Speaker 1>it's standard output.

00:32:52.600 --> 00:32:54.200
<v Speaker 1>So we'll move it to you.

00:32:56.440 --> 00:32:59.080
<v Speaker 0>Maximum function nesting level of 256.

00:33:01.895 --> 00:33:02.534
<v Speaker 1>Yeah.

00:33:03.415 --> 00:33:04.774
<v Speaker 1>You know what that means?

00:33:05.895 --> 00:33:07.735
<v Speaker 0>Well, I was assuming that this was tail

00:33:07.735 --> 00:33:09.415
<v Speaker 0>call optimized, and that would be okay. But

00:33:09.415 --> 00:33:10.374
<v Speaker 0>I'm assuming

00:33:11.495 --> 00:33:13.655
<v Speaker 1>It's call optimized. What do you mean by

00:33:13.655 --> 00:33:13.815
<v Speaker 1>that?

00:33:17.100 --> 00:33:19.260
<v Speaker 0>Can we disable xdebug for a second?

00:33:20.140 --> 00:33:21.500
<v Speaker 1>Yeah. Sure.

00:33:22.060 --> 00:33:23.740
<v Speaker 1>And then it'll just you don't have to

00:33:23.740 --> 00:33:25.420
<v Speaker 1>disable it. Just type minus n on the

00:33:25.420 --> 00:33:25.980
<v Speaker 1>command line.

00:33:27.585 --> 00:33:29.424
<v Speaker 1>PHP minus n

00:33:29.505 --> 00:33:31.344
<v Speaker 1>and then the rest of your line.

00:33:35.345 --> 00:33:36.465
<v Speaker 1>And for

00:33:36.625 --> 00:33:37.344
<v Speaker 1>Yeah. And would

00:33:38.065 --> 00:33:39.585
<v Speaker 1>you now make this number

00:33:41.345 --> 00:33:43.610
<v Speaker 1>how can it be inf? That makes no

00:33:43.610 --> 00:33:44.490
<v Speaker 1>sense? So

00:33:46.970 --> 00:33:48.890
<v Speaker 1>what is the highest number you can do?

00:33:49.210 --> 00:33:51.450
<v Speaker 0>Yeah. It's just the numbers are too big.

00:33:53.850 --> 00:33:55.690
<v Speaker 0>Okay. Let's just stick with smaller numbers for

00:33:55.690 --> 00:33:57.754
<v Speaker 0>now. Let's not break it.

00:33:58.154 --> 00:33:59.514
<v Speaker 0>Let's run back and

00:34:00.315 --> 00:34:01.114
<v Speaker 1>Wait.

00:34:02.554 --> 00:34:02.794
<v Speaker 1>Say

00:34:04.235 --> 00:34:07.354
<v Speaker 1>I yeah. I was let's pick seven

00:34:07.355 --> 00:34:08.395
<v Speaker 1>as a good number.

00:34:12.949 --> 00:34:13.590
<v Speaker 1>Okay.

00:34:13.909 --> 00:34:16.949
<v Speaker 1>Now let's let's see how big the file

00:34:16.949 --> 00:34:18.310
<v Speaker 1>is that this has created.

00:34:19.750 --> 00:34:20.630
<v Speaker 0>Okay.

00:34:20.630 --> 00:34:22.869
<v Speaker 0>So we wanna do l l bar 10.

00:34:24.135 --> 00:34:25.895
<v Speaker 0>We must be this one here.

00:34:27.735 --> 00:34:29.895
<v Speaker 0>We'll take human readable side of this.

00:34:30.535 --> 00:34:32.614
<v Speaker 1>That's not that well, let's just go

00:34:33.335 --> 00:34:35.975
<v Speaker 1>what is the human readable of 734?

00:34:37.280 --> 00:34:39.119
<v Speaker 0>It's because I'm not actually using alias, so

00:34:39.119 --> 00:34:41.040
<v Speaker 0>that's an alias for something else. I think

00:34:41.040 --> 00:34:42.719
<v Speaker 0>I think so let's just

00:34:43.119 --> 00:34:44.320
<v Speaker 0>the old school

00:34:45.600 --> 00:34:47.920
<v Speaker 1>It's still going to be showing '3 and

00:34:48.000 --> 00:34:49.199
<v Speaker 1>07/1934.

00:34:49.755 --> 00:34:51.594
<v Speaker 0>Yeah. I yeah.

00:34:52.315 --> 00:34:53.195
<v Speaker 0>I'll quiet.

00:34:55.835 --> 00:34:57.595
<v Speaker 1>Do you want to open up the file?

00:34:59.434 --> 00:35:01.355
<v Speaker 0>I don't know because I'm getting loads of

00:35:01.355 --> 00:35:03.194
<v Speaker 0>things wrong here. Maybe we should just quit

00:35:03.194 --> 00:35:03.835
<v Speaker 0>while we're ahead.

00:35:05.390 --> 00:35:07.070
<v Speaker 0>There we go. There we go. Yeah.

00:35:08.190 --> 00:35:08.990
<v Speaker 1>Alright.

00:35:09.550 --> 00:35:11.950
<v Speaker 1>This makes sense. Right? So on your left

00:35:11.950 --> 00:35:13.550
<v Speaker 1>hand side, you still have two functions. You

00:35:13.550 --> 00:35:15.150
<v Speaker 1>have your main and your factorial.

00:35:17.550 --> 00:35:17.950
<v Speaker 1>Also,

00:35:19.565 --> 00:35:22.204
<v Speaker 1>the self columns added up together end up

00:35:22.204 --> 00:35:23.165
<v Speaker 1>at a hundred,

00:35:23.964 --> 00:35:25.645
<v Speaker 1>so there's nothing wrong with it.

00:35:25.964 --> 00:35:27.724
<v Speaker 1>You can see that spent time in the

00:35:27.724 --> 00:35:29.964
<v Speaker 1>factorial function is now more. It's now six

00:35:30.125 --> 00:35:31.244
<v Speaker 1>it's 60 ish percent,

00:35:31.890 --> 00:35:34.450
<v Speaker 1>and your color graph says that factorial

00:35:35.730 --> 00:35:37.970
<v Speaker 1>calls itself six times, which makes sense for

00:35:37.970 --> 00:35:39.010
<v Speaker 1>the number seven.

00:35:39.329 --> 00:35:40.130
<v Speaker 0>Indeed.

00:35:40.450 --> 00:35:41.250
<v Speaker 0>Now

00:35:41.650 --> 00:35:43.730
<v Speaker 1>there are a few other things in

00:35:43.970 --> 00:35:45.490
<v Speaker 1>q cache client. So at the top, you

00:35:45.490 --> 00:35:46.530
<v Speaker 1>have a few icons.

00:35:47.010 --> 00:35:48.895
<v Speaker 1>So you have the open file icon,

00:35:49.454 --> 00:35:51.135
<v Speaker 1>which lets you open a new file. You

00:35:51.135 --> 00:35:53.535
<v Speaker 1>have the the one next to it,

00:35:54.015 --> 00:35:55.215
<v Speaker 1>the text cycles. So

00:35:55.934 --> 00:35:58.494
<v Speaker 1>that is the clever bit in QCache Grind

00:35:58.494 --> 00:35:58.974
<v Speaker 1>that's

00:35:59.360 --> 00:36:00.960
<v Speaker 1>if you have a cycle like this, like

00:36:00.960 --> 00:36:04.000
<v Speaker 1>a recursive function, it the it's can detect

00:36:04.000 --> 00:36:04.640
<v Speaker 1>that

00:36:06.080 --> 00:36:06.720
<v Speaker 1>and

00:36:08.560 --> 00:36:11.440
<v Speaker 1>will then analyze things according to the cycle.

00:36:11.440 --> 00:36:13.120
<v Speaker 1>So if you get recursion, it's difficult to

00:36:13.120 --> 00:36:15.855
<v Speaker 1>create a graph because you never know how

00:36:15.855 --> 00:36:17.855
<v Speaker 1>you end up escaping

00:36:17.855 --> 00:36:19.135
<v Speaker 1>the recursion. Right?

00:36:19.615 --> 00:36:20.415
<v Speaker 1>I mean,

00:36:21.135 --> 00:36:23.295
<v Speaker 1>in your case, you can't really see this

00:36:23.295 --> 00:36:24.815
<v Speaker 1>because factorial itself

00:36:25.135 --> 00:36:27.535
<v Speaker 1>doesn't do anything else except calling itself.

00:36:28.710 --> 00:36:30.869
<v Speaker 1>So there's no no issue of it having

00:36:30.869 --> 00:36:32.550
<v Speaker 1>to be detected because

00:36:33.030 --> 00:36:36.390
<v Speaker 1>there's no other output part out of factorial.

00:36:37.910 --> 00:36:40.790
<v Speaker 1>But if factorial would have called my echo

00:36:40.790 --> 00:36:43.355
<v Speaker 1>or done something through another function,

00:36:43.595 --> 00:36:45.755
<v Speaker 1>it will show you these cycles as well.

00:36:46.395 --> 00:36:48.555
<v Speaker 1>So if you create a function, my factorial,

00:36:48.555 --> 00:36:49.835
<v Speaker 1>that's called factorial

00:36:50.395 --> 00:36:52.395
<v Speaker 1>and change change that in your scripts, then

00:36:56.230 --> 00:36:57.590
<v Speaker 1>it's a number. Yeah.

00:37:00.630 --> 00:37:02.230
<v Speaker 1>And that just calls factorial.

00:37:05.855 --> 00:37:08.575
<v Speaker 1>And then on line 17, you change factorial

00:37:08.575 --> 00:37:10.095
<v Speaker 1>to my factorial.

00:37:13.055 --> 00:37:15.214
<v Speaker 0>I mean, could we also just add an

00:37:15.214 --> 00:37:18.015
<v Speaker 0>echo that says hi with that? Yep. Echo

00:37:18.015 --> 00:37:19.214
<v Speaker 1>echoes

00:37:19.214 --> 00:37:20.095
<v Speaker 1>and function calls.

00:37:22.059 --> 00:37:23.180
<v Speaker 1>Alright. Gotcha.

00:37:23.579 --> 00:37:25.180
<v Speaker 1>So if you want to do that, you

00:37:25.180 --> 00:37:27.260
<v Speaker 1>can use a a print

00:37:27.260 --> 00:37:30.140
<v Speaker 1>f, for example. That would work, but echo

00:37:30.140 --> 00:37:30.540
<v Speaker 1>doesn't.

00:37:36.195 --> 00:37:36.995
<v Speaker 1>Exactly.

00:37:40.355 --> 00:37:42.195
<v Speaker 0>I like two lines. Okay.

00:37:43.075 --> 00:37:45.235
<v Speaker 1>Yeah. But I never bother a I never

00:37:45.235 --> 00:37:47.235
<v Speaker 1>bother with a constant. I just type slash

00:37:47.235 --> 00:37:47.875
<v Speaker 1>n.

00:37:48.195 --> 00:37:49.955
<v Speaker 0>Alright. Will we feel brave while we do

00:37:49.955 --> 00:37:50.435
<v Speaker 0>21?

00:37:51.860 --> 00:37:52.900
<v Speaker 1>Yeah. Sure.

00:37:53.700 --> 00:37:56.580
<v Speaker 0>Alright. Okay. You should get this 21 times.

00:37:56.580 --> 00:37:57.700
<v Speaker 1>So that's not so bad.

00:37:57.940 --> 00:37:59.860
<v Speaker 1>Do you want to check this file size

00:37:59.860 --> 00:38:02.180
<v Speaker 1>just to see how bad that can get?

00:38:05.885 --> 00:38:06.765
<v Speaker 0>3.9

00:38:06.765 --> 00:38:07.325
<v Speaker 0>k.

00:38:08.525 --> 00:38:10.765
<v Speaker 1>Yep. The false can get big.

00:38:11.085 --> 00:38:13.325
<v Speaker 0>Yep. Be aware of that. Anyway, let's open

00:38:13.325 --> 00:38:15.405
<v Speaker 1>them in QCachegrind and see what this is.

00:38:15.405 --> 00:38:16.205
<v Speaker 0>Woah.

00:38:17.645 --> 00:38:19.645
<v Speaker 1>You're making pretty pictures.

00:38:21.220 --> 00:38:22.340
<v Speaker 1>This is awesome.

00:38:22.580 --> 00:38:24.420
<v Speaker 1>Yeah. Cute cash grind, I think you should

00:38:24.420 --> 00:38:25.460
<v Speaker 1>take a screenshot.

00:38:25.860 --> 00:38:28.020
<v Speaker 0>This is this is why people use factorials

00:38:28.020 --> 00:38:30.820
<v Speaker 0>to do random cool wallpapers and stuff, isn't

00:38:30.820 --> 00:38:32.500
<v Speaker 0>it? Because you do get all these weird

00:38:32.500 --> 00:38:33.460
<v Speaker 0>recursive

00:38:34.420 --> 00:38:34.740
<v Speaker 0>looks.

00:38:35.705 --> 00:38:36.825
<v Speaker 1>It's amazing.

00:38:37.225 --> 00:38:38.985
<v Speaker 0>Alright. We'll take a screenshot. We'll put it

00:38:38.985 --> 00:38:39.705
<v Speaker 0>on there.

00:38:39.945 --> 00:38:40.505
<v Speaker 0>Should not

00:38:41.625 --> 00:38:43.865
<v Speaker 0>that. Okay. Yeah. Excellent.

00:38:44.025 --> 00:38:45.785
<v Speaker 1>But, yeah, now you see a cycle. Right?

00:38:45.785 --> 00:38:48.025
<v Speaker 1>You see a factorial my factorial

00:38:48.265 --> 00:38:49.305
<v Speaker 1>19 times,

00:38:50.040 --> 00:38:51.880
<v Speaker 1>but there's some other interesting that happened as

00:38:51.880 --> 00:38:52.440
<v Speaker 1>well.

00:38:52.760 --> 00:38:54.280
<v Speaker 1>Look at the percentages.

00:38:55.880 --> 00:38:57.720
<v Speaker 0>Oh, 642%

00:38:57.720 --> 00:38:59.800
<v Speaker 0>versus 582%.

00:39:00.760 --> 00:39:03.125
<v Speaker 1>Which makes no sense. I mean, you can

00:39:03.125 --> 00:39:04.805
<v Speaker 1>argue that main is a little bit larger

00:39:04.805 --> 00:39:06.485
<v Speaker 1>because of routing errors, but

00:39:06.805 --> 00:39:08.245
<v Speaker 1>that's old, isn't it?

00:39:10.244 --> 00:39:11.605
<v Speaker 1>This is this

00:39:11.605 --> 00:39:12.325
<v Speaker 1>is a bug.

00:39:14.490 --> 00:39:16.250
<v Speaker 1>It's a bug, an xdebug,

00:39:17.850 --> 00:39:19.850
<v Speaker 1>but I haven't figured out how to fix

00:39:19.850 --> 00:39:20.570
<v Speaker 1>it yet.

00:39:22.890 --> 00:39:24.730
<v Speaker 0>Okay. So we could skip over that for

00:39:24.730 --> 00:39:26.410
<v Speaker 0>now. I don't judge. I don't judge. It

00:39:26.410 --> 00:39:29.105
<v Speaker 1>does not particularly matter though because it still

00:39:29.185 --> 00:39:31.265
<v Speaker 1>allows you to detect the slow path.

00:39:32.465 --> 00:39:34.225
<v Speaker 1>But in this case, there's so little information

00:39:34.225 --> 00:39:35.744
<v Speaker 1>to slow. We know what the slowest part

00:39:35.744 --> 00:39:37.265
<v Speaker 1>is because it's just calling the function over

00:39:37.265 --> 00:39:38.145
<v Speaker 1>and over again.

00:39:38.465 --> 00:39:40.225
<v Speaker 0>So can I slow it down with some

00:39:40.225 --> 00:39:41.025
<v Speaker 0>crappy code?

00:39:42.430 --> 00:39:44.110
<v Speaker 0>Yes. Or do wanna go over this first?

00:39:44.110 --> 00:39:45.710
<v Speaker 0>Is there something here that we should Yeah.

00:39:45.710 --> 00:39:47.310
<v Speaker 1>I want to point out a few things.

00:39:47.310 --> 00:39:48.190
<v Speaker 1>Okay. So

00:39:48.510 --> 00:39:50.270
<v Speaker 1>the icons that I was just talking about,

00:39:50.270 --> 00:39:52.670
<v Speaker 1>the first one is detecting cycles. Just click

00:39:52.670 --> 00:39:53.390
<v Speaker 1>it off.

00:39:56.030 --> 00:39:56.430
<v Speaker 0>K.

00:39:58.164 --> 00:39:59.525
<v Speaker 1>Of course. Now you need to resize the

00:39:59.525 --> 00:40:01.365
<v Speaker 1>screen, I think, because it should have changed

00:40:01.365 --> 00:40:03.525
<v Speaker 1>information, and I still see the same thing.

00:40:03.605 --> 00:40:05.925
<v Speaker 0>No. It's not changed on my side either.

00:40:06.244 --> 00:40:07.605
<v Speaker 0>Can I refresh?

00:40:08.565 --> 00:40:10.644
<v Speaker 1>No. No. If it didn't change, then then

00:40:10.644 --> 00:40:13.690
<v Speaker 1>that's fine. So the cycle detection still didn't

00:40:13.690 --> 00:40:15.690
<v Speaker 1>have to kick in here because it's still

00:40:15.690 --> 00:40:17.369
<v Speaker 1>not interesting enough

00:40:17.769 --> 00:40:19.930
<v Speaker 1>because you still only get a circle.

00:40:21.609 --> 00:40:23.210
<v Speaker 1>This is something that is going to be

00:40:23.210 --> 00:40:25.290
<v Speaker 1>really hard to artificially create,

00:40:25.369 --> 00:40:27.765
<v Speaker 1>so I wouldn't bother trying it. We will

00:40:27.765 --> 00:40:28.485
<v Speaker 1>see this

00:40:29.045 --> 00:40:31.685
<v Speaker 1>when we run something interesting like Composer because

00:40:31.685 --> 00:40:33.525
<v Speaker 1>Composer has a recursive

00:40:33.525 --> 00:40:35.365
<v Speaker 1>dependency solver in it.

00:40:36.484 --> 00:40:39.365
<v Speaker 1>Okay. So the the only things to I

00:40:39.365 --> 00:40:41.125
<v Speaker 1>want to point out one more thing. If

00:40:41.125 --> 00:40:42.930
<v Speaker 1>on the top right tab,

00:40:43.330 --> 00:40:45.250
<v Speaker 1>you go to all colors.

00:40:46.210 --> 00:40:46.930
<v Speaker 1>Yep.

00:40:47.410 --> 00:40:50.290
<v Speaker 1>The top right. Oh, alright. Yeah.

00:40:52.930 --> 00:40:54.210
<v Speaker 1>And you select k.

00:40:54.849 --> 00:40:56.770
<v Speaker 1>Print f on the left hand side.

00:40:59.675 --> 00:41:02.155
<v Speaker 1>It is interesting because it shows you the

00:41:02.155 --> 00:41:03.035
<v Speaker 1>distance

00:41:03.435 --> 00:41:05.035
<v Speaker 1>from other functions.

00:41:06.475 --> 00:41:08.795
<v Speaker 1>So this sometimes tells you if this is

00:41:08.795 --> 00:41:10.075
<v Speaker 1>all in one

00:41:10.420 --> 00:41:11.060
<v Speaker 1>or

00:41:12.580 --> 00:41:14.420
<v Speaker 1>prominently from only one

00:41:14.660 --> 00:41:15.700
<v Speaker 1>other function,

00:41:16.260 --> 00:41:18.420
<v Speaker 1>it pretty much means that it

00:41:19.540 --> 00:41:22.020
<v Speaker 1>might make sense to inline it if it

00:41:22.020 --> 00:41:23.220
<v Speaker 1>takes up a lot of time.

00:41:23.955 --> 00:41:26.115
<v Speaker 1>Because function calls sorry. Not a lot of

00:41:26.115 --> 00:41:27.955
<v Speaker 1>time if there's a lot of calls

00:41:28.995 --> 00:41:29.635
<v Speaker 1>there.

00:41:30.115 --> 00:41:31.955
<v Speaker 1>Because function When you say testings, do you

00:41:31.955 --> 00:41:33.075
<v Speaker 0>mean how many

00:41:33.395 --> 00:41:35.315
<v Speaker 0>functions deep the call was?

00:41:35.635 --> 00:41:36.595
<v Speaker 1>How many

00:41:37.235 --> 00:41:39.075
<v Speaker 1>how many different levels,

00:41:39.600 --> 00:41:40.400
<v Speaker 1>stack

00:41:40.400 --> 00:41:42.640
<v Speaker 1>levels there were between the function that you

00:41:42.640 --> 00:41:44.640
<v Speaker 1>selected and the one on that list there.

00:41:44.640 --> 00:41:46.960
<v Speaker 0>Got you. Okay. So not necessarily from the

00:41:46.960 --> 00:41:49.600
<v Speaker 1>top, but from well, in this case, main

00:41:49.600 --> 00:41:51.040
<v Speaker 1>is from the top, of course, and the

00:41:51.040 --> 00:41:52.720
<v Speaker 1>distance is always going to be two here,

00:41:52.720 --> 00:41:55.435
<v Speaker 1>apparently. So to clarify that, if I had

00:41:55.435 --> 00:41:56.395
<v Speaker 0>a function,

00:41:56.875 --> 00:41:58.715
<v Speaker 0>my my factorial,

00:41:59.435 --> 00:42:01.195
<v Speaker 0>and I would also make this work, but

00:42:01.195 --> 00:42:02.795
<v Speaker 0>that would be a distance of three if

00:42:02.795 --> 00:42:05.675
<v Speaker 0>I updated these calls. Right? Right. Yes. Three

00:42:05.675 --> 00:42:08.170
<v Speaker 0>three stacks, three function calls. Right.

00:42:08.250 --> 00:42:08.650
<v Speaker 0>I

00:42:09.210 --> 00:42:10.650
<v Speaker 1>think that if you would put the print

00:42:10.650 --> 00:42:12.890
<v Speaker 1>f in the older function, it'd show you

00:42:13.210 --> 00:42:15.610
<v Speaker 1>other things, but it doesn't matter.

00:42:15.930 --> 00:42:18.330
<v Speaker 1>Anyway, recursion is the probably one of the

00:42:18.330 --> 00:42:21.850
<v Speaker 1>hardest things to to actually analyze because things

00:42:21.850 --> 00:42:22.570
<v Speaker 1>get confusing.

00:42:23.435 --> 00:42:25.115
<v Speaker 1>But this makes sense now. Right?

00:42:25.995 --> 00:42:28.315
<v Speaker 0>Yeah. Okay. That definitely.

00:42:28.875 --> 00:42:29.595
<v Speaker 1>Yep.

00:42:31.755 --> 00:42:33.915
<v Speaker 1>Shall we look at something more interesting?

00:42:35.829 --> 00:42:37.830
<v Speaker 0>Can we slow this down first?

00:42:37.990 --> 00:42:39.910
<v Speaker 0>Does that change anything from a

00:42:40.150 --> 00:42:41.829
<v Speaker 0>queue cash frame point of view? Will we

00:42:41.829 --> 00:42:43.430
<v Speaker 0>be able to see the bottleneck of one

00:42:43.430 --> 00:42:45.830
<v Speaker 0>of these functions? You will see

00:42:46.150 --> 00:42:48.150
<v Speaker 1>that's the overheads

00:42:48.310 --> 00:42:48.790
<v Speaker 1>of

00:42:49.185 --> 00:42:51.745
<v Speaker 1>the function calls themselves goes away.

00:42:52.545 --> 00:42:53.905
<v Speaker 1>So, yeah, I just put a u sleep

00:42:53.905 --> 00:42:55.985
<v Speaker 1>in in my factorial.

00:42:56.865 --> 00:42:59.185
<v Speaker 0>But I wanna say I only wanna do

00:42:59.185 --> 00:42:59.745
<v Speaker 0>it.

00:43:00.625 --> 00:43:03.505
<v Speaker 0>So let's say number is divisible by

00:43:04.250 --> 00:43:05.050
<v Speaker 0>by

00:43:06.329 --> 00:43:07.930
<v Speaker 0>then we do a use sleep.

00:43:08.730 --> 00:43:10.090
<v Speaker 1>How long do you sleep?

00:43:11.050 --> 00:43:12.410
<v Speaker 1>It's a microsecond.

00:43:12.410 --> 00:43:15.849
<v Speaker 1>Yeah. Six hundred. That that's six hundred microseconds.

00:43:19.855 --> 00:43:22.575
<v Speaker 0>Ah, you didn't We didn't return necessarily. So

00:43:22.575 --> 00:43:23.934
<v Speaker 0>I don't think we were actually getting a

00:43:23.934 --> 00:43:26.015
<v Speaker 0>proper view of it. Right? No. We didn't

00:43:26.015 --> 00:43:27.375
<v Speaker 1>actually check the output.

00:43:27.694 --> 00:43:29.055
<v Speaker 1>Should have written a unit test.

00:43:30.920 --> 00:43:33.000
<v Speaker 0>Okay. Let's let's try that again.

00:43:33.240 --> 00:43:35.480
<v Speaker 1>That actually might mean that we didn't quite

00:43:35.480 --> 00:43:37.880
<v Speaker 1>get the interesting output that we wanted.

00:43:38.200 --> 00:43:40.200
<v Speaker 0>Yeah. Yeah. I noticed that maybe on back

00:43:40.200 --> 00:43:40.760
<v Speaker 0>end.

00:43:42.440 --> 00:43:43.240
<v Speaker 0>The position is

00:43:44.714 --> 00:43:46.954
<v Speaker 0>39 is we're now at eight k. But,

00:43:46.954 --> 00:43:49.195
<v Speaker 0>yeah, it's definitely growing pretty

00:43:49.275 --> 00:43:49.994
<v Speaker 0>rapidly.

00:43:50.154 --> 00:43:50.714
<v Speaker 0>Yep.

00:43:51.355 --> 00:43:52.875
<v Speaker 0>So if we take a look at

00:43:53.515 --> 00:43:54.714
<v Speaker 0>wait. There we go.

00:43:55.994 --> 00:43:57.835
<v Speaker 1>So now you see it as load. It's

00:43:57.835 --> 00:43:58.795
<v Speaker 1>a little bit different. Right?

00:44:00.330 --> 00:44:02.730
<v Speaker 1>But I'm I'm not sure why you got

00:44:02.730 --> 00:44:04.730
<v Speaker 1>to use sleep every single time still.

00:44:07.050 --> 00:44:08.650
<v Speaker 0>Maybe my terrible coding?

00:44:12.385 --> 00:44:13.905
<v Speaker 0>That looks okay to me.

00:44:16.465 --> 00:44:19.025
<v Speaker 1>Yeah. It looks okay to me too. Okay.

00:44:20.785 --> 00:44:22.705
<v Speaker 0>So if if we get 39, that would

00:44:22.705 --> 00:44:23.985
<v Speaker 0>mean we should get

00:44:24.785 --> 00:44:26.705
<v Speaker 0>eight calls to use, like

00:44:27.585 --> 00:44:30.600
<v Speaker 0>I if we can Seven. If we seven.

00:44:31.000 --> 00:44:33.000
<v Speaker 0>If we do seven, we should get less.

00:44:33.000 --> 00:44:33.480
<v Speaker 0>So

00:44:39.320 --> 00:44:40.040
<v Speaker 0>Click on there.

00:44:41.025 --> 00:44:42.625
<v Speaker 0>Interesting.

00:44:42.704 --> 00:44:44.465
<v Speaker 1>Yeah. I don't understand this.

00:44:45.825 --> 00:44:47.825
<v Speaker 1>It still seems to be calling It seems

00:44:47.825 --> 00:44:49.744
<v Speaker 0>to called five times according to this. That's

00:44:49.744 --> 00:44:52.385
<v Speaker 0>correct. Yeah. And if you click on in

00:44:52.385 --> 00:44:52.944
<v Speaker 1>a bolt,

00:44:53.750 --> 00:44:55.190
<v Speaker 1>if you click on all

00:44:55.510 --> 00:44:57.430
<v Speaker 1>if you click on colors of u sleep

00:44:59.109 --> 00:45:01.270
<v Speaker 1>so select u sleep on the left,

00:45:04.150 --> 00:45:06.790
<v Speaker 1>and then all colors or colors,

00:45:06.790 --> 00:45:09.005
<v Speaker 1>it says my factorial call that. So if

00:45:09.005 --> 00:45:11.325
<v Speaker 1>you double click on my factorial no. Don't

00:45:11.325 --> 00:45:13.885
<v Speaker 1>click away. I'm trying to explain things. And

00:45:14.205 --> 00:45:15.885
<v Speaker 1>now go to source code.

00:45:19.405 --> 00:45:21.725
<v Speaker 1>You can see in my factorial that there

00:45:21.725 --> 00:45:23.005
<v Speaker 1>were five calls

00:45:23.540 --> 00:45:24.580
<v Speaker 1>u sleep

00:45:26.580 --> 00:45:29.700
<v Speaker 0>Yep. And 38 calls to factorial, which makes

00:45:29.700 --> 00:45:30.260
<v Speaker 1>sense.

00:45:30.660 --> 00:45:31.380
<v Speaker 1>Indeed.

00:45:32.420 --> 00:45:34.740
<v Speaker 1>Now turn on back to cycle detection, because

00:45:39.015 --> 00:45:40.454
<v Speaker 1>Doesn't change anything. That's

00:45:41.174 --> 00:45:42.935
<v Speaker 1>so what No.

00:45:45.095 --> 00:45:45.734
<v Speaker 1>Right.

00:45:46.775 --> 00:45:48.055
<v Speaker 1>You selected

00:45:48.055 --> 00:45:50.055
<v Speaker 1>a different function. Oh, sorry.

00:45:52.130 --> 00:45:53.010
<v Speaker 1>No. You

00:45:53.810 --> 00:45:56.930
<v Speaker 1>click on my pictorial, please. And

00:45:58.450 --> 00:46:00.850
<v Speaker 1>then leave colors in the top right.

00:46:03.894 --> 00:46:05.734
<v Speaker 1>Is there a question?

00:46:06.535 --> 00:46:08.695
<v Speaker 1>Do you, Crystal, raises a hand?

00:46:11.255 --> 00:46:11.974
<v Speaker 0>Yep.

00:46:12.055 --> 00:46:13.335
<v Speaker 0>If you have a question,

00:46:13.575 --> 00:46:15.815
<v Speaker 0>you can type it in, and we will

00:46:15.815 --> 00:46:17.494
<v Speaker 0>read out and handle that for you. No

00:46:17.494 --> 00:46:17.815
<v Speaker 0>problem.

00:46:19.109 --> 00:46:21.109
<v Speaker 1>Any in any case, I would like to

00:46:21.109 --> 00:46:22.390
<v Speaker 1>see in something

00:46:22.869 --> 00:46:25.589
<v Speaker 1>interesting instead of our contrived examples

00:46:25.910 --> 00:46:27.910
<v Speaker 1>because then you can actually explain things.

00:46:31.365 --> 00:46:32.325
<v Speaker 0>Alrighty

00:46:32.325 --> 00:46:34.405
<v Speaker 0>then. Yep. So do you want her to

00:46:34.405 --> 00:46:36.165
<v Speaker 0>compose her sample or go straight to the

00:46:36.165 --> 00:46:36.885
<v Speaker 0>seller?

00:46:37.365 --> 00:46:38.165
<v Speaker 1>Ask

00:46:38.165 --> 00:46:40.085
<v Speaker 1>her to compose her sample first.

00:46:42.085 --> 00:46:45.420
<v Speaker 1>Oh. No. Just saying hi. Hello. Hello, back?

00:46:47.580 --> 00:46:50.060
<v Speaker 0>I can say hello in many languages.

00:46:52.619 --> 00:46:53.420
<v Speaker 1>How

00:46:54.780 --> 00:46:55.580
<v Speaker 0>about

00:46:55.820 --> 00:46:56.460
<v Speaker 0>Mandalin?

00:46:59.605 --> 00:47:01.285
<v Speaker 1>So you're not going to pick the language.

00:47:01.285 --> 00:47:03.605
<v Speaker 1>I can pick the languages. How

00:47:03.605 --> 00:47:04.805
<v Speaker 0>about Gaelic?

00:47:05.444 --> 00:47:07.285
<v Speaker 1>Hello? That's simple enough.

00:47:10.180 --> 00:47:11.060
<v Speaker 0>Alright.

00:47:11.620 --> 00:47:13.460
<v Speaker 0>We won't make this a language lesson. We

00:47:13.460 --> 00:47:14.820
<v Speaker 0>will No. Let's not do that.

00:47:15.140 --> 00:47:16.900
<v Speaker 0>Because I don't want to be showing up

00:47:16.900 --> 00:47:17.620
<v Speaker 0>as a

00:47:19.060 --> 00:47:20.420
<v Speaker 0>well, terrible languages.

00:47:20.420 --> 00:47:20.660
<v Speaker 0>So

00:47:22.335 --> 00:47:24.815
<v Speaker 0>we have this composer dot json and I

00:47:24.815 --> 00:47:27.055
<v Speaker 0>have put together with two dependencies.

00:47:27.055 --> 00:47:30.655
<v Speaker 0>Now can I just run PHP

00:47:31.615 --> 00:47:33.295
<v Speaker 0>composer install?

00:47:33.295 --> 00:47:34.974
<v Speaker 1>I don't know why you have composer.

00:47:37.980 --> 00:47:39.900
<v Speaker 0>It's just installed by brew.

00:47:41.100 --> 00:47:43.260
<v Speaker 1>If it's installed by brew, I would like

00:47:43.260 --> 00:47:44.780
<v Speaker 1>to see the first line of it.

00:47:45.820 --> 00:47:46.700
<v Speaker 0>Yep.

00:47:46.700 --> 00:47:49.340
<v Speaker 0>We can do that. Just type ahead and

00:47:49.340 --> 00:47:49.820
<v Speaker 1>that name.

00:47:51.365 --> 00:47:53.125
<v Speaker 1>Oh, you can do it. Okay. So that

00:47:53.125 --> 00:47:54.724
<v Speaker 1>should work. You need to make sure that

00:47:54.724 --> 00:47:56.325
<v Speaker 1>the PHP is actually in the path and

00:47:56.325 --> 00:47:57.765
<v Speaker 1>it is not. So that's what I wanted

00:47:57.765 --> 00:48:00.244
<v Speaker 1>to check. User bin and PHP means it's

00:48:00.244 --> 00:48:02.165
<v Speaker 1>in the path. Yep. Good.

00:48:02.244 --> 00:48:02.724
<v Speaker 0>Alright.

00:48:04.619 --> 00:48:05.500
<v Speaker 1>Run it.

00:48:07.740 --> 00:48:10.059
<v Speaker 1>Okay. The first time, it's you said you

00:48:10.059 --> 00:48:11.260
<v Speaker 1>wiped out the caches,

00:48:11.980 --> 00:48:13.420
<v Speaker 1>so run this once more.

00:48:19.785 --> 00:48:22.185
<v Speaker 1>Yep. Okay. That should be it. And now

00:48:22.185 --> 00:48:24.105
<v Speaker 1>let's open a file with QCache client.

00:48:26.105 --> 00:48:27.625
<v Speaker 1>Yeah. I don't know what name it is,

00:48:27.625 --> 00:48:28.505
<v Speaker 1>but which

00:48:29.145 --> 00:48:32.300
<v Speaker 1>one would it be? A lovely 66 k.

00:48:32.300 --> 00:48:33.660
<v Speaker 1>So that's not so bad.

00:48:38.220 --> 00:48:39.020
<v Speaker 0>Woah.

00:48:39.740 --> 00:48:42.460
<v Speaker 0>Yeah. That's interesting for the trivial or simple

00:48:42.460 --> 00:48:43.180
<v Speaker 0>one. Look

00:48:43.500 --> 00:48:45.734
<v Speaker 1>at there was actually a learning moment on

00:48:45.734 --> 00:48:46.775
<v Speaker 1>the command line.

00:48:47.335 --> 00:48:48.935
<v Speaker 1>Can you switch to your terminal?

00:48:50.775 --> 00:48:52.615
<v Speaker 1>You see that? What it says there?

00:48:53.255 --> 00:48:55.015
<v Speaker 1>Garbage at the end of the cost line.

00:48:56.420 --> 00:48:58.420
<v Speaker 1>So this is something that has to do

00:48:58.420 --> 00:49:00.340
<v Speaker 1>with memory profiling.

00:49:01.060 --> 00:49:04.020
<v Speaker 1>QCache or cache clients' formats doesn't understand

00:49:04.340 --> 00:49:05.940
<v Speaker 1>a negative cost,

00:49:06.660 --> 00:49:08.980
<v Speaker 1>so it doesn't understand that if memory gets

00:49:08.980 --> 00:49:11.300
<v Speaker 1>freed, you have a negative cost.

00:49:13.545 --> 00:49:16.025
<v Speaker 1>So although memory profiling exists

00:49:16.105 --> 00:49:17.385
<v Speaker 1>in xdebug,

00:49:17.385 --> 00:49:18.425
<v Speaker 1>the visualization

00:49:18.425 --> 00:49:21.385
<v Speaker 1>with cache client isn't always the greatest.

00:49:22.185 --> 00:49:23.465
<v Speaker 0>Got it. So that's what I wanted to

00:49:23.465 --> 00:49:24.025
<v Speaker 1>point out here.

00:49:26.730 --> 00:49:28.570
<v Speaker 0>So, I mean, right off the bat, this

00:49:28.570 --> 00:49:29.210
<v Speaker 0>is,

00:49:29.450 --> 00:49:32.250
<v Speaker 0>I mean, information overload for such a simple

00:49:32.250 --> 00:49:33.690
<v Speaker 0>composer dot JSON.

00:49:34.890 --> 00:49:38.010
<v Speaker 1>Well, composers and trivial code. Right? It's That

00:49:38.490 --> 00:49:39.850
<v Speaker 0>that's true. Yeah. Exactly.

00:49:41.575 --> 00:49:43.175
<v Speaker 0>How do we start to make heads and

00:49:43.175 --> 00:49:44.455
<v Speaker 0>tails of this then? Yeah.

00:49:45.015 --> 00:49:46.535
<v Speaker 1>Make it a little bit bigger that at

00:49:46.535 --> 00:49:47.495
<v Speaker 1>the bottom screen.

00:49:48.295 --> 00:49:50.535
<v Speaker 1>Bottom tab should yeah. Drag it up.

00:49:51.255 --> 00:49:52.295
<v Speaker 1>Alright. So

00:49:52.615 --> 00:49:55.975
<v Speaker 1>by default, what it will do is

00:49:57.810 --> 00:49:59.490
<v Speaker 1>k, there will be another learning moment in

00:49:59.490 --> 00:50:01.970
<v Speaker 1>a second. What it's what it will do

00:50:01.970 --> 00:50:03.970
<v Speaker 1>is it will only show anything that's more

00:50:03.970 --> 00:50:05.410
<v Speaker 1>than 5%, I believe.

00:50:06.290 --> 00:50:08.450
<v Speaker 1>But what is the interesting bit, if you

00:50:08.450 --> 00:50:11.075
<v Speaker 1>follow the the the complicated

00:50:11.075 --> 00:50:13.715
<v Speaker 1>parts, the one with the thick arrows

00:50:13.954 --> 00:50:15.954
<v Speaker 0>Mhmm. What is the what is just follow

00:50:15.954 --> 00:50:17.234
<v Speaker 1>follow it from the top to the bottom

00:50:17.234 --> 00:50:18.355
<v Speaker 1>and see what it does.

00:50:18.835 --> 00:50:21.075
<v Speaker 1>Just read out the function names. So we

00:50:21.075 --> 00:50:23.315
<v Speaker 0>start off with main, and then we've got

00:50:23.315 --> 00:50:26.194
<v Speaker 0>require far

00:50:25.329 --> 00:50:26.610
<v Speaker 0>composer bend.

00:50:27.010 --> 00:50:30.050
<v Speaker 0>Then we've got xdebug handler check

00:50:30.050 --> 00:50:33.329
<v Speaker 0>followed by xdebug handler restart followed by xdebug

00:50:33.329 --> 00:50:36.770
<v Speaker 0>hand xdebug handler do restart followed by a

00:50:36.770 --> 00:50:38.210
<v Speaker 0>PHP pass through.

00:50:38.849 --> 00:50:39.170
<v Speaker 1>Yes.

00:50:40.255 --> 00:50:42.815
<v Speaker 1>What can what can you infer from this?

00:50:44.494 --> 00:50:48.335
<v Speaker 0>The the complicated path is xdebug and not

00:50:48.815 --> 00:50:50.095
<v Speaker 0>not I don't know.

00:50:51.295 --> 00:50:52.255
<v Speaker 1>So okay.

00:50:53.210 --> 00:50:55.769
<v Speaker 1>That is a perfectly good answer. Let's find

00:50:55.769 --> 00:50:58.650
<v Speaker 1>out then. Right? So if you click on

00:50:58.650 --> 00:51:01.450
<v Speaker 1>the green well, the that says xdebug handler

00:51:01.450 --> 00:51:02.250
<v Speaker 1>check.

00:51:04.009 --> 00:51:05.769
<v Speaker 1>Yep. Double click. Sorry.

00:51:07.235 --> 00:51:09.635
<v Speaker 1>And then at the top, select source code,

00:51:11.955 --> 00:51:13.315
<v Speaker 1>and then scroll down. Oh,

00:51:14.355 --> 00:51:16.195
<v Speaker 1>so this is annoying because it uses the

00:51:16.195 --> 00:51:16.675
<v Speaker 1>FAR file.

00:51:23.470 --> 00:51:24.670
<v Speaker 0>Do you want me just to

00:51:24.990 --> 00:51:25.950
<v Speaker 1>open this? See that

00:51:27.309 --> 00:51:29.390
<v Speaker 1>well, you can't just open it in FIM.

00:51:29.470 --> 00:51:30.430
<v Speaker 0>Got it.

00:51:31.549 --> 00:51:32.990
<v Speaker 0>But it says here I can add the

00:51:32.990 --> 00:51:33.790
<v Speaker 0>folder

00:51:34.085 --> 00:51:37.125
<v Speaker 0>of this file to the source folder list.

00:51:37.204 --> 00:51:40.005
<v Speaker 1>Yeah. But QCat current doesn't understand far colon

00:51:40.005 --> 00:51:42.164
<v Speaker 1>slash slash as a file prefix.

00:51:42.164 --> 00:51:43.605
<v Speaker 0>Oh, got it. Okay.

00:51:44.644 --> 00:51:47.204
<v Speaker 1>See, I have don't have this problem locally

00:51:47.204 --> 00:51:49.420
<v Speaker 1>because I run this. I run Composer not

00:51:49.420 --> 00:51:50.940
<v Speaker 1>through the far file. I just have a

00:51:50.940 --> 00:51:53.580
<v Speaker 1>checkout of it, but that's too complicated to

00:51:53.580 --> 00:51:54.300
<v Speaker 1>do here.

00:51:54.620 --> 00:51:57.340
<v Speaker 1>So although Composer might be an interesting thing

00:51:57.340 --> 00:51:59.180
<v Speaker 1>to look at because we can't look at

00:51:59.180 --> 00:52:00.140
<v Speaker 1>the source code,

00:52:00.380 --> 00:52:01.900
<v Speaker 1>isn't the most interesting thing.

00:52:02.460 --> 00:52:05.075
<v Speaker 1>But we'll explain what this is anyway. Basically,

00:52:05.075 --> 00:52:06.994
<v Speaker 1>what it says is that what a check

00:52:06.994 --> 00:52:09.154
<v Speaker 1>function does is it checks whether xdebug is

00:52:09.154 --> 00:52:09.715
<v Speaker 1>loaded,

00:52:10.674 --> 00:52:12.755
<v Speaker 1>and then it restarts PHP

00:52:12.755 --> 00:52:14.435
<v Speaker 1>without xdebug loaded.

00:52:14.835 --> 00:52:16.755
<v Speaker 1>So the profile that we have is basically

00:52:16.755 --> 00:52:17.795
<v Speaker 1>just a bootstrap,

00:52:18.800 --> 00:52:21.280
<v Speaker 1>which then disables xdebug. So you don't get

00:52:21.280 --> 00:52:22.880
<v Speaker 1>a profile of something interesting.

00:52:23.440 --> 00:52:25.200
<v Speaker 1>You only get it off the bootstrapping thing

00:52:25.200 --> 00:52:27.360
<v Speaker 1>that starts compose a bit where the interesting

00:52:27.360 --> 00:52:28.400
<v Speaker 1>things are happening.

00:52:29.360 --> 00:52:31.840
<v Speaker 1>Ah, okay. So Composer

00:52:31.395 --> 00:52:33.875
<v Speaker 1>finds it necessary to disable xdebug. So if

00:52:33.875 --> 00:52:34.995
<v Speaker 1>you want to profile

00:52:35.155 --> 00:52:36.035
<v Speaker 1>composer,

00:52:36.595 --> 00:52:38.595
<v Speaker 1>you need to turn off that behavior.

00:52:38.915 --> 00:52:39.955
<v Speaker 1>Does that make sense?

00:52:40.355 --> 00:52:43.795
<v Speaker 0>Yeah. So composer is xdebug aware and disables

00:52:43.795 --> 00:52:46.150
<v Speaker 0>it because, generally, you're not profiling

00:52:46.150 --> 00:52:48.870
<v Speaker 0>Composer but the thing that it's running.

00:52:49.350 --> 00:52:51.830
<v Speaker 1>Well, the the reason why Composer disables xdebug

00:52:51.830 --> 00:52:53.750
<v Speaker 1>because they believe that it slows things down

00:52:53.750 --> 00:52:54.390
<v Speaker 1>too much.

00:52:57.110 --> 00:52:59.590
<v Speaker 0>Okay. So So how do we

00:53:00.155 --> 00:53:01.915
<v Speaker 1>Let's go to the command line,

00:53:03.994 --> 00:53:06.555
<v Speaker 1>and we basically, what we need to do

00:53:06.555 --> 00:53:09.595
<v Speaker 1>is export a specific environment variable that turns

00:53:09.595 --> 00:53:10.635
<v Speaker 1>off this behavior.

00:53:10.955 --> 00:53:12.714
<v Speaker 1>So this is only something you're going to

00:53:12.714 --> 00:53:14.555
<v Speaker 1>have if you're profiling a composer.

00:53:15.710 --> 00:53:17.230
<v Speaker 1>Normally, you don't have to do this. So

00:53:17.230 --> 00:53:19.630
<v Speaker 1>the thing to export is I need to

00:53:19.630 --> 00:53:21.150
<v Speaker 1>look this up because I can't remember.

00:53:21.470 --> 00:53:25.069
<v Speaker 1>It's composer underscore allow underscore xdebug equals one,

00:53:25.069 --> 00:53:25.869
<v Speaker 1>all in capitals.

00:53:28.045 --> 00:53:30.445
<v Speaker 0>Composer underscore allow underscore

00:53:31.405 --> 00:53:32.205
<v Speaker 1>xdebug

00:53:32.205 --> 00:53:34.685
<v Speaker 1>equals one. Equals one. Got it.

00:53:37.405 --> 00:53:38.685
<v Speaker 1>Okay. Now run it again.

00:53:42.450 --> 00:53:44.450
<v Speaker 1>See, it now winds at you.

00:53:45.170 --> 00:53:46.850
<v Speaker 1>Okay. You need to make sure

00:53:47.170 --> 00:53:49.330
<v Speaker 1>check which files have been created because I

00:53:49.330 --> 00:53:50.609
<v Speaker 1>think it has created two files.

00:53:57.485 --> 00:53:59.965
<v Speaker 1>Nope. It's it's it has overwritten. It's okay.

00:53:59.965 --> 00:54:00.605
<v Speaker 1>I just

00:54:01.805 --> 00:54:04.205
<v Speaker 0>It is it must be good. Yep. So

00:54:04.205 --> 00:54:05.805
<v Speaker 1>open it up, and we'll see again.

00:54:15.059 --> 00:54:16.420
<v Speaker 1>So what's happened now?

00:54:19.700 --> 00:54:21.380
<v Speaker 1>So here's something

00:54:21.460 --> 00:54:22.420
<v Speaker 0>here, but

00:54:22.980 --> 00:54:25.220
<v Speaker 0>it's changed the paths a little bit. Yeah.

00:54:25.220 --> 00:54:27.140
<v Speaker 1>Click on main because it doesn't have a

00:54:27.140 --> 00:54:28.420
<v Speaker 1>function selected at the moment.

00:54:29.915 --> 00:54:32.315
<v Speaker 0>Oh, there we go. There we It's just

00:54:32.315 --> 00:54:34.395
<v Speaker 1>stuck. It's stuck it's got stuck somewhere, and

00:54:34.395 --> 00:54:35.515
<v Speaker 1>I don't remember where.

00:54:36.075 --> 00:54:36.955
<v Speaker 1>And now

00:54:37.515 --> 00:54:39.995
<v Speaker 1>you actually got some interesting information. Right?

00:54:40.315 --> 00:54:43.530
<v Speaker 0>Yeah. This this tree is much larger. The

00:54:43.530 --> 00:54:45.610
<v Speaker 1>tree is longer. Yes. And if you go

00:54:45.610 --> 00:54:46.730
<v Speaker 1>down a little bit

00:54:48.410 --> 00:54:50.650
<v Speaker 1>so there, you see the cycle thing in

00:54:50.650 --> 00:54:52.730
<v Speaker 1>there on the left hand side? Just yeah.

00:54:52.730 --> 00:54:54.250
<v Speaker 1>It's just behind your

00:54:55.625 --> 00:54:57.705
<v Speaker 1>see there? The cycle six where it says

00:54:57.705 --> 00:54:59.945
<v Speaker 1>that? Yep. Got it. So that is your

00:54:59.945 --> 00:55:00.665
<v Speaker 1>likely

00:55:02.665 --> 00:55:05.225
<v Speaker 1>although I don't know composer code where it

00:55:05.225 --> 00:55:07.145
<v Speaker 1>does the recursive loading of stuff.

00:55:08.420 --> 00:55:10.580
<v Speaker 1>So there is some weird things in there

00:55:10.580 --> 00:55:11.940
<v Speaker 1>that I don't know how it does.

00:55:13.140 --> 00:55:15.940
<v Speaker 1>But the branch point where it goes from

00:55:15.940 --> 00:55:17.300
<v Speaker 1>one to three

00:55:19.060 --> 00:55:20.580
<v Speaker 1>so if you go up a little bit

00:55:20.580 --> 00:55:23.565
<v Speaker 1>in the in the tree, just scroll down

00:55:23.565 --> 00:55:25.085
<v Speaker 1>here. So the do run

00:55:25.325 --> 00:55:28.045
<v Speaker 1>basically calls five functions or five functions that

00:55:28.045 --> 00:55:28.845
<v Speaker 1>we can see.

00:55:29.484 --> 00:55:30.845
<v Speaker 1>One takes a third,

00:55:32.765 --> 00:55:34.605
<v Speaker 1>one takes a tenth, and one takes a

00:55:34.605 --> 00:55:35.085
<v Speaker 1>half,

00:55:35.460 --> 00:55:36.500
<v Speaker 1>approximately.

00:55:36.660 --> 00:55:38.740
<v Speaker 1>Yep. So you can see here, well, which

00:55:38.740 --> 00:55:40.180
<v Speaker 1>two things take up the most amount of

00:55:40.180 --> 00:55:41.700
<v Speaker 1>time? It's not the one in the middle.

00:55:43.060 --> 00:55:45.460
<v Speaker 1>Right? It's that's only 10%, so we're not

00:55:45.460 --> 00:55:46.100
<v Speaker 1>interested in that.

00:55:47.325 --> 00:55:48.765
<v Speaker 1>But the thing that takes the most amount

00:55:48.765 --> 00:55:50.445
<v Speaker 1>of time is the 52%

00:55:50.445 --> 00:55:51.085
<v Speaker 1>here.

00:55:51.484 --> 00:55:53.725
<v Speaker 0>Yeah. Let's say it here. Yeah.

00:55:53.885 --> 00:55:54.525
<v Speaker 1>So

00:55:54.925 --> 00:55:57.484
<v Speaker 1>well, if you want to inspect that branch,

00:55:57.484 --> 00:55:59.325
<v Speaker 1>double click on what it says there on

00:55:59.325 --> 00:55:59.885
<v Speaker 1>the to run.

00:56:03.680 --> 00:56:05.599
<v Speaker 1>And then you get to three further down.

00:56:05.599 --> 00:56:07.840
<v Speaker 1>So the thickest line is always your slow

00:56:07.840 --> 00:56:08.480
<v Speaker 1>path.

00:56:10.400 --> 00:56:12.080
<v Speaker 0>Okay. So the the thickness of the line

00:56:12.080 --> 00:56:14.560
<v Speaker 0>correlates to how much of the CPU cycles

00:56:14.560 --> 00:56:15.040
<v Speaker 0>that

00:56:15.485 --> 00:56:18.845
<v Speaker 0>execution took? Right. Okay. Yeah. Pretty much.

00:56:19.245 --> 00:56:21.165
<v Speaker 1>And, yeah, well, let's go down and see

00:56:21.165 --> 00:56:22.125
<v Speaker 1>where it ends up.

00:56:25.005 --> 00:56:25.965
<v Speaker 1>I

00:56:25.965 --> 00:56:28.365
<v Speaker 1>don't know. Composer and so but you see

00:56:28.365 --> 00:56:30.285
<v Speaker 1>this the solver. That's basically what I was

00:56:30.285 --> 00:56:32.010
<v Speaker 1>trying to get at. Yeah. So we come

00:56:32.010 --> 00:56:33.690
<v Speaker 0>down to do install, and then there's quite

00:56:33.690 --> 00:56:36.090
<v Speaker 0>a hefty split where we go 6%

00:56:36.090 --> 00:56:38.090
<v Speaker 0>down the right hand path. And on the

00:56:38.090 --> 00:56:40.250
<v Speaker 0>left hand path, we're at 35%

00:56:40.410 --> 00:56:43.610
<v Speaker 0>where the majority of that is 20%

00:56:43.610 --> 00:56:46.170
<v Speaker 0>of some sort of dependency resolver

00:56:46.494 --> 00:56:47.455
<v Speaker 0>rules.

00:56:47.695 --> 00:56:49.855
<v Speaker 1>Yep. And then we have quite an even

00:56:49.855 --> 00:56:52.895
<v Speaker 0>distribution across the next four calls,

00:56:53.055 --> 00:56:54.895
<v Speaker 0>kind of four to 5% each.

00:56:55.535 --> 00:56:58.095
<v Speaker 1>Yep. That's basically what it says. So there's

00:56:58.095 --> 00:57:00.255
<v Speaker 1>probably not much that can be optimized here

00:57:01.450 --> 00:57:03.770
<v Speaker 1>because they they know what they've been doing

00:57:03.770 --> 00:57:04.330
<v Speaker 1>there.

00:57:04.810 --> 00:57:07.450
<v Speaker 1>Because this recursive code is so critical to

00:57:07.450 --> 00:57:09.610
<v Speaker 1>composer, they spend a lot of time optimizing

00:57:09.610 --> 00:57:10.250
<v Speaker 1>that.

00:57:10.410 --> 00:57:12.250
<v Speaker 1>So I think we struggle

00:57:12.570 --> 00:57:14.490
<v Speaker 1>finding a performance bottleneck in it.

00:57:15.555 --> 00:57:17.234
<v Speaker 0>So True. But we do have a very

00:57:17.234 --> 00:57:19.795
<v Speaker 0>nice way to to Exactly. Maximize that. It's

00:57:19.795 --> 00:57:21.555
<v Speaker 0>like, you know, we can kind of see

00:57:21.555 --> 00:57:23.555
<v Speaker 0>that call graph and and see where the

00:57:23.555 --> 00:57:25.875
<v Speaker 0>time is being spent, which is really interesting.

00:57:25.875 --> 00:57:27.795
<v Speaker 1>Exactly. So what I would recommend that we

00:57:27.795 --> 00:57:29.840
<v Speaker 1>do now is we double click on this

00:57:29.840 --> 00:57:32.720
<v Speaker 1>compose the dependence and resolve resolver solve to

00:57:33.120 --> 00:57:35.840
<v Speaker 1>make that our our current note. Yeah.

00:57:36.560 --> 00:57:39.360
<v Speaker 1>That one. And now we just leave this.

00:57:39.360 --> 00:57:41.040
<v Speaker 1>Don't click on anything else. Just close q

00:57:41.040 --> 00:57:41.520
<v Speaker 1>cache brand.

00:57:42.595 --> 00:57:44.595
<v Speaker 0>Close it? Yep.

00:57:47.075 --> 00:57:48.835
<v Speaker 1>Okay. And now let's go to your more

00:57:48.835 --> 00:57:50.115
<v Speaker 1>complicated example.

00:57:52.435 --> 00:57:53.155
<v Speaker 0>Okay.

00:57:54.115 --> 00:57:56.515
<v Speaker 0>So we also The reason why I said

00:57:56.515 --> 00:57:58.490
<v Speaker 1>don't click on anything is because it remembers

00:57:58.490 --> 00:58:00.090
<v Speaker 1>the function that you have selected.

00:58:00.490 --> 00:58:02.410
<v Speaker 1>So that allows us to compare between the

00:58:02.410 --> 00:58:03.210
<v Speaker 1>two files.

00:58:03.930 --> 00:58:04.730
<v Speaker 0>Okay.

00:58:04.730 --> 00:58:05.930
<v Speaker 0>So from here,

00:58:06.650 --> 00:58:08.810
<v Speaker 0>let me just make sure I definitely remove

00:58:08.810 --> 00:58:10.569
<v Speaker 0>it. So there's no lock fail here, which

00:58:10.569 --> 00:58:11.130
<v Speaker 0>means

00:58:11.475 --> 00:58:13.955
<v Speaker 0>it's gonna have to build a dependency graph.

00:58:14.835 --> 00:58:16.275
<v Speaker 1>Well, it needs to do that any case

00:58:16.275 --> 00:58:18.195
<v Speaker 1>if you type composer update.

00:58:22.675 --> 00:58:24.035
<v Speaker 1>What I don't want to do is have

00:58:24.035 --> 00:58:24.995
<v Speaker 1>this guy on it.

00:58:26.579 --> 00:58:29.299
<v Speaker 0>You're running composer of xdebug enabled. This has

00:58:29.299 --> 00:58:31.300
<v Speaker 0>a major impact on run time performance.

00:58:32.660 --> 00:58:33.540
<v Speaker 1>Thus.

00:58:34.260 --> 00:58:36.980
<v Speaker 0>So this is a pretty large composer.

00:58:36.980 --> 00:58:38.420
<v Speaker 0>This is the project.

00:58:39.494 --> 00:58:42.375
<v Speaker 1>Yeah. Just show the composer dot JSON.

00:58:45.734 --> 00:58:47.815
<v Speaker 0>Line 28 down to

00:58:49.815 --> 00:58:51.895
<v Speaker 0>a hundred And, of course, and, of course,

00:58:51.895 --> 00:58:53.575
<v Speaker 1>all of these will have their own dependencies

00:58:53.575 --> 00:58:57.059
<v Speaker 1>again too. Exactly. Yeah. A lot of Symphony

00:58:57.059 --> 00:58:59.619
<v Speaker 0>stuff here, which is gonna have complicated dependency

00:58:59.619 --> 00:59:02.500
<v Speaker 0>trees and doctrine as well, database stuff, I

00:59:02.500 --> 00:59:04.099
<v Speaker 0>guess, is gonna rich. Okay. So

00:59:05.140 --> 00:59:07.365
<v Speaker 1>No. This is a more typical thing that

00:59:07.445 --> 00:59:09.685
<v Speaker 1>yeah. It takes ages with x with with

00:59:09.685 --> 00:59:11.045
<v Speaker 1>xdebug enabled.

00:59:12.245 --> 00:59:14.565
<v Speaker 0>So let's take a minute without xdebug.

00:59:14.565 --> 00:59:16.485
<v Speaker 0>We're in for the long haul here. Right?

00:59:18.645 --> 00:59:20.165
<v Speaker 0>Yes. Take a time for people to get

00:59:20.165 --> 00:59:21.810
<v Speaker 0>some questions and if there's anything they want

00:59:21.810 --> 00:59:23.490
<v Speaker 0>us to cover over there.

00:59:23.730 --> 00:59:25.410
<v Speaker 1>Or, alternatively,

00:59:25.810 --> 00:59:28.050
<v Speaker 1>xdebug three that I'm working on

00:59:28.530 --> 00:59:30.530
<v Speaker 1>will speed us up dramatically.

00:59:31.890 --> 00:59:33.810
<v Speaker 1>But I wouldn't suggest we install that right

00:59:33.810 --> 00:59:34.290
<v Speaker 1>now.

00:59:34.930 --> 00:59:37.055
<v Speaker 0>So what's different than xdebug three that gives

00:59:37.055 --> 00:59:38.734
<v Speaker 0>it the performance performance

00:59:38.734 --> 00:59:39.615
<v Speaker 0>benefits?

00:59:39.934 --> 00:59:42.494
<v Speaker 1>Because it is much more clever on when

00:59:42.494 --> 00:59:45.455
<v Speaker 1>and what when and what it turns on.

00:59:46.734 --> 00:59:48.655
<v Speaker 1>And there are some algorithms

00:59:48.655 --> 00:59:50.760
<v Speaker 1>in there, especially that have to do with

00:59:50.760 --> 00:59:51.880
<v Speaker 1>the stack

00:59:52.280 --> 00:59:53.800
<v Speaker 1>that are a lot more

00:59:55.320 --> 00:59:57.560
<v Speaker 1>are a lot better with allocating memory.

00:59:57.640 --> 00:59:59.400
<v Speaker 1>So what xdebug two does for every time

00:59:59.400 --> 01:00:01.560
<v Speaker 1>a function is called, it creates this memory

01:00:01.560 --> 01:00:01.960
<v Speaker 1>structure,

01:00:03.085 --> 01:00:03.725
<v Speaker 1>which

01:00:03.885 --> 01:00:05.885
<v Speaker 1>has the function name in it, where it

01:00:05.885 --> 01:00:07.485
<v Speaker 1>is called from arguments,

01:00:07.485 --> 01:00:08.685
<v Speaker 1>and so on and so on. And that

01:00:08.685 --> 01:00:09.405
<v Speaker 1>structure

01:00:09.725 --> 01:00:10.845
<v Speaker 1>is pretty big.

01:00:11.645 --> 01:00:13.085
<v Speaker 1>At the end of the function,

01:00:13.325 --> 01:00:14.445
<v Speaker 1>this memory is freed.

01:00:16.040 --> 01:00:18.040
<v Speaker 1>When the next function is called, it's created

01:00:18.040 --> 01:00:20.119
<v Speaker 1>again, and it is freed again. Now if

01:00:20.119 --> 01:00:22.280
<v Speaker 1>you do this two times, that's fine. But

01:00:22.440 --> 01:00:23.400
<v Speaker 1>typical

01:00:23.560 --> 01:00:24.360
<v Speaker 1>bigger

01:00:24.440 --> 01:00:26.359
<v Speaker 1>applications like Composer,

01:00:26.359 --> 01:00:28.600
<v Speaker 1>this will happen hundreds of thousands of times.

01:00:29.815 --> 01:00:32.455
<v Speaker 1>Now what xebit three does, it's instead of

01:00:32.855 --> 01:00:35.415
<v Speaker 1>allocating and freeing it every time, it basically

01:00:35.415 --> 01:00:38.295
<v Speaker 1>has a continuous set of memory allocated

01:00:39.255 --> 01:00:41.015
<v Speaker 0>Like a ring and will reuse

01:00:41.335 --> 01:00:42.535
<v Speaker 1>it instead of freeing it.

01:00:43.200 --> 01:00:45.440
<v Speaker 1>So it will detect when it doesn't have

01:00:45.440 --> 01:00:48.160
<v Speaker 1>enough memory allocated and will allocate a chunk

01:00:48.160 --> 01:00:50.160
<v Speaker 1>more, but it doesn't free it until the

01:00:50.160 --> 01:00:51.040
<v Speaker 1>script ends.

01:00:52.160 --> 01:00:53.360
<v Speaker 1>Ah, okay.

01:00:53.839 --> 01:00:56.079
<v Speaker 1>So, potentially, it uses more memory, but it

01:00:56.079 --> 01:00:57.440
<v Speaker 1>is significantly faster.

01:00:59.395 --> 01:01:01.155
<v Speaker 0>Cool. Very cool.

01:01:01.315 --> 01:01:03.475
<v Speaker 0>I'm waiting for people to expect xdebug three

01:01:03.475 --> 01:01:04.355
<v Speaker 0>to be

01:01:05.635 --> 01:01:06.915
<v Speaker 0>be stable,

01:01:06.915 --> 01:01:08.115
<v Speaker 0>considerable, usable.

01:01:09.395 --> 01:01:10.995
<v Speaker 1>Well, I use it all the time. I

01:01:10.995 --> 01:01:12.755
<v Speaker 1>think it well, the test passed, so I

01:01:12.755 --> 01:01:13.875
<v Speaker 1>guess that makes it stable.

01:01:15.670 --> 01:01:18.150
<v Speaker 1>But I'd I would like to create, like,

01:01:18.150 --> 01:01:20.070
<v Speaker 1>a a tech preview release

01:01:20.310 --> 01:01:22.550
<v Speaker 1>once I've made all the breaking changes in

01:01:22.550 --> 01:01:23.030
<v Speaker 1>it

01:01:23.990 --> 01:01:26.950
<v Speaker 1>because lots of names of settings change and

01:01:26.950 --> 01:01:28.310
<v Speaker 1>things like that to make it easier to

01:01:28.310 --> 01:01:30.674
<v Speaker 1>use and not having to remember all 70

01:01:30.674 --> 01:01:32.435
<v Speaker 1>different settings that we have.

01:01:33.234 --> 01:01:33.875
<v Speaker 1>And

01:01:34.755 --> 01:01:35.635
<v Speaker 1>yeah. So

01:01:35.954 --> 01:01:37.954
<v Speaker 1>the idea is that there will at least

01:01:37.954 --> 01:01:39.954
<v Speaker 1>be a release candidate when PHP eight comes

01:01:39.954 --> 01:01:40.435
<v Speaker 1>out

01:01:40.755 --> 01:01:43.795
<v Speaker 1>and hopefully a final release soon after that.

01:01:45.340 --> 01:01:47.020
<v Speaker 1>But and that is November.

01:01:47.020 --> 01:01:48.860
<v Speaker 1>That's that's how things stand now.

01:01:49.740 --> 01:01:51.020
<v Speaker 1>But if you want to play with it,

01:01:51.020 --> 01:01:52.780
<v Speaker 1>some GitHub should work.

01:01:53.020 --> 01:01:54.860
<v Speaker 1>But please read the upgrade guide

01:01:56.619 --> 01:01:57.900
<v Speaker 1>because things have changed.

01:01:59.714 --> 01:02:00.515
<v Speaker 0>Definitely.

01:02:01.875 --> 01:02:03.875
<v Speaker 1>So does that clear question or was it

01:02:03.875 --> 01:02:04.515
<v Speaker 1>a comment?

01:02:04.994 --> 01:02:06.914
<v Speaker 0>It it's a comment to say thank you

01:02:06.914 --> 01:02:09.635
<v Speaker 0>for xdebug three. Well, you are welcome.

01:02:10.869 --> 01:02:12.470
<v Speaker 0>Yeah. You know, I think a lot of

01:02:12.470 --> 01:02:14.150
<v Speaker 0>people get a lot of you know, xdebug

01:02:14.150 --> 01:02:15.670
<v Speaker 0>is one of those tools that just becomes

01:02:15.670 --> 01:02:18.390
<v Speaker 0>invaluable once you understand the basics and and

01:02:18.390 --> 01:02:19.270
<v Speaker 0>how it works.

01:02:19.590 --> 01:02:21.590
<v Speaker 0>Profile in general, you know, xdebug is a

01:02:21.590 --> 01:02:23.030
<v Speaker 0>profiler for PHP. So

01:02:23.655 --> 01:02:25.655
<v Speaker 1>Well, I think most people don't use it

01:02:25.655 --> 01:02:27.415
<v Speaker 1>as a profile, but as it's as it's

01:02:27.575 --> 01:02:29.415
<v Speaker 1>as a step debugger, but yeah.

01:02:30.695 --> 01:02:32.855
<v Speaker 0>Yeah. I guess maybe it's it's just where

01:02:32.855 --> 01:02:34.135
<v Speaker 0>my head is at. You know?

01:02:35.100 --> 01:02:37.100
<v Speaker 0>I I I I I see the value

01:02:37.100 --> 01:02:39.180
<v Speaker 0>in profile, and I think it's invaluable for

01:02:39.180 --> 01:02:41.100
<v Speaker 0>any code you have in production. You know,

01:02:41.100 --> 01:02:42.540
<v Speaker 0>you need to know how it behaves in

01:02:42.540 --> 01:02:44.940
<v Speaker 0>that environment and profiling it and and understanding

01:02:44.940 --> 01:02:47.740
<v Speaker 0>it. Extract metrics from it, doesn't heat grass,

01:02:47.740 --> 01:02:49.820
<v Speaker 0>flame grass, all these things. Like, there's just

01:02:49.820 --> 01:02:52.115
<v Speaker 0>so much you can do with this stuff

01:02:52.595 --> 01:02:54.515
<v Speaker 0>to really understand your application.

01:02:54.835 --> 01:02:57.875
<v Speaker 1>Yeah. Then again, xdebug's profile is not meant

01:02:57.875 --> 01:02:59.875
<v Speaker 1>to run-in a production environment

01:03:00.195 --> 01:03:02.355
<v Speaker 1>because it's meant to run a development environment

01:03:02.355 --> 01:03:04.994
<v Speaker 1>like we're doing now because it well,

01:03:05.950 --> 01:03:08.510
<v Speaker 1>I said has too much overhead or maybe

01:03:08.510 --> 01:03:10.350
<v Speaker 1>had too much overhead because

01:03:11.070 --> 01:03:12.590
<v Speaker 1>with xdebug tree, you would be able to

01:03:12.590 --> 01:03:14.590
<v Speaker 1>selectively turn it on for just a single

01:03:14.590 --> 01:03:15.230
<v Speaker 1>request.

01:03:15.790 --> 01:03:17.550
<v Speaker 0>That's why I could do sampling in my

01:03:17.550 --> 01:03:20.775
<v Speaker 0>production environment then. Yeah. Well, it's not quite

01:03:20.775 --> 01:03:21.815
<v Speaker 1>that easy, but it

01:03:22.375 --> 01:03:24.695
<v Speaker 1>as long as you don't enable any features,

01:03:24.695 --> 01:03:25.815
<v Speaker 1>it doesn't slow anything

01:03:26.455 --> 01:03:28.295
<v Speaker 1>down beyond, like, a few percent.

01:03:28.535 --> 01:03:30.615
<v Speaker 1>But if you want to to do, like,

01:03:30.615 --> 01:03:33.494
<v Speaker 1>real time application performance monitoring, which is basically

01:03:33.494 --> 01:03:35.470
<v Speaker 1>what you're getting at the moment, xdebug is

01:03:35.470 --> 01:03:37.790
<v Speaker 1>not made for that. Okay. It is it's

01:03:37.790 --> 01:03:40.510
<v Speaker 1>more more for developers trying to find performance

01:03:40.510 --> 01:03:41.230
<v Speaker 1>bottlenecks

01:03:41.950 --> 01:03:45.070
<v Speaker 1>in a normal situation and not depending on

01:03:45.070 --> 01:03:47.470
<v Speaker 1>how your system is doing at the moment.

01:03:47.950 --> 01:03:48.910
<v Speaker 1>Ah, okay.

01:03:49.505 --> 01:03:51.825
<v Speaker 1>I understand. Robert's

01:03:52.625 --> 01:03:55.425
<v Speaker 1>on a on a chat's having an interesting

01:03:55.425 --> 01:03:57.265
<v Speaker 1>comment, and I agree with him.

01:03:58.705 --> 01:04:00.065
<v Speaker 0>Which comment? Sorry.

01:04:00.385 --> 01:04:02.465
<v Speaker 1>He says, can you run htop in the

01:04:02.465 --> 01:04:04.305
<v Speaker 1>background so we see the numb the numbers

01:04:04.305 --> 01:04:07.090
<v Speaker 1>jumping around and and not that composer's just

01:04:07.090 --> 01:04:07.730
<v Speaker 1>frozen?

01:04:08.370 --> 01:04:11.650
<v Speaker 0>Oh, so, apparently, you're getting comments much much

01:04:12.050 --> 01:04:13.890
<v Speaker 0>faster than I am because it's only just

01:04:13.890 --> 01:04:16.050
<v Speaker 0>popped in here now. So, yeah, can I

01:04:16.050 --> 01:04:17.570
<v Speaker 0>run htop in the background so we can

01:04:17.570 --> 01:04:18.130
<v Speaker 0>play it? Yeah.

01:04:18.954 --> 01:04:19.355
<v Speaker 1>Where

01:04:19.835 --> 01:04:21.915
<v Speaker 1>I'm just following the YouTube stream on my

01:04:21.915 --> 01:04:22.875
<v Speaker 1>other screen.

01:04:23.115 --> 01:04:24.635
<v Speaker 1>So I see the the text the moment

01:04:24.635 --> 01:04:25.515
<v Speaker 1>I type it.

01:04:26.714 --> 01:04:28.875
<v Speaker 0>Yeah. I've got it coming through the the

01:04:28.875 --> 01:04:31.515
<v Speaker 0>streaming software that we use. I think it's

01:04:30.720 --> 01:04:32.560
<v Speaker 0>a little bit of latency, but hopefully not

01:04:32.560 --> 01:04:34.000
<v Speaker 0>too bad. So and I bet you by

01:04:34.000 --> 01:04:36.000
<v Speaker 0>the time I brew install htop,

01:04:36.000 --> 01:04:38.720
<v Speaker 0>it's probably gonna finish up. Oh, yeah.

01:04:39.200 --> 01:04:40.480
<v Speaker 0>I'll do my best.

01:04:44.240 --> 01:04:44.880
<v Speaker 1>Come on, bro.

01:04:48.855 --> 01:04:51.255
<v Speaker 0>Take that away. Know how to pronounce that

01:04:51.255 --> 01:04:51.815
<v Speaker 1>surname.

01:04:58.869 --> 01:05:00.630
<v Speaker 1>I mean, if you don't have htop, you

01:05:00.630 --> 01:05:02.230
<v Speaker 1>can just try top instead.

01:05:04.630 --> 01:05:06.310
<v Speaker 0>We'll get a nice color. So

01:05:07.030 --> 01:05:08.070
<v Speaker 1>That's true.

01:05:09.510 --> 01:05:11.109
<v Speaker 0>Yeah. And I'll probably wanna run it on

01:05:11.109 --> 01:05:11.750
<v Speaker 0>a full screen.

01:05:12.805 --> 01:05:13.925
<v Speaker 1>It's pretty. Yeah.

01:05:19.925 --> 01:05:20.805
<v Speaker 1>Sorted.

01:05:21.845 --> 01:05:24.405
<v Speaker 1>So PHP uses 98%

01:05:24.405 --> 01:05:25.205
<v Speaker 1>support line.

01:05:26.790 --> 01:05:29.430
<v Speaker 1>Firefox uses a 30%, but oh, this probably

01:05:29.430 --> 01:05:32.070
<v Speaker 1>because there's other video for you. Right? Yeah.

01:05:32.230 --> 01:05:33.590
<v Speaker 1>Okay. That makes sense.

01:05:35.270 --> 01:05:37.190
<v Speaker 1>I haven't looked at normal top for ages

01:05:37.190 --> 01:05:38.630
<v Speaker 1>because I always use htop.

01:05:40.155 --> 01:05:43.035
<v Speaker 0>Htop is taking its its sweet time. So

01:05:43.115 --> 01:05:45.275
<v Speaker 0>oh, there we go. Let's drop

01:05:45.275 --> 01:05:45.915
<v Speaker 0>out.

01:05:46.395 --> 01:05:48.795
<v Speaker 0>There we go. It's much prettier, isn't it?

01:05:48.955 --> 01:05:49.515
<v Speaker 1>It is.

01:05:52.809 --> 01:05:53.930
<v Speaker 1>Yep. But

01:05:54.250 --> 01:05:56.329
<v Speaker 1>yes. Can I filter an h shop? I'm

01:05:56.329 --> 01:05:57.770
<v Speaker 0>not I'm not that familiar with visual. Can

01:05:57.770 --> 01:05:59.050
<v Speaker 0>I filter yeah? Well,

01:05:59.770 --> 01:06:02.010
<v Speaker 1>f four. Yeah. I how

01:06:02.490 --> 01:06:04.970
<v Speaker 1>do you type f four into terminal window?

01:06:05.369 --> 01:06:05.849
<v Speaker 1>Yeah. Okay.

01:06:07.635 --> 01:06:09.635
<v Speaker 0>And now we're just looking at PHP stuff,

01:06:09.635 --> 01:06:11.155
<v Speaker 0>and we can see composer.

01:06:11.635 --> 01:06:13.795
<v Speaker 0>It's quite good on the memory consumption. You

01:06:13.795 --> 01:06:15.235
<v Speaker 0>know, we're setting a 2.5%

01:06:15.235 --> 01:06:16.755
<v Speaker 0>there. The CP is

01:06:17.235 --> 01:06:19.155
<v Speaker 0>is obviously doing a lot of computation there.

01:06:19.590 --> 01:06:21.110
<v Speaker 1>Well, it would be nice if it could

01:06:21.110 --> 01:06:23.430
<v Speaker 1>use all 16 of your course.

01:06:24.550 --> 01:06:26.630
<v Speaker 0>I've heard a rumor that potentially,

01:06:26.630 --> 01:06:27.670
<v Speaker 0>compulsive two

01:06:27.910 --> 01:06:31.350
<v Speaker 0>has concurrency slash parallel support. Is that right?

01:06:31.350 --> 01:06:33.684
<v Speaker 1>Okay. I don't I don't know, actually. Yeah.

01:06:33.684 --> 01:06:35.125
<v Speaker 0>People are like I've done a couple of

01:06:35.125 --> 01:06:38.085
<v Speaker 0>streams now on PHP technology. Mostly around containers.

01:06:38.085 --> 01:06:39.924
<v Speaker 0>And the last few times, people have been

01:06:39.924 --> 01:06:41.204
<v Speaker 0>like, oh, you have to use composer too

01:06:41.204 --> 01:06:43.365
<v Speaker 0>because it does all the downloading in parallel,

01:06:43.365 --> 01:06:45.285
<v Speaker 0>which I'm assuming means that that spends up

01:06:45.285 --> 01:06:47.685
<v Speaker 0>a thread per core and has them doing

01:06:47.765 --> 01:06:48.405
<v Speaker 0>the dependencies.

01:06:49.299 --> 01:06:52.019
<v Speaker 1>But it is the downloading of files. It's

01:06:52.019 --> 01:06:54.339
<v Speaker 1>the IO, the disk IO, the network IO

01:06:54.339 --> 01:06:56.260
<v Speaker 1>that is parallelized is not the solver.

01:06:56.660 --> 01:06:58.819
<v Speaker 1>I don't think the set algorithm can be

01:06:58.819 --> 01:06:59.700
<v Speaker 1>parallelized.

01:06:59.859 --> 01:07:01.380
<v Speaker 0>Yeah. I don't think you'd be able to

01:07:01.380 --> 01:07:03.115
<v Speaker 0>break that up.

01:07:03.275 --> 01:07:05.275
<v Speaker 0>That would be very complicated. You'd like if

01:07:05.275 --> 01:07:06.875
<v Speaker 0>private well, you just have to map register

01:07:06.875 --> 01:07:09.835
<v Speaker 0>solver. That would be crazy. Yeah. But

01:07:10.795 --> 01:07:14.555
<v Speaker 1>because it's recursive, you can't, I think. Good

01:07:14.555 --> 01:07:14.875
<v Speaker 0>point.

01:07:16.720 --> 01:07:18.080
<v Speaker 0>Do you want to see how big the

01:07:18.080 --> 01:07:20.160
<v Speaker 1>the cache client files get cutting?

01:07:20.880 --> 01:07:22.640
<v Speaker 1>I don't think you want to. I'm not

01:07:22.640 --> 01:07:24.160
<v Speaker 0>sure I do. Yeah. That's what I was

01:07:24.160 --> 01:07:26.640
<v Speaker 0>gonna say. Why don't we run a watch?

01:07:27.280 --> 01:07:29.040
<v Speaker 0>If you don't I don't have a watch.

01:07:29.040 --> 01:07:31.945
<v Speaker 0>What kind of machine is this? Okay.

01:07:32.825 --> 01:07:33.865
<v Speaker 1>It's yours.

01:07:36.185 --> 01:07:37.305
<v Speaker 0>Oh, dear.

01:07:39.945 --> 01:07:41.625
<v Speaker 1>Don't open the file in FIM.

01:07:44.910 --> 01:07:47.070
<v Speaker 1>See, this is the thing. Right? Those files

01:07:47.070 --> 01:07:49.230
<v Speaker 1>can get big.

01:07:50.109 --> 01:07:50.830
<v Speaker 1>The

01:07:51.310 --> 01:07:52.350
<v Speaker 1>thing is that

01:07:53.710 --> 01:07:54.990
<v Speaker 1>q cache client

01:07:56.175 --> 01:07:59.295
<v Speaker 1>actually sup supports g zed compressed files,

01:08:00.335 --> 01:08:02.255
<v Speaker 1>but xdebug doesn't do so yet.

01:08:02.575 --> 01:08:04.575
<v Speaker 1>Actually, I don't think I have a ticket

01:08:04.575 --> 01:08:06.495
<v Speaker 1>for that. Let me

01:08:07.055 --> 01:08:08.895
<v Speaker 1>let me add check that.

01:08:25.735 --> 01:08:27.015
<v Speaker 0>Let's see if it's still

01:08:27.655 --> 01:08:30.135
<v Speaker 0>I mean, I'm assuming the reset that it's

01:08:30.135 --> 01:08:32.375
<v Speaker 0>still CPU bound right now means that it's

01:08:32.375 --> 01:08:34.055
<v Speaker 0>still on the software stage rather than the

01:08:34.055 --> 01:08:35.175
<v Speaker 0>download stage.

01:08:35.575 --> 01:08:36.615
<v Speaker 1>Yes. Absolutely.

01:08:39.109 --> 01:08:41.510
<v Speaker 1>Considering it's not going to download any files

01:08:41.750 --> 01:08:44.630
<v Speaker 1>because it's in your cache. Hoping so.

01:08:44.949 --> 01:08:47.750
<v Speaker 1>But it should be in your cache because

01:08:47.750 --> 01:08:48.869
<v Speaker 1>you ran it before.

01:08:49.189 --> 01:08:50.389
<v Speaker 0>It's it's the

01:08:51.325 --> 01:08:54.845
<v Speaker 0>2.3 k, counting. CPU is still burned, running

01:08:54.845 --> 01:08:55.885
<v Speaker 0>for ten minutes.

01:08:57.564 --> 01:08:58.444
<v Speaker 1>Wow.

01:09:00.045 --> 01:09:02.845
<v Speaker 1>Yeah. This takes ages. Right? I really I

01:09:02.845 --> 01:09:04.925
<v Speaker 1>really want to see how fast xdebug three

01:09:04.925 --> 01:09:05.325
<v Speaker 1>is now.

01:09:06.760 --> 01:09:08.920
<v Speaker 1>I think it'd be a good experiment. Oh,

01:09:10.280 --> 01:09:12.280
<v Speaker 0>yeah. Definitely. We get to see the improvements

01:09:12.280 --> 01:09:13.800
<v Speaker 0>there. I may do that in my my

01:09:13.800 --> 01:09:17.640
<v Speaker 0>spare time this week. Just to absolute curiosity,

01:09:17.640 --> 01:09:17.800
<v Speaker 0>man.

01:09:21.685 --> 01:09:24.724
<v Speaker 1>I think it'd be faster to compile xdebug

01:09:24.885 --> 01:09:26.885
<v Speaker 1>and run it again than waiting for this

01:09:26.885 --> 01:09:27.604
<v Speaker 1>to get finished.

01:09:34.550 --> 01:09:37.429
<v Speaker 0>I just yeah. I can go to xdebug.

01:09:37.510 --> 01:09:39.189
<v Speaker 0>I mean, we've got time.

01:09:40.149 --> 01:09:43.269
<v Speaker 1>Yep. We have, well, another twenty minutes. Yep.

01:09:45.590 --> 01:09:48.309
<v Speaker 0>That was I wanted to search GitHub.

01:09:50.814 --> 01:09:52.334
<v Speaker 1>What are you doing now?

01:09:53.295 --> 01:09:55.135
<v Speaker 0>With the Chrome xdebug,

01:09:55.135 --> 01:09:56.735
<v Speaker 0>but I'm sure the minute I get over

01:09:56.735 --> 01:09:57.775
<v Speaker 0>to my terminal

01:09:59.775 --> 01:10:00.334
<v Speaker 0>now

01:10:00.655 --> 01:10:01.375
<v Speaker 0>Just go finish.

01:10:02.410 --> 01:10:04.970
<v Speaker 1>No. No. No. About finish. Just open another

01:10:04.970 --> 01:10:06.409
<v Speaker 1>terminal. We'll be fine.

01:10:09.690 --> 01:10:11.369
<v Speaker 1>Did it change things again?

01:10:12.250 --> 01:10:13.449
<v Speaker 0>Yeah. Oh.

01:10:16.010 --> 01:10:16.570
<v Speaker 1>There we go.

01:10:17.915 --> 01:10:20.155
<v Speaker 0>That's an annoying bug. Okay.

01:10:21.035 --> 01:10:22.954
<v Speaker 0>So clone xdebug.

01:10:23.115 --> 01:10:25.355
<v Speaker 0>I need to is master okay? Do you

01:10:25.355 --> 01:10:27.035
<v Speaker 0>want me to pull a branch down? Or

01:10:27.115 --> 01:10:28.715
<v Speaker 1>No. It needs to be master.

01:10:28.955 --> 01:10:30.969
<v Speaker 0>Alright. Can I just show I haven't I

01:10:30.969 --> 01:10:32.969
<v Speaker 1>haven't gotten I can't see anything you typed

01:10:32.969 --> 01:10:33.530
<v Speaker 1>on?

01:10:37.610 --> 01:10:39.289
<v Speaker 0>Oh, that's very annoying.

01:10:42.250 --> 01:10:46.585
<v Speaker 0>I can't keep switching back. There's

01:10:46.585 --> 01:10:48.185
<v Speaker 0>no make fail. What's going on?

01:10:49.145 --> 01:10:50.585
<v Speaker 1>I can't see what you're doing, so I

01:10:50.585 --> 01:10:51.385
<v Speaker 1>can't tell.

01:10:53.145 --> 01:10:55.065
<v Speaker 1>Did you so what are the things that

01:10:55.065 --> 01:10:57.650
<v Speaker 1>you're trying to type? Now you Let's stop

01:10:57.650 --> 01:10:58.850
<v Speaker 0>the share again and I'll bring it back.

01:10:58.850 --> 01:11:01.010
<v Speaker 0>It's just, obviously, some sort of

01:11:02.130 --> 01:11:03.489
<v Speaker 0>glitchy bug happening.

01:11:05.490 --> 01:11:07.250
<v Speaker 0>Okay. So it's here screen two.

01:11:07.935 --> 01:11:08.815
<v Speaker 0>So

01:11:08.815 --> 01:11:11.215
<v Speaker 0>I I cloned it and I typed make,

01:11:11.215 --> 01:11:12.655
<v Speaker 0>but there's no make in process.

01:11:13.375 --> 01:11:14.094
<v Speaker 1>Funny.

01:11:14.895 --> 01:11:17.295
<v Speaker 1>There's this process for this. First thing to

01:11:17.295 --> 01:11:18.895
<v Speaker 1>type is PHPIs.

01:11:21.280 --> 01:11:22.800
<v Speaker 0>PHPIs?

01:11:22.960 --> 01:11:25.360
<v Speaker 0>Oh, I I zed e. Yes. Yes. It

01:11:25.360 --> 01:11:27.120
<v Speaker 1>should be with an s, but that's a

01:11:27.120 --> 01:11:28.159
<v Speaker 1>recognize.

01:11:29.440 --> 01:11:31.600
<v Speaker 1>That works? Dot slash configure.

01:11:32.635 --> 01:11:35.275
<v Speaker 1>Robert, it's not a camera output that's lagging.

01:11:35.275 --> 01:11:36.074
<v Speaker 1>It's

01:11:37.835 --> 01:11:39.355
<v Speaker 1>some graphics issue

01:11:40.555 --> 01:11:43.595
<v Speaker 1>with sharing the screen. I am running the

01:11:43.595 --> 01:11:44.315
<v Speaker 0>Pixar

01:11:44.920 --> 01:11:45.639
<v Speaker 0>pair.

01:11:45.720 --> 01:11:46.280
<v Speaker 0>So

01:11:46.600 --> 01:11:48.280
<v Speaker 1>Okay. Yeah. Potentially,

01:11:48.440 --> 01:11:49.159
<v Speaker 0>Harrison.

01:11:50.280 --> 01:11:51.400
<v Speaker 1>Did that work? Yep.

01:11:51.800 --> 01:11:53.560
<v Speaker 1>Yep. And now type make.

01:11:55.000 --> 01:11:56.120
<v Speaker 1>No. You got a warning.

01:11:58.135 --> 01:11:59.975
<v Speaker 0>Warnings are there to be ignored.

01:12:00.935 --> 01:12:01.975
<v Speaker 1>It's true.

01:12:03.095 --> 01:12:05.015
<v Speaker 1>For you. I need to fix them.

01:12:05.415 --> 01:12:07.895
<v Speaker 1>It does sometimes different compilers will give different

01:12:07.895 --> 01:12:08.295
<v Speaker 1>warnings.

01:12:09.639 --> 01:12:12.199
<v Speaker 0>I can always ask at dash w all.

01:12:12.199 --> 01:12:13.960
<v Speaker 0>Alright? That treats warnings. Is that hers, if

01:12:13.960 --> 01:12:15.079
<v Speaker 0>I remember correctly?

01:12:15.320 --> 01:12:17.000
<v Speaker 1>So the flags that I've set up for

01:12:17.000 --> 01:12:19.399
<v Speaker 1>my own compile script does actually do that.

01:12:20.039 --> 01:12:21.480
<v Speaker 1>It does w all and a whole bunch

01:12:21.480 --> 01:12:24.895
<v Speaker 1>of other things. Okay. It works. Make install.

01:12:27.535 --> 01:12:30.335
<v Speaker 0>What about our running composer process? Is that

01:12:31.614 --> 01:12:33.375
<v Speaker 0>are we You're not on Windows.

01:12:33.535 --> 01:12:34.094
<v Speaker 1>This works.

01:12:35.620 --> 01:12:38.260
<v Speaker 1>In Unix's, you can override files, and anything

01:12:38.260 --> 01:12:40.260
<v Speaker 1>that's still memory works just fine.

01:12:41.620 --> 01:12:43.940
<v Speaker 1>Can you type PHP minus v in?

01:12:45.940 --> 01:12:47.860
<v Speaker 0>Sorry. You kinda dropped that there, minus.

01:12:48.785 --> 01:12:50.705
<v Speaker 1>V for victory. Oh,

01:12:53.425 --> 01:12:54.145
<v Speaker 1>shiny.

01:12:54.545 --> 01:12:55.985
<v Speaker 1>Shiny indeed.

01:12:57.585 --> 01:12:58.865
<v Speaker 1>Now do you want to go to your

01:12:58.865 --> 01:12:59.985
<v Speaker 1>pseudo projects?

01:13:00.545 --> 01:13:01.905
<v Speaker 0>Not shiny. C two

01:13:02.540 --> 01:13:04.780
<v Speaker 0>has dropped or it had dropped drastically.

01:13:05.180 --> 01:13:07.260
<v Speaker 0>I'm assuming this is about finished.

01:13:07.580 --> 01:13:10.060
<v Speaker 1>I think it is zipping things. Yeah.

01:13:10.700 --> 01:13:11.900
<v Speaker 1>Oh, it's it's showing

01:13:12.220 --> 01:13:13.180
<v Speaker 1>showing you now. Yeah.

01:13:13.820 --> 01:13:14.140
<v Speaker 1>Okay.

01:13:14.955 --> 01:13:16.955
<v Speaker 1>Show the composer output on

01:13:17.275 --> 01:13:18.315
<v Speaker 1>your terminal.

01:13:18.795 --> 01:13:19.755
<v Speaker 1>Where did we go?

01:13:20.635 --> 01:13:21.995
<v Speaker 1>It's in the top one.

01:13:22.795 --> 01:13:25.115
<v Speaker 1>Okay. That should once this is done, we

01:13:25.115 --> 01:13:26.315
<v Speaker 1>just run it again and see how much

01:13:26.315 --> 01:13:27.835
<v Speaker 1>faster. This this took us what?

01:13:28.155 --> 01:13:28.955
<v Speaker 1>Thirteen minutes?

01:13:31.650 --> 01:13:33.650
<v Speaker 0>If I run htop again,

01:13:34.210 --> 01:13:36.770
<v Speaker 0>it's

01:13:36.770 --> 01:13:38.289
<v Speaker 0>been filter

01:13:40.050 --> 01:13:41.570
<v Speaker 0>fourteen and a half minutes.

01:13:43.425 --> 01:13:45.985
<v Speaker 0>Assuming it finishes in the next thirty seconds,

01:13:45.985 --> 01:13:47.505
<v Speaker 0>fifteen minutes, it'll take.

01:13:48.785 --> 01:13:51.665
<v Speaker 0>And our output down here is currently at

01:13:51.665 --> 01:13:52.945
<v Speaker 0>3.4 gig.

01:13:55.505 --> 01:13:56.385
<v Speaker 0>There we go.

01:13:56.705 --> 01:13:57.505
<v Speaker 0>Fifteen minutes.

01:13:58.590 --> 01:14:00.590
<v Speaker 1>Yeah. It's done, though.

01:14:01.150 --> 01:14:03.310
<v Speaker 1>Yep. K. So should I rename this file

01:14:03.310 --> 01:14:04.590
<v Speaker 0>before we run it again?

01:14:05.310 --> 01:14:06.030
<v Speaker 1>Yes.

01:14:08.590 --> 01:14:10.190
<v Speaker 1>It's a big file. Hopefully, you have enough

01:14:10.190 --> 01:14:10.830
<v Speaker 1>disk space.

01:14:13.085 --> 01:14:15.804
<v Speaker 0>It should be alright. So bar

01:14:15.965 --> 01:14:16.684
<v Speaker 0>cam

01:14:16.844 --> 01:14:19.164
<v Speaker 0>name, and I'll just actually bring it here.

01:14:20.445 --> 01:14:22.285
<v Speaker 0>Oh, why am I crashing on the anyway,

01:14:22.285 --> 01:14:23.164
<v Speaker 0>it doesn't matter.

01:14:23.725 --> 01:14:25.805
<v Speaker 0>So we wanna run composer install again. Right?

01:14:27.070 --> 01:14:28.270
<v Speaker 1>Yep. Same thing.

01:14:29.470 --> 01:14:31.390
<v Speaker 0>Yeah. What sort of bit of walk fail?

01:14:34.350 --> 01:14:35.070
<v Speaker 1>Well,

01:14:36.270 --> 01:14:37.310
<v Speaker 1>why?

01:14:37.390 --> 01:14:38.350
<v Speaker 1>Because

01:14:39.225 --> 01:14:40.665
<v Speaker 1>the first time you run it, it already

01:14:40.665 --> 01:14:41.704
<v Speaker 1>did all these things.

01:14:42.905 --> 01:14:44.985
<v Speaker 1>Then we run it with x then we

01:14:44.985 --> 01:14:46.584
<v Speaker 1>run it with compose with

01:14:46.905 --> 01:14:49.704
<v Speaker 1>compose and not disabling xdebug.

01:14:49.784 --> 01:14:51.145
<v Speaker 1>So it should be the same thing. It

01:14:51.145 --> 01:14:51.864
<v Speaker 1>should be no difference.

01:14:52.520 --> 01:14:54.360
<v Speaker 0>But the log files are now sorted. I

01:14:54.520 --> 01:14:56.680
<v Speaker 0>does that not mean it doesn't run the

01:14:56.680 --> 01:14:57.880
<v Speaker 0>solver

01:14:57.880 --> 01:14:58.519
<v Speaker 0>again?

01:14:59.800 --> 01:15:02.680
<v Speaker 1>Sorry. What? Because the log files there, it

01:15:02.680 --> 01:15:04.760
<v Speaker 0>won't run the solver again. Yeah. It's gonna

01:15:04.760 --> 01:15:07.000
<v Speaker 1>use the log file. First the first profile

01:15:07.000 --> 01:15:08.040
<v Speaker 1>that we made

01:15:10.815 --> 01:15:12.815
<v Speaker 1>Composer disabled xdebug.

01:15:13.935 --> 01:15:15.534
<v Speaker 1>Right? And then it ran.

01:15:17.455 --> 01:15:20.094
<v Speaker 1>Then we used the environment variable

01:15:20.255 --> 01:15:22.940
<v Speaker 1>to tell Composer not to disable xdebug, but

01:15:22.940 --> 01:15:25.100
<v Speaker 1>we didn't remove any any log files.

01:15:26.300 --> 01:15:28.060
<v Speaker 0>That was we the first time we ran

01:15:28.060 --> 01:15:29.820
<v Speaker 0>it was on the simple example, though. This

01:15:29.820 --> 01:15:31.500
<v Speaker 0>is the first time we've run Composer install

01:15:31.500 --> 01:15:33.660
<v Speaker 0>on this proposal this directory.

01:15:35.255 --> 01:15:36.774
<v Speaker 1>No. We've just run this.

01:15:38.135 --> 01:15:38.854
<v Speaker 1>Oh.

01:15:39.335 --> 01:15:41.255
<v Speaker 1>Oh, yes. You're right. You're right. Yes. Remove

01:15:41.255 --> 01:15:43.094
<v Speaker 1>the log file. You're absolutely right.

01:15:46.215 --> 01:15:46.375
<v Speaker 0>Sorry.

01:15:49.000 --> 01:15:49.400
<v Speaker 0>So

01:15:51.320 --> 01:15:54.040
<v Speaker 1>Okay. So once one thing that you need

01:15:54.040 --> 01:15:55.800
<v Speaker 1>to change, otherwise, it's unfair.

01:15:56.600 --> 01:15:57.239
<v Speaker 0>Mhmm.

01:15:57.880 --> 01:15:59.480
<v Speaker 1>See what it says, what the error message

01:15:59.480 --> 01:16:00.120
<v Speaker 1>says.

01:16:01.240 --> 01:16:02.920
<v Speaker 0>Has been renamed.

01:16:03.240 --> 01:16:03.640
<v Speaker 1>Yes.

01:16:04.595 --> 01:16:06.995
<v Speaker 1>So we need to change the setting in

01:16:06.995 --> 01:16:08.275
<v Speaker 1>PHP I nine.

01:16:08.755 --> 01:16:10.995
<v Speaker 0>So you want me to close this? Yeah.

01:16:10.995 --> 01:16:12.995
<v Speaker 1>Abort this, remove the log file, and then

01:16:12.995 --> 01:16:14.915
<v Speaker 1>we open PHP I nine. Remove the log

01:16:14.915 --> 01:16:16.035
<v Speaker 1>file first before we forget.

01:16:16.550 --> 01:16:19.030
<v Speaker 0>Okay. So I haven't finished resolving it, so

01:16:19.030 --> 01:16:21.030
<v Speaker 0>we're okay. So now we wanna modify

01:16:23.430 --> 01:16:24.230
<v Speaker 0>this.

01:16:26.310 --> 01:16:29.590
<v Speaker 1>So instead of profile enable, it is xdebug

01:16:29.590 --> 01:16:30.230
<v Speaker 1>dot mode.

01:16:31.975 --> 01:16:33.335
<v Speaker 1>You can just leave this in there. It

01:16:33.335 --> 01:16:34.055
<v Speaker 1>doesn't matter.

01:16:34.455 --> 01:16:35.815
<v Speaker 1>Equals profile.

01:16:38.135 --> 01:16:38.775
<v Speaker 1>Yeah.

01:16:39.735 --> 01:16:41.895
<v Speaker 1>You still got a warning, but yeah. It's

01:16:41.895 --> 01:16:43.015
<v Speaker 1>a semicolon,

01:16:43.015 --> 01:16:43.655
<v Speaker 1>not a hash.

01:16:45.280 --> 01:16:46.640
<v Speaker 1>Actually, I don't know.

01:16:47.920 --> 01:16:49.360
<v Speaker 1>I think And then I can just run

01:16:49.360 --> 01:16:51.120
<v Speaker 0>to post install again? Yeah.

01:16:51.440 --> 01:16:52.160
<v Speaker 1>Yes.

01:16:54.160 --> 01:16:54.960
<v Speaker 0>Okay.

01:16:55.840 --> 01:16:56.719
<v Speaker 0>Should

01:16:56.800 --> 01:16:58.080
<v Speaker 0>we take a look at that other cache

01:16:58.080 --> 01:17:00.275
<v Speaker 0>frame just now? Yeah. Let's do that. Well,

01:17:00.275 --> 01:17:02.835
<v Speaker 1>this runs. Right. Let's stop that. There's no

01:17:02.835 --> 01:17:05.155
<v Speaker 0>there's no log file here. And I'm just

01:17:05.155 --> 01:17:07.075
<v Speaker 0>gonna run it with time. Let's get a

01:17:07.075 --> 01:17:08.515
<v Speaker 0>a number from it so I don't need

01:17:08.515 --> 01:17:09.795
<v Speaker 0>to run each top.

01:17:10.115 --> 01:17:10.755
<v Speaker 0>Okay. Okay.

01:17:11.970 --> 01:17:15.090
<v Speaker 0>Here, cache grind and my local file here.

01:17:24.365 --> 01:17:25.645
<v Speaker 1>It takes some time.

01:17:25.885 --> 01:17:27.965
<v Speaker 1>It's a big fault. It needs to pass

01:17:27.965 --> 01:17:30.525
<v Speaker 1>three dot three gigabytes of profiling

01:17:30.525 --> 01:17:31.565
<v Speaker 1>information.

01:17:36.285 --> 01:17:37.165
<v Speaker 0>Let's

01:17:37.165 --> 01:17:38.205
<v Speaker 0>give it another minute.

01:17:40.980 --> 01:17:43.300
<v Speaker 1>That grind will have would not have been

01:17:43.300 --> 01:17:44.419
<v Speaker 1>able to handle this.

01:17:44.900 --> 01:17:46.419
<v Speaker 1>The file is too big.

01:17:47.460 --> 01:17:48.980
<v Speaker 1>Yeah. It really just takes as much time.

01:17:48.980 --> 01:17:50.099
<v Speaker 1>There's no much you can do on this.

01:17:57.025 --> 01:17:57.745
<v Speaker 0>I

01:18:02.305 --> 01:18:05.425
<v Speaker 0>wonder what's gonna load first this this profile

01:18:05.505 --> 01:18:07.665
<v Speaker 0>for xdebug three and compulsive.

01:18:09.640 --> 01:18:11.320
<v Speaker 1>It's still loading it.

01:18:12.520 --> 01:18:14.280
<v Speaker 0>It is. Oh, we have a progress part

01:18:14.280 --> 01:18:17.000
<v Speaker 0>of here. Oh, yeah. It's about 30%,

01:18:17.000 --> 01:18:18.680
<v Speaker 0>maybe maybe 25%.

01:18:21.695 --> 01:18:23.215
<v Speaker 1>Yeah. This is where

01:18:23.695 --> 01:18:27.455
<v Speaker 1>the disc disc performance over Mac really sucks.

01:18:30.895 --> 01:18:33.135
<v Speaker 0>Alright. No. It's the next time Derek is

01:18:33.135 --> 01:18:34.975
<v Speaker 0>on the stream, bring my Linux laptop to

01:18:34.975 --> 01:18:36.699
<v Speaker 0>the party. Mhmm.

01:18:38.619 --> 01:18:39.659
<v Speaker 1>Much faster.

01:18:40.060 --> 01:18:42.619
<v Speaker 1>I also believe that the

01:18:43.179 --> 01:18:44.459
<v Speaker 1>error messages

01:18:44.460 --> 01:18:46.459
<v Speaker 1>are causing a slowdown as well.

01:18:47.340 --> 01:18:47.980
<v Speaker 0>And I Oh, yeah.

01:18:48.895 --> 01:18:50.815
<v Speaker 1>I think that the next ebook three, I

01:18:50.815 --> 01:18:52.975
<v Speaker 1>actually made sure that it doesn't show negative

01:18:52.975 --> 01:18:55.455
<v Speaker 1>information in there so that will be faster

01:18:55.455 --> 01:18:57.855
<v Speaker 1>on the site too. Just loading the phone.

01:18:58.175 --> 01:18:59.615
<v Speaker 1>But I'm not a % certain.

01:19:04.140 --> 01:19:05.020
<v Speaker 1>Profiler.

01:19:05.100 --> 01:19:08.380
<v Speaker 1>I'm just creating a ticket for myself. So

01:19:12.540 --> 01:19:13.500
<v Speaker 1>I don't forget that.

01:19:22.685 --> 01:19:23.725
<v Speaker 1>So dance?

01:19:24.125 --> 01:19:24.845
<v Speaker 1>Yep.

01:19:31.165 --> 01:19:32.765
<v Speaker 0>Yeah. I think it's only halfway through.

01:19:34.550 --> 01:19:35.269
<v Speaker 1>Yeah.

01:19:37.909 --> 01:19:39.669
<v Speaker 1>Ain't sure what to do about that.

01:19:40.389 --> 01:19:42.389
<v Speaker 1>I wonder how many lines are in there.

01:19:42.630 --> 01:19:44.469
<v Speaker 1>What does it show in the console output?

01:19:44.469 --> 01:19:46.469
<v Speaker 1>It it tells you how many lines which

01:19:46.469 --> 01:19:47.349
<v Speaker 1>line it is parsing.

01:19:48.165 --> 01:19:50.165
<v Speaker 1>So the number in the middle,

01:19:50.565 --> 01:19:52.085
<v Speaker 1>that's the line number.

01:19:53.925 --> 01:19:55.445
<v Speaker 0>Yeah. That's a big line.

01:19:55.765 --> 01:19:57.125
<v Speaker 1>225,000,000.

01:20:00.990 --> 01:20:02.510
<v Speaker 0>My computer is

01:20:02.750 --> 01:20:03.949
<v Speaker 0>going haywire.

01:20:04.830 --> 01:20:06.989
<v Speaker 1>It's you don't have enough memory, I think.

01:20:07.230 --> 01:20:08.990
<v Speaker 1>I think that's your problem. It's starting to

01:20:08.990 --> 01:20:09.869
<v Speaker 1>swap now.

01:20:11.230 --> 01:20:11.710
<v Speaker 1>No.

01:20:13.785 --> 01:20:15.945
<v Speaker 0>The file is only 3.3 gig, and I've

01:20:15.945 --> 01:20:17.385
<v Speaker 0>got 32 gig around.

01:20:18.745 --> 01:20:20.745
<v Speaker 1>Yeah. But how do you think what do

01:20:20.745 --> 01:20:23.224
<v Speaker 1>you think QCache Crime does for this?

01:20:24.905 --> 01:20:26.745
<v Speaker 0>I assumed it was loading three gig into

01:20:26.745 --> 01:20:27.225
<v Speaker 0>memory.

01:20:30.610 --> 01:20:32.690
<v Speaker 1>Well, you have top find out.

01:20:36.930 --> 01:20:37.730
<v Speaker 1>Okay.

01:20:38.210 --> 01:20:39.490
<v Speaker 1>That was a mistake.

01:20:40.850 --> 01:20:42.850
<v Speaker 0>Running w c was a mistake?

01:20:43.170 --> 01:20:43.490
<v Speaker 1>Yeah.

01:20:44.565 --> 01:20:46.325
<v Speaker 0>I'm only using half my memory.

01:20:47.845 --> 01:20:50.165
<v Speaker 1>Yeah. But you also I have 1.3

01:20:50.165 --> 01:20:51.685
<v Speaker 0>gig as well. Yeah.

01:20:53.045 --> 01:20:54.645
<v Speaker 1>That is not a lot of swap for

01:20:54.645 --> 01:20:55.365
<v Speaker 1>that much memory.

01:20:57.540 --> 01:20:59.460
<v Speaker 0>I normally have swap disabled. I've just not

01:20:59.460 --> 01:21:00.579
<v Speaker 0>done it on a Mac.

01:21:01.860 --> 01:21:04.579
<v Speaker 1>Not sure whether you can, actually. I mean,

01:21:05.300 --> 01:21:07.219
<v Speaker 1>I've swapped disabled on my machine as well,

01:21:07.219 --> 01:21:08.340
<v Speaker 1>but it has a bit more memory.

01:21:11.125 --> 01:21:12.645
<v Speaker 0>Yeah. I'm not sure how big that fail

01:21:12.645 --> 01:21:13.284
<v Speaker 0>is.

01:21:13.605 --> 01:21:15.045
<v Speaker 0>4,000,

01:21:15.045 --> 01:21:16.965
<v Speaker 0>40 thousand, hundred thousand

01:21:17.284 --> 01:21:18.405
<v Speaker 0>Half gigabytes.

01:21:18.725 --> 01:21:20.164
<v Speaker 0>27,000,000

01:21:20.405 --> 01:21:20.965
<v Speaker 0>lines.

01:21:23.590 --> 01:21:25.510
<v Speaker 1>And it's about halfway done.

01:21:26.310 --> 01:21:28.470
<v Speaker 1>But I think you run into swap here

01:21:32.950 --> 01:21:34.790
<v Speaker 1>because it's not getting bigger.

01:21:37.225 --> 01:21:39.625
<v Speaker 0>Oh. It's done. That's why.

01:21:40.265 --> 01:21:40.985
<v Speaker 1>So,

01:21:41.385 --> 01:21:43.065
<v Speaker 1>yeah, you can see now it's stuck on

01:21:43.065 --> 01:21:44.345
<v Speaker 1>the on the software,

01:21:44.745 --> 01:21:46.745
<v Speaker 1>and it now takes 90% of the time.

01:21:46.745 --> 01:21:48.905
<v Speaker 1>Right? And you remember previously, it was 26%.

01:21:50.030 --> 01:21:50.830
<v Speaker 1>Yep.

01:21:51.150 --> 01:21:53.710
<v Speaker 1>But you can see how often things have

01:21:53.710 --> 01:21:54.510
<v Speaker 1>been called.

01:21:56.670 --> 01:21:58.190
<v Speaker 0>Yeah. That's

01:21:59.790 --> 01:22:01.070
<v Speaker 1>700,000

01:22:01.070 --> 01:22:02.030
<v Speaker 1>times. Thousand times.

01:22:05.175 --> 01:22:06.215
<v Speaker 0>Interesting

01:22:06.215 --> 01:22:08.295
<v Speaker 0>that this call is 700

01:22:08.855 --> 01:22:11.975
<v Speaker 0>I mean, that's only 4.77%,

01:22:11.975 --> 01:22:15.255
<v Speaker 0>whereas the function call twice is 53.

01:22:16.375 --> 01:22:18.695
<v Speaker 1>Yep. But look at call goes down here.

01:22:18.695 --> 01:22:19.175
<v Speaker 0>Yeah. Yeah.

01:22:19.790 --> 01:22:21.150
<v Speaker 1>At the 1,400,000

01:22:21.150 --> 01:22:22.030
<v Speaker 1>and the 1 3

01:22:23.230 --> 01:22:24.830
<v Speaker 1>Yeah. And That is a lot of function

01:22:24.830 --> 01:22:25.470
<v Speaker 1>calls.

01:22:25.710 --> 01:22:28.430
<v Speaker 1>And this is where xdebug was actually terribly

01:22:28.430 --> 01:22:30.110
<v Speaker 1>slow for doing that kind of stuff.

01:22:31.070 --> 01:22:32.590
<v Speaker 1>I think it's done, by the way.

01:22:36.045 --> 01:22:37.645
<v Speaker 0>Oh, okay. So can I close this one

01:22:37.645 --> 01:22:38.204
<v Speaker 0>down?

01:22:38.685 --> 01:22:41.805
<v Speaker 1>Is it is it done? Composer is installed,

01:22:41.805 --> 01:22:43.164
<v Speaker 1>isn't it? It finished.

01:22:43.485 --> 01:22:45.245
<v Speaker 0>It has. Yeah. It only took two hundred

01:22:45.245 --> 01:22:47.485
<v Speaker 0>and fifty seconds this time. So six minutes

01:22:47.485 --> 01:22:49.165
<v Speaker 1>instead of fifteen. Fifteen.

01:22:51.040 --> 01:22:53.680
<v Speaker 1>Sorry. That's not true. It's four minutes, not

01:22:53.680 --> 01:22:54.480
<v Speaker 1>six minutes.

01:22:55.680 --> 01:22:58.320
<v Speaker 0>Yes. Four minutes. Okay. So while we shut

01:22:58.320 --> 01:22:59.040
<v Speaker 0>this one,

01:22:59.360 --> 01:23:01.040
<v Speaker 0>there's not gonna be anything different between this

01:23:01.040 --> 01:23:02.480
<v Speaker 0>queue cache going to the other one. Right?

01:23:02.480 --> 01:23:03.920
<v Speaker 0>This the only difference there was that the

01:23:03.920 --> 01:23:06.560
<v Speaker 0>xdebug was significantly faster. Exactly. Yeah.

01:23:07.815 --> 01:23:09.815
<v Speaker 1>So that's what I've been spending my the

01:23:09.815 --> 01:23:11.735
<v Speaker 1>last few months on making this go not

01:23:11.735 --> 01:23:12.775
<v Speaker 1>suck too much.

01:23:13.655 --> 01:23:15.735
<v Speaker 1>Because now I mean, four minutes is still

01:23:15.735 --> 01:23:17.095
<v Speaker 1>not great, but

01:23:18.055 --> 01:23:20.695
<v Speaker 1>it's not sixteen minutes or whatever or fifteen

01:23:20.695 --> 01:23:21.095
<v Speaker 1>minutes.

01:23:22.880 --> 01:23:25.679
<v Speaker 1>And I haven't even spent time optimizing composers

01:23:25.679 --> 01:23:26.959
<v Speaker 1>specifically. So

01:23:27.599 --> 01:23:30.159
<v Speaker 1>but yeah. Anyway, so if you would ask

01:23:30.159 --> 01:23:31.360
<v Speaker 1>me how would I

01:23:32.560 --> 01:23:35.360
<v Speaker 1>make xdebug go faster, I would do exactly

01:23:35.360 --> 01:23:35.920
<v Speaker 1>the same thing.

01:23:36.795 --> 01:23:39.675
<v Speaker 1>I would use file grind, creating cache grind

01:23:39.675 --> 01:23:41.275
<v Speaker 1>files and loading them into,

01:23:41.675 --> 01:23:43.035
<v Speaker 1>you know, k cache grind in my case

01:23:43.035 --> 01:23:45.435
<v Speaker 1>or q cache grind to analyze the profile

01:23:45.435 --> 01:23:46.635
<v Speaker 1>and see where it's slow

01:23:47.035 --> 01:23:48.235
<v Speaker 1>in the exact same way.

01:23:49.160 --> 01:23:51.320
<v Speaker 0>And the process of identifying what

01:23:52.120 --> 01:23:55.000
<v Speaker 0>is slow here is just following the percentages

01:23:55.000 --> 01:23:56.760
<v Speaker 0>and the bigger lines and trying to find

01:23:56.760 --> 01:23:58.680
<v Speaker 0>the functions where most of the time is

01:23:58.680 --> 01:24:00.840
<v Speaker 0>being spent. Absolutely. Or what is often a

01:24:00.840 --> 01:24:02.040
<v Speaker 1>good thing of doing it on the left

01:24:02.040 --> 01:24:03.800
<v Speaker 1>hand side, you have the inclusive in self.

01:24:03.800 --> 01:24:05.080
<v Speaker 1>If you click on the word self,

01:24:08.335 --> 01:24:11.135
<v Speaker 1>the things at the top are the functions

01:24:11.375 --> 01:24:14.175
<v Speaker 1>that where most of the time is taken

01:24:14.655 --> 01:24:16.975
<v Speaker 1>without it's calling all the functions.

01:24:18.575 --> 01:24:19.135
<v Speaker 0>Okay.

01:24:19.900 --> 01:24:21.660
<v Speaker 1>And so I just go down the list

01:24:21.660 --> 01:24:23.580
<v Speaker 1>and see whether there's anything interesting in it.

01:24:25.580 --> 01:24:28.060
<v Speaker 0>Okay. Oh, yeah. You just be sorting this

01:24:28.060 --> 01:24:29.980
<v Speaker 0>list based on self

01:24:30.060 --> 01:24:32.060
<v Speaker 0>and Yep. Looking for the functions for us

01:24:32.060 --> 01:24:34.005
<v Speaker 0>by the most time. The first function I

01:24:34.005 --> 01:24:35.285
<v Speaker 1>would look in in this case is the

01:24:35.285 --> 01:24:37.765
<v Speaker 1>the one that is currently selected. It's called

01:24:37.765 --> 01:24:38.645
<v Speaker 1>two times,

01:24:38.965 --> 01:24:40.485
<v Speaker 1>but it takes up 11%.

01:24:40.485 --> 01:24:42.005
<v Speaker 1>That is a lot. Unfortunately,

01:24:42.005 --> 01:24:43.125
<v Speaker 1>your composer

01:24:44.005 --> 01:24:45.605
<v Speaker 1>you don't have the source code locally.

01:24:46.900 --> 01:24:48.420
<v Speaker 0>So this was what showed me the code

01:24:48.420 --> 01:24:50.900
<v Speaker 0>here. Yeah. So if I compiled composer,

01:24:50.900 --> 01:24:52.820
<v Speaker 0>then I would have so I guess that's

01:24:52.820 --> 01:24:54.660
<v Speaker 0>that's a important point here is if you're

01:24:54.660 --> 01:24:55.780
<v Speaker 0>gonna profile

01:24:56.980 --> 01:24:59.220
<v Speaker 0>you can't profile something distributed as a far

01:24:59.380 --> 01:25:01.185
<v Speaker 0>a far. You would have to have that

01:25:01.185 --> 01:25:02.865
<v Speaker 0>quote built. No. You can't you can't profile

01:25:02.865 --> 01:25:04.385
<v Speaker 1>it, but you can't see the source code.

01:25:04.465 --> 01:25:07.105
<v Speaker 0>K. Okay. Because QCache client or k crashing

01:25:07.105 --> 01:25:09.105
<v Speaker 1>doesn't understand the file format. Right?

01:25:09.665 --> 01:25:11.745
<v Speaker 0>And if we take a look at the,

01:25:11.745 --> 01:25:13.505
<v Speaker 0>you know, the callers, we can see where

01:25:13.505 --> 01:25:15.409
<v Speaker 0>that function is being called from. Do we

01:25:15.409 --> 01:25:17.809
<v Speaker 0>get any visibility beyond that, or is it

01:25:18.449 --> 01:25:20.290
<v Speaker 0>is it just If you click on colors,

01:25:20.290 --> 01:25:21.650
<v Speaker 1>you can see where this is called from,

01:25:21.650 --> 01:25:22.770
<v Speaker 1>but you can also see that's in the

01:25:22.770 --> 01:25:23.809
<v Speaker 1>graph already

01:25:24.290 --> 01:25:26.290
<v Speaker 1>because the one that is selected is the

01:25:26.290 --> 01:25:27.250
<v Speaker 1>red one in the middle.

01:25:29.125 --> 01:25:29.684
<v Speaker 0>Okay.

01:25:30.165 --> 01:25:31.844
<v Speaker 1>And if you can see what is if

01:25:31.925 --> 01:25:33.445
<v Speaker 1>in the in the call graph here down

01:25:33.445 --> 01:25:35.605
<v Speaker 1>here, you can see who who called it

01:25:35.605 --> 01:25:38.085
<v Speaker 1>because it's the node above it. Ah, right.

01:25:38.085 --> 01:25:40.405
<v Speaker 0>Gotcha. Okay. But you can see there's all

01:25:40.405 --> 01:25:42.885
<v Speaker 1>the functions got two to 2,000,000 times

01:25:45.090 --> 01:25:46.289
<v Speaker 1>down here. Yeah.

01:25:48.610 --> 01:25:51.090
<v Speaker 1>Blue one. Oh, yeah. That's there we go.

01:25:51.090 --> 01:25:52.289
<v Speaker 0>Okay. Got it.

01:25:53.250 --> 01:25:54.850
<v Speaker 1>So Is there any

01:25:54.850 --> 01:25:57.090
<v Speaker 0>any difference that we would apply? Like, right

01:25:57.090 --> 01:25:58.290
<v Speaker 0>now, I I feel like we're kind of

01:25:58.290 --> 01:26:01.065
<v Speaker 0>identifying functions called based on their c p

01:26:01.225 --> 01:26:03.385
<v Speaker 0>CPU performance. And is there anything different that

01:26:03.385 --> 01:26:04.905
<v Speaker 0>has to happen if I wanna find bad

01:26:04.905 --> 01:26:06.505
<v Speaker 0>actors with memory allocations?

01:26:06.505 --> 01:26:08.745
<v Speaker 1>Yep. You see the worst time in your

01:26:08.745 --> 01:26:09.704
<v Speaker 1>menu bar?

01:26:12.425 --> 01:26:13.705
<v Speaker 0>Oh, yeah. Yeah. Ah.

01:26:14.659 --> 01:26:16.260
<v Speaker 0>Change it to memory.

01:26:18.980 --> 01:26:20.099
<v Speaker 0>So simple.

01:26:20.340 --> 01:26:21.939
<v Speaker 1>It's the same idea.

01:26:22.340 --> 01:26:24.099
<v Speaker 1>But then I have to make a big

01:26:24.099 --> 01:26:26.099
<v Speaker 1>caveat here. There's that memory

01:26:26.099 --> 01:26:28.659
<v Speaker 1>profiling is not nearly as accurate because, as

01:26:28.659 --> 01:26:29.139
<v Speaker 1>I mentioned,

01:26:29.925 --> 01:26:32.005
<v Speaker 1>it is impossible to see

01:26:32.805 --> 01:26:34.885
<v Speaker 1>the negative use of memory when things get

01:26:34.885 --> 01:26:35.445
<v Speaker 1>freed.

01:26:36.325 --> 01:26:39.205
<v Speaker 1>And, also, PHP's garbage collector can kick in

01:26:39.205 --> 01:26:40.405
<v Speaker 1>at any time.

01:26:42.085 --> 01:26:45.205
<v Speaker 1>Right. Sometimes you see memory being freed

01:26:45.740 --> 01:26:48.300
<v Speaker 1>that isn't

01:26:48.300 --> 01:26:49.580
<v Speaker 1>actually getting freed

01:26:50.140 --> 01:26:51.740
<v Speaker 1>at the point where it says it is

01:26:51.740 --> 01:26:53.580
<v Speaker 1>going to be freed because it's a garbage

01:26:53.580 --> 01:26:57.100
<v Speaker 1>collect they're kicking in. Now with Composer specifically,

01:26:57.100 --> 01:26:59.985
<v Speaker 1>that is not a problem because Composer disables

01:26:59.985 --> 01:27:01.905
<v Speaker 1>PHP's garbage collector

01:27:03.425 --> 01:27:05.025
<v Speaker 1>because it would make it

01:27:05.585 --> 01:27:07.185
<v Speaker 1>two or three times as slow.

01:27:08.625 --> 01:27:11.105
<v Speaker 1>And you don't really care in command line

01:27:11.105 --> 01:27:11.985
<v Speaker 1>applications. Right?

01:27:13.620 --> 01:27:16.180
<v Speaker 0>Yeah. Because, I guess, typically, they're not long

01:27:16.180 --> 01:27:19.220
<v Speaker 0>running. They the the PHP will exit is,

01:27:19.220 --> 01:27:22.340
<v Speaker 0>I guess. Right. So anything where you you'd,

01:27:22.340 --> 01:27:24.660
<v Speaker 1>like, run, like, a a PHP process that

01:27:24.660 --> 01:27:26.500
<v Speaker 1>you want to run for hours, you want

01:27:26.500 --> 01:27:28.625
<v Speaker 1>to have the garbage collector turned on. But

01:27:28.625 --> 01:27:30.705
<v Speaker 1>if it's a one shot script, then you

01:27:30.705 --> 01:27:31.825
<v Speaker 1>don't really care.

01:27:32.145 --> 01:27:33.185
<v Speaker 0>That makes sense.

01:27:33.905 --> 01:27:35.505
<v Speaker 1>And, yeah, you don't really want to wait

01:27:35.505 --> 01:27:36.945
<v Speaker 1>for garbage being collected.

01:27:38.465 --> 01:27:39.105
<v Speaker 0>Okay.

01:27:39.345 --> 01:27:41.105
<v Speaker 0>Is there anything else you feel we should

01:27:41.105 --> 01:27:42.625
<v Speaker 0>cover before we wrap this up? Because I

01:27:42.625 --> 01:27:43.345
<v Speaker 0>feel like

01:27:44.040 --> 01:27:46.440
<v Speaker 1>I don't think we have anything at the

01:27:46.440 --> 01:27:48.520
<v Speaker 1>moment that I still can talk about. I

01:27:48.520 --> 01:27:51.000
<v Speaker 1>mean, I would suggest you play

01:27:51.480 --> 01:27:54.040
<v Speaker 1>around with your own PHP applications. I mean,

01:27:54.040 --> 01:27:55.720
<v Speaker 1>the people are listening. Oh, and your you,

01:27:55.720 --> 01:27:56.360
<v Speaker 1>of course, as well.

01:27:57.185 --> 01:27:57.745
<v Speaker 1>And,

01:27:58.465 --> 01:28:00.545
<v Speaker 1>yeah, that's pretty much it.

01:28:01.025 --> 01:28:02.945
<v Speaker 1>Alright. That was the same.

01:28:04.705 --> 01:28:07.185
<v Speaker 0>That was awesome. That was really insightful again.

01:28:07.185 --> 01:28:08.625
<v Speaker 0>I look at the head of this first.

01:28:08.625 --> 01:28:09.105
<v Speaker 0>And

01:28:10.090 --> 01:28:12.250
<v Speaker 0>it's just so much information. Like,

01:28:12.650 --> 01:28:14.330
<v Speaker 0>it's a really cool tool that we have

01:28:14.330 --> 01:28:16.730
<v Speaker 0>the ability to just inject like, I mean,

01:28:16.730 --> 01:28:18.810
<v Speaker 0>installing xdebug and running that in their application

01:28:18.810 --> 01:28:20.010
<v Speaker 0>was so trivial.

01:28:20.090 --> 01:28:20.970
<v Speaker 0>That that was great.

01:28:22.035 --> 01:28:24.755
<v Speaker 1>Yep. You turn it on. That that's pretty

01:28:24.755 --> 01:28:25.474
<v Speaker 1>much it.

01:28:26.114 --> 01:28:28.435
<v Speaker 0>And the speed performance of xdebug three was

01:28:28.435 --> 01:28:30.594
<v Speaker 0>fantastic. So great job there. I think I

01:28:30.594 --> 01:28:32.435
<v Speaker 0>I didn't I knew you said it was

01:28:32.435 --> 01:28:34.435
<v Speaker 0>faster. I wasn't expecting to go from fifteen

01:28:34.435 --> 01:28:36.594
<v Speaker 0>minutes to sub four minutes. That's pretty impressive.

01:28:38.080 --> 01:28:39.360
<v Speaker 1>Yeah. I wasn't

01:28:39.680 --> 01:28:41.360
<v Speaker 1>expecting that either, to be fair.

01:28:42.080 --> 01:28:44.079
<v Speaker 0>Surprised it wrote itself. Awesome.

01:28:44.800 --> 01:28:45.840
<v Speaker 1>Alright, Chris.

01:28:46.160 --> 01:28:48.080
<v Speaker 1>Sorry. I mean, I know with compose, it

01:28:48.080 --> 01:28:50.000
<v Speaker 1>is the recursive calling

01:28:50.480 --> 01:28:52.640
<v Speaker 1>that happens so often, and I know that

01:28:52.640 --> 01:28:53.120
<v Speaker 1>was

01:28:53.445 --> 01:28:54.965
<v Speaker 1>a contentious point.

01:28:56.085 --> 01:28:56.804
<v Speaker 1>Yeah.

01:28:57.205 --> 01:28:58.725
<v Speaker 0>Alright. Well, thank you very much for taking

01:28:58.725 --> 01:28:59.845
<v Speaker 0>the time out of your day to join

01:28:59.845 --> 01:29:01.685
<v Speaker 0>me and go through all this. This is

01:29:01.685 --> 01:29:03.365
<v Speaker 0>really useful. I'm sure others are gonna find

01:29:03.365 --> 01:29:06.005
<v Speaker 0>this fantastic as well. So thank you again,

01:29:06.005 --> 01:29:06.325
<v Speaker 0>Derek.

01:29:06.900 --> 01:29:08.420
<v Speaker 1>I'll tweet out the link to the video

01:29:08.420 --> 01:29:09.540
<v Speaker 1>once this, Rawkode.

01:29:10.020 --> 01:29:12.260
<v Speaker 0>Alright. Perfect. Well, thank you again. I'll speak

01:29:12.260 --> 01:29:13.780
<v Speaker 0>to you soon. Thank

01:29:13.940 --> 01:29:15.220
<v Speaker 0>you for tuning in, and I'll see you

01:29:15.220 --> 01:29:17.140
<v Speaker 0>all next time. Thanks. Bye.
