WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 623b6d41-f201-4f8f-97ec-2c5acc025641
Created: 2025-04-29T21:58:48.893Z
Duration: 5335.0254
Channels: 1

00:01:31.435 --> 00:01:32.314
<v Speaker 0>Hello,

00:01:32.315 --> 00:01:34.075
<v Speaker 0>and welcome to Rawkode Live.

00:01:36.075 --> 00:01:38.795
<v Speaker 0>Today, I am joined by Julius, the cofounder

00:01:38.795 --> 00:01:41.354
<v Speaker 0>of Prometheus, the founder of PromCon,

00:01:41.354 --> 00:01:43.755
<v Speaker 0>and newly founder of PromLabs, the creator of

00:01:43.755 --> 00:01:44.475
<v Speaker 0>PromLens.

00:01:44.690 --> 00:01:46.850
<v Speaker 0>Today, we're gonna be taking an introductory look

00:01:46.850 --> 00:01:47.970
<v Speaker 0>at Prometheus

00:01:48.050 --> 00:01:49.810
<v Speaker 0>and who best to have join me than

00:01:49.810 --> 00:01:52.290
<v Speaker 0>Julius. Hello, Julius. How are you? Hi there.

00:01:52.290 --> 00:01:53.090
<v Speaker 1>How's it going?

00:01:53.650 --> 00:01:55.170
<v Speaker 1>I I love your intro.

00:01:55.890 --> 00:01:57.570
<v Speaker 0>Thank you very much. Yeah. I took a

00:01:57.570 --> 00:01:59.970
<v Speaker 0>lot of inspiration from the IT crowd if

00:01:59.355 --> 00:02:01.915
<v Speaker 0>you've seen that before. Yeah. Yeah. Yeah.

00:02:02.315 --> 00:02:04.235
<v Speaker 0>And yeah. I I some days I love

00:02:04.235 --> 00:02:05.915
<v Speaker 0>it, some days I hate it. And what's

00:02:05.915 --> 00:02:07.995
<v Speaker 0>very consistent though is that I can never

00:02:07.995 --> 00:02:10.155
<v Speaker 0>start off the introduction properly and always mince

00:02:10.155 --> 00:02:11.915
<v Speaker 0>my words. So that's now just a feature

00:02:11.915 --> 00:02:14.410
<v Speaker 0>of the show, which. Oh, interesting. When you

00:02:14.410 --> 00:02:16.410
<v Speaker 1>were speaking, I was just thinking like, oh,

00:02:16.410 --> 00:02:19.370
<v Speaker 1>wow. You you have such a nicely collected

00:02:20.650 --> 00:02:22.170
<v Speaker 1>introduction in your head.

00:02:23.290 --> 00:02:25.050
<v Speaker 0>Yeah. Yeah. It's it's all of a say

00:02:25.050 --> 00:02:27.290
<v Speaker 0>it, and say it is very different. But

00:02:26.805 --> 00:02:28.885
<v Speaker 0>I'm I enjoyed this. I'm really looking forward

00:02:28.885 --> 00:02:30.484
<v Speaker 0>to today as we take a kinda look

00:02:30.484 --> 00:02:32.405
<v Speaker 0>at Prometheus and the the problems that it

00:02:32.405 --> 00:02:33.924
<v Speaker 0>solves and and really get people that

00:02:34.644 --> 00:02:36.564
<v Speaker 0>you know, Prometheus one zero one. Like, where

00:02:36.564 --> 00:02:38.245
<v Speaker 0>do I get started? What does it do?

00:02:38.245 --> 00:02:39.924
<v Speaker 0>And how can I make it better? So

00:02:40.780 --> 00:02:42.620
<v Speaker 0>do you want to just quickly start by

00:02:42.620 --> 00:02:44.220
<v Speaker 0>telling us what Prometheus

00:02:44.220 --> 00:02:44.780
<v Speaker 0>is?

00:02:45.260 --> 00:02:45.980
<v Speaker 1>Sure.

00:02:46.459 --> 00:02:48.620
<v Speaker 1>I would say Prometheus is a monitoring system

00:02:48.620 --> 00:02:51.740
<v Speaker 1>first and foremost, which is based on a

00:02:51.740 --> 00:02:52.540
<v Speaker 1>time series

00:02:52.944 --> 00:02:55.745
<v Speaker 1>database that it includes internally.

00:02:56.145 --> 00:02:56.705
<v Speaker 1>And

00:02:57.345 --> 00:02:59.345
<v Speaker 1>so it's really yeah. It's a time series

00:02:59.345 --> 00:03:00.864
<v Speaker 1>based monitoring

00:03:00.864 --> 00:03:03.505
<v Speaker 1>system for monitoring your IT infrastructure,

00:03:03.505 --> 00:03:04.145
<v Speaker 1>your services,

00:03:06.040 --> 00:03:07.720
<v Speaker 1>but also your devices,

00:03:07.720 --> 00:03:09.000
<v Speaker 1>like, devices,

00:03:09.240 --> 00:03:10.120
<v Speaker 1>hosts,

00:03:10.520 --> 00:03:13.720
<v Speaker 1>potentially anything, actually, that can serialize data in

00:03:13.720 --> 00:03:16.280
<v Speaker 1>the format that Prometheus expects. So people also

00:03:16.280 --> 00:03:17.080
<v Speaker 1>monitor

00:03:17.160 --> 00:03:19.960
<v Speaker 1>their homes with it, like humidity, temperature, or

00:03:19.960 --> 00:03:23.135
<v Speaker 1>wind farms, what's the current, like, power that

00:03:23.135 --> 00:03:25.215
<v Speaker 1>they output, anything really that you can press

00:03:25.215 --> 00:03:27.215
<v Speaker 1>into these kind of time series.

00:03:27.535 --> 00:03:30.175
<v Speaker 1>But, really, it got born initially,

00:03:30.655 --> 00:03:33.855
<v Speaker 1>by myself and Matt Proud at SoundCloud coming

00:03:33.855 --> 00:03:36.495
<v Speaker 1>from Google and missing a proper monitoring system

00:03:36.780 --> 00:03:40.220
<v Speaker 1>for more dynamic environments. So SoundCloud already had

00:03:40.220 --> 00:03:43.100
<v Speaker 1>a cluster scheduler very early on in 02/2012.

00:03:43.500 --> 00:03:44.140
<v Speaker 1>And,

00:03:45.980 --> 00:03:48.540
<v Speaker 1>basic the key aspect that Prometheus brings to

00:03:48.540 --> 00:03:52.060
<v Speaker 1>those environments is integrating with service discovery in

00:03:52.060 --> 00:03:54.915
<v Speaker 1>such a way that Prometheus constantly

00:03:54.915 --> 00:03:57.555
<v Speaker 1>has an updated view of what things should

00:03:57.555 --> 00:03:59.395
<v Speaker 1>be where. And it's a pull based monitoring

00:03:59.395 --> 00:04:00.115
<v Speaker 1>system,

00:04:00.355 --> 00:04:01.875
<v Speaker 1>so it actively

00:04:01.875 --> 00:04:04.035
<v Speaker 1>not only knows which things should be where,

00:04:04.035 --> 00:04:05.875
<v Speaker 1>but also how to reach them and pull

00:04:05.875 --> 00:04:08.115
<v Speaker 1>metrics from them over HTTP.

00:04:08.370 --> 00:04:11.890
<v Speaker 1>So whether that's your application server, your networking

00:04:11.890 --> 00:04:13.970
<v Speaker 1>device, or anything else, as long as it

00:04:13.970 --> 00:04:17.010
<v Speaker 1>can serve an HTTP endpoint in the Prometheus

00:04:17.010 --> 00:04:18.130
<v Speaker 1>metrics format,

00:04:19.010 --> 00:04:21.649
<v Speaker 1>then Prometheus can collect data from it, store

00:04:21.649 --> 00:04:22.930
<v Speaker 1>it in a time series database,

00:04:23.414 --> 00:04:25.335
<v Speaker 1>and then you can make use of that

00:04:25.335 --> 00:04:26.455
<v Speaker 1>collected data

00:04:27.495 --> 00:04:30.455
<v Speaker 1>either with dashboarding, maybe showing nice stats,

00:04:30.615 --> 00:04:33.335
<v Speaker 1>what's going on overall in your system, or

00:04:33.335 --> 00:04:36.215
<v Speaker 1>actually also basing alerts on that collected data.

00:04:37.159 --> 00:04:38.919
<v Speaker 1>So you can actually wake people up at

00:04:38.919 --> 00:04:40.759
<v Speaker 1>night if if the website is down, if

00:04:40.759 --> 00:04:42.439
<v Speaker 1>it's slow, if something else is broken, if

00:04:42.439 --> 00:04:45.400
<v Speaker 1>your windmill doesn't output power anymore, for example.

00:04:46.840 --> 00:04:47.479
<v Speaker 1>And,

00:04:48.120 --> 00:04:51.665
<v Speaker 1>yeah, it comes with a dimensional data model.

00:04:51.665 --> 00:04:53.425
<v Speaker 1>So, there's a metric name,

00:04:53.824 --> 00:04:56.305
<v Speaker 1>and then a set of key value pairs

00:04:56.305 --> 00:04:58.465
<v Speaker 1>that we call labels similar to Docker labels

00:04:58.465 --> 00:05:00.065
<v Speaker 1>or Kubernetes labels,

00:05:01.025 --> 00:05:03.264
<v Speaker 1>that really give you the different sub dimensions

00:05:03.264 --> 00:05:05.690
<v Speaker 1>of a metric name, like the number of

00:05:05.690 --> 00:05:06.490
<v Speaker 1>HTTP

00:05:06.490 --> 00:05:08.650
<v Speaker 1>requests that have been counted

00:05:08.730 --> 00:05:10.970
<v Speaker 1>on a given server but then broken up

00:05:10.970 --> 00:05:12.250
<v Speaker 1>by a method,

00:05:12.410 --> 00:05:13.450
<v Speaker 1>status code,

00:05:13.610 --> 00:05:15.690
<v Speaker 1>something else, etcetera, and the process it came

00:05:15.690 --> 00:05:15.930
<v Speaker 1>from.

00:05:16.564 --> 00:05:19.125
<v Speaker 1>So you you collect data in that data

00:05:19.125 --> 00:05:19.764
<v Speaker 1>model,

00:05:20.085 --> 00:05:22.724
<v Speaker 1>and then it goes together with a query

00:05:22.724 --> 00:05:24.965
<v Speaker 1>language called PromQL, which we're going to talk

00:05:24.965 --> 00:05:26.085
<v Speaker 1>more about, I guess,

00:05:26.405 --> 00:05:28.965
<v Speaker 1>which really makes use of that data model

00:05:28.965 --> 00:05:31.940
<v Speaker 1>where you can, you know, slice and dice

00:05:31.940 --> 00:05:34.500
<v Speaker 1>your data as people love saying. So really

00:05:34.500 --> 00:05:36.660
<v Speaker 1>select exactly the data you want and then

00:05:36.660 --> 00:05:39.460
<v Speaker 1>aggregate it by any of that dimensionality

00:05:39.460 --> 00:05:40.340
<v Speaker 1>that you have,

00:05:40.980 --> 00:05:44.100
<v Speaker 1>but also do more complex operations between whole

00:05:44.100 --> 00:05:46.825
<v Speaker 1>sets of time series, like binary operations between

00:05:46.825 --> 00:05:48.265
<v Speaker 1>sets of time series,

00:05:48.265 --> 00:05:49.945
<v Speaker 1>different transformations,

00:05:50.105 --> 00:05:51.705
<v Speaker 1>taking rates over counters,

00:05:52.025 --> 00:05:55.145
<v Speaker 1>filtering, etcetera, etcetera. So pretty flexible.

00:05:55.625 --> 00:05:58.585
<v Speaker 1>And, yeah, I guess, I mean, that's basically

00:05:58.585 --> 00:06:00.265
<v Speaker 1>it. So you have the data model. You

00:06:00.265 --> 00:06:02.010
<v Speaker 1>have the pull based collection. You have the

00:06:02.010 --> 00:06:02.970
<v Speaker 1>query language.

00:06:03.290 --> 00:06:05.530
<v Speaker 1>It's pretty efficient in its implementation.

00:06:05.930 --> 00:06:08.170
<v Speaker 1>I do have to say, though, Prometheus itself,

00:06:08.170 --> 00:06:09.610
<v Speaker 1>the vanilla Prometheus,

00:06:09.930 --> 00:06:10.490
<v Speaker 1>is

00:06:10.970 --> 00:06:13.050
<v Speaker 1>explicitly not a horizontally

00:06:13.050 --> 00:06:13.610
<v Speaker 1>scalable

00:06:14.185 --> 00:06:15.145
<v Speaker 1>cloud

00:06:15.465 --> 00:06:17.384
<v Speaker 1>thing cluster based thing where you just press

00:06:17.384 --> 00:06:19.305
<v Speaker 1>a button after adding more machines, and it

00:06:19.305 --> 00:06:20.905
<v Speaker 1>just naturally scales up.

00:06:21.225 --> 00:06:22.345
<v Speaker 1>Prometheus

00:06:22.345 --> 00:06:23.785
<v Speaker 1>itself is

00:06:24.585 --> 00:06:27.780
<v Speaker 1>a single host server of which you can

00:06:27.780 --> 00:06:31.139
<v Speaker 1>run multiple that run-in loose federations doing different

00:06:31.139 --> 00:06:31.700
<v Speaker 1>things.

00:06:33.220 --> 00:06:36.260
<v Speaker 1>But we explicitly wanted to avoid

00:06:36.260 --> 00:06:38.740
<v Speaker 1>complex clustering in the system because a lot

00:06:38.740 --> 00:06:41.139
<v Speaker 1>of things can go wrong in complex clustering,

00:06:41.139 --> 00:06:41.380
<v Speaker 1>and

00:06:42.225 --> 00:06:45.505
<v Speaker 1>we basically want Prometheus to be very reliable

00:06:45.505 --> 00:06:48.225
<v Speaker 1>and simple in its architecture and not get

00:06:48.225 --> 00:06:51.105
<v Speaker 1>stuck on, like, some replication or not being

00:06:51.105 --> 00:06:52.865
<v Speaker 1>able to talk to other cluster members or

00:06:52.865 --> 00:06:54.945
<v Speaker 1>so. So, you know, if you want high

00:06:54.945 --> 00:06:57.570
<v Speaker 1>availability in Prometheus, you just run two of

00:06:57.570 --> 00:07:00.370
<v Speaker 1>the same server. They do the same collection,

00:07:00.449 --> 00:07:02.530
<v Speaker 1>the same alert computation,

00:07:02.530 --> 00:07:04.450
<v Speaker 1>and then later on, you have a component

00:07:04.530 --> 00:07:07.330
<v Speaker 1>called the alert manager, which actually deduplicates

00:07:07.330 --> 00:07:09.650
<v Speaker 1>things for you. But they don't actually talk

00:07:09.650 --> 00:07:11.970
<v Speaker 1>to each other, like the two replicas doing

00:07:11.970 --> 00:07:14.164
<v Speaker 1>the same thing. So I guess that's important

00:07:14.164 --> 00:07:15.044
<v Speaker 1>to understand.

00:07:15.444 --> 00:07:17.525
<v Speaker 1>Of course, then you don't really wanna overwhelm

00:07:17.525 --> 00:07:20.645
<v Speaker 1>those two identical replicas because then both break.

00:07:21.845 --> 00:07:23.764
<v Speaker 1>But So that that's kind of the core

00:07:23.764 --> 00:07:24.645
<v Speaker 1>philosophy,

00:07:24.645 --> 00:07:27.365
<v Speaker 1>but then there's also reimplementations

00:07:27.365 --> 00:07:28.485
<v Speaker 1>of Prometheus

00:07:28.780 --> 00:07:31.580
<v Speaker 1>that take different trade offs. There's, for example,

00:07:31.580 --> 00:07:32.460
<v Speaker 1>Cortex

00:07:32.460 --> 00:07:35.419
<v Speaker 1>initially started by Weaveworks. Now it's more dominant,

00:07:35.419 --> 00:07:36.060
<v Speaker 1>I guess,

00:07:36.460 --> 00:07:39.980
<v Speaker 1>lead led by Grafana Labs and others where

00:07:40.380 --> 00:07:42.455
<v Speaker 1>the trade off in Cortex is, yeah, we

00:07:42.455 --> 00:07:44.294
<v Speaker 1>want to have something like Prometheus but more

00:07:44.294 --> 00:07:45.655
<v Speaker 1>horizontally scalable.

00:07:46.535 --> 00:07:47.255
<v Speaker 1>Basically,

00:07:47.414 --> 00:07:49.574
<v Speaker 1>you just add more machines, press a button,

00:07:49.574 --> 00:07:51.175
<v Speaker 1>and it still works.

00:07:51.495 --> 00:07:53.175
<v Speaker 1>But it comes with with different trade offs.

00:07:53.175 --> 00:07:55.095
<v Speaker 1>It's it's a it's a way bigger beast

00:07:55.095 --> 00:07:55.735
<v Speaker 1>to operate.

00:07:57.080 --> 00:07:59.640
<v Speaker 0>Awesome. That is a fantastic overview.

00:08:00.040 --> 00:08:02.440
<v Speaker 0>And I'm I'm looking forward to diving into

00:08:02.440 --> 00:08:05.480
<v Speaker 0>each of those different components, particularly PromQL.

00:08:05.480 --> 00:08:06.840
<v Speaker 0>I know from the events that I go

00:08:06.840 --> 00:08:08.200
<v Speaker 0>through that it's a it can be a

00:08:08.200 --> 00:08:10.145
<v Speaker 0>little bit difficult for some people to reason

00:08:10.145 --> 00:08:11.425
<v Speaker 0>around it. And I'm hoping we can just

00:08:11.425 --> 00:08:13.025
<v Speaker 0>simplify that for them today.

00:08:13.425 --> 00:08:15.825
<v Speaker 0>There's there's a question that I've always wanted

00:08:15.825 --> 00:08:16.945
<v Speaker 0>to ask someone

00:08:17.185 --> 00:08:18.865
<v Speaker 0>and I think you're a good person to

00:08:18.865 --> 00:08:22.065
<v Speaker 0>answer it. And the question relates to why.

00:08:22.465 --> 00:08:24.145
<v Speaker 0>Why would you write your own database?

00:08:24.919 --> 00:08:27.080
<v Speaker 0>Like, there must be a certain level of

00:08:27.319 --> 00:08:30.599
<v Speaker 1>Your database or a whole own monitoring system?

00:08:30.599 --> 00:08:32.839
<v Speaker 0>Well, just the database, but, you know, it

00:08:33.000 --> 00:08:35.320
<v Speaker 0>it's it's such a difficult and challenging task

00:08:35.320 --> 00:08:37.079
<v Speaker 0>to go into to write, like, a TSTP

00:08:37.079 --> 00:08:40.715
<v Speaker 0>specifically here rather than using another database.

00:08:40.955 --> 00:08:43.275
<v Speaker 1>I mean, like, when we started out in

00:08:43.275 --> 00:08:44.235
<v Speaker 1>02/2012,

00:08:44.235 --> 00:08:45.755
<v Speaker 1>at least, we looked at everything that was

00:08:45.755 --> 00:08:48.075
<v Speaker 1>out there, and we're really not happy with

00:08:48.075 --> 00:08:50.714
<v Speaker 1>any of them in terms of efficiency.

00:08:50.714 --> 00:08:53.195
<v Speaker 1>So SoundCloud was using graphite, for example, back

00:08:53.195 --> 00:08:53.435
<v Speaker 1>then.

00:08:54.890 --> 00:08:55.529
<v Speaker 1>And,

00:08:56.089 --> 00:08:58.329
<v Speaker 1>yeah, the format, at least, we're using back

00:08:58.329 --> 00:09:00.410
<v Speaker 1>then and also the data model that it

00:09:00.410 --> 00:09:03.769
<v Speaker 1>was using, both strictly hierarchical and not dimension

00:09:03.769 --> 00:09:04.490
<v Speaker 1>based.

00:09:04.810 --> 00:09:06.810
<v Speaker 1>And the query language that goes along with

00:09:06.810 --> 00:09:09.795
<v Speaker 1>it were really inflexible and also not efficient

00:09:09.795 --> 00:09:10.755
<v Speaker 1>in storage,

00:09:11.475 --> 00:09:13.394
<v Speaker 1>not doing exactly what we wanted,

00:09:13.795 --> 00:09:16.675
<v Speaker 1>and expecting very regular collection intervals in these

00:09:16.675 --> 00:09:18.355
<v Speaker 1>things that Prometheus doesn't have.

00:09:19.635 --> 00:09:21.954
<v Speaker 1>And I could say similar things about

00:09:22.550 --> 00:09:25.269
<v Speaker 1>almost all of the other areas that ended

00:09:25.269 --> 00:09:26.790
<v Speaker 1>up being in Prometheus, like,

00:09:28.470 --> 00:09:30.790
<v Speaker 1>yeah, the way yeah, the data model,

00:09:31.110 --> 00:09:34.069
<v Speaker 1>UI. Although, I mean, Prometheus is known particularly

00:09:34.069 --> 00:09:36.310
<v Speaker 1>for a great UI either at the moment.

00:09:36.310 --> 00:09:39.110
<v Speaker 1>That's part of of the reason PromLens is

00:09:38.445 --> 00:09:39.805
<v Speaker 1>now starting to exist.

00:09:40.685 --> 00:09:42.605
<v Speaker 1>But when we were looking all all these

00:09:42.605 --> 00:09:45.565
<v Speaker 1>different areas, how alerts tie into things,

00:09:45.725 --> 00:09:48.045
<v Speaker 1>really being integrated into the time series system,

00:09:48.045 --> 00:09:50.285
<v Speaker 1>but usually being a separate system like and

00:09:50.285 --> 00:09:50.525
<v Speaker 1>so on,

00:09:51.899 --> 00:09:55.019
<v Speaker 1>We really wanted to have, like, have it

00:09:55.019 --> 00:09:57.579
<v Speaker 1>work different in all of those aspects,

00:09:57.819 --> 00:09:59.740
<v Speaker 1>so we were really kind of stuck with

00:09:59.740 --> 00:10:01.100
<v Speaker 1>building our own.

00:10:02.540 --> 00:10:04.779
<v Speaker 1>By now, I think there are

00:10:05.100 --> 00:10:07.420
<v Speaker 1>probably, like, more alternatives

00:10:08.995 --> 00:10:12.035
<v Speaker 1>that we maybe could base ourselves on. But,

00:10:12.915 --> 00:10:15.235
<v Speaker 1>you know, PromQL and the way it selects

00:10:15.235 --> 00:10:16.035
<v Speaker 1>data

00:10:16.195 --> 00:10:19.155
<v Speaker 1>and does certain things, it also has certain

00:10:19.155 --> 00:10:19.715
<v Speaker 1>specific,

00:10:22.130 --> 00:10:24.530
<v Speaker 1>both, I think, requirements to the TSDB, but

00:10:24.530 --> 00:10:25.170
<v Speaker 1>also

00:10:25.890 --> 00:10:28.210
<v Speaker 1>things that can leave out that more general

00:10:28.210 --> 00:10:29.170
<v Speaker 1>databases

00:10:29.170 --> 00:10:30.850
<v Speaker 1>would have to support. Like, for example, if

00:10:30.850 --> 00:10:32.290
<v Speaker 1>you look at InfluxDB,

00:10:32.290 --> 00:10:35.245
<v Speaker 1>it supports all kind of data types, etcetera,

00:10:35.245 --> 00:10:37.565
<v Speaker 1>etcetera, but that makes it necessarily a way

00:10:37.565 --> 00:10:40.365
<v Speaker 1>more complex code base versus what we have

00:10:40.365 --> 00:10:42.925
<v Speaker 1>in Prometheus, which is exactly optimized

00:10:43.245 --> 00:10:45.565
<v Speaker 1>towards purely numeric time series,

00:10:46.140 --> 00:10:47.020
<v Speaker 1>exactly

00:10:47.020 --> 00:10:49.420
<v Speaker 1>this label based data model and nothing else.

00:10:49.420 --> 00:10:51.980
<v Speaker 1>So it's really, really well optimized towards that

00:10:51.980 --> 00:10:53.340
<v Speaker 1>currently. And, also,

00:10:54.220 --> 00:10:55.580
<v Speaker 1>what you had previously,

00:10:57.180 --> 00:11:00.565
<v Speaker 1>in more static environments where things weren't changing

00:11:00.565 --> 00:11:02.725
<v Speaker 1>around so much, you had more long lived

00:11:02.725 --> 00:11:03.765
<v Speaker 1>time series,

00:11:05.285 --> 00:11:07.045
<v Speaker 1>where you have your server and you just

00:11:07.125 --> 00:11:08.644
<v Speaker 1>like, you monitor it and you see the

00:11:08.644 --> 00:11:11.045
<v Speaker 1>CPU usage over a year or whatever.

00:11:11.285 --> 00:11:11.845
<v Speaker 1>And,

00:11:12.165 --> 00:11:14.084
<v Speaker 1>the time series sticks around for a long

00:11:14.084 --> 00:11:16.220
<v Speaker 1>time, though. Now what you have on Kubernetes

00:11:16.220 --> 00:11:17.580
<v Speaker 1>clusters, especially,

00:11:18.540 --> 00:11:19.260
<v Speaker 1>since

00:11:19.899 --> 00:11:21.899
<v Speaker 1>the pod name and

00:11:22.380 --> 00:11:25.660
<v Speaker 1>certain other ephemeral identifiers become part of your

00:11:25.660 --> 00:11:27.899
<v Speaker 1>time series identity, so as part of a

00:11:27.899 --> 00:11:28.540
<v Speaker 1>label,

00:11:28.940 --> 00:11:30.779
<v Speaker 1>the actual time series

00:11:31.225 --> 00:11:33.625
<v Speaker 1>that exists at any given point of time

00:11:33.625 --> 00:11:36.345
<v Speaker 1>change all the time. So you need to

00:11:36.345 --> 00:11:38.105
<v Speaker 1>index them in a way more efficient way

00:11:38.105 --> 00:11:40.905
<v Speaker 1>that is suited for this more dynamic world,

00:11:41.145 --> 00:11:43.465
<v Speaker 1>and that was also not really much the

00:11:43.465 --> 00:11:45.305
<v Speaker 1>case back then with time

00:11:45.305 --> 00:11:46.105
<v Speaker 1>series databases.

00:11:46.860 --> 00:11:48.940
<v Speaker 0>Yeah. Well, I mean, I I applaud you

00:11:48.940 --> 00:11:50.460
<v Speaker 0>for doing it. It's one of those things.

00:11:50.460 --> 00:11:52.700
<v Speaker 0>I think, personally, for me, having looked into

00:11:52.700 --> 00:11:54.300
<v Speaker 0>writing my own database just as a as

00:11:54.300 --> 00:11:56.540
<v Speaker 0>a hobby and fun to learn is one

00:11:56.540 --> 00:11:58.380
<v Speaker 0>of the most daunting tasks I think I've

00:11:58.380 --> 00:12:00.620
<v Speaker 0>ever tried to to take on. So Yeah.

00:12:00.620 --> 00:12:02.855
<v Speaker 1>I mean, I I gotta say, I mean,

00:12:02.855 --> 00:12:05.255
<v Speaker 1>I started we started out with a really

00:12:05.335 --> 00:12:06.375
<v Speaker 1>inefficient,

00:12:06.375 --> 00:12:08.055
<v Speaker 1>dumb implementation,

00:12:08.055 --> 00:12:09.575
<v Speaker 1>and then we went through separate

00:12:10.055 --> 00:12:10.775
<v Speaker 1>several

00:12:10.935 --> 00:12:12.455
<v Speaker 1>revisions,

00:12:12.455 --> 00:12:13.975
<v Speaker 1>including, like, a complete

00:12:15.089 --> 00:12:18.050
<v Speaker 1>re architecting that works completely different, which is

00:12:18.050 --> 00:12:19.170
<v Speaker 1>the current storage.

00:12:19.490 --> 00:12:21.810
<v Speaker 1>And that has become way, way better than

00:12:21.810 --> 00:12:23.970
<v Speaker 1>than the previous iterations at actually,

00:12:24.610 --> 00:12:25.810
<v Speaker 1>yeah, indexing,

00:12:25.970 --> 00:12:28.050
<v Speaker 1>changing series over time, and so on and

00:12:28.050 --> 00:12:31.024
<v Speaker 1>so on. And there's now just many companies,

00:12:31.264 --> 00:12:33.265
<v Speaker 1>full time employing people who are

00:12:34.464 --> 00:12:37.105
<v Speaker 1>at least part time, you know, really doing

00:12:37.105 --> 00:12:40.385
<v Speaker 1>great contributions to making the TSTP, like, way

00:12:40.385 --> 00:12:42.150
<v Speaker 1>more memory efficient,

00:12:42.310 --> 00:12:44.230
<v Speaker 1>faster lookups, and so on and so on.

00:12:44.230 --> 00:12:45.910
<v Speaker 1>So it's it's gotten really much better over

00:12:45.910 --> 00:12:47.350
<v Speaker 1>the last couple of years.

00:12:47.830 --> 00:12:48.550
<v Speaker 0>Nice.

00:12:48.710 --> 00:12:50.390
<v Speaker 0>And so we do have our first question,

00:12:50.390 --> 00:12:51.910
<v Speaker 0>so I'm gonna pop that up. But we

00:12:51.910 --> 00:12:54.310
<v Speaker 0>have a question from Ilya who's asking,

00:12:54.710 --> 00:12:56.945
<v Speaker 0>could we could you have used an OSQL

00:12:56.945 --> 00:12:59.505
<v Speaker 0>database? Would that have worked? What or or

00:12:59.505 --> 00:13:01.265
<v Speaker 0>did you or do you need to use

00:13:01.265 --> 00:13:03.505
<v Speaker 0>something that is specific for time series data?

00:13:04.305 --> 00:13:06.945
<v Speaker 0>I mean, we started with that with local

00:13:06.945 --> 00:13:08.945
<v Speaker 1>host level DB, so we didn't wanna have

00:13:08.945 --> 00:13:09.985
<v Speaker 1>anything that's

00:13:10.540 --> 00:13:12.620
<v Speaker 1>over the network or so. We wanted to

00:13:12.940 --> 00:13:15.500
<v Speaker 1>as I said, initially, a simple architecture

00:13:15.660 --> 00:13:19.180
<v Speaker 1>where it's a single process owning everything locally

00:13:19.180 --> 00:13:21.340
<v Speaker 1>that you can rely on. So if the

00:13:21.340 --> 00:13:23.660
<v Speaker 1>network breaks down, your monitoring system at least

00:13:23.925 --> 00:13:24.965
<v Speaker 1>can still work.

00:13:25.685 --> 00:13:27.685
<v Speaker 1>So a lot of the network based stuff

00:13:27.685 --> 00:13:29.845
<v Speaker 1>wasn't really that attractive for us, and we

00:13:29.845 --> 00:13:33.205
<v Speaker 1>wanted it to be simple to operate, kind

00:13:33.205 --> 00:13:35.605
<v Speaker 1>of built in to go. So but, yeah,

00:13:35.605 --> 00:13:37.765
<v Speaker 1>initially, we we had LevelDB, which is an

00:13:37.765 --> 00:13:40.020
<v Speaker 1>in process key value store, and we based

00:13:40.020 --> 00:13:42.420
<v Speaker 1>our indexes on that. And you can do

00:13:42.420 --> 00:13:44.740
<v Speaker 1>that, but it's at least the design that

00:13:44.740 --> 00:13:46.340
<v Speaker 1>we had initially that I came up with

00:13:46.340 --> 00:13:47.460
<v Speaker 1>wasn't too great.

00:13:48.420 --> 00:13:48.980
<v Speaker 1>And

00:13:50.020 --> 00:13:52.740
<v Speaker 1>it it didn't deal well with

00:13:53.834 --> 00:13:56.154
<v Speaker 1>with this changing indexing

00:13:56.154 --> 00:13:57.595
<v Speaker 1>of series over time.

00:13:58.154 --> 00:13:58.714
<v Speaker 1>And

00:13:59.115 --> 00:14:02.235
<v Speaker 1>the current database that Fabian came

00:14:02.635 --> 00:14:05.195
<v Speaker 1>up with with the design is just a

00:14:05.195 --> 00:14:09.220
<v Speaker 1>complete rewrite from scratch, encoding everything exactly how

00:14:09.220 --> 00:14:11.940
<v Speaker 1>we need it after already having many years

00:14:11.940 --> 00:14:14.180
<v Speaker 1>of experience what exactly we do need.

00:14:14.500 --> 00:14:15.060
<v Speaker 1>And,

00:14:16.339 --> 00:14:18.260
<v Speaker 1>yeah, I I think I'm not able, like,

00:14:18.260 --> 00:14:20.900
<v Speaker 1>to dive too deeply into the theory of

00:14:20.900 --> 00:14:21.300
<v Speaker 1>why

00:14:21.779 --> 00:14:22.660
<v Speaker 1>a particular

00:14:23.285 --> 00:14:26.565
<v Speaker 1>underlying NoSQL database would work well or not

00:14:26.565 --> 00:14:28.565
<v Speaker 1>because I'm not too much of an actual

00:14:28.565 --> 00:14:29.765
<v Speaker 1>database expert.

00:14:31.285 --> 00:14:33.205
<v Speaker 1>But, yeah, I can only say that the

00:14:33.205 --> 00:14:35.125
<v Speaker 1>current revision of what we have, which doesn't

00:14:35.125 --> 00:14:37.205
<v Speaker 1>use one anymore, works way better than what

00:14:37.205 --> 00:14:38.085
<v Speaker 1>we

00:14:39.390 --> 00:14:41.150
<v Speaker 0>Yeah. And I think the point you made

00:14:41.150 --> 00:14:43.230
<v Speaker 0>earlier as well is really important here is

00:14:43.230 --> 00:14:44.030
<v Speaker 0>that the

00:14:44.670 --> 00:14:46.430
<v Speaker 0>time to live or how long we keep

00:14:46.430 --> 00:14:48.270
<v Speaker 0>around our monitoring data or time series data

00:14:48.270 --> 00:14:50.030
<v Speaker 0>is drastically different to maybe, like, a no

00:14:50.355 --> 00:14:52.675
<v Speaker 0>a no SQL store as well. And that,

00:14:52.675 --> 00:14:53.635
<v Speaker 0>you know, we have to be able to

00:14:53.635 --> 00:14:55.714
<v Speaker 0>deprecate or kill off that data on a

00:14:55.714 --> 00:14:57.714
<v Speaker 0>regular interval and the sharding model can all

00:14:57.714 --> 00:14:59.315
<v Speaker 0>change like yeah. There's a lot of bet

00:14:59.395 --> 00:15:01.154
<v Speaker 0>lot of database to do there. Yep. So

00:15:01.154 --> 00:15:01.715
<v Speaker 0>why

00:15:02.515 --> 00:15:03.154
<v Speaker 0>don't we

00:15:04.430 --> 00:15:05.790
<v Speaker 0>install Prometheus?

00:15:05.790 --> 00:15:08.829
<v Speaker 0>Like, let's let's show people how it works.

00:15:09.630 --> 00:15:12.509
<v Speaker 0>So I have the prometheus.i0

00:15:12.509 --> 00:15:14.110
<v Speaker 0>website here.

00:15:14.509 --> 00:15:14.990
<v Speaker 0>Mhmm.

00:15:15.310 --> 00:15:18.155
<v Speaker 0>Now have we just figure it out without

00:15:18.155 --> 00:15:19.355
<v Speaker 1>me telling you anything.

00:15:20.875 --> 00:15:21.835
<v Speaker 0>Yeah.

00:15:22.395 --> 00:15:24.555
<v Speaker 0>Sure. I mean, I'm what I'm thinking here

00:15:24.555 --> 00:15:26.475
<v Speaker 0>is do we wanna jump straight into the

00:15:26.475 --> 00:15:28.715
<v Speaker 0>02/22 RC, or should we play it safe

00:15:28.715 --> 00:15:30.210
<v Speaker 0>and go with the 02/21?

00:15:30.529 --> 00:15:32.130
<v Speaker 1>I think it shouldn't matter. I think this

00:15:32.290 --> 00:15:34.050
<v Speaker 1>the RC should be pretty fine, but either

00:15:34.050 --> 00:15:36.050
<v Speaker 1>is totally fine. It's not a lot of

00:15:36.050 --> 00:15:38.290
<v Speaker 1>changes in the latest version.

00:15:40.130 --> 00:15:43.490
<v Speaker 0>Alright. So I have a Linux machine here.

00:15:44.285 --> 00:15:46.525
<v Speaker 0>Hopefully, with Carl, that's a good start.

00:15:47.485 --> 00:15:49.325
<v Speaker 0>And I will just download.

00:15:50.045 --> 00:15:50.685
<v Speaker 0>Perfect.

00:15:55.325 --> 00:15:56.765
<v Speaker 0>What did I get wrong there?

00:16:00.060 --> 00:16:01.340
<v Speaker 0>Let me try again.

00:16:02.700 --> 00:16:04.860
<v Speaker 0>Oh, there's a redirect. Okay. So

00:16:06.380 --> 00:16:08.060
<v Speaker 0>let me oh, what's the flag for the

00:16:08.060 --> 00:16:10.300
<v Speaker 0>redirect? It's dash l? Isn't it yeah. Just

00:16:10.300 --> 00:16:12.380
<v Speaker 1>capital l. I think capital l. Right?

00:16:14.275 --> 00:16:15.315
<v Speaker 0>This

00:16:18.835 --> 00:16:20.675
<v Speaker 0>isn't supposed to be the difficult part. There

00:16:20.755 --> 00:16:21.955
<v Speaker 0>we go. Nothing

00:16:22.035 --> 00:16:23.955
<v Speaker 1>would go wrong today. Okay. Let me actually

00:16:23.955 --> 00:16:24.595
<v Speaker 1>check.

00:16:25.475 --> 00:16:28.570
<v Speaker 0>W get. Doesn't matter. Sorry, Carl. I'm not

00:16:28.730 --> 00:16:30.570
<v Speaker 0>I'm no longer your friend. So

00:16:32.490 --> 00:16:34.010
<v Speaker 0>we can extract this

00:16:34.410 --> 00:16:36.170
<v Speaker 0>and if we go in here,

00:16:37.930 --> 00:16:41.290
<v Speaker 0>upper binaries. So right away when we untar

00:16:41.290 --> 00:16:44.135
<v Speaker 0>this fail, we've got Prometheus binary and a

00:16:44.135 --> 00:16:45.175
<v Speaker 0>prompt tool.

00:16:45.415 --> 00:16:47.575
<v Speaker 1>Yeah. Actually, that's maybe the the first thing

00:16:47.575 --> 00:16:49.255
<v Speaker 1>that we should do is delete stuff we

00:16:49.255 --> 00:16:51.335
<v Speaker 1>don't need in here, which is completely optional,

00:16:51.335 --> 00:16:54.055
<v Speaker 1>like delete license notice console libraries and consoles.

00:16:56.019 --> 00:16:58.180
<v Speaker 1>And you'll need the dash r, yeah, for

00:16:58.180 --> 00:16:59.380
<v Speaker 1>the console

00:16:59.620 --> 00:17:00.180
<v Speaker 1>stuff.

00:17:00.660 --> 00:17:02.339
<v Speaker 1>Those are kind of optional things like the

00:17:02.339 --> 00:17:04.660
<v Speaker 1>consoles, the kind of HTML templates you can

00:17:04.660 --> 00:17:05.780
<v Speaker 1>serve directly

00:17:05.780 --> 00:17:08.099
<v Speaker 1>from the Prometheus server. It's a very niche

00:17:08.099 --> 00:17:11.464
<v Speaker 1>use case. Almost never nobody uses it. So

00:17:11.464 --> 00:17:13.785
<v Speaker 1>this is the the remaining three files are

00:17:13.785 --> 00:17:15.464
<v Speaker 1>kind of what you actually need or actually

00:17:15.464 --> 00:17:18.744
<v Speaker 1>only need the Prometheus binary and a configuration

00:17:18.744 --> 00:17:21.145
<v Speaker 1>file, which is YAML in true cloud manner,

00:17:21.145 --> 00:17:23.500
<v Speaker 1>which we all love, of course. And

00:17:23.740 --> 00:17:25.339
<v Speaker 1>the prompt tool is kind of just like

00:17:25.339 --> 00:17:27.260
<v Speaker 1>a side helper tool. For example, you can

00:17:27.260 --> 00:17:30.300
<v Speaker 1>use it in CI checks to verify that

00:17:30.300 --> 00:17:32.700
<v Speaker 1>a configuration file is really valid before you

00:17:32.700 --> 00:17:35.180
<v Speaker 1>apply it to your Prometheus server or check

00:17:35.180 --> 00:17:35.900
<v Speaker 1>it into production.

00:17:36.485 --> 00:17:38.325
<v Speaker 1>And it can do some other linting and

00:17:38.325 --> 00:17:40.565
<v Speaker 1>and helping things, but we don't really need

00:17:40.565 --> 00:17:41.765
<v Speaker 1>it probably today.

00:17:41.925 --> 00:17:44.325
<v Speaker 1>So the core thing, you have a go

00:17:44.325 --> 00:17:45.045
<v Speaker 1>binary.

00:17:45.445 --> 00:17:48.325
<v Speaker 1>It will store its data locally in a

00:17:48.325 --> 00:17:50.485
<v Speaker 1>directory that you tell it to. By default,

00:17:50.485 --> 00:17:52.909
<v Speaker 1>it will just be dot slash data

00:17:52.910 --> 00:17:54.590
<v Speaker 1>in the current directory.

00:17:54.990 --> 00:17:56.750
<v Speaker 1>And the configuration

00:17:56.750 --> 00:17:59.790
<v Speaker 1>file, it that is there, its main job

00:17:59.790 --> 00:18:01.549
<v Speaker 1>is to tell Prometheus

00:18:02.110 --> 00:18:02.910
<v Speaker 1>what

00:18:03.725 --> 00:18:06.445
<v Speaker 1>endpoints to scrape and how to label the

00:18:06.445 --> 00:18:08.685
<v Speaker 1>data coming from those endpoints. I mean, there's

00:18:08.685 --> 00:18:10.605
<v Speaker 1>some other settings as well in the config

00:18:10.605 --> 00:18:11.164
<v Speaker 1>file.

00:18:11.725 --> 00:18:13.405
<v Speaker 1>It will tell us, if if we do

00:18:13.405 --> 00:18:15.645
<v Speaker 1>that at some point, how to talk to

00:18:15.645 --> 00:18:18.949
<v Speaker 1>the alert manager to actually send alert notifications,

00:18:19.110 --> 00:18:21.350
<v Speaker 1>how to send data to a remote storage

00:18:21.350 --> 00:18:23.269
<v Speaker 1>system if you want to keep it for

00:18:23.269 --> 00:18:23.909
<v Speaker 1>later,

00:18:24.149 --> 00:18:24.709
<v Speaker 1>etcetera,

00:18:25.029 --> 00:18:26.710
<v Speaker 1>etcetera. But the main thing that we'll be

00:18:26.710 --> 00:18:27.429
<v Speaker 1>dealing with

00:18:28.389 --> 00:18:32.245
<v Speaker 1>is basically the the scraping the scrape configs,

00:18:32.245 --> 00:18:33.925
<v Speaker 1>which you see at the bottom. Maybe just

00:18:33.925 --> 00:18:36.725
<v Speaker 1>for our demo, let's change the global scrape

00:18:36.725 --> 00:18:39.605
<v Speaker 1>interval to five seconds so we see results

00:18:39.605 --> 00:18:41.205
<v Speaker 1>and changes coming in faster.

00:18:43.790 --> 00:18:45.790
<v Speaker 1>So, you know, in in production, that's a

00:18:45.790 --> 00:18:48.510
<v Speaker 1>pretty aggressive scrape interval. Typically, you go for

00:18:48.510 --> 00:18:50.750
<v Speaker 1>maybe fifteen seconds to a minute or so.

00:18:50.750 --> 00:18:51.230
<v Speaker 1>Sometimes

00:18:52.030 --> 00:18:54.110
<v Speaker 1>people do a second, but that's you know,

00:18:54.110 --> 00:18:55.550
<v Speaker 1>you need to have the capacity for that.

00:18:57.205 --> 00:18:59.605
<v Speaker 1>Yep. So this means Prometheus,

00:18:59.605 --> 00:19:02.645
<v Speaker 1>by default, will go out every five seconds

00:19:02.645 --> 00:19:04.965
<v Speaker 1>to every target, as we call it, these

00:19:04.965 --> 00:19:07.525
<v Speaker 1>endpoints that it knows about, and collect the

00:19:07.525 --> 00:19:09.605
<v Speaker 1>current value of each metric from there.

00:19:11.080 --> 00:19:13.240
<v Speaker 1>And, yeah, in this default configuration here, you

00:19:13.240 --> 00:19:16.679
<v Speaker 1>see Prometheus only scraping one thing, and that's

00:19:16.679 --> 00:19:18.519
<v Speaker 1>itself. So Prometheus,

00:19:18.600 --> 00:19:19.879
<v Speaker 1>obviously, also

00:19:20.120 --> 00:19:23.480
<v Speaker 1>exposes metrics about itself on port nineteen ninety

00:19:23.995 --> 00:19:26.315
<v Speaker 1>where it also runs its web interface.

00:19:26.554 --> 00:19:27.034
<v Speaker 1>And,

00:19:28.875 --> 00:19:30.875
<v Speaker 1>yeah, this this this setup, as you see

00:19:30.875 --> 00:19:32.875
<v Speaker 1>it here, is completely useless. It will just

00:19:32.875 --> 00:19:34.955
<v Speaker 1>monitor itself, but it's a good way to

00:19:34.955 --> 00:19:36.475
<v Speaker 1>start and see if everything's working.

00:19:37.440 --> 00:19:39.359
<v Speaker 0>Awesome. So you're saying

00:19:39.840 --> 00:19:41.919
<v Speaker 0>we got a default config for scraping every

00:19:41.919 --> 00:19:44.559
<v Speaker 0>five seconds for scraping ourselves. So I could

00:19:44.559 --> 00:19:45.519
<v Speaker 0>just run.

00:19:46.240 --> 00:19:49.360
<v Speaker 1>Just run Prometheus. Maybe maybe one one additional

00:19:49.360 --> 00:19:50.960
<v Speaker 1>flag to add that would be nice was

00:19:50.960 --> 00:19:53.755
<v Speaker 1>your current what, like, if you

00:19:54.235 --> 00:19:56.475
<v Speaker 1>there are certain links in the Prometheus web

00:19:56.475 --> 00:20:00.154
<v Speaker 1>interface where Prometheus links back to itself.

00:20:01.915 --> 00:20:04.875
<v Speaker 1>And if you are like, if this is

00:20:04.875 --> 00:20:06.875
<v Speaker 1>kind of a virtual machine you're running and

00:20:06.875 --> 00:20:08.930
<v Speaker 1>if it's thinks it's local host, but if

00:20:08.930 --> 00:20:10.290
<v Speaker 1>you click the link and it doesn't really

00:20:10.290 --> 00:20:12.130
<v Speaker 1>bring you to that Prometheus because it's in

00:20:12.130 --> 00:20:14.610
<v Speaker 1>a VM or so, then we could tell

00:20:14.610 --> 00:20:15.650
<v Speaker 1>Prometheus

00:20:15.810 --> 00:20:17.650
<v Speaker 1>what its externally

00:20:17.650 --> 00:20:20.775
<v Speaker 1>visible URL is. So for example, from your

00:20:20.775 --> 00:20:22.935
<v Speaker 1>main host that you run your browser on,

00:20:22.935 --> 00:20:24.695
<v Speaker 1>it will be reachable under

00:20:25.015 --> 00:20:28.135
<v Speaker 1>my VM port nineteen ninety or IP something

00:20:28.135 --> 00:20:28.775
<v Speaker 1>something.

00:20:29.095 --> 00:20:29.655
<v Speaker 1>So,

00:20:30.135 --> 00:20:32.215
<v Speaker 1>these backlinks to itself, we can tell it

00:20:32.215 --> 00:20:33.735
<v Speaker 1>how to generate them properly. So

00:20:35.060 --> 00:20:37.140
<v Speaker 0>So this is a bare metal machine on

00:20:37.140 --> 00:20:40.180
<v Speaker 0>Equinix Metal. It is publicly available, but I'm

00:20:40.180 --> 00:20:42.500
<v Speaker 0>assuming we're okay because the Prometheus interface is

00:20:42.500 --> 00:20:44.580
<v Speaker 0>is read only. Is that correct? Yeah. That

00:20:44.660 --> 00:20:46.580
<v Speaker 1>that's fine. Yeah. Unless you enable the admin

00:20:46.580 --> 00:20:48.674
<v Speaker 1>interface and so on. Yeah. Yeah. By default,

00:20:48.674 --> 00:20:50.515
<v Speaker 1>it will be read only. People can DDoS

00:20:50.515 --> 00:20:52.034
<v Speaker 1>it, but I hope they won't.

00:20:52.275 --> 00:20:54.754
<v Speaker 1>So if you do dash dash dash and

00:20:55.235 --> 00:20:57.315
<v Speaker 1>then web dot external

00:20:57.315 --> 00:20:58.674
<v Speaker 1>dash URL

00:21:00.080 --> 00:21:01.039
<v Speaker 1>equals,

00:21:01.440 --> 00:21:03.120
<v Speaker 1>and then you need to provide the whole

00:21:03.120 --> 00:21:05.200
<v Speaker 1>URL. So it's like HTTP.

00:21:08.000 --> 00:21:09.039
<v Speaker 1>Yep.

00:21:09.760 --> 00:21:12.160
<v Speaker 1>And then nineteen ninety

00:21:12.595 --> 00:21:15.315
<v Speaker 1>should be correct. Yep. And then Prometheus will

00:21:15.315 --> 00:21:18.035
<v Speaker 1>know to modify the links to itself. Nice.

00:21:18.195 --> 00:21:21.155
<v Speaker 1>So, hopefully, we should yeah. We we see

00:21:21.155 --> 00:21:22.275
<v Speaker 1>it starting up.

00:21:22.675 --> 00:21:23.955
<v Speaker 1>It gives you a bit of a blurb

00:21:23.955 --> 00:21:26.595
<v Speaker 1>about versions. No errors. Good.

00:21:26.835 --> 00:21:27.475
<v Speaker 1>Let's

00:21:28.309 --> 00:21:29.190
<v Speaker 1>let's

00:21:29.190 --> 00:21:31.669
<v Speaker 1>maybe switch directly to the new UI. You

00:21:31.669 --> 00:21:33.429
<v Speaker 1>see the link in the top right there

00:21:33.429 --> 00:21:34.950
<v Speaker 1>in new. It's it just looks a bit

00:21:34.950 --> 00:21:35.909
<v Speaker 1>nicer already.

00:21:36.790 --> 00:21:39.029
<v Speaker 1>The old UI will go away soon.

00:21:39.910 --> 00:21:42.470
<v Speaker 1>And if you head to the very top

00:21:42.470 --> 00:21:44.390
<v Speaker 1>and click on status

00:21:45.085 --> 00:21:45.804
<v Speaker 1>and

00:21:46.205 --> 00:21:48.284
<v Speaker 1>targets, we want to be able to see

00:21:48.284 --> 00:21:50.845
<v Speaker 1>that it actually scrapes the one target it

00:21:50.845 --> 00:21:53.404
<v Speaker 1>knows about, which is Prometheus itself.

00:21:53.644 --> 00:21:55.885
<v Speaker 1>So in this case, if you click on

00:21:55.885 --> 00:21:56.845
<v Speaker 1>that local host link,

00:21:58.540 --> 00:22:00.059
<v Speaker 1>yep,

00:22:00.700 --> 00:22:03.340
<v Speaker 1>it see, now it actually applied this local

00:22:03.340 --> 00:22:03.980
<v Speaker 1>host

00:22:04.220 --> 00:22:05.980
<v Speaker 1>external URL trick.

00:22:06.060 --> 00:22:08.140
<v Speaker 1>So here, we can actually now see

00:22:08.460 --> 00:22:12.220
<v Speaker 1>the metrics exposed by Prometheus about its own

00:22:12.220 --> 00:22:14.595
<v Speaker 1>internal operations. It's written in Go, so it'll

00:22:14.595 --> 00:22:16.755
<v Speaker 1>tell you about, like, garbage collection, how many

00:22:16.755 --> 00:22:19.075
<v Speaker 1>go routines there are, etcetera, etcetera.

00:22:19.635 --> 00:22:21.555
<v Speaker 1>If you scroll further down, there will be

00:22:21.555 --> 00:22:24.674
<v Speaker 1>more metrics that are prefixed with Prometheus underscore,

00:22:24.835 --> 00:22:27.075
<v Speaker 1>and those will be more Prometheus specific, like

00:22:27.075 --> 00:22:28.755
<v Speaker 1>how many samples have I collected,

00:22:30.490 --> 00:22:33.210
<v Speaker 1>something about like, way more stats about its

00:22:33.210 --> 00:22:34.570
<v Speaker 1>internal TSDB,

00:22:34.570 --> 00:22:36.730
<v Speaker 1>how many targets, etcetera, etcetera.

00:22:37.610 --> 00:22:41.210
<v Speaker 1>By the way, there is a Chrome plugin,

00:22:41.210 --> 00:22:43.690
<v Speaker 1>which is really cool. It's called Prometheus

00:22:43.690 --> 00:22:44.250
<v Speaker 1>Formatter.

00:22:45.965 --> 00:22:47.484
<v Speaker 1>And if you

00:22:47.884 --> 00:22:50.845
<v Speaker 1>install it, then you will get this black

00:22:50.845 --> 00:22:53.085
<v Speaker 1>and white thing in nice colors and with

00:22:53.085 --> 00:22:56.044
<v Speaker 1>a bit better formatting, these metrics endpoints.

00:22:56.524 --> 00:22:57.965
<v Speaker 1>I don't know if you wanna install that

00:22:57.965 --> 00:22:59.725
<v Speaker 1>now, but it's it's I have it, and

00:22:59.725 --> 00:23:01.164
<v Speaker 1>I always always

00:23:01.380 --> 00:23:03.620
<v Speaker 0>I love it. Prometheus

00:23:03.620 --> 00:23:04.420
<v Speaker 0>Chrome

00:23:04.420 --> 00:23:05.300
<v Speaker 0>extension.

00:23:05.380 --> 00:23:07.940
<v Speaker 0>Why not? If it's if it's It's called

00:23:07.940 --> 00:23:09.460
<v Speaker 1>Prometheus Formatter.

00:23:09.700 --> 00:23:11.540
<v Speaker 0>Oh, there we go. There we go. Yeah.

00:23:11.540 --> 00:23:11.780
<v Speaker 1>Yeah.

00:23:12.615 --> 00:23:13.415
<v Speaker 0>Today,

00:23:13.415 --> 00:23:14.294
<v Speaker 0>I learned.

00:23:15.495 --> 00:23:17.015
<v Speaker 1>And it just makes it look a bit

00:23:17.015 --> 00:23:19.815
<v Speaker 1>nicer. Hopefully, it's not virus infected. Ta da.

00:23:19.815 --> 00:23:20.855
<v Speaker 1>Oh, that was nice.

00:23:22.615 --> 00:23:24.535
<v Speaker 0>Hopefully, it's not very thank you for that

00:23:24.535 --> 00:23:26.295
<v Speaker 0>as I just installed it on my Chrome

00:23:26.295 --> 00:23:26.535
<v Speaker 0>browser.

00:23:27.180 --> 00:23:29.580
<v Speaker 1>This is not investment advice. Okay.

00:23:31.180 --> 00:23:33.100
<v Speaker 1>So yeah. So it looks, you know, much

00:23:33.100 --> 00:23:35.500
<v Speaker 1>more readable already and much more friendly. So

00:23:35.500 --> 00:23:37.100
<v Speaker 1>what we see here is the data model

00:23:37.100 --> 00:23:38.220
<v Speaker 1>that I talked about.

00:23:38.780 --> 00:23:39.740
<v Speaker 1>Conceptually,

00:23:40.060 --> 00:23:42.220
<v Speaker 1>what happens in this format? So

00:23:42.735 --> 00:23:44.735
<v Speaker 1>when you go to this endpoint,

00:23:45.135 --> 00:23:46.414
<v Speaker 1>the process

00:23:46.655 --> 00:23:47.215
<v Speaker 1>that

00:23:47.615 --> 00:23:49.215
<v Speaker 1>you get metrics from

00:23:49.535 --> 00:23:51.375
<v Speaker 1>is basically instructed to

00:23:51.615 --> 00:23:54.575
<v Speaker 1>to serialize its current value

00:23:54.575 --> 00:23:56.335
<v Speaker 1>of each of the time series that it's

00:23:56.335 --> 00:23:58.640
<v Speaker 1>currently tracking into the Prometheus format. So you

00:23:58.640 --> 00:24:00.559
<v Speaker 1>get exactly the current value

00:24:00.800 --> 00:24:02.960
<v Speaker 1>of each of the time series in

00:24:03.600 --> 00:24:05.919
<v Speaker 1>that Prometheus is tracking about itself.

00:24:05.920 --> 00:24:07.680
<v Speaker 1>So it's not about what it has in

00:24:07.680 --> 00:24:08.560
<v Speaker 1>its TSTB.

00:24:09.135 --> 00:24:11.935
<v Speaker 1>So there's there's not really history included here,

00:24:11.935 --> 00:24:13.294
<v Speaker 1>like, what was the value

00:24:13.455 --> 00:24:14.975
<v Speaker 1>a minute ago or so.

00:24:15.615 --> 00:24:18.015
<v Speaker 1>Basically, the history is only built by Prometheus

00:24:18.015 --> 00:24:20.975
<v Speaker 1>itself coming along every five seconds in this

00:24:20.975 --> 00:24:23.055
<v Speaker 1>case and storing that history in its time

00:24:23.055 --> 00:24:23.855
<v Speaker 1>series database.

00:24:24.289 --> 00:24:26.289
<v Speaker 1>But every time it comes to this page,

00:24:26.289 --> 00:24:28.129
<v Speaker 1>it only sees what's the current value.

00:24:28.529 --> 00:24:29.570
<v Speaker 1>So example,

00:24:29.890 --> 00:24:33.090
<v Speaker 1>currently, the concurrent maximum queries that are allowed

00:24:33.090 --> 00:24:36.450
<v Speaker 1>is 20, or and currently, there's zero ongoing

00:24:36.450 --> 00:24:37.890
<v Speaker 1>prompt Prometheus engine queries.

00:24:39.195 --> 00:24:40.955
<v Speaker 1>And, like, if you reload the page, the

00:24:40.955 --> 00:24:42.555
<v Speaker 1>next time it might have a value of

00:24:42.555 --> 00:24:44.395
<v Speaker 1>one there or five or so, and then

00:24:44.395 --> 00:24:45.995
<v Speaker 1>Prometheus will just store

00:24:46.155 --> 00:24:48.154
<v Speaker 1>that current value.

00:24:49.195 --> 00:24:51.995
<v Speaker 1>Especially those counters that you see, like

00:24:53.000 --> 00:24:54.119
<v Speaker 1>something something

00:24:54.120 --> 00:24:55.719
<v Speaker 1>seconds count.

00:24:58.840 --> 00:25:01.240
<v Speaker 1>Yeah. For example, that one. This is a

00:25:01.240 --> 00:25:03.799
<v Speaker 1>metric that Prometheus will only see go up.

00:25:03.799 --> 00:25:06.519
<v Speaker 1>So if you refresh this page a couple

00:25:06.519 --> 00:25:06.919
<v Speaker 1>of times,

00:25:08.804 --> 00:25:09.524
<v Speaker 1>then

00:25:10.404 --> 00:25:13.044
<v Speaker 1>you will only see that metric going up.

00:25:13.044 --> 00:25:15.125
<v Speaker 1>It's like the total number of seconds that

00:25:15.125 --> 00:25:16.565
<v Speaker 1>the Go runtime

00:25:16.565 --> 00:25:17.604
<v Speaker 1>has spent

00:25:18.005 --> 00:25:21.560
<v Speaker 1>doing garbage collection since this process started. So

00:25:21.560 --> 00:25:23.720
<v Speaker 1>these counters can reset, but only if the

00:25:23.720 --> 00:25:26.440
<v Speaker 1>process that exposes them and track them also

00:25:26.440 --> 00:25:29.399
<v Speaker 1>actually restarts because they're only kept in memory.

00:25:29.640 --> 00:25:32.760
<v Speaker 1>Yep. So this so, basically, one line, one

00:25:32.760 --> 00:25:33.160
<v Speaker 1>sample

00:25:33.655 --> 00:25:36.294
<v Speaker 1>metric name, and then the label values,

00:25:36.695 --> 00:25:38.455
<v Speaker 1>and then the actual sample value at the

00:25:38.455 --> 00:25:39.254
<v Speaker 1>very end.

00:25:39.975 --> 00:25:42.295
<v Speaker 0>Okay. So let's let's just break that down

00:25:42.295 --> 00:25:43.815
<v Speaker 0>what you just said there. So this is

00:25:44.135 --> 00:25:45.975
<v Speaker 0>we call this the metric name?

00:25:46.055 --> 00:25:48.550
<v Speaker 1>Yep. So the metric name is kind of

00:25:48.550 --> 00:25:49.670
<v Speaker 1>the fundamental

00:25:49.670 --> 00:25:52.470
<v Speaker 1>aspect of the system that you're monitoring. In

00:25:52.470 --> 00:25:53.270
<v Speaker 1>this case

00:25:54.150 --> 00:25:55.830
<v Speaker 1>yeah. This is a summary. It's maybe a

00:25:55.830 --> 00:25:57.350
<v Speaker 1>bit more complex, but let's look at the

00:25:57.350 --> 00:25:59.750
<v Speaker 1>very simple metric, go go routines.

00:26:00.470 --> 00:26:03.455
<v Speaker 1>It's the aspect there is, yeah, you're measuring

00:26:03.455 --> 00:26:05.215
<v Speaker 1>the number of go routines.

00:26:05.535 --> 00:26:07.535
<v Speaker 1>In this case, there are not even any

00:26:07.535 --> 00:26:09.695
<v Speaker 1>sub dimensions, so labels

00:26:09.695 --> 00:26:12.415
<v Speaker 1>on that metric, but some metrics do.

00:26:13.695 --> 00:26:15.615
<v Speaker 1>If you scroll a bit further down, maybe

00:26:15.615 --> 00:26:17.855
<v Speaker 1>we'll find, like, a good simple one, like,

00:26:18.550 --> 00:26:21.110
<v Speaker 1>boom, further, further, further until we see something

00:26:21.110 --> 00:26:23.990
<v Speaker 1>with more labels that that's not a summary

00:26:23.990 --> 00:26:26.150
<v Speaker 1>or yep. Yeah. Let's let yep. Yep. Yep.

00:26:26.150 --> 00:26:28.230
<v Speaker 1>Mhmm. This this is good because it's still

00:26:28.230 --> 00:26:31.030
<v Speaker 1>just the simple counter metric, so always the

00:26:31.030 --> 00:26:32.149
<v Speaker 1>same metric name.

00:26:33.110 --> 00:26:34.950
<v Speaker 1>So contract

00:26:34.365 --> 00:26:35.404
<v Speaker 1>failed

00:26:35.565 --> 00:26:37.004
<v Speaker 1>connection dialings,

00:26:37.804 --> 00:26:40.684
<v Speaker 1>but with different four different subdomain. So this

00:26:40.684 --> 00:26:41.485
<v Speaker 1>counts

00:26:41.485 --> 00:26:44.445
<v Speaker 1>for each of these dialer names and reasons

00:26:44.525 --> 00:26:46.845
<v Speaker 1>how many of these failures have happened.

00:26:48.720 --> 00:26:49.440
<v Speaker 1>And

00:26:49.600 --> 00:26:50.320
<v Speaker 1>then

00:26:51.120 --> 00:26:52.800
<v Speaker 1>yeah. And then you have the space, and

00:26:52.800 --> 00:26:55.680
<v Speaker 1>then you have the actual current value of

00:26:55.680 --> 00:26:57.600
<v Speaker 1>each of these time series.

00:26:57.760 --> 00:27:00.320
<v Speaker 1>So each time series is identified

00:27:00.320 --> 00:27:01.680
<v Speaker 1>by the metric name

00:27:02.065 --> 00:27:05.345
<v Speaker 1>and the unique set of labels following it.

00:27:05.345 --> 00:27:08.304
<v Speaker 1>So each line is one time series in

00:27:08.385 --> 00:27:09.745
<v Speaker 1>Prometheus lingo.

00:27:10.865 --> 00:27:13.665
<v Speaker 0>Okay. So we got metric names, we've got

00:27:13.665 --> 00:27:14.465
<v Speaker 0>labels,

00:27:14.705 --> 00:27:17.130
<v Speaker 0>and we got the value. What is the

00:27:17.210 --> 00:27:19.290
<v Speaker 0>different metric types that we have for them,

00:27:19.290 --> 00:27:21.050
<v Speaker 0>Prometheus? And I see that we've got access

00:27:21.050 --> 00:27:23.130
<v Speaker 0>to something called a counter. We also had

00:27:23.130 --> 00:27:25.290
<v Speaker 0>a gauge. There was a summary. I mean,

00:27:25.450 --> 00:27:27.450
<v Speaker 0>what what are these different types of metrics?

00:27:27.450 --> 00:27:29.130
<v Speaker 1>Yeah. Oh, I actually just gave a talk

00:27:29.130 --> 00:27:30.810
<v Speaker 1>about that a couple of days or last

00:27:30.810 --> 00:27:31.850
<v Speaker 1>week ago or so ago.

00:27:32.945 --> 00:27:35.345
<v Speaker 1>So metric types are

00:27:36.705 --> 00:27:39.664
<v Speaker 1>yeah. We we have four of them, gauge,

00:27:39.745 --> 00:27:40.544
<v Speaker 1>summary,

00:27:40.545 --> 00:27:43.585
<v Speaker 1>counter, and histogram, and they're a bit different

00:27:43.585 --> 00:27:46.544
<v Speaker 1>ways of measuring different aspects of your system.

00:27:46.785 --> 00:27:50.170
<v Speaker 1>So, for example, a counter is a metric

00:27:50.170 --> 00:27:51.610
<v Speaker 1>that can only go up,

00:27:52.410 --> 00:27:56.090
<v Speaker 1>because it's used for counting cumulative totals of

00:27:56.090 --> 00:27:59.130
<v Speaker 1>either requests that you process or total number

00:27:59.130 --> 00:28:00.809
<v Speaker 1>of seconds spent in

00:28:01.195 --> 00:28:03.755
<v Speaker 1>certain CPU mode or something like this.

00:28:05.035 --> 00:28:07.275
<v Speaker 1>So those are metrics that only go up.

00:28:07.275 --> 00:28:08.635
<v Speaker 1>And we have a convention

00:28:08.875 --> 00:28:11.835
<v Speaker 1>that we we end them with underscore total.

00:28:12.395 --> 00:28:14.155
<v Speaker 1>That's that's why this metric is named like

00:28:14.155 --> 00:28:15.355
<v Speaker 1>that, but it's only a convention,

00:28:16.350 --> 00:28:17.870
<v Speaker 1>but people should follow it.

00:28:18.510 --> 00:28:20.830
<v Speaker 1>The gauge is a metric that can go

00:28:20.830 --> 00:28:23.149
<v Speaker 1>naturally up or down.

00:28:23.870 --> 00:28:26.910
<v Speaker 1>So memory usage, queue length, etcetera, etcetera.

00:28:28.515 --> 00:28:30.675
<v Speaker 1>And then you have histograms

00:28:30.675 --> 00:28:32.115
<v Speaker 1>and summaries.

00:28:32.115 --> 00:28:33.715
<v Speaker 1>So is this a histogram

00:28:33.795 --> 00:28:35.395
<v Speaker 1>is used for

00:28:36.115 --> 00:28:38.195
<v Speaker 1>tracking the distribution

00:28:38.195 --> 00:28:40.595
<v Speaker 1>of a set of values across a number

00:28:40.595 --> 00:28:42.035
<v Speaker 1>of histogram buckets.

00:28:42.450 --> 00:28:45.169
<v Speaker 1>So the most you the the most common

00:28:45.169 --> 00:28:47.249
<v Speaker 1>case is request durations

00:28:47.330 --> 00:28:49.330
<v Speaker 1>that you're measuring in your process as you're

00:28:49.330 --> 00:28:50.690
<v Speaker 1>handling requests.

00:28:51.090 --> 00:28:52.769
<v Speaker 1>You might want to record

00:28:52.929 --> 00:28:56.210
<v Speaker 1>how many of which latency category you have

00:28:56.210 --> 00:28:56.370
<v Speaker 1>seen.

00:28:57.325 --> 00:29:00.125
<v Speaker 1>So, yeah, this is a histogram example here.

00:29:00.125 --> 00:29:02.685
<v Speaker 1>It's not a particularly beautiful one, but, yeah,

00:29:02.685 --> 00:29:05.565
<v Speaker 1>it it will serve our purpose. So in

00:29:05.565 --> 00:29:06.205
<v Speaker 1>this case,

00:29:07.805 --> 00:29:10.125
<v Speaker 1>it you know, when when you actually track

00:29:10.205 --> 00:29:11.005
<v Speaker 1>these

00:29:11.550 --> 00:29:13.790
<v Speaker 1>when when you track things into histogram in

00:29:13.790 --> 00:29:16.350
<v Speaker 1>your process that's handling a request, you have

00:29:16.350 --> 00:29:17.550
<v Speaker 1>a single object

00:29:17.710 --> 00:29:20.590
<v Speaker 1>where you you create a histogram saying, I

00:29:20.590 --> 00:29:21.870
<v Speaker 1>want to have a histogram,

00:29:22.030 --> 00:29:24.430
<v Speaker 1>and it will have this the following bucket

00:29:24.430 --> 00:29:25.390
<v Speaker 1>configuration.

00:29:26.475 --> 00:29:29.915
<v Speaker 1>So latency bucket going from zero to, in

00:29:29.915 --> 00:29:32.315
<v Speaker 1>this case, you know, one hundred milliseconds and

00:29:32.315 --> 00:29:34.315
<v Speaker 1>one from zero to two hundred milliseconds, one

00:29:34.315 --> 00:29:36.155
<v Speaker 1>from zero to four hundred milliseconds. So it's

00:29:36.155 --> 00:29:39.275
<v Speaker 1>a cumulative histogram. Every bucket starts at zero

00:29:39.660 --> 00:29:42.059
<v Speaker 1>and thus includes the counts

00:29:42.220 --> 00:29:44.220
<v Speaker 1>of previous buckets,

00:29:44.620 --> 00:29:46.940
<v Speaker 1>but then has a given upper bound.

00:29:47.820 --> 00:29:49.340
<v Speaker 1>So you create that object

00:29:49.660 --> 00:29:51.660
<v Speaker 1>in your client library, and then every time

00:29:51.660 --> 00:29:53.660
<v Speaker 1>you actually handle the request

00:29:54.105 --> 00:29:56.585
<v Speaker 1>of a given duration, you just call a

00:29:56.585 --> 00:29:59.145
<v Speaker 1>method on that histogram, say, observe. And you

00:29:59.145 --> 00:29:59.865
<v Speaker 1>say, observe

00:30:00.345 --> 00:30:02.184
<v Speaker 1>two hundred milliseconds. Observe

00:30:02.505 --> 00:30:05.625
<v Speaker 1>one hundred fifty milliseconds or so. And, internally,

00:30:05.625 --> 00:30:08.320
<v Speaker 1>the histogram will then increment counters

00:30:08.320 --> 00:30:10.320
<v Speaker 1>for each of the buckets that are relevant

00:30:10.320 --> 00:30:12.320
<v Speaker 1>to that event you have just observed.

00:30:12.960 --> 00:30:14.399
<v Speaker 1>So each of these,

00:30:14.720 --> 00:30:17.120
<v Speaker 1>so that's one object in the client library

00:30:17.120 --> 00:30:18.799
<v Speaker 1>as you're tracking things. But then when it

00:30:18.799 --> 00:30:20.080
<v Speaker 1>gets serialized

00:30:20.080 --> 00:30:22.555
<v Speaker 1>out in this text format, we have to

00:30:22.555 --> 00:30:25.355
<v Speaker 1>kinda spread it out into different time series.

00:30:25.915 --> 00:30:27.195
<v Speaker 1>So the

00:30:27.435 --> 00:30:29.275
<v Speaker 1>TSDB in Prometheus

00:30:29.355 --> 00:30:30.875
<v Speaker 1>doesn't really have a clue about what a

00:30:30.875 --> 00:30:33.355
<v Speaker 1>histogram is. It only knows the scheme of,

00:30:33.355 --> 00:30:34.155
<v Speaker 1>like, metric name,

00:30:35.220 --> 00:30:37.380
<v Speaker 1>a bunch of label pairs, and the sample

00:30:37.380 --> 00:30:39.059
<v Speaker 1>value. So we kind of have to,

00:30:40.420 --> 00:30:43.300
<v Speaker 1>yeah, serialize it into that format. So the

00:30:43.300 --> 00:30:45.700
<v Speaker 1>way we do that is just expose each

00:30:45.700 --> 00:30:48.500
<v Speaker 1>of those buckets of the histogram as a

00:30:48.500 --> 00:30:53.105
<v Speaker 1>separate time series with the underscore bucket appended

00:30:53.265 --> 00:30:55.664
<v Speaker 1>to the original base name of your metric.

00:30:56.465 --> 00:30:58.465
<v Speaker 1>And then we have the LE label on

00:30:58.465 --> 00:31:01.505
<v Speaker 1>there. It stands for less than or equal,

00:31:01.905 --> 00:31:03.345
<v Speaker 1>which means it's like

00:31:04.000 --> 00:31:06.799
<v Speaker 1>every request gets counted into this bucket that

00:31:06.799 --> 00:31:09.279
<v Speaker 1>has a latency of less than or equal

00:31:09.280 --> 00:31:10.879
<v Speaker 1>to sixty seconds.

00:31:12.720 --> 00:31:13.359
<v Speaker 1>And

00:31:14.400 --> 00:31:17.120
<v Speaker 1>yeah. And and so, basically, this this histogram

00:31:17.855 --> 00:31:20.095
<v Speaker 1>gets kind of expanded into this form.

00:31:20.335 --> 00:31:23.775
<v Speaker 1>You also get two other auxiliary

00:31:23.775 --> 00:31:26.174
<v Speaker 1>output metrics in the serialization,

00:31:26.415 --> 00:31:29.855
<v Speaker 1>which is this underscore sum and underscore count.

00:31:30.655 --> 00:31:32.575
<v Speaker 1>This is just the total count

00:31:33.049 --> 00:31:35.610
<v Speaker 1>of all observations you've made, so total count

00:31:35.610 --> 00:31:36.649
<v Speaker 1>of all requests,

00:31:36.809 --> 00:31:39.450
<v Speaker 1>and the total amount of seconds you have

00:31:39.450 --> 00:31:40.249
<v Speaker 1>spent

00:31:40.570 --> 00:31:42.570
<v Speaker 1>in handling all those requests.

00:31:42.730 --> 00:31:44.249
<v Speaker 1>So you could

00:31:44.570 --> 00:31:47.450
<v Speaker 1>get the average latency by dividing

00:31:47.450 --> 00:31:50.304
<v Speaker 1>the sum by the count, for example.

00:31:52.144 --> 00:31:54.544
<v Speaker 1>Alright. Yeah. So that that's a histogram. A

00:31:54.544 --> 00:31:56.705
<v Speaker 1>summary is and and so, by the way,

00:31:56.705 --> 00:31:59.105
<v Speaker 1>like, you typically wouldn't then later on, like,

00:31:59.105 --> 00:32:01.505
<v Speaker 1>look at a histogram in its raw form.

00:32:01.920 --> 00:32:04.000
<v Speaker 1>In PromQL, you would run a function over

00:32:04.000 --> 00:32:06.320
<v Speaker 1>it called histogram quantile

00:32:06.400 --> 00:32:07.040
<v Speaker 1>to

00:32:07.520 --> 00:32:08.800
<v Speaker 1>calculate

00:32:08.800 --> 00:32:12.320
<v Speaker 1>quantiles from histogram or at least approximate them

00:32:12.320 --> 00:32:13.760
<v Speaker 1>because it's never going to be perfect.

00:32:14.495 --> 00:32:16.655
<v Speaker 1>It depends on the resolution of your buckets.

00:32:16.655 --> 00:32:17.535
<v Speaker 1>But then you can

00:32:17.935 --> 00:32:20.495
<v Speaker 1>ask questions such as what what's my 90

00:32:20.495 --> 00:32:21.855
<v Speaker 1>percentile latency

00:32:21.935 --> 00:32:24.175
<v Speaker 1>over the entire system or at a given

00:32:24.175 --> 00:32:25.375
<v Speaker 1>aggregation level?

00:32:26.095 --> 00:32:28.655
<v Speaker 1>A quantile is something that directly

00:32:29.530 --> 00:32:32.010
<v Speaker 1>a summary is a metric type that

00:32:32.170 --> 00:32:34.810
<v Speaker 1>in the client library already computes these quantiles

00:32:34.810 --> 00:32:37.370
<v Speaker 1>for you. So directly from the process, as

00:32:37.370 --> 00:32:40.570
<v Speaker 1>we see here, we get the the minimum,

00:32:40.570 --> 00:32:41.529
<v Speaker 1>the maximum,

00:32:41.690 --> 00:32:43.855
<v Speaker 1>and and the, you know, twenty fifth quant

00:32:44.335 --> 00:32:45.135
<v Speaker 1>percentile

00:32:45.135 --> 00:32:48.495
<v Speaker 1>and fifties and so on. The downside is

00:32:48.735 --> 00:32:50.335
<v Speaker 1>I mean, the the upside is you directly

00:32:50.335 --> 00:32:52.735
<v Speaker 1>get a really well computed quanta, which has

00:32:52.735 --> 00:32:55.695
<v Speaker 1>little error. And if you compute it using

00:32:55.695 --> 00:32:58.335
<v Speaker 1>directly the summary type and, for example, the

00:32:58.335 --> 00:32:59.215
<v Speaker 1>Go client library,

00:33:00.550 --> 00:33:00.870
<v Speaker 1>it

00:33:01.510 --> 00:33:02.710
<v Speaker 1>you can specify

00:33:02.710 --> 00:33:05.110
<v Speaker 1>the absolute error margin you want to have

00:33:05.110 --> 00:33:06.150
<v Speaker 1>in the result.

00:33:06.870 --> 00:33:09.270
<v Speaker 1>The downside is that you cannot aggregate over

00:33:09.270 --> 00:33:11.350
<v Speaker 1>quantiles at all. It's just statistically

00:33:11.350 --> 00:33:12.230
<v Speaker 1>invalid.

00:33:12.230 --> 00:33:12.710
<v Speaker 1>So

00:33:13.294 --> 00:33:15.934
<v Speaker 1>if you have 10 processes and they each

00:33:15.934 --> 00:33:17.294
<v Speaker 1>expose their

00:33:17.375 --> 00:33:20.174
<v Speaker 1>ninetieth percentile latency, let's say, you have no

00:33:20.174 --> 00:33:23.054
<v Speaker 1>idea what the total system's ninetieth percentile latency

00:33:23.054 --> 00:33:24.975
<v Speaker 1>is. You cannot average over them. It gives

00:33:24.975 --> 00:33:26.655
<v Speaker 1>you statistically nonsensical

00:33:26.655 --> 00:33:27.054
<v Speaker 1>results,

00:33:28.080 --> 00:33:31.039
<v Speaker 1>but you can do the same with histograms.

00:33:31.200 --> 00:33:31.840
<v Speaker 1>So

00:33:32.240 --> 00:33:33.920
<v Speaker 1>but those, you know, they they're they can

00:33:33.920 --> 00:33:35.999
<v Speaker 1>be more expensive. If you want to have

00:33:36.880 --> 00:33:40.160
<v Speaker 1>a good approximation of quantiles from histogram, you

00:33:40.160 --> 00:33:42.285
<v Speaker 1>need many fine grained buckets in exactly the

00:33:42.285 --> 00:33:43.645
<v Speaker 1>right latency places.

00:33:43.805 --> 00:33:45.885
<v Speaker 1>So it's a really tricky subject. There's a

00:33:45.885 --> 00:33:49.085
<v Speaker 1>page in the Prometheus best practices docs that

00:33:49.085 --> 00:33:51.405
<v Speaker 1>really goes deeper into that comparison if if

00:33:51.405 --> 00:33:53.085
<v Speaker 1>someone wants to look at that more.

00:33:53.805 --> 00:33:56.049
<v Speaker 1>But most of the time, you wanna look

00:33:56.049 --> 00:33:58.370
<v Speaker 1>at systems in aggregate, so you kind of

00:33:58.370 --> 00:33:59.249
<v Speaker 1>have to use

00:33:59.490 --> 00:34:00.529
<v Speaker 1>histograms.

00:34:01.330 --> 00:34:04.210
<v Speaker 0>Okay. Awesome. That's a a really great explanation

00:34:04.210 --> 00:34:06.945
<v Speaker 0>of those four metric types. I'm kind of

00:34:06.945 --> 00:34:09.824
<v Speaker 0>curious between the gauge and the counter. Are

00:34:09.824 --> 00:34:11.984
<v Speaker 0>there any optimizations that are made in the

00:34:11.984 --> 00:34:12.945
<v Speaker 0>database level

00:34:13.105 --> 00:34:15.585
<v Speaker 0>because you know the account or can't

00:34:15.585 --> 00:34:18.225
<v Speaker 0>climb down? Like, why is there that distinction

00:34:18.225 --> 00:34:18.545
<v Speaker 0>there?

00:34:19.489 --> 00:34:21.730
<v Speaker 1>Yep. So at the database level, the database

00:34:21.730 --> 00:34:22.610
<v Speaker 1>has no idea.

00:34:23.010 --> 00:34:25.250
<v Speaker 1>It doesn't know about metric types, period.

00:34:26.210 --> 00:34:28.369
<v Speaker 1>It does already just, you know, do,

00:34:29.010 --> 00:34:32.050
<v Speaker 1>gorilla styles or float compression on sample values

00:34:32.050 --> 00:34:33.935
<v Speaker 1>and so on. So if they for example,

00:34:33.935 --> 00:34:35.695
<v Speaker 1>if a sample value stays the same all

00:34:35.695 --> 00:34:38.014
<v Speaker 1>the time or increases very regularly or so,

00:34:38.014 --> 00:34:39.775
<v Speaker 1>that already compresses very well,

00:34:40.094 --> 00:34:42.495
<v Speaker 1>but it has no idea about the the

00:34:42.495 --> 00:34:43.135
<v Speaker 1>type.

00:34:43.935 --> 00:34:47.270
<v Speaker 1>The only so that that's it's just basically

00:34:47.429 --> 00:34:49.830
<v Speaker 1>you know, maybe if we were doing Prometheus

00:34:49.830 --> 00:34:51.750
<v Speaker 1>completely from the ground up or if there's

00:34:51.750 --> 00:34:54.310
<v Speaker 1>a Prometheus three dot zero at some point,

00:34:54.790 --> 00:34:56.790
<v Speaker 1>we could think about

00:34:58.550 --> 00:35:01.270
<v Speaker 1>making these metric types more first class, storing

00:35:01.270 --> 00:35:01.750
<v Speaker 1>them

00:35:02.445 --> 00:35:05.005
<v Speaker 1>better and more efficiently directly in the database.

00:35:05.005 --> 00:35:07.245
<v Speaker 1>Even a histogram could be stored way better,

00:35:07.245 --> 00:35:09.165
<v Speaker 1>right, instead of, like, separate time series. It

00:35:09.165 --> 00:35:10.925
<v Speaker 1>could be one time series with different buckets

00:35:10.925 --> 00:35:12.125
<v Speaker 1>stored more efficiently.

00:35:13.005 --> 00:35:15.885
<v Speaker 1>And then also make PromQL itself more aware

00:35:15.885 --> 00:35:19.190
<v Speaker 1>of that because currently, it's not directly aware

00:35:19.190 --> 00:35:22.230
<v Speaker 1>of metric types. There are functions that expect

00:35:23.349 --> 00:35:25.910
<v Speaker 1>input times used to behave like a counter

00:35:25.910 --> 00:35:27.910
<v Speaker 1>or like a gauge or like a histogram,

00:35:27.910 --> 00:35:29.830
<v Speaker 1>but the function cannot actually

00:35:30.230 --> 00:35:32.470
<v Speaker 1>ask the TSDB, like, is this the right

00:35:32.470 --> 00:35:33.109
<v Speaker 1>metric type?

00:35:33.775 --> 00:35:35.375
<v Speaker 0>Okay. I guess Yeah.

00:35:35.935 --> 00:35:37.535
<v Speaker 0>That leads us on to a question we

00:35:37.535 --> 00:35:39.135
<v Speaker 0>have from Elliot in the chat.

00:35:39.455 --> 00:35:41.615
<v Speaker 0>It just says, is the the metric types

00:35:41.615 --> 00:35:44.095
<v Speaker 0>purely convention and are there any plans to

00:35:44.095 --> 00:35:45.775
<v Speaker 0>maybe make them strongly typed in the future?

00:35:45.930 --> 00:35:47.609
<v Speaker 0>And I think you kind of maybe just

00:35:47.609 --> 00:35:49.210
<v Speaker 0>answered that a little bit there. If there's

00:35:49.210 --> 00:35:50.970
<v Speaker 0>a three point o. Well, it is kind

00:35:50.970 --> 00:35:51.930
<v Speaker 1>of a

00:35:52.089 --> 00:35:54.650
<v Speaker 1>in some places so there's a whole chain,

00:35:54.650 --> 00:35:55.770
<v Speaker 1>like instrumentation,

00:35:56.089 --> 00:35:56.890
<v Speaker 1>collection,

00:35:57.450 --> 00:35:59.770
<v Speaker 1>processing of the data in the TSDB, and

00:35:59.770 --> 00:36:00.410
<v Speaker 1>then PromQL.

00:36:00.965 --> 00:36:03.365
<v Speaker 1>And in some parts of that chain, they're

00:36:03.365 --> 00:36:05.445
<v Speaker 1>more than a convention. They're an actual code

00:36:05.445 --> 00:36:06.485
<v Speaker 1>level object,

00:36:07.045 --> 00:36:09.685
<v Speaker 1>and that's the strongest in the instrumentation library

00:36:09.685 --> 00:36:11.285
<v Speaker 1>where you really say, I want a new

00:36:11.285 --> 00:36:13.125
<v Speaker 1>gauge. I want a new summary. And you

00:36:13.125 --> 00:36:14.405
<v Speaker 1>get different methods,

00:36:15.525 --> 00:36:16.245
<v Speaker 1>depending on

00:36:17.360 --> 00:36:19.440
<v Speaker 1>which type of metric you created. On the

00:36:19.440 --> 00:36:21.680
<v Speaker 1>counter, you get an increment method, but no

00:36:21.680 --> 00:36:23.040
<v Speaker 1>set method. On the gauge, you get a

00:36:23.040 --> 00:36:24.960
<v Speaker 1>set method on a etcetera.

00:36:25.520 --> 00:36:27.200
<v Speaker 1>And then in the text format, in this

00:36:27.200 --> 00:36:29.760
<v Speaker 1>exposition format, it's already slightly weaker. It's there

00:36:29.760 --> 00:36:32.320
<v Speaker 1>in these kind of commented things that get

00:36:31.775 --> 00:36:34.015
<v Speaker 1>slightly ingested by the Prometheus server, but not

00:36:34.015 --> 00:36:35.615
<v Speaker 1>really don't really make it all the way

00:36:35.615 --> 00:36:38.095
<v Speaker 1>into the TSDB. There's currently it keeps it

00:36:38.815 --> 00:36:40.495
<v Speaker 1>it's kind of for the longest time, it

00:36:40.495 --> 00:36:42.495
<v Speaker 1>didn't do anything with it, but then now

00:36:42.495 --> 00:36:44.895
<v Speaker 1>it stores this help and type information in

00:36:44.895 --> 00:36:46.335
<v Speaker 1>memory, and you can query it

00:36:47.210 --> 00:36:49.690
<v Speaker 1>from like, for Grafana or PromLens or other

00:36:49.690 --> 00:36:52.650
<v Speaker 1>UIs that then actually surface this information for

00:36:52.650 --> 00:36:54.730
<v Speaker 1>the metric names for users.

00:36:55.210 --> 00:36:57.690
<v Speaker 1>But then the TSDB, it's completely lost again.

00:36:59.085 --> 00:37:00.925
<v Speaker 1>And then when you work with stuff in

00:37:00.925 --> 00:37:03.244
<v Speaker 1>PromQL, you basically have to know what metric

00:37:03.244 --> 00:37:05.484
<v Speaker 1>is what, and that's why it's important to

00:37:05.484 --> 00:37:06.845
<v Speaker 1>name your metrics

00:37:06.925 --> 00:37:08.365
<v Speaker 1>according to conventions.

00:37:09.885 --> 00:37:12.605
<v Speaker 1>Because, for example, there's the rate function, and

00:37:12.605 --> 00:37:15.690
<v Speaker 1>the rate function gives you the per second

00:37:15.690 --> 00:37:17.610
<v Speaker 1>increase of a counter metric.

00:37:17.770 --> 00:37:18.330
<v Speaker 1>And,

00:37:19.130 --> 00:37:20.730
<v Speaker 1>when it sees a counter

00:37:21.290 --> 00:37:23.290
<v Speaker 1>going up and up and up and then

00:37:23.530 --> 00:37:24.330
<v Speaker 1>down,

00:37:24.650 --> 00:37:26.810
<v Speaker 1>it assumes, oh, that was a process restart

00:37:26.810 --> 00:37:29.609
<v Speaker 1>and and reset of the counter and not,

00:37:29.609 --> 00:37:31.825
<v Speaker 1>like, something that could have happened naturally.

00:37:32.305 --> 00:37:34.305
<v Speaker 1>So it will act as if that reset

00:37:34.305 --> 00:37:36.545
<v Speaker 1>hadn't happened and kind of neutralizes it in

00:37:36.545 --> 00:37:38.705
<v Speaker 1>a way. So if you stick a gauge

00:37:38.705 --> 00:37:41.505
<v Speaker 1>metric that is, memory usage or so into

00:37:41.505 --> 00:37:42.545
<v Speaker 1>the rate function,

00:37:42.865 --> 00:37:44.785
<v Speaker 1>the rate function will think, like, whenever the

00:37:44.785 --> 00:37:46.305
<v Speaker 1>memory usage goes down, oh, that's a counter

00:37:46.305 --> 00:37:48.040
<v Speaker 1>reset. I act as if it doesn't happen.

00:37:48.040 --> 00:37:50.680
<v Speaker 1>I will only return you, like, positive rates.

00:37:50.760 --> 00:37:52.920
<v Speaker 1>So you'll need to use the derivative function

00:37:52.920 --> 00:37:54.440
<v Speaker 1>for gauges instead.

00:37:55.000 --> 00:37:57.080
<v Speaker 1>So, yeah, that's important to know.

00:37:57.559 --> 00:37:58.760
<v Speaker 0>Awesome. Excellent.

00:37:59.000 --> 00:38:00.359
<v Speaker 1>So I think Agree.

00:38:02.595 --> 00:38:03.395
<v Speaker 0>So

00:38:03.555 --> 00:38:05.635
<v Speaker 0>let's I think the next step, and if

00:38:05.635 --> 00:38:07.395
<v Speaker 0>you agree, let's go down that path. We

00:38:07.395 --> 00:38:09.875
<v Speaker 0>should add an exporter now. Like, we want

00:38:09.875 --> 00:38:12.755
<v Speaker 0>something Yeah. Maybe slightly more substantial than the

00:38:12.755 --> 00:38:15.849
<v Speaker 0>metrics that Prometheus has exposed in itself. Yep.

00:38:15.849 --> 00:38:18.170
<v Speaker 1>Yep. I mean, we could already start querying

00:38:18.170 --> 00:38:20.490
<v Speaker 1>the metrics about Prometheus itself. We can see,

00:38:20.490 --> 00:38:21.370
<v Speaker 1>like, how many

00:38:22.410 --> 00:38:25.609
<v Speaker 1>samples it is ingesting about itself per second,

00:38:25.609 --> 00:38:26.410
<v Speaker 1>for example,

00:38:26.970 --> 00:38:27.770
<v Speaker 1>as a good start.

00:38:28.565 --> 00:38:30.965
<v Speaker 1>So if you go to yeah. Yep.

00:38:31.525 --> 00:38:33.925
<v Speaker 1>So if you just type, I think, head

00:38:33.925 --> 00:38:34.725
<v Speaker 1>underscore

00:38:34.725 --> 00:38:35.525
<v Speaker 1>append,

00:38:36.325 --> 00:38:38.485
<v Speaker 1>it should fuzzy find the right thing,

00:38:38.965 --> 00:38:40.885
<v Speaker 1>and then the sample the second one.

00:38:42.300 --> 00:38:44.460
<v Speaker 1>So this is the metric name. And in

00:38:44.460 --> 00:38:47.100
<v Speaker 1>PromQL, if we just give the name of

00:38:47.100 --> 00:38:48.060
<v Speaker 1>metric name,

00:38:48.460 --> 00:38:51.740
<v Speaker 1>then it will return all the metrics all

00:38:51.740 --> 00:38:53.500
<v Speaker 1>the time series that have that metric name.

00:38:53.500 --> 00:38:55.404
<v Speaker 1>In this case, it's only one. So this

00:38:55.565 --> 00:38:57.484
<v Speaker 1>the total is a countermetric,

00:38:57.484 --> 00:39:00.605
<v Speaker 1>underscore top total, which tells us the total

00:39:00.605 --> 00:39:03.885
<v Speaker 1>number of samples that this process has ingested

00:39:03.885 --> 00:39:05.885
<v Speaker 1>so far into its t s t s

00:39:06.125 --> 00:39:07.164
<v Speaker 1>TSTB.

00:39:07.164 --> 00:39:08.845
<v Speaker 1>So you could switch over to the graph

00:39:08.845 --> 00:39:09.325
<v Speaker 1>tab,

00:39:11.620 --> 00:39:13.620
<v Speaker 1>and we see it going up over time.

00:39:13.620 --> 00:39:15.140
<v Speaker 1>Right? So it's a counter. So this is

00:39:15.140 --> 00:39:16.340
<v Speaker 1>completely useless.

00:39:16.500 --> 00:39:19.140
<v Speaker 1>The one thing about counters is you basically

00:39:19.140 --> 00:39:21.300
<v Speaker 1>never wanna care about the absolute value. You

00:39:21.300 --> 00:39:23.620
<v Speaker 1>always wanna rate them or do something with

00:39:23.620 --> 00:39:27.055
<v Speaker 1>them. So let's wrap a function around it

00:39:27.055 --> 00:39:28.974
<v Speaker 1>called the rate function.

00:39:31.775 --> 00:39:33.375
<v Speaker 1>And,

00:39:33.375 --> 00:39:35.455
<v Speaker 1>yeah, if you go to the very end,

00:39:35.694 --> 00:39:38.150
<v Speaker 1>you will need to provide the time window

00:39:38.150 --> 00:39:40.790
<v Speaker 1>to average the rate over, and you do

00:39:40.790 --> 00:39:45.190
<v Speaker 1>that after the metric name in these angle

00:39:45.670 --> 00:39:47.430
<v Speaker 1>what are they called? Square brackets.

00:39:47.590 --> 00:39:50.550
<v Speaker 0>Straight. Yeah. Yeah. Okay. Mhmm. Exactly like this.

00:39:50.550 --> 00:39:51.990
<v Speaker 1>So this would give you the

00:39:52.405 --> 00:39:53.525
<v Speaker 1>per second

00:39:54.485 --> 00:39:56.485
<v Speaker 1>number of ingested samples

00:39:56.565 --> 00:39:59.445
<v Speaker 1>but averaged over one minute of ingestion.

00:40:00.325 --> 00:40:03.045
<v Speaker 1>So we see it currently at hundred something

00:40:03.045 --> 00:40:05.525
<v Speaker 1>samples per second. So now if we add

00:40:05.525 --> 00:40:08.190
<v Speaker 1>an actual second target, like, node exporter, we

00:40:08.190 --> 00:40:09.870
<v Speaker 1>should see this number go up.

00:40:12.350 --> 00:40:14.270
<v Speaker 0>Okay. So we want to deploy the node

00:40:14.270 --> 00:40:17.390
<v Speaker 0>exporter to our machine. Yes. Let's do it.

00:40:17.790 --> 00:40:20.695
<v Speaker 0>Alright. Let's see. We do more complicated Prometheus,

00:40:20.695 --> 00:40:22.775
<v Speaker 1>could probably start using PromLens because it's less

00:40:22.775 --> 00:40:23.575
<v Speaker 1>of a pain.

00:40:24.695 --> 00:40:26.055
<v Speaker 0>K. So we have

00:40:26.455 --> 00:40:27.815
<v Speaker 0>node exporter.

00:40:27.895 --> 00:40:29.015
<v Speaker 0>I'm

00:40:29.015 --> 00:40:30.695
<v Speaker 0>just gonna go to releases

00:40:30.695 --> 00:40:32.615
<v Speaker 0>and grab

00:40:33.760 --> 00:40:35.200
<v Speaker 0>Linux here.

00:40:39.440 --> 00:40:41.040
<v Speaker 0>How to split this?

00:40:42.000 --> 00:40:42.640
<v Speaker 0>Mhmm.

00:40:45.360 --> 00:40:47.040
<v Speaker 0>Is that my IP address?

00:40:47.360 --> 00:40:48.320
<v Speaker 0>We'll find out.

00:40:52.035 --> 00:40:54.115
<v Speaker 0>Yes. It is. Okay. Excellent. So

00:41:02.369 --> 00:41:05.089
<v Speaker 0>do we have? We have a license notice

00:41:05.089 --> 00:41:07.250
<v Speaker 0>and then a node export. I'm assuming I

00:41:07.250 --> 00:41:10.210
<v Speaker 0>just run the binary. Yep. There's tons of

00:41:10.210 --> 00:41:12.530
<v Speaker 1>flags, but by default, it will do reasonable

00:41:12.530 --> 00:41:12.930
<v Speaker 1>things.

00:41:13.725 --> 00:41:16.285
<v Speaker 1>So the node exporter has nothing to do

00:41:16.285 --> 00:41:18.445
<v Speaker 1>with Node. Js. It's the node in there

00:41:18.445 --> 00:41:20.765
<v Speaker 1>means, like, a network node or compute node,

00:41:20.845 --> 00:41:21.885
<v Speaker 1>so a host.

00:41:22.445 --> 00:41:23.085
<v Speaker 1>And

00:41:24.285 --> 00:41:26.845
<v Speaker 1>it exposes all kinds of metrics that you

00:41:26.845 --> 00:41:29.750
<v Speaker 1>would typically expect about a system, CPU memory,

00:41:29.830 --> 00:41:32.390
<v Speaker 1>interrupts, etcetera, etcetera, etcetera, network.

00:41:32.869 --> 00:41:34.630
<v Speaker 1>You see a lot of collectors listed here

00:41:34.630 --> 00:41:35.750
<v Speaker 1>in the log already,

00:41:35.910 --> 00:41:37.670
<v Speaker 1>so you can, you know, you can able

00:41:37.830 --> 00:41:40.230
<v Speaker 1>enable collectors, disable them,

00:41:40.630 --> 00:41:43.270
<v Speaker 1>enable ones that aren't enabled by default also,

00:41:43.715 --> 00:41:44.835
<v Speaker 1>configure them,

00:41:45.075 --> 00:41:47.235
<v Speaker 1>have, like, include list, exclude list of what

00:41:47.235 --> 00:41:49.715
<v Speaker 1>devices you actually want to include in, like,

00:41:49.715 --> 00:41:50.675
<v Speaker 1>network

00:41:50.835 --> 00:41:53.795
<v Speaker 1>devices, for example, or or file systems if

00:41:53.795 --> 00:41:55.635
<v Speaker 1>you have a lot of these virtual ones

00:41:55.635 --> 00:41:57.395
<v Speaker 1>that you don't want to have included. But

00:41:57.395 --> 00:41:59.920
<v Speaker 1>by default, it will give you reasonable

00:42:00.080 --> 00:42:00.880
<v Speaker 1>information.

00:42:00.880 --> 00:42:03.760
<v Speaker 1>So the node exporter mostly gets its information

00:42:03.760 --> 00:42:05.920
<v Speaker 1>from the proc and sys file systems, but

00:42:05.920 --> 00:42:08.080
<v Speaker 1>it also does a couple of system calls

00:42:08.400 --> 00:42:10.000
<v Speaker 1>to get information

00:42:10.000 --> 00:42:12.525
<v Speaker 1>about the machine that's running on. So just

00:42:12.525 --> 00:42:14.765
<v Speaker 0>to confirm then, because Prometheus is a pill

00:42:14.765 --> 00:42:17.005
<v Speaker 0>based system, our node exporter right now is

00:42:17.005 --> 00:42:20.444
<v Speaker 0>exposing an HTTP endpoint on port 9,100.

00:42:20.444 --> 00:42:22.605
<v Speaker 0>Yep. And currently, Prometheus is not actually aware

00:42:22.605 --> 00:42:24.204
<v Speaker 0>of that. Right? We're we're gonna we're gonna

00:42:24.204 --> 00:42:26.070
<v Speaker 0>have to change something? Yep. And so this

00:42:26.070 --> 00:42:27.510
<v Speaker 1>is one kind

00:42:27.510 --> 00:42:29.670
<v Speaker 1>of cool thing. Like, when Prometheus isn't actually

00:42:29.670 --> 00:42:32.230
<v Speaker 1>coming by and scraping, the node export is

00:42:32.230 --> 00:42:34.390
<v Speaker 1>just doing nothing. So it's not collecting any

00:42:34.390 --> 00:42:35.750
<v Speaker 1>data. It's just

00:42:36.870 --> 00:42:39.190
<v Speaker 1>since all the operations it does are so

00:42:39.190 --> 00:42:39.830
<v Speaker 1>cheap

00:42:40.505 --> 00:42:43.305
<v Speaker 1>and only take, like, milliseconds or so, it

00:42:43.305 --> 00:42:44.825
<v Speaker 1>can do them synchronously.

00:42:44.825 --> 00:42:47.225
<v Speaker 1>The moment it scraped, it just, like, goes

00:42:47.225 --> 00:42:49.145
<v Speaker 1>to all these proxies files,

00:42:49.945 --> 00:42:53.305
<v Speaker 1>parses them, translates them to Prometheus metrics, and

00:42:53.305 --> 00:42:55.820
<v Speaker 1>feeds them back to Prometheus. So, yeah, we

00:42:55.820 --> 00:42:58.540
<v Speaker 1>would now need to go into the Prometheus

00:42:58.540 --> 00:42:59.900
<v Speaker 1>configuration file

00:43:00.300 --> 00:43:02.140
<v Speaker 1>and add another

00:43:02.380 --> 00:43:03.820
<v Speaker 1>scrape configuration.

00:43:06.860 --> 00:43:09.580
<v Speaker 1>And so just one comment. So, currently, we

00:43:09.580 --> 00:43:12.025
<v Speaker 1>have completely static configurations

00:43:12.025 --> 00:43:14.185
<v Speaker 1>of targets in this config file.

00:43:14.665 --> 00:43:17.625
<v Speaker 1>Where Prometheus' power becomes way way larger is

00:43:17.625 --> 00:43:18.585
<v Speaker 1>when you have it,

00:43:18.905 --> 00:43:21.065
<v Speaker 1>for example, in a Kubernetes cluster and you

00:43:21.065 --> 00:43:23.465
<v Speaker 1>don't configure any target manually, you just say,

00:43:23.465 --> 00:43:26.599
<v Speaker 1>like, talk to the Kubernetes API server, get

00:43:26.599 --> 00:43:28.119
<v Speaker 1>all pods you know,

00:43:28.759 --> 00:43:30.599
<v Speaker 1>and then use a certain labeling scheme to

00:43:30.599 --> 00:43:32.520
<v Speaker 1>identify them and scrape everything.

00:43:33.160 --> 00:43:35.240
<v Speaker 1>So that's that and then it keeps itself

00:43:35.240 --> 00:43:36.680
<v Speaker 1>up to date. But in this case, we're

00:43:36.680 --> 00:43:38.039
<v Speaker 1>just gonna do static targets.

00:43:39.095 --> 00:43:41.095
<v Speaker 1>Yeah. So if you just copy the first

00:43:41.095 --> 00:43:43.255
<v Speaker 1>scrape config, and then we can modify it

00:43:43.255 --> 00:43:43.815
<v Speaker 1>a bit.

00:43:49.335 --> 00:43:52.135
<v Speaker 1>So let's call it node. Yep. And use

00:43:52.135 --> 00:43:54.410
<v Speaker 1>the node exporter part.

00:43:55.369 --> 00:43:56.570
<v Speaker 1>Yep. Mhmm.

00:43:57.369 --> 00:43:58.090
<v Speaker 0>Yep.

00:43:58.329 --> 00:43:58.970
<v Speaker 0>Mhmm.

00:43:59.289 --> 00:44:00.890
<v Speaker 0>Easy. And

00:44:02.329 --> 00:44:05.130
<v Speaker 1>so you can either restart your Prometheus server,

00:44:05.130 --> 00:44:06.545
<v Speaker 1>which I I guess now you already killed

00:44:06.545 --> 00:44:08.225
<v Speaker 1>it anyway, or you could also send it

00:44:08.225 --> 00:44:10.145
<v Speaker 1>a hop signal or reload it over the

00:44:10.145 --> 00:44:12.945
<v Speaker 1>web if you have the admin APIs enabled.

00:44:12.945 --> 00:44:15.185
<v Speaker 1>But yeah. Oh, nice. Reloading

00:44:15.185 --> 00:44:17.585
<v Speaker 1>or restarting works as well. But it's, of

00:44:17.585 --> 00:44:19.425
<v Speaker 1>course, not something you would typically do want

00:44:19.425 --> 00:44:21.585
<v Speaker 1>to do in production. You wanna, like, reload

00:44:21.585 --> 00:44:24.680
<v Speaker 1>the config. Everything in the config is reloadable

00:44:25.240 --> 00:44:27.400
<v Speaker 0>during the run time. Yeah. I just don't

00:44:27.400 --> 00:44:29.400
<v Speaker 0>wanna cancel the territory of of too many

00:44:29.400 --> 00:44:30.839
<v Speaker 0>splits on my screen. So I was quite

00:44:30.839 --> 00:44:33.160
<v Speaker 0>happy Yeah. Yeah. I'm gonna bring it back.

00:44:33.160 --> 00:44:36.040
<v Speaker 1>Makes sense. Makes sense. Let's go to

00:44:36.984 --> 00:44:38.105
<v Speaker 0>our status

00:44:38.185 --> 00:44:39.385
<v Speaker 0>targets again.

00:44:39.705 --> 00:44:40.425
<v Speaker 1>Yep.

00:44:41.224 --> 00:44:42.105
<v Speaker 1>Nice.

00:44:42.185 --> 00:44:43.305
<v Speaker 1>So we have two.

00:44:44.265 --> 00:44:45.705
<v Speaker 1>We should actually, if you just use the

00:44:45.705 --> 00:44:48.345
<v Speaker 1>browser back button, we should go go get

00:44:48.345 --> 00:44:50.099
<v Speaker 1>back to the query. And now if we

00:44:50.099 --> 00:44:52.099
<v Speaker 1>graph that again yeah. We see a brief

00:44:52.099 --> 00:44:54.980
<v Speaker 1>outage there because Prometheus was down, and now

00:44:54.980 --> 00:44:55.940
<v Speaker 1>we see the

00:44:56.339 --> 00:44:58.340
<v Speaker 1>scrape rate going up.

00:44:59.700 --> 00:45:01.140
<v Speaker 0>Yep. Perfect.

00:45:01.140 --> 00:45:01.859
<v Speaker 0>Yep.

00:45:03.405 --> 00:45:04.605
<v Speaker 1>And now

00:45:05.165 --> 00:45:06.765
<v Speaker 1>if you actually,

00:45:07.085 --> 00:45:08.845
<v Speaker 1>should we should we start

00:45:09.325 --> 00:45:12.205
<v Speaker 1>querying using PromLens right away? It's just so

00:45:12.205 --> 00:45:14.285
<v Speaker 1>much nicer PromQL interface.

00:45:14.285 --> 00:45:16.285
<v Speaker 1>It's a built in one. I don't wanna

00:45:16.285 --> 00:45:18.579
<v Speaker 1>just, like, plug my stuff. But No. No.

00:45:18.579 --> 00:45:19.859
<v Speaker 0>No. Show me the way. Show me the

00:45:19.859 --> 00:45:21.300
<v Speaker 0>good stuff. Okay.

00:45:21.300 --> 00:45:22.100
<v Speaker 1>So

00:45:22.339 --> 00:45:22.900
<v Speaker 1>the

00:45:23.540 --> 00:45:26.579
<v Speaker 1>freebie kind of preview version of PromLens that

00:45:26.579 --> 00:45:29.780
<v Speaker 1>is just hosted directly on promlens.com,

00:45:30.260 --> 00:45:31.619
<v Speaker 1>you can actually just

00:45:32.055 --> 00:45:33.175
<v Speaker 1>plug in

00:45:33.335 --> 00:45:34.055
<v Speaker 1>your,

00:45:35.655 --> 00:45:38.535
<v Speaker 1>yeah, that URL as long as your browser

00:45:38.535 --> 00:45:39.255
<v Speaker 1>can

00:45:39.575 --> 00:45:41.815
<v Speaker 1>oh, see, that's that's the downside, though.

00:45:42.694 --> 00:45:43.815
<v Speaker 1>You would need to be able to reach

00:45:43.815 --> 00:45:46.400
<v Speaker 1>it over HTTPS because prometheus.com

00:45:46.400 --> 00:45:47.839
<v Speaker 1>is served over HTTPS,

00:45:47.839 --> 00:45:49.520
<v Speaker 1>and the browser is not allowed to do,

00:45:49.760 --> 00:45:51.840
<v Speaker 1>mixed content AJAX. So,

00:45:52.880 --> 00:45:54.880
<v Speaker 1>that's, yeah, that's the downside. You could you

00:45:54.880 --> 00:45:56.400
<v Speaker 1>could run it locally,

00:45:56.400 --> 00:45:59.359
<v Speaker 1>though, if you do just, a docker run

00:45:59.165 --> 00:46:01.165
<v Speaker 1>PromLens slash PromLens.

00:46:03.805 --> 00:46:05.885
<v Speaker 0>K. Let's do that. So I'm gonna do

00:46:05.885 --> 00:46:09.244
<v Speaker 0>your tab. Docker container. One exposed one exposed

00:46:09.244 --> 00:46:11.165
<v Speaker 1>port, which is eighty eighty.

00:46:15.170 --> 00:46:17.010
<v Speaker 0>That all I need? Yeah. I think that's

00:46:17.010 --> 00:46:18.530
<v Speaker 1>all that you need. Yeah.

00:46:19.170 --> 00:46:20.930
<v Speaker 0>Oh, and Docker, of course.

00:46:24.050 --> 00:46:26.325
<v Speaker 0>Let's check on our level. You'll you'll see

00:46:26.325 --> 00:46:28.565
<v Speaker 1>why why I said that. It's it's gonna

00:46:28.565 --> 00:46:30.645
<v Speaker 1>be much nicer to work with PromQL.

00:46:31.605 --> 00:46:33.605
<v Speaker 1>So the the main reason is actually the

00:46:33.605 --> 00:46:34.965
<v Speaker 1>text editor,

00:46:35.205 --> 00:46:37.685
<v Speaker 1>which is currently in PromLens, which is just

00:46:38.710 --> 00:46:40.790
<v Speaker 1>but the current Docker version doesn't have the

00:46:40.790 --> 00:46:43.270
<v Speaker 1>very newest stuff yet. Too bad.

00:46:44.230 --> 00:46:45.590
<v Speaker 1>It's still better than

00:46:46.550 --> 00:46:48.550
<v Speaker 1>still better than the build in one. But

00:46:48.550 --> 00:46:50.310
<v Speaker 1>the text editor will also end up being

00:46:50.310 --> 00:46:52.470
<v Speaker 1>in Prometheus OSS, just the rest of the

00:46:52.470 --> 00:46:54.525
<v Speaker 1>PromLens features will not. So

00:46:56.045 --> 00:46:58.045
<v Speaker 0>Yeah. The port goes first. So let me

00:46:58.204 --> 00:46:58.845
<v Speaker 1>Yeah.

00:46:59.405 --> 00:47:00.525
<v Speaker 0>I know better.

00:47:05.085 --> 00:47:06.605
<v Speaker 0>So you were saying I can just set

00:47:06.605 --> 00:47:08.204
<v Speaker 0>local host on a Yeah.

00:47:09.540 --> 00:47:10.500
<v Speaker 1>Yeah.

00:47:11.620 --> 00:47:12.900
<v Speaker 1>And now if you just paste the server

00:47:12.900 --> 00:47:15.540
<v Speaker 1>there and yeah. If you just unfo yep.

00:47:15.540 --> 00:47:18.900
<v Speaker 1>So that works. Cool. So now we can

00:47:19.620 --> 00:47:21.460
<v Speaker 1>just type the same metric that we had

00:47:21.460 --> 00:47:23.780
<v Speaker 1>before for or let's let's explore node export

00:47:23.780 --> 00:47:25.540
<v Speaker 1>metrics. So if you type node

00:47:28.395 --> 00:47:29.115
<v Speaker 1>yep.

00:47:29.755 --> 00:47:31.434
<v Speaker 1>So the up to date version would also

00:47:31.434 --> 00:47:32.395
<v Speaker 1>show you,

00:47:32.714 --> 00:47:35.355
<v Speaker 1>help strings and type information and all that

00:47:35.355 --> 00:47:36.555
<v Speaker 1>here. We don't have that yet.

00:47:38.109 --> 00:47:38.670
<v Speaker 1>So,

00:47:39.550 --> 00:47:41.150
<v Speaker 1>yeah, we could take we could start with

00:47:41.150 --> 00:47:43.230
<v Speaker 1>the CPU usage, for example, which is the

00:47:43.230 --> 00:47:44.990
<v Speaker 1>second metric you see here.

00:47:45.710 --> 00:47:48.349
<v Speaker 1>And if you just press return and you

00:47:48.349 --> 00:47:50.270
<v Speaker 1>you can graph it below, you get a

00:47:50.270 --> 00:47:52.109
<v Speaker 1>bunch of CPU usage counters.

00:47:53.315 --> 00:47:55.474
<v Speaker 1>So what you see here is the total

00:47:55.474 --> 00:47:58.994
<v Speaker 1>number of seconds spent in each CPU mode

00:47:59.154 --> 00:48:01.635
<v Speaker 1>and in each core and in each process,

00:48:01.635 --> 00:48:04.035
<v Speaker 1>but we only have one node exporter process.

00:48:04.035 --> 00:48:05.154
<v Speaker 1>So that's not really

00:48:06.030 --> 00:48:07.390
<v Speaker 1>useful dimensionality

00:48:07.390 --> 00:48:09.390
<v Speaker 1>for us. So the the main things are

00:48:09.390 --> 00:48:12.030
<v Speaker 1>the CPU label and the mode label.

00:48:13.870 --> 00:48:14.990
<v Speaker 1>And so,

00:48:17.230 --> 00:48:19.230
<v Speaker 1>yeah, we could now so

00:48:19.494 --> 00:48:22.214
<v Speaker 1>they are counters, so the absolute value doesn't

00:48:22.214 --> 00:48:24.455
<v Speaker 1>really help us. So PromLens already suggests you

00:48:24.455 --> 00:48:26.615
<v Speaker 1>to add the rate function here. So it

00:48:26.615 --> 00:48:28.855
<v Speaker 1>kind of auto detects this is probably a

00:48:28.855 --> 00:48:29.495
<v Speaker 1>counter.

00:48:29.734 --> 00:48:31.095
<v Speaker 1>And now if you graph it,

00:48:32.100 --> 00:48:35.780
<v Speaker 1>you will actually see proper CPU usage.

00:48:35.940 --> 00:48:37.380
<v Speaker 1>Why does it make sense? I have to

00:48:37.380 --> 00:48:39.140
<v Speaker 1>maybe explain why it makes sense to use

00:48:39.140 --> 00:48:42.340
<v Speaker 1>the rate function on CPU usage seconds. So

00:48:43.380 --> 00:48:45.380
<v Speaker 1>what is this? So imagine

00:48:45.755 --> 00:48:47.595
<v Speaker 1>you only have one core and one mode

00:48:47.595 --> 00:48:49.355
<v Speaker 1>to make it more simple. Right? You have,

00:48:49.355 --> 00:48:51.275
<v Speaker 1>like, a CPU usage, and it can be

00:48:51.275 --> 00:48:53.195
<v Speaker 1>between zero and one.

00:48:54.875 --> 00:48:55.595
<v Speaker 1>And

00:48:56.395 --> 00:48:58.795
<v Speaker 1>imagine your CPU is at 100%

00:48:58.795 --> 00:48:59.915
<v Speaker 1>usage. Then

00:49:01.070 --> 00:49:02.190
<v Speaker 1>per second,

00:49:02.350 --> 00:49:05.150
<v Speaker 1>it would spend one second of CPU usage.

00:49:05.150 --> 00:49:05.710
<v Speaker 1>Right?

00:49:06.430 --> 00:49:07.230
<v Speaker 1>And

00:49:07.470 --> 00:49:10.190
<v Speaker 1>if it's at 0% use, it would spend

00:49:10.190 --> 00:49:14.430
<v Speaker 1>zero seconds for per second c in in

00:49:14.430 --> 00:49:14.990
<v Speaker 1>the CPU.

00:49:15.565 --> 00:49:16.205
<v Speaker 1>So

00:49:16.365 --> 00:49:19.165
<v Speaker 1>if we take the per second rate over

00:49:19.165 --> 00:49:20.205
<v Speaker 1>this counter,

00:49:20.445 --> 00:49:22.925
<v Speaker 1>this is basically giving us the usage in

00:49:22.925 --> 00:49:23.805
<v Speaker 1>course

00:49:25.565 --> 00:49:26.445
<v Speaker 1>per

00:49:26.605 --> 00:49:28.365
<v Speaker 1>mode and per core.

00:49:29.440 --> 00:49:31.280
<v Speaker 1>So if you have multiple cores and sum

00:49:31.280 --> 00:49:33.280
<v Speaker 1>over them, you might actually get like, if

00:49:33.280 --> 00:49:34.960
<v Speaker 1>you have four cores, you might get a

00:49:34.960 --> 00:49:36.240
<v Speaker 1>number up to four.

00:49:36.960 --> 00:49:38.560
<v Speaker 1>You could multiply it then by a hundred

00:49:38.560 --> 00:49:39.600
<v Speaker 1>to get to percentage.

00:49:41.515 --> 00:49:42.155
<v Speaker 1>And

00:49:42.555 --> 00:49:44.795
<v Speaker 1>yep. So you probably wanna zoom out a

00:49:44.795 --> 00:49:46.475
<v Speaker 1>bit in in the graph or or zoom

00:49:46.475 --> 00:49:48.395
<v Speaker 1>in rather pressing the minus button.

00:49:50.875 --> 00:49:52.795
<v Speaker 1>This one. Because we don't have a lot

00:49:52.795 --> 00:49:55.195
<v Speaker 1>of data collected yet in the Prometheus server.

00:49:56.235 --> 00:49:56.875
<v Speaker 1>So

00:49:57.330 --> 00:50:00.290
<v Speaker 1>just there, you you see, for example, idle.

00:50:00.290 --> 00:50:02.690
<v Speaker 1>Most most of it like, it's almost 100%

00:50:02.690 --> 00:50:05.090
<v Speaker 1>idle mode, and then you have a tiny

00:50:05.090 --> 00:50:06.690
<v Speaker 1>bit of usage in the in the other

00:50:06.690 --> 00:50:08.050
<v Speaker 1>modes weighed on there,

00:50:08.370 --> 00:50:10.610
<v Speaker 1>user and and system and so on.

00:50:12.395 --> 00:50:13.115
<v Speaker 1>And,

00:50:13.835 --> 00:50:16.555
<v Speaker 1>yeah, you have a bunch more metrics about

00:50:16.555 --> 00:50:19.195
<v Speaker 1>the machine coming from the node exporter.

00:50:22.795 --> 00:50:26.099
<v Speaker 0>Okay. So it's that's the special yeah. That

00:50:26.099 --> 00:50:26.900
<v Speaker 0>specialization

00:50:27.059 --> 00:50:28.660
<v Speaker 0>is is really great, and I love the

00:50:28.660 --> 00:50:30.660
<v Speaker 0>fact that it offered to add that rate.

00:50:30.660 --> 00:50:32.260
<v Speaker 0>That I mean, that's I just don't live

00:50:32.260 --> 00:50:34.260
<v Speaker 1>very very well. I haven't really talked much

00:50:34.260 --> 00:50:36.579
<v Speaker 1>about PromLens itself yet. It was just like,

00:50:36.579 --> 00:50:38.740
<v Speaker 1>I I can't my personally, I can't really

00:50:38.740 --> 00:50:39.539
<v Speaker 1>use the

00:50:40.035 --> 00:50:43.395
<v Speaker 1>I can't really use PromLens PromQL without PromLens

00:50:43.395 --> 00:50:45.315
<v Speaker 1>anymore. So I'm just like but

00:50:46.035 --> 00:50:46.994
<v Speaker 1>so PromLens,

00:50:46.994 --> 00:50:48.755
<v Speaker 1>to give a bit of a background. So,

00:50:48.755 --> 00:50:51.075
<v Speaker 1>I mean, I I freelanced the last four

00:50:51.075 --> 00:50:53.714
<v Speaker 1>years around Prometheus just doing consulting,

00:50:53.714 --> 00:50:56.140
<v Speaker 1>training, custom development for companies.

00:50:56.300 --> 00:50:58.140
<v Speaker 1>And this year, I I decided,

00:50:58.460 --> 00:51:00.380
<v Speaker 1>hey. I have a really cool idea for

00:51:00.380 --> 00:51:03.100
<v Speaker 1>a new prompt query builder tool that should

00:51:03.100 --> 00:51:04.940
<v Speaker 1>exist, but I can't really justify

00:51:04.940 --> 00:51:06.940
<v Speaker 1>just building it completely in my free time

00:51:06.940 --> 00:51:08.700
<v Speaker 1>and not even, you know, trying to do

00:51:08.700 --> 00:51:11.825
<v Speaker 1>something commercial out of it. And so I

00:51:11.825 --> 00:51:13.665
<v Speaker 1>created a company, PromLens,

00:51:13.665 --> 00:51:15.265
<v Speaker 1>and PromLens

00:51:15.265 --> 00:51:17.505
<v Speaker 1>is kind of my first venture into this

00:51:17.505 --> 00:51:18.065
<v Speaker 1>whole

00:51:18.464 --> 00:51:21.025
<v Speaker 1>business of, yeah, trying commercial software.

00:51:21.744 --> 00:51:24.350
<v Speaker 1>So it's meant to be run on premise

00:51:24.350 --> 00:51:26.030
<v Speaker 1>as a docker container, and you give it

00:51:26.030 --> 00:51:28.670
<v Speaker 1>a license key, and then it can enable

00:51:28.990 --> 00:51:31.470
<v Speaker 1>features such as at the top where you

00:51:31.470 --> 00:51:34.670
<v Speaker 1>currently have to manually enter your Prometheus server.

00:51:34.910 --> 00:51:36.670
<v Speaker 1>It can actually talk to Grafana, and it

00:51:36.670 --> 00:51:38.325
<v Speaker 1>will give you a selector of all the

00:51:38.325 --> 00:51:41.125
<v Speaker 1>Prometheus data sources in your Grafana installation.

00:51:42.165 --> 00:51:45.365
<v Speaker 1>It also allows you to create entire shared

00:51:45.365 --> 00:51:46.245
<v Speaker 1>links

00:51:46.325 --> 00:51:48.005
<v Speaker 1>that you can send around on Slack and

00:51:48.005 --> 00:51:49.605
<v Speaker 1>so on to query pages.

00:51:49.765 --> 00:51:51.765
<v Speaker 1>The main value of this tool is,

00:51:53.270 --> 00:51:55.110
<v Speaker 1>like, it's basically a PromQL

00:51:55.350 --> 00:51:56.950
<v Speaker 1>power tool, I would say,

00:51:58.230 --> 00:52:00.710
<v Speaker 1>because, a, the text editor from the prompt

00:52:00.869 --> 00:52:03.830
<v Speaker 1>PromQL is way great greater than what's currently

00:52:03.830 --> 00:52:05.750
<v Speaker 1>in Prometheus, though I'm I want to open

00:52:05.750 --> 00:52:07.670
<v Speaker 1>source that, bring that into Prometheus as well.

00:52:09.675 --> 00:52:10.315
<v Speaker 1>But

00:52:10.475 --> 00:52:12.555
<v Speaker 1>what it gives you is once you have

00:52:12.555 --> 00:52:15.915
<v Speaker 1>more complex queries with different binary operations and

00:52:15.915 --> 00:52:17.755
<v Speaker 1>filters and so on and so on,

00:52:18.075 --> 00:52:18.795
<v Speaker 1>in

00:52:19.835 --> 00:52:22.075
<v Speaker 1>just the text version, it becomes really hard

00:52:22.075 --> 00:52:23.275
<v Speaker 1>at some point to understand

00:52:23.990 --> 00:52:26.869
<v Speaker 1>in which different sub selector and sub query

00:52:26.869 --> 00:52:29.190
<v Speaker 1>is it selecting what data and why what

00:52:29.190 --> 00:52:31.829
<v Speaker 1>labels on that sub selector,

00:52:31.829 --> 00:52:33.430
<v Speaker 1>etcetera, etcetera, etcetera.

00:52:33.750 --> 00:52:34.310
<v Speaker 1>So

00:52:35.510 --> 00:52:37.829
<v Speaker 1>what it does is it visualizes

00:52:37.829 --> 00:52:39.965
<v Speaker 1>the query that you input as a tree

00:52:39.965 --> 00:52:40.525
<v Speaker 1>here,

00:52:41.085 --> 00:52:44.365
<v Speaker 1>with every sub expression becoming its own tree

00:52:44.365 --> 00:52:46.605
<v Speaker 1>note and telling you what labels are on

00:52:46.605 --> 00:52:48.205
<v Speaker 1>that tree note and,

00:52:49.325 --> 00:52:50.685
<v Speaker 1>with what cardinalities.

00:52:50.685 --> 00:52:52.760
<v Speaker 1>So, for example, you got 48

00:52:52.760 --> 00:52:55.160
<v Speaker 1>different values for the CPU

00:52:56.040 --> 00:52:57.400
<v Speaker 1>label in this case.

00:52:59.080 --> 00:52:59.720
<v Speaker 1>And,

00:53:01.480 --> 00:53:03.480
<v Speaker 1>yeah, shows you how many results there are.

00:53:03.480 --> 00:53:05.480
<v Speaker 1>So you can really, really quickly spot, like,

00:53:05.480 --> 00:53:06.599
<v Speaker 1>oh, in this sub selector,

00:53:07.095 --> 00:53:09.415
<v Speaker 1>there's actually, like, zero results, so the entire

00:53:09.415 --> 00:53:11.335
<v Speaker 1>expression will never return anything.

00:53:11.415 --> 00:53:12.775
<v Speaker 1>It will also tell you if there's an

00:53:12.775 --> 00:53:15.895
<v Speaker 1>error, like, where exactly that for example, a

00:53:15.895 --> 00:53:18.775
<v Speaker 1>group by matching error happens in your tree.

00:53:20.190 --> 00:53:23.070
<v Speaker 1>I had one consulting session with a client

00:53:23.070 --> 00:53:25.870
<v Speaker 1>where I had access to their Prometheus server,

00:53:25.950 --> 00:53:27.150
<v Speaker 1>and then we went

00:53:27.550 --> 00:53:29.869
<v Speaker 1>I shared my screen. We went through all

00:53:29.869 --> 00:53:31.390
<v Speaker 1>of their alerting rules,

00:53:31.710 --> 00:53:33.710
<v Speaker 1>which are important to work correctly,

00:53:35.954 --> 00:53:37.875
<v Speaker 1>and half of them were broken. And we

00:53:37.875 --> 00:53:39.875
<v Speaker 1>could like, I just copy and pasted them

00:53:39.875 --> 00:53:42.194
<v Speaker 1>into PromLens. And in PromLens, we could see

00:53:42.194 --> 00:53:44.035
<v Speaker 1>pretty much immediately, like, oh, yeah. This sub

00:53:44.035 --> 00:53:45.795
<v Speaker 1>selector is, like, not even the right metric

00:53:45.795 --> 00:53:48.355
<v Speaker 1>name. It always select zero series, so, like,

00:53:48.355 --> 00:53:50.310
<v Speaker 1>this alert will never fire.

00:53:51.990 --> 00:53:52.630
<v Speaker 1>And,

00:53:53.590 --> 00:53:55.110
<v Speaker 1>yeah. So it gives you a lot of

00:53:55.110 --> 00:53:57.350
<v Speaker 1>deeper insights into the structure. Now the other

00:53:57.350 --> 00:53:59.670
<v Speaker 1>thing is it also includes a form based

00:53:59.670 --> 00:54:01.990
<v Speaker 1>editor. So every note here, you can actually

00:54:02.355 --> 00:54:04.435
<v Speaker 1>if you even either press e for edit

00:54:04.435 --> 00:54:06.195
<v Speaker 1>or hover over it, and there's, like, a

00:54:06.195 --> 00:54:07.075
<v Speaker 1>little icon.

00:54:07.395 --> 00:54:10.035
<v Speaker 1>Yeah. You can edit any part of the

00:54:10.035 --> 00:54:10.675
<v Speaker 1>query

00:54:10.994 --> 00:54:13.234
<v Speaker 1>using completely form based editing. So you can

00:54:13.234 --> 00:54:14.994
<v Speaker 1>say, like, I want an aggregation, and I

00:54:14.994 --> 00:54:17.875
<v Speaker 1>wanna aggregate over the following labels, etcetera, etcetera.

00:54:18.330 --> 00:54:20.490
<v Speaker 1>You could go to snippets, for example,

00:54:21.050 --> 00:54:23.450
<v Speaker 1>and also say, hey. I want to calculate

00:54:23.450 --> 00:54:25.930
<v Speaker 1>the quantile from histogram. Like, let's maybe just

00:54:25.930 --> 00:54:26.650
<v Speaker 1>do that.

00:54:28.410 --> 00:54:30.250
<v Speaker 1>Doop doop. And there, yeah, there can be

00:54:30.250 --> 00:54:32.170
<v Speaker 1>more snippets in the future. So it fills

00:54:32.170 --> 00:54:33.450
<v Speaker 1>out these placeholders,

00:54:33.450 --> 00:54:33.690
<v Speaker 1>kind of.

00:54:34.644 --> 00:54:36.805
<v Speaker 1>If you press e again, it will close

00:54:36.805 --> 00:54:37.445
<v Speaker 1>that.

00:54:37.845 --> 00:54:38.484
<v Speaker 1>Oops.

00:54:40.404 --> 00:54:42.724
<v Speaker 1>Yeah. You can also add a PromQL inline.

00:54:42.724 --> 00:54:44.164
<v Speaker 1>So if you just, like, double click on

00:54:44.164 --> 00:54:45.445
<v Speaker 1>a node or

00:54:46.085 --> 00:54:48.484
<v Speaker 1>yeah. Then then you can, you know, actually

00:54:50.510 --> 00:54:52.590
<v Speaker 1>edit any part of the tree in line

00:54:52.590 --> 00:54:53.550
<v Speaker 1>as PromQL

00:54:54.190 --> 00:54:56.030
<v Speaker 1>and so on and so on. So, like,

00:54:56.030 --> 00:54:58.270
<v Speaker 1>it gives you form based editing. It helps

00:54:58.270 --> 00:54:59.310
<v Speaker 1>you in a lot of ways. It gives

00:54:59.310 --> 00:55:01.470
<v Speaker 1>you these little quick actions like add rate,

00:55:01.470 --> 00:55:02.750
<v Speaker 1>add some to the expression.

00:55:04.065 --> 00:55:06.145
<v Speaker 1>Hey. This is a histogram. Are you do

00:55:06.145 --> 00:55:09.585
<v Speaker 1>you maybe mean to, like, wrap histogram quantile

00:55:09.585 --> 00:55:10.385
<v Speaker 1>around it?

00:55:11.505 --> 00:55:12.065
<v Speaker 1>And,

00:55:12.704 --> 00:55:15.425
<v Speaker 1>yeah, basically just helps you really understand and

00:55:15.425 --> 00:55:18.560
<v Speaker 1>build your PromQL queries way more effectively and

00:55:18.560 --> 00:55:19.360
<v Speaker 1>especially

00:55:19.440 --> 00:55:21.920
<v Speaker 1>avoid, like, completely broken alerts

00:55:22.320 --> 00:55:24.720
<v Speaker 1>that, yeah, are way too common.

00:55:25.920 --> 00:55:26.960
<v Speaker 0>Okay. So

00:55:27.360 --> 00:55:30.575
<v Speaker 0>that's really, really useful stuff. Let's tackle one

00:55:30.575 --> 00:55:32.174
<v Speaker 0>of the questions we have in the chat,

00:55:32.174 --> 00:55:34.895
<v Speaker 0>and then why don't we contrive a situation

00:55:34.895 --> 00:55:37.535
<v Speaker 0>then? Like, we'll run some processes. Let's try

00:55:37.535 --> 00:55:40.174
<v Speaker 0>and, you know, spike the CPUs, the test

00:55:40.174 --> 00:55:41.775
<v Speaker 0>usage, and see how we can explore those

00:55:41.775 --> 00:55:43.810
<v Speaker 0>metrics with on the note. Yep.

00:55:44.450 --> 00:55:46.450
<v Speaker 0>And get people a good feel for for

00:55:46.450 --> 00:55:47.250
<v Speaker 0>PromQL

00:55:47.250 --> 00:55:48.770
<v Speaker 0>and and PromLens.

00:55:48.930 --> 00:55:51.170
<v Speaker 0>So the first question we have, another one

00:55:51.170 --> 00:55:52.450
<v Speaker 0>from Elliot, is asking,

00:55:52.690 --> 00:55:55.010
<v Speaker 0>can we compare the results from different time

00:55:55.010 --> 00:55:57.505
<v Speaker 0>periods? Can I compare the I'm assuming he's

00:55:57.505 --> 00:55:59.745
<v Speaker 0>asking if I view the CPU usage now,

00:55:59.745 --> 00:56:01.585
<v Speaker 0>can I overlay that with the CPU usage

00:56:01.585 --> 00:56:03.905
<v Speaker 0>from an hour ago or ten minutes ago?

00:56:05.025 --> 00:56:06.225
<v Speaker 1>Only if you use

00:56:06.945 --> 00:56:09.250
<v Speaker 1>yeah. Not not really. Not in this tool.

00:56:09.250 --> 00:56:11.490
<v Speaker 1>It's more for building the query itself and

00:56:11.490 --> 00:56:14.530
<v Speaker 1>less for, like, the actual data.

00:56:16.290 --> 00:56:16.930
<v Speaker 1>The

00:56:17.410 --> 00:56:20.290
<v Speaker 1>yeah. Like, looking at exactly how the data

00:56:20.690 --> 00:56:23.615
<v Speaker 1>behaved itself, but more about building the correct

00:56:23.615 --> 00:56:24.895
<v Speaker 1>query, I guess.

00:56:26.255 --> 00:56:27.455
<v Speaker 1>So you can

00:56:28.575 --> 00:56:30.655
<v Speaker 1>so the the thing is the graph tab,

00:56:30.655 --> 00:56:32.015
<v Speaker 1>there's only one of them on this page

00:56:32.015 --> 00:56:34.335
<v Speaker 1>currently, and it has one time range.

00:56:35.630 --> 00:56:38.830
<v Speaker 1>You could theoretically build a prompt query which

00:56:38.830 --> 00:56:40.750
<v Speaker 1>selects the current

00:56:41.950 --> 00:56:44.270
<v Speaker 1>set of time series for something and then

00:56:44.590 --> 00:56:46.990
<v Speaker 1>ors in with a couple of query tricks,

00:56:46.990 --> 00:56:49.230
<v Speaker 1>like an offset version of the same query,

00:56:50.075 --> 00:56:52.394
<v Speaker 1>but that's a bit cumbersome. Like, that's not

00:56:52.394 --> 00:56:54.474
<v Speaker 1>what you would typically do. Yeah.

00:56:55.035 --> 00:56:56.875
<v Speaker 1>But what you can do is, like, really

00:56:56.875 --> 00:56:59.275
<v Speaker 1>quickly switch what you're looking at. So you

00:56:59.275 --> 00:57:01.275
<v Speaker 1>can, like, click with a mouse button on

00:57:01.275 --> 00:57:02.315
<v Speaker 1>any of these

00:57:02.875 --> 00:57:05.710
<v Speaker 1>query notes. Maybe maybe if you go to

00:57:06.190 --> 00:57:08.350
<v Speaker 1>if you go to the hosted PromLens,

00:57:08.350 --> 00:57:11.310
<v Speaker 1>you will see it better. So promlens.com.

00:57:15.150 --> 00:57:16.430
<v Speaker 1>If

00:57:16.830 --> 00:57:19.070
<v Speaker 1>you go to, let's let's say, about

00:57:21.275 --> 00:57:23.755
<v Speaker 1>and click on that yeah. Click on this

00:57:23.755 --> 00:57:25.035
<v Speaker 1>example page.

00:57:25.835 --> 00:57:28.395
<v Speaker 1>So really quickly, you can just, like, click

00:57:28.395 --> 00:57:30.395
<v Speaker 1>on the mouse where on any of these

00:57:30.395 --> 00:57:33.275
<v Speaker 1>query notes and then see exactly the shape

00:57:33.275 --> 00:57:34.795
<v Speaker 1>of the data at any of the notes.

00:57:35.619 --> 00:57:38.260
<v Speaker 1>You can also navigate by keyboard with j

00:57:38.260 --> 00:57:39.460
<v Speaker 1>k like in Vim.

00:57:39.700 --> 00:57:40.260
<v Speaker 1>And,

00:57:41.700 --> 00:57:43.619
<v Speaker 1>yep, like this, there's, like, a bunch more

00:57:43.619 --> 00:57:46.340
<v Speaker 1>keyboard commands to help you, like, navigate around.

00:57:46.340 --> 00:57:47.940
<v Speaker 1>If you press enter, you go into, like,

00:57:47.940 --> 00:57:50.340
<v Speaker 1>editing mode, inline editing of that mow node

00:57:50.340 --> 00:57:50.900
<v Speaker 1>and so on.

00:57:52.525 --> 00:57:54.285
<v Speaker 1>And yeah. Yeah. We figured it out pretty

00:57:54.285 --> 00:57:56.525
<v Speaker 1>quickly. So that's it's kind of, like, almost

00:57:56.525 --> 00:57:59.085
<v Speaker 1>like a little gauge or tap that you,

00:57:59.245 --> 00:58:01.005
<v Speaker 1>yeah, like, stick into the system and see,

00:58:01.005 --> 00:58:03.725
<v Speaker 1>like, okay. What's the value at this sub

00:58:03.260 --> 00:58:05.740
<v Speaker 1>element here? And whereas, like, if you do

00:58:05.740 --> 00:58:08.220
<v Speaker 1>the same thing in the standard just text

00:58:08.220 --> 00:58:09.020
<v Speaker 1>editor,

00:58:09.500 --> 00:58:11.420
<v Speaker 1>it gets kind of annoying because you have

00:58:11.420 --> 00:58:13.180
<v Speaker 1>to, like, copy and paste different parts of

00:58:13.180 --> 00:58:15.180
<v Speaker 1>your query into a separate panel, see, like,

00:58:15.180 --> 00:58:17.500
<v Speaker 1>what does this evaluate to? And here, you

00:58:17.500 --> 00:58:18.859
<v Speaker 1>just, like, can immediately see it.

00:58:20.984 --> 00:58:23.785
<v Speaker 1>Also, like, at the very top, if you

00:58:23.944 --> 00:58:25.785
<v Speaker 1>type a metric name,

00:58:26.425 --> 00:58:29.145
<v Speaker 1>let's say, delete this demo API request duration

00:58:29.145 --> 00:58:29.944
<v Speaker 1>seconds bucket.

00:58:31.560 --> 00:58:34.280
<v Speaker 1>No. Sorry. Like, in Here. Yeah. In in

00:58:34.280 --> 00:58:36.360
<v Speaker 1>there. Yeah. Yeah. Yeah. If we just type

00:58:36.360 --> 00:58:37.560
<v Speaker 1>bucket, for example.

00:58:38.920 --> 00:58:41.240
<v Speaker 1>Here, you see now you get the cut

00:58:41.320 --> 00:58:43.800
<v Speaker 1>the the type and the help string. So

00:58:43.800 --> 00:58:45.240
<v Speaker 1>if you if you just, like, go up

00:58:45.240 --> 00:58:47.475
<v Speaker 1>and down with arrows on your keyboard, you

00:58:47.475 --> 00:58:48.835
<v Speaker 1>see, like, the actual metadata

00:58:49.235 --> 00:58:51.235
<v Speaker 1>for each of the metrics being surfaced more

00:58:51.235 --> 00:58:54.515
<v Speaker 1>nicely. This looks and feels quite familiar. I

00:58:54.515 --> 00:58:56.275
<v Speaker 0>mean, is this using Monaco to be as

00:58:56.275 --> 00:58:56.835
<v Speaker 0>code?

00:58:57.875 --> 00:59:01.395
<v Speaker 1>It used to, and now I styled code

00:59:01.395 --> 00:59:02.755
<v Speaker 1>mirror next

00:59:02.970 --> 00:59:04.810
<v Speaker 1>in the same way as it looked before

00:59:04.810 --> 00:59:06.170
<v Speaker 1>with Monaco. Yeah.

00:59:07.690 --> 00:59:09.450
<v Speaker 1>Oh, and there's also an explain tab at

00:59:09.450 --> 00:59:11.369
<v Speaker 1>the very bottom that can actually explain the

00:59:11.369 --> 00:59:14.250
<v Speaker 1>meaning of any node and sub expression to

00:59:14.250 --> 00:59:14.810
<v Speaker 1>you. So

00:59:17.105 --> 00:59:18.704
<v Speaker 1>if you head over there, yeah, and then

00:59:18.704 --> 00:59:20.944
<v Speaker 1>you select the function call, for example, it

00:59:20.944 --> 00:59:22.305
<v Speaker 1>gives you the documentation

00:59:22.385 --> 00:59:23.505
<v Speaker 1>for the function,

00:59:24.145 --> 00:59:26.704
<v Speaker 1>for the aggregation that explains what it's doing.

00:59:26.704 --> 00:59:28.545
<v Speaker 1>If you go on the binary operation,

00:59:28.545 --> 00:59:29.585
<v Speaker 1>which is the root

00:59:30.039 --> 00:59:31.720
<v Speaker 1>of this entire expression,

00:59:33.160 --> 00:59:35.720
<v Speaker 1>the the slash on job thingy Oh, there

00:59:35.720 --> 00:59:36.119
<v Speaker 0>we go.

00:59:36.759 --> 00:59:38.680
<v Speaker 1>It even shows you, like, how it matches

00:59:38.680 --> 00:59:41.240
<v Speaker 1>up left hand side, right hand side.

00:59:41.880 --> 00:59:43.880
<v Speaker 1>Maybe I'm overwhelming people a bit if they

00:59:43.880 --> 00:59:46.279
<v Speaker 1>didn't do PromQL before

00:59:45.865 --> 00:59:48.265
<v Speaker 1>because we didn't talk really about PromQL much

00:59:48.265 --> 00:59:48.745
<v Speaker 1>yet.

00:59:49.385 --> 00:59:50.985
<v Speaker 1>But I just I guess, I I went

00:59:50.985 --> 00:59:52.585
<v Speaker 1>into the mode of, oh, I wanna show

00:59:52.585 --> 00:59:53.945
<v Speaker 1>all the features of PromLens,

00:59:54.665 --> 00:59:56.025
<v Speaker 1>but I will stop now.

00:59:57.305 --> 00:59:59.305
<v Speaker 0>No. I I I I think, you know,

00:59:59.550 --> 01:00:01.870
<v Speaker 0>being able to visualize the queries, explain them,

01:00:01.870 --> 01:00:03.550
<v Speaker 0>and have all the documentation in mind is

01:00:03.550 --> 01:00:05.550
<v Speaker 0>a a really viable tool, especially as people

01:00:05.550 --> 01:00:08.270
<v Speaker 0>are learning how to write their first Prometheus,

01:00:08.350 --> 01:00:10.670
<v Speaker 0>you know, queries. Like Yeah. A little bit

01:00:11.310 --> 01:00:13.470
<v Speaker 0>So So I I wanna use it in

01:00:13.470 --> 01:00:16.244
<v Speaker 1>trainings as well for people to understand, like,

01:00:16.244 --> 01:00:18.244
<v Speaker 1>why are the queries working or not working,

01:00:18.244 --> 01:00:20.405
<v Speaker 1>what exactly does a certain node do, and

01:00:20.405 --> 01:00:21.365
<v Speaker 1>so on. Yep.

01:00:22.165 --> 01:00:22.964
<v Speaker 0>Okay. So

01:00:23.845 --> 01:00:25.685
<v Speaker 1>Okay. Let's I I hand it back over

01:00:25.685 --> 01:00:28.005
<v Speaker 1>back to you and stop the commercial section.

01:00:30.770 --> 01:00:33.490
<v Speaker 0>No problem. Alright. We will let's so let's

01:00:33.490 --> 01:00:36.210
<v Speaker 0>use our Prometheus server, whether or to export

01:00:36.210 --> 01:00:38.450
<v Speaker 0>our we have the ability to

01:00:39.090 --> 01:00:41.890
<v Speaker 0>to run our PromQL queries and visualize what

01:00:41.890 --> 01:00:42.770
<v Speaker 0>we have here.

01:00:43.410 --> 01:00:44.370
<v Speaker 0>So

01:00:44.505 --> 01:00:46.905
<v Speaker 0>let's try and tackle maybe what would be

01:00:47.144 --> 01:00:48.825
<v Speaker 0>you know, if someone is just gonna start

01:00:48.825 --> 01:00:50.744
<v Speaker 0>it with the node export or in Prometheus.

01:00:50.825 --> 01:00:52.184
<v Speaker 0>Some of the first queries that are popping

01:00:52.184 --> 01:00:54.184
<v Speaker 0>into my head are how can I track

01:00:54.184 --> 01:00:55.545
<v Speaker 0>the CPU usage

01:00:56.025 --> 01:00:57.704
<v Speaker 0>over time or

01:00:58.380 --> 01:01:00.460
<v Speaker 0>in fact, here's a story? So I used

01:01:00.460 --> 01:01:01.260
<v Speaker 0>to be an

01:01:02.059 --> 01:01:02.859
<v Speaker 0>operator

01:01:03.019 --> 01:01:03.819
<v Speaker 0>SRE,

01:01:03.819 --> 01:01:05.099
<v Speaker 0>you know, over the last kind of five

01:01:05.099 --> 01:01:07.579
<v Speaker 0>years. And I always used to get woken

01:01:07.579 --> 01:01:09.339
<v Speaker 0>up at three or 4AM in the morning.

01:01:09.339 --> 01:01:11.180
<v Speaker 0>And I really, really hate getting woken up

01:01:11.180 --> 01:01:13.415
<v Speaker 0>at three or 4AM in the morning. And

01:01:13.415 --> 01:01:14.775
<v Speaker 0>one of the the one of the most

01:01:14.775 --> 01:01:15.975
<v Speaker 0>regular culprits

01:01:16.135 --> 01:01:19.095
<v Speaker 0>was the desk filling up by some bad

01:01:19.095 --> 01:01:21.255
<v Speaker 0>actor. And I always thought it'd be really

01:01:21.255 --> 01:01:21.895
<v Speaker 0>cool

01:01:22.135 --> 01:01:24.055
<v Speaker 0>if I could just use some sort of

01:01:24.055 --> 01:01:26.855
<v Speaker 0>linear protection to warn me during office hours

01:01:26.855 --> 01:01:28.455
<v Speaker 0>that the desk was gonna fill up in

01:01:28.455 --> 01:01:29.790
<v Speaker 0>the evening. Yep.

01:01:30.270 --> 01:01:32.590
<v Speaker 0>Now is that something that we could

01:01:33.630 --> 01:01:36.430
<v Speaker 0>contrive here, artificially create? Maybe if I run

01:01:36.430 --> 01:01:38.110
<v Speaker 0>DD and write out a large file on

01:01:38.110 --> 01:01:39.790
<v Speaker 0>his desk, would we be able to track

01:01:39.790 --> 01:01:42.125
<v Speaker 0>that usage and see the graph going? So

01:01:42.125 --> 01:01:45.484
<v Speaker 1>we we can. Prometheus has the function. And

01:01:45.484 --> 01:01:47.165
<v Speaker 1>and by the way, we say also always,

01:01:47.165 --> 01:01:49.965
<v Speaker 1>like, if you can avoid it, don't,

01:01:50.845 --> 01:01:53.244
<v Speaker 1>yeah, don't alert on these absolute disk usage

01:01:53.244 --> 01:01:53.645
<v Speaker 1>values,

01:01:54.140 --> 01:01:56.060
<v Speaker 1>but rather try to predict when will your

01:01:56.060 --> 01:01:59.180
<v Speaker 1>disk actually be really at zero free state.

01:01:59.980 --> 01:02:01.180
<v Speaker 1>And so we have

01:02:01.420 --> 01:02:03.420
<v Speaker 1>what we typically do or recommend people to

01:02:03.420 --> 01:02:04.300
<v Speaker 1>do is

01:02:04.380 --> 01:02:05.100
<v Speaker 1>put

01:02:05.260 --> 01:02:05.660
<v Speaker 1>the,

01:02:06.675 --> 01:02:08.995
<v Speaker 1>what's the metric called? Like, there's a metric,

01:02:08.995 --> 01:02:11.075
<v Speaker 1>the node file system

01:02:11.395 --> 01:02:12.435
<v Speaker 1>available

01:02:12.515 --> 01:02:13.315
<v Speaker 1>disk something

01:02:13.795 --> 01:02:15.395
<v Speaker 1>file system avail bytes.

01:02:15.715 --> 01:02:17.795
<v Speaker 1>It's important to use available bytes, not free

01:02:17.795 --> 01:02:18.595
<v Speaker 1>bytes because

01:02:19.180 --> 01:02:20.780
<v Speaker 1>available excludes

01:02:20.780 --> 01:02:23.340
<v Speaker 1>those blocks reserved for the root user.

01:02:23.740 --> 01:02:26.060
<v Speaker 1>So you run out of of, yeah, out

01:02:26.060 --> 01:02:28.060
<v Speaker 1>of that earlier than just free.

01:02:29.980 --> 01:02:30.620
<v Speaker 1>And

01:02:30.780 --> 01:02:33.820
<v Speaker 1>plug that into the predict linear function.

01:02:35.075 --> 01:02:37.395
<v Speaker 1>So there's a predict underscore linear

01:02:37.635 --> 01:02:40.035
<v Speaker 1>for that works on gauges like this.

01:02:40.275 --> 01:02:41.795
<v Speaker 1>And you provide it,

01:02:42.035 --> 01:02:44.115
<v Speaker 1>first of all, on the metric name itself,

01:02:44.115 --> 01:02:46.515
<v Speaker 1>you provide it with these with this square

01:02:46.515 --> 01:02:48.195
<v Speaker 1>bracket selector

01:02:48.195 --> 01:02:50.115
<v Speaker 1>of how much past

01:02:50.360 --> 01:02:52.280
<v Speaker 1>data you want to look at for this

01:02:52.280 --> 01:02:55.400
<v Speaker 1>linear prediction. So it does linear regression

01:02:55.400 --> 01:02:57.480
<v Speaker 1>over the data points. Typically,

01:02:57.720 --> 01:03:00.120
<v Speaker 1>you wanna look over, like, multiple hours. Right?

01:03:00.120 --> 01:03:02.920
<v Speaker 1>Let's say, sometimes people do four hours because

01:03:02.920 --> 01:03:03.720
<v Speaker 1>disk usage

01:03:04.315 --> 01:03:06.955
<v Speaker 1>often, at least, it's not like a very

01:03:06.955 --> 01:03:08.395
<v Speaker 1>quickly moving thing.

01:03:08.715 --> 01:03:11.035
<v Speaker 1>So let's let's say maybe four hours or

01:03:11.035 --> 01:03:11.515
<v Speaker 1>so.

01:03:12.875 --> 01:03:14.795
<v Speaker 0>My thoughts were, though, if I'm gonna start

01:03:14.795 --> 01:03:16.795
<v Speaker 0>running the the I love a hundred gig,

01:03:16.795 --> 01:03:18.395
<v Speaker 0>it's gonna go very quickly. So we maybe

01:03:18.395 --> 01:03:20.079
<v Speaker 0>wanna look at it like, seconds so I

01:03:20.079 --> 01:03:21.359
<v Speaker 0>can kill it, and then we can just

01:03:21.359 --> 01:03:23.839
<v Speaker 0>see that So this won't actually give you

01:03:23.839 --> 01:03:25.760
<v Speaker 1>any results because we it it

01:03:26.320 --> 01:03:28.160
<v Speaker 1>to do a linear regression, you need at

01:03:28.160 --> 01:03:30.320
<v Speaker 1>least two data points to fall under this

01:03:30.320 --> 01:03:30.960
<v Speaker 1>window,

01:03:31.440 --> 01:03:33.200
<v Speaker 1>and we only scrape at a at a

01:03:33.200 --> 01:03:36.185
<v Speaker 1>resolution of five seconds. So to be really

01:03:36.185 --> 01:03:38.105
<v Speaker 1>sure, yeah, you want to have at least,

01:03:38.105 --> 01:03:40.905
<v Speaker 1>like, fifteen seconds there or something something bit

01:03:40.905 --> 01:03:43.225
<v Speaker 1>larger. Like, a minute is yeah. Let's do

01:03:43.225 --> 01:03:43.865
<v Speaker 1>a minute.

01:03:46.505 --> 01:03:48.985
<v Speaker 1>The second thing the second parameter to this

01:03:48.985 --> 01:03:49.625
<v Speaker 1>function is

01:03:50.470 --> 01:03:52.710
<v Speaker 1>now that we have this linear regression that

01:03:52.710 --> 01:03:54.870
<v Speaker 1>we're doing over this, we can predict this

01:03:54.870 --> 01:03:57.670
<v Speaker 1>value into the future. So we can say,

01:03:57.990 --> 01:03:59.750
<v Speaker 1>based on the current development

01:03:59.830 --> 01:04:01.670
<v Speaker 1>that we've seen over the last,

01:04:01.910 --> 01:04:04.355
<v Speaker 1>what, one minute in this case, what will

01:04:04.355 --> 01:04:06.835
<v Speaker 1>it be in, let's say, five minutes?

01:04:07.395 --> 01:04:10.035
<v Speaker 1>So the the thing there at this point

01:04:10.035 --> 01:04:10.915
<v Speaker 1>in this

01:04:11.315 --> 01:04:13.714
<v Speaker 1>it expects a normal expression note and not

01:04:13.714 --> 01:04:15.555
<v Speaker 1>a duration, so you have to provide it

01:04:15.555 --> 01:04:15.875
<v Speaker 1>in

01:04:16.515 --> 01:04:17.635
<v Speaker 1>as a normal number.

01:04:19.390 --> 01:04:21.310
<v Speaker 1>If we want to say five minutes, you

01:04:21.310 --> 01:04:24.990
<v Speaker 1>could do five times 60 or 300. Yeah.

01:04:26.830 --> 01:04:29.150
<v Speaker 1>Yeah. So it expects number of seconds to

01:04:29.150 --> 01:04:31.550
<v Speaker 1>predict it into the future. And so now

01:04:31.550 --> 01:04:33.310
<v Speaker 1>what you get as the output is, like,

01:04:33.310 --> 01:04:34.270
<v Speaker 1>the expected

01:04:34.270 --> 01:04:35.310
<v Speaker 1>disk usage

01:04:35.735 --> 01:04:37.415
<v Speaker 1>in five minutes.

01:04:37.575 --> 01:04:38.855
<v Speaker 1>And now we could,

01:04:39.495 --> 01:04:41.655
<v Speaker 1>we could add a filter condition and say,

01:04:41.655 --> 01:04:44.055
<v Speaker 1>like, only output it to me

01:04:44.375 --> 01:04:47.335
<v Speaker 1>if it is expected to be less or

01:04:47.335 --> 01:04:50.240
<v Speaker 1>equal to zero. Okay. Just say less than

01:04:50.240 --> 01:04:52.880
<v Speaker 1>zero. So if we say less than zero

01:04:54.720 --> 01:04:57.119
<v Speaker 1>yep. So this filters the set of output

01:04:57.119 --> 01:04:58.880
<v Speaker 1>time series, but only the ones that are

01:04:58.880 --> 01:05:00.320
<v Speaker 1>going to be full.

01:05:00.560 --> 01:05:03.040
<v Speaker 1>And alerts in Prometheus work in that way

01:05:03.040 --> 01:05:03.440
<v Speaker 1>that

01:05:04.205 --> 01:05:05.085
<v Speaker 1>the the

01:05:05.405 --> 01:05:08.045
<v Speaker 1>the heart of any alerting rule is a

01:05:08.045 --> 01:05:09.325
<v Speaker 1>PromQL expression,

01:05:09.565 --> 01:05:10.125
<v Speaker 1>which

01:05:10.525 --> 01:05:13.885
<v Speaker 1>is expected to output nothing at all if

01:05:13.885 --> 01:05:15.005
<v Speaker 1>everything is fine

01:05:15.485 --> 01:05:16.205
<v Speaker 1>and

01:05:16.685 --> 01:05:17.725
<v Speaker 1>output

01:05:17.980 --> 01:05:20.460
<v Speaker 1>one or more time series if there is

01:05:20.460 --> 01:05:23.500
<v Speaker 1>a problem. So then every output time series

01:05:23.500 --> 01:05:25.420
<v Speaker 1>will be turned into an alert.

01:05:25.980 --> 01:05:28.140
<v Speaker 1>So, for example, if there were two tie

01:05:28.380 --> 01:05:30.780
<v Speaker 1>two different file systems now for which this

01:05:30.780 --> 01:05:31.660
<v Speaker 1>condition is true,

01:05:32.415 --> 01:05:34.815
<v Speaker 1>you would get two different alerts, one for

01:05:34.815 --> 01:05:37.295
<v Speaker 1>each, unless you, like, aggregate over them in

01:05:37.295 --> 01:05:39.135
<v Speaker 1>PromQL or so. But by default,

01:05:39.775 --> 01:05:41.615
<v Speaker 1>two output times here is two alerts.

01:05:43.375 --> 01:05:46.329
<v Speaker 1>Cool. So, yeah, if we now start filling

01:05:46.329 --> 01:05:49.050
<v Speaker 1>up the disc really quickly, this might, at

01:05:49.050 --> 01:05:50.730
<v Speaker 1>some point, start telling you

01:05:53.530 --> 01:05:53.849
<v Speaker 1>that

01:05:55.290 --> 01:05:57.290
<v Speaker 0>Deft, I'm gonna need a new tab now.

01:05:57.690 --> 01:05:59.210
<v Speaker 1>And, like, this is one of the situations

01:05:59.210 --> 01:06:01.255
<v Speaker 1>where I would then, like, go into PromLens

01:06:01.255 --> 01:06:03.495
<v Speaker 1>and see because the filter, right, you you

01:06:03.495 --> 01:06:06.055
<v Speaker 1>typically don't see anything anymore as the final

01:06:06.055 --> 01:06:07.335
<v Speaker 1>output of the expression.

01:06:07.735 --> 01:06:09.335
<v Speaker 1>So then you can still click on the

01:06:09.335 --> 01:06:11.415
<v Speaker 1>subnote that shows you the current

01:06:12.230 --> 01:06:14.950
<v Speaker 1>trend of the disc usage and see, like,

01:06:14.950 --> 01:06:15.510
<v Speaker 1>okay.

01:06:16.150 --> 01:06:17.190
<v Speaker 1>Will it even,

01:06:17.589 --> 01:06:19.910
<v Speaker 1>like, get close to my filter condition soon,

01:06:19.910 --> 01:06:21.190
<v Speaker 1>or do I have to change my filter

01:06:21.190 --> 01:06:22.150
<v Speaker 1>and so on?

01:06:23.030 --> 01:06:25.750
<v Speaker 1>Okay. Yeah. Let's let's trash the disc.

01:06:29.335 --> 01:06:32.135
<v Speaker 0>I'm sure there's a way to specify how

01:06:32.295 --> 01:06:33.974
<v Speaker 0>big I want this to write, and I

01:06:33.974 --> 01:06:35.335
<v Speaker 0>can't remember what it is.

01:06:35.655 --> 01:06:37.975
<v Speaker 1>Yeah. That's block size and the count.

01:06:38.375 --> 01:06:40.775
<v Speaker 0>Yeah. Let's just look it up. So It's

01:06:40.775 --> 01:06:41.734
<v Speaker 1>just count in BS.

01:06:43.870 --> 01:06:45.950
<v Speaker 0>Is it as simple as that? This is

01:06:45.950 --> 01:06:48.030
<v Speaker 0>the that not yet. Oh, there we go.

01:06:48.030 --> 01:06:48.670
<v Speaker 0>So

01:06:48.990 --> 01:06:49.470
<v Speaker 0>yeah.

01:06:50.670 --> 01:06:50.910
<v Speaker 0>Okay.

01:06:59.535 --> 01:07:02.735
<v Speaker 1>Problem is if if it creates sparse files.

01:07:03.455 --> 01:07:05.935
<v Speaker 1>Yeah. DevRandom will not create sparse files. That's

01:07:05.935 --> 01:07:07.855
<v Speaker 1>good. Better than DevZero then. Yeah.

01:07:08.895 --> 01:07:10.974
<v Speaker 1>Okay. Otherwise, we won't get the disc users

01:07:10.974 --> 01:07:11.615
<v Speaker 1>we're expecting.

01:07:13.190 --> 01:07:13.829
<v Speaker 0>So

01:07:14.069 --> 01:07:15.430
<v Speaker 0>I should be able to run this. That

01:07:15.430 --> 01:07:17.990
<v Speaker 0>should create 1,001

01:07:17.990 --> 01:07:19.589
<v Speaker 0>meg files. Right?

01:07:20.470 --> 01:07:21.190
<v Speaker 0>Yeah.

01:07:22.549 --> 01:07:24.069
<v Speaker 0>Which is not a lot, but let's just

01:07:24.309 --> 01:07:26.630
<v Speaker 0>should be one meg, basically. Right?

01:07:27.565 --> 01:07:30.045
<v Speaker 0>With the current 1,003 The b b s

01:07:30.045 --> 01:07:32.445
<v Speaker 1>is already in in kilobytes. Right? Or is

01:07:32.445 --> 01:07:35.005
<v Speaker 1>it in bytes? I forgot. Okay. Kilobytes kilobytes.

01:07:35.005 --> 01:07:36.765
<v Speaker 0>Okay. Cool. I think.

01:07:39.565 --> 01:07:41.485
<v Speaker 0>Alright. So let's let's just see. Right? We

01:07:41.485 --> 01:07:43.600
<v Speaker 0>have this query here, so we can

01:07:44.720 --> 01:07:45.920
<v Speaker 0>I guess the best thing to do is

01:07:45.920 --> 01:07:48.800
<v Speaker 0>just to duplicate this tab? Right? Some bytes.

01:07:49.520 --> 01:07:52.240
<v Speaker 0>Some bytes. Okay. Yeah. I guess that actually

01:07:52.240 --> 01:07:54.560
<v Speaker 0>makes sense. Way more probably, but yeah.

01:07:57.265 --> 01:07:59.425
<v Speaker 0>So See you see what you're doing now?

01:07:59.425 --> 01:08:01.265
<v Speaker 1>You have to, like, manually edit away parts

01:08:01.265 --> 01:08:02.145
<v Speaker 1>of the query?

01:08:02.385 --> 01:08:03.425
<v Speaker 0>Yeah. Yeah. Yeah.

01:08:03.905 --> 01:08:05.825
<v Speaker 1>And and Prometheus, you just click on that

01:08:05.825 --> 01:08:07.665
<v Speaker 1>subnote, see, like, okay. What's actually returned by

01:08:07.665 --> 01:08:08.225
<v Speaker 1>this?

01:08:08.705 --> 01:08:11.025
<v Speaker 1>That's exactly why I hate I don't I

01:08:11.025 --> 01:08:14.080
<v Speaker 1>don't work in that normal interface anymore. Okay.

01:08:14.080 --> 01:08:15.040
<v Speaker 0>So so

01:08:15.040 --> 01:08:16.880
<v Speaker 0>what we're saying is we could actually just

01:08:16.880 --> 01:08:19.439
<v Speaker 0>use our fail system available by this here.

01:08:19.680 --> 01:08:21.680
<v Speaker 0>And then what we had was a predict

01:08:22.399 --> 01:08:24.319
<v Speaker 1>predict linear. Yeah. Uh-huh.

01:08:25.225 --> 01:08:27.545
<v Speaker 0>We had a one minute and a

01:08:27.865 --> 01:08:28.904
<v Speaker 0>three hundred.

01:08:29.065 --> 01:08:31.625
<v Speaker 0>Yep. So you're saying I could just filter

01:08:31.625 --> 01:08:34.185
<v Speaker 0>the squidgy to just one section? Oh, and

01:08:34.185 --> 01:08:35.945
<v Speaker 1>we had the filter condition as well, like,

01:08:35.945 --> 01:08:36.985
<v Speaker 1>less than zero.

01:08:38.439 --> 01:08:40.439
<v Speaker 1>Yep. And now you can just click on

01:08:40.439 --> 01:08:43.080
<v Speaker 1>the notes and see what each subexpression actually

01:08:43.080 --> 01:08:43.800
<v Speaker 1>is doing.

01:08:44.280 --> 01:08:46.600
<v Speaker 1>Thing is with a range vector, you cannot

01:08:46.600 --> 01:08:48.520
<v Speaker 1>graph it because, like, at every point in

01:08:48.520 --> 01:08:50.280
<v Speaker 1>time, it would have multiple values. You can

01:08:50.280 --> 01:08:52.040
<v Speaker 1>table it. You can you can see, like,

01:08:52.040 --> 01:08:52.520
<v Speaker 1>what's the,

01:08:55.035 --> 01:08:57.035
<v Speaker 1>yeah. This this is the kind of raw

01:08:57.035 --> 01:08:59.594
<v Speaker 1>disk usage over multiple peers in time, but

01:08:59.594 --> 01:09:01.274
<v Speaker 1>you can see what the linear prediction of

01:09:01.274 --> 01:09:03.034
<v Speaker 1>that is, for example.

01:09:03.835 --> 01:09:06.075
<v Speaker 0>So I can filter this using the label

01:09:06.075 --> 01:09:08.154
<v Speaker 0>selector, right, to only get the root disk?

01:09:08.760 --> 01:09:10.920
<v Speaker 1>Yes. And is that just the case of

01:09:10.920 --> 01:09:11.560
<v Speaker 0>adding

01:09:12.520 --> 01:09:13.800
<v Speaker 1>Yep. Mhmm.

01:09:14.840 --> 01:09:15.560
<v Speaker 1>Yep.

01:09:16.200 --> 01:09:17.000
<v Speaker 1>Exactly.

01:09:17.560 --> 01:09:20.600
<v Speaker 1>So now you see, okay. Yep. The total

01:09:20.600 --> 01:09:23.000
<v Speaker 1>query doesn't return anything, but these subqueries do

01:09:23.000 --> 01:09:24.120
<v Speaker 1>return useful

01:09:24.495 --> 01:09:25.215
<v Speaker 1>data.

01:09:26.895 --> 01:09:27.774
<v Speaker 1>Okay.

01:09:28.895 --> 01:09:30.575
<v Speaker 0>Okay. So now I I I do wanna

01:09:30.575 --> 01:09:32.415
<v Speaker 0>start filling up this desk. So let me

01:09:32.415 --> 01:09:35.055
<v Speaker 0>just confirm what the hell I wrote there.

01:09:35.854 --> 01:09:36.814
<v Speaker 0>Slash

01:09:36.814 --> 01:09:37.535
<v Speaker 0>random.

01:09:44.120 --> 01:09:46.760
<v Speaker 0>That's not the size I was expecting.

01:09:49.640 --> 01:09:51.240
<v Speaker 0>Or maybe they can't isn't there what I

01:09:51.240 --> 01:09:53.515
<v Speaker 0>want. Let's just write, right now. Yeah. I

01:09:53.515 --> 01:09:55.835
<v Speaker 1>mean, the we yes. It's fine. So it

01:09:55.835 --> 01:09:58.074
<v Speaker 1>only would have created, like, a tiny

01:09:58.795 --> 01:10:01.114
<v Speaker 1>file. Oh, this is even tinier. Yeah.

01:10:02.075 --> 01:10:03.915
<v Speaker 0>Yeah. It was smaller than I expected, you

01:10:03.915 --> 01:10:05.515
<v Speaker 0>know. So we're I'm just gonna keep writing

01:10:05.515 --> 01:10:07.595
<v Speaker 0>with DD. So I guess, indeed, what I

01:10:07.595 --> 01:10:10.260
<v Speaker 0>should see now is if I You go

01:10:10.260 --> 01:10:12.740
<v Speaker 1>to the graph of predict linear, you will

01:10:12.740 --> 01:10:14.580
<v Speaker 1>see the linear prediction of where this will

01:10:14.580 --> 01:10:16.100
<v Speaker 1>end up in five minutes should go up

01:10:16.100 --> 01:10:16.820
<v Speaker 1>and up,

01:10:17.540 --> 01:10:20.180
<v Speaker 1>like, as as very soon now, at least.

01:10:21.445 --> 01:10:23.445
<v Speaker 0>Yeah. So we're still waiting on that fifteen

01:10:23.445 --> 01:10:25.844
<v Speaker 0>sec fifteen second scrape underflow, and we need

01:10:25.844 --> 01:10:27.925
<v Speaker 0>a couple of values underneath the test. Two

01:10:27.925 --> 01:10:30.645
<v Speaker 1>samples to actually see the change and yeah.

01:10:30.645 --> 01:10:32.165
<v Speaker 1>Yeah. Yeah. So if if you see at

01:10:32.165 --> 01:10:34.245
<v Speaker 1>this moment, it looks like it's going down

01:10:34.245 --> 01:10:35.765
<v Speaker 1>a lot, but it's not. If you look

01:10:35.370 --> 01:10:37.210
<v Speaker 1>at the y axis, it's basically staying the

01:10:37.210 --> 01:10:37.690
<v Speaker 1>same.

01:10:38.410 --> 01:10:40.410
<v Speaker 1>If you kind of just

01:10:42.170 --> 01:10:42.810
<v Speaker 1>yeah.

01:10:44.490 --> 01:10:46.170
<v Speaker 1>The the I guess the only real way

01:10:46.170 --> 01:10:48.090
<v Speaker 1>to refresh this graph is to either, like,

01:10:48.090 --> 01:10:49.930
<v Speaker 1>change one of the settings or

01:10:50.330 --> 01:10:51.210
<v Speaker 1>select

01:10:51.255 --> 01:10:54.215
<v Speaker 1>should put, like, a refresh button there directly.

01:10:54.215 --> 01:10:56.695
<v Speaker 1>Yeah. Yeah. For the sub mode, you know,

01:10:56.695 --> 01:10:58.375
<v Speaker 1>if you wanna if you wanna graph the

01:10:58.375 --> 01:11:00.135
<v Speaker 1>predict linear directly.

01:11:02.135 --> 01:11:04.054
<v Speaker 1>Oh, no. Actually, it should go down

01:11:04.455 --> 01:11:05.815
<v Speaker 1>because we're predicting

01:11:06.730 --> 01:11:09.449
<v Speaker 1>the available bytes, not the used bytes.

01:11:09.690 --> 01:11:11.530
<v Speaker 1>But currently, it's still not doing much. So

01:11:11.530 --> 01:11:13.130
<v Speaker 1>is you is the

01:11:13.929 --> 01:11:14.729
<v Speaker 1>actual

01:11:15.610 --> 01:11:16.969
<v Speaker 1>is it doing much?

01:11:17.849 --> 01:11:20.250
<v Speaker 1>Zero bytes copied, so it's not doing anything.

01:11:21.415 --> 01:11:23.895
<v Speaker 1>Oh, you wanna probably use dev view random.

01:11:24.295 --> 01:11:24.855
<v Speaker 0>Right?

01:11:25.415 --> 01:11:27.415
<v Speaker 0>Or because it's faster.

01:11:28.055 --> 01:11:29.175
<v Speaker 0>Random bytes.

01:11:29.735 --> 01:11:31.895
<v Speaker 0>Just Let's just check if that's working. Okay.

01:11:31.895 --> 01:11:34.295
<v Speaker 0>That's right. That's That's right. Yeah. Yeah.

01:11:35.335 --> 01:11:36.780
<v Speaker 0>So now we have to we could put

01:11:36.780 --> 01:11:38.219
<v Speaker 0>on a clock there. We have to visualize

01:11:38.219 --> 01:11:40.060
<v Speaker 0>this before I fill up that disk. Yeah.

01:11:40.060 --> 01:11:43.099
<v Speaker 1>Before you before everything crashes and Prometheus runs

01:11:43.099 --> 01:11:43.979
<v Speaker 1>into problems.

01:11:44.300 --> 01:11:46.460
<v Speaker 0>It's a particular there. I'm using my nice

01:11:46.460 --> 01:11:48.865
<v Speaker 0>auto complete here and digging it. You want

01:11:48.865 --> 01:11:52.065
<v Speaker 0>verify one minute with 300

01:11:52.145 --> 01:11:53.265
<v Speaker 0>less than zero.

01:11:54.705 --> 01:11:57.025
<v Speaker 0>Can click on this. I am. I'm I'm

01:11:57.025 --> 01:11:58.705
<v Speaker 0>liking this. I'm liking this. Nice.

01:12:00.145 --> 01:12:01.665
<v Speaker 0>Now we do okay. So now we started

01:12:01.665 --> 01:12:02.785
<v Speaker 0>right into that disk.

01:12:03.370 --> 01:12:04.810
<v Speaker 0>We just have to wait for those two

01:12:04.810 --> 01:12:06.730
<v Speaker 0>samples to collect now, which is gonna take

01:12:06.730 --> 01:12:09.370
<v Speaker 0>ten seconds. Mhmm. Zoom in a bit, like,

01:12:09.370 --> 01:12:11.369
<v Speaker 1>do over the last five minutes or so.

01:12:12.410 --> 01:12:12.730
<v Speaker 1>Yep.

01:12:19.205 --> 01:12:20.885
<v Speaker 0>And I I'm just gonna split this again

01:12:20.885 --> 01:12:22.805
<v Speaker 0>so I can actually track the disk usage.

01:12:22.805 --> 01:12:24.885
<v Speaker 1>Yeah. That's a good idea. Yeah. And we

01:12:24.885 --> 01:12:26.965
<v Speaker 1>wanna make sure that we're really tracking the

01:12:26.965 --> 01:12:29.045
<v Speaker 1>right one. So you're writing into root. Yeah.

01:12:35.030 --> 01:12:36.709
<v Speaker 0>Oh, no. Wrong one. There we go.

01:12:38.630 --> 01:12:41.189
<v Speaker 0>So s t p three, let's just grab.

01:12:42.949 --> 01:12:44.230
<v Speaker 0>I don't know what.

01:12:47.164 --> 01:12:48.764
<v Speaker 0>It's our desk is filling up. We went

01:12:48.764 --> 01:12:50.764
<v Speaker 0>from 6%. We're at 7%.

01:12:50.764 --> 01:12:53.005
<v Speaker 0>It's gone up to 6.34.

01:12:53.005 --> 01:12:54.284
<v Speaker 0>Okay. Right. Yeah. Yeah.

01:12:57.085 --> 01:12:58.925
<v Speaker 0>So this is gonna I think it was

01:12:58.925 --> 01:13:00.925
<v Speaker 0>a hundred gigs that said we had three.

01:13:01.489 --> 01:13:04.370
<v Speaker 0>Yep. But now that this is slowly filling

01:13:04.370 --> 01:13:06.690
<v Speaker 0>up, we should see this graph start to

01:13:06.690 --> 01:13:09.090
<v Speaker 0>take shape. Right? Yeah. Yeah. So I guess

01:13:09.090 --> 01:13:11.170
<v Speaker 1>the the workaround for not being able to

01:13:11.170 --> 01:13:13.250
<v Speaker 1>directly refresh this graph for a particular sub

01:13:13.250 --> 01:13:15.425
<v Speaker 1>note is to select the other subnote and

01:13:15.425 --> 01:13:17.744
<v Speaker 1>then switch back to predict linear. Or you

01:13:17.744 --> 01:13:20.385
<v Speaker 1>can just, like, change the the group the

01:13:20.385 --> 01:13:22.465
<v Speaker 1>graph setting or something. Yeah. Why is it

01:13:22.465 --> 01:13:24.144
<v Speaker 1>not going down yet?

01:13:25.585 --> 01:13:27.025
<v Speaker 1>We should probably try

01:13:29.410 --> 01:13:32.050
<v Speaker 1>can you add another query? Press that. Yeah.

01:13:32.130 --> 01:13:35.010
<v Speaker 0>Add another query and go directly to node

01:13:35.010 --> 01:13:37.329
<v Speaker 1>file system avail bytes.

01:13:37.570 --> 01:13:39.570
<v Speaker 1>Oh, yeah. We should also add our root

01:13:39.570 --> 01:13:42.130
<v Speaker 1>mount point filter again, I guess.

01:13:43.275 --> 01:13:45.115
<v Speaker 0>Oh, yeah. I saw that

01:13:45.115 --> 01:13:45.755
<v Speaker 0>point.

01:13:46.555 --> 01:13:47.675
<v Speaker 0>Yep. Mhmm.

01:13:49.035 --> 01:13:51.995
<v Speaker 1>And so that is not doing much yet.

01:13:51.995 --> 01:13:53.115
<v Speaker 1>It's not really

01:13:55.260 --> 01:13:57.500
<v Speaker 1>is it x oh, it's dev v d

01:13:57.500 --> 01:13:58.059
<v Speaker 1>a.

01:14:00.539 --> 01:14:02.219
<v Speaker 1>It's not are you are you sure you're

01:14:02.219 --> 01:14:04.860
<v Speaker 1>filling up the right machine's root disk? Because

01:14:04.860 --> 01:14:06.780
<v Speaker 1>it down there in the legend,

01:14:07.500 --> 01:14:09.900
<v Speaker 1>if you scroll further down, it says

01:14:10.965 --> 01:14:11.605
<v Speaker 1>and I think you had

01:14:12.804 --> 01:14:13.604
<v Speaker 0>something.

01:14:13.605 --> 01:14:14.164
<v Speaker 0>Right?

01:14:14.885 --> 01:14:16.804
<v Speaker 0>Oh, am I right into the wrong desk?

01:14:17.284 --> 01:14:18.405
<v Speaker 1>Yeah. I think so.

01:14:19.364 --> 01:14:20.965
<v Speaker 0>Or am I on the wrong machine?

01:14:21.205 --> 01:14:22.565
<v Speaker 1>Yeah. I think you're

01:14:22.965 --> 01:14:25.364
<v Speaker 0>Alright. So can we filter by the series?

01:14:26.460 --> 01:14:28.780
<v Speaker 0>Like, how do I Like, are we monitoring

01:14:28.780 --> 01:14:29.659
<v Speaker 1>the right thing?

01:14:31.980 --> 01:14:34.940
<v Speaker 0>CZedJ8CZedJ8.

01:14:37.900 --> 01:14:39.580
<v Speaker 0>Will I get the host name from here?

01:14:42.415 --> 01:14:44.094
<v Speaker 0>Where is give me a prompt.

01:14:44.815 --> 01:14:46.015
<v Speaker 0>Yeah. CZGA.

01:14:46.015 --> 01:14:47.614
<v Speaker 0>So we we are on this the same

01:14:47.614 --> 01:14:48.335
<v Speaker 0>machine.

01:14:50.815 --> 01:14:53.295
<v Speaker 0>It's weird that the desk labels are

01:14:53.375 --> 01:14:54.255
<v Speaker 0>different.

01:14:54.255 --> 01:14:56.255
<v Speaker 0>But, I mean, this is going down. Right?

01:14:56.255 --> 01:14:57.500
<v Speaker 0>This is correct.

01:14:57.900 --> 01:14:59.900
<v Speaker 1>Not really. It's going down, like,

01:15:00.220 --> 01:15:01.740
<v Speaker 1>couple of bytes

01:15:01.900 --> 01:15:03.740
<v Speaker 1>or something. You know? So if you look

01:15:03.740 --> 01:15:04.940
<v Speaker 1>at the y axis

01:15:06.300 --> 01:15:08.700
<v Speaker 1>and it's a different device name, so

01:15:09.145 --> 01:15:11.385
<v Speaker 1>it's it doesn't look like the right device.

01:15:11.945 --> 01:15:14.505
<v Speaker 0>So we went from 6% to 13% usage

01:15:14.505 --> 01:15:15.225
<v Speaker 0>here.

01:15:15.545 --> 01:15:16.905
<v Speaker 0>But if we're we're seeing a drop in

01:15:16.905 --> 01:15:18.665
<v Speaker 0>around, what, six six gig?

01:15:20.920 --> 01:15:22.039
<v Speaker 1>If you

01:15:22.840 --> 01:15:24.439
<v Speaker 1>so I'm a bit confused.

01:15:27.159 --> 01:15:30.519
<v Speaker 1>Just can we make sure we're we configured

01:15:30.519 --> 01:15:33.719
<v Speaker 1>Prometheus correctly to to scrape from the right

01:15:33.719 --> 01:15:36.405
<v Speaker 1>host? Oh, wait. At the very top? Oh,

01:15:36.405 --> 01:15:38.485
<v Speaker 1>I think I know what's going on. Okay.

01:15:38.485 --> 01:15:40.645
<v Speaker 1>Yeah. Yeah. Yeah. So we we we reloaded

01:15:40.645 --> 01:15:41.525
<v Speaker 1>the page.

01:15:42.245 --> 01:15:43.605
<v Speaker 1>Yeah. Yeah. Yeah. So

01:15:44.245 --> 01:15:44.805
<v Speaker 1>okay.

01:15:46.565 --> 01:15:48.005
<v Speaker 1>There we go. Okay.

01:15:48.005 --> 01:15:49.445
<v Speaker 1>This makes way more sense. I'm like, what

01:15:49.605 --> 01:15:52.520
<v Speaker 1>what's going on? Okay. So yeah. Okay.

01:15:53.480 --> 01:15:55.480
<v Speaker 1>We see the disc usage going down or

01:15:55.480 --> 01:15:58.120
<v Speaker 1>go So I can remove this query, add

01:15:58.120 --> 01:16:00.600
<v Speaker 0>in my label filter again where we only

01:16:00.600 --> 01:16:02.280
<v Speaker 0>wanna see the main point for the root

01:16:02.280 --> 01:16:04.805
<v Speaker 0>disc. We've got a one minute aggregate with

01:16:04.805 --> 01:16:06.405
<v Speaker 0>a five minute prediction.

01:16:06.645 --> 01:16:07.525
<v Speaker 1>Yeah. And

01:16:08.565 --> 01:16:10.325
<v Speaker 1>now if we yeah. So then

01:16:11.045 --> 01:16:13.365
<v Speaker 1>okay. So it will still take some time

01:16:13.365 --> 01:16:15.925
<v Speaker 1>until it thinks we will be. So if

01:16:15.925 --> 01:16:19.010
<v Speaker 1>you increase the prediction time to, yeah, longer

01:16:19.010 --> 01:16:21.730
<v Speaker 1>and longer, eventually, we will get to

01:16:22.290 --> 01:16:23.250
<v Speaker 1>the point.

01:16:24.050 --> 01:16:26.850
<v Speaker 1>Boom. Yeah. Now But it's telling me my

01:16:26.850 --> 01:16:28.530
<v Speaker 0>desk is gonna fill up.

01:16:31.890 --> 01:16:32.290
<v Speaker 1>In

01:16:36.755 --> 01:16:38.515
<v Speaker 0>oh, I don't know how to read this.

01:16:38.595 --> 01:16:40.915
<v Speaker 1>Well, basically so yeah.

01:16:41.555 --> 01:16:44.355
<v Speaker 1>What what this does is for every

01:16:45.395 --> 01:16:47.715
<v Speaker 1>point in time in the past five minutes,

01:16:47.715 --> 01:16:50.039
<v Speaker 1>it calculates the value of that

01:16:50.360 --> 01:16:53.320
<v Speaker 1>from QL expression for you. You probably only

01:16:53.320 --> 01:16:55.159
<v Speaker 1>want to look at the current value, like,

01:16:55.159 --> 01:16:56.760
<v Speaker 1>what so if you go maybe it's better

01:16:56.760 --> 01:16:58.120
<v Speaker 1>to look at this in the table view

01:16:58.120 --> 01:16:58.999
<v Speaker 1>in this case.

01:16:59.639 --> 01:17:01.560
<v Speaker 1>So which tells, like, at the current point

01:17:01.560 --> 01:17:01.880
<v Speaker 1>in time,

01:17:02.755 --> 01:17:05.315
<v Speaker 1>what is the current prediction based on the

01:17:05.315 --> 01:17:06.595
<v Speaker 1>last one minute

01:17:06.835 --> 01:17:09.555
<v Speaker 1>five fifty thousand seconds into the future?

01:17:13.395 --> 01:17:15.475
<v Speaker 0>Right. Okay. And then what I'm saying is

01:17:15.475 --> 01:17:17.395
<v Speaker 0>that fifty thousand seconds under the future, I'm

01:17:17.395 --> 01:17:19.060
<v Speaker 0>actually gonna be a negative space on my

01:17:19.060 --> 01:17:22.500
<v Speaker 0>disk. Exactly. Exactly. So we could, like, fiddle

01:17:22.500 --> 01:17:24.420
<v Speaker 1>with that number to see when exactly it

01:17:24.420 --> 01:17:26.340
<v Speaker 1>reaches zero. So maybe

01:17:28.980 --> 01:17:30.739
<v Speaker 0>Trial and error. Yeah.

01:17:31.219 --> 01:17:32.020
<v Speaker 1>3,000.

01:17:34.395 --> 01:17:35.835
<v Speaker 0>It's for Emma. Oh, it's

01:17:36.395 --> 01:17:37.995
<v Speaker 0>fill up now. Is that what it's telling

01:17:37.995 --> 01:17:40.235
<v Speaker 0>me? Right. No. Of course. Yeah.

01:17:46.395 --> 01:17:48.900
<v Speaker 1>Yeah. Good enough. Good enough. So, you know,

01:17:48.900 --> 01:17:51.219
<v Speaker 1>like, in half an hour or something,

01:17:51.620 --> 01:17:53.539
<v Speaker 1>if if you still had the

01:17:53.780 --> 01:17:55.940
<v Speaker 1>look only five minutes in the future, then

01:17:55.940 --> 01:17:57.699
<v Speaker 1>it would alert you in, I don't know,

01:17:57.699 --> 01:17:59.219
<v Speaker 1>half an hour or something. Yeah. I I

01:17:59.219 --> 01:18:01.620
<v Speaker 0>guess what's what what is important here? Like,

01:18:01.620 --> 01:18:03.219
<v Speaker 0>for this scenario that I just could randomly

01:18:03.219 --> 01:18:04.825
<v Speaker 0>throw at you there is that if we

01:18:04.825 --> 01:18:06.105
<v Speaker 0>say, you know,

01:18:06.425 --> 01:18:09.065
<v Speaker 0>in twelve hours, what's that in seconds? Twelve

01:18:09.065 --> 01:18:10.985
<v Speaker 0>hours. I should know that. Right?

01:18:12.425 --> 01:18:13.625
<v Speaker 0>Right. 43,000.

01:18:13.625 --> 01:18:15.865
<v Speaker 0>Like, within the next twelve hours, will my

01:18:15.865 --> 01:18:17.740
<v Speaker 0>desk be in a negative value? That's what's

01:18:17.740 --> 01:18:19.180
<v Speaker 0>really important for me there. I know that

01:18:19.180 --> 01:18:21.420
<v Speaker 0>I should be risen and alert during office

01:18:21.420 --> 01:18:23.260
<v Speaker 0>hours to say, look, you may wanna and

01:18:23.260 --> 01:18:25.340
<v Speaker 0>and that's only for predictable growth based on

01:18:25.340 --> 01:18:27.340
<v Speaker 0>the prediction the linear prediction algorithm. You know,

01:18:27.340 --> 01:18:28.380
<v Speaker 0>it's not gonna detect

01:18:28.725 --> 01:18:30.165
<v Speaker 0>random bursts

01:18:30.165 --> 01:18:32.324
<v Speaker 0>and desk usage, but still, like, a a

01:18:32.324 --> 01:18:34.485
<v Speaker 0>good alert to have, I would suggest, probably.

01:18:34.645 --> 01:18:37.604
<v Speaker 1>Yeah. Yeah. And maybe just to

01:18:39.844 --> 01:18:42.005
<v Speaker 1>a bit of an idea of how to

01:18:42.005 --> 01:18:43.364
<v Speaker 1>use this in a

01:18:43.860 --> 01:18:47.300
<v Speaker 1>more sophisticated alert because this one alone is

01:18:47.300 --> 01:18:49.300
<v Speaker 1>maybe sometimes not enough. You wanna combine it

01:18:49.300 --> 01:18:51.380
<v Speaker 1>with, like, oh, the trend, but also combine

01:18:51.380 --> 01:18:53.860
<v Speaker 1>it with the total number of disk space.

01:18:55.060 --> 01:18:58.005
<v Speaker 1>Like, for certain disks have different trends or

01:18:58.005 --> 01:18:58.965
<v Speaker 1>or limits.

01:18:59.525 --> 01:19:01.605
<v Speaker 1>If you go to if you search for

01:19:01.605 --> 01:19:03.445
<v Speaker 1>cube dash Prometheus,

01:19:04.005 --> 01:19:07.605
<v Speaker 1>which is a project initially by oh, sorry.

01:19:07.605 --> 01:19:10.885
<v Speaker 1>No. Like, Google. Yeah. Yeah. Dash dash Prometheus.

01:19:11.980 --> 01:19:14.780
<v Speaker 1>Yep. That's fine. And then press t,

01:19:16.060 --> 01:19:17.660
<v Speaker 1>and then you press rules.

01:19:19.020 --> 01:19:21.260
<v Speaker 1>And then you go to the manifest slash

01:19:21.260 --> 01:19:22.700
<v Speaker 1>Prometheus rules. No.

01:19:24.495 --> 01:19:27.055
<v Speaker 0>Like the Yep. Watch one. Mhmm. And I

01:19:27.055 --> 01:19:28.335
<v Speaker 1>think you search for,

01:19:29.215 --> 01:19:31.775
<v Speaker 1>like, node file system avail, like, this this

01:19:31.775 --> 01:19:34.655
<v Speaker 1>metric name that we had. Yep. So this

01:19:34.655 --> 01:19:36.815
<v Speaker 1>is one example. For example, like, node file

01:19:36.815 --> 01:19:38.900
<v Speaker 1>system space filling up. You could actually paste

01:19:38.900 --> 01:19:41.219
<v Speaker 1>that over into PromLens, that expression.

01:19:44.020 --> 01:19:46.100
<v Speaker 1>Visualize

01:19:46.100 --> 01:19:46.739
<v Speaker 1>it.

01:19:49.860 --> 01:19:50.500
<v Speaker 0>Oh, so

01:19:50.820 --> 01:19:52.740
<v Speaker 1>The the

01:19:52.135 --> 01:19:53.815
<v Speaker 1>text field at the very top, you could

01:19:53.815 --> 01:19:55.894
<v Speaker 1>just, like, paste it in. Got it.

01:19:56.534 --> 01:19:57.894
<v Speaker 0>And

01:19:59.335 --> 01:20:02.614
<v Speaker 1>so the first thing that does is it

01:20:02.614 --> 01:20:03.895
<v Speaker 1>calculates

01:20:04.579 --> 01:20:06.499
<v Speaker 1>the the ratio

01:20:06.579 --> 01:20:09.939
<v Speaker 1>of available bytes to the total size

01:20:10.260 --> 01:20:13.219
<v Speaker 1>for each of the partitions. It multiplies it

01:20:13.219 --> 01:20:15.300
<v Speaker 1>by a hundred to get 2%

01:20:15.460 --> 01:20:16.820
<v Speaker 1>from ratio, 2%.

01:20:17.755 --> 01:20:19.915
<v Speaker 1>Then it filters, so it only gives you

01:20:19.915 --> 01:20:23.195
<v Speaker 1>those partitions that have less than 40%

01:20:23.195 --> 01:20:24.555
<v Speaker 1>available space.

01:20:24.795 --> 01:20:26.715
<v Speaker 1>So this is an alert that would with

01:20:26.715 --> 01:20:28.715
<v Speaker 1>just this this top stuff, it would alert

01:20:28.715 --> 01:20:30.795
<v Speaker 1>you for everything that has less than 40%

01:20:30.795 --> 01:20:31.675
<v Speaker 1>available space.

01:20:32.110 --> 01:20:34.590
<v Speaker 1>But now it adds an extra condition and

01:20:34.590 --> 01:20:37.310
<v Speaker 1>says, okay. And for those same label combinations,

01:20:37.310 --> 01:20:38.510
<v Speaker 1>it has to be true

01:20:38.910 --> 01:20:40.510
<v Speaker 1>that the linear prediction

01:20:40.510 --> 01:20:42.510
<v Speaker 1>over the last six hours,

01:20:43.310 --> 01:20:44.670
<v Speaker 1>and projected

01:20:44.985 --> 01:20:47.705
<v Speaker 1>one day into the future, this 24 times

01:20:47.705 --> 01:20:48.985
<v Speaker 1>60 times 60,

01:20:50.105 --> 01:20:52.985
<v Speaker 1>has to be also negative, less than zero.

01:20:52.985 --> 01:20:54.585
<v Speaker 1>Like, that's what we did. So

01:20:54.985 --> 01:20:56.745
<v Speaker 1>if it's if a file system

01:20:57.460 --> 01:20:59.860
<v Speaker 1>currently has less than 40%

01:20:59.860 --> 01:21:02.340
<v Speaker 1>free space and in one day is projected

01:21:02.340 --> 01:21:04.900
<v Speaker 1>to have zero, then we want to alert.

01:21:04.900 --> 01:21:07.379
<v Speaker 1>And there's actually more conditions further down.

01:21:07.860 --> 01:21:09.860
<v Speaker 1>If you scroll, there's, like, one more end,

01:21:10.575 --> 01:21:12.175
<v Speaker 1>which is like, okay. If it's read file

01:21:12.335 --> 01:21:14.575
<v Speaker 1>read only file system, we wanna ignore it.

01:21:14.975 --> 01:21:15.615
<v Speaker 1>So,

01:21:15.775 --> 01:21:17.855
<v Speaker 1>like, in practice, there's a few more conditions

01:21:17.855 --> 01:21:19.375
<v Speaker 1>you wanna add.

01:21:20.015 --> 01:21:22.255
<v Speaker 1>And it's it's always tricky also to get

01:21:22.255 --> 01:21:23.855
<v Speaker 1>this predict linear to

01:21:24.690 --> 01:21:28.050
<v Speaker 1>to work just right for your workload because,

01:21:28.050 --> 01:21:28.690
<v Speaker 1>like,

01:21:29.010 --> 01:21:30.369
<v Speaker 1>what exact

01:21:31.090 --> 01:21:33.410
<v Speaker 1>amount of history do you want to look

01:21:33.410 --> 01:21:35.969
<v Speaker 1>over and how far into the future?

01:21:37.330 --> 01:21:39.010
<v Speaker 1>You have some workloads that

01:21:39.465 --> 01:21:41.465
<v Speaker 1>generate, like, a sawtooth, and then they do

01:21:41.465 --> 01:21:43.225
<v Speaker 1>cleanup and go up again and do a

01:21:43.225 --> 01:21:45.385
<v Speaker 1>cleanup. And if you look over the wrong,

01:21:45.385 --> 01:21:47.305
<v Speaker 1>like, only over a couple of minutes and

01:21:47.305 --> 01:21:49.785
<v Speaker 1>predict too much far into the future, then

01:21:49.785 --> 01:21:50.905
<v Speaker 1>you might think, like, oh my god. The

01:21:50.905 --> 01:21:53.705
<v Speaker 1>disk is gonna fill up. But, actually, they,

01:21:53.705 --> 01:21:55.610
<v Speaker 1>you know, they do a cleanup way before

01:21:55.610 --> 01:21:57.690
<v Speaker 1>they actually fill up the disk. So kinda

01:21:57.690 --> 01:22:00.330
<v Speaker 1>need to know the workload on your machine

01:22:00.330 --> 01:22:01.050
<v Speaker 1>and

01:22:01.210 --> 01:22:02.169
<v Speaker 1>adjust

01:22:02.409 --> 01:22:03.689
<v Speaker 1>these alerts

01:22:03.770 --> 01:22:05.610
<v Speaker 1>accordingly. So it it is a bit tricky

01:22:05.610 --> 01:22:08.114
<v Speaker 1>still, but such is life. It's messy.

01:22:08.995 --> 01:22:10.595
<v Speaker 0>Exactly. Yeah. I think a lot of this

01:22:10.595 --> 01:22:12.915
<v Speaker 0>stuff is really just you gotta start collecting

01:22:12.915 --> 01:22:14.835
<v Speaker 0>the data first and then start to understand

01:22:14.835 --> 01:22:16.595
<v Speaker 0>how it changes and evolves over time and

01:22:16.595 --> 01:22:18.515
<v Speaker 0>write your queries. I don't I I mean,

01:22:18.515 --> 01:22:20.355
<v Speaker 0>I think Prometheus is a really good project.

01:22:20.355 --> 01:22:22.195
<v Speaker 0>It provides some really sensible defaults, but, you

01:22:22.195 --> 01:22:25.530
<v Speaker 0>know, teams probably only understand their own infrastructure,

01:22:25.530 --> 01:22:27.210
<v Speaker 0>their own use cases, and and adapt them

01:22:27.210 --> 01:22:28.970
<v Speaker 0>wherever possible for sure. Yeah.

01:22:30.090 --> 01:22:31.690
<v Speaker 1>Kubernetes is great.

01:22:32.810 --> 01:22:34.890
<v Speaker 0>Yeah. I I mean, we've not even looked

01:22:34.890 --> 01:22:35.450
<v Speaker 0>at

01:22:35.930 --> 01:22:38.075
<v Speaker 0>the at the Prometheus the Kubernetes integrations for

01:22:38.075 --> 01:22:40.235
<v Speaker 0>Prometheus yet. And, you know, we're just about

01:22:40.235 --> 01:22:42.075
<v Speaker 0>out of time. So maybe that'll be something

01:22:42.075 --> 01:22:44.155
<v Speaker 0>for another day where we can because as

01:22:44.155 --> 01:22:45.675
<v Speaker 0>as said, if we just summarize it, I

01:22:45.675 --> 01:22:47.114
<v Speaker 0>guess, in a few minutes, but

01:22:47.515 --> 01:22:49.915
<v Speaker 0>where we have been specifying our our targets

01:22:49.915 --> 01:22:50.395
<v Speaker 0>here

01:22:51.590 --> 01:22:53.909
<v Speaker 0>and and the the configuration fail itself, it's

01:22:53.909 --> 01:22:55.590
<v Speaker 0>not something we would necessarily have to do

01:22:55.590 --> 01:22:57.909
<v Speaker 0>with with Kubernetes

01:22:58.710 --> 01:23:00.070
<v Speaker 0>there. Is that correct?

01:23:00.869 --> 01:23:03.030
<v Speaker 1>Yeah. Yeah. You basically can have in the

01:23:03.030 --> 01:23:05.185
<v Speaker 1>extreme case, you could only have one scrape

01:23:05.185 --> 01:23:06.864
<v Speaker 1>config where you point it at the API

01:23:06.864 --> 01:23:09.265
<v Speaker 1>server and map everything over in the correct

01:23:09.265 --> 01:23:12.385
<v Speaker 1>ways, and then Prometheus will always have an

01:23:12.385 --> 01:23:14.465
<v Speaker 1>up to date view of what is in

01:23:14.465 --> 01:23:16.945
<v Speaker 1>your cluster. Now in real use cases, you

01:23:16.945 --> 01:23:20.520
<v Speaker 1>still have multiple scrape configs for certain things

01:23:20.520 --> 01:23:22.360
<v Speaker 1>a bit differently, and you can do black

01:23:22.360 --> 01:23:24.760
<v Speaker 1>box probing and, like, this external

01:23:25.640 --> 01:23:26.440
<v Speaker 1>probing that

01:23:27.480 --> 01:23:29.080
<v Speaker 1>and so on. There's, like, different things you

01:23:29.080 --> 01:23:29.719
<v Speaker 1>can do.

01:23:30.920 --> 01:23:31.560
<v Speaker 1>And

01:23:31.960 --> 01:23:33.640
<v Speaker 1>I guess, like, what are other areas we

01:23:33.640 --> 01:23:35.885
<v Speaker 1>haven't mentioned yet? We haven't even touched on

01:23:35.885 --> 01:23:36.764
<v Speaker 0>the alerts.

01:23:36.765 --> 01:23:39.245
<v Speaker 1>Yeah. We haven't set up alert manager. Like,

01:23:39.245 --> 01:23:41.965
<v Speaker 1>it's like a component that aggregates the alerts

01:23:41.965 --> 01:23:44.285
<v Speaker 1>of all your different Prometheus servers, can correlate

01:23:44.285 --> 01:23:46.685
<v Speaker 1>them, bunch them into one notification instead of,

01:23:46.685 --> 01:23:47.485
<v Speaker 1>like, a thousand,

01:23:48.710 --> 01:23:51.590
<v Speaker 1>give you nice human readable alert snippets on

01:23:51.590 --> 01:23:55.350
<v Speaker 1>Slack, PagerDuty ops ops genie, etcetera, etcetera.

01:23:56.550 --> 01:23:59.350
<v Speaker 1>There's so many there's, like, hundreds of open

01:23:59.350 --> 01:24:02.185
<v Speaker 1>source integrations to get metrics out of all

01:24:02.185 --> 01:24:03.864
<v Speaker 1>the things you care about. These are called

01:24:03.864 --> 01:24:04.824
<v Speaker 1>exporters.

01:24:05.065 --> 01:24:06.025
<v Speaker 1>There are

01:24:07.304 --> 01:24:09.945
<v Speaker 1>people building and also sometimes offering a SaaS

01:24:09.945 --> 01:24:10.824
<v Speaker 1>services

01:24:11.225 --> 01:24:12.105
<v Speaker 1>remote,

01:24:12.425 --> 01:24:15.145
<v Speaker 1>durable, scalable storages. So if you wanna keep

01:24:15.145 --> 01:24:17.870
<v Speaker 1>your data forever in a durable system, Prometheus

01:24:17.870 --> 01:24:18.989
<v Speaker 1>can send it there.

01:24:20.430 --> 01:24:22.750
<v Speaker 1>Yeah. There's so much more. Yeah. I

01:24:24.110 --> 01:24:25.470
<v Speaker 0>think what I what I'll say to the

01:24:25.470 --> 01:24:27.310
<v Speaker 0>people that are watching this, I will definitely

01:24:27.310 --> 01:24:29.790
<v Speaker 0>run more sessions on Prometheus. That's that's a

01:24:29.790 --> 01:24:32.945
<v Speaker 0>guarantee, especially with Kubernetes as as a service

01:24:32.945 --> 01:24:34.945
<v Speaker 0>discovery and looking at how we monitor Kubernetes.

01:24:34.945 --> 01:24:36.465
<v Speaker 0>I won't make you commit right here and

01:24:36.465 --> 01:24:37.744
<v Speaker 0>right now that you'll join me in those

01:24:37.744 --> 01:24:39.664
<v Speaker 0>sessions. Oh, got you. Yeah. For sure.

01:24:40.465 --> 01:24:41.505
<v Speaker 0>I was trying to give you a go

01:24:41.585 --> 01:24:42.945
<v Speaker 0>a jail free card there, but you you

01:24:42.945 --> 01:24:45.105
<v Speaker 0>you threw away. So Now, Julius is just

01:24:45.105 --> 01:24:47.425
<v Speaker 0>committed to joining me on on more exploration

01:24:47.425 --> 01:24:50.360
<v Speaker 0>of Prometheus within a Kubernetes context.

01:24:50.520 --> 01:24:52.679
<v Speaker 0>We just have a a comment from hacker

01:24:52.679 --> 01:24:54.280
<v Speaker 0>saying very interested in the lights and thank

01:24:54.280 --> 01:24:56.360
<v Speaker 0>you both. So Definitely, Julius. This has been

01:24:56.360 --> 01:24:58.280
<v Speaker 0>an absolute pleasure. It's been great to

01:24:58.600 --> 01:25:01.080
<v Speaker 0>to see Prometheus and, you know, play with

01:25:01.080 --> 01:25:03.880
<v Speaker 0>the exporter and really get a nice look

01:25:03.345 --> 01:25:05.345
<v Speaker 0>at PromLens. It looks like a really exciting

01:25:05.345 --> 01:25:07.265
<v Speaker 0>project, and I'm I'm I'm hoping that there's

01:25:07.265 --> 01:25:08.625
<v Speaker 0>a lot more to come there as well.

01:25:08.785 --> 01:25:11.185
<v Speaker 0>So thank you. Yeah. Thank you. That's been

01:25:11.185 --> 01:25:11.745
<v Speaker 1>fun.

01:25:12.625 --> 01:25:14.545
<v Speaker 0>I hope we got one

01:25:15.500 --> 01:25:17.580
<v Speaker 0>one comment popping on at the end there.

01:25:17.580 --> 01:25:18.699
<v Speaker 0>Let me see if I can read this

01:25:18.699 --> 01:25:20.300
<v Speaker 0>quickly. For example, I'm gonna have to work

01:25:20.300 --> 01:25:21.980
<v Speaker 0>on a fresh Laravel project. What would be

01:25:21.980 --> 01:25:23.900
<v Speaker 0>the first metrics you would like to monitor?

01:25:23.900 --> 01:25:27.100
<v Speaker 0>Give some examples, please. Yeah. Okay. We can

01:25:27.100 --> 01:25:29.295
<v Speaker 0>we can do this in in three minutes.

01:25:29.295 --> 01:25:31.695
<v Speaker 0>Right? So Laravel, don't know if you're familiar

01:25:31.695 --> 01:25:33.615
<v Speaker 0>with it, Julius, is a PHP framework. It

01:25:33.615 --> 01:25:36.015
<v Speaker 0>delivers web applications. So what do you have

01:25:36.015 --> 01:25:38.015
<v Speaker 0>any opinions? I certainly got a few I

01:25:38.015 --> 01:25:40.255
<v Speaker 0>can throw out as well on how what

01:25:40.255 --> 01:25:42.015
<v Speaker 0>metrics are important for a web application.

01:25:42.960 --> 01:25:45.360
<v Speaker 1>Yeah. For web application in general. So PHP

01:25:45.360 --> 01:25:47.520
<v Speaker 1>can sometimes be a bit challenging if it's

01:25:47.520 --> 01:25:49.280
<v Speaker 1>not a long running server that can actually

01:25:49.280 --> 01:25:50.559
<v Speaker 1>track metrics

01:25:50.560 --> 01:25:53.040
<v Speaker 1>over time, like these counters that, you know,

01:25:53.040 --> 01:25:54.160
<v Speaker 1>are supposed to only go up.

01:25:54.844 --> 01:25:56.525
<v Speaker 1>If you have such a situation,

01:25:56.685 --> 01:25:58.925
<v Speaker 1>just a general comment, you will immediately

01:25:59.085 --> 01:26:01.645
<v Speaker 1>need to, like, externalize your events to some

01:26:01.645 --> 01:26:04.284
<v Speaker 1>system that can aggregate them into counters. For

01:26:04.364 --> 01:26:06.844
<v Speaker 1>example, send them as statsty style metrics and

01:26:06.844 --> 01:26:09.280
<v Speaker 1>then use the stats d gateway that can

01:26:09.280 --> 01:26:11.760
<v Speaker 1>aggregate them over time and have Prometheus scrape

01:26:11.760 --> 01:26:14.080
<v Speaker 1>that. Just just one one thing. Not too

01:26:14.080 --> 01:26:16.400
<v Speaker 1>familiar with Laravel itself, but, generally,

01:26:16.880 --> 01:26:18.320
<v Speaker 1>with web applications,

01:26:18.320 --> 01:26:20.960
<v Speaker 1>the first things you start tracking are the

01:26:20.960 --> 01:26:23.885
<v Speaker 1>so called red metrics, r, e, and d.

01:26:25.245 --> 01:26:27.485
<v Speaker 1>So r stands for requests,

01:26:28.125 --> 01:26:30.525
<v Speaker 1>which is, like, basically counting how many requests

01:26:30.525 --> 01:26:33.565
<v Speaker 1>you've had and of which different types. Like,

01:26:33.565 --> 01:26:36.045
<v Speaker 1>maybe you wanna track each method or path

01:26:36.045 --> 01:26:37.565
<v Speaker 1>or status code a bit separately.

01:26:39.050 --> 01:26:40.730
<v Speaker 1>So a counter for that so then later

01:26:40.730 --> 01:26:42.489
<v Speaker 1>on, you can graph with the rate, like,

01:26:42.489 --> 01:26:44.570
<v Speaker 1>how many requests per second are you getting.

01:26:45.050 --> 01:26:47.689
<v Speaker 1>The second one, e, would be the errors.

01:26:47.769 --> 01:26:48.329
<v Speaker 1>So

01:26:49.690 --> 01:26:51.449
<v Speaker 1>if you don't already have it broken up

01:26:51.449 --> 01:26:53.375
<v Speaker 1>by status code or or, you know, if

01:26:53.375 --> 01:26:55.055
<v Speaker 1>if you have errors in your application, you

01:26:55.055 --> 01:26:57.295
<v Speaker 1>wanna count how many of which type are

01:26:57.295 --> 01:26:59.935
<v Speaker 1>happening. So then you can also alert on

01:26:59.935 --> 01:27:02.495
<v Speaker 1>that and graph that. And the d stands

01:27:02.495 --> 01:27:03.614
<v Speaker 1>for durations,

01:27:03.935 --> 01:27:05.135
<v Speaker 1>basically a distribution

01:27:05.720 --> 01:27:09.000
<v Speaker 1>of your latencies in your in your request

01:27:09.000 --> 01:27:11.640
<v Speaker 1>handling. So you could use a summary for

01:27:11.640 --> 01:27:13.720
<v Speaker 1>that if you never wanna aggregate over a

01:27:13.720 --> 01:27:14.600
<v Speaker 1>dimensions.

01:27:15.240 --> 01:27:17.080
<v Speaker 1>But, typically, probably, you would want to use,

01:27:17.080 --> 01:27:19.239
<v Speaker 1>like, a histogram metric for that to

01:27:19.720 --> 01:27:20.280
<v Speaker 1>track

01:27:20.635 --> 01:27:23.595
<v Speaker 1>the request latencies into buckets and then later

01:27:23.595 --> 01:27:24.795
<v Speaker 1>on calculate

01:27:24.955 --> 01:27:27.515
<v Speaker 1>percentiles from that and so on. So those

01:27:27.515 --> 01:27:29.594
<v Speaker 1>are the first ones, and then it depends

01:27:30.315 --> 01:27:32.795
<v Speaker 1>very much on the internals of an application,

01:27:32.795 --> 01:27:34.635
<v Speaker 1>what other stuff is happening in there. Are

01:27:34.635 --> 01:27:36.619
<v Speaker 1>there queues where you wanna expose the length

01:27:36.619 --> 01:27:38.860
<v Speaker 1>or, like, different other stuff? But,

01:27:39.099 --> 01:27:41.020
<v Speaker 1>yeah, those those are the the first metrics

01:27:41.020 --> 01:27:43.019
<v Speaker 1>that are, like, the obvious ones to add.

01:27:43.420 --> 01:27:44.460
<v Speaker 0>Yeah. Definitely.

01:27:44.460 --> 01:27:46.060
<v Speaker 0>I mean, I think the ones you've listed

01:27:46.060 --> 01:27:48.699
<v Speaker 0>there, they're probably libraries. I know that, you

01:27:48.699 --> 01:27:51.615
<v Speaker 0>know, PHP frameworks are very popular. They'll probably

01:27:51.615 --> 01:27:53.375
<v Speaker 0>handle most of the red metrics for you

01:27:53.375 --> 01:27:55.935
<v Speaker 0>handling how many request command, the response times,

01:27:55.935 --> 01:27:57.855
<v Speaker 0>the histograms, and all that. And it's really

01:27:57.855 --> 01:27:59.455
<v Speaker 0>important, like, Julius just said there as well,

01:27:59.455 --> 01:28:01.135
<v Speaker 0>to understand your own application and then met

01:28:01.135 --> 01:28:02.415
<v Speaker 0>your own instrumentation.

01:28:02.975 --> 01:28:04.895
<v Speaker 0>They actually understand your own domain. So

01:28:05.770 --> 01:28:08.570
<v Speaker 0>I think there's actually an open telemetry exporter

01:28:08.570 --> 01:28:11.850
<v Speaker 0>for Prometheus for PHP applications and PHP runtime

01:28:11.850 --> 01:28:13.530
<v Speaker 0>as well. So there's definitely loads of things

01:28:13.530 --> 01:28:14.969
<v Speaker 0>you can look at there, Robert.

01:28:16.570 --> 01:28:18.605
<v Speaker 0>Alright. Awesome. We have no more questions. I

01:28:18.605 --> 01:28:20.125
<v Speaker 0>will say thank you again, Julius. It was

01:28:20.125 --> 01:28:23.005
<v Speaker 0>a really insightful and a great learning experience.

01:28:23.005 --> 01:28:24.125
<v Speaker 0>So thank you for joining me, and I

01:28:24.125 --> 01:28:25.805
<v Speaker 0>look forward to our next session. Thank you.

01:28:25.805 --> 01:28:28.125
<v Speaker 1>That was a lot of fun. Be happy

01:28:28.125 --> 01:28:29.085
<v Speaker 1>to join again.

01:28:29.325 --> 01:28:30.845
<v Speaker 0>Alright. You have a nice day. I'll speak

01:28:30.845 --> 01:28:32.365
<v Speaker 0>to you soon. Thanks. You too. See you.
