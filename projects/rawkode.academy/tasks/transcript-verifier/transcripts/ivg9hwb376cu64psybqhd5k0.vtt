WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 7f5de010-e3e2-4c09-9b13-5207184bbf24
Created: 2025-04-29T15:06:01.106Z
Duration: 920.8751
Channels: 1

00:00:00.880 --> 00:00:03.679
<v Speaker 0>Hello, and welcome to my latest course at

00:00:03.679 --> 00:00:05.360
<v Speaker 0>the Rawkode Academy.

00:00:05.600 --> 00:00:07.120
<v Speaker 0>This is Portainer

00:00:07.120 --> 00:00:08.480
<v Speaker 0>in production.

00:00:12.160 --> 00:00:14.000
<v Speaker 0>I want to say thank you to Neil

00:00:14.000 --> 00:00:15.679
<v Speaker 0>and his team at Portainer

00:00:15.955 --> 00:00:17.315
<v Speaker 0>for kindly sponsoring

00:00:17.315 --> 00:00:19.715
<v Speaker 0>my time to produce this course.

00:00:20.115 --> 00:00:22.195
<v Speaker 0>So what will this course entail?

00:00:22.515 --> 00:00:24.994
<v Speaker 0>Over the next few weeks, we will be

00:00:24.994 --> 00:00:27.715
<v Speaker 0>diving in to how to run Portainer in

00:00:27.715 --> 00:00:30.515
<v Speaker 0>production to manage real production workloads.

00:00:32.180 --> 00:00:34.180
<v Speaker 0>We'll be taking a look at some interesting

00:00:34.180 --> 00:00:35.700
<v Speaker 0>features of Portainer,

00:00:36.180 --> 00:00:38.500
<v Speaker 0>such as fleet management and GitOps,

00:00:38.820 --> 00:00:40.260
<v Speaker 0>ditching Kubernetes,

00:00:41.140 --> 00:00:42.820
<v Speaker 0>for simpler orchestrators

00:00:42.915 --> 00:00:44.675
<v Speaker 0>like Nomad and Swarm,

00:00:45.395 --> 00:00:46.995
<v Speaker 0>multi cluster management,

00:00:47.155 --> 00:00:48.995
<v Speaker 0>securing your workloads,

00:00:49.635 --> 00:00:52.915
<v Speaker 0>and even a live hacking experiment where I

00:00:52.915 --> 00:00:55.475
<v Speaker 0>attempt to add OCI

00:00:55.555 --> 00:00:56.754
<v Speaker 0>registry support

00:00:57.270 --> 00:01:00.630
<v Speaker 0>to enrich the GitOps capabilities of Portainer.

00:01:01.110 --> 00:01:03.350
<v Speaker 0>I hope you are as excited as I

00:01:03.350 --> 00:01:05.990
<v Speaker 0>am for this Portainer and production course.

00:01:06.710 --> 00:01:09.110
<v Speaker 0>Today, we start with our first tutorial,

00:01:10.165 --> 00:01:13.285
<v Speaker 0>which is to take an existing Portainer installation

00:01:14.245 --> 00:01:17.125
<v Speaker 0>and look at the different ways to manage

00:01:17.205 --> 00:01:19.925
<v Speaker 0>the x five zero nine TLS certificates.

00:01:22.180 --> 00:01:23.300
<v Speaker 0>Let's have some fun.

00:01:26.580 --> 00:01:28.980
<v Speaker 0>So when you install Portainer for the first

00:01:28.980 --> 00:01:31.860
<v Speaker 0>time, you're presented with this screen.

00:01:32.340 --> 00:01:34.260
<v Speaker 0>This is a vanilla e c two box

00:01:34.260 --> 00:01:35.860
<v Speaker 0>running on AWS

00:01:36.635 --> 00:01:39.195
<v Speaker 0>with a docker installation of Portainer.

00:01:40.875 --> 00:01:43.675
<v Speaker 0>By default, TLS runs on nine four four

00:01:43.675 --> 00:01:44.315
<v Speaker 0>three,

00:01:44.555 --> 00:01:47.835
<v Speaker 0>and Portainer is very kind. It generates some

00:01:47.835 --> 00:01:49.995
<v Speaker 0>self signed certificates so that you can get

00:01:49.995 --> 00:01:52.820
<v Speaker 0>started right away in a secure fashion.

00:01:54.100 --> 00:01:55.939
<v Speaker 0>But, of course, as we all know with

00:01:55.939 --> 00:01:58.740
<v Speaker 0>self signed certificates, our browsers can't

00:01:59.060 --> 00:02:00.020
<v Speaker 0>verify

00:02:00.340 --> 00:02:01.460
<v Speaker 0>or trust

00:02:01.700 --> 00:02:02.579
<v Speaker 0>the route.

00:02:03.619 --> 00:02:05.939
<v Speaker 0>So you'll often be presented with this screen

00:02:05.835 --> 00:02:08.074
<v Speaker 0>which says your connection is not private.

00:02:09.435 --> 00:02:11.675
<v Speaker 0>Now, of course, we can click on advanced

00:02:11.675 --> 00:02:13.275
<v Speaker 0>and say proceed,

00:02:14.315 --> 00:02:17.035
<v Speaker 0>and this is enough for most.

00:02:17.515 --> 00:02:18.395
<v Speaker 0>Of course,

00:02:18.875 --> 00:02:20.395
<v Speaker 0>we can improve the situation.

00:02:21.189 --> 00:02:22.549
<v Speaker 0>In 2022,

00:02:22.549 --> 00:02:23.829
<v Speaker 0>we have access to let's

00:02:24.549 --> 00:02:25.430
<v Speaker 0>have free

00:02:25.510 --> 00:02:26.950
<v Speaker 0>TLS certificates

00:02:27.670 --> 00:02:28.790
<v Speaker 0>all day long.

00:02:29.670 --> 00:02:31.590
<v Speaker 0>So in this session, we're gonna take a

00:02:31.590 --> 00:02:33.510
<v Speaker 0>look at how we can use cert bot

00:02:33.510 --> 00:02:34.709
<v Speaker 0>on the host

00:02:34.965 --> 00:02:37.365
<v Speaker 0>to provision the x five zero nines

00:02:37.925 --> 00:02:39.845
<v Speaker 0>and have Portainer mount them in to the

00:02:39.845 --> 00:02:40.885
<v Speaker 0>Docker container

00:02:41.765 --> 00:02:43.845
<v Speaker 0>to replace the self signed certificates.

00:02:44.725 --> 00:02:46.645
<v Speaker 0>But that still requires a little bit of

00:02:46.645 --> 00:02:47.125
<v Speaker 0>manual work.

00:02:47.730 --> 00:02:49.090
<v Speaker 0>So we're gonna take a look at a

00:02:49.090 --> 00:02:50.210
<v Speaker 0>second option too,

00:02:50.690 --> 00:02:52.770
<v Speaker 0>which is to run a reverse proxy in

00:02:52.770 --> 00:02:54.050
<v Speaker 0>front of Portainer,

00:02:54.290 --> 00:02:55.490
<v Speaker 0>which can handle

00:02:55.570 --> 00:02:57.250
<v Speaker 0>the let's encrypt negotiation,

00:02:57.250 --> 00:02:59.330
<v Speaker 0>the let's encrypt dance for you.

00:02:59.890 --> 00:03:01.330
<v Speaker 0>And for this, we'll be taking a look

00:03:01.330 --> 00:03:01.970
<v Speaker 0>at CATI.

00:03:03.724 --> 00:03:06.045
<v Speaker 0>There's no right or wrong answer when it

00:03:06.045 --> 00:03:07.325
<v Speaker 0>comes to using

00:03:07.645 --> 00:03:09.085
<v Speaker 0>either of these methods.

00:03:10.125 --> 00:03:12.444
<v Speaker 0>If you are happy and comfortable with Portainer's

00:03:12.444 --> 00:03:14.205
<v Speaker 0>cell sign certificates, then go nuts.

00:03:14.940 --> 00:03:16.700
<v Speaker 0>If you don't mind doing a little bit

00:03:16.700 --> 00:03:18.379
<v Speaker 0>of plumbing and running cert bot on your

00:03:18.379 --> 00:03:19.020
<v Speaker 0>host,

00:03:19.340 --> 00:03:20.380
<v Speaker 0>fine by me.

00:03:20.860 --> 00:03:22.300
<v Speaker 0>And if you wanna take the extra step

00:03:22.300 --> 00:03:24.459
<v Speaker 0>and configure a reverse proxy that manages the

00:03:24.459 --> 00:03:25.820
<v Speaker 0>Acme dance for you,

00:03:26.780 --> 00:03:27.739
<v Speaker 0>then so be it.

00:03:29.015 --> 00:03:30.615
<v Speaker 0>So let's take a look at the different

00:03:30.615 --> 00:03:32.615
<v Speaker 0>ways to manage our x five zero nines

00:03:32.615 --> 00:03:33.655
<v Speaker 0>for Portainer.

00:03:33.815 --> 00:03:35.095
<v Speaker 0>So the first thing we're gonna take a

00:03:35.095 --> 00:03:37.335
<v Speaker 0>look at is the settings page.

00:03:37.975 --> 00:03:41.095
<v Speaker 0>From the Portainer homepage, if you click on

00:03:41.095 --> 00:03:41.655
<v Speaker 0>settings

00:03:42.160 --> 00:03:44.880
<v Speaker 0>and scroll down, you will see the SSL

00:03:44.880 --> 00:03:46.320
<v Speaker 0>certificate settings.

00:03:47.200 --> 00:03:49.680
<v Speaker 0>If you really want an extended validation certificate,

00:03:49.680 --> 00:03:51.440
<v Speaker 0>an EV cert, and you wanna go and

00:03:51.440 --> 00:03:52.640
<v Speaker 0>pay $500,

00:03:53.120 --> 00:03:55.385
<v Speaker 0>this is where you upload it. You select

00:03:55.385 --> 00:03:58.505
<v Speaker 0>file for the private key and the certificate,

00:03:58.505 --> 00:03:59.625
<v Speaker 0>and you're good to go.

00:04:00.825 --> 00:04:03.065
<v Speaker 0>Regardless of which TLS method you use with

00:04:03.065 --> 00:04:05.065
<v Speaker 0>your Portainer, I'm gonna recommend

00:04:05.385 --> 00:04:07.705
<v Speaker 0>that you tick the force HTTPS

00:04:07.705 --> 00:04:09.065
<v Speaker 0>only box and apply.

00:04:09.920 --> 00:04:12.320
<v Speaker 0>You don't really want to expose any web

00:04:12.320 --> 00:04:14.480
<v Speaker 0>service in this day and age over regular

00:04:14.480 --> 00:04:15.520
<v Speaker 0>HTTP.

00:04:16.160 --> 00:04:18.720
<v Speaker 0>So let's practice good hygiene and secure it.

00:04:22.640 --> 00:04:22.960
<v Speaker 0>Perfect.

00:04:25.065 --> 00:04:25.865
<v Speaker 0>Okay.

00:04:27.305 --> 00:04:29.625
<v Speaker 0>Now that we have Portainer running

00:04:29.785 --> 00:04:31.625
<v Speaker 0>with the self signed certificate and we are

00:04:31.625 --> 00:04:32.825
<v Speaker 0>enforcing HTTPS

00:04:32.825 --> 00:04:35.385
<v Speaker 0>mode, we can look at alternative ways to

00:04:35.385 --> 00:04:39.385
<v Speaker 0>get our own x five zero nine certificates

00:04:38.340 --> 00:04:39.620
<v Speaker 0>into the setup.

00:04:40.020 --> 00:04:41.380
<v Speaker 0>The first way that I want to show

00:04:41.380 --> 00:04:41.860
<v Speaker 0>you

00:04:42.340 --> 00:04:43.860
<v Speaker 0>is using cert bot.

00:04:44.180 --> 00:04:46.180
<v Speaker 0>If you're not familiar with cert bot, it

00:04:46.180 --> 00:04:47.780
<v Speaker 0>is a piece of software

00:04:48.020 --> 00:04:50.100
<v Speaker 0>from the team at Let's Encrypt.

00:04:50.740 --> 00:04:53.060
<v Speaker 0>This speaks to ACME protocol to the Let's

00:04:52.905 --> 00:04:55.625
<v Speaker 0>encrypt servers and issues certificates.

00:04:57.145 --> 00:05:00.825
<v Speaker 0>To run certbot on Ubuntu is relatively easy.

00:05:01.385 --> 00:05:03.865
<v Speaker 0>It's delivered as a snap application, and snap

00:05:03.865 --> 00:05:06.025
<v Speaker 0>is available on all Ubuntu machines.

00:05:07.040 --> 00:05:10.400
<v Speaker 0>So first, we run snap install core.

00:05:11.120 --> 00:05:13.600
<v Speaker 0>We then do a snap refresh core.

00:05:13.920 --> 00:05:16.560
<v Speaker 0>This will update the snap package list, allowing

00:05:16.560 --> 00:05:23.120
<v Speaker 0>us to install the latest version of certbot.

00:05:20.555 --> 00:05:23.515
<v Speaker 0>Next, we run snap install certbot.

00:05:23.595 --> 00:05:25.915
<v Speaker 0>Only we're gonna pass the dash dash classic

00:05:25.915 --> 00:05:26.635
<v Speaker 0>flag.

00:05:27.115 --> 00:05:28.955
<v Speaker 0>Dash dash classic just means that we're going

00:05:28.955 --> 00:05:31.195
<v Speaker 0>to run certbot with access to the host

00:05:31.195 --> 00:05:33.275
<v Speaker 0>and no c groups or namespace constraints.

00:05:35.180 --> 00:05:36.860
<v Speaker 0>We then make sure that cert bot is

00:05:36.860 --> 00:05:38.860
<v Speaker 0>available as a system command

00:05:38.940 --> 00:05:41.419
<v Speaker 0>on the regular path by moving it or

00:05:41.419 --> 00:05:44.140
<v Speaker 0>creating a symbolic link to user bin.

00:05:45.740 --> 00:05:49.340
<v Speaker 0>Next, we run cert bot cert only standalone.

00:05:50.135 --> 00:05:52.135
<v Speaker 0>What does this mean? Well, it means it's

00:05:52.135 --> 00:05:54.695
<v Speaker 0>going to run its own web server on

00:05:54.695 --> 00:05:56.935
<v Speaker 0>the host because the way the ACME protocol

00:05:56.935 --> 00:05:58.935
<v Speaker 0>works. If you want a certificate

00:05:58.935 --> 00:06:00.055
<v Speaker 0>for a domain,

00:06:00.295 --> 00:06:02.455
<v Speaker 0>it must be able to reach

00:06:03.250 --> 00:06:06.610
<v Speaker 0>that server on that domain on port 80,

00:06:06.849 --> 00:06:08.449
<v Speaker 0>where it will respond with a key to

00:06:08.449 --> 00:06:10.689
<v Speaker 0>confirm that you actually have access and the

00:06:10.689 --> 00:06:11.250
<v Speaker 0>ability

00:06:11.650 --> 00:06:14.050
<v Speaker 0>to provision certificates for that domain.

00:06:14.210 --> 00:06:15.650
<v Speaker 0>It's a proof of ownership

00:06:16.504 --> 00:06:18.745
<v Speaker 0>or at least administration.

00:06:21.544 --> 00:06:23.544
<v Speaker 0>This is an interactive command, and when we

00:06:23.544 --> 00:06:24.745
<v Speaker 0>run it, it's going to ask us for

00:06:24.745 --> 00:06:26.264
<v Speaker 0>our email address and the domain that we

00:06:26.264 --> 00:06:27.865
<v Speaker 0>wish to provision the certificate for.

00:06:29.470 --> 00:06:31.229
<v Speaker 0>Now we wanna be able to automate the

00:06:31.229 --> 00:06:33.150
<v Speaker 0>renewal of these certificates, and we don't wanna

00:06:33.150 --> 00:06:34.990
<v Speaker 0>have to have any manual intervention.

00:06:35.629 --> 00:06:37.870
<v Speaker 0>So we're gonna use system d timers with

00:06:37.870 --> 00:06:40.189
<v Speaker 0>a system d service to make sure that

00:06:40.189 --> 00:06:42.205
<v Speaker 0>once a month, the certificate is checked to

00:06:42.205 --> 00:06:43.725
<v Speaker 0>see if it's going to expire.

00:06:44.685 --> 00:06:46.685
<v Speaker 0>Here, we create a certbot timer,

00:06:47.245 --> 00:06:49.325
<v Speaker 0>which is going to run the certbot service

00:06:49.725 --> 00:06:51.565
<v Speaker 0>on the first day of every month, a

00:06:51.565 --> 00:06:52.925
<v Speaker 0>quarter past three in the morning.

00:06:54.360 --> 00:06:56.600
<v Speaker 0>Then we have a cert bot service, which

00:06:56.600 --> 00:06:58.600
<v Speaker 0>runs cert bot renew.

00:06:59.560 --> 00:07:00.440
<v Speaker 0>Simple.

00:07:01.240 --> 00:07:03.880
<v Speaker 0>We do a daemon reload and enable our

00:07:03.880 --> 00:07:04.520
<v Speaker 0>timer.

00:07:05.480 --> 00:07:08.545
<v Speaker 0>Now don't worry about pausing and copying or

00:07:08.545 --> 00:07:10.305
<v Speaker 0>typing everything that you've seen in that file

00:07:10.305 --> 00:07:18.225
<v Speaker 0>there. The code is available at github.com/rawcodeacademy/portainer-in-production.

00:07:18.545 --> 00:07:19.345
<v Speaker 0>The link

00:07:19.745 --> 00:07:20.305
<v Speaker 0>is there.

00:07:22.300 --> 00:07:24.620
<v Speaker 0>So let's run our start bot script.

00:07:26.699 --> 00:07:29.740
<v Speaker 0>First, it asks for email address. I'll enter

00:07:29.740 --> 00:07:31.740
<v Speaker 0>david@rawkode.com.

00:07:32.539 --> 00:07:34.620
<v Speaker 0>Yes. I agree to the terms. Yes. I'll

00:07:34.620 --> 00:07:36.715
<v Speaker 0>share my email address, and now it's asking

00:07:36.715 --> 00:07:38.795
<v Speaker 0>for the domain that we wish to secure.

00:07:39.675 --> 00:07:42.555
<v Speaker 0>I'm going to enter p.Rawkode.academy

00:07:42.555 --> 00:07:44.235
<v Speaker 0>because that is the DNS that I have

00:07:44.235 --> 00:07:47.275
<v Speaker 0>configured for this machine running our Portainer instance.

00:07:50.090 --> 00:07:52.490
<v Speaker 0>Let's encrypt is now running a web server

00:07:52.490 --> 00:07:54.730
<v Speaker 0>on this machine on Port 80, sending a

00:07:54.730 --> 00:07:58.090
<v Speaker 0>request looking for a file available over HTTP

00:07:58.090 --> 00:08:00.490
<v Speaker 0>that confirms that I have administration's right to

00:08:00.490 --> 00:08:01.290
<v Speaker 0>this domain.

00:08:01.930 --> 00:08:04.490
<v Speaker 0>As you can see, it successfully created our

00:08:04.490 --> 00:08:07.585
<v Speaker 0>certificate in the slash ETC slash lesson crypt

00:08:07.585 --> 00:08:08.945
<v Speaker 0>slash live folder,

00:08:09.185 --> 00:08:11.824
<v Speaker 0>meaning this is a real production lesson crypt

00:08:11.824 --> 00:08:13.745
<v Speaker 0>certificate that is now available

00:08:13.985 --> 00:08:15.664
<v Speaker 0>for Portainer to use.

00:08:17.104 --> 00:08:19.104
<v Speaker 0>Now if you remember in our system d

00:08:19.104 --> 00:08:19.504
<v Speaker 0>timer,

00:08:19.909 --> 00:08:23.110
<v Speaker 0>we have a command configured called certbot renew.

00:08:23.669 --> 00:08:25.990
<v Speaker 0>I'm got not going to run renew now,

00:08:25.990 --> 00:08:27.270
<v Speaker 0>so I'm going to pass the dry run

00:08:27.270 --> 00:08:27.910
<v Speaker 0>flag.

00:08:28.229 --> 00:08:29.750
<v Speaker 0>But this is the command that will check

00:08:29.750 --> 00:08:32.225
<v Speaker 0>for the expiration date on your certificates and

00:08:32.225 --> 00:08:33.025
<v Speaker 0>make sure

00:08:33.505 --> 00:08:35.505
<v Speaker 0>that as they're close to being expired, they

00:08:35.505 --> 00:08:38.225
<v Speaker 0>will be renewed for another three months.

00:08:39.585 --> 00:08:41.505
<v Speaker 0>Also, if you're looking at the commands I've

00:08:41.505 --> 00:08:43.184
<v Speaker 0>typed and you don't want to run this

00:08:43.184 --> 00:08:44.865
<v Speaker 0>script in an interactive environment,

00:08:45.540 --> 00:08:47.620
<v Speaker 0>all the arguments that I passed, my email

00:08:47.620 --> 00:08:50.019
<v Speaker 0>address, those remain and a green to the

00:08:50.019 --> 00:08:52.020
<v Speaker 0>terms can be configured

00:08:52.260 --> 00:08:55.860
<v Speaker 0>through flags passed to the certbot command.

00:08:57.779 --> 00:09:00.365
<v Speaker 0>If you run certbot cert only dash dash

00:09:00.365 --> 00:09:01.085
<v Speaker 0>help,

00:09:01.805 --> 00:09:04.205
<v Speaker 0>everything you need to know is there.

00:09:06.205 --> 00:09:07.565
<v Speaker 0>So let's configure

00:09:07.725 --> 00:09:08.605
<v Speaker 0>Portainer

00:09:08.605 --> 00:09:11.565
<v Speaker 0>to use these new let's encrypt certificates.

00:09:14.440 --> 00:09:16.920
<v Speaker 0>Also available on the GitHub as a script.

00:09:17.640 --> 00:09:19.320
<v Speaker 0>So here we have the Docker commands with

00:09:19.320 --> 00:09:21.560
<v Speaker 0>the correct volume mounts to take less encrypt

00:09:21.560 --> 00:09:24.440
<v Speaker 0>certificates from the host into your Portainer instance.

00:09:24.920 --> 00:09:26.895
<v Speaker 0>The two mounts that we worried about or

00:09:26.895 --> 00:09:29.135
<v Speaker 0>the two mounts that we are concerned about

00:09:29.215 --> 00:09:31.935
<v Speaker 0>are these two here. The ones with etcetera,

00:09:31.935 --> 00:09:35.375
<v Speaker 0>let's encrypt live and etcetera, let's encrypt archive.

00:09:35.615 --> 00:09:37.615
<v Speaker 0>You'll see that we have the term your

00:09:37.615 --> 00:09:38.335
<v Speaker 0>domain.

00:09:38.495 --> 00:09:40.175
<v Speaker 0>This is in the middle and end of

00:09:40.175 --> 00:09:41.695
<v Speaker 0>each of these mount lines.

00:09:42.870 --> 00:09:45.269
<v Speaker 0>So you can use search and replace to

00:09:45.269 --> 00:09:48.310
<v Speaker 0>find your domain and replace it with the

00:09:48.310 --> 00:09:50.949
<v Speaker 0>domain you're running Portainer on.

00:09:51.990 --> 00:09:52.629
<v Speaker 0>We save,

00:09:54.615 --> 00:09:56.935
<v Speaker 0>Now we can run our p dot l

00:09:56.935 --> 00:09:59.415
<v Speaker 0>e script, which will run Portainer

00:09:59.575 --> 00:10:00.375
<v Speaker 0>over

00:10:00.855 --> 00:10:01.895
<v Speaker 0>TLS

00:10:02.135 --> 00:10:04.775
<v Speaker 0>with let's encrypt production certificate.

00:10:05.975 --> 00:10:07.655
<v Speaker 0>So if we pop over to the browser,

00:10:09.020 --> 00:10:10.220
<v Speaker 0>hit refresh,

00:10:10.540 --> 00:10:11.660
<v Speaker 0>click on unlock,

00:10:13.740 --> 00:10:15.820
<v Speaker 0>you will see our certificate is issued by

00:10:15.820 --> 00:10:18.540
<v Speaker 0>r three, the let's encrypt authority.

00:10:19.660 --> 00:10:20.140
<v Speaker 0>Awesome.

00:10:21.355 --> 00:10:23.195
<v Speaker 0>Now there's not a lot of maintenance with

00:10:23.195 --> 00:10:25.355
<v Speaker 0>that approach, and you can be very successful

00:10:25.355 --> 00:10:28.555
<v Speaker 0>with Portainer's own self signed certificates

00:10:28.635 --> 00:10:30.875
<v Speaker 0>or let's encrypt running on a host.

00:10:31.355 --> 00:10:33.595
<v Speaker 0>But I think my preferred way is to

00:10:33.595 --> 00:10:35.355
<v Speaker 0>use KADI as a reverse proxy,

00:10:35.870 --> 00:10:37.390
<v Speaker 0>which does automatic

00:10:37.390 --> 00:10:40.670
<v Speaker 0>TLS for you. It speaks ACME to let's

00:10:40.670 --> 00:10:43.470
<v Speaker 0>encrypt and handles all the renewals for you.

00:10:44.269 --> 00:10:46.750
<v Speaker 0>We don't even need to disable the Portainer

00:10:46.750 --> 00:10:48.029
<v Speaker 0>cell sign certificates,

00:10:48.110 --> 00:10:50.670
<v Speaker 0>and we can still enforce TLS at all

00:10:50.670 --> 00:10:50.990
<v Speaker 0>times.

00:10:51.735 --> 00:10:54.055
<v Speaker 0>It just means that you, as the user

00:10:54.055 --> 00:10:57.095
<v Speaker 0>with a browser, speak TLS to Caddy via

00:10:57.095 --> 00:10:59.255
<v Speaker 0>the less than 10 production certificate.

00:10:59.654 --> 00:11:01.495
<v Speaker 0>But it also means that Caddy speaks to

00:11:01.495 --> 00:11:04.775
<v Speaker 0>Portainer over TLS using the self signed certificate.

00:11:04.775 --> 00:11:07.630
<v Speaker 0>So we have end to end TLS encrypted

00:11:07.630 --> 00:11:08.750
<v Speaker 0>web traffic.

00:11:10.030 --> 00:11:12.670
<v Speaker 0>So I created a small script also available

00:11:12.670 --> 00:11:13.950
<v Speaker 0>on the GitHub page,

00:11:15.870 --> 00:11:18.270
<v Speaker 0>p-rp.sh.

00:11:19.645 --> 00:11:22.285
<v Speaker 0>Here, you'll see the complete setup for this

00:11:22.285 --> 00:11:23.565
<v Speaker 0>Portainer configuration.

00:11:24.445 --> 00:11:26.285
<v Speaker 0>First, I remove all the containers from the

00:11:26.285 --> 00:11:26.925
<v Speaker 0>host.

00:11:27.485 --> 00:11:29.165
<v Speaker 0>Maybe don't copy that line.

00:11:29.805 --> 00:11:31.885
<v Speaker 0>We then create the volume for Portainer, which

00:11:31.885 --> 00:11:33.890
<v Speaker 0>I've already done as part of configuration, so

00:11:33.890 --> 00:11:35.090
<v Speaker 0>it's commented out.

00:11:35.570 --> 00:11:38.370
<v Speaker 0>We then run Portainer as always. Only this

00:11:38.370 --> 00:11:41.250
<v Speaker 0>time, there are no volume mounts for let's

00:11:41.250 --> 00:11:42.690
<v Speaker 0>encrypt certificates.

00:11:44.610 --> 00:11:47.170
<v Speaker 0>For CADI, we also need two volumes,

00:11:47.535 --> 00:11:49.855
<v Speaker 0>CADI data and CADI config.

00:11:50.095 --> 00:11:52.495
<v Speaker 0>From there, we can run CADI,

00:11:52.654 --> 00:11:54.975
<v Speaker 0>making sure that we bind ports four four

00:11:54.975 --> 00:11:58.014
<v Speaker 0>three and eighty from the container to the

00:11:58.014 --> 00:12:01.134
<v Speaker 0>host. Remember, for let's encrypt ACME negotiations,

00:12:01.710 --> 00:12:04.510
<v Speaker 0>we must have physical port 80 available on

00:12:04.510 --> 00:12:05.230
<v Speaker 0>the host.

00:12:06.430 --> 00:12:08.270
<v Speaker 0>We also need to link

00:12:08.430 --> 00:12:09.390
<v Speaker 0>Portainer

00:12:09.390 --> 00:12:10.910
<v Speaker 0>with the name Portainer.

00:12:11.230 --> 00:12:13.870
<v Speaker 0>This means that DNS queries from the CADI

00:12:13.870 --> 00:12:17.045
<v Speaker 0>container can query Portainer as a DNS name

00:12:17.045 --> 00:12:19.125
<v Speaker 0>and reach the Portainer container.

00:12:20.245 --> 00:12:22.005
<v Speaker 0>We then have to mount in our caddy

00:12:22.005 --> 00:12:23.525
<v Speaker 0>file, which I'll show you in just a

00:12:23.525 --> 00:12:25.765
<v Speaker 0>moment to slash e t c slash caddy

00:12:25.765 --> 00:12:27.125
<v Speaker 0>slash caddy file.

00:12:27.845 --> 00:12:29.925
<v Speaker 0>We then mount in the two volumes we

00:12:29.925 --> 00:12:33.000
<v Speaker 0>created, CADI data and CADI config.

00:12:33.240 --> 00:12:35.720
<v Speaker 0>As you'll see, I'm using the official CADI

00:12:35.720 --> 00:12:37.560
<v Speaker 0>two dash Alpine image.

00:12:39.160 --> 00:12:40.760
<v Speaker 0>If we take a look at the CADI

00:12:40.760 --> 00:12:43.160
<v Speaker 0>file, we'll see, one, we have to configure

00:12:43.160 --> 00:12:45.865
<v Speaker 0>our email address. This is because emails are

00:12:45.865 --> 00:12:48.505
<v Speaker 0>required for admin negotiations with Let's Encrypt.

00:12:49.065 --> 00:12:50.825
<v Speaker 0>We then set up a virtual host of

00:12:50.825 --> 00:12:52.825
<v Speaker 0>p.Rawkode.academy.

00:12:53.465 --> 00:12:55.785
<v Speaker 0>We have a reverse proxy block which says,

00:12:55.785 --> 00:12:58.585
<v Speaker 0>hey. Any request we get on this domain,

00:12:58.585 --> 00:13:00.185
<v Speaker 0>we're gonna proxy to another server.

00:13:00.880 --> 00:13:03.120
<v Speaker 0>We specify the two, which is going to

00:13:03.120 --> 00:13:05.360
<v Speaker 0>our Portainer on port 993,

00:13:05.520 --> 00:13:08.400
<v Speaker 0>the encrypted self signed certificate Portainer.

00:13:09.760 --> 00:13:12.240
<v Speaker 0>Because it's a self signed certificate, we do

00:13:12.240 --> 00:13:15.040
<v Speaker 0>have to tell CADI not to verify

00:13:15.120 --> 00:13:15.680
<v Speaker 0>the route.

00:13:16.535 --> 00:13:19.575
<v Speaker 0>So we need a transport block for HTTP

00:13:19.575 --> 00:13:22.135
<v Speaker 0>where we see a TLS is enabled. However,

00:13:22.455 --> 00:13:24.455
<v Speaker 0>skip the verification step.

00:13:25.895 --> 00:13:27.015
<v Speaker 0>And that is it.

00:13:27.735 --> 00:13:30.070
<v Speaker 0>We can run PRP,

00:13:30.230 --> 00:13:32.390
<v Speaker 0>which will delete any existing containers,

00:13:32.550 --> 00:13:34.550
<v Speaker 0>start up the two new containers,

00:13:34.790 --> 00:13:36.470
<v Speaker 0>and in fact, we can run Docker container

00:13:36.470 --> 00:13:38.790
<v Speaker 0>l s. We'll see that we have caddy

00:13:38.790 --> 00:13:40.470
<v Speaker 0>and Portainer both running.

00:13:41.270 --> 00:13:42.870
<v Speaker 0>And now if we do a curl with

00:13:42.870 --> 00:13:44.230
<v Speaker 0>a dash dash v

00:13:45.404 --> 00:13:48.125
<v Speaker 0>to p.Rawkode.Academy,

00:13:49.165 --> 00:13:51.725
<v Speaker 0>we get a whole bunch of text back.

00:13:52.125 --> 00:13:54.205
<v Speaker 0>This is a good indication that things are

00:13:54.205 --> 00:13:54.765
<v Speaker 0>working.

00:13:55.485 --> 00:13:57.565
<v Speaker 0>Let's pop back over to the browser

00:13:57.965 --> 00:14:00.160
<v Speaker 0>and refresh, and you'll see that we still

00:14:00.160 --> 00:14:01.760
<v Speaker 0>have a happy lock

00:14:01.920 --> 00:14:04.000
<v Speaker 0>with a certificate issued

00:14:04.160 --> 00:14:06.399
<v Speaker 0>by r three from Let's Encrypt.

00:14:08.160 --> 00:14:10.639
<v Speaker 0>So that is how you enable and secure

00:14:10.639 --> 00:14:12.639
<v Speaker 0>your Portainer instance three ways.

00:14:14.615 --> 00:14:15.255
<v Speaker 0>One,

00:14:16.695 --> 00:14:18.615
<v Speaker 0>using their self signed certificates.

00:14:18.615 --> 00:14:20.214
<v Speaker 0>It works as long as you don't mind

00:14:20.214 --> 00:14:22.375
<v Speaker 0>clicking accept or advanced

00:14:22.375 --> 00:14:24.615
<v Speaker 0>on that little warning page, you're good to

00:14:24.615 --> 00:14:25.255
<v Speaker 0>go.

00:14:26.135 --> 00:14:26.455
<v Speaker 0>Two,

00:14:27.190 --> 00:14:29.590
<v Speaker 0>cert bot on the host with a system

00:14:29.590 --> 00:14:31.830
<v Speaker 0>d timer to handle renewals.

00:14:32.310 --> 00:14:35.030
<v Speaker 0>And three, reverse proxy with Caddy.

00:14:37.030 --> 00:14:38.950
<v Speaker 0>They're all production grade. They're all good to

00:14:38.950 --> 00:14:39.190
<v Speaker 0>go.

00:14:40.565 --> 00:14:42.165
<v Speaker 0>Enjoy. We'll see you next time.
