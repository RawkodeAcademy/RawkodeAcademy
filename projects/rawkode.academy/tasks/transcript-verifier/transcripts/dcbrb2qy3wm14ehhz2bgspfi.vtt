WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: ed809a08-80bd-4500-897a-e875f569d748
Created: 2025-04-29T21:27:28.424Z
Duration: 4700.017
Channels: 1

00:01:50.190 --> 00:01:52.990
<v Speaker 0>Hello there and welcome to today's episode of

00:01:52.990 --> 00:01:54.910
<v Speaker 0>Rawkode live. I'm your host,

00:01:55.150 --> 00:01:55.710
<v Speaker 0>Rawkode.

00:01:56.595 --> 00:01:58.275
<v Speaker 0>Now I wanna take a moment before we

00:01:58.275 --> 00:02:00.515
<v Speaker 0>get started to just thank my employer providing

00:02:00.515 --> 00:02:01.875
<v Speaker 0>the time

00:02:02.195 --> 00:02:03.875
<v Speaker 0>for me to put a show together and

00:02:03.875 --> 00:02:05.635
<v Speaker 0>produce learning materials for us all to learn

00:02:05.635 --> 00:02:06.275
<v Speaker 0>together.

00:02:06.595 --> 00:02:08.675
<v Speaker 0>If you want to try Equinix Medal, which

00:02:08.675 --> 00:02:10.949
<v Speaker 0>is a bare metal cloud platform, then you

00:02:10.949 --> 00:02:13.030
<v Speaker 0>can use the code Rawkode live. This will

00:02:13.030 --> 00:02:14.710
<v Speaker 0>give you $50 in credit.

00:02:15.110 --> 00:02:17.670
<v Speaker 0>That credit can be splurged over a few

00:02:17.670 --> 00:02:19.910
<v Speaker 0>hours over n two x large x 86

00:02:19.910 --> 00:02:22.870
<v Speaker 0>machines with a whopping 400 gig of ram

00:02:22.870 --> 00:02:23.270
<v Speaker 0>almost.

00:02:23.765 --> 00:02:25.205
<v Speaker 0>If you wish to be a little bit

00:02:25.205 --> 00:02:27.525
<v Speaker 0>more conservative, then you can start at 50Â¢

00:02:27.525 --> 00:02:29.605
<v Speaker 0>an hour and you're still getting a fairly

00:02:29.605 --> 00:02:30.565
<v Speaker 0>chunky machine.

00:02:31.444 --> 00:02:32.885
<v Speaker 0>If you're not watching this live and you

00:02:32.885 --> 00:02:34.885
<v Speaker 0>wanna have conversations or ask questions, feel free

00:02:34.885 --> 00:02:37.125
<v Speaker 0>to join our discord community at Rawkode live

00:02:37.125 --> 00:02:38.005
<v Speaker 0>slash chat

00:02:38.360 --> 00:02:40.600
<v Speaker 0>And please remember to hit that subscribe button

00:02:40.600 --> 00:02:43.160
<v Speaker 0>so that more people will find this content.

00:02:43.240 --> 00:02:43.880
<v Speaker 0>Thanks.

00:02:44.520 --> 00:02:47.240
<v Speaker 0>Today, we're gonna take a look at Dgraph

00:02:47.240 --> 00:02:49.640
<v Speaker 0>and I am at the pleasure of being

00:02:49.640 --> 00:02:51.560
<v Speaker 0>joined by Dgraph's

00:02:51.560 --> 00:02:52.520
<v Speaker 0>community engineer,

00:02:52.905 --> 00:02:54.345
<v Speaker 0>Swanee Chew.

00:02:54.505 --> 00:02:55.385
<v Speaker 0>Hello.

00:02:55.385 --> 00:02:58.585
<v Speaker 0>How are you? Good. Good. Good. Yourself?

00:02:58.985 --> 00:03:01.865
<v Speaker 0>Yeah. Very well. Thank you. Good. I appreciate

00:03:02.025 --> 00:03:03.785
<v Speaker 0>that it is a little bit late. This

00:03:03.785 --> 00:03:05.785
<v Speaker 0>is the biggest time zone difference I've had

00:03:05.785 --> 00:03:07.545
<v Speaker 0>to deal with so far in this show.

00:03:08.530 --> 00:03:11.650
<v Speaker 0>Eleven hours, I believe. It is what? 9PM

00:03:11.650 --> 00:03:13.490
<v Speaker 0>for you at the moment? It is. It

00:03:13.490 --> 00:03:14.450
<v Speaker 1>is. And,

00:03:14.770 --> 00:03:17.090
<v Speaker 1>know, thank you for for being so flexible.

00:03:17.810 --> 00:03:19.890
<v Speaker 0>No. No. No. Thank you. I'm really looking

00:03:19.890 --> 00:03:22.645
<v Speaker 0>forward to today's episode. You know, Dgraph I

00:03:22.645 --> 00:03:24.645
<v Speaker 0>think is a really cool tool. I've used

00:03:24.645 --> 00:03:26.565
<v Speaker 0>it very superficially and I'm hoping that you're

00:03:26.565 --> 00:03:28.325
<v Speaker 0>gonna correct all of those bad habits that

00:03:28.325 --> 00:03:30.885
<v Speaker 0>I potentially picked up as I've been experimenting.

00:03:31.845 --> 00:03:34.085
<v Speaker 0>So before we get started, do wanna just

00:03:34.085 --> 00:03:36.690
<v Speaker 0>take a moment to maybe you know, introduce

00:03:36.690 --> 00:03:38.370
<v Speaker 0>yourself, talk about what you do, and then

00:03:38.370 --> 00:03:40.450
<v Speaker 0>we'll lead into what Dgraph is and what

00:03:40.450 --> 00:03:41.650
<v Speaker 0>problem it's trying to solve.

00:03:42.129 --> 00:03:44.050
<v Speaker 1>Yeah. So I'm Shanid.

00:03:44.690 --> 00:03:46.610
<v Speaker 1>You very you you got my name quite

00:03:46.610 --> 00:03:47.890
<v Speaker 1>well. Thank you.

00:03:51.215 --> 00:03:54.095
<v Speaker 1>I'm the community engineer at Dgraph, and what

00:03:54.095 --> 00:03:56.254
<v Speaker 1>I do is I wrangle the community. I

00:03:56.254 --> 00:03:56.895
<v Speaker 1>basically

00:03:57.454 --> 00:03:59.215
<v Speaker 1>I I'm the ear of the queue. I

00:03:59.215 --> 00:04:00.974
<v Speaker 1>I listen to what the community says. I

00:04:00.974 --> 00:04:03.694
<v Speaker 1>I provide feedback from the community back into

00:04:03.694 --> 00:04:04.334
<v Speaker 1>the engineers.

00:04:05.010 --> 00:04:07.650
<v Speaker 1>I also do outreach kind re related kind

00:04:07.650 --> 00:04:09.250
<v Speaker 1>of works, which is why I'm here.

00:04:10.530 --> 00:04:12.930
<v Speaker 1>Yeah. So previously, I was I was doing

00:04:12.930 --> 00:04:14.290
<v Speaker 1>machine learning research,

00:04:14.690 --> 00:04:16.930
<v Speaker 1>being a data scientist for more than fifteen

00:04:16.930 --> 00:04:17.570
<v Speaker 1>ish years.

00:04:19.044 --> 00:04:21.044
<v Speaker 1>And Dgraph is really interesting to me because

00:04:21.044 --> 00:04:22.885
<v Speaker 1>it's it it comes from,

00:04:24.724 --> 00:04:26.405
<v Speaker 1>knowledge knowledge graphs.

00:04:26.645 --> 00:04:28.485
<v Speaker 1>You know those little boxes that you see

00:04:28.485 --> 00:04:28.965
<v Speaker 1>on Google?

00:04:29.940 --> 00:04:30.740
<v Speaker 0>Uh-huh.

00:04:30.980 --> 00:04:34.020
<v Speaker 1>Yeah. Those those boxes were, like, created by

00:04:34.020 --> 00:04:36.180
<v Speaker 1>the guy who founded Dgraph, Manish.

00:04:36.740 --> 00:04:37.620
<v Speaker 0>Alright.

00:04:37.620 --> 00:04:39.940
<v Speaker 0>Okay. Yeah. Yeah. So so so pretty much

00:04:39.940 --> 00:04:42.260
<v Speaker 1>the same things that powered those little one

00:04:42.260 --> 00:04:42.900
<v Speaker 1>boxes

00:04:43.645 --> 00:04:45.325
<v Speaker 1>is what powers Dgraph.

00:04:45.565 --> 00:04:46.925
<v Speaker 0>Okay. So to to

00:04:47.405 --> 00:04:49.565
<v Speaker 0>confirm that, like, when I search for

00:04:49.885 --> 00:04:52.044
<v Speaker 0>Donald Trump, there's that little box on the

00:04:52.044 --> 00:04:53.645
<v Speaker 0>right that says, this is all the information

00:04:53.645 --> 00:04:54.845
<v Speaker 0>we have on this person and here are

00:04:54.845 --> 00:04:56.445
<v Speaker 0>the links to the other sites. That but

00:04:56.445 --> 00:04:58.125
<v Speaker 0>that is powered by a graph database and

00:04:58.125 --> 00:05:00.130
<v Speaker 0>by the person who started to do It's

00:05:00.130 --> 00:05:02.290
<v Speaker 1>powered by a knowledge graph, which Knowledge graph.

00:05:02.450 --> 00:05:04.210
<v Speaker 1>You can build using Dgraph.

00:05:04.370 --> 00:05:07.490
<v Speaker 1>The the underlying technologies would be quite the

00:05:07.490 --> 00:05:09.170
<v Speaker 1>same as Dgraph. In fact, if if you

00:05:09.170 --> 00:05:11.650
<v Speaker 1>look at Dgraph source code, you'll find a

00:05:11.650 --> 00:05:13.970
<v Speaker 1>lot of terms that are related to search

00:05:13.970 --> 00:05:16.995
<v Speaker 1>engines. Right? You got words like posting lists,

00:05:18.035 --> 00:05:20.755
<v Speaker 1>keywords like posting lists, and and these are

00:05:20.755 --> 00:05:24.275
<v Speaker 1>ideas that came from from manage building a

00:05:24.115 --> 00:05:25.395
<v Speaker 1>a search engine,

00:05:25.715 --> 00:05:26.115
<v Speaker 1>essentially.

00:05:27.920 --> 00:05:30.240
<v Speaker 0>Okay. So why don't we kind of

00:05:31.040 --> 00:05:32.720
<v Speaker 0>kind of dive into that a little bit

00:05:32.720 --> 00:05:34.880
<v Speaker 0>then? So when people are building

00:05:35.280 --> 00:05:37.920
<v Speaker 0>their their applications, right, it's very easy and

00:05:37.920 --> 00:05:40.080
<v Speaker 0>for people to reach to a database where

00:05:40.080 --> 00:05:42.160
<v Speaker 0>they've got experience of using before. You know,

00:05:42.160 --> 00:05:42.880
<v Speaker 0>I can think

00:05:43.335 --> 00:05:45.095
<v Speaker 0>firsthand of many things where I or my

00:05:45.095 --> 00:05:47.735
<v Speaker 0>team would pick MariaDB or would pick Postgres

00:05:47.735 --> 00:05:49.975
<v Speaker 0>just because those are tools we've used before.

00:05:50.375 --> 00:05:51.495
<v Speaker 0>So what is

00:05:52.055 --> 00:05:54.695
<v Speaker 0>what is the decision process then when people

00:05:54.695 --> 00:05:56.215
<v Speaker 0>are saying, okay, maybe I should start to

00:05:56.215 --> 00:05:58.230
<v Speaker 0>look at using a graph database like Dgraph.

00:05:58.230 --> 00:05:59.350
<v Speaker 0>Like, what what is there a certain type

00:05:59.350 --> 00:06:00.630
<v Speaker 0>of data? Is there a certain type of

00:06:00.630 --> 00:06:03.030
<v Speaker 0>problem that this really fits naturally to that

00:06:03.030 --> 00:06:04.470
<v Speaker 0>people should make that leap out of their

00:06:04.470 --> 00:06:05.270
<v Speaker 0>comfort zone?

00:06:05.670 --> 00:06:06.710
<v Speaker 1>Right. So

00:06:07.590 --> 00:06:11.190
<v Speaker 1>Rawkode has a has a very famous saying,

00:06:11.190 --> 00:06:13.565
<v Speaker 1>something along the lines of if you structure

00:06:13.565 --> 00:06:15.805
<v Speaker 1>your data right, the algorithms follow.

00:06:16.445 --> 00:06:18.445
<v Speaker 1>Right? So if if you think about the

00:06:18.445 --> 00:06:19.165
<v Speaker 1>data

00:06:19.325 --> 00:06:21.565
<v Speaker 1>of the domain of the problem that you're

00:06:21.565 --> 00:06:22.445
<v Speaker 1>trying to solve,

00:06:22.925 --> 00:06:24.365
<v Speaker 1>right, if you're trying to build a Twitter

00:06:24.365 --> 00:06:26.030
<v Speaker 1>clone, for example,

00:06:26.590 --> 00:06:29.310
<v Speaker 1>would you be would your data really be

00:06:29.310 --> 00:06:30.750
<v Speaker 1>in form of tables,

00:06:31.630 --> 00:06:33.950
<v Speaker 1>or would your table be graph like?

00:06:34.990 --> 00:06:37.150
<v Speaker 1>Right? So your users will be following each

00:06:37.150 --> 00:06:39.405
<v Speaker 1>other. You'll be posting tweets and stuff like

00:06:39.405 --> 00:06:40.365
<v Speaker 1>that, for example.

00:06:41.085 --> 00:06:44.045
<v Speaker 1>Now think about the the structure of the

00:06:44.045 --> 00:06:47.085
<v Speaker 1>data in your head. Right? Are they tables?

00:06:47.885 --> 00:06:48.685
<v Speaker 1>Naturally,

00:06:49.085 --> 00:06:50.765
<v Speaker 1>as as they are. Right? Naturally,

00:06:51.085 --> 00:06:53.165
<v Speaker 1>as they are. Are they tables or are

00:06:53.165 --> 00:06:53.725
<v Speaker 1>they graphs?

00:06:55.960 --> 00:06:57.400
<v Speaker 1>So so if you have a if you

00:06:57.400 --> 00:06:59.480
<v Speaker 1>have a dataset if if you've got a

00:07:01.240 --> 00:07:02.919
<v Speaker 1>bunch of data at the at your data

00:07:02.919 --> 00:07:03.560
<v Speaker 1>structure,

00:07:05.240 --> 00:07:07.960
<v Speaker 1>if if they're table format, like,

00:07:08.955 --> 00:07:10.875
<v Speaker 1>you know, they they are don't get me

00:07:10.875 --> 00:07:12.555
<v Speaker 1>wrong. There are absolutely

00:07:12.555 --> 00:07:15.035
<v Speaker 1>a lot of data where where tables are

00:07:15.035 --> 00:07:16.395
<v Speaker 1>the best way to handle it.

00:07:16.875 --> 00:07:19.035
<v Speaker 1>But a lot of data is best handled

00:07:19.035 --> 00:07:20.555
<v Speaker 1>by something like a graph or a tree.

00:07:20.555 --> 00:07:23.530
<v Speaker 1>In fact, graphs and trees are so ubiquitous.

00:07:23.530 --> 00:07:25.530
<v Speaker 1>They're they're they're considered fundamentals

00:07:25.530 --> 00:07:27.930
<v Speaker 1>in computer science. We we we Yeah. Talk

00:07:27.930 --> 00:07:29.290
<v Speaker 1>about graphs and trees all the time in

00:07:29.290 --> 00:07:31.930
<v Speaker 1>computer science and not anywhere else. Right? So,

00:07:33.289 --> 00:07:35.610
<v Speaker 1>it's a very good way if you to

00:07:35.625 --> 00:07:37.705
<v Speaker 1>to to to to figure out whether you

00:07:37.705 --> 00:07:40.265
<v Speaker 1>should use graph databases to have to think

00:07:40.265 --> 00:07:41.385
<v Speaker 1>about what

00:07:41.625 --> 00:07:44.745
<v Speaker 1>your data structure actually look like. Right?

00:07:45.785 --> 00:07:48.665
<v Speaker 1>Yeah. What's the structure of your data in

00:07:48.665 --> 00:07:50.345
<v Speaker 1>its in its natural form?

00:07:52.430 --> 00:07:54.350
<v Speaker 0>Okay. Alright. So I guess

00:07:54.990 --> 00:07:57.390
<v Speaker 0>when when people are making these sorts of

00:07:57.390 --> 00:08:00.190
<v Speaker 0>decisions, mean, they should really start to understand

00:08:00.270 --> 00:08:02.190
<v Speaker 0>what data model they're trying to accomplish, what

00:08:02.190 --> 00:08:03.950
<v Speaker 0>kind of query workloads they're gonna have. They

00:08:03.950 --> 00:08:05.985
<v Speaker 0>wanna understand that they need to, you know,

00:08:05.985 --> 00:08:08.305
<v Speaker 0>as I get something that we all see

00:08:08.305 --> 00:08:09.825
<v Speaker 0>time and time again, is we throw stuff

00:08:09.825 --> 00:08:12.225
<v Speaker 0>into these traditional relational databases and we add

00:08:12.225 --> 00:08:13.505
<v Speaker 0>all of these indices and all of these

00:08:13.505 --> 00:08:15.345
<v Speaker 0>complex joins and then we have Yeah. We

00:08:15.345 --> 00:08:16.145
<v Speaker 0>complain

00:08:16.145 --> 00:08:17.585
<v Speaker 0>about the mess when we try to build

00:08:17.585 --> 00:08:19.610
<v Speaker 0>a SQL query to create that back out

00:08:19.610 --> 00:08:21.610
<v Speaker 0>and the problem is we're just probably not

00:08:21.610 --> 00:08:23.290
<v Speaker 0>using the right data structures. We're not using

00:08:23.290 --> 00:08:24.890
<v Speaker 0>the right database technology

00:08:25.210 --> 00:08:27.610
<v Speaker 0>Exactly. That's where Dgraph can hopefully, you know,

00:08:27.610 --> 00:08:29.370
<v Speaker 0>the examples and the way that we're gonna

00:08:29.370 --> 00:08:30.890
<v Speaker 0>play with it today will hopefully get people

00:08:31.665 --> 00:08:34.465
<v Speaker 0>a more visual. Oh, like I get it

00:08:34.465 --> 00:08:35.825
<v Speaker 0>now and this is why I should start

00:08:35.825 --> 00:08:37.745
<v Speaker 0>using this technology and I think search like

00:08:37.745 --> 00:08:39.825
<v Speaker 0>you said is a fantastic thing. Search is

00:08:39.825 --> 00:08:41.184
<v Speaker 0>a graph that we wanna be able to

00:08:41.184 --> 00:08:42.865
<v Speaker 0>fill that down and present it in a

00:08:42.865 --> 00:08:45.209
<v Speaker 0>way that is relevant to people. And I

00:08:45.209 --> 00:08:48.089
<v Speaker 0>think Yeah. Fine. Based on my naive understanding

00:08:48.089 --> 00:08:51.050
<v Speaker 0>so far, this is where this database technology

00:08:51.050 --> 00:08:52.010
<v Speaker 0>really shines.

00:08:52.329 --> 00:08:53.690
<v Speaker 1>Did it that's correct.

00:08:54.329 --> 00:08:56.329
<v Speaker 1>Search is search is one of the things

00:08:56.490 --> 00:08:59.995
<v Speaker 1>well, searching a knowledge graph. Right? So searching

00:09:00.315 --> 00:09:02.395
<v Speaker 1>is often it's it's often when when it

00:09:02.395 --> 00:09:03.995
<v Speaker 1>comes to search, it's often easier to search

00:09:03.995 --> 00:09:05.915
<v Speaker 1>through tables because you take a table a

00:09:05.915 --> 00:09:08.155
<v Speaker 1>table is essentially a list, and you split

00:09:08.155 --> 00:09:09.675
<v Speaker 1>the list into half. You search the top

00:09:09.675 --> 00:09:11.275
<v Speaker 1>half. You search the bottom half anywhere that

00:09:11.275 --> 00:09:13.850
<v Speaker 1>you find it. You just focus your area,

00:09:14.250 --> 00:09:16.810
<v Speaker 1>you know, in in a binary search.

00:09:17.210 --> 00:09:17.850
<v Speaker 0>Yep.

00:09:18.090 --> 00:09:18.730
<v Speaker 1>Yeah.

00:09:19.050 --> 00:09:19.690
<v Speaker 1>So

00:09:20.090 --> 00:09:22.090
<v Speaker 1>search is often for for a lot of

00:09:22.090 --> 00:09:25.610
<v Speaker 1>dataset, search is search fits with tables. But

00:09:25.824 --> 00:09:28.305
<v Speaker 1>for the kinds of dataset that most web

00:09:28.305 --> 00:09:30.305
<v Speaker 1>applications use, like the big,

00:09:30.704 --> 00:09:33.105
<v Speaker 1>apps nowadays, well, they they they

00:09:33.904 --> 00:09:36.065
<v Speaker 1>if you ask me to draw, I would

00:09:36.065 --> 00:09:38.690
<v Speaker 1>draw a graph or a tree. You know,

00:09:38.690 --> 00:09:41.410
<v Speaker 1>and that's where a graph database fits in.

00:09:42.930 --> 00:09:44.530
<v Speaker 0>Alright. Why don't we

00:09:45.090 --> 00:09:47.650
<v Speaker 0>get this installed and then show people what

00:09:47.650 --> 00:09:49.810
<v Speaker 0>we're working with and then we'll start to

00:09:49.810 --> 00:09:52.175
<v Speaker 0>model out some of this data. And again,

00:09:52.175 --> 00:09:53.855
<v Speaker 0>I think just the process of walking through

00:09:53.855 --> 00:09:55.375
<v Speaker 0>this is gonna provide

00:09:55.855 --> 00:09:57.455
<v Speaker 0>that they understand and that people need to

00:09:57.455 --> 00:09:59.615
<v Speaker 0>get started here. So I will,

00:10:01.375 --> 00:10:03.055
<v Speaker 0>through the power of the internet, share my

00:10:03.055 --> 00:10:05.615
<v Speaker 0>screen. So this is the dgraph.io

00:10:05.615 --> 00:10:06.175
<v Speaker 0>homepage.

00:10:06.899 --> 00:10:07.620
<v Speaker 1>Yep.

00:10:08.100 --> 00:10:08.820
<v Speaker 0>So

00:10:09.380 --> 00:10:12.420
<v Speaker 0>I do also have the documentation

00:10:12.500 --> 00:10:15.540
<v Speaker 0>and slash graph q l. Now I'm not

00:10:15.540 --> 00:10:17.779
<v Speaker 0>sure what that is, but I'm sure we're

00:10:17.779 --> 00:10:19.220
<v Speaker 0>gonna get to it shortly.

00:10:19.459 --> 00:10:21.380
<v Speaker 1>Do you wanna explain

00:10:21.625 --> 00:10:23.465
<v Speaker 1>right now or do you want do you

00:10:23.465 --> 00:10:25.065
<v Speaker 1>want me to? Yeah. We'll bring it in

00:10:25.065 --> 00:10:26.665
<v Speaker 0>naturally. Whenever you feel that we we wanna

00:10:26.665 --> 00:10:28.985
<v Speaker 0>move towards whatever that is, then we'll just

00:10:29.225 --> 00:10:30.105
<v Speaker 1>we'll have to talk about it And

00:10:30.905 --> 00:10:32.665
<v Speaker 0>just as a reminder to the people watching

00:10:32.665 --> 00:10:35.225
<v Speaker 0>that there is very little done upfront. And

00:10:35.225 --> 00:10:37.065
<v Speaker 0>the only thing that we have done upfront

00:10:37.065 --> 00:10:37.385
<v Speaker 0>is

00:10:38.240 --> 00:10:40.720
<v Speaker 0>pull the Dgraph Docker image. So that's Dgraph

00:10:40.720 --> 00:10:41.680
<v Speaker 0>slash Dgraph

00:10:41.920 --> 00:10:43.600
<v Speaker 0>and pull down the latest version. And I

00:10:43.600 --> 00:10:45.680
<v Speaker 0>can see that in our shared buffer, you've

00:10:45.680 --> 00:10:48.320
<v Speaker 0>very kindly provided me a very quick Docker

00:10:48.320 --> 00:10:50.080
<v Speaker 0>run command just to get this started. Is

00:10:51.280 --> 00:10:52.160
<v Speaker 0>that the first

00:10:52.555 --> 00:10:54.075
<v Speaker 0>step? Is that what is well, hold on.

00:10:54.075 --> 00:10:55.595
<v Speaker 0>Let me pull up the So so

00:10:56.875 --> 00:10:59.835
<v Speaker 1>the the docs to install Docker is actually

00:10:59.835 --> 00:11:00.875
<v Speaker 1>in the front page.

00:11:02.795 --> 00:11:04.795
<v Speaker 1>If you go to to deploy

00:11:05.595 --> 00:11:07.595
<v Speaker 1>sorry. Click deploy. Yep. Yep. Yeah.

00:11:09.600 --> 00:11:12.240
<v Speaker 1>And download. Right? You've got download on the

00:11:12.240 --> 00:11:13.440
<v Speaker 1>left sidebar.

00:11:15.040 --> 00:11:16.880
<v Speaker 0>There we go. Okay. Cool.

00:11:17.360 --> 00:11:18.240
<v Speaker 1>Yeah. So

00:11:18.560 --> 00:11:20.079
<v Speaker 0>is that step on then? We're just gonna

00:11:20.079 --> 00:11:21.755
<v Speaker 0>run this image. I can see that it's

00:11:21.755 --> 00:11:23.275
<v Speaker 0>exposing a bunch of ports so we can

00:11:23.275 --> 00:11:25.675
<v Speaker 0>talk about what is going on there. Yes.

00:11:25.835 --> 00:11:28.395
<v Speaker 1>Do want me to walk you through what's

00:11:28.395 --> 00:11:29.515
<v Speaker 1>happening? Okay. So

00:11:30.315 --> 00:11:32.715
<v Speaker 1>when you install Postgres, what do you expect?

00:11:32.715 --> 00:11:34.715
<v Speaker 1>You when when you install Postgres, it's just

00:11:34.715 --> 00:11:37.300
<v Speaker 1>one application that you run. Right?

00:11:38.180 --> 00:11:41.139
<v Speaker 1>But Dgraph is is out of the box,

00:11:41.139 --> 00:11:44.180
<v Speaker 1>Dgraph is built to be, like,

00:11:44.180 --> 00:11:45.140
<v Speaker 1>distributed

00:11:46.500 --> 00:11:48.020
<v Speaker 1>so that one application

00:11:48.180 --> 00:11:50.019
<v Speaker 1>will have to do several roles.

00:11:50.495 --> 00:11:52.654
<v Speaker 1>So Dgraph itself is split into two things.

00:11:52.654 --> 00:11:54.175
<v Speaker 1>It's called zero and alpha.

00:11:55.535 --> 00:11:57.695
<v Speaker 1>Dgraph zero is the coordinator,

00:11:57.695 --> 00:11:59.535
<v Speaker 1>so it coordinates the cluster,

00:12:00.654 --> 00:12:01.214
<v Speaker 1>and

00:12:01.455 --> 00:12:03.295
<v Speaker 1>alpha is where the data sits.

00:12:03.855 --> 00:12:07.040
<v Speaker 0>Okay. So this standalone image has got all

00:12:07.200 --> 00:12:09.040
<v Speaker 1>the the the configurations

00:12:09.040 --> 00:12:09.680
<v Speaker 1>for,

00:12:10.240 --> 00:12:12.000
<v Speaker 1>the alpha and zeros.

00:12:12.640 --> 00:12:14.480
<v Speaker 1>What happens is when when you when you

00:12:14.480 --> 00:12:16.560
<v Speaker 1>have things that are distributed out of the

00:12:16.560 --> 00:12:17.920
<v Speaker 1>box, you've got to put a bit more

00:12:17.920 --> 00:12:20.335
<v Speaker 1>thought into into how you're gonna deploy your

00:12:20.335 --> 00:12:21.455
<v Speaker 1>application. Right?

00:12:22.015 --> 00:12:23.295
<v Speaker 1>So on

00:12:23.295 --> 00:12:24.255
<v Speaker 1>a on a

00:12:24.655 --> 00:12:27.055
<v Speaker 1>the standalone doc image basically gives you all

00:12:27.055 --> 00:12:29.375
<v Speaker 1>that in in a standalone for you to

00:12:29.375 --> 00:12:30.015
<v Speaker 1>play with.

00:12:30.575 --> 00:12:32.175
<v Speaker 1>But when you deploy it, you need to

00:12:32.175 --> 00:12:32.655
<v Speaker 1>actually

00:12:33.290 --> 00:12:34.810
<v Speaker 1>give a lot more thought.

00:12:36.089 --> 00:12:39.209
<v Speaker 0>Okay. So by default, Dgraph is a horizontally

00:12:39.209 --> 00:12:40.010
<v Speaker 0>scalable

00:12:40.010 --> 00:12:41.209
<v Speaker 0>graph database.

00:12:41.290 --> 00:12:43.850
<v Speaker 0>Yep. That's right. Okay. Nice. I just need

00:12:43.850 --> 00:12:45.290
<v Speaker 0>to tweak this a little bit.

00:12:45.945 --> 00:12:47.865
<v Speaker 0>Yeah. I'm just gonna use a named volume

00:12:47.865 --> 00:12:50.345
<v Speaker 0>so that I don't have to meant anything

00:12:50.345 --> 00:12:51.145
<v Speaker 0>locally.

00:12:51.545 --> 00:12:54.185
<v Speaker 0>Yeah. We're exposing port sixty eighty eighty eighty

00:12:54.265 --> 00:12:56.665
<v Speaker 0>So sixty eighty would be the zero.

00:12:57.065 --> 00:12:58.265
<v Speaker 0>That's the zero. 60 80.

00:12:59.400 --> 00:13:03.480
<v Speaker 1>80 80 and ninety eighty are the alphas,

00:13:05.000 --> 00:13:06.680
<v Speaker 1>and 8,000 is the clients.

00:13:07.320 --> 00:13:10.280
<v Speaker 1>There's something there there is something called Rattle,

00:13:10.760 --> 00:13:12.920
<v Speaker 1>which is the Dgraph clients. I'll

00:13:12.920 --> 00:13:14.280
<v Speaker 1>show you how it looks like afterwards

00:13:14.834 --> 00:13:16.514
<v Speaker 1>when when you get this running. Yeah. Let's

00:13:16.514 --> 00:13:17.394
<v Speaker 0>get it started.

00:13:17.635 --> 00:13:18.195
<v Speaker 0>Oh,

00:13:19.235 --> 00:13:21.315
<v Speaker 0>it's the standalone image. Right. Okay. Cool. It

00:13:21.315 --> 00:13:23.154
<v Speaker 0>was quick anyway. So we're good.

00:13:23.635 --> 00:13:25.394
<v Speaker 0>So load the logs. It looks like it's

00:13:25.394 --> 00:13:28.595
<v Speaker 0>starting up. I'm assuming it's just trying to

00:13:28.050 --> 00:13:30.690
<v Speaker 0>do a leader election of its own. Yep.

00:13:31.410 --> 00:13:33.170
<v Speaker 0>And it seems And there you go. It

00:13:33.170 --> 00:13:35.330
<v Speaker 1>should be done. So if you go to

00:13:35.330 --> 00:13:36.930
<v Speaker 1>your browser,

00:13:37.089 --> 00:13:38.690
<v Speaker 1>go to local host 8,000.

00:13:41.065 --> 00:13:43.705
<v Speaker 1>Welcome to Rattle. This is the interface of

00:13:43.705 --> 00:13:44.585
<v Speaker 1>Dgraph.

00:13:45.625 --> 00:13:46.665
<v Speaker 1>Choose latest.

00:13:50.505 --> 00:13:51.225
<v Speaker 1>Yep.

00:13:51.705 --> 00:13:53.945
<v Speaker 1>So this is this is your interface to

00:13:54.105 --> 00:13:55.625
<v Speaker 1>this is basically like a

00:13:56.529 --> 00:13:59.010
<v Speaker 1>what's it called? P g p g admin.

00:14:00.850 --> 00:14:03.410
<v Speaker 1>The PHP version of admin or or

00:14:04.770 --> 00:14:06.850
<v Speaker 1>Yeah. Okay. What's it called? Seek SQL my

00:14:06.850 --> 00:14:07.410
<v Speaker 1>admin.

00:14:07.970 --> 00:14:09.330
<v Speaker 1>Oh, yeah. I don't Yeah.

00:14:09.810 --> 00:14:11.465
<v Speaker 0>PHP my admin. That's the tool. This is

00:14:11.465 --> 00:14:13.545
<v Speaker 0>just like a UI for the administration,

00:14:13.545 --> 00:14:15.305
<v Speaker 0>and it's even got some query stuff built

00:14:15.305 --> 00:14:17.145
<v Speaker 0>in for Dgraph. Oh, and and and it's

00:14:17.145 --> 00:14:19.225
<v Speaker 1>got pretty some some pretty cool stuff. But

00:14:20.025 --> 00:14:21.865
<v Speaker 1>you've essentially got Dgraph.

00:14:23.065 --> 00:14:25.465
<v Speaker 1>You've got a database running just like that.

00:14:25.865 --> 00:14:26.185
<v Speaker 1>Right?

00:14:27.720 --> 00:14:28.360
<v Speaker 1>So

00:14:29.640 --> 00:14:31.480
<v Speaker 1>so I need to explain to you a

00:14:31.480 --> 00:14:34.280
<v Speaker 1>bit, a bit more about about Dgraph right

00:14:34.280 --> 00:14:36.840
<v Speaker 1>now. So Dgraph as a database supports two

00:14:36.840 --> 00:14:37.640
<v Speaker 1>languages.

00:14:38.840 --> 00:14:40.440
<v Speaker 1>Right? So this is DQL,

00:14:41.055 --> 00:14:43.455
<v Speaker 1>also known as Dgraph query language

00:14:44.175 --> 00:14:46.015
<v Speaker 1>and GraphQL.

00:14:47.135 --> 00:14:49.935
<v Speaker 0>Okay. So GraphQL, I'm quite familiar with. So

00:14:49.935 --> 00:14:51.375
<v Speaker 0>that should I'm assuming

00:14:51.695 --> 00:14:54.740
<v Speaker 0>that's gonna feel oh, hopefully feel quite natural

00:14:54.740 --> 00:14:56.180
<v Speaker 0>to me. But DQL,

00:14:56.180 --> 00:14:57.540
<v Speaker 0>I'm not familiar with. So can we talk

00:14:57.700 --> 00:14:59.860
<v Speaker 1>DQL looks like GraphQL. In fact, it was

00:14:59.940 --> 00:15:01.540
<v Speaker 1>it it it was sort it sort sort

00:15:01.540 --> 00:15:03.700
<v Speaker 1>of started off as a fork of GraphQL.

00:15:03.779 --> 00:15:05.860
<v Speaker 1>There were things there are still things that

00:15:05.860 --> 00:15:06.899
<v Speaker 1>GraphQL cannot do.

00:15:08.075 --> 00:15:11.035
<v Speaker 1>So you keep extending it, extending it, extending

00:15:11.035 --> 00:15:13.515
<v Speaker 1>it, and and and suddenly it goes, oh,

00:15:13.515 --> 00:15:14.235
<v Speaker 1>right.

00:15:14.955 --> 00:15:15.675
<v Speaker 1>You know?

00:15:16.795 --> 00:15:18.555
<v Speaker 1>It looks a bit different from,

00:15:19.355 --> 00:15:20.235
<v Speaker 1>GraphQL now.

00:15:21.410 --> 00:15:23.810
<v Speaker 1>Alright. So we've got no data.

00:15:24.209 --> 00:15:26.449
<v Speaker 1>So like like in GraphQL,

00:15:26.690 --> 00:15:28.050
<v Speaker 1>you you can you can write a query

00:15:28.050 --> 00:15:30.370
<v Speaker 1>just like that. Look at your Versus code.

00:15:36.175 --> 00:15:37.695
<v Speaker 1>So so in in in

00:15:39.135 --> 00:15:41.295
<v Speaker 1>what what do you call it? Let's see.

00:15:41.295 --> 00:15:42.415
<v Speaker 1>In in GraphQL,

00:15:42.575 --> 00:15:45.214
<v Speaker 1>you you you say what you want. Right?

00:15:45.214 --> 00:15:47.055
<v Speaker 0>Mhmm. So you name a function

00:15:49.135 --> 00:15:49.855
<v Speaker 1>like that,

00:15:50.510 --> 00:15:51.470
<v Speaker 1>And then,

00:15:55.550 --> 00:15:56.990
<v Speaker 1>for example, okay.

00:15:59.070 --> 00:16:00.670
<v Speaker 1>And then you tell me the fields that

00:16:00.670 --> 00:16:01.070
<v Speaker 1>you want.

00:16:16.785 --> 00:16:19.345
<v Speaker 1>So this is this is how DQL looks

00:16:19.345 --> 00:16:19.505
<v Speaker 1>like.

00:16:21.370 --> 00:16:23.610
<v Speaker 0>Yep. It looks a bit like GraphQL, doesn't

00:16:23.610 --> 00:16:24.090
<v Speaker 1>it?

00:16:25.050 --> 00:16:28.570
<v Speaker 0>It's yeah. It's very, familiar for sure. Definitely.

00:16:28.810 --> 00:16:31.050
<v Speaker 1>So the only difference are these. Right?

00:16:32.250 --> 00:16:35.035
<v Speaker 0>Yeah. Some sort of, like, named parameter. Is

00:16:35.035 --> 00:16:36.555
<v Speaker 0>that what's going on here? You pass it

00:16:36.555 --> 00:16:39.195
<v Speaker 0>in and then there's a function or something.

00:16:39.195 --> 00:16:40.555
<v Speaker 0>Right? I I don't know. I'll let you

00:16:40.555 --> 00:16:43.035
<v Speaker 0>tell me. Okay. A funk is basically what's

00:16:43.035 --> 00:16:44.955
<v Speaker 1>needed at the at the root note of

00:16:44.955 --> 00:16:45.755
<v Speaker 1>the graph.

00:16:46.235 --> 00:16:46.555
<v Speaker 0>Okay.

00:16:47.350 --> 00:16:49.510
<v Speaker 1>So you say, I I wanna look at

00:16:49.510 --> 00:16:50.710
<v Speaker 1>all the nodes,

00:16:51.030 --> 00:16:52.150
<v Speaker 1>in a graph

00:16:52.390 --> 00:16:53.910
<v Speaker 1>that has a type.

00:16:54.310 --> 00:16:55.590
<v Speaker 1>This is what it says.

00:16:55.910 --> 00:16:56.550
<v Speaker 0>Okay.

00:16:58.070 --> 00:16:59.510
<v Speaker 1>Now what is a node and what's a

00:16:59.590 --> 00:17:01.350
<v Speaker 1>what what what's a what's a node in

00:17:01.350 --> 00:17:03.305
<v Speaker 1>a graph? Well, this is where a graph

00:17:03.305 --> 00:17:06.025
<v Speaker 1>database comes in. In a graph database, you

00:17:06.025 --> 00:17:09.065
<v Speaker 1>store your your data in nodes.

00:17:10.105 --> 00:17:12.345
<v Speaker 1>And and a node is is is an

00:17:12.345 --> 00:17:14.905
<v Speaker 1>abstract thing. Right? It's not like a piece

00:17:14.905 --> 00:17:15.385
<v Speaker 1>of something.

00:17:16.569 --> 00:17:19.450
<v Speaker 1>The node in Dgraph is, it's a 64

00:17:19.450 --> 00:17:20.009
<v Speaker 1>bit

00:17:21.129 --> 00:17:21.929
<v Speaker 1>integer,

00:17:22.250 --> 00:17:24.169
<v Speaker 1>unsigned integer. Right?

00:17:25.690 --> 00:17:27.209
<v Speaker 1>And and to give

00:17:27.450 --> 00:17:29.529
<v Speaker 1>now imagine you've you've got a sea of

00:17:29.529 --> 00:17:31.370
<v Speaker 1>little numbers everywhere.

00:17:32.065 --> 00:17:32.785
<v Speaker 1>Right?

00:17:33.265 --> 00:17:35.185
<v Speaker 1>They're not useful. You need to give it

00:17:35.185 --> 00:17:36.225
<v Speaker 1>some structure.

00:17:36.465 --> 00:17:37.105
<v Speaker 1>So

00:17:37.345 --> 00:17:38.465
<v Speaker 1>the fundamentals

00:17:38.465 --> 00:17:40.465
<v Speaker 1>of Dgraph is type system,

00:17:41.505 --> 00:17:41.905
<v Speaker 1>and,

00:17:43.665 --> 00:17:45.950
<v Speaker 1>let's get to it. If you could could

00:17:45.950 --> 00:17:47.869
<v Speaker 1>could pull up Rattle again.

00:17:49.070 --> 00:17:49.709
<v Speaker 0>Yes.

00:17:52.509 --> 00:17:54.350
<v Speaker 1>So if you query something like that, if

00:17:54.350 --> 00:17:56.509
<v Speaker 1>you if you write a a similar query,

00:17:56.509 --> 00:17:58.029
<v Speaker 1>you're not gonna get anything. Right? You've got

00:17:58.029 --> 00:17:59.294
<v Speaker 1>no data. Yeah.

00:18:00.654 --> 00:18:02.894
<v Speaker 1>So you go to click, click on schema,

00:18:04.815 --> 00:18:06.654
<v Speaker 1>and and this is where it gets a

00:18:06.654 --> 00:18:08.174
<v Speaker 1>bit interesting because,

00:18:10.815 --> 00:18:15.150
<v Speaker 1>Dgraph Dgraph does not follow the GraphQL schema.

00:18:15.230 --> 00:18:16.110
<v Speaker 0>Right? K.

00:18:17.310 --> 00:18:19.870
<v Speaker 1>Oh, sorry. Charles crying. Right.

00:18:23.710 --> 00:18:24.429
<v Speaker 1>So

00:18:25.710 --> 00:18:27.150
<v Speaker 1>let's talk about schemas then.

00:18:27.975 --> 00:18:29.815
<v Speaker 1>What what what data do you wanna write?

00:18:29.815 --> 00:18:31.575
<v Speaker 1>What what do you want to

00:18:31.975 --> 00:18:33.575
<v Speaker 0>So can we, like

00:18:36.135 --> 00:18:38.455
<v Speaker 0>let's just make up something really trivial. I

00:18:38.455 --> 00:18:40.730
<v Speaker 0>I I'd like to just get write some

00:18:40.730 --> 00:18:42.809
<v Speaker 0>data, clean the data, see how that workflow

00:18:42.809 --> 00:18:44.970
<v Speaker 0>works. So what what's the simplest can we

00:18:44.970 --> 00:18:46.250
<v Speaker 0>just have a schema where we we just

00:18:46.250 --> 00:18:48.409
<v Speaker 0>store my name? Like Actually, go go to

00:18:48.409 --> 00:18:50.090
<v Speaker 1>console. You I I'll show you this even.

00:18:50.090 --> 00:18:52.009
<v Speaker 1>You don't need, like, a strict schema. Just

00:18:52.009 --> 00:18:53.370
<v Speaker 1>click mutate. Oh, okay.

00:18:55.065 --> 00:18:57.065
<v Speaker 1>Open opens curly brace.

00:18:57.625 --> 00:18:58.345
<v Speaker 1>Set,

00:19:00.745 --> 00:19:01.784
<v Speaker 1>curly brace

00:19:03.225 --> 00:19:06.184
<v Speaker 0>Curly brace. And then underscore

00:19:07.385 --> 00:19:08.505
<v Speaker 1>colon

00:19:09.580 --> 00:19:10.860
<v Speaker 1>node one,

00:19:13.740 --> 00:19:16.780
<v Speaker 1>n o d e one, yes, space. Oh.

00:19:17.340 --> 00:19:18.860
<v Speaker 1>Yeah. Yeah. Yeah. It can be any name.

00:19:18.860 --> 00:19:20.620
<v Speaker 1>You just put a variable there. Right? So

00:19:20.620 --> 00:19:23.740
<v Speaker 1>that's an variable space. Angle bracket,

00:19:25.245 --> 00:19:26.125
<v Speaker 1>name,

00:19:28.525 --> 00:19:29.644
<v Speaker 1>close bracket.

00:19:31.245 --> 00:19:32.684
<v Speaker 1>Put put your name there.

00:19:33.965 --> 00:19:36.205
<v Speaker 0>I got it. Space space before Yeah. Yeah.

00:19:36.205 --> 00:19:39.565
<v Speaker 1>Space. Yep. Okay. David and space,

00:19:39.565 --> 00:19:40.125
<v Speaker 1>full stop.

00:19:42.039 --> 00:19:42.759
<v Speaker 1>Yep.

00:19:42.919 --> 00:19:44.999
<v Speaker 1>And then the next line

00:19:45.240 --> 00:19:45.879
<v Speaker 1>Yep.

00:19:46.440 --> 00:19:46.999
<v Speaker 1>Underscore

00:19:48.840 --> 00:19:50.039
<v Speaker 1>colon node one.

00:19:51.000 --> 00:19:53.159
<v Speaker 1>Give yourself give her a property that you're

00:19:53.159 --> 00:19:53.720
<v Speaker 1>interested in.

00:19:55.015 --> 00:19:56.455
<v Speaker 1>Right. You know?

00:19:57.335 --> 00:19:58.215
<v Speaker 1>Full stop.

00:19:59.015 --> 00:20:00.215
<v Speaker 1>And run this.

00:20:01.415 --> 00:20:02.535
<v Speaker 0>Okay.

00:20:03.174 --> 00:20:03.975
<v Speaker 0>Go.

00:20:04.775 --> 00:20:05.414
<v Speaker 0>Oh,

00:20:06.934 --> 00:20:08.294
<v Speaker 0>What did I break?

00:20:09.070 --> 00:20:09.790
<v Speaker 1>Alright.

00:20:10.030 --> 00:20:12.430
<v Speaker 1>Sorry. You need to put put your

00:20:12.430 --> 00:20:14.110
<v Speaker 1>age in in cut

00:20:14.750 --> 00:20:15.710
<v Speaker 1>quotes.

00:20:15.870 --> 00:20:16.590
<v Speaker 0>Oh, okay.

00:20:19.230 --> 00:20:22.125
<v Speaker 0>So let's try and understand that. So there's

00:20:22.125 --> 00:20:23.645
<v Speaker 0>a braces I understand. Right? This is a

00:20:23.645 --> 00:20:24.845
<v Speaker 0>breaking into

00:20:25.245 --> 00:20:27.885
<v Speaker 0>a JSON style object for GraphQL. We're using

00:20:27.885 --> 00:20:29.885
<v Speaker 0>some sort of set mutation function.

00:20:30.285 --> 00:20:32.605
<v Speaker 0>Yep. I'm not sure. The underscore just mean

00:20:32.605 --> 00:20:34.285
<v Speaker 0>I I don't know what the underscore means,

00:20:34.285 --> 00:20:36.605
<v Speaker 0>but I'm assuming from other programming languages adopt

00:20:36.605 --> 00:20:38.000
<v Speaker 0>an underscore. It just means I don't care

00:20:38.000 --> 00:20:40.559
<v Speaker 0>about an ID. I don't Yeah. You're absolutely

00:20:40.559 --> 00:20:41.279
<v Speaker 1>correct.

00:20:41.360 --> 00:20:43.039
<v Speaker 1>You you don't have an ID.

00:20:43.919 --> 00:20:45.840
<v Speaker 0>Okay. And then that's one.

00:20:46.080 --> 00:20:48.080
<v Speaker 1>Yeah. You call it node one within this

00:20:48.080 --> 00:20:49.840
<v Speaker 1>context of this query. Right? You call it

00:20:49.840 --> 00:20:52.045
<v Speaker 1>node one, and you say we'll set a

00:20:52.045 --> 00:20:55.005
<v Speaker 1>new relationship called David a name. Sorry.

00:20:55.485 --> 00:20:57.885
<v Speaker 1>And the value of that that that relationship

00:20:57.885 --> 00:21:00.045
<v Speaker 1>is called David. Full stop.

00:21:01.405 --> 00:21:04.045
<v Speaker 0>Right. Okay. And this is

00:21:04.340 --> 00:21:06.340
<v Speaker 0>this is tied to my age based on

00:21:06.340 --> 00:21:08.659
<v Speaker 0>that node one as a common identifier?

00:21:08.740 --> 00:21:09.460
<v Speaker 1>Correct.

00:21:09.780 --> 00:21:11.460
<v Speaker 0>Okay. So what does that look like? Can

00:21:11.460 --> 00:21:12.580
<v Speaker 0>we query this now?

00:21:13.140 --> 00:21:14.179
<v Speaker 1>Yeah. Sure.

00:21:15.300 --> 00:21:15.780
<v Speaker 1>It could

00:21:16.660 --> 00:21:18.955
<v Speaker 1>just write the same thing that I give

00:21:18.955 --> 00:21:20.235
<v Speaker 1>it a name. Give it a name. No.

00:21:20.235 --> 00:21:21.835
<v Speaker 1>Just do no. No. Listen.

00:21:22.395 --> 00:21:23.995
<v Speaker 1>Give give it a name. Give your function

00:21:23.995 --> 00:21:24.715
<v Speaker 1>a name.

00:21:25.675 --> 00:21:27.995
<v Speaker 1>My funk or something. Okay. I just like

00:21:27.995 --> 00:21:31.195
<v Speaker 1>to call it, yeah, fetch. And then inside

00:21:31.195 --> 00:21:31.835
<v Speaker 1>the

00:21:32.075 --> 00:21:33.835
<v Speaker 1>braces, just write funk.

00:21:34.650 --> 00:21:35.690
<v Speaker 0>Oh, yep.

00:21:36.570 --> 00:21:38.410
<v Speaker 1>Parenthes and parents func space

00:21:38.890 --> 00:21:40.010
<v Speaker 1>colon. Sorry.

00:21:41.450 --> 00:21:42.330
<v Speaker 1>E q,

00:21:44.570 --> 00:21:45.450
<v Speaker 1>open,

00:21:45.770 --> 00:21:46.570
<v Speaker 1>paren,

00:21:47.290 --> 00:21:49.610
<v Speaker 1>and let's see. E q name

00:21:51.265 --> 00:21:52.544
<v Speaker 1>and then David.

00:21:53.025 --> 00:21:56.145
<v Speaker 0>Like that? EQ name comma David.

00:21:57.265 --> 00:21:58.385
<v Speaker 0>Name comma

00:21:58.385 --> 00:21:59.184
<v Speaker 0>David.

00:21:59.825 --> 00:22:01.825
<v Speaker 0>Alright. Okay. So EQ is a function. We're

00:22:01.825 --> 00:22:03.905
<v Speaker 0>passing in the name as alright. Okay. Got

00:22:03.905 --> 00:22:05.419
<v Speaker 0>it. Yep.

00:22:05.580 --> 00:22:07.020
<v Speaker 1>And then you need to bring back some

00:22:07.020 --> 00:22:08.460
<v Speaker 1>data. So UID.

00:22:10.460 --> 00:22:11.100
<v Speaker 1>Okay.

00:22:11.340 --> 00:22:12.940
<v Speaker 1>No no no comma.

00:22:15.500 --> 00:22:16.539
<v Speaker 1>Name age.

00:22:18.300 --> 00:22:18.940
<v Speaker 0>Name.

00:22:19.180 --> 00:22:19.660
<v Speaker 0>So.

00:22:20.215 --> 00:22:22.774
<v Speaker 1>Alright. Run it. You see some very interesting

00:22:22.774 --> 00:22:23.734
<v Speaker 1>things on the right.

00:22:24.215 --> 00:22:25.254
<v Speaker 1>I

00:22:25.894 --> 00:22:26.614
<v Speaker 1>forgot.

00:22:27.254 --> 00:22:28.214
<v Speaker 1>Ah, okay.

00:22:29.014 --> 00:22:30.374
<v Speaker 1>Right. So instead

00:22:32.090 --> 00:22:33.930
<v Speaker 0>if I okay. So I think I understand

00:22:33.930 --> 00:22:35.370
<v Speaker 0>the error rate. It's saying that we haven't

00:22:35.370 --> 00:22:37.370
<v Speaker 0>we haven't told it to index on any

00:22:37.370 --> 00:22:39.530
<v Speaker 0>of those properties. It's not. Yeah. Exactly. Can

00:22:39.530 --> 00:22:41.610
<v Speaker 0>we just remove the the equals and pull

00:22:41.610 --> 00:22:43.770
<v Speaker 0>back all data? I believe that will not

00:22:43.770 --> 00:22:45.530
<v Speaker 1>I believe that will not run, but you

00:22:45.530 --> 00:22:46.010
<v Speaker 1>can try it.

00:22:46.955 --> 00:22:50.235
<v Speaker 0>Yeah. Yeah. So you you need something. So

00:22:50.235 --> 00:22:50.795
<v Speaker 1>has,

00:22:51.035 --> 00:22:53.355
<v Speaker 1>just func has type has

00:22:54.715 --> 00:22:55.355
<v Speaker 1>yeah.

00:22:57.195 --> 00:22:57.835
<v Speaker 1>Has,

00:22:58.315 --> 00:22:59.514
<v Speaker 1>open brace

00:22:59.915 --> 00:23:01.035
<v Speaker 1>type TIP.

00:23:06.309 --> 00:23:08.789
<v Speaker 1>Yeah. Nothing's showing up because there's no type.

00:23:08.789 --> 00:23:10.070
<v Speaker 1>Right? Okay.

00:23:10.309 --> 00:23:12.950
<v Speaker 1>So you say you've not actually created a

00:23:12.950 --> 00:23:13.350
<v Speaker 1>type.

00:23:18.765 --> 00:23:21.725
<v Speaker 1>Alright. So you you can type func has

00:23:21.885 --> 00:23:23.885
<v Speaker 1>instead of has type, you just type,

00:23:25.005 --> 00:23:26.524
<v Speaker 1>let's see, any of terms,

00:23:27.440 --> 00:23:28.240
<v Speaker 1>I guess.

00:23:29.040 --> 00:23:30.320
<v Speaker 1>Oh, no. No. You cannot. You still need

00:23:30.320 --> 00:23:31.760
<v Speaker 1>you need you still need an index. So

00:23:31.760 --> 00:23:34.080
<v Speaker 1>just go back to your schema. Yeah. Okay.

00:23:35.840 --> 00:23:36.880
<v Speaker 1>Now you see

00:23:37.360 --> 00:23:39.200
<v Speaker 1>age and type. Right? So you need to

00:23:39.680 --> 00:23:41.280
<v Speaker 1>yep. Okay. You figured it out. So click

00:23:41.280 --> 00:23:41.760
<v Speaker 1>index,

00:23:42.245 --> 00:23:43.125
<v Speaker 1>update.

00:23:43.125 --> 00:23:44.245
<v Speaker 1>It's very easy.

00:23:47.285 --> 00:23:49.684
<v Speaker 1>Oh, type here. You should type this string.

00:23:49.685 --> 00:23:51.365
<v Speaker 0>Yeah. I just keep clicking things and then

00:23:51.365 --> 00:23:53.125
<v Speaker 0>see what happens. So, you know, just tell

00:23:53.125 --> 00:23:55.205
<v Speaker 0>me when I do something. Okay.

00:23:55.205 --> 00:23:57.365
<v Speaker 1>So you you want exact

00:23:57.799 --> 00:23:58.840
<v Speaker 1>or hash?

00:23:59.960 --> 00:24:02.360
<v Speaker 1>Yeah. But exact only basically allows you to

00:24:02.360 --> 00:24:04.119
<v Speaker 1>match on on on EQ.

00:24:04.520 --> 00:24:06.520
<v Speaker 0>Yeah. What we what we did there is

00:24:06.520 --> 00:24:08.919
<v Speaker 0>we're modifying the schema. We set the type

00:24:08.919 --> 00:24:10.945
<v Speaker 0>of name to be a string and then

00:24:10.945 --> 00:24:12.465
<v Speaker 0>in order to index it, it has to

00:24:12.465 --> 00:24:14.705
<v Speaker 0>know how to index it for the lookup

00:24:14.705 --> 00:24:15.664
<v Speaker 0>that I want.

00:24:15.825 --> 00:24:17.424
<v Speaker 0>Kind of familiar with these terms a little

00:24:17.424 --> 00:24:19.745
<v Speaker 0>bit. So exact, I'm assuming means if I

00:24:19.745 --> 00:24:20.945
<v Speaker 0>do David, I could find it but I

00:24:20.945 --> 00:24:22.065
<v Speaker 0>wouldn't be able to do a wild card

00:24:22.065 --> 00:24:22.705
<v Speaker 0>match on

00:24:23.290 --> 00:24:26.330
<v Speaker 0>DAV or anything like that. Correct. Okay. Cool.

00:24:26.730 --> 00:24:28.170
<v Speaker 0>Well, I mean, I'm just gonna keep clicking

00:24:28.170 --> 00:24:29.610
<v Speaker 0>on stuff. I'm gonna see that my age

00:24:29.610 --> 00:24:30.970
<v Speaker 0>be an integer.

00:24:31.930 --> 00:24:33.930
<v Speaker 0>I'll just index that too and then click

00:24:33.930 --> 00:24:34.649
<v Speaker 0>update.

00:24:35.050 --> 00:24:35.370
<v Speaker 0>So

00:24:37.915 --> 00:24:38.715
<v Speaker 0>let's see.

00:24:39.755 --> 00:24:41.115
<v Speaker 1>Does that mean that I can go back

00:24:41.115 --> 00:24:42.555
<v Speaker 0>to your EQ function?

00:24:42.795 --> 00:24:45.115
<v Speaker 1>Yeah. And the the David. Okay. If you

00:24:45.115 --> 00:24:46.635
<v Speaker 1>if you scroll down, you can see the

00:24:46.635 --> 00:24:48.875
<v Speaker 1>history as well. So Oh, yeah. Cool. Nice.

00:24:50.159 --> 00:24:51.440
<v Speaker 0>Tada. There you go.

00:24:52.640 --> 00:24:55.279
<v Speaker 0>Alright. I was paying attention. Okay. So Now

00:24:55.279 --> 00:24:56.880
<v Speaker 1>click on the click on the little thing

00:24:56.880 --> 00:24:58.880
<v Speaker 1>that says showing one note and zero edges.

00:25:01.575 --> 00:25:03.895
<v Speaker 1>Yeah. Yeah. Click on that. No. No. The

00:25:03.895 --> 00:25:04.774
<v Speaker 1>little box.

00:25:05.174 --> 00:25:06.294
<v Speaker 1>The the box.

00:25:06.775 --> 00:25:08.134
<v Speaker 1>Click on David.

00:25:09.174 --> 00:25:10.614
<v Speaker 0>There we go. There you go.

00:25:11.015 --> 00:25:11.654
<v Speaker 1>So

00:25:12.615 --> 00:25:15.815
<v Speaker 1>like I said, all all all nodes are

00:25:15.390 --> 00:25:16.110
<v Speaker 1>basically

00:25:16.670 --> 00:25:18.750
<v Speaker 1>an unsigned int, and we call that a

00:25:18.750 --> 00:25:19.950
<v Speaker 1>u UID.

00:25:21.470 --> 00:25:24.669
<v Speaker 1>Right? And this UID has this node has

00:25:25.390 --> 00:25:27.870
<v Speaker 1>pro related properties of age and name.

00:25:28.545 --> 00:25:32.225
<v Speaker 1>Let's just add some more data into this.

00:25:33.585 --> 00:25:36.225
<v Speaker 1>Okay. Just put my name, g x y,

00:25:39.985 --> 00:25:42.065
<v Speaker 1>and put put a thousand for my age

00:25:42.065 --> 00:25:42.945
<v Speaker 1>or something. Right?

00:25:45.540 --> 00:25:46.820
<v Speaker 1>If you run this

00:25:47.140 --> 00:25:49.139
<v Speaker 1>you see, it's still called node one.

00:25:49.540 --> 00:25:52.580
<v Speaker 1>Yeah? Yep. But if you go to query

00:25:54.500 --> 00:25:56.660
<v Speaker 1>and you run this Oh. Sorry.

00:25:58.645 --> 00:26:00.004
<v Speaker 1>So has

00:26:00.245 --> 00:26:00.884
<v Speaker 1>name.

00:26:01.445 --> 00:26:03.124
<v Speaker 1>So it changes to has name.

00:26:04.245 --> 00:26:04.965
<v Speaker 1>Yep.

00:26:06.485 --> 00:26:07.284
<v Speaker 0>Ah.

00:26:08.804 --> 00:26:10.325
<v Speaker 0>Nice. So so did you see the pop

00:26:10.325 --> 00:26:11.765
<v Speaker 1>up that says has name and then, yes,

00:26:11.765 --> 00:26:13.845
<v Speaker 1>like, angle angle brackets

00:26:13.590 --> 00:26:16.070
<v Speaker 1>in in the suggestion? Yeah. I did. So

00:26:16.070 --> 00:26:18.390
<v Speaker 0>when I did this, we had these yeah.

00:26:18.390 --> 00:26:19.910
<v Speaker 0>I did notice that. So so the the

00:26:19.910 --> 00:26:21.669
<v Speaker 1>bottom one's the canonical form.

00:26:22.230 --> 00:26:25.190
<v Speaker 1>That's the prefer that's the the good form

00:26:25.190 --> 00:26:26.470
<v Speaker 1>that nobody actually uses.

00:26:28.295 --> 00:26:30.295
<v Speaker 1>As far as I've seen people type code,

00:26:30.295 --> 00:26:31.735
<v Speaker 1>people don't actually do that.

00:26:33.415 --> 00:26:35.415
<v Speaker 1>But I personally do that. So

00:26:37.015 --> 00:26:39.095
<v Speaker 0>Okay. So is there, like,

00:26:39.735 --> 00:26:42.210
<v Speaker 0>are there any advantages

00:26:42.210 --> 00:26:44.450
<v Speaker 0>to using the canonical form? Like, does a

00:26:44.610 --> 00:26:46.450
<v Speaker 1>No. You you won't you won't run into,

00:26:46.450 --> 00:26:46.850
<v Speaker 1>like,

00:26:47.730 --> 00:26:49.409
<v Speaker 1>what's it called, escaping issues.

00:26:49.730 --> 00:26:51.490
<v Speaker 0>Ah, right. Okay. Gotcha.

00:26:52.050 --> 00:26:54.205
<v Speaker 0>So I see that we've got back two

00:26:54.205 --> 00:26:56.125
<v Speaker 0>nodes and I like that I can drag

00:26:56.125 --> 00:26:58.205
<v Speaker 0>things about which is Yeah. You can see

00:26:58.205 --> 00:27:00.205
<v Speaker 0>things. Superficial, but it's cool.

00:27:01.245 --> 00:27:03.485
<v Speaker 0>But I noticed we don't have a relationship.

00:27:03.485 --> 00:27:04.525
<v Speaker 1>It's Yep.

00:27:05.325 --> 00:27:07.325
<v Speaker 0>Could say that one? Yeah. We can.

00:27:10.020 --> 00:27:12.419
<v Speaker 1>So let's go back to mutate.

00:27:13.060 --> 00:27:13.780
<v Speaker 0>Okay.

00:27:15.300 --> 00:27:16.340
<v Speaker 1>Now

00:27:16.340 --> 00:27:18.180
<v Speaker 1>this is this is where we need to

00:27:18.180 --> 00:27:19.539
<v Speaker 1>think about it. Right?

00:27:20.180 --> 00:27:22.180
<v Speaker 1>So instead of underscore, you need to know

00:27:22.340 --> 00:27:23.380
<v Speaker 1>you can click on the image.

00:27:24.015 --> 00:27:25.775
<v Speaker 1>You can click on your ID or my

00:27:25.775 --> 00:27:26.975
<v Speaker 1>ID. Mhmm.

00:27:28.655 --> 00:27:31.135
<v Speaker 1>So you can see u x UIDs OX

00:27:31.135 --> 00:27:31.775
<v Speaker 1>1,

00:27:32.975 --> 00:27:35.855
<v Speaker 1>and then my my ID would be UIDOX

00:27:35.855 --> 00:27:37.215
<v Speaker 1>2. Uh-huh. Okay.

00:27:37.740 --> 00:27:40.299
<v Speaker 1>So fill in the first underscore

00:27:41.100 --> 00:27:41.820
<v Speaker 1>with

00:27:41.980 --> 00:27:43.499
<v Speaker 1>u OX 1.

00:27:44.700 --> 00:27:47.420
<v Speaker 0>Alright. Okay. Cool. And then change the name

00:27:47.420 --> 00:27:48.860
<v Speaker 1>of the relationship.

00:27:48.860 --> 00:27:50.220
<v Speaker 1>The o x one needs to be in

00:27:50.220 --> 00:27:52.780
<v Speaker 1>in in Oh, yeah. Denise in in angle

00:27:52.780 --> 00:27:54.644
<v Speaker 1>brackets. Oh, angle brackets. Sorry. Angle brackets. Oh,

00:27:54.644 --> 00:27:56.404
<v Speaker 0>the canonical form. Yep.

00:27:57.524 --> 00:27:58.005
<v Speaker 1>And,

00:27:58.644 --> 00:28:01.205
<v Speaker 1>you don't need the colon thing already because

00:28:01.205 --> 00:28:03.684
<v Speaker 1>you know the ID. Right? So Ah, yeah.

00:28:03.684 --> 00:28:06.485
<v Speaker 0>Okay. Okay. So you only need one one.

00:28:06.485 --> 00:28:06.965
<v Speaker 1>Right? And,

00:28:09.130 --> 00:28:09.530
<v Speaker 1>say,

00:28:10.490 --> 00:28:11.529
<v Speaker 1>live streams.

00:28:13.850 --> 00:28:15.610
<v Speaker 1>And then instead of q x y, just

00:28:15.610 --> 00:28:16.809
<v Speaker 1>put o x two.

00:28:17.450 --> 00:28:20.410
<v Speaker 1>Yeah. Run it. That was quite intuitive. I

00:28:20.410 --> 00:28:21.450
<v Speaker 0>I like

00:28:23.255 --> 00:28:24.934
<v Speaker 1>Okay. Now go back to the query.

00:28:25.895 --> 00:28:28.135
<v Speaker 1>I run this query again. Oh, we have

00:28:28.135 --> 00:28:30.375
<v Speaker 0>to that has to pull out livestreams?

00:28:30.375 --> 00:28:31.174
<v Speaker 1>Yep.

00:28:32.695 --> 00:28:34.215
<v Speaker 1>Yeah. You figured this out.

00:28:35.895 --> 00:28:36.934
<v Speaker 1>Well, that's interesting.

00:28:39.130 --> 00:28:40.809
<v Speaker 1>Ah, right. Sorry. Sorry.

00:28:41.290 --> 00:28:43.370
<v Speaker 1>Instead of has name, just put has livestream.

00:28:51.165 --> 00:28:54.285
<v Speaker 1>See? It's only one. So if you go

00:28:54.285 --> 00:28:55.485
<v Speaker 1>to livestreams

00:28:55.485 --> 00:28:57.485
<v Speaker 1>and open a curly brace there

00:28:57.885 --> 00:28:58.525
<v Speaker 0>Mhmm.

00:28:59.245 --> 00:29:00.445
<v Speaker 1>And put

00:29:00.685 --> 00:29:02.525
<v Speaker 1>UID name and age.

00:29:03.085 --> 00:29:04.365
<v Speaker 0>I knew you were gonna see that.

00:29:05.030 --> 00:29:06.950
<v Speaker 1>Oh, there you go. Would I use the

00:29:06.950 --> 00:29:08.549
<v Speaker 0>canonical form here too?

00:29:09.909 --> 00:29:11.350
<v Speaker 1>No? If you want.

00:29:11.510 --> 00:29:13.429
<v Speaker 0>I just I said it was an option.

00:29:13.429 --> 00:29:14.630
<v Speaker 0>So I Yeah. Yeah. I don't I don't

00:29:14.630 --> 00:29:16.965
<v Speaker 1>use the canonical form in queries. But Ah,

00:29:16.965 --> 00:29:17.605
<v Speaker 0>okay.

00:29:17.765 --> 00:29:18.804
<v Speaker 0>Okay.

00:29:18.804 --> 00:29:20.725
<v Speaker 0>I won't do that then. Alright. And then

00:29:20.725 --> 00:29:21.684
<v Speaker 0>we have a lane.

00:29:22.085 --> 00:29:22.644
<v Speaker 1>Yeah.

00:29:23.365 --> 00:29:25.845
<v Speaker 0>And it's telling me, yep, we have

00:29:26.325 --> 00:29:27.684
<v Speaker 0>a a livestream.

00:29:29.750 --> 00:29:30.469
<v Speaker 0>Cool.

00:29:31.110 --> 00:29:32.710
<v Speaker 1>Now we should learn how to constrain the

00:29:32.710 --> 00:29:33.349
<v Speaker 1>data.

00:29:34.710 --> 00:29:35.989
<v Speaker 0>Okay?

00:29:38.630 --> 00:29:40.070
<v Speaker 0>Can you what do you what do you

00:29:40.070 --> 00:29:41.510
<v Speaker 0>mean by constrain the data then?

00:29:42.505 --> 00:29:44.264
<v Speaker 1>Well, put more structure.

00:29:45.625 --> 00:29:47.624
<v Speaker 1>Introduce a notion of types, I guess.

00:29:48.025 --> 00:29:51.065
<v Speaker 0>Ah, right. Okay. Gotcha. Okay. Alright. So

00:29:52.105 --> 00:29:54.665
<v Speaker 1>so so this is the best part. Right?

00:29:54.665 --> 00:29:55.465
<v Speaker 1>Go back to

00:29:55.785 --> 00:29:56.825
<v Speaker 1>go back to mutate.

00:29:59.410 --> 00:30:01.330
<v Speaker 1>Okay. Now if you go o x one,

00:30:01.330 --> 00:30:03.410
<v Speaker 1>change livestream to reads,

00:30:05.810 --> 00:30:07.330
<v Speaker 1>and then put a book name,

00:30:07.730 --> 00:30:09.330
<v Speaker 1>any book that you in in strings.

00:30:12.355 --> 00:30:14.034
<v Speaker 1>Okay. Just click run.

00:30:18.355 --> 00:30:20.995
<v Speaker 1>So now you can see that there's two

00:30:20.995 --> 00:30:23.554
<v Speaker 1>separate sets of data. Two two two separate

00:30:23.554 --> 00:30:26.434
<v Speaker 1>concepts. One's a livestream edge. One's the livestream

00:30:26.434 --> 00:30:27.235
<v Speaker 1>of type edge.

00:30:27.970 --> 00:30:29.809
<v Speaker 1>One's an edge of type livestream and the

00:30:29.809 --> 00:30:30.690
<v Speaker 1>other's an edge of

00:30:31.649 --> 00:30:33.970
<v Speaker 1>I see you've got good taste in science

00:30:33.970 --> 00:30:35.570
<v Speaker 1>fiction. Very good. Very good.

00:30:36.529 --> 00:30:38.210
<v Speaker 0>Yeah. I just had a I was I

00:30:38.210 --> 00:30:40.049
<v Speaker 0>wanted to add too so that we could

00:30:41.054 --> 00:30:43.294
<v Speaker 0>see because I I really like this view

00:30:43.294 --> 00:30:44.975
<v Speaker 0>of the data, the very visual view of

00:30:44.975 --> 00:30:46.414
<v Speaker 0>the data. And I thought we'd add two

00:30:46.414 --> 00:30:47.695
<v Speaker 0>so we we have a little bit more

00:30:47.695 --> 00:30:49.054
<v Speaker 0>going on there. So

00:30:49.455 --> 00:30:51.534
<v Speaker 0>and I do love tuning the body problems.

00:30:51.534 --> 00:30:53.294
<v Speaker 0>So So if you click reads,

00:30:54.150 --> 00:30:56.470
<v Speaker 1>you create a new so so you what

00:30:56.470 --> 00:30:57.430
<v Speaker 1>you can do is you can create a

00:30:57.430 --> 00:30:59.350
<v Speaker 1>new field, call call it reads.

00:31:01.190 --> 00:31:02.950
<v Speaker 0>So you want me back on mute it?

00:31:02.950 --> 00:31:04.310
<v Speaker 1>No. No. No. In in in the query

00:31:04.310 --> 00:31:05.670
<v Speaker 1>stream. Right? So so

00:31:07.030 --> 00:31:08.630
<v Speaker 0>k. So we're doing reads.

00:31:10.424 --> 00:31:11.065
<v Speaker 1>Yeah.

00:31:11.225 --> 00:31:13.144
<v Speaker 0>And then UID. Yep.

00:31:13.865 --> 00:31:14.585
<v Speaker 1>Run it.

00:31:16.664 --> 00:31:18.825
<v Speaker 0>But we still have this predicate here. Right?

00:31:18.825 --> 00:31:20.025
<v Speaker 1>Oh, yeah. Yeah. Yeah. So I just changed

00:31:20.025 --> 00:31:22.025
<v Speaker 1>that predicate to to has type again. Oh,

00:31:22.025 --> 00:31:22.825
<v Speaker 0>has type. Okay.

00:31:24.780 --> 00:31:26.620
<v Speaker 1>I think has type will not work. Sorry.

00:31:26.620 --> 00:31:29.100
<v Speaker 1>Yeah. Has you've not introduced type, so

00:31:30.300 --> 00:31:31.580
<v Speaker 1>equals David.

00:31:33.340 --> 00:31:34.860
<v Speaker 0>Okay. So name

00:31:35.100 --> 00:31:35.580
<v Speaker 0>David.

00:31:37.485 --> 00:31:38.284
<v Speaker 0>There we go.

00:31:38.685 --> 00:31:40.205
<v Speaker 1>You click on David.

00:31:43.725 --> 00:31:44.365
<v Speaker 1>See?

00:31:45.325 --> 00:31:47.245
<v Speaker 1>There's only one reads.

00:31:47.645 --> 00:31:48.365
<v Speaker 0>Yeah.

00:31:48.445 --> 00:31:48.765
<v Speaker 0>I

00:31:49.590 --> 00:31:49.910
<v Speaker 0>thought

00:31:52.390 --> 00:31:53.109
<v Speaker 0>why?

00:31:53.990 --> 00:31:57.030
<v Speaker 1>Types. We need types. Right. Okay. Anyway, so

00:31:57.030 --> 00:31:58.549
<v Speaker 1>so if you go underscore

00:31:59.750 --> 00:32:02.549
<v Speaker 1>go to UID under reads under reads and

00:32:02.549 --> 00:32:04.150
<v Speaker 1>change that to underscore

00:32:04.805 --> 00:32:06.245
<v Speaker 1>underscore underscore

00:32:06.565 --> 00:32:07.924
<v Speaker 1>expand all

00:32:08.085 --> 00:32:11.365
<v Speaker 1>x underscore underscore expand bracket all.

00:32:12.565 --> 00:32:13.684
<v Speaker 0>Oh, wait.

00:32:14.165 --> 00:32:16.165
<v Speaker 0>Pardon me? Pepper and oh, yeah. Yep.

00:32:17.010 --> 00:32:19.490
<v Speaker 1>Yep. Run this. It should I think that's

00:32:19.490 --> 00:32:20.050
<v Speaker 1>the way the

00:32:23.410 --> 00:32:26.450
<v Speaker 1>one second. That's okay. Expand predicates.

00:32:27.330 --> 00:32:28.690
<v Speaker 1>Sorry. It's expand

00:32:28.690 --> 00:32:29.730
<v Speaker 1>underscore all.

00:32:31.345 --> 00:32:34.385
<v Speaker 1>I keep forget I keep forgetting where so

00:32:34.385 --> 00:32:36.385
<v Speaker 1>it's expand the the the the the function

00:32:36.385 --> 00:32:37.504
<v Speaker 1>is called expand

00:32:37.985 --> 00:32:38.624
<v Speaker 1>Oh.

00:32:39.664 --> 00:32:42.465
<v Speaker 1>Without an underscore? Yeah. Underscore

00:32:42.465 --> 00:32:43.585
<v Speaker 1>underscore underscore.

00:32:45.950 --> 00:32:49.070
<v Speaker 0>Okay. Expand and then open parens and then

00:32:49.070 --> 00:32:49.950
<v Speaker 0>underscore

00:32:49.950 --> 00:32:51.149
<v Speaker 0>underscore all?

00:32:51.550 --> 00:32:54.350
<v Speaker 1>Is this one underscore? One underscore. Okay. Got

00:32:54.350 --> 00:32:56.029
<v Speaker 1>it. One underscore all underscore.

00:32:56.270 --> 00:32:57.149
<v Speaker 0>Underscore.

00:32:57.390 --> 00:32:57.710
<v Speaker 1>Yep.

00:32:59.365 --> 00:33:02.725
<v Speaker 1>So you should oh, okay. I'm surprised, but

00:33:02.804 --> 00:33:03.284
<v Speaker 1>yeah.

00:33:04.085 --> 00:33:05.845
<v Speaker 1>But the idea is that it should be

00:33:05.845 --> 00:33:08.005
<v Speaker 1>able to give you all those. Anyways, we'll

00:33:08.005 --> 00:33:09.845
<v Speaker 1>we'll come back to that later. We'll look

00:33:09.845 --> 00:33:11.365
<v Speaker 1>at the schema right now. Yep.

00:33:15.370 --> 00:33:17.929
<v Speaker 1>So so the schema is basically

00:33:17.929 --> 00:33:20.169
<v Speaker 1>where your data lives.

00:33:22.330 --> 00:33:24.490
<v Speaker 1>So if you click bulk edit,

00:33:26.625 --> 00:33:29.024
<v Speaker 1>do you see bulk edit? Yep. Yep. Cool.

00:33:29.105 --> 00:33:30.304
<v Speaker 1>So this is this is

00:33:32.465 --> 00:33:33.344
<v Speaker 1>there you go.

00:33:34.225 --> 00:33:34.864
<v Speaker 1>So

00:33:35.184 --> 00:33:37.345
<v Speaker 1>line seven to line 10 is how a

00:33:37.345 --> 00:33:38.705
<v Speaker 1>type definition looks like.

00:33:39.630 --> 00:33:41.789
<v Speaker 1>Now this type definition is,

00:33:42.830 --> 00:33:45.070
<v Speaker 1>line seven to line 10 is by default

00:33:45.070 --> 00:33:47.309
<v Speaker 1>in all dgraph instances.

00:33:47.950 --> 00:33:50.670
<v Speaker 1>It allows dgraph to manipulate,

00:33:50.910 --> 00:33:52.190
<v Speaker 1>GraphQL natively.

00:33:53.215 --> 00:33:53.855
<v Speaker 1>So

00:33:54.415 --> 00:33:56.335
<v Speaker 1>I will talk about native GraphQL in a

00:33:56.335 --> 00:33:58.575
<v Speaker 1>bit, but, let's talk about types first, shall

00:33:58.575 --> 00:34:01.855
<v Speaker 1>we? So let's create a type called person

00:34:01.935 --> 00:34:03.775
<v Speaker 1>and create a type called book.

00:34:04.895 --> 00:34:06.895
<v Speaker 0>Okay. Just follow the syntax above.

00:34:08.449 --> 00:34:09.330
<v Speaker 0>Person.

00:34:10.770 --> 00:34:11.650
<v Speaker 0>And then

00:34:11.810 --> 00:34:13.250
<v Speaker 0>I have a name,

00:34:13.969 --> 00:34:16.850
<v Speaker 0>so it's going to be a string index.

00:34:17.170 --> 00:34:19.330
<v Speaker 1>Oh, no. No. That that's that's sorry. That's

00:34:19.330 --> 00:34:21.954
<v Speaker 1>the you you're using the GraphQL syntax. For

00:34:22.194 --> 00:34:23.795
<v Speaker 1>sorry. My bad. So this is this is

00:34:23.795 --> 00:34:25.714
<v Speaker 0>just straight up GraphQL then. Right? Here. Yeah.

00:34:25.714 --> 00:34:27.315
<v Speaker 1>That's that's straight up GraphQL.

00:34:27.714 --> 00:34:29.074
<v Speaker 1>So we're not gonna do that.

00:34:30.514 --> 00:34:33.074
<v Speaker 1>Let's see. Just just just type.

00:34:35.989 --> 00:34:36.630
<v Speaker 0>Yeah.

00:34:36.790 --> 00:34:38.710
<v Speaker 0>Well, that's that's a person type, and then

00:34:38.710 --> 00:34:39.909
<v Speaker 0>we wanted to

00:34:40.230 --> 00:34:41.030
<v Speaker 0>book,

00:34:41.510 --> 00:34:42.710
<v Speaker 0>which has a name.

00:34:43.270 --> 00:34:45.429
<v Speaker 1>No. No. You I'm sorry. My bad.

00:34:45.989 --> 00:34:46.309
<v Speaker 1>Yeah.

00:34:48.065 --> 00:34:50.864
<v Speaker 1>So so move name out of the out

00:34:50.864 --> 00:34:52.145
<v Speaker 1>of the type.

00:34:53.185 --> 00:34:54.385
<v Speaker 0>Of the book type?

00:34:54.705 --> 00:34:57.025
<v Speaker 1>So so move name out of that that

00:34:57.345 --> 00:34:58.705
<v Speaker 1>I let me type it for you.

00:35:01.460 --> 00:35:02.980
<v Speaker 0>Yeah. Let why don't we move this over

00:35:02.980 --> 00:35:04.420
<v Speaker 0>to Versus Code,

00:35:04.420 --> 00:35:06.020
<v Speaker 0>and then I can always paste oh, you're

00:35:06.020 --> 00:35:07.860
<v Speaker 0>doing it. Okay. Yeah.

00:35:08.260 --> 00:35:08.900
<v Speaker 1>So

00:35:14.260 --> 00:35:15.859
<v Speaker 1>so it looks like this. Right?

00:35:24.645 --> 00:35:25.365
<v Speaker 0>Okay.

00:35:25.845 --> 00:35:28.245
<v Speaker 1>So you've already got name, so you don't

00:35:28.245 --> 00:35:29.205
<v Speaker 1>have to write all those.

00:35:31.480 --> 00:35:34.040
<v Speaker 0>Okay. Okay. So I

00:35:34.040 --> 00:35:34.840
<v Speaker 0>understand.

00:35:34.840 --> 00:35:37.080
<v Speaker 0>So basically what we're saying is

00:35:39.000 --> 00:35:41.080
<v Speaker 0>these are the graph q l

00:35:42.360 --> 00:35:44.360
<v Speaker 0>definitions of types. A person has a name

00:35:44.360 --> 00:35:46.095
<v Speaker 0>property, has an age property, the book has

00:35:46.095 --> 00:35:47.615
<v Speaker 0>a name, and then

00:35:48.415 --> 00:35:51.535
<v Speaker 0>we specify something in Dgraphy syntax, which just

00:35:51.535 --> 00:35:53.935
<v Speaker 0>tells the the type semantics and the index

00:35:53.935 --> 00:35:56.415
<v Speaker 0>semantics for each of those properties. Exactly.

00:35:57.250 --> 00:36:00.370
<v Speaker 0>Okay. Exactly. My my my immediate question then

00:36:00.370 --> 00:36:02.930
<v Speaker 0>is what if I have a common property

00:36:02.930 --> 00:36:05.010
<v Speaker 0>across multiple types that need to be indexed

00:36:05.010 --> 00:36:05.810
<v Speaker 0>differently?

00:36:06.530 --> 00:36:08.690
<v Speaker 1>Ah, so you need to actually give it

00:36:08.690 --> 00:36:10.130
<v Speaker 1>a separate namespace.

00:36:10.130 --> 00:36:12.575
<v Speaker 1>So so I will walk you through that

00:36:12.575 --> 00:36:15.214
<v Speaker 1>in the GraphQL example. Okay. Okay. So so

00:36:15.214 --> 00:36:16.735
<v Speaker 1>if you use GraphQL,

00:36:17.535 --> 00:36:19.454
<v Speaker 1>all you're working in right now is DQL.

00:36:19.454 --> 00:36:21.055
<v Speaker 1>Right? So you're working in the lower level

00:36:21.055 --> 00:36:21.695
<v Speaker 1>stuff.

00:36:23.855 --> 00:36:25.855
<v Speaker 1>We we've sort of moved away from that.

00:36:27.220 --> 00:36:30.260
<v Speaker 1>We we we've started telling people that,

00:36:30.740 --> 00:36:33.140
<v Speaker 1>you should start with GraphQL, and and when

00:36:33.140 --> 00:36:35.220
<v Speaker 1>you need more power, move to DQL.

00:36:36.500 --> 00:36:38.820
<v Speaker 1>I personally find that a bit disorienting because

00:36:38.820 --> 00:36:40.740
<v Speaker 1>I start with DQL and then move to

00:36:40.740 --> 00:36:41.780
<v Speaker 1>GraphQL. Right? So,

00:36:42.795 --> 00:36:43.435
<v Speaker 1>yeah,

00:36:43.595 --> 00:36:45.994
<v Speaker 1>so so you just basically create a new

00:36:45.994 --> 00:36:48.875
<v Speaker 1>predicates on in France called person dot name,

00:36:48.875 --> 00:36:49.675
<v Speaker 1>for example.

00:36:49.915 --> 00:36:51.994
<v Speaker 1>Uh-huh. Index it one way, and then book

00:36:51.994 --> 00:36:54.235
<v Speaker 1>dot name, you index it another way.

00:36:54.954 --> 00:36:55.435
<v Speaker 0>So

00:36:55.900 --> 00:36:57.820
<v Speaker 0>does that mean that I can just do

00:36:57.820 --> 00:36:59.820
<v Speaker 0>book dot name like this? Yep.

00:37:00.060 --> 00:37:01.740
<v Speaker 0>And then say it's also a string, but

00:37:01.740 --> 00:37:03.900
<v Speaker 0>I wanna do a different index semantics and

00:37:03.900 --> 00:37:06.620
<v Speaker 0>say I do Hash. Hash. Yeah. Yep.

00:37:06.780 --> 00:37:08.460
<v Speaker 0>Can I just hit apply on the schema?

00:37:08.460 --> 00:37:11.100
<v Speaker 1>No. You have to actually change your book

00:37:11.435 --> 00:37:12.475
<v Speaker 1>line 19.

00:37:12.635 --> 00:37:14.555
<v Speaker 0>I thought does it become book dot name?

00:37:14.555 --> 00:37:15.275
<v Speaker 1>Yep.

00:37:18.315 --> 00:37:19.995
<v Speaker 1>Yep. Apply schema.

00:37:21.515 --> 00:37:23.195
<v Speaker 1>Sorry. Can we go back to bulk edit?

00:37:23.195 --> 00:37:25.195
<v Speaker 1>Oh, I wanna add the the edges.

00:37:25.275 --> 00:37:27.780
<v Speaker 0>Oh, yeah. Yeah. Yeah. Sorry. So so so

00:37:27.780 --> 00:37:28.260
<v Speaker 1>how

00:37:29.700 --> 00:37:31.300
<v Speaker 1>did book fly out there?

00:37:32.100 --> 00:37:34.420
<v Speaker 1>Was it Yeah. Think it's ordered it. Right?

00:37:34.420 --> 00:37:36.260
<v Speaker 0>This is alphabetical order of the types. We

00:37:36.260 --> 00:37:37.780
<v Speaker 0>can Yeah. Okay. Fair.

00:37:38.340 --> 00:37:39.300
<v Speaker 1>So so

00:37:39.540 --> 00:37:41.060
<v Speaker 1>under under type,

00:37:42.865 --> 00:37:45.025
<v Speaker 1>under person. Sorry. Yep.

00:37:45.185 --> 00:37:48.465
<v Speaker 1>Go down and then put reads.

00:37:49.905 --> 00:37:52.225
<v Speaker 1>No. No. As in just above just above.

00:37:52.305 --> 00:37:55.425
<v Speaker 1>Just just, yeah, under h and put livestream.

00:37:55.920 --> 00:37:57.680
<v Speaker 1>No. No. You don't have to open that.

00:37:57.920 --> 00:37:58.640
<v Speaker 0>Ah,

00:37:58.720 --> 00:37:59.360
<v Speaker 0>okay.

00:38:01.359 --> 00:38:02.640
<v Speaker 0>Livestreams.

00:38:03.119 --> 00:38:04.720
<v Speaker 1>Yep. So livestreams

00:38:04.720 --> 00:38:05.760
<v Speaker 1>already exist

00:38:06.000 --> 00:38:07.520
<v Speaker 1>if you look up there. Yeah.

00:38:08.715 --> 00:38:10.715
<v Speaker 1>So just change reads to the same as

00:38:10.715 --> 00:38:12.555
<v Speaker 1>live streams as a as a co as

00:38:12.555 --> 00:38:14.075
<v Speaker 1>a list of UIDs.

00:38:15.035 --> 00:38:15.755
<v Speaker 0>Yep.

00:38:18.475 --> 00:38:19.355
<v Speaker 0>Uh-huh.

00:38:19.915 --> 00:38:23.270
<v Speaker 0>Right. So so, basically, that's it. You've basically

00:38:23.270 --> 00:38:24.070
<v Speaker 1>created,

00:38:24.310 --> 00:38:26.470
<v Speaker 1>a definition of what a person is, and

00:38:26.470 --> 00:38:28.470
<v Speaker 1>note that you created the nodes before you

00:38:28.470 --> 00:38:29.670
<v Speaker 1>created the schema.

00:38:30.390 --> 00:38:32.230
<v Speaker 1>So if you click apply schema

00:38:33.510 --> 00:38:34.870
<v Speaker 0>Schema.

00:38:36.165 --> 00:38:37.765
<v Speaker 0>Yeah. Okay. Fair.

00:38:38.565 --> 00:38:40.805
<v Speaker 1>So you'll you'll need to you'll need to

00:38:43.045 --> 00:38:45.205
<v Speaker 1>yep. That's that's understandable.

00:38:45.445 --> 00:38:47.285
<v Speaker 1>So just let's just say read you you

00:38:47.285 --> 00:38:48.725
<v Speaker 1>only read one book.

00:38:53.140 --> 00:38:55.300
<v Speaker 0>Okay. So like that?

00:38:56.180 --> 00:38:56.900
<v Speaker 1>Yep.

00:38:58.180 --> 00:38:59.460
<v Speaker 1>Or no?

00:38:59.700 --> 00:39:01.140
<v Speaker 1>Yeah. Yeah. That works.

00:39:01.860 --> 00:39:03.965
<v Speaker 0>It it it still starts in the same.

00:39:03.965 --> 00:39:06.045
<v Speaker 0>Schema change not allowed from scaler to your

00:39:06.045 --> 00:39:08.045
<v Speaker 0>ID or base version, but there's data for

00:39:08.045 --> 00:39:10.525
<v Speaker 0>the Okay. Just click cancel then.

00:39:11.485 --> 00:39:13.245
<v Speaker 1>So we're gonna do a very dirty trick

00:39:13.245 --> 00:39:15.245
<v Speaker 1>that you probably shouldn't do in in real

00:39:15.245 --> 00:39:17.805
<v Speaker 1>life. So click, book. Click reads. Sorry.

00:39:18.990 --> 00:39:20.990
<v Speaker 1>Reads in the predicates. Yep.

00:39:21.870 --> 00:39:24.110
<v Speaker 1>Change it in here. So type change it

00:39:24.110 --> 00:39:24.670
<v Speaker 1>to straight,

00:39:25.470 --> 00:39:26.510
<v Speaker 1>UID.

00:39:27.550 --> 00:39:29.550
<v Speaker 1>List. Click list. Yep.

00:39:30.430 --> 00:39:32.350
<v Speaker 1>Sorry. Sorry. You might wanna drop data first.

00:39:32.350 --> 00:39:34.175
<v Speaker 1>You've got data as is, so just click

00:39:34.175 --> 00:39:34.815
<v Speaker 1>drop.

00:39:36.815 --> 00:39:37.535
<v Speaker 1>Yep.

00:39:38.734 --> 00:39:39.535
<v Speaker 1>Okay.

00:39:39.535 --> 00:39:40.335
<v Speaker 1>Sure.

00:39:40.494 --> 00:39:41.215
<v Speaker 1>Right.

00:39:41.855 --> 00:39:42.735
<v Speaker 1>Oh, dear.

00:39:43.695 --> 00:39:45.615
<v Speaker 1>And just do that thing that you just

00:39:45.615 --> 00:39:46.175
<v Speaker 1>did,

00:39:46.734 --> 00:39:47.855
<v Speaker 1>like reads. Yep.

00:39:50.339 --> 00:39:51.780
<v Speaker 0>And this is just because

00:39:52.819 --> 00:39:54.740
<v Speaker 0>I've been kind of making you make this

00:39:54.740 --> 00:39:56.099
<v Speaker 0>up as we go along and building the

00:39:56.099 --> 00:39:58.819
<v Speaker 0>schema that we have not really thought about.

00:39:58.819 --> 00:40:00.900
<v Speaker 0>Right? So this is Yeah. We really should

00:40:00.900 --> 00:40:02.579
<v Speaker 0>have talked about what we were gonna model

00:40:02.579 --> 00:40:04.500
<v Speaker 0>first. So yeah. Oopsie.

00:40:05.295 --> 00:40:07.694
<v Speaker 1>No problem looks like. We've got a Okay.

00:40:07.694 --> 00:40:10.095
<v Speaker 0>So just to understand what happened there is

00:40:10.095 --> 00:40:12.495
<v Speaker 0>that we were modifying our person.

00:40:12.895 --> 00:40:14.974
<v Speaker 0>We wanted to associate the live streams and

00:40:14.974 --> 00:40:16.494
<v Speaker 0>the books that we read

00:40:17.340 --> 00:40:19.340
<v Speaker 0>here. And then when we were trying to

00:40:19.340 --> 00:40:21.340
<v Speaker 0>add the index, I was just bailing because

00:40:21.340 --> 00:40:23.580
<v Speaker 0>we arbitrarily throw in on some random data

00:40:23.580 --> 00:40:26.060
<v Speaker 0>and it We just throwing the literal native

00:40:26.060 --> 00:40:28.060
<v Speaker 1>stream. Right? So it's not like an not

00:40:28.060 --> 00:40:29.980
<v Speaker 1>not a node. It's just literally a string.

00:40:29.980 --> 00:40:32.060
<v Speaker 0>Exactly. Right. Okay. That that makes sense to

00:40:32.060 --> 00:40:33.875
<v Speaker 0>me. I understand that the the I understand

00:40:33.875 --> 00:40:36.115
<v Speaker 0>the problem there. So we've now got a

00:40:36.115 --> 00:40:38.835
<v Speaker 0>schema where we're defined. So we're kind of

00:40:38.835 --> 00:40:40.755
<v Speaker 0>cherry picking some of the fields that exist

00:40:40.755 --> 00:40:43.555
<v Speaker 0>in the DQL format. We're starting to encapsulate

00:40:43.555 --> 00:40:44.994
<v Speaker 0>them in a type called a person in

00:40:44.994 --> 00:40:46.755
<v Speaker 0>a book and we've now added a few

00:40:46.755 --> 00:40:48.675
<v Speaker 0>indices that allow us to connect the dots

00:40:48.675 --> 00:40:50.330
<v Speaker 0>on that. That's kinda where I think we

00:40:50.330 --> 00:40:51.850
<v Speaker 0>are. Right? Okay. Yep.

00:40:52.970 --> 00:40:55.130
<v Speaker 0>Now I'm assuming we were doing that so

00:40:55.130 --> 00:40:57.050
<v Speaker 0>that when we come back to the reads

00:40:57.050 --> 00:40:57.610
<v Speaker 0>here

00:40:58.410 --> 00:40:59.770
<v Speaker 1>Yeah. You you need to go back to

00:40:59.770 --> 00:41:01.855
<v Speaker 1>the mutate section too. Oh, We don't have

00:41:01.855 --> 00:41:03.855
<v Speaker 0>any books anymore, do we? Yeah. Yeah. So

00:41:03.855 --> 00:41:06.575
<v Speaker 1>so back up here, you just go align

00:41:06.575 --> 00:41:07.375
<v Speaker 1>above it.

00:41:08.095 --> 00:41:08.815
<v Speaker 0>Mhmm.

00:41:09.535 --> 00:41:12.495
<v Speaker 1>Sorry. Align above. Yep. So underscore

00:41:13.455 --> 00:41:14.895
<v Speaker 1>press enter and underscore

00:41:15.660 --> 00:41:16.540
<v Speaker 1>node one.

00:41:16.859 --> 00:41:18.619
<v Speaker 1>Underscore colon node one.

00:41:19.180 --> 00:41:21.579
<v Speaker 1>You're missing a colon. Yep. Yep. Yep. Okay.

00:41:21.579 --> 00:41:24.059
<v Speaker 0>That syntax again. Okay. Yep. And book dot

00:41:24.059 --> 00:41:24.700
<v Speaker 1>name?

00:41:25.500 --> 00:41:26.220
<v Speaker 0>Yep.

00:41:27.420 --> 00:41:29.900
<v Speaker 1>You might wanna angle angle bracket angle angle

00:41:29.900 --> 00:41:30.860
<v Speaker 1>bracket. So

00:41:32.035 --> 00:41:32.675
<v Speaker 0>Yep.

00:41:34.515 --> 00:41:36.355
<v Speaker 1>Get it. Alright. So now we're creating our

00:41:36.355 --> 00:41:38.595
<v Speaker 0>books. Right? So I can see book dot,

00:41:38.595 --> 00:41:39.955
<v Speaker 0>and I can add in the three body

00:41:39.955 --> 00:41:40.915
<v Speaker 0>problem again.

00:41:41.955 --> 00:41:42.595
<v Speaker 1>Yep.

00:41:44.275 --> 00:41:46.539
<v Speaker 0>And so that's gonna create two book dot

00:41:46.539 --> 00:41:47.180
<v Speaker 0>name

00:41:47.420 --> 00:41:49.900
<v Speaker 1>You need the different node ID. Node one,

00:41:49.900 --> 00:41:51.580
<v Speaker 1>node two. Of course. Yeah.

00:41:52.700 --> 00:41:54.299
<v Speaker 0>And I'm assuming we can't do this yet

00:41:54.299 --> 00:41:56.299
<v Speaker 0>until we You can. That's that's what I'm

00:41:56.299 --> 00:41:57.339
<v Speaker 1>I want to tell you is that you

00:41:57.339 --> 00:41:59.500
<v Speaker 1>can. So it just goes instead replace that

00:41:59.500 --> 00:42:01.579
<v Speaker 1>empty empty thing with node one.

00:42:02.915 --> 00:42:03.715
<v Speaker 0>Ah.

00:42:04.275 --> 00:42:05.075
<v Speaker 1>Ah.

00:42:07.235 --> 00:42:10.035
<v Speaker 0>Okay. So we're using the intermediate ID and

00:42:10.035 --> 00:42:11.955
<v Speaker 0>the set syntax, and that's just gonna be

00:42:11.955 --> 00:42:14.435
<v Speaker 0>propagated down to these. Mhmm. Right. Okay.

00:42:15.690 --> 00:42:17.290
<v Speaker 0>Can I have go on this? Yeah. Yeah.

00:42:17.290 --> 00:42:18.170
<v Speaker 0>You can run.

00:42:20.089 --> 00:42:22.170
<v Speaker 1>Oh, I'm sorry. You need angle brackets, I

00:42:22.170 --> 00:42:23.930
<v Speaker 1>believe. Oh, on the on the node one

00:42:23.930 --> 00:42:24.730
<v Speaker 0>and node two. Okay.

00:42:30.065 --> 00:42:31.665
<v Speaker 0>Node one and service

00:42:31.665 --> 00:42:32.385
<v Speaker 0>center.

00:42:35.825 --> 00:42:38.224
<v Speaker 1>Let me recall. I have I don't quite

00:42:38.224 --> 00:42:39.265
<v Speaker 1>remember this.

00:42:39.744 --> 00:42:40.785
<v Speaker 1>Sorry.

00:42:40.785 --> 00:42:41.585
<v Speaker 1>My bad.

00:42:42.145 --> 00:42:43.425
<v Speaker 1>Look. Listen. I

00:42:44.090 --> 00:42:46.730
<v Speaker 1>usually remember these are things. I work on

00:42:46.730 --> 00:42:47.210
<v Speaker 1>these.

00:42:47.530 --> 00:42:49.610
<v Speaker 0>I don't remember even what I had for

00:42:49.610 --> 00:42:52.410
<v Speaker 0>breakfast, so I'm I'm very comfortable looking things

00:42:52.410 --> 00:42:53.370
<v Speaker 0>up every time.

00:42:54.650 --> 00:42:56.650
<v Speaker 1>Yes. Yes. Yes. Okay. So instead of this,

00:42:56.650 --> 00:42:59.210
<v Speaker 1>you need to put underscore

00:42:58.245 --> 00:43:01.125
<v Speaker 1>code underscore colon node one. There you go.

00:43:01.685 --> 00:43:03.925
<v Speaker 1>And remove the angle bracket. No. No. Remove

00:43:03.925 --> 00:43:07.285
<v Speaker 1>the angle brackets. Yeah. Because I'll okay. Right.

00:43:08.565 --> 00:43:10.485
<v Speaker 1>There you go. And you can have node

00:43:10.485 --> 00:43:12.620
<v Speaker 1>one that comes you can you can define

00:43:12.620 --> 00:43:14.780
<v Speaker 1>node one and node two after after after

00:43:14.780 --> 00:43:16.380
<v Speaker 1>that. It'll still work.

00:43:16.780 --> 00:43:18.380
<v Speaker 1>It's just that practice too.

00:43:19.180 --> 00:43:21.900
<v Speaker 0>Cool. That yeah. That makes that makes sense.

00:43:21.900 --> 00:43:23.260
<v Speaker 0>So now

00:43:24.385 --> 00:43:26.944
<v Speaker 0>I'm gonna just make stuff up again. So

00:43:26.944 --> 00:43:29.025
<v Speaker 0>I'm gonna say the book that'll be booked

00:43:29.025 --> 00:43:31.105
<v Speaker 0>on them. Right? So Yep. We don't use

00:43:31.105 --> 00:43:32.625
<v Speaker 0>the canonical in here.

00:43:33.025 --> 00:43:33.904
<v Speaker 0>Livestreams

00:43:33.904 --> 00:43:34.944
<v Speaker 0>hasn't changed.

00:43:36.160 --> 00:43:37.200
<v Speaker 0>Ah,

00:43:37.200 --> 00:43:39.280
<v Speaker 1>look at that. There you go.

00:43:41.760 --> 00:43:43.280
<v Speaker 1>And to make it to make it like

00:43:43.280 --> 00:43:44.960
<v Speaker 1>a proper graph, so you can add,

00:43:45.520 --> 00:43:46.560
<v Speaker 1>you can add

00:43:47.360 --> 00:43:48.720
<v Speaker 1>oh, I want to show you this as

00:43:48.720 --> 00:43:50.240
<v Speaker 1>well. So go back to mutate.

00:43:50.400 --> 00:43:50.800
<v Speaker 0>Yep.

00:43:51.605 --> 00:43:53.925
<v Speaker 1>This is very important to know. Right? So

00:43:54.164 --> 00:43:56.244
<v Speaker 1>keep the first two lines and change the

00:43:56.244 --> 00:43:59.125
<v Speaker 1>change the third line to o x two.

00:44:01.204 --> 00:44:02.965
<v Speaker 1>So that's me reading,

00:44:03.525 --> 00:44:04.244
<v Speaker 1>Dune.

00:44:04.565 --> 00:44:04.885
<v Speaker 0>Mhmm.

00:44:05.619 --> 00:44:06.580
<v Speaker 1>And close,

00:44:07.060 --> 00:44:09.940
<v Speaker 1>yeah. And if you run and if you

00:44:09.940 --> 00:44:12.900
<v Speaker 1>run the previous, run the query again,

00:44:13.940 --> 00:44:15.060
<v Speaker 1>and under livestream

00:44:15.540 --> 00:44:18.185
<v Speaker 0>We have to remove this. Right? No. No.

00:44:18.185 --> 00:44:19.945
<v Speaker 1>No. You don't have to. Just under livestream,

00:44:19.945 --> 00:44:21.625
<v Speaker 1>just put reads.

00:44:25.305 --> 00:44:28.025
<v Speaker 1>Yep. And then UID and book that name.

00:44:31.970 --> 00:44:35.570
<v Speaker 1>UID is not necessary. Right? So you'll note

00:44:35.570 --> 00:44:37.970
<v Speaker 1>that I'm

00:44:37.970 --> 00:44:39.410
<v Speaker 1>connected to a different

00:44:41.890 --> 00:44:43.250
<v Speaker 1>different dune

00:44:43.695 --> 00:44:44.895
<v Speaker 1>u 85.

00:44:45.135 --> 00:44:46.975
<v Speaker 1>Sorry. It should be booked up name, not

00:44:46.975 --> 00:44:50.015
<v Speaker 1>not name. Oh, yeah. Line 14. Yeah. Yeah.

00:44:51.215 --> 00:44:53.055
<v Speaker 1>Right. So so you run.

00:44:53.295 --> 00:44:55.295
<v Speaker 1>I'm connected to a different Dune,

00:44:55.535 --> 00:44:57.455
<v Speaker 1>and you're connected to two different three body

00:44:57.455 --> 00:44:57.855
<v Speaker 1>problems.

00:45:00.220 --> 00:45:01.980
<v Speaker 0>So if I understand

00:45:01.980 --> 00:45:03.740
<v Speaker 0>that correctly, that's because

00:45:04.060 --> 00:45:05.980
<v Speaker 0>this is also new in there every time?

00:45:05.980 --> 00:45:07.500
<v Speaker 1>Correct. Correct. So

00:45:08.380 --> 00:45:09.980
<v Speaker 1>this is something important to note.

00:45:11.645 --> 00:45:14.365
<v Speaker 1>It it run you you will run file

00:45:14.365 --> 00:45:16.605
<v Speaker 1>of it if you don't pay attention. So

00:45:19.005 --> 00:45:19.645
<v Speaker 0>Okay.

00:45:20.365 --> 00:45:22.125
<v Speaker 0>Let me I I guess I've got two

00:45:22.125 --> 00:45:24.045
<v Speaker 0>questions then. It's that

00:45:25.020 --> 00:45:27.660
<v Speaker 0>when we're using the mutate syntax to add

00:45:27.660 --> 00:45:29.100
<v Speaker 0>new reads

00:45:29.580 --> 00:45:32.460
<v Speaker 0>Yep. Can I also do a query to

00:45:32.460 --> 00:45:34.540
<v Speaker 0>fetch the books that I'm looking for? And

00:45:34.540 --> 00:45:36.220
<v Speaker 0>also, is it possible to add some sort

00:45:36.220 --> 00:45:38.300
<v Speaker 0>of unique constraints so that I don't end

00:45:38.300 --> 00:45:39.660
<v Speaker 0>up with two books with the same name?

00:45:40.385 --> 00:45:42.704
<v Speaker 1>Yeah. So those things are you you can

00:45:42.704 --> 00:45:44.545
<v Speaker 1>do all those things, but you generally need

00:45:44.545 --> 00:45:45.985
<v Speaker 1>some external help.

00:45:46.545 --> 00:45:47.265
<v Speaker 0>Okay.

00:45:47.425 --> 00:45:49.985
<v Speaker 1>So so you, like, you you you

00:45:50.785 --> 00:45:53.025
<v Speaker 1>would not be doing this in Rattle. You

00:45:53.025 --> 00:45:55.345
<v Speaker 1>would be doing this in via programming language.

00:45:56.010 --> 00:45:57.850
<v Speaker 0>Yeah. I guess this is a very contrived

00:45:57.850 --> 00:45:59.530
<v Speaker 0>situation right now just to kind of explore

00:45:59.530 --> 00:46:02.010
<v Speaker 0>the tools. This is not a workflow that,

00:46:02.010 --> 00:46:04.410
<v Speaker 0>by any means, we would suggest people do

00:46:04.410 --> 00:46:07.130
<v Speaker 0>and Yeah. To manipulate their data, of course.

00:46:07.610 --> 00:46:10.250
<v Speaker 1>So so I I personally use Rattle because

00:46:10.250 --> 00:46:11.744
<v Speaker 1>of its crazy

00:46:11.984 --> 00:46:12.865
<v Speaker 1>awesome

00:46:14.145 --> 00:46:16.865
<v Speaker 1>graph. Like, I can visualize, and that's crazy.

00:46:16.865 --> 00:46:17.425
<v Speaker 1>Right?

00:46:18.145 --> 00:46:20.464
<v Speaker 1>So this is a graph database in in

00:46:20.464 --> 00:46:22.065
<v Speaker 1>in its in its

00:46:22.704 --> 00:46:23.505
<v Speaker 1>core

00:46:23.585 --> 00:46:25.265
<v Speaker 1>is that you work on a graph.

00:46:27.720 --> 00:46:30.280
<v Speaker 1>Right? Okay. Yep. Yep. Yep. And and and

00:46:30.280 --> 00:46:32.200
<v Speaker 1>the thing about this is all nodes share

00:46:32.200 --> 00:46:35.400
<v Speaker 1>the same ID route, like UIDs. So if

00:46:35.400 --> 00:46:37.320
<v Speaker 1>you look at if you look at all

00:46:37.320 --> 00:46:39.080
<v Speaker 1>your UIDs for each of the node, they're

00:46:39.080 --> 00:46:41.080
<v Speaker 1>they're in increasing order. So you've got David

00:46:41.080 --> 00:46:42.440
<v Speaker 1>as UID, o x one,

00:46:43.615 --> 00:46:45.855
<v Speaker 1>me as u I u o I o

00:46:45.855 --> 00:46:47.855
<v Speaker 1>x two and all that, so on and

00:46:47.855 --> 00:46:48.735
<v Speaker 1>so forth. Yeah.

00:46:49.935 --> 00:46:52.735
<v Speaker 1>So this is a graph database

00:46:53.455 --> 00:46:54.175
<v Speaker 1>in a nutshell.

00:46:55.240 --> 00:46:55.960
<v Speaker 1>Now

00:46:56.360 --> 00:46:59.560
<v Speaker 1>with with graph with Dgraph, because it's it's

00:46:59.560 --> 00:47:00.760
<v Speaker 1>it's

00:47:00.760 --> 00:47:03.560
<v Speaker 1>distributed from from out of box,

00:47:04.600 --> 00:47:07.560
<v Speaker 1>it can get quite intimidating to to actually

00:47:07.960 --> 00:47:10.505
<v Speaker 1>run it on your own. Mhmm. The the

00:47:10.505 --> 00:47:12.745
<v Speaker 1>standalone docker image is fantastic

00:47:12.985 --> 00:47:13.785
<v Speaker 1>for

00:47:14.025 --> 00:47:15.705
<v Speaker 1>for experimenting,

00:47:16.025 --> 00:47:16.985
<v Speaker 1>prototyping.

00:47:17.225 --> 00:47:18.585
<v Speaker 1>You know? But,

00:47:19.145 --> 00:47:21.305
<v Speaker 1>you kinda need to read carefully

00:47:21.305 --> 00:47:23.945
<v Speaker 1>the, deploy section of the docs

00:47:24.990 --> 00:47:26.110
<v Speaker 1>on on on

00:47:27.070 --> 00:47:29.230
<v Speaker 1>we've got certain recommendations. So you need to

00:47:29.230 --> 00:47:31.230
<v Speaker 1>have, like, three nodes of alphas

00:47:31.230 --> 00:47:33.710
<v Speaker 1>at least in the production system. You need

00:47:33.710 --> 00:47:36.110
<v Speaker 1>to have 32 gigabytes of RAM minimum.

00:47:36.675 --> 00:47:38.435
<v Speaker 1>It's quite resource heavy.

00:47:38.995 --> 00:47:41.955
<v Speaker 1>So 32 gig of RAM. Wow. Yeah. Yeah.

00:47:43.395 --> 00:47:45.555
<v Speaker 1>Yeah. We we we've got people running out

00:47:45.555 --> 00:47:48.835
<v Speaker 1>of memory because graphs get very huge very

00:47:48.835 --> 00:47:49.715
<v Speaker 1>quickly. And,

00:47:50.675 --> 00:47:51.955
<v Speaker 1>one of the things that

00:47:52.740 --> 00:47:54.900
<v Speaker 1>that is beneficial in in a in a

00:47:54.900 --> 00:47:56.260
<v Speaker 1>SQL database is

00:47:56.420 --> 00:47:58.820
<v Speaker 1>compaction. Right? Because it's table, you can very

00:47:58.820 --> 00:48:01.620
<v Speaker 1>easily compact it. Whereas graphs are not so

00:48:01.620 --> 00:48:02.740
<v Speaker 1>easy to compact.

00:48:03.940 --> 00:48:06.260
<v Speaker 1>From from a graph have to store the

00:48:06.260 --> 00:48:08.375
<v Speaker 0>indices in memory at all time, or does

00:48:08.375 --> 00:48:09.895
<v Speaker 0>it fall back to disk?

00:48:10.135 --> 00:48:12.055
<v Speaker 1>So it it falls back to disk. Behind

00:48:12.535 --> 00:48:14.375
<v Speaker 1>the scenes, we use something called Badger.

00:48:15.815 --> 00:48:18.135
<v Speaker 1>It's a key value store to store all

00:48:18.135 --> 00:48:18.935
<v Speaker 1>the self

00:48:19.255 --> 00:48:19.815
<v Speaker 1>information.

00:48:21.420 --> 00:48:23.660
<v Speaker 1>And we've got also Ristretto, which is a

00:48:23.660 --> 00:48:24.860
<v Speaker 1>caching system,

00:48:25.020 --> 00:48:25.660
<v Speaker 1>which is

00:48:25.980 --> 00:48:26.860
<v Speaker 1>pretty awesome.

00:48:27.020 --> 00:48:29.580
<v Speaker 1>If you're into if you're into systems programming,

00:48:29.740 --> 00:48:30.780
<v Speaker 1>it's pretty awesome.

00:48:31.740 --> 00:48:33.660
<v Speaker 1>But what I'm trying to say is that

00:48:33.660 --> 00:48:36.055
<v Speaker 1>it and this is not a sales pitch.

00:48:36.055 --> 00:48:37.575
<v Speaker 1>Sorry. It's it's gonna sound like a sales

00:48:37.575 --> 00:48:39.655
<v Speaker 1>pitch, but it's not. Because I use slash

00:48:39.655 --> 00:48:40.615
<v Speaker 1>myself. Right?

00:48:41.575 --> 00:48:43.175
<v Speaker 1>Slash is the hosted version.

00:48:43.415 --> 00:48:44.375
<v Speaker 0>Alright. Okay.

00:48:45.015 --> 00:48:46.375
<v Speaker 0>This is the thing you asked me to

00:48:46.375 --> 00:48:48.869
<v Speaker 0>open up earlier. Right? Yeah. Slash is the

00:48:48.869 --> 00:48:51.109
<v Speaker 1>hosted version, and and

00:48:52.150 --> 00:48:54.309
<v Speaker 1>the direction the business has gone is to

00:48:54.309 --> 00:48:56.470
<v Speaker 1>to tell you that, hey. Guess what?

00:48:57.270 --> 00:48:59.750
<v Speaker 1>GraphQL is a first class citizen in a

00:48:59.750 --> 00:49:00.230
<v Speaker 1>graph database.

00:49:02.445 --> 00:49:04.765
<v Speaker 1>So think of slash GraphQL as as a

00:49:04.765 --> 00:49:05.565
<v Speaker 1>as a,

00:49:06.125 --> 00:49:08.845
<v Speaker 1>I don't know, RDS Amazon RDS, for example.

00:49:09.005 --> 00:49:11.405
<v Speaker 1>But yeah. Like, you you you don't need

00:49:11.405 --> 00:49:13.325
<v Speaker 0>to sell me on the merits of a

00:49:13.325 --> 00:49:15.920
<v Speaker 0>of a SaaS based database product because, I

00:49:15.920 --> 00:49:17.039
<v Speaker 0>mean, I used to work for a database

00:49:17.039 --> 00:49:19.200
<v Speaker 0>company and and flux data who are Yeah.

00:49:19.200 --> 00:49:19.680
<v Speaker 0>Founders

00:49:20.079 --> 00:49:23.200
<v Speaker 0>and maintainers of influx dp. Like, running stateful

00:49:23.200 --> 00:49:25.519
<v Speaker 0>workloads and production, especially if you if you

00:49:25.519 --> 00:49:27.200
<v Speaker 0>don't have experience of what's going on underneath

00:49:27.200 --> 00:49:28.640
<v Speaker 0>the hood. Like, I totally get it. It's

00:49:28.640 --> 00:49:30.935
<v Speaker 0>really difficult. And I would encourage people to

00:49:30.935 --> 00:49:32.935
<v Speaker 0>use these test product as often as possible.

00:49:32.935 --> 00:49:35.175
<v Speaker 0>So I I'm convinced like if if slash

00:49:35.175 --> 00:49:36.695
<v Speaker 0>graph q l is just gonna make my

00:49:36.695 --> 00:49:39.895
<v Speaker 0>database stateful site easier, then I'm all good.

00:49:39.975 --> 00:49:41.575
<v Speaker 0>I'm hoping what you're gonna tell me though,

00:49:41.575 --> 00:49:43.430
<v Speaker 0>there's a very generous free tier that I

00:49:43.430 --> 00:49:45.190
<v Speaker 0>can check the table. Very generous. You've got

00:49:45.190 --> 00:49:47.829
<v Speaker 1>10,000 credits, and 10,000 credits is

00:49:48.309 --> 00:49:50.869
<v Speaker 1>is is a lot. Right? So I managed

00:49:50.869 --> 00:49:52.390
<v Speaker 1>to port over

00:49:53.509 --> 00:49:56.549
<v Speaker 1>port over a a a a Postgres database,

00:49:56.549 --> 00:49:57.990
<v Speaker 1>and I have, like, what,

00:49:58.565 --> 00:50:00.245
<v Speaker 1>9,000 credits remaining.

00:50:01.525 --> 00:50:02.005
<v Speaker 0>So this

00:50:02.885 --> 00:50:04.965
<v Speaker 0>is rate limited to one request a second

00:50:04.965 --> 00:50:05.925
<v Speaker 0>after.

00:50:05.925 --> 00:50:07.445
<v Speaker 0>Oh, so I could still use it after

00:50:07.445 --> 00:50:09.525
<v Speaker 0>those 10,000 credits. Yeah. Yeah. Yeah. I'm just

00:50:10.405 --> 00:50:12.260
<v Speaker 0>I'm pretty sure my production applications are okay

00:50:12.260 --> 00:50:13.940
<v Speaker 0>with one request a second. I mean, I

00:50:13.940 --> 00:50:15.940
<v Speaker 1>can't surf at any traffic this other than,

00:50:15.940 --> 00:50:17.700
<v Speaker 0>well, me. So that's fine.

00:50:18.100 --> 00:50:20.900
<v Speaker 0>But what is the 10,000 queries mean? So

00:50:20.900 --> 00:50:21.540
<v Speaker 1>so

00:50:22.180 --> 00:50:23.940
<v Speaker 1>you saw those you saw those notes that

00:50:23.940 --> 00:50:25.620
<v Speaker 1>you just queried earlier in Rattle?

00:50:26.184 --> 00:50:26.825
<v Speaker 1>Yes.

00:50:26.984 --> 00:50:28.345
<v Speaker 1>Every GraphQL

00:50:28.505 --> 00:50:31.224
<v Speaker 1>query can be translated to a query that

00:50:31.224 --> 00:50:32.265
<v Speaker 1>touches notes.

00:50:33.625 --> 00:50:35.465
<v Speaker 1>Okay. So for

00:50:35.785 --> 00:50:38.345
<v Speaker 1>yeah. I'm not quite sure what the exact

00:50:38.345 --> 00:50:40.180
<v Speaker 1>numbers are, but I think for the first

00:50:40.180 --> 00:50:42.340
<v Speaker 1>hundred nodes that you touch is one credit.

00:50:42.580 --> 00:50:45.140
<v Speaker 1>And for the for the one

00:50:45.140 --> 00:50:47.220
<v Speaker 1>hundred and first to the first thousand nodes

00:50:47.220 --> 00:50:49.300
<v Speaker 1>is the second credit or something like that.

00:50:49.940 --> 00:50:52.100
<v Speaker 1>I leave those things to the bean counters.

00:50:53.300 --> 00:50:53.700
<v Speaker 1>I'm

00:50:55.275 --> 00:50:57.194
<v Speaker 0>Okay. So You know, I've I've got a

00:50:57.194 --> 00:50:59.515
<v Speaker 1>degree in mathematics just to to avoid doing

00:50:59.515 --> 00:51:00.474
<v Speaker 1>these tough things.

00:51:01.835 --> 00:51:03.915
<v Speaker 1>So anyway, click launch new back end.

00:51:06.315 --> 00:51:08.154
<v Speaker 1>Next to slash GraphQL. Yep. Yeah. I was

00:51:08.154 --> 00:51:09.035
<v Speaker 0>trying to work out why all of this

00:51:09.035 --> 00:51:10.474
<v Speaker 0>was grayed out, but I guess I need

00:51:10.474 --> 00:51:12.710
<v Speaker 0>to tell it to do something. So Yep.

00:51:13.349 --> 00:51:16.070
<v Speaker 0>Okay. So let's call this livestream.

00:51:18.230 --> 00:51:19.430
<v Speaker 1>It's optional.

00:51:20.869 --> 00:51:22.550
<v Speaker 1>I think Frankfurt's closest to you.

00:51:23.605 --> 00:51:25.445
<v Speaker 0>Yep. Let's go with Frankfurt.

00:51:25.445 --> 00:51:26.645
<v Speaker 0>A free plan.

00:51:28.005 --> 00:51:28.805
<v Speaker 1>Launch.

00:51:33.045 --> 00:51:34.725
<v Speaker 0>So this is spinning up

00:51:35.810 --> 00:51:37.410
<v Speaker 0>my own

00:51:37.970 --> 00:51:40.850
<v Speaker 0>Dgraph instance on AWS for me. This is

00:51:40.850 --> 00:51:43.570
<v Speaker 0>not like a shared multi tenancy global

00:51:43.570 --> 00:51:45.890
<v Speaker 0>platform provided by It's your own. Main.

00:51:45.970 --> 00:51:46.450
<v Speaker 1>Yes. Okay.

00:51:48.665 --> 00:51:50.265
<v Speaker 1>And, I think if you if you put

00:51:50.265 --> 00:51:52.185
<v Speaker 1>it nicely, they'll they'll actually connect you to

00:51:52.345 --> 00:51:53.065
<v Speaker 1>anyway,

00:51:53.145 --> 00:51:54.185
<v Speaker 1>the back ends.

00:51:54.984 --> 00:51:56.744
<v Speaker 1>I think you need to refresh the page.

00:51:56.744 --> 00:51:58.025
<v Speaker 1>It should be spun up by now.

00:52:02.710 --> 00:52:04.630
<v Speaker 1>And I think this is where oh, no.

00:52:04.630 --> 00:52:06.310
<v Speaker 1>Okay. This is where GraphQL,

00:52:06.470 --> 00:52:07.430
<v Speaker 1>Dgraph

00:52:07.430 --> 00:52:09.990
<v Speaker 1>actually really, really shines. Right? Once it's spun

00:52:09.990 --> 00:52:12.310
<v Speaker 1>up, just click schema. Okay. Click schema.

00:52:14.915 --> 00:52:15.395
<v Speaker 1>Right.

00:52:15.715 --> 00:52:17.315
<v Speaker 1>There's no schema right now,

00:52:17.795 --> 00:52:19.235
<v Speaker 1>but the best part is you can write

00:52:19.235 --> 00:52:20.995
<v Speaker 1>your own GraphQL schema.

00:52:23.075 --> 00:52:23.875
<v Speaker 0>Okay.

00:52:24.195 --> 00:52:26.275
<v Speaker 1>So so previously, you were writing,

00:52:26.995 --> 00:52:28.915
<v Speaker 1>DQL schemas. Right? You you're writing.

00:52:29.760 --> 00:52:32.640
<v Speaker 1>Right now, let's just write GraphQL schemas.

00:52:33.360 --> 00:52:34.880
<v Speaker 0>Okay. If you want, we can do the

00:52:34.880 --> 00:52:36.000
<v Speaker 1>same book example.

00:52:36.240 --> 00:52:37.920
<v Speaker 1>So we start with type person.

00:52:38.480 --> 00:52:40.960
<v Speaker 0>Do we is there a schema that's in

00:52:40.960 --> 00:52:43.360
<v Speaker 0>the docs that's recommended to use or get

00:52:43.360 --> 00:52:45.200
<v Speaker 0>a starter guide around for that rather than?

00:52:45.975 --> 00:52:48.215
<v Speaker 1>Yeah. Sure. Just go to GraphQL,

00:52:48.215 --> 00:52:48.775
<v Speaker 1>I guess.

00:52:50.615 --> 00:52:52.695
<v Speaker 1>Click on GraphQL. Click quick start.

00:52:56.055 --> 00:52:58.455
<v Speaker 1>Oh, well, d graph sorry. Sorry. Go go

00:52:58.455 --> 00:53:00.910
<v Speaker 1>back to slash. It's very interesting. Right? If

00:53:00.910 --> 00:53:02.110
<v Speaker 1>you go back to slash,

00:53:02.190 --> 00:53:02.830
<v Speaker 1>click

00:53:03.310 --> 00:53:04.590
<v Speaker 1>one click apps

00:53:04.670 --> 00:53:05.710
<v Speaker 1>on left.

00:53:05.790 --> 00:53:06.510
<v Speaker 0>So

00:53:09.390 --> 00:53:10.190
<v Speaker 1>Ah.

00:53:12.350 --> 00:53:15.605
<v Speaker 0>I'm immediately drawn to the Pokedex, but Click

00:53:15.605 --> 00:53:16.964
<v Speaker 1>on the Pokedex then. Yeah. Have a look

00:53:16.964 --> 00:53:18.005
<v Speaker 1>at the schema.

00:53:18.325 --> 00:53:19.685
<v Speaker 1>So deploy it.

00:53:21.684 --> 00:53:23.045
<v Speaker 0>Oh, it's okay. So I'm gonna get a

00:53:23.045 --> 00:53:23.365
<v Speaker 0>new

00:53:23.845 --> 00:53:24.565
<v Speaker 1>Yeah. Yeah.

00:53:25.924 --> 00:53:26.805
<v Speaker 0>Let's do that.

00:53:27.444 --> 00:53:46.290
<v Speaker 0>Get my own Pokedex. So

00:53:40.655 --> 00:53:42.494
<v Speaker 0>I I probably should have actually have clicked

00:53:42.494 --> 00:53:44.255
<v Speaker 0>the view code, but just what this spins

00:53:44.255 --> 00:53:45.935
<v Speaker 0>up. So these these one click apps are

00:53:45.935 --> 00:53:46.495
<v Speaker 0>like

00:53:47.055 --> 00:53:49.855
<v Speaker 0>schemas that are defined up front with some

00:53:49.855 --> 00:53:52.095
<v Speaker 0>data. I'm assuming that I can just immediately

00:53:52.095 --> 00:53:53.535
<v Speaker 0>query, modify,

00:53:53.615 --> 00:53:56.300
<v Speaker 0>etcetera, etcetera. I'm not sure about data. I

00:53:56.300 --> 00:53:58.220
<v Speaker 1>think the schemas are there. Schema will be

00:53:58.220 --> 00:53:59.660
<v Speaker 0>there. So I'm gonna have to create my

00:53:59.660 --> 00:54:01.340
<v Speaker 0>own Pokemon, but I I Yeah. So you

00:54:01.340 --> 00:54:02.780
<v Speaker 1>can just write your own mutations and write

00:54:02.780 --> 00:54:03.980
<v Speaker 1>create own Pokemon

00:54:04.540 --> 00:54:06.460
<v Speaker 0>Okay. Which is which is what every kid

00:54:06.460 --> 00:54:06.860
<v Speaker 1>has done.

00:54:11.185 --> 00:54:13.585
<v Speaker 1>Right. So I go to schema.

00:54:14.785 --> 00:54:17.825
<v Speaker 1>So oh, right. So you've got wow. Okay.

00:54:19.105 --> 00:54:21.505
<v Speaker 0>So we've got an enum so I can

00:54:21.505 --> 00:54:23.425
<v Speaker 0>specify the type of the Pokemon,

00:54:23.425 --> 00:54:25.100
<v Speaker 0>and then I can give it a name

00:54:25.100 --> 00:54:26.380
<v Speaker 0>or images

00:54:26.700 --> 00:54:28.220
<v Speaker 0>and whether it's been captured.

00:54:28.620 --> 00:54:31.340
<v Speaker 0>Yeah. That makes that's like a Pokedex.

00:54:31.420 --> 00:54:33.020
<v Speaker 1>Yeah. It's a Pokedex.

00:54:33.980 --> 00:54:35.900
<v Speaker 0>I just clicked on stuff now for the

00:54:35.900 --> 00:54:37.500
<v Speaker 0>for the the sake of clicking on it.

00:54:37.500 --> 00:54:38.780
<v Speaker 0>I'll stop. So

00:54:39.020 --> 00:54:41.265
<v Speaker 0>let's I'm assuming you're just gonna tell me

00:54:41.265 --> 00:54:42.625
<v Speaker 0>to go to API explorer.

00:54:42.945 --> 00:54:45.345
<v Speaker 1>Yeah. Just just click on the API explorer

00:54:45.905 --> 00:54:47.905
<v Speaker 1>and just write a query. You can you

00:54:47.905 --> 00:54:50.625
<v Speaker 1>can I personally use the API explorer quite

00:54:50.625 --> 00:54:53.025
<v Speaker 1>a lot? Oh. Data's there. Data. Yeah.

00:54:55.230 --> 00:54:56.750
<v Speaker 1>And image URL.

00:55:01.150 --> 00:55:02.670
<v Speaker 0>Oh, one credit.

00:55:03.150 --> 00:55:05.230
<v Speaker 1>Yeah. So it touches all these things. So

00:55:08.965 --> 00:55:09.845
<v Speaker 1>so

00:55:11.045 --> 00:55:13.445
<v Speaker 1>dgraph supports two language. I I I two

00:55:13.445 --> 00:55:14.965
<v Speaker 1>languages I told you from the start. Right?

00:55:14.965 --> 00:55:16.965
<v Speaker 1>DQ, and now you're seeing the,

00:55:17.925 --> 00:55:20.005
<v Speaker 1>the killer feature, I I I would say,

00:55:20.005 --> 00:55:20.484
<v Speaker 1>is that

00:55:21.000 --> 00:55:24.680
<v Speaker 1>imagine you just write an an a schema,

00:55:24.920 --> 00:55:26.920
<v Speaker 1>write the the GraphQL query,

00:55:27.480 --> 00:55:28.760
<v Speaker 1>and then you go a front end that

00:55:28.760 --> 00:55:31.240
<v Speaker 1>comes in and just points to slash GraphQL.

00:55:31.240 --> 00:55:31.880
<v Speaker 0>Yep.

00:55:32.680 --> 00:55:33.160
<v Speaker 1>That's

00:55:33.560 --> 00:55:34.760
<v Speaker 1>that is power.

00:55:36.224 --> 00:55:39.105
<v Speaker 1>You will eventually need to start using DQL

00:55:39.825 --> 00:55:42.545
<v Speaker 1>because there are things that GraphQL cannot do

00:55:42.545 --> 00:55:43.505
<v Speaker 1>just yet.

00:55:44.704 --> 00:55:46.145
<v Speaker 0>And I think I well, let's see if

00:55:46.145 --> 00:55:48.224
<v Speaker 0>my naive understanding of that is correct then.

00:55:48.224 --> 00:55:51.819
<v Speaker 0>Like, even though GraphQL is called graph QL.

00:55:51.819 --> 00:55:54.859
<v Speaker 0>I mean, it was traditionally run against relational

00:55:54.859 --> 00:55:57.579
<v Speaker 0>data structures or even JSON or document based

00:55:57.579 --> 00:56:00.619
<v Speaker 0>infrastructure. It was never initially actually used against

00:56:00.619 --> 00:56:02.300
<v Speaker 0>the graph DB to the best of my

00:56:02.300 --> 00:56:03.900
<v Speaker 0>knowledge. This is why people always talk about

00:56:03.900 --> 00:56:06.300
<v Speaker 0>the n plus one problem with GraphQL lookups

00:56:06.300 --> 00:56:07.395
<v Speaker 0>is that when

00:56:09.715 --> 00:56:12.195
<v Speaker 1>The over fetching bits. Yeah. When you when

00:56:12.195 --> 00:56:13.635
<v Speaker 0>you do like subtype

00:56:13.635 --> 00:56:15.475
<v Speaker 0>and then that has subtypes and then that

00:56:15.475 --> 00:56:17.475
<v Speaker 0>could have subtypes. So it's like generally that

00:56:17.475 --> 00:56:19.555
<v Speaker 0>query is then doing a lookup here, a

00:56:19.555 --> 00:56:21.235
<v Speaker 0>subsequent lookup here to the database and then

00:56:21.235 --> 00:56:23.310
<v Speaker 0>a subsequent lookup here. Does that problem go

00:56:23.310 --> 00:56:25.870
<v Speaker 0>away with Dgraph? Yes. Because, you know, your

00:56:25.870 --> 00:56:28.670
<v Speaker 1>your underlying structure is a graph. Yeah.

00:56:28.830 --> 00:56:31.070
<v Speaker 1>Unless you do something funny, which is like

00:56:31.070 --> 00:56:32.270
<v Speaker 1>a take a table

00:56:32.670 --> 00:56:34.510
<v Speaker 1>structure and try to structure it as a

00:56:34.510 --> 00:56:35.310
<v Speaker 1>graph and

00:56:36.384 --> 00:56:37.905
<v Speaker 1>and funny things happen.

00:56:39.025 --> 00:56:42.545
<v Speaker 0>Okay. So I I understand why the DQL

00:56:42.545 --> 00:56:45.424
<v Speaker 0>extensions need to exist because because GraphQL wasn't

00:56:45.424 --> 00:56:47.184
<v Speaker 0>built on graph databases. There's a lot of

00:56:47.184 --> 00:56:50.480
<v Speaker 0>that feature and functionality that just doesn't understand.

00:56:50.480 --> 00:56:53.119
<v Speaker 0>As as the graphical spec being modified to

00:56:53.119 --> 00:56:54.960
<v Speaker 0>accommodate some of these extensions or do you

00:56:54.960 --> 00:56:57.359
<v Speaker 0>always see the the a DQL just being

00:56:57.359 --> 00:56:59.440
<v Speaker 0>something that is required at a certain stage

00:56:59.440 --> 00:57:00.640
<v Speaker 0>of your adoption?

00:57:01.040 --> 00:57:03.775
<v Speaker 1>So I think over time, you're gonna need

00:57:03.775 --> 00:57:06.015
<v Speaker 1>custom resolvers for any any

00:57:06.175 --> 00:57:08.735
<v Speaker 1>large enough system. You're gonna need custom resolvers

00:57:08.735 --> 00:57:09.535
<v Speaker 1>for your

00:57:09.855 --> 00:57:11.695
<v Speaker 1>for your GraphQL.

00:57:11.775 --> 00:57:12.495
<v Speaker 0>Okay.

00:57:12.815 --> 00:57:13.455
<v Speaker 1>And

00:57:13.695 --> 00:57:16.255
<v Speaker 1>that's where you end up having to learn,

00:57:16.255 --> 00:57:17.615
<v Speaker 1>write DQL, I guess.

00:57:20.150 --> 00:57:22.150
<v Speaker 0>Okay. I guess that that yes. That that

00:57:22.150 --> 00:57:24.230
<v Speaker 0>makes sense to me. So

00:57:24.790 --> 00:57:26.310
<v Speaker 0>we've got our slash

00:57:26.710 --> 00:57:27.830
<v Speaker 0>GraphQL.

00:57:29.910 --> 00:57:31.510
<v Speaker 0>How do oh, I can just click and

00:57:31.510 --> 00:57:32.549
<v Speaker 0>run DQL query?

00:57:32.955 --> 00:57:33.995
<v Speaker 1>Yep. You

00:57:34.475 --> 00:57:36.635
<v Speaker 1>you will get pulled onto Rattle.

00:57:37.355 --> 00:57:40.475
<v Speaker 1>And yes. Oh, hang on. You're on play.dgraph.io.

00:57:40.475 --> 00:57:41.355
<v Speaker 1>Okay. So if you go back to your

00:57:41.355 --> 00:57:42.235
<v Speaker 1>own Rattle

00:57:42.555 --> 00:57:44.395
<v Speaker 0>My own. Yep. Yep. Go back to your

00:57:44.395 --> 00:57:46.235
<v Speaker 1>own Rattle and click on local host a

00:57:46.235 --> 00:57:47.355
<v Speaker 1>t a t on the top left.

00:57:49.220 --> 00:57:51.700
<v Speaker 1>You can choose to say connect to to

00:57:51.700 --> 00:57:53.300
<v Speaker 1>to your slash GraphQL.

00:57:53.300 --> 00:57:53.860
<v Speaker 1>I

00:57:54.180 --> 00:57:56.260
<v Speaker 1>don't remember the Yeah. I'm gonna find the

00:57:56.339 --> 00:57:57.859
<v Speaker 1>Go go go to the other Rattle. Go

00:57:57.859 --> 00:57:59.619
<v Speaker 1>to the play Rattle, the the the site

00:57:59.700 --> 00:58:00.660
<v Speaker 1>the the new Rattle.

00:58:02.875 --> 00:58:04.635
<v Speaker 1>Not I don't think that's the correct one.

00:58:04.635 --> 00:58:07.115
<v Speaker 1>You go to the tab next to it,

00:58:07.434 --> 00:58:08.475
<v Speaker 1>and then click on

00:58:10.075 --> 00:58:11.515
<v Speaker 1>that, and it actually

00:58:12.795 --> 00:58:14.875
<v Speaker 0>Alright. So that is the URL I copied,

00:58:14.875 --> 00:58:16.555
<v Speaker 0>but there was

00:58:16.200 --> 00:58:17.880
<v Speaker 1>API key. Yeah. That's

00:58:22.040 --> 00:58:23.080
<v Speaker 0>oh, there we go.

00:58:25.720 --> 00:58:28.455
<v Speaker 1>So now you are connected to your slash

00:58:28.455 --> 00:58:30.855
<v Speaker 1>DraftQO instance from Rattle.

00:58:30.855 --> 00:58:32.535
<v Speaker 0>I don't believe it yet. Hold on.

00:58:33.655 --> 00:58:34.855
<v Speaker 0>Let

00:58:34.855 --> 00:58:35.815
<v Speaker 0>me copy

00:58:35.895 --> 00:58:37.255
<v Speaker 0>where is it? Oh, sorry.

00:58:38.375 --> 00:58:38.935
<v Speaker 1>Caveat.

00:58:41.240 --> 00:58:43.560
<v Speaker 1>Rattle is only DQL.

00:58:43.640 --> 00:58:45.000
<v Speaker 1>There are plans to

00:58:45.720 --> 00:58:48.440
<v Speaker 1>there are plans for you to actually write

00:58:48.599 --> 00:58:50.920
<v Speaker 1>GraphQL in Rattle soon,

00:58:50.920 --> 00:58:51.400
<v Speaker 1>but

00:58:52.119 --> 00:58:53.960
<v Speaker 1>the dev team's a bit swamped right now.

00:58:55.115 --> 00:58:56.555
<v Speaker 0>Oh, yeah. Okay. So,

00:58:57.275 --> 00:58:57.835
<v Speaker 0>like,

00:58:58.954 --> 00:59:01.434
<v Speaker 0>does Rattle provide the same like, I'm I'm

00:59:01.434 --> 00:59:03.595
<v Speaker 0>not sure what tools that's this looks like

00:59:03.595 --> 00:59:05.674
<v Speaker 0>one of the, you know, various GraphQL explosions.

00:59:05.674 --> 00:59:07.194
<v Speaker 1>Yeah. You can use GraphQL to connect to

00:59:07.194 --> 00:59:10.070
<v Speaker 1>this. Yeah. Does Rattle provide some sort of

00:59:10.070 --> 00:59:11.510
<v Speaker 0>query exposition

00:59:11.510 --> 00:59:14.070
<v Speaker 0>thing or browser like we have here? You

00:59:14.070 --> 00:59:15.990
<v Speaker 0>know, I I I can see the filter.

00:59:15.990 --> 00:59:18.150
<v Speaker 0>I can see the schema. Can I do

00:59:18.150 --> 00:59:19.190
<v Speaker 0>that with Rattle?

00:59:19.350 --> 00:59:21.110
<v Speaker 1>You can see the schema by clicking on

00:59:21.110 --> 00:59:22.150
<v Speaker 1>schema, for example.

00:59:22.955 --> 00:59:25.355
<v Speaker 1>Click refresh scheme. I don't think it like

00:59:25.355 --> 00:59:27.275
<v Speaker 0>my random setup, so I'll just use this

00:59:27.275 --> 00:59:27.755
<v Speaker 0>one.

00:59:28.155 --> 00:59:28.715
<v Speaker 0>Yep.

00:59:29.755 --> 00:59:30.555
<v Speaker 0>Schema.

00:59:30.555 --> 00:59:31.195
<v Speaker 0>Okay.

00:59:32.155 --> 00:59:35.355
<v Speaker 1>See? All all the Pokemon, like, schemas have

00:59:35.355 --> 00:59:36.955
<v Speaker 1>been nicely namespaced for you.

00:59:38.280 --> 00:59:39.880
<v Speaker 0>Okay. So I think the problem with my

00:59:39.880 --> 00:59:42.200
<v Speaker 0>rattle then is that I just

00:59:42.840 --> 00:59:45.800
<v Speaker 0>didn't have auto complete because it wasn't actually

00:59:45.800 --> 00:59:48.200
<v Speaker 0>connected. So this Right. This this is actually

00:59:48.200 --> 00:59:49.080
<v Speaker 0>working there.

00:59:49.400 --> 00:59:50.040
<v Speaker 1>Yeah.

00:59:51.160 --> 00:59:52.675
<v Speaker 0>Cool. Oh, no.

00:59:54.275 --> 00:59:57.155
<v Speaker 1>Sorry. Sorry. You're Yeah. You're in a schema

00:59:57.155 --> 00:59:58.115
<v Speaker 1>query.

00:59:59.714 --> 01:00:01.715
<v Speaker 1>You need to give a function name.

01:00:02.035 --> 01:00:04.835
<v Speaker 0>Oh, yeah. Alright. Okay. Like like traditional.

01:00:06.420 --> 01:00:07.540
<v Speaker 0>Pokemon.

01:00:09.220 --> 01:00:09.860
<v Speaker 0>So

01:00:11.220 --> 01:00:12.660
<v Speaker 0>that was something like

01:00:12.980 --> 01:00:13.780
<v Speaker 0>this,

01:00:13.859 --> 01:00:16.260
<v Speaker 0>and then we also had to do

01:00:17.540 --> 01:00:18.980
<v Speaker 0>funk Funk. Has

01:00:19.655 --> 01:00:22.375
<v Speaker 0>type? You don't have okay. So you you

01:00:22.535 --> 01:00:23.415
<v Speaker 1>I can you can type

01:00:24.135 --> 01:00:26.215
<v Speaker 1>instead of has type, you can just do

01:00:26.295 --> 01:00:29.015
<v Speaker 1>type bracket poke type bracket Pokemon.

01:00:29.575 --> 01:00:31.815
<v Speaker 0>Alright. Okay. Type

01:00:32.214 --> 01:00:33.175
<v Speaker 0>Pokemon. Pokemon.

01:00:37.910 --> 01:00:39.750
<v Speaker 1>Right? And you should run. Woah. There you

01:00:39.750 --> 01:00:40.150
<v Speaker 1>go.

01:00:41.510 --> 01:00:42.870
<v Speaker 0>Okay. Cool.

01:00:44.630 --> 01:00:46.070
<v Speaker 0>So we do get quite a fair bit

01:00:46.070 --> 01:00:47.984
<v Speaker 0>of data then. Yep.

01:00:48.224 --> 01:00:50.385
<v Speaker 0>Let's see. Pokemon. That's not look like a

01:00:50.385 --> 01:00:51.425
<v Speaker 1>51.

01:00:54.625 --> 01:00:56.785
<v Speaker 0>Yeah. I'm not sure. I don't know if

01:00:56.785 --> 01:00:59.184
<v Speaker 0>any of them are captured. So can I

01:00:59.184 --> 01:01:01.400
<v Speaker 0>change this type? Like, what if I want

01:01:01.480 --> 01:01:03.480
<v Speaker 0>only wanna put a captured true?

01:01:04.120 --> 01:01:05.080
<v Speaker 1>So

01:01:05.080 --> 01:01:08.200
<v Speaker 1>you can so in in DQL, you can

01:01:08.200 --> 01:01:10.120
<v Speaker 1>you can do something called filters.

01:01:10.280 --> 01:01:10.920
<v Speaker 0>Mhmm.

01:01:11.240 --> 01:01:12.520
<v Speaker 1>So

01:01:15.755 --> 01:01:18.155
<v Speaker 1>type Pokemon and then space filter.

01:01:21.035 --> 01:01:23.755
<v Speaker 1>No. No. I sent the line two. Sorry.

01:01:23.755 --> 01:01:24.395
<v Speaker 0>Oh, okay.

01:01:25.995 --> 01:01:28.395
<v Speaker 1>And then after the after the close-up bracket

01:01:29.520 --> 01:01:30.320
<v Speaker 0>Here?

01:01:30.560 --> 01:01:31.200
<v Speaker 1>Yep.

01:01:31.440 --> 01:01:33.520
<v Speaker 1>Add filter alias filter.

01:01:36.640 --> 01:01:37.760
<v Speaker 0>Alias filter?

01:01:38.720 --> 01:01:40.640
<v Speaker 1>The at symbol. Sorry. Yeah. The at the

01:01:40.640 --> 01:01:43.200
<v Speaker 1>at symbol. At at filter. Yeah. And then

01:01:43.200 --> 01:01:43.840
<v Speaker 1>open bracket.

01:01:44.915 --> 01:01:45.635
<v Speaker 0>Yep.

01:01:46.035 --> 01:01:49.155
<v Speaker 1>And then you can type things like,

01:01:51.955 --> 01:01:53.795
<v Speaker 1>e q. You need e q. You need

01:01:53.795 --> 01:01:55.715
<v Speaker 1>a function in there. So e q,

01:01:56.994 --> 01:01:57.795
<v Speaker 1>pokemon.

01:01:57.795 --> 01:01:59.315
<v Speaker 1>Captured it true.

01:01:59.474 --> 01:01:59.795
<v Speaker 1>Yep.

01:02:02.210 --> 01:02:04.450
<v Speaker 0>Oh, I haven't captured any Pokemon.

01:02:05.250 --> 01:02:05.890
<v Speaker 1>Yeah.

01:02:06.290 --> 01:02:07.890
<v Speaker 1>So if you click on the JSON and

01:02:07.890 --> 01:02:08.369
<v Speaker 1>request,

01:02:08.849 --> 01:02:10.770
<v Speaker 1>on the right, so JSON,

01:02:11.010 --> 01:02:13.935
<v Speaker 1>it'll actually tell you, okay. It there was

01:02:13.935 --> 01:02:16.255
<v Speaker 1>no, like, hidden errors or anything. So, yeah,

01:02:16.255 --> 01:02:18.175
<v Speaker 1>that you did not capture any Pokemon.

01:02:19.295 --> 01:02:19.935
<v Speaker 0>Okay.

01:02:20.175 --> 01:02:22.175
<v Speaker 0>Well well, I guess that gives me something

01:02:22.175 --> 01:02:24.335
<v Speaker 0>I have to do at some point. So

01:02:25.215 --> 01:02:28.089
<v Speaker 0>the DQL syntax then is we can just

01:02:28.089 --> 01:02:30.250
<v Speaker 0>do filters. We can use any of the

01:02:30.250 --> 01:02:32.650
<v Speaker 0>functions that are available. Did it offer to

01:02:32.810 --> 01:02:34.810
<v Speaker 0>yeah. No. It doesn't auto complete the functions.

01:02:34.810 --> 01:02:36.890
<v Speaker 0>So you just It does. It does? It

01:02:36.890 --> 01:02:38.570
<v Speaker 1>should auto it should auto complete, at least

01:02:38.570 --> 01:02:39.770
<v Speaker 1>my my mind does.

01:02:42.255 --> 01:02:43.055
<v Speaker 0>Yeah.

01:02:45.295 --> 01:02:47.455
<v Speaker 0>Maybe it's just me. I'm not sure.

01:02:47.934 --> 01:02:49.535
<v Speaker 0>How do I get a list then? At

01:02:49.535 --> 01:02:50.815
<v Speaker 0>least in the is there a list of

01:02:50.815 --> 01:02:53.055
<v Speaker 0>functions I can get from the documentation?

01:02:53.055 --> 01:02:55.934
<v Speaker 1>So, yeah, it's a yeah. Go to documentation.

01:02:55.934 --> 01:02:56.734
<v Speaker 1>Go to DQL.

01:02:57.770 --> 01:03:00.490
<v Speaker 1>Go query language. Yeah. Functions.

01:03:00.810 --> 01:03:02.890
<v Speaker 1>Ta da. See, I I love it when

01:03:02.890 --> 01:03:04.410
<v Speaker 0>I can just go to the talks and

01:03:04.410 --> 01:03:06.650
<v Speaker 0>kinda quickly find what I'm looking for. Okay.

01:03:06.650 --> 01:03:08.089
<v Speaker 0>So we can link this all of the

01:03:08.089 --> 01:03:10.089
<v Speaker 0>terms. There's the filters,

01:03:12.475 --> 01:03:14.795
<v Speaker 0>regular expressions. Alright. Okay. So

01:03:16.234 --> 01:03:16.555
<v Speaker 0>there's

01:03:17.275 --> 01:03:18.635
<v Speaker 1>There are a lot of crazy things that

01:03:18.635 --> 01:03:20.075
<v Speaker 1>you can do, like aggregation,

01:03:20.075 --> 01:03:22.395
<v Speaker 1>which you can't do in deep in GraphQL.

01:03:24.730 --> 01:03:25.850
<v Speaker 0>There's also

01:03:26.010 --> 01:03:28.650
<v Speaker 0>full text search language specific.

01:03:28.890 --> 01:03:30.010
<v Speaker 1>Ah, yes.

01:03:30.650 --> 01:03:31.930
<v Speaker 1>Yes. Yes.

01:03:33.290 --> 01:03:36.170
<v Speaker 1>So so so if you put an alias,

01:03:36.410 --> 01:03:39.130
<v Speaker 1>and then a language code after a string

01:03:39.130 --> 01:03:39.850
<v Speaker 1>field

01:03:40.785 --> 01:03:43.745
<v Speaker 1>So a string field can have multiple languages.

01:03:45.825 --> 01:03:47.505
<v Speaker 0>I'm trying to see. Does it have an

01:03:47.505 --> 01:03:48.465
<v Speaker 0>example of

01:03:49.025 --> 01:03:50.865
<v Speaker 1>this? So yeah. Yeah. It should.

01:03:51.345 --> 01:03:53.585
<v Speaker 1>You can go to Oh, yeah. Yeah. Okay.

01:03:53.585 --> 01:03:55.430
<v Speaker 0>So we do all of. Let me zoom

01:03:55.430 --> 01:03:56.630
<v Speaker 0>in on that a little bit.

01:03:58.069 --> 01:03:59.670
<v Speaker 0>Yeah. If we do

01:04:00.230 --> 01:04:02.710
<v Speaker 0>all of match and then name and then

01:04:02.710 --> 01:04:04.630
<v Speaker 0>at e n, so we can specify the

01:04:04.630 --> 01:04:07.029
<v Speaker 0>language and that changes the semantics of the

01:04:07.029 --> 01:04:10.150
<v Speaker 0>match, the equals, etcetera. Yep. Yep. That's very

01:04:10.150 --> 01:04:10.390
<v Speaker 0>cool.

01:04:12.285 --> 01:04:15.005
<v Speaker 1>So that's that's one of the extensions that

01:04:15.965 --> 01:04:19.085
<v Speaker 1>that DQL has that GraphQL can't do,

01:04:19.645 --> 01:04:20.445
<v Speaker 1>I guess.

01:04:21.005 --> 01:04:23.485
<v Speaker 0>Yeah. That that definitely would not be possible

01:04:24.285 --> 01:04:25.005
<v Speaker 0>using

01:04:25.390 --> 01:04:26.190
<v Speaker 0>GraphQL

01:04:26.190 --> 01:04:27.310
<v Speaker 0>things at all.

01:04:27.869 --> 01:04:30.670
<v Speaker 0>But it's it's nice that that is there.

01:04:30.670 --> 01:04:32.830
<v Speaker 0>Does that change the way that my strings,

01:04:32.990 --> 01:04:35.230
<v Speaker 0>like, the index side, they have to specify

01:04:35.230 --> 01:04:37.630
<v Speaker 0>the the language? Or Yeah. You do. If

01:04:37.630 --> 01:04:40.065
<v Speaker 1>you go go to the original rattle, your

01:04:40.065 --> 01:04:41.984
<v Speaker 1>local host rattle you can go to rattle

01:04:41.984 --> 01:04:43.105
<v Speaker 1>and any rattle.

01:04:43.345 --> 01:04:44.545
<v Speaker 1>Go to schemas.

01:04:44.545 --> 01:04:46.145
<v Speaker 0>Yeah. Go to this one because it's currently

01:04:46.145 --> 01:04:46.785
<v Speaker 0>working.

01:04:47.185 --> 01:04:49.505
<v Speaker 1>Yeah. Click on, click on the name, for

01:04:49.505 --> 01:04:50.225
<v Speaker 1>example,

01:04:51.265 --> 01:04:53.505
<v Speaker 1>and you can click on check on lang.

01:04:57.670 --> 01:04:59.750
<v Speaker 1>So it it will now index based on

01:04:59.750 --> 01:05:01.510
<v Speaker 1>how many languages it is. So if it's

01:05:01.510 --> 01:05:03.350
<v Speaker 1>in there there is no language, then it's

01:05:03.350 --> 01:05:06.230
<v Speaker 1>treated as a, I believe, English, I think.

01:05:06.710 --> 01:05:07.110
<v Speaker 0>Okay.

01:05:08.825 --> 01:05:10.905
<v Speaker 0>Yeah. I'm not sure. Okay. Cool.

01:05:11.785 --> 01:05:13.865
<v Speaker 0>I like that. That's a very interesting thing

01:05:13.865 --> 01:05:16.105
<v Speaker 0>that I hadn't really considered.

01:05:17.545 --> 01:05:18.105
<v Speaker 0>Awesome.

01:05:19.730 --> 01:05:20.930
<v Speaker 1>Yeah. Dgraph

01:05:20.930 --> 01:05:22.770
<v Speaker 1>also supports things like geo,

01:05:23.809 --> 01:05:26.290
<v Speaker 1>like I did notice that on our

01:05:26.529 --> 01:05:28.450
<v Speaker 0>was it on the console? Yeah. There was

01:05:28.450 --> 01:05:29.809
<v Speaker 0>this geo thing here. I

01:05:30.529 --> 01:05:32.450
<v Speaker 0>I'm assuming that just means that

01:05:33.375 --> 01:05:36.975
<v Speaker 0>latitude, longitude, types of Correct. Properties are just

01:05:36.975 --> 01:05:39.375
<v Speaker 0>naturally supported, natively supported? Natively

01:05:39.375 --> 01:05:40.575
<v Speaker 1>supported. Yes.

01:05:41.375 --> 01:05:44.335
<v Speaker 0>So this is saying that I'll read this.

01:05:44.335 --> 01:05:46.820
<v Speaker 0>Objects must contain a predicate or alias location.

01:05:46.820 --> 01:05:48.100
<v Speaker 0>Okay. So as long as I have something

01:05:48.100 --> 01:05:49.780
<v Speaker 0>called location that looks like a lot long,

01:05:49.780 --> 01:05:51.700
<v Speaker 0>it's gonna map that for me on this?

01:05:51.700 --> 01:05:52.260
<v Speaker 0>Correct.

01:05:52.820 --> 01:05:54.580
<v Speaker 0>Does that I I'm assuming that I can

01:05:54.580 --> 01:05:56.420
<v Speaker 0>also query that and say, show me all

01:05:56.420 --> 01:05:57.140
<v Speaker 0>of the

01:05:57.460 --> 01:06:00.115
<v Speaker 0>the nodes that have some property within a

01:06:00.115 --> 01:06:03.315
<v Speaker 0>certain radius of this location. Like, I wanted

01:06:03.315 --> 01:06:04.994
<v Speaker 0>to find all of the bars or restaurants

01:06:04.994 --> 01:06:06.515
<v Speaker 0>near my city,

01:06:07.315 --> 01:06:10.355
<v Speaker 0>this natively works. Right? Yep. Natively works.

01:06:10.835 --> 01:06:11.315
<v Speaker 0>Cool.

01:06:12.570 --> 01:06:14.490
<v Speaker 0>Awesome. Joe is pretty awesome.

01:06:14.650 --> 01:06:17.290
<v Speaker 1>I've not actually had I've not actually personally

01:06:17.290 --> 01:06:19.850
<v Speaker 1>had the the opportunity to play around with

01:06:19.850 --> 01:06:22.010
<v Speaker 1>Joe, so I can't tell you much about

01:06:22.010 --> 01:06:23.290
<v Speaker 1>it, but I know it works.

01:06:24.970 --> 01:06:26.730
<v Speaker 0>Yeah. So I guess, I mean,

01:06:28.395 --> 01:06:30.155
<v Speaker 0>I'm not gonna make you do it now

01:06:30.475 --> 01:06:32.795
<v Speaker 0>because of of timing constraints here, but definitely

01:06:32.795 --> 01:06:34.075
<v Speaker 0>something I wouldn't be playing with in the

01:06:34.075 --> 01:06:35.995
<v Speaker 0>future. But if I wanted to store

01:06:36.715 --> 01:06:38.715
<v Speaker 0>if my capture of a Pokemon was an

01:06:38.715 --> 01:06:39.435
<v Speaker 0>actual type,

01:06:39.849 --> 01:06:41.690
<v Speaker 0>could store the latitude and longitude. Like I'm

01:06:41.690 --> 01:06:43.130
<v Speaker 0>thinking of a Pokemon Go, if I'm walking

01:06:43.130 --> 01:06:45.050
<v Speaker 0>down the street and I Yeah. Capture Pokemon,

01:06:45.130 --> 01:06:46.410
<v Speaker 0>I could store that lat and long and

01:06:46.410 --> 01:06:48.329
<v Speaker 0>then I could actually probably pull out what

01:06:48.329 --> 01:06:50.330
<v Speaker 0>I caught within local vicinity.

01:06:50.410 --> 01:06:50.970
<v Speaker 1>That is correct.

01:06:52.105 --> 01:06:52.905
<v Speaker 0>Awesome.

01:06:52.905 --> 01:06:54.745
<v Speaker 0>I think this is a really, really cool

01:06:54.745 --> 01:06:55.865
<v Speaker 0>tool and

01:06:56.025 --> 01:06:57.225
<v Speaker 0>I definitely

01:06:57.305 --> 01:07:00.105
<v Speaker 0>understand the applications of a graph database for

01:07:00.105 --> 01:07:01.865
<v Speaker 0>certain data models and how that is gonna

01:07:01.865 --> 01:07:03.465
<v Speaker 0>give me a lot of benefits to the

01:07:03.465 --> 01:07:04.825
<v Speaker 0>way that I work in slice and dice

01:07:04.825 --> 01:07:05.705
<v Speaker 0>the data and all of that.

01:07:06.960 --> 01:07:09.040
<v Speaker 0>Very exciting tool. Maybe

01:07:09.440 --> 01:07:11.600
<v Speaker 0>we could talk about sorry, before

01:07:12.000 --> 01:07:14.720
<v Speaker 0>we move on, is there anything from the

01:07:14.720 --> 01:07:16.960
<v Speaker 0>rattle side or the documentation or the slash

01:07:16.960 --> 01:07:19.040
<v Speaker 0>side that you want to cover before I

01:07:19.040 --> 01:07:19.520
<v Speaker 0>can

01:07:19.985 --> 01:07:22.065
<v Speaker 0>move away? I guess I no. I'm I'm

01:07:22.065 --> 01:07:22.625
<v Speaker 1>good.

01:07:23.505 --> 01:07:25.345
<v Speaker 1>Alright. I I there there are a lot

01:07:25.345 --> 01:07:26.465
<v Speaker 1>more in documentation.

01:07:26.465 --> 01:07:28.385
<v Speaker 1>Like, you can do multiple query blocks, but

01:07:28.385 --> 01:07:29.985
<v Speaker 1>you can do that in DraftQ as well.

01:07:32.529 --> 01:07:34.609
<v Speaker 1>Yeah. I I the way I see it

01:07:34.609 --> 01:07:36.450
<v Speaker 1>is if you want to launch your apps

01:07:36.450 --> 01:07:37.250
<v Speaker 1>fast

01:07:37.250 --> 01:07:40.369
<v Speaker 1>and your data model is sane,

01:07:41.009 --> 01:07:42.130
<v Speaker 1>use slash.

01:07:42.529 --> 01:07:45.490
<v Speaker 1>Right? Okay. Sorry. That sounded very salesy. I'm

01:07:45.490 --> 01:07:47.410
<v Speaker 1>not I'm not supposed to sell you anything.

01:07:48.705 --> 01:07:49.665
<v Speaker 1>Yeah. So

01:07:49.985 --> 01:07:51.985
<v Speaker 1>but that's what I've been doing. Right? So

01:07:51.985 --> 01:07:54.305
<v Speaker 1>I've got some personal projects that I run,

01:07:54.305 --> 01:07:56.865
<v Speaker 1>and I just use slash. And strangely, it's

01:07:56.865 --> 01:07:57.825
<v Speaker 1>free. So

01:07:59.025 --> 01:08:01.340
<v Speaker 1>you know? Yeah. I I mean, I think

01:08:01.340 --> 01:08:03.260
<v Speaker 0>this has been a really cool introduction to

01:08:03.260 --> 01:08:05.820
<v Speaker 0>to Dgraph and hopefully just the general concept

01:08:05.820 --> 01:08:07.580
<v Speaker 0>of of GraphQL to the people that's new

01:08:07.580 --> 01:08:09.260
<v Speaker 0>to it and then graph databases beyond that.

01:08:09.260 --> 01:08:12.380
<v Speaker 0>I think I do have real world applications

01:08:12.845 --> 01:08:14.765
<v Speaker 0>for this that I think it would be

01:08:14.765 --> 01:08:16.284
<v Speaker 0>really cool if I could start to build

01:08:16.284 --> 01:08:18.205
<v Speaker 0>those out for our, you know, our team

01:08:18.205 --> 01:08:19.725
<v Speaker 0>at Equinix Meta, we have our own tooling,

01:08:19.725 --> 01:08:21.085
<v Speaker 0>our own platforms. And I think a graph

01:08:21.085 --> 01:08:23.645
<v Speaker 0>DB would be really cool here. So maybe,

01:08:23.645 --> 01:08:24.204
<v Speaker 0>you know

01:08:24.685 --> 01:08:26.539
<v Speaker 0>you know, sometime next year once we have

01:08:26.539 --> 01:08:27.899
<v Speaker 0>that working, maybe it would be cool to

01:08:27.899 --> 01:08:29.020
<v Speaker 0>have you back on and do a bit

01:08:29.020 --> 01:08:30.939
<v Speaker 0>of a deeper dive into some of the

01:08:30.939 --> 01:08:32.859
<v Speaker 0>things that we're doing and optimize Absolutely. But

01:08:32.859 --> 01:08:35.260
<v Speaker 0>I think it's an introduction. This was was

01:08:35.260 --> 01:08:38.139
<v Speaker 0>fantastic. So I'll down a share and we'll

01:08:38.139 --> 01:08:38.939
<v Speaker 0>just, know,

01:08:39.420 --> 01:08:40.139
<v Speaker 0>what's

01:08:40.845 --> 01:08:41.965
<v Speaker 0>you know, what's

01:08:42.285 --> 01:08:44.205
<v Speaker 0>is Dgraph a fast moving project? What's coming

01:08:44.205 --> 01:08:46.125
<v Speaker 0>next? What's what's changing? What are the team

01:08:46.125 --> 01:08:48.205
<v Speaker 0>working on? Like, what what is the focus

01:08:48.205 --> 01:08:49.885
<v Speaker 0>right now for for Dgraph?

01:08:50.045 --> 01:08:51.885
<v Speaker 1>So the the the main focus is to

01:08:51.885 --> 01:08:53.324
<v Speaker 1>make GraphQL

01:08:53.325 --> 01:08:55.659
<v Speaker 1>work even better. There are a lot of

01:08:55.659 --> 01:08:58.460
<v Speaker 1>a lot of extensions, cascades, and stuffing that

01:08:58.460 --> 01:08:59.340
<v Speaker 1>are coming

01:08:59.579 --> 01:09:00.939
<v Speaker 1>in the next version.

01:09:03.179 --> 01:09:05.819
<v Speaker 1>Supporting, for example, one of my biggest requests

01:09:06.059 --> 01:09:07.739
<v Speaker 1>personal requests is supporting

01:09:08.715 --> 01:09:09.834
<v Speaker 1>XIDs.

01:09:11.274 --> 01:09:13.514
<v Speaker 1>So so in in Dgraph terms, XIDs are

01:09:13.514 --> 01:09:14.715
<v Speaker 1>external IDs.

01:09:14.875 --> 01:09:17.194
<v Speaker 1>So you've got you've got Postgres database with

01:09:17.194 --> 01:09:18.074
<v Speaker 1>a int,

01:09:19.274 --> 01:09:22.715
<v Speaker 1>and you can just annotate yours your your

01:09:22.715 --> 01:09:24.074
<v Speaker 1>your your GraphQL

01:09:24.300 --> 01:09:27.579
<v Speaker 1>schema with at ID, and then it will

01:09:27.579 --> 01:09:30.300
<v Speaker 1>sort of in implement all the constraints of

01:09:30.300 --> 01:09:31.579
<v Speaker 1>when ID is.

01:09:31.899 --> 01:09:33.659
<v Speaker 1>Right now, the ID the at ID only

01:09:33.659 --> 01:09:35.659
<v Speaker 1>works for strings, but I think in the

01:09:35.659 --> 01:09:37.579
<v Speaker 1>future, integer types are coming.

01:09:38.774 --> 01:09:41.255
<v Speaker 1>So so that that basically allows people to

01:09:41.255 --> 01:09:43.495
<v Speaker 1>move from one database to another database quite

01:09:43.495 --> 01:09:44.054
<v Speaker 1>easily.

01:09:45.574 --> 01:09:47.495
<v Speaker 1>There's a lot of work done. Most of

01:09:47.495 --> 01:09:48.854
<v Speaker 1>the work has been done most on on

01:09:48.854 --> 01:09:51.494
<v Speaker 1>on on GraphQL and improving

01:09:51.574 --> 01:09:53.415
<v Speaker 1>the things that you can do with GraphQL.

01:09:54.860 --> 01:09:56.220
<v Speaker 1>If you if you go back to slash,

01:09:56.220 --> 01:09:58.620
<v Speaker 1>you you'll see that, like, Dgraph basically generates

01:09:58.620 --> 01:10:00.699
<v Speaker 1>all the GraphQL functions for you.

01:10:02.460 --> 01:10:05.900
<v Speaker 1>So so the the query, my Pokemon, for

01:10:05.900 --> 01:10:06.140
<v Speaker 1>example,

01:10:07.875 --> 01:10:09.955
<v Speaker 1>is generated by Dgraph.

01:10:10.115 --> 01:10:11.795
<v Speaker 1>When you put when when you create a

01:10:11.795 --> 01:10:14.515
<v Speaker 1>a GraphQL schema, it creates this function for

01:10:14.515 --> 01:10:14.994
<v Speaker 1>you.

01:10:15.475 --> 01:10:17.155
<v Speaker 0>Uh-huh. Okay. Yeah.

01:10:18.435 --> 01:10:19.554
<v Speaker 1>And and

01:10:19.955 --> 01:10:21.315
<v Speaker 1>more more

01:10:21.829 --> 01:10:25.429
<v Speaker 1>being created. So so on later versions of

01:10:26.070 --> 01:10:26.789
<v Speaker 1>of,

01:10:26.949 --> 01:10:30.389
<v Speaker 1>dgraph, it also generates, for example, get Pokemon.

01:10:30.389 --> 01:10:33.030
<v Speaker 1>It's self query Pokemon. It's get Pokemon where

01:10:33.030 --> 01:10:34.389
<v Speaker 1>you can get just by an ID.

01:10:35.985 --> 01:10:37.665
<v Speaker 1>And then if you if you look at

01:10:37.665 --> 01:10:38.465
<v Speaker 1>the bottom

01:10:39.665 --> 01:10:41.425
<v Speaker 0>Oh, where's the here?

01:10:41.425 --> 01:10:43.505
<v Speaker 1>Yeah. At the bottom, it shows mutation. You

01:10:43.505 --> 01:10:45.585
<v Speaker 1>click at choose mutation and add.

01:10:46.225 --> 01:10:47.185
<v Speaker 1>Click on the plus.

01:10:48.100 --> 01:10:50.659
<v Speaker 1>So you can you all all these add,

01:10:50.660 --> 01:10:53.460
<v Speaker 1>delete, and update, they're all automatically generated by

01:10:53.460 --> 01:10:54.179
<v Speaker 1>Dgraph.

01:10:54.660 --> 01:10:57.699
<v Speaker 0>Ah, so I can actually see captured

01:11:00.100 --> 01:11:01.380
<v Speaker 0>let me

01:11:02.605 --> 01:11:05.885
<v Speaker 0>run that first. Okay. So I'm gonna

01:11:06.925 --> 01:11:08.605
<v Speaker 0>I'm gonna capture a Pokemon.

01:11:09.165 --> 01:11:11.085
<v Speaker 1>You you want you want the EU IT?

01:11:15.040 --> 01:11:16.640
<v Speaker 0>I was gonna add a new Pokemon and

01:11:16.640 --> 01:11:18.239
<v Speaker 0>just mark it as captured. So now I'm

01:11:18.320 --> 01:11:19.760
<v Speaker 0>I think I think what I'm doing is

01:11:19.760 --> 01:11:20.320
<v Speaker 0>adding

01:11:21.120 --> 01:11:22.480
<v Speaker 0>Pokemon

01:11:22.480 --> 01:11:23.760
<v Speaker 0>called Rawkode,

01:11:24.560 --> 01:11:26.719
<v Speaker 0>which is now being captured and I'll add

01:11:26.719 --> 01:11:28.079
<v Speaker 0>the image URL

01:11:28.880 --> 01:11:30.695
<v Speaker 0>Pokemon. I'll be a bug Pokemon. I don't

01:11:30.695 --> 01:11:31.895
<v Speaker 0>mind being a bug Pokemon.

01:11:32.455 --> 01:11:34.215
<v Speaker 0>At least like that ID was actually maybe

01:11:34.215 --> 01:11:35.175
<v Speaker 0>required.

01:11:35.495 --> 01:11:36.455
<v Speaker 1>Yeah. It is.

01:11:37.095 --> 01:11:39.335
<v Speaker 0>So I'll just be 32,000.

01:11:39.335 --> 01:11:41.735
<v Speaker 0>I'll assume that's available. Too big. It is

01:11:41.735 --> 01:11:42.855
<v Speaker 1>it is acceptable. Yeah.

01:11:44.140 --> 01:11:45.739
<v Speaker 1>It the the reason why you're having that

01:11:45.739 --> 01:11:46.860
<v Speaker 1>is because you need to

01:11:49.739 --> 01:11:52.220
<v Speaker 1>yeah. It's no. UID is ID. Actually, it's

01:11:52.220 --> 01:11:53.260
<v Speaker 1>it's ID.

01:11:53.420 --> 01:11:54.619
<v Speaker 0>There we go. Yeah.

01:11:55.180 --> 01:11:56.860
<v Speaker 1>I think this will fail because you forgot

01:11:56.860 --> 01:11:59.260
<v Speaker 1>to put square brackets outside of the input,

01:11:59.805 --> 01:12:01.725
<v Speaker 1>outside of the the object.

01:12:02.205 --> 01:12:04.125
<v Speaker 1>So add Pokemon takes an input of a

01:12:04.125 --> 01:12:04.685
<v Speaker 1>list.

01:12:07.165 --> 01:12:08.685
<v Speaker 0>Okay. Right now, you've got a list of

01:12:08.685 --> 01:12:10.845
<v Speaker 1>up you've you've got a single object. Yeah.

01:12:11.645 --> 01:12:13.085
<v Speaker 1>There you go. And and you should delete

01:12:13.085 --> 01:12:14.765
<v Speaker 1>the top query Pokemon bit bit.

01:12:16.080 --> 01:12:16.719
<v Speaker 1>Yep.

01:12:18.000 --> 01:12:18.800
<v Speaker 1>So

01:12:19.120 --> 01:12:20.960
<v Speaker 1>And now you need to you need to

01:12:20.960 --> 01:12:21.840
<v Speaker 1>tell,

01:12:22.960 --> 01:12:24.640
<v Speaker 1>you need to tell the GraphQL thing what

01:12:24.640 --> 01:12:26.960
<v Speaker 1>you want out. So add Pokemon

01:12:28.264 --> 01:12:29.145
<v Speaker 1>bracket. So

01:12:29.864 --> 01:12:32.264
<v Speaker 0>Like that? Now you can type num UIDs.

01:12:33.465 --> 01:12:35.545
<v Speaker 0>Sorry. I didn't understand that. I can type

01:12:36.185 --> 01:12:37.704
<v Speaker 1>num UIDs,

01:12:38.025 --> 01:12:40.425
<v Speaker 1>n u m. Okay. K. Yep. There you

01:12:40.425 --> 01:12:41.864
<v Speaker 1>go. So that tells you how many was

01:12:41.864 --> 01:12:43.690
<v Speaker 1>added. If you run that, that should tell

01:12:43.690 --> 01:12:44.810
<v Speaker 1>you one was added.

01:12:46.810 --> 01:12:49.210
<v Speaker 0>Oh, so I think this was supposed to

01:12:49.210 --> 01:12:50.730
<v Speaker 0>be a left

01:12:51.930 --> 01:12:55.574
<v Speaker 0>based on yeah. There we go. Yep. Alright.

01:12:57.335 --> 01:12:58.054
<v Speaker 0>Let's

01:12:58.215 --> 01:13:00.135
<v Speaker 0>I'm gonna delete this. I'm going back to

01:13:00.135 --> 01:13:01.574
<v Speaker 0>my query and and

01:13:01.735 --> 01:13:03.335
<v Speaker 0>oh, no. I needed it from here because

01:13:03.335 --> 01:13:04.775
<v Speaker 0>I want the geo no, not geo. I

01:13:04.775 --> 01:13:06.695
<v Speaker 0>want a captured query which I already did.

01:13:06.695 --> 01:13:07.735
<v Speaker 0>So I'm just gonna hit run.

01:13:15.560 --> 01:13:16.280
<v Speaker 1>And recognize

01:13:16.840 --> 01:13:18.680
<v Speaker 0>I I changed the the filter. We never

01:13:18.680 --> 01:13:19.160
<v Speaker 0>actually run.

01:13:24.945 --> 01:13:26.865
<v Speaker 0>We did one that filter, didn't we?

01:13:27.985 --> 01:13:29.825
<v Speaker 0>Pokemon captured true.

01:13:35.190 --> 01:13:37.430
<v Speaker 1>The the k. Go scroll down to your

01:13:37.430 --> 01:13:38.390
<v Speaker 1>history, I guess.

01:13:40.070 --> 01:13:42.070
<v Speaker 1>One of the filters work. The first first

01:13:42.070 --> 01:13:43.190
<v Speaker 1>filter. Yeah.

01:13:44.710 --> 01:13:46.630
<v Speaker 1>Click on it, and you should click run.

01:13:47.510 --> 01:13:49.350
<v Speaker 1>Scroll up. Click on it and click run.

01:13:49.965 --> 01:13:51.724
<v Speaker 1>No. No. Don't yeah.

01:13:53.645 --> 01:13:54.604
<v Speaker 1>There

01:13:55.005 --> 01:13:57.165
<v Speaker 1>you go. I'm

01:13:57.165 --> 01:13:59.244
<v Speaker 0>making things difficult for myself. Okay. There's a

01:13:59.244 --> 01:14:02.124
<v Speaker 0>way that that's nice. I I like this

01:14:02.125 --> 01:14:04.950
<v Speaker 0>this slash interface with, you know, the clicky

01:14:04.950 --> 01:14:06.470
<v Speaker 0>bits. It makes it just a lot a

01:14:06.470 --> 01:14:08.470
<v Speaker 0>little bit easier. And I actually really enjoyed

01:14:08.470 --> 01:14:10.470
<v Speaker 0>that. But if we were to rebuild that

01:14:10.470 --> 01:14:11.830
<v Speaker 0>query, right, if I were just to say

01:14:11.830 --> 01:14:12.630
<v Speaker 0>show me

01:14:13.110 --> 01:14:15.030
<v Speaker 0>captured, I can even just do the filter

01:14:15.030 --> 01:14:16.710
<v Speaker 0>through this. Yeah. You can do the filter

01:14:16.710 --> 01:14:17.430
<v Speaker 1>on on

01:14:17.990 --> 01:14:19.505
<v Speaker 0>So I can just say, get me captured

01:14:19.505 --> 01:14:21.985
<v Speaker 0>Pokemon. I want their ID, the image, their

01:14:21.985 --> 01:14:23.664
<v Speaker 0>name, and their types.

01:14:23.905 --> 01:14:25.105
<v Speaker 0>So go

01:14:27.344 --> 01:14:29.744
<v Speaker 1>Oh, you want to filter with captured false.

01:14:29.744 --> 01:14:30.065
<v Speaker 1>So

01:14:31.520 --> 01:14:32.800
<v Speaker 0>Oh, I could have changed it to here

01:14:32.800 --> 01:14:34.320
<v Speaker 0>too. Oh, I updated it there too as

01:14:34.320 --> 01:14:35.120
<v Speaker 0>well. Okay.

01:14:36.240 --> 01:14:38.160
<v Speaker 0>There we go. There you go.

01:14:38.720 --> 01:14:40.800
<v Speaker 0>And it cost me another credit, but you

01:14:40.800 --> 01:14:42.400
<v Speaker 0>know, I've got I've got plenty left. It's

01:14:42.400 --> 01:14:44.735
<v Speaker 0>not a big deal. Yeah. Yeah. So I

01:14:44.735 --> 01:14:47.054
<v Speaker 0>think that that's last tooling is really nice

01:14:47.054 --> 01:14:49.935
<v Speaker 0>and intuitive and just simplifies like, know, a

01:14:49.935 --> 01:14:51.295
<v Speaker 0>lot of people have your especially if you're

01:14:51.295 --> 01:14:53.934
<v Speaker 0>new to GraphQL and you wanna start experimenting

01:14:54.014 --> 01:14:55.135
<v Speaker 0>this workflow.

01:14:55.929 --> 01:14:58.010
<v Speaker 0>Is really nice. And I think it'll just

01:14:58.010 --> 01:15:00.650
<v Speaker 0>ease people into how they work and construct

01:15:00.650 --> 01:15:03.449
<v Speaker 0>their own GraphQL queries over time. Yeah. Very

01:15:03.449 --> 01:15:04.010
<v Speaker 0>cool.

01:15:05.050 --> 01:15:05.689
<v Speaker 0>Awesome.

01:15:06.170 --> 01:15:08.090
<v Speaker 0>Well, let me pop that away.

01:15:08.675 --> 01:15:10.915
<v Speaker 0>That's been a really cool look at Dgraph.

01:15:10.995 --> 01:15:12.515
<v Speaker 0>I can see a lot of power, lot

01:15:12.515 --> 01:15:14.675
<v Speaker 0>of flexibility. I love the fact that I,

01:15:14.675 --> 01:15:16.755
<v Speaker 0>you know, even as we were making stuff

01:15:16.755 --> 01:15:18.595
<v Speaker 0>up at the start about what our queries

01:15:18.595 --> 01:15:20.755
<v Speaker 0>were and what our schema was, it really

01:15:20.755 --> 01:15:22.275
<v Speaker 0>did give me the flexibility to go in

01:15:22.275 --> 01:15:24.690
<v Speaker 0>and add those indices retrospect, which I love.

01:15:24.690 --> 01:15:26.690
<v Speaker 0>Yeah. The the ability for me to manipulate

01:15:26.690 --> 01:15:28.770
<v Speaker 0>and change that schema. I think it's really

01:15:28.770 --> 01:15:30.370
<v Speaker 0>cool as well. Great.

01:15:31.250 --> 01:15:32.610
<v Speaker 0>I'm gonna have to keep playing with us.

01:15:32.610 --> 01:15:34.450
<v Speaker 0>I will definitely get something worked out for

01:15:34.450 --> 01:15:35.810
<v Speaker 0>next year where we can do this deeper

01:15:35.810 --> 01:15:38.770
<v Speaker 0>dive into DQL and more real world applications.

01:15:38.770 --> 01:15:40.185
<v Speaker 0>But I think it's an introduction. This is

01:15:40.185 --> 01:15:41.704
<v Speaker 0>fantastic. I just wanna say thank you for

01:15:41.704 --> 01:15:44.024
<v Speaker 0>staying up so late. No problems.

01:15:44.264 --> 01:15:45.465
<v Speaker 0>Now can I can I can I ask

01:15:45.465 --> 01:15:47.945
<v Speaker 1>for something? Sorry. Yeah. Of course. So so

01:15:47.945 --> 01:15:51.304
<v Speaker 1>there's a website called discuss.dgraph.io,

01:15:51.304 --> 01:15:53.370
<v Speaker 1>which is where the community lives. Most of

01:15:53.370 --> 01:15:54.969
<v Speaker 1>the questions are there.

01:15:55.530 --> 01:15:56.889
<v Speaker 1>If you if you if

01:15:57.210 --> 01:15:59.530
<v Speaker 1>you come to discuss.dgraph.io,

01:15:59.530 --> 01:16:01.690
<v Speaker 1>you ask a question, you're probably gonna get

01:16:01.690 --> 01:16:02.809
<v Speaker 1>an answer within

01:16:02.890 --> 01:16:05.770
<v Speaker 1>twenty four hours or so. It's quite active.

01:16:05.770 --> 01:16:06.249
<v Speaker 1>So

01:16:06.885 --> 01:16:07.525
<v Speaker 1>yeah.

01:16:07.845 --> 01:16:09.365
<v Speaker 1>You know you've got a problem, just pop

01:16:09.365 --> 01:16:12.485
<v Speaker 1>right in there. We're also running a conference,

01:16:12.485 --> 01:16:14.325
<v Speaker 1>like Go system conference, if you do Go

01:16:14.325 --> 01:16:15.045
<v Speaker 1>programming.

01:16:16.165 --> 01:16:16.885
<v Speaker 1>You know?

01:16:17.605 --> 01:16:20.005
<v Speaker 0>Go what's it called? I I don't know

01:16:20.005 --> 01:16:21.845
<v Speaker 1>the URL. Sorry. Systems.

01:16:22.170 --> 01:16:23.929
<v Speaker 1>So it's it's on the it's on the

01:16:23.929 --> 01:16:26.409
<v Speaker 1>front page of of the discuss.

01:16:27.929 --> 01:16:28.730
<v Speaker 1>There you go.

01:16:30.810 --> 01:16:32.330
<v Speaker 0>Oh, it's right there in front of my

01:16:32.330 --> 01:16:33.769
<v Speaker 0>face. Right. Yeah. Yeah.

01:16:34.330 --> 01:16:35.610
<v Speaker 0>There you go. So we can click on

01:16:36.435 --> 01:16:39.315
<v Speaker 1>yeah. Oh, that's an image. That's that's the

01:16:39.315 --> 01:16:40.195
<v Speaker 1>link. Yeah.

01:16:41.155 --> 01:16:44.594
<v Speaker 1>But, again, this this is really spooky stuff.

01:16:45.235 --> 01:16:45.874
<v Speaker 1>You know?

01:16:46.594 --> 01:16:48.195
<v Speaker 1>Yeah. It's online.

01:16:48.994 --> 01:16:50.275
<v Speaker 1>There are some really, really

01:16:51.390 --> 01:16:53.789
<v Speaker 1>cool speakers that we've landed. Yeah.

01:16:54.510 --> 01:16:57.310
<v Speaker 1>If you're into systems programming at all, check

01:16:57.310 --> 01:16:57.949
<v Speaker 1>it out.

01:16:58.670 --> 01:17:01.390
<v Speaker 0>Awesome. Okay. So, yeah, if you've got Dgraph

01:17:01.390 --> 01:17:03.085
<v Speaker 0>questions and you want some help, go to

01:17:03.085 --> 01:17:05.725
<v Speaker 0>the discourse forum at discuss.dgraph.io

01:17:05.725 --> 01:17:07.565
<v Speaker 0>and systemsconf.io

01:17:07.565 --> 01:17:10.284
<v Speaker 0>if you're interested in going systems programming.

01:17:10.765 --> 01:17:12.845
<v Speaker 0>Awesome. I'll get registered for that after this

01:17:12.845 --> 01:17:13.565
<v Speaker 0>episode.

01:17:14.365 --> 01:17:15.805
<v Speaker 0>That's the thing with like with all these

01:17:15.805 --> 01:17:17.885
<v Speaker 0>virtual conferences this year, there's been so many

01:17:17.885 --> 01:17:19.770
<v Speaker 0>of them. It's been fantastic that I could

01:17:19.770 --> 01:17:21.770
<v Speaker 0>just sit and watch so many conference talks

01:17:21.770 --> 01:17:22.570
<v Speaker 0>online.

01:17:22.730 --> 01:17:24.010
<v Speaker 0>Really,

01:17:25.050 --> 01:17:26.730
<v Speaker 0>it has downside as well and that there's

01:17:26.730 --> 01:17:28.250
<v Speaker 0>no too many technologies that I wanna go

01:17:28.250 --> 01:17:28.969
<v Speaker 0>play with.

01:17:29.370 --> 01:17:30.090
<v Speaker 0>Yeah. Know.

01:17:30.410 --> 01:17:31.850
<v Speaker 0>That's a good problem to have I think.

01:17:32.915 --> 01:17:34.595
<v Speaker 0>Alright. Thank you for that. And and thanks

01:17:34.595 --> 01:17:35.955
<v Speaker 0>again for staying up late. I know

01:17:36.835 --> 01:17:38.275
<v Speaker 1>It was a pleasure doing this. It was

01:17:38.275 --> 01:17:40.835
<v Speaker 1>fun. Quite fun. Yeah. Awesome. Then I look

01:17:40.835 --> 01:17:42.275
<v Speaker 0>forward to having you back. Have a a

01:17:42.275 --> 01:17:44.035
<v Speaker 0>great evening and I'll speak to you soon.

01:17:44.035 --> 01:17:45.795
<v Speaker 1>Have a good day. Thanks. Bye.
