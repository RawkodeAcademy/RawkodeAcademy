WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: c6eab04a-56a6-4199-b74e-f81195a16f2f
Created: 2025-04-29T15:26:39.731Z
Duration: 5966.722
Channels: 1

00:02:40.935 --> 00:02:41.735
<v Speaker 0>Hello,

00:02:41.815 --> 00:02:44.694
<v Speaker 0>and welcome back to the Rawkode Academy. My

00:02:44.694 --> 00:02:46.615
<v Speaker 0>name is David Flanagan, I am your host

00:02:46.615 --> 00:02:49.060
<v Speaker 0>for today on this episode of Rawkode Live.

00:02:49.060 --> 00:02:50.660
<v Speaker 0>Rawkode Live is a show where we take

00:02:50.660 --> 00:02:52.500
<v Speaker 0>a look at all the best open source

00:02:52.500 --> 00:02:55.060
<v Speaker 0>tools and technologies solving real world problems in

00:02:55.060 --> 00:02:57.540
<v Speaker 0>the cloud native and Kubernetes ecosystem.

00:02:58.100 --> 00:02:58.980
<v Speaker 0>And today,

00:02:59.140 --> 00:03:00.660
<v Speaker 0>we are taking a look at something I'm

00:03:00.660 --> 00:03:03.225
<v Speaker 0>very excited to play with, Namespace.

00:03:03.465 --> 00:03:06.105
<v Speaker 0>Joining us today to introduce us to Namespace

00:03:06.105 --> 00:03:06.825
<v Speaker 0>is

00:03:08.265 --> 00:03:11.465
<v Speaker 0>Hugo. Hey, Hugo. How's it going? Hey, David.

00:03:11.465 --> 00:03:14.025
<v Speaker 1>It's going great. Apart from the fact that

00:03:14.025 --> 00:03:15.625
<v Speaker 1>they've been a little bit under the weather,

00:03:15.625 --> 00:03:17.625
<v Speaker 1>we had a you know, kids were sick,

00:03:18.080 --> 00:03:20.800
<v Speaker 1>then I'm sick. It just goes around.

00:03:21.600 --> 00:03:24.560
<v Speaker 1>But it's actually a great time right now

00:03:24.960 --> 00:03:26.320
<v Speaker 1>and just getting into

00:03:26.480 --> 00:03:28.320
<v Speaker 1>past fall and into winter.

00:03:29.120 --> 00:03:30.480
<v Speaker 1>And every day is

00:03:31.840 --> 00:03:34.435
<v Speaker 1>actually super exciting about seeing started to talk

00:03:34.435 --> 00:03:36.034
<v Speaker 1>a little bit about what we're doing and

00:03:36.034 --> 00:03:38.115
<v Speaker 1>and getting people engaging with the product. So

00:03:38.194 --> 00:03:40.995
<v Speaker 1>super excited about that. Awesome. Well, I'm very

00:03:40.995 --> 00:03:42.594
<v Speaker 0>excited to sit down and spend some time

00:03:42.594 --> 00:03:45.075
<v Speaker 0>with you today, learning more, kicking tires and

00:03:45.075 --> 00:03:47.555
<v Speaker 0>having some fun. And I will also just

00:03:47.920 --> 00:03:50.400
<v Speaker 0>segue and confirm what you said. Yeah. When

00:03:50.400 --> 00:03:52.000
<v Speaker 0>my kids get sick, I am sick the

00:03:52.000 --> 00:03:54.239
<v Speaker 0>following two days afterwards. And then it seems

00:03:54.239 --> 00:03:55.920
<v Speaker 0>to be on this wild loop. Someone in

00:03:55.920 --> 00:03:57.680
<v Speaker 0>their school gets sick. They get sick. I

00:03:57.680 --> 00:03:59.200
<v Speaker 0>get sick. My wife gets sick and I'm

00:03:59.200 --> 00:04:01.615
<v Speaker 0>look, look, look. I feel that pain.

00:04:03.295 --> 00:04:04.975
<v Speaker 0>Alright, awesome. So

00:04:05.695 --> 00:04:06.735
<v Speaker 0>before we

00:04:07.375 --> 00:04:08.815
<v Speaker 0>talk about namespace,

00:04:08.815 --> 00:04:10.255
<v Speaker 0>do you want to share a little bit

00:04:10.255 --> 00:04:12.815
<v Speaker 0>more information about you who you are, what

00:04:12.815 --> 00:04:15.010
<v Speaker 0>you're up to? Just give us the who

00:04:15.010 --> 00:04:16.290
<v Speaker 0>who is Hugo.

00:04:17.089 --> 00:04:17.730
<v Speaker 1>Yeah.

00:04:18.050 --> 00:04:20.050
<v Speaker 1>You know, I and it's actually thank you

00:04:20.050 --> 00:04:22.370
<v Speaker 1>for the opportunity. It's really exciting to to

00:04:22.370 --> 00:04:24.290
<v Speaker 1>spend some time with you and and your

00:04:24.290 --> 00:04:24.930
<v Speaker 1>audience.

00:04:25.410 --> 00:04:27.410
<v Speaker 1>I've been living in a cave for many

00:04:27.410 --> 00:04:29.384
<v Speaker 1>years and and I'm

00:04:29.384 --> 00:04:31.625
<v Speaker 1>living that cave now and it's actually very

00:04:31.625 --> 00:04:34.345
<v Speaker 1>exciting. But but the story starts early. I

00:04:34.504 --> 00:04:35.785
<v Speaker 1>I'm a software engineer

00:04:35.865 --> 00:04:38.264
<v Speaker 1>at heart and I've been I've been thinking

00:04:38.264 --> 00:04:40.185
<v Speaker 1>about software and and working on software for

00:04:40.185 --> 00:04:41.064
<v Speaker 1>as long as I remember.

00:04:42.240 --> 00:04:44.400
<v Speaker 1>When I was 15, I sold my first

00:04:44.400 --> 00:04:47.760
<v Speaker 1>piece of software that I wrote for BOS.

00:04:48.400 --> 00:04:49.600
<v Speaker 1>And Wow.

00:04:50.720 --> 00:04:52.480
<v Speaker 1>Trying really hard to make that my main

00:04:52.480 --> 00:04:54.800
<v Speaker 1>operating system after a stint. Like, my first

00:04:55.305 --> 00:04:57.384
<v Speaker 1>system was Windows and spent some time on

00:04:57.384 --> 00:05:00.425
<v Speaker 1>Linux. Red Hat 5.2 was my first distribution.

00:05:00.824 --> 00:05:04.425
<v Speaker 1>Then then tried to do kinda run macOS

00:05:04.425 --> 00:05:05.225
<v Speaker 1>eight

00:05:05.544 --> 00:05:06.745
<v Speaker 1>fully emulated.

00:05:07.225 --> 00:05:09.990
<v Speaker 1>It's it's because I really wanted to run

00:05:09.990 --> 00:05:12.470
<v Speaker 1>a Mac and then, moved over to POS,

00:05:12.470 --> 00:05:14.470
<v Speaker 1>which was the kind of closest thing. And

00:05:14.470 --> 00:05:15.990
<v Speaker 1>I that was kind of part of my

00:05:15.990 --> 00:05:18.790
<v Speaker 1>journey just exploring, figuring out things by by

00:05:18.790 --> 00:05:19.510
<v Speaker 1>myself.

00:05:20.150 --> 00:05:23.030
<v Speaker 1>Then later on college, spent a lot of

00:05:23.030 --> 00:05:26.145
<v Speaker 1>time on open source, very focused on

00:05:26.544 --> 00:05:27.345
<v Speaker 1>networking

00:05:27.345 --> 00:05:29.104
<v Speaker 1>and networking infrastructure

00:05:29.104 --> 00:05:30.385
<v Speaker 1>and authentication

00:05:30.385 --> 00:05:32.385
<v Speaker 1>and these types of challenges, which I still

00:05:32.385 --> 00:05:32.865
<v Speaker 1>have

00:05:33.264 --> 00:05:35.824
<v Speaker 1>a a passion for, although I don't spend

00:05:35.824 --> 00:05:37.104
<v Speaker 1>as much time there nowadays.

00:05:38.790 --> 00:05:39.510
<v Speaker 1>And

00:05:40.870 --> 00:05:42.950
<v Speaker 1>college was was done then kind of did

00:05:42.950 --> 00:05:45.350
<v Speaker 1>a regular job as as many of us

00:05:45.350 --> 00:05:47.670
<v Speaker 1>do and but then the I started getting

00:05:47.670 --> 00:05:50.630
<v Speaker 1>a hitch of of of wanting to start

00:05:50.630 --> 00:05:52.070
<v Speaker 1>something by myself and

00:05:52.365 --> 00:05:55.085
<v Speaker 1>and move over to Finland. I'm originally from

00:05:55.085 --> 00:05:55.805
<v Speaker 1>Portugal.

00:05:55.965 --> 00:05:58.044
<v Speaker 1>I had moved to Germany to

00:05:58.205 --> 00:06:00.044
<v Speaker 1>to move to The to kind of for

00:06:00.044 --> 00:06:01.324
<v Speaker 1>my first job, and then I moved to

00:06:01.324 --> 00:06:05.005
<v Speaker 1>Finland to start the company. This was 02/2010

00:06:05.005 --> 00:06:05.485
<v Speaker 1>doing,

00:06:06.230 --> 00:06:08.470
<v Speaker 1>well, kind of edge computing. Before edge computing

00:06:08.470 --> 00:06:11.110
<v Speaker 1>was really a thing, we were streaming smartphone

00:06:11.110 --> 00:06:12.310
<v Speaker 1>like experiences

00:06:12.550 --> 00:06:14.550
<v Speaker 1>to feature phones. And it was

00:06:15.190 --> 00:06:16.390
<v Speaker 1>a great time,

00:06:17.830 --> 00:06:19.755
<v Speaker 1>not not because of the point in time.

00:06:19.755 --> 00:06:22.075
<v Speaker 1>02/2010 was really after a recession, so probably

00:06:22.075 --> 00:06:24.075
<v Speaker 1>one of the worst times to start the

00:06:24.075 --> 00:06:24.715
<v Speaker 1>company,

00:06:25.035 --> 00:06:26.555
<v Speaker 1>but, like, putting

00:06:26.875 --> 00:06:29.115
<v Speaker 1>together a team and and just working on

00:06:29.115 --> 00:06:31.515
<v Speaker 1>the technology was was really exciting.

00:06:32.155 --> 00:06:33.595
<v Speaker 1>But we couldn't make the business work.

00:06:34.319 --> 00:06:36.400
<v Speaker 1>So a couple years later, we

00:06:37.280 --> 00:06:39.199
<v Speaker 1>kind of the company got transformed,

00:06:39.199 --> 00:06:41.680
<v Speaker 1>and it was bought by Facebook. But just

00:06:41.680 --> 00:06:45.360
<v Speaker 1>before that, I Google had been asking me,

00:06:45.360 --> 00:06:46.479
<v Speaker 1>hey. Do you want a guy do you

00:06:46.479 --> 00:06:48.000
<v Speaker 1>wanna come and and spend some time with

00:06:48.000 --> 00:06:49.680
<v Speaker 1>us? I I had a couple friends there,

00:06:49.680 --> 00:06:51.735
<v Speaker 1>and I said, why not? So I I

00:06:51.735 --> 00:06:53.975
<v Speaker 1>moved to Switzerland where I've been since now

00:06:53.975 --> 00:06:55.575
<v Speaker 1>it's been almost ten years.

00:06:55.975 --> 00:06:59.335
<v Speaker 1>And at Google, I I worked on I

00:06:59.574 --> 00:07:01.655
<v Speaker 1>I've always worked on software infrastructure.

00:07:02.134 --> 00:07:04.860
<v Speaker 1>Actually, I tried to stint at consumer, but

00:07:04.860 --> 00:07:07.500
<v Speaker 1>almost next day, I was back at, hey,

00:07:07.500 --> 00:07:09.260
<v Speaker 1>guys. Have you seen this infrastructure

00:07:09.260 --> 00:07:10.460
<v Speaker 1>problem that we have?

00:07:11.580 --> 00:07:13.420
<v Speaker 1>And and, yeah, at Google, I had kind

00:07:13.420 --> 00:07:15.580
<v Speaker 1>of two major journeys. One was building

00:07:16.700 --> 00:07:19.455
<v Speaker 1>or helping to build Google's internal development platform

00:07:19.455 --> 00:07:21.695
<v Speaker 1>or application platform called Bock,

00:07:21.935 --> 00:07:24.335
<v Speaker 1>which, unfortunately, we never really spent a lot

00:07:24.335 --> 00:07:26.095
<v Speaker 1>of time talking about it externally.

00:07:26.495 --> 00:07:28.575
<v Speaker 1>We we'll we'll get back with, I guess,

00:07:28.575 --> 00:07:31.190
<v Speaker 1>a little bit later. And, and then as

00:07:31.190 --> 00:07:33.509
<v Speaker 1>part of kind of helping the company move

00:07:33.509 --> 00:07:34.550
<v Speaker 1>over to Bock,

00:07:35.350 --> 00:07:37.110
<v Speaker 1>I I got to work with search, and

00:07:37.110 --> 00:07:38.870
<v Speaker 1>I got really passionate about search. So I

00:07:38.870 --> 00:07:41.430
<v Speaker 1>joined the the search team and, in particular,

00:07:41.430 --> 00:07:43.270
<v Speaker 1>the assistant team that works on all the

00:07:43.270 --> 00:07:44.710
<v Speaker 1>kinda smart devices,

00:07:44.789 --> 00:07:47.044
<v Speaker 1>like speakers and displays and other things. So

00:07:47.044 --> 00:07:48.645
<v Speaker 1>I helped build kind of the infrastructure and

00:07:48.645 --> 00:07:51.285
<v Speaker 1>the platform for for that organization as well.

00:07:51.525 --> 00:07:53.445
<v Speaker 1>And after those two, I I really was

00:07:53.445 --> 00:07:55.685
<v Speaker 1>craving kind of going back to

00:07:56.405 --> 00:07:58.245
<v Speaker 1>to my kind of startup roots, if you

00:07:58.245 --> 00:08:00.830
<v Speaker 1>can call them that. And and I I

00:08:00.830 --> 00:08:03.150
<v Speaker 1>I left the company last year,

00:08:04.110 --> 00:08:07.710
<v Speaker 1>and I it's was a tremendous experience. But

00:08:08.030 --> 00:08:10.110
<v Speaker 1>I I wanted to start something from scratch,

00:08:10.110 --> 00:08:11.870
<v Speaker 1>and I was going back to actually some

00:08:11.870 --> 00:08:13.790
<v Speaker 1>of those kinda early infrastructure

00:08:14.805 --> 00:08:15.605
<v Speaker 1>ideas,

00:08:15.605 --> 00:08:17.445
<v Speaker 1>and I was playing around with some soft

00:08:18.005 --> 00:08:21.125
<v Speaker 1>software defined storage. That's another passion of mine.

00:08:21.525 --> 00:08:24.085
<v Speaker 1>And as I was building that, I I

00:08:24.085 --> 00:08:25.925
<v Speaker 1>got to experience a lot of the challenges

00:08:25.925 --> 00:08:27.930
<v Speaker 1>that then I got to learn that a

00:08:27.930 --> 00:08:30.810
<v Speaker 1>lot of folks, do do experience as well.

00:08:30.810 --> 00:08:33.370
<v Speaker 1>Like, okay. I need I have the GoControl

00:08:33.370 --> 00:08:35.450
<v Speaker 1>plane. What's what's the best way for me

00:08:35.450 --> 00:08:37.450
<v Speaker 1>to do kind of incremental builds? Or I

00:08:37.450 --> 00:08:40.730
<v Speaker 1>have multiple services, and they need to authenticate,

00:08:40.890 --> 00:08:42.570
<v Speaker 1>with each other what's kind of the right

00:08:42.570 --> 00:08:43.290
<v Speaker 1>way to do that,

00:08:44.385 --> 00:08:46.625
<v Speaker 1>and what's kind of the right deployment strategy.

00:08:46.625 --> 00:08:48.385
<v Speaker 1>So this whole life

00:08:48.385 --> 00:08:51.985
<v Speaker 1>cycle of going from code into having something

00:08:51.985 --> 00:08:52.785
<v Speaker 1>meaningful

00:08:53.505 --> 00:08:54.785
<v Speaker 1>running in production,

00:08:55.024 --> 00:08:56.385
<v Speaker 1>I was finding myself

00:08:57.024 --> 00:08:58.225
<v Speaker 1>answering those questions

00:08:58.930 --> 00:09:00.370
<v Speaker 1>like, kinda on a on a case by

00:09:00.370 --> 00:09:01.330
<v Speaker 1>case basis.

00:09:01.490 --> 00:09:03.330
<v Speaker 1>And I thought there must be a better

00:09:03.330 --> 00:09:05.090
<v Speaker 1>way. And and, actually, I got to learn

00:09:05.090 --> 00:09:07.010
<v Speaker 1>about a lot of good technology that is

00:09:07.010 --> 00:09:07.730
<v Speaker 1>out there,

00:09:08.210 --> 00:09:09.810
<v Speaker 1>but we we feel like

00:09:11.075 --> 00:09:12.915
<v Speaker 1>that there's more that we can do to

00:09:12.915 --> 00:09:16.115
<v Speaker 1>really help, ourselves, actually, first and foremost,

00:09:16.275 --> 00:09:18.915
<v Speaker 1>but then a broader set of of developer

00:09:18.915 --> 00:09:19.715
<v Speaker 1>teams,

00:09:20.115 --> 00:09:22.675
<v Speaker 1>to to just go well, go faster,

00:09:23.250 --> 00:09:25.970
<v Speaker 1>and and have the confidence that you're building

00:09:25.970 --> 00:09:27.570
<v Speaker 1>kind of on a world class

00:09:27.890 --> 00:09:30.210
<v Speaker 1>platform or infrastructure, and you can focus on

00:09:30.210 --> 00:09:31.970
<v Speaker 1>your application. So that gets us to Namespace

00:09:31.970 --> 00:09:32.850
<v Speaker 1>we're at today.

00:09:33.570 --> 00:09:36.225
<v Speaker 0>Awesome. Thank you for sharing. I'll go back

00:09:36.225 --> 00:09:37.505
<v Speaker 0>to the first thing you said, which is

00:09:37.505 --> 00:09:39.905
<v Speaker 0>you're a software developer at heart. That's why

00:09:39.905 --> 00:09:41.425
<v Speaker 0>I describe myself these days because I never

00:09:41.425 --> 00:09:43.345
<v Speaker 0>get to actually write any software anymore.

00:09:45.185 --> 00:09:46.225
<v Speaker 0>So

00:09:46.305 --> 00:09:47.585
<v Speaker 0>it says, you know, you've got a lot

00:09:47.585 --> 00:09:49.870
<v Speaker 0>of experience having worked on search, the assistant

00:09:49.870 --> 00:09:51.709
<v Speaker 0>and for such a problems at Google, signing

00:09:51.709 --> 00:09:54.430
<v Speaker 0>a company like that is a lot of

00:09:54.430 --> 00:09:58.269
<v Speaker 0>things over many years. And I'm hoping that

00:09:58.269 --> 00:10:00.350
<v Speaker 0>what we're gonna look at today with

00:10:01.790 --> 00:10:02.670
<v Speaker 0>Namespace

00:10:02.915 --> 00:10:04.515
<v Speaker 0>as you condensing

00:10:04.515 --> 00:10:06.275
<v Speaker 0>these many years of

00:10:06.515 --> 00:10:10.435
<v Speaker 0>pains, failures, experience and challenging things into something

00:10:10.435 --> 00:10:12.835
<v Speaker 0>that's really gonna resonate with our audience today.

00:10:12.835 --> 00:10:14.995
<v Speaker 0>So when real world problems that a lot

00:10:14.995 --> 00:10:16.035
<v Speaker 0>of people face during this,

00:10:17.779 --> 00:10:20.420
<v Speaker 0>I don't know, epidemic of Kubernetes adoption. I

00:10:20.420 --> 00:10:22.340
<v Speaker 0>don't know. Like, is it a pandemic?

00:10:22.740 --> 00:10:24.500
<v Speaker 0>Like we see a lot of traction towards

00:10:24.500 --> 00:10:26.820
<v Speaker 0>Kubernetes. This right. It's now almost the ubiquitous

00:10:26.820 --> 00:10:29.620
<v Speaker 0>way to build and run applications at scale.

00:10:30.185 --> 00:10:32.024
<v Speaker 0>Even for people that aren't at scale, which

00:10:32.024 --> 00:10:33.385
<v Speaker 0>I see even more of now than people

00:10:33.385 --> 00:10:36.745
<v Speaker 0>at proper scale. However, Kubernetes as that API

00:10:36.745 --> 00:10:38.505
<v Speaker 0>that keeps us cloud agnostic to a certain

00:10:38.505 --> 00:10:40.904
<v Speaker 0>degree, but it comes with many, many, many

00:10:40.904 --> 00:10:41.625
<v Speaker 0>challenges.

00:10:41.945 --> 00:10:44.200
<v Speaker 0>And one of them, it's what we're gonna

00:10:44.200 --> 00:10:46.200
<v Speaker 0>talk about today. It's like, how do we

00:10:46.200 --> 00:10:50.120
<v Speaker 0>get that joyful developer experience and deployment pipeline

00:10:50.120 --> 00:10:50.760
<v Speaker 0>back.

00:10:51.240 --> 00:10:53.320
<v Speaker 0>So I wanna I wanna learn. I wanna

00:10:53.320 --> 00:10:54.840
<v Speaker 0>take all this experience out of your head

00:10:54.840 --> 00:10:56.360
<v Speaker 0>and I wanna see a really cool product

00:10:56.360 --> 00:10:57.720
<v Speaker 0>today. That that's our mission.

00:10:59.045 --> 00:10:59.925
<v Speaker 1>Sounds great.

00:11:00.565 --> 00:11:02.965
<v Speaker 1>And and for it's worth, we we we're

00:11:02.965 --> 00:11:06.805
<v Speaker 1>actually very inspired by by not just Kubernetes,

00:11:06.805 --> 00:11:08.565
<v Speaker 1>the technology, but by the the kind of

00:11:08.565 --> 00:11:09.685
<v Speaker 1>the ecosystem around it.

00:11:10.769 --> 00:11:13.490
<v Speaker 1>A tremendous amount of respect for for what,

00:11:14.209 --> 00:11:16.050
<v Speaker 1>like, so many people have worked and and

00:11:16.050 --> 00:11:16.930
<v Speaker 1>put together.

00:11:17.810 --> 00:11:20.450
<v Speaker 1>But, yeah, like, approaching it from from

00:11:21.089 --> 00:11:22.930
<v Speaker 1>I just want to get my application out

00:11:22.930 --> 00:11:25.170
<v Speaker 1>there, and I want to use this infrastructure

00:11:25.170 --> 00:11:26.505
<v Speaker 1>for my benefit. Benefit.

00:11:27.145 --> 00:11:29.385
<v Speaker 1>Like, I want to benefit from this ecosystem,

00:11:29.385 --> 00:11:30.985
<v Speaker 1>from this Kubernetes ecosystem,

00:11:31.305 --> 00:11:32.985
<v Speaker 1>but not having to make that my full

00:11:32.985 --> 00:11:35.065
<v Speaker 1>time job of, actually, how do I make

00:11:35.065 --> 00:11:37.145
<v Speaker 1>this work for me? That's that's really part

00:11:37.145 --> 00:11:39.620
<v Speaker 1>of what we're what we're about. Like and

00:11:39.620 --> 00:11:41.459
<v Speaker 1>and we'll learn that, obviously, you need to

00:11:41.459 --> 00:11:42.899
<v Speaker 1>make certain trade offs on the way, and

00:11:42.899 --> 00:11:44.899
<v Speaker 1>we'll talk a little bit, hopefully about those.

00:11:44.899 --> 00:11:45.140
<v Speaker 1>But,

00:11:45.860 --> 00:11:49.300
<v Speaker 1>but we care deeply about this application centric,

00:11:50.019 --> 00:11:52.180
<v Speaker 1>philosophy that builds on great infrastructure.

00:11:53.695 --> 00:11:55.375
<v Speaker 0>Awesome. It looks like we have one of

00:11:55.375 --> 00:11:57.214
<v Speaker 0>your colleagues in the chat. Happy to help

00:11:57.214 --> 00:12:00.095
<v Speaker 0>with questions as well. Carol. Hello, Carol. Nice

00:12:00.095 --> 00:12:00.815
<v Speaker 0>to meet you.

00:12:02.175 --> 00:12:03.855
<v Speaker 0>Alright. Let's

00:12:03.855 --> 00:12:05.935
<v Speaker 0>give everybody a little bit of an overview

00:12:05.935 --> 00:12:07.935
<v Speaker 0>on our namespace today. What are we going

00:12:07.935 --> 00:12:09.240
<v Speaker 0>to be taking a look at? What problems

00:12:09.240 --> 00:12:10.600
<v Speaker 0>does it wanna solve? And how is it

00:12:10.600 --> 00:12:12.600
<v Speaker 0>different from other tools in the space? I'll

00:12:12.600 --> 00:12:14.600
<v Speaker 0>let you answer them in whatever order you

00:12:14.600 --> 00:12:15.800
<v Speaker 0>want. Go nuts.

00:12:16.600 --> 00:12:20.600
<v Speaker 1>Yeah. Let me preface by we're we're early.

00:12:20.600 --> 00:12:22.360
<v Speaker 1>Like, we we know we're we're at the

00:12:22.360 --> 00:12:24.200
<v Speaker 1>beginning of a journey. Like, we have

00:12:25.335 --> 00:12:27.415
<v Speaker 1>we have an idea of where we're going

00:12:27.655 --> 00:12:30.295
<v Speaker 1>based on both our our experience as software

00:12:30.295 --> 00:12:33.095
<v Speaker 1>engineers ourselves and and kind of building applications,

00:12:33.575 --> 00:12:35.575
<v Speaker 1>but but also what we've been learning from

00:12:35.575 --> 00:12:37.575
<v Speaker 1>from folks in different companies. But

00:12:38.610 --> 00:12:41.250
<v Speaker 1>you you'll hear a snapshot that makes sense

00:12:41.330 --> 00:12:44.690
<v Speaker 1>for us today, but I it is likely

00:12:44.690 --> 00:12:46.530
<v Speaker 1>that as we go over time, it that

00:12:46.530 --> 00:12:49.250
<v Speaker 1>that story will also shift. But where we

00:12:49.250 --> 00:12:50.450
<v Speaker 1>are today is

00:12:50.885 --> 00:12:53.125
<v Speaker 1>and and what folks can already try, is

00:12:53.125 --> 00:12:55.365
<v Speaker 1>that we have a alpha version of an

00:12:55.365 --> 00:12:56.805
<v Speaker 1>application platform.

00:12:57.045 --> 00:12:58.965
<v Speaker 1>We call it an end to end application

00:12:58.965 --> 00:13:01.525
<v Speaker 1>platform that builds on Kubernetes. It's end to

00:13:01.525 --> 00:13:04.885
<v Speaker 1>end because it focuses on your whole development

00:13:04.885 --> 00:13:06.165
<v Speaker 1>experience, not just

00:13:06.699 --> 00:13:09.180
<v Speaker 1>kind of building, not just testing, not just

00:13:09.180 --> 00:13:10.139
<v Speaker 1>deployment,

00:13:10.139 --> 00:13:12.620
<v Speaker 1>but but how do these three things kinda

00:13:12.620 --> 00:13:14.540
<v Speaker 1>work together so that you can just write

00:13:14.540 --> 00:13:15.260
<v Speaker 1>code

00:13:15.420 --> 00:13:18.139
<v Speaker 1>and kinda compose infrastructure and ship it to

00:13:18.139 --> 00:13:18.459
<v Speaker 1>production

00:13:19.385 --> 00:13:21.225
<v Speaker 1>without having to kind of on the way

00:13:21.225 --> 00:13:22.345
<v Speaker 1>go and figure out,

00:13:22.665 --> 00:13:25.865
<v Speaker 1>kind of individual parts of the story. So

00:13:25.865 --> 00:13:26.825
<v Speaker 1>Namespace

00:13:26.825 --> 00:13:29.945
<v Speaker 1>is it kind of facilitates you. It kinda

00:13:29.945 --> 00:13:31.785
<v Speaker 1>helps you build your application.

00:13:32.345 --> 00:13:34.980
<v Speaker 1>It helps you build an application that is

00:13:34.980 --> 00:13:37.620
<v Speaker 1>composed of multiple services, but it's really up

00:13:37.620 --> 00:13:39.380
<v Speaker 1>to you of how many services those those

00:13:39.380 --> 00:13:41.300
<v Speaker 1>are. It helps you whether you're in a

00:13:41.300 --> 00:13:43.940
<v Speaker 1>single repository or multiple repositories. So it takes

00:13:43.940 --> 00:13:45.699
<v Speaker 1>all of these kind of real world problems

00:13:45.699 --> 00:13:47.300
<v Speaker 1>that folks are are facing

00:13:47.540 --> 00:13:49.300
<v Speaker 1>and and tries to package it in a

00:13:49.755 --> 00:13:50.715
<v Speaker 1>developer

00:13:50.715 --> 00:13:52.075
<v Speaker 1>experience centric

00:13:53.835 --> 00:13:54.955
<v Speaker 1>platform that

00:13:55.435 --> 00:13:57.755
<v Speaker 1>brings you build. So you can you you

00:13:57.755 --> 00:13:59.675
<v Speaker 1>can you work with code, and we build

00:13:59.675 --> 00:14:00.795
<v Speaker 1>images for you.

00:14:01.515 --> 00:14:03.995
<v Speaker 1>It brings you testing so you can both

00:14:03.995 --> 00:14:06.500
<v Speaker 1>do you know, more constrained testing, but it

00:14:06.500 --> 00:14:08.420
<v Speaker 1>also allows you to do, like, whole what

00:14:08.420 --> 00:14:11.300
<v Speaker 1>we call old system testing. So actually replicating

00:14:11.700 --> 00:14:14.500
<v Speaker 1>production like stack for for testing purposes. And

00:14:14.500 --> 00:14:16.820
<v Speaker 1>then you can also ship that code that

00:14:16.820 --> 00:14:18.900
<v Speaker 1>you've been writing and that we built

00:14:19.220 --> 00:14:20.020
<v Speaker 1>to production.

00:14:20.795 --> 00:14:24.635
<v Speaker 1>And it does that exclusively over Kubernetes today.

00:14:24.795 --> 00:14:27.514
<v Speaker 1>And the experience we're aiming for we're aiming

00:14:27.514 --> 00:14:29.755
<v Speaker 1>for an experience that is much more like

00:14:29.995 --> 00:14:33.274
<v Speaker 1>Docker Compose, which like, tremendous amount of respect

00:14:33.274 --> 00:14:35.035
<v Speaker 1>for Docker has been kinda instrumental in the

00:14:35.035 --> 00:14:35.355
<v Speaker 1>industry,

00:14:36.509 --> 00:14:38.750
<v Speaker 1>but but it's not confined to development. It

00:14:38.750 --> 00:14:41.950
<v Speaker 1>actually goes all the way to fairly complex

00:14:42.269 --> 00:14:44.589
<v Speaker 1>scenarios as well. And,

00:14:45.870 --> 00:14:47.310
<v Speaker 1>yeah, that's that's a little bit of of

00:14:47.310 --> 00:14:48.110
<v Speaker 1>of what we're about.

00:14:49.204 --> 00:14:50.005
<v Speaker 0>Awesome.

00:14:50.644 --> 00:14:52.884
<v Speaker 0>Alright. Naveen asking in the comments. Are we

00:14:52.884 --> 00:14:54.165
<v Speaker 0>going to just talk? Are we going to

00:14:54.165 --> 00:14:56.084
<v Speaker 0>show a demo? Of course, we're gonna do

00:14:56.084 --> 00:14:57.845
<v Speaker 0>a demo, Naveen. Come on.

00:14:58.245 --> 00:14:59.925
<v Speaker 0>This is the hands on show. We don't

00:14:59.925 --> 00:15:01.125
<v Speaker 0>we don't just talk.

00:15:02.324 --> 00:15:02.565
<v Speaker 0>So

00:15:03.879 --> 00:15:06.120
<v Speaker 0>let's just cover a couple more questions and

00:15:06.120 --> 00:15:08.040
<v Speaker 0>then we will jump over to the demo

00:15:08.040 --> 00:15:09.079
<v Speaker 0>and we'll take a look at it in

00:15:09.079 --> 00:15:09.720
<v Speaker 0>action.

00:15:12.040 --> 00:15:12.680
<v Speaker 0>Why

00:15:14.199 --> 00:15:16.295
<v Speaker 0>why do we need a new tool for

00:15:16.295 --> 00:15:16.855
<v Speaker 0>this?

00:15:17.975 --> 00:15:20.695
<v Speaker 0>Like, I don't that's not a disparaging comment.

00:15:20.695 --> 00:15:23.415
<v Speaker 0>It's kind of a passing question. I

00:15:24.055 --> 00:15:25.895
<v Speaker 0>remember speaking to Brian Grant

00:15:26.615 --> 00:15:27.575
<v Speaker 0>at Google,

00:15:27.975 --> 00:15:30.774
<v Speaker 0>about the saturation of this marketplace,

00:15:31.250 --> 00:15:33.330
<v Speaker 0>And not that saturated with

00:15:34.770 --> 00:15:36.770
<v Speaker 0>I think he said there were over 400

00:15:36.770 --> 00:15:38.690
<v Speaker 0>or 500 tools in the spreadsheet that he's

00:15:38.690 --> 00:15:41.170
<v Speaker 0>got for different tools all deployed to Kubernetes.

00:15:41.490 --> 00:15:43.890
<v Speaker 0>And I think that is kind of an

00:15:43.890 --> 00:15:47.425
<v Speaker 0>affirming position because clearly deploying to Kubernetes is

00:15:47.425 --> 00:15:49.025
<v Speaker 0>a bit of a challenge. We don't have

00:15:49.025 --> 00:15:50.945
<v Speaker 0>500 different tools for the sake of having

00:15:50.945 --> 00:15:52.945
<v Speaker 0>500 different tools. I think we have 500

00:15:52.945 --> 00:15:54.225
<v Speaker 0>different tools because

00:15:54.705 --> 00:15:57.505
<v Speaker 0>there's different opinions on what that pipeline, what

00:15:57.505 --> 00:16:01.025
<v Speaker 0>that process should look like. Yeah. I'm curious

00:16:01.025 --> 00:16:01.665
<v Speaker 0>what

00:16:02.420 --> 00:16:05.540
<v Speaker 0>Why Namespace? Why now? And why is it

00:16:05.540 --> 00:16:06.180
<v Speaker 0>different?

00:16:07.140 --> 00:16:08.980
<v Speaker 1>Yeah. That's a great question.

00:16:09.700 --> 00:16:12.100
<v Speaker 1>And I I won't pretend to

00:16:12.339 --> 00:16:14.420
<v Speaker 1>to to to say I won't I won't

00:16:14.420 --> 00:16:16.980
<v Speaker 1>say that there's like an exact answer to

00:16:16.335 --> 00:16:18.495
<v Speaker 1>it. I think part of the answer is,

00:16:20.175 --> 00:16:21.615
<v Speaker 1>we do have

00:16:21.855 --> 00:16:23.455
<v Speaker 1>first of all, well, we look at the

00:16:23.455 --> 00:16:26.175
<v Speaker 1>the the technology of these already out there.

00:16:26.175 --> 00:16:28.175
<v Speaker 1>It's great. And and I think folks have

00:16:28.175 --> 00:16:31.870
<v Speaker 1>been doing a great job at delivering individual

00:16:31.870 --> 00:16:34.990
<v Speaker 1>tools for individual problems that really nail those

00:16:34.990 --> 00:16:37.710
<v Speaker 1>problems really well. And that's great. Like, if

00:16:37.710 --> 00:16:39.470
<v Speaker 1>you want to do authentication,

00:16:39.470 --> 00:16:41.310
<v Speaker 1>you have a few different options out there.

00:16:41.310 --> 00:16:42.990
<v Speaker 1>They're really solid, and that's great.

00:16:43.645 --> 00:16:45.485
<v Speaker 1>But what what do we see kind of

00:16:45.485 --> 00:16:47.245
<v Speaker 1>over and over is that

00:16:48.045 --> 00:16:49.165
<v Speaker 1>many teams,

00:16:49.805 --> 00:16:51.965
<v Speaker 1>and and if you're an engineer in in

00:16:51.965 --> 00:16:53.965
<v Speaker 1>a in whether it's a startup or midsize

00:16:53.965 --> 00:16:56.125
<v Speaker 1>company or or whatever size company,

00:16:56.820 --> 00:16:59.380
<v Speaker 1>you're still it's still up to you to

00:16:59.380 --> 00:17:00.660
<v Speaker 1>kind of go and figure out how you

00:17:00.660 --> 00:17:03.540
<v Speaker 1>put those things together. And there are a

00:17:03.540 --> 00:17:05.780
<v Speaker 1>few approaches to it out there in the

00:17:05.780 --> 00:17:07.859
<v Speaker 1>industry. We believe that

00:17:08.524 --> 00:17:11.404
<v Speaker 1>something that kinda brings development

00:17:11.404 --> 00:17:15.005
<v Speaker 1>closer to production is is kind of instrumental

00:17:15.005 --> 00:17:17.804
<v Speaker 1>on not just from a technology perspective, but

00:17:17.804 --> 00:17:20.524
<v Speaker 1>also from how we work together. Like, I

00:17:20.524 --> 00:17:22.524
<v Speaker 1>think one of the interesting and and things

00:17:22.524 --> 00:17:24.890
<v Speaker 1>that I'm actually most proud of from from

00:17:24.890 --> 00:17:27.130
<v Speaker 1>my journey back at Google was kind of

00:17:27.130 --> 00:17:29.289
<v Speaker 1>to help kind of close a little bit

00:17:29.289 --> 00:17:31.690
<v Speaker 1>the gap between the development teams and the

00:17:31.690 --> 00:17:33.530
<v Speaker 1>SRE teams. Like, kind of each one lived

00:17:33.530 --> 00:17:34.570
<v Speaker 1>in their own world.

00:17:35.210 --> 00:17:37.289
<v Speaker 1>They have this shared kind of set of

00:17:37.289 --> 00:17:40.544
<v Speaker 1>concerns, but because of the technology space was

00:17:40.544 --> 00:17:42.865
<v Speaker 1>very separate, it also meant that they were

00:17:42.865 --> 00:17:44.705
<v Speaker 1>often talking different languages,

00:17:44.945 --> 00:17:47.825
<v Speaker 1>like human languages, like programming languages,

00:17:48.065 --> 00:17:50.225
<v Speaker 1>and and just just really con being concerned

00:17:50.225 --> 00:17:52.065
<v Speaker 1>about different things. And I think technology can

00:17:52.065 --> 00:17:52.784
<v Speaker 1>be an enabler

00:17:53.230 --> 00:17:55.549
<v Speaker 1>to kinda bring groups of people together.

00:17:56.269 --> 00:17:56.829
<v Speaker 1>And,

00:17:57.070 --> 00:17:58.909
<v Speaker 1>at the fur but but the most important

00:17:58.909 --> 00:18:00.350
<v Speaker 1>thing is that we care about the mission

00:18:00.350 --> 00:18:02.669
<v Speaker 1>more so than the technology. Like, the technology

00:18:02.669 --> 00:18:04.990
<v Speaker 1>that we're building is it we feel like

00:18:04.990 --> 00:18:06.269
<v Speaker 1>it fills a gap,

00:18:06.669 --> 00:18:09.105
<v Speaker 1>that even when we look at some of

00:18:09.105 --> 00:18:09.825
<v Speaker 1>the other,

00:18:10.545 --> 00:18:12.225
<v Speaker 1>software out there, we feel like there's a

00:18:12.225 --> 00:18:14.065
<v Speaker 1>unique gap, and, hopefully, we'll we'll get to

00:18:14.065 --> 00:18:15.745
<v Speaker 1>see some of that during the hands on

00:18:15.745 --> 00:18:18.225
<v Speaker 1>today. But but first and foremost, we care

00:18:18.225 --> 00:18:20.465
<v Speaker 1>about the mission, which is helping developer teams,

00:18:20.465 --> 00:18:20.865
<v Speaker 1>helping

00:18:21.270 --> 00:18:23.190
<v Speaker 1>the DevOps teams, helping

00:18:23.510 --> 00:18:25.670
<v Speaker 1>SREs just kind of do better and and

00:18:25.670 --> 00:18:27.750
<v Speaker 1>being able to ship applications robustly.

00:18:27.910 --> 00:18:29.590
<v Speaker 1>And if on the way we figure out

00:18:29.590 --> 00:18:31.910
<v Speaker 1>there's a better kind of piece of open

00:18:31.910 --> 00:18:33.430
<v Speaker 1>source that does can do a better job

00:18:33.430 --> 00:18:35.305
<v Speaker 1>than what we do, then we'll just go

00:18:35.305 --> 00:18:36.745
<v Speaker 1>and use that. And that's already the case

00:18:36.745 --> 00:18:38.665
<v Speaker 1>today. We build on the shoulders of giants.

00:18:38.665 --> 00:18:39.305
<v Speaker 1>Kubernetes

00:18:39.785 --> 00:18:42.665
<v Speaker 1>is built in. BuildKit is built in. Queue

00:18:42.665 --> 00:18:44.825
<v Speaker 1>is built in. Like, we we already do

00:18:44.825 --> 00:18:46.265
<v Speaker 1>that, and it is very much part of

00:18:46.265 --> 00:18:47.920
<v Speaker 1>of how we approach software.

00:18:48.320 --> 00:18:49.120
<v Speaker 0>Awesome.

00:18:49.440 --> 00:18:51.520
<v Speaker 0>Look, two of those technologies you mentioned in

00:18:51.520 --> 00:18:53.200
<v Speaker 0>the last three seconds are are two of

00:18:53.200 --> 00:18:55.280
<v Speaker 0>the most exciting technologies to me that we

00:18:55.280 --> 00:18:56.560
<v Speaker 0>have in this space right now. I think

00:18:56.560 --> 00:18:59.520
<v Speaker 0>BuildKit is completely underutilized as a tool Mhmm.

00:18:59.520 --> 00:19:02.880
<v Speaker 0>Especially for CICD pipelines and as a local

00:19:02.445 --> 00:19:04.764
<v Speaker 0>development tool. And q, which I think I've

00:19:04.764 --> 00:19:06.924
<v Speaker 0>been a very loud advocate for for a

00:19:06.924 --> 00:19:09.005
<v Speaker 0>number of years now is just a language

00:19:09.005 --> 00:19:11.005
<v Speaker 0>and I use for a pretty much everything

00:19:11.005 --> 00:19:12.205
<v Speaker 0>these days. In fact, I even built a

00:19:12.205 --> 00:19:14.844
<v Speaker 0>database with that as the query language. So

00:19:16.125 --> 00:19:18.299
<v Speaker 0>so I'm really excited to sit down and

00:19:18.299 --> 00:19:19.419
<v Speaker 0>I think this would be a great time

00:19:19.419 --> 00:19:21.100
<v Speaker 0>for me to share my screen. We'll take

00:19:21.100 --> 00:19:22.380
<v Speaker 0>a look at the homepage and we'll get

00:19:22.380 --> 00:19:24.299
<v Speaker 0>started with the hands on component.

00:19:24.460 --> 00:19:25.259
<v Speaker 0>Sound good?

00:19:25.580 --> 00:19:27.179
<v Speaker 0>That's good. Awesome.

00:19:27.659 --> 00:19:30.140
<v Speaker 0>Alright, where's my screen share? There we go.

00:19:32.155 --> 00:19:35.275
<v Speaker 0>Okay, so here we have the Namespace website,

00:19:35.275 --> 00:19:36.794
<v Speaker 0>you can find us at Namespace.

00:19:36.795 --> 00:19:37.515
<v Speaker 0>So,

00:19:37.835 --> 00:19:39.995
<v Speaker 0>it says is that all in one development

00:19:39.995 --> 00:19:40.794
<v Speaker 0>platform

00:19:40.955 --> 00:19:43.755
<v Speaker 0>unified experience from development to production.

00:19:44.539 --> 00:19:46.539
<v Speaker 0>So, that's a pretty that's a pretty good

00:19:46.539 --> 00:19:48.380
<v Speaker 0>teaser right off the bat like I'm excited

00:19:48.380 --> 00:19:50.380
<v Speaker 0>about that. We've got a little code window

00:19:50.380 --> 00:19:51.659
<v Speaker 0>there that says we can set up a

00:19:51.659 --> 00:19:54.700
<v Speaker 0>cluster, develop test and deploy. So this is

00:19:54.700 --> 00:19:57.705
<v Speaker 0>our full life cycle experience situation.

00:19:58.745 --> 00:20:00.585
<v Speaker 0>Pretty strong opening, gotta say.

00:20:02.424 --> 00:20:03.865
<v Speaker 1>Well, we you know,

00:20:05.065 --> 00:20:07.945
<v Speaker 1>because I mean, we're very transparent and I

00:20:08.105 --> 00:20:09.705
<v Speaker 1>hopefully, that's something that folks will kind of

00:20:09.705 --> 00:20:10.424
<v Speaker 1>learn about us.

00:20:11.179 --> 00:20:13.500
<v Speaker 1>Like, part of part of the challenge that

00:20:13.500 --> 00:20:14.779
<v Speaker 1>we have is also

00:20:16.539 --> 00:20:18.860
<v Speaker 1>because the the industry is so focused on

00:20:18.860 --> 00:20:21.340
<v Speaker 1>individual tools, so so something that does authentication

00:20:21.340 --> 00:20:23.500
<v Speaker 1>really well or something that does deployment really

00:20:23.500 --> 00:20:25.419
<v Speaker 1>well or something that does building really well,

00:20:26.395 --> 00:20:29.115
<v Speaker 1>We we're still figuring out what's the best

00:20:29.115 --> 00:20:31.435
<v Speaker 1>way to talk about how we think about

00:20:31.435 --> 00:20:33.115
<v Speaker 1>the problem and and how we feel like

00:20:33.115 --> 00:20:34.235
<v Speaker 1>we can help teams.

00:20:34.475 --> 00:20:36.554
<v Speaker 1>And this all in one has been

00:20:36.955 --> 00:20:39.995
<v Speaker 1>kinda a a monitor that we've leaned on

00:20:40.075 --> 00:20:42.600
<v Speaker 1>for that, but I I think that there's

00:20:42.600 --> 00:20:44.360
<v Speaker 1>still there's still more work for us to

00:20:44.360 --> 00:20:46.200
<v Speaker 1>do there to kinda better explain what we're

00:20:46.200 --> 00:20:46.679
<v Speaker 1>about.

00:20:47.560 --> 00:20:48.440
<v Speaker 0>Awesome.

00:20:49.160 --> 00:20:51.560
<v Speaker 0>Alright. And just to confirm as always, I

00:20:51.560 --> 00:20:53.320
<v Speaker 0>think we said at the start, everything is

00:20:53.320 --> 00:20:56.120
<v Speaker 0>open source. Right? Everything we're looking at today

00:20:55.275 --> 00:20:57.195
<v Speaker 0>is is available. It's on GitHub. People can

00:20:57.195 --> 00:20:59.355
<v Speaker 0>can contribute and open issues and all of

00:20:59.355 --> 00:21:00.795
<v Speaker 0>that good stuff that we expect from open

00:21:00.795 --> 00:21:02.715
<v Speaker 0>source. Right? That's that's right. So it's

00:21:03.275 --> 00:21:05.515
<v Speaker 1>the everything that we're looking at is Apache

00:21:05.515 --> 00:21:06.715
<v Speaker 1>two licensed.

00:21:07.115 --> 00:21:09.995
<v Speaker 1>We actually had a couple of contributions already

00:21:09.995 --> 00:21:11.760
<v Speaker 1>that it's really

00:21:11.920 --> 00:21:14.160
<v Speaker 1>kind of fills my heart that

00:21:14.640 --> 00:21:17.120
<v Speaker 1>to see people engaging and, yeah, we're happy

00:21:17.120 --> 00:21:19.360
<v Speaker 1>to have people come over, test it out

00:21:19.360 --> 00:21:21.840
<v Speaker 1>and and contribute as well. So that's that's

00:21:21.840 --> 00:21:22.960
<v Speaker 1>definitely part of the journey.

00:21:23.360 --> 00:21:24.559
<v Speaker 0>Alright. Awesome.

00:21:24.720 --> 00:21:26.800
<v Speaker 0>Well, I'm gonna click on start from scratch.

00:21:27.505 --> 00:21:29.265
<v Speaker 0>And I'm curious if this is gonna tell

00:21:29.265 --> 00:21:30.465
<v Speaker 0>me how to nope. Doesn't tell me how

00:21:30.465 --> 00:21:31.905
<v Speaker 0>to install it. So let's find the install

00:21:31.905 --> 00:21:34.385
<v Speaker 0>instructions first. We'll we'll take notes as we

00:21:34.385 --> 00:21:35.664
<v Speaker 1>go as well, David.

00:21:37.505 --> 00:21:38.785
<v Speaker 0>There's no install instructions.

00:21:39.990 --> 00:21:42.470
<v Speaker 1>The well, if you press quick start, it

00:21:42.470 --> 00:21:43.429
<v Speaker 1>will give you

00:21:44.870 --> 00:21:46.070
<v Speaker 1>install instructions.

00:21:46.950 --> 00:21:49.270
<v Speaker 0>Alright. Let's go definitely to

00:21:49.750 --> 00:21:51.845
<v Speaker 0>bash, but I I will go for it.

00:21:52.085 --> 00:21:52.804
<v Speaker 0>Yeah.

00:21:55.205 --> 00:21:57.285
<v Speaker 0>I mean, the docs say starting from scratch.

00:21:57.285 --> 00:21:59.045
<v Speaker 0>I mean, it's almost scratch, but as long

00:21:59.045 --> 00:22:04.325
<v Speaker 0>as you've got the NS command. Right? Let's

00:22:03.390 --> 00:22:04.029
<v Speaker 0>see.

00:22:04.910 --> 00:22:06.990
<v Speaker 1>Yeah. And as many other tools

00:22:07.390 --> 00:22:10.590
<v Speaker 1>in this space, we have our our CLI.

00:22:11.710 --> 00:22:12.350
<v Speaker 1>We

00:22:12.990 --> 00:22:13.789
<v Speaker 1>we're

00:22:13.870 --> 00:22:16.510
<v Speaker 1>we're thinking about, like, some of those trade

00:22:16.510 --> 00:22:17.865
<v Speaker 1>offs. Like, one of the things that we

00:22:17.865 --> 00:22:20.185
<v Speaker 1>actually care a lot about is not having

00:22:20.185 --> 00:22:20.985
<v Speaker 1>to manage

00:22:21.385 --> 00:22:22.345
<v Speaker 1>dependencies.

00:22:23.065 --> 00:22:25.705
<v Speaker 1>We we care deeply about knowing that we're

00:22:25.705 --> 00:22:27.225
<v Speaker 1>using the right dependencies,

00:22:27.465 --> 00:22:29.145
<v Speaker 1>but you just saw some of that. Like,

00:22:29.145 --> 00:22:30.260
<v Speaker 1>you installed

00:22:30.260 --> 00:22:32.179
<v Speaker 1>NS from Brew, but it will actually the

00:22:32.179 --> 00:22:33.379
<v Speaker 1>first time that you run,

00:22:33.700 --> 00:22:35.220
<v Speaker 1>we went and fetched the latest version that

00:22:35.220 --> 00:22:37.299
<v Speaker 1>we just released an hour an

00:22:37.700 --> 00:22:39.940
<v Speaker 1>hour ago. I did notice. I was curious

00:22:39.940 --> 00:22:42.100
<v Speaker 0>why NS dash dash help

00:22:41.875 --> 00:22:44.355
<v Speaker 0>was fetching something from some sort of repository

00:22:44.355 --> 00:22:46.274
<v Speaker 0>somewhere. Right. Okay.

00:22:46.835 --> 00:22:49.634
<v Speaker 0>So just updating itself. Okay. Yep.

00:22:51.395 --> 00:22:54.035
<v Speaker 0>Alright. So and I'll just start from scratch.

00:22:55.020 --> 00:22:58.059
<v Speaker 0>We need something called a namespace workspace,

00:22:58.380 --> 00:23:00.460
<v Speaker 0>which is a directory or some sort of

00:23:00.460 --> 00:23:02.299
<v Speaker 0>NS workspace dot q file.

00:23:04.540 --> 00:23:06.700
<v Speaker 0>So I'm just gonna initialize this. When we

00:23:06.700 --> 00:23:08.060
<v Speaker 0>talk about modules,

00:23:08.060 --> 00:23:09.580
<v Speaker 0>should I think of them in the same

00:23:09.580 --> 00:23:11.705
<v Speaker 0>light as I would with with Go modules?

00:23:11.705 --> 00:23:12.905
<v Speaker 0>So typically,

00:23:12.905 --> 00:23:13.705
<v Speaker 0>github.com

00:23:13.705 --> 00:23:16.025
<v Speaker 0>slash some sort of repository.

00:23:16.585 --> 00:23:18.905
<v Speaker 1>Yeah. That's that's right. And we

00:23:19.865 --> 00:23:20.425
<v Speaker 1>we

00:23:21.865 --> 00:23:24.745
<v Speaker 1>you'll see some of some inspiration that we've

00:23:24.745 --> 00:23:25.545
<v Speaker 1>had

00:23:26.110 --> 00:23:28.509
<v Speaker 1>comes comes from Go.

00:23:29.710 --> 00:23:32.270
<v Speaker 1>That that's perhaps, like it's it's it's probably

00:23:32.270 --> 00:23:34.349
<v Speaker 1>worth kinda spending just a minute on this.

00:23:34.429 --> 00:23:36.270
<v Speaker 1>Like, Namespace

00:23:36.270 --> 00:23:38.590
<v Speaker 1>includes a module system very much like Go.

00:23:38.590 --> 00:23:40.510
<v Speaker 1>And and the reason we do that is

00:23:40.785 --> 00:23:42.465
<v Speaker 1>we're kind of tired

00:23:42.705 --> 00:23:45.105
<v Speaker 1>of having to manage dependencies

00:23:45.105 --> 00:23:46.465
<v Speaker 1>manually. And,

00:23:47.505 --> 00:23:49.025
<v Speaker 1>and you'll get you we'll see that a

00:23:49.025 --> 00:23:50.865
<v Speaker 1>little bit more during the during the hands

00:23:50.865 --> 00:23:51.425
<v Speaker 1>on,

00:23:51.665 --> 00:23:54.225
<v Speaker 1>but you'll you with Namespace, you can refer

00:23:54.225 --> 00:23:55.780
<v Speaker 1>to servers

00:23:55.780 --> 00:23:59.060
<v Speaker 1>or components, we call them resources, in any

00:23:59.060 --> 00:24:00.660
<v Speaker 1>repository in the same way that you do

00:24:00.660 --> 00:24:02.659
<v Speaker 1>with Go. Like, you just import

00:24:02.900 --> 00:24:04.100
<v Speaker 1>the the

00:24:04.340 --> 00:24:05.700
<v Speaker 1>that repository,

00:24:05.780 --> 00:24:07.700
<v Speaker 1>and we'll fetch it as as needed.

00:24:08.245 --> 00:24:09.765
<v Speaker 1>And we'll always do that in a way

00:24:09.765 --> 00:24:11.924
<v Speaker 1>that doesn't really interfere with anything else in

00:24:11.924 --> 00:24:12.724
<v Speaker 1>your machine.

00:24:12.965 --> 00:24:14.404
<v Speaker 1>We're we also like it to be very

00:24:14.404 --> 00:24:17.044
<v Speaker 1>tidy and and not kinda random software, kinda

00:24:17.044 --> 00:24:18.164
<v Speaker 1>doing random things.

00:24:18.725 --> 00:24:20.485
<v Speaker 1>But we we try to tackle as much

00:24:20.485 --> 00:24:22.230
<v Speaker 1>of this kind of figuring out what are

00:24:22.230 --> 00:24:24.790
<v Speaker 1>the dependencies, unloading those dependencies, making sure that

00:24:24.790 --> 00:24:25.750
<v Speaker 1>you're up to date

00:24:26.150 --> 00:24:26.950
<v Speaker 1>for you.

00:24:28.230 --> 00:24:28.870
<v Speaker 0>Okay.

00:24:29.830 --> 00:24:31.270
<v Speaker 0>I don't wanna jump the gun on it

00:24:31.270 --> 00:24:32.630
<v Speaker 0>too early because it sounds like a conversation

00:24:32.630 --> 00:24:34.390
<v Speaker 0>we may have further on into the session.

00:24:34.335 --> 00:24:36.575
<v Speaker 0>But when you talk about having a referencing

00:24:36.575 --> 00:24:39.455
<v Speaker 0>another repository and other packages, is this, like,

00:24:39.855 --> 00:24:42.335
<v Speaker 0>platform teams that provide building blocks for people

00:24:42.335 --> 00:24:45.855
<v Speaker 0>to deploy MongoDB or Postgres or Redis and

00:24:45.855 --> 00:24:47.950
<v Speaker 0>all these other infrastructure components?

00:24:48.590 --> 00:24:50.270
<v Speaker 1>Yeah. Like, we think of it as a

00:24:50.270 --> 00:24:52.429
<v Speaker 1>building block, and it can be applied in

00:24:52.429 --> 00:24:54.350
<v Speaker 1>multiple ways. Like, one way is what you

00:24:54.350 --> 00:24:57.149
<v Speaker 1>just described. You're you're inside of an organization,

00:24:57.630 --> 00:24:59.230
<v Speaker 1>and you have a team that is focusing

00:24:59.230 --> 00:25:01.715
<v Speaker 1>more on infrastructure, and they put together a

00:25:01.715 --> 00:25:04.835
<v Speaker 1>series of resources and resource providers as kind

00:25:04.835 --> 00:25:06.995
<v Speaker 1>of Namespace calls them. And you can import

00:25:06.995 --> 00:25:07.475
<v Speaker 1>them,

00:25:07.955 --> 00:25:09.715
<v Speaker 1>from if they're if they live in different

00:25:09.715 --> 00:25:10.515
<v Speaker 1>repository.

00:25:10.515 --> 00:25:12.275
<v Speaker 1>They can also live in the same repository.

00:25:12.275 --> 00:25:13.075
<v Speaker 1>Like, we support

00:25:13.490 --> 00:25:15.250
<v Speaker 1>kind of arbitrarily sized

00:25:15.330 --> 00:25:16.450
<v Speaker 1>mono repos.

00:25:16.690 --> 00:25:19.570
<v Speaker 1>But I think from a open source community

00:25:19.730 --> 00:25:22.370
<v Speaker 1>and ecosystem, what is really interesting is

00:25:23.490 --> 00:25:25.010
<v Speaker 1>we won't have the chance of kind of

00:25:25.010 --> 00:25:27.404
<v Speaker 1>going through that today. But imagine that you

00:25:27.404 --> 00:25:28.445
<v Speaker 1>have an application

00:25:28.684 --> 00:25:29.724
<v Speaker 1>that is,

00:25:30.524 --> 00:25:32.684
<v Speaker 1>well, what's a monitoring stack. And what do

00:25:32.684 --> 00:25:34.205
<v Speaker 1>you do today? You go to,

00:25:34.684 --> 00:25:36.125
<v Speaker 1>probably the Prometheus,

00:25:36.524 --> 00:25:38.205
<v Speaker 1>community managed Helm

00:25:39.330 --> 00:25:41.010
<v Speaker 1>page, and then it tells you, hey. Run

00:25:41.010 --> 00:25:43.490
<v Speaker 1>these commands, and now you have Prometheus.

00:25:43.650 --> 00:25:45.650
<v Speaker 1>And we we turn that into a dependency

00:25:45.650 --> 00:25:47.809
<v Speaker 1>set. You go to your application, and you

00:25:47.809 --> 00:25:50.610
<v Speaker 1>say, hey. I depend on Prometheus,

00:25:50.610 --> 00:25:51.970
<v Speaker 1>and this is kind of a one line,

00:25:52.370 --> 00:25:54.130
<v Speaker 1>import. And then when you deploy

00:25:54.505 --> 00:25:57.465
<v Speaker 1>your application, it will also automatically kind of

00:25:57.465 --> 00:25:59.385
<v Speaker 1>deploy the right Prometheus to go,

00:25:59.945 --> 00:26:00.664
<v Speaker 1>with it.

00:26:00.985 --> 00:26:02.745
<v Speaker 1>We'll see a little bit of that later

00:26:02.745 --> 00:26:05.385
<v Speaker 1>on, in the hands on, or a part

00:26:05.385 --> 00:26:07.529
<v Speaker 1>of the getting started, But the that's how

00:26:07.529 --> 00:26:08.489
<v Speaker 1>we think about,

00:26:09.049 --> 00:26:12.090
<v Speaker 1>like, kinda package management. It's it's both something

00:26:12.090 --> 00:26:14.090
<v Speaker 1>that could you can use, like, build your

00:26:14.090 --> 00:26:15.129
<v Speaker 1>own, but also

00:26:15.370 --> 00:26:18.409
<v Speaker 1>other people in the in the ecosystem can

00:26:18.570 --> 00:26:20.169
<v Speaker 1>and the community can build their own, and

00:26:20.169 --> 00:26:21.929
<v Speaker 1>then you it's very easy for you to

00:26:21.929 --> 00:26:24.235
<v Speaker 1>use them. Like, you can just make depend

00:26:24.235 --> 00:26:26.395
<v Speaker 1>on them and and you're ready to go.

00:26:27.355 --> 00:26:28.635
<v Speaker 0>Alright. Awesome.

00:26:29.035 --> 00:26:30.475
<v Speaker 0>Well, running

00:26:30.795 --> 00:26:34.875
<v Speaker 0>our edit command, got us a namespace workspace

00:26:34.875 --> 00:26:38.075
<v Speaker 0>dot q, which defines our module, some environment,

00:26:38.690 --> 00:26:39.889
<v Speaker 0>and then dependency.

00:26:40.290 --> 00:26:42.370
<v Speaker 0>I'm assuming if I were to curl this,

00:26:42.370 --> 00:26:43.890
<v Speaker 0>it would probably still too take a hub

00:26:43.890 --> 00:26:45.650
<v Speaker 0>repository somewhere, and this is likely a GET

00:26:45.650 --> 00:26:47.730
<v Speaker 0>share. I mean, I mean Yeah. That's right.

00:26:47.730 --> 00:26:48.850
<v Speaker 0>Okay. Cool.

00:26:49.410 --> 00:26:50.770
<v Speaker 1>And foundation is just

00:26:51.715 --> 00:26:53.715
<v Speaker 1>it it was for a long time, like,

00:26:53.715 --> 00:26:55.875
<v Speaker 1>maybe maybe a little bit of insider

00:26:55.875 --> 00:26:58.674
<v Speaker 1>baseball as as our our North American friends

00:26:58.674 --> 00:26:59.634
<v Speaker 1>would would say.

00:27:00.355 --> 00:27:02.434
<v Speaker 1>It was for a long time our our

00:27:02.434 --> 00:27:03.794
<v Speaker 1>internal code name,

00:27:04.514 --> 00:27:06.480
<v Speaker 1>and I think we have we have a

00:27:06.480 --> 00:27:08.800
<v Speaker 1>soft spot for for that name. So even

00:27:08.800 --> 00:27:11.039
<v Speaker 1>though the product like, we you'll often,

00:27:11.440 --> 00:27:13.920
<v Speaker 1>hear us say, namespace, and that's kind of

00:27:13.920 --> 00:27:14.720
<v Speaker 1>the platform,

00:27:15.120 --> 00:27:17.040
<v Speaker 1>a lot of the dependencies come from foundation

00:27:17.040 --> 00:27:18.805
<v Speaker 1>because that's that's

00:27:18.965 --> 00:27:20.965
<v Speaker 1>where where the core orchestration is, where the

00:27:20.965 --> 00:27:22.645
<v Speaker 1>core platform and a lot of the dependencies

00:27:22.645 --> 00:27:23.605
<v Speaker 1>live in.

00:27:24.005 --> 00:27:25.925
<v Speaker 0>Okay. Is that after the book, or have

00:27:25.925 --> 00:27:27.045
<v Speaker 0>I missed something there?

00:27:28.325 --> 00:27:29.765
<v Speaker 1>You know, you can

00:27:31.110 --> 00:27:33.590
<v Speaker 1>I'll I'll I'll I won't try to rewrite

00:27:33.750 --> 00:27:34.070
<v Speaker 1>story

00:27:34.870 --> 00:27:36.070
<v Speaker 1>rewrite history.

00:27:37.430 --> 00:27:38.870
<v Speaker 1>But I I I think

00:27:39.750 --> 00:27:40.630
<v Speaker 1>it's a name that

00:27:41.590 --> 00:27:43.990
<v Speaker 1>there's a history to it also for for

00:27:43.990 --> 00:27:44.549
<v Speaker 1>us.

00:27:45.110 --> 00:27:46.309
<v Speaker 1>The the team

00:27:46.985 --> 00:27:49.785
<v Speaker 1>and that kind of the Namespace Labs team

00:27:49.785 --> 00:27:50.424
<v Speaker 1>is

00:27:50.585 --> 00:27:52.665
<v Speaker 1>we've been working together for a while, and

00:27:52.665 --> 00:27:55.385
<v Speaker 1>and Namespace has sorry. Foundation has been a

00:27:55.385 --> 00:27:57.145
<v Speaker 1>name that showed up in our past as

00:27:57.145 --> 00:27:58.585
<v Speaker 1>well, so it's so there's a kind of

00:27:58.585 --> 00:28:00.600
<v Speaker 1>special meaning to it. Right. Okay. No worries.

00:28:00.600 --> 00:28:01.240
<v Speaker 0>Got it.

00:28:01.720 --> 00:28:03.960
<v Speaker 0>Yeah. So this takes us to some repository.

00:28:03.960 --> 00:28:05.240
<v Speaker 0>I'm sure we'll come back to this at

00:28:05.240 --> 00:28:06.280
<v Speaker 0>some point later.

00:28:06.760 --> 00:28:08.919
<v Speaker 0>Let's jump back to the kinesarctic gate.

00:28:09.640 --> 00:28:11.000
<v Speaker 0>Oh, no. No. There was a link in

00:28:11.000 --> 00:28:13.320
<v Speaker 0>the docs. I'm sorry. See it? It's there.

00:28:14.935 --> 00:28:16.695
<v Speaker 1>Would have taken you back, so that's

00:28:18.215 --> 00:28:19.735
<v Speaker 0>Alright. So now we need to do some

00:28:19.735 --> 00:28:21.655
<v Speaker 0>sort of prepare step.

00:28:22.455 --> 00:28:24.535
<v Speaker 0>So we run this, Namespace

00:28:24.535 --> 00:28:25.735
<v Speaker 0>is going to do

00:28:26.135 --> 00:28:28.695
<v Speaker 0>it's downloading k three s. You wanna fill

00:28:28.695 --> 00:28:29.895
<v Speaker 0>us in on what's happening to site.

00:28:30.680 --> 00:28:31.639
<v Speaker 1>Yeah. So

00:28:32.360 --> 00:28:33.559
<v Speaker 1>and and this is one of those things

00:28:33.559 --> 00:28:35.160
<v Speaker 1>that we would love to get feedback on,

00:28:35.160 --> 00:28:37.000
<v Speaker 1>also the the names of some of these

00:28:37.000 --> 00:28:39.480
<v Speaker 1>commands. We've actually gone back and forth on

00:28:39.480 --> 00:28:40.200
<v Speaker 1>prepare.

00:28:40.600 --> 00:28:43.320
<v Speaker 1>So what prepare is doing is it's setting

00:28:43.320 --> 00:28:45.160
<v Speaker 1>up the an environment. And

00:28:46.195 --> 00:28:48.354
<v Speaker 1>often when you don't see an environment

00:28:48.674 --> 00:28:51.714
<v Speaker 1>reference with with Namespace, the default is dev.

00:28:52.195 --> 00:28:52.754
<v Speaker 1>But

00:28:53.634 --> 00:28:55.475
<v Speaker 1>even though there's a list of, like, dev

00:28:55.475 --> 00:28:57.554
<v Speaker 1>prod and and staging in the in the

00:28:57.554 --> 00:29:00.690
<v Speaker 1>file above, actually, Namespace doesn't care. They're apart

00:29:00.690 --> 00:29:03.090
<v Speaker 1>from dev being the default, there's there's no

00:29:03.090 --> 00:29:04.770
<v Speaker 1>other special meaning to them. You can have

00:29:04.770 --> 00:29:06.849
<v Speaker 1>as many different environments as you want.

00:29:07.090 --> 00:29:09.330
<v Speaker 1>You can have, like, 10 different development environments,

00:29:09.330 --> 00:29:12.529
<v Speaker 1>cloud versions, local versions, etcetera. Doesn't really matter.

00:29:13.445 --> 00:29:16.165
<v Speaker 1>And what prepare then does, it makes sure

00:29:16.165 --> 00:29:18.965
<v Speaker 1>that you have a Kubernetes cluster set up

00:29:18.965 --> 00:29:21.765
<v Speaker 1>to be usable by namespace in that environment

00:29:21.925 --> 00:29:24.405
<v Speaker 1>as well as long with other dependencies that

00:29:24.405 --> 00:29:26.245
<v Speaker 1>we that we use. So for example, we

00:29:26.245 --> 00:29:28.210
<v Speaker 1>also set up an image registry so that

00:29:28.210 --> 00:29:30.050
<v Speaker 1>you don't have to go and figure out

00:29:30.050 --> 00:29:32.290
<v Speaker 1>how how what which registry should I be

00:29:32.290 --> 00:29:34.850
<v Speaker 1>using. So when you say prepare local,

00:29:35.250 --> 00:29:37.250
<v Speaker 1>we do run k three s inside of

00:29:37.250 --> 00:29:39.330
<v Speaker 1>Docker. We use k three d for that

00:29:39.330 --> 00:29:41.164
<v Speaker 1>purpose, which has been

00:29:41.565 --> 00:29:44.125
<v Speaker 1>fantastic to actually have that and be able

00:29:44.125 --> 00:29:45.725
<v Speaker 1>to use it. We're also big friends of

00:29:45.725 --> 00:29:47.405
<v Speaker 1>k three s. I don't want to kind

00:29:47.405 --> 00:29:48.924
<v Speaker 1>of stir any any

00:29:50.445 --> 00:29:51.565
<v Speaker 1>any any

00:29:52.285 --> 00:29:53.885
<v Speaker 1>and I I know that not everyone like,

00:29:53.885 --> 00:29:54.845
<v Speaker 1>I think I know that a lot of

00:29:54.845 --> 00:29:56.530
<v Speaker 1>folks like KIND, and we also

00:29:57.090 --> 00:29:57.970
<v Speaker 1>really

00:29:57.970 --> 00:30:00.290
<v Speaker 1>like KIND, but we started early with K3S,

00:30:00.290 --> 00:30:02.610
<v Speaker 1>and and and it's been we really appreciate

00:30:02.610 --> 00:30:04.610
<v Speaker 1>how flexible it's been for us through kind

00:30:04.610 --> 00:30:05.730
<v Speaker 1>of development and production.

00:30:06.210 --> 00:30:07.810
<v Speaker 1>And and it does a couple other things.

00:30:07.810 --> 00:30:09.170
<v Speaker 1>It also makes sure that you have an

00:30:09.170 --> 00:30:11.785
<v Speaker 1>ingress controller inside of that cluster,

00:30:12.265 --> 00:30:14.825
<v Speaker 1>which K3s by default does, obviously, with traffic,

00:30:15.065 --> 00:30:16.985
<v Speaker 1>but we we install NGINX.

00:30:17.225 --> 00:30:17.865
<v Speaker 1>And

00:30:18.345 --> 00:30:20.425
<v Speaker 1>and and then we also we have a

00:30:20.425 --> 00:30:21.225
<v Speaker 1>component

00:30:21.465 --> 00:30:23.970
<v Speaker 1>that helps orchestrate some of the things that

00:30:23.970 --> 00:30:26.770
<v Speaker 1>Namespace does that gets installed into the into

00:30:26.770 --> 00:30:27.570
<v Speaker 1>the cluster.

00:30:27.810 --> 00:30:29.970
<v Speaker 1>And that's another of one another one of

00:30:29.970 --> 00:30:31.570
<v Speaker 1>those pieces that we've kind of gone a

00:30:31.570 --> 00:30:33.170
<v Speaker 1>little bit back and forth on the design.

00:30:33.170 --> 00:30:35.570
<v Speaker 1>Like, previously, we didn't. Now we do.

00:30:36.585 --> 00:30:38.425
<v Speaker 1>And and we may still kind of change

00:30:38.425 --> 00:30:41.385
<v Speaker 1>that. But there's our orchestrator also gets deployed

00:30:41.385 --> 00:30:43.784
<v Speaker 1>into into that cluster. And after it's done,

00:30:43.945 --> 00:30:46.504
<v Speaker 1>we update a local file

00:30:46.905 --> 00:30:49.465
<v Speaker 1>dev host, we call it, which kind of

00:30:49.465 --> 00:30:52.330
<v Speaker 1>says, well, for this environment, use this cluster

00:30:52.330 --> 00:30:53.929
<v Speaker 1>that we've just set up.

00:30:54.650 --> 00:30:58.010
<v Speaker 0>Alright. Thank you. We have a question in

00:30:58.010 --> 00:31:00.970
<v Speaker 0>the chat from Diego, who's asking which image

00:31:00.970 --> 00:31:04.010
<v Speaker 0>registry is used, and are emojis encrypted and

00:31:04.010 --> 00:31:06.330
<v Speaker 0>private? Are they readable by Namespace Labs?

00:31:07.335 --> 00:31:08.695
<v Speaker 1>Yeah. It's a great question.

00:31:09.735 --> 00:31:12.054
<v Speaker 1>We're so when we when you do prepare

00:31:12.054 --> 00:31:14.615
<v Speaker 1>local, we set up an image registry inside

00:31:14.615 --> 00:31:16.934
<v Speaker 1>Docker running on your machine. So we have

00:31:16.934 --> 00:31:18.134
<v Speaker 1>no access to it.

00:31:18.535 --> 00:31:20.775
<v Speaker 1>We it's something that we we care a

00:31:20.775 --> 00:31:22.590
<v Speaker 1>lot about so that's something as well that

00:31:22.590 --> 00:31:24.510
<v Speaker 1>we're kind of been working on and we

00:31:24.510 --> 00:31:26.110
<v Speaker 1>keep working on. So we really wanted it

00:31:26.110 --> 00:31:27.630
<v Speaker 1>to be as local as possible.

00:31:28.030 --> 00:31:30.030
<v Speaker 1>We even have ideas of

00:31:30.590 --> 00:31:33.710
<v Speaker 1>having an image registry that much more closely

00:31:33.710 --> 00:31:37.595
<v Speaker 1>map maps what the containerd image

00:31:37.675 --> 00:31:38.235
<v Speaker 1>store

00:31:38.555 --> 00:31:40.235
<v Speaker 1>is like so that you don't even have,

00:31:40.235 --> 00:31:41.434
<v Speaker 1>like, an intermediate

00:31:41.595 --> 00:31:44.315
<v Speaker 1>step with images are are are stored, and

00:31:44.315 --> 00:31:46.555
<v Speaker 1>we can kind of seed containerd directly, but

00:31:46.555 --> 00:31:48.680
<v Speaker 1>we haven't done that yet. So but but

00:31:48.680 --> 00:31:51.240
<v Speaker 1>in essence, like, local things are all complete

00:31:51.240 --> 00:31:52.279
<v Speaker 1>in your machine.

00:31:52.760 --> 00:31:54.520
<v Speaker 1>We don't have access to them. You're just

00:31:54.520 --> 00:31:56.600
<v Speaker 1>using the the software.

00:31:56.840 --> 00:31:59.240
<v Speaker 1>There's other arguments to to prepare. So you

00:31:59.240 --> 00:32:00.760
<v Speaker 1>can prepare EKS,

00:32:00.760 --> 00:32:01.480
<v Speaker 1>for example.

00:32:02.040 --> 00:32:04.435
<v Speaker 1>And when you prepare EKS, we set up

00:32:04.435 --> 00:32:05.875
<v Speaker 1>an environment to use

00:32:06.275 --> 00:32:07.315
<v Speaker 1>Amazon's

00:32:07.955 --> 00:32:10.115
<v Speaker 1>image registry, so ECR.

00:32:10.355 --> 00:32:12.435
<v Speaker 1>And then if you use if you use

00:32:12.435 --> 00:32:14.755
<v Speaker 1>prepare existing, then you tell us which registry

00:32:14.755 --> 00:32:16.275
<v Speaker 1>you want to use, and that's really up

00:32:16.275 --> 00:32:19.155
<v Speaker 1>to you to decide how how that's set

00:32:19.155 --> 00:32:20.380
<v Speaker 1>up. And we

00:32:21.100 --> 00:32:23.660
<v Speaker 1>this this set of options will increase over

00:32:23.660 --> 00:32:24.220
<v Speaker 1>time.

00:32:25.580 --> 00:32:27.580
<v Speaker 1>One interesting thing is that not in the

00:32:27.580 --> 00:32:30.140
<v Speaker 1>current implementation, but kind of part of our

00:32:30.140 --> 00:32:34.385
<v Speaker 1>design ethos, if you will, is is extensibility.

00:32:34.785 --> 00:32:35.904
<v Speaker 1>We want

00:32:36.545 --> 00:32:38.305
<v Speaker 1>we we care a lot about, like, this

00:32:38.305 --> 00:32:41.425
<v Speaker 1>core experience, but we know that there's a

00:32:41.425 --> 00:32:43.025
<v Speaker 1>lot of kind of good cloud providers out

00:32:43.025 --> 00:32:45.105
<v Speaker 1>there. Not everyone is in EKS. Like, we

00:32:45.105 --> 00:32:47.585
<v Speaker 1>don't want to even

00:32:47.270 --> 00:32:49.029
<v Speaker 1>have to have, like, a strong opinion on

00:32:49.029 --> 00:32:50.789
<v Speaker 1>which cloud provider you should be using.

00:32:51.590 --> 00:32:52.950
<v Speaker 1>So over time,

00:32:53.350 --> 00:32:56.149
<v Speaker 1>we'll actually change this interface so that anyone

00:32:56.149 --> 00:32:58.630
<v Speaker 1>can build a module that does the same

00:32:58.630 --> 00:32:59.190
<v Speaker 1>type of setup,

00:33:00.355 --> 00:33:02.035
<v Speaker 1>and and it will work in a similar

00:33:02.035 --> 00:33:04.515
<v Speaker 1>way. You'll just tell us well, set up

00:33:04.515 --> 00:33:05.715
<v Speaker 1>a environment

00:33:05.875 --> 00:33:08.195
<v Speaker 1>with a module that lives in this repository,

00:33:08.195 --> 00:33:09.955
<v Speaker 1>and we'll make sure that we build it.

00:33:09.955 --> 00:33:10.835
<v Speaker 1>We we,

00:33:11.235 --> 00:33:12.755
<v Speaker 1>kind of run it for you so that

00:33:12.755 --> 00:33:14.355
<v Speaker 1>as a user, it's also something that just

00:33:14.355 --> 00:33:16.320
<v Speaker 1>works out of the But at the moment,

00:33:16.320 --> 00:33:17.920
<v Speaker 1>we have these three options that are built

00:33:17.920 --> 00:33:19.279
<v Speaker 1>into into NS.

00:33:20.400 --> 00:33:21.120
<v Speaker 0>Okay.

00:33:21.680 --> 00:33:23.360
<v Speaker 0>A question on the top of my head

00:33:23.360 --> 00:33:25.759
<v Speaker 0>is the orchestrator component.

00:33:26.000 --> 00:33:28.240
<v Speaker 0>Is this something I would run-in my production

00:33:28.240 --> 00:33:29.920
<v Speaker 0>environment if I were using Namespace?

00:33:30.625 --> 00:33:32.385
<v Speaker 1>So today, if you go and deploy to

00:33:32.385 --> 00:33:34.865
<v Speaker 1>production, you do see it there. In our

00:33:34.865 --> 00:33:36.865
<v Speaker 1>final design, no. We we

00:33:38.065 --> 00:33:40.385
<v Speaker 1>our our goal is that production becomes as

00:33:40.385 --> 00:33:42.625
<v Speaker 1>hair tie air airtight as possible.

00:33:43.799 --> 00:33:44.440
<v Speaker 1>And

00:33:44.600 --> 00:33:46.919
<v Speaker 1>the big the the the reason why we

00:33:46.919 --> 00:33:49.559
<v Speaker 1>haven't done that yet is because we care

00:33:49.559 --> 00:33:50.999
<v Speaker 1>very deeply about,

00:33:51.559 --> 00:33:53.559
<v Speaker 1>having the minimum

00:33:54.760 --> 00:33:55.720
<v Speaker 1>kind of access

00:33:57.595 --> 00:34:00.554
<v Speaker 1>necessary in order to deploy to production, and

00:34:00.554 --> 00:34:01.995
<v Speaker 1>we haven't done that in a way that

00:34:01.995 --> 00:34:03.034
<v Speaker 1>the orchestrator

00:34:03.034 --> 00:34:05.115
<v Speaker 1>will live somewhere else and deploy to your

00:34:05.115 --> 00:34:06.234
<v Speaker 1>production cluster.

00:34:06.794 --> 00:34:08.955
<v Speaker 1>We we have done that in other parts

00:34:08.955 --> 00:34:10.554
<v Speaker 1>of Namespace. So for example,

00:34:11.660 --> 00:34:13.900
<v Speaker 1>we won't go through that today, but if

00:34:13.900 --> 00:34:14.700
<v Speaker 1>you use

00:34:14.940 --> 00:34:16.380
<v Speaker 1>an s three bucket

00:34:16.700 --> 00:34:18.940
<v Speaker 1>out of AWS and you kind of instantiate

00:34:18.940 --> 00:34:20.220
<v Speaker 1>that with Namespace,

00:34:20.380 --> 00:34:21.820
<v Speaker 1>we out of the box set up an

00:34:21.820 --> 00:34:24.060
<v Speaker 1>IAM policy that is kind of the minimum

00:34:24.060 --> 00:34:25.660
<v Speaker 1>policy for you to be able to use

00:34:25.660 --> 00:34:26.620
<v Speaker 1>that that bucket

00:34:26.945 --> 00:34:29.025
<v Speaker 1>in your application. And those are the types

00:34:29.025 --> 00:34:30.145
<v Speaker 1>of things that we would want to do

00:34:30.145 --> 00:34:31.985
<v Speaker 1>as well when we're setting up production,

00:34:32.145 --> 00:34:33.665
<v Speaker 1>but we haven't gotten to it yet.

00:34:34.304 --> 00:34:35.025
<v Speaker 0>Okay.

00:34:35.745 --> 00:34:36.625
<v Speaker 0>Two questions.

00:34:37.505 --> 00:34:39.585
<v Speaker 0>Does the lack of an orchestrator in the

00:34:39.585 --> 00:34:41.824
<v Speaker 0>future in production mean that Namespace

00:34:41.930 --> 00:34:44.570
<v Speaker 0>won't adopt or support get ops patterns, or

00:34:44.570 --> 00:34:46.010
<v Speaker 0>is that something you just see being done

00:34:46.010 --> 00:34:46.810
<v Speaker 0>in a different

00:34:47.690 --> 00:34:48.250
<v Speaker 0>way?

00:34:49.290 --> 00:34:51.610
<v Speaker 1>Yeah. So the orchestrator does need to live

00:34:51.610 --> 00:34:52.490
<v Speaker 1>somewhere else.

00:34:52.890 --> 00:34:53.690
<v Speaker 1>It just

00:34:54.554 --> 00:34:56.474
<v Speaker 1>it wouldn't live inside of your cluster. So

00:34:56.474 --> 00:34:59.675
<v Speaker 1>it will live somewhere else where your GitOps

00:34:59.675 --> 00:35:02.075
<v Speaker 1>stack, if you will, would be running. So

00:35:02.075 --> 00:35:04.474
<v Speaker 1>anything that is then consuming these events, we

00:35:04.474 --> 00:35:06.475
<v Speaker 1>we we're strong believers in GitOps.

00:35:07.035 --> 00:35:08.474
<v Speaker 1>We it's something that

00:35:08.910 --> 00:35:10.750
<v Speaker 1>it was our bread and butter for many

00:35:10.750 --> 00:35:11.310
<v Speaker 1>years

00:35:12.190 --> 00:35:14.990
<v Speaker 1>and and got this idea that configuration lives

00:35:14.990 --> 00:35:16.190
<v Speaker 1>in the repository

00:35:16.190 --> 00:35:18.589
<v Speaker 1>and kinda major changes go through a review

00:35:18.589 --> 00:35:20.510
<v Speaker 1>process, and then they're deployed

00:35:20.750 --> 00:35:21.790
<v Speaker 1>from from

00:35:21.950 --> 00:35:23.470
<v Speaker 1>from the actual repository.

00:35:23.964 --> 00:35:26.045
<v Speaker 1>We care a lot about provenance. Like, do

00:35:26.045 --> 00:35:27.965
<v Speaker 1>we understand where those changes come from?

00:35:28.525 --> 00:35:30.365
<v Speaker 1>And also being able to ensure that we

00:35:30.365 --> 00:35:33.005
<v Speaker 1>have automated testing that goes into into those

00:35:33.005 --> 00:35:34.925
<v Speaker 1>changes as they're getting rolled out. So we

00:35:34.925 --> 00:35:37.405
<v Speaker 1>got big thumbs up for GitOps, and it's

00:35:37.405 --> 00:35:39.700
<v Speaker 1>it's you'll see it kind of first kinda

00:35:40.260 --> 00:35:42.500
<v Speaker 1>at at the force center in in in

00:35:42.500 --> 00:35:43.380
<v Speaker 1>Namespace.

00:35:44.100 --> 00:35:45.860
<v Speaker 1>But but, yeah, we don't see that as

00:35:45.860 --> 00:35:47.060
<v Speaker 1>kind of preventing

00:35:47.700 --> 00:35:49.620
<v Speaker 1>GitOps. We would just have the orchestra just

00:35:49.620 --> 00:35:50.580
<v Speaker 1>living somewhere else.

00:35:51.220 --> 00:35:51.540
<v Speaker 0>Okay.

00:35:52.734 --> 00:35:54.655
<v Speaker 0>Last question, and I'll let you plead the

00:35:54.655 --> 00:35:56.015
<v Speaker 0>fifth if you don't wanna answer it. But

00:35:56.015 --> 00:35:57.375
<v Speaker 0>as an ex Googler,

00:35:57.615 --> 00:35:59.695
<v Speaker 0>I see EKS, and I don't see

00:35:59.935 --> 00:36:01.775
<v Speaker 0>GCR or GKE.

00:36:01.775 --> 00:36:04.335
<v Speaker 0>Was that an intentional decision? Is that something

00:36:04.335 --> 00:36:06.830
<v Speaker 0>you plan to support longer term? Like, I'm

00:36:06.830 --> 00:36:07.630
<v Speaker 0>just curious.

00:36:08.350 --> 00:36:10.990
<v Speaker 1>Yeah. Well, we we care about

00:36:11.870 --> 00:36:13.390
<v Speaker 1>I I think the most important thing for

00:36:13.390 --> 00:36:15.790
<v Speaker 1>us is to go where users are, like,

00:36:15.790 --> 00:36:16.270
<v Speaker 1>help

00:36:16.590 --> 00:36:19.310
<v Speaker 1>people where they are. And it's no question

00:36:19.310 --> 00:36:21.470
<v Speaker 1>that a lot of folks are in AWS,

00:36:21.865 --> 00:36:23.865
<v Speaker 1>So that's that's where we started.

00:36:24.585 --> 00:36:26.665
<v Speaker 1>We have friends at Google. I I really

00:36:26.665 --> 00:36:27.945
<v Speaker 1>like Google's products.

00:36:28.825 --> 00:36:31.385
<v Speaker 1>GCP, I think, in the Kubernetes space is

00:36:31.385 --> 00:36:33.705
<v Speaker 1>probably one of the best kind of managed

00:36:33.705 --> 00:36:34.665
<v Speaker 1>Kubernetes solutions.

00:36:35.470 --> 00:36:36.030
<v Speaker 1>And

00:36:36.510 --> 00:36:38.990
<v Speaker 1>it may still show up in this mode

00:36:38.990 --> 00:36:40.990
<v Speaker 1>that is kind of built into NS,

00:36:41.310 --> 00:36:43.230
<v Speaker 1>but what I would really like to do

00:36:43.230 --> 00:36:44.270
<v Speaker 1>is just get

00:36:44.670 --> 00:36:46.590
<v Speaker 1>our extension system working

00:36:47.195 --> 00:36:48.795
<v Speaker 1>for also these

00:36:49.115 --> 00:36:50.955
<v Speaker 1>these part of the of the system, which

00:36:50.955 --> 00:36:52.555
<v Speaker 1>at the moment, it doesn't. It only works

00:36:52.555 --> 00:36:55.035
<v Speaker 1>for other parts so that whether it's ourselves

00:36:55.035 --> 00:36:56.635
<v Speaker 1>or someone else in the community can go

00:36:56.635 --> 00:36:57.835
<v Speaker 1>and build that integration.

00:36:57.915 --> 00:37:00.315
<v Speaker 0>Alright. Cool. So business decision, not a technical

00:37:00.315 --> 00:37:01.930
<v Speaker 0>decision. I like Yeah.

00:37:03.290 --> 00:37:05.210
<v Speaker 0>Okay. So I think we're prepared.

00:37:05.850 --> 00:37:08.330
<v Speaker 0>Let's see what's next. You've already covered the

00:37:08.330 --> 00:37:09.610
<v Speaker 0>dev host file.

00:37:10.170 --> 00:37:13.130
<v Speaker 0>Now we want to develop our first namespace

00:37:13.130 --> 00:37:13.930
<v Speaker 0>application.

00:37:14.330 --> 00:37:16.090
<v Speaker 0>So we need to create a server dot

00:37:16.090 --> 00:37:18.115
<v Speaker 0>queue and I'm just gonna copy and paste

00:37:18.115 --> 00:37:18.994
<v Speaker 0>all of this.

00:37:19.315 --> 00:37:21.234
<v Speaker 0>Yeah. I will do my best to

00:37:21.315 --> 00:37:23.714
<v Speaker 0>speculate about what this is gonna do, but

00:37:23.714 --> 00:37:25.954
<v Speaker 0>feel free to correct me if you wish.

00:37:26.515 --> 00:37:27.155
<v Speaker 0>Sure.

00:37:27.714 --> 00:37:29.954
<v Speaker 0>Yes. I trust myself. Yes. Good. Thank you.

00:37:33.640 --> 00:37:34.680
<v Speaker 1>Just so

00:37:35.240 --> 00:37:36.840
<v Speaker 1>well, I'll leave it up to you. There

00:37:36.840 --> 00:37:38.600
<v Speaker 1>was something in the instructions. It asked you

00:37:38.600 --> 00:37:40.840
<v Speaker 1>to put this file under a server directory.

00:37:41.080 --> 00:37:43.080
<v Speaker 1>You can see what happens if you don't,

00:37:44.280 --> 00:37:45.960
<v Speaker 1>if you want to discover a little bit.

00:37:45.960 --> 00:37:47.845
<v Speaker 1>But because later on, we're going to add

00:37:47.845 --> 00:37:49.925
<v Speaker 1>a second server so we can already be

00:37:49.925 --> 00:37:51.365
<v Speaker 1>set up for for later.

00:37:53.765 --> 00:37:56.965
<v Speaker 0>Okay. So you're right. The instructions that say

00:37:56.965 --> 00:37:59.365
<v Speaker 0>create a package directory first called server.

00:37:59.880 --> 00:38:00.680
<v Speaker 0>I'm

00:38:00.680 --> 00:38:01.320
<v Speaker 0>assuming

00:38:02.200 --> 00:38:04.119
<v Speaker 0>this is for the queue module system. So

00:38:04.119 --> 00:38:06.119
<v Speaker 0>I will just do this. But if I'm

00:38:06.119 --> 00:38:07.799
<v Speaker 0>wrong, then maybe we should dive into that

00:38:07.799 --> 00:38:08.599
<v Speaker 0>a little bit.

00:38:09.559 --> 00:38:11.720
<v Speaker 1>It's it's so queue does play a role

00:38:11.720 --> 00:38:13.079
<v Speaker 1>like we

00:38:13.265 --> 00:38:16.065
<v Speaker 1>queue also follows, as as you probably know,

00:38:16.465 --> 00:38:18.785
<v Speaker 1>well, like, the a similar model as Go

00:38:18.785 --> 00:38:20.385
<v Speaker 1>that a directory

00:38:22.385 --> 00:38:24.865
<v Speaker 1>establishes a package and the package being, like,

00:38:24.865 --> 00:38:26.385
<v Speaker 1>a a unit of of

00:38:26.705 --> 00:38:27.985
<v Speaker 1>well, in this case, configuration.

00:38:28.390 --> 00:38:30.710
<v Speaker 1>We have the same concepts. We were it's

00:38:30.710 --> 00:38:32.470
<v Speaker 1>lucky. I guess we're lucky that we all

00:38:32.470 --> 00:38:34.310
<v Speaker 1>kind of follow the same semantics.

00:38:34.710 --> 00:38:37.109
<v Speaker 1>And and similarly, so server will be a

00:38:37.109 --> 00:38:38.869
<v Speaker 1>package, so it's something that you can refer

00:38:38.869 --> 00:38:41.670
<v Speaker 1>to. And that when we're done with these

00:38:41.195 --> 00:38:44.315
<v Speaker 1>first steps, it will have both the server

00:38:44.315 --> 00:38:46.715
<v Speaker 1>definition, which is what we're seeing in front

00:38:46.715 --> 00:38:48.235
<v Speaker 1>of us, but also the code of the

00:38:48.235 --> 00:38:48.875
<v Speaker 1>server.

00:38:49.115 --> 00:38:50.955
<v Speaker 1>And and that's maybe something that is a

00:38:50.955 --> 00:38:52.795
<v Speaker 1>little bit different from some of other tools

00:38:52.795 --> 00:38:53.515
<v Speaker 1>out there.

00:38:53.835 --> 00:38:55.994
<v Speaker 1>I know that Acorn also collocates

00:38:57.359 --> 00:38:58.720
<v Speaker 1>application definition

00:38:59.440 --> 00:39:00.720
<v Speaker 1>and and code,

00:39:01.760 --> 00:39:03.839
<v Speaker 1>but but we we do and and for

00:39:03.839 --> 00:39:06.160
<v Speaker 1>for a few reasons that I'm happy to

00:39:06.160 --> 00:39:07.839
<v Speaker 1>kinda go then more into.

00:39:08.400 --> 00:39:11.915
<v Speaker 0>Well, yeah. I mean, I'm 100% in agreement

00:39:11.915 --> 00:39:14.235
<v Speaker 0>with you and Acorn. Like, I have been

00:39:14.235 --> 00:39:16.635
<v Speaker 0>working with customers and clients for for years.

00:39:16.635 --> 00:39:18.715
<v Speaker 0>I always say you're deploying code to your

00:39:18.715 --> 00:39:20.475
<v Speaker 0>developer code should all live right next to

00:39:20.475 --> 00:39:22.315
<v Speaker 0>the code that is orchestrating and working with.

00:39:23.700 --> 00:39:26.100
<v Speaker 0>And it's amazing how many times you go

00:39:26.100 --> 00:39:28.260
<v Speaker 0>to companies or speak to people at conferences

00:39:28.260 --> 00:39:29.380
<v Speaker 0>and they're like, oh yeah, we have a

00:39:29.380 --> 00:39:30.820
<v Speaker 0>repository that keeps all of that. And you're

00:39:30.820 --> 00:39:33.620
<v Speaker 0>like, why is it your code? Yeah. You're

00:39:33.620 --> 00:39:35.540
<v Speaker 0>creating a boundary that I think it's just

00:39:35.540 --> 00:39:37.940
<v Speaker 0>it just impedes your ability to ship faster.

00:39:37.940 --> 00:39:38.100
<v Speaker 0>So

00:39:38.915 --> 00:39:40.835
<v Speaker 1>That's that's right. And and it's part of

00:39:40.835 --> 00:39:41.075
<v Speaker 1>those

00:39:41.635 --> 00:39:43.234
<v Speaker 1>it's it's a human pro it's a human

00:39:43.234 --> 00:39:44.435
<v Speaker 1>challenge. Right? Like, it's

00:39:45.875 --> 00:39:48.435
<v Speaker 1>probably someone didn't feel comfortable having those configurations

00:39:48.435 --> 00:39:50.035
<v Speaker 1>there, but it's we

00:39:50.515 --> 00:39:53.630
<v Speaker 1>care deeply about kinda helping teams kinda work

00:39:53.630 --> 00:39:55.310
<v Speaker 1>better together. So it's kinda part of our

00:39:55.310 --> 00:39:57.390
<v Speaker 1>design that these that these

00:39:58.430 --> 00:39:59.870
<v Speaker 1>live next to each other.

00:40:00.190 --> 00:40:02.270
<v Speaker 0>Alright. Well, I I will help you spread

00:40:02.270 --> 00:40:04.430
<v Speaker 0>that message as well as I can. Appreciate

00:40:04.430 --> 00:40:06.670
<v Speaker 0>it. With regards to the server definition,

00:40:07.295 --> 00:40:10.015
<v Speaker 0>I understand the name. Everything should have a

00:40:10.015 --> 00:40:11.695
<v Speaker 0>name even if sometimes we struggle to name

00:40:11.695 --> 00:40:13.935
<v Speaker 0>the name. I understand the service. This looks

00:40:13.935 --> 00:40:15.695
<v Speaker 0>to me like a Kubernetes service of a

00:40:15.695 --> 00:40:17.855
<v Speaker 0>core account and ingress that got it.

00:40:18.575 --> 00:40:21.375
<v Speaker 0>I don't know what integration goal is providing

00:40:21.375 --> 00:40:23.935
<v Speaker 0>here. So maybe you can tell us in

00:40:23.190 --> 00:40:24.230
<v Speaker 0>on on this.

00:40:24.710 --> 00:40:25.350
<v Speaker 1>Yeah.

00:40:26.550 --> 00:40:30.310
<v Speaker 1>I think the interesting it's it's useful to

00:40:31.910 --> 00:40:32.710
<v Speaker 1>kinda

00:40:33.030 --> 00:40:34.869
<v Speaker 1>and since this is kinda more I I

00:40:34.869 --> 00:40:36.150
<v Speaker 1>know that your audience also

00:40:37.335 --> 00:40:38.855
<v Speaker 1>of dives deep in into a lot of

00:40:38.855 --> 00:40:40.775
<v Speaker 1>these projects. I think it's useful to

00:40:41.095 --> 00:40:42.535
<v Speaker 1>think of our system

00:40:43.015 --> 00:40:43.735
<v Speaker 1>as

00:40:44.295 --> 00:40:46.375
<v Speaker 1>has a kind of simple to use

00:40:46.855 --> 00:40:49.175
<v Speaker 1>control surface. Like, you write configuration files like

00:40:49.175 --> 00:40:51.260
<v Speaker 1>these that are very simple, and and that's

00:40:51.260 --> 00:40:53.580
<v Speaker 1>part of the goal. But behind the scenes,

00:40:53.580 --> 00:40:55.180
<v Speaker 1>it's a programmable system.

00:40:55.740 --> 00:40:57.980
<v Speaker 1>So, actually, what happens when you say integration

00:40:57.980 --> 00:40:58.700
<v Speaker 1>go,

00:40:58.940 --> 00:40:59.980
<v Speaker 1>you kick off,

00:41:01.099 --> 00:41:02.460
<v Speaker 1>kind of a decorator,

00:41:02.540 --> 00:41:04.859
<v Speaker 1>something that is going to add more definitions

00:41:04.859 --> 00:41:05.580
<v Speaker 1>to your server.

00:41:06.145 --> 00:41:08.305
<v Speaker 1>And one of those definitions is

00:41:08.545 --> 00:41:09.585
<v Speaker 1>a binary

00:41:09.745 --> 00:41:11.825
<v Speaker 1>build rule. So we'll we'll,

00:41:12.065 --> 00:41:13.745
<v Speaker 1>if you use the short form as as

00:41:13.745 --> 00:41:16.145
<v Speaker 1>you're using here, as as the example suggests

00:41:16.145 --> 00:41:18.385
<v Speaker 1>you to do, we assume that the Go

00:41:18.385 --> 00:41:20.945
<v Speaker 1>code base lives alongside the server definition,

00:41:21.390 --> 00:41:23.470
<v Speaker 1>and then we're going to instantiate

00:41:23.549 --> 00:41:26.829
<v Speaker 1>a a build rule for for building that

00:41:26.829 --> 00:41:28.829
<v Speaker 1>Go server for the code that was living

00:41:28.829 --> 00:41:29.630
<v Speaker 1>next to it.

00:41:30.029 --> 00:41:32.109
<v Speaker 1>The code will come now, as part of

00:41:32.109 --> 00:41:32.910
<v Speaker 1>the example,

00:41:33.309 --> 00:41:34.990
<v Speaker 1>but that's what the integration Go,

00:41:35.309 --> 00:41:37.425
<v Speaker 1>in this case, does. It adds a few

00:41:37.425 --> 00:41:39.985
<v Speaker 1>other things. So these decorators can actually, for

00:41:39.985 --> 00:41:41.425
<v Speaker 1>example, add services.

00:41:41.505 --> 00:41:43.665
<v Speaker 1>So we have integration web,

00:41:43.985 --> 00:41:44.545
<v Speaker 1>which

00:41:45.345 --> 00:41:47.505
<v Speaker 1>kind of the production build

00:41:47.585 --> 00:41:48.465
<v Speaker 1>builds

00:41:48.465 --> 00:41:49.265
<v Speaker 1>static

00:41:49.265 --> 00:41:50.865
<v Speaker 1>files for for serving,

00:41:51.250 --> 00:41:53.250
<v Speaker 1>And you, as a user, don't need to

00:41:53.250 --> 00:41:55.730
<v Speaker 1>say, well, here's here's where these files are

00:41:55.730 --> 00:41:57.570
<v Speaker 1>being served. We actually, it is the integration

00:41:57.570 --> 00:41:59.090
<v Speaker 1>itself that is able to

00:41:59.410 --> 00:42:01.890
<v Speaker 1>emit that that definition for you.

00:42:02.850 --> 00:42:03.170
<v Speaker 0>Okay.

00:42:04.865 --> 00:42:06.305
<v Speaker 0>Let's work through this and see if we

00:42:06.305 --> 00:42:08.225
<v Speaker 0>can get something running then. So I'm gonna

00:42:08.225 --> 00:42:09.105
<v Speaker 0>copy

00:42:09.105 --> 00:42:10.625
<v Speaker 0>main dot go.

00:42:16.465 --> 00:42:18.385
<v Speaker 0>And I wasn't reading the instructions properly, but

00:42:18.385 --> 00:42:19.800
<v Speaker 0>I'm gonna assume it goes in the top

00:42:19.800 --> 00:42:20.440
<v Speaker 0>level.

00:42:20.840 --> 00:42:23.240
<v Speaker 0>That may have been a naive assumption.

00:42:25.000 --> 00:42:26.840
<v Speaker 1>It goes in into the same directory as

00:42:26.840 --> 00:42:28.760
<v Speaker 1>server, and then and maybe that's something we

00:42:28.760 --> 00:42:30.840
<v Speaker 1>should clarify in our in our instructions.

00:42:32.365 --> 00:42:33.005
<v Speaker 0>Okay.

00:42:33.485 --> 00:42:34.125
<v Speaker 0>Next,

00:42:35.805 --> 00:42:36.925
<v Speaker 0>are going to do

00:42:38.925 --> 00:42:40.765
<v Speaker 0>and our workspace route.

00:42:41.405 --> 00:42:42.125
<v Speaker 0>Okay.

00:42:44.125 --> 00:42:44.925
<v Speaker 0>That's here.

00:42:47.300 --> 00:42:48.980
<v Speaker 0>Which gives me a GoMod and a GoSum

00:42:48.980 --> 00:42:51.460
<v Speaker 0>here. So main.Go goes in server, but the

00:42:51.460 --> 00:42:53.620
<v Speaker 0>GoMod and GoSum go here. Is that correct?

00:42:54.180 --> 00:42:55.940
<v Speaker 1>Yeah. In this example, we did it like

00:42:55.940 --> 00:42:58.660
<v Speaker 1>this. You can have multiple

00:42:58.740 --> 00:42:59.540
<v Speaker 1>GoMods

00:42:59.540 --> 00:43:00.180
<v Speaker 1>if you prefer.

00:43:00.684 --> 00:43:03.005
<v Speaker 1>We we sometimes we see different teams do

00:43:03.005 --> 00:43:05.085
<v Speaker 1>different things where where we work with both

00:43:05.085 --> 00:43:06.525
<v Speaker 1>with both systems.

00:43:06.765 --> 00:43:08.285
<v Speaker 0>Okay. Or with both models.

00:43:09.005 --> 00:43:10.365
<v Speaker 0>Yeah. Okay. Sure.

00:43:11.244 --> 00:43:13.610
<v Speaker 0>I use Go Workspaces quite a lot these

00:43:13.610 --> 00:43:16.330
<v Speaker 0>days. Is that does Namespace just work that

00:43:16.330 --> 00:43:17.690
<v Speaker 0>with that as a box that it doesn't

00:43:17.690 --> 00:43:19.690
<v Speaker 0>really care that much? Like, especially in a

00:43:19.690 --> 00:43:21.770
<v Speaker 0>mono repository environment with that. Would that be

00:43:21.770 --> 00:43:22.010
<v Speaker 0>fine?

00:43:25.375 --> 00:43:27.935
<v Speaker 1>I'll be honest with you. I don't know

00:43:27.935 --> 00:43:29.695
<v Speaker 1>whether we would actually work out of the

00:43:29.695 --> 00:43:31.935
<v Speaker 1>box with Go Workspaces. We haven't tried it.

00:43:32.255 --> 00:43:34.335
<v Speaker 1>But we so the the

00:43:35.375 --> 00:43:37.535
<v Speaker 1>way that our Go integration works, it it

00:43:37.535 --> 00:43:40.260
<v Speaker 1>it looks up in the tree looking for

00:43:40.260 --> 00:43:42.420
<v Speaker 1>the closest Go mod, very much like Go

00:43:42.420 --> 00:43:44.420
<v Speaker 1>does, and then it uses that as a

00:43:44.420 --> 00:43:45.460
<v Speaker 1>root for building.

00:43:45.620 --> 00:43:47.860
<v Speaker 1>Because whenever you want to have a referencing

00:43:47.860 --> 00:43:50.020
<v Speaker 1>to other files, other packages from a versioning

00:43:50.020 --> 00:43:50.660
<v Speaker 1>perspective,

00:43:50.980 --> 00:43:52.660
<v Speaker 1>that kind of your Go mod defines that.

00:43:52.985 --> 00:43:54.425
<v Speaker 1>So we kind of do some of the

00:43:54.425 --> 00:43:56.505
<v Speaker 1>same things that Go Workspaces tries to do

00:43:56.505 --> 00:43:57.465
<v Speaker 1>out of the box,

00:43:58.585 --> 00:43:59.865
<v Speaker 1>but I I don't know if what what

00:43:59.865 --> 00:44:01.305
<v Speaker 1>would happen if you actually put a Go

00:44:01.305 --> 00:44:03.545
<v Speaker 1>Workspaces file in there. Okay. Well, that's not

00:44:03.545 --> 00:44:04.905
<v Speaker 0>something for us to do in a livestream,

00:44:04.905 --> 00:44:06.265
<v Speaker 0>but I'll I'll I'll play with that later

00:44:06.265 --> 00:44:07.970
<v Speaker 0>on. I'll let you know. Okay.

00:44:09.810 --> 00:44:11.089
<v Speaker 0>So now that we've done this, we're going

00:44:11.089 --> 00:44:13.170
<v Speaker 0>to run NS dev server.

00:44:13.329 --> 00:44:15.010
<v Speaker 0>Now before I run this,

00:44:15.250 --> 00:44:15.810
<v Speaker 0>we

00:44:17.650 --> 00:44:18.770
<v Speaker 0>have

00:44:20.545 --> 00:44:22.705
<v Speaker 0>a workspace definition,

00:44:23.505 --> 00:44:25.105
<v Speaker 0>which doesn't tell me much.

00:44:25.665 --> 00:44:27.505
<v Speaker 0>We have a main dot goal, which is

00:44:27.505 --> 00:44:28.785
<v Speaker 0>just an issue to peer.

00:44:29.985 --> 00:44:32.385
<v Speaker 0>We have some server dot queue that tells

00:44:32.385 --> 00:44:33.985
<v Speaker 0>it to build a goal. So

00:44:34.930 --> 00:44:36.450
<v Speaker 0>when I run NS

00:44:36.610 --> 00:44:39.730
<v Speaker 0>dev, it's gonna compel the go application,

00:44:40.210 --> 00:44:41.890
<v Speaker 0>build a container image,

00:44:42.050 --> 00:44:43.490
<v Speaker 0>deploy it to

00:44:43.890 --> 00:44:46.290
<v Speaker 0>a KCS cluster and expose it with a

00:44:46.290 --> 00:44:47.650
<v Speaker 0>service on the ingress endpoint.

00:44:48.875 --> 00:44:49.595
<v Speaker 1>Yep.

00:44:50.635 --> 00:44:52.155
<v Speaker 0>That's kinda neat. Okay.

00:44:54.234 --> 00:44:56.075
<v Speaker 0>And that's There's one more thing,

00:44:57.755 --> 00:44:59.595
<v Speaker 1>which is it also

00:45:00.555 --> 00:45:02.580
<v Speaker 1>like other tools that

00:45:02.580 --> 00:45:04.820
<v Speaker 1>are this is more common in the JavaScript

00:45:04.820 --> 00:45:06.420
<v Speaker 1>or TypeScript ecosystems.

00:45:06.900 --> 00:45:09.700
<v Speaker 1>But the difference between dev and other commands

00:45:09.700 --> 00:45:12.660
<v Speaker 1>that we have is that dev listens. So

00:45:12.660 --> 00:45:16.025
<v Speaker 1>dev is stateful. It as you're doing changes,

00:45:16.025 --> 00:45:18.265
<v Speaker 1>it will redeploy those changes as well.

00:45:18.984 --> 00:45:19.625
<v Speaker 0>Okay.

00:45:19.865 --> 00:45:22.825
<v Speaker 0>I'm curious about the server. I'm assuming that's

00:45:22.825 --> 00:45:24.744
<v Speaker 0>the directory, that's the package that we're deploying.

00:45:24.744 --> 00:45:26.585
<v Speaker 0>If I do NSDev, does it do

00:45:26.904 --> 00:45:27.785
<v Speaker 0>everything or nothing?

00:45:29.000 --> 00:45:31.240
<v Speaker 1>You can write with everything. Okay.

00:45:31.559 --> 00:45:33.960
<v Speaker 0>But but right now, we'll stick to to

00:45:33.960 --> 00:45:34.680
<v Speaker 0>server.

00:45:34.839 --> 00:45:36.520
<v Speaker 0>Well, that runs. We do have another question

00:45:36.520 --> 00:45:38.120
<v Speaker 0>from Diego in the chat.

00:45:38.839 --> 00:45:41.319
<v Speaker 0>Do we still need to write Kubernetes manifest

00:45:41.025 --> 00:45:43.505
<v Speaker 0>for persistent volumes for databases like Redis or

00:45:43.505 --> 00:45:44.625
<v Speaker 0>is it automated?

00:45:44.704 --> 00:45:46.945
<v Speaker 0>If not, how do we manage scaling?

00:45:49.424 --> 00:45:52.464
<v Speaker 1>You you actually, I you you hit one

00:45:52.464 --> 00:45:53.184
<v Speaker 1>of those bugs,

00:45:53.980 --> 00:45:55.500
<v Speaker 1>but I

00:45:57.340 --> 00:45:58.860
<v Speaker 1>think it had to do

00:45:59.180 --> 00:45:59.740
<v Speaker 1>with,

00:46:01.100 --> 00:46:02.300
<v Speaker 1>yeah, the the

00:46:02.540 --> 00:46:05.420
<v Speaker 1>the module name that you use for for

00:46:05.420 --> 00:46:06.140
<v Speaker 1>the workspace.

00:46:06.815 --> 00:46:08.575
<v Speaker 1>You didn't use what we have with with

00:46:08.575 --> 00:46:10.575
<v Speaker 0>queue before. That's that's my fault.

00:46:10.815 --> 00:46:11.375
<v Speaker 0>So

00:46:13.215 --> 00:46:13.855
<v Speaker 0>a

00:46:14.415 --> 00:46:15.855
<v Speaker 0>Namespace bug. Is that right?

00:46:16.095 --> 00:46:17.855
<v Speaker 1>Yeah. It should that should that should do

00:46:17.855 --> 00:46:19.055
<v Speaker 1>it. So the question

00:46:19.455 --> 00:46:20.895
<v Speaker 1>yeah. You can

00:46:21.320 --> 00:46:23.160
<v Speaker 1>there's kind of two two sides to this

00:46:23.160 --> 00:46:23.640
<v Speaker 1>question.

00:46:24.040 --> 00:46:25.640
<v Speaker 1>We know that there's a lot of folks

00:46:25.640 --> 00:46:27.240
<v Speaker 1>out there that already have

00:46:27.560 --> 00:46:30.280
<v Speaker 1>huge investments in in how they run their

00:46:30.280 --> 00:46:32.520
<v Speaker 1>applications and how they provision them, how they

00:46:32.520 --> 00:46:34.280
<v Speaker 1>build them, and we try

00:46:34.440 --> 00:46:36.360
<v Speaker 1>really hard to work well with those.

00:46:37.305 --> 00:46:39.785
<v Speaker 1>So for example, if you already have something

00:46:39.785 --> 00:46:42.105
<v Speaker 1>that is provisioned outside of Namespace,

00:46:42.185 --> 00:46:44.345
<v Speaker 1>Namespace can refer you can refer to it

00:46:44.345 --> 00:46:46.984
<v Speaker 1>through Namespace. We won't automate it, but it

00:46:46.984 --> 00:46:47.945
<v Speaker 1>it will just work.

00:46:49.170 --> 00:46:51.170
<v Speaker 1>Now when you kinda bring when you come

00:46:51.170 --> 00:46:52.770
<v Speaker 1>into our our ecosystem,

00:46:53.490 --> 00:46:55.810
<v Speaker 1>we do make certain things easier. So for

00:46:55.810 --> 00:46:57.810
<v Speaker 1>example, what you the the question was referring

00:46:57.810 --> 00:46:58.690
<v Speaker 1>to volumes.

00:46:58.770 --> 00:47:00.530
<v Speaker 1>You could can define volumes as part of

00:47:00.530 --> 00:47:02.609
<v Speaker 1>your application, and we'll manage those for you.

00:47:03.325 --> 00:47:03.965
<v Speaker 1>We'll,

00:47:04.205 --> 00:47:07.005
<v Speaker 1>set up, like, the the volume sources and

00:47:07.005 --> 00:47:08.445
<v Speaker 1>kind of the amounts,

00:47:09.005 --> 00:47:12.445
<v Speaker 1>appropriately into into the into the application container

00:47:12.445 --> 00:47:13.085
<v Speaker 1>as well.

00:47:13.725 --> 00:47:14.845
<v Speaker 1>We'll manage sizes.

00:47:15.290 --> 00:47:17.050
<v Speaker 1>And then something that you'll be able to

00:47:17.050 --> 00:47:18.330
<v Speaker 1>do is apply

00:47:18.490 --> 00:47:19.450
<v Speaker 1>modifiers.

00:47:19.690 --> 00:47:21.690
<v Speaker 1>This is not implemented yet. Actually, it was

00:47:21.690 --> 00:47:23.930
<v Speaker 1>an idea that you, David, had some time

00:47:23.930 --> 00:47:25.530
<v Speaker 1>ago that is still in the in the

00:47:25.530 --> 00:47:26.170
<v Speaker 1>queue.

00:47:27.210 --> 00:47:28.730
<v Speaker 1>You there's two ways that you can do

00:47:28.730 --> 00:47:29.290
<v Speaker 1>configuration,

00:47:29.585 --> 00:47:32.384
<v Speaker 1>and one of them is you can parametize

00:47:32.384 --> 00:47:33.505
<v Speaker 1>within queue.

00:47:33.744 --> 00:47:35.025
<v Speaker 1>So you can go to the queue file

00:47:35.025 --> 00:47:37.265
<v Speaker 1>and say, hey. If this environment is for

00:47:37.265 --> 00:47:38.065
<v Speaker 1>development,

00:47:39.105 --> 00:47:41.184
<v Speaker 1>do these settings. If this environment is for

00:47:41.184 --> 00:47:44.099
<v Speaker 1>production or is named Fubar, do these other

00:47:44.099 --> 00:47:45.859
<v Speaker 1>settings. So that's kind of one way of

00:47:45.859 --> 00:47:47.059
<v Speaker 1>doing parametization,

00:47:47.059 --> 00:47:48.980
<v Speaker 1>and we'll have a second one that is

00:47:48.980 --> 00:47:51.220
<v Speaker 1>based on the target environment. So if you

00:47:51.220 --> 00:47:53.539
<v Speaker 1>say that I'm deploying to production, and in

00:47:53.539 --> 00:47:55.859
<v Speaker 1>production, I want this application to have

00:47:56.424 --> 00:47:57.625
<v Speaker 1>one terabyte

00:47:57.704 --> 00:48:00.505
<v Speaker 1>of of data or storage available in in

00:48:00.505 --> 00:48:01.865
<v Speaker 1>its volume,

00:48:01.944 --> 00:48:03.785
<v Speaker 1>you'll be able to provide configuration for that

00:48:03.785 --> 00:48:05.865
<v Speaker 1>as well. But that's not implemented yet.

00:48:06.744 --> 00:48:07.865
<v Speaker 0>Okay. Awesome.

00:48:08.265 --> 00:48:09.865
<v Speaker 0>We also had a comment from your colleague

00:48:09.865 --> 00:48:11.910
<v Speaker 0>just saying that persistent volumes are modeled and

00:48:11.910 --> 00:48:14.470
<v Speaker 0>namespace configuration. So maybe we'll, I don't know

00:48:14.470 --> 00:48:16.150
<v Speaker 0>what's in the demo, but perhaps we'll get

00:48:16.150 --> 00:48:18.150
<v Speaker 0>to something that shows how that works.

00:48:18.869 --> 00:48:20.630
<v Speaker 0>Our NSDev server

00:48:20.790 --> 00:48:21.830
<v Speaker 0>now worked.

00:48:22.069 --> 00:48:23.510
<v Speaker 0>We have a URL,

00:48:25.510 --> 00:48:26.790
<v Speaker 0>which says hello world,

00:48:27.855 --> 00:48:29.535
<v Speaker 0>which is our web application.

00:48:30.815 --> 00:48:31.535
<v Speaker 0>So

00:48:31.695 --> 00:48:33.455
<v Speaker 0>I'm gonna go off script for just a

00:48:33.455 --> 00:48:35.215
<v Speaker 0>moment because you said something

00:48:35.615 --> 00:48:38.015
<v Speaker 0>that is it monitors your changes.

00:48:38.415 --> 00:48:39.135
<v Speaker 0>So

00:48:40.335 --> 00:48:41.855
<v Speaker 0>I'm gonna make a change

00:48:42.350 --> 00:48:43.950
<v Speaker 0>and I'm gonna go to the web browser.

00:48:43.950 --> 00:48:45.550
<v Speaker 0>I'm not gonna do anything else.

00:48:47.150 --> 00:48:48.590
<v Speaker 0>Hey. Look at that.

00:48:49.870 --> 00:48:51.310
<v Speaker 1>We knew that you're going to do that

00:48:51.310 --> 00:48:52.270
<v Speaker 1>change, and we've

00:48:54.065 --> 00:48:56.625
<v Speaker 0>Yes. You intercepted the CCB traffic on the

00:48:56.625 --> 00:48:59.425
<v Speaker 0>the redirect. Yeah. In your local network.

00:49:01.745 --> 00:49:03.505
<v Speaker 0>That that's neat. That's one of those common

00:49:03.505 --> 00:49:07.585
<v Speaker 0>frustrations. Right? With with especially with compiled deployment

00:49:07.260 --> 00:49:09.740
<v Speaker 0>and that developer experience is that typically you

00:49:09.740 --> 00:49:11.340
<v Speaker 0>have to stop the world to the recall

00:49:11.340 --> 00:49:13.260
<v Speaker 0>file, spread it back out.

00:49:13.580 --> 00:49:14.140
<v Speaker 0>But

00:49:14.780 --> 00:49:17.100
<v Speaker 0>that was almost magic to the point where

00:49:17.100 --> 00:49:18.860
<v Speaker 0>I made that change and it probably took

00:49:18.860 --> 00:49:20.705
<v Speaker 0>about four or five seconds. And I could

00:49:20.705 --> 00:49:22.065
<v Speaker 0>see it on my little

00:49:22.305 --> 00:49:24.945
<v Speaker 0>macro stage manager thing there. It was doing

00:49:24.945 --> 00:49:26.385
<v Speaker 0>stuff in the background. I don't really know.

00:49:26.385 --> 00:49:27.905
<v Speaker 0>I'm assuming it just rebuild the image and

00:49:27.905 --> 00:49:31.185
<v Speaker 0>swap them out. Yeah. Okay. Yep. For go,

00:49:31.185 --> 00:49:32.065
<v Speaker 1>we do that.

00:49:32.385 --> 00:49:34.705
<v Speaker 1>If you would use the Node. Js integration,

00:49:34.705 --> 00:49:36.880
<v Speaker 1>we would copy the files that are changed.

00:49:37.360 --> 00:49:37.920
<v Speaker 1>And

00:49:38.400 --> 00:49:40.800
<v Speaker 1>and also we try always to

00:49:41.040 --> 00:49:42.240
<v Speaker 1>find the right

00:49:42.640 --> 00:49:43.760
<v Speaker 1>trade off

00:49:44.480 --> 00:49:47.360
<v Speaker 1>with giving controls whenever whenever it makes sense.

00:49:47.360 --> 00:49:49.120
<v Speaker 1>So for example, for when we build a

00:49:49.120 --> 00:49:49.680
<v Speaker 1>Go image,

00:49:50.335 --> 00:49:52.575
<v Speaker 1>for folks that are familiar with Co,

00:49:53.375 --> 00:49:55.855
<v Speaker 1>we actually use a very similar method to

00:49:55.855 --> 00:49:58.735
<v Speaker 1>Co. We use a local Go toolchain

00:49:58.815 --> 00:50:00.575
<v Speaker 1>to build your binary,

00:50:00.815 --> 00:50:02.815
<v Speaker 1>and it is Namespace that then builds an

00:50:02.815 --> 00:50:05.055
<v Speaker 1>image fairly quickly and kinda pushes that into

00:50:05.055 --> 00:50:05.695
<v Speaker 1>the repository.

00:50:06.280 --> 00:50:08.280
<v Speaker 1>And and we're we we do a lot

00:50:08.280 --> 00:50:08.920
<v Speaker 1>of these

00:50:09.320 --> 00:50:11.160
<v Speaker 1>things where we try to kind of really

00:50:11.160 --> 00:50:13.240
<v Speaker 1>optimize for for the developer

00:50:14.360 --> 00:50:15.160
<v Speaker 1>experience.

00:50:15.160 --> 00:50:17.160
<v Speaker 1>What we also didn't see is that you

00:50:17.160 --> 00:50:19.640
<v Speaker 1>never probably in your machine, you have Go,

00:50:20.120 --> 00:50:21.560
<v Speaker 1>but you never had to install Go.

00:50:22.325 --> 00:50:24.724
<v Speaker 1>We went and fetched Go

00:50:24.964 --> 00:50:28.085
<v Speaker 1>the first time that you did NSDEV,

00:50:28.085 --> 00:50:30.244
<v Speaker 1>and we placed it in our little cache.

00:50:30.484 --> 00:50:33.125
<v Speaker 1>And whenever you're you're you're kinda building that

00:50:33.125 --> 00:50:35.700
<v Speaker 1>that version is being used, if you change

00:50:35.700 --> 00:50:37.860
<v Speaker 1>your application and you update your the Go

00:50:37.860 --> 00:50:40.420
<v Speaker 1>version that your application is using, then we'll

00:50:40.420 --> 00:50:42.180
<v Speaker 1>fetch a different version of Go.

00:50:43.140 --> 00:50:44.660
<v Speaker 1>And and, again, like, you don't need to

00:50:44.660 --> 00:50:45.780
<v Speaker 1>manage that yourself.

00:50:46.660 --> 00:50:47.300
<v Speaker 0>And

00:50:47.700 --> 00:50:48.740
<v Speaker 0>I guess you're

00:50:49.375 --> 00:50:51.695
<v Speaker 0>leading me on that question there. Like, what

00:50:51.695 --> 00:50:53.935
<v Speaker 0>languages are supported then? Like, it sounds like

00:50:53.935 --> 00:50:56.015
<v Speaker 0>go is it's got pretty solid support. I'm

00:50:56.015 --> 00:50:57.935
<v Speaker 0>assuming namespace is right and go your go

00:50:57.935 --> 00:51:00.495
<v Speaker 0>developers. I can assume assume assumptions

00:51:01.055 --> 00:51:02.575
<v Speaker 0>all the way here. But

00:51:03.210 --> 00:51:05.210
<v Speaker 0>you mentioned Node. Js as well. So like

00:51:05.210 --> 00:51:07.369
<v Speaker 0>what Yeah. What are those first class languages

00:51:07.369 --> 00:51:09.369
<v Speaker 0>where what does it look like for languages

00:51:09.369 --> 00:51:10.330
<v Speaker 0>aren't supported?

00:51:11.210 --> 00:51:13.450
<v Speaker 1>So we the integrations that we have at

00:51:13.450 --> 00:51:16.250
<v Speaker 1>the moment are go, Node. Js, and we

00:51:16.250 --> 00:51:17.290
<v Speaker 1>call it Dockerfile.

00:51:17.755 --> 00:51:20.155
<v Speaker 1>There there's one more, which is Shellscript, but

00:51:20.155 --> 00:51:21.595
<v Speaker 1>I'll get to that in a moment.

00:51:21.994 --> 00:51:24.475
<v Speaker 1>So with Dockerfile, you can you you can

00:51:24.475 --> 00:51:26.555
<v Speaker 1>write the Dockerfile to

00:51:26.635 --> 00:51:29.355
<v Speaker 1>support whatever that you want. And and remember,

00:51:29.355 --> 00:51:31.994
<v Speaker 1>when you say integration Go, we're actually what

00:51:31.994 --> 00:51:32.875
<v Speaker 1>it's doing, it's

00:51:33.510 --> 00:51:36.070
<v Speaker 1>writing some of those definitions for you, but

00:51:36.070 --> 00:51:37.830
<v Speaker 1>you can always write them from scratch. You

00:51:37.830 --> 00:51:39.910
<v Speaker 1>can have a server definition that has all

00:51:39.910 --> 00:51:41.990
<v Speaker 1>of the services specced out, all of the

00:51:41.990 --> 00:51:44.070
<v Speaker 1>volumes specced out, like, manually.

00:51:44.230 --> 00:51:46.025
<v Speaker 1>So you can go and use, I don't

00:51:46.025 --> 00:51:48.265
<v Speaker 1>know, build a Rust server, and and it

00:51:48.265 --> 00:51:49.705
<v Speaker 1>will work. You just have to write a

00:51:49.705 --> 00:51:50.505
<v Speaker 1>Dockerfile.

00:51:50.745 --> 00:51:53.065
<v Speaker 1>But we do believe that we can do

00:51:53.065 --> 00:51:55.625
<v Speaker 1>better for users with these integrations, and there's

00:51:55.625 --> 00:51:57.545
<v Speaker 1>a couple more that are planned out for

00:51:57.545 --> 00:51:59.865
<v Speaker 1>Java and Python in particular.

00:52:00.440 --> 00:52:02.280
<v Speaker 1>So those are probably the ones that will

00:52:02.280 --> 00:52:03.080
<v Speaker 1>come after.

00:52:03.320 --> 00:52:05.560
<v Speaker 1>But those will also be extensible. So folks

00:52:05.560 --> 00:52:07.320
<v Speaker 1>will also be able to write their own

00:52:07.480 --> 00:52:09.800
<v Speaker 1>and and contribute builders,

00:52:09.800 --> 00:52:10.600
<v Speaker 1>contribute

00:52:11.320 --> 00:52:13.240
<v Speaker 1>kind of deployment configurations

00:52:13.425 --> 00:52:15.425
<v Speaker 1>that make sense for those.

00:52:15.985 --> 00:52:18.625
<v Speaker 1>One of the things that this getting started

00:52:18.625 --> 00:52:20.225
<v Speaker 1>doesn't cover, but our

00:52:20.545 --> 00:52:21.985
<v Speaker 1>testing facilities,

00:52:22.145 --> 00:52:23.265
<v Speaker 1>we capture

00:52:23.665 --> 00:52:25.585
<v Speaker 1>information out of the servers

00:52:25.745 --> 00:52:27.920
<v Speaker 1>after a test is run, And that's something

00:52:27.920 --> 00:52:31.040
<v Speaker 1>that the integration can tell us about. Like,

00:52:31.040 --> 00:52:33.360
<v Speaker 1>oh, this is a Go server. It can

00:52:33.360 --> 00:52:35.360
<v Speaker 1>you know, you can run pprof

00:52:35.600 --> 00:52:37.680
<v Speaker 1>against this endpoint and go and fetch some

00:52:37.680 --> 00:52:39.840
<v Speaker 1>some information out of that. So an integration

00:52:39.840 --> 00:52:41.280
<v Speaker 1>will be able to do things like that

00:52:41.280 --> 00:52:41.520
<v Speaker 1>as well.

00:52:42.414 --> 00:52:44.414
<v Speaker 0>Okay. So when you said that you download,

00:52:44.414 --> 00:52:46.174
<v Speaker 0>go to a local store and you use

00:52:46.174 --> 00:52:47.934
<v Speaker 0>that, that's really just for cool. Right? You

00:52:48.015 --> 00:52:49.934
<v Speaker 0>there's no need for you to download Rust

00:52:49.934 --> 00:52:51.615
<v Speaker 0>and do stuff or any other language on

00:52:51.615 --> 00:52:53.535
<v Speaker 0>time because that all happens in the container.

00:52:54.270 --> 00:52:54.910
<v Speaker 0>Yeah.

00:52:55.630 --> 00:52:56.750
<v Speaker 1>So we we

00:52:57.790 --> 00:53:00.110
<v Speaker 1>in this right now, we haven't used BuildKit

00:53:00.110 --> 00:53:00.830
<v Speaker 1>so far.

00:53:01.390 --> 00:53:03.790
<v Speaker 1>There there will be cases where we're using

00:53:04.190 --> 00:53:06.350
<v Speaker 1>BuildKit, we're building things in a container.

00:53:07.164 --> 00:53:08.365
<v Speaker 1>But for Go,

00:53:08.605 --> 00:53:10.045
<v Speaker 1>the development model

00:53:10.924 --> 00:53:11.964
<v Speaker 1>doesn't use

00:53:12.125 --> 00:53:14.045
<v Speaker 1>a container for building. If you run it

00:53:14.045 --> 00:53:14.925
<v Speaker 1>in CI,

00:53:15.244 --> 00:53:16.924
<v Speaker 1>then it will automatically

00:53:16.924 --> 00:53:17.565
<v Speaker 1>use

00:53:17.724 --> 00:53:20.125
<v Speaker 1>BuildKit, so it will kind of run-in a

00:53:20.125 --> 00:53:22.045
<v Speaker 1>container. So, yeah, it depends a little bit

00:53:22.045 --> 00:53:23.590
<v Speaker 1>on on

00:53:23.990 --> 00:53:25.910
<v Speaker 1>the thing that we're that we're building.

00:53:26.150 --> 00:53:28.150
<v Speaker 1>And this system that we have, we we

00:53:28.150 --> 00:53:28.870
<v Speaker 1>we

00:53:28.950 --> 00:53:31.030
<v Speaker 1>kinda we thought about it, but we actually

00:53:31.030 --> 00:53:33.030
<v Speaker 1>have since learned that a few other companies

00:53:33.030 --> 00:53:33.830
<v Speaker 1>are using

00:53:34.390 --> 00:53:36.710
<v Speaker 1>similar system. Cash App has

00:53:37.695 --> 00:53:40.175
<v Speaker 1>something that over open source called Hermit,

00:53:40.335 --> 00:53:42.735
<v Speaker 1>which which is an ability it gives you

00:53:42.735 --> 00:53:43.775
<v Speaker 1>the ability to

00:53:44.735 --> 00:53:48.495
<v Speaker 1>basically manage kind of pre already released software

00:53:48.575 --> 00:53:50.815
<v Speaker 1>in a way that it doesn't pollute your

00:53:50.815 --> 00:53:52.895
<v Speaker 1>your

00:53:51.970 --> 00:53:53.330
<v Speaker 1>your workstation,

00:53:53.330 --> 00:53:54.690
<v Speaker 1>and and you have a lot of control

00:53:54.690 --> 00:53:56.770
<v Speaker 1>over those versions. And that's similar thing that

00:53:56.770 --> 00:53:59.970
<v Speaker 1>you're seeing here. If you run maybe just

00:53:59.970 --> 00:54:01.250
<v Speaker 1>to show it once more,

00:54:02.530 --> 00:54:04.450
<v Speaker 1>you you can can leave this one, and

00:54:04.450 --> 00:54:06.355
<v Speaker 1>you can run n s

00:54:06.675 --> 00:54:08.995
<v Speaker 1>t for tools or n s tools and

00:54:08.995 --> 00:54:10.035
<v Speaker 1>kubectl,

00:54:10.755 --> 00:54:13.235
<v Speaker 1>and then just use get pod if if

00:54:13.235 --> 00:54:13.875
<v Speaker 1>you want.

00:54:15.635 --> 00:54:17.315
<v Speaker 0>I I don't know how to kubectl.

00:54:17.315 --> 00:54:18.355
<v Speaker 0>So

00:54:18.835 --> 00:54:20.595
<v Speaker 1>you see here, we're actually doing exactly the

00:54:20.595 --> 00:54:23.470
<v Speaker 1>same thing. We are getting kubectl,

00:54:23.710 --> 00:54:27.069
<v Speaker 1>for you, and, then we're we're running it.

00:54:27.069 --> 00:54:28.750
<v Speaker 1>And by default, when you run when you

00:54:28.750 --> 00:54:31.230
<v Speaker 1>use kubectl through NS, it will be configured

00:54:31.230 --> 00:54:33.710
<v Speaker 1>with the right namespace and and and the

00:54:33.710 --> 00:54:35.630
<v Speaker 1>right context and and all of that so

00:54:35.630 --> 00:54:37.295
<v Speaker 1>that you don't have to kind of think

00:54:37.295 --> 00:54:39.215
<v Speaker 1>about it. But there's always this idea that

00:54:39.295 --> 00:54:40.735
<v Speaker 1>you don't need to go and figure out

00:54:40.735 --> 00:54:41.775
<v Speaker 1>what to download.

00:54:42.335 --> 00:54:44.895
<v Speaker 1>We'll help you download, and we can manage

00:54:44.895 --> 00:54:47.455
<v Speaker 1>those downloads for you those dependencies for you.

00:54:48.175 --> 00:54:50.575
<v Speaker 0>Okay. We have a question on the chat

00:54:50.575 --> 00:54:52.655
<v Speaker 0>related to the it's gonna CI side of

00:54:52.380 --> 00:54:54.460
<v Speaker 0>things here, but George is asking, will there

00:54:54.460 --> 00:54:56.380
<v Speaker 0>be a base image of namespace that could

00:54:56.380 --> 00:54:58.220
<v Speaker 0>be used at a build server such as

00:54:58.220 --> 00:54:59.180
<v Speaker 0>GitLab?

00:55:01.339 --> 00:55:03.020
<v Speaker 0>Would that be an interesting question.

00:55:03.579 --> 00:55:04.539
<v Speaker 1>So

00:55:04.539 --> 00:55:07.815
<v Speaker 1>right now, the only distribution mechanism that we

00:55:07.815 --> 00:55:10.535
<v Speaker 1>have for Namespace itself is the binary. We

00:55:10.535 --> 00:55:11.895
<v Speaker 1>don't yet have

00:55:12.135 --> 00:55:13.975
<v Speaker 1>base images, but it would make sense that

00:55:13.975 --> 00:55:15.415
<v Speaker 1>we would have a base image. So I

00:55:15.415 --> 00:55:17.335
<v Speaker 1>think the answer is yes. We should have

00:55:17.335 --> 00:55:18.935
<v Speaker 1>one, but we don't have it yet.

00:55:19.700 --> 00:55:21.940
<v Speaker 0>Alright. Awesome. Hope that helps, Sean.

00:55:22.339 --> 00:55:23.060
<v Speaker 0>Okay.

00:55:24.019 --> 00:55:26.660
<v Speaker 0>Let's go back to our

00:55:26.980 --> 00:55:28.099
<v Speaker 0>our guide.

00:55:28.500 --> 00:55:29.220
<v Speaker 0>So

00:55:29.779 --> 00:55:32.420
<v Speaker 0>next, it wants us to okay. We've seen

00:55:32.420 --> 00:55:33.460
<v Speaker 0>that. We've changed it.

00:55:34.215 --> 00:55:35.655
<v Speaker 0>Is it gonna ask me to change it

00:55:35.655 --> 00:55:38.375
<v Speaker 0>next? No. Okay. Cool. New new thing.

00:55:38.615 --> 00:55:41.415
<v Speaker 0>We're gonna add menu to our setup.

00:55:42.615 --> 00:55:44.775
<v Speaker 0>So is this a new server?

00:55:46.215 --> 00:55:46.855
<v Speaker 1>Yes.

00:55:47.015 --> 00:55:47.415
<v Speaker 0>Okay.

00:55:48.420 --> 00:55:50.500
<v Speaker 0>So when we use the term server and

00:55:50.500 --> 00:55:54.339
<v Speaker 0>namespace world, this is a software component, a

00:55:54.339 --> 00:55:55.940
<v Speaker 0>package, something like that.

00:55:56.820 --> 00:55:59.619
<v Speaker 1>Yeah. A package can have multiple things. We

00:55:59.619 --> 00:56:00.660
<v Speaker 1>have servers,

00:56:00.820 --> 00:56:01.780
<v Speaker 1>we have tests,

00:56:02.295 --> 00:56:03.735
<v Speaker 1>we have binaries,

00:56:04.454 --> 00:56:06.214
<v Speaker 1>and and then these are the things that

00:56:06.214 --> 00:56:06.855
<v Speaker 1>live

00:56:07.095 --> 00:56:08.615
<v Speaker 1>so server is a type of thing that

00:56:08.615 --> 00:56:10.855
<v Speaker 1>lives in in a a package, but you

00:56:10.855 --> 00:56:11.575
<v Speaker 1>can have others.

00:56:13.990 --> 00:56:14.630
<v Speaker 0>Okay.

00:56:14.950 --> 00:56:16.630
<v Speaker 0>I've decided to call the file this time

00:56:16.630 --> 00:56:18.310
<v Speaker 0>random dot queue because I don't think it

00:56:18.310 --> 00:56:19.990
<v Speaker 0>cares and I wanted to confirm. But if

00:56:19.990 --> 00:56:21.590
<v Speaker 0>that is wrong, please feel free to just

00:56:21.590 --> 00:56:23.190
<v Speaker 0>tell me to shop and rename it.

00:56:23.510 --> 00:56:24.150
<v Speaker 1>We can try it.

00:56:26.835 --> 00:56:28.595
<v Speaker 0>Again, we have a name, we have an

00:56:28.595 --> 00:56:31.234
<v Speaker 0>image, we have no integration this time, but

00:56:31.234 --> 00:56:33.315
<v Speaker 0>we do have something called class stateful.

00:56:33.715 --> 00:56:35.875
<v Speaker 0>And then we have what I suspect is

00:56:35.875 --> 00:56:37.715
<v Speaker 0>familiar to everyone. We have the ability to

00:56:37.715 --> 00:56:39.715
<v Speaker 0>do environment, our services and mounts. This feels

00:56:39.715 --> 00:56:42.869
<v Speaker 0>very Kubernetes deployment a. So let's focus on

00:56:42.869 --> 00:56:44.230
<v Speaker 0>the class stateful.

00:56:45.349 --> 00:56:47.990
<v Speaker 1>Yeah. It's it's another one of those decorators.

00:56:48.310 --> 00:56:51.190
<v Speaker 1>In this case, it's not language specific, it's

00:56:51.190 --> 00:56:52.070
<v Speaker 1>behavior specific.

00:56:52.805 --> 00:56:54.085
<v Speaker 1>And it will

00:56:54.405 --> 00:56:56.965
<v Speaker 1>add a couple tests to our server. So

00:56:56.965 --> 00:56:58.965
<v Speaker 1>for example, if you want to use a

00:56:58.965 --> 00:57:00.085
<v Speaker 1>persistent volume,

00:57:00.565 --> 00:57:02.485
<v Speaker 1>you need to you're you need to have

00:57:02.485 --> 00:57:05.660
<v Speaker 1>a stateful class declared. You or else we

00:57:05.660 --> 00:57:07.900
<v Speaker 1>won't know exactly how or how you want

00:57:07.900 --> 00:57:09.420
<v Speaker 1>to manage that attached

00:57:09.420 --> 00:57:09.980
<v Speaker 1>storage.

00:57:11.340 --> 00:57:13.580
<v Speaker 1>It will also as you could imagine, when

00:57:13.580 --> 00:57:15.660
<v Speaker 1>you're deploying to Kubernetes, it will instantiate a

00:57:15.660 --> 00:57:19.980
<v Speaker 1>stateful set while other servers will instantiate deployments.

00:57:21.195 --> 00:57:23.835
<v Speaker 1>But even those are not fully set, like,

00:57:23.835 --> 00:57:24.955
<v Speaker 1>we we go from

00:57:25.355 --> 00:57:27.275
<v Speaker 1>what's the intent of the user, that's what

00:57:27.275 --> 00:57:29.675
<v Speaker 1>we're trying to capture here. Like, okay, you

00:57:29.675 --> 00:57:31.595
<v Speaker 1>want a stateful server.

00:57:31.755 --> 00:57:34.795
<v Speaker 1>And then depending on the current deployment strategy,

00:57:34.795 --> 00:57:37.420
<v Speaker 1>we'll we'll might be doing different things. So

00:57:37.420 --> 00:57:39.820
<v Speaker 1>in development, we'll do a stateful set. In

00:57:39.820 --> 00:57:41.900
<v Speaker 1>a test, we actually just deploy a single

00:57:41.900 --> 00:57:44.060
<v Speaker 1>pod with with this server.

00:57:45.260 --> 00:57:45.980
<v Speaker 0>Okay.

00:57:47.580 --> 00:57:50.620
<v Speaker 0>So the integrations and the languages that support,

00:57:50.795 --> 00:57:53.355
<v Speaker 0>there's a finite list. I understand that. The

00:57:53.355 --> 00:57:56.075
<v Speaker 0>classes, what's the discovery method for those? How

00:57:56.075 --> 00:57:57.915
<v Speaker 0>do people work out which classes are available

00:57:57.915 --> 00:57:59.195
<v Speaker 0>for their servers?

00:57:59.835 --> 00:58:00.955
<v Speaker 1>Yeah. Good

00:58:01.355 --> 00:58:01.995
<v Speaker 1>question.

00:58:02.795 --> 00:58:03.435
<v Speaker 1>We

00:58:03.675 --> 00:58:05.915
<v Speaker 1>we've been working we we we chat a

00:58:05.915 --> 00:58:07.270
<v Speaker 1>lot with the Q team.

00:58:07.670 --> 00:58:09.830
<v Speaker 1>We're big fans of Q.

00:58:10.470 --> 00:58:11.910
<v Speaker 1>One of the things that is

00:58:13.190 --> 00:58:15.670
<v Speaker 1>starting to surface in that space is a

00:58:16.069 --> 00:58:16.790
<v Speaker 1>powerful

00:58:17.109 --> 00:58:18.150
<v Speaker 1>LSP,

00:58:18.230 --> 00:58:19.990
<v Speaker 1>so we want to have integration to do

00:58:19.990 --> 00:58:20.710
<v Speaker 1>Versus Code.

00:58:21.255 --> 00:58:24.135
<v Speaker 1>And we've been designing our configuration

00:58:24.135 --> 00:58:26.775
<v Speaker 1>to be as standard queue as possible

00:58:26.934 --> 00:58:29.095
<v Speaker 1>so that we can benefit from from and

00:58:29.095 --> 00:58:31.494
<v Speaker 1>contribute to that ecosystem as well. So we

00:58:31.494 --> 00:58:33.414
<v Speaker 1>don't have that yet. We actually had a

00:58:33.414 --> 00:58:35.335
<v Speaker 1>version of an LSP, but it wasn't

00:58:36.450 --> 00:58:38.130
<v Speaker 1>with some changes that we've been doing, it

00:58:38.130 --> 00:58:40.210
<v Speaker 1>hasn't kind of kept up to date. But

00:58:40.210 --> 00:58:42.050
<v Speaker 1>that would be the discovery or or one

00:58:42.050 --> 00:58:44.050
<v Speaker 1>of the discovery mechanisms that you would have.

00:58:44.050 --> 00:58:46.290
<v Speaker 1>And then, obviously, we also have a syntax

00:58:46.290 --> 00:58:47.650
<v Speaker 1>reference in our documentation.

00:58:48.444 --> 00:58:50.365
<v Speaker 1>We're also happy to hear ideas of how

00:58:50.365 --> 00:58:51.405
<v Speaker 1>other folks

00:58:52.365 --> 00:58:54.125
<v Speaker 1>kinda prefer to to kind of get to

00:58:54.125 --> 00:58:56.365
<v Speaker 1>learn about these concepts. We we're trying to

00:58:56.365 --> 00:58:58.285
<v Speaker 1>do a mix of documentation

00:58:58.444 --> 00:58:59.405
<v Speaker 1>examples,

00:58:59.484 --> 00:59:01.565
<v Speaker 1>and then

00:59:00.750 --> 00:59:02.590
<v Speaker 1>in the near future also

00:59:02.830 --> 00:59:05.150
<v Speaker 1>integration into into editors.

00:59:05.790 --> 00:59:06.430
<v Speaker 0>Okay.

00:59:06.590 --> 00:59:07.310
<v Speaker 0>Awesome.

00:59:08.030 --> 00:59:09.710
<v Speaker 0>Hey. And those be for a second because

00:59:09.710 --> 00:59:10.910
<v Speaker 0>this is a question I don't think it's

00:59:10.910 --> 00:59:12.990
<v Speaker 0>gonna make sense to anyone else besides you

00:59:12.990 --> 00:59:14.350
<v Speaker 0>and your team. But

00:59:14.830 --> 00:59:17.070
<v Speaker 0>why server colon

00:59:16.725 --> 00:59:17.925
<v Speaker 0>rather than

00:59:18.965 --> 00:59:20.805
<v Speaker 0>like a queue definition?

00:59:20.885 --> 00:59:22.405
<v Speaker 0>Like, what's the

00:59:22.805 --> 00:59:24.645
<v Speaker 0>because I as soon as you said LSP

00:59:24.645 --> 00:59:26.165
<v Speaker 0>and standard queue, I was like, oh, but

00:59:26.165 --> 00:59:27.205
<v Speaker 0>how does it know

00:59:27.525 --> 00:59:28.245
<v Speaker 0>this

00:59:28.725 --> 00:59:30.725
<v Speaker 0>the types for the server definition? Yeah. We

00:59:30.725 --> 00:59:32.760
<v Speaker 0>haven't really used that. So is that I

00:59:32.760 --> 00:59:34.920
<v Speaker 0>I was just curious. That's all. Yeah. So

00:59:34.920 --> 00:59:35.640
<v Speaker 1>that's that's

00:59:36.920 --> 00:59:39.160
<v Speaker 1>you're you're hitting exactly

00:59:39.320 --> 00:59:42.120
<v Speaker 1>why our previous LSP work and currently doesn't

00:59:42.120 --> 00:59:43.720
<v Speaker 1>work. So we

00:59:44.200 --> 00:59:46.440
<v Speaker 1>the the first version of namespace

00:59:47.015 --> 00:59:49.735
<v Speaker 1>requires you to do those uni unification. So

00:59:49.735 --> 00:59:51.495
<v Speaker 1>you would have to say, hey. This is

00:59:51.495 --> 00:59:53.895
<v Speaker 1>a server that is unified with this

00:59:54.455 --> 00:59:57.255
<v Speaker 1>data type as well that kind of serves

00:59:57.255 --> 00:59:59.975
<v Speaker 1>as as a type definition in queue. So

00:59:59.975 --> 01:00:02.460
<v Speaker 1>you would have this server is a doll

01:00:02.620 --> 01:00:04.140
<v Speaker 1>hash server and

01:00:04.460 --> 01:00:06.300
<v Speaker 1>which is very common and folks that are

01:00:06.300 --> 01:00:08.380
<v Speaker 1>familiar with queue are are very familiar with.

01:00:08.540 --> 01:00:11.260
<v Speaker 1>But we found that to kinda be distracting,

01:00:11.260 --> 01:00:11.820
<v Speaker 1>honestly,

01:00:12.220 --> 01:00:14.060
<v Speaker 1>and as we're kind of getting people to

01:00:14.060 --> 01:00:15.420
<v Speaker 1>get to know about namespace.

01:00:16.025 --> 01:00:18.505
<v Speaker 1>So we've removed the need for that for

01:00:18.505 --> 01:00:20.585
<v Speaker 1>now. And what we've worked with the queue

01:00:20.585 --> 01:00:22.505
<v Speaker 1>team is that we'll have, this is not

01:00:22.505 --> 01:00:24.665
<v Speaker 1>implemented in queue yet, but we'll have the

01:00:24.665 --> 01:00:27.705
<v Speaker 1>ability to define at the module level which

01:00:27.705 --> 01:00:30.665
<v Speaker 1>base types are unified with a package.

01:00:31.070 --> 01:00:32.590
<v Speaker 1>So there will be a kind of a

01:00:32.590 --> 01:00:34.750
<v Speaker 1>base package, if you will, that we can

01:00:34.750 --> 01:00:36.830
<v Speaker 1>define, and then we say, well, if there's

01:00:36.830 --> 01:00:37.630
<v Speaker 1>a server,

01:00:37.790 --> 01:00:39.630
<v Speaker 1>that server is preunified

01:00:39.630 --> 01:00:41.230
<v Speaker 1>with hash server.

01:00:41.470 --> 01:00:44.110
<v Speaker 1>If there's a test, that's preunified with hash

01:00:44.110 --> 01:00:46.355
<v Speaker 1>test. And that's how the LSP then will

01:00:46.355 --> 01:00:48.195
<v Speaker 1>know because it will see kind of the

01:00:48.195 --> 01:00:49.155
<v Speaker 1>unification.

01:00:49.715 --> 01:00:50.675
<v Speaker 0>Alright. Next.

01:00:51.315 --> 01:00:52.515
<v Speaker 0>Cool. Thank you.

01:00:53.555 --> 01:00:54.115
<v Speaker 0>So

01:00:54.435 --> 01:00:56.595
<v Speaker 0>let's see if my random dot queue worked

01:00:56.595 --> 01:00:57.235
<v Speaker 0>then.

01:00:57.715 --> 01:00:58.435
<v Speaker 0>I'm assuming

01:00:59.049 --> 01:01:00.730
<v Speaker 0>I can run dev

01:01:00.730 --> 01:01:02.490
<v Speaker 0>and we call this menu.

01:01:02.970 --> 01:01:03.609
<v Speaker 0>Mhmm.

01:01:06.410 --> 01:01:07.690
<v Speaker 0>And it's good to just pull in the

01:01:07.690 --> 01:01:08.570
<v Speaker 0>menu image.

01:01:09.289 --> 01:01:10.089
<v Speaker 1>One

01:01:11.049 --> 01:01:12.890
<v Speaker 1>thing that we also don't

01:01:13.369 --> 01:01:16.089
<v Speaker 1>we don't really

01:01:15.985 --> 01:01:18.465
<v Speaker 1>it's not perhaps obvious to to folks that

01:01:18.465 --> 01:01:19.505
<v Speaker 1>are that are

01:01:19.744 --> 01:01:20.385
<v Speaker 1>seeing,

01:01:20.785 --> 01:01:21.825
<v Speaker 1>but your

01:01:22.225 --> 01:01:24.065
<v Speaker 1>machine, you're running I guess this is an

01:01:24.065 --> 01:01:25.585
<v Speaker 1>m one or m two

01:01:26.305 --> 01:01:26.945
<v Speaker 1>Mac.

01:01:27.345 --> 01:01:28.145
<v Speaker 1>And we

01:01:29.470 --> 01:01:30.990
<v Speaker 1>what we did was we kind of used

01:01:30.990 --> 01:01:33.390
<v Speaker 1>that information, like, know the environment that we're

01:01:33.390 --> 01:01:37.150
<v Speaker 1>deploying to to to pull and manage images

01:01:37.390 --> 01:01:38.350
<v Speaker 1>automatically.

01:01:38.510 --> 01:01:40.590
<v Speaker 1>So you never have to think about

01:01:40.910 --> 01:01:43.244
<v Speaker 1>well, obviously, there are cases in a in

01:01:43.244 --> 01:01:45.405
<v Speaker 1>a developer's life cycle that you might need

01:01:45.405 --> 01:01:47.244
<v Speaker 1>to know about the platform, but most of

01:01:47.244 --> 01:01:49.325
<v Speaker 1>the times, you don't need to manage platforms.

01:01:49.405 --> 01:01:50.685
<v Speaker 1>So if you'd go and do

01:01:51.005 --> 01:01:51.885
<v Speaker 1>prepare

01:01:52.125 --> 01:01:55.005
<v Speaker 1>EKS, for example, and your EKS nodes are

01:01:55.005 --> 01:01:58.820
<v Speaker 1>only x eighty six sixty four, we'll automatically

01:01:58.900 --> 01:02:01.380
<v Speaker 1>build for x eighty six sixty four and

01:02:01.380 --> 01:02:02.900
<v Speaker 1>deploy images of that

01:02:03.300 --> 01:02:04.660
<v Speaker 1>target platform,

01:02:04.740 --> 01:02:07.380
<v Speaker 1>which we obtained from the from the Kubernetes

01:02:07.380 --> 01:02:09.620
<v Speaker 1>clusters. We actually build

01:02:09.620 --> 01:02:12.015
<v Speaker 1>for that cluster. And we know that we're

01:02:12.015 --> 01:02:13.775
<v Speaker 1>building for Linux

01:02:13.855 --> 01:02:15.935
<v Speaker 1>because that's what's running inside of Docker,

01:02:16.335 --> 01:02:17.455
<v Speaker 1>ARM 64.

01:02:17.695 --> 01:02:18.815
<v Speaker 0>What do you do if it's not a

01:02:18.815 --> 01:02:20.015
<v Speaker 0>homogenous cluster?

01:02:20.815 --> 01:02:23.550
<v Speaker 1>We do a multiplatform builds. Nice.

01:02:23.870 --> 01:02:26.110
<v Speaker 1>So we unify over all of the platforms

01:02:26.110 --> 01:02:28.030
<v Speaker 1>that we see in the cluster,

01:02:28.190 --> 01:02:29.950
<v Speaker 1>and and we build for all of them.

01:02:30.350 --> 01:02:32.350
<v Speaker 1>And and, yeah, so that's something that Namespace

01:02:32.350 --> 01:02:35.230
<v Speaker 1>manages for you. It automatically generates indexes.

01:02:35.230 --> 01:02:36.350
<v Speaker 1>It parallelizes,

01:02:36.350 --> 01:02:37.630
<v Speaker 1>like, multi platform builds.

01:02:42.065 --> 01:02:44.065
<v Speaker 0>I discovered some sort of UI that I

01:02:44.065 --> 01:02:45.425
<v Speaker 0>didn't mean to click on, but I have

01:02:45.425 --> 01:02:46.145
<v Speaker 0>clicked on.

01:02:47.345 --> 01:02:49.505
<v Speaker 1>Yeah. This is a early stage of of

01:02:49.505 --> 01:02:50.625
<v Speaker 1>something that we

01:02:51.265 --> 01:02:53.105
<v Speaker 1>expect to be more

01:02:55.680 --> 01:02:58.000
<v Speaker 1>that folks will interact with with more over

01:02:58.000 --> 01:02:58.560
<v Speaker 1>time.

01:02:59.040 --> 01:03:01.200
<v Speaker 1>As you see, it's it's it like, the

01:03:01.200 --> 01:03:02.960
<v Speaker 1>the bits on the bottom are are not

01:03:02.960 --> 01:03:03.840
<v Speaker 1>really working,

01:03:04.560 --> 01:03:05.920
<v Speaker 1>so you may even have to

01:03:07.395 --> 01:03:09.475
<v Speaker 1>I I actually don't know if if if

01:03:09.475 --> 01:03:11.235
<v Speaker 1>you may have to go back. But

01:03:12.355 --> 01:03:14.035
<v Speaker 1>what what's one of the challenges that we

01:03:14.035 --> 01:03:16.115
<v Speaker 1>face as developers of this kind of multi

01:03:16.115 --> 01:03:17.315
<v Speaker 1>server world

01:03:17.315 --> 01:03:18.035
<v Speaker 1>is

01:03:18.195 --> 01:03:20.650
<v Speaker 1>there's so many logs. There's so many terminals.

01:03:20.650 --> 01:03:23.130
<v Speaker 1>There's, how do I there's so many ports.

01:03:23.130 --> 01:03:24.890
<v Speaker 1>Like, how do I manage all of this?

01:03:24.890 --> 01:03:27.450
<v Speaker 1>And our take is if you say that

01:03:27.450 --> 01:03:28.490
<v Speaker 1>there's a service,

01:03:28.970 --> 01:03:30.970
<v Speaker 1>and by default, we assume that the service

01:03:30.970 --> 01:03:33.610
<v Speaker 1>has a particular kinda meaning for you as

01:03:33.610 --> 01:03:36.715
<v Speaker 1>a developer, we automatically forward it. So

01:03:37.355 --> 01:03:39.755
<v Speaker 1>you're connecting inside of the cluster that is

01:03:39.755 --> 01:03:41.835
<v Speaker 1>running inside of Docker. So this is not

01:03:41.835 --> 01:03:44.235
<v Speaker 1>something that is available in your local network.

01:03:44.235 --> 01:03:46.715
<v Speaker 1>We actually are doing that port forward automatically

01:03:46.715 --> 01:03:47.195
<v Speaker 1>for you.

01:03:47.960 --> 01:03:50.520
<v Speaker 1>If you press the server, you'll get logs.

01:03:50.760 --> 01:03:52.680
<v Speaker 1>If you go into the terminal tab, you

01:03:52.680 --> 01:03:53.640
<v Speaker 1>get a terminal.

01:03:54.359 --> 01:03:55.000
<v Speaker 1>And

01:03:55.799 --> 01:03:57.559
<v Speaker 1>and that's something that we do for any

01:03:57.559 --> 01:03:58.760
<v Speaker 1>server in the stack.

01:03:58.920 --> 01:03:59.480
<v Speaker 1>And

01:03:59.799 --> 01:04:01.685
<v Speaker 1>main servers is is a hint that you

01:04:01.685 --> 01:04:03.285
<v Speaker 1>can actually have many of these. So you

01:04:03.285 --> 01:04:05.445
<v Speaker 1>could even run NSDEV

01:04:06.165 --> 01:04:09.685
<v Speaker 1>with with multiple servers and and and manage

01:04:09.685 --> 01:04:10.965
<v Speaker 1>them all from a single place.

01:04:13.359 --> 01:04:14.080
<v Speaker 0>Cool.

01:04:14.880 --> 01:04:16.560
<v Speaker 0>Alright. I see buttons. I can't help myself

01:04:16.560 --> 01:04:18.400
<v Speaker 0>but click. So Alright.

01:04:20.480 --> 01:04:22.800
<v Speaker 0>Yeah. I like that. So the UI was

01:04:22.800 --> 01:04:23.440
<v Speaker 0>nice.

01:04:24.400 --> 01:04:25.520
<v Speaker 0>I'm clicking on one more. I thought I

01:04:25.520 --> 01:04:27.119
<v Speaker 0>was checking on the manual UI, but it

01:04:27.119 --> 01:04:28.720
<v Speaker 0>took me to this, but it that'd let

01:04:28.720 --> 01:04:30.944
<v Speaker 0>me get to the manual API as well.

01:04:30.944 --> 01:04:32.785
<v Speaker 0>So nice to all of that stuff is

01:04:32.785 --> 01:04:34.224
<v Speaker 0>just right there waiting for me.

01:04:35.505 --> 01:04:37.905
<v Speaker 0>Alright, let's see what's next on our tutorial.

01:04:38.625 --> 01:04:41.760
<v Speaker 0>I appreciate that. We're getting close to like

01:04:41.760 --> 01:04:44.000
<v Speaker 0>our plan time and I feel like we've

01:04:44.000 --> 01:04:45.280
<v Speaker 0>got so much more that we need to

01:04:45.280 --> 01:04:46.480
<v Speaker 0>show people. So

01:04:47.360 --> 01:04:49.040
<v Speaker 0>maybe you can kind of guide us. What

01:04:49.040 --> 01:04:50.640
<v Speaker 0>what what should we be looking at next?

01:04:50.640 --> 01:04:52.000
<v Speaker 0>Should we keep working through this or is

01:04:52.000 --> 01:04:53.520
<v Speaker 0>there something that you think, hey, people need

01:04:53.520 --> 01:04:54.000
<v Speaker 0>to see this.

01:04:55.545 --> 01:04:56.424
<v Speaker 1>Let's

01:04:56.424 --> 01:04:57.944
<v Speaker 1>maybe I think we can just you can

01:04:57.944 --> 01:05:00.744
<v Speaker 1>just copy this one definition, and we'll connect

01:05:00.744 --> 01:05:02.505
<v Speaker 1>it to servers, which are the it's a

01:05:02.505 --> 01:05:05.225
<v Speaker 1>thing where we we feel like

01:05:05.704 --> 01:05:07.704
<v Speaker 1>brings value to to folks.

01:05:09.240 --> 01:05:11.400
<v Speaker 1>I think this is you you probably can

01:05:11.400 --> 01:05:12.520
<v Speaker 1>copy the whole thing.

01:05:13.400 --> 01:05:15.800
<v Speaker 1>And Okay. It's just a change to the

01:05:15.800 --> 01:05:18.360
<v Speaker 0>the server dot queue. Right? Yes.

01:05:18.360 --> 01:05:21.494
<v Speaker 1>Exactly. So here, we're kind of connecting the

01:05:21.494 --> 01:05:23.255
<v Speaker 1>two things. We're saying that,

01:05:23.575 --> 01:05:24.615
<v Speaker 1>hey. There's

01:05:25.015 --> 01:05:26.535
<v Speaker 1>this MinIO server.

01:05:26.694 --> 01:05:28.615
<v Speaker 1>The Go server needs your MinIO server for

01:05:28.615 --> 01:05:30.694
<v Speaker 1>folks that are familiar with Docker Compose. Like,

01:05:30.694 --> 01:05:31.975
<v Speaker 1>it's a similar idea.

01:05:32.375 --> 01:05:35.810
<v Speaker 1>But what's interesting here is that Namespace

01:05:35.810 --> 01:05:38.770
<v Speaker 1>understands these definitions across multiple packages.

01:05:39.010 --> 01:05:40.530
<v Speaker 1>So when you go and set up,

01:05:41.650 --> 01:05:42.450
<v Speaker 1>MinIO,

01:05:42.450 --> 01:05:44.690
<v Speaker 1>you don't need to kinda figure out, okay,

01:05:44.690 --> 01:05:46.850
<v Speaker 1>what's the port that is listening in and

01:05:46.850 --> 01:05:49.490
<v Speaker 1>and what's the what's the host?

01:05:50.095 --> 01:05:52.335
<v Speaker 1>You just say, like, in set up my

01:05:52.335 --> 01:05:54.815
<v Speaker 1>environment, my s three endpoint from a service

01:05:54.815 --> 01:05:56.175
<v Speaker 1>endpoint. So that means

01:05:56.575 --> 01:05:57.935
<v Speaker 1>from the API

01:05:57.935 --> 01:06:00.335
<v Speaker 1>that MinIO is exporting.

01:06:00.655 --> 01:06:02.575
<v Speaker 1>And you see this it's kind of condensed

01:06:02.575 --> 01:06:05.670
<v Speaker 1>into this string format, but it's package colon

01:06:05.670 --> 01:06:07.190
<v Speaker 1>and then the service name.

01:06:07.590 --> 01:06:10.070
<v Speaker 1>And you can refer to anything across packages.

01:06:10.310 --> 01:06:11.830
<v Speaker 1>And as you're going to deploy, you'll see

01:06:11.830 --> 01:06:13.910
<v Speaker 1>that that environment variable will have kind of

01:06:13.910 --> 01:06:16.550
<v Speaker 1>the right value for this deployment. And then

01:06:16.550 --> 01:06:18.550
<v Speaker 1>as you do different deployments, that value will

01:06:18.550 --> 01:06:21.109
<v Speaker 1>also be updated accordingly

01:06:20.495 --> 01:06:22.175
<v Speaker 1>based on deployment that you have.

01:06:22.655 --> 01:06:25.455
<v Speaker 1>There's just one nit because you named your

01:06:26.015 --> 01:06:30.335
<v Speaker 1>module something else. So here we say example.com/nsexample.

01:06:30.735 --> 01:06:33.055
<v Speaker 1>So that's our our package system

01:06:33.135 --> 01:06:35.819
<v Speaker 1>is trying to that's that's how we're telling

01:06:35.819 --> 01:06:37.660
<v Speaker 1>our package system, hey. Here's where to find

01:06:37.660 --> 01:06:40.060
<v Speaker 1>this. But, actually, the current module,

01:06:40.380 --> 01:06:41.180
<v Speaker 1>you named

01:06:41.500 --> 01:06:43.260
<v Speaker 1>you yeah. I think you named it Rawkode

01:06:43.260 --> 01:06:45.180
<v Speaker 1>Academy. So you we'll need to update one

01:06:45.180 --> 01:06:47.714
<v Speaker 1>of them for for this work. Oh, alright.

01:06:47.714 --> 01:06:49.474
<v Speaker 0>Okay. So this is the service from the

01:06:49.474 --> 01:06:51.474
<v Speaker 0>manual deployment. This doesn't change. This is a

01:06:51.474 --> 01:06:53.954
<v Speaker 0>package which is the same. However, this bit

01:06:53.954 --> 01:06:55.555
<v Speaker 0>here is Exactly.

01:06:55.714 --> 01:06:56.515
<v Speaker 0>Okay.

01:06:56.515 --> 01:06:58.674
<v Speaker 0>I've got you. And it was lowercase as

01:06:58.674 --> 01:06:59.714
<v Speaker 0>well. Yep.

01:07:00.914 --> 01:07:02.515
<v Speaker 1>And the same under requires.

01:07:06.810 --> 01:07:08.730
<v Speaker 0>Every time something goes wrong, I'm gonna show

01:07:08.730 --> 01:07:10.170
<v Speaker 0>it to my fault also.

01:07:10.410 --> 01:07:12.330
<v Speaker 0>I'll take the blame. I'm also happy. You

01:07:12.330 --> 01:07:12.810
<v Speaker 1>know,

01:07:13.290 --> 01:07:16.275
<v Speaker 1>what's what very much all like, I so

01:07:16.275 --> 01:07:18.675
<v Speaker 1>so very often as developers, as we're working

01:07:18.675 --> 01:07:20.515
<v Speaker 1>on an application, he's handling errors.

01:07:20.755 --> 01:07:23.555
<v Speaker 1>And, you know, something goes wrong, and and

01:07:23.954 --> 01:07:25.714
<v Speaker 1>so I'm always happy to just see, hey.

01:07:25.714 --> 01:07:27.315
<v Speaker 1>How is it failing? Because it's also an

01:07:27.315 --> 01:07:29.890
<v Speaker 1>opportunity for us to kind of understand, are

01:07:29.890 --> 01:07:31.650
<v Speaker 1>we already doing a good enough job telling

01:07:31.650 --> 01:07:34.290
<v Speaker 1>you how you can kinda fix things yourself,

01:07:34.290 --> 01:07:35.810
<v Speaker 1>or or do we need to do better?

01:07:37.490 --> 01:07:39.490
<v Speaker 0>Okay. So we have updated this with the

01:07:39.490 --> 01:07:40.370
<v Speaker 0>requires block.

01:07:42.035 --> 01:07:42.595
<v Speaker 0>And since

01:07:43.075 --> 01:07:44.515
<v Speaker 0>I I probably shut it. Did I shut

01:07:44.515 --> 01:07:46.835
<v Speaker 0>it down? Oh, no. It's still running. Okay.

01:07:46.835 --> 01:07:47.395
<v Speaker 0>So

01:07:48.035 --> 01:07:49.475
<v Speaker 0>this should already have

01:07:49.875 --> 01:07:51.075
<v Speaker 0>happened then. Right?

01:07:51.795 --> 01:07:53.795
<v Speaker 1>So it didn't because

01:07:54.515 --> 01:07:56.515
<v Speaker 1>and this is this is influx

01:07:56.515 --> 01:07:56.915
<v Speaker 1>actually.

01:07:57.690 --> 01:07:58.330
<v Speaker 1>We're

01:07:58.650 --> 01:08:01.369
<v Speaker 1>you you run NSDEV and then one server.

01:08:01.369 --> 01:08:03.770
<v Speaker 1>So we're looking for changes to that server.

01:08:03.770 --> 01:08:05.930
<v Speaker 1>We're not looking for changes for any change

01:08:05.930 --> 01:08:07.290
<v Speaker 1>inside of that repository.

01:08:15.275 --> 01:08:17.515
<v Speaker 1>Okay. So we see here now that it

01:08:17.515 --> 01:08:19.915
<v Speaker 1>actually said that there were two servers that

01:08:19.915 --> 01:08:20.874
<v Speaker 1>were deployed,

01:08:21.354 --> 01:08:23.434
<v Speaker 1>and, it will, by default,

01:08:23.435 --> 01:08:25.915
<v Speaker 1>focus on the one that you specified, which

01:08:25.915 --> 01:08:27.915
<v Speaker 1>was the Go server. But if you press

01:08:27.915 --> 01:08:30.819
<v Speaker 1>s, it will cycle through and show you

01:08:30.660 --> 01:08:32.739
<v Speaker 1>so one more once more.

01:08:33.859 --> 01:08:36.500
<v Speaker 1>Yeah. And then you'll see then support services.

01:08:36.500 --> 01:08:39.219
<v Speaker 1>You'll you'll see also the endpoints of these

01:08:39.220 --> 01:08:40.979
<v Speaker 1>other servers that you're deploying.

01:08:41.140 --> 01:08:41.540
<v Speaker 0>Nice.

01:08:43.475 --> 01:08:46.435
<v Speaker 0>So if I open a new tab,

01:08:47.075 --> 01:08:49.795
<v Speaker 0>run NS tool, keep control get pods.

01:08:50.755 --> 01:08:53.234
<v Speaker 0>We have our menu on our server. And

01:08:53.234 --> 01:08:54.675
<v Speaker 0>I'm assuming if I

01:08:55.155 --> 01:08:56.114
<v Speaker 0>describe

01:08:56.115 --> 01:08:59.029
<v Speaker 0>this pod, that s three environment variables just

01:08:59.029 --> 01:09:00.949
<v Speaker 0>gonna be kinda chilling,

01:09:02.710 --> 01:09:03.749
<v Speaker 0>which it is.

01:09:04.149 --> 01:09:07.270
<v Speaker 0>Okay, cool. I like how it's connecting everything

01:09:07.270 --> 01:09:09.510
<v Speaker 0>together and quite

01:09:10.575 --> 01:09:11.935
<v Speaker 0>this is quite a neat way of doing

01:09:11.935 --> 01:09:13.535
<v Speaker 0>it. It's like it's not overly I don't

01:09:13.535 --> 01:09:15.455
<v Speaker 0>need to apply too much cognitive awareness to

01:09:15.455 --> 01:09:17.375
<v Speaker 0>what's happening in the system. I'm literally just

01:09:17.375 --> 01:09:19.455
<v Speaker 0>saying I need this variable and it's coming

01:09:19.455 --> 01:09:22.495
<v Speaker 0>from some computed value within the stack, which

01:09:22.495 --> 01:09:22.895
<v Speaker 0>is neat.

01:09:24.020 --> 01:09:26.340
<v Speaker 1>And as it changes, like, you sometimes you'll

01:09:26.340 --> 01:09:28.260
<v Speaker 1>rename the service or

01:09:28.739 --> 01:09:31.540
<v Speaker 1>or now maybe that server is something else,

01:09:31.540 --> 01:09:33.699
<v Speaker 1>it will tell you. Right? Like, I think

01:09:33.699 --> 01:09:35.540
<v Speaker 1>that's one of the most powerful things, which

01:09:35.540 --> 01:09:38.500
<v Speaker 1>is keeping these semantic references in the code.

01:09:38.595 --> 01:09:40.675
<v Speaker 1>Like, what's your intent as a user? You

01:09:40.675 --> 01:09:42.595
<v Speaker 1>you actually want to connect these two things.

01:09:42.755 --> 01:09:44.675
<v Speaker 1>So whenever that's not true for some reason,

01:09:44.675 --> 01:09:46.275
<v Speaker 1>we can tell you, hey. This is not

01:09:46.275 --> 01:09:47.715
<v Speaker 1>working the way that you would expect it

01:09:47.715 --> 01:09:50.275
<v Speaker 1>to work versus just leaving some ports over

01:09:50.275 --> 01:09:52.460
<v Speaker 1>there, and then you go and change MINI

01:09:52.460 --> 01:09:54.940
<v Speaker 1>O to be on port 7,000 and and

01:09:54.940 --> 01:09:56.380
<v Speaker 1>it just doesn't work anymore.

01:09:57.179 --> 01:09:59.500
<v Speaker 0>Okay. So if I come in here, I'm

01:09:59.500 --> 01:10:02.860
<v Speaker 0>some Yep. Wildcard developer that's decided. Actually, this

01:10:02.860 --> 01:10:05.500
<v Speaker 0>is a a TLS API and I just

01:10:05.500 --> 01:10:07.645
<v Speaker 0>go and change this. I'm assuming this is

01:10:07.645 --> 01:10:09.165
<v Speaker 0>not gonna complain and tell me that it

01:10:09.165 --> 01:10:10.845
<v Speaker 0>can't fulfill It should complain.

01:10:15.645 --> 01:10:16.525
<v Speaker 0>There we go.

01:10:17.405 --> 01:10:20.445
<v Speaker 1>It it complains in a in a a

01:10:20.445 --> 01:10:22.125
<v Speaker 1>fairly hard to understand way.

01:10:25.059 --> 01:10:26.579
<v Speaker 0>Well, that's completely. Yeah.

01:10:27.059 --> 01:10:27.940
<v Speaker 1>Exactly.

01:10:27.940 --> 01:10:28.900
<v Speaker 1>Exactly. So it

01:10:30.420 --> 01:10:32.420
<v Speaker 1>so it's still not it's still not exactly

01:10:32.420 --> 01:10:34.340
<v Speaker 1>the problem that we should be seeing. Yeah.

01:10:34.340 --> 01:10:35.300
<v Speaker 1>This is a different problem.

01:10:35.865 --> 01:10:38.745
<v Speaker 0>It's just me not using DNS appropriately. Okay.

01:10:38.745 --> 01:10:40.825
<v Speaker 0>Now we've got API is not exported by

01:10:40.825 --> 01:10:42.505
<v Speaker 0>this module, which is a lot easier to

01:10:42.505 --> 01:10:44.824
<v Speaker 0>understand. Yeah. And you know why

01:10:45.705 --> 01:10:47.305
<v Speaker 1>it it took a second to do to

01:10:47.305 --> 01:10:47.945
<v Speaker 1>do that?

01:10:48.265 --> 01:10:49.510
<v Speaker 1>Because it,

01:10:49.830 --> 01:10:51.030
<v Speaker 1>internally,

01:10:51.030 --> 01:10:53.670
<v Speaker 1>there's two phases. So, there's actually three phases.

01:10:53.670 --> 01:10:55.910
<v Speaker 1>There's parsing as well, but there's planning

01:10:56.070 --> 01:10:57.110
<v Speaker 1>and execution.

01:10:57.350 --> 01:10:59.750
<v Speaker 1>And some of these values are only resolved

01:10:59.750 --> 01:11:02.335
<v Speaker 1>after we go and deploy something. So we

01:11:02.335 --> 01:11:04.895
<v Speaker 1>may have to deploy something until we know,

01:11:04.895 --> 01:11:06.655
<v Speaker 1>hey. This is actually the endpoint, and we

01:11:06.655 --> 01:11:08.255
<v Speaker 1>can go and update your,

01:11:09.055 --> 01:11:11.775
<v Speaker 1>Go server deployment to point at that value.

01:11:12.015 --> 01:11:13.855
<v Speaker 1>And so so that also means that we're

01:11:13.855 --> 01:11:16.015
<v Speaker 1>out of the box doing things in order.

01:11:16.500 --> 01:11:18.019
<v Speaker 1>So if you say when you say that

01:11:18.019 --> 01:11:20.340
<v Speaker 1>the server, kind of Go server, depends on

01:11:20.340 --> 01:11:21.219
<v Speaker 1>MinIO,

01:11:21.619 --> 01:11:23.859
<v Speaker 1>the first time that you're deploying,

01:11:24.179 --> 01:11:26.579
<v Speaker 1>we'll deploy MinIO first, wait for it to

01:11:26.579 --> 01:11:28.500
<v Speaker 1>become ready, and then we deploy the Go

01:11:28.500 --> 01:11:28.820
<v Speaker 1>server.

01:11:29.665 --> 01:11:30.784
<v Speaker 1>And this is

01:11:31.505 --> 01:11:33.344
<v Speaker 1>less important during development,

01:11:33.505 --> 01:11:36.545
<v Speaker 1>but especially in tests, which exactly the same

01:11:37.185 --> 01:11:38.704
<v Speaker 1>environment is used for.

01:11:39.265 --> 01:11:40.864
<v Speaker 1>It's really important that you kind of know

01:11:40.864 --> 01:11:42.304
<v Speaker 1>that your test is starting at the time

01:11:42.304 --> 01:11:44.150
<v Speaker 1>when the server is actually ready, and then

01:11:44.150 --> 01:11:45.909
<v Speaker 1>we're initializing the right order.

01:11:46.710 --> 01:11:48.310
<v Speaker 0>Okay. Cool. Got it.

01:11:50.790 --> 01:11:52.710
<v Speaker 1>Since because just being mindful of time, but,

01:11:52.710 --> 01:11:55.270
<v Speaker 1>obviously, David, you know best, I think what

01:11:55.270 --> 01:11:58.070
<v Speaker 1>could be interesting is just show

01:11:58.355 --> 01:12:00.755
<v Speaker 1>a quick example of a a few more

01:12:00.755 --> 01:12:02.354
<v Speaker 1>things coming together and

01:12:02.515 --> 01:12:04.434
<v Speaker 1>from our examples repository.

01:12:04.755 --> 01:12:06.355
<v Speaker 0>Yeah. That's good. And and then we can

01:12:06.355 --> 01:12:09.475
<v Speaker 1>just maybe highlight a couple things from there.

01:12:09.475 --> 01:12:12.679
<v Speaker 1>So if you could clone our examples repository,

01:12:12.679 --> 01:12:14.440
<v Speaker 1>then I can guide you through it.

01:12:17.000 --> 01:12:18.199
<v Speaker 0>What's the gahub

01:12:18.600 --> 01:12:20.600
<v Speaker 1>Namespace labs slash examples.

01:12:31.505 --> 01:12:33.184
<v Speaker 0>Alright. Where would you like to start?

01:12:34.385 --> 01:12:35.905
<v Speaker 1>I would go to one of the most

01:12:35.905 --> 01:12:38.144
<v Speaker 1>complete more complete ones, the multi tier.

01:12:39.480 --> 01:12:40.360
<v Speaker 1>And then

01:12:40.680 --> 01:12:41.719
<v Speaker 1>we have

01:12:44.360 --> 01:12:46.360
<v Speaker 1>whatever the latest number it is. Sorry. It's

01:12:46.360 --> 01:12:48.520
<v Speaker 1>actually hard for me to read. Yeah. Sorry.

01:12:48.520 --> 01:12:50.280
<v Speaker 0>The sidebar doesn't seem to scale with the

01:12:50.280 --> 01:12:52.760
<v Speaker 0>font size. So we've got simple web secrets

01:12:52.760 --> 01:12:53.720
<v Speaker 0>and web resources.

01:12:55.115 --> 01:12:57.275
<v Speaker 1>With numbers. Right? So whatever number is the

01:12:57.275 --> 01:12:59.675
<v Speaker 1>highest at the beginning. Yeah.

01:13:01.915 --> 01:13:03.835
<v Speaker 1>And in this multi tier

01:13:04.075 --> 01:13:07.195
<v Speaker 1>example, we have a Node. Js front end.

01:13:07.195 --> 01:13:08.155
<v Speaker 1>We have

01:13:08.659 --> 01:13:11.139
<v Speaker 1>Go server back end, and then we also

01:13:11.139 --> 01:13:11.780
<v Speaker 1>have,

01:13:12.820 --> 01:13:13.699
<v Speaker 1>a database,

01:13:14.179 --> 01:13:14.820
<v Speaker 1>server.

01:13:15.460 --> 01:13:16.019
<v Speaker 1>And,

01:13:16.420 --> 01:13:18.580
<v Speaker 1>this covers a lot of the functionality that

01:13:18.580 --> 01:13:20.900
<v Speaker 1>Namespace has. Maybe we could just run NS

01:13:22.555 --> 01:13:24.795
<v Speaker 1>dev for it, but you'll need to run

01:13:24.795 --> 01:13:26.395
<v Speaker 1>prepare local first.

01:13:27.835 --> 01:13:29.915
<v Speaker 0>Okay. So do I go into the multi

01:13:29.915 --> 01:13:31.195
<v Speaker 0>tier directory, do I do it from the

01:13:31.195 --> 01:13:32.315
<v Speaker 1>top? It's it's up to you. You can

01:13:32.315 --> 01:13:35.030
<v Speaker 1>also do it from here. Alright. Well, let's

01:13:35.030 --> 01:13:37.189
<v Speaker 0>do a multi tier, all three.

01:13:37.989 --> 01:13:40.789
<v Speaker 0>That puts me here, and let's prepare local.

01:13:43.190 --> 01:13:46.070
<v Speaker 1>So and and because we ran local before,

01:13:46.070 --> 01:13:48.710
<v Speaker 1>we, by default, target the same cluster,

01:13:49.445 --> 01:13:52.005
<v Speaker 1>but we use different Kubernetes

01:13:52.005 --> 01:13:55.125
<v Speaker 1>namespaces for different application workspaces.

01:13:55.285 --> 01:13:56.324
<v Speaker 1>So the previous

01:13:56.565 --> 01:13:59.285
<v Speaker 1>deployments that you saw will continue in our

01:13:59.285 --> 01:14:01.685
<v Speaker 1>local cluster. As we deploy things from a

01:14:01.685 --> 01:14:04.085
<v Speaker 1>completely different module or repository,

01:14:04.350 --> 01:14:06.190
<v Speaker 1>they'll they'll be in the same cluster but

01:14:06.190 --> 01:14:08.510
<v Speaker 1>in a completely different Kubernetes namespace.

01:14:10.350 --> 01:14:12.350
<v Speaker 1>And if you run NSDEV

01:14:12.350 --> 01:14:13.310
<v Speaker 1>front end

01:14:17.555 --> 01:14:20.035
<v Speaker 1>So it's it's now there's a bunch of

01:14:20.035 --> 01:14:22.594
<v Speaker 1>things happening. So the front end

01:14:22.835 --> 01:14:25.235
<v Speaker 1>depends on the API back end, which is

01:14:25.235 --> 01:14:26.755
<v Speaker 1>a Go server. The front end is written

01:14:26.755 --> 01:14:27.795
<v Speaker 1>in Node. Js,

01:14:28.035 --> 01:14:30.675
<v Speaker 1>and the back end then depends on Postgres.

01:14:31.880 --> 01:14:35.080
<v Speaker 1>And there's different options of how to deploy

01:14:35.080 --> 01:14:36.039
<v Speaker 1>Postgres.

01:14:36.119 --> 01:14:38.760
<v Speaker 1>We're going to use, the in cluster setup

01:14:38.760 --> 01:14:40.520
<v Speaker 1>that we have that is going to deploy

01:14:40.520 --> 01:14:42.920
<v Speaker 1>a Postgres server in the same cluster.

01:14:43.525 --> 01:14:46.005
<v Speaker 1>And, what you're seeing is we're we're actually

01:14:46.005 --> 01:14:47.844
<v Speaker 1>building the Node. Js application.

01:14:48.085 --> 01:14:49.204
<v Speaker 1>We're done with that.

01:14:50.005 --> 01:14:52.165
<v Speaker 1>We built the Go application before as well,

01:14:52.165 --> 01:14:54.725
<v Speaker 1>full parallelism. Some of that run-in BuildKit. Some

01:14:54.725 --> 01:14:57.125
<v Speaker 1>of that was local. We fetched the Postgres

01:14:57.125 --> 01:14:59.720
<v Speaker 1>image. And now what we're doing is,

01:15:00.360 --> 01:15:02.840
<v Speaker 1>we're kind of orchestrating these changes. So first,

01:15:02.840 --> 01:15:05.000
<v Speaker 1>we're going to deploy the Postgres server.

01:15:05.800 --> 01:15:07.240
<v Speaker 1>It took a little bit of time.

01:15:07.800 --> 01:15:09.480
<v Speaker 1>We actually have a bug in the timings

01:15:09.480 --> 01:15:12.585
<v Speaker 1>there, so but the o OSS Postgres server

01:15:12.585 --> 01:15:14.105
<v Speaker 1>was the first thing to deploy.

01:15:14.505 --> 01:15:15.065
<v Speaker 1>Then,

01:15:16.185 --> 01:15:17.864
<v Speaker 1>the Go server

01:15:18.185 --> 01:15:20.505
<v Speaker 1>uses a database that is created out of

01:15:20.505 --> 01:15:22.905
<v Speaker 1>that cluster, so that is running what we

01:15:22.905 --> 01:15:23.785
<v Speaker 1>call a provider.

01:15:24.750 --> 01:15:27.309
<v Speaker 1>So that's code that will run inside of

01:15:27.309 --> 01:15:28.590
<v Speaker 1>the cluster to go and set up the

01:15:28.590 --> 01:15:29.789
<v Speaker 1>database for you.

01:15:30.190 --> 01:15:32.670
<v Speaker 1>And and then we run the ghost the

01:15:32.750 --> 01:15:34.270
<v Speaker 1>we we deploy the ghost server, and then

01:15:34.270 --> 01:15:36.270
<v Speaker 1>we deploy the front end. And if we

01:15:36.270 --> 01:15:38.725
<v Speaker 1>look then at the server definitions, it's all

01:15:38.725 --> 01:15:41.125
<v Speaker 1>kind of references very much like before.

01:15:41.445 --> 01:15:42.325
<v Speaker 1>So we

01:15:44.565 --> 01:15:45.285
<v Speaker 0>yeah. As

01:15:47.605 --> 01:15:48.645
<v Speaker 0>you should

01:15:48.965 --> 01:15:50.165
<v Speaker 0>Oh, no. I got it. I think you

01:15:50.165 --> 01:15:50.645
<v Speaker 1>have two gets.

01:15:52.510 --> 01:15:54.190
<v Speaker 1>No. It it's it's correct. I think it's

01:15:54.190 --> 01:15:55.869
<v Speaker 1>just because you have two gets.

01:15:56.270 --> 01:15:57.070
<v Speaker 1>It

01:15:58.110 --> 01:15:59.630
<v Speaker 1>happens to me all the time.

01:16:02.590 --> 01:16:02.989
<v Speaker 0>Yeah.

01:16:03.645 --> 01:16:05.085
<v Speaker 0>There we go. There we go. Okay. Cool.

01:16:05.085 --> 01:16:06.765
<v Speaker 0>So, yeah, we got a separate namespace. We

01:16:06.765 --> 01:16:09.005
<v Speaker 0>have all of our services on this namespace.

01:16:09.165 --> 01:16:10.685
<v Speaker 0>We have our

01:16:10.845 --> 01:16:13.005
<v Speaker 0>web UI, which lets us get to the

01:16:13.005 --> 01:16:14.525
<v Speaker 0>front end of the application.

01:16:14.685 --> 01:16:15.244
<v Speaker 0>Mhmm.

01:16:15.965 --> 01:16:18.100
<v Speaker 0>Very neat. Very Yeah. And and if you

01:16:18.100 --> 01:16:20.420
<v Speaker 1>type in into this application, it's sending your

01:16:20.420 --> 01:16:22.340
<v Speaker 1>request to the go back end, which then

01:16:22.340 --> 01:16:24.020
<v Speaker 1>is storing that data in Postgres.

01:16:24.420 --> 01:16:25.540
<v Speaker 1>And I

01:16:25.700 --> 01:16:26.739
<v Speaker 1>think what what

01:16:26.980 --> 01:16:29.940
<v Speaker 1>the what we're aiming for is imagine you're

01:16:29.940 --> 01:16:32.625
<v Speaker 1>in development team. You just joined that team,

01:16:32.945 --> 01:16:34.705
<v Speaker 1>and and there's a stack that everyone is

01:16:34.705 --> 01:16:36.465
<v Speaker 1>is kind of using to to kinda build

01:16:36.465 --> 01:16:37.344
<v Speaker 1>their application.

01:16:37.665 --> 01:16:39.265
<v Speaker 1>And how often is just a bunch of

01:16:39.265 --> 01:16:41.185
<v Speaker 1>documents that you have to run through,

01:16:41.425 --> 01:16:44.145
<v Speaker 1>install this, and and run this command, and

01:16:44.145 --> 01:16:46.790
<v Speaker 1>get authorization for that. And here, we kinda

01:16:46.870 --> 01:16:49.030
<v Speaker 1>we we really try to encapsulate that whole

01:16:49.030 --> 01:16:52.390
<v Speaker 1>experience into well, you have NS. NS will

01:16:52.390 --> 01:16:54.390
<v Speaker 1>kinda manage the whole environment for you, and

01:16:54.390 --> 01:16:56.310
<v Speaker 1>we'll get you to an to the same

01:16:56.310 --> 01:16:58.870
<v Speaker 1>sort of development environment that anyone else in

01:16:58.870 --> 01:17:00.675
<v Speaker 1>your team has because all of those dependencies

01:17:00.675 --> 01:17:02.195
<v Speaker 1>are pinned. We know that they're the right

01:17:02.195 --> 01:17:02.915
<v Speaker 1>versions,

01:17:03.235 --> 01:17:04.595
<v Speaker 1>and and it gets you to that final

01:17:04.595 --> 01:17:05.155
<v Speaker 1>setup.

01:17:06.595 --> 01:17:08.275
<v Speaker 0>Okay. So you mentioned earlier

01:17:08.835 --> 01:17:11.075
<v Speaker 0>when we spoke briefly about Node. Js that

01:17:11.075 --> 01:17:12.675
<v Speaker 0>it works a little bit differently from Go

01:17:12.675 --> 01:17:15.315
<v Speaker 0>and that the system is actually synchronized. Now

01:17:15.430 --> 01:17:17.030
<v Speaker 0>I've seen this with a few tools in

01:17:17.030 --> 01:17:18.790
<v Speaker 0>the past and the challenge always seems to

01:17:18.790 --> 01:17:19.270
<v Speaker 0>be

01:17:19.830 --> 01:17:22.710
<v Speaker 0>that speed of reflecting those changes

01:17:23.110 --> 01:17:24.470
<v Speaker 0>over the fail thing can be a little

01:17:24.470 --> 01:17:25.670
<v Speaker 0>bit slow. So do you mind if we

01:17:25.670 --> 01:17:27.030
<v Speaker 0>if we test that? Sure.

01:17:27.510 --> 01:17:28.150
<v Speaker 0>So

01:17:29.415 --> 01:17:31.574
<v Speaker 0>if I change the title of the page

01:17:32.295 --> 01:17:35.655
<v Speaker 0>to Stargate is better than Star Trek,

01:17:36.454 --> 01:17:37.974
<v Speaker 0>I like to be talking first. It reject

01:17:38.215 --> 01:17:39.815
<v Speaker 1>the change just because it's wrong.

01:17:42.630 --> 01:17:44.790
<v Speaker 0>Oh, no. I don't have Actually I've got

01:17:44.790 --> 01:17:47.430
<v Speaker 0>local host. Where's my title? My

01:17:47.430 --> 01:17:49.590
<v Speaker 0>browser doesn't show one. Okay. Let's make another

01:17:49.590 --> 01:17:50.869
<v Speaker 0>change. Mhmm.

01:17:51.910 --> 01:17:53.349
<v Speaker 0>So this I'm assuming

01:17:53.670 --> 01:17:54.870
<v Speaker 0>I'm gonna have to

01:17:55.445 --> 01:17:57.844
<v Speaker 0>change some CSS or something background

01:17:58.645 --> 01:18:00.324
<v Speaker 0>to be white.

01:18:00.885 --> 01:18:02.324
<v Speaker 0>Oh, wow. That was fast.

01:18:02.965 --> 01:18:03.605
<v Speaker 1>Yeah.

01:18:03.925 --> 01:18:06.245
<v Speaker 1>But it's not good enough yet.

01:18:08.070 --> 01:18:08.869
<v Speaker 1>It's

01:18:08.949 --> 01:18:09.590
<v Speaker 1>it the

01:18:11.670 --> 01:18:14.389
<v Speaker 1>the reason for it is we're we're we're

01:18:14.469 --> 01:18:16.230
<v Speaker 1>we weren't inspired by some of these other

01:18:16.230 --> 01:18:18.630
<v Speaker 1>tools. And what we see folks do is

01:18:18.630 --> 01:18:20.150
<v Speaker 1>they look at your file system,

01:18:20.985 --> 01:18:22.745
<v Speaker 1>looked at the files change, kind of ship

01:18:22.745 --> 01:18:24.105
<v Speaker 1>that over to the container.

01:18:24.585 --> 01:18:25.225
<v Speaker 1>Now

01:18:25.705 --> 01:18:27.785
<v Speaker 1>that means that there will be kind of

01:18:27.785 --> 01:18:28.505
<v Speaker 1>subtle

01:18:29.785 --> 01:18:32.585
<v Speaker 1>cases where the changes inside of the container

01:18:32.585 --> 01:18:34.745
<v Speaker 1>don't fully track what's in your workstation.

01:18:35.430 --> 01:18:37.510
<v Speaker 1>So we have a few ideas of how

01:18:37.510 --> 01:18:39.110
<v Speaker 1>we can improve that.

01:18:39.750 --> 01:18:40.389
<v Speaker 1>Notably,

01:18:40.949 --> 01:18:43.510
<v Speaker 1>bringing to Kubernetes something that feels a lot

01:18:43.510 --> 01:18:45.590
<v Speaker 1>more like volume volume

01:18:45.590 --> 01:18:48.469
<v Speaker 1>mounts from from Docker, where it's literally like

01:18:48.469 --> 01:18:49.910
<v Speaker 1>your file system that is exposed.

01:18:50.864 --> 01:18:52.545
<v Speaker 1>And we're kind of keen to to do

01:18:52.545 --> 01:18:53.985
<v Speaker 1>some of those. We just haven't gotten to

01:18:53.985 --> 01:18:56.704
<v Speaker 1>it yet. But but we want to get

01:18:56.704 --> 01:18:57.504
<v Speaker 1>to a point

01:18:57.905 --> 01:18:58.624
<v Speaker 1>that

01:18:58.864 --> 01:18:59.905
<v Speaker 1>developing

01:19:00.625 --> 01:19:03.585
<v Speaker 1>in an environment that is actually Kubernetes

01:19:03.480 --> 01:19:05.719
<v Speaker 1>feels as good, if not better,

01:19:05.960 --> 01:19:08.040
<v Speaker 1>than local development. And we know that the

01:19:08.040 --> 01:19:11.320
<v Speaker 1>TypeScript and JavaScript ecosystems are ahead. Like, it's

01:19:11.400 --> 01:19:13.320
<v Speaker 1>much better for you to go and do

01:19:13.320 --> 01:19:16.680
<v Speaker 1>NPM dev or YARN dev today than deploying

01:19:16.680 --> 01:19:17.400
<v Speaker 1>to Kubernetes,

01:19:18.364 --> 01:19:20.205
<v Speaker 1>but you you lose so much on the

01:19:20.205 --> 01:19:22.364
<v Speaker 1>way. Like, there's so many compromises that you're

01:19:22.364 --> 01:19:22.925
<v Speaker 1>doing

01:19:23.324 --> 01:19:25.965
<v Speaker 1>around how production like your environment is, and

01:19:25.965 --> 01:19:27.885
<v Speaker 1>we want to get to a point where

01:19:27.885 --> 01:19:29.725
<v Speaker 1>you feel that you're

01:19:29.725 --> 01:19:32.364
<v Speaker 1>developing in a production like environment without making

01:19:32.364 --> 01:19:34.740
<v Speaker 1>those compromises. So we're we're we're we'll continue

01:19:34.740 --> 01:19:36.260
<v Speaker 1>to invest in in getting there.

01:19:37.460 --> 01:19:39.540
<v Speaker 0>Okay. Let me throw a question out to

01:19:39.540 --> 01:19:41.700
<v Speaker 0>you then. Like, we've really focused today on

01:19:41.700 --> 01:19:44.820
<v Speaker 0>what that developer experience looks like with Namespace.

01:19:44.980 --> 01:19:45.860
<v Speaker 0>Let's assume,

01:19:46.345 --> 01:19:48.425
<v Speaker 0>know, people wanna start kicking the tires unless

01:19:48.425 --> 01:19:50.425
<v Speaker 0>they wanna loop it into their own systems.

01:19:50.585 --> 01:19:52.665
<v Speaker 0>Is there any is there any penalty and

01:19:52.665 --> 01:19:54.665
<v Speaker 0>it's drawbacks for people that only want to

01:19:54.665 --> 01:19:56.585
<v Speaker 0>use it in-depth or is that like or

01:19:56.585 --> 01:19:58.025
<v Speaker 0>is that like free go for it? This

01:19:58.025 --> 01:19:59.545
<v Speaker 0>will this will help you and then it's

01:19:59.545 --> 01:20:01.865
<v Speaker 0>up and to production or do you feel

01:20:02.400 --> 01:20:04.800
<v Speaker 0>as a loaded question, but should people go

01:20:04.800 --> 01:20:06.560
<v Speaker 0>all out and use Namespace from from start

01:20:06.560 --> 01:20:07.200
<v Speaker 0>to finish?

01:20:08.400 --> 01:20:10.320
<v Speaker 1>Yeah. It's a great question, and and it's

01:20:10.320 --> 01:20:12.560
<v Speaker 1>it's a common question. So thank you for

01:20:12.560 --> 01:20:13.760
<v Speaker 1>asking because

01:20:14.400 --> 01:20:16.800
<v Speaker 1>it can sometimes feel daunting when you have

01:20:16.800 --> 01:20:19.005
<v Speaker 1>this all in one systems. Like, okay. Now

01:20:19.005 --> 01:20:21.085
<v Speaker 1>I have to go through this decision of

01:20:21.085 --> 01:20:23.164
<v Speaker 1>of changing everything that I'm doing.

01:20:23.565 --> 01:20:24.124
<v Speaker 1>And

01:20:24.844 --> 01:20:27.245
<v Speaker 1>we we're developers ourselves, and we know how

01:20:27.245 --> 01:20:30.205
<v Speaker 1>costly these are. So our philosophy is we

01:20:30.205 --> 01:20:31.645
<v Speaker 1>want to use the bundling

01:20:32.110 --> 01:20:34.829
<v Speaker 1>on on for the benefit of the developer,

01:20:34.989 --> 01:20:37.310
<v Speaker 1>for the for for the benefit of the

01:20:37.310 --> 01:20:40.110
<v Speaker 1>development teaming as well. So you can go

01:20:40.110 --> 01:20:43.070
<v Speaker 1>and use develop Namespace only for development. That's

01:20:43.070 --> 01:20:45.870
<v Speaker 1>totally okay. You can have Terraform to deploy

01:20:45.870 --> 01:20:46.430
<v Speaker 1>to production.

01:20:47.335 --> 01:20:49.815
<v Speaker 1>You can use our image building system, but

01:20:49.815 --> 01:20:52.215
<v Speaker 1>you can also just keep your Docker files

01:20:52.215 --> 01:20:54.055
<v Speaker 1>or anything else that you use to build

01:20:54.055 --> 01:20:56.295
<v Speaker 1>production images. You can do that.

01:20:56.695 --> 01:20:59.015
<v Speaker 1>You can then go from development and add

01:20:59.015 --> 01:21:01.760
<v Speaker 1>whole system testing, and that's kind of a

01:21:01.760 --> 01:21:02.880
<v Speaker 1>very incremental

01:21:03.440 --> 01:21:06.079
<v Speaker 1>cost. There's actually almost zero cost

01:21:06.320 --> 01:21:08.080
<v Speaker 1>for you as kind of a user of

01:21:08.080 --> 01:21:10.400
<v Speaker 1>Namespace. And and and now you have a

01:21:10.400 --> 01:21:12.640
<v Speaker 1>set of capabilities that probably you didn't have

01:21:12.640 --> 01:21:13.360
<v Speaker 1>before

01:21:13.680 --> 01:21:15.040
<v Speaker 1>compared with to the way that you were

01:21:15.040 --> 01:21:17.465
<v Speaker 1>doing development before. And then you can also

01:21:17.465 --> 01:21:18.344
<v Speaker 1>do production,

01:21:18.505 --> 01:21:20.824
<v Speaker 1>and we care deeply about production as well,

01:21:21.704 --> 01:21:24.344
<v Speaker 1>but it's it's opt in. It's not something

01:21:24.344 --> 01:21:26.024
<v Speaker 1>that you have to do from day one.

01:21:27.784 --> 01:21:29.145
<v Speaker 0>Okay. Awesome. Thank you.

01:21:31.260 --> 01:21:33.179
<v Speaker 0>I know how you are for time. If

01:21:33.179 --> 01:21:34.300
<v Speaker 0>you have a hard stop or if we

01:21:34.300 --> 01:21:35.739
<v Speaker 0>could maybe go a little bit over, but

01:21:35.739 --> 01:21:37.900
<v Speaker 0>what's kind of top of my mind right

01:21:37.900 --> 01:21:39.420
<v Speaker 0>now is that we've taken a look at

01:21:39.420 --> 01:21:40.859
<v Speaker 0>this more complete example

01:21:41.019 --> 01:21:41.899
<v Speaker 0>where

01:21:41.900 --> 01:21:44.780
<v Speaker 0>if I stop playing with the JavaScript code

01:21:44.780 --> 01:21:46.460
<v Speaker 0>for a moment and look at the server

01:21:47.215 --> 01:21:49.695
<v Speaker 0>Is that this just says, hey, I'm an

01:21:49.695 --> 01:21:50.895
<v Speaker 0>integration web.

01:21:51.215 --> 01:21:53.135
<v Speaker 0>I speak to some sort of back end.

01:21:53.135 --> 01:21:54.575
<v Speaker 0>When we go to the back end, we

01:21:54.575 --> 01:21:56.415
<v Speaker 0>see that that has its own server dot

01:21:56.415 --> 01:21:57.055
<v Speaker 0>queue.

01:21:57.215 --> 01:21:58.895
<v Speaker 0>This has some resources.

01:21:58.895 --> 01:22:01.215
<v Speaker 0>So it's looking database and obviously this is

01:22:01.215 --> 01:22:02.495
<v Speaker 0>like, you need

01:22:03.030 --> 01:22:03.830
<v Speaker 0>postgres.

01:22:04.070 --> 01:22:06.150
<v Speaker 0>Can we take a look because I'm assuming

01:22:06.150 --> 01:22:07.510
<v Speaker 0>people are gonna get to a point where

01:22:07.510 --> 01:22:09.350
<v Speaker 0>they wanted to do this. Already wanna replace

01:22:09.350 --> 01:22:11.429
<v Speaker 0>all of my development pipelines with namespace.

01:22:11.510 --> 01:22:13.030
<v Speaker 0>And my first thing is that, okay, well

01:22:13.030 --> 01:22:15.590
<v Speaker 0>I use MongoDB for the CMS.

01:22:15.590 --> 01:22:16.310
<v Speaker 1>I use

01:22:17.025 --> 01:22:19.265
<v Speaker 0>Redis over here. There's gonna be a point

01:22:19.265 --> 01:22:21.505
<v Speaker 0>where I have to write my own definition

01:22:21.505 --> 01:22:24.145
<v Speaker 0>of what this server looks like. So I

01:22:24.145 --> 01:22:24.945
<v Speaker 0>pulled up

01:22:25.505 --> 01:22:27.905
<v Speaker 0>your foundation and I thought maybe we could

01:22:27.905 --> 01:22:29.265
<v Speaker 0>take a look at the postgres one and

01:22:29.265 --> 01:22:31.300
<v Speaker 0>anything else that you think is interesting. So

01:22:31.300 --> 01:22:33.220
<v Speaker 0>people get a feel and a taste for

01:22:33.540 --> 01:22:35.140
<v Speaker 0>at some point, I'm gonna have to do

01:22:35.140 --> 01:22:37.140
<v Speaker 0>some heavy lifting and as that actually heavy

01:22:37.140 --> 01:22:39.780
<v Speaker 0>lifting or is this 20 lines of queue?

01:22:39.780 --> 01:22:41.300
<v Speaker 0>Like, I don't know yet. And

01:22:42.820 --> 01:22:44.980
<v Speaker 1>yeah, I'm happy to to still cover that.

01:22:45.140 --> 01:22:46.020
<v Speaker 1>I I

01:22:46.554 --> 01:22:48.315
<v Speaker 1>think it's interesting to kind of cover this

01:22:48.315 --> 01:22:49.994
<v Speaker 1>this resource part of

01:22:50.635 --> 01:22:53.594
<v Speaker 1>of Namespace as well. If you don't mind,

01:22:53.835 --> 01:22:55.914
<v Speaker 1>just one minute before we jump into the

01:22:55.994 --> 01:22:58.840
<v Speaker 1>into library, which where those definitions are, I

01:22:58.840 --> 01:23:00.680
<v Speaker 1>would just say, I think it's just useful

01:23:00.680 --> 01:23:02.360
<v Speaker 1>to kind of introduce people to some of

01:23:02.360 --> 01:23:03.400
<v Speaker 1>the concepts here

01:23:03.880 --> 01:23:05.560
<v Speaker 1>so that we can so that we can

01:23:05.560 --> 01:23:07.400
<v Speaker 1>map them back to to what we're going

01:23:07.400 --> 01:23:08.039
<v Speaker 1>to see.

01:23:09.000 --> 01:23:11.800
<v Speaker 1>So previously, we had, like, requires. So this

01:23:11.800 --> 01:23:14.335
<v Speaker 1>server requires this other server. Now this is

01:23:14.335 --> 01:23:15.854
<v Speaker 1>under the resource block,

01:23:16.175 --> 01:23:18.494
<v Speaker 1>and this this server says, well, I declare

01:23:18.494 --> 01:23:21.054
<v Speaker 1>a resource, which is a to dos database.

01:23:21.135 --> 01:23:23.374
<v Speaker 1>It's of a class database,

01:23:23.454 --> 01:23:25.375
<v Speaker 1>which lives in their database Postgres.

01:23:25.375 --> 01:23:26.655
<v Speaker 1>So that's kind of the type

01:23:27.550 --> 01:23:28.750
<v Speaker 1>is provided

01:23:28.750 --> 01:23:31.630
<v Speaker 1>by this library OSS Postgres, so you can

01:23:31.630 --> 01:23:33.389
<v Speaker 1>imagine that that means Postgres.

01:23:33.710 --> 01:23:37.150
<v Speaker 1>And there's something called intent, so that's the

01:23:37.550 --> 01:23:38.750
<v Speaker 1>the definition

01:23:38.750 --> 01:23:40.910
<v Speaker 1>that is used as an input for this

01:23:40.910 --> 01:23:41.230
<v Speaker 1>resource.

01:23:41.965 --> 01:23:43.965
<v Speaker 1>And in this case, it's, well, what's the

01:23:43.965 --> 01:23:45.005
<v Speaker 1>database name,

01:23:45.405 --> 01:23:47.405
<v Speaker 1>and do you have a set of series

01:23:47.405 --> 01:23:49.325
<v Speaker 1>of schemas that you want to be applied

01:23:49.325 --> 01:23:50.365
<v Speaker 1>automatically?

01:23:51.005 --> 01:23:52.685
<v Speaker 1>And then we there's a kind of an

01:23:52.685 --> 01:23:55.085
<v Speaker 1>advanced feature here that we can pass resources

01:23:55.085 --> 01:23:58.350
<v Speaker 1>to resources. So it's actually a composable

01:23:58.350 --> 01:24:01.310
<v Speaker 1>system. So we we pass the Postgres cluster

01:24:01.310 --> 01:24:02.110
<v Speaker 1>in,

01:24:03.070 --> 01:24:05.070
<v Speaker 1>and which we can have as many clusters

01:24:05.070 --> 01:24:06.590
<v Speaker 1>as you want. So this system is kinda

01:24:06.590 --> 01:24:07.390
<v Speaker 1>recursive

01:24:07.550 --> 01:24:09.150
<v Speaker 1>or supports recursive definitions.

01:24:11.255 --> 01:24:13.015
<v Speaker 1>And so class

01:24:13.175 --> 01:24:14.295
<v Speaker 1>is a type.

01:24:14.535 --> 01:24:15.975
<v Speaker 1>Provider is

01:24:16.135 --> 01:24:17.415
<v Speaker 1>is a thing

01:24:17.655 --> 01:24:18.215
<v Speaker 1>that

01:24:18.695 --> 01:24:19.574
<v Speaker 1>provides

01:24:19.975 --> 01:24:22.055
<v Speaker 1>an instance of that type, and that's what

01:24:22.055 --> 01:24:23.335
<v Speaker 1>we're going to see back in the code

01:24:23.335 --> 01:24:23.575
<v Speaker 1>base.

01:24:24.750 --> 01:24:26.669
<v Speaker 0>Okay. So I wanna see if I can

01:24:27.309 --> 01:24:28.909
<v Speaker 0>make that a little bit more concrete for

01:24:28.909 --> 01:24:31.710
<v Speaker 0>people to understand. Sure. So the class says,

01:24:31.710 --> 01:24:34.030
<v Speaker 0>this is what the definition of a post

01:24:34.030 --> 01:24:36.030
<v Speaker 0>grad database looks like some sort of contract.

01:24:37.205 --> 01:24:39.125
<v Speaker 0>Don't think it's important what that looks like,

01:24:39.205 --> 01:24:40.645
<v Speaker 0>but the provider

01:24:40.965 --> 01:24:41.685
<v Speaker 0>and

01:24:41.765 --> 01:24:43.205
<v Speaker 0>please correct me if I'm wrong,

01:24:43.685 --> 01:24:46.405
<v Speaker 0>could be OSS postgres may be running the

01:24:46.405 --> 01:24:48.805
<v Speaker 0>container image from the official Docker Hub library.

01:24:48.805 --> 01:24:52.480
<v Speaker 0>But in theory, this could be RDS postgres

01:24:52.480 --> 01:24:54.160
<v Speaker 0>and that's what actually spin up and manage

01:24:54.160 --> 01:24:55.920
<v Speaker 0>postgres on AWS.

01:24:56.000 --> 01:24:57.520
<v Speaker 0>So the provider changes

01:24:57.840 --> 01:24:59.120
<v Speaker 0>that. Is that correct?

01:24:59.440 --> 01:25:01.520
<v Speaker 1>That's exactly correct. Okay. Sweet.

01:25:03.175 --> 01:25:05.655
<v Speaker 0>The intent, I didn't fully understand other than

01:25:05.655 --> 01:25:07.495
<v Speaker 0>is inputs and I understand that this is

01:25:07.495 --> 01:25:09.415
<v Speaker 0>the database name and this is the some

01:25:09.415 --> 01:25:10.775
<v Speaker 0>local schema that it wants to run. So

01:25:10.775 --> 01:25:11.815
<v Speaker 0>I'm just going to take your word for

01:25:11.815 --> 01:25:12.935
<v Speaker 0>that. That's what happened.

01:25:15.860 --> 01:25:16.580
<v Speaker 0>So

01:25:16.980 --> 01:25:19.780
<v Speaker 0>assume that is this defined by the class?

01:25:19.780 --> 01:25:21.780
<v Speaker 0>Is this what determines what else is in

01:25:21.780 --> 01:25:23.940
<v Speaker 0>this property, these fields here?

01:25:24.260 --> 01:25:26.100
<v Speaker 1>That's right. It's

01:25:26.260 --> 01:25:27.780
<v Speaker 1>the class defines

01:25:28.605 --> 01:25:31.804
<v Speaker 1>two types. One is what are my inputs

01:25:31.804 --> 01:25:33.644
<v Speaker 1>and what's my output.

01:25:33.804 --> 01:25:35.804
<v Speaker 1>And so in the case of inputs for

01:25:35.804 --> 01:25:38.364
<v Speaker 1>a database is name and a set of

01:25:38.364 --> 01:25:41.405
<v Speaker 1>schemas schema files, and outputs are

01:25:42.060 --> 01:25:44.539
<v Speaker 1>the Postgres database endpoint

01:25:44.540 --> 01:25:46.780
<v Speaker 1>credentials that may be needed to connect to

01:25:46.780 --> 01:25:47.820
<v Speaker 1>that endpoint

01:25:47.820 --> 01:25:49.739
<v Speaker 1>and the database name as well.

01:25:50.060 --> 01:25:53.579
<v Speaker 1>And those are then injectable into your server.

01:25:53.579 --> 01:25:55.099
<v Speaker 1>So if you go up in the same

01:25:55.099 --> 01:25:55.980
<v Speaker 1>server definition,

01:26:01.225 --> 01:26:03.225
<v Speaker 1>oh, or perhaps down. Sorry.

01:26:07.145 --> 01:26:10.070
<v Speaker 1>Oh, sorry. We actually so there's two ways

01:26:10.070 --> 01:26:11.990
<v Speaker 1>that we do injection. And in this example,

01:26:11.990 --> 01:26:14.390
<v Speaker 1>I had forgotten that we we dynamically consume

01:26:14.390 --> 01:26:14.949
<v Speaker 1>that.

01:26:16.310 --> 01:26:17.909
<v Speaker 1>We automatically

01:26:18.870 --> 01:26:22.070
<v Speaker 1>generate a config map that gets in that

01:26:22.070 --> 01:26:25.735
<v Speaker 1>gets mapped into your server with runtime configuration,

01:26:26.054 --> 01:26:27.574
<v Speaker 1>including these resources,

01:26:27.974 --> 01:26:28.774
<v Speaker 1>including

01:26:28.855 --> 01:26:31.335
<v Speaker 1>what are your own services that you're exporting,

01:26:31.335 --> 01:26:33.735
<v Speaker 1>what was your own image, which development environment

01:26:33.735 --> 01:26:36.295
<v Speaker 1>are you coming from. And this example is

01:26:36.295 --> 01:26:38.770
<v Speaker 1>reading those from that file, not but you

01:26:38.770 --> 01:26:41.570
<v Speaker 1>could map them. You could inject, for example,

01:26:41.730 --> 01:26:43.489
<v Speaker 1>the Postgres endpoint

01:26:43.490 --> 01:26:45.330
<v Speaker 1>into an environment variable

01:26:45.410 --> 01:26:47.170
<v Speaker 1>the same way that we did it before.

01:26:47.170 --> 01:26:49.490
<v Speaker 1>But rather than being from service endpoint, we

01:26:49.490 --> 01:26:52.050
<v Speaker 1>would say from resource field so we could

01:26:52.050 --> 01:26:53.410
<v Speaker 1>actually go and fetch that value.

01:26:53.975 --> 01:26:55.335
<v Speaker 0>Nice.

01:26:55.895 --> 01:26:57.014
<v Speaker 0>Okay. Cool.

01:26:59.655 --> 01:27:01.255
<v Speaker 0>Is there anything else in this file that

01:27:01.255 --> 01:27:03.015
<v Speaker 0>we need to go over before we look

01:27:03.015 --> 01:27:03.975
<v Speaker 0>at the library?

01:27:04.695 --> 01:27:06.855
<v Speaker 1>No. There there's just another concept here, which

01:27:06.855 --> 01:27:07.415
<v Speaker 1>is tests,

01:27:08.230 --> 01:27:09.510
<v Speaker 1>and and maybe

01:27:09.750 --> 01:27:11.510
<v Speaker 1>I think folks can also explore that by

01:27:11.510 --> 01:27:13.590
<v Speaker 1>themselves. If you run NS test,

01:27:13.910 --> 01:27:15.430
<v Speaker 1>what we're going to do is we are

01:27:15.430 --> 01:27:17.430
<v Speaker 1>going to instantiate the same stack that you

01:27:17.430 --> 01:27:19.590
<v Speaker 1>saw so we cannot deploy the same set

01:27:19.590 --> 01:27:22.144
<v Speaker 1>of servers, but in a separate namespace.

01:27:22.385 --> 01:27:24.304
<v Speaker 1>We call it an ephemeral

01:27:24.304 --> 01:27:26.385
<v Speaker 1>namespace, which is used for this for for

01:27:26.385 --> 01:27:27.104
<v Speaker 1>that test.

01:27:27.425 --> 01:27:29.905
<v Speaker 1>And then we deploy a client binary,

01:27:30.304 --> 01:27:31.985
<v Speaker 1>which is your test code that you write

01:27:31.985 --> 01:27:34.650
<v Speaker 1>yourself in whatever language that you want that

01:27:34.650 --> 01:27:36.969
<v Speaker 1>is running as a client inside of the

01:27:36.969 --> 01:27:38.730
<v Speaker 1>cluster. So it can do it can it

01:27:38.730 --> 01:27:41.289
<v Speaker 1>has private networking. So it can reach the

01:27:41.370 --> 01:27:43.210
<v Speaker 1>the server endpoints directly.

01:27:43.290 --> 01:27:45.130
<v Speaker 1>And our philosophy for testing,

01:27:45.370 --> 01:27:48.090
<v Speaker 1>not for everything, but but is but for,

01:27:48.330 --> 01:27:52.055
<v Speaker 1>comprehensive testing is having wholes whole system tests.

01:27:52.055 --> 01:27:54.535
<v Speaker 1>So kind of writing a client as if

01:27:54.535 --> 01:27:56.695
<v Speaker 1>it was a real client that is exercising

01:27:56.695 --> 01:27:59.255
<v Speaker 1>kind of the real API passage as you

01:27:59.255 --> 01:28:00.695
<v Speaker 1>would inside of the cluster, and that's what

01:28:00.695 --> 01:28:02.695
<v Speaker 1>this testing subsystem

01:28:02.695 --> 01:28:03.415
<v Speaker 1>allows you to do.

01:28:04.250 --> 01:28:05.130
<v Speaker 0>Alright.

01:28:05.610 --> 01:28:06.970
<v Speaker 0>I'm gonna give a huge shout out to

01:28:06.970 --> 01:28:09.370
<v Speaker 0>your teammates who have tackled a bunch of

01:28:09.370 --> 01:28:10.090
<v Speaker 0>questions.

01:28:10.250 --> 01:28:13.850
<v Speaker 0>Well, we've been They're awesome. Yeah. But there

01:28:13.850 --> 01:28:15.290
<v Speaker 0>is one right at the bottom there that

01:28:15.290 --> 01:28:17.704
<v Speaker 0>hasn't been answered yet. And I actually feel

01:28:17.704 --> 01:28:19.465
<v Speaker 0>it's quite important, so I'm I'm gonna throw

01:28:19.465 --> 01:28:21.625
<v Speaker 0>that out. But why I'm always asking about

01:28:21.625 --> 01:28:23.625
<v Speaker 0>secrets? How do we handle secrets in the

01:28:23.625 --> 01:28:24.744
<v Speaker 0>Namespace environment?

01:28:25.465 --> 01:28:27.465
<v Speaker 1>Yeah. So we we

01:28:27.465 --> 01:28:28.344
<v Speaker 1>have a

01:28:28.744 --> 01:28:31.704
<v Speaker 1>secret implementation. So secrets are a first class.

01:28:34.550 --> 01:28:35.190
<v Speaker 1>We

01:28:35.510 --> 01:28:36.870
<v Speaker 1>understand secrets

01:28:36.950 --> 01:28:38.230
<v Speaker 1>in Namespace.

01:28:38.390 --> 01:28:40.469
<v Speaker 1>And the implementation that we have

01:28:41.190 --> 01:28:43.190
<v Speaker 1>manages secrets on your behalf,

01:28:43.590 --> 01:28:44.710
<v Speaker 1>but we focus on,

01:28:45.415 --> 01:28:47.735
<v Speaker 1>I think it's fair to say, like, simpler

01:28:47.735 --> 01:28:48.534
<v Speaker 1>team,

01:28:49.014 --> 01:28:50.695
<v Speaker 1>based scenarios.

01:28:50.695 --> 01:28:53.414
<v Speaker 1>We don't focus, like, full productionized

01:28:53.415 --> 01:28:56.534
<v Speaker 1>secret scenarios yet. Like, the secret implementation

01:28:57.094 --> 01:29:00.135
<v Speaker 1>for production will be pluggable, like other parts

01:29:00.135 --> 01:29:02.110
<v Speaker 1>are in are in our system. It's not

01:29:02.110 --> 01:29:03.070
<v Speaker 1>the case yet.

01:29:03.550 --> 01:29:05.469
<v Speaker 1>What we do today is you

01:29:05.710 --> 01:29:07.710
<v Speaker 1>you can define a secret here, and then

01:29:07.710 --> 01:29:08.989
<v Speaker 1>we'll tell you, well, do you need to

01:29:08.989 --> 01:29:11.230
<v Speaker 1>specify a value for it? We'll,

01:29:12.110 --> 01:29:13.630
<v Speaker 1>we'll give you a command, which is n

01:29:13.630 --> 01:29:16.264
<v Speaker 1>s secret set that writes a local file

01:29:16.344 --> 01:29:18.745
<v Speaker 1>that you should commit into your repository, but

01:29:18.745 --> 01:29:19.624
<v Speaker 1>it's encrypted.

01:29:20.344 --> 01:29:20.905
<v Speaker 1>And,

01:29:21.465 --> 01:29:24.025
<v Speaker 1>it uses a series of a series of

01:29:24.025 --> 01:29:26.824
<v Speaker 1>keys for those that are familiar with age,

01:29:27.065 --> 01:29:28.425
<v Speaker 1>which is kinda a

01:29:28.745 --> 01:29:31.480
<v Speaker 1>tool that is kinda commonly used for for

01:29:31.480 --> 01:29:34.760
<v Speaker 1>kind of encrypting data. We we we manage

01:29:34.760 --> 01:29:36.840
<v Speaker 1>age keys for you. So each developer has

01:29:36.840 --> 01:29:37.880
<v Speaker 1>an age key.

01:29:38.360 --> 01:29:40.200
<v Speaker 1>Then everyone that should have access to that

01:29:40.200 --> 01:29:43.145
<v Speaker 1>secret file is added to that secret file.

01:29:43.145 --> 01:29:45.225
<v Speaker 1>Every time that you add new secrets, we

01:29:45.225 --> 01:29:46.905
<v Speaker 1>re encrypt the file so that everyone in

01:29:46.905 --> 01:29:48.745
<v Speaker 1>the team has access to it. So whenever

01:29:48.745 --> 01:29:50.185
<v Speaker 1>you go and deploy something,

01:29:50.505 --> 01:29:53.305
<v Speaker 1>you have direct access to those secrets. They're

01:29:53.305 --> 01:29:55.145
<v Speaker 1>never committed clear text into the repository.

01:29:56.140 --> 01:29:57.900
<v Speaker 1>Then when it goes to stored?

01:29:58.780 --> 01:30:00.780
<v Speaker 1>Only in your local machine. Never

01:30:01.020 --> 01:30:03.580
<v Speaker 1>never revealed to us, never revealed to the

01:30:03.580 --> 01:30:04.380
<v Speaker 1>repository.

01:30:05.500 --> 01:30:07.739
<v Speaker 0>Okay. So what if I change machine,

01:30:08.540 --> 01:30:09.500
<v Speaker 0>do I lose access?

01:30:11.225 --> 01:30:14.425
<v Speaker 1>By default, yes. You can generate a new

01:30:14.425 --> 01:30:17.225
<v Speaker 1>key. So you go NS keys generate,

01:30:17.625 --> 01:30:20.265
<v Speaker 1>and and that behind the scenes uses age

01:30:20.265 --> 01:30:21.705
<v Speaker 1>to generate a new key, and then you

01:30:21.705 --> 01:30:22.825
<v Speaker 1>can ask a team member

01:30:23.250 --> 01:30:25.650
<v Speaker 1>to add you to the to the secrets

01:30:25.650 --> 01:30:26.209
<v Speaker 1>file,

01:30:26.769 --> 01:30:28.849
<v Speaker 1>which when we add a reader,

01:30:29.010 --> 01:30:31.250
<v Speaker 1>it re encrypts so you you will have

01:30:31.250 --> 01:30:33.010
<v Speaker 1>access to it. And

01:30:33.489 --> 01:30:35.090
<v Speaker 1>or or you can use your previous machine

01:30:35.090 --> 01:30:35.809
<v Speaker 1>to do that yourself.

01:30:36.745 --> 01:30:38.425
<v Speaker 0>Okay. So I should probably just back up

01:30:38.425 --> 01:30:40.505
<v Speaker 0>that private key, like, if I plan on

01:30:40.505 --> 01:30:41.945
<v Speaker 0>working for multiple machines?

01:30:43.385 --> 01:30:44.505
<v Speaker 1>Honestly,

01:30:44.505 --> 01:30:46.585
<v Speaker 1>like, the model that we followed is more

01:30:46.585 --> 01:30:48.744
<v Speaker 1>like a key per system.

01:30:48.905 --> 01:30:50.344
<v Speaker 1>So it's kind of

01:30:50.960 --> 01:30:53.280
<v Speaker 1>easier to reason about revocation.

01:30:53.680 --> 01:30:56.640
<v Speaker 1>But having said that, this is not designed

01:30:56.640 --> 01:30:57.520
<v Speaker 1>for production.

01:30:57.920 --> 01:31:00.400
<v Speaker 1>This is really just to assist development. What

01:31:00.400 --> 01:31:02.640
<v Speaker 1>often ends up in these files are secrets

01:31:02.640 --> 01:31:03.840
<v Speaker 1>that are used for development,

01:31:04.345 --> 01:31:06.425
<v Speaker 1>And we'll have a we'll have something that

01:31:06.425 --> 01:31:09.545
<v Speaker 1>integrates with Doppler and something that integrates with

01:31:09.545 --> 01:31:10.745
<v Speaker 1>Vault later on

01:31:11.305 --> 01:31:12.985
<v Speaker 1>as part of Namespace when you go to

01:31:12.985 --> 01:31:15.785
<v Speaker 1>production. You've already mentioned my favorite secret provider.

01:31:15.785 --> 01:31:17.865
<v Speaker 0>I use Doppler every day for everything. It

01:31:17.865 --> 01:31:18.745
<v Speaker 0>is fantastic.

01:31:19.000 --> 01:31:21.880
<v Speaker 0>And the free tier is ridiculous. Like, I

01:31:21.880 --> 01:31:23.159
<v Speaker 0>just work in projects on my own, I

01:31:23.159 --> 01:31:24.360
<v Speaker 0>never have to pay them any money and

01:31:24.360 --> 01:31:25.559
<v Speaker 0>they do all the time.

01:31:26.679 --> 01:31:28.920
<v Speaker 1>Yeah. There's there's I must say, I mean,

01:31:28.920 --> 01:31:31.159
<v Speaker 1>there's incredible software out there and we we

01:31:31.159 --> 01:31:33.560
<v Speaker 1>try to lean on it whenever it makes

01:31:33.560 --> 01:31:36.145
<v Speaker 1>sense. And, yeah, someone else already tackled secrets

01:31:36.145 --> 01:31:38.145
<v Speaker 1>for us. And for us so so for

01:31:38.145 --> 01:31:39.745
<v Speaker 1>us, it's really just about going and doing

01:31:39.745 --> 01:31:42.145
<v Speaker 1>a good job of integrating with them so

01:31:42.145 --> 01:31:43.825
<v Speaker 1>that it doesn't feel like, you as a

01:31:43.825 --> 01:31:45.585
<v Speaker 1>developer have to go out of your way.

01:31:45.585 --> 01:31:45.985
<v Speaker 1>And,

01:31:46.465 --> 01:31:46.865
<v Speaker 1>you know,

01:31:47.670 --> 01:31:49.590
<v Speaker 1>I I I can imagine how many people

01:31:49.830 --> 01:31:51.430
<v Speaker 1>have gone through this, and I I'm just

01:31:51.430 --> 01:31:52.389
<v Speaker 1>tired of

01:31:52.870 --> 01:31:56.150
<v Speaker 1>to use tool a, go to login,

01:31:56.150 --> 01:31:59.030
<v Speaker 1>go to settings, generate key, copy key. Like,

01:32:00.225 --> 01:32:02.385
<v Speaker 1>we we're trying to kinda really streamline that

01:32:02.385 --> 01:32:05.025
<v Speaker 1>whole experience, and and we even have ideas

01:32:05.025 --> 01:32:07.585
<v Speaker 1>of how to incorporate OAuth into

01:32:07.825 --> 01:32:10.465
<v Speaker 1>OAuth web flows into some of these so

01:32:10.465 --> 01:32:12.465
<v Speaker 1>that when you go and provision

01:32:13.710 --> 01:32:16.430
<v Speaker 1>something that can be can use OAuth authentication,

01:32:16.430 --> 01:32:18.590
<v Speaker 1>we actually kick you into a OAuth

01:32:20.030 --> 01:32:22.030
<v Speaker 1>authentication flow so that you don't have to

01:32:22.030 --> 01:32:23.869
<v Speaker 1>manage any more keys.

01:32:24.110 --> 01:32:25.710
<v Speaker 1>But these are these are things that will

01:32:25.710 --> 01:32:27.390
<v Speaker 1>come in the future. They're not there today

01:32:27.390 --> 01:32:28.670
<v Speaker 1>yet. Very cool.

01:32:29.715 --> 01:32:31.875
<v Speaker 0>Alright. I've already kept you way over time.

01:32:32.275 --> 01:32:33.635
<v Speaker 0>Is there anything else

01:32:33.955 --> 01:32:36.035
<v Speaker 0>you wanna show before we wrap up to

01:32:36.035 --> 01:32:36.835
<v Speaker 0>this session?

01:32:37.875 --> 01:32:39.555
<v Speaker 1>I think we could kick off or or

01:32:39.555 --> 01:32:41.795
<v Speaker 1>we could just finish this since we're here.

01:32:41.795 --> 01:32:44.080
<v Speaker 1>We could just do NS test because it's

01:32:44.080 --> 01:32:45.360
<v Speaker 1>one of those things that

01:32:47.200 --> 01:32:48.640
<v Speaker 1>I think folks

01:32:50.640 --> 01:32:53.440
<v Speaker 1>I hear people, like, we cannot run, like,

01:32:53.440 --> 01:32:55.200
<v Speaker 1>comprehensive tests whether

01:32:55.280 --> 01:32:57.280
<v Speaker 1>whether we're testing our front end or we're

01:32:57.280 --> 01:33:00.155
<v Speaker 1>testing our our back ends, and it's a

01:33:00.155 --> 01:33:01.114
<v Speaker 1>lot of folks

01:33:01.355 --> 01:33:04.554
<v Speaker 1>end up leaning on mocks and and and

01:33:04.554 --> 01:33:06.715
<v Speaker 1>really kind of underrepresented systems.

01:33:06.954 --> 01:33:09.274
<v Speaker 1>And we're trying really hard to make that

01:33:09.514 --> 01:33:10.074
<v Speaker 1>simple

01:33:10.760 --> 01:33:13.320
<v Speaker 1>but also cost efficient. Like, you don't want

01:33:13.320 --> 01:33:14.920
<v Speaker 1>to wait for hours for it to for

01:33:14.920 --> 01:33:16.280
<v Speaker 1>these run tests to run.

01:33:16.680 --> 01:33:19.320
<v Speaker 1>So when you define a test with

01:33:20.040 --> 01:33:22.120
<v Speaker 1>with NS, as I said, like, we're just

01:33:22.120 --> 01:33:24.760
<v Speaker 1>going to deploy that stack for you, and,

01:33:25.160 --> 01:33:27.824
<v Speaker 1>and then your testing code becomes a client

01:33:27.824 --> 01:33:29.824
<v Speaker 1>inside of the cluster. And what we saw

01:33:29.824 --> 01:33:31.985
<v Speaker 1>here, like, you're running all the tests that

01:33:31.985 --> 01:33:33.425
<v Speaker 1>are in the repository.

01:33:33.905 --> 01:33:36.784
<v Speaker 1>By default, the strategy is one at a

01:33:36.784 --> 01:33:38.945
<v Speaker 1>time. So we build in parallel, and that's

01:33:38.945 --> 01:33:40.304
<v Speaker 1>why you see a lot of things going

01:33:40.304 --> 01:33:43.039
<v Speaker 1>on right now. We're basically building all of

01:33:43.039 --> 01:33:44.879
<v Speaker 1>the tests and all of the examples.

01:33:45.599 --> 01:33:46.719
<v Speaker 1>But then we're

01:33:47.199 --> 01:33:49.359
<v Speaker 1>deploying one test at a time,

01:33:50.000 --> 01:33:51.840
<v Speaker 1>and that's what we saw before. And then

01:33:51.840 --> 01:33:54.079
<v Speaker 1>we said kind of collecting collecting post execution

01:33:54.079 --> 01:33:56.399
<v Speaker 1>server logs. We'll see that at the end

01:33:56.400 --> 01:33:58.875
<v Speaker 1>that we run that test, and then we

01:33:58.875 --> 01:34:01.035
<v Speaker 1>not only collect the logs of your test

01:34:01.035 --> 01:34:03.435
<v Speaker 1>driver, but we also collect the logs of

01:34:03.435 --> 01:34:05.035
<v Speaker 1>all the servers involved

01:34:05.035 --> 01:34:06.074
<v Speaker 1>in that test,

01:34:06.555 --> 01:34:09.035
<v Speaker 1>during the duration of the test. And in

01:34:09.035 --> 01:34:10.715
<v Speaker 1>the future, we'll also collect

01:34:11.070 --> 01:34:14.350
<v Speaker 1>metrics. We'll collect network traffic between those tests

01:34:14.350 --> 01:34:15.790
<v Speaker 1>so that you can understand,

01:34:16.430 --> 01:34:18.830
<v Speaker 1>what actually happened. You can debug,

01:34:18.990 --> 01:34:21.710
<v Speaker 1>and you can, better review some of the

01:34:21.710 --> 01:34:23.550
<v Speaker 1>changes that you're doing and how they affect

01:34:23.550 --> 01:34:25.630
<v Speaker 1>some of the tests. So we use tests

01:34:25.630 --> 01:34:27.855
<v Speaker 1>a lot because that's a way for us

01:34:27.855 --> 01:34:30.335
<v Speaker 1>to have confidence that, that we're shipping things

01:34:30.335 --> 01:34:31.054
<v Speaker 1>at work.

01:34:31.375 --> 01:34:32.895
<v Speaker 1>But you'll go through our code base, and

01:34:32.895 --> 01:34:34.094
<v Speaker 1>you'll see very few

01:34:34.335 --> 01:34:37.375
<v Speaker 1>unit tests, actually, but, quite a bit of

01:34:37.375 --> 01:34:38.895
<v Speaker 1>these kind of end to end tests

01:34:39.370 --> 01:34:41.690
<v Speaker 1>because we we really want to go for

01:34:41.690 --> 01:34:44.090
<v Speaker 1>that full represent representation.

01:34:44.570 --> 01:34:46.650
<v Speaker 1>And so here, it's going it's because it's

01:34:46.650 --> 01:34:48.090
<v Speaker 1>running everything, you'll see it just takes a

01:34:48.090 --> 01:34:50.010
<v Speaker 1>little bit of time. We have

01:34:50.490 --> 01:34:52.810
<v Speaker 1>options that allow you to increase parallelism,

01:34:53.245 --> 01:34:56.364
<v Speaker 1>and we have a product coming next year

01:34:56.605 --> 01:34:57.165
<v Speaker 1>that,

01:34:57.565 --> 01:34:59.405
<v Speaker 1>we call them instant clusters

01:34:59.565 --> 01:35:02.125
<v Speaker 1>where, whether it's in our infrastructure or on

01:35:02.125 --> 01:35:04.364
<v Speaker 1>on your infrastructure, you'll be able to spin

01:35:04.364 --> 01:35:07.085
<v Speaker 1>up, like, a cluster from scratch in a

01:35:07.085 --> 01:35:07.565
<v Speaker 1>few seconds,

01:35:08.160 --> 01:35:11.119
<v Speaker 1>and and the target is is exactly

01:35:11.440 --> 01:35:13.120
<v Speaker 1>kinda running this test. We want you to

01:35:13.120 --> 01:35:14.239
<v Speaker 1>be able to run twenty,

01:35:15.120 --> 01:35:17.119
<v Speaker 1>fifty, one hundred tests in parallel

01:35:17.360 --> 01:35:17.760
<v Speaker 1>and

01:35:18.239 --> 01:35:20.400
<v Speaker 1>but in fully isolated environments.

01:35:21.745 --> 01:35:23.265
<v Speaker 0>Yeah. This is pretty neat. I had no

01:35:23.265 --> 01:35:25.185
<v Speaker 0>idea I was running every test in the

01:35:25.185 --> 01:35:26.625
<v Speaker 0>entire repository,

01:35:26.625 --> 01:35:28.785
<v Speaker 0>but I'm also kinda glad to edit because

01:35:28.785 --> 01:35:30.705
<v Speaker 0>it's been kind of fun watching us kinda

01:35:30.705 --> 01:35:32.465
<v Speaker 0>scroll by and then tick, tick, tick, tick,

01:35:32.465 --> 01:35:34.065
<v Speaker 0>and then we got past past past past.

01:35:34.065 --> 01:35:36.250
<v Speaker 0>So, yeah, that was cool. I like that.

01:35:36.250 --> 01:35:38.250
<v Speaker 1>It's

01:35:38.250 --> 01:35:41.530
<v Speaker 1>it's also satisfying in some way that

01:35:42.090 --> 01:35:43.850
<v Speaker 1>it does all that work and then and

01:35:43.850 --> 01:35:46.489
<v Speaker 1>then obviously when when things work, it's good.

01:35:46.489 --> 01:35:50.275
<v Speaker 1>But but, we developer experience is so important.

01:35:50.275 --> 01:35:53.074
<v Speaker 1>And, right now, we'll tell you that, well,

01:35:53.074 --> 01:35:54.995
<v Speaker 1>you're testing in past and and that and

01:35:54.995 --> 01:35:56.034
<v Speaker 1>and here's why.

01:35:56.355 --> 01:35:59.719
<v Speaker 1>But we have so many ideas of how

01:35:59.719 --> 01:36:02.920
<v Speaker 1>we can improve that whole troubleshooting,

01:36:04.440 --> 01:36:07.400
<v Speaker 1>journey that you go as you're developing software.

01:36:07.640 --> 01:36:09.479
<v Speaker 1>We want to bring into Namespace

01:36:09.480 --> 01:36:11.239
<v Speaker 1>so that, again, you don't have to go

01:36:11.239 --> 01:36:12.760
<v Speaker 1>and figure out how to do diff use

01:36:12.760 --> 01:36:14.600
<v Speaker 1>different tools for that. You just run NSS.

01:36:14.945 --> 01:36:16.545
<v Speaker 1>It gives you a in a kind of

01:36:16.545 --> 01:36:18.465
<v Speaker 1>a URL that you can click. It will

01:36:18.465 --> 01:36:20.865
<v Speaker 1>show you what happened, whether it's logs, whether

01:36:20.865 --> 01:36:21.745
<v Speaker 1>it's traffic,

01:36:21.985 --> 01:36:23.425
<v Speaker 1>who called who,

01:36:23.745 --> 01:36:25.985
<v Speaker 1>and and just kind of so that you

01:36:25.985 --> 01:36:28.065
<v Speaker 1>have, like, a tool that helps you

01:36:28.780 --> 01:36:31.020
<v Speaker 1>as you're building a robust software. We care

01:36:31.020 --> 01:36:32.620
<v Speaker 1>deeply about robust software.

01:36:33.260 --> 01:36:34.060
<v Speaker 0>Awesome.

01:36:34.860 --> 01:36:35.580
<v Speaker 0>Well,

01:36:35.980 --> 01:36:37.660
<v Speaker 0>that was really cool. I I think you're

01:36:37.660 --> 01:36:39.980
<v Speaker 0>you're sneaking in just before the December 1

01:36:39.980 --> 01:36:41.075
<v Speaker 0>is like potentially

01:36:41.555 --> 01:36:43.715
<v Speaker 0>my favorite project of 2022.

01:36:43.715 --> 01:36:45.715
<v Speaker 0>Like this is super cool. And it's one

01:36:45.715 --> 01:36:48.435
<v Speaker 0>of those spaces that I am very passionate

01:36:48.435 --> 01:36:52.675
<v Speaker 0>about. Think especially with Kubernetes adoption, microservices,

01:36:52.675 --> 01:36:55.870
<v Speaker 0>cloud native health to some degree, is that

01:36:55.870 --> 01:36:57.150
<v Speaker 0>a lot of the things we used to

01:36:57.150 --> 01:36:59.070
<v Speaker 0>take for granted that were simple and they

01:36:59.070 --> 01:37:00.750
<v Speaker 0>become inherently complex.

01:37:00.910 --> 01:37:02.190
<v Speaker 0>And Namespace

01:37:02.510 --> 01:37:04.590
<v Speaker 0>with the way that it provides these obstructions

01:37:04.590 --> 01:37:07.550
<v Speaker 0>and reusable components and provides a developer experience.

01:37:08.735 --> 01:37:10.335
<v Speaker 0>I'm very excited about it. I've gotta be

01:37:10.335 --> 01:37:12.014
<v Speaker 0>honest. I'm I'm very very happy that you

01:37:12.014 --> 01:37:13.295
<v Speaker 0>joined me today and I can't wait to

01:37:13.295 --> 01:37:15.934
<v Speaker 0>see what comes next. I think there's so

01:37:15.934 --> 01:37:17.614
<v Speaker 0>much more. Sorry. I'm just gonna keep blabbing

01:37:17.614 --> 01:37:18.735
<v Speaker 0>at you, I think there's so much more

01:37:18.735 --> 01:37:20.255
<v Speaker 0>we we can show and I think we're

01:37:20.255 --> 01:37:21.534
<v Speaker 0>gonna have to schedule some sort of other

01:37:21.534 --> 01:37:23.375
<v Speaker 0>episodes in the coming weeks or something like

01:37:23.375 --> 01:37:25.320
<v Speaker 0>that just to to get through all.

01:37:25.720 --> 01:37:27.320
<v Speaker 1>I would love to come back, and I

01:37:27.320 --> 01:37:28.520
<v Speaker 1>I really appreciate

01:37:29.400 --> 01:37:32.120
<v Speaker 1>the opportunity, David. And on I've been a

01:37:32.120 --> 01:37:35.080
<v Speaker 1>follower for for for a long time, and

01:37:35.080 --> 01:37:36.760
<v Speaker 1>so it's it's actually

01:37:36.840 --> 01:37:39.745
<v Speaker 1>a pleasure and an an honor to to

01:37:39.745 --> 01:37:41.665
<v Speaker 1>be here because I I I

01:37:41.905 --> 01:37:44.065
<v Speaker 1>really appreciate how you approach kind of problem

01:37:44.065 --> 01:37:46.705
<v Speaker 1>solving and and and your passion for for

01:37:46.705 --> 01:37:48.224
<v Speaker 1>the ecosystem that we share.

01:37:48.785 --> 01:37:50.865
<v Speaker 1>I welcome folks to try it out and,

01:37:50.865 --> 01:37:52.625
<v Speaker 1>you know, and come and talk with us.

01:37:52.625 --> 01:37:55.730
<v Speaker 1>Like, we we're developers just like you, and,

01:37:55.890 --> 01:37:58.690
<v Speaker 1>we want to build great software. And, we'll

01:37:58.690 --> 01:38:01.090
<v Speaker 1>only be able to build great software if

01:38:01.090 --> 01:38:03.330
<v Speaker 1>we, learn from all of you on what's

01:38:03.330 --> 01:38:04.930
<v Speaker 1>what's kind of important and what are the

01:38:04.930 --> 01:38:06.930
<v Speaker 1>things that we should be looking at. And

01:38:06.425 --> 01:38:08.345
<v Speaker 1>if you're passionate about open source and want

01:38:08.345 --> 01:38:10.345
<v Speaker 1>to contribute, we're happy to have you. So

01:38:10.345 --> 01:38:11.625
<v Speaker 1>come on board.

01:38:12.505 --> 01:38:15.065
<v Speaker 0>Awesome. Well, I'll make sure that the links

01:38:15.065 --> 01:38:16.825
<v Speaker 0>to the Twitter and Discord are in the

01:38:16.825 --> 01:38:19.145
<v Speaker 0>show notes shortly after this. So if you've

01:38:19.145 --> 01:38:20.985
<v Speaker 0>watched this session and you like what you

01:38:20.985 --> 01:38:23.680
<v Speaker 0>see, join the Discord, ask questions, get help

01:38:23.680 --> 01:38:25.840
<v Speaker 0>and even contribute back. There's lots to be

01:38:25.840 --> 01:38:27.680
<v Speaker 0>done. But the start that we have here

01:38:27.680 --> 01:38:29.760
<v Speaker 0>is very exciting. So Hugo and to your

01:38:29.760 --> 01:38:31.680
<v Speaker 0>team in the comments, thank you so much

01:38:31.680 --> 01:38:33.760
<v Speaker 0>for all your hard work. I'm going to

01:38:33.760 --> 01:38:35.965
<v Speaker 0>experiment more and hopefully we'll speak soon.

01:38:36.205 --> 01:38:37.885
<v Speaker 0>Any last words? The big props to my

01:38:37.885 --> 01:38:40.364
<v Speaker 1>team. Yeah. They're they're awesome. Like, I wouldn't

01:38:40.364 --> 01:38:42.684
<v Speaker 1>be here without them. So thank you.

01:38:43.005 --> 01:38:45.165
<v Speaker 0>Alright. Awesome. Have a wonderful day. I'll we'll

01:38:45.165 --> 01:38:47.245
<v Speaker 0>see you all soon until next time. Bye.
