WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 737630a8-fdbc-4c11-ae17-cdf1d143ddbc
Created: 2025-04-29T12:55:17.924Z
Duration: 1271.2178
Channels: 1

00:00:00.640 --> 00:00:03.439
<v Speaker 0>Hello, and welcome back to the Rawkode Academy.

00:00:03.439 --> 00:00:05.440
<v Speaker 0>I'm your host, David Flanagan.

00:00:05.839 --> 00:00:08.400
<v Speaker 0>Today, I want to introduce you to a

00:00:08.400 --> 00:00:11.679
<v Speaker 0>relatively recent open source project that is going

00:00:11.679 --> 00:00:12.960
<v Speaker 0>to change the way

00:00:13.205 --> 00:00:16.324
<v Speaker 0>you handle your Kubernetes networking policies

00:00:16.325 --> 00:00:17.525
<v Speaker 0>and more.

00:00:18.244 --> 00:00:20.404
<v Speaker 0>That project is called Otterize.

00:00:20.885 --> 00:00:23.605
<v Speaker 0>It's got a complete evolution on the way

00:00:23.605 --> 00:00:25.525
<v Speaker 0>that we configure networking

00:00:25.525 --> 00:00:27.685
<v Speaker 0>access within our clusters

00:00:28.380 --> 00:00:29.980
<v Speaker 0>using something called

00:00:30.140 --> 00:00:31.099
<v Speaker 0>iBack,

00:00:31.259 --> 00:00:33.739
<v Speaker 0>intent based access control.

00:00:34.059 --> 00:00:35.980
<v Speaker 0>And we're gonna dive into what that means

00:00:35.980 --> 00:00:37.180
<v Speaker 0>in just a moment.

00:00:38.620 --> 00:00:40.699
<v Speaker 0>Now like I said, Otterize is different.

00:00:41.405 --> 00:00:43.165
<v Speaker 0>It isn't a service mesh.

00:00:43.405 --> 00:00:46.365
<v Speaker 0>It doesn't change your pods, inject in proxies

00:00:46.365 --> 00:00:47.405
<v Speaker 0>and sidecars

00:00:47.405 --> 00:00:49.885
<v Speaker 0>to order to control your traffic.

00:00:51.965 --> 00:00:53.965
<v Speaker 0>Instead, it integrates

00:00:54.680 --> 00:00:56.040
<v Speaker 0>with Kubernetes,

00:00:56.440 --> 00:00:57.320
<v Speaker 0>Kafka,

00:00:57.720 --> 00:00:58.600
<v Speaker 0>Istio,

00:00:59.320 --> 00:01:01.800
<v Speaker 0>configuring the tools that you're already using in

00:01:01.800 --> 00:01:02.760
<v Speaker 0>your cluster,

00:01:03.640 --> 00:01:06.040
<v Speaker 0>but providing a better DX

00:01:06.200 --> 00:01:07.800
<v Speaker 0>to allow you to do that as a

00:01:07.800 --> 00:01:08.280
<v Speaker 0>dev team.

00:01:09.515 --> 00:01:10.795
<v Speaker 0>To understand more,

00:01:11.115 --> 00:01:14.075
<v Speaker 0>let's dive in to what iBack actually means.

00:01:14.475 --> 00:01:17.115
<v Speaker 0>So here we have the Otterize website.

00:01:18.075 --> 00:01:20.634
<v Speaker 0>You can find us at authorize.com,

00:01:20.634 --> 00:01:21.914
<v Speaker 0>and the page we're looking at right now

00:01:21.914 --> 00:01:23.994
<v Speaker 0>is the iBack page slash iBack.

00:01:24.690 --> 00:01:27.650
<v Speaker 0>Now intent based access control is a declarative

00:01:27.650 --> 00:01:30.770
<v Speaker 0>way that allows you to define which services

00:01:30.770 --> 00:01:33.330
<v Speaker 0>are allowed to call other services within your

00:01:33.330 --> 00:01:34.050
<v Speaker 0>cluster.

00:01:35.170 --> 00:01:37.330
<v Speaker 0>Traditionally, the way that this would be handled

00:01:37.330 --> 00:01:39.595
<v Speaker 0>or at least what I've seen from working

00:01:39.595 --> 00:01:41.034
<v Speaker 0>with many organizations

00:01:41.435 --> 00:01:44.395
<v Speaker 0>is that the developers don't focus at all

00:01:44.395 --> 00:01:45.674
<v Speaker 0>on security

00:01:45.675 --> 00:01:46.795
<v Speaker 0>or policy.

00:01:47.995 --> 00:01:49.915
<v Speaker 0>Especially in a micro service environment

00:01:50.315 --> 00:01:52.395
<v Speaker 0>where teams are responsible for one or more

00:01:52.395 --> 00:01:52.875
<v Speaker 0>services,

00:01:53.460 --> 00:01:56.260
<v Speaker 0>they really only flow together enough YAML for

00:01:56.260 --> 00:01:58.659
<v Speaker 0>a deployment and a service within the cluster.

00:01:59.380 --> 00:02:02.340
<v Speaker 0>All of the security and policy happens from

00:02:02.340 --> 00:02:03.860
<v Speaker 0>some sort of SRE,

00:02:03.860 --> 00:02:06.740
<v Speaker 0>DevOps, or platform team, or if your organization

00:02:06.740 --> 00:02:08.419
<v Speaker 0>is lucky enough to have one, a security

00:02:08.419 --> 00:02:08.819
<v Speaker 0>team.

00:02:10.485 --> 00:02:12.645
<v Speaker 0>Now this means that we have a violation

00:02:12.645 --> 00:02:14.085
<v Speaker 0>of the law of demeanor.

00:02:14.565 --> 00:02:16.645
<v Speaker 0>The law of demeanor really just means that

00:02:16.645 --> 00:02:18.645
<v Speaker 0>we don't want leaky extractions.

00:02:19.045 --> 00:02:22.165
<v Speaker 0>We don't really want our security platform DevOps

00:02:22.165 --> 00:02:24.280
<v Speaker 0>teams to have to understand the entirety of

00:02:24.280 --> 00:02:25.880
<v Speaker 0>a microservice architecture

00:02:25.880 --> 00:02:27.640
<v Speaker 0>to be able to put together these security

00:02:27.640 --> 00:02:28.440
<v Speaker 0>policies

00:02:28.440 --> 00:02:31.160
<v Speaker 0>because inevitably, they're gonna get it wrong or

00:02:31.160 --> 00:02:32.680
<v Speaker 0>it's just gonna be a lot harder than

00:02:32.680 --> 00:02:33.560
<v Speaker 0>it should be.

00:02:34.520 --> 00:02:36.360
<v Speaker 0>And if we're gonna provide a declarative way

00:02:36.360 --> 00:02:37.160
<v Speaker 0>to define

00:02:37.425 --> 00:02:38.785
<v Speaker 0>all of this access,

00:02:39.185 --> 00:02:41.345
<v Speaker 0>why not allow the developers to do it?

00:02:42.785 --> 00:02:45.825
<v Speaker 0>Picture this, you're working on a service.

00:02:46.145 --> 00:02:48.305
<v Speaker 0>You write the code that makes a network

00:02:48.305 --> 00:02:48.945
<v Speaker 0>call.

00:02:49.345 --> 00:02:51.105
<v Speaker 0>It wants to speak to Kafka,

00:02:51.185 --> 00:02:54.590
<v Speaker 0>consume a topic, publish to a topic, or

00:02:54.590 --> 00:02:57.230
<v Speaker 0>perhaps even make a gRPC or HTTP request

00:02:57.230 --> 00:02:58.430
<v Speaker 0>to another service.

00:02:59.150 --> 00:03:00.590
<v Speaker 0>You wrote the code.

00:03:01.070 --> 00:03:02.830
<v Speaker 0>You know what the intent is.

00:03:03.230 --> 00:03:06.030
<v Speaker 0>You intend for your service to communicate

00:03:06.375 --> 00:03:08.695
<v Speaker 0>or speak to another service.

00:03:09.495 --> 00:03:12.215
<v Speaker 0>So why not log those intents

00:03:12.535 --> 00:03:14.535
<v Speaker 0>inside of your repository

00:03:14.535 --> 00:03:16.295
<v Speaker 0>right next to your service?

00:03:17.095 --> 00:03:18.855
<v Speaker 0>And that's what iMac wants to change.

00:03:20.040 --> 00:03:22.920
<v Speaker 0>Using something called the intense file,

00:03:23.080 --> 00:03:25.480
<v Speaker 0>which is really just a Kubernetes resource, a

00:03:25.480 --> 00:03:26.520
<v Speaker 0>custom resource.

00:03:26.760 --> 00:03:29.000
<v Speaker 0>You can see that my service,

00:03:29.480 --> 00:03:31.960
<v Speaker 0>using this example here, the checkout service,

00:03:32.200 --> 00:03:33.560
<v Speaker 0>calls these other services.

00:03:34.845 --> 00:03:37.165
<v Speaker 0>Now where this extends beyond

00:03:37.165 --> 00:03:40.685
<v Speaker 0>what we're familiar with with traditional Kubernetes networking

00:03:40.685 --> 00:03:41.565
<v Speaker 0>policies

00:03:42.045 --> 00:03:44.364
<v Speaker 0>is that there's some l seven awareness baked

00:03:44.364 --> 00:03:45.805
<v Speaker 0>into what Otterize can do.

00:03:47.260 --> 00:03:49.740
<v Speaker 0>So you can see here that we define

00:03:49.740 --> 00:03:51.980
<v Speaker 0>the HTTP requests are allowed on this path

00:03:51.980 --> 00:03:53.180
<v Speaker 0>with these methods.

00:03:53.820 --> 00:03:55.900
<v Speaker 0>Taking us even further to something you can't

00:03:55.900 --> 00:03:58.300
<v Speaker 0>do with network policies in Kubernetes

00:03:58.460 --> 00:04:00.940
<v Speaker 0>is here we have a Kafka intent

00:04:01.185 --> 00:04:04.545
<v Speaker 0>which allows us to produce messages, write messages

00:04:04.545 --> 00:04:06.625
<v Speaker 0>on a topic called orders.

00:04:07.185 --> 00:04:09.985
<v Speaker 0>This is very fine grained ACL that needs

00:04:09.985 --> 00:04:12.865
<v Speaker 0>to be configured on the Kafka broker itself,

00:04:13.480 --> 00:04:14.680
<v Speaker 0>and Otterize

00:04:14.840 --> 00:04:16.040
<v Speaker 0>can make that happen.

00:04:16.600 --> 00:04:19.320
<v Speaker 0>So that's enough chat. Let's get hands on.

00:04:19.880 --> 00:04:22.520
<v Speaker 0>In this demo, we're going to install Otterize.

00:04:23.400 --> 00:04:25.720
<v Speaker 0>I'm going to show you how to add

00:04:25.720 --> 00:04:26.680
<v Speaker 0>enough intents

00:04:26.895 --> 00:04:30.014
<v Speaker 0>for Otterize to create Kubernetes network and policies

00:04:30.014 --> 00:04:32.415
<v Speaker 0>for you. Otterize allows you

00:04:32.655 --> 00:04:35.134
<v Speaker 0>to ease in to use an Otterize, and

00:04:35.134 --> 00:04:36.574
<v Speaker 0>we'll take a look at how we can

00:04:36.574 --> 00:04:37.695
<v Speaker 0>run Otterize

00:04:38.495 --> 00:04:40.895
<v Speaker 0>in shadow mode and enforcement mode

00:04:41.800 --> 00:04:44.280
<v Speaker 0>Before finally taking a look at Otterize Cloud,

00:04:44.280 --> 00:04:46.120
<v Speaker 0>which will allow us to visualize

00:04:46.280 --> 00:04:48.200
<v Speaker 0>and build a map topology

00:04:48.200 --> 00:04:49.800
<v Speaker 0>of all of the services

00:04:49.800 --> 00:04:52.120
<v Speaker 0>and their access permissions within our cluster.

00:04:53.025 --> 00:04:55.665
<v Speaker 0>Let's dive right in. Okay. So let's install

00:04:55.665 --> 00:04:57.665
<v Speaker 0>Otterize into our cluster.

00:04:58.544 --> 00:05:01.345
<v Speaker 0>Here, we have the Otterize organization

00:05:01.345 --> 00:05:04.225
<v Speaker 0>on GitHub with a repository called HelmChart,

00:05:04.305 --> 00:05:06.945
<v Speaker 0>which, you guessed it, has their HelmChart.

00:05:07.700 --> 00:05:09.780
<v Speaker 0>Right now, we are gonna focus on Otterize

00:05:09.780 --> 00:05:10.820
<v Speaker 0>Kubernetes.

00:05:11.700 --> 00:05:13.780
<v Speaker 0>This will actually install all the other charts

00:05:13.780 --> 00:05:16.900
<v Speaker 0>into your cluster, given your complete authorized deployment.

00:05:18.100 --> 00:05:20.020
<v Speaker 0>Just to cover what these other charts are,

00:05:20.355 --> 00:05:23.715
<v Speaker 0>the intense operator is what takes your intense

00:05:23.715 --> 00:05:27.635
<v Speaker 0>custom resource and creates policies and ACLs with

00:05:27.635 --> 00:05:29.715
<v Speaker 0>other software running in your cluster.

00:05:30.355 --> 00:05:31.795
<v Speaker 0>The network mapper

00:05:33.075 --> 00:05:36.275
<v Speaker 0>just maps the services within your cluster

00:05:35.980 --> 00:05:38.380
<v Speaker 0>to understand the way the traffic flows and

00:05:38.380 --> 00:05:40.700
<v Speaker 0>allows you to generate a diagram to visualize

00:05:40.700 --> 00:05:41.340
<v Speaker 0>that.

00:05:41.660 --> 00:05:43.420
<v Speaker 0>So the first thing we need to do

00:05:43.660 --> 00:05:46.060
<v Speaker 0>is add the helm repository,

00:05:47.980 --> 00:05:48.460
<v Speaker 0>like so.

00:05:50.545 --> 00:05:52.225
<v Speaker 0>Next, we can install

00:05:52.305 --> 00:05:53.345
<v Speaker 0>Otterize.

00:05:55.825 --> 00:05:58.065
<v Speaker 0>Easiest thing I've done all day.

00:05:58.545 --> 00:06:00.705
<v Speaker 0>Let's just get that two moments

00:06:01.745 --> 00:06:02.545
<v Speaker 0>and done.

00:06:03.660 --> 00:06:06.220
<v Speaker 0>Now, we can run, kubectl,

00:06:06.220 --> 00:06:07.660
<v Speaker 0>authorize system,

00:06:07.900 --> 00:06:08.860
<v Speaker 0>get pods.

00:06:11.420 --> 00:06:13.900
<v Speaker 0>And we'll see each of those components spinning

00:06:13.900 --> 00:06:14.140
<v Speaker 0>up.

00:06:15.185 --> 00:06:16.385
<v Speaker 0>Let's crack on.

00:06:16.705 --> 00:06:18.544
<v Speaker 0>Okay. So let's take a look at what's

00:06:18.544 --> 00:06:20.785
<v Speaker 0>running inside of our cluster.

00:06:22.384 --> 00:06:25.104
<v Speaker 0>Here we have the Weaveworks Sockshop

00:06:25.104 --> 00:06:25.905
<v Speaker 0>demo.

00:06:26.865 --> 00:06:29.664
<v Speaker 0>This is a sample store built with multiple

00:06:29.664 --> 00:06:30.944
<v Speaker 0>microservices

00:06:33.320 --> 00:06:35.320
<v Speaker 0>and a whole bunch of services that allow

00:06:35.320 --> 00:06:37.240
<v Speaker 0>them to communicate with one another.

00:06:37.960 --> 00:06:39.800
<v Speaker 0>We also have the front end exposed on

00:06:39.800 --> 00:06:41.320
<v Speaker 0>our load balancer service,

00:06:41.800 --> 00:06:42.520
<v Speaker 0>meaning

00:06:42.600 --> 00:06:43.560
<v Speaker 0>we can browse it.

00:06:44.125 --> 00:06:45.485
<v Speaker 0>We can view products

00:06:46.525 --> 00:06:48.205
<v Speaker 0>and view the cart.

00:06:49.085 --> 00:06:50.445
<v Speaker 0>If we click login,

00:06:50.845 --> 00:06:52.764
<v Speaker 0>we get a dialogue, and if we click

00:06:52.764 --> 00:06:53.565
<v Speaker 0>register,

00:06:53.645 --> 00:06:54.525
<v Speaker 0>we get a dialogue.

00:06:56.300 --> 00:06:58.060
<v Speaker 0>If we open login again,

00:06:58.140 --> 00:06:59.500
<v Speaker 0>we can type user

00:07:00.300 --> 00:07:01.420
<v Speaker 0>and password,

00:07:02.780 --> 00:07:04.300
<v Speaker 0>and login successful.

00:07:06.540 --> 00:07:07.180
<v Speaker 0>So

00:07:07.900 --> 00:07:10.860
<v Speaker 0>let's use an authorized intense file

00:07:11.125 --> 00:07:14.165
<v Speaker 0>to make the communication between these services more

00:07:14.165 --> 00:07:14.965
<v Speaker 0>explicit.

00:07:16.485 --> 00:07:19.765
<v Speaker 0>Okay. So let's, first of all, log out.

00:07:20.645 --> 00:07:23.604
<v Speaker 0>Then we'll jump back to Versus Code where

00:07:23.604 --> 00:07:26.005
<v Speaker 0>we have an empty intense dot YAML.

00:07:27.150 --> 00:07:30.110
<v Speaker 0>Gonna paste in an example resource that works

00:07:30.110 --> 00:07:31.150
<v Speaker 0>for this demo.

00:07:31.790 --> 00:07:34.910
<v Speaker 0>Here, we define an authorized client intense

00:07:34.910 --> 00:07:37.150
<v Speaker 0>with whatever name you wish. Of course, if

00:07:37.150 --> 00:07:38.910
<v Speaker 0>it makes sense, bonus points.

00:07:39.884 --> 00:07:42.044
<v Speaker 0>We then define a spec where we say

00:07:42.044 --> 00:07:43.245
<v Speaker 0>that we want to

00:07:43.884 --> 00:07:44.764
<v Speaker 0>specify

00:07:44.764 --> 00:07:47.245
<v Speaker 0>the intents for the front end service.

00:07:47.645 --> 00:07:50.365
<v Speaker 0>The front end service being the application that

00:07:50.365 --> 00:07:52.620
<v Speaker 0>runs on our browser, the web app, which

00:07:52.620 --> 00:07:54.380
<v Speaker 0>is likely going to call pretty much every

00:07:54.380 --> 00:07:57.100
<v Speaker 0>service. But right now, we're only gonna make

00:07:57.100 --> 00:08:00.060
<v Speaker 0>explicit that it calls the user service.

00:08:01.180 --> 00:08:03.020
<v Speaker 0>So we can come to the CLI

00:08:04.620 --> 00:08:06.620
<v Speaker 0>and apply our intents dot YAML.

00:08:07.485 --> 00:08:09.405
<v Speaker 0>And what's going to happen now is that

00:08:09.405 --> 00:08:11.005
<v Speaker 0>the intents operator

00:08:11.165 --> 00:08:13.325
<v Speaker 0>is gonna detect the custom resource

00:08:13.645 --> 00:08:16.045
<v Speaker 0>and create a network policy.

00:08:17.325 --> 00:08:18.605
<v Speaker 0>We can describe

00:08:18.685 --> 00:08:20.205
<v Speaker 0>that network policy,

00:08:21.085 --> 00:08:23.460
<v Speaker 0>and we will see that it specifies a

00:08:23.460 --> 00:08:24.740
<v Speaker 0>pod selector

00:08:24.740 --> 00:08:29.300
<v Speaker 0>where the server is user SockShopE8BOA2.

00:08:31.620 --> 00:08:33.940
<v Speaker 0>It then has an allow ingress

00:08:35.275 --> 00:08:37.755
<v Speaker 0>from a pod selector where there is a

00:08:37.755 --> 00:08:38.475
<v Speaker 0>label

00:08:38.794 --> 00:08:40.475
<v Speaker 0>which allows access

00:08:40.475 --> 00:08:43.755
<v Speaker 0>to user stock ShopEBBOA2

00:08:43.755 --> 00:08:44.555
<v Speaker 0>true.

00:08:45.675 --> 00:08:48.155
<v Speaker 0>Now the intense operator behind the scenes is

00:08:48.155 --> 00:08:48.875
<v Speaker 0>resolving

00:08:49.320 --> 00:08:52.280
<v Speaker 0>the service names and our client intents

00:08:52.680 --> 00:08:56.920
<v Speaker 0>and allocating the labels to facilitate the traffic.

00:08:58.600 --> 00:09:00.040
<v Speaker 0>If we jump back

00:09:00.680 --> 00:09:02.040
<v Speaker 0>to the web browser

00:09:02.600 --> 00:09:03.640
<v Speaker 0>and hit refresh,

00:09:05.725 --> 00:09:08.285
<v Speaker 0>saying we wish to log in,

00:09:12.045 --> 00:09:12.925
<v Speaker 0>it works.

00:09:14.685 --> 00:09:16.845
<v Speaker 0>Now, of course, all we've done is allow

00:09:16.845 --> 00:09:17.885
<v Speaker 0>traffic.

00:09:18.420 --> 00:09:20.260
<v Speaker 0>We haven't blocked

00:09:20.420 --> 00:09:21.540
<v Speaker 0>any traffic.

00:09:22.980 --> 00:09:25.380
<v Speaker 0>So let's head back over to our intents.yaml

00:09:25.380 --> 00:09:28.660
<v Speaker 0>where we can add a protected service.

00:09:29.620 --> 00:09:31.860
<v Speaker 0>Here, we're going to see that this user

00:09:31.860 --> 00:09:33.380
<v Speaker 0>service is protected,

00:09:33.805 --> 00:09:34.765
<v Speaker 0>which means

00:09:35.165 --> 00:09:36.365
<v Speaker 0>all traffic

00:09:36.365 --> 00:09:38.445
<v Speaker 0>that doesn't have an intent

00:09:39.005 --> 00:09:40.205
<v Speaker 0>will be blocked.

00:09:42.525 --> 00:09:44.765
<v Speaker 0>We can now come back over here and

00:09:44.765 --> 00:09:47.485
<v Speaker 0>apply our updated intents dot YAML

00:09:48.440 --> 00:09:50.920
<v Speaker 0>and run NetPol again.

00:09:52.120 --> 00:09:54.839
<v Speaker 0>We'll now see that three seconds ago,

00:09:55.240 --> 00:09:58.120
<v Speaker 0>a default deny user network policy,

00:09:58.360 --> 00:10:00.360
<v Speaker 0>which does not allow any ingress,

00:10:00.600 --> 00:10:02.200
<v Speaker 0>targets, user service.

00:10:04.785 --> 00:10:06.625
<v Speaker 0>We can now come back over to the

00:10:06.625 --> 00:10:07.585
<v Speaker 0>sock shop

00:10:08.545 --> 00:10:10.065
<v Speaker 0>where we can ask it

00:10:11.505 --> 00:10:12.625
<v Speaker 0>to log in.

00:10:14.705 --> 00:10:15.105
<v Speaker 0>Success.

00:10:18.160 --> 00:10:19.920
<v Speaker 0>So let's make one more change.

00:10:22.080 --> 00:10:23.920
<v Speaker 0>We're now going to update our front end

00:10:23.920 --> 00:10:26.560
<v Speaker 0>intents and instead of the user service,

00:10:28.000 --> 00:10:29.519
<v Speaker 0>we'll see

00:10:29.915 --> 00:10:32.315
<v Speaker 0>that it's allowed to communicate with the order

00:10:32.315 --> 00:10:33.195
<v Speaker 0>service.

00:10:39.755 --> 00:10:41.195
<v Speaker 0>Our network policies

00:10:41.275 --> 00:10:42.315
<v Speaker 0>will now be updated.

00:10:43.010 --> 00:10:45.089
<v Speaker 0>We now have access to orders from Sock

00:10:45.089 --> 00:10:47.810
<v Speaker 0>Shop and still are default to die on

00:10:47.810 --> 00:10:49.010
<v Speaker 0>a user service.

00:10:50.050 --> 00:10:50.770
<v Speaker 0>Meaning,

00:10:51.010 --> 00:10:52.850
<v Speaker 0>we come back to log in for the

00:10:52.850 --> 00:10:53.490
<v Speaker 0>third time.

00:10:57.985 --> 00:10:59.105
<v Speaker 0>No success.

00:11:01.425 --> 00:11:05.185
<v Speaker 0>That's because our browser is now unable to

00:11:05.185 --> 00:11:06.225
<v Speaker 0>communicate

00:11:06.705 --> 00:11:07.425
<v Speaker 0>with

00:11:08.545 --> 00:11:09.585
<v Speaker 0>the user

00:11:09.665 --> 00:11:10.385
<v Speaker 0>service

00:11:11.310 --> 00:11:12.350
<v Speaker 0>To the point

00:11:12.750 --> 00:11:16.589
<v Speaker 0>where we've crashed the Weaveworks sock shop demo.

00:11:19.709 --> 00:11:20.990
<v Speaker 0>Let's come back

00:11:21.870 --> 00:11:23.950
<v Speaker 0>and add another service

00:11:23.950 --> 00:11:25.470
<v Speaker 0>for our front end

00:11:26.225 --> 00:11:27.345
<v Speaker 0>to speak to

00:11:27.745 --> 00:11:29.105
<v Speaker 0>the user service.

00:11:32.545 --> 00:11:34.625
<v Speaker 0>We can add a kubectl apply

00:11:34.785 --> 00:11:35.825
<v Speaker 0>and tense.

00:11:36.625 --> 00:11:37.745
<v Speaker 0>Get net pull

00:11:40.389 --> 00:11:42.870
<v Speaker 0>and try to log in again.

00:11:47.670 --> 00:11:48.310
<v Speaker 0>Success.

00:11:49.829 --> 00:11:52.149
<v Speaker 0>So let's protect one more service.

00:11:53.755 --> 00:11:55.755
<v Speaker 0>We'll copy our protect service

00:11:56.875 --> 00:11:57.835
<v Speaker 0>and paste.

00:11:59.035 --> 00:12:02.075
<v Speaker 0>This time, we're going to protect the catalog

00:12:02.075 --> 00:12:02.955
<v Speaker 0>service.

00:12:05.115 --> 00:12:08.315
<v Speaker 0>Now no client intent specify that they call

00:12:08.315 --> 00:12:09.035
<v Speaker 0>the service.

00:12:10.930 --> 00:12:13.890
<v Speaker 0>Meaning, we will get a new default deny

00:12:13.970 --> 00:12:15.250
<v Speaker 0>network policy

00:12:15.650 --> 00:12:17.410
<v Speaker 0>for the catalog service.

00:12:18.930 --> 00:12:21.810
<v Speaker 0>So let's come back here and refresh

00:12:22.610 --> 00:12:23.410
<v Speaker 0>the sock shop.

00:12:25.145 --> 00:12:26.425
<v Speaker 0>And as you can see,

00:12:26.825 --> 00:12:29.065
<v Speaker 0>most of the services are working,

00:12:29.385 --> 00:12:31.465
<v Speaker 0>including login and logout.

00:12:31.465 --> 00:12:32.185
<v Speaker 0>However,

00:12:32.585 --> 00:12:35.385
<v Speaker 0>there are no products available on the homepage.

00:12:37.065 --> 00:12:40.470
<v Speaker 0>And that's how intent files and protected services

00:12:40.470 --> 00:12:41.990
<v Speaker 0>work with Otterize.

00:12:44.310 --> 00:12:47.430
<v Speaker 0>This two phase approach to defining how your

00:12:47.430 --> 00:12:50.710
<v Speaker 0>services communicate means that you can

00:12:51.855 --> 00:12:53.295
<v Speaker 0>adopt Otterize

00:12:53.375 --> 00:12:55.055
<v Speaker 0>step by step.

00:12:56.015 --> 00:12:58.334
<v Speaker 0>You can add all of your client intents

00:12:58.334 --> 00:13:02.415
<v Speaker 0>without ever breaking any traffic within your cluster.

00:13:03.375 --> 00:13:06.095
<v Speaker 0>As you have comfort that your intents cover

00:13:06.095 --> 00:13:08.970
<v Speaker 0>most of your traffic or all of your

00:13:08.970 --> 00:13:10.170
<v Speaker 0>traffic ideally,

00:13:10.570 --> 00:13:12.650
<v Speaker 0>you can begin to protect your services one

00:13:12.650 --> 00:13:13.370
<v Speaker 0>by one.

00:13:15.850 --> 00:13:18.090
<v Speaker 0>Now there is a better way

00:13:19.290 --> 00:13:20.330
<v Speaker 0>to do this

00:13:21.065 --> 00:13:23.065
<v Speaker 0>using Otterize Cloud.

00:13:23.625 --> 00:13:26.425
<v Speaker 0>Let's take a look. Otterize Cloud is a

00:13:26.425 --> 00:13:29.945
<v Speaker 0>SaaS product with a very generous free tier.

00:13:30.505 --> 00:13:33.225
<v Speaker 0>This should satisfy most of you watching this

00:13:33.225 --> 00:13:33.545
<v Speaker 0>video.

00:13:35.120 --> 00:13:37.120
<v Speaker 0>The benefits of using the cloud

00:13:38.240 --> 00:13:41.440
<v Speaker 0>and the Otterize provide visual understanding

00:13:41.520 --> 00:13:42.960
<v Speaker 0>of your intents

00:13:43.040 --> 00:13:44.640
<v Speaker 0>and the enforcement.

00:13:45.520 --> 00:13:46.400
<v Speaker 0>So let's log in.

00:13:49.575 --> 00:13:51.575
<v Speaker 0>The first thing we need to do is

00:13:51.575 --> 00:13:52.855
<v Speaker 0>connect our cluster.

00:13:54.695 --> 00:13:57.415
<v Speaker 0>We can give this a name like so,

00:13:59.015 --> 00:14:00.935
<v Speaker 0>and we'll call this environment production.

00:14:04.060 --> 00:14:06.300
<v Speaker 0>This gives you the helm commands that you

00:14:06.300 --> 00:14:09.019
<v Speaker 0>need to run to connect to Otterize Cloud.

00:14:09.899 --> 00:14:12.699
<v Speaker 0>I'm saying no to authorize already to be

00:14:12.699 --> 00:14:14.940
<v Speaker 0>installed on my cluster because I did a

00:14:14.940 --> 00:14:16.779
<v Speaker 0>helm delete prior to this step.

00:14:17.745 --> 00:14:19.585
<v Speaker 0>But if you do have it installed, it's

00:14:19.585 --> 00:14:20.225
<v Speaker 0>fine.

00:14:20.545 --> 00:14:23.265
<v Speaker 0>Authorize cloud is just a value add on.

00:14:25.665 --> 00:14:27.745
<v Speaker 0>We also get to decide whether we wish

00:14:27.745 --> 00:14:29.985
<v Speaker 0>to be in enforcement mode or shadow.

00:14:31.780 --> 00:14:34.500
<v Speaker 0>We're going to leave enforcement mode off.

00:14:34.820 --> 00:14:37.140
<v Speaker 0>This means we'll be using the protected service

00:14:37.140 --> 00:14:39.460
<v Speaker 0>custom resource that you've seen a moment ago.

00:14:39.940 --> 00:14:42.100
<v Speaker 0>Of course, if you wish to delete enforcement

00:14:42.100 --> 00:14:42.420
<v Speaker 0>mode,

00:14:43.505 --> 00:14:46.225
<v Speaker 0>the protected services will not be required.

00:14:47.425 --> 00:14:50.065
<v Speaker 0>Let's copy the helm install

00:14:50.065 --> 00:14:50.785
<v Speaker 0>command.

00:14:54.785 --> 00:14:55.345
<v Speaker 0>Like so.

00:15:01.640 --> 00:15:04.360
<v Speaker 0>We can now see that our network mapper,

00:15:04.360 --> 00:15:07.320
<v Speaker 0>the intense operator, and the credentials operator

00:15:07.560 --> 00:15:09.240
<v Speaker 0>will begin to say connected.

00:15:10.200 --> 00:15:12.200
<v Speaker 0>Some may take longer than the rest.

00:15:13.855 --> 00:15:15.855
<v Speaker 0>If we pop over to the CLI,

00:15:18.815 --> 00:15:20.575
<v Speaker 0>we can run get pods.

00:15:21.774 --> 00:15:23.935
<v Speaker 0>When all of these are running, we will

00:15:23.935 --> 00:15:26.495
<v Speaker 0>have a visual topology map of all the

00:15:26.495 --> 00:15:28.255
<v Speaker 0>services running in our cluster.

00:15:29.350 --> 00:15:30.790
<v Speaker 0>Let's come back in a moment.

00:15:32.390 --> 00:15:34.870
<v Speaker 0>So here is the access graph.

00:15:35.190 --> 00:15:38.070
<v Speaker 0>This shows us the services within our cluster

00:15:38.950 --> 00:15:40.710
<v Speaker 0>and the communication patterns

00:15:41.125 --> 00:15:43.525
<v Speaker 0>as well as whether the access would be

00:15:43.525 --> 00:15:45.525
<v Speaker 0>allowed or denied.

00:15:46.485 --> 00:15:48.085
<v Speaker 0>We can see the front end wants to

00:15:48.085 --> 00:15:49.845
<v Speaker 0>speak to orders and user.

00:15:50.085 --> 00:15:52.565
<v Speaker 0>User is protected, and the traffic is allowed.

00:15:55.089 --> 00:15:58.370
<v Speaker 0>Whereas our front end, currently traffic is allowed,

00:15:59.170 --> 00:16:02.130
<v Speaker 0>but that's because the service is unprotected.

00:16:04.529 --> 00:16:07.410
<v Speaker 0>Now this only shows the services

00:16:07.775 --> 00:16:10.095
<v Speaker 0>that have client intents,

00:16:10.575 --> 00:16:13.295
<v Speaker 0>but there is a network mapper feature

00:16:13.935 --> 00:16:15.055
<v Speaker 0>of Otterize.

00:16:15.855 --> 00:16:17.375
<v Speaker 0>So let's go browse

00:16:19.215 --> 00:16:20.335
<v Speaker 0>around the website

00:16:21.700 --> 00:16:23.860
<v Speaker 0>just to give it a little traffic to

00:16:23.860 --> 00:16:24.660
<v Speaker 0>analyze

00:16:25.620 --> 00:16:28.100
<v Speaker 0>and jump back to our access graph.

00:16:28.260 --> 00:16:29.300
<v Speaker 0>And already,

00:16:29.860 --> 00:16:31.460
<v Speaker 0>we can see services

00:16:32.660 --> 00:16:34.260
<v Speaker 0>popping up within our cluster.

00:16:36.015 --> 00:16:39.215
<v Speaker 0>So let's filter on our SOC shop namespace.

00:16:40.575 --> 00:16:42.575
<v Speaker 0>And we can see now that our front

00:16:42.575 --> 00:16:44.175
<v Speaker 0>end speaks to

00:16:45.295 --> 00:16:48.975
<v Speaker 0>cars, user, orders, catalog, session DB.

00:16:52.490 --> 00:16:54.570
<v Speaker 0>Our queue master speaks to rabbit

00:16:54.889 --> 00:16:57.129
<v Speaker 0>and our catalog speaks to the database. The

00:16:57.129 --> 00:16:59.129
<v Speaker 0>orders has its own database. The user has

00:16:59.129 --> 00:17:01.130
<v Speaker 0>a database and the cart has a database.

00:17:02.329 --> 00:17:05.690
<v Speaker 0>We can now see all the traffic

00:17:05.974 --> 00:17:07.815
<v Speaker 0>scanned by Otterize.

00:17:10.775 --> 00:17:12.295
<v Speaker 0>So we can see at the moment our

00:17:12.295 --> 00:17:13.815
<v Speaker 0>front end is not allowed to speak to

00:17:13.815 --> 00:17:15.015
<v Speaker 0>catalog because

00:17:15.575 --> 00:17:18.214
<v Speaker 0>we protected the service without an intent.

00:17:19.109 --> 00:17:21.510
<v Speaker 0>And now our catalog currently can speak to

00:17:21.510 --> 00:17:24.790
<v Speaker 0>its database, however, is because it's an unprotected

00:17:24.790 --> 00:17:25.589
<v Speaker 0>service.

00:17:28.150 --> 00:17:29.190
<v Speaker 0>So let's change that.

00:17:33.225 --> 00:17:35.384
<v Speaker 0>Let's add that our front end

00:17:36.264 --> 00:17:37.065
<v Speaker 0>speaks

00:17:37.625 --> 00:17:38.664
<v Speaker 0>to the catalog

00:17:44.000 --> 00:17:46.639
<v Speaker 0>and also allow our catalog

00:17:52.399 --> 00:17:54.320
<v Speaker 0>speak to the catalog

00:17:54.320 --> 00:17:55.200
<v Speaker 0>DB,

00:17:56.799 --> 00:17:57.360
<v Speaker 0>like so.

00:17:59.355 --> 00:18:01.515
<v Speaker 0>Now the catalog is the only service that

00:18:01.515 --> 00:18:03.275
<v Speaker 0>speaks to the catalog DB,

00:18:03.675 --> 00:18:05.515
<v Speaker 0>so we're gonna protect that too.

00:18:09.275 --> 00:18:10.155
<v Speaker 0>Like so.

00:18:12.555 --> 00:18:12.955
<v Speaker 0>Now,

00:18:16.290 --> 00:18:18.049
<v Speaker 0>we do a cube control apply,

00:18:18.050 --> 00:18:18.690
<v Speaker 0>intense.

00:18:19.970 --> 00:18:21.570
<v Speaker 0>And if we come back to our access

00:18:21.570 --> 00:18:22.289
<v Speaker 0>graph,

00:18:22.450 --> 00:18:24.850
<v Speaker 0>in real time, it's going to reload

00:18:25.010 --> 00:18:26.610
<v Speaker 0>and show us the changes

00:18:27.010 --> 00:18:28.290
<v Speaker 0>through our intents

00:18:28.675 --> 00:18:30.515
<v Speaker 0>and our protected services.

00:18:32.515 --> 00:18:33.794
<v Speaker 0>We can now see

00:18:34.755 --> 00:18:36.915
<v Speaker 0>that our front end speaks to the catalog

00:18:36.915 --> 00:18:39.075
<v Speaker 0>and just protect it, and the catalog speaks

00:18:39.075 --> 00:18:40.515
<v Speaker 0>to the catalog DB,

00:18:40.515 --> 00:18:42.195
<v Speaker 0>and it's also protected.

00:18:42.970 --> 00:18:44.889
<v Speaker 0>The ideal situation.

00:18:46.889 --> 00:18:50.009
<v Speaker 0>But what about the rest of our services?

00:18:53.610 --> 00:18:55.370
<v Speaker 0>So here we are in the command line

00:18:55.370 --> 00:18:55.690
<v Speaker 0>again.

00:18:56.785 --> 00:18:59.025
<v Speaker 0>And you'll be pleased to know that Otterize

00:18:59.265 --> 00:19:00.544
<v Speaker 0>have a CLI.

00:19:01.585 --> 00:19:02.784
<v Speaker 0>The CLI

00:19:02.785 --> 00:19:06.784
<v Speaker 0>allows you to work with the network mapper

00:19:09.585 --> 00:19:11.105
<v Speaker 0>where you can list

00:19:11.990 --> 00:19:13.350
<v Speaker 0>all the services

00:19:13.750 --> 00:19:15.190
<v Speaker 0>and the communication.

00:19:16.950 --> 00:19:18.070
<v Speaker 0>You can even

00:19:18.630 --> 00:19:19.590
<v Speaker 0>visualize

00:19:20.390 --> 00:19:21.350
<v Speaker 0>setting

00:19:22.710 --> 00:19:24.390
<v Speaker 0>an output path

00:19:27.035 --> 00:19:27.995
<v Speaker 0>like so.

00:19:29.915 --> 00:19:31.274
<v Speaker 0>We can now open

00:19:31.595 --> 00:19:33.274
<v Speaker 0>our PNG and

00:19:34.395 --> 00:19:37.835
<v Speaker 0>get a visualization of everything without Otterize Cloud.

00:19:38.710 --> 00:19:40.470
<v Speaker 0>But I think we can all agree

00:19:40.950 --> 00:19:42.390
<v Speaker 0>the cloud's a bit nicer.

00:19:45.190 --> 00:19:46.550
<v Speaker 0>So let's run

00:19:49.030 --> 00:19:50.790
<v Speaker 0>network map export,

00:19:51.975 --> 00:19:54.695
<v Speaker 0>which dumps out all of the YAML that

00:19:54.695 --> 00:19:55.654
<v Speaker 0>you need

00:19:55.975 --> 00:19:57.735
<v Speaker 0>to map your intents

00:20:02.135 --> 00:20:04.295
<v Speaker 0>and overwrite our intents dot YAML.

00:20:05.370 --> 00:20:07.690
<v Speaker 0>We can now apply this directly to our

00:20:07.690 --> 00:20:08.410
<v Speaker 0>cluster,

00:20:11.690 --> 00:20:13.930
<v Speaker 0>and we can ignore the intents that already

00:20:13.930 --> 00:20:14.650
<v Speaker 0>exist.

00:20:15.930 --> 00:20:18.235
<v Speaker 0>Let's come back to our access graph, which

00:20:18.235 --> 00:20:20.234
<v Speaker 0>will reload in real time.

00:20:21.195 --> 00:20:23.114
<v Speaker 0>Now all the warrants disappear,

00:20:23.914 --> 00:20:25.754
<v Speaker 0>and we can protect the services

00:20:26.075 --> 00:20:27.514
<v Speaker 0>that we wish to protect.

00:20:28.635 --> 00:20:30.475
<v Speaker 0>And that is pretty cool.

00:20:32.460 --> 00:20:34.140
<v Speaker 0>So I hope you have enjoyed what you've

00:20:34.140 --> 00:20:34.620
<v Speaker 0>seen.

00:20:35.260 --> 00:20:37.900
<v Speaker 0>Otterize is pretty sweet. It's an open source

00:20:37.900 --> 00:20:40.780
<v Speaker 0>project that allows your developers to write client

00:20:40.780 --> 00:20:43.180
<v Speaker 0>intents next to the code itself.

00:20:44.325 --> 00:20:45.205
<v Speaker 0>Services

00:20:45.205 --> 00:20:48.244
<v Speaker 0>could be protected or enforced by default.

00:20:49.205 --> 00:20:51.365
<v Speaker 0>You can use the network mapper to scan

00:20:51.365 --> 00:20:53.524
<v Speaker 0>your cluster as it is right now and

00:20:53.524 --> 00:20:55.924
<v Speaker 0>export a huge amount of YAML into your

00:20:55.924 --> 00:20:56.485
<v Speaker 0>repository.

00:20:57.830 --> 00:21:00.309
<v Speaker 0>You can visualize it with the CLI

00:21:00.950 --> 00:21:02.950
<v Speaker 0>or who can to authorize cloud

00:21:04.150 --> 00:21:05.909
<v Speaker 0>for that nicer experience.

00:21:07.110 --> 00:21:08.389
<v Speaker 0>So go check it out.

00:21:08.790 --> 00:21:10.710
<v Speaker 0>Until next time, have a great day.
