WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: c78f6817-9fa7-432d-8ab9-05bef773ba58
Created: 2025-04-29T11:55:07.274Z
Duration: 881.44763
Channels: 1

00:00:00.160 --> 00:00:00.880
<v Speaker 0>Hello,

00:00:01.040 --> 00:00:03.600
<v Speaker 0>and welcome back to the Rawkode Academy.

00:00:04.000 --> 00:00:06.880
<v Speaker 0>Today, we're gonna take on a fun challenge.

00:00:07.120 --> 00:00:07.760
<v Speaker 0>Now,

00:00:08.480 --> 00:00:10.879
<v Speaker 0>this may sound quite scary,

00:00:12.000 --> 00:00:14.639
<v Speaker 0>but at some point in your Kubernetes journey,

00:00:16.615 --> 00:00:18.455
<v Speaker 0>someone is gonna ask you

00:00:19.895 --> 00:00:22.615
<v Speaker 0>to expose one of their services to the

00:00:22.615 --> 00:00:24.055
<v Speaker 0>Internet. Okay.

00:00:25.335 --> 00:00:26.855
<v Speaker 0>So it's not that scary.

00:00:27.015 --> 00:00:31.175
<v Speaker 0>However, exposing services to the Internet does come

00:00:30.360 --> 00:00:32.600
<v Speaker 0>with a bunch of questions and

00:00:32.840 --> 00:00:33.560
<v Speaker 0>challenges.

00:00:34.280 --> 00:00:36.360
<v Speaker 0>The first thing you need to work out

00:00:36.360 --> 00:00:38.840
<v Speaker 0>is how are you gonna route traffic to

00:00:38.840 --> 00:00:39.800
<v Speaker 0>your cluster.

00:00:40.920 --> 00:00:43.560
<v Speaker 0>Now this really depends on whether you're running

00:00:43.560 --> 00:00:45.800
<v Speaker 0>on your own data center with bare metal

00:00:45.825 --> 00:00:48.225
<v Speaker 0>or whether you're using a cloud provider.

00:00:49.105 --> 00:00:51.585
<v Speaker 0>With the former, you probably need some sort

00:00:51.585 --> 00:00:54.945
<v Speaker 0>of BGP advertisement that gets traffic from the

00:00:54.945 --> 00:00:55.985
<v Speaker 0>wild Internet

00:00:56.065 --> 00:00:58.225
<v Speaker 0>to one or more of your clusters.

00:01:00.460 --> 00:01:02.780
<v Speaker 0>If you are on a cloud provider, you've

00:01:02.780 --> 00:01:04.459
<v Speaker 0>got another decision to make.

00:01:05.420 --> 00:01:07.100
<v Speaker 0>That is, do we go with one load

00:01:07.100 --> 00:01:07.900
<v Speaker 0>balancer

00:01:08.700 --> 00:01:12.140
<v Speaker 0>or many? One load balancer is cheaper.

00:01:12.380 --> 00:01:14.700
<v Speaker 0>However, you may not have the scale

00:01:14.885 --> 00:01:16.085
<v Speaker 0>or resiliency

00:01:16.085 --> 00:01:17.045
<v Speaker 0>that you need,

00:01:17.365 --> 00:01:19.365
<v Speaker 0>so you may decide to go with many.

00:01:20.405 --> 00:01:22.085
<v Speaker 0>Then you've got the challenge of which type

00:01:22.085 --> 00:01:24.085
<v Speaker 0>of cloud load balancer do you go with.

00:01:24.085 --> 00:01:26.885
<v Speaker 0>A network load balancer, an application load balancer,

00:01:26.885 --> 00:01:28.485
<v Speaker 0>or an elastic load balancer.

00:01:28.725 --> 00:01:31.400
<v Speaker 0>Then, of course, traffic is at our cluster

00:01:31.400 --> 00:01:33.880
<v Speaker 0>to be routed directly to the services.

00:01:34.760 --> 00:01:37.880
<v Speaker 0>Well, you could, but what about authentication?

00:01:38.360 --> 00:01:40.600
<v Speaker 0>Does every service have to build that themselves?

00:01:41.479 --> 00:01:43.320
<v Speaker 0>What about security concerns?

00:01:43.640 --> 00:01:45.159
<v Speaker 0>Rate limiting, filtering,

00:01:46.095 --> 00:01:46.975
<v Speaker 0>OAuth,

00:01:47.055 --> 00:01:47.935
<v Speaker 0>JWTs?

00:01:48.335 --> 00:01:49.615
<v Speaker 0>The list goes on.

00:01:50.255 --> 00:01:52.174
<v Speaker 0>Getting traffic to your cluster is just the

00:01:52.174 --> 00:01:53.454
<v Speaker 0>first part of the battle.

00:01:54.255 --> 00:01:56.814
<v Speaker 0>Making it secure and resilient after that is

00:01:56.814 --> 00:01:59.534
<v Speaker 0>the second part. You need good audit logs.

00:02:00.060 --> 00:02:01.659
<v Speaker 0>You do need authentication.

00:02:01.659 --> 00:02:02.940
<v Speaker 0>You need authorization,

00:02:03.500 --> 00:02:06.060
<v Speaker 0>and you need protections for malicious actors.

00:02:06.700 --> 00:02:09.020
<v Speaker 0>So what if this could all just be

00:02:09.020 --> 00:02:09.820
<v Speaker 0>simpler?

00:02:09.900 --> 00:02:11.900
<v Speaker 0>What if there was a service that could

00:02:11.900 --> 00:02:14.860
<v Speaker 0>handle all of this for me, including the

00:02:14.860 --> 00:02:17.605
<v Speaker 0>trade offs, giving me a simple API

00:02:18.085 --> 00:02:20.165
<v Speaker 0>that allows me just to ship things to

00:02:20.165 --> 00:02:23.125
<v Speaker 0>my cluster and keep my customers happy

00:02:24.165 --> 00:02:25.525
<v Speaker 0>without losing

00:02:26.645 --> 00:02:28.405
<v Speaker 0>resiliency, redundancy,

00:02:28.405 --> 00:02:28.805
<v Speaker 0>scale,

00:02:29.900 --> 00:02:32.300
<v Speaker 0>and hopefully not costing me the world.

00:02:33.340 --> 00:02:34.060
<v Speaker 0>Enter

00:02:34.379 --> 00:02:35.340
<v Speaker 0>ngrok.

00:02:37.900 --> 00:02:40.140
<v Speaker 0>Alright. Let's get our hands on the keyboard

00:02:40.140 --> 00:02:41.340
<v Speaker 0>and take a look.

00:02:42.140 --> 00:02:43.819
<v Speaker 0>Here we have some instructions that have been

00:02:43.819 --> 00:02:44.780
<v Speaker 0>put together

00:02:45.285 --> 00:02:48.245
<v Speaker 0>that allow us to deploy some sample workloads

00:02:48.245 --> 00:02:49.845
<v Speaker 0>and the ngrok

00:02:49.845 --> 00:02:52.885
<v Speaker 0>materials that we need to demonstrate its true

00:02:52.885 --> 00:02:55.205
<v Speaker 0>power within a Kubernetes context.

00:02:56.485 --> 00:02:58.650
<v Speaker 0>Now the first command here is to deploy

00:02:58.650 --> 00:03:01.690
<v Speaker 0>a sample workload to our Kubernetes cluster.

00:03:02.569 --> 00:03:04.090
<v Speaker 0>We can take a look at this

00:03:04.970 --> 00:03:07.450
<v Speaker 0>by popping over to GitHub.

00:03:08.170 --> 00:03:09.690
<v Speaker 0>Now we can see here that we have

00:03:09.690 --> 00:03:10.650
<v Speaker 0>a deployment,

00:03:10.730 --> 00:03:14.935
<v Speaker 0>a service, another deployment, another service, another deployment,

00:03:14.935 --> 00:03:17.894
<v Speaker 0>and finally, another service. Three deployments and three

00:03:17.894 --> 00:03:18.775
<v Speaker 0>services.

00:03:19.495 --> 00:03:21.255
<v Speaker 0>Now that I've reviewed this,

00:03:21.495 --> 00:03:23.334
<v Speaker 0>I'm quite happy to apply it to my

00:03:23.334 --> 00:03:23.735
<v Speaker 0>cluster.

00:03:29.590 --> 00:03:30.710
<v Speaker 0>And there we go.

00:03:31.430 --> 00:03:34.230
<v Speaker 0>All three services and all three deployments deployed.

00:03:34.950 --> 00:03:36.950
<v Speaker 0>We can pop open to the terminal

00:03:37.270 --> 00:03:38.390
<v Speaker 0>and run GetPods.

00:03:39.595 --> 00:03:42.875
<v Speaker 0>Images are pulled and things look good.

00:03:43.834 --> 00:03:46.635
<v Speaker 0>Now we need to deploy the ngrok Kubernetes

00:03:46.635 --> 00:03:47.515
<v Speaker 0>operator.

00:03:47.515 --> 00:03:49.755
<v Speaker 0>But before we do that, we are gonna

00:03:49.755 --> 00:03:53.114
<v Speaker 0>deploy the gateway I classes to this cluster.

00:03:53.930 --> 00:03:55.850
<v Speaker 0>We're not gonna go old hat and deploy

00:03:55.850 --> 00:03:58.810
<v Speaker 0>ingress controllers. Heck no. We're going all in

00:03:58.810 --> 00:04:00.330
<v Speaker 0>on the gateway API.

00:04:01.130 --> 00:04:04.490
<v Speaker 0>So let's throw this onto our cluster.

00:04:08.650 --> 00:04:09.050
<v Speaker 0>Sweet.

00:04:11.265 --> 00:04:13.505
<v Speaker 0>Next up, we need to add the helm

00:04:13.505 --> 00:04:16.385
<v Speaker 0>chart for the ngrok operator.

00:04:16.865 --> 00:04:20.545
<v Speaker 0>This is just available at charts.ngrok.com.

00:04:21.024 --> 00:04:22.465
<v Speaker 0>It really couldn't be simpler.

00:04:23.729 --> 00:04:25.970
<v Speaker 0>After we do our repository update, we can

00:04:25.970 --> 00:04:26.850
<v Speaker 0>then deploy

00:04:27.410 --> 00:04:30.610
<v Speaker 0>a Kubernetes operator with a helm install.

00:04:30.930 --> 00:04:32.849
<v Speaker 0>This just takes a namespace

00:04:32.849 --> 00:04:36.370
<v Speaker 0>and two API keys from the ngrok service.

00:04:37.725 --> 00:04:39.645
<v Speaker 0>Now as I like to leave no stone

00:04:39.645 --> 00:04:40.525
<v Speaker 0>unturned,

00:04:40.525 --> 00:04:42.605
<v Speaker 0>let's pop back open to our browser where

00:04:42.605 --> 00:04:44.365
<v Speaker 0>we have the ngrok dashboard.

00:04:45.325 --> 00:04:47.485
<v Speaker 0>I have nothing configured or set up at

00:04:47.485 --> 00:04:48.205
<v Speaker 0>the moment.

00:04:48.765 --> 00:04:51.645
<v Speaker 0>Now the prerequisites here are you need a

00:04:51.645 --> 00:04:52.045
<v Speaker 0>domain.

00:04:53.210 --> 00:04:55.290
<v Speaker 0>Now you could bring your own or you

00:04:55.290 --> 00:04:57.449
<v Speaker 0>can pop over here and ask ngrok to

00:04:57.449 --> 00:04:58.250
<v Speaker 0>give you one.

00:04:58.810 --> 00:05:02.170
<v Speaker 0>Here, I'll ask for Rawkode.ngrok.dev.

00:05:04.250 --> 00:05:04.729
<v Speaker 0>Sorted.

00:05:06.395 --> 00:05:09.275
<v Speaker 0>Now we need to get those API keys.

00:05:09.435 --> 00:05:12.475
<v Speaker 0>Let's pop over to, you guessed it, API

00:05:12.475 --> 00:05:13.115
<v Speaker 0>keys.

00:05:13.595 --> 00:05:15.035
<v Speaker 0>We click on create

00:05:15.755 --> 00:05:16.875
<v Speaker 0>and we say add.

00:05:18.010 --> 00:05:20.250
<v Speaker 0>This gives us an API

00:05:20.250 --> 00:05:21.130
<v Speaker 0>token,

00:05:21.610 --> 00:05:23.690
<v Speaker 0>which I'm now flashing to the world.

00:05:26.090 --> 00:05:28.010
<v Speaker 0>Let's drop that in here.

00:05:29.210 --> 00:05:32.025
<v Speaker 0>And lastly, we need the auth token, which

00:05:32.025 --> 00:05:34.585
<v Speaker 0>is available near the top by Get Started.

00:05:36.265 --> 00:05:37.865
<v Speaker 0>And I'm gonna click copy,

00:05:38.265 --> 00:05:41.305
<v Speaker 0>but not Flash. So

00:05:41.945 --> 00:05:43.065
<v Speaker 0>let's head back

00:05:43.465 --> 00:05:44.505
<v Speaker 0>to Versus Code.

00:05:47.930 --> 00:05:49.770
<v Speaker 0>From here, I can add a namespace to

00:05:49.770 --> 00:05:51.530
<v Speaker 0>deploy the ngrok operator,

00:05:51.930 --> 00:05:54.730
<v Speaker 0>in which case I'll call mines ngrok.

00:05:55.130 --> 00:05:57.130
<v Speaker 0>We don't need to create this first because

00:05:57.130 --> 00:05:59.770
<v Speaker 0>we are using the helm flag create

00:05:59.770 --> 00:06:00.570
<v Speaker 0>namespace.

00:06:02.305 --> 00:06:04.065
<v Speaker 0>On this, we can hit

00:06:04.544 --> 00:06:05.185
<v Speaker 0>go.

00:06:05.745 --> 00:06:07.504
<v Speaker 0>I'm going to paste in my auth token,

00:06:07.504 --> 00:06:09.025
<v Speaker 0>but I am gonna omit it from the

00:06:09.025 --> 00:06:11.824
<v Speaker 0>video. So let's see some movie magic.

00:06:15.104 --> 00:06:15.745
<v Speaker 0>Voila.

00:06:16.280 --> 00:06:18.760
<v Speaker 0>Just like that, all deployed.

00:06:20.120 --> 00:06:23.480
<v Speaker 0>Let's quickly recap where we are. Firstly,

00:06:23.640 --> 00:06:24.680
<v Speaker 0>let's run

00:06:24.840 --> 00:06:26.440
<v Speaker 0>API resources

00:06:27.080 --> 00:06:28.200
<v Speaker 0>and filter

00:06:28.600 --> 00:06:29.320
<v Speaker 0>for gateway.

00:06:30.885 --> 00:06:34.165
<v Speaker 0>Here we have a standard Kubernetes cluster deployed

00:06:34.165 --> 00:06:35.925
<v Speaker 0>with the gateway API

00:06:36.165 --> 00:06:36.965
<v Speaker 0>resources.

00:06:37.685 --> 00:06:39.365
<v Speaker 0>This is a new way of doing ingress

00:06:39.365 --> 00:06:40.885
<v Speaker 0>and you'll see how it works as we

00:06:40.885 --> 00:06:42.405
<v Speaker 0>progress through this tutorial.

00:06:43.910 --> 00:06:46.310
<v Speaker 0>We can also run get namespaces where we

00:06:46.310 --> 00:06:47.990
<v Speaker 0>have an ngrok namespace.

00:06:49.110 --> 00:06:51.190
<v Speaker 0>Inside this ngrok namespace,

00:06:52.150 --> 00:06:53.590
<v Speaker 0>we have the ngrok

00:06:53.590 --> 00:06:54.310
<v Speaker 0>operator.

00:06:56.505 --> 00:06:57.865
<v Speaker 0>We also deployed

00:06:57.865 --> 00:06:59.465
<v Speaker 0>some sample workloads

00:06:59.465 --> 00:07:01.785
<v Speaker 0>to the default namespace.

00:07:03.785 --> 00:07:05.705
<v Speaker 0>So let's hook up ngrok

00:07:05.705 --> 00:07:08.185
<v Speaker 0>to these services and make them available

00:07:09.229 --> 00:07:12.030
<v Speaker 0>to your friends, your family, your customers, your

00:07:12.030 --> 00:07:12.750
<v Speaker 0>colleagues.

00:07:14.190 --> 00:07:17.550
<v Speaker 0>Okay. So from the terminal, let's run curl

00:07:18.030 --> 00:07:20.590
<v Speaker 0>get request against our endpoint,

00:07:20.590 --> 00:07:23.229
<v Speaker 0>which is Rawkode.ngrok.dev.

00:07:24.315 --> 00:07:26.235
<v Speaker 0>Now from this, we can see that we

00:07:26.235 --> 00:07:27.915
<v Speaker 0>hit the ngrok network.

00:07:28.235 --> 00:07:30.395
<v Speaker 0>We see cdn.ngrok.com

00:07:30.395 --> 00:07:31.995
<v Speaker 0>and a whole bunch of other stuff.

00:07:32.315 --> 00:07:33.995
<v Speaker 0>So let's run this again with a dash

00:07:33.995 --> 00:07:35.595
<v Speaker 0>v so we can see the response

00:07:37.370 --> 00:07:39.850
<v Speaker 0>and type in our domain name again.

00:07:42.810 --> 00:07:45.530
<v Speaker 0>Up here we see 404 not found.

00:07:45.850 --> 00:07:48.729
<v Speaker 0>So let's pop over to the ngrok platform

00:07:49.105 --> 00:07:51.345
<v Speaker 0>and just hit refresh. You'll see that under

00:07:51.345 --> 00:07:52.145
<v Speaker 0>endpoints

00:07:52.145 --> 00:07:54.225
<v Speaker 0>we have our domain name.

00:07:55.185 --> 00:07:57.665
<v Speaker 0>The problem is we haven't given it anywhere

00:07:57.665 --> 00:07:59.905
<v Speaker 0>to route that traffic.

00:08:01.105 --> 00:08:02.545
<v Speaker 0>And as you'll see under edges,

00:08:03.270 --> 00:08:04.630
<v Speaker 0>it's currently blank,

00:08:05.110 --> 00:08:07.910
<v Speaker 0>so let's fill in some of those blanks.

00:08:08.870 --> 00:08:11.270
<v Speaker 0>We head over to Versus Code, here I

00:08:11.270 --> 00:08:13.830
<v Speaker 0>have the missing pieces that we need to

00:08:13.830 --> 00:08:14.789
<v Speaker 0>apply to our cluster.

00:08:15.365 --> 00:08:17.365
<v Speaker 0>Now don't worry, this code will all be

00:08:17.365 --> 00:08:19.125
<v Speaker 0>available. The link will be in the show

00:08:19.125 --> 00:08:21.525
<v Speaker 0>notes when you're ready to try it out.

00:08:22.325 --> 00:08:23.685
<v Speaker 0>The first thing we need to do is

00:08:23.685 --> 00:08:25.205
<v Speaker 0>create a gateway class

00:08:25.765 --> 00:08:28.325
<v Speaker 0>that says s gateway will be powered by

00:08:28.325 --> 00:08:30.565
<v Speaker 0>the ngrok gateway controller,

00:08:30.565 --> 00:08:33.710
<v Speaker 0>which we already deployed with the help char.

00:08:35.230 --> 00:08:37.070
<v Speaker 0>Next, we set up a gateway

00:08:38.190 --> 00:08:42.590
<v Speaker 0>to be configured with our hostname Rawkode.ngrok.dev.

00:08:43.390 --> 00:08:45.230
<v Speaker 0>This gateway then needs to know how to

00:08:45.230 --> 00:08:45.870
<v Speaker 0>route traffic.

00:08:46.545 --> 00:08:48.945
<v Speaker 0>So here we have an HTTP route,

00:08:49.264 --> 00:08:52.065
<v Speaker 0>which then matches based on path and directs

00:08:52.065 --> 00:08:54.225
<v Speaker 0>to each of the three services we deployed

00:08:54.225 --> 00:08:55.745
<v Speaker 0>earlier: build,

00:08:55.825 --> 00:08:57.425
<v Speaker 0>test and deployment.

00:08:59.105 --> 00:09:02.225
<v Speaker 0>Given that, we can then just hit go

00:09:02.319 --> 00:09:04.720
<v Speaker 0>and deploy this to our cluster.

00:09:06.879 --> 00:09:09.279
<v Speaker 0>We'll now see that the three resources were

00:09:09.279 --> 00:09:10.079
<v Speaker 0>created.

00:09:12.160 --> 00:09:14.160
<v Speaker 0>So let's head back to our terminal

00:09:15.055 --> 00:09:16.735
<v Speaker 0>where we can run kubectl

00:09:16.735 --> 00:09:17.535
<v Speaker 0>get

00:09:17.774 --> 00:09:18.815
<v Speaker 0>gateway,

00:09:19.615 --> 00:09:20.735
<v Speaker 0>gateway class,

00:09:21.455 --> 00:09:22.575
<v Speaker 0>and HTTP

00:09:22.575 --> 00:09:23.214
<v Speaker 0>routes.

00:09:24.975 --> 00:09:27.135
<v Speaker 0>We'll see that this is now all provisioning,

00:09:29.580 --> 00:09:31.100
<v Speaker 0>And if we head over

00:09:35.180 --> 00:09:37.980
<v Speaker 0>and refresh our edges, we'll see that we

00:09:37.980 --> 00:09:41.340
<v Speaker 0>now have an edge for our host name.

00:09:41.340 --> 00:09:43.500
<v Speaker 0>Now that is exciting.

00:09:45.625 --> 00:09:47.785
<v Speaker 0>So now I'm curious. What happens if we

00:09:47.785 --> 00:09:48.585
<v Speaker 0>curl

00:09:48.745 --> 00:09:51.945
<v Speaker 0>Rawkode.ngrok.dev?

00:09:52.425 --> 00:09:54.425
<v Speaker 0>Well, we still get a four zero four.

00:09:54.505 --> 00:09:57.065
<v Speaker 0>So let's try that again. However, let's do

00:09:57.065 --> 00:09:58.825
<v Speaker 0>h t t p s Rawkode

00:09:59.410 --> 00:10:01.010
<v Speaker 0>dot ngrok dot dev

00:10:01.330 --> 00:10:02.690
<v Speaker 0>slash builds.

00:10:03.490 --> 00:10:05.730
<v Speaker 0>And now we're getting an empty array.

00:10:07.010 --> 00:10:09.650
<v Speaker 0>Does that mean we're hitting our service? Well,

00:10:09.650 --> 00:10:11.490
<v Speaker 0>let's add v

00:10:11.490 --> 00:10:12.450
<v Speaker 0>for verbose.

00:10:14.214 --> 00:10:17.894
<v Speaker 0>Rawkode.ngrok.devbuilds.

00:10:18.615 --> 00:10:20.134
<v Speaker 0>Now we can see that we're getting an

00:10:20.134 --> 00:10:21.175
<v Speaker 0>HTTP

00:10:21.175 --> 00:10:22.295
<v Speaker 0>200.

00:10:22.935 --> 00:10:24.774
<v Speaker 0>Okay. But that's just one service,

00:10:25.190 --> 00:10:27.269
<v Speaker 0>so let's pop back over to Versus Code

00:10:27.269 --> 00:10:29.350
<v Speaker 0>where I have this very sophisticated

00:10:29.350 --> 00:10:30.070
<v Speaker 0>script

00:10:30.470 --> 00:10:33.029
<v Speaker 0>that will curl each of the endpoints that

00:10:33.029 --> 00:10:35.670
<v Speaker 0>we have the path prefix routing configured for

00:10:35.670 --> 00:10:37.430
<v Speaker 0>and print out the status code.

00:10:38.625 --> 00:10:41.185
<v Speaker 0>Here we see 202200.

00:10:42.625 --> 00:10:45.025
<v Speaker 0>Everything is working great.

00:10:45.665 --> 00:10:48.225
<v Speaker 0>But we're not just here to show you

00:10:48.305 --> 00:10:51.265
<v Speaker 0>that ngrok can make our ingress to our

00:10:51.265 --> 00:10:52.385
<v Speaker 0>cluster simpler.

00:10:52.625 --> 00:10:53.825
<v Speaker 0>Although it already has,

00:10:54.360 --> 00:10:56.839
<v Speaker 0>we haven't configured a cloud load balancer, but

00:10:56.839 --> 00:10:58.360
<v Speaker 0>our cluster is on the cloud.

00:10:59.160 --> 00:11:01.640
<v Speaker 0>So what else can ngrok bring to the

00:11:01.640 --> 00:11:02.200
<v Speaker 0>table?

00:11:03.160 --> 00:11:05.000
<v Speaker 0>Let's take a look at one example,

00:11:05.560 --> 00:11:07.720
<v Speaker 0>rate limiting. So we're gonna apply one more

00:11:07.720 --> 00:11:10.084
<v Speaker 0>resource to our cluster. This time it is

00:11:10.084 --> 00:11:12.325
<v Speaker 0>an ngrok traffic policy.

00:11:13.365 --> 00:11:15.685
<v Speaker 0>I'm gonna call it rate limiting because we're

00:11:15.685 --> 00:11:17.845
<v Speaker 0>going to enforce some rate limiting.

00:11:18.485 --> 00:11:20.404
<v Speaker 0>And what we're saying here is just that

00:11:20.404 --> 00:11:22.485
<v Speaker 0>we have an inbound policy with a name,

00:11:23.160 --> 00:11:24.680
<v Speaker 0>with an expression,

00:11:24.920 --> 00:11:27.160
<v Speaker 0>where we're just looking for the request method

00:11:27.160 --> 00:11:30.040
<v Speaker 0>to be a POST or a POST. Essentially,

00:11:30.040 --> 00:11:32.519
<v Speaker 0>we're targeting the rights to our system and

00:11:32.519 --> 00:11:34.519
<v Speaker 0>we probably don't want anyone to apply too

00:11:34.519 --> 00:11:37.480
<v Speaker 0>many rights too quickly and overload our database.

00:11:38.435 --> 00:11:39.875
<v Speaker 0>Slightly contrived,

00:11:39.875 --> 00:11:41.475
<v Speaker 0>but it proves a point.

00:11:43.075 --> 00:11:44.675
<v Speaker 0>We then apply an action

00:11:45.075 --> 00:11:45.955
<v Speaker 0>which is

00:11:46.915 --> 00:11:48.115
<v Speaker 0>if we receive

00:11:49.075 --> 00:11:51.470
<v Speaker 0>more than 10 requests over a slide in

00:11:51.470 --> 00:11:54.830
<v Speaker 0>sixty second window from a single IP address

00:11:55.149 --> 00:11:57.390
<v Speaker 0>we want to start rejecting those. This is

00:11:57.390 --> 00:12:00.589
<v Speaker 0>identifying a potential malicious actor writing too much

00:12:00.589 --> 00:12:01.550
<v Speaker 0>to our system,

00:12:01.870 --> 00:12:04.510
<v Speaker 0>potentially trying to perform some sort of denial

00:12:04.510 --> 00:12:05.470
<v Speaker 0>of service attack.

00:12:06.775 --> 00:12:08.615
<v Speaker 0>I then have a curl command down here

00:12:08.615 --> 00:12:13.095
<v Speaker 0>which will execute 38 requests almost instantaneously

00:12:13.095 --> 00:12:14.935
<v Speaker 0>and we'll see how those fare.

00:12:16.535 --> 00:12:18.295
<v Speaker 0>But there's one thing we need to do

00:12:18.295 --> 00:12:19.975
<v Speaker 0>first. There's two things we need to do.

00:12:21.050 --> 00:12:23.770
<v Speaker 0>We need to apply this to our cluster.

00:12:24.330 --> 00:12:24.730
<v Speaker 0>We

00:12:25.610 --> 00:12:27.850
<v Speaker 0>then need to attach that to one of

00:12:27.850 --> 00:12:30.089
<v Speaker 0>our roots. This rate limit does not apply

00:12:30.089 --> 00:12:32.570
<v Speaker 0>to every single service. We need to add

00:12:32.570 --> 00:12:35.770
<v Speaker 0>the filter to our HTTP root object.

00:12:37.155 --> 00:12:39.475
<v Speaker 0>Before this I'm going to do a kubectl

00:12:39.475 --> 00:12:40.675
<v Speaker 0>edit HTTP

00:12:40.675 --> 00:12:41.395
<v Speaker 0>roots.

00:12:41.795 --> 00:12:43.555
<v Speaker 0>This will pop open all of the roots

00:12:43.555 --> 00:12:45.715
<v Speaker 0>in our cluster where I can pop down

00:12:45.715 --> 00:12:48.835
<v Speaker 0>to the matches on builds. Why?

00:12:49.569 --> 00:12:51.569
<v Speaker 0>Because the curl request that I'm going to

00:12:51.569 --> 00:12:54.690
<v Speaker 0>execute is going to try and hit builds

00:12:54.690 --> 00:12:55.730
<v Speaker 0>trigger.

00:12:56.690 --> 00:12:58.290
<v Speaker 0>Now we just need to make sure this

00:12:58.290 --> 00:12:59.490
<v Speaker 0>lines up correctly

00:13:00.209 --> 00:13:02.209
<v Speaker 0>which should be this rule here

00:13:02.705 --> 00:13:04.785
<v Speaker 0>back end matches filters.

00:13:05.905 --> 00:13:06.625
<v Speaker 0>Perfect.

00:13:07.105 --> 00:13:09.025
<v Speaker 0>We can save this and close

00:13:09.265 --> 00:13:11.505
<v Speaker 0>where it has now been edited and applied

00:13:11.505 --> 00:13:12.945
<v Speaker 0>to our cluster.

00:13:13.745 --> 00:13:15.665
<v Speaker 0>If we head back over to Versus Code,

00:13:16.310 --> 00:13:18.630
<v Speaker 0>we now see our simple script to execute

00:13:18.630 --> 00:13:20.630
<v Speaker 0>30 cURL requests.

00:13:21.029 --> 00:13:22.470
<v Speaker 0>So let's

00:13:22.709 --> 00:13:23.510
<v Speaker 0>run our script.

00:13:28.944 --> 00:13:30.785
<v Speaker 0>And because of the sliding window we did

00:13:30.785 --> 00:13:32.865
<v Speaker 0>manage to sneak in more than 10 but

00:13:32.865 --> 00:13:35.425
<v Speaker 0>not much before the four two nines did

00:13:35.425 --> 00:13:36.945
<v Speaker 0>start to return.

00:13:37.745 --> 00:13:39.264
<v Speaker 0>Let's just run that again.

00:13:40.865 --> 00:13:42.384
<v Speaker 0>Four two nine four two nine.

00:13:44.100 --> 00:13:46.260
<v Speaker 0>So the rate limiting is kicking in and

00:13:46.260 --> 00:13:46.980
<v Speaker 0>working.

00:13:48.020 --> 00:13:48.820
<v Speaker 0>Awesome.

00:13:49.460 --> 00:13:51.460
<v Speaker 0>Now I think it's also nice to point

00:13:51.460 --> 00:13:54.420
<v Speaker 0>out that while we're using Kubernetes approach here,

00:13:54.420 --> 00:13:56.260
<v Speaker 0>which means we can do this as infrastructure

00:13:56.260 --> 00:13:58.500
<v Speaker 0>as code or at least, you know, yaml.

00:13:59.365 --> 00:14:01.525
<v Speaker 0>If we head over to the ngrok where

00:14:01.525 --> 00:14:03.525
<v Speaker 0>we were looking at the edges earlier,

00:14:04.165 --> 00:14:06.245
<v Speaker 0>we can change to our build

00:14:06.805 --> 00:14:09.045
<v Speaker 0>where we click on traffic policy. We can

00:14:09.045 --> 00:14:11.205
<v Speaker 0>actually visualize the policy here.

00:14:12.130 --> 00:14:14.370
<v Speaker 0>Now you'll see there's a lot here. We

00:14:14.370 --> 00:14:17.649
<v Speaker 0>can add circuit breakers, compression, IP restrictions, OAuth,

00:14:17.649 --> 00:14:18.610
<v Speaker 0>OIDC,

00:14:18.610 --> 00:14:20.930
<v Speaker 0>and so much more. The ngrok platform and

00:14:20.930 --> 00:14:22.769
<v Speaker 0>what I'm showing you today is just a

00:14:22.769 --> 00:14:24.529
<v Speaker 0>fraction of what it is capable of.

00:14:25.495 --> 00:14:26.774
<v Speaker 0>So go forth,

00:14:27.014 --> 00:14:29.815
<v Speaker 0>have fun, and simplify your networking life with

00:14:29.815 --> 00:14:32.202
<v Speaker 0>Kubernetes by adopting ngrok,

00:14:32.202 --> 00:14:34.522
<v Speaker 0>installing the operator, and taking advantage of the

00:14:34.522 --> 00:14:36.442
<v Speaker 0>bleeding edge gateway API

00:14:36.442 --> 00:14:39.162
<v Speaker 0>and build your API gateways today.

00:14:40.362 --> 00:14:40.922
<v Speaker 0>Have fun.
