WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 81529808-f099-4f55-aec4-ce4c04671d5f
Created: 2025-04-29T19:26:19.121Z
Duration: 4359.4136
Channels: 1

00:00:55.850 --> 00:00:58.730
<v Speaker 0>Hello, and welcome to today's episode of Rawkode

00:00:58.730 --> 00:01:00.809
<v Speaker 0>live. Today, we're gonna be taking a look

00:01:00.809 --> 00:01:02.090
<v Speaker 0>at cdk8s,

00:01:02.090 --> 00:01:05.564
<v Speaker 0>a component library, SDK, and extraction for working

00:01:05.564 --> 00:01:08.924
<v Speaker 0>and defining and templating Kubernetes resources.

00:01:09.325 --> 00:01:11.405
<v Speaker 0>Before we end, there's just a little bit

00:01:11.405 --> 00:01:13.165
<v Speaker 0>of housekeeping that I'd like to cover.

00:01:13.805 --> 00:01:17.085
<v Speaker 0>First, please remember to subscribe to the YouTube

00:01:17.085 --> 00:01:18.700
<v Speaker 0>channel and click that bell. That means you're

00:01:18.700 --> 00:01:21.100
<v Speaker 0>gonna get notifications for further episodes as we

00:01:21.100 --> 00:01:23.100
<v Speaker 0>explore the cloud native landscape together.

00:01:23.420 --> 00:01:25.900
<v Speaker 0>Also, we have an active Discord channel and

00:01:25.900 --> 00:01:27.900
<v Speaker 0>server. Please come and join us. If you

00:01:27.900 --> 00:01:30.220
<v Speaker 0>wanna communicate after this because you're not watching

00:01:30.220 --> 00:01:32.140
<v Speaker 0>live, you have questions, or you wanna suggest

00:01:32.140 --> 00:01:34.795
<v Speaker 0>new technologies to cover on a show, Discord

00:01:34.795 --> 00:01:36.395
<v Speaker 0>is the best place to do that.

00:01:37.354 --> 00:01:39.674
<v Speaker 0>And also, I'd love to thank my employer.

00:01:39.674 --> 00:01:41.755
<v Speaker 0>They allow me to spend a good portion

00:01:41.755 --> 00:01:44.475
<v Speaker 0>of my time working on these episodes, producing

00:01:44.475 --> 00:01:46.475
<v Speaker 0>content for us to continue learning. The cloud

00:01:46.475 --> 00:01:48.395
<v Speaker 0>native landscape is vast

00:01:48.820 --> 00:01:50.420
<v Speaker 0>and we all need all the help we

00:01:50.420 --> 00:01:51.780
<v Speaker 0>can get to make sure we understand that

00:01:51.780 --> 00:01:53.540
<v Speaker 0>and leverage it as much as possible. If

00:01:53.540 --> 00:01:55.460
<v Speaker 0>you wanna check out Equinix Medal, there is

00:01:55.460 --> 00:01:57.060
<v Speaker 0>a code of Rawkode Live. This will get

00:01:57.060 --> 00:01:59.780
<v Speaker 0>you $50 in credit. That $50 will get

00:01:59.780 --> 00:02:01.354
<v Speaker 0>you around a hundred hours of compute on

00:02:01.354 --> 00:02:03.595
<v Speaker 0>a modest instance. Have fun with it. Let

00:02:03.595 --> 00:02:04.795
<v Speaker 0>me know how you get on.

00:02:05.195 --> 00:02:05.915
<v Speaker 0>Okay.

00:02:06.314 --> 00:02:08.715
<v Speaker 0>That's a bit done. Now cdk8s,

00:02:08.715 --> 00:02:10.875
<v Speaker 0>I do not know anything about cdk8s. I

00:02:10.875 --> 00:02:12.715
<v Speaker 0>haven't used it before, so of course, I'm

00:02:12.715 --> 00:02:15.194
<v Speaker 0>not gonna go on this journey alone. Today,

00:02:15.194 --> 00:02:16.315
<v Speaker 0>I am joined

00:02:17.280 --> 00:02:20.480
<v Speaker 0>by Elad Aben Israel, the maintainer and I

00:02:20.480 --> 00:02:22.160
<v Speaker 0>think founder of cdk8s.

00:02:22.160 --> 00:02:23.920
<v Speaker 0>Hello there, Elad. How are you?

00:02:24.319 --> 00:02:27.040
<v Speaker 1>Hey. Nice to be here. Thanks for having

00:02:27.040 --> 00:02:29.200
<v Speaker 1>me. No. No. It's all my pleasure. Thank

00:02:29.200 --> 00:02:31.135
<v Speaker 0>you for joining me today. We're really looking

00:02:31.135 --> 00:02:33.695
<v Speaker 0>forward to learn more about cdk8s and yourself.

00:02:33.695 --> 00:02:36.175
<v Speaker 0>So why don't we start there? Please give

00:02:36.175 --> 00:02:37.775
<v Speaker 0>us a little bit of an introduction into

00:02:37.775 --> 00:02:38.575
<v Speaker 0>who you are.

00:02:40.335 --> 00:02:40.975
<v Speaker 1>Okay.

00:02:41.695 --> 00:02:43.375
<v Speaker 1>So I I'm Elad.

00:02:45.140 --> 00:02:46.420
<v Speaker 1>I'm a

00:02:47.140 --> 00:02:48.900
<v Speaker 1>software engineer at Amazon

00:02:49.140 --> 00:02:50.100
<v Speaker 1>at AWS.

00:02:50.100 --> 00:02:53.300
<v Speaker 1>I've been there for about six years already.

00:02:54.020 --> 00:02:56.740
<v Speaker 1>And in the last three plus years, I've

00:02:56.740 --> 00:02:58.980
<v Speaker 1>been working on the on the CDK, the

00:02:58.980 --> 00:03:00.020
<v Speaker 1>cloud development kit.

00:03:01.415 --> 00:03:03.895
<v Speaker 1>It's a project that, originated from,

00:03:04.775 --> 00:03:06.935
<v Speaker 1>from from some work that we did, when

00:03:06.935 --> 00:03:08.935
<v Speaker 1>I worked with Amazon search

00:03:09.655 --> 00:03:11.895
<v Speaker 1>and basically kind of trying to just, you

00:03:11.895 --> 00:03:14.695
<v Speaker 1>know, solve real world problems of of being

00:03:14.695 --> 00:03:17.690
<v Speaker 1>able to define complex systems through software.

00:03:19.209 --> 00:03:20.890
<v Speaker 1>In a sense, it's kinda like the evolution

00:03:20.890 --> 00:03:22.890
<v Speaker 1>of infrastructure as code towards,

00:03:23.049 --> 00:03:24.330
<v Speaker 1>the software space.

00:03:24.810 --> 00:03:25.850
<v Speaker 1>And the first

00:03:26.090 --> 00:03:28.569
<v Speaker 1>three years almost of the project, we've focused

00:03:28.569 --> 00:03:28.810
<v Speaker 1>on

00:03:29.655 --> 00:03:32.375
<v Speaker 1>a product called AWS CDK, which is in

00:03:32.375 --> 00:03:33.335
<v Speaker 1>c which is,

00:03:35.095 --> 00:03:36.375
<v Speaker 1>which is a software

00:03:36.375 --> 00:03:39.175
<v Speaker 1>as a, sorry, infrastructure as a software,

00:03:40.215 --> 00:03:43.575
<v Speaker 1>tool for defining applications on AWS and, you

00:03:43.440 --> 00:03:45.520
<v Speaker 1>know, using AWS resources.

00:03:46.000 --> 00:03:47.520
<v Speaker 1>And at some point,

00:03:48.000 --> 00:03:50.400
<v Speaker 1>we realized that the approach is very applicable

00:03:50.400 --> 00:03:51.760
<v Speaker 1>to other domains,

00:03:52.080 --> 00:03:54.480
<v Speaker 1>and that's how CDK for Kubernetes,

00:03:56.240 --> 00:03:58.640
<v Speaker 1>was created. We we were, like, looking for

00:03:58.640 --> 00:04:00.400
<v Speaker 1>for

00:03:59.894 --> 00:04:02.454
<v Speaker 1>areas where the same approach can can apply,

00:04:02.454 --> 00:04:03.495
<v Speaker 1>and I can talk about it. And we'll

00:04:03.495 --> 00:04:04.695
<v Speaker 1>talk about it a little later.

00:04:05.254 --> 00:04:07.174
<v Speaker 1>But, basically, I've been doing CDK for the

00:04:07.174 --> 00:04:08.855
<v Speaker 1>past four years. It's been an

00:04:09.254 --> 00:04:12.215
<v Speaker 1>amazing pleasure. We have a really awesome team,

00:04:12.614 --> 00:04:16.000
<v Speaker 1>distributed across the world of maintainers of of

00:04:16.000 --> 00:04:18.320
<v Speaker 1>AWS CDK and CDK for Kubernetes and the

00:04:18.320 --> 00:04:19.600
<v Speaker 1>CDK ecosystem.

00:04:20.160 --> 00:04:23.280
<v Speaker 1>And, the most fulfilling part of my job

00:04:23.280 --> 00:04:25.440
<v Speaker 1>is that I've seen this community

00:04:25.840 --> 00:04:28.240
<v Speaker 1>kind of evolve from nothing. You know? Like,

00:04:28.240 --> 00:04:30.915
<v Speaker 1>we've just basically put this tool out there.

00:04:31.555 --> 00:04:34.275
<v Speaker 1>We didn't even spend too much energy or

00:04:34.275 --> 00:04:37.555
<v Speaker 1>or re or investment on, like, marketing or

00:04:37.555 --> 00:04:39.795
<v Speaker 1>trying to, like, push this too hard. It

00:04:39.795 --> 00:04:40.995
<v Speaker 1>was very, very organic.

00:04:41.960 --> 00:04:43.800
<v Speaker 1>And and I feel like it's

00:04:44.280 --> 00:04:46.680
<v Speaker 1>fulfilling because I feel like this organic growth

00:04:46.680 --> 00:04:49.240
<v Speaker 1>is is based on value. It's based on

00:04:49.240 --> 00:04:52.760
<v Speaker 1>actually solving problems for people, and, that's been

00:04:52.760 --> 00:04:55.685
<v Speaker 1>that's been incredible to see in the community

00:04:55.685 --> 00:04:57.045
<v Speaker 1>around the CDK,

00:04:57.125 --> 00:04:59.845
<v Speaker 1>AWS CDK, and CDK for Kubernetes, and there's

00:04:59.845 --> 00:05:02.645
<v Speaker 1>a CDK for Terraform now. And and so

00:05:02.645 --> 00:05:05.365
<v Speaker 1>this this CDK kind of ecosystem

00:05:05.365 --> 00:05:08.005
<v Speaker 1>is starting to evolve. It's very early. I

00:05:08.005 --> 00:05:08.965
<v Speaker 1>feel like we have

00:05:09.860 --> 00:05:11.700
<v Speaker 1>so much to do and so many things

00:05:11.700 --> 00:05:13.620
<v Speaker 1>to to still to, like

00:05:14.820 --> 00:05:16.900
<v Speaker 1>can still happen there, so it's very nice

00:05:16.900 --> 00:05:18.980
<v Speaker 1>and fun. But I've always been a developer

00:05:18.980 --> 00:05:21.380
<v Speaker 1>tools person. I've always the one that's

00:05:21.855 --> 00:05:24.095
<v Speaker 1>that's like writing these tools and shoving it

00:05:24.095 --> 00:05:26.495
<v Speaker 1>in peep my friends', you know, my friends'

00:05:26.495 --> 00:05:28.735
<v Speaker 1>face to, like, use. And finally, I'm doing

00:05:28.735 --> 00:05:31.135
<v Speaker 1>it. You know? I'm I'm I'm doing it

00:05:31.135 --> 00:05:32.975
<v Speaker 1>as a as a as my day job.

00:05:32.975 --> 00:05:34.655
<v Speaker 1>This that's been incredibly

00:05:34.655 --> 00:05:35.055
<v Speaker 1>fulfilling.

00:05:36.160 --> 00:05:37.840
<v Speaker 0>Yeah. And I think there's a couple of

00:05:37.840 --> 00:05:39.520
<v Speaker 0>things we can definitely touch on there for

00:05:39.520 --> 00:05:42.080
<v Speaker 0>sure. I I definitely consider myself a developer

00:05:42.080 --> 00:05:43.840
<v Speaker 0>tools person as well. I always find it

00:05:43.840 --> 00:05:46.240
<v Speaker 0>much more satisfying, right, in tools to automate

00:05:46.240 --> 00:05:48.800
<v Speaker 0>and help my developer colleagues rather than probably

00:05:48.800 --> 00:05:50.935
<v Speaker 0>work on the products themselves. It feels like,

00:05:51.015 --> 00:05:53.095
<v Speaker 0>you know, you've done exactly that with cdk

00:05:53.095 --> 00:05:54.935
<v Speaker 0>and cdk8s and all of these other kind

00:05:54.935 --> 00:05:57.175
<v Speaker 0>of variations of that as well. Yeah. There's

00:05:57.175 --> 00:06:00.375
<v Speaker 0>something really fulfilling about like helping people do

00:06:00.375 --> 00:06:02.215
<v Speaker 0>their job better and faster.

00:06:02.775 --> 00:06:04.055
<v Speaker 0>And Yeah. CDK

00:06:05.070 --> 00:06:06.910
<v Speaker 0>just in in general, I think is one

00:06:06.910 --> 00:06:08.990
<v Speaker 0>of those really awesome things. Like, I think

00:06:09.230 --> 00:06:11.870
<v Speaker 0>we've all been through the last, what, ten

00:06:11.870 --> 00:06:13.950
<v Speaker 0>years of infrastructure as code and the different

00:06:13.950 --> 00:06:17.230
<v Speaker 0>variations of it going from obscure DSL to

00:06:17.230 --> 00:06:18.110
<v Speaker 0>obscure DSL,

00:06:18.375 --> 00:06:21.975
<v Speaker 0>being constrained and confined by whatever the original

00:06:21.975 --> 00:06:24.375
<v Speaker 0>creators of those DSLs thought we needed to

00:06:24.375 --> 00:06:24.855
<v Speaker 0>do.

00:06:25.335 --> 00:06:25.895
<v Speaker 0>And,

00:06:26.455 --> 00:06:28.615
<v Speaker 0>you know, this really trivial and simple idea

00:06:28.615 --> 00:06:30.455
<v Speaker 0>of, well, why don't we just use our

00:06:30.455 --> 00:06:32.535
<v Speaker 0>favorite programming languages in order to be able

00:06:32.535 --> 00:06:35.220
<v Speaker 0>to build our own abstractions?

00:06:35.860 --> 00:06:36.500
<v Speaker 0>Why

00:06:36.819 --> 00:06:38.659
<v Speaker 0>did we not do this sooner? Like, I

00:06:38.659 --> 00:06:41.139
<v Speaker 0>just you know, in hindsight, it seems like

00:06:41.379 --> 00:06:42.740
<v Speaker 1>It seems yeah.

00:06:43.139 --> 00:06:44.819
<v Speaker 1>I think I think that, you know, I

00:06:44.819 --> 00:06:47.780
<v Speaker 1>can totally understand how that happened, and it's

00:06:47.780 --> 00:06:50.155
<v Speaker 1>happening in many fields as well. I think

00:06:50.155 --> 00:06:51.915
<v Speaker 1>the infrastructure space,

00:06:53.035 --> 00:06:54.395
<v Speaker 1>was originally

00:06:54.715 --> 00:06:56.795
<v Speaker 1>not a developer

00:06:57.115 --> 00:06:59.595
<v Speaker 1>led space. Right? Like, it was led by

00:06:59.914 --> 00:07:01.115
<v Speaker 1>people who were,

00:07:01.675 --> 00:07:05.319
<v Speaker 1>managing data centers. Right? Like, in infrastructure in

00:07:05.319 --> 00:07:07.320
<v Speaker 1>the past was basically a bunch of machines.

00:07:07.720 --> 00:07:10.040
<v Speaker 1>And so, you know, your data center

00:07:10.120 --> 00:07:13.000
<v Speaker 1>engineers would provision those machines and maintain them

00:07:13.000 --> 00:07:14.840
<v Speaker 1>and make sure they're, you know, up and

00:07:14.840 --> 00:07:16.805
<v Speaker 1>running, And then developers would come in and

00:07:16.805 --> 00:07:18.965
<v Speaker 1>just, like, shove their bits into those machines.

00:07:18.965 --> 00:07:21.845
<v Speaker 1>And so that separation was very, very clean,

00:07:21.845 --> 00:07:24.245
<v Speaker 1>and it was very easy to to manage.

00:07:25.205 --> 00:07:27.525
<v Speaker 1>And and so the tools around infrastructure as

00:07:27.525 --> 00:07:29.365
<v Speaker 1>code kind of came from

00:07:29.710 --> 00:07:31.870
<v Speaker 1>as an evolution of that. Right? In a

00:07:31.870 --> 00:07:33.070
<v Speaker 1>sense, their evolution

00:07:33.229 --> 00:07:35.710
<v Speaker 1>to to solve problems for for ops

00:07:35.870 --> 00:07:36.830
<v Speaker 1>engineers,

00:07:37.150 --> 00:07:38.990
<v Speaker 1>which are not or which which in some

00:07:38.990 --> 00:07:41.229
<v Speaker 1>cases are not developers. In many cases, they

00:07:41.229 --> 00:07:42.830
<v Speaker 1>are, but in some cases, they are not

00:07:42.830 --> 00:07:45.074
<v Speaker 1>developers. And the complexity that they needed to

00:07:45.074 --> 00:07:48.035
<v Speaker 1>manage is is is was very small at

00:07:48.035 --> 00:07:49.794
<v Speaker 1>the in the first place. Right? It's like,

00:07:49.794 --> 00:07:52.754
<v Speaker 1>okay. Let's define how my fleet looks like

00:07:52.754 --> 00:07:55.155
<v Speaker 1>or maybe the fleet in the database. And

00:07:55.395 --> 00:07:57.555
<v Speaker 1>and and I think what happened is that

00:07:57.210 --> 00:07:59.770
<v Speaker 1>and AWS is definitely, like, leading in this

00:07:59.770 --> 00:08:01.930
<v Speaker 1>space in a way, is, like, there is

00:08:01.930 --> 00:08:05.290
<v Speaker 1>a proliferation of managed services and managed resources,

00:08:06.250 --> 00:08:08.810
<v Speaker 1>that are available to develop to, you know,

00:08:08.810 --> 00:08:09.289
<v Speaker 1>to

00:08:09.715 --> 00:08:10.355
<v Speaker 1>app

00:08:10.595 --> 00:08:11.475
<v Speaker 1>creators.

00:08:12.035 --> 00:08:15.155
<v Speaker 1>And the there's a there's a shift between

00:08:15.235 --> 00:08:16.835
<v Speaker 1>from ops people

00:08:17.315 --> 00:08:20.275
<v Speaker 1>to developers to manage those resources because the

00:08:20.275 --> 00:08:23.560
<v Speaker 1>bound the line that kind of defines what

00:08:23.560 --> 00:08:25.479
<v Speaker 1>is an application and what is the infrastructure

00:08:25.479 --> 00:08:28.280
<v Speaker 1>is really becoming very blurry. Right? Like, when

00:08:28.280 --> 00:08:30.760
<v Speaker 1>you're when you're building a serverless application

00:08:31.000 --> 00:08:33.799
<v Speaker 1>and you're using Lambda functions and, you know,

00:08:33.799 --> 00:08:36.605
<v Speaker 1>day Dynamo tables, is the definition of your

00:08:36.605 --> 00:08:38.765
<v Speaker 1>Lambda function and the Dynamo table, is this

00:08:38.765 --> 00:08:40.125
<v Speaker 1>part of the application or part of the

00:08:40.125 --> 00:08:40.925
<v Speaker 1>infrastructure?

00:08:41.165 --> 00:08:43.645
<v Speaker 1>It's not that clear. Right? And so I

00:08:43.645 --> 00:08:45.485
<v Speaker 1>think that's what happened. Right? Like, can that

00:08:45.565 --> 00:08:47.805
<v Speaker 1>it's literally what happened to me. Right? Like,

00:08:47.805 --> 00:08:50.010
<v Speaker 1>when I needed to build

00:08:50.010 --> 00:08:52.250
<v Speaker 1>a big complex serverless application,

00:08:53.130 --> 00:08:55.370
<v Speaker 1>when I worked at Amazon Search, I was

00:08:55.370 --> 00:08:58.330
<v Speaker 1>like, wait. Wait. Wait. I'm not gonna rewrite

00:08:58.330 --> 00:08:59.610
<v Speaker 1>this huge

00:08:59.930 --> 00:09:03.370
<v Speaker 1>JSON file and deploy that to, like, multiple

00:09:03.370 --> 00:09:06.574
<v Speaker 1>regions and accounts and have, like, parameters tweak

00:09:06.574 --> 00:09:08.894
<v Speaker 1>things out for each one. Was like, I

00:09:08.894 --> 00:09:10.415
<v Speaker 1>have all those like you said. Right? Like,

00:09:10.415 --> 00:09:12.975
<v Speaker 1>I have those incredible tools and that I'm

00:09:12.975 --> 00:09:15.134
<v Speaker 1>using every day as a developer. I wanna

00:09:15.134 --> 00:09:16.654
<v Speaker 1>be able to just use them to define

00:09:16.654 --> 00:09:19.480
<v Speaker 1>my entire application, not just this little Lambda

00:09:19.480 --> 00:09:21.160
<v Speaker 1>handler. Right? Like, my so

00:09:22.839 --> 00:09:25.160
<v Speaker 1>that's how I feel this evolution,

00:09:26.120 --> 00:09:29.000
<v Speaker 1>is happening, and I'm I'm pretty excited that

00:09:29.959 --> 00:09:32.120
<v Speaker 1>that we're if they're making that available to

00:09:32.120 --> 00:09:34.975
<v Speaker 1>developers in their, like, native tools and familiar

00:09:34.975 --> 00:09:35.855
<v Speaker 1>spaces.

00:09:37.215 --> 00:09:39.615
<v Speaker 0>Yeah. Definitely. I think, you know, you must

00:09:39.615 --> 00:09:41.375
<v Speaker 0>be now getting to a position where you're

00:09:41.375 --> 00:09:43.375
<v Speaker 0>seeing, I guess, teams within Amazon and even

00:09:43.375 --> 00:09:46.015
<v Speaker 0>externally are using CDK to spin up their

00:09:46.015 --> 00:09:48.000
<v Speaker 0>own EKS clusters and provision or an s

00:09:48.000 --> 00:09:49.920
<v Speaker 0>three buckets and then using cdk8s to deploy

00:09:49.920 --> 00:09:51.760
<v Speaker 0>their applications to those clusters.

00:09:52.160 --> 00:09:54.320
<v Speaker 0>All within the same tooling, the developers are

00:09:54.320 --> 00:09:56.959
<v Speaker 0>really taking control of probably the entire stack

00:09:56.959 --> 00:09:57.520
<v Speaker 0>and

00:09:58.000 --> 00:10:00.160
<v Speaker 0>a very natural way to work with their

00:10:00.160 --> 00:10:02.385
<v Speaker 0>own tooling. I think one of the understated

00:10:02.385 --> 00:10:04.305
<v Speaker 0>things as well about cdk8s

00:10:04.305 --> 00:10:06.145
<v Speaker 0>and other tools like it is that because

00:10:06.145 --> 00:10:08.145
<v Speaker 0>you get to leverage, if you choose TypeScript,

00:10:08.145 --> 00:10:11.585
<v Speaker 0>you have this strongly typed definition of what

00:10:11.585 --> 00:10:13.185
<v Speaker 0>an EKS cluster should look like or what

00:10:13.185 --> 00:10:15.185
<v Speaker 0>your deployment should look like in Kubernetes. And

00:10:15.185 --> 00:10:16.065
<v Speaker 0>even just that

00:10:16.560 --> 00:10:19.280
<v Speaker 0>moving away from, you know, everyone's favorite programming

00:10:19.280 --> 00:10:21.200
<v Speaker 0>language, YAML, can give you a lot of

00:10:21.200 --> 00:10:23.600
<v Speaker 0>value add as well. So I'm very excited

00:10:23.600 --> 00:10:25.360
<v Speaker 0>to to be playing with that today. Yeah.

00:10:25.360 --> 00:10:26.720
<v Speaker 1>And and and I think that's an inter

00:10:26.800 --> 00:10:28.320
<v Speaker 1>interesting thing. Maybe we can talk about it

00:10:28.320 --> 00:10:29.840
<v Speaker 1>in the end if you're if you're if

00:10:29.840 --> 00:10:32.454
<v Speaker 1>we have some time. But this interoperability

00:10:32.454 --> 00:10:34.135
<v Speaker 1>between CDKs

00:10:34.295 --> 00:10:37.095
<v Speaker 1>opens up a lot of interesting possibilities. And

00:10:37.095 --> 00:10:40.375
<v Speaker 1>we've actually, like, added some capabilities, the AWS

00:10:40.375 --> 00:10:41.255
<v Speaker 1>CDK,

00:10:41.654 --> 00:10:43.815
<v Speaker 1>to support CDK for Kubernetes

00:10:44.450 --> 00:10:45.490
<v Speaker 1>definitions,

00:10:45.890 --> 00:10:48.050
<v Speaker 1>pretty natively. As and as you say, you

00:10:48.050 --> 00:10:49.170
<v Speaker 1>can, like, literally

00:10:49.330 --> 00:10:51.330
<v Speaker 1>define your cluster and you find your your

00:10:51.330 --> 00:10:53.330
<v Speaker 1>resources within the cluster

00:10:53.730 --> 00:10:55.730
<v Speaker 1>in the same code base. Right? Like, it's

00:10:55.730 --> 00:10:56.610
<v Speaker 1>the same application.

00:10:58.464 --> 00:10:59.425
<v Speaker 0>Yeah. Definitely.

00:10:59.825 --> 00:11:01.425
<v Speaker 0>I I think that probably leads me on

00:11:01.425 --> 00:11:03.745
<v Speaker 0>to my my first question. Oh, well, before

00:11:03.745 --> 00:11:05.425
<v Speaker 0>we do my first question, we have a

00:11:05.425 --> 00:11:07.024
<v Speaker 0>hello from Sunny. I'll pop that on the

00:11:07.024 --> 00:11:08.705
<v Speaker 0>screen. Hey, Sunny. Thanks for joining us.

00:11:09.985 --> 00:11:12.305
<v Speaker 0>Does writing the CDK for Kubernetes,

00:11:13.130 --> 00:11:15.370
<v Speaker 0>is it more difficult than, you know, a

00:11:15.370 --> 00:11:17.690
<v Speaker 0>domain like, you know, spinning up an ETS

00:11:17.690 --> 00:11:19.290
<v Speaker 0>cluster where the APIs are well defined? Like

00:11:19.290 --> 00:11:22.650
<v Speaker 0>Kubernetes, it's so extensible for custom resources. Was

00:11:22.650 --> 00:11:24.970
<v Speaker 0>that is that a challenge or does cdk8s

00:11:24.970 --> 00:11:26.730
<v Speaker 0>really can actually make working with those custom

00:11:26.730 --> 00:11:30.305
<v Speaker 0>resources easier for your Kubernetes operator or developer?

00:11:33.105 --> 00:11:33.904
<v Speaker 1>It was

00:11:35.105 --> 00:11:37.185
<v Speaker 1>it was an it was not a challenge,

00:11:37.185 --> 00:11:39.024
<v Speaker 1>but it was definitely an evolution of the

00:11:39.024 --> 00:11:41.740
<v Speaker 1>way we thought about the CDK because and

00:11:41.740 --> 00:11:43.580
<v Speaker 1>and in a sense, it's it's funny because

00:11:43.580 --> 00:11:46.300
<v Speaker 1>a similar thing happened in the AWS CDK,

00:11:46.300 --> 00:11:49.260
<v Speaker 1>but after we've released CDK for Kubernetes, I'll

00:11:49.260 --> 00:11:50.140
<v Speaker 1>I'll

00:11:50.380 --> 00:11:52.780
<v Speaker 1>roll back a little bit because the AWS

00:11:52.780 --> 00:11:55.020
<v Speaker 1>CDK has the has a fixed

00:11:55.645 --> 00:11:58.925
<v Speaker 1>low level surface area, which is CloudFormation. Basically,

00:11:58.925 --> 00:11:59.805
<v Speaker 1>synthesizes

00:11:59.805 --> 00:12:01.245
<v Speaker 1>CloudFormation templates.

00:12:01.565 --> 00:12:04.205
<v Speaker 1>And CloudFormation is the is a well defined

00:12:04.205 --> 00:12:06.685
<v Speaker 1>schema. Right? Like, it there's many,

00:12:06.685 --> 00:12:08.685
<v Speaker 1>many resources, but they're all very well defined,

00:12:08.685 --> 00:12:10.410
<v Speaker 1>and we know them in advance. And so

00:12:10.410 --> 00:12:13.130
<v Speaker 1>we we do in this AWS CDK,

00:12:13.290 --> 00:12:16.330
<v Speaker 1>we statically generate classes based on that schema

00:12:16.330 --> 00:12:17.610
<v Speaker 1>so that you can use,

00:12:18.010 --> 00:12:19.290
<v Speaker 1>the AWS CDK.

00:12:19.610 --> 00:12:21.130
<v Speaker 1>So you can use your programming language to

00:12:21.130 --> 00:12:23.050
<v Speaker 1>define those low level resources, and then we

00:12:23.050 --> 00:12:25.050
<v Speaker 1>have higher level resources. We'll talk about that

00:12:25.050 --> 00:12:27.264
<v Speaker 1>a little later. In Kubernetes,

00:12:27.264 --> 00:12:29.985
<v Speaker 1>like you said, the surface area is not

00:12:30.545 --> 00:12:34.384
<v Speaker 1>fixed. Right? Basically, there's the core Kubernetes API,

00:12:34.384 --> 00:12:36.625
<v Speaker 1>which is also a moving target.

00:12:36.945 --> 00:12:37.584
<v Speaker 1>Right? Like,

00:12:38.160 --> 00:12:41.360
<v Speaker 1>tons of changes and versioning and deprecations

00:12:41.360 --> 00:12:43.920
<v Speaker 1>and alphas and betas and blah blah blah.

00:12:44.000 --> 00:12:47.040
<v Speaker 1>And then there's an an basically, an open

00:12:47.040 --> 00:12:49.440
<v Speaker 1>ended surface area for custom resources.

00:12:50.575 --> 00:12:53.215
<v Speaker 1>And so when we approached CDK for Kubernetes,

00:12:53.215 --> 00:12:54.575
<v Speaker 1>we were like, okay. We need to take

00:12:54.575 --> 00:12:57.535
<v Speaker 1>a slightly different approach here because we can't

00:12:57.535 --> 00:12:59.775
<v Speaker 1>statically generate all those things because we don't

00:12:59.775 --> 00:13:01.615
<v Speaker 1>really know what the what users would would

00:13:01.615 --> 00:13:01.935
<v Speaker 1>need.

00:13:02.500 --> 00:13:04.660
<v Speaker 1>And so one of the key ingredients of

00:13:04.660 --> 00:13:07.700
<v Speaker 1>CDK for Kubernetes is what we call CDK's

00:13:07.700 --> 00:13:08.420
<v Speaker 1>import,

00:13:08.900 --> 00:13:11.380
<v Speaker 1>which is this capability to basically point

00:13:11.620 --> 00:13:14.180
<v Speaker 1>the CDK for Kubernetes a CLI

00:13:14.180 --> 00:13:17.300
<v Speaker 1>to a resource definition, whether it's a CRD

00:13:17.300 --> 00:13:20.725
<v Speaker 1>or the Kubernetes API at a specific version

00:13:20.805 --> 00:13:24.084
<v Speaker 1>Yep. And automatically generate those classes. We'll get

00:13:24.165 --> 00:13:25.925
<v Speaker 1>we'll we'll see that, obviously, when we when

00:13:25.925 --> 00:13:28.084
<v Speaker 1>we play. But but that was an interesting

00:13:28.084 --> 00:13:30.725
<v Speaker 1>difference. And the thing that happened after that

00:13:31.050 --> 00:13:32.970
<v Speaker 1>was that CloudFormation

00:13:32.970 --> 00:13:34.250
<v Speaker 1>had announced

00:13:34.490 --> 00:13:36.730
<v Speaker 1>that they're opening up the the resource model

00:13:36.730 --> 00:13:39.690
<v Speaker 1>for CloudFormation through CloudFormation registry,

00:13:39.930 --> 00:13:42.010
<v Speaker 1>which basically means that we actually have the

00:13:42.010 --> 00:13:42.250
<v Speaker 1>same,

00:13:44.105 --> 00:13:46.585
<v Speaker 1>the the same problem in c AWS CDK.

00:13:46.585 --> 00:13:49.465
<v Speaker 1>And we actually didn't we still didn't implement

00:13:49.465 --> 00:13:51.065
<v Speaker 1>CDK import,

00:13:51.385 --> 00:13:53.065
<v Speaker 1>but this is definitely the plan. Right? Like,

00:13:53.065 --> 00:13:54.265
<v Speaker 1>the idea is that these,

00:13:54.985 --> 00:13:57.945
<v Speaker 1>these, like, dynamic surface areas is something that's,

00:13:58.105 --> 00:13:59.860
<v Speaker 1>it's not too hard to support, but it's

00:13:59.860 --> 00:14:01.460
<v Speaker 1>definitely a difference from what we did in

00:14:01.460 --> 00:14:02.660
<v Speaker 1>the AWS CDK.

00:14:03.860 --> 00:14:05.140
<v Speaker 0>Awesome. Nice.

00:14:05.380 --> 00:14:06.020
<v Speaker 0>Well,

00:14:06.580 --> 00:14:08.500
<v Speaker 0>I think we should dive straight in there.

00:14:08.500 --> 00:14:10.180
<v Speaker 0>Let's let's start playing with it. Yeah. And

00:14:10.180 --> 00:14:12.020
<v Speaker 0>let's see what we can do here. So

00:14:12.020 --> 00:14:13.700
<v Speaker 0>let's pop over to our

00:14:14.555 --> 00:14:15.755
<v Speaker 0>screen share mode.

00:14:16.235 --> 00:14:18.315
<v Speaker 0>We're now floating bubbles. We have the cdk8

00:14:18.315 --> 00:14:19.274
<v Speaker 0>documentation.

00:14:20.154 --> 00:14:20.714
<v Speaker 0>And

00:14:21.274 --> 00:14:23.995
<v Speaker 0>I I always start these streams from a

00:14:23.995 --> 00:14:26.954
<v Speaker 0>complete newcomer perspective. There's no tools installed or

00:14:26.954 --> 00:14:28.714
<v Speaker 0>anything like that. So we're just gonna kinda

00:14:28.714 --> 00:14:30.394
<v Speaker 0>get ourselves through the documentation

00:14:30.950 --> 00:14:33.350
<v Speaker 0>and get started with a very simple example

00:14:33.350 --> 00:14:35.110
<v Speaker 0>and then we'll we'll have a bit of

00:14:35.110 --> 00:14:36.390
<v Speaker 0>a conversation and we'll see if we can

00:14:36.390 --> 00:14:38.950
<v Speaker 0>do something slightly more elaborate. I really would

00:14:38.950 --> 00:14:41.350
<v Speaker 0>largely kinda really wanna touch on the CRD

00:14:41.350 --> 00:14:42.710
<v Speaker 0>stuff, so we'll we'll hopefully get to that

00:14:42.710 --> 00:14:44.285
<v Speaker 0>as well. Okay. So I think one of

00:14:44.285 --> 00:14:46.925
<v Speaker 0>the superpowers of of cdk8s, sir, is that,

00:14:46.925 --> 00:14:48.605
<v Speaker 0>you know, we can see here we have

00:14:48.605 --> 00:14:50.125
<v Speaker 0>some prerequisites that tend

00:14:50.605 --> 00:14:52.365
<v Speaker 0>that allow me as a developer to work

00:14:52.365 --> 00:14:55.165
<v Speaker 0>with the tools and languages that are native

00:14:55.165 --> 00:14:56.605
<v Speaker 0>to me. So cdk8s

00:14:56.990 --> 00:14:59.870
<v Speaker 0>supports TypeScript, Python, and and Java. Is that

00:14:59.870 --> 00:15:00.430
<v Speaker 0>correct?

00:15:02.350 --> 00:15:04.430
<v Speaker 1>It's correct. But there's also,

00:15:05.550 --> 00:15:08.430
<v Speaker 1>technically, we also publish dot net support. It's

00:15:08.430 --> 00:15:10.350
<v Speaker 1>not it's still not documented because we we

00:15:10.350 --> 00:15:11.790
<v Speaker 1>wanna make sure that we get the best

00:15:11.790 --> 00:15:12.110
<v Speaker 1>experience.

00:15:12.845 --> 00:15:14.845
<v Speaker 1>And we even have

00:15:15.165 --> 00:15:17.324
<v Speaker 1>very, very preliminary Go support,

00:15:17.884 --> 00:15:18.445
<v Speaker 0>which is,

00:15:19.084 --> 00:15:19.805
<v Speaker 1>just,

00:15:20.204 --> 00:15:22.845
<v Speaker 1>just last week was, was when we finished

00:15:22.845 --> 00:15:23.565
<v Speaker 1>working on the

00:15:24.540 --> 00:15:26.459
<v Speaker 1>the the thing with with these language,

00:15:26.779 --> 00:15:27.740
<v Speaker 1>bindings

00:15:27.740 --> 00:15:30.220
<v Speaker 1>is that we actually generate them from the

00:15:30.220 --> 00:15:33.420
<v Speaker 1>TypeScript definitions. It's we use this technology that

00:15:33.420 --> 00:15:35.980
<v Speaker 1>we built for the AWS CDK called JSII,

00:15:37.665 --> 00:15:39.585
<v Speaker 1>which is pretty pretty cool.

00:15:40.465 --> 00:15:43.185
<v Speaker 1>And so when we add support for Go

00:15:43.745 --> 00:15:46.225
<v Speaker 1>AI, then suddenly we're able to deliver CDK

00:15:46.225 --> 00:15:49.025
<v Speaker 1>for Kubernetes and AWS CDK and CDK for

00:15:49.025 --> 00:15:51.770
<v Speaker 1>Terraform. And, basically all this all the all

00:15:51.770 --> 00:15:54.890
<v Speaker 1>the libraries that use JSII as their compiler.

00:15:54.890 --> 00:15:56.730
<v Speaker 1>In a sense, it's kinda like a a

00:15:56.730 --> 00:15:58.970
<v Speaker 1>subset of TypeScript that supports

00:15:59.050 --> 00:16:00.650
<v Speaker 1>binding to other languages.

00:16:01.530 --> 00:16:03.850
<v Speaker 1>And so we've actually we're we're wrapping up

00:16:03.850 --> 00:16:06.355
<v Speaker 1>support for developer preview for Go,

00:16:06.595 --> 00:16:08.435
<v Speaker 1>and that means that CDK for Kubernetes is

00:16:08.435 --> 00:16:10.355
<v Speaker 1>also gonna be available in Go soon. So

00:16:10.355 --> 00:16:11.475
<v Speaker 1>that's pretty exciting.

00:16:11.715 --> 00:16:13.795
<v Speaker 0>Yeah. I can imagine that's a fairly popular

00:16:13.795 --> 00:16:16.515
<v Speaker 0>choice among cloud native developers. Yes. Exactly. It's

00:16:16.770 --> 00:16:19.330
<v Speaker 0>probably the default language in 90% of the

00:16:19.330 --> 00:16:19.890
<v Speaker 0>cases.

00:16:20.370 --> 00:16:21.730
<v Speaker 0>I'm gonna hope I'm not the first person

00:16:21.730 --> 00:16:23.570
<v Speaker 0>to ask, but is is Rust on your

00:16:23.570 --> 00:16:24.290
<v Speaker 0>road map?

00:16:25.410 --> 00:16:27.810
<v Speaker 1>It's definitely on our radar,

00:16:28.210 --> 00:16:29.330
<v Speaker 1>especially given

00:16:29.330 --> 00:16:30.130
<v Speaker 1>that

00:16:30.345 --> 00:16:32.904
<v Speaker 1>some of the Rust maintainers are now, working

00:16:32.904 --> 00:16:33.944
<v Speaker 1>for AWS,

00:16:33.944 --> 00:16:34.105
<v Speaker 1>and,

00:16:35.144 --> 00:16:37.305
<v Speaker 1>we're really excited to, like,

00:16:37.704 --> 00:16:39.944
<v Speaker 1>use Rust internally a lot. And and so,

00:16:39.944 --> 00:16:41.785
<v Speaker 1>yeah, it is definitely on our road map.

00:16:41.944 --> 00:16:43.704
<v Speaker 1>It's it's a big investment to add these

00:16:43.704 --> 00:16:45.700
<v Speaker 1>languages. Go check us a year to work

00:16:45.700 --> 00:16:47.540
<v Speaker 1>on. Oh, wow. And so we really need

00:16:47.540 --> 00:16:51.140
<v Speaker 1>to be strategic about which languages we use,

00:16:51.779 --> 00:16:53.940
<v Speaker 1>we we support because it's it's quite a

00:16:53.940 --> 00:16:55.380
<v Speaker 1>lot of work. The surface if you can

00:16:55.380 --> 00:16:57.380
<v Speaker 1>imagine, the surface area of a language

00:16:57.954 --> 00:17:00.274
<v Speaker 1>is pretty large. Right? If you think about

00:17:00.274 --> 00:17:02.355
<v Speaker 1>the primitives that we need to support every

00:17:02.355 --> 00:17:03.395
<v Speaker 1>language, like classes

00:17:04.035 --> 00:17:08.115
<v Speaker 1>and interfaces and inheritance and methods and optionality

00:17:08.115 --> 00:17:10.434
<v Speaker 1>and data types. And and so to that

00:17:10.434 --> 00:17:13.395
<v Speaker 1>end and Go was actually super interested interesting

00:17:13.395 --> 00:17:15.210
<v Speaker 1>in that way because it it has its

00:17:15.210 --> 00:17:15.690
<v Speaker 1>own,

00:17:16.010 --> 00:17:19.130
<v Speaker 1>you know, idioms and and primitives and so

00:17:19.130 --> 00:17:20.650
<v Speaker 1>mapping those. Anyway,

00:17:21.050 --> 00:17:22.490
<v Speaker 1>it's definitely on the list. I don't know

00:17:22.490 --> 00:17:24.330
<v Speaker 1>if it's the second it's the next one

00:17:24.330 --> 00:17:25.849
<v Speaker 1>on the list. That's that's what I'm trying

00:17:25.849 --> 00:17:27.935
<v Speaker 1>to say. We're we're still we're still thinking

00:17:27.935 --> 00:17:30.575
<v Speaker 1>about it. Yeah. For all those good developers

00:17:30.575 --> 00:17:32.415
<v Speaker 0>that mess at our check-in every three lines,

00:17:32.415 --> 00:17:34.095
<v Speaker 0>they can now do that with their cdk8s

00:17:34.095 --> 00:17:36.095
<v Speaker 0>as well, I would imagine. So I

00:17:37.535 --> 00:17:39.290
<v Speaker 0>I read a lot of Go and I

00:17:39.290 --> 00:17:41.290
<v Speaker 0>I really enjoy Go, but I I I

00:17:41.290 --> 00:17:42.970
<v Speaker 0>really wish I had like, you know, the

00:17:42.970 --> 00:17:45.050
<v Speaker 0>question mark operator and rust where the errors

00:17:45.050 --> 00:17:47.450
<v Speaker 0>would just automatically be propagated up, but I'll

00:17:47.450 --> 00:17:48.730
<v Speaker 0>run into that another day. We don't need

00:17:48.730 --> 00:17:50.169
<v Speaker 0>to talk about that today. Okay.

00:17:50.490 --> 00:17:51.690
<v Speaker 0>So the first thing I need to do

00:17:51.690 --> 00:17:53.850
<v Speaker 0>is install the cdk8s CLI.

00:17:54.075 --> 00:17:56.235
<v Speaker 0>So I should have NPM.

00:17:56.235 --> 00:17:59.354
<v Speaker 0>I do have NPM. I'm pretty confident there.

00:18:01.514 --> 00:18:03.595
<v Speaker 0>So I'll let that run-in the background and

00:18:03.595 --> 00:18:06.394
<v Speaker 0>then we can use the cdk8s CLI

00:18:06.475 --> 00:18:08.235
<v Speaker 0>to initialize a new project.

00:18:09.940 --> 00:18:11.540
<v Speaker 0>Is there anything special about that? Or is

00:18:11.540 --> 00:18:12.740
<v Speaker 0>it just a standard,

00:18:13.140 --> 00:18:15.060
<v Speaker 0>you know, kind of node based project with

00:18:15.060 --> 00:18:17.060
<v Speaker 0>just some stuff bolted into the package you

00:18:17.060 --> 00:18:19.380
<v Speaker 0>start JSON, I would imagine. Very very strict.

00:18:19.380 --> 00:18:20.900
<v Speaker 1>It's very empty.

00:18:21.620 --> 00:18:22.020
<v Speaker 1>You'll see.

00:18:23.835 --> 00:18:26.794
<v Speaker 1>Yeah. Cdk8s is basically a library. Like, AWS

00:18:26.794 --> 00:18:29.034
<v Speaker 1>cdk8s, it's just a library and the CLI.

00:18:29.034 --> 00:18:31.195
<v Speaker 1>Right? Like, it's basically this combination.

00:18:31.275 --> 00:18:34.315
<v Speaker 1>But you can technically use cdk8s without

00:18:35.940 --> 00:18:37.860
<v Speaker 1>the CLI if you wanted. Like, it the

00:18:37.860 --> 00:18:39.779
<v Speaker 1>CLI is basically just a kind of like

00:18:39.779 --> 00:18:40.339
<v Speaker 1>a,

00:18:41.059 --> 00:18:43.460
<v Speaker 1>you know, some gives you some workflow tools

00:18:43.460 --> 00:18:45.460
<v Speaker 1>around the project. But it most of the

00:18:45.460 --> 00:18:47.379
<v Speaker 1>logic, almost all of the logic is actually

00:18:47.379 --> 00:18:48.179
<v Speaker 1>part of the library.

00:18:49.725 --> 00:18:51.165
<v Speaker 0>Okay. Well, let's just take a look at

00:18:51.165 --> 00:18:52.925
<v Speaker 0>what we got there. Now, the sidebar is

00:18:52.925 --> 00:18:54.605
<v Speaker 0>always a bit difficult to read, when I

00:18:54.605 --> 00:18:56.044
<v Speaker 0>pop stuff open, we should

00:18:56.765 --> 00:18:58.125
<v Speaker 0>have a much better view.

00:18:58.765 --> 00:19:00.125
<v Speaker 0>But it looks like a pretty

00:19:00.445 --> 00:19:01.325
<v Speaker 0>standard

00:19:01.610 --> 00:19:02.890
<v Speaker 0>node project.

00:19:02.890 --> 00:19:04.890
<v Speaker 0>I'm looking at the package dot JSON. I

00:19:04.890 --> 00:19:06.650
<v Speaker 0>can see that we're pulling in

00:19:07.450 --> 00:19:09.929
<v Speaker 0>a bunch of things. So the cdk8s plus

00:19:10.250 --> 00:19:12.810
<v Speaker 0>17 and then constructs. Maybe you just wanna

00:19:12.810 --> 00:19:14.090
<v Speaker 0>give us a little bit of

00:19:14.890 --> 00:19:16.570
<v Speaker 0>information on what each of those are.

00:19:17.485 --> 00:19:18.044
<v Speaker 1>Yeah.

00:19:19.085 --> 00:19:21.325
<v Speaker 1>So cdk8s is the main library.

00:19:21.325 --> 00:19:24.205
<v Speaker 1>It's basically where it's basically the core

00:19:24.845 --> 00:19:27.804
<v Speaker 1>the it it contains the core classes and

00:19:27.804 --> 00:19:29.245
<v Speaker 1>basically allows you to use

00:19:31.700 --> 00:19:32.820
<v Speaker 1>cdk8s,

00:19:33.059 --> 00:19:35.460
<v Speaker 1>but it doesn't have any high level abstractions.

00:19:35.460 --> 00:19:37.220
<v Speaker 1>It doesn't have any specific

00:19:37.539 --> 00:19:39.940
<v Speaker 1>support for Kubernetes resources.

00:19:40.419 --> 00:19:42.580
<v Speaker 1>In a sense, we sometimes call this l

00:19:42.580 --> 00:19:45.205
<v Speaker 1>zero, level zero, because it basically gives you

00:19:45.205 --> 00:19:48.485
<v Speaker 1>the ability to synthesize Kubernetes manifest using

00:19:48.565 --> 00:19:50.245
<v Speaker 1>a CDK paradigm.

00:19:51.845 --> 00:19:53.845
<v Speaker 1>And it has all the kind of base

00:19:53.845 --> 00:19:56.725
<v Speaker 1>classes. It has the chart class. It has,

00:19:56.885 --> 00:20:00.460
<v Speaker 1>API object class. So, basically, classes that represent

00:20:00.460 --> 00:20:01.100
<v Speaker 1>the

00:20:01.260 --> 00:20:02.059
<v Speaker 1>the

00:20:02.220 --> 00:20:03.019
<v Speaker 1>the

00:20:03.900 --> 00:20:05.340
<v Speaker 1>Kubernetes, you know,

00:20:05.740 --> 00:20:07.659
<v Speaker 1>abstract primitives, let's call it.

00:20:08.140 --> 00:20:11.180
<v Speaker 1>Now c d k cdk8s plus is what

00:20:11.180 --> 00:20:12.940
<v Speaker 1>we sometimes call l two,

00:20:13.785 --> 00:20:15.304
<v Speaker 1>which is layer two.

00:20:15.545 --> 00:20:18.345
<v Speaker 1>And we'll we'll cover it, maybe later because

00:20:18.345 --> 00:20:21.625
<v Speaker 1>I think that's worth a separate discussion, but

00:20:21.625 --> 00:20:24.665
<v Speaker 1>we we we really recommend using that. It's

00:20:24.665 --> 00:20:27.370
<v Speaker 1>actually a pretty powerful layer, and it would

00:20:27.370 --> 00:20:28.809
<v Speaker 1>be interesting for me to, like, hear what

00:20:28.809 --> 00:20:30.330
<v Speaker 1>you think about it when we get there.

00:20:30.890 --> 00:20:33.450
<v Speaker 1>And then, constructs is actually the low level

00:20:33.450 --> 00:20:36.570
<v Speaker 1>programming model that's shared across all cdks,

00:20:37.770 --> 00:20:39.850
<v Speaker 1>and that's a component model that allows you

00:20:39.850 --> 00:20:40.409
<v Speaker 1>to compose

00:20:41.375 --> 00:20:44.894
<v Speaker 1>these abstract things together into higher level concepts.

00:20:44.894 --> 00:20:47.375
<v Speaker 1>And everything in the CDK, in all CDKs,

00:20:47.375 --> 00:20:50.335
<v Speaker 1>is a construct. The app, the chart, the

00:20:50.335 --> 00:20:53.215
<v Speaker 1>API object, and everything that's higher level than

00:20:53.215 --> 00:20:55.419
<v Speaker 1>that, they're all constructs. So if you you

00:20:55.419 --> 00:20:57.820
<v Speaker 1>can think about them as as a programming

00:20:57.820 --> 00:21:00.539
<v Speaker 1>primitive in a way. They're like composable

00:21:00.779 --> 00:21:01.580
<v Speaker 1>functions.

00:21:01.580 --> 00:21:03.100
<v Speaker 1>You know? Like, they're they you can take

00:21:03.100 --> 00:21:06.140
<v Speaker 1>these two constructs and multiple constructs and create

00:21:06.140 --> 00:21:07.580
<v Speaker 1>a higher order thing from them.

00:21:09.155 --> 00:21:11.315
<v Speaker 1>And we'll see them in use, I think,

00:21:11.315 --> 00:21:11.874
<v Speaker 1>probably.

00:21:12.275 --> 00:21:13.394
<v Speaker 0>Alright. Perfect.

00:21:13.715 --> 00:21:15.075
<v Speaker 0>I have to see we have a bunch

00:21:15.075 --> 00:21:16.515
<v Speaker 0>of scripts. So I can see the import

00:21:16.515 --> 00:21:18.755
<v Speaker 0>here. I'm assuming that's for bringing in custom

00:21:18.755 --> 00:21:21.070
<v Speaker 0>resources. I'm sure we'll play with that. I'm

00:21:21.070 --> 00:21:22.910
<v Speaker 0>assuming send for just gonna is that the

00:21:22.910 --> 00:21:24.510
<v Speaker 0>generate the gamble for me?

00:21:24.990 --> 00:21:26.190
<v Speaker 0>Yep. Okay.

00:21:26.590 --> 00:21:28.910
<v Speaker 0>And then we've got some TypeScript stuff. I

00:21:28.910 --> 00:21:30.430
<v Speaker 0>I find the inclusion

00:21:30.430 --> 00:21:33.645
<v Speaker 0>of jest on a test command interesting

00:21:33.645 --> 00:21:35.485
<v Speaker 0>because I can speak from my own experience

00:21:35.485 --> 00:21:36.925
<v Speaker 0>and I can speak from, you know, you

00:21:36.925 --> 00:21:38.045
<v Speaker 0>know, when I speak to people or used

00:21:38.045 --> 00:21:39.725
<v Speaker 0>to speak to people at conferences that

00:21:40.045 --> 00:21:43.885
<v Speaker 0>testing their their codified infrastructure and application deployments

00:21:43.885 --> 00:21:45.245
<v Speaker 0>is something that people have wanted to do

00:21:45.245 --> 00:21:46.970
<v Speaker 0>for a long time and has always been

00:21:46.970 --> 00:21:48.810
<v Speaker 0>very, very painful. So I'm curious if that's

00:21:48.810 --> 00:21:51.690
<v Speaker 0>something that cdk8s is gonna make easier for

00:21:51.690 --> 00:21:53.210
<v Speaker 0>me and and what that looks like. So

00:21:53.210 --> 00:21:54.250
<v Speaker 0>that's really exciting.

00:21:55.290 --> 00:21:56.650
<v Speaker 0>Alright. What else do we have here? So

00:21:56.650 --> 00:21:58.490
<v Speaker 0>the package dot JSON is is what we've

00:21:58.490 --> 00:22:00.250
<v Speaker 0>just spent. We have our cdk8s dot yaml,

00:22:01.855 --> 00:22:03.774
<v Speaker 0>Just some boilerplate, I would imagine.

00:22:04.415 --> 00:22:06.495
<v Speaker 1>This yeah. This is basically configuration for the

00:22:06.495 --> 00:22:07.374
<v Speaker 1>CLI

00:22:07.455 --> 00:22:09.934
<v Speaker 1>so that it knows about your application. So

00:22:09.934 --> 00:22:11.774
<v Speaker 1>it knows what language you're using.

00:22:12.495 --> 00:22:14.170
<v Speaker 1>The app attribute

00:22:14.170 --> 00:22:16.730
<v Speaker 1>basically tells the CLI how to execute your

00:22:16.730 --> 00:22:17.450
<v Speaker 1>application

00:22:17.850 --> 00:22:20.570
<v Speaker 1>because it's in a sense, when you're synthesizing,

00:22:20.570 --> 00:22:22.730
<v Speaker 1>you're executing your code. Right? Like, the execution

00:22:22.730 --> 00:22:24.410
<v Speaker 1>of your program

00:22:24.490 --> 00:22:26.650
<v Speaker 1>is what produces those manifests.

00:22:26.925 --> 00:22:29.565
<v Speaker 1>And so when you're doing cdk8synth,

00:22:30.125 --> 00:22:31.965
<v Speaker 1>it needs to execute your application. And in

00:22:31.965 --> 00:22:34.205
<v Speaker 1>in in in since we support multiple programming

00:22:34.205 --> 00:22:35.005
<v Speaker 1>languages,

00:22:36.285 --> 00:22:37.885
<v Speaker 1>we need to tell the CLI how to

00:22:37.885 --> 00:22:40.205
<v Speaker 1>execute your application. So that's basically why we

00:22:40.205 --> 00:22:42.640
<v Speaker 1>have this app thing. And import is basically

00:22:42.640 --> 00:22:44.000
<v Speaker 1>a set of imports

00:22:44.320 --> 00:22:46.240
<v Speaker 1>that you can specify

00:22:46.240 --> 00:22:46.960
<v Speaker 1>via

00:22:47.200 --> 00:22:49.840
<v Speaker 1>this config file, but you can also import

00:22:49.840 --> 00:22:52.240
<v Speaker 1>via c the CLI. Right? Basically, just run

00:22:52.240 --> 00:22:54.320
<v Speaker 1>the command line to import, and we'll probably

00:22:54.320 --> 00:22:55.664
<v Speaker 1>play with that a little later.

00:22:56.544 --> 00:22:57.584
<v Speaker 0>Cool. Awesome.

00:22:57.985 --> 00:22:59.344
<v Speaker 0>Alright. Let's see.

00:22:59.904 --> 00:23:01.424
<v Speaker 0>I see that we have a main TS

00:23:01.424 --> 00:23:02.544
<v Speaker 0>and a main

00:23:02.705 --> 00:23:03.584
<v Speaker 0>JS.

00:23:03.664 --> 00:23:05.904
<v Speaker 0>So let's just pop that open.

00:23:06.865 --> 00:23:08.384
<v Speaker 0>So we're pulling constructs,

00:23:08.384 --> 00:23:09.960
<v Speaker 0>app chart and chart props. We can kinda

00:23:09.960 --> 00:23:12.360
<v Speaker 0>cover this when we get to or example,

00:23:12.360 --> 00:23:13.799
<v Speaker 0>we have a class.

00:23:16.280 --> 00:23:18.440
<v Speaker 0>Is it fair to say that this hasn't

00:23:18.440 --> 00:23:19.799
<v Speaker 0>deployed anything

00:23:19.799 --> 00:23:21.960
<v Speaker 0>or is there some magic on there?

00:23:22.200 --> 00:23:24.725
<v Speaker 1>No. Like, you can, let's try. Let's synthesize

00:23:24.725 --> 00:23:26.884
<v Speaker 1>and see what app what's what's the output.

00:23:27.365 --> 00:23:28.644
<v Speaker 0>Alright. So I could

00:23:31.044 --> 00:23:33.125
<v Speaker 0>I guess you would do m p npm

00:23:33.125 --> 00:23:34.244
<v Speaker 0>run synth?

00:23:34.725 --> 00:23:35.924
<v Speaker 1>Yeah. Or you could

00:23:37.365 --> 00:23:38.720
<v Speaker 1>do Or you could do cdk8synth,

00:23:38.720 --> 00:23:40.399
<v Speaker 1>whichever. It's the same thing.

00:23:43.120 --> 00:23:45.919
<v Speaker 0>Alright. And we get hello dot kubernetes dot

00:23:45.919 --> 00:23:47.360
<v Speaker 0>yaml in our disk directory.

00:23:52.155 --> 00:23:53.514
<v Speaker 1>Yeah. Very nice. Cool.

00:23:55.515 --> 00:23:57.595
<v Speaker 1>That's Good job. What I was expecting, I

00:23:57.595 --> 00:23:59.115
<v Speaker 0>guess. I looked at, you know, there there's

00:23:59.115 --> 00:24:01.355
<v Speaker 0>nothing Kubernetes here. That just looks like it's

00:24:01.355 --> 00:24:03.769
<v Speaker 0>setting up our app and chart. I'm not

00:24:03.769 --> 00:24:05.690
<v Speaker 0>entirely sure what those mean yet, but we'll

00:24:05.690 --> 00:24:06.809
<v Speaker 0>get to that, I'm sure.

00:24:07.210 --> 00:24:09.289
<v Speaker 0>So there's also the inclusion of a main

00:24:09.289 --> 00:24:11.210
<v Speaker 0>dot j s. Oh, this is just generated

00:24:11.210 --> 00:24:13.210
<v Speaker 0>right now. This is a compiled output. Yeah.

00:24:13.210 --> 00:24:14.169
<v Speaker 0>Exactly. Okay.

00:24:14.570 --> 00:24:16.330
<v Speaker 0>Do we ship with any test?

00:24:17.305 --> 00:24:18.585
<v Speaker 0>Yeah. Okay. Cool.

00:24:18.825 --> 00:24:20.505
<v Speaker 0>We've just got a very simple

00:24:20.905 --> 00:24:22.585
<v Speaker 0>check that thing.

00:24:22.985 --> 00:24:25.385
<v Speaker 1>Yeah. So this is in just there's a

00:24:25.385 --> 00:24:27.785
<v Speaker 1>concept called snapshot testing. I don't know if

00:24:27.785 --> 00:24:30.610
<v Speaker 1>if you're familiar with that. But, basically, it's

00:24:30.610 --> 00:24:33.090
<v Speaker 1>coming from React from the React world.

00:24:33.330 --> 00:24:35.330
<v Speaker 1>It's very good for for things like React

00:24:35.330 --> 00:24:37.250
<v Speaker 1>and things like the CDK, and there's actually

00:24:37.250 --> 00:24:38.369
<v Speaker 1>pretty interesting,

00:24:40.049 --> 00:24:43.090
<v Speaker 1>analogies between the two the two frameworks.

00:24:43.649 --> 00:24:45.725
<v Speaker 1>But the the nice thing about test snapshot

00:24:45.725 --> 00:24:48.125
<v Speaker 1>testings is that they're it I kind of

00:24:48.125 --> 00:24:49.485
<v Speaker 1>think about them as,

00:24:50.525 --> 00:24:51.885
<v Speaker 1>and I use them a lot, so I

00:24:51.885 --> 00:24:53.805
<v Speaker 1>can say that. It's like testing for lazy

00:24:53.805 --> 00:24:54.445
<v Speaker 1>people.

00:24:57.485 --> 00:24:58.925
<v Speaker 1>The it's they're very, very

00:25:00.500 --> 00:25:02.660
<v Speaker 1>crude in a way. Right? Because what what

00:25:02.660 --> 00:25:04.260
<v Speaker 1>they do is they basically

00:25:04.660 --> 00:25:06.820
<v Speaker 1>they say, okay. Let's synthesize this thing and

00:25:06.820 --> 00:25:08.660
<v Speaker 1>take a snapshot of the output

00:25:08.820 --> 00:25:11.140
<v Speaker 1>and then commit this snapshot into my source

00:25:11.140 --> 00:25:13.380
<v Speaker 1>control. And then if something changes, my test

00:25:13.380 --> 00:25:13.780
<v Speaker 1>will fail.

00:25:14.475 --> 00:25:16.235
<v Speaker 1>And so to that end, it's basically,

00:25:16.555 --> 00:25:18.875
<v Speaker 1>kind of like an end to end unit

00:25:18.875 --> 00:25:20.555
<v Speaker 1>test in a way. It basically tests the

00:25:20.555 --> 00:25:21.514
<v Speaker 1>entire thing.

00:25:21.995 --> 00:25:24.315
<v Speaker 1>And, obviously, you can, like, test smaller pieces

00:25:24.315 --> 00:25:26.635
<v Speaker 1>of it if you wanted, but, it's it's

00:25:26.635 --> 00:25:28.980
<v Speaker 1>powerful because it a it basically protects you

00:25:28.980 --> 00:25:30.340
<v Speaker 1>against unexpected

00:25:30.340 --> 00:25:31.299
<v Speaker 1>regressions.

00:25:32.020 --> 00:25:33.300
<v Speaker 1>Because one of the things that we'll see

00:25:33.300 --> 00:25:35.220
<v Speaker 1>is that as you go higher level,

00:25:35.780 --> 00:25:38.500
<v Speaker 1>you encapsulate and you abstract, and then things

00:25:38.500 --> 00:25:40.580
<v Speaker 1>can change without intention.

00:25:40.580 --> 00:25:42.695
<v Speaker 1>Right? Like, can, for example, some low level

00:25:42.695 --> 00:25:45.415
<v Speaker 1>things some some suddenly changes. You're you're, you

00:25:45.415 --> 00:25:48.054
<v Speaker 1>know, downloading a new version of some dependency,

00:25:48.215 --> 00:25:50.455
<v Speaker 1>and suddenly your your manifest changes in a

00:25:50.455 --> 00:25:51.735
<v Speaker 1>way that you didn't expect.

00:25:52.055 --> 00:25:54.615
<v Speaker 1>And so this approach of snapshot testing is

00:25:54.615 --> 00:25:56.615
<v Speaker 1>a really powerful and simple way

00:25:57.139 --> 00:25:59.700
<v Speaker 1>and cheap in many in many senses

00:25:59.860 --> 00:26:00.579
<v Speaker 1>to

00:26:00.899 --> 00:26:03.139
<v Speaker 1>to see what's happened. Right? Like, to basically

00:26:03.139 --> 00:26:03.779
<v Speaker 1>connect

00:26:04.019 --> 00:26:06.740
<v Speaker 1>the this this stack of abstractions to the

00:26:06.740 --> 00:26:09.779
<v Speaker 1>output and make sure that you know what

00:26:08.914 --> 00:26:10.835
<v Speaker 1>what's going on. And we'll we'll probably we

00:26:10.835 --> 00:26:12.034
<v Speaker 1>can play with that later if we have

00:26:12.034 --> 00:26:12.674
<v Speaker 1>some time.

00:26:13.395 --> 00:26:14.754
<v Speaker 0>Okay. Perfect.

00:26:15.715 --> 00:26:16.835
<v Speaker 0>Yeah. I'm

00:26:17.154 --> 00:26:19.635
<v Speaker 0>yeah. I'll just leave that. I haven't I

00:26:19.635 --> 00:26:22.059
<v Speaker 0>mean, I've I've babbled with TypeScript and React

00:26:22.059 --> 00:26:23.740
<v Speaker 0>and, you know, I think I've rebuilt my

00:26:23.740 --> 00:26:25.899
<v Speaker 0>blog like 14,000 times in the last one

00:26:25.899 --> 00:26:28.779
<v Speaker 0>month probably. But the testing is something I've

00:26:28.779 --> 00:26:30.940
<v Speaker 0>always avoided and I've always I always read

00:26:30.940 --> 00:26:32.460
<v Speaker 0>about jest and the way that it can

00:26:32.460 --> 00:26:32.700
<v Speaker 0>help.

00:26:33.965 --> 00:26:36.205
<v Speaker 0>Maybe my way into getting better, that will

00:26:36.205 --> 00:26:37.485
<v Speaker 0>be through cdk8s,

00:26:37.485 --> 00:26:38.524
<v Speaker 0>which would be nice.

00:26:39.725 --> 00:26:42.845
<v Speaker 1>Yeah. It's definitely it's definitely one of the

00:26:43.405 --> 00:26:46.205
<v Speaker 1>killer features of of of the CDK paradigm

00:26:46.205 --> 00:26:48.445
<v Speaker 1>is the ability to write tests and

00:26:50.760 --> 00:26:52.039
<v Speaker 1>get more confidence.

00:26:52.760 --> 00:26:53.879
<v Speaker 0>Yeah. I mean,

00:26:54.679 --> 00:26:56.039
<v Speaker 0>I I I will speak for don't wanna

00:26:56.039 --> 00:26:57.640
<v Speaker 0>put words in, you know, anyone else's mind,

00:26:57.640 --> 00:26:58.919
<v Speaker 0>but I'll speak for my own experience. And

00:26:58.919 --> 00:27:01.715
<v Speaker 0>that's that, you know, when I have what

00:27:01.715 --> 00:27:03.315
<v Speaker 0>I have what what I want as a

00:27:03.315 --> 00:27:05.875
<v Speaker 0>deployment mechanism for an application on Kubernetes is

00:27:05.875 --> 00:27:06.355
<v Speaker 0>like,

00:27:06.915 --> 00:27:08.995
<v Speaker 0>other than the image, I probably don't want

00:27:08.995 --> 00:27:10.435
<v Speaker 0>it to change that much. And the image,

00:27:10.435 --> 00:27:12.195
<v Speaker 0>don't even want to change in my manifest.

00:27:12.195 --> 00:27:13.315
<v Speaker 0>I want that to be something that happens

00:27:13.315 --> 00:27:15.235
<v Speaker 0>within the cluster. So like, I can understand

00:27:15.235 --> 00:27:16.435
<v Speaker 0>why snapshot testing

00:27:16.679 --> 00:27:18.200
<v Speaker 0>is gonna give me that really quick feedback

00:27:18.200 --> 00:27:20.759
<v Speaker 0>of, hey. This changed. And at least if

00:27:20.759 --> 00:27:22.519
<v Speaker 0>it's correct, I can still review that and

00:27:22.519 --> 00:27:24.360
<v Speaker 0>say, okay. That's that's the change that I

00:27:24.360 --> 00:27:27.000
<v Speaker 0>was expecting when I reran it. So Yeah.

00:27:27.000 --> 00:27:28.600
<v Speaker 1>And and the nice thing about

00:27:29.305 --> 00:27:31.625
<v Speaker 1>about using snapshot testing is, as I said

00:27:31.625 --> 00:27:33.305
<v Speaker 1>earlier, you can you can do snapshots on

00:27:33.305 --> 00:27:36.025
<v Speaker 1>a smaller on smaller pieces. So if you,

00:27:37.145 --> 00:27:39.705
<v Speaker 1>define if you create a construct that represents

00:27:40.105 --> 00:27:42.265
<v Speaker 1>an an abstraction, right, and you use this

00:27:42.265 --> 00:27:44.580
<v Speaker 1>construct in your app or you publish this

00:27:44.580 --> 00:27:46.419
<v Speaker 1>construct as a live user,

00:27:46.500 --> 00:27:49.299
<v Speaker 1>you can test this construct through snapshots.

00:27:49.700 --> 00:27:52.020
<v Speaker 1>And so it's not necessarily about snapshotting the

00:27:52.020 --> 00:27:55.299
<v Speaker 1>entire application. You can snapshot any scope

00:27:55.299 --> 00:27:56.340
<v Speaker 1>of that application.

00:27:57.655 --> 00:27:59.655
<v Speaker 1>And and so it's basically it is a

00:27:59.655 --> 00:28:01.095
<v Speaker 1>unit test in many you know, for all

00:28:01.095 --> 00:28:03.975
<v Speaker 1>intents and purposes, and the granularity is yours

00:28:03.975 --> 00:28:06.695
<v Speaker 1>to decide. But at the at the minimum,

00:28:06.695 --> 00:28:08.855
<v Speaker 1>I would recommend using a high level, you

00:28:08.855 --> 00:28:11.175
<v Speaker 1>know, basically, a low resolution or high level

00:28:11.175 --> 00:28:13.820
<v Speaker 1>granularity to basically make sure that you're protecting

00:28:13.820 --> 00:28:16.620
<v Speaker 1>yourself against unexpected changes or regressions.

00:28:17.580 --> 00:28:18.380
<v Speaker 0>Alright.

00:28:18.940 --> 00:28:21.580
<v Speaker 0>So if we continue then through our documentation,

00:28:21.580 --> 00:28:23.500
<v Speaker 0>we're now being introduced to kind of two

00:28:23.500 --> 00:28:25.740
<v Speaker 0>new concepts, which is the app and the

00:28:25.740 --> 00:28:26.540
<v Speaker 0>the chart.

00:28:28.015 --> 00:28:28.975
<v Speaker 0>Are these

00:28:29.135 --> 00:28:30.575
<v Speaker 0>as I would expect them to be? Are

00:28:30.575 --> 00:28:32.335
<v Speaker 0>they specific to CDK?

00:28:32.655 --> 00:28:34.174
<v Speaker 0>What is an app and chart in this

00:28:34.174 --> 00:28:34.815
<v Speaker 0>context?

00:28:37.135 --> 00:28:39.615
<v Speaker 1>So an app is basically the root so

00:28:39.615 --> 00:28:41.455
<v Speaker 1>let's let's go back to the concept of

00:28:41.455 --> 00:28:42.610
<v Speaker 1>constructs. Okay?

00:28:42.850 --> 00:28:45.570
<v Speaker 1>So though these constructs are these is composable

00:28:46.130 --> 00:28:47.809
<v Speaker 1>units of abstraction.

00:28:48.049 --> 00:28:50.130
<v Speaker 1>And the way you compose things is basically

00:28:50.130 --> 00:28:51.330
<v Speaker 1>you create a tree.

00:28:51.650 --> 00:28:53.890
<v Speaker 1>So there's a there's a root, and then

00:28:53.890 --> 00:28:55.250
<v Speaker 1>the root composes

00:28:55.385 --> 00:28:57.145
<v Speaker 1>a bunch of other things, and then that

00:28:57.385 --> 00:28:59.545
<v Speaker 1>and then these other things compose other things

00:28:59.545 --> 00:29:01.225
<v Speaker 1>together. And so in a sense, you can

00:29:01.225 --> 00:29:02.585
<v Speaker 1>think about it as a tree.

00:29:03.705 --> 00:29:05.545
<v Speaker 1>And in in the CDK, it's an also

00:29:05.545 --> 00:29:07.465
<v Speaker 1>in the c AWS CDK,

00:29:07.465 --> 00:29:09.680
<v Speaker 1>the root is called an app. Right? This

00:29:09.680 --> 00:29:11.600
<v Speaker 1>is basically the root of the construct tree

00:29:11.600 --> 00:29:13.760
<v Speaker 1>is the app. It's the everything starts from

00:29:13.760 --> 00:29:14.240
<v Speaker 1>there.

00:29:14.800 --> 00:29:15.519
<v Speaker 1>And then

00:29:16.559 --> 00:29:18.159
<v Speaker 1>the second level

00:29:19.040 --> 00:29:20.320
<v Speaker 1>is normally,

00:29:21.280 --> 00:29:22.640
<v Speaker 1>a deployment unit.

00:29:23.625 --> 00:29:25.065
<v Speaker 1>And in in cdk8s,

00:29:25.065 --> 00:29:27.225
<v Speaker 1>we use the chart we use chart this

00:29:27.225 --> 00:29:29.385
<v Speaker 1>chart name as the deployment unit, and we

00:29:29.385 --> 00:29:31.544
<v Speaker 1>borrowed it from from Helm, of course,

00:29:32.345 --> 00:29:34.985
<v Speaker 1>because they do resonate with each other. Right?

00:29:34.985 --> 00:29:36.345
<v Speaker 1>Like, it's kind of like

00:29:37.145 --> 00:29:37.705
<v Speaker 1>and and but

00:29:38.490 --> 00:29:41.530
<v Speaker 1>practically or mechanically, a chart is basically a

00:29:41.530 --> 00:29:42.809
<v Speaker 1>manifest. Basically,

00:29:43.290 --> 00:29:45.049
<v Speaker 1>synthesizes into a manifest.

00:29:46.090 --> 00:29:47.690
<v Speaker 1>The reason we didn't wanna call it a

00:29:47.690 --> 00:29:48.490
<v Speaker 1>manifest

00:29:48.570 --> 00:29:49.690
<v Speaker 1>was because

00:29:50.490 --> 00:29:52.250
<v Speaker 1>CDK terminology is about

00:29:52.745 --> 00:29:55.465
<v Speaker 1>the result. It's not about the artifact,

00:29:55.465 --> 00:29:57.225
<v Speaker 1>if that makes sense. Right? Like, for example,

00:29:57.225 --> 00:29:59.065
<v Speaker 1>I have a class called pod.

00:29:59.545 --> 00:30:01.625
<v Speaker 1>And so the class is is not called

00:30:01.625 --> 00:30:04.585
<v Speaker 1>pod manifest or pod definition. Right? It's called

00:30:04.585 --> 00:30:06.105
<v Speaker 1>pod because it represents

00:30:06.700 --> 00:30:08.940
<v Speaker 1>it models the idea of a pod in

00:30:08.940 --> 00:30:11.020
<v Speaker 1>the in the output. Right? And so to

00:30:11.020 --> 00:30:13.260
<v Speaker 1>that end, we use chart to represent a

00:30:13.260 --> 00:30:14.380
<v Speaker 1>single manifest.

00:30:14.620 --> 00:30:16.060
<v Speaker 1>And and so what you can see here

00:30:16.060 --> 00:30:17.980
<v Speaker 1>is you can see an app as a

00:30:17.980 --> 00:30:20.299
<v Speaker 1>root and then a single instance

00:30:20.700 --> 00:30:22.765
<v Speaker 1>of a a chart type.

00:30:23.245 --> 00:30:25.565
<v Speaker 1>And like oriented,

00:30:25.805 --> 00:30:27.645
<v Speaker 1>you know, programming language, there's a type and

00:30:27.645 --> 00:30:29.165
<v Speaker 1>there's an instance. And so in this case,

00:30:29.165 --> 00:30:31.325
<v Speaker 1>we're defining we're declaring a new type called

00:30:31.325 --> 00:30:33.085
<v Speaker 1>my chart, which extends

00:30:33.325 --> 00:30:35.005
<v Speaker 1>the base type of chart.

00:30:35.245 --> 00:30:36.920
<v Speaker 1>In this case, it's it doesn't do anything

00:30:36.920 --> 00:30:38.600
<v Speaker 1>with it. So it's basically the same thing.

00:30:38.600 --> 00:30:40.200
<v Speaker 1>Right? Like, it doesn't come it doesn't there

00:30:40.200 --> 00:30:40.840
<v Speaker 1>are no

00:30:41.160 --> 00:30:42.440
<v Speaker 1>no specifications

00:30:42.440 --> 00:30:43.400
<v Speaker 1>here yet,

00:30:44.680 --> 00:30:46.200
<v Speaker 1>but it is a type. So so I

00:30:46.200 --> 00:30:47.880
<v Speaker 1>can, like, instantiate it as many times as

00:30:47.880 --> 00:30:50.040
<v Speaker 1>I want, which is a very powerful idea.

00:30:50.684 --> 00:30:53.725
<v Speaker 1>And then I'm instantiating it once and adding

00:30:53.725 --> 00:30:56.284
<v Speaker 1>it to my app. And this the the

00:30:56.284 --> 00:30:58.284
<v Speaker 1>programming model the the programming

00:30:58.605 --> 00:31:00.684
<v Speaker 1>syntax is a little odd.

00:31:01.804 --> 00:31:03.884
<v Speaker 1>I'm aware of that. Like, it's definitely been

00:31:04.050 --> 00:31:06.690
<v Speaker 1>kinda like the cdk quirk, I would say.

00:31:07.490 --> 00:31:09.890
<v Speaker 1>It's basically when you're work you're you're constructing

00:31:09.890 --> 00:31:10.690
<v Speaker 1>a tree

00:31:11.330 --> 00:31:13.250
<v Speaker 1>in a way that you're doing that during

00:31:13.250 --> 00:31:15.410
<v Speaker 1>the initialization of the objects. And there's a

00:31:15.410 --> 00:31:17.730
<v Speaker 1>very power it's a very powerful idea, but

00:31:17.730 --> 00:31:19.810
<v Speaker 1>it it people sometimes it throws people

00:31:20.185 --> 00:31:21.784
<v Speaker 1>off a little bit,

00:31:22.665 --> 00:31:25.065
<v Speaker 1>because you're basically passing the parent as a

00:31:25.065 --> 00:31:27.544
<v Speaker 1>parameter to the constructor of the

00:31:27.705 --> 00:31:28.985
<v Speaker 1>of the child.

00:31:29.225 --> 00:31:30.825
<v Speaker 1>And this way and this is how you

00:31:30.825 --> 00:31:32.825
<v Speaker 1>basically bind the child to the parent.

00:31:35.240 --> 00:31:36.760
<v Speaker 1>I can talk probably

00:31:36.840 --> 00:31:39.080
<v Speaker 1>I could spend an hour just talking about

00:31:39.080 --> 00:31:40.600
<v Speaker 1>why we did it like that, but maybe

00:31:40.600 --> 00:31:42.760
<v Speaker 1>maybe we can do that later if

00:31:43.560 --> 00:31:45.640
<v Speaker 0>Yeah. I just wanna kinda It's an interesting

00:31:45.640 --> 00:31:46.760
<v Speaker 1>design decision.

00:31:47.640 --> 00:31:49.025
<v Speaker 0>Let Let me just make sure I understood

00:31:49.025 --> 00:31:51.265
<v Speaker 0>this right. So like an app then, like

00:31:51.265 --> 00:31:53.425
<v Speaker 0>for every repository I have that is doing

00:31:53.425 --> 00:31:55.265
<v Speaker 0>some sort of cdk8s deployment, I'm likely just

00:31:55.265 --> 00:31:56.785
<v Speaker 0>to have one app and it's there to

00:31:56.785 --> 00:31:58.544
<v Speaker 0>hold all of the charts that are created.

00:31:58.785 --> 00:32:00.065
<v Speaker 0>The charts themselves,

00:32:00.145 --> 00:32:02.540
<v Speaker 0>you mentioned something there that I wanna make

00:32:02.540 --> 00:32:04.380
<v Speaker 0>sure I I I definitely understood is that

00:32:04.380 --> 00:32:06.860
<v Speaker 0>a chart is one manifest. Now is that

00:32:06.860 --> 00:32:08.780
<v Speaker 0>just one YAML file that can contain multiple

00:32:08.780 --> 00:32:11.419
<v Speaker 0>Kubernetes objects, or would it correlate to one

00:32:11.419 --> 00:32:13.100
<v Speaker 0>to one with a Kubernetes object?

00:32:14.220 --> 00:32:16.575
<v Speaker 1>It's it's one YAML file. Basically, when you're

00:32:16.575 --> 00:32:18.735
<v Speaker 1>doing if you if you add another so

00:32:18.735 --> 00:32:21.295
<v Speaker 1>in your code, have one chart. Right? Let

00:32:21.375 --> 00:32:23.375
<v Speaker 1>if you let's let's play with this, and

00:32:23.375 --> 00:32:25.375
<v Speaker 1>and I'll show It's Okay. Why don't we

00:32:25.375 --> 00:32:26.655
<v Speaker 0>just yeah. That's a good idea. Why don't

00:32:26.655 --> 00:32:28.415
<v Speaker 0>we just come into this thing here Yeah.

00:32:28.415 --> 00:32:31.769
<v Speaker 0>And, like So it's Sorry. Go. Just

00:32:32.010 --> 00:32:33.770
<v Speaker 1>to to give you just to explain the

00:32:33.770 --> 00:32:35.289
<v Speaker 1>the the the

00:32:35.690 --> 00:32:37.929
<v Speaker 1>the mapping. Okay? So let's add another

00:32:38.330 --> 00:32:40.490
<v Speaker 1>on line 14. I can even I can

00:32:40.490 --> 00:32:42.825
<v Speaker 1>even do this. Right? Yeah. Yeah. Yeah. We

00:32:42.825 --> 00:32:45.065
<v Speaker 1>can let's add another one here. Okay? A

00:32:45.065 --> 00:32:46.424
<v Speaker 1>low one and a low two.

00:32:48.105 --> 00:32:49.384
<v Speaker 1>Okay? K.

00:32:49.785 --> 00:32:50.745
<v Speaker 1>And

00:32:50.745 --> 00:32:52.745
<v Speaker 1>so now if you call cdk synth, let's

00:32:52.745 --> 00:32:53.385
<v Speaker 1>see what happens.

00:33:01.330 --> 00:33:02.769
<v Speaker 1>You're in the right directory?

00:33:02.929 --> 00:33:03.250
<v Speaker 0>No.

00:33:11.475 --> 00:33:13.474
<v Speaker 1>Did we say wait.

00:33:13.715 --> 00:33:14.354
<v Speaker 1>Oh,

00:33:14.595 --> 00:33:17.075
<v Speaker 1>we since since the CDK

00:33:17.875 --> 00:33:19.475
<v Speaker 1>cdk8s.YAML

00:33:19.715 --> 00:33:21.154
<v Speaker 1>if you look at cdk8s.YAML,

00:33:21.154 --> 00:33:22.835
<v Speaker 1>it actually executes the node version,

00:33:24.110 --> 00:33:26.909
<v Speaker 1>not the TypeScript version. Not here. The

00:33:27.710 --> 00:33:29.710
<v Speaker 1>the yeah. CDK. Cdk8s. Yaml. Oh, yeah. Yeah.

00:33:29.710 --> 00:33:31.149
<v Speaker 0>Yeah. Alright. Okay. Yeah. The So what we

00:33:31.149 --> 00:33:32.830
<v Speaker 1>what what we need to do is we

00:33:32.830 --> 00:33:33.950
<v Speaker 1>need to actually run

00:33:34.269 --> 00:33:36.350
<v Speaker 1>compile the code. Right? Like, you we've changed

00:33:36.350 --> 00:33:38.190
<v Speaker 1>the TypeScript code, but it's actually running the

00:33:38.190 --> 00:33:38.990
<v Speaker 1>JavaScript code.

00:33:40.085 --> 00:33:42.485
<v Speaker 1>So you can either compile it explicitly, or

00:33:42.485 --> 00:33:44.165
<v Speaker 1>what I would recommend is run a watch

00:33:44.165 --> 00:33:45.125
<v Speaker 1>in the background.

00:33:45.685 --> 00:33:48.085
<v Speaker 1>So if you open another terminal window

00:33:49.045 --> 00:33:50.565
<v Speaker 1>yeah. You can do that in here and

00:33:50.565 --> 00:33:52.690
<v Speaker 1>then open another one and to use.

00:33:52.930 --> 00:33:56.370
<v Speaker 1>So that's continuously gonna compile your, your stuff.

00:33:58.930 --> 00:34:01.090
<v Speaker 1>Give it a second. I think it's probably

00:34:01.090 --> 00:34:02.610
<v Speaker 1>just Yeah. Still compiling.

00:34:04.375 --> 00:34:05.734
<v Speaker 1>Okay. Try now.

00:34:10.054 --> 00:34:11.815
<v Speaker 0>There we go. Two YAML files. We go.

00:34:11.815 --> 00:34:13.895
<v Speaker 1>So now we have two YAML files. Both

00:34:13.895 --> 00:34:15.574
<v Speaker 1>of them are gonna be empty. But then

00:34:15.574 --> 00:34:17.574
<v Speaker 1>if we we change our chart, you'll see

00:34:17.574 --> 00:34:19.255
<v Speaker 1>that these two YAML files will will have

00:34:19.255 --> 00:34:22.270
<v Speaker 1>the same output. And so let's, let's continue

00:34:22.270 --> 00:34:23.310
<v Speaker 1>like this and see how that

00:34:24.589 --> 00:34:26.510
<v Speaker 0>Okay. So why don't we add our first

00:34:26.510 --> 00:34:28.750
<v Speaker 0>resource in their chart? Like Yep. A very

00:34:28.750 --> 00:34:31.230
<v Speaker 0>standard thing on Kubernetes would just be to

00:34:31.230 --> 00:34:32.109
<v Speaker 0>add a deployment.

00:34:32.735 --> 00:34:34.175
<v Speaker 0>So I feel like, why don't we just

00:34:34.175 --> 00:34:36.495
<v Speaker 0>add a NGINX deployment and have that render

00:34:36.495 --> 00:34:38.335
<v Speaker 0>out, and then we'll see how much we

00:34:38.335 --> 00:34:40.255
<v Speaker 0>can kinda tweak and and modify that as

00:34:40.255 --> 00:34:40.895
<v Speaker 0>we need.

00:34:41.295 --> 00:34:42.655
<v Speaker 1>Okay. Sounds good.

00:34:43.935 --> 00:34:47.695
<v Speaker 1>So as we saw earlier, cdk8s.yaml

00:34:47.695 --> 00:34:48.735
<v Speaker 1>imported

00:34:48.980 --> 00:34:50.980
<v Speaker 1>the core Kubernetes API

00:34:51.139 --> 00:34:53.540
<v Speaker 1>by just saying k eight s. Mhmm.

00:34:54.339 --> 00:34:56.500
<v Speaker 1>We can do that manually if we wanted.

00:34:56.500 --> 00:34:58.819
<v Speaker 1>We can do that by changing the the

00:34:58.819 --> 00:35:01.140
<v Speaker 1>YAML file, but kinda like when we're initializing

00:35:01.140 --> 00:35:03.575
<v Speaker 1>a new app, it kinda comes in with

00:35:03.575 --> 00:35:04.535
<v Speaker 1>an imported

00:35:04.535 --> 00:35:06.295
<v Speaker 1>core Kubernetes API.

00:35:06.855 --> 00:35:10.135
<v Speaker 1>And the importer import imported,

00:35:10.454 --> 00:35:11.255
<v Speaker 1>constructs

00:35:11.255 --> 00:35:13.095
<v Speaker 1>are gonna be under the imports directory. So

00:35:13.095 --> 00:35:14.214
<v Speaker 1>if you see you see that there's an

00:35:14.214 --> 00:35:16.055
<v Speaker 1>imports directory over there? Yep.

00:35:16.740 --> 00:35:18.340
<v Speaker 1>There you go. So you see there's a

00:35:18.340 --> 00:35:19.940
<v Speaker 1>k a s dot t s file.

00:35:20.820 --> 00:35:22.820
<v Speaker 1>If you go to that Oh, go to

00:35:22.820 --> 00:35:24.100
<v Speaker 0>it. Okay. I was just gonna wait a

00:35:24.100 --> 00:35:26.820
<v Speaker 1>minute. To show you, like, going on inside.

00:35:26.820 --> 00:35:28.420
<v Speaker 1>So you see this is generated

00:35:28.500 --> 00:35:30.100
<v Speaker 1>by k by cdk8s,

00:35:30.505 --> 00:35:32.505
<v Speaker 1>and it's a it's a big file. It

00:35:32.505 --> 00:35:34.985
<v Speaker 1>contains all the core Kubernetes resources

00:35:35.545 --> 00:35:37.785
<v Speaker 1>as classes, as constructs.

00:35:37.785 --> 00:35:39.545
<v Speaker 0>Yep. And so now if you go to

00:35:39.545 --> 00:35:40.985
<v Speaker 1>the main file, we can

00:35:41.305 --> 00:35:43.705
<v Speaker 1>we can try and use the deployment one.

00:35:43.705 --> 00:35:45.940
<v Speaker 1>So let's do import. Go ahead. One of

00:35:45.940 --> 00:35:47.940
<v Speaker 0>my favorite things about using TypeScript is that

00:35:47.940 --> 00:35:48.740
<v Speaker 0>generally

00:35:49.380 --> 00:35:52.580
<v Speaker 0>thing because the the language server stuff is

00:35:52.580 --> 00:35:55.220
<v Speaker 0>also good is that you can generally work

00:35:55.220 --> 00:35:57.140
<v Speaker 0>my way through it without actually knowing what

00:35:57.140 --> 00:35:58.260
<v Speaker 0>the hell I'm doing. So I'm gonna see

00:35:58.260 --> 00:36:00.660
<v Speaker 0>if that works here. Okay. Do it. I'm

00:36:00.660 --> 00:36:01.775
<v Speaker 1>not gonna say anything.

00:36:02.975 --> 00:36:04.735
<v Speaker 0>So if I just say deployment

00:36:04.815 --> 00:36:06.415
<v Speaker 0>Hold on. Now I'm gonna start typing go

00:36:06.415 --> 00:36:07.855
<v Speaker 0>and rust and a whole bunch of other

00:36:07.855 --> 00:36:10.255
<v Speaker 0>languages like I always do. But if we

00:36:10.255 --> 00:36:11.295
<v Speaker 0>do kits

00:36:12.175 --> 00:36:13.455
<v Speaker 0>and then deployment

00:36:13.615 --> 00:36:14.975
<v Speaker 0>oh, kube deployment

00:36:15.055 --> 00:36:16.415
<v Speaker 0>and there we've got scope.

00:36:17.910 --> 00:36:19.510
<v Speaker 0>And we're gonna assume that's a string. In

00:36:19.510 --> 00:36:20.710
<v Speaker 0>fact, no, it's a construct.

00:36:22.230 --> 00:36:23.670
<v Speaker 0>Yeah. I'll come back to that. Let's just

00:36:23.670 --> 00:36:25.510
<v Speaker 0>do that for now. And then an ID

00:36:25.589 --> 00:36:27.670
<v Speaker 0>and then props, which I'm assuming Yeah. There

00:36:27.670 --> 00:36:27.990
<v Speaker 0>we go.

00:36:30.085 --> 00:36:31.285
<v Speaker 0>I'll give it a name.

00:36:31.525 --> 00:36:34.005
<v Speaker 0>Call it engine x. I've got my spec.

00:36:34.565 --> 00:36:35.685
<v Speaker 0>And I think this is one of the

00:36:35.845 --> 00:36:37.925
<v Speaker 0>you don't get this with DSLs.

00:36:37.925 --> 00:36:39.525
<v Speaker 0>Right? You don't get this

00:36:39.925 --> 00:36:40.965
<v Speaker 0>autocomplete

00:36:41.205 --> 00:36:43.365
<v Speaker 0>greatness. At least not built in.

00:36:45.089 --> 00:36:47.890
<v Speaker 0>Yeah. Exactly. Alright. Container. You should also you

00:36:47.890 --> 00:36:48.450
<v Speaker 1>should also

00:36:49.089 --> 00:36:49.570
<v Speaker 1>a little

00:36:50.049 --> 00:36:52.530
<v Speaker 1>pro tip with the Versus Code.

00:36:53.809 --> 00:36:57.970
<v Speaker 1>If you'd showed the the the completion list

00:36:57.970 --> 00:36:59.250
<v Speaker 1>list before you

00:37:00.234 --> 00:37:02.315
<v Speaker 1>just show the just, like, hover over on

00:37:02.315 --> 00:37:03.355
<v Speaker 1>one of the options.

00:37:05.435 --> 00:37:06.635
<v Speaker 1>Yeah? Mhmm.

00:37:07.515 --> 00:37:09.595
<v Speaker 1>So no. Actually, what I meant is that

00:37:09.595 --> 00:37:11.115
<v Speaker 1>if you let's

00:37:10.875 --> 00:37:11.275
<v Speaker 1>yeah.

00:37:11.994 --> 00:37:13.675
<v Speaker 1>Here. Exactly. There's a little,

00:37:14.474 --> 00:37:14.714
<v Speaker 1>scroll.

00:37:15.480 --> 00:37:17.560
<v Speaker 1>Stand on one of the put put your

00:37:17.560 --> 00:37:19.080
<v Speaker 1>mouse on one of the there's a little

00:37:19.080 --> 00:37:19.800
<v Speaker 1>icon.

00:37:19.960 --> 00:37:21.160
<v Speaker 1>Click click here.

00:37:21.720 --> 00:37:22.680
<v Speaker 1>Click here.

00:37:22.920 --> 00:37:25.000
<v Speaker 1>There you go. So now you're gonna see

00:37:25.000 --> 00:37:26.760
<v Speaker 1>if you if you if you,

00:37:27.160 --> 00:37:28.120
<v Speaker 1>hit butt

00:37:28.600 --> 00:37:29.400
<v Speaker 1>bottom and up.

00:37:31.505 --> 00:37:33.505
<v Speaker 1>If you just, like, scroll around, you'll see

00:37:33.505 --> 00:37:35.585
<v Speaker 1>all the documentation. Yeah. There you go. That's

00:37:35.585 --> 00:37:37.425
<v Speaker 1>what I'm it was very hard for me

00:37:37.425 --> 00:37:38.305
<v Speaker 1>to explain.

00:37:39.665 --> 00:37:41.425
<v Speaker 1>But, basically, you get, like, the full documentation

00:37:41.665 --> 00:37:42.945
<v Speaker 1>API documentation here.

00:37:43.760 --> 00:37:46.800
<v Speaker 0>Nice. Okay. Yeah. That's really good tip, actually.

00:37:46.800 --> 00:37:48.800
<v Speaker 0>I I had no idea about that. That's

00:37:48.800 --> 00:37:50.160
<v Speaker 0>cool. Let's see if I can use that

00:37:50.160 --> 00:37:51.839
<v Speaker 0>to work out what a construct does then.

00:37:51.839 --> 00:37:52.320
<v Speaker 0>So

00:37:54.640 --> 00:37:56.400
<v Speaker 0>there is a way to get the parameter

00:37:56.400 --> 00:37:58.815
<v Speaker 0>thing, but I can't remember. Yeah. You you

00:37:58.815 --> 00:38:01.135
<v Speaker 1>can hover over the cube. Yeah. Exactly.

00:38:01.535 --> 00:38:03.695
<v Speaker 0>Okay. So we we have this class called

00:38:03.695 --> 00:38:04.575
<v Speaker 0>construct.

00:38:04.575 --> 00:38:06.575
<v Speaker 0>I don't know if I'm supposed to do

00:38:06.734 --> 00:38:07.855
<v Speaker 0>this. No?

00:38:08.494 --> 00:38:10.335
<v Speaker 0>Alright. Okay. I'll I'll let you get me.

00:38:10.335 --> 00:38:12.655
<v Speaker 0>What what's the construct? Yeah. This is this

00:38:12.655 --> 00:38:14.710
<v Speaker 1>is in this is exactly what I said

00:38:14.710 --> 00:38:16.950
<v Speaker 1>earlier about this quirky idiom.

00:38:18.070 --> 00:38:20.070
<v Speaker 1>You always pass in this

00:38:20.230 --> 00:38:23.830
<v Speaker 1>for scope. Oh. Not scope. This. This. This

00:38:23.830 --> 00:38:25.910
<v Speaker 1>is basically how the tree is structured. Right?

00:38:25.910 --> 00:38:28.070
<v Speaker 1>You basically say, I wanna define this cube

00:38:28.070 --> 00:38:28.550
<v Speaker 1>deployment

00:38:29.075 --> 00:38:31.475
<v Speaker 1>in the scope of my chart,

00:38:32.115 --> 00:38:34.435
<v Speaker 1>right, as part of my chart. So it's

00:38:34.435 --> 00:38:36.755
<v Speaker 1>always this higher there's a there's a kind

00:38:36.755 --> 00:38:38.195
<v Speaker 1>of, like, this relation

00:38:38.675 --> 00:38:39.475
<v Speaker 1>between

00:38:39.555 --> 00:38:40.195
<v Speaker 1>your,

00:38:40.755 --> 00:38:43.235
<v Speaker 1>AST or your code, your the structure of

00:38:43.235 --> 00:38:45.640
<v Speaker 1>your code, and the structure of your construct

00:38:45.640 --> 00:38:48.120
<v Speaker 1>tree. And the way we we capture this

00:38:48.120 --> 00:38:49.000
<v Speaker 1>is by

00:38:49.560 --> 00:38:52.280
<v Speaker 1>asking you to say which scope and in

00:38:52.280 --> 00:38:54.600
<v Speaker 1>which scope you're defining every construct. So that's

00:38:54.600 --> 00:38:58.120
<v Speaker 1>the so, basically, the rule of thumb, just

00:38:57.545 --> 00:38:58.665
<v Speaker 1>always this.

00:38:59.145 --> 00:39:00.745
<v Speaker 0>Always this. Got it.

00:39:01.145 --> 00:39:03.385
<v Speaker 0>Alright. So I'm gonna just sorry. I need

00:39:03.385 --> 00:39:03.865
<v Speaker 0>to go.

00:39:04.265 --> 00:39:05.785
<v Speaker 1>Yeah. No. And then the second,

00:39:06.345 --> 00:39:08.585
<v Speaker 1>the second parameter is an ID,

00:39:08.745 --> 00:39:10.105
<v Speaker 1>and that's actually an interesting

00:39:10.345 --> 00:39:12.940
<v Speaker 1>there's an interesting point about it. Because the

00:39:12.940 --> 00:39:13.660
<v Speaker 1>name

00:39:13.900 --> 00:39:15.420
<v Speaker 1>if you look if you hover over the

00:39:15.420 --> 00:39:17.420
<v Speaker 1>metadata name field,

00:39:19.980 --> 00:39:21.740
<v Speaker 1>scroll up a little bit, you see that

00:39:21.740 --> 00:39:22.620
<v Speaker 1>it's optional.

00:39:24.380 --> 00:39:27.175
<v Speaker 1>And that's actually almost the most important the

00:39:27.175 --> 00:39:29.815
<v Speaker 1>single most important difference between

00:39:29.815 --> 00:39:33.335
<v Speaker 1>writing manifest by hand and using cdk8s.

00:39:34.375 --> 00:39:36.775
<v Speaker 1>You should not specify names

00:39:36.775 --> 00:39:37.735
<v Speaker 1>explicitly.

00:39:38.055 --> 00:39:41.175
<v Speaker 1>And the reason this is important is because

00:39:40.910 --> 00:39:41.950
<v Speaker 1>these names

00:39:42.190 --> 00:39:42.910
<v Speaker 1>are

00:39:45.310 --> 00:39:46.670
<v Speaker 1>these these automatically

00:39:46.670 --> 00:39:49.470
<v Speaker 1>generated names are the only way for cdk8s

00:39:49.470 --> 00:39:51.710
<v Speaker 1>to allow you to compose constructs together.

00:39:52.670 --> 00:39:54.670
<v Speaker 1>Right? If you give it an explicit name

00:39:54.670 --> 00:39:56.910
<v Speaker 1>and I add two instances of this construct

00:39:56.745 --> 00:39:58.265
<v Speaker 1>into the same Kubernetes

00:39:58.265 --> 00:40:00.665
<v Speaker 1>cluster, then they conflict with each other. Right?

00:40:00.665 --> 00:40:02.585
<v Speaker 1>Like, it's it's a very common problem.

00:40:03.305 --> 00:40:06.185
<v Speaker 1>And cdk8 solves this by by creating

00:40:06.185 --> 00:40:08.585
<v Speaker 1>relative naming. So the the ID that you

00:40:08.585 --> 00:40:10.985
<v Speaker 1>give a construct is relative to the scope

00:40:10.985 --> 00:40:12.760
<v Speaker 1>in which you define it. And so if

00:40:12.760 --> 00:40:14.840
<v Speaker 1>you define a subscope and you can still

00:40:14.840 --> 00:40:16.280
<v Speaker 1>call something NGINX,

00:40:16.440 --> 00:40:17.880
<v Speaker 1>but then the actual,

00:40:18.200 --> 00:40:21.960
<v Speaker 1>Kubernetes resource name would derive from the path

00:40:22.200 --> 00:40:25.240
<v Speaker 1>of that resource in in the construct tree.

00:40:25.240 --> 00:40:26.440
<v Speaker 1>So it's a very powerful

00:40:26.975 --> 00:40:29.215
<v Speaker 1>mechanism and probably one of the most important

00:40:29.215 --> 00:40:30.015
<v Speaker 1>pieces

00:40:30.255 --> 00:40:31.775
<v Speaker 1>to enable composition.

00:40:32.815 --> 00:40:34.575
<v Speaker 0>Okay. That makes make sense? It does make

00:40:34.575 --> 00:40:36.895
<v Speaker 0>a lot of sense. Yeah. Okay. So I'm

00:40:36.895 --> 00:40:39.535
<v Speaker 0>assuming I can still pass in my namespace,

00:40:39.535 --> 00:40:40.815
<v Speaker 0>though, as normal.

00:40:41.215 --> 00:40:42.970
<v Speaker 1>Yep. You can pass in namespace. You can

00:40:42.970 --> 00:40:45.450
<v Speaker 1>even specify namespace at the chart level,

00:40:45.610 --> 00:40:47.610
<v Speaker 1>and then all the resources will get the

00:40:47.770 --> 00:40:49.770
<v Speaker 1>will be in that in that namespace. You

00:40:49.770 --> 00:40:51.290
<v Speaker 1>can even I think you can even specify

00:40:51.290 --> 00:40:52.970
<v Speaker 1>namespace at the app level,

00:40:53.530 --> 00:40:55.610
<v Speaker 1>and then all the resources in the entire

00:40:55.610 --> 00:40:56.890
<v Speaker 1>app will get the same namespace.

00:40:57.785 --> 00:41:01.385
<v Speaker 0>Awesome. I like that. Okay. Now another awesome

00:41:01.385 --> 00:41:04.025
<v Speaker 0>thing about us using TypeScript and real program

00:41:04.025 --> 00:41:05.385
<v Speaker 0>languages here is that we can see this

00:41:05.385 --> 00:41:06.345
<v Speaker 0>red squiggle.

00:41:06.665 --> 00:41:08.345
<v Speaker 0>It's telling me that my manifest doesn't have

00:41:08.345 --> 00:41:10.345
<v Speaker 0>all the required fields, and it's complaining about

00:41:10.345 --> 00:41:13.680
<v Speaker 0>the selector here under the template spec. So

00:41:16.240 --> 00:41:17.040
<v Speaker 0>here.

00:41:19.839 --> 00:41:22.320
<v Speaker 0>Oh, no. It's here. Here. Yeah.

00:41:23.119 --> 00:41:24.800
<v Speaker 0>I swear I've done Kubernetes before.

00:41:25.884 --> 00:41:29.085
<v Speaker 0>And this wants a Kubernetes label slider, which

00:41:29.085 --> 00:41:30.204
<v Speaker 0>seems to be its own

00:41:30.444 --> 00:41:32.365
<v Speaker 0>type. So I'm just gonna do that and

00:41:32.365 --> 00:41:34.684
<v Speaker 0>rely on auto complete again. And then I

00:41:34.684 --> 00:41:36.125
<v Speaker 0>can do match labels.

00:41:36.765 --> 00:41:38.525
<v Speaker 0>In fact, that's probably a list, isn't it?

00:41:40.490 --> 00:41:41.530
<v Speaker 0>Of objects.

00:41:41.530 --> 00:41:43.609
<v Speaker 0>No. No. I think match label is a

00:41:43.609 --> 00:41:45.850
<v Speaker 1>is an array is a is a map.

00:41:46.170 --> 00:41:47.770
<v Speaker 0>It's just a map that I can put

00:41:47.770 --> 00:41:49.210
<v Speaker 0>anything in. So I'm assuming I can Yeah.

00:41:49.210 --> 00:41:51.849
<v Speaker 1>Just put whatever. App engine. App. Yeah.

00:41:52.985 --> 00:41:55.785
<v Speaker 0>And now what we have here is, almost

00:41:55.785 --> 00:41:57.145
<v Speaker 0>working deployment.

00:41:57.785 --> 00:41:59.065
<v Speaker 0>We'll just do engineering.

00:41:59.865 --> 00:42:02.345
<v Speaker 1>And I can also need to label the

00:42:02.585 --> 00:42:04.505
<v Speaker 1>the in the template, right, to add a

00:42:04.505 --> 00:42:05.225
<v Speaker 1>metadata

00:42:05.785 --> 00:42:06.905
<v Speaker 1>section in the templates.

00:42:09.880 --> 00:42:12.840
<v Speaker 1>Not yeah. Yeah. Exactly. Labels.

00:42:13.560 --> 00:42:15.800
<v Speaker 0>Yeah. Those those are stuff. That's always bugging

00:42:15.800 --> 00:42:17.960
<v Speaker 0>about Kubernetes, to be fair. I feel like

00:42:18.440 --> 00:42:20.120
<v Speaker 0>you should only need to define that once,

00:42:20.120 --> 00:42:21.800
<v Speaker 0>and we're forced to define the the same

00:42:21.800 --> 00:42:24.845
<v Speaker 0>redundant options twice. But Well, wait until we

00:42:24.845 --> 00:42:26.125
<v Speaker 1>get to cdk8s

00:42:26.125 --> 00:42:26.765
<v Speaker 1>plus.

00:42:27.405 --> 00:42:28.605
<v Speaker 0>But

00:42:31.405 --> 00:42:33.724
<v Speaker 1>even without cdk8s plus, we can already do

00:42:33.724 --> 00:42:35.565
<v Speaker 1>some some incredible

00:42:35.565 --> 00:42:38.365
<v Speaker 1>optima you know, some some magical thing. Let

00:42:38.365 --> 00:42:39.165
<v Speaker 1>me let me

00:42:39.620 --> 00:42:41.460
<v Speaker 1>drive for a second, if you don't mind.

00:42:41.460 --> 00:42:42.340
<v Speaker 0>Yeah. Go first.

00:42:45.780 --> 00:42:47.380
<v Speaker 1>It's called a constant.

00:42:49.780 --> 00:42:51.140
<v Speaker 1>It was invented in, like,

00:42:55.345 --> 00:42:57.025
<v Speaker 1>fifty years ago, probably.

00:42:58.785 --> 00:43:00.865
<v Speaker 0>Yeah. Oh, yeah. So yeah. We can we

00:43:00.865 --> 00:43:01.984
<v Speaker 0>can refactor

00:43:01.984 --> 00:43:04.865
<v Speaker 0>those duplications out to new variables,

00:43:04.865 --> 00:43:06.839
<v Speaker 0>drop them in. In fact,

00:43:07.559 --> 00:43:08.119
<v Speaker 0>I've

00:43:08.760 --> 00:43:10.760
<v Speaker 0>been using Pulumi to do stuff similar like

00:43:10.760 --> 00:43:12.279
<v Speaker 0>this for a long time. And there's some

00:43:12.279 --> 00:43:14.760
<v Speaker 0>weird quacks using Pulumi and it's like Terraforma

00:43:14.760 --> 00:43:16.440
<v Speaker 0>has state. I don't don't actually want that.

00:43:16.440 --> 00:43:17.560
<v Speaker 0>I just want the YAML.

00:43:17.960 --> 00:43:19.240
<v Speaker 0>But one of the things that I do

00:43:19.240 --> 00:43:21.425
<v Speaker 0>there is that because again, this is real

00:43:21.425 --> 00:43:22.625
<v Speaker 0>programming language.

00:43:23.425 --> 00:43:25.185
<v Speaker 0>Because I can just grab this.

00:43:25.745 --> 00:43:28.545
<v Speaker 0>Unless I'm assuming this is maybe what cdk8s

00:43:28.545 --> 00:43:29.665
<v Speaker 0>plus is doing.

00:43:30.465 --> 00:43:32.145
<v Speaker 0>But I could just drop this in as

00:43:32.145 --> 00:43:32.865
<v Speaker 0>a function. Right?

00:43:33.660 --> 00:43:35.020
<v Speaker 0>Mhmm. Create You could

00:43:35.660 --> 00:43:36.780
<v Speaker 0>nginx

00:43:37.500 --> 00:43:38.620
<v Speaker 0>equals

00:43:41.500 --> 00:43:42.140
<v Speaker 0>that.

00:43:42.380 --> 00:43:44.140
<v Speaker 0>Although I've lost this, so I will need

00:43:44.140 --> 00:43:45.500
<v Speaker 0>parameters. So I guess I need to pass

00:43:45.500 --> 00:43:46.059
<v Speaker 0>in scope.

00:43:50.055 --> 00:43:51.575
<v Speaker 1>Yeah. So you you can define it as

00:43:51.575 --> 00:43:53.015
<v Speaker 1>a function, or you can define it as

00:43:53.015 --> 00:43:55.255
<v Speaker 1>a as a as a construct, as a

00:43:55.255 --> 00:43:56.535
<v Speaker 1>custom construct

00:43:56.935 --> 00:43:57.895
<v Speaker 1>Yeah. Which is

00:43:58.809 --> 00:44:00.890
<v Speaker 1>again, as I said, there's a the it's

00:44:00.890 --> 00:44:02.730
<v Speaker 1>it's a it's a type of a function.

00:44:02.730 --> 00:44:04.410
<v Speaker 1>Right? It's an object oriented

00:44:05.690 --> 00:44:06.570
<v Speaker 1>function.

00:44:06.970 --> 00:44:08.329
<v Speaker 0>Alright. I just want some of the types.

00:44:08.329 --> 00:44:10.089
<v Speaker 0>I'm I'm gonna revert this. I I do

00:44:10.089 --> 00:44:12.425
<v Speaker 0>love the fact that I I have this

00:44:12.425 --> 00:44:15.065
<v Speaker 0>flexibility to kind of layer on my own

00:44:15.065 --> 00:44:16.665
<v Speaker 0>helper functions to my team. Like, if I

00:44:16.665 --> 00:44:17.625
<v Speaker 0>wanted to provide

00:44:18.105 --> 00:44:20.585
<v Speaker 0>a really simple not simple, but, you know,

00:44:20.585 --> 00:44:24.119
<v Speaker 0>a complex head and simple interface to what

00:44:24.119 --> 00:44:26.920
<v Speaker 0>we expect Kubernetes applications to look like within

00:44:26.920 --> 00:44:29.799
<v Speaker 0>our organization. Like, this just opens up so

00:44:29.799 --> 00:44:31.560
<v Speaker 0>many different new possibilities.

00:44:31.960 --> 00:44:33.240
<v Speaker 0>But let's push us back.

00:44:36.135 --> 00:44:37.975
<v Speaker 0>Okay. So we should be able to synthesize

00:44:37.975 --> 00:44:39.655
<v Speaker 0>this. Right? And we will get

00:44:40.615 --> 00:44:43.575
<v Speaker 0>there's a there's a good point. There's something

00:44:43.655 --> 00:44:45.495
<v Speaker 0>there's a disconnect in my head right now.

00:44:45.495 --> 00:44:46.935
<v Speaker 0>All we're doing is to find the two

00:44:46.935 --> 00:44:48.535
<v Speaker 0>constant values on a constructor.

00:44:49.380 --> 00:44:51.220
<v Speaker 0>Is that all we have to do? Is

00:44:51.220 --> 00:44:52.579
<v Speaker 0>that do we need to connect these up

00:44:52.579 --> 00:44:53.300
<v Speaker 0>somehow?

00:44:55.619 --> 00:44:56.260
<v Speaker 1>Two?

00:44:57.220 --> 00:44:59.940
<v Speaker 0>Well, because this constructor is creating two variables

00:44:59.940 --> 00:45:02.980
<v Speaker 0>that aren't stored on this. They're not properties

00:45:02.980 --> 00:45:06.180
<v Speaker 1>of the chart. So that's that's that's

00:45:05.355 --> 00:45:06.475
<v Speaker 1>going back to

00:45:06.875 --> 00:45:09.355
<v Speaker 1>this quirkiness that I talked about earlier. The

00:45:09.355 --> 00:45:11.835
<v Speaker 1>fact that you've created this instance and

00:45:12.234 --> 00:45:13.115
<v Speaker 1>passed in

00:45:13.355 --> 00:45:15.435
<v Speaker 1>the same scope, and as I said, this

00:45:15.435 --> 00:45:16.315
<v Speaker 1>needs to be this,

00:45:18.320 --> 00:45:20.800
<v Speaker 1>it would it would bind it to the

00:45:20.800 --> 00:45:22.720
<v Speaker 1>tree. Right? Right. And so you really don't

00:45:22.720 --> 00:45:24.800
<v Speaker 1>need you really don't need this. Right? Like,

00:45:24.800 --> 00:45:26.000
<v Speaker 1>you can really do this.

00:45:27.200 --> 00:45:29.440
<v Speaker 1>And I know it looks a little odd

00:45:29.440 --> 00:45:31.280
<v Speaker 1>to some people, but you get used to

00:45:31.280 --> 00:45:33.995
<v Speaker 1>it very quickly. It's it basically the CDK

00:45:33.995 --> 00:45:35.195
<v Speaker 1>programming model

00:45:35.755 --> 00:45:37.835
<v Speaker 1>that's based on this construct tree. So you

00:45:37.835 --> 00:45:39.435
<v Speaker 1>say new Kubernetes

00:45:39.675 --> 00:45:40.635
<v Speaker 1>deployment

00:45:41.035 --> 00:45:43.275
<v Speaker 1>inside this scope, and that's all that's all

00:45:43.275 --> 00:45:43.915
<v Speaker 1>you need.

00:45:44.315 --> 00:45:45.835
<v Speaker 0>Okay. Yep. So the fact that we are

00:45:45.835 --> 00:45:49.120
<v Speaker 0>passing through this, the the output Exactly. Instance

00:45:49.120 --> 00:45:51.280
<v Speaker 0>of this doesn't really matter because it's bound

00:45:51.280 --> 00:45:53.680
<v Speaker 0>to the tree. Yep. And it would matter

00:45:53.680 --> 00:45:55.280
<v Speaker 1>if you wanna bind it to other things.

00:45:55.280 --> 00:45:57.440
<v Speaker 1>Right? Like, you could take an output, there's

00:45:57.440 --> 00:45:59.760
<v Speaker 1>an actually API behind it, and we can

00:46:00.375 --> 00:46:03.095
<v Speaker 1>check it out later. But for this use

00:46:03.095 --> 00:46:04.695
<v Speaker 1>case, you really don't need anything.

00:46:05.335 --> 00:46:08.135
<v Speaker 0>Okay. So I'm gonna I'm assuming our watch

00:46:08.135 --> 00:46:10.455
<v Speaker 0>is still running. I'm gonna synthesize this.

00:46:11.015 --> 00:46:12.855
<v Speaker 0>And what we I guess, I'm expecting to

00:46:12.855 --> 00:46:14.319
<v Speaker 0>see is that we're gonna have two deployments

00:46:14.319 --> 00:46:16.400
<v Speaker 0>with NGINX as a base name and something

00:46:16.400 --> 00:46:18.480
<v Speaker 0>tacked on the end possibly.

00:46:20.640 --> 00:46:21.920
<v Speaker 0>Yeah. There we go.

00:46:23.920 --> 00:46:25.280
<v Speaker 0>So this is our

00:46:26.160 --> 00:46:26.880
<v Speaker 0>chart name,

00:46:27.954 --> 00:46:30.115
<v Speaker 0>the ID for the deployment,

00:46:30.194 --> 00:46:32.355
<v Speaker 0>and a random identifier,

00:46:32.355 --> 00:46:34.434
<v Speaker 0>if that's correct. It's not it's not random.

00:46:34.434 --> 00:46:36.355
<v Speaker 1>It's a hash, basically, of the path.

00:46:37.075 --> 00:46:39.555
<v Speaker 1>Right? So it basically cons it's basically rendering

00:46:39.555 --> 00:46:41.155
<v Speaker 1>the name by concatenating

00:46:41.155 --> 00:46:41.715
<v Speaker 1>the

00:46:42.194 --> 00:46:45.160
<v Speaker 1>the components of the path and and,

00:46:45.400 --> 00:46:47.800
<v Speaker 1>adding a suffix that's the the hash.

00:46:48.040 --> 00:46:50.360
<v Speaker 1>Because if it's it it needs to trim

00:46:50.360 --> 00:46:52.360
<v Speaker 1>the size. Right? Like, there's a limit in

00:46:52.360 --> 00:46:54.360
<v Speaker 1>the size. It needs to trim the size.

00:46:54.360 --> 00:46:56.200
<v Speaker 1>It needs it it uses this hash as

00:46:56.200 --> 00:46:57.240
<v Speaker 1>the unique fire.

00:46:57.605 --> 00:46:59.845
<v Speaker 0>Yeah. Of of course, it's a hash now

00:46:59.845 --> 00:47:01.285
<v Speaker 0>that I think about it because it was

00:47:01.285 --> 00:47:02.885
<v Speaker 0>like, if I run this again in my

00:47:02.885 --> 00:47:05.365
<v Speaker 0>continuous integration system, if there's no changes, I

00:47:05.365 --> 00:47:07.204
<v Speaker 0>don't want to be rolling out a Exactly.

00:47:07.204 --> 00:47:10.244
<v Speaker 0>Different name. Alright. Exactly. Now I'm gonna go

00:47:10.244 --> 00:47:12.770
<v Speaker 0>out on a limb here and just throw

00:47:12.770 --> 00:47:14.370
<v Speaker 0>something out there. But

00:47:14.930 --> 00:47:17.410
<v Speaker 0>I'm assuming that cdk8s plus doesn't really want

00:47:17.410 --> 00:47:19.730
<v Speaker 0>me to interact with cube deployments in this

00:47:19.730 --> 00:47:21.890
<v Speaker 0>kind of fashion. In fact, I'm gonna kick

00:47:21.890 --> 00:47:23.410
<v Speaker 0>a wild guess

00:47:23.730 --> 00:47:25.410
<v Speaker 0>and assume that if I want to deploy

00:47:25.410 --> 00:47:27.410
<v Speaker 0>NGINX with a service,

00:47:27.410 --> 00:47:29.755
<v Speaker 0>there's there's probably something to make that easy

00:47:29.755 --> 00:47:31.515
<v Speaker 0>in cdk8s plus. Did you wanna walk us

00:47:31.515 --> 00:47:32.075
<v Speaker 1>through Yeah.

00:47:32.955 --> 00:47:34.555
<v Speaker 1>Let's try to do that. That's a that'll

00:47:34.555 --> 00:47:36.235
<v Speaker 1>be a good way to check that out.

00:47:36.315 --> 00:47:38.475
<v Speaker 0>But I'm just gonna now instead of yeah.

00:47:38.715 --> 00:47:40.075
<v Speaker 0>Delete all this? Yeah? Or you're gonna say

00:47:40.075 --> 00:47:42.599
<v Speaker 0>something else? No. No. No. That's exactly what

00:47:42.599 --> 00:47:43.960
<v Speaker 1>I wanted you to do.

00:47:45.480 --> 00:47:48.359
<v Speaker 1>Instead of importing, k eight s, let's, let

00:47:48.359 --> 00:47:50.039
<v Speaker 1>me let me Yeah. Go for it. Drive

00:47:50.039 --> 00:47:51.640
<v Speaker 1>for a second. Okay? If you don't mind.

00:47:52.279 --> 00:47:52.680
<v Speaker 1>So

00:47:56.225 --> 00:47:58.625
<v Speaker 1>so now let's import k plus.

00:47:59.985 --> 00:48:00.625
<v Speaker 1>And

00:48:01.425 --> 00:48:02.145
<v Speaker 1>here,

00:48:04.305 --> 00:48:05.825
<v Speaker 1>I

00:48:06.385 --> 00:48:10.385
<v Speaker 1>think I I can see the

00:48:09.740 --> 00:48:11.820
<v Speaker 1>you so now you type from this point.

00:48:11.820 --> 00:48:14.700
<v Speaker 1>So now do do a new k plus.

00:48:15.020 --> 00:48:15.820
<v Speaker 0>Yep.

00:48:15.820 --> 00:48:18.460
<v Speaker 0>New k plus. K plus dot

00:48:18.700 --> 00:48:20.220
<v Speaker 1>okay. So here we have

00:48:21.005 --> 00:48:22.045
<v Speaker 1>deployment.

00:48:24.205 --> 00:48:25.005
<v Speaker 1>K.

00:48:25.965 --> 00:48:28.365
<v Speaker 1>This looks familiar. Right? Yeah. It does.

00:48:28.925 --> 00:48:30.845
<v Speaker 1>Now if you open the props, this looks

00:48:30.845 --> 00:48:33.640
<v Speaker 1>now different. Right? This this is this is

00:48:33.640 --> 00:48:36.360
<v Speaker 1>what we call an intent based API. It's

00:48:36.360 --> 00:48:38.280
<v Speaker 1>a high level higher level API

00:48:38.520 --> 00:48:41.080
<v Speaker 1>for Kubernetes deployments. It's not opinionated

00:48:41.080 --> 00:48:41.640
<v Speaker 1>about

00:48:42.520 --> 00:48:45.160
<v Speaker 1>how you use deployments. It's opinionated about the

00:48:45.160 --> 00:48:47.160
<v Speaker 1>API. Right? Like, basically leverages

00:48:47.160 --> 00:48:48.360
<v Speaker 1>the object oriented

00:48:48.655 --> 00:48:50.095
<v Speaker 1>API capabilities.

00:48:50.095 --> 00:48:52.335
<v Speaker 1>And so in this case, just do containers.

00:48:54.655 --> 00:48:57.215
<v Speaker 1>Right? And then it's an array.

00:49:01.359 --> 00:49:03.520
<v Speaker 1>And then each one basically

00:49:03.599 --> 00:49:06.080
<v Speaker 1>only requires an image because

00:49:06.960 --> 00:49:08.720
<v Speaker 1>we can probably give you a a reason

00:49:08.880 --> 00:49:10.960
<v Speaker 1>a reasonable name, and that's it.

00:49:11.280 --> 00:49:12.800
<v Speaker 1>Now let's, synthesize this.

00:49:21.335 --> 00:49:22.535
<v Speaker 0>Why? Up here.

00:49:26.295 --> 00:49:27.895
<v Speaker 1>So you see that it's it was it

00:49:27.895 --> 00:49:30.270
<v Speaker 1>actually it it actually did some cool things

00:49:30.270 --> 00:49:31.550
<v Speaker 1>for you. For example,

00:49:31.950 --> 00:49:34.830
<v Speaker 1>it created a label that matches the, you

00:49:34.830 --> 00:49:36.590
<v Speaker 1>know, this the the pod

00:49:36.670 --> 00:49:37.630
<v Speaker 1>template

00:49:37.630 --> 00:49:40.510
<v Speaker 1>with the selector of the deployment.

00:49:40.910 --> 00:49:43.790
<v Speaker 1>It also added some defaults to image pull

00:49:43.790 --> 00:49:44.590
<v Speaker 1>policy. It

00:49:45.315 --> 00:49:48.035
<v Speaker 1>gave a default for for a name, and

00:49:48.035 --> 00:49:49.955
<v Speaker 1>then all the rest is it it specified

00:49:49.955 --> 00:49:51.155
<v Speaker 1>a replica

00:49:51.155 --> 00:49:52.435
<v Speaker 1>for you, which is

00:49:52.835 --> 00:49:54.915
<v Speaker 1>one. Obviously, you can change all of those

00:49:54.915 --> 00:49:56.675
<v Speaker 1>things. But now let's let's add this,

00:49:57.474 --> 00:50:00.050
<v Speaker 1>let's add let's a service. Right?

00:50:00.290 --> 00:50:01.890
<v Speaker 1>So let's

00:50:01.890 --> 00:50:03.490
<v Speaker 1>do this like this

00:50:06.610 --> 00:50:08.850
<v Speaker 1>and see the API and explore the API

00:50:08.850 --> 00:50:11.490
<v Speaker 1>of deployment. So type deployment

00:50:11.490 --> 00:50:12.210
<v Speaker 1>and dot.

00:50:15.165 --> 00:50:16.925
<v Speaker 1>Okay. This looks interesting.

00:50:17.485 --> 00:50:19.725
<v Speaker 1>Yeah. And there's a method called

00:50:20.365 --> 00:50:20.845
<v Speaker 1>expose.

00:50:28.890 --> 00:50:31.130
<v Speaker 1>That's it. Let's just use the default and

00:50:31.130 --> 00:50:32.090
<v Speaker 1>see what happens.

00:50:33.690 --> 00:50:35.290
<v Speaker 1>And this is kind of like a design

00:50:35.290 --> 00:50:37.609
<v Speaker 1>principle we have at the higher level. You

00:50:37.609 --> 00:50:39.369
<v Speaker 1>know, the k plus is basically

00:50:40.775 --> 00:50:42.535
<v Speaker 1>minimum minimum required

00:50:43.095 --> 00:50:45.655
<v Speaker 1>fields and options and properties. Right? Like, be

00:50:45.655 --> 00:50:47.335
<v Speaker 1>very we're very eager

00:50:47.495 --> 00:50:50.295
<v Speaker 1>to to come up with correct,

00:50:50.295 --> 00:50:51.015
<v Speaker 1>safe,

00:50:51.975 --> 00:50:53.015
<v Speaker 1>sensible defaults.

00:50:55.510 --> 00:50:56.790
<v Speaker 0>Look at that.

00:50:58.710 --> 00:51:00.950
<v Speaker 0>We get a cluster IP service exposed in

00:51:00.950 --> 00:51:01.830
<v Speaker 0>port 80.

00:51:04.790 --> 00:51:05.590
<v Speaker 0>That's

00:51:05.990 --> 00:51:08.230
<v Speaker 0>I think the ergonomics here and the developer

00:51:08.230 --> 00:51:09.350
<v Speaker 0>experience is,

00:51:10.115 --> 00:51:11.954
<v Speaker 0>you know, just what people would expect. Right?

00:51:11.954 --> 00:51:13.635
<v Speaker 0>They want these tools to help them

00:51:14.515 --> 00:51:15.795
<v Speaker 0>very little friction.

00:51:16.035 --> 00:51:17.714
<v Speaker 0>I think what I also I'm gonna take

00:51:17.714 --> 00:51:19.395
<v Speaker 0>another stab in the dark here because, you

00:51:19.395 --> 00:51:22.035
<v Speaker 0>know Yeah. That was fun. Is that this

00:51:22.035 --> 00:51:23.155
<v Speaker 0>looked like it was like some sort of

00:51:23.155 --> 00:51:25.840
<v Speaker 0>builder pattern. So in theory, can I just

00:51:25.840 --> 00:51:27.520
<v Speaker 0>chain all these together?

00:51:29.040 --> 00:51:31.760
<v Speaker 1>We're actually it's not really a builder pattern

00:51:31.760 --> 00:51:34.320
<v Speaker 1>because Expose is not returning a deployment.

00:51:35.760 --> 00:51:39.085
<v Speaker 1>We deliberately try to avoid builders mostly because

00:51:39.085 --> 00:51:41.245
<v Speaker 1>they're not very familiar to every

00:51:41.565 --> 00:51:44.365
<v Speaker 1>programming language. So sometimes they feel very odd

00:51:44.365 --> 00:51:45.725
<v Speaker 1>in certain languages.

00:51:46.205 --> 00:51:48.285
<v Speaker 1>And so, like, as a design principle, we

00:51:48.285 --> 00:51:49.085
<v Speaker 1>try to avoid them.

00:51:50.940 --> 00:51:52.700
<v Speaker 1>So, yeah, you could do expose if you

00:51:52.700 --> 00:51:54.619
<v Speaker 1>don't wanna do anything else. Right? Like, it's

00:51:54.619 --> 00:51:56.380
<v Speaker 1>definitely it would definitely work,

00:51:56.780 --> 00:51:58.940
<v Speaker 1>but this is this is normally how I

00:51:58.940 --> 00:52:00.940
<v Speaker 1>would write it. Right? Yeah. So keep it's

00:52:00.940 --> 00:52:04.060
<v Speaker 0>actually returning the the service itself. Right.

00:52:04.060 --> 00:52:05.980
<v Speaker 1>Exactly. So expose returns the service, and then

00:52:05.980 --> 00:52:07.785
<v Speaker 1>you can do something with the service. Right?

00:52:07.785 --> 00:52:08.665
<v Speaker 1>You can

00:52:09.065 --> 00:52:09.865
<v Speaker 1>explore

00:52:09.865 --> 00:52:11.945
<v Speaker 1>the API of the service if you want.

00:52:12.825 --> 00:52:13.385
<v Speaker 0>Cool.

00:52:15.545 --> 00:52:15.865
<v Speaker 0>So

00:52:17.305 --> 00:52:19.550
<v Speaker 0>and just let you I mean, besides the

00:52:19.550 --> 00:52:20.350
<v Speaker 0>boilerplate,

00:52:20.350 --> 00:52:22.990
<v Speaker 0>we're, what, four four lines of TypeScript there

00:52:22.990 --> 00:52:25.070
<v Speaker 0>and we're managing to generate our engine x

00:52:25.070 --> 00:52:27.470
<v Speaker 0>deployment with a service, synthesize it, and that

00:52:27.470 --> 00:52:29.630
<v Speaker 0>could quite easily be deployed to your cluster

00:52:29.630 --> 00:52:30.270
<v Speaker 0>and

00:52:30.430 --> 00:52:32.430
<v Speaker 0>jobs done. Right? We're we're moving on to

00:52:32.655 --> 00:52:34.655
<v Speaker 0>solving real world problems on our domain and

00:52:34.655 --> 00:52:37.535
<v Speaker 0>not focusing too much on this. Yeah. Right.

00:52:37.535 --> 00:52:40.575
<v Speaker 0>Yeah. Yeah. That's the idea of this higher

00:52:40.575 --> 00:52:41.775
<v Speaker 1>level API.

00:52:41.775 --> 00:52:43.375
<v Speaker 1>And, again, people can choose to use it

00:52:43.375 --> 00:52:44.415
<v Speaker 1>or not, but

00:52:45.295 --> 00:52:47.615
<v Speaker 1>we're we're working on this higher level API.

00:52:47.615 --> 00:52:49.840
<v Speaker 1>It still doesn't cover the entire surface area

00:52:49.840 --> 00:52:51.680
<v Speaker 1>of the core Kubernetes API,

00:52:52.960 --> 00:52:56.160
<v Speaker 1>but I think we have the right patterns

00:52:56.960 --> 00:52:59.120
<v Speaker 1>thought out. And so now it's basically

00:52:59.680 --> 00:53:01.680
<v Speaker 1>our job is to basically just, like, continue

00:53:01.680 --> 00:53:02.160
<v Speaker 1>to cover.

00:53:03.055 --> 00:53:04.255
<v Speaker 0>Okay.

00:53:04.335 --> 00:53:05.135
<v Speaker 0>There's

00:53:05.135 --> 00:53:06.975
<v Speaker 0>two there's one thing in my head right

00:53:06.975 --> 00:53:09.375
<v Speaker 0>now that I'm a little confused about. So

00:53:09.375 --> 00:53:11.535
<v Speaker 0>hopefully, we can kind of expand on that.

00:53:11.535 --> 00:53:12.015
<v Speaker 0>So

00:53:13.375 --> 00:53:15.935
<v Speaker 0>when we use k

00:53:14.940 --> 00:53:15.820
<v Speaker 0>plus,

00:53:15.900 --> 00:53:17.100
<v Speaker 0>we're importing

00:53:17.500 --> 00:53:18.940
<v Speaker 0>the library.

00:53:19.660 --> 00:53:23.020
<v Speaker 0>However, for the Kubernetes objects, they're actually generated

00:53:23.020 --> 00:53:25.819
<v Speaker 0>at an imports folder. Why why are the

00:53:25.980 --> 00:53:27.980
<v Speaker 0>why is the core Kubernetes API not delivered

00:53:27.980 --> 00:53:29.660
<v Speaker 0>as a package as well?

00:53:32.755 --> 00:53:34.595
<v Speaker 1>Mostly because we don't need to deliver it

00:53:34.595 --> 00:53:37.315
<v Speaker 1>as a package. Right? And because we wanna

00:53:37.315 --> 00:53:38.915
<v Speaker 1>give you full flexibility

00:53:38.915 --> 00:53:39.555
<v Speaker 1>into,

00:53:40.035 --> 00:53:42.915
<v Speaker 1>deciding which language to you sorry, which version

00:53:42.915 --> 00:53:43.395
<v Speaker 1>to use.

00:53:45.100 --> 00:53:47.660
<v Speaker 1>And k plus is handwritten. Right? Like, this

00:53:47.820 --> 00:53:50.859
<v Speaker 1>we have we we are handwriting

00:53:50.859 --> 00:53:52.859
<v Speaker 1>these these these classes,

00:53:52.859 --> 00:53:53.900
<v Speaker 1>and we're thinking

00:53:54.460 --> 00:53:57.180
<v Speaker 1>really hard about the, you know, the the

00:53:57.180 --> 00:53:58.859
<v Speaker 1>heavy lifting that we can do at that

00:53:58.859 --> 00:54:01.225
<v Speaker 1>layer. And so in that sense, we can't

00:54:01.225 --> 00:54:02.265
<v Speaker 1>generate that.

00:54:03.145 --> 00:54:05.705
<v Speaker 1>And that's why cdk8s plus says cdk8s plus

00:54:05.705 --> 00:54:09.145
<v Speaker 1>17 because it basically it's compatible with 17

00:54:09.145 --> 00:54:10.585
<v Speaker 1>plus, right, for

00:54:10.905 --> 00:54:12.985
<v Speaker 1>version 1.17

00:54:13.130 --> 00:54:14.090
<v Speaker 1>and above.

00:54:14.890 --> 00:54:16.330
<v Speaker 1>And that but we will need to write

00:54:16.330 --> 00:54:18.970
<v Speaker 1>one for eighteen and nineteen and twenty. And

00:54:18.970 --> 00:54:23.130
<v Speaker 1>and, obviously, because we're using standard programming languages,

00:54:23.130 --> 00:54:25.130
<v Speaker 1>we can reuse a lot of stuff that

00:54:25.130 --> 00:54:27.690
<v Speaker 1>we did in '17 for stable resources and

00:54:27.690 --> 00:54:28.330
<v Speaker 1>add the new.

00:54:29.345 --> 00:54:31.345
<v Speaker 1>It's not that we really need to rewrite

00:54:31.345 --> 00:54:33.184
<v Speaker 1>the whole thing for every language version of

00:54:33.184 --> 00:54:35.265
<v Speaker 1>the of of the Kubernetes API,

00:54:35.904 --> 00:54:38.065
<v Speaker 1>but it's it's it's a it's a hand

00:54:38.704 --> 00:54:40.545
<v Speaker 1>you know, it's a it's a manual process

00:54:40.545 --> 00:54:42.224
<v Speaker 1>as opposed to the imports,

00:54:42.620 --> 00:54:44.700
<v Speaker 1>which is completely automatic, and every new version

00:54:44.700 --> 00:54:47.340
<v Speaker 1>of Kubernetes would automatically be supported. You don't

00:54:47.340 --> 00:54:49.100
<v Speaker 1>need to you don't need to do anything.

00:54:49.660 --> 00:54:51.260
<v Speaker 1>And maybe that's a good leeway to, like,

00:54:51.420 --> 00:54:53.660
<v Speaker 1>maybe looking at the CRD support. That could

00:54:53.660 --> 00:54:56.205
<v Speaker 1>be fun, fun thing to I was just

00:54:56.205 --> 00:54:57.805
<v Speaker 0>thinking that myself. I was like, why don't

00:54:57.805 --> 00:55:00.365
<v Speaker 0>we grab a custom resource and see how

00:55:00.365 --> 00:55:02.525
<v Speaker 0>we can bring that into this kind of

00:55:02.525 --> 00:55:03.565
<v Speaker 0>of workflow?

00:55:04.125 --> 00:55:04.845
<v Speaker 1>Cool.

00:55:05.325 --> 00:55:07.565
<v Speaker 0>Alright. So Do you have any particular one

00:55:07.565 --> 00:55:10.070
<v Speaker 1>that you're interested in? Well, I I do

00:55:10.070 --> 00:55:11.510
<v Speaker 0>a lot of work on the cluster API

00:55:11.510 --> 00:55:14.630
<v Speaker 0>project. So why don't we import their types?

00:55:15.430 --> 00:55:16.150
<v Speaker 1>Okay.

00:55:18.390 --> 00:55:20.870
<v Speaker 0>So they should have a release artifact here

00:55:20.870 --> 00:55:22.630
<v Speaker 0>with the YAML components.

00:55:23.110 --> 00:55:24.715
<v Speaker 0>So did I just download this YAML to

00:55:24.715 --> 00:55:25.994
<v Speaker 0>be able to import it? Can I throw

00:55:25.994 --> 00:55:27.675
<v Speaker 0>a URL at it? What what You could

00:55:27.675 --> 00:55:29.355
<v Speaker 1>throw a URL. K.

00:55:30.155 --> 00:55:32.395
<v Speaker 0>So what do we want? We want the

00:55:32.715 --> 00:55:35.675
<v Speaker 0>core component. Just a second. My battery's almost

00:55:35.675 --> 00:55:35.994
<v Speaker 1>stopped.

00:55:36.510 --> 00:55:37.630
<v Speaker 1>Oh. Please.

00:55:41.310 --> 00:55:42.350
<v Speaker 1>Is that better?

00:55:43.150 --> 00:55:44.670
<v Speaker 1>Yep. Sorry.

00:55:44.830 --> 00:55:46.590
<v Speaker 0>Does this stop yelling at you now?

00:55:48.750 --> 00:55:51.470
<v Speaker 0>Okay. So let's see. CDK import.

00:55:56.964 --> 00:55:57.765
<v Speaker 0>Nice.

00:55:57.765 --> 00:55:59.605
<v Speaker 0>The support stocks dot c r d dot

00:55:59.605 --> 00:56:00.165
<v Speaker 0>dev.

00:56:00.724 --> 00:56:01.605
<v Speaker 1>Yeah.

00:56:01.605 --> 00:56:04.005
<v Speaker 1>That's a that's a contribution from Crossplane,

00:56:04.410 --> 00:56:05.450
<v Speaker 1>which is awesome.

00:56:06.410 --> 00:56:07.289
<v Speaker 0>Yeah.

00:56:07.289 --> 00:56:10.250
<v Speaker 0>Dan from Upbound slash Crossplane is I know

00:56:10.250 --> 00:56:11.369
<v Speaker 0>he's been very

00:56:11.930 --> 00:56:13.930
<v Speaker 0>publicly working on the docs there, do that

00:56:13.930 --> 00:56:15.530
<v Speaker 0>dev stuff. So a great job that he's

00:56:15.530 --> 00:56:16.410
<v Speaker 0>doing there, definitely.

00:56:18.125 --> 00:56:18.765
<v Speaker 0>So

00:56:19.005 --> 00:56:20.925
<v Speaker 0>types to import and then

00:56:21.325 --> 00:56:23.005
<v Speaker 1>And then URL. Yeah.

00:56:25.805 --> 00:56:27.085
<v Speaker 0>Alright. Nice.

00:56:27.325 --> 00:56:29.965
<v Speaker 0>It's imported our add ons, CRDs,

00:56:30.525 --> 00:56:32.285
<v Speaker 0>and our clusters and our machine.

00:56:33.380 --> 00:56:34.820
<v Speaker 1>Yeah. And if you look at the imports

00:56:34.820 --> 00:56:36.180
<v Speaker 1>directory, you'll see

00:56:36.580 --> 00:56:37.780
<v Speaker 1>the results,

00:56:37.780 --> 00:56:38.260
<v Speaker 1>basically.

00:56:40.740 --> 00:56:41.380
<v Speaker 0>Yeah.

00:56:43.060 --> 00:56:43.860
<v Speaker 0>Awesome.

00:56:45.380 --> 00:56:47.700
<v Speaker 1>So now let's do you wanna try and

00:56:47.700 --> 00:56:48.820
<v Speaker 1>use one of those resources?

00:56:50.234 --> 00:56:52.155
<v Speaker 0>No? No. Okay. Okay.

00:56:55.914 --> 00:56:56.875
<v Speaker 0>So oh,

00:56:57.595 --> 00:56:58.234
<v Speaker 0>from

00:56:58.474 --> 00:56:59.595
<v Speaker 0>import.

00:57:01.275 --> 00:57:03.115
<v Speaker 0>Let's try and do

00:57:04.970 --> 00:57:06.330
<v Speaker 0>the cluster thing,

00:57:10.010 --> 00:57:10.650
<v Speaker 0>cluster.

00:57:11.369 --> 00:57:14.170
<v Speaker 0>Okay, so we have access to the cluster

00:57:14.170 --> 00:57:15.849
<v Speaker 0>API cluster resource,

00:57:15.849 --> 00:57:19.130
<v Speaker 0>so I should be able to do

00:57:18.015 --> 00:57:19.375
<v Speaker 0>new cluster

00:57:22.494 --> 00:57:23.695
<v Speaker 0>scope, of course,

00:57:24.654 --> 00:57:25.855
<v Speaker 0>my cluster,

00:57:29.535 --> 00:57:30.255
<v Speaker 0>the spec.

00:57:33.550 --> 00:57:35.550
<v Speaker 0>I wish I had picked that easier example

00:57:35.550 --> 00:57:39.230
<v Speaker 0>now because composing a cluster. That's

00:57:39.230 --> 00:57:40.670
<v Speaker 1>a pretty ambitious

00:57:42.670 --> 00:57:43.230
<v Speaker 0>Yeah.

00:57:44.349 --> 00:57:46.030
<v Speaker 0>It doesn't really matter. But I think you

00:57:46.030 --> 00:57:47.755
<v Speaker 1>I think you I think you can

00:57:48.075 --> 00:57:49.995
<v Speaker 1>I think you see what Yeah? What what

00:57:49.995 --> 00:57:50.955
<v Speaker 0>I wanted to see how

00:57:51.435 --> 00:57:53.435
<v Speaker 0>easy that was. And I think the answer

00:57:53.435 --> 00:57:56.075
<v Speaker 0>was stupidly easy. Like, literally

00:57:56.635 --> 00:57:57.995
<v Speaker 0>just cdk8s import,

00:57:58.410 --> 00:58:00.170
<v Speaker 0>point it to you, you know, a GitHub

00:58:00.170 --> 00:58:01.609
<v Speaker 0>URL with YAML,

00:58:01.770 --> 00:58:04.250
<v Speaker 0>and now I can begin to compose

00:58:04.410 --> 00:58:06.090
<v Speaker 0>these types. Like, that is

00:58:06.410 --> 00:58:08.490
<v Speaker 0>that's really cool. And, of course, I I

00:58:08.490 --> 00:58:09.050
<v Speaker 0>I

00:58:09.450 --> 00:58:12.224
<v Speaker 0>could spend the next twenty minutes adding infrastructure,

00:58:12.224 --> 00:58:14.065
<v Speaker 0>machine pools, machine deployments,

00:58:14.224 --> 00:58:16.625
<v Speaker 1>and Yeah. But I I don't think that's

00:58:16.704 --> 00:58:17.664
<v Speaker 0>particularly

00:58:17.664 --> 00:58:20.145
<v Speaker 0>useful to the audience. But that is really,

00:58:20.145 --> 00:58:20.865
<v Speaker 0>really simple.

00:58:21.184 --> 00:58:22.865
<v Speaker 0>I didn't actually expect that to take us

00:58:22.865 --> 00:58:23.424
<v Speaker 0>thirty seconds.

00:58:25.760 --> 00:58:26.960
<v Speaker 1>Glad to hear.

00:58:28.400 --> 00:58:29.440
<v Speaker 0>Okay. So

00:58:30.560 --> 00:58:33.440
<v Speaker 0>that, I'm assuming, just works for all custom

00:58:33.440 --> 00:58:34.320
<v Speaker 0>resources.

00:58:34.320 --> 00:58:36.320
<v Speaker 0>I'm assuming they have to have

00:58:37.125 --> 00:58:39.045
<v Speaker 0>no. Because we didn't even look at the

00:58:39.045 --> 00:58:40.725
<v Speaker 0>open API spec. So

00:58:41.925 --> 00:58:44.805
<v Speaker 0>oh, that's all embedded. The CRD includes it.

00:58:44.805 --> 00:58:45.845
<v Speaker 0>Yeah. Okay.

00:58:46.085 --> 00:58:48.805
<v Speaker 1>If the CRD doesn't include the schema for

00:58:48.805 --> 00:58:50.885
<v Speaker 1>the API, it'll basically be kind of like

00:58:50.885 --> 00:58:52.725
<v Speaker 1>an any you know, like a an open

00:58:52.725 --> 00:58:53.125
<v Speaker 1>map,

00:58:53.550 --> 00:58:55.470
<v Speaker 1>which is nice, but it's definitely

00:58:56.430 --> 00:58:59.150
<v Speaker 1>not as nice as having full, you know

00:58:59.870 --> 00:59:00.910
<v Speaker 0>Okay. Yeah. So completion.

00:59:01.230 --> 00:59:03.390
<v Speaker 0>As they don't provide the open API schema,

00:59:03.390 --> 00:59:04.910
<v Speaker 0>you can still work with it with it,

00:59:04.910 --> 00:59:06.885
<v Speaker 0>but it's just not gonna be as kind

00:59:06.885 --> 00:59:08.645
<v Speaker 0>of Tight. Fluid as yeah. Tight as you

00:59:08.645 --> 00:59:10.245
<v Speaker 0>would expect it. Like, you know,

00:59:11.125 --> 00:59:12.965
<v Speaker 0>there'll be dragons. You have to worry about

00:59:12.965 --> 00:59:13.765
<v Speaker 0>your own

00:59:14.405 --> 00:59:17.205
<v Speaker 0>fields as possible. Okay. Exactly.

00:59:17.925 --> 00:59:18.725
<v Speaker 0>Okay.

00:59:19.285 --> 00:59:20.165
<v Speaker 0>That was

00:59:20.645 --> 00:59:21.205
<v Speaker 0>very easy.

00:59:22.010 --> 00:59:24.490
<v Speaker 0>Is there anything else on cdk8s that you

00:59:24.490 --> 00:59:26.810
<v Speaker 0>wanna take a look at before we kinda

00:59:26.810 --> 00:59:28.490
<v Speaker 0>wrap up for today? Is there anything we've

00:59:28.490 --> 00:59:30.170
<v Speaker 0>missed that you think is particularly cool to

00:59:30.170 --> 00:59:30.810
<v Speaker 0>show off?

00:59:32.170 --> 00:59:34.890
<v Speaker 1>Maybe let me go let's let's go back

00:59:34.890 --> 00:59:36.575
<v Speaker 1>to the code just for a minute. I'll

00:59:36.575 --> 00:59:38.255
<v Speaker 1>I'll show you how to create a custom

00:59:38.255 --> 00:59:40.494
<v Speaker 1>construct because I feel like, that's a very

00:59:40.494 --> 00:59:42.255
<v Speaker 1>powerful tool that,

00:59:43.375 --> 00:59:45.295
<v Speaker 1>would be nice to, like, show

00:59:45.375 --> 00:59:47.295
<v Speaker 1>if you if you don't mind. No, please,

00:59:47.295 --> 00:59:47.935
<v Speaker 0>Naomi.

00:59:48.095 --> 00:59:50.655
<v Speaker 1>Okay. So I'm gonna delete this for a

00:59:50.655 --> 00:59:53.510
<v Speaker 1>second. And let's say, as you like you

00:59:53.510 --> 00:59:55.510
<v Speaker 1>said yeah. Like you did ex earlier, let's

00:59:55.510 --> 00:59:57.110
<v Speaker 1>say I wanna take these two,

00:59:58.070 --> 00:59:59.750
<v Speaker 1>you know, maybe add some more, but let's

00:59:59.750 --> 01:00:01.590
<v Speaker 1>just take these two and extract them into

01:00:01.590 --> 01:00:02.870
<v Speaker 1>a custom construct.

01:00:02.950 --> 01:00:03.590
<v Speaker 1>Okay?

01:00:03.830 --> 01:00:07.110
<v Speaker 1>So we'll call that construct

01:00:05.964 --> 01:00:06.925
<v Speaker 1>engine

01:00:08.525 --> 01:00:09.325
<v Speaker 1>x.

01:00:11.885 --> 01:00:15.244
<v Speaker 1>So, basically, defining custom construct is basically the

01:00:15.484 --> 01:00:18.045
<v Speaker 1>creating a class that extends construct.

01:00:18.525 --> 01:00:19.245
<v Speaker 1>And

01:00:19.645 --> 01:00:21.244
<v Speaker 1>from an API perspective,

01:00:21.244 --> 01:00:21.645
<v Speaker 1>it

01:00:22.210 --> 01:00:24.050
<v Speaker 1>should be compatible.

01:00:24.050 --> 01:00:26.130
<v Speaker 1>Right? So it's basically the way

01:00:26.370 --> 01:00:29.970
<v Speaker 1>NGINX props this is kinda like the standard

01:00:29.970 --> 01:00:31.250
<v Speaker 1>way of sorry.

01:00:33.090 --> 01:00:33.970
<v Speaker 1>And

01:00:34.434 --> 01:00:37.555
<v Speaker 1>we can define NGINX props here and get

01:00:37.555 --> 01:00:38.835
<v Speaker 1>empty for a second.

01:00:40.515 --> 01:00:42.194
<v Speaker 1>And then all I need to do is

01:00:42.194 --> 01:00:44.115
<v Speaker 1>basically just move these here.

01:00:45.075 --> 01:00:45.795
<v Speaker 1>Right?

01:00:45.954 --> 01:00:47.075
<v Speaker 1>And let's say,

01:00:48.035 --> 01:00:51.000
<v Speaker 1>I can add a property says port. Okay?

01:00:52.120 --> 01:00:53.720
<v Speaker 1>And I'll I'll just

01:00:54.600 --> 01:00:56.760
<v Speaker 1>document that the default is 80,

01:00:56.840 --> 01:00:58.680
<v Speaker 1>and then I can do here props dot

01:00:58.680 --> 01:00:59.480
<v Speaker 1>port

01:01:00.200 --> 01:01:02.040
<v Speaker 1>or 80, which is basically

01:01:02.985 --> 01:01:05.065
<v Speaker 1>and now let's say I want two NGINX

01:01:05.065 --> 01:01:06.665
<v Speaker 1>deployments, I can just do

01:01:07.385 --> 01:01:09.065
<v Speaker 1>this NGINX

01:01:09.065 --> 01:01:10.185
<v Speaker 1>80,

01:01:10.905 --> 01:01:13.145
<v Speaker 1>and this would be like this, and then

01:01:13.465 --> 01:01:14.265
<v Speaker 1>whatever.

01:01:14.265 --> 01:01:16.380
<v Speaker 1>Just make this up making this up.

01:01:21.660 --> 01:01:22.940
<v Speaker 1>Does that make sense?

01:01:23.180 --> 01:01:25.020
<v Speaker 0>Yes. Yeah. You can synthesize this and see

01:01:25.020 --> 01:01:26.619
<v Speaker 1>see the output, but

01:01:27.180 --> 01:01:29.339
<v Speaker 1>I think it's pretty evident, right, that it

01:01:29.339 --> 01:01:31.420
<v Speaker 1>will work because I didn't do anything special

01:01:31.420 --> 01:01:32.385
<v Speaker 1>here. It's just

01:01:32.865 --> 01:01:33.665
<v Speaker 1>programming.

01:01:33.665 --> 01:01:35.905
<v Speaker 1>Right? Yeah. So all you have to do

01:01:36.145 --> 01:01:38.145
<v Speaker 0>is create a new class that extends the

01:01:38.145 --> 01:01:38.945
<v Speaker 0>construct.

01:01:39.105 --> 01:01:41.025
<v Speaker 0>You can define your own properties that you

01:01:41.025 --> 01:01:43.265
<v Speaker 0>wanna accept just by adding an interface definition.

01:01:43.839 --> 01:01:46.000
<v Speaker 0>And then you just spec out what you

01:01:46.000 --> 01:01:48.640
<v Speaker 0>want, allowing the overrides wherever possible. And then

01:01:48.640 --> 01:01:51.920
<v Speaker 0>you provide this really nice API for your

01:01:51.920 --> 01:01:54.320
<v Speaker 0>team or the organization to just say, hey,

01:01:54.800 --> 01:01:56.160
<v Speaker 0>I wanna deploy a web app or I

01:01:56.160 --> 01:01:58.240
<v Speaker 0>wanna deploy Internet or I wanna deploy Exactly.

01:01:58.805 --> 01:02:00.325
<v Speaker 0>You know, a cron job to my customer

01:02:00.325 --> 01:02:02.245
<v Speaker 0>with certain constraints, etcetera. Like, all of that

01:02:02.405 --> 01:02:05.285
<v Speaker 1>Exactly. That everything that's doing upfront can be

01:02:05.925 --> 01:02:08.405
<v Speaker 1>Yeah. And and since these are just regular

01:02:08.405 --> 01:02:09.125
<v Speaker 1>classes,

01:02:10.165 --> 01:02:12.405
<v Speaker 1>then you can publish them as open source

01:02:12.405 --> 01:02:15.180
<v Speaker 1>libraries and share them with, you know, with

01:02:15.180 --> 01:02:16.940
<v Speaker 1>your team or with a company or or

01:02:16.940 --> 01:02:19.980
<v Speaker 1>publicly or right? Like, they're just classes. There's

01:02:19.980 --> 01:02:22.780
<v Speaker 1>nothing special about them in that sense. So

01:02:22.780 --> 01:02:24.300
<v Speaker 0>I guess that's very powerful.

01:02:25.020 --> 01:02:26.380
<v Speaker 0>Yeah. I guess this is getting into the

01:02:26.380 --> 01:02:28.825
<v Speaker 0>territory now. It's like, you know, I think

01:02:28.825 --> 01:02:30.665
<v Speaker 0>what we showed off at the start was

01:02:30.665 --> 01:02:31.225
<v Speaker 0>that

01:02:32.345 --> 01:02:35.225
<v Speaker 0>we can remove the YAML template. Like, you

01:02:35.225 --> 01:02:36.905
<v Speaker 0>know, we've all been using Helm for years,

01:02:36.905 --> 01:02:39.865
<v Speaker 0>would imagine. It's painful and quirky although it

01:02:39.865 --> 01:02:41.865
<v Speaker 0>is getting the job done. But, you know,

01:02:42.110 --> 01:02:44.270
<v Speaker 0>the problem is is these charts are trying

01:02:44.270 --> 01:02:46.510
<v Speaker 0>to encapsulate so many different optional components and

01:02:46.510 --> 01:02:48.750
<v Speaker 0>configuration that just isn't really meant to be

01:02:48.750 --> 01:02:50.110
<v Speaker 0>handled through Go templates

01:02:50.430 --> 01:02:51.390
<v Speaker 0>or YAML.

01:02:51.390 --> 01:02:52.830
<v Speaker 0>So we can bring that in house and

01:02:52.830 --> 01:02:54.590
<v Speaker 0>we can say, actually what we wanna be

01:02:54.590 --> 01:02:55.870
<v Speaker 0>able to do is provide all of these

01:02:55.870 --> 01:02:57.470
<v Speaker 0>classes that everyone can use

01:02:58.164 --> 01:02:58.964
<v Speaker 0>and

01:02:58.964 --> 01:03:01.045
<v Speaker 0>they could be shared. But then the second

01:03:01.045 --> 01:03:02.404
<v Speaker 0>thing in there that you're doing is the

01:03:02.404 --> 01:03:03.525
<v Speaker 0>same as Ashley,

01:03:03.605 --> 01:03:06.085
<v Speaker 0>you know, we can provide our own, like

01:03:06.085 --> 01:03:08.325
<v Speaker 0>elastics come out and say here is a

01:03:08.325 --> 01:03:10.644
<v Speaker 0>CDK definition for elastic search that can be

01:03:10.644 --> 01:03:12.404
<v Speaker 0>tweaked with all of these parameters by defining

01:03:12.404 --> 01:03:14.540
<v Speaker 0>a proper interface and just say go nuts.

01:03:14.540 --> 01:03:16.220
<v Speaker 0>This is how we think we should deploy

01:03:16.220 --> 01:03:18.619
<v Speaker 0>elastic search, and you can override whatever bit

01:03:18.619 --> 01:03:21.260
<v Speaker 0>you want with proper programming,

01:03:21.420 --> 01:03:23.420
<v Speaker 0>not crazy go templating. And I think that

01:03:23.420 --> 01:03:24.460
<v Speaker 0>is really powerful.

01:03:25.260 --> 01:03:28.060
<v Speaker 1>Yeah. One more point to make is that

01:03:28.060 --> 01:03:30.535
<v Speaker 1>you can also you can also just use

01:03:30.535 --> 01:03:33.255
<v Speaker 1>Helm charts in cdk8s constructs.

01:03:33.335 --> 01:03:35.095
<v Speaker 1>So if you do new Helm

01:03:35.655 --> 01:03:37.655
<v Speaker 1>let me just quickly do this.

01:03:42.660 --> 01:03:43.380
<v Speaker 1>Whatever.

01:03:43.700 --> 01:03:44.580
<v Speaker 1>Elastic.

01:03:46.500 --> 01:03:47.780
<v Speaker 1>And then if you

01:03:49.300 --> 01:03:50.900
<v Speaker 1>yeah. You need to import it. Let me

01:03:50.900 --> 01:03:53.380
<v Speaker 1>just import it here. There you go. Now

01:03:53.380 --> 01:03:55.619
<v Speaker 1>if you do code completion here, you'll see

01:03:55.619 --> 01:03:56.339
<v Speaker 1>the API.

01:03:58.075 --> 01:03:59.915
<v Speaker 1>Yep. So you can basically specify the chart

01:03:59.915 --> 01:04:02.235
<v Speaker 1>and the release and the values and whatever

01:04:02.235 --> 01:04:02.955
<v Speaker 1>you want.

01:04:03.755 --> 01:04:05.435
<v Speaker 1>And so that's a really nice way to

01:04:05.435 --> 01:04:07.595
<v Speaker 1>basically reuse Helm charts,

01:04:08.155 --> 01:04:10.395
<v Speaker 1>but you can wrap them in a custom

01:04:10.395 --> 01:04:13.115
<v Speaker 1>construct. So you can define an Elastic construct

01:04:13.510 --> 01:04:15.510
<v Speaker 1>that leverages the Helm

01:04:15.510 --> 01:04:17.190
<v Speaker 1>chart for Elasticsearch,

01:04:17.190 --> 01:04:17.910
<v Speaker 1>for example,

01:04:18.150 --> 01:04:20.470
<v Speaker 1>but offers a high level intent based API

01:04:20.470 --> 01:04:21.830
<v Speaker 1>and l two, right,

01:04:22.390 --> 01:04:23.270
<v Speaker 1>API.

01:04:24.870 --> 01:04:26.230
<v Speaker 1>So it's not necessarily that you need to

01:04:26.230 --> 01:04:28.525
<v Speaker 1>rewrite everything that you've done in Helm, for

01:04:28.525 --> 01:04:30.605
<v Speaker 1>example, if you wanna create these

01:04:30.925 --> 01:04:31.725
<v Speaker 1>ergonomics,

01:04:32.205 --> 01:04:34.525
<v Speaker 1>cdk ergonomics for them.

01:04:36.525 --> 01:04:38.845
<v Speaker 0>Yeah. I I'm assuming with the the presence

01:04:38.845 --> 01:04:39.885
<v Speaker 0>of this

01:04:39.840 --> 01:04:42.160
<v Speaker 0>executable parameter that it's first running a Helm

01:04:42.160 --> 01:04:44.560
<v Speaker 0>template locally on my machine and then consuming

01:04:44.560 --> 01:04:45.760
<v Speaker 0>those YAML files.

01:04:46.080 --> 01:04:49.440
<v Speaker 0>Does once I do the Helm template, can

01:04:49.440 --> 01:04:51.280
<v Speaker 0>I then modify that YAML or do I

01:04:51.280 --> 01:04:52.640
<v Speaker 0>just take that as is and that's just

01:04:52.640 --> 01:04:53.760
<v Speaker 0>the way the Helm stuff works?

01:04:55.785 --> 01:04:58.265
<v Speaker 1>Not sure I've understood the question. Yeah. So,

01:04:58.265 --> 01:04:59.545
<v Speaker 0>like, if I were to say, you know,

01:04:59.545 --> 01:05:02.585
<v Speaker 0>this is the elastic search chart. Oh. What's

01:05:02.585 --> 01:05:03.785
<v Speaker 0>the return on this? Is it

01:05:05.625 --> 01:05:06.665
<v Speaker 1>So cdk8s

01:05:06.665 --> 01:05:08.505
<v Speaker 1>has this concept of overrides,

01:05:09.530 --> 01:05:11.530
<v Speaker 1>which is a general concept.

01:05:11.690 --> 01:05:12.410
<v Speaker 1>Sorry.

01:05:12.650 --> 01:05:14.730
<v Speaker 1>We call it also escape patches.

01:05:14.970 --> 01:05:16.250
<v Speaker 1>You can go you can look at this

01:05:16.330 --> 01:05:18.490
<v Speaker 1>at the at the documentation. It's actually something

01:05:18.490 --> 01:05:21.130
<v Speaker 1>that, maybe documentation can help with. And the

01:05:21.130 --> 01:05:22.010
<v Speaker 1>concepts

01:05:23.895 --> 01:05:25.015
<v Speaker 1>escape patches.

01:05:27.255 --> 01:05:29.255
<v Speaker 1>And that's a general thing we add in

01:05:29.255 --> 01:05:31.575
<v Speaker 1>every CDK, but it basically allows you to

01:05:31.575 --> 01:05:32.375
<v Speaker 1>patch

01:05:32.695 --> 01:05:34.375
<v Speaker 1>the output via code.

01:05:35.100 --> 01:05:37.420
<v Speaker 1>And so to your question earlier, you can

01:05:37.420 --> 01:05:39.420
<v Speaker 1>add the Helm chart and then patch it

01:05:39.420 --> 01:05:41.340
<v Speaker 1>to your heart's extent,

01:05:41.900 --> 01:05:43.980
<v Speaker 1>and you can encapsulate all of that within

01:05:43.980 --> 01:05:46.540
<v Speaker 1>a construct. And so from a user's perspective,

01:05:46.540 --> 01:05:48.060
<v Speaker 1>they don't know what's going on. Right? Like,

01:05:48.060 --> 01:05:50.855
<v Speaker 1>it's basically just a construct that represents a

01:05:50.855 --> 01:05:51.655
<v Speaker 1>Elasticsearch

01:05:51.655 --> 01:05:53.415
<v Speaker 1>cluster or Redis, whatever.

01:05:54.375 --> 01:05:55.895
<v Speaker 1>And but you can literally

01:05:57.095 --> 01:05:59.175
<v Speaker 1>fully control the output if you need to

01:05:59.175 --> 01:06:00.695
<v Speaker 1>using JSON patching.

01:06:02.740 --> 01:06:04.340
<v Speaker 0>Yeah. Okay. Excellent.

01:06:04.820 --> 01:06:07.140
<v Speaker 0>So if you really, really need to, there's

01:06:07.140 --> 01:06:09.380
<v Speaker 0>always that way there to make any Exactly.

01:06:09.380 --> 01:06:11.380
<v Speaker 0>You have to. You can you can eject

01:06:11.380 --> 01:06:12.580
<v Speaker 1>yourself into

01:06:12.980 --> 01:06:14.180
<v Speaker 1>into YAML land,

01:06:15.425 --> 01:06:17.505
<v Speaker 1>But it's still a but it's still code.

01:06:17.505 --> 01:06:19.265
<v Speaker 1>Right? And it's still part of your code.

01:06:19.265 --> 01:06:20.705
<v Speaker 1>So I think it's even

01:06:22.305 --> 01:06:24.225
<v Speaker 1>you still have that safety, which is really

01:06:24.225 --> 01:06:25.985
<v Speaker 1>very, very important.

01:06:26.225 --> 01:06:27.025
<v Speaker 0>Yeah. Definitely.

01:06:28.660 --> 01:06:31.700
<v Speaker 0>Awesome. Very, very cool project. I I

01:06:32.180 --> 01:06:33.620
<v Speaker 0>but it's when I play with things like

01:06:33.620 --> 01:06:35.060
<v Speaker 0>this, I just I don't know

01:06:35.700 --> 01:06:38.020
<v Speaker 0>why we would default to other ways of

01:06:38.020 --> 01:06:39.940
<v Speaker 0>doing this. Like, I I think TypeScript is

01:06:39.940 --> 01:06:41.945
<v Speaker 0>such a great language for stuff like this

01:06:41.945 --> 01:06:44.985
<v Speaker 0>because of the strongly typed stuff, the good

01:06:44.985 --> 01:06:46.425
<v Speaker 0>language server support,

01:06:46.585 --> 01:06:47.065
<v Speaker 0>and

01:06:47.545 --> 01:06:49.465
<v Speaker 0>the ease of use, especially within the node

01:06:49.465 --> 01:06:52.425
<v Speaker 0>JS ecosystem for just wrapping things and functions

01:06:52.425 --> 01:06:54.345
<v Speaker 0>that take functions all the way down and

01:06:54.345 --> 01:06:56.105
<v Speaker 0>really providing abstractions

01:06:55.710 --> 01:06:57.470
<v Speaker 0>that are tailored to each unique team and

01:06:57.470 --> 01:06:58.270
<v Speaker 0>organization.

01:06:58.670 --> 01:07:00.910
<v Speaker 0>And so very, very cool. Very happy with

01:07:00.910 --> 01:07:01.310
<v Speaker 1>that.

01:07:02.190 --> 01:07:04.430
<v Speaker 1>Mhmm. Alright. Let's jump back. Yeah. We had

01:07:04.589 --> 01:07:07.070
<v Speaker 1>we we we have an sorry. And just

01:07:07.070 --> 01:07:07.950
<v Speaker 1>anecdotally,

01:07:07.950 --> 01:07:09.550
<v Speaker 1>we we have a lot of peep like,

01:07:09.550 --> 01:07:12.765
<v Speaker 1>we hear a lot from CDK users, AWS

01:07:12.765 --> 01:07:15.085
<v Speaker 1>CDK and CDK for Kubernetes,

01:07:15.245 --> 01:07:17.645
<v Speaker 1>that they've used types for the first time

01:07:17.645 --> 01:07:19.325
<v Speaker 1>because of the CDK,

01:07:19.645 --> 01:07:21.245
<v Speaker 1>and they fell in love with it.

01:07:21.725 --> 01:07:23.965
<v Speaker 1>So it's, I'm happy to hear. But, again,

01:07:23.965 --> 01:07:25.405
<v Speaker 1>a c d all those

01:07:26.390 --> 01:07:29.110
<v Speaker 1>all those tools are available in multiple

01:07:29.110 --> 01:07:30.950
<v Speaker 1>programming languages, and and,

01:07:31.430 --> 01:07:33.430
<v Speaker 1>we're really, really trying to make sure that

01:07:33.430 --> 01:07:35.590
<v Speaker 1>the experience in every programming language is as

01:07:35.590 --> 01:07:36.950
<v Speaker 1>good as as as we can.

01:07:37.750 --> 01:07:40.785
<v Speaker 1>It's not always the as it it's not

01:07:40.785 --> 01:07:42.385
<v Speaker 1>always as good as we want it to

01:07:42.385 --> 01:07:44.464
<v Speaker 1>be still, but then there's definitely room for

01:07:44.464 --> 01:07:45.265
<v Speaker 1>improvement. But,

01:07:46.945 --> 01:07:49.905
<v Speaker 1>it is we have, you know, big enterprise

01:07:49.905 --> 01:07:52.145
<v Speaker 1>customers who are using, you know, AWS CDK

01:07:52.145 --> 01:07:54.224
<v Speaker 1>in Python or in Java, and

01:07:55.550 --> 01:07:57.710
<v Speaker 1>it's it's all working very well. So it's

01:07:57.710 --> 01:07:58.270
<v Speaker 1>not

01:07:59.950 --> 01:08:01.630
<v Speaker 1>Yeah. I guess TypeScript.

01:08:02.510 --> 01:08:04.670
<v Speaker 0>You know, not to trivialize it in any

01:08:04.670 --> 01:08:06.670
<v Speaker 0>way, but, you know, all of this code

01:08:06.670 --> 01:08:08.110
<v Speaker 0>that we see in front of us regardless

01:08:08.110 --> 01:08:10.110
<v Speaker 0>of the language. I mean, you're really

01:08:10.545 --> 01:08:13.425
<v Speaker 0>we're building up a big data structure of

01:08:13.425 --> 01:08:15.585
<v Speaker 0>different types and parameters.

01:08:15.585 --> 01:08:16.784
<v Speaker 0>And then, you know,

01:08:17.265 --> 01:08:19.265
<v Speaker 0>being able to jump between languages and then

01:08:19.265 --> 01:08:20.624
<v Speaker 0>spit that out as YAML.

01:08:21.185 --> 01:08:21.824
<v Speaker 0>Again,

01:08:22.225 --> 01:08:24.625
<v Speaker 0>just so much power. So I can really

01:08:24.625 --> 01:08:27.010
<v Speaker 0>understand why teams are using Java all the

01:08:27.010 --> 01:08:28.450
<v Speaker 0>time would want to use Java. I can

01:08:28.450 --> 01:08:30.689
<v Speaker 0>understand Python and go because these are idiomatic

01:08:30.689 --> 01:08:33.090
<v Speaker 0>languages and infrastructures code and especially in the

01:08:33.090 --> 01:08:34.290
<v Speaker 0>cloud native ecosystem.

01:08:34.689 --> 01:08:37.250
<v Speaker 0>Yep. But, yeah. I I think I'm I'm

01:08:37.250 --> 01:08:39.305
<v Speaker 0>a TypeScript converter for this stuff now based

01:08:39.305 --> 01:08:41.545
<v Speaker 0>on based on, you know, my experience with

01:08:41.545 --> 01:08:44.024
<v Speaker 0>Pulumi and CDK. It's in CDK. Like, it

01:08:44.024 --> 01:08:46.425
<v Speaker 0>just it's a really good language for for

01:08:46.425 --> 01:08:48.745
<v Speaker 0>manipulating and working with with types in this

01:08:48.745 --> 01:08:50.185
<v Speaker 0>way. Mhmm.

01:08:50.825 --> 01:08:53.225
<v Speaker 1>I shoved a little link to this little

01:08:54.270 --> 01:08:56.590
<v Speaker 1>thing called we call construct catalog,

01:08:58.029 --> 01:08:58.670
<v Speaker 1>following

01:08:58.830 --> 01:09:00.430
<v Speaker 1>up on our earlier

01:09:00.430 --> 01:09:01.870
<v Speaker 1>conversation about,

01:09:02.109 --> 01:09:02.910
<v Speaker 1>publishing,

01:09:03.069 --> 01:09:04.189
<v Speaker 1>constructs.

01:09:04.430 --> 01:09:06.430
<v Speaker 1>And so if you search for cdk8s

01:09:06.430 --> 01:09:07.710
<v Speaker 1>in the search box,

01:09:10.215 --> 01:09:11.734
<v Speaker 1>you'll see that there are a bunch of

01:09:11.734 --> 01:09:14.135
<v Speaker 1>things that people already had already published

01:09:14.695 --> 01:09:16.854
<v Speaker 1>that could be interesting to, like, check out.

01:09:17.335 --> 01:09:19.655
<v Speaker 1>And this is basically kinda little prototype for

01:09:19.655 --> 01:09:22.695
<v Speaker 1>this for this catalog. We're we're we're we're

01:09:22.695 --> 01:09:25.479
<v Speaker 1>looking into, like, productizing it, so it's a

01:09:25.479 --> 01:09:27.639
<v Speaker 1>it's a little nicer. But it's a good

01:09:27.719 --> 01:09:29.239
<v Speaker 1>it it could gives you a sense of

01:09:29.239 --> 01:09:29.800
<v Speaker 1>some

01:09:30.120 --> 01:09:30.840
<v Speaker 1>initial,

01:09:32.760 --> 01:09:35.159
<v Speaker 1>you know, sparks of, like, in this initial

01:09:35.319 --> 01:09:37.479
<v Speaker 1>sparks of an ecosystem that's starting to build

01:09:37.479 --> 01:09:37.960
<v Speaker 1>around this.

01:09:38.774 --> 01:09:40.215
<v Speaker 0>That's very cool as well.

01:09:40.614 --> 01:09:42.774
<v Speaker 0>I'm pretty sure I mean, I've I'm supposed

01:09:42.774 --> 01:09:44.614
<v Speaker 0>to be recording my cube talk cube con

01:09:44.614 --> 01:09:47.335
<v Speaker 0>talks this week, and one of them is

01:09:47.335 --> 01:09:51.335
<v Speaker 0>commoditizing cluster API as code using TypeScript.

01:09:51.335 --> 01:09:53.175
<v Speaker 0>And I've I I really just wanna kinda

01:09:53.175 --> 01:09:54.775
<v Speaker 0>rewrite all of it in cdk8s now

01:09:56.190 --> 01:09:57.630
<v Speaker 0>and publish that as a module. So I'm

01:09:57.630 --> 01:09:58.670
<v Speaker 0>trying to work out in my head if

01:09:58.670 --> 01:10:00.030
<v Speaker 0>I could do that in under two days

01:10:00.030 --> 01:10:02.110
<v Speaker 0>and still record a talk. So watch this

01:10:02.110 --> 01:10:02.989
<v Speaker 0>space. Well,

01:10:03.310 --> 01:10:04.590
<v Speaker 1>let let me know if you need some

01:10:04.590 --> 01:10:05.150
<v Speaker 1>help.

01:10:05.870 --> 01:10:08.110
<v Speaker 0>Alright. Let's jump back over to here.

01:10:09.545 --> 01:10:11.224
<v Speaker 0>Thank you so much for joining me today

01:10:11.224 --> 01:10:12.985
<v Speaker 0>and guiding us through that. It's such a

01:10:12.985 --> 01:10:14.985
<v Speaker 0>powerful tool. I hope everyone watching

01:10:15.145 --> 01:10:16.744
<v Speaker 0>kinda gets a taste of this that goes

01:10:16.744 --> 01:10:18.744
<v Speaker 0>away and checks it and checks it out.

01:10:18.744 --> 01:10:20.665
<v Speaker 0>I really do believe these tools are the

01:10:20.665 --> 01:10:21.945
<v Speaker 0>best way to deploy to Kubernetes.

01:10:22.900 --> 01:10:24.900
<v Speaker 0>Is there anything that you would like to

01:10:24.900 --> 01:10:26.659
<v Speaker 0>finish with before we wrap up for today?

01:10:26.659 --> 01:10:28.340
<v Speaker 0>Anything you wanna share? Anything you wanna link

01:10:28.340 --> 01:10:30.179
<v Speaker 0>to? Anything you want in the show notes?

01:10:32.820 --> 01:10:34.579
<v Speaker 1>I guess the only thing that I can

01:10:34.745 --> 01:10:37.545
<v Speaker 1>that that's important to say is that, cdk8s

01:10:37.545 --> 01:10:38.585
<v Speaker 1>is in beta,

01:10:39.065 --> 01:10:40.985
<v Speaker 1>so it's still not final. We still have

01:10:40.985 --> 01:10:42.425
<v Speaker 1>some work to do to get it to

01:10:42.425 --> 01:10:43.705
<v Speaker 1>a place where we're

01:10:43.945 --> 01:10:45.385
<v Speaker 1>comfortable calling it,

01:10:46.345 --> 01:10:46.745
<v Speaker 1>production.

01:10:48.500 --> 01:10:50.260
<v Speaker 1>But I I think we know that there

01:10:50.260 --> 01:10:52.260
<v Speaker 1>are you you know, we have people using

01:10:52.260 --> 01:10:53.780
<v Speaker 1>it for production purposes.

01:10:53.940 --> 01:10:55.700
<v Speaker 1>I think the the main thing that we

01:10:55.700 --> 01:10:56.739
<v Speaker 1>wanna make sure

01:10:57.300 --> 01:10:59.700
<v Speaker 1>we have right is, you know, the API

01:10:59.700 --> 01:11:01.780
<v Speaker 1>patterns that are solid that we can cover

01:11:01.780 --> 01:11:04.614
<v Speaker 1>the core Kubernetes API with these high level

01:11:04.614 --> 01:11:05.735
<v Speaker 1>abstractions,

01:11:07.975 --> 01:11:10.375
<v Speaker 1>make sure that we that supporting multiple versions

01:11:10.375 --> 01:11:11.494
<v Speaker 1>of Kubernetes

01:11:11.815 --> 01:11:14.135
<v Speaker 1>is solid. It's a very important piece in

01:11:14.135 --> 01:11:15.895
<v Speaker 1>the Kubernetes world.

01:11:16.880 --> 01:11:19.520
<v Speaker 1>But my point is that it's a great

01:11:19.520 --> 01:11:23.040
<v Speaker 1>time to get involved and influence and collaborate

01:11:23.040 --> 01:11:25.519
<v Speaker 1>with us and help us, build this.

01:11:26.400 --> 01:11:28.719
<v Speaker 1>It it was accepted to CNCF as a

01:11:28.719 --> 01:11:31.280
<v Speaker 1>sandbox project recently, so we're also very excited

01:11:31.280 --> 01:11:33.474
<v Speaker 1>about that. Oh, wow. I was I must

01:11:33.474 --> 01:11:35.795
<v Speaker 0>have completely missed that. Awesome. That's really, really

01:11:35.795 --> 01:11:36.354
<v Speaker 0>cool.

01:11:36.835 --> 01:11:39.155
<v Speaker 0>So it's the CNCF sandbox project. It works

01:11:39.155 --> 01:11:41.235
<v Speaker 0>across multiple languages and runtimes.

01:11:41.235 --> 01:11:43.954
<v Speaker 0>It's m beta. Contributions are welcome. Get involved.

01:11:45.510 --> 01:11:48.070
<v Speaker 0>Hopefully, help shape the future of Kubernetes deployment.

01:11:48.150 --> 01:11:50.230
<v Speaker 0>Let's leave it at that. Thank you,

01:11:50.949 --> 01:11:53.030
<v Speaker 0>Pleasure for you to join me today. Really

01:11:53.030 --> 01:11:55.110
<v Speaker 0>cool technology. Looking forward to playing with it.

01:11:55.110 --> 01:11:56.230
<v Speaker 0>And I will let you know how I

01:11:56.230 --> 01:11:57.909
<v Speaker 0>get on with my cluster API hack Yeah.

01:11:57.989 --> 01:11:59.510
<v Speaker 0>Over the next forty hours. Yeah.

01:12:00.389 --> 01:12:02.304
<v Speaker 1>Please. I'd be very curious.

01:12:02.545 --> 01:12:04.545
<v Speaker 0>Alright. Thank you very much. I'll speak to

01:12:04.545 --> 01:12:06.304
<v Speaker 0>you Thank you for having me. Bye.
