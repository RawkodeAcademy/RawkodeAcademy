WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 52a95270-74f6-486d-8533-9f630ece9017
Created: 2025-06-05T21:57:08.722Z
Duration: 1777.0057
Channels: 1

00:00:00.080 --> 00:00:01.040
<v Speaker 0>Java.

00:00:01.520 --> 00:00:03.280
<v Speaker 0>Never thought we'd do an episode on that,

00:00:03.280 --> 00:00:04.880
<v Speaker 0>did you? Java

00:00:04.880 --> 00:00:07.680
<v Speaker 1>for serverless functions. Did I hear that right?

00:00:07.839 --> 00:00:09.840
<v Speaker 0>We get a chance to talk with Atavio

00:00:09.840 --> 00:00:10.799
<v Speaker 0>Santana,

00:00:10.800 --> 00:00:12.240
<v Speaker 0>is a Java champion,

00:00:12.240 --> 00:00:13.599
<v Speaker 0>Kubernetes expert,

00:00:13.759 --> 00:00:15.985
<v Speaker 0>and loves to make dad jokes, especially at

00:00:15.985 --> 00:00:17.105
<v Speaker 0>David's expense.

00:00:17.345 --> 00:00:19.505
<v Speaker 1>And believe it or not, I actually left

00:00:19.505 --> 00:00:22.064
<v Speaker 1>this episode kind of writing to one some

00:00:22.064 --> 00:00:22.785
<v Speaker 1>Java.

00:00:23.425 --> 00:00:24.145
<v Speaker 1>Maybe.

00:00:24.785 --> 00:00:26.625
<v Speaker 0>We did mention Russ though.

00:00:27.185 --> 00:00:31.250
<v Speaker 0>Enjoy the episode. Welcome to today's episode, Otavio.

00:00:31.250 --> 00:00:33.650
<v Speaker 1>You are gonna teach us about something that

00:00:33.650 --> 00:00:35.490
<v Speaker 1>I generally consider a curse word, and that

00:00:35.490 --> 00:00:36.610
<v Speaker 1>is Java.

00:00:36.690 --> 00:00:37.970
<v Speaker 1>But we're gonna look at this in a

00:00:37.970 --> 00:00:40.130
<v Speaker 1>fresh light and understand how to be successful

00:00:40.290 --> 00:00:42.370
<v Speaker 1>with Cloud Native and Java on top of

00:00:42.370 --> 00:00:42.930
<v Speaker 1>Kubernetes.

00:00:43.395 --> 00:00:45.235
<v Speaker 0>We'll try not to talk about Rust, I

00:00:45.235 --> 00:00:48.195
<v Speaker 0>guess. Right? Is that the plan? There's a

00:00:48.195 --> 00:00:49.155
<v Speaker 2>plan, ours.

00:00:49.475 --> 00:00:50.114
<v Speaker 2>Okay.

00:00:50.595 --> 00:00:53.315
<v Speaker 2>Just to to reply the answer, how can

00:00:53.315 --> 00:00:56.675
<v Speaker 2>you use Java of Kubernetes and success? That's

00:00:56.675 --> 00:00:56.915
<v Speaker 2>easy.

00:00:57.480 --> 00:00:58.760
<v Speaker 2>Don't use Java.

00:00:58.920 --> 00:01:00.920
<v Speaker 1>That's that's what I was expecting right off

00:01:00.920 --> 00:01:02.280
<v Speaker 1>the bat. Fuck.

00:01:02.520 --> 00:01:04.040
<v Speaker 0>Well, alright. That was the end of the

00:01:04.040 --> 00:01:06.040
<v Speaker 0>episode. I will just keep on moving here.

00:01:06.040 --> 00:01:07.240
<v Speaker 0>Thank you. No. I'm just kidding.

00:01:07.640 --> 00:01:09.640
<v Speaker 1>Alright. But alright. So so first, before we

00:01:09.640 --> 00:01:10.760
<v Speaker 1>get into that, right, I know we're gonna

00:01:10.760 --> 00:01:13.104
<v Speaker 1>have a great conversation about Java, but I

00:01:13.104 --> 00:01:14.784
<v Speaker 1>want people to understand who you are and

00:01:14.784 --> 00:01:15.984
<v Speaker 1>what you've been up to. So for anyone

00:01:15.984 --> 00:01:17.664
<v Speaker 1>who's not familiar with you and your work,

00:01:17.664 --> 00:01:19.585
<v Speaker 1>please take a few moments to introduce yourself

00:01:19.585 --> 00:01:21.185
<v Speaker 1>and share anything that you wish.

00:01:21.744 --> 00:01:24.225
<v Speaker 2>Okay. So super glad to be here. My

00:01:24.225 --> 00:01:26.545
<v Speaker 2>name is Altave Santana. Most of the time,

00:01:26.545 --> 00:01:27.265
<v Speaker 2>I do jokes,

00:01:27.780 --> 00:01:29.140
<v Speaker 2>mainly dad jokes.

00:01:29.540 --> 00:01:30.340
<v Speaker 2>Sometimes,

00:01:30.820 --> 00:01:33.860
<v Speaker 2>hard lever, I do some code, especially around

00:01:33.860 --> 00:01:35.940
<v Speaker 2>cloud native, especially because

00:01:36.260 --> 00:01:38.980
<v Speaker 2>that is what I do love. The job

00:01:38.980 --> 00:01:42.020
<v Speaker 2>in the Java community is help people to

00:01:42.020 --> 00:01:42.980
<v Speaker 2>engage them

00:01:43.465 --> 00:01:46.745
<v Speaker 2>and move the organization forward using the most

00:01:46.745 --> 00:01:48.185
<v Speaker 2>effective techniques,

00:01:48.505 --> 00:01:50.905
<v Speaker 2>using the Java Enterprise Notifications,

00:01:51.145 --> 00:01:52.025
<v Speaker 2>for example,

00:01:52.505 --> 00:01:54.185
<v Speaker 2>under the Jakarta,

00:01:54.665 --> 00:01:58.185
<v Speaker 2>that is under Eclipse Foundation. So

00:01:57.320 --> 00:01:59.720
<v Speaker 2>my goal is basically to help Java developers

00:01:59.720 --> 00:02:02.520
<v Speaker 2>and software engineers to make them more effective

00:02:02.840 --> 00:02:05.480
<v Speaker 2>and take advantage of open source

00:02:06.120 --> 00:02:09.400
<v Speaker 2>and naturally exploring more about cloud, the cloud

00:02:09.400 --> 00:02:10.440
<v Speaker 2>native perspectives.

00:02:11.065 --> 00:02:12.425
<v Speaker 1>Yeah. I love that you said to help

00:02:12.425 --> 00:02:14.345
<v Speaker 1>people, but that you rarely write code. To

00:02:14.345 --> 00:02:15.944
<v Speaker 1>write oh, yeah. So you're a consultant, aren't

00:02:15.944 --> 00:02:18.185
<v Speaker 1>you? Yes. I took a look at your

00:02:18.185 --> 00:02:20.185
<v Speaker 1>website, and I clicked on the awards page,

00:02:20.185 --> 00:02:22.425
<v Speaker 1>and there was, like, 30 different things there.

00:02:22.425 --> 00:02:24.410
<v Speaker 1>So you've been doing this Java stuff for

00:02:24.410 --> 00:02:25.769
<v Speaker 1>a while. And I think you've even written,

00:02:25.769 --> 00:02:27.370
<v Speaker 1>like, eight books. Right? So maybe you can

00:02:27.370 --> 00:02:28.489
<v Speaker 1>give us a bit of history. How long

00:02:28.489 --> 00:02:29.690
<v Speaker 1>have you been doing Java?

00:02:29.930 --> 00:02:32.010
<v Speaker 1>What's your background? Anything else you wanna share

00:02:32.010 --> 00:02:34.410
<v Speaker 1>there? It's a long time doing Java.

00:02:34.569 --> 00:02:36.730
<v Speaker 2>More than I wish, by the You can

00:02:36.730 --> 00:02:37.930
<v Speaker 2>see my white hairs.

00:02:38.405 --> 00:02:40.885
<v Speaker 2>So since Java eight, I have been working

00:02:40.885 --> 00:02:41.685
<v Speaker 2>Java.

00:02:41.765 --> 00:02:44.004
<v Speaker 2>So if you hate Java on that time,

00:02:44.004 --> 00:02:44.645
<v Speaker 2>sorry.

00:02:45.444 --> 00:02:48.165
<v Speaker 2>I did my best to make Java

00:02:48.644 --> 00:02:50.565
<v Speaker 2>as good as possible, but it's hard.

00:02:51.319 --> 00:02:52.840
<v Speaker 2>I've helped several Java

00:02:53.000 --> 00:02:53.960
<v Speaker 2>specifications

00:02:54.200 --> 00:02:55.960
<v Speaker 2>through the JCP,

00:02:56.280 --> 00:02:57.640
<v Speaker 2>where I become

00:02:58.040 --> 00:03:01.000
<v Speaker 2>an executive member of the JCP. So if

00:03:01.000 --> 00:03:03.319
<v Speaker 2>you're not familiar with JCP, it's basically the

00:03:03.319 --> 00:03:05.159
<v Speaker 2>organization who defines

00:03:05.425 --> 00:03:07.425
<v Speaker 2>and drives the Java community.

00:03:08.145 --> 00:03:10.785
<v Speaker 2>Java does not belong to Oracle

00:03:11.185 --> 00:03:14.305
<v Speaker 2>at all. So we do have several organizations,

00:03:14.305 --> 00:03:16.145
<v Speaker 2>several communities working

00:03:16.385 --> 00:03:18.865
<v Speaker 2>on the process in Java. We do have

00:03:18.865 --> 00:03:20.465
<v Speaker 2>a huge ecosystems,

00:03:20.930 --> 00:03:21.730
<v Speaker 2>people,

00:03:21.890 --> 00:03:22.770
<v Speaker 2>organizations,

00:03:22.930 --> 00:03:24.530
<v Speaker 2>enterprise, and so on,

00:03:25.090 --> 00:03:27.170
<v Speaker 2>even open source organizations

00:03:27.250 --> 00:03:29.970
<v Speaker 2>such as Apache and Eclipse Foundation.

00:03:30.370 --> 00:03:32.130
<v Speaker 2>And I have been working with

00:03:32.610 --> 00:03:34.370
<v Speaker 2>Java since Java eight.

00:03:35.090 --> 00:03:36.130
<v Speaker 2>And with

00:03:36.504 --> 00:03:39.144
<v Speaker 2>the impact in moving the Java Enterprise to

00:03:39.144 --> 00:03:40.265
<v Speaker 2>a Tilts Foundation,

00:03:40.345 --> 00:03:41.305
<v Speaker 2>I went

00:03:41.705 --> 00:03:44.265
<v Speaker 2>and to a Tilts Foundation worked on those

00:03:44.265 --> 00:03:45.545
<v Speaker 2>Java Enterprise,

00:03:46.424 --> 00:03:48.985
<v Speaker 2>where, yes, I received some awards

00:03:48.985 --> 00:03:52.950
<v Speaker 2>like the JCP Awards, the All Categories,

00:03:53.510 --> 00:03:56.390
<v Speaker 2>the Duke Choice Awards, that is the Oscar

00:03:56.390 --> 00:03:57.510
<v Speaker 2>of Java,

00:03:57.830 --> 00:03:58.710
<v Speaker 2>Actives

00:03:58.950 --> 00:03:59.990
<v Speaker 2>Subcommuter,

00:03:59.990 --> 00:04:00.870
<v Speaker 2>and so on.

00:04:01.430 --> 00:04:03.750
<v Speaker 2>My secret is just don't have social life.

00:04:04.345 --> 00:04:06.985
<v Speaker 2>Who cares about people. Right? So just focus

00:04:06.985 --> 00:04:09.865
<v Speaker 2>in code. Alright. Awesome. So

00:04:10.025 --> 00:04:12.185
<v Speaker 1>I'm gonna date myself here. Right? But I

00:04:12.185 --> 00:04:14.985
<v Speaker 1>haven't written Java. So there's Java I'm gonna

00:04:14.985 --> 00:04:16.024
<v Speaker 1>say 1.4.

00:04:16.024 --> 00:04:18.185
<v Speaker 1>I was in college. This was early two

00:04:18.185 --> 00:04:20.300
<v Speaker 1>thousands. I didn't enjoy it. I never wrote

00:04:20.300 --> 00:04:21.820
<v Speaker 1>it again. I dropped out of college. I

00:04:21.820 --> 00:04:23.420
<v Speaker 1>hated it so much, actually, and got a

00:04:23.420 --> 00:04:25.660
<v Speaker 1>job right in Peril, which looking back, probably

00:04:25.660 --> 00:04:27.900
<v Speaker 1>not my smartest move, but, you know, whatever.

00:04:28.060 --> 00:04:30.700
<v Speaker 1>Tell me about the evolution of Java over

00:04:30.700 --> 00:04:31.180
<v Speaker 1>the last,

00:04:31.855 --> 00:04:33.695
<v Speaker 1>you know, ten to fifteen years. Well, you

00:04:33.695 --> 00:04:35.215
<v Speaker 1>know, from Java eight to where we are

00:04:35.215 --> 00:04:37.535
<v Speaker 1>today because obviously the language is evolving, it's

00:04:37.535 --> 00:04:38.415
<v Speaker 1>modernizing,

00:04:38.575 --> 00:04:40.095
<v Speaker 1>we have containers now.

00:04:40.335 --> 00:04:42.815
<v Speaker 1>I'm assuming we don't just throw Tomcat servers

00:04:42.815 --> 00:04:45.295
<v Speaker 1>on the Internet and run our applications anymore.

00:04:45.295 --> 00:04:47.990
<v Speaker 1>Like, what is and where is Java today?

00:04:48.310 --> 00:04:51.430
<v Speaker 2>So Java is in the version 23.

00:04:51.430 --> 00:04:53.270
<v Speaker 2>Right now, we are

00:04:53.510 --> 00:04:56.550
<v Speaker 2>thirty years old of history and experience,

00:04:57.270 --> 00:05:00.215
<v Speaker 2>few improvements in the language. For example, to

00:05:00.215 --> 00:05:02.854
<v Speaker 2>handle data with string API,

00:05:03.574 --> 00:05:06.215
<v Speaker 2>a new API to handle with data.

00:05:06.455 --> 00:05:07.815
<v Speaker 2>We have the

00:05:08.215 --> 00:05:10.615
<v Speaker 2>coin project where the goal is to simplify

00:05:10.615 --> 00:05:12.055
<v Speaker 2>the Java syntax,

00:05:12.375 --> 00:05:13.655
<v Speaker 2>such as diamonds,

00:05:14.470 --> 00:05:17.030
<v Speaker 2>to work with some generic keys

00:05:17.190 --> 00:05:19.669
<v Speaker 2>on the best way as possible. We do

00:05:19.669 --> 00:05:22.230
<v Speaker 2>have Record to work with data.

00:05:22.710 --> 00:05:24.070
<v Speaker 2>On the infrastructure,

00:05:24.070 --> 00:05:26.790
<v Speaker 2>a way to save Java, we have several

00:05:26.790 --> 00:05:27.750
<v Speaker 2>improvements

00:05:27.865 --> 00:05:29.544
<v Speaker 2>on the JVMs,

00:05:29.705 --> 00:05:31.944
<v Speaker 2>garbage collectors. Right now, we do have the

00:05:31.944 --> 00:05:33.544
<v Speaker 2>T1 to work better

00:05:33.784 --> 00:05:35.705
<v Speaker 2>and avoid stop the words,

00:05:35.865 --> 00:05:39.224
<v Speaker 2>the nightmare of anybody who has a huge

00:05:39.224 --> 00:05:39.705
<v Speaker 2>application.

00:05:40.500 --> 00:05:43.060
<v Speaker 2>Several improvements to modules

00:05:43.060 --> 00:05:45.780
<v Speaker 2>and improvements to the container.

00:05:46.180 --> 00:05:48.900
<v Speaker 2>When I mention container, don't think only about

00:05:48.900 --> 00:05:51.860
<v Speaker 2>Docker, think about the open container.

00:05:52.020 --> 00:05:52.099
<v Speaker 2>So

00:05:53.275 --> 00:05:55.675
<v Speaker 2>this way that we have designed the JVM

00:05:55.675 --> 00:05:57.035
<v Speaker 2>right now is to

00:05:57.595 --> 00:05:59.035
<v Speaker 2>make sure that

00:05:59.995 --> 00:06:03.354
<v Speaker 2>almost all containers that have Java will take

00:06:03.354 --> 00:06:05.035
<v Speaker 2>advantage of the JVM.

00:06:05.690 --> 00:06:06.250
<v Speaker 2>So

00:06:06.970 --> 00:06:08.970
<v Speaker 2>it's a total different Java

00:06:09.130 --> 00:06:11.690
<v Speaker 2>since Java four. It's a huge, huge time

00:06:11.690 --> 00:06:13.450
<v Speaker 2>ago. Let's revisit

00:06:13.610 --> 00:06:15.770
<v Speaker 1>your joke from the start of the episode.

00:06:15.770 --> 00:06:18.010
<v Speaker 1>If you wanna be successful with Java on

00:06:18.010 --> 00:06:20.410
<v Speaker 1>Kubernetes, don't use Java. Right? Let's let's actually

00:06:20.415 --> 00:06:22.175
<v Speaker 1>dig into this a little bit. Yeah. Because,

00:06:22.175 --> 00:06:23.455
<v Speaker 1>you know, we're looking at the cloud native

00:06:23.455 --> 00:06:24.815
<v Speaker 1>landscape today.

00:06:25.455 --> 00:06:27.375
<v Speaker 1>Apple have just released pickle, which is a

00:06:27.375 --> 00:06:29.695
<v Speaker 1>conflict management, which was built in Java.

00:06:29.855 --> 00:06:32.495
<v Speaker 1>We've got Kafka, which is the almost the

00:06:32.495 --> 00:06:33.295
<v Speaker 1>facto

00:06:33.550 --> 00:06:36.750
<v Speaker 1>service bus, queued topic, whatever, a whole bunch

00:06:36.750 --> 00:06:38.190
<v Speaker 1>of different things. Right? It does a whole

00:06:38.190 --> 00:06:39.070
<v Speaker 1>lot of these things

00:06:39.470 --> 00:06:42.510
<v Speaker 1>built on Java. We've got Elasticsearch built on

00:06:42.510 --> 00:06:44.510
<v Speaker 1>Java. I mean, Cloud Native

00:06:44.990 --> 00:06:47.525
<v Speaker 1>has a lot of Java components and its

00:06:47.525 --> 00:06:49.125
<v Speaker 1>ecosystem and production,

00:06:49.205 --> 00:06:50.885
<v Speaker 1>shipping, and making money for a whole bunch

00:06:50.885 --> 00:06:54.085
<v Speaker 1>of companies. So, you know, can people our

00:06:54.245 --> 00:06:55.845
<v Speaker 1>people are being successful, but

00:06:56.405 --> 00:06:57.925
<v Speaker 1>how do we get to this stage where

00:06:57.925 --> 00:07:00.940
<v Speaker 1>Java as in the enterprise software is the

00:07:00.940 --> 00:07:03.020
<v Speaker 1>modern cloud native microservice

00:07:03.020 --> 00:07:04.780
<v Speaker 1>approach to building software?

00:07:05.180 --> 00:07:08.140
<v Speaker 2>Yeah. My first advice is work to the

00:07:08.140 --> 00:07:11.020
<v Speaker 2>most up to date JVM as possible. I

00:07:11.020 --> 00:07:14.115
<v Speaker 2>know several companies try to keep on Java

00:07:14.115 --> 00:07:16.514
<v Speaker 2>eight, Java four, and so on.

00:07:16.995 --> 00:07:19.074
<v Speaker 2>But if you do that, you won't be

00:07:19.074 --> 00:07:21.395
<v Speaker 2>able to take the most updated

00:07:22.034 --> 00:07:24.675
<v Speaker 2>enhancement on the JVM, for example, to work

00:07:24.675 --> 00:07:25.634
<v Speaker 2>better with

00:07:26.190 --> 00:07:27.310
<v Speaker 2>Kubernetes,

00:07:27.550 --> 00:07:28.750
<v Speaker 2>with Docker,

00:07:28.750 --> 00:07:30.190
<v Speaker 2>or any kind of container.

00:07:30.350 --> 00:07:32.110
<v Speaker 2>If you take a look, for example,

00:07:32.510 --> 00:07:34.510
<v Speaker 2>at the beginning of Java eight,

00:07:35.150 --> 00:07:36.190
<v Speaker 2>every time that

00:07:36.670 --> 00:07:38.670
<v Speaker 2>it worked with Java in the container,

00:07:39.895 --> 00:07:42.615
<v Speaker 2>there was an issue because for the JVM,

00:07:43.255 --> 00:07:45.095
<v Speaker 2>there was not the container.

00:07:45.815 --> 00:07:47.735
<v Speaker 2>It took the whole machine

00:07:47.815 --> 00:07:49.255
<v Speaker 2>instead of considering

00:07:49.415 --> 00:07:51.495
<v Speaker 2>just the container that is inside.

00:07:52.759 --> 00:07:55.480
<v Speaker 2>Right now, we take that into consideration.

00:07:55.639 --> 00:07:58.039
<v Speaker 2>So if Java

00:07:58.039 --> 00:07:59.560
<v Speaker 2>is running inside

00:07:59.560 --> 00:08:00.680
<v Speaker 2>a container,

00:08:01.160 --> 00:08:03.320
<v Speaker 2>we are taking a look in several

00:08:03.400 --> 00:08:05.720
<v Speaker 2>enhancements in the SYS operation as well.

00:08:06.425 --> 00:08:08.185
<v Speaker 2>Right now, we do have more

00:08:08.265 --> 00:08:11.705
<v Speaker 2>modern applications to avoid the huge start time

00:08:11.705 --> 00:08:13.225
<v Speaker 2>that Java had.

00:08:13.785 --> 00:08:16.505
<v Speaker 2>If you remember some time ago, Java took

00:08:16.665 --> 00:08:18.745
<v Speaker 2>a couple of seconds to warm up the

00:08:18.745 --> 00:08:19.145
<v Speaker 2>application.

00:08:20.060 --> 00:08:23.260
<v Speaker 2>Right now, we do have several frameworks

00:08:23.740 --> 00:08:26.380
<v Speaker 2>that can do it a couple seconds,

00:08:26.380 --> 00:08:28.060
<v Speaker 2>like any dynamic language.

00:08:29.180 --> 00:08:29.820
<v Speaker 2>So,

00:08:30.060 --> 00:08:33.740
<v Speaker 2>Quackle sometimes might be faster than Node. Js

00:08:34.245 --> 00:08:36.565
<v Speaker 2>because it can be converted

00:08:36.885 --> 00:08:39.205
<v Speaker 2>to native language, for example. I can convert

00:08:39.205 --> 00:08:41.525
<v Speaker 2>the JVM to native

00:08:41.525 --> 00:08:42.405
<v Speaker 2>instructions

00:08:42.405 --> 00:08:43.845
<v Speaker 2>using GraalVM,

00:08:43.845 --> 00:08:44.565
<v Speaker 2>for example.

00:08:44.965 --> 00:08:46.965
<v Speaker 2>So the Java ecosystem

00:08:46.965 --> 00:08:48.005
<v Speaker 2>is huge.

00:08:48.839 --> 00:08:50.920
<v Speaker 2>And the good way to take advantage of

00:08:50.920 --> 00:08:53.560
<v Speaker 2>that in the Java, in the JVM itself,

00:08:53.720 --> 00:08:55.880
<v Speaker 2>is keeping your ecosystem

00:08:55.880 --> 00:08:56.600
<v Speaker 2>updated.

00:08:56.760 --> 00:08:59.240
<v Speaker 2>What I said, the huge trade off that

00:08:59.240 --> 00:09:00.440
<v Speaker 2>we do have in Java,

00:09:00.760 --> 00:09:01.880
<v Speaker 2>keep the compatibility.

00:09:02.964 --> 00:09:05.765
<v Speaker 2>That means when you move between versions,

00:09:06.085 --> 00:09:07.045
<v Speaker 2>the impact

00:09:07.685 --> 00:09:09.605
<v Speaker 2>might be super time,

00:09:10.245 --> 00:09:13.205
<v Speaker 2>especially because the way that we design

00:09:13.445 --> 00:09:16.250
<v Speaker 2>is to keep this way. So if you

00:09:16.250 --> 00:09:18.890
<v Speaker 2>are in Java eight and move to Java

00:09:19.290 --> 00:09:20.170
<v Speaker 2>23,

00:09:20.170 --> 00:09:21.450
<v Speaker 2>20 four, whatever,

00:09:21.770 --> 00:09:25.210
<v Speaker 2>the impact of doing that might be super

00:09:25.210 --> 00:09:25.930
<v Speaker 2>tiny.

00:09:26.970 --> 00:09:27.530
<v Speaker 2>Naturally,

00:09:27.865 --> 00:09:30.425
<v Speaker 2>you can write more code with less

00:09:30.905 --> 00:09:34.345
<v Speaker 2>methods because have more SUGA syntax inside Java.

00:09:34.345 --> 00:09:36.985
<v Speaker 2>So my first advice is keep updated with

00:09:36.985 --> 00:09:37.625
<v Speaker 2>Java.

00:09:37.945 --> 00:09:40.425
<v Speaker 2>Every six months, we're gonna have a release,

00:09:41.519 --> 00:09:42.080
<v Speaker 2>and

00:09:42.399 --> 00:09:44.800
<v Speaker 2>we have a huge ecosystem right now. So

00:09:44.800 --> 00:09:48.240
<v Speaker 2>with Spring, Jakarta, Quackos, Micronauts,

00:09:48.399 --> 00:09:50.720
<v Speaker 2>and on, and so on. Yeah. So I

00:09:50.720 --> 00:09:52.320
<v Speaker 1>I think the crux of what you said

00:09:52.320 --> 00:09:55.215
<v Speaker 1>there. If I remember correctly, before Java eight,

00:09:55.215 --> 00:09:58.015
<v Speaker 1>the problem was the JVM didn't respect the

00:09:58.015 --> 00:10:00.015
<v Speaker 1>control groups of Linux. Right? So when you

00:10:00.015 --> 00:10:02.015
<v Speaker 1>run a container and say, you have access

00:10:02.015 --> 00:10:04.575
<v Speaker 1>to one CPU and a 20 mega RAM,

00:10:04.830 --> 00:10:07.230
<v Speaker 1>If the JVM had no idea those constraints

00:10:07.230 --> 00:10:08.910
<v Speaker 1>were in place, it would outscale what it

00:10:08.910 --> 00:10:11.150
<v Speaker 1>was doing. It would get, you know, broken

00:10:11.150 --> 00:10:12.910
<v Speaker 1>to a certain degree and and then not

00:10:12.910 --> 00:10:14.670
<v Speaker 1>work any longer. So you're saying that from

00:10:14.670 --> 00:10:16.830
<v Speaker 1>Java eight, those are now respected, and it's

00:10:17.084 --> 00:10:19.324
<v Speaker 1>it plays a part in the container ecosystem,

00:10:19.324 --> 00:10:20.925
<v Speaker 1>which is really good to know. So

00:10:21.564 --> 00:10:25.004
<v Speaker 1>and, obviously, I'm assuming, again, I don't know

00:10:25.004 --> 00:10:25.884
<v Speaker 1>that space,

00:10:26.444 --> 00:10:28.285
<v Speaker 1>but Java is not oblivious to the fact

00:10:28.285 --> 00:10:30.925
<v Speaker 1>that containers and Kubernetes exist over here. So

00:10:30.925 --> 00:10:33.370
<v Speaker 1>they're they're they're considering it as a target

00:10:33.370 --> 00:10:36.490
<v Speaker 1>platform. Containers and production is where the JVM,

00:10:36.650 --> 00:10:38.890
<v Speaker 1>whoever the governing bodies are, the Eclipse Foundation

00:10:38.890 --> 00:10:40.730
<v Speaker 1>and others want to push the project forward

00:10:40.730 --> 00:10:42.490
<v Speaker 1>so that it is a first class citizen.

00:10:42.490 --> 00:10:44.010
<v Speaker 1>Is that a correct assumption?

00:10:44.170 --> 00:10:47.975
<v Speaker 2>Yes. Yes. If you have several companies, organizations

00:10:47.975 --> 00:10:51.175
<v Speaker 2>looking for it, that's where we should go.

00:10:51.175 --> 00:10:53.735
<v Speaker 2>For example, a long, long time ago, the

00:10:53.735 --> 00:10:54.855
<v Speaker 2>OpenJDK,

00:10:55.175 --> 00:10:56.375
<v Speaker 2>the JVM

00:10:56.455 --> 00:10:57.655
<v Speaker 2>reference implementations,

00:10:58.329 --> 00:11:00.330
<v Speaker 2>because, yes, in Java,

00:11:00.490 --> 00:11:02.250
<v Speaker 2>we have the specifications,

00:11:02.329 --> 00:11:03.290
<v Speaker 2>we do have

00:11:04.410 --> 00:11:05.370
<v Speaker 2>the spec,

00:11:05.850 --> 00:11:08.410
<v Speaker 2>and we have multiple implementations.

00:11:09.290 --> 00:11:10.170
<v Speaker 2>The reference

00:11:10.970 --> 00:11:11.850
<v Speaker 2>implementation

00:11:11.850 --> 00:11:13.290
<v Speaker 2>used to be Mercurial,

00:11:14.015 --> 00:11:15.775
<v Speaker 2>And because a lot of people did a

00:11:15.775 --> 00:11:17.775
<v Speaker 2>pressure to move to GitHub,

00:11:19.455 --> 00:11:21.935
<v Speaker 2>the organization decided to move on to GitHub

00:11:21.935 --> 00:11:24.735
<v Speaker 2>because they want to collaborate even more.

00:11:25.375 --> 00:11:26.975
<v Speaker 2>So, yes, basically,

00:11:27.350 --> 00:11:30.230
<v Speaker 2>we are driven by community because a lot

00:11:30.230 --> 00:11:30.950
<v Speaker 2>of people,

00:11:31.350 --> 00:11:32.310
<v Speaker 2>committers

00:11:32.470 --> 00:11:33.990
<v Speaker 2>are from the community,

00:11:34.390 --> 00:11:35.990
<v Speaker 2>including myself, for example.

00:11:36.390 --> 00:11:38.790
<v Speaker 1>So now my my thought process is, right,

00:11:38.790 --> 00:11:41.670
<v Speaker 1>Java is modernizing, is container native to a

00:11:41.670 --> 00:11:43.885
<v Speaker 1>certain degree, is moving in the right direction

00:11:43.885 --> 00:11:46.605
<v Speaker 1>to be where other software is in 2025.

00:11:46.605 --> 00:11:49.725
<v Speaker 1>Right? From my understanding, again, so limited and

00:11:49.725 --> 00:11:51.325
<v Speaker 1>I wish I had done a bit more

00:11:51.325 --> 00:11:53.404
<v Speaker 1>Java in my life. Right? Don't worry. Don't

00:11:53.404 --> 00:11:55.565
<v Speaker 2>worry. The JVM Wait. We we just had

00:11:55.565 --> 00:11:58.125
<v Speaker 0>that on recording, by the way. No. What

00:11:58.285 --> 00:12:00.560
<v Speaker 1>I mean is, the JVM was You leave

00:12:00.560 --> 00:12:02.640
<v Speaker 2>Java. What could be worse?

00:12:03.279 --> 00:12:04.720
<v Speaker 2>You could leave Rust.

00:12:05.120 --> 00:12:06.079
<v Speaker 1>Woah. Woah.

00:12:06.720 --> 00:12:09.839
<v Speaker 1>Woah. I'm shitty. Okay. Here we go. Read

00:12:09.839 --> 00:12:11.040
<v Speaker 1>the read the room.

00:12:11.279 --> 00:12:14.320
<v Speaker 1>Oh. Alright. Sorry. Go ahead. Sorry. I'm really

00:12:14.320 --> 00:12:17.095
<v Speaker 0>enjoying this. I think what people always told

00:12:17.095 --> 00:12:18.775
<v Speaker 1>me when I go to conferences and events,

00:12:18.775 --> 00:12:20.375
<v Speaker 1>what they loved about the GVM, right, is

00:12:20.375 --> 00:12:22.215
<v Speaker 1>that you run your application on the GVM

00:12:22.215 --> 00:12:25.415
<v Speaker 1>and it runs for days, weeks, months, years.

00:12:25.975 --> 00:12:29.070
<v Speaker 1>The GVM had this wonderful ability to actually

00:12:29.070 --> 00:12:32.589
<v Speaker 1>dynamically modify code paths over time and optimize.

00:12:32.589 --> 00:12:33.149
<v Speaker 1>Right?

00:12:33.790 --> 00:12:35.550
<v Speaker 1>Do I mean, how much of that has

00:12:35.550 --> 00:12:39.070
<v Speaker 1>been sacrificed in order to support ephemeral workloads

00:12:39.070 --> 00:12:41.230
<v Speaker 1>in Kubernetes? Like, at what point

00:12:41.725 --> 00:12:44.445
<v Speaker 1>does the JVM stop being famous for its

00:12:44.445 --> 00:12:46.845
<v Speaker 1>optimization for long running workloads and hot code

00:12:46.845 --> 00:12:49.165
<v Speaker 1>pass to just being another

00:12:49.325 --> 00:12:51.005
<v Speaker 1>runtime in there. And there's nothing wrong with

00:12:51.005 --> 00:12:53.485
<v Speaker 1>being another runtime. Rust is just another runtime.

00:12:53.485 --> 00:12:55.325
<v Speaker 1>Go is just another runtime. There's nothing special

00:12:55.325 --> 00:12:57.579
<v Speaker 1>about them. But the JVM was always special

00:12:57.579 --> 00:13:00.459
<v Speaker 1>and it was enterprise. It was mainframe. It

00:13:00.459 --> 00:13:01.500
<v Speaker 1>did optimizations,

00:13:01.820 --> 00:13:03.660
<v Speaker 1>and this is now going away. What's your

00:13:03.660 --> 00:13:05.339
<v Speaker 1>thoughts on the trade offs that are being

00:13:05.339 --> 00:13:07.339
<v Speaker 1>made? That's a beauty of Java. As I

00:13:07.339 --> 00:13:10.725
<v Speaker 2>mentioned before, we do have multiple JVMs.

00:13:11.445 --> 00:13:14.005
<v Speaker 2>And that mean we can have specialized

00:13:14.005 --> 00:13:17.365
<v Speaker 2>JVMs to each scenario. For example, Azure,

00:13:17.845 --> 00:13:21.605
<v Speaker 2>they do they have they have several JVMs

00:13:21.605 --> 00:13:23.930
<v Speaker 2>that include one specialized

00:13:23.930 --> 00:13:25.450
<v Speaker 2>to run-in containers.

00:13:26.090 --> 00:13:29.450
<v Speaker 2>We also have, for example, GrauVM that can

00:13:29.450 --> 00:13:32.410
<v Speaker 2>convert your code to native.

00:13:32.730 --> 00:13:36.170
<v Speaker 2>It's super doable to use as native. For

00:13:36.170 --> 00:13:36.730
<v Speaker 2>example,

00:13:37.130 --> 00:13:38.730
<v Speaker 2>if I want to use serverless,

00:13:39.265 --> 00:13:40.625
<v Speaker 2>I don't need to have

00:13:41.265 --> 00:13:43.825
<v Speaker 2>garbage collector on that situation, right? I'm going

00:13:43.825 --> 00:13:46.545
<v Speaker 2>to up the application, run and queue the

00:13:46.545 --> 00:13:47.185
<v Speaker 2>application.

00:13:47.745 --> 00:13:49.585
<v Speaker 2>I don't need to have

00:13:49.985 --> 00:13:52.545
<v Speaker 2>GIT. I don't need to have garbage collector.

00:13:53.040 --> 00:13:55.200
<v Speaker 2>I don't need to have any enhancement

00:13:55.440 --> 00:13:58.160
<v Speaker 2>around the JVM because at the end I

00:13:58.160 --> 00:14:00.160
<v Speaker 2>will start running queue.

00:14:00.800 --> 00:14:01.360
<v Speaker 2>So

00:14:01.680 --> 00:14:03.839
<v Speaker 2>in Java, as I said, we do have

00:14:03.839 --> 00:14:06.640
<v Speaker 2>a huge ecosystem to make it that configurable

00:14:06.640 --> 00:14:07.440
<v Speaker 2>or

00:14:07.665 --> 00:14:10.625
<v Speaker 2>you can change the product if without changing

00:14:10.625 --> 00:14:13.345
<v Speaker 2>your code. That's the beauty of Java. So,

00:14:13.345 --> 00:14:15.024
<v Speaker 2>okay, I want to use right now the

00:14:15.024 --> 00:14:17.825
<v Speaker 2>Graph VM and convert my code to native

00:14:17.825 --> 00:14:19.505
<v Speaker 2>because I want to use serverless.

00:14:20.240 --> 00:14:23.200
<v Speaker 2>K. Go ahead. You might change your framework,

00:14:23.440 --> 00:14:25.360
<v Speaker 2>and that is it. Or I want to

00:14:25.360 --> 00:14:26.720
<v Speaker 2>use a Azure.

00:14:26.880 --> 00:14:29.040
<v Speaker 2>Go ahead. And we have a

00:14:29.680 --> 00:14:32.880
<v Speaker 2>couple of different implementations to make it possible.

00:14:33.415 --> 00:14:35.095
<v Speaker 1>Okay. I think the title of this episode

00:14:35.095 --> 00:14:36.535
<v Speaker 1>is just gonna be the one where David

00:14:36.535 --> 00:14:38.775
<v Speaker 1>was ignorant because I'm learning so much about

00:14:38.775 --> 00:14:40.455
<v Speaker 1>what I don't know about the Java ecosystem.

00:14:40.455 --> 00:14:42.055
<v Speaker 1>Like, the fact that there's multiple

00:14:42.455 --> 00:14:43.895
<v Speaker 1>JVM implementations,

00:14:43.895 --> 00:14:45.975
<v Speaker 1>again, as far as I'm concerned, it was

00:14:45.975 --> 00:14:47.575
<v Speaker 1>just the stunt microsystem one. You go to

00:14:47.575 --> 00:14:49.630
<v Speaker 1>the website, you click download. So, like, it's

00:14:49.949 --> 00:14:51.630
<v Speaker 1>my knowledge in this space is very, very

00:14:51.630 --> 00:14:53.310
<v Speaker 1>dated. But I have,

00:14:53.630 --> 00:14:55.310
<v Speaker 1>you know, through my periphery, kept an eye

00:14:55.310 --> 00:14:57.389
<v Speaker 1>on the Graal project because I've always thought

00:14:57.389 --> 00:14:59.550
<v Speaker 1>it was really interesting that they're allowing us

00:14:59.550 --> 00:15:01.550
<v Speaker 1>to take JVM languages and get that native

00:15:01.550 --> 00:15:02.750
<v Speaker 1>code. Essentially,

00:15:02.990 --> 00:15:05.464
<v Speaker 1>to the best of my understanding, cross compilation

00:15:05.464 --> 00:15:09.305
<v Speaker 1>from Java bytecode to ELF binaries or whatever

00:15:09.305 --> 00:15:11.464
<v Speaker 1>system you're targeting. Is that correct?

00:15:11.785 --> 00:15:12.425
<v Speaker 2>Yes.

00:15:12.665 --> 00:15:15.545
<v Speaker 2>Especially because right now, we do have this

00:15:15.545 --> 00:15:17.225
<v Speaker 2>serverless reality. Right?

00:15:17.890 --> 00:15:19.410
<v Speaker 2>The point of Java

00:15:19.649 --> 00:15:20.370
<v Speaker 2>is

00:15:20.610 --> 00:15:23.490
<v Speaker 2>the same challenge that we do have for

00:15:23.490 --> 00:15:24.610
<v Speaker 2>any software.

00:15:24.930 --> 00:15:29.250
<v Speaker 2>Java is thirty years old, right? Nobody realizes

00:15:29.250 --> 00:15:32.290
<v Speaker 2>that you're going to need serverless application thirty

00:15:32.735 --> 00:15:33.935
<v Speaker 2>three years, right?

00:15:34.654 --> 00:15:36.975
<v Speaker 2>And that is what Java is doing. So

00:15:36.975 --> 00:15:38.975
<v Speaker 2>it's make it possible using

00:15:39.375 --> 00:15:42.815
<v Speaker 2>all the best techniques of the evolutionary

00:15:42.815 --> 00:15:43.855
<v Speaker 2>architecture

00:15:44.415 --> 00:15:48.014
<v Speaker 2>to refactoring your code if without changing behavior

00:15:48.390 --> 00:15:49.510
<v Speaker 2>it make modules

00:15:50.470 --> 00:15:53.750
<v Speaker 2>to make it possible to have multiple scenarios.

00:15:54.150 --> 00:15:56.390
<v Speaker 2>I used to say that open source goes

00:15:56.390 --> 00:15:57.910
<v Speaker 2>beyond philosophy.

00:15:58.070 --> 00:16:00.550
<v Speaker 2>It's the most advanced software engineer in the

00:16:00.550 --> 00:16:02.550
<v Speaker 2>world. I mean, if you want to learn

00:16:02.550 --> 00:16:03.830
<v Speaker 2>how to do a good software,

00:16:04.464 --> 00:16:06.865
<v Speaker 2>just go to any open source project.

00:16:07.185 --> 00:16:09.585
<v Speaker 2>We can do that using

00:16:09.825 --> 00:16:12.545
<v Speaker 2>tasks to keep the behavior. You can

00:16:12.785 --> 00:16:14.545
<v Speaker 2>have a good documentations.

00:16:14.545 --> 00:16:17.665
<v Speaker 2>You can leave, if without, thousands of meetings.

00:16:17.900 --> 00:16:20.220
<v Speaker 2>We can write emails instead of that.

00:16:20.620 --> 00:16:22.860
<v Speaker 2>That might look impossible for you, who is

00:16:22.860 --> 00:16:25.660
<v Speaker 2>manager, but, yes, we can survive if without

00:16:25.660 --> 00:16:27.820
<v Speaker 2>manager, if a lot of meetings.

00:16:28.220 --> 00:16:30.940
<v Speaker 0>Right. If someone had told me an hour

00:16:30.940 --> 00:16:33.420
<v Speaker 1>ago that they were doing Java as serverless,

00:16:34.095 --> 00:16:36.095
<v Speaker 1>I would have laughed. And now I'm like,

00:16:36.095 --> 00:16:37.615
<v Speaker 1>shit, I'm gonna have to try this.

00:16:39.695 --> 00:16:41.695
<v Speaker 0>Now, I haven't really done a lot of

00:16:41.695 --> 00:16:43.215
<v Speaker 0>Java myself since,

00:16:43.774 --> 00:16:45.935
<v Speaker 0>like, six years ago or something like that.

00:16:46.095 --> 00:16:48.839
<v Speaker 0>But I I have heard a lot about

00:16:48.839 --> 00:16:50.440
<v Speaker 0>various projects.

00:16:50.920 --> 00:16:52.200
<v Speaker 0>I think I've heard a little bit about

00:16:52.200 --> 00:16:53.160
<v Speaker 0>Quarkus.

00:16:53.320 --> 00:16:54.600
<v Speaker 0>Don't know much about it.

00:16:55.800 --> 00:16:58.600
<v Speaker 0>But I guess my question is, like, how

00:16:58.600 --> 00:17:01.225
<v Speaker 0>big is this ecosystem now? Like,

00:17:01.305 --> 00:17:02.504
<v Speaker 0>I kind of am in the same spot

00:17:02.504 --> 00:17:04.105
<v Speaker 0>as David and that I don't know a

00:17:04.105 --> 00:17:06.424
<v Speaker 0>ton about it, but I've heard a lot

00:17:06.424 --> 00:17:08.744
<v Speaker 0>of various bits and pieces here and there.

00:17:08.744 --> 00:17:11.384
<v Speaker 2>Woah. So, like, is is it like

00:17:11.464 --> 00:17:13.625
<v Speaker 0>there's hundreds of thousands of options, or are

00:17:13.625 --> 00:17:15.970
<v Speaker 0>we talking, really, there's only, like, two or

00:17:15.970 --> 00:17:18.930
<v Speaker 0>three that you probably should explore first before

00:17:18.930 --> 00:17:20.609
<v Speaker 0>diving into the rest of it? No.

00:17:21.490 --> 00:17:23.490
<v Speaker 2>Do have a huge we have a huge

00:17:23.490 --> 00:17:26.530
<v Speaker 2>ecosystem in Java. Oculus is the one, for

00:17:26.530 --> 00:17:28.130
<v Speaker 2>example. We do have Spring.

00:17:28.765 --> 00:17:31.245
<v Speaker 2>If you want to use, for example, more

00:17:31.245 --> 00:17:31.965
<v Speaker 2>the

00:17:32.205 --> 00:17:33.884
<v Speaker 2>Java Enterprise specification

00:17:33.885 --> 00:17:35.804
<v Speaker 2>or Jacala, for example,

00:17:36.205 --> 00:17:39.004
<v Speaker 2>we can see GlassFish,

00:17:39.005 --> 00:17:40.124
<v Speaker 2>Piranha,

00:17:40.445 --> 00:17:41.485
<v Speaker 2>Caledon,

00:17:41.725 --> 00:17:42.605
<v Speaker 2>Open Liberty,

00:17:43.820 --> 00:17:46.860
<v Speaker 2>it's a huge amount of implementation.

00:17:46.940 --> 00:17:49.100
<v Speaker 2>If I should do a ballparking

00:17:49.180 --> 00:17:50.620
<v Speaker 2>I guess around

00:17:51.420 --> 00:17:52.460
<v Speaker 2>25,

00:17:52.460 --> 00:17:53.900
<v Speaker 2>30 ecosystems

00:17:53.900 --> 00:17:55.340
<v Speaker 2>that you can use explore.

00:17:55.865 --> 00:17:56.585
<v Speaker 0>Gotcha.

00:17:56.825 --> 00:17:58.665
<v Speaker 0>That makes sense. What do you think is

00:17:58.665 --> 00:17:59.625
<v Speaker 0>the best one?

00:18:01.145 --> 00:18:03.145
<v Speaker 0>Know. I'm asking you to name your favorite.

00:18:03.545 --> 00:18:05.385
<v Speaker 2>None of those. Ross is.

00:18:05.865 --> 00:18:07.545
<v Speaker 0>Oh. Oh, there we go.

00:18:07.945 --> 00:18:10.105
<v Speaker 0>David's on my good grades. There we go.

00:18:10.185 --> 00:18:12.670
<v Speaker 0>You knew it was coming. But I'm super

00:18:12.670 --> 00:18:13.870
<v Speaker 2>rusty, rusty.

00:18:14.270 --> 00:18:16.030
<v Speaker 2>So I start to doing the record team

00:18:16.030 --> 00:18:18.590
<v Speaker 2>rusty right now. There you go. Well, this

00:18:18.590 --> 00:18:20.270
<v Speaker 1>must lead on to my next question. So

00:18:20.270 --> 00:18:23.070
<v Speaker 1>absolutely perfect segue here. Right? But I wanted

00:18:23.070 --> 00:18:25.390
<v Speaker 1>to ask you a personal question. There's possibly

00:18:25.390 --> 00:18:28.165
<v Speaker 1>a hard question. Right? I'm assuming you're aware

00:18:28.165 --> 00:18:29.924
<v Speaker 1>other languages exist.

00:18:30.005 --> 00:18:32.645
<v Speaker 1>Right? You probably played It does. As you

00:18:32.645 --> 00:18:33.845
<v Speaker 1>said, you could maybe do a little bit

00:18:33.845 --> 00:18:36.325
<v Speaker 1>of Rust. I would love to know

00:18:37.205 --> 00:18:39.525
<v Speaker 1>what is your draw to Java. Like, when

00:18:39.525 --> 00:18:40.910
<v Speaker 1>you look at all these languages and you

00:18:40.910 --> 00:18:42.350
<v Speaker 1>think this is cool and this is cool,

00:18:42.350 --> 00:18:44.350
<v Speaker 1>maybe you could even share two other languages

00:18:44.350 --> 00:18:46.510
<v Speaker 1>you think are interesting. But then at the

00:18:46.510 --> 00:18:48.750
<v Speaker 1>end of the day, you are saying I

00:18:48.750 --> 00:18:50.270
<v Speaker 1>like to write Java, and I'd love to

00:18:50.270 --> 00:18:52.030
<v Speaker 1>know what how do we sell it to

00:18:52.030 --> 00:18:54.350
<v Speaker 1>the people listening to this episode? Why should

00:18:54.350 --> 00:18:55.549
<v Speaker 1>they write Java? So

00:18:56.095 --> 00:18:57.455
<v Speaker 1>tell me, why did you come back to

00:18:57.455 --> 00:19:00.255
<v Speaker 1>it? I enjoy a lot of language. Jokes

00:19:00.255 --> 00:19:03.695
<v Speaker 2>aside, I tried Rust, Kotlin, Python,

00:19:03.934 --> 00:19:06.335
<v Speaker 2>and I do believe tools

00:19:06.335 --> 00:19:08.495
<v Speaker 2>are tools. Right? I need to use the

00:19:08.495 --> 00:19:10.654
<v Speaker 2>best choice to my scenario.

00:19:11.340 --> 00:19:12.700
<v Speaker 2>I really believe that.

00:19:13.179 --> 00:19:15.340
<v Speaker 2>Doesn't matter how amazing Java is,

00:19:15.659 --> 00:19:16.940
<v Speaker 2>Java is not religion.

00:19:17.179 --> 00:19:18.940
<v Speaker 2>It's just the best option in the world,

00:19:18.940 --> 00:19:21.899
<v Speaker 2>but it's not religion. Alright. Let me reframe

00:19:22.140 --> 00:19:24.855
<v Speaker 1>that question for you. Sorry. Because you dodged

00:19:24.855 --> 00:19:26.615
<v Speaker 1>it very nicely. It's supposed to be serious.

00:19:26.615 --> 00:19:28.455
<v Speaker 1>Let's just stop. There's

00:19:28.455 --> 00:19:30.775
<v Speaker 0>no seriousness on this podcast. Okay. So you

00:19:30.775 --> 00:19:32.294
<v Speaker 0>can point out that it's fine.

00:19:33.015 --> 00:19:34.695
<v Speaker 0>The more trolling of David we can do,

00:19:34.695 --> 00:19:37.095
<v Speaker 0>the better. Okay. I'll take note on that.

00:19:37.700 --> 00:19:39.620
<v Speaker 1>Well, what I'm thinking is, right, what we

00:19:39.620 --> 00:19:41.540
<v Speaker 1>want people to get away is a fresh

00:19:41.540 --> 00:19:43.860
<v Speaker 1>perspective on Java. Right? I know myself coming

00:19:43.860 --> 00:19:45.780
<v Speaker 1>into this, you know, we've got blinkers.

00:19:45.780 --> 00:19:47.300
<v Speaker 1>You know, I've been writing Rust for a

00:19:47.300 --> 00:19:49.380
<v Speaker 1>while and Go for longer than that. And,

00:19:49.460 --> 00:19:51.460
<v Speaker 1>you know, to me, Java has this perception

00:19:51.460 --> 00:19:52.925
<v Speaker 1>in my head of just being an antiquated

00:19:52.925 --> 00:19:54.845
<v Speaker 1>enterprise language. And that's not the case. I

00:19:54.845 --> 00:19:56.125
<v Speaker 1>know that's not the case. Yes. But we

00:19:56.125 --> 00:19:57.884
<v Speaker 1>have these, you know, misconceptions.

00:19:57.965 --> 00:19:59.085
<v Speaker 1>And what I want people to walk away

00:19:59.085 --> 00:20:00.605
<v Speaker 1>from this episode about is, well, maybe I

00:20:00.605 --> 00:20:01.885
<v Speaker 1>should give it a second look and maybe

00:20:01.885 --> 00:20:03.245
<v Speaker 1>I should play with it. But the crux

00:20:03.245 --> 00:20:04.205
<v Speaker 1>of the question is

00:20:04.870 --> 00:20:07.590
<v Speaker 1>they wanna write cloud native microservices,

00:20:08.150 --> 00:20:10.150
<v Speaker 1>and you're not gonna go down to GVM

00:20:10.150 --> 00:20:12.230
<v Speaker 1>and do that right away. There's there's decisions

00:20:12.230 --> 00:20:14.150
<v Speaker 1>that need to be made. I'm assuming this

00:20:14.150 --> 00:20:15.990
<v Speaker 1>comes down to adopting a framework that is

00:20:15.990 --> 00:20:18.924
<v Speaker 1>microservice ready. But, you know, maybe in three,

00:20:18.924 --> 00:20:20.764
<v Speaker 1>four, five steps, however many takes,

00:20:21.164 --> 00:20:23.325
<v Speaker 1>give the audience that journey. If you wanna

00:20:23.325 --> 00:20:26.284
<v Speaker 1>write a microservice right now in Java,

00:20:26.764 --> 00:20:28.284
<v Speaker 1>what are their options, and what do they

00:20:28.284 --> 00:20:29.004
<v Speaker 1>have to do?

00:20:29.485 --> 00:20:29.725
<v Speaker 2>Okay.

00:20:30.320 --> 00:20:32.240
<v Speaker 2>As I said, we have a huge amount

00:20:32.240 --> 00:20:34.320
<v Speaker 2>of solution in the market.

00:20:34.560 --> 00:20:37.600
<v Speaker 2>Let's use the let's use Lara's sample.

00:20:37.760 --> 00:20:39.919
<v Speaker 2>He mentioned backwards, right?

00:20:40.240 --> 00:20:42.560
<v Speaker 2>So I can do a microservice

00:20:42.405 --> 00:20:43.045
<v Speaker 2>with

00:20:43.285 --> 00:20:44.405
<v Speaker 2>two classes,

00:20:44.645 --> 00:20:45.684
<v Speaker 2>where one

00:20:45.925 --> 00:20:48.405
<v Speaker 2>is my NT class and my second one

00:20:48.405 --> 00:20:50.245
<v Speaker 2>is my interface,

00:20:50.805 --> 00:20:51.765
<v Speaker 2>and that is it.

00:20:52.325 --> 00:20:55.525
<v Speaker 2>Right now, I do have my crude operation

00:20:55.525 --> 00:20:56.405
<v Speaker 2>using REST,

00:20:56.809 --> 00:20:59.050
<v Speaker 2>and I can move it to a cloud

00:20:59.050 --> 00:21:00.650
<v Speaker 2>native or container,

00:21:00.650 --> 00:21:01.769
<v Speaker 2>whatever wish.

00:21:02.650 --> 00:21:03.210
<v Speaker 2>So

00:21:03.530 --> 00:21:06.249
<v Speaker 2>you can really make it fast with Java,

00:21:06.410 --> 00:21:08.250
<v Speaker 2>especially with the newest frameworks.

00:21:09.044 --> 00:21:11.524
<v Speaker 2>The biggest challenge with Java is people

00:21:12.004 --> 00:21:14.485
<v Speaker 2>are learning Java 1.4

00:21:14.485 --> 00:21:15.124
<v Speaker 2>and

00:21:15.524 --> 00:21:17.924
<v Speaker 2>believe that Java did not change for that.

00:21:18.245 --> 00:21:20.565
<v Speaker 2>No offense, David, but it

00:21:22.164 --> 00:21:22.965
<v Speaker 2>changed a lot.

00:21:23.960 --> 00:21:26.200
<v Speaker 2>And what happened also is

00:21:26.920 --> 00:21:29.960
<v Speaker 2>we have new modern frameworks with Java. So

00:21:29.960 --> 00:21:32.200
<v Speaker 2>Spring does a really

00:21:32.280 --> 00:21:33.320
<v Speaker 2>beautiful job.

00:21:33.560 --> 00:21:36.040
<v Speaker 2>As I mentioned, Quark was with two classes.

00:21:36.040 --> 00:21:38.520
<v Speaker 2>Spring provides something pretty similar to that.

00:21:39.235 --> 00:21:41.235
<v Speaker 2>Of course, the beauty of Java is the

00:21:41.235 --> 00:21:42.034
<v Speaker 2>ecosystem.

00:21:42.274 --> 00:21:43.794
<v Speaker 2>You can have Quackus

00:21:44.115 --> 00:21:46.195
<v Speaker 2>with pretty similar capabilities

00:21:46.195 --> 00:21:46.995
<v Speaker 2>using

00:21:46.995 --> 00:21:48.195
<v Speaker 2>two interface

00:21:48.195 --> 00:21:51.390
<v Speaker 2>or so on. I wanna use Spring, so

00:21:51.390 --> 00:21:54.030
<v Speaker 2>you can explore Spring Data where you define

00:21:54.030 --> 00:21:56.429
<v Speaker 2>your entity and then with the interface

00:21:56.590 --> 00:21:59.710
<v Speaker 2>they will handle the whole database connection for

00:21:59.710 --> 00:22:00.190
<v Speaker 2>you.

00:22:00.830 --> 00:22:03.630
<v Speaker 2>Or you want to use everything by your

00:22:03.630 --> 00:22:05.565
<v Speaker 2>bare hands, go for it.

00:22:05.885 --> 00:22:08.205
<v Speaker 2>You have a huge amount of flavors with

00:22:08.205 --> 00:22:10.845
<v Speaker 2>Java. The easiest way, as I said, or

00:22:10.845 --> 00:22:12.284
<v Speaker 2>the most complex way,

00:22:12.525 --> 00:22:14.445
<v Speaker 2>for some random reason, once you learn how

00:22:14.445 --> 00:22:16.845
<v Speaker 2>these things happen behind, you can go explore

00:22:16.845 --> 00:22:17.245
<v Speaker 2>for it.

00:22:17.960 --> 00:22:20.520
<v Speaker 2>About why I learn Java, the stability of

00:22:20.520 --> 00:22:22.440
<v Speaker 2>the language, the ecosystem,

00:22:22.600 --> 00:22:23.960
<v Speaker 2>the community.

00:22:24.520 --> 00:22:27.000
<v Speaker 2>A huge amount of people are behind Java

00:22:27.000 --> 00:22:28.840
<v Speaker 2>right now. So, if you compare it to

00:22:28.840 --> 00:22:29.960
<v Speaker 2>another language, for example,

00:22:30.625 --> 00:22:33.585
<v Speaker 2>as far I know, Microsoft C only

00:22:34.145 --> 00:22:36.544
<v Speaker 2>has a single component behind it, right? That

00:22:36.544 --> 00:22:37.585
<v Speaker 2>is Microsoft.

00:22:38.065 --> 00:22:41.025
<v Speaker 2>So, if Microsoft decided to, okay, I want

00:22:41.025 --> 00:22:41.744
<v Speaker 2>to move,

00:22:42.065 --> 00:22:44.960
<v Speaker 2>the language is gone. In Java, the chance

00:22:44.960 --> 00:22:47.919
<v Speaker 2>that's happened is pretty low because if Oracle

00:22:47.919 --> 00:22:49.759
<v Speaker 2>decides to leave, okay,

00:22:50.000 --> 00:22:53.279
<v Speaker 2>we do have another huge amount of organizations

00:22:53.279 --> 00:22:54.639
<v Speaker 2>working in Java right now.

00:22:55.894 --> 00:22:59.335
<v Speaker 2>Again, thousands of JVMs, thousands of solutions, and

00:22:59.335 --> 00:23:00.054
<v Speaker 2>so on.

00:23:01.815 --> 00:23:03.735
<v Speaker 2>And inside the GCP, we do have the

00:23:03.735 --> 00:23:05.495
<v Speaker 2>Java Education Ecosystems

00:23:05.495 --> 00:23:06.934
<v Speaker 2>to take a look on

00:23:07.254 --> 00:23:09.809
<v Speaker 2>how to learn Java and take care of

00:23:09.809 --> 00:23:11.089
<v Speaker 2>the new generations.

00:23:11.090 --> 00:23:13.409
<v Speaker 2>That's why we do have the RAB

00:23:13.490 --> 00:23:15.409
<v Speaker 2>and new features to make sure that people

00:23:15.409 --> 00:23:16.450
<v Speaker 2>can learn

00:23:16.850 --> 00:23:18.209
<v Speaker 2>easily Java

00:23:18.289 --> 00:23:21.889
<v Speaker 2>and break this myth about Java is super

00:23:21.889 --> 00:23:22.370
<v Speaker 2>hard,

00:23:22.945 --> 00:23:24.465
<v Speaker 2>is understandable,

00:23:24.785 --> 00:23:25.825
<v Speaker 2>and so on.

00:23:26.385 --> 00:23:28.865
<v Speaker 2>Another point that I'd love to highlight in

00:23:28.865 --> 00:23:30.225
<v Speaker 2>Java is

00:23:30.465 --> 00:23:33.345
<v Speaker 2>mainly because Java is a production language.

00:23:34.305 --> 00:23:34.865
<v Speaker 2>And

00:23:35.185 --> 00:23:38.280
<v Speaker 2>verbose is to make easy to read and

00:23:38.280 --> 00:23:40.999
<v Speaker 2>understand your code, especially because on production,

00:23:41.960 --> 00:23:43.239
<v Speaker 2>on finance,

00:23:43.640 --> 00:23:45.559
<v Speaker 2>we also need to read code. It's not

00:23:45.559 --> 00:23:47.480
<v Speaker 2>about read writing features.

00:23:47.720 --> 00:23:49.480
<v Speaker 2>It's about to read and maintain

00:23:50.054 --> 00:23:51.894
<v Speaker 2>what you have. And sometimes

00:23:52.054 --> 00:23:53.654
<v Speaker 2>we have code for

00:23:53.975 --> 00:23:57.414
<v Speaker 2>ten, fifteen years ago, so it

00:23:57.975 --> 00:24:00.614
<v Speaker 2>needs to be readable as much as possible.

00:24:01.414 --> 00:24:03.340
<v Speaker 2>So it's a trade off of language. At

00:24:03.340 --> 00:24:05.419
<v Speaker 2>the end, we are handled with the language

00:24:05.419 --> 00:24:07.500
<v Speaker 2>design and language decisions

00:24:07.500 --> 00:24:10.299
<v Speaker 2>and naturally, okay, I will explore

00:24:10.539 --> 00:24:12.619
<v Speaker 2>the verbosity of Java here

00:24:12.860 --> 00:24:15.100
<v Speaker 2>to make it more readable or I will

00:24:15.100 --> 00:24:16.299
<v Speaker 2>try to reduce

00:24:16.654 --> 00:24:19.215
<v Speaker 2>as much as possible, make the code sometimes

00:24:19.215 --> 00:24:20.254
<v Speaker 2>not readable.

00:24:20.575 --> 00:24:23.375
<v Speaker 2>But even for that, Java has, for example,

00:24:23.375 --> 00:24:25.375
<v Speaker 2>the var variables. So you can do the

00:24:25.375 --> 00:24:27.774
<v Speaker 2>var a equals something.

00:24:28.255 --> 00:24:31.135
<v Speaker 2>So the ecosystem Java is super frequent. So

00:24:31.135 --> 00:24:33.510
<v Speaker 2>come to Java. Fuck. I think I wanna

00:24:33.510 --> 00:24:34.550
<v Speaker 1>erase some Java.

00:24:34.710 --> 00:24:36.630
<v Speaker 1>Alright. And Do wanna go first? Every time

00:24:36.630 --> 00:24:39.030
<v Speaker 2>that you download Java, the JVM right now,

00:24:39.030 --> 00:24:41.910
<v Speaker 2>you will receive a wine, free wine by

00:24:41.910 --> 00:24:42.630
<v Speaker 2>David.

00:24:43.030 --> 00:24:45.990
<v Speaker 0>Oh. Oh. What? What's

00:24:45.990 --> 00:24:46.150
<v Speaker 0>this?

00:24:49.225 --> 00:24:51.625
<v Speaker 0>I guess one of my questions is how

00:24:51.625 --> 00:24:54.025
<v Speaker 0>often do you run into the misconception

00:24:54.025 --> 00:24:56.185
<v Speaker 0>that Java is still all Oracle

00:24:56.425 --> 00:24:58.905
<v Speaker 0>after they you know, because Sun is the

00:24:59.539 --> 00:25:02.419
<v Speaker 0>the originator of Java, everybody thinks that, oh,

00:25:02.419 --> 00:25:04.500
<v Speaker 0>look. Sun got bought by Oracle. Therefore, Java

00:25:04.500 --> 00:25:06.419
<v Speaker 0>is an Oracle thing. How often do you

00:25:06.419 --> 00:25:07.299
<v Speaker 0>run into that?

00:25:07.940 --> 00:25:09.299
<v Speaker 2>I see the question

00:25:09.380 --> 00:25:10.499
<v Speaker 2>all the time.

00:25:11.220 --> 00:25:13.779
<v Speaker 0>Oh, I bet. I bet. Every single day.

00:25:14.155 --> 00:25:16.794
<v Speaker 2>Especially because if you look to another language,

00:25:17.115 --> 00:25:20.235
<v Speaker 2>it's not happened more often, right? For example,

00:25:20.235 --> 00:25:23.674
<v Speaker 2>Kotlin usually it has a huge community but

00:25:23.915 --> 00:25:27.595
<v Speaker 2>it's supported by a unique company, Go, if

00:25:27.595 --> 00:25:28.955
<v Speaker 2>I'm not mistaken, the same.

00:25:29.630 --> 00:25:32.590
<v Speaker 2>If you're looking to, I guess, PHP has

00:25:32.590 --> 00:25:33.790
<v Speaker 2>a different approach.

00:25:34.350 --> 00:25:37.150
<v Speaker 2>But in general, we do have a huge

00:25:37.150 --> 00:25:38.350
<v Speaker 2>company behind

00:25:38.590 --> 00:25:40.830
<v Speaker 2>with people contributing into.

00:25:41.070 --> 00:25:43.945
<v Speaker 2>So naturally, the people think about, okay, it

00:25:43.945 --> 00:25:45.865
<v Speaker 2>might be the same with Java,

00:25:45.865 --> 00:25:48.665
<v Speaker 2>but not. Java has a huge

00:25:48.665 --> 00:25:50.825
<v Speaker 2>JCP, Java community process,

00:25:51.465 --> 00:25:53.945
<v Speaker 2>to make sure that we do have a

00:25:53.945 --> 00:25:55.145
<v Speaker 2>huge transparency

00:25:55.145 --> 00:25:56.505
<v Speaker 2>on the JSR,

00:25:56.505 --> 00:25:58.505
<v Speaker 2>the Java specification request,

00:25:59.400 --> 00:26:01.960
<v Speaker 2>where people can vote, you can review,

00:26:01.960 --> 00:26:05.400
<v Speaker 2>and it does not belong only to a

00:26:05.400 --> 00:26:08.120
<v Speaker 2>single company. It's a failed tolerance

00:26:08.600 --> 00:26:09.400
<v Speaker 2>in

00:26:09.640 --> 00:26:10.679
<v Speaker 2>the process.

00:26:11.080 --> 00:26:11.400
<v Speaker 2>Great.

00:26:12.065 --> 00:26:14.865
<v Speaker 1>You mentioned Kotlin there. I think that's the

00:26:14.865 --> 00:26:16.784
<v Speaker 1>programming language that spun out of

00:26:17.184 --> 00:26:19.505
<v Speaker 1>JetBrains, if I remember correctly. Right? Yes. Yes.

00:26:19.505 --> 00:26:21.264
<v Speaker 1>There's also Scala,

00:26:21.265 --> 00:26:24.785
<v Speaker 1>there's Clojure. I'm sure there's other major JVM

00:26:24.785 --> 00:26:28.960
<v Speaker 1>based languages. Like, are they still important in

00:26:28.960 --> 00:26:29.920
<v Speaker 1>2025,

00:26:29.920 --> 00:26:32.240
<v Speaker 1>given the fact that the Java language itself

00:26:32.240 --> 00:26:35.280
<v Speaker 1>is continuing to evolve? Is the need for

00:26:35.280 --> 00:26:38.080
<v Speaker 1>these other languages becoming less? Or are those

00:26:38.080 --> 00:26:40.685
<v Speaker 1>still pushing forward and innovating in their own

00:26:40.685 --> 00:26:43.405
<v Speaker 1>right? And at what point do you jump

00:26:43.405 --> 00:26:45.325
<v Speaker 1>between the languages when you're under JVM, or

00:26:45.325 --> 00:26:47.325
<v Speaker 1>do you stick firmly within the Java camp

00:26:47.325 --> 00:26:47.965
<v Speaker 1>itself?

00:26:48.925 --> 00:26:49.725
<v Speaker 2>I'll say

00:26:49.965 --> 00:26:50.845
<v Speaker 2>with Java

00:26:51.070 --> 00:26:52.990
<v Speaker 2>and the JVM specification,

00:26:53.870 --> 00:26:55.549
<v Speaker 2>but as highlight,

00:26:56.030 --> 00:26:59.150
<v Speaker 2>the JVM does not understand Java code.

00:26:59.630 --> 00:27:01.630
<v Speaker 2>The JVM understands

00:27:02.030 --> 00:27:05.345
<v Speaker 2>byte. So at the end, if the language

00:27:05.345 --> 00:27:08.304
<v Speaker 2>generates byte code for Java, it doesn't matter.

00:27:08.705 --> 00:27:11.024
<v Speaker 2>Okay? About those languages

00:27:11.024 --> 00:27:12.704
<v Speaker 2>from Java,

00:27:12.784 --> 00:27:13.825
<v Speaker 2>like Scala,

00:27:13.825 --> 00:27:16.464
<v Speaker 2>Kotlin, and so on, those

00:27:17.105 --> 00:27:18.144
<v Speaker 2>have some

00:27:18.730 --> 00:27:19.929
<v Speaker 2>specializations,

00:27:19.929 --> 00:27:22.970
<v Speaker 2>some niche. For example, as far as Kotlin

00:27:22.970 --> 00:27:25.049
<v Speaker 2>goes mostly around mobile

00:27:25.690 --> 00:27:27.450
<v Speaker 2>application with Android,

00:27:27.450 --> 00:27:29.450
<v Speaker 2>Scala goes more to

00:27:29.610 --> 00:27:31.049
<v Speaker 2>functional programming,

00:27:31.049 --> 00:27:32.490
<v Speaker 2>if I'm not mistaken on that.

00:27:33.065 --> 00:27:35.705
<v Speaker 2>I do believe those are important and makes

00:27:35.705 --> 00:27:37.465
<v Speaker 2>the Java ecosystem great.

00:27:37.785 --> 00:27:40.745
<v Speaker 2>However, those grow more to the niche. And

00:27:40.745 --> 00:27:41.544
<v Speaker 2>Java

00:27:41.865 --> 00:27:44.265
<v Speaker 2>brings more the generic approach. So you can

00:27:44.265 --> 00:27:46.424
<v Speaker 2>do a little bit of functional programming with

00:27:46.424 --> 00:27:47.225
<v Speaker 2>Java.

00:27:47.225 --> 00:27:49.260
<v Speaker 2>You can do a little bit of object

00:27:49.260 --> 00:27:51.020
<v Speaker 2>oriented programming Java,

00:27:51.020 --> 00:27:53.900
<v Speaker 2>data oriented programming Java, and so on.

00:27:54.220 --> 00:27:54.780
<v Speaker 2>So

00:27:55.180 --> 00:27:56.700
<v Speaker 2>it's not specialized,

00:27:57.420 --> 00:27:59.740
<v Speaker 2>it's specialized like another language,

00:28:00.060 --> 00:28:00.540
<v Speaker 2>but

00:28:01.165 --> 00:28:03.405
<v Speaker 2>with Java you can do a little bit

00:28:03.405 --> 00:28:04.445
<v Speaker 2>of those

00:28:04.765 --> 00:28:05.644
<v Speaker 2>features

00:28:06.125 --> 00:28:07.005
<v Speaker 2>directly.

00:28:07.085 --> 00:28:09.644
<v Speaker 1>Awesome. Thank you. Alright. Okay.

00:28:10.845 --> 00:28:12.685
<v Speaker 1>Is there any question you would like us

00:28:12.685 --> 00:28:14.285
<v Speaker 1>to ask you before we wrap this up?

00:28:15.110 --> 00:28:17.830
<v Speaker 2>Do you know why we have Google Chrome

00:28:17.830 --> 00:28:19.270
<v Speaker 2>and Slack right now?

00:28:19.590 --> 00:28:20.230
<v Speaker 0>No?

00:28:20.790 --> 00:28:22.630
<v Speaker 0>So you want us to ask you, so

00:28:22.630 --> 00:28:25.670
<v Speaker 0>why why do we have Google Chrome and

00:28:25.670 --> 00:28:26.789
<v Speaker 0>Slack right now?

00:28:27.190 --> 00:28:29.429
<v Speaker 2>To prove the JVX is not happy

00:28:29.670 --> 00:28:32.764
<v Speaker 2>like everybody said. Interesting. I don't get it.

00:28:35.165 --> 00:28:37.965
<v Speaker 0>Can elaborate if you want. I'm really I'm

00:28:37.965 --> 00:28:39.725
<v Speaker 1>really happy. This is giving me a lot

00:28:39.725 --> 00:28:41.085
<v Speaker 1>of fit for thought. Like, I never thought

00:28:41.085 --> 00:28:44.045
<v Speaker 1>I'd be considering writing any Java, but knowing

00:28:44.045 --> 00:28:46.205
<v Speaker 1>that it's a language that's modernized to the

00:28:46.205 --> 00:28:47.540
<v Speaker 1>point I can run it successfully in a

00:28:47.540 --> 00:28:49.540
<v Speaker 1>container. I love what Apple are doing with

00:28:49.540 --> 00:28:51.460
<v Speaker 1>pickle, and I'm like, you know, am I

00:28:51.460 --> 00:28:52.900
<v Speaker 1>missing out on something by not playing with

00:28:52.900 --> 00:28:55.220
<v Speaker 1>this? My my old rusty head is going,

00:28:55.220 --> 00:28:57.140
<v Speaker 1>oh, maybe I need to start poking this

00:28:57.140 --> 00:28:59.140
<v Speaker 1>thing again. So So now now I know

00:28:59.140 --> 00:29:01.380
<v Speaker 0>why you kept shoving all that Java code

00:29:01.380 --> 00:29:02.260
<v Speaker 0>off onto me

00:29:03.005 --> 00:29:05.245
<v Speaker 0>when we were at the same company. Yeah.

00:29:05.245 --> 00:29:08.124
<v Speaker 0>Okay. I understand now. Thanks for joining us.

00:29:08.284 --> 00:29:10.044
<v Speaker 1>If you wanna keep up with us, consider

00:29:10.044 --> 00:29:12.764
<v Speaker 1>subscribing to the podcast on your favorite podcasting

00:29:12.764 --> 00:29:15.965
<v Speaker 1>app or even go to cloudnativecompass.fm.

00:29:16.410 --> 00:29:17.850
<v Speaker 0>And if you want us to talk with

00:29:17.850 --> 00:29:20.730
<v Speaker 0>someone specific or cover a specific topic,

00:29:20.970 --> 00:29:22.970
<v Speaker 0>reach out to us on any social media

00:29:22.970 --> 00:29:23.610
<v Speaker 0>platform.

00:29:23.850 --> 00:29:26.170
<v Speaker 1>Until next time when exploring the cloud native

00:29:26.170 --> 00:29:26.890
<v Speaker 1>landscape

00:29:26.970 --> 00:29:29.690
<v Speaker 1>on 3. On 3. 1,

00:29:30.010 --> 00:29:30.570
<v Speaker 1>2,

00:29:30.810 --> 00:29:31.130
<v Speaker 1>3.

00:29:31.780 --> 00:29:33.700
<v Speaker 1>Don't forget your Don't forget your compass.
