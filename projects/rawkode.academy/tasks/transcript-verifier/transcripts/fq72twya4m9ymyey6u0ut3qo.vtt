WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: b88d36db-4b21-4097-921d-c2138a461f71
Created: 2025-04-29T13:45:06.427Z
Duration: 487.8113
Channels: 1

00:00:00.160 --> 00:00:03.199
<v Speaker 0>Hello and welcome back to the Rawkode Academy.

00:00:03.199 --> 00:00:05.440
<v Speaker 0>I'm your host, David Flanagan.

00:00:05.440 --> 00:00:07.680
<v Speaker 0>We're continuing our complete guide to Spin by

00:00:07.680 --> 00:00:09.760
<v Speaker 0>taking a look at some new features in

00:00:09.760 --> 00:00:12.719
<v Speaker 0>Spin one point o. This is a huge

00:00:12.719 --> 00:00:15.455
<v Speaker 0>milestone for Spin. Reaching one point o gives

00:00:15.455 --> 00:00:17.295
<v Speaker 0>us all some assurances

00:00:17.295 --> 00:00:20.654
<v Speaker 0>that Spin is now ready to use in

00:00:20.654 --> 00:00:21.295
<v Speaker 0>production.

00:00:21.455 --> 00:00:23.535
<v Speaker 0>In today's video, we're gonna focus on what

00:00:23.535 --> 00:00:26.335
<v Speaker 0>I personally feel is the coolest feature. What

00:00:26.335 --> 00:00:26.974
<v Speaker 0>is that feature?

00:00:27.490 --> 00:00:29.730
<v Speaker 0>OCI registry support.

00:00:29.730 --> 00:00:32.850
<v Speaker 0>You can now package your Spin applications as

00:00:32.850 --> 00:00:34.290
<v Speaker 0>an OCI artifact

00:00:34.450 --> 00:00:36.930
<v Speaker 0>and push it to an OCI registry

00:00:37.090 --> 00:00:39.809
<v Speaker 0>like Docker Hub or GHCR.

00:00:39.915 --> 00:00:42.075
<v Speaker 0>And while this is cool as it is,

00:00:42.235 --> 00:00:43.915
<v Speaker 0>there's a few other things that we can

00:00:43.915 --> 00:00:46.235
<v Speaker 0>do with these artifacts too and you'll see

00:00:46.235 --> 00:00:49.035
<v Speaker 0>them by watching the rest of this video.

00:00:49.035 --> 00:00:50.555
<v Speaker 0>Let's take a look. So what do we

00:00:50.555 --> 00:00:51.275
<v Speaker 0>have here?

00:00:51.595 --> 00:00:55.035
<v Speaker 0>This is a very standard

00:00:54.260 --> 00:00:58.739
<v Speaker 0>unedited spin new project using the Rust SDK.

00:00:59.540 --> 00:01:01.380
<v Speaker 0>I haven't modified anything.

00:01:01.460 --> 00:01:04.260
<v Speaker 0>This is just printing out hello fermion

00:01:04.260 --> 00:01:06.740
<v Speaker 0>with an HTTP header of the bar.

00:01:07.435 --> 00:01:09.995
<v Speaker 0>Again, I haven't touched anything. All I ran

00:01:09.995 --> 00:01:11.675
<v Speaker 0>was spin new.

00:01:12.635 --> 00:01:15.435
<v Speaker 0>From here, we can run spin build and

00:01:15.435 --> 00:01:18.235
<v Speaker 0>because I've already compiled it, it's super fast.

00:01:18.955 --> 00:01:21.270
<v Speaker 0>We can now run spin up and now

00:01:21.270 --> 00:01:23.110
<v Speaker 0>if we pop over to the browser, we

00:01:23.110 --> 00:01:23.830
<v Speaker 0>will see

00:01:24.230 --> 00:01:27.030
<v Speaker 0>our application is running on port 3,000 and

00:01:27.030 --> 00:01:28.630
<v Speaker 0>says hello Fermion.

00:01:28.950 --> 00:01:30.870
<v Speaker 0>We can even see the logs in our

00:01:30.870 --> 00:01:33.990
<v Speaker 0>console. So what is the next stage? Let's

00:01:33.990 --> 00:01:35.990
<v Speaker 0>build and push an OCI

00:01:35.990 --> 00:01:36.630
<v Speaker 0>artifact.

00:01:36.815 --> 00:01:39.055
<v Speaker 0>How do we do that? Well, I'm going

00:01:39.055 --> 00:01:40.735
<v Speaker 0>to run just push.

00:01:40.895 --> 00:01:42.895
<v Speaker 0>Inside of this directory, I have added a

00:01:42.895 --> 00:01:44.655
<v Speaker 0>just file and don't worry, we'll take a

00:01:44.655 --> 00:01:46.255
<v Speaker 0>look at it in just a moment. When

00:01:46.255 --> 00:01:48.895
<v Speaker 0>we run just push, you'll see that this

00:01:48.895 --> 00:01:51.295
<v Speaker 0>is a spin registry push command,

00:01:52.060 --> 00:01:57.420
<v Speaker 0>which takes a tag of GHCRDotIOSlashRawkodeSlashSpinDashOLColonV

00:01:57.420 --> 00:02:00.460
<v Speaker 0>1. I have now built an OCI

00:02:00.540 --> 00:02:03.260
<v Speaker 0>artifact, an OCI image, and pushed it to

00:02:03.260 --> 00:02:07.145
<v Speaker 0>GitHub's container registry. Don't believe me? Well, let's

00:02:07.145 --> 00:02:08.665
<v Speaker 0>pop over to GitHub

00:02:08.905 --> 00:02:11.385
<v Speaker 0>and refresh. And you'll see that I pushed

00:02:11.385 --> 00:02:13.785
<v Speaker 0>this image seven minutes ago.

00:02:14.105 --> 00:02:14.825
<v Speaker 0>Awesome.

00:02:14.905 --> 00:02:17.545
<v Speaker 0>So let's make a change and repush our

00:02:17.545 --> 00:02:19.385
<v Speaker 0>image. We'll go over to the code.

00:02:19.785 --> 00:02:20.905
<v Speaker 0>We'll say hello world,

00:02:21.560 --> 00:02:24.040
<v Speaker 0>like so. So now that we've modified that,

00:02:24.040 --> 00:02:26.040
<v Speaker 0>let's pop over here and this time we'll

00:02:26.040 --> 00:02:28.520
<v Speaker 0>just run the registry command ourselves.

00:02:29.000 --> 00:02:31.720
<v Speaker 0>We'll do registry push GHCR

00:02:31.879 --> 00:02:34.120
<v Speaker 0>raw code spin hello.

00:02:34.280 --> 00:02:36.280
<v Speaker 0>Only this time we'll call it v two.

00:02:36.575 --> 00:02:37.935
<v Speaker 0>What we should see is that we got

00:02:37.935 --> 00:02:40.015
<v Speaker 0>a different hash and two

00:02:40.254 --> 00:02:41.614
<v Speaker 0>content addressable

00:02:41.614 --> 00:02:44.174
<v Speaker 0>releases available on GSCR's

00:02:44.174 --> 00:02:46.495
<v Speaker 0>web page. Pop back over to the browser

00:02:46.495 --> 00:02:48.415
<v Speaker 0>and hit refresh. And now we can see

00:02:48.415 --> 00:02:51.375
<v Speaker 0>we have v two pushed a moment ago.

00:02:51.455 --> 00:02:51.694
<v Speaker 0>Okay.

00:02:52.370 --> 00:02:54.849
<v Speaker 0>But what can we do with our OCI

00:02:54.849 --> 00:02:57.329
<v Speaker 0>image once it's in an OCI registry? Well,

00:02:57.329 --> 00:03:00.290
<v Speaker 0>let's run just spin up. Now as you'll

00:03:00.290 --> 00:03:02.209
<v Speaker 0>see, when I hit return, the command is

00:03:02.209 --> 00:03:04.609
<v Speaker 0>a slightly modified spin up. And in fact,

00:03:04.609 --> 00:03:05.969
<v Speaker 0>I don't even need to be in this

00:03:05.969 --> 00:03:08.635
<v Speaker 0>directory to run this image. We're using spin

00:03:08.635 --> 00:03:10.635
<v Speaker 0>up dash f, which is telling it to

00:03:10.635 --> 00:03:15.755
<v Speaker 0>go to ghcr.i0/rawkode/spinhellovone.

00:03:15.755 --> 00:03:17.835
<v Speaker 0>This pulls down the artifact

00:03:17.835 --> 00:03:19.915
<v Speaker 0>and runs it locally. And again, if I

00:03:19.915 --> 00:03:22.849
<v Speaker 0>go to my browser, we get hello fermion.

00:03:22.849 --> 00:03:25.250
<v Speaker 0>But let's change this and run spin up

00:03:25.250 --> 00:03:28.050
<v Speaker 0>dash f j c r Rawkode

00:03:28.050 --> 00:03:29.330
<v Speaker 0>spin hello

00:03:30.129 --> 00:03:33.330
<v Speaker 0>v two. And again, it'll run on port

00:03:33.330 --> 00:03:34.209
<v Speaker 0>3,000

00:03:34.535 --> 00:03:35.895
<v Speaker 0>and when we reload,

00:03:35.975 --> 00:03:37.815
<v Speaker 0>we get hello world. So we now have

00:03:37.815 --> 00:03:40.615
<v Speaker 0>the ability to consume our spin applications

00:03:40.615 --> 00:03:43.335
<v Speaker 0>stored as OCI images instead of an OCI

00:03:43.335 --> 00:03:44.215
<v Speaker 0>registry.

00:03:44.295 --> 00:03:46.695
<v Speaker 0>And that is pretty cool. So let's take

00:03:46.695 --> 00:03:48.855
<v Speaker 0>it one step further and see something cool

00:03:48.855 --> 00:03:51.120
<v Speaker 0>that Docker also announced recently.

00:03:51.280 --> 00:03:53.520
<v Speaker 0>This is a spin application

00:03:53.599 --> 00:03:55.360
<v Speaker 0>using BarfollowMU.

00:03:55.439 --> 00:03:57.680
<v Speaker 0>BarfollowMU is a CMS

00:03:57.680 --> 00:03:58.959
<v Speaker 0>for WebAssembly.

00:03:58.959 --> 00:04:00.640
<v Speaker 0>We can take a look at the spin.toml

00:04:00.640 --> 00:04:02.799
<v Speaker 0>and see that this is just your standard

00:04:02.799 --> 00:04:04.079
<v Speaker 0>spin.toml.

00:04:04.445 --> 00:04:07.325
<v Speaker 0>It points to a WebAssembly module, in this

00:04:07.325 --> 00:04:09.405
<v Speaker 0>case, modules Bartholomew.

00:04:09.645 --> 00:04:11.965
<v Speaker 0>Also have a Dockerfile from scratch,

00:04:12.205 --> 00:04:14.845
<v Speaker 0>copy everything and the entry point is the

00:04:14.845 --> 00:04:16.125
<v Speaker 0>WebAssembly module itself.

00:04:16.790 --> 00:04:20.870
<v Speaker 0>Let's do docker image build dash t example

00:04:20.870 --> 00:04:22.870
<v Speaker 0>like so. Now, I've already built it to

00:04:22.870 --> 00:04:24.550
<v Speaker 0>speed it up, but it does normally take

00:04:24.550 --> 00:04:26.790
<v Speaker 0>a few seconds. Now that we have a

00:04:26.790 --> 00:04:29.510
<v Speaker 0>standard docker container image built now,

00:04:29.830 --> 00:04:32.425
<v Speaker 0>we can do docker container run, run time

00:04:32.425 --> 00:04:33.225
<v Speaker 0>equals

00:04:33.945 --> 00:04:36.425
<v Speaker 0>container d spin v one

00:04:36.825 --> 00:04:37.785
<v Speaker 0>mapping

00:04:37.945 --> 00:04:38.905
<v Speaker 0>the port,

00:04:39.625 --> 00:04:40.425
<v Speaker 0>like so.

00:04:40.825 --> 00:04:42.185
<v Speaker 0>And we want to run

00:04:42.425 --> 00:04:43.465
<v Speaker 0>the example

00:04:43.625 --> 00:04:46.600
<v Speaker 0>image that we have just built, like so.

00:04:46.760 --> 00:04:48.280
<v Speaker 0>Then we can come back over to our

00:04:48.280 --> 00:04:51.400
<v Speaker 0>browser and hit refresh. And now we see

00:04:51.639 --> 00:04:53.400
<v Speaker 0>the Barfolme new example

00:04:53.480 --> 00:04:55.240
<v Speaker 0>from the Docker documentation

00:04:55.400 --> 00:04:58.120
<v Speaker 0>of building and running Spin applications.

00:04:58.444 --> 00:05:00.685
<v Speaker 0>It has never been easier.

00:05:00.764 --> 00:05:02.044
<v Speaker 0>Now I just want to show one more

00:05:02.044 --> 00:05:04.205
<v Speaker 0>thing from the Docker support because it doesn't

00:05:04.205 --> 00:05:06.365
<v Speaker 0>stop at Docker image build and Docker container

00:05:06.365 --> 00:05:09.245
<v Speaker 0>run. You can actually add a Docker compose

00:05:09.245 --> 00:05:12.125
<v Speaker 0>dot YAML with any dependent services that you

00:05:12.125 --> 00:05:15.060
<v Speaker 0>have. Here we have a database of Postgres,

00:05:15.060 --> 00:05:18.100
<v Speaker 0>and we're also pulling down our example

00:05:18.340 --> 00:05:20.580
<v Speaker 0>image and given it the runtime information as

00:05:20.580 --> 00:05:21.620
<v Speaker 0>part of the spec.

00:05:22.100 --> 00:05:24.420
<v Speaker 0>Meaning, we can now do Docker Compose up

00:05:24.420 --> 00:05:27.014
<v Speaker 0>like so, And we'll see the database logs

00:05:27.014 --> 00:05:28.855
<v Speaker 0>as it begins to initialize.

00:05:29.495 --> 00:05:31.014
<v Speaker 0>But if we pop over here

00:05:31.574 --> 00:05:33.415
<v Speaker 0>and refresh our website,

00:05:33.495 --> 00:05:34.935
<v Speaker 0>and then go back to the terminal, you'll

00:05:34.935 --> 00:05:37.014
<v Speaker 0>see the request come in just like any

00:05:37.014 --> 00:05:38.694
<v Speaker 0>other Docker Compose app.

00:05:39.240 --> 00:05:40.440
<v Speaker 0>Sweet. Okay.

00:05:40.759 --> 00:05:43.560
<v Speaker 0>Let's finish this off with something even cooler.

00:05:43.560 --> 00:05:45.800
<v Speaker 0>Because our spin applications can now be shared

00:05:45.800 --> 00:05:48.120
<v Speaker 0>as OCI artifacts, we can hook in to

00:05:48.120 --> 00:05:51.240
<v Speaker 0>other tools that work with OCI artifacts.

00:05:51.319 --> 00:05:53.479
<v Speaker 0>And here, I'm talking about cosign.

00:05:53.845 --> 00:05:55.845
<v Speaker 0>What if we can actually sign

00:05:55.845 --> 00:05:58.645
<v Speaker 0>our spin applications that we ship as OCI

00:05:58.645 --> 00:05:59.525
<v Speaker 0>Artifacts?

00:05:59.525 --> 00:06:01.125
<v Speaker 0>So let's try it.

00:06:01.605 --> 00:06:03.205
<v Speaker 0>Let's do cosign

00:06:03.205 --> 00:06:05.685
<v Speaker 0>sign GHCRRawkode

00:06:05.685 --> 00:06:06.965
<v Speaker 0>Spin hello

00:06:07.285 --> 00:06:08.005
<v Speaker 0>b one.

00:06:09.850 --> 00:06:12.250
<v Speaker 0>This will pop open a browser allowing me

00:06:12.250 --> 00:06:15.530
<v Speaker 0>to connect with GitHub and sign our image

00:06:15.770 --> 00:06:17.130
<v Speaker 0>with those credentials.

00:06:17.290 --> 00:06:18.810
<v Speaker 0>So we can click yes on that and

00:06:18.810 --> 00:06:19.690
<v Speaker 0>the signature

00:06:19.930 --> 00:06:22.250
<v Speaker 0>will be pushed. So let's verify

00:06:22.605 --> 00:06:25.885
<v Speaker 0>the signature. So let's run cosign verify

00:06:25.965 --> 00:06:28.525
<v Speaker 0>g h c r dot I o slash

00:06:28.525 --> 00:06:31.085
<v Speaker 0>Rawkode slash Spin Hello

00:06:31.085 --> 00:06:31.965
<v Speaker 0>v two.

00:06:32.845 --> 00:06:34.205
<v Speaker 0>And we just need to add a few

00:06:34.205 --> 00:06:36.860
<v Speaker 0>flags because we use keyless signing, which means

00:06:36.860 --> 00:06:38.860
<v Speaker 0>we have to say that the certificate

00:06:39.259 --> 00:06:40.220
<v Speaker 0>identity

00:06:40.539 --> 00:06:41.500
<v Speaker 0>was me.

00:06:42.620 --> 00:06:43.419
<v Speaker 0>Like so.

00:06:43.819 --> 00:06:45.500
<v Speaker 0>And that the certificate

00:06:45.580 --> 00:06:46.780
<v Speaker 0>OIDC

00:06:47.900 --> 00:06:48.780
<v Speaker 0>issuer

00:06:49.315 --> 00:06:51.955
<v Speaker 0>with h t p s github dot com

00:06:51.955 --> 00:06:53.235
<v Speaker 0>slash login

00:06:53.634 --> 00:06:54.675
<v Speaker 0>slash o auth.

00:06:55.155 --> 00:06:57.555
<v Speaker 0>And make sure you spell all the all

00:06:57.555 --> 00:06:58.675
<v Speaker 0>the things correct.

00:06:58.995 --> 00:07:00.835
<v Speaker 0>Certificate.

00:07:01.250 --> 00:07:03.250
<v Speaker 0>No. We didn't sign v two, so we

00:07:03.250 --> 00:07:05.490
<v Speaker 0>get an error that no matching signatures were

00:07:05.490 --> 00:07:06.050
<v Speaker 0>there,

00:07:06.370 --> 00:07:07.810
<v Speaker 0>which is what we expect.

00:07:08.290 --> 00:07:09.730
<v Speaker 0>But I like to show it not working

00:07:09.730 --> 00:07:12.610
<v Speaker 0>before we show the shiny. So now v

00:07:12.610 --> 00:07:15.215
<v Speaker 0>one. And the signature is actually correct, but

00:07:15.215 --> 00:07:16.895
<v Speaker 0>I signed up with David at Rawkode dot

00:07:16.895 --> 00:07:19.775
<v Speaker 0>academy and not David@Rawkode.dev.

00:07:19.775 --> 00:07:20.975
<v Speaker 0>Quick fix later.

00:07:21.935 --> 00:07:24.255
<v Speaker 0>Clear the screen. So looks like magic. And

00:07:24.255 --> 00:07:26.975
<v Speaker 0>now we have everything from the transparency log

00:07:27.389 --> 00:07:30.830
<v Speaker 0>that assures us that this spin application

00:07:30.830 --> 00:07:32.910
<v Speaker 0>has been signed for by me

00:07:33.070 --> 00:07:35.070
<v Speaker 0>and it's the same one that is available

00:07:35.070 --> 00:07:37.390
<v Speaker 0>on the OCI registry.

00:07:37.470 --> 00:07:38.110
<v Speaker 0>Awesome.

00:07:38.350 --> 00:07:41.155
<v Speaker 0>So that's it. Since Spin one point o,

00:07:41.155 --> 00:07:43.955
<v Speaker 0>you can now build, ship, and run your

00:07:43.955 --> 00:07:47.075
<v Speaker 0>Spin applications as OCI artifacts. This allows you

00:07:47.075 --> 00:07:48.835
<v Speaker 0>to hook in to all of the existing

00:07:48.835 --> 00:07:50.195
<v Speaker 0>tooling in that space,

00:07:50.435 --> 00:07:54.050
<v Speaker 0>like Docker desktop, Docker compose, and even cosign.

00:07:54.050 --> 00:07:55.810
<v Speaker 0>In a video coming up later this week,

00:07:55.810 --> 00:07:57.570
<v Speaker 0>we'll be taking a look at taking these

00:07:57.570 --> 00:08:00.290
<v Speaker 0>OCI artifacts and running our spin applications on

00:08:00.290 --> 00:08:01.169
<v Speaker 0>Kubernetes.

00:08:01.169 --> 00:08:02.690
<v Speaker 0>We'll see you then. Have a great day.
