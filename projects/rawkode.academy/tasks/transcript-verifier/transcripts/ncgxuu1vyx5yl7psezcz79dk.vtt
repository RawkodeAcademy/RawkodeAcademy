WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 9c8b82ae-57f7-454d-85b1-d943c8c1ede7
Created: 2025-04-29T13:35:18.868Z
Duration: 884.39655
Channels: 1

00:00:00.160 --> 00:00:03.040
<v Speaker 0>Hello and welcome back to the Rawkode Academy.

00:00:03.040 --> 00:00:05.279
<v Speaker 0>You may remember recently we did a video

00:00:05.279 --> 00:00:06.960
<v Speaker 0>on Scribe Security.

00:00:07.120 --> 00:00:08.799
<v Speaker 0>They offer a platform

00:00:08.800 --> 00:00:11.200
<v Speaker 0>that allows you to collect evidence,

00:00:11.360 --> 00:00:14.480
<v Speaker 0>visualize that evidence and understand the supply chain

00:00:14.480 --> 00:00:17.175
<v Speaker 0>of your software. What we didn't cover in

00:00:17.175 --> 00:00:19.895
<v Speaker 0>that video is that Scribes Security's platform also

00:00:19.895 --> 00:00:22.215
<v Speaker 0>has a command line application

00:00:22.455 --> 00:00:23.974
<v Speaker 0>called Valint.

00:00:24.455 --> 00:00:26.055
<v Speaker 0>And we're gonna take a look at using

00:00:26.055 --> 00:00:27.095
<v Speaker 0>Valint today

00:00:27.800 --> 00:00:30.759
<v Speaker 0>to collect that evidence and store it. Not

00:00:30.759 --> 00:00:32.840
<v Speaker 0>only that, we're gonna take a look at

00:00:32.840 --> 00:00:34.520
<v Speaker 0>enforcing policies

00:00:34.520 --> 00:00:36.600
<v Speaker 0>to make sure that your software and supply

00:00:36.600 --> 00:00:39.000
<v Speaker 0>chain are up to scratch. So let's take

00:00:39.000 --> 00:00:42.120
<v Speaker 0>a quick look at the scribe security documentation

00:00:41.855 --> 00:00:43.455
<v Speaker 0>for Valant.

00:00:43.935 --> 00:00:46.415
<v Speaker 0>Okay. Here we have the documentation.

00:00:47.215 --> 00:00:48.975
<v Speaker 0>As I said, Valant is a command line

00:00:48.975 --> 00:00:49.775
<v Speaker 0>application.

00:00:50.095 --> 00:00:52.815
<v Speaker 0>Why is this interesting? Well, it means you

00:00:52.815 --> 00:00:56.015
<v Speaker 0>can run everything you're about to see locally

00:00:55.410 --> 00:00:57.730
<v Speaker 0>just as I am running it locally on

00:00:57.730 --> 00:01:00.210
<v Speaker 0>my machine. Not only that, because it's just

00:01:00.210 --> 00:01:01.570
<v Speaker 0>a command line application,

00:01:01.970 --> 00:01:04.530
<v Speaker 0>you can run it in your CICD pipeline.

00:01:04.530 --> 00:01:07.010
<v Speaker 0>You want to run Valant and GitHub actions?

00:01:07.330 --> 00:01:09.405
<v Speaker 0>Go for it. Valant can even be run

00:01:09.405 --> 00:01:12.604
<v Speaker 0>as an admission controller within a Kubernetes cluster,

00:01:12.685 --> 00:01:15.325
<v Speaker 0>allowing you to enforce policies that verify

00:01:15.325 --> 00:01:18.924
<v Speaker 0>your supply chain at runtime and production. So

00:01:18.924 --> 00:01:21.405
<v Speaker 0>how do we get started? Well, the documentation

00:01:21.405 --> 00:01:24.110
<v Speaker 0>has two ways to get access to Valant.

00:01:24.270 --> 00:01:26.910
<v Speaker 0>Number one, curl and pipe to your shell.

00:01:26.910 --> 00:01:31.870
<v Speaker 0>You can grab it from get.scrapesecurity.com/install.sh,

00:01:31.950 --> 00:01:33.470
<v Speaker 0>where if you put that through a shell,

00:01:33.470 --> 00:01:35.230
<v Speaker 0>you will get your Valant in your local

00:01:35.230 --> 00:01:39.275
<v Speaker 0>directory. Or you can pull the Valiant container

00:01:39.275 --> 00:01:49.995
<v Speaker 0>image from their JFrog instance, which is scrapesecurity.jfrog.i0/scrape-docker-public-local/

00:01:50.315 --> 00:01:52.729
<v Speaker 0>valiant latest. Of course, all of this will

00:01:52.729 --> 00:01:54.250
<v Speaker 0>be in the documentation and we will make

00:01:54.250 --> 00:01:56.090
<v Speaker 0>links to it in the show notes below.

00:01:56.090 --> 00:01:57.770
<v Speaker 0>So you don't have to listen to me

00:01:57.770 --> 00:01:59.850
<v Speaker 0>read out slashes, dashes, and all sorts in

00:01:59.850 --> 00:02:02.729
<v Speaker 0>between. However, get yourself access to Valent and

00:02:02.729 --> 00:02:05.049
<v Speaker 0>you can follow along with this tutorial. So

00:02:05.049 --> 00:02:07.289
<v Speaker 0>as I said, Valent allows you to collect

00:02:07.505 --> 00:02:10.785
<v Speaker 0>evidence to help you build out supply chain

00:02:10.785 --> 00:02:12.385
<v Speaker 0>security posture.

00:02:12.385 --> 00:02:14.705
<v Speaker 0>That evidence can come from Python or from

00:02:14.705 --> 00:02:16.865
<v Speaker 0>PyPI as we can see on the support

00:02:16.865 --> 00:02:19.265
<v Speaker 0>table here. It also comes from NPM,

00:02:19.620 --> 00:02:21.700
<v Speaker 0>from Go, from Docker,

00:02:21.700 --> 00:02:24.819
<v Speaker 0>from Red Hat, Java, Debian, and so forth.

00:02:24.819 --> 00:02:27.220
<v Speaker 0>Hopefully, that covers a good portion of the

00:02:27.220 --> 00:02:29.940
<v Speaker 0>landscape of the runtimes and programming languages that

00:02:29.940 --> 00:02:32.580
<v Speaker 0>you're using and the operating systems or technologies

00:02:32.580 --> 00:02:35.045
<v Speaker 0>you use to deploy. As far as evidence

00:02:35.045 --> 00:02:35.685
<v Speaker 0>goes,

00:02:35.845 --> 00:02:37.525
<v Speaker 0>course, we have access to nest,

00:02:37.765 --> 00:02:38.645
<v Speaker 0>segstore,

00:02:38.645 --> 00:02:39.605
<v Speaker 0>CVEs,

00:02:39.605 --> 00:02:41.765
<v Speaker 0>etcetera. And the really cool thing about what

00:02:41.765 --> 00:02:43.685
<v Speaker 0>we're gonna show with Valiant today, I think

00:02:43.685 --> 00:02:46.245
<v Speaker 0>you don't need to push that evidence to

00:02:46.245 --> 00:02:48.565
<v Speaker 0>scribe security, although you should with that very

00:02:48.565 --> 00:02:50.980
<v Speaker 0>generous feature we covered in the previous video.

00:02:50.980 --> 00:02:52.900
<v Speaker 0>But you can actually store that evidence inside

00:02:52.900 --> 00:02:55.060
<v Speaker 0>of an OCI artifact itself,

00:02:55.220 --> 00:02:57.220
<v Speaker 0>and we'll be doing that on today's tutorial.

00:02:57.220 --> 00:02:59.540
<v Speaker 0>And again, because it's a command line application

00:02:59.700 --> 00:03:01.700
<v Speaker 0>and there are GitHub actions available,

00:03:01.780 --> 00:03:03.725
<v Speaker 0>you can run this on GitHub actions as

00:03:03.725 --> 00:03:05.005
<v Speaker 0>part of your CICD

00:03:05.005 --> 00:03:05.805
<v Speaker 0>process.

00:03:05.965 --> 00:03:08.525
<v Speaker 0>Okay. So why don't we generate a bill

00:03:08.525 --> 00:03:11.325
<v Speaker 0>of materials for a container image? What do

00:03:11.325 --> 00:03:13.245
<v Speaker 0>I mean by that? Well, we want to

00:03:13.245 --> 00:03:15.590
<v Speaker 0>start collecting some evidence. We want to pull

00:03:15.590 --> 00:03:17.670
<v Speaker 0>down an image, understand how it's built, and

00:03:17.670 --> 00:03:19.990
<v Speaker 0>generate that bill of materials. And we can

00:03:19.990 --> 00:03:21.510
<v Speaker 0>do that with Valiant.

00:03:21.670 --> 00:03:23.910
<v Speaker 0>So step one is obviously just make sure

00:03:23.910 --> 00:03:26.070
<v Speaker 0>you've downloaded and have access to the Valiant

00:03:26.070 --> 00:03:26.710
<v Speaker 0>command line.

00:03:27.844 --> 00:03:29.605
<v Speaker 0>Once you do, you have access to the

00:03:29.605 --> 00:03:30.965
<v Speaker 0>Valiant BOM command.

00:03:31.284 --> 00:03:32.885
<v Speaker 0>We can type help on that. There's a

00:03:32.885 --> 00:03:34.805
<v Speaker 0>whole bunch of options to help you start

00:03:34.805 --> 00:03:35.605
<v Speaker 0>collecting

00:03:35.765 --> 00:03:37.445
<v Speaker 0>all of your evidence.

00:03:37.844 --> 00:03:40.000
<v Speaker 0>So let's do Valiant BOM.

00:03:40.640 --> 00:03:42.880
<v Speaker 0>Now you get to choose the output format

00:03:42.880 --> 00:03:44.320
<v Speaker 0>that you wish to store it.

00:03:44.640 --> 00:03:46.400
<v Speaker 0>I'm gonna do a test

00:03:46.880 --> 00:03:49.520
<v Speaker 0>Salsa, although we'll cover more options in just

00:03:49.520 --> 00:03:52.225
<v Speaker 0>a moment. Lastly, provide a container image that

00:03:52.225 --> 00:03:53.985
<v Speaker 0>you want to collect and store the evidence

00:03:53.985 --> 00:03:54.625
<v Speaker 0>for.

00:03:55.185 --> 00:03:58.065
<v Speaker 0>For me, let's do Alpine latest.

00:03:58.305 --> 00:04:00.065
<v Speaker 0>This pulls on the image and then will

00:04:00.065 --> 00:04:01.745
<v Speaker 0>give you a prompt to ensure that you're

00:04:01.745 --> 00:04:05.025
<v Speaker 0>happy to publish the evidence to the transparency

00:04:05.025 --> 00:04:05.745
<v Speaker 0>log.

00:04:05.985 --> 00:04:07.025
<v Speaker 0>Let's hit yes

00:04:07.540 --> 00:04:09.140
<v Speaker 0>and this will ask me to log in

00:04:09.140 --> 00:04:10.340
<v Speaker 0>with Segstor.

00:04:11.380 --> 00:04:13.620
<v Speaker 0>And done. Alright. So let's go through this

00:04:13.620 --> 00:04:15.780
<v Speaker 0>in just a little bit more detail. First,

00:04:15.780 --> 00:04:17.140
<v Speaker 0>we have said that we want to generate

00:04:17.140 --> 00:04:19.860
<v Speaker 0>billing materials for Alpine latest. We see here

00:04:20.065 --> 00:04:21.345
<v Speaker 0>that Valint

00:04:21.345 --> 00:04:24.625
<v Speaker 0>will actually pull down the image from the

00:04:24.625 --> 00:04:26.625
<v Speaker 0>remote registry. In this case, that is Docker

00:04:26.625 --> 00:04:28.145
<v Speaker 0>Hub. We can also see that it collects

00:04:28.145 --> 00:04:30.544
<v Speaker 0>some context, which is type local. And that's

00:04:30.544 --> 00:04:32.705
<v Speaker 0>just because I'm running the command line application

00:04:32.705 --> 00:04:35.650
<v Speaker 0>locally on my own machine. Valiant has knowledge

00:04:35.650 --> 00:04:39.090
<v Speaker 0>and awareness of other contexts such as GitHub,

00:04:39.090 --> 00:04:40.849
<v Speaker 0>GitLab, and so forth. And we'll see a

00:04:40.849 --> 00:04:42.129
<v Speaker 0>list of them in a moment when we

00:04:42.129 --> 00:04:43.810
<v Speaker 0>head back to the documentation.

00:04:43.889 --> 00:04:45.650
<v Speaker 0>Then you'll see we get a little bit

00:04:45.650 --> 00:04:47.409
<v Speaker 0>of a pop up asking us to confirm

00:04:47.409 --> 00:04:49.324
<v Speaker 0>that we're happy for some information to be

00:04:49.324 --> 00:04:51.325
<v Speaker 0>stored in the transparency log.

00:04:51.565 --> 00:04:53.805
<v Speaker 0>So why did this happen? Because we did

00:04:53.805 --> 00:04:56.525
<v Speaker 0>an dash o, a test salsa, the default

00:04:56.525 --> 00:04:57.485
<v Speaker 0>attestation

00:04:57.485 --> 00:05:00.205
<v Speaker 0>is with Sigstore. If we run v a

00:05:00.205 --> 00:05:02.205
<v Speaker 0>l n dash dash help and scroll up

00:05:02.205 --> 00:05:02.525
<v Speaker 0>to here,

00:05:03.180 --> 00:05:05.820
<v Speaker 0>you'll see that dash dash test default

00:05:05.980 --> 00:05:08.860
<v Speaker 0>supports x five zero nine, Segstor GitHub or

00:05:08.860 --> 00:05:11.900
<v Speaker 0>Segstor with Segstor being the default. That just

00:05:11.900 --> 00:05:14.140
<v Speaker 0>means that our information will be published to

00:05:14.140 --> 00:05:17.740
<v Speaker 0>the public transparency log and signed with Segstor.

00:05:17.740 --> 00:05:19.635
<v Speaker 0>Once that's all done, we're now in a

00:05:19.635 --> 00:05:21.395
<v Speaker 0>position where we can actually take a look

00:05:21.395 --> 00:05:24.275
<v Speaker 0>and verify the information that we generated and

00:05:24.275 --> 00:05:27.315
<v Speaker 0>that verification step includes any policies that we

00:05:27.315 --> 00:05:28.115
<v Speaker 0>define.

00:05:28.915 --> 00:05:31.155
<v Speaker 0>So let's run v lint verify

00:05:31.155 --> 00:05:33.420
<v Speaker 0>and we set the input format, which will

00:05:33.420 --> 00:05:35.020
<v Speaker 0>be the same as the output format we

00:05:35.020 --> 00:05:35.980
<v Speaker 0>used earlier.

00:05:37.820 --> 00:05:39.740
<v Speaker 0>We can then say that we want to

00:05:39.740 --> 00:05:42.460
<v Speaker 0>verify the bill of materials with Alpine latest

00:05:42.460 --> 00:05:43.100
<v Speaker 0>image.

00:05:43.420 --> 00:05:46.140
<v Speaker 0>As you can see, this pulled this down

00:05:46.140 --> 00:05:48.345
<v Speaker 0>from the public record and we have a

00:05:48.345 --> 00:05:50.425
<v Speaker 0>cache stored in our local directory

00:05:50.505 --> 00:05:53.385
<v Speaker 0>and it also verifies the certificate authority

00:05:53.465 --> 00:05:56.505
<v Speaker 0>that signed this information. As you can see,

00:05:56.505 --> 00:05:58.905
<v Speaker 0>we already have a policy called Rawkode only

00:05:58.905 --> 00:06:00.745
<v Speaker 0>applied which passed

00:06:00.825 --> 00:06:02.105
<v Speaker 0>and we'll take a look at that in

00:06:02.105 --> 00:06:03.225
<v Speaker 0>just a moment too.

00:06:03.760 --> 00:06:05.920
<v Speaker 0>Let's talk about that environment context.

00:06:06.000 --> 00:06:07.360
<v Speaker 0>When I ran it on my local machine,

00:06:07.360 --> 00:06:08.800
<v Speaker 0>the context was local.

00:06:08.960 --> 00:06:09.600
<v Speaker 0>Why?

00:06:09.760 --> 00:06:11.600
<v Speaker 0>Well, because I ran the command of my

00:06:11.600 --> 00:06:13.360
<v Speaker 0>own personal machine. However,

00:06:13.680 --> 00:06:16.080
<v Speaker 0>when you're generating your bill of materials, it's

00:06:16.080 --> 00:06:19.360
<v Speaker 0>more likely that this will run-in an automated

00:06:19.035 --> 00:06:19.995
<v Speaker 0>environment

00:06:20.395 --> 00:06:22.475
<v Speaker 0>such as your CICD pipeline.

00:06:22.635 --> 00:06:24.395
<v Speaker 0>As you can see here from this list,

00:06:24.395 --> 00:06:26.795
<v Speaker 0>that Valence supports and understands

00:06:26.795 --> 00:06:28.235
<v Speaker 0>various contexts.

00:06:28.395 --> 00:06:30.875
<v Speaker 0>It's likely you're probably using GitHub actions as

00:06:30.875 --> 00:06:32.875
<v Speaker 0>that's where a lot of open source and

00:06:32.875 --> 00:06:35.840
<v Speaker 0>even proprietary software development happens these days.

00:06:36.319 --> 00:06:38.800
<v Speaker 0>Of course, GitLab, Azure, Bitbucket, and so forth

00:06:38.800 --> 00:06:41.680
<v Speaker 0>are all very popular options and also provide

00:06:41.680 --> 00:06:43.680
<v Speaker 0>their own CICD environments.

00:06:43.680 --> 00:06:45.599
<v Speaker 0>When you build your build materials, you want

00:06:45.599 --> 00:06:47.439
<v Speaker 0>to suck up as much information from that

00:06:47.439 --> 00:06:50.164
<v Speaker 0>environment as possible, like the branch name, the

00:06:50.164 --> 00:06:53.365
<v Speaker 0>repository name, the committers, the tags, and so

00:06:53.365 --> 00:06:54.005
<v Speaker 0>forth.

00:06:54.405 --> 00:06:56.324
<v Speaker 0>And if we scroll down, you'll actually see

00:06:56.324 --> 00:06:58.645
<v Speaker 0>that as part of this environmental awareness,

00:06:58.884 --> 00:07:02.164
<v Speaker 0>Valid collects the URL, the branch, the commit,

00:07:02.164 --> 00:07:04.650
<v Speaker 0>the tag, even the workflow names and the

00:07:04.650 --> 00:07:07.210
<v Speaker 0>actors and the build number. So collecting this

00:07:07.210 --> 00:07:09.930
<v Speaker 0>information just means that you can build policies

00:07:09.930 --> 00:07:12.890
<v Speaker 0>to ensure that your production cluster only ever

00:07:12.890 --> 00:07:14.170
<v Speaker 0>runs workloads

00:07:14.490 --> 00:07:17.370
<v Speaker 0>where you can prove through evidence collection

00:07:17.695 --> 00:07:19.295
<v Speaker 0>that the build happened

00:07:19.295 --> 00:07:21.295
<v Speaker 0>on your CICD system

00:07:21.455 --> 00:07:23.935
<v Speaker 0>and signed with the keys that you expect.

00:07:23.935 --> 00:07:26.015
<v Speaker 0>So now let's talk about that policy.

00:07:26.175 --> 00:07:28.175
<v Speaker 0>So we can definite well, you should definitely

00:07:28.175 --> 00:07:31.295
<v Speaker 0>have a policy that ensures your proprietary software

00:07:31.639 --> 00:07:34.040
<v Speaker 0>only runs if it was built in your

00:07:34.040 --> 00:07:36.680
<v Speaker 0>CICD pipeline. However, you can get started with

00:07:36.680 --> 00:07:38.600
<v Speaker 0>policies much, much easier.

00:07:38.919 --> 00:07:41.080
<v Speaker 0>And say this directory, I have a valent

00:07:41.080 --> 00:07:43.320
<v Speaker 0>dot yaml. And say this, I have an

00:07:43.320 --> 00:07:44.760
<v Speaker 0>attestation cocosign

00:07:44.760 --> 00:07:47.775
<v Speaker 0>policy. This just means a cosign policy where

00:07:47.775 --> 00:07:49.295
<v Speaker 0>I have Rawkode only.

00:07:49.535 --> 00:07:51.295
<v Speaker 0>And we already seen this name run when

00:07:51.295 --> 00:07:53.295
<v Speaker 0>I ran the valent verify.

00:07:53.375 --> 00:07:55.055
<v Speaker 0>We have the enabled true flag just to

00:07:55.055 --> 00:07:57.135
<v Speaker 0>make sure this policy is enforced or

00:07:57.295 --> 00:07:59.935
<v Speaker 0>checked when we run a valent verify.

00:08:00.530 --> 00:08:02.210
<v Speaker 0>And then we can add one or more

00:08:02.210 --> 00:08:04.530
<v Speaker 0>modules to run as part of the policy.

00:08:04.530 --> 00:08:07.250
<v Speaker 0>Here, I have a module named Rawkode module

00:08:07.250 --> 00:08:09.890
<v Speaker 0>where the type is to verify the artifact.

00:08:10.770 --> 00:08:13.010
<v Speaker 0>We enable this and what we're seeing is

00:08:13.010 --> 00:08:16.315
<v Speaker 0>this artifact must be signed, must be in

00:08:16.315 --> 00:08:18.715
<v Speaker 0>the format a test salsa and the signer

00:08:18.715 --> 00:08:21.514
<v Speaker 0>identity must be one of these people and

00:08:21.514 --> 00:08:23.515
<v Speaker 0>in my case, I'm using myself,

00:08:23.915 --> 00:08:26.555
<v Speaker 0>which is david@rawkode.academy.

00:08:26.555 --> 00:08:28.635
<v Speaker 0>So let's change this policy

00:08:28.909 --> 00:08:32.429
<v Speaker 0>and break it. Let's say I use rawcode.com

00:08:32.510 --> 00:08:34.589
<v Speaker 0>and now we run valent

00:08:34.669 --> 00:08:35.710
<v Speaker 0>verify

00:08:35.870 --> 00:08:36.990
<v Speaker 0>dash I

00:08:37.149 --> 00:08:38.830
<v Speaker 0>test salsa

00:08:40.669 --> 00:08:41.549
<v Speaker 0>alpine

00:08:41.870 --> 00:08:42.350
<v Speaker 0>latest.

00:08:43.045 --> 00:08:45.205
<v Speaker 0>Again, this is going to check the evidence

00:08:45.205 --> 00:08:47.845
<v Speaker 0>creation within the public record, pull it down

00:08:47.845 --> 00:08:50.645
<v Speaker 0>to my machine, and then our policy runs

00:08:50.645 --> 00:08:52.965
<v Speaker 0>against the collected evidence. As you can see

00:08:52.965 --> 00:08:56.325
<v Speaker 0>here, the signature for this evidence was not

00:08:56.325 --> 00:08:59.840
<v Speaker 0>me, at least was not david@rockode.com.

00:09:00.080 --> 00:09:02.880
<v Speaker 0>This time, it goes, hey, actually,

00:09:03.120 --> 00:09:05.840
<v Speaker 0>this is signed by david@rockode.academy.

00:09:05.840 --> 00:09:07.440
<v Speaker 0>So you can see how powerful this would

00:09:07.440 --> 00:09:10.480
<v Speaker 0>be if your CICD system is configured

00:09:10.725 --> 00:09:13.524
<v Speaker 0>to say in something. You don't want another

00:09:13.524 --> 00:09:16.165
<v Speaker 0>workload not saying about identity running in your

00:09:16.165 --> 00:09:16.885
<v Speaker 0>cluster.

00:09:17.045 --> 00:09:19.685
<v Speaker 0>So let's understand evidence collection in a little

00:09:19.685 --> 00:09:22.165
<v Speaker 0>bit more detail by diving in to the

00:09:22.165 --> 00:09:22.884
<v Speaker 0>output itself.

00:09:24.210 --> 00:09:28.130
<v Speaker 0>Let's run valent BOM again with the attest

00:09:28.130 --> 00:09:30.050
<v Speaker 0>salsa output format.

00:09:30.370 --> 00:09:33.330
<v Speaker 0>This time, we're gonna set the output directory

00:09:33.730 --> 00:09:36.210
<v Speaker 0>to be evidence and again we'll run this

00:09:36.210 --> 00:09:37.490
<v Speaker 0>against the Halpine

00:09:37.810 --> 00:09:39.745
<v Speaker 0>latest. This is gonna make sure we have

00:09:39.745 --> 00:09:41.505
<v Speaker 0>the latest version of the image, collect all

00:09:41.505 --> 00:09:43.665
<v Speaker 0>the evidence, ask me to sign it once

00:09:43.665 --> 00:09:44.225
<v Speaker 0>more,

00:09:44.865 --> 00:09:46.545
<v Speaker 0>which we can do here and then it

00:09:46.545 --> 00:09:48.865
<v Speaker 0>will store all of the evidence that collected

00:09:48.865 --> 00:09:49.745
<v Speaker 0>into

00:09:50.145 --> 00:09:51.665
<v Speaker 0>the evidence directory.

00:09:53.180 --> 00:09:54.940
<v Speaker 0>As you can see here, we have a

00:09:54.940 --> 00:09:56.779
<v Speaker 0>cache dot JSON and

00:09:57.820 --> 00:09:59.980
<v Speaker 0>if we just cap this and throw it

00:09:59.980 --> 00:10:02.620
<v Speaker 0>through j q, we can see that local

00:10:02.620 --> 00:10:04.700
<v Speaker 0>context and the information that I collected.

00:10:05.345 --> 00:10:07.665
<v Speaker 0>This is the information that you can use

00:10:07.665 --> 00:10:09.905
<v Speaker 0>to build and enforce your policies.

00:10:09.985 --> 00:10:11.505
<v Speaker 0>And if you do this in GitHub, the

00:10:11.505 --> 00:10:14.385
<v Speaker 0>context will contain all that extra information such

00:10:14.385 --> 00:10:16.625
<v Speaker 0>as the branch, the URL, the tags, and

00:10:16.625 --> 00:10:17.985
<v Speaker 0>so forth. But locally,

00:10:18.420 --> 00:10:20.579
<v Speaker 0>we have access to my host name on

00:10:20.579 --> 00:10:21.380
<v Speaker 0>my machine,

00:10:21.620 --> 00:10:24.180
<v Speaker 0>the user that built it, the time,

00:10:24.500 --> 00:10:25.620
<v Speaker 0>the inputs

00:10:25.620 --> 00:10:28.740
<v Speaker 0>and then the subject context all there and

00:10:28.740 --> 00:10:31.475
<v Speaker 0>available for you to introspect. So so far,

00:10:31.475 --> 00:10:33.715
<v Speaker 0>we've worked with container images,

00:10:33.795 --> 00:10:36.595
<v Speaker 0>publishing the evidence to the public record, and

00:10:36.595 --> 00:10:38.995
<v Speaker 0>storing information and cache

00:10:39.075 --> 00:10:40.995
<v Speaker 0>locally. But what if we wanna keep that

00:10:40.995 --> 00:10:43.235
<v Speaker 0>somewhere that is a bit more transparent and

00:10:43.235 --> 00:10:45.955
<v Speaker 0>visible to our organization, our clients, our customers,

00:10:45.990 --> 00:10:47.990
<v Speaker 0>and so forth. So let's do a valid

00:10:47.990 --> 00:10:49.910
<v Speaker 0>BOM test salsa.

00:10:50.870 --> 00:10:51.990
<v Speaker 0>Only this time,

00:10:52.470 --> 00:10:54.390
<v Speaker 0>we'll scan a git repository.

00:10:54.390 --> 00:10:59.915
<v Speaker 0>Mongoexpressmongoexpress.git.

00:10:59.915 --> 00:11:01.755
<v Speaker 0>Now, I've already run this then the cache

00:11:01.755 --> 00:11:03.755
<v Speaker 0>is already available locally, so we got a

00:11:03.755 --> 00:11:05.435
<v Speaker 0>cache hit and it doesn't need to do

00:11:05.435 --> 00:11:06.075
<v Speaker 0>it again.

00:11:06.475 --> 00:11:07.995
<v Speaker 0>Sweet. However,

00:11:07.995 --> 00:11:10.155
<v Speaker 0>that cache still lives on my local machine.

00:11:11.300 --> 00:11:14.660
<v Speaker 0>So let's push it and store it inside

00:11:14.820 --> 00:11:17.300
<v Speaker 0>of an OCIR effect. So this time we'll

00:11:17.300 --> 00:11:18.660
<v Speaker 0>run Valiant Bomb,

00:11:19.220 --> 00:11:20.580
<v Speaker 0>a test alpha,

00:11:21.140 --> 00:11:22.180
<v Speaker 0>and we're going to scan

00:11:23.665 --> 00:11:25.584
<v Speaker 0>my GHCR

00:11:25.824 --> 00:11:27.024
<v Speaker 0>Rawkode

00:11:27.745 --> 00:11:28.625
<v Speaker 0>clustered

00:11:28.625 --> 00:11:29.904
<v Speaker 0>v two image

00:11:30.305 --> 00:11:31.425
<v Speaker 0>and enable

00:11:31.584 --> 00:11:32.785
<v Speaker 0>the OCI

00:11:32.865 --> 00:11:35.584
<v Speaker 0>store. And make sure you spell Salsa correctly.

00:11:37.250 --> 00:11:39.170
<v Speaker 0>So much like all the other commands, this

00:11:39.170 --> 00:11:41.889
<v Speaker 0>is pulling down an image, collecting the evidence.

00:11:41.889 --> 00:11:42.610
<v Speaker 0>However,

00:11:42.850 --> 00:11:45.089
<v Speaker 0>this time, it's going to store the evidence

00:11:45.089 --> 00:11:45.970
<v Speaker 0>remotely

00:11:45.970 --> 00:11:47.810
<v Speaker 0>on the OCI registry

00:11:48.295 --> 00:11:51.735
<v Speaker 0>next to where the container image actually lives.

00:11:52.135 --> 00:11:54.455
<v Speaker 0>And that's done. You trust me. Right?

00:11:55.015 --> 00:11:57.095
<v Speaker 0>Let's head over to GHCR

00:11:57.335 --> 00:11:59.335
<v Speaker 0>where we can click on packages,

00:11:59.335 --> 00:12:00.215
<v Speaker 0>clustered,

00:12:00.295 --> 00:12:00.935
<v Speaker 0>and here we go.

00:12:01.720 --> 00:12:03.800
<v Speaker 0>My v two image was built a year

00:12:03.800 --> 00:12:07.080
<v Speaker 0>ago. However, less than a minute ago, we

00:12:07.080 --> 00:12:10.520
<v Speaker 0>published our attestation to the OCI registry.

00:12:10.600 --> 00:12:12.600
<v Speaker 0>This can now be pulled, inspected,

00:12:12.600 --> 00:12:14.275
<v Speaker 0>and verified again

00:12:14.355 --> 00:12:16.595
<v Speaker 0>by my team, my organization,

00:12:16.595 --> 00:12:19.955
<v Speaker 0>my suppliers, my customers, and so forth. Awesome.

00:12:19.955 --> 00:12:22.355
<v Speaker 0>So one last thing. So far, all we've

00:12:22.355 --> 00:12:24.595
<v Speaker 0>really covered is salsa attestation,

00:12:24.675 --> 00:12:28.150
<v Speaker 0>which gives us confidence or a record of

00:12:28.150 --> 00:12:30.070
<v Speaker 0>where things were built, how they were built,

00:12:30.070 --> 00:12:32.390
<v Speaker 0>and when they were built. But Valens

00:12:32.390 --> 00:12:33.270
<v Speaker 0>supports

00:12:33.270 --> 00:12:35.110
<v Speaker 0>all of those run times and languages that

00:12:35.110 --> 00:12:37.030
<v Speaker 0>we covered on the graph at the start.

00:12:37.110 --> 00:12:39.190
<v Speaker 0>So let's take a look building a bill

00:12:39.190 --> 00:12:40.550
<v Speaker 0>of materials for a Go project,

00:12:41.345 --> 00:12:43.585
<v Speaker 0>And let's keep this topical. I'm in a

00:12:43.585 --> 00:12:45.425
<v Speaker 0>directory and taking a look at Blue Sky

00:12:45.425 --> 00:12:48.385
<v Speaker 0>Go SDK or program called Indigo.

00:12:48.545 --> 00:12:50.785
<v Speaker 0>From here, we can run valent BOM where

00:12:50.785 --> 00:12:52.945
<v Speaker 0>we specify that we want to run this

00:12:52.945 --> 00:12:55.649
<v Speaker 0>against the current working directory. This has already

00:12:55.649 --> 00:12:57.490
<v Speaker 0>been run, so it was pretty fast and

00:12:57.490 --> 00:12:59.330
<v Speaker 0>we can see that the analysis has already

00:12:59.330 --> 00:13:00.210
<v Speaker 0>been completed.

00:13:00.529 --> 00:13:02.610
<v Speaker 0>And the output has been stored and the

00:13:02.610 --> 00:13:05.649
<v Speaker 0>generic valent cache. Let's run this one more

00:13:05.649 --> 00:13:06.210
<v Speaker 0>time.

00:13:06.529 --> 00:13:07.890
<v Speaker 0>And just to make things a bit easier

00:13:07.890 --> 00:13:10.290
<v Speaker 0>for ourselves, we'll set the output directory

00:13:11.335 --> 00:13:13.095
<v Speaker 0>to BOM. Now we can go inside the

00:13:13.095 --> 00:13:14.055
<v Speaker 0>BOM directory

00:13:14.295 --> 00:13:15.815
<v Speaker 0>where we see we have our cache dot

00:13:15.815 --> 00:13:17.735
<v Speaker 0>JSON much like we had with the Salsa

00:13:17.735 --> 00:13:18.535
<v Speaker 0>association.

00:13:18.615 --> 00:13:20.695
<v Speaker 0>We can cat this and pipe it through

00:13:20.695 --> 00:13:22.855
<v Speaker 0>j q, but we also have this other

00:13:22.855 --> 00:13:23.175
<v Speaker 0>fail,

00:13:24.269 --> 00:13:27.630
<v Speaker 0>which is the complete bill of materials. Now

00:13:27.630 --> 00:13:29.709
<v Speaker 0>when you do a test salsa, this is

00:13:29.709 --> 00:13:31.630
<v Speaker 0>a encrypted payload.

00:13:31.630 --> 00:13:32.269
<v Speaker 0>However,

00:13:32.589 --> 00:13:34.990
<v Speaker 0>without a test salsa, we have all of

00:13:34.990 --> 00:13:37.565
<v Speaker 0>the information and the bill of materials available.

00:13:37.965 --> 00:13:39.565
<v Speaker 0>Let's do this one more time, but put

00:13:39.565 --> 00:13:41.245
<v Speaker 0>it through a pager. Here, I can see

00:13:41.245 --> 00:13:44.525
<v Speaker 0>that the default output format is CycloneDX.

00:13:44.525 --> 00:13:47.085
<v Speaker 0>We can see the components involved as part

00:13:47.085 --> 00:13:48.525
<v Speaker 0>of this bill of materials,

00:13:48.765 --> 00:13:51.910
<v Speaker 0>including the GET repository and so forth. However,

00:13:51.990 --> 00:13:54.230
<v Speaker 0>what's really cool is when we scroll down,

00:13:54.230 --> 00:13:56.470
<v Speaker 0>we get into all the dependencies

00:13:56.790 --> 00:14:01.430
<v Speaker 0>because Valen understands Go, understands Python, understands

00:14:01.430 --> 00:14:02.709
<v Speaker 0>Node and NPM.

00:14:03.565 --> 00:14:05.885
<v Speaker 0>We get a complete bill of materials including

00:14:05.885 --> 00:14:07.325
<v Speaker 0>all their dependencies,

00:14:07.325 --> 00:14:10.045
<v Speaker 0>the versions, and where they came from as

00:14:10.045 --> 00:14:12.925
<v Speaker 0>part of our bill of materials. So there

00:14:12.925 --> 00:14:15.165
<v Speaker 0>you have it. Valant is a pretty sweet

00:14:15.165 --> 00:14:17.430
<v Speaker 0>command line application that you can run locally

00:14:17.430 --> 00:14:19.910
<v Speaker 0>in CI or even as a mission controller

00:14:19.910 --> 00:14:21.029
<v Speaker 0>with Kubernetes.

00:14:21.430 --> 00:14:24.070
<v Speaker 0>It allows you to build attestation for Salsa

00:14:24.070 --> 00:14:26.230
<v Speaker 0>and Cyclone and a build of materials in

00:14:26.230 --> 00:14:27.350
<v Speaker 0>various formats,

00:14:27.510 --> 00:14:31.105
<v Speaker 0>looking into various runtimes programming languages and even

00:14:31.105 --> 00:14:34.145
<v Speaker 0>context such as local, GitHub, GitLab and so

00:14:34.145 --> 00:14:36.945
<v Speaker 0>forth. So go check it out. Improve your

00:14:36.945 --> 00:14:39.265
<v Speaker 0>supply chain posture today. Go have some fun.
