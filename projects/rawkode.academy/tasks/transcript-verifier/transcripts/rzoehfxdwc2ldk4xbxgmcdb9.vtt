WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 2fb4aeac-ea97-49b0-b39b-af2b0f7d60a4
Created: 2025-04-29T13:25:57.215Z
Duration: 2763.1812
Channels: 1

00:00:00.080 --> 00:00:02.639
<v Speaker 0>Okay. So welcome back to the Cloud Native

00:00:02.639 --> 00:00:05.520
<v Speaker 0>Compass. I'm your host, David Flanagan. And today,

00:00:05.520 --> 00:00:08.240
<v Speaker 0>I am joined by Nathan from Wix Engineering

00:00:08.240 --> 00:00:11.360
<v Speaker 0>as we discuss and share wonderful insights into

00:00:11.360 --> 00:00:13.679
<v Speaker 0>the world of event driven architectures.

00:00:13.759 --> 00:00:15.200
<v Speaker 0>Hello, Nathan. How are you today?

00:00:15.975 --> 00:00:17.895
<v Speaker 1>Hi, David. It's a pleasure to be here.

00:00:18.375 --> 00:00:20.135
<v Speaker 0>Well, thank you so much for joining me.

00:00:20.135 --> 00:00:22.135
<v Speaker 0>I'm really excited for this episode.

00:00:22.295 --> 00:00:24.935
<v Speaker 0>Event driven architectures are are just what keep

00:00:24.935 --> 00:00:26.695
<v Speaker 0>me excited about technology

00:00:27.015 --> 00:00:29.494
<v Speaker 0>even after twenty years and been able to

00:00:29.494 --> 00:00:31.870
<v Speaker 0>dig into it with experts and understand how

00:00:31.870 --> 00:00:35.470
<v Speaker 0>they approach complex domains via event driven architectures

00:00:35.470 --> 00:00:36.910
<v Speaker 0>is always the highlight of my week. So

00:00:36.910 --> 00:00:38.590
<v Speaker 0>thank you so much for joining me.

00:00:38.989 --> 00:00:40.270
<v Speaker 0>I discovered

00:00:40.270 --> 00:00:43.070
<v Speaker 0>you via the Wix engineering blog, which turned

00:00:43.070 --> 00:00:44.350
<v Speaker 0>out to be a bit of a gold

00:00:44.350 --> 00:00:47.465
<v Speaker 0>mine for engineering content. So before we dive

00:00:47.465 --> 00:00:49.945
<v Speaker 0>into that and event driven architectures,

00:00:50.105 --> 00:00:51.705
<v Speaker 0>could you share a little bit more about

00:00:51.705 --> 00:00:52.265
<v Speaker 0>you?

00:00:52.665 --> 00:00:53.625
<v Speaker 1>Sure.

00:00:53.625 --> 00:00:54.265
<v Speaker 1>So

00:00:54.505 --> 00:00:57.705
<v Speaker 1>I've been a software engineer now for close

00:00:57.705 --> 00:01:00.345
<v Speaker 1>to twenty years, I think. And it's

00:01:00.630 --> 00:01:03.990
<v Speaker 1>been such a lovely experience for me. So

00:01:03.990 --> 00:01:07.110
<v Speaker 1>for the last eight years, I've been in

00:01:07.110 --> 00:01:10.390
<v Speaker 1>Wix, which really drove me to become much

00:01:10.390 --> 00:01:14.390
<v Speaker 1>better engineer in all of the skill sets

00:01:14.015 --> 00:01:16.815
<v Speaker 1>that engineer should have. And also be able

00:01:16.815 --> 00:01:19.375
<v Speaker 1>to share it and want to share what

00:01:19.375 --> 00:01:21.135
<v Speaker 1>I've learned and and what

00:01:21.375 --> 00:01:23.455
<v Speaker 1>Wix has achieved with the rest of the

00:01:23.455 --> 00:01:26.015
<v Speaker 1>world. And I think it's really important, and

00:01:26.015 --> 00:01:27.775
<v Speaker 1>I encourage every

00:01:28.095 --> 00:01:31.110
<v Speaker 1>engineer, no matter what is their skill level,

00:01:31.430 --> 00:01:33.909
<v Speaker 1>to do the same and and try to

00:01:33.909 --> 00:01:36.390
<v Speaker 1>write a blog post about their experiences and

00:01:36.390 --> 00:01:38.710
<v Speaker 1>what they learned. There's no such thing as

00:01:38.710 --> 00:01:41.750
<v Speaker 1>something that is not interesting or something that

00:01:41.750 --> 00:01:44.735
<v Speaker 1>no one will care about. And even if

00:01:44.735 --> 00:01:46.495
<v Speaker 1>you if you don't get a lot of

00:01:46.495 --> 00:01:49.455
<v Speaker 1>exposure, it's still great to to create content.

00:01:49.455 --> 00:01:51.775
<v Speaker 1>It it it gets you a create in

00:01:51.775 --> 00:01:53.775
<v Speaker 1>a creative high, so I really recommend it.

00:01:54.095 --> 00:01:56.655
<v Speaker 0>Yeah. That's great advice so early on in

00:01:56.655 --> 00:01:59.040
<v Speaker 0>the episode. Like, I I often refer to

00:01:59.040 --> 00:02:01.360
<v Speaker 0>this as, a collective knowledge when I speak

00:02:01.360 --> 00:02:03.200
<v Speaker 0>at conferences and such as, like, the more

00:02:03.200 --> 00:02:04.560
<v Speaker 0>we can get engineers

00:02:04.640 --> 00:02:07.280
<v Speaker 0>working on their own their own issues, right,

00:02:07.280 --> 00:02:09.120
<v Speaker 0>that their organization has, that their team has,

00:02:09.120 --> 00:02:10.880
<v Speaker 0>that they personally have. And the more we

00:02:10.880 --> 00:02:13.235
<v Speaker 0>share this knowledge in a public forum, the

00:02:13.235 --> 00:02:15.075
<v Speaker 0>more that other people can learn and build

00:02:15.075 --> 00:02:17.715
<v Speaker 0>upon that knowledge. Right? It provides foundations for

00:02:17.715 --> 00:02:20.034
<v Speaker 0>people to go and do wonderful things with

00:02:20.034 --> 00:02:22.435
<v Speaker 0>technology. So that's such great advice. Thank you

00:02:22.435 --> 00:02:24.834
<v Speaker 0>for sharing that. So you've you've been at

00:02:24.834 --> 00:02:26.435
<v Speaker 0>WEX and you're saying that it's kind of,

00:02:26.435 --> 00:02:27.870
<v Speaker 0>you know, improved

00:02:27.870 --> 00:02:30.910
<v Speaker 0>your engineering chops. You're working on fun problems.

00:02:30.910 --> 00:02:33.150
<v Speaker 0>I mean, just to give people some context

00:02:33.150 --> 00:02:35.550
<v Speaker 0>and clarity on what Wix does and what

00:02:35.550 --> 00:02:37.230
<v Speaker 0>kind of scale they're operating at,

00:02:38.670 --> 00:02:40.190
<v Speaker 0>can you just share a bit more details

00:02:40.190 --> 00:02:42.025
<v Speaker 0>there? Sure. So

00:02:42.424 --> 00:02:46.185
<v Speaker 1>Wix has a very powerful website building platform.

00:02:46.265 --> 00:02:49.224
<v Speaker 1>And over the years, it has enabled,

00:02:49.385 --> 00:02:52.105
<v Speaker 1>all kinds of people with, different skill set

00:02:52.105 --> 00:02:55.560
<v Speaker 1>levels, to build websites. We were pioneers in

00:02:55.560 --> 00:02:58.360
<v Speaker 1>building websites based on AI, for instance,

00:02:58.680 --> 00:03:01.800
<v Speaker 1>even before it became so trendy and viral,

00:03:02.040 --> 00:03:04.920
<v Speaker 1>like these days. And in more recent years,

00:03:04.920 --> 00:03:09.080
<v Speaker 1>we expanded our reach, from, like, self creators

00:03:08.865 --> 00:03:10.145
<v Speaker 1>to agencies

00:03:10.145 --> 00:03:10.945
<v Speaker 1>and

00:03:11.105 --> 00:03:12.385
<v Speaker 1>web professionals

00:03:12.705 --> 00:03:15.105
<v Speaker 1>and created a whole ecosystem platform.

00:03:15.185 --> 00:03:17.105
<v Speaker 1>So we don't only manage

00:03:17.345 --> 00:03:20.705
<v Speaker 1>online presence, but also manage businesses online

00:03:20.785 --> 00:03:24.620
<v Speaker 1>from stuff like building and managing your bookings

00:03:24.620 --> 00:03:27.500
<v Speaker 1>and schedule for your yoga and Pilates studio

00:03:27.500 --> 00:03:28.220
<v Speaker 1>to,

00:03:28.620 --> 00:03:32.300
<v Speaker 1>sophisticated tools like third party drop shipping. And

00:03:32.459 --> 00:03:35.180
<v Speaker 1>as all as we expanded our offerings,

00:03:35.724 --> 00:03:37.085
<v Speaker 1>more and more customers

00:03:37.165 --> 00:03:39.724
<v Speaker 1>were brought in and the scale has really

00:03:39.724 --> 00:03:43.084
<v Speaker 1>increased. So we have around 2,500

00:03:43.084 --> 00:03:46.605
<v Speaker 1>microservices in production, even more added every week.

00:03:46.925 --> 00:03:49.950
<v Speaker 1>And they come up with a lot of

00:03:49.950 --> 00:03:54.350
<v Speaker 1>visitors, around 1,000,000,000 unique visitors every month,

00:03:54.430 --> 00:03:55.230
<v Speaker 1>which gives

00:03:55.390 --> 00:03:56.910
<v Speaker 1>more than 500,000,000,000

00:03:56.910 --> 00:03:59.470
<v Speaker 1>HTTP requests per day and 70,000,000,000

00:03:59.470 --> 00:04:02.944
<v Speaker 1>Kafka events produced every day. So very large

00:04:02.944 --> 00:04:06.385
<v Speaker 1>scale and a very big distributed system where

00:04:06.625 --> 00:04:08.545
<v Speaker 1>there are a lot of challenges to keep

00:04:08.545 --> 00:04:10.465
<v Speaker 1>up the high availability,

00:04:10.705 --> 00:04:12.225
<v Speaker 1>performance, low latency,

00:04:12.625 --> 00:04:14.625
<v Speaker 1>and resiliency in the fault tolerance.

00:04:15.230 --> 00:04:17.709
<v Speaker 0>Wow. I mean, I I was asking to

00:04:17.709 --> 00:04:19.790
<v Speaker 0>give the audience clarity on scale, and I

00:04:19.790 --> 00:04:21.389
<v Speaker 0>think you've just surpassed the numbers I even

00:04:21.389 --> 00:04:22.830
<v Speaker 0>had in my head. So those are some

00:04:22.830 --> 00:04:24.910
<v Speaker 0>pretty chunky numbers you've got running through your

00:04:24.910 --> 00:04:28.110
<v Speaker 0>system. So let's gonna touch on something there.

00:04:28.110 --> 00:04:30.514
<v Speaker 0>Right? Said you've got 2,500 microservices.

00:04:30.514 --> 00:04:33.475
<v Speaker 0>It's growing every week. Did Wix start off

00:04:33.475 --> 00:04:35.555
<v Speaker 0>as a monolithic application,

00:04:35.715 --> 00:04:38.514
<v Speaker 0>or has it always been a microservice architecture

00:04:38.514 --> 00:04:41.074
<v Speaker 0>or service oriented architecture to some degree? And

00:04:41.074 --> 00:04:42.675
<v Speaker 0>were you part of that migration, if so?

00:04:43.060 --> 00:04:44.020
<v Speaker 1>Yeah. I think

00:04:44.340 --> 00:04:45.540
<v Speaker 1>very early on,

00:04:45.940 --> 00:04:48.979
<v Speaker 1>Wix adopted the service oriented architecture. I think

00:04:48.979 --> 00:04:50.580
<v Speaker 1>there were monoliths.

00:04:50.580 --> 00:04:52.500
<v Speaker 1>Like, at the very beginning, I think, there

00:04:52.500 --> 00:04:55.139
<v Speaker 1>were services that were expanded into a monolith

00:04:55.139 --> 00:04:57.699
<v Speaker 1>and were written, like, I think back in,

00:04:57.699 --> 00:04:59.745
<v Speaker 1>like, twenty o six, '20 o '7, '20

00:04:59.745 --> 00:05:02.625
<v Speaker 1>o '8. It's before my time, but with,

00:05:02.625 --> 00:05:03.025
<v Speaker 1>like,

00:05:03.505 --> 00:05:04.945
<v Speaker 1>Java technologies,

00:05:04.945 --> 00:05:06.465
<v Speaker 1>like, enterprise technologies,

00:05:06.465 --> 00:05:09.665
<v Speaker 1>monolithic stuff. But very, very quickly after that,

00:05:09.745 --> 00:05:13.080
<v Speaker 1>especially since we adopted Scala, we went over

00:05:13.080 --> 00:05:16.360
<v Speaker 1>to look more smaller and smaller services

00:05:16.680 --> 00:05:18.360
<v Speaker 1>and microservices

00:05:18.360 --> 00:05:21.720
<v Speaker 1>and haven't looked back since, really. We kept

00:05:21.720 --> 00:05:23.720
<v Speaker 1>on improving standardization,

00:05:23.720 --> 00:05:26.645
<v Speaker 1>ease of building in a new service with

00:05:26.645 --> 00:05:28.005
<v Speaker 1>all the different

00:05:28.405 --> 00:05:29.845
<v Speaker 1>cross cutting concerns

00:05:29.925 --> 00:05:31.845
<v Speaker 1>that are involved because it's really a big

00:05:31.845 --> 00:05:34.485
<v Speaker 1>challenge. So, like, keeping Velocity

00:05:34.485 --> 00:05:37.685
<v Speaker 1>fast with all the needed building blocks for

00:05:37.685 --> 00:05:40.485
<v Speaker 1>every service because while we may not be

00:05:40.750 --> 00:05:41.870
<v Speaker 1>monolithic,

00:05:41.870 --> 00:05:43.870
<v Speaker 1>it's in some respects, can think about the

00:05:43.870 --> 00:05:47.150
<v Speaker 1>Wix platform as a distributed monolith, right, because

00:05:47.150 --> 00:05:47.870
<v Speaker 1>you

00:05:48.110 --> 00:05:50.030
<v Speaker 1>have all these verticals

00:05:50.030 --> 00:05:53.389
<v Speaker 1>that offer a lot of more extra features

00:05:53.145 --> 00:05:55.305
<v Speaker 1>for the different kinds of websites. So you

00:05:55.305 --> 00:05:57.145
<v Speaker 1>can have an ecommerce store, but you can

00:05:57.145 --> 00:06:00.264
<v Speaker 1>also have the bookings features or a restaurant

00:06:00.264 --> 00:06:01.785
<v Speaker 1>or a hotel, etcetera.

00:06:02.345 --> 00:06:04.905
<v Speaker 1>And all of these have to work together

00:06:04.905 --> 00:06:06.710
<v Speaker 1>along with the

00:06:06.950 --> 00:06:08.630
<v Speaker 1>site editing infrastructure,

00:06:08.790 --> 00:06:10.630
<v Speaker 1>etcetera. So we have a lot of of

00:06:10.630 --> 00:06:13.990
<v Speaker 1>of different services working on very different domains.

00:06:13.990 --> 00:06:15.350
<v Speaker 1>But at the end of the day,

00:06:15.670 --> 00:06:18.565
<v Speaker 1>they need to have basic language to to

00:06:18.565 --> 00:06:20.245
<v Speaker 1>communicate, to propagate

00:06:20.245 --> 00:06:21.604
<v Speaker 1>user context,

00:06:21.764 --> 00:06:24.645
<v Speaker 1>and to do regulation like GDPR

00:06:24.724 --> 00:06:27.525
<v Speaker 1>and a lot of other concerns. Of course,

00:06:27.604 --> 00:06:30.245
<v Speaker 1>concerns where you work with microservices,

00:06:30.245 --> 00:06:32.164
<v Speaker 1>it's much harder to debug, much harder to

00:06:32.164 --> 00:06:34.200
<v Speaker 1>know what's going on. So you wanna have

00:06:34.200 --> 00:06:35.960
<v Speaker 1>good monitoring infrastructure

00:06:35.960 --> 00:06:38.600
<v Speaker 1>in place and and ease

00:06:38.600 --> 00:06:41.160
<v Speaker 1>of, like, a lot of tools to investigate.

00:06:41.160 --> 00:06:43.000
<v Speaker 1>So all of that has to be built

00:06:43.000 --> 00:06:45.160
<v Speaker 1>in to each and every microservice. And that's

00:06:45.160 --> 00:06:47.640
<v Speaker 1>why I say, okay. They are created independently

00:06:47.640 --> 00:06:48.680
<v Speaker 1>by different teams,

00:06:49.000 --> 00:06:51.455
<v Speaker 1>and they have completely different

00:06:51.854 --> 00:06:55.375
<v Speaker 1>domains, business domains. But in the technical aspect,

00:06:55.375 --> 00:06:56.895
<v Speaker 1>you can think about them as a distributed

00:06:56.895 --> 00:06:57.535
<v Speaker 1>model.

00:06:57.854 --> 00:07:00.574
<v Speaker 0>Alright. Awesome. Thank you. Like, if those you

00:07:00.574 --> 00:07:02.094
<v Speaker 0>know, you're an you're an engineer. Right? Your

00:07:02.094 --> 00:07:03.615
<v Speaker 0>nine to five is to to write code

00:07:03.615 --> 00:07:05.910
<v Speaker 0>and help build out the Wix platform. How

00:07:05.910 --> 00:07:07.190
<v Speaker 0>many of those services

00:07:07.430 --> 00:07:08.949
<v Speaker 0>do you have in your head as a

00:07:08.949 --> 00:07:09.750
<v Speaker 0>2,500?

00:07:09.750 --> 00:07:11.750
<v Speaker 0>I know it's a completely superficial question, but

00:07:11.750 --> 00:07:13.910
<v Speaker 0>I'm just curious, like, what is your exposure

00:07:13.910 --> 00:07:15.110
<v Speaker 0>to application

00:07:15.110 --> 00:07:16.949
<v Speaker 0>that size? How much of it can you

00:07:16.949 --> 00:07:19.465
<v Speaker 0>actually grow up on your own? Right. So

00:07:19.465 --> 00:07:20.825
<v Speaker 1>as an infrastructure

00:07:20.905 --> 00:07:21.785
<v Speaker 1>developer,

00:07:22.745 --> 00:07:25.465
<v Speaker 1>I I'm exposed to potentially all of them.

00:07:25.465 --> 00:07:26.585
<v Speaker 1>Like, each day,

00:07:27.305 --> 00:07:30.185
<v Speaker 1>some some team from another part of Wix

00:07:30.185 --> 00:07:32.824
<v Speaker 1>will contact us about some question or issue.

00:07:33.220 --> 00:07:36.260
<v Speaker 1>So at times, I'm familiar more with with

00:07:36.260 --> 00:07:38.340
<v Speaker 1>with with parts different parts.

00:07:38.660 --> 00:07:40.500
<v Speaker 1>But, of course, it's really impossible

00:07:40.900 --> 00:07:43.300
<v Speaker 1>to keep all 2,500,

00:07:43.540 --> 00:07:46.419
<v Speaker 1>in your head. So I know, the different

00:07:46.419 --> 00:07:48.660
<v Speaker 1>verticals. I know the different challenges.

00:07:48.740 --> 00:07:51.675
<v Speaker 1>Like, some verticals have more throughput than others.

00:07:51.675 --> 00:07:54.475
<v Speaker 1>You know, as the funnel shrinks,

00:07:54.475 --> 00:07:55.595
<v Speaker 1>you get less,

00:07:56.475 --> 00:07:59.115
<v Speaker 1>like, technical challenges. You can still have a

00:07:59.115 --> 00:08:02.315
<v Speaker 1>lot of API and and business and and,

00:08:02.875 --> 00:08:05.360
<v Speaker 1>like, business logic challenges, but you'll have less

00:08:05.360 --> 00:08:09.200
<v Speaker 1>technical challenges. So I'm probably more familiar with

00:08:09.200 --> 00:08:10.720
<v Speaker 1>the higher scale ones,

00:08:10.800 --> 00:08:11.600
<v Speaker 1>I would say.

00:08:12.160 --> 00:08:15.680
<v Speaker 1>But getting 2,500 is impossible for sure. Yeah.

00:08:15.680 --> 00:08:16.000
<v Speaker 0>I mean,

00:08:16.705 --> 00:08:18.065
<v Speaker 0>I I don't know what the split is

00:08:18.065 --> 00:08:21.345
<v Speaker 0>between application services and infrastructure services, but I

00:08:21.345 --> 00:08:23.825
<v Speaker 0>imagine there's a lot of identity stuff going

00:08:23.825 --> 00:08:26.465
<v Speaker 0>on. There's a lot of caching going on.

00:08:26.625 --> 00:08:29.870
<v Speaker 0>There's the message processing. There's consumers. Like, you

00:08:29.870 --> 00:08:31.710
<v Speaker 0>know, when you have as and I'm making

00:08:31.710 --> 00:08:33.470
<v Speaker 0>some assumptions right now. Right? Because I I

00:08:33.470 --> 00:08:35.390
<v Speaker 0>don't know a lot about works yet. But

00:08:35.390 --> 00:08:38.350
<v Speaker 0>I imagine there's a substantial amount of platforming

00:08:38.350 --> 00:08:39.870
<v Speaker 0>that has to be done to support the

00:08:39.870 --> 00:08:42.110
<v Speaker 0>developers to be able to, you know, onboard

00:08:42.110 --> 00:08:43.390
<v Speaker 0>and run their services

00:08:43.735 --> 00:08:46.455
<v Speaker 0>when you get to this level of scale.

00:08:46.455 --> 00:08:47.975
<v Speaker 0>So well, in fact, let's before I say,

00:08:47.975 --> 00:08:49.415
<v Speaker 0>like, what are the challenges, let's just start

00:08:49.415 --> 00:08:51.735
<v Speaker 0>off with, like, you know, why go down

00:08:51.735 --> 00:08:54.695
<v Speaker 0>this path of event driven architectures for a

00:08:54.695 --> 00:08:56.710
<v Speaker 0>system like like Wix? Like, what are the

00:08:56.710 --> 00:08:58.630
<v Speaker 0>pros and and what are the cons of

00:08:58.630 --> 00:09:00.070
<v Speaker 0>this? Sure. So

00:09:00.470 --> 00:09:03.670
<v Speaker 1>usually, when you start off with microservices,

00:09:03.750 --> 00:09:05.590
<v Speaker 1>if you come from analysts,

00:09:05.750 --> 00:09:09.515
<v Speaker 1>then you're used to function calls. Right? And

00:09:09.595 --> 00:09:10.715
<v Speaker 1>procedure calls.

00:09:10.875 --> 00:09:13.435
<v Speaker 1>And then the natural extension of that when

00:09:13.435 --> 00:09:15.595
<v Speaker 1>you split up to multiple services is to

00:09:15.595 --> 00:09:18.555
<v Speaker 1>do remote procedure calls or something

00:09:18.555 --> 00:09:19.595
<v Speaker 1>similar like

00:09:19.755 --> 00:09:20.635
<v Speaker 1>REST APIs.

00:09:20.970 --> 00:09:23.290
<v Speaker 1>And that's very a very natural thing to

00:09:23.290 --> 00:09:26.810
<v Speaker 1>do. Now what I've noticed that can happen

00:09:26.810 --> 00:09:29.529
<v Speaker 1>in such situations is it's it can be

00:09:29.529 --> 00:09:30.730
<v Speaker 1>a bit restrictive.

00:09:30.730 --> 00:09:31.610
<v Speaker 1>For instance,

00:09:32.170 --> 00:09:35.675
<v Speaker 1>you want to call call a service.

00:09:35.995 --> 00:09:39.195
<v Speaker 1>And actually, what like, in ecommerce,

00:09:39.195 --> 00:09:39.995
<v Speaker 1>your

00:09:40.315 --> 00:09:43.995
<v Speaker 1>card service calls the catalog service and

00:09:44.315 --> 00:09:47.755
<v Speaker 1>the inventory service, etcetera. And what usually happens

00:09:47.755 --> 00:09:50.480
<v Speaker 1>is, like, a big chain of of of

00:09:50.480 --> 00:09:51.840
<v Speaker 1>calls that that occur

00:09:52.480 --> 00:09:55.760
<v Speaker 1>in in such situations. Right? Like, you mentioned

00:09:55.760 --> 00:09:57.279
<v Speaker 1>identity

00:09:57.279 --> 00:09:59.839
<v Speaker 1>probably will be in the context, but also

00:09:59.839 --> 00:10:02.425
<v Speaker 1>a lot of of of business procedures

00:10:02.425 --> 00:10:04.425
<v Speaker 1>happen on different services, and and and you

00:10:04.425 --> 00:10:06.265
<v Speaker 1>start getting a very large

00:10:06.584 --> 00:10:09.865
<v Speaker 1>chain of of, requests between these services. And

00:10:09.865 --> 00:10:12.825
<v Speaker 1>and this this can really form a a

00:10:12.825 --> 00:10:15.640
<v Speaker 1>big challenge where you need to take care

00:10:15.640 --> 00:10:19.080
<v Speaker 1>of making sure that you still have resiliency

00:10:19.080 --> 00:10:21.000
<v Speaker 1>and fault tolerance in place. And that can

00:10:21.000 --> 00:10:23.240
<v Speaker 1>be tricky because you have to make sure

00:10:23.240 --> 00:10:27.205
<v Speaker 1>that you meet deadlines and give out responses

00:10:27.205 --> 00:10:30.165
<v Speaker 1>back in in in a orderly amount of

00:10:30.165 --> 00:10:32.565
<v Speaker 1>time, like a normal amount of time. And

00:10:32.565 --> 00:10:35.045
<v Speaker 1>when you spread out the request and and

00:10:35.045 --> 00:10:38.085
<v Speaker 1>get, like, a Russian dollar of requests here,

00:10:38.620 --> 00:10:41.260
<v Speaker 1>you you you end up being really dependent

00:10:41.260 --> 00:10:43.020
<v Speaker 1>on the availability

00:10:43.340 --> 00:10:45.340
<v Speaker 1>and the performance on each and every one

00:10:45.340 --> 00:10:48.060
<v Speaker 1>of these services along the chain. So it

00:10:48.060 --> 00:10:50.300
<v Speaker 1>can really make your

00:10:50.300 --> 00:10:53.495
<v Speaker 1>your request brittle. So, of course, there are

00:10:53.495 --> 00:10:55.495
<v Speaker 1>mitigations to stuff like that. Right? You can

00:10:55.735 --> 00:10:59.095
<v Speaker 1>if if a service is not, responding and

00:10:59.095 --> 00:11:01.255
<v Speaker 1>failing, you can retry.

00:11:01.735 --> 00:11:02.295
<v Speaker 1>Or

00:11:02.695 --> 00:11:05.880
<v Speaker 1>if, some service is completely down, you want

00:11:05.880 --> 00:11:08.760
<v Speaker 1>to avoid cascading failure, so, you introduce circuit

00:11:08.760 --> 00:11:12.040
<v Speaker 1>breakers to reduce the impact and not affect

00:11:12.040 --> 00:11:15.720
<v Speaker 1>the entire, system. But while we do have

00:11:15.720 --> 00:11:16.680
<v Speaker 1>a lot of

00:11:17.000 --> 00:11:19.240
<v Speaker 1>cloud applications at Wix with a lot of

00:11:19.240 --> 00:11:20.360
<v Speaker 1>request responses,

00:11:20.645 --> 00:11:23.445
<v Speaker 1>At the same time, we really rely very

00:11:23.445 --> 00:11:25.925
<v Speaker 1>heavily on an event driven architecture

00:11:25.925 --> 00:11:27.605
<v Speaker 1>as well. So it's kind of a hybrid

00:11:27.605 --> 00:11:28.485
<v Speaker 1>architecture.

00:11:28.565 --> 00:11:32.645
<v Speaker 1>And this type of architecture really makes everything

00:11:32.645 --> 00:11:34.550
<v Speaker 1>a lot more resilient,

00:11:34.550 --> 00:11:35.990
<v Speaker 1>and I would also say

00:11:36.550 --> 00:11:37.510
<v Speaker 1>decoupled.

00:11:38.150 --> 00:11:41.590
<v Speaker 1>So if we have some event happening on

00:11:41.590 --> 00:11:43.990
<v Speaker 1>the site infrastructure level. Right? So all of

00:11:43.990 --> 00:11:44.950
<v Speaker 1>these verticals

00:11:45.190 --> 00:11:48.385
<v Speaker 1>are interested in that. So imagine

00:11:48.385 --> 00:11:51.505
<v Speaker 1>all of them now calling the site's infrastructure

00:11:51.505 --> 00:11:53.905
<v Speaker 1>and requesting all kind of information.

00:11:53.985 --> 00:11:56.065
<v Speaker 1>So that can really get a a really

00:11:56.065 --> 00:11:58.625
<v Speaker 1>big bottleneck and really slow things down. So

00:11:58.625 --> 00:12:00.545
<v Speaker 1>you can cache a lot of the responses,

00:12:00.545 --> 00:12:03.370
<v Speaker 1>but caching is a mechanism that's really need

00:12:03.370 --> 00:12:05.690
<v Speaker 1>to be deployed carefully. You want to avoid

00:12:05.690 --> 00:12:08.250
<v Speaker 1>stale values because stale values can really corrupt

00:12:08.250 --> 00:12:11.690
<v Speaker 1>your data and provide the incorrect answers.

00:12:11.770 --> 00:12:14.730
<v Speaker 1>So if you have just events

00:12:14.730 --> 00:12:15.690
<v Speaker 1>being emitted

00:12:16.254 --> 00:12:19.295
<v Speaker 1>from the site infra service, so all the

00:12:19.295 --> 00:12:21.774
<v Speaker 1>verticals, different verticals like e comm and restaurants

00:12:21.774 --> 00:12:25.134
<v Speaker 1>and hotels can can consume them and and

00:12:25.134 --> 00:12:28.975
<v Speaker 1>decide what's interesting to them and keep that

00:12:29.055 --> 00:12:30.574
<v Speaker 1>smaller dataset

00:12:30.540 --> 00:12:32.620
<v Speaker 1>on their side, you get a much more

00:12:32.620 --> 00:12:33.580
<v Speaker 1>resilient

00:12:33.580 --> 00:12:36.540
<v Speaker 1>distributor system here. You get a lot more

00:12:36.700 --> 00:12:38.620
<v Speaker 1>like, the the decoupled nature

00:12:38.700 --> 00:12:41.420
<v Speaker 1>means that you reduce blast radiuses.

00:12:41.740 --> 00:12:44.779
<v Speaker 1>You you kind of silo issues. Right? If

00:12:45.005 --> 00:12:47.165
<v Speaker 1>if the restaurant's

00:12:47.245 --> 00:12:50.125
<v Speaker 1>consumer of site events has some issue now,

00:12:50.125 --> 00:12:51.885
<v Speaker 1>it does it can it just cannot affect

00:12:51.885 --> 00:12:53.165
<v Speaker 1>any other vertical.

00:12:53.325 --> 00:12:55.805
<v Speaker 1>It's impossible. Right? So that's a lot a

00:12:55.805 --> 00:12:56.765
<v Speaker 1>great advantage.

00:12:56.765 --> 00:12:59.245
<v Speaker 1>And I'm sorry for the long answer, but

00:12:59.245 --> 00:13:00.125
<v Speaker 1>also

00:13:00.430 --> 00:13:01.150
<v Speaker 1>Wix,

00:13:01.710 --> 00:13:04.350
<v Speaker 1>like I said, evolved from only catering to

00:13:04.350 --> 00:13:05.310
<v Speaker 1>do it yourself,

00:13:05.950 --> 00:13:09.150
<v Speaker 1>site owners to actually work with developers.

00:13:09.230 --> 00:13:12.750
<v Speaker 1>And then they also require to know sometimes

00:13:12.750 --> 00:13:15.745
<v Speaker 1>what's going on, in the site. And one

00:13:15.745 --> 00:13:17.904
<v Speaker 1>of the ways like, if they develop JavaScript

00:13:17.904 --> 00:13:19.665
<v Speaker 1>on top of a Wix site, they wanna

00:13:19.665 --> 00:13:23.185
<v Speaker 1>get sometimes JavaScript callbacks and do actions when

00:13:23.185 --> 00:13:23.985
<v Speaker 1>stuff happen.

00:13:24.464 --> 00:13:25.105
<v Speaker 1>So,

00:13:25.265 --> 00:13:28.545
<v Speaker 1>naturally, it will be much easier to expose

00:13:28.545 --> 00:13:30.065
<v Speaker 1>all the rich possibilities

00:13:30.450 --> 00:13:34.050
<v Speaker 1>that the Wix platform offers as JavaScript events

00:13:34.050 --> 00:13:35.730
<v Speaker 1>or callbacks

00:13:35.730 --> 00:13:38.370
<v Speaker 1>than you would want to have the ability

00:13:38.370 --> 00:13:40.770
<v Speaker 1>to emit events from all of your microservices

00:13:40.770 --> 00:13:44.130
<v Speaker 1>potentially, right, to make it a platformized effort

00:13:43.785 --> 00:13:45.384
<v Speaker 1>so that it easily

00:13:45.384 --> 00:13:47.065
<v Speaker 1>then translated over

00:13:47.305 --> 00:13:50.345
<v Speaker 1>to to this JavaScript callback or to the

00:13:50.425 --> 00:13:53.545
<v Speaker 1>to an HTTP webhook and stuff like that.

00:13:53.944 --> 00:13:56.264
<v Speaker 1>So it gives you flexibility,

00:13:56.345 --> 00:13:57.225
<v Speaker 1>resilience,

00:13:57.545 --> 00:13:58.745
<v Speaker 1>and the ability

00:13:59.270 --> 00:14:02.070
<v Speaker 1>to layer stuff one on top of the

00:14:02.070 --> 00:14:03.990
<v Speaker 1>other much more easily in in a more

00:14:03.990 --> 00:14:04.950
<v Speaker 1>robust way.

00:14:05.350 --> 00:14:07.830
<v Speaker 0>Okay. Thank you. So just to kinda recap

00:14:07.830 --> 00:14:09.510
<v Speaker 0>a little bit of that. Right? You know,

00:14:09.510 --> 00:14:12.470
<v Speaker 0>you're talking about how you've got services,

00:14:12.470 --> 00:14:14.310
<v Speaker 0>and and some of them have, let's call

00:14:14.310 --> 00:14:17.865
<v Speaker 0>it, an an an appetite for eventual consistency

00:14:18.105 --> 00:14:19.545
<v Speaker 0>to the point, I guess, it's maybe not

00:14:19.545 --> 00:14:22.585
<v Speaker 0>binary, but either they cannot accept eventual consistency,

00:14:22.585 --> 00:14:23.945
<v Speaker 0>and those are probably gonna be more likely

00:14:23.945 --> 00:14:25.785
<v Speaker 0>to be your your current based endpoints that

00:14:25.785 --> 00:14:27.560
<v Speaker 0>you were mentioning. And then there's the ones

00:14:27.560 --> 00:14:29.640
<v Speaker 0>where it's okay. Maybe we can accept some

00:14:29.640 --> 00:14:31.880
<v Speaker 0>eventual consistency so they may take on a

00:14:31.880 --> 00:14:33.400
<v Speaker 0>more event driven pattern.

00:14:34.360 --> 00:14:37.400
<v Speaker 0>And you also spoke there about cascading failures

00:14:37.400 --> 00:14:39.880
<v Speaker 0>and, you know, the Russian doll of HTTP

00:14:39.880 --> 00:14:41.000
<v Speaker 0>request, right, which is

00:14:41.754 --> 00:14:43.435
<v Speaker 0>a a very difficult

00:14:43.514 --> 00:14:44.235
<v Speaker 0>problem.

00:14:44.875 --> 00:14:47.675
<v Speaker 0>You know, I think the paper that I

00:14:47.675 --> 00:14:49.915
<v Speaker 0>often refer to here is the Twitter paper

00:14:49.915 --> 00:14:52.154
<v Speaker 0>on where they were trying to solve something

00:14:52.154 --> 00:14:54.475
<v Speaker 0>like this with retry logic, baking it in

00:14:54.475 --> 00:14:56.074
<v Speaker 0>to, like, a client library, which is now

00:14:56.074 --> 00:14:57.194
<v Speaker 0>spun out to service mesh.

00:14:57.950 --> 00:15:00.350
<v Speaker 0>Is that the approach that Wix take?

00:15:00.350 --> 00:15:02.270
<v Speaker 0>Do you use service mesh to provide that

00:15:02.270 --> 00:15:04.750
<v Speaker 0>tooling to your application developers, or have you

00:15:04.750 --> 00:15:06.590
<v Speaker 0>gone down a definite route to kinda help

00:15:06.590 --> 00:15:09.310
<v Speaker 0>them with retries and circuit breakers? Like, I'd

00:15:09.310 --> 00:15:11.710
<v Speaker 0>really love to understand how you've implemented that.

00:15:12.065 --> 00:15:14.945
<v Speaker 1>Sure. So, yes, we we do utilize

00:15:15.345 --> 00:15:16.464
<v Speaker 1>a service mesh,

00:15:16.704 --> 00:15:17.185
<v Speaker 1>and

00:15:17.505 --> 00:15:17.825
<v Speaker 1>we

00:15:18.385 --> 00:15:20.305
<v Speaker 1>I don't think there's a standard

00:15:20.305 --> 00:15:23.345
<v Speaker 1>circuit breaker mechanism at Wix. And I think

00:15:23.745 --> 00:15:25.425
<v Speaker 1>we try at the end of the day

00:15:25.425 --> 00:15:26.225
<v Speaker 1>the

00:15:26.305 --> 00:15:28.220
<v Speaker 1>responsibility of the specific

00:15:28.860 --> 00:15:29.580
<v Speaker 1>service,

00:15:29.820 --> 00:15:32.060
<v Speaker 1>like, as a client. I think service mesh,

00:15:32.060 --> 00:15:36.459
<v Speaker 1>in our case, mostly helps with easy, like,

00:15:36.459 --> 00:15:38.940
<v Speaker 1>discoverability and easily addressing,

00:15:38.940 --> 00:15:42.060
<v Speaker 1>right, the the correct service and and not

00:15:42.185 --> 00:15:45.065
<v Speaker 1>need needing to worry about it the request

00:15:45.065 --> 00:15:48.024
<v Speaker 1>getting to to the correct correct place.

00:15:48.345 --> 00:15:50.425
<v Speaker 1>And so in that respect,

00:15:50.665 --> 00:15:53.545
<v Speaker 1>what what we do try to enforce

00:15:53.785 --> 00:15:57.225
<v Speaker 1>in these requests usually like, the default time

00:15:57.730 --> 00:15:59.090
<v Speaker 1>that a request

00:15:59.250 --> 00:16:01.890
<v Speaker 1>has to get a response is quite short.

00:16:01.890 --> 00:16:04.130
<v Speaker 1>I don't remember the exact amount of seconds,

00:16:04.130 --> 00:16:05.810
<v Speaker 1>but it's it's quite short.

00:16:06.290 --> 00:16:08.450
<v Speaker 1>So you have to have a good reason

00:16:08.450 --> 00:16:11.010
<v Speaker 1>to to then increase it. Right? Because the

00:16:11.010 --> 00:16:11.730
<v Speaker 1>longer

00:16:12.210 --> 00:16:12.930
<v Speaker 1>the response

00:16:13.485 --> 00:16:16.045
<v Speaker 1>can potentially be allowed to return,

00:16:16.204 --> 00:16:17.644
<v Speaker 1>the more problematic

00:16:17.644 --> 00:16:19.565
<v Speaker 1>it is for the health of the distributor

00:16:19.565 --> 00:16:20.605
<v Speaker 1>system. Right?

00:16:20.925 --> 00:16:23.165
<v Speaker 1>So the time budgets here are are quite

00:16:23.165 --> 00:16:24.524
<v Speaker 1>constrained. And

00:16:24.845 --> 00:16:26.819
<v Speaker 1>if a service does not meet up to

00:16:26.819 --> 00:16:29.459
<v Speaker 1>those standards, then they need to work hard

00:16:29.459 --> 00:16:30.980
<v Speaker 1>on the performance,

00:16:30.980 --> 00:16:33.540
<v Speaker 1>right, improve their RPC endpoints.

00:16:33.779 --> 00:16:35.860
<v Speaker 1>And if their database

00:16:36.579 --> 00:16:39.699
<v Speaker 1>is starting to have to act act up,

00:16:39.699 --> 00:16:41.459
<v Speaker 1>then they need to

00:16:41.754 --> 00:16:44.714
<v Speaker 1>investigate how how to solve it and maybe

00:16:44.714 --> 00:16:46.714
<v Speaker 1>switch to a different technology

00:16:46.795 --> 00:16:49.435
<v Speaker 1>and stuff like that. But I would say

00:16:49.435 --> 00:16:52.634
<v Speaker 1>that for Wix, a lot of the services

00:16:52.714 --> 00:16:54.394
<v Speaker 1>don't suffer

00:16:54.394 --> 00:16:56.555
<v Speaker 1>necessarily the scaling issues because of the funnel

00:16:56.555 --> 00:16:57.840
<v Speaker 1>I talked about. So we have, like, the

00:16:57.840 --> 00:17:01.120
<v Speaker 1>heavy duty services that have very specialized

00:17:01.120 --> 00:17:03.040
<v Speaker 1>data storage solutions,

00:17:03.120 --> 00:17:05.839
<v Speaker 1>and others usually are are quite fine with

00:17:05.839 --> 00:17:06.720
<v Speaker 1>MySQL.

00:17:06.720 --> 00:17:07.279
<v Speaker 1>So

00:17:08.240 --> 00:17:10.615
<v Speaker 1>will get MySQL in the last few years

00:17:10.615 --> 00:17:12.535
<v Speaker 1>introduced document database.

00:17:12.535 --> 00:17:15.494
<v Speaker 1>So because we were heavily invested in MySQL,

00:17:15.494 --> 00:17:17.575
<v Speaker 1>we took the ability to now work with

00:17:17.575 --> 00:17:20.055
<v Speaker 1>documents and JSONs with MySQL in both hands,

00:17:20.055 --> 00:17:21.895
<v Speaker 1>and we have database layer on top of

00:17:21.895 --> 00:17:22.055
<v Speaker 1>that.

00:17:22.909 --> 00:17:25.950
<v Speaker 1>So it it's really simple and fast to

00:17:25.950 --> 00:17:28.429
<v Speaker 1>to create new

00:17:28.429 --> 00:17:30.750
<v Speaker 1>domain entities and and to persist them and

00:17:30.750 --> 00:17:32.349
<v Speaker 1>update them. And

00:17:32.669 --> 00:17:34.349
<v Speaker 1>in terms of the

00:17:35.309 --> 00:17:36.269
<v Speaker 1>latencies

00:17:36.350 --> 00:17:37.950
<v Speaker 1>and and performance,

00:17:38.305 --> 00:17:41.505
<v Speaker 1>usually, it works quite well quite well, and

00:17:41.505 --> 00:17:43.825
<v Speaker 1>and they get their own tables. So sorry

00:17:43.825 --> 00:17:45.105
<v Speaker 1>about the rabbit hole,

00:17:45.585 --> 00:17:46.145
<v Speaker 1>but

00:17:46.865 --> 00:17:48.945
<v Speaker 1>maybe I'm my own Russian doll here. But

00:17:48.945 --> 00:17:50.385
<v Speaker 1>in terms of

00:17:51.419 --> 00:17:54.940
<v Speaker 1>on on getting the the best performance

00:17:55.020 --> 00:17:56.299
<v Speaker 1>and and resilience,

00:17:56.299 --> 00:17:58.059
<v Speaker 1>it's up to the developer at the end

00:17:58.059 --> 00:18:00.380
<v Speaker 1>of the day. The developer like, if I'm

00:18:00.380 --> 00:18:03.580
<v Speaker 1>I'm starting to notice that my KPIs

00:18:03.580 --> 00:18:04.700
<v Speaker 1>are starting

00:18:04.700 --> 00:18:07.855
<v Speaker 1>to be problematic and it's because of this

00:18:07.855 --> 00:18:08.895
<v Speaker 1>this service,

00:18:09.055 --> 00:18:11.295
<v Speaker 1>then may I may reach out to them

00:18:11.295 --> 00:18:13.535
<v Speaker 1>and ask them to to to fix their

00:18:13.535 --> 00:18:14.175
<v Speaker 1>performance

00:18:14.335 --> 00:18:17.055
<v Speaker 1>if they haven't noticed it. And another way

00:18:17.055 --> 00:18:18.815
<v Speaker 1>I can do it is I can consume

00:18:18.815 --> 00:18:19.695
<v Speaker 1>their events

00:18:20.160 --> 00:18:22.400
<v Speaker 1>and have my own materialized view and then

00:18:22.400 --> 00:18:23.760
<v Speaker 1>and then just

00:18:23.760 --> 00:18:26.559
<v Speaker 1>take the responsibility for performance completely

00:18:26.560 --> 00:18:29.280
<v Speaker 1>for my for my on my end, which

00:18:29.280 --> 00:18:29.840
<v Speaker 1>is,

00:18:30.720 --> 00:18:32.400
<v Speaker 1>like you said, if you can do it

00:18:32.400 --> 00:18:35.120
<v Speaker 1>in eventually eventually consistent way, then

00:18:35.445 --> 00:18:37.365
<v Speaker 1>it's definitely an option. And I think at

00:18:37.365 --> 00:18:38.725
<v Speaker 1>weeks, like, 99%

00:18:38.725 --> 00:18:41.764
<v Speaker 1>of the cases, eventually consistent is good enough.

00:18:42.085 --> 00:18:42.724
<v Speaker 0>Okay.

00:18:43.125 --> 00:18:45.365
<v Speaker 0>There was a lot there in that answer.

00:18:45.365 --> 00:18:47.524
<v Speaker 0>So let's let's cover a few things and

00:18:47.524 --> 00:18:50.005
<v Speaker 0>remove a few assumptions for the audience. Right?

00:18:50.500 --> 00:18:52.179
<v Speaker 1>Yeah. When you interview me, you need to

00:18:52.179 --> 00:18:53.299
<v Speaker 1>keep a notebook.

00:18:53.460 --> 00:18:55.220
<v Speaker 0>Have been taking notes. You'll have heard my

00:18:55.220 --> 00:18:56.580
<v Speaker 0>keyboard touch. But

00:18:57.700 --> 00:19:00.260
<v Speaker 0>Yeah. You we we both mentioned service mesh.

00:19:00.260 --> 00:19:02.500
<v Speaker 0>You confirmed there as some service mesh. We're

00:19:02.500 --> 00:19:04.260
<v Speaker 0>using some API surface of that. So I

00:19:04.260 --> 00:19:04.980
<v Speaker 0>just wanna clarify.

00:19:05.885 --> 00:19:07.885
<v Speaker 0>Does WEX run on top all these 200

00:19:08.125 --> 00:19:09.005
<v Speaker 0>2,500

00:19:09.005 --> 00:19:10.764
<v Speaker 0>services on top of Kubernetes?

00:19:11.005 --> 00:19:13.965
<v Speaker 1>Yes. Right. Okay. Cool. You also spoke Short

00:19:13.965 --> 00:19:14.524
<v Speaker 1>answer.

00:19:15.085 --> 00:19:15.724
<v Speaker 0>Yeah.

00:19:16.284 --> 00:19:17.885
<v Speaker 0>Well, we're gonna get to the harder stuff.

00:19:17.885 --> 00:19:19.565
<v Speaker 0>There's what you worry. Plenty of time for

00:19:19.565 --> 00:19:21.760
<v Speaker 0>us to chat. But you spoke about the

00:19:21.760 --> 00:19:24.720
<v Speaker 0>the application developers and their responsibilities,

00:19:24.960 --> 00:19:26.320
<v Speaker 0>you know, where they get to select their

00:19:26.320 --> 00:19:28.320
<v Speaker 0>own tooling, their own databases. They were responsible

00:19:28.320 --> 00:19:30.320
<v Speaker 0>for client side retries and such.

00:19:31.200 --> 00:19:33.040
<v Speaker 0>You're on the back end of our team.

00:19:33.040 --> 00:19:34.240
<v Speaker 0>Right? You lead the back end of our

00:19:34.240 --> 00:19:36.605
<v Speaker 0>team. So I'd love for us to understand

00:19:36.605 --> 00:19:38.125
<v Speaker 0>how the responsibilities

00:19:38.125 --> 00:19:40.765
<v Speaker 0>at Wix work with regards to what does

00:19:40.765 --> 00:19:42.284
<v Speaker 0>the back end of our team,

00:19:42.845 --> 00:19:43.565
<v Speaker 0>provide.

00:19:43.645 --> 00:19:46.765
<v Speaker 0>Is it just cluster? Is it SRE semantics?

00:19:46.765 --> 00:19:47.725
<v Speaker 0>Is it observability?

00:19:48.090 --> 00:19:50.570
<v Speaker 0>Is it guidance? Are you embedded within application

00:19:50.570 --> 00:19:52.650
<v Speaker 0>teams? Like, can you go into just how

00:19:52.650 --> 00:19:55.289
<v Speaker 0>you work with the the devs and how

00:19:55.289 --> 00:19:56.570
<v Speaker 0>you put this all together?

00:19:56.890 --> 00:19:57.609
<v Speaker 1>Sure.

00:19:57.850 --> 00:20:00.090
<v Speaker 1>So there are two levels of infrastructure

00:20:01.845 --> 00:20:03.365
<v Speaker 1>for back end at Wix.

00:20:03.685 --> 00:20:06.565
<v Speaker 1>There's the more, I would say, low level

00:20:06.565 --> 00:20:09.925
<v Speaker 1>low level part, which says, okay, we're running

00:20:09.925 --> 00:20:10.725
<v Speaker 1>Kafka.

00:20:10.805 --> 00:20:13.125
<v Speaker 1>How can we translate that to work well

00:20:13.125 --> 00:20:14.005
<v Speaker 1>with microservices?

00:20:14.640 --> 00:20:16.560
<v Speaker 1>Or, okay, we're running MySQL.

00:20:16.560 --> 00:20:19.520
<v Speaker 1>How can we simplify

00:20:19.520 --> 00:20:21.919
<v Speaker 1>it for, like, routing

00:20:22.400 --> 00:20:24.640
<v Speaker 1>layers on top and make it

00:20:25.680 --> 00:20:29.495
<v Speaker 1>easier to work with? And and also caching

00:20:29.735 --> 00:20:31.495
<v Speaker 1>and stuff like that. So we we have

00:20:31.495 --> 00:20:32.455
<v Speaker 1>a caching

00:20:32.535 --> 00:20:36.535
<v Speaker 1>solution that is partially based on AWS

00:20:36.535 --> 00:20:39.735
<v Speaker 1>DynamoDB, like the second layer. So I would

00:20:39.735 --> 00:20:42.710
<v Speaker 1>say this, like, the more cloud infrastructure

00:20:42.950 --> 00:20:45.830
<v Speaker 1>translations to microservices level. And then on top

00:20:45.830 --> 00:20:47.990
<v Speaker 1>of that, we have the I would call

00:20:47.990 --> 00:20:51.429
<v Speaker 1>them the platform engineers maybe. Their goal is

00:20:51.429 --> 00:20:54.630
<v Speaker 1>to make, like, building a microservices super simple

00:20:54.630 --> 00:20:56.225
<v Speaker 1>and fast. Okay?

00:20:57.025 --> 00:20:59.505
<v Speaker 1>So the journey for the developer usually starts

00:20:59.505 --> 00:21:00.945
<v Speaker 1>with writing the

00:21:00.945 --> 00:21:02.785
<v Speaker 1>interface in protobuf.

00:21:02.945 --> 00:21:04.945
<v Speaker 1>And it's not only the interface of of

00:21:04.945 --> 00:21:07.505
<v Speaker 1>the service, like what RPC

00:21:07.505 --> 00:21:10.220
<v Speaker 1>and Kafka endpoints are part of it. But,

00:21:10.220 --> 00:21:12.940
<v Speaker 1>also, a lot of the tweaks are done

00:21:12.940 --> 00:21:14.219
<v Speaker 1>in in in Proto,

00:21:14.299 --> 00:21:15.019
<v Speaker 1>and then

00:21:15.500 --> 00:21:17.980
<v Speaker 1>code is generated behind the scenes for it

00:21:17.980 --> 00:21:18.619
<v Speaker 1>to work.

00:21:19.340 --> 00:21:21.419
<v Speaker 1>And then you complete a little bit more

00:21:21.419 --> 00:21:24.785
<v Speaker 1>configuration in code, and you can focus on

00:21:24.785 --> 00:21:27.585
<v Speaker 1>the business logic. So because you have database

00:21:27.585 --> 00:21:29.985
<v Speaker 1>layer that you work with and I'm talking

00:21:29.985 --> 00:21:32.225
<v Speaker 1>about, like, the 80%. Right? It's not like

00:21:32.225 --> 00:21:34.945
<v Speaker 1>each and every service weeks, especially not the,

00:21:34.945 --> 00:21:35.424
<v Speaker 1>like,

00:21:35.745 --> 00:21:39.025
<v Speaker 1>really high scale ones. They they can't

00:21:39.320 --> 00:21:41.640
<v Speaker 1>operate under these these templates. Right? But for

00:21:41.640 --> 00:21:43.559
<v Speaker 1>the 80%, like, we have a lot of

00:21:43.559 --> 00:21:46.440
<v Speaker 1>verticals, a lot of various segments that have

00:21:46.440 --> 00:21:49.640
<v Speaker 1>a little bit less traffic. And all of

00:21:49.640 --> 00:21:52.200
<v Speaker 1>these tools and and this framework,

00:21:52.520 --> 00:21:54.794
<v Speaker 1>really allows them to focus on, like, the

00:21:54.794 --> 00:21:56.955
<v Speaker 1>domain challenge. Right? How

00:21:57.355 --> 00:22:00.235
<v Speaker 1>can we make sure that we provide the

00:22:00.235 --> 00:22:02.955
<v Speaker 1>best booking solution and and make it so

00:22:02.955 --> 00:22:05.115
<v Speaker 1>you can have all all these cool features

00:22:05.115 --> 00:22:07.354
<v Speaker 1>on, like, sending reminders

00:22:07.355 --> 00:22:08.075
<v Speaker 1>and

00:22:08.320 --> 00:22:11.680
<v Speaker 1>starting soon and and be able to easily

00:22:11.680 --> 00:22:12.559
<v Speaker 1>rebook

00:22:12.560 --> 00:22:13.840
<v Speaker 1>rebook classes

00:22:13.840 --> 00:22:16.960
<v Speaker 1>and maybe suggesting classes that are similar. Right?

00:22:16.960 --> 00:22:19.679
<v Speaker 1>So all of these rich business domains,

00:22:20.400 --> 00:22:22.605
<v Speaker 1>they can focus on that. And what do

00:22:22.605 --> 00:22:25.165
<v Speaker 1>they get behind the scenes? So they get

00:22:25.165 --> 00:22:26.684
<v Speaker 1>the auto generated

00:22:26.685 --> 00:22:27.485
<v Speaker 1>RPC

00:22:28.045 --> 00:22:28.925
<v Speaker 1>endpoints.

00:22:28.925 --> 00:22:30.605
<v Speaker 1>So all they need to do is

00:22:30.925 --> 00:22:33.245
<v Speaker 1>fill in the what action to take when

00:22:33.245 --> 00:22:36.020
<v Speaker 1>when they get such a request and how

00:22:36.020 --> 00:22:38.740
<v Speaker 1>to handle and process an incoming event. Right?

00:22:38.740 --> 00:22:41.220
<v Speaker 1>They they need to write that in. And

00:22:41.220 --> 00:22:42.740
<v Speaker 1>if they need to act interact with the

00:22:42.740 --> 00:22:44.499
<v Speaker 1>database, so usually,

00:22:44.580 --> 00:22:47.860
<v Speaker 1>they they just work with our

00:22:47.860 --> 00:22:51.140
<v Speaker 1>simple DB layer that I mentioned before. It's

00:22:50.205 --> 00:22:51.964
<v Speaker 1>the works with document

00:22:52.284 --> 00:22:53.085
<v Speaker 1>flavor

00:22:53.085 --> 00:22:54.604
<v Speaker 1>of of MySQL

00:22:54.684 --> 00:22:57.404
<v Speaker 1>and with JSON support. So what happens?

00:22:57.725 --> 00:22:58.924
<v Speaker 1>You get your

00:22:59.404 --> 00:23:01.004
<v Speaker 1>RPC or Kafka

00:23:01.325 --> 00:23:02.605
<v Speaker 1>domain entity,

00:23:03.510 --> 00:23:06.150
<v Speaker 1>And you use another tool that you can

00:23:06.150 --> 00:23:08.789
<v Speaker 1>employ here, which is auto mapping to your

00:23:09.110 --> 00:23:10.870
<v Speaker 1>data layer entity. Right?

00:23:11.270 --> 00:23:13.429
<v Speaker 1>So and that data layer entity,

00:23:13.510 --> 00:23:16.070
<v Speaker 1>you can easily add indexes if needed

00:23:16.705 --> 00:23:18.865
<v Speaker 1>to get better performance and stuff like that.

00:23:18.865 --> 00:23:19.425
<v Speaker 1>So

00:23:19.745 --> 00:23:21.585
<v Speaker 1>the idea is to really

00:23:22.705 --> 00:23:24.865
<v Speaker 1>abstract away the intricacies

00:23:25.265 --> 00:23:26.305
<v Speaker 1>of the

00:23:26.705 --> 00:23:29.345
<v Speaker 1>SQL queries or or stuff like that. And

00:23:29.345 --> 00:23:32.970
<v Speaker 1>you also will get built in, like, PII

00:23:32.970 --> 00:23:35.370
<v Speaker 1>encryption when needed or

00:23:35.610 --> 00:23:37.289
<v Speaker 1>the built in

00:23:37.930 --> 00:23:38.889
<v Speaker 1>notifications

00:23:38.890 --> 00:23:41.210
<v Speaker 1>and segmentation needed for GDPR

00:23:41.370 --> 00:23:42.809
<v Speaker 1>and stuff like that. Right?

00:23:43.290 --> 00:23:46.250
<v Speaker 1>And now we're getting to the data locality

00:23:46.250 --> 00:23:47.450
<v Speaker 1>realm where

00:23:47.755 --> 00:23:49.674
<v Speaker 1>because of other regulations, you need to keep

00:23:49.674 --> 00:23:51.514
<v Speaker 1>something only in Europe or

00:23:51.835 --> 00:23:53.355
<v Speaker 1>only in The US and stuff like that.

00:23:53.355 --> 00:23:54.955
<v Speaker 1>So all of that can be taken care

00:23:54.955 --> 00:23:56.234
<v Speaker 1>of for you seamlessly.

00:23:56.235 --> 00:23:58.234
<v Speaker 1>Yeah. So if I recap,

00:23:58.554 --> 00:24:00.794
<v Speaker 1>we we get, like, the platform engineers giving

00:24:00.794 --> 00:24:03.115
<v Speaker 1>you really simple interfaces

00:24:03.300 --> 00:24:06.180
<v Speaker 1>to auto generate the code. And we're actually

00:24:06.180 --> 00:24:07.700
<v Speaker 1>really excited about

00:24:07.940 --> 00:24:09.140
<v Speaker 1>the possibilities

00:24:09.140 --> 00:24:09.780
<v Speaker 1>of

00:24:10.100 --> 00:24:13.860
<v Speaker 1>large language models like Chachi PT to harness

00:24:13.860 --> 00:24:16.020
<v Speaker 1>all the great work that's been done so

00:24:16.020 --> 00:24:16.820
<v Speaker 1>far and

00:24:17.220 --> 00:24:19.445
<v Speaker 1>take it to the next level and increase

00:24:19.445 --> 00:24:21.125
<v Speaker 1>velocity even further.

00:24:21.365 --> 00:24:22.005
<v Speaker 0>Okay.

00:24:22.405 --> 00:24:24.245
<v Speaker 0>Awesome. I always like to just give, like,

00:24:24.245 --> 00:24:25.685
<v Speaker 0>that ten second recap to make sure I

00:24:25.685 --> 00:24:27.525
<v Speaker 0>even I understand everything, and we haven't messed

00:24:27.525 --> 00:24:29.284
<v Speaker 0>up on any of the good details there.

00:24:29.605 --> 00:24:31.285
<v Speaker 0>You could pick the low level cloud infrastructure

00:24:31.285 --> 00:24:32.965
<v Speaker 0>team, the back end of your team where

00:24:32.965 --> 00:24:36.220
<v Speaker 0>you're providing the the Kubernetes clusters, the cloud

00:24:36.220 --> 00:24:37.100
<v Speaker 0>resources,

00:24:37.660 --> 00:24:40.220
<v Speaker 0>and all that stuff. Right? Yeah. So that's

00:24:40.220 --> 00:24:41.980
<v Speaker 1>another part of Wix. Wix is a big

00:24:41.980 --> 00:24:42.619
<v Speaker 1>company.

00:24:43.500 --> 00:24:45.499
<v Speaker 1>So, like, the cloud infrastructure

00:24:45.820 --> 00:24:48.700
<v Speaker 1>is run, like, outside of the back end.

00:24:48.780 --> 00:24:50.335
<v Speaker 1>And then

00:24:50.495 --> 00:24:51.134
<v Speaker 1>we

00:24:51.455 --> 00:24:53.455
<v Speaker 1>like, I'm part of the you can say

00:24:53.455 --> 00:24:54.255
<v Speaker 1>CloudInfo

00:24:54.255 --> 00:24:56.174
<v Speaker 1>for for the back end.

00:24:56.735 --> 00:24:58.575
<v Speaker 1>And, actually, we developed a lot of cool

00:24:58.575 --> 00:25:01.215
<v Speaker 1>stuff on top of Kafka. Right? Because

00:25:01.560 --> 00:25:03.800
<v Speaker 1>you wanna make sure that you get the

00:25:03.800 --> 00:25:06.040
<v Speaker 1>best performance out of Kafka possible.

00:25:06.600 --> 00:25:07.240
<v Speaker 1>And

00:25:07.880 --> 00:25:09.240
<v Speaker 1>to solve

00:25:09.240 --> 00:25:11.720
<v Speaker 1>all these tricky edge cases of, oh, wait.

00:25:11.720 --> 00:25:12.760
<v Speaker 1>For some reason,

00:25:13.160 --> 00:25:16.200
<v Speaker 1>the service pod wasn't able to reach the

00:25:16.200 --> 00:25:17.080
<v Speaker 1>Kafka

00:25:17.105 --> 00:25:19.345
<v Speaker 1>broker for some reason, and and we get

00:25:19.505 --> 00:25:22.304
<v Speaker 1>we added a resiliency layer here.

00:25:22.865 --> 00:25:23.424
<v Speaker 1>And

00:25:23.665 --> 00:25:26.385
<v Speaker 1>for the consumer side, we added resiliency

00:25:26.625 --> 00:25:28.865
<v Speaker 1>because we implemented all kinds of reach wise

00:25:28.865 --> 00:25:29.505
<v Speaker 1>strategies

00:25:30.040 --> 00:25:33.159
<v Speaker 1>built in. It's really easy to configure.

00:25:33.800 --> 00:25:37.399
<v Speaker 1>And so we have a rich set of,

00:25:37.400 --> 00:25:39.880
<v Speaker 1>like, event driven messaging infrastructure

00:25:39.880 --> 00:25:42.040
<v Speaker 1>on top of

00:25:42.225 --> 00:25:43.424
<v Speaker 1>of Kafka.

00:25:43.664 --> 00:25:45.024
<v Speaker 1>And we also have

00:25:45.265 --> 00:25:49.025
<v Speaker 1>self-service tools to manage issues in your production

00:25:49.025 --> 00:25:51.264
<v Speaker 1>environment. So things like

00:25:51.905 --> 00:25:53.265
<v Speaker 1>easily pinpointing

00:25:53.265 --> 00:25:55.400
<v Speaker 1>an event that that you're

00:25:55.400 --> 00:25:57.640
<v Speaker 1>interested in in our control plane that we

00:25:57.640 --> 00:25:58.759
<v Speaker 1>built or

00:25:59.080 --> 00:25:59.960
<v Speaker 1>investigating

00:25:59.960 --> 00:26:02.360
<v Speaker 1>why some partitions in Kafka have

00:26:02.600 --> 00:26:04.679
<v Speaker 1>a consumer lag on them

00:26:04.760 --> 00:26:07.400
<v Speaker 1>and saying what what events potentially

00:26:07.915 --> 00:26:10.315
<v Speaker 1>got stuck in the processing

00:26:10.955 --> 00:26:11.674
<v Speaker 1>and

00:26:12.075 --> 00:26:12.875
<v Speaker 1>also

00:26:12.875 --> 00:26:16.315
<v Speaker 1>be able to skip or replay events. So

00:26:16.315 --> 00:26:17.995
<v Speaker 1>you can see that it's a bit more

00:26:17.995 --> 00:26:18.635
<v Speaker 1>like

00:26:18.875 --> 00:26:22.555
<v Speaker 1>infrastructure y and production y on that level.

00:26:23.549 --> 00:26:25.470
<v Speaker 1>And the top level on top of that

00:26:25.470 --> 00:26:26.190
<v Speaker 1>is,

00:26:26.669 --> 00:26:29.549
<v Speaker 1>like, having the frameworks in place

00:26:30.350 --> 00:26:32.989
<v Speaker 1>to, like, write a microservice

00:26:33.070 --> 00:26:33.870
<v Speaker 1>skeleton

00:26:33.870 --> 00:26:35.789
<v Speaker 1>in a few minutes and focus on the

00:26:35.789 --> 00:26:36.350
<v Speaker 1>business logic.

00:26:37.024 --> 00:26:39.424
<v Speaker 0>Okay. Great overview there. So I think we've

00:26:39.424 --> 00:26:41.184
<v Speaker 0>covered a lot of, like, the the back

00:26:41.184 --> 00:26:43.744
<v Speaker 0>end platform engineering, providing tooling.

00:26:43.745 --> 00:26:45.985
<v Speaker 0>We've got the application developers over here. They

00:26:45.985 --> 00:26:48.065
<v Speaker 0>only really need to focus on their business

00:26:48.065 --> 00:26:48.385
<v Speaker 0>logic.

00:26:49.630 --> 00:26:50.910
<v Speaker 0>You know, especially

00:26:51.230 --> 00:26:53.310
<v Speaker 0>and I wanna kinda look back into event

00:26:53.310 --> 00:26:55.950
<v Speaker 0>driven architectures. Right? So we got all these

00:26:55.950 --> 00:26:57.630
<v Speaker 0>application developers. And I don't I don't know

00:26:57.630 --> 00:26:59.550
<v Speaker 0>how many application developers you've got. Right? But

00:26:59.550 --> 00:27:00.750
<v Speaker 0>I'm gonna take a guess. You've got two

00:27:00.750 --> 00:27:01.870
<v Speaker 0>and a half thousand services.

00:27:02.404 --> 00:27:05.044
<v Speaker 0>Let's assume any team is responsible for, say,

00:27:05.044 --> 00:27:05.684
<v Speaker 0>10.

00:27:05.845 --> 00:27:08.804
<v Speaker 0>That's 250 teams. Let's assume five persons

00:27:08.885 --> 00:27:12.484
<v Speaker 0>per team. We're potentially talking about 1,250 developers.

00:27:12.565 --> 00:27:15.044
<v Speaker 0>Is that anywhere close? I think

00:27:15.365 --> 00:27:16.005
<v Speaker 1>it's

00:27:16.210 --> 00:27:19.010
<v Speaker 1>it's it's in the ballpark. Yeah. Okay. Cool.

00:27:19.570 --> 00:27:21.090
<v Speaker 0>So, you know, that that's a lot of

00:27:21.090 --> 00:27:23.010
<v Speaker 0>people who hopefully focus on on our domain

00:27:23.010 --> 00:27:25.010
<v Speaker 0>logic. But, you know, based on the conversation

00:27:25.010 --> 00:27:26.770
<v Speaker 0>we've had so far, I'm curious.

00:27:27.170 --> 00:27:29.650
<v Speaker 0>We've event driven systems which are notoriously hard.

00:27:29.650 --> 00:27:30.130
<v Speaker 0>Right?

00:27:30.690 --> 00:27:33.255
<v Speaker 0>They're they've got a service. It's a Madden

00:27:33.255 --> 00:27:35.815
<v Speaker 0>event, and they decide, oh, I'm gonna change

00:27:35.815 --> 00:27:37.654
<v Speaker 0>the structure of this event. And they're sitting

00:27:37.654 --> 00:27:40.375
<v Speaker 0>there going, is this an upcast? I created

00:27:40.375 --> 00:27:42.294
<v Speaker 0>a v two. Is this a new event?

00:27:42.375 --> 00:27:44.590
<v Speaker 0>Do they get support from, like, the back

00:27:44.590 --> 00:27:46.590
<v Speaker 0>end teams, the platform teams, the people with

00:27:46.590 --> 00:27:47.389
<v Speaker 0>experience?

00:27:47.470 --> 00:27:49.470
<v Speaker 0>Is there like, how do they are they

00:27:49.470 --> 00:27:50.909
<v Speaker 0>expected to know all of this, or do

00:27:50.909 --> 00:27:52.350
<v Speaker 0>you guide them on this? Do you support

00:27:52.350 --> 00:27:54.429
<v Speaker 0>them for that? So I think one of

00:27:54.429 --> 00:27:56.510
<v Speaker 1>the subject here is scheme evolution and and

00:27:56.510 --> 00:27:57.309
<v Speaker 1>versioning. Right?

00:27:58.174 --> 00:27:59.215
<v Speaker 1>So definitely,

00:27:59.375 --> 00:28:02.414
<v Speaker 1>we have, like, design guidelines and and

00:28:02.975 --> 00:28:03.855
<v Speaker 1>platformization

00:28:03.855 --> 00:28:07.215
<v Speaker 1>guidelines on how to make sure that when

00:28:07.215 --> 00:28:08.975
<v Speaker 1>you design your microservice,

00:28:09.775 --> 00:28:12.575
<v Speaker 1>you write a forward looking API, but also

00:28:12.575 --> 00:28:15.409
<v Speaker 1>one that can evolve over time. And

00:28:15.890 --> 00:28:18.290
<v Speaker 1>also, you know, because of the power of

00:28:18.290 --> 00:28:22.050
<v Speaker 1>protobuf, you can os easily add linters that

00:28:22.050 --> 00:28:25.170
<v Speaker 1>make sure that you you don't easily mess

00:28:25.170 --> 00:28:26.050
<v Speaker 1>that up so

00:28:26.845 --> 00:28:29.725
<v Speaker 1>that you and because of auto generated calls,

00:28:29.725 --> 00:28:32.125
<v Speaker 1>it's built in with the slash v one

00:28:32.125 --> 00:28:33.804
<v Speaker 1>for the first thing. So it will be

00:28:33.804 --> 00:28:35.565
<v Speaker 1>easy to do a v two

00:28:35.725 --> 00:28:38.924
<v Speaker 1>and if needed. So we don't really have,

00:28:38.924 --> 00:28:40.369
<v Speaker 1>like, automatic

00:28:40.450 --> 00:28:41.249
<v Speaker 1>linting

00:28:41.890 --> 00:28:45.489
<v Speaker 1>for for the backward forward compatibility

00:28:45.809 --> 00:28:47.889
<v Speaker 1>of each of the

00:28:48.210 --> 00:28:51.809
<v Speaker 1>domain entities that we send over the events.

00:28:52.529 --> 00:28:53.490
<v Speaker 1>But with Portabuff,

00:28:54.274 --> 00:28:56.914
<v Speaker 1>you you pretty much know that it will

00:28:56.914 --> 00:28:59.315
<v Speaker 1>be ill advised to just go and

00:29:00.195 --> 00:29:01.234
<v Speaker 1>and delete

00:29:02.115 --> 00:29:04.034
<v Speaker 1>a field. It's better to, like, market a

00:29:04.034 --> 00:29:06.754
<v Speaker 1>deprecated and add another field.

00:29:07.075 --> 00:29:08.195
<v Speaker 1>And so there are definitely

00:29:08.910 --> 00:29:12.110
<v Speaker 1>guidelines on how how to to do these

00:29:12.110 --> 00:29:14.429
<v Speaker 1>minor changes to your schema.

00:29:14.990 --> 00:29:15.550
<v Speaker 1>And

00:29:16.030 --> 00:29:18.270
<v Speaker 1>I think I don't remember. There are some

00:29:18.270 --> 00:29:21.309
<v Speaker 1>basic rules that enforce some stuff.

00:29:21.710 --> 00:29:22.350
<v Speaker 1>So

00:29:22.750 --> 00:29:23.070
<v Speaker 1>but

00:29:23.565 --> 00:29:26.125
<v Speaker 1>I can recollect them right now. So some

00:29:26.125 --> 00:29:27.485
<v Speaker 1>of this is responsibility

00:29:27.485 --> 00:29:28.684
<v Speaker 1>of the developer.

00:29:29.245 --> 00:29:30.365
<v Speaker 1>But because

00:29:30.605 --> 00:29:33.005
<v Speaker 1>like, part of the onboarding process, Wix, is

00:29:33.005 --> 00:29:34.924
<v Speaker 1>is how do you write a product which

00:29:34.924 --> 00:29:37.649
<v Speaker 1>is API first. Right? You it used to

00:29:37.649 --> 00:29:39.570
<v Speaker 1>be different. It used to be like, okay.

00:29:39.570 --> 00:29:41.409
<v Speaker 1>So we have some

00:29:41.570 --> 00:29:44.130
<v Speaker 1>UI and some back end service behind it.

00:29:44.130 --> 00:29:44.690
<v Speaker 1>And

00:29:45.250 --> 00:29:46.770
<v Speaker 1>so the AI is

00:29:46.770 --> 00:29:48.610
<v Speaker 1>going to ask all kinds of things, so

00:29:48.610 --> 00:29:50.769
<v Speaker 1>we need to build an API for it.

00:29:51.010 --> 00:29:51.570
<v Speaker 1>But because

00:29:52.435 --> 00:29:55.395
<v Speaker 1>we we've evolved Wix into a platform that

00:29:55.395 --> 00:29:57.395
<v Speaker 1>also has develop developers on top of it

00:29:57.555 --> 00:29:59.395
<v Speaker 1>and because it's a bigger company now, so

00:29:59.395 --> 00:30:01.554
<v Speaker 1>you need developers to communicate,

00:30:01.715 --> 00:30:04.755
<v Speaker 1>you don't want, like, Slack or Microsoft Teams

00:30:05.475 --> 00:30:06.355
<v Speaker 1>to be

00:30:07.690 --> 00:30:10.970
<v Speaker 1>a barrier to understand how to consume something

00:30:10.970 --> 00:30:13.450
<v Speaker 1>from some events from another service. Right? So

00:30:13.450 --> 00:30:16.250
<v Speaker 1>we want everything to be well documented,

00:30:16.650 --> 00:30:18.090
<v Speaker 1>easily discoverable,

00:30:18.090 --> 00:30:19.290
<v Speaker 1>and easily

00:30:19.505 --> 00:30:22.865
<v Speaker 1>evolved. Right? So so I can safely stay

00:30:22.865 --> 00:30:25.905
<v Speaker 1>on the older version for a while, especially

00:30:25.905 --> 00:30:27.745
<v Speaker 1>if I'm an external developer. Right?

00:30:28.225 --> 00:30:30.865
<v Speaker 1>And and then safely migrate on my own

00:30:30.865 --> 00:30:32.945
<v Speaker 1>time to to the new version.

00:30:33.760 --> 00:30:35.520
<v Speaker 1>And it will be the responsibility of the

00:30:35.520 --> 00:30:38.160
<v Speaker 1>service owner to make sure that both version

00:30:38.400 --> 00:30:40.480
<v Speaker 1>versions are are supported.

00:30:40.880 --> 00:30:43.360
<v Speaker 0>Okay. And are you leveraging like, just because

00:30:43.360 --> 00:30:45.679
<v Speaker 0>you mentioned kinda discoverability there. Right? Are you

00:30:45.679 --> 00:30:48.559
<v Speaker 0>leveraging anything, like, Backstage, like an IDP that

00:30:48.645 --> 00:30:51.045
<v Speaker 0>aggregates and collects all of these service definitions

00:30:51.045 --> 00:30:53.445
<v Speaker 0>and the event definitions and the protobufs and

00:30:53.445 --> 00:30:55.525
<v Speaker 0>gives someone a place to go and search

00:30:55.525 --> 00:30:56.005
<v Speaker 0>them?

00:30:56.725 --> 00:30:57.765
<v Speaker 1>Sure. So,

00:30:58.245 --> 00:30:58.885
<v Speaker 1>actually,

00:30:59.125 --> 00:30:59.924
<v Speaker 1>because

00:31:00.405 --> 00:31:01.044
<v Speaker 1>of,

00:31:01.525 --> 00:31:03.765
<v Speaker 1>like, the unique nature of Wix's

00:31:03.765 --> 00:31:04.565
<v Speaker 1>platform,

00:31:04.645 --> 00:31:05.900
<v Speaker 1>a lot of work has been done to

00:31:05.900 --> 00:31:08.379
<v Speaker 1>expose things to external developers,

00:31:08.540 --> 00:31:10.780
<v Speaker 1>and we built it by ourselves. So there

00:31:10.780 --> 00:31:13.100
<v Speaker 1>was no point in, like, not doing the

00:31:13.100 --> 00:31:14.779
<v Speaker 1>same for internal developers.

00:31:14.860 --> 00:31:17.580
<v Speaker 1>So there are products out there. Right?

00:31:17.900 --> 00:31:18.620
<v Speaker 1>For instance,

00:31:19.265 --> 00:31:22.065
<v Speaker 1>especially for events, have the Confluent

00:31:22.784 --> 00:31:23.984
<v Speaker 1>schema registry.

00:31:24.225 --> 00:31:26.625
<v Speaker 1>And there's also API Courier, I think, or

00:31:26.625 --> 00:31:28.945
<v Speaker 1>something like that from Red Hat, like open

00:31:28.945 --> 00:31:29.585
<v Speaker 1>source.

00:31:30.385 --> 00:31:31.505
<v Speaker 1>And

00:31:31.270 --> 00:31:33.670
<v Speaker 1>those are great tools for for managing and

00:31:33.670 --> 00:31:34.549
<v Speaker 1>discovering

00:31:35.430 --> 00:31:36.710
<v Speaker 1>event schemas.

00:31:37.750 --> 00:31:40.630
<v Speaker 1>For specifically for Wix, we built our own

00:31:40.630 --> 00:31:41.509
<v Speaker 1>custom

00:31:41.670 --> 00:31:42.549
<v Speaker 1>services.

00:31:43.110 --> 00:31:43.430
<v Speaker 1>So

00:31:44.155 --> 00:31:46.875
<v Speaker 1>each time a new service is within the

00:31:46.955 --> 00:31:48.154
<v Speaker 1>its protobuf

00:31:48.235 --> 00:31:50.154
<v Speaker 1>has the event definitions,

00:31:50.635 --> 00:31:52.875
<v Speaker 1>they are transferred automatically

00:31:53.275 --> 00:31:54.394
<v Speaker 1>to the

00:31:54.555 --> 00:31:55.914
<v Speaker 1>main repository

00:31:55.995 --> 00:31:59.710
<v Speaker 1>that keeps all all of the the definitions.

00:31:59.950 --> 00:32:00.509
<v Speaker 1>And

00:32:00.910 --> 00:32:03.710
<v Speaker 1>you can also listen if if you're, like,

00:32:03.710 --> 00:32:06.350
<v Speaker 1>a CICD service or

00:32:06.590 --> 00:32:09.789
<v Speaker 1>some other build related service that cares when

00:32:09.789 --> 00:32:11.950
<v Speaker 1>new events are created so that you can

00:32:11.950 --> 00:32:14.245
<v Speaker 1>do stuff with them. You can listen to

00:32:14.245 --> 00:32:14.804
<v Speaker 1>that

00:32:15.045 --> 00:32:17.285
<v Speaker 1>and create all kinds of cool stuff on

00:32:17.285 --> 00:32:18.085
<v Speaker 1>top of that.

00:32:18.405 --> 00:32:19.605
<v Speaker 1>And, also, I think

00:32:20.165 --> 00:32:22.325
<v Speaker 1>for RPC communication,

00:32:23.205 --> 00:32:25.285
<v Speaker 1>with the service mesh, it's also important to

00:32:25.285 --> 00:32:26.725
<v Speaker 1>know that

00:32:27.330 --> 00:32:30.369
<v Speaker 1>a new service has been created or updated,

00:32:30.929 --> 00:32:33.330
<v Speaker 1>and so events are emitted on that as

00:32:33.330 --> 00:32:35.409
<v Speaker 1>well to allow the

00:32:36.049 --> 00:32:37.010
<v Speaker 1>communication

00:32:37.010 --> 00:32:39.009
<v Speaker 1>to to be simple there as well.

00:32:39.890 --> 00:32:40.210
<v Speaker 1>And

00:32:41.055 --> 00:32:43.295
<v Speaker 1>and so because of everything is based on

00:32:43.295 --> 00:32:45.055
<v Speaker 1>protobuf, you get the schema.

00:32:45.295 --> 00:32:46.095
<v Speaker 1>You get

00:32:46.735 --> 00:32:48.975
<v Speaker 1>well documented stuff. And

00:32:50.255 --> 00:32:53.375
<v Speaker 1>once you translate it, hopefully, to a strongly

00:32:53.375 --> 00:32:54.175
<v Speaker 1>typed language

00:32:54.529 --> 00:32:57.010
<v Speaker 1>like Scala or TypeScript, you also get the

00:32:57.010 --> 00:32:57.889
<v Speaker 1>type safety

00:32:58.289 --> 00:33:00.450
<v Speaker 1>when you consume it

00:33:00.850 --> 00:33:03.649
<v Speaker 1>and or or call the RPC endpoint as

00:33:03.649 --> 00:33:04.849
<v Speaker 1>well. Awesome.

00:33:04.929 --> 00:33:07.250
<v Speaker 0>Let's kinda jump back to something you said

00:33:07.250 --> 00:33:09.044
<v Speaker 0>earlier as well. So I I I love

00:33:09.044 --> 00:33:10.804
<v Speaker 0>that answer. Right? You're you're saying that you're

00:33:10.804 --> 00:33:13.605
<v Speaker 0>a developer company. You've got public facing APIs.

00:33:13.605 --> 00:33:15.684
<v Speaker 0>There's a bit of dog fitting. The discoverability

00:33:15.684 --> 00:33:17.125
<v Speaker 0>is the same as the people that use

00:33:17.125 --> 00:33:19.205
<v Speaker 0>the platform, which is awesome. That's kind of

00:33:19.205 --> 00:33:20.325
<v Speaker 0>what I took away from that, so I

00:33:20.325 --> 00:33:21.924
<v Speaker 0>hope that's correct. But

00:33:22.360 --> 00:33:25.320
<v Speaker 0>he also said earlier that, you know, sometimes

00:33:25.320 --> 00:33:28.039
<v Speaker 0>you have to approach an application team because

00:33:28.039 --> 00:33:29.480
<v Speaker 0>they may not have noticed that the round

00:33:29.480 --> 00:33:31.799
<v Speaker 0>trip time on an API request is, like,

00:33:32.039 --> 00:33:34.440
<v Speaker 0>it's growing exponentially. It's getting out of control.

00:33:34.440 --> 00:33:36.919
<v Speaker 0>Whatever that regression is, it could be anything.

00:33:36.919 --> 00:33:37.080
<v Speaker 0>Right?

00:33:37.905 --> 00:33:40.145
<v Speaker 0>I'm assuming they maybe don't

00:33:40.145 --> 00:33:41.905
<v Speaker 0>know a lot of the times that they

00:33:41.905 --> 00:33:43.025
<v Speaker 0>have dashboards,

00:33:43.025 --> 00:33:45.825
<v Speaker 0>metrics, traces, logging. I am assuming these are

00:33:45.825 --> 00:33:48.545
<v Speaker 0>potentially provided by, like, the templates you mentioned,

00:33:48.945 --> 00:33:50.785
<v Speaker 0>which are provided by the platform team. So

00:33:50.785 --> 00:33:52.385
<v Speaker 0>they're just taking this cookie cutter

00:33:52.740 --> 00:33:55.059
<v Speaker 0>boilerplate and injecting our domain logic,

00:33:55.380 --> 00:33:56.740
<v Speaker 0>maybe not aware of all the stuff that's

00:33:56.740 --> 00:33:58.260
<v Speaker 0>going on in the background for them. It

00:33:58.260 --> 00:33:59.460
<v Speaker 0>got me kind of thinking.

00:34:00.340 --> 00:34:03.139
<v Speaker 0>Like, is Wix a a polyglot organization?

00:34:03.220 --> 00:34:04.995
<v Speaker 0>If I was new at Wix, I've got

00:34:04.995 --> 00:34:06.515
<v Speaker 0>a service that I wanna write, and there's

00:34:06.515 --> 00:34:08.995
<v Speaker 0>no template for, like, Rust or Alexa or

00:34:08.995 --> 00:34:10.995
<v Speaker 0>PonyLang. And I'm like, hey. I really wanna

00:34:10.995 --> 00:34:12.035
<v Speaker 0>do this in Pony.

00:34:12.515 --> 00:34:14.435
<v Speaker 0>Are you gonna just tell me no, or

00:34:14.435 --> 00:34:16.355
<v Speaker 0>is there a process there to bring on,

00:34:16.355 --> 00:34:17.635
<v Speaker 0>like, new technologies?

00:34:18.275 --> 00:34:19.235
<v Speaker 1>Sure. So

00:34:20.369 --> 00:34:22.609
<v Speaker 1>every technological stack

00:34:22.690 --> 00:34:23.489
<v Speaker 1>has

00:34:24.289 --> 00:34:26.609
<v Speaker 1>a new one, has incurred incurred,

00:34:26.609 --> 00:34:27.730
<v Speaker 1>like, cost

00:34:27.809 --> 00:34:29.170
<v Speaker 1>in an organization,

00:34:29.329 --> 00:34:29.889
<v Speaker 1>especially

00:34:31.170 --> 00:34:33.809
<v Speaker 1>for like, you have one developer that's super

00:34:33.809 --> 00:34:35.329
<v Speaker 1>excited about Elixir,

00:34:36.185 --> 00:34:37.065
<v Speaker 1>and then

00:34:37.625 --> 00:34:40.025
<v Speaker 1>writes a service in Elixir. But what's what

00:34:40.025 --> 00:34:40.985
<v Speaker 1>happens when

00:34:41.225 --> 00:34:43.785
<v Speaker 1>they decide to leave the company? Like, who

00:34:43.945 --> 00:34:45.785
<v Speaker 1>is going to maintain this Elixir

00:34:46.264 --> 00:34:47.145
<v Speaker 1>service?

00:34:47.945 --> 00:34:50.264
<v Speaker 1>So so we start off on the JVM,

00:34:51.110 --> 00:34:54.870
<v Speaker 1>mostly Scala. And then it was apparent that

00:34:54.870 --> 00:34:56.630
<v Speaker 1>because there are a lot of front end

00:34:56.630 --> 00:34:58.150
<v Speaker 1>developers writing JavaScript

00:34:58.150 --> 00:34:58.870
<v Speaker 1>and

00:34:59.270 --> 00:35:02.550
<v Speaker 1>you want them to easily write middleware services

00:35:02.550 --> 00:35:03.830
<v Speaker 1>and rendering services,

00:35:04.944 --> 00:35:07.025
<v Speaker 1>So relatively quickly,

00:35:07.505 --> 00:35:08.865
<v Speaker 1>like, Node. Js

00:35:10.065 --> 00:35:10.785
<v Speaker 1>became

00:35:10.865 --> 00:35:13.105
<v Speaker 1>an additional first class citizen,

00:35:14.545 --> 00:35:15.665
<v Speaker 1>like with Scala.

00:35:16.065 --> 00:35:18.430
<v Speaker 1>And in recent years,

00:35:18.830 --> 00:35:21.470
<v Speaker 1>they are starting to gain, like, a bigger,

00:35:21.470 --> 00:35:22.430
<v Speaker 1>bigger effort

00:35:22.670 --> 00:35:25.630
<v Speaker 1>to expand, like, the the offering. So why

00:35:25.630 --> 00:35:29.150
<v Speaker 1>not write in Java and Go and Python

00:35:29.150 --> 00:35:31.545
<v Speaker 1>as well? Now in order to achieve that,

00:35:31.545 --> 00:35:33.785
<v Speaker 1>like I mentioned, a very complex, let's call

00:35:33.785 --> 00:35:35.625
<v Speaker 1>it, platform framework

00:35:35.705 --> 00:35:37.065
<v Speaker 1>and a lot of stuff.

00:35:37.465 --> 00:35:39.785
<v Speaker 1>So it's not and that's on the JVM,

00:35:39.785 --> 00:35:42.585
<v Speaker 1>and it's not really so simple to to

00:35:42.585 --> 00:35:43.465
<v Speaker 1>achieve that.

00:35:44.425 --> 00:35:48.810
<v Speaker 1>So one way that we're experimenting now is

00:35:49.050 --> 00:35:52.329
<v Speaker 1>with kind of a sidecar pattern with with

00:35:52.329 --> 00:35:53.450
<v Speaker 1>two containers

00:35:53.450 --> 00:35:55.210
<v Speaker 1>where we have the

00:35:55.849 --> 00:35:57.210
<v Speaker 1>host container,

00:35:57.530 --> 00:35:59.130
<v Speaker 1>which is running the JVM,

00:35:59.130 --> 00:36:02.085
<v Speaker 1>and all of the cool microservice

00:36:02.085 --> 00:36:03.125
<v Speaker 1>infrastructure

00:36:03.365 --> 00:36:05.205
<v Speaker 1>that I talked about. Then you have the

00:36:05.205 --> 00:36:07.605
<v Speaker 1>guest container that can be a Node. Js

00:36:07.605 --> 00:36:08.325
<v Speaker 1>container

00:36:08.485 --> 00:36:11.765
<v Speaker 1>or a Python or or a Go container.

00:36:12.165 --> 00:36:12.725
<v Speaker 1>And

00:36:12.990 --> 00:36:15.550
<v Speaker 1>they communicate via gRPC.

00:36:15.550 --> 00:36:16.190
<v Speaker 1>And

00:36:16.350 --> 00:36:16.990
<v Speaker 1>just

00:36:17.310 --> 00:36:19.870
<v Speaker 1>so you you specify the proto because proto

00:36:19.870 --> 00:36:21.310
<v Speaker 1>can be in any language,

00:36:21.790 --> 00:36:24.350
<v Speaker 1>and you can implement your

00:36:25.070 --> 00:36:26.110
<v Speaker 1>event handler

00:36:26.415 --> 00:36:29.775
<v Speaker 1>or your RPC endpoint in in the languages

00:36:29.775 --> 00:36:31.775
<v Speaker 1>I mentioned, and it will

00:36:32.815 --> 00:36:35.615
<v Speaker 1>get invoked from the host that will actually

00:36:35.615 --> 00:36:37.615
<v Speaker 1>do the heavy lifting. Another

00:36:37.615 --> 00:36:39.295
<v Speaker 1>approach we're contemplating

00:36:40.119 --> 00:36:42.760
<v Speaker 1>perhaps is use utilizing GraalVM

00:36:43.080 --> 00:36:43.880
<v Speaker 1>also

00:36:44.520 --> 00:36:45.880
<v Speaker 1>to get that working.

00:36:46.119 --> 00:36:47.960
<v Speaker 1>But, like, in terms of

00:36:48.920 --> 00:36:51.880
<v Speaker 1>cost benefit analysis, I think, well, definitely,

00:36:52.505 --> 00:36:54.665
<v Speaker 1>I don't see, like, the engineering of Wix

00:36:54.665 --> 00:36:57.385
<v Speaker 1>going to, hey. Just write in any

00:36:57.945 --> 00:37:01.305
<v Speaker 1>code, like, language you ever saw. And because

00:37:01.305 --> 00:37:02.105
<v Speaker 1>it's cool

00:37:02.425 --> 00:37:03.785
<v Speaker 1>because at the end of the day,

00:37:04.425 --> 00:37:06.185
<v Speaker 1>there's this

00:37:06.470 --> 00:37:08.150
<v Speaker 1>production system that

00:37:08.470 --> 00:37:10.710
<v Speaker 1>needs to be well maintained and and get

00:37:10.789 --> 00:37:11.670
<v Speaker 1>good

00:37:11.829 --> 00:37:13.510
<v Speaker 1>performance and and keep

00:37:13.990 --> 00:37:15.750
<v Speaker 1>our customers happy at the end of the

00:37:15.750 --> 00:37:17.910
<v Speaker 1>day. Awesome. Thank you. Okay. So based on

00:37:17.910 --> 00:37:20.065
<v Speaker 0>everything you've just said, you know, there's a

00:37:20.065 --> 00:37:22.545
<v Speaker 0>lot of JVM happening, and you mentioned Graal

00:37:22.545 --> 00:37:24.865
<v Speaker 0>as well. Right? But they're definitely heavy JVM

00:37:24.865 --> 00:37:27.345
<v Speaker 0>users. Your event driven architecture

00:37:27.505 --> 00:37:28.545
<v Speaker 0>on AWS,

00:37:28.545 --> 00:37:31.185
<v Speaker 0>you've got Kafka NMX, which is notoriously difficult

00:37:31.185 --> 00:37:33.425
<v Speaker 0>to kind of scale it with resource intensive.

00:37:34.119 --> 00:37:37.080
<v Speaker 0>And the costs must be rather astronomical, I

00:37:37.080 --> 00:37:38.760
<v Speaker 0>would imagine, for a company of x scale.

00:37:38.760 --> 00:37:40.680
<v Speaker 0>You know, you mentioned that wonderful number at

00:37:40.680 --> 00:37:42.839
<v Speaker 0>the start of the episode, 70,000,000,000.

00:37:42.839 --> 00:37:44.760
<v Speaker 0>I think it was events per day.

00:37:45.000 --> 00:37:46.520
<v Speaker 0>So maybe you can dive into that a

00:37:46.520 --> 00:37:48.200
<v Speaker 0>little bit more detail and tell us what's

00:37:48.200 --> 00:37:50.675
<v Speaker 0>interesting from your perspective. Sure. I would love

00:37:50.675 --> 00:37:51.395
<v Speaker 1>to do that.

00:37:51.715 --> 00:37:52.275
<v Speaker 1>So,

00:37:53.315 --> 00:37:53.875
<v Speaker 1>basically,

00:37:54.675 --> 00:37:56.035
<v Speaker 1>over the

00:37:56.035 --> 00:37:59.875
<v Speaker 1>the last couple of years, we we're trying

00:38:00.195 --> 00:38:01.795
<v Speaker 1>hard to see

00:38:02.035 --> 00:38:02.915
<v Speaker 1>how we can

00:38:03.420 --> 00:38:06.060
<v Speaker 1>keep the costs down. So I mentioned that

00:38:06.220 --> 00:38:09.099
<v Speaker 1>microservices are new microservices spin up every week,

00:38:09.099 --> 00:38:09.580
<v Speaker 1>but

00:38:10.299 --> 00:38:12.700
<v Speaker 1>we need to see how the infrastructure costs

00:38:12.700 --> 00:38:13.580
<v Speaker 1>don't

00:38:13.819 --> 00:38:14.619
<v Speaker 1>increase

00:38:14.859 --> 00:38:16.780
<v Speaker 1>linearly with that. Right?

00:38:17.099 --> 00:38:20.105
<v Speaker 1>So we have our infrastructure

00:38:20.105 --> 00:38:22.745
<v Speaker 1>on top of Kafka, for instance. And

00:38:23.465 --> 00:38:26.425
<v Speaker 1>we saw that we need to allow to

00:38:26.425 --> 00:38:28.265
<v Speaker 1>have a lot more Kafka brokers

00:38:28.665 --> 00:38:29.145
<v Speaker 1>because

00:38:29.720 --> 00:38:31.640
<v Speaker 1>we have so many microservices,

00:38:31.640 --> 00:38:34.119
<v Speaker 1>and all of them need to connect to

00:38:34.119 --> 00:38:35.560
<v Speaker 1>the Kafka brokers and

00:38:35.960 --> 00:38:36.920
<v Speaker 1>understand,

00:38:37.240 --> 00:38:39.400
<v Speaker 1>like, is there something for me to consume

00:38:39.400 --> 00:38:41.640
<v Speaker 1>now? Right? Now all not all parts of

00:38:41.640 --> 00:38:44.245
<v Speaker 1>all services are gonna get stuff they need

00:38:44.245 --> 00:38:45.525
<v Speaker 1>to to consume.

00:38:46.005 --> 00:38:46.645
<v Speaker 1>And

00:38:47.045 --> 00:38:48.725
<v Speaker 1>but they're going to run,

00:38:48.965 --> 00:38:50.325
<v Speaker 1>our infrastructure

00:38:50.565 --> 00:38:52.565
<v Speaker 1>and waste CPU memory,

00:38:53.045 --> 00:38:54.325
<v Speaker 1>in order to do that.

00:38:54.725 --> 00:38:55.285
<v Speaker 1>So

00:38:55.790 --> 00:38:59.150
<v Speaker 1>in order to mitigate this, we actually

00:38:59.710 --> 00:39:00.670
<v Speaker 1>created

00:39:01.230 --> 00:39:02.510
<v Speaker 1>three services

00:39:03.070 --> 00:39:05.070
<v Speaker 1>for each of the basic Kafka

00:39:05.390 --> 00:39:07.950
<v Speaker 1>features. So we have a Kafka producer, a

00:39:07.950 --> 00:39:09.710
<v Speaker 1>Kafka consumer, and a Kafka administrator.

00:39:10.335 --> 00:39:12.015
<v Speaker 1>So for each of them, we created a

00:39:12.015 --> 00:39:12.734
<v Speaker 1>proxy that

00:39:13.455 --> 00:39:15.055
<v Speaker 1>in this way, we can really, really limit

00:39:15.055 --> 00:39:17.135
<v Speaker 1>the amount of connections that we need for

00:39:17.135 --> 00:39:18.255
<v Speaker 1>for the brokers,

00:39:18.575 --> 00:39:20.895
<v Speaker 1>and then we can really limit the amount

00:39:20.895 --> 00:39:22.815
<v Speaker 1>of brokers that we actually need to run.

00:39:23.109 --> 00:39:26.070
<v Speaker 1>So while the admin proxy and producer proxy

00:39:26.070 --> 00:39:28.310
<v Speaker 1>is really straight kind of straightforward to do

00:39:28.310 --> 00:39:29.670
<v Speaker 1>because they are stateless,

00:39:29.990 --> 00:39:31.430
<v Speaker 1>for the consumer proxy,

00:39:31.589 --> 00:39:34.070
<v Speaker 1>it's a real it's been a real adventure

00:39:34.070 --> 00:39:34.630
<v Speaker 1>where

00:39:35.285 --> 00:39:37.045
<v Speaker 1>you need to

00:39:37.365 --> 00:39:37.925
<v Speaker 1>keep,

00:39:38.165 --> 00:39:40.725
<v Speaker 1>like, the state of of which consumers

00:39:40.725 --> 00:39:42.405
<v Speaker 1>are now, connected

00:39:42.885 --> 00:39:44.805
<v Speaker 1>and to shard

00:39:44.965 --> 00:39:47.125
<v Speaker 1>the the and load balance,

00:39:47.285 --> 00:39:48.165
<v Speaker 1>between

00:39:48.245 --> 00:39:49.845
<v Speaker 1>the pods and have

00:39:50.619 --> 00:39:52.220
<v Speaker 1>a lot of work

00:39:52.220 --> 00:39:55.420
<v Speaker 1>on the stateful nature of consuming from Kafka,

00:39:55.420 --> 00:39:57.180
<v Speaker 1>which is really exciting and challenging.

00:39:57.740 --> 00:40:00.060
<v Speaker 1>And we're also trying to

00:40:00.300 --> 00:40:01.100
<v Speaker 1>reduce

00:40:01.420 --> 00:40:02.460
<v Speaker 1>Kafka based

00:40:02.700 --> 00:40:03.500
<v Speaker 1>traffic

00:40:03.744 --> 00:40:06.945
<v Speaker 1>because that's also quite expensive for us.

00:40:07.345 --> 00:40:09.425
<v Speaker 1>So we're considering now that we have our

00:40:09.425 --> 00:40:10.305
<v Speaker 1>our service

00:40:10.545 --> 00:40:12.785
<v Speaker 1>our proxy service, we're considering

00:40:13.025 --> 00:40:13.745
<v Speaker 1>doing

00:40:13.984 --> 00:40:15.345
<v Speaker 1>all kinds of

00:40:15.665 --> 00:40:18.065
<v Speaker 1>events caching and stuff like that in order

00:40:18.065 --> 00:40:18.385
<v Speaker 1>to

00:40:19.480 --> 00:40:21.080
<v Speaker 1>if you have a lot of consumers for

00:40:21.080 --> 00:40:22.040
<v Speaker 1>the same event,

00:40:22.360 --> 00:40:23.160
<v Speaker 1>we can,

00:40:23.400 --> 00:40:25.400
<v Speaker 1>reduce the the

00:40:25.720 --> 00:40:28.840
<v Speaker 1>the pressure on Kafka and and just sometimes,

00:40:29.000 --> 00:40:32.120
<v Speaker 1>get caches from ourselves, so from our proxy

00:40:32.120 --> 00:40:34.360
<v Speaker 1>service. So a lot of really challenging technical

00:40:34.360 --> 00:40:36.440
<v Speaker 1>stuff

00:40:35.615 --> 00:40:37.055
<v Speaker 1>we're we're doing now

00:40:37.295 --> 00:40:40.335
<v Speaker 1>in order to reduce our our Kafka bills,

00:40:40.335 --> 00:40:42.735
<v Speaker 1>basically. Wow. Okay. So

00:40:43.375 --> 00:40:45.694
<v Speaker 0>so the problem statement there, right, is you

00:40:45.694 --> 00:40:48.415
<v Speaker 0>have so many consumers and purchasers of Kafka

00:40:48.415 --> 00:40:50.750
<v Speaker 0>connecting to all of the Kafka brokers that

00:40:50.750 --> 00:40:52.589
<v Speaker 0>you're having to scale out horizontally to the

00:40:52.589 --> 00:40:54.910
<v Speaker 0>brokers to handle them and have connections.

00:40:55.390 --> 00:40:57.150
<v Speaker 0>So in order to avoid that,

00:40:58.190 --> 00:40:59.470
<v Speaker 0>you know, that that's because that's a cost

00:40:59.470 --> 00:41:01.470
<v Speaker 0>thing. Right? We we running the JVM on

00:41:01.470 --> 00:41:03.710
<v Speaker 0>a container on top of a Kubernetes cluster

00:41:03.710 --> 00:41:05.150
<v Speaker 0>is quite a chunky thing to do, and

00:41:05.150 --> 00:41:07.845
<v Speaker 0>then you got that across so many services.

00:41:07.845 --> 00:41:09.845
<v Speaker 0>Yeah. Okay. I understand the problem statement really

00:41:09.845 --> 00:41:10.325
<v Speaker 0>well.

00:41:11.045 --> 00:41:13.605
<v Speaker 0>You've went on the solutions approach of you

00:41:13.605 --> 00:41:16.085
<v Speaker 0>said you wrote three proxies. Right? But it

00:41:16.085 --> 00:41:18.325
<v Speaker 0>sounds like they're slightly more sophisticated than just

00:41:18.325 --> 00:41:21.045
<v Speaker 0>a proxy. Like, they're actually their own little

00:41:21.369 --> 00:41:22.330
<v Speaker 0>orchestrator

00:41:22.330 --> 00:41:23.450
<v Speaker 0>within the cluster.

00:41:23.690 --> 00:41:26.330
<v Speaker 0>So all the consumers and producers sorry. I'm

00:41:26.330 --> 00:41:28.490
<v Speaker 0>cutting you off here. But all the producers,

00:41:28.490 --> 00:41:30.570
<v Speaker 0>the consumers only ever speak to your proxy,

00:41:30.570 --> 00:41:32.970
<v Speaker 0>and then it handles some, I guess, like,

00:41:32.970 --> 00:41:36.475
<v Speaker 0>delegation of all the Kafka workloads. Yes. So

00:41:37.835 --> 00:41:41.515
<v Speaker 1>when you have a lot less producers connecting

00:41:41.515 --> 00:41:44.235
<v Speaker 1>to actually, Kafka produces connecting to the Kafka

00:41:44.235 --> 00:41:44.875
<v Speaker 1>workers,

00:41:45.595 --> 00:41:49.580
<v Speaker 1>that that you don't need the 2,500

00:41:49.660 --> 00:41:50.540
<v Speaker 1>services

00:41:50.700 --> 00:41:51.580
<v Speaker 1>times

00:41:51.580 --> 00:41:54.220
<v Speaker 1>the number of pods they have to connect.

00:41:54.220 --> 00:41:56.140
<v Speaker 1>You only you need a much smaller set

00:41:56.140 --> 00:41:58.140
<v Speaker 1>of producers to actually do the work for

00:41:58.140 --> 00:41:59.500
<v Speaker 1>them, and then you really limit it now

00:41:59.500 --> 00:42:02.715
<v Speaker 1>to connection. That's how you save producer connection.

00:42:03.115 --> 00:42:04.875
<v Speaker 1>And over on the consumer side,

00:42:05.195 --> 00:42:07.755
<v Speaker 1>so, yeah, you you you consume for them,

00:42:07.755 --> 00:42:10.075
<v Speaker 1>and then you delegate to them via

00:42:10.234 --> 00:42:11.675
<v Speaker 1>RPC, which is much

00:42:12.170 --> 00:42:14.730
<v Speaker 1>much less cost intensive

00:42:15.450 --> 00:42:17.370
<v Speaker 1>in our data centers.

00:42:17.850 --> 00:42:20.570
<v Speaker 1>I hope that clarified it. It does. Yeah.

00:42:20.570 --> 00:42:21.690
<v Speaker 0>It's really interesting.

00:42:22.570 --> 00:42:23.210
<v Speaker 0>Just

00:42:23.450 --> 00:42:26.330
<v Speaker 0>fun problems and fun solutions that you get

00:42:26.330 --> 00:42:26.890
<v Speaker 0>to work on.

00:42:27.465 --> 00:42:29.465
<v Speaker 0>And, really, I think it's just exciting that

00:42:29.465 --> 00:42:30.905
<v Speaker 0>you're able to kind of share that with

00:42:30.905 --> 00:42:32.185
<v Speaker 0>the audience. I think they're gonna take a

00:42:32.185 --> 00:42:34.105
<v Speaker 0>lot away from that. So thank you for

00:42:34.105 --> 00:42:36.505
<v Speaker 0>sharing that with us. Yeah. I enjoy coming

00:42:36.505 --> 00:42:37.545
<v Speaker 1>to work every day.

00:42:38.265 --> 00:42:39.065
<v Speaker 0>Awesome.

00:42:39.145 --> 00:42:41.880
<v Speaker 0>We have gone over time, so thank you

00:42:41.880 --> 00:42:44.040
<v Speaker 0>for being patient and answering all these questions.

00:42:45.400 --> 00:42:47.560
<v Speaker 0>I'll just I mean, I could easily talk

00:42:47.560 --> 00:42:48.839
<v Speaker 0>to you for another hour. I I think

00:42:48.839 --> 00:42:50.040
<v Speaker 0>we'll maybe do a part two in a

00:42:50.040 --> 00:42:51.560
<v Speaker 0>little while if you're up for it. But

00:42:51.560 --> 00:42:53.640
<v Speaker 0>let's finish with something a bit more fun

00:42:53.960 --> 00:42:55.880
<v Speaker 0>just to, you know, get us on the

00:42:55.880 --> 00:42:57.535
<v Speaker 0>way. But you mentioned a lot of tools

00:42:57.535 --> 00:43:00.175
<v Speaker 0>in today's episode. Right? From Kubernetes to Kafka

00:43:00.175 --> 00:43:01.535
<v Speaker 0>to MySQL

00:43:01.855 --> 00:43:03.935
<v Speaker 0>to the Scala to Graal.

00:43:04.255 --> 00:43:07.135
<v Speaker 0>Like, if there were only three tools that

00:43:07.135 --> 00:43:08.975
<v Speaker 0>you had that you could pick and everything

00:43:08.975 --> 00:43:10.735
<v Speaker 0>else would just be removed from you. Like,

00:43:10.735 --> 00:43:12.430
<v Speaker 0>what are the three most important tools to

00:43:12.430 --> 00:43:14.190
<v Speaker 0>you and Wix engineering that you just could

00:43:14.190 --> 00:43:16.430
<v Speaker 0>not live away? For myself or for Wix

00:43:16.430 --> 00:43:17.070
<v Speaker 1>engineering?

00:43:17.230 --> 00:43:19.150
<v Speaker 0>Let's do both. Let's start with you.

00:43:19.550 --> 00:43:20.590
<v Speaker 1>Okay.

00:43:20.750 --> 00:43:23.710
<v Speaker 1>For for myself, I I actually really, enjoy

00:43:23.710 --> 00:43:26.030
<v Speaker 1>working with the functional library on top of

00:43:26.030 --> 00:43:28.305
<v Speaker 1>Scala called Zio, which I

00:43:28.305 --> 00:43:30.545
<v Speaker 1>really enjoy working in every day because it's

00:43:30.545 --> 00:43:31.105
<v Speaker 1>really

00:43:31.425 --> 00:43:32.545
<v Speaker 1>tuned for

00:43:32.705 --> 00:43:34.385
<v Speaker 1>high concurrency

00:43:34.465 --> 00:43:35.185
<v Speaker 1>and

00:43:35.345 --> 00:43:37.345
<v Speaker 1>asynchronous work and

00:43:38.305 --> 00:43:40.625
<v Speaker 1>get all the benefits of functional programming.

00:43:40.625 --> 00:43:43.140
<v Speaker 1>So I really enjoy working it every day.

00:43:43.140 --> 00:43:44.500
<v Speaker 1>Don't take it away from me.

00:43:45.060 --> 00:43:45.860
<v Speaker 1>And

00:43:46.740 --> 00:43:49.460
<v Speaker 1>I think Kafka has proven to be very

00:43:49.460 --> 00:43:50.820
<v Speaker 1>powerful, versatile.

00:43:51.619 --> 00:43:54.260
<v Speaker 1>And and so we solve so much with

00:43:54.260 --> 00:43:56.695
<v Speaker 1>it in in Wix. So I definitely

00:43:56.935 --> 00:43:59.175
<v Speaker 1>don't see, like, Wix without it.

00:44:00.615 --> 00:44:02.775
<v Speaker 1>That's like the two biggest ones for me.

00:44:03.494 --> 00:44:04.855
<v Speaker 0>Alright. Awesome.

00:44:05.015 --> 00:44:06.535
<v Speaker 0>K. And do you wanna add any more

00:44:06.535 --> 00:44:08.775
<v Speaker 0>tools, or do wanna leave it as ZIO

00:44:08.775 --> 00:44:09.655
<v Speaker 0>and

00:44:09.655 --> 00:44:10.375
<v Speaker 0>Kafka. Right?

00:44:11.060 --> 00:44:12.180
<v Speaker 1>I I think

00:44:12.660 --> 00:44:15.620
<v Speaker 1>those are the the ones like, if if

00:44:15.620 --> 00:44:18.180
<v Speaker 1>you're on the on the JVM or or,

00:44:18.500 --> 00:44:19.140
<v Speaker 1>like,

00:44:19.460 --> 00:44:21.140
<v Speaker 1>not satisfied with the

00:44:21.540 --> 00:44:22.180
<v Speaker 1>the

00:44:22.740 --> 00:44:24.260
<v Speaker 1>concurrency and asynchronous

00:44:24.615 --> 00:44:27.095
<v Speaker 1>features from your language. I I definitely

00:44:27.255 --> 00:44:28.455
<v Speaker 1>recommend to check out

00:44:28.935 --> 00:44:31.015
<v Speaker 1>z o z I o library

00:44:31.735 --> 00:44:33.975
<v Speaker 1>on top of Scala. Awesome. Thank you.

00:44:34.375 --> 00:44:35.895
<v Speaker 0>Alright. Well, thank you so much for spending

00:44:35.895 --> 00:44:37.655
<v Speaker 0>time with me today answering all these questions,

00:44:37.655 --> 00:44:39.175
<v Speaker 0>sharing all of your knowledge and all the

00:44:39.175 --> 00:44:41.050
<v Speaker 0>interest and problems that you have in Wix

00:44:41.050 --> 00:44:41.770
<v Speaker 0>engineering,

00:44:41.930 --> 00:44:44.410
<v Speaker 0>and most importantly, how you're navigating and solving

00:44:44.410 --> 00:44:44.890
<v Speaker 0>them.

00:44:45.290 --> 00:44:46.570
<v Speaker 0>I'd like to give you just a moment.

00:44:46.570 --> 00:44:49.690
<v Speaker 0>Feel free to share and shamelessly plug, Wix,

00:44:49.690 --> 00:44:52.410
<v Speaker 0>yourself, your blog, your Twitter, your, if you

00:44:52.410 --> 00:44:54.250
<v Speaker 0>have a daily farm, like, anything you wish,

00:44:54.250 --> 00:44:56.025
<v Speaker 0>please feel free to share. Well, first of

00:44:56.025 --> 00:44:58.505
<v Speaker 1>all, it was really a pleasure, being on

00:44:58.505 --> 00:44:59.305
<v Speaker 1>the show, and,

00:45:00.025 --> 00:45:02.265
<v Speaker 1>you're a great host. And I really enjoyed

00:45:02.265 --> 00:45:03.385
<v Speaker 1>your questions,

00:45:03.944 --> 00:45:06.505
<v Speaker 1>kept kept me, on my toes.

00:45:06.984 --> 00:45:08.984
<v Speaker 1>And a lot of things I talked about

00:45:09.360 --> 00:45:10.160
<v Speaker 1>today

00:45:10.240 --> 00:45:11.520
<v Speaker 1>are

00:45:12.080 --> 00:45:15.200
<v Speaker 1>on my website, so at natansill.com.

00:45:16.000 --> 00:45:18.080
<v Speaker 1>Block posts on on ranging from,

00:45:18.320 --> 00:45:20.080
<v Speaker 1>like, event driven architecture

00:45:20.400 --> 00:45:20.880
<v Speaker 1>and

00:45:21.595 --> 00:45:23.995
<v Speaker 1>more like Kafka specific. I talked about skill

00:45:23.995 --> 00:45:24.795
<v Speaker 1>management.

00:45:25.275 --> 00:45:25.835
<v Speaker 1>And

00:45:26.715 --> 00:45:29.115
<v Speaker 1>but I also have other software engineering in

00:45:29.115 --> 00:45:31.275
<v Speaker 1>broader terms related stuff there.

00:45:31.915 --> 00:45:32.555
<v Speaker 1>And

00:45:32.715 --> 00:45:34.960
<v Speaker 1>you can and also, I do a lot

00:45:34.960 --> 00:45:36.880
<v Speaker 1>of talks and a lot of conferences, so

00:45:36.880 --> 00:45:38.400
<v Speaker 1>you could check out all that in my

00:45:38.560 --> 00:45:41.040
<v Speaker 1>on at my website as well. And, yeah,

00:45:41.040 --> 00:45:43.920
<v Speaker 1>you can find me on Twitter and LinkedIn

00:45:44.320 --> 00:45:47.040
<v Speaker 1>for sure where I I I get updates

00:45:47.040 --> 00:45:49.994
<v Speaker 1>on everything that we do at Wix Engineering,

00:45:50.075 --> 00:45:51.035
<v Speaker 1>which is interesting.

00:45:51.275 --> 00:45:53.355
<v Speaker 1>So that's it. Alright.

00:45:53.674 --> 00:45:55.755
<v Speaker 0>Well, thank you again. I will ensure that

00:45:55.755 --> 00:45:57.035
<v Speaker 0>all of those links are in the show

00:45:57.035 --> 00:45:59.434
<v Speaker 0>notes for people to check out. So to

00:45:59.434 --> 00:46:01.275
<v Speaker 0>everyone listening, thank you very much, and we'll

00:46:01.275 --> 00:46:02.795
<v Speaker 0>see you all next time. Have a great

00:46:02.795 --> 00:46:02.954
<v Speaker 0>day.
