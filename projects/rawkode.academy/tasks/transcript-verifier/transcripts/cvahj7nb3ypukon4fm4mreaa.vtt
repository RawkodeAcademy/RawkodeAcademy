WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 3c35a581-152d-46dc-9b02-a912acff3f8f
Created: 2025-04-29T14:36:05.444Z
Duration: 853.0728
Channels: 1

00:00:00.080 --> 00:00:03.360
<v Speaker 0>Hi there. Welcome back to the Rawkode Academy.

00:00:03.360 --> 00:00:05.200
<v Speaker 0>I'm your host, David Flanagan,

00:00:05.359 --> 00:00:06.640
<v Speaker 0>also known as Rawkode.

00:00:07.279 --> 00:00:10.559
<v Speaker 0>Today, we continue the complete guide to Kubescape.

00:00:10.880 --> 00:00:12.480
<v Speaker 0>I wanna say thank you to the team

00:00:12.480 --> 00:00:14.719
<v Speaker 0>at ARMOR for sponsoring my time to put

00:00:14.719 --> 00:00:15.759
<v Speaker 0>this course together.

00:00:16.375 --> 00:00:18.775
<v Speaker 0>Kubescape is a phenomenal tool that helps us

00:00:18.775 --> 00:00:22.055
<v Speaker 0>improve our security posture and our Kubernetes cluster.

00:00:22.535 --> 00:00:24.295
<v Speaker 0>Do I think it's hyperbole when I say

00:00:24.295 --> 00:00:26.855
<v Speaker 0>every cluster should have Kubescape installed?

00:00:27.575 --> 00:00:27.975
<v Speaker 0>No.

00:00:29.350 --> 00:00:31.830
<v Speaker 0>So let's take a look at how we

00:00:31.830 --> 00:00:32.630
<v Speaker 0>continuously

00:00:32.630 --> 00:00:33.510
<v Speaker 0>monitor

00:00:33.829 --> 00:00:35.430
<v Speaker 0>our security posture.

00:00:37.110 --> 00:00:38.550
<v Speaker 0>When you run Kubescape,

00:00:38.550 --> 00:00:40.790
<v Speaker 0>you get the ARMOR cloud dashboard.

00:00:40.790 --> 00:00:42.710
<v Speaker 0>You can go and see

00:00:43.385 --> 00:00:45.385
<v Speaker 0>the report and results

00:00:45.704 --> 00:00:47.065
<v Speaker 0>of all your scans.

00:00:48.265 --> 00:00:52.265
<v Speaker 0>But we're developers and operators and we like

00:00:53.144 --> 00:00:55.545
<v Speaker 0>Grafana and dashboards and metrics.

00:00:56.370 --> 00:00:59.250
<v Speaker 0>So how do we get our Kubescape control

00:00:59.250 --> 00:01:01.489
<v Speaker 0>failures into a format that we can work

00:01:01.489 --> 00:01:02.930
<v Speaker 0>with with our automation?

00:01:04.050 --> 00:01:06.210
<v Speaker 0>Well, as we've seen in a previous video,

00:01:07.409 --> 00:01:10.050
<v Speaker 0>the Kubescape CLI accepts a format parameter.

00:01:10.935 --> 00:01:12.774
<v Speaker 0>We took a look at a

00:01:12.854 --> 00:01:13.735
<v Speaker 0>JSON.

00:01:14.295 --> 00:01:15.895
<v Speaker 0>There's also HTML,

00:01:16.454 --> 00:01:17.575
<v Speaker 0>pretty print,

00:01:17.895 --> 00:01:19.015
<v Speaker 0>and JUnit.

00:01:20.774 --> 00:01:23.335
<v Speaker 0>The last option is Prometheus metrics.

00:01:25.170 --> 00:01:27.090
<v Speaker 0>So first, we're just gonna take a very

00:01:27.090 --> 00:01:28.050
<v Speaker 0>quick look

00:01:28.210 --> 00:01:30.290
<v Speaker 0>at the Prometheus metrics output.

00:01:31.010 --> 00:01:32.530
<v Speaker 0>Then I'll show you how we do it

00:01:32.530 --> 00:01:33.410
<v Speaker 0>in production.

00:01:34.130 --> 00:01:36.770
<v Speaker 0>We run an operator and our cluster

00:01:37.455 --> 00:01:38.895
<v Speaker 0>that uses Prometheus

00:01:38.895 --> 00:01:40.335
<v Speaker 0>service monitors,

00:01:41.695 --> 00:01:44.015
<v Speaker 0>speaks to Kubescape, gets a result of our

00:01:44.015 --> 00:01:44.735
<v Speaker 0>scans,

00:01:46.255 --> 00:01:47.855
<v Speaker 0>writes them to Prometheus,

00:01:48.975 --> 00:01:50.895
<v Speaker 0>and to finish it off, there's even a

00:01:50.895 --> 00:01:51.935
<v Speaker 0>Grafana dashboard

00:01:52.370 --> 00:01:54.770
<v Speaker 0>to take a look and understand what's going

00:01:54.770 --> 00:01:55.170
<v Speaker 0>on.

00:01:57.010 --> 00:01:58.610
<v Speaker 0>So this will be a quick video, but

00:01:58.610 --> 00:02:00.690
<v Speaker 0>there's a lot to love. So let's take

00:02:00.690 --> 00:02:02.690
<v Speaker 0>a look. So the first thing that we

00:02:02.690 --> 00:02:03.570
<v Speaker 0>want to do

00:02:04.450 --> 00:02:07.730
<v Speaker 0>is run a Kubescape scan

00:02:07.055 --> 00:02:07.855
<v Speaker 0>dot.

00:02:08.574 --> 00:02:10.815
<v Speaker 0>This will scan our local directory,

00:02:11.055 --> 00:02:12.735
<v Speaker 0>find Kubernetes manifests,

00:02:12.735 --> 00:02:14.255
<v Speaker 0>and give us a report.

00:02:15.215 --> 00:02:17.855
<v Speaker 0>As you can see, we've got resource limits

00:02:17.855 --> 00:02:19.135
<v Speaker 0>that need specified

00:02:19.135 --> 00:02:19.775
<v Speaker 0>and oh,

00:02:20.720 --> 00:02:22.480
<v Speaker 0>some host page IPC

00:02:22.480 --> 00:02:24.400
<v Speaker 0>and network privileges.

00:02:25.120 --> 00:02:25.840
<v Speaker 0>Well,

00:02:26.720 --> 00:02:28.959
<v Speaker 0>that doesn't sound too great, does it? And

00:02:28.959 --> 00:02:30.959
<v Speaker 0>of course not. We take a look at

00:02:30.959 --> 00:02:31.760
<v Speaker 0>the YAML.

00:02:32.319 --> 00:02:34.720
<v Speaker 0>I have enabled these three things. Why?

00:02:35.465 --> 00:02:37.224
<v Speaker 0>Just to give us something to visualize on

00:02:37.224 --> 00:02:40.425
<v Speaker 0>a dashboard as we improve our security posture.

00:02:41.864 --> 00:02:44.185
<v Speaker 0>So let's see the Prometheus

00:02:44.185 --> 00:02:45.705
<v Speaker 0>metrics output

00:02:45.944 --> 00:02:46.985
<v Speaker 0>from the CLI.

00:02:48.280 --> 00:02:50.440
<v Speaker 0>We can run the scan again. This time

00:02:50.440 --> 00:02:52.200
<v Speaker 0>we set format equals

00:02:52.280 --> 00:02:53.240
<v Speaker 0>Prometheus.

00:02:58.840 --> 00:02:59.880
<v Speaker 0>And as you can see,

00:03:01.485 --> 00:03:03.645
<v Speaker 0>we get a whole bunch of Prometheus style

00:03:03.645 --> 00:03:05.165
<v Speaker 0>metrics written

00:03:05.165 --> 00:03:06.765
<v Speaker 0>to the terminal.

00:03:10.205 --> 00:03:13.245
<v Speaker 0>You could script them into Prometheus

00:03:13.245 --> 00:03:14.125
<v Speaker 0>somehow,

00:03:14.285 --> 00:03:15.805
<v Speaker 0>but there is a better way.

00:03:16.600 --> 00:03:18.440
<v Speaker 0>So the first thing I'm going to do

00:03:18.520 --> 00:03:21.240
<v Speaker 0>is run this just target called helm.

00:03:21.720 --> 00:03:23.880
<v Speaker 0>This is gonna set up all the repositories

00:03:23.880 --> 00:03:26.120
<v Speaker 0>that we need for today's session.

00:03:26.760 --> 00:03:28.680
<v Speaker 0>Next, let's list the targets.

00:03:29.915 --> 00:03:32.155
<v Speaker 0>We have one for helm that we just

00:03:32.155 --> 00:03:34.635
<v Speaker 0>run. We have installed Grafana,

00:03:35.035 --> 00:03:36.555
<v Speaker 0>installed Kubescape,

00:03:36.955 --> 00:03:38.795
<v Speaker 0>installed Kubescape Prometheus,

00:03:39.115 --> 00:03:40.715
<v Speaker 0>and installed Prometheus.

00:03:41.995 --> 00:03:43.115
<v Speaker 0>So let's do

00:03:43.755 --> 00:03:44.715
<v Speaker 0>Prometheus first,

00:03:46.630 --> 00:03:48.070
<v Speaker 0>All by Grafana.

00:03:49.110 --> 00:03:50.390
<v Speaker 0>All by Kubescape.

00:03:51.190 --> 00:03:52.950
<v Speaker 0>All by Kubescape.

00:03:54.950 --> 00:03:56.150
<v Speaker 0>Prometheus.

00:03:59.190 --> 00:04:01.190
<v Speaker 0>And then by the power

00:04:00.915 --> 00:04:02.275
<v Speaker 0>of video magic,

00:04:02.675 --> 00:04:04.755
<v Speaker 0>we will have a complete setup.

00:04:05.155 --> 00:04:07.555
<v Speaker 0>Now before I click my fingers, the just

00:04:07.555 --> 00:04:10.595
<v Speaker 0>fail is here and available via the repository

00:04:10.595 --> 00:04:12.835
<v Speaker 0>on the Rawkode Academy. The link is in

00:04:12.835 --> 00:04:13.715
<v Speaker 0>the description.

00:04:13.795 --> 00:04:15.395
<v Speaker 0>Go check it out if you wanna see

00:04:15.395 --> 00:04:15.955
<v Speaker 0>what's happening.

00:04:17.769 --> 00:04:21.130
<v Speaker 0>Alright. Let's run kubectl get pods all.

00:04:21.529 --> 00:04:22.810
<v Speaker 0>We have Grafana.

00:04:22.970 --> 00:04:24.410
<v Speaker 0>We've got Kubescape,

00:04:24.410 --> 00:04:26.010
<v Speaker 0>Kubescape Prometheus,

00:04:26.010 --> 00:04:27.210
<v Speaker 0>and Prometheus.

00:04:27.530 --> 00:04:29.944
<v Speaker 0>So what's happening right now is that the

00:04:29.944 --> 00:04:32.745
<v Speaker 0>Kubescape operator is running in our cluster.

00:04:33.065 --> 00:04:36.504
<v Speaker 0>It's continually scanning and and monitoring

00:04:36.504 --> 00:04:37.705
<v Speaker 0>our resources.

00:04:38.185 --> 00:04:39.305
<v Speaker 0>Let's run

00:04:39.544 --> 00:04:41.705
<v Speaker 0>kubescape control minus n

00:04:42.930 --> 00:04:43.810
<v Speaker 0>kubescape

00:04:43.810 --> 00:04:44.690
<v Speaker 0>Prometheus

00:04:44.690 --> 00:04:45.490
<v Speaker 0>get

00:04:47.090 --> 00:04:48.290
<v Speaker 0>service monitors.

00:04:49.090 --> 00:04:50.370
<v Speaker 0>And we can see that we have a

00:04:50.370 --> 00:04:51.490
<v Speaker 0>service monitor

00:04:52.690 --> 00:04:53.730
<v Speaker 0>and a namespace.

00:04:55.465 --> 00:04:57.785
<v Speaker 0>So, let's browse to Prometheus.

00:04:58.745 --> 00:05:02.585
<v Speaker 0>We can run kubectl minus n, Prometheus

00:05:02.905 --> 00:05:04.824
<v Speaker 0>port forward and we're gonna go to the

00:05:04.824 --> 00:05:05.625
<v Speaker 0>service,

00:05:06.585 --> 00:05:08.345
<v Speaker 0>kubescape Prometheus

00:05:08.345 --> 00:05:08.905
<v Speaker 0>stack.

00:05:11.870 --> 00:05:12.830
<v Speaker 0>Prometheus

00:05:12.990 --> 00:05:14.350
<v Speaker 0>on port nineteen ninety.

00:05:15.870 --> 00:05:17.710
<v Speaker 0>So we pop up on our browser

00:05:18.110 --> 00:05:20.350
<v Speaker 0>and we have the Prometheus UI.

00:05:21.230 --> 00:05:22.830
<v Speaker 0>We can zoom in on this and we

00:05:22.830 --> 00:05:25.230
<v Speaker 0>can start to type Kubescape as a prefix.

00:05:26.395 --> 00:05:29.035
<v Speaker 0>From here, we can select our cluster risk

00:05:29.035 --> 00:05:29.755
<v Speaker 0>store

00:05:30.955 --> 00:05:32.155
<v Speaker 0>and hit return.

00:05:32.955 --> 00:05:34.475
<v Speaker 0>And we'll see that we have

00:05:35.195 --> 00:05:36.795
<v Speaker 0>a score of 12.

00:05:37.835 --> 00:05:39.115
<v Speaker 0>So let's take a look

00:05:39.980 --> 00:05:42.620
<v Speaker 0>at one more metric. Kubescape

00:05:42.940 --> 00:05:43.980
<v Speaker 0>framework

00:05:44.620 --> 00:05:45.820
<v Speaker 0>can't failed.

00:05:47.660 --> 00:05:49.740
<v Speaker 0>Now we have a breakdown of the number

00:05:49.740 --> 00:05:51.580
<v Speaker 0>of failures per framework.

00:05:52.460 --> 00:05:53.820
<v Speaker 0>If I zoom in on this more,

00:05:55.065 --> 00:05:56.985
<v Speaker 0>you'll see all control 36,

00:05:56.985 --> 00:06:00.025
<v Speaker 0>ARMOR best 22, DevOps best nine.

00:06:00.585 --> 00:06:03.465
<v Speaker 0>Now this is a fantastic resource of information,

00:06:04.664 --> 00:06:07.145
<v Speaker 0>but it's not readily consumable

00:06:07.145 --> 00:06:09.670
<v Speaker 0>in this format. Right? This is why we

00:06:09.670 --> 00:06:13.110
<v Speaker 0>have Grafana to help us visualize our dashboards.

00:06:15.190 --> 00:06:17.830
<v Speaker 0>Again, as I said in an earlier video,

00:06:18.070 --> 00:06:21.030
<v Speaker 0>it's through visualization that we build understanding.

00:06:21.510 --> 00:06:24.150
<v Speaker 0>So let's go check a look at Grafana.

00:06:25.455 --> 00:06:27.215
<v Speaker 0>We can run kubectl

00:06:27.215 --> 00:06:28.815
<v Speaker 0>namespace Grafana

00:06:28.815 --> 00:06:30.175
<v Speaker 0>get secrets.

00:06:30.895 --> 00:06:34.495
<v Speaker 0>Why? Well, because Grafana helm chart generates

00:06:34.495 --> 00:06:36.655
<v Speaker 0>a random password and we'll need that to

00:06:36.655 --> 00:06:37.775
<v Speaker 0>log in to the instance.

00:06:39.030 --> 00:06:40.949
<v Speaker 0>We grab the Grafana secret,

00:06:41.190 --> 00:06:42.150
<v Speaker 0>a YAML,

00:06:42.550 --> 00:06:44.870
<v Speaker 0>and we run a base 64 decode

00:06:45.190 --> 00:06:46.550
<v Speaker 0>of this value

00:06:46.870 --> 00:06:47.510
<v Speaker 0>here.

00:06:48.789 --> 00:06:50.710
<v Speaker 0>And now we have our secure

00:06:50.870 --> 00:06:51.430
<v Speaker 0>password.

00:06:53.515 --> 00:06:56.955
<v Speaker 0>Now we can run kubescape control namespace Grafana

00:06:57.115 --> 00:06:58.235
<v Speaker 0>port forward

00:06:58.795 --> 00:07:00.795
<v Speaker 0>for service Grafana.

00:07:01.755 --> 00:07:04.395
<v Speaker 0>And we'll expose this on port 3,000,

00:07:04.395 --> 00:07:06.635
<v Speaker 0>although the service does listen on port 80.

00:07:09.290 --> 00:07:11.130
<v Speaker 0>Now if we go to 3,000,

00:07:11.530 --> 00:07:14.170
<v Speaker 0>username is admin and the password is the

00:07:14.170 --> 00:07:15.610
<v Speaker 0>one we got from the secret.

00:07:16.970 --> 00:07:19.050
<v Speaker 0>And now we have a Grafana dashboard.

00:07:20.250 --> 00:07:22.010
<v Speaker 0>So we need to go to settings and

00:07:22.010 --> 00:07:22.810
<v Speaker 0>data sources

00:07:23.505 --> 00:07:25.985
<v Speaker 0>where we can add our Prometheus source.

00:07:26.785 --> 00:07:29.745
<v Speaker 0>Now we're just used in regular Kubernetes service

00:07:29.745 --> 00:07:31.345
<v Speaker 0>discovery to hook this up.

00:07:31.985 --> 00:07:34.225
<v Speaker 0>That means that we use the service name,

00:07:34.305 --> 00:07:35.505
<v Speaker 0>which was kube

00:07:36.065 --> 00:07:36.865
<v Speaker 0>stack

00:07:37.425 --> 00:07:39.520
<v Speaker 0>Prometheus.

00:07:39.520 --> 00:07:40.720
<v Speaker 0>The namespace,

00:07:40.720 --> 00:07:45.040
<v Speaker 0>which is Prometheus.sec.cluster.local,

00:07:45.360 --> 00:07:47.360
<v Speaker 0>and the port is nineteen ninety.

00:07:48.800 --> 00:07:50.080
<v Speaker 0>We click save and test,

00:07:51.445 --> 00:07:53.365
<v Speaker 0>and it tells us as an error.

00:07:54.485 --> 00:07:55.685
<v Speaker 0>Your Prometheus,

00:07:55.685 --> 00:07:57.125
<v Speaker 0>stack Prometheus,

00:07:58.405 --> 00:07:59.605
<v Speaker 0>and that is working.

00:07:59.925 --> 00:08:00.725
<v Speaker 0>Alright.

00:08:00.965 --> 00:08:03.045
<v Speaker 0>Let's go to the explore tab

00:08:03.730 --> 00:08:04.850
<v Speaker 0>and take a look.

00:08:05.410 --> 00:08:07.410
<v Speaker 0>Use the Kubescape prefix,

00:08:09.730 --> 00:08:11.010
<v Speaker 0>and you can see that we have access

00:08:11.010 --> 00:08:12.370
<v Speaker 0>to the cluster account

00:08:13.010 --> 00:08:15.490
<v Speaker 0>based on resources and controls. We have a

00:08:15.490 --> 00:08:17.730
<v Speaker 0>cluster risk score, which we can run.

00:08:18.695 --> 00:08:20.775
<v Speaker 0>And we'll see as remain pretty static.

00:08:21.015 --> 00:08:22.615
<v Speaker 0>That makes sense.

00:08:23.335 --> 00:08:25.095
<v Speaker 0>Bring back our Kubescape prefix,

00:08:25.175 --> 00:08:27.415
<v Speaker 0>and then we have a control account resource

00:08:27.415 --> 00:08:30.375
<v Speaker 0>and a framework account resource, but not at

00:08:30.375 --> 00:08:32.934
<v Speaker 0>the cluster level. So probably broken down by

00:08:32.934 --> 00:08:33.735
<v Speaker 0>namespace,

00:08:34.080 --> 00:08:36.000
<v Speaker 0>and, of course, our risk score here.

00:08:37.440 --> 00:08:39.680
<v Speaker 0>Let's take a look at Kubescape

00:08:41.280 --> 00:08:42.240
<v Speaker 0>framework

00:08:42.480 --> 00:08:43.920
<v Speaker 0>count control

00:08:44.320 --> 00:08:44.960
<v Speaker 0>failed.

00:08:46.385 --> 00:08:48.464
<v Speaker 0>This should give us a breakdown of the

00:08:48.464 --> 00:08:49.745
<v Speaker 0>different controls

00:08:50.385 --> 00:08:51.825
<v Speaker 0>by a namespace

00:08:51.825 --> 00:08:53.025
<v Speaker 0>that have failed.

00:08:54.385 --> 00:08:56.385
<v Speaker 0>Assuming if we go to name,

00:08:56.625 --> 00:08:58.385
<v Speaker 0>we can filter by the framework.

00:08:59.590 --> 00:09:01.830
<v Speaker 0>So we can see ARMOR best

00:09:02.230 --> 00:09:03.030
<v Speaker 0>like so.

00:09:03.910 --> 00:09:05.110
<v Speaker 0>Let's try

00:09:05.670 --> 00:09:06.630
<v Speaker 0>one more.

00:09:06.950 --> 00:09:09.270
<v Speaker 0>This time, Kubescape

00:09:10.070 --> 00:09:11.350
<v Speaker 0>control

00:09:14.055 --> 00:09:15.575
<v Speaker 0>resource failed.

00:09:17.255 --> 00:09:19.895
<v Speaker 0>And now we can filter this by name,

00:09:20.535 --> 00:09:23.175
<v Speaker 0>and we're going to find the host PID

00:09:23.175 --> 00:09:23.975
<v Speaker 0>IPC

00:09:23.975 --> 00:09:24.935
<v Speaker 0>privilege.

00:09:26.455 --> 00:09:27.255
<v Speaker 0>Like so.

00:09:27.975 --> 00:09:29.709
<v Speaker 0>Now we can see that this is slowly

00:09:29.709 --> 00:09:32.430
<v Speaker 0>claimed as I've deployed some example resources to

00:09:32.430 --> 00:09:33.230
<v Speaker 0>the cluster.

00:09:33.790 --> 00:09:36.270
<v Speaker 0>So let's pop back to our YAML,

00:09:41.230 --> 00:09:42.269
<v Speaker 0>and we'll remove two.

00:09:48.295 --> 00:09:49.175
<v Speaker 0>Like so.

00:09:52.055 --> 00:09:54.135
<v Speaker 0>Let's look at the last five minutes

00:09:55.415 --> 00:09:56.455
<v Speaker 0>and run the query.

00:09:58.180 --> 00:10:00.260
<v Speaker 0>Alright. So after a little bit of time,

00:10:00.660 --> 00:10:01.540
<v Speaker 0>we see

00:10:03.700 --> 00:10:06.660
<v Speaker 0>that our resource failure dropped from three

00:10:07.220 --> 00:10:08.180
<v Speaker 0>to two.

00:10:08.740 --> 00:10:09.460
<v Speaker 0>Now

00:10:10.260 --> 00:10:13.140
<v Speaker 0>Grafana is a great tool. Prometheus is a

00:10:13.140 --> 00:10:15.515
<v Speaker 0>great tool. I've been able to query individual

00:10:15.515 --> 00:10:18.555
<v Speaker 0>metrics and view them as a graph is

00:10:18.555 --> 00:10:19.515
<v Speaker 0>also great.

00:10:20.955 --> 00:10:21.915
<v Speaker 0>Sometimes

00:10:22.154 --> 00:10:23.755
<v Speaker 0>you just need a dashboard.

00:10:24.555 --> 00:10:27.275
<v Speaker 0>We need to see multiple queries, multiple metrics,

00:10:27.275 --> 00:10:28.795
<v Speaker 0>and how they change together

00:10:28.875 --> 00:10:29.595
<v Speaker 0>over time.

00:10:30.660 --> 00:10:31.300
<v Speaker 0>So

00:10:32.180 --> 00:10:33.220
<v Speaker 0>let's run

00:10:33.780 --> 00:10:35.300
<v Speaker 0>the download dashboard,

00:10:35.540 --> 00:10:36.500
<v Speaker 0>just target.

00:10:36.980 --> 00:10:39.540
<v Speaker 0>From there, we can cut the dashboard and

00:10:39.540 --> 00:10:41.460
<v Speaker 0>copy it to our buffer. We can then

00:10:41.460 --> 00:10:42.820
<v Speaker 0>go to the Grafana homepage,

00:10:43.695 --> 00:10:45.855
<v Speaker 0>import dashboard where

00:10:46.255 --> 00:10:48.095
<v Speaker 0>we could paste in the JSON.

00:10:48.735 --> 00:10:51.775
<v Speaker 0>From here, we click load and we import.

00:10:53.375 --> 00:10:55.135
<v Speaker 0>Let's change the time to five minutes.

00:10:55.870 --> 00:10:57.310
<v Speaker 0>Now there is a bit of a small

00:10:57.310 --> 00:10:59.950
<v Speaker 0>bug with Grafana and that our dashboard, no

00:10:59.950 --> 00:11:02.270
<v Speaker 0>matter how many times we click refresh, won't

00:11:02.270 --> 00:11:03.390
<v Speaker 0>seem to load.

00:11:03.790 --> 00:11:05.470
<v Speaker 0>However, I found if you just go to

00:11:05.470 --> 00:11:06.190
<v Speaker 0>edit

00:11:07.630 --> 00:11:10.590
<v Speaker 0>and multiply the query ever so slightly and

00:11:10.590 --> 00:11:11.230
<v Speaker 0>click run,

00:11:12.745 --> 00:11:14.905
<v Speaker 0>it seems to jog it back into touch.

00:11:15.385 --> 00:11:17.225
<v Speaker 0>However, we do need to do this

00:11:18.505 --> 00:11:19.625
<v Speaker 0>for all the panels.

00:11:48.274 --> 00:11:49.074
<v Speaker 0>Like so.

00:11:49.954 --> 00:11:52.680
<v Speaker 0>So while we've only changed one resource, we've

00:11:52.680 --> 00:11:55.560
<v Speaker 0>not really affected our cluster risk score,

00:11:55.800 --> 00:11:57.560
<v Speaker 0>and that is kind of expected.

00:11:58.200 --> 00:12:01.000
<v Speaker 0>And you can monitor your controls over time.

00:12:01.480 --> 00:12:03.240
<v Speaker 0>As we can see from this, we have

00:12:03.240 --> 00:12:04.040
<v Speaker 0>a lot of controls,

00:12:04.455 --> 00:12:06.375
<v Speaker 0>and we can see there has been a

00:12:06.375 --> 00:12:07.015
<v Speaker 0>change,

00:12:07.415 --> 00:12:09.655
<v Speaker 0>but it's difficult to pinpoint which.

00:12:10.535 --> 00:12:12.935
<v Speaker 0>Now we know which control was affected, so

00:12:12.935 --> 00:12:15.095
<v Speaker 0>we can scroll down the alphabetical list

00:12:15.575 --> 00:12:16.935
<v Speaker 0>until we find

00:12:17.655 --> 00:12:18.215
<v Speaker 0>host.

00:12:20.750 --> 00:12:22.510
<v Speaker 0>Host. Host. Host.

00:12:22.910 --> 00:12:25.070
<v Speaker 0>Lots of controls. There we go. It click

00:12:25.070 --> 00:12:27.070
<v Speaker 0>host path to IPC privileged.

00:12:27.630 --> 00:12:29.550
<v Speaker 0>And now we can see that drop on

00:12:29.550 --> 00:12:32.029
<v Speaker 0>the resource over time. On the right, we

00:12:32.029 --> 00:12:34.675
<v Speaker 0>can see our framework risk score over time,

00:12:34.675 --> 00:12:36.435
<v Speaker 0>which again much like the cluster score is

00:12:36.435 --> 00:12:39.635
<v Speaker 0>unlikely unlikely to change by fixing one resource.

00:12:41.315 --> 00:12:42.995
<v Speaker 0>And then we have a good overview of

00:12:42.995 --> 00:12:44.195
<v Speaker 0>our two pie charts.

00:12:44.435 --> 00:12:46.595
<v Speaker 0>We can see the resource status and control

00:12:46.595 --> 00:12:49.130
<v Speaker 0>status, but this time not over time, more

00:12:49.130 --> 00:12:52.330
<v Speaker 0>as a an overall picture of our security

00:12:52.330 --> 00:12:53.130
<v Speaker 0>posture.

00:12:53.690 --> 00:12:56.650
<v Speaker 0>So we could see actually that 74%

00:12:56.650 --> 00:12:58.970
<v Speaker 0>of our resources are passing their controls.

00:12:59.370 --> 00:13:01.530
<v Speaker 0>So we actually don't have too

00:13:01.850 --> 00:13:03.435
<v Speaker 0>much to do.

00:13:04.394 --> 00:13:06.235
<v Speaker 0>However, when we go over to the control

00:13:06.235 --> 00:13:06.954
<v Speaker 0>side,

00:13:07.115 --> 00:13:09.035
<v Speaker 0>we can see and I'm not sure why

00:13:09.035 --> 00:13:09.834
<v Speaker 0>it's green,

00:13:10.154 --> 00:13:11.675
<v Speaker 0>the 43%

00:13:11.675 --> 00:13:13.595
<v Speaker 0>of our controls have a resource that are

00:13:13.595 --> 00:13:14.154
<v Speaker 0>in violation,

00:13:15.320 --> 00:13:17.400
<v Speaker 0>which is why we see so much activity

00:13:18.040 --> 00:13:19.800
<v Speaker 0>on the control risk score.

00:13:20.520 --> 00:13:22.440
<v Speaker 0>So now we have all the information that

00:13:22.440 --> 00:13:24.760
<v Speaker 0>we need to do two things.

00:13:25.240 --> 00:13:25.880
<v Speaker 0>One,

00:13:26.920 --> 00:13:29.800
<v Speaker 0>monitor and observe our security posture.

00:13:31.125 --> 00:13:32.885
<v Speaker 0>You might be in good shape now, but

00:13:32.885 --> 00:13:35.765
<v Speaker 0>as developers are deploying to your cluster, these

00:13:35.765 --> 00:13:37.125
<v Speaker 0>things change over time.

00:13:37.605 --> 00:13:39.285
<v Speaker 0>So it's great to have Kubescape in your

00:13:39.285 --> 00:13:42.325
<v Speaker 0>cluster with Prometheus and Grafana. You can build

00:13:42.325 --> 00:13:44.960
<v Speaker 0>alerting rules just like you would for all

00:13:44.960 --> 00:13:46.720
<v Speaker 0>the other parts of your infrastructure.

00:13:47.600 --> 00:13:49.360
<v Speaker 0>And number two, you have a way to

00:13:49.360 --> 00:13:51.600
<v Speaker 0>track and celebrate progress.

00:13:52.160 --> 00:13:54.560
<v Speaker 0>Make sure you're identifying

00:13:54.560 --> 00:13:56.640
<v Speaker 0>the controls that are important to your organization.

00:13:57.425 --> 00:13:59.904
<v Speaker 0>Even build a custom framework. Go check out

00:13:59.904 --> 00:14:02.144
<v Speaker 0>that video next. And that's it. I hope

00:14:02.144 --> 00:14:04.545
<v Speaker 0>you've enjoyed this tutorial on Kubescape with Prometheus

00:14:04.545 --> 00:14:06.305
<v Speaker 0>and Grafana. I'll see you for the next

00:14:06.305 --> 00:14:07.745
<v Speaker 0>video soon. Have a great day.
