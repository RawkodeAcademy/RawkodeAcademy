WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: d8c86e25-ab16-41d5-89ff-09d9d99d1b1b
Created: 2025-04-29T22:29:18.089Z
Duration: 9800.007
Channels: 1

00:01:52.415 --> 00:01:53.295
<v Speaker 0>Hello,

00:01:53.375 --> 00:01:54.255
<v Speaker 0>and welcome.

00:01:54.895 --> 00:01:55.615
<v Speaker 0>Hello.

00:01:56.335 --> 00:01:58.895
<v Speaker 0>How's it going, mate? Good. How are you?

00:01:59.295 --> 00:02:02.015
<v Speaker 0>I'm very well. Thank you. I'm feeling good.

00:02:02.015 --> 00:02:02.975
<v Speaker 0>I'm excited.

00:02:03.615 --> 00:02:05.135
<v Speaker 1>Yeah. It was fun last time. It

00:02:06.175 --> 00:02:07.695
<v Speaker 0>was. We

00:02:08.979 --> 00:02:10.580
<v Speaker 0>I feel we got quite far,

00:02:12.340 --> 00:02:13.540
<v Speaker 0>but the requests

00:02:14.020 --> 00:02:17.060
<v Speaker 0>were unanimous. People want to see how we

00:02:17.060 --> 00:02:18.580
<v Speaker 0>do this with Laravel

00:02:18.900 --> 00:02:20.660
<v Speaker 0>and all the bets that we didn't cover.

00:02:20.660 --> 00:02:22.740
<v Speaker 0>The bets we left to the reader's imagination,

00:02:22.740 --> 00:02:23.300
<v Speaker 0>if you will.

00:02:24.625 --> 00:02:26.545
<v Speaker 1>So are we assuming people saw the previous

00:02:26.545 --> 00:02:27.185
<v Speaker 1>session?

00:02:29.905 --> 00:02:30.545
<v Speaker 0>Yes.

00:02:31.265 --> 00:02:33.425
<v Speaker 0>Yes. We are assuming that people have seen

00:02:33.425 --> 00:02:35.345
<v Speaker 0>the previous session. Although, to be honest, we

00:02:35.345 --> 00:02:35.585
<v Speaker 0>are

00:02:36.465 --> 00:02:37.985
<v Speaker 0>it doesn't matter if it doesn't.

00:02:38.730 --> 00:02:40.810
<v Speaker 0>We will do our best to keep things

00:02:41.450 --> 00:02:42.970
<v Speaker 0>explained as we go along, and we are

00:02:42.970 --> 00:02:45.370
<v Speaker 0>starting with a Laravel project that has no

00:02:45.370 --> 00:02:46.410
<v Speaker 0>containerization

00:02:46.410 --> 00:02:48.330
<v Speaker 0>at all. So we are gonna be doing

00:02:48.330 --> 00:02:50.250
<v Speaker 0>a little bit of a repeat, but hopefully

00:02:50.250 --> 00:02:52.650
<v Speaker 0>much faster pace than last time with some

00:02:52.650 --> 00:02:53.370
<v Speaker 0>of the core steps.

00:02:55.405 --> 00:02:56.125
<v Speaker 0>And

00:02:57.485 --> 00:02:58.765
<v Speaker 0>how's your Laravel?

00:02:59.724 --> 00:03:00.845
<v Speaker 1>Non existent.

00:03:01.644 --> 00:03:02.445
<v Speaker 1>Wonderful.

00:03:03.565 --> 00:03:04.845
<v Speaker 1>Wonderful. Like,

00:03:05.724 --> 00:03:07.485
<v Speaker 1>few versions ago, I did the demo.

00:03:09.450 --> 00:03:12.330
<v Speaker 1>But Right. It's all sensible stuff, isn't it?

00:03:12.330 --> 00:03:13.530
<v Speaker 1>And I think a lot of the things

00:03:13.530 --> 00:03:14.650
<v Speaker 1>we're gonna talk about,

00:03:16.330 --> 00:03:18.730
<v Speaker 1>the general way you containerize things,

00:03:19.530 --> 00:03:20.490
<v Speaker 1>how you build assets,

00:03:21.755 --> 00:03:23.195
<v Speaker 1>how you do various things are gonna be

00:03:23.195 --> 00:03:25.115
<v Speaker 1>applicable across all projects, aren't they?

00:03:25.515 --> 00:03:27.755
<v Speaker 0>Yeah. Hopefully. Well well, that's

00:03:28.155 --> 00:03:30.155
<v Speaker 0>yeah. They will. They definitely will. I don't

00:03:30.155 --> 00:03:33.115
<v Speaker 1>think there's gonna be much super Laravel specific

00:03:33.755 --> 00:03:35.275
<v Speaker 1>stuff to how we how we can turn

00:03:35.275 --> 00:03:35.595
<v Speaker 1>Razer.

00:03:37.150 --> 00:03:39.230
<v Speaker 0>Yeah. Well, I mean, let's set the context

00:03:39.230 --> 00:03:40.830
<v Speaker 0>then for the people that are watching.

00:03:41.710 --> 00:03:43.550
<v Speaker 0>Okay. First and foremost, I'm gonna look away

00:03:43.550 --> 00:03:45.390
<v Speaker 0>from you so I can click over here.

00:03:46.350 --> 00:03:48.030
<v Speaker 0>We we are taking comments. If you wanna

00:03:48.030 --> 00:03:50.110
<v Speaker 0>ask any questions, if there's anything that we

00:03:50.110 --> 00:03:52.565
<v Speaker 0>don't explain very well, drop it into the

00:03:52.565 --> 00:03:54.485
<v Speaker 0>comment section on YouTube or Twitter. We'll keep

00:03:54.485 --> 00:03:55.925
<v Speaker 0>an eye on it. Also,

00:03:56.245 --> 00:03:57.205
<v Speaker 0>if you

00:03:57.605 --> 00:03:59.445
<v Speaker 0>need a nice, easy way to find these

00:03:59.445 --> 00:04:00.885
<v Speaker 0>streams in the future, you can go to

00:04:00.885 --> 00:04:02.405
<v Speaker 0>lot Rawkode.live.

00:04:03.140 --> 00:04:05.380
<v Speaker 0>And for anyone that wants to keep a

00:04:05.380 --> 00:04:07.860
<v Speaker 0>conversation going afterwards, there's a slash chat, which

00:04:07.860 --> 00:04:09.540
<v Speaker 0>is a Discord server. Feel free to come

00:04:09.540 --> 00:04:11.300
<v Speaker 0>and join us there and ask questions when

00:04:11.300 --> 00:04:12.500
<v Speaker 0>we're not streaming.

00:04:13.060 --> 00:04:15.780
<v Speaker 0>B, I'm getting better at this. Okay. Now

00:04:18.345 --> 00:04:20.185
<v Speaker 0>Now we're gonna set some more context about

00:04:20.185 --> 00:04:22.345
<v Speaker 0>what we're actually gonna do. So I am

00:04:22.345 --> 00:04:24.505
<v Speaker 0>just gonna pop open the share here,

00:04:24.825 --> 00:04:26.905
<v Speaker 0>and we have my screen. So

00:04:27.305 --> 00:04:29.785
<v Speaker 0>how did I pick the project to work

00:04:29.785 --> 00:04:30.345
<v Speaker 0>with today?

00:04:31.400 --> 00:04:35.160
<v Speaker 0>Simple. I went to github.com/topics/Laravel.

00:04:35.240 --> 00:04:37.560
<v Speaker 0>I filtered on PHP and most stars, and

00:04:37.560 --> 00:04:39.560
<v Speaker 0>I scrolled down this list until I find

00:04:39.560 --> 00:04:42.440
<v Speaker 0>a project that had no containerization whatsoever.

00:04:42.520 --> 00:04:42.840
<v Speaker 1>K.

00:04:44.195 --> 00:04:46.355
<v Speaker 0>So, obviously, we're not gonna do Laravel itself

00:04:46.355 --> 00:04:48.355
<v Speaker 0>because we're looking for a project that has

00:04:48.355 --> 00:04:49.315
<v Speaker 0>all of that

00:04:50.915 --> 00:04:52.995
<v Speaker 0>say through stuff, migrations,

00:04:53.075 --> 00:04:54.675
<v Speaker 0>asset completion, etcetera.

00:04:55.955 --> 00:04:58.835
<v Speaker 0>I did consider using this

00:04:58.120 --> 00:04:58.920
<v Speaker 0>Coel

00:04:59.800 --> 00:05:02.440
<v Speaker 0>project for music streaming. It looks really cool,

00:05:03.160 --> 00:05:05.400
<v Speaker 0>but I wanted something that hopefully more people

00:05:05.400 --> 00:05:07.880
<v Speaker 0>are actually using as a development platform rather

00:05:07.880 --> 00:05:09.880
<v Speaker 0>than maybe as a tool to consume where

00:05:09.880 --> 00:05:11.560
<v Speaker 0>you would just use Docker files anyway.

00:05:12.715 --> 00:05:15.595
<v Speaker 0>There's a few library based projects and projects,

00:05:15.595 --> 00:05:17.995
<v Speaker 0>and then I got the Flatum Flatum. I'm

00:05:17.995 --> 00:05:19.835
<v Speaker 0>not sure how to pronounce it, but I'm

00:05:19.835 --> 00:05:21.915
<v Speaker 0>sure I'll change it randomly as I go.

00:05:22.795 --> 00:05:25.035
<v Speaker 0>But this project looks cool. It's

00:05:25.509 --> 00:05:26.789
<v Speaker 0>like a forum,

00:05:27.669 --> 00:05:28.789
<v Speaker 0>retinal larval,

00:05:29.590 --> 00:05:30.949
<v Speaker 0>and it it

00:05:30.949 --> 00:05:33.590
<v Speaker 0>checked all my criteria. My criteria was no

00:05:33.590 --> 00:05:35.669
<v Speaker 0>containerization. You can see there's no Docker compose

00:05:35.669 --> 00:05:37.855
<v Speaker 0>here. There's no Docker file here. We get

00:05:37.855 --> 00:05:39.535
<v Speaker 0>to do everything ourselves.

00:05:40.415 --> 00:05:42.095
<v Speaker 1>Yeah. There's not much there, is there?

00:05:43.055 --> 00:05:44.655
<v Speaker 0>No. It's got

00:05:45.135 --> 00:05:47.215
<v Speaker 0>a pretty solid amount of stars. You know,

00:05:47.215 --> 00:05:50.310
<v Speaker 0>it's pushing on 11 k. It's got, you

00:05:50.310 --> 00:05:52.390
<v Speaker 0>know, over a thousand forks. Feels maybe got

00:05:52.390 --> 00:05:55.990
<v Speaker 0>a vibrant community contributor list. There's 20 contributors

00:05:55.990 --> 00:05:58.070
<v Speaker 0>down here. So PHP,

00:05:58.070 --> 00:05:59.110
<v Speaker 0>it's Laravel.

00:05:59.350 --> 00:06:01.590
<v Speaker 0>I mean, I think this is gonna be

00:06:01.590 --> 00:06:02.870
<v Speaker 0>a pretty cool project and a fun one

00:06:02.870 --> 00:06:03.670
<v Speaker 0>to hack on today.

00:06:18.130 --> 00:06:20.050
<v Speaker 0>But I have cloned it. So I just

00:06:20.050 --> 00:06:21.810
<v Speaker 0>did this a few moments ago. You can

00:06:21.810 --> 00:06:23.410
<v Speaker 0>see it's actually cloned here.

00:06:23.810 --> 00:06:26.289
<v Speaker 0>Alright. We've got the files. We're starting from

00:06:26.289 --> 00:06:28.289
<v Speaker 0>a fresh a fresh slate here. But, I

00:06:28.289 --> 00:06:29.889
<v Speaker 0>mean, I think I'm hoping

00:06:30.425 --> 00:06:32.425
<v Speaker 0>this is an I do a math, a

00:06:32.425 --> 00:06:33.945
<v Speaker 0>very Laravel,

00:06:35.305 --> 00:06:36.985
<v Speaker 0>I don't know, steady technical

00:06:36.985 --> 00:06:39.465
<v Speaker 0>application that we could just go from start

00:06:39.465 --> 00:06:40.505
<v Speaker 0>to production

00:06:40.585 --> 00:06:42.185
<v Speaker 0>and cover all of the steps that we

00:06:42.185 --> 00:06:43.785
<v Speaker 0>kind of plucked around last time.

00:06:46.080 --> 00:06:48.880
<v Speaker 0>So I guess what makes sense first is

00:06:48.880 --> 00:06:50.960
<v Speaker 0>to just copy what we did last time,

00:06:50.960 --> 00:06:53.120
<v Speaker 0>and that's what just get it running and

00:06:53.120 --> 00:06:54.240
<v Speaker 0>understand the steps that are

00:06:55.040 --> 00:06:56.160
<v Speaker 0>that we need to go through to make

00:06:56.160 --> 00:06:59.015
<v Speaker 0>that happen. That sound good? Yeah. And I

00:06:59.015 --> 00:07:01.815
<v Speaker 1>can see that they've got a installation guide.

00:07:03.655 --> 00:07:05.655
<v Speaker 0>Where we are going, we don't need guides.

00:07:06.455 --> 00:07:08.935
<v Speaker 1>Well, it's interesting to know what how they

00:07:08.935 --> 00:07:11.495
<v Speaker 1>say to install stuff, don't they? Alright. You

00:07:11.815 --> 00:07:12.535
<v Speaker 1>go your way.

00:07:14.970 --> 00:07:16.330
<v Speaker 1>I'll just I'll have a quick look and

00:07:16.330 --> 00:07:17.770
<v Speaker 1>see if there's any gotchas in it.

00:07:19.370 --> 00:07:21.450
<v Speaker 0>I'm just gonna run composer and so first.

00:07:21.450 --> 00:07:22.170
<v Speaker 0>Like,

00:07:22.810 --> 00:07:24.410
<v Speaker 0>let's let's see how far through this we

00:07:24.410 --> 00:07:25.530
<v Speaker 0>can get. You take a look at the

00:07:25.530 --> 00:07:27.370
<v Speaker 0>gate. The in fact, I'll pull up the

00:07:27.370 --> 00:07:29.195
<v Speaker 0>gate too. Let's do it.

00:07:31.115 --> 00:07:32.875
<v Speaker 0>Where's the installation gate then?

00:07:33.195 --> 00:07:36.315
<v Speaker 0>Is it here? Oh, there we go. Docs.florum.org.

00:07:36.315 --> 00:07:36.795
<v Speaker 1>Yeah.

00:07:37.195 --> 00:07:38.475
<v Speaker 1>Yeah. Click that.

00:07:39.355 --> 00:07:41.195
<v Speaker 1>So they give you installation on

00:07:41.595 --> 00:07:42.955
<v Speaker 1>Apache or NGINX.

00:07:45.550 --> 00:07:49.230
<v Speaker 1>You need something you need MySQL or MariaDB,

00:07:50.830 --> 00:07:52.670
<v Speaker 1>and they're specifying

00:07:53.150 --> 00:07:54.350
<v Speaker 1>particular version of PHP.

00:07:55.884 --> 00:07:56.764
<v Speaker 1>That's it.

00:07:57.965 --> 00:07:58.845
<v Speaker 0>Ideal.

00:08:00.444 --> 00:08:03.805
<v Speaker 0>So we have our first warning comment

00:08:04.365 --> 00:08:05.485
<v Speaker 0>from Alex

00:08:06.284 --> 00:08:08.764
<v Speaker 0>who has said that this does not look

00:08:08.764 --> 00:08:11.039
<v Speaker 0>like a standard Laravel application and that the

00:08:11.039 --> 00:08:13.680
<v Speaker 0>composer JSON doesn't even mention Laravel.

00:08:14.159 --> 00:08:16.720
<v Speaker 0>Now I did notice the lack of Laravel

00:08:16.720 --> 00:08:19.919
<v Speaker 0>adhere. I'm hoping that that it just encapsulated

00:08:19.919 --> 00:08:21.199
<v Speaker 0>in platinum core.

00:08:24.215 --> 00:08:25.335
<v Speaker 0>I know that's

00:08:25.495 --> 00:08:28.535
<v Speaker 0>an assumption, but I'm gonna clarify that now.

00:08:28.535 --> 00:08:29.175
<v Speaker 0>So

00:08:29.895 --> 00:08:32.135
<v Speaker 0>If you decompose an info in your shell,

00:08:32.135 --> 00:08:33.095
<v Speaker 1>does it have Laravel?

00:08:36.750 --> 00:08:38.909
<v Speaker 0>Yeah. There's loads of Laravel stuff in core.

00:08:38.909 --> 00:08:40.510
<v Speaker 0>So what was that command? How can I

00:08:40.510 --> 00:08:43.549
<v Speaker 0>confirm that here? Well Composer Composer info

00:08:44.350 --> 00:08:45.230
<v Speaker 1>after this. Yeah.

00:08:45.790 --> 00:08:47.310
<v Speaker 0>Let it install. See, but I could still

00:08:47.310 --> 00:08:49.870
<v Speaker 0>eliminate. I'm pretty sure that's a Laravel thing.

00:08:49.870 --> 00:08:50.750
<v Speaker 0>I can see

00:08:52.175 --> 00:08:53.935
<v Speaker 1>Yeah. I'm not seeing Laravel Laravel.

00:09:04.439 --> 00:09:06.839
<v Speaker 1>So your your concern is it might be

00:09:07.000 --> 00:09:08.360
<v Speaker 1>too nonstandard?

00:09:09.240 --> 00:09:11.720
<v Speaker 0>I wasn't concerned. Alex is now mainly concerned.

00:09:11.720 --> 00:09:12.199
<v Speaker 0>Yeah.

00:09:13.480 --> 00:09:15.399
<v Speaker 0>Within the first six minutes of the stream,

00:09:15.399 --> 00:09:15.879
<v Speaker 0>choose me.

00:09:17.195 --> 00:09:19.275
<v Speaker 1>So I guess the question for me is,

00:09:19.275 --> 00:09:21.595
<v Speaker 1>do you do things that a typical Laravel

00:09:21.595 --> 00:09:24.475
<v Speaker 1>project would do, for instance, to run migrations?

00:09:28.329 --> 00:09:31.690
<v Speaker 0>Okay. So if I grab composer info for

00:09:31.769 --> 00:09:33.290
<v Speaker 0>dash I Laravel

00:09:36.250 --> 00:09:36.970
<v Speaker 1>Mhmm.

00:09:37.290 --> 00:09:38.570
<v Speaker 1>So maybe they're just using a load of

00:09:38.570 --> 00:09:39.370
<v Speaker 1>Laravel bits.

00:09:42.045 --> 00:09:43.725
<v Speaker 0>That's frustrating.

00:09:43.965 --> 00:09:44.765
<v Speaker 0>Yeah.

00:09:48.125 --> 00:09:48.845
<v Speaker 0>Yeah.

00:09:49.325 --> 00:09:49.965
<v Speaker 0>Okay.

00:09:52.685 --> 00:09:55.005
<v Speaker 0>Now is there enough Laravel here for us

00:09:55.005 --> 00:09:56.045
<v Speaker 0>to continue?

00:09:56.045 --> 00:09:56.285
<v Speaker 0>No.

00:09:58.000 --> 00:09:59.840
<v Speaker 0>Illuminate is the database package,

00:10:00.160 --> 00:10:02.160
<v Speaker 0>so we can show migrations. Right? Even if

00:10:02.160 --> 00:10:04.800
<v Speaker 0>they're not Laravel specific, hopefully, that's not gonna

00:10:04.800 --> 00:10:05.840
<v Speaker 0>be too different.

00:10:09.200 --> 00:10:11.985
<v Speaker 0>Right. Okay. Right. Alex, you've been so Alex

00:10:11.985 --> 00:10:13.825
<v Speaker 0>has suggested we take a look at

00:10:14.465 --> 00:10:17.265
<v Speaker 0>anterior patent CRM. So we're gonna do

00:10:18.225 --> 00:10:20.465
<v Speaker 0>a last minute switch. What's the worst that

00:10:20.465 --> 00:10:20.945
<v Speaker 0>can happen?

00:10:28.380 --> 00:10:30.220
<v Speaker 0>And carrier Peng CRM.

00:10:38.725 --> 00:10:40.884
<v Speaker 0>Oh, and they actually alright. Okay.

00:10:42.324 --> 00:10:44.165
<v Speaker 0>Right. No Docker set up.

00:10:44.324 --> 00:10:46.884
<v Speaker 0>Alright, Alex. We'll do it. You have

00:10:48.165 --> 00:10:49.524
<v Speaker 0>persuaded us.

00:10:50.004 --> 00:10:51.720
<v Speaker 0>I mean, it's only got 670

00:10:51.720 --> 00:10:52.440
<v Speaker 0>stars.

00:10:52.839 --> 00:10:54.120
<v Speaker 1>What's the license?

00:10:58.120 --> 00:10:59.480
<v Speaker 0>The GitHub license?

00:10:59.880 --> 00:11:01.480
<v Speaker 0>That just means that everyone can use it.

00:11:01.480 --> 00:11:03.160
<v Speaker 1>Could it's something could

00:11:03.480 --> 00:11:05.079
<v Speaker 1>it's something that can't show on screen? Yeah.

00:11:05.079 --> 00:11:05.560
<v Speaker 1>That's fine.

00:11:07.775 --> 00:11:08.575
<v Speaker 0>Okay.

00:11:09.535 --> 00:11:13.135
<v Speaker 0>We've got installation instructions, MPM, composer. Okay. I'm

00:11:13.135 --> 00:11:14.735
<v Speaker 0>happy with that. So we've got some artisan

00:11:14.735 --> 00:11:16.815
<v Speaker 0>here, which I believe is the OLM

00:11:17.615 --> 00:11:19.695
<v Speaker 0>part of Laravel. So we will we'll put

00:11:19.695 --> 00:11:20.655
<v Speaker 0>it. Let's go for it.

00:11:22.870 --> 00:11:24.310
<v Speaker 0>So I will

00:11:24.870 --> 00:11:26.150
<v Speaker 0>clone this.

00:11:28.709 --> 00:11:30.550
<v Speaker 1>Artisan is like the task runner.

00:11:31.190 --> 00:11:32.230
<v Speaker 0>Okay. Task runner.

00:11:36.065 --> 00:11:38.065
<v Speaker 0>So let me pop that open.

00:11:41.825 --> 00:11:44.705
<v Speaker 0>It means I'm gonna kill this live share,

00:11:44.705 --> 00:11:46.305
<v Speaker 0>but I'll send you a new link in

00:11:46.305 --> 00:11:47.985
<v Speaker 0>case we need to do any pairing.

00:11:49.670 --> 00:11:52.230
<v Speaker 0>It should automatically copy to my clipboard. Copy.

00:11:52.230 --> 00:11:52.950
<v Speaker 0>Copy. Copy.

00:11:53.990 --> 00:11:55.350
<v Speaker 0>And we'll get started.

00:11:59.670 --> 00:12:00.470
<v Speaker 0>Alright.

00:12:01.110 --> 00:12:02.230
<v Speaker 0>So

00:12:02.635 --> 00:12:05.675
<v Speaker 0>I need to run composer install again. Wonderful.

00:12:09.035 --> 00:12:10.075
<v Speaker 0>Let's just

00:12:11.755 --> 00:12:14.395
<v Speaker 0>get a Docker Compose file started for now.

00:12:15.035 --> 00:12:16.555
<v Speaker 0>We get some of the boilerplate out of

00:12:16.555 --> 00:12:18.019
<v Speaker 0>the way. Yep.

00:12:19.459 --> 00:12:21.379
<v Speaker 0>We're gonna go with version two. I covered

00:12:21.379 --> 00:12:22.740
<v Speaker 0>this in the last session about why I

00:12:22.740 --> 00:12:24.579
<v Speaker 0>prefer version two over version three.

00:12:25.379 --> 00:12:27.060
<v Speaker 0>And and it's really because we want to

00:12:27.060 --> 00:12:29.699
<v Speaker 0>be able to orchestrate

00:12:29.935 --> 00:12:30.815
<v Speaker 0>our

00:12:31.615 --> 00:12:32.975
<v Speaker 0>we wanna be able to use health checks

00:12:32.975 --> 00:12:34.415
<v Speaker 0>to guarantee the order in which things are

00:12:34.415 --> 00:12:35.775
<v Speaker 0>starting. I I think

00:12:36.815 --> 00:12:39.135
<v Speaker 0>I I wouldn't spend five to ten minutes

00:12:39.135 --> 00:12:41.135
<v Speaker 0>to get over why that's important, you know,

00:12:41.135 --> 00:12:42.815
<v Speaker 0>as much as we want parity between our

00:12:42.815 --> 00:12:44.575
<v Speaker 0>development environment and our production environment.

00:12:45.000 --> 00:12:46.680
<v Speaker 0>Visit the workflows

00:12:46.680 --> 00:12:49.800
<v Speaker 0>with development and production are extremely different. So

00:12:49.800 --> 00:12:52.280
<v Speaker 0>watch the last video for for more information

00:12:52.280 --> 00:12:54.120
<v Speaker 0>on why version two is important.

00:12:54.760 --> 00:12:57.160
<v Speaker 0>We will call this service PHP.

00:12:57.240 --> 00:12:58.920
<v Speaker 0>I will just add a very base PHP

00:12:58.920 --> 00:13:00.815
<v Speaker 0>image for now. I'm not gonna do anything

00:13:00.815 --> 00:13:01.615
<v Speaker 0>else.

00:13:03.295 --> 00:13:06.735
<v Speaker 0>And I'm assuming we're going to need a

00:13:06.735 --> 00:13:07.615
<v Speaker 0>database.

00:13:08.015 --> 00:13:09.375
<v Speaker 1>Looks like it. Yeah.

00:13:10.175 --> 00:13:12.415
<v Speaker 0>Alright. We have another question

00:13:13.029 --> 00:13:15.830
<v Speaker 0>from Pierce. So are we taking a Laravel

00:13:15.830 --> 00:13:17.830
<v Speaker 0>app and building Docker into it?

00:13:18.310 --> 00:13:20.470
<v Speaker 0>Yeah. We are. We did the session last

00:13:20.470 --> 00:13:22.630
<v Speaker 0>week where we took a PHP application.

00:13:22.870 --> 00:13:25.350
<v Speaker 0>We showed how to build a development environment

00:13:25.350 --> 00:13:28.870
<v Speaker 0>using Docker Docker Compose, but then take that

00:13:29.125 --> 00:13:31.204
<v Speaker 0>automation and use that to build a Docker

00:13:31.204 --> 00:13:33.125
<v Speaker 0>image that can be shipped to Kubernetes on

00:13:33.125 --> 00:13:33.765
<v Speaker 0>production.

00:13:34.485 --> 00:13:35.845
<v Speaker 0>The feedback that we got is that people

00:13:35.845 --> 00:13:38.485
<v Speaker 0>wanna understand how to handle all of the

00:13:38.885 --> 00:13:39.524
<v Speaker 0>the

00:13:39.845 --> 00:13:42.680
<v Speaker 0>deployment steps that we cannot flock over. Database

00:13:42.680 --> 00:13:45.160
<v Speaker 0>migrations, asset compilation, and a few other recipes

00:13:45.160 --> 00:13:47.480
<v Speaker 0>running these tests. That's what we're gonna do

00:13:47.480 --> 00:13:49.080
<v Speaker 0>today. So we're gonna use Laravel.

00:13:49.240 --> 00:13:51.800
<v Speaker 0>We're gonna get development environment running with Docker

00:13:51.800 --> 00:13:54.040
<v Speaker 0>and Docker Compose again. We'll do that relatively

00:13:54.040 --> 00:13:56.279
<v Speaker 0>snappy, and then we'll start to talk about

00:13:56.279 --> 00:13:58.285
<v Speaker 0>the Kubernetes aspect and how we run those

00:13:58.285 --> 00:14:00.365
<v Speaker 0>migrations in a production like environment.

00:14:01.325 --> 00:14:04.445
<v Speaker 1>Yeah. It needs PHP 7.3

00:14:05.005 --> 00:14:06.205
<v Speaker 1>or better.

00:14:08.445 --> 00:14:10.445
<v Speaker 0>Yeah. So we're just on PHP seven, which

00:14:10.445 --> 00:14:11.885
<v Speaker 0>we cover as the latest anyway.

00:14:12.810 --> 00:14:15.210
<v Speaker 1>So you you don't you don't nail it

00:14:15.210 --> 00:14:16.490
<v Speaker 1>onto a specific one

00:14:18.810 --> 00:14:19.610
<v Speaker 1>for dev?

00:14:20.490 --> 00:14:21.050
<v Speaker 0>Yeah.

00:14:22.250 --> 00:14:23.530
<v Speaker 0>I should do this as if I was

00:14:23.530 --> 00:14:24.810
<v Speaker 0>doing this for production.

00:14:25.130 --> 00:14:27.575
<v Speaker 0>I will. Okay. So what I would normally

00:14:27.575 --> 00:14:28.935
<v Speaker 0>do is go to here,

00:14:29.495 --> 00:14:32.295
<v Speaker 0>Docker Hub, go to the PHP image.

00:14:32.535 --> 00:14:34.215
<v Speaker 0>I can set the cookies,

00:14:35.175 --> 00:14:36.055
<v Speaker 0>tags,

00:14:36.295 --> 00:14:36.935
<v Speaker 0>and

00:14:37.655 --> 00:14:39.495
<v Speaker 0>I thought we had a 7.4, but I

00:14:39.495 --> 00:14:41.815
<v Speaker 0>guess I was wrong. Yeah. There is. Seven

00:14:41.815 --> 00:14:42.615
<v Speaker 1>four out of time.

00:14:43.730 --> 00:14:45.090
<v Speaker 1>We were using last time.

00:14:45.970 --> 00:14:47.330
<v Speaker 1>But in a general sense, do you not

00:14:47.330 --> 00:14:49.170
<v Speaker 1>do you not specify a minor version? Would

00:14:49.170 --> 00:14:50.130
<v Speaker 1>would you

00:14:52.690 --> 00:14:53.810
<v Speaker 1>do you think it's important?

00:14:57.045 --> 00:14:57.605
<v Speaker 0>No.

00:14:58.245 --> 00:15:00.485
<v Speaker 0>So I like to take as many

00:15:02.085 --> 00:15:05.045
<v Speaker 0>updates as possible. So I don't commit lock

00:15:05.045 --> 00:15:07.125
<v Speaker 0>files, and I don't generally pen to minor

00:15:07.125 --> 00:15:08.885
<v Speaker 0>versions in a Docker

00:15:09.400 --> 00:15:10.920
<v Speaker 0>in a Docker container.

00:15:11.000 --> 00:15:13.640
<v Speaker 0>The reason why would be that

00:15:14.040 --> 00:15:16.120
<v Speaker 0>I always wanted to pull the latest and

00:15:16.120 --> 00:15:18.120
<v Speaker 0>greatest, and then I wanna trust

00:15:18.760 --> 00:15:21.880
<v Speaker 0>my continuous integration and deployment platforms to detect

00:15:21.880 --> 00:15:24.605
<v Speaker 0>when something goes wrong and block that pipeline

00:15:24.605 --> 00:15:26.125
<v Speaker 0>so that I can go and investigate and

00:15:26.125 --> 00:15:28.525
<v Speaker 0>fix it. Right. Which means if I do

00:15:28.525 --> 00:15:30.925
<v Speaker 0>pin to seven and seven point five came

00:15:30.925 --> 00:15:32.765
<v Speaker 0>out and there was some sort of regression,

00:15:32.765 --> 00:15:34.525
<v Speaker 0>my CI or my test would pick that

00:15:34.525 --> 00:15:35.005
<v Speaker 0>up,

00:15:35.645 --> 00:15:37.165
<v Speaker 0>and then I would be able to go

00:15:37.165 --> 00:15:38.685
<v Speaker 0>and make my code work with that latest

00:15:38.685 --> 00:15:41.460
<v Speaker 0>version rather than just pan into 7.4

00:15:41.460 --> 00:15:43.060
<v Speaker 0>and then 7.7

00:15:43.060 --> 00:15:45.940
<v Speaker 0>comes along. I've got three releases of things.

00:15:45.940 --> 00:15:48.740
<v Speaker 0>You know, that that surface have changed.

00:15:49.060 --> 00:15:50.900
<v Speaker 0>It's just much bigger, and I'd rather deal

00:15:50.900 --> 00:15:54.340
<v Speaker 0>with really small incremental continuous updates than large

00:15:54.340 --> 00:15:54.660
<v Speaker 0>ones.

00:15:56.475 --> 00:15:57.915
<v Speaker 0>But you gotta have to take one in

00:15:57.915 --> 00:15:58.395
<v Speaker 0>there.

00:16:00.714 --> 00:16:02.394
<v Speaker 1>Yeah. They would do try and sort of

00:16:02.394 --> 00:16:04.394
<v Speaker 1>lock everything to specific versions as a sort

00:16:04.394 --> 00:16:05.834
<v Speaker 1>of safety net, don't they?

00:16:06.635 --> 00:16:08.315
<v Speaker 1>But you're saying that the CI is it

00:16:08.315 --> 00:16:10.154
<v Speaker 1>okay to break the CI every so often?

00:16:11.210 --> 00:16:13.370
<v Speaker 0>Yeah. Definitely. You know, and then track your

00:16:13.370 --> 00:16:15.690
<v Speaker 0>continuous integration. Track your test. You know, if

00:16:15.690 --> 00:16:18.010
<v Speaker 0>you've got enough of that if you're getting

00:16:18.010 --> 00:16:18.730
<v Speaker 0>so much

00:16:19.770 --> 00:16:22.570
<v Speaker 0>ACG's or set one incidents or anything like

00:16:22.570 --> 00:16:25.334
<v Speaker 0>that because of that approach, then your test

00:16:25.334 --> 00:16:27.735
<v Speaker 0>coverage needs to improve, the automation needs to

00:16:27.735 --> 00:16:28.774
<v Speaker 0>improve. You know, there's

00:16:29.735 --> 00:16:31.495
<v Speaker 0>there are symptoms there that could be worked

00:16:31.495 --> 00:16:33.975
<v Speaker 0>on, and it doesn't mean that everyone can

00:16:33.975 --> 00:16:35.735
<v Speaker 0>take this approach that I have. I generally

00:16:35.975 --> 00:16:37.735
<v Speaker 0>I I think I spent and invest a

00:16:37.735 --> 00:16:38.855
<v Speaker 0>lot of time in the tooling to make

00:16:38.855 --> 00:16:39.175
<v Speaker 0>it work.

00:16:39.959 --> 00:16:41.560
<v Speaker 0>And it's a journey, so it's a scale

00:16:41.560 --> 00:16:43.160
<v Speaker 0>of zero to 10 and how close you

00:16:43.160 --> 00:16:46.200
<v Speaker 0>can get to that continuous automatic update. Okay.

00:16:46.360 --> 00:16:48.199
<v Speaker 0>It's not for everyone, but try and get

00:16:48.199 --> 00:16:50.040
<v Speaker 0>towards that stage, I think, is really important

00:16:50.040 --> 00:16:51.720
<v Speaker 0>because then your team can focus on the

00:16:51.720 --> 00:16:52.279
<v Speaker 0>more fun stuff.

00:16:54.404 --> 00:16:55.845
<v Speaker 0>Right. Let's

00:16:56.565 --> 00:16:57.524
<v Speaker 0>let's go with

00:16:58.005 --> 00:16:59.845
<v Speaker 0>I'm just gonna have a seven APM after

00:16:59.845 --> 00:17:00.404
<v Speaker 0>that.

00:17:02.165 --> 00:17:02.885
<v Speaker 0>Okay.

00:17:03.524 --> 00:17:06.005
<v Speaker 0>Now let's take a look at these installation

00:17:06.005 --> 00:17:08.240
<v Speaker 0>instructions again. We don't need to play with

00:17:08.240 --> 00:17:09.999
<v Speaker 0>them anymore. There's much there.

00:17:10.799 --> 00:17:12.399
<v Speaker 1>So there's NPM stuff.

00:17:12.799 --> 00:17:14.959
<v Speaker 1>So you run composer. You run NPM.

00:17:15.440 --> 00:17:17.359
<v Speaker 1>You use some database stuff that I think

00:17:17.359 --> 00:17:18.960
<v Speaker 1>assumes you've got a database.

00:17:20.214 --> 00:17:22.135
<v Speaker 0>Okay. So we're not gonna use SQLite as

00:17:22.135 --> 00:17:24.054
<v Speaker 0>the easy approach here. Let's

00:17:26.054 --> 00:17:28.214
<v Speaker 0>MySQL MariaDB Postgres.

00:17:28.214 --> 00:17:29.894
<v Speaker 0>Where where's your poison, Kieran? What do you

00:17:29.894 --> 00:17:31.334
<v Speaker 0>want? Don't mind.

00:17:31.894 --> 00:17:32.615
<v Speaker 1>MariaDB.

00:17:38.190 --> 00:17:40.269
<v Speaker 0>Believe it's version 10 currently.

00:17:40.910 --> 00:17:41.710
<v Speaker 0>Okay.

00:17:42.430 --> 00:17:43.149
<v Speaker 0>Now

00:17:44.270 --> 00:17:44.830
<v Speaker 0>we're

00:17:45.390 --> 00:17:47.070
<v Speaker 0>I can start filling in the environment that

00:17:47.070 --> 00:17:48.110
<v Speaker 0>we need to configure this.

00:17:49.105 --> 00:17:49.904
<v Speaker 0>But

00:17:50.145 --> 00:17:52.144
<v Speaker 0>let's just walk through those steps as well.

00:17:52.145 --> 00:17:53.504
<v Speaker 0>If I didn't know,

00:17:54.945 --> 00:17:56.625
<v Speaker 0>then I would come to the MirrorEye DB

00:17:56.625 --> 00:17:57.424
<v Speaker 0>image.

00:17:58.304 --> 00:17:59.744
<v Speaker 0>I can scroll down,

00:17:59.905 --> 00:18:02.544
<v Speaker 0>and, eventually, we'll get to these environment variables

00:18:02.544 --> 00:18:05.110
<v Speaker 0>that allow to configure how this runs.

00:18:05.990 --> 00:18:06.710
<v Speaker 0>So

00:18:07.270 --> 00:18:09.270
<v Speaker 0>we're gonna do a random password.

00:18:11.750 --> 00:18:12.630
<v Speaker 1>Nice.

00:18:13.270 --> 00:18:14.710
<v Speaker 1>I've never used that. Yeah.

00:18:16.550 --> 00:18:18.390
<v Speaker 0>It just means that we're gonna

00:18:19.485 --> 00:18:21.885
<v Speaker 0>force our automation to use a very specific

00:18:21.885 --> 00:18:23.725
<v Speaker 0>username and password that we also can better

00:18:23.725 --> 00:18:25.565
<v Speaker 0>for environment variables. This is how it would

00:18:25.565 --> 00:18:28.125
<v Speaker 0>run-in production. We wouldn't run necessarily with the

00:18:28.125 --> 00:18:30.525
<v Speaker 0>root user and our production DB, but I'm

00:18:30.525 --> 00:18:31.405
<v Speaker 0>not gonna do that here.

00:18:33.120 --> 00:18:34.960
<v Speaker 0>Which means we can now specify these two

00:18:34.960 --> 00:18:38.320
<v Speaker 0>fields, the username, password, and the database.

00:18:38.320 --> 00:18:39.680
<v Speaker 0>So we'll do that now.

00:18:40.000 --> 00:18:40.320
<v Speaker 1>Mhmm.

00:18:44.785 --> 00:18:46.625
<v Speaker 0>And we'll call the user

00:18:47.345 --> 00:18:48.544
<v Speaker 0>and CRM,

00:18:50.785 --> 00:18:52.305
<v Speaker 0>and the password is gonna be the same

00:18:52.305 --> 00:18:54.785
<v Speaker 0>CRM. Not very secure, but it's dev. It's

00:18:54.785 --> 00:18:55.105
<v Speaker 0>okay.

00:18:57.289 --> 00:18:59.049
<v Speaker 0>What else do we need?

00:18:59.450 --> 00:19:00.969
<v Speaker 0>Database. Okay.

00:19:01.850 --> 00:19:03.769
<v Speaker 0>We'll get the database and name.

00:19:04.010 --> 00:19:05.049
<v Speaker 1>Ping CRM?

00:19:05.850 --> 00:19:07.369
<v Speaker 0>Yeah. You got it.

00:19:07.929 --> 00:19:10.330
<v Speaker 0>So let me explain something else that's weird

00:19:10.330 --> 00:19:13.884
<v Speaker 0>about this configuration. The MariaDB container

00:19:14.284 --> 00:19:16.684
<v Speaker 0>image wants to be a drop in replacement

00:19:16.684 --> 00:19:18.205
<v Speaker 0>for Oracle's MySQL,

00:19:18.445 --> 00:19:20.284
<v Speaker 0>which is why these environment variables are called

00:19:20.284 --> 00:19:21.325
<v Speaker 0>MySQL.

00:19:21.804 --> 00:19:23.965
<v Speaker 0>So you can swap these out as you

00:19:23.965 --> 00:19:26.205
<v Speaker 0>wish, and they just work. Nice night.

00:19:29.960 --> 00:19:31.960
<v Speaker 0>Now that's the database configured.

00:19:32.760 --> 00:19:34.760
<v Speaker 1>So once we've run that, we'll have a

00:19:35.400 --> 00:19:36.919
<v Speaker 1>an application server,

00:19:37.080 --> 00:19:39.560
<v Speaker 1>an FPM server, and a database. We need

00:19:39.560 --> 00:19:40.120
<v Speaker 1>a web server.

00:19:43.295 --> 00:19:44.255
<v Speaker 0>Correct.

00:19:45.135 --> 00:19:47.615
<v Speaker 0>Well, we will need NGINX.

00:19:49.215 --> 00:19:49.774
<v Speaker 0>And

00:19:50.255 --> 00:19:52.495
<v Speaker 0>we're gonna make that available locally so that

00:19:52.495 --> 00:19:54.174
<v Speaker 0>we can actually browse through it.

00:19:56.255 --> 00:19:58.415
<v Speaker 0>We need our code

00:19:59.750 --> 00:20:02.390
<v Speaker 0>inside of this container. We wanna work in

00:20:02.390 --> 00:20:04.309
<v Speaker 0>there as that code. So these two go

00:20:04.309 --> 00:20:06.549
<v Speaker 0>great together. We can set the working directory,

00:20:06.710 --> 00:20:08.870
<v Speaker 0>which means if I exec into this container,

00:20:08.870 --> 00:20:10.230
<v Speaker 0>I'm gonna be next to the code where

00:20:10.230 --> 00:20:11.910
<v Speaker 0>I'm at it, which is also here.

00:20:14.585 --> 00:20:16.904
<v Speaker 0>What else does that PM require?

00:20:17.865 --> 00:20:19.705
<v Speaker 0>I'm assuming we're gonna have some cache and

00:20:19.705 --> 00:20:21.544
<v Speaker 0>logs to deal with, but

00:20:21.785 --> 00:20:23.385
<v Speaker 0>not sure what that looks like yet.

00:20:27.000 --> 00:20:28.440
<v Speaker 1>Yeah. We'll find out.

00:20:28.920 --> 00:20:30.680
<v Speaker 0>Alright. Well, why have I got a right.

00:20:30.680 --> 00:20:32.440
<v Speaker 0>Oh, okay. Because this is on a a

00:20:32.440 --> 00:20:33.320
<v Speaker 0>list. Okay.

00:20:36.120 --> 00:20:37.080
<v Speaker 1>Looks okay.

00:20:37.800 --> 00:20:38.280
<v Speaker 0>Yep.

00:20:40.305 --> 00:20:41.024
<v Speaker 0>Alright.

00:20:41.425 --> 00:20:43.825
<v Speaker 0>So Thomas is reaching out with a comment.

00:20:43.825 --> 00:20:45.505
<v Speaker 0>Using Docker plus b three would allow you

00:20:45.505 --> 00:20:48.705
<v Speaker 0>to use secrets and the MySQL password file.

00:20:49.425 --> 00:20:52.690
<v Speaker 0>Yeah. And there are just too many disadvantages.

00:20:52.690 --> 00:20:54.370
<v Speaker 0>Like, if I were to use version I

00:20:54.370 --> 00:20:56.690
<v Speaker 0>really recommend watching last week's video. It's at

00:20:56.690 --> 00:20:57.570
<v Speaker 0>Rawkode.live.

00:20:57.570 --> 00:20:57.970
<v Speaker 0>And

00:21:01.090 --> 00:21:02.529
<v Speaker 0>the steps that I would need to take

00:21:02.529 --> 00:21:05.755
<v Speaker 0>to orchestrate or or script around starting my

00:21:05.755 --> 00:21:08.075
<v Speaker 0>database container and then waiting for it to

00:21:08.075 --> 00:21:09.915
<v Speaker 0>be healthy to receive traffic and then spinning

00:21:09.915 --> 00:21:11.595
<v Speaker 0>up in the next to that game.

00:21:11.915 --> 00:21:14.395
<v Speaker 0>It's just it's just too much work. And

00:21:14.395 --> 00:21:15.595
<v Speaker 0>as much as I would like to use

00:21:15.595 --> 00:21:16.955
<v Speaker 0>the secrets locally,

00:21:18.150 --> 00:21:19.830
<v Speaker 0>I'm happy to have met that for an

00:21:19.830 --> 00:21:21.270
<v Speaker 0>environment that I can spin up with a

00:21:21.270 --> 00:21:24.550
<v Speaker 0>single command. And I think for developer onboarding

00:21:24.550 --> 00:21:26.310
<v Speaker 0>and quality of life and working on the

00:21:26.310 --> 00:21:27.990
<v Speaker 0>project at the end to end basis, that

00:21:27.990 --> 00:21:29.030
<v Speaker 0>is more important

00:21:29.510 --> 00:21:30.230
<v Speaker 0>than

00:21:31.115 --> 00:21:32.795
<v Speaker 0>consuming something like the secrets.

00:21:33.355 --> 00:21:34.635
<v Speaker 1>I think that's a good example of what

00:21:34.635 --> 00:21:37.355
<v Speaker 1>you were talking about, the version three is

00:21:37.355 --> 00:21:40.875
<v Speaker 1>more oriented towards deployment into prod as well

00:21:41.835 --> 00:21:42.555
<v Speaker 1>because

00:21:42.960 --> 00:21:45.120
<v Speaker 1>managing a secrets file is very much the

00:21:45.120 --> 00:21:46.159
<v Speaker 1>sort of thing you do wanna do in

00:21:46.159 --> 00:21:48.720
<v Speaker 1>production, but it can probably overkill for a

00:21:48.720 --> 00:21:49.519
<v Speaker 1>dev environment.

00:21:50.880 --> 00:21:52.640
<v Speaker 1>You can just set there's no point having

00:21:52.640 --> 00:21:54.320
<v Speaker 1>a MySQL secrets file that just has ping

00:21:54.320 --> 00:21:56.400
<v Speaker 1>CRM, ping CRM, ping CRM, and it's a

00:21:56.400 --> 00:21:56.720
<v Speaker 1>credential.

00:21:57.955 --> 00:21:59.955
<v Speaker 0>Yeah. My my goal is to

00:22:00.355 --> 00:22:02.274
<v Speaker 0>so our our number one objective is never

00:22:02.274 --> 00:22:05.075
<v Speaker 0>to break the parity between development and production

00:22:05.075 --> 00:22:07.475
<v Speaker 0>as far as operating system, dependencies,

00:22:07.475 --> 00:22:09.554
<v Speaker 0>extensions, if that's all. But when it comes

00:22:09.554 --> 00:22:11.620
<v Speaker 0>to the dev side, I want developer happiness

00:22:11.620 --> 00:22:13.460
<v Speaker 0>and experience. And when it comes to production,

00:22:13.460 --> 00:22:14.499
<v Speaker 0>I want security

00:22:14.500 --> 00:22:15.860
<v Speaker 0>and resiliency.

00:22:15.860 --> 00:22:17.860
<v Speaker 0>And Yeah. You know, those are I can't

00:22:17.860 --> 00:22:19.379
<v Speaker 0>have both of those at the same time.

00:22:19.460 --> 00:22:20.900
<v Speaker 0>And I'm not gonna settle for anything in

00:22:20.900 --> 00:22:22.900
<v Speaker 0>the middle that satisfies dev and prod. So

00:22:22.900 --> 00:22:24.825
<v Speaker 0>just separate workflows.

00:22:24.905 --> 00:22:27.625
<v Speaker 0>Appreciate that and make it work. Yep.

00:22:29.065 --> 00:22:30.505
<v Speaker 0>Cool. NGINX,

00:22:30.505 --> 00:22:31.385
<v Speaker 0>FPM,

00:22:31.385 --> 00:22:32.424
<v Speaker 0>MariaDB.

00:22:34.425 --> 00:22:36.185
<v Speaker 0>Think we're got a certain point.

00:22:36.750 --> 00:22:38.590
<v Speaker 1>Yeah. We need so we need an NGINX

00:22:38.590 --> 00:22:40.909
<v Speaker 1>config file, so NGINX can find FPM.

00:22:41.470 --> 00:22:44.910
<v Speaker 1>And we need to know how the PHP

00:22:44.910 --> 00:22:45.549
<v Speaker 1>app

00:22:46.190 --> 00:22:47.630
<v Speaker 1>connects to the database

00:22:48.110 --> 00:22:49.950
<v Speaker 1>so we can set some environment variables so

00:22:49.950 --> 00:22:50.750
<v Speaker 1>it can find the database.

00:22:53.465 --> 00:22:54.264
<v Speaker 0>Perfect.

00:22:54.345 --> 00:22:56.585
<v Speaker 0>So you're right. Let's get that engine x

00:22:56.585 --> 00:22:58.825
<v Speaker 0>config here. And they don't provide one, do

00:22:58.825 --> 00:23:02.505
<v Speaker 0>they? No. Laravel did. Just saying, guys. Let's

00:23:02.505 --> 00:23:03.385
<v Speaker 0>steal the Laravel one.

00:23:05.750 --> 00:23:07.910
<v Speaker 0>It was a dot fail. It's literally complicated,

00:23:07.910 --> 00:23:09.510
<v Speaker 1>though. Have you got the one from last

00:23:09.510 --> 00:23:10.070
<v Speaker 1>time?

00:23:11.990 --> 00:23:13.669
<v Speaker 0>I do have the one from last time.

00:23:13.669 --> 00:23:15.429
<v Speaker 0>Because we've had a very cut down one,

00:23:15.429 --> 00:23:15.830
<v Speaker 1>didn't we?

00:23:19.695 --> 00:23:26.815
<v Speaker 0>Okay. So that was under slimopsenginex.com.

00:23:26.815 --> 00:23:29.135
<v Speaker 0>I'll just copy that there for now, but

00:23:29.135 --> 00:23:30.975
<v Speaker 0>we now have our v host file here.

00:23:31.960 --> 00:23:33.720
<v Speaker 1>Which is very basic.

00:23:33.720 --> 00:23:35.320
<v Speaker 1>We might just need to change that. Do

00:23:35.320 --> 00:23:37.239
<v Speaker 1>we need to change that route path?

00:23:39.159 --> 00:23:40.840
<v Speaker 0>No. I'll just make sure that's where I'm

00:23:40.840 --> 00:23:41.000
<v Speaker 0>at.

00:23:43.174 --> 00:23:45.734
<v Speaker 0>We're not delivering any kind of thing yet.

00:23:45.815 --> 00:23:47.095
<v Speaker 0>We'll do that if we have to. I

00:23:47.095 --> 00:23:48.695
<v Speaker 0>don't think we I don't believe we have

00:23:48.695 --> 00:23:51.414
<v Speaker 0>to just yet. Okay. Let's

00:23:51.495 --> 00:23:53.015
<v Speaker 0>get this working there. So if we do

00:23:53.015 --> 00:23:57.095
<v Speaker 0>a volumes here, we mountourvehicles.com,

00:23:57.095 --> 00:23:58.934
<v Speaker 0>that's etcetera, nginx,

00:23:59.789 --> 00:24:00.429
<v Speaker 0>B

00:24:00.590 --> 00:24:02.349
<v Speaker 0>default.com.

00:24:02.990 --> 00:24:04.830
<v Speaker 0>We also need some dependencies.

00:24:04.830 --> 00:24:05.950
<v Speaker 0>So nginx

00:24:06.750 --> 00:24:09.470
<v Speaker 0>uses as you can see in this vhost.com,

00:24:09.470 --> 00:24:12.269
<v Speaker 0>nginx uses this host name of PHP, which

00:24:12.269 --> 00:24:14.495
<v Speaker 0>means if we remember from last time, that

00:24:14.495 --> 00:24:16.815
<v Speaker 0>container has to be created first.

00:24:17.215 --> 00:24:20.335
<v Speaker 0>Otherwise, that resolution will fail. Yeah. Because we're

00:24:20.335 --> 00:24:23.375
<v Speaker 0>using version two, we can take advantage of

00:24:25.855 --> 00:24:28.095
<v Speaker 0>the my editor seems to go that we

00:24:28.095 --> 00:24:29.295
<v Speaker 0>are going to this syntax.

00:24:31.210 --> 00:24:32.169
<v Speaker 0>PHP

00:24:33.770 --> 00:24:35.769
<v Speaker 0>open editor condition

00:24:36.330 --> 00:24:37.210
<v Speaker 0>service.

00:24:37.289 --> 00:24:39.450
<v Speaker 0>Now we don't need it to be healthy.

00:24:39.450 --> 00:24:41.130
<v Speaker 0>We just need it to be available for

00:24:41.130 --> 00:24:42.090
<v Speaker 0>the DNS resolution.

00:24:42.465 --> 00:24:43.265
<v Speaker 0>However,

00:24:43.265 --> 00:24:44.864
<v Speaker 0>our PHP application

00:24:45.825 --> 00:24:47.504
<v Speaker 0>has a dependency too,

00:24:49.585 --> 00:24:51.424
<v Speaker 0>which is gonna be MariaDB.

00:24:51.745 --> 00:24:52.384
<v Speaker 0>Mhmm.

00:24:52.784 --> 00:24:55.664
<v Speaker 0>And the condition here, we're gonna make service

00:24:55.985 --> 00:24:57.424
<v Speaker 0>healthy

00:24:57.030 --> 00:24:58.789
<v Speaker 0>because we're gonna automate

00:25:00.630 --> 00:25:01.669
<v Speaker 0>running

00:25:01.670 --> 00:25:02.309
<v Speaker 0>our

00:25:03.030 --> 00:25:04.070
<v Speaker 0>migrations.

00:25:04.710 --> 00:25:05.350
<v Speaker 0>Yeah.

00:25:05.670 --> 00:25:06.470
<v Speaker 0>Potentially.

00:25:06.630 --> 00:25:07.190
<v Speaker 0>Potentially.

00:25:07.670 --> 00:25:09.030
<v Speaker 0>Which means we need to add a help

00:25:09.030 --> 00:25:11.190
<v Speaker 0>check to this. So we can do a

00:25:11.190 --> 00:25:11.750
<v Speaker 0>help check,

00:25:12.535 --> 00:25:13.815
<v Speaker 0>We have a test.

00:25:13.975 --> 00:25:14.455
<v Speaker 0>We

00:25:16.055 --> 00:25:18.535
<v Speaker 0>use the shell syntax last time. We said

00:25:18.535 --> 00:25:19.575
<v Speaker 0>run bash

00:25:20.615 --> 00:25:23.015
<v Speaker 0>bash c. And this is a very crude

00:25:23.015 --> 00:25:24.775
<v Speaker 0>health check, but it's

00:25:25.015 --> 00:25:25.415
<v Speaker 0>fast.

00:25:27.020 --> 00:25:28.139
<v Speaker 0>We did

00:25:29.100 --> 00:25:31.100
<v Speaker 0>cat of

00:25:36.620 --> 00:25:37.020
<v Speaker 0>dev.

00:25:39.434 --> 00:25:40.315
<v Speaker 0>Oh,

00:25:41.115 --> 00:25:42.315
<v Speaker 0>is it P2P?

00:25:42.315 --> 00:25:44.075
<v Speaker 0>I'm gonna get this wrong.

00:25:44.235 --> 00:25:45.595
<v Speaker 0>C p o six.

00:25:47.515 --> 00:25:49.115
<v Speaker 1>Cat from or cat to?

00:25:49.915 --> 00:25:51.195
<v Speaker 1>You you're reading from it?

00:25:56.370 --> 00:25:57.810
<v Speaker 0>Yeah. I'm just trying to

00:25:58.770 --> 00:26:00.370
<v Speaker 0>I I could pretty much do a cat

00:26:00.370 --> 00:26:02.930
<v Speaker 0>or an echo to it. It'll fail as

00:26:02.930 --> 00:26:04.930
<v Speaker 0>that port isn't opened. I'll show how that

00:26:04.930 --> 00:26:06.370
<v Speaker 0>works in a second. We'll spin up my

00:26:06.370 --> 00:26:07.970
<v Speaker 0>container and actually run that command.

00:26:08.495 --> 00:26:10.335
<v Speaker 1>Do need an angle bracket in there?

00:26:12.015 --> 00:26:12.655
<v Speaker 1>Cut to

00:26:13.935 --> 00:26:15.615
<v Speaker 0>No. It should be okay with that. Let's

00:26:15.615 --> 00:26:18.175
<v Speaker 0>let's let's check it for it. So container

00:26:18.175 --> 00:26:18.975
<v Speaker 0>run.

00:26:19.935 --> 00:26:21.455
<v Speaker 0>You know, I'll enter active.

00:26:21.830 --> 00:26:24.230
<v Speaker 0>We're going into MariaDB

00:26:24.630 --> 00:26:25.350
<v Speaker 0>10,

00:26:25.910 --> 00:26:28.789
<v Speaker 0>and I will we'll just run bash.

00:26:30.470 --> 00:26:31.669
<v Speaker 0>Start Docker.

00:26:31.910 --> 00:26:33.910
<v Speaker 0>Why do I always forget to start Docker?

00:26:35.804 --> 00:26:37.485
<v Speaker 1>It'd be nice if the command line had

00:26:37.485 --> 00:26:39.085
<v Speaker 1>a do you want to start Docker?

00:26:39.645 --> 00:26:41.164
<v Speaker 0>Yes. That would be nice.

00:26:43.085 --> 00:26:45.165
<v Speaker 0>Alright. I'll just take a few seconds. I

00:26:45.165 --> 00:26:46.365
<v Speaker 1>mean, it's just because you've got a Mac.

00:26:46.365 --> 00:26:47.165
<v Speaker 1>Right? Like

00:26:48.360 --> 00:26:50.840
<v Speaker 0>Yeah. I keep debating them back to using

00:26:50.840 --> 00:26:52.760
<v Speaker 0>my my Linux machine for day to day,

00:26:52.760 --> 00:26:54.760
<v Speaker 0>but I just I'm trying to persevere with

00:26:54.760 --> 00:26:55.799
<v Speaker 0>the Mac right now.

00:26:56.120 --> 00:26:58.600
<v Speaker 0>So Alex has left another comment. Thank you

00:26:58.600 --> 00:27:01.000
<v Speaker 0>for making this interactive. It's more fun when

00:27:01.000 --> 00:27:03.635
<v Speaker 0>you leave comments. If you want standard NGINX

00:27:03.635 --> 00:27:04.914
<v Speaker 0>stuff for Laravel

00:27:06.915 --> 00:27:07.715
<v Speaker 0>Yeah.

00:27:08.195 --> 00:27:08.835
<v Speaker 0>Next?

00:27:09.395 --> 00:27:10.835
<v Speaker 0>I'm

00:27:10.835 --> 00:27:12.434
<v Speaker 0>hoping what you're trying to say there is

00:27:12.434 --> 00:27:15.395
<v Speaker 0>Laravel possibly has an NGINX virtual host. If

00:27:15.395 --> 00:27:16.995
<v Speaker 0>it does, drop the comment, and I'll I'll

00:27:16.995 --> 00:27:18.880
<v Speaker 0>just use their NGINX config straight up. If

00:27:18.880 --> 00:27:20.000
<v Speaker 0>we have any problems with it, I'll make

00:27:20.000 --> 00:27:22.720
<v Speaker 0>changes. I want this to be super Laravel

00:27:22.720 --> 00:27:23.519
<v Speaker 0>specific.

00:27:24.559 --> 00:27:27.600
<v Speaker 0>Send me a link, please. Okay. Let's run

00:27:27.760 --> 00:27:28.720
<v Speaker 0>this again.

00:27:30.080 --> 00:27:32.320
<v Speaker 0>And the syntax we're using is batch test

00:27:32.320 --> 00:27:35.915
<v Speaker 0>c cat dev p t p localhost

00:27:35.915 --> 00:27:37.434
<v Speaker 0>p t o six.

00:27:39.195 --> 00:27:40.795
<v Speaker 0>No such bad directory.

00:27:41.915 --> 00:27:43.835
<v Speaker 0>So I probably just got that wrong again.

00:27:43.835 --> 00:27:44.955
<v Speaker 0>It's a net.

00:27:46.555 --> 00:27:47.995
<v Speaker 0>Oh, I think it is p t p.

00:27:51.700 --> 00:27:53.460
<v Speaker 0>This is looking up from last time.

00:27:53.700 --> 00:27:55.540
<v Speaker 0>One day I'll remember that syntax. It's a

00:27:55.540 --> 00:27:56.980
<v Speaker 0>really cool hack though.

00:27:57.380 --> 00:27:59.940
<v Speaker 1>So Yeah. Because I've seen people running curl

00:27:59.940 --> 00:28:02.420
<v Speaker 1>and stuff, you know, and having to

00:28:02.885 --> 00:28:05.045
<v Speaker 1>put something like that into their image, whereas

00:28:05.045 --> 00:28:07.365
<v Speaker 1>this is bash built in stuff, isn't it?

00:28:07.845 --> 00:28:10.805
<v Speaker 1>Like cat. Yeah. It does. It's the TCP.

00:28:11.125 --> 00:28:12.645
<v Speaker 0>Well, but I did an echo instead of

00:28:12.645 --> 00:28:14.885
<v Speaker 0>the cat. Okay. Maybe that is important.

00:28:16.090 --> 00:28:17.289
<v Speaker 0>So echo

00:28:18.010 --> 00:28:18.969
<v Speaker 0>TCP

00:28:19.370 --> 00:28:20.570
<v Speaker 0>local host.

00:28:20.890 --> 00:28:21.529
<v Speaker 0>So

00:28:22.010 --> 00:28:24.409
<v Speaker 0>yeah. Because that's better. So what Bash does

00:28:24.409 --> 00:28:26.009
<v Speaker 0>is Bash provides

00:28:26.090 --> 00:28:29.450
<v Speaker 0>a virtualized TCP stack through dev slash TCP,

00:28:30.265 --> 00:28:31.624
<v Speaker 0>which means that you can

00:28:32.105 --> 00:28:34.345
<v Speaker 0>put in any IP address or or domain

00:28:34.345 --> 00:28:37.784
<v Speaker 0>name, like, .com/44three,

00:28:38.184 --> 00:28:39.705
<v Speaker 0>and it'll test if it's open. If you

00:28:39.705 --> 00:28:41.465
<v Speaker 0>don't get a response back like that, it

00:28:41.465 --> 00:28:42.664
<v Speaker 0>means it's listening,

00:28:42.985 --> 00:28:44.905
<v Speaker 0>and you can actually echo it as response

00:28:44.905 --> 00:28:47.370
<v Speaker 0>code. I wanna see whether Google is responding

00:28:47.370 --> 00:28:49.049
<v Speaker 0>on 1443,

00:28:49.370 --> 00:28:51.849
<v Speaker 0>then, you know, that's gonna change that.

00:28:52.250 --> 00:28:53.929
<v Speaker 0>The local host, you won't get a timeout.

00:28:53.929 --> 00:28:55.849
<v Speaker 0>You'll just get a direct error saying, hey.

00:28:56.889 --> 00:28:57.849
<v Speaker 0>What's happening?

00:28:58.010 --> 00:28:58.409
<v Speaker 0>Yep.

00:28:58.845 --> 00:29:00.845
<v Speaker 0>So only Bash provides that. I mean, if

00:29:00.845 --> 00:29:02.205
<v Speaker 0>you're using Alpine

00:29:03.085 --> 00:29:04.605
<v Speaker 0>as your base, I mean, she won't have

00:29:04.605 --> 00:29:06.445
<v Speaker 0>access to it unless you install Bash. But

00:29:06.445 --> 00:29:08.924
<v Speaker 0>it's a really nice, great way to do

00:29:08.924 --> 00:29:11.085
<v Speaker 0>sample port based health checks when that's all

00:29:11.085 --> 00:29:12.970
<v Speaker 0>that you need. And as we discovered last

00:29:12.970 --> 00:29:16.090
<v Speaker 0>week, MySQL and MariaDB only open the socket

00:29:16.090 --> 00:29:18.010
<v Speaker 0>when the database is ready to receive queries

00:29:18.010 --> 00:29:19.850
<v Speaker 0>or commands, which helps.

00:29:19.929 --> 00:29:20.970
<v Speaker 1>Very helpful.

00:29:21.530 --> 00:29:24.650
<v Speaker 0>Okay. So let's make that an echo

00:29:24.475 --> 00:29:25.195
<v Speaker 0>there.

00:29:25.514 --> 00:29:26.715
<v Speaker 0>So now we have a help check on

00:29:26.715 --> 00:29:27.754
<v Speaker 0>our MariaDB.

00:29:31.115 --> 00:29:33.034
<v Speaker 0>We can depend on it here.

00:29:33.674 --> 00:29:35.274
<v Speaker 0>Now what that means is that we now

00:29:35.274 --> 00:29:37.914
<v Speaker 0>have a single command to spin up all

00:29:37.914 --> 00:29:39.034
<v Speaker 0>of our services,

00:29:39.115 --> 00:29:39.914
<v Speaker 0>which should work.

00:29:41.700 --> 00:29:43.300
<v Speaker 0>PC is just an alias I have for

00:29:43.300 --> 00:29:44.419
<v Speaker 0>Docker Compose.

00:29:44.660 --> 00:29:46.340
<v Speaker 0>I should be able to run up.

00:29:52.900 --> 00:29:54.580
<v Speaker 0>Oh, yep. So two doesn't work. Has to

00:29:54.580 --> 00:29:55.300
<v Speaker 0>be 2.4.

00:29:56.165 --> 00:29:57.365
<v Speaker 0>And

00:29:59.205 --> 00:30:02.004
<v Speaker 0>it's not oh, it is test. Right? Command

00:30:04.085 --> 00:30:05.524
<v Speaker 0>or command shell.

00:30:07.684 --> 00:30:10.085
<v Speaker 0>No one ever remembered all these things. Okay.

00:30:10.085 --> 00:30:10.405
<v Speaker 0>Cool.

00:30:13.440 --> 00:30:14.160
<v Speaker 1>Okay.

00:30:16.960 --> 00:30:17.600
<v Speaker 1>So

00:30:19.520 --> 00:30:23.040
<v Speaker 1>for the environmental stuff, for PHP finding the

00:30:23.040 --> 00:30:26.815
<v Speaker 1>database, Laravel, I think, uses dot env often

00:30:28.335 --> 00:30:29.455
<v Speaker 1>for config

00:30:30.815 --> 00:30:32.015
<v Speaker 1>dot env files.

00:30:32.255 --> 00:30:32.895
<v Speaker 1>Alright.

00:30:33.535 --> 00:30:35.615
<v Speaker 0>So, yep, we have a dot env example.

00:30:36.059 --> 00:30:36.859
<v Speaker 0>Nice.

00:30:37.659 --> 00:30:38.940
<v Speaker 1>So those are the

00:30:40.940 --> 00:30:42.460
<v Speaker 1>there's the SQL. We'll

00:30:42.460 --> 00:30:43.740
<v Speaker 1>need to look at what the fuck I'm

00:30:43.740 --> 00:30:44.379
<v Speaker 1>looking at.

00:30:45.340 --> 00:30:46.700
<v Speaker 0>So that makes it

00:30:46.860 --> 00:30:47.579
<v Speaker 0>so

00:30:47.740 --> 00:30:51.495
<v Speaker 0>almost trivial to dockerize or containerize application.

00:30:51.495 --> 00:30:53.975
<v Speaker 0>You know, this is classic 12 factor manifesto

00:30:53.975 --> 00:30:55.815
<v Speaker 0>stuff. Been able to configure it each environment

00:30:55.815 --> 00:30:56.455
<v Speaker 0>through

00:30:56.615 --> 00:30:59.174
<v Speaker 0>environment configurations. It just makes everything a lot

00:30:59.174 --> 00:31:00.294
<v Speaker 0>easier, but that's great.

00:31:01.519 --> 00:31:03.039
<v Speaker 0>I must have been able to copy this

00:31:03.039 --> 00:31:05.039
<v Speaker 0>to be not a dot example.

00:31:07.519 --> 00:31:09.200
<v Speaker 0>So let's do that. Okay.

00:31:11.039 --> 00:31:12.720
<v Speaker 0>So all that started. That just means my

00:31:12.720 --> 00:31:14.720
<v Speaker 0>health check is working. Engine x can can

00:31:14.720 --> 00:31:18.255
<v Speaker 0>reach PHP as a DNS name and PHP

00:31:18.255 --> 00:31:19.054
<v Speaker 0>is

00:31:19.535 --> 00:31:20.975
<v Speaker 0>well, that won't be doing anything yet, so

00:31:20.975 --> 00:31:22.255
<v Speaker 0>PHP probably exit.

00:31:27.790 --> 00:31:29.790
<v Speaker 0>Well, I APM is ready to handle connections,

00:31:29.790 --> 00:31:31.470
<v Speaker 0>but I don't think we've we've told it

00:31:31.470 --> 00:31:32.990
<v Speaker 0>where to run around with that. So it's

00:31:32.990 --> 00:31:34.350
<v Speaker 0>probably not doing anything.

00:31:35.310 --> 00:31:36.830
<v Speaker 0>We should get What's the next step? Gonna

00:31:36.830 --> 00:31:37.870
<v Speaker 1>say you can see if we got the

00:31:37.870 --> 00:31:39.309
<v Speaker 1>hello world NGINX

00:31:40.910 --> 00:31:41.630
<v Speaker 1>page. Oh, yeah.

00:31:42.515 --> 00:31:43.794
<v Speaker 0>I'll just spin it up in the background.

00:31:43.794 --> 00:31:45.075
<v Speaker 0>We don't need to watch the logs right

00:31:45.075 --> 00:31:46.434
<v Speaker 0>now. So, I mean, I can leave it

00:31:46.434 --> 00:31:47.075
<v Speaker 0>running.

00:31:47.315 --> 00:31:48.034
<v Speaker 0>Mhmm.

00:31:52.595 --> 00:31:55.315
<v Speaker 1>So comment from Alex in the chat.

00:31:57.620 --> 00:31:58.580
<v Speaker 1>Yeah.

00:31:58.580 --> 00:32:00.740
<v Speaker 1>I actually see not not Alex, I see

00:32:00.740 --> 00:32:03.220
<v Speaker 1>people get confused about dot end versus real

00:32:03.220 --> 00:32:04.419
<v Speaker 1>environment variables.

00:32:05.140 --> 00:32:05.779
<v Speaker 1>And,

00:32:06.900 --> 00:32:08.500
<v Speaker 1>yeah, if if we're using Docker,

00:32:08.765 --> 00:32:11.085
<v Speaker 1>can specify all the config with our our

00:32:11.085 --> 00:32:12.685
<v Speaker 1>actual environment variables

00:32:12.845 --> 00:32:15.805
<v Speaker 1>and not have that dot in file. Right?

00:32:16.445 --> 00:32:17.885
<v Speaker 0>It so you can,

00:32:18.525 --> 00:32:20.525
<v Speaker 0>but it makes it a little bit more

00:32:21.165 --> 00:32:21.965
<v Speaker 0>difficult.

00:32:21.965 --> 00:32:24.525
<v Speaker 0>So let me clarify that. Now

00:32:26.380 --> 00:32:27.660
<v Speaker 0>I can't

00:32:28.860 --> 00:32:31.020
<v Speaker 0>I'm here, add environment,

00:32:31.820 --> 00:32:32.780
<v Speaker 0>and add

00:32:33.660 --> 00:32:36.380
<v Speaker 0>every variable that we need. The first problem

00:32:36.380 --> 00:32:37.020
<v Speaker 0>is

00:32:39.245 --> 00:32:40.684
<v Speaker 0>let's just do this.

00:32:41.085 --> 00:32:43.965
<v Speaker 0>I mean, that becomes unruly a certain number

00:32:43.965 --> 00:32:45.565
<v Speaker 0>of environment variables. And if we take a

00:32:45.565 --> 00:32:47.164
<v Speaker 0>look at this dot e n b,

00:32:48.445 --> 00:32:49.325
<v Speaker 0>there are a fair few.

00:32:51.100 --> 00:32:53.260
<v Speaker 0>And, also, I cannot reuse

00:32:53.260 --> 00:32:53.979
<v Speaker 0>this.

00:32:55.340 --> 00:32:57.740
<v Speaker 0>Now what I can do is use the

00:32:57.740 --> 00:32:58.940
<v Speaker 0>Docker Propose

00:33:00.380 --> 00:33:01.899
<v Speaker 0>e n b file

00:33:02.505 --> 00:33:04.345
<v Speaker 0>where I have a list, and I say

00:33:04.345 --> 00:33:06.025
<v Speaker 0>dot EMB. And that just means that if

00:33:06.025 --> 00:33:08.105
<v Speaker 0>I need to consume those environment variables in

00:33:08.105 --> 00:33:09.945
<v Speaker 0>another process, whether it be

00:33:11.065 --> 00:33:13.465
<v Speaker 0>imagine if we have I'm not sure what

00:33:13.465 --> 00:33:14.745
<v Speaker 0>Laravel uses for

00:33:15.600 --> 00:33:18.080
<v Speaker 0>job processing that has a different process that

00:33:18.080 --> 00:33:19.600
<v Speaker 0>runs. But, you know, if this is real,

00:33:19.600 --> 00:33:21.360
<v Speaker 0>it'd be like sidekick or something.

00:33:22.160 --> 00:33:23.760
<v Speaker 0>And it might need access to those environment

00:33:23.760 --> 00:33:25.760
<v Speaker 0>variables too. It just means I don't have

00:33:25.760 --> 00:33:28.000
<v Speaker 0>to duplicate it. But I generally prefer using

00:33:28.000 --> 00:33:29.360
<v Speaker 0>the dot e n b approach

00:33:30.765 --> 00:33:33.085
<v Speaker 0>and then just linking it together with it.

00:33:33.245 --> 00:33:35.485
<v Speaker 0>And then I wouldn't have these. It would

00:33:35.485 --> 00:33:37.725
<v Speaker 0>be better. I can't I conflict on it

00:33:37.725 --> 00:33:38.045
<v Speaker 1>with

00:33:40.925 --> 00:33:42.365
<v Speaker 1>I think Laravel does this and I know

00:33:42.365 --> 00:33:44.205
<v Speaker 1>Symphony does this. The frameworks then try and

00:33:44.205 --> 00:33:46.380
<v Speaker 1>read the dot end file directly

00:33:48.380 --> 00:33:50.780
<v Speaker 1>irrespective of whether they're in a Docker context

00:33:50.860 --> 00:33:53.100
<v Speaker 1>to find environment variables

00:33:54.780 --> 00:33:56.940
<v Speaker 1>aimed at dev dev type environments.

00:33:57.020 --> 00:33:59.020
<v Speaker 0>So I'm not aware of any

00:33:59.575 --> 00:34:01.975
<v Speaker 0>frameworks that would read the dot e n

00:34:01.975 --> 00:34:03.655
<v Speaker 0>v as part of their process.

00:34:03.735 --> 00:34:07.095
<v Speaker 0>What Laravel Maybe it's just maybe Laravel does

00:34:07.095 --> 00:34:09.574
<v Speaker 0>that. What most recommend is running a source

00:34:09.574 --> 00:34:11.495
<v Speaker 0>prior to running your commands to pull it

00:34:11.495 --> 00:34:15.150
<v Speaker 0>into the execution context. So I'm

00:34:15.150 --> 00:34:17.710
<v Speaker 1>not on as solid ground on Laravel, but

00:34:17.710 --> 00:34:20.030
<v Speaker 1>Symphony has a PHP component that will read

00:34:20.030 --> 00:34:21.150
<v Speaker 1>the dot end file

00:34:21.550 --> 00:34:24.670
<v Speaker 1>and set those environment variables in PHP

00:34:25.469 --> 00:34:27.070
<v Speaker 1>using PHP set end.

00:34:28.514 --> 00:34:30.675
<v Speaker 1>No. Not what you're doing. But, basically, it

00:34:30.675 --> 00:34:32.755
<v Speaker 1>sets them in the framework, and that some

00:34:32.835 --> 00:34:34.275
<v Speaker 1>can sometimes conflict with what you're doing in

00:34:34.275 --> 00:34:35.715
<v Speaker 1>your Docker Compose setup.

00:34:36.755 --> 00:34:37.395
<v Speaker 0>Okay.

00:34:37.554 --> 00:34:39.554
<v Speaker 0>So Let's let's see if we run into

00:34:39.554 --> 00:34:42.230
<v Speaker 0>that. I'm not sure what will happen. So

00:34:42.230 --> 00:34:43.909
<v Speaker 1>I tend to turn that stuff off,

00:34:44.230 --> 00:34:47.270
<v Speaker 1>basically, is what I'm gonna get to and

00:34:48.069 --> 00:34:49.829
<v Speaker 1>make it so that it's Docker that's reading

00:34:49.829 --> 00:34:51.030
<v Speaker 1>the environment variables.

00:34:51.989 --> 00:34:52.949
<v Speaker 1>I've pasted in.

00:34:54.875 --> 00:34:57.434
<v Speaker 1>It's it's pasted in twice because this sharing

00:34:57.434 --> 00:34:59.595
<v Speaker 1>isn't working, but you can see the commented

00:34:59.595 --> 00:35:00.315
<v Speaker 1>out

00:35:00.474 --> 00:35:01.195
<v Speaker 1>section.

00:35:02.474 --> 00:35:05.355
<v Speaker 1>It's pasted wrong. That's the MySQL

00:35:05.515 --> 00:35:06.315
<v Speaker 1>config.

00:35:06.315 --> 00:35:07.835
<v Speaker 1>Delete the bit up below.

00:35:08.315 --> 00:35:09.595
<v Speaker 1>It's put it in about eight times.

00:35:12.500 --> 00:35:13.540
<v Speaker 0>Okay.

00:35:14.020 --> 00:35:16.420
<v Speaker 0>This is weird. I'm working on that. There

00:35:16.420 --> 00:35:17.060
<v Speaker 0>we go.

00:35:17.460 --> 00:35:18.100
<v Speaker 0>Oh.

00:35:19.540 --> 00:35:20.980
<v Speaker 0>Oh, you're having it?

00:35:22.980 --> 00:35:24.740
<v Speaker 0>You're just making sure I have that. Right?

00:35:24.740 --> 00:35:25.220
<v Speaker 0>Yeah.

00:35:26.655 --> 00:35:29.855
<v Speaker 0>Alright. So our database host is MariaDB.

00:35:29.855 --> 00:35:32.175
<v Speaker 0>Our database is Ping CRM,

00:35:32.175 --> 00:35:33.295
<v Speaker 0>Ping CRM.

00:35:35.055 --> 00:35:37.055
<v Speaker 1>If he wants something specifically,

00:35:37.055 --> 00:35:39.295
<v Speaker 1>especially something like DB host, I'd be happier

00:35:39.295 --> 00:35:40.655
<v Speaker 1>having in the composed file

00:35:42.069 --> 00:35:43.190
<v Speaker 1>because then,

00:35:44.069 --> 00:35:45.830
<v Speaker 1>you know, that service name.

00:35:48.470 --> 00:35:50.470
<v Speaker 1>Yeah. The thing I think I'd be I'd

00:35:50.470 --> 00:35:51.589
<v Speaker 0>be happy to put them in the Docker

00:35:51.589 --> 00:35:52.310
<v Speaker 0>Compose.

00:35:52.950 --> 00:35:55.030
<v Speaker 0>Although, generally, what I would do is use

00:35:55.030 --> 00:35:56.950
<v Speaker 0>the for dev, I'd use the ENV.

00:35:58.645 --> 00:35:59.445
<v Speaker 0>Right.

00:36:00.085 --> 00:36:01.684
<v Speaker 0>And so that I can set them once.

00:36:01.684 --> 00:36:03.125
<v Speaker 0>In fact, that's a good example. Let's do

00:36:03.125 --> 00:36:03.685
<v Speaker 0>that.

00:36:04.085 --> 00:36:06.244
<v Speaker 0>But here, I've got this

00:36:06.405 --> 00:36:07.205
<v Speaker 0>year.

00:36:09.765 --> 00:36:13.045
<v Speaker 0>It's better when the configuration uses the same

00:36:14.640 --> 00:36:15.600
<v Speaker 0>names.

00:36:16.080 --> 00:36:19.280
<v Speaker 0>So I can see this is MariaDB,

00:36:20.160 --> 00:36:21.280
<v Speaker 0>my SQL

00:36:21.440 --> 00:36:22.720
<v Speaker 0>username.

00:36:23.680 --> 00:36:26.000
<v Speaker 0>Let's just copy this so we're not

00:36:31.835 --> 00:36:33.675
<v Speaker 0>I don't need to guess it. Okay.

00:36:34.555 --> 00:36:36.395
<v Speaker 0>So we have these now.

00:36:37.035 --> 00:36:39.790
<v Speaker 0>This also means that I can just consume

00:36:39.790 --> 00:36:41.710
<v Speaker 0>this in ENV here. Even though it's got

00:36:41.710 --> 00:36:43.710
<v Speaker 0>loads of stuff in it, the only best

00:36:43.710 --> 00:36:45.150
<v Speaker 0>I care about are

00:36:47.309 --> 00:36:48.990
<v Speaker 0>another thing we need is just that one

00:36:48.990 --> 00:36:49.950
<v Speaker 0>here. There's no point.

00:36:51.385 --> 00:36:52.665
<v Speaker 0>No. I don't think there's much point in

00:36:52.665 --> 00:36:53.705
<v Speaker 0>putting that in the dot e n b

00:36:53.705 --> 00:36:55.545
<v Speaker 0>because it's not consumed anywhere else.

00:36:57.065 --> 00:36:58.585
<v Speaker 0>And in fact, we could just split that

00:36:58.585 --> 00:37:00.825
<v Speaker 0>out so we're not having that we're not

00:37:00.825 --> 00:37:03.305
<v Speaker 0>loading on everything. So let's just do dot

00:37:03.305 --> 00:37:04.905
<v Speaker 0>e n b dot MariaDB.

00:37:07.200 --> 00:37:08.320
<v Speaker 0>That there.

00:37:08.640 --> 00:37:09.120
<v Speaker 0>And

00:37:09.760 --> 00:37:11.680
<v Speaker 0>we'll do dot MariaDB.

00:37:12.640 --> 00:37:14.480
<v Speaker 0>And then we can consume this file and

00:37:14.480 --> 00:37:16.160
<v Speaker 0>the FDM one as well.

00:37:17.440 --> 00:37:18.240
<v Speaker 1>Yep.

00:37:18.640 --> 00:37:20.480
<v Speaker 1>And then there's a third option, isn't there,

00:37:20.480 --> 00:37:22.000
<v Speaker 1>that Docker

00:37:21.474 --> 00:37:24.035
<v Speaker 1>compose will pick up that dot ENV file.

00:37:25.875 --> 00:37:27.795
<v Speaker 1>And you can use those variables in this

00:37:27.795 --> 00:37:28.915
<v Speaker 1>config file.

00:37:31.714 --> 00:37:33.714
<v Speaker 0>Oh, I wasn't aware that Docker compose would

00:37:33.714 --> 00:37:35.714
<v Speaker 0>parse a dot ENV, but you may be

00:37:35.714 --> 00:37:37.900
<v Speaker 0>right. It does. So if you for instance,

00:37:37.900 --> 00:37:39.420
<v Speaker 1>you could have it in environment. You could

00:37:39.420 --> 00:37:41.340
<v Speaker 1>have mys MySQL username

00:37:42.140 --> 00:37:43.980
<v Speaker 1>colon and then dollar

00:37:44.140 --> 00:37:45.820
<v Speaker 1>what what is in there

00:37:46.220 --> 00:37:47.820
<v Speaker 1>what the secret is in the dot e

00:37:47.740 --> 00:37:48.620
<v Speaker 1>v file.

00:37:50.505 --> 00:37:51.225
<v Speaker 0>Okay.

00:37:52.665 --> 00:37:54.345
<v Speaker 0>Cool. That's good for now.

00:37:55.145 --> 00:37:57.225
<v Speaker 0>So you can keep coming to chat.

00:38:00.984 --> 00:38:02.744
<v Speaker 1>Alex says Yeah. That's what that's what I

00:38:02.744 --> 00:38:05.730
<v Speaker 0>was supposed to do. Good good comment. So

00:38:07.170 --> 00:38:09.170
<v Speaker 0>I'm gonna remove these ones

00:38:10.690 --> 00:38:11.490
<v Speaker 0>there

00:38:11.970 --> 00:38:13.250
<v Speaker 0>and there,

00:38:13.410 --> 00:38:16.290
<v Speaker 0>and we're gonna change our configuration to use

00:38:16.290 --> 00:38:18.130
<v Speaker 0>the MySQL one. So where did you see

00:38:18.130 --> 00:38:19.410
<v Speaker 0>that there was config database?

00:38:20.785 --> 00:38:21.505
<v Speaker 0>Awesome.

00:38:22.865 --> 00:38:24.865
<v Speaker 0>And if I say There we go. So

00:38:24.865 --> 00:38:26.945
<v Speaker 0>I'm okay with that one being the same,

00:38:26.945 --> 00:38:28.705
<v Speaker 0>but we want to reuse.

00:38:30.465 --> 00:38:31.025
<v Speaker 0>Let's go.

00:38:33.200 --> 00:38:33.440
<v Speaker 0>Or

00:38:37.839 --> 00:38:38.800
<v Speaker 0>Yeah. Great.

00:38:39.760 --> 00:38:40.480
<v Speaker 0>Okay.

00:38:42.240 --> 00:38:43.680
<v Speaker 0>So MySQL,

00:38:43.680 --> 00:38:45.839
<v Speaker 0>that's user isn't

00:38:48.455 --> 00:38:50.055
<v Speaker 0>when I have to check, that's, like, 14

00:38:50.055 --> 00:38:53.175
<v Speaker 0>times. Okay. MySQL database user password.

00:38:56.055 --> 00:38:59.255
<v Speaker 0>User password database. User password database.

00:38:59.655 --> 00:39:01.390
<v Speaker 0>You Then do these ones because these are

00:39:01.390 --> 00:39:02.030
<v Speaker 0>unique.

00:39:02.430 --> 00:39:03.710
<v Speaker 0>Okay. I think we're good.

00:39:05.310 --> 00:39:06.590
<v Speaker 0>Which

00:39:08.430 --> 00:39:09.070
<v Speaker 0>means

00:39:09.390 --> 00:39:11.790
<v Speaker 0>we got DB connection, DB port. We've got

00:39:11.790 --> 00:39:13.310
<v Speaker 0>a reusable one here.

00:39:13.790 --> 00:39:15.630
<v Speaker 0>Now we can confirm all of this work

00:39:16.185 --> 00:39:18.025
<v Speaker 0>by spending all of that down.

00:39:18.505 --> 00:39:20.185
<v Speaker 0>We can do a Docker compose down dash

00:39:20.185 --> 00:39:20.745
<v Speaker 0>b.

00:39:21.145 --> 00:39:22.745
<v Speaker 0>What we would expect to see when we

00:39:22.745 --> 00:39:25.305
<v Speaker 0>do an up now is that MariaDB should

00:39:25.305 --> 00:39:27.785
<v Speaker 0>still be happy because it's consuming the configuration

00:39:27.785 --> 00:39:29.145
<v Speaker 0>from enb. MariaDB.

00:39:29.700 --> 00:39:32.339
<v Speaker 0>And our Laravel application, when we run any

00:39:32.339 --> 00:39:34.339
<v Speaker 0>sort of migration, should be happy too because

00:39:34.339 --> 00:39:35.780
<v Speaker 0>it's consuming the same setup.

00:39:52.675 --> 00:39:54.915
<v Speaker 0>We could change the interval. What's happening here

00:39:54.915 --> 00:39:57.155
<v Speaker 0>and why the MariaDB has taken

00:39:57.930 --> 00:39:59.770
<v Speaker 0>five to ten seconds or however long that

00:39:59.770 --> 00:40:00.570
<v Speaker 0>is is

00:40:00.890 --> 00:40:02.330
<v Speaker 0>and our health check

00:40:02.490 --> 00:40:03.290
<v Speaker 0>here.

00:40:06.970 --> 00:40:09.290
<v Speaker 0>We don't override the interval or how many

00:40:09.290 --> 00:40:10.890
<v Speaker 0>intervals we need for it to be considered

00:40:10.890 --> 00:40:13.405
<v Speaker 0>healthy, etcetera. So we could speed that up

00:40:13.405 --> 00:40:15.165
<v Speaker 0>by just changing that. But I'm I'm quite

00:40:15.165 --> 00:40:17.885
<v Speaker 0>happy with it's it's not taking too long.

00:40:18.765 --> 00:40:20.285
<v Speaker 0>Now if we run a PS, we can

00:40:20.285 --> 00:40:22.365
<v Speaker 0>see our health check now reports this as

00:40:22.365 --> 00:40:23.085
<v Speaker 0>healthy.

00:40:23.405 --> 00:40:25.405
<v Speaker 0>We have our NGINX healthy, and we have

00:40:25.405 --> 00:40:26.445
<v Speaker 0>our FPN

00:40:26.444 --> 00:40:28.220
<v Speaker 0>what we have up. Sorry.

00:40:28.619 --> 00:40:30.460
<v Speaker 0>What you wanted us to do was to

00:40:30.460 --> 00:40:31.180
<v Speaker 0>confirm.

00:40:33.020 --> 00:40:36.140
<v Speaker 0>That's that's

00:40:36.140 --> 00:40:39.099
<v Speaker 0>good. I'm happy with that. NGINX responding, but

00:40:39.099 --> 00:40:41.420
<v Speaker 0>we haven't actually given it anything to serve

00:40:41.420 --> 00:40:41.900
<v Speaker 0>yet.

00:40:42.255 --> 00:40:43.454
<v Speaker 0>Yeah. And

00:40:44.255 --> 00:40:45.214
<v Speaker 0>okay.

00:40:45.214 --> 00:40:45.855
<v Speaker 0>So

00:40:47.694 --> 00:40:50.015
<v Speaker 0>now we have another comment from Alex.

00:40:51.295 --> 00:40:53.134
<v Speaker 0>Four more comments, Alex, and we're just gonna

00:40:53.134 --> 00:40:55.130
<v Speaker 0>have you join the session. So

00:40:55.770 --> 00:40:56.570
<v Speaker 0>doing

00:40:56.570 --> 00:40:58.490
<v Speaker 0>this obviously makes it harder to change post

00:40:58.490 --> 00:40:59.610
<v Speaker 0>queries in the future.

00:41:00.010 --> 00:41:02.250
<v Speaker 0>I would take config changes, but that's fine

00:41:02.250 --> 00:41:03.530
<v Speaker 0>if you know what you're going to use.

00:41:03.530 --> 00:41:05.770
<v Speaker 0>No one actually changes database engines.

00:41:06.650 --> 00:41:08.010
<v Speaker 0>Okay. I'll leave that up. We can talk

00:41:08.010 --> 00:41:09.835
<v Speaker 0>about that for a little bit if you

00:41:09.835 --> 00:41:11.915
<v Speaker 0>want. Any thoughts on that, Kevin?

00:41:13.515 --> 00:41:15.355
<v Speaker 1>I have changed database engine.

00:41:16.075 --> 00:41:18.715
<v Speaker 1>I had a CTO say, good news. We've

00:41:18.715 --> 00:41:21.515
<v Speaker 1>we've decided to move from Oracle to MongoDB

00:41:21.515 --> 00:41:22.075
<v Speaker 1>once.

00:41:23.660 --> 00:41:24.940
<v Speaker 1>So that's a that's a good sign not

00:41:24.940 --> 00:41:26.380
<v Speaker 0>be a trivial change either.

00:41:27.180 --> 00:41:28.380
<v Speaker 1>It's gonna save us a lot of money

00:41:28.380 --> 00:41:31.180
<v Speaker 1>there, is the sale. Yeah. Licensing is a

00:41:31.180 --> 00:41:31.980
<v Speaker 1>lot better.

00:41:32.300 --> 00:41:32.940
<v Speaker 0>Yeah.

00:41:35.180 --> 00:41:36.540
<v Speaker 1>I feel like we're we're changing things in

00:41:36.540 --> 00:41:37.020
<v Speaker 1>lot of places.

00:41:38.765 --> 00:41:40.765
<v Speaker 1>So I guess looks like Laravel has that

00:41:40.765 --> 00:41:42.925
<v Speaker 1>two layers of environment variables,

00:41:43.565 --> 00:41:45.565
<v Speaker 1>and then that config file is mapping the

00:41:45.565 --> 00:41:47.325
<v Speaker 1>how you're using the environment variables to the

00:41:47.325 --> 00:41:48.365
<v Speaker 1>real config.

00:41:49.165 --> 00:41:51.325
<v Speaker 1>And we've another layer of indirection going in

00:41:51.325 --> 00:41:52.960
<v Speaker 1>the Docker compose. So you can probably rip

00:41:52.960 --> 00:41:54.400
<v Speaker 1>it all out and make it very simple,

00:41:54.400 --> 00:41:55.120
<v Speaker 1>couldn't you?

00:41:55.600 --> 00:41:57.200
<v Speaker 1>You you probably have in the end file

00:41:57.200 --> 00:41:58.000
<v Speaker 1>my

00:42:00.000 --> 00:42:01.680
<v Speaker 1>my database password.

00:42:02.080 --> 00:42:04.080
<v Speaker 1>And what pretty much actually simplify

00:42:04.080 --> 00:42:05.520
<v Speaker 1>by using a DSM.

00:42:06.995 --> 00:42:09.715
<v Speaker 1>So another nice way of handling this kind

00:42:09.715 --> 00:42:11.315
<v Speaker 1>of thing is to make make it so

00:42:11.315 --> 00:42:12.355
<v Speaker 1>there's only one

00:42:12.755 --> 00:42:15.235
<v Speaker 1>config key for the database connection

00:42:15.235 --> 00:42:17.075
<v Speaker 1>by having a URL like

00:42:18.195 --> 00:42:20.515
<v Speaker 1>protocol for it. I've seen that for databases,

00:42:20.515 --> 00:42:20.915
<v Speaker 1>queues,

00:42:21.400 --> 00:42:22.360
<v Speaker 1>etcetera.

00:42:22.760 --> 00:42:25.560
<v Speaker 0>So am I correct in saying what you

00:42:25.560 --> 00:42:27.880
<v Speaker 0>and Alex are both worried about is

00:42:28.200 --> 00:42:29.880
<v Speaker 0>I modified

00:42:29.960 --> 00:42:31.960
<v Speaker 0>this file. Right? Yeah.

00:42:32.200 --> 00:42:34.360
<v Speaker 0>Okay. So let let's not change it. Which

00:42:34.360 --> 00:42:36.119
<v Speaker 1>is sounds like fine if you know what

00:42:36.119 --> 00:42:36.440
<v Speaker 1>you're doing.

00:42:37.215 --> 00:42:39.055
<v Speaker 0>Okay. So let's not change that file. Now

00:42:39.055 --> 00:42:40.575
<v Speaker 0>the only reason I changed that is because

00:42:40.575 --> 00:42:42.495
<v Speaker 0>enter dot e m v dot MariaDB,

00:42:42.815 --> 00:42:45.535
<v Speaker 0>we have these variables available to us. So

00:42:47.375 --> 00:42:50.415
<v Speaker 0>let's put this back to what Laravel expects

00:42:50.415 --> 00:42:50.815
<v Speaker 0>then,

00:42:52.000 --> 00:42:53.440
<v Speaker 0>and then we'll change it on the the

00:42:53.440 --> 00:42:55.599
<v Speaker 0>database side, which I guess is actually cleaner

00:42:55.599 --> 00:42:56.880
<v Speaker 0>because we're not

00:42:58.799 --> 00:43:00.720
<v Speaker 0>our cases are in a single location. So

00:43:00.720 --> 00:43:02.240
<v Speaker 0>what we can just do here is say

00:43:02.240 --> 00:43:03.839
<v Speaker 0>this is equal to

00:43:04.365 --> 00:43:05.725
<v Speaker 0>DB username,

00:43:07.725 --> 00:43:08.605
<v Speaker 0>password,

00:43:09.485 --> 00:43:10.845
<v Speaker 0>DB password,

00:43:11.485 --> 00:43:13.645
<v Speaker 0>and we can set my SQL database.

00:43:15.165 --> 00:43:16.365
<v Speaker 0>That DB database.

00:43:19.030 --> 00:43:20.310
<v Speaker 0>And that should still work.

00:43:20.789 --> 00:43:22.470
<v Speaker 0>We're not past that even on the Laravel

00:43:22.470 --> 00:43:24.069
<v Speaker 0>side. Yes. That's I think that's actually much

00:43:24.069 --> 00:43:25.910
<v Speaker 0>nicer. I think that's a good idea.

00:43:26.230 --> 00:43:28.549
<v Speaker 0>Let's

00:43:28.549 --> 00:43:29.430
<v Speaker 0>make sure it was not broken.

00:43:37.545 --> 00:43:38.905
<v Speaker 1>I can't see what it's doing.

00:43:41.785 --> 00:43:42.745
<v Speaker 1>Can't see me.

00:43:45.600 --> 00:43:47.760
<v Speaker 0>What? You can't see yourself?

00:43:48.480 --> 00:43:49.840
<v Speaker 1>When there's a comment up.

00:43:51.760 --> 00:43:53.200
<v Speaker 0>Oh, that's a shame.

00:43:53.760 --> 00:43:55.280
<v Speaker 0>Oh, no. There you go.

00:43:59.075 --> 00:44:00.595
<v Speaker 0>He's about to just try and pick up

00:44:00.595 --> 00:44:02.515
<v Speaker 1>above the comment. It looks like there's a

00:44:02.515 --> 00:44:05.795
<v Speaker 1>typo there, doesn't it? DB data database.

00:44:06.434 --> 00:44:07.474
<v Speaker 0>Yeah.

00:44:07.474 --> 00:44:08.675
<v Speaker 0>It's not the best name.

00:44:09.075 --> 00:44:11.635
<v Speaker 0>Alright. So we got Sorry.

00:44:12.275 --> 00:44:13.234
<v Speaker 1>Wrong in all the places.

00:44:14.730 --> 00:44:16.810
<v Speaker 0>Okay. So the my the database is still

00:44:16.810 --> 00:44:17.450
<v Speaker 0>happy,

00:44:17.610 --> 00:44:19.130
<v Speaker 0>and we could just confirm that we can

00:44:19.130 --> 00:44:20.810
<v Speaker 0>connect to that now. So let's do a

00:44:20.810 --> 00:44:22.250
<v Speaker 0>DC EXE.

00:44:22.410 --> 00:44:24.010
<v Speaker 0>I'm not gonna spend any more time on

00:44:24.010 --> 00:44:25.610
<v Speaker 0>this because I think that's been a while

00:44:25.610 --> 00:44:26.090
<v Speaker 0>now.

00:44:26.730 --> 00:44:28.410
<v Speaker 0>Go inside of our DB container.

00:44:30.855 --> 00:44:32.455
<v Speaker 0>Oh, yeah. You can't do dash IT on

00:44:32.455 --> 00:44:33.895
<v Speaker 0>top of ComposeExec.

00:44:34.375 --> 00:44:35.655
<v Speaker 0>We do it for you.

00:44:38.215 --> 00:44:40.375
<v Speaker 0>But we should be able to run MySQL

00:44:40.375 --> 00:44:42.695
<v Speaker 0>host one two seven

00:44:43.420 --> 00:44:46.300
<v Speaker 0>as user ping CRM password

00:44:46.300 --> 00:44:48.620
<v Speaker 0>and then the database ping CRM.

00:44:53.420 --> 00:44:54.780
<v Speaker 0>What did I get wrong there?

00:44:55.745 --> 00:44:58.385
<v Speaker 1>You've got database spelled wrong in some of

00:44:58.385 --> 00:44:59.185
<v Speaker 1>the places

00:45:01.105 --> 00:45:02.145
<v Speaker 1>in the

00:45:02.385 --> 00:45:03.265
<v Speaker 1>variable.

00:45:05.665 --> 00:45:07.185
<v Speaker 1>As long as it's only in that place,

00:45:07.185 --> 00:45:07.905
<v Speaker 1>it should work.

00:45:09.730 --> 00:45:11.330
<v Speaker 0>You're supposed to tell everything.

00:45:11.570 --> 00:45:13.810
<v Speaker 1>I did. I tried to, but

00:45:14.530 --> 00:45:15.730
<v Speaker 1>I said it wrong.

00:45:18.210 --> 00:45:19.250
<v Speaker 0>Okay.

00:45:19.410 --> 00:45:20.210
<v Speaker 0>One more time.

00:45:22.175 --> 00:45:24.495
<v Speaker 1>So that Python dot end stuff is from

00:45:24.495 --> 00:45:26.895
<v Speaker 1>Docker Compose trying to read the end file.

00:45:28.335 --> 00:45:29.535
<v Speaker 0>So yeah.

00:45:31.295 --> 00:45:33.535
<v Speaker 0>Docker report there's actually a weird thing, and

00:45:33.535 --> 00:45:35.500
<v Speaker 0>I can't remember the specifics of it it

00:45:35.500 --> 00:45:37.740
<v Speaker 0>because I tried to avoid the syntax anymore.

00:45:37.740 --> 00:45:39.900
<v Speaker 0>But to use the Docker Compose

00:45:39.900 --> 00:45:42.300
<v Speaker 0>one, I think you need the export.

00:45:42.860 --> 00:45:45.340
<v Speaker 0>It's a bit weird. We'll deal with that

00:45:45.340 --> 00:45:46.700
<v Speaker 0>if we have to. Let's see what happens.

00:45:47.595 --> 00:45:48.795
<v Speaker 1>As long as this works, we can move

00:45:48.795 --> 00:45:49.355
<v Speaker 1>on to the next

00:45:52.555 --> 00:45:54.795
<v Speaker 0>Alright. So let's just check we have what

00:45:54.795 --> 00:45:56.555
<v Speaker 0>we expect. So I I would expect to

00:45:56.555 --> 00:45:58.475
<v Speaker 0>see a bunch of these. Okay. That's not

00:45:58.475 --> 00:45:58.795
<v Speaker 0>work.

00:46:03.570 --> 00:46:05.570
<v Speaker 0>But that's our challenge then.

00:46:07.890 --> 00:46:10.290
<v Speaker 0>Let's see. Do we have our DB underscores?

00:46:10.770 --> 00:46:12.450
<v Speaker 0>No. Okay. So that is

00:46:13.810 --> 00:46:16.290
<v Speaker 0>that really annoying thing with Docker then. So

00:46:16.290 --> 00:46:17.810
<v Speaker 0>I probably

00:46:20.605 --> 00:46:22.365
<v Speaker 0>let me show you what I mean.

00:46:22.924 --> 00:46:23.805
<v Speaker 0>Docker

00:46:24.125 --> 00:46:26.285
<v Speaker 0>is a bit annoying and that

00:46:26.525 --> 00:46:28.845
<v Speaker 0>I believe it expects this syntax.

00:46:32.250 --> 00:46:33.930
<v Speaker 0>Which I bet you is not gonna work

00:46:33.930 --> 00:46:36.170
<v Speaker 0>with the dot ENP and the the

00:46:37.930 --> 00:46:39.210
<v Speaker 0>Laravel sites.

00:46:40.330 --> 00:46:42.170
<v Speaker 0>Rather than me fighting with it, I think

00:46:42.170 --> 00:46:44.090
<v Speaker 0>we'll probably just stick it all in the

00:46:44.090 --> 00:46:46.615
<v Speaker 0>Docker compose file for now. You

00:46:46.615 --> 00:46:47.575
<v Speaker 1>haven't

00:46:48.935 --> 00:46:49.575
<v Speaker 1>got

00:46:51.975 --> 00:46:53.975
<v Speaker 1>you haven't got those variables defined in the

00:46:53.975 --> 00:46:55.335
<v Speaker 1>dot ENV, have you?

00:46:57.015 --> 00:46:58.535
<v Speaker 0>They're defined here. Right?

00:47:02.900 --> 00:47:04.340
<v Speaker 1>And where is that referenced?

00:47:05.220 --> 00:47:07.220
<v Speaker 0>In my Docker compose file

00:47:07.460 --> 00:47:08.260
<v Speaker 0>here.

00:47:10.660 --> 00:47:13.460
<v Speaker 1>That no. That won't work. So

00:47:13.125 --> 00:47:15.285
<v Speaker 1>the way it works is your n file

00:47:15.285 --> 00:47:16.085
<v Speaker 1>setting

00:47:16.645 --> 00:47:18.485
<v Speaker 1>go back to the compose file.

00:47:20.885 --> 00:47:23.285
<v Speaker 1>Your n file setting means those environment variables

00:47:23.285 --> 00:47:25.445
<v Speaker 1>will be defined in the container.

00:47:27.520 --> 00:47:30.160
<v Speaker 1>So I would expect the DB one.

00:47:32.480 --> 00:47:33.200
<v Speaker 1>The

00:47:33.440 --> 00:47:36.480
<v Speaker 1>in in your environment stanza, you're expanding variables.

00:47:36.480 --> 00:47:39.360
<v Speaker 1>Those variables would come from dot env only.

00:47:40.240 --> 00:47:41.200
<v Speaker 0>Yeah. It works now.

00:47:44.615 --> 00:47:47.255
<v Speaker 0>Yeah. Okay. That's all working. That won't work

00:47:47.255 --> 00:47:48.775
<v Speaker 1>is what I'm trying to say.

00:47:49.494 --> 00:47:52.375
<v Speaker 0>Right. Anyway, we could You can't use variables

00:47:52.375 --> 00:47:55.335
<v Speaker 1>in the in the Docker Compose YAML.

00:47:56.270 --> 00:47:58.430
<v Speaker 1>The end file is sourcing them into the

00:47:58.430 --> 00:48:00.110
<v Speaker 1>into the running container.

00:48:00.910 --> 00:48:03.470
<v Speaker 1>It's not making them available while passing the

00:48:03.470 --> 00:48:04.190
<v Speaker 1>YAML.

00:48:04.430 --> 00:48:05.950
<v Speaker 1>If you want them available while the YAML

00:48:05.950 --> 00:48:07.950
<v Speaker 1>is being expand being expanded,

00:48:07.950 --> 00:48:09.230
<v Speaker 1>you have to put them in dot env.

00:48:11.394 --> 00:48:12.115
<v Speaker 0>Gotcha.

00:48:12.835 --> 00:48:15.795
<v Speaker 0>Gotcha. Gotcha. Gotcha. Okay. But then also expects

00:48:15.795 --> 00:48:17.955
<v Speaker 0>the six port syntax rather than

00:48:18.595 --> 00:48:20.195
<v Speaker 1>I've got to be honest, I haven't used

00:48:20.355 --> 00:48:21.555
<v Speaker 1>in far much.

00:48:23.714 --> 00:48:24.515
<v Speaker 0>So

00:48:25.310 --> 00:48:27.230
<v Speaker 0>let's test the hypothesis.

00:48:31.550 --> 00:48:33.310
<v Speaker 0>Oh, no. The problem is I had

00:48:33.630 --> 00:48:36.030
<v Speaker 0>cool on. The expert probably wasn't I'm just

00:48:36.030 --> 00:48:38.175
<v Speaker 0>being really dafted there. I had the b

00:48:38.175 --> 00:48:40.255
<v Speaker 0>username. I had the YAML syntax. I would

00:48:40.255 --> 00:48:41.695
<v Speaker 0>say it's dot net detail.

00:48:42.655 --> 00:48:43.455
<v Speaker 1>Yeah.

00:48:44.015 --> 00:48:44.815
<v Speaker 1>I know.

00:48:45.855 --> 00:48:46.895
<v Speaker 0>Right. Okay.

00:48:50.310 --> 00:48:51.830
<v Speaker 0>You're saying that I put this here. We'll

00:48:51.830 --> 00:48:54.310
<v Speaker 0>get the expansion. Let's just remove this dot

00:48:54.310 --> 00:48:56.710
<v Speaker 0>one for now, and let's confirm that

00:48:57.270 --> 00:48:58.790
<v Speaker 0>these weird weird things.

00:49:02.945 --> 00:49:03.585
<v Speaker 1>Correct.

00:49:04.225 --> 00:49:05.345
<v Speaker 1>Did you just take it out of the

00:49:05.345 --> 00:49:06.385
<v Speaker 1>dot env again?

00:49:09.025 --> 00:49:09.745
<v Speaker 0>Alright.

00:49:11.505 --> 00:49:13.985
<v Speaker 0>Thought you said apart this one automatically. No?

00:49:13.985 --> 00:49:15.905
<v Speaker 1>Yeah. Without you putting in file in. But

00:49:15.905 --> 00:49:17.905
<v Speaker 1>did you delete are those variables defined in

00:49:17.905 --> 00:49:19.880
<v Speaker 1>dot env? Yeah. They are.

00:49:20.840 --> 00:49:22.760
<v Speaker 0>Okay. I've moved them I've them all to

00:49:22.760 --> 00:49:23.960
<v Speaker 0>dot in. Let's just

00:49:24.760 --> 00:49:26.360
<v Speaker 0>if it's something right.

00:49:30.760 --> 00:49:31.880
<v Speaker 0>Oh, that should be

00:49:32.905 --> 00:49:33.625
<v Speaker 0>Okay.

00:49:34.665 --> 00:49:37.625
<v Speaker 0>Really gonna change that interval now. So

00:49:40.345 --> 00:49:41.145
<v Speaker 0>interval.

00:49:41.305 --> 00:49:42.025
<v Speaker 0>One sec.

00:49:46.890 --> 00:49:47.770
<v Speaker 1>Interval.

00:49:49.609 --> 00:49:51.050
<v Speaker 0>That's not last week. Okay.

00:49:56.250 --> 00:49:57.210
<v Speaker 0>So

00:49:57.210 --> 00:49:59.049
<v Speaker 0>what we just wanna confirm here then before

00:49:59.049 --> 00:50:01.049
<v Speaker 0>we actually do something a bit more interesting

00:50:01.049 --> 00:50:03.445
<v Speaker 0>is those environment variables are set, and I

00:50:03.445 --> 00:50:05.445
<v Speaker 0>can log in to my sql slash berated

00:50:05.445 --> 00:50:06.005
<v Speaker 0>b.

00:50:13.365 --> 00:50:14.165
<v Speaker 0>Okay.

00:50:14.520 --> 00:50:15.480
<v Speaker 0>That works.

00:50:15.880 --> 00:50:18.040
<v Speaker 0>So I can do one two seven.

00:50:19.480 --> 00:50:20.600
<v Speaker 0>Ping CRM.

00:50:20.600 --> 00:50:21.320
<v Speaker 0>Ping CRM.

00:50:21.640 --> 00:50:22.120
<v Speaker 0>K.

00:50:25.560 --> 00:50:28.440
<v Speaker 0>Alright. Next. I think it protected that password

00:50:28.440 --> 00:50:29.560
<v Speaker 1>even though it's ping CRM.

00:50:31.855 --> 00:50:32.734
<v Speaker 0>Okay.

00:50:34.494 --> 00:50:35.855
<v Speaker 0>So something

00:50:35.855 --> 00:50:36.575
<v Speaker 0>that

00:50:36.894 --> 00:50:39.295
<v Speaker 0>we didn't touch on last week is what

00:50:39.295 --> 00:50:42.174
<v Speaker 0>is our okay. We haven't configured FPM.

00:50:46.960 --> 00:50:49.599
<v Speaker 0>So let's go inside of our FPM

00:50:49.599 --> 00:50:50.640
<v Speaker 0>container.

00:50:51.040 --> 00:50:52.640
<v Speaker 0>They call it Laravel. There

00:50:53.200 --> 00:50:53.520
<v Speaker 0>we go.

00:50:59.295 --> 00:51:00.655
<v Speaker 0>Where does that live?

00:51:03.935 --> 00:51:04.655
<v Speaker 1>Is it

00:51:05.055 --> 00:51:06.655
<v Speaker 1>user of our HTML or something like that?

00:51:08.510 --> 00:51:09.950
<v Speaker 0>Docker Docker file?

00:51:13.710 --> 00:51:16.030
<v Speaker 0>Because we're mapping our code to slash code,

00:51:16.030 --> 00:51:18.270
<v Speaker 0>and that location is not correct. So let's

00:51:18.270 --> 00:51:19.390
<v Speaker 0>just

00:51:27.035 --> 00:51:28.075
<v Speaker 0>Yeah.

00:51:28.075 --> 00:51:28.875
<v Speaker 0>So the FPR.

00:51:39.670 --> 00:51:41.270
<v Speaker 1>What's the Apache stuff you're doing?

00:51:42.230 --> 00:51:43.830
<v Speaker 0>Let's just look it up from last week.

00:51:43.830 --> 00:51:45.270
<v Speaker 0>Okay.

00:51:45.270 --> 00:51:46.310
<v Speaker 0>Slim.

00:51:47.750 --> 00:51:49.110
<v Speaker 0>Let me modify it here.

00:51:52.184 --> 00:51:54.185
<v Speaker 0>For our w w h t m l.

00:51:55.305 --> 00:51:57.305
<v Speaker 0>Make sure we could have guessed that. Nope.

00:52:05.810 --> 00:52:06.690
<v Speaker 0>Okay.

00:52:06.850 --> 00:52:10.290
<v Speaker 0>Slash prop slash one cat command line.

00:52:14.770 --> 00:52:19.170
<v Speaker 0>So we use catlocaletcppipm.com.

00:52:19.485 --> 00:52:21.165
<v Speaker 0>That's a really cool hack, actually.

00:52:21.805 --> 00:52:23.725
<v Speaker 0>Whenever you're in a container, slash prog slash

00:52:23.725 --> 00:52:26.205
<v Speaker 0>one is always the running or primary process.

00:52:26.525 --> 00:52:27.965
<v Speaker 0>And if you just tap the command line

00:52:27.965 --> 00:52:29.405
<v Speaker 0>fail, you can see what the entry point

00:52:29.405 --> 00:52:29.965
<v Speaker 0>was.

00:52:30.525 --> 00:52:32.365
<v Speaker 0>Save my bacon a few times now.

00:52:34.430 --> 00:52:37.150
<v Speaker 0>So that is our default FPM configuration,

00:52:37.150 --> 00:52:38.910
<v Speaker 0>and we're just looking for

00:52:47.485 --> 00:52:48.765
<v Speaker 1>What are you looking for?

00:52:49.405 --> 00:52:52.685
<v Speaker 0>Just a rip, which currently is in

00:52:56.045 --> 00:52:58.285
<v Speaker 0>maybe it's in this dot d directory.

00:53:00.000 --> 00:53:01.520
<v Speaker 1>Are you trying to change the config to

00:53:01.520 --> 00:53:03.440
<v Speaker 1>point to slash code rather than

00:53:05.040 --> 00:53:07.200
<v Speaker 0>I just wanna know how that is.

00:53:09.760 --> 00:53:10.480
<v Speaker 0>So,

00:53:10.560 --> 00:53:12.160
<v Speaker 0>yeah, so I can get the directory.

00:53:13.265 --> 00:53:14.945
<v Speaker 1>So I'll tell you so I just read

00:53:14.945 --> 00:53:15.985
<v Speaker 1>the read me and put it in the

00:53:15.985 --> 00:53:17.425
<v Speaker 1>place they tell me to and try not

00:53:17.425 --> 00:53:19.025
<v Speaker 1>to look at how any of it works.

00:53:20.305 --> 00:53:21.345
<v Speaker 0>There's a fun in that.

00:53:24.480 --> 00:53:26.400
<v Speaker 0>We've got a whole bunch of different things

00:53:26.400 --> 00:53:27.120
<v Speaker 0>here.

00:53:27.680 --> 00:53:29.920
<v Speaker 0>Let's do www.com.

00:53:31.119 --> 00:53:33.600
<v Speaker 0>You can see some environment variables being set.

00:53:33.600 --> 00:53:34.720
<v Speaker 0>You can see

00:53:36.880 --> 00:53:38.800
<v Speaker 0>share route is not set. No. That doesn't

00:53:38.800 --> 00:53:40.640
<v Speaker 0>mean it's the web route

00:53:40.935 --> 00:53:42.215
<v Speaker 0>or the whatever

00:53:42.215 --> 00:53:43.255
<v Speaker 0>they call it.

00:53:44.535 --> 00:53:45.975
<v Speaker 0>Let's see if I can grab this.

00:53:56.470 --> 00:53:59.830
<v Speaker 1>What I'm lost what you're trying to do.

00:54:00.950 --> 00:54:02.550
<v Speaker 0>I want to know where it expects the

00:54:02.550 --> 00:54:04.150
<v Speaker 0>PHP files to live.

00:54:05.589 --> 00:54:08.070
<v Speaker 1>We saw that as var w w HTML.

00:54:08.550 --> 00:54:10.664
<v Speaker 0>But But that directory doesn't exist, which made

00:54:10.664 --> 00:54:11.945
<v Speaker 0>me think it was lying.

00:54:12.184 --> 00:54:13.065
<v Speaker 1>Isn't

00:54:13.065 --> 00:54:14.184
<v Speaker 1>it just because you have to mount it

00:54:14.184 --> 00:54:14.744
<v Speaker 1>in

00:54:17.305 --> 00:54:18.825
<v Speaker 1>or copy it in?

00:54:22.585 --> 00:54:24.105
<v Speaker 0>Hang on. Let's just go to Dockerfile.

00:54:28.150 --> 00:54:29.829
<v Speaker 0>Okay.

00:54:37.985 --> 00:54:40.065
<v Speaker 0>I couldn't grab an FPM one. That was

00:54:40.065 --> 00:54:40.865
<v Speaker 0>unfortunate.

00:54:40.865 --> 00:54:41.985
<v Speaker 0>FPM.

00:54:45.185 --> 00:54:48.305
<v Speaker 0>Worked there. Yeah. It's part of the. Okay.

00:54:48.305 --> 00:54:49.585
<v Speaker 0>It just doesn't exist. So

00:54:52.710 --> 00:54:54.870
<v Speaker 0>we can mount our code. We'll just leverage

00:54:54.870 --> 00:54:55.510
<v Speaker 0>that.

00:54:56.390 --> 00:54:57.030
<v Speaker 0>So

00:54:57.190 --> 00:54:59.270
<v Speaker 0>we will change the working directory.

00:54:59.510 --> 00:55:00.230
<v Speaker 0>Now

00:55:00.950 --> 00:55:03.110
<v Speaker 0>we need to serve

00:55:03.110 --> 00:55:05.165
<v Speaker 0>public h two. So I see the same

00:55:05.165 --> 00:55:07.005
<v Speaker 0>as what we did last week, but we

00:55:07.005 --> 00:55:09.805
<v Speaker 0>need to modify our index configuration.

00:55:13.645 --> 00:55:15.005
<v Speaker 0>Try to get lost.

00:55:15.245 --> 00:55:16.765
<v Speaker 1>Yes. It's still comfy.

00:55:17.885 --> 00:55:20.125
<v Speaker 0>And this will just need to match public

00:55:20.609 --> 00:55:21.410
<v Speaker 0>pixel.

00:55:22.049 --> 00:55:22.770
<v Speaker 0>Right.

00:55:24.210 --> 00:55:26.690
<v Speaker 0>We will recreate what needs to be created.

00:55:28.849 --> 00:55:31.089
<v Speaker 1>Got some interesting questions in the chat

00:55:31.650 --> 00:55:34.095
<v Speaker 1>about how do you maybe we'll come on

00:55:34.095 --> 00:55:36.655
<v Speaker 1>to this. How do you run typical sort

00:55:36.655 --> 00:55:38.095
<v Speaker 1>of development commands

00:55:38.575 --> 00:55:39.935
<v Speaker 1>in a dev environment?

00:55:40.895 --> 00:55:43.455
<v Speaker 1>I think that. We'll definitely We're right there.

00:55:46.940 --> 00:55:47.580
<v Speaker 0>I

00:55:48.779 --> 00:55:50.380
<v Speaker 0>use a pattern called

00:55:50.539 --> 00:55:52.299
<v Speaker 0>deshell, so I'll show you what that looks

00:55:52.299 --> 00:55:52.460
<v Speaker 0>like.

00:56:01.845 --> 00:56:03.125
<v Speaker 0>Okay. Good.

00:56:04.325 --> 00:56:06.805
<v Speaker 0>I mean, it's it's failing, but that's okay

00:56:06.805 --> 00:56:09.205
<v Speaker 0>because we haven't followed the installation instructions,

00:56:09.365 --> 00:56:11.125
<v Speaker 0>which means we do now have commands that

00:56:11.125 --> 00:56:12.485
<v Speaker 0>we need to run as part of the

00:56:12.485 --> 00:56:14.405
<v Speaker 0>installation, which means we need to develop an

00:56:14.405 --> 00:56:15.560
<v Speaker 0>environment. Now

00:56:17.160 --> 00:56:20.520
<v Speaker 0>whenever you type PHP or Composer here,

00:56:20.680 --> 00:56:23.160
<v Speaker 0>to me, that's a a warning sign. We

00:56:23.160 --> 00:56:25.000
<v Speaker 0>wanna avoid that as much as possible because

00:56:25.000 --> 00:56:27.160
<v Speaker 0>we're running those commands in

00:56:27.565 --> 00:56:29.965
<v Speaker 0>an environment that does not have parity with

00:56:29.965 --> 00:56:30.685
<v Speaker 0>production.

00:56:32.125 --> 00:56:34.285
<v Speaker 0>But how do we change that?

00:56:38.445 --> 00:56:40.685
<v Speaker 0>What I normally do is

00:56:42.099 --> 00:56:44.020
<v Speaker 0>build a development workflow.

00:56:45.300 --> 00:56:48.099
<v Speaker 0>It looks like so. So my entry point

00:56:48.099 --> 00:56:50.660
<v Speaker 0>is now going to be bash.

00:56:51.859 --> 00:56:53.700
<v Speaker 0>Okay. We'll do this to our make target.

00:56:53.700 --> 00:56:54.420
<v Speaker 0>A little bit later.

00:56:56.405 --> 00:56:58.165
<v Speaker 0>There's no make fail in this project.

00:57:00.005 --> 00:57:02.085
<v Speaker 0>That's where projects kinda make fail.

00:57:02.565 --> 00:57:04.485
<v Speaker 0>I generally add a deshell target, and the

00:57:04.485 --> 00:57:05.765
<v Speaker 0>goal being I wanna be able to say

00:57:05.765 --> 00:57:08.405
<v Speaker 0>make deshell in a terminal and get

00:57:09.090 --> 00:57:12.130
<v Speaker 0>interactive development environment that I can work with,

00:57:12.290 --> 00:57:14.290
<v Speaker 0>which means what we're going to do is

00:57:14.290 --> 00:57:15.890
<v Speaker 0>do Docker

00:57:16.690 --> 00:57:17.650
<v Speaker 0>Docker

00:57:17.730 --> 00:57:18.610
<v Speaker 0>compose

00:57:19.250 --> 00:57:20.130
<v Speaker 0>run

00:57:20.610 --> 00:57:23.095
<v Speaker 0>service ports. And I'll explain what these flags

00:57:23.095 --> 00:57:24.215
<v Speaker 0>do in just a moment.

00:57:25.095 --> 00:57:27.175
<v Speaker 0>I just wanna keep adding those things.

00:57:29.255 --> 00:57:30.535
<v Speaker 0>It's really annoying.

00:57:31.735 --> 00:57:33.975
<v Speaker 0>Run service port slash slash r m.

00:57:35.130 --> 00:57:36.970
<v Speaker 0>PHP is the service that we want to

00:57:36.970 --> 00:57:37.530
<v Speaker 0>run.

00:57:37.770 --> 00:57:40.089
<v Speaker 0>I'm also going to override the entry point

00:57:40.089 --> 00:57:41.210
<v Speaker 0>to be batch.

00:57:41.450 --> 00:57:42.090
<v Speaker 1>Mhmm.

00:57:46.730 --> 00:57:48.410
<v Speaker 0>And don't think I need

00:57:49.369 --> 00:57:50.010
<v Speaker 0>IT.

00:57:51.555 --> 00:57:53.475
<v Speaker 0>I do not. Okay. So I don't know

00:57:53.475 --> 00:57:56.115
<v Speaker 1>what service points does, service ports.

00:57:56.595 --> 00:57:57.635
<v Speaker 0>Yes.

00:57:57.635 --> 00:57:58.195
<v Speaker 0>So

00:57:58.435 --> 00:58:00.755
<v Speaker 0>when I do a Docker Compose run,

00:58:00.915 --> 00:58:03.475
<v Speaker 0>which means I want to run an individual

00:58:03.475 --> 00:58:05.470
<v Speaker 0>service here. Mhmm.

00:58:06.110 --> 00:58:07.950
<v Speaker 0>It does not publish those ports.

00:58:09.310 --> 00:58:09.870
<v Speaker 0>Mhmm.

00:58:10.590 --> 00:58:12.750
<v Speaker 0>When I tell it to when I add

00:58:12.750 --> 00:58:14.350
<v Speaker 0>service ports, it will just make sure that

00:58:14.350 --> 00:58:16.510
<v Speaker 0>the ports are exposed. Now, actually, I'm not

00:58:16.510 --> 00:58:18.430
<v Speaker 0>exposing FPM locally, but I'm so I'm just

00:58:18.430 --> 00:58:19.870
<v Speaker 0>gonna keep the flag there because that's important

00:58:19.870 --> 00:58:22.335
<v Speaker 0>for most applications and may become important.

00:58:23.775 --> 00:58:25.375
<v Speaker 0>I override the entry point so it doesn't

00:58:25.375 --> 00:58:26.415
<v Speaker 0>run FPM.

00:58:26.415 --> 00:58:28.015
<v Speaker 0>So what that means now is when I

00:58:28.015 --> 00:58:29.375
<v Speaker 0>run make b shell

00:58:32.895 --> 00:58:34.270
<v Speaker 0>yeah. Make files are fun. So we need

00:58:34.270 --> 00:58:35.310
<v Speaker 0>a dot phony

00:58:35.390 --> 00:58:36.510
<v Speaker 0>b shell.

00:58:41.309 --> 00:58:42.829
<v Speaker 0>That's basics or tabs.

00:58:45.335 --> 00:58:47.095
<v Speaker 0>And there's no edit or oh, there is.

00:58:47.095 --> 00:58:48.295
<v Speaker 0>We've got it already. Okay.

00:58:49.015 --> 00:58:50.215
<v Speaker 0>Make file

00:58:50.535 --> 00:58:52.055
<v Speaker 0>and then style

00:58:52.055 --> 00:58:53.015
<v Speaker 0>tab

00:58:53.575 --> 00:58:55.494
<v Speaker 0>and then size for

00:58:56.214 --> 00:58:57.734
<v Speaker 0>we save the style.

00:58:59.255 --> 00:58:59.895
<v Speaker 1>I hate make.

00:59:01.600 --> 00:59:04.160
<v Speaker 0>It does have I really wish it doesn't

00:59:04.240 --> 00:59:06.400
<v Speaker 0>have that pain point of tabs and spaces,

00:59:06.400 --> 00:59:09.360
<v Speaker 0>but doesn't matter. So what happened here is

00:59:09.360 --> 00:59:11.119
<v Speaker 0>we ran PHP.

00:59:12.695 --> 00:59:15.655
<v Speaker 0>It started MariaDB because of this dependency.

00:59:15.655 --> 00:59:17.895
<v Speaker 0>It hasn't started in Genet, which I didn't

00:59:17.895 --> 00:59:19.575
<v Speaker 0>think would well, I said that it's fake

00:59:19.575 --> 00:59:21.655
<v Speaker 0>encounter, but it makes sense. So we'll fix

00:59:21.655 --> 00:59:22.535
<v Speaker 0>that in a minute.

00:59:23.095 --> 00:59:26.295
<v Speaker 0>We don't have anything running here, which means

00:59:31.320 --> 00:59:33.560
<v Speaker 0>which means I need to add one step

00:59:33.560 --> 00:59:34.120
<v Speaker 0>here

00:59:35.400 --> 00:59:37.320
<v Speaker 0>up NGINX background.

00:59:37.640 --> 00:59:39.800
<v Speaker 0>Just because we can't have a separate dependency,

00:59:39.800 --> 00:59:42.360
<v Speaker 0>so I can't start PHP

00:59:43.055 --> 00:59:44.974
<v Speaker 0>because NGINX depends on it. So we just

00:59:44.974 --> 00:59:46.974
<v Speaker 0>have to make that a bit special. Let's

00:59:46.974 --> 00:59:49.535
<v Speaker 0>run that again. NGINX is up. FTM is

00:59:49.535 --> 00:59:51.615
<v Speaker 0>up. Now if I run here,

00:59:52.974 --> 00:59:54.734
<v Speaker 0>it's gonna time out and fail.

00:59:54.815 --> 00:59:55.615
<v Speaker 0>Oh, it didn't.

00:59:58.240 --> 01:00:00.240
<v Speaker 0>Oh, because I still got it running.

01:00:05.280 --> 01:00:06.000
<v Speaker 0>Shut that down.

01:00:08.375 --> 01:00:10.454
<v Speaker 0>And they'll make these shell. So, like, in

01:00:10.454 --> 01:00:12.535
<v Speaker 0>a fresh environment with nothing running, I would

01:00:12.535 --> 01:00:14.694
<v Speaker 0>run this command. It starts engine x, starts

01:00:14.694 --> 01:00:16.615
<v Speaker 0>where you need to be, basically, an interactive

01:00:16.615 --> 01:00:17.415
<v Speaker 0>terminal.

01:00:17.415 --> 01:00:19.495
<v Speaker 0>I can have go here

01:00:20.535 --> 01:00:22.214
<v Speaker 0>by the

01:00:23.180 --> 01:00:23.900
<v Speaker 0>Starting

01:00:24.859 --> 01:00:27.260
<v Speaker 0>NGINX is starting because of the dependency.

01:00:31.020 --> 01:00:33.500
<v Speaker 0>Funny. Because you're doing compose Docker compose up

01:00:33.500 --> 01:00:35.020
<v Speaker 1>dash d NGINX before you

01:00:37.895 --> 01:00:38.615
<v Speaker 0>Yes.

01:00:39.734 --> 01:00:42.935
<v Speaker 0>Alright. That's that's that's good. Okay. Doesn't matter.

01:00:42.935 --> 01:00:43.575
<v Speaker 0>So

01:00:44.615 --> 01:00:46.295
<v Speaker 0>now we need now we have an environment

01:00:46.295 --> 01:00:48.455
<v Speaker 0>which is production like web files.

01:00:48.775 --> 01:00:50.455
<v Speaker 0>I'm not gonna have composer,

01:00:50.615 --> 01:00:52.455
<v Speaker 0>so we need to fix that. So this

01:00:52.455 --> 01:00:53.175
<v Speaker 1>isn't

01:00:53.680 --> 01:00:54.000
<v Speaker 1>the

01:00:56.800 --> 01:00:57.360
<v Speaker 1>is this the

01:00:58.800 --> 01:01:00.320
<v Speaker 1>have we run a new copy of that

01:01:00.320 --> 01:01:01.040
<v Speaker 1>service?

01:01:02.080 --> 01:01:03.920
<v Speaker 0>Yeah. There'll be two running right now. So

01:01:03.920 --> 01:01:06.160
<v Speaker 0>let's Two running. Jump out here, go to

01:01:06.160 --> 01:01:08.080
<v Speaker 0>my directory, PHP examples.

01:01:08.925 --> 01:01:10.845
<v Speaker 1>And we're relying on the fact that they

01:01:10.845 --> 01:01:12.925
<v Speaker 1>share a volume. Right?

01:01:14.925 --> 01:01:16.605
<v Speaker 0>But if I run v c p x

01:01:16.685 --> 01:01:17.085
<v Speaker 0>But

01:01:19.965 --> 01:01:22.285
<v Speaker 0>this is the actual service that was started

01:01:22.285 --> 01:01:23.805
<v Speaker 0>by the Internet's dependency.

01:01:25.619 --> 01:01:26.340
<v Speaker 1>Yeah.

01:01:26.740 --> 01:01:28.980
<v Speaker 0>And this is my run container.

01:01:30.099 --> 01:01:32.900
<v Speaker 0>They're both interacting. This is consider right now

01:01:32.900 --> 01:01:34.020
<v Speaker 0>is horizontally scaled.

01:01:36.865 --> 01:01:39.025
<v Speaker 0>We can still run our migration path and

01:01:39.025 --> 01:01:40.305
<v Speaker 0>asset compilations.

01:01:40.305 --> 01:01:42.625
<v Speaker 0>They're both using the same volume, and so

01:01:42.625 --> 01:01:45.025
<v Speaker 0>I don't foresee any problems right now. And

01:01:45.025 --> 01:01:47.665
<v Speaker 0>we could remove that this one here

01:01:48.625 --> 01:01:50.305
<v Speaker 0>by just having an exit zero in the

01:01:50.305 --> 01:01:52.859
<v Speaker 0>Docker compose file, But it's it's really not

01:01:52.859 --> 01:01:53.660
<v Speaker 0>that important.

01:01:54.619 --> 01:01:55.820
<v Speaker 1>Yeah. It makes sense.

01:01:56.140 --> 01:01:56.780
<v Speaker 1>So

01:01:57.980 --> 01:01:58.619
<v Speaker 1>yeah.

01:01:59.660 --> 01:02:01.579
<v Speaker 1>So we can do all the typical stuff

01:02:01.579 --> 01:02:02.220
<v Speaker 1>because

01:02:02.380 --> 01:02:03.740
<v Speaker 1>all the things you want to do are

01:02:03.740 --> 01:02:04.859
<v Speaker 1>either creating files

01:02:05.205 --> 01:02:07.605
<v Speaker 1>in the volume or probably doing stuff in

01:02:07.605 --> 01:02:08.405
<v Speaker 1>the database.

01:02:10.005 --> 01:02:10.565
<v Speaker 0>Oh,

01:02:10.805 --> 01:02:12.165
<v Speaker 0>yeah. Definitely. So

01:02:12.645 --> 01:02:14.085
<v Speaker 0>right now, we need to fix the composer

01:02:14.085 --> 01:02:15.365
<v Speaker 0>thing. Like, if I'm saying I don't want

01:02:15.365 --> 01:02:17.765
<v Speaker 0>to run composer install locally because maybe there's

01:02:17.765 --> 01:02:18.885
<v Speaker 0>dependencies on extensions

01:02:19.440 --> 01:02:21.440
<v Speaker 0>that which would fail locally, then I have

01:02:21.440 --> 01:02:23.200
<v Speaker 0>to do that inside of the container. And

01:02:23.200 --> 01:02:24.480
<v Speaker 0>right now, we don't even have access to

01:02:24.480 --> 01:02:26.880
<v Speaker 0>composer, so we need to fix that. And

01:02:26.880 --> 01:02:27.920
<v Speaker 0>the way that we do that is the

01:02:27.920 --> 01:02:29.280
<v Speaker 0>same as last week too, where we have

01:02:29.280 --> 01:02:30.560
<v Speaker 0>multi layer files.

01:02:30.960 --> 01:02:32.240
<v Speaker 0>So we're gonna say

01:02:33.174 --> 01:02:35.655
<v Speaker 0>PS code that is particularly right.

01:02:36.855 --> 01:02:38.295
<v Speaker 0>We'll call this our base.

01:02:38.694 --> 01:02:40.295
<v Speaker 0>Mhmm. We're not we're not gonna do anything

01:02:40.295 --> 01:02:43.095
<v Speaker 0>with. We're just removing the duplication of base

01:02:43.095 --> 01:02:44.694
<v Speaker 0>image. Then we have dev

01:02:45.450 --> 01:02:47.210
<v Speaker 0>where we add the tooling that we need.

01:02:47.210 --> 01:02:48.330
<v Speaker 0>So I can do

01:02:48.730 --> 01:02:50.570
<v Speaker 0>APK. I don't know where I'm doing nothing.

01:02:50.570 --> 01:02:52.730
<v Speaker 0>I can do an app update and app

01:02:52.730 --> 01:02:53.610
<v Speaker 0>install.

01:02:55.290 --> 01:02:57.050
<v Speaker 0>Let's just stick in them there.

01:02:59.145 --> 01:03:00.745
<v Speaker 0>Okay. And

01:03:01.385 --> 01:03:03.945
<v Speaker 0>we're also going to copy composer from the

01:03:03.945 --> 01:03:05.625
<v Speaker 0>official image. And

01:03:08.505 --> 01:03:10.105
<v Speaker 0>if we remember correctly,

01:03:10.105 --> 01:03:13.705
<v Speaker 0>last week, it is available under user.

01:03:14.390 --> 01:03:16.550
<v Speaker 0>Let's just try and compose our user.

01:03:16.870 --> 01:03:18.630
<v Speaker 0>May be local, but I can't remember.

01:03:19.750 --> 01:03:21.270
<v Speaker 0>We can come back out here

01:03:21.670 --> 01:03:24.230
<v Speaker 0>and instead of using this, we're gonna say

01:03:24.230 --> 01:03:25.830
<v Speaker 0>that we wish to build an image,

01:03:26.565 --> 01:03:28.724
<v Speaker 0>the context of the current directory, and we're

01:03:28.724 --> 01:03:30.484
<v Speaker 0>gonna target that dev layer that has all

01:03:30.484 --> 01:03:32.565
<v Speaker 0>of our wonderful tooling that we need.

01:03:33.445 --> 01:03:35.285
<v Speaker 0>Makes sense? Yeah.

01:03:35.605 --> 01:03:36.005
<v Speaker 0>K.

01:03:39.480 --> 01:03:42.520
<v Speaker 0>So now It's also gonna affect the running

01:03:42.680 --> 01:03:44.680
<v Speaker 1>FPM. Right? So we've we're making it even

01:03:44.680 --> 01:03:47.240
<v Speaker 1>more explicit that our our composed file is

01:03:47.240 --> 01:03:47.960
<v Speaker 1>for dev.

01:03:49.400 --> 01:03:51.960
<v Speaker 0>Oh, yeah. Totally. Yeah. Post files should never

01:03:51.960 --> 01:03:52.760
<v Speaker 0>be used in production.

01:03:54.505 --> 01:03:56.505
<v Speaker 0>Let's get to Docker Post files.

01:03:58.185 --> 01:03:59.465
<v Speaker 0>I mean, there are people out there who

01:03:59.465 --> 01:04:01.065
<v Speaker 0>say Docker Post can be used in production

01:04:01.065 --> 01:04:02.985
<v Speaker 0>with version three. And if you're happy with

01:04:02.985 --> 01:04:04.425
<v Speaker 0>that, by all means. But

01:04:04.905 --> 01:04:06.345
<v Speaker 0>Uh-huh. It's

01:04:06.345 --> 01:04:06.905
<v Speaker 0>not for me.

01:04:09.930 --> 01:04:12.010
<v Speaker 1>So this installation of app is gonna be

01:04:12.010 --> 01:04:13.530
<v Speaker 1>cached. Right? Because

01:04:13.850 --> 01:04:16.410
<v Speaker 1>we're pulling we're copying stuff from the composer

01:04:16.410 --> 01:04:18.730
<v Speaker 1>image, which is always gonna be cacheable.

01:04:19.210 --> 01:04:19.690
<v Speaker 1>And then we do

01:04:23.664 --> 01:04:25.265
<v Speaker 0>Okay. So let's go back into our d

01:04:25.265 --> 01:04:25.825
<v Speaker 0>shell.

01:04:27.825 --> 01:04:29.744
<v Speaker 0>We now have the ability to run Docker

01:04:29.744 --> 01:04:30.385
<v Speaker 0>Compose

01:04:30.704 --> 01:04:31.425
<v Speaker 0>install.

01:04:31.904 --> 01:04:33.744
<v Speaker 0>And now you can see the the the

01:04:33.744 --> 01:04:34.865
<v Speaker 0>problem,

01:04:34.865 --> 01:04:37.505
<v Speaker 0>right, is that my local environment magically seems

01:04:37.505 --> 01:04:39.265
<v Speaker 0>to have some extensions that are required

01:04:39.880 --> 01:04:40.520
<v Speaker 0>by

01:04:42.680 --> 01:04:46.040
<v Speaker 0>this application that aren't available in my production

01:04:46.040 --> 01:04:47.960
<v Speaker 0>environment, which is this container.

01:04:48.600 --> 01:04:50.600
<v Speaker 0>So we we need to fix that. So

01:04:50.600 --> 01:04:51.400
<v Speaker 0>we need

01:04:53.080 --> 01:04:54.280
<v Speaker 0>these two extensions.

01:04:54.935 --> 01:04:55.815
<v Speaker 0>And

01:04:55.975 --> 01:04:58.535
<v Speaker 0>the Dockerfile provides a whole bunch of different

01:04:58.855 --> 01:05:00.695
<v Speaker 0>helpers to do that. So

01:05:01.335 --> 01:05:02.775
<v Speaker 0>and we can do run.

01:05:03.895 --> 01:05:05.735
<v Speaker 0>And then we've got PHP

01:05:06.935 --> 01:05:08.055
<v Speaker 0>what's it called?

01:05:08.535 --> 01:05:09.494
<v Speaker 1>I'm just looking out.

01:05:10.359 --> 01:05:13.240
<v Speaker 0>Docker PHP extension install. There we go. Does

01:05:13.240 --> 01:05:14.440
<v Speaker 0>this help a script

01:05:14.760 --> 01:05:17.400
<v Speaker 0>where we can do EXT XF and EXT

01:05:17.400 --> 01:05:17.960
<v Speaker 0>GP?

01:05:18.599 --> 01:05:19.880
<v Speaker 1>You spelled XF wrong?

01:05:23.175 --> 01:05:23.815
<v Speaker 1>Mhmm.

01:05:24.775 --> 01:05:30.695
<v Speaker 1>That's

01:05:30.695 --> 01:05:31.655
<v Speaker 1>a lot of it, but I don't know

01:05:31.655 --> 01:05:33.015
<v Speaker 0>if it worked and didn't work.

01:05:35.350 --> 01:05:37.670
<v Speaker 1>Stop refreshing. I I don't think you need

01:05:37.670 --> 01:05:40.310
<v Speaker 0>the the access and GD.

01:05:40.869 --> 01:05:42.470
<v Speaker 0>There we go. And then we can copy

01:05:42.470 --> 01:05:45.750
<v Speaker 0>that command to our base image. So Docker,

01:05:45.750 --> 01:05:48.230
<v Speaker 0>p t, x k, install, GD,

01:06:07.790 --> 01:06:10.670
<v Speaker 0>That's a zlib or zlib c.

01:06:10.670 --> 01:06:11.310
<v Speaker 0>So

01:06:15.950 --> 01:06:17.309
<v Speaker 0>and does that help?

01:06:25.235 --> 01:06:26.995
<v Speaker 0>It's our dev package.

01:06:30.915 --> 01:06:32.355
<v Speaker 0>Let's work out this dependency.

01:06:42.880 --> 01:06:44.480
<v Speaker 0>Maybe I should just quickly Google it.

01:06:52.835 --> 01:06:55.795
<v Speaker 1>Zedlib g zedlib one g?

01:06:56.595 --> 01:06:58.755
<v Speaker 0>Yeah. That might be it. We'll try that.

01:06:58.755 --> 01:07:00.195
<v Speaker 0>And if not, we'll just look it up

01:07:00.195 --> 01:07:00.995
<v Speaker 0>very quickly.

01:07:01.315 --> 01:07:02.750
<v Speaker 1>That's what That's what Google says.

01:07:05.070 --> 01:07:05.710
<v Speaker 0>And

01:07:06.109 --> 01:07:08.510
<v Speaker 0>this interactive environment is is good for this

01:07:08.510 --> 01:07:10.430
<v Speaker 0>because we can test this works before we

01:07:10.430 --> 01:07:11.550
<v Speaker 0>rebuild the image.

01:07:13.230 --> 01:07:15.630
<v Speaker 0>Alright. Okay. So, like, we got past that.

01:07:15.630 --> 01:07:17.675
<v Speaker 0>So let's add that first. So our base

01:07:17.675 --> 01:07:19.995
<v Speaker 0>image now needs this app update

01:07:20.555 --> 01:07:22.235
<v Speaker 0>and app install

01:07:22.235 --> 01:07:23.035
<v Speaker 0>dev.

01:07:23.435 --> 01:07:25.355
<v Speaker 0>Oh, what was that? One g.

01:07:25.835 --> 01:07:27.435
<v Speaker 0>Yep. One g dev.

01:07:28.395 --> 01:07:30.715
<v Speaker 0>We also need some sort of PNG one.

01:07:30.715 --> 01:07:32.075
<v Speaker 0>So let's do the PNG.

01:07:35.240 --> 01:07:36.600
<v Speaker 0>It's a dev.

01:07:38.040 --> 01:07:39.640
<v Speaker 0>A PNG dev.

01:07:42.280 --> 01:07:44.840
<v Speaker 0>And now we're codifying everything that we need.

01:07:45.480 --> 01:07:46.280
<v Speaker 0>It's it's good.

01:07:48.875 --> 01:07:50.714
<v Speaker 0>More works on my machine nonsense.

01:08:03.420 --> 01:08:05.260
<v Speaker 1>So in terms of wanting

01:08:05.260 --> 01:08:05.900
<v Speaker 1>the

01:08:06.060 --> 01:08:07.660
<v Speaker 1>latest versions of things,

01:08:09.340 --> 01:08:10.460
<v Speaker 1>how do you how

01:08:11.180 --> 01:08:13.755
<v Speaker 1>because this is something I've wanted to ask

01:08:13.755 --> 01:08:15.915
<v Speaker 1>before, actually. When when you've got your app

01:08:15.915 --> 01:08:17.675
<v Speaker 1>update at the start,

01:08:18.475 --> 01:08:19.915
<v Speaker 1>that's gonna be cached. So

01:08:25.090 --> 01:08:25.490
<v Speaker 1>it's

01:08:25.970 --> 01:08:28.290
<v Speaker 1>every time I build the container, it's not

01:08:28.290 --> 01:08:29.890
<v Speaker 1>going to do apt update?

01:08:31.010 --> 01:08:32.850
<v Speaker 0>No. But this base image,

01:08:33.090 --> 01:08:35.810
<v Speaker 0>you know, our continuous integration system is is

01:08:35.810 --> 01:08:37.570
<v Speaker 0>gonna force a rebuild to this on a

01:08:37.570 --> 01:08:40.344
<v Speaker 0>regular cadence, either every twenty four hours or

01:08:40.344 --> 01:08:42.425
<v Speaker 0>maybe once a week depending on how frequently

01:08:42.425 --> 01:08:44.264
<v Speaker 0>your deploys are. You know, that cadence is

01:08:44.264 --> 01:08:45.624
<v Speaker 0>really coming down to each team.

01:08:46.024 --> 01:08:47.625
<v Speaker 0>But, yeah, the I mean, the the challenge

01:08:47.625 --> 01:08:49.385
<v Speaker 0>being is that if you have a base

01:08:49.385 --> 01:08:51.225
<v Speaker 0>layer like this and you never rebuild it,

01:08:51.225 --> 01:08:53.625
<v Speaker 0>then your dependencies, your security patches, all of

01:08:53.625 --> 01:08:55.920
<v Speaker 0>that become very dated very quickly. And then

01:08:55.920 --> 01:08:56.960
<v Speaker 0>you'd have to build that.

01:08:57.439 --> 01:08:59.040
<v Speaker 1>You'd have your tooling force to sort of

01:08:59.040 --> 01:09:01.040
<v Speaker 1>uncached build every so often.

01:09:01.760 --> 01:09:02.239
<v Speaker 0>Yeah.

01:09:02.720 --> 01:09:04.960
<v Speaker 0>Use cache builds during nine till five, and

01:09:04.960 --> 01:09:07.200
<v Speaker 0>then at 3AM every morning, have an uncached

01:09:07.200 --> 01:09:09.120
<v Speaker 0>build run to make sure you're always up

01:09:09.120 --> 01:09:09.439
<v Speaker 0>to date.

01:09:10.125 --> 01:09:10.844
<v Speaker 0>Right.

01:09:11.165 --> 01:09:12.205
<v Speaker 0>Okay. So

01:09:13.005 --> 01:09:14.524
<v Speaker 0>That's a good now.

01:09:15.165 --> 01:09:15.885
<v Speaker 0>Yeah.

01:09:16.444 --> 01:09:18.045
<v Speaker 0>So the reason I say nine to five

01:09:18.045 --> 01:09:20.045
<v Speaker 0>use cash bills is that, you know, if

01:09:20.045 --> 01:09:22.285
<v Speaker 0>you're shipping and building regularly during the day,

01:09:22.285 --> 01:09:24.365
<v Speaker 0>you don't want your developers sitting waiting any

01:09:24.365 --> 01:09:25.600
<v Speaker 0>amount of time that you don't have to.

01:09:25.600 --> 01:09:27.120
<v Speaker 0>And it depends how slow your builds are.

01:09:27.120 --> 01:09:29.120
<v Speaker 0>If your builds are under a few minutes,

01:09:29.120 --> 01:09:30.319
<v Speaker 0>never use cache.

01:09:30.640 --> 01:09:31.120
<v Speaker 0>Yeah.

01:09:32.640 --> 01:09:34.080
<v Speaker 0>Just make sure people are productive during the

01:09:34.080 --> 01:09:35.200
<v Speaker 0>day. You don't want them to set and

01:09:35.200 --> 01:09:37.440
<v Speaker 0>sort of tighten because of compilation step.

01:09:38.245 --> 01:09:38.885
<v Speaker 1>Yeah.

01:09:39.125 --> 01:09:40.725
<v Speaker 1>But we've got that safety net that if

01:09:40.725 --> 01:09:43.765
<v Speaker 1>there's a critical security vulnerability in Zedlib,

01:09:44.085 --> 01:09:46.245
<v Speaker 1>we're gonna get the fix at some point.

01:09:46.885 --> 01:09:47.765
<v Speaker 0>Exactly.

01:09:47.765 --> 01:09:49.765
<v Speaker 0>And the composer install hasn't failed with the

01:09:49.765 --> 01:09:52.085
<v Speaker 0>extensions. We now have a container and production

01:09:52.085 --> 01:09:54.069
<v Speaker 0>environment that has everything we need about this

01:09:54.069 --> 01:09:54.869
<v Speaker 0>application.

01:09:55.270 --> 01:09:55.989
<v Speaker 0>And

01:09:56.390 --> 01:09:58.550
<v Speaker 0>we can cache that composer step as well

01:09:58.550 --> 01:09:59.989
<v Speaker 0>as we we did

01:10:00.550 --> 01:10:03.750
<v Speaker 0>last week where we say, okay. We don't

01:10:03.750 --> 01:10:04.550
<v Speaker 0>modify

01:10:06.469 --> 01:10:09.025
<v Speaker 0>what's our build JSON that often. So we're

01:10:09.025 --> 01:10:11.504
<v Speaker 0>gonna copy that to our working directory.

01:10:11.905 --> 01:10:12.464
<v Speaker 1>Mhmm.

01:10:13.585 --> 01:10:15.824
<v Speaker 0>And we can put this but I'm just

01:10:15.824 --> 01:10:17.264
<v Speaker 0>moving these steps up because

01:10:17.505 --> 01:10:19.664
<v Speaker 0>even if this does change, we don't need

01:10:19.664 --> 01:10:21.585
<v Speaker 0>to reinstall these two dependencies.

01:10:21.585 --> 01:10:22.784
<v Speaker 0>So we use the cache there.

01:10:23.310 --> 01:10:25.389
<v Speaker 0>And we're doing a composer install,

01:10:27.310 --> 01:10:29.309
<v Speaker 0>and that becomes part of our build process.

01:10:29.389 --> 01:10:31.310
<v Speaker 0>That means if we do modify your composer

01:10:31.310 --> 01:10:33.070
<v Speaker 0>dot JSON, you just have to rebuild this

01:10:33.070 --> 01:10:35.229
<v Speaker 0>image to get the latest dependencies.

01:10:35.869 --> 01:10:36.270
<v Speaker 0>Okay.

01:10:41.615 --> 01:10:43.935
<v Speaker 1>But currently, we're mounting

01:10:45.855 --> 01:10:48.575
<v Speaker 1>of local vendor folder over the vendor folder

01:10:48.575 --> 01:10:49.455
<v Speaker 1>in the image anyway.

01:10:52.890 --> 01:10:54.330
<v Speaker 0>Yeah. There's a lot of that hoops you

01:10:54.330 --> 01:10:55.770
<v Speaker 0>would have to run around actually to take

01:10:55.770 --> 01:10:56.489
<v Speaker 0>that up.

01:10:58.330 --> 01:11:00.330
<v Speaker 1>Which I do because I'm like, you're using

01:11:00.330 --> 01:11:01.050
<v Speaker 1>a Mac.

01:11:02.010 --> 01:11:04.010
<v Speaker 1>And the less files mounted, the better. So

01:11:04.010 --> 01:11:06.410
<v Speaker 1>for some big projects, they end up just

01:11:06.410 --> 01:11:08.425
<v Speaker 1>mounting instead of mounting everything,

01:11:08.745 --> 01:11:11.304
<v Speaker 1>might mount the the app folder.

01:11:12.824 --> 01:11:13.864
<v Speaker 1>We'll

01:11:13.864 --> 01:11:15.785
<v Speaker 1>we'll we'll come back to that. Like, I

01:11:15.785 --> 01:11:17.545
<v Speaker 0>mean, we could spend at least

01:11:17.945 --> 01:11:20.985
<v Speaker 0>an hour just covering that, especially on a

01:11:20.985 --> 01:11:22.185
<v Speaker 0>Mac because it is very weird.

01:11:23.130 --> 01:11:24.330
<v Speaker 0>But let's not

01:11:24.810 --> 01:11:26.490
<v Speaker 0>we'll come back to that maybe next week

01:11:26.490 --> 01:11:27.690
<v Speaker 0>on our session.

01:11:28.090 --> 01:11:30.330
<v Speaker 0>Let's try and actually get this running. We're

01:11:30.330 --> 01:11:31.850
<v Speaker 0>at over ten minutes, and we haven't got

01:11:31.850 --> 01:11:34.330
<v Speaker 0>it running yet. So installation steps.

01:11:36.005 --> 01:11:39.525
<v Speaker 0>So let's expect us to run this generate

01:11:39.525 --> 01:11:40.245
<v Speaker 0>command.

01:11:40.325 --> 01:11:42.085
<v Speaker 0>So we're gonna qualify that in our make

01:11:42.085 --> 01:11:42.804
<v Speaker 0>file.

01:11:43.045 --> 01:11:44.725
<v Speaker 0>So let's call this setup.

01:11:46.885 --> 01:11:48.405
<v Speaker 0>Why else do we need

01:11:49.205 --> 01:11:49.845
<v Speaker 0>migrate?

01:11:53.510 --> 01:11:55.350
<v Speaker 0>Collaboration expired. Right.

01:11:55.830 --> 01:11:57.750
<v Speaker 0>And we'll be okay with that.

01:11:58.150 --> 01:12:00.070
<v Speaker 0>We need to see their database.

01:12:01.430 --> 01:12:02.230
<v Speaker 0>Mhmm.

01:12:04.470 --> 01:12:05.830
<v Speaker 0>And

01:12:05.505 --> 01:12:06.864
<v Speaker 0>we can run star,

01:12:07.265 --> 01:12:08.945
<v Speaker 0>but we'll actually call this

01:12:09.345 --> 01:12:09.985
<v Speaker 0>run.

01:12:10.625 --> 01:12:13.345
<v Speaker 1>That's the web server, isn't it? I I

01:12:13.345 --> 01:12:14.225
<v Speaker 0>think so.

01:12:14.545 --> 01:12:16.145
<v Speaker 1>So we've got engine x already. We don't

01:12:16.145 --> 01:12:16.545
<v Speaker 1>need that.

01:12:21.190 --> 01:12:21.909
<v Speaker 0>Okay.

01:12:22.790 --> 01:12:23.349
<v Speaker 0>So

01:12:23.909 --> 01:12:25.909
<v Speaker 0>let's do make setup. So we're still inside

01:12:25.909 --> 01:12:27.989
<v Speaker 0>our d shell environment, which is our interactive

01:12:27.989 --> 01:12:29.030
<v Speaker 0>dev environment.

01:12:29.590 --> 01:12:31.030
<v Speaker 0>Hopefully, all these commands

01:12:32.310 --> 01:12:34.550
<v Speaker 0>just work, which, of course, never gonna be

01:12:34.550 --> 01:12:34.949
<v Speaker 0>the case.

01:12:35.635 --> 01:12:37.074
<v Speaker 1>So if I run if I run make

01:12:37.074 --> 01:12:39.155
<v Speaker 1>setup from the host, it's gonna fail?

01:12:40.594 --> 01:12:41.715
<v Speaker 0>Well, I wouldn't be able to find the

01:12:41.715 --> 01:12:42.434
<v Speaker 0>database.

01:12:42.994 --> 01:12:44.834
<v Speaker 1>Because maybe I haven't got PHP installed.

01:12:45.715 --> 01:12:47.314
<v Speaker 0>Or MariaDB running.

01:12:47.635 --> 01:12:49.800
<v Speaker 1>You're always you're always running make d shell

01:12:49.800 --> 01:12:51.800
<v Speaker 1>and then using it inside the d inside

01:12:51.800 --> 01:12:52.679
<v Speaker 1>the d shell.

01:12:53.160 --> 01:12:54.520
<v Speaker 0>Right. So it says it wasn't able to

01:12:54.520 --> 01:12:56.600
<v Speaker 0>find our driver. Does that make sense? We

01:12:56.600 --> 01:12:58.600
<v Speaker 0>haven't installed the MySQL driver as part of

01:12:58.600 --> 01:13:01.505
<v Speaker 0>our Docker file setup because it was it

01:13:01.505 --> 01:13:03.505
<v Speaker 0>must be an optional dependency in the composer

01:13:03.505 --> 01:13:05.584
<v Speaker 0>dot JSON because you might not be using

01:13:05.585 --> 01:13:07.344
<v Speaker 0>a MySQL compatible

01:13:09.025 --> 01:13:09.905
<v Speaker 0>database.

01:13:10.945 --> 01:13:13.584
<v Speaker 0>So we just need to hear

01:13:15.400 --> 01:13:17.240
<v Speaker 0>I think it's just called MySQL.

01:13:18.200 --> 01:13:19.560
<v Speaker 0>You think that's right?

01:13:21.560 --> 01:13:23.240
<v Speaker 1>Is that what the error message said?

01:13:24.120 --> 01:13:26.200
<v Speaker 0>Yeah. It couldn't find the the driver for

01:13:26.200 --> 01:13:27.560
<v Speaker 0>connecting to the database.

01:13:29.000 --> 01:13:30.120
<v Speaker 0>PDO MySQL.

01:13:30.445 --> 01:13:31.325
<v Speaker 0>So we

01:13:31.645 --> 01:13:32.765
<v Speaker 0>need to enable that.

01:13:35.485 --> 01:13:37.165
<v Speaker 0>As a downstream

01:13:37.485 --> 01:13:40.125
<v Speaker 0>product here and I know what database technology

01:13:40.125 --> 01:13:42.364
<v Speaker 0>we're gonna use, I could come in here

01:13:42.765 --> 01:13:45.485
<v Speaker 0>and just enforce that at the compilation step.

01:13:46.739 --> 01:13:48.260
<v Speaker 0>Where's the extensions? To

01:13:49.539 --> 01:13:50.339
<v Speaker 1>the top.

01:13:50.659 --> 01:13:52.499
<v Speaker 0>There you go. Line 30.

01:13:56.099 --> 01:13:56.739
<v Speaker 0>So

01:14:00.420 --> 01:14:01.860
<v Speaker 0>we could just codify that pixel.

01:14:03.595 --> 01:14:04.315
<v Speaker 1>Mhmm.

01:14:08.075 --> 01:14:09.515
<v Speaker 0>Let's just turn them.

01:14:11.355 --> 01:14:12.955
<v Speaker 0>Let me come back into our d shell,

01:14:14.570 --> 01:14:16.889
<v Speaker 0>and we can run setup. And, hopefully, it's

01:14:16.889 --> 01:14:17.929
<v Speaker 0>a little bit happier.

01:14:22.010 --> 01:14:24.489
<v Speaker 0>It is happier, but it's still not working.

01:14:24.489 --> 01:14:27.610
<v Speaker 0>So connection refused. So let's check our configuration.

01:14:33.545 --> 01:14:36.344
<v Speaker 0>So FPM doesn't have any config. So that

01:14:36.344 --> 01:14:38.344
<v Speaker 0>is a full part on our part.

01:14:40.744 --> 01:14:41.945
<v Speaker 1>Oh, yeah. We haven't set it.

01:14:42.780 --> 01:14:44.619
<v Speaker 1>We only set it inside the MySQL.

01:14:51.180 --> 01:14:52.540
<v Speaker 0>Let's make one more.

01:14:59.744 --> 01:15:01.505
<v Speaker 0>I got Phoebe. That's the one.

01:15:02.465 --> 01:15:03.264
<v Speaker 0>Okay. Lucky.

01:15:10.480 --> 01:15:11.199
<v Speaker 0>Okay.

01:15:11.679 --> 01:15:13.039
<v Speaker 0>What have we got wrong here?

01:15:14.880 --> 01:15:15.999
<v Speaker 0>Our database

01:15:16.080 --> 01:15:17.280
<v Speaker 0>where's our post?

01:15:18.560 --> 01:15:20.000
<v Speaker 1>I think Alex said that in the chat

01:15:20.000 --> 01:15:20.800
<v Speaker 1>about an hour ago.

01:15:22.605 --> 01:15:24.205
<v Speaker 1>12:12 fifty.

01:15:24.925 --> 01:15:27.165
<v Speaker 1>Alex said, I think we're missing DB host.

01:15:28.845 --> 01:15:30.205
<v Speaker 1>Okay.

01:15:30.845 --> 01:15:31.485
<v Speaker 1>Host.

01:15:32.445 --> 01:15:33.325
<v Speaker 1>Not host name.

01:15:38.860 --> 01:15:40.380
<v Speaker 0>You saw nothing. Okay.

01:15:45.100 --> 01:15:47.260
<v Speaker 0>Okay. So the migration ran.

01:15:47.980 --> 01:15:49.420
<v Speaker 0>Database was CD'd.

01:15:50.165 --> 01:15:52.324
<v Speaker 0>So

01:15:59.765 --> 01:16:01.125
<v Speaker 0>asset compilation.

01:16:01.845 --> 01:16:03.205
<v Speaker 0>Is that what that means? Is that what

01:16:03.205 --> 01:16:05.125
<v Speaker 0>makes sense? Right? Yeah. I think so.

01:16:06.020 --> 01:16:07.700
<v Speaker 1>So the in the instructions, there was a

01:16:07.700 --> 01:16:10.099
<v Speaker 1>couple of NPM commands ahead above what we

01:16:10.900 --> 01:16:11.699
<v Speaker 1>did.

01:16:12.660 --> 01:16:14.260
<v Speaker 0>Alright. Okay. So we need an

01:16:15.140 --> 01:16:17.540
<v Speaker 0>NPM CI to install the dependencies

01:16:18.145 --> 01:16:19.744
<v Speaker 0>and an NPM

01:16:19.744 --> 01:16:22.385
<v Speaker 0>run dev to build our assets.

01:16:25.344 --> 01:16:26.465
<v Speaker 0>Okay. So

01:16:26.705 --> 01:16:27.985
<v Speaker 0>there there's

01:16:28.545 --> 01:16:29.985
<v Speaker 0>half a dozen ways

01:16:30.465 --> 01:16:32.889
<v Speaker 0>to do this. So a

01:16:36.010 --> 01:16:37.130
<v Speaker 1>lot of these things,

01:16:39.050 --> 01:16:40.730
<v Speaker 1>we're we're treating them as

01:16:41.130 --> 01:16:42.730
<v Speaker 1>ad hoc one off things you do in

01:16:42.730 --> 01:16:45.565
<v Speaker 1>your dev environment. So, you know, seeding the

01:16:45.565 --> 01:16:46.605
<v Speaker 1>database, running

01:16:47.485 --> 01:16:49.645
<v Speaker 1>there's actually two let's split them into two.

01:16:49.645 --> 01:16:51.805
<v Speaker 1>There's things you only do in dev. Seeding

01:16:51.805 --> 01:16:53.805
<v Speaker 1>seeding the database isn't something you're doing in

01:16:53.805 --> 01:16:54.364
<v Speaker 1>prod.

01:16:55.085 --> 01:16:55.725
<v Speaker 1>Right?

01:16:56.365 --> 01:16:58.765
<v Speaker 1>Running migrations is maybe something we're gonna do

01:16:59.510 --> 01:17:00.630
<v Speaker 1>in prod.

01:17:00.949 --> 01:17:03.270
<v Speaker 0>Yep. And building the pipeline at that kind

01:17:03.270 --> 01:17:04.870
<v Speaker 1>of build step, that feels like something we

01:17:04.870 --> 01:17:06.949
<v Speaker 1>should be doing as we build the image

01:17:06.949 --> 01:17:07.670
<v Speaker 1>almost.

01:17:10.150 --> 01:17:11.910
<v Speaker 0>Yeah. There so I think the two ways

01:17:11.910 --> 01:17:13.430
<v Speaker 0>we'll try and cover that is the one

01:17:13.430 --> 01:17:15.565
<v Speaker 0>you just which is whereas maybe as a

01:17:15.565 --> 01:17:18.284
<v Speaker 0>PHP developer, I'm not gonna touch the the

01:17:18.284 --> 01:17:20.364
<v Speaker 0>front end assets or like that. And I

01:17:20.364 --> 01:17:22.125
<v Speaker 0>can make that into the image, but I'm

01:17:22.125 --> 01:17:23.645
<v Speaker 0>not gonna change. But I think there's the

01:17:23.645 --> 01:17:25.084
<v Speaker 0>other end of that where

01:17:25.324 --> 01:17:27.005
<v Speaker 0>maybe we are changing the assets as part

01:17:27.005 --> 01:17:28.844
<v Speaker 0>of our development workflow. We we still want

01:17:28.844 --> 01:17:29.645
<v Speaker 0>that to work too.

01:17:31.300 --> 01:17:32.340
<v Speaker 0>So

01:17:33.380 --> 01:17:34.340
<v Speaker 0>let's do

01:17:35.219 --> 01:17:37.380
<v Speaker 0>let's go with the naive approach in that.

01:17:37.620 --> 01:17:39.460
<v Speaker 0>We're not gonna change these assets.

01:17:44.655 --> 01:17:46.574
<v Speaker 0>And if I'm not gonna change the assets,

01:17:46.574 --> 01:17:48.175
<v Speaker 0>that means I can ship them in the

01:17:48.175 --> 01:17:49.774
<v Speaker 0>NGINX image if I want.

01:17:50.574 --> 01:17:52.335
<v Speaker 0>I mean, if anyone's getting any strong opinions

01:17:52.335 --> 01:17:55.054
<v Speaker 0>and, like, again, we're both not Hirevel developers.

01:17:55.054 --> 01:17:57.375
<v Speaker 0>That's best. Maybe maybe our is not the

01:17:57.375 --> 01:17:58.414
<v Speaker 0>one to listen to. What

01:17:59.250 --> 01:18:01.489
<v Speaker 1>what I suspect is gonna happen is the

01:18:01.730 --> 01:18:02.530
<v Speaker 1>mix

01:18:03.170 --> 01:18:05.409
<v Speaker 1>like Symphony webpack encore.

01:18:07.730 --> 01:18:09.329
<v Speaker 1>There there will be end up being some

01:18:09.329 --> 01:18:11.570
<v Speaker 1>interaction between the PHP framework and the static

01:18:11.570 --> 01:18:13.570
<v Speaker 1>assets. Like, it'll check for there

01:18:14.065 --> 01:18:14.705
<v Speaker 1>or

01:18:15.505 --> 01:18:17.025
<v Speaker 1>do you know what I mean? It'll it'll

01:18:17.025 --> 01:18:18.304
<v Speaker 1>it'll want to

01:18:18.945 --> 01:18:21.264
<v Speaker 1>have access to them in the PHP image.

01:18:21.585 --> 01:18:22.545
<v Speaker 1>That's my prediction.

01:18:23.665 --> 01:18:25.185
<v Speaker 0>So okay. So let's make this the easiest

01:18:25.185 --> 01:18:27.505
<v Speaker 0>way. As as part of setup, we run

01:18:27.505 --> 01:18:28.625
<v Speaker 0>an MPM

01:18:28.625 --> 01:18:30.999
<v Speaker 0>CI, and we run an MPM

01:18:31.080 --> 01:18:32.519
<v Speaker 0>run dev.

01:18:32.679 --> 01:18:33.239
<v Speaker 1>Mhmm.

01:18:33.880 --> 01:18:35.719
<v Speaker 0>That this is the naive. Let's get it

01:18:35.719 --> 01:18:37.000
<v Speaker 0>going, and then we'll see how we can

01:18:37.000 --> 01:18:39.159
<v Speaker 0>optimize it. Now the first challenge is we

01:18:39.159 --> 01:18:41.000
<v Speaker 0>don't have access to MPM inside of our

01:18:41.000 --> 01:18:42.955
<v Speaker 0>dev base layer image, but we can fix

01:18:42.955 --> 01:18:43.515
<v Speaker 0>that.

01:18:43.995 --> 01:18:44.875
<v Speaker 0>I

01:18:47.115 --> 01:18:47.755
<v Speaker 0>believe.

01:18:49.675 --> 01:18:50.555
<v Speaker 0>Install

01:18:50.635 --> 01:18:51.995
<v Speaker 0>Node. Js and NPM.

01:19:00.430 --> 01:19:03.309
<v Speaker 0>Obviously, I'm not entirely comfortable with

01:19:04.110 --> 01:19:04.989
<v Speaker 0>leveraging

01:19:05.230 --> 01:19:06.030
<v Speaker 0>dev images

01:19:08.065 --> 01:19:10.385
<v Speaker 0>super repository or at least a super image

01:19:10.385 --> 01:19:12.224
<v Speaker 0>with loads of stuff in it. So we'll

01:19:12.224 --> 01:19:13.344
<v Speaker 0>maybe try and see if we can clean

01:19:13.344 --> 01:19:15.025
<v Speaker 0>that up. But it does mean that I

01:19:15.025 --> 01:19:17.344
<v Speaker 0>can run MPM CI.

01:19:20.545 --> 01:19:21.505
<v Speaker 0>It should just work.

01:19:35.875 --> 01:19:37.555
<v Speaker 0>And I think what we'll do is we'll

01:19:37.555 --> 01:19:38.755
<v Speaker 0>just prove this works.

01:19:39.635 --> 01:19:41.555
<v Speaker 0>We'll take it away, and we'll bake this

01:19:41.555 --> 01:19:44.835
<v Speaker 0>into the engine x data things. I really

01:19:45.235 --> 01:19:47.555
<v Speaker 0>I think I do feel quite strongly

01:19:49.730 --> 01:19:52.289
<v Speaker 0>that NGINX should be serving the static assets.

01:19:52.289 --> 01:19:53.570
<v Speaker 0>The build process should be part of that

01:19:53.570 --> 01:19:55.170
<v Speaker 0>image build. And if they change, I'm just

01:19:55.170 --> 01:19:57.170
<v Speaker 0>gonna force a rebuild. I mean, the development

01:19:57.170 --> 01:19:59.329
<v Speaker 0>workflow for working on PHP versus working on

01:19:59.329 --> 01:20:00.769
<v Speaker 0>the static assets would probably

01:20:01.895 --> 01:20:03.815
<v Speaker 0>again, maybe I'm just not the person with

01:20:03.815 --> 01:20:04.695
<v Speaker 0>the experience

01:20:04.855 --> 01:20:07.975
<v Speaker 0>to indicate how the workflow should work. Yeah.

01:20:07.975 --> 01:20:09.815
<v Speaker 1>The front end developer's gonna want,

01:20:10.535 --> 01:20:12.855
<v Speaker 1>you know, what wanting to be watching the

01:20:12.855 --> 01:20:14.775
<v Speaker 1>file system and rebuilding if things change and

01:20:14.775 --> 01:20:17.170
<v Speaker 1>all that stuff, which might lead them towards

01:20:17.170 --> 01:20:18.690
<v Speaker 1>running that stuff locally.

01:20:20.450 --> 01:20:21.890
<v Speaker 0>So we can we can we can make

01:20:21.890 --> 01:20:23.330
<v Speaker 0>it work that way. Do some do some

01:20:23.490 --> 01:20:24.210
<v Speaker 1>do some some

01:20:24.610 --> 01:20:26.290
<v Speaker 1>me, I just want all all the stuff

01:20:26.290 --> 01:20:27.810
<v Speaker 1>built so I can work on the PHP.

01:20:29.725 --> 01:20:31.725
<v Speaker 1>So would that be a an m a

01:20:31.725 --> 01:20:33.245
<v Speaker 1>node build step?

01:20:34.365 --> 01:20:37.005
<v Speaker 0>I'd probably add another container to handle that.

01:20:37.165 --> 01:20:39.805
<v Speaker 0>It'll this MPM run dev seems like it's

01:20:39.805 --> 01:20:41.805
<v Speaker 0>actually running a web server

01:20:43.540 --> 01:20:45.540
<v Speaker 0>it's gonna start doing something in a moment.

01:20:45.780 --> 01:20:47.540
<v Speaker 0>Oh, no. It's building. Okay. These

01:20:48.260 --> 01:20:49.300
<v Speaker 1>things take time.

01:20:50.820 --> 01:20:52.020
<v Speaker 1>It's a lot of files, so it's probably

01:20:52.020 --> 01:20:53.940
<v Speaker 1>quite slow with volume amounts.

01:20:54.660 --> 01:20:56.900
<v Speaker 0>That's true. Wouldn't have that problem on Linux.

01:20:58.415 --> 01:21:00.095
<v Speaker 1>What do call them? Host mounts?

01:21:00.415 --> 01:21:01.455
<v Speaker 1>Host volumes.

01:21:01.775 --> 01:21:04.255
<v Speaker 0>Yeah. A bank mount or a host mount.

01:21:04.335 --> 01:21:06.735
<v Speaker 1>A what? A bank mount or a host

01:21:06.735 --> 01:21:07.855
<v Speaker 0>mount. Bank mount.

01:21:08.895 --> 01:21:09.215
<v Speaker 1>Okay.

01:21:12.200 --> 01:21:14.120
<v Speaker 1>Because there's been some chat about slow slow

01:21:14.120 --> 01:21:16.360
<v Speaker 1>max. It's that. Right? It's having lots of

01:21:16.360 --> 01:21:17.560
<v Speaker 1>files mounted.

01:21:19.160 --> 01:21:19.800
<v Speaker 1>Cool.

01:21:20.760 --> 01:21:22.840
<v Speaker 0>So let's see what happens. That'd

01:21:42.620 --> 01:21:43.740
<v Speaker 1>It's doing something.

01:21:44.460 --> 01:21:46.300
<v Speaker 0>It was doing something.

01:21:49.900 --> 01:21:51.820
<v Speaker 0>Alright. Well, again, some sort of four zero

01:21:51.820 --> 01:21:53.820
<v Speaker 0>four, so let's just see what's failing.

01:21:54.665 --> 01:21:55.704
<v Speaker 1>CSS.

01:22:00.025 --> 01:22:01.385
<v Speaker 0>Okay. Yes.

01:22:06.985 --> 01:22:09.065
<v Speaker 0>So

01:22:12.179 --> 01:22:14.420
<v Speaker 0>let's check our engine x

01:22:14.420 --> 01:22:15.139
<v Speaker 0>config.

01:22:20.915 --> 01:22:22.114
<v Speaker 0>So where does that

01:22:23.715 --> 01:22:26.275
<v Speaker 0>JS file come from? App dot CSS. Well,

01:22:26.275 --> 01:22:27.795
<v Speaker 0>I can't see that file.

01:22:28.355 --> 01:22:30.115
<v Speaker 1>It could be in public

01:22:30.275 --> 01:22:30.915
<v Speaker 0>It's there.

01:22:31.555 --> 01:22:32.755
<v Speaker 0>Okay.

01:22:33.475 --> 01:22:35.635
<v Speaker 0>So I'm assuming

01:22:37.560 --> 01:22:40.519
<v Speaker 0>there is some sort of redirect magic

01:22:41.159 --> 01:22:42.840
<v Speaker 0>on the APM

01:22:42.840 --> 01:22:43.559
<v Speaker 0>site.

01:22:45.560 --> 01:22:47.560
<v Speaker 0>They should be looking for that stuff in

01:22:47.560 --> 01:22:48.360
<v Speaker 0>that directory.

01:23:00.435 --> 01:23:02.275
<v Speaker 0>Let's go to index on PHP.

01:23:07.989 --> 01:23:10.389
<v Speaker 0>I wonder if Laravel should be handling this.

01:23:12.790 --> 01:23:14.150
<v Speaker 1>You'd you'd not want it to, would you?

01:23:21.525 --> 01:23:24.804
<v Speaker 0>No. That just outputs everything under resources.

01:23:27.845 --> 01:23:29.685
<v Speaker 0>Or not because the CS is under app

01:23:29.685 --> 01:23:32.340
<v Speaker 0>CSS, but the path is just here. Let

01:23:32.340 --> 01:23:33.219
<v Speaker 0>me check that.

01:23:34.580 --> 01:23:36.980
<v Speaker 0>No. No. CSS, app CSS. Yeah. So we

01:23:36.980 --> 01:23:38.739
<v Speaker 0>wanna serve that resources to retro as a

01:23:38.739 --> 01:23:40.979
<v Speaker 0>root fail system from NGINX, probably.

01:23:41.860 --> 01:23:44.155
<v Speaker 0>That's kind of the vibe I'm getting. Have

01:23:44.155 --> 01:23:45.515
<v Speaker 1>a look in the public folder and check

01:23:45.515 --> 01:23:47.275
<v Speaker 1>there isn't a sort of sneaky SIM link

01:23:47.275 --> 01:23:47.515
<v Speaker 1>or

01:23:51.995 --> 01:23:53.515
<v Speaker 0>Ah, there's an h t access.

01:23:59.010 --> 01:24:00.690
<v Speaker 0>It's a CSS folder there, isn't it? But

01:24:00.690 --> 01:24:01.090
<v Speaker 1>is it

01:24:03.170 --> 01:24:05.090
<v Speaker 0>It just pushes over her through index dot

01:24:05.090 --> 01:24:07.330
<v Speaker 0>PHP, which makes me think Laravel is trying

01:24:07.330 --> 01:24:09.170
<v Speaker 0>to handle that, and then it's

01:24:09.410 --> 01:24:09.730
<v Speaker 0>failing.

01:24:11.515 --> 01:24:13.995
<v Speaker 1>No. That that's in that in that h

01:24:13.995 --> 01:24:15.835
<v Speaker 1>t access, it's only applying

01:24:16.235 --> 01:24:17.675
<v Speaker 1>it's only requests that don't hit a file

01:24:17.675 --> 01:24:19.434
<v Speaker 1>or a directory going to PHP.

01:24:20.475 --> 01:24:22.395
<v Speaker 0>Yeah. But a request for slash CSS slash

01:24:22.395 --> 01:24:23.195
<v Speaker 0>app CSS

01:24:23.880 --> 01:24:26.199
<v Speaker 0>is gonna go be routed through index of

01:24:26.199 --> 01:24:28.119
<v Speaker 0>PHP because it doesn't exist.

01:24:29.560 --> 01:24:32.199
<v Speaker 1>That is that CSS folder in public empty?

01:24:34.360 --> 01:24:35.960
<v Speaker 0>Oh, record. Oh, okay.

01:24:37.725 --> 01:24:39.324
<v Speaker 0>Well, so what's going on here then if

01:24:39.324 --> 01:24:40.525
<v Speaker 0>I do public?

01:24:48.284 --> 01:24:51.005
<v Speaker 1>Is there any So development development and resources.

01:24:51.005 --> 01:24:52.469
<v Speaker 0>So maybe that's just with 11, and it

01:24:52.469 --> 01:24:54.469
<v Speaker 0>gets compiled into public CSS.

01:24:57.590 --> 01:24:59.909
<v Speaker 0>Alex says that Laravel does not handle the

01:24:59.909 --> 01:25:00.949
<v Speaker 0>CSS checks.

01:25:02.630 --> 01:25:03.750
<v Speaker 0>So let's

01:25:04.575 --> 01:25:05.135
<v Speaker 0>try.

01:25:22.400 --> 01:25:25.520
<v Speaker 0>But we're serving everything from oh, no. Right.

01:25:25.520 --> 01:25:25.840
<v Speaker 0>Okay.

01:25:30.965 --> 01:25:32.805
<v Speaker 0>So I think the problem is is that

01:25:32.805 --> 01:25:34.885
<v Speaker 0>request is coming in for app dot CSS.

01:25:34.885 --> 01:25:37.125
<v Speaker 0>Our engine x configuration at the moment is

01:25:37.125 --> 01:25:38.005
<v Speaker 0>configured

01:25:39.285 --> 01:25:42.485
<v Speaker 0>through everything through the index dot g s,

01:25:43.045 --> 01:25:44.565
<v Speaker 0>and then that's failing.

01:25:45.679 --> 01:25:47.599
<v Speaker 0>Now, let's just see if there is

01:25:51.360 --> 01:25:53.519
<v Speaker 0>engine x for

01:25:54.639 --> 01:25:56.159
<v Speaker 0>Laravel apps.

01:25:56.800 --> 01:25:58.560
<v Speaker 0>We thought we'd have done that. Rather, I

01:25:58.560 --> 01:26:00.545
<v Speaker 0>was trying to So you think all requests

01:26:00.545 --> 01:26:01.985
<v Speaker 1>are going through to PHP?

01:26:03.025 --> 01:26:04.704
<v Speaker 0>It is definitely. Yeah.

01:26:05.185 --> 01:26:05.985
<v Speaker 0>Right.

01:26:07.824 --> 01:26:09.505
<v Speaker 0>So we just want someone we just want

01:26:09.505 --> 01:26:10.625
<v Speaker 0>our production

01:26:10.625 --> 01:26:12.065
<v Speaker 0>engine x config.

01:26:12.065 --> 01:26:13.025
<v Speaker 1>Yeah. Looks good.

01:26:24.849 --> 01:26:27.330
<v Speaker 0>Or we could just make that those assets

01:26:27.330 --> 01:26:29.570
<v Speaker 0>available in in the NGINX site, and we

01:26:29.570 --> 01:26:30.690
<v Speaker 0>set them over NGINX.

01:26:31.175 --> 01:26:32.855
<v Speaker 0>I still feel that that's the right way.

01:26:32.855 --> 01:26:34.375
<v Speaker 1>That would make more sense, wouldn't it?

01:26:37.175 --> 01:26:38.614
<v Speaker 1>Let's have NGINX server.

01:26:40.215 --> 01:26:40.695
<v Speaker 0>Okay.

01:26:43.780 --> 01:26:45.300
<v Speaker 0>So how do we do that?

01:26:46.340 --> 01:26:47.460
<v Speaker 1>Lead volume?

01:26:52.020 --> 01:26:54.179
<v Speaker 0>Well, yeah. Okay. That was naive approach. Why

01:26:54.179 --> 01:26:54.739
<v Speaker 0>not?

01:26:55.860 --> 01:26:56.420
<v Speaker 1>Thanks.

01:27:00.015 --> 01:27:01.935
<v Speaker 0>And that in a nice possible way, of

01:27:01.935 --> 01:27:03.055
<v Speaker 0>course. I know.

01:27:04.415 --> 01:27:06.895
<v Speaker 0>So that should just take everything from here.

01:27:06.895 --> 01:27:09.375
<v Speaker 0>The the challenge would be the index. Php

01:27:09.375 --> 01:27:10.175
<v Speaker 0>would exist.

01:27:16.370 --> 01:27:17.889
<v Speaker 0>Very naive approach.

01:27:21.969 --> 01:27:24.929
<v Speaker 0>Let's see if that fixes engine x.

01:27:25.409 --> 01:27:26.289
<v Speaker 0>Let's just

01:27:26.610 --> 01:27:28.209
<v Speaker 0>use a second terminal.

01:27:28.530 --> 01:27:30.530
<v Speaker 0>Oh, I wanna restart

01:27:30.195 --> 01:27:31.315
<v Speaker 0>the engine next.

01:27:32.515 --> 01:27:34.915
<v Speaker 0>What that should mean is if I go

01:27:34.915 --> 01:27:36.435
<v Speaker 0>inside the engine container

01:27:41.555 --> 01:27:42.755
<v Speaker 0>did I not mention it?

01:27:44.190 --> 01:27:45.870
<v Speaker 0>Or w w HTML.

01:27:52.030 --> 01:27:52.430
<v Speaker 0>Oh,

01:27:54.910 --> 01:27:56.510
<v Speaker 0>r m engine x.

01:27:59.974 --> 01:28:00.775
<v Speaker 0>Help.

01:28:03.094 --> 01:28:04.215
<v Speaker 1>Still there?

01:28:06.295 --> 01:28:08.454
<v Speaker 0>Down? There we go. Stop it.

01:28:08.935 --> 01:28:10.935
<v Speaker 0>Stop it and force it. Right? Okay. And

01:28:10.935 --> 01:28:11.655
<v Speaker 0>then

01:28:12.220 --> 01:28:13.260
<v Speaker 0>start and

01:28:13.580 --> 01:28:15.179
<v Speaker 0>run up.

01:28:19.340 --> 01:28:20.540
<v Speaker 0>I should have the note.

01:28:26.185 --> 01:28:27.784
<v Speaker 0>K. So now it should

01:28:28.344 --> 01:28:30.505
<v Speaker 0>Mhmm. Be able to deliver those asset.

01:28:37.480 --> 01:28:40.040
<v Speaker 0>Well, then now we have the 403 problem,

01:28:41.720 --> 01:28:43.320
<v Speaker 0>which we got last week as well. And

01:28:43.320 --> 01:28:46.680
<v Speaker 0>then I believe it's just because that public

01:28:46.680 --> 01:28:47.560
<v Speaker 0>directory.

01:28:47.960 --> 01:28:48.520
<v Speaker 0>The

01:28:50.840 --> 01:28:53.445
<v Speaker 0>permissions on it? I don't think it's permissions.

01:28:53.445 --> 01:28:55.445
<v Speaker 0>I think it's that it doesn't exist.

01:28:56.885 --> 01:28:58.325
<v Speaker 0>See what happens if we do that. Is

01:28:58.325 --> 01:29:00.165
<v Speaker 0>it gonna be trial and error? Stop.

01:29:03.765 --> 01:29:04.405
<v Speaker 0>R

01:29:04.965 --> 01:29:06.725
<v Speaker 0>m s f. Engine eight.

01:29:07.810 --> 01:29:08.770
<v Speaker 0>I'm not back.

01:29:13.810 --> 01:29:15.410
<v Speaker 0>Definitely a four zero three.

01:29:19.250 --> 01:29:22.850
<v Speaker 0>And the problem is

01:29:21.985 --> 01:29:23.345
<v Speaker 0>that is for bettering.

01:29:36.680 --> 01:29:38.680
<v Speaker 1>So it's try because the public folder does

01:29:38.680 --> 01:29:40.280
<v Speaker 1>exist, does that mean it's not passing things

01:29:40.280 --> 01:29:41.160
<v Speaker 1>on to

01:29:41.800 --> 01:29:42.680
<v Speaker 1>FBM?

01:29:44.040 --> 01:29:45.320
<v Speaker 1>Is that our config?

01:29:47.800 --> 01:29:51.320
<v Speaker 0>So this should be running as

01:29:57.935 --> 01:30:00.255
<v Speaker 1>Alex has some pertinent comments in the chat.

01:30:06.989 --> 01:30:08.989
<v Speaker 0>Did I manage it to the wrong location?

01:30:12.349 --> 01:30:13.229
<v Speaker 0>No.

01:30:16.590 --> 01:30:18.429
<v Speaker 1>What does our vhost.com

01:30:18.429 --> 01:30:19.949
<v Speaker 1>look like? Can we remind ourselves?

01:30:27.614 --> 01:30:28.414
<v Speaker 0>Mhmm.

01:30:29.054 --> 01:30:31.375
<v Speaker 0>Oh, wait. No. That's right. Because that's still

01:30:31.375 --> 01:30:31.534
<v Speaker 0>the.

01:30:36.270 --> 01:30:37.550
<v Speaker 1>Yeah.

01:30:38.510 --> 01:30:40.590
<v Speaker 0>So I was trying to access the file.

01:30:42.910 --> 01:30:45.070
<v Speaker 0>I can't get a directory listed in that,

01:30:45.070 --> 01:30:47.070
<v Speaker 0>which makes me you know, the seems like

01:30:47.070 --> 01:30:47.870
<v Speaker 0>it's permissions.

01:30:52.795 --> 01:30:54.074
<v Speaker 0>I can access

01:30:57.755 --> 01:30:58.395
<v Speaker 0>that.

01:31:00.315 --> 01:31:03.755
<v Speaker 0>And so I'm assuming I could probably access

01:31:10.200 --> 01:31:11.080
<v Speaker 0>that.

01:31:11.560 --> 01:31:13.880
<v Speaker 0>So the challenge is just the PHP fail.

01:31:13.880 --> 01:31:15.800
<v Speaker 0>So what I need to do

01:31:18.915 --> 01:31:21.874
<v Speaker 0>It's close. What's the what's the problem?

01:31:25.875 --> 01:31:30.034
<v Speaker 0>The problem is let's add

01:31:36.119 --> 01:31:38.280
<v Speaker 0>pick it up. Okay. So adding the index

01:31:38.280 --> 01:31:39.719
<v Speaker 0>dot HTML at least goes with the the

01:31:39.719 --> 01:31:41.880
<v Speaker 0>error. The problem is now that fail exists.

01:31:43.480 --> 01:31:45.400
<v Speaker 1>So it's when when you go into slash,

01:31:46.015 --> 01:31:48.655
<v Speaker 1>it's because the public folder

01:31:48.895 --> 01:31:51.535
<v Speaker 1>because the folder exists in the NGINX volume

01:31:51.535 --> 01:31:52.255
<v Speaker 1>now

01:31:52.815 --> 01:31:56.255
<v Speaker 1>Yep. It's trying to serve the directory index

01:31:56.255 --> 01:31:58.495
<v Speaker 1>of that folder rather than asking FPM for

01:31:58.495 --> 01:32:01.320
<v Speaker 1>it. Correct. And then something else has turned

01:32:01.320 --> 01:32:02.840
<v Speaker 1>off directory indexing.

01:32:05.320 --> 01:32:07.800
<v Speaker 1>Is that right? Yes.

01:32:07.800 --> 01:32:09.080
<v Speaker 0>But it's trying to deliver

01:32:09.560 --> 01:32:11.480
<v Speaker 0>it's trying to find the root fail, which

01:32:11.480 --> 01:32:12.360
<v Speaker 0>doesn't exist.

01:32:12.955 --> 01:32:15.035
<v Speaker 0>And which should be gone through the PHP,

01:32:15.035 --> 01:32:16.235
<v Speaker 0>but I think we need to add something

01:32:16.235 --> 01:32:19.035
<v Speaker 0>specific. So what was that? Root file does

01:32:19.035 --> 01:32:20.635
<v Speaker 1>exist. It's the folder.

01:32:22.715 --> 01:32:24.875
<v Speaker 1>And then the root had public.

01:32:25.035 --> 01:32:26.715
<v Speaker 0>He's saying if we do that, it should

01:32:26.715 --> 01:32:26.955
<v Speaker 0>work.

01:32:29.620 --> 01:32:31.540
<v Speaker 0>It's a good thing people watch this thing.

01:32:31.700 --> 01:32:32.500
<v Speaker 0>Alright.

01:32:34.020 --> 01:32:35.620
<v Speaker 0>Let's see if he sees

01:32:36.420 --> 01:32:37.060
<v Speaker 0>our end.

01:32:41.775 --> 01:32:44.655
<v Speaker 0>So we're gonna restart with that. Now let's

01:32:44.655 --> 01:32:45.454
<v Speaker 0>confirm.

01:32:46.735 --> 01:32:48.175
<v Speaker 0>Yeah. That doesn't work.

01:32:49.295 --> 01:32:50.895
<v Speaker 0>So we've broken that.

01:32:52.050 --> 01:32:53.730
<v Speaker 0>It's not that we wanna add a public

01:32:53.730 --> 01:32:55.090
<v Speaker 0>here. It's that

01:33:11.875 --> 01:33:14.835
<v Speaker 0>Stan just used the official engine x thing.

01:33:15.075 --> 01:33:17.075
<v Speaker 1>Well, let let's do that.

01:33:18.995 --> 01:33:20.590
<v Speaker 1>And look at why it works and ours

01:33:20.590 --> 01:33:21.230
<v Speaker 1>doesn't.

01:33:24.990 --> 01:33:25.470
<v Speaker 0>Okay.

01:33:36.795 --> 01:33:39.034
<v Speaker 0>Wonder if it's that, the little cheeky head.

01:33:39.034 --> 01:33:40.474
<v Speaker 0>No. I was like, ah, that's what it

01:33:40.474 --> 01:33:41.034
<v Speaker 0>is.

01:33:45.514 --> 01:33:48.040
<v Speaker 0>That one thing failed. Right? Then I'll copy

01:33:48.040 --> 01:33:49.960
<v Speaker 0>the failed, but, you know, I do I

01:33:49.960 --> 01:33:51.720
<v Speaker 0>I need to confirm it from my own.

01:33:51.720 --> 01:33:53.320
<v Speaker 0>The problem is it's looking for an index,

01:33:53.320 --> 01:33:54.760
<v Speaker 0>HTML. It can't get a direct to the

01:33:54.760 --> 01:33:56.040
<v Speaker 0>list of them, but we can just save

01:33:56.040 --> 01:33:58.040
<v Speaker 0>the index as a PHP file, which forces

01:33:58.040 --> 01:33:59.560
<v Speaker 0>it through this route.

01:34:01.515 --> 01:34:02.954
<v Speaker 1>Mhmm. Thanks.

01:34:06.155 --> 01:34:07.275
<v Speaker 0>K. That works,

01:34:07.594 --> 01:34:08.795
<v Speaker 0>and this will work.

01:34:10.875 --> 01:34:12.315
<v Speaker 0>Alright. I'll copy the file.

01:34:12.715 --> 01:34:13.675
<v Speaker 1>Copy the whole file.

01:34:15.430 --> 01:34:16.790
<v Speaker 1>Copy the whole file.

01:34:19.350 --> 01:34:20.550
<v Speaker 0>So it was pretty

01:34:26.070 --> 01:34:27.670
<v Speaker 1>We're getting bugged down in NGINX.

01:34:28.005 --> 01:34:29.605
<v Speaker 1>If this works, let's never Yeah. Talk about

01:34:29.605 --> 01:34:32.245
<v Speaker 1>it again. That's just not important. You're right.

01:34:32.645 --> 01:34:34.325
<v Speaker 1>It's not an NGINX stream.

01:34:36.885 --> 01:34:39.525
<v Speaker 0>Not using a UNX socket. We're using

01:34:39.925 --> 01:34:41.525
<v Speaker 0>I should've kept that lane.

01:34:54.770 --> 01:34:56.450
<v Speaker 0>I think that should be alright. Okay.

01:35:12.050 --> 01:35:13.489
<v Speaker 0>CSS is working.

01:35:13.890 --> 01:35:15.489
<v Speaker 0>Fail not found here.

01:35:17.170 --> 01:35:18.130
<v Speaker 0>Oh, no.

01:35:29.375 --> 01:35:30.255
<v Speaker 0>Oh, come on.

01:35:33.135 --> 01:35:34.735
<v Speaker 1>It's good that we've got that confidence each

01:35:34.735 --> 01:35:34.975
<v Speaker 1>time.

01:35:35.740 --> 01:35:36.460
<v Speaker 0>Oh,

01:35:36.940 --> 01:35:38.460
<v Speaker 0>see, that seems like I didn't wanna copy

01:35:38.460 --> 01:35:39.820
<v Speaker 0>this nonsense. Okay.

01:35:45.660 --> 01:35:47.420
<v Speaker 0>W w w dot

01:35:57.145 --> 01:35:58.025
<v Speaker 0>It's wrong.

01:36:02.360 --> 01:36:04.360
<v Speaker 0>Primary script name unknown.

01:36:07.880 --> 01:36:09.800
<v Speaker 0>And because

01:36:11.719 --> 01:36:12.840
<v Speaker 0>it should be okay.

01:36:16.445 --> 01:36:17.805
<v Speaker 1>Does the server name

01:36:17.965 --> 01:36:18.845
<v Speaker 1>have to be there?

01:36:44.325 --> 01:36:45.845
<v Speaker 0>I feel like I was closer with my

01:36:45.845 --> 01:36:46.485
<v Speaker 0>own fail.

01:36:58.310 --> 01:37:01.110
<v Speaker 0>For better now, specs, the CSS works.

01:37:03.030 --> 01:37:04.469
<v Speaker 0>For better now, it's because they're trying to

01:37:04.469 --> 01:37:06.389
<v Speaker 0>access the root file. So

01:37:12.805 --> 01:37:15.125
<v Speaker 0>that should be enough to tell it not

01:37:15.125 --> 01:37:17.045
<v Speaker 0>to look for an index by HTML. And

01:37:17.045 --> 01:37:18.565
<v Speaker 0>if that doesn't work, we'll fix it.

01:37:30.500 --> 01:37:32.500
<v Speaker 0>K. So now we're getting a fail not

01:37:32.500 --> 01:37:33.060
<v Speaker 0>found.

01:37:34.415 --> 01:37:35.775
<v Speaker 0>Let's try

01:37:37.215 --> 01:37:39.775
<v Speaker 0>written errors through PHP,

01:37:40.015 --> 01:37:41.775
<v Speaker 0>which we had an example up here.

01:37:51.360 --> 01:37:53.200
<v Speaker 0>Public. We getting we are getting a four

01:37:53.200 --> 01:37:55.199
<v Speaker 0>zero four. Yeah. They're not there.

01:37:58.400 --> 01:38:00.160
<v Speaker 0>We shouldn't use a public. We just wanna

01:38:00.160 --> 01:38:01.680
<v Speaker 0>force it to go through PHP so it

01:38:01.680 --> 01:38:04.080
<v Speaker 0>goes to the FPM endpoint.

01:38:05.275 --> 01:38:06.635
<v Speaker 0>Probably that's not working.

01:38:11.994 --> 01:38:14.235
<v Speaker 0>Just make sure I'm getting the right update

01:38:14.235 --> 01:38:15.114
<v Speaker 0>error message.

01:38:18.139 --> 01:38:20.699
<v Speaker 0>It's over the past CPI error now is

01:38:20.699 --> 01:38:21.499
<v Speaker 0>saying

01:38:22.620 --> 01:38:24.940
<v Speaker 0>yeah. Okay. So the path is important here.

01:38:36.784 --> 01:38:37.665
<v Speaker 0>There's a log.

01:38:46.860 --> 01:38:47.739
<v Speaker 0>Alright.

01:38:48.300 --> 01:38:50.300
<v Speaker 0>Let's try and do something interesting.

01:38:51.739 --> 01:38:52.460
<v Speaker 0>So

01:38:55.420 --> 01:38:57.340
<v Speaker 0>okay. So now we've got engine x serving

01:38:57.340 --> 01:38:58.620
<v Speaker 0>as static assets.

01:38:59.875 --> 01:39:02.914
<v Speaker 0>We got PHP serving another PHP application.

01:39:02.915 --> 01:39:04.675
<v Speaker 0>We've got our database working.

01:39:04.915 --> 01:39:07.395
<v Speaker 0>For development environment, we have an interactive D

01:39:07.395 --> 01:39:09.394
<v Speaker 0>shell, which is over

01:39:10.675 --> 01:39:10.995
<v Speaker 0>here.

01:39:12.730 --> 01:39:15.130
<v Speaker 0>So as I change my PHP code, I

01:39:15.130 --> 01:39:17.130
<v Speaker 0>can run composer command if I need to

01:39:17.130 --> 01:39:18.570
<v Speaker 0>to cache clears.

01:39:19.369 --> 01:39:21.530
<v Speaker 0>Do we have a development environment

01:39:21.690 --> 01:39:22.650
<v Speaker 0>that'll work?

01:39:23.449 --> 01:39:24.889
<v Speaker 0>Yes? Yeah. I think so.

01:39:25.545 --> 01:39:27.304
<v Speaker 1>If you were a front end developer,

01:39:28.824 --> 01:39:30.105
<v Speaker 1>you might want to

01:39:32.105 --> 01:39:34.905
<v Speaker 1>have some clever watch magic going on, but

01:39:34.905 --> 01:39:35.705
<v Speaker 1>it it works.

01:39:39.960 --> 01:39:42.679
<v Speaker 1>Should we pivot towards production?

01:39:45.560 --> 01:39:48.040
<v Speaker 1>Just thinking about the time available.

01:39:50.840 --> 01:39:52.440
<v Speaker 1>Because this is very devy, isn't it?

01:39:54.735 --> 01:39:55.935
<v Speaker 0>Yes.

01:39:56.735 --> 01:39:58.975
<v Speaker 0>This is a development environment. So

01:40:00.175 --> 01:40:01.855
<v Speaker 1>And be interesting to talk about how we'd

01:40:01.855 --> 01:40:03.215
<v Speaker 1>build the NPM stuff

01:40:03.615 --> 01:40:04.175
<v Speaker 1>for prod.

01:40:06.620 --> 01:40:07.340
<v Speaker 0>Okay.

01:40:07.820 --> 01:40:09.580
<v Speaker 0>I just let's just make sure it was

01:40:09.580 --> 01:40:12.060
<v Speaker 0>semantic a few times. So, like, what I

01:40:12.060 --> 01:40:14.460
<v Speaker 0>don't mind. This development environment would be

01:40:15.980 --> 01:40:18.460
<v Speaker 0>let's say I wanna do database migrations.

01:40:19.955 --> 01:40:20.595
<v Speaker 0>Maybe make

01:40:23.875 --> 01:40:26.675
<v Speaker 0>just wanna make sure that people understand that

01:40:26.915 --> 01:40:28.675
<v Speaker 0>that is the way that I would work.

01:40:28.675 --> 01:40:30.835
<v Speaker 0>If I were to change my database where

01:40:30.835 --> 01:40:32.675
<v Speaker 0>do migrations work? Yeah.

01:40:33.555 --> 01:40:33.955
<v Speaker 0>Cool.

01:40:37.400 --> 01:40:38.760
<v Speaker 0>If I were to change one of these

01:40:38.760 --> 01:40:41.400
<v Speaker 0>files, my development workflow would be that I

01:40:41.400 --> 01:40:43.320
<v Speaker 0>know from this environment,

01:40:43.320 --> 01:40:44.760
<v Speaker 0>just run these commands,

01:40:45.880 --> 01:40:47.585
<v Speaker 0>and it worked. Wow.

01:40:49.025 --> 01:40:51.025
<v Speaker 0>That seats is complaining. We know that already

01:40:51.025 --> 01:40:53.264
<v Speaker 0>have seats, but that's not idempotent.

01:40:53.824 --> 01:40:54.465
<v Speaker 0>So

01:40:59.265 --> 01:41:01.025
<v Speaker 0>maybe it's only run the migration.

01:41:02.330 --> 01:41:04.010
<v Speaker 0>I don't understand how the seats work in

01:41:04.010 --> 01:41:05.690
<v Speaker 0>Laravel. I'm

01:41:05.690 --> 01:41:07.930
<v Speaker 0>just gonna remove it. There must be a

01:41:07.930 --> 01:41:10.810
<v Speaker 0>a clean command. Right? After then.

01:41:19.365 --> 01:41:20.485
<v Speaker 0>P d y.

01:41:28.245 --> 01:41:29.045
<v Speaker 0>Let's see.

01:41:30.480 --> 01:41:31.360
<v Speaker 0>That work.

01:41:37.200 --> 01:41:38.000
<v Speaker 0>Yeah.

01:41:39.840 --> 01:41:41.040
<v Speaker 0>Okay. That's better.

01:41:42.000 --> 01:41:43.680
<v Speaker 0>What about tests? How do you run tests

01:41:43.680 --> 01:41:44.720
<v Speaker 0>in PHP?

01:41:47.565 --> 01:41:48.684
<v Speaker 0>There's an Test?

01:41:49.565 --> 01:41:51.564
<v Speaker 1>It has some test targets, I think.

01:41:52.204 --> 01:41:53.965
<v Speaker 1>It's basically PHP unit stuff

01:41:54.364 --> 01:41:56.204
<v Speaker 1>with some extensions for Laravel.

01:41:58.620 --> 01:41:59.739
<v Speaker 0>Test agreeing.

01:42:00.540 --> 01:42:01.820
<v Speaker 1>Lots of tests.

01:42:04.060 --> 01:42:06.219
<v Speaker 0>Okay. So the I think the development environment

01:42:06.219 --> 01:42:08.860
<v Speaker 0>is fine. We could definitely clean up the

01:42:08.860 --> 01:42:10.940
<v Speaker 0>asset stuff. But, yeah, let's talk about the

01:42:10.940 --> 01:42:13.020
<v Speaker 0>production aspects of this and then

01:42:14.835 --> 01:42:17.075
<v Speaker 0>push Alex to comment on the screen so

01:42:17.075 --> 01:42:18.994
<v Speaker 0>you can do a migrate fresh seat.

01:42:20.355 --> 01:42:22.195
<v Speaker 0>Seems like it's a bit nicer. Okay.

01:42:24.595 --> 01:42:25.875
<v Speaker 0>So how do you want to deploy this

01:42:25.875 --> 01:42:26.755
<v Speaker 0>to production in QN?

01:42:27.619 --> 01:42:29.380
<v Speaker 1>Well, you tell me. So

01:42:32.099 --> 01:42:34.739
<v Speaker 1>what's different? Right? What's different is that the

01:42:35.219 --> 01:42:37.300
<v Speaker 1>the composing store would take place in we're

01:42:37.300 --> 01:42:38.739
<v Speaker 1>not gonna have as many volume mounts.

01:42:40.494 --> 01:42:42.735
<v Speaker 1>Right? We're we're gonna do the composer install

01:42:42.735 --> 01:42:45.135
<v Speaker 1>inside the PHP side of things.

01:42:46.735 --> 01:42:48.655
<v Speaker 1>We're gonna copy the files into the images

01:42:48.655 --> 01:42:50.815
<v Speaker 1>instead of mounting them in.

01:42:55.699 --> 01:42:58.019
<v Speaker 1>And we would need we'd want to build

01:42:58.020 --> 01:43:00.580
<v Speaker 1>those assets without having to as part of

01:43:00.580 --> 01:43:03.380
<v Speaker 1>the image build. So that's a question.

01:43:04.260 --> 01:43:05.699
<v Speaker 1>It depends how we want to serve the

01:43:05.699 --> 01:43:06.420
<v Speaker 1>static assets.

01:43:07.315 --> 01:43:09.315
<v Speaker 1>Like, do you want an engine NGINX image

01:43:09.315 --> 01:43:11.635
<v Speaker 1>with them baked into the NGINX?

01:43:13.955 --> 01:43:15.715
<v Speaker 1>Maybe in real life, you'd be pushing them

01:43:15.715 --> 01:43:17.795
<v Speaker 1>to some sort of CDN

01:43:17.795 --> 01:43:18.355
<v Speaker 1>instead.

01:43:19.555 --> 01:43:21.875
<v Speaker 0>Yeah. Both are very

01:43:23.080 --> 01:43:24.600
<v Speaker 0>both are good workflows.

01:43:25.480 --> 01:43:27.960
<v Speaker 0>So the the the challenge is just

01:43:30.120 --> 01:43:32.520
<v Speaker 0>everyone should build an engine x image with

01:43:32.520 --> 01:43:34.680
<v Speaker 0>the assets. We would ship them together as

01:43:34.680 --> 01:43:36.760
<v Speaker 0>a deployment with two containers and a pods

01:43:36.760 --> 01:43:39.614
<v Speaker 0>and probably share the same tag

01:43:40.014 --> 01:43:42.415
<v Speaker 0>so that they're always deployed together.

01:43:42.415 --> 01:43:43.935
<v Speaker 0>But we can talk about that, and then

01:43:43.935 --> 01:43:45.614
<v Speaker 0>we can also talk about the CDN approach

01:43:45.614 --> 01:43:47.775
<v Speaker 0>where as part of your CI pipeline, you

01:43:47.775 --> 01:43:48.974
<v Speaker 0>would just push them

01:43:49.614 --> 01:43:52.094
<v Speaker 0>to a CDN and then ship your PHP

01:43:52.094 --> 01:43:52.895
<v Speaker 0>image with,

01:43:54.190 --> 01:43:55.550
<v Speaker 0>you know, the correct

01:43:56.670 --> 01:43:59.310
<v Speaker 0>URLs, whatever. So Well, actually, I think I

01:43:59.310 --> 01:44:00.989
<v Speaker 1>think there's two NGINXs.

01:44:01.469 --> 01:44:03.229
<v Speaker 1>There's two roles for NGINX

01:44:03.790 --> 01:44:06.030
<v Speaker 1>in this in this app. Right? One role

01:44:06.030 --> 01:44:07.230
<v Speaker 1>is serving static images,

01:44:08.555 --> 01:44:10.554
<v Speaker 1>which doesn't necessarily have to be

01:44:11.755 --> 01:44:14.315
<v Speaker 1>static files. Doesn't necessarily have to be in

01:44:14.315 --> 01:44:15.594
<v Speaker 1>the same pod as the

01:44:16.235 --> 01:44:17.995
<v Speaker 1>PHP application. Right?

01:44:19.755 --> 01:44:21.995
<v Speaker 1>The the other NGINX role is

01:44:22.630 --> 01:44:25.190
<v Speaker 0>So I I I would just because

01:44:26.550 --> 01:44:28.310
<v Speaker 0>they have to be deployed together

01:44:28.710 --> 01:44:31.270
<v Speaker 0>in a sense there because the static assets

01:44:31.270 --> 01:44:33.110
<v Speaker 0>that are deployed to NGINX

01:44:33.590 --> 01:44:35.750
<v Speaker 0>would be very unique to that build and

01:44:35.750 --> 01:44:38.094
<v Speaker 0>wouldn't install like you would run older version

01:44:38.094 --> 01:44:39.775
<v Speaker 0>of the assets with a newer version of

01:44:39.775 --> 01:44:42.255
<v Speaker 0>your PHP and FPM stuff. So for that,

01:44:42.255 --> 01:44:44.094
<v Speaker 0>I would deploy them as a deployment with

01:44:44.094 --> 01:44:44.655
<v Speaker 0>two

01:44:44.895 --> 01:44:45.775
<v Speaker 0>containers.

01:44:46.815 --> 01:44:48.415
<v Speaker 1>Yeah. I think I think that's very much

01:44:48.415 --> 01:44:50.415
<v Speaker 1>then depends on the application and the teams

01:44:50.415 --> 01:44:51.135
<v Speaker 1>involved. Right?

01:44:52.020 --> 01:44:52.979
<v Speaker 1>If you've got

01:44:55.139 --> 01:44:57.300
<v Speaker 1>yeah. It's that Conway's Law thing where the

01:44:57.619 --> 01:44:59.460
<v Speaker 1>structure of your teams determines the structure of

01:44:59.460 --> 01:45:01.699
<v Speaker 1>your application. If you've got different people in

01:45:01.699 --> 01:45:03.460
<v Speaker 1>a if you've got a detached front end

01:45:03.460 --> 01:45:05.780
<v Speaker 1>and back end workflows where maybe

01:45:05.860 --> 01:45:07.300
<v Speaker 1>there's a single page application

01:45:07.985 --> 01:45:09.585
<v Speaker 1>is the is the app

01:45:09.825 --> 01:45:11.505
<v Speaker 1>and the PHP

01:45:11.665 --> 01:45:13.425
<v Speaker 1>back end is like an API that it

01:45:13.425 --> 01:45:14.065
<v Speaker 1>hits.

01:45:14.785 --> 01:45:17.585
<v Speaker 1>They may well be separately deployable

01:45:17.905 --> 01:45:19.985
<v Speaker 1>because the fact those two groups are working

01:45:19.985 --> 01:45:22.560
<v Speaker 1>separately would mean the API would have to

01:45:22.560 --> 01:45:24.079
<v Speaker 1>stay super stable,

01:45:24.800 --> 01:45:26.639
<v Speaker 1>whereas the front end team could iterate quickly

01:45:26.639 --> 01:45:28.559
<v Speaker 1>and make lots of changes. Right? On

01:45:28.960 --> 01:45:30.080
<v Speaker 1>the other hand, if you're talking like a

01:45:30.080 --> 01:45:32.320
<v Speaker 1>traditional PHP lamp stack team where there's a

01:45:32.320 --> 01:45:34.320
<v Speaker 1>couple of front endies and a few back

01:45:34.320 --> 01:45:36.000
<v Speaker 1>endies and they're all working together on the

01:45:36.000 --> 01:45:36.880
<v Speaker 1>same stream of features,

01:45:37.515 --> 01:45:39.515
<v Speaker 1>then yes, a % you'd want to be

01:45:39.515 --> 01:45:41.195
<v Speaker 1>deploying them together because they wouldn't have had

01:45:41.195 --> 01:45:42.474
<v Speaker 1>to bake into their

01:45:43.275 --> 01:45:45.034
<v Speaker 1>way of working the fact that the API

01:45:45.034 --> 01:45:48.074
<v Speaker 1>has to be forwards compatible, backward compatible. They'll

01:45:48.074 --> 01:45:49.195
<v Speaker 1>break stuff all the time

01:45:51.275 --> 01:45:52.475
<v Speaker 1>in a coordinated way.

01:45:53.910 --> 01:45:55.750
<v Speaker 1>So which one should we which version should

01:45:55.750 --> 01:45:56.469
<v Speaker 1>we pick?

01:45:57.510 --> 01:45:59.510
<v Speaker 1>So so in that separated out team, right,

01:45:59.510 --> 01:46:00.550
<v Speaker 1>you might have the

01:46:00.790 --> 01:46:03.429
<v Speaker 1>front end assets being completely deployed

01:46:03.430 --> 01:46:04.949
<v Speaker 1>to either a CDN,

01:46:05.590 --> 01:46:08.230
<v Speaker 1>different set of static image static servers

01:46:08.855 --> 01:46:10.855
<v Speaker 1>static asset servers

01:46:11.655 --> 01:46:13.655
<v Speaker 1>to when the deploys to the PHP back

01:46:13.655 --> 01:46:15.575
<v Speaker 1>end are going. And in that case, you

01:46:15.575 --> 01:46:18.295
<v Speaker 1>might not even need NGINX for the PHP.

01:46:19.095 --> 01:46:20.935
<v Speaker 1>I mentioned it to you that that

01:46:21.360 --> 01:46:22.880
<v Speaker 1>I didn't know about this before. Someone called

01:46:22.880 --> 01:46:24.719
<v Speaker 1>mentioned

01:46:25.200 --> 01:46:26.640
<v Speaker 1>that Kubernetes

01:46:26.640 --> 01:46:29.680
<v Speaker 1>can have, like, an in NGINX ingress

01:46:30.080 --> 01:46:30.640
<v Speaker 1>point.

01:46:31.520 --> 01:46:34.080
<v Speaker 1>So you ship your PHP you ship your

01:46:34.080 --> 01:46:34.880
<v Speaker 1>FPM

01:46:34.960 --> 01:46:36.880
<v Speaker 1>and sort of trust Kubernetes to

01:46:37.655 --> 01:46:39.015
<v Speaker 1>expose that to the world,

01:46:40.295 --> 01:46:42.695
<v Speaker 1>which wouldn't work for static static assets.

01:46:43.255 --> 01:46:44.455
<v Speaker 1>But if you have this if it's a

01:46:44.455 --> 01:46:45.415
<v Speaker 1>microservice

01:46:46.215 --> 01:46:48.695
<v Speaker 1>and doesn't have any static assets, maybe that's

01:46:48.695 --> 01:46:49.335
<v Speaker 1>a good

01:46:50.135 --> 01:46:50.535
<v Speaker 1>option.

01:46:53.100 --> 01:46:53.820
<v Speaker 0>Okay.

01:46:54.140 --> 01:46:56.380
<v Speaker 1>So we we let's pick a pick a

01:46:56.460 --> 01:46:58.380
<v Speaker 1>pick an approach for this app.

01:46:58.780 --> 01:47:01.100
<v Speaker 0>Alright. So what we're gonna do is we're

01:47:01.100 --> 01:47:02.620
<v Speaker 0>gonna create an op directory,

01:47:03.100 --> 01:47:05.100
<v Speaker 0>and we're gonna start creating our Kubernetes manifest.

01:47:09.485 --> 01:47:11.005
<v Speaker 0>We'll try and tackle a few of those

01:47:11.005 --> 01:47:13.405
<v Speaker 0>different scenarios that you mentioned. So

01:47:13.885 --> 01:47:16.125
<v Speaker 0>I see their deployment. We'll call this a

01:47:16.125 --> 01:47:16.845
<v Speaker 0>ping CRM.

01:47:19.099 --> 01:47:20.459
<v Speaker 0>And we're gonna

01:47:22.860 --> 01:47:25.099
<v Speaker 0>and what that will go to you. So

01:47:25.579 --> 01:47:26.459
<v Speaker 0>I think

01:47:26.699 --> 01:47:28.539
<v Speaker 0>because the CDN bet is not something that

01:47:28.539 --> 01:47:30.059
<v Speaker 0>could show up right now, we can definitely

01:47:30.059 --> 01:47:31.980
<v Speaker 0>talk about that. Although, there's only one thing

01:47:31.980 --> 01:47:33.945
<v Speaker 0>that changes in the deployment pipeline. So let's

01:47:33.945 --> 01:47:35.304
<v Speaker 0>go with the approach in that. We have

01:47:35.304 --> 01:47:36.985
<v Speaker 0>two containers in the deployment.

01:47:37.385 --> 01:47:40.025
<v Speaker 0>One is running NGINX, one is running FDM.

01:47:40.744 --> 01:47:43.065
<v Speaker 0>For our demo, NGINX will have the assets

01:47:43.065 --> 01:47:44.905
<v Speaker 0>and we'll build an image specifically for that,

01:47:44.905 --> 01:47:46.664
<v Speaker 0>and we'll see how we deploy them together.

01:47:46.665 --> 01:47:48.344
<v Speaker 0>But at the same time, in your CI

01:47:48.344 --> 01:47:50.130
<v Speaker 0>system, you can just not deploy the engine

01:47:50.130 --> 01:47:52.450
<v Speaker 0>x one and just have a make CDN

01:47:52.450 --> 01:47:54.850
<v Speaker 0>target that does whatever your CDN target is.

01:47:54.850 --> 01:47:57.250
<v Speaker 0>Yeah. So I think this is the best

01:47:57.250 --> 01:47:59.250
<v Speaker 0>way for now, which means that we're gonna

01:47:59.250 --> 01:48:01.490
<v Speaker 0>have an image called ping CRM, and we'll

01:48:01.490 --> 01:48:02.770
<v Speaker 0>call this engine

01:48:04.114 --> 01:48:06.114
<v Speaker 0>engine x, and we'll give it a version

01:48:06.114 --> 01:48:07.075
<v Speaker 0>of latest,

01:48:07.075 --> 01:48:08.755
<v Speaker 0>which I would not recommend you do.

01:48:10.035 --> 01:48:10.755
<v Speaker 0>I just wanna

01:48:11.475 --> 01:48:12.114
<v Speaker 1>Yeah.

01:48:12.355 --> 01:48:14.275
<v Speaker 1>I don't understand what latest is. I thought

01:48:14.275 --> 01:48:16.355
<v Speaker 1>I did at one point, and then all

01:48:16.355 --> 01:48:17.715
<v Speaker 1>my illusions got busted.

01:48:22.400 --> 01:48:23.840
<v Speaker 0>We'll have that FPM.

01:48:28.320 --> 01:48:30.000
<v Speaker 0>And now we need to build these.

01:48:30.160 --> 01:48:32.400
<v Speaker 0>We also need to make the ports available.

01:48:32.560 --> 01:48:33.600
<v Speaker 0>So ports.

01:48:43.175 --> 01:48:44.695
<v Speaker 0>Internet to less than 80.

01:48:47.750 --> 01:48:49.269
<v Speaker 0>Less than 9,000.

01:48:55.190 --> 01:48:56.630
<v Speaker 0>Now we need to build the images. So

01:48:56.630 --> 01:48:58.390
<v Speaker 0>let's assume this make fail is also our

01:48:58.390 --> 01:48:59.110
<v Speaker 0>CI,

01:49:00.630 --> 01:49:04.205
<v Speaker 0>which means that we want to build

01:49:05.005 --> 01:49:06.045
<v Speaker 0>NGINX

01:49:06.205 --> 01:49:08.205
<v Speaker 0>stuff and build

01:49:09.485 --> 01:49:10.844
<v Speaker 0>FPM stuff.

01:49:11.725 --> 01:49:13.165
<v Speaker 0>Let's start with

01:49:13.565 --> 01:49:16.685
<v Speaker 0>let's get NGINX delivering assets first. So if

01:49:16.685 --> 01:49:17.805
<v Speaker 0>we come into our deployment,

01:49:18.420 --> 01:49:20.820
<v Speaker 0>let's remove let's just comment out at the

01:49:20.820 --> 01:49:23.700
<v Speaker 0>end, and let's just get this working first.

01:49:25.460 --> 01:49:27.700
<v Speaker 0>Yep. That may fail. We can just say

01:49:27.700 --> 01:49:29.540
<v Speaker 0>that we want to build an image,

01:49:29.940 --> 01:49:32.260
<v Speaker 0>and we're gonna call this ping CRM

01:49:32.260 --> 01:49:33.975
<v Speaker 0>engine x latest.

01:49:35.015 --> 01:49:37.175
<v Speaker 0>We're gonna need to target here because we're

01:49:37.175 --> 01:49:38.775
<v Speaker 0>building engine

01:49:39.095 --> 01:49:39.895
<v Speaker 0>x,

01:49:40.695 --> 01:49:42.055
<v Speaker 0>and that's gonna be an echo one for

01:49:42.055 --> 01:49:43.495
<v Speaker 0>now so that it doesn't break when I

01:49:43.495 --> 01:49:44.215
<v Speaker 0>run it.

01:49:44.935 --> 01:49:47.415
<v Speaker 0>I mean, if it's satisfied, it's build set.

01:49:47.415 --> 01:49:49.300
<v Speaker 0>So we're gonna continue to use our multilayer

01:49:49.300 --> 01:49:51.219
<v Speaker 0>build. And what we're gonna see here is

01:49:51.219 --> 01:49:52.179
<v Speaker 0>that from

01:49:54.180 --> 01:49:57.619
<v Speaker 0>Engine note well, we just need Wow.

01:49:57.700 --> 01:49:59.219
<v Speaker 0>We need to what we need to compile

01:49:59.219 --> 01:50:00.500
<v Speaker 0>the assets first.

01:50:01.300 --> 01:50:01.620
<v Speaker 1>Yeah.

01:50:03.335 --> 01:50:06.215
<v Speaker 0>Yeah. I think 10 maybe an image. Yeah.

01:50:07.975 --> 01:50:09.094
<v Speaker 0>Assets,

01:50:09.495 --> 01:50:10.135
<v Speaker 0>those

01:50:11.335 --> 01:50:12.775
<v Speaker 0>we need to be able to distribute them.

01:50:12.775 --> 01:50:14.215
<v Speaker 0>So you're right with the engine expert.

01:50:14.760 --> 01:50:16.679
<v Speaker 0>We'll just leave that as a tag,

01:50:16.840 --> 01:50:18.679
<v Speaker 0>and this is gonna be our

01:50:20.440 --> 01:50:22.760
<v Speaker 0>engine expert that we actually target.

01:50:23.080 --> 01:50:25.960
<v Speaker 0>What we want to distribute here comes from

01:50:25.960 --> 01:50:26.679
<v Speaker 0>our

01:50:27.960 --> 01:50:29.000
<v Speaker 0>tool capture line,

01:50:30.165 --> 01:50:31.364
<v Speaker 0>Asset build,

01:50:31.844 --> 01:50:34.005
<v Speaker 0>and we need to copy something to file

01:50:34.005 --> 01:50:35.764
<v Speaker 0>w w HTML.

01:50:37.445 --> 01:50:38.324
<v Speaker 0>Like that?

01:50:39.605 --> 01:50:42.485
<v Speaker 1>Yeah. This is totally how we do it.

01:50:43.820 --> 01:50:46.539
<v Speaker 0>We What we need to do is make

01:50:46.539 --> 01:50:48.780
<v Speaker 0>our code available in the build let build

01:50:48.780 --> 01:50:49.499
<v Speaker 0>set,

01:50:49.820 --> 01:50:51.500
<v Speaker 0>and we wanna run n p m c

01:50:51.500 --> 01:50:52.059
<v Speaker 0>I.

01:50:53.020 --> 01:50:54.139
<v Speaker 0>And the dependencies. Yeah.

01:50:55.500 --> 01:50:57.340
<v Speaker 1>What what I found is that

01:50:58.475 --> 01:51:01.035
<v Speaker 1>front end build stuff is much less likely

01:51:01.035 --> 01:51:02.875
<v Speaker 1>to have any sort of system dependency. So

01:51:02.875 --> 01:51:05.035
<v Speaker 1>you can you can just use the use

01:51:05.035 --> 01:51:06.955
<v Speaker 1>the node container straight off

01:51:07.675 --> 01:51:10.235
<v Speaker 1>Mhmm. You know, without having to like, we

01:51:10.235 --> 01:51:11.515
<v Speaker 1>have the PHP of how to install a

01:51:11.515 --> 01:51:13.920
<v Speaker 1>bunch of extensions and system stuff. You don't

01:51:13.920 --> 01:51:15.199
<v Speaker 1>really get that with it.

01:51:16.320 --> 01:51:17.679
<v Speaker 0>Yeah. I would expect

01:51:18.000 --> 01:51:19.520
<v Speaker 0>that to work. The only thing I wanna

01:51:19.520 --> 01:51:21.840
<v Speaker 0>check is does MPM run dev. I don't

01:51:21.840 --> 01:51:23.440
<v Speaker 0>know if they have a specific

01:51:23.440 --> 01:51:26.755
<v Speaker 0>production task that maybe does minimizing and, yeah,

01:51:26.755 --> 01:51:27.395
<v Speaker 0>prod.

01:51:28.435 --> 01:51:29.155
<v Speaker 0>So

01:51:29.315 --> 01:51:31.395
<v Speaker 0>let's call that the production one.

01:51:32.755 --> 01:51:34.755
<v Speaker 0>I may make it slightly difficult

01:51:35.635 --> 01:51:37.795
<v Speaker 0>to validate, but we'll see what happens. And

01:51:37.795 --> 01:51:41.155
<v Speaker 0>then we're gonna copy this from slash code.

01:51:43.340 --> 01:51:45.020
<v Speaker 0>Yes. It's gonna be in public.

01:51:46.140 --> 01:51:46.860
<v Speaker 1>Yep.

01:51:48.620 --> 01:51:49.340
<v Speaker 1>Yeah.

01:51:49.580 --> 01:51:51.739
<v Speaker 1>So we could be a bit more sophisticated

01:51:51.820 --> 01:51:53.980
<v Speaker 1>if we wanted to dig in about which

01:51:53.980 --> 01:51:55.100
<v Speaker 1>files we're copying in.

01:51:56.985 --> 01:51:57.624
<v Speaker 1>Mostly

01:51:57.945 --> 01:52:00.105
<v Speaker 1>from a cache invalidation point of view.

01:52:01.705 --> 01:52:03.465
<v Speaker 1>So that that node

01:52:03.785 --> 01:52:04.905
<v Speaker 1>build target

01:52:07.385 --> 01:52:08.505
<v Speaker 1>is ephemeral.

01:52:08.505 --> 01:52:10.665
<v Speaker 1>Right? It's gonna it's gonna get built. It's

01:52:10.280 --> 01:52:12.200
<v Speaker 1>gonna do all the compilation, and then we're

01:52:12.200 --> 01:52:13.320
<v Speaker 1>kind of throwing it away. We're not gonna

01:52:13.320 --> 01:52:14.840
<v Speaker 1>use it for anything. We're gonna just copy

01:52:14.840 --> 01:52:16.440
<v Speaker 1>the final assets

01:52:17.160 --> 01:52:18.920
<v Speaker 1>out. But so

01:52:19.800 --> 01:52:21.400
<v Speaker 1>in terms of image size, you're not too

01:52:21.400 --> 01:52:24.885
<v Speaker 1>worried about copying everything in, but the cache

01:52:24.885 --> 01:52:27.125
<v Speaker 1>will be invalidated anytime you change any file

01:52:27.125 --> 01:52:29.445
<v Speaker 1>at the moment. So you'd probably only copy

01:52:29.445 --> 01:52:31.045
<v Speaker 1>the files in that you knew

01:52:31.445 --> 01:52:33.844
<v Speaker 1>had to be there for the NPM build.

01:52:34.805 --> 01:52:37.040
<v Speaker 0>Oh, yeah. That's Yeah. We we don't we're

01:52:37.040 --> 01:52:38.240
<v Speaker 1>not gonna do that now because we we're

01:52:38.240 --> 01:52:39.520
<v Speaker 1>not gonna dig in and figure out which

01:52:39.520 --> 01:52:40.079
<v Speaker 1>ones.

01:52:42.880 --> 01:52:45.360
<v Speaker 0>Is it just a resources directory? We can

01:52:45.280 --> 01:52:46.720
<v Speaker 0>we can we'll give that a shot. And

01:52:46.720 --> 01:52:47.920
<v Speaker 0>if it isn't, we'll just Yeah.

01:52:49.145 --> 01:52:52.105
<v Speaker 0>You're definitely right. Like, we'd probably only need

01:52:52.665 --> 01:52:54.105
<v Speaker 1>And then package

01:52:54.345 --> 01:52:55.305
<v Speaker 1>JSON

01:52:55.705 --> 01:52:57.465
<v Speaker 1>in the root. I think you can do

01:52:57.465 --> 01:52:59.545
<v Speaker 0>this syntax. Right? You

01:53:01.145 --> 01:53:01.945
<v Speaker 1>can just

01:53:02.830 --> 01:53:04.590
<v Speaker 1>you don't need to do that. You just

01:53:06.110 --> 01:53:08.190
<v Speaker 1>you list them out. You have multiple items,

01:53:08.190 --> 01:53:09.790
<v Speaker 1>and the last one is the type the

01:53:09.790 --> 01:53:10.909
<v Speaker 1>place to put them.

01:53:11.550 --> 01:53:12.670
<v Speaker 1>Right. Oh,

01:53:15.034 --> 01:53:16.474
<v Speaker 1>maybe do multiple lines.

01:53:17.675 --> 01:53:20.155
<v Speaker 0>Are you not not pressure network. Let's test

01:53:20.155 --> 01:53:20.635
<v Speaker 0>it.

01:53:21.594 --> 01:53:22.635
<v Speaker 0>Docker

01:53:22.795 --> 01:53:24.715
<v Speaker 0>no. We're gonna use our CI.

01:53:26.810 --> 01:53:28.650
<v Speaker 0>Build assets

01:53:29.130 --> 01:53:30.330
<v Speaker 0>for Internet.

01:53:34.250 --> 01:53:36.970
<v Speaker 1>I'm slightly concerned it will lose the directories

01:53:36.970 --> 01:53:38.410
<v Speaker 1>things we're in

01:53:41.105 --> 01:53:43.185
<v Speaker 1>under code. It'll lose the some of the

01:53:43.185 --> 01:53:43.824
<v Speaker 1>structure.

01:53:48.065 --> 01:53:49.745
<v Speaker 1>Actually, it makes sense to have multiple lines

01:53:49.745 --> 01:53:52.480
<v Speaker 1>sometimes if things are gonna change at different

01:53:52.480 --> 01:53:53.280
<v Speaker 1>cadences.

01:53:53.600 --> 01:53:55.840
<v Speaker 0>Yeah. The package dot JSON probably better be

01:53:55.840 --> 01:53:56.960
<v Speaker 0>copied on first. Yeah.

01:54:13.475 --> 01:54:15.395
<v Speaker 0>So there you are. That's project is using

01:54:15.395 --> 01:54:16.355
<v Speaker 0>some sort of

01:54:17.235 --> 01:54:19.795
<v Speaker 0>lock validation, which I generally discourage,

01:54:19.875 --> 01:54:20.435
<v Speaker 0>but

01:54:21.075 --> 01:54:23.020
<v Speaker 0>I'm not gonna stick with it for now.

01:54:23.420 --> 01:54:24.780
<v Speaker 1>So you wouldn't use that if you're using

01:54:24.780 --> 01:54:25.660
<v Speaker 1>Docker. Right?

01:54:26.620 --> 01:54:27.580
<v Speaker 1>As we I

01:54:27.900 --> 01:54:29.180
<v Speaker 0>I would. For sure.

01:54:34.435 --> 01:54:35.635
<v Speaker 0>It just gives you

01:54:36.035 --> 01:54:38.914
<v Speaker 0>consistency guarantees that you don't particularly require.

01:54:40.594 --> 01:54:42.835
<v Speaker 1>So you do require, but Docker gives you.

01:54:42.835 --> 01:54:44.434
<v Speaker 1>Right. Right. Right.

01:54:45.635 --> 01:54:46.675
<v Speaker 1>So we're using

01:54:47.235 --> 01:54:48.675
<v Speaker 1>build kit when you're in a Docker,

01:54:49.579 --> 01:54:51.499
<v Speaker 1>but Compose doesn't do that yet.

01:54:54.539 --> 01:54:55.659
<v Speaker 0>No. It doesn't.

01:54:56.619 --> 01:54:59.739
<v Speaker 0>Webpack dot mix. We need that. I'll add

01:54:59.739 --> 01:55:01.980
<v Speaker 0>that and run it again. And then if

01:55:01.980 --> 01:55:04.885
<v Speaker 0>doesn't work, I will add everything for now.

01:55:04.885 --> 01:55:05.525
<v Speaker 0>Yeah.

01:55:06.645 --> 01:55:07.844
<v Speaker 0>What the heck?

01:55:08.165 --> 01:55:09.525
<v Speaker 0>What's that code called?

01:55:09.764 --> 01:55:11.205
<v Speaker 1>Dot mix dot j s or something.

01:55:19.469 --> 01:55:20.750
<v Speaker 1>It's .mix.js.

01:55:49.530 --> 01:55:50.570
<v Speaker 0>Tailwind.

01:55:51.450 --> 01:55:52.810
<v Speaker 1>Yeah. I think we

01:55:53.690 --> 01:55:55.210
<v Speaker 1>let's just copy everything. Last

01:55:55.530 --> 01:55:57.370
<v Speaker 0>one. Views Last one. Views you've got the

01:55:57.370 --> 01:55:58.570
<v Speaker 0>idea of what we're doing. Right?

01:56:14.810 --> 01:56:15.610
<v Speaker 0>It happier?

01:56:15.850 --> 01:56:18.010
<v Speaker 0>No. Okay. Give me something.

01:56:20.410 --> 01:56:21.929
<v Speaker 0>Alright. I'll copy everything.

01:56:22.330 --> 01:56:24.650
<v Speaker 0>Yeah. Please. Something something that annoys me about

01:56:24.650 --> 01:56:27.175
<v Speaker 1>NPM is it shows things as errors that

01:56:27.175 --> 01:56:29.175
<v Speaker 1>are just sort of more like warnings.

01:56:32.855 --> 01:56:34.775
<v Speaker 1>It always seems to when I'm building stuff.

01:56:35.255 --> 01:56:37.335
<v Speaker 0>I thought you're not enough to really

01:56:38.380 --> 01:56:39.500
<v Speaker 0>to really know.

01:57:04.540 --> 01:57:05.980
<v Speaker 1>Still has to run n p m update.

01:57:05.980 --> 01:57:06.860
<v Speaker 1>That's interesting.

01:57:08.140 --> 01:57:11.260
<v Speaker 0>Okay. Now what we have here

01:57:17.045 --> 01:57:17.764
<v Speaker 0>CRM,

01:57:18.165 --> 01:57:19.284
<v Speaker 0>NGINX, latest.

01:57:19.844 --> 01:57:21.284
<v Speaker 0>Let's just go ahead and save to this

01:57:21.284 --> 01:57:22.084
<v Speaker 0>container.

01:57:26.885 --> 01:57:29.045
<v Speaker 0>I w l l h t m l.

01:57:29.205 --> 01:57:35.380
<v Speaker 0>And there is all of ourminified.com.

01:57:39.300 --> 01:57:39.860
<v Speaker 0>Cool.

01:57:42.980 --> 01:57:44.340
<v Speaker 0>Should there be directories?

01:57:45.515 --> 01:57:46.074
<v Speaker 0>No.

01:57:47.435 --> 01:57:48.155
<v Speaker 0>Yeah.

01:57:48.475 --> 01:57:49.275
<v Speaker 0>Yeah.

01:57:51.995 --> 01:57:53.755
<v Speaker 0>It's it's like my star here is is

01:57:53.755 --> 01:57:55.835
<v Speaker 0>probably not what we want. What we wanna

01:57:55.835 --> 01:57:56.795
<v Speaker 0>do is copy.

01:57:58.900 --> 01:58:00.900
<v Speaker 0>Let's try that one more time.

01:58:01.940 --> 01:58:03.940
<v Speaker 0>I think it's gonna start flatten the directory,

01:58:03.940 --> 01:58:05.060
<v Speaker 0>which we don't want.

01:58:05.860 --> 01:58:06.180
<v Speaker 1>Yeah.

01:58:14.395 --> 01:58:15.355
<v Speaker 1>And

01:58:15.355 --> 01:58:16.954
<v Speaker 1>that's invalidated the

01:58:18.074 --> 01:58:18.874
<v Speaker 1>copy

01:58:19.355 --> 01:58:20.715
<v Speaker 1>because we edited the Docker file.

01:58:21.890 --> 01:58:22.610
<v Speaker 1>We shouldn't have

01:58:24.290 --> 01:58:25.969
<v Speaker 1>so we need Docker ignore. Right?

01:58:28.290 --> 01:58:29.969
<v Speaker 0>Well, no. Because I changed

01:58:30.370 --> 01:58:31.250
<v Speaker 0>oh, yeah.

01:58:32.450 --> 01:58:33.970
<v Speaker 0>Oh, yeah. If I had done a Docker

01:58:33.970 --> 01:58:36.210
<v Speaker 0>ignore to ignore the Docker file, but yeah.

01:58:37.764 --> 01:58:40.164
<v Speaker 0>It should be okay. Alright.

01:58:40.164 --> 01:58:41.925
<v Speaker 0>Let's see what we have in this directory

01:58:41.925 --> 01:58:42.564
<v Speaker 0>now.

01:58:44.005 --> 01:58:45.764
<v Speaker 0>That's better. Perfect.

01:58:45.925 --> 01:58:46.644
<v Speaker 0>Okay.

01:58:47.125 --> 01:58:48.084
<v Speaker 1>Looks good.

01:58:48.724 --> 01:58:49.925
<v Speaker 0>Alright. Let's deploy

01:58:51.445 --> 01:58:51.764
<v Speaker 0>that.

01:58:56.520 --> 01:58:59.320
<v Speaker 0>I know you may have the Kubernetes disabled,

01:58:59.320 --> 01:58:59.960
<v Speaker 0>I think.

01:59:00.360 --> 01:59:02.360
<v Speaker 1>And we could have excluded the index PHP

01:59:02.360 --> 01:59:04.120
<v Speaker 1>as well. Right? If we're just gonna have

01:59:04.120 --> 01:59:05.640
<v Speaker 1>just the stuff that's.

01:59:06.385 --> 01:59:08.065
<v Speaker 0>Well, that wouldn't be that. Like, if we

01:59:08.065 --> 01:59:09.585
<v Speaker 0>if we were gonna spend the time to

01:59:09.585 --> 01:59:11.105
<v Speaker 0>work out the only time we need the

01:59:11.105 --> 01:59:11.744
<v Speaker 0>copies,

01:59:11.985 --> 01:59:13.665
<v Speaker 0>we'd have been better. But because we're just

01:59:13.665 --> 01:59:15.344
<v Speaker 0>trying to get this working and not stream

01:59:15.344 --> 01:59:17.025
<v Speaker 0>for three hours to happens

01:59:17.585 --> 01:59:18.625
<v Speaker 1>Oh, I'm we should put this.

01:59:19.440 --> 01:59:20.000
<v Speaker 1>Okay.

01:59:23.120 --> 01:59:25.760
<v Speaker 0>Right now, let's let's get that quickly enabled.

01:59:27.360 --> 01:59:29.680
<v Speaker 0>I disabled it for yesterday's stream. We were

01:59:29.680 --> 01:59:31.760
<v Speaker 0>looking at the latest version of Kubernetes,

01:59:31.760 --> 01:59:33.440
<v Speaker 0>and this is an older version, so I

01:59:33.440 --> 01:59:34.080
<v Speaker 0>have to

01:59:35.925 --> 01:59:36.965
<v Speaker 0>let's see. So

01:59:43.685 --> 01:59:44.885
<v Speaker 1>Kubernetes apply.

01:59:46.800 --> 01:59:48.640
<v Speaker 0>It's We're just gonna apply it with the

01:59:48.640 --> 01:59:50.320
<v Speaker 0>engine x container to make sure that we

01:59:50.320 --> 01:59:52.000
<v Speaker 0>can pull those assets.

01:59:56.160 --> 01:59:58.880
<v Speaker 0>You still there? Yeah. That was good.

02:00:03.095 --> 02:00:04.695
<v Speaker 0>Okay. So we have a Kubernetes.

02:00:04.695 --> 02:00:05.735
<v Speaker 0>One Kubernetes.

02:00:05.735 --> 02:00:06.295
<v Speaker 0>Or

02:00:06.615 --> 02:00:08.295
<v Speaker 0>one Kubernetes. Who knows?

02:00:12.695 --> 02:00:13.975
<v Speaker 0>Everyone get pods.

02:00:22.080 --> 02:00:23.199
<v Speaker 0>Appointments.

02:00:32.335 --> 02:00:34.255
<v Speaker 0>It's just a bit slow. There we go.

02:00:34.335 --> 02:00:37.135
<v Speaker 0>Image pull back off. That's okay. Let's fix

02:00:37.135 --> 02:00:37.774
<v Speaker 0>that.

02:00:40.574 --> 02:00:42.814
<v Speaker 0>Image pull policy at not

02:00:42.974 --> 02:00:43.854
<v Speaker 0>present.

02:00:46.094 --> 02:00:46.574
<v Speaker 1>Right.

02:00:48.100 --> 02:00:50.340
<v Speaker 1>So we'll only pull it if it doesn't

02:00:50.340 --> 02:00:51.460
<v Speaker 1>have it already.

02:00:51.620 --> 02:00:53.940
<v Speaker 0>Yeah. So when you locally build images, it

02:00:53.940 --> 02:00:55.700
<v Speaker 0>can be a bit frustrating, but the default

02:00:55.700 --> 02:00:57.380
<v Speaker 0>policy is always, which means it tries to

02:00:57.380 --> 02:00:59.220
<v Speaker 0>go and pull the image. So if it's

02:00:59.220 --> 02:01:01.395
<v Speaker 0>working on the official registry for this, but

02:01:01.395 --> 02:01:02.835
<v Speaker 0>at this local label, we're gonna set them

02:01:02.835 --> 02:01:04.594
<v Speaker 0>up to do that, which means

02:01:04.994 --> 02:01:06.195
<v Speaker 0>that that runs.

02:01:07.074 --> 02:01:09.155
<v Speaker 0>So I'm gonna put forward to it

02:01:12.675 --> 02:01:14.195
<v Speaker 0>on port eighty eighty.

02:01:15.554 --> 02:01:18.034
<v Speaker 0>And if I hit

02:01:17.290 --> 02:01:18.090
<v Speaker 0>here,

02:01:18.570 --> 02:01:20.570
<v Speaker 0>you get engine x. But really what we

02:01:20.570 --> 02:01:22.010
<v Speaker 0>wanna see is

02:01:23.770 --> 02:01:24.890
<v Speaker 0>what was it?

02:01:26.010 --> 02:01:26.890
<v Speaker 0>CSS.

02:01:26.890 --> 02:01:28.090
<v Speaker 0>CSS. CSS.

02:01:33.655 --> 02:01:35.575
<v Speaker 0>It won't be called app CSS anymore because

02:01:35.575 --> 02:01:37.015
<v Speaker 0>I bet you it's minimized.

02:01:37.015 --> 02:01:38.455
<v Speaker 0>So let's just

02:01:42.375 --> 02:01:43.815
<v Speaker 0>go and check that out again.

02:01:48.760 --> 02:01:49.959
<v Speaker 0>What is that? I

02:01:53.719 --> 02:01:55.639
<v Speaker 0>think that's the debugging again.

02:01:56.280 --> 02:01:58.199
<v Speaker 0>Mhmm. Let's go ahead and save it to

02:01:58.199 --> 02:01:58.599
<v Speaker 0>pod.

02:02:00.565 --> 02:02:02.324
<v Speaker 0>Alright. I know it's around.

02:02:02.485 --> 02:02:03.445
<v Speaker 0>Yeah. Did

02:02:04.565 --> 02:02:06.245
<v Speaker 1>we copy in the config file? Or have

02:02:06.245 --> 02:02:07.764
<v Speaker 1>we mounted in the config file?

02:02:11.925 --> 02:02:13.605
<v Speaker 0>That is a good point.

02:02:13.845 --> 02:02:14.725
<v Speaker 0>Let's fix that.

02:02:15.900 --> 02:02:18.300
<v Speaker 0>We did not. Please Please

02:02:18.380 --> 02:02:19.660
<v Speaker 1>in the default one.

02:02:22.700 --> 02:02:23.500
<v Speaker 0>Etch.

02:02:23.580 --> 02:02:25.500
<v Speaker 0>I would have spent ages working on that.

02:02:29.395 --> 02:02:30.995
<v Speaker 0>Build it from here, so I've got my

02:02:30.995 --> 02:02:33.474
<v Speaker 0>old complete. Where is my build?

02:02:39.795 --> 02:02:40.114
<v Speaker 0>Image

02:02:41.510 --> 02:02:43.349
<v Speaker 0>build target

02:02:43.430 --> 02:02:44.710
<v Speaker 0>engine x.

02:02:45.350 --> 02:02:46.710
<v Speaker 0>We're calling it

02:02:47.270 --> 02:02:49.670
<v Speaker 0>n c r m engine x later.

02:02:55.855 --> 02:02:58.335
<v Speaker 0>I really need to stop abandoning that cache.

02:02:58.335 --> 02:02:58.815
<v Speaker 0>Hopefully,

02:03:00.495 --> 02:03:01.775
<v Speaker 0>it's the last time we have to build

02:03:01.775 --> 02:03:02.015
<v Speaker 0>it.

02:03:16.790 --> 02:03:17.910
<v Speaker 0>And then we'll

02:03:18.070 --> 02:03:21.190
<v Speaker 0>delete the pod, force it to restart. Hopefully,

02:03:21.350 --> 02:03:24.470
<v Speaker 0>that is enough for us to hit app

02:03:24.470 --> 02:03:25.030
<v Speaker 0>dot CSS.

02:03:26.215 --> 02:03:28.215
<v Speaker 0>Then we build Laravel

02:03:28.775 --> 02:03:29.735
<v Speaker 0>and deploy.

02:03:29.895 --> 02:03:31.655
<v Speaker 0>It'll be good. We'll get there.

02:03:32.135 --> 02:03:33.975
<v Speaker 1>When I'm debugging like this, I often make

02:03:33.975 --> 02:03:35.415
<v Speaker 1>sure I put my stuff at the bottom

02:03:35.415 --> 02:03:37.415
<v Speaker 1>of the Dockerfile even though even if it

02:03:37.415 --> 02:03:38.695
<v Speaker 1>would logically be better

02:03:39.015 --> 02:03:39.575
<v Speaker 1>higher up.

02:03:41.030 --> 02:03:42.710
<v Speaker 0>Yeah. I should have done that. And when

02:03:42.710 --> 02:03:44.469
<v Speaker 1>it works, resync on it. Resync it and

02:03:44.469 --> 02:03:45.670
<v Speaker 1>hit build and more coin and get a

02:03:45.670 --> 02:03:46.550
<v Speaker 1>cup of tea.

02:03:50.950 --> 02:03:52.710
<v Speaker 0>Why have we got crash it back off?

02:04:00.905 --> 02:04:03.304
<v Speaker 0>That upstream PHP doesn't exist.

02:04:06.180 --> 02:04:08.100
<v Speaker 0>And that's because in production, we're not using

02:04:08.100 --> 02:04:09.780
<v Speaker 0>an upstream PHP.

02:04:11.620 --> 02:04:12.420
<v Speaker 0>So

02:04:14.180 --> 02:04:16.420
<v Speaker 0>just create a v host prod

02:04:16.660 --> 02:04:17.380
<v Speaker 0>Mhmm.

02:04:18.900 --> 02:04:20.980
<v Speaker 0>Where we're gonna use

02:04:21.695 --> 02:04:22.415
<v Speaker 0>Rawkode.

02:04:26.975 --> 02:04:28.575
<v Speaker 0>I'll come into our Dockerfile.

02:04:51.594 --> 02:04:53.195
<v Speaker 0>We've had many change of how to rebuild

02:04:53.195 --> 02:04:53.755
<v Speaker 0>this image.

02:05:01.909 --> 02:05:04.389
<v Speaker 0>This is my first stream that's when post

02:05:04.389 --> 02:05:05.429
<v Speaker 0>two hours.

02:05:06.869 --> 02:05:07.670
<v Speaker 1>Yeah.

02:05:07.909 --> 02:05:09.189
<v Speaker 1>Is that good or bad?

02:05:10.550 --> 02:05:12.389
<v Speaker 0>As far as people find it valuable, it's

02:05:12.389 --> 02:05:15.030
<v Speaker 0>good. Right? I don't mind debugging things, I

02:05:15.030 --> 02:05:15.270
<v Speaker 0>think.

02:05:15.995 --> 02:05:17.835
<v Speaker 0>So I think it depends on your viewpoint

02:05:17.835 --> 02:05:19.435
<v Speaker 0>when you're watching something like this. You either

02:05:19.435 --> 02:05:21.355
<v Speaker 0>learn from seeing people debug or you get

02:05:21.355 --> 02:05:22.074
<v Speaker 0>frustrated.

02:05:22.395 --> 02:05:24.155
<v Speaker 0>Yeah. I'm sure we'll get both kind of

02:05:24.155 --> 02:05:24.795
<v Speaker 0>audio. Both

02:05:25.435 --> 02:05:27.595
<v Speaker 0>our audience will have both. This will make

02:05:27.595 --> 02:05:29.835
<v Speaker 1>it different from a slick presentation, isn't

02:05:30.790 --> 02:05:32.469
<v Speaker 1>You get to see the frustration.

02:05:33.670 --> 02:05:35.030
<v Speaker 0>Yeah. Frustrated.

02:05:35.030 --> 02:05:36.310
<v Speaker 0>Definitely frustrated.

02:05:36.470 --> 02:05:38.390
<v Speaker 0>We get to see that even Rawkode has

02:05:38.390 --> 02:05:40.310
<v Speaker 1>to debug things and makes typo.

02:05:41.590 --> 02:05:44.070
<v Speaker 0>I'm sure I make more typos in debugging

02:05:44.070 --> 02:05:46.805
<v Speaker 0>than most. I break things a lot.

02:05:48.085 --> 02:05:50.165
<v Speaker 0>Alright. So we're doing this part to force

02:05:50.165 --> 02:05:52.165
<v Speaker 0>the new image to come into play. Hopefully,

02:05:52.165 --> 02:05:54.965
<v Speaker 0>that removes our failing.

02:05:55.045 --> 02:05:57.205
<v Speaker 0>Correct? We're gonna do the port forward once

02:05:57.205 --> 02:05:58.245
<v Speaker 0>before

02:06:00.520 --> 02:06:03.560
<v Speaker 0>And see at m eighty eighty eighty eighty.

02:06:05.080 --> 02:06:07.239
<v Speaker 0>We have our CSS being delivered.

02:06:07.560 --> 02:06:09.400
<v Speaker 1>Yes. And we'll just ignore that.

02:06:09.960 --> 02:06:13.240
<v Speaker 0>Yeah. That's better. That's just cash. Okay. So

02:06:13.765 --> 02:06:15.685
<v Speaker 0>it's now trying to forward

02:06:15.765 --> 02:06:19.364
<v Speaker 0>this request to FPM and it's failing. Mhmm.

02:06:19.685 --> 02:06:21.845
<v Speaker 0>We need to add our second container to

02:06:21.845 --> 02:06:23.365
<v Speaker 0>the deployment manifest.

02:06:27.110 --> 02:06:28.390
<v Speaker 0>We want this,

02:06:29.430 --> 02:06:31.750
<v Speaker 0>which means we need to add a CI

02:06:32.870 --> 02:06:35.830
<v Speaker 0>for ping CRM FPM.

02:06:35.830 --> 02:06:37.510
<v Speaker 0>So let's copy this

02:06:39.555 --> 02:06:42.514
<v Speaker 0>FPM. And we're gonna target FPM,

02:06:43.875 --> 02:06:45.875
<v Speaker 0>which means we now need a new layer.

02:06:48.675 --> 02:06:50.515
<v Speaker 0>We'll call us Put it up near the

02:06:50.515 --> 02:06:51.795
<v Speaker 1>other PHP ones.

02:06:52.915 --> 02:06:53.315
<v Speaker 1>Alright?

02:06:53.750 --> 02:06:55.829
<v Speaker 1>Put it up near the other PHP ones.

02:06:59.270 --> 02:07:00.070
<v Speaker 0>Right.

02:07:01.989 --> 02:07:03.350
<v Speaker 1>It's always a bit I always find it

02:07:03.350 --> 02:07:05.830
<v Speaker 1>a bit weird having the notes left, you

02:07:05.830 --> 02:07:07.350
<v Speaker 1>know, a lot of different

02:07:08.265 --> 02:07:10.505
<v Speaker 1>images in one Dockerfile, at least put the

02:07:10.505 --> 02:07:12.825
<v Speaker 1>ones that are PHP, FPM together.

02:07:14.265 --> 02:07:17.065
<v Speaker 0>Alright. Okay. So we wanna from we're gonna

02:07:17.065 --> 02:07:19.145
<v Speaker 0>do a copy dot code

02:07:19.225 --> 02:07:20.185
<v Speaker 0>partner

02:07:20.185 --> 02:07:20.745
<v Speaker 0>code.

02:07:24.659 --> 02:07:25.939
<v Speaker 0>We could probably

02:07:27.860 --> 02:07:29.780
<v Speaker 1>We wanna do the composure install?

02:07:30.099 --> 02:07:30.739
<v Speaker 0>Yeah.

02:07:32.420 --> 02:07:32.820
<v Speaker 0>Yeah.

02:07:34.195 --> 02:07:35.954
<v Speaker 1>Before you copy code.

02:07:38.035 --> 02:07:39.474
<v Speaker 0>So it's build FPM.

02:07:40.114 --> 02:07:40.755
<v Speaker 0>Mhmm.

02:07:41.155 --> 02:07:43.554
<v Speaker 0>And then from build FPM,

02:07:43.635 --> 02:07:45.394
<v Speaker 0>we'll do a test layer,

02:07:45.554 --> 02:07:47.155
<v Speaker 0>which we're just gonna have to run the

02:07:47.155 --> 02:07:48.275
<v Speaker 0>echo test for that.

02:07:49.300 --> 02:07:51.380
<v Speaker 0>And then we'll do it from build f

02:07:51.380 --> 02:07:52.099
<v Speaker 0>p m

02:07:53.620 --> 02:07:55.140
<v Speaker 0>f p m. So this is our production

02:07:55.140 --> 02:07:55.940
<v Speaker 0>image.

02:07:57.620 --> 02:08:00.820
<v Speaker 0>And what we want is

02:08:06.285 --> 02:08:07.085
<v Speaker 0>copy.

02:08:09.245 --> 02:08:09.725
<v Speaker 0>Yeah.

02:08:12.445 --> 02:08:13.165
<v Speaker 1>Well, the vendor

02:08:14.205 --> 02:08:16.125
<v Speaker 0>I think we could just copy everything from

02:08:16.125 --> 02:08:17.885
<v Speaker 0>slash code to slash code, and then just

02:08:17.885 --> 02:08:18.685
<v Speaker 0>shut that image.

02:08:19.909 --> 02:08:20.949
<v Speaker 1>Oh, okay.

02:08:22.469 --> 02:08:22.949
<v Speaker 1>So the

02:08:23.750 --> 02:08:24.869
<v Speaker 1>build FPM,

02:08:25.190 --> 02:08:27.190
<v Speaker 1>you should swap you should move the copy

02:08:27.190 --> 02:08:29.670
<v Speaker 1>of everything till after composer install.

02:08:32.235 --> 02:08:34.395
<v Speaker 0>Yep. And so we can leverage our cache

02:08:34.395 --> 02:08:35.195
<v Speaker 0>to go.

02:08:37.034 --> 02:08:39.434
<v Speaker 1>And we probably want to do composer install

02:08:40.475 --> 02:08:41.275
<v Speaker 1>dash o.

02:08:44.500 --> 02:08:47.060
<v Speaker 0>Does that say? Optimizes

02:08:47.060 --> 02:08:48.260
<v Speaker 1>the auto loader.

02:08:48.900 --> 02:08:50.499
<v Speaker 0>The dash o what? Sorry.

02:08:51.219 --> 02:08:52.179
<v Speaker 1>Optimizes

02:08:52.179 --> 02:08:53.699
<v Speaker 1>the auto loader.

02:08:54.340 --> 02:08:54.979
<v Speaker 0>Okay.

02:08:55.860 --> 02:08:59.395
<v Speaker 1>Slightly faster. And Okay. There's there's no dev

02:08:59.395 --> 02:09:01.555
<v Speaker 1>or dash dash prod, I think it is.

02:09:03.635 --> 02:09:04.595
<v Speaker 1>Yeah.

02:09:04.995 --> 02:09:07.875
<v Speaker 1>Prod. So it won't install the dev dependencies

02:09:08.675 --> 02:09:10.035
<v Speaker 1>like PHP unit.

02:09:11.075 --> 02:09:11.555
<v Speaker 0>Okay.

02:09:17.820 --> 02:09:19.980
<v Speaker 1>That's right, isn't it? Not having the test.

02:09:19.980 --> 02:09:20.459
<v Speaker 1>Our

02:09:23.500 --> 02:09:25.725
<v Speaker 0>test run is just make we'll just stick

02:09:25.725 --> 02:09:26.684
<v Speaker 0>it in anyway.

02:09:27.005 --> 02:09:28.764
<v Speaker 0>Let's see what happens. So let's go back

02:09:28.764 --> 02:09:29.965
<v Speaker 0>to our make fail,

02:09:30.445 --> 02:09:33.164
<v Speaker 0>and we're gonna build FPM.

02:09:33.804 --> 02:09:35.725
<v Speaker 0>The parts will run our tests, which just

02:09:35.725 --> 02:09:37.909
<v Speaker 0>means using a different target. So

02:09:39.190 --> 02:09:39.749
<v Speaker 0>Yeah.

02:09:41.030 --> 02:09:42.469
<v Speaker 1>Can you please check

02:09:42.710 --> 02:09:46.150
<v Speaker 1>the location we're copying the code into on

02:09:46.150 --> 02:09:48.310
<v Speaker 1>the FPM container is the same as the

02:09:48.310 --> 02:09:48.949
<v Speaker 1>volume

02:09:49.345 --> 02:09:51.185
<v Speaker 1>we were using in Docker Compose.

02:10:02.720 --> 02:10:03.360
<v Speaker 1>Yep.

02:10:03.920 --> 02:10:06.080
<v Speaker 1>And in the FPM.

02:10:09.520 --> 02:10:09.920
<v Speaker 0>Okay.

02:10:14.835 --> 02:10:15.554
<v Speaker 0>Okay.

02:10:15.795 --> 02:10:16.675
<v Speaker 0>Let's

02:10:17.555 --> 02:10:20.034
<v Speaker 0>we're happy with the next. We're gonna run

02:10:20.755 --> 02:10:23.155
<v Speaker 0>make, which is our fake CI,

02:10:25.075 --> 02:10:26.355
<v Speaker 0>spells at PM.

02:10:26.915 --> 02:10:28.755
<v Speaker 0>This would be our production

02:10:29.480 --> 02:10:30.520
<v Speaker 0>PHP

02:10:30.520 --> 02:10:31.400
<v Speaker 0>CI step.

02:10:45.565 --> 02:10:48.365
<v Speaker 0>And we got our extensions going, composer install.

02:10:48.365 --> 02:10:50.364
<v Speaker 0>I mean, this is probably gonna take, what,

02:10:52.685 --> 02:10:53.965
<v Speaker 0>one and a half minutes.

02:10:54.205 --> 02:10:55.565
<v Speaker 0>You got a joke for me, Kita?

02:10:59.800 --> 02:11:02.280
<v Speaker 1>What's really loud and sounds like a dog?

02:11:03.960 --> 02:11:05.720
<v Speaker 0>Go on. A dog.

02:11:10.440 --> 02:11:11.320
<v Speaker 1>It's a dad joke.

02:11:13.885 --> 02:11:15.085
<v Speaker 0>Any compulsory.

02:11:31.590 --> 02:11:33.750
<v Speaker 0>And another thing I would maybe do here

02:11:33.750 --> 02:11:35.510
<v Speaker 0>is just I know I go a bit

02:11:35.510 --> 02:11:37.429
<v Speaker 0>crazy adding the layers and this file will

02:11:37.429 --> 02:11:39.429
<v Speaker 0>become a little bit difficult to to read.

02:11:39.635 --> 02:11:41.235
<v Speaker 0>Because it'd be nice if this are text

02:11:41.235 --> 02:11:43.235
<v Speaker 0>highlight and recognize the from and make these,

02:11:43.235 --> 02:11:45.955
<v Speaker 0>like, rainbow highlighting in some fashion. Well, like

02:11:45.955 --> 02:11:47.155
<v Speaker 1>collapsible things.

02:11:47.235 --> 02:11:48.675
<v Speaker 0>Yeah. Or collapsible.

02:11:49.075 --> 02:11:51.715
<v Speaker 0>But as I I would probably encapsulate some

02:11:51.715 --> 02:11:54.035
<v Speaker 0>of this, like, requiring composer

02:11:54.270 --> 02:11:56.270
<v Speaker 0>and and provide, like, a CI layer or

02:11:56.270 --> 02:11:57.790
<v Speaker 0>something like that. But

02:11:58.590 --> 02:12:01.070
<v Speaker 0>for now, I am okay with that. Prod

02:12:01.070 --> 02:12:02.750
<v Speaker 0>doesn't exist in layer.

02:12:02.910 --> 02:12:03.550
<v Speaker 0>So

02:12:04.350 --> 02:12:05.550
<v Speaker 0>It's with the FPM. Oh,

02:12:07.875 --> 02:12:09.474
<v Speaker 1>I said no at first.

02:12:13.795 --> 02:12:14.355
<v Speaker 0>K.

02:12:18.915 --> 02:12:20.915
<v Speaker 1>The outline is that our CI would run

02:12:20.915 --> 02:12:21.395
<v Speaker 1>the tests,

02:12:24.220 --> 02:12:26.540
<v Speaker 1>then ship the image off to a registry.

02:12:28.860 --> 02:12:31.100
<v Speaker 0>So there's there's a couple of ways I

02:12:31.100 --> 02:12:32.699
<v Speaker 0>I do this.

02:12:33.020 --> 02:12:36.060
<v Speaker 0>There's a different types of tests, and you

02:12:36.060 --> 02:12:37.420
<v Speaker 0>can talk about that if you if you

02:12:37.420 --> 02:12:39.335
<v Speaker 0>want. What I normally do is for unit

02:12:39.335 --> 02:12:41.415
<v Speaker 0>tests is make them part of the image

02:12:41.415 --> 02:12:42.454
<v Speaker 0>build process.

02:12:42.614 --> 02:12:44.455
<v Speaker 0>Mhmm. And so that the build just stops

02:12:44.455 --> 02:12:45.815
<v Speaker 0>if you give a test field. There's no

02:12:45.815 --> 02:12:47.414
<v Speaker 0>point shipping an image anywhere.

02:12:47.735 --> 02:12:49.975
<v Speaker 0>Yep. And and then once I've got once

02:12:49.975 --> 02:12:51.415
<v Speaker 0>the unit test pass and I have an

02:12:51.415 --> 02:12:52.614
<v Speaker 0>image that works,

02:12:53.490 --> 02:12:55.170
<v Speaker 0>I then use that as a target for

02:12:55.170 --> 02:12:57.650
<v Speaker 0>my acceptance tests or end to end tests

02:12:57.650 --> 02:12:59.890
<v Speaker 0>or anything like that. It's a bit more

02:12:59.890 --> 02:13:01.730
<v Speaker 1>complicated, isn't it? Because I don't

02:13:02.690 --> 02:13:04.449
<v Speaker 1>I don't want to have the

02:13:05.890 --> 02:13:07.650
<v Speaker 1>unit testing tools in my image.

02:13:09.665 --> 02:13:10.945
<v Speaker 0>No. They wouldn't be in the image. You

02:13:10.945 --> 02:13:12.545
<v Speaker 0>would do that as part of the orchestration.

02:13:12.545 --> 02:13:13.825
<v Speaker 0>So you would run the image with an

02:13:13.825 --> 02:13:16.225
<v Speaker 0>overwrite with an entry point that you inject

02:13:16.225 --> 02:13:18.625
<v Speaker 0>into it that installs the mess and dependencies

02:13:18.625 --> 02:13:20.385
<v Speaker 0>that you need and so forth. Right. Right.

02:13:20.670 --> 02:13:22.190
<v Speaker 1>Yeah. That makes sense. So I've I've done

02:13:22.190 --> 02:13:24.030
<v Speaker 1>something similar where we we build

02:13:24.910 --> 02:13:26.030
<v Speaker 1>what did we do?

02:13:26.590 --> 02:13:28.110
<v Speaker 1>We built the prod image,

02:13:29.870 --> 02:13:32.750
<v Speaker 1>and then we built another target off it

02:13:32.750 --> 02:13:33.550
<v Speaker 1>that added

02:13:33.870 --> 02:13:34.110
<v Speaker 1>the

02:13:35.355 --> 02:13:36.315
<v Speaker 1>unit tests,

02:13:37.515 --> 02:13:39.675
<v Speaker 1>and its entry point was the tests, which

02:13:39.675 --> 02:13:40.955
<v Speaker 1>is different to what you're saying. You're saying

02:13:40.955 --> 02:13:42.875
<v Speaker 1>run the test as part of the build.

02:13:44.075 --> 02:13:45.675
<v Speaker 1>Maybe the last step of the build.

02:13:46.075 --> 02:13:47.515
<v Speaker 0>Yeah. Just because it's big enough.

02:13:48.730 --> 02:13:50.650
<v Speaker 1>And then there's all your acceptance tests, which

02:13:50.650 --> 02:13:52.409
<v Speaker 1>aren't, you know, the non unit tests

02:13:52.969 --> 02:13:55.369
<v Speaker 1>that you would then run on the after

02:13:55.369 --> 02:13:56.409
<v Speaker 1>you've built the image,

02:13:56.969 --> 02:13:58.650
<v Speaker 1>you then run a set of acceptance tests

02:13:58.650 --> 02:14:00.409
<v Speaker 1>on it before you push it out to

02:14:00.409 --> 02:14:01.210
<v Speaker 1>the registry,

02:14:03.135 --> 02:14:05.295
<v Speaker 1>which should be things like AI level tests

02:14:05.295 --> 02:14:06.014
<v Speaker 1>or

02:14:06.735 --> 02:14:08.574
<v Speaker 1>browser automation if you wanna do a little

02:14:08.574 --> 02:14:09.454
<v Speaker 1>bit of that.

02:14:10.255 --> 02:14:10.655
<v Speaker 1>Or

02:14:11.534 --> 02:14:12.655
<v Speaker 1>Why is this failing?

02:14:13.295 --> 02:14:14.655
<v Speaker 1>I didn't see the error message. What was

02:14:14.655 --> 02:14:15.054
<v Speaker 1>it?

02:14:15.534 --> 02:14:17.295
<v Speaker 0>It's saying I got a PDO.

02:14:22.389 --> 02:14:23.270
<v Speaker 0>But I do

02:14:26.150 --> 02:14:27.269
<v Speaker 1>In base.

02:14:31.590 --> 02:14:33.030
<v Speaker 1>Then you're extending from base.

02:14:36.085 --> 02:14:37.925
<v Speaker 1>Let's see the error message again.

02:14:43.685 --> 02:14:46.244
<v Speaker 1>So that's something you added to compose the

02:14:46.244 --> 02:14:46.645
<v Speaker 1>JSON.

02:14:48.180 --> 02:14:51.140
<v Speaker 1>So it's quite possible we've typoed it, but

02:14:51.140 --> 02:14:52.740
<v Speaker 1>it might be x dash p d o

02:14:52.740 --> 02:14:55.860
<v Speaker 1>underscore minus Oh, yeah. F s o underscore.

02:14:56.900 --> 02:14:57.460
<v Speaker 0>Yeah.

02:15:00.340 --> 02:15:00.820
<v Speaker 0>No. Right.

02:15:03.835 --> 02:15:04.715
<v Speaker 0>Show the camera.

02:15:21.570 --> 02:15:23.010
<v Speaker 0>Any more dad jokes?

02:15:24.450 --> 02:15:25.330
<v Speaker 0>No.

02:15:28.690 --> 02:15:31.250
<v Speaker 1>There's a comment in the chat from Robert's

02:15:32.074 --> 02:15:33.594
<v Speaker 1>Rawkode.

02:15:34.155 --> 02:15:36.235
<v Speaker 1>My wife always says, what's the prob what's

02:15:36.235 --> 02:15:38.554
<v Speaker 1>the problem of upping the project and serving

02:15:38.554 --> 02:15:40.635
<v Speaker 1>it to the public? I should show this

02:15:40.635 --> 02:15:41.594
<v Speaker 1>stream to her.

02:15:42.074 --> 02:15:43.755
<v Speaker 1>The part of actually seeing buttons and forms

02:15:43.755 --> 02:15:46.074
<v Speaker 1>running is crumbs. Debugging and getting things to

02:15:46.074 --> 02:15:47.880
<v Speaker 1>work takes most of the time. I I

02:15:47.880 --> 02:15:48.760
<v Speaker 1>agree with that.

02:15:49.159 --> 02:15:50.360
<v Speaker 0>Yeah. Definitely.

02:15:51.000 --> 02:15:53.159
<v Speaker 1>Development is 90%

02:15:53.159 --> 02:15:54.039
<v Speaker 1>debugging.

02:15:54.600 --> 02:15:55.960
<v Speaker 1>And, actually, I think in it, it's quite

02:15:55.960 --> 02:15:56.679
<v Speaker 1>an issue

02:15:58.040 --> 02:15:59.159
<v Speaker 1>that a lot that a lot of people

02:15:59.159 --> 02:16:01.355
<v Speaker 1>don't like doing it because it leads people

02:16:01.355 --> 02:16:03.595
<v Speaker 1>to only ever write new code on nice

02:16:03.595 --> 02:16:05.115
<v Speaker 1>greenfield projects.

02:16:05.595 --> 02:16:08.795
<v Speaker 1>And the real valuable stuff is sometimes, like,

02:16:09.035 --> 02:16:10.555
<v Speaker 1>bashing your head against the wall

02:16:10.795 --> 02:16:12.235
<v Speaker 1>till you figure it out

02:16:12.875 --> 02:16:14.795
<v Speaker 1>and being comfortable in that mindset.

02:16:16.510 --> 02:16:17.309
<v Speaker 0>Yep.

02:16:17.790 --> 02:16:19.630
<v Speaker 0>Well, that build just failed there because we

02:16:19.630 --> 02:16:20.670
<v Speaker 0>don't have git.

02:16:21.469 --> 02:16:23.229
<v Speaker 0>So I've added git.

02:16:24.750 --> 02:16:26.429
<v Speaker 1>Oh, you need git for composer, if that

02:16:26.429 --> 02:16:27.630
<v Speaker 1>makes sense. Yeah. We did.

02:16:32.665 --> 02:16:35.385
<v Speaker 0>I have excited the composer installed locally, which

02:16:35.385 --> 02:16:37.625
<v Speaker 0>means we never had to see see why

02:16:37.625 --> 02:16:39.064
<v Speaker 0>you shouldn't run any of the commands on

02:16:39.064 --> 02:16:40.665
<v Speaker 0>your local machine because

02:16:41.705 --> 02:16:44.190
<v Speaker 0>you need to confirm that automation works. Yeah.

02:16:44.190 --> 02:16:45.950
<v Speaker 1>We didn't do composer install in your d

02:16:45.950 --> 02:16:46.750
<v Speaker 1>shell, did we?

02:16:47.229 --> 02:16:49.950
<v Speaker 0>We did. But because all these dependencies were

02:16:49.950 --> 02:16:52.830
<v Speaker 0>there, it didn't ever have to shell exec

02:16:52.830 --> 02:16:54.431
<v Speaker 0>out to the git command.

02:16:56.270 --> 02:16:57.549
<v Speaker 0>Whereas in this environment,

02:16:58.754 --> 02:16:59.476
<v Speaker 0>does.

02:17:01.875 --> 02:17:03.395
<v Speaker 1>That's an interesting one.

02:17:03.715 --> 02:17:05.795
<v Speaker 0>Okay. That's a good point. The Docker

02:17:07.555 --> 02:17:09.875
<v Speaker 0>the Docker ignore file should have the vendor

02:17:09.875 --> 02:17:10.354
<v Speaker 0>directory.

02:17:13.449 --> 02:17:15.449
<v Speaker 0>So it's never shipped with the context for

02:17:15.449 --> 02:17:16.490
<v Speaker 0>clean builds

02:17:17.129 --> 02:17:18.570
<v Speaker 0>and node modules.

02:17:21.049 --> 02:17:23.209
<v Speaker 0>Docker Speed it all up. Right?

02:17:23.770 --> 02:17:24.729
<v Speaker 0>Node modules.

02:17:26.325 --> 02:17:28.965
<v Speaker 0>It's called vendor. Yeah. Vendor. Yeah.

02:17:29.365 --> 02:17:30.645
<v Speaker 1>Docker file.

02:17:32.485 --> 02:17:34.084
<v Speaker 1>Everything we keep editing.

02:17:35.205 --> 02:17:35.846
<v Speaker 1>Everything.

02:17:38.325 --> 02:17:39.924
<v Speaker 1>There's probably some

02:17:40.601 --> 02:17:41.721
<v Speaker 1>cash stuff.

02:17:44.681 --> 02:17:46.200
<v Speaker 0>What else do we not need?

02:17:46.601 --> 02:17:47.241
<v Speaker 0>Storage.

02:17:49.641 --> 02:17:50.601
<v Speaker 1>Database?

02:17:51.320 --> 02:17:53.000
<v Speaker 1>Yeah. We won't put it up for now.

02:17:55.174 --> 02:17:56.535
<v Speaker 0>But once this builds,

02:17:56.693 --> 02:17:59.575
<v Speaker 0>hopefully, the test pass in the image,

02:17:59.734 --> 02:18:02.135
<v Speaker 0>we can add this we can deploy the

02:18:02.135 --> 02:18:04.773
<v Speaker 0>Kubernetes deployment again, have those containers running side

02:18:04.773 --> 02:18:05.334
<v Speaker 0>by side.

02:18:07.290 --> 02:18:09.050
<v Speaker 0>Oh, it's complaining. We don't have the ZIP

02:18:09.050 --> 02:18:10.011
<v Speaker 0>extension.

02:18:10.410 --> 02:18:12.971
<v Speaker 0>Hopefully, it still passes, but we'll see.

02:18:21.484 --> 02:18:23.405
<v Speaker 0>I'll start that just now anyway.

02:18:25.564 --> 02:18:26.125
<v Speaker 0>So

02:18:26.443 --> 02:18:27.325
<v Speaker 0>and I

02:18:27.645 --> 02:18:29.165
<v Speaker 0>believe that actually needs

02:18:29.324 --> 02:18:29.564
<v Speaker 0>the

02:18:31.165 --> 02:18:32.284
<v Speaker 0>oh, no. It's just a command.

02:18:38.490 --> 02:18:41.050
<v Speaker 1>If you do prefer dist, it won't need

02:18:41.050 --> 02:18:41.610
<v Speaker 1>that.

02:18:43.851 --> 02:18:45.210
<v Speaker 1>So it needs to zip it because for

02:18:45.210 --> 02:18:46.971
<v Speaker 1>some dependencies, it'll download

02:18:47.715 --> 02:18:49.155
<v Speaker 1>download a tarball

02:18:49.314 --> 02:18:50.995
<v Speaker 1>of the release.

02:18:51.475 --> 02:18:52.275
<v Speaker 1>Oh.

02:18:52.594 --> 02:18:54.035
<v Speaker 1>You force it to always do a Git

02:18:54.035 --> 02:18:54.594
<v Speaker 1>clone,

02:18:56.915 --> 02:18:59.395
<v Speaker 1>which might isn't what you want on prod.

02:18:59.635 --> 02:18:59.875
<v Speaker 0>Alright.

02:19:02.059 --> 02:19:03.420
<v Speaker 1>Because that would also

02:19:05.260 --> 02:19:07.820
<v Speaker 1>there's a git attribute that excludes things. Right?

02:19:07.900 --> 02:19:08.700
<v Speaker 1>Mhmm.

02:19:09.180 --> 02:19:10.860
<v Speaker 1>And that's used to exclude things from the

02:19:10.860 --> 02:19:11.740
<v Speaker 1>tarball version.

02:19:14.135 --> 02:19:17.094
<v Speaker 1>So some dependencies will end up shipping you

02:19:17.094 --> 02:19:19.655
<v Speaker 1>their unit tests and their documentation and stuff

02:19:21.174 --> 02:19:23.575
<v Speaker 1>if you force this. If you prefer So

02:19:23.575 --> 02:19:26.295
<v Speaker 0>the dev command was available in the extension

02:19:25.770 --> 02:19:27.850
<v Speaker 0>extension before I started this build. It wouldn't

02:19:27.850 --> 02:19:29.930
<v Speaker 0>have pulled with the get anyway. So

02:19:32.170 --> 02:19:33.689
<v Speaker 1>Yes. I think it might be falling back

02:19:33.689 --> 02:19:35.209
<v Speaker 1>to doing a clone in all those instances

02:19:35.209 --> 02:19:36.889
<v Speaker 1>and it'll be fine. Yeah. I think it

02:19:36.889 --> 02:19:37.129
<v Speaker 0>is.

02:19:39.334 --> 02:19:41.254
<v Speaker 1>But may but I don't know. I don't

02:19:41.254 --> 02:19:42.934
<v Speaker 1>know. Maybe you don't care about whether that's

02:19:42.934 --> 02:19:43.975
<v Speaker 1>in your image or not.

02:19:45.014 --> 02:19:47.575
<v Speaker 1>I know some people who have their own

02:19:47.734 --> 02:19:48.615
<v Speaker 1>scripts

02:19:48.774 --> 02:19:49.574
<v Speaker 1>post

02:19:49.814 --> 02:19:51.814
<v Speaker 1>you know, compose a post install scripts that

02:19:51.814 --> 02:19:53.975
<v Speaker 1>goes through and deletes loads of stuff from

02:19:53.975 --> 02:19:55.015
<v Speaker 1>the vendor folder

02:19:56.181 --> 02:19:58.820
<v Speaker 1>to keep the package size down,

02:19:59.061 --> 02:20:00.581
<v Speaker 1>tests and that sort of thing.

02:20:05.061 --> 02:20:06.020
<v Speaker 1>Oh, this is slow.

02:20:09.145 --> 02:20:09.705
<v Speaker 1>Should have used

02:20:12.665 --> 02:20:14.586
<v Speaker 0>Composer two. Hang on.

02:20:15.386 --> 02:20:16.905
<v Speaker 1>Yeah. Don't know if it's in the Docker

02:20:16.905 --> 02:20:18.665
<v Speaker 1>image yet, but it does parallel downloads.

02:20:22.840 --> 02:20:24.440
<v Speaker 0>Hopefully, it won't be long.

02:20:25.320 --> 02:20:27.080
<v Speaker 0>We're close. We're almost there.

02:20:28.120 --> 02:20:30.280
<v Speaker 0>I mean, once we get this once we

02:20:30.280 --> 02:20:32.360
<v Speaker 0>get this deployed, you know, that this code

02:20:32.360 --> 02:20:33.480
<v Speaker 0>is all available.

02:20:34.600 --> 02:20:36.040
<v Speaker 0>So get that

02:20:36.695 --> 02:20:38.296
<v Speaker 0>that's Rawkode,

02:20:38.775 --> 02:20:40.376
<v Speaker 0>PHP examples.

02:20:42.295 --> 02:20:45.175
<v Speaker 0>So Docker Kubernetes is the well, I haven't

02:20:45.175 --> 02:20:47.735
<v Speaker 0>pushed it. This is the slim stuff from

02:20:47.735 --> 02:20:48.615
<v Speaker 0>last week,

02:20:49.335 --> 02:20:51.016
<v Speaker 0>which is now on a slim directory.

02:20:52.540 --> 02:20:54.381
<v Speaker 0>And I will push all of this code

02:20:54.381 --> 02:20:57.020
<v Speaker 0>with the Laravel directory or the Peng CRM

02:20:57.020 --> 02:20:57.900
<v Speaker 0>directory.

02:20:58.141 --> 02:21:00.061
<v Speaker 0>And I think maybe another good session for

02:21:00.061 --> 02:21:02.061
<v Speaker 0>another time would just be maybe cleaning this

02:21:02.061 --> 02:21:04.301
<v Speaker 0>up and and optimizing it for production.

02:21:04.745 --> 02:21:06.345
<v Speaker 0>I don't think we're gonna have to to

02:21:06.345 --> 02:21:07.386
<v Speaker 0>change to

02:21:07.625 --> 02:21:09.545
<v Speaker 0>to do that today, but we will get

02:21:09.545 --> 02:21:10.186
<v Speaker 0>it working.

02:21:14.345 --> 02:21:17.465
<v Speaker 0>There's a lot involved in containerizing and deploying

02:21:17.465 --> 02:21:19.865
<v Speaker 0>something to Kubernetes. It's it's nontrivial.

02:21:22.189 --> 02:21:24.189
<v Speaker 1>We've only been doing it for half an

02:21:24.189 --> 02:21:24.750
<v Speaker 1>hour.

02:21:26.510 --> 02:21:28.270
<v Speaker 1>Might be interesting to deploy it to some

02:21:28.270 --> 02:21:29.310
<v Speaker 1>cloud somewhere

02:21:30.029 --> 02:21:31.470
<v Speaker 1>in a future session,

02:21:31.710 --> 02:21:32.830
<v Speaker 1>work through some issues,

02:21:33.854 --> 02:21:35.055
<v Speaker 1>pick a cloud.

02:21:36.654 --> 02:21:38.095
<v Speaker 0>Well, I mean, I work for a cloud,

02:21:38.095 --> 02:21:40.015
<v Speaker 0>so we'd have to use them, obviously.

02:21:40.255 --> 02:21:42.255
<v Speaker 1>So we use different. We'd

02:21:42.255 --> 02:21:42.734
<v Speaker 1>use a diff

02:21:46.210 --> 02:21:48.850
<v Speaker 1>but that's the promise of Kubernetes. Right? Is

02:21:48.850 --> 02:21:49.970
<v Speaker 1>that you can

02:21:50.449 --> 02:21:52.210
<v Speaker 1>deploy to whichever cloud

02:21:53.569 --> 02:21:54.610
<v Speaker 1>you fancy.

02:21:54.770 --> 02:21:55.970
<v Speaker 1>Oh, yeah. Totally.

02:21:57.090 --> 02:21:59.250
<v Speaker 0>I mean, Kubernetes is an API. And if

02:21:59.250 --> 02:22:01.810
<v Speaker 0>you deploy to that API, the cloud becomes

02:22:01.125 --> 02:22:02.645
<v Speaker 0>irrelevant unless

02:22:02.965 --> 02:22:05.685
<v Speaker 0>you're consuming some managed services. In which case,

02:22:05.685 --> 02:22:07.605
<v Speaker 0>of course, you're gonna get a a level

02:22:07.605 --> 02:22:10.085
<v Speaker 0>of vendor lockout with each cloud. Yeah.

02:22:11.205 --> 02:22:13.845
<v Speaker 0>But the the Kubernetes API being your deployment

02:22:13.845 --> 02:22:16.005
<v Speaker 0>API gives you that freedom to move clouds

02:22:16.005 --> 02:22:18.170
<v Speaker 0>if you wish and take out managed services

02:22:18.170 --> 02:22:18.971
<v Speaker 0>where needed.

02:22:23.051 --> 02:22:24.570
<v Speaker 0>Or as you said last week, just do

02:22:24.570 --> 02:22:26.811
<v Speaker 0>a Heroku deploy and

02:22:27.770 --> 02:22:29.610
<v Speaker 0>skip all that. I know you're saying that

02:22:29.610 --> 02:22:30.490
<v Speaker 1>sarcastically,

02:22:30.490 --> 02:22:30.891
<v Speaker 1>but

02:22:31.886 --> 02:22:34.365
<v Speaker 1>there's a lot of small teams don't need

02:22:34.365 --> 02:22:35.565
<v Speaker 1>to be doing this stuff.

02:22:36.125 --> 02:22:38.205
<v Speaker 0>No. No. Just yeah. If you're looking at

02:22:38.205 --> 02:22:40.766
<v Speaker 0>Kubernetes, I'd hope that you're deploying more than

02:22:41.405 --> 02:22:42.846
<v Speaker 0>a Laravel application.

02:22:43.085 --> 02:22:44.605
<v Speaker 1>Yeah. More than we're deploying today.

02:22:46.789 --> 02:22:49.189
<v Speaker 1>Because you can I mean, this repository's got

02:22:49.189 --> 02:22:50.950
<v Speaker 1>a profile in it, so you can

02:22:51.989 --> 02:22:53.910
<v Speaker 1>just push it to a cloud provider?

02:22:55.829 --> 02:22:57.909
<v Speaker 0>This is really slow. That's over five minutes

02:22:57.909 --> 02:22:58.550
<v Speaker 0>now.

02:23:00.630 --> 02:23:02.154
<v Speaker 1>So should we think about why max is

02:23:02.154 --> 02:23:02.715
<v Speaker 1>slow?

02:23:04.875 --> 02:23:06.715
<v Speaker 0>Well, that's not why this is slow. This

02:23:06.795 --> 02:23:08.795
<v Speaker 0>in this instance, though. Right? Because

02:23:09.114 --> 02:23:11.274
<v Speaker 1>Oh, yeah. This is just This is just

02:23:11.274 --> 02:23:12.635
<v Speaker 0>the build context,

02:23:12.635 --> 02:23:13.274
<v Speaker 0>which is a

02:23:13.760 --> 02:23:16.640
<v Speaker 0>tarzip of the directory excluding the Docker ignore

02:23:16.640 --> 02:23:18.560
<v Speaker 0>files sent to the Docker engine and the

02:23:18.560 --> 02:23:21.120
<v Speaker 0>virtual machine. So this is just slow because

02:23:21.840 --> 02:23:22.720
<v Speaker 0>composers

02:23:23.120 --> 02:23:25.279
<v Speaker 0>I mean, we are using the get option

02:23:25.279 --> 02:23:27.199
<v Speaker 0>because that wasn't available, which it probably has

02:23:27.199 --> 02:23:27.920
<v Speaker 0>thrown it down.

02:23:29.495 --> 02:23:30.376
<v Speaker 0>Failed.

02:23:32.295 --> 02:23:33.176
<v Speaker 1>No.

02:23:35.495 --> 02:23:36.775
<v Speaker 0>So why is it failed?

02:23:44.260 --> 02:23:46.180
<v Speaker 0>So Doing the database.

02:23:46.180 --> 02:23:46.580
<v Speaker 0>So

02:23:48.980 --> 02:23:50.500
<v Speaker 1>that's the class map

02:23:50.740 --> 02:23:52.660
<v Speaker 1>optimizer that runs at the end.

02:23:53.860 --> 02:23:54.740
<v Speaker 1>Having a problem.

02:24:02.465 --> 02:24:04.945
<v Speaker 0>Why did I have a problem, Kino? Why?

02:24:05.104 --> 02:24:06.944
<v Speaker 1>Hey. That isn't a file or a c.

02:24:06.944 --> 02:24:08.785
<v Speaker 1>It isn't a folder or

02:24:13.529 --> 02:24:15.610
<v Speaker 1>Fold the raw file. Weird.

02:24:16.329 --> 02:24:19.369
<v Speaker 1>It should be we copied every oh, no.

02:24:19.369 --> 02:24:21.449
<v Speaker 0>We haven't copied the code in yet. So

02:24:21.449 --> 02:24:23.290
<v Speaker 0>the optimizer requires

02:24:23.290 --> 02:24:24.569
<v Speaker 0>the code to be there.

02:24:26.165 --> 02:24:28.165
<v Speaker 1>Yeah. Just take out the dash o then.

02:24:28.805 --> 02:24:29.925
<v Speaker 1>What we can do

02:24:30.564 --> 02:24:32.005
<v Speaker 1>take out the dash o there.

02:24:32.564 --> 02:24:34.484
<v Speaker 0>But we have to rerun all anyway because

02:24:34.484 --> 02:24:36.564
<v Speaker 0>this step failed. But take out the o

02:24:36.564 --> 02:24:38.005
<v Speaker 1>anyway because this is the way you should

02:24:38.005 --> 02:24:39.285
<v Speaker 1>do it. Take out the o at that

02:24:39.285 --> 02:24:42.120
<v Speaker 1>step. Then optimize it later. And then after

02:24:42.120 --> 02:24:44.601
<v Speaker 1>the dump auto loaded dash o

02:24:48.360 --> 02:24:49.801
<v Speaker 1>as a second step,

02:24:50.761 --> 02:24:52.040
<v Speaker 1>which I think is better in terms of

02:24:52.040 --> 02:24:52.841
<v Speaker 1>cache and validation.

02:24:54.485 --> 02:24:56.405
<v Speaker 0>Well, let's just hope this is much faster

02:24:56.405 --> 02:24:57.686
<v Speaker 0>with that zip

02:24:57.926 --> 02:24:59.365
<v Speaker 0>binary available.

02:25:00.485 --> 02:25:02.886
<v Speaker 0>Otherwise, you've got five minutes of dad jokes

02:25:02.886 --> 02:25:03.686
<v Speaker 0>to tell.

02:25:06.405 --> 02:25:07.525
<v Speaker 1>I have to go soon.

02:25:11.900 --> 02:25:13.420
<v Speaker 1>I can leave you to finish the stream

02:25:13.420 --> 02:25:14.061
<v Speaker 1>again.

02:25:18.300 --> 02:25:20.380
<v Speaker 1>Oh, you should've you should've put the ZIP

02:25:20.380 --> 02:25:21.180
<v Speaker 1>on a separate line.

02:25:24.805 --> 02:25:28.005
<v Speaker 0>Just like the population of the yeah. Those

02:25:28.005 --> 02:25:30.005
<v Speaker 0>are quick, though. I mean, that's gonna be

02:25:30.005 --> 02:25:31.285
<v Speaker 0>done in ten seconds.

02:25:32.245 --> 02:25:33.685
<v Speaker 1>It's been running for twenty six seconds.

02:25:34.280 --> 02:25:36.200
<v Speaker 0>See. See. Pretty quick.

02:25:37.080 --> 02:25:37.960
<v Speaker 0>Hopefully,

02:25:37.960 --> 02:25:40.280
<v Speaker 0>this is much faster. That it doesn't have

02:25:40.280 --> 02:25:42.200
<v Speaker 0>to go with the GitHub API.

02:25:42.600 --> 02:25:44.840
<v Speaker 1>Yeah. And I've noticed some people who

02:25:46.040 --> 02:25:47.240
<v Speaker 1>are

02:25:46.936 --> 02:25:48.695
<v Speaker 1>making this a lot faster even in the

02:25:48.695 --> 02:25:51.735
<v Speaker 1>uncached state by doing things like sharing the

02:25:52.295 --> 02:25:54.056
<v Speaker 1>composer cache as a volume

02:25:56.136 --> 02:25:57.496
<v Speaker 1>and using cache

02:25:57.895 --> 02:25:59.096
<v Speaker 1>cache from

02:25:59.400 --> 02:26:01.641
<v Speaker 1>to point to in it the previous image,

02:26:02.360 --> 02:26:04.681
<v Speaker 1>which has its composer cache populated and that

02:26:04.681 --> 02:26:06.440
<v Speaker 1>sort of magic.

02:26:07.561 --> 02:26:10.120
<v Speaker 1>So there are ways of speeding up composer

02:26:10.120 --> 02:26:10.761
<v Speaker 1>install.

02:26:14.235 --> 02:26:15.355
<v Speaker 0>Yeah. Definitely.

02:26:16.315 --> 02:26:18.395
<v Speaker 0>It's a good way to do it. Using,

02:26:18.395 --> 02:26:20.235
<v Speaker 0>like like, the cache from this very handy

02:26:20.235 --> 02:26:21.355
<v Speaker 0>for stuff like that.

02:26:22.395 --> 02:26:24.556
<v Speaker 0>We're committed we're committed now. So

02:26:39.645 --> 02:26:42.285
<v Speaker 0>Like, why is it still updating dependency? I

02:26:42.285 --> 02:26:43.885
<v Speaker 0>mean, it's not even at the fetch stage

02:26:43.885 --> 02:26:45.645
<v Speaker 0>yet, is it? Oh, there we go.

02:26:47.484 --> 02:26:50.285
<v Speaker 1>Yeah. So these installs are probably the zips.

02:26:50.685 --> 02:26:52.445
<v Speaker 0>Yeah. These are much faster. You can see

02:26:52.445 --> 02:26:53.805
<v Speaker 0>it blazing through this time.

02:26:55.141 --> 02:26:57.061
<v Speaker 1>And one of the improvements in Composer too

02:26:57.061 --> 02:26:58.421
<v Speaker 1>is that resolution

02:26:59.700 --> 02:27:01.301
<v Speaker 1>step is faster much faster.

02:27:07.235 --> 02:27:08.995
<v Speaker 0>And I guess even if it was using

02:27:08.995 --> 02:27:12.275
<v Speaker 0>concurrent downloads in Composer two, I don't even

02:27:12.275 --> 02:27:13.476
<v Speaker 0>think I expose

02:27:13.795 --> 02:27:16.035
<v Speaker 0>many cores to my Docker daemon on Mac.

02:27:16.035 --> 02:27:17.715
<v Speaker 0>So maybe I'd be able to take advantage

02:27:17.715 --> 02:27:18.195
<v Speaker 0>of them.

02:27:19.711 --> 02:27:21.950
<v Speaker 0>I'm assuming it does the concurrency by spinning

02:27:21.950 --> 02:27:24.591
<v Speaker 0>up multiple threads and having them each download

02:27:24.591 --> 02:27:26.031
<v Speaker 0>one. So it'd be

02:27:26.910 --> 02:27:28.671
<v Speaker 0>parallel downloads would be how many cores I

02:27:28.671 --> 02:27:29.391
<v Speaker 0>have, I guess.

02:27:30.030 --> 02:27:32.750
<v Speaker 1>It depends if it's CPU bound or network

02:27:32.750 --> 02:27:33.150
<v Speaker 1>bound.

02:27:34.965 --> 02:27:36.405
<v Speaker 1>If it's IO bound

02:27:42.005 --> 02:27:43.604
<v Speaker 1>if it if it's sort of network IO

02:27:43.604 --> 02:27:45.765
<v Speaker 1>bound, it might not matter how many calls

02:27:45.765 --> 02:27:48.244
<v Speaker 1>you're using, having multiple downloads at the same

02:27:48.244 --> 02:27:49.364
<v Speaker 1>time. I mean, at the other end of

02:27:49.364 --> 02:27:49.765
<v Speaker 1>the network.

02:27:51.770 --> 02:27:53.450
<v Speaker 0>Well,

02:27:54.170 --> 02:27:55.130
<v Speaker 0>it was faster,

02:27:55.450 --> 02:27:56.650
<v Speaker 0>but unfortunately,

02:27:56.970 --> 02:27:58.730
<v Speaker 0>the seed thing was

02:27:59.530 --> 02:28:01.290
<v Speaker 0>still doing that step.

02:28:02.490 --> 02:28:02.890
<v Speaker 1>Oh.

02:28:09.104 --> 02:28:09.825
<v Speaker 0>Why?

02:28:13.505 --> 02:28:15.745
<v Speaker 1>In composer JSON, is there a post install

02:28:15.745 --> 02:28:16.064
<v Speaker 1>hook?

02:28:23.490 --> 02:28:24.131
<v Speaker 0>Yep.

02:28:25.011 --> 02:28:26.931
<v Speaker 0>I guess that's been true as the problem.

02:28:26.931 --> 02:28:27.090
<v Speaker 0>Right?

02:28:29.275 --> 02:28:29.995
<v Speaker 0>Yeah.

02:28:31.835 --> 02:28:33.515
<v Speaker 1>It's not default flagged to one, so us

02:28:33.515 --> 02:28:35.115
<v Speaker 1>leaving the flag out hasn't helped.

02:28:41.435 --> 02:28:43.435
<v Speaker 0>It it doesn't really matter at this stage,

02:28:43.435 --> 02:28:45.140
<v Speaker 0>does it? Let's Let's just take the flag

02:28:45.140 --> 02:28:47.460
<v Speaker 1>out of the thing. Viewers

02:28:47.460 --> 02:28:48.500
<v Speaker 1>will get the point.

02:28:52.180 --> 02:28:52.900
<v Speaker 1>Oh.

02:28:53.060 --> 02:28:55.220
<v Speaker 0>But then we can't leverage the build cache

02:28:55.220 --> 02:28:57.460
<v Speaker 0>when we don't modify the composer dot JSON.

02:28:57.460 --> 02:28:58.979
<v Speaker 0>And I still think that's important. So I'm

02:28:58.979 --> 02:29:00.825
<v Speaker 0>just gonna disable the optimize and we'll do

02:29:00.825 --> 02:29:01.865
<v Speaker 0>it explicitly.

02:29:02.104 --> 02:29:03.944
<v Speaker 0>Because it's a deployment concern. I don't think

02:29:03.944 --> 02:29:05.545
<v Speaker 0>the compose of the JSON should be setting

02:29:05.545 --> 02:29:06.665
<v Speaker 0>that anyway.

02:29:08.185 --> 02:29:10.265
<v Speaker 0>I got root. I

02:29:11.865 --> 02:29:14.425
<v Speaker 0>will decide when to optimize my auto loader.

02:29:18.229 --> 02:29:20.310
<v Speaker 0>Yeah. Which means this is gonna take thirty

02:29:20.310 --> 02:29:22.710
<v Speaker 0>seconds to do update dependencies.

02:29:22.950 --> 02:29:25.030
<v Speaker 0>I don't if that was the extension thing.

02:29:25.030 --> 02:29:27.590
<v Speaker 0>So this is gonna take sixty seconds based

02:29:27.590 --> 02:29:29.670
<v Speaker 0>on the last run, but not too long.

02:29:30.445 --> 02:29:32.685
<v Speaker 0>Hopefully, it wanted to optimize on the data

02:29:32.685 --> 02:29:34.285
<v Speaker 0>loader, and it'll do it on our manual

02:29:34.285 --> 02:29:36.445
<v Speaker 0>step. You know, just so it's really clear

02:29:36.445 --> 02:29:38.605
<v Speaker 0>why we're kinda fighting with this.

02:29:39.005 --> 02:29:41.245
<v Speaker 0>Mhmm. If we had moved this line

02:29:41.965 --> 02:29:43.965
<v Speaker 0>here, we wouldn't have this problem.

02:29:44.500 --> 02:29:47.460
<v Speaker 0>But because composer install, all they need is

02:29:47.460 --> 02:29:49.700
<v Speaker 0>to run when the composer dot JSON changes.

02:29:50.020 --> 02:29:51.460
<v Speaker 0>We're trying to make sure that we leverage

02:29:51.460 --> 02:29:53.220
<v Speaker 0>the build cache. Because our composer dot JSON

02:29:53.220 --> 02:29:55.220
<v Speaker 0>probably won't change often. Which

02:29:56.820 --> 02:29:58.580
<v Speaker 0>means that we only need to do this

02:29:58.580 --> 02:29:59.300
<v Speaker 0>step

02:29:59.635 --> 02:30:00.596
<v Speaker 0>forward.

02:30:01.795 --> 02:30:03.955
<v Speaker 1>Yeah. And that done per auto loaded does

02:30:04.035 --> 02:30:06.436
<v Speaker 1>the reason it's not default is it scans

02:30:06.436 --> 02:30:07.955
<v Speaker 1>all the files for PHP classes.

02:30:14.859 --> 02:30:15.740
<v Speaker 1>And then

02:30:16.060 --> 02:30:17.980
<v Speaker 1>builds a big class map, I think.

02:30:20.220 --> 02:30:21.420
<v Speaker 1>There's a bunch of other stuff we could

02:30:21.420 --> 02:30:23.899
<v Speaker 1>do to optimize PHP, optimize FPM.

02:30:26.556 --> 02:30:28.716
<v Speaker 1>You can prewarm the build. You can prewarm

02:30:28.716 --> 02:30:29.596
<v Speaker 1>the op cache.

02:30:31.516 --> 02:30:32.956
<v Speaker 1>You can now

02:30:35.755 --> 02:30:37.516
<v Speaker 1>actually, I don't think you can do anything

02:30:37.516 --> 02:30:39.275
<v Speaker 1>to prewarm the new

02:30:39.676 --> 02:30:40.955
<v Speaker 1>preloader cache, but

02:30:42.890 --> 02:30:44.090
<v Speaker 1>other things we could do to make the

02:30:44.090 --> 02:30:45.930
<v Speaker 1>container more ready to serve stuff.

02:30:47.130 --> 02:30:49.050
<v Speaker 1>Yeah. You know, the op cache, the in

02:30:49.050 --> 02:30:50.570
<v Speaker 1>memory cache, you can give it a file

02:30:50.570 --> 02:30:51.851
<v Speaker 1>based backup

02:30:52.330 --> 02:30:52.970
<v Speaker 1>for So

02:30:53.850 --> 02:30:56.170
<v Speaker 1>then if if that file based back

02:30:56.735 --> 02:30:58.975
<v Speaker 1>file based sort of second layer cache is

02:30:58.975 --> 02:31:01.775
<v Speaker 1>present in the image, it'll start faster

02:31:02.015 --> 02:31:03.295
<v Speaker 1>on the first stop.

02:31:04.975 --> 02:31:05.935
<v Speaker 1>Good for workers.

02:31:15.720 --> 02:31:16.440
<v Speaker 0>I'm Right.

02:31:19.560 --> 02:31:20.920
<v Speaker 1>Let's just move it so we copy everything

02:31:20.920 --> 02:31:22.040
<v Speaker 1>in. We're not gonna get to the bottom

02:31:22.040 --> 02:31:22.360
<v Speaker 1>of this.

02:31:26.115 --> 02:31:28.275
<v Speaker 1>One of us can figure it out later.

02:31:31.555 --> 02:31:33.155
<v Speaker 0>It's almost therapeutic.

02:31:33.155 --> 02:31:33.795
<v Speaker 0>Right?

02:31:35.314 --> 02:31:36.435
<v Speaker 0>Maybe not quite.

02:31:38.910 --> 02:31:40.830
<v Speaker 1>Alright. I need to go in about eight

02:31:40.830 --> 02:31:41.470
<v Speaker 1>minutes.

02:31:41.790 --> 02:31:43.550
<v Speaker 1>What should what should we achieve between now

02:31:43.550 --> 02:31:45.470
<v Speaker 1>and then? We'll get this working. Let's assume

02:31:45.470 --> 02:31:47.229
<v Speaker 0>that works. So next, we need to handle

02:31:47.229 --> 02:31:49.230
<v Speaker 0>the migration step of this deployment.

02:31:49.550 --> 02:31:51.545
<v Speaker 1>Yeah. So it's just how this works. Now

02:31:51.545 --> 02:31:54.346
<v Speaker 0>there are two different approaches to doing database

02:31:54.346 --> 02:31:57.145
<v Speaker 0>migrations depending on what your your team does.

02:31:57.386 --> 02:31:59.785
<v Speaker 0>So the first one, which is probably the

02:31:59.785 --> 02:32:00.985
<v Speaker 0>easiest one to get started,

02:32:02.471 --> 02:32:04.630
<v Speaker 0>is to use something called an edit container

02:32:04.630 --> 02:32:05.910
<v Speaker 0>within Kubernetes.

02:32:08.630 --> 02:32:10.070
<v Speaker 0>It works like this. We give it a

02:32:10.070 --> 02:32:11.590
<v Speaker 0>name. We tell it the image that we

02:32:11.590 --> 02:32:13.030
<v Speaker 0>want to run. Now, it's just gonna be

02:32:13.030 --> 02:32:14.391
<v Speaker 0>our FTM one in this case.

02:32:18.425 --> 02:32:20.905
<v Speaker 0>And we can tell it to run a

02:32:20.905 --> 02:32:21.625
<v Speaker 0>command.

02:32:23.465 --> 02:32:26.105
<v Speaker 0>So I'm just gonna do echo because

02:32:27.385 --> 02:32:29.625
<v Speaker 0>we have not deployed the database to Kubernetes,

02:32:30.090 --> 02:32:30.970
<v Speaker 0>We're

02:32:30.970 --> 02:32:33.449
<v Speaker 0>running very low at time. And you can

02:32:33.449 --> 02:32:35.930
<v Speaker 0>imagine that what this was actually doing would

02:32:35.930 --> 02:32:36.490
<v Speaker 0>be

02:32:37.770 --> 02:32:39.770
<v Speaker 0>a it just go and make it won't

02:32:39.770 --> 02:32:41.689
<v Speaker 0>be there. PHP,

02:32:43.210 --> 02:32:43.930
<v Speaker 0>artisan,

02:32:45.245 --> 02:32:47.005
<v Speaker 0>DB migrate.

02:32:47.405 --> 02:32:49.725
<v Speaker 0>Now this runs in the container. You're you've

02:32:49.725 --> 02:32:51.885
<v Speaker 0>got a guarantee with the Kubernetes API that

02:32:51.965 --> 02:32:53.886
<v Speaker 0>and no containers

02:32:53.965 --> 02:32:57.085
<v Speaker 0>for lane 24 down will run until this

02:32:57.085 --> 02:32:58.445
<v Speaker 0>executes successfully.

02:32:59.710 --> 02:33:00.910
<v Speaker 1>So does that mean

02:33:01.230 --> 02:33:03.070
<v Speaker 1>in in terms of deployment,

02:33:03.070 --> 02:33:05.070
<v Speaker 1>what does that mean for downtime? How how

02:33:05.070 --> 02:33:08.431
<v Speaker 1>does that coordinate with an existing running system?

02:33:09.870 --> 02:33:10.670
<v Speaker 0>So

02:33:11.470 --> 02:33:13.710
<v Speaker 0>with our deployment in Kubernetes, we also have

02:33:13.710 --> 02:33:16.645
<v Speaker 0>access to the update strategy.

02:33:17.045 --> 02:33:17.685
<v Speaker 1>Mhmm.

02:33:20.245 --> 02:33:21.045
<v Speaker 0>Strategy.

02:33:21.925 --> 02:33:24.404
<v Speaker 0>Where I can then say rolling update, and

02:33:24.404 --> 02:33:26.565
<v Speaker 0>then I could tell the max search.

02:33:26.885 --> 02:33:28.885
<v Speaker 0>Let me just while I play this for

02:33:28.885 --> 02:33:29.045
<v Speaker 0>that.

02:33:31.370 --> 02:33:33.450
<v Speaker 0>So when we specify the strategy, we can

02:33:33.450 --> 02:33:36.170
<v Speaker 0>tell it that we're only gonna accept, you

02:33:36.170 --> 02:33:38.010
<v Speaker 0>know, one to be unavailable at any given

02:33:38.010 --> 02:33:40.170
<v Speaker 0>time. Right? Also takes percentages,

02:33:40.250 --> 02:33:41.610
<v Speaker 0>so you could say that we're allowed to

02:33:41.610 --> 02:33:42.570
<v Speaker 0>scale above

02:33:43.936 --> 02:33:45.615
<v Speaker 0>if we've got a record of score, if

02:33:45.615 --> 02:33:48.176
<v Speaker 0>we can scale above by a %, we'll

02:33:48.176 --> 02:33:50.176
<v Speaker 0>we'll watch four new months

02:33:50.415 --> 02:33:52.575
<v Speaker 0>and do the rolling upgrade that way, or

02:33:52.575 --> 02:33:54.655
<v Speaker 0>we can specify the maximum unavailable and say

02:33:54.655 --> 02:33:56.016
<v Speaker 0>that we want to do an upgrade this

02:33:56.016 --> 02:33:58.360
<v Speaker 0>way where we can we'll take one out,

02:33:58.360 --> 02:33:59.721
<v Speaker 0>deploy it, and it'll work.

02:34:00.120 --> 02:34:01.720
<v Speaker 0>This also requires

02:34:01.800 --> 02:34:03.240
<v Speaker 0>this approach requires

02:34:03.240 --> 02:34:04.360
<v Speaker 0>that your

02:34:07.400 --> 02:34:09.480
<v Speaker 0>that your migrations

02:34:09.015 --> 02:34:11.574
<v Speaker 0>either do database level locking so that you

02:34:11.574 --> 02:34:13.255
<v Speaker 0>don't have multiple containers trying to run at

02:34:13.255 --> 02:34:15.175
<v Speaker 0>the same time, or that there's gonna be

02:34:15.255 --> 02:34:17.095
<v Speaker 0>it also has to be idempotent, which is

02:34:17.095 --> 02:34:19.415
<v Speaker 0>very important. Most database migration systems are.

02:34:21.750 --> 02:34:22.950
<v Speaker 0>If you're

02:34:24.790 --> 02:34:27.511
<v Speaker 0>if you've already made the premeditated

02:34:27.511 --> 02:34:29.830
<v Speaker 0>effort that your database migrations are always gonna

02:34:29.830 --> 02:34:30.870
<v Speaker 0>be additive,

02:34:31.110 --> 02:34:33.270
<v Speaker 0>you know, you're always adding columns, which is

02:34:33.270 --> 02:34:35.190
<v Speaker 0>a really good way to handle database migrations,

02:34:35.845 --> 02:34:37.845
<v Speaker 0>Which means that your older version of the

02:34:37.845 --> 02:34:39.845
<v Speaker 0>code will still work even if the migration

02:34:39.845 --> 02:34:41.125
<v Speaker 0>hasn't run yet.

02:34:41.525 --> 02:34:42.885
<v Speaker 0>This is a really nice way of handling

02:34:42.885 --> 02:34:44.405
<v Speaker 0>this. Then you can remove

02:34:45.125 --> 02:34:46.885
<v Speaker 0>I'm just gonna comment these out so they're

02:34:46.885 --> 02:34:48.085
<v Speaker 0>available when I push the code.

02:34:48.899 --> 02:34:50.580
<v Speaker 0>Then you can remove the other container and

02:34:50.580 --> 02:34:52.420
<v Speaker 0>allow this just to deploy as

02:34:53.779 --> 02:34:54.660
<v Speaker 0>as

02:34:55.300 --> 02:34:57.380
<v Speaker 0>but before you do the upgrade in this,

02:34:57.380 --> 02:34:58.740
<v Speaker 0>you can use a job.

02:34:59.460 --> 02:35:02.660
<v Speaker 0>There's a special Kubernetes type

02:35:02.335 --> 02:35:04.095
<v Speaker 0>where we would

02:35:07.055 --> 02:35:10.015
<v Speaker 0>use a job here, and then that job

02:35:10.015 --> 02:35:11.615
<v Speaker 0>would also have a spec

02:35:13.135 --> 02:35:14.015
<v Speaker 0>where

02:35:14.620 --> 02:35:15.899
<v Speaker 0>I'm not gonna be able to I don't

02:35:15.899 --> 02:35:17.900
<v Speaker 0>think I can all complete job stuff, but

02:35:17.819 --> 02:35:18.380
<v Speaker 0>and

02:35:18.620 --> 02:35:20.939
<v Speaker 0>that let me pull up an example from

02:35:20.939 --> 02:35:22.780
<v Speaker 0>one of the helm charts that I've intend.

02:35:28.140 --> 02:35:29.899
<v Speaker 0>So I use a job in this

02:35:30.295 --> 02:35:33.175
<v Speaker 0>to configure the authentication in in FluxDP. So

02:35:33.175 --> 02:35:35.255
<v Speaker 0>you set the API version and the kind

02:35:35.255 --> 02:35:36.375
<v Speaker 0>to be job,

02:35:36.694 --> 02:35:38.615
<v Speaker 0>and then we just specify a container with

02:35:38.615 --> 02:35:40.295
<v Speaker 0>a command that we want it to run.

02:35:40.375 --> 02:35:41.734
<v Speaker 0>And that could just be a job that

02:35:41.734 --> 02:35:43.095
<v Speaker 0>spends a lot asynchronously

02:35:43.095 --> 02:35:45.175
<v Speaker 0>to you or before your deployment and runs

02:35:45.175 --> 02:35:46.990
<v Speaker 0>the migration that way. So

02:35:47.551 --> 02:35:49.710
<v Speaker 0>let me try and clarify the two different

02:35:49.710 --> 02:35:51.630
<v Speaker 0>approaches and why you need where how to

02:35:51.630 --> 02:35:53.311
<v Speaker 0>pick or how to decide which one to

02:35:53.311 --> 02:35:54.110
<v Speaker 0>pick. So

02:35:54.990 --> 02:35:56.750
<v Speaker 0>the only reason I would ever use a

02:35:56.750 --> 02:35:57.710
<v Speaker 0>job approach

02:35:58.525 --> 02:36:00.845
<v Speaker 0>would be my migrations do not do any

02:36:00.845 --> 02:36:03.405
<v Speaker 0>database locking to make sure that two don't

02:36:03.405 --> 02:36:04.605
<v Speaker 0>run at the same time.

02:36:05.725 --> 02:36:07.165
<v Speaker 0>In this case, you have to, as part

02:36:07.165 --> 02:36:09.485
<v Speaker 0>of your CI, run the job

02:36:09.805 --> 02:36:11.005
<v Speaker 0>object first,

02:36:11.165 --> 02:36:12.605
<v Speaker 0>then do a deployment update.

02:36:14.610 --> 02:36:15.971
<v Speaker 0>If you're in a position where you do

02:36:15.971 --> 02:36:18.131
<v Speaker 0>have the database locking, which I'm assuming probably

02:36:18.131 --> 02:36:21.011
<v Speaker 0>Laravel has already got sorted with the ORM,

02:36:21.011 --> 02:36:23.891
<v Speaker 0>then go with the edit container approach and

02:36:23.891 --> 02:36:26.770
<v Speaker 0>tweak your max unavailable or search depending on

02:36:26.770 --> 02:36:29.171
<v Speaker 0>the failure condition that you're going to accept

02:36:28.665 --> 02:36:29.466
<v Speaker 0>for that.

02:36:30.105 --> 02:36:32.745
<v Speaker 0>And whenever possible, regardless of approach, always try

02:36:32.745 --> 02:36:35.306
<v Speaker 0>and use additive changes in your database migration.

02:36:36.265 --> 02:36:37.065
<v Speaker 1>Yeah.

02:36:38.105 --> 02:36:39.465
<v Speaker 1>I think there's a point where you know

02:36:39.465 --> 02:36:40.185
<v Speaker 1>that

02:36:43.330 --> 02:36:45.810
<v Speaker 0>It's okay. Like, we can take that. Anyway,

02:36:45.810 --> 02:36:47.730
<v Speaker 0>like and the the cache is there, so

02:36:47.730 --> 02:36:49.490
<v Speaker 0>it should be okay. There's a there's a

02:36:49.490 --> 02:36:50.290
<v Speaker 1>point where

02:36:50.610 --> 02:36:52.690
<v Speaker 1>if you've been adding columns consistently, some of

02:36:52.690 --> 02:36:55.005
<v Speaker 1>them are now redundant and you know there'll

02:36:55.005 --> 02:36:56.285
<v Speaker 1>be a point where you know there's no

02:36:56.285 --> 02:36:57.965
<v Speaker 1>running code using that column.

02:37:01.404 --> 02:37:03.005
<v Speaker 1>So you can you can then go out

02:37:03.005 --> 02:37:05.325
<v Speaker 1>and take dump some old tables and

02:37:05.725 --> 02:37:07.560
<v Speaker 1>you can even look at even in a

02:37:07.560 --> 02:37:08.840
<v Speaker 1>massive system, you can look at some of

02:37:08.840 --> 02:37:11.080
<v Speaker 1>the access logs. This table's never been queried

02:37:11.080 --> 02:37:12.200
<v Speaker 1>in the last year.

02:37:12.680 --> 02:37:13.880
<v Speaker 1>Let's delete it.

02:37:15.160 --> 02:37:17.561
<v Speaker 1>Does it have you read the refactoring databases?

02:37:17.960 --> 02:37:18.680
<v Speaker 0>I have not.

02:37:20.365 --> 02:37:21.726
<v Speaker 0>I've got it to hand.

02:37:22.925 --> 02:37:25.325
<v Speaker 1>It's pretty good. Martin Fowler imprint.

02:37:25.565 --> 02:37:27.085
<v Speaker 1>Lots of patterns for

02:37:28.205 --> 02:37:30.925
<v Speaker 1>restructuring databases with forward and backward compatibility.

02:37:31.891 --> 02:37:34.610
<v Speaker 0>Oh, nice. Mostly involving lots of triggers.

02:37:36.131 --> 02:37:37.330
<v Speaker 0>So I was just trying to work out

02:37:37.330 --> 02:37:39.891
<v Speaker 0>why my build cache wasn't used there.

02:37:40.210 --> 02:37:42.690
<v Speaker 0>And it's because as I was talking, I

02:37:42.690 --> 02:37:44.770
<v Speaker 0>was modifying the whole directory.

02:37:45.891 --> 02:37:47.011
<v Speaker 0>Yeah. So there you go.

02:37:48.265 --> 02:37:48.905
<v Speaker 0>Oh,

02:37:49.145 --> 02:37:51.305
<v Speaker 0>we're not even but all locked. It'd probably

02:37:51.305 --> 02:37:53.704
<v Speaker 0>be ignored for the Docker. Correct. And then

02:37:53.704 --> 02:37:54.984
<v Speaker 0>that would have been cached.

02:37:57.145 --> 02:37:58.505
<v Speaker 0>And my test failed.

02:38:00.480 --> 02:38:02.320
<v Speaker 0>I'm gonna remove the test because I just

02:38:02.320 --> 02:38:03.681
<v Speaker 0>wanna get this deployed.

02:38:07.200 --> 02:38:09.360
<v Speaker 0>Can you make that? Yeah. We'll come back

02:38:09.360 --> 02:38:09.761
<v Speaker 0>to that.

02:38:17.085 --> 02:38:18.686
<v Speaker 0>My mic fail, isn't it?

02:38:23.325 --> 02:38:25.645
<v Speaker 0>Oh, it's just an absolute calamity of errors.

02:38:26.830 --> 02:38:28.110
<v Speaker 1>It's good to show,

02:38:28.830 --> 02:38:30.110
<v Speaker 1>you know, humanity.

02:38:30.830 --> 02:38:33.471
<v Speaker 0>Oh, yeah. That's exactly what it is. So

02:38:33.870 --> 02:38:36.190
<v Speaker 0>and I'm gonna assume that image is deployable

02:38:36.190 --> 02:38:39.085
<v Speaker 0>anyway because that did build in that last

02:38:39.085 --> 02:38:41.886
<v Speaker 0>one, the tests were a different step. Right?

02:38:42.045 --> 02:38:42.766
<v Speaker 0>Yeah.

02:38:47.005 --> 02:38:49.325
<v Speaker 0>No. I haven't purchased the production image because

02:38:49.325 --> 02:38:51.886
<v Speaker 0>it was targeting test when it failed, not

02:38:52.285 --> 02:38:52.605
<v Speaker 0>thing.

02:38:53.160 --> 02:38:54.920
<v Speaker 0>Alright. We just need to give it another

02:38:54.920 --> 02:38:56.760
<v Speaker 0>thirty seconds, and then we'll get the deployment

02:38:56.760 --> 02:38:58.680
<v Speaker 0>done, and we'll both be over here.

02:38:59.960 --> 02:39:00.600
<v Speaker 0>Yeah.

02:39:01.640 --> 02:39:03.399
<v Speaker 0>I think we're definitely gonna have to have

02:39:03.399 --> 02:39:04.600
<v Speaker 0>another session on this.

02:39:05.505 --> 02:39:08.064
<v Speaker 0>Yeah. Much to cover. So much to cover.

02:39:08.064 --> 02:39:09.665
<v Speaker 1>We will build on this one. Right? We'll

02:39:09.665 --> 02:39:11.585
<v Speaker 1>make it better. Oh, yeah. Yeah. We'll we'll

02:39:11.585 --> 02:39:13.425
<v Speaker 0>stick with this. Okay. So now we've got

02:39:13.425 --> 02:39:14.625
<v Speaker 0>our image built.

02:39:15.505 --> 02:39:17.824
<v Speaker 0>So I can just do a cube apply

02:39:19.220 --> 02:39:20.660
<v Speaker 0>opt Kubernetes.

02:39:24.820 --> 02:39:25.860
<v Speaker 0>Let's see.

02:39:29.300 --> 02:39:31.220
<v Speaker 0>Why is it only got one container?

02:39:37.515 --> 02:39:38.955
<v Speaker 1>Duplicating the name?

02:39:40.715 --> 02:39:41.435
<v Speaker 1>Is that okay?

02:39:44.891 --> 02:39:46.250
<v Speaker 0>I'm not sure. I've never actually

02:39:46.811 --> 02:39:48.091
<v Speaker 0>I've never tried that.

02:39:49.770 --> 02:39:51.370
<v Speaker 0>There you go. That's better. Yeah. The name

02:39:51.530 --> 02:39:53.370
<v Speaker 0>oh, because it must merge all that. Yeah.

02:39:53.370 --> 02:39:54.410
<v Speaker 0>It must flatten it. Okay.

02:39:55.785 --> 02:39:57.545
<v Speaker 0>So pill damage, and that's because I forgot

02:39:57.545 --> 02:39:59.705
<v Speaker 0>the policy on our APM one.

02:40:00.505 --> 02:40:02.745
<v Speaker 0>That's where we again,

02:40:03.145 --> 02:40:05.385
<v Speaker 0>let's just run a watcher on it. Right.

02:40:05.385 --> 02:40:06.345
<v Speaker 0>Okay. Both are running.

02:40:08.610 --> 02:40:10.050
<v Speaker 0>So in theory,

02:40:10.210 --> 02:40:12.530
<v Speaker 0>we're now at the port forwarding state again.

02:40:15.090 --> 02:40:17.010
<v Speaker 1>So two containers, one pod.

02:40:19.649 --> 02:40:20.850
<v Speaker 0>I don't know if I'm used to being

02:40:20.850 --> 02:40:22.850
<v Speaker 0>there. We're gonna get that off.

02:40:26.586 --> 02:40:27.705
<v Speaker 0>Okay.

02:40:27.705 --> 02:40:30.826
<v Speaker 0>So now the logs director needs special permission.

02:40:34.025 --> 02:40:34.426
<v Speaker 1>So

02:40:35.306 --> 02:40:37.466
<v Speaker 1>Why didn't that happen previous oh, because we

02:40:39.760 --> 02:40:42.080
<v Speaker 0>Slim is logging to standard out. So the

02:40:42.080 --> 02:40:44.080
<v Speaker 0>the problem here is that we've not configured

02:40:44.080 --> 02:40:45.920
<v Speaker 0>Laravel to log the standard out.

02:40:47.280 --> 02:40:49.280
<v Speaker 1>Why can't it find why can't it write

02:40:49.280 --> 02:40:49.920
<v Speaker 1>to that file?

02:40:52.245 --> 02:40:52.645
<v Speaker 1>I think

02:40:53.445 --> 02:40:56.485
<v Speaker 0>I'm assuming this directory doesn't exist. Let's confirm.

02:40:58.405 --> 02:41:00.005
<v Speaker 1>Is it gonna be file permissions or something

02:41:00.005 --> 02:41:00.726
<v Speaker 1>like that?

02:41:02.885 --> 02:41:05.686
<v Speaker 0>The exec into this container, we need to

02:41:05.686 --> 02:41:07.525
<v Speaker 0>specify it's the f e m one, and

02:41:07.525 --> 02:41:08.900
<v Speaker 0>we wanna run batch.

02:41:11.300 --> 02:41:12.820
<v Speaker 0>What do I call the container?

02:41:14.020 --> 02:41:15.540
<v Speaker 0>Peng c o m s.

02:41:19.300 --> 02:41:20.020
<v Speaker 0>Forage.

02:41:24.545 --> 02:41:26.065
<v Speaker 0>It is draping through it.

02:41:33.824 --> 02:41:35.265
<v Speaker 1>Does the container run its route?

02:41:36.710 --> 02:41:38.229
<v Speaker 0>It does. Yeah. We know.

02:41:44.710 --> 02:41:46.630
<v Speaker 0>I don't know. That's a log from

02:41:47.189 --> 02:41:48.870
<v Speaker 0>that's been mounted then

02:41:51.935 --> 02:41:54.175
<v Speaker 0>because there's not a Docker a Docker ignore

02:41:54.175 --> 02:41:55.455
<v Speaker 0>fail that's given that.

02:41:58.015 --> 02:41:59.455
<v Speaker 1>As

02:41:59.455 --> 02:42:00.335
<v Speaker 1>last time,

02:42:00.975 --> 02:42:01.935
<v Speaker 1>I have to go now.

02:42:02.899 --> 02:42:04.820
<v Speaker 1>I've reached the last possible point

02:42:05.220 --> 02:42:06.100
<v Speaker 1>where I can

02:42:06.420 --> 02:42:08.819
<v Speaker 1>get to my Let's just yeah. Well, let's

02:42:08.819 --> 02:42:10.260
<v Speaker 0>just call it here. Let's pick it up

02:42:10.260 --> 02:42:11.540
<v Speaker 0>again next

02:42:11.540 --> 02:42:13.540
<v Speaker 0>week from here and see how far we

02:42:13.540 --> 02:42:14.739
<v Speaker 0>get. Because like I said, we've got a

02:42:14.739 --> 02:42:16.180
<v Speaker 0>lot to cover, and there's no point in

02:42:16.180 --> 02:42:17.540
<v Speaker 0>me trying to rush it.

02:42:18.395 --> 02:42:19.915
<v Speaker 1>Yeah. We're quite close. We've got some working

02:42:19.915 --> 02:42:20.636
<v Speaker 1>images,

02:42:21.355 --> 02:42:22.636
<v Speaker 1>working containers.

02:42:23.516 --> 02:42:24.955
<v Speaker 1>They work fine for dev.

02:42:25.835 --> 02:42:27.836
<v Speaker 1>We just we've only spent

02:42:28.556 --> 02:42:31.195
<v Speaker 1>an hour trying to deploy it to production,

02:42:31.195 --> 02:42:33.399
<v Speaker 1>I think That's a reasonable time scale to

02:42:33.399 --> 02:42:35.000
<v Speaker 1>fail. Let's

02:42:35.000 --> 02:42:37.079
<v Speaker 1>do it again. Alright. Yeah. I will push

02:42:37.079 --> 02:42:42.199
<v Speaker 0>this code just now. It's available on gitlab.com/rawcode/php-examples.

02:42:42.199 --> 02:42:44.119
<v Speaker 0>Kieran and I will be back again next

02:42:44.119 --> 02:42:46.575
<v Speaker 0>week to continue our efforts to deploy a

02:42:46.575 --> 02:42:49.056
<v Speaker 0>production Laravel application on Kubernetes.

02:42:49.295 --> 02:42:51.135
<v Speaker 0>Kieran, thank you for joining me again. It

02:42:51.135 --> 02:42:52.575
<v Speaker 0>was a pleasure, and I'll see you again

02:42:52.575 --> 02:42:54.175
<v Speaker 0>next week. Bye. See you next week. Bye.
