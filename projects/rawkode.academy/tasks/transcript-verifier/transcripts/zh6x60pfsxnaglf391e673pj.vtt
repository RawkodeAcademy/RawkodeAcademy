WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: b3082dc8-efab-4f61-a657-3f360735c1e1
Created: 2025-04-29T12:31:54.809Z
Duration: 1223.0828
Channels: 1

00:00:01.360 --> 00:00:03.759
<v Speaker 0>Welcome back to the Rawkode Academy.

00:00:04.000 --> 00:00:05.920
<v Speaker 0>I'm your host, David Flanagan,

00:00:05.920 --> 00:00:08.320
<v Speaker 0>also known across the Internet as Rawkode.

00:00:08.880 --> 00:00:10.960
<v Speaker 0>Today, we're gonna take a look at how

00:00:10.960 --> 00:00:14.559
<v Speaker 0>to make troubleshooting your microservice life all a

00:00:14.559 --> 00:00:15.519
<v Speaker 0>little bit easier.

00:00:15.894 --> 00:00:18.215
<v Speaker 0>And let's face it, this is something we

00:00:18.215 --> 00:00:19.015
<v Speaker 0>all need.

00:00:19.494 --> 00:00:20.615
<v Speaker 0>Microservices

00:00:20.615 --> 00:00:21.654
<v Speaker 0>are difficult.

00:00:22.295 --> 00:00:24.855
<v Speaker 0>Whether you're adopting a monorepository,

00:00:24.855 --> 00:00:27.255
<v Speaker 0>building out completely new CICD

00:00:27.255 --> 00:00:28.134
<v Speaker 0>pipelines,

00:00:28.454 --> 00:00:31.015
<v Speaker 0>or trying to observe, understand, and react

00:00:31.490 --> 00:00:34.850
<v Speaker 0>to problems within your production infrastructure across

00:00:34.850 --> 00:00:37.410
<v Speaker 0>your new plethora of microservices.

00:00:37.970 --> 00:00:42.050
<v Speaker 0>You're constantly facing challenge after challenge after challenge.

00:00:42.930 --> 00:00:44.610
<v Speaker 0>So it's nice when a tool can come

00:00:44.610 --> 00:00:47.915
<v Speaker 0>along and make some of these challenges disappear.

00:00:48.875 --> 00:00:51.195
<v Speaker 0>And Lumigo is the perfect tool to come

00:00:51.195 --> 00:00:54.715
<v Speaker 0>in and make distributed tracing and observability

00:00:55.115 --> 00:00:56.955
<v Speaker 0>almost child's play.

00:00:57.755 --> 00:00:59.879
<v Speaker 0>Let's take a look. So

00:01:00.760 --> 00:01:03.320
<v Speaker 0>on a surface level, Lumigo

00:01:03.320 --> 00:01:06.200
<v Speaker 0>is a distributed tracing tool.

00:01:07.640 --> 00:01:09.159
<v Speaker 0>But when you go deeper,

00:01:09.240 --> 00:01:10.280
<v Speaker 0>it surfaces

00:01:10.360 --> 00:01:11.080
<v Speaker 0>so much more.

00:01:11.975 --> 00:01:13.734
<v Speaker 0>But let's start at the top.

00:01:14.534 --> 00:01:17.414
<v Speaker 0>Do we need another distributed tracing tool?

00:01:17.655 --> 00:01:18.295
<v Speaker 0>Well,

00:01:18.534 --> 00:01:19.255
<v Speaker 0>yes.

00:01:20.295 --> 00:01:21.655
<v Speaker 0>Lumigo works

00:01:21.735 --> 00:01:23.494
<v Speaker 0>and supports OpenTelemetry.

00:01:24.390 --> 00:01:26.950
<v Speaker 0>It also supports zero touch

00:01:27.990 --> 00:01:29.670
<v Speaker 0>automatic instrumentation

00:01:29.670 --> 00:01:31.270
<v Speaker 0>of your services.

00:01:32.070 --> 00:01:34.070
<v Speaker 0>That means you can deploy Lumigo to your

00:01:34.070 --> 00:01:35.910
<v Speaker 0>cluster like I am about to do now,

00:01:36.195 --> 00:01:38.995
<v Speaker 0>and you will get distributed tracing without changing

00:01:38.995 --> 00:01:41.155
<v Speaker 0>a single line of code.

00:01:42.195 --> 00:01:44.675
<v Speaker 0>As we explore the Lumigo dashboard, you'll start

00:01:44.675 --> 00:01:46.034
<v Speaker 0>to see and understand

00:01:46.195 --> 00:01:49.475
<v Speaker 0>that it is much more than Automagic instrumentation.

00:01:50.680 --> 00:01:52.760
<v Speaker 0>It gives you the ability to browse and

00:01:52.760 --> 00:01:55.560
<v Speaker 0>understand these distributed traces in a way that

00:01:55.560 --> 00:01:57.720
<v Speaker 0>reveals much more information than I've seen from

00:01:57.720 --> 00:01:58.680
<v Speaker 0>other tools,

00:01:59.080 --> 00:02:02.280
<v Speaker 0>allowing you to introspect the entire request object,

00:02:03.345 --> 00:02:05.025
<v Speaker 0>view service maps,

00:02:05.425 --> 00:02:07.425
<v Speaker 0>and a whole bunch more. I said enough.

00:02:07.505 --> 00:02:09.665
<v Speaker 0>Let's deploy Lumigo to our cluster.

00:02:10.384 --> 00:02:13.105
<v Speaker 0>Alright. Let's log in to Lumigo.

00:02:15.760 --> 00:02:18.160
<v Speaker 0>I've already signed up for an account, but

00:02:18.160 --> 00:02:19.680
<v Speaker 0>it just takes a second. You can set

00:02:19.680 --> 00:02:21.920
<v Speaker 0>up with a username and password, or like

00:02:21.920 --> 00:02:23.920
<v Speaker 0>I used, my Google authentication.

00:02:24.640 --> 00:02:27.200
<v Speaker 0>I've already explored Lumigo in preparation for this

00:02:27.200 --> 00:02:29.280
<v Speaker 0>video. So what I'm gonna do is create

00:02:29.280 --> 00:02:30.560
<v Speaker 0>a new project.

00:02:31.735 --> 00:02:33.974
<v Speaker 0>And I'll call this one the actual demo

00:02:33.974 --> 00:02:36.215
<v Speaker 0>because I have many other similar names.

00:02:41.655 --> 00:02:44.295
<v Speaker 0>Once this project is created, we get instructions

00:02:44.295 --> 00:02:46.855
<v Speaker 0>to deploy Lumigo to our infrastructure.

00:02:47.680 --> 00:02:50.240
<v Speaker 0>Lumigo doesn't just support Kubernetes,

00:02:50.240 --> 00:02:51.920
<v Speaker 0>although that is gonna be the focus of

00:02:51.920 --> 00:02:52.960
<v Speaker 0>my video today.

00:02:53.520 --> 00:02:55.600
<v Speaker 0>It also works with ECS

00:02:55.600 --> 00:02:56.800
<v Speaker 0>and AWS

00:02:56.800 --> 00:02:57.360
<v Speaker 0>Lambda.

00:02:59.465 --> 00:03:01.705
<v Speaker 0>We're gonna click on Kubernetes and use the

00:03:01.705 --> 00:03:02.985
<v Speaker 0>Helm operator,

00:03:02.985 --> 00:03:04.505
<v Speaker 0>or at least we're gonna use Helm to

00:03:04.505 --> 00:03:06.505
<v Speaker 0>deploy the Lumigo operator

00:03:06.505 --> 00:03:08.825
<v Speaker 0>to get the automatic instrumentation.

00:03:11.145 --> 00:03:13.305
<v Speaker 0>From here, we can start to copy repository

00:03:13.305 --> 00:03:16.330
<v Speaker 0>add commands followed by helm install, which just

00:03:16.330 --> 00:03:18.730
<v Speaker 0>wants our cluster name, which can be anything

00:03:18.730 --> 00:03:20.010
<v Speaker 0>that we wish to call it.

00:03:20.410 --> 00:03:22.410
<v Speaker 0>And then we need the ability to create

00:03:22.410 --> 00:03:24.890
<v Speaker 0>a secret inside of a namespace so that

00:03:24.890 --> 00:03:27.530
<v Speaker 0>the operator can consume it and write to

00:03:27.530 --> 00:03:28.970
<v Speaker 0>our Lumigo instance.

00:03:30.435 --> 00:03:32.915
<v Speaker 0>So let's start with step one,

00:03:33.075 --> 00:03:35.635
<v Speaker 0>deploying the operator with Helm.

00:03:36.755 --> 00:03:39.635
<v Speaker 0>Let's jump over to our terminal

00:03:39.715 --> 00:03:42.035
<v Speaker 0>and I'll pop open Versus Code to give

00:03:42.035 --> 00:03:42.515
<v Speaker 0>us

00:03:43.550 --> 00:03:44.830
<v Speaker 0>an empty buffer.

00:03:46.990 --> 00:03:49.230
<v Speaker 0>Instead of changing these commands together, we're just

00:03:49.230 --> 00:03:50.750
<v Speaker 0>going to split them up.

00:03:51.310 --> 00:03:52.910
<v Speaker 0>And I like to format them in a

00:03:52.910 --> 00:03:55.870
<v Speaker 0>way that they make sense when I look

00:03:55.870 --> 00:03:57.550
<v Speaker 0>back at them later.

00:03:58.784 --> 00:04:02.145
<v Speaker 0>So step one, let's add the repository,

00:04:02.704 --> 00:04:03.505
<v Speaker 0>like so.

00:04:03.984 --> 00:04:07.025
<v Speaker 0>I have already done this, so it's already

00:04:07.025 --> 00:04:07.585
<v Speaker 0>there.

00:04:08.944 --> 00:04:10.545
<v Speaker 0>Next, we're going to do a helm install.

00:04:10.740 --> 00:04:13.300
<v Speaker 0>And we'll select the default namespace of Lumigo

00:04:13.300 --> 00:04:15.540
<v Speaker 0>system, which is a very weird sentence now

00:04:15.540 --> 00:04:16.740
<v Speaker 0>that I think about it.

00:04:17.060 --> 00:04:18.980
<v Speaker 0>If this namespace doesn't exist,

00:04:20.339 --> 00:04:21.620
<v Speaker 0>we're going to create it.

00:04:23.074 --> 00:04:25.715
<v Speaker 0>I'm going to call this cluster Docker desktop

00:04:25.715 --> 00:04:28.354
<v Speaker 0>because I'm using Docker for Mac for this

00:04:28.354 --> 00:04:29.715
<v Speaker 0>Kubernetes cluster.

00:04:30.435 --> 00:04:32.675
<v Speaker 0>We can copy the installation command

00:04:33.155 --> 00:04:34.995
<v Speaker 0>and paste to our terminal.

00:04:35.235 --> 00:04:35.635
<v Speaker 0>Easy.

00:04:40.410 --> 00:04:41.130
<v Speaker 0>Next,

00:04:41.449 --> 00:04:44.250
<v Speaker 0>we want to create a secret with our

00:04:44.250 --> 00:04:44.650
<v Speaker 0>token.

00:04:51.775 --> 00:04:53.694
<v Speaker 0>So now, to create a secret, we need

00:04:53.694 --> 00:04:55.535
<v Speaker 0>to specify the namespace and this is going

00:04:55.535 --> 00:04:57.775
<v Speaker 0>to be the namespace where your application is

00:04:57.775 --> 00:04:58.415
<v Speaker 0>running.

00:04:59.055 --> 00:05:01.055
<v Speaker 0>So I'm just going to call this app

00:05:02.014 --> 00:05:04.495
<v Speaker 0>and we'll call the secret Lumigo credentials like

00:05:04.495 --> 00:05:07.500
<v Speaker 0>suggested from a literal value. And this is

00:05:07.500 --> 00:05:09.660
<v Speaker 0>my real Lumigo token.

00:05:10.060 --> 00:05:11.980
<v Speaker 0>Hopefully, it won't exist by the time you

00:05:11.980 --> 00:05:12.860
<v Speaker 0>see this video.

00:05:14.060 --> 00:05:15.820
<v Speaker 0>We can jump back to the terminal

00:05:15.980 --> 00:05:17.420
<v Speaker 0>where we can do kubectl

00:05:17.420 --> 00:05:19.020
<v Speaker 0>create namespace

00:05:19.420 --> 00:05:20.300
<v Speaker 0>app,

00:05:21.180 --> 00:05:24.005
<v Speaker 0>followed by our secret creation. If we run

00:05:24.005 --> 00:05:25.044
<v Speaker 0>kubectl

00:05:25.044 --> 00:05:26.245
<v Speaker 0>get secrets

00:05:27.764 --> 00:05:29.365
<v Speaker 0>at our app namespace,

00:05:29.525 --> 00:05:31.045
<v Speaker 0>we'll see it now exists.

00:05:32.245 --> 00:05:33.125
<v Speaker 0>Lastly,

00:05:33.125 --> 00:05:34.805
<v Speaker 0>we copy the code

00:05:35.570 --> 00:05:37.890
<v Speaker 0>to configure our namespace

00:05:38.210 --> 00:05:39.730
<v Speaker 0>for Lumigo.

00:05:40.690 --> 00:05:41.410
<v Speaker 0>Simple.

00:05:42.210 --> 00:05:44.610
<v Speaker 0>Okay. Let's deploy our sample

00:05:44.690 --> 00:05:45.650
<v Speaker 0>application.

00:05:46.530 --> 00:05:48.050
<v Speaker 0>We're using OpenTelemetry

00:05:48.050 --> 00:05:48.930
<v Speaker 0>demo application,

00:05:49.324 --> 00:05:51.885
<v Speaker 0>which comes with a single manifest for deploying

00:05:51.885 --> 00:05:53.485
<v Speaker 0>to a Kubernetes cluster.

00:05:54.044 --> 00:05:56.525
<v Speaker 0>I have updated said manifest to deploy to

00:05:56.525 --> 00:05:59.165
<v Speaker 0>the app namespace like we configured when we

00:05:59.165 --> 00:06:00.925
<v Speaker 0>deployed Lumigo to the cluster.

00:06:03.330 --> 00:06:06.290
<v Speaker 0>We can now run kubectl dash n app

00:06:06.370 --> 00:06:07.410
<v Speaker 0>get pods.

00:06:08.290 --> 00:06:10.610
<v Speaker 0>Now, this may take a couple of moments.

00:06:10.610 --> 00:06:13.010
<v Speaker 0>So by the power of magic, let's come

00:06:13.010 --> 00:06:13.490
<v Speaker 0>back.

00:06:14.930 --> 00:06:16.210
<v Speaker 0>God love magic.

00:06:17.410 --> 00:06:18.770
<v Speaker 0>Now, all

00:06:19.134 --> 00:06:21.935
<v Speaker 0>of our demo services are running on our

00:06:21.935 --> 00:06:27.055
<v Speaker 0>Kubernetes cluster and a namespace configured with Lumigo.

00:06:27.055 --> 00:06:28.495
<v Speaker 0>So I think now would be a good

00:06:28.495 --> 00:06:30.655
<v Speaker 0>time to jump back

00:06:31.340 --> 00:06:33.580
<v Speaker 0>to our Lumigo dashboard.

00:06:35.820 --> 00:06:38.060
<v Speaker 0>So let's validate our installation.

00:06:45.035 --> 00:06:45.915
<v Speaker 0>Awesome.

00:06:46.635 --> 00:06:49.435
<v Speaker 0>Alright. So let's give Lumigo a little bit

00:06:49.435 --> 00:06:50.955
<v Speaker 0>of data to work with.

00:06:53.595 --> 00:06:55.435
<v Speaker 0>Let's run a port forward to the front

00:06:55.435 --> 00:06:58.160
<v Speaker 0>end proxy, which runs or makes our application

00:06:58.160 --> 00:07:00.640
<v Speaker 0>available on local host port 8,080.

00:07:02.240 --> 00:07:03.200
<v Speaker 0>From here,

00:07:03.840 --> 00:07:05.840
<v Speaker 0>we can see the OpenTelemetry

00:07:05.840 --> 00:07:07.280
<v Speaker 0>demo application.

00:07:08.400 --> 00:07:09.680
<v Speaker 0>Let's go shopping

00:07:09.760 --> 00:07:11.360
<v Speaker 0>for some binoculars.

00:07:16.294 --> 00:07:18.375
<v Speaker 0>And a lens cleaning kit.

00:07:19.815 --> 00:07:21.735
<v Speaker 0>Now, we place our order

00:07:21.974 --> 00:07:22.615
<v Speaker 0>like so.

00:07:23.940 --> 00:07:26.580
<v Speaker 0>Let's jump back to Lumigo and see what

00:07:26.580 --> 00:07:27.620
<v Speaker 0>we can see.

00:07:29.700 --> 00:07:32.180
<v Speaker 0>And that tells us our application is sending

00:07:32.180 --> 00:07:33.860
<v Speaker 0>traces to Lumigo.

00:07:34.500 --> 00:07:36.660
<v Speaker 0>We're currently on the LiveTail page and we

00:07:36.660 --> 00:07:39.380
<v Speaker 0>can see these requests streaming in

00:07:39.775 --> 00:07:41.055
<v Speaker 0>in real time.

00:07:42.015 --> 00:07:43.935
<v Speaker 0>I like to start off by taking a

00:07:43.935 --> 00:07:45.775
<v Speaker 0>look at the system map.

00:07:46.655 --> 00:07:49.295
<v Speaker 0>Here, we have a visual representation

00:07:49.295 --> 00:07:52.495
<v Speaker 0>of all of the services within our cluster

00:07:52.180 --> 00:07:55.300
<v Speaker 0>or at least the ones that have ambient

00:07:55.300 --> 00:07:58.340
<v Speaker 0>traffic running through or we head through clicking

00:07:58.340 --> 00:08:00.419
<v Speaker 0>around on the shopping page.

00:08:01.060 --> 00:08:02.900
<v Speaker 0>We can see the payment service, the ad

00:08:02.900 --> 00:08:05.460
<v Speaker 0>service, the cart service, currency service, front end,

00:08:05.460 --> 00:08:06.900
<v Speaker 0>feature flags, and so forth.

00:08:07.585 --> 00:08:09.105
<v Speaker 0>We can see that it speaks to a

00:08:09.105 --> 00:08:11.585
<v Speaker 0>Redis issue is in port 443,

00:08:12.065 --> 00:08:14.625
<v Speaker 0>and this I believe is our device.

00:08:15.665 --> 00:08:17.265
<v Speaker 0>So let's go to the dashboard.

00:08:18.225 --> 00:08:20.305
<v Speaker 0>And now we can see because this application

00:08:20.305 --> 00:08:22.225
<v Speaker 0>has only been running for a few minutes,

00:08:23.010 --> 00:08:25.970
<v Speaker 0>we got a couple of failures, some requests,

00:08:26.690 --> 00:08:27.890
<v Speaker 0>and some information

00:08:27.890 --> 00:08:29.410
<v Speaker 0>on the duration

00:08:29.490 --> 00:08:32.210
<v Speaker 0>of these functions or these services.

00:08:32.850 --> 00:08:35.010
<v Speaker 0>We can actually see the p 99 and

00:08:35.010 --> 00:08:36.074
<v Speaker 0>p 95

00:08:36.074 --> 00:08:38.475
<v Speaker 0>of these services based on the limited information

00:08:38.475 --> 00:08:40.235
<v Speaker 0>that we have thus far.

00:08:40.554 --> 00:08:42.954
<v Speaker 0>So now let's pop over to transactions.

00:08:43.834 --> 00:08:46.954
<v Speaker 0>From here, we can begin to understand the

00:08:46.954 --> 00:08:47.915
<v Speaker 0>requests

00:08:48.555 --> 00:08:49.675
<v Speaker 0>within our application.

00:08:52.370 --> 00:08:54.290
<v Speaker 0>We can see on this one request,

00:08:54.610 --> 00:08:56.770
<v Speaker 0>we started off at the front end.

00:08:57.330 --> 00:08:59.250
<v Speaker 0>It made a request to the cart service

00:08:59.250 --> 00:09:00.770
<v Speaker 0>which spoke to Redis

00:09:01.330 --> 00:09:03.090
<v Speaker 0>and that the cart service

00:09:03.170 --> 00:09:05.170
<v Speaker 0>is written in a dot net language.

00:09:05.654 --> 00:09:08.454
<v Speaker 0>Our front end is in JavaScript and well,

00:09:08.454 --> 00:09:09.975
<v Speaker 0>Redis is Redis.

00:09:10.855 --> 00:09:12.375
<v Speaker 0>We can click on our front end and

00:09:12.375 --> 00:09:14.214
<v Speaker 0>we can now start to get more information

00:09:14.214 --> 00:09:15.334
<v Speaker 0>about the service.

00:09:16.295 --> 00:09:17.654
<v Speaker 0>We can see the route that it came

00:09:17.654 --> 00:09:18.454
<v Speaker 0>in on here.

00:09:19.230 --> 00:09:22.190
<v Speaker 0>It's a when we requested the cart and

00:09:23.149 --> 00:09:25.630
<v Speaker 0>it tells us the currency with GBP.

00:09:26.990 --> 00:09:30.029
<v Speaker 0>We see all the environment variables configured on

00:09:30.029 --> 00:09:32.315
<v Speaker 0>our pod. And if we scroll down, we

00:09:32.315 --> 00:09:34.954
<v Speaker 0>can start to see the span information.

00:09:36.315 --> 00:09:37.834
<v Speaker 0>It gives us the start and end time

00:09:37.834 --> 00:09:39.834
<v Speaker 0>as well as all the attributes that are

00:09:39.834 --> 00:09:40.475
<v Speaker 0>important.

00:09:41.115 --> 00:09:43.320
<v Speaker 0>We get to see the information on the

00:09:43.320 --> 00:09:45.240
<v Speaker 0>URL, which we already kind of knew, but

00:09:45.240 --> 00:09:46.760
<v Speaker 0>now we can see the host name that

00:09:46.760 --> 00:09:47.480
<v Speaker 0>was used.

00:09:48.680 --> 00:09:50.040
<v Speaker 0>We see the protocol.

00:09:50.360 --> 00:09:51.720
<v Speaker 0>We can see the browser.

00:09:52.040 --> 00:09:54.040
<v Speaker 0>All the stuff you would expect to see

00:09:54.040 --> 00:09:57.480
<v Speaker 0>from a trace within a microservice architecture.

00:09:58.704 --> 00:10:00.945
<v Speaker 0>Now this view is great for debugging

00:10:00.945 --> 00:10:02.785
<v Speaker 0>because we can see the services that were

00:10:02.785 --> 00:10:03.505
<v Speaker 0>involved.

00:10:05.105 --> 00:10:07.345
<v Speaker 0>We can see information about the pod

00:10:07.505 --> 00:10:08.705
<v Speaker 0>and the span.

00:10:10.225 --> 00:10:12.704
<v Speaker 0>And then we can click on these requests

00:10:12.704 --> 00:10:13.264
<v Speaker 0>themselves,

00:10:14.550 --> 00:10:16.310
<v Speaker 0>where we can see here that a push

00:10:16.310 --> 00:10:18.710
<v Speaker 0>request was made to the cart service

00:10:20.470 --> 00:10:22.870
<v Speaker 0>on this path, get cart.

00:10:24.150 --> 00:10:26.310
<v Speaker 0>If we click on Redis, we can actually

00:10:26.310 --> 00:10:28.955
<v Speaker 0>see the request or the query that was

00:10:28.955 --> 00:10:30.235
<v Speaker 0>sent to Redis two.

00:10:30.715 --> 00:10:33.515
<v Speaker 0>The statement was a GET request for a

00:10:33.515 --> 00:10:35.355
<v Speaker 0>UUID.

00:10:36.875 --> 00:10:39.035
<v Speaker 0>If we pop over to this side, we

00:10:39.035 --> 00:10:40.955
<v Speaker 0>can see that this was actually a request

00:10:40.955 --> 00:10:42.155
<v Speaker 0>to add item.

00:10:44.529 --> 00:10:46.290
<v Speaker 0>And if we pop down to these redis,

00:10:46.290 --> 00:10:47.810
<v Speaker 0>we'll see that we actually have a set

00:10:47.810 --> 00:10:49.410
<v Speaker 0>of a UUID.

00:10:50.210 --> 00:10:53.570
<v Speaker 0>So this transaction from a single request ID

00:10:53.570 --> 00:10:55.170
<v Speaker 0>propagated through the system,

00:10:55.570 --> 00:10:57.649
<v Speaker 0>it's actually what happened when we added something

00:10:57.649 --> 00:10:59.985
<v Speaker 0>to the cart that also fetched an update

00:10:59.985 --> 00:11:02.625
<v Speaker 0>and returned it to our client.

00:11:03.745 --> 00:11:06.145
<v Speaker 0>Now this is great. We can understand

00:11:06.464 --> 00:11:09.185
<v Speaker 0>a whole bunch of information about the system,

00:11:10.065 --> 00:11:11.985
<v Speaker 0>but sometimes it is nice to have

00:11:12.600 --> 00:11:15.800
<v Speaker 0>the classic distributed tracing view,

00:11:16.519 --> 00:11:17.480
<v Speaker 0>the timeline.

00:11:18.440 --> 00:11:19.880
<v Speaker 0>So now we can take a look at

00:11:19.880 --> 00:11:21.000
<v Speaker 0>this transaction

00:11:21.000 --> 00:11:23.639
<v Speaker 0>as it happened in a linear progression.

00:11:24.360 --> 00:11:26.120
<v Speaker 0>We can see here that the front end

00:11:26.120 --> 00:11:28.535
<v Speaker 0>is responsible for pretty much everything. We already

00:11:28.535 --> 00:11:29.255
<v Speaker 0>knew that.

00:11:29.735 --> 00:11:31.415
<v Speaker 0>We have our cart service,

00:11:32.375 --> 00:11:33.735
<v Speaker 0>which speaks to Redis.

00:11:34.695 --> 00:11:36.535
<v Speaker 0>We can see that the first request to

00:11:36.535 --> 00:11:39.815
<v Speaker 0>Redis was the add item call, which made

00:11:39.815 --> 00:11:41.495
<v Speaker 0>actual multiple calls to Redis.

00:11:42.560 --> 00:11:44.240
<v Speaker 0>And now that we can see the order

00:11:44.240 --> 00:11:46.320
<v Speaker 0>these requests happened in, we can click on

00:11:46.320 --> 00:11:46.880
<v Speaker 0>it.

00:11:47.440 --> 00:11:49.040
<v Speaker 0>Alright. There was a get,

00:11:50.320 --> 00:11:51.680
<v Speaker 0>followed by a set,

00:11:52.720 --> 00:11:54.160
<v Speaker 0>followed by an expire.

00:11:54.880 --> 00:11:55.280
<v Speaker 0>Nice.

00:11:57.325 --> 00:11:59.485
<v Speaker 0>Once the added item to the cart, the

00:11:59.485 --> 00:12:02.445
<v Speaker 0>cart service then made one more request to

00:12:02.445 --> 00:12:03.245
<v Speaker 0>Redis.

00:12:04.125 --> 00:12:05.645
<v Speaker 0>This time, the GET request.

00:12:06.524 --> 00:12:07.964
<v Speaker 0>Now we get to understand

00:12:08.285 --> 00:12:09.245
<v Speaker 0>how

00:12:09.830 --> 00:12:10.950
<v Speaker 0>over time

00:12:11.430 --> 00:12:13.190
<v Speaker 0>the request propagated

00:12:13.190 --> 00:12:14.310
<v Speaker 0>through our system.

00:12:14.630 --> 00:12:16.550
<v Speaker 0>So let's take a look at something else.

00:12:17.110 --> 00:12:20.390
<v Speaker 0>Down here, we have some request

00:12:20.390 --> 00:12:22.790
<v Speaker 0>that took almost five seconds.

00:12:23.110 --> 00:12:24.390
<v Speaker 0>So let's take a look at it.

00:12:28.595 --> 00:12:32.115
<v Speaker 0>This request goes through a whole bunch more

00:12:32.115 --> 00:12:32.915
<v Speaker 0>services.

00:12:34.035 --> 00:12:35.235
<v Speaker 0>We can see here

00:12:35.875 --> 00:12:36.675
<v Speaker 0>and here

00:12:37.790 --> 00:12:38.750
<v Speaker 0>and here.

00:12:39.390 --> 00:12:41.470
<v Speaker 0>We've got a whole bunch of gRPC

00:12:41.710 --> 00:12:43.950
<v Speaker 0>and a whole bunch of Kubernetes services.

00:12:45.310 --> 00:12:46.910
<v Speaker 0>Let's take a look at the timeline.

00:12:47.550 --> 00:12:49.230
<v Speaker 0>We can see that this is as the

00:12:49.230 --> 00:12:52.350
<v Speaker 0>front end speaking to a recommendation service.

00:12:52.350 --> 00:12:53.630
<v Speaker 0>When we viewed a product,

00:12:55.205 --> 00:12:56.965
<v Speaker 0>and wanted to show us more that were

00:12:56.965 --> 00:12:58.005
<v Speaker 0>just like it.

00:12:58.404 --> 00:13:00.965
<v Speaker 0>This requires a whole bunch of gRPC

00:13:01.045 --> 00:13:01.685
<v Speaker 0>calls.

00:13:02.005 --> 00:13:03.685
<v Speaker 0>The first one to get a list of

00:13:03.685 --> 00:13:06.325
<v Speaker 0>recommendations followed by subsequent request to get the

00:13:06.325 --> 00:13:07.205
<v Speaker 0>product information.

00:13:08.590 --> 00:13:10.670
<v Speaker 0>Eventually, this is all returned and it even

00:13:10.670 --> 00:13:13.630
<v Speaker 0>requires a lookup to the feature flag service.

00:13:14.670 --> 00:13:16.750
<v Speaker 0>We can click on the feature flag service,

00:13:17.870 --> 00:13:19.150
<v Speaker 0>and we can see it was trying to

00:13:19.150 --> 00:13:19.950
<v Speaker 0>understand

00:13:20.350 --> 00:13:20.990
<v Speaker 0>if

00:13:21.710 --> 00:13:23.470
<v Speaker 0>a feature flag is enabled.

00:13:24.415 --> 00:13:26.815
<v Speaker 0>The product catalog failure.

00:13:28.335 --> 00:13:30.255
<v Speaker 0>In this case, it was false, so we

00:13:30.255 --> 00:13:31.455
<v Speaker 0>didn't get an error.

00:13:33.455 --> 00:13:36.495
<v Speaker 0>And right away, we're seeing the core value

00:13:36.495 --> 00:13:38.255
<v Speaker 0>of a tool like Lumigo.

00:13:39.100 --> 00:13:41.740
<v Speaker 0>You don't need to understand an application

00:13:41.740 --> 00:13:43.740
<v Speaker 0>as a whole at a macro level when

00:13:43.740 --> 00:13:46.700
<v Speaker 0>it is built of lots of smaller microservices.

00:13:47.740 --> 00:13:50.540
<v Speaker 0>We could focus on just the debugging and

00:13:50.540 --> 00:13:52.780
<v Speaker 0>observability, and we are going to dive into

00:13:52.780 --> 00:13:54.975
<v Speaker 0>looking at how that works with Lumigo.

00:13:55.375 --> 00:13:58.015
<v Speaker 0>But as an ability to onboard new people

00:13:58.015 --> 00:14:00.175
<v Speaker 0>to your team, instrumentation

00:14:00.175 --> 00:14:01.055
<v Speaker 0>is key.

00:14:01.295 --> 00:14:04.495
<v Speaker 0>Much like testing is invaluable for learning how

00:14:04.495 --> 00:14:05.535
<v Speaker 0>code should work,

00:14:06.630 --> 00:14:08.550
<v Speaker 0>Good observability tools

00:14:08.710 --> 00:14:11.270
<v Speaker 0>can reveal the same on an architecture

00:14:11.270 --> 00:14:14.310
<v Speaker 0>level and not just an architecture level. Here,

00:14:14.310 --> 00:14:16.550
<v Speaker 0>we can see that we have feature flags.

00:14:16.550 --> 00:14:18.710
<v Speaker 0>We have Redis. We're using gRPC.

00:14:19.375 --> 00:14:22.175
<v Speaker 0>We have all of these services working together

00:14:22.175 --> 00:14:24.175
<v Speaker 0>and we have a good understanding of how

00:14:24.175 --> 00:14:25.535
<v Speaker 0>that happens.

00:14:25.695 --> 00:14:27.295
<v Speaker 0>So thank you, Lumigo.

00:14:28.095 --> 00:14:28.735
<v Speaker 0>Now,

00:14:29.055 --> 00:14:30.735
<v Speaker 0>let's go back to

00:14:31.135 --> 00:14:32.095
<v Speaker 0>debugging,

00:14:32.095 --> 00:14:33.215
<v Speaker 0>one of my favorite topics.

00:14:35.120 --> 00:14:37.120
<v Speaker 0>So I've jumped over to the Live Tail

00:14:37.120 --> 00:14:39.680
<v Speaker 0>page so we can see things in real

00:14:39.680 --> 00:14:40.480
<v Speaker 0>time.

00:14:42.000 --> 00:14:43.440
<v Speaker 0>Let's jump back

00:14:44.079 --> 00:14:45.360
<v Speaker 0>to our demo application,

00:14:46.295 --> 00:14:47.334
<v Speaker 0>go shopping

00:14:47.975 --> 00:14:50.774
<v Speaker 0>and add something to our cart. Right now,

00:14:50.774 --> 00:14:52.615
<v Speaker 0>we have three items. It's not really that

00:14:52.615 --> 00:14:53.334
<v Speaker 0>important.

00:14:54.214 --> 00:14:56.855
<v Speaker 0>This application has a cool edge case where

00:14:56.855 --> 00:14:59.334
<v Speaker 0>whenever you change the credit card number, it

00:14:59.334 --> 00:15:00.295
<v Speaker 0>will cause an error.

00:15:01.350 --> 00:15:03.670
<v Speaker 0>So we'll hit place order and jump back

00:15:03.670 --> 00:15:05.270
<v Speaker 0>to our live tail.

00:15:07.030 --> 00:15:08.630
<v Speaker 0>Now we can see all of the requests

00:15:08.630 --> 00:15:10.630
<v Speaker 0>that were happening behind the scenes as we

00:15:10.630 --> 00:15:12.870
<v Speaker 0>added to the car and browsed around the

00:15:12.870 --> 00:15:13.270
<v Speaker 0>website.

00:15:13.915 --> 00:15:17.515
<v Speaker 0>And now we can see some checkout failures.

00:15:17.515 --> 00:15:18.795
<v Speaker 0>So let's pause

00:15:19.755 --> 00:15:20.955
<v Speaker 0>the live tail.

00:15:21.195 --> 00:15:22.795
<v Speaker 0>And I click checkout a bunch of times

00:15:22.795 --> 00:15:24.235
<v Speaker 0>so we can see them coming on over

00:15:24.235 --> 00:15:26.315
<v Speaker 0>and over. But we're here, we can see

00:15:26.315 --> 00:15:27.915
<v Speaker 0>that we tried to checkout

00:15:28.315 --> 00:15:29.515
<v Speaker 0>checkout

00:15:30.130 --> 00:15:31.170
<v Speaker 0>check out.

00:15:31.570 --> 00:15:33.889
<v Speaker 0>These failures are up because I changed that

00:15:33.889 --> 00:15:34.529
<v Speaker 0>number.

00:15:35.649 --> 00:15:37.250
<v Speaker 0>Well, let's take a look at one.

00:15:38.209 --> 00:15:40.850
<v Speaker 0>And now we have issues.

00:15:41.649 --> 00:15:43.970
<v Speaker 0>These can also be discovered via

00:15:44.585 --> 00:15:46.025
<v Speaker 0>the issues page.

00:15:48.585 --> 00:15:50.505
<v Speaker 0>And even on the dashboard, we can see

00:15:50.505 --> 00:15:52.585
<v Speaker 0>an occurrence of the issues here.

00:15:53.065 --> 00:15:54.745
<v Speaker 0>So, we go back to issues.

00:15:55.545 --> 00:15:57.065
<v Speaker 0>And now we can see here we have

00:15:57.065 --> 00:15:58.585
<v Speaker 0>failed to charge card.

00:15:59.840 --> 00:16:01.200
<v Speaker 0>Let's click on that

00:16:01.520 --> 00:16:02.720
<v Speaker 0>and take a look.

00:16:04.080 --> 00:16:06.240
<v Speaker 0>Now, we get an overview of what went

00:16:06.240 --> 00:16:08.400
<v Speaker 0>wrong during this transaction.

00:16:08.720 --> 00:16:10.320
<v Speaker 0>We can see the front end,

00:16:10.880 --> 00:16:13.120
<v Speaker 0>try to place an order over gRPC

00:16:13.120 --> 00:16:14.800
<v Speaker 0>with the checkout service.

00:16:16.535 --> 00:16:19.655
<v Speaker 0>And we can see the actual error message

00:16:19.655 --> 00:16:22.375
<v Speaker 0>or the exception thrown by the application.

00:16:23.335 --> 00:16:24.775
<v Speaker 0>We can see here that it failed to

00:16:24.775 --> 00:16:27.495
<v Speaker 0>charge the card and that's because the card

00:16:27.495 --> 00:16:28.855
<v Speaker 0>number didn't work.

00:16:30.410 --> 00:16:32.329
<v Speaker 0>And just to show you that this definitely

00:16:32.329 --> 00:16:34.410
<v Speaker 0>does work, let's change it back to the

00:16:34.410 --> 00:16:35.290
<v Speaker 0>correct number

00:16:36.170 --> 00:16:37.290
<v Speaker 0>and it works.

00:16:38.329 --> 00:16:40.490
<v Speaker 0>So we get more information

00:16:40.490 --> 00:16:43.690
<v Speaker 0>as things happen even when they are exceptions.

00:16:44.025 --> 00:16:47.225
<v Speaker 0>With this integration of logs right next to

00:16:47.225 --> 00:16:48.105
<v Speaker 0>the trace.

00:16:48.905 --> 00:16:50.985
<v Speaker 0>Now there are some really nice value add

00:16:50.985 --> 00:16:54.345
<v Speaker 0>features here too. One, I can assign this

00:16:55.065 --> 00:16:55.705
<v Speaker 0>to somebody.

00:16:57.160 --> 00:16:59.000
<v Speaker 0>I can create a Jira ticket if I

00:16:59.000 --> 00:17:00.040
<v Speaker 0>have it integrated.

00:17:00.520 --> 00:17:03.160
<v Speaker 0>And if we know about this issue, maybe

00:17:03.160 --> 00:17:05.079
<v Speaker 0>we wanna mute it for a few days

00:17:05.079 --> 00:17:07.240
<v Speaker 0>while we work on a fix.

00:17:08.200 --> 00:17:10.920
<v Speaker 0>Now there is a ton more features we

00:17:10.920 --> 00:17:12.280
<v Speaker 0>could take a look at in Lumigo,

00:17:13.845 --> 00:17:16.244
<v Speaker 0>but we wanna keep this video short and

00:17:16.244 --> 00:17:16.885
<v Speaker 0>sweet.

00:17:17.685 --> 00:17:18.964
<v Speaker 0>But before we go,

00:17:19.285 --> 00:17:20.724
<v Speaker 0>let's click on Kubernetes.

00:17:21.845 --> 00:17:24.484
<v Speaker 0>Here, we get a good visual representation of

00:17:24.484 --> 00:17:26.740
<v Speaker 0>our Kubernetes cluster. We can see all of

00:17:26.740 --> 00:17:29.700
<v Speaker 0>the workloads deployed, the cluster name, the kind,

00:17:29.700 --> 00:17:30.500
<v Speaker 0>namespace,

00:17:30.500 --> 00:17:31.779
<v Speaker 0>when they were modified,

00:17:31.940 --> 00:17:34.100
<v Speaker 0>any issues that are relevant

00:17:34.100 --> 00:17:35.299
<v Speaker 0>or happened

00:17:35.380 --> 00:17:37.940
<v Speaker 0>in the last span of one hour because

00:17:37.940 --> 00:17:39.700
<v Speaker 0>that is what we have the window set

00:17:39.700 --> 00:17:39.860
<v Speaker 0>to.

00:17:40.945 --> 00:17:43.264
<v Speaker 0>If we click on one of the workloads,

00:17:43.264 --> 00:17:45.745
<v Speaker 0>we can see the Kubernetes events from deleting

00:17:45.745 --> 00:17:47.984
<v Speaker 0>pods, scaling replica sets,

00:17:48.065 --> 00:17:50.464
<v Speaker 0>and even creating the deployments and so forth,

00:17:50.784 --> 00:17:52.705
<v Speaker 0>as well as any application issues at the

00:17:52.705 --> 00:17:55.640
<v Speaker 0>bottom. We have a very nice visual representation

00:17:55.640 --> 00:17:57.320
<v Speaker 0>of that timeline too.

00:17:57.880 --> 00:18:00.680
<v Speaker 0>Let's go back and click on our front

00:18:00.680 --> 00:18:01.560
<v Speaker 0>end service.

00:18:06.645 --> 00:18:08.645
<v Speaker 0>As well as the visual fling, the less

00:18:08.645 --> 00:18:10.725
<v Speaker 0>we have the application issues at the bottom

00:18:10.725 --> 00:18:13.765
<v Speaker 0>too. So we can understand how our services

00:18:14.165 --> 00:18:15.284
<v Speaker 0>are behaving

00:18:15.285 --> 00:18:17.605
<v Speaker 0>on a per service basis also.

00:18:18.565 --> 00:18:19.845
<v Speaker 0>The last thing I want to show you

00:18:19.845 --> 00:18:21.205
<v Speaker 0>before we wrap this up

00:18:21.710 --> 00:18:23.149
<v Speaker 0>is explore.

00:18:23.230 --> 00:18:25.870
<v Speaker 0>One of my favorite feature, bot would require

00:18:25.870 --> 00:18:26.590
<v Speaker 0>much

00:18:26.990 --> 00:18:28.990
<v Speaker 0>more time to go into in-depth.

00:18:29.470 --> 00:18:31.550
<v Speaker 0>Here we can filter by service.

00:18:31.550 --> 00:18:33.550
<v Speaker 0>If we just want to see Redis issues,

00:18:33.550 --> 00:18:35.404
<v Speaker 0>we can take a look at Redis. Here

00:18:35.404 --> 00:18:37.565
<v Speaker 0>we can see all the requests propagated through

00:18:37.565 --> 00:18:38.364
<v Speaker 0>the system.

00:18:39.085 --> 00:18:40.365
<v Speaker 0>If we want to take a look at

00:18:40.365 --> 00:18:43.485
<v Speaker 0>Kubernetes clusters or Lambda functions or any of

00:18:43.485 --> 00:18:46.044
<v Speaker 0>the other supported resources, these are filterable here

00:18:46.044 --> 00:18:46.445
<v Speaker 0>too.

00:18:47.650 --> 00:18:49.490
<v Speaker 0>Now, let's say that we just want to

00:18:49.490 --> 00:18:52.370
<v Speaker 0>take a look at our app namespace. Well,

00:18:52.370 --> 00:18:54.450
<v Speaker 0>we can do that too. Now we have

00:18:54.450 --> 00:18:56.370
<v Speaker 0>all of our services and we can drill

00:18:56.370 --> 00:18:57.649
<v Speaker 0>down even further.

00:18:57.970 --> 00:18:59.410
<v Speaker 0>What if we want to take a look

00:18:59.410 --> 00:19:01.410
<v Speaker 0>at one single endpoint?

00:19:01.934 --> 00:19:03.855
<v Speaker 0>Well, let's take a look at that checkout

00:19:03.855 --> 00:19:04.575
<v Speaker 0>endpoint.

00:19:05.534 --> 00:19:07.214
<v Speaker 0>Here we can see the request

00:19:07.215 --> 00:19:08.815
<v Speaker 0>and the results.

00:19:09.134 --> 00:19:10.974
<v Speaker 0>Quite a lot of failures.

00:19:11.215 --> 00:19:12.014
<v Speaker 0>Whoops.

00:19:13.134 --> 00:19:15.375
<v Speaker 0>What if we just wanna filter by long

00:19:15.375 --> 00:19:15.934
<v Speaker 0>requests?

00:19:16.190 --> 00:19:18.429
<v Speaker 0>What about anything that takes more than four

00:19:18.429 --> 00:19:20.909
<v Speaker 0>seconds? Well, we can do that too.

00:19:21.230 --> 00:19:23.309
<v Speaker 0>And you can see that we are actually

00:19:23.309 --> 00:19:26.749
<v Speaker 0>joining these filters together with and statements.

00:19:27.710 --> 00:19:29.070
<v Speaker 0>We could also use not,

00:19:30.455 --> 00:19:33.015
<v Speaker 0>The ability to query and understand the traces

00:19:33.015 --> 00:19:35.495
<v Speaker 0>across your system is up to you.

00:19:36.135 --> 00:19:38.455
<v Speaker 0>Lumigo is such a cool tool,

00:19:38.935 --> 00:19:41.095
<v Speaker 0>and here is the good news.

00:19:42.510 --> 00:19:44.669
<v Speaker 0>Lumigo has a free tier.

00:19:45.470 --> 00:19:48.030
<v Speaker 0>They don't charge you per seat or user.

00:19:48.030 --> 00:19:50.510
<v Speaker 0>You can have unlimited users on the free

00:19:50.510 --> 00:19:52.990
<v Speaker 0>plan, but you will be restricted to a

00:19:52.990 --> 00:19:54.910
<v Speaker 0>50,000

00:19:54.910 --> 00:19:56.190
<v Speaker 0>traces per month.

00:19:57.345 --> 00:19:59.664
<v Speaker 0>And even if you do need more traces,

00:19:59.665 --> 00:20:01.424
<v Speaker 0>up to a million is only a hundred

00:20:01.424 --> 00:20:02.784
<v Speaker 0>bucks a month.

00:20:03.025 --> 00:20:03.825
<v Speaker 0>Awesome.

00:20:04.625 --> 00:20:06.625
<v Speaker 0>I hope you enjoyed this quick demo of

00:20:06.625 --> 00:20:09.905
<v Speaker 0>Lumigo. Go check out their website at lumigo.io.

00:20:11.090 --> 00:20:13.730
<v Speaker 0>And don't forget, tell them the Rawkode sent

00:20:13.730 --> 00:20:14.210
<v Speaker 0>you.

00:20:15.170 --> 00:20:16.450
<v Speaker 0>Thank you for your time.

00:20:16.850 --> 00:20:17.570
<v Speaker 0>Have

00:20:17.650 --> 00:20:18.530
<v Speaker 0>an awesome day.
