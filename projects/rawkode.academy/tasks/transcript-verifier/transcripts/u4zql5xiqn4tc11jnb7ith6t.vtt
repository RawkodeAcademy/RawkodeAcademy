WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 229f03b6-d0db-44b1-b0a5-3d9db8daefac
Created: 2025-04-29T13:11:03.806Z
Duration: 2961.851
Channels: 1

00:00:00.240 --> 00:00:02.639
<v Speaker 0>Hi. Just a quick message before the next

00:00:02.639 --> 00:00:03.360
<v Speaker 0>episode.

00:00:03.600 --> 00:00:05.680
<v Speaker 0>My audio is unfortunately

00:00:05.839 --> 00:00:06.720
<v Speaker 0>terrible.

00:00:06.960 --> 00:00:09.599
<v Speaker 0>However, my cohost Laura and our wonderful guests'

00:00:09.599 --> 00:00:11.280
<v Speaker 0>audio is perfect.

00:00:11.519 --> 00:00:13.360
<v Speaker 0>So listen to them. Don't listen to me.

00:00:13.485 --> 00:00:16.765
<v Speaker 0>Enjoy the episode. Welcome to Cloud Native Compass,

00:00:17.005 --> 00:00:19.564
<v Speaker 1>a podcast to help you navigate the vast

00:00:19.564 --> 00:00:22.365
<v Speaker 1>landscape of the cloud native ecosystem. We're your

00:00:22.365 --> 00:00:25.404
<v Speaker 2>hosts. I'm David Flanagan, a technology magpie that

00:00:25.404 --> 00:00:27.940
<v Speaker 2>can't stop playing with new shiny things. I'm

00:00:27.940 --> 00:00:30.660
<v Speaker 1>Laura Santa Maria, a forever learner who is

00:00:30.660 --> 00:00:32.180
<v Speaker 1>constantly breaking production.

00:00:32.500 --> 00:00:34.660
<v Speaker 2>Nervous about cloud native networking?

00:00:34.820 --> 00:00:35.620
<v Speaker 2>Intrigued

00:00:35.620 --> 00:00:36.660
<v Speaker 2>by Istio.

00:00:36.740 --> 00:00:39.140
<v Speaker 2>Today, we're chatting with Matt Turner and Maureen

00:00:39.140 --> 00:00:42.165
<v Speaker 2>Obiget, both contributors to the Istio project and

00:00:42.165 --> 00:00:45.364
<v Speaker 2>advocates for the new ambient mesh architecture provided

00:00:45.364 --> 00:00:48.004
<v Speaker 2>by Istio. With the graduation of the Istio

00:00:48.004 --> 00:00:50.245
<v Speaker 1>project and the alpha release of the ambient

00:00:50.245 --> 00:00:51.524
<v Speaker 1>mesh architecture,

00:00:52.000 --> 00:00:54.000
<v Speaker 1>We have a lot of questions to ask

00:00:54.000 --> 00:00:56.560
<v Speaker 1>that Matt and Marino can't wait to answer.

00:00:57.040 --> 00:01:00.160
<v Speaker 3>Alright. Hello, everyone. Welcome to this, to this

00:01:00.160 --> 00:01:02.239
<v Speaker 3>little session here on Cloud Native Compass. My

00:01:02.239 --> 00:01:03.120
<v Speaker 3>name is Marino.

00:01:03.680 --> 00:01:06.320
<v Speaker 3>Am a platform slash developer advocate at Solo,

00:01:06.725 --> 00:01:09.124
<v Speaker 3>and I focus in on network technologies

00:01:09.204 --> 00:01:11.204
<v Speaker 3>spanning from the lower levels all the way

00:01:11.204 --> 00:01:13.445
<v Speaker 3>up to service mesh. And I'm I'm here

00:01:13.604 --> 00:01:15.445
<v Speaker 3>I'm very excited to talk about ambient mesh

00:01:15.445 --> 00:01:16.164
<v Speaker 3>with y'all.

00:01:16.564 --> 00:01:17.524
<v Speaker 1>So excited.

00:01:17.604 --> 00:01:18.485
<v Speaker 1>So excited. Tell.

00:01:19.829 --> 00:01:21.750
<v Speaker 3>Where's the excitement in Marino? Like, come on.

00:01:21.750 --> 00:01:22.390
<v Speaker 3>Let's go.

00:01:24.630 --> 00:01:26.549
<v Speaker 4>So I'm Matt Turner. I'm a software engineer

00:01:26.549 --> 00:01:27.590
<v Speaker 4>at Tetrate.

00:01:27.670 --> 00:01:30.069
<v Speaker 4>I focus on fairly similar stuff to Marino,

00:01:30.069 --> 00:01:32.355
<v Speaker 4>I guess, looking at service mesh. I've been

00:01:32.355 --> 00:01:35.155
<v Speaker 4>into Kubernetes containers, cloud native stuff for for

00:01:35.155 --> 00:01:37.235
<v Speaker 4>quite a long time now. Yeah. Also super

00:01:37.235 --> 00:01:39.795
<v Speaker 4>excited to to talk about AmiMesh. It's a

00:01:39.795 --> 00:01:42.515
<v Speaker 4>really interesting development. Yeah. Lots to lots to

00:01:42.515 --> 00:01:43.155
<v Speaker 4>cover.

00:01:43.475 --> 00:01:44.995
<v Speaker 2>Alright. Well, I mean, we'll let's just kick

00:01:44.995 --> 00:01:46.835
<v Speaker 2>it off. You both said AmiMesh now. So

00:01:46.835 --> 00:01:48.650
<v Speaker 2>I have to set it for machines we

00:01:48.650 --> 00:01:50.090
<v Speaker 2>can actually properly start.

00:01:50.409 --> 00:01:52.409
<v Speaker 2>But for anyone who is not aware of

00:01:52.409 --> 00:01:54.409
<v Speaker 2>what is happening in the service mesh space,

00:01:54.409 --> 00:01:57.850
<v Speaker 2>particularly around Istio, can we give them the

00:01:57.850 --> 00:02:00.170
<v Speaker 2>thirty second of an overview of what is

00:02:00.170 --> 00:02:01.130
<v Speaker 2>ambient mesh?

00:02:01.545 --> 00:02:03.065
<v Speaker 3>Sure. Yeah. So

00:02:03.385 --> 00:02:05.865
<v Speaker 3>ambient mesh is a new mode of operation

00:02:05.865 --> 00:02:07.385
<v Speaker 3>in the world of Istio,

00:02:07.385 --> 00:02:08.585
<v Speaker 3>and it was

00:02:08.824 --> 00:02:10.745
<v Speaker 3>it was developed because there were a lot

00:02:10.745 --> 00:02:12.745
<v Speaker 3>of different interesting patterns that we were seeing

00:02:12.745 --> 00:02:16.000
<v Speaker 3>with workloads that just never really saw a

00:02:16.000 --> 00:02:17.600
<v Speaker 3>benefit to using a sidecar.

00:02:18.080 --> 00:02:20.240
<v Speaker 3>A service mesh normally would deploy a sidecar

00:02:20.240 --> 00:02:22.240
<v Speaker 3>alongside your main application container,

00:02:22.400 --> 00:02:24.240
<v Speaker 3>but we realized that there are certain patterns

00:02:24.240 --> 00:02:26.320
<v Speaker 3>that just don't fit with the sidecar model.

00:02:26.320 --> 00:02:29.280
<v Speaker 3>So enter ambient mesh where we're effectively removing

00:02:29.280 --> 00:02:31.040
<v Speaker 3>the sidecar but still presenting

00:02:31.495 --> 00:02:33.415
<v Speaker 3>the service mesh like capabilities

00:02:33.575 --> 00:02:35.735
<v Speaker 3>but from a different lens and in a

00:02:35.735 --> 00:02:36.775
<v Speaker 3>different architecture.

00:02:36.935 --> 00:02:38.535
<v Speaker 3>At the end of the day, ambient mesh

00:02:38.535 --> 00:02:39.895
<v Speaker 3>is still service mesh.

00:02:40.055 --> 00:02:41.415
<v Speaker 3>It just creates

00:02:41.415 --> 00:02:42.295
<v Speaker 3>operational

00:02:42.295 --> 00:02:44.695
<v Speaker 3>simplicity and allows you to cut back on

00:02:44.695 --> 00:02:45.175
<v Speaker 3>resources

00:02:45.830 --> 00:02:48.070
<v Speaker 3>while still retaining all the benefits of what

00:02:48.070 --> 00:02:49.350
<v Speaker 3>a service mesh offers.

00:02:49.830 --> 00:02:51.430
<v Speaker 4>I guess that's probably what we'll get into.

00:02:51.430 --> 00:02:52.710
<v Speaker 4>I mean yeah. So, absolutely,

00:02:53.110 --> 00:02:54.790
<v Speaker 4>ambient mesh is is a new a new

00:02:54.790 --> 00:02:56.790
<v Speaker 4>mode. So a new, you know, install option

00:02:56.790 --> 00:02:59.430
<v Speaker 4>deployment topology for for Istio. It's still still

00:02:59.430 --> 00:03:00.630
<v Speaker 4>still Istio.

00:03:01.670 --> 00:03:03.245
<v Speaker 4>Yeah. That's the service mesh that's been done

00:03:03.245 --> 00:03:04.525
<v Speaker 4>in. There's no reason this couldn't be applied

00:03:04.525 --> 00:03:05.965
<v Speaker 4>to to other meshes, but this is an

00:03:05.965 --> 00:03:07.405
<v Speaker 4>Istio project we're talking about.

00:03:08.445 --> 00:03:10.445
<v Speaker 4>I probably have some, you know, some comments

00:03:10.445 --> 00:03:13.085
<v Speaker 4>on on pretty much all of the sort

00:03:13.085 --> 00:03:15.005
<v Speaker 4>of, you know, features that were listed there.

00:03:15.005 --> 00:03:16.365
<v Speaker 4>Like, we can we can debate those.

00:03:17.319 --> 00:03:19.319
<v Speaker 4>But, yeah, the, like, the the 50,000 foot

00:03:19.319 --> 00:03:21.000
<v Speaker 4>view is that it's a new deployment mode,

00:03:21.000 --> 00:03:23.239
<v Speaker 4>a new architecture for for Istio that, like

00:03:23.239 --> 00:03:26.680
<v Speaker 4>Marino says, removes sidecars and replaces them with

00:03:26.760 --> 00:03:28.120
<v Speaker 4>a different way of doing things on the

00:03:28.120 --> 00:03:29.400
<v Speaker 4>on the data plane. It's still the same

00:03:29.400 --> 00:03:30.359
<v Speaker 4>Istio control plane.

00:03:31.525 --> 00:03:34.325
<v Speaker 2>Okay. So I'm being managed to move sidecar.

00:03:34.885 --> 00:03:37.445
<v Speaker 2>I would hope that this brings substantial

00:03:38.165 --> 00:03:39.845
<v Speaker 2>maybe not directly performance,

00:03:39.845 --> 00:03:42.725
<v Speaker 2>but at least what computer memory optimizations across

00:03:42.725 --> 00:03:44.485
<v Speaker 2>the cluster because,

00:03:44.645 --> 00:03:46.245
<v Speaker 2>you know, people are running

00:03:46.739 --> 00:03:49.140
<v Speaker 2>this throw out the wonderful 10 number. Right?

00:03:49.140 --> 00:03:50.819
<v Speaker 2>A 10 pods and everyone else have nodes,

00:03:50.819 --> 00:03:53.860
<v Speaker 2>and they've got 10 nodes. We're talking about

00:03:54.099 --> 00:03:55.299
<v Speaker 2>oh my god. I have to do math.

00:03:55.299 --> 00:03:57.060
<v Speaker 2>It's only multiples 10. 12 hundred

00:03:58.819 --> 00:04:01.735
<v Speaker 2>12 hundred pods, which could be potentially 2,400

00:04:01.735 --> 00:04:05.095
<v Speaker 2>containers after and sidecar mode. Right? So while

00:04:05.095 --> 00:04:06.855
<v Speaker 2>I'm sure these sidecars

00:04:06.855 --> 00:04:09.975
<v Speaker 2>have historically been optimized to be very lightweight,

00:04:10.295 --> 00:04:11.974
<v Speaker 2>they're still containers at the end of the

00:04:11.974 --> 00:04:14.410
<v Speaker 2>day, which means they still do have a

00:04:14.410 --> 00:04:17.050
<v Speaker 2>memory footprint, a compute footprint, and so forth.

00:04:17.209 --> 00:04:18.410
<v Speaker 2>What are

00:04:18.730 --> 00:04:20.570
<v Speaker 2>I mean, is that directly the benefit of

00:04:20.570 --> 00:04:22.010
<v Speaker 2>ambient mesh, is there more to it than

00:04:22.010 --> 00:04:24.810
<v Speaker 2>that? There's much more to it. So let's

00:04:24.810 --> 00:04:27.130
<v Speaker 3>let's think of the classic example of

00:04:27.530 --> 00:04:28.490
<v Speaker 3>the race condition.

00:04:29.055 --> 00:04:31.295
<v Speaker 3>So you have certain applications that need to

00:04:31.295 --> 00:04:33.295
<v Speaker 3>respond almost immediately,

00:04:33.455 --> 00:04:35.375
<v Speaker 3>but when you inject a sidecar into that

00:04:35.375 --> 00:04:36.015
<v Speaker 3>model,

00:04:36.975 --> 00:04:38.655
<v Speaker 3>one of the the challenges that you have

00:04:38.655 --> 00:04:40.335
<v Speaker 3>is that now you have this race condition

00:04:40.335 --> 00:04:42.575
<v Speaker 3>of the sidecar versus the application container that

00:04:42.575 --> 00:04:44.880
<v Speaker 3>have to come online. Who comes online first?

00:04:45.280 --> 00:04:47.520
<v Speaker 3>There might be situations where you have to

00:04:47.520 --> 00:04:50.160
<v Speaker 3>set a, what they call, a hold application

00:04:50.160 --> 00:04:53.360
<v Speaker 3>timer in the configuration to prevent your main

00:04:53.360 --> 00:04:55.840
<v Speaker 3>application container coming online before your sidecar.

00:04:56.595 --> 00:04:59.235
<v Speaker 3>In that situation, what ends up happening is

00:04:59.634 --> 00:05:02.435
<v Speaker 3>the Istio in that container cannot redirect IP

00:05:02.435 --> 00:05:04.115
<v Speaker 3>tables so that traffic can go through the

00:05:04.115 --> 00:05:06.755
<v Speaker 3>sidecar first before it gets to the application

00:05:06.755 --> 00:05:07.395
<v Speaker 3>container.

00:05:07.634 --> 00:05:09.955
<v Speaker 3>Actually, that doesn't even happen. Your application container

00:05:09.955 --> 00:05:11.395
<v Speaker 3>is directly

00:05:10.960 --> 00:05:13.360
<v Speaker 3>interfacing with other services, and it's not even

00:05:13.360 --> 00:05:14.720
<v Speaker 3>part of the mesh at that point.

00:05:15.120 --> 00:05:17.520
<v Speaker 3>So one of the approaches that ambient mesh

00:05:17.520 --> 00:05:18.320
<v Speaker 3>takes is

00:05:18.720 --> 00:05:21.520
<v Speaker 3>you could still inject services into a mesh

00:05:21.520 --> 00:05:23.520
<v Speaker 3>without having to deploy this sidecar.

00:05:24.065 --> 00:05:25.905
<v Speaker 3>And what ends up happening is there are

00:05:25.905 --> 00:05:28.544
<v Speaker 3>resources that sit outside of the application itself

00:05:28.544 --> 00:05:30.785
<v Speaker 3>or the pod itself that set up the

00:05:30.785 --> 00:05:33.505
<v Speaker 3>redirection of traffic. Now there are some components

00:05:33.505 --> 00:05:35.425
<v Speaker 3>that are involved that make this possible. For

00:05:35.425 --> 00:05:35.665
<v Speaker 3>example,

00:05:36.500 --> 00:05:38.820
<v Speaker 3>are you all familiar with the Istio CNI?

00:05:38.820 --> 00:05:41.220
<v Speaker 3>The Istio CNI is is more of a

00:05:41.540 --> 00:05:43.460
<v Speaker 3>it's not a CNI replacement, just to be

00:05:43.460 --> 00:05:45.620
<v Speaker 3>clear. It's not a container networking interface plug

00:05:45.620 --> 00:05:47.860
<v Speaker 3>in. It's actually an add on that you

00:05:47.860 --> 00:05:49.700
<v Speaker 3>associate with Istio because

00:05:49.955 --> 00:05:52.595
<v Speaker 3>there are certain situations where the security teams

00:05:52.595 --> 00:05:54.595
<v Speaker 3>do not want you to hop into your

00:05:54.675 --> 00:05:58.035
<v Speaker 3>your pod manifest and specify privileges for those

00:05:58.035 --> 00:06:01.475
<v Speaker 3>application containers from a security standpoint. So you

00:06:01.475 --> 00:06:03.315
<v Speaker 3>would use the Istio CNI to do a

00:06:03.315 --> 00:06:05.650
<v Speaker 3>lot of this, give give it access to

00:06:05.650 --> 00:06:07.570
<v Speaker 3>be able to modify those changes at the

00:06:07.570 --> 00:06:10.370
<v Speaker 3>the host level, IP tables rewrites,

00:06:10.770 --> 00:06:14.770
<v Speaker 3>to allow for pods or applications to communicate

00:06:14.770 --> 00:06:16.050
<v Speaker 3>in ambient mesh.

00:06:16.450 --> 00:06:18.290
<v Speaker 3>Even outside of ambient mesh, when we're talking

00:06:18.290 --> 00:06:22.064
<v Speaker 3>about having sidecars present with that particular security

00:06:22.064 --> 00:06:23.104
<v Speaker 3>constraint,

00:06:23.264 --> 00:06:25.824
<v Speaker 3>the Istio CNI will help with the redirection

00:06:25.824 --> 00:06:27.745
<v Speaker 3>as well without having to modify any sort

00:06:27.745 --> 00:06:28.945
<v Speaker 3>of pod manifests.

00:06:29.185 --> 00:06:31.104
<v Speaker 3>Now when you think about that for a

00:06:31.104 --> 00:06:31.344
<v Speaker 3>second,

00:06:32.150 --> 00:06:34.150
<v Speaker 3>when you actually think about what that truly

00:06:34.150 --> 00:06:34.710
<v Speaker 3>means,

00:06:35.110 --> 00:06:37.430
<v Speaker 3>it just means that we're just redirecting traffic

00:06:37.430 --> 00:06:39.430
<v Speaker 3>no differently than we would do inside of

00:06:39.430 --> 00:06:41.270
<v Speaker 3>the actual pod itself if a sidecar was

00:06:41.270 --> 00:06:43.189
<v Speaker 3>there because that's the operation that goes on

00:06:43.189 --> 00:06:43.910
<v Speaker 3>anyways.

00:06:44.150 --> 00:06:46.385
<v Speaker 3>Now here's the other consideration,

00:06:46.385 --> 00:06:49.025
<v Speaker 3>though. So you don't have a sidecar anymore

00:06:49.025 --> 00:06:50.305
<v Speaker 3>in ambient mesh.

00:06:50.545 --> 00:06:52.385
<v Speaker 3>Who's actually doing the mesh stuff? Where do

00:06:52.385 --> 00:06:54.065
<v Speaker 3>things like MTLS show up? How do we

00:06:54.065 --> 00:06:56.465
<v Speaker 3>gain our observability? What happens to things like

00:06:56.545 --> 00:06:57.825
<v Speaker 3>authorization policies?

00:06:58.490 --> 00:07:00.890
<v Speaker 3>Now that's what's been addressed in ambient mesh

00:07:00.890 --> 00:07:03.850
<v Speaker 3>through some some artifacts, two new artifacts. One

00:07:03.850 --> 00:07:05.210
<v Speaker 3>is called the z tunnel,

00:07:05.530 --> 00:07:06.810
<v Speaker 3>and the other one is called the waypoint

00:07:06.810 --> 00:07:07.530
<v Speaker 3>proxy.

00:07:08.170 --> 00:07:10.490
<v Speaker 3>Now the z tunnel is

00:07:10.490 --> 00:07:12.765
<v Speaker 3>a node level proxy, you could say, which

00:07:12.765 --> 00:07:14.445
<v Speaker 3>actually used to be Envoy a long time

00:07:14.445 --> 00:07:17.245
<v Speaker 3>ago, and they've rewritten it, in Rust

00:07:17.405 --> 00:07:19.645
<v Speaker 3>just to focus in on things like layer

00:07:19.645 --> 00:07:21.405
<v Speaker 3>four policy and connectivity,

00:07:21.645 --> 00:07:25.005
<v Speaker 3>providing the MTLS, and even providing authentication to

00:07:25.005 --> 00:07:25.645
<v Speaker 3>other services.

00:07:26.420 --> 00:07:28.820
<v Speaker 3>But what really interestingly happens here is that

00:07:28.820 --> 00:07:30.740
<v Speaker 3>when you have traffic that has to go

00:07:30.740 --> 00:07:32.740
<v Speaker 3>between nodes and you have, you know, service

00:07:32.740 --> 00:07:34.900
<v Speaker 3>to service communication between those nodes,

00:07:35.300 --> 00:07:38.100
<v Speaker 3>your traffic actually traverses these z tunnel pods

00:07:38.100 --> 00:07:39.380
<v Speaker 3>that exist at the node level.

00:07:40.045 --> 00:07:42.045
<v Speaker 3>And these z tunnel pods, again, because they

00:07:42.045 --> 00:07:43.645
<v Speaker 3>exist across all the nodes as a daemon

00:07:43.645 --> 00:07:46.125
<v Speaker 3>set, they are forming tunnels to each other.

00:07:46.365 --> 00:07:46.925
<v Speaker 3>Now

00:07:47.405 --> 00:07:49.805
<v Speaker 3>are any of you familiar with tunneling technologies

00:07:49.805 --> 00:07:52.765
<v Speaker 3>like IPSec or or VXLAN

00:07:52.765 --> 00:07:55.490
<v Speaker 3>or okay. So it's a very, very okay.

00:07:55.490 --> 00:07:58.210
<v Speaker 3>So these these tunneling technologies basically create a

00:07:58.210 --> 00:08:00.210
<v Speaker 3>virtual private laneway

00:08:00.370 --> 00:08:02.370
<v Speaker 3>or network, VPN, basically,

00:08:02.690 --> 00:08:03.490
<v Speaker 3>to allow

00:08:03.890 --> 00:08:05.970
<v Speaker 3>for a dedicated lane for your your traffic

00:08:05.970 --> 00:08:07.250
<v Speaker 3>to move about without

00:08:07.564 --> 00:08:09.724
<v Speaker 3>folks being able to inspect and sniff that

00:08:09.724 --> 00:08:11.405
<v Speaker 3>traffic and know what's going on behind the

00:08:11.405 --> 00:08:11.965
<v Speaker 3>scenes.

00:08:12.284 --> 00:08:13.965
<v Speaker 3>They won't be able to understand what payloads

00:08:13.965 --> 00:08:15.004
<v Speaker 3>are being sent because all of that is

00:08:15.004 --> 00:08:16.525
<v Speaker 3>jumbled and encrypted anyways.

00:08:17.085 --> 00:08:19.324
<v Speaker 3>Now we wanna maintain the encryption because we

00:08:19.324 --> 00:08:20.604
<v Speaker 3>wanna maintain that security

00:08:20.880 --> 00:08:22.320
<v Speaker 3>posture altogether.

00:08:22.800 --> 00:08:25.280
<v Speaker 3>But the creative way that we approach this

00:08:25.280 --> 00:08:27.360
<v Speaker 3>or that the open source community approach this

00:08:27.360 --> 00:08:30.080
<v Speaker 3>is by creating a brand new tunneling protocol

00:08:30.160 --> 00:08:32.960
<v Speaker 3>called Hbone or the HTTP based overlay network

00:08:32.960 --> 00:08:34.160
<v Speaker 3>encapsulation protocol,

00:08:34.625 --> 00:08:36.625
<v Speaker 3>which is another fancy way of saying, hey.

00:08:36.625 --> 00:08:39.025
<v Speaker 3>Let's just deploy VXLAN slash Geneva,

00:08:39.265 --> 00:08:40.945
<v Speaker 3>four z tunnels to form the tunnels to

00:08:40.945 --> 00:08:42.945
<v Speaker 3>each other and create that laneway, which is

00:08:42.945 --> 00:08:45.345
<v Speaker 3>all what's going on. But here's the here's

00:08:45.345 --> 00:08:46.305
<v Speaker 3>the kicker here.

00:08:46.785 --> 00:08:48.065
<v Speaker 3>So all of this is layer four.

00:08:48.870 --> 00:08:50.550
<v Speaker 3>When you start to realize that, hey. I

00:08:50.550 --> 00:08:52.630
<v Speaker 3>need to inject some layer seven policy. I

00:08:52.630 --> 00:08:54.950
<v Speaker 3>don't wanna run get operations against the service.

00:08:54.950 --> 00:08:56.470
<v Speaker 3>I need to provide some sort of mechanism

00:08:56.470 --> 00:08:58.710
<v Speaker 3>to prevent that. This is where I deploy

00:08:58.710 --> 00:09:00.950
<v Speaker 3>a waypoint proxy, which is still Envoy based.

00:09:01.365 --> 00:09:03.365
<v Speaker 3>Now I'll stop there because there's a lot

00:09:03.365 --> 00:09:05.365
<v Speaker 3>more technical details around it, and, you know,

00:09:05.365 --> 00:09:07.285
<v Speaker 3>maybe Matt might wanna expand on that a

00:09:07.285 --> 00:09:09.045
<v Speaker 3>little bit more. Yeah. I mean, I'd probably

00:09:09.045 --> 00:09:10.245
<v Speaker 4>like to get right back to the the

00:09:10.245 --> 00:09:12.245
<v Speaker 4>beginning. Right? So, I mean, the the race

00:09:12.245 --> 00:09:14.565
<v Speaker 4>condition that was mentioned is

00:09:14.730 --> 00:09:17.209
<v Speaker 4>I I mean, say that's an implementation detail.

00:09:17.209 --> 00:09:19.690
<v Speaker 4>It's it's definitely real. It's definitely a concern.

00:09:20.570 --> 00:09:22.970
<v Speaker 4>There is a at the moment, yeah, there's

00:09:23.209 --> 00:09:24.570
<v Speaker 4>the the solution to that is to hold

00:09:24.570 --> 00:09:27.290
<v Speaker 4>the application back. There's the Monzo open source,

00:09:27.290 --> 00:09:29.130
<v Speaker 4>like a a wrapper that does that, like

00:09:29.130 --> 00:09:30.410
<v Speaker 4>an idiot wrapper that does that.

00:09:31.105 --> 00:09:32.625
<v Speaker 4>You know, there's there's various sort of ways

00:09:32.625 --> 00:09:34.225
<v Speaker 4>to fix it at the moment, but there's

00:09:34.225 --> 00:09:35.745
<v Speaker 4>a, you know, there's a KEP out to

00:09:35.745 --> 00:09:37.425
<v Speaker 4>to fix this in Kubernetes. So this is

00:09:37.425 --> 00:09:39.345
<v Speaker 4>this is kinda well known. It's understood.

00:09:40.145 --> 00:09:42.305
<v Speaker 4>A network sidecar is not the only kind

00:09:42.305 --> 00:09:44.700
<v Speaker 4>of sidecar container that has this issue. So

00:09:44.700 --> 00:09:47.020
<v Speaker 4>there's a there's a in progress to identify,

00:09:47.020 --> 00:09:49.740
<v Speaker 4>like, the main application container and the sidecars

00:09:49.820 --> 00:09:52.220
<v Speaker 4>and ensure that ordering. Right? So to me,

00:09:52.220 --> 00:09:54.540
<v Speaker 4>that's an implementation detail. Like, it's it's being

00:09:54.540 --> 00:09:55.260
<v Speaker 4>fixed.

00:09:55.900 --> 00:09:57.660
<v Speaker 4>I'm not sure the thing about the init

00:09:57.660 --> 00:10:00.445
<v Speaker 4>containers is actually true. Like, they are guaranteed

00:10:00.445 --> 00:10:02.125
<v Speaker 4>to run before any of the sidecar or

00:10:02.125 --> 00:10:04.605
<v Speaker 4>any of the sort of main runtime containers

00:10:04.605 --> 00:10:06.365
<v Speaker 4>run, even the sidecar. So it's the init

00:10:06.365 --> 00:10:08.045
<v Speaker 4>container that sets up the

00:10:08.365 --> 00:10:09.325
<v Speaker 4>interception,

00:10:09.485 --> 00:10:11.725
<v Speaker 4>the IP table's interception. So so and that

00:10:11.725 --> 00:10:14.200
<v Speaker 4>is guaranteed to run to completion before the

00:10:14.200 --> 00:10:16.520
<v Speaker 4>application container runs or the sidecar.

00:10:17.080 --> 00:10:18.680
<v Speaker 4>So, again, I'm not quite sure about,

00:10:19.160 --> 00:10:20.920
<v Speaker 4>you know, what's what's maybe going on there

00:10:20.920 --> 00:10:23.000
<v Speaker 4>with, with the security. Like, those IP tables

00:10:23.000 --> 00:10:24.760
<v Speaker 4>rules would always be in place. Sure. The

00:10:24.760 --> 00:10:27.085
<v Speaker 4>sidecar might not be ready by the time

00:10:27.085 --> 00:10:28.365
<v Speaker 4>the app has come up, so the traffic

00:10:28.365 --> 00:10:29.485
<v Speaker 4>will get black hole,

00:10:29.805 --> 00:10:31.805
<v Speaker 4>which is an availability concern, but it's not

00:10:31.805 --> 00:10:33.965
<v Speaker 4>a security concern because we know those interception

00:10:33.965 --> 00:10:35.485
<v Speaker 4>rules will already be in place.

00:10:35.965 --> 00:10:37.965
<v Speaker 4>What Istio CNI is, yeah, like Marino says,

00:10:37.965 --> 00:10:40.445
<v Speaker 4>it's not another, like, CNI, like another, actual

00:10:40.445 --> 00:10:43.200
<v Speaker 4>overlay network, but it's a CNI wrapper because

00:10:43.200 --> 00:10:44.560
<v Speaker 4>you can stack these these,

00:10:44.880 --> 00:10:46.240
<v Speaker 4>CNI plugins. So it'll,

00:10:46.880 --> 00:10:48.960
<v Speaker 4>what it does is it basically runs so

00:10:48.960 --> 00:10:50.720
<v Speaker 4>with the job of a CNI the job

00:10:50.720 --> 00:10:52.400
<v Speaker 4>of an actual, like, CNI plugin,

00:10:52.800 --> 00:10:55.045
<v Speaker 4>is to just provide a network interface into

00:10:55.045 --> 00:10:56.725
<v Speaker 4>the pod. Right? When the pod's being made,

00:10:56.725 --> 00:10:58.405
<v Speaker 4>your CNI plug in will make a a

00:10:58.405 --> 00:11:00.325
<v Speaker 4>TAP or a Veth or whatever your, you

00:11:00.325 --> 00:11:02.645
<v Speaker 4>know, whatever your underlying or or do some

00:11:02.645 --> 00:11:04.725
<v Speaker 4>e b p f, whatever your underlying network

00:11:04.725 --> 00:11:05.365
<v Speaker 4>wants.

00:11:05.765 --> 00:11:07.540
<v Speaker 4>And you can stack them. So if you

00:11:07.540 --> 00:11:09.459
<v Speaker 4>put the Istio CNI in first, it'll just

00:11:09.459 --> 00:11:11.060
<v Speaker 4>run first. It doesn't actually make a network

00:11:11.060 --> 00:11:13.220
<v Speaker 4>interface, but what it does is set up

00:11:13.220 --> 00:11:15.300
<v Speaker 4>those IP tables interceptions rules so that you

00:11:15.300 --> 00:11:16.740
<v Speaker 4>don't need an init container.

00:11:17.060 --> 00:11:18.740
<v Speaker 4>And the argument for that is folks don't

00:11:18.740 --> 00:11:20.180
<v Speaker 4>want to give the init so the reason

00:11:20.180 --> 00:11:21.944
<v Speaker 4>the init container exists is firstly to fix

00:11:21.944 --> 00:11:24.264
<v Speaker 4>that race condition, and secondly, so the init

00:11:24.264 --> 00:11:26.105
<v Speaker 4>container can have the high privileges you need,

00:11:26.105 --> 00:11:27.625
<v Speaker 4>like the CAPNET admin that you need to

00:11:27.625 --> 00:11:28.904
<v Speaker 4>set up IP tables.

00:11:29.225 --> 00:11:31.144
<v Speaker 4>Some folks aren't even happy with that, with,

00:11:31.144 --> 00:11:32.985
<v Speaker 4>like, with that init container having that those

00:11:32.985 --> 00:11:33.305
<v Speaker 4>permissions.

00:11:33.800 --> 00:11:35.480
<v Speaker 4>You can use the CNI just to run

00:11:35.480 --> 00:11:37.879
<v Speaker 4>that previous code, like, somewhere else, at the

00:11:37.879 --> 00:11:39.879
<v Speaker 4>host before the pod comes up. So, again,

00:11:39.879 --> 00:11:42.839
<v Speaker 4>kinda implementation detail, but both of those, like,

00:11:42.839 --> 00:11:44.040
<v Speaker 4>you, get rid of that,

00:11:45.160 --> 00:11:46.839
<v Speaker 4>get rid of that race condition. And, like,

00:11:46.839 --> 00:11:48.995
<v Speaker 4>the pod manifest is is,

00:11:49.235 --> 00:11:50.755
<v Speaker 4>you know, like, never needs to be modified

00:11:50.755 --> 00:11:52.915
<v Speaker 4>for either of those solutions. Like, it's modified

00:11:52.915 --> 00:11:54.755
<v Speaker 4>at runtime with the with the AnyContainer, but

00:11:54.755 --> 00:11:57.555
<v Speaker 4>that's done transparently by by IstioD.

00:11:57.555 --> 00:11:58.995
<v Speaker 4>So, yeah, there's there's, like, a lot of

00:11:58.995 --> 00:12:01.395
<v Speaker 4>implementation details you have to you have to

00:12:01.395 --> 00:12:01.795
<v Speaker 4>understand

00:12:02.530 --> 00:12:04.770
<v Speaker 4>to to really kinda grok what's what's going

00:12:04.770 --> 00:12:05.890
<v Speaker 4>on here and then why you might choose

00:12:05.890 --> 00:12:07.250
<v Speaker 4>between the two different modes.

00:12:07.570 --> 00:12:09.570
<v Speaker 1>So it's clear that it's going to be

00:12:09.570 --> 00:12:10.930
<v Speaker 1>a choice between

00:12:11.170 --> 00:12:11.970
<v Speaker 1>specifically.

00:12:11.970 --> 00:12:13.810
<v Speaker 1>That's what you're mentioning. Like, you don't really

00:12:13.810 --> 00:12:17.090
<v Speaker 1>run them together on one cluster. Correct?

00:12:17.815 --> 00:12:20.055
<v Speaker 1>Like a sidecar implementation and an ambient mesh

00:12:20.055 --> 00:12:22.855
<v Speaker 1>implementation. You can actually yeah. Namespace by namespace.

00:12:22.855 --> 00:12:24.535
<v Speaker 2>Is that right, Marino? Is that the yeah.

00:12:24.535 --> 00:12:26.134
<v Speaker 3>I guess. Yeah. That's right. I mean, the

00:12:26.134 --> 00:12:29.574
<v Speaker 3>way you go about enabling sidecar versus nine

00:12:29.574 --> 00:12:31.815
<v Speaker 3>side non sidecar is just a label that

00:12:31.815 --> 00:12:33.700
<v Speaker 3>you affix to the namespace itself.

00:12:33.940 --> 00:12:35.940
<v Speaker 3>So Mhmm. In the case of sidecars, you

00:12:35.940 --> 00:12:39.060
<v Speaker 3>do the Istio dash injection equals enabled label,

00:12:39.540 --> 00:12:40.660
<v Speaker 3>whereas the,

00:12:41.540 --> 00:12:44.180
<v Speaker 3>for ambient mesh, right, in another namespace, you

00:12:44.180 --> 00:12:46.580
<v Speaker 3>actually specify a data plane mode equals ambient.

00:12:46.695 --> 00:12:48.295
<v Speaker 3>Can't remember the actual label,

00:12:48.695 --> 00:12:51.015
<v Speaker 3>but there's actually a very interesting difference between

00:12:51.015 --> 00:12:51.735
<v Speaker 3>the two.

00:12:52.055 --> 00:12:52.615
<v Speaker 3>So,

00:12:53.575 --> 00:12:56.215
<v Speaker 3>the race condition was one particular example of

00:12:56.215 --> 00:12:58.855
<v Speaker 3>an issue, very corner case, but there's another

00:12:58.855 --> 00:13:01.209
<v Speaker 3>issue as well. If you're already running workloads

00:13:01.209 --> 00:13:03.370
<v Speaker 3>that are running in production today, to inject

00:13:03.370 --> 00:13:04.889
<v Speaker 3>the sidecar means you have to do a

00:13:04.889 --> 00:13:06.410
<v Speaker 3>rollout of your deployment

00:13:06.569 --> 00:13:09.050
<v Speaker 3>so that the sidecars can be injected into

00:13:09.690 --> 00:13:11.610
<v Speaker 3>new pods that get deployed,

00:13:12.009 --> 00:13:13.665
<v Speaker 3>which which actually can be a little bit

00:13:13.665 --> 00:13:15.985
<v Speaker 3>of a hit in terms of being online.

00:13:16.464 --> 00:13:19.264
<v Speaker 3>So in the situation where you're not deploying

00:13:19.264 --> 00:13:21.345
<v Speaker 3>sidecars, you're using ambient mesh, none of that

00:13:21.345 --> 00:13:23.745
<v Speaker 3>ever happens because all we're really doing at

00:13:23.745 --> 00:13:24.785
<v Speaker 3>this point is

00:13:25.020 --> 00:13:26.940
<v Speaker 3>and I'm gonna use an example from way

00:13:26.940 --> 00:13:28.620
<v Speaker 3>back in the day of IPsec.

00:13:28.860 --> 00:13:29.900
<v Speaker 3>In IPsec,

00:13:29.980 --> 00:13:31.740
<v Speaker 3>right, when you form tunnels,

00:13:31.980 --> 00:13:33.820
<v Speaker 3>one thing you had to define was interesting

00:13:33.820 --> 00:13:34.540
<v Speaker 3>traffic.

00:13:35.180 --> 00:13:37.754
<v Speaker 3>Those interesting traffic would be defined through access

00:13:37.754 --> 00:13:38.795
<v Speaker 3>control lists.

00:13:39.035 --> 00:13:41.675
<v Speaker 3>And as long as your your, whatever proxy

00:13:41.675 --> 00:13:43.995
<v Speaker 3>or gateway that you're using can identify

00:13:44.074 --> 00:13:46.074
<v Speaker 3>that this traffic has to be matched to

00:13:46.074 --> 00:13:47.595
<v Speaker 3>be encrypted and tunneled,

00:13:47.754 --> 00:13:49.675
<v Speaker 3>then that traffic would proceed to go through

00:13:49.675 --> 00:13:50.154
<v Speaker 3>encrypted.

00:13:50.610 --> 00:13:52.130
<v Speaker 3>This is very much the same way how

00:13:52.130 --> 00:13:54.130
<v Speaker 3>ambient mesh would work is that you

00:13:54.450 --> 00:13:56.930
<v Speaker 3>have a namespace that has been labeled

00:13:57.010 --> 00:13:59.010
<v Speaker 3>for direction towards

00:13:59.089 --> 00:14:02.529
<v Speaker 3>ambient mesh, ambient mesh enabled, but also direction

00:14:02.529 --> 00:14:04.905
<v Speaker 3>towards the z tunnels. So traffic will get

00:14:04.905 --> 00:14:07.545
<v Speaker 3>redirected, but this doesn't happen inside of the

00:14:07.545 --> 00:14:10.025
<v Speaker 3>main application container at all. In fact, this

00:14:10.025 --> 00:14:11.785
<v Speaker 3>is where the Istio CNI comes in to

00:14:11.785 --> 00:14:14.825
<v Speaker 3>to help with that. So it's not intrusive,

00:14:14.825 --> 00:14:17.385
<v Speaker 3>especially when it comes to to production workloads.

00:14:17.385 --> 00:14:18.825
<v Speaker 3>You can just deploy ambient mesh.

00:14:19.720 --> 00:14:21.560
<v Speaker 3>Hold on. There's a caveat here because ambient

00:14:21.560 --> 00:14:23.480
<v Speaker 3>mesh is still experimental at this point. I

00:14:23.480 --> 00:14:25.160
<v Speaker 3>wouldn't say just run it in production.

00:14:25.560 --> 00:14:26.040
<v Speaker 3>But

00:14:26.440 --> 00:14:28.920
<v Speaker 3>having said that, the goal and the mindset

00:14:28.920 --> 00:14:32.280
<v Speaker 3>here is to prevent production outages or downtime

00:14:32.705 --> 00:14:35.025
<v Speaker 3>as you're deploying services into your mesh.

00:14:35.985 --> 00:14:38.865
<v Speaker 4>So, I mean, yeah, the, just to clarify,

00:14:38.865 --> 00:14:41.105
<v Speaker 4>I guess, the, like, sidecar is never intrusive

00:14:41.105 --> 00:14:42.705
<v Speaker 4>either. Like, you never need a change to

00:14:42.705 --> 00:14:45.585
<v Speaker 4>the application code or even to the application,

00:14:45.585 --> 00:14:47.810
<v Speaker 4>like, deployment YAML that you submit to the

00:14:47.810 --> 00:14:50.370
<v Speaker 4>API server because the mutating webhook admission controller

00:14:50.370 --> 00:14:50.690
<v Speaker 4>will,

00:14:51.250 --> 00:14:53.490
<v Speaker 4>will go and alter it for you. So,

00:14:53.490 --> 00:14:55.490
<v Speaker 4>yes, those IP tables exist, but they don't

00:14:55.490 --> 00:14:57.330
<v Speaker 4>affect, like, the container. They exist within the

00:14:57.330 --> 00:14:58.450
<v Speaker 4>pod because a pod is a set of

00:14:58.450 --> 00:14:59.810
<v Speaker 4>c groups and a set of namespaces.

00:15:00.135 --> 00:15:02.295
<v Speaker 4>IP tables route rules are scoped to a

00:15:02.295 --> 00:15:05.175
<v Speaker 4>network namespace, so they exist in that namespace.

00:15:05.175 --> 00:15:06.695
<v Speaker 4>And they live because they've been set up

00:15:06.695 --> 00:15:08.295
<v Speaker 4>either by the Istio CNI

00:15:08.295 --> 00:15:10.375
<v Speaker 4>or the or the init container, you know,

00:15:10.375 --> 00:15:12.455
<v Speaker 4>they persist within that namespace. And, actually, when

00:15:12.455 --> 00:15:14.615
<v Speaker 4>the application comes up, it has no idea

00:15:14.615 --> 00:15:15.655
<v Speaker 4>that that they're there.

00:15:16.600 --> 00:15:18.280
<v Speaker 4>The other thing about, you know, rolling it

00:15:18.280 --> 00:15:20.120
<v Speaker 4>out, like retrofitting at runtime,

00:15:20.280 --> 00:15:21.560
<v Speaker 4>like, yeah, it is you know, if if

00:15:21.560 --> 00:15:23.240
<v Speaker 4>you or if you're running an application and

00:15:23.240 --> 00:15:24.200
<v Speaker 4>you're in production,

00:15:25.000 --> 00:15:26.760
<v Speaker 4>and you want to retrofit SideCast to something

00:15:26.760 --> 00:15:28.280
<v Speaker 4>that's that's running, I would probably say as

00:15:28.280 --> 00:15:29.640
<v Speaker 4>an ops person, that's that's maybe a bit

00:15:29.640 --> 00:15:30.680
<v Speaker 4>of a bad move. You should, you know,

00:15:30.680 --> 00:15:32.665
<v Speaker 4>try it in staging stuff first. But, yeah,

00:15:32.665 --> 00:15:33.625
<v Speaker 4>if it gets to the point in, you

00:15:33.625 --> 00:15:34.985
<v Speaker 4>know, in production when you want to,

00:15:35.625 --> 00:15:37.065
<v Speaker 4>you wanna roll this out, I I guess

00:15:37.065 --> 00:15:39.704
<v Speaker 4>I'd kinda challenge, you know, the idea that

00:15:39.704 --> 00:15:40.425
<v Speaker 4>that's

00:15:40.665 --> 00:15:42.264
<v Speaker 4>that's gonna be disrupted because you've got a

00:15:42.264 --> 00:15:44.105
<v Speaker 4>Kubernetes deployment. So if you just if you

00:15:44.105 --> 00:15:45.530
<v Speaker 4>change the manifest, you just do a rolling

00:15:45.530 --> 00:15:48.010
<v Speaker 4>update. It's gonna honor your your min unavailable,

00:15:48.010 --> 00:15:49.770
<v Speaker 4>your max unavailable. It's gonna honor your pod

00:15:49.770 --> 00:15:52.090
<v Speaker 4>disruption budget. Like, if you're in a position

00:15:52.090 --> 00:15:53.450
<v Speaker 4>where you can't, you know, one by one

00:15:53.450 --> 00:15:55.930
<v Speaker 4>in a controlled manner, restart these pods.

00:15:56.855 --> 00:15:59.014
<v Speaker 4>I mean, remember Kubernetes builds in a surge

00:15:59.014 --> 00:16:00.774
<v Speaker 4>to keep your, like, your availability,

00:16:00.774 --> 00:16:02.855
<v Speaker 4>your your load carrying capacity. If you're in

00:16:02.855 --> 00:16:03.975
<v Speaker 4>a position where you can't do that, then

00:16:03.975 --> 00:16:05.735
<v Speaker 4>you can't do any disaster recovery. You can't

00:16:05.735 --> 00:16:08.055
<v Speaker 4>release any new versions. You you can't do

00:16:08.055 --> 00:16:10.110
<v Speaker 4>any upgrades. So I think, you know, anybody

00:16:10.110 --> 00:16:12.190
<v Speaker 4>who's deployed into Cube, anybody who's cloud native

00:16:12.190 --> 00:16:13.790
<v Speaker 4>is not kind of staring at, like, that

00:16:13.790 --> 00:16:15.629
<v Speaker 4>Windows box in the corner that they that

00:16:15.629 --> 00:16:16.829
<v Speaker 4>they really can't touch.

00:16:17.230 --> 00:16:19.069
<v Speaker 4>So, yeah, like, Ambien does let you sort

00:16:19.069 --> 00:16:21.069
<v Speaker 4>of retrofit the networking under the under the

00:16:21.069 --> 00:16:23.069
<v Speaker 4>carpet while it's running, but I've not come

00:16:23.069 --> 00:16:25.625
<v Speaker 4>across anybody for whom that's necessary, anybody who

00:16:25.625 --> 00:16:27.785
<v Speaker 4>can't just do a a Kubernetes running update.

00:16:27.945 --> 00:16:28.985
<v Speaker 2>Yeah. Lots of

00:16:29.385 --> 00:16:31.385
<v Speaker 2>interesting details there. And I'm gonna do my

00:16:31.385 --> 00:16:33.705
<v Speaker 2>best to recap all of this in, like,

00:16:33.705 --> 00:16:36.505
<v Speaker 2>thirty seconds because it helps me understand. Right?

00:16:36.505 --> 00:16:38.025
<v Speaker 2>I I wanna make sure I understand what's

00:16:38.025 --> 00:16:40.280
<v Speaker 2>actually happening. Although I did first, in fact,

00:16:40.280 --> 00:16:41.960
<v Speaker 2>there's two things I wanna cover first. Let

00:16:41.960 --> 00:16:43.240
<v Speaker 2>the record show I was not the first

00:16:43.240 --> 00:16:45.160
<v Speaker 2>person to say Rust. Yeah. We're literally there.

00:16:45.160 --> 00:16:46.040
<v Speaker 2>Just throw it out.

00:16:47.800 --> 00:16:49.960
<v Speaker 1>That's true. I was waiting for to interrupt,

00:16:49.960 --> 00:16:51.240
<v Speaker 4>like, the whole conversation.

00:16:52.824 --> 00:16:54.425
<v Speaker 2>I was like, yes, even as I I

00:16:54.425 --> 00:16:55.625
<v Speaker 2>wasn't first. Anyway

00:16:57.144 --> 00:16:59.704
<v Speaker 2>and secondly, obviously, the comment about the Windows

00:16:59.704 --> 00:17:01.464
<v Speaker 2>box that we can't touch. Like, it just

00:17:01.464 --> 00:17:03.305
<v Speaker 2>made me happy, like, a flashback to, like,

00:17:03.305 --> 00:17:04.825
<v Speaker 2>when we used to work at offices, and

00:17:04.825 --> 00:17:05.944
<v Speaker 2>I used to do a lot of operational

00:17:05.944 --> 00:17:07.710
<v Speaker 2>stuff myself. It's like, there was always this

00:17:07.710 --> 00:17:09.790
<v Speaker 2>I g IP address because Peng, but nobody

00:17:09.790 --> 00:17:11.390
<v Speaker 2>knew what it was. And I always felt

00:17:11.390 --> 00:17:12.990
<v Speaker 2>like, you know, every office had one of

00:17:12.990 --> 00:17:14.109
<v Speaker 2>those at one point. Anyway

00:17:14.670 --> 00:17:15.309
<v Speaker 2>so

00:17:16.030 --> 00:17:17.069
<v Speaker 2>recap.

00:17:17.309 --> 00:17:19.150
<v Speaker 2>It's just so that I understand. Right? We

00:17:19.150 --> 00:17:22.674
<v Speaker 2>have Istio. We have SAICAR based container mesh.

00:17:22.674 --> 00:17:24.194
<v Speaker 2>It uses any containers

00:17:24.274 --> 00:17:26.674
<v Speaker 2>to do all of the IP table rules

00:17:26.674 --> 00:17:29.075
<v Speaker 2>that are needed to satisfy the constraints for

00:17:29.075 --> 00:17:30.434
<v Speaker 2>the pods to able to probably be part

00:17:30.434 --> 00:17:32.034
<v Speaker 2>of the the mesh network and take advantage

00:17:32.034 --> 00:17:32.835
<v Speaker 2>of all the mesh stuff.

00:17:33.500 --> 00:17:35.100
<v Speaker 2>There there's a whole bunch of reasons of

00:17:35.100 --> 00:17:36.860
<v Speaker 2>why that may have to change. There's always

00:17:36.860 --> 00:17:39.260
<v Speaker 2>the compute memory things that we can optimize.

00:17:39.260 --> 00:17:41.660
<v Speaker 2>There's some security concerns, and there's just application

00:17:41.660 --> 00:17:43.660
<v Speaker 2>availability things that disappear if we don't need

00:17:43.660 --> 00:17:44.620
<v Speaker 2>to worry about it. Of course,

00:17:46.315 --> 00:17:48.555
<v Speaker 2>Now ambient mesh wants to change that model.

00:17:48.715 --> 00:17:50.315
<v Speaker 2>And while you can run-in hybrid is what

00:17:50.315 --> 00:17:52.475
<v Speaker 2>we've heard, I suspect most people would just

00:17:52.475 --> 00:17:54.395
<v Speaker 2>want to move towards ambient mesh.

00:17:54.795 --> 00:17:56.155
<v Speaker 2>And we said we'll ship it to prod,

00:17:56.155 --> 00:17:57.595
<v Speaker 2>but I'm already thinking of doing it today

00:17:57.595 --> 00:17:59.590
<v Speaker 2>anyway. So, I mean, maybe a little bit

00:17:59.590 --> 00:18:00.870
<v Speaker 2>too late for my cluster.

00:18:01.429 --> 00:18:02.789
<v Speaker 2>But it runs

00:18:03.030 --> 00:18:05.190
<v Speaker 2>a z tunnel, which is a new proxy

00:18:05.190 --> 00:18:07.910
<v Speaker 2>written in REST that is assuming it's just

00:18:07.910 --> 00:18:09.190
<v Speaker 2>a demon set, which is part of the

00:18:09.190 --> 00:18:09.910
<v Speaker 2>SDO deployment.

00:18:10.325 --> 00:18:12.725
<v Speaker 2>And instead of injecting sidecars, you have mission

00:18:12.725 --> 00:18:14.164
<v Speaker 2>controls or otherwise,

00:18:14.485 --> 00:18:16.565
<v Speaker 2>it handles all the IP table tools as

00:18:16.565 --> 00:18:18.965
<v Speaker 2>the pods come up and come down, etcetera,

00:18:19.205 --> 00:18:21.445
<v Speaker 2>and we still have a complete mesh

00:18:21.525 --> 00:18:23.285
<v Speaker 2>network. Or maybe the z tunnel doesn't handle

00:18:23.285 --> 00:18:24.965
<v Speaker 2>IP table rules. I'm not entirely sure at

00:18:24.965 --> 00:18:27.890
<v Speaker 2>this point, but it does things. There was

00:18:27.890 --> 00:18:30.049
<v Speaker 2>also that second component that mentioned,

00:18:30.290 --> 00:18:33.330
<v Speaker 2>which was The the waypoint. Yeah. The waypoint.

00:18:33.330 --> 00:18:34.770
<v Speaker 2>Yeah. Can we get what what does that

00:18:34.770 --> 00:18:35.330
<v Speaker 2>do?

00:18:35.970 --> 00:18:38.290
<v Speaker 3>So the waypoint is the one that actually

00:18:38.290 --> 00:18:40.210
<v Speaker 3>processes a lot of the layer seven heavy

00:18:40.210 --> 00:18:42.425
<v Speaker 3>duty lifting or heavy lifting. Lifting. So for

00:18:42.425 --> 00:18:43.065
<v Speaker 3>example,

00:18:43.305 --> 00:18:46.265
<v Speaker 3>you specify an authorization policy normally in Istio

00:18:46.265 --> 00:18:46.905
<v Speaker 3>that,

00:18:47.145 --> 00:18:49.465
<v Speaker 3>prevents services from doing certain things to other

00:18:49.465 --> 00:18:51.544
<v Speaker 3>services, and we're talking about HTTP.

00:18:52.265 --> 00:18:54.025
<v Speaker 3>This is where the waypoint proxy come in

00:18:54.025 --> 00:18:55.705
<v Speaker 3>because a sidecar used to do that for

00:18:55.705 --> 00:18:55.865
<v Speaker 3>us.

00:18:56.560 --> 00:18:57.200
<v Speaker 3>So

00:18:57.600 --> 00:18:59.760
<v Speaker 3>the the thing about that waypoint proxy is

00:18:59.760 --> 00:19:01.440
<v Speaker 3>it has to run Envoy to be able

00:19:01.440 --> 00:19:02.960
<v Speaker 3>to achieve this. I mean, I'm sure in

00:19:02.960 --> 00:19:05.040
<v Speaker 3>the future, they might change up the implementation,

00:19:05.040 --> 00:19:06.640
<v Speaker 3>but I I can't confirm that because I

00:19:06.640 --> 00:19:08.080
<v Speaker 3>don't even know what the road map looks

00:19:08.080 --> 00:19:09.760
<v Speaker 3>like. But I will say that

00:19:10.264 --> 00:19:12.105
<v Speaker 3>anytime that you have that requirement to deploy

00:19:12.105 --> 00:19:13.065
<v Speaker 3>layer seven,

00:19:13.705 --> 00:19:15.865
<v Speaker 3>what ends up happening is you actually deploy

00:19:15.865 --> 00:19:18.424
<v Speaker 3>this at this at the destination workload.

00:19:18.585 --> 00:19:19.624
<v Speaker 3>So for example,

00:19:20.264 --> 00:19:22.424
<v Speaker 3>you have workloads that exist on two nodes,

00:19:22.424 --> 00:19:24.024
<v Speaker 3>and you have workload a that needs to

00:19:24.024 --> 00:19:25.144
<v Speaker 3>communicate with workload b,

00:19:25.900 --> 00:19:27.260
<v Speaker 3>but you need to do some sort of

00:19:27.260 --> 00:19:29.980
<v Speaker 3>HTTP request, some methods, whatever it is.

00:19:30.300 --> 00:19:33.100
<v Speaker 3>But you also wanna prevent service a from,

00:19:33.260 --> 00:19:35.900
<v Speaker 3>you know, deleting any sort of information off

00:19:35.900 --> 00:19:37.900
<v Speaker 3>of service b. So you would implement a

00:19:37.900 --> 00:19:39.900
<v Speaker 3>policy, normally a layer seven auth policy.

00:19:40.605 --> 00:19:43.085
<v Speaker 3>Now who enforces that actually ends up being

00:19:43.085 --> 00:19:45.565
<v Speaker 3>the waypoint proxy, which gets deployed at,

00:19:46.125 --> 00:19:47.965
<v Speaker 3>at the the destination node,

00:19:48.285 --> 00:19:50.445
<v Speaker 3>for that destination workload, and this is based

00:19:50.445 --> 00:19:52.365
<v Speaker 3>on a per workload basis. Now here's the

00:19:52.365 --> 00:19:53.644
<v Speaker 3>other interesting thing,

00:19:54.045 --> 00:19:54.445
<v Speaker 3>that

00:19:54.980 --> 00:19:57.460
<v Speaker 3>waypoint proxy actually leverages

00:19:57.620 --> 00:19:59.380
<v Speaker 3>the the latest

00:19:59.780 --> 00:20:01.620
<v Speaker 3>gateway API standard.

00:20:02.020 --> 00:20:04.580
<v Speaker 3>So the gateway API standard is one that

00:20:04.580 --> 00:20:07.220
<v Speaker 3>allows us to effectively bring in a a

00:20:07.220 --> 00:20:09.300
<v Speaker 3>lot more of a cleaner ingress into our

00:20:09.300 --> 00:20:11.655
<v Speaker 3>cluster, plus be able to do things like

00:20:11.655 --> 00:20:14.774
<v Speaker 3>TLS termination and even things like,

00:20:15.335 --> 00:20:17.414
<v Speaker 3>we could even do the releases that we

00:20:17.414 --> 00:20:19.414
<v Speaker 3>would want to through this gateway API spec

00:20:19.414 --> 00:20:20.455
<v Speaker 3>where previously,

00:20:20.455 --> 00:20:21.975
<v Speaker 3>it was a little bit harder to harder

00:20:21.975 --> 00:20:24.215
<v Speaker 3>to achieve because you need ingress controllers, ingress

00:20:24.215 --> 00:20:25.014
<v Speaker 3>resources,

00:20:25.015 --> 00:20:26.850
<v Speaker 3>and a lot of interesting math.

00:20:27.170 --> 00:20:28.210
<v Speaker 3>That being said,

00:20:28.450 --> 00:20:30.850
<v Speaker 3>with that waypoint proxy, it's deployed on a

00:20:30.850 --> 00:20:32.770
<v Speaker 3>per needed basis. If you don't need it,

00:20:32.770 --> 00:20:34.290
<v Speaker 3>if you're not running any sort of layer

00:20:34.290 --> 00:20:36.530
<v Speaker 3>seven services or don't have that requirement, you

00:20:36.530 --> 00:20:38.290
<v Speaker 3>drop it because it is one of those

00:20:38.290 --> 00:20:39.090
<v Speaker 3>resource intensive

00:20:39.495 --> 00:20:41.975
<v Speaker 3>artifacts that get deployed to the cluster. And

00:20:41.975 --> 00:20:43.175
<v Speaker 3>when you get to that level of scale

00:20:43.175 --> 00:20:44.375
<v Speaker 3>where everything needs

00:20:45.255 --> 00:20:48.295
<v Speaker 3>layer seven proxy or layer seven authorization or

00:20:48.295 --> 00:20:50.695
<v Speaker 3>something, this is where you're evaluating your design.

00:20:50.695 --> 00:20:52.375
<v Speaker 3>Like, maybe we should probably be using a

00:20:52.375 --> 00:20:54.760
<v Speaker 3>combination of sidecar and sidecar list for certain

00:20:54.760 --> 00:20:55.480
<v Speaker 3>situations.

00:20:56.040 --> 00:20:57.559
<v Speaker 3>This is gonna be a design

00:20:58.040 --> 00:20:58.919
<v Speaker 3>versus,

00:20:58.920 --> 00:21:00.279
<v Speaker 3>you know, let's just do it.

00:21:01.000 --> 00:21:03.800
<v Speaker 3>Now one other bit about the waypoint is

00:21:03.800 --> 00:21:04.360
<v Speaker 3>that

00:21:04.840 --> 00:21:07.240
<v Speaker 3>it's actually in line of traffic with the

00:21:07.240 --> 00:21:09.400
<v Speaker 3>z tunnels, and it actually terminates

00:21:09.394 --> 00:21:11.634
<v Speaker 3>a z tunnel at the the local node.

00:21:11.634 --> 00:21:12.514
<v Speaker 3>So for example,

00:21:13.235 --> 00:21:16.274
<v Speaker 3>service a talking to service b between two

00:21:16.274 --> 00:21:18.914
<v Speaker 3>nodes, service a would traverse one z tunnel

00:21:18.914 --> 00:21:21.554
<v Speaker 3>on its local node, collocated with it, and

00:21:21.554 --> 00:21:23.955
<v Speaker 3>service b would receive that traffic. But first,

00:21:23.955 --> 00:21:26.170
<v Speaker 3>that traffic has to pass through the destination

00:21:26.170 --> 00:21:27.370
<v Speaker 3>node z tunnel,

00:21:27.530 --> 00:21:28.250
<v Speaker 3>which then

00:21:28.650 --> 00:21:30.809
<v Speaker 3>tunnels to the waypoint proxy.

00:21:30.890 --> 00:21:33.690
<v Speaker 3>The waypoint proxy is what releases that traffic

00:21:33.690 --> 00:21:36.410
<v Speaker 3>and then basically passes it along to the

00:21:36.410 --> 00:21:37.210
<v Speaker 3>actual workload.

00:21:37.975 --> 00:21:40.615
<v Speaker 4>Yeah. So the way yeah. The waypoint, actually

00:21:40.615 --> 00:21:42.774
<v Speaker 4>is Envoy. Right? So current in a sidecar

00:21:42.774 --> 00:21:44.375
<v Speaker 4>model or the sidecars are are are are

00:21:44.375 --> 00:21:45.094
<v Speaker 4>Envoys.

00:21:45.335 --> 00:21:47.015
<v Speaker 4>With Ambient, you've got a z tunnel, which

00:21:47.015 --> 00:21:48.215
<v Speaker 4>does layer four stuff,

00:21:48.774 --> 00:21:50.215
<v Speaker 4>one per node, and then, yeah, there's a

00:21:50.215 --> 00:21:50.855
<v Speaker 4>waypoint,

00:21:51.095 --> 00:21:52.135
<v Speaker 4>the per service account,

00:21:52.780 --> 00:21:53.580
<v Speaker 4>right, for,

00:21:54.620 --> 00:21:56.380
<v Speaker 4>for for isolation. So there's a there's a

00:21:56.380 --> 00:21:58.460
<v Speaker 4>waypoint per service account, so kind of per

00:21:58.460 --> 00:22:00.779
<v Speaker 4>per workload, that you jump through.

00:22:01.180 --> 00:22:02.940
<v Speaker 4>I guess the thing is you kinda

00:22:03.180 --> 00:22:05.100
<v Speaker 4>you kinda always have to jump through it

00:22:05.100 --> 00:22:06.860
<v Speaker 4>because, you know, okay. If you don't do

00:22:06.860 --> 00:22:09.305
<v Speaker 4>layer seven policy, then then fine. But this

00:22:09.305 --> 00:22:10.585
<v Speaker 4>is an identity based

00:22:11.305 --> 00:22:13.145
<v Speaker 4>mesh. Right? If you're not doing, you know,

00:22:13.145 --> 00:22:16.025
<v Speaker 4>like, four policy is is the reason you're

00:22:16.025 --> 00:22:17.625
<v Speaker 4>running a service mesh is probably because you're

00:22:17.625 --> 00:22:18.825
<v Speaker 4>finding that insufficient.

00:22:19.545 --> 00:22:21.305
<v Speaker 4>And, also, if you want any anything that,

00:22:22.260 --> 00:22:24.820
<v Speaker 4>like, interacts with HTTPs, if you want any

00:22:24.820 --> 00:22:25.700
<v Speaker 4>observability

00:22:25.700 --> 00:22:28.820
<v Speaker 4>of particular API endpoints, you wanna even even

00:22:28.820 --> 00:22:31.060
<v Speaker 4>understand what's a request response, what's a success

00:22:31.060 --> 00:22:32.900
<v Speaker 4>and a failure. If you want any kind

00:22:32.900 --> 00:22:35.695
<v Speaker 4>of distributed tracing, you've gotta be involved with

00:22:35.695 --> 00:22:37.534
<v Speaker 4>HTTP, passing HTTP.

00:22:37.615 --> 00:22:40.575
<v Speaker 4>So realistic while the model is theoretically good,

00:22:40.575 --> 00:22:43.375
<v Speaker 4>like, realistically, basically, everything is gonna go through

00:22:43.375 --> 00:22:46.174
<v Speaker 4>a waypoint. So it into, like, those those

00:22:46.174 --> 00:22:49.054
<v Speaker 4>latency saving claims, those kind of resource saving

00:22:49.054 --> 00:22:51.440
<v Speaker 4>claims maybe don't apply for for real world

00:22:51.440 --> 00:22:53.360
<v Speaker 4>workloads because you, you know, you kinda always

00:22:53.360 --> 00:22:54.880
<v Speaker 4>want them. And then you get into the

00:22:54.880 --> 00:22:56.960
<v Speaker 4>issue that the waypoints are shared. So all

00:22:56.960 --> 00:22:58.720
<v Speaker 4>of the security guarantees around,

00:22:59.520 --> 00:23:02.160
<v Speaker 4>you know, having a dedicated, like, firewall, a

00:23:02.160 --> 00:23:05.525
<v Speaker 4>dedicated policy enforcement point agent per per workload

00:23:05.525 --> 00:23:07.445
<v Speaker 4>go away. Like, it's not even really it's

00:23:07.445 --> 00:23:09.525
<v Speaker 4>not zero trust anymore. Right? Because a party

00:23:09.525 --> 00:23:11.605
<v Speaker 4>is trusting something. It's trusting a shared

00:23:11.845 --> 00:23:14.325
<v Speaker 4>z tunnel, which is actually shared across tenants

00:23:14.325 --> 00:23:16.725
<v Speaker 4>because they're per node. And it's and that

00:23:16.725 --> 00:23:18.245
<v Speaker 4>thing is holding the keys and the certificates

00:23:18.245 --> 00:23:19.924
<v Speaker 4>for, like, all of the workloads it represents.

00:23:20.280 --> 00:23:21.799
<v Speaker 4>And they're also trusting

00:23:21.880 --> 00:23:24.120
<v Speaker 4>a shared waypoint. And Envoy, remember, was designed

00:23:24.120 --> 00:23:25.720
<v Speaker 4>as a sidecar proxy, so it that, like,

00:23:25.720 --> 00:23:28.360
<v Speaker 4>makes no attempt to mitigate noisy neighbors. It

00:23:28.360 --> 00:23:30.200
<v Speaker 4>has no resource management, you know, of its

00:23:30.200 --> 00:23:32.920
<v Speaker 4>own. It, again, represents a confused deputy, like

00:23:32.920 --> 00:23:35.535
<v Speaker 4>a a place for for lateral movement. So

00:23:35.535 --> 00:23:37.375
<v Speaker 4>I think that's the big trade off that

00:23:37.375 --> 00:23:39.135
<v Speaker 4>that I talk to folks about is you

00:23:39.135 --> 00:23:41.775
<v Speaker 4>can get some some theoretical resource,

00:23:42.415 --> 00:23:45.295
<v Speaker 4>you know, wins on on ambient. But, again,

00:23:45.295 --> 00:23:47.935
<v Speaker 4>I, like, would kinda challenge that with this

00:23:47.935 --> 00:23:49.950
<v Speaker 4>sort of sort of kernel internals to think

00:23:49.950 --> 00:23:51.789
<v Speaker 4>about. Modern systems are quite complicated.

00:23:52.110 --> 00:23:55.789
<v Speaker 4>But the trade off is that security posture.

00:23:56.190 --> 00:23:57.789
<v Speaker 1>I just was going to say real quick,

00:23:57.789 --> 00:23:59.789
<v Speaker 1>for people who are listening and

00:24:00.030 --> 00:24:02.510
<v Speaker 1>are very, very confused by the references to

00:24:02.510 --> 00:24:03.150
<v Speaker 1>layer seven,

00:24:03.805 --> 00:24:06.045
<v Speaker 1>Just to note, we'll put a link in

00:24:06.045 --> 00:24:09.645
<v Speaker 1>the podcast description about what the OSI model

00:24:09.645 --> 00:24:11.565
<v Speaker 1>is and what all these layers are.

00:24:11.805 --> 00:24:14.125
<v Speaker 1>So don't worry, you can read more about

00:24:14.125 --> 00:24:15.565
<v Speaker 1>that. I don't want to go deep down

00:24:15.565 --> 00:24:17.780
<v Speaker 1>into some very, very basic stuff. But this

00:24:17.780 --> 00:24:19.299
<v Speaker 1>is at the very, very top of your

00:24:19.299 --> 00:24:22.340
<v Speaker 1>networking model on the application layer we're talking

00:24:22.340 --> 00:24:24.179
<v Speaker 1>with layer seven. I don't know how far

00:24:24.179 --> 00:24:25.779
<v Speaker 1>down the layers they go

00:24:26.100 --> 00:24:26.820
<v Speaker 1>with

00:24:27.059 --> 00:24:29.059
<v Speaker 1>sidecar and ambient mesh.

00:24:29.860 --> 00:24:31.575
<v Speaker 1>So if you want to just I I

00:24:31.575 --> 00:24:33.174
<v Speaker 1>I think I heard, like, there were some

00:24:33.174 --> 00:24:35.014
<v Speaker 1>stuff at layer four and layer three, but

00:24:35.015 --> 00:24:36.855
<v Speaker 1>just to double check. I mean, there are

00:24:36.855 --> 00:24:38.774
<v Speaker 1>all the options. Right? The resource

00:24:39.015 --> 00:24:40.615
<v Speaker 1>what? Layer three and four are pretty much,

00:24:40.615 --> 00:24:42.615
<v Speaker 2>Steven, and layer seven. Nobody else even knows

00:24:42.615 --> 00:24:44.020
<v Speaker 2>what the list is. Right? Yeah. None of

00:24:44.020 --> 00:24:45.620
<v Speaker 4>others. Oh, well,

00:24:45.940 --> 00:24:47.940
<v Speaker 1>depends on who you're talking to and what

00:24:47.940 --> 00:24:50.260
<v Speaker 1>the her history is. But regardless,

00:24:50.260 --> 00:24:51.620
<v Speaker 1>just so that you know, we will put

00:24:51.620 --> 00:24:53.860
<v Speaker 1>a link in the descriptions. Alright. Go ahead.

00:24:54.100 --> 00:24:55.860
<v Speaker 3>Yeah. So one thing I was just going

00:24:55.860 --> 00:24:57.860
<v Speaker 3>to to add, and I agree with Matt.

00:24:57.860 --> 00:25:00.095
<v Speaker 3>Like, there are there are definitely trade offs

00:25:00.095 --> 00:25:02.655
<v Speaker 3>when considering something like ambient mesh. Right?

00:25:02.975 --> 00:25:04.655
<v Speaker 3>And it really will come down to your

00:25:04.655 --> 00:25:07.455
<v Speaker 3>own personal require or your business requirements, what

00:25:07.455 --> 00:25:08.095
<v Speaker 3>you need,

00:25:08.415 --> 00:25:10.255
<v Speaker 3>if you have the the suitable amount of

00:25:10.255 --> 00:25:12.815
<v Speaker 3>resources, if you don't need layer seven authorization.

00:25:13.055 --> 00:25:14.519
<v Speaker 3>But the one thing I wanted to clarify

00:25:14.519 --> 00:25:16.359
<v Speaker 3>is the element of identity.

00:25:16.600 --> 00:25:17.159
<v Speaker 3>So

00:25:17.640 --> 00:25:19.559
<v Speaker 3>even in that shared service model,

00:25:19.799 --> 00:25:21.799
<v Speaker 3>there is tendency that exists both at the

00:25:21.799 --> 00:25:24.200
<v Speaker 3>zTunnel as well as the the waypoint level.

00:25:24.200 --> 00:25:26.200
<v Speaker 3>And this is derived through the whole, you

00:25:26.200 --> 00:25:28.360
<v Speaker 3>know, Kubernetes service account token generation

00:25:28.955 --> 00:25:29.835
<v Speaker 3>and how

00:25:30.155 --> 00:25:33.035
<v Speaker 3>zTunnel and Waypoints will assume the identity of

00:25:33.035 --> 00:25:35.674
<v Speaker 3>those given workloads for that given traffic path.

00:25:36.235 --> 00:25:39.035
<v Speaker 3>Even if even if, for example, you have

00:25:39.035 --> 00:25:40.554
<v Speaker 3>that shared service model,

00:25:41.035 --> 00:25:42.955
<v Speaker 3>the the idea behind what zTunnel and and

00:25:42.955 --> 00:25:45.240
<v Speaker 3>Waypoint are offering up is that that slice

00:25:45.240 --> 00:25:47.159
<v Speaker 3>of that part of that laneway.

00:25:47.480 --> 00:25:50.039
<v Speaker 3>So it still maintains separation and isolation,

00:25:50.440 --> 00:25:53.000
<v Speaker 3>but here's the other consideration. Right? Like, this

00:25:53.000 --> 00:25:54.680
<v Speaker 3>has come up a lot. You know, what

00:25:54.680 --> 00:25:56.440
<v Speaker 3>happens if your node gets compromised?

00:25:56.600 --> 00:25:58.520
<v Speaker 3>You know, now I can have access to

00:25:58.520 --> 00:26:00.855
<v Speaker 3>zTunnel. Now I can, you know,

00:26:01.255 --> 00:26:04.535
<v Speaker 3>impersonate zTunnel and then direct traffic elsewhere to

00:26:04.535 --> 00:26:07.015
<v Speaker 3>another environment that you wouldn't even know of.

00:26:07.415 --> 00:26:09.255
<v Speaker 3>If you're at that point, you haven't spent

00:26:09.255 --> 00:26:11.495
<v Speaker 3>the time to lock down your Kubernetes environment,

00:26:11.495 --> 00:26:13.255
<v Speaker 3>and you've just basically given access.

00:26:13.860 --> 00:26:15.780
<v Speaker 3>Root access is probably the most dangerous thing

00:26:15.780 --> 00:26:17.460
<v Speaker 3>you can have inside of your cluster.

00:26:17.700 --> 00:26:20.580
<v Speaker 3>So in those sorts, you know, situations, it's

00:26:20.580 --> 00:26:23.060
<v Speaker 3>not about service mesh at that point. It's

00:26:23.060 --> 00:26:26.260
<v Speaker 3>about how you've built security practices and posture

00:26:26.260 --> 00:26:27.700
<v Speaker 3>into how you run Kubernetes.

00:26:28.544 --> 00:26:29.104
<v Speaker 3>So

00:26:29.504 --> 00:26:31.904
<v Speaker 3>in the situation where you have workloads that

00:26:31.904 --> 00:26:33.904
<v Speaker 3>exist within a node that are communicating,

00:26:34.304 --> 00:26:36.225
<v Speaker 3>the the fascinating part about it is they're

00:26:36.225 --> 00:26:38.304
<v Speaker 3>never gonna pass through a z tunnel. Right?

00:26:38.304 --> 00:26:40.705
<v Speaker 3>They're gonna communicate directly on the wire through

00:26:40.705 --> 00:26:41.824
<v Speaker 3>the CNI.

00:26:42.304 --> 00:26:42.865
<v Speaker 3>And

00:26:43.510 --> 00:26:44.950
<v Speaker 3>they're even though they're a part of the

00:26:44.950 --> 00:26:47.350
<v Speaker 3>mesh, I mean, there's no MTLS going on.

00:26:47.350 --> 00:26:49.429
<v Speaker 3>There's plain text traffic going on.

00:26:49.910 --> 00:26:51.909
<v Speaker 3>But that's not the issue. The issue is,

00:26:52.549 --> 00:26:54.470
<v Speaker 3>is your cluster secure?

00:26:54.630 --> 00:26:56.870
<v Speaker 3>Have you prevented unauthorized access?

00:26:57.465 --> 00:26:59.225
<v Speaker 3>Do you have the right controls in place?

00:26:59.225 --> 00:27:00.585
<v Speaker 3>Are you using certificates?

00:27:00.585 --> 00:27:02.984
<v Speaker 3>Who has access to your your KubeConfig?

00:27:03.465 --> 00:27:05.705
<v Speaker 3>In fact, almost no one should have access

00:27:05.705 --> 00:27:07.784
<v Speaker 3>to that if you're using principles of GitOps

00:27:07.784 --> 00:27:08.664
<v Speaker 3>at that point.

00:27:09.225 --> 00:27:11.385
<v Speaker 3>So there are a lot of other considerations

00:27:11.385 --> 00:27:14.210
<v Speaker 3>that fall well outside of what ambient mesh

00:27:14.210 --> 00:27:15.570
<v Speaker 3>can control. Like, it's not gonna save you

00:27:15.570 --> 00:27:17.170
<v Speaker 3>from your infrastructure challenges.

00:27:17.570 --> 00:27:19.250
<v Speaker 3>It's gonna solve parts of the network challenges

00:27:19.250 --> 00:27:20.930
<v Speaker 3>that you're trying to solve with service to

00:27:20.930 --> 00:27:21.970
<v Speaker 3>service communication.

00:27:22.290 --> 00:27:23.810
<v Speaker 4>Yeah. No. I agree. Like, if you yeah.

00:27:23.810 --> 00:27:25.090
<v Speaker 4>Like, Marina says, if you're at the point

00:27:25.090 --> 00:27:26.865
<v Speaker 4>where, you know, your your node your host

00:27:26.865 --> 00:27:28.625
<v Speaker 4>has been popped, then they'd they'd be in

00:27:28.625 --> 00:27:29.985
<v Speaker 4>the sidecar the same way they're in the

00:27:29.985 --> 00:27:31.585
<v Speaker 4>the waypoint and the z tunnel.

00:27:32.145 --> 00:27:33.825
<v Speaker 4>I mean, there's different ways of popping things.

00:27:33.825 --> 00:27:35.585
<v Speaker 4>Right? If they've got something like root access,

00:27:35.585 --> 00:27:37.184
<v Speaker 4>like access to kind of the kernel,

00:27:37.745 --> 00:27:38.705
<v Speaker 4>then all bets are off.

00:27:39.630 --> 00:27:40.910
<v Speaker 4>I guess the thing about the the z

00:27:40.910 --> 00:27:42.270
<v Speaker 4>tunnel and the fact that, you know, no

00:27:42.270 --> 00:27:45.470
<v Speaker 4>local communication does bypass it, there's no NTLS.

00:27:45.470 --> 00:27:47.070
<v Speaker 4>Like, if you get compromised in the sense

00:27:47.070 --> 00:27:49.070
<v Speaker 4>that somebody can break out of their container,

00:27:49.070 --> 00:27:50.669
<v Speaker 4>get into the root namespace,

00:27:50.990 --> 00:27:53.105
<v Speaker 4>like, maybe they've got you know, maybe they

00:27:53.105 --> 00:27:54.545
<v Speaker 4>don't have the root user, but they're in

00:27:54.545 --> 00:27:56.465
<v Speaker 4>the root namespace or they've they've got privileges

00:27:56.465 --> 00:27:58.465
<v Speaker 4>to it because you ran a privileged container

00:27:58.465 --> 00:28:00.465
<v Speaker 4>or you ran in host namespace or something.

00:28:01.265 --> 00:28:03.665
<v Speaker 4>Then, you know, sidecars will give you a

00:28:03.665 --> 00:28:06.419
<v Speaker 4>mutual TLS on the wire even locally on

00:28:06.419 --> 00:28:07.940
<v Speaker 4>the node, whereas, yeah, the z tunnel, the

00:28:07.940 --> 00:28:10.179
<v Speaker 4>z tunnel doesn't. It gets bypassed. So there's,

00:28:10.179 --> 00:28:11.539
<v Speaker 4>like, different ways of it. It's a it's

00:28:11.539 --> 00:28:13.139
<v Speaker 4>a complicated thing to threat model. And I

00:28:13.380 --> 00:28:14.019
<v Speaker 4>anyway,

00:28:14.340 --> 00:28:16.019
<v Speaker 4>and I I feel like it gets more

00:28:16.019 --> 00:28:17.539
<v Speaker 4>complicated to threat model

00:28:17.700 --> 00:28:19.940
<v Speaker 4>with Ambient because the the topology gets more

00:28:19.940 --> 00:28:21.715
<v Speaker 4>complicate. You've got these two moving parts, and

00:28:21.715 --> 00:28:24.115
<v Speaker 4>your topology gets a lot more complicated. It's

00:28:24.115 --> 00:28:25.555
<v Speaker 4>more difficult to reason about.

00:28:26.035 --> 00:28:27.955
<v Speaker 4>But, yeah, absolutely. Like, if you've, like Marina

00:28:27.955 --> 00:28:29.395
<v Speaker 4>says, there's so many other controls you should

00:28:29.395 --> 00:28:30.355
<v Speaker 4>be putting in place.

00:28:30.755 --> 00:28:32.115
<v Speaker 4>We maybe are getting into the, you know,

00:28:32.115 --> 00:28:33.715
<v Speaker 4>into the weeds a little bit. Well, except

00:28:33.715 --> 00:28:35.955
<v Speaker 4>unless you're you're regulated, and the regulator, like,

00:28:35.940 --> 00:28:37.700
<v Speaker 4>requires that you have to have TLS on

00:28:37.700 --> 00:28:38.339
<v Speaker 4>the wire.

00:28:38.659 --> 00:28:40.340
<v Speaker 4>It's the same with the resources. Like, you

00:28:40.340 --> 00:28:42.419
<v Speaker 4>know, I'd, I'd probably wanna challenge a bunch

00:28:42.419 --> 00:28:43.699
<v Speaker 4>of the, like,

00:28:44.899 --> 00:28:46.980
<v Speaker 4>numbers that have come out around resource usage.

00:28:46.980 --> 00:28:48.500
<v Speaker 4>I think, actually, the kernel, like, helps you.

00:28:48.500 --> 00:28:50.100
<v Speaker 4>I think sidecars can actually be equivalent to

00:28:50.100 --> 00:28:52.184
<v Speaker 4>ambient mesh in in almost all cases.

00:28:52.825 --> 00:28:54.345
<v Speaker 4>But by the time, you know, by the

00:28:54.345 --> 00:28:56.105
<v Speaker 4>time you're looking at that, have you actually

00:28:56.105 --> 00:28:58.665
<v Speaker 4>got the requests for your application right? Have

00:28:58.665 --> 00:29:00.905
<v Speaker 4>you rewritten the Ruby and Rust? Have you

00:29:00.905 --> 00:29:03.720
<v Speaker 4>sorted out your HPA and your cluster auto

00:29:03.720 --> 00:29:05.960
<v Speaker 4>scaling? Are you using spot instances correctly? You

00:29:05.960 --> 00:29:07.400
<v Speaker 4>know, what's the stat? Like, the average e

00:29:07.400 --> 00:29:09.080
<v Speaker 4>c two is 3% utilized.

00:29:09.160 --> 00:29:10.920
<v Speaker 4>There's so much more low hanging fruit than

00:29:10.920 --> 00:29:13.480
<v Speaker 4>than looking at that resource that resource question

00:29:13.480 --> 00:29:14.840
<v Speaker 4>at all. You know, if you get there,

00:29:14.840 --> 00:29:16.039
<v Speaker 4>can talk about it. But,

00:29:16.840 --> 00:29:19.715
<v Speaker 4>yeah. Yeah. Absolutely. Yeah. I agree with Marina

00:29:19.715 --> 00:29:21.875
<v Speaker 4>that she's probably not excuse me. The low

00:29:21.875 --> 00:29:23.955
<v Speaker 4>hanging fruit. Yeah. I don't know if I

00:29:23.955 --> 00:29:26.274
<v Speaker 2>misheard something there or maybe

00:29:26.755 --> 00:29:29.875
<v Speaker 2>something I don't know. Someone mentioned node local

00:29:29.875 --> 00:29:31.395
<v Speaker 2>doesn't go through the z tunnel.

00:29:32.020 --> 00:29:33.779
<v Speaker 2>Is that one sentence correct?

00:29:34.100 --> 00:29:36.580
<v Speaker 3>Yeah. So if you have services that would

00:29:36.580 --> 00:29:39.140
<v Speaker 3>exist within the same node, right, pod to

00:29:39.140 --> 00:29:41.700
<v Speaker 3>pod communication won't pass through the z tunnel.

00:29:41.700 --> 00:29:44.020
<v Speaker 3>So think of a traditional firewall and you

00:29:44.020 --> 00:29:45.860
<v Speaker 3>have a a subnet behind that firewall.

00:29:46.695 --> 00:29:47.495
<v Speaker 3>Do

00:29:47.495 --> 00:29:49.735
<v Speaker 3>two computers ever pass through that firewall if

00:29:49.735 --> 00:29:51.095
<v Speaker 3>they're gonna talk directly to each other on

00:29:51.095 --> 00:29:52.614
<v Speaker 3>the network? No.

00:29:52.855 --> 00:29:55.015
<v Speaker 3>And that's the same situation as to how

00:29:55.015 --> 00:29:57.014
<v Speaker 3>it works inside of ambient mesh with

00:29:57.495 --> 00:29:59.654
<v Speaker 3>resources that exist on the same node.

00:30:00.260 --> 00:30:00.980
<v Speaker 3>Now

00:30:01.300 --> 00:30:03.460
<v Speaker 3>there are ways to work around that too,

00:30:03.540 --> 00:30:05.540
<v Speaker 3>but quite honestly, you know, this is where

00:30:05.540 --> 00:30:06.980
<v Speaker 3>we're starting to get complex and we start

00:30:06.980 --> 00:30:09.460
<v Speaker 3>to realize maybe we should start using sidecars

00:30:09.460 --> 00:30:10.100
<v Speaker 3>again.

00:30:10.740 --> 00:30:12.820
<v Speaker 3>So this is why the you know, it's

00:30:12.820 --> 00:30:15.545
<v Speaker 3>situational. It's not gonna be either or. It's

00:30:15.545 --> 00:30:18.025
<v Speaker 3>gonna be and and, you know, bits here,

00:30:18.025 --> 00:30:20.185
<v Speaker 3>bits there, pieces all over, and now you

00:30:20.185 --> 00:30:23.065
<v Speaker 3>have this, like, kludge of a mess a

00:30:23.065 --> 00:30:25.545
<v Speaker 3>messy mesh at this point. Right. Yeah. I

00:30:25.545 --> 00:30:27.305
<v Speaker 4>mean, so, yeah, side cards, you know, were

00:30:27.305 --> 00:30:29.530
<v Speaker 4>reaction, I guess. The idea probably came out

00:30:29.530 --> 00:30:31.370
<v Speaker 4>of Google originally, right, with envelope and and

00:30:31.370 --> 00:30:33.850
<v Speaker 4>whatever, client side load balancing. They were a

00:30:33.850 --> 00:30:37.130
<v Speaker 4>reaction. Like, firstly, the middle proxies, which nobody,

00:30:37.130 --> 00:30:38.410
<v Speaker 4>I think, has had a good experience with.

00:30:38.410 --> 00:30:39.610
<v Speaker 4>Right? So you do your client side load

00:30:39.610 --> 00:30:41.530
<v Speaker 4>balancing instead in the same way that, like,

00:30:41.530 --> 00:30:43.225
<v Speaker 4>a, you know, a history library or a,

00:30:43.225 --> 00:30:44.904
<v Speaker 4>like, gRPC client does.

00:30:45.225 --> 00:30:46.825
<v Speaker 4>And also a reaction, like, Reena says to

00:30:46.825 --> 00:30:48.505
<v Speaker 4>those kind of firewall setups, right, where if

00:30:48.505 --> 00:30:50.104
<v Speaker 4>you're in a trusted subnet,

00:30:50.345 --> 00:30:51.945
<v Speaker 4>then, you know, any workload in that subnet

00:30:51.945 --> 00:30:53.625
<v Speaker 4>just talks to another just talks to its

00:30:53.625 --> 00:30:55.290
<v Speaker 4>neighbor and doesn't go through the firewall. This

00:30:55.290 --> 00:30:56.730
<v Speaker 4>is where the whole, like and that's not

00:30:56.730 --> 00:30:58.410
<v Speaker 4>sufficient in a bunch of cases. So that's

00:30:58.410 --> 00:31:00.570
<v Speaker 4>where the whole zero trust thing came from.

00:31:00.570 --> 00:31:02.250
<v Speaker 4>And then see, there's non, you know, non

00:31:02.250 --> 00:31:04.410
<v Speaker 4>cloud native, non mesh implementations of this, like

00:31:04.410 --> 00:31:06.570
<v Speaker 4>Cisco ACI will will sell you that kind

00:31:06.570 --> 00:31:07.850
<v Speaker 4>of dream as well. But the idea is

00:31:07.850 --> 00:31:09.965
<v Speaker 4>taking that boundary and making it making it

00:31:09.965 --> 00:31:12.045
<v Speaker 4>real small. You know, there's still there's still

00:31:12.045 --> 00:31:13.965
<v Speaker 4>a gateway. There's there's still a boundary, and

00:31:13.965 --> 00:31:15.245
<v Speaker 4>there's still a border device.

00:31:15.805 --> 00:31:18.045
<v Speaker 4>You know, with with sidecast, with a service

00:31:18.045 --> 00:31:20.045
<v Speaker 4>mesh, you know, the boundary is the network

00:31:20.045 --> 00:31:21.885
<v Speaker 4>namespace. The boundary is the one part. It's

00:31:21.885 --> 00:31:23.325
<v Speaker 4>the smallest it can be, and the the

00:31:23.325 --> 00:31:25.310
<v Speaker 4>border device is the Envoy. And that, I

00:31:25.310 --> 00:31:27.230
<v Speaker 4>guess, with z tunnel, that's what you're that's

00:31:27.230 --> 00:31:29.630
<v Speaker 4>what you're kinda giving up, because, you know,

00:31:29.630 --> 00:31:31.230
<v Speaker 4>yeah, node local, you don't have any encryption

00:31:31.230 --> 00:31:33.230
<v Speaker 4>at all. And even if it between nodes,

00:31:33.230 --> 00:31:35.790
<v Speaker 4>then you're plain text from the, you know,

00:31:35.790 --> 00:31:37.695
<v Speaker 4>the application to the z tunnel. So you're

00:31:37.695 --> 00:31:40.654
<v Speaker 4>leaving that network namespace. You're leaving that that

00:31:40.654 --> 00:31:43.615
<v Speaker 4>isolated network and those guarantees. So, yeah, it's

00:31:43.615 --> 00:31:45.695
<v Speaker 4>it's you gotta understand how it works. It's

00:31:45.695 --> 00:31:47.294
<v Speaker 4>something to to consider when you're looking at

00:31:47.294 --> 00:31:48.014
<v Speaker 4>the trade offs.

00:31:48.495 --> 00:31:51.760
<v Speaker 3>I'm smiling because you you basically brought Cisco

00:31:51.760 --> 00:31:54.880
<v Speaker 3>into the chat. And and it's funny because

00:31:55.040 --> 00:31:57.280
<v Speaker 3>And it couldn't it's really fun. No. No.

00:31:57.280 --> 00:31:58.720
<v Speaker 3>It's it's great that you did you brought

00:31:58.720 --> 00:31:59.760
<v Speaker 3>this up because

00:32:00.000 --> 00:32:01.760
<v Speaker 3>back when I was working at VMware under

00:32:01.760 --> 00:32:03.520
<v Speaker 3>the networking security business unit,

00:32:04.275 --> 00:32:07.635
<v Speaker 3>we competed heavily against Cisco and ACI. Right?

00:32:07.635 --> 00:32:09.475
<v Speaker 3>But they were talking about the exact same

00:32:09.475 --> 00:32:11.554
<v Speaker 3>things that we're talking about today. Like, nothing

00:32:12.115 --> 00:32:14.355
<v Speaker 3>I'll be honest. Nothing has changed in networking

00:32:14.355 --> 00:32:15.955
<v Speaker 3>other than the fact that we're dealing with

00:32:15.955 --> 00:32:16.915
<v Speaker 3>smaller artifacts.

00:32:17.290 --> 00:32:19.050
<v Speaker 3>Nothing has changed. You go look at a

00:32:19.050 --> 00:32:21.450
<v Speaker 3>networking namespace. What is it? How does it

00:32:21.450 --> 00:32:23.370
<v Speaker 3>get constructed? We're just building,

00:32:23.850 --> 00:32:26.250
<v Speaker 3>quote, unquote, a VLAN at this point, attaching

00:32:26.250 --> 00:32:29.130
<v Speaker 3>endpoints to it, creating, you know, connections to

00:32:29.130 --> 00:32:30.935
<v Speaker 3>the outside world, and there you go. Now

00:32:30.935 --> 00:32:32.615
<v Speaker 3>your pods have access to the outside world

00:32:32.615 --> 00:32:33.815
<v Speaker 3>or other pods.

00:32:34.135 --> 00:32:36.535
<v Speaker 3>So nothing we've done is different, and it's

00:32:36.535 --> 00:32:38.934
<v Speaker 3>it's interesting because I know Cisco

00:32:39.335 --> 00:32:41.335
<v Speaker 3>and what they're up to right now, and

00:32:41.335 --> 00:32:43.655
<v Speaker 3>they're breaking into the whole cloud native space.

00:32:43.850 --> 00:32:46.170
<v Speaker 3>They they have, like, their own CNI. They

00:32:46.170 --> 00:32:47.850
<v Speaker 3>have an Istio offering as well or a

00:32:47.850 --> 00:32:49.130
<v Speaker 3>service mesh offering.

00:32:49.690 --> 00:32:51.289
<v Speaker 3>But they haven't adopted

00:32:51.610 --> 00:32:53.290
<v Speaker 3>their own mindset

00:32:53.290 --> 00:32:54.570
<v Speaker 3>and methodology

00:32:54.650 --> 00:32:56.970
<v Speaker 3>for those kinds of systems that they're developing

00:32:56.970 --> 00:32:59.534
<v Speaker 3>for cloud native, which is funny because they're

00:32:59.534 --> 00:33:00.895
<v Speaker 3>the ones that championed a lot of these

00:33:00.895 --> 00:33:02.494
<v Speaker 3>architectures that we see today.

00:33:03.054 --> 00:33:04.735
<v Speaker 3>We're just, like, repurposing

00:33:04.735 --> 00:33:06.335
<v Speaker 3>them in cloud native.

00:33:06.815 --> 00:33:08.735
<v Speaker 3>So it's it's it's interesting you brought that

00:33:08.735 --> 00:33:11.294
<v Speaker 3>up. And, you know, quite honestly, like, I

00:33:11.375 --> 00:33:13.054
<v Speaker 3>when I think of companies like Cilia oh,

00:33:13.054 --> 00:33:15.479
<v Speaker 3>sorry. Isovalent and what they're doing with Sillyum

00:33:15.559 --> 00:33:17.639
<v Speaker 3>and how they're bringing up service mesh into

00:33:17.639 --> 00:33:18.679
<v Speaker 3>their own offering,

00:33:18.840 --> 00:33:20.840
<v Speaker 3>I am I feel like nostalgia,

00:33:20.840 --> 00:33:22.519
<v Speaker 3>and I feel like deja vu as in

00:33:22.519 --> 00:33:23.960
<v Speaker 3>terms of, like, going back in time with

00:33:23.960 --> 00:33:25.000
<v Speaker 3>networking all over again.

00:33:25.615 --> 00:33:27.375
<v Speaker 4>Yes. Same. Yeah. The reason I brought ACI

00:33:27.375 --> 00:33:29.374
<v Speaker 4>because I couldn't actually think of anything else

00:33:29.534 --> 00:33:31.215
<v Speaker 4>that offered that. I may well be completely

00:33:31.215 --> 00:33:33.774
<v Speaker 4>wrong, but I couldn't NSX. VMware NSX. Yeah.

00:33:33.855 --> 00:33:35.135
<v Speaker 4>Of course. That's why I worked at Cisco.

00:33:35.135 --> 00:33:36.495
<v Speaker 4>Right? So I guess yeah. That's why I

00:33:36.495 --> 00:33:37.455
<v Speaker 4>thought of, ACI.

00:33:37.960 --> 00:33:40.440
<v Speaker 4>But, yeah, that idea of, like, of east

00:33:40.440 --> 00:33:42.680
<v Speaker 4>west controls without having to, like, headpin through

00:33:42.680 --> 00:33:43.960
<v Speaker 4>the firewall. And it was always a choice,

00:33:43.960 --> 00:33:45.320
<v Speaker 4>like Marina says. It was always a choice

00:33:45.320 --> 00:33:47.000
<v Speaker 4>back in the day. We're having the same,

00:33:47.000 --> 00:33:48.840
<v Speaker 4>you know, the same discussion, like, how small

00:33:48.840 --> 00:33:50.760
<v Speaker 4>do I make my broadcast domains, my VLANs?

00:33:50.760 --> 00:33:52.425
<v Speaker 4>How small do I make those subnets? Because

00:33:52.425 --> 00:33:53.785
<v Speaker 4>the smaller I make them, the more traffic

00:33:53.785 --> 00:33:55.465
<v Speaker 4>goes through the firewall, but I then I

00:33:55.465 --> 00:33:56.745
<v Speaker 4>need to pay for more firewalls and the

00:33:56.745 --> 00:33:59.065
<v Speaker 4>more administrative overhead I get. So it's the

00:33:59.065 --> 00:34:00.585
<v Speaker 4>same kind of trade off. But, like, with

00:34:00.665 --> 00:34:01.945
<v Speaker 4>I think the difference is with with an

00:34:01.945 --> 00:34:03.465
<v Speaker 4>ACI or NSX

00:34:03.465 --> 00:34:05.785
<v Speaker 4>or a or a sidecar based service mesh,

00:34:05.785 --> 00:34:08.139
<v Speaker 4>you can get to that, like, you know,

00:34:08.139 --> 00:34:08.860
<v Speaker 4>minimal

00:34:09.179 --> 00:34:12.139
<v Speaker 4>one workload, you know, one Unix process, one,

00:34:12.139 --> 00:34:14.140
<v Speaker 4>you know, network domain, one subnet.

00:34:14.300 --> 00:34:15.500
<v Speaker 4>And you can have you know, you can

00:34:15.500 --> 00:34:17.179
<v Speaker 4>get to that proper zero trust, you know,

00:34:17.179 --> 00:34:19.659
<v Speaker 4>zTunnel is is trading that off for other

00:34:19.659 --> 00:34:22.625
<v Speaker 4>things. But, yeah, same conversations we've been having,

00:34:22.784 --> 00:34:25.185
<v Speaker 4>what, ten, twenty years. Even before that, even

00:34:25.185 --> 00:34:27.025
<v Speaker 4>before the NSX stuff, like, folks were just

00:34:27.025 --> 00:34:28.385
<v Speaker 4>buying a lot of firewalls with a lot

00:34:28.385 --> 00:34:30.465
<v Speaker 4>of ports and making real small subnets. Right?

00:34:31.025 --> 00:34:32.065
<v Speaker 2>Alright. So

00:34:32.429 --> 00:34:34.510
<v Speaker 2>I love that you also mentioned IstioVeal and

00:34:34.510 --> 00:34:37.869
<v Speaker 2>and Cilium. Right? Their CI implementation is purely

00:34:37.869 --> 00:34:40.589
<v Speaker 2>driven with eBPF and the IP tables. Like,

00:34:40.589 --> 00:34:42.429
<v Speaker 2>I guess the the question just floating around

00:34:42.429 --> 00:34:44.030
<v Speaker 2>these are right now. It's like, why is

00:34:44.030 --> 00:34:46.784
<v Speaker 2>eTunnel in a gateway? Why why is eBPF

00:34:46.784 --> 00:34:48.225
<v Speaker 2>not the choice here?

00:34:49.344 --> 00:34:51.745
<v Speaker 3>So I I will say that from

00:34:51.984 --> 00:34:54.224
<v Speaker 3>an innovation standpoint, I don't know how much

00:34:54.224 --> 00:34:55.744
<v Speaker 3>is going on in the Istio world with

00:34:55.744 --> 00:34:57.984
<v Speaker 3>eBPF. I know that there's some PRs that

00:34:57.984 --> 00:35:00.305
<v Speaker 3>are open to use eBPF as an optimization

00:35:00.305 --> 00:35:01.345
<v Speaker 3>for redirecting traffic.

00:35:01.880 --> 00:35:03.960
<v Speaker 3>At Solo, we're doing it. So

00:35:04.520 --> 00:35:06.360
<v Speaker 3>if you decide, hey. You know,

00:35:06.760 --> 00:35:09.240
<v Speaker 3>I'm done using open source. I need something

00:35:09.240 --> 00:35:10.600
<v Speaker 3>a little bit more elaborate,

00:35:11.000 --> 00:35:13.880
<v Speaker 3>and I wanna take advantage of eBPF optimizations.

00:35:13.960 --> 00:35:16.520
<v Speaker 3>Well, there is an offering, through Solo, through

00:35:16.520 --> 00:35:18.815
<v Speaker 3>their Blue platform. But having said that, like,

00:35:18.815 --> 00:35:21.135
<v Speaker 3>even when you look at Cilium and Isovalent,

00:35:21.214 --> 00:35:24.174
<v Speaker 3>they basically are the ones that pioneered

00:35:24.174 --> 00:35:26.655
<v Speaker 3>sidecar list through their eBPF offering.

00:35:27.615 --> 00:35:29.694
<v Speaker 3>Now having said that, right, when you're looking

00:35:29.694 --> 00:35:31.214
<v Speaker 3>for completeness of a service mesh,

00:35:32.280 --> 00:35:34.200
<v Speaker 3>maybe they don't have it all there. It's

00:35:34.200 --> 00:35:34.920
<v Speaker 3>not already.

00:35:35.240 --> 00:35:36.840
<v Speaker 3>They'll give you parts of it. And if

00:35:36.840 --> 00:35:40.040
<v Speaker 3>you're already deeply ingrained in using Cilium CNI,

00:35:40.040 --> 00:35:41.240
<v Speaker 3>I mean, it doesn't hurt to turn on

00:35:41.240 --> 00:35:43.560
<v Speaker 3>the service mesh functionality and test it out.

00:35:43.880 --> 00:35:45.720
<v Speaker 3>But then when you're trying to leverage a

00:35:45.720 --> 00:35:46.884
<v Speaker 3>lot of the capabilities,

00:35:46.884 --> 00:35:49.765
<v Speaker 3>fault tolerance, resiliency that that is built into

00:35:49.765 --> 00:35:52.724
<v Speaker 3>what sidecars offer, what even sidecarless offers,

00:35:53.444 --> 00:35:54.964
<v Speaker 3>that's gonna be a bit of a challenge

00:35:54.964 --> 00:35:57.445
<v Speaker 3>working inside of, you know, a

00:35:58.085 --> 00:35:59.765
<v Speaker 3>you know, look. I I'm gonna say this,

00:35:59.765 --> 00:36:01.619
<v Speaker 3>but this is just my opinion. A switch

00:36:01.619 --> 00:36:05.300
<v Speaker 3>that does multilevel or multilayer networking versus

00:36:05.460 --> 00:36:08.420
<v Speaker 3>a different control plane that handles specific

00:36:08.420 --> 00:36:09.460
<v Speaker 3>elements of

00:36:10.099 --> 00:36:12.980
<v Speaker 3>of, you know, what a service mesh does.

00:36:13.140 --> 00:36:13.779
<v Speaker 3>So

00:36:14.244 --> 00:36:15.605
<v Speaker 3>the way I look at it is, okay.

00:36:15.605 --> 00:36:17.605
<v Speaker 3>It's nice that you have this single control

00:36:17.605 --> 00:36:19.445
<v Speaker 3>plane that does it all, but then where

00:36:19.445 --> 00:36:21.605
<v Speaker 3>do you compromise versus taking the other approach

00:36:21.605 --> 00:36:23.445
<v Speaker 3>where you use a few control planes that

00:36:23.445 --> 00:36:25.685
<v Speaker 3>work together to provide you that full stack

00:36:25.685 --> 00:36:26.005
<v Speaker 3>network,

00:36:26.559 --> 00:36:28.240
<v Speaker 3>and then you use something like GitOps to

00:36:28.240 --> 00:36:30.240
<v Speaker 3>control your network or deploy and manage and

00:36:30.240 --> 00:36:32.960
<v Speaker 3>scale your network. Yeah. No. Yeah. Yeah. I

00:36:32.960 --> 00:36:34.880
<v Speaker 4>think I'd agree with that. Cilium's an interesting

00:36:34.880 --> 00:36:37.280
<v Speaker 4>one. Good eBPF has got is great. Right?

00:36:37.280 --> 00:36:38.640
<v Speaker 4>It's a great technology. It's got a it's

00:36:38.640 --> 00:36:40.255
<v Speaker 4>got a lot of hype. It's not just

00:36:40.255 --> 00:36:42.255
<v Speaker 4>the networking stuff. Right? It's so you have

00:36:42.415 --> 00:36:44.815
<v Speaker 4>FOLCO, for example, uses BPF to, like, hook

00:36:44.815 --> 00:36:46.575
<v Speaker 4>a bunch of, you know, instrumentation points and

00:36:46.575 --> 00:36:47.855
<v Speaker 4>do essentially EDR.

00:36:48.815 --> 00:36:51.375
<v Speaker 4>But, yeah, like, BPF programs can call this

00:36:51.375 --> 00:36:53.935
<v Speaker 4>XDP library, express data path, and set up

00:36:53.935 --> 00:36:56.400
<v Speaker 4>fast networking in the kernel. So Istio, yeah,

00:36:56.400 --> 00:36:58.160
<v Speaker 4>Istio does use it. I think it's an

00:36:58.160 --> 00:36:59.920
<v Speaker 4>option. It's maybe default now. Like, don't quote

00:36:59.920 --> 00:37:01.280
<v Speaker 4>me on that, Marino. You might know. But

00:37:01.280 --> 00:37:02.960
<v Speaker 4>for yeah. For the acceleration. When I was

00:37:02.960 --> 00:37:04.800
<v Speaker 4>saying IP tables before, I mean, like, the

00:37:04.800 --> 00:37:06.880
<v Speaker 4>interception of traffic, you know, comes into a

00:37:06.880 --> 00:37:08.640
<v Speaker 4>pod, comes into a network namespace. It's gotta

00:37:08.640 --> 00:37:10.079
<v Speaker 4>go through the sidecar back out again.

00:37:11.065 --> 00:37:12.905
<v Speaker 4>Can be IP tables. It can also actually

00:37:12.905 --> 00:37:15.465
<v Speaker 4>be BPF, you know, and plus XDP,

00:37:15.785 --> 00:37:17.785
<v Speaker 4>which is which is usually quicker. I think

00:37:17.785 --> 00:37:20.185
<v Speaker 4>that might even be the default now. BPF

00:37:20.185 --> 00:37:22.025
<v Speaker 4>also gets you folks get confused, think, because

00:37:22.025 --> 00:37:23.225
<v Speaker 4>the same text used in a couple of

00:37:23.225 --> 00:37:25.305
<v Speaker 4>places, but, yeah, Cilium uses it to implement

00:37:25.690 --> 00:37:28.250
<v Speaker 4>a like, the CNI layer, to build that

00:37:28.250 --> 00:37:29.930
<v Speaker 4>overlay network. It's when you're outside of the

00:37:29.930 --> 00:37:32.010
<v Speaker 4>pod, when you're outside of the network namespace,

00:37:32.170 --> 00:37:33.850
<v Speaker 4>to build that overlay network in that, you

00:37:33.850 --> 00:37:35.770
<v Speaker 4>know, WeaveNet setup tunnels.

00:37:35.930 --> 00:37:38.170
<v Speaker 4>Flannel relies on you sending your own routes

00:37:38.170 --> 00:37:40.175
<v Speaker 4>in the host. There's various ways to do

00:37:40.175 --> 00:37:42.175
<v Speaker 4>it. Citium uses BPF and gets gets a

00:37:42.175 --> 00:37:43.695
<v Speaker 4>bunch of advantages from that,

00:37:44.335 --> 00:37:46.415
<v Speaker 4>but they are kinda separate. I think to

00:37:46.415 --> 00:37:48.095
<v Speaker 4>your original question, David, of, like, if we

00:37:48.095 --> 00:37:49.695
<v Speaker 4>have BPF is so powerful

00:37:49.855 --> 00:37:51.935
<v Speaker 4>and we have it sitting there implementing CNIs,

00:37:51.935 --> 00:37:53.135
<v Speaker 4>like, why do we need a z tunnel?

00:37:54.050 --> 00:37:55.250
<v Speaker 4>One

00:37:55.890 --> 00:37:59.250
<v Speaker 4>could imagine that a more sophisticated enough

00:37:59.330 --> 00:38:02.290
<v Speaker 4>networking layer could do that. One could maybe

00:38:02.290 --> 00:38:03.810
<v Speaker 4>imagine a cloud provider

00:38:04.210 --> 00:38:05.810
<v Speaker 4>who had a sophisticated,

00:38:06.435 --> 00:38:08.275
<v Speaker 4>you know, VPC technology

00:38:08.355 --> 00:38:10.195
<v Speaker 4>might actually be able to replace the z

00:38:10.195 --> 00:38:12.275
<v Speaker 4>tunnel all the z tunnel layer four functionality

00:38:12.275 --> 00:38:13.635
<v Speaker 4>with their own SDN.

00:38:14.035 --> 00:38:16.115
<v Speaker 4>I couldn't possibly comment, but, like, you can

00:38:16.115 --> 00:38:17.955
<v Speaker 4>you can see how that technology would would

00:38:17.955 --> 00:38:19.875
<v Speaker 4>plug together. Right? And then, absolutely, that's great

00:38:19.875 --> 00:38:22.670
<v Speaker 4>because, you know, nothing nothing wrong with that.

00:38:23.790 --> 00:38:25.309
<v Speaker 4>So, yeah, that's I think that's gonna be

00:38:25.309 --> 00:38:26.510
<v Speaker 4>an implement,

00:38:26.750 --> 00:38:27.550
<v Speaker 4>interesting

00:38:27.869 --> 00:38:29.390
<v Speaker 4>development to to watch.

00:38:30.030 --> 00:38:31.869
<v Speaker 3>Yeah. So I just wanted to add to

00:38:31.869 --> 00:38:34.575
<v Speaker 3>that. So there's a company called Merbridge that

00:38:34.575 --> 00:38:37.695
<v Speaker 3>actually developed the EBPS solution for Istio.

00:38:38.255 --> 00:38:40.335
<v Speaker 3>And I think the Istio community has decided

00:38:40.335 --> 00:38:42.335
<v Speaker 3>to adopt that approach altogether. I don't know

00:38:42.335 --> 00:38:43.615
<v Speaker 3>when it's gonna show up. I think there

00:38:43.615 --> 00:38:45.615
<v Speaker 3>is a PR open for it right now.

00:38:46.015 --> 00:38:47.720
<v Speaker 3>But that being said, like, it it's an

00:38:47.720 --> 00:38:50.440
<v Speaker 3>option. If you are comfortable and are willing

00:38:50.440 --> 00:38:53.080
<v Speaker 3>to use eBPF for sidecar optimizations,

00:38:53.160 --> 00:38:55.720
<v Speaker 3>then absolutely go for it. But, you know,

00:38:55.720 --> 00:38:57.320
<v Speaker 3>the other side to that is

00:38:57.640 --> 00:39:00.039
<v Speaker 3>if you decide, hey. I wanna get fancy

00:39:00.039 --> 00:39:01.319
<v Speaker 3>with eBPF programming,

00:39:01.895 --> 00:39:03.415
<v Speaker 3>that might not be the best place to

00:39:03.415 --> 00:39:04.695
<v Speaker 3>do it because it's pretty

00:39:05.015 --> 00:39:06.855
<v Speaker 3>static in some ways, right, in terms of

00:39:06.855 --> 00:39:09.494
<v Speaker 3>that that whole configuration stack. The other side

00:39:09.494 --> 00:39:10.615
<v Speaker 3>to it too is

00:39:11.015 --> 00:39:13.494
<v Speaker 3>when you start off, you know, when you

00:39:13.494 --> 00:39:15.335
<v Speaker 3>start off deploying a service mesh,

00:39:15.575 --> 00:39:17.015
<v Speaker 3>you don't wanna just throw everything

00:39:17.790 --> 00:39:19.230
<v Speaker 3>at your applications.

00:39:19.470 --> 00:39:22.030
<v Speaker 3>Start small. Right? Maybe you you realize that

00:39:22.030 --> 00:39:24.030
<v Speaker 3>you don't need eBPF to optimize

00:39:24.030 --> 00:39:26.190
<v Speaker 3>because you don't have a lot of that

00:39:26.190 --> 00:39:28.270
<v Speaker 3>cross traffic going on. Your latency is not

00:39:28.270 --> 00:39:29.950
<v Speaker 3>as high as you think it is. So

00:39:29.950 --> 00:39:31.550
<v Speaker 3>it will come down to a decision point

00:39:31.550 --> 00:39:33.275
<v Speaker 3>as well. I mean, there's the other side

00:39:33.275 --> 00:39:34.715
<v Speaker 3>to it too around stability.

00:39:34.795 --> 00:39:36.475
<v Speaker 3>Are you going to take something that's been

00:39:36.475 --> 00:39:37.435
<v Speaker 3>experimental,

00:39:37.435 --> 00:39:39.435
<v Speaker 3>run that in production? Probably not. Right? Which

00:39:39.435 --> 00:39:41.275
<v Speaker 3>is why ambient mesh is still experimental right

00:39:41.275 --> 00:39:41.755
<v Speaker 3>now.

00:39:42.395 --> 00:39:44.555
<v Speaker 3>But having said that, I'll plug something. So

00:39:45.470 --> 00:39:46.430
<v Speaker 3>Istio

00:39:46.430 --> 00:39:48.670
<v Speaker 3>has officially graduated. In fact, you should see

00:39:48.670 --> 00:39:50.910
<v Speaker 3>the announcement very shortly,

00:39:51.309 --> 00:39:52.910
<v Speaker 3>which means there's gonna be a lot more

00:39:52.910 --> 00:39:54.990
<v Speaker 3>traction around the consumption of Istio. You're gonna

00:39:54.990 --> 00:39:56.349
<v Speaker 3>see a lot more vendors pop in and

00:39:56.349 --> 00:39:58.665
<v Speaker 3>say, hey. Maybe we want to contribute more

00:39:58.665 --> 00:40:00.425
<v Speaker 3>to the ambient side because it fits our

00:40:00.425 --> 00:40:01.465
<v Speaker 3>model very well.

00:40:01.865 --> 00:40:04.105
<v Speaker 3>So that's a super exciting thing for us.

00:40:04.105 --> 00:40:06.425
<v Speaker 3>I mean, the community has poured in a

00:40:06.425 --> 00:40:08.185
<v Speaker 3>lot of work to make this possible.

00:40:08.665 --> 00:40:10.745
<v Speaker 3>You you see how service mesh and networking

00:40:10.745 --> 00:40:14.099
<v Speaker 3>in the cloud native space have become prioritized

00:40:14.579 --> 00:40:17.460
<v Speaker 3>for your workloads. It's become important much more

00:40:17.460 --> 00:40:19.540
<v Speaker 3>so than it was four years ago.

00:40:19.940 --> 00:40:22.660
<v Speaker 3>And it's only because of the manipulations you

00:40:22.660 --> 00:40:24.260
<v Speaker 3>can do inside of both a mesh and

00:40:24.260 --> 00:40:26.285
<v Speaker 3>a CNI that you weren't able to do

00:40:26.285 --> 00:40:28.444
<v Speaker 3>before. So it provides a lot of design

00:40:28.444 --> 00:40:30.765
<v Speaker 3>flexibility in terms of whether or not you

00:40:30.765 --> 00:40:33.005
<v Speaker 3>deploy ambient, whether you decide you're gonna use

00:40:33.005 --> 00:40:34.925
<v Speaker 3>just the ingress gateway functionality,

00:40:35.005 --> 00:40:37.724
<v Speaker 3>or maybe I just wanna turn on sidecars

00:40:37.724 --> 00:40:39.724
<v Speaker 3>because I want that observability. I wanna be

00:40:39.724 --> 00:40:42.490
<v Speaker 3>able to do distributed tracing very effectively and

00:40:42.490 --> 00:40:45.049
<v Speaker 3>see all my different service requests and the

00:40:45.049 --> 00:40:47.849
<v Speaker 3>paths and see, you know, how these services

00:40:47.849 --> 00:40:49.690
<v Speaker 3>are tied together and where things are failing.

00:40:49.690 --> 00:40:51.930
<v Speaker 3>Right? So it'll come down to the use

00:40:51.930 --> 00:40:54.650
<v Speaker 3>cases. There is no one size fits all

00:40:54.650 --> 00:40:55.130
<v Speaker 3>model.

00:40:55.515 --> 00:40:57.674
<v Speaker 3>There is no one solution or silver bullet

00:40:57.674 --> 00:40:58.714
<v Speaker 3>that'll do it all.

00:40:59.355 --> 00:41:01.434
<v Speaker 4>No. Absolutely. That's why I'm excited about Ambient.

00:41:01.434 --> 00:41:03.115
<v Speaker 4>Right? It's, you know, it's more choice. Choice

00:41:03.115 --> 00:41:05.035
<v Speaker 4>is always good. And how how long has

00:41:05.035 --> 00:41:06.315
<v Speaker 4>the Istio project been out? I was trying

00:41:06.315 --> 00:41:08.075
<v Speaker 4>to think. Six years or something? Six years.

00:41:08.075 --> 00:41:10.670
<v Speaker 3>Yeah. Six years. So and it's graduated. Right?

00:41:10.670 --> 00:41:12.190
<v Speaker 4>It's in one dot x, one dot 18

00:41:12.190 --> 00:41:14.109
<v Speaker 4>now. It's it's pretty mature, but that's still,

00:41:14.109 --> 00:41:15.549
<v Speaker 4>like, this is a real change. There's real

00:41:15.549 --> 00:41:17.230
<v Speaker 4>innovation. There's real dynamism.

00:41:17.309 --> 00:41:19.069
<v Speaker 4>So, yeah, super excited to see that happening.

00:41:19.069 --> 00:41:20.430
<v Speaker 4>Super excited to see the choice.

00:41:20.670 --> 00:41:22.190
<v Speaker 4>But like Marino says, you know, it's horses

00:41:22.190 --> 00:41:24.505
<v Speaker 4>for courses. You gotta understand what, you know,

00:41:24.505 --> 00:41:25.545
<v Speaker 4>what you're turning on.

00:41:25.785 --> 00:41:27.305
<v Speaker 4>But I would say test it with your

00:41:27.305 --> 00:41:29.545
<v Speaker 4>own, you know, workloads. Actually, look at your

00:41:29.545 --> 00:41:31.465
<v Speaker 4>own numbers. You know, do your own threat

00:41:31.465 --> 00:41:33.465
<v Speaker 4>models. Look at your own regulatory environment.

00:41:34.265 --> 00:41:35.625
<v Speaker 4>Yeah. David, when you said you were gonna

00:41:35.625 --> 00:41:36.744
<v Speaker 4>just push it to prod, like it is

00:41:36.744 --> 00:41:38.425
<v Speaker 4>alpha still. It is still you know?

00:41:39.460 --> 00:41:41.300
<v Speaker 4>I mean, I missed the journalist episode. So

00:41:41.780 --> 00:41:42.340
<v Speaker 4>Well,

00:41:43.540 --> 00:41:44.980
<v Speaker 4>depends how long you take to to edit

00:41:44.980 --> 00:41:46.020
<v Speaker 4>it. Yeah. But

00:41:47.860 --> 00:41:48.420
<v Speaker 1>I

00:41:48.660 --> 00:41:50.820
<v Speaker 1>do feel like there's some obligatory x k

00:41:50.820 --> 00:41:51.940
<v Speaker 1>c d that we need to put in

00:41:51.940 --> 00:41:54.215
<v Speaker 1>here, though. Like, I mean, I I have

00:41:54.215 --> 00:41:55.735
<v Speaker 1>to admit. Like, I listen to all this,

00:41:55.735 --> 00:41:57.815
<v Speaker 1>and sometimes I just kinda think, we

00:41:58.055 --> 00:42:00.615
<v Speaker 1>have 16 standards. We should have one standard

00:42:00.615 --> 00:42:01.975
<v Speaker 1>that unifies everything.

00:42:02.215 --> 00:42:04.695
<v Speaker 1>Couple months later, we have 17 standards.

00:42:06.260 --> 00:42:08.580
<v Speaker 1>Yeah. So that's all I kinda think about

00:42:08.580 --> 00:42:10.180
<v Speaker 1>sometimes when I hear, well, we're using this

00:42:10.180 --> 00:42:12.180
<v Speaker 1>and that and the other. But I can

00:42:12.180 --> 00:42:14.420
<v Speaker 4>tell you. I mean, gateway gateway API is

00:42:14.420 --> 00:42:16.660
<v Speaker 4>that same. I mean, let's be honest. Like

00:42:16.660 --> 00:42:17.300
<v Speaker 1>you said,

00:42:17.859 --> 00:42:20.525
<v Speaker 1>networking hasn't really changed. We just changed the

00:42:20.525 --> 00:42:22.605
<v Speaker 1>scale of it. So maybe there's an x

00:42:22.605 --> 00:42:23.645
<v Speaker 1>k c d in there as well. Who

00:42:23.645 --> 00:42:25.725
<v Speaker 4>knows? But I think, like, Marino says, like,

00:42:25.725 --> 00:42:26.605
<v Speaker 4>folks are

00:42:27.645 --> 00:42:29.965
<v Speaker 4>I I personally feel like we're getting more

00:42:29.965 --> 00:42:32.125
<v Speaker 4>mature. The actual cloud native thing. Right? Like,

00:42:32.125 --> 00:42:34.440
<v Speaker 4>folks, we're going into cloud, and, you know,

00:42:34.440 --> 00:42:36.200
<v Speaker 4>I was at various consultancies and whatever, and

00:42:36.200 --> 00:42:37.800
<v Speaker 4>we were always saying, like, you've got like,

00:42:37.800 --> 00:42:39.160
<v Speaker 4>lifting and shifting, like, being in the cloud

00:42:39.160 --> 00:42:41.240
<v Speaker 4>is not enough. You've gotta be cloud native.

00:42:41.240 --> 00:42:43.160
<v Speaker 4>And I think the act the sort of

00:42:43.160 --> 00:42:44.840
<v Speaker 4>lift and shift or the, like, the naive

00:42:44.840 --> 00:42:46.360
<v Speaker 4>cloud architectures

00:42:46.440 --> 00:42:48.865
<v Speaker 4>happen for a lot longer than I maybe

00:42:48.865 --> 00:42:49.905
<v Speaker 4>thought they would.

00:42:50.705 --> 00:42:52.385
<v Speaker 4>And folks are now realizing that they've got

00:42:52.385 --> 00:42:53.905
<v Speaker 4>all their microservices and all of this, and

00:42:53.905 --> 00:42:56.545
<v Speaker 4>it's great. And they've built a distributed system,

00:42:56.545 --> 00:42:58.145
<v Speaker 4>you know, what used to be, like, one

00:42:58.145 --> 00:42:59.025
<v Speaker 4>monolith

00:42:59.025 --> 00:43:01.265
<v Speaker 4>with dependency injection and and, you know, an

00:43:01.265 --> 00:43:03.010
<v Speaker 4>ORM. We we got quite good at building

00:43:03.010 --> 00:43:05.490
<v Speaker 4>monoliths, right, really, with, like, interface driven design

00:43:05.490 --> 00:43:06.210
<v Speaker 4>and stuff.

00:43:06.529 --> 00:43:08.690
<v Speaker 4>And, like, if if namespace a calls namespace

00:43:08.690 --> 00:43:10.529
<v Speaker 4>b, it can't fail. You're just putting a

00:43:10.529 --> 00:43:12.289
<v Speaker 4>program counter on the stack and calling jump.

00:43:12.289 --> 00:43:13.250
<v Speaker 4>Right? Like, basically,

00:43:13.730 --> 00:43:16.095
<v Speaker 4>instant never fails. You've now built a distributed

00:43:16.095 --> 00:43:18.255
<v Speaker 4>system. You've probably got distributed transactions. You've got

00:43:18.255 --> 00:43:19.855
<v Speaker 4>failure modes you never thought of.

00:43:20.175 --> 00:43:21.775
<v Speaker 4>And the network is, yeah, is the way

00:43:21.775 --> 00:43:23.375
<v Speaker 4>to fix that. Right? So I think we're

00:43:23.375 --> 00:43:25.215
<v Speaker 4>finally becoming, like, actually cloud native in this

00:43:25.295 --> 00:43:27.455
<v Speaker 4>exactly like Marino says. We gotta realize we

00:43:27.970 --> 00:43:29.890
<v Speaker 4>we need to leverage with there's a whole

00:43:29.890 --> 00:43:31.730
<v Speaker 4>bunch of stuff. We've gotta get that observability

00:43:31.730 --> 00:43:33.330
<v Speaker 4>back that we have by just attaching a

00:43:33.330 --> 00:43:35.730
<v Speaker 4>debugger to our massive process. We've gotta get

00:43:35.730 --> 00:43:36.530
<v Speaker 4>the control

00:43:36.850 --> 00:43:39.410
<v Speaker 4>back that we had with dependency injection systems

00:43:39.410 --> 00:43:40.930
<v Speaker 4>and the sort of, you know, different routing

00:43:40.930 --> 00:43:42.130
<v Speaker 4>they could do in test builds.

00:43:42.935 --> 00:43:45.255
<v Speaker 4>And like a service mesh is is,

00:43:45.494 --> 00:43:46.855
<v Speaker 4>I think, the way to do that. And

00:43:46.855 --> 00:43:48.935
<v Speaker 4>we're yeah. So networking and meshes are coming

00:43:48.935 --> 00:43:51.655
<v Speaker 4>forefront as people realize that they absolutely need

00:43:51.655 --> 00:43:53.335
<v Speaker 4>this stuff, and you you can't build a

00:43:53.335 --> 00:43:55.255
<v Speaker 4>system properly without it. So it's yeah. So

00:43:55.255 --> 00:43:57.255
<v Speaker 4>as somebody who's always been into networking stuff,

00:43:57.255 --> 00:44:00.170
<v Speaker 4>it's it's fun to see. Alright. We're very,

00:44:00.170 --> 00:44:03.210
<v Speaker 2>very close to the end of the ever.

00:44:03.210 --> 00:44:03.850
<v Speaker 2>So

00:44:05.130 --> 00:44:07.050
<v Speaker 2>I'll now give you both the opportunity just

00:44:07.050 --> 00:44:08.570
<v Speaker 2>to show us a plug, and if anything

00:44:08.570 --> 00:44:10.170
<v Speaker 2>you want, feel free to take, you know,

00:44:10.375 --> 00:44:12.455
<v Speaker 2>couple of minutes, whatever you need to share

00:44:12.455 --> 00:44:14.775
<v Speaker 2>your Twitter, your website, your company, your products,

00:44:14.775 --> 00:44:17.575
<v Speaker 2>your OnlyFans. Go for it. Have fun. Marino,

00:44:17.575 --> 00:44:19.335
<v Speaker 2>why don't you take it away first?

00:44:19.735 --> 00:44:22.055
<v Speaker 3>Yeah. So if everyone can see the video,

00:44:22.055 --> 00:44:24.215
<v Speaker 3>I've thrown my Twitter handle on there, so

00:44:24.215 --> 00:44:26.215
<v Speaker 3>you're welcome to kinda see some of the

00:44:26.589 --> 00:44:28.430
<v Speaker 3>the shitposts that I put out there about

00:44:28.430 --> 00:44:31.470
<v Speaker 3>networking and perspectives and even service mesh.

00:44:31.710 --> 00:44:34.109
<v Speaker 3>But one thing that I noticed last year

00:44:34.109 --> 00:44:36.030
<v Speaker 3>was that there was a lack of understanding

00:44:36.030 --> 00:44:38.349
<v Speaker 3>of how networking worked inside of Kubernetes. And

00:44:38.349 --> 00:44:40.349
<v Speaker 3>I, you know, sought out to build a

00:44:40.349 --> 00:44:42.835
<v Speaker 3>workshop, built the workshop, delivered it a few

00:44:42.835 --> 00:44:45.555
<v Speaker 3>times, and it's become a thing. So if

00:44:45.555 --> 00:44:47.795
<v Speaker 3>you really wanna understand what's going on in

00:44:47.795 --> 00:44:50.515
<v Speaker 3>the OSI model, I've built a workshop called

00:44:50.515 --> 00:44:51.715
<v Speaker 3>network foundations.

00:44:52.195 --> 00:44:54.995
<v Speaker 3>It can be accessible at academy.solo.io.

00:44:55.140 --> 00:44:56.980
<v Speaker 3>Head over there, register,

00:44:56.980 --> 00:44:58.420
<v Speaker 3>and then you could take the workshops in

00:44:58.420 --> 00:45:00.260
<v Speaker 3>two parts. You get the first bit that

00:45:00.260 --> 00:45:03.859
<v Speaker 3>covers, you know, IP addressing, subnetting, understanding routing,

00:45:03.859 --> 00:45:05.940
<v Speaker 3>DNS, and even working with a little bit

00:45:05.940 --> 00:45:06.740
<v Speaker 3>of HTTP.

00:45:07.385 --> 00:45:09.625
<v Speaker 3>And then the second part focuses in on

00:45:09.625 --> 00:45:11.545
<v Speaker 3>why we use proxies, how to how to

00:45:11.545 --> 00:45:12.825
<v Speaker 3>set them up so that you could start

00:45:12.825 --> 00:45:15.065
<v Speaker 3>doing things like load balancing or filtration of

00:45:15.065 --> 00:45:17.305
<v Speaker 3>packets or or traffic all the way to

00:45:17.305 --> 00:45:20.130
<v Speaker 3>understanding how networking namespaces are built and why

00:45:20.130 --> 00:45:21.330
<v Speaker 3>you wouldn't do this today.

00:45:21.650 --> 00:45:23.410
<v Speaker 3>Instead, you'd use a CNI because it takes

00:45:23.410 --> 00:45:25.410
<v Speaker 3>care of all the IP address management and

00:45:25.410 --> 00:45:27.970
<v Speaker 3>the onboarding and offboarding of pods. And then

00:45:27.970 --> 00:45:30.609
<v Speaker 3>we end at Kubernetes networking to understand how

00:45:30.609 --> 00:45:33.090
<v Speaker 3>pods communicate on a network in Kubernetes

00:45:33.170 --> 00:45:34.704
<v Speaker 3>and how we expose them to the outside

00:45:34.704 --> 00:45:38.625
<v Speaker 3>world. So go check it out. Academy.solo.i0networkfoundations.

00:45:39.345 --> 00:45:41.424
<v Speaker 2>Alright. You're talking about Matt. What do have?

00:45:41.424 --> 00:45:42.704
<v Speaker 4>Do you want me to screen share the

00:45:42.704 --> 00:45:43.345
<v Speaker 4>only fans? Or

00:45:44.305 --> 00:45:47.200
<v Speaker 1>There we go. Let's do it. In this

00:45:47.200 --> 00:45:49.280
<v Speaker 1>visual medium of a podcast, it's gonna be

00:45:49.280 --> 00:45:51.600
<v Speaker 1>great. Yeah. Maybe I maybe I maybe I

00:45:51.600 --> 00:45:53.280
<v Speaker 4>won't get It's on YouTube too. It's fine.

00:45:53.280 --> 00:45:54.800
<v Speaker 2>But if I also put the link to

00:45:54.800 --> 00:45:56.240
<v Speaker 2>the course on the Twitter and it show

00:45:56.240 --> 00:45:57.520
<v Speaker 2>up as well You can you can get

00:45:58.160 --> 00:46:01.045
<v Speaker 4>fans back. But go for it, Matt. Yeah.

00:46:01.045 --> 00:46:03.205
<v Speaker 4>Cool. Yeah. So I'm Matt Turner. If you

00:46:03.205 --> 00:46:05.125
<v Speaker 4>don't wanna follow the my shit posts,

00:46:05.605 --> 00:46:07.925
<v Speaker 4>fairly similar flavor, I guess. I'm at m

00:46:07.925 --> 00:46:09.205
<v Speaker 4>t one six five

00:46:09.605 --> 00:46:11.205
<v Speaker 4>on Twitter, and then there's links for there

00:46:11.205 --> 00:46:13.605
<v Speaker 4>to the the other nascent socials that are

00:46:13.605 --> 00:46:13.925
<v Speaker 4>coming along.

00:46:14.980 --> 00:46:16.260
<v Speaker 4>Yeah. I've done a a, you know, fair

00:46:16.260 --> 00:46:19.220
<v Speaker 4>amount of talks. I got a website, mt165.co.uk.

00:46:19.220 --> 00:46:20.420
<v Speaker 4>That's got links to the videos with all

00:46:20.420 --> 00:46:22.020
<v Speaker 4>of those. I talk about networking and service

00:46:22.020 --> 00:46:23.540
<v Speaker 4>mesh and Kubernetes and stuff.

00:46:24.660 --> 00:46:26.340
<v Speaker 4>I work at Tetrate, so we have a,

00:46:26.340 --> 00:46:27.780
<v Speaker 4>like, a management plane. We didn't get into

00:46:27.780 --> 00:46:29.540
<v Speaker 4>it, but we've got a management plane over

00:46:29.815 --> 00:46:31.975
<v Speaker 4>various Istio control planes. So all the stuff

00:46:31.975 --> 00:46:33.655
<v Speaker 4>we were talking about, you know, where do

00:46:33.655 --> 00:46:34.135
<v Speaker 4>you,

00:46:34.615 --> 00:46:36.375
<v Speaker 4>which control plane do you use? Where do

00:46:36.375 --> 00:46:38.455
<v Speaker 4>I configure layer four versus, you know, layer

00:46:38.455 --> 00:46:40.135
<v Speaker 4>seven? Do I use how how do I

00:46:40.135 --> 00:46:41.735
<v Speaker 4>use Istio CNI policies in

00:46:42.470 --> 00:46:45.190
<v Speaker 4>sorry, Kubernetes CNI, like network policies in addition

00:46:45.190 --> 00:46:45.670
<v Speaker 4>with

00:46:45.990 --> 00:46:48.789
<v Speaker 4>Istio features? You know, the management plane kinda

00:46:48.789 --> 00:46:50.950
<v Speaker 4>transparently takes care of all of that. And

00:46:50.950 --> 00:46:52.309
<v Speaker 4>we've also involved with a bunch of the

00:46:52.309 --> 00:46:55.555
<v Speaker 4>open source projects. So we're we're begin to

00:46:55.635 --> 00:46:57.235
<v Speaker 4>they get the new gateway API stuff, which

00:46:57.235 --> 00:46:59.475
<v Speaker 4>I think is super exciting for everybody. And,

00:46:59.475 --> 00:47:01.155
<v Speaker 4>hopefully, you know, it's the seventeenth standard that

00:47:01.155 --> 00:47:02.675
<v Speaker 4>will actually replace them all because it is

00:47:02.675 --> 00:47:05.635
<v Speaker 4>looking really good. Istio supports it. You know,

00:47:05.635 --> 00:47:07.315
<v Speaker 4>lots of other stuff is supporting it. So

00:47:07.500 --> 00:47:10.060
<v Speaker 4>so that's exciting. And we've we've we're doing

00:47:10.060 --> 00:47:12.060
<v Speaker 4>the main contributors to the reference implementation of

00:47:12.060 --> 00:47:13.900
<v Speaker 4>that, which is, like, Envoy gateway. Like, real

00:47:13.900 --> 00:47:14.780
<v Speaker 4>real simple

00:47:15.180 --> 00:47:17.660
<v Speaker 4>ingress gateway based on Envoy talks to gateway

00:47:17.660 --> 00:47:19.580
<v Speaker 4>API. Like, it should hopefully become the de

00:47:19.580 --> 00:47:20.380
<v Speaker 4>facto standard there.

00:47:21.075 --> 00:47:22.595
<v Speaker 4>And we do Wasm stuff as well. So

00:47:22.595 --> 00:47:24.595
<v Speaker 4>if you wanna plug Wasm into Go, if

00:47:24.595 --> 00:47:26.675
<v Speaker 4>you wanna build Go into Wasm, you know,

00:47:26.675 --> 00:47:28.515
<v Speaker 4>all of those tool chains are other things

00:47:28.515 --> 00:47:30.355
<v Speaker 4>that we're working on. So, yeah, we're we're

00:47:30.355 --> 00:47:32.675
<v Speaker 4>helping out the ecosystem in in a bunch

00:47:32.675 --> 00:47:33.795
<v Speaker 4>of different places there.

00:47:34.115 --> 00:47:34.515
<v Speaker 1>Cool.

00:47:35.280 --> 00:47:36.160
<v Speaker 1>David,

00:47:36.400 --> 00:47:39.040
<v Speaker 1>considering that I just heard your keyword,

00:47:40.720 --> 00:47:42.560
<v Speaker 2>Wasm. Yep. Wasm.

00:47:42.560 --> 00:47:44.080
<v Speaker 1>Here we go. It's your turn.

00:47:45.440 --> 00:47:46.640
<v Speaker 4>No. You plug in.

00:47:47.520 --> 00:47:50.065
<v Speaker 1>No. I'm just saying. I know. I'm just

00:47:50.065 --> 00:47:52.305
<v Speaker 1>having fun teasing about Wasm. Yeah. I could

00:47:52.305 --> 00:47:53.505
<v Speaker 2>just run an episode where I talk about

00:47:53.505 --> 00:47:55.585
<v Speaker 2>a cool amplifier. Hey. You did really, really

00:47:55.585 --> 00:47:57.425
<v Speaker 1>good. You didn't, like, get into it the

00:47:57.425 --> 00:47:59.505
<v Speaker 1>whole time. It was good. Say something about

00:47:59.505 --> 00:48:01.025
<v Speaker 4>it, but I did think that's a bit

00:48:01.025 --> 00:48:03.260
<v Speaker 4>of a a rabbit hole. But, yeah, Rino's

00:48:03.260 --> 00:48:05.020
<v Speaker 4>probably right about the network becoming, like, powerful

00:48:05.020 --> 00:48:06.940
<v Speaker 4>and a big lever, but please don't put

00:48:06.940 --> 00:48:08.620
<v Speaker 4>business logic there. Like, we've done this before

00:48:08.620 --> 00:48:09.580
<v Speaker 4>with the ASPs.

00:48:09.740 --> 00:48:11.820
<v Speaker 4>We've done it before with, like, Lua scripts

00:48:11.820 --> 00:48:13.260
<v Speaker 4>in your NGINX reverse proxy.

00:48:13.825 --> 00:48:16.145
<v Speaker 4>Wasm gives you this amazingly powerful tool and

00:48:16.145 --> 00:48:17.585
<v Speaker 4>a great big gun to shoot yourself in

00:48:17.585 --> 00:48:19.265
<v Speaker 4>the foot. Like, please don't use BPF or

00:48:19.265 --> 00:48:21.105
<v Speaker 4>Wasm to, like, hook the network with business

00:48:21.105 --> 00:48:21.665
<v Speaker 4>logic.

00:48:22.305 --> 00:48:24.145
<v Speaker 4>That's all I'm gonna say on that. I

00:48:24.145 --> 00:48:24.865
<v Speaker 1>mean, like,

00:48:25.185 --> 00:48:27.745
<v Speaker 1>if if we don't learn the history Right.

00:48:27.825 --> 00:48:30.080
<v Speaker 1>What are we doomed to do? So Need

00:48:30.080 --> 00:48:31.600
<v Speaker 4>a bunch of grumpy people on a call

00:48:31.600 --> 00:48:33.360
<v Speaker 4>like this to, yeah, tell you how bad

00:48:33.360 --> 00:48:35.040
<v Speaker 4>it was. Yeah. Exactly.

00:48:35.520 --> 00:48:37.680
<v Speaker 2>I mean, they they try that without WebAssembly

00:48:37.680 --> 00:48:39.920
<v Speaker 2>with cloud native network functions, like, that where

00:48:39.920 --> 00:48:41.360
<v Speaker 2>every every network thing was supposed to be

00:48:41.360 --> 00:48:42.800
<v Speaker 2>a container. I mean, that was the thing

00:48:42.800 --> 00:48:44.560
<v Speaker 2>for, like, two minutes. Right? There's many ways

00:48:44.560 --> 00:48:46.454
<v Speaker 4>to do it. There's also people who trudge

00:48:46.454 --> 00:48:48.695
<v Speaker 1>up this uphill in the snow both ways.

00:48:49.095 --> 00:48:51.015
<v Speaker 1>You know, we can argue about that. That'd

00:48:51.015 --> 00:48:53.575
<v Speaker 1>be fun. But thanks for joining us. If

00:48:53.575 --> 00:48:55.654
<v Speaker 2>you wanna keep up with us, consider subscribing

00:48:55.654 --> 00:48:56.775
<v Speaker 2>to the podcast

00:48:56.855 --> 00:48:59.174
<v Speaker 2>on your favorite podcasting app or even go

00:48:59.174 --> 00:49:01.530
<v Speaker 2>to cloudnativecompass.fm.

00:49:01.610 --> 00:49:02.970
<v Speaker 1>And if you want us to talk with

00:49:02.970 --> 00:49:05.850
<v Speaker 1>someone specific or cover a specific topic,

00:49:06.090 --> 00:49:08.170
<v Speaker 1>reach out to us on any social media

00:49:08.170 --> 00:49:11.050
<v Speaker 1>platform. Until next time when exploring the cloud

00:49:11.050 --> 00:49:12.010
<v Speaker 2>native landscape

00:49:12.090 --> 00:49:14.836
<v Speaker 2>on three. On 3. 1,

00:49:15.156 --> 00:49:16.596
<v Speaker 2>2, 3.

00:49:16.996 --> 00:49:18.836
<v Speaker 2>Don't forget your compass. Forget your compass.
