WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 9d42a040-d65d-4c7b-bb46-946356e0fb43
Created: 2025-04-29T12:43:08.300Z
Duration: 4631.54
Channels: 1

00:01:48.015 --> 00:01:48.815
<v Speaker 0>Hello,

00:01:48.815 --> 00:01:51.695
<v Speaker 0>and welcome back to the Rawkode Academy. I'm

00:01:51.695 --> 00:01:54.975
<v Speaker 0>your host, Rawkode, sometimes known as David Flanagan.

00:01:55.580 --> 00:01:58.220
<v Speaker 0>Today, we are continuing our exploration of the

00:01:58.220 --> 00:02:00.700
<v Speaker 0>cloud native landscape and taking a look at

00:02:00.700 --> 00:02:03.740
<v Speaker 0>a project that wants to make building microservices

00:02:03.740 --> 00:02:04.540
<v Speaker 0>easier.

00:02:04.860 --> 00:02:06.700
<v Speaker 0>That project is Dapr.

00:02:06.700 --> 00:02:08.699
<v Speaker 0>And to guide us through today's journey, I

00:02:08.699 --> 00:02:11.834
<v Speaker 0>am joined by my friend, Salaboy Mauricio.

00:02:11.834 --> 00:02:13.115
<v Speaker 0>Hey, man. How's it going?

00:02:13.755 --> 00:02:15.995
<v Speaker 1>Hey, David. How are you doing? Thank you

00:02:15.995 --> 00:02:17.834
<v Speaker 1>very much for the invite. You know, I

00:02:17.834 --> 00:02:19.595
<v Speaker 1>I Yeah. Didn't wanted to do something like

00:02:19.595 --> 00:02:21.435
<v Speaker 1>this for for a long time, and finally,

00:02:21.435 --> 00:02:23.500
<v Speaker 1>it's happening 2023.

00:02:23.500 --> 00:02:24.380
<v Speaker 1>And

00:02:24.380 --> 00:02:27.100
<v Speaker 1>that's that's I'm super happy. Thank you for

00:02:27.100 --> 00:02:28.940
<v Speaker 1>having me. We're squeezing the end right before

00:02:28.940 --> 00:02:30.460
<v Speaker 0>the end of the year, which is fantastic.

00:02:30.460 --> 00:02:32.140
<v Speaker 0>And it's nice to be able to set

00:02:32.140 --> 00:02:33.820
<v Speaker 0>and do this thing with an actual friendly

00:02:33.820 --> 00:02:35.420
<v Speaker 0>face. So, you know, thank you for taking

00:02:35.420 --> 00:02:36.620
<v Speaker 0>the time to to join me today.

00:02:37.525 --> 00:02:40.645
<v Speaker 1>Let's do it. Alright. So for anyone who's

00:02:40.645 --> 00:02:42.485
<v Speaker 0>not familiar with you, which I think is

00:02:42.485 --> 00:02:44.085
<v Speaker 0>impossible in our space Yeah. Could you please

00:02:44.085 --> 00:02:45.765
<v Speaker 0>tell us, you know, what you've been up

00:02:45.765 --> 00:02:47.765
<v Speaker 0>to, what you're doing now, and anything else

00:02:47.765 --> 00:02:48.565
<v Speaker 0>that you think is interesting?

00:02:49.600 --> 00:02:52.320
<v Speaker 1>Yeah. Yeah. Yeah. Sure. So I've been working

00:02:52.320 --> 00:02:54.400
<v Speaker 1>with Dapr for a company for a new

00:02:54.400 --> 00:02:56.960
<v Speaker 1>company that's called for a year now. Like,

00:02:56.960 --> 00:02:59.440
<v Speaker 1>my my anniversary was, like, a couple of

00:02:59.440 --> 00:03:01.760
<v Speaker 1>days ago. And I've been getting into the

00:03:01.760 --> 00:03:03.920
<v Speaker 1>Dapr community for the last year because I

00:03:03.920 --> 00:03:04.800
<v Speaker 1>found Dapr

00:03:05.055 --> 00:03:07.375
<v Speaker 1>like, as one of the missing pieces of,

00:03:07.375 --> 00:03:09.375
<v Speaker 1>you know, building applications on top of of

00:03:09.375 --> 00:03:10.255
<v Speaker 1>Kubernetes.

00:03:10.495 --> 00:03:12.655
<v Speaker 1>I've been working with Kubernetes for, like, seven

00:03:12.655 --> 00:03:15.534
<v Speaker 1>years now, always from that, like, developer perspective.

00:03:15.534 --> 00:03:17.375
<v Speaker 1>Right? Like, just trying to help developers to

00:03:17.375 --> 00:03:19.610
<v Speaker 1>get their applications up and running, but also

00:03:19.610 --> 00:03:22.650
<v Speaker 1>connected to each other and, like, implementing best

00:03:22.650 --> 00:03:24.650
<v Speaker 1>practices and finding the right tools to do

00:03:24.650 --> 00:03:25.450
<v Speaker 1>the right things.

00:03:25.850 --> 00:03:27.770
<v Speaker 1>And I found Dapr kinda like a the

00:03:27.770 --> 00:03:29.850
<v Speaker 1>Dapr project to be significant

00:03:29.850 --> 00:03:31.530
<v Speaker 1>in that space. Right? Like, it's very close

00:03:31.530 --> 00:03:34.330
<v Speaker 1>to developers. It's about APIs to build, you

00:03:34.330 --> 00:03:36.255
<v Speaker 1>know, better cloud native applications.

00:03:36.575 --> 00:03:38.254
<v Speaker 1>And, yeah, I've been trying to contribute to

00:03:38.254 --> 00:03:40.495
<v Speaker 1>the project, trying to integrate the project with

00:03:40.495 --> 00:03:42.655
<v Speaker 1>other projects and other communities in the CNCF

00:03:42.655 --> 00:03:44.975
<v Speaker 1>landscape and outside CNCF as well.

00:03:45.295 --> 00:03:47.455
<v Speaker 1>In the in the journey, in that journey,

00:03:47.455 --> 00:03:49.135
<v Speaker 1>basically, I've been meeting a lot of very

00:03:49.135 --> 00:03:51.370
<v Speaker 1>interesting folks and learning a lot of interesting

00:03:51.370 --> 00:03:53.290
<v Speaker 1>lessons. So, you know, whatever I can share

00:03:53.290 --> 00:03:55.610
<v Speaker 1>about that, it's it's always good.

00:03:56.489 --> 00:03:57.850
<v Speaker 0>Awesome. Amazing.

00:03:58.090 --> 00:04:00.170
<v Speaker 0>And you didn't mention your book. Do you

00:04:00.170 --> 00:04:01.209
<v Speaker 0>wanna talk about that as well?

00:04:02.345 --> 00:04:03.704
<v Speaker 1>I can talk about my book as well.

00:04:03.864 --> 00:04:05.465
<v Speaker 1>It's it's a funny thing, Riley, when you

00:04:05.465 --> 00:04:07.465
<v Speaker 1>when you write a book. I've started writing

00:04:07.465 --> 00:04:09.465
<v Speaker 1>my book, like, two years ago, and now

00:04:09.465 --> 00:04:11.945
<v Speaker 1>it's titled platform engineering on Kubernetes,

00:04:12.424 --> 00:04:14.500
<v Speaker 1>where I basically cover a bunch of open

00:04:14.500 --> 00:04:15.380
<v Speaker 1>source projects,

00:04:15.700 --> 00:04:17.459
<v Speaker 1>and how do they relate and how do

00:04:17.459 --> 00:04:19.540
<v Speaker 1>they work together to just build platforms on

00:04:19.540 --> 00:04:20.820
<v Speaker 1>top of Kubernetes, basically.

00:04:21.220 --> 00:04:23.060
<v Speaker 1>But, because I've been writing it for the

00:04:23.060 --> 00:04:24.580
<v Speaker 1>last two years, the moment that it got

00:04:24.580 --> 00:04:26.905
<v Speaker 1>printed, I had this feeling of, I don't

00:04:26.905 --> 00:04:28.425
<v Speaker 1>want to talk about this anymore.

00:04:28.745 --> 00:04:30.105
<v Speaker 1>But now is the time where I should

00:04:30.105 --> 00:04:31.705
<v Speaker 1>be talking a lot about it, right, because

00:04:31.705 --> 00:04:34.825
<v Speaker 1>it's out actually out. So yeah. So, you

00:04:34.825 --> 00:04:36.825
<v Speaker 1>know, the book is all about open source

00:04:36.985 --> 00:04:38.745
<v Speaker 1>tools for Kubernetes,

00:04:38.745 --> 00:04:42.280
<v Speaker 1>tools for teams and application delivery teams and

00:04:42.280 --> 00:04:45.560
<v Speaker 1>for operation people to build platforms that basically

00:04:45.560 --> 00:04:47.720
<v Speaker 1>help teams to just get software

00:04:47.800 --> 00:04:49.560
<v Speaker 1>running on top of Kubernetes,

00:04:50.120 --> 00:04:51.560
<v Speaker 1>going from pipelines,

00:04:51.560 --> 00:04:52.600
<v Speaker 1>from packaging,

00:04:52.760 --> 00:04:56.335
<v Speaker 1>from, application development tools like Dapr,

00:04:56.335 --> 00:04:58.254
<v Speaker 1>but also k native for running and auto

00:04:58.254 --> 00:04:58.975
<v Speaker 1>scaling,

00:04:59.455 --> 00:05:01.215
<v Speaker 1>a bunch of other things that people might

00:05:01.215 --> 00:05:02.095
<v Speaker 1>find interesting.

00:05:02.895 --> 00:05:05.055
<v Speaker 0>Yeah. I mean, that's the thing with Kubernetes.

00:05:05.055 --> 00:05:06.895
<v Speaker 0>Right? A lot of the tutorials out there

00:05:06.895 --> 00:05:08.175
<v Speaker 0>get you to the point where you can

00:05:08.175 --> 00:05:10.254
<v Speaker 0>keep control, apply an engine x deployment, and

00:05:10.254 --> 00:05:12.270
<v Speaker 0>then that's it. But there is so much

00:05:12.270 --> 00:05:14.030
<v Speaker 0>more that comes afterwards.

00:05:14.030 --> 00:05:16.030
<v Speaker 0>And it's good that we have resources now

00:05:16.030 --> 00:05:17.229
<v Speaker 0>that are starting to fill in the gaps

00:05:17.229 --> 00:05:18.990
<v Speaker 0>and and actually educate people on what they

00:05:18.990 --> 00:05:20.590
<v Speaker 0>need to know and to get them on

00:05:20.590 --> 00:05:21.389
<v Speaker 0>the right path.

00:05:22.030 --> 00:05:24.205
<v Speaker 1>One of the interesting things about the book,

00:05:24.205 --> 00:05:25.485
<v Speaker 1>and I guess that the main reason why

00:05:25.485 --> 00:05:26.845
<v Speaker 1>I decided to write it in the first

00:05:26.845 --> 00:05:29.565
<v Speaker 1>place, was that when you look into the

00:05:29.565 --> 00:05:32.045
<v Speaker 1>CNCF landscape, right, like, are tons of projects

00:05:32.045 --> 00:05:34.525
<v Speaker 1>built on top of the of the Kubernetes

00:05:34.525 --> 00:05:37.259
<v Speaker 1>APIs. Right? But they are all built and

00:05:37.259 --> 00:05:40.220
<v Speaker 1>designed in different ways for different purposes. So

00:05:40.220 --> 00:05:43.020
<v Speaker 1>getting them to work together sometimes and at

00:05:43.020 --> 00:05:44.860
<v Speaker 1>least two years ago wasn't that easy as

00:05:44.860 --> 00:05:46.780
<v Speaker 1>it it is today. So for me, it

00:05:46.780 --> 00:05:49.099
<v Speaker 1>was kinda like this whole exercise of making

00:05:49.099 --> 00:05:50.860
<v Speaker 1>sure that I can create an example

00:05:51.634 --> 00:05:53.315
<v Speaker 1>that can actually highlight,

00:05:53.315 --> 00:05:55.235
<v Speaker 1>you know, 20 different projects

00:05:55.315 --> 00:05:57.475
<v Speaker 1>and then see how each project is bringing

00:05:57.475 --> 00:06:00.195
<v Speaker 1>something to the table and also understanding the

00:06:00.195 --> 00:06:02.354
<v Speaker 1>gaps that, you know, when you combine two

00:06:02.354 --> 00:06:05.315
<v Speaker 1>or three projects together, kinda start popping up,

00:06:05.315 --> 00:06:06.755
<v Speaker 1>and you will need to sort out yourself.

00:06:08.090 --> 00:06:09.450
<v Speaker 0>Sweet. Awesome.

00:06:09.770 --> 00:06:11.690
<v Speaker 0>Alright. Let's move on to the topic at

00:06:11.690 --> 00:06:14.810
<v Speaker 0>hand then, Dapr. Can you give us the

00:06:15.530 --> 00:06:17.770
<v Speaker 0>thirty to sixty second pitch? What is Dapr

00:06:17.770 --> 00:06:19.130
<v Speaker 0>and why should people stay tuned?

00:06:20.295 --> 00:06:23.495
<v Speaker 1>Yeah. So Dapr is a CNCF project. It

00:06:23.495 --> 00:06:26.055
<v Speaker 1>was donated that's a very good question. When

00:06:26.055 --> 00:06:28.695
<v Speaker 1>exactly? I don't remember the date. But but

00:06:28.695 --> 00:06:30.375
<v Speaker 1>it's a it's a pretty mature project. Like,

00:06:30.375 --> 00:06:32.615
<v Speaker 1>it has it was created by Microsoft in

00:06:32.615 --> 00:06:33.415
<v Speaker 1>2019.

00:06:34.330 --> 00:06:34.810
<v Speaker 1>And,

00:06:35.130 --> 00:06:37.130
<v Speaker 1>basically, the main purpose of the project is

00:06:37.130 --> 00:06:39.050
<v Speaker 1>to allow people to

00:06:39.289 --> 00:06:41.690
<v Speaker 1>have kinda like a, like, an application level

00:06:41.690 --> 00:06:42.570
<v Speaker 1>API

00:06:42.650 --> 00:06:45.770
<v Speaker 1>that enable teams to interact with infrastructure without

00:06:45.770 --> 00:06:48.410
<v Speaker 1>knowing where that infrastructure is or what that

00:06:48.410 --> 00:06:51.205
<v Speaker 1>infrastructure is. The idea here is to provide

00:06:51.205 --> 00:06:54.485
<v Speaker 1>developers APIs that they can use and enable

00:06:54.485 --> 00:06:57.205
<v Speaker 1>platform teams to configure how these APIs are

00:06:57.205 --> 00:06:58.885
<v Speaker 1>implemented in different environments,

00:06:59.044 --> 00:07:00.724
<v Speaker 1>but at the same time providing kinda like

00:07:00.724 --> 00:07:02.565
<v Speaker 1>a like a seamless experience

00:07:02.880 --> 00:07:05.520
<v Speaker 1>across environments. Right? So you can have different

00:07:05.520 --> 00:07:08.560
<v Speaker 1>environments configured with different infrastructure in different completely

00:07:08.560 --> 00:07:10.960
<v Speaker 1>different ways, in completely different cloud providers,

00:07:11.200 --> 00:07:13.680
<v Speaker 1>but the application development experience is the same

00:07:13.680 --> 00:07:15.840
<v Speaker 1>because the APIs remain stable.

00:07:18.505 --> 00:07:20.505
<v Speaker 1>In order to in order to get that

00:07:20.505 --> 00:07:22.105
<v Speaker 1>working Kubernetes, there are tons of things that

00:07:22.105 --> 00:07:23.945
<v Speaker 1>needs to happen, and there are tons of

00:07:23.945 --> 00:07:26.185
<v Speaker 1>components and building blocks that the Dapr project

00:07:26.185 --> 00:07:28.505
<v Speaker 1>provides. And I guess that we can explore

00:07:28.505 --> 00:07:31.180
<v Speaker 1>with that side as well. Yeah. I mean,

00:07:31.580 --> 00:07:33.500
<v Speaker 0>just that paragraph that you gave us there.

00:07:33.500 --> 00:07:35.340
<v Speaker 0>I mean, that's no easy mission. Right? Trying

00:07:35.340 --> 00:07:36.940
<v Speaker 0>to be able to build applications in this

00:07:36.940 --> 00:07:39.100
<v Speaker 0>way, make them as portable as, you know,

00:07:39.100 --> 00:07:41.020
<v Speaker 0>what we have all really like from our

00:07:41.020 --> 00:07:43.275
<v Speaker 0>from our stack. But as you said, we're

00:07:43.275 --> 00:07:45.675
<v Speaker 0>going to explore Dapr hands on and see

00:07:45.675 --> 00:07:47.355
<v Speaker 0>where all the components are, how they work

00:07:47.355 --> 00:07:49.995
<v Speaker 0>together. And what I'm really excited about is

00:07:49.995 --> 00:07:53.275
<v Speaker 0>just can we show people a better developer

00:07:53.275 --> 00:07:56.155
<v Speaker 0>experience for bells in these type missions, which

00:07:56.155 --> 00:07:58.160
<v Speaker 0>are very tricky. Right? So

00:07:58.960 --> 00:08:00.720
<v Speaker 1>Yeah. You need to you need to add

00:08:00.720 --> 00:08:02.080
<v Speaker 1>on top of that that because we are

00:08:02.080 --> 00:08:04.560
<v Speaker 1>focused on APIs, the the entire experience is

00:08:04.560 --> 00:08:06.080
<v Speaker 1>is polyglot in a way.

00:08:06.800 --> 00:08:09.360
<v Speaker 1>The the idea that, like, there is no

00:08:09.520 --> 00:08:10.720
<v Speaker 1>language dependency

00:08:11.055 --> 00:08:13.375
<v Speaker 1>coming into into the the space. Right? Like,

00:08:13.375 --> 00:08:15.134
<v Speaker 1>the idea is that from any technology stack

00:08:15.134 --> 00:08:16.895
<v Speaker 1>that you're using, you should be able to

00:08:16.895 --> 00:08:18.335
<v Speaker 1>consume these APIs,

00:08:18.895 --> 00:08:20.735
<v Speaker 1>like, by just using, like, normal, you know,

00:08:20.735 --> 00:08:21.775
<v Speaker 1>language tools.

00:08:21.935 --> 00:08:24.030
<v Speaker 1>And and I feel that's pretty important, and,

00:08:24.030 --> 00:08:25.390
<v Speaker 1>also, it makes the mission a little bit

00:08:25.390 --> 00:08:27.310
<v Speaker 1>more complicated because now you are dealing with

00:08:27.310 --> 00:08:30.190
<v Speaker 1>tons of different technologies that do things in

00:08:30.190 --> 00:08:32.830
<v Speaker 1>slightly different ways, and they come with different

00:08:32.830 --> 00:08:35.710
<v Speaker 1>developer experiences and different ex you know, developer

00:08:35.710 --> 00:08:37.470
<v Speaker 1>workflows as well that you need to accommodate.

00:08:38.945 --> 00:08:40.305
<v Speaker 0>Alright. Awesome.

00:08:40.625 --> 00:08:42.705
<v Speaker 0>Okay. I'm gonna share my screen and we're

00:08:42.705 --> 00:08:44.465
<v Speaker 0>gonna get started with the hands on component.

00:08:44.465 --> 00:08:45.745
<v Speaker 0>And before I do that, I'll just say

00:08:45.745 --> 00:08:47.585
<v Speaker 0>hi to two familiar faces. John Luca and

00:08:47.585 --> 00:08:50.145
<v Speaker 0>Marino, saying hi in the chat. Hey. Nice

00:08:50.145 --> 00:08:51.025
<v Speaker 0>to see you. Hey, folks.

00:08:52.770 --> 00:08:55.250
<v Speaker 0>Alright. Let's see. I have the correct screen

00:08:55.250 --> 00:08:57.330
<v Speaker 0>shared which is always a good start.

00:08:57.810 --> 00:08:59.730
<v Speaker 0>Here we have the Dapr website.

00:08:59.810 --> 00:09:02.690
<v Speaker 0>You can find that at dapr.io.

00:09:02.930 --> 00:09:05.250
<v Speaker 0>We're gonna dive straight into the documentation.

00:09:06.485 --> 00:09:08.485
<v Speaker 0>And I'm assuming we'll install,

00:09:08.644 --> 00:09:10.404
<v Speaker 0>you know, Dapr itself.

00:09:10.485 --> 00:09:12.805
<v Speaker 0>I haven't done anything in advance. Everything that

00:09:12.805 --> 00:09:14.165
<v Speaker 0>you see here is everything that you will

00:09:14.165 --> 00:09:15.445
<v Speaker 0>need to do to be able to replicate

00:09:15.445 --> 00:09:17.925
<v Speaker 0>this at home or work forever.

00:09:18.485 --> 00:09:21.680
<v Speaker 1>So I'll click on get started. We're gonna

00:09:21.680 --> 00:09:23.120
<v Speaker 0>grab the CLI.

00:09:24.080 --> 00:09:25.680
<v Speaker 0>We'll do Yeah.

00:09:26.320 --> 00:09:28.320
<v Speaker 1>So let me let me try to explain

00:09:28.320 --> 00:09:30.400
<v Speaker 1>a little bit, like, the getting a starter

00:09:30.400 --> 00:09:32.400
<v Speaker 1>experience. Right? Like, you can download the CLI.

00:09:32.400 --> 00:09:33.440
<v Speaker 1>The CLI will

00:09:33.795 --> 00:09:37.075
<v Speaker 1>basically help you with some developer workflows initially

00:09:37.075 --> 00:09:40.274
<v Speaker 1>just to set up different environments and different

00:09:40.355 --> 00:09:42.355
<v Speaker 1>the tools in different ways depending on what

00:09:42.355 --> 00:09:43.475
<v Speaker 1>you are trying to achieve.

00:09:44.115 --> 00:09:46.355
<v Speaker 1>In general, for developing applications,

00:09:46.940 --> 00:09:49.339
<v Speaker 1>again, I don't think that having the CLI

00:09:49.339 --> 00:09:51.420
<v Speaker 1>is a requirement, but just go go go

00:09:51.420 --> 00:09:53.019
<v Speaker 1>ahead, please. And if you can install it,

00:09:53.019 --> 00:09:54.779
<v Speaker 1>like, we can go through the getting started

00:09:54.779 --> 00:09:55.500
<v Speaker 1>guys.

00:09:56.940 --> 00:09:57.820
<v Speaker 0>Alright.

00:09:58.620 --> 00:10:00.300
<v Speaker 0>I just assumed that we needed it, but

00:10:00.300 --> 00:10:01.660
<v Speaker 0>it's good to know that we don't. Oh,

00:10:01.660 --> 00:10:03.715
<v Speaker 0>I'm late. I'm on late mode. Let me

00:10:04.915 --> 00:10:06.915
<v Speaker 0>I don't wanna blind everyone at home. So

00:10:08.435 --> 00:10:10.675
<v Speaker 1>I kinda I kinda love the, like, the,

00:10:10.675 --> 00:10:13.075
<v Speaker 1>like, the CLI experience in general.

00:10:13.475 --> 00:10:15.395
<v Speaker 1>But when I think about, like, going to

00:10:15.395 --> 00:10:18.490
<v Speaker 1>different developers using different technologies, like, Node. Js

00:10:18.490 --> 00:10:22.250
<v Speaker 1>or Java or or Rust, right, like, completely

00:10:22.250 --> 00:10:23.690
<v Speaker 1>different text stacks,

00:10:24.649 --> 00:10:26.490
<v Speaker 1>I I always think that adding a new

00:10:26.490 --> 00:10:27.450
<v Speaker 1>CLI

00:10:27.850 --> 00:10:30.170
<v Speaker 1>will introduce something that that developer will need

00:10:30.170 --> 00:10:33.125
<v Speaker 1>to learn. Right? Each CLI will come with

00:10:33.125 --> 00:10:35.045
<v Speaker 1>kinda like a different workflow, a different set

00:10:35.045 --> 00:10:36.485
<v Speaker 1>of steps that you need to execute to

00:10:36.485 --> 00:10:38.165
<v Speaker 1>achieve something specifically,

00:10:38.165 --> 00:10:40.645
<v Speaker 1>and that, again, will push the developer to

00:10:40.645 --> 00:10:42.485
<v Speaker 1>stop doing what they are doing and start

00:10:42.485 --> 00:10:44.965
<v Speaker 1>learning that specific CLI and all the arguments

00:10:44.965 --> 00:10:45.845
<v Speaker 1>and all the parameters.

00:10:46.310 --> 00:10:48.709
<v Speaker 1>So I tend to go without the CLI,

00:10:48.709 --> 00:10:50.149
<v Speaker 1>but you will see that in the in

00:10:50.149 --> 00:10:53.110
<v Speaker 1>the getting started guides, most of the exercises

00:10:53.110 --> 00:10:54.310
<v Speaker 1>of will

00:10:54.470 --> 00:10:56.950
<v Speaker 1>use that CLI to bootstrap Dapr itself.

00:10:58.955 --> 00:10:59.675
<v Speaker 0>Nice.

00:10:59.835 --> 00:11:02.795
<v Speaker 0>We're in a wonderful position where I decided

00:11:02.795 --> 00:11:04.635
<v Speaker 0>to try out new shell, and I don't

00:11:04.635 --> 00:11:07.675
<v Speaker 0>have any of my paths configured properly whatsoever.

00:11:07.995 --> 00:11:08.555
<v Speaker 0>Nice.

00:11:10.475 --> 00:11:12.875
<v Speaker 0>But I think we can

00:11:14.470 --> 00:11:16.870
<v Speaker 0>do. Would that work? Let's see.

00:11:17.990 --> 00:11:19.430
<v Speaker 0>I think so.

00:11:19.990 --> 00:11:20.630
<v Speaker 0>Yeah.

00:11:21.589 --> 00:11:22.390
<v Speaker 1>Alright.

00:11:22.390 --> 00:11:24.630
<v Speaker 0>Well, I've got oh, no. It didn't work.

00:11:29.055 --> 00:11:30.654
<v Speaker 0>Oh, I appended it, but it didn't save

00:11:30.654 --> 00:11:32.495
<v Speaker 0>it. Alright. Okay. So e n v dot

00:11:32.495 --> 00:11:33.855
<v Speaker 0>path equals.

00:11:35.615 --> 00:11:36.415
<v Speaker 1>Alright.

00:11:36.895 --> 00:11:39.774
<v Speaker 0>Now I've blown away everything else. That's that's

00:11:39.855 --> 00:11:41.950
<v Speaker 1>yeah. That's not the the best. But you

00:11:41.950 --> 00:11:43.630
<v Speaker 1>have it there. Alright? Like, you printed it

00:11:43.630 --> 00:11:45.470
<v Speaker 1>before. So Alright. Today is not the day

00:11:45.470 --> 00:11:47.630
<v Speaker 0>for me to be experimenting with new shells.

00:11:52.110 --> 00:11:53.150
<v Speaker 1>CSA cheese?

00:11:55.390 --> 00:11:56.990
<v Speaker 0>What is it? Homebrew? It's not.

00:11:58.105 --> 00:12:00.025
<v Speaker 1>I have no idea what homebrew is. Let

00:12:00.025 --> 00:12:01.625
<v Speaker 1>me check. I can check my No. It's

00:12:01.625 --> 00:12:04.345
<v Speaker 0>okay. Let me You will find it. Of

00:12:04.345 --> 00:12:06.505
<v Speaker 0>homebrew. Ben, yeah. Okay. So we wanna There

00:12:06.505 --> 00:12:06.985
<v Speaker 1>you go.

00:12:09.945 --> 00:12:11.785
<v Speaker 0>Brew. Better. Dapr.

00:12:12.250 --> 00:12:13.610
<v Speaker 0>Better, cool.

00:12:14.970 --> 00:12:17.130
<v Speaker 1>There you go. And one of the things

00:12:17.130 --> 00:12:19.370
<v Speaker 0>I did is he's completely irrelevant. Right? Because

00:12:19.370 --> 00:12:21.690
<v Speaker 0>I was trying to convince myself to switch

00:12:21.690 --> 00:12:23.290
<v Speaker 0>to a new shell. I had to remove

00:12:23.290 --> 00:12:25.325
<v Speaker 0>the path of least resistance, which is when

00:12:25.325 --> 00:12:26.925
<v Speaker 0>it frustrates me just jump back to said

00:12:26.925 --> 00:12:29.085
<v Speaker 0>shell. I knew all of my said shell

00:12:29.085 --> 00:12:31.085
<v Speaker 0>configuration. So it's super vanilla.

00:12:32.765 --> 00:12:33.965
<v Speaker 0>But we're not gonna. Alright.

00:12:35.565 --> 00:12:36.605
<v Speaker 0>So we have to see a live. We

00:12:36.605 --> 00:12:38.845
<v Speaker 0>didn't particularly need it, but that's alright. And

00:12:38.845 --> 00:12:41.220
<v Speaker 0>I'm gonna go back to the documentation where

00:12:41.220 --> 00:12:43.779
<v Speaker 0>we're going to click on quick start, and

00:12:43.779 --> 00:12:46.019
<v Speaker 0>we're gonna work through one of these today.

00:12:46.019 --> 00:12:47.220
<v Speaker 0>And then I think you're going to show

00:12:47.220 --> 00:12:48.740
<v Speaker 0>us a couple of extra things on top

00:12:48.740 --> 00:12:50.820
<v Speaker 0>of that afterwards. Yeah. Yeah.

00:12:51.300 --> 00:12:52.660
<v Speaker 1>Yeah. I think I think that we can

00:12:52.660 --> 00:12:54.500
<v Speaker 1>do that. And it's kinda like important to

00:12:54.500 --> 00:12:56.180
<v Speaker 1>see that what you will see there in

00:12:56.180 --> 00:12:58.315
<v Speaker 1>the quick starts basically are, you know, the

00:12:58.315 --> 00:13:00.795
<v Speaker 1>Dapr building blocks, something that the Dapr project

00:13:00.795 --> 00:13:02.795
<v Speaker 1>called building blocks. And each of these building

00:13:02.795 --> 00:13:05.195
<v Speaker 1>blocks is basically exposing a different set of

00:13:05.195 --> 00:13:08.235
<v Speaker 1>APIs to do different things. You can see

00:13:08.235 --> 00:13:09.835
<v Speaker 1>the first one that it's listed there, it's

00:13:09.835 --> 00:13:12.440
<v Speaker 1>called publish and subscribe. Right? That will give

00:13:12.440 --> 00:13:15.880
<v Speaker 1>you APIs to emit events and consume events.

00:13:15.880 --> 00:13:18.120
<v Speaker 1>Then you have the service invocation API as

00:13:18.120 --> 00:13:20.600
<v Speaker 1>well that will allow allow you to do

00:13:21.000 --> 00:13:24.200
<v Speaker 1>more resilient service to service communications and service

00:13:24.200 --> 00:13:25.080
<v Speaker 1>discovery as well.

00:13:26.105 --> 00:13:28.505
<v Speaker 1>And the management APIs will give you, like,

00:13:28.505 --> 00:13:31.065
<v Speaker 1>a key value store API to store keys

00:13:31.065 --> 00:13:33.705
<v Speaker 1>and values, just going through an API and

00:13:33.705 --> 00:13:35.865
<v Speaker 1>not connecting to a database or or, like,

00:13:35.865 --> 00:13:37.065
<v Speaker 1>a Redis or something like that.

00:13:37.839 --> 00:13:39.360
<v Speaker 1>And then there are a bunch of others,

00:13:39.360 --> 00:13:41.279
<v Speaker 1>and I would like to say that workflows

00:13:41.279 --> 00:13:43.200
<v Speaker 1>is the one that gets me, really, really

00:13:43.200 --> 00:13:45.360
<v Speaker 1>excited. It's it's something that it has been

00:13:45.440 --> 00:13:48.720
<v Speaker 1>released, like, pretty off like, pretty recently, and

00:13:48.720 --> 00:13:50.880
<v Speaker 1>it's getting better and better. So I'm really

00:13:50.880 --> 00:13:53.120
<v Speaker 1>keen to see how how that evolves in

00:13:53.120 --> 00:13:53.440
<v Speaker 1>the future.

00:13:54.935 --> 00:13:56.935
<v Speaker 1>But I think that for for

00:13:57.495 --> 00:13:59.575
<v Speaker 1>this and to demonstrate what kinda like what

00:13:59.575 --> 00:14:01.015
<v Speaker 1>Dapr is about, I think that we can

00:14:01.015 --> 00:14:02.775
<v Speaker 1>take a look at the state management APIs.

00:14:02.775 --> 00:14:05.015
<v Speaker 1>That's probably the the simplest to get.

00:14:06.149 --> 00:14:08.709
<v Speaker 0>Yeah. I mean, workflows is definitely interesting. Right?

00:14:08.709 --> 00:14:10.950
<v Speaker 0>I'm seeing long running Yeah. Powerful and stateful

00:14:10.950 --> 00:14:13.110
<v Speaker 0>applications. This is this always puts me back

00:14:13.110 --> 00:14:15.670
<v Speaker 0>to people trying to make temporal easier, which

00:14:15.670 --> 00:14:17.269
<v Speaker 0>is such a noble mission. We need to

00:14:17.269 --> 00:14:18.470
<v Speaker 0>make durable execution

00:14:18.665 --> 00:14:21.145
<v Speaker 0>easier for people to host and operate themselves.

00:14:21.145 --> 00:14:23.465
<v Speaker 0>But I love workflows, but you're right. Let's

00:14:23.465 --> 00:14:24.985
<v Speaker 0>let's keep it chill today and come back

00:14:24.985 --> 00:14:26.025
<v Speaker 0>to that. So so

00:14:26.505 --> 00:14:27.945
<v Speaker 1>so this is the thing. Right? Like, because

00:14:27.945 --> 00:14:29.625
<v Speaker 1>these are, like, components.

00:14:30.185 --> 00:14:32.130
<v Speaker 1>What's happening with the Dapr project is that

00:14:32.130 --> 00:14:33.250
<v Speaker 1>you will see that we have a lot

00:14:33.250 --> 00:14:34.930
<v Speaker 1>of different component APIs,

00:14:35.170 --> 00:14:37.570
<v Speaker 1>and then something like the workflow API and

00:14:37.570 --> 00:14:40.050
<v Speaker 1>the workflow functionality basically builds on top of

00:14:40.050 --> 00:14:41.010
<v Speaker 1>all the components.

00:14:41.410 --> 00:14:43.330
<v Speaker 1>Right? Like, we are starting to construct more

00:14:43.330 --> 00:14:45.970
<v Speaker 1>higher level components that are built and relying

00:14:45.970 --> 00:14:46.930
<v Speaker 1>on lower level things.

00:14:48.245 --> 00:14:49.525
<v Speaker 0>Alright. Let's

00:14:49.845 --> 00:14:51.685
<v Speaker 0>start off with state management. I always say

00:14:51.685 --> 00:14:53.525
<v Speaker 0>on this show or in fact, in life

00:14:53.525 --> 00:14:55.605
<v Speaker 0>conferences anywhere that I am. Right? If your

00:14:55.605 --> 00:14:57.525
<v Speaker 0>application doesn't have state, you're not making any

00:14:57.525 --> 00:14:59.125
<v Speaker 0>money. So let's cover state management.

00:15:00.480 --> 00:15:02.240
<v Speaker 1>And I guess that that that's a very

00:15:02.240 --> 00:15:03.760
<v Speaker 1>good point. Right? Like, if you think about

00:15:03.760 --> 00:15:04.560
<v Speaker 1>applications,

00:15:04.800 --> 00:15:07.040
<v Speaker 1>80% of the applications will be doing kinda,

00:15:07.040 --> 00:15:09.280
<v Speaker 1>like, reading data and storing data somewhere else.

00:15:09.280 --> 00:15:10.880
<v Speaker 1>Right? Like, they are processing data and then

00:15:10.880 --> 00:15:12.665
<v Speaker 1>just need to store it somewhere. And I

00:15:12.665 --> 00:15:14.584
<v Speaker 1>think that this is what, the state management

00:15:14.584 --> 00:15:16.584
<v Speaker 1>API is all about. You can see there

00:15:16.584 --> 00:15:18.185
<v Speaker 1>in the in the example in the graph.

00:15:18.185 --> 00:15:20.105
<v Speaker 1>Right? You see that you have your application,

00:15:20.105 --> 00:15:22.024
<v Speaker 1>in this case, like an order processor, and

00:15:22.024 --> 00:15:23.464
<v Speaker 1>then you have Dapr in the middle, which

00:15:23.464 --> 00:15:25.560
<v Speaker 1>is the one providing the APIs. And then

00:15:25.560 --> 00:15:27.800
<v Speaker 1>you have a backing implementation in this case.

00:15:27.800 --> 00:15:29.560
<v Speaker 1>Redis is an example, but there are a

00:15:29.560 --> 00:15:32.360
<v Speaker 1>bunch of different implementations for the estate management

00:15:32.360 --> 00:15:33.160
<v Speaker 1>APIs.

00:15:34.200 --> 00:15:35.240
<v Speaker 0>Alright. Nice.

00:15:37.235 --> 00:15:38.995
<v Speaker 0>Just because I forgot to mention to this

00:15:38.995 --> 00:15:40.995
<v Speaker 0>to you before we went live. If you

00:15:40.995 --> 00:15:43.875
<v Speaker 0>right click on the screen where the video

00:15:43.875 --> 00:15:45.635
<v Speaker 0>is and say show controls, it will allow

00:15:45.635 --> 00:15:47.075
<v Speaker 0>you to fill screen it. Because I know

00:15:47.075 --> 00:15:48.435
<v Speaker 0>that once I get my terminal and code

00:15:48.435 --> 00:15:49.875
<v Speaker 0>up, might want it slightly bigger.

00:15:50.210 --> 00:15:52.690
<v Speaker 0>It's just Oh, interesting. I don't know why

00:15:52.690 --> 00:15:55.250
<v Speaker 0>that Right click on the the the video,

00:15:55.330 --> 00:15:57.250
<v Speaker 0>like, where my browser is and say show

00:15:57.250 --> 00:15:58.050
<v Speaker 0>controls.

00:15:58.610 --> 00:15:59.170
<v Speaker 0>No?

00:16:00.450 --> 00:16:01.730
<v Speaker 1>No. You don't see it here. Oh, show

00:16:01.730 --> 00:16:03.250
<v Speaker 1>all controls. Yes. Yes. There you go. Now

00:16:03.250 --> 00:16:04.530
<v Speaker 0>you could fill screen that. I know. Which

00:16:04.530 --> 00:16:05.410
<v Speaker 0>makes There you go.

00:16:07.144 --> 00:16:08.904
<v Speaker 1>Thank you very much for that. We went

00:16:08.904 --> 00:16:10.345
<v Speaker 0>through. And then when I show you a

00:16:10.345 --> 00:16:11.545
<v Speaker 0>code, you're gonna be like, I have no

00:16:11.545 --> 00:16:12.665
<v Speaker 0>idea. So

00:16:12.985 --> 00:16:15.144
<v Speaker 1>Yeah. Yeah. Yeah. Was getting closer to my

00:16:15.144 --> 00:16:16.824
<v Speaker 1>screen and thinking, okay. I think that I

00:16:16.824 --> 00:16:18.904
<v Speaker 1>can read, but, yeah, I might need some

00:16:18.904 --> 00:16:19.545
<v Speaker 1>glasses.

00:16:20.425 --> 00:16:20.824
<v Speaker 0>Alright.

00:16:22.490 --> 00:16:25.050
<v Speaker 0>Do you have a preferred language as these?

00:16:25.050 --> 00:16:28.010
<v Speaker 0>I'm gonna suggest TypeScript or Go, or JavaScript

00:16:28.010 --> 00:16:29.690
<v Speaker 0>or Go. Which one would you prefer?

00:16:31.690 --> 00:16:33.610
<v Speaker 1>How how comfortable are you feeling with Go?

00:16:34.105 --> 00:16:35.945
<v Speaker 0>Yeah. I'm I'm comfortable with Go. Let's go

00:16:35.945 --> 00:16:38.025
<v Speaker 0>with Go. Let's let's let's let's do it

00:16:38.025 --> 00:16:39.545
<v Speaker 1>with JavaScript, which is something that I feel

00:16:39.545 --> 00:16:42.105
<v Speaker 1>very uncomfortable with. So let's let's do that.

00:16:44.025 --> 00:16:44.825
<v Speaker 0>Alright. Well,

00:16:46.440 --> 00:16:48.520
<v Speaker 0>we're cloning it and it isn't all that's

00:16:48.520 --> 00:16:50.360
<v Speaker 0>a JavaScript version of it. Right. Okay. Cool.

00:16:50.360 --> 00:16:52.120
<v Speaker 0>Got it. Yeah. Let's let's call it a

00:16:52.120 --> 00:16:53.640
<v Speaker 0>quick start then. So,

00:16:56.120 --> 00:16:57.560
<v Speaker 0>we start and

00:16:57.720 --> 00:16:59.640
<v Speaker 0>then we're gonna see the end to state

00:16:59.640 --> 00:17:01.800
<v Speaker 0>management JavaScript

00:17:01.305 --> 00:17:02.345
<v Speaker 0>So forth.

00:17:03.225 --> 00:17:05.385
<v Speaker 0>Mhmm. And then we're just gonna do Dapr

00:17:05.385 --> 00:17:06.024
<v Speaker 0>run.

00:17:06.345 --> 00:17:07.065
<v Speaker 0>Alright.

00:17:07.385 --> 00:17:08.505
<v Speaker 0>I trust you.

00:17:10.425 --> 00:17:12.105
<v Speaker 0>Going to the quick search first.

00:17:16.210 --> 00:17:17.169
<v Speaker 0>There we go.

00:17:17.890 --> 00:17:19.650
<v Speaker 0>I don't have any of my things. This

00:17:19.650 --> 00:17:21.569
<v Speaker 0>is gonna be so much fun. Alright.

00:17:23.170 --> 00:17:23.809
<v Speaker 0>So

00:17:25.250 --> 00:17:27.330
<v Speaker 0>this is interesting. Right? Even before I run

00:17:27.330 --> 00:17:27.890
<v Speaker 0>this command,

00:17:28.454 --> 00:17:30.695
<v Speaker 0>I ran the LS because I assumed

00:17:31.414 --> 00:17:33.575
<v Speaker 0>there was gonna be some sort of Dapr

00:17:33.575 --> 00:17:35.335
<v Speaker 0>file that told it what to do.

00:17:35.735 --> 00:17:37.015
<v Speaker 0>And there's not Let's take a look at

00:17:37.015 --> 00:17:38.854
<v Speaker 1>the let's take a look at the

00:17:39.414 --> 00:17:40.615
<v Speaker 1>instructions again.

00:17:42.760 --> 00:17:45.880
<v Speaker 0>It just says run That per yeah. Go

00:17:45.880 --> 00:17:46.600
<v Speaker 1>for it.

00:17:48.120 --> 00:17:48.999
<v Speaker 0>No.

00:17:49.559 --> 00:17:50.440
<v Speaker 0>Is it just gonna

00:17:51.799 --> 00:17:55.720
<v Speaker 1>Just to Ah, okay. Alright. Okay. Yeah. It's

00:17:55.720 --> 00:17:55.960
<v Speaker 1>there.

00:17:57.555 --> 00:17:59.635
<v Speaker 1>No. That's asking you for a file. Right?

00:18:03.795 --> 00:18:05.555
<v Speaker 1>Just do Dapr run. Let's see.

00:18:09.635 --> 00:18:11.475
<v Speaker 1>Do you have a Docker running?

00:18:13.160 --> 00:18:14.200
<v Speaker 0>I do.

00:18:15.880 --> 00:18:16.600
<v Speaker 1>Yep.

00:18:16.760 --> 00:18:17.879
<v Speaker 1>It is there.

00:18:19.320 --> 00:18:20.119
<v Speaker 1>Interesting.

00:18:20.679 --> 00:18:23.000
<v Speaker 0>Do we need do Dapr in it? Dapr

00:18:23.000 --> 00:18:24.840
<v Speaker 1>in it, maybe. Yeah. Yeah. We probably skipped

00:18:24.840 --> 00:18:27.160
<v Speaker 0>a step on getting started gate, didn't we?

00:18:27.255 --> 00:18:29.095
<v Speaker 0>Yeah. And it happened locally.

00:18:29.255 --> 00:18:29.415
<v Speaker 0>So

00:18:30.775 --> 00:18:33.895
<v Speaker 1>It's yep. Perfect. So that's gonna run, I

00:18:33.895 --> 00:18:34.534
<v Speaker 0>imagine,

00:18:34.855 --> 00:18:36.535
<v Speaker 0>some sort of a trigger. To create a

00:18:36.935 --> 00:18:38.935
<v Speaker 1>and that might create the file that you're

00:18:38.935 --> 00:18:40.375
<v Speaker 1>expecting to have there as well.

00:18:41.510 --> 00:18:43.190
<v Speaker 0>Well, no. Because well,

00:18:43.430 --> 00:18:45.270
<v Speaker 0>we'll see. Just do a less? I

00:18:45.750 --> 00:18:48.390
<v Speaker 1>don't know. I'm not so comfortable with the

00:18:48.390 --> 00:18:49.910
<v Speaker 1>with the CLI.

00:18:51.030 --> 00:18:52.870
<v Speaker 0>Alright. Well, we have something to run-in.

00:18:53.190 --> 00:18:54.230
<v Speaker 1>Yep. Yep. So

00:18:55.115 --> 00:18:56.795
<v Speaker 1>just to explain people. Right? Like, what you're

00:18:56.795 --> 00:18:58.475
<v Speaker 1>trying to do here. Right? What you're trying

00:18:58.475 --> 00:19:00.475
<v Speaker 1>to do is you're trying to so, basically,

00:19:00.475 --> 00:19:02.555
<v Speaker 1>just clone an application, and maybe we can

00:19:02.555 --> 00:19:04.395
<v Speaker 1>take a look at the application code first.

00:19:06.075 --> 00:19:06.475
<v Speaker 1>Yep.

00:19:09.680 --> 00:19:10.400
<v Speaker 1>Because

00:19:10.480 --> 00:19:12.320
<v Speaker 1>in order to understand why we are running

00:19:12.320 --> 00:19:13.440
<v Speaker 1>that Dapr

00:19:13.440 --> 00:19:15.680
<v Speaker 1>run, I think it's important to see kinda

00:19:15.680 --> 00:19:17.200
<v Speaker 1>what the application is doing anyway.

00:19:24.605 --> 00:19:25.565
<v Speaker 1>There

00:19:25.565 --> 00:19:26.284
<v Speaker 1>you go.

00:19:28.044 --> 00:19:29.244
<v Speaker 0>Alright. Perfect.

00:19:31.804 --> 00:19:33.485
<v Speaker 1>If you go to, like, the main function

00:19:33.485 --> 00:19:36.270
<v Speaker 1>there. Right? So you will see that, basically,

00:19:36.270 --> 00:19:37.070
<v Speaker 1>what it's doing is

00:19:37.630 --> 00:19:39.309
<v Speaker 1>first of all, it's creating a Dapr client.

00:19:39.309 --> 00:19:41.070
<v Speaker 1>Right? That basically means that there is an

00:19:41.070 --> 00:19:44.270
<v Speaker 1>SDK being imported in some way in JavaScript.

00:19:44.270 --> 00:19:44.749
<v Speaker 1>Right?

00:19:45.309 --> 00:19:47.630
<v Speaker 1>Because that's, like, a like, an object from

00:19:47.630 --> 00:19:48.989
<v Speaker 1>from the Dapr

00:19:48.990 --> 00:19:49.549
<v Speaker 1>library.

00:19:50.085 --> 00:19:50.884
<v Speaker 0>Yep.

00:19:51.605 --> 00:19:52.164
<v Speaker 1>So,

00:19:52.565 --> 00:19:54.005
<v Speaker 1>basically, if I guess, I'm I don't know

00:19:54.005 --> 00:19:55.605
<v Speaker 1>if you can see the import somewhere, but,

00:19:55.605 --> 00:19:57.684
<v Speaker 1>yeah, in package JSON, probably, you have that

00:19:57.684 --> 00:20:00.005
<v Speaker 1>kinda, like, dependency now. Like, you're including the

00:20:00.005 --> 00:20:02.164
<v Speaker 1>Dapr JavaScript SDK.

00:20:02.485 --> 00:20:02.965
<v Speaker 1>And

00:20:03.350 --> 00:20:04.630
<v Speaker 1>the first thing that you will do is

00:20:04.630 --> 00:20:06.070
<v Speaker 1>you are going to create a client,

00:20:06.390 --> 00:20:07.830
<v Speaker 1>and you can see that the parameters are

00:20:07.830 --> 00:20:09.830
<v Speaker 1>the host and the port, and then what

00:20:09.830 --> 00:20:11.430
<v Speaker 1>protocol do you want to use for for

00:20:11.430 --> 00:20:12.630
<v Speaker 1>that SDK, basically.

00:20:13.030 --> 00:20:15.670
<v Speaker 1>They are, like, usually, they're, like Dapr exposes

00:20:15.670 --> 00:20:18.070
<v Speaker 1>the APIs using gRPC and HTTP,

00:20:18.070 --> 00:20:19.815
<v Speaker 1>and then you can just choose which one

00:20:19.815 --> 00:20:20.455
<v Speaker 1>to use.

00:20:21.495 --> 00:20:23.335
<v Speaker 1>But then then as soon as you create

00:20:23.335 --> 00:20:25.015
<v Speaker 1>a client, basically, then you can just start

00:20:25.015 --> 00:20:27.415
<v Speaker 1>using the Dapr APIs. And in this case,

00:20:27.415 --> 00:20:28.535
<v Speaker 1>as we mentioned, we are going to be

00:20:28.535 --> 00:20:30.455
<v Speaker 1>looking into the state management APIs. That's why

00:20:30.455 --> 00:20:31.735
<v Speaker 1>in line 40,

00:20:32.149 --> 00:20:34.070
<v Speaker 1>you can see that we are doing client

00:20:34.070 --> 00:20:35.589
<v Speaker 1>state save,

00:20:36.149 --> 00:20:37.349
<v Speaker 1>basically. Right?

00:20:37.590 --> 00:20:40.309
<v Speaker 1>Where the state variable there is just a

00:20:40.309 --> 00:20:42.789
<v Speaker 1>JSON payload. It's just a JSON object. Right?

00:20:44.470 --> 00:20:44.789
<v Speaker 0>Okay.

00:20:45.765 --> 00:20:46.645
<v Speaker 0>Yeah. So

00:20:47.285 --> 00:20:48.005
<v Speaker 0>yep.

00:20:48.565 --> 00:20:50.165
<v Speaker 0>So Dapr

00:20:50.805 --> 00:20:52.165
<v Speaker 0>Mhmm. Basically,

00:20:52.165 --> 00:20:53.365
<v Speaker 0>I write my code

00:20:54.245 --> 00:20:55.445
<v Speaker 0>for my application. And

00:20:55.845 --> 00:20:57.765
<v Speaker 0>what Dapr does is give me

00:20:58.350 --> 00:21:00.590
<v Speaker 0>a client with a bunch of

00:21:01.150 --> 00:21:02.670
<v Speaker 0>integrations, one of them being a state store

00:21:02.670 --> 00:21:04.110
<v Speaker 0>here. So we have the ability to fetch

00:21:04.110 --> 00:21:05.149
<v Speaker 0>and save state.

00:21:05.390 --> 00:21:07.630
<v Speaker 0>And Mhmm. I'm assuming this works because I

00:21:07.630 --> 00:21:09.790
<v Speaker 0>saw in the dog logs here. Right? There's

00:21:09.790 --> 00:21:11.150
<v Speaker 0>a sidecar. So this is

00:21:11.855 --> 00:21:14.495
<v Speaker 0>putting my application into container, adding a safe

00:21:14.495 --> 00:21:15.135
<v Speaker 0>car,

00:21:15.455 --> 00:21:16.815
<v Speaker 0>or maybe it's not in a container right

00:21:16.815 --> 00:21:18.975
<v Speaker 0>now. I'm not even that sure. Exactly. We

00:21:18.975 --> 00:21:20.735
<v Speaker 0>have an application. We've got a Dapr sidecar

00:21:20.735 --> 00:21:22.335
<v Speaker 0>or something that the Dapr client also to

00:21:22.335 --> 00:21:23.775
<v Speaker 0>speak to which I'm assuming is just over

00:21:23.775 --> 00:21:25.375
<v Speaker 0>some sort of loopback or localhost

00:21:25.590 --> 00:21:27.510
<v Speaker 0>and it's proxying all the requests to state

00:21:27.510 --> 00:21:29.029
<v Speaker 0>storage somewhere else.

00:21:30.070 --> 00:21:31.910
<v Speaker 0>I'm pretty sure in the docs earlier on,

00:21:31.910 --> 00:21:33.910
<v Speaker 0>we saw Redis. So it's it's that what's

00:21:33.910 --> 00:21:35.269
<v Speaker 0>happening. Right?

00:21:35.350 --> 00:21:37.270
<v Speaker 1>That's what that's what happening. Right? Like, but

00:21:37.270 --> 00:21:38.950
<v Speaker 1>from your application point of view, you don't

00:21:38.950 --> 00:21:39.750
<v Speaker 1>have any Redis,

00:21:40.265 --> 00:21:42.425
<v Speaker 1>you know, dependency. Right? And you are not

00:21:42.425 --> 00:21:44.665
<v Speaker 1>even writing the code to connect to any

00:21:44.665 --> 00:21:46.505
<v Speaker 1>Redis database or anything. Right?

00:21:46.825 --> 00:21:48.825
<v Speaker 0>Yeah. So is it fair to say Dapr

00:21:48.825 --> 00:21:51.305
<v Speaker 0>is a set of abstractions on building applications

00:21:51.305 --> 00:21:52.905
<v Speaker 0>where you don't have to worry about state

00:21:52.905 --> 00:21:54.585
<v Speaker 0>or you don't have to worry about

00:21:55.020 --> 00:21:56.460
<v Speaker 0>workflows

00:21:56.940 --> 00:21:58.940
<v Speaker 0>and whatever else is on that list. Right?

00:21:58.940 --> 00:21:59.820
<v Speaker 0>PubSub.

00:21:59.820 --> 00:22:00.539
<v Speaker 0>Exactly.

00:22:02.620 --> 00:22:04.460
<v Speaker 1>Exactly. And I I think I think that

00:22:04.460 --> 00:22:06.700
<v Speaker 1>that's the idea. But, again, it's like trying

00:22:06.700 --> 00:22:06.860
<v Speaker 1>to

00:22:07.615 --> 00:22:10.414
<v Speaker 1>add this obstruction layer that will enable developers

00:22:10.414 --> 00:22:12.174
<v Speaker 1>just to code whatever they need to code

00:22:12.174 --> 00:22:13.134
<v Speaker 1>for their application.

00:22:14.174 --> 00:22:16.095
<v Speaker 1>Would they will let a different team to

00:22:16.095 --> 00:22:18.815
<v Speaker 1>worry about which components needs to be running

00:22:18.815 --> 00:22:20.735
<v Speaker 1>for these APS to have, you know, the

00:22:20.735 --> 00:22:22.174
<v Speaker 1>right backing implementations

00:22:22.580 --> 00:22:24.740
<v Speaker 1>and the right configurations and everything else that

00:22:24.740 --> 00:22:26.740
<v Speaker 1>they need for a production use case.

00:22:27.780 --> 00:22:32.020
<v Speaker 0>Now is what Dapr providing purely an abstraction,

00:22:32.020 --> 00:22:33.540
<v Speaker 0>or does it go a step further to

00:22:33.540 --> 00:22:36.660
<v Speaker 0>provide any sort of resiliency, redundancy, retry logic?

00:22:36.765 --> 00:22:38.765
<v Speaker 0>Like, what is that what is Dapr doing

00:22:38.765 --> 00:22:40.765
<v Speaker 0>when I say client save

00:22:40.925 --> 00:22:43.485
<v Speaker 0>this client state save? That's

00:22:43.485 --> 00:22:45.245
<v Speaker 1>a very that's a very good question. And,

00:22:45.245 --> 00:22:47.085
<v Speaker 1>yes, it's doing all that stuff as well.

00:22:47.085 --> 00:22:49.325
<v Speaker 1>Right? Like, we are building all best practices

00:22:49.325 --> 00:22:50.525
<v Speaker 1>and resiliency

00:22:50.525 --> 00:22:51.325
<v Speaker 1>mechanisms

00:22:51.325 --> 00:22:52.365
<v Speaker 1>on top of these calls.

00:22:52.850 --> 00:22:54.930
<v Speaker 1>Because, again, you have a proxy now between

00:22:54.930 --> 00:22:55.890
<v Speaker 1>the application

00:22:56.130 --> 00:22:58.690
<v Speaker 1>and the infrastructure. You can implement all these

00:22:58.690 --> 00:23:01.010
<v Speaker 1>functionalities because it's the perfect place to do

00:23:01.010 --> 00:23:01.490
<v Speaker 1>so.

00:23:02.130 --> 00:23:05.170
<v Speaker 1>So now you have an abstraction to access

00:23:05.170 --> 00:23:07.250
<v Speaker 1>this this in this case, this state store,

00:23:07.250 --> 00:23:08.785
<v Speaker 1>like, that can be ready, so it can

00:23:08.785 --> 00:23:11.745
<v Speaker 1>be, you know, whatever cloud provider

00:23:11.825 --> 00:23:12.705
<v Speaker 1>supported

00:23:13.105 --> 00:23:15.265
<v Speaker 1>key value store is is is supported there.

00:23:15.265 --> 00:23:17.265
<v Speaker 1>Like, even you can just swap ready for

00:23:17.265 --> 00:23:20.545
<v Speaker 1>post Postgres or any other supported implementation.

00:23:21.390 --> 00:23:23.470
<v Speaker 1>And, yeah, and and then you have all

00:23:23.470 --> 00:23:26.909
<v Speaker 1>these other super nice features that come because,

00:23:26.910 --> 00:23:28.830
<v Speaker 1>you know, you you have, like, this proxy

00:23:28.830 --> 00:23:30.910
<v Speaker 1>in the middle. You have observability.

00:23:30.910 --> 00:23:32.110
<v Speaker 1>You have resiliency.

00:23:32.350 --> 00:23:34.350
<v Speaker 1>You have security, a bunch of other things

00:23:34.350 --> 00:23:36.985
<v Speaker 1>that you will always need to implement. And

00:23:36.985 --> 00:23:38.904
<v Speaker 1>most of the time, it's delegated to the

00:23:38.904 --> 00:23:40.985
<v Speaker 1>application code to do so. And in this

00:23:40.985 --> 00:23:42.745
<v Speaker 1>case, we are doing it at this proxy

00:23:42.745 --> 00:23:43.384
<v Speaker 1>level.

00:23:44.345 --> 00:23:44.984
<v Speaker 0>Okay.

00:23:45.225 --> 00:23:48.024
<v Speaker 0>We have a good question from Marino in

00:23:48.024 --> 00:23:49.960
<v Speaker 0>the chat. He wants to understand

00:23:50.280 --> 00:23:52.120
<v Speaker 0>the cross cutting concerns of a service mesh

00:23:52.120 --> 00:23:53.960
<v Speaker 0>and Dapr. Like, do we still need a

00:23:53.960 --> 00:23:55.640
<v Speaker 0>service mesh with Dapr? Can it work with

00:23:55.640 --> 00:23:57.720
<v Speaker 0>a service mesh, or do you lose do

00:23:57.720 --> 00:23:59.320
<v Speaker 0>you just not need one with Dapr? Like,

00:23:59.320 --> 00:24:00.840
<v Speaker 0>how do you see them working together or

00:24:00.840 --> 00:24:01.000
<v Speaker 0>not?

00:24:02.025 --> 00:24:04.825
<v Speaker 1>Yeah. So there is there is definitely some

00:24:04.825 --> 00:24:05.865
<v Speaker 1>overlapping

00:24:06.025 --> 00:24:07.065
<v Speaker 1>functionalities,

00:24:07.065 --> 00:24:09.305
<v Speaker 1>but I do tend to think that Dapr

00:24:09.305 --> 00:24:10.745
<v Speaker 1>adds this application

00:24:11.065 --> 00:24:14.025
<v Speaker 1>level concerns and these APIs that usually a

00:24:14.025 --> 00:24:15.385
<v Speaker 1>service mesh will not have. Right?

00:24:16.060 --> 00:24:18.380
<v Speaker 1>So service mesh and Dapr, I think, in

00:24:18.380 --> 00:24:20.860
<v Speaker 1>my opinion, are complementary tools that you can

00:24:20.860 --> 00:24:23.580
<v Speaker 1>definitely use together, and they will be providing

00:24:23.900 --> 00:24:26.060
<v Speaker 1>different things at different levels. For example, if

00:24:26.060 --> 00:24:28.300
<v Speaker 1>you think about the observability. Right? The serve

00:24:28.380 --> 00:24:31.100
<v Speaker 1>service mesh can provide all the networking observability,

00:24:31.100 --> 00:24:33.315
<v Speaker 1>like the low level stuff, and Dapr can

00:24:33.315 --> 00:24:35.075
<v Speaker 1>add on top of that all the application

00:24:35.075 --> 00:24:37.235
<v Speaker 1>level metrics. So for example, how many keys

00:24:37.235 --> 00:24:39.395
<v Speaker 1>are you storing per second, right, and all

00:24:39.395 --> 00:24:41.955
<v Speaker 1>these things. So, again, it's like it's complementary.

00:24:42.115 --> 00:24:46.035
<v Speaker 1>Dapr can do something around, like, networking observability

00:24:46.035 --> 00:24:48.530
<v Speaker 1>as well and, example, NTLS and all that

00:24:48.530 --> 00:24:49.890
<v Speaker 1>kind of stuff. But if you have a

00:24:49.890 --> 00:24:52.450
<v Speaker 1>tool that is dedicated specifically to that, this

00:24:52.450 --> 00:24:54.529
<v Speaker 1>will complement each other for sure.

00:24:55.330 --> 00:24:57.010
<v Speaker 0>Does I mean, because

00:24:57.250 --> 00:25:00.850
<v Speaker 0>okay. Let's answer one question first. Precursor to

00:25:00.850 --> 00:25:02.534
<v Speaker 0>my next question. Right? Yes. And then I

00:25:02.534 --> 00:25:04.054
<v Speaker 0>see your question, most will get over to

00:25:04.054 --> 00:25:05.414
<v Speaker 0>that in just a second.

00:25:07.095 --> 00:25:09.335
<v Speaker 0>Say someone watches us today and they're so

00:25:09.335 --> 00:25:11.335
<v Speaker 0>impressed by Dapr. They're like, okay, I want

00:25:11.335 --> 00:25:12.855
<v Speaker 0>to start doing this. I want to make

00:25:12.855 --> 00:25:14.054
<v Speaker 0>my life a little bit easier.

00:25:14.590 --> 00:25:18.029
<v Speaker 0>Now, they've got like most organizations,

00:25:18.029 --> 00:25:21.469
<v Speaker 0>most teams, they've probably got some existing infrastructure.

00:25:21.789 --> 00:25:23.629
<v Speaker 0>Now as the approach

00:25:23.950 --> 00:25:26.029
<v Speaker 0>that well, everything should be Dapr and go

00:25:26.029 --> 00:25:28.915
<v Speaker 0>over the Dapr sidecar or can I build

00:25:28.915 --> 00:25:30.995
<v Speaker 0>one or two services with Dapr and inject

00:25:30.995 --> 00:25:33.315
<v Speaker 0>that into existing application stacks?

00:25:34.115 --> 00:25:37.315
<v Speaker 1>Yes. %. Yes. So I would I this

00:25:37.315 --> 00:25:39.475
<v Speaker 1>is my personal opinion about the Dapr project.

00:25:39.475 --> 00:25:42.435
<v Speaker 1>Right? Like, they're providing generic APIs to do

00:25:42.435 --> 00:25:44.559
<v Speaker 1>different kind of, like, very specific behaviors, in

00:25:44.559 --> 00:25:46.960
<v Speaker 1>this case, saving and retrieving, you know, key

00:25:46.960 --> 00:25:48.080
<v Speaker 1>values in this case.

00:25:48.799 --> 00:25:51.519
<v Speaker 1>That basically means that because we are we

00:25:51.519 --> 00:25:53.519
<v Speaker 1>have an obstruction here, we are not being

00:25:53.519 --> 00:25:56.585
<v Speaker 1>able to access some of the provider specific

00:25:56.585 --> 00:25:59.545
<v Speaker 1>functionalities that some teams might need. Right? In

00:25:59.545 --> 00:26:01.625
<v Speaker 1>my opinion, this obstruction aims to cover, you

00:26:01.625 --> 00:26:03.545
<v Speaker 1>know, like, 80% of the use cases that

00:26:03.545 --> 00:26:05.385
<v Speaker 1>you will implement with the key value store.

00:26:05.545 --> 00:26:06.905
<v Speaker 1>But the other 20%,

00:26:06.905 --> 00:26:08.905
<v Speaker 1>it's very specific to each vendor and maybe

00:26:08.905 --> 00:26:10.905
<v Speaker 1>kinda one feature that the vendor is providing

00:26:10.905 --> 00:26:12.720
<v Speaker 1>that it's not being shared with all the

00:26:12.720 --> 00:26:14.880
<v Speaker 1>other vendors. But, basically, we'll put you in

00:26:14.880 --> 00:26:17.440
<v Speaker 1>a position where all the generic stuff that

00:26:17.440 --> 00:26:18.720
<v Speaker 1>you can build, you can build it using

00:26:18.720 --> 00:26:19.440
<v Speaker 1>Dapr.

00:26:19.840 --> 00:26:22.400
<v Speaker 1>And all the very specific provider, you know,

00:26:22.400 --> 00:26:24.160
<v Speaker 1>like, vendor specific feature that you want to

00:26:24.160 --> 00:26:25.680
<v Speaker 1>use, you can separate it in a different

00:26:25.680 --> 00:26:28.295
<v Speaker 1>service and then consume that via APIs or

00:26:28.295 --> 00:26:30.534
<v Speaker 1>via any other interaction mechanisms.

00:26:30.775 --> 00:26:33.654
<v Speaker 1>That's kinda how I've seen Dapr being used.

00:26:33.975 --> 00:26:36.455
<v Speaker 1>Because, again, like, if, like, an architect is

00:26:36.455 --> 00:26:38.455
<v Speaker 1>looking into the like, into this, you know,

00:26:38.695 --> 00:26:41.230
<v Speaker 1>stream and saying, well, I know that by

00:26:41.230 --> 00:26:42.990
<v Speaker 1>using those generic APIs, I would not be

00:26:42.990 --> 00:26:44.990
<v Speaker 1>able to implement by very, very concrete use

00:26:44.990 --> 00:26:47.070
<v Speaker 1>case that it requires just to go straight

00:26:47.070 --> 00:26:48.429
<v Speaker 1>to the Redis APIs,

00:26:48.669 --> 00:26:49.950
<v Speaker 1>and that's perfectly fine.

00:26:50.270 --> 00:26:52.190
<v Speaker 1>But if you start using for all the

00:26:52.190 --> 00:26:54.830
<v Speaker 1>generic stuff that you're building, the Dapr APIs,

00:26:54.830 --> 00:26:55.309
<v Speaker 1>then

00:26:55.975 --> 00:26:58.135
<v Speaker 1>for all those developers, they don't actually need

00:26:58.135 --> 00:27:00.534
<v Speaker 1>to know about those vendor specific features that

00:27:00.534 --> 00:27:02.534
<v Speaker 1>you need to use. So you can just

00:27:02.534 --> 00:27:04.214
<v Speaker 1>get newer developers,

00:27:04.215 --> 00:27:05.335
<v Speaker 1>not that experienced,

00:27:05.335 --> 00:27:08.214
<v Speaker 1>in this case, with or with value store,

00:27:08.294 --> 00:27:10.375
<v Speaker 1>just coding applications and building stuff.

00:27:11.350 --> 00:27:14.070
<v Speaker 0>Okay. So let's push that a step further.

00:27:14.070 --> 00:27:16.389
<v Speaker 0>If all of my application is Dapr,

00:27:16.710 --> 00:27:18.470
<v Speaker 0>and I'm using Dapr

00:27:18.470 --> 00:27:20.389
<v Speaker 0>to communicate with the other services,

00:27:20.870 --> 00:27:21.509
<v Speaker 0>maybe

00:27:21.750 --> 00:27:23.429
<v Speaker 0>I don't need the service mesh. Does Dapr

00:27:23.429 --> 00:27:25.909
<v Speaker 0>allow me to then explore open telemetry metrics

00:27:25.909 --> 00:27:27.635
<v Speaker 0>based on traffic going through all of the

00:27:27.635 --> 00:27:28.355
<v Speaker 0>sidecars?

00:27:29.075 --> 00:27:31.315
<v Speaker 1>You can enable that. Yes. Yeah. You can

00:27:31.315 --> 00:27:33.475
<v Speaker 1>get that as well. But but this is

00:27:33.475 --> 00:27:35.155
<v Speaker 1>not the case if, like, you need a

00:27:35.155 --> 00:27:36.514
<v Speaker 1>service mesh or not.

00:27:36.835 --> 00:27:39.315
<v Speaker 1>I guess that with Dapr, for example, it

00:27:39.315 --> 00:27:41.315
<v Speaker 1>will be yeah. So for the observability point

00:27:41.315 --> 00:27:43.680
<v Speaker 1>of view, then you can ask, okay. What

00:27:43.680 --> 00:27:45.200
<v Speaker 1>what kind of metrics are you getting for

00:27:45.200 --> 00:27:46.880
<v Speaker 1>the service mesh, and what kind of metrics

00:27:46.880 --> 00:27:49.360
<v Speaker 1>is being exposed by Dapr. Right? What kind

00:27:49.360 --> 00:27:51.040
<v Speaker 1>of stuff how deep can you go, and

00:27:51.040 --> 00:27:52.480
<v Speaker 1>how well integrated it is with the rest

00:27:52.480 --> 00:27:53.519
<v Speaker 1>of the ecosystem?

00:27:54.000 --> 00:27:56.335
<v Speaker 1>I would tend to think that companies and

00:27:56.335 --> 00:27:58.975
<v Speaker 1>projects dedicated to that specific space will do

00:27:58.975 --> 00:28:00.975
<v Speaker 1>much better than a project that is much

00:28:00.975 --> 00:28:02.894
<v Speaker 1>more focused on the developer space.

00:28:03.534 --> 00:28:07.215
<v Speaker 0>Does Dapr handle service discovery between Dapr to

00:28:07.215 --> 00:28:09.534
<v Speaker 0>Dapr services, or does that rely on something

00:28:09.534 --> 00:28:12.050
<v Speaker 0>like a service mesh or Kubernetes API under

00:28:12.050 --> 00:28:12.690
<v Speaker 0>the hood?

00:28:13.730 --> 00:28:17.170
<v Speaker 1>So yeah. So so Dapr does service the

00:28:17.170 --> 00:28:19.730
<v Speaker 1>discovery, and it allows like, it implements resiliency

00:28:19.730 --> 00:28:23.090
<v Speaker 1>policies across these calls. Right? But, again, these

00:28:23.090 --> 00:28:24.450
<v Speaker 1>resiliency policies

00:28:24.450 --> 00:28:25.170
<v Speaker 1>can be

00:28:25.915 --> 00:28:28.475
<v Speaker 1>implemented by different mechanisms, and the Dapr sidecar

00:28:28.475 --> 00:28:30.555
<v Speaker 1>will have some implementations there that you can

00:28:30.555 --> 00:28:33.035
<v Speaker 1>quickly configure. Right? But it again, it's just

00:28:33.035 --> 00:28:36.155
<v Speaker 1>more focused on the application level concerns. Right?

00:28:36.155 --> 00:28:37.675
<v Speaker 1>Like, making sure that, you know, if this

00:28:37.675 --> 00:28:40.200
<v Speaker 1>service a is calling service b, you can

00:28:40.200 --> 00:28:42.600
<v Speaker 1>quickly define how many retries do you want

00:28:42.600 --> 00:28:44.840
<v Speaker 1>to do if something goes wrong, and you

00:28:44.840 --> 00:28:46.919
<v Speaker 1>can configure that in a declarative way.

00:28:47.960 --> 00:28:50.440
<v Speaker 0>Okay. That makes sense. So there is an

00:28:50.440 --> 00:28:52.440
<v Speaker 1>overlap. There is definitely an overlap there, and

00:28:52.440 --> 00:28:53.880
<v Speaker 1>I think that we're we'll be we will

00:28:53.880 --> 00:28:55.320
<v Speaker 1>be working with Marino to make sure that

00:28:55.320 --> 00:28:57.534
<v Speaker 1>that overlap, it's it's clear for people

00:28:57.855 --> 00:28:59.534
<v Speaker 1>and also that we have some very cool

00:28:59.534 --> 00:29:01.855
<v Speaker 1>examples on on how one thing can complement

00:29:01.855 --> 00:29:04.014
<v Speaker 1>the other and how people can actually benefit

00:29:04.014 --> 00:29:05.134
<v Speaker 1>from having both.

00:29:05.774 --> 00:29:07.454
<v Speaker 0>Alright. Awesome. Thank you.

00:29:08.575 --> 00:29:12.150
<v Speaker 0>Mozz asked a question. Does Dapr offer any

00:29:12.150 --> 00:29:12.950
<v Speaker 0>caching

00:29:13.110 --> 00:29:13.910
<v Speaker 0>in case

00:29:14.150 --> 00:29:16.870
<v Speaker 0>with regards to like the state management? So,

00:29:17.190 --> 00:29:18.550
<v Speaker 0>you know, if I send the same request

00:29:18.550 --> 00:29:19.990
<v Speaker 0>over and over and over again, is it

00:29:19.990 --> 00:29:21.750
<v Speaker 0>safe car gonna go? Hey, you've already sent

00:29:21.750 --> 00:29:24.070
<v Speaker 0>us and just like memoize their response.

00:29:25.195 --> 00:29:27.594
<v Speaker 1>That's a very good question. I don't like

00:29:27.595 --> 00:29:29.034
<v Speaker 1>from the top of my head. I don't

00:29:29.034 --> 00:29:31.195
<v Speaker 1>think so that that's the case, but I

00:29:31.195 --> 00:29:33.754
<v Speaker 1>can find out the more detailed answer later

00:29:33.754 --> 00:29:34.315
<v Speaker 1>on.

00:29:34.634 --> 00:29:37.595
<v Speaker 0>Alright. Hey, Carlos. Hey, Carlos. Thanks for joining.

00:29:39.130 --> 00:29:40.649
<v Speaker 0>Okay. So,

00:29:41.770 --> 00:29:43.210
<v Speaker 0>what we've seen so far,

00:29:43.770 --> 00:29:46.010
<v Speaker 0>bring in the Dapr client, we create a

00:29:46.010 --> 00:29:47.770
<v Speaker 0>client, we bring in the package,

00:29:47.770 --> 00:29:49.290
<v Speaker 0>we create a client, and then all of

00:29:49.290 --> 00:29:52.330
<v Speaker 0>a sudden we can start to call

00:29:52.965 --> 00:29:54.005
<v Speaker 0>services

00:29:54.005 --> 00:29:55.044
<v Speaker 0>obstructed

00:29:55.044 --> 00:29:56.565
<v Speaker 0>by the client. Right? So if we do

00:29:56.565 --> 00:29:57.364
<v Speaker 0>a client

00:29:58.005 --> 00:30:00.005
<v Speaker 0>dot state, maybe I don't have the packages

00:30:00.005 --> 00:30:01.044
<v Speaker 0>installed yet.

00:30:01.684 --> 00:30:02.884
<v Speaker 0>So let's do

00:30:03.845 --> 00:30:04.884
<v Speaker 0>let's just button.

00:30:07.365 --> 00:30:07.765
<v Speaker 0>Okay.

00:30:08.590 --> 00:30:11.710
<v Speaker 0>So that should if I restart my server,

00:30:11.710 --> 00:30:13.310
<v Speaker 0>give me auto complete.

00:30:14.750 --> 00:30:15.310
<v Speaker 0>No.

00:30:17.390 --> 00:30:19.070
<v Speaker 0>Alright. That goes that idea.

00:30:19.390 --> 00:30:21.905
<v Speaker 0>I just wanted to I know it does.

00:30:21.905 --> 00:30:24.865
<v Speaker 0>See. Okay. It does. Right? I I didn't

00:30:24.865 --> 00:30:25.825
<v Speaker 1>look see.

00:30:26.385 --> 00:30:28.465
<v Speaker 0>Oh, yeah. So I know that state safe.

00:30:28.465 --> 00:30:30.225
<v Speaker 0>So oh, I just don't I'm not gonna

00:30:30.225 --> 00:30:31.664
<v Speaker 0>know complete on the different

00:30:32.225 --> 00:30:33.265
<v Speaker 0>oh, no. It's at the top.

00:30:35.240 --> 00:30:36.760
<v Speaker 1>I think that's based on the strings that

00:30:36.760 --> 00:30:37.719
<v Speaker 1>are there. Right?

00:30:38.279 --> 00:30:41.479
<v Speaker 0>Yeah. So we got actor stuff, bindings,

00:30:41.720 --> 00:30:42.599
<v Speaker 0>configuration,

00:30:42.760 --> 00:30:43.559
<v Speaker 0>crypto,

00:30:45.320 --> 00:30:45.879
<v Speaker 0>focus,

00:30:46.120 --> 00:30:48.825
<v Speaker 0>proxies, pubs, sub secrets, take care. Alright. That

00:30:48.825 --> 00:30:51.065
<v Speaker 0>is quite a comprehensive set of APIs. So

00:30:51.065 --> 00:30:52.424
<v Speaker 0>I'm just gonna pick Yeah.

00:30:53.065 --> 00:30:54.664
<v Speaker 0>Two that I think are interested and then

00:30:54.664 --> 00:30:55.784
<v Speaker 0>maybe we can either take a look at

00:30:55.784 --> 00:30:57.385
<v Speaker 0>another quick start just to see what's going

00:30:57.385 --> 00:30:58.585
<v Speaker 0>on there or we can move on to

00:30:58.585 --> 00:31:01.465
<v Speaker 0>your demo. But firstly, let's try configuration.

00:31:01.465 --> 00:31:02.265
<v Speaker 0>Right? Yep.

00:31:03.440 --> 00:31:05.120
<v Speaker 0>I don't know why I keep starting at

00:31:05.120 --> 00:31:07.279
<v Speaker 0>the bottom. So I've got subscribed,

00:31:07.280 --> 00:31:09.999
<v Speaker 0>subscribed queries and get. So does this mean

00:31:10.799 --> 00:31:11.440
<v Speaker 0>Yeah.

00:31:11.600 --> 00:31:13.440
<v Speaker 0>I could just say that I want

00:31:13.600 --> 00:31:14.159
<v Speaker 0>some

00:31:15.775 --> 00:31:18.415
<v Speaker 0>mean, Configuration key. Let's call it scale scalar

00:31:18.415 --> 00:31:20.335
<v Speaker 0>number. Right? Which is just some arbitrary Exactly.

00:31:20.335 --> 00:31:21.134
<v Speaker 0>Created.

00:31:21.775 --> 00:31:22.414
<v Speaker 0>Mhmm.

00:31:22.815 --> 00:31:24.175
<v Speaker 0>A b c. This

00:31:24.655 --> 00:31:26.655
<v Speaker 0>I now have the ability to do distributed

00:31:26.655 --> 00:31:29.375
<v Speaker 0>configuration across my Dapr services.

00:31:29.375 --> 00:31:30.015
<v Speaker 0>Is that correct?

00:31:30.980 --> 00:31:32.740
<v Speaker 1>Yeah. Yeah. Exactly. So you can access a

00:31:32.740 --> 00:31:34.900
<v Speaker 1>configuration kinda configuration store.

00:31:35.060 --> 00:31:37.860
<v Speaker 0>So are these gonna compare Dapr service or

00:31:37.860 --> 00:31:38.820
<v Speaker 0>pair global

00:31:39.380 --> 00:31:40.179
<v Speaker 0>application?

00:31:41.060 --> 00:31:43.620
<v Speaker 1>That's a very good question. Yeah. So as

00:31:43.620 --> 00:31:45.620
<v Speaker 1>part of the Dapr application itself, we have

00:31:45.620 --> 00:31:48.265
<v Speaker 1>scopes, and that basically give you access to

00:31:48.265 --> 00:31:50.985
<v Speaker 1>different components by name. So for example, when

00:31:50.985 --> 00:31:53.225
<v Speaker 1>you are, like, doing a a clang

00:31:53.225 --> 00:31:54.345
<v Speaker 1>state save,

00:31:54.585 --> 00:31:56.185
<v Speaker 1>you will see that the first the first

00:31:56.185 --> 00:31:58.345
<v Speaker 1>thing is the Dapr state store name. Right?

00:31:58.345 --> 00:32:00.620
<v Speaker 0>Yeah. Yeah. Yeah. What you can do is

00:32:00.620 --> 00:32:02.779
<v Speaker 1>you can say, you know, my state store

00:32:02.779 --> 00:32:03.580
<v Speaker 1>called

00:32:03.820 --> 00:32:05.019
<v Speaker 1>my state store

00:32:05.340 --> 00:32:07.739
<v Speaker 1>has a scope for this application

00:32:07.820 --> 00:32:09.980
<v Speaker 1>or for this list of applications. Right? Like

00:32:10.059 --> 00:32:12.619
<v Speaker 1>and then only these Dapr applications can access,

00:32:12.940 --> 00:32:13.980
<v Speaker 1>you know, that component.

00:32:15.595 --> 00:32:17.914
<v Speaker 0>Okay. So this is the store name,

00:32:18.554 --> 00:32:20.315
<v Speaker 0>and then it looks like it takes a

00:32:20.315 --> 00:32:21.995
<v Speaker 0>list. So now I could actually ask for

00:32:21.995 --> 00:32:23.034
<v Speaker 0>my scaler

00:32:23.274 --> 00:32:25.354
<v Speaker 0>number and maybe I'll see

00:32:25.755 --> 00:32:28.635
<v Speaker 0>my name, some random terrible thing. Right?

00:32:29.490 --> 00:32:31.650
<v Speaker 0>Exactly. So we get a promise, so we're

00:32:31.650 --> 00:32:33.250
<v Speaker 0>just gonna await that. And

00:32:34.130 --> 00:32:35.250
<v Speaker 0>then I get

00:32:35.970 --> 00:32:37.409
<v Speaker 0>configuration response.

00:32:38.050 --> 00:32:38.929
<v Speaker 0>Exactly.

00:32:38.930 --> 00:32:39.810
<v Speaker 0>And from there,

00:32:41.554 --> 00:32:42.995
<v Speaker 0>I can do It will be a c.

00:32:42.995 --> 00:32:44.434
<v Speaker 0>Okay. So then we get to the top.

00:32:44.434 --> 00:32:46.514
<v Speaker 0>Now there was one other interesting thing

00:32:46.914 --> 00:32:49.315
<v Speaker 0>there as we can do client configuration

00:32:49.315 --> 00:32:51.154
<v Speaker 0>and then the resubscribe.

00:32:51.635 --> 00:32:53.554
<v Speaker 0>So does this allow me to get live

00:32:53.554 --> 00:32:56.674
<v Speaker 0>updates as those values change into my application?

00:32:57.850 --> 00:33:00.249
<v Speaker 1>That's the idea. Yes. Nice.

00:33:00.570 --> 00:33:01.929
<v Speaker 0>It's a really cool feature.

00:33:02.409 --> 00:33:04.330
<v Speaker 1>And and, again, I hear that's that's kinda

00:33:04.330 --> 00:33:07.130
<v Speaker 1>interesting from lots of different perspectives. Right? Like,

00:33:07.130 --> 00:33:09.610
<v Speaker 1>you're getting functionality that usually you will need

00:33:09.610 --> 00:33:11.289
<v Speaker 1>as you are, like, figuring out. Right? Like,

00:33:11.295 --> 00:33:12.575
<v Speaker 1>when you look at that feature and you

00:33:12.575 --> 00:33:15.135
<v Speaker 1>said, okay. That's super interesting because that's something

00:33:15.135 --> 00:33:16.095
<v Speaker 1>that I will need.

00:33:16.495 --> 00:33:18.095
<v Speaker 1>And if you need to kinda, like, implement

00:33:18.095 --> 00:33:20.975
<v Speaker 1>that and figure out how this configuration store

00:33:20.975 --> 00:33:23.215
<v Speaker 1>is is doing it, then it will take

00:33:23.215 --> 00:33:24.735
<v Speaker 1>time. Here, you have kinda, like, all the

00:33:24.735 --> 00:33:27.600
<v Speaker 1>APIs with the most common, you know, functionality

00:33:27.600 --> 00:33:31.120
<v Speaker 1>already exposed there. So just autocomplete and just

00:33:31.120 --> 00:33:32.720
<v Speaker 1>figure out what what you need and then

00:33:32.720 --> 00:33:34.799
<v Speaker 1>you just you just use it. Yeah. I

00:33:34.799 --> 00:33:36.480
<v Speaker 0>mean, it's one of those things in Kubernetes.

00:33:36.480 --> 00:33:37.679
<v Speaker 0>It's just it's been a pain in the

00:33:37.679 --> 00:33:39.200
<v Speaker 0>ass from day one. Right? It's where the

00:33:39.200 --> 00:33:41.039
<v Speaker 0>content map changes, and you have to find

00:33:40.995 --> 00:33:43.315
<v Speaker 0>a way to rotate that Mhmm. Point.

00:33:43.795 --> 00:33:46.515
<v Speaker 0>We've done Exactly. Past via terrible annotations with

00:33:46.515 --> 00:33:47.235
<v Speaker 0>hashes.

00:33:47.475 --> 00:33:49.635
<v Speaker 0>We're making content maps immutable and force and

00:33:49.635 --> 00:33:52.275
<v Speaker 0>deployment that way. But really, our conflict could

00:33:52.275 --> 00:33:54.195
<v Speaker 0>just be delivered at run time through some

00:33:54.195 --> 00:33:56.190
<v Speaker 0>system like And I love that the API

00:33:56.190 --> 00:33:57.630
<v Speaker 0>is just right there for you to use

00:33:57.630 --> 00:33:59.710
<v Speaker 0>even with the subscribe, which is such a

00:33:59.710 --> 00:34:00.350
<v Speaker 0>nice touch.

00:34:00.830 --> 00:34:01.230
<v Speaker 1>Exactly.

00:34:01.790 --> 00:34:03.550
<v Speaker 1>Because think about this. Now you have this

00:34:03.550 --> 00:34:06.030
<v Speaker 1>proxy that usually, like, when you start using

00:34:06.030 --> 00:34:07.710
<v Speaker 1>Dapr, you would think that it's just a,

00:34:07.710 --> 00:34:08.750
<v Speaker 1>like, unidirectional.

00:34:08.750 --> 00:34:11.174
<v Speaker 1>Right? Like, you're going to infrastructure and sending

00:34:11.174 --> 00:34:12.375
<v Speaker 1>request to infrastructure.

00:34:12.534 --> 00:34:14.454
<v Speaker 1>But because this proxy is, like, it's long

00:34:14.454 --> 00:34:16.614
<v Speaker 1>running and it's running right beside your application,

00:34:16.614 --> 00:34:18.855
<v Speaker 1>can also call back the application whenever it's

00:34:18.855 --> 00:34:21.734
<v Speaker 1>needed. So for that subscribe mechanism, basically, you

00:34:21.734 --> 00:34:23.255
<v Speaker 1>would just get the notification

00:34:23.414 --> 00:34:25.900
<v Speaker 1>back into the application when something changes.

00:34:26.780 --> 00:34:28.460
<v Speaker 1>The same with pops up. Right? Like, with

00:34:28.460 --> 00:34:30.380
<v Speaker 1>pops up, you are interested in receiving events

00:34:30.380 --> 00:34:33.500
<v Speaker 1>whenever they happen in Kafka or in or

00:34:33.500 --> 00:34:35.180
<v Speaker 1>whatever, and you want to make sure that

00:34:35.180 --> 00:34:37.500
<v Speaker 1>the application gets called back whenever a new

00:34:37.500 --> 00:34:37.980
<v Speaker 1>event happens.

00:34:39.125 --> 00:34:39.925
<v Speaker 0>I

00:34:40.244 --> 00:34:42.085
<v Speaker 0>think you've you've led yourself in to a

00:34:42.085 --> 00:34:43.764
<v Speaker 0>very tough question there because you put an

00:34:43.764 --> 00:34:45.204
<v Speaker 0>idea in my head and that's never a

00:34:45.204 --> 00:34:45.844
<v Speaker 0>good thing.

00:34:46.405 --> 00:34:47.205
<v Speaker 1>Oh, no.

00:34:47.525 --> 00:34:49.925
<v Speaker 0>I am a huge fan of

00:34:50.565 --> 00:34:52.440
<v Speaker 0>Kafka esque APIs,

00:34:52.440 --> 00:34:54.359
<v Speaker 0>that style of topic based pub sub, right,

00:34:54.359 --> 00:34:56.840
<v Speaker 0>especially red panda, that's an amazing project. Right?

00:34:56.840 --> 00:34:59.080
<v Speaker 0>But there's a challenge. Right? And the challenge

00:34:59.080 --> 00:35:01.080
<v Speaker 0>is that we usually need some sort of

00:35:01.640 --> 00:35:04.280
<v Speaker 0>two phase thing. We save something to a

00:35:04.280 --> 00:35:07.575
<v Speaker 0>database, we grab our pub sub, we publish

00:35:08.055 --> 00:35:09.255
<v Speaker 0>the thing. Yep.

00:35:09.575 --> 00:35:11.335
<v Speaker 0>This is a transaction even though we don't

00:35:11.335 --> 00:35:13.415
<v Speaker 0>treat it as a transaction. Now I'm hoping

00:35:13.415 --> 00:35:15.975
<v Speaker 0>you're tell me I can do start

00:35:16.215 --> 00:35:18.530
<v Speaker 0>transaction and then wrap these two things. Is

00:35:18.530 --> 00:35:20.050
<v Speaker 0>that something that Dapr is gonna solve for

00:35:20.050 --> 00:35:21.570
<v Speaker 0>me, or would I still need to handle

00:35:21.570 --> 00:35:24.610
<v Speaker 0>that on a case It's it's it's

00:35:24.610 --> 00:35:27.330
<v Speaker 1>much better than that, my friend. I'm I'm

00:35:27.330 --> 00:35:29.010
<v Speaker 1>glad I'm glad that you asked that.

00:35:29.735 --> 00:35:31.975
<v Speaker 1>So there is a way to configure

00:35:32.455 --> 00:35:34.855
<v Speaker 1>the the state store to actually implement the

00:35:34.855 --> 00:35:37.175
<v Speaker 1>outbox pattern, which is what you're describing. You

00:35:37.175 --> 00:35:39.415
<v Speaker 1>want in the same transaction to to to

00:35:39.415 --> 00:35:41.335
<v Speaker 1>store a state and then immediate message with

00:35:41.335 --> 00:35:42.695
<v Speaker 1>that state, with the payload. Right?

00:35:43.740 --> 00:35:46.140
<v Speaker 1>So there is a way to automatically enable

00:35:46.140 --> 00:35:48.460
<v Speaker 1>that for the state store for the save.

00:35:48.460 --> 00:35:50.780
<v Speaker 1>Right? So when you do save, you know

00:35:50.780 --> 00:35:53.260
<v Speaker 1>that depending on the configuration of that, an

00:35:53.260 --> 00:35:55.100
<v Speaker 1>an an event can be immediately in the

00:35:55.100 --> 00:35:55.980
<v Speaker 1>same transaction as well.

00:35:58.454 --> 00:36:00.454
<v Speaker 1>And that's not there. It's not it's not

00:36:00.454 --> 00:36:02.935
<v Speaker 1>in the APIs. It's more like a configuration

00:36:03.255 --> 00:36:04.615
<v Speaker 1>space, and you can you can take a

00:36:04.615 --> 00:36:05.895
<v Speaker 1>look in into the website.

00:36:06.134 --> 00:36:07.414
<v Speaker 0>Okay. So let's go back to the docs

00:36:07.414 --> 00:36:09.414
<v Speaker 0>then because that's that's really interesting. Right? Because

00:36:09.414 --> 00:36:11.335
<v Speaker 0>this is just something that's Yeah. Always been

00:36:11.335 --> 00:36:12.295
<v Speaker 0>super hard. Right?

00:36:13.550 --> 00:36:14.510
<v Speaker 1>Exactly.

00:36:14.510 --> 00:36:16.109
<v Speaker 1>And again, this is kinda going back to

00:36:16.109 --> 00:36:17.630
<v Speaker 1>what I mentioned before. Right? Like, we are

00:36:17.630 --> 00:36:20.350
<v Speaker 1>building more complex functionality based on the building

00:36:20.350 --> 00:36:22.430
<v Speaker 1>blocks. Right? Like, we we can store state

00:36:22.430 --> 00:36:23.710
<v Speaker 1>and we can meet events.

00:36:24.030 --> 00:36:25.630
<v Speaker 1>Now we can bundle them in the same

00:36:25.630 --> 00:36:26.430
<v Speaker 1>transaction

00:36:26.430 --> 00:36:27.150
<v Speaker 1>if we want to.

00:36:28.445 --> 00:36:29.645
<v Speaker 0>Alright. So

00:36:29.805 --> 00:36:31.325
<v Speaker 0>where should I be looking?

00:36:32.925 --> 00:36:34.925
<v Speaker 1>I think that now, like, basically, it will

00:36:34.925 --> 00:36:35.805
<v Speaker 1>ask you to

00:36:36.285 --> 00:36:38.445
<v Speaker 1>run the, like, Dapr run. Right?

00:36:39.725 --> 00:36:40.765
<v Speaker 1>What what are you looking for?

00:36:41.810 --> 00:36:43.890
<v Speaker 0>That configuration thing you were talking about.

00:36:44.130 --> 00:36:45.730
<v Speaker 1>Oh, so we need to take a look

00:36:45.730 --> 00:36:47.970
<v Speaker 1>for the, like, out outbox pattern. So if

00:36:47.970 --> 00:36:49.650
<v Speaker 1>you search in the documentations,

00:36:51.490 --> 00:36:52.370
<v Speaker 1>outbox

00:36:54.835 --> 00:36:55.875
<v Speaker 1>There you go.

00:36:59.395 --> 00:37:01.155
<v Speaker 1>And I think that that's the configuration out

00:37:01.155 --> 00:37:03.235
<v Speaker 1>there. Right? Like, that's

00:37:03.235 --> 00:37:05.155
<v Speaker 1>basically the the YAML file that you're looking

00:37:05.155 --> 00:37:06.995
<v Speaker 1>into is how do you configure the backing

00:37:06.995 --> 00:37:07.955
<v Speaker 1>implementations.

00:37:07.955 --> 00:37:09.795
<v Speaker 1>Right? Ah, right. So in this case

00:37:10.299 --> 00:37:11.740
<v Speaker 1>in this case, you are using a state

00:37:11.740 --> 00:37:13.740
<v Speaker 1>store that is MySQL.

00:37:13.980 --> 00:37:15.500
<v Speaker 1>Right? So in this case, you are storing

00:37:15.500 --> 00:37:18.300
<v Speaker 1>this key value objects into MySQL.

00:37:18.460 --> 00:37:20.059
<v Speaker 1>You have, like, the connection string, of course,

00:37:20.059 --> 00:37:21.580
<v Speaker 1>to the instance of the database.

00:37:21.900 --> 00:37:24.435
<v Speaker 1>And then down there, like, the the the

00:37:24.435 --> 00:37:26.755
<v Speaker 1>next, metadata that you have there is out

00:37:26.915 --> 00:37:29.075
<v Speaker 1>outbox publish pops up.

00:37:29.875 --> 00:37:31.715
<v Speaker 1>Right? Like, that basically means every time that

00:37:31.715 --> 00:37:32.835
<v Speaker 1>you do a save

00:37:33.235 --> 00:37:35.395
<v Speaker 1>state, you're going to be creating a message

00:37:35.395 --> 00:37:36.035
<v Speaker 1>into

00:37:36.530 --> 00:37:39.089
<v Speaker 1>that pops up on the topic that basically

00:37:39.089 --> 00:37:40.930
<v Speaker 1>you are defining there. Yep.

00:37:41.730 --> 00:37:42.690
<v Speaker 0>That's nice.

00:37:43.250 --> 00:37:44.770
<v Speaker 0>I was not expecting you to tell me

00:37:44.770 --> 00:37:46.369
<v Speaker 0>it was that easy, but I'm very I'm

00:37:46.369 --> 00:37:47.570
<v Speaker 0>very happy that it is that easy.

00:37:48.735 --> 00:37:50.335
<v Speaker 1>And and I think that this is what

00:37:50.335 --> 00:37:52.415
<v Speaker 1>makes the project really, really,

00:37:52.815 --> 00:37:54.735
<v Speaker 1>really powerful in in a sense that

00:37:55.135 --> 00:37:56.815
<v Speaker 1>if you start building more and more complex

00:37:56.815 --> 00:37:59.215
<v Speaker 1>patterns like this one. Right? Because these are

00:37:59.215 --> 00:38:01.775
<v Speaker 1>the difficult challenges that developers needs to solve.

00:38:02.200 --> 00:38:04.840
<v Speaker 1>And if you summarize all these things into

00:38:04.840 --> 00:38:07.000
<v Speaker 1>some APIs and some configurations,

00:38:07.560 --> 00:38:09.800
<v Speaker 1>then, actually, you can have, like,

00:38:10.360 --> 00:38:12.520
<v Speaker 1>you know, less experienced developers

00:38:12.520 --> 00:38:14.280
<v Speaker 1>building very complex functionality.

00:38:16.194 --> 00:38:17.075
<v Speaker 0>Sweet.

00:38:17.635 --> 00:38:20.355
<v Speaker 0>Alright. Let let's get back on track. So

00:38:21.714 --> 00:38:23.234
<v Speaker 0>Yeah. That

00:38:23.234 --> 00:38:24.755
<v Speaker 0>was cool. I'm just worried this. I bet

00:38:24.755 --> 00:38:26.434
<v Speaker 0>you should it's only me that really cares,

00:38:26.434 --> 00:38:28.130
<v Speaker 0>but I really love that that bit of

00:38:28.130 --> 00:38:28.850
<v Speaker 0>functionality.

00:38:29.010 --> 00:38:30.690
<v Speaker 0>So we're taking a look at state management.

00:38:30.690 --> 00:38:32.690
<v Speaker 0>I'm just gonna see if there's anything that

00:38:32.690 --> 00:38:34.050
<v Speaker 0>didn't take a look at that it's gonna

00:38:34.050 --> 00:38:34.690
<v Speaker 0>cover.

00:38:36.770 --> 00:38:39.090
<v Speaker 0>So run it, see it save stuff

00:38:39.170 --> 00:38:41.330
<v Speaker 0>and now okay. So now we're getting the

00:38:41.330 --> 00:38:44.675
<v Speaker 0>ability to add a YAML file for multi

00:38:44.675 --> 00:38:45.395
<v Speaker 0>app.

00:38:46.915 --> 00:38:49.795
<v Speaker 1>That's that's I don't think that you need

00:38:49.795 --> 00:38:51.555
<v Speaker 1>that right now. Let me see.

00:38:54.035 --> 00:38:55.795
<v Speaker 1>Yep. Yeah. You do need that, I think.

00:38:59.180 --> 00:39:02.059
<v Speaker 0>Okay. Yeah. That's you need that because that's

00:39:02.059 --> 00:39:03.020
<v Speaker 1>the file.

00:39:03.260 --> 00:39:04.539
<v Speaker 1>Yeah. That's the file that you need to

00:39:04.539 --> 00:39:07.020
<v Speaker 1>use to basically run the the order processor,

00:39:07.020 --> 00:39:08.540
<v Speaker 1>which is the application that you clone.

00:39:11.579 --> 00:39:11.980
<v Speaker 0>Alright.

00:39:13.185 --> 00:39:14.865
<v Speaker 0>So I probably don't want us to save

00:39:14.865 --> 00:39:17.025
<v Speaker 0>any of those changes. And the filename that

00:39:17.025 --> 00:39:19.425
<v Speaker 0>we need is Dapr dot YAML.

00:39:19.665 --> 00:39:21.025
<v Speaker 0>Always YAML.

00:39:21.985 --> 00:39:23.585
<v Speaker 1>Always YAML. And

00:39:25.425 --> 00:39:27.505
<v Speaker 0>I'm gonna use button. There we go.

00:39:28.370 --> 00:39:30.130
<v Speaker 1>And then you have the other file, which

00:39:30.130 --> 00:39:31.650
<v Speaker 1>is the the one that we were looking

00:39:31.650 --> 00:39:33.090
<v Speaker 1>at before. Right? Like, this is the state

00:39:33.090 --> 00:39:34.050
<v Speaker 1>store definition,

00:39:34.290 --> 00:39:35.410
<v Speaker 1>using Redis.

00:39:40.050 --> 00:39:42.610
<v Speaker 1>This YAML file, this one specifically,

00:39:42.610 --> 00:39:45.235
<v Speaker 1>is the one that, basically a platform engineering

00:39:45.235 --> 00:39:47.555
<v Speaker 1>team needs to define and configure, right, based

00:39:47.555 --> 00:39:49.875
<v Speaker 1>on the the, like, available infrastructure that they

00:39:49.875 --> 00:39:50.435
<v Speaker 1>have.

00:39:52.035 --> 00:39:52.755
<v Speaker 1>Okay.

00:39:55.075 --> 00:39:58.515
<v Speaker 0>So state store, we have. And now

00:40:04.190 --> 00:40:06.430
<v Speaker 1>You did that already. Right? Yeah. You did

00:40:06.430 --> 00:40:07.230
<v Speaker 1>that. Yeah.

00:40:09.470 --> 00:40:10.830
<v Speaker 1>What is that? Yeah. Now you need to

00:40:10.830 --> 00:40:12.670
<v Speaker 1>run the app, I guess. You should be

00:40:12.670 --> 00:40:14.030
<v Speaker 1>able to run the app and

00:40:14.905 --> 00:40:17.385
<v Speaker 1>oh, there you go. Yep. Mhmm. Just

00:40:21.785 --> 00:40:23.465
<v Speaker 1>to recap. Right? Like, you are not running

00:40:23.465 --> 00:40:24.265
<v Speaker 1>Kubernetes.

00:40:24.345 --> 00:40:26.105
<v Speaker 1>In this case, you are starting Dapr outside

00:40:26.105 --> 00:40:26.825
<v Speaker 1>of Kubernetes.

00:40:27.520 --> 00:40:30.640
<v Speaker 1>And the Dapr CLI, it's basically configuring Dapr

00:40:30.640 --> 00:40:32.560
<v Speaker 1>to have, like, an instance of Redis, I

00:40:32.560 --> 00:40:34.480
<v Speaker 1>think, locally running with Docker

00:40:35.200 --> 00:40:36.800
<v Speaker 1>and connecting to that one.

00:40:38.480 --> 00:40:39.840
<v Speaker 1>You need to do I think that you

00:40:39.840 --> 00:40:42.160
<v Speaker 1>need to do the other command. Yeah.

00:40:43.775 --> 00:40:46.015
<v Speaker 1>Not that. I think that you need the

00:40:46.015 --> 00:40:48.655
<v Speaker 1>the long one. That one. And Dapr Dapr

00:40:48.655 --> 00:40:49.295
<v Speaker 1>run.

00:40:50.335 --> 00:40:52.575
<v Speaker 0>But haven't I just Yeah. Described all this

00:40:52.575 --> 00:40:53.215
<v Speaker 0>stuff?

00:40:53.775 --> 00:40:56.415
<v Speaker 0>Oh, no. That's order processor. Okay. Alright. Okay.

00:40:56.415 --> 00:40:56.575
<v Speaker 0>Gotcha.

00:40:57.450 --> 00:41:00.330
<v Speaker 0>Exactly. We have state management, so that's a

00:41:00.330 --> 00:41:01.850
<v Speaker 0>separate application together.

00:41:02.650 --> 00:41:03.290
<v Speaker 0>Alright.

00:41:06.410 --> 00:41:08.250
<v Speaker 1>What can we see there? Did you change

00:41:08.250 --> 00:41:08.970
<v Speaker 1>something

00:41:09.450 --> 00:41:10.170
<v Speaker 1>in the app?

00:41:12.065 --> 00:41:13.825
<v Speaker 0>No. That's the order processor. I have not

00:41:13.825 --> 00:41:15.105
<v Speaker 0>touched the order processor.

00:41:15.185 --> 00:41:16.705
<v Speaker 0>Yeah. I think it wants me to be

00:41:16.705 --> 00:41:18.465
<v Speaker 0>in a different direction. Yeah. Okay. This is

00:41:18.545 --> 00:41:19.905
<v Speaker 0>it actually wants me to go into that

00:41:19.905 --> 00:41:20.625
<v Speaker 0>application.

00:41:20.705 --> 00:41:22.705
<v Speaker 1>That's Into the other processor. Yeah. Okay. So

00:41:22.705 --> 00:41:24.785
<v Speaker 0>I've I've been scrolling too fast. Right? So

00:41:24.785 --> 00:41:26.880
<v Speaker 0>we set up the environment. That's right. Which

00:41:26.880 --> 00:41:29.119
<v Speaker 0>Dapr run. We've seen this one run. I

00:41:29.119 --> 00:41:30.960
<v Speaker 0>think we're happy that that one just worked.

00:41:30.960 --> 00:41:32.800
<v Speaker 0>Right? So let's do it again. And

00:41:34.240 --> 00:41:36.080
<v Speaker 0>my Dapr logs will appear here.

00:41:36.400 --> 00:41:36.960
<v Speaker 0>Easy. So

00:41:40.255 --> 00:41:41.855
<v Speaker 0>it looks like we ever got logs from

00:41:41.855 --> 00:41:42.415
<v Speaker 0>it.

00:41:43.535 --> 00:41:45.455
<v Speaker 1>No. Because that's, like, that's not running the

00:41:45.455 --> 00:41:48.255
<v Speaker 1>application. That's only starting the Dapr APIs. Right?

00:41:48.255 --> 00:41:50.175
<v Speaker 1>Like, on your application is not running. That's

00:41:50.175 --> 00:41:52.680
<v Speaker 1>why the other Dapr run is basically running

00:41:52.680 --> 00:41:55.000
<v Speaker 1>the Dapr sidecar that you're running there plus

00:41:55.000 --> 00:41:56.520
<v Speaker 1>the application at the end. You can see

00:41:56.520 --> 00:41:58.200
<v Speaker 1>that there is an NPM start at the

00:41:58.200 --> 00:41:58.760
<v Speaker 1>end.

00:41:59.480 --> 00:42:01.400
<v Speaker 1>Not not in that command. Okay.

00:42:03.400 --> 00:42:03.800
<v Speaker 0>Okay.

00:42:04.475 --> 00:42:07.675
<v Speaker 0>So I can now do bun run

00:42:07.675 --> 00:42:08.395
<v Speaker 0>that Mhmm.

00:42:14.315 --> 00:42:17.515
<v Speaker 1>That's your that's

00:42:17.515 --> 00:42:18.555
<v Speaker 1>your path again.

00:42:19.035 --> 00:42:19.435
<v Speaker 1>Yeah.

00:42:21.119 --> 00:42:23.200
<v Speaker 0>I hate myself so much right now.

00:42:24.640 --> 00:42:27.200
<v Speaker 0>Humber a bit. You

00:42:27.200 --> 00:42:29.440
<v Speaker 1>know, I I really I really don't care

00:42:29.440 --> 00:42:30.799
<v Speaker 1>because I know that you know how to

00:42:30.799 --> 00:42:32.400
<v Speaker 1>fix it. If I need to fix this

00:42:32.400 --> 00:42:34.079
<v Speaker 1>live, I would be struggling.

00:42:35.955 --> 00:42:38.195
<v Speaker 0>Oh, okay. So there's a start, the start

00:42:38.195 --> 00:42:40.595
<v Speaker 0>Dapr. We've already done the start Dapr, so

00:42:40.595 --> 00:42:41.955
<v Speaker 0>I'm just going to start.

00:42:43.075 --> 00:42:45.875
<v Speaker 1>Yep. Waiting for a sidecar, which should still

00:42:45.875 --> 00:42:46.355
<v Speaker 0>be running.

00:42:48.290 --> 00:42:50.130
<v Speaker 1>Yeah. But are you trying to

00:42:51.170 --> 00:42:53.090
<v Speaker 1>start it? It's like a start

00:42:53.650 --> 00:42:55.250
<v Speaker 1>the start up. Yeah. Yeah. Definitely. Just the

00:42:55.250 --> 00:42:55.890
<v Speaker 1>start.

00:42:56.050 --> 00:42:57.730
<v Speaker 1>I'm waiting for a sidecar. Okay.

00:42:58.050 --> 00:42:59.330
<v Speaker 1>That might be because

00:42:59.490 --> 00:43:01.090
<v Speaker 1>so if you do, like for example, if

00:43:01.090 --> 00:43:01.970
<v Speaker 1>you do

00:43:06.845 --> 00:43:09.485
<v Speaker 1>okay. So That was, a run. Update email

00:43:09.645 --> 00:43:10.685
<v Speaker 0>not supported.

00:43:11.965 --> 00:43:12.765
<v Speaker 1>Uh-huh.

00:43:13.325 --> 00:43:15.165
<v Speaker 1>Interesting. Is this just because I'm being an

00:43:15.165 --> 00:43:16.845
<v Speaker 0>absolute pain in the ass and using BUN?

00:43:17.340 --> 00:43:19.340
<v Speaker 0>Am I just I don't think so.

00:43:19.580 --> 00:43:21.180
<v Speaker 0>Am I breaking your demo?

00:43:21.980 --> 00:43:23.260
<v Speaker 1>Maybe.

00:43:23.420 --> 00:43:25.660
<v Speaker 1>But that's what what demos are for. Right?

00:43:30.785 --> 00:43:32.785
<v Speaker 0>I know. It does the same with NPM.

00:43:32.865 --> 00:43:35.745
<v Speaker 1>It says that HTTP is not supported, deprecation

00:43:35.745 --> 00:43:36.625
<v Speaker 1>warning.

00:43:38.705 --> 00:43:39.505
<v Speaker 1>And

00:43:39.745 --> 00:43:41.985
<v Speaker 1>yeah. So maybe you just found a bug

00:43:41.985 --> 00:43:44.065
<v Speaker 1>or something because I guess that that the

00:43:44.065 --> 00:43:46.560
<v Speaker 1>Java SDK is trying to use HTTP for

00:43:46.560 --> 00:43:48.080
<v Speaker 1>some reason. So if you look at the

00:43:48.080 --> 00:43:50.080
<v Speaker 1>source code in into the application,

00:43:50.800 --> 00:43:52.800
<v Speaker 1>remember that there is kinda, like, a protocol

00:43:52.800 --> 00:43:55.040
<v Speaker 1>being defined on top. Right? Yeah. The thing

00:43:55.040 --> 00:43:56.560
<v Speaker 0>was here. So shall we switch it to

00:43:56.560 --> 00:43:57.440
<v Speaker 0>gRPC?

00:43:57.760 --> 00:43:59.200
<v Speaker 1>Just switch it to gRPC. Yeah.

00:44:01.625 --> 00:44:03.625
<v Speaker 0>I'm just It's checking for, like, an environment

00:44:03.625 --> 00:44:06.185
<v Speaker 1>vial. Right? Yeah. Yeah. I'm just gonna cheat.

00:44:06.185 --> 00:44:06.745
<v Speaker 0>So

00:44:08.825 --> 00:44:09.945
<v Speaker 1>To gRPC

00:44:09.945 --> 00:44:11.145
<v Speaker 1>straight away.

00:44:12.505 --> 00:44:12.905
<v Speaker 1>Mhmm.

00:44:18.710 --> 00:44:19.270
<v Speaker 0>Same.

00:44:19.750 --> 00:44:21.830
<v Speaker 0>Configuration store is not configured.

00:44:22.230 --> 00:44:24.310
<v Speaker 1>Yeah. That's because, like, if you take a

00:44:24.310 --> 00:44:26.070
<v Speaker 1>look at the command in the documentation, you

00:44:26.070 --> 00:44:26.870
<v Speaker 1>need to use that,

00:44:28.105 --> 00:44:29.465
<v Speaker 1>like, the Dapr

00:44:29.465 --> 00:44:31.625
<v Speaker 1>Dapr JAML file that you're not pointing to

00:44:31.625 --> 00:44:32.745
<v Speaker 1>to start Dapr.

00:44:34.425 --> 00:44:35.225
<v Speaker 0>Alright.

00:44:35.225 --> 00:44:36.905
<v Speaker 1>Are you are you running Dapr in a

00:44:36.905 --> 00:44:38.585
<v Speaker 1>different way or not? Like Well, no. It's

00:44:38.665 --> 00:44:40.505
<v Speaker 1>have it in a different terminal? There's a

00:44:40.505 --> 00:44:42.730
<v Speaker 0>bug in your docs because it says, not

00:44:42.730 --> 00:44:44.490
<v Speaker 0>your docs, you know what mean, but it

00:44:44.490 --> 00:44:46.890
<v Speaker 0>says run Yeah. Run dash f, but that

00:44:47.690 --> 00:44:49.930
<v Speaker 0>that's not enough. It seems to be That's

00:44:49.930 --> 00:44:51.930
<v Speaker 1>not enough. And I think that the documentation

00:44:51.930 --> 00:44:53.290
<v Speaker 1>is building. We are not reading all the

00:44:53.290 --> 00:44:55.450
<v Speaker 1>lines, so I guess that the real command

00:44:55.450 --> 00:44:56.810
<v Speaker 1>that we need to run, it's down the

00:44:56.810 --> 00:44:58.545
<v Speaker 1>end. So if you check out the at

00:44:58.545 --> 00:44:59.905
<v Speaker 1>the last command

00:45:00.545 --> 00:45:02.305
<v Speaker 1>in the docs, I think that the code

00:45:02.385 --> 00:45:04.065
<v Speaker 1>documentation is building just to make sure that

00:45:04.065 --> 00:45:05.185
<v Speaker 1>you run different things.

00:45:07.025 --> 00:45:08.785
<v Speaker 1>That one. Because that one is, like, pointing

00:45:08.785 --> 00:45:10.625
<v Speaker 1>to the resource paths resources.

00:45:11.470 --> 00:45:13.070
<v Speaker 0>I know, but we try to find that

00:45:13.070 --> 00:45:15.310
<v Speaker 0>in a Dapr dot YAML. So I feel

00:45:15.310 --> 00:45:16.990
<v Speaker 0>like we shouldn't have to do that again.

00:45:17.950 --> 00:45:19.550
<v Speaker 1>Yeah. Yeah. That's

00:45:20.190 --> 00:45:21.950
<v Speaker 1>true. Let me see. Okay. Let's take a

00:45:21.950 --> 00:45:23.150
<v Speaker 1>look at the Dapr dot YAML file.

00:45:24.125 --> 00:45:25.325
<v Speaker 1>I would just want to make sure that

00:45:25.325 --> 00:45:26.925
<v Speaker 1>we are pointing to the right state store

00:45:26.925 --> 00:45:28.605
<v Speaker 1>YAML file. Right? Like, that's what we we

00:45:28.605 --> 00:45:29.405
<v Speaker 1>should check.

00:45:31.165 --> 00:45:33.405
<v Speaker 0>Alright. So does Yeah. So Is

00:45:34.365 --> 00:45:36.285
<v Speaker 1>that yeah. Exactly. We need to check that

00:45:36.285 --> 00:45:38.605
<v Speaker 1>that is pointing to the right place. Right?

00:45:48.870 --> 00:45:50.470
<v Speaker 1>It doesn't look like there there is any

00:45:50.470 --> 00:45:52.470
<v Speaker 1>resources there. Right? Three. Oh, there you go.

00:45:53.475 --> 00:45:56.035
<v Speaker 1>Oh, okay. So that's the the one there.

00:45:56.275 --> 00:45:58.355
<v Speaker 0>And this is actually our

00:45:59.395 --> 00:46:00.275
<v Speaker 0>date.

00:46:02.755 --> 00:46:04.915
<v Speaker 1>Though that's the app ID, so the concept

00:46:04.915 --> 00:46:07.900
<v Speaker 1>of application ID, it's basically giving, like, the

00:46:07.900 --> 00:46:10.060
<v Speaker 1>application an identity. Right? Like, in this case,

00:46:10.060 --> 00:46:12.220
<v Speaker 1>we have an application that's called order processor.

00:46:12.620 --> 00:46:14.300
<v Speaker 1>And this is kinda going back to the

00:46:14.300 --> 00:46:15.580
<v Speaker 1>thing that you asked before,

00:46:15.900 --> 00:46:17.660
<v Speaker 1>the idea of having scopes.

00:46:19.580 --> 00:46:19.900
<v Speaker 1>Okay.

00:46:21.695 --> 00:46:22.495
<v Speaker 0>Hey.

00:46:22.495 --> 00:46:25.775
<v Speaker 0>Oh, no. Then you oh, what's but what

00:46:25.775 --> 00:46:27.135
<v Speaker 1>do you see? What is that?

00:46:28.255 --> 00:46:29.935
<v Speaker 1>Configuration stores is

00:46:30.655 --> 00:46:32.335
<v Speaker 1>ah, it says configuration

00:46:32.335 --> 00:46:34.735
<v Speaker 1>store. Is that can you save your source

00:46:34.735 --> 00:46:34.975
<v Speaker 1>code?

00:46:36.720 --> 00:46:38.880
<v Speaker 1>Are you still using the configuration APIs?

00:46:40.400 --> 00:46:41.040
<v Speaker 0>Yes.

00:46:42.720 --> 00:46:43.680
<v Speaker 1>There you go.

00:46:46.880 --> 00:46:47.360
<v Speaker 0>Yep.

00:46:48.095 --> 00:46:50.095
<v Speaker 0>David strikes. There you go.

00:46:50.734 --> 00:46:53.055
<v Speaker 1>There you go. Well, it that was not

00:46:53.055 --> 00:46:55.135
<v Speaker 1>an easy thing to to see about. Yeah.

00:46:55.214 --> 00:46:56.974
<v Speaker 1>We need to read the error messages. There

00:46:56.974 --> 00:46:58.654
<v Speaker 1>you go. You just shouldn't trust me to

00:46:58.654 --> 00:47:00.255
<v Speaker 0>do demos. That's what it is.

00:47:00.894 --> 00:47:02.335
<v Speaker 1>No. No. I love it. I love it.

00:47:02.335 --> 00:47:03.535
<v Speaker 0>Good question for Mars.

00:47:04.580 --> 00:47:06.900
<v Speaker 0>Do we not need Redis? Where's where's Redis?

00:47:06.900 --> 00:47:08.900
<v Speaker 0>Like, what's happening? Yes.

00:47:09.460 --> 00:47:11.460
<v Speaker 1>Yeah. What's so what's happening? It's like, remember

00:47:11.460 --> 00:47:13.460
<v Speaker 1>that you run kinda like Dapr in it?

00:47:14.020 --> 00:47:15.700
<v Speaker 0>Mhmm. So if you do so if you

00:47:15.700 --> 00:47:17.140
<v Speaker 1>stop that oh,

00:47:17.380 --> 00:47:18.900
<v Speaker 1>stop that and do docker ps. Yeah.

00:47:22.215 --> 00:47:23.974
<v Speaker 1>You see that there is a Redis there.

00:47:23.974 --> 00:47:25.735
<v Speaker 1>Right? And, basically,

00:47:26.135 --> 00:47:27.974
<v Speaker 1>what the Dapr CLI is doing is just

00:47:27.974 --> 00:47:29.734
<v Speaker 1>when you do Dapr init, basically, it will

00:47:29.734 --> 00:47:31.255
<v Speaker 1>create a bunch of things out of the

00:47:31.255 --> 00:47:31.494
<v Speaker 1>box.

00:47:32.760 --> 00:47:35.000
<v Speaker 1>An interesting thing about Redis is that Redis

00:47:35.000 --> 00:47:37.000
<v Speaker 1>provides you kinda like an implementation for the

00:47:37.000 --> 00:47:39.720
<v Speaker 1>state management APIs, but also for PubSub.

00:47:39.960 --> 00:47:42.040
<v Speaker 1>So you can actually use, you know, Redis

00:47:42.040 --> 00:47:45.365
<v Speaker 1>to kinda move events around different applications. And

00:47:45.365 --> 00:47:47.365
<v Speaker 1>that's the main reason why, like, we wanted

00:47:47.365 --> 00:47:49.444
<v Speaker 1>to do kinda like a very quick easy

00:47:49.444 --> 00:47:51.525
<v Speaker 1>experience for people to not even worry about

00:47:51.525 --> 00:47:53.365
<v Speaker 1>Redis and start using, you know, the APIs

00:47:53.365 --> 00:47:54.244
<v Speaker 1>straight away.

00:47:54.565 --> 00:47:57.579
<v Speaker 0>How much of this is swappable? See, I

00:47:57.579 --> 00:47:59.339
<v Speaker 0>don't want to use Riders. I wanna use

00:47:59.339 --> 00:48:01.260
<v Speaker 0>CouchDB or MongoDB,

00:48:01.339 --> 00:48:02.140
<v Speaker 0>Postgres.

00:48:02.140 --> 00:48:04.940
<v Speaker 0>Like, is that something Dapr supports, or is

00:48:04.940 --> 00:48:06.780
<v Speaker 0>it very opinionated on what the back end

00:48:06.780 --> 00:48:08.140
<v Speaker 0>services are provided by?

00:48:08.700 --> 00:48:10.575
<v Speaker 1>No. No. No. Like, quite the opposite. I

00:48:10.655 --> 00:48:12.095
<v Speaker 1>we're just trying to support as many as

00:48:12.095 --> 00:48:13.295
<v Speaker 1>we can. So if you go to the

00:48:13.295 --> 00:48:15.055
<v Speaker 1>to the docs, I think that if you

00:48:15.055 --> 00:48:16.335
<v Speaker 1>go to the website,

00:48:16.335 --> 00:48:17.375
<v Speaker 1>you will see that

00:48:18.655 --> 00:48:20.415
<v Speaker 1>there there should be kind of the reference,

00:48:20.415 --> 00:48:22.015
<v Speaker 1>like, section, I think.

00:48:22.895 --> 00:48:23.295
<v Speaker 0>Mhmm.

00:48:24.549 --> 00:48:26.070
<v Speaker 1>And then if you look for,

00:48:27.030 --> 00:48:27.990
<v Speaker 1>component

00:48:28.630 --> 00:48:29.430
<v Speaker 1>reference,

00:48:29.430 --> 00:48:30.869
<v Speaker 1>state stores,

00:48:31.670 --> 00:48:33.430
<v Speaker 1>there you go. You have, like, the link

00:48:33.270 --> 00:48:35.270
<v Speaker 1>Wow. Yeah, of what it's supported.

00:48:37.865 --> 00:48:39.785
<v Speaker 1>So you have stuff that is self hosted

00:48:39.785 --> 00:48:42.585
<v Speaker 1>and also, like, cloud provider specific stuff. Right?

00:48:42.744 --> 00:48:45.065
<v Speaker 0>I mean, I'm I'm a postgres person. I'll

00:48:45.065 --> 00:48:46.905
<v Speaker 0>be just Yeah. I would just I would

00:48:46.905 --> 00:48:48.265
<v Speaker 0>use postgres for everything.

00:48:48.905 --> 00:48:50.905
<v Speaker 1>There you go. I then it makes total

00:48:50.905 --> 00:48:52.540
<v Speaker 1>sense. But if you scroll down, you will

00:48:52.540 --> 00:48:54.780
<v Speaker 1>see that you can swap Postgres for any

00:48:54.780 --> 00:48:55.820
<v Speaker 1>cloud provider

00:48:55.980 --> 00:48:58.380
<v Speaker 1>supported, you know, thing. Yeah. And and and

00:48:58.300 --> 00:48:59.020
<v Speaker 0>so

00:48:59.339 --> 00:49:01.020
<v Speaker 0>that's pretty cool too. Mhmm.

00:49:01.339 --> 00:49:01.740
<v Speaker 1>Yep.

00:49:04.135 --> 00:49:07.015
<v Speaker 1>Sweet. Well, that's that's the idea. And remember,

00:49:07.015 --> 00:49:09.335
<v Speaker 1>right, like, the whole point of of this

00:49:09.335 --> 00:49:10.455
<v Speaker 1>thing that we are trying to show here

00:49:10.455 --> 00:49:12.375
<v Speaker 1>is that developers can use these tools to

00:49:12.375 --> 00:49:14.135
<v Speaker 1>build the functionality.

00:49:14.135 --> 00:49:16.775
<v Speaker 1>Right? And they can trust that the APIs

00:49:16.775 --> 00:49:18.615
<v Speaker 1>will behave the same in kinda, in a

00:49:18.615 --> 00:49:21.280
<v Speaker 1>more serious environment that may be running Kubernetes

00:49:21.280 --> 00:49:23.440
<v Speaker 1>or maybe running in a cloud provider. Because

00:49:23.440 --> 00:49:25.440
<v Speaker 1>the APIs will remain the same, but the

00:49:25.440 --> 00:49:28.320
<v Speaker 1>configuration on how the components are wired and

00:49:28.320 --> 00:49:30.960
<v Speaker 1>how the, you know, infrastructure is configured, it's

00:49:30.960 --> 00:49:32.240
<v Speaker 1>it's, you know, the the

00:49:32.480 --> 00:49:34.160
<v Speaker 1>it's the responsibility of a different team.

00:49:36.375 --> 00:49:37.415
<v Speaker 0>This is cool.

00:49:38.295 --> 00:49:40.615
<v Speaker 0>Good flexibility on the secret stores too.

00:49:41.255 --> 00:49:43.255
<v Speaker 1>Mhmm. I'm just gonna look at everything. I'm

00:49:43.255 --> 00:49:44.535
<v Speaker 0>just so curious.

00:49:45.255 --> 00:49:46.935
<v Speaker 1>Yeah. So for example

00:49:47.900 --> 00:49:49.900
<v Speaker 1>yeah. Because, like, that's another thing that people

00:49:49.900 --> 00:49:52.700
<v Speaker 1>will need, like, distributed locks. Right? Just need,

00:49:52.700 --> 00:49:54.540
<v Speaker 1>a way to say, okay. I want to

00:49:55.900 --> 00:49:58.060
<v Speaker 1>have a distributed lock implementation. You can do

00:49:58.060 --> 00:49:58.540
<v Speaker 1>that with that.

00:50:00.835 --> 00:50:03.075
<v Speaker 0>Nice. Very cool. Alright.

00:50:04.755 --> 00:50:06.915
<v Speaker 0>I I could explore this for hours,

00:50:07.235 --> 00:50:08.835
<v Speaker 0>but I'm gonna try not to do But

00:50:09.795 --> 00:50:11.555
<v Speaker 1>we want it we want it working. Right?

00:50:11.555 --> 00:50:13.475
<v Speaker 1>I feel that's kinda important. Like, at least

00:50:13.475 --> 00:50:14.755
<v Speaker 1>they're getting a start up experience.

00:50:15.380 --> 00:50:18.340
<v Speaker 0>Yeah. We did. So, you know, I always

00:50:18.340 --> 00:50:20.100
<v Speaker 0>like to do little recaps,

00:50:20.100 --> 00:50:20.500
<v Speaker 0>but,

00:50:21.060 --> 00:50:23.060
<v Speaker 0>know, the Dapr promise here is,

00:50:23.380 --> 00:50:24.500
<v Speaker 0>heck your language

00:50:24.740 --> 00:50:26.740
<v Speaker 0>of which there was a few supported. Right?

00:50:26.740 --> 00:50:28.580
<v Speaker 0>So you've got the buried

00:50:30.515 --> 00:50:31.315
<v Speaker 0>Python,

00:50:31.394 --> 00:50:34.755
<v Speaker 0>JavaScript, I'll assume TypeScript is just supported

00:50:34.755 --> 00:50:35.635
<v Speaker 0>by default.

00:50:36.035 --> 00:50:38.355
<v Speaker 0>Any of the dot net languages, I'm assuming

00:50:39.075 --> 00:50:41.714
<v Speaker 0>Java and go. Like, what is the

00:50:42.240 --> 00:50:44.720
<v Speaker 0>other plans to add more languages, like like

00:50:44.720 --> 00:50:45.520
<v Speaker 0>Rust,

00:50:45.520 --> 00:50:47.680
<v Speaker 0>for instance? Yeah. Yeah. So there is a

00:50:47.680 --> 00:50:49.120
<v Speaker 1>Rust SDK as well.

00:50:49.440 --> 00:50:51.840
<v Speaker 1>But, yeah, it's kinda community support. It really

00:50:51.840 --> 00:50:53.680
<v Speaker 1>depends on on how much community do we

00:50:53.680 --> 00:50:55.040
<v Speaker 1>do we get, and if we can get,

00:50:55.040 --> 00:50:56.880
<v Speaker 1>like, someone to help us to create the

00:50:56.880 --> 00:50:59.615
<v Speaker 1>SDK. There were some conversations about creating some

00:50:59.615 --> 00:51:02.575
<v Speaker 1>Swift also, like Apple with SDKs,

00:51:02.575 --> 00:51:04.494
<v Speaker 1>which makes a lot of sense because when

00:51:04.494 --> 00:51:06.415
<v Speaker 1>you think about these APIs, I do think

00:51:06.415 --> 00:51:08.335
<v Speaker 1>a lot about, like, mobile as well. Right?

00:51:08.335 --> 00:51:10.255
<v Speaker 1>Like, you can build an application and just

00:51:10.255 --> 00:51:12.175
<v Speaker 1>use these APIs to, basically,

00:51:13.010 --> 00:51:15.170
<v Speaker 1>do the back end implementations of things.

00:51:15.490 --> 00:51:16.210
<v Speaker 1>So, yeah,

00:51:16.770 --> 00:51:18.770
<v Speaker 1>they are, like, more I think that if

00:51:18.770 --> 00:51:21.010
<v Speaker 1>you go to the GitHub repository, you will

00:51:21.010 --> 00:51:22.850
<v Speaker 1>find, like, all the SDKs as well.

00:51:24.050 --> 00:51:25.569
<v Speaker 1>Let me see if I can quickly check.

00:51:26.925 --> 00:51:35.645
<v Speaker 1>Yeah. DaprDapr..com

00:51:35.645 --> 00:51:37.485
<v Speaker 1>Dapr Dapr. And then I think that you

00:51:37.485 --> 00:51:39.485
<v Speaker 1>need to search for so sorry. No. It's

00:51:39.485 --> 00:51:40.605
<v Speaker 1>like just Dapr,

00:51:41.240 --> 00:51:42.839
<v Speaker 1>the org. If you go to the org

00:51:42.839 --> 00:51:44.440
<v Speaker 1>and then search for repositories

00:51:44.440 --> 00:51:48.280
<v Speaker 1>with SDK in Rust, c plus plus, PHP.

00:51:48.839 --> 00:51:50.119
<v Speaker 0>Mhmm. So

00:51:50.280 --> 00:51:51.880
<v Speaker 0>why are those those just aren't on the

00:51:51.880 --> 00:51:54.359
<v Speaker 0>documentation page because their community is supported at

00:51:54.359 --> 00:51:55.079
<v Speaker 0>the moment. Is that right?

00:51:55.935 --> 00:51:57.615
<v Speaker 1>Yeah. And probably, they are a little bit

00:51:57.615 --> 00:52:00.975
<v Speaker 1>less mature. Right? So or probably, we don't

00:52:00.975 --> 00:52:02.415
<v Speaker 1>have someone, you know, like the Rask one

00:52:02.415 --> 00:52:05.135
<v Speaker 1>is marked as alpha because, again, we probably

00:52:05.135 --> 00:52:07.295
<v Speaker 1>have a single community member contributing.

00:52:07.295 --> 00:52:09.295
<v Speaker 1>And most of the other SDKs, are, like,

00:52:09.295 --> 00:52:12.440
<v Speaker 1>different companies helping and and providing implementations and

00:52:12.440 --> 00:52:14.839
<v Speaker 1>tests and making sure that the the SDKs

00:52:14.839 --> 00:52:15.400
<v Speaker 1>work.

00:52:15.800 --> 00:52:17.960
<v Speaker 1>So I'm guessing that the ones that are

00:52:17.960 --> 00:52:19.880
<v Speaker 1>listed there are part of, like, the, like,

00:52:19.880 --> 00:52:21.880
<v Speaker 1>the main project release process,

00:52:22.119 --> 00:52:23.960
<v Speaker 1>and that's why they are just listed and

00:52:23.960 --> 00:52:25.079
<v Speaker 1>documented all over the place.

00:52:26.705 --> 00:52:27.905
<v Speaker 0>Alright. So,

00:52:28.225 --> 00:52:30.305
<v Speaker 0>again, back to the recap. We have lots

00:52:30.305 --> 00:52:31.665
<v Speaker 0>of supported languages,

00:52:31.745 --> 00:52:33.665
<v Speaker 0>potential for more, if you're well dependent effort

00:52:33.665 --> 00:52:34.945
<v Speaker 0>to work on an SDK.

00:52:35.105 --> 00:52:36.945
<v Speaker 0>Once you have the client and your application,

00:52:36.945 --> 00:52:38.865
<v Speaker 0>you start to consume the APIs. We've seen

00:52:38.865 --> 00:52:40.385
<v Speaker 0>state management or pubsub,

00:52:42.100 --> 00:52:43.780
<v Speaker 0>binders and actors. Let's go back to that

00:52:43.780 --> 00:52:45.220
<v Speaker 0>in a moment and have a quick conversation.

00:52:45.220 --> 00:52:49.220
<v Speaker 0>Secrets management config, cool, workflow and cryptography.

00:52:49.460 --> 00:52:50.100
<v Speaker 0>So

00:52:50.260 --> 00:52:51.460
<v Speaker 0>what are bindings?

00:52:52.500 --> 00:52:55.140
<v Speaker 1>Bindings. Think about bindings. I would like interacting

00:52:55.140 --> 00:52:56.100
<v Speaker 1>with external

00:52:56.694 --> 00:52:57.655
<v Speaker 1>services.

00:52:58.295 --> 00:53:00.295
<v Speaker 1>Right? Like, external APIs.

00:53:00.454 --> 00:53:02.375
<v Speaker 1>Imagine that you want to call, like,

00:53:03.174 --> 00:53:05.974
<v Speaker 1>Stripe APIs. What is that example doing? Interacting

00:53:05.974 --> 00:53:07.575
<v Speaker 1>with the cron job or something. Right?

00:53:08.135 --> 00:53:09.815
<v Speaker 0>Let's take a look at the Go code

00:53:09.815 --> 00:53:10.214
<v Speaker 0>this time.

00:53:18.720 --> 00:53:21.040
<v Speaker 0>Don't know what Yeah. Think that's just just

00:53:21.520 --> 00:53:24.560
<v Speaker 1>basically executing some external stuff. Right? Okay.

00:53:25.520 --> 00:53:25.920
<v Speaker 1>Yeah.

00:53:27.305 --> 00:53:28.744
<v Speaker 0>But this is a cron to run every

00:53:28.744 --> 00:53:29.625
<v Speaker 0>ten seconds.

00:53:30.184 --> 00:53:31.865
<v Speaker 1>Exactly. But by things, I think that it's

00:53:31.865 --> 00:53:34.505
<v Speaker 1>like it's like a an API just that

00:53:34.505 --> 00:53:37.785
<v Speaker 1>enable you to create different connections to different

00:53:37.785 --> 00:53:39.865
<v Speaker 1>things that are not covered by the other

00:53:39.865 --> 00:53:40.265
<v Speaker 1>APIs.

00:53:40.960 --> 00:53:42.800
<v Speaker 1>Right? Imagine that you want to interact with

00:53:42.800 --> 00:53:44.480
<v Speaker 1>a payment service or something, and you want

00:53:44.480 --> 00:53:47.200
<v Speaker 1>to use the same, you know, resiliency policies

00:53:47.200 --> 00:53:49.440
<v Speaker 1>that you're using for all the other APIs.

00:53:49.840 --> 00:53:52.080
<v Speaker 1>Or, like, this gives you all those mechanisms,

00:53:52.400 --> 00:53:54.080
<v Speaker 1>but an extension point just to interact with

00:53:54.080 --> 00:53:54.800
<v Speaker 1>whatever you want.

00:53:56.915 --> 00:53:57.635
<v Speaker 0>Alright.

00:53:57.955 --> 00:53:58.835
<v Speaker 0>Actors.

00:53:58.995 --> 00:54:00.835
<v Speaker 0>I'm a big fan of the actor model,

00:54:00.835 --> 00:54:02.115
<v Speaker 0>so I'm hoping that Dapr is gonna make

00:54:02.115 --> 00:54:03.795
<v Speaker 0>my life a lot easier there too.

00:54:04.435 --> 00:54:06.435
<v Speaker 1>Yeah. So this have, like, a lot of

00:54:06.435 --> 00:54:08.435
<v Speaker 1>that stuff in there. I'm not the big

00:54:08.435 --> 00:54:10.115
<v Speaker 1>fan of that either, and I'm not an

00:54:10.115 --> 00:54:11.555
<v Speaker 1>expert on myself.

00:54:12.090 --> 00:54:13.850
<v Speaker 1>But, yeah, that provides you kinda get an

00:54:13.850 --> 00:54:17.130
<v Speaker 1>actor runtime inside the sidecar itself. Yeah. .Net

00:54:17.130 --> 00:54:19.290
<v Speaker 0>is really leading the charge with actor stuff,

00:54:19.290 --> 00:54:21.130
<v Speaker 0>especially the Orleans project where you have got

00:54:21.130 --> 00:54:24.410
<v Speaker 0>virtual actors. The idea being that every entity

00:54:24.410 --> 00:54:26.650
<v Speaker 0>within your system, like, user would be a

00:54:26.650 --> 00:54:28.705
<v Speaker 0>virtual actor. You could send messages to that

00:54:28.705 --> 00:54:30.305
<v Speaker 0>one specific actor and then react to it.

00:54:30.305 --> 00:54:31.505
<v Speaker 0>It's such a cool part.

00:54:31.984 --> 00:54:33.265
<v Speaker 0>I haven't seen

00:54:33.265 --> 00:54:35.265
<v Speaker 0>anything real worldly production

00:54:35.345 --> 00:54:37.185
<v Speaker 0>except for our stuff on top of New

00:54:37.185 --> 00:54:37.745
<v Speaker 0>Orleans.

00:54:38.305 --> 00:54:40.545
<v Speaker 0>The stuff on top of Orleans and I'd

00:54:40.545 --> 00:54:42.224
<v Speaker 0>love to see other languages really get there.

00:54:42.770 --> 00:54:45.730
<v Speaker 0>Alright. And then lastly, we've got workflows,

00:54:45.730 --> 00:54:47.730
<v Speaker 0>which you kind of spoke about briefly, but

00:54:47.730 --> 00:54:49.330
<v Speaker 0>this is durable execution.

00:54:50.130 --> 00:54:52.930
<v Speaker 1>Exactly. Super exciting things. Right? Because we all

00:54:52.930 --> 00:54:55.410
<v Speaker 0>want more resilient and reliable applications. So this,

00:54:55.605 --> 00:54:57.045
<v Speaker 0>I love that Dapr is gonna make that

00:54:57.045 --> 00:54:57.765
<v Speaker 0>easier too.

00:54:58.165 --> 00:55:00.005
<v Speaker 1>Yeah. And and you can imagine, right, like,

00:55:00.005 --> 00:55:02.165
<v Speaker 1>workflows needs to store a state. Workflows will

00:55:02.165 --> 00:55:04.725
<v Speaker 1>emit events when they move from from different

00:55:04.725 --> 00:55:06.645
<v Speaker 1>activities, and you want to make sure that,

00:55:06.805 --> 00:55:08.565
<v Speaker 1>you know, if you're trying to execute something

00:55:08.565 --> 00:55:10.470
<v Speaker 1>or waiting on something for five minutes and

00:55:10.470 --> 00:55:12.470
<v Speaker 1>it's not happening, then you can immediately vent.

00:55:12.470 --> 00:55:13.990
<v Speaker 1>All those kind of patterns can be built

00:55:13.990 --> 00:55:15.350
<v Speaker 1>with this functionality.

00:55:16.550 --> 00:55:17.830
<v Speaker 0>Alright. Awesome.

00:55:18.470 --> 00:55:20.070
<v Speaker 1>One thing that I wanted to one thing

00:55:20.070 --> 00:55:21.750
<v Speaker 1>that I wanted to clarify on the languages,

00:55:21.750 --> 00:55:23.925
<v Speaker 1>right, because I think that this is important.

00:55:23.925 --> 00:55:25.605
<v Speaker 1>As I mentioned at the beginning, right, like,

00:55:25.605 --> 00:55:28.565
<v Speaker 1>Dapr is exposing HTTP and gRPC endpoints.

00:55:28.725 --> 00:55:30.645
<v Speaker 1>So if for some reason, you are working

00:55:30.645 --> 00:55:32.645
<v Speaker 1>with a language that it's not currently supported

00:55:32.645 --> 00:55:34.725
<v Speaker 1>and we don't provide an SDK, you can

00:55:34.725 --> 00:55:37.205
<v Speaker 1>actually craft the HTTP request or the gRPC

00:55:37.205 --> 00:55:37.845
<v Speaker 1>requests

00:55:38.300 --> 00:55:40.140
<v Speaker 1>by hand, and you don't actually need to

00:55:40.140 --> 00:55:41.900
<v Speaker 1>add any library to your application.

00:55:42.460 --> 00:55:44.300
<v Speaker 0>Oh, so I could just generate a gRPC

00:55:44.300 --> 00:55:45.980
<v Speaker 0>client from the profile, so then use it

00:55:45.980 --> 00:55:48.300
<v Speaker 0>in any language, really. %.

00:55:48.300 --> 00:55:48.860
<v Speaker 1>Yeah.

00:55:50.220 --> 00:55:52.605
<v Speaker 0>Oh, you're making me smile. I like it.

00:55:52.605 --> 00:55:54.205
<v Speaker 1>Yeah. Yeah. Yeah. Yeah. This is this is

00:55:54.205 --> 00:55:56.285
<v Speaker 1>pretty good. The the the main thing about,

00:55:56.285 --> 00:55:58.125
<v Speaker 1>like, the SDKs is that we will try

00:55:58.125 --> 00:56:00.365
<v Speaker 1>to make things even easier for developers to

00:56:00.365 --> 00:56:01.965
<v Speaker 1>get started with basic stuff.

00:56:02.285 --> 00:56:02.925
<v Speaker 1>Right?

00:56:03.085 --> 00:56:04.869
<v Speaker 1>But, yeah, like, even you can just do

00:56:04.869 --> 00:56:06.710
<v Speaker 1>actually HTTP. Right? Like, if you're in a

00:56:06.710 --> 00:56:09.110
<v Speaker 1>limit limited device where gRPC is not available

00:56:09.110 --> 00:56:11.590
<v Speaker 1>or whatever, you can just go HTTP. The

00:56:11.590 --> 00:56:13.510
<v Speaker 1>HTTP way will just send a post request

00:56:13.510 --> 00:56:15.670
<v Speaker 1>to an URL in local host, and there

00:56:15.670 --> 00:56:15.990
<v Speaker 1>you go.

00:56:17.394 --> 00:56:18.195
<v Speaker 0>Alright.

00:56:19.234 --> 00:56:20.835
<v Speaker 0>Do you still wish to show us something

00:56:20.835 --> 00:56:21.474
<v Speaker 0>interesting?

00:56:22.674 --> 00:56:24.115
<v Speaker 1>I can try to show something in in

00:56:24.115 --> 00:56:26.115
<v Speaker 1>less than ten minutes, like, pretty much the

00:56:26.115 --> 00:56:27.714
<v Speaker 1>same thing that you showed, but something that

00:56:27.714 --> 00:56:30.035
<v Speaker 1>I've been working on that maybe it's maybe

00:56:30.035 --> 00:56:32.000
<v Speaker 1>worth to discuss a little bit. Yeah. Let's

00:56:32.000 --> 00:56:33.280
<v Speaker 0>go for it. If you just wanna pull

00:56:33.280 --> 00:56:34.560
<v Speaker 0>it up, and I'll stick your screen on

00:56:34.560 --> 00:56:35.600
<v Speaker 0>in just a second.

00:56:36.079 --> 00:56:37.280
<v Speaker 1>Let's do it.

00:56:38.400 --> 00:56:40.160
<v Speaker 0>Alright. And you see my screen? Yep. We

00:56:40.160 --> 00:56:41.200
<v Speaker 0>see your terminal.

00:56:42.000 --> 00:56:42.720
<v Speaker 1>Perfect.

00:56:42.800 --> 00:56:44.800
<v Speaker 1>Let me see if I can find another

00:56:44.800 --> 00:56:46.319
<v Speaker 1>thing that I wanted to show here.

00:56:46.925 --> 00:56:49.885
<v Speaker 1>So sorry about that. So yeah. So, like,

00:56:49.885 --> 00:56:51.325
<v Speaker 1>a little bit of background

00:56:51.325 --> 00:56:53.005
<v Speaker 1>on this. Basically, I I'm just writing a

00:56:53.005 --> 00:56:54.685
<v Speaker 1>series of blog posts, and I've started with

00:56:54.685 --> 00:56:56.285
<v Speaker 1>State Store. The same reason why we started

00:56:56.285 --> 00:56:57.965
<v Speaker 1>here because it's kinda, like, easy to get

00:56:57.965 --> 00:56:58.525
<v Speaker 1>what it's doing.

00:56:59.510 --> 00:57:01.670
<v Speaker 1>But the main thing that I'm trying to

00:57:01.670 --> 00:57:03.590
<v Speaker 1>cover in this block series,

00:57:03.670 --> 00:57:05.750
<v Speaker 1>and I'm doing kinda, like, examples with that,

00:57:05.990 --> 00:57:08.630
<v Speaker 1>is how do you like, the developer experience.

00:57:08.630 --> 00:57:10.869
<v Speaker 1>Right? You just use the Dapr c like,

00:57:10.869 --> 00:57:12.955
<v Speaker 1>the Dapr CLI. And for that, you can

00:57:12.955 --> 00:57:14.875
<v Speaker 1>actually need to learn how Dapr,

00:57:14.955 --> 00:57:16.155
<v Speaker 1>the APIs,

00:57:16.155 --> 00:57:18.315
<v Speaker 1>and what does it means, and how Dapr

00:57:18.315 --> 00:57:20.955
<v Speaker 1>works because you're starting some containers locally.

00:57:21.355 --> 00:57:23.195
<v Speaker 1>And that might be a little bit too

00:57:23.195 --> 00:57:26.020
<v Speaker 1>complicated for developers that are not even interested

00:57:26.020 --> 00:57:27.380
<v Speaker 1>in that. They just want to use if

00:57:27.380 --> 00:57:28.980
<v Speaker 1>we want to enable developers to use the

00:57:28.980 --> 00:57:29.780
<v Speaker 1>APIs,

00:57:30.020 --> 00:57:31.540
<v Speaker 1>we just need to integrate a little bit

00:57:31.540 --> 00:57:32.980
<v Speaker 1>deeper with their ecosystem.

00:57:33.140 --> 00:57:35.299
<v Speaker 1>And I've been working kinda with some Dapr

00:57:35.299 --> 00:57:36.900
<v Speaker 1>and Spring Boot integrations

00:57:37.075 --> 00:57:39.955
<v Speaker 1>that basically it's they are aiming for just

00:57:39.955 --> 00:57:42.355
<v Speaker 1>doing that. So the blog post basically covers

00:57:42.355 --> 00:57:43.715
<v Speaker 1>kinda like the APIs.

00:57:44.275 --> 00:57:45.635
<v Speaker 1>And let me show you here. So I

00:57:45.635 --> 00:57:46.035
<v Speaker 1>have, like

00:57:46.675 --> 00:57:49.075
<v Speaker 1>this is like a Java application using the

00:57:49.075 --> 00:57:51.660
<v Speaker 1>state store APIs. Same way, same thing, basically,

00:57:51.660 --> 00:57:53.260
<v Speaker 1>that what you saw. Like, we are using,

00:57:53.260 --> 00:57:55.500
<v Speaker 1>you know, client. We have a Dapr client.

00:57:55.500 --> 00:57:56.540
<v Speaker 1>And as soon as we have a Dapr

00:57:56.540 --> 00:57:58.780
<v Speaker 1>client, we have, like, the same state API

00:57:58.780 --> 00:58:01.180
<v Speaker 1>here. Right? Same thing. We need the state

00:58:01.180 --> 00:58:02.940
<v Speaker 1>state store name, and then we will just

00:58:02.940 --> 00:58:04.780
<v Speaker 1>send the customer object in this case that

00:58:04.780 --> 00:58:05.740
<v Speaker 1>will be serialized

00:58:06.174 --> 00:58:08.655
<v Speaker 1>and stored in a key value store somewhere.

00:58:09.214 --> 00:58:11.855
<v Speaker 1>And, again, two different functions, two different methods

00:58:11.855 --> 00:58:14.095
<v Speaker 1>here in Java, and another one for just

00:58:14.095 --> 00:58:16.015
<v Speaker 1>reading state, just getting, in this case, a

00:58:16.015 --> 00:58:17.214
<v Speaker 1>customer information

00:58:17.214 --> 00:58:19.680
<v Speaker 1>into the key value store. Same thing.

00:58:20.000 --> 00:58:22.880
<v Speaker 1>The only big difference here is that I

00:58:22.880 --> 00:58:25.440
<v Speaker 1>don't have the Dapr CLI installed, and I

00:58:25.440 --> 00:58:27.599
<v Speaker 1>do not have anything Dapr

00:58:27.599 --> 00:58:28.720
<v Speaker 1>related running.

00:58:28.800 --> 00:58:31.040
<v Speaker 1>But with this kinda, like, integration between Spring

00:58:31.040 --> 00:58:33.705
<v Speaker 1>Boot and Dapr, which is basically a dependency

00:58:33.705 --> 00:58:35.705
<v Speaker 1>that we need to add to our application

00:58:36.745 --> 00:58:38.025
<v Speaker 1>that I'm trying to figure out where it

00:58:38.025 --> 00:58:39.545
<v Speaker 1>is here. So there is just a dependency

00:58:39.545 --> 00:58:42.745
<v Speaker 1>that you add that basically will bring some

00:58:42.745 --> 00:58:45.385
<v Speaker 1>configurations using a project that's called test containers

00:58:45.385 --> 00:58:46.425
<v Speaker 1>to bootstrap

00:58:47.109 --> 00:58:49.750
<v Speaker 1>all the Dapr related configuration for this Spring

00:58:49.750 --> 00:58:50.630
<v Speaker 1>Boot application.

00:58:50.950 --> 00:58:52.550
<v Speaker 1>And what lets me what this lets me

00:58:52.550 --> 00:58:54.710
<v Speaker 1>do is that I cannot only

00:58:55.750 --> 00:58:57.670
<v Speaker 1>start my application and Dapr at the same

00:58:57.670 --> 00:58:59.589
<v Speaker 1>time, but what I can do now is

00:58:59.589 --> 00:59:01.910
<v Speaker 1>I can write some tests testing for my

00:59:01.910 --> 00:59:02.470
<v Speaker 1>application

00:59:02.885 --> 00:59:05.045
<v Speaker 1>that basically will use that configuration.

00:59:05.444 --> 00:59:08.244
<v Speaker 1>The when when I'm starting my tests, Dapr

00:59:08.244 --> 00:59:10.165
<v Speaker 1>will be started, configured,

00:59:10.165 --> 00:59:12.165
<v Speaker 1>and be ready for my application to basically

00:59:12.165 --> 00:59:13.685
<v Speaker 1>call the APIs.

00:59:13.685 --> 00:59:15.830
<v Speaker 1>So I have a simple application level a

00:59:15.910 --> 00:59:18.310
<v Speaker 1>test here, which is basically calling my application

00:59:18.310 --> 00:59:19.190
<v Speaker 1>APIs.

00:59:19.350 --> 00:59:21.830
<v Speaker 1>But in the background, the test container library

00:59:21.830 --> 00:59:23.910
<v Speaker 1>and the Dapr integration will bootstrap all the

00:59:23.910 --> 00:59:25.190
<v Speaker 1>things that Dapr needs

00:59:25.510 --> 00:59:28.865
<v Speaker 1>for for this specific application without the developer

00:59:28.865 --> 00:59:31.984
<v Speaker 1>basically understanding what Dapr is or how is

00:59:31.984 --> 00:59:33.905
<v Speaker 1>it configured. They only need to the only

00:59:33.905 --> 00:59:35.265
<v Speaker 1>thing that they need is just what you

00:59:35.265 --> 00:59:37.345
<v Speaker 1>were doing before, David, which is, like, just

00:59:37.345 --> 00:59:39.185
<v Speaker 1>have the ID, just to auto complete all

00:59:39.185 --> 00:59:41.025
<v Speaker 1>the operations that we have for different,

00:59:41.430 --> 00:59:44.070
<v Speaker 1>you know, building blocks that we expose.

00:59:45.030 --> 00:59:46.790
<v Speaker 1>And just to show that, basically,

00:59:47.270 --> 00:59:49.750
<v Speaker 1>we use Maven in in in Java. I

00:59:49.750 --> 00:59:51.510
<v Speaker 1>don't know how many people is familiar with

00:59:51.510 --> 00:59:52.790
<v Speaker 1>that, but what I wanted to show here

00:59:52.790 --> 00:59:54.390
<v Speaker 1>is that I can do something like test

00:59:54.390 --> 00:59:56.925
<v Speaker 1>run-in this case, which basically will allow me

00:59:56.925 --> 00:59:58.605
<v Speaker 1>to start the application in in kind of

00:59:58.605 --> 01:00:00.365
<v Speaker 1>some kind of, like, development mode.

01:00:00.685 --> 01:00:01.965
<v Speaker 1>And when I run this,

01:00:02.285 --> 01:00:04.125
<v Speaker 1>if I'm in the right place I'm not

01:00:04.125 --> 01:00:05.645
<v Speaker 1>in the right place there. There you go.

01:00:05.645 --> 01:00:08.685
<v Speaker 1>That's the customer catalog service that I built.

01:00:09.190 --> 01:00:10.790
<v Speaker 1>When I run this, basically, what I would

01:00:10.790 --> 01:00:12.550
<v Speaker 1>have is my application starting.

01:00:12.870 --> 01:00:14.150
<v Speaker 1>But as you can see here in the

01:00:14.150 --> 01:00:15.750
<v Speaker 1>logs, you will see if I make it

01:00:15.750 --> 01:00:16.950
<v Speaker 1>a little bit smaller,

01:00:17.110 --> 01:00:19.190
<v Speaker 1>you will see that when my application start,

01:00:19.190 --> 01:00:22.070
<v Speaker 1>it also brings, you know, some Dapr containers

01:00:22.070 --> 01:00:24.355
<v Speaker 1>into the mix. That basically means that now

01:00:24.355 --> 01:00:26.515
<v Speaker 1>my application can call these APIs, and I

01:00:26.515 --> 01:00:28.275
<v Speaker 1>can send request to these, you know, to

01:00:28.275 --> 01:00:29.235
<v Speaker 1>these APIs

01:00:30.035 --> 01:00:32.275
<v Speaker 1>and and and just use them.

01:00:33.875 --> 01:00:35.955
<v Speaker 1>There you go. Wrong wrong directory. So in

01:00:35.955 --> 01:00:37.635
<v Speaker 1>this case, I'm just sending a customer to

01:00:37.635 --> 01:00:39.970
<v Speaker 1>my, you know, to my h HTTP endpoint

01:00:39.970 --> 01:00:41.650
<v Speaker 1>that is being exposed by the application.

01:00:41.890 --> 01:00:43.570
<v Speaker 1>And this piece this is using the state

01:00:43.570 --> 01:00:46.210
<v Speaker 1>store API to store it in Redis or

01:00:46.210 --> 01:00:48.530
<v Speaker 1>in in somewhere. Like, from the developer point

01:00:48.530 --> 01:00:49.970
<v Speaker 1>of view, it doesn't really matter where it's

01:00:49.970 --> 01:00:51.650
<v Speaker 1>getting stored. The only thing that it matters

01:00:51.650 --> 01:00:54.285
<v Speaker 1>is that it's actually doing that. I can

01:00:54.285 --> 01:00:56.525
<v Speaker 1>actually test that by just sending another request

01:00:57.085 --> 01:00:58.925
<v Speaker 1>just to get that customer by ID, and

01:00:58.925 --> 01:01:00.525
<v Speaker 1>and there you go. So there you have

01:01:00.525 --> 01:01:01.085
<v Speaker 1>it.

01:01:02.525 --> 01:01:05.325
<v Speaker 1>For we David, we haven't talked about Kubernetes

01:01:05.325 --> 01:01:07.805
<v Speaker 1>at all. So if we have, kinda like,

01:01:07.800 --> 01:01:09.720
<v Speaker 1>two minutes, I can show something around that

01:01:09.720 --> 01:01:12.040
<v Speaker 1>space just for people to understand how it

01:01:12.040 --> 01:01:13.000
<v Speaker 1>works usually.

01:01:13.400 --> 01:01:15.720
<v Speaker 0>Yeah. Of course. I'll I'll also say that

01:01:15.720 --> 01:01:17.000
<v Speaker 0>in over 200

01:01:17.640 --> 01:01:20.200
<v Speaker 0>Rawkode lives, you're the first person to ever

01:01:20.200 --> 01:01:21.480
<v Speaker 0>show Java code.

01:01:22.404 --> 01:01:23.525
<v Speaker 1>There you go.

01:01:25.045 --> 01:01:27.045
<v Speaker 1>That's kinda interesting. And I think that that's

01:01:27.045 --> 01:01:28.805
<v Speaker 1>a there is a reason behind that.

01:01:29.365 --> 01:01:31.285
<v Speaker 1>I I'm a strong believer that

01:01:31.525 --> 01:01:33.684
<v Speaker 1>at the beginning, kinda like Java took quite

01:01:33.684 --> 01:01:35.250
<v Speaker 1>a lot of time to get into the

01:01:35.250 --> 01:01:37.650
<v Speaker 1>Kubernetes land, but now more and more companies

01:01:37.650 --> 01:01:39.970
<v Speaker 1>that are Java based, are Java shops,

01:01:40.290 --> 01:01:42.130
<v Speaker 1>are reaching to this maturity level where they

01:01:42.130 --> 01:01:44.050
<v Speaker 1>actually want their to get their Java workloads

01:01:44.050 --> 01:01:45.490
<v Speaker 1>up and running. The

01:01:46.050 --> 01:01:47.730
<v Speaker 1>the main reason why I'm building this integration

01:01:47.730 --> 01:01:49.250
<v Speaker 1>is because we want to make sure that

01:01:49.250 --> 01:01:50.645
<v Speaker 1>for these teams,

01:01:50.645 --> 01:01:52.325
<v Speaker 1>we just made their life easier. We're just

01:01:52.325 --> 01:01:54.885
<v Speaker 1>not adding crazy new tools and new workflows.

01:01:54.885 --> 01:01:56.805
<v Speaker 1>They just gonna keep doing what they're doing,

01:01:56.805 --> 01:01:58.885
<v Speaker 1>building applications in the same way, and and

01:01:58.885 --> 01:02:01.365
<v Speaker 1>just running these applications in Kubernetes.

01:02:01.925 --> 01:02:03.890
<v Speaker 1>So what I did before is just run

01:02:03.890 --> 01:02:05.730
<v Speaker 1>the application locally. What I will do now,

01:02:05.730 --> 01:02:07.170
<v Speaker 1>if you don't mind, I will just use

01:02:07.170 --> 01:02:10.370
<v Speaker 1>kind to create a cluster. K. Create cluster.

01:02:10.370 --> 01:02:12.690
<v Speaker 1>Right? So that's for people who doesn't know,

01:02:12.690 --> 01:02:14.770
<v Speaker 1>I guess, that they you know, like, just

01:02:14.770 --> 01:02:16.930
<v Speaker 1>the local Kubernetes cluster. Right? Yep.

01:02:17.955 --> 01:02:19.155
<v Speaker 1>Pretty simple stuff.

01:02:19.875 --> 01:02:21.715
<v Speaker 1>When you use the Dapr CLI, again, we

01:02:21.715 --> 01:02:23.235
<v Speaker 1>were using Docker to start

01:02:23.475 --> 01:02:25.315
<v Speaker 1>what we call the Dapr sidecar.

01:02:25.315 --> 01:02:27.875
<v Speaker 1>That's the sidecar that will be running very

01:02:27.875 --> 01:02:29.955
<v Speaker 1>close to your application with all the APIs.

01:02:29.955 --> 01:02:30.195
<v Speaker 1>Right?

01:02:30.860 --> 01:02:32.700
<v Speaker 1>And when you're running in Kubernetes, it's a

01:02:32.700 --> 01:02:34.220
<v Speaker 1>little bit different. What we do is we

01:02:34.220 --> 01:02:36.540
<v Speaker 1>install a control plane, a Dapr control plane

01:02:36.540 --> 01:02:37.900
<v Speaker 1>into your cluster.

01:02:38.220 --> 01:02:40.140
<v Speaker 1>And that control plane will be looking for

01:02:40.140 --> 01:02:42.300
<v Speaker 1>all the workloads that are running in the

01:02:42.300 --> 01:02:44.220
<v Speaker 1>cluster that contain some annotations

01:02:44.525 --> 01:02:46.765
<v Speaker 1>and only enable those workloads with the Dapr

01:02:46.765 --> 01:02:47.565
<v Speaker 1>APIs.

01:02:47.885 --> 01:02:49.645
<v Speaker 1>So let's just do that, I guess. Let

01:02:49.645 --> 01:02:51.565
<v Speaker 1>me install let's install Dapr.

01:02:52.125 --> 01:02:55.085
<v Speaker 1>You install the Dapr control pane using Helm.

01:02:55.725 --> 01:02:57.725
<v Speaker 1>There are a couple of different alternatives. I

01:02:57.725 --> 01:03:00.030
<v Speaker 1>think that we have an operator

01:03:00.990 --> 01:03:03.070
<v Speaker 1>that was created for OpenShift that you can

01:03:03.070 --> 01:03:03.870
<v Speaker 1>use as well,

01:03:04.830 --> 01:03:06.750
<v Speaker 1>or you can use the operator for any

01:03:06.750 --> 01:03:08.430
<v Speaker 1>other kind of clusters as well.

01:03:08.910 --> 01:03:11.630
<v Speaker 1>So this is basically installing, you know, a

01:03:11.630 --> 01:03:14.190
<v Speaker 1>health chart that contains all the Dapr

01:03:14.795 --> 01:03:17.835
<v Speaker 1>control plane components that are looking for Dapr

01:03:17.835 --> 01:03:21.355
<v Speaker 1>workflows and Dapr workloads and also connecting the

01:03:21.355 --> 01:03:23.515
<v Speaker 1>component definitions that we have.

01:03:23.915 --> 01:03:24.475
<v Speaker 1>So

01:03:24.715 --> 01:03:26.555
<v Speaker 1>what we just did is that

01:03:26.810 --> 01:03:28.570
<v Speaker 1>just created a new namespace,

01:03:28.730 --> 01:03:30.570
<v Speaker 1>and a couple of components are running inside

01:03:30.570 --> 01:03:32.010
<v Speaker 1>these reports.

01:03:34.330 --> 01:03:36.250
<v Speaker 1>Alright. So that's the control plane. Right? Like,

01:03:36.250 --> 01:03:38.170
<v Speaker 1>there are a bunch of things running

01:03:38.170 --> 01:03:39.850
<v Speaker 1>in there. And one of those things, the

01:03:39.850 --> 01:03:41.210
<v Speaker 1>one that I wanted to show is this,

01:03:41.210 --> 01:03:43.265
<v Speaker 1>like, this this thing that is called Dapr

01:03:43.265 --> 01:03:44.545
<v Speaker 1>sidecar injector.

01:03:44.785 --> 01:03:46.545
<v Speaker 1>This is basically that controller

01:03:46.944 --> 01:03:49.744
<v Speaker 1>that it's looking for workloads with certain notations.

01:03:49.904 --> 01:03:52.224
<v Speaker 1>When an annotation is detected, that basically means

01:03:52.224 --> 01:03:53.585
<v Speaker 1>that we need to go and inject the

01:03:53.585 --> 01:03:54.944
<v Speaker 1>sidecar to that application.

01:03:55.620 --> 01:03:57.220
<v Speaker 1>So to run the same service that I

01:03:57.220 --> 01:03:59.940
<v Speaker 1>was running locally into a Kubernetes cluster, of

01:03:59.940 --> 01:04:01.460
<v Speaker 1>course, I need to create a container for

01:04:01.460 --> 01:04:02.660
<v Speaker 1>that Java application.

01:04:02.900 --> 01:04:04.260
<v Speaker 1>I already did that.

01:04:04.660 --> 01:04:06.660
<v Speaker 1>And then the other thing that I wanted

01:04:06.660 --> 01:04:08.740
<v Speaker 1>to do here is one more thing that

01:04:08.740 --> 01:04:11.345
<v Speaker 1>it's kinda important. It's installed Redis right, in

01:04:11.345 --> 01:04:13.025
<v Speaker 1>my cluster because I want to use Redis

01:04:13.025 --> 01:04:13.585
<v Speaker 1>now

01:04:14.065 --> 01:04:15.185
<v Speaker 1>for the

01:04:15.585 --> 01:04:17.185
<v Speaker 1>for the key value store.

01:04:17.505 --> 01:04:19.345
<v Speaker 1>So I would just run this helm command

01:04:19.345 --> 01:04:21.744
<v Speaker 1>to create a new Redis instance.

01:04:22.145 --> 01:04:23.265
<v Speaker 1>Pretty standard stuff.

01:04:23.780 --> 01:04:25.540
<v Speaker 1>As we discussed before, David, this can be

01:04:25.540 --> 01:04:26.420
<v Speaker 1>PostgreSQL.

01:04:26.420 --> 01:04:28.020
<v Speaker 1>It can be any of those, you know,

01:04:28.020 --> 01:04:30.900
<v Speaker 1>implementations that were shared there. Whatever you want,

01:04:30.900 --> 01:04:32.740
<v Speaker 1>you just install one, and then you just

01:04:32.740 --> 01:04:34.820
<v Speaker 1>need to configure Dapr to understand that this

01:04:34.820 --> 01:04:35.940
<v Speaker 1>is the thing that you want to use

01:04:35.940 --> 01:04:38.020
<v Speaker 1>for your for one of your estate store

01:04:38.565 --> 01:04:39.685
<v Speaker 1>implementations.

01:04:40.005 --> 01:04:41.285
<v Speaker 1>And you do that by

01:04:41.445 --> 01:04:43.925
<v Speaker 1>doing something similar that we did before. Let

01:04:43.925 --> 01:04:46.645
<v Speaker 1>me just refresh that. This case, I'm saying,

01:04:46.645 --> 01:04:48.244
<v Speaker 1>you know, I have a new state store

01:04:48.244 --> 01:04:50.805
<v Speaker 1>called t k k v store, and it's

01:04:50.805 --> 01:04:52.165
<v Speaker 1>using Redis as an implementation.

01:04:53.079 --> 01:04:55.240
<v Speaker 1>That's the URL of the service that it's

01:04:55.240 --> 01:04:57.480
<v Speaker 1>running inside Kubernetes. And when you install the

01:04:57.480 --> 01:04:59.319
<v Speaker 1>Helm chart of Redis, it creates a secret

01:04:59.319 --> 01:05:01.319
<v Speaker 1>that contains the password to connect to that

01:05:01.319 --> 01:05:02.680
<v Speaker 1>specific instance.

01:05:02.760 --> 01:05:05.000
<v Speaker 1>Right? So we'll just apply this

01:05:05.505 --> 01:05:06.545
<v Speaker 1>state store,

01:05:07.025 --> 01:05:09.984
<v Speaker 1>and now I have my key value store

01:05:09.984 --> 01:05:11.665
<v Speaker 1>Dapr component created.

01:05:11.825 --> 01:05:13.585
<v Speaker 1>That basically means that whenever I want to

01:05:13.585 --> 01:05:15.025
<v Speaker 1>use the state stores APIs

01:05:15.825 --> 01:05:19.490
<v Speaker 1>and I'm referencing this specific state store, I

01:05:19.490 --> 01:05:21.410
<v Speaker 1>will be using Redis for storing my key

01:05:21.410 --> 01:05:22.050
<v Speaker 1>values.

01:05:22.690 --> 01:05:24.609
<v Speaker 1>So I have everything now in my cluster

01:05:24.609 --> 01:05:26.930
<v Speaker 1>for running my application, and I have Redis

01:05:26.930 --> 01:05:29.010
<v Speaker 1>running. It's up and running, so that's pretty

01:05:29.010 --> 01:05:30.690
<v Speaker 1>cool. And the last thing that I need

01:05:30.690 --> 01:05:31.730
<v Speaker 1>to do, and I think that I can

01:05:31.730 --> 01:05:34.224
<v Speaker 1>show this in Versus code, is that, basically,

01:05:34.224 --> 01:05:36.464
<v Speaker 1>I need to deploy my application. Right? So

01:05:36.464 --> 01:05:38.224
<v Speaker 1>I've created a container with the same application

01:05:38.224 --> 01:05:39.505
<v Speaker 1>that I was running before.

01:05:39.825 --> 01:05:42.305
<v Speaker 1>I'm configuring, you know, an environment variable with

01:05:42.305 --> 01:05:43.984
<v Speaker 1>the name of the key value store that

01:05:43.984 --> 01:05:44.865
<v Speaker 1>I want to use.

01:05:45.265 --> 01:05:46.224
<v Speaker 1>And then I have a service

01:05:47.120 --> 01:05:48.960
<v Speaker 1>for the for the deployment so I can

01:05:48.960 --> 01:05:49.840
<v Speaker 1>send request

01:05:50.000 --> 01:05:52.560
<v Speaker 1>to this to this application later on. So

01:05:52.560 --> 01:05:53.920
<v Speaker 1>let's just do that.

01:05:54.800 --> 01:05:57.120
<v Speaker 1>Does that make sense, David? So far? Yeah.

01:05:57.200 --> 01:05:59.120
<v Speaker 1>Yeah. Something that you want to ask or

01:05:59.520 --> 01:06:00.320
<v Speaker 1>perfect.

01:06:00.480 --> 01:06:02.320
<v Speaker 1>No. Let's deploy that. Sense. Yeah.

01:06:04.125 --> 01:06:07.165
<v Speaker 1>Cool. Cool. And, of course, this probably will

01:06:07.165 --> 01:06:09.325
<v Speaker 1>need to fetch the container from Docker Hub

01:06:09.325 --> 01:06:10.685
<v Speaker 1>at some point to the cluster that I

01:06:10.685 --> 01:06:11.565
<v Speaker 1>just created.

01:06:12.605 --> 01:06:14.205
<v Speaker 1>And you will see that, yep, there you

01:06:14.205 --> 01:06:16.125
<v Speaker 1>go. So we have, like, the customer service

01:06:16.125 --> 01:06:17.165
<v Speaker 1>being deployed.

01:06:17.829 --> 01:06:19.990
<v Speaker 1>And as you can see here, Dapr, the

01:06:19.990 --> 01:06:23.030
<v Speaker 1>Dapr control plane detected that my my application

01:06:23.030 --> 01:06:25.750
<v Speaker 1>requires Dapr, and that's because I have these

01:06:25.750 --> 01:06:27.990
<v Speaker 1>annotations here in my deployment,

01:06:28.150 --> 01:06:29.910
<v Speaker 1>which basically are saying that, yeah, I want

01:06:29.910 --> 01:06:31.829
<v Speaker 1>to enable the Dapr for this application.

01:06:32.345 --> 01:06:35.144
<v Speaker 1>And then my application identity is customer service

01:06:35.144 --> 01:06:37.545
<v Speaker 1>in this case. Right? So if somebody wants

01:06:37.545 --> 01:06:40.744
<v Speaker 1>to call, like, the customer service application,

01:06:40.825 --> 01:06:42.664
<v Speaker 1>needs to go with using that name basically

01:06:42.664 --> 01:06:44.585
<v Speaker 1>later on. Remember that we saw some, like,

01:06:44.585 --> 01:06:47.385
<v Speaker 1>service discovery and service to service invocation functionality?

01:06:47.690 --> 01:06:49.690
<v Speaker 1>Well, that's the ID of this service now.

01:06:49.690 --> 01:06:51.530
<v Speaker 1>This is how you kinda, like, define that.

01:06:52.490 --> 01:06:54.810
<v Speaker 1>I guess that it would check now. K.

01:06:56.810 --> 01:06:59.290
<v Speaker 1>They're like we're having restarts there. That basically

01:06:59.290 --> 01:07:01.610
<v Speaker 1>means that I messed up with something somewhere,

01:07:02.694 --> 01:07:04.775
<v Speaker 1>which is kinda funny because I just tested

01:07:04.775 --> 01:07:06.135
<v Speaker 1>this, and it was working.

01:07:06.375 --> 01:07:08.055
<v Speaker 1>This this should go out tomorrow for a

01:07:08.055 --> 01:07:09.895
<v Speaker 1>blog post, but let's let's do this.

01:07:11.415 --> 01:07:13.095
<v Speaker 1>And if it doesn't work, that's fine, but

01:07:13.095 --> 01:07:14.935
<v Speaker 1>I just wanted to show it working.

01:07:15.174 --> 01:07:15.655
<v Speaker 1>Let's see.

01:07:16.299 --> 01:07:18.539
<v Speaker 1>So the application is running correctly, so I'm

01:07:18.539 --> 01:07:21.500
<v Speaker 1>guessing that I configured something wrong with Dapr.

01:07:24.140 --> 01:07:25.580
<v Speaker 0>Oh, no. Let me see.

01:07:26.140 --> 01:07:28.779
<v Speaker 1>Oh, it's running now. Yeah. So, basically, something

01:07:28.779 --> 01:07:31.099
<v Speaker 1>not being connected and for some reason restarting.

01:07:31.180 --> 01:07:31.660
<v Speaker 1>Let's see.

01:07:32.724 --> 01:07:35.445
<v Speaker 1>Yep. Now it's running. Okay. Perfect. Pretty cool.

01:07:35.925 --> 01:07:37.125
<v Speaker 1>The last thing that I want to do

01:07:37.285 --> 01:07:39.605
<v Speaker 1>so now remember, now we're we were running

01:07:39.605 --> 01:07:42.244
<v Speaker 1>the application before locally as a developer. Now

01:07:42.244 --> 01:07:44.725
<v Speaker 1>we basically deploy the same application into

01:07:45.045 --> 01:07:47.600
<v Speaker 1>a Kubernetes cluster that has the Dapr control

01:07:47.600 --> 01:07:50.080
<v Speaker 1>pane installed, and it has Redis. And it

01:07:50.080 --> 01:07:52.640
<v Speaker 1>also has this resource that it's called component

01:07:52.800 --> 01:07:53.360
<v Speaker 1>here

01:07:54.480 --> 01:07:57.280
<v Speaker 1>that we call we call it k kv

01:07:57.280 --> 01:07:59.585
<v Speaker 1>store in this case. Right? That's all all

01:07:59.585 --> 01:08:01.744
<v Speaker 1>we need. And then, basically, when we configure

01:08:01.744 --> 01:08:03.744
<v Speaker 1>the application to use the state store APIs,

01:08:03.744 --> 01:08:05.825
<v Speaker 1>we just use that string

01:08:05.905 --> 01:08:07.984
<v Speaker 1>to make reference to that specific key value

01:08:07.984 --> 01:08:09.585
<v Speaker 1>store. That basically means that you can have

01:08:09.585 --> 01:08:11.184
<v Speaker 1>tons of different key value stores and then

01:08:11.184 --> 01:08:13.480
<v Speaker 1>just make reference to each of them using

01:08:13.480 --> 01:08:14.920
<v Speaker 1>kinda just the screen.

01:08:15.720 --> 01:08:16.439
<v Speaker 1>And

01:08:16.840 --> 01:08:19.319
<v Speaker 1>to test this, basically, we can do

01:08:19.640 --> 01:08:20.999
<v Speaker 1>use CTL

01:08:21.719 --> 01:08:23.640
<v Speaker 1>or forward, right, just to access the service.

01:08:23.975 --> 01:08:26.295
<v Speaker 1>That's my service up and running there, and

01:08:26.295 --> 01:08:28.455
<v Speaker 1>I can send exactly the same requests that

01:08:28.455 --> 01:08:29.415
<v Speaker 1>I sent before,

01:08:30.694 --> 01:08:33.095
<v Speaker 1>to the service that's now running on Kubernetes.

01:08:33.095 --> 01:08:35.015
<v Speaker 1>Right? So now this is just running on

01:08:35.015 --> 01:08:35.814
<v Speaker 1>my cluster.

01:08:36.055 --> 01:08:37.575
<v Speaker 1>It might take a while. There you go

01:08:38.119 --> 01:08:39.559
<v Speaker 1>for the first request.

01:08:39.800 --> 01:08:41.800
<v Speaker 1>But as soon as I send these and

01:08:41.800 --> 01:08:43.479
<v Speaker 1>I get the 200, that basically means that,

01:08:43.479 --> 01:08:45.159
<v Speaker 1>of course, that my service worked, but also

01:08:45.159 --> 01:08:47.079
<v Speaker 1>that the service that it's using the state

01:08:47.079 --> 01:08:49.559
<v Speaker 1>store APIs is working, and this data is

01:08:49.559 --> 01:08:50.679
<v Speaker 1>stored in Redis.

01:08:50.920 --> 01:08:53.404
<v Speaker 1>And I can just call the other request,

01:08:53.404 --> 01:08:55.484
<v Speaker 1>cancel another request to get the

01:08:56.205 --> 01:08:57.404
<v Speaker 1>HTTP,

01:08:57.404 --> 01:08:59.645
<v Speaker 1>to get the customer by ID. There you

01:08:59.645 --> 01:09:00.125
<v Speaker 1>go.

01:09:00.845 --> 01:09:02.845
<v Speaker 1>So we have configured

01:09:02.845 --> 01:09:05.325
<v Speaker 1>the same application that we were running locally

01:09:05.325 --> 01:09:06.685
<v Speaker 1>into a Kubernetes cluster

01:09:07.219 --> 01:09:09.939
<v Speaker 1>with maybe different back in back in services

01:09:09.939 --> 01:09:12.260
<v Speaker 1>in this case. Like, for the local environment,

01:09:12.260 --> 01:09:13.779
<v Speaker 1>we didn't even knew if we had Redis

01:09:13.779 --> 01:09:16.659
<v Speaker 1>or something in memory or maybe even using

01:09:16.659 --> 01:09:19.219
<v Speaker 1>kind of Postgres or something different. But for

01:09:19.219 --> 01:09:21.140
<v Speaker 1>the environment that it's running in Kubernetes, we

01:09:21.140 --> 01:09:21.859
<v Speaker 1>are using Redis,

01:09:22.265 --> 01:09:24.185
<v Speaker 1>and the APIs are working kinda, like, in

01:09:24.185 --> 01:09:24.904
<v Speaker 1>the same way.

01:09:25.465 --> 01:09:27.545
<v Speaker 1>Hopefully, that makes some sense. I know that

01:09:27.545 --> 01:09:29.385
<v Speaker 1>I rushed it a bit, but, hopefully, it

01:09:29.385 --> 01:09:30.104
<v Speaker 1>kinda, like,

01:09:30.745 --> 01:09:32.345
<v Speaker 1>builds up on the things that we were

01:09:32.345 --> 01:09:33.385
<v Speaker 1>talking before.

01:09:33.865 --> 01:09:36.619
<v Speaker 0>No. Definitely made sense. Answered a few questions

01:09:36.619 --> 01:09:38.139
<v Speaker 0>I had. You know, I I like that

01:09:38.139 --> 01:09:40.619
<v Speaker 0>we can deploy multiple versions of the

01:09:40.939 --> 01:09:42.300
<v Speaker 0>let me get this back onto big face

01:09:42.300 --> 01:09:44.619
<v Speaker 0>mode. I like the way can deploy a

01:09:44.619 --> 01:09:46.380
<v Speaker 0>postcards in the Redis and have multiple keys

01:09:46.380 --> 01:09:47.419
<v Speaker 0>value stores,

01:09:47.500 --> 01:09:50.300
<v Speaker 0>and our applications can packages the ones that

01:09:49.665 --> 01:09:51.665
<v Speaker 0>make sense for the data type of restoring

01:09:51.825 --> 01:09:53.665
<v Speaker 0>and then Dapr just layers on all of

01:09:53.665 --> 01:09:56.784
<v Speaker 0>this extra simplicity to build and distribute applications,

01:09:56.785 --> 01:09:58.785
<v Speaker 0>which, you know, again, I said at the

01:09:58.785 --> 01:10:00.945
<v Speaker 0>start, it's something that we need. These these

01:10:00.945 --> 01:10:02.385
<v Speaker 0>things are hard to build and

01:10:03.030 --> 01:10:05.110
<v Speaker 0>more opinionated ways to do things. So little

01:10:05.110 --> 01:10:05.829
<v Speaker 0>Dapr's

01:10:06.070 --> 01:10:08.710
<v Speaker 0>opinionated API, but so flexible in the back

01:10:08.710 --> 01:10:10.790
<v Speaker 0>end. I feel weird even just saying as

01:10:10.790 --> 01:10:13.909
<v Speaker 0>opinion, know, it's it's it's nice. I think

01:10:13.909 --> 01:10:16.675
<v Speaker 0>we need more stuff like this. So Yeah.

01:10:16.755 --> 01:10:18.594
<v Speaker 1>Yeah. My my my hope for this is

01:10:18.594 --> 01:10:21.635
<v Speaker 1>that the APIs becomes more robust over time.

01:10:21.635 --> 01:10:22.915
<v Speaker 1>Right? Like, we add more and more and

01:10:22.915 --> 01:10:25.315
<v Speaker 1>more functionality that it's being used by by

01:10:25.315 --> 01:10:27.555
<v Speaker 1>people, more and more people in production, and

01:10:27.555 --> 01:10:30.210
<v Speaker 1>for building more complex software. Right? We have

01:10:30.210 --> 01:10:32.930
<v Speaker 1>a lot of people using the Dapr project,

01:10:32.930 --> 01:10:35.170
<v Speaker 1>but we want to hear more about kinda

01:10:35.170 --> 01:10:37.010
<v Speaker 1>what people wants to do with this. And,

01:10:37.010 --> 01:10:39.090
<v Speaker 1>you know, if you have any questions or

01:10:39.090 --> 01:10:40.850
<v Speaker 1>any follow ups, feel free to reach out.

01:10:42.305 --> 01:10:45.345
<v Speaker 0>Alright. Awesome. Well, I'm gonna give everyone that's

01:10:45.345 --> 01:10:47.265
<v Speaker 0>watching the two minute warning. If you do

01:10:47.265 --> 01:10:49.025
<v Speaker 0>have a question and you wanna answer, drop

01:10:49.025 --> 01:10:50.545
<v Speaker 0>it into the comments now,

01:10:50.785 --> 01:10:52.625
<v Speaker 0>and I'll throw a question at you while

01:10:52.625 --> 01:10:54.465
<v Speaker 0>we we we wait for a minute or

01:10:54.465 --> 01:10:54.625
<v Speaker 0>two.

01:10:55.320 --> 01:10:56.120
<v Speaker 0>So

01:10:56.440 --> 01:10:59.560
<v Speaker 0>you're now working for the company behind Dapr

01:10:59.560 --> 01:11:00.920
<v Speaker 0>and Dagrat. Right?

01:11:01.320 --> 01:11:02.600
<v Speaker 1>That's correct. Yes.

01:11:03.160 --> 01:11:05.159
<v Speaker 0>You wanna what can you give us on,

01:11:05.160 --> 01:11:07.080
<v Speaker 0>like, a roadmap? Like, what are what are

01:11:07.080 --> 01:11:09.240
<v Speaker 0>you focuses on on a company? What's coming

01:11:09.240 --> 01:11:11.635
<v Speaker 0>next for Dapr? Is it just languages? Is

01:11:11.635 --> 01:11:14.514
<v Speaker 0>it maturity? Is it new APIs? Like, what

01:11:14.514 --> 01:11:16.034
<v Speaker 0>does the next twelve months look like if

01:11:16.034 --> 01:11:17.795
<v Speaker 0>you're if you have that information?

01:11:18.514 --> 01:11:20.675
<v Speaker 1>You know that twelve months, it's it's pretty

01:11:20.675 --> 01:11:22.594
<v Speaker 1>a long, long, long period of time in

01:11:22.594 --> 01:11:24.940
<v Speaker 1>this industry. So tons of different things can

01:11:24.940 --> 01:11:27.340
<v Speaker 1>happen. First of all, I'm working, for this,

01:11:27.420 --> 01:11:29.900
<v Speaker 1>company that's called Diagrid, and it's not the

01:11:29.900 --> 01:11:31.500
<v Speaker 1>only company behind the project. Right? Like, we

01:11:31.500 --> 01:11:33.500
<v Speaker 1>have a lot of different companies participating. We

01:11:33.500 --> 01:11:35.980
<v Speaker 1>have a very, very large community of companies

01:11:35.980 --> 01:11:38.219
<v Speaker 1>building on top of this, including Microsoft and

01:11:38.219 --> 01:11:39.179
<v Speaker 1>a bunch of other companies.

01:11:39.875 --> 01:11:42.114
<v Speaker 1>So there are tons of things been happening

01:11:42.114 --> 01:11:43.394
<v Speaker 1>in the community.

01:11:43.635 --> 01:11:46.755
<v Speaker 1>In my specific area, I'm really looking forward

01:11:46.755 --> 01:11:50.114
<v Speaker 1>to build some integrations cross cross communities using

01:11:50.114 --> 01:11:52.594
<v Speaker 1>different projects. Because I'm interested in in, you

01:11:52.594 --> 01:11:55.554
<v Speaker 1>know, in, like, in the developer productivity space

01:11:55.290 --> 01:11:56.889
<v Speaker 1>and developer tools.

01:11:57.050 --> 01:11:58.410
<v Speaker 1>I think that I will be doing something

01:11:58.410 --> 01:12:00.889
<v Speaker 1>around open feature, which is feature guidance.

01:12:00.890 --> 01:12:01.449
<v Speaker 1>I

01:12:01.770 --> 01:12:03.210
<v Speaker 1>would I would love to have, like, the

01:12:03.210 --> 01:12:05.850
<v Speaker 1>API just to consume feature flags straight away

01:12:05.850 --> 01:12:08.485
<v Speaker 1>from from the Dapr, you know, SDKs. That's

01:12:08.485 --> 01:12:10.645
<v Speaker 1>something that I've been looking for a long

01:12:10.645 --> 01:12:12.805
<v Speaker 1>time. And also because I was working and

01:12:12.805 --> 01:12:15.045
<v Speaker 1>I'm still working on the k native project,

01:12:15.125 --> 01:12:16.725
<v Speaker 1>I want to make sure that you can

01:12:16.725 --> 01:12:18.565
<v Speaker 1>build very, very robust

01:12:18.565 --> 01:12:19.525
<v Speaker 1>functions

01:12:19.685 --> 01:12:21.125
<v Speaker 1>and try to build that kind of, like,

01:12:21.125 --> 01:12:23.510
<v Speaker 1>Lambda experience where you can connect to infrastructure

01:12:23.510 --> 01:12:26.309
<v Speaker 1>pretty easily from different functions.

01:12:26.790 --> 01:12:29.430
<v Speaker 1>And, for that, I'm just basically collaborating with,

01:12:29.590 --> 01:12:32.150
<v Speaker 1>the project and also, they say, Chinese led

01:12:32.150 --> 01:12:34.470
<v Speaker 1>project called Open Function as well. Yeah. That

01:12:34.470 --> 01:12:35.750
<v Speaker 1>it's using Dapr and,

01:12:36.070 --> 01:12:37.695
<v Speaker 1>you know, and and just merging a bunch

01:12:37.695 --> 01:12:38.574
<v Speaker 1>of technologies

01:12:38.815 --> 01:12:41.055
<v Speaker 1>that I believe that that's kinda it's pretty

01:12:41.055 --> 01:12:42.575
<v Speaker 1>cool to see that they are, like, just

01:12:42.575 --> 01:12:44.575
<v Speaker 1>gluing up a bunch of projects together, that

01:12:44.575 --> 01:12:45.535
<v Speaker 1>it's not easy.

01:12:45.935 --> 01:12:48.175
<v Speaker 1>But what I see I see there, it's

01:12:48.175 --> 01:12:50.175
<v Speaker 1>a lot of opportunity to build more complex

01:12:50.175 --> 01:12:52.579
<v Speaker 1>use cases and to highlight the functionality of

01:12:52.579 --> 01:12:54.340
<v Speaker 1>all of these projects working together.

01:12:54.820 --> 01:12:56.980
<v Speaker 1>So, yeah, that's kinda like what's coming from

01:12:56.980 --> 01:12:59.219
<v Speaker 1>the open source side of things. From, the

01:12:59.219 --> 01:13:01.699
<v Speaker 1>company point of view, we announced at KubeCon,

01:13:01.860 --> 01:13:04.179
<v Speaker 1>a new product, basically, which is some kind

01:13:04.179 --> 01:13:05.539
<v Speaker 1>of, like, a Dapr

01:13:06.195 --> 01:13:08.275
<v Speaker 1>as service kind of thing. Right? Like so

01:13:08.275 --> 01:13:11.074
<v Speaker 1>you have the APIs in a managed service

01:13:11.235 --> 01:13:13.235
<v Speaker 1>that you can just interact from your applications

01:13:13.235 --> 01:13:15.315
<v Speaker 1>without running Kubernetes

01:13:15.395 --> 01:13:17.715
<v Speaker 1>or Dapr itself to just interact with some

01:13:17.715 --> 01:13:19.860
<v Speaker 1>APIs that you create an account. You have

01:13:19.860 --> 01:13:22.579
<v Speaker 1>the APIs just to start building applications.

01:13:22.820 --> 01:13:24.900
<v Speaker 1>And I think that's a pretty powerful thing.

01:13:25.540 --> 01:13:27.139
<v Speaker 0>And I will Sorry.

01:13:27.380 --> 01:13:28.340
<v Speaker 0>I don't mean to cut you off. Please

01:13:28.340 --> 01:13:28.820
<v Speaker 1>finish.

01:13:29.620 --> 01:13:31.060
<v Speaker 1>No. No. No. Go go ahead. I think

01:13:31.060 --> 01:13:33.975
<v Speaker 1>that that's pretty much it. Well, I I

01:13:33.975 --> 01:13:35.655
<v Speaker 0>really like all of these,

01:13:36.695 --> 01:13:37.255
<v Speaker 0>you know,

01:13:38.215 --> 01:13:39.655
<v Speaker 0>very easy to consume

01:13:39.895 --> 01:13:42.375
<v Speaker 0>functions as a service serverless platform. Not so

01:13:42.375 --> 01:13:44.375
<v Speaker 0>much Lambda, more specifically,

01:13:44.375 --> 01:13:46.135
<v Speaker 0>what Fairmain are doing with Fairmain cloud and

01:13:46.135 --> 01:13:48.455
<v Speaker 0>web assembly, what Cloudflare are doing with workers,

01:13:48.510 --> 01:13:49.949
<v Speaker 0>you know, Firebase functions. And

01:13:51.070 --> 01:13:54.429
<v Speaker 0>I guess with a managed service Dapr and

01:13:54.429 --> 01:13:56.510
<v Speaker 0>it's providing state storage and stuff like that.

01:13:56.510 --> 01:13:58.750
<v Speaker 0>Like my serverless functions can be fully fledged

01:13:58.750 --> 01:14:01.150
<v Speaker 0>applications and speak to these APIs and they

01:14:01.150 --> 01:14:03.765
<v Speaker 0>could be, you know, have much more features

01:14:03.765 --> 01:14:06.325
<v Speaker 0>in them that would necessarily be difficult or

01:14:06.325 --> 01:14:09.285
<v Speaker 0>would have been or I can't speak. Would

01:14:09.285 --> 01:14:11.045
<v Speaker 0>have been harder or more difficult to do

01:14:11.045 --> 01:14:12.645
<v Speaker 0>without such a service.

01:14:12.965 --> 01:14:15.285
<v Speaker 0>Is that something you see you see growing,

01:14:15.445 --> 01:14:15.845
<v Speaker 0>I guess?

01:14:16.750 --> 01:14:18.989
<v Speaker 1>Yeah. Yeah. %. Right? Like, the idea here

01:14:18.989 --> 01:14:20.909
<v Speaker 1>is that no matter where your applications are

01:14:20.909 --> 01:14:23.469
<v Speaker 1>running, they can always access these APIs just

01:14:23.469 --> 01:14:26.349
<v Speaker 1>to implement things against any infrastructure.

01:14:26.510 --> 01:14:27.869
<v Speaker 1>So we we give you two things in

01:14:27.869 --> 01:14:29.230
<v Speaker 1>the same way that Dapr is giving you.

01:14:29.230 --> 01:14:31.054
<v Speaker 1>Right? Like, we give you the APIs, but

01:14:31.054 --> 01:14:33.295
<v Speaker 1>also the possibility to configure the back end

01:14:33.295 --> 01:14:35.455
<v Speaker 1>infrastructure if you want to. If not, we

01:14:35.455 --> 01:14:38.175
<v Speaker 1>will give you some implementations that are there

01:14:38.335 --> 01:14:40.175
<v Speaker 1>going to be very opinionated to the service

01:14:40.175 --> 01:14:40.894
<v Speaker 1>itself.

01:14:41.054 --> 01:14:42.574
<v Speaker 1>Right? We will say, you know, we know

01:14:42.574 --> 01:14:43.215
<v Speaker 1>how to manage

01:14:43.800 --> 01:14:46.200
<v Speaker 1>this implementation like this technology,

01:14:46.200 --> 01:14:48.840
<v Speaker 1>so we will give you these APIs with

01:14:48.840 --> 01:14:51.080
<v Speaker 1>this backing implementation and just focus on the

01:14:51.160 --> 01:14:52.280
<v Speaker 1>using the APIs.

01:14:53.320 --> 01:14:55.480
<v Speaker 0>Nice. And that opt that open ups the

01:14:55.480 --> 01:14:57.080
<v Speaker 1>doors to, you know, like, if you're running

01:14:57.080 --> 01:14:59.385
<v Speaker 1>on Google Cloud Run or or or Lambdas

01:14:59.385 --> 01:15:01.224
<v Speaker 1>or whatever just to know that, you know,

01:15:01.224 --> 01:15:02.585
<v Speaker 1>no matter what you're running, you just can

01:15:02.585 --> 01:15:03.784
<v Speaker 1>connect to those APIs.

01:15:04.505 --> 01:15:05.945
<v Speaker 1>And the nice thing is that we are

01:15:05.945 --> 01:15:08.105
<v Speaker 1>fully compatible with the Dapr project. That basically

01:15:08.105 --> 01:15:09.864
<v Speaker 1>means that when you create a Dapr client

01:15:09.864 --> 01:15:10.744
<v Speaker 1>as we did,

01:15:11.145 --> 01:15:13.625
<v Speaker 1>you just put, like, an API token there.

01:15:13.625 --> 01:15:16.140
<v Speaker 1>And and just like the URL, now it's

01:15:16.140 --> 01:15:17.420
<v Speaker 1>not going to be localhost. It's going to

01:15:17.420 --> 01:15:18.620
<v Speaker 1>be the remote service.

01:15:18.780 --> 01:15:19.740
<v Speaker 1>There you go.

01:15:20.380 --> 01:15:21.020
<v Speaker 1>Nice.

01:15:21.420 --> 01:15:24.060
<v Speaker 0>Very, very cool. Well, we have no further

01:15:24.060 --> 01:15:26.780
<v Speaker 0>questions from the chat. So with that, I'll

01:15:26.780 --> 01:15:29.094
<v Speaker 0>just say thank you. I think we definitely

01:15:29.094 --> 01:15:31.175
<v Speaker 0>need to schedule another session in the New

01:15:31.175 --> 01:15:33.735
<v Speaker 0>Year where we try and generate a GRPC

01:15:33.735 --> 01:15:35.735
<v Speaker 0>client and rust and do something really cool.

01:15:35.735 --> 01:15:37.735
<v Speaker 0>But I'll catch up with you about that

01:15:37.735 --> 01:15:38.854
<v Speaker 0>after the holidays.

01:15:39.175 --> 01:15:41.494
<v Speaker 0>And any final words or anything you want

01:15:41.494 --> 01:15:42.534
<v Speaker 0>to share before we say goodbye?

01:15:43.460 --> 01:15:45.940
<v Speaker 1>I think that, for me, it's really important

01:15:45.940 --> 01:15:48.180
<v Speaker 1>to tell people that if they are open

01:15:48.180 --> 01:15:50.420
<v Speaker 1>to contribute, you see that, like, this project

01:15:50.420 --> 01:15:52.500
<v Speaker 1>is very polyglot. So no matter what kind

01:15:52.500 --> 01:15:54.100
<v Speaker 1>of experience do you have, if you want

01:15:54.100 --> 01:15:56.180
<v Speaker 1>to contribute with the SDKs or the project

01:15:56.180 --> 01:15:56.500
<v Speaker 1>itself,

01:15:57.405 --> 01:15:59.245
<v Speaker 1>feel free to reach out. If you are

01:15:59.245 --> 01:16:01.485
<v Speaker 1>interested in in testing these new APIs that

01:16:01.485 --> 01:16:03.725
<v Speaker 1>that we are building at Diagrid, also, need

01:16:03.725 --> 01:16:05.085
<v Speaker 1>a lot of people and a lot of

01:16:05.085 --> 01:16:06.845
<v Speaker 1>eyes looking into these APIs and to the

01:16:06.845 --> 01:16:09.565
<v Speaker 1>service itself. If you go to diagrid.io,

01:16:09.565 --> 01:16:12.519
<v Speaker 1>you can just actually get kinda like like,

01:16:13.080 --> 01:16:15.239
<v Speaker 1>trial account and just give it a try

01:16:15.239 --> 01:16:17.080
<v Speaker 1>as well. And if you have any feedback,

01:16:17.080 --> 01:16:18.760
<v Speaker 1>please feel free to reach out. I'm always

01:16:18.760 --> 01:16:20.360
<v Speaker 1>open and happy to help people.

01:16:21.239 --> 01:16:23.880
<v Speaker 0>Awesome. Thank you so much. Alright. With that,

01:16:23.880 --> 01:16:25.320
<v Speaker 0>I'll say you have a wonderful day. I'll

01:16:25.320 --> 01:16:26.679
<v Speaker 0>hopefully speak to you soon. Thanks to everyone

01:16:26.679 --> 01:16:27.994
<v Speaker 0>watching. We'll see you later.
