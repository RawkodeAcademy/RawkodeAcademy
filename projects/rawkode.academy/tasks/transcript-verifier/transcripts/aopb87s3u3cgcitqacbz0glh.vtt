WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: a4ea61af-948e-4d58-a054-bef596337309
Created: 2025-04-29T13:01:33.283Z
Duration: 581.58514
Channels: 1

00:00:00.320 --> 00:00:02.480
<v Speaker 0>It's been a while since we did a

00:00:02.480 --> 00:00:03.999
<v Speaker 0>Portainer video

00:00:04.319 --> 00:00:07.120
<v Speaker 0>and there is a terrible reason for that.

00:00:08.000 --> 00:00:10.480
<v Speaker 0>Portainer asked me to make videos showing people

00:00:10.480 --> 00:00:12.799
<v Speaker 0>how to operate Portainer in production.

00:00:13.535 --> 00:00:15.615
<v Speaker 1>I've done a few videos,

00:00:15.855 --> 00:00:18.575
<v Speaker 1>but ultimately I came to the same conclusion

00:00:19.055 --> 00:00:20.975
<v Speaker 1>over and over again.

00:00:22.415 --> 00:00:24.974
<v Speaker 1>Nothing is hard with Portainer.

00:00:25.789 --> 00:00:27.789
<v Speaker 1>It's all too damn easy.

00:00:28.670 --> 00:00:31.949
<v Speaker 0>Portainer has this very annoying habit of taking

00:00:31.949 --> 00:00:32.910
<v Speaker 1>complicated,

00:00:33.309 --> 00:00:34.270
<v Speaker 1>cumbersome,

00:00:34.350 --> 00:00:35.870
<v Speaker 1>complex tasks

00:00:36.430 --> 00:00:38.269
<v Speaker 1>and making them trivial.

00:00:38.510 --> 00:00:40.735
<v Speaker 1>Point, click, done.

00:00:42.575 --> 00:00:45.695
<v Speaker 0>So with that in mind, we're changing tact.

00:00:46.335 --> 00:00:48.735
<v Speaker 0>In this video, I'm going to take what

00:00:48.735 --> 00:00:51.934
<v Speaker 0>is traditionally a complicated and cumbersome and complex

00:00:51.934 --> 00:00:52.655
<v Speaker 0>task

00:00:52.895 --> 00:00:54.495
<v Speaker 0>and show how Portainer

00:00:54.495 --> 00:00:55.375
<v Speaker 0>makes it easy.

00:00:56.750 --> 00:00:57.390
<v Speaker 0>So

00:00:57.950 --> 00:01:01.949
<v Speaker 0>let's deploy in your EKS cluster on AWS

00:01:02.030 --> 00:01:04.830
<v Speaker 0>and get our application running with a GitOps

00:01:04.830 --> 00:01:05.630
<v Speaker 0>pipeline

00:01:05.710 --> 00:01:08.430
<v Speaker 0>all in under ten minutes.

00:01:09.310 --> 00:01:09.869
<v Speaker 0>Let's go.

00:01:12.655 --> 00:01:14.815
<v Speaker 0>Okay. So the first thing you're going to

00:01:14.815 --> 00:01:17.135
<v Speaker 0>need is obviously a Portainer running.

00:01:17.455 --> 00:01:20.175
<v Speaker 0>Here I am running the Portainer business edition

00:01:20.175 --> 00:01:22.575
<v Speaker 0>which is free for anything up to three

00:01:22.575 --> 00:01:22.975
<v Speaker 0>node.

00:01:24.400 --> 00:01:26.799
<v Speaker 0>I have also configured some production

00:01:27.119 --> 00:01:27.920
<v Speaker 0>credentials.

00:01:28.799 --> 00:01:31.040
<v Speaker 0>I've done this in advance because I don't

00:01:31.040 --> 00:01:34.079
<v Speaker 0>really want to show you any AWS credentials

00:01:34.080 --> 00:01:35.040
<v Speaker 0>on this video.

00:01:35.695 --> 00:01:37.134
<v Speaker 0>But you can see here, we have the

00:01:37.134 --> 00:01:39.055
<v Speaker 0>provider configured as AWS.

00:01:39.055 --> 00:01:40.735
<v Speaker 0>I've just called it production

00:01:40.814 --> 00:01:43.534
<v Speaker 0>and we've added an access key ID and

00:01:43.534 --> 00:01:44.895
<v Speaker 0>our secret access key.

00:01:49.229 --> 00:01:51.869
<v Speaker 1>To add these you just say add credentials,

00:01:51.950 --> 00:01:54.509
<v Speaker 1>fly to Amazon and fill in the form.

00:01:55.310 --> 00:01:56.909
<v Speaker 1>And keeping with Portainer,

00:01:57.229 --> 00:01:58.350
<v Speaker 1>it's pretty simple.

00:02:00.110 --> 00:02:01.950
<v Speaker 0>From here we can go to the Portainer

00:02:01.950 --> 00:02:02.509
<v Speaker 0>home screen.

00:02:03.075 --> 00:02:05.155
<v Speaker 0>Now you can see here we only have

00:02:05.155 --> 00:02:06.835
<v Speaker 0>a local environment,

00:02:07.555 --> 00:02:10.275
<v Speaker 1>that is the Docker engine that this Portainer

00:02:10.275 --> 00:02:11.715
<v Speaker 1>instance is running on.

00:02:12.194 --> 00:02:14.515
<v Speaker 1>We want to add a new environment.

00:02:16.370 --> 00:02:18.210
<v Speaker 1>So let's click on environment

00:02:18.370 --> 00:02:19.330
<v Speaker 1>and add.

00:02:20.050 --> 00:02:22.130
<v Speaker 0>From here, could say that we wish to

00:02:22.130 --> 00:02:22.930
<v Speaker 0>provision

00:02:23.170 --> 00:02:24.610
<v Speaker 0>a Kubernetes

00:02:24.770 --> 00:02:25.330
<v Speaker 0>cluster.

00:02:29.105 --> 00:02:30.785
<v Speaker 1>We select our cloud provider

00:02:30.785 --> 00:02:32.305
<v Speaker 1>and give our cluster

00:02:32.465 --> 00:02:33.345
<v Speaker 1>a name.

00:02:33.985 --> 00:02:36.545
<v Speaker 1>Here I will call it Rawkode test.

00:02:37.265 --> 00:02:39.025
<v Speaker 0>You can then set the region you wish

00:02:39.025 --> 00:02:40.065
<v Speaker 0>to deploy it to.

00:02:40.860 --> 00:02:43.340
<v Speaker 0>As I'm in Scotland, I'll choose London down

00:02:43.340 --> 00:02:44.140
<v Speaker 0>in England.

00:02:45.980 --> 00:02:48.700
<v Speaker 1>Next you can change your AMI type,

00:02:49.099 --> 00:02:50.540
<v Speaker 1>the instance size,

00:02:51.099 --> 00:02:52.140
<v Speaker 1>your disks,

00:02:52.379 --> 00:02:53.420
<v Speaker 1>the number of nodes

00:02:54.185 --> 00:02:56.265
<v Speaker 1>and even the Kubernetes version.

00:03:01.945 --> 00:03:03.145
<v Speaker 1>None

00:03:05.065 --> 00:03:08.025
<v Speaker 0>of this is particularly important for today's video.

00:03:16.470 --> 00:03:18.310
<v Speaker 0>So we're just gonna go straight ahead and

00:03:18.310 --> 00:03:19.190
<v Speaker 0>click revision.

00:03:22.195 --> 00:03:24.115
<v Speaker 1>Now let's go back to our environment page

00:03:24.115 --> 00:03:25.315
<v Speaker 1>where we'll see

00:03:26.675 --> 00:03:28.675
<v Speaker 1>that our agent is now

00:03:29.075 --> 00:03:31.875
<v Speaker 1>provisioning an AWS EKS cluster.

00:03:33.040 --> 00:03:36.000
<v Speaker 0>Now while Portainer does amazing things at taking

00:03:36.000 --> 00:03:38.800
<v Speaker 0>complicated complex tasks and making them trivial or

00:03:38.800 --> 00:03:39.440
<v Speaker 0>easy,

00:03:39.680 --> 00:03:42.400
<v Speaker 0>it cannot speed up the provision of an

00:03:42.400 --> 00:03:43.680
<v Speaker 0>EKS cluster.

00:03:44.000 --> 00:03:46.800
<v Speaker 0>So we'll be back with some movie magic

00:03:46.800 --> 00:03:47.680
<v Speaker 0>in just a moment.

00:03:49.004 --> 00:03:49.725
<v Speaker 0>Alright.

00:03:49.885 --> 00:03:52.365
<v Speaker 0>The dance has been danced, and we have

00:03:52.685 --> 00:03:55.245
<v Speaker 0>the Rawkode test AWS

00:03:55.245 --> 00:03:57.645
<v Speaker 0>EKS Kubernetes cluster running.

00:03:58.125 --> 00:04:00.924
<v Speaker 1>Let's

00:04:00.924 --> 00:04:02.765
<v Speaker 1>get our application deployed.

00:04:03.850 --> 00:04:05.690
<v Speaker 0>To do this we can just jump back

00:04:05.690 --> 00:04:06.330
<v Speaker 0>home

00:04:06.490 --> 00:04:09.050
<v Speaker 0>and set the Rawkode test environment

00:04:09.050 --> 00:04:11.050
<v Speaker 0>as our current environment.

00:04:11.770 --> 00:04:14.810
<v Speaker 0>This opens up all of Portainer's Kubernetes tools

00:04:14.810 --> 00:04:18.410
<v Speaker 0>including browsing the namespaces and resources within a

00:04:18.410 --> 00:04:18.649
<v Speaker 0>cluster.

00:04:19.774 --> 00:04:22.335
<v Speaker 0>Here we can see the default namespace.

00:04:22.735 --> 00:04:24.575
<v Speaker 0>Now this is a new cluster with nothing

00:04:24.575 --> 00:04:26.015
<v Speaker 0>installed so we're not going to see too

00:04:26.015 --> 00:04:26.575
<v Speaker 1>much.

00:04:27.615 --> 00:04:29.855
<v Speaker 1>So let's click on applications

00:04:30.015 --> 00:04:32.175
<v Speaker 0>and create our manifest.

00:04:33.695 --> 00:04:36.350
<v Speaker 0>From here we can add a GitHub

00:04:36.750 --> 00:04:39.710
<v Speaker 0>URL or any Git repository URL.

00:04:40.350 --> 00:04:42.670
<v Speaker 0>Here I'm going to deploy the Google Cloud

00:04:42.670 --> 00:04:44.350
<v Speaker 0>Platform microservice

00:04:44.350 --> 00:04:44.910
<v Speaker 0>demo.

00:04:51.205 --> 00:04:53.685
<v Speaker 0>Next, we can specify the path to the

00:04:53.685 --> 00:04:54.965
<v Speaker 0>gamma we wish to apply.

00:05:07.610 --> 00:05:09.450
<v Speaker 0>Which in this case is release

00:05:09.930 --> 00:05:10.890
<v Speaker 0>Kubernetes

00:05:11.290 --> 00:05:13.770
<v Speaker 0>manifest and you can see Portainer is now

00:05:13.770 --> 00:05:16.730
<v Speaker 0>auto completing the path from the repository.

00:05:18.245 --> 00:05:19.285
<v Speaker 0>And that's it.

00:05:27.125 --> 00:05:28.645
<v Speaker 1>We go back to the top,

00:05:29.685 --> 00:05:30.565
<v Speaker 0>call this

00:05:30.885 --> 00:05:32.005
<v Speaker 0>microservice

00:05:32.405 --> 00:05:32.805
<v Speaker 0>demo,

00:05:34.140 --> 00:05:35.260
<v Speaker 0>and hit deploy.

00:05:41.100 --> 00:05:43.420
<v Speaker 0>Portainer is now cloning this repository

00:05:43.420 --> 00:05:46.620
<v Speaker 0>and applying our manifest from the release directory

00:05:46.620 --> 00:05:47.500
<v Speaker 0>to the cluster.

00:05:49.115 --> 00:05:51.275
<v Speaker 0>And as you can see it's discovered the

00:05:51.275 --> 00:05:53.914
<v Speaker 0>ad service, cart service and so forth, all

00:05:53.914 --> 00:05:57.115
<v Speaker 0>of the microservice examples from this repository.

00:05:57.835 --> 00:06:00.074
<v Speaker 0>Now currently it says replicated zero of one

00:06:00.074 --> 00:06:02.395
<v Speaker 0>but if we give that a few minutes

00:06:01.789 --> 00:06:04.190
<v Speaker 0>for the cluster to pull the images and

00:06:04.190 --> 00:06:06.750
<v Speaker 0>get these replica sets and pods running,

00:06:07.150 --> 00:06:08.750
<v Speaker 0>we will start to see green and one

00:06:08.750 --> 00:06:10.270
<v Speaker 0>zero one across the board.

00:06:15.005 --> 00:06:15.885
<v Speaker 0>Like so.

00:06:17.885 --> 00:06:20.125
<v Speaker 0>So now that we have our application deployed,

00:06:20.205 --> 00:06:22.365
<v Speaker 0>we probably want to check that it worked.

00:06:22.605 --> 00:06:25.805
<v Speaker 1>Now we can see all the applications here

00:06:25.805 --> 00:06:27.085
<v Speaker 1>including our front end.

00:06:28.370 --> 00:06:30.050
<v Speaker 1>From here we can see that it's in

00:06:30.050 --> 00:06:31.490
<v Speaker 1>the default namespace,

00:06:32.289 --> 00:06:34.849
<v Speaker 1>it has an internal service with a cluster

00:06:34.849 --> 00:06:37.889
<v Speaker 0>IP and an external load balancer type service

00:06:37.889 --> 00:06:39.409
<v Speaker 0>with external access.

00:06:40.595 --> 00:06:43.555
<v Speaker 0>We can see the environment variables passed in

00:06:43.555 --> 00:06:45.155
<v Speaker 0>to this pod.

00:06:46.195 --> 00:06:48.195
<v Speaker 0>We can also see the events to see

00:06:48.195 --> 00:06:50.195
<v Speaker 0>if the pods have been restarted or if

00:06:50.195 --> 00:06:51.555
<v Speaker 0>anything is wrong

00:06:51.715 --> 00:06:52.835
<v Speaker 0>fetch the log.

00:07:04.280 --> 00:07:06.280
<v Speaker 0>Or in the event that something goes wrong,

00:07:06.280 --> 00:07:07.400
<v Speaker 0>jump to application

00:07:09.005 --> 00:07:10.525
<v Speaker 1>and ask for the logs.

00:07:11.645 --> 00:07:12.365
<v Speaker 1>But

00:07:12.525 --> 00:07:13.245
<v Speaker 1>maybe

00:07:13.565 --> 00:07:15.805
<v Speaker 1>your developers don't always want to access the

00:07:15.805 --> 00:07:16.525
<v Speaker 1>UI.

00:07:17.005 --> 00:07:17.885
<v Speaker 1>Perhaps

00:07:17.885 --> 00:07:19.405
<v Speaker 1>you want to use the CLI

00:07:19.740 --> 00:07:21.180
<v Speaker 1>and that's okay too.

00:07:21.740 --> 00:07:22.620
<v Speaker 1>WebProtainer

00:07:22.620 --> 00:07:23.820
<v Speaker 1>you have the choice.

00:07:25.020 --> 00:07:27.580
<v Speaker 0>Now typically what you could do is

00:07:27.819 --> 00:07:30.300
<v Speaker 0>generate a KubeConfig and give it to someone

00:07:30.300 --> 00:07:31.180
<v Speaker 0>in your team

00:07:31.580 --> 00:07:33.259
<v Speaker 0>but then you have to worry about them

00:07:33.259 --> 00:07:34.699
<v Speaker 0>sharing that KubeConfig

00:07:35.465 --> 00:07:36.105
<v Speaker 0>or

00:07:36.425 --> 00:07:39.465
<v Speaker 0>getting the AWS IAM authenticator or the recent

00:07:39.465 --> 00:07:41.305
<v Speaker 0>version of the AWS CLI in order to

00:07:41.305 --> 00:07:43.225
<v Speaker 0>be able to authenticate and they also need

00:07:43.225 --> 00:07:45.225
<v Speaker 0>to have AWS access blah blah blah blah

00:07:45.225 --> 00:07:47.785
<v Speaker 0>blah. Giving people access to your cluster

00:07:48.025 --> 00:07:50.025
<v Speaker 0>isn't really that easy to do well,

00:07:51.310 --> 00:07:52.910
<v Speaker 0>but we have Portainer.

00:07:52.910 --> 00:07:55.310
<v Speaker 0>It has user management. We could invite our

00:07:55.310 --> 00:07:57.870
<v Speaker 0>entire team and even configure SSO.

00:07:57.949 --> 00:07:59.550
<v Speaker 0>Check out the video in the course for

00:07:59.550 --> 00:08:00.030
<v Speaker 0>that.

00:08:01.310 --> 00:08:03.710
<v Speaker 1>So if you want to hook in

00:08:04.335 --> 00:08:06.495
<v Speaker 1>to that I'm policy in our back

00:08:07.055 --> 00:08:09.775
<v Speaker 1>then the developers or anyone you wish can

00:08:09.775 --> 00:08:13.055
<v Speaker 1>just use the cube control shell button.

00:08:13.855 --> 00:08:16.255
<v Speaker 1>I click this

00:08:18.390 --> 00:08:19.990
<v Speaker 0>and right in my browser,

00:08:20.950 --> 00:08:21.990
<v Speaker 1>I can run

00:08:22.470 --> 00:08:23.350
<v Speaker 1>kubectl

00:08:23.350 --> 00:08:24.070
<v Speaker 1>commands.

00:08:25.110 --> 00:08:27.190
<v Speaker 0>I can now see all of my services

00:08:27.190 --> 00:08:28.150
<v Speaker 0>including

00:08:28.885 --> 00:08:32.245
<v Speaker 0>the host name to access our load balancer

00:08:32.245 --> 00:08:32.965
<v Speaker 0>service

00:08:34.245 --> 00:08:35.365
<v Speaker 1>and there we go

00:08:36.325 --> 00:08:38.964
<v Speaker 1>this is the Google microservice

00:08:38.964 --> 00:08:39.765
<v Speaker 1>demo

00:08:40.660 --> 00:08:42.340
<v Speaker 0>running on EKS

00:08:42.580 --> 00:08:44.420
<v Speaker 0>provisioned by Portainer.

00:08:44.740 --> 00:08:46.580
<v Speaker 0>Your life made easier.

00:08:47.460 --> 00:08:48.740
<v Speaker 0>So there you have it.

00:08:49.140 --> 00:08:51.380
<v Speaker 0>While I couldn't make the video Portainer wanted

00:08:51.380 --> 00:08:53.620
<v Speaker 0>me to make because they just make things

00:08:53.620 --> 00:08:54.180
<v Speaker 0>too simple,

00:08:55.125 --> 00:08:57.605
<v Speaker 0>I hopefully showed you how Portainer

00:08:57.605 --> 00:08:58.805
<v Speaker 0>can simplify

00:08:59.285 --> 00:09:00.485
<v Speaker 0>other things too.

00:09:04.245 --> 00:09:06.325
<v Speaker 1>We all need Kubernetes clusters.

00:09:06.725 --> 00:09:08.485
<v Speaker 1>Hopefully, you're using a managed provider.

00:09:09.520 --> 00:09:11.840
<v Speaker 1>Portainer gives you a simple interface to spin

00:09:11.840 --> 00:09:13.360
<v Speaker 0>up those clusters on demand.

00:09:14.640 --> 00:09:16.960
<v Speaker 1>We can then set up GitOps pipelines either

00:09:16.960 --> 00:09:19.760
<v Speaker 1>manually like I did or using Edge stacks.

00:09:20.400 --> 00:09:22.000
<v Speaker 0>Check out the video in this course to

00:09:22.000 --> 00:09:23.760
<v Speaker 0>see how you can automate the rollout of

00:09:23.760 --> 00:09:26.865
<v Speaker 0>your application to one or many clusters using

00:09:26.865 --> 00:09:27.745
<v Speaker 0>Portainer.

00:09:28.705 --> 00:09:30.705
<v Speaker 0>The convenience of the UI is there if

00:09:30.705 --> 00:09:32.865
<v Speaker 0>you want it and the CLI is just

00:09:32.865 --> 00:09:33.985
<v Speaker 0>a click away too.

00:09:34.785 --> 00:09:36.305
<v Speaker 0>Portainer is a fantastic tool.

00:09:37.770 --> 00:09:39.850
<v Speaker 1>I hope you found this video useful. Until

00:09:39.850 --> 00:09:41.370
<v Speaker 0>next time. Have a great day.
