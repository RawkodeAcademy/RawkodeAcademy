WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 0af0a9e1-f4e2-4a72-8abd-241e7d0aaaa8
Created: 2025-04-29T12:57:13.757Z
Duration: 3368.177
Channels: 1

00:00:00.000 --> 00:00:02.000
<v Speaker 0>Welcome to Cloud Native Compass,

00:00:02.240 --> 00:00:04.799
<v Speaker 0>a podcast to help you navigate the vast

00:00:04.799 --> 00:00:07.040
<v Speaker 0>landscape of the cloud native ecosystem.

00:00:07.040 --> 00:00:09.840
<v Speaker 1>We're your hosts. I'm David Flanagan, a technology

00:00:09.840 --> 00:00:12.320
<v Speaker 1>magpie that can't stop playing with new shiny

00:00:12.320 --> 00:00:15.434
<v Speaker 1>things. I'm Laura Santa Maria, a forever learner

00:00:15.434 --> 00:00:17.435
<v Speaker 0>who is constantly breaking production.

00:00:18.235 --> 00:00:20.475
<v Speaker 1>Do you want a single database to store

00:00:20.475 --> 00:00:21.595
<v Speaker 1>high precision,

00:00:21.755 --> 00:00:22.635
<v Speaker 1>multidimensional

00:00:22.635 --> 00:00:25.275
<v Speaker 1>time series data that supports infinite

00:00:25.275 --> 00:00:25.994
<v Speaker 1>cardinality?

00:00:27.490 --> 00:00:30.130
<v Speaker 1>Well, we're not there yet, but Poladex does

00:00:30.130 --> 00:00:33.730
<v Speaker 1>share his vision and roadmap for InfluxDB three.

00:00:34.610 --> 00:00:36.210
<v Speaker 0>Do you wanna hear David not have to

00:00:36.210 --> 00:00:37.890
<v Speaker 0>talk about Rust to get a guest to

00:00:37.890 --> 00:00:40.504
<v Speaker 0>actually talk about Rust? Now is your chance.

00:00:40.664 --> 00:00:42.425
<v Speaker 0>In all seriousness, we not only get to

00:00:42.425 --> 00:00:44.184
<v Speaker 0>talk about a move from Go to Rust,

00:00:44.265 --> 00:00:45.785
<v Speaker 0>also about observability

00:00:45.785 --> 00:00:48.105
<v Speaker 0>and how it's changed over time, as well

00:00:48.105 --> 00:00:50.585
<v Speaker 0>as a little bit about open source licensing

00:00:50.585 --> 00:00:51.225
<v Speaker 0>changes.

00:00:51.464 --> 00:00:54.430
<v Speaker 1>So let's Rust. I mean, Go. No.

00:00:54.750 --> 00:00:56.590
<v Speaker 1>But, really, let's all Rust.

00:00:57.070 --> 00:00:59.470
<v Speaker 1>Alright. Thank you for joining us, Paul. And

00:00:59.470 --> 00:01:01.149
<v Speaker 1>for anyone who's not aware, can you please

00:01:01.149 --> 00:01:02.590
<v Speaker 1>tell us a little bit more about you

00:01:02.590 --> 00:01:03.790
<v Speaker 1>and what you're up to?

00:01:04.430 --> 00:01:07.954
<v Speaker 2>Yeah. So I'm Paul Dix. I'm the cofounder

00:01:07.954 --> 00:01:10.674
<v Speaker 2>and current CTO of InfluxDB.

00:01:10.915 --> 00:01:13.395
<v Speaker 2>We are the company that make InfluxDB,

00:01:13.395 --> 00:01:15.954
<v Speaker 2>which is an open source time series database.

00:01:16.595 --> 00:01:20.115
<v Speaker 2>It's useful in use cases like, tracking system

00:01:20.115 --> 00:01:21.954
<v Speaker 2>metrics and application performance metrics,

00:01:22.400 --> 00:01:23.600
<v Speaker 2>sensor data,

00:01:23.760 --> 00:01:24.720
<v Speaker 2>that kind of stuff.

00:01:25.680 --> 00:01:28.000
<v Speaker 2>My background is as a programmer. I started

00:01:28.000 --> 00:01:28.800
<v Speaker 2>the company

00:01:29.600 --> 00:01:31.040
<v Speaker 2>in 02/2012,

00:01:31.120 --> 00:01:33.280
<v Speaker 2>and we went through Y Combinator actually under

00:01:33.280 --> 00:01:35.280
<v Speaker 2>a different idea, and then we pivoted to

00:01:35.280 --> 00:01:37.440
<v Speaker 2>this idea in the fall of twenty thirteen.

00:01:38.604 --> 00:01:41.244
<v Speaker 1>Awesome. Yes. Okay. There there's more. There I

00:01:41.244 --> 00:01:43.645
<v Speaker 2>I can go on, like, at length,

00:01:43.884 --> 00:01:47.325
<v Speaker 2>but I'm trying to trying to be concise.

00:01:47.325 --> 00:01:49.485
<v Speaker 0>It's a fair enough to get it. Yeah.

00:01:49.565 --> 00:01:51.725
<v Speaker 1>Alright. Well, let's talk about your work on

00:01:51.725 --> 00:01:52.844
<v Speaker 1>InfluxDB.

00:01:53.005 --> 00:01:53.725
<v Speaker 1>So

00:01:54.500 --> 00:01:56.259
<v Speaker 1>over the last, I'm not sure how many

00:01:56.259 --> 00:01:58.340
<v Speaker 1>years, you started work on a rewrite of

00:01:58.340 --> 00:02:01.460
<v Speaker 1>Influx, moving towards using Rust on a project

00:02:01.460 --> 00:02:02.579
<v Speaker 1>called IOX,

00:02:02.820 --> 00:02:04.420
<v Speaker 1>which I believe this year,

00:02:04.899 --> 00:02:07.299
<v Speaker 1>you have now pushed out into production as

00:02:07.299 --> 00:02:09.459
<v Speaker 1>part of your InfluxDB cloud offering.

00:02:09.935 --> 00:02:12.495
<v Speaker 1>So I really wanted to kinda drill into

00:02:12.495 --> 00:02:15.295
<v Speaker 1>that and just understand more about, one, why

00:02:15.295 --> 00:02:16.495
<v Speaker 1>a rewrite,

00:02:16.495 --> 00:02:18.735
<v Speaker 1>change in programming language, rearchitecting

00:02:18.735 --> 00:02:19.535
<v Speaker 1>the system,

00:02:19.935 --> 00:02:21.455
<v Speaker 1>using Apache Ato,

00:02:21.775 --> 00:02:22.335
<v Speaker 1>a huge

00:02:22.850 --> 00:02:24.850
<v Speaker 1>task for a company to take on, and

00:02:24.850 --> 00:02:25.890
<v Speaker 1>I'd love to know more.

00:02:26.370 --> 00:02:29.170
<v Speaker 2>Yeah. So I'll just start with the obvious,

00:02:29.170 --> 00:02:31.330
<v Speaker 2>which is a rewrite is basically, like, the

00:02:31.330 --> 00:02:34.130
<v Speaker 2>worst possible thing you can do. Like, unless

00:02:34.130 --> 00:02:36.450
<v Speaker 2>you're just, like, a sadist or a glutton

00:02:36.450 --> 00:02:37.090
<v Speaker 2>for pain,

00:02:38.705 --> 00:02:40.545
<v Speaker 2>you could should avoid a rewrite at all

00:02:40.545 --> 00:02:42.785
<v Speaker 2>costs. Okay. That's out of the way.

00:02:43.505 --> 00:02:45.105
<v Speaker 2>So InfluxDB,

00:02:45.105 --> 00:02:47.345
<v Speaker 2>the original version is written in Go.

00:02:47.905 --> 00:02:50.625
<v Speaker 2>And the core architecture of the database is

00:02:50.625 --> 00:02:52.225
<v Speaker 2>built around what I would call, like, a

00:02:52.225 --> 00:02:54.660
<v Speaker 2>clever hack. Right? So it's essentially, it's kind

00:02:54.660 --> 00:02:56.660
<v Speaker 2>of like two databases in one thing.

00:02:57.380 --> 00:02:59.780
<v Speaker 2>One is basically a time series database that

00:02:59.780 --> 00:03:01.940
<v Speaker 2>organizes data on disk,

00:03:02.500 --> 00:03:05.540
<v Speaker 2>as individual time series, which are value time

00:03:05.540 --> 00:03:08.665
<v Speaker 2>stamp pairs in time ascending order. Right? So

00:03:08.665 --> 00:03:10.665
<v Speaker 2>as all the data comes in, it tries

00:03:10.665 --> 00:03:12.745
<v Speaker 2>to organize that data on disk in that

00:03:12.745 --> 00:03:15.145
<v Speaker 2>format, which is basically like a very, like,

00:03:15.385 --> 00:03:17.305
<v Speaker 2>indexed format.

00:03:17.385 --> 00:03:18.825
<v Speaker 2>The other piece of this

00:03:19.225 --> 00:03:21.145
<v Speaker 2>is an inverted index

00:03:21.340 --> 00:03:23.260
<v Speaker 2>that maps metadata

00:03:23.260 --> 00:03:25.980
<v Speaker 2>to individual time series. So the metadata is

00:03:25.980 --> 00:03:28.620
<v Speaker 2>like a measurement name, a tag key value

00:03:28.620 --> 00:03:31.580
<v Speaker 2>pair, a field name. So just like

00:03:31.739 --> 00:03:33.900
<v Speaker 2>you know, usually, people are familiar with inverted

00:03:33.900 --> 00:03:36.459
<v Speaker 2>indexes is from document search where you have

00:03:36.459 --> 00:03:38.755
<v Speaker 2>a document. You have an inverted index of

00:03:38.755 --> 00:03:40.515
<v Speaker 2>the words that appear in the document. And

00:03:40.515 --> 00:03:41.475
<v Speaker 2>then when you search,

00:03:41.875 --> 00:03:43.315
<v Speaker 2>you find the words and you find the

00:03:43.315 --> 00:03:45.155
<v Speaker 2>documents that have those words. Right? In this

00:03:45.155 --> 00:03:46.995
<v Speaker 2>case, we say, oh, tag key value pair.

00:03:46.995 --> 00:03:49.715
<v Speaker 2>Like, host equals, you know, server a or

00:03:49.715 --> 00:03:51.475
<v Speaker 2>region equals US West.

00:03:51.955 --> 00:03:54.970
<v Speaker 2>And then you find the time series that

00:03:54.970 --> 00:03:57.209
<v Speaker 2>match that piece of metadata.

00:03:57.209 --> 00:03:58.410
<v Speaker 2>Right? So

00:03:59.130 --> 00:04:01.290
<v Speaker 2>what that means is as you're ingesting all

00:04:01.290 --> 00:04:03.290
<v Speaker 2>the data, there's a lot of indexing work

00:04:03.290 --> 00:04:05.770
<v Speaker 2>that happens. Right? So it churn chews through,

00:04:05.770 --> 00:04:07.290
<v Speaker 2>like, a lot of CPUs and stuff like

00:04:07.290 --> 00:04:09.895
<v Speaker 2>that, and it reorganizes the data. Now

00:04:10.135 --> 00:04:11.975
<v Speaker 2>when a query comes in, if the query

00:04:11.975 --> 00:04:14.055
<v Speaker 2>is for one individual series,

00:04:14.375 --> 00:04:17.255
<v Speaker 2>generally, queries are very, very fast. Right? This

00:04:17.255 --> 00:04:20.135
<v Speaker 2>is a system that's optimized for that kind

00:04:20.135 --> 00:04:22.800
<v Speaker 2>of query workload and for that kind of,

00:04:22.800 --> 00:04:25.120
<v Speaker 2>like, needle in a haystack

00:04:25.520 --> 00:04:26.160
<v Speaker 2>query,

00:04:26.800 --> 00:04:29.360
<v Speaker 2>specifically on, you know, the, you know, the

00:04:29.360 --> 00:04:31.520
<v Speaker 2>individual series and the time range that you're

00:04:31.520 --> 00:04:32.240
<v Speaker 2>looking for.

00:04:32.720 --> 00:04:35.645
<v Speaker 2>But, again, like, the the problem becomes as

00:04:35.645 --> 00:04:36.925
<v Speaker 2>your index,

00:04:36.925 --> 00:04:39.645
<v Speaker 2>the set of metadata that you're tracking grows,

00:04:40.285 --> 00:04:43.325
<v Speaker 2>commonly referred to as, like, the cardinality problem.

00:04:43.325 --> 00:04:45.885
<v Speaker 2>Right? The number of unique tag values

00:04:45.885 --> 00:04:47.965
<v Speaker 2>that occur. The actual just the number of

00:04:47.965 --> 00:04:49.245
<v Speaker 2>individual series that occur,

00:04:50.099 --> 00:04:52.020
<v Speaker 2>you spend more and more time indexing the

00:04:52.020 --> 00:04:53.939
<v Speaker 2>data, and it just becomes more and more

00:04:53.939 --> 00:04:54.740
<v Speaker 2>expensive

00:04:55.060 --> 00:04:57.379
<v Speaker 2>to ingest it. Right? You spend more CPUs.

00:04:57.379 --> 00:04:59.219
<v Speaker 2>You spend more disk space storing the index

00:04:59.219 --> 00:05:01.380
<v Speaker 2>and, like, all this other stuff. It becomes

00:05:01.539 --> 00:05:02.580
<v Speaker 2>really painful,

00:05:02.819 --> 00:05:05.565
<v Speaker 2>particularly as you try to add, like, more

00:05:05.565 --> 00:05:07.565
<v Speaker 2>and more granularity and visibility,

00:05:07.645 --> 00:05:09.965
<v Speaker 2>like, more precision into the measurements that you're

00:05:09.965 --> 00:05:12.925
<v Speaker 2>taking. Right? Like, again, more kind of metadata

00:05:12.925 --> 00:05:14.605
<v Speaker 2>that you're capturing around those things.

00:05:15.164 --> 00:05:17.165
<v Speaker 2>And then the other side of this is

00:05:18.044 --> 00:05:20.125
<v Speaker 2>when you want to do a query,

00:05:20.750 --> 00:05:22.670
<v Speaker 2>if you have a query that's gonna touch,

00:05:22.910 --> 00:05:24.990
<v Speaker 2>you know, tens of thousands, hundreds of thousands,

00:05:24.990 --> 00:05:26.590
<v Speaker 2>or even millions of individual

00:05:26.670 --> 00:05:27.710
<v Speaker 2>time series,

00:05:27.950 --> 00:05:30.110
<v Speaker 2>right, you wanna do an aggregation

00:05:30.110 --> 00:05:30.910
<v Speaker 2>across,

00:05:31.070 --> 00:05:33.470
<v Speaker 2>you know, all these time series in a

00:05:33.470 --> 00:05:34.990
<v Speaker 2>region or whatever and compute something.

00:05:35.685 --> 00:05:38.245
<v Speaker 2>Those queries become prohibitively expensive.

00:05:38.724 --> 00:05:39.925
<v Speaker 2>And oftentimes,

00:05:39.925 --> 00:05:41.205
<v Speaker 2>you're like, you can't even do them because

00:05:41.205 --> 00:05:42.965
<v Speaker 2>the engine will just, like, fall over. Right?

00:05:42.965 --> 00:05:45.604
<v Speaker 2>You just it the the way to do

00:05:45.604 --> 00:05:47.125
<v Speaker 2>it and to map it onto that index

00:05:47.125 --> 00:05:49.445
<v Speaker 2>structure is just way, way too expensive.

00:05:49.844 --> 00:05:50.085
<v Speaker 2>So,

00:05:51.500 --> 00:05:54.300
<v Speaker 2>basically, that's the version of the database written

00:05:54.300 --> 00:05:56.780
<v Speaker 2>in Go, version one, version two, same storage

00:05:56.780 --> 00:05:58.780
<v Speaker 2>engine we created. We're like, we wrote a

00:05:58.780 --> 00:06:01.340
<v Speaker 2>storage engine from scratch that kind of has

00:06:01.340 --> 00:06:02.780
<v Speaker 2>this architecture.

00:06:03.419 --> 00:06:04.380
<v Speaker 2>And

00:06:04.655 --> 00:06:06.975
<v Speaker 2>over you know, we created the initial version

00:06:06.975 --> 00:06:08.895
<v Speaker 2>of that storage engine in,

00:06:09.615 --> 00:06:10.335
<v Speaker 2>oh,

00:06:10.574 --> 00:06:12.255
<v Speaker 2>I lost my screen for a second. I

00:06:12.255 --> 00:06:13.135
<v Speaker 2>flew over there.

00:06:14.495 --> 00:06:16.974
<v Speaker 2>We created the initial version of that storage

00:06:16.974 --> 00:06:17.775
<v Speaker 2>engine

00:06:17.775 --> 00:06:19.775
<v Speaker 2>in I mean, I prototyped it in the

00:06:19.775 --> 00:06:21.270
<v Speaker 2>fall of twenty fifteen, and then we had

00:06:21.270 --> 00:06:23.430
<v Speaker 2>the first release in early twenty sixteen that

00:06:23.430 --> 00:06:24.070
<v Speaker 2>had that.

00:06:24.550 --> 00:06:26.870
<v Speaker 2>And we've iterated on it and added to

00:06:26.870 --> 00:06:27.830
<v Speaker 2>it over time.

00:06:28.310 --> 00:06:28.870
<v Speaker 2>And,

00:06:29.590 --> 00:06:31.510
<v Speaker 2>essentially, what we found over, you know, the

00:06:31.510 --> 00:06:33.430
<v Speaker 2>next whatever number of years,

00:06:33.910 --> 00:06:34.790
<v Speaker 2>four years,

00:06:35.435 --> 00:06:36.395
<v Speaker 2>is that

00:06:36.634 --> 00:06:39.595
<v Speaker 2>people wanted to have higher cardinality data. They

00:06:39.595 --> 00:06:41.035
<v Speaker 2>wanted to feed in data where they actually

00:06:41.035 --> 00:06:43.035
<v Speaker 2>didn't have to worry about the cardinality or

00:06:43.035 --> 00:06:44.875
<v Speaker 2>the femorality of the values that they were

00:06:44.875 --> 00:06:47.035
<v Speaker 2>feeding in, and they wanted to do more

00:06:47.035 --> 00:06:50.634
<v Speaker 2>analytical queries across it. Right? And all of

00:06:50.634 --> 00:06:53.880
<v Speaker 2>this stuff was built around our query language,

00:06:53.880 --> 00:06:55.080
<v Speaker 2>InfluxQL,

00:06:55.400 --> 00:06:57.400
<v Speaker 2>which is a query language that looks kind

00:06:57.400 --> 00:06:59.400
<v Speaker 2>of like SQL. So it's kind of, like

00:06:59.800 --> 00:07:01.960
<v Speaker 2>it's kind of familiar and friendly, but it's

00:07:02.120 --> 00:07:03.960
<v Speaker 2>for people who really know SQL, it can

00:07:03.960 --> 00:07:04.600
<v Speaker 2>be frustrating

00:07:05.275 --> 00:07:05.915
<v Speaker 2>in

00:07:06.235 --> 00:07:09.595
<v Speaker 2>unique ways because it doesn't actually work exactly

00:07:09.595 --> 00:07:10.475
<v Speaker 2>like SQL.

00:07:11.035 --> 00:07:13.194
<v Speaker 2>But for some things, it's like, it's super

00:07:13.194 --> 00:07:14.955
<v Speaker 2>easy to create, like, a time series query

00:07:14.955 --> 00:07:18.155
<v Speaker 2>or whatever. So, again, like, there are multiple

00:07:18.155 --> 00:07:20.210
<v Speaker 2>problems we were trying to solve for. How

00:07:20.210 --> 00:07:22.130
<v Speaker 2>do we solve this cardinality problem?

00:07:22.370 --> 00:07:24.210
<v Speaker 2>How do we give people a query engine

00:07:24.210 --> 00:07:27.010
<v Speaker 2>that can be useful for analytical style queries

00:07:27.090 --> 00:07:28.290
<v Speaker 2>on larger

00:07:28.450 --> 00:07:29.570
<v Speaker 2>chunks of data?

00:07:30.610 --> 00:07:33.330
<v Speaker 2>And then this other piece, which was

00:07:34.025 --> 00:07:37.465
<v Speaker 2>we needed to figure out how to store

00:07:37.465 --> 00:07:40.425
<v Speaker 2>a massive amount of data at a much

00:07:40.425 --> 00:07:43.544
<v Speaker 2>more cost effective way. Right? InfluxDB one and

00:07:43.544 --> 00:07:45.865
<v Speaker 2>two have just a base level of assumption

00:07:45.865 --> 00:07:48.264
<v Speaker 2>that you have a, you know, a locally

00:07:48.264 --> 00:07:49.750
<v Speaker 2>attached SSD

00:07:49.830 --> 00:07:51.990
<v Speaker 2>or, you know, whatever, like an EBS volume,

00:07:51.990 --> 00:07:54.949
<v Speaker 2>a high performance network volume with provisioned IOPS

00:07:54.949 --> 00:07:56.470
<v Speaker 2>and whatever. And all of your data is

00:07:56.470 --> 00:07:58.870
<v Speaker 2>stored on that, and it's super expensive.

00:07:59.030 --> 00:08:00.470
<v Speaker 2>And for a lot of our use cases,

00:08:01.275 --> 00:08:04.235
<v Speaker 2>right, people could have a year's worth of

00:08:04.235 --> 00:08:04.795
<v Speaker 2>data,

00:08:05.115 --> 00:08:06.475
<v Speaker 2>but 99%

00:08:06.475 --> 00:08:09.435
<v Speaker 2>of their queries hit basically the the trailing,

00:08:09.435 --> 00:08:12.315
<v Speaker 2>like, few hours or a few days worth

00:08:12.315 --> 00:08:14.235
<v Speaker 2>of data. Right? But they they want this

00:08:14.235 --> 00:08:15.755
<v Speaker 2>stuff available and accessible,

00:08:16.300 --> 00:08:18.460
<v Speaker 2>but they don't need it available accessible,

00:08:18.780 --> 00:08:20.860
<v Speaker 2>you know, at the same response times, and

00:08:20.860 --> 00:08:23.100
<v Speaker 2>they definitely don't need it, like, stored on

00:08:23.180 --> 00:08:26.940
<v Speaker 2>expensive NVMe drives or whatever. Right? So

00:08:27.420 --> 00:08:29.020
<v Speaker 2>we needed to figure out a way to

00:08:29.020 --> 00:08:32.955
<v Speaker 2>decouple the compute of ingestion and query from

00:08:32.955 --> 00:08:35.835
<v Speaker 2>the actual storage of the data. Right? And,

00:08:35.835 --> 00:08:36.715
<v Speaker 2>obviously, like,

00:08:37.195 --> 00:08:39.515
<v Speaker 2>all this stuff is, like, building up over

00:08:39.515 --> 00:08:41.755
<v Speaker 2>the course of, like, you know, 2017,

00:08:41.755 --> 00:08:43.515
<v Speaker 2>'20 '18 is when I'm noticing this.

00:08:44.510 --> 00:08:45.390
<v Speaker 2>2019,

00:08:45.390 --> 00:08:47.310
<v Speaker 2>it's just becoming more apparent. And the thing

00:08:47.310 --> 00:08:49.310
<v Speaker 2>is, also, during this time,

00:08:50.110 --> 00:08:52.510
<v Speaker 2>there are interesting things happening out there in

00:08:52.510 --> 00:08:54.830
<v Speaker 2>the infrastructure world. Right? The rise of Kubernetes,

00:08:54.830 --> 00:08:57.230
<v Speaker 2>for example, wasn't there when,

00:08:57.550 --> 00:08:59.470
<v Speaker 2>when we first created InfluxDB.

00:09:00.865 --> 00:09:04.144
<v Speaker 2>So this idea of, like, containerized applications and,

00:09:04.144 --> 00:09:05.425
<v Speaker 2>like, this ephemeral

00:09:06.225 --> 00:09:09.105
<v Speaker 2>application stack or ephemeral compute stack that you

00:09:09.105 --> 00:09:11.185
<v Speaker 2>layer on, and then the other thing, the

00:09:11.185 --> 00:09:12.945
<v Speaker 2>rise of object storage

00:09:12.945 --> 00:09:16.700
<v Speaker 2>as basically, like, a common storage layer.

00:09:17.260 --> 00:09:19.420
<v Speaker 2>Those things happened over the course of, you

00:09:19.420 --> 00:09:21.100
<v Speaker 2>know, that decade

00:09:21.260 --> 00:09:23.340
<v Speaker 2>of, you know, the the tens,

00:09:23.580 --> 00:09:24.860
<v Speaker 2>the February.

00:09:25.260 --> 00:09:26.300
<v Speaker 2>And I think

00:09:26.825 --> 00:09:29.305
<v Speaker 2>one company that really took advantage of that,

00:09:29.305 --> 00:09:31.385
<v Speaker 2>at least the the rise of, like, object

00:09:31.385 --> 00:09:34.425
<v Speaker 2>storage and decoupled compute from storage was Snowflake.

00:09:34.505 --> 00:09:35.945
<v Speaker 2>Right? They're the first company that I think

00:09:35.945 --> 00:09:37.545
<v Speaker 2>that really commercialized

00:09:37.625 --> 00:09:39.305
<v Speaker 2>this idea of we can create this big

00:09:39.305 --> 00:09:40.105
<v Speaker 2>data system

00:09:40.400 --> 00:09:43.040
<v Speaker 2>that stores data super cheaply and just layers

00:09:43.040 --> 00:09:46.000
<v Speaker 2>on compute on demand to execute queries on

00:09:46.000 --> 00:09:48.480
<v Speaker 2>it. Now Snowflake is obviously designed for a

00:09:48.480 --> 00:09:52.160
<v Speaker 2>completely different use case than InfluxDB.

00:09:52.160 --> 00:09:53.600
<v Speaker 2>Right? Snowflake is a data warehouse,

00:09:54.375 --> 00:09:57.095
<v Speaker 2>big data at scale, whatever. InfluxDB is about

00:09:57.095 --> 00:09:59.415
<v Speaker 2>operational data and real time. Right? You need

00:09:59.415 --> 00:10:01.895
<v Speaker 2>to be able to query it within, you

00:10:01.895 --> 00:10:03.895
<v Speaker 2>know, milliseconds of it writing it into the

00:10:03.895 --> 00:10:05.975
<v Speaker 2>database, and you need those queries to return

00:10:05.975 --> 00:10:06.695
<v Speaker 2>generally

00:10:06.935 --> 00:10:09.030
<v Speaker 2>sub second so that you can build monitoring

00:10:09.030 --> 00:10:10.710
<v Speaker 2>learning systems on it. You can build build

00:10:10.710 --> 00:10:12.070
<v Speaker 2>real time dashboarding.

00:10:12.230 --> 00:10:12.870
<v Speaker 2>So

00:10:13.750 --> 00:10:15.190
<v Speaker 2>in 2019,

00:10:16.470 --> 00:10:18.230
<v Speaker 2>I saw actually, like, in the fall of

00:10:18.230 --> 00:10:20.470
<v Speaker 2>twenty eighteen is when I started picking up

00:10:20.470 --> 00:10:20.950
<v Speaker 2>Rust.

00:10:21.805 --> 00:10:23.965
<v Speaker 2>And I thought, like, again, like, I first

00:10:23.965 --> 00:10:26.365
<v Speaker 2>commit on InfluxDB was in 2013,

00:10:26.365 --> 00:10:29.005
<v Speaker 2>but the basis technology that we built for

00:10:29.005 --> 00:10:31.565
<v Speaker 2>it was actually we had done and started

00:10:31.565 --> 00:10:33.325
<v Speaker 2>in the fall of twenty twelve. And Rust

00:10:33.325 --> 00:10:34.525
<v Speaker 2>was not a place where I would use

00:10:34.525 --> 00:10:36.700
<v Speaker 2>it then. I used Go because I thought

00:10:37.100 --> 00:10:39.019
<v Speaker 2>we will be able to move faster creating

00:10:39.019 --> 00:10:40.459
<v Speaker 2>the database if we use Go as a

00:10:40.459 --> 00:10:41.020
<v Speaker 2>language.

00:10:42.220 --> 00:10:44.700
<v Speaker 2>But in 2018, I started picking up Rust

00:10:44.700 --> 00:10:46.540
<v Speaker 2>and thinking, okay. This is actually interesting.

00:10:47.435 --> 00:10:49.275
<v Speaker 2>And then in the fall of twenty nineteen

00:10:49.275 --> 00:10:52.475
<v Speaker 2>is when the async await stuff landed in

00:10:52.475 --> 00:10:55.835
<v Speaker 2>Rust. And when that landed, I thought, okay.

00:10:56.315 --> 00:10:58.715
<v Speaker 2>This is probably gonna be, like, a very

00:10:58.875 --> 00:11:01.915
<v Speaker 2>a serious language for building server side software

00:11:01.620 --> 00:11:03.460
<v Speaker 2>where you have to handle network requests and,

00:11:03.460 --> 00:11:05.220
<v Speaker 2>like, all this other kind of stuff. Right?

00:11:05.220 --> 00:11:06.980
<v Speaker 2>That was, I think for me, that was,

00:11:06.980 --> 00:11:09.140
<v Speaker 2>like, the final, like, piece that I was

00:11:09.140 --> 00:11:11.940
<v Speaker 2>looking for, that Rust was had actually arrived

00:11:11.940 --> 00:11:13.220
<v Speaker 2>at a point where you where

00:11:13.995 --> 00:11:16.075
<v Speaker 2>you you could use it to build a

00:11:16.075 --> 00:11:17.995
<v Speaker 2>complicated piece of server software, you wouldn't have

00:11:17.995 --> 00:11:20.475
<v Speaker 2>to build everything yourself. Right? There are certainly

00:11:20.555 --> 00:11:23.755
<v Speaker 2>successful projects in Rust that started before that.

00:11:23.835 --> 00:11:25.195
<v Speaker 2>Right? Like, did

00:11:26.155 --> 00:11:26.395
<v Speaker 2>that.

00:11:27.910 --> 00:11:28.550
<v Speaker 2>But,

00:11:29.269 --> 00:11:31.670
<v Speaker 2>that point, I was like, okay. That's interesting.

00:11:31.750 --> 00:11:34.470
<v Speaker 2>So coming into the beginning of twenty twenty,

00:11:35.029 --> 00:11:37.910
<v Speaker 2>which is when I kicked off this project,

00:11:38.470 --> 00:11:39.670
<v Speaker 2>you know, I just said, okay.

00:11:40.395 --> 00:11:42.875
<v Speaker 2>We need a different database architecture. This combination

00:11:42.875 --> 00:11:44.955
<v Speaker 2>of this inverted index plus this time series

00:11:44.955 --> 00:11:47.835
<v Speaker 2>storage and the way the entire database engine

00:11:47.835 --> 00:11:50.395
<v Speaker 2>works is not gonna work for

00:11:50.795 --> 00:11:52.555
<v Speaker 2>how for the for for what we wanna

00:11:52.555 --> 00:11:54.555
<v Speaker 2>build, for the requirements we wanna meet. Right?

00:11:54.555 --> 00:11:56.980
<v Speaker 2>Like, we're using, like, memory mapped files, which

00:11:56.980 --> 00:11:59.060
<v Speaker 2>is like, again, you're not gonna get that

00:11:59.060 --> 00:12:00.740
<v Speaker 2>in object storage, and it's not great to

00:12:00.740 --> 00:12:02.660
<v Speaker 2>use in containers and, like, all this other

00:12:02.660 --> 00:12:04.740
<v Speaker 2>stuff. So I was like, okay. If we're

00:12:04.740 --> 00:12:06.340
<v Speaker 2>gonna rearchitect the entire database,

00:12:08.134 --> 00:12:10.375
<v Speaker 2>that's basically a rewrite of the database. We

00:12:10.375 --> 00:12:12.055
<v Speaker 2>could do it in Go and the you

00:12:12.055 --> 00:12:14.774
<v Speaker 2>know, there there's a bunch of stuff that

00:12:14.774 --> 00:12:16.615
<v Speaker 2>exists in Go that we would reuse that

00:12:16.615 --> 00:12:18.295
<v Speaker 2>obviously wouldn't be rewritten,

00:12:18.694 --> 00:12:19.814
<v Speaker 2>the the

00:12:20.630 --> 00:12:23.110
<v Speaker 2>language parser and, like, all this other stuff.

00:12:23.350 --> 00:12:25.910
<v Speaker 2>But, basically, like, I I was looking at

00:12:25.910 --> 00:12:27.510
<v Speaker 2>the project, and I thought, this is a

00:12:27.510 --> 00:12:29.990
<v Speaker 2>rewrite. Like, if we if we actually try

00:12:29.990 --> 00:12:32.710
<v Speaker 2>to do make these big changes.

00:12:33.029 --> 00:12:33.350
<v Speaker 2>And,

00:12:34.945 --> 00:12:37.505
<v Speaker 2>again, in, like, late twenty nineteen, early '20

00:12:37.505 --> 00:12:38.065
<v Speaker 2>'20,

00:12:38.705 --> 00:12:40.705
<v Speaker 2>'1 of the other things I noticed out

00:12:40.705 --> 00:12:42.145
<v Speaker 2>there in the world was,

00:12:42.865 --> 00:12:45.425
<v Speaker 2>Apache Arrow. Like, I'd known about the project

00:12:45.425 --> 00:12:47.490
<v Speaker 2>for a little while. Apache Arrow is like

00:12:47.490 --> 00:12:50.130
<v Speaker 2>an in memory columnar format specification.

00:12:51.730 --> 00:12:53.890
<v Speaker 2>And I was looking at that, and I

00:12:53.890 --> 00:12:56.210
<v Speaker 2>was looking at Apache Parquet, which is, you

00:12:56.210 --> 00:12:59.730
<v Speaker 2>know, file format for this kind of structured

00:12:59.890 --> 00:13:00.850
<v Speaker 2>analytical data.

00:13:02.305 --> 00:13:04.145
<v Speaker 2>And I thought, well, there's I think there's

00:13:04.145 --> 00:13:06.145
<v Speaker 2>really something interesting here. So, again, like, I

00:13:06.145 --> 00:13:08.225
<v Speaker 2>wrote, like, some blog post in, like, early

00:13:08.225 --> 00:13:10.465
<v Speaker 2>twenty twenty where I said, like, I thought

00:13:10.465 --> 00:13:10.945
<v Speaker 2>that

00:13:11.425 --> 00:13:12.145
<v Speaker 2>the

00:13:12.385 --> 00:13:15.025
<v Speaker 2>different pieces of the Apache Arrow project

00:13:15.265 --> 00:13:16.145
<v Speaker 2>would become,

00:13:17.079 --> 00:13:17.720
<v Speaker 2>like,

00:13:18.120 --> 00:13:21.160
<v Speaker 2>a way for companies that are building

00:13:21.399 --> 00:13:23.800
<v Speaker 2>data warehousing systems, a big data systems, a

00:13:23.800 --> 00:13:25.880
<v Speaker 2>streaming data systems, basically, like, all these, like,

00:13:25.880 --> 00:13:28.520
<v Speaker 2>analytical systems that are working on

00:13:29.000 --> 00:13:31.720
<v Speaker 2>observational data of any kind, right, whether it's

00:13:31.720 --> 00:13:34.255
<v Speaker 2>server monitoring data or sensor data or whatever,

00:13:34.895 --> 00:13:37.535
<v Speaker 2>those standards would become a way for people

00:13:37.535 --> 00:13:39.135
<v Speaker 2>to collaborate and build,

00:13:40.175 --> 00:13:43.855
<v Speaker 2>you know, common infrastructure, but also proprietary solutions.

00:13:43.855 --> 00:13:45.880
<v Speaker 2>And those will be, like, the touch points

00:13:45.880 --> 00:13:48.920
<v Speaker 2>in terms of, like, how you exchange data

00:13:48.920 --> 00:13:50.120
<v Speaker 2>between these systems.

00:13:50.280 --> 00:13:52.680
<v Speaker 2>So that was kind of the thesis in

00:13:52.680 --> 00:13:53.960
<v Speaker 2>early twenty twenty.

00:13:54.280 --> 00:13:55.960
<v Speaker 2>Rust as a language is gonna be better

00:13:55.960 --> 00:13:56.440
<v Speaker 2>because,

00:13:58.145 --> 00:14:00.705
<v Speaker 2>one, like, the the multithreading support in Rust,

00:14:00.705 --> 00:14:01.985
<v Speaker 2>think, is just the way it handles it

00:14:01.985 --> 00:14:04.225
<v Speaker 2>is is way, way better, right, because it's

00:14:04.225 --> 00:14:06.065
<v Speaker 2>kind of enforced by the compiler.

00:14:07.985 --> 00:14:10.305
<v Speaker 2>We wanted strict control over how memory is

00:14:10.305 --> 00:14:12.225
<v Speaker 2>managed and and that kind of stuff, which

00:14:12.225 --> 00:14:14.390
<v Speaker 2>obviously, like, basically, we didn't want a garbage

00:14:14.390 --> 00:14:15.430
<v Speaker 2>collected language.

00:14:16.070 --> 00:14:18.070
<v Speaker 2>Performance was gonna be a critical thing. Like,

00:14:18.070 --> 00:14:19.589
<v Speaker 2>go super fast. Don't get me wrong. I

00:14:19.589 --> 00:14:21.670
<v Speaker 2>love it as a language. It's way easier

00:14:21.670 --> 00:14:23.190
<v Speaker 2>to learn and work with than Rust, I

00:14:23.190 --> 00:14:24.790
<v Speaker 2>think, in my personal opinion.

00:14:25.510 --> 00:14:26.070
<v Speaker 2>But

00:14:26.525 --> 00:14:28.685
<v Speaker 2>I just thought for this kind of software,

00:14:28.925 --> 00:14:30.765
<v Speaker 2>for, you know, database system that has to

00:14:30.765 --> 00:14:32.925
<v Speaker 2>perform at scale and with high performance,

00:14:33.165 --> 00:14:35.965
<v Speaker 2>like, Rust just seems like the logical choice.

00:14:36.205 --> 00:14:37.725
<v Speaker 2>And if it wasn't Rust, it would be,

00:14:37.725 --> 00:14:39.165
<v Speaker 2>like, c plus plus. But,

00:14:39.885 --> 00:14:41.165
<v Speaker 2>I think in this day and age,

00:14:41.840 --> 00:14:43.280
<v Speaker 2>it would be it's just a better choice

00:14:43.280 --> 00:14:44.400
<v Speaker 2>to use Rust.

00:14:45.120 --> 00:14:47.280
<v Speaker 2>Yeah. And then, yeah, and then over the

00:14:47.280 --> 00:14:49.040
<v Speaker 2>course of the next, you know, three and

00:14:49.040 --> 00:14:51.840
<v Speaker 2>a half years, like, initially, we it was

00:14:51.840 --> 00:14:54.560
<v Speaker 2>basically, like, me and one other guy within

00:14:54.560 --> 00:14:55.280
<v Speaker 2>Influx

00:14:55.985 --> 00:14:57.425
<v Speaker 2>for a couple of months, and then we

00:14:57.425 --> 00:14:58.705
<v Speaker 2>hired somebody else,

00:14:59.265 --> 00:15:00.865
<v Speaker 2>Andrew, who's still with us.

00:15:01.425 --> 00:15:03.505
<v Speaker 2>And these are the three of us kind

00:15:03.505 --> 00:15:05.985
<v Speaker 2>of treated as a research project almost for

00:15:05.985 --> 00:15:08.705
<v Speaker 2>the first, like, six months. It wasn't like

00:15:09.089 --> 00:15:11.329
<v Speaker 2>I wasn't I within the company, there's no

00:15:11.329 --> 00:15:12.850
<v Speaker 2>way I was gonna get, like, people to

00:15:12.850 --> 00:15:14.930
<v Speaker 2>buy off on, oh, Paul wants to rewrite

00:15:14.930 --> 00:15:16.610
<v Speaker 2>the database. Like, yeah, let's put a bunch

00:15:16.610 --> 00:15:17.810
<v Speaker 2>of effort into that.

00:15:20.290 --> 00:15:22.050
<v Speaker 2>No. It was basically like, I'm gonna do

00:15:22.050 --> 00:15:23.569
<v Speaker 2>this as a research project because I think

00:15:23.569 --> 00:15:24.130
<v Speaker 2>it's interesting,

00:15:24.825 --> 00:15:26.665
<v Speaker 2>and I'm gonna see where it leads. And

00:15:26.665 --> 00:15:28.345
<v Speaker 2>then by November

00:15:28.345 --> 00:15:29.545
<v Speaker 2>of twenty twenty,

00:15:31.305 --> 00:15:34.105
<v Speaker 2>we like, we've had enough of the pieces

00:15:34.105 --> 00:15:36.905
<v Speaker 2>figured out. Right? We're gonna use Apache Arrow.

00:15:36.905 --> 00:15:39.225
<v Speaker 2>We're gonna use Parquet as the persistence format.

00:15:39.779 --> 00:15:41.459
<v Speaker 2>Object storage is where all the data is

00:15:41.459 --> 00:15:42.260
<v Speaker 2>gonna live.

00:15:44.100 --> 00:15:46.660
<v Speaker 2>Apache Arrow Flight was gonna be the RPC

00:15:46.660 --> 00:15:49.380
<v Speaker 2>mechanism that has since evolved into FlightSQL,

00:15:49.380 --> 00:15:51.540
<v Speaker 2>which is a new standard they have for

00:15:51.540 --> 00:15:52.420
<v Speaker 2>essentially making,

00:15:52.995 --> 00:15:54.755
<v Speaker 2>doing RPC and SQL queries,

00:15:55.075 --> 00:15:56.915
<v Speaker 2>in these kind of data systems,

00:15:57.475 --> 00:15:57.875
<v Speaker 2>and,

00:15:58.355 --> 00:15:59.795
<v Speaker 2>a project called,

00:16:00.035 --> 00:16:02.995
<v Speaker 2>Apache Data Fusion. Right now, it's a subproject

00:16:02.995 --> 00:16:04.275
<v Speaker 2>of Apache Arrow.

00:16:04.515 --> 00:16:08.515
<v Speaker 2>Its Data Fusion is a SQL

00:16:07.970 --> 00:16:09.490
<v Speaker 2>parser, planner,

00:16:10.770 --> 00:16:13.810
<v Speaker 2>optimizer, and execution engine written in Rust.

00:16:14.690 --> 00:16:15.810
<v Speaker 2>And we're like,

00:16:16.130 --> 00:16:18.210
<v Speaker 2>at that point in, you know, the summer

00:16:18.210 --> 00:16:20.610
<v Speaker 2>of twenty twenty when we decided to build

00:16:20.610 --> 00:16:21.410
<v Speaker 2>around these things,

00:16:22.394 --> 00:16:24.475
<v Speaker 2>you know, data fusion wasn't even close to

00:16:24.475 --> 00:16:26.154
<v Speaker 2>as far along as it is now. And

00:16:26.154 --> 00:16:27.035
<v Speaker 2>we knew,

00:16:29.035 --> 00:16:31.755
<v Speaker 2>we knew that we'd be, like, investing significant

00:16:31.755 --> 00:16:33.274
<v Speaker 2>effort. Like, we actually

00:16:33.915 --> 00:16:36.960
<v Speaker 2>looked at using other SQL engines as the

00:16:36.960 --> 00:16:38.400
<v Speaker 2>core of the database. We looked at some

00:16:38.400 --> 00:16:40.480
<v Speaker 2>c plus plus engines just to think,

00:16:40.800 --> 00:16:42.240
<v Speaker 2>like, you know, may we didn't wanna write

00:16:42.240 --> 00:16:42.960
<v Speaker 2>our own.

00:16:43.760 --> 00:16:45.760
<v Speaker 2>But Right. We needed something that was, like,

00:16:45.760 --> 00:16:47.760
<v Speaker 2>optimized for our use case for time series.

00:16:48.165 --> 00:16:50.644
<v Speaker 2>And we saw that regardless of what we

00:16:50.644 --> 00:16:52.565
<v Speaker 2>picked up, we would end up having to

00:16:52.565 --> 00:16:53.925
<v Speaker 2>do do a lot of work, and we'd

00:16:53.925 --> 00:16:56.885
<v Speaker 2>almost, know, have to take partial ownership of

00:16:56.885 --> 00:16:57.605
<v Speaker 2>the project.

00:16:58.165 --> 00:16:58.725
<v Speaker 2>And

00:16:59.205 --> 00:17:02.570
<v Speaker 2>we thought this umbrella of projects under Apache,

00:17:02.570 --> 00:17:05.049
<v Speaker 2>under the Apache Foundation, under Arrow,

00:17:05.930 --> 00:17:06.569
<v Speaker 2>were

00:17:06.890 --> 00:17:08.890
<v Speaker 2>you know, they were they were early, but

00:17:08.890 --> 00:17:10.730
<v Speaker 2>they were promising. And if we really put

00:17:10.730 --> 00:17:13.050
<v Speaker 2>our effort behind it, it would cause more

00:17:13.050 --> 00:17:13.849
<v Speaker 2>people to

00:17:14.250 --> 00:17:14.570
<v Speaker 2>also

00:17:15.464 --> 00:17:18.025
<v Speaker 2>start programming against it and whatever. So in

00:17:18.025 --> 00:17:20.904
<v Speaker 2>November of twenty twenty, I announced, hey.

00:17:21.224 --> 00:17:23.224
<v Speaker 2>Working on a new core of the database.

00:17:23.625 --> 00:17:26.265
<v Speaker 2>It's called IOX because nobody was comfortable with

00:17:26.265 --> 00:17:28.025
<v Speaker 2>me calling it InfluxDB3.o.

00:17:29.890 --> 00:17:31.330
<v Speaker 2>Because, again, they're like,

00:17:31.650 --> 00:17:33.410
<v Speaker 2>you're not gonna rewrite the database. So there's

00:17:33.410 --> 00:17:34.610
<v Speaker 2>no way we're doing this. So I was

00:17:34.610 --> 00:17:36.610
<v Speaker 2>like, well, we'll we'll just let's just see

00:17:36.610 --> 00:17:37.570
<v Speaker 2>how it goes.

00:17:38.370 --> 00:17:39.249
<v Speaker 2>So

00:17:40.690 --> 00:17:42.530
<v Speaker 2>but, yeah, at that point, I announced it,

00:17:42.530 --> 00:17:44.215
<v Speaker 2>and still it was, like, three of us

00:17:44.215 --> 00:17:46.215
<v Speaker 2>working on it. It was still very, very

00:17:46.215 --> 00:17:48.054
<v Speaker 2>early stage, but that

00:17:48.534 --> 00:17:50.855
<v Speaker 2>allowed us to it got, you know, a

00:17:50.855 --> 00:17:52.054
<v Speaker 2>number of people out there in the world

00:17:52.054 --> 00:17:54.615
<v Speaker 2>interested in the project, and we hired some

00:17:54.615 --> 00:17:57.560
<v Speaker 2>great people that joined us so that by

00:17:57.560 --> 00:17:59.320
<v Speaker 2>March of twenty twenty one,

00:17:59.720 --> 00:18:01.240
<v Speaker 2>you know, we had a team of, I

00:18:01.240 --> 00:18:02.280
<v Speaker 2>think, nine people.

00:18:03.080 --> 00:18:05.080
<v Speaker 2>And we spent years

00:18:05.400 --> 00:18:07.000
<v Speaker 2>writing a database,

00:18:07.560 --> 00:18:09.800
<v Speaker 2>which we launched into production earlier this year.

00:18:10.355 --> 00:18:12.035
<v Speaker 0>So how long did it take before you

00:18:12.035 --> 00:18:14.434
<v Speaker 0>were allowed to call it three point o

00:18:14.675 --> 00:18:16.915
<v Speaker 0>before people stopped telling you, no. You can't

00:18:16.915 --> 00:18:18.035
<v Speaker 0>rewrite this database.

00:18:18.675 --> 00:18:21.075
<v Speaker 2>I mean, we we announced publicly that it

00:18:21.075 --> 00:18:22.995
<v Speaker 2>was, InfluxDB3.0

00:18:22.995 --> 00:18:24.755
<v Speaker 2>on April twenty sixth

00:18:25.110 --> 00:18:26.789
<v Speaker 2>of this year. So

00:18:27.030 --> 00:18:29.190
<v Speaker 0>inside the company, it took you, like, two

00:18:29.190 --> 00:18:31.030
<v Speaker 0>or three years to get everybody on board

00:18:31.030 --> 00:18:33.429
<v Speaker 0>with the idea of, no. Really, we did,

00:18:33.429 --> 00:18:34.629
<v Speaker 0>and we're about to

00:18:35.270 --> 00:18:36.149
<v Speaker 0>finish it.

00:18:36.950 --> 00:18:39.270
<v Speaker 2>By I would say by

00:18:40.325 --> 00:18:41.684
<v Speaker 2>by probably,

00:18:43.365 --> 00:18:44.164
<v Speaker 2>I mean,

00:18:46.005 --> 00:18:48.005
<v Speaker 2>it's basically by, I'd say,

00:18:48.405 --> 00:18:49.445
<v Speaker 2>2021,

00:18:49.445 --> 00:18:51.525
<v Speaker 2>like, summer, fall of '20 '20 '1,

00:18:52.170 --> 00:18:54.090
<v Speaker 2>people within the company are like, okay. We

00:18:54.090 --> 00:18:57.130
<v Speaker 2>need this, like, new core database engine because,

00:18:57.130 --> 00:18:59.690
<v Speaker 2>like, at that stage, it was obvious what

00:18:59.690 --> 00:19:02.890
<v Speaker 2>the limitations of the previous engine were.

00:19:03.130 --> 00:19:04.970
<v Speaker 2>Right? In the beginning, people are like, Paul,

00:19:04.970 --> 00:19:06.490
<v Speaker 2>what are you talking about? Like, you know,

00:19:06.955 --> 00:19:08.715
<v Speaker 2>there were some people who who got it

00:19:08.715 --> 00:19:09.595
<v Speaker 2>intrinsically,

00:19:09.595 --> 00:19:10.955
<v Speaker 2>and other people are like, we don't need

00:19:10.955 --> 00:19:13.195
<v Speaker 2>to do this right now. And then by,

00:19:13.195 --> 00:19:14.715
<v Speaker 2>again, like I said, like, the fall of

00:19:14.715 --> 00:19:17.035
<v Speaker 2>twenty twenty one, everybody in the company is

00:19:17.035 --> 00:19:18.795
<v Speaker 2>like, okay. We definitely need this new database

00:19:18.795 --> 00:19:20.155
<v Speaker 2>engine. When's it gonna be ready? And I'm

00:19:20.155 --> 00:19:22.009
<v Speaker 2>like, guys, you

00:19:22.169 --> 00:19:24.090
<v Speaker 2>know, we're we're not baking a key share.

00:19:24.090 --> 00:19:25.529
<v Speaker 2>Like, it's gonna take some time.

00:19:26.410 --> 00:19:27.049
<v Speaker 2>Yeah.

00:19:27.370 --> 00:19:28.009
<v Speaker 2>So

00:19:29.770 --> 00:19:32.650
<v Speaker 2>so yeah. By and then by, I'd say,

00:19:32.650 --> 00:19:34.250
<v Speaker 2>like, the spring of twenty twenty two,

00:19:35.235 --> 00:19:37.795
<v Speaker 2>it was like, okay. This is this is

00:19:37.795 --> 00:19:39.155
<v Speaker 2>obviously what we need to be doing. And

00:19:39.155 --> 00:19:40.755
<v Speaker 2>then definitely by the fall of twenty twenty

00:19:40.755 --> 00:19:43.715
<v Speaker 2>two, it's like, okay. We're getting everybody focused

00:19:43.715 --> 00:19:44.514
<v Speaker 2>on this

00:19:44.915 --> 00:19:46.835
<v Speaker 2>new database engine, and we're gonna call it

00:19:46.835 --> 00:19:47.635
<v Speaker 2>3.o.

00:19:47.635 --> 00:19:49.875
<v Speaker 2>Then it just became a question of when

00:19:50.280 --> 00:19:52.120
<v Speaker 2>when we were gonna be more public about

00:19:52.120 --> 00:19:54.520
<v Speaker 2>the fact that it was 3.o. But in

00:19:54.520 --> 00:19:55.480
<v Speaker 2>my mind,

00:19:55.800 --> 00:19:58.120
<v Speaker 2>it was always InfluxDB three dot o.

00:19:59.240 --> 00:20:01.480
<v Speaker 2>Even though it is a total rewrite and

00:20:01.480 --> 00:20:03.000
<v Speaker 2>the database architecture is

00:20:04.125 --> 00:20:05.645
<v Speaker 2>drastically different than

00:20:05.805 --> 00:20:08.285
<v Speaker 2>the the underlying database architecture of one and

00:20:08.285 --> 00:20:08.765
<v Speaker 2>two.

00:20:09.085 --> 00:20:09.804
<v Speaker 1>Alright.

00:20:10.525 --> 00:20:12.365
<v Speaker 1>Nice. I love that we just ask a

00:20:12.365 --> 00:20:14.365
<v Speaker 1>question and then set you loose, and then

00:20:14.365 --> 00:20:15.485
<v Speaker 1>you you

00:20:15.485 --> 00:20:17.565
<v Speaker 1>just go for it. Sorry. Yeah. Go for

00:20:17.565 --> 00:20:19.679
<v Speaker 0>it. No. Don't be sorry. That's the good

00:20:19.679 --> 00:20:21.200
<v Speaker 0>part. It's fine. Well, I don't know if

00:20:21.200 --> 00:20:22.799
<v Speaker 2>there should be more back and forth.

00:20:23.520 --> 00:20:26.399
<v Speaker 1>No. No. No. That was absolutely perfect. And,

00:20:26.400 --> 00:20:27.919
<v Speaker 1>you know, you kind of answered my second

00:20:27.919 --> 00:20:29.679
<v Speaker 1>question, which is good as well because we're

00:20:29.679 --> 00:20:32.080
<v Speaker 1>thinking through the the problems faced well here.

00:20:32.080 --> 00:20:33.840
<v Speaker 1>I think there's a lot of context about

00:20:34.255 --> 00:20:36.895
<v Speaker 1>what happened in the industry, what happened with

00:20:36.895 --> 00:20:38.895
<v Speaker 1>the early versions of Influx, why this rewrite

00:20:38.895 --> 00:20:41.135
<v Speaker 1>was required, why Rust, why Arrow, all these

00:20:41.135 --> 00:20:43.374
<v Speaker 1>things now make a lot more sense. Right?

00:20:43.534 --> 00:20:46.335
<v Speaker 1>But Mhmm. You know, let's reemphasize one of

00:20:46.335 --> 00:20:47.695
<v Speaker 1>those things you talked about with the twenty

00:20:47.695 --> 00:20:50.740
<v Speaker 1>tens. It's like this was the decade where

00:20:50.740 --> 00:20:53.620
<v Speaker 1>containers and cloud took off. Right? People were

00:20:53.620 --> 00:20:55.059
<v Speaker 1>using the femoral compute,

00:20:55.300 --> 00:20:58.260
<v Speaker 1>spinning up VMs on AWS,

00:20:58.260 --> 00:20:59.059
<v Speaker 1>GCP,

00:20:59.060 --> 00:21:02.020
<v Speaker 1>Azure, launching dozens to hundreds to thousands of

00:21:02.020 --> 00:21:03.940
<v Speaker 1>containers orchestrated with Kubernetes,

00:21:04.395 --> 00:21:06.635
<v Speaker 1>and all of these have their own signals.

00:21:06.635 --> 00:21:07.915
<v Speaker 1>They have their own logs. They have their

00:21:07.915 --> 00:21:09.835
<v Speaker 1>own metrics. They have their own traces. Traces

00:21:09.835 --> 00:21:11.835
<v Speaker 1>are now important because at the same time

00:21:11.995 --> 00:21:14.395
<v Speaker 1>of this wild cloud container

00:21:14.555 --> 00:21:15.995
<v Speaker 1>orchestration evolution,

00:21:16.315 --> 00:21:19.080
<v Speaker 1>people decided to start doing microservices because the

00:21:19.080 --> 00:21:21.480
<v Speaker 1>technology enabled all these new architectures too.

00:21:21.880 --> 00:21:22.440
<v Speaker 1>So

00:21:23.240 --> 00:21:25.320
<v Speaker 1>I spend a lot of my time I'm

00:21:25.320 --> 00:21:27.080
<v Speaker 1>just gonna, like, set context and not ask

00:21:27.080 --> 00:21:28.520
<v Speaker 1>questions and then just let you infer the

00:21:28.520 --> 00:21:30.679
<v Speaker 1>questions. But still, I spent a lot of

00:21:30.679 --> 00:21:33.235
<v Speaker 1>my time working with companies that are trying

00:21:33.235 --> 00:21:34.995
<v Speaker 1>to build up platforms. You know? They want

00:21:34.995 --> 00:21:36.595
<v Speaker 1>to make it easier for their developers to

00:21:36.595 --> 00:21:38.755
<v Speaker 1>deploy to production. And I think one of

00:21:38.755 --> 00:21:40.755
<v Speaker 1>the challenges I've seen is that people really

00:21:40.755 --> 00:21:42.915
<v Speaker 1>struggle with, I need a database for logs.

00:21:42.915 --> 00:21:44.675
<v Speaker 1>I need a database for tracing. I need

00:21:44.675 --> 00:21:46.755
<v Speaker 1>a database for my metrics. I then need

00:21:46.860 --> 00:21:49.580
<v Speaker 1>to aggregate the inquiry and all this stuff.

00:21:49.820 --> 00:21:52.140
<v Speaker 1>And they make it really complicated

00:21:52.140 --> 00:21:53.660
<v Speaker 1>for what is in essence all the same

00:21:53.660 --> 00:21:55.420
<v Speaker 1>data structure. I don't think there's that much

00:21:55.420 --> 00:21:56.940
<v Speaker 1>difference from a metric or trace in the

00:21:56.940 --> 00:21:59.020
<v Speaker 1>log. It's all a collection of events. The

00:21:59.020 --> 00:22:00.700
<v Speaker 1>difference between a trace and a metric is

00:22:00.700 --> 00:22:02.540
<v Speaker 1>the is an aggregation of some raw level

00:22:02.540 --> 00:22:04.595
<v Speaker 1>event. And the challenge has always been the

00:22:04.595 --> 00:22:07.235
<v Speaker 1>cost of storing it at the super high

00:22:07.235 --> 00:22:07.955
<v Speaker 1>dimensionality

00:22:08.115 --> 00:22:10.755
<v Speaker 1>the the super high dimensions versus the easiness

00:22:10.755 --> 00:22:12.274
<v Speaker 1>of querying that, which is why we probably

00:22:12.274 --> 00:22:13.554
<v Speaker 1>do metrics and

00:22:13.955 --> 00:22:16.034
<v Speaker 1>terrible versions of histograms and all this other

00:22:16.034 --> 00:22:17.715
<v Speaker 1>stuff that we now accept as the norm.

00:22:17.715 --> 00:22:17.875
<v Speaker 1>Right?

00:22:18.540 --> 00:22:21.100
<v Speaker 1>Yeah. Does and I'm gonna quote something on

00:22:21.100 --> 00:22:22.540
<v Speaker 1>your website that you may hate me for.

00:22:22.540 --> 00:22:24.700
<v Speaker 1>Right? But when we talk about IOCs and

00:22:24.700 --> 00:22:27.820
<v Speaker 1>d b three, you you specifically say infinite

00:22:27.820 --> 00:22:28.940
<v Speaker 1>cardinality.

00:22:29.180 --> 00:22:32.625
<v Speaker 1>Yeah. So the question is, does IOX give

00:22:32.625 --> 00:22:34.945
<v Speaker 1>us or can it or InfluxDB three, sorry,

00:22:34.945 --> 00:22:37.425
<v Speaker 1>give us a single store for all of

00:22:37.425 --> 00:22:39.505
<v Speaker 1>these signals, all of this observability and monitoring

00:22:39.505 --> 00:22:40.225
<v Speaker 1>data?

00:22:40.625 --> 00:22:41.184
<v Speaker 1>And

00:22:41.585 --> 00:22:43.265
<v Speaker 1>can you give us a bit more insight

00:22:43.265 --> 00:22:45.505
<v Speaker 1>into what that infinite cardinality actually means on

00:22:45.505 --> 00:22:46.065
<v Speaker 1>a practical

00:22:46.620 --> 00:22:47.340
<v Speaker 1>term.

00:22:48.300 --> 00:22:49.260
<v Speaker 2>Yeah. So

00:22:50.380 --> 00:22:52.860
<v Speaker 2>to store the data, yes,

00:22:53.100 --> 00:22:54.620
<v Speaker 2>three dot o can store all of that

00:22:54.620 --> 00:22:56.620
<v Speaker 2>kinds kind of data, right,

00:22:57.820 --> 00:22:59.900
<v Speaker 2>because of the the fact that cardinality doesn't

00:22:59.900 --> 00:23:01.900
<v Speaker 2>matter. The problem becomes

00:23:02.515 --> 00:23:04.754
<v Speaker 2>happens when you try to query that data?

00:23:05.635 --> 00:23:08.595
<v Speaker 2>Pulling it out. Right? And that's basically, like,

00:23:08.595 --> 00:23:09.154
<v Speaker 2>the

00:23:09.955 --> 00:23:12.274
<v Speaker 2>the patterns for how you query the data

00:23:12.515 --> 00:23:14.275
<v Speaker 2>and what people expect

00:23:14.690 --> 00:23:17.090
<v Speaker 2>are why you end up with, you know,

00:23:17.090 --> 00:23:18.850
<v Speaker 2>I I I think,

00:23:19.010 --> 00:23:20.690
<v Speaker 2>why you end up with three different systems

00:23:20.690 --> 00:23:23.010
<v Speaker 2>for for storing each of those kinds of

00:23:23.010 --> 00:23:25.169
<v Speaker 2>data. Right? Traces, metrics, and logs.

00:23:25.490 --> 00:23:27.010
<v Speaker 2>In my mind, they're all just, like, different

00:23:27.010 --> 00:23:29.170
<v Speaker 2>views of the same thing. Ultimately, like,

00:23:29.885 --> 00:23:32.284
<v Speaker 2>if you wanted to, you could just have

00:23:32.284 --> 00:23:35.164
<v Speaker 2>traces and skip the logs and metrics.

00:23:36.205 --> 00:23:38.604
<v Speaker 2>Right? You can infer you could derive

00:23:39.005 --> 00:23:41.804
<v Speaker 2>everything else from raw traces. Because traces, again,

00:23:41.804 --> 00:23:43.930
<v Speaker 2>like, you could have just a blob string

00:23:43.930 --> 00:23:45.370
<v Speaker 2>field in the trace

00:23:45.530 --> 00:23:47.770
<v Speaker 2>that has log info.

00:23:47.770 --> 00:23:49.850
<v Speaker 2>Right? So but the problem

00:23:50.090 --> 00:23:50.809
<v Speaker 2>is

00:23:51.210 --> 00:23:53.530
<v Speaker 2>the problems are, like, what happens at scale.

00:23:54.090 --> 00:23:56.090
<v Speaker 2>Right? And when you start generating a ton

00:23:56.090 --> 00:23:57.690
<v Speaker 2>of this data, do you end up having

00:23:57.690 --> 00:23:58.250
<v Speaker 2>to sample it?

00:23:59.465 --> 00:24:01.465
<v Speaker 2>And then how do you actually access the

00:24:01.465 --> 00:24:03.465
<v Speaker 2>data? What are the access patterns? Right? So

00:24:03.465 --> 00:24:04.425
<v Speaker 2>for right now,

00:24:05.385 --> 00:24:06.585
<v Speaker 2>you know, the

00:24:07.545 --> 00:24:10.265
<v Speaker 2>the metric access patterns are like, I have

00:24:10.265 --> 00:24:11.625
<v Speaker 2>this metric, and I wanna look at it.

00:24:11.625 --> 00:24:13.625
<v Speaker 2>And the idea behind metrics is you're actually

00:24:13.710 --> 00:24:16.669
<v Speaker 2>metrics are a summary view of some underlying

00:24:16.669 --> 00:24:19.789
<v Speaker 2>distribution or some underlying thing that you're tracking.

00:24:19.950 --> 00:24:22.510
<v Speaker 2>Generally, metrics are not the raw high precision

00:24:22.510 --> 00:24:24.669
<v Speaker 2>view. Right? For example,

00:24:25.870 --> 00:24:27.390
<v Speaker 2>if you want the

00:24:27.955 --> 00:24:30.915
<v Speaker 2>average response time in one minute intervals

00:24:31.395 --> 00:24:34.275
<v Speaker 2>to an API call, right, the specific, like,

00:24:34.275 --> 00:24:35.955
<v Speaker 2>API endpoint. Right?

00:24:36.195 --> 00:24:38.995
<v Speaker 2>Now the raw view is individual

00:24:38.995 --> 00:24:39.715
<v Speaker 2>requests.

00:24:40.090 --> 00:24:42.170
<v Speaker 2>Right? And you log every

00:24:42.570 --> 00:24:44.410
<v Speaker 2>bit of detail you would want on that

00:24:44.410 --> 00:24:47.130
<v Speaker 2>request. Right? What host received the request,

00:24:47.450 --> 00:24:49.690
<v Speaker 2>what user submitted it, what token they were

00:24:49.690 --> 00:24:51.610
<v Speaker 2>using, what endpoint,

00:24:51.690 --> 00:24:54.250
<v Speaker 2>the actual data included in the request, the

00:24:54.250 --> 00:24:55.050
<v Speaker 2>response time,

00:24:55.675 --> 00:24:58.235
<v Speaker 2>the response itself. Right? You could you can

00:24:58.235 --> 00:24:59.115
<v Speaker 2>get

00:24:59.115 --> 00:25:02.154
<v Speaker 2>down to just an insane level of precision.

00:25:03.275 --> 00:25:04.955
<v Speaker 2>But the problem is to do that at

00:25:04.955 --> 00:25:07.755
<v Speaker 2>scale is completely unreasonable. Right? Generates, like, more

00:25:07.755 --> 00:25:09.675
<v Speaker 2>data than you ever even stored

00:25:09.980 --> 00:25:11.900
<v Speaker 2>and all this other stuff. So you end

00:25:11.900 --> 00:25:14.299
<v Speaker 2>up creating these systems to summarize things.

00:25:14.860 --> 00:25:17.180
<v Speaker 2>And the problem that people frequently run into

00:25:17.180 --> 00:25:18.620
<v Speaker 2>is like, well, if you didn't think ahead

00:25:18.620 --> 00:25:20.539
<v Speaker 2>of time of what you needed to summarize,

00:25:20.940 --> 00:25:22.460
<v Speaker 2>when you go to look at the summaries,

00:25:22.460 --> 00:25:23.100
<v Speaker 2>your metrics,

00:25:23.735 --> 00:25:25.655
<v Speaker 2>the answer you need isn't there, and the

00:25:25.655 --> 00:25:29.095
<v Speaker 2>the requests already happen. Mhmm. Right? So logs

00:25:29.095 --> 00:25:31.255
<v Speaker 2>are a way to capture more detail and

00:25:31.255 --> 00:25:32.775
<v Speaker 2>then kind of, like, try to figure it

00:25:32.775 --> 00:25:33.255
<v Speaker 2>out

00:25:33.815 --> 00:25:35.655
<v Speaker 2>after the fact. Right? So the idea with

00:25:35.655 --> 00:25:37.095
<v Speaker 2>logs is it's

00:25:38.380 --> 00:25:40.780
<v Speaker 2>it's something where, you know, you're doing an

00:25:40.780 --> 00:25:42.220
<v Speaker 2>ad hoc investigation

00:25:42.220 --> 00:25:45.100
<v Speaker 2>where you're not continuously, like, looking for some

00:25:45.100 --> 00:25:46.779
<v Speaker 2>signal that triggers, like,

00:25:47.419 --> 00:25:49.419
<v Speaker 2>a a problem in the system. But

00:25:50.059 --> 00:25:50.380
<v Speaker 2>so,

00:25:51.205 --> 00:25:53.285
<v Speaker 2>ultimately, like, storing all that data, you can

00:25:53.285 --> 00:25:55.525
<v Speaker 2>use the same format. Parquet is a storage

00:25:55.525 --> 00:25:57.445
<v Speaker 2>format, for example, could store all that kind

00:25:57.445 --> 00:25:58.405
<v Speaker 2>of data, but

00:25:59.045 --> 00:26:02.565
<v Speaker 2>querying it effectively and efficiently is difficult. And

00:26:02.565 --> 00:26:03.605
<v Speaker 2>that usually requires

00:26:04.370 --> 00:26:07.010
<v Speaker 2>either secondary indexing structures or other ways to

00:26:07.010 --> 00:26:09.410
<v Speaker 2>organize the data so that you can actually

00:26:09.410 --> 00:26:11.250
<v Speaker 2>query it effectively. Now,

00:26:11.810 --> 00:26:12.929
<v Speaker 2>aspirationally,

00:26:13.250 --> 00:26:15.090
<v Speaker 2>three dot o wants to be

00:26:15.890 --> 00:26:18.130
<v Speaker 2>the home for all that kind of data.

00:26:18.130 --> 00:26:20.850
<v Speaker 2>Basically, for any kind of observational data you

00:26:20.085 --> 00:26:22.725
<v Speaker 2>can think of. Right? And, like, for us,

00:26:22.725 --> 00:26:23.764
<v Speaker 2>it's not just, like,

00:26:24.325 --> 00:26:26.965
<v Speaker 2>you know, the server infrastructure monitoring use cases,

00:26:26.965 --> 00:26:29.044
<v Speaker 2>but also more and more sensor data use

00:26:29.044 --> 00:26:29.684
<v Speaker 2>cases.

00:26:30.005 --> 00:26:32.005
<v Speaker 2>And, again, with sensors, you find the same

00:26:32.005 --> 00:26:33.284
<v Speaker 2>kind of thing. Right? People

00:26:34.169 --> 00:26:36.889
<v Speaker 2>can deploy more sensors in their environment for

00:26:36.889 --> 00:26:39.049
<v Speaker 2>the machines they're tracking or the environments they're

00:26:39.049 --> 00:26:42.169
<v Speaker 2>tracking, but that they can also increase

00:26:42.169 --> 00:26:44.730
<v Speaker 2>the precision of the measurements. Right? They can

00:26:44.730 --> 00:26:46.169
<v Speaker 2>increase the sampling interval.

00:26:46.745 --> 00:26:48.345
<v Speaker 2>They can increase

00:26:48.345 --> 00:26:51.625
<v Speaker 2>the precision in terms of what gets tracked

00:26:51.865 --> 00:26:54.665
<v Speaker 2>with each measurement that gets created.

00:26:54.665 --> 00:26:56.745
<v Speaker 2>Right? And that's all the metadata that you

00:26:56.745 --> 00:26:59.385
<v Speaker 2>could potentially track about something. The sensors, you

00:26:59.385 --> 00:27:01.550
<v Speaker 2>could be, again, like, all the stuff around

00:27:01.550 --> 00:27:03.710
<v Speaker 2>the customers or the users. It could be

00:27:03.710 --> 00:27:04.830
<v Speaker 2>around the location,

00:27:05.070 --> 00:27:06.910
<v Speaker 2>the, you know, the lat long, like, all

00:27:06.910 --> 00:27:08.030
<v Speaker 2>that other kind of stuff.

00:27:08.430 --> 00:27:08.990
<v Speaker 2>So

00:27:10.030 --> 00:27:12.030
<v Speaker 2>getting there like, we're there in terms of

00:27:12.030 --> 00:27:13.310
<v Speaker 2>being able to store it. We're not there

00:27:13.310 --> 00:27:14.910
<v Speaker 2>in terms of being able to query it.

00:27:15.375 --> 00:27:17.534
<v Speaker 2>We organize data into large chunks,

00:27:17.775 --> 00:27:19.215
<v Speaker 2>and then the query engine just kind of

00:27:19.215 --> 00:27:20.735
<v Speaker 2>brute forces those chunks.

00:27:21.135 --> 00:27:21.695
<v Speaker 2>So

00:27:22.015 --> 00:27:22.815
<v Speaker 2>I think

00:27:24.255 --> 00:27:27.615
<v Speaker 2>the it's yeah. That that is gonna take

00:27:27.615 --> 00:27:29.055
<v Speaker 2>some time to get to the stage where

00:27:29.055 --> 00:27:30.495
<v Speaker 2>we can actually do all those things. I

00:27:30.495 --> 00:27:30.735
<v Speaker 2>think

00:27:32.350 --> 00:27:35.070
<v Speaker 2>there's some other stuff around, like, with logs

00:27:35.070 --> 00:27:38.110
<v Speaker 2>and tracing use cases where the schemas are

00:27:38.110 --> 00:27:40.909
<v Speaker 2>very, very dynamic, and they're not always consistent.

00:27:40.990 --> 00:27:43.070
<v Speaker 2>Right? If you try to, like, pull out

00:27:43.070 --> 00:27:45.070
<v Speaker 2>structured fields from these things, a lot of

00:27:45.070 --> 00:27:48.065
<v Speaker 2>times people won't have the same field types

00:27:48.305 --> 00:27:50.465
<v Speaker 2>for something that's named the same thing because

00:27:50.465 --> 00:27:52.945
<v Speaker 2>they're in different services or whatever. So those

00:27:52.945 --> 00:27:54.465
<v Speaker 2>are all just, like, kind of,

00:27:55.025 --> 00:27:55.665
<v Speaker 2>like,

00:27:55.985 --> 00:27:56.545
<v Speaker 2>weird

00:27:56.865 --> 00:28:00.385
<v Speaker 0>They're fun. Yeah. Infrastruct like, horrible, like, problems

00:28:00.465 --> 00:28:01.985
<v Speaker 2>that you just end up having to deal

00:28:01.985 --> 00:28:02.145
<v Speaker 2>with.

00:28:03.840 --> 00:28:06.240
<v Speaker 2>So whereas, like, right now, I would say

00:28:06.240 --> 00:28:08.320
<v Speaker 2>with 3. O, it's better for, like, structured

00:28:08.320 --> 00:28:10.400
<v Speaker 2>events, right, where you have events that you're

00:28:10.400 --> 00:28:10.960
<v Speaker 2>tracking

00:28:11.200 --> 00:28:12.480
<v Speaker 2>and you wanna get high

00:28:13.760 --> 00:28:15.520
<v Speaker 2>high precision data,

00:28:15.520 --> 00:28:17.040
<v Speaker 2>right, where you can slice and dice it

00:28:17.040 --> 00:28:20.215
<v Speaker 2>or any way you choose. Right? So systems

00:28:20.215 --> 00:28:21.975
<v Speaker 2>where you can think of, like, use cases

00:28:21.975 --> 00:28:23.895
<v Speaker 2>where you think that'd be good is, like,

00:28:23.895 --> 00:28:26.534
<v Speaker 2>if you're doing usage tracking and an API,

00:28:26.535 --> 00:28:27.575
<v Speaker 2>audit logging,

00:28:27.975 --> 00:28:29.095
<v Speaker 2>any type of individual

00:28:29.255 --> 00:28:29.975
<v Speaker 2>events.

00:28:30.135 --> 00:28:32.135
<v Speaker 2>Metrics is also a use case, obviously, that

00:28:32.135 --> 00:28:34.660
<v Speaker 2>InfluxDB is used for, and this engine is

00:28:34.660 --> 00:28:36.020
<v Speaker 2>useful for as well.

00:28:37.700 --> 00:28:40.740
<v Speaker 2>But logs and traces are a bit trickier

00:28:40.740 --> 00:28:41.940
<v Speaker 2>because of the

00:28:42.260 --> 00:28:44.420
<v Speaker 2>again, like, kinda how flexible the schemas are

00:28:44.420 --> 00:28:47.140
<v Speaker 2>as people deploy them in different systems.

00:28:47.140 --> 00:28:49.620
<v Speaker 2>And the thing with tracing that's weird is

00:28:50.705 --> 00:28:52.785
<v Speaker 2>all the like, I think most of the

00:28:52.785 --> 00:28:54.065
<v Speaker 2>tracing front ends

00:28:54.865 --> 00:28:57.025
<v Speaker 2>look at, like, you're looking at a metric

00:28:57.025 --> 00:28:58.545
<v Speaker 2>view or a log view, and it's like,

00:28:58.545 --> 00:29:00.465
<v Speaker 2>oh, go look at the trace. So, basically,

00:29:00.465 --> 00:29:01.745
<v Speaker 2>what you're doing is you're jumping off to

00:29:01.745 --> 00:29:03.665
<v Speaker 2>look for a trace by a trace ID,

00:29:04.330 --> 00:29:04.970
<v Speaker 2>right,

00:29:05.210 --> 00:29:06.090
<v Speaker 2>which is

00:29:06.490 --> 00:29:09.050
<v Speaker 2>a essentially, that implies what you want is

00:29:09.050 --> 00:29:11.370
<v Speaker 2>an index which maps an ID to an

00:29:11.370 --> 00:29:13.290
<v Speaker 2>an individual trace.

00:29:13.450 --> 00:29:14.330
<v Speaker 2>And, of course,

00:29:15.210 --> 00:29:17.610
<v Speaker 2>time series database isn't really designed to do

00:29:17.610 --> 00:29:20.475
<v Speaker 2>that, or, like, the way our database is

00:29:20.475 --> 00:29:22.475
<v Speaker 2>structured is not really designed to do that.

00:29:22.475 --> 00:29:23.595
<v Speaker 2>Now there are ways

00:29:23.995 --> 00:29:25.755
<v Speaker 2>ideas we have for being able to layer

00:29:25.755 --> 00:29:28.075
<v Speaker 2>that in without having to create

00:29:28.395 --> 00:29:31.995
<v Speaker 2>super expensive secondary indexing structures, but, all of

00:29:31.995 --> 00:29:33.195
<v Speaker 2>that stuff is gonna take time.

00:29:33.950 --> 00:29:34.510
<v Speaker 2>So

00:29:34.750 --> 00:29:36.750
<v Speaker 2>I think with with tracing, it may would

00:29:36.750 --> 00:29:38.669
<v Speaker 2>would make it easier is

00:29:38.830 --> 00:29:40.670
<v Speaker 2>when you have a trace ID, you basically

00:29:40.670 --> 00:29:42.990
<v Speaker 2>always have a a time range as well.

00:29:43.550 --> 00:29:45.310
<v Speaker 2>So for a system that stores traces at

00:29:45.310 --> 00:29:47.070
<v Speaker 2>scale, it would be easier to say, like,

00:29:47.070 --> 00:29:48.965
<v Speaker 2>oh, give me this give me the this

00:29:48.965 --> 00:29:51.205
<v Speaker 2>trace ID, but this is, like, the time

00:29:51.205 --> 00:29:53.045
<v Speaker 2>envelope that it appears in.

00:29:53.525 --> 00:29:55.845
<v Speaker 2>At least that's what I'm imagining make it

00:29:55.845 --> 00:29:56.885
<v Speaker 2>easier. But

00:29:57.285 --> 00:29:57.845
<v Speaker 2>yeah.

00:29:58.965 --> 00:29:59.685
<v Speaker 2>I don't know. Yeah.

00:30:00.340 --> 00:30:02.500
<v Speaker 2>Metrics, logs, and traces is basically, like, the

00:30:02.500 --> 00:30:04.659
<v Speaker 2>gold standard for how you do observability right

00:30:04.659 --> 00:30:05.940
<v Speaker 2>now, but I don't think

00:30:06.740 --> 00:30:08.899
<v Speaker 2>I don't think that's the end state. I

00:30:08.899 --> 00:30:11.059
<v Speaker 2>think it's not ideal.

00:30:11.539 --> 00:30:13.220
<v Speaker 2>Like, the usability isn't ideal.

00:30:14.015 --> 00:30:15.215
<v Speaker 2>It can be painful.

00:30:15.535 --> 00:30:17.215
<v Speaker 2>Tracing is super like,

00:30:17.615 --> 00:30:20.335
<v Speaker 2>tracing is expensive from a development perspective in

00:30:20.335 --> 00:30:22.095
<v Speaker 2>terms of putting it into your code, but

00:30:22.095 --> 00:30:23.775
<v Speaker 2>it's also expensive in terms of, like, an

00:30:23.775 --> 00:30:26.730
<v Speaker 2>infrastructure and, like, being able collect all this

00:30:26.730 --> 00:30:28.330
<v Speaker 2>data. And then you get into, like, figuring

00:30:28.330 --> 00:30:30.090
<v Speaker 2>out, okay. Do we need to do sampling

00:30:30.090 --> 00:30:32.090
<v Speaker 2>because there's too much? And

00:30:32.410 --> 00:30:34.330
<v Speaker 2>I don't know. It's all still too difficult

00:30:34.330 --> 00:30:35.850
<v Speaker 2>to use, which tells me there's a lot

00:30:35.850 --> 00:30:38.794
<v Speaker 2>of room for for innovation. But the thing

00:30:38.794 --> 00:30:39.914
<v Speaker 2>is there are a lot of really smart

00:30:39.914 --> 00:30:41.595
<v Speaker 2>people trying to fix these problems.

00:30:41.755 --> 00:30:44.234
<v Speaker 2>It's just really hard because of the, like,

00:30:45.115 --> 00:30:47.355
<v Speaker 2>volume of data keeps increasing,

00:30:47.434 --> 00:30:49.434
<v Speaker 2>and the demands of the user base

00:30:49.755 --> 00:30:51.114
<v Speaker 2>also keep increasing.

00:30:51.755 --> 00:30:52.155
<v Speaker 2>Right?

00:30:53.490 --> 00:30:55.170
<v Speaker 0>Yeah. I used to work at a logging

00:30:55.170 --> 00:30:56.610
<v Speaker 0>company and back

00:30:56.850 --> 00:30:58.450
<v Speaker 0>around the same time when you were discussing

00:30:58.450 --> 00:31:00.290
<v Speaker 0>how do we move this off to other

00:31:00.290 --> 00:31:00.850
<v Speaker 0>things.

00:31:01.250 --> 00:31:01.809
<v Speaker 0>And

00:31:02.210 --> 00:31:03.890
<v Speaker 0>I remember that being part of the discussion

00:31:03.890 --> 00:31:06.210
<v Speaker 0>that we were handling petabytes of data and

00:31:06.210 --> 00:31:08.050
<v Speaker 0>how do you handle just that much.

00:31:09.445 --> 00:31:11.605
<v Speaker 0>But I I find it interesting if you

00:31:11.684 --> 00:31:12.885
<v Speaker 0>do do you end up with a lot

00:31:12.885 --> 00:31:15.684
<v Speaker 0>of legacy systems as well? Because that was

00:31:15.684 --> 00:31:17.605
<v Speaker 0>always the issue with the logging is that

00:31:17.605 --> 00:31:20.404
<v Speaker 0>to go back and change it from the

00:31:20.404 --> 00:31:21.205
<v Speaker 0>string

00:31:21.445 --> 00:31:24.309
<v Speaker 0>that who knows what the developer decided to

00:31:24.309 --> 00:31:25.750
<v Speaker 0>put in there, if they've decided to put

00:31:25.750 --> 00:31:27.510
<v Speaker 0>anything in there. And then there's all these

00:31:27.510 --> 00:31:29.510
<v Speaker 0>different levels of logs, and they're all strings

00:31:29.510 --> 00:31:30.550
<v Speaker 0>that you have to figure out how to

00:31:30.550 --> 00:31:31.190
<v Speaker 0>parse.

00:31:31.750 --> 00:31:33.830
<v Speaker 0>Then eventually, people move to structured logging, but

00:31:33.830 --> 00:31:34.550
<v Speaker 0>that wasn't a thing.

00:31:35.455 --> 00:31:36.095
<v Speaker 0>So

00:31:36.575 --> 00:31:38.895
<v Speaker 0>that's a whole another can of worms to

00:31:38.895 --> 00:31:39.934
<v Speaker 0>open, I imagine.

00:31:40.255 --> 00:31:41.855
<v Speaker 2>Yeah. I mean, you you then you have

00:31:41.855 --> 00:31:45.054
<v Speaker 2>to either, like, parse the legacy logs into

00:31:45.135 --> 00:31:46.655
<v Speaker 2>some sort of structure.

00:31:47.055 --> 00:31:48.575
<v Speaker 2>Right? I mean, I and, again, like, the

00:31:48.575 --> 00:31:49.775
<v Speaker 2>structure is really about

00:31:50.950 --> 00:31:53.430
<v Speaker 2>query performance. Right? Because you don't you could

00:31:53.590 --> 00:31:55.670
<v Speaker 2>Right. You could create the structure on the

00:31:55.670 --> 00:31:57.350
<v Speaker 2>fly. Right? You could just store all the

00:31:57.350 --> 00:31:59.510
<v Speaker 2>logs and whatever and basically, like,

00:31:59.910 --> 00:32:02.710
<v Speaker 2>at query time, parse each log line in

00:32:02.710 --> 00:32:04.630
<v Speaker 2>in the structure. And, again, like, you could

00:32:04.630 --> 00:32:05.750
<v Speaker 2>do this on the fly to be like,

00:32:05.750 --> 00:32:07.205
<v Speaker 2>oh, well, that query didn't work, but I

00:32:07.205 --> 00:32:09.125
<v Speaker 2>got this error back.

00:32:09.285 --> 00:32:11.445
<v Speaker 2>So I'll change my the way I'm structured.

00:32:11.445 --> 00:32:13.685
<v Speaker 2>I'm trying to parse that particular line or

00:32:13.685 --> 00:32:14.325
<v Speaker 2>whatever.

00:32:14.725 --> 00:32:16.485
<v Speaker 2>But the problem is that

00:32:16.885 --> 00:32:18.805
<v Speaker 2>those queries are super expensive to run. Right?

00:32:18.805 --> 00:32:20.245
<v Speaker 2>They cost a lot of CPU. They cost

00:32:20.245 --> 00:32:21.285
<v Speaker 2>a lot of network bandwidth.

00:32:21.720 --> 00:32:24.119
<v Speaker 2>So, really, like, the thing about

00:32:24.919 --> 00:32:28.279
<v Speaker 2>structured logs and even metrics is about essentially

00:32:28.679 --> 00:32:31.320
<v Speaker 2>introducing structure and summarizations

00:32:31.320 --> 00:32:32.679
<v Speaker 2>that make the queries

00:32:33.080 --> 00:32:35.880
<v Speaker 2>efficient enough to run for whatever the use

00:32:35.880 --> 00:32:38.145
<v Speaker 2>case is. And I think that's also one

00:32:38.145 --> 00:32:39.825
<v Speaker 2>of the thing to keep in mind is,

00:32:39.825 --> 00:32:42.705
<v Speaker 2>like, is this a case where you're building

00:32:42.705 --> 00:32:43.265
<v Speaker 2>for,

00:32:44.065 --> 00:32:46.385
<v Speaker 2>an a system that does automation where it

00:32:46.385 --> 00:32:48.385
<v Speaker 2>needs, like, the query to return in,

00:32:48.705 --> 00:32:50.945
<v Speaker 2>you know, tens of milliseconds, hundreds of milliseconds?

00:32:51.360 --> 00:32:53.519
<v Speaker 2>Is it something where it's like

00:32:53.760 --> 00:32:55.520
<v Speaker 2>and that the, you know, the automated systems

00:32:55.520 --> 00:32:57.360
<v Speaker 2>generally are like, those queries run all the

00:32:57.360 --> 00:33:00.160
<v Speaker 2>time, right, many, many, many times. Right? Or

00:33:00.160 --> 00:33:00.960
<v Speaker 2>is it

00:33:01.679 --> 00:33:03.360
<v Speaker 2>an ad hoc query

00:33:03.440 --> 00:33:05.920
<v Speaker 2>from a user who's doing some investigation,

00:33:05.920 --> 00:33:07.784
<v Speaker 2>in which case they're more than willing to

00:33:07.784 --> 00:33:09.945
<v Speaker 2>wait tens of seconds for a return.

00:33:10.345 --> 00:33:12.585
<v Speaker 2>And those queries are few and far between.

00:33:12.585 --> 00:33:15.144
<v Speaker 2>Right? You're not doing that many of them.

00:33:15.145 --> 00:33:16.024
<v Speaker 2>And I think

00:33:17.385 --> 00:33:18.104
<v Speaker 2>the

00:33:18.265 --> 00:33:20.184
<v Speaker 2>I think the ad hoc thing is is

00:33:20.184 --> 00:33:22.345
<v Speaker 2>probably easier to solve with

00:33:22.669 --> 00:33:24.350
<v Speaker 2>that pattern of

00:33:24.910 --> 00:33:27.390
<v Speaker 2>let's take these blobs of data, put them

00:33:27.390 --> 00:33:28.749
<v Speaker 2>into object storage,

00:33:29.309 --> 00:33:31.149
<v Speaker 2>and spin up compute on the fly

00:33:32.030 --> 00:33:33.150
<v Speaker 2>to handle those.

00:33:34.429 --> 00:33:36.750
<v Speaker 2>It's the it's the it's the real time

00:33:36.750 --> 00:33:37.710
<v Speaker 2>systems

00:33:38.215 --> 00:33:40.135
<v Speaker 2>where you have to really think about

00:33:41.015 --> 00:33:43.495
<v Speaker 2>layering in structure and optimizations that you can

00:33:43.495 --> 00:33:45.095
<v Speaker 2>answer the queries fast enough.

00:33:46.295 --> 00:33:47.095
<v Speaker 1>Alright.

00:33:47.095 --> 00:33:47.735
<v Speaker 1>So

00:33:48.215 --> 00:33:51.175
<v Speaker 1>you mentioned at the start how

00:33:52.289 --> 00:33:54.289
<v Speaker 1>you had this InfluxQL

00:33:54.370 --> 00:33:56.929
<v Speaker 1>in version one. This SQL

00:33:57.330 --> 00:34:00.450
<v Speaker 1>SQL like language that frustrated people because it

00:34:00.450 --> 00:34:01.169
<v Speaker 1>wasn't

00:34:01.330 --> 00:34:03.169
<v Speaker 1>real SQL that they were familiar with working

00:34:03.169 --> 00:34:04.049
<v Speaker 1>with other databases.

00:34:05.644 --> 00:34:08.444
<v Speaker 1>With data fusion, do people get access to

00:34:08.444 --> 00:34:09.804
<v Speaker 1>more traditional

00:34:09.964 --> 00:34:10.925
<v Speaker 1>SQL?

00:34:10.925 --> 00:34:13.245
<v Speaker 1>That's part one of the question. Part two

00:34:13.405 --> 00:34:15.565
<v Speaker 1>is with InfluxDB two, there was a lot

00:34:15.565 --> 00:34:17.405
<v Speaker 1>of investment into the Flux language

00:34:17.980 --> 00:34:20.300
<v Speaker 1>with the messaging around how Flux was the

00:34:20.300 --> 00:34:22.860
<v Speaker 1>purpose built for time series and SQL wasn't.

00:34:23.020 --> 00:34:25.100
<v Speaker 1>I'm curious if that has changed, and do

00:34:25.100 --> 00:34:27.260
<v Speaker 1>we feel now that SQL is the right

00:34:27.260 --> 00:34:29.260
<v Speaker 1>language for time series, or is there still

00:34:29.260 --> 00:34:31.260
<v Speaker 1>a future for Flux within FluxDB three?

00:34:32.585 --> 00:34:36.264
<v Speaker 2>Yeah. So, first, I'll I'll mention about InfluxQL.

00:34:36.505 --> 00:34:38.665
<v Speaker 2>So some people found it frustrating because it

00:34:38.665 --> 00:34:41.304
<v Speaker 2>was unlike SQL, but a surprising number of

00:34:41.304 --> 00:34:43.944
<v Speaker 2>people have told us they actually prefer InfluxQL

00:34:43.944 --> 00:34:44.905
<v Speaker 2>to SQL

00:34:45.179 --> 00:34:47.819
<v Speaker 2>for writing some basic time series queries. Right?

00:34:47.819 --> 00:34:50.219
<v Speaker 2>Because it's just, like, super easy to write

00:34:50.219 --> 00:34:52.540
<v Speaker 2>a thing where you're, you know, getting a

00:34:52.540 --> 00:34:54.620
<v Speaker 2>summarization by these, you know, different,

00:34:55.339 --> 00:34:57.500
<v Speaker 2>things. Whereas, like, in a SQL engine, you

00:34:57.500 --> 00:34:59.420
<v Speaker 2>might have to deal with windowing functions and

00:34:59.420 --> 00:35:01.099
<v Speaker 2>partitioning and, like, all this other stuff.

00:35:02.984 --> 00:35:03.625
<v Speaker 2>So

00:35:04.105 --> 00:35:04.905
<v Speaker 2>I think

00:35:05.385 --> 00:35:06.265
<v Speaker 2>InfluxQL

00:35:06.265 --> 00:35:07.545
<v Speaker 2>has a place

00:35:07.944 --> 00:35:09.465
<v Speaker 2>that will continue

00:35:09.704 --> 00:35:12.744
<v Speaker 2>will continue to serve just because we've gotten

00:35:12.744 --> 00:35:14.585
<v Speaker 2>that feedback that a number of people actually

00:35:14.585 --> 00:35:17.720
<v Speaker 2>prefer it to SQL. So with Data Fusion,

00:35:17.720 --> 00:35:19.880
<v Speaker 2>we have a fully featured SQL engine that

00:35:19.880 --> 00:35:22.520
<v Speaker 2>supports all of these things, joins, window functions,

00:35:22.520 --> 00:35:25.320
<v Speaker 2>partitioning, like, this all this complex

00:35:25.320 --> 00:35:26.520
<v Speaker 2>SQL stuff.

00:35:26.760 --> 00:35:29.640
<v Speaker 2>We've been adding in more and more functions

00:35:30.285 --> 00:35:32.445
<v Speaker 2>to make time series stuff,

00:35:34.285 --> 00:35:36.444
<v Speaker 2>to make it more capable of doing, like,

00:35:36.444 --> 00:35:38.445
<v Speaker 2>time series specific style queries,

00:35:39.005 --> 00:35:41.005
<v Speaker 2>and we'll continue to do that. We're certainly

00:35:41.005 --> 00:35:42.125
<v Speaker 2>not done with that.

00:35:43.405 --> 00:35:43.484
<v Speaker 2>So

00:35:44.250 --> 00:35:45.370
<v Speaker 2>the thing with

00:35:45.690 --> 00:35:48.490
<v Speaker 2>three dot o is, again, it's built around

00:35:48.490 --> 00:35:49.610
<v Speaker 2>this Data Fusion

00:35:49.930 --> 00:35:52.090
<v Speaker 2>query engine, which is a SQL engine.

00:35:52.250 --> 00:35:52.810
<v Speaker 2>Now

00:35:53.530 --> 00:35:55.210
<v Speaker 2>all that's written in Rust.

00:35:55.530 --> 00:35:58.330
<v Speaker 2>Obviously, two dot o is written in Go,

00:35:58.330 --> 00:35:59.130
<v Speaker 2>and Flux

00:35:59.315 --> 00:36:00.435
<v Speaker 2>as a language

00:36:01.075 --> 00:36:03.555
<v Speaker 2>was we developed for two dot o. And

00:36:03.555 --> 00:36:04.675
<v Speaker 2>we developed it,

00:36:05.715 --> 00:36:07.795
<v Speaker 2>so there were a couple of things. One,

00:36:08.355 --> 00:36:11.635
<v Speaker 2>for the users of InfluxDB one, they frequently

00:36:11.635 --> 00:36:15.260
<v Speaker 2>had requests that they just wanted to express

00:36:15.740 --> 00:36:19.020
<v Speaker 2>more arbitrary and complex logic in their queries,

00:36:19.740 --> 00:36:21.900
<v Speaker 2>than could be expressed in InfluxQL

00:36:21.900 --> 00:36:24.700
<v Speaker 2>or indeed in in SQL. So we're just

00:36:24.700 --> 00:36:25.660
<v Speaker 2>like, we need

00:36:26.060 --> 00:36:28.415
<v Speaker 2>essentially, like, we need, like, a scripting language

00:36:28.415 --> 00:36:30.415
<v Speaker 2>paired with a query language

00:36:30.495 --> 00:36:32.495
<v Speaker 2>so that people could do more complex things.

00:36:32.495 --> 00:36:34.335
<v Speaker 2>And it became like, oh, you can use

00:36:34.335 --> 00:36:37.295
<v Speaker 2>this also to connect to third party systems,

00:36:37.935 --> 00:36:39.615
<v Speaker 2>to join with your time series data on

00:36:39.615 --> 00:36:41.775
<v Speaker 2>the fly, or to send data out to

00:36:41.775 --> 00:36:44.120
<v Speaker 2>third party systems, right, be it another

00:36:44.120 --> 00:36:46.920
<v Speaker 2>database or a third party API or whatever.

00:36:46.920 --> 00:36:48.200
<v Speaker 2>Right? So that was that

00:36:48.840 --> 00:36:50.520
<v Speaker 2>was part of it. Another part of it

00:36:50.520 --> 00:36:51.160
<v Speaker 2>was

00:36:51.640 --> 00:36:54.680
<v Speaker 2>I had a thesis back in whatever. Like,

00:36:55.080 --> 00:36:57.825
<v Speaker 2>I mean, I originally, in the fall of

00:36:57.825 --> 00:37:00.545
<v Speaker 2>twenty fourteen, I was talking about changing

00:37:00.545 --> 00:37:03.825
<v Speaker 2>language from InfluxQL to potentially something that looked

00:37:03.825 --> 00:37:05.505
<v Speaker 2>more like a functional language,

00:37:05.744 --> 00:37:07.425
<v Speaker 2>which is what Flux is.

00:37:07.665 --> 00:37:09.185
<v Speaker 2>And I decided at that time to stay

00:37:09.185 --> 00:37:10.385
<v Speaker 2>with InfluxQL.

00:37:10.385 --> 00:37:12.465
<v Speaker 2>But I I had a theory that, like,

00:37:12.465 --> 00:37:14.410
<v Speaker 2>oh, I think the for the time series

00:37:14.410 --> 00:37:16.890
<v Speaker 2>use case, a functional language would be better,

00:37:18.010 --> 00:37:20.890
<v Speaker 2>would be more, like, expressive and more powerful

00:37:21.050 --> 00:37:22.010
<v Speaker 2>for

00:37:22.810 --> 00:37:24.650
<v Speaker 2>working with time series data.

00:37:25.050 --> 00:37:25.690
<v Speaker 2>And Flux

00:37:26.225 --> 00:37:28.385
<v Speaker 2>was our attempt at that. Right? And,

00:37:29.025 --> 00:37:29.825
<v Speaker 2>I think

00:37:30.225 --> 00:37:32.865
<v Speaker 2>so we built, obviously, the Flux language, the

00:37:32.865 --> 00:37:35.505
<v Speaker 2>scripting language, the query engine, the planner, the

00:37:35.505 --> 00:37:38.065
<v Speaker 2>optimizer, everything from the ground up, which is

00:37:38.065 --> 00:37:39.985
<v Speaker 2>a very large

00:37:40.490 --> 00:37:42.809
<v Speaker 2>like, that's basically, like, two very large separate

00:37:42.809 --> 00:37:43.609
<v Speaker 2>projects.

00:37:44.970 --> 00:37:45.609
<v Speaker 2>So,

00:37:47.609 --> 00:37:49.609
<v Speaker 2>and all of that is written in Go.

00:37:49.609 --> 00:37:50.250
<v Speaker 2>Now

00:37:50.970 --> 00:37:52.329
<v Speaker 2>coming to three dot o,

00:37:54.285 --> 00:37:55.885
<v Speaker 2>we thought, okay. We need a way to

00:37:55.885 --> 00:37:57.724
<v Speaker 2>to bridge Flux, and we also wanna see

00:37:57.724 --> 00:37:59.405
<v Speaker 2>if we can bring over InfluxQL.

00:37:59.405 --> 00:38:01.885
<v Speaker 2>And within FluxQL, we had the idea, well,

00:38:02.365 --> 00:38:04.444
<v Speaker 2>it looks like SQL. So what we what

00:38:04.444 --> 00:38:06.925
<v Speaker 2>we can probably do is write a parser

00:38:06.925 --> 00:38:09.170
<v Speaker 2>in Rust to parse the language, which isn't

00:38:09.170 --> 00:38:10.210
<v Speaker 2>too hard to create,

00:38:10.930 --> 00:38:12.450
<v Speaker 2>that will then translate

00:38:12.450 --> 00:38:15.250
<v Speaker 2>an InfluxQL query into a data fusion query

00:38:15.250 --> 00:38:17.010
<v Speaker 2>plan. Right? So we had,

00:38:18.130 --> 00:38:20.930
<v Speaker 2>one person start on that in the summer

00:38:20.930 --> 00:38:21.650
<v Speaker 2>of last year.

00:38:22.325 --> 00:38:24.484
<v Speaker 2>And, basically, now, you know, this year, we

00:38:24.484 --> 00:38:26.884
<v Speaker 2>have that actually works, and it works really,

00:38:26.884 --> 00:38:29.285
<v Speaker 2>really well. Right? Because and it was basically

00:38:29.285 --> 00:38:30.565
<v Speaker 2>just one person who did a lot of

00:38:30.565 --> 00:38:33.125
<v Speaker 2>that effort. Last fall, we added on additional

00:38:33.125 --> 00:38:34.964
<v Speaker 2>people onto the team to build the last,

00:38:34.964 --> 00:38:37.890
<v Speaker 2>like, bit, which is, like, API bridge,

00:38:38.130 --> 00:38:40.050
<v Speaker 2>which is, you know, to represent all of

00:38:40.050 --> 00:38:43.250
<v Speaker 2>that with the InfluxDB one query API.

00:38:44.210 --> 00:38:45.730
<v Speaker 2>So we're really happy we were able to

00:38:45.730 --> 00:38:46.610
<v Speaker 2>bring that over,

00:38:47.010 --> 00:38:48.930
<v Speaker 2>and it gets all the benefits of that

00:38:48.930 --> 00:38:51.250
<v Speaker 2>data fusion query engine. Right? So when there

00:38:51.625 --> 00:38:53.145
<v Speaker 2>there are performance optimizations

00:38:53.145 --> 00:38:56.265
<v Speaker 2>or other things like that, they just come

00:38:56.345 --> 00:38:59.065
<v Speaker 2>they when we pull that in, InfluxQL

00:38:59.065 --> 00:39:00.585
<v Speaker 2>gets all of that for free.

00:39:01.865 --> 00:39:03.065
<v Speaker 2>Now with Flux,

00:39:03.145 --> 00:39:04.185
<v Speaker 2>what we tried to do

00:39:04.950 --> 00:39:07.430
<v Speaker 2>was, like, the it was, like, the surface

00:39:07.430 --> 00:39:09.830
<v Speaker 2>area of it is way, way too large

00:39:09.990 --> 00:39:12.070
<v Speaker 2>to try and, like, create it again in

00:39:12.070 --> 00:39:12.790
<v Speaker 2>Rust,

00:39:13.030 --> 00:39:14.790
<v Speaker 2>although I would love to do that.

00:39:17.225 --> 00:39:19.225
<v Speaker 2>It's just it's just, like, way way too

00:39:19.225 --> 00:39:20.425
<v Speaker 2>big of a project to do, and we

00:39:20.425 --> 00:39:22.105
<v Speaker 2>don't we don't have the the time or

00:39:22.105 --> 00:39:24.265
<v Speaker 2>resources to do it. So what we did

00:39:24.265 --> 00:39:25.145
<v Speaker 2>was,

00:39:26.185 --> 00:39:28.345
<v Speaker 2>in our cloud two platform,

00:39:28.665 --> 00:39:29.945
<v Speaker 2>we had, you know, Flux

00:39:30.910 --> 00:39:32.030
<v Speaker 2>processes

00:39:32.110 --> 00:39:33.390
<v Speaker 2>that communicated

00:39:33.390 --> 00:39:36.350
<v Speaker 2>with the old TSM storage engine via this

00:39:36.350 --> 00:39:37.870
<v Speaker 2>gRPC API.

00:39:38.830 --> 00:39:41.230
<v Speaker 2>So what we did was in in three

00:39:41.230 --> 00:39:43.230
<v Speaker 2>dot o, we created that gRPC

00:39:43.230 --> 00:39:43.870
<v Speaker 2>API,

00:39:45.055 --> 00:39:46.735
<v Speaker 2>and we connected Flux up to it. And

00:39:46.735 --> 00:39:48.335
<v Speaker 2>what we found through,

00:39:48.335 --> 00:39:50.975
<v Speaker 2>like, some production mirroring and actually letting customers

00:39:51.375 --> 00:39:55.215
<v Speaker 2>test it was, one, that gRPC API was,

00:39:55.215 --> 00:39:57.055
<v Speaker 2>like, kinda it had some edge cases that

00:39:57.055 --> 00:39:58.015
<v Speaker 2>were poorly specified.

00:39:58.599 --> 00:40:00.839
<v Speaker 2>So there were weird bugs that would pop

00:40:00.839 --> 00:40:02.760
<v Speaker 2>up that we just unforeseen

00:40:03.319 --> 00:40:05.720
<v Speaker 2>bugs, like, that would surface in the Flux

00:40:05.720 --> 00:40:07.720
<v Speaker 2>query, things that worked on the previous one

00:40:07.720 --> 00:40:08.920
<v Speaker 2>that don't work on this.

00:40:09.319 --> 00:40:10.119
<v Speaker 2>But more importantly,

00:40:11.345 --> 00:40:14.305
<v Speaker 2>the performance of that bridge

00:40:14.785 --> 00:40:17.345
<v Speaker 2>was not good. Right? It basically, there were

00:40:17.345 --> 00:40:18.785
<v Speaker 2>there were queries that will work in the

00:40:18.785 --> 00:40:21.505
<v Speaker 2>old Flux to TSM version that worked in

00:40:21.505 --> 00:40:22.785
<v Speaker 2>a decent amount of time

00:40:23.105 --> 00:40:24.704
<v Speaker 2>and queries

00:40:24.330 --> 00:40:26.890
<v Speaker 2>on the Flux to three dot o bridge

00:40:26.890 --> 00:40:29.290
<v Speaker 2>that just, like, timed out. And,

00:40:29.690 --> 00:40:31.770
<v Speaker 2>again, like, one of the things we're trying

00:40:31.770 --> 00:40:33.130
<v Speaker 2>to do with three dot o, 1 of

00:40:33.130 --> 00:40:34.970
<v Speaker 2>the reasons we adopted this new query engine

00:40:34.970 --> 00:40:37.050
<v Speaker 2>is because we wanted queries to be super,

00:40:37.050 --> 00:40:39.615
<v Speaker 2>super fast. Right? Query performance was a super

00:40:39.615 --> 00:40:40.495
<v Speaker 2>important thing,

00:40:40.735 --> 00:40:43.135
<v Speaker 2>and a lot of Flux queries, like, we

00:40:43.135 --> 00:40:44.735
<v Speaker 2>saw there were queries that just wouldn't work

00:40:44.735 --> 00:40:45.695
<v Speaker 2>in that engine.

00:40:46.575 --> 00:40:48.575
<v Speaker 2>So when we created this bridge,

00:40:49.695 --> 00:40:52.140
<v Speaker 2>because of the way that API works, it's

00:40:52.140 --> 00:40:53.820
<v Speaker 2>literally it's built around

00:40:54.140 --> 00:40:57.099
<v Speaker 2>how data is organized in that TSM storage

00:40:57.099 --> 00:40:57.740
<v Speaker 2>engine.

00:40:58.059 --> 00:40:59.740
<v Speaker 2>And the three dot o engine does not

00:40:59.740 --> 00:41:01.740
<v Speaker 2>have the same organization.

00:41:02.220 --> 00:41:04.700
<v Speaker 2>So in order to present

00:41:04.700 --> 00:41:06.140
<v Speaker 2>the data in that organization,

00:41:07.045 --> 00:41:08.645
<v Speaker 2>the three dot o engine has to do

00:41:08.645 --> 00:41:11.525
<v Speaker 2>a lot of, like, post hoc sorting

00:41:11.765 --> 00:41:12.805
<v Speaker 2>and filtering.

00:41:12.885 --> 00:41:15.285
<v Speaker 2>And that that sorting is basically you

00:41:15.525 --> 00:41:17.925
<v Speaker 2>chew up CPU time doing that. And,

00:41:18.325 --> 00:41:20.085
<v Speaker 2>basically, the it wasn't performance. So,

00:41:20.750 --> 00:41:22.670
<v Speaker 2>like, right now, we have a a theory

00:41:22.670 --> 00:41:23.230
<v Speaker 2>that

00:41:24.030 --> 00:41:25.470
<v Speaker 2>there would be a way to update the

00:41:25.470 --> 00:41:27.710
<v Speaker 2>Flux engine so that it uses the three

00:41:27.710 --> 00:41:31.230
<v Speaker 2>dot o native API, which is basically FlightSQL,

00:41:31.470 --> 00:41:33.790
<v Speaker 2>and that that the Flux engine could do

00:41:33.950 --> 00:41:35.069
<v Speaker 2>the work itself

00:41:36.315 --> 00:41:38.234
<v Speaker 2>to reorder the data in the way it

00:41:38.234 --> 00:41:40.395
<v Speaker 2>expects it to be ordered. And maybe that

00:41:40.395 --> 00:41:41.835
<v Speaker 2>would be performing enough.

00:41:42.234 --> 00:41:45.195
<v Speaker 2>But for the time being, we're not focused

00:41:45.195 --> 00:41:47.355
<v Speaker 2>on that. We're still focused on

00:41:47.595 --> 00:41:50.315
<v Speaker 2>the core query engine, which means InfluxQL

00:41:50.315 --> 00:41:51.035
<v Speaker 2>and SQL,

00:41:51.590 --> 00:41:52.630
<v Speaker 2>and adding

00:41:52.950 --> 00:41:56.150
<v Speaker 2>capabilities and performance to it that that like,

00:41:56.150 --> 00:41:58.470
<v Speaker 2>right now, it's already faster than one dot

00:41:58.470 --> 00:42:00.150
<v Speaker 2>o at a number of queries, but there's

00:42:00.150 --> 00:42:02.870
<v Speaker 2>still some queries that's definitely not faster with.

00:42:03.030 --> 00:42:05.270
<v Speaker 2>And we want to improve those situations

00:42:05.915 --> 00:42:08.075
<v Speaker 2>and spend our our time on that for

00:42:08.075 --> 00:42:08.635
<v Speaker 2>now

00:42:09.435 --> 00:42:12.234
<v Speaker 2>and then see, you know, see later, what

00:42:12.234 --> 00:42:14.155
<v Speaker 2>we can do with Flux. We are

00:42:14.714 --> 00:42:16.795
<v Speaker 2>people in the community have expressed interest in

00:42:16.795 --> 00:42:18.714
<v Speaker 2>actually self organizing

00:42:19.430 --> 00:42:22.550
<v Speaker 2>to do that work. So we've actually created

00:42:22.550 --> 00:42:25.990
<v Speaker 2>a separate community fork of Flux,

00:42:26.550 --> 00:42:28.390
<v Speaker 2>that we're gonna be pointing people to.

00:42:29.590 --> 00:42:30.070
<v Speaker 2>And

00:42:30.790 --> 00:42:32.230
<v Speaker 2>that fork will be a place where people

00:42:32.230 --> 00:42:33.910
<v Speaker 2>can collaborate on this idea

00:42:34.185 --> 00:42:34.745
<v Speaker 2>without

00:42:34.985 --> 00:42:36.185
<v Speaker 2>the thing is we can't do it in

00:42:36.185 --> 00:42:38.105
<v Speaker 2>our primary branch because we run this in

00:42:38.105 --> 00:42:39.865
<v Speaker 2>production, in our cloud environment.

00:42:40.025 --> 00:42:41.865
<v Speaker 2>It's just too difficult to try and, like,

00:42:41.865 --> 00:42:44.185
<v Speaker 2>pull these changes in as people like, we

00:42:44.185 --> 00:42:45.865
<v Speaker 2>need to give people the ability to, like,

00:42:45.865 --> 00:42:48.030
<v Speaker 2>iterate on their own without having to go

00:42:48.030 --> 00:42:49.550
<v Speaker 2>through our production pipeline.

00:42:50.430 --> 00:42:52.590
<v Speaker 2>So that's the idea is in three dot

00:42:52.590 --> 00:42:53.150
<v Speaker 2>o,

00:42:53.390 --> 00:42:55.950
<v Speaker 2>InfluxQL and SQL are native and supported.

00:42:57.150 --> 00:42:59.150
<v Speaker 2>Flux, we're still trying to figure out.

00:43:00.384 --> 00:43:02.545
<v Speaker 2>What we I mean, I will say a

00:43:02.545 --> 00:43:04.944
<v Speaker 2>separate thing about Flux, which is maybe not

00:43:04.944 --> 00:43:05.984
<v Speaker 2>obvious to people.

00:43:06.545 --> 00:43:08.945
<v Speaker 2>Or, for some people, maybe it is. But,

00:43:11.105 --> 00:43:12.865
<v Speaker 2>the language is highly polarizing.

00:43:13.290 --> 00:43:14.570
<v Speaker 2>It's a new language, and a lot of

00:43:14.570 --> 00:43:15.690
<v Speaker 2>people are like, I don't wanna learn your

00:43:15.690 --> 00:43:16.730
<v Speaker 2>stupid language.

00:43:18.410 --> 00:43:20.250
<v Speaker 2>And I get that.

00:43:21.370 --> 00:43:22.410
<v Speaker 2>I did not

00:43:22.730 --> 00:43:23.930
<v Speaker 2>really get that

00:43:24.250 --> 00:43:26.250
<v Speaker 2>six years ago, but I get it now.

00:43:28.535 --> 00:43:29.095
<v Speaker 2>And

00:43:29.655 --> 00:43:31.895
<v Speaker 2>so there's basically, what we found is that

00:43:31.895 --> 00:43:33.335
<v Speaker 2>a lot of people just didn't wanna pick

00:43:33.335 --> 00:43:34.935
<v Speaker 2>up the language. They wanted to work with

00:43:34.935 --> 00:43:38.055
<v Speaker 2>something they already know. And, again, with InfluxQL,

00:43:38.295 --> 00:43:40.055
<v Speaker 2>it's a different language, but the thing is

00:43:40.055 --> 00:43:42.615
<v Speaker 2>it looks like SQL. It feels

00:43:42.880 --> 00:43:44.960
<v Speaker 2>it feels like an old friend. Like, you

00:43:44.960 --> 00:43:45.920
<v Speaker 2>you know it.

00:43:46.720 --> 00:43:48.320
<v Speaker 2>So you can pick it up without having

00:43:48.320 --> 00:43:50.080
<v Speaker 2>to do too many things.

00:43:50.400 --> 00:43:52.960
<v Speaker 2>But with Flux, it was a serious,

00:43:53.920 --> 00:43:55.840
<v Speaker 2>adoption blocker for a lot of people.

00:43:56.320 --> 00:43:57.760
<v Speaker 2>But then on the other side of this,

00:43:58.565 --> 00:44:00.325
<v Speaker 2>there is a slice of people who took

00:44:00.325 --> 00:44:01.685
<v Speaker 2>the time to learn Flux,

00:44:01.765 --> 00:44:03.684
<v Speaker 2>and they absolutely love it because they can

00:44:03.684 --> 00:44:05.365
<v Speaker 2>do things in that language

00:44:05.525 --> 00:44:07.924
<v Speaker 2>that they could not do in SQL or

00:44:07.924 --> 00:44:09.365
<v Speaker 2>in InfluxQL.

00:44:09.845 --> 00:44:11.750
<v Speaker 2>And I think that is kind of a

00:44:11.750 --> 00:44:13.510
<v Speaker 2>testament to the, like, the reason why we

00:44:13.510 --> 00:44:16.390
<v Speaker 2>built the language because we wanted something that

00:44:16.390 --> 00:44:17.990
<v Speaker 2>enabled arbitrary

00:44:17.990 --> 00:44:19.190
<v Speaker 2>processing

00:44:19.190 --> 00:44:20.950
<v Speaker 2>inside the core of the database.

00:44:22.230 --> 00:44:22.470
<v Speaker 2>So,

00:44:23.505 --> 00:44:25.105
<v Speaker 2>again, it's like one of those things where

00:44:25.105 --> 00:44:26.625
<v Speaker 2>depending on who you are and how you

00:44:26.625 --> 00:44:28.704
<v Speaker 2>look at it, Flux is either, like, a

00:44:28.704 --> 00:44:31.025
<v Speaker 2>great thing, and it's like, we need to

00:44:31.025 --> 00:44:33.585
<v Speaker 2>keep pushing this forward, or it's

00:44:33.744 --> 00:44:35.664
<v Speaker 2>why these guys build this language just doesn't

00:44:35.664 --> 00:44:36.625
<v Speaker 2>make any sense.

00:44:37.424 --> 00:44:38.464
<v Speaker 2>It's it's tricky.

00:44:39.760 --> 00:44:42.240
<v Speaker 1>Alright. Awesome. Thank you. Did you have a

00:44:42.240 --> 00:44:43.040
<v Speaker 1>question, Laura?

00:44:43.600 --> 00:44:45.040
<v Speaker 1>No. No.

00:44:45.200 --> 00:44:46.720
<v Speaker 0>Just random commentary.

00:44:47.280 --> 00:44:49.760
<v Speaker 1>Yeah. We're running out of time very fast

00:44:49.760 --> 00:44:51.760
<v Speaker 1>here, so let's finish up with something a

00:44:51.760 --> 00:44:54.725
<v Speaker 1>bit a bit different. Recently,

00:44:54.885 --> 00:44:57.765
<v Speaker 1>HashiCorp announced their license change to the best

00:44:57.845 --> 00:44:59.605
<v Speaker 1>the Bustle license.

00:44:59.925 --> 00:45:02.085
<v Speaker 1>And you posted some thoughts on Twitter saying

00:45:02.085 --> 00:45:03.445
<v Speaker 1>that it kinda gave you a better pause

00:45:03.445 --> 00:45:05.445
<v Speaker 1>for thought on what source available in open

00:45:05.445 --> 00:45:05.925
<v Speaker 1>source

00:45:06.260 --> 00:45:07.780
<v Speaker 1>is or the future.

00:45:08.099 --> 00:45:09.859
<v Speaker 1>And I'd love for you just to talk

00:45:09.859 --> 00:45:11.859
<v Speaker 1>about that and maybe even bring it into

00:45:11.859 --> 00:45:14.819
<v Speaker 1>the context of what's the future for the

00:45:14.819 --> 00:45:16.420
<v Speaker 1>license on InfluxDB

00:45:16.420 --> 00:45:17.140
<v Speaker 1>three.

00:45:17.940 --> 00:45:18.660
<v Speaker 2>Yeah. So

00:45:20.714 --> 00:45:24.075
<v Speaker 2>so I basically, in my mind, open source,

00:45:24.395 --> 00:45:25.355
<v Speaker 2>the

00:45:25.355 --> 00:45:28.395
<v Speaker 2>the the bustle, the community licenses, all those

00:45:28.395 --> 00:45:30.474
<v Speaker 2>things, those are not open source. Those are

00:45:30.474 --> 00:45:30.795
<v Speaker 2>basically

00:45:31.290 --> 00:45:32.970
<v Speaker 2>the new version of

00:45:33.290 --> 00:45:36.490
<v Speaker 2>shareware or commercial freemium software. Right? It's commercial

00:45:36.490 --> 00:45:37.210
<v Speaker 2>software.

00:45:37.450 --> 00:45:39.610
<v Speaker 2>And if you and frequently,

00:45:39.610 --> 00:45:40.730
<v Speaker 2>they will offer

00:45:40.810 --> 00:45:43.610
<v Speaker 2>that software to you to use for free

00:45:43.610 --> 00:45:44.890
<v Speaker 2>under certain conditions.

00:45:45.705 --> 00:45:46.985
<v Speaker 2>And if you are one of the people

00:45:46.985 --> 00:45:49.545
<v Speaker 2>who meet those conditions, maybe you're happy and

00:45:49.545 --> 00:45:51.465
<v Speaker 2>you'll be able to use it. Right? Tons

00:45:51.465 --> 00:45:53.465
<v Speaker 2>of people continue to use MongoDB,

00:45:53.465 --> 00:45:56.745
<v Speaker 2>the SSPL version. Tons of people use Elastic

00:45:56.905 --> 00:45:59.465
<v Speaker 2>still after they change their license, Redis,

00:46:00.140 --> 00:46:03.420
<v Speaker 2>Confluence. Like, they're you know, literally every single

00:46:03.420 --> 00:46:04.940
<v Speaker 2>infrastructure open source

00:46:05.180 --> 00:46:07.500
<v Speaker 2>creator has changed their license over the last

00:46:07.980 --> 00:46:10.380
<v Speaker 2>six years. Like, the I there isn't one

00:46:10.380 --> 00:46:11.740
<v Speaker 2>I can think of who hasn't,

00:46:12.060 --> 00:46:13.100
<v Speaker 2>except for us, maybe.

00:46:14.620 --> 00:46:14.940
<v Speaker 2>So,

00:46:16.915 --> 00:46:19.155
<v Speaker 2>and I I totally get the motivations to

00:46:19.155 --> 00:46:21.155
<v Speaker 2>do that. But in my mind, like, open

00:46:21.155 --> 00:46:25.155
<v Speaker 2>source, I actually don't like copy left licenses.

00:46:25.155 --> 00:46:27.714
<v Speaker 2>I like AGPL, GPL. I don't consider them

00:46:27.714 --> 00:46:29.315
<v Speaker 2>to be real open source. To me, open

00:46:29.315 --> 00:46:31.380
<v Speaker 2>source is really about freedom, freedom to do

00:46:31.380 --> 00:46:33.540
<v Speaker 2>what I want with that code.

00:46:33.700 --> 00:46:35.299
<v Speaker 2>And if you put any sort of restriction

00:46:35.299 --> 00:46:37.220
<v Speaker 2>on it, which a copyleft license

00:46:37.220 --> 00:46:40.340
<v Speaker 2>does have restrictions on it, then that's,

00:46:40.500 --> 00:46:42.260
<v Speaker 2>you know, restricting my freedom.

00:46:42.819 --> 00:46:45.460
<v Speaker 2>To me, open source is about freedom. So

00:46:46.434 --> 00:46:48.835
<v Speaker 2>and, again, like, I think for a company

00:46:48.835 --> 00:46:50.915
<v Speaker 2>that's producing open source code,

00:46:51.954 --> 00:46:54.115
<v Speaker 2>you have to be okay with the fact

00:46:54.115 --> 00:46:55.954
<v Speaker 2>that people are going to do anything with

00:46:55.954 --> 00:46:58.755
<v Speaker 2>that code, including up to and including competing

00:46:58.755 --> 00:46:59.395
<v Speaker 2>with you.

00:47:00.560 --> 00:47:02.480
<v Speaker 2>And if you are not okay with that,

00:47:02.480 --> 00:47:04.240
<v Speaker 2>you should not be putting that code out

00:47:04.240 --> 00:47:07.280
<v Speaker 2>as open source because that is what's going

00:47:07.280 --> 00:47:07.840
<v Speaker 2>on.

00:47:08.160 --> 00:47:09.440
<v Speaker 2>Right? And, generally,

00:47:10.480 --> 00:47:11.920
<v Speaker 2>the best thing for a company to do

00:47:11.920 --> 00:47:14.480
<v Speaker 2>that's building products and stuff like that is

00:47:14.855 --> 00:47:17.095
<v Speaker 2>to only put open source code in something

00:47:17.095 --> 00:47:18.455
<v Speaker 2>that they wish to have,

00:47:19.255 --> 00:47:20.855
<v Speaker 2>become a commodity.

00:47:21.174 --> 00:47:24.615
<v Speaker 2>Right? So the operating system the server operating

00:47:24.615 --> 00:47:27.015
<v Speaker 2>system that your, you know, your your servers

00:47:27.015 --> 00:47:28.295
<v Speaker 2>run on, you want that to be a

00:47:28.295 --> 00:47:30.510
<v Speaker 2>commodity. Many times, want the database to be

00:47:30.510 --> 00:47:32.990
<v Speaker 2>a commodity. You want these these core infrastructure

00:47:32.990 --> 00:47:33.710
<v Speaker 2>components

00:47:33.870 --> 00:47:36.190
<v Speaker 2>that are essentially not part of the value

00:47:36.190 --> 00:47:38.110
<v Speaker 2>that you deliver to your customers.

00:47:38.670 --> 00:47:40.990
<v Speaker 2>Essentially, you want them to be commodity so

00:47:40.990 --> 00:47:42.830
<v Speaker 2>you don't have to pay a lot extra

00:47:42.830 --> 00:47:44.965
<v Speaker 2>for those things. Right? You want the price

00:47:44.965 --> 00:47:46.645
<v Speaker 2>of those things to be driven down as

00:47:46.645 --> 00:47:47.765
<v Speaker 2>low as possible.

00:47:48.165 --> 00:47:49.605
<v Speaker 2>But if you are a vendor,

00:47:50.405 --> 00:47:52.244
<v Speaker 2>the thing you sell, you don't want that

00:47:52.244 --> 00:47:53.765
<v Speaker 2>to be a commodity. You want to be

00:47:53.765 --> 00:47:55.205
<v Speaker 2>able to sell it for the highest possible

00:47:55.205 --> 00:47:55.765
<v Speaker 2>price.

00:47:56.325 --> 00:47:57.045
<v Speaker 2>And

00:47:57.690 --> 00:48:00.170
<v Speaker 2>the so the the problem that

00:48:00.970 --> 00:48:04.570
<v Speaker 2>vendors have that create a project where their

00:48:04.570 --> 00:48:08.890
<v Speaker 2>primary monetization path is essentially that project plus

00:48:09.130 --> 00:48:10.010
<v Speaker 2>something

00:48:10.365 --> 00:48:13.244
<v Speaker 2>or whatever. It becomes like, well, we're putting

00:48:13.244 --> 00:48:14.925
<v Speaker 2>all this effort into the open source thing,

00:48:14.925 --> 00:48:16.045
<v Speaker 2>and a bunch of people are using it

00:48:16.045 --> 00:48:17.405
<v Speaker 2>for free. And there are a bunch of

00:48:17.405 --> 00:48:18.845
<v Speaker 2>freeloaders, and there are a bunch of, like,

00:48:18.845 --> 00:48:20.605
<v Speaker 2>competitors who are taking our stuff.

00:48:21.485 --> 00:48:23.965
<v Speaker 2>And then they decide to change the license.

00:48:23.965 --> 00:48:25.725
<v Speaker 2>And the the problem I have

00:48:26.380 --> 00:48:29.260
<v Speaker 2>with so there there are multiple pieces to

00:48:29.260 --> 00:48:30.540
<v Speaker 2>this. One is,

00:48:30.940 --> 00:48:32.460
<v Speaker 2>as the creator of a project,

00:48:32.780 --> 00:48:34.380
<v Speaker 2>if I want it to get the broadest

00:48:34.380 --> 00:48:35.580
<v Speaker 2>possible adoption,

00:48:35.900 --> 00:48:37.660
<v Speaker 2>I want more people to use it.

00:48:38.140 --> 00:48:40.940
<v Speaker 2>I'm incentivized to have that project be permissively

00:48:40.940 --> 00:48:44.435
<v Speaker 2>licensed. Right? Get all thing all other all

00:48:44.435 --> 00:48:45.555
<v Speaker 2>else being equal,

00:48:45.715 --> 00:48:47.955
<v Speaker 2>a developer or user looking at a piece

00:48:47.955 --> 00:48:48.835
<v Speaker 2>of software.

00:48:49.315 --> 00:48:51.475
<v Speaker 2>Literally, if everything else is the same and

00:48:51.475 --> 00:48:54.195
<v Speaker 2>the difference is a commercial license or a

00:48:54.195 --> 00:48:54.995
<v Speaker 2>permissive

00:48:54.995 --> 00:48:57.720
<v Speaker 2>Apache or MIT license, they're going to pick

00:48:57.720 --> 00:49:00.440
<v Speaker 2>the permissive one. Right? There's no reason not

00:49:00.440 --> 00:49:02.520
<v Speaker 2>to because you get a bunch of other

00:49:02.520 --> 00:49:03.000
<v Speaker 2>stuff.

00:49:04.200 --> 00:49:06.120
<v Speaker 2>So they choose that.

00:49:06.920 --> 00:49:08.360
<v Speaker 2>But the problem now

00:49:08.680 --> 00:49:11.305
<v Speaker 2>that I think the HashiCorp thing kind of

00:49:11.305 --> 00:49:12.105
<v Speaker 2>highlights

00:49:12.185 --> 00:49:14.985
<v Speaker 2>is it's just yet another vendor

00:49:15.385 --> 00:49:17.785
<v Speaker 2>in a long list of vendors over the

00:49:17.785 --> 00:49:19.945
<v Speaker 2>last six years who've changed their licenses.

00:49:20.105 --> 00:49:22.585
<v Speaker 2>And now, basically, it's causing a a lot

00:49:22.585 --> 00:49:23.465
<v Speaker 2>of distrust

00:49:23.940 --> 00:49:26.660
<v Speaker 2>in the developer community because they see, like,

00:49:26.660 --> 00:49:28.579
<v Speaker 2>oh, here's a new open source project, and

00:49:28.579 --> 00:49:30.980
<v Speaker 2>they look like, is that project by a

00:49:30.980 --> 00:49:33.700
<v Speaker 2>VC backed company, right, or VC backed startup?

00:49:33.780 --> 00:49:35.540
<v Speaker 2>If it is, they're gonna be like, well,

00:49:35.540 --> 00:49:37.540
<v Speaker 2>it's an open source project. Yeah. But I

00:49:37.540 --> 00:49:38.980
<v Speaker 2>don't believe that it's gonna continue to be

00:49:38.980 --> 00:49:41.935
<v Speaker 2>open source, which is a totally valid thing

00:49:41.935 --> 00:49:42.655
<v Speaker 2>to think

00:49:42.895 --> 00:49:43.695
<v Speaker 2>given

00:49:44.175 --> 00:49:45.855
<v Speaker 2>how things have been going over the last

00:49:45.855 --> 00:49:46.655
<v Speaker 2>six years.

00:49:46.975 --> 00:49:47.535
<v Speaker 2>So,

00:49:48.415 --> 00:49:50.895
<v Speaker 2>you know, previously, again, my thesis, if you

00:49:50.895 --> 00:49:53.455
<v Speaker 2>want broadest pop possible adoption,

00:49:53.695 --> 00:49:55.215
<v Speaker 2>put it in a permissive license.

00:49:56.390 --> 00:49:57.110
<v Speaker 2>That

00:49:57.350 --> 00:49:59.510
<v Speaker 2>idea is kind of getting damaged by the

00:49:59.510 --> 00:50:01.510
<v Speaker 2>fact that people keep changing their license from

00:50:01.510 --> 00:50:03.110
<v Speaker 2>permissive to something commercial.

00:50:03.270 --> 00:50:03.910
<v Speaker 2>Right?

00:50:04.150 --> 00:50:05.270
<v Speaker 2>And I

00:50:06.230 --> 00:50:08.150
<v Speaker 2>don't know if there's a solution to that.

00:50:08.150 --> 00:50:09.030
<v Speaker 2>I do think

00:50:09.924 --> 00:50:11.765
<v Speaker 2>separately, I think that that

00:50:12.405 --> 00:50:13.365
<v Speaker 2>HashiCorp

00:50:13.845 --> 00:50:16.565
<v Speaker 2>probably made an error here. Like, the thing

00:50:16.565 --> 00:50:17.125
<v Speaker 2>is

00:50:17.684 --> 00:50:21.684
<v Speaker 2>the license change only protects forward commits. Right?

00:50:21.684 --> 00:50:24.430
<v Speaker 2>You can't retroactively change a license. They so

00:50:24.430 --> 00:50:26.110
<v Speaker 2>they could have just as easily

00:50:26.910 --> 00:50:30.430
<v Speaker 2>put all their development effort into a closed

00:50:30.430 --> 00:50:32.270
<v Speaker 2>source private fork

00:50:32.430 --> 00:50:33.710
<v Speaker 2>and then made

00:50:33.950 --> 00:50:35.550
<v Speaker 2>the open source piece

00:50:35.870 --> 00:50:36.990
<v Speaker 2>a downstream,

00:50:39.144 --> 00:50:42.025
<v Speaker 2>you know, dependency of that closed source fork,

00:50:42.025 --> 00:50:43.865
<v Speaker 2>and then not tell anybody about it. Right?

00:50:43.865 --> 00:50:46.025
<v Speaker 2>Just be like, yeah. We're just gonna do

00:50:46.025 --> 00:50:48.184
<v Speaker 2>this or whatever. Or conversely, they could have

00:50:48.184 --> 00:50:49.865
<v Speaker 2>just said, we're gonna donate this thing into

00:50:49.865 --> 00:50:52.105
<v Speaker 2>a foundation, but all of our developers are

00:50:52.105 --> 00:50:53.865
<v Speaker 2>gonna be working on this closed source thing.

00:50:54.230 --> 00:50:54.869
<v Speaker 2>Right?

00:50:55.270 --> 00:50:56.390
<v Speaker 2>The effects

00:50:57.190 --> 00:50:59.589
<v Speaker 2>would have been the same in terms of

00:50:59.589 --> 00:51:01.829
<v Speaker 2>the end outcome, right, because you have this

00:51:01.829 --> 00:51:03.190
<v Speaker 2>open Terraform fork.

00:51:03.750 --> 00:51:05.589
<v Speaker 2>But the difference in

00:51:06.974 --> 00:51:10.255
<v Speaker 2>everybody's perception of HashiCorp as a company would

00:51:10.255 --> 00:51:11.695
<v Speaker 2>have been dramatically different.

00:51:11.855 --> 00:51:14.015
<v Speaker 2>Right? The the the business and commercial effect

00:51:14.015 --> 00:51:15.535
<v Speaker 2>would have been exactly the same, which is

00:51:15.535 --> 00:51:18.174
<v Speaker 2>all their r and d, all their development

00:51:18.174 --> 00:51:20.815
<v Speaker 2>tokens are going only into the commercial software,

00:51:20.894 --> 00:51:23.050
<v Speaker 2>which is fine. That is their right. If

00:51:23.050 --> 00:51:24.569
<v Speaker 2>they want to do that, they should totally

00:51:24.569 --> 00:51:26.490
<v Speaker 2>do that. And it's also fine if they

00:51:26.490 --> 00:51:27.690
<v Speaker 2>wanna change their license.

00:51:28.490 --> 00:51:30.410
<v Speaker 2>That is totally permissible.

00:51:30.410 --> 00:51:33.369
<v Speaker 2>Right? There's no just because you create something

00:51:33.369 --> 00:51:34.970
<v Speaker 2>open source one time

00:51:35.290 --> 00:51:37.450
<v Speaker 2>doesn't mean you owe it to the world

00:51:37.905 --> 00:51:39.505
<v Speaker 2>to continue for the rest of your life

00:51:39.505 --> 00:51:42.385
<v Speaker 2>to put more and more into it. Right?

00:51:43.905 --> 00:51:45.905
<v Speaker 2>But I think there were more graceful ways

00:51:45.905 --> 00:51:47.825
<v Speaker 2>to handle it that could have delivered

00:51:48.545 --> 00:51:50.545
<v Speaker 2>the same business outcome for them at the

00:51:50.545 --> 00:51:51.025
<v Speaker 2>very least.

00:51:51.910 --> 00:51:55.030
<v Speaker 1>Alright. Let's extend that question by one sentence

00:51:55.110 --> 00:51:57.910
<v Speaker 1>and just say, like, does the fear

00:51:58.150 --> 00:52:00.230
<v Speaker 1>that people have now and rightly so about

00:52:00.230 --> 00:52:02.790
<v Speaker 1>single vendor VC backed open source projects not

00:52:02.790 --> 00:52:04.150
<v Speaker 1>always being open source,

00:52:05.385 --> 00:52:08.105
<v Speaker 1>Does that mean that InfluxDB three could be

00:52:08.105 --> 00:52:11.465
<v Speaker 1>an Apache foundation project in the future, or

00:52:11.545 --> 00:52:13.625
<v Speaker 1>are you not worried about the perception or

00:52:13.625 --> 00:52:15.625
<v Speaker 1>the fear of people adopting it because it's

00:52:15.625 --> 00:52:17.465
<v Speaker 1>a VC backed single vendor project?

00:52:18.570 --> 00:52:19.210
<v Speaker 2>So

00:52:19.690 --> 00:52:21.930
<v Speaker 2>I do not think we will put InfluxDB

00:52:21.930 --> 00:52:23.530
<v Speaker 2>three into a foundation.

00:52:24.330 --> 00:52:26.170
<v Speaker 2>My goal is to have a permissible license

00:52:26.170 --> 00:52:27.050
<v Speaker 2>project.

00:52:29.050 --> 00:52:31.050
<v Speaker 2>But the truth is, like, I don't the

00:52:31.050 --> 00:52:33.675
<v Speaker 2>problem with foundation projects is the the bar

00:52:33.675 --> 00:52:36.635
<v Speaker 2>is usually too high. Like, InfluxDB doesn't meet

00:52:36.635 --> 00:52:38.235
<v Speaker 2>the bar for most foundations.

00:52:38.395 --> 00:52:40.235
<v Speaker 2>Right? There aren't multiple companies

00:52:40.635 --> 00:52:42.395
<v Speaker 2>contributing to InfluxDB's,

00:52:42.395 --> 00:52:45.035
<v Speaker 2>you know, version one, two, or three. Right?

00:52:45.035 --> 00:52:47.670
<v Speaker 2>We're the ones developing it alone.

00:52:48.070 --> 00:52:49.750
<v Speaker 2>So it doesn't really hit

00:52:49.750 --> 00:52:51.430
<v Speaker 2>the level of a foundation.

00:52:52.230 --> 00:52:54.310
<v Speaker 2>Terraform, you certainly could have put it into

00:52:54.310 --> 00:52:56.390
<v Speaker 2>a foundation. I'm certain a number of foundations

00:52:56.390 --> 00:52:58.630
<v Speaker 2>would have taken it gladly

00:52:58.630 --> 00:53:00.390
<v Speaker 2>as a as a project, as a top

00:53:00.390 --> 00:53:02.710
<v Speaker 2>level project. But InfluxDB doesn't

00:53:03.165 --> 00:53:05.245
<v Speaker 2>hit that. It's not it's not on the

00:53:05.245 --> 00:53:07.005
<v Speaker 2>same level in terms of

00:53:07.405 --> 00:53:09.965
<v Speaker 2>the contribution and, like, all this other stuff.

00:53:11.085 --> 00:53:11.965
<v Speaker 2>There's that.

00:53:13.645 --> 00:53:14.605
<v Speaker 2>I mean, I think

00:53:14.980 --> 00:53:17.700
<v Speaker 2>I I I don't know. Like, for broadly

00:53:17.700 --> 00:53:18.580
<v Speaker 2>for the

00:53:18.820 --> 00:53:21.460
<v Speaker 2>for the community and building trust with people

00:53:21.460 --> 00:53:22.500
<v Speaker 2>and stuff like that,

00:53:23.060 --> 00:53:24.740
<v Speaker 2>I don't know if there's a solution. Right?

00:53:24.740 --> 00:53:27.700
<v Speaker 2>I think the license itself matters because if

00:53:27.700 --> 00:53:29.540
<v Speaker 2>it's Apache two or MIT,

00:53:30.180 --> 00:53:32.155
<v Speaker 2>then, you know, people can

00:53:32.635 --> 00:53:34.954
<v Speaker 2>do whatever they want with that software

00:53:34.954 --> 00:53:36.954
<v Speaker 2>for all time as long for for that

00:53:36.954 --> 00:53:37.595
<v Speaker 2>point.

00:53:38.234 --> 00:53:40.315
<v Speaker 2>But maybe there's a model where you can

00:53:40.315 --> 00:53:41.195
<v Speaker 2>commit to,

00:53:41.595 --> 00:53:42.315
<v Speaker 2>you know,

00:53:42.635 --> 00:53:46.075
<v Speaker 2>transitioning into open governance over some period of

00:53:46.075 --> 00:53:48.050
<v Speaker 2>time. I think early on

00:53:48.370 --> 00:53:51.170
<v Speaker 2>in a project, open governance is actually more

00:53:51.170 --> 00:53:52.450
<v Speaker 2>of a hindrance than,

00:53:53.330 --> 00:53:55.650
<v Speaker 2>you know, a benefit because you you want,

00:53:55.650 --> 00:53:56.770
<v Speaker 2>like, a small

00:53:57.010 --> 00:53:58.690
<v Speaker 2>tight knit group of people that are driving

00:53:58.690 --> 00:53:59.490
<v Speaker 2>the project forward.

00:54:01.655 --> 00:54:04.535
<v Speaker 2>But yeah. I don't know. It's tricky.

00:54:04.695 --> 00:54:06.214
<v Speaker 0>There are so many things I wanna say

00:54:06.214 --> 00:54:07.734
<v Speaker 0>and argue about here, but I know we're

00:54:07.734 --> 00:54:08.695
<v Speaker 0>out of time.

00:54:09.335 --> 00:54:10.775
<v Speaker 0>I I think the one the one thing,

00:54:10.775 --> 00:54:12.695
<v Speaker 0>I guess, I I will say is the

00:54:14.055 --> 00:54:15.815
<v Speaker 0>one little challenge, and I'll I'll just kinda

00:54:15.815 --> 00:54:16.615
<v Speaker 0>leave it here, I guess.

00:54:17.710 --> 00:54:19.390
<v Speaker 0>Red Hat tried the

00:54:19.630 --> 00:54:22.910
<v Speaker 0>we're gonna switch the order of things and

00:54:22.910 --> 00:54:24.990
<v Speaker 0>make the downstream the open source part.

00:54:25.630 --> 00:54:27.950
<v Speaker 0>And I would argue that the community really

00:54:27.950 --> 00:54:29.070
<v Speaker 0>doesn't like that.

00:54:29.470 --> 00:54:31.625
<v Speaker 0>So I don't know. There there's a lot

00:54:31.625 --> 00:54:33.465
<v Speaker 0>of different ways. I admit that I am

00:54:33.465 --> 00:54:35.705
<v Speaker 0>a huge fan of the AGPL v three,

00:54:36.585 --> 00:54:38.585
<v Speaker 0>but maybe that's why

00:54:38.665 --> 00:54:39.305
<v Speaker 0>I

00:54:39.545 --> 00:54:42.105
<v Speaker 0>I will argue it. But we unfortunately don't

00:54:42.105 --> 00:54:44.265
<v Speaker 0>have time, and I want to really badly.

00:54:44.984 --> 00:54:45.785
<v Speaker 1>To be continued.

00:54:46.800 --> 00:54:48.560
<v Speaker 0>To be continued. That's correct.

00:54:48.960 --> 00:54:50.800
<v Speaker 2>Yeah. We could have an entire session on

00:54:50.800 --> 00:54:52.960
<v Speaker 2>open source licensing. I could talk about that

00:54:52.960 --> 00:54:54.720
<v Speaker 2>for, like, hours. Dude, this this should be

00:54:54.720 --> 00:54:55.600
<v Speaker 0>so much fun.

00:54:56.800 --> 00:54:57.520
<v Speaker 1>Anyway

00:54:57.680 --> 00:54:59.760
<v Speaker 1>Yeah. Well, we don't wanna keep you any

00:54:59.760 --> 00:55:01.345
<v Speaker 1>longer. So feel free to give us thirty

00:55:01.345 --> 00:55:03.185
<v Speaker 1>seconds if you wish just to tell people

00:55:03.185 --> 00:55:04.945
<v Speaker 1>where they can learn more about Influx, follow

00:55:04.945 --> 00:55:06.385
<v Speaker 1>you on Twitter, anything like that. Feel free

00:55:06.385 --> 00:55:08.385
<v Speaker 1>to shamelessly plug in if you wish.

00:55:10.225 --> 00:55:14.570
<v Speaker 2>On Twitter, I'm at politics.Influx

00:55:14.570 --> 00:55:16.170
<v Speaker 2>or InfluxData.com

00:55:16.170 --> 00:55:17.930
<v Speaker 2>or InfluxDB.com.

00:55:18.170 --> 00:55:19.130
<v Speaker 2>You can find us.

00:55:20.250 --> 00:55:21.770
<v Speaker 2>3.o, we have available,

00:55:22.090 --> 00:55:24.490
<v Speaker 2>as a multi tenant cloud product, as a

00:55:24.490 --> 00:55:26.795
<v Speaker 2>dedicated cloud product. And soon,

00:55:27.194 --> 00:55:29.755
<v Speaker 2>open source builds or builds of 3.0 will

00:55:29.755 --> 00:55:30.474
<v Speaker 2>be available,

00:55:30.714 --> 00:55:33.035
<v Speaker 2>but we're not again, we're focused on our

00:55:33.035 --> 00:55:35.434
<v Speaker 2>commercial offerings at the moment for obvious reasons.

00:55:35.434 --> 00:55:35.915
<v Speaker 2>But,

00:55:36.234 --> 00:55:38.954
<v Speaker 2>yeah. Alright. Thank you very much. Thanks for

00:55:38.954 --> 00:55:40.859
<v Speaker 0>joining us. If you wanna keep up with

00:55:40.859 --> 00:55:43.500
<v Speaker 1>us, consider subscribing to the podcast on your

00:55:43.500 --> 00:55:47.820
<v Speaker 1>favorite podcasting app or even go to cloudnativecompass.fm.

00:55:47.980 --> 00:55:49.339
<v Speaker 0>And if you want us to talk with

00:55:49.339 --> 00:55:52.220
<v Speaker 0>someone specific or cover a specific topic,

00:55:52.460 --> 00:55:54.539
<v Speaker 0>reach out to us on any social media

00:55:54.539 --> 00:55:57.455
<v Speaker 0>platform. Until next time when exploring the cloud

00:55:57.455 --> 00:55:58.415
<v Speaker 1>native landscape

00:55:58.495 --> 00:56:01.215
<v Speaker 1>on 3. On 3. 1,

00:56:01.455 --> 00:56:02.095
<v Speaker 1>2,

00:56:02.335 --> 00:56:02.975
<v Speaker 1>3.

00:56:03.615 --> 00:56:05.215
<v Speaker 1>Forget your compass. Don't forget your compass.
