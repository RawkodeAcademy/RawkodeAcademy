WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: fd29f0ec-93ff-4479-bb5e-6ca3a81b21a2
Created: 2025-04-29T22:28:20.573Z
Duration: 6790.172
Channels: 1

00:01:31.945 --> 00:01:34.425
<v Speaker 0>Hello. Hello. Hello. Hello. Hello.

00:01:35.225 --> 00:01:35.865
<v Speaker 0>Good afternoon.

00:01:37.130 --> 00:01:40.330
<v Speaker 0>It is. It is nicely just afternoon. I'm

00:01:40.330 --> 00:01:42.730
<v Speaker 0>only a few minutes late. Thank you for

00:01:42.730 --> 00:01:44.890
<v Speaker 0>joining me today, Adrian. How are you?

00:01:45.290 --> 00:01:47.690
<v Speaker 1>I'm good. Yeah. I'm considering

00:01:47.690 --> 00:01:48.890
<v Speaker 1>the circumstances,

00:01:48.890 --> 00:01:49.450
<v Speaker 1>but yeah.

00:01:50.195 --> 00:01:52.115
<v Speaker 1>It's a good day to be inside because

00:01:52.115 --> 00:01:54.195
<v Speaker 1>it's raining. So so

00:01:55.555 --> 00:01:58.115
<v Speaker 0>Yeah. Where are you based right now?

00:01:58.435 --> 00:02:01.875
<v Speaker 1>I'm currently in Berlin. Yep. So I I

00:02:02.034 --> 00:02:04.180
<v Speaker 1>I work here at at wire

00:02:05.380 --> 00:02:07.060
<v Speaker 1>for the past year now.

00:02:08.419 --> 00:02:10.739
<v Speaker 1>I moved to Berlin, and then I ended

00:02:10.739 --> 00:02:12.580
<v Speaker 1>up working from home in Berlin because the

00:02:12.580 --> 00:02:14.820
<v Speaker 1>office is closed, obviously. So this was not

00:02:15.300 --> 00:02:18.020
<v Speaker 1>completely as planned, but it's still fun. And

00:02:18.260 --> 00:02:18.580
<v Speaker 1>yep.

00:02:19.675 --> 00:02:21.115
<v Speaker 1>And I will probably

00:02:21.355 --> 00:02:24.875
<v Speaker 1>plug that we're hiring people for Kubernetes

00:02:24.875 --> 00:02:27.035
<v Speaker 1>things if you're interested in that at the

00:02:27.035 --> 00:02:29.435
<v Speaker 1>end of the show, but it's not always

00:02:30.475 --> 00:02:31.675
<v Speaker 1>looking for more people.

00:02:32.635 --> 00:02:34.155
<v Speaker 1>And but, yeah, I do

00:02:34.850 --> 00:02:38.050
<v Speaker 1>DevOps stuff there. So I do both development

00:02:38.050 --> 00:02:39.570
<v Speaker 1>and operations

00:02:40.130 --> 00:02:41.170
<v Speaker 1>responsible for

00:02:41.490 --> 00:02:42.850
<v Speaker 1>keeping all our

00:02:43.170 --> 00:02:46.450
<v Speaker 1>all our infrastructure running and building new features.

00:02:46.450 --> 00:02:48.130
<v Speaker 1>So we're kind of a mixed team. We

00:02:48.130 --> 00:02:49.090
<v Speaker 1>do all kinds of stuff.

00:02:49.965 --> 00:02:52.445
<v Speaker 1>And in my spare time, I also torture

00:02:52.445 --> 00:02:53.485
<v Speaker 1>myself with

00:02:54.765 --> 00:02:56.045
<v Speaker 1>these kind of things.

00:02:56.605 --> 00:02:59.245
<v Speaker 1>And yeah. Actually, I I didn't

00:02:59.245 --> 00:03:00.925
<v Speaker 1>have I p v six at home in

00:03:00.925 --> 00:03:03.410
<v Speaker 1>Netherlands because we only have, like, 15%

00:03:03.410 --> 00:03:05.490
<v Speaker 1>adoption rates, like, one of the lowest in

00:03:05.490 --> 00:03:06.850
<v Speaker 1>the world. And Germany,

00:03:07.330 --> 00:03:08.690
<v Speaker 1>it's, like, 70%.

00:03:08.690 --> 00:03:09.650
<v Speaker 1>It's super high.

00:03:10.050 --> 00:03:11.490
<v Speaker 1>And so when I moved here, I noticed

00:03:11.490 --> 00:03:13.010
<v Speaker 1>I had an I p v six address,

00:03:13.010 --> 00:03:15.570
<v Speaker 1>not only one. I had a trillion per

00:03:15.570 --> 00:03:18.435
<v Speaker 1>machine on everything on my network. Was like,

00:03:18.435 --> 00:03:20.275
<v Speaker 1>this is very weird, and how does this

00:03:20.275 --> 00:03:22.675
<v Speaker 1>work? And and I decided to learn a

00:03:22.675 --> 00:03:24.675
<v Speaker 1>bit about it by messing around with it

00:03:24.675 --> 00:03:26.115
<v Speaker 1>in Kubernetes, and that was a bit of

00:03:26.115 --> 00:03:26.995
<v Speaker 1>an adventure.

00:03:28.115 --> 00:03:28.355
<v Speaker 1>So

00:03:29.090 --> 00:03:30.770
<v Speaker 0>Well, I'm hoping that we can take all

00:03:30.770 --> 00:03:32.930
<v Speaker 0>of your learnings from that adventure. And Yeah.

00:03:33.010 --> 00:03:34.450
<v Speaker 0>I can absorb some of them, and we

00:03:34.450 --> 00:03:35.730
<v Speaker 0>can share some of them with people that

00:03:35.730 --> 00:03:37.650
<v Speaker 0>are watching as well. Yep. It's gonna be

00:03:37.650 --> 00:03:40.370
<v Speaker 0>awesome. Yeah. So they're also quite involved

00:03:40.610 --> 00:03:42.210
<v Speaker 0>in Next. Right? You're you're my go to

00:03:42.210 --> 00:03:42.930
<v Speaker 0>Next person.

00:03:43.835 --> 00:03:45.835
<v Speaker 1>Yeah. Yeah. So I do I

00:03:46.075 --> 00:03:47.435
<v Speaker 1>do maintenance

00:03:47.435 --> 00:03:48.635
<v Speaker 1>for NextOS.

00:03:48.955 --> 00:03:51.515
<v Speaker 1>I I maintain the the the system d

00:03:51.515 --> 00:03:52.315
<v Speaker 1>packages

00:03:52.315 --> 00:03:54.715
<v Speaker 1>and the that also touches all the container

00:03:54.715 --> 00:03:55.995
<v Speaker 1>stuff automatically.

00:03:55.995 --> 00:03:58.430
<v Speaker 1>So kind of in that area, making sure

00:03:58.430 --> 00:04:00.350
<v Speaker 1>that service management works in the next OS

00:04:00.350 --> 00:04:02.430
<v Speaker 1>and having all that stuff running. And I

00:04:02.430 --> 00:04:05.390
<v Speaker 1>also do the let's encrypt stuff for next.

00:04:05.950 --> 00:04:09.150
<v Speaker 1>So automatic certificate renewal for if you create

00:04:09.150 --> 00:04:11.069
<v Speaker 1>an NGINX service with the next OS and

00:04:11.069 --> 00:04:13.395
<v Speaker 1>stuff. Yeah. That's a lot of fun. Yeah.

00:04:13.395 --> 00:04:14.195
<v Speaker 1>It is

00:04:15.475 --> 00:04:17.635
<v Speaker 1>yeah. Also, if you want to check out

00:04:17.635 --> 00:04:19.475
<v Speaker 1>this project later, it's also set up with

00:04:19.475 --> 00:04:21.555
<v Speaker 1>next. It will download the right version of

00:04:21.555 --> 00:04:22.915
<v Speaker 1>Kubernetes and everything. It's

00:04:24.915 --> 00:04:25.155
<v Speaker 0>yeah.

00:04:26.510 --> 00:04:27.390
<v Speaker 0>Awesome.

00:04:27.870 --> 00:04:28.910
<v Speaker 0>Yep. So

00:04:29.950 --> 00:04:30.670
<v Speaker 0>I'm trying to

00:04:31.230 --> 00:04:34.190
<v Speaker 0>I guess my first question then, you know,

00:04:34.190 --> 00:04:36.110
<v Speaker 0>which I've straight into the

00:04:36.670 --> 00:04:38.590
<v Speaker 0>the the why. Why why are we doing

00:04:38.590 --> 00:04:39.630
<v Speaker 0>Kubernetes

00:04:39.630 --> 00:04:41.550
<v Speaker 0>I p v six only cluster?

00:04:42.294 --> 00:04:42.935
<v Speaker 0>Yeah.

00:04:43.414 --> 00:04:44.055
<v Speaker 0>So

00:04:45.735 --> 00:04:47.655
<v Speaker 1>what did you think the first time you

00:04:47.655 --> 00:04:50.055
<v Speaker 1>learned about, like, Kubernetes networking?

00:04:50.215 --> 00:04:52.055
<v Speaker 1>What was it very obvious to you, or

00:04:52.055 --> 00:04:53.974
<v Speaker 1>were you very confused? Because I was very

00:04:53.974 --> 00:04:55.655
<v Speaker 1>confused the first time I read about all

00:04:55.655 --> 00:04:59.479
<v Speaker 1>these things. Like, overlay networks, spot network,

00:04:59.479 --> 00:05:01.080
<v Speaker 1>service IPs,

00:05:01.160 --> 00:05:04.039
<v Speaker 1>net cube proxy. It's it's it's

00:05:04.039 --> 00:05:04.520
<v Speaker 1>like

00:05:04.919 --> 00:05:06.680
<v Speaker 0>Oh, yeah. It's very confusing. There's so much

00:05:06.680 --> 00:05:08.680
<v Speaker 0>to speak in, so many different components. And

00:05:08.680 --> 00:05:12.680
<v Speaker 0>then depending on the CNI implementation, there's different

00:05:12.164 --> 00:05:14.324
<v Speaker 0>abstractions on top of that. Yeah. Yeah. So

00:05:14.324 --> 00:05:16.164
<v Speaker 1>you have to choose, like the first thing

00:05:16.164 --> 00:05:18.245
<v Speaker 1>is, like, Kubernetes is gonna make super everything

00:05:18.245 --> 00:05:19.205
<v Speaker 1>super easy

00:05:19.525 --> 00:05:21.764
<v Speaker 1>once you make all these difficult choices. Right?

00:05:21.845 --> 00:05:24.245
<v Speaker 1>Like, there's 20 different CNI plug ins with

00:05:24.245 --> 00:05:25.970
<v Speaker 1>your VXLAN,

00:05:25.970 --> 00:05:27.730
<v Speaker 1>IP overlay networks,

00:05:27.730 --> 00:05:29.650
<v Speaker 1>or you can use the stuff from your

00:05:29.650 --> 00:05:31.570
<v Speaker 1>cloud provider to set up routing.

00:05:32.050 --> 00:05:33.010
<v Speaker 1>There's like a

00:05:33.570 --> 00:05:36.530
<v Speaker 1>million different choices. Right? And

00:05:37.795 --> 00:05:39.475
<v Speaker 1>so, one of the first

00:05:39.795 --> 00:05:42.355
<v Speaker 1>promises that Kubernetes makes is like your pod

00:05:42.355 --> 00:05:44.195
<v Speaker 1>network is flat. Every pod needs to be

00:05:44.195 --> 00:05:46.435
<v Speaker 1>able to talk to every pod without any

00:05:46.435 --> 00:05:49.155
<v Speaker 1>netting or whatever. Every pod gets an IP

00:05:49.155 --> 00:05:50.595
<v Speaker 1>and it needs to be reachable for each

00:05:50.595 --> 00:05:51.075
<v Speaker 1>other. Right?

00:05:53.340 --> 00:05:53.979
<v Speaker 1>And

00:05:55.020 --> 00:05:56.780
<v Speaker 1>kind of the the thing with that is

00:05:56.780 --> 00:05:57.900
<v Speaker 1>is that means you need to have a

00:05:57.900 --> 00:05:59.580
<v Speaker 1>unique IP address for each pod that you

00:05:59.580 --> 00:06:00.380
<v Speaker 1>spawn up.

00:06:01.180 --> 00:06:01.820
<v Speaker 1>And

00:06:02.539 --> 00:06:04.379
<v Speaker 1>with I p v four, that's kind of

00:06:04.905 --> 00:06:07.305
<v Speaker 1>expensive because I p v four addresses are

00:06:07.305 --> 00:06:09.145
<v Speaker 1>not cheap. So what we usually have is

00:06:09.145 --> 00:06:11.785
<v Speaker 1>we assign pods private addresses, and then we

00:06:11.785 --> 00:06:13.945
<v Speaker 1>set up this overlay network using,

00:06:14.185 --> 00:06:16.745
<v Speaker 1>I don't know, some IP and IP overlay

00:06:16.745 --> 00:06:18.825
<v Speaker 1>network or something such that all the pods

00:06:18.825 --> 00:06:19.625
<v Speaker 1>can talk to each other.

00:06:20.540 --> 00:06:21.180
<v Speaker 1>And

00:06:22.060 --> 00:06:23.740
<v Speaker 1>and the only reason why we have this

00:06:23.740 --> 00:06:26.380
<v Speaker 1>overlay abstraction is really because we

00:06:27.580 --> 00:06:29.900
<v Speaker 1>we cannot give each pod a public IP

00:06:29.900 --> 00:06:31.340
<v Speaker 1>address and let just

00:06:31.820 --> 00:06:33.340
<v Speaker 1>routing magic happen. Right?

00:06:33.740 --> 00:06:34.460
<v Speaker 1>And

00:06:34.805 --> 00:06:35.604
<v Speaker 1>then

00:06:35.685 --> 00:06:36.884
<v Speaker 1>IPv6

00:06:38.724 --> 00:06:40.965
<v Speaker 1>was designed, I don't know, twenty five years

00:06:40.965 --> 00:06:43.604
<v Speaker 1>ago. And they said, well, what if we

00:06:43.604 --> 00:06:45.205
<v Speaker 1>just make this address space bigger and then

00:06:45.205 --> 00:06:46.965
<v Speaker 1>we can just give every device a public

00:06:46.965 --> 00:06:48.485
<v Speaker 1>IP address? And then we don't need to

00:06:48.485 --> 00:06:52.720
<v Speaker 1>bother with netting and overlay networks and

00:06:52.800 --> 00:06:54.560
<v Speaker 1>all this stuff. And

00:06:55.520 --> 00:06:57.360
<v Speaker 1>every device gets a public IP address, and

00:06:57.360 --> 00:06:58.080
<v Speaker 1>we just

00:06:58.400 --> 00:07:00.720
<v Speaker 1>set up routing tables such that things route

00:07:00.720 --> 00:07:02.560
<v Speaker 1>the correct way. And

00:07:03.365 --> 00:07:04.325
<v Speaker 1>this makes

00:07:04.965 --> 00:07:07.525
<v Speaker 1>the world a lot easier in my head

00:07:07.525 --> 00:07:09.365
<v Speaker 1>because I don't have to think about what

00:07:09.365 --> 00:07:11.044
<v Speaker 1>is the IP address of my router when

00:07:11.044 --> 00:07:12.884
<v Speaker 1>I it's just when I go to a

00:07:12.884 --> 00:07:14.645
<v Speaker 1>website, they see the public IP of my

00:07:14.645 --> 00:07:16.405
<v Speaker 1>laptop. This it's just a it's a one

00:07:16.405 --> 00:07:17.044
<v Speaker 1>way route. Right?

00:07:17.770 --> 00:07:20.569
<v Speaker 1>And this also makes the whole it fits

00:07:20.569 --> 00:07:23.449
<v Speaker 1>very well this pod networking model. Like, every

00:07:23.449 --> 00:07:25.449
<v Speaker 1>pod has an IP, and each pod can

00:07:25.449 --> 00:07:27.930
<v Speaker 1>reach every other pod. Like, it fits this

00:07:27.930 --> 00:07:29.289
<v Speaker 1>I b v six world perfectly.

00:07:30.125 --> 00:07:32.605
<v Speaker 1>And we do not need to well, we

00:07:32.605 --> 00:07:34.365
<v Speaker 1>can still do overlay networks and all this

00:07:34.365 --> 00:07:35.725
<v Speaker 1>stuff, but we don't have to. If we

00:07:35.725 --> 00:07:36.205
<v Speaker 1>just

00:07:36.765 --> 00:07:38.845
<v Speaker 1>assign everything a public IP and we make

00:07:38.845 --> 00:07:40.205
<v Speaker 1>sure that there's

00:07:40.205 --> 00:07:42.605
<v Speaker 1>routes between the two node or three worker

00:07:42.605 --> 00:07:44.365
<v Speaker 1>nodes, they they know that they can route

00:07:44.365 --> 00:07:46.740
<v Speaker 1>both IPs from one to the other, Then

00:07:46.740 --> 00:07:49.699
<v Speaker 1>we can just expose all pods directly to

00:07:49.699 --> 00:07:51.780
<v Speaker 1>the Internet, and then people will say, what?

00:07:51.780 --> 00:07:53.699
<v Speaker 1>It's not secure. What what are you doing?

00:07:54.180 --> 00:07:55.860
<v Speaker 1>Yeah. We'll get to that to that later.

00:07:55.860 --> 00:07:58.259
<v Speaker 1>So I think for that, IPv6 is really

00:07:58.259 --> 00:08:00.340
<v Speaker 1>cool because it really fits this network model

00:08:00.340 --> 00:08:02.615
<v Speaker 1>of we have a flat network very well.

00:08:03.335 --> 00:08:05.414
<v Speaker 1>And that's like the basis of Kubernetes networking

00:08:05.414 --> 00:08:07.255
<v Speaker 1>is we have this flat network model.

00:08:07.655 --> 00:08:09.255
<v Speaker 1>And if we pick it, then we have

00:08:09.255 --> 00:08:10.455
<v Speaker 1>a lot less stuff

00:08:10.775 --> 00:08:11.335
<v Speaker 1>to

00:08:11.815 --> 00:08:12.535
<v Speaker 1>worry about.

00:08:15.210 --> 00:08:16.650
<v Speaker 1>So I think that's a bit of a

00:08:16.650 --> 00:08:18.250
<v Speaker 1>reason why I think I v v six

00:08:18.250 --> 00:08:19.850
<v Speaker 1>and Kubernetes is useful.

00:08:21.690 --> 00:08:23.530
<v Speaker 1>Also, yeah, you you get a lot of

00:08:23.530 --> 00:08:25.130
<v Speaker 1>IP addresses. So you don't have to worry

00:08:25.130 --> 00:08:27.370
<v Speaker 1>about all this IP address management and how

00:08:27.370 --> 00:08:30.410
<v Speaker 1>many how many pods can I schedule and

00:08:31.095 --> 00:08:33.174
<v Speaker 1>I don't know? They're infinite. You don't care.

00:08:33.174 --> 00:08:35.174
<v Speaker 1>It's just if you want to schedule a

00:08:35.174 --> 00:08:37.975
<v Speaker 1>trillion pods, it will still work. But so,

00:08:39.174 --> 00:08:40.855
<v Speaker 1>yeah, just having a flat address space makes

00:08:40.855 --> 00:08:41.975
<v Speaker 1>things a lot easier.

00:08:43.655 --> 00:08:45.740
<v Speaker 0>And Exactly. Yeah. So

00:08:46.780 --> 00:08:48.780
<v Speaker 0>there are a couple of things there. First,

00:08:49.260 --> 00:08:51.660
<v Speaker 0>Adrian. Thanks for watching. Second,

00:08:51.740 --> 00:08:53.260
<v Speaker 0>I just giggled that as you were chatting

00:08:53.260 --> 00:08:56.380
<v Speaker 0>there about IPv six being 25 years old.

00:08:56.380 --> 00:08:57.820
<v Speaker 0>And I was like, oh, I remember I

00:08:57.820 --> 00:08:59.935
<v Speaker 0>read a story about we ran out of

00:08:59.935 --> 00:09:01.775
<v Speaker 0>IPv four addresses.

00:09:02.255 --> 00:09:04.975
<v Speaker 0>Yeah. And that actually happened the first time

00:09:04.975 --> 00:09:07.375
<v Speaker 0>in 2015, I believe, North America ran out

00:09:07.375 --> 00:09:10.895
<v Speaker 0>of addresses. And then, officially, all IPv four

00:09:10.895 --> 00:09:12.895
<v Speaker 0>exhaustion happened in 2018.

00:09:13.135 --> 00:09:14.415
<v Speaker 0>It's been more two years.

00:09:15.030 --> 00:09:17.190
<v Speaker 0>Yeah. We still haven't gotten that sorted yet.

00:09:17.190 --> 00:09:18.550
<v Speaker 0>Right? Yeah. Correct.

00:09:19.350 --> 00:09:21.590
<v Speaker 0>But today, we're gonna do it. We're we're

00:09:21.590 --> 00:09:23.830
<v Speaker 0>we're gonna have a I p v six

00:09:23.830 --> 00:09:25.190
<v Speaker 0>Kubernetes cluster.

00:09:25.350 --> 00:09:26.310
<v Speaker 0>Exactly. So

00:09:26.870 --> 00:09:28.710
<v Speaker 0>Yeah. Is the security like, I mean, the

00:09:28.710 --> 00:09:30.230
<v Speaker 0>first thing when you say, let's get every

00:09:30.230 --> 00:09:33.055
<v Speaker 0>node an I'm desynchronous. Like, you mentioned the

00:09:33.055 --> 00:09:34.815
<v Speaker 0>security. Is that something you wanna talk about

00:09:34.815 --> 00:09:36.654
<v Speaker 0>now, or we'd say that as we began

00:09:36.654 --> 00:09:37.695
<v Speaker 0>to spend this up?

00:09:38.894 --> 00:09:39.455
<v Speaker 1>So

00:09:40.495 --> 00:09:42.255
<v Speaker 1>I left it as an exercise for the

00:09:42.255 --> 00:09:44.400
<v Speaker 1>reader, of course. No. But we'll talk about

00:09:44.400 --> 00:09:46.480
<v Speaker 1>it at the end. But I think we

00:09:46.480 --> 00:09:47.840
<v Speaker 1>have a good story

00:09:48.960 --> 00:09:49.760
<v Speaker 1>for it.

00:09:50.320 --> 00:09:50.880
<v Speaker 1>So,

00:09:51.200 --> 00:09:53.280
<v Speaker 1>basically, if everything is public, you're forced to

00:09:53.280 --> 00:09:55.695
<v Speaker 1>make proper firewall rules. That's basically the trick.

00:09:55.695 --> 00:09:57.455
<v Speaker 1>Instead of relying on the fact that your

00:09:57.455 --> 00:09:59.455
<v Speaker 1>overlay network is not reachable from the Internet,

00:09:59.455 --> 00:10:01.375
<v Speaker 1>this is all but security through obscurity. Right?

00:10:01.375 --> 00:10:02.575
<v Speaker 1>It's not that you and

00:10:04.095 --> 00:10:06.335
<v Speaker 1>Kubernetes has some very nice things for this.

00:10:06.335 --> 00:10:07.855
<v Speaker 1>So, you have network policies where you can

00:10:07.855 --> 00:10:10.255
<v Speaker 1>describe declaratively what pods can talk to what

00:10:10.255 --> 00:10:11.135
<v Speaker 1>pods. And

00:10:13.190 --> 00:10:16.070
<v Speaker 1>if your CNI provider supports it, it will

00:10:16.630 --> 00:10:18.870
<v Speaker 1>make your network secure. And you can also

00:10:18.870 --> 00:10:20.550
<v Speaker 1>do things like, I don't know,

00:10:21.990 --> 00:10:25.190
<v Speaker 1>service meshes like HCO to have everything encrypted.

00:10:25.510 --> 00:10:26.885
<v Speaker 1>And this is all levels that you put

00:10:26.885 --> 00:10:29.125
<v Speaker 1>on top. We'll start with every pod can

00:10:29.125 --> 00:10:31.524
<v Speaker 1>reach every pod. As a side effect, it

00:10:31.524 --> 00:10:33.205
<v Speaker 1>will mean the whole world can reach every

00:10:33.205 --> 00:10:35.845
<v Speaker 1>pod because it's IPv6 and everything is public.

00:10:36.725 --> 00:10:37.285
<v Speaker 1>But

00:10:38.540 --> 00:10:41.019
<v Speaker 1>if we start from the basis is very

00:10:41.019 --> 00:10:43.180
<v Speaker 1>simple, then we can bolt on security later.

00:10:43.180 --> 00:10:45.259
<v Speaker 1>And, yes, it is important, but it is

00:10:45.259 --> 00:10:48.459
<v Speaker 1>also important if your pods have private IP

00:10:48.459 --> 00:10:49.180
<v Speaker 1>addresses.

00:10:50.620 --> 00:10:52.699
<v Speaker 1>Because, I don't know, maybe

00:10:53.665 --> 00:10:55.584
<v Speaker 1>for some reason, you have some rule in

00:10:55.584 --> 00:10:57.985
<v Speaker 1>your firewall that forwards things to your prod

00:10:57.985 --> 00:10:59.504
<v Speaker 1>IP space. And then still things from the

00:10:59.504 --> 00:11:00.944
<v Speaker 1>outside could reach it. So it's always good

00:11:00.944 --> 00:11:02.545
<v Speaker 1>to have this kind of network policy set

00:11:02.545 --> 00:11:06.199
<v Speaker 1>up inside your Kubernetes cluster. And making everything

00:11:06.199 --> 00:11:08.040
<v Speaker 1>public by default, we're kind of forced to

00:11:08.040 --> 00:11:09.720
<v Speaker 1>do this zero trust thing, right, where we

00:11:09.720 --> 00:11:11.800
<v Speaker 1>trust nobody and we have to bolt everything

00:11:11.800 --> 00:11:12.519
<v Speaker 1>together.

00:11:13.160 --> 00:11:13.720
<v Speaker 1>But

00:11:14.040 --> 00:11:15.480
<v Speaker 1>I'm not sure if we're gonna get to

00:11:15.480 --> 00:11:17.319
<v Speaker 1>that part, but I can give some links

00:11:17.319 --> 00:11:19.715
<v Speaker 1>on how you could set that up. But

00:11:19.715 --> 00:11:21.795
<v Speaker 1>we're just gonna go for a very insecure,

00:11:21.795 --> 00:11:23.955
<v Speaker 1>very public Kubernetes cluster today,

00:11:24.755 --> 00:11:25.315
<v Speaker 1>I think.

00:11:26.035 --> 00:11:28.675
<v Speaker 1>Okay. So yeah. So, I mean, I've got

00:11:28.675 --> 00:11:30.595
<v Speaker 0>dozens of questions. But rather talking about it

00:11:30.595 --> 00:11:32.675
<v Speaker 0>abstractly, I think we we get started, we

00:11:32.675 --> 00:11:34.690
<v Speaker 0>put it together, and then Yep. The moving

00:11:34.690 --> 00:11:37.250
<v Speaker 0>components allow people to kinda follow along as

00:11:37.250 --> 00:11:39.170
<v Speaker 0>well. Yep. And there's just a little bit

00:11:39.170 --> 00:11:40.130
<v Speaker 0>of noise

00:11:40.769 --> 00:11:42.209
<v Speaker 0>in your mic, if you could just push

00:11:42.209 --> 00:11:43.410
<v Speaker 0>it away a little bit.

00:11:43.810 --> 00:11:46.209
<v Speaker 1>Better? Yeah. Sometimes it picks up the the

00:11:46.209 --> 00:11:48.365
<v Speaker 1>briefing if it gets too close. Yep. Just

00:11:48.365 --> 00:11:49.725
<v Speaker 1>tell me just tell me when it happens

00:11:49.725 --> 00:11:52.205
<v Speaker 1>again because it tends to slowly move back.

00:11:52.925 --> 00:11:56.205
<v Speaker 1>Yeah. Yep. That's alright. Perfect. Okay. So I

00:11:56.205 --> 00:11:57.165
<v Speaker 0>am gonna share

00:11:57.645 --> 00:11:58.125
<v Speaker 0>my screen.

00:12:01.230 --> 00:12:05.390
<v Speaker 0>I have, at your request, created a server.

00:12:05.390 --> 00:12:07.630
<v Speaker 0>The reason we have a working node server

00:12:07.630 --> 00:12:08.830
<v Speaker 0>is because

00:12:09.230 --> 00:12:11.150
<v Speaker 0>this cluster is only available in the I

00:12:11.150 --> 00:12:13.630
<v Speaker 0>p d six space, and my ISP does

00:12:13.630 --> 00:12:15.470
<v Speaker 0>not allocate me an I p d six

00:12:15.470 --> 00:12:17.445
<v Speaker 0>address per virtual version.

00:12:17.685 --> 00:12:18.325
<v Speaker 0>So

00:12:18.885 --> 00:12:21.685
<v Speaker 0>that server is here so that we can

00:12:21.685 --> 00:12:23.925
<v Speaker 0>interact with that customer needs. It's the only

00:12:23.925 --> 00:12:26.405
<v Speaker 0>reason I will be working remotely today.

00:12:26.565 --> 00:12:29.925
<v Speaker 0>Mhmm. I have a Versus Code window here,

00:12:29.925 --> 00:12:32.430
<v Speaker 0>which if I create

00:12:32.430 --> 00:12:34.750
<v Speaker 0>a a little text,

00:12:36.110 --> 00:12:38.190
<v Speaker 0>your cursor should magically show up. So we

00:12:38.190 --> 00:12:40.270
<v Speaker 0>have the ability to collaborate on this as

00:12:40.270 --> 00:12:42.110
<v Speaker 0>we go, which means that you get to

00:12:42.110 --> 00:12:44.190
<v Speaker 0>fix all of my errors, which is awesome.

00:12:44.915 --> 00:12:47.155
<v Speaker 0>And we have a terminal where I have

00:12:47.155 --> 00:12:47.955
<v Speaker 0>configured

00:12:48.035 --> 00:12:50.995
<v Speaker 0>just enough and hopefully not forgotten anything to

00:12:50.995 --> 00:12:52.755
<v Speaker 0>get us through this. So I have prepared

00:12:52.755 --> 00:12:55.315
<v Speaker 0>Terraform. I have installed Terraform,

00:12:55.395 --> 00:12:56.595
<v Speaker 0>Kube CPL,

00:12:57.875 --> 00:12:58.435
<v Speaker 0>Pulumi.

00:12:59.530 --> 00:13:01.610
<v Speaker 1>Yep. We we will need

00:13:02.730 --> 00:13:04.890
<v Speaker 1>one more thing that we need to install.

00:13:05.290 --> 00:13:06.970
<v Speaker 1>We're gonna need to well,

00:13:07.610 --> 00:13:09.450
<v Speaker 1>on a kubectl, we don't need. We need

00:13:09.450 --> 00:13:10.890
<v Speaker 1>that on the notes. That's gonna be fine.

00:13:10.890 --> 00:13:12.410
<v Speaker 1>We'll need calicoctl

00:13:12.410 --> 00:13:14.625
<v Speaker 1>as well because we're gonna use the Calico

00:13:14.625 --> 00:13:16.704
<v Speaker 1>network plugin in this demo.

00:13:17.425 --> 00:13:17.985
<v Speaker 1>And

00:13:19.105 --> 00:13:21.345
<v Speaker 1>it uses its own command line tool to

00:13:21.345 --> 00:13:22.305
<v Speaker 1>configure things.

00:13:22.704 --> 00:13:23.185
<v Speaker 1>So,

00:13:23.505 --> 00:13:24.225
<v Speaker 1>uses

00:13:24.464 --> 00:13:26.225
<v Speaker 1>custom resource Kubernetes

00:13:26.225 --> 00:13:27.745
<v Speaker 1>custom resource definitions,

00:13:27.985 --> 00:13:28.945
<v Speaker 1>but not for everything.

00:13:30.260 --> 00:13:32.100
<v Speaker 1>So for some things, you still need their

00:13:32.100 --> 00:13:33.300
<v Speaker 1>their CLI.

00:13:33.300 --> 00:13:34.180
<v Speaker 1>So yeah.

00:13:34.980 --> 00:13:38.260
<v Speaker 0>No problem. So we curl that. Shimon plus

00:13:38.260 --> 00:13:40.500
<v Speaker 0>x. Oh, yeah. We'll give that a second.

00:13:40.500 --> 00:13:41.060
<v Speaker 0>There we go.

00:13:42.785 --> 00:13:44.465
<v Speaker 0>Now we can move this.

00:13:46.865 --> 00:13:47.505
<v Speaker 0>Yep.

00:13:49.745 --> 00:13:51.585
<v Speaker 0>Okay. So we have everything we need. And

00:13:51.585 --> 00:13:52.945
<v Speaker 0>if we need anything else, we'll deal with

00:13:52.945 --> 00:13:53.585
<v Speaker 0>that as we go.

00:13:54.880 --> 00:13:55.920
<v Speaker 0>Yep. Alright.

00:13:56.160 --> 00:13:57.920
<v Speaker 0>Step one. What do I need to do?

00:13:58.560 --> 00:14:01.920
<v Speaker 1>So we will need some servers. Right? So

00:14:01.920 --> 00:14:03.600
<v Speaker 1>I will need a

00:14:03.920 --> 00:14:06.400
<v Speaker 1>a master node and some worker nodes

00:14:07.680 --> 00:14:09.200
<v Speaker 1>so we can

00:14:09.865 --> 00:14:10.985
<v Speaker 1>set those up.

00:14:12.425 --> 00:14:13.145
<v Speaker 1>Okay.

00:14:13.705 --> 00:14:15.625
<v Speaker 1>And I've never used Pulumi before, so I'm

00:14:15.625 --> 00:14:16.985
<v Speaker 1>very curious. It's

00:14:19.385 --> 00:14:21.705
<v Speaker 0>Yep. I'll talk about why I like it.

00:14:21.785 --> 00:14:23.705
<v Speaker 0>This director is an empty site, so why

00:14:23.705 --> 00:14:24.585
<v Speaker 0>need to add this force.

00:14:25.160 --> 00:14:28.200
<v Speaker 0>I'm using the packet TypeScript

00:14:28.280 --> 00:14:32.040
<v Speaker 0>template, which just means that it configures the

00:14:33.080 --> 00:14:36.040
<v Speaker 0>the provider to provision packet infrastructure,

00:14:36.120 --> 00:14:37.880
<v Speaker 0>and I'm gonna choose to write my code

00:14:37.880 --> 00:14:39.480
<v Speaker 0>in TypeScript. One of the things I really,

00:14:39.480 --> 00:14:42.015
<v Speaker 0>really, really, really love about Pulumi

00:14:42.015 --> 00:14:43.135
<v Speaker 0>is that you can use

00:14:43.535 --> 00:14:46.815
<v Speaker 0>most well, supported programming languages. So you can

00:14:46.815 --> 00:14:48.575
<v Speaker 0>use the tools you're comfortable with. For me,

00:14:48.575 --> 00:14:50.015
<v Speaker 0>I use TypeScript. You may wish to use

00:14:50.015 --> 00:14:52.495
<v Speaker 0>Go or Python, and even .net is supported.

00:14:52.495 --> 00:14:53.535
<v Speaker 0>So it's cool.

00:14:54.620 --> 00:14:56.460
<v Speaker 0>Now this wizard is going to ask me

00:14:56.460 --> 00:14:57.740
<v Speaker 0>for the project name,

00:14:58.460 --> 00:14:59.340
<v Speaker 0>description,

00:14:59.660 --> 00:15:02.220
<v Speaker 0>and stack name. Oh,

00:15:02.620 --> 00:15:04.060
<v Speaker 0>let's call it prod.

00:15:05.180 --> 00:15:07.740
<v Speaker 0>And something I really like about Pulumi as

00:15:07.740 --> 00:15:09.740
<v Speaker 0>well is it has a configurable

00:15:09.975 --> 00:15:11.415
<v Speaker 0>secrets provider.

00:15:11.735 --> 00:15:13.975
<v Speaker 0>Mhmm. By default, I can just type in

00:15:13.975 --> 00:15:14.695
<v Speaker 0>a

00:15:15.095 --> 00:15:16.375
<v Speaker 0>release secure

00:15:18.295 --> 00:15:18.695
<v Speaker 0>password.

00:15:21.310 --> 00:15:24.430
<v Speaker 0>And, hopefully, I remember what I ugh. I'm

00:15:24.430 --> 00:15:26.270
<v Speaker 0>failing at typing today.

00:15:29.070 --> 00:15:29.470
<v Speaker 0>Hey.

00:15:35.225 --> 00:15:36.905
<v Speaker 0>I don't know if that's even right. Okay.

00:15:36.905 --> 00:15:37.465
<v Speaker 0>So

00:15:37.785 --> 00:15:39.785
<v Speaker 0>and by default, we're using a

00:15:40.345 --> 00:15:42.585
<v Speaker 0>password based encryption, which means any secret site

00:15:42.585 --> 00:15:45.225
<v Speaker 0>access project relevant to get repository and correct

00:15:45.225 --> 00:15:47.705
<v Speaker 0>people with that password. It does also connect

00:15:47.705 --> 00:15:50.985
<v Speaker 0>to cloud service KMSs and to Vault. So

00:15:50.210 --> 00:15:51.810
<v Speaker 0>if I really wanted to make this a

00:15:51.810 --> 00:15:53.890
<v Speaker 0>bit more secure, I could say, go speak

00:15:53.890 --> 00:15:55.970
<v Speaker 0>to this Vault server, get a a management

00:15:55.970 --> 00:15:58.130
<v Speaker 0>key, or go speak to GCP,

00:15:58.850 --> 00:16:02.050
<v Speaker 0>KMS, AWS, KMS, or even Azure KMS. Yep.

00:16:02.050 --> 00:16:02.610
<v Speaker 1>That's nice.

00:16:03.195 --> 00:16:05.595
<v Speaker 0>Yeah. Let me it's cool. Although I do

00:16:05.755 --> 00:16:07.355
<v Speaker 0>I know it's one of these really superficial

00:16:07.355 --> 00:16:09.435
<v Speaker 0>things. It does bother me that the index

00:16:09.435 --> 00:16:10.875
<v Speaker 0>dot t s gets created in the root

00:16:10.875 --> 00:16:11.515
<v Speaker 0>directory.

00:16:11.755 --> 00:16:13.435
<v Speaker 0>I I don't think that. But You you

00:16:13.435 --> 00:16:14.395
<v Speaker 1>want to that.

00:16:15.195 --> 00:16:16.875
<v Speaker 1>Not gonna let that stop us. Right? Yeah.

00:16:17.640 --> 00:16:19.400
<v Speaker 0>No. No. I'm gonna pick it. So I'm

00:16:19.400 --> 00:16:21.320
<v Speaker 0>just gonna create a source folder. I'm gonna

00:16:21.320 --> 00:16:23.560
<v Speaker 0>go pull in here. And the only thing

00:16:23.560 --> 00:16:24.920
<v Speaker 0>I need to change

00:16:26.440 --> 00:16:27.240
<v Speaker 0>is

00:16:27.320 --> 00:16:28.040
<v Speaker 0>main

00:16:29.000 --> 00:16:29.800
<v Speaker 0>source

00:16:29.880 --> 00:16:30.760
<v Speaker 0>and that

00:16:31.560 --> 00:16:31.960
<v Speaker 0>k.

00:16:34.975 --> 00:16:35.615
<v Speaker 0>Cancel.

00:16:36.175 --> 00:16:37.215
<v Speaker 0>Okay. So

00:16:39.215 --> 00:16:41.855
<v Speaker 0>we're now in a position where we can

00:16:41.855 --> 00:16:43.455
<v Speaker 0>create a server.

00:16:43.775 --> 00:16:44.415
<v Speaker 0>Yeah.

00:16:45.135 --> 00:16:45.935
<v Speaker 0>That's good.

00:16:46.335 --> 00:16:47.615
<v Speaker 0>Okay. So

00:16:48.389 --> 00:16:51.510
<v Speaker 0>this should have installed the SDK for me,

00:16:51.510 --> 00:16:53.510
<v Speaker 0>which means I should already get all complete.

00:16:53.510 --> 00:16:55.430
<v Speaker 0>I'm gonna confirm that first.

00:16:56.470 --> 00:16:58.950
<v Speaker 0>What we is this like a a management

00:16:58.950 --> 00:17:00.845
<v Speaker 0>server I need to create first? Do we

00:17:00.845 --> 00:17:02.045
<v Speaker 0>need more than one server?

00:17:03.645 --> 00:17:05.484
<v Speaker 1>We'll need a a

00:17:05.645 --> 00:17:08.365
<v Speaker 1>master node and a worker nodes or so

00:17:09.005 --> 00:17:10.685
<v Speaker 1>let's let's have two in total. We can

00:17:10.685 --> 00:17:13.005
<v Speaker 1>have one and do everything on there, but

00:17:13.244 --> 00:17:15.165
<v Speaker 1>it's more interesting if we have two because

00:17:15.165 --> 00:17:17.819
<v Speaker 1>then we can demonstrate that networking across nodes

00:17:17.819 --> 00:17:19.659
<v Speaker 1>actually works, and I'm not bluffing.

00:17:20.380 --> 00:17:22.220
<v Speaker 1>So let's do two. Yeah.

00:17:23.099 --> 00:17:24.940
<v Speaker 1>We can maybe let's do

00:17:26.540 --> 00:17:28.380
<v Speaker 1>so you want to make one,

00:17:28.700 --> 00:17:31.225
<v Speaker 1>like, where the control plane is gonna run,

00:17:31.225 --> 00:17:33.384
<v Speaker 1>like the cube control plane, and then

00:17:33.785 --> 00:17:34.745
<v Speaker 1>some workers.

00:17:35.785 --> 00:17:37.945
<v Speaker 0>Got it. So that's a

00:17:38.985 --> 00:17:41.385
<v Speaker 0>our admin server, which I'm just gonna call

00:17:41.385 --> 00:17:41.865
<v Speaker 0>admin.

00:17:43.040 --> 00:17:45.440
<v Speaker 0>And it's a few required properties.

00:17:45.440 --> 00:17:47.840
<v Speaker 0>So so we'll

00:17:47.840 --> 00:17:49.519
<v Speaker 0>go over it onto that.

00:17:51.120 --> 00:17:52.960
<v Speaker 0>We will need

00:17:55.205 --> 00:17:55.765
<v Speaker 0>okay.

00:18:04.805 --> 00:18:06.325
<v Speaker 0>Are you typing, or you're just trying to

00:18:06.325 --> 00:18:07.525
<v Speaker 0>trip me up? Is that what it is?

00:18:07.525 --> 00:18:09.445
<v Speaker 1>No. No. I'm I'm not touching the keyboard

00:18:09.445 --> 00:18:10.085
<v Speaker 1>at all. No.

00:18:12.250 --> 00:18:14.170
<v Speaker 0>And we get all complete on the operating

00:18:14.170 --> 00:18:15.850
<v Speaker 0>system. It should be possible.

00:18:15.850 --> 00:18:17.850
<v Speaker 0>So let's go with the good two eighteen

00:18:17.850 --> 00:18:18.570
<v Speaker 0>o four.

00:18:18.890 --> 00:18:20.970
<v Speaker 0>So our newer versions, but I think the

00:18:20.970 --> 00:18:21.850
<v Speaker 0>provider

00:18:22.330 --> 00:18:25.050
<v Speaker 0>doesn't have all the list yet. Mhmm. Yep.

00:18:26.165 --> 00:18:28.405
<v Speaker 0>Okay. So we do need a project ID.

00:18:28.405 --> 00:18:30.325
<v Speaker 0>Let's put that as a question mark. We'll

00:18:30.325 --> 00:18:32.244
<v Speaker 0>need to bring that to a configuration.

00:18:32.645 --> 00:18:35.044
<v Speaker 0>Yep. And we need a

00:18:35.044 --> 00:18:35.605
<v Speaker 0>plan.

00:18:37.525 --> 00:18:38.885
<v Speaker 0>And

00:18:38.500 --> 00:18:40.900
<v Speaker 0>is there any minimum sizes that I'm gonna

00:18:40.900 --> 00:18:44.419
<v Speaker 0>require here? So I've been using the the

00:18:44.419 --> 00:18:46.739
<v Speaker 1>the old t one micros,

00:18:46.820 --> 00:18:49.460
<v Speaker 1>which I don't know if they're even I

00:18:49.460 --> 00:18:51.059
<v Speaker 1>can still spawn them up, but they are

00:18:51.059 --> 00:18:53.115
<v Speaker 1>not in the list anymore by default. So

00:18:53.115 --> 00:18:55.355
<v Speaker 1>just the smallest thing, it's fine. There's no

00:18:55.995 --> 00:18:58.475
<v Speaker 1>you know? Okay. I'm gonna start with c

00:18:58.475 --> 00:19:01.115
<v Speaker 0>two medium. Okay. What else does it require?

00:19:01.115 --> 00:19:02.715
<v Speaker 0>So it's telling me

00:19:05.830 --> 00:19:08.390
<v Speaker 0>I need a balance cycle, and my facility

00:19:08.390 --> 00:19:09.509
<v Speaker 0>shouldn't be

00:19:10.710 --> 00:19:12.230
<v Speaker 0>where are you? Let's see.

00:19:13.590 --> 00:19:15.190
<v Speaker 1>Oh, I lost connection.

00:19:15.590 --> 00:19:16.789
<v Speaker 1>Wait. Reconnect.

00:19:16.950 --> 00:19:19.030
<v Speaker 1>Let's see. Hopefully, we're okay.

00:19:20.785 --> 00:19:22.945
<v Speaker 0>Okay. So let's do balance cycle.

00:19:23.425 --> 00:19:24.785
<v Speaker 0>We'll do monthly.

00:19:26.305 --> 00:19:28.225
<v Speaker 0>I think that should be. I'm not sure

00:19:28.225 --> 00:19:29.025
<v Speaker 0>why that's.

00:19:31.665 --> 00:19:33.825
<v Speaker 0>What am I missing now? So I'm gonna

00:19:33.825 --> 00:19:34.625
<v Speaker 0>type facility.

00:19:38.210 --> 00:19:39.889
<v Speaker 0>Host name is missing. Okay.

00:19:40.290 --> 00:19:42.930
<v Speaker 1>Yep. We need a host name. Yes. Alright.

00:19:42.930 --> 00:19:44.929
<v Speaker 0>Just admin. Admin. Yep.

00:19:45.490 --> 00:19:48.130
<v Speaker 0>Oh, the red squiggles are gone. That that's

00:19:48.130 --> 00:19:48.690
<v Speaker 0>a good thing.

00:19:51.395 --> 00:19:51.955
<v Speaker 0>Cool.

00:19:52.755 --> 00:19:55.154
<v Speaker 0>So the project ID is currently

00:19:55.875 --> 00:19:56.755
<v Speaker 0>lacking,

00:19:56.755 --> 00:19:58.434
<v Speaker 0>plus we also need to

00:19:58.675 --> 00:19:59.715
<v Speaker 0>tell this

00:20:00.995 --> 00:20:02.835
<v Speaker 0>oh, we need to configure the organization. So

00:20:02.835 --> 00:20:04.595
<v Speaker 0>the two setup pieces that we have to

00:20:04.595 --> 00:20:04.755
<v Speaker 0>do.

00:20:06.490 --> 00:20:07.770
<v Speaker 0>So first,

00:20:07.770 --> 00:20:10.570
<v Speaker 0>let me config set.

00:20:11.290 --> 00:20:13.049
<v Speaker 0>Let's do project

00:20:14.090 --> 00:20:14.809
<v Speaker 0>ID.

00:20:17.610 --> 00:20:19.770
<v Speaker 0>And I can grab this value, which is

00:20:19.770 --> 00:20:20.490
<v Speaker 0>not a secret.

00:20:22.784 --> 00:20:23.664
<v Speaker 0>So

00:20:27.825 --> 00:20:30.784
<v Speaker 1>you pre created a a packet project. Right?

00:20:30.865 --> 00:20:31.505
<v Speaker 1>It's a

00:20:32.784 --> 00:20:33.184
<v Speaker 1>Correct.

00:20:33.590 --> 00:20:36.630
<v Speaker 0>Yep. I don't believe I need the organization

00:20:36.630 --> 00:20:38.950
<v Speaker 0>ID, but I will add it just in

00:20:38.950 --> 00:20:39.590
<v Speaker 0>case.

00:20:42.310 --> 00:20:45.110
<v Speaker 0>And we need one secret

00:20:45.910 --> 00:20:47.510
<v Speaker 0>as our off

00:20:48.524 --> 00:20:50.844
<v Speaker 0>And that just gets namespace as

00:20:51.725 --> 00:20:52.924
<v Speaker 0>accurate, I believe.

00:20:54.365 --> 00:20:56.764
<v Speaker 1>And it will get it from your secrets

00:20:56.764 --> 00:20:58.044
<v Speaker 1>file automatically.

00:20:58.605 --> 00:20:59.485
<v Speaker 0>Or how does this work?

00:21:00.390 --> 00:21:02.870
<v Speaker 0>I'm gonna paste the end while no one

00:21:02.870 --> 00:21:03.909
<v Speaker 0>is looking at me.

00:21:05.670 --> 00:21:07.990
<v Speaker 0>So if I just hit return here,

00:21:08.470 --> 00:21:09.750
<v Speaker 0>pop over here,

00:21:10.630 --> 00:21:11.670
<v Speaker 0>and same file.

00:21:14.555 --> 00:21:17.835
<v Speaker 0>I'm

00:21:17.835 --> 00:21:19.675
<v Speaker 0>still getting used to this Mac nonsense.

00:21:27.900 --> 00:21:30.220
<v Speaker 0>Okay. There is my API token. Oh, if

00:21:30.220 --> 00:21:32.140
<v Speaker 0>I have opened, it's gonna open it. It's

00:21:32.140 --> 00:21:33.179
<v Speaker 0>that's good.

00:21:34.380 --> 00:21:35.100
<v Speaker 0>Hey.

00:21:35.900 --> 00:21:37.500
<v Speaker 0>And clutter clutter.

00:21:37.500 --> 00:21:38.300
<v Speaker 0>And you okay.

00:21:41.585 --> 00:21:43.505
<v Speaker 0>And then because this is a secret, we

00:21:43.505 --> 00:21:45.825
<v Speaker 0>could write a password, encrypts it,

00:21:46.625 --> 00:21:49.265
<v Speaker 0>and if we we don't need to see

00:21:49.265 --> 00:21:52.065
<v Speaker 0>view. If we open our production configuration, here's

00:21:52.065 --> 00:21:52.625
<v Speaker 0>what we have.

00:21:53.549 --> 00:21:54.590
<v Speaker 0>So Uh-huh.

00:21:54.909 --> 00:21:57.549
<v Speaker 0>We have two project specific

00:21:58.590 --> 00:22:01.789
<v Speaker 0>configuration options, project ID and organization ID.

00:22:02.190 --> 00:22:04.990
<v Speaker 0>And we have a packet provider configuration where

00:22:04.990 --> 00:22:07.070
<v Speaker 0>we're off token, which is nicely encrypted with

00:22:07.070 --> 00:22:08.509
<v Speaker 0>my super secret password.

00:22:09.605 --> 00:22:10.244
<v Speaker 0>Perfect.

00:22:10.804 --> 00:22:12.004
<v Speaker 0>I hope. So

00:22:14.164 --> 00:22:16.565
<v Speaker 0>do I need to provide organization?

00:22:16.565 --> 00:22:18.484
<v Speaker 0>It does not appear like I do.

00:22:19.845 --> 00:22:22.325
<v Speaker 0>Also, the port ID is enough with my

00:22:22.325 --> 00:22:23.125
<v Speaker 0>AI token.

00:22:24.139 --> 00:22:25.179
<v Speaker 0>I think

00:22:25.820 --> 00:22:27.980
<v Speaker 0>we're almost in a position to test this.

00:22:27.980 --> 00:22:29.659
<v Speaker 0>But first, we need to

00:22:30.779 --> 00:22:31.899
<v Speaker 0>add our config.

00:22:37.955 --> 00:22:38.995
<v Speaker 0>Here.

00:22:39.715 --> 00:22:42.355
<v Speaker 0>And then replace our credit ID here.

00:22:43.075 --> 00:22:44.995
<v Speaker 0>This is going to be require,

00:22:46.755 --> 00:22:48.674
<v Speaker 0>and we told it reject

00:22:48.835 --> 00:22:49.395
<v Speaker 0>ID.

00:22:53.500 --> 00:22:55.179
<v Speaker 0>And the moment of truth.

00:22:56.380 --> 00:22:57.020
<v Speaker 1>Let's see.

00:23:10.015 --> 00:23:12.414
<v Speaker 1>And now you forgot the pass phrase. Right?

00:23:12.895 --> 00:23:14.895
<v Speaker 0>I have not forgot the password. There we

00:23:14.895 --> 00:23:16.335
<v Speaker 0>go. Okay. Alright.

00:23:17.775 --> 00:23:20.735
<v Speaker 0>Well, we haven't really allocated any user data

00:23:20.735 --> 00:23:23.294
<v Speaker 0>here. I'm assuming we actually want this machine

00:23:23.029 --> 00:23:24.549
<v Speaker 0>to do something. Right?

00:23:25.429 --> 00:23:28.229
<v Speaker 1>Yep. No? But well so

00:23:30.070 --> 00:23:31.349
<v Speaker 1>do you want to

00:23:31.909 --> 00:23:34.710
<v Speaker 1>do all this stuff through a user data

00:23:34.710 --> 00:23:36.389
<v Speaker 1>file, or do we just want to SSH

00:23:36.389 --> 00:23:37.429
<v Speaker 1>into it and

00:23:37.865 --> 00:23:39.545
<v Speaker 1>go through the process manually?

00:23:40.105 --> 00:23:40.905
<v Speaker 1>I

00:23:40.985 --> 00:23:42.505
<v Speaker 1>think that it's better to do it manually

00:23:42.505 --> 00:23:44.425
<v Speaker 1>because we'll probably make some mistakes. And if

00:23:44.425 --> 00:23:46.265
<v Speaker 1>we have to wait every time to reprovision

00:23:46.265 --> 00:23:48.265
<v Speaker 1>a machine, if we change the user data,

00:23:49.865 --> 00:23:50.985
<v Speaker 1>it might be a bit

00:23:51.430 --> 00:23:53.510
<v Speaker 1>slow. So we we we we can act

00:23:53.510 --> 00:23:54.230
<v Speaker 1>as if

00:23:55.910 --> 00:23:57.670
<v Speaker 1>as if we're doing this all the correct

00:23:57.670 --> 00:23:59.350
<v Speaker 1>way, but we'll just SSH into the box

00:23:59.350 --> 00:24:00.710
<v Speaker 1>and do stuff there, I think.

00:24:01.270 --> 00:24:03.590
<v Speaker 0>Okay. So as we SSH and do stuff,

00:24:03.590 --> 00:24:06.054
<v Speaker 0>I will just update something locally in our

00:24:06.054 --> 00:24:08.134
<v Speaker 0>repository, and then when I publish this online,

00:24:08.134 --> 00:24:10.375
<v Speaker 0>it will be fine. Yep. Yep. So saying

00:24:10.375 --> 00:24:12.774
<v Speaker 1>that my balance cycle must be one of

00:24:12.855 --> 00:24:13.734
<v Speaker 0>error rate.

00:24:15.414 --> 00:24:17.095
<v Speaker 0>If I changed it to error rate.

00:24:18.470 --> 00:24:21.030
<v Speaker 1>Yeah. I actually do also have a reference

00:24:21.030 --> 00:24:23.510
<v Speaker 1>repository I can share afterwards, which sets this

00:24:23.510 --> 00:24:25.510
<v Speaker 1>up on the flat core Linux with some

00:24:25.510 --> 00:24:26.470
<v Speaker 1>user data.

00:24:27.190 --> 00:24:29.830
<v Speaker 1>So if people want to run a demo

00:24:29.830 --> 00:24:32.150
<v Speaker 1>from scratch at home, then it should it

00:24:32.150 --> 00:24:32.630
<v Speaker 1>should work.

00:24:34.235 --> 00:24:35.914
<v Speaker 0>Okay. I will try this one more time

00:24:35.914 --> 00:24:38.394
<v Speaker 0>and assume that we're just syncing my changes

00:24:38.394 --> 00:24:40.475
<v Speaker 0>remotely because we are using a remote dot

00:24:40.475 --> 00:24:41.274
<v Speaker 0>payment.

00:24:42.554 --> 00:24:44.554
<v Speaker 0>Now that that's our label, it works. That

00:24:44.554 --> 00:24:46.315
<v Speaker 0>looks much better. Okay. So we have a

00:24:46.315 --> 00:24:48.280
<v Speaker 0>machine spinning up. Yep.

00:24:49.640 --> 00:24:51.080
<v Speaker 0>So we have not

00:24:52.120 --> 00:24:54.920
<v Speaker 0>tweaked the networking configuration of this machine. So

00:24:54.920 --> 00:24:57.160
<v Speaker 0>that means that by default, we are going

00:24:57.160 --> 00:24:59.000
<v Speaker 0>to get a machine that has

00:24:59.240 --> 00:25:01.160
<v Speaker 0>two I p v four addresses and two

00:25:01.160 --> 00:25:02.840
<v Speaker 0>I p v six addresses, I believe.

00:25:03.674 --> 00:25:05.674
<v Speaker 1>One I p v six address, actually. One.

00:25:05.674 --> 00:25:08.235
<v Speaker 1>Yeah. One. Yeah. Because so we will get

00:25:08.235 --> 00:25:09.515
<v Speaker 1>a private I p v four and a

00:25:09.515 --> 00:25:10.714
<v Speaker 1>public I p v four,

00:25:11.355 --> 00:25:12.955
<v Speaker 1>and we will only get one I p

00:25:12.955 --> 00:25:14.875
<v Speaker 1>v six because there is no such thing

00:25:14.875 --> 00:25:16.154
<v Speaker 1>as well, there is such a thing as

00:25:16.154 --> 00:25:17.995
<v Speaker 1>private I p v six, but it's highly

00:25:17.995 --> 00:25:18.875
<v Speaker 1>unusual to use.

00:25:19.570 --> 00:25:20.690
<v Speaker 1>So and

00:25:21.410 --> 00:25:22.850
<v Speaker 1>one thing that you'll also see in the

00:25:22.850 --> 00:25:24.690
<v Speaker 1>packet project is that

00:25:25.810 --> 00:25:27.810
<v Speaker 1>not only did we get an IPv6 address

00:25:27.810 --> 00:25:28.850
<v Speaker 1>for the box,

00:25:29.090 --> 00:25:30.530
<v Speaker 1>in the project itself,

00:25:30.610 --> 00:25:31.330
<v Speaker 1>under Networks

00:25:34.605 --> 00:25:36.044
<v Speaker 1>Yes, under IPs,

00:25:36.044 --> 00:25:37.644
<v Speaker 1>we'll see that we now have a public

00:25:37.644 --> 00:25:39.084
<v Speaker 1>IPv6 block

00:25:39.245 --> 00:25:40.125
<v Speaker 1>allocated

00:25:40.125 --> 00:25:41.244
<v Speaker 1>to our project.

00:25:42.125 --> 00:25:43.565
<v Speaker 1>And this has

00:25:43.884 --> 00:25:45.404
<v Speaker 1>trillions

00:25:45.404 --> 00:25:47.309
<v Speaker 1>of IP addresses. So it's two to the

00:25:47.309 --> 00:25:48.749
<v Speaker 1>power 72

00:25:48.830 --> 00:25:50.989
<v Speaker 1>IP addresses that we got assigned.

00:25:52.190 --> 00:25:52.830
<v Speaker 1>And

00:25:53.230 --> 00:25:55.070
<v Speaker 1>we will use this later because we'll use

00:25:55.070 --> 00:25:57.549
<v Speaker 1>this block also to allocate IP addresses for

00:25:57.549 --> 00:25:59.549
<v Speaker 1>our pods. So not only for the nodes

00:25:59.549 --> 00:26:01.565
<v Speaker 1>that we create on packets, which will which

00:26:01.565 --> 00:26:02.524
<v Speaker 1>packet will

00:26:02.845 --> 00:26:04.125
<v Speaker 1>do automatically,

00:26:05.405 --> 00:26:07.725
<v Speaker 1>we'll also do it for the pods.

00:26:07.965 --> 00:26:08.445
<v Speaker 1>So

00:26:10.684 --> 00:26:13.164
<v Speaker 1>can we have data sources in

00:26:13.405 --> 00:26:13.965
<v Speaker 1>Pulumi?

00:26:14.290 --> 00:26:15.490
<v Speaker 1>I want to get this I p v

00:26:15.490 --> 00:26:17.410
<v Speaker 1>six block into our config because we're gonna

00:26:17.410 --> 00:26:18.130
<v Speaker 1>need it.

00:26:19.410 --> 00:26:21.570
<v Speaker 1>This is something we can do. Yes. We

00:26:21.570 --> 00:26:22.850
<v Speaker 0>can do that. We have we we have

00:26:22.850 --> 00:26:23.490
<v Speaker 0>access

00:26:23.650 --> 00:26:24.289
<v Speaker 0>to

00:26:24.930 --> 00:26:26.530
<v Speaker 0>yeah. We can use data sources. It's the

00:26:26.530 --> 00:26:28.690
<v Speaker 0>same way Terraform which is in. Mhmm. Definitely.

00:26:28.690 --> 00:26:28.930
<v Speaker 1>Yep.

00:26:29.625 --> 00:26:31.865
<v Speaker 1>So we can either copy paste this block

00:26:31.865 --> 00:26:34.025
<v Speaker 1>and or we can use a data source

00:26:34.025 --> 00:26:36.025
<v Speaker 1>to retrieve it, and then whatever

00:26:37.465 --> 00:26:38.505
<v Speaker 1>you think is cooler.

00:26:41.960 --> 00:26:44.920
<v Speaker 0>Okay. Let's start as a conflict right now,

00:26:44.920 --> 00:26:46.600
<v Speaker 0>and we'll see how we're doing for time.

00:26:46.600 --> 00:26:48.440
<v Speaker 0>And I can always, you know, clean this

00:26:48.440 --> 00:26:50.440
<v Speaker 0>up later. I'm I wanna let's we'll focus

00:26:50.440 --> 00:26:53.640
<v Speaker 0>on the Kubernetes IPv6 steps. Yeah. Exactly.

00:26:54.200 --> 00:26:55.160
<v Speaker 0>So

00:26:55.480 --> 00:26:56.760
<v Speaker 0>let's just split this term.

00:26:57.375 --> 00:26:58.255
<v Speaker 0>And

00:26:59.455 --> 00:27:00.815
<v Speaker 0>configs

00:27:00.815 --> 00:27:02.495
<v Speaker 0>the IPv6.

00:27:03.535 --> 00:27:03.775
<v Speaker 0>Exactly.

00:27:13.110 --> 00:27:15.669
<v Speaker 0>K. So that's just gonna take

00:27:16.150 --> 00:27:17.590
<v Speaker 0>I've been to eighteen o four as one

00:27:17.590 --> 00:27:19.350
<v Speaker 0>of the fast provision boxes. I would expect

00:27:19.350 --> 00:27:21.590
<v Speaker 0>this to take maybe around two minutes, maybe

00:27:21.590 --> 00:27:22.950
<v Speaker 0>three work case.

00:27:23.110 --> 00:27:24.790
<v Speaker 0>We look at the progress. We can actually

00:27:24.790 --> 00:27:26.790
<v Speaker 0>see it's just rebooted, and it's gonna put

00:27:26.790 --> 00:27:28.390
<v Speaker 0>on hold. So it's actually always done.

00:27:29.085 --> 00:27:31.164
<v Speaker 0>Yep. Cool. I I Okay. The other thing

00:27:31.164 --> 00:27:32.445
<v Speaker 0>I did do was

00:27:32.924 --> 00:27:34.365
<v Speaker 0>enable BGP

00:27:34.365 --> 00:27:37.164
<v Speaker 0>on this project. So we do have BGP

00:27:37.164 --> 00:27:37.884
<v Speaker 0>set up.

00:27:38.365 --> 00:27:38.924
<v Speaker 1>Yep.

00:27:39.404 --> 00:27:41.965
<v Speaker 1>So there's also so just for the record,

00:27:42.340 --> 00:27:43.380
<v Speaker 1>we're going to use

00:27:43.700 --> 00:27:46.900
<v Speaker 1>Calico, which is a CNI provider that integrates

00:27:46.900 --> 00:27:47.460
<v Speaker 1>with

00:27:47.860 --> 00:27:48.740
<v Speaker 1>BGP.

00:27:49.380 --> 00:27:52.020
<v Speaker 1>And for the listener, BGP is a protocol

00:27:52.020 --> 00:27:53.620
<v Speaker 1>you can use to talk to your router

00:27:53.620 --> 00:27:55.620
<v Speaker 1>in your data center to announce

00:27:55.940 --> 00:27:56.500
<v Speaker 1>routes.

00:27:57.145 --> 00:27:58.664
<v Speaker 1>And what we will do is,

00:27:58.905 --> 00:28:00.345
<v Speaker 1>and we'll also see this update in this

00:28:00.345 --> 00:28:03.465
<v Speaker 1>window later, is we'll announce where pods are

00:28:03.465 --> 00:28:05.305
<v Speaker 1>in our data center. So, we can tell

00:28:05.305 --> 00:28:05.865
<v Speaker 1>the

00:28:06.184 --> 00:28:08.184
<v Speaker 1>routers and packets this pod is running on

00:28:08.184 --> 00:28:10.105
<v Speaker 1>that node. So, if you get a request

00:28:10.105 --> 00:28:12.380
<v Speaker 1>to this pod, send it to this node

00:28:12.380 --> 00:28:13.259
<v Speaker 1>in the cluster.

00:28:13.740 --> 00:28:15.900
<v Speaker 1>And this way, all the pods can find

00:28:15.900 --> 00:28:17.259
<v Speaker 1>each other. The pod will

00:28:17.500 --> 00:28:20.299
<v Speaker 1>send the requests out to another pod. It

00:28:20.299 --> 00:28:21.980
<v Speaker 1>will go through the packet router and then

00:28:21.980 --> 00:28:23.419
<v Speaker 1>to the node that has it.

00:28:25.020 --> 00:28:26.460
<v Speaker 1>And we'll use BGP for that.

00:28:27.525 --> 00:28:28.805
<v Speaker 1>One thing that we'll have to set up

00:28:28.805 --> 00:28:30.645
<v Speaker 1>also in is

00:28:31.685 --> 00:28:35.205
<v Speaker 1>we will have to tell packets that this

00:28:35.365 --> 00:28:37.685
<v Speaker 1>server that we created is going to talk

00:28:37.685 --> 00:28:38.804
<v Speaker 1>to the router.

00:28:39.365 --> 00:28:39.925
<v Speaker 1>And

00:28:40.405 --> 00:28:41.285
<v Speaker 1>in

00:28:42.570 --> 00:28:46.169
<v Speaker 1>TerraForm, this resource is called let me peek

00:28:47.770 --> 00:28:49.210
<v Speaker 1>Packet BGP session.

00:28:54.135 --> 00:28:56.055
<v Speaker 1>So we'll have to create a packet BGP

00:28:56.055 --> 00:28:57.335
<v Speaker 1>session which

00:28:57.495 --> 00:28:58.375
<v Speaker 1>associates

00:28:58.375 --> 00:29:00.695
<v Speaker 1>the device with the packet router.

00:29:01.655 --> 00:29:04.455
<v Speaker 0>K. So Yep. BGP session

00:29:04.535 --> 00:29:05.655
<v Speaker 0>for new

00:29:05.655 --> 00:29:06.535
<v Speaker 0>packet

00:29:06.535 --> 00:29:08.800
<v Speaker 0>BGP session. Exactly.

00:29:08.800 --> 00:29:11.120
<v Speaker 0>And this is our admin this is our

00:29:11.120 --> 00:29:14.160
<v Speaker 0>publisher for publishing works. Is that Yep. Right.

00:29:14.160 --> 00:29:14.559
<v Speaker 0>Okay.

00:29:15.600 --> 00:29:16.320
<v Speaker 0>So

00:29:16.960 --> 00:29:18.320
<v Speaker 0>what do we need here?

00:29:18.720 --> 00:29:21.680
<v Speaker 1>I think a address family and a device

00:29:21.680 --> 00:29:23.200
<v Speaker 1>ID are the two things that we'll need.

00:29:23.295 --> 00:29:24.575
<v Speaker 1>So this will be

00:29:27.135 --> 00:29:28.575
<v Speaker 1>IPV6,

00:29:30.895 --> 00:29:32.815
<v Speaker 1>and then the device ID is the server

00:29:32.815 --> 00:29:33.535
<v Speaker 1>admin.

00:29:34.495 --> 00:29:34.815
<v Speaker 1>Yep.

00:29:37.970 --> 00:29:38.929
<v Speaker 0>I would be

00:29:39.730 --> 00:29:40.529
<v Speaker 0>Exactly.

00:29:42.530 --> 00:29:43.330
<v Speaker 0>Send Do we also

00:29:44.370 --> 00:29:45.970
<v Speaker 1>we already want to create a

00:29:47.409 --> 00:29:49.655
<v Speaker 1>a worker device as well? We can just

00:29:49.655 --> 00:29:51.655
<v Speaker 1>copy paste this code and bring it and

00:29:51.655 --> 00:29:53.414
<v Speaker 1>set host name to worker.

00:29:54.775 --> 00:29:55.494
<v Speaker 0>So

00:29:56.135 --> 00:29:58.455
<v Speaker 0>there we are. Worker.

00:29:59.414 --> 00:30:00.375
<v Speaker 0>Worker

00:30:00.375 --> 00:30:00.775
<v Speaker 0>one.

00:30:02.940 --> 00:30:04.299
<v Speaker 0>Worker one.

00:30:04.700 --> 00:30:05.980
<v Speaker 1>Mhmm. Is that it?

00:30:06.380 --> 00:30:08.860
<v Speaker 1>Yep. And then also create a BGP session

00:30:08.860 --> 00:30:10.700
<v Speaker 1>for it because we also need it.

00:30:11.820 --> 00:30:12.460
<v Speaker 0>Okay.

00:30:12.860 --> 00:30:13.980
<v Speaker 0>So do we

00:30:16.299 --> 00:30:16.780
<v Speaker 0>right.

00:30:20.025 --> 00:30:20.505
<v Speaker 0>One

00:30:21.065 --> 00:30:22.425
<v Speaker 0>I I I always had too much time

00:30:22.425 --> 00:30:23.785
<v Speaker 0>on the political stuff. But because we need

00:30:23.785 --> 00:30:24.985
<v Speaker 0>to do that repeatedly

00:30:25.385 --> 00:30:27.305
<v Speaker 0>Yep. What what we can do is if

00:30:27.305 --> 00:30:28.505
<v Speaker 0>we grab this,

00:30:30.985 --> 00:30:32.185
<v Speaker 0>make this a function.

00:30:39.040 --> 00:30:42.399
<v Speaker 0>Yeah. Which returns a new server.

00:30:45.760 --> 00:30:48.320
<v Speaker 0>And then here, we see create server,

00:30:49.575 --> 00:30:51.094
<v Speaker 0>and we'll inject

00:30:51.335 --> 00:30:52.054
<v Speaker 0>our

00:30:53.975 --> 00:30:54.695
<v Speaker 0>name

00:30:56.534 --> 00:30:57.894
<v Speaker 0>with string.

00:31:01.654 --> 00:31:02.695
<v Speaker 0>Why are you to print?

00:31:03.770 --> 00:31:06.809
<v Speaker 0>Oops. Sorry. What's the multiple string types?

00:31:08.010 --> 00:31:09.610
<v Speaker 0>Host name, which I guess we can just

00:31:09.610 --> 00:31:11.210
<v Speaker 0>make the name of the server.

00:31:11.450 --> 00:31:13.289
<v Speaker 1>Mhmm. That makes sense.

00:31:14.409 --> 00:31:15.370
<v Speaker 0>That's

00:31:15.370 --> 00:31:16.090
<v Speaker 0>it. Right?

00:31:16.409 --> 00:31:16.890
<v Speaker 0>Yep.

00:31:18.605 --> 00:31:20.845
<v Speaker 0>From here, I can I want to be

00:31:20.845 --> 00:31:22.445
<v Speaker 0>able to reuse that resource? I'm just gonna

00:31:22.445 --> 00:31:24.445
<v Speaker 0>pull the admin and not change that. Okay?

00:31:24.605 --> 00:31:25.404
<v Speaker 1>Mhmm.

00:31:25.804 --> 00:31:26.924
<v Speaker 0>We will then

00:31:29.804 --> 00:31:31.565
<v Speaker 0>I never remember. I lost the person working

00:31:31.565 --> 00:31:32.044
<v Speaker 0>on that.

00:31:32.659 --> 00:31:33.859
<v Speaker 0>Anyway, server

00:31:33.940 --> 00:31:35.460
<v Speaker 0>worker one,

00:31:36.020 --> 00:31:36.979
<v Speaker 0>server

00:31:36.980 --> 00:31:38.499
<v Speaker 0>worker two.

00:31:41.620 --> 00:31:43.779
<v Speaker 0>And are the BGP sessions the same for

00:31:43.779 --> 00:31:44.340
<v Speaker 0>all of these?

00:31:45.185 --> 00:31:47.505
<v Speaker 1>Yeah. So there will always be address family

00:31:47.505 --> 00:31:49.585
<v Speaker 1>I p v six and then the device

00:31:49.585 --> 00:31:51.505
<v Speaker 1>ID. Yeah. And this

00:31:51.985 --> 00:31:54.865
<v Speaker 1>is just so that the packet routers know

00:31:54.865 --> 00:31:57.105
<v Speaker 1>that these servers might announce routes to the

00:31:57.105 --> 00:31:59.505
<v Speaker 1>router. Otherwise, it will reject

00:31:59.809 --> 00:32:01.889
<v Speaker 1>will reject all the BGP traffic.

00:32:02.530 --> 00:32:03.090
<v Speaker 1>So

00:32:05.250 --> 00:32:06.049
<v Speaker 0>Perfect.

00:32:06.130 --> 00:32:07.009
<v Speaker 0>You

00:32:07.809 --> 00:32:09.169
<v Speaker 0>will have this return,

00:32:09.650 --> 00:32:11.249
<v Speaker 0>a JavaScript object,

00:32:11.490 --> 00:32:13.650
<v Speaker 0>which now has a BGP session.

00:32:14.515 --> 00:32:15.235
<v Speaker 1>Yep.

00:32:15.554 --> 00:32:17.315
<v Speaker 1>We'll give it a

00:32:18.355 --> 00:32:19.315
<v Speaker 1>name and then

00:32:20.434 --> 00:32:23.315
<v Speaker 0>It's like enter an internal reference.

00:32:25.794 --> 00:32:27.475
<v Speaker 1>Put that in a variable. Yes.

00:32:29.700 --> 00:32:30.900
<v Speaker 0>If I would smart, I would have called

00:32:30.900 --> 00:32:31.779
<v Speaker 0>it device.

00:32:32.740 --> 00:32:34.820
<v Speaker 1>Oh, yeah. Think I'm gonna use this fancy

00:32:34.820 --> 00:32:36.179
<v Speaker 1>JavaScript syntax.

00:32:36.419 --> 00:32:37.779
<v Speaker 0>Yeah. There we go.

00:32:38.820 --> 00:32:40.900
<v Speaker 0>We were refactoring our code. So now we

00:32:40.900 --> 00:32:42.500
<v Speaker 0>have a function that creates a server and

00:32:42.500 --> 00:32:43.765
<v Speaker 0>the BGP session,

00:32:43.765 --> 00:32:45.685
<v Speaker 0>and then we create the three devices and

00:32:45.685 --> 00:32:48.644
<v Speaker 0>the three BGP sessions. Yep. Sounds good.

00:32:49.365 --> 00:32:51.605
<v Speaker 1>So let's just apply that, and then we

00:32:51.605 --> 00:32:54.405
<v Speaker 1>can already start on the admin node and

00:32:54.405 --> 00:32:55.205
<v Speaker 1>configure some stuff.

00:32:56.090 --> 00:32:58.809
<v Speaker 0>Perfect. So if I put pulling me up.

00:32:59.610 --> 00:33:00.649
<v Speaker 0>Password.

00:33:03.930 --> 00:33:04.649
<v Speaker 0>K.

00:33:07.370 --> 00:33:09.770
<v Speaker 0>Five to create I'm hoping that's when I

00:33:09.770 --> 00:33:10.810
<v Speaker 0>realized it's wrong.

00:33:13.865 --> 00:33:15.705
<v Speaker 1>Yeah. Well, you would expect it to

00:33:18.425 --> 00:33:20.825
<v Speaker 1>Well, it's only it's not creating the the

00:33:20.825 --> 00:33:21.544
<v Speaker 1>device.

00:33:21.625 --> 00:33:24.505
<v Speaker 1>Right? That's good. Yeah. It's only creating the

00:33:24.505 --> 00:33:26.425
<v Speaker 0>speech to speech session. Okay. Good. Perfect. Oh,

00:33:26.425 --> 00:33:27.145
<v Speaker 0>yeah. Two unchanged.

00:33:27.700 --> 00:33:28.740
<v Speaker 0>Yep. Alright.

00:33:29.540 --> 00:33:30.740
<v Speaker 0>So let's

00:33:32.260 --> 00:33:33.940
<v Speaker 0>jump on to our admin.

00:33:39.775 --> 00:33:42.254
<v Speaker 0>I never thought of this part.

00:33:42.815 --> 00:33:44.815
<v Speaker 0>I would do this for iTerm. I don't

00:33:44.815 --> 00:33:46.415
<v Speaker 0>think my key is gonna be passed through,

00:33:46.415 --> 00:33:47.054
<v Speaker 0>but let's check.

00:33:53.590 --> 00:33:54.470
<v Speaker 1>Uh-huh.

00:33:58.789 --> 00:33:59.590
<v Speaker 0>Right. Three.

00:33:59.990 --> 00:34:02.710
<v Speaker 0>Put your font. Alright. That's the page. Yeah.

00:34:04.549 --> 00:34:06.710
<v Speaker 0>Now I have access to my YubiKey.

00:34:07.350 --> 00:34:10.614
<v Speaker 0>We're in. We're in. K. So

00:34:10.934 --> 00:34:13.574
<v Speaker 1>we're gonna use Kube ADM to

00:34:15.494 --> 00:34:17.655
<v Speaker 1>bootstrap a Kubernetes cluster. Have you used Kube

00:34:17.655 --> 00:34:18.534
<v Speaker 1>ADM before?

00:34:19.655 --> 00:34:21.415
<v Speaker 0>Not in three or four years.

00:34:22.130 --> 00:34:22.850
<v Speaker 0>Okay.

00:34:23.810 --> 00:34:24.450
<v Speaker 0>So

00:34:25.330 --> 00:34:27.650
<v Speaker 1>it is not too complicated.

00:34:28.530 --> 00:34:31.170
<v Speaker 1>Usually, it's just you type kubeadm in it,

00:34:31.170 --> 00:34:33.010
<v Speaker 1>that's all you have to do. But of

00:34:33.010 --> 00:34:35.090
<v Speaker 1>course, because we're running IPv6,

00:34:35.090 --> 00:34:38.595
<v Speaker 1>we need to tweak some configures some configurations.

00:34:41.155 --> 00:34:43.395
<v Speaker 1>So we just need to install kubeadm

00:34:43.395 --> 00:34:44.835
<v Speaker 1>and the

00:34:44.915 --> 00:34:46.995
<v Speaker 1>kubelet so that we can

00:34:48.515 --> 00:34:49.315
<v Speaker 1>bootstrap things.

00:34:55.400 --> 00:34:56.600
<v Speaker 0>Oops. I'm working.

00:34:58.440 --> 00:34:59.640
<v Speaker 0>So then

00:35:00.760 --> 00:35:04.040
<v Speaker 0>so it seems pseudo, but we're running a

00:35:04.040 --> 00:35:04.760
<v Speaker 0>group.

00:35:05.960 --> 00:35:07.640
<v Speaker 0>Are there any more pseudos here?

00:35:08.925 --> 00:35:11.245
<v Speaker 1>Yep. There's still a pseudo apt key.

00:35:12.045 --> 00:35:13.245
<v Speaker 1>Yep. Perfect.

00:35:15.325 --> 00:35:17.805
<v Speaker 1>Yeah. And this is obvious obviously something we

00:35:17.805 --> 00:35:19.805
<v Speaker 1>would add to our user data usually because

00:35:19.805 --> 00:35:21.245
<v Speaker 1>we'll have to run it on every box.

00:35:25.990 --> 00:35:28.069
<v Speaker 1>I'm going to I'm

00:35:28.069 --> 00:35:29.670
<v Speaker 1>going to cheat a little bit and give

00:35:29.670 --> 00:35:31.510
<v Speaker 1>you a kubeadm config

00:35:31.670 --> 00:35:33.510
<v Speaker 1>instead of us reconstructing

00:35:33.510 --> 00:35:34.550
<v Speaker 1>it from scratch.

00:35:35.190 --> 00:35:36.869
<v Speaker 0>If it's on your repository,

00:35:36.869 --> 00:35:38.710
<v Speaker 0>what I could always browse to it?

00:35:39.405 --> 00:35:41.565
<v Speaker 1>Yep. So it is in my repository, but

00:35:41.565 --> 00:35:43.885
<v Speaker 1>it's templated. But that and we'll have to

00:35:43.885 --> 00:35:45.885
<v Speaker 1>fill in your IP addresses.

00:35:49.005 --> 00:35:50.845
<v Speaker 0>I should have just used the Terraform, but

00:35:50.845 --> 00:35:53.339
<v Speaker 0>we'll we'll keep it. No. No. It's fine.

00:35:53.339 --> 00:35:56.060
<v Speaker 1>I I have plenty of time. It's okay.

00:35:57.180 --> 00:35:59.500
<v Speaker 1>I will send you a link.

00:35:59.740 --> 00:36:01.740
<v Speaker 1>Let's shall I share it through the

00:36:02.460 --> 00:36:03.980
<v Speaker 0>Yeah. This is the private chat.

00:36:06.065 --> 00:36:07.505
<v Speaker 1>Put I've put it in a comment in

00:36:07.505 --> 00:36:08.945
<v Speaker 1>the index dot t s.

00:36:11.025 --> 00:36:13.505
<v Speaker 0>Ah, I'd save. K.

00:36:14.865 --> 00:36:16.145
<v Speaker 1>So you'll

00:36:16.224 --> 00:36:17.505
<v Speaker 1>see a

00:36:20.170 --> 00:36:22.650
<v Speaker 1>a kube a d m slash config dot

00:36:22.650 --> 00:36:23.530
<v Speaker 1>yaml

00:36:27.370 --> 00:36:27.930
<v Speaker 1>Yep.

00:36:28.410 --> 00:36:30.970
<v Speaker 1>Which contains everything we need. So

00:36:31.665 --> 00:36:33.585
<v Speaker 1>if you just copy paste that into a

00:36:33.585 --> 00:36:35.265
<v Speaker 1>file, and then we can fill in the

00:36:35.265 --> 00:36:36.065
<v Speaker 1>blanks.

00:36:37.825 --> 00:36:40.545
<v Speaker 0>Okay. So what is this call it?

00:36:42.385 --> 00:36:43.185
<v Speaker 0>No.

00:36:43.585 --> 00:36:46.145
<v Speaker 0>I'll keep it at the end of config.

00:36:48.309 --> 00:36:49.750
<v Speaker 0>So in fact, highlight in there, I think.

00:36:49.750 --> 00:36:51.830
<v Speaker 0>No. It's YAML, obviously. YAML. Yep.

00:36:52.309 --> 00:36:54.230
<v Speaker 0>So Something different is that isn't YAML or

00:36:54.230 --> 00:36:56.550
<v Speaker 0>is that sync? Yeah. So So this is

00:36:56.550 --> 00:36:58.390
<v Speaker 1>an Ignition config, and we only need the

00:36:58.390 --> 00:36:59.990
<v Speaker 1>cube ADM part of this. So we can

00:36:59.990 --> 00:37:01.349
<v Speaker 1>remove a whole bunch of things. So this

00:37:01.349 --> 00:37:03.555
<v Speaker 1>is basically a the user data of a

00:37:04.515 --> 00:37:06.675
<v Speaker 1>of my flat core Linux device. So if

00:37:06.835 --> 00:37:07.395
<v Speaker 1>I will

00:37:08.355 --> 00:37:10.915
<v Speaker 1>let's see. I'll just open the window as

00:37:10.915 --> 00:37:13.555
<v Speaker 1>well, and then I can edit. Right?

00:37:13.955 --> 00:37:14.515
<v Speaker 1>Mhmm.

00:37:16.700 --> 00:37:17.420
<v Speaker 1>Okay.

00:37:19.740 --> 00:37:21.420
<v Speaker 1>It's loading. Come on.

00:37:26.460 --> 00:37:27.340
<v Speaker 1>It won't load.

00:37:31.345 --> 00:37:33.825
<v Speaker 1>Live share is cool when it works.

00:37:34.464 --> 00:37:35.505
<v Speaker 0>So if you just

00:37:36.464 --> 00:37:38.144
<v Speaker 0>if I just close it and reopen it,

00:37:38.144 --> 00:37:40.144
<v Speaker 0>you'll get popped into it anyway. So let's

00:37:40.144 --> 00:37:40.545
<v Speaker 0>do that.

00:37:44.420 --> 00:37:45.060
<v Speaker 1>Nope.

00:37:45.859 --> 00:37:48.020
<v Speaker 1>It seems to be sort of disconnected

00:37:48.020 --> 00:37:48.900
<v Speaker 1>somehow.

00:37:49.779 --> 00:37:52.099
<v Speaker 1>It's it's still convinced that you're editing the

00:37:52.099 --> 00:37:54.340
<v Speaker 1>index of t s. This is

00:37:56.660 --> 00:37:57.140
<v Speaker 1>but yeah.

00:37:58.255 --> 00:37:59.695
<v Speaker 1>If you scroll all the way down this

00:37:59.695 --> 00:38:00.255
<v Speaker 1>file,

00:38:00.575 --> 00:38:01.935
<v Speaker 1>you'll see a

00:38:02.575 --> 00:38:03.615
<v Speaker 1>little bit up.

00:38:04.815 --> 00:38:07.215
<v Speaker 1>You'll see this cube yeah. Down. No. No.

00:38:07.215 --> 00:38:09.135
<v Speaker 1>No. More down. More down. Yeah.

00:38:09.935 --> 00:38:12.175
<v Speaker 1>Kube a d m slash config dot yaml.

00:38:12.510 --> 00:38:13.950
<v Speaker 1>And this is the only content that we

00:38:13.950 --> 00:38:14.990
<v Speaker 1>need. So

00:38:16.350 --> 00:38:18.830
<v Speaker 1>so there's a the the contents of that

00:38:18.830 --> 00:38:20.190
<v Speaker 1>file is the only thing we need. So

00:38:20.190 --> 00:38:21.710
<v Speaker 1>we can remove all the other stuff in

00:38:21.710 --> 00:38:22.430
<v Speaker 1>this file.

00:38:22.910 --> 00:38:24.670
<v Speaker 1>Just copy that out. Yeah. Exactly.

00:38:25.375 --> 00:38:27.455
<v Speaker 0>And we just want this available on each

00:38:27.455 --> 00:38:28.655
<v Speaker 0>of our notes. Right?

00:38:29.135 --> 00:38:29.855
<v Speaker 1>Yep.

00:38:30.255 --> 00:38:32.575
<v Speaker 1>And we will have to and we'll have

00:38:32.575 --> 00:38:34.655
<v Speaker 1>to edit some place some things,

00:38:35.855 --> 00:38:36.735
<v Speaker 1>some placeholders.

00:38:37.230 --> 00:38:39.869
<v Speaker 1>So, the certificate key and bootstrap token, can

00:38:39.869 --> 00:38:41.550
<v Speaker 1>just remove. We don't need them.

00:38:43.230 --> 00:38:45.390
<v Speaker 1>When you leave them out, kubeadm will come

00:38:45.390 --> 00:38:47.070
<v Speaker 1>up with default values. So, we can just

00:38:47.070 --> 00:38:47.870
<v Speaker 1>delete those.

00:38:48.910 --> 00:38:50.109
<v Speaker 1>Then there is

00:38:52.095 --> 00:38:54.015
<v Speaker 1>the node IP, which needs to be the

00:38:54.015 --> 00:38:55.855
<v Speaker 1>the I p v six address of our

00:38:55.855 --> 00:38:56.495
<v Speaker 1>node.

00:38:57.855 --> 00:39:00.255
<v Speaker 0>Okay. So is that our admin node?

00:39:00.815 --> 00:39:01.535
<v Speaker 0>Yep.

00:39:03.455 --> 00:39:05.215
<v Speaker 1>So if we go into details,

00:39:05.850 --> 00:39:08.010
<v Speaker 1>we will see the IPv6 address.

00:39:09.530 --> 00:39:10.810
<v Speaker 1>Yes, that's it.

00:39:14.730 --> 00:39:16.010
<v Speaker 1>Okay. Good.

00:39:16.890 --> 00:39:19.530
<v Speaker 1>And then we'll have the control plane endpoint,

00:39:19.530 --> 00:39:21.930
<v Speaker 1>which will also be the IP address

00:39:21.474 --> 00:39:22.595
<v Speaker 1>of this node.

00:39:24.275 --> 00:39:25.315
<v Speaker 1>And then

00:39:25.635 --> 00:39:26.355
<v Speaker 1>the

00:39:26.675 --> 00:39:28.435
<v Speaker 1>then we will have to come up with

00:39:28.435 --> 00:39:29.075
<v Speaker 1>two

00:39:29.555 --> 00:39:31.075
<v Speaker 1>IP subnets

00:39:32.035 --> 00:39:35.000
<v Speaker 1>for our service range and our pod subnet.

00:39:35.000 --> 00:39:36.839
<v Speaker 1>So this is where our virtual IPs will

00:39:36.839 --> 00:39:39.400
<v Speaker 1>live and in which range our pods will

00:39:39.400 --> 00:39:39.880
<v Speaker 1>live.

00:39:41.240 --> 00:39:43.480
<v Speaker 1>We don't want to this to clash with

00:39:43.480 --> 00:39:45.480
<v Speaker 1>nodes that Packet creates automatically.

00:39:46.775 --> 00:39:47.415
<v Speaker 1>So

00:39:48.055 --> 00:39:49.895
<v Speaker 1>what we're going to do is just

00:39:50.135 --> 00:39:52.855
<v Speaker 1>copy paste your the IP address you just

00:39:52.855 --> 00:39:54.375
<v Speaker 1>had into both.

00:39:58.055 --> 00:40:00.215
<v Speaker 1>Okay. Remove the three in both cases.

00:40:01.450 --> 00:40:02.170
<v Speaker 1>Okay.

00:40:02.730 --> 00:40:06.730
<v Speaker 1>And the service subnet, we will make D001.

00:40:08.090 --> 00:40:10.250
<v Speaker 1>So you see the D00?

00:40:10.730 --> 00:40:13.130
<v Speaker 0>I got you. Oh, yeah. And then just

00:40:13.130 --> 00:40:15.610
<v Speaker 1>leave the yes. And then we'll do a

00:40:15.610 --> 00:40:16.810
<v Speaker 1>108

00:40:16.785 --> 00:40:17.425
<v Speaker 1>at

00:40:17.905 --> 00:40:18.625
<v Speaker 1>the end.

00:40:19.744 --> 00:40:20.385
<v Speaker 1>So

00:40:20.865 --> 00:40:22.705
<v Speaker 1>this basically means that

00:40:26.065 --> 00:40:27.505
<v Speaker 1>we will allocate

00:40:28.065 --> 00:40:30.224
<v Speaker 1>all the service IPs will be prefixed with

00:40:30.224 --> 00:40:32.420
<v Speaker 1>this part, and we need to do 108

00:40:32.420 --> 00:40:34.580
<v Speaker 1>because we can only have 1,000,000

00:40:34.660 --> 00:40:36.980
<v Speaker 1>service IP addresses in a Kubernetes cluster. It's

00:40:36.980 --> 00:40:38.980
<v Speaker 1>some hard limits. If you change this number

00:40:38.980 --> 00:40:41.700
<v Speaker 1>to something that is normal in IPv6,

00:40:41.700 --> 00:40:44.099
<v Speaker 1>because usually, you assign 64

00:40:44.855 --> 00:40:47.335
<v Speaker 1>per range. Kubernetes will actually crash. I found

00:40:47.335 --> 00:40:48.694
<v Speaker 1>this out the hard way. This is not

00:40:48.694 --> 00:40:49.815
<v Speaker 1>documented anywhere.

00:40:49.895 --> 00:40:51.974
<v Speaker 1>108 is the magic number that we need.

00:40:51.974 --> 00:40:53.655
<v Speaker 1>Don't ask too many questions.

00:40:55.575 --> 00:40:58.454
<v Speaker 1>And then the POD subnet will make d00

00:40:58.454 --> 00:41:02.020
<v Speaker 1>will make it two and then 64.

00:41:04.339 --> 00:41:05.300
<v Speaker 1>Yes. So

00:41:07.140 --> 00:41:08.580
<v Speaker 1>this means that we

00:41:09.220 --> 00:41:11.619
<v Speaker 1>expect all our pods to get assigned to

00:41:11.619 --> 00:41:13.220
<v Speaker 1>public IP address, which is what we want.

00:41:13.220 --> 00:41:13.700
<v Speaker 1>Right?

00:41:14.180 --> 00:41:15.635
<v Speaker 1>So, yeah, we can put this in a

00:41:15.635 --> 00:41:17.955
<v Speaker 1>config dot YAML, which we copy over to

00:41:17.955 --> 00:41:18.675
<v Speaker 1>the box.

00:41:21.875 --> 00:41:22.835
<v Speaker 0>Yep.

00:41:26.915 --> 00:41:28.195
<v Speaker 0>Is it

00:41:28.610 --> 00:41:30.850
<v Speaker 0>if you disable the page for mounting.

00:41:31.890 --> 00:41:34.690
<v Speaker 1>Oh, yeah. Set based or something. Right?

00:41:34.850 --> 00:41:36.210
<v Speaker 0>Yeah. I think they're right.

00:41:38.770 --> 00:41:40.930
<v Speaker 1>And then we want to and indent this

00:41:40.930 --> 00:41:41.570
<v Speaker 1>a bit.

00:41:42.130 --> 00:41:42.530
<v Speaker 0>Yeah.

00:41:45.775 --> 00:41:46.495
<v Speaker 1>Okay.

00:41:47.615 --> 00:41:49.935
<v Speaker 1>Yeah. Let's just do it that way. Yeah.

00:41:50.495 --> 00:41:51.455
<v Speaker 1>That's good.

00:41:53.455 --> 00:41:56.815
<v Speaker 0>Right there. Okay. Yep. So let's save this.

00:41:56.815 --> 00:41:57.695
<v Speaker 1>And now

00:41:57.935 --> 00:41:58.895
<v Speaker 1>we're gonna type.

00:42:00.270 --> 00:42:00.990
<v Speaker 1>Okay.

00:42:01.550 --> 00:42:02.270
<v Speaker 0>Okay.

00:42:05.790 --> 00:42:07.230
<v Speaker 1>So, there are a few things that we

00:42:07.230 --> 00:42:09.630
<v Speaker 1>need to make sure before we can initialize

00:42:09.630 --> 00:42:10.510
<v Speaker 1>the cluster.

00:42:10.750 --> 00:42:13.870
<v Speaker 1>First is that we have a DNS server

00:42:13.605 --> 00:42:14.965
<v Speaker 1>in etcresolveconf

00:42:14.965 --> 00:42:17.045
<v Speaker 1>that is an IPv6 address. The reason for

00:42:17.045 --> 00:42:19.445
<v Speaker 1>that is our pods will only have

00:42:19.845 --> 00:42:20.645
<v Speaker 1>IPv6

00:42:20.645 --> 00:42:21.445
<v Speaker 1>addresses,

00:42:22.325 --> 00:42:24.165
<v Speaker 1>and they won't be able to resolve external

00:42:24.165 --> 00:42:26.244
<v Speaker 1>traffic if this is an IPv4 address. So

00:42:26.244 --> 00:42:26.965
<v Speaker 1>we can

00:42:27.990 --> 00:42:28.950
<v Speaker 1>pick one.

00:42:31.110 --> 00:42:33.270
<v Speaker 1>If you go back to that file,

00:42:36.150 --> 00:42:38.070
<v Speaker 1>I think it's in here. So oh, no.

00:42:38.070 --> 00:42:39.430
<v Speaker 1>Wait. It's not. Wait.

00:42:39.830 --> 00:42:41.430
<v Speaker 1>So we can, I don't know, take the

00:42:41.430 --> 00:42:42.870
<v Speaker 1>the Google servers or something?

00:42:45.535 --> 00:42:46.495
<v Speaker 0>I will

00:42:47.135 --> 00:42:48.335
<v Speaker 0>Alright. I'll just

00:42:48.895 --> 00:42:49.935
<v Speaker 0>I'll put it.

00:42:50.575 --> 00:42:51.535
<v Speaker 1>Yeah. Exactly.

00:42:54.095 --> 00:42:54.895
<v Speaker 1>There

00:42:54.895 --> 00:42:56.095
<v Speaker 1>it is. Yep.

00:42:58.720 --> 00:43:01.040
<v Speaker 1>So let's put these in Etsy Resolve

00:43:04.640 --> 00:43:07.280
<v Speaker 1>and replace those two at the top.

00:43:09.280 --> 00:43:11.600
<v Speaker 1>We can keep one IPv4 one in there,

00:43:11.600 --> 00:43:13.040
<v Speaker 1>actually, because otherwise,

00:43:13.040 --> 00:43:14.160
<v Speaker 1>other stuff will get angry.

00:43:15.335 --> 00:43:16.055
<v Speaker 1>So,

00:43:18.775 --> 00:43:19.815
<v Speaker 1>yes, exactly.

00:43:20.375 --> 00:43:21.095
<v Speaker 1>Perfect.

00:43:23.255 --> 00:43:25.095
<v Speaker 1>Okay. So now we can do

00:43:26.295 --> 00:43:27.575
<v Speaker 1>sudo kubeadm

00:43:27.575 --> 00:43:28.295
<v Speaker 1>init

00:43:30.290 --> 00:43:31.730
<v Speaker 1>dash dash config

00:43:33.090 --> 00:43:34.770
<v Speaker 1>and then your config file.

00:43:34.930 --> 00:43:36.530
<v Speaker 1>And it will run a bunch of preflight

00:43:36.530 --> 00:43:38.690
<v Speaker 1>checks that will tell us things that are

00:43:38.690 --> 00:43:40.690
<v Speaker 1>not configured correctly on our box yet.

00:43:41.810 --> 00:43:44.575
<v Speaker 1>We might have to set up a forwarding

00:43:44.575 --> 00:43:47.134
<v Speaker 1>rule in the kernel or something, or Docker

00:43:47.134 --> 00:43:48.415
<v Speaker 1>isn't started yet.

00:43:48.894 --> 00:43:49.535
<v Speaker 1>So,

00:43:50.575 --> 00:43:52.335
<v Speaker 1>yes. No Docker.

00:43:53.694 --> 00:43:56.174
<v Speaker 1>So, let's apt install docker.io.

00:44:10.805 --> 00:44:12.724
<v Speaker 1>You suddenly start to appreciate

00:44:12.724 --> 00:44:16.005
<v Speaker 1>these managed Kubernetes services. Right? It's like

00:44:16.645 --> 00:44:19.045
<v Speaker 1>Yeah. I I used to work for a

00:44:19.845 --> 00:44:23.080
<v Speaker 0>company that runs, like, a a tender competitor

00:44:23.080 --> 00:44:25.240
<v Speaker 0>in Europe, and we managed all of their

00:44:25.240 --> 00:44:27.480
<v Speaker 0>Kubernetes clusters of bare metal. Mhmm.

00:44:28.760 --> 00:44:30.520
<v Speaker 0>It was fun and challenging at the same

00:44:30.520 --> 00:44:31.080
<v Speaker 0>time.

00:44:31.400 --> 00:44:34.585
<v Speaker 1>So what is it angry about now? Oh,

00:44:34.585 --> 00:44:36.585
<v Speaker 1>yeah. We need to disable yeah. It we

00:44:36.585 --> 00:44:38.105
<v Speaker 1>will have to disable swap.

00:44:38.985 --> 00:44:41.225
<v Speaker 1>So just swap swap off.

00:44:41.865 --> 00:44:44.025
<v Speaker 1>Oh, yeah. Enable docker is also useful.

00:44:45.225 --> 00:44:47.385
<v Speaker 1>And then I always forget what you need

00:44:47.385 --> 00:44:47.945
<v Speaker 1>to type here.

00:44:50.620 --> 00:44:51.900
<v Speaker 0>STP2.

00:44:52.060 --> 00:44:53.820
<v Speaker 0>Okay. Yes, perfect.

00:44:54.460 --> 00:44:55.580
<v Speaker 1>So yes,

00:44:55.580 --> 00:44:56.780
<v Speaker 1>and we need to set

00:44:57.020 --> 00:44:59.180
<v Speaker 1>proxies net IPv6

00:44:59.180 --> 00:45:00.940
<v Speaker 1>config default forwarding

00:45:00.940 --> 00:45:01.500
<v Speaker 1>to one.

00:45:02.525 --> 00:45:04.685
<v Speaker 1>The reason for this is we're going to

00:45:04.685 --> 00:45:05.405
<v Speaker 1>receive

00:45:06.285 --> 00:45:08.845
<v Speaker 1>requests from other nodes trying to reach a

00:45:08.845 --> 00:45:09.965
<v Speaker 1>Pod IP, right?

00:45:10.445 --> 00:45:13.405
<v Speaker 1>And our server isn't listening on any Pod

00:45:13.405 --> 00:45:15.165
<v Speaker 1>IPs. It's the Pods themselves that are listening

00:45:15.165 --> 00:45:16.525
<v Speaker 1>on the Pod IPs. So if it receives

00:45:16.525 --> 00:45:18.630
<v Speaker 1>an IP address that it doesn't know, it

00:45:18.630 --> 00:45:19.750
<v Speaker 1>needs to forward it

00:45:20.069 --> 00:45:21.430
<v Speaker 1>to one of the pods on the box.

00:45:21.430 --> 00:45:23.510
<v Speaker 1>So we have to set up IP forwarding

00:45:23.510 --> 00:45:24.150
<v Speaker 1>for this.

00:45:24.470 --> 00:45:25.910
<v Speaker 0>Yeah. I was trying to look at why

00:45:25.910 --> 00:45:27.829
<v Speaker 0>that exists, but I just I I forgot

00:45:27.829 --> 00:45:29.990
<v Speaker 0>the view. Okay. So I think we're now

00:45:29.990 --> 00:45:32.390
<v Speaker 1>all set, and we can start bootstrapping it.

00:45:35.155 --> 00:45:36.355
<v Speaker 0>Okay. Let's

00:45:36.355 --> 00:45:37.555
<v Speaker 0>try that again.

00:45:41.955 --> 00:45:42.755
<v Speaker 1>Okay.

00:45:42.994 --> 00:45:44.835
<v Speaker 1>So, yeah, this will take a minute or

00:45:44.835 --> 00:45:46.835
<v Speaker 1>two, plus it downloads all the

00:45:47.075 --> 00:45:48.195
<v Speaker 1>required components,

00:45:50.250 --> 00:45:52.170
<v Speaker 1>or it will crash halfway through because we

00:45:52.170 --> 00:45:52.810
<v Speaker 1>forgot something.

00:46:01.815 --> 00:46:03.655
<v Speaker 0>In the static manifest.

00:46:04.935 --> 00:46:06.375
<v Speaker 0>Yep. And now

00:46:06.935 --> 00:46:08.535
<v Speaker 0>so now it's gonna be pulling the energies

00:46:08.535 --> 00:46:09.815
<v Speaker 0>for each of those

00:46:10.375 --> 00:46:12.615
<v Speaker 0>those static manifests. Okay. Yep.

00:46:13.175 --> 00:46:15.175
<v Speaker 1>And it will actually print out instructions how

00:46:15.175 --> 00:46:16.855
<v Speaker 1>we bootstrap our worker notes.

00:46:18.599 --> 00:46:19.240
<v Speaker 1>So don't

00:46:20.039 --> 00:46:21.640
<v Speaker 1>I knew you would do that. You'd always

00:46:21.640 --> 00:46:23.079
<v Speaker 1>tell me you do this. Right? Just control

00:46:23.079 --> 00:46:24.839
<v Speaker 1>l. So scroll up a bit. There's important

00:46:24.839 --> 00:46:26.119
<v Speaker 1>information that we need.

00:46:26.680 --> 00:46:28.359
<v Speaker 0>There is. But I I was wondering whether

00:46:28.359 --> 00:46:29.559
<v Speaker 0>I really want people to be able to

00:46:29.559 --> 00:46:30.359
<v Speaker 0>join my cluster.

00:46:32.775 --> 00:46:35.494
<v Speaker 0>Yes. It's okay with well, this So yeah.

00:46:35.494 --> 00:46:37.255
<v Speaker 1>So first of all, we can download the

00:46:37.255 --> 00:46:38.215
<v Speaker 1>kube config.

00:46:39.255 --> 00:46:41.095
<v Speaker 1>That's useful, I guess. So that's the very

00:46:41.095 --> 00:46:41.895
<v Speaker 1>first step.

00:46:42.295 --> 00:46:44.615
<v Speaker 1>So the kube config for this cluster is

00:46:44.615 --> 00:46:46.454
<v Speaker 1>in at ckubernetesadmin.com,

00:46:46.454 --> 00:46:49.040
<v Speaker 1>and we can copy it from the box

00:46:49.040 --> 00:46:51.760
<v Speaker 1>to your management note if you want to,

00:46:51.920 --> 00:46:53.920
<v Speaker 1>so that we have kubectl working.

00:46:54.800 --> 00:46:56.320
<v Speaker 1>We can already see if that works.

00:47:01.375 --> 00:47:04.175
<v Speaker 1>So if you would do kubectl get nodes,

00:47:04.255 --> 00:47:05.855
<v Speaker 1>see if it works, and then

00:47:07.934 --> 00:47:09.055
<v Speaker 1>let's copy that.

00:47:11.694 --> 00:47:13.850
<v Speaker 1>So yes, As you can see, the node

00:47:13.850 --> 00:47:15.770
<v Speaker 1>is in a not ready state because that's

00:47:15.770 --> 00:47:18.170
<v Speaker 1>because we haven't installed a CNI plug in

00:47:18.170 --> 00:47:20.730
<v Speaker 1>yet. So there's no networking setup yet.

00:47:20.890 --> 00:47:22.810
<v Speaker 1>But we'll get to that

00:47:23.130 --> 00:47:23.770
<v Speaker 1>very soon.

00:47:26.195 --> 00:47:27.555
<v Speaker 1>Do you just want to do it from

00:47:27.555 --> 00:47:28.915
<v Speaker 1>the master node?

00:47:29.875 --> 00:47:32.195
<v Speaker 1>Because we have ibv6 connectivity here as well,

00:47:32.195 --> 00:47:32.995
<v Speaker 1>so it's

00:47:33.715 --> 00:47:34.675
<v Speaker 1>nice and easy.

00:47:35.075 --> 00:47:37.715
<v Speaker 1>So we're going to install

00:47:39.600 --> 00:47:40.480
<v Speaker 1>Calico.

00:47:41.120 --> 00:47:43.040
<v Speaker 1>Shall I just send you a link to

00:47:43.360 --> 00:47:45.120
<v Speaker 1>the comments that you'll have to type?

00:47:45.360 --> 00:47:46.880
<v Speaker 0>Yeah. Go for it. Yep.

00:47:52.895 --> 00:47:55.455
<v Speaker 1>So

00:47:56.815 --> 00:47:58.815
<v Speaker 1>we will need the following two things.

00:48:07.670 --> 00:48:08.790
<v Speaker 1>Where are you?

00:48:20.615 --> 00:48:21.975
<v Speaker 1>It would be nice if we can get

00:48:21.975 --> 00:48:23.895
<v Speaker 1>the share terminal up again. Do we want

00:48:23.895 --> 00:48:25.415
<v Speaker 1>to try and see if we can get

00:48:25.415 --> 00:48:27.415
<v Speaker 1>the live share to work?

00:48:28.455 --> 00:48:29.495
<v Speaker 1>Can you

00:48:33.190 --> 00:48:35.109
<v Speaker 1>do you see me type in index dot

00:48:35.109 --> 00:48:36.070
<v Speaker 1>t s now?

00:48:38.230 --> 00:48:40.070
<v Speaker 1>I do. Yes. Okay.

00:48:40.630 --> 00:48:41.109
<v Speaker 1>So

00:48:41.750 --> 00:48:43.269
<v Speaker 0>You should be able to type in my

00:48:43.269 --> 00:48:45.109
<v Speaker 0>terminal, which is on the working note. Do

00:48:45.109 --> 00:48:45.910
<v Speaker 0>you want me to

00:48:46.795 --> 00:48:48.235
<v Speaker 0>Is that is that okay to do the

00:48:48.235 --> 00:48:49.675
<v Speaker 0>commands there? Or or no? We need the

00:48:49.675 --> 00:48:51.675
<v Speaker 0>config. Right? Yeah. Yeah. So We we will

00:48:51.675 --> 00:48:53.755
<v Speaker 1>need the cube config there, though, so the

00:48:53.755 --> 00:48:55.835
<v Speaker 1>cube CTL works. That's all.

00:48:59.850 --> 00:49:00.570
<v Speaker 1>So

00:49:04.250 --> 00:49:04.890
<v Speaker 0>yep.

00:49:07.210 --> 00:49:08.250
<v Speaker 1>Exports

00:49:08.330 --> 00:49:11.050
<v Speaker 1>cube config equals cube config.

00:49:12.535 --> 00:49:14.215
<v Speaker 1>I need the full path here. Right? I

00:49:14.215 --> 00:49:16.455
<v Speaker 1>think. No. You can just do dot slash.

00:49:16.775 --> 00:49:17.415
<v Speaker 0>Oh, okay.

00:49:26.310 --> 00:49:29.430
<v Speaker 1>There we go. That's nice. K. So we're

00:49:29.430 --> 00:49:30.230
<v Speaker 1>now gonna

00:49:33.990 --> 00:49:34.470
<v Speaker 0>copy.

00:49:40.805 --> 00:49:41.605
<v Speaker 1>I

00:49:42.085 --> 00:49:43.525
<v Speaker 1>accidentally did something.

00:49:43.845 --> 00:49:44.965
<v Speaker 1>What did I do?

00:49:46.964 --> 00:49:49.445
<v Speaker 1>I created a new terminal.

00:49:50.484 --> 00:49:51.525
<v Speaker 1>Oh, okay. Excellent.

00:49:56.460 --> 00:49:57.980
<v Speaker 1>That still works. Okay.

00:50:01.100 --> 00:50:02.620
<v Speaker 1>Pasting is a bit funky here.

00:50:18.495 --> 00:50:20.175
<v Speaker 0>I believe I'm using KubeCTL

00:50:20.175 --> 00:50:23.055
<v Speaker 0>create after my Twitter run about people using

00:50:23.055 --> 00:50:23.855
<v Speaker 0>KubeCTL

00:50:23.855 --> 00:50:24.175
<v Speaker 0>create.

00:50:24.869 --> 00:50:26.550
<v Speaker 1>Instead instead of apply?

00:50:27.029 --> 00:50:27.670
<v Speaker 1>Yeah.

00:50:29.349 --> 00:50:32.070
<v Speaker 0>Run for another day. Yeah. Yeah. Yeah.

00:50:32.630 --> 00:50:33.510
<v Speaker 1>Then

00:50:33.589 --> 00:50:34.869
<v Speaker 1>we are going to

00:50:37.125 --> 00:50:37.925
<v Speaker 1>get

00:50:39.365 --> 00:50:42.405
<v Speaker 1>installed. So this so Calico has an

00:50:42.405 --> 00:50:43.285
<v Speaker 1>operator

00:50:43.445 --> 00:50:46.005
<v Speaker 1>to manage Calico, which is kind of neat.

00:50:51.800 --> 00:50:52.760
<v Speaker 1>And then

00:50:53.560 --> 00:50:56.680
<v Speaker 1>I will make a new file here.

00:50:58.360 --> 00:51:00.600
<v Speaker 1>Oh, control N opens a new browser tab.

00:51:00.600 --> 00:51:02.040
<v Speaker 1>Let's see how

00:51:02.595 --> 00:51:04.035
<v Speaker 1>I will press

00:51:04.035 --> 00:51:04.515
<v Speaker 1>this.

00:51:14.559 --> 00:51:16.559
<v Speaker 1>For some reason, it doesn't like me changing

00:51:16.559 --> 00:51:17.280
<v Speaker 1>files.

00:51:17.359 --> 00:51:19.520
<v Speaker 1>It just doesn't work in live share.

00:51:20.240 --> 00:51:22.080
<v Speaker 1>So the terminal works fine.

00:51:22.240 --> 00:51:22.800
<v Speaker 1>So

00:51:23.839 --> 00:51:26.240
<v Speaker 0>So there's some oh, sometimes yeah. I've had

00:51:26.240 --> 00:51:28.465
<v Speaker 0>that before in live share sessions too. There's

00:51:28.465 --> 00:51:29.825
<v Speaker 0>a little, like, reload. I don't know if

00:51:29.825 --> 00:51:30.945
<v Speaker 0>you can see my screen right now. But

00:51:30.945 --> 00:51:33.425
<v Speaker 0>if you press that, it generally kinda kicks

00:51:33.425 --> 00:51:33.985
<v Speaker 0>it,

00:51:34.385 --> 00:51:36.145
<v Speaker 0>the refresh explorer button.

00:51:38.945 --> 00:51:40.785
<v Speaker 1>Where is this button?

00:51:41.540 --> 00:51:43.780
<v Speaker 0>So on the sidebar about the files and

00:51:43.780 --> 00:51:46.339
<v Speaker 0>directories, there's, four icons,

00:51:46.339 --> 00:51:47.700
<v Speaker 0>and then there's, like, a wee circle with

00:51:47.700 --> 00:51:49.220
<v Speaker 0>an arrow on it, and that generally just

00:51:49.220 --> 00:51:51.060
<v Speaker 0>kicks it to refresh the file system cache.

00:51:54.704 --> 00:51:56.144
<v Speaker 1>No. If I open a file, it just

00:51:56.144 --> 00:51:57.984
<v Speaker 1>gives me a loading

00:51:58.144 --> 00:51:58.865
<v Speaker 1>screen.

00:52:01.505 --> 00:52:03.345
<v Speaker 1>So I'll have to guide you in typing.

00:52:03.345 --> 00:52:05.184
<v Speaker 1>This is Okay. I can I can do

00:52:05.184 --> 00:52:06.625
<v Speaker 0>this? I can do it. Yes. Okay.

00:52:07.184 --> 00:52:07.825
<v Speaker 1>So

00:52:08.464 --> 00:52:10.704
<v Speaker 1>let's

00:52:09.480 --> 00:52:10.520
<v Speaker 1>go to

00:52:11.160 --> 00:52:13.000
<v Speaker 1>I'll give you a link, and then I'll

00:52:13.000 --> 00:52:14.920
<v Speaker 1>tell you to try it yourself. This is

00:52:14.920 --> 00:52:15.560
<v Speaker 1>always fun.

00:52:23.495 --> 00:52:25.335
<v Speaker 1>Let's see what the link is.

00:52:29.255 --> 00:52:31.495
<v Speaker 0>So is this on your GitHub stuff? Can

00:52:31.495 --> 00:52:32.535
<v Speaker 0>I get it from there?

00:52:33.815 --> 00:52:34.775
<v Speaker 1>Yep. Definitely.

00:52:35.570 --> 00:52:36.450
<v Speaker 1>Alright. So

00:52:36.770 --> 00:52:38.690
<v Speaker 0>top level, I go and say

00:52:39.010 --> 00:52:41.410
<v Speaker 1>You can go to ignitionmaster.jamo.

00:52:41.890 --> 00:52:43.650
<v Speaker 1>Got it. And we're gonna copy and I'll

00:52:43.650 --> 00:52:45.250
<v Speaker 1>scroll all the way to the bottom,

00:52:46.690 --> 00:52:49.890
<v Speaker 1>and you will see a Calico config. We're

00:52:49.890 --> 00:52:50.850
<v Speaker 1>gonna copy paste that.

00:52:52.305 --> 00:52:53.185
<v Speaker 1>So

00:52:55.984 --> 00:52:58.305
<v Speaker 1>I actually just noticed this flex volume path

00:52:58.305 --> 00:52:59.025
<v Speaker 1>thing.

00:52:59.744 --> 00:53:01.425
<v Speaker 1>You might have to so

00:53:01.425 --> 00:53:02.865
<v Speaker 1>this is only needed

00:53:04.570 --> 00:53:05.370
<v Speaker 1>on

00:53:05.930 --> 00:53:08.890
<v Speaker 1>FlatCar Linux because, by default, it tries to

00:53:08.890 --> 00:53:11.850
<v Speaker 1>install FlexVolume plug ins in user

00:53:12.089 --> 00:53:13.130
<v Speaker 1>lib exec,

00:53:14.730 --> 00:53:16.330
<v Speaker 1>but that doesn't exist on FlatCar.

00:53:16.725 --> 00:53:19.125
<v Speaker 1>The thing is we also configured our

00:53:21.125 --> 00:53:23.525
<v Speaker 1>control plane to use this path, I think,

00:53:23.525 --> 00:53:25.845
<v Speaker 1>in our kubeadm config. Can you double check

00:53:25.845 --> 00:53:26.405
<v Speaker 1>that?

00:53:27.045 --> 00:53:29.525
<v Speaker 1>Because we might have to remove that part.

00:53:31.365 --> 00:53:32.005
<v Speaker 1>Like that.

00:53:32.940 --> 00:53:33.580
<v Speaker 1>Yeah.

00:53:35.020 --> 00:53:36.859
<v Speaker 1>So this it might be that the cube

00:53:36.859 --> 00:53:39.660
<v Speaker 1>the it starts complaining about this path. So

00:53:39.660 --> 00:53:41.660
<v Speaker 1>we could quickly

00:53:42.460 --> 00:53:44.060
<v Speaker 1>try and Yeah. Just try and.

00:53:44.775 --> 00:53:47.174
<v Speaker 1>Yep. So if we go back to your

00:53:47.174 --> 00:53:48.135
<v Speaker 1>terminal

00:53:48.135 --> 00:53:49.975
<v Speaker 1>and we edit the config

00:53:50.375 --> 00:53:50.935
<v Speaker 1>first.

00:53:55.015 --> 00:53:55.734
<v Speaker 1>Yes.

00:53:56.454 --> 00:53:58.775
<v Speaker 1>And we remove those extra arcs.

00:53:59.910 --> 00:54:00.630
<v Speaker 1>So,

00:54:01.510 --> 00:54:04.390
<v Speaker 1>yeah, both there and also in the cluster

00:54:04.390 --> 00:54:05.350
<v Speaker 1>configuration.

00:54:06.470 --> 00:54:07.109
<v Speaker 1>Yep.

00:54:08.549 --> 00:54:10.869
<v Speaker 1>Exactly. And then you can do kubeadm reset.

00:54:14.805 --> 00:54:16.725
<v Speaker 1>And then without the config. So, first, we

00:54:16.725 --> 00:54:18.965
<v Speaker 1>do reset and then we reinstall again. So,

00:54:18.965 --> 00:54:20.245
<v Speaker 1>we just do reset.

00:54:26.085 --> 00:54:28.079
<v Speaker 0>Okay. And then we want to run NA

00:54:28.079 --> 00:54:28.800
<v Speaker 0>again.

00:54:29.200 --> 00:54:29.920
<v Speaker 1>Exactly.

00:54:34.160 --> 00:54:34.480
<v Speaker 1>K.

00:54:39.875 --> 00:54:40.595
<v Speaker 0>Okay.

00:54:40.755 --> 00:54:41.475
<v Speaker 0>And

00:54:43.875 --> 00:54:46.035
<v Speaker 1>then we want to That's just on the

00:54:46.035 --> 00:54:47.635
<v Speaker 0>machine. Right? Yep.

00:54:48.194 --> 00:54:50.275
<v Speaker 1>And we also want to now cube key

00:54:50.434 --> 00:54:53.395
<v Speaker 1>do the cube cuddle create or apply again.

00:54:57.690 --> 00:55:00.170
<v Speaker 0>What about the first command,

00:55:00.250 --> 00:55:02.970
<v Speaker 0>the command? I see that here, actually.

00:55:04.010 --> 00:55:06.170
<v Speaker 1>Yes. It's in here. Exactly. Yep.

00:55:08.815 --> 00:55:10.415
<v Speaker 0>So we can run this.

00:55:10.815 --> 00:55:11.455
<v Speaker 0>Mhmm.

00:55:12.175 --> 00:55:14.735
<v Speaker 0>Oh. Make config. Okay. Yeah. You have to

00:55:14.735 --> 00:55:16.655
<v Speaker 1>copy the kube config again because we now

00:55:16.655 --> 00:55:18.815
<v Speaker 1>have new certificates. Right? So so

00:55:23.000 --> 00:55:25.800
<v Speaker 1>oh, it it copies in interactively.

00:55:25.800 --> 00:55:27.880
<v Speaker 1>So it refuses to override it because there's

00:55:27.880 --> 00:55:29.240
<v Speaker 1>a c p dash I.

00:55:29.720 --> 00:55:31.160
<v Speaker 1>Of course.

00:55:31.800 --> 00:55:32.599
<v Speaker 1>So

00:55:42.855 --> 00:55:43.815
<v Speaker 1>Okay, good.

00:55:44.055 --> 00:55:46.855
<v Speaker 1>And now we look at this calico file

00:55:48.640 --> 00:55:49.760
<v Speaker 1>that you have.

00:55:50.960 --> 00:55:53.200
<v Speaker 1>And it's different from the one they ship

00:55:53.200 --> 00:55:54.080
<v Speaker 1>by default.

00:55:55.440 --> 00:55:57.200
<v Speaker 1>So we will have to change one thing

00:55:57.200 --> 00:55:58.720
<v Speaker 1>here. The interface

00:55:58.720 --> 00:56:00.720
<v Speaker 1>is not is I think it's bond zero

00:56:00.720 --> 00:56:02.880
<v Speaker 1>in your case as well. Could you make

00:56:02.195 --> 00:56:03.395
<v Speaker 1>sure that it is?

00:56:03.635 --> 00:56:05.235
<v Speaker 1>It is. Good.

00:56:05.475 --> 00:56:07.875
<v Speaker 1>So I disable ibv4 detection,

00:56:07.955 --> 00:56:10.115
<v Speaker 1>and I enable ibv6 detection.

00:56:10.515 --> 00:56:12.995
<v Speaker 1>And this is just so that Calico

00:56:14.035 --> 00:56:16.595
<v Speaker 1>configures itself as a ibv4,

00:56:16.595 --> 00:56:17.235
<v Speaker 1>ibv6.

00:56:17.589 --> 00:56:19.109
<v Speaker 1>And this by default, it does I p

00:56:19.109 --> 00:56:21.109
<v Speaker 1>v four with an overlay network, a la

00:56:21.109 --> 00:56:21.830
<v Speaker 1>Flannel.

00:56:21.990 --> 00:56:23.589
<v Speaker 1>But if you have this option, it will

00:56:23.589 --> 00:56:25.270
<v Speaker 1>use I p v six instead.

00:56:26.630 --> 00:56:27.990
<v Speaker 0>Okay. So I think if you

00:56:28.869 --> 00:56:31.270
<v Speaker 0>based on oh, I probably got by mistake.

00:56:31.765 --> 00:56:34.325
<v Speaker 0>But I can paste in cube CTL,

00:56:34.325 --> 00:56:35.125
<v Speaker 0>the eight

00:56:35.285 --> 00:56:38.085
<v Speaker 0>point No. My calendar file. No? Yes.

00:56:38.165 --> 00:56:38.805
<v Speaker 1>Yes.

00:56:40.085 --> 00:56:42.725
<v Speaker 0>Sure. You said no. I wanted to say

00:56:42.725 --> 00:56:44.085
<v Speaker 1>no, but it's yes. Yep.

00:56:46.170 --> 00:56:49.290
<v Speaker 0>Hello. Yep. So now if we do

00:56:51.130 --> 00:56:51.930
<v Speaker 1>kubectl

00:56:51.930 --> 00:56:52.810
<v Speaker 1>get no

00:56:52.970 --> 00:56:55.690
<v Speaker 1>gets let's get all pods. We'll see

00:56:56.410 --> 00:56:58.010
<v Speaker 1>that it's creating some stuff.

00:57:04.165 --> 00:57:04.885
<v Speaker 0>Alright.

00:57:05.205 --> 00:57:07.605
<v Speaker 1>Yeah. That will take yeah. It will take

00:57:07.605 --> 00:57:10.325
<v Speaker 1>a little while for the Calico to come

00:57:10.325 --> 00:57:10.485
<v Speaker 1>up.

00:57:12.849 --> 00:57:15.570
<v Speaker 0>Okay. Nice. So And then what we did

00:57:15.570 --> 00:57:17.170
<v Speaker 0>there was we installed

00:57:18.130 --> 00:57:19.650
<v Speaker 0>the operator.

00:57:20.210 --> 00:57:22.609
<v Speaker 0>And then based on the Calico.YAML

00:57:22.609 --> 00:57:23.810
<v Speaker 0>fail here,

00:57:23.890 --> 00:57:25.970
<v Speaker 0>it's determined that we need

00:57:26.050 --> 00:57:29.565
<v Speaker 0>these parts. Right? Yep. Exactly. Yeah. Okay.

00:57:30.285 --> 00:57:31.005
<v Speaker 1>And

00:57:31.165 --> 00:57:31.885
<v Speaker 1>so

00:57:32.365 --> 00:57:35.565
<v Speaker 1>the the the Calico cube controller will listen

00:57:35.565 --> 00:57:38.445
<v Speaker 1>to network policies that you define and configure

00:57:38.445 --> 00:57:39.245
<v Speaker 1>firewall rules.

00:57:40.100 --> 00:57:42.660
<v Speaker 1>And the Calico node is what we call

00:57:42.660 --> 00:57:44.580
<v Speaker 1>a BGP speaker. So what it will do

00:57:44.580 --> 00:57:46.420
<v Speaker 1>is it will after we set it up,

00:57:46.420 --> 00:57:48.420
<v Speaker 1>we haven't done it yet, it will talk

00:57:48.420 --> 00:57:51.220
<v Speaker 1>to your router, to your gateway,

00:57:51.700 --> 00:57:54.260
<v Speaker 1>and it will announce so Calico node will

00:57:54.260 --> 00:57:56.475
<v Speaker 1>run on each node in your cluster. And

00:57:56.475 --> 00:57:58.395
<v Speaker 1>it will say, I have these pods, they

00:57:58.395 --> 00:57:59.595
<v Speaker 1>have these IPs,

00:57:59.595 --> 00:58:01.035
<v Speaker 1>and they are on this node. So it

00:58:01.035 --> 00:58:01.755
<v Speaker 1>will say,

00:58:03.195 --> 00:58:04.635
<v Speaker 1>pod NGINX1

00:58:04.635 --> 00:58:05.195
<v Speaker 1>is

00:58:06.235 --> 00:58:08.155
<v Speaker 1>on my node. So if you see the

00:58:08.155 --> 00:58:09.835
<v Speaker 1>pod IP of NGINX1,

00:58:09.835 --> 00:58:11.275
<v Speaker 1>you have to route it to me, and

00:58:11.275 --> 00:58:12.580
<v Speaker 1>I will give you the answer.

00:58:14.579 --> 00:58:15.220
<v Speaker 1>So

00:58:15.619 --> 00:58:17.700
<v Speaker 1>once this is all initialized, can you check

00:58:17.700 --> 00:58:18.980
<v Speaker 1>if it's up yet?

00:58:19.940 --> 00:58:20.660
<v Speaker 0>Of

00:58:20.819 --> 00:58:21.460
<v Speaker 0>Yep.

00:58:22.339 --> 00:58:24.420
<v Speaker 0>Very good. Yeah. So and if you do

00:58:24.420 --> 00:58:26.500
<v Speaker 1>kubectl get node, it should say ready.

00:58:28.795 --> 00:58:29.595
<v Speaker 1>Okay.

00:58:30.315 --> 00:58:31.755
<v Speaker 1>So let's create a

00:58:32.155 --> 00:58:33.675
<v Speaker 1>an NGINX deployment.

00:58:33.995 --> 00:58:34.875
<v Speaker 1>Let's just

00:58:35.435 --> 00:58:37.195
<v Speaker 1>create some pods on this.

00:58:37.515 --> 00:58:39.435
<v Speaker 1>Well, we'll have to remove the taint from

00:58:39.435 --> 00:58:42.315
<v Speaker 1>the from the control plane node.

00:58:42.880 --> 00:58:44.160
<v Speaker 1>We or do we want to spin up

00:58:44.160 --> 00:58:45.200
<v Speaker 1>a worker first?

00:58:46.320 --> 00:58:47.600
<v Speaker 1>We can do either.

00:58:49.200 --> 00:58:49.760
<v Speaker 0>Yep.

00:58:51.119 --> 00:58:53.200
<v Speaker 0>What about the what about the thing? I

00:58:53.200 --> 00:58:54.560
<v Speaker 0>mean, we can add the worker.

00:58:54.800 --> 00:58:55.119
<v Speaker 0>Yep.

00:58:56.705 --> 00:58:57.425
<v Speaker 0>K.

00:58:57.745 --> 00:58:59.665
<v Speaker 0>And we want to create

00:59:00.785 --> 00:59:03.185
<v Speaker 0>I don't know. Run kind of x.

00:59:08.545 --> 00:59:10.705
<v Speaker 1>Yeah. Test dash test dash image.

00:59:11.745 --> 00:59:12.145
<v Speaker 1>Yes.

00:59:13.160 --> 00:59:13.880
<v Speaker 1>K.

00:59:16.920 --> 00:59:19.080
<v Speaker 0>K. So the image is coming.

00:59:19.800 --> 00:59:21.960
<v Speaker 1>And let's see if it gets assigned an

00:59:21.960 --> 00:59:22.840
<v Speaker 1>IP address.

00:59:24.120 --> 00:59:25.960
<v Speaker 1>Can you do dash o wide?

00:59:26.920 --> 00:59:28.440
<v Speaker 1>And we can get

00:59:30.235 --> 00:59:30.955
<v Speaker 1>Okay.

00:59:31.115 --> 00:59:33.275
<v Speaker 1>So we see now our pod has a

00:59:33.275 --> 00:59:34.555
<v Speaker 1>public IP address.

00:59:36.555 --> 00:59:37.275
<v Speaker 1>However

00:59:37.995 --> 00:59:39.355
<v Speaker 1>okay. We should be able to reach it

00:59:39.355 --> 00:59:41.515
<v Speaker 1>from this node. So if you curl it,

00:59:41.515 --> 00:59:42.075
<v Speaker 1>it should work.

00:59:44.360 --> 00:59:46.120
<v Speaker 1>So we have to put it between brackets,

00:59:46.120 --> 00:59:47.240
<v Speaker 1>the IP address,

00:59:47.640 --> 00:59:48.760
<v Speaker 1>square brackets.

00:59:52.040 --> 00:59:53.880
<v Speaker 1>We should be able to get yeah, that

00:59:53.880 --> 00:59:54.520
<v Speaker 1>works.

00:59:55.320 --> 00:59:57.400
<v Speaker 1>However, if we try to run it from

00:59:57.400 --> 00:59:58.520
<v Speaker 1>any of the other nodes,

00:59:59.115 --> 01:00:01.115
<v Speaker 1>which we don't have well, we have them.

01:00:01.355 --> 01:00:03.515
<v Speaker 1>Or from the outside, we will not have

01:00:03.515 --> 01:00:04.795
<v Speaker 1>a route to

01:00:04.955 --> 01:00:06.795
<v Speaker 1>this node because there's no way for other

01:00:06.795 --> 01:00:08.875
<v Speaker 1>people to know that this pod is running

01:00:08.875 --> 01:00:09.755
<v Speaker 1>on this node.

01:00:10.715 --> 01:00:11.835
<v Speaker 1>This is where yeah.

01:00:12.510 --> 01:00:15.230
<v Speaker 0>Let's jump on to worker one then.

01:00:15.550 --> 01:00:16.270
<v Speaker 0>Yep.

01:00:20.270 --> 01:00:22.510
<v Speaker 0>So we have our admin mode on the

01:00:22.510 --> 01:00:24.590
<v Speaker 0>top. I'm gonna have to fix it. I

01:00:24.590 --> 01:00:25.870
<v Speaker 0>have to fix it.

01:00:30.424 --> 01:00:32.904
<v Speaker 0>We have a key. Okay. So if we

01:00:32.904 --> 01:00:35.144
<v Speaker 0>copy this curl command, you're saying that's what

01:00:35.144 --> 01:00:37.945
<v Speaker 0>fail and that's because we are not advertising

01:00:38.345 --> 01:00:40.105
<v Speaker 0>this address. Right? Yeah.

01:00:41.799 --> 01:00:43.880
<v Speaker 1>You missed the square brackets.

01:00:44.039 --> 01:00:46.280
<v Speaker 1>So nothing happens. Right? There's no route.

01:00:46.760 --> 01:00:48.599
<v Speaker 1>So now what we're going to do is

01:00:48.599 --> 01:00:49.560
<v Speaker 1>we're going to

01:00:50.280 --> 01:00:51.480
<v Speaker 1>teach Calico

01:00:52.039 --> 01:00:54.839
<v Speaker 1>about how the network infrastructure of Packet looks

01:00:54.839 --> 01:00:55.079
<v Speaker 1>like.

01:00:57.485 --> 01:00:59.085
<v Speaker 1>What Packet looks like is

01:00:59.805 --> 01:01:00.765
<v Speaker 1>every node,

01:01:01.245 --> 01:01:03.405
<v Speaker 1>every device that you create will also have

01:01:03.405 --> 01:01:05.565
<v Speaker 1>a gateway address. You can also see this

01:01:05.565 --> 01:01:07.565
<v Speaker 1>in your Packet's in the

01:01:08.205 --> 01:01:09.085
<v Speaker 1>Packet's

01:01:09.245 --> 01:01:12.029
<v Speaker 1>screen. And the gateway is the address of

01:01:12.029 --> 01:01:13.470
<v Speaker 1>the router you talk to.

01:01:13.789 --> 01:01:15.470
<v Speaker 1>And this means we'll have to tell this

01:01:15.470 --> 01:01:16.190
<v Speaker 1>address,

01:01:16.509 --> 01:01:18.990
<v Speaker 1>hey, these pods exist, and they

01:01:19.309 --> 01:01:20.910
<v Speaker 1>reside on me, and I

01:01:21.309 --> 01:01:21.869
<v Speaker 1>will

01:01:22.990 --> 01:01:24.829
<v Speaker 1>be able to resolve this IP address for

01:01:24.829 --> 01:01:27.685
<v Speaker 1>you. And this we do through BGP.

01:01:27.685 --> 01:01:30.405
<v Speaker 1>So we'll set up a BGP session between

01:01:30.405 --> 01:01:31.845
<v Speaker 1>Calico node pod

01:01:32.085 --> 01:01:34.005
<v Speaker 1>and the packet router, and it will then

01:01:34.005 --> 01:01:36.165
<v Speaker 1>start telling the packet router, I have these

01:01:36.165 --> 01:01:38.325
<v Speaker 1>pods. You can contact me for this pod.

01:01:40.400 --> 01:01:42.880
<v Speaker 1>So that will be the next part of

01:01:42.880 --> 01:01:44.400
<v Speaker 1>our party trick, I guess.

01:01:46.000 --> 01:01:48.400
<v Speaker 1>We can again go into my repository.

01:01:50.079 --> 01:01:52.799
<v Speaker 1>And you will see a file called bgp

01:01:52.799 --> 01:01:53.759
<v Speaker 1>peer. Yaml.

01:01:55.925 --> 01:01:57.365
<v Speaker 1>Yep. Yes.

01:01:57.685 --> 01:02:00.565
<v Speaker 1>And it's templated, so we'll have to fill

01:02:00.565 --> 01:02:02.005
<v Speaker 1>it in a bit. So the first step

01:02:02.005 --> 01:02:03.605
<v Speaker 1>is the BGP configuration,

01:02:05.525 --> 01:02:06.725
<v Speaker 1>which we can copy paste.

01:02:11.090 --> 01:02:11.890
<v Speaker 0>K.

01:02:12.530 --> 01:02:14.850
<v Speaker 0>And this will have to apply with Calico

01:02:14.850 --> 01:02:17.490
<v Speaker 1>CTL instead of kubectl,

01:02:17.490 --> 01:02:18.370
<v Speaker 1>by the way.

01:02:18.930 --> 01:02:19.570
<v Speaker 1>K.

01:02:20.290 --> 01:02:21.010
<v Speaker 1>Alright.

01:02:21.250 --> 01:02:23.185
<v Speaker 0>Yep. Yep. I go.

01:02:23.425 --> 01:02:24.305
<v Speaker 0>Mhmm.

01:02:30.065 --> 01:02:32.545
<v Speaker 0>There we go. Okay. So we want our

01:02:32.545 --> 01:02:33.265
<v Speaker 0>server side.

01:02:34.170 --> 01:02:36.090
<v Speaker 1>Okay. So let's leave

01:02:36.170 --> 01:02:37.369
<v Speaker 1>that out for now.

01:02:38.650 --> 01:02:40.650
<v Speaker 1>This will set up later.

01:02:41.530 --> 01:02:43.690
<v Speaker 1>We can just remove those two fields.

01:02:46.089 --> 01:02:48.089
<v Speaker 1>I will we'll we're gonna edit this file

01:02:48.089 --> 01:02:50.089
<v Speaker 1>later and reintroduce them as a party trick,

01:02:50.085 --> 01:02:51.765
<v Speaker 1>but we won't need them for now. So

01:02:51.765 --> 01:02:53.205
<v Speaker 1>you can just comment them out.

01:02:54.964 --> 01:02:55.765
<v Speaker 0>So

01:02:57.285 --> 01:02:58.245
<v Speaker 1>let's just

01:02:58.885 --> 01:03:01.045
<v Speaker 1>take in what this all says. So

01:03:02.565 --> 01:03:04.645
<v Speaker 1>what Kali code does by default, if you

01:03:04.645 --> 01:03:06.405
<v Speaker 1>install it on an I p v four

01:03:06.000 --> 01:03:08.560
<v Speaker 1>network, it will create an overlay network,

01:03:09.440 --> 01:03:10.000
<v Speaker 1>and

01:03:11.840 --> 01:03:14.240
<v Speaker 1>it will use BGP as well, but in

01:03:14.240 --> 01:03:16.400
<v Speaker 1>a node to node mesh, as we call

01:03:16.400 --> 01:03:17.120
<v Speaker 1>it. So

01:03:17.440 --> 01:03:19.280
<v Speaker 1>every node will talk to every node and

01:03:19.280 --> 01:03:21.665
<v Speaker 1>use BGP to tell each other, I have

01:03:21.665 --> 01:03:23.585
<v Speaker 1>these pods. So it's like a a mesh

01:03:23.585 --> 01:03:24.225
<v Speaker 1>network.

01:03:24.625 --> 01:03:26.305
<v Speaker 1>So node a will tell, I have the

01:03:26.305 --> 01:03:28.145
<v Speaker 1>NGINX pods. Node b will tell, I have

01:03:28.145 --> 01:03:30.145
<v Speaker 1>the, I don't know, the Alpine pods.

01:03:30.545 --> 01:03:30.865
<v Speaker 1>And

01:03:32.145 --> 01:03:34.065
<v Speaker 1>but we don't want this behavior because

01:03:34.970 --> 01:03:37.289
<v Speaker 1>we have a router packet at the top

01:03:37.289 --> 01:03:38.650
<v Speaker 1>of a rack, and we can just tell

01:03:38.650 --> 01:03:40.010
<v Speaker 1>the router where the routes are. So we're

01:03:40.010 --> 01:03:41.770
<v Speaker 1>going to disable the node to node mesh

01:03:42.569 --> 01:03:45.609
<v Speaker 1>by setting node to node mesh enabled false.

01:03:45.609 --> 01:03:46.730
<v Speaker 1>And then we're going to

01:03:47.289 --> 01:03:48.569
<v Speaker 1>later configure

01:03:49.455 --> 01:03:52.175
<v Speaker 1>Kali code to directly talk to the router.

01:03:52.975 --> 01:03:55.055
<v Speaker 1>And so this means that all the traffic

01:03:55.055 --> 01:03:57.215
<v Speaker 1>will be reflected through the router from nodes

01:03:57.215 --> 01:03:58.495
<v Speaker 1>to the other nodes

01:03:59.055 --> 01:04:01.455
<v Speaker 1>instead of going through an overlay network.

01:04:02.900 --> 01:04:04.580
<v Speaker 1>And this this is also the reason why

01:04:04.580 --> 01:04:06.580
<v Speaker 1>we don't need to have some kind of

01:04:06.580 --> 01:04:08.340
<v Speaker 1>overlay network, but we can just use a

01:04:08.340 --> 01:04:10.340
<v Speaker 1>flat address space because we can bounce off

01:04:10.340 --> 01:04:11.940
<v Speaker 1>all the routes between the pods

01:04:12.180 --> 01:04:14.020
<v Speaker 1>through the packet routers.

01:04:16.325 --> 01:04:17.684
<v Speaker 1>So this is why we have this node

01:04:17.684 --> 01:04:20.005
<v Speaker 1>to node mesh enabled false. It's enabled through

01:04:20.005 --> 01:04:21.765
<v Speaker 1>by default, so we set it to false.

01:04:21.765 --> 01:04:24.325
<v Speaker 1>So can we apply this configuration

01:04:24.325 --> 01:04:25.845
<v Speaker 1>using Calico CTL?

01:04:28.110 --> 01:04:31.470
<v Speaker 0>We can try, but Oh, yeah. Wait.

01:04:31.870 --> 01:04:33.470
<v Speaker 1>Yeah. We have to do two things first.

01:04:33.470 --> 01:04:35.070
<v Speaker 1>We have to explicitly

01:04:35.070 --> 01:04:36.670
<v Speaker 1>set the kubeconfig

01:04:36.670 --> 01:04:40.030
<v Speaker 1>environment variable because otherwise, calico gets angry.

01:04:42.315 --> 01:04:44.315
<v Speaker 1>And then we set this to your KubeConfig

01:04:44.315 --> 01:04:44.955
<v Speaker 1>path.

01:04:47.675 --> 01:04:49.835
<v Speaker 0>I think that's already set because we can

01:04:49.835 --> 01:04:50.395
<v Speaker 0>do

01:04:50.635 --> 01:04:51.355
<v Speaker 0>it.

01:04:52.955 --> 01:04:53.595
<v Speaker 1>Yes. But

01:04:55.890 --> 01:04:57.570
<v Speaker 0>And

01:05:01.490 --> 01:05:05.410
<v Speaker 1>we have to set export datastoretype

01:05:05.410 --> 01:05:06.530
<v Speaker 1>equals Kubernetes.

01:05:09.195 --> 01:05:11.515
<v Speaker 1>This is because Calico can run-in two modes.

01:05:11.515 --> 01:05:13.915
<v Speaker 1>You can either store all the networking information

01:05:13.915 --> 01:05:15.275
<v Speaker 1>in etcd directly.

01:05:16.155 --> 01:05:17.515
<v Speaker 1>And this is because you can also use

01:05:17.515 --> 01:05:20.795
<v Speaker 1>Calico on non Kubernetes nodes to handle routing.

01:05:21.430 --> 01:05:23.350
<v Speaker 1>Or you can store it in Kubernetes directly,

01:05:23.350 --> 01:05:25.510
<v Speaker 1>and we'll use custom resource definitions to store

01:05:25.510 --> 01:05:26.150
<v Speaker 1>everything.

01:05:26.870 --> 01:05:28.710
<v Speaker 0>Oh, cool. Okay. Yep.

01:05:28.950 --> 01:05:30.870
<v Speaker 1>So Now I can run c

01:05:32.230 --> 01:05:33.750
<v Speaker 1>t l apply f

01:05:34.994 --> 01:05:36.355
<v Speaker 1>and then our file.

01:05:38.994 --> 01:05:39.715
<v Speaker 0>Yep.

01:05:40.115 --> 01:05:40.835
<v Speaker 0>Oh,

01:05:43.635 --> 01:05:45.315
<v Speaker 0>I'm sure I installed you.

01:05:46.115 --> 01:05:47.954
<v Speaker 1>I did so too. I saw you install

01:05:47.954 --> 01:05:48.194
<v Speaker 1>it.

01:05:52.400 --> 01:05:54.160
<v Speaker 1>Oh, maybe not on the admin no. Not

01:05:54.160 --> 01:05:55.680
<v Speaker 1>on the admin notes. We installed it on

01:05:55.680 --> 01:05:56.240
<v Speaker 1>your

01:05:57.280 --> 01:05:58.240
<v Speaker 1>the other box. Yep.

01:06:02.935 --> 01:06:04.775
<v Speaker 0>K. So, Carol,

01:06:06.455 --> 01:06:07.335
<v Speaker 0>not

01:06:20.820 --> 01:06:21.540
<v Speaker 1>Hey.

01:06:22.020 --> 01:06:22.660
<v Speaker 1>Cool.

01:06:23.460 --> 01:06:24.260
<v Speaker 1>Okay.

01:06:24.660 --> 01:06:27.300
<v Speaker 1>So now we're gonna set up

01:06:28.255 --> 01:06:30.655
<v Speaker 1>Calico to talk to the packet router. So

01:06:30.655 --> 01:06:32.255
<v Speaker 1>if we go back to my file, you

01:06:32.255 --> 01:06:34.415
<v Speaker 1>will see a BGP peer file,

01:06:34.815 --> 01:06:37.535
<v Speaker 1>BGP peer snippet. Just copy one of them.

01:06:37.535 --> 01:06:37.695
<v Speaker 1>Yes.

01:06:40.550 --> 01:06:43.590
<v Speaker 1>We don't need the the template stuff. Just

01:06:43.830 --> 01:06:46.310
<v Speaker 1>yep. That's enough. Yep. So

01:06:47.190 --> 01:06:48.950
<v Speaker 1>I have a little template that generates it

01:06:48.950 --> 01:06:51.590
<v Speaker 1>for every node in your packet project.

01:06:53.109 --> 01:06:55.270
<v Speaker 1>So this will be the the host name,

01:06:59.545 --> 01:07:00.265
<v Speaker 1>admin.

01:07:00.585 --> 01:07:02.825
<v Speaker 1>Then this will be the address of the

01:07:02.825 --> 01:07:03.865
<v Speaker 1>packet router,

01:07:06.345 --> 01:07:08.345
<v Speaker 1>which we can look up in

01:07:09.260 --> 01:07:10.780
<v Speaker 1>And of course, if we did this all

01:07:10.780 --> 01:07:12.540
<v Speaker 1>nicely, we would do this with Pulumi and

01:07:12.540 --> 01:07:15.180
<v Speaker 1>get the attribute out and then link it

01:07:15.180 --> 01:07:16.780
<v Speaker 1>all in. But this I'll leave this as

01:07:16.780 --> 01:07:17.740
<v Speaker 1>some

01:07:18.060 --> 01:07:19.980
<v Speaker 1>if you can send a PR to my

01:07:20.220 --> 01:07:21.900
<v Speaker 1>projects to convert it to Pulumi, I will

01:07:21.900 --> 01:07:22.460
<v Speaker 1>accept it.

01:07:23.305 --> 01:07:25.865
<v Speaker 1>So if you go to the admin node

01:07:27.465 --> 01:07:29.545
<v Speaker 0>I will definitely automate all of this. No

01:07:29.545 --> 01:07:32.025
<v Speaker 0>problem. Yeah. So you will should see the

01:07:32.025 --> 01:07:34.905
<v Speaker 1>gateway. Yeah. It's okay. Right? Yeah.

01:07:37.100 --> 01:07:39.420
<v Speaker 1>And then this AS number, this is

01:07:39.900 --> 01:07:40.460
<v Speaker 1>so

01:07:40.940 --> 01:07:43.820
<v Speaker 1>this is how each router identifies itself in

01:07:43.820 --> 01:07:46.540
<v Speaker 1>BGP as I understand it. People now say,

01:07:46.540 --> 01:07:48.380
<v Speaker 1>you don't know how this works. I don't

01:07:48.380 --> 01:07:49.660
<v Speaker 1>know how this works. I just tried it

01:07:49.660 --> 01:07:50.300
<v Speaker 1>out and it worked.

01:07:52.425 --> 01:07:52.985
<v Speaker 1>And

01:07:53.945 --> 01:07:56.425
<v Speaker 1>so this is the the identifying number of

01:07:56.425 --> 01:07:57.465
<v Speaker 1>the packet router.

01:07:58.105 --> 01:08:00.105
<v Speaker 1>As long as you didn't select

01:08:00.825 --> 01:08:03.385
<v Speaker 1>enable passwords when you set up your packet

01:08:03.385 --> 01:08:05.625
<v Speaker 1>projects, this should be enough. Otherwise, we also

01:08:05.625 --> 01:08:07.700
<v Speaker 1>need to provide the password of the router.

01:08:07.700 --> 01:08:09.140
<v Speaker 1>But I don't think you did that. Right?

01:08:09.220 --> 01:08:11.300
<v Speaker 0>No. No password. We are in the middle.

01:08:11.380 --> 01:08:13.380
<v Speaker 1>Yep. And the last field is a node

01:08:13.380 --> 01:08:15.060
<v Speaker 1>selector. So this will

01:08:15.940 --> 01:08:18.420
<v Speaker 1>and and usually, when you have our on

01:08:18.420 --> 01:08:20.500
<v Speaker 1>prem, you will have one router, and many

01:08:20.500 --> 01:08:21.540
<v Speaker 1>nodes will be

01:08:22.685 --> 01:08:24.444
<v Speaker 1>talking to this router. Right?

01:08:25.005 --> 01:08:27.805
<v Speaker 1>In in the packet clouds, each node gets

01:08:27.805 --> 01:08:29.324
<v Speaker 1>assigned its own

01:08:29.725 --> 01:08:33.005
<v Speaker 1>distinct public gateway. But usually, you'll have, I

01:08:33.005 --> 01:08:35.005
<v Speaker 1>don't know, 20 nodes talking to the same

01:08:35.005 --> 01:08:36.870
<v Speaker 1>public gateway. And this way, you so you

01:08:36.870 --> 01:08:39.030
<v Speaker 1>can use a node selector syntax here to,

01:08:39.030 --> 01:08:41.189
<v Speaker 1>for example, say, all nodes should talk to

01:08:41.189 --> 01:08:42.870
<v Speaker 1>this router,

01:08:43.030 --> 01:08:44.710
<v Speaker 1>or, I don't know, all nodes in Rack

01:08:44.710 --> 01:08:46.790
<v Speaker 1>1 should should talk to router a, and

01:08:46.790 --> 01:08:48.790
<v Speaker 1>all nodes in Rack 2 should talk to

01:08:48.790 --> 01:08:51.405
<v Speaker 1>router b. And this way, you can describe

01:08:51.405 --> 01:08:53.245
<v Speaker 1>what your topology looks like in your data

01:08:53.245 --> 01:08:53.885
<v Speaker 1>center.

01:08:54.285 --> 01:08:56.445
<v Speaker 1>But in the case of packets, every node

01:08:56.445 --> 01:08:58.445
<v Speaker 1>has its own router, and it talks to

01:08:58.445 --> 01:08:59.404
<v Speaker 1>it individually.

01:08:59.725 --> 01:09:01.405
<v Speaker 1>So we'll have to create a BGP peer

01:09:01.405 --> 01:09:03.165
<v Speaker 1>object per nodes that we add.

01:09:04.330 --> 01:09:04.889
<v Speaker 1>So

01:09:06.890 --> 01:09:09.210
<v Speaker 1>any questions about this or things

01:09:10.489 --> 01:09:11.609
<v Speaker 1>that are unclear?

01:09:12.569 --> 01:09:14.170
<v Speaker 0>No. I think that makes sense. So we're

01:09:14.170 --> 01:09:15.210
<v Speaker 0>just we're telling this

01:09:16.489 --> 01:09:16.810
<v Speaker 0>yeah.

01:09:17.455 --> 01:09:19.775
<v Speaker 0>You're saying if if we add worker one

01:09:19.775 --> 01:09:21.455
<v Speaker 0>and two, if we decide to design that

01:09:21.455 --> 01:09:23.455
<v Speaker 0>work, then we would just duplicate the style,

01:09:23.455 --> 01:09:25.375
<v Speaker 0>changing the node here. Right? The node name.

01:09:25.375 --> 01:09:27.295
<v Speaker 1>Yep. Yeah. And the peer IP

01:09:27.455 --> 01:09:28.175
<v Speaker 1>also.

01:09:29.055 --> 01:09:31.135
<v Speaker 1>Because every node will talk to a different

01:09:31.135 --> 01:09:33.929
<v Speaker 1>gateway address in packets.

01:09:34.250 --> 01:09:35.770
<v Speaker 1>So if we apply this

01:09:42.170 --> 01:09:43.050
<v Speaker 1>Okay.

01:09:43.450 --> 01:09:45.770
<v Speaker 1>Can you now type sudo oh, no. Yeah,

01:09:45.770 --> 01:09:46.569
<v Speaker 1>calico

01:09:46.810 --> 01:09:47.689
<v Speaker 1>node status.

01:09:48.285 --> 01:09:50.204
<v Speaker 1>Calico CTL node status.

01:09:52.205 --> 01:09:53.965
<v Speaker 1>So now we can see that it has

01:09:53.965 --> 01:09:56.445
<v Speaker 1>established a connection with the

01:09:57.565 --> 01:09:59.005
<v Speaker 1>routers at Packet

01:09:59.725 --> 01:10:01.165
<v Speaker 1>and that this connection is up.

01:10:02.070 --> 01:10:04.150
<v Speaker 1>And this should mean that Calico is now

01:10:04.150 --> 01:10:06.550
<v Speaker 1>announcing where all our pods are. So if

01:10:06.550 --> 01:10:07.590
<v Speaker 1>we now go to

01:10:07.909 --> 01:10:08.550
<v Speaker 1>our

01:10:08.949 --> 01:10:10.869
<v Speaker 1>if we now curl it, it should work,

01:10:10.869 --> 01:10:11.429
<v Speaker 1>I think.

01:10:11.830 --> 01:10:13.110
<v Speaker 0>It has woo.

01:10:14.085 --> 01:10:16.085
<v Speaker 1>And if it will even work from my

01:10:16.085 --> 01:10:17.605
<v Speaker 1>computer. So if if we want to do

01:10:17.605 --> 01:10:19.445
<v Speaker 1>a party trick, you can send me the

01:10:19.445 --> 01:10:20.965
<v Speaker 1>link to the pod

01:10:23.605 --> 01:10:24.805
<v Speaker 1>in the chat and

01:10:29.920 --> 01:10:30.639
<v Speaker 1>Here.

01:10:31.840 --> 01:10:33.519
<v Speaker 1>And if I go to it

01:10:36.320 --> 01:10:37.760
<v Speaker 0>You can share your screen too if you

01:10:37.760 --> 01:10:39.280
<v Speaker 0>wish, you wanna show it off.

01:10:40.079 --> 01:10:42.320
<v Speaker 1>Yeah. So let's share my screen.

01:10:49.815 --> 01:10:51.815
<v Speaker 1>Okay. I'm sharing my screen.

01:10:52.055 --> 01:10:54.615
<v Speaker 1>Yeah. We're now switched over. Here we go.

01:10:55.015 --> 01:10:56.615
<v Speaker 1>Look at this. There we go.

01:10:57.470 --> 01:10:59.470
<v Speaker 1>All the way from a pod in your

01:10:59.470 --> 01:11:01.870
<v Speaker 1>network through the packet routers to my house

01:11:01.870 --> 01:11:02.670
<v Speaker 1>in Germany

01:11:03.710 --> 01:11:05.550
<v Speaker 1>with no overlay networks.

01:11:06.110 --> 01:11:09.310
<v Speaker 0>Okay. That's pretty cool. That's pretty cool. Right?

01:11:09.710 --> 01:11:11.070
<v Speaker 0>Yeah. Yeah. I'm impressed.

01:11:13.025 --> 01:11:14.145
<v Speaker 1>Okay. So

01:11:14.545 --> 01:11:16.625
<v Speaker 1>do we want to add another node to

01:11:16.625 --> 01:11:17.425
<v Speaker 1>our cluster?

01:11:17.745 --> 01:11:19.665
<v Speaker 1>Because the next cool party trick that we

01:11:19.665 --> 01:11:21.345
<v Speaker 1>could do, if you want, if you still

01:11:21.345 --> 01:11:21.985
<v Speaker 1>have time,

01:11:23.345 --> 01:11:26.545
<v Speaker 1>is we can set up some load balancing

01:11:26.210 --> 01:11:28.530
<v Speaker 1>and have a service that we can expose

01:11:28.530 --> 01:11:29.809
<v Speaker 1>to the outside world.

01:11:30.050 --> 01:11:32.290
<v Speaker 0>Yeah. I definitely wanna see this this service

01:11:32.290 --> 01:11:35.809
<v Speaker 0>stuff. So let's let's do that then. Yep.

01:11:36.610 --> 01:11:38.210
<v Speaker 1>So but, yeah, we can do it with

01:11:38.210 --> 01:11:39.889
<v Speaker 1>one note, but it's not that interesting. With

01:11:39.889 --> 01:11:43.014
<v Speaker 1>two notes, I think it's it's cooler. Right?

01:11:43.494 --> 01:11:44.215
<v Speaker 1>So

01:11:46.054 --> 01:11:47.094
<v Speaker 1>if you We

01:11:48.054 --> 01:11:49.014
<v Speaker 0>need our

01:11:50.534 --> 01:11:51.894
<v Speaker 0>k. Maybe the end. Right?

01:11:52.375 --> 01:11:55.415
<v Speaker 1>Yeah. But we're gonna write a join configuration

01:11:55.415 --> 01:11:56.695
<v Speaker 1>instead of an in its configuration.

01:11:57.360 --> 01:11:59.040
<v Speaker 1>But you can find that again in my

01:11:59.040 --> 01:11:59.840
<v Speaker 1>repository.

01:11:59.840 --> 01:12:00.320
<v Speaker 1>So

01:12:01.360 --> 01:12:03.520
<v Speaker 0>You've done all the hard work. I don't

01:12:03.520 --> 01:12:04.239
<v Speaker 0>have to.

01:12:04.720 --> 01:12:06.080
<v Speaker 1>Exactly. So

01:12:07.280 --> 01:12:08.560
<v Speaker 1>you can find this

01:12:09.200 --> 01:12:10.480
<v Speaker 1>over there. Yep. Perfect.

01:12:11.385 --> 01:12:13.064
<v Speaker 0>Alright. So I'm gonna

01:12:13.385 --> 01:12:15.144
<v Speaker 0>paste this, like, the code

01:12:15.465 --> 01:12:17.864
<v Speaker 0>and move presentation again.

01:12:18.264 --> 01:12:18.905
<v Speaker 0>Mhmm.

01:12:19.864 --> 01:12:20.905
<v Speaker 0>Close that.

01:12:21.545 --> 01:12:23.704
<v Speaker 0>I'm back over to my terminal, and we

01:12:23.704 --> 01:12:26.585
<v Speaker 0>will create a content

01:12:25.750 --> 01:12:26.550
<v Speaker 0>panel.

01:12:27.910 --> 01:12:29.590
<v Speaker 0>We can remove this.

01:12:29.990 --> 01:12:32.150
<v Speaker 1>Yeah. And what did you remove just now?

01:12:32.150 --> 01:12:34.470
<v Speaker 1>Wait. Can you I think we removed too

01:12:34.470 --> 01:12:36.630
<v Speaker 1>much. No. Yeah. That that we can remove.

01:12:36.630 --> 01:12:37.429
<v Speaker 1>Yes. Correct.

01:12:37.990 --> 01:12:38.630
<v Speaker 1>Good.

01:12:39.430 --> 01:12:42.845
<v Speaker 0>That syntax is a bit weird. Right? Yeah.

01:12:42.845 --> 01:12:45.405
<v Speaker 1>Certificates key can go and control plane can

01:12:45.405 --> 01:12:46.285
<v Speaker 1>go as well.

01:12:46.685 --> 01:12:47.405
<v Speaker 1>Yep.

01:12:50.925 --> 01:12:52.765
<v Speaker 1>We can move the volume that we don't

01:12:52.765 --> 01:12:55.485
<v Speaker 0>need, and then we need to add our

01:12:55.485 --> 01:12:57.459
<v Speaker 0>address. Right? Mhmm.

01:12:58.020 --> 01:13:00.340
<v Speaker 1>Yeah. So this is the address. Very

01:13:00.980 --> 01:13:01.539
<v Speaker 1>good.

01:13:03.940 --> 01:13:06.099
<v Speaker 0>Okay. So Worker

01:13:07.380 --> 01:13:10.020
<v Speaker 0>1, the B C P 6 address.

01:13:12.095 --> 01:13:13.775
<v Speaker 1>But we are on Worker 0. Right? It's

01:13:13.775 --> 01:13:14.735
<v Speaker 1>not Worker 1,

01:13:15.135 --> 01:13:16.015
<v Speaker 1>are we?

01:13:17.375 --> 01:13:19.855
<v Speaker 0>No. We're on Worker 1. Okay. Good. There

01:13:19.855 --> 01:13:21.375
<v Speaker 0>there is no Worker 0 because it wasn't

01:13:21.375 --> 01:13:22.175
<v Speaker 0>automated.

01:13:22.895 --> 01:13:24.735
<v Speaker 0>Well, it was automated, but I didn't add

01:13:24.735 --> 01:13:27.030
<v Speaker 0>an increment on the tenth or anything. Yeah.

01:13:27.030 --> 01:13:30.149
<v Speaker 0>How do I get the join token again?

01:13:30.230 --> 01:13:31.030
<v Speaker 0>So with the print

01:13:31.670 --> 01:13:33.510
<v Speaker 1>Yeah. There is some print command for this

01:13:33.510 --> 01:13:34.869
<v Speaker 1>to get a new one. Yes.

01:13:36.070 --> 01:13:37.269
<v Speaker 1>I think it's

01:13:39.110 --> 01:13:40.309
<v Speaker 1>cube a d m

01:13:41.925 --> 01:13:43.364
<v Speaker 1>token generates.

01:13:43.605 --> 01:13:44.244
<v Speaker 1>No.

01:13:45.525 --> 01:13:47.284
<v Speaker 1>This will just generate I

01:13:47.925 --> 01:13:48.565
<v Speaker 1>think we need to No.

01:13:53.890 --> 01:13:56.210
<v Speaker 0>Great. There we go. Yeah. But that just

01:13:56.210 --> 01:13:57.970
<v Speaker 1>generates a token. It doesn't store it. So

01:13:57.970 --> 01:13:58.929
<v Speaker 1>that's not enough.

01:14:00.690 --> 01:14:02.370
<v Speaker 1>Should I just follow-up and find the first

01:14:02.370 --> 01:14:05.170
<v Speaker 0>one? Yeah. And otherwise, we need to rerun

01:14:05.170 --> 01:14:06.850
<v Speaker 1>a certain part of the interface.

01:14:07.765 --> 01:14:08.565
<v Speaker 1>Eight.

01:14:09.205 --> 01:14:10.085
<v Speaker 1>Kubeadm

01:14:10.085 --> 01:14:11.684
<v Speaker 1>generates new

01:14:12.165 --> 01:14:14.005
<v Speaker 1>Okay. Token. I will just ask You

01:14:16.245 --> 01:14:17.045
<v Speaker 1>found it?

01:14:18.485 --> 01:14:21.765
<v Speaker 1>Yeah. Yep. Yep. Okay. So we will

01:14:22.890 --> 01:14:24.010
<v Speaker 1>have to set so

01:14:24.650 --> 01:14:26.730
<v Speaker 1>we can do the token

01:14:27.690 --> 01:14:28.650
<v Speaker 1>and set it.

01:14:30.330 --> 01:14:32.969
<v Speaker 1>If we are good citizens, we also set

01:14:32.969 --> 01:14:36.010
<v Speaker 1>the discovery token c a cert hash.

01:14:37.575 --> 01:14:39.175
<v Speaker 1>But I just have unsafe

01:14:39.175 --> 01:14:43.655
<v Speaker 1>skip CA verification now. That also works. It's

01:14:43.895 --> 01:14:45.735
<v Speaker 1>not completely unsafe.

01:14:47.015 --> 01:14:47.975
<v Speaker 1>So it's

01:14:48.215 --> 01:14:49.495
<v Speaker 1>only unsafe

01:14:49.495 --> 01:14:50.375
<v Speaker 1>if somebody

01:14:51.310 --> 01:14:53.630
<v Speaker 1>knows what your Bootstrap token is. So if

01:14:53.630 --> 01:14:56.110
<v Speaker 1>that leaks, then somebody can impersonate the control

01:14:56.110 --> 01:14:56.750
<v Speaker 1>plane.

01:14:57.230 --> 01:14:57.790
<v Speaker 1>But

01:14:59.070 --> 01:15:02.510
<v Speaker 1>we can just skip it for now. It's

01:15:02.510 --> 01:15:04.525
<v Speaker 1>not like anybody can see this token right

01:15:04.525 --> 01:15:06.364
<v Speaker 1>now, right, on the stream? Oh, wait.

01:15:07.005 --> 01:15:08.044
<v Speaker 1>But that's fine.

01:15:08.684 --> 01:15:09.244
<v Speaker 1>Yeah.

01:15:09.965 --> 01:15:12.684
<v Speaker 0>Okay. Anything else I have to change here?

01:15:13.244 --> 01:15:14.445
<v Speaker 1>No. I think that's it.

01:15:16.040 --> 01:15:17.880
<v Speaker 1>Oh, wait. I see a typo. One sec.

01:15:17.880 --> 01:15:20.600
<v Speaker 1>Open it again. First line. There's a space

01:15:20.600 --> 01:15:21.400
<v Speaker 1>too much.

01:15:23.080 --> 01:15:24.360
<v Speaker 1>Yep. Perfect.

01:15:25.160 --> 01:15:27.080
<v Speaker 1>So now we do kubeadm

01:15:27.080 --> 01:15:28.520
<v Speaker 1>join dash dash config.

01:15:30.005 --> 01:15:31.205
<v Speaker 0>Yeah. And

01:15:33.365 --> 01:15:34.965
<v Speaker 0>you can install it again, though.

01:15:35.285 --> 01:15:36.725
<v Speaker 0>Because we've always thought on it. I don't

01:15:36.725 --> 01:15:37.605
<v Speaker 0>know which.

01:15:38.725 --> 01:15:39.364
<v Speaker 0>Really?

01:15:39.925 --> 01:15:41.845
<v Speaker 0>I should have done the user data in

01:15:41.845 --> 01:15:44.720
<v Speaker 0>advance, but I will automate this. Yep. And

01:15:45.360 --> 01:15:48.160
<v Speaker 1>you'll also have to install Docker, disable swap,

01:15:48.160 --> 01:15:48.640
<v Speaker 1>and

01:15:49.520 --> 01:15:50.560
<v Speaker 1>set this

01:15:51.680 --> 01:15:52.960
<v Speaker 1>forwarding rule.

01:15:56.415 --> 01:15:59.534
<v Speaker 0>Got it. So stop Docker. Let's pull up

01:15:59.534 --> 01:16:01.054
<v Speaker 0>the echo

01:16:02.094 --> 01:16:03.534
<v Speaker 0>one command.

01:16:03.695 --> 01:16:04.574
<v Speaker 1>Exactly.

01:16:06.014 --> 01:16:08.415
<v Speaker 0>And I can manually do the other two

01:16:08.415 --> 01:16:09.054
<v Speaker 0>commands.

01:16:09.454 --> 01:16:09.775
<v Speaker 0>So

01:16:10.640 --> 01:16:13.280
<v Speaker 0>what's that? So we wanna do with this

01:16:13.280 --> 01:16:16.159
<v Speaker 0>control, docker, and enable

01:16:17.680 --> 01:16:19.040
<v Speaker 0>docker service,

01:16:19.200 --> 01:16:21.600
<v Speaker 0>swap off. I'm assuming the device will be

01:16:21.600 --> 01:16:22.160
<v Speaker 0>the same.

01:16:23.305 --> 01:16:26.665
<v Speaker 0>It was too. Was too. Yep. Echo.

01:16:26.905 --> 01:16:27.945
<v Speaker 0>Got it. Yep.

01:16:29.145 --> 01:16:30.905
<v Speaker 0>And I can do it. Be the end

01:16:30.905 --> 01:16:32.345
<v Speaker 0>join onto

01:16:32.345 --> 01:16:34.585
<v Speaker 0>convo dot level. Mhmm.

01:16:38.290 --> 01:16:39.329
<v Speaker 0>Copy that.

01:16:40.130 --> 01:16:41.889
<v Speaker 0>And, no, wait. I did run this. Right?

01:16:42.850 --> 01:16:43.489
<v Speaker 1>Yeah.

01:16:46.850 --> 01:16:47.810
<v Speaker 0>At

01:16:47.810 --> 01:16:48.850
<v Speaker 0>install. Oh, no.

01:16:49.835 --> 01:16:50.635
<v Speaker 0>Install.

01:16:54.715 --> 01:16:56.715
<v Speaker 0>I'll just run all of them. Maybe it

01:16:56.715 --> 01:16:59.114
<v Speaker 1>got confused because of sudo again.

01:17:00.395 --> 01:17:01.755
<v Speaker 1>Or no? Oh, well

01:17:03.355 --> 01:17:04.475
<v Speaker 0>okay. You wanted to

01:17:06.340 --> 01:17:07.780
<v Speaker 1>Yeah. This is working.

01:17:08.820 --> 01:17:10.260
<v Speaker 0>Oh, maybe I didn't know that. Oh, no.

01:17:10.260 --> 01:17:12.020
<v Speaker 0>I installed Docker. Ah. Mhmm.

01:17:17.235 --> 01:17:19.315
<v Speaker 0>So let's just confirm what I called the

01:17:19.315 --> 01:17:20.355
<v Speaker 0>local config,

01:17:20.355 --> 01:17:23.954
<v Speaker 0>config dot YAML, the BDM join config.

01:17:27.475 --> 01:17:28.034
<v Speaker 1>K.

01:17:29.554 --> 01:17:31.875
<v Speaker 1>Unknown field bootstrap token. Interesting.

01:17:34.490 --> 01:17:36.570
<v Speaker 1>Oh, it needs to be indented once.

01:17:36.730 --> 01:17:39.770
<v Speaker 1>Yeah. Bootstrap token needs to indent. And then

01:17:41.050 --> 01:17:43.370
<v Speaker 1>let's see. I think we made some

01:17:44.010 --> 01:17:45.610
<v Speaker 1>a little typo there.

01:17:46.570 --> 01:17:47.690
<v Speaker 1>What does it look like?

01:17:52.085 --> 01:17:53.925
<v Speaker 1>Oh, yeah. It's good like this. Yep.

01:17:56.245 --> 01:17:56.885
<v Speaker 0>K.

01:17:57.685 --> 01:18:00.724
<v Speaker 0>K. So up here, I'm just gonna run

01:18:00.725 --> 01:18:02.405
<v Speaker 0>the that notes.

01:18:05.610 --> 01:18:08.330
<v Speaker 0>Hey. It's worker one. Yeah. It's not ready

01:18:08.330 --> 01:18:10.409
<v Speaker 1>currently because it's still starting up

01:18:10.890 --> 01:18:11.769
<v Speaker 1>the

01:18:12.570 --> 01:18:15.130
<v Speaker 1>Calico nodes, probably, the daemon.

01:18:15.770 --> 01:18:17.290
<v Speaker 1>So it runs this as a daemon sets

01:18:17.290 --> 01:18:18.010
<v Speaker 1>on each node,

01:18:18.675 --> 01:18:20.115
<v Speaker 1>and it will take a little while to

01:18:20.115 --> 01:18:20.755
<v Speaker 1>come up.

01:18:21.635 --> 01:18:23.315
<v Speaker 0>K. We can try that with a watch,

01:18:23.315 --> 01:18:25.795
<v Speaker 0>wait for the sales to change. Yep. So

01:18:25.875 --> 01:18:27.635
<v Speaker 0>what we're gonna do now is we're gonna

01:18:27.635 --> 01:18:28.275
<v Speaker 0>run

01:18:28.755 --> 01:18:31.395
<v Speaker 0>multiple engine x pods, expose them with a

01:18:31.395 --> 01:18:33.635
<v Speaker 0>service IP, and use that to do load

01:18:33.635 --> 01:18:36.079
<v Speaker 0>balancing. Is that correct? Yep. Exactly.

01:18:36.400 --> 01:18:39.760
<v Speaker 1>So let's first delete our NGINX pods and

01:18:39.760 --> 01:18:41.439
<v Speaker 1>create a deployment instead

01:18:41.520 --> 01:18:42.719
<v Speaker 1>so we can

01:18:46.895 --> 01:18:47.934
<v Speaker 1>so we can do

01:18:48.255 --> 01:18:48.735
<v Speaker 1>create

01:18:49.215 --> 01:18:51.055
<v Speaker 1>deployment, and then we do, I don't know,

01:18:51.055 --> 01:18:52.974
<v Speaker 1>replicas 10 or something.

01:18:55.135 --> 01:18:57.295
<v Speaker 0>I'm really looking forward to that new generator

01:18:57.295 --> 01:18:59.055
<v Speaker 0>on this kind of oh,

01:19:01.170 --> 01:19:04.290
<v Speaker 0>I run engine x, and then it's engine

01:19:04.290 --> 01:19:06.610
<v Speaker 0>x, right, both. Right.

01:19:07.330 --> 01:19:09.329
<v Speaker 1>Yep. And now we can do

01:19:10.770 --> 01:19:12.690
<v Speaker 1>and hope and if we do a wide,

01:19:12.690 --> 01:19:14.530
<v Speaker 1>we'll see that they get scheduled,

01:19:14.530 --> 01:19:15.969
<v Speaker 1>hopefully, across the cluster.

01:19:19.015 --> 01:19:19.815
<v Speaker 0>Yep.

01:19:25.015 --> 01:19:26.855
<v Speaker 0>And we just wait on two more.

01:19:28.455 --> 01:19:30.055
<v Speaker 1>Yeah. So you'll need to download the image

01:19:30.055 --> 01:19:30.775
<v Speaker 1>on the other node,

01:19:31.980 --> 01:19:33.100
<v Speaker 1>probably. Or

01:19:38.620 --> 01:19:39.980
<v Speaker 0>I'm gonna see the watch one and then

01:19:39.980 --> 01:19:41.020
<v Speaker 0>stop the installation.

01:19:43.340 --> 01:19:45.340
<v Speaker 0>But do we still need to when we

01:19:45.340 --> 01:19:47.340
<v Speaker 0>were looking at the

01:19:48.115 --> 01:19:49.155
<v Speaker 0>Kalicool,

01:19:50.355 --> 01:19:52.835
<v Speaker 0>we need to add our BGP here. Is

01:19:52.835 --> 01:19:53.475
<v Speaker 0>that right?

01:19:54.995 --> 01:19:56.114
<v Speaker 1>Yep. Exactly.

01:19:56.435 --> 01:19:56.915
<v Speaker 1>But

01:19:57.795 --> 01:19:59.715
<v Speaker 1>we so we'll also have to add the

01:19:59.715 --> 01:20:01.635
<v Speaker 1>worker one. Yep. So

01:20:01.880 --> 01:20:04.040
<v Speaker 1>we can just add another element to the

01:20:04.040 --> 01:20:04.599
<v Speaker 1>list.

01:20:06.840 --> 01:20:08.360
<v Speaker 0>Yeah. I think that's essential.

01:20:10.520 --> 01:20:12.199
<v Speaker 1>And and this, of course,

01:20:12.520 --> 01:20:13.079
<v Speaker 1>again,

01:20:14.165 --> 01:20:16.645
<v Speaker 1>smells like templating and automation.

01:20:17.045 --> 01:20:17.285
<v Speaker 1>But

01:20:19.205 --> 01:20:20.485
<v Speaker 0>So

01:20:20.725 --> 01:20:21.205
<v Speaker 0>need

01:20:21.925 --> 01:20:24.325
<v Speaker 0>it's IP address, but also the gateway. So

01:20:24.805 --> 01:20:27.125
<v Speaker 0>Oh, only the gateway you need. Only the

01:20:27.125 --> 01:20:28.005
<v Speaker 0>gateway. Okay. Yeah.

01:20:30.940 --> 01:20:31.900
<v Speaker 0>It's four.

01:20:37.020 --> 01:20:37.739
<v Speaker 1>K.

01:20:38.219 --> 01:20:38.939
<v Speaker 1>We

01:20:39.500 --> 01:20:40.780
<v Speaker 1>can apply

01:20:40.780 --> 01:20:41.260
<v Speaker 1>this.

01:20:45.785 --> 01:20:47.705
<v Speaker 1>Yeah. And now on the worker, we can

01:20:47.705 --> 01:20:48.264
<v Speaker 1>do

01:20:48.825 --> 01:20:50.744
<v Speaker 1>Calico CTO status

01:20:51.145 --> 01:20:52.745
<v Speaker 1>node status. So the thing is you have

01:20:52.745 --> 01:20:53.705
<v Speaker 1>to run this

01:20:54.469 --> 01:20:57.749
<v Speaker 1>on the node itself because it talks

01:20:58.150 --> 01:21:00.630
<v Speaker 1>to the BIRT daemon directly that's running.

01:21:01.670 --> 01:21:03.110
<v Speaker 1>So BIRT is

01:21:03.830 --> 01:21:06.630
<v Speaker 1>the daemon that runs inside the calico node

01:21:06.630 --> 01:21:08.870
<v Speaker 1>pods that acts that talks to

01:21:09.695 --> 01:21:10.574
<v Speaker 1>router.

01:21:12.494 --> 01:21:13.214
<v Speaker 0>Okay.

01:21:14.815 --> 01:21:16.974
<v Speaker 1>Look at this. It's not healthy.

01:21:17.454 --> 01:21:18.334
<v Speaker 1>Let's look

01:21:20.414 --> 01:21:21.934
<v Speaker 1>at the pods in the

01:21:22.940 --> 01:21:24.059
<v Speaker 1>Caliper system.

01:21:24.300 --> 01:21:25.340
<v Speaker 0>The images?

01:21:26.139 --> 01:21:27.179
<v Speaker 1>I don't know.

01:21:28.380 --> 01:21:29.979
<v Speaker 1>But something is off.

01:21:31.739 --> 01:21:32.540
<v Speaker 0>So

01:21:32.540 --> 01:21:35.260
<v Speaker 0>we're still waiting on so that's not what

01:21:35.260 --> 01:21:37.420
<v Speaker 0>I don't think is healthy yet. Right? Yeah.

01:21:38.125 --> 01:21:38.765
<v Speaker 1>So

01:21:40.205 --> 01:21:41.565
<v Speaker 1>there are a few

01:21:41.805 --> 01:21:43.565
<v Speaker 1>can you look at the

01:21:44.525 --> 01:21:46.845
<v Speaker 1>pods in the Calico system

01:21:46.845 --> 01:21:47.885
<v Speaker 1>namespace?

01:21:47.965 --> 01:21:49.885
<v Speaker 1>Are they all running? So there's one crashing.

01:21:49.885 --> 01:21:50.285
<v Speaker 1>You see?

01:21:54.950 --> 01:21:57.270
<v Speaker 1>It has been it has crashed five times

01:21:57.270 --> 01:21:59.350
<v Speaker 1>in the past three minutes, so it's not

01:21:59.350 --> 01:22:00.230
<v Speaker 1>very healthy.

01:22:02.230 --> 01:22:05.110
<v Speaker 0>Yeah. Both the worker one parts are failing.

01:22:05.110 --> 01:22:06.950
<v Speaker 0>So let's grab the logs.

01:22:07.350 --> 01:22:08.630
<v Speaker 1>Yeah. Let's see what's up.

01:22:09.565 --> 01:22:11.164
<v Speaker 1>Is where we go off script.

01:22:13.724 --> 01:22:15.005
<v Speaker 1>Oh, the namespace.

01:22:15.005 --> 01:22:15.484
<v Speaker 1>Yep.

01:22:20.844 --> 01:22:21.244
<v Speaker 1>K.

01:22:22.690 --> 01:22:24.050
<v Speaker 1>What is the error?

01:22:32.530 --> 01:22:35.170
<v Speaker 0>It says successfully loading to config.

01:22:35.730 --> 01:22:37.170
<v Speaker 0>I think it crashed. Yeah.

01:22:39.665 --> 01:22:41.824
<v Speaker 1>Can you look at the Calico note one?

01:22:41.824 --> 01:22:42.945
<v Speaker 1>The typhob

01:22:43.744 --> 01:22:45.184
<v Speaker 1>part is less interesting.

01:22:46.065 --> 01:22:47.905
<v Speaker 1>I don't even know what it does, I

01:22:47.905 --> 01:22:48.145
<v Speaker 1>think.

01:23:10.985 --> 01:23:12.584
<v Speaker 0>So let's do a

01:23:14.344 --> 01:23:15.144
<v Speaker 0>right.

01:23:16.105 --> 01:23:17.945
<v Speaker 0>Bring that. That shouldn't be on it from

01:23:17.945 --> 01:23:18.105
<v Speaker 0>there.

01:23:26.639 --> 01:23:28.079
<v Speaker 0>Ah. Failing.

01:23:28.400 --> 01:23:29.599
<v Speaker 0>Or it's not ready.

01:23:30.080 --> 01:23:30.800
<v Speaker 1>Okay.

01:23:31.920 --> 01:23:33.039
<v Speaker 1>But why not?

01:23:33.920 --> 01:23:34.479
<v Speaker 0>Oh,

01:23:35.199 --> 01:23:35.920
<v Speaker 1>look at this.

01:23:37.655 --> 01:23:38.695
<v Speaker 1>No such

01:23:39.415 --> 01:23:42.135
<v Speaker 1>file directory node name. Oh, we didn't modify

01:23:42.135 --> 01:23:43.655
<v Speaker 0>the result.com.

01:23:45.335 --> 01:23:46.295
<v Speaker 1>That might be

01:23:48.375 --> 01:23:49.255
<v Speaker 1>related,

01:23:49.415 --> 01:23:49.975
<v Speaker 1>but not sure.

01:23:50.920 --> 01:23:51.559
<v Speaker 1>But

01:23:54.039 --> 01:23:56.599
<v Speaker 1>Mhmm. And we also have an error here

01:23:56.599 --> 01:23:59.239
<v Speaker 0>saying that says node name failed just like

01:23:59.239 --> 01:24:00.039
<v Speaker 0>this.

01:24:00.760 --> 01:24:01.399
<v Speaker 1>Yeah.

01:24:02.280 --> 01:24:04.039
<v Speaker 1>This is all a bit suspect.

01:24:05.320 --> 01:24:06.360
<v Speaker 1>Yeah. Directories.

01:24:06.844 --> 01:24:07.485
<v Speaker 1>Yeah.

01:24:08.525 --> 01:24:09.965
<v Speaker 1>I'm not sure if this is a directory

01:24:09.965 --> 01:24:11.244
<v Speaker 1>inside the

01:24:11.485 --> 01:24:13.885
<v Speaker 1>pod, the thing or not. K. Can

01:24:18.605 --> 01:24:19.165
<v Speaker 0>No pressure.

01:24:23.710 --> 01:24:25.710
<v Speaker 1>Can we look at the logs one more

01:24:25.710 --> 01:24:26.270
<v Speaker 1>time?

01:24:27.150 --> 01:24:28.830
<v Speaker 1>Maybe it tells more now.

01:24:29.390 --> 01:24:30.030
<v Speaker 0>I

01:24:30.750 --> 01:24:33.230
<v Speaker 0>may have to delete it at the store

01:24:33.230 --> 01:24:34.270
<v Speaker 0>and fresher back up.

01:24:43.545 --> 01:24:44.905
<v Speaker 0>And catch it quickly.

01:24:46.264 --> 01:24:47.545
<v Speaker 1>I

01:24:47.545 --> 01:24:49.465
<v Speaker 1>think you know we're now looking at the

01:24:49.465 --> 01:24:49.864
<v Speaker 1>wrong one.

01:24:50.700 --> 01:24:52.700
<v Speaker 1>This is the healthy one, I think.

01:24:54.620 --> 01:24:55.660
<v Speaker 1>We need to

01:24:56.940 --> 01:24:58.700
<v Speaker 1>have the one on worker one.

01:24:59.260 --> 01:25:01.020
<v Speaker 1>I see what's going on.

01:25:02.140 --> 01:25:03.820
<v Speaker 1>You see the IP

01:25:03.820 --> 01:25:04.140
<v Speaker 1>address?

01:25:05.395 --> 01:25:07.555
<v Speaker 1>Oh, no. Wait. That's okay. Never mind. Yeah.

01:25:07.555 --> 01:25:08.995
<v Speaker 1>There's something fishy here.

01:25:11.875 --> 01:25:13.235
<v Speaker 0>And why is it got an IP v

01:25:13.235 --> 01:25:15.235
<v Speaker 0>four address? Exactly.

01:25:15.875 --> 01:25:16.594
<v Speaker 1>So

01:25:16.675 --> 01:25:18.515
<v Speaker 1>I think I know what we did wrong.

01:25:22.150 --> 01:25:24.230
<v Speaker 0>You say we, but you mean me. Right?

01:25:24.710 --> 01:25:26.469
<v Speaker 1>Well, no. We we together.

01:25:27.030 --> 01:25:28.070
<v Speaker 1>Can

01:25:28.070 --> 01:25:28.630
<v Speaker 1>you

01:25:29.910 --> 01:25:30.790
<v Speaker 1>okay. Yep.

01:25:31.715 --> 01:25:33.235
<v Speaker 1>So this usually means

01:25:34.435 --> 01:25:36.595
<v Speaker 1>so we have to, in our kube ad

01:25:36.595 --> 01:25:37.875
<v Speaker 1>m config, tell

01:25:38.435 --> 01:25:41.075
<v Speaker 1>the worker what their IP address is. If

01:25:41.075 --> 01:25:42.995
<v Speaker 1>you don't do this, it will

01:25:43.250 --> 01:25:45.410
<v Speaker 1>we did this. No.

01:25:45.410 --> 01:25:46.850
<v Speaker 0>Because I was going to update this, and

01:25:46.850 --> 01:25:48.929
<v Speaker 0>you told me we didn't have to. So

01:25:48.929 --> 01:25:51.090
<v Speaker 0>it was your fault. Oh, but it is.

01:25:51.810 --> 01:25:52.690
<v Speaker 1>It is.

01:25:54.690 --> 01:25:55.010
<v Speaker 1>Interesting.

01:26:01.785 --> 01:26:03.625
<v Speaker 1>Let me think. But, yeah, something is going

01:26:03.625 --> 01:26:05.785
<v Speaker 1>wrong there, and it's auto detecting the wrong

01:26:05.785 --> 01:26:08.105
<v Speaker 1>IP address. And this is why it isn't

01:26:08.105 --> 01:26:08.745
<v Speaker 1>healthy.

01:26:09.145 --> 01:26:11.465
<v Speaker 0>Can we do a QVDM reset on that

01:26:11.465 --> 01:26:13.065
<v Speaker 0>node? Yeah. Like this?

01:26:13.385 --> 01:26:13.865
<v Speaker 0>We can.

01:26:15.760 --> 01:26:18.480
<v Speaker 1>But you will have to kubectl delete notes

01:26:18.480 --> 01:26:20.080
<v Speaker 1>manually from a

01:26:20.240 --> 01:26:21.280
<v Speaker 1>Yep. Afterwards.

01:26:27.255 --> 01:26:28.454
<v Speaker 0>K. Now

01:26:28.855 --> 01:26:29.815
<v Speaker 0>shall

01:26:30.295 --> 01:26:31.094
<v Speaker 0>we

01:26:32.135 --> 01:26:33.655
<v Speaker 0>where's my BGP?

01:26:33.895 --> 01:26:35.415
<v Speaker 0>Oh, no. We don't want the panel yet.

01:26:35.415 --> 01:26:35.574
<v Speaker 0>Okay.

01:26:38.550 --> 01:26:40.230
<v Speaker 0>Shall we just try this again then?

01:26:40.710 --> 01:26:42.470
<v Speaker 1>Yeah. Let's just try it again. I'm a

01:26:42.470 --> 01:26:43.350
<v Speaker 1>bit confused,

01:26:43.510 --> 01:26:44.550
<v Speaker 1>but it's okay.

01:26:48.150 --> 01:26:49.990
<v Speaker 1>Oh, you see? I see the error at

01:26:49.990 --> 01:26:52.550
<v Speaker 1>the top. There we go. Unknown field, Kubelet

01:26:52.550 --> 01:26:53.430
<v Speaker 1>extra arcs.

01:26:56.395 --> 01:26:57.195
<v Speaker 0>Uh-huh.

01:27:03.675 --> 01:27:05.755
<v Speaker 1>It has to be oh, yeah. Add two

01:27:05.755 --> 01:27:08.235
<v Speaker 1>spaces in front of Kubelet, extra arcs. No.

01:27:08.235 --> 01:27:08.635
<v Speaker 1>Yeah.

01:27:09.840 --> 01:27:11.360
<v Speaker 1>No. No. No. It has to be inside

01:27:11.360 --> 01:27:12.479
<v Speaker 1>node registration.

01:27:13.040 --> 01:27:13.920
<v Speaker 1>So yes.

01:27:14.480 --> 01:27:15.439
<v Speaker 1>There you go.

01:27:16.000 --> 01:27:18.000
<v Speaker 1>So it didn't know what its IP was,

01:27:18.000 --> 01:27:19.920
<v Speaker 1>so we just assumed I p v four,

01:27:21.440 --> 01:27:22.800
<v Speaker 1>which is the wrong one. Right?

01:27:23.305 --> 01:27:23.785
<v Speaker 1>And then

01:27:24.505 --> 01:27:25.785
<v Speaker 1>and this is the part that's not in

01:27:25.785 --> 01:27:27.785
<v Speaker 1>the documentation, by the way. I I had

01:27:27.785 --> 01:27:28.824
<v Speaker 1>to figure this out

01:27:29.225 --> 01:27:30.824
<v Speaker 1>the same way as we did now.

01:27:31.465 --> 01:27:32.185
<v Speaker 1>So,

01:27:32.585 --> 01:27:34.345
<v Speaker 1>like, nowhere does it say that you need

01:27:34.345 --> 01:27:35.945
<v Speaker 1>to set these fields on the cubelets. It

01:27:35.945 --> 01:27:36.425
<v Speaker 1>just says.

01:27:38.100 --> 01:27:38.659
<v Speaker 1>Yeah.

01:27:40.020 --> 01:27:41.300
<v Speaker 1>K. So

01:27:41.540 --> 01:27:43.619
<v Speaker 1>now it should be in a better state.

01:27:44.980 --> 01:27:46.580
<v Speaker 0>Let's just take a look at part of

01:27:46.580 --> 01:27:47.459
<v Speaker 0>the system.

01:27:48.900 --> 01:27:50.019
<v Speaker 1>K. There we go.

01:27:50.739 --> 01:27:52.739
<v Speaker 1>That looks better. Right? It does.

01:27:53.675 --> 01:27:55.355
<v Speaker 0>So if I run and get pods, I

01:27:55.355 --> 01:27:57.514
<v Speaker 0>should see all the engine x's now running,

01:27:57.515 --> 01:27:58.795
<v Speaker 0>and we should all have an I p

01:27:58.795 --> 01:28:00.554
<v Speaker 0>v six. Cool.

01:28:00.715 --> 01:28:01.434
<v Speaker 0>Yep.

01:28:02.395 --> 01:28:04.555
<v Speaker 1>And we have a service. Right?

01:28:05.710 --> 01:28:06.269
<v Speaker 1>So

01:28:06.590 --> 01:28:08.909
<v Speaker 1>did we already add the BGP peer for

01:28:08.909 --> 01:28:10.510
<v Speaker 1>this node? We did. Right?

01:28:10.989 --> 01:28:13.070
<v Speaker 0>We added a BGP peer for the admin

01:28:13.070 --> 01:28:14.269
<v Speaker 0>node. Yes. But

01:28:14.909 --> 01:28:16.349
<v Speaker 0>one thing we kept

01:28:16.590 --> 01:28:18.909
<v Speaker 0>empty was the service CIDR.

01:28:20.125 --> 01:28:21.324
<v Speaker 0>It's here.

01:28:21.485 --> 01:28:23.165
<v Speaker 0>Yeah. So I guess that seems to be

01:28:23.165 --> 01:28:23.804
<v Speaker 0>a little.

01:28:24.205 --> 01:28:26.284
<v Speaker 1>Yep. Yeah. But let's take one step back

01:28:26.284 --> 01:28:28.445
<v Speaker 1>first, though. Let's just first check everything. Can

01:28:28.445 --> 01:28:30.684
<v Speaker 1>you do Calico CTL

01:28:30.925 --> 01:28:31.804
<v Speaker 1>gets

01:28:32.045 --> 01:28:33.324
<v Speaker 1>BGP peer?

01:28:33.804 --> 01:28:34.605
<v Speaker 1>Just to make sure.

01:28:36.000 --> 01:28:37.439
<v Speaker 1>Yes, perfect.

01:28:38.000 --> 01:28:40.159
<v Speaker 1>Yes. So now comes

01:28:40.480 --> 01:28:42.639
<v Speaker 1>the cool part of the

01:28:42.960 --> 01:28:44.079
<v Speaker 1>of this thing.

01:28:45.039 --> 01:28:47.760
<v Speaker 1>Indeed, in BGP configuration, which you just opened,

01:28:47.760 --> 01:28:50.320
<v Speaker 1>we can also announce the service CIDR.

01:28:51.255 --> 01:28:54.295
<v Speaker 1>So now we're only announcing routes to our

01:28:54.295 --> 01:28:55.015
<v Speaker 1>pods

01:28:55.095 --> 01:28:56.295
<v Speaker 1>to the world,

01:28:57.175 --> 01:28:58.695
<v Speaker 1>but we can also announce

01:28:59.255 --> 01:29:01.335
<v Speaker 1>the cluster IPs of our cluster.

01:29:01.655 --> 01:29:03.095
<v Speaker 1>So we have to set this to the

01:29:03.095 --> 01:29:05.895
<v Speaker 1>same thing that we put in the

01:29:06.240 --> 01:29:08.239
<v Speaker 1>kube ADM in its configuration.

01:29:15.840 --> 01:29:16.800
<v Speaker 1>We'll see service Yes,

01:29:18.080 --> 01:29:18.560
<v Speaker 1>exactly.

01:29:24.494 --> 01:29:27.534
<v Speaker 1>Yes. And service external IPs, we can leave.

01:29:27.855 --> 01:29:30.255
<v Speaker 1>So you can this is useful. You can

01:29:30.255 --> 01:29:31.854
<v Speaker 1>also manually assign

01:29:31.855 --> 01:29:34.175
<v Speaker 1>external IPs to services if you want to.

01:29:35.090 --> 01:29:36.450
<v Speaker 1>And then they have to be out of

01:29:36.450 --> 01:29:39.250
<v Speaker 1>this range, and then Calico will also announce

01:29:39.250 --> 01:29:41.570
<v Speaker 1>them. But we don't need that for now.

01:29:42.930 --> 01:29:44.530
<v Speaker 1>So if we Calico

01:29:44.690 --> 01:29:45.890
<v Speaker 1>CTO apply this,

01:29:48.575 --> 01:29:51.375
<v Speaker 1>k. If you go to packets

01:29:51.855 --> 01:29:53.615
<v Speaker 1>to your packet console now,

01:29:54.735 --> 01:29:57.535
<v Speaker 1>and you go to network BGP,

01:30:00.390 --> 01:30:01.510
<v Speaker 1>and then

01:30:01.910 --> 01:30:03.190
<v Speaker 1>update status

01:30:06.950 --> 01:30:08.390
<v Speaker 1>and then refresh the page.

01:30:13.595 --> 01:30:16.075
<v Speaker 1>Here, we can see all the routes that

01:30:16.075 --> 01:30:18.875
<v Speaker 1>the nodes are telling to the package router.

01:30:18.875 --> 01:30:19.755
<v Speaker 1>So if we

01:30:20.075 --> 01:30:23.515
<v Speaker 1>click on worker one, for example, or admin,

01:30:27.300 --> 01:30:29.620
<v Speaker 1>you will see it is

01:30:30.020 --> 01:30:30.980
<v Speaker 1>announcing

01:30:31.220 --> 01:30:31.940
<v Speaker 1>the

01:30:32.580 --> 01:30:34.179
<v Speaker 1>service CIDR

01:30:34.660 --> 01:30:36.260
<v Speaker 1>and the pod CIDR.

01:30:38.020 --> 01:30:38.980
<v Speaker 1>So

01:30:40.275 --> 01:30:42.915
<v Speaker 1>the cool thing is, is that both worker

01:30:42.915 --> 01:30:45.795
<v Speaker 1>one and admin will announce the same service

01:30:45.795 --> 01:30:46.434
<v Speaker 1>block,

01:30:47.235 --> 01:30:48.434
<v Speaker 1>and this will cause

01:30:48.675 --> 01:30:51.795
<v Speaker 1>the packet routers to automatically load balance

01:30:52.840 --> 01:30:55.000
<v Speaker 1>between the two nodes. So you get a

01:30:55.160 --> 01:30:57.079
<v Speaker 1>a load balancer for free, basically.

01:30:57.800 --> 01:30:59.800
<v Speaker 1>So when the outside world says, I want

01:30:59.800 --> 01:31:02.680
<v Speaker 1>to reach a Kubernetes service, then the packet

01:31:02.680 --> 01:31:04.600
<v Speaker 1>router sees there's two entries for it. It's

01:31:04.600 --> 01:31:06.120
<v Speaker 1>either master or worker one,

01:31:07.025 --> 01:31:09.824
<v Speaker 1>and they will go to the queue proxy

01:31:09.824 --> 01:31:11.744
<v Speaker 1>of either of those, and then it will

01:31:11.744 --> 01:31:13.184
<v Speaker 1>go to the correct pod.

01:31:15.344 --> 01:31:15.985
<v Speaker 1>Yeah.

01:31:16.385 --> 01:31:18.144
<v Speaker 1>And you'll also see that the

01:31:20.065 --> 01:31:21.184
<v Speaker 1>pod CIDR

01:31:21.185 --> 01:31:23.570
<v Speaker 1>is different for each of the

01:31:24.610 --> 01:31:27.250
<v Speaker 1>so the server CIDR is the same because

01:31:27.250 --> 01:31:29.170
<v Speaker 1>we want to be able to load balance

01:31:29.170 --> 01:31:29.729
<v Speaker 1>this.

01:31:31.969 --> 01:31:33.809
<v Speaker 1>But the pod CIDR is different. So you

01:31:33.809 --> 01:31:35.969
<v Speaker 1>will have a subnet for all the pods

01:31:35.969 --> 01:31:37.650
<v Speaker 1>on the master node,

01:31:38.425 --> 01:31:40.745
<v Speaker 1>and you'll have a pod CIDR for all

01:31:40.745 --> 01:31:42.905
<v Speaker 1>the node for all the pods

01:31:43.145 --> 01:31:44.104
<v Speaker 1>on the

01:31:44.425 --> 01:31:46.425
<v Speaker 1>worker nodes, and they will be disjoint.

01:31:46.585 --> 01:31:48.425
<v Speaker 1>So this way, when you try to reach

01:31:48.425 --> 01:31:49.224
<v Speaker 1>a pod

01:31:51.920 --> 01:31:53.999
<v Speaker 1>Yeah. You see that they're different? This way,

01:31:54.239 --> 01:31:56.560
<v Speaker 1>the outside Internet knows how to route to

01:31:56.560 --> 01:31:59.039
<v Speaker 1>the correct node to reach the correct pod.

01:32:00.159 --> 01:32:00.800
<v Speaker 1>Yeah.

01:32:01.600 --> 01:32:02.800
<v Speaker 1>So Okay.

01:32:03.360 --> 01:32:05.600
<v Speaker 1>We can try this surface now that we

01:32:05.600 --> 01:32:06.159
<v Speaker 1>created.

01:32:06.995 --> 01:32:09.315
<v Speaker 0>We don't have one.

01:32:09.635 --> 01:32:10.435
<v Speaker 1>So Oh, yeah. We

01:32:11.395 --> 01:32:12.514
<v Speaker 1>So we can do

01:32:12.915 --> 01:32:14.035
<v Speaker 1>two CTL

01:32:14.035 --> 01:32:14.995
<v Speaker 1>expose.

01:32:16.035 --> 01:32:17.795
<v Speaker 1>Oh, yeah. I guess it's okay. Yeah. And

01:32:18.595 --> 01:32:19.555
<v Speaker 1>then NGINX.

01:32:21.150 --> 01:32:22.190
<v Speaker 0>Yeah.

01:32:26.350 --> 01:32:28.030
<v Speaker 1>Dash dash port 80,

01:32:28.270 --> 01:32:29.310
<v Speaker 1>and then I will just port.

01:32:33.085 --> 01:32:35.165
<v Speaker 1>Oh, yeah. Exposed deployment.

01:32:35.165 --> 01:32:35.724
<v Speaker 1>Yeah.

01:32:36.764 --> 01:32:37.564
<v Speaker 0>Okay.

01:32:41.165 --> 01:32:43.645
<v Speaker 1>Okay. And now if we go and curl

01:32:43.645 --> 01:32:45.724
<v Speaker 1>this address, we should

01:32:46.620 --> 01:32:48.940
<v Speaker 1>get low balanced access to

01:32:51.100 --> 01:32:52.940
<v Speaker 1>to our NGINX service.

01:32:55.740 --> 01:32:57.740
<v Speaker 1>We could verify that by looking at the

01:32:57.740 --> 01:32:58.860
<v Speaker 1>the pot logs,

01:32:59.100 --> 01:33:02.140
<v Speaker 1>for example. But We can

01:33:02.755 --> 01:33:03.795
<v Speaker 0>change that.

01:33:04.035 --> 01:33:04.755
<v Speaker 0>So

01:33:05.395 --> 01:33:06.275
<v Speaker 0>image.

01:33:09.635 --> 01:33:10.435
<v Speaker 0>Options.

01:33:10.595 --> 01:33:12.035
<v Speaker 0>No. It's info.

01:33:13.315 --> 01:33:14.435
<v Speaker 1>Oh, what's this?

01:33:16.450 --> 01:33:18.770
<v Speaker 0>It's from the open fast protect, but it's

01:33:18.770 --> 01:33:21.650
<v Speaker 0>a function that returns information about the pod

01:33:21.650 --> 01:33:24.130
<v Speaker 0>that is running on over HTTP.

01:33:24.130 --> 01:33:24.770
<v Speaker 0>Cool.

01:33:25.570 --> 01:33:27.890
<v Speaker 0>So the port number might change, but I

01:33:27.890 --> 01:33:30.450
<v Speaker 0>can fix that. It looks like that's running.

01:33:31.305 --> 01:33:33.865
<v Speaker 0>Let's just run edit service.

01:33:33.865 --> 01:33:34.825
<v Speaker 0>And I

01:33:39.065 --> 01:33:40.905
<v Speaker 0>can never remember which way these are. So

01:33:40.905 --> 01:33:42.505
<v Speaker 0>80 eight is the target port.

01:33:44.810 --> 01:33:45.770
<v Speaker 0>There we go.

01:33:46.970 --> 01:33:49.770
<v Speaker 0>We have the host name. Cool.

01:33:52.250 --> 01:33:55.130
<v Speaker 0>Right? Alright. Is cool. I like it. Yeah.

01:33:57.690 --> 01:33:58.250
<v Speaker 1>But there's

01:33:59.050 --> 01:34:01.370
<v Speaker 1>so there's

01:34:00.245 --> 01:34:02.324
<v Speaker 1>one more thing that we can tweak. So

01:34:03.525 --> 01:34:04.565
<v Speaker 1>as you see

01:34:05.125 --> 01:34:07.045
<v Speaker 1>in the the routing table that we are

01:34:07.045 --> 01:34:10.165
<v Speaker 1>announcing to packets, we're announcing the entire service

01:34:10.165 --> 01:34:10.804
<v Speaker 1>range.

01:34:12.325 --> 01:34:12.565
<v Speaker 1>Yep.

01:34:13.150 --> 01:34:16.190
<v Speaker 1>Right? The whole. Right? Yep.

01:34:16.350 --> 01:34:17.230
<v Speaker 1>And

01:34:18.830 --> 01:34:19.790
<v Speaker 1>that's okay.

01:34:20.190 --> 01:34:21.470
<v Speaker 1>But sometimes,

01:34:21.630 --> 01:34:23.390
<v Speaker 1>there might be pods that are not running

01:34:23.390 --> 01:34:24.510
<v Speaker 1>on a on

01:34:24.990 --> 01:34:27.230
<v Speaker 1>worker zero, but are running on worker one.

01:34:27.695 --> 01:34:29.455
<v Speaker 1>But in this case, it will even contact

01:34:29.455 --> 01:34:31.535
<v Speaker 1>worker zero even though it's not running any

01:34:31.535 --> 01:34:32.175
<v Speaker 1>pods.

01:34:32.975 --> 01:34:34.975
<v Speaker 1>And it will then use kube proxy to

01:34:34.975 --> 01:34:37.135
<v Speaker 1>make this extra hop. So this is can

01:34:37.135 --> 01:34:37.695
<v Speaker 1>be

01:34:38.335 --> 01:34:41.620
<v Speaker 1>a bit detrimental for performance sometimes. So because

01:34:41.620 --> 01:34:43.460
<v Speaker 1>it will need an extra network hop to

01:34:43.460 --> 01:34:44.740
<v Speaker 1>reach the pod sometimes.

01:34:47.220 --> 01:34:48.820
<v Speaker 1>What it does do, it gives you very

01:34:48.820 --> 01:34:51.220
<v Speaker 1>equal load balancing, which is very nice. But

01:34:51.220 --> 01:34:52.820
<v Speaker 1>we can also configure Calico

01:34:53.395 --> 01:34:55.155
<v Speaker 1>to only advertise

01:34:56.435 --> 01:34:59.875
<v Speaker 1>nodes that actually is running a pod from

01:34:59.875 --> 01:35:00.675
<v Speaker 1>that service.

01:35:01.795 --> 01:35:03.635
<v Speaker 1>We can demonstrate this by maybe

01:35:05.650 --> 01:35:07.490
<v Speaker 1>making sure that there are only pods running

01:35:07.490 --> 01:35:09.170
<v Speaker 1>on one of the two nodes.

01:35:12.210 --> 01:35:13.570
<v Speaker 1>Yeah. And then we can show the difference

01:35:13.570 --> 01:35:16.050
<v Speaker 1>in in what happens with the routing tables.

01:35:17.885 --> 01:35:18.125
<v Speaker 0>So

01:35:18.765 --> 01:35:20.765
<v Speaker 0>Okay. So we want to

01:35:22.285 --> 01:35:23.165
<v Speaker 0>edit

01:35:23.965 --> 01:35:25.805
<v Speaker 0>node admin.

01:35:26.845 --> 01:35:28.045
<v Speaker 0>Let's add

01:35:29.405 --> 01:35:30.445
<v Speaker 0>but we can just.

01:35:31.260 --> 01:35:33.899
<v Speaker 1>We can just taint it again. Right?

01:35:35.980 --> 01:35:36.539
<v Speaker 1>Or some

01:35:38.539 --> 01:35:40.780
<v Speaker 0>Yeah. But we just do a copy and

01:35:40.780 --> 01:35:41.739
<v Speaker 0>paste in. No.

01:35:45.045 --> 01:35:46.885
<v Speaker 0>At the deployment.

01:35:48.565 --> 01:35:50.405
<v Speaker 0>Let's

01:35:50.405 --> 01:35:51.045
<v Speaker 0>do

01:35:52.725 --> 01:35:53.525
<v Speaker 0>anti affinity.

01:36:01.350 --> 01:36:02.150
<v Speaker 0>Officer.

01:36:05.510 --> 01:36:07.910
<v Speaker 0>Yeah. Come on. Just give me the don't

01:36:07.910 --> 01:36:08.310
<v Speaker 0>know.

01:36:10.545 --> 01:36:13.585
<v Speaker 1>Oh, yeah. This require during scheduling, ignore during

01:36:15.105 --> 01:36:16.704
<v Speaker 1>I always get very confused

01:36:16.945 --> 01:36:18.224
<v Speaker 1>by this stuff. So

01:36:18.545 --> 01:36:20.065
<v Speaker 0>let's grab

01:36:20.065 --> 01:36:21.025
<v Speaker 0>this

01:36:21.665 --> 01:36:23.745
<v Speaker 0>and add this to our final.

01:36:24.260 --> 01:36:25.940
<v Speaker 0>So where's our

01:36:27.060 --> 01:36:28.100
<v Speaker 0>spec?

01:36:29.140 --> 01:36:31.300
<v Speaker 0>Alright. Case is gonna be weird with it.

01:36:31.300 --> 01:36:32.020
<v Speaker 0>So

01:36:33.060 --> 01:36:34.580
<v Speaker 0>I wanna add

01:36:34.740 --> 01:36:35.940
<v Speaker 0>and then two.

01:36:40.824 --> 01:36:44.425
<v Speaker 0>Okay. Into an actual YAML file. Let's go.

01:36:47.705 --> 01:36:48.905
<v Speaker 0>We want that.

01:36:51.224 --> 01:36:53.000
<v Speaker 0>And we're we're gonna go I think we

01:36:53.000 --> 01:36:54.200
<v Speaker 0>could just do a host name. Right? And

01:36:54.200 --> 01:36:55.960
<v Speaker 0>we'll just say we don't want to schedule

01:36:55.960 --> 01:36:57.800
<v Speaker 0>on admin.

01:36:59.960 --> 01:37:01.079
<v Speaker 1>What is this

01:37:03.239 --> 01:37:04.199
<v Speaker 1>key

01:37:04.200 --> 01:37:04.920
<v Speaker 1>in this case?

01:37:08.454 --> 01:37:10.534
<v Speaker 0>Yes. So very good. We need a label.

01:37:14.295 --> 01:37:15.094
<v Speaker 1>Could also

01:37:16.135 --> 01:37:18.934
<v Speaker 1>so at the beginning, we tainted our we

01:37:18.934 --> 01:37:21.335
<v Speaker 1>removed the taint from the from the control

01:37:21.335 --> 01:37:21.894
<v Speaker 1>plane. Right?

01:37:23.070 --> 01:37:25.949
<v Speaker 1>Maybe we can add that again so that

01:37:25.949 --> 01:37:28.749
<v Speaker 1>it doesn't run any workload stuff.

01:37:31.070 --> 01:37:32.750
<v Speaker 1>Yeah. We don't have a kube config on

01:37:32.750 --> 01:37:34.350
<v Speaker 1>the workers, so that won't work

01:37:35.185 --> 01:37:36.065
<v Speaker 1>unless

01:37:37.824 --> 01:37:38.704
<v Speaker 0>Let's just

01:37:39.185 --> 01:37:42.785
<v Speaker 0>I know that this looks great. So I

01:37:42.785 --> 01:37:44.304
<v Speaker 0>could add the master

01:37:44.705 --> 01:37:46.785
<v Speaker 0>tape again. I guess that might be quicker.

01:37:49.449 --> 01:37:50.409
<v Speaker 0>Kubernetes

01:37:50.409 --> 01:37:51.210
<v Speaker 0>master.

01:38:00.145 --> 01:38:02.864
<v Speaker 1>Yeah. There's no schedule thing. Right? Can I

01:38:02.864 --> 01:38:05.104
<v Speaker 1>add? No. Spoke past it.

01:38:05.824 --> 01:38:06.145
<v Speaker 1>Yep.

01:38:17.220 --> 01:38:19.300
<v Speaker 0>When the toleration goes on the well, yeah,

01:38:19.300 --> 01:38:21.060
<v Speaker 0>there we go. Yeah.

01:38:21.060 --> 01:38:22.820
<v Speaker 0>I'm looking at this YAML component. That goes

01:38:22.820 --> 01:38:23.780
<v Speaker 0>on the pod. It doesn't

01:38:24.260 --> 01:38:25.219
<v Speaker 0>of

01:38:27.540 --> 01:38:28.900
<v Speaker 0>course. I do that.

01:38:30.395 --> 01:38:31.275
<v Speaker 0>Admin.

01:38:33.835 --> 01:38:34.635
<v Speaker 0>I get

01:38:38.155 --> 01:38:39.034
<v Speaker 0>pods.

01:38:41.355 --> 01:38:43.355
<v Speaker 1>What is key one value one? Is that

01:38:43.435 --> 01:38:44.235
<v Speaker 1>do we need that?

01:38:46.570 --> 01:38:49.050
<v Speaker 1>I think it is confusing us again.

01:38:51.530 --> 01:38:53.770
<v Speaker 0>Yeah. That's that's not gonna be the default.

01:38:54.730 --> 01:38:56.490
<v Speaker 0>So if we take a look at anything

01:38:56.490 --> 01:38:57.610
<v Speaker 0>running on

01:39:00.145 --> 01:39:02.625
<v Speaker 0>let's get something from our cube system namespace

01:39:02.625 --> 01:39:04.785
<v Speaker 0>that's running on our admin node, which will

01:39:04.785 --> 01:39:06.625
<v Speaker 0>already have the toleration

01:39:06.625 --> 01:39:08.705
<v Speaker 0>and then I'll copy the labels. So

01:39:13.620 --> 01:39:14.580
<v Speaker 0>I've known.

01:39:15.300 --> 01:39:17.540
<v Speaker 0>Let's take a look at here.

01:39:22.660 --> 01:39:23.700
<v Speaker 0>That's the admin.

01:39:26.895 --> 01:39:28.094
<v Speaker 0>Keep the system.

01:39:28.895 --> 01:39:30.175
<v Speaker 0>Add a pod.

01:39:31.135 --> 01:39:32.014
<v Speaker 0>Yeah.

01:39:33.534 --> 01:39:34.655
<v Speaker 0>I'm on the test.

01:39:35.135 --> 01:39:36.655
<v Speaker 0>I'm gonna make that short call.

01:39:45.450 --> 01:39:47.290
<v Speaker 0>How am I feeling? So I I I

01:39:47.290 --> 01:39:48.889
<v Speaker 1>I have a quicker idea.

01:39:49.210 --> 01:39:52.065
<v Speaker 1>How about we scale we scale the deployments

01:39:52.065 --> 01:39:53.665
<v Speaker 1>to to one pod,

01:39:55.345 --> 01:39:57.025
<v Speaker 1>and then it's only on one node?

01:39:58.305 --> 01:40:00.224
<v Speaker 0>Right. Yeah. That would be good.

01:40:03.025 --> 01:40:04.785
<v Speaker 1>This is me getting creative.

01:40:16.360 --> 01:40:18.360
<v Speaker 0>K. Good. The one I kept is on

01:40:18.360 --> 01:40:19.720
<v Speaker 0>the app, man. It's the latest.

01:40:21.405 --> 01:40:23.004
<v Speaker 0>Oh, I guess that's fine. Right?

01:40:24.925 --> 01:40:27.005
<v Speaker 1>What is fine? Because it it's running on

01:40:27.005 --> 01:40:28.684
<v Speaker 0>the admin note, but we're gonna change it

01:40:28.684 --> 01:40:31.565
<v Speaker 0>so the service publish doesn't publish the other

01:40:31.565 --> 01:40:34.219
<v Speaker 0>note. Right? Exactly. So this is great for

01:40:34.219 --> 01:40:36.140
<v Speaker 1>demo purposes. But okay. If you now look

01:40:36.140 --> 01:40:38.139
<v Speaker 1>at the routing table, it will still

01:40:41.980 --> 01:40:42.780
<v Speaker 0>On the packet?

01:40:43.660 --> 01:40:46.060
<v Speaker 1>On packet. Just on the interface.

01:40:47.025 --> 01:40:49.185
<v Speaker 1>So we still see that both nodes are

01:40:49.185 --> 01:40:50.945
<v Speaker 1>advertising the service

01:40:52.225 --> 01:40:53.664
<v Speaker 1>the service center.

01:40:54.945 --> 01:40:57.185
<v Speaker 1>But we can configure Calico to only announce

01:40:57.185 --> 01:40:58.704
<v Speaker 1>the nodes that actually run

01:40:59.745 --> 01:41:01.850
<v Speaker 1>the pods. So we can do this by

01:41:01.850 --> 01:41:02.969
<v Speaker 1>editing the

01:41:04.090 --> 01:41:05.290
<v Speaker 1>NGINX service.

01:41:12.490 --> 01:41:15.050
<v Speaker 1>And we can set this by setting the

01:41:15.535 --> 01:41:17.935
<v Speaker 1>external traffic policy to local.

01:41:18.255 --> 01:41:19.935
<v Speaker 1>But there is a catch to this. This

01:41:19.935 --> 01:41:23.215
<v Speaker 1>only works on node ports, type node port.

01:41:23.615 --> 01:41:26.655
<v Speaker 1>And this is just a Kubernetes API quirk.

01:41:26.655 --> 01:41:28.175
<v Speaker 1>We're not going to use the node port,

01:41:28.720 --> 01:41:30.480
<v Speaker 1>but we need it anyway.

01:41:31.360 --> 01:41:33.520
<v Speaker 1>So and then we can set external traffic

01:41:33.520 --> 01:41:34.960
<v Speaker 1>policy to local.

01:41:37.600 --> 01:41:40.320
<v Speaker 1>We have type cluster IP below

01:41:40.320 --> 01:41:41.680
<v Speaker 1>still. We have to remove that.

01:41:44.495 --> 01:41:45.135
<v Speaker 1>Yeah.

01:41:45.935 --> 01:41:47.855
<v Speaker 1>Okay. And if we apply this,

01:41:49.455 --> 01:41:50.015
<v Speaker 1>so

01:41:51.295 --> 01:41:53.615
<v Speaker 1>this should still work. We can ignore the

01:41:53.615 --> 01:41:55.615
<v Speaker 1>node port. It's only there so that we

01:41:55.615 --> 01:41:58.015
<v Speaker 1>have access to this traffic policy thing, and

01:41:58.015 --> 01:41:59.530
<v Speaker 1>it's maybe something

01:41:59.850 --> 01:42:02.090
<v Speaker 1>that should be fixed in the Kubernetes API.

01:42:02.250 --> 01:42:03.370
<v Speaker 1>So Kubernetes

01:42:03.370 --> 01:42:04.250
<v Speaker 1>doesn't really

01:42:04.730 --> 01:42:08.410
<v Speaker 1>so cluster IPs being exposed externally is not

01:42:08.410 --> 01:42:11.530
<v Speaker 1>something that was being thought of originally, I

01:42:11.530 --> 01:42:13.485
<v Speaker 1>think. They always thought we'll use external load

01:42:13.485 --> 01:42:15.165
<v Speaker 1>balancer objects for this. So you can do

01:42:15.165 --> 01:42:17.085
<v Speaker 1>type load balancer, and you'll get something from

01:42:17.085 --> 01:42:18.125
<v Speaker 1>your cloud provider.

01:42:19.885 --> 01:42:21.245
<v Speaker 1>So here, there's a little bit of an

01:42:21.245 --> 01:42:22.445
<v Speaker 1>API mismatch.

01:42:23.085 --> 01:42:24.285
<v Speaker 1>But now if we go

01:42:26.550 --> 01:42:29.670
<v Speaker 1>to packets and we refresh on the BGP

01:42:29.670 --> 01:42:30.709
<v Speaker 1>page the

01:42:31.510 --> 01:42:32.629
<v Speaker 1>the routes,

01:42:33.909 --> 01:42:35.349
<v Speaker 1>so we press update now.

01:42:41.145 --> 01:42:43.065
<v Speaker 0>Has this update now something that can be

01:42:43.065 --> 01:42:44.505
<v Speaker 0>done programmatically?

01:42:45.625 --> 01:42:48.505
<v Speaker 1>I don't think so. So and because they

01:42:48.505 --> 01:42:50.425
<v Speaker 1>also ask us nicely to only do it

01:42:50.425 --> 01:42:51.545
<v Speaker 1>every five minutes.

01:42:52.745 --> 01:42:54.825
<v Speaker 1>So the the routes are being updated. This

01:42:54.825 --> 01:42:57.910
<v Speaker 1>is just about the interface getting the information

01:42:57.910 --> 01:42:59.910
<v Speaker 1>from the router and displaying it to you.

01:43:00.310 --> 01:43:01.750
<v Speaker 1>So you don't need to press this button

01:43:01.750 --> 01:43:03.990
<v Speaker 1>to update the routes. It's just to get

01:43:03.990 --> 01:43:04.870
<v Speaker 1>the information

01:43:05.990 --> 01:43:07.830
<v Speaker 1>into the interface. That's it.

01:43:09.350 --> 01:43:10.710
<v Speaker 1>So now

01:43:12.005 --> 01:43:14.245
<v Speaker 1>we should see that

01:43:16.405 --> 01:43:17.125
<v Speaker 1>a

01:43:17.365 --> 01:43:19.525
<v Speaker 1>let's see if this now works. If you

01:43:19.525 --> 01:43:22.485
<v Speaker 1>go to the nodes that is running the

01:43:22.485 --> 01:43:22.885
<v Speaker 1>pod.

01:43:24.990 --> 01:43:26.750
<v Speaker 1>Oh, yeah. Exactly. We see that it now

01:43:26.750 --> 01:43:28.910
<v Speaker 1>announces a a slash 128.

01:43:28.910 --> 01:43:31.790
<v Speaker 1>So it says this specific service IP is

01:43:31.790 --> 01:43:33.470
<v Speaker 1>exactly on this node.

01:43:35.870 --> 01:43:36.750
<v Speaker 1>This is and

01:43:37.310 --> 01:43:38.910
<v Speaker 1>if you go to the other one, it

01:43:38.910 --> 01:43:39.790
<v Speaker 1>should not be there.

01:43:41.795 --> 01:43:44.515
<v Speaker 0>Okay. See? So this now will cause it

01:43:44.515 --> 01:43:46.115
<v Speaker 1>only to get routed to that node, and

01:43:46.115 --> 01:43:47.795
<v Speaker 1>it will never go to the other node.

01:43:50.915 --> 01:43:52.915
<v Speaker 0>But that just reduces the extra hop then

01:43:52.915 --> 01:43:54.995
<v Speaker 0>where it doesn't have to go through IPVS

01:43:54.995 --> 01:43:56.510
<v Speaker 0>or the Q proxy or the point that

01:43:56.670 --> 01:43:58.030
<v Speaker 1>Exactly. Yep.

01:43:58.030 --> 01:43:59.790
<v Speaker 1>Yep. So it just avoids this actually does

01:43:59.790 --> 01:44:01.550
<v Speaker 1>load balancing itself as well. Right?

01:44:01.950 --> 01:44:05.150
<v Speaker 1>So if your your pod workloads are not

01:44:05.150 --> 01:44:07.630
<v Speaker 1>evenly distributed over your cluster like we have

01:44:07.630 --> 01:44:07.790
<v Speaker 1>now,

01:44:08.614 --> 01:44:10.534
<v Speaker 1>all the NGINX pods are

01:44:10.775 --> 01:44:11.815
<v Speaker 1>on admin

01:44:12.295 --> 01:44:14.455
<v Speaker 1>node, right? So it's receiving all the traffic

01:44:14.455 --> 01:44:15.175
<v Speaker 1>right now.

01:44:16.375 --> 01:44:18.535
<v Speaker 1>That could also be the case. So if

01:44:18.535 --> 01:44:20.455
<v Speaker 1>your pods are not spread

01:44:20.620 --> 01:44:22.540
<v Speaker 1>evenly, and this is also not something that

01:44:22.540 --> 01:44:24.700
<v Speaker 1>Kubernetes gives you, right? It doesn't give you

01:44:24.700 --> 01:44:27.340
<v Speaker 1>even spreads. It does a best effort thing,

01:44:27.340 --> 01:44:29.420
<v Speaker 1>but it might come into cases where

01:44:30.060 --> 01:44:32.140
<v Speaker 1>resources aren't spread around evenly,

01:44:32.985 --> 01:44:35.225
<v Speaker 1>then removing this extra hop through q proxy

01:44:35.225 --> 01:44:37.144
<v Speaker 1>can give you an even low balancing.

01:44:37.705 --> 01:44:38.264
<v Speaker 1>But

01:44:39.385 --> 01:44:41.545
<v Speaker 1>but it does avoid this extra hop, which

01:44:41.545 --> 01:44:42.264
<v Speaker 1>is nice.

01:44:42.665 --> 01:44:45.225
<v Speaker 0>And Is there any penalties,

01:44:45.225 --> 01:44:48.344
<v Speaker 0>whether it be performance or from packet state

01:44:48.200 --> 01:44:49.000
<v Speaker 0>how many

01:44:49.320 --> 01:44:51.880
<v Speaker 0>groups can be published in that that way?

01:44:51.880 --> 01:44:53.720
<v Speaker 0>Like, if I have a relatively large cluster

01:44:53.720 --> 01:44:54.760
<v Speaker 0>and I need to

01:44:55.480 --> 01:44:58.120
<v Speaker 0>with thousands of services and they're publishing closing

01:44:58.120 --> 01:44:59.960
<v Speaker 0>the group, is that is that a challenge?

01:45:01.800 --> 01:45:02.360
<v Speaker 1>So

01:45:03.815 --> 01:45:05.815
<v Speaker 1>I don't know what the limits are. I'll

01:45:06.695 --> 01:45:09.495
<v Speaker 1>there will probably be a limit. And so

01:45:11.095 --> 01:45:13.735
<v Speaker 1>Calico has some pages about designing

01:45:14.455 --> 01:45:14.855
<v Speaker 1>your

01:45:15.380 --> 01:45:18.100
<v Speaker 1>BGP infrastructure. And usually, what you'll have, you

01:45:18.100 --> 01:45:20.260
<v Speaker 1>have routers that announce the routers that announce

01:45:20.260 --> 01:45:21.780
<v Speaker 1>the routers. You kind of have a trickle

01:45:21.780 --> 01:45:22.820
<v Speaker 1>down system

01:45:23.540 --> 01:45:24.500
<v Speaker 1>to reduce

01:45:24.900 --> 01:45:26.020
<v Speaker 1>the routing tables.

01:45:26.260 --> 01:45:29.060
<v Speaker 1>Because usually, you do not announce 10,000 routes

01:45:30.765 --> 01:45:32.205
<v Speaker 1>to one router. It will get a bit

01:45:32.205 --> 01:45:35.485
<v Speaker 1>confused and it might drop routes or whatever.

01:45:35.804 --> 01:45:37.645
<v Speaker 1>So I don't know what the limits are,

01:45:37.645 --> 01:45:38.445
<v Speaker 1>to be honest.

01:45:40.525 --> 01:45:41.405
<v Speaker 1>Is something

01:45:41.725 --> 01:45:43.645
<v Speaker 1>I haven't found in the documentation either.

01:45:44.310 --> 01:45:46.710
<v Speaker 1>But if you do bare metal yourself, then

01:45:46.710 --> 01:45:49.510
<v Speaker 1>Calico has a very nice tutorial explaining how

01:45:49.510 --> 01:45:52.230
<v Speaker 1>you should set up your infrastructure and your

01:45:52.230 --> 01:45:54.870
<v Speaker 1>racks and how we there are some different

01:45:54.870 --> 01:45:56.390
<v Speaker 1>trade offs that you can make in terms

01:45:56.390 --> 01:45:57.430
<v Speaker 1>of network design.

01:45:58.885 --> 01:46:01.525
<v Speaker 1>But that's dark magic I do not yet

01:46:01.525 --> 01:46:02.244
<v Speaker 1>understand.

01:46:02.485 --> 01:46:03.045
<v Speaker 1>But

01:46:03.605 --> 01:46:04.885
<v Speaker 1>yeah. So is

01:46:05.605 --> 01:46:07.844
<v Speaker 0>are you using a Calico here today

01:46:08.485 --> 01:46:10.965
<v Speaker 0>because they're the over CNI offers this or

01:46:10.965 --> 01:46:12.700
<v Speaker 0>the one that you're just more familiar with?

01:46:12.700 --> 01:46:14.940
<v Speaker 0>Like, do other CNI implementations offer the same

01:46:14.940 --> 01:46:15.739
<v Speaker 0>functionality?

01:46:16.860 --> 01:46:18.780
<v Speaker 1>I don't know. So

01:46:19.340 --> 01:46:22.219
<v Speaker 1>I think Calico is the only one that,

01:46:22.380 --> 01:46:24.140
<v Speaker 1>like, allows you to do this.

01:46:24.540 --> 01:46:25.820
<v Speaker 1>So what we call this is, like, a

01:46:25.820 --> 01:46:28.285
<v Speaker 1>pure layer three network. Classic one where we

01:46:28.285 --> 01:46:31.405
<v Speaker 1>use BGP for announcing routes. And also,

01:46:32.925 --> 01:46:34.285
<v Speaker 1>you log into one of the boxes and

01:46:34.285 --> 01:46:36.285
<v Speaker 1>you type in IP route, you actually see

01:46:36.285 --> 01:46:38.205
<v Speaker 1>all the routes listed. And it's very easily

01:46:38.205 --> 01:46:40.780
<v Speaker 1>debuggable using so if you do IP dash

01:46:40.780 --> 01:46:42.699
<v Speaker 1>six, you have to add a dash six,

01:46:42.699 --> 01:46:43.980
<v Speaker 1>otherwise it gets angry.

01:46:44.780 --> 01:46:48.060
<v Speaker 1>Like, you'll actually see like this pod's IP

01:46:48.060 --> 01:46:50.219
<v Speaker 1>goes through this interface

01:46:50.219 --> 01:46:50.699
<v Speaker 1>and

01:46:52.815 --> 01:46:54.255
<v Speaker 1>all the other stuff has to go through

01:46:54.255 --> 01:46:56.815
<v Speaker 1>the gateway for your default route. So it's

01:46:56.815 --> 01:46:59.055
<v Speaker 1>a very classic way of setting up networks,

01:46:59.055 --> 01:47:01.055
<v Speaker 1>which also gives you, like, very familiar tools

01:47:01.055 --> 01:47:02.415
<v Speaker 1>to debug it for, like

01:47:03.775 --> 01:47:05.614
<v Speaker 1>and as soon as you have overlay networks

01:47:05.614 --> 01:47:08.460
<v Speaker 1>and stuff and a lot of IP tables

01:47:08.460 --> 01:47:11.019
<v Speaker 1>rules, I think these things get less transparent.

01:47:12.780 --> 01:47:14.059
<v Speaker 1>And so yes,

01:47:14.380 --> 01:47:16.300
<v Speaker 1>I think Calico is the only one.

01:47:17.020 --> 01:47:18.860
<v Speaker 1>No, wait, there's another one. KubeRouter also does

01:47:18.860 --> 01:47:21.020
<v Speaker 1>this. So there's also KubeRouter, which also does

01:47:21.020 --> 01:47:21.820
<v Speaker 1>BGP

01:47:23.304 --> 01:47:24.024
<v Speaker 1>routing.

01:47:24.505 --> 01:47:26.185
<v Speaker 1>And I think you can also combine that

01:47:26.185 --> 01:47:27.224
<v Speaker 1>with Cilium

01:47:28.105 --> 01:47:28.824
<v Speaker 1>together,

01:47:29.625 --> 01:47:31.304
<v Speaker 1>but I haven't tried those two out.

01:47:32.105 --> 01:47:35.065
<v Speaker 1>But I think in terms of having

01:47:35.065 --> 01:47:37.145
<v Speaker 1>this BGP by default

01:47:38.900 --> 01:47:40.900
<v Speaker 1>approach, I think Calico is probably the most

01:47:40.900 --> 01:47:41.620
<v Speaker 1>mature

01:47:42.740 --> 01:47:43.940
<v Speaker 1>option out there.

01:47:45.140 --> 01:47:46.660
<v Speaker 1>Like this is the thing that they advertise

01:47:46.660 --> 01:47:48.020
<v Speaker 1>with. Like this is what we do. We

01:47:48.020 --> 01:47:49.300
<v Speaker 1>do flat networking.

01:47:49.620 --> 01:47:50.260
<v Speaker 1>But

01:47:50.885 --> 01:47:52.645
<v Speaker 1>I know that, for example, Silium has some

01:47:52.645 --> 01:47:54.565
<v Speaker 1>other cool tricks, like they have this eBPF

01:47:54.565 --> 01:47:55.445
<v Speaker 1>data plane

01:47:55.845 --> 01:47:57.045
<v Speaker 1>that you can add,

01:47:57.845 --> 01:48:00.565
<v Speaker 1>which avoids having to install Kube proxy.

01:48:01.365 --> 01:48:03.685
<v Speaker 1>And I think Calico is also working on

01:48:04.200 --> 01:48:06.520
<v Speaker 1>something similar on the eBPF data plane, but

01:48:06.520 --> 01:48:08.360
<v Speaker 1>it I checked, and it doesn't work with

01:48:08.360 --> 01:48:10.200
<v Speaker 1>I p v six yet. So

01:48:10.760 --> 01:48:12.440
<v Speaker 1>I couldn't try it out yet.

01:48:12.840 --> 01:48:15.000
<v Speaker 0>Wait. I have a a nice session planned

01:48:15.000 --> 01:48:17.320
<v Speaker 0>for next week with someone from the team.

01:48:17.320 --> 01:48:19.934
<v Speaker 0>I'm looking forward to learning something. Yeah.

01:48:20.255 --> 01:48:22.975
<v Speaker 0>Cool. There is a question if you're feeling

01:48:22.975 --> 01:48:23.695
<v Speaker 0>brave.

01:48:24.335 --> 01:48:27.135
<v Speaker 0>So Yep. Has asked, when do you recommend

01:48:27.135 --> 01:48:28.974
<v Speaker 0>to use reflectors?

01:48:29.614 --> 01:48:30.494
<v Speaker 1>So

01:48:31.215 --> 01:48:32.494
<v Speaker 1>this is also about, like,

01:48:33.710 --> 01:48:35.070
<v Speaker 1>scaling, right? So

01:48:36.270 --> 01:48:37.870
<v Speaker 1>I must say, I don't know a lot

01:48:37.870 --> 01:48:40.270
<v Speaker 1>about BGP. This is me learning in the

01:48:40.270 --> 01:48:42.030
<v Speaker 1>past few weeks and trying things out.

01:48:43.790 --> 01:48:45.390
<v Speaker 1>When do you recommend it? From what I

01:48:45.390 --> 01:48:48.270
<v Speaker 1>understood from the Calico docs is when you

01:48:49.915 --> 01:48:52.235
<v Speaker 1>want to like, usually, Calico sets up a

01:48:52.235 --> 01:48:53.594
<v Speaker 1>node to node mesh, and all the nodes

01:48:53.594 --> 01:48:54.635
<v Speaker 1>talk to each other.

01:48:55.355 --> 01:48:58.474
<v Speaker 1>And that will not scale infinitely.

01:48:58.715 --> 01:49:02.074
<v Speaker 1>Right? And instead, you can determine

01:49:02.620 --> 01:49:04.780
<v Speaker 1>some certain nodes in your cluster as you

01:49:04.780 --> 01:49:06.540
<v Speaker 1>act as the router, I will reflect all

01:49:06.540 --> 01:49:08.140
<v Speaker 1>the routes through you so that you don't

01:49:08.140 --> 01:49:11.020
<v Speaker 1>have this n times n PGP connections to

01:49:11.020 --> 01:49:12.139
<v Speaker 1>announce all the routes.

01:49:12.700 --> 01:49:14.460
<v Speaker 1>So I think it's a matter of if

01:49:14.460 --> 01:49:16.860
<v Speaker 1>your cluster is starting to scale to

01:49:17.645 --> 01:49:19.645
<v Speaker 1>thousands of nodes, you will have to add

01:49:19.645 --> 01:49:20.684
<v Speaker 1>these reflectors.

01:49:21.565 --> 01:49:23.165
<v Speaker 1>But yes, I haven't had a cluster with

01:49:23.165 --> 01:49:24.844
<v Speaker 1>thousands of nodes yet, so I don't know.

01:49:24.844 --> 01:49:25.645
<v Speaker 1>But the

01:49:26.045 --> 01:49:27.324
<v Speaker 1>there is a

01:49:28.125 --> 01:49:30.765
<v Speaker 1>page on the Calico documentation called

01:49:32.270 --> 01:49:35.310
<v Speaker 1>Calico over IP Fabrics, and it explains

01:49:36.030 --> 01:49:38.030
<v Speaker 1>all the different trade offs you can make

01:49:38.190 --> 01:49:40.510
<v Speaker 1>in setting up your Calico network,

01:49:40.750 --> 01:49:42.350
<v Speaker 1>like whether you want a node to node

01:49:42.350 --> 01:49:44.670
<v Speaker 1>mesh, whether you want route reflectors, whether you

01:49:44.670 --> 01:49:45.150
<v Speaker 1>want

01:49:46.435 --> 01:49:48.035
<v Speaker 1>this trickle down routing.

01:49:50.675 --> 01:49:50.915
<v Speaker 1>But

01:49:51.715 --> 01:49:53.475
<v Speaker 1>So, yeah, I I actually think the only

01:49:53.475 --> 01:49:55.235
<v Speaker 1>use case is to just scale this note

01:49:55.235 --> 01:49:56.835
<v Speaker 1>to note mesh. But in our case, we're

01:49:56.835 --> 01:49:58.489
<v Speaker 1>not using the note to note mesh at

01:49:58.489 --> 01:50:00.650
<v Speaker 1>all. We're using the packet routers to as

01:50:00.650 --> 01:50:02.010
<v Speaker 1>route reflectors, basically.

01:50:02.969 --> 01:50:03.530
<v Speaker 1>So

01:50:04.090 --> 01:50:04.570
<v Speaker 1>yeah.

01:50:05.130 --> 01:50:06.329
<v Speaker 0>Alright. Well,

01:50:07.130 --> 01:50:09.289
<v Speaker 0>my brain is now officially fried.

01:50:09.690 --> 01:50:10.010
<v Speaker 1>Yeah.

01:50:10.565 --> 01:50:12.485
<v Speaker 0>And there is a a lot, I think,

01:50:12.485 --> 01:50:14.244
<v Speaker 0>I need to to learn and play with

01:50:14.244 --> 01:50:16.085
<v Speaker 0>in that space. And that was a fantastic

01:50:16.485 --> 01:50:18.085
<v Speaker 0>you know, just walking through this step by

01:50:18.085 --> 01:50:19.925
<v Speaker 0>step and actually seeing how to disable, like,

01:50:19.925 --> 01:50:23.125
<v Speaker 0>before and turn on IPv6 and configure the

01:50:23.125 --> 01:50:25.284
<v Speaker 0>peers. It's all very valuable and very useful.

01:50:25.284 --> 01:50:26.660
<v Speaker 0>So thank you for taking the time to

01:50:26.660 --> 01:50:28.020
<v Speaker 0>to join me today and go over all

01:50:28.020 --> 01:50:29.460
<v Speaker 0>of that. I

01:50:29.940 --> 01:50:32.340
<v Speaker 0>will publish the preliminary automation

01:50:32.980 --> 01:50:35.140
<v Speaker 0>in the next couple of days. Is there

01:50:35.140 --> 01:50:36.980
<v Speaker 0>anything you would like to finish up with

01:50:36.980 --> 01:50:38.900
<v Speaker 0>before we we finish off for the day?

01:50:38.900 --> 01:50:40.264
<v Speaker 0>And I'll let you get back to your

01:50:40.264 --> 01:50:42.104
<v Speaker 0>lunch or work or whatever.

01:50:44.185 --> 01:50:46.105
<v Speaker 1>Well, one thing we didn't cover at all

01:50:46.105 --> 01:50:47.544
<v Speaker 1>is, of course, security.

01:50:47.784 --> 01:50:49.945
<v Speaker 1>So this might be a fun right?

01:50:50.505 --> 01:50:53.150
<v Speaker 1>You you everything is public now, and that's

01:50:53.150 --> 01:50:55.150
<v Speaker 1>probably not what you want. Like, I don't

01:50:55.150 --> 01:50:57.470
<v Speaker 1>want all my cluster IPs to be publicly

01:50:57.470 --> 01:50:58.670
<v Speaker 1>reachable and stuff.

01:50:59.310 --> 01:51:00.350
<v Speaker 1>And,

01:51:00.990 --> 01:51:03.070
<v Speaker 1>yeah, that's something we haven't configured yet, but

01:51:03.070 --> 01:51:05.310
<v Speaker 1>this is something you can do. So Calico

01:51:05.310 --> 01:51:06.830
<v Speaker 1>has support for network policies,

01:51:08.445 --> 01:51:10.205
<v Speaker 1>which you can describe which pods can talk

01:51:10.205 --> 01:51:12.365
<v Speaker 1>to which pods and stuff. And this is

01:51:12.365 --> 01:51:14.525
<v Speaker 1>something you should definitely set up after you

01:51:14.525 --> 01:51:16.844
<v Speaker 1>set up an IPv6 cluster because

01:51:17.485 --> 01:51:19.965
<v Speaker 1>everything is publicly routable, right? And

01:51:21.120 --> 01:51:22.560
<v Speaker 1>this might not be what you want, and

01:51:22.560 --> 01:51:23.520
<v Speaker 1>you want to close

01:51:24.640 --> 01:51:26.720
<v Speaker 1>the fortress a little bit. Yeah.

01:51:27.600 --> 01:51:29.760
<v Speaker 1>Yeah. But that's an exercise for the reader.

01:51:30.560 --> 01:51:32.720
<v Speaker 0>Yeah. Either that or another two hour stream

01:51:32.720 --> 01:51:34.640
<v Speaker 0>eventually in a few months or something. But

01:51:34.640 --> 01:51:36.315
<v Speaker 0>we'll see. Yes. So

01:51:36.955 --> 01:51:39.115
<v Speaker 0>the the policy stuff is security stuff. Yeah.

01:51:39.115 --> 01:51:41.355
<v Speaker 0>Yeah. I can imagine. Right now, everything is

01:51:41.355 --> 01:51:42.955
<v Speaker 0>is public, so I'm looking forward to shutting

01:51:42.955 --> 01:51:44.795
<v Speaker 0>this customer down before it gets to there.

01:51:44.875 --> 01:51:45.115
<v Speaker 0>But

01:51:45.755 --> 01:51:49.515
<v Speaker 0>Yep. You also said at the start that

01:51:48.630 --> 01:51:50.469
<v Speaker 0>you work for wire, and I believe you

01:51:50.469 --> 01:51:51.829
<v Speaker 0>may be tiring just now.

01:51:52.310 --> 01:51:54.949
<v Speaker 1>Yeah. So we are hiring for a

01:51:55.590 --> 01:51:56.789
<v Speaker 1>operations position.

01:51:58.790 --> 01:52:01.670
<v Speaker 1>Experience with Kubernetes would be very helpful, but

01:52:01.670 --> 01:52:04.790
<v Speaker 1>not needed per se, because we are so

01:52:04.605 --> 01:52:07.165
<v Speaker 1>so WIRE is end to end encrypted chat

01:52:07.565 --> 01:52:11.005
<v Speaker 1>platform, collaboration platform, like a Slack competitor.

01:52:11.645 --> 01:52:13.005
<v Speaker 1>And we also

01:52:13.805 --> 01:52:16.845
<v Speaker 1>run WIRE instances on premise at customers.

01:52:18.210 --> 01:52:21.170
<v Speaker 1>And we are migrating our old cloud infrastructure

01:52:21.170 --> 01:52:22.130
<v Speaker 1>to our

01:52:22.450 --> 01:52:25.409
<v Speaker 1>new cloud infrastructure, which is Kubernetes based. And

01:52:26.210 --> 01:52:28.530
<v Speaker 1>so we need people who have knowledge about

01:52:28.530 --> 01:52:31.010
<v Speaker 1>on premise hosting and all the dirty nitty

01:52:31.010 --> 01:52:34.664
<v Speaker 1>gritties of people other people's shitty networks. And

01:52:34.745 --> 01:52:37.144
<v Speaker 1>we need people to help us migrate to

01:52:37.304 --> 01:52:39.465
<v Speaker 1>our new cloud infrastructure, so we're looking for

01:52:39.465 --> 01:52:40.585
<v Speaker 1>people for that. So,

01:52:41.705 --> 01:52:44.665
<v Speaker 1>yeah, feel free to check out jobs.wire.com.

01:52:44.665 --> 01:52:45.304
<v Speaker 1>And then

01:52:47.705 --> 01:52:49.460
<v Speaker 1>yeah. There's a job ad there. Yep. Cool.

01:52:49.540 --> 01:52:51.460
<v Speaker 0>Alright. Well, honestly,

01:52:51.460 --> 01:52:52.580
<v Speaker 0>that was really

01:52:52.660 --> 01:52:53.460
<v Speaker 0>insightful.

01:52:53.460 --> 01:52:54.980
<v Speaker 0>I learned a lot. So thank you very

01:52:54.980 --> 01:52:56.100
<v Speaker 0>much for taking the time out to join

01:52:56.100 --> 01:52:57.540
<v Speaker 0>me again. And I hope I hope speaks

01:52:57.540 --> 01:52:59.140
<v Speaker 0>to you all then. Yeah. See you around.

01:52:59.140 --> 01:52:59.540
<v Speaker 0>Bye.

01:52:59.940 --> 01:53:00.260
<v Speaker 0>Ciao.
