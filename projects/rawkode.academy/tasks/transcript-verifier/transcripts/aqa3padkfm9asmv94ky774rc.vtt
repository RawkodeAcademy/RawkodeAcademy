WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 60ddd908-fb39-4df3-940e-a6ced1566b00
Created: 2025-04-29T20:23:42.118Z
Duration: 5020.0444
Channels: 1

00:00:36.830 --> 00:00:39.309
<v Speaker 0>Hello, and welcome to today's episode of Rawkode

00:00:39.309 --> 00:00:40.989
<v Speaker 0>live. I am your host,

00:00:41.150 --> 00:00:41.390
<v Speaker 0>Rawkode.

00:00:42.095 --> 00:00:43.535
<v Speaker 0>Today, we're gonna be taking a look at

00:00:43.535 --> 00:00:44.655
<v Speaker 0>Suborbital,

00:00:44.815 --> 00:00:47.695
<v Speaker 0>a platform from running web assembly applications.

00:00:47.855 --> 00:00:50.335
<v Speaker 0>And I am joined today by the creator,

00:00:50.735 --> 00:00:52.735
<v Speaker 0>Connor Hicks. Hey, Connor. How are you?

00:00:54.240 --> 00:00:57.360
<v Speaker 1>I'm doing well. How are you? Yes. Very

00:00:57.360 --> 00:00:59.760
<v Speaker 0>well. Thank you. Not too bad. Not too

00:00:59.760 --> 00:01:01.360
<v Speaker 0>bad at all. I know it's early for

00:01:01.360 --> 00:01:02.800
<v Speaker 0>you. So thank you very much for taking

00:01:02.800 --> 00:01:04.240
<v Speaker 0>the time out of your day and and

00:01:04.240 --> 00:01:05.360
<v Speaker 0>joining us today.

00:01:06.640 --> 00:01:07.520
<v Speaker 1>My pleasure.

00:01:08.160 --> 00:01:08.480
<v Speaker 0>So

00:01:09.705 --> 00:01:11.865
<v Speaker 0>I gave a very brief introduction to what

00:01:11.865 --> 00:01:14.105
<v Speaker 0>Suborbital is. It's a platform for running web

00:01:14.105 --> 00:01:15.305
<v Speaker 0>assembly applications.

00:01:15.305 --> 00:01:16.185
<v Speaker 0>And do

00:01:16.665 --> 00:01:17.945
<v Speaker 0>you wanna just give us a little bit

00:01:17.945 --> 00:01:20.025
<v Speaker 0>of more flavor on that? And I I

00:01:20.025 --> 00:01:21.465
<v Speaker 0>believe you've got some slides to help us

00:01:21.465 --> 00:01:22.105
<v Speaker 0>through that as well.

00:01:23.610 --> 00:01:25.689
<v Speaker 1>I sure do. Let's try to get this

00:01:25.689 --> 00:01:26.970
<v Speaker 1>up and running here.

00:01:27.770 --> 00:01:28.729
<v Speaker 1>Yeah. So

00:01:29.049 --> 00:01:31.530
<v Speaker 1>I will start sharing those and then I'll

00:01:31.530 --> 00:01:33.450
<v Speaker 1>give you a little bit more information.

00:01:34.330 --> 00:01:36.414
<v Speaker 0>Yeah. And I was really rude. And like

00:01:36.414 --> 00:01:38.015
<v Speaker 0>I said in that little intro video there,

00:01:38.015 --> 00:01:39.615
<v Speaker 0>I I always mess up the intro. I

00:01:39.615 --> 00:01:41.375
<v Speaker 0>forgot to even ask you to introduce yourself.

00:01:41.375 --> 00:01:42.575
<v Speaker 0>Do you wanna give us a little bit

00:01:42.575 --> 00:01:44.735
<v Speaker 0>about you as well, You know what? That's

00:01:44.735 --> 00:01:46.814
<v Speaker 1>the second slide, so we can just go

00:01:46.814 --> 00:01:48.930
<v Speaker 1>right into that. Oh, perfect. There you go.

00:01:49.810 --> 00:01:50.530
<v Speaker 1>Alright.

00:01:51.570 --> 00:01:53.970
<v Speaker 1>Yeah. So hi. My name is Connor Hicks.

00:01:53.970 --> 00:01:54.930
<v Speaker 1>I

00:01:55.170 --> 00:01:57.250
<v Speaker 1>by day, I work for one password. I

00:01:57.250 --> 00:02:00.049
<v Speaker 1>lead a team called platform, product discovery, I

00:02:00.049 --> 00:02:00.369
<v Speaker 1>should say.

00:02:01.475 --> 00:02:04.435
<v Speaker 1>We do research and development, for new products.

00:02:04.835 --> 00:02:07.475
<v Speaker 1>And, for the last year or so, I've

00:02:07.475 --> 00:02:09.795
<v Speaker 1>been working on Suborbital.

00:02:10.275 --> 00:02:11.715
<v Speaker 1>And Suborbital's,

00:02:12.195 --> 00:02:15.075
<v Speaker 1>goal is to allow building

00:02:15.155 --> 00:02:16.675
<v Speaker 1>web

00:02:15.960 --> 00:02:16.840
<v Speaker 1>services,

00:02:16.840 --> 00:02:17.720
<v Speaker 1>APIs

00:02:17.880 --> 00:02:18.680
<v Speaker 1>using,

00:02:19.320 --> 00:02:20.200
<v Speaker 1>functions

00:02:20.200 --> 00:02:22.040
<v Speaker 1>that are compiled to WebAssembly.

00:02:22.840 --> 00:02:23.480
<v Speaker 1>And

00:02:24.200 --> 00:02:25.640
<v Speaker 1>so, you know, it's been

00:02:26.520 --> 00:02:28.200
<v Speaker 1>there's been several iterations

00:02:28.280 --> 00:02:29.995
<v Speaker 1>of the project.

00:02:31.115 --> 00:02:33.115
<v Speaker 1>Originally, it actually used Docker,

00:02:33.835 --> 00:02:35.195
<v Speaker 1>to facilitate,

00:02:35.195 --> 00:02:36.875
<v Speaker 1>you know, the the actual running of the

00:02:36.875 --> 00:02:39.915
<v Speaker 1>functions. But about a year ago, I I

00:02:39.915 --> 00:02:41.755
<v Speaker 1>decided that it just wasn't

00:02:42.620 --> 00:02:44.860
<v Speaker 1>it it wasn't working the way that I

00:02:44.860 --> 00:02:46.620
<v Speaker 1>wanted it to. Everything was

00:02:46.700 --> 00:02:47.900
<v Speaker 1>overcomplicated.

00:02:48.540 --> 00:02:50.620
<v Speaker 1>There were components that

00:02:50.860 --> 00:02:52.700
<v Speaker 1>I didn't like how they were designed. So

00:02:52.700 --> 00:02:55.614
<v Speaker 1>I decided to pivot, if you will, and

00:02:55.614 --> 00:02:58.254
<v Speaker 1>and switch to WebAssembly. So I'll back up

00:02:58.254 --> 00:03:00.015
<v Speaker 1>for a second and talk about the actual

00:03:00.015 --> 00:03:02.894
<v Speaker 1>problem that a developer is facing that, you

00:03:02.894 --> 00:03:05.614
<v Speaker 1>know, I'm actually trying to solve here regardless

00:03:05.614 --> 00:03:07.135
<v Speaker 1>of the technology being used.

00:03:09.069 --> 00:03:10.830
<v Speaker 1>And it's really that, you know,

00:03:11.230 --> 00:03:12.750
<v Speaker 1>building web services

00:03:12.750 --> 00:03:15.310
<v Speaker 1>has gotten more and more complex

00:03:15.470 --> 00:03:18.269
<v Speaker 1>over the last couple of years, right, the

00:03:18.269 --> 00:03:19.390
<v Speaker 1>last ten years even.

00:03:20.885 --> 00:03:23.125
<v Speaker 1>Everything is microservices

00:03:23.125 --> 00:03:26.245
<v Speaker 1>or, you know, having to string together these

00:03:26.245 --> 00:03:28.565
<v Speaker 1>these complicated serverless platforms.

00:03:29.844 --> 00:03:30.485
<v Speaker 1>And

00:03:30.965 --> 00:03:34.245
<v Speaker 1>I'm I'm really having a focus on simplicity.

00:03:35.340 --> 00:03:37.980
<v Speaker 1>The the actual the tagline

00:03:37.980 --> 00:03:39.099
<v Speaker 1>for Suborbital

00:03:39.099 --> 00:03:39.740
<v Speaker 1>is

00:03:40.379 --> 00:03:43.019
<v Speaker 1>build web services that are powerful but never

00:03:43.019 --> 00:03:43.820
<v Speaker 1>complicated.

00:03:44.459 --> 00:03:46.460
<v Speaker 1>That's kind of the the

00:03:46.620 --> 00:03:48.060
<v Speaker 1>the line that I've been using.

00:03:49.715 --> 00:03:51.955
<v Speaker 1>And so I really want to make it

00:03:51.955 --> 00:03:55.314
<v Speaker 1>easier to get a production web service up

00:03:55.314 --> 00:03:56.115
<v Speaker 1>and running

00:03:56.674 --> 00:03:59.555
<v Speaker 1>with with a lot, you know, less fuss.

00:04:01.555 --> 00:04:01.954
<v Speaker 1>So,

00:04:02.970 --> 00:04:04.490
<v Speaker 1>actually, there's the tagline.

00:04:04.810 --> 00:04:06.490
<v Speaker 1>So, yeah, I am building for a future

00:04:06.490 --> 00:04:07.930
<v Speaker 1>based on WebAssembly.

00:04:08.570 --> 00:04:10.970
<v Speaker 1>I've been coming up with this thing called

00:04:10.970 --> 00:04:12.810
<v Speaker 1>the SUFA design pattern,

00:04:13.290 --> 00:04:16.730
<v Speaker 1>that stands for simple unified function based applications.

00:04:17.464 --> 00:04:19.464
<v Speaker 1>And I can go through a bit more

00:04:19.464 --> 00:04:21.065
<v Speaker 1>of what that's all about a little later,

00:04:21.065 --> 00:04:22.985
<v Speaker 1>but the the basic idea is,

00:04:24.025 --> 00:04:26.585
<v Speaker 1>let's make it easy to deploy,

00:04:27.145 --> 00:04:28.745
<v Speaker 1>make it so that you only have to

00:04:28.745 --> 00:04:30.824
<v Speaker 1>deploy one thing, you know, unified

00:04:31.430 --> 00:04:33.669
<v Speaker 1>function based because I think that's a great

00:04:33.669 --> 00:04:34.550
<v Speaker 1>paradigm.

00:04:34.790 --> 00:04:35.510
<v Speaker 1>And then,

00:04:35.750 --> 00:04:36.710
<v Speaker 1>application

00:04:36.710 --> 00:04:39.830
<v Speaker 1>meaning having a very specific meaning of it

00:04:39.830 --> 00:04:41.430
<v Speaker 1>is one program

00:04:41.510 --> 00:04:43.510
<v Speaker 1>that is serving your entire application. You don't

00:04:43.510 --> 00:04:44.950
<v Speaker 1>have multiple services

00:04:45.190 --> 00:04:48.014
<v Speaker 1>that are serving the same thing. You can

00:04:48.095 --> 00:04:48.975
<v Speaker 1>segment

00:04:48.975 --> 00:04:51.855
<v Speaker 1>your application logic using the functions rather than

00:04:52.014 --> 00:04:53.694
<v Speaker 1>using individual

00:04:53.694 --> 00:04:54.575
<v Speaker 1>services.

00:04:55.294 --> 00:04:58.255
<v Speaker 1>And one of my goals is to really

00:04:58.255 --> 00:05:01.215
<v Speaker 1>embrace the edge computing movement that's been that's

00:05:01.215 --> 00:05:01.775
<v Speaker 1>been going on.

00:05:02.510 --> 00:05:05.390
<v Speaker 1>Things like Cloudflare Workers and and Fastly

00:05:05.630 --> 00:05:06.830
<v Speaker 1>ComputeEdge,

00:05:07.550 --> 00:05:09.790
<v Speaker 1>they're starting to take advantage of WebAssembly on

00:05:09.790 --> 00:05:10.430
<v Speaker 1>the edge.

00:05:11.390 --> 00:05:13.310
<v Speaker 1>I do think that there's, you know,

00:05:13.790 --> 00:05:15.985
<v Speaker 1>another couple steps further that we can take

00:05:15.985 --> 00:05:17.745
<v Speaker 1>to really take advantage of that, and I'll

00:05:17.745 --> 00:05:20.225
<v Speaker 1>talk about, you know, how later.

00:05:21.345 --> 00:05:23.425
<v Speaker 1>And then one of the founding,

00:05:23.505 --> 00:05:26.305
<v Speaker 1>like, principles of just me as a developer

00:05:26.384 --> 00:05:27.824
<v Speaker 1>is that make

00:05:27.824 --> 00:05:31.104
<v Speaker 1>make libraries and and

00:05:30.080 --> 00:05:33.600
<v Speaker 1>and frameworks and such hard to use wrong.

00:05:33.600 --> 00:05:35.600
<v Speaker 1>Right? There are lots of things that you

00:05:35.600 --> 00:05:36.160
<v Speaker 1>can

00:05:36.400 --> 00:05:38.240
<v Speaker 1>you know, there's a lot of libraries that

00:05:38.240 --> 00:05:39.920
<v Speaker 1>you can get that you can configure every

00:05:39.920 --> 00:05:42.240
<v Speaker 1>single little nut and bolts down in the

00:05:42.240 --> 00:05:43.120
<v Speaker 1>guts of the system.

00:05:44.115 --> 00:05:44.755
<v Speaker 1>And

00:05:44.995 --> 00:05:46.755
<v Speaker 1>sometimes you can shoot yourself in the foot

00:05:46.755 --> 00:05:48.675
<v Speaker 1>with that because the maintainer,

00:05:48.675 --> 00:05:50.755
<v Speaker 1>you know, allowed you to configure something that

00:05:50.755 --> 00:05:52.355
<v Speaker 1>you shouldn't have been able to configure, and

00:05:52.355 --> 00:05:54.915
<v Speaker 1>you can, you know, introduce security vulnerabilities or

00:05:54.915 --> 00:05:58.350
<v Speaker 1>whatever by by misconfiguring something. So it's one

00:05:58.350 --> 00:05:59.870
<v Speaker 1>of the one of the big goals to

00:05:59.870 --> 00:06:00.990
<v Speaker 1>make that hard to do.

00:06:02.990 --> 00:06:05.790
<v Speaker 1>So Suborbital is actually a family of projects.

00:06:06.590 --> 00:06:08.190
<v Speaker 1>The the main one,

00:06:08.590 --> 00:06:10.110
<v Speaker 1>the one that we're gonna talk about most

00:06:10.110 --> 00:06:11.070
<v Speaker 1>today is ATMO.

00:06:11.525 --> 00:06:14.565
<v Speaker 1>It's kind of the the batteries included

00:06:14.805 --> 00:06:17.125
<v Speaker 1>project, if you will. It has,

00:06:17.444 --> 00:06:20.324
<v Speaker 1>all of the, the WebAssembly runtime.

00:06:20.485 --> 00:06:22.164
<v Speaker 1>All of the all of the three projects

00:06:22.164 --> 00:06:24.164
<v Speaker 1>you see at the bottom are put together

00:06:24.164 --> 00:06:27.604
<v Speaker 1>to form ATMO, kinda like the Voltron

00:06:27.500 --> 00:06:28.380
<v Speaker 1>robot.

00:06:29.820 --> 00:06:33.020
<v Speaker 1>So there's there's Hive, which is a a

00:06:33.020 --> 00:06:35.260
<v Speaker 1>job scheduler or a function scheduler.

00:06:35.500 --> 00:06:37.820
<v Speaker 1>And this is where the WebAssembly,

00:06:37.979 --> 00:06:38.780
<v Speaker 1>you know,

00:06:39.419 --> 00:06:41.525
<v Speaker 1>the main parts happen

00:06:41.605 --> 00:06:43.525
<v Speaker 1>are in the the job scheduler.

00:06:43.925 --> 00:06:45.845
<v Speaker 1>It uses Wasmr

00:06:45.845 --> 00:06:47.525
<v Speaker 1>under the hood to,

00:06:47.765 --> 00:06:49.605
<v Speaker 1>to run WebAssembly modules.

00:06:49.765 --> 00:06:52.005
<v Speaker 1>But what Hive does is it actually makes

00:06:52.005 --> 00:06:53.365
<v Speaker 1>it multitenant,

00:06:53.925 --> 00:06:57.210
<v Speaker 1>and it manages the execution

00:06:57.450 --> 00:06:58.570
<v Speaker 1>and memory

00:06:58.570 --> 00:06:59.130
<v Speaker 1>and

00:06:59.770 --> 00:07:00.889
<v Speaker 1>communication

00:07:00.889 --> 00:07:01.610
<v Speaker 1>of

00:07:01.690 --> 00:07:04.250
<v Speaker 1>many, many, many modules all at once.

00:07:05.210 --> 00:07:05.930
<v Speaker 1>And

00:07:06.330 --> 00:07:08.730
<v Speaker 1>so that's kind of the core of ATMO.

00:07:10.045 --> 00:07:11.965
<v Speaker 1>It can be all three of these building

00:07:11.965 --> 00:07:13.805
<v Speaker 1>blocks, if you will, they can be used

00:07:13.805 --> 00:07:15.325
<v Speaker 1>on their own if you wish.

00:07:15.885 --> 00:07:17.645
<v Speaker 1>But Atmo is kind of the plug and

00:07:17.645 --> 00:07:19.885
<v Speaker 1>play all in one. You don't need to

00:07:19.885 --> 00:07:22.790
<v Speaker 1>do anything yourself get it up and running.

00:07:24.470 --> 00:07:27.110
<v Speaker 1>And then Vector is is a is an

00:07:27.110 --> 00:07:29.030
<v Speaker 1>API framework for Go.

00:07:29.750 --> 00:07:30.710
<v Speaker 1>It does,

00:07:31.190 --> 00:07:32.630
<v Speaker 1>you know, just make it a little bit

00:07:32.630 --> 00:07:35.430
<v Speaker 1>easier to build, API servers. It's

00:07:35.715 --> 00:07:37.795
<v Speaker 1>it's something that I built for myself,

00:07:38.115 --> 00:07:40.675
<v Speaker 1>and for, you know, just making it,

00:07:41.555 --> 00:07:44.354
<v Speaker 1>quicker to bootstrap a Go web service without

00:07:44.354 --> 00:07:46.355
<v Speaker 1>all the boilerplate that you normally need.

00:07:47.315 --> 00:07:48.835
<v Speaker 1>And then Grav

00:07:48.750 --> 00:07:49.390
<v Speaker 1>is,

00:07:49.550 --> 00:07:51.790
<v Speaker 1>it's my kinda my my favorite little project

00:07:51.790 --> 00:07:52.510
<v Speaker 1>of the bunch.

00:07:53.390 --> 00:07:54.510
<v Speaker 1>It's a distributed

00:07:54.750 --> 00:07:56.430
<v Speaker 1>I call it a messaging mesh.

00:07:56.910 --> 00:07:58.750
<v Speaker 1>So you can think of it like a

00:07:58.750 --> 00:08:00.990
<v Speaker 1>message bus, kind of like Kafka,

00:08:01.390 --> 00:08:03.630
<v Speaker 1>but it is completely decentralized.

00:08:03.950 --> 00:08:05.005
<v Speaker 1>It takes

00:08:05.565 --> 00:08:07.884
<v Speaker 1>plug ins for transport

00:08:07.884 --> 00:08:10.125
<v Speaker 1>and and node discovery. So,

00:08:10.604 --> 00:08:12.925
<v Speaker 1>anybody could write a plug in to, you

00:08:12.925 --> 00:08:15.645
<v Speaker 1>know, use a particular transport,

00:08:15.645 --> 00:08:18.685
<v Speaker 1>a particular protocol, or whatever to, to do

00:08:18.685 --> 00:08:19.164
<v Speaker 1>the messaging.

00:08:19.950 --> 00:08:22.270
<v Speaker 1>But it is really designed to allow,

00:08:22.590 --> 00:08:25.230
<v Speaker 1>scaling up, you know, large groups of instances

00:08:25.230 --> 00:08:28.270
<v Speaker 1>to to communicate asynchronously with one another.

00:08:30.510 --> 00:08:32.510
<v Speaker 1>So I just wanted to quickly touch on

00:08:32.510 --> 00:08:33.710
<v Speaker 1>WebAssembly itself

00:08:34.145 --> 00:08:36.544
<v Speaker 1>and say, you know, there's been a pretty

00:08:36.544 --> 00:08:39.825
<v Speaker 1>big movement coming up, over the last little

00:08:39.825 --> 00:08:40.385
<v Speaker 1>while,

00:08:41.025 --> 00:08:43.265
<v Speaker 1>for WebAssembly, not just in the web browser,

00:08:43.265 --> 00:08:44.945
<v Speaker 1>but also in more of a server side

00:08:44.945 --> 00:08:45.665
<v Speaker 1>context.

00:08:46.225 --> 00:08:47.825
<v Speaker 1>And I've got a couple of examples here.

00:08:48.800 --> 00:08:50.960
<v Speaker 1>You know, the the founder of Docker,

00:08:51.120 --> 00:08:53.440
<v Speaker 1>this is a quote that anybody working in

00:08:53.440 --> 00:08:56.240
<v Speaker 1>server side WebAssembly will probably quote at some

00:08:56.240 --> 00:08:58.320
<v Speaker 1>point in their, in their tenure,

00:08:58.720 --> 00:09:00.480
<v Speaker 1>which is that, you know, if WASM and

00:09:00.480 --> 00:09:02.640
<v Speaker 1>Wazee existed in 02/2008, we wouldn't have needed

00:09:02.640 --> 00:09:04.375
<v Speaker 1>to create Docker. You know, it's it's a

00:09:04.375 --> 00:09:05.095
<v Speaker 1>pretty good

00:09:05.895 --> 00:09:09.175
<v Speaker 1>endorsement, I think, from from the, the CEO

00:09:09.175 --> 00:09:09.975
<v Speaker 1>of Docker.

00:09:10.855 --> 00:09:12.855
<v Speaker 1>And then, you know, the CNCF,

00:09:13.175 --> 00:09:16.615
<v Speaker 1>showed WebAssembly as, one of the five technologies

00:09:16.615 --> 00:09:17.975
<v Speaker 1>to watch in 2021.

00:09:18.600 --> 00:09:20.680
<v Speaker 1>And there's a whole bunch of open source

00:09:20.680 --> 00:09:22.360
<v Speaker 1>work being done right now. I'm gonna show

00:09:22.360 --> 00:09:23.399
<v Speaker 1>off a couple of things,

00:09:23.800 --> 00:09:25.800
<v Speaker 1>today, I think, couple of projects,

00:09:26.120 --> 00:09:29.560
<v Speaker 1>obviously, including the suborbital projects as well. But

00:09:29.560 --> 00:09:30.759
<v Speaker 1>things like Crustlet,

00:09:30.920 --> 00:09:32.680
<v Speaker 1>that's one of my favorite projects. I think

00:09:32.680 --> 00:09:34.815
<v Speaker 1>it's so cool. They were able to

00:09:35.214 --> 00:09:36.654
<v Speaker 1>basically emulate

00:09:36.895 --> 00:09:39.375
<v Speaker 1>a what they call the virtual cubelet,

00:09:39.855 --> 00:09:42.575
<v Speaker 1>which is tricking Kubernetes not tricking, but plugging

00:09:42.575 --> 00:09:43.775
<v Speaker 1>into Kubernetes

00:09:44.175 --> 00:09:46.095
<v Speaker 1>to make it think that you're running regular

00:09:46.095 --> 00:09:48.654
<v Speaker 1>workloads when really it's running WebAssembly workloads.

00:09:49.150 --> 00:09:51.070
<v Speaker 1>It was entirely written in Rust.

00:09:51.950 --> 00:09:53.870
<v Speaker 1>There was a big splash about it a

00:09:53.870 --> 00:09:55.230
<v Speaker 1>couple of months ago. I think it's pretty

00:09:55.230 --> 00:09:57.070
<v Speaker 1>cool. So there's lots of projects like that

00:09:57.070 --> 00:09:59.630
<v Speaker 1>that are coming up and making me really

00:09:59.630 --> 00:10:01.550
<v Speaker 1>believe that WebAssembly is kind of the next

00:10:01.550 --> 00:10:02.430
<v Speaker 1>the next big thing.

00:10:04.655 --> 00:10:06.735
<v Speaker 1>And so I'll I'll just close out the

00:10:06.735 --> 00:10:08.895
<v Speaker 1>slides by saying, you know, I'm I'm looking

00:10:08.895 --> 00:10:10.975
<v Speaker 1>for anybody who's interested in coming and working

00:10:10.975 --> 00:10:11.535
<v Speaker 1>on this.

00:10:12.255 --> 00:10:14.015
<v Speaker 1>It's been mostly just me for the last

00:10:14.015 --> 00:10:14.655
<v Speaker 1>year or so.

00:10:16.149 --> 00:10:17.589
<v Speaker 1>People are starting to try it out. People

00:10:17.589 --> 00:10:19.110
<v Speaker 1>are starting to get really interested in it,

00:10:19.110 --> 00:10:19.590
<v Speaker 1>but,

00:10:20.070 --> 00:10:22.310
<v Speaker 1>you know, I'm I am anybody who's interested

00:10:22.310 --> 00:10:25.029
<v Speaker 1>in coming to help out, I really appreciate

00:10:25.029 --> 00:10:27.830
<v Speaker 1>it. And, I am running a little survey.

00:10:27.830 --> 00:10:29.270
<v Speaker 1>I wanna know what people

00:10:29.510 --> 00:10:32.995
<v Speaker 1>want to get out of a WebAssembly,

00:10:33.635 --> 00:10:34.995
<v Speaker 1>server side framework.

00:10:36.035 --> 00:10:38.515
<v Speaker 1>So bit.ly/wildinsurvey.

00:10:38.675 --> 00:10:40.275
<v Speaker 1>It'll take three minutes to fill out, and

00:10:40.275 --> 00:10:41.475
<v Speaker 1>I'd love to get

00:10:42.129 --> 00:10:43.250
<v Speaker 1>everyone's feedback.

00:10:44.689 --> 00:10:46.449
<v Speaker 1>So with that, I think we can get

00:10:46.449 --> 00:10:47.329
<v Speaker 1>right into it.

00:10:48.610 --> 00:10:49.410
<v Speaker 0>Awesome.

00:10:50.689 --> 00:10:51.569
<v Speaker 0>Yeah.

00:10:51.569 --> 00:10:53.970
<v Speaker 0>Definitely. That was that was really cool. I

00:10:53.970 --> 00:10:54.449
<v Speaker 0>think,

00:10:54.850 --> 00:10:57.725
<v Speaker 0>yeah, everyone's gonna quote that Solomon thing at

00:10:57.725 --> 00:10:59.165
<v Speaker 0>some point I think over the next few

00:10:59.165 --> 00:11:01.645
<v Speaker 0>years because it's a very powerful statement to

00:11:01.645 --> 00:11:02.925
<v Speaker 0>say that, you know,

00:11:03.165 --> 00:11:05.485
<v Speaker 0>what is now become almost a ubiquitous way

00:11:05.485 --> 00:11:06.845
<v Speaker 0>of running language

00:11:07.325 --> 00:11:08.925
<v Speaker 0>and runtime agnostic

00:11:08.925 --> 00:11:09.645
<v Speaker 0>applications

00:11:10.629 --> 00:11:12.870
<v Speaker 0>on bare metal and virtual machines. The containers

00:11:12.870 --> 00:11:14.870
<v Speaker 0>wouldn't be needed to put Wasm and

00:11:15.269 --> 00:11:17.110
<v Speaker 0>I mean, it's not hyperbole is it? Like

00:11:17.110 --> 00:11:19.509
<v Speaker 0>Wasm really does have the potential to change

00:11:19.509 --> 00:11:21.189
<v Speaker 0>the way that we build applications within the

00:11:21.189 --> 00:11:23.350
<v Speaker 0>next five to ten years. And Wasi I

00:11:23.350 --> 00:11:26.105
<v Speaker 0>think It absolutely does. Super exciting as well.

00:11:26.185 --> 00:11:28.585
<v Speaker 0>I was really disappointed obviously with the Mazzella

00:11:28.585 --> 00:11:31.225
<v Speaker 0>layoffs last year. It looked like I wasn't

00:11:31.225 --> 00:11:32.825
<v Speaker 0>sure if Wazi was gonna pull through and

00:11:32.825 --> 00:11:35.705
<v Speaker 0>then literally just yesterday my calendar bleeped with

00:11:35.705 --> 00:11:37.385
<v Speaker 0>the invite to the next Wazi meeting and

00:11:37.385 --> 00:11:39.145
<v Speaker 0>I was like really excited to see that

00:11:39.145 --> 00:11:40.265
<v Speaker 0>come back to life again.

00:11:41.260 --> 00:11:42.540
<v Speaker 0>Yeah. Yeah. Absolutely.

00:11:43.100 --> 00:11:45.100
<v Speaker 0>And the Crustlet project. I think I actually

00:11:45.100 --> 00:11:46.380
<v Speaker 0>wrote an article on that last year as

00:11:46.380 --> 00:11:48.140
<v Speaker 0>well. Really really cool thing as well. I

00:11:48.140 --> 00:11:49.740
<v Speaker 0>was so happy when I got that running.

00:11:50.220 --> 00:11:51.900
<v Speaker 0>And now we get to look at more

00:11:51.900 --> 00:11:53.820
<v Speaker 0>web assembly stuff. Like it's definitely one of

00:11:53.820 --> 00:11:56.295
<v Speaker 0>my favorite technologies It's just hovering on that

00:11:56.295 --> 00:11:58.855
<v Speaker 0>fringe right now of really awesome things. So

00:11:58.855 --> 00:12:00.055
<v Speaker 0>this is exciting.

00:12:00.214 --> 00:12:02.535
<v Speaker 1>Yeah. Yeah. And that's something I want everybody

00:12:02.535 --> 00:12:05.255
<v Speaker 1>to to realize. Like, this this technology is

00:12:05.255 --> 00:12:07.334
<v Speaker 1>still very, very young.

00:12:07.574 --> 00:12:08.454
<v Speaker 1>There's

00:12:08.454 --> 00:12:10.910
<v Speaker 1>there's not, you know, been the the same

00:12:10.910 --> 00:12:13.150
<v Speaker 1>level of adoption on the server side as

00:12:13.150 --> 00:12:15.390
<v Speaker 1>it has had on the browser so far.

00:12:16.590 --> 00:12:18.910
<v Speaker 1>But the amount of work that the community

00:12:18.910 --> 00:12:20.830
<v Speaker 1>is putting into it right now really makes

00:12:20.830 --> 00:12:22.510
<v Speaker 1>me believe that it is, like you said,

00:12:22.510 --> 00:12:23.870
<v Speaker 1>in the next five, ten years gonna be

00:12:23.870 --> 00:12:26.475
<v Speaker 1>a a really big deal. Yeah, definitely.

00:12:27.355 --> 00:12:29.435
<v Speaker 0>Alright. Thank you for that introduction. That was

00:12:29.435 --> 00:12:30.074
<v Speaker 0>great.

00:12:30.315 --> 00:12:31.435
<v Speaker 0>Why don't we

00:12:31.915 --> 00:12:34.875
<v Speaker 0>get started then? Let's see where it is.

00:12:36.235 --> 00:12:38.795
<v Speaker 0>Ta da. I have this Suborbital

00:12:39.035 --> 00:12:39.514
<v Speaker 0>homepage.

00:12:40.290 --> 00:12:41.570
<v Speaker 0>So we're gonna be taking a look at

00:12:41.570 --> 00:12:43.330
<v Speaker 0>Atmo. Atmo is the all in one batteries

00:12:43.330 --> 00:12:45.730
<v Speaker 0>included component of Suborbital.

00:12:46.850 --> 00:12:47.490
<v Speaker 0>I

00:12:49.250 --> 00:12:51.010
<v Speaker 0>guess I'm just gonna click get started and

00:12:51.010 --> 00:12:52.610
<v Speaker 0>we're we're gonna work through.

00:12:54.795 --> 00:12:57.915
<v Speaker 1>Yes. So this is my like, I just

00:12:57.915 --> 00:13:01.355
<v Speaker 1>kind of relaunched the documentation for Atmo last

00:13:01.355 --> 00:13:02.075
<v Speaker 1>weekend.

00:13:02.875 --> 00:13:04.715
<v Speaker 1>So, you know, we wanted probably one of

00:13:04.715 --> 00:13:06.235
<v Speaker 1>the first people to be going through it

00:13:06.235 --> 00:13:07.035
<v Speaker 1>in full.

00:13:07.515 --> 00:13:08.875
<v Speaker 1>It used to all live in the GitHub

00:13:08.875 --> 00:13:11.410
<v Speaker 1>repo and now it's got its own its

00:13:11.410 --> 00:13:14.450
<v Speaker 1>own home. So, yeah, we can hopefully take

00:13:14.450 --> 00:13:15.650
<v Speaker 1>advantage of it today.

00:13:16.529 --> 00:13:18.610
<v Speaker 0>Yeah. Yeah. Definitely. Yeah. I don't think these

00:13:18.610 --> 00:13:20.130
<v Speaker 0>were here the last time I looked.

00:13:20.690 --> 00:13:21.250
<v Speaker 0>So

00:13:22.130 --> 00:13:23.475
<v Speaker 0>the first thing I need to So if

00:13:23.475 --> 00:13:25.475
<v Speaker 1>you can actually pause on the welcome screen,

00:13:25.475 --> 00:13:27.235
<v Speaker 1>I do wanna point out something at the

00:13:27.235 --> 00:13:28.435
<v Speaker 1>bottom of that page.

00:13:28.675 --> 00:13:29.235
<v Speaker 1>So

00:13:30.194 --> 00:13:31.634
<v Speaker 1>this is where we come back to the

00:13:31.634 --> 00:13:33.394
<v Speaker 1>simplicity part of it. The the three bullet

00:13:33.394 --> 00:13:35.394
<v Speaker 1>points you see there is really

00:13:36.360 --> 00:13:39.320
<v Speaker 1>it it sums up the goal for using

00:13:39.320 --> 00:13:40.120
<v Speaker 1>Atmo

00:13:40.279 --> 00:13:41.959
<v Speaker 1>is that you you should be able to

00:13:41.959 --> 00:13:44.440
<v Speaker 1>get up and running with an Atmo application

00:13:44.440 --> 00:13:45.240
<v Speaker 1>that is

00:13:45.640 --> 00:13:47.399
<v Speaker 1>I I'm gonna say the word production ready

00:13:47.399 --> 00:13:49.445
<v Speaker 1>a couple of times throughout the stream, but

00:13:49.445 --> 00:13:51.765
<v Speaker 1>let's realize that Atmo is still in alpha.

00:13:51.765 --> 00:13:53.845
<v Speaker 1>So when I say production ready, it will

00:13:53.845 --> 00:13:57.205
<v Speaker 1>be production ready when Atmo is production ready.

00:13:58.165 --> 00:14:01.765
<v Speaker 1>So you write these these self contained composable

00:14:01.765 --> 00:14:03.365
<v Speaker 1>functions, and what that means is

00:14:03.959 --> 00:14:05.720
<v Speaker 1>all the functions you're gonna write are gonna

00:14:05.720 --> 00:14:08.680
<v Speaker 1>be completely unaware of one another. They are

00:14:08.680 --> 00:14:11.160
<v Speaker 1>meant to be running in isolation,

00:14:11.240 --> 00:14:13.240
<v Speaker 1>and they interact with the outside world using

00:14:13.240 --> 00:14:14.600
<v Speaker 1>the suborbital APIs.

00:14:16.765 --> 00:14:19.165
<v Speaker 1>And then you we're gonna look at something

00:14:19.165 --> 00:14:21.084
<v Speaker 1>called the directive, and that's how you build

00:14:21.084 --> 00:14:24.045
<v Speaker 1>applications with Atmo. And it's a declarative

00:14:24.125 --> 00:14:24.685
<v Speaker 1>file.

00:14:25.645 --> 00:14:27.645
<v Speaker 1>And I I'm really excited about this part

00:14:27.645 --> 00:14:29.485
<v Speaker 1>of it, and I'm excited to show it

00:14:29.485 --> 00:14:31.490
<v Speaker 1>off because I think it's a really cool

00:14:31.490 --> 00:14:33.649
<v Speaker 1>way of building web web applications.

00:14:34.290 --> 00:14:36.850
<v Speaker 1>And then at the end, once we've built

00:14:36.930 --> 00:14:39.089
<v Speaker 1>our functions and our directive, we're gonna end

00:14:39.089 --> 00:14:40.850
<v Speaker 1>up with something that I call a runnable

00:14:40.850 --> 00:14:41.490
<v Speaker 1>bundle.

00:14:42.050 --> 00:14:44.205
<v Speaker 1>And it is a single file that you

00:14:44.205 --> 00:14:46.125
<v Speaker 1>can then use to deploy your application.

00:14:47.165 --> 00:14:49.245
<v Speaker 1>And this really goes back to the simple

00:14:49.245 --> 00:14:50.205
<v Speaker 1>unified

00:14:50.205 --> 00:14:52.605
<v Speaker 1>function based apps. It really like, those three

00:14:52.605 --> 00:14:54.925
<v Speaker 1>things is kind of the embodiment of that,

00:14:55.250 --> 00:14:57.730
<v Speaker 1>and it shows, you know, how we can

00:14:57.730 --> 00:15:01.089
<v Speaker 1>simplify building web services by taking advantage of

00:15:01.089 --> 00:15:03.170
<v Speaker 1>the property that WebAssembly gives us.

00:15:05.410 --> 00:15:06.130
<v Speaker 0>Okay.

00:15:06.610 --> 00:15:07.250
<v Speaker 0>So

00:15:08.130 --> 00:15:08.930
<v Speaker 0>is it

00:15:09.315 --> 00:15:11.155
<v Speaker 0>I like the thing in your slides where

00:15:11.155 --> 00:15:13.635
<v Speaker 0>you said, you know, kinda hard to mess

00:15:13.635 --> 00:15:16.115
<v Speaker 0>this up at least from a security perspective.

00:15:16.435 --> 00:15:19.075
<v Speaker 0>Like is that because it's what we were

00:15:19.155 --> 00:15:20.835
<v Speaker 0>what we're gonna work with is compiled down

00:15:20.835 --> 00:15:22.515
<v Speaker 0>to web assembly and we're taking advantage of

00:15:22.515 --> 00:15:25.270
<v Speaker 0>that sandbox environment or is Atmo and the

00:15:25.270 --> 00:15:27.510
<v Speaker 0>other components bring in an additional layer of

00:15:27.510 --> 00:15:28.790
<v Speaker 0>security over the top?

00:15:29.590 --> 00:15:32.630
<v Speaker 1>I think it's both, actually, because the code

00:15:32.630 --> 00:15:35.030
<v Speaker 1>that's actually handling these API requests, like you

00:15:35.030 --> 00:15:37.110
<v Speaker 1>said, it is sandboxed. It is it does

00:15:37.035 --> 00:15:39.995
<v Speaker 1>take advantage of the strong security

00:15:39.995 --> 00:15:41.834
<v Speaker 1>properties that WebAssembly

00:15:41.834 --> 00:15:42.714
<v Speaker 1>gives us.

00:15:43.355 --> 00:15:44.555
<v Speaker 1>But in addition,

00:15:44.875 --> 00:15:46.154
<v Speaker 1>you know, Atmo

00:15:47.035 --> 00:15:50.235
<v Speaker 1>is it it uses vector, that API framework,

00:15:50.235 --> 00:15:52.390
<v Speaker 1>as its, you know, way of of of

00:15:52.390 --> 00:15:53.990
<v Speaker 1>deploying the actual

00:15:54.230 --> 00:15:55.430
<v Speaker 1>web server,

00:15:55.750 --> 00:15:57.430
<v Speaker 1>and that has a bunch of security best

00:15:57.430 --> 00:15:58.230
<v Speaker 1>practices

00:15:58.390 --> 00:16:00.709
<v Speaker 1>built into it. So that is really the

00:16:00.709 --> 00:16:02.470
<v Speaker 1>goal of making it hard to screw up.

00:16:02.790 --> 00:16:03.430
<v Speaker 0>Okay.

00:16:03.670 --> 00:16:05.350
<v Speaker 0>I'd like to understand. I mean, maybe that

00:16:05.350 --> 00:16:06.575
<v Speaker 0>will make more sense when we start writing

00:16:06.575 --> 00:16:08.095
<v Speaker 0>a lot of a code but I'll throw

00:16:08.095 --> 00:16:09.695
<v Speaker 0>this out and if you think let's just

00:16:09.695 --> 00:16:10.975
<v Speaker 0>wait and see just feel free to say

00:16:10.975 --> 00:16:11.455
<v Speaker 0>that.

00:16:12.255 --> 00:16:14.735
<v Speaker 0>If a request comes in, the first thing

00:16:14.735 --> 00:16:16.655
<v Speaker 0>it hits is vector,

00:16:16.735 --> 00:16:18.575
<v Speaker 0>it works out what function has to be

00:16:18.575 --> 00:16:20.735
<v Speaker 0>called and then it speaks

00:16:21.420 --> 00:16:22.940
<v Speaker 0>to Atmo or

00:16:23.100 --> 00:16:25.740
<v Speaker 0>and then it runs the web assembly using

00:16:25.740 --> 00:16:26.620
<v Speaker 0>Wasimer

00:16:26.940 --> 00:16:28.700
<v Speaker 0>and then you said they're composable.

00:16:28.700 --> 00:16:31.660
<v Speaker 0>So how does the composition between these functions

00:16:31.660 --> 00:16:34.540
<v Speaker 0>work? Is is something capturing standard and standard

00:16:34.540 --> 00:16:35.899
<v Speaker 0>out? I know this has always been a

00:16:35.899 --> 00:16:37.915
<v Speaker 0>bit of a challenge for WebAssembly runtimes. Do

00:16:37.915 --> 00:16:39.595
<v Speaker 0>you maybe wanna give me a little insight

00:16:39.595 --> 00:16:40.475
<v Speaker 0>into that?

00:16:41.035 --> 00:16:43.915
<v Speaker 1>Yeah. Absolutely. So so, yeah, like I said,

00:16:43.915 --> 00:16:46.395
<v Speaker 1>Atmo is you can think of it as

00:16:46.555 --> 00:16:47.355
<v Speaker 1>gluing

00:16:47.515 --> 00:16:49.435
<v Speaker 1>those three building projects

00:16:49.435 --> 00:16:50.155
<v Speaker 1>together.

00:16:51.035 --> 00:16:51.195
<v Speaker 1>So

00:16:51.870 --> 00:16:55.070
<v Speaker 1>it so Vector receives the request.

00:16:55.710 --> 00:16:57.230
<v Speaker 1>It then schedules

00:16:57.630 --> 00:16:59.150
<v Speaker 1>all of the functions

00:16:59.630 --> 00:17:02.270
<v Speaker 1>that are needed to handle that request in

00:17:02.270 --> 00:17:03.710
<v Speaker 1>the Hive job scheduler.

00:17:04.285 --> 00:17:05.005
<v Speaker 1>And then,

00:17:05.484 --> 00:17:06.845
<v Speaker 1>Grav comes in,

00:17:07.325 --> 00:17:09.325
<v Speaker 1>we'll talk about a little bit later, something

00:17:09.325 --> 00:17:11.005
<v Speaker 1>called capability groups,

00:17:11.565 --> 00:17:12.365
<v Speaker 1>which

00:17:12.525 --> 00:17:14.845
<v Speaker 1>are still experimental, and we won't be able

00:17:14.845 --> 00:17:17.039
<v Speaker 1>to try them today, unfortunately. But the idea

00:17:17.039 --> 00:17:18.799
<v Speaker 1>is that individual functions

00:17:19.039 --> 00:17:20.880
<v Speaker 1>will be able to be executed on different

00:17:20.880 --> 00:17:21.519
<v Speaker 1>hosts.

00:17:22.319 --> 00:17:24.639
<v Speaker 1>And the idea behind capability groups is that

00:17:24.639 --> 00:17:26.240
<v Speaker 1>you can have privileged

00:17:26.240 --> 00:17:27.119
<v Speaker 1>instances,

00:17:27.359 --> 00:17:29.679
<v Speaker 1>some of them that have access to sensitive

00:17:29.919 --> 00:17:30.799
<v Speaker 1>resources,

00:17:30.799 --> 00:17:32.995
<v Speaker 1>like, say, your access to your payment provider

00:17:32.995 --> 00:17:35.715
<v Speaker 1>or access to a particular database. And you

00:17:35.715 --> 00:17:38.115
<v Speaker 1>can have individual functions running on those privileged

00:17:38.115 --> 00:17:38.914
<v Speaker 1>instances,

00:17:39.395 --> 00:17:41.955
<v Speaker 1>so that only a sliver of the execution

00:17:41.955 --> 00:17:44.195
<v Speaker 1>for your request is happening on those privileged

00:17:44.195 --> 00:17:44.675
<v Speaker 1>instances.

00:17:45.530 --> 00:17:48.090
<v Speaker 1>But because the whole thing is sitting on

00:17:48.090 --> 00:17:49.210
<v Speaker 1>this message bus,

00:17:49.530 --> 00:17:51.929
<v Speaker 1>that is completely transparent to the developer. So

00:17:51.929 --> 00:17:53.370
<v Speaker 1>you don't need to just you don't need

00:17:53.370 --> 00:17:54.649
<v Speaker 1>to do any logic

00:17:54.730 --> 00:17:55.450
<v Speaker 1>related

00:17:55.530 --> 00:17:57.610
<v Speaker 1>to that transfer of execution,

00:17:58.245 --> 00:17:59.445
<v Speaker 1>but it is happening

00:17:59.525 --> 00:18:02.165
<v Speaker 1>happening under the covers because the WebAssembly job

00:18:02.165 --> 00:18:03.044
<v Speaker 1>scheduler

00:18:03.045 --> 00:18:05.445
<v Speaker 1>and the message bus are all just kind

00:18:05.445 --> 00:18:07.044
<v Speaker 1>of handling that on your behalf.

00:18:08.325 --> 00:18:09.044
<v Speaker 0>Okay.

00:18:09.525 --> 00:18:11.765
<v Speaker 0>I have loads of questions, but I think

00:18:11.765 --> 00:18:13.820
<v Speaker 0>let's get started first. Let's see how it

00:18:13.820 --> 00:18:15.740
<v Speaker 0>works in practice and then maybe that'll answer

00:18:15.740 --> 00:18:17.500
<v Speaker 0>a few of those questions rather than we

00:18:17.500 --> 00:18:20.220
<v Speaker 0>bombard new with lots of trivial newbie stuff.

00:18:21.500 --> 00:18:23.580
<v Speaker 0>Let's see, we gotta get started. It says

00:18:23.580 --> 00:18:26.380
<v Speaker 0>here that we need the Suborbital

00:18:26.725 --> 00:18:27.524
<v Speaker 0>CLI.

00:18:27.605 --> 00:18:28.565
<v Speaker 0>So Yep.

00:18:29.125 --> 00:18:30.565
<v Speaker 0>Pop that open.

00:18:31.365 --> 00:18:32.404
<v Speaker 1>Yeah. For sure.

00:18:32.725 --> 00:18:34.725
<v Speaker 0>And this is already all right? All the

00:18:34.725 --> 00:18:35.764
<v Speaker 0>components are?

00:18:36.165 --> 00:18:37.284
<v Speaker 1>Yeah. That's right.

00:18:37.605 --> 00:18:40.210
<v Speaker 1>There's some some Rust stuff and some Swift

00:18:40.210 --> 00:18:41.890
<v Speaker 1>stuff that we'll look at later. But in

00:18:42.050 --> 00:18:43.809
<v Speaker 1>for the most part, it's all written in

00:18:43.809 --> 00:18:44.450
<v Speaker 1>Go.

00:18:44.610 --> 00:18:45.330
<v Speaker 1>So

00:18:46.130 --> 00:18:47.169
<v Speaker 1>Sorry, Indigo.

00:18:47.970 --> 00:18:49.490
<v Speaker 1>Yeah. So this is using

00:18:50.130 --> 00:18:52.085
<v Speaker 1>a really cool I don't know if many

00:18:52.085 --> 00:18:53.365
<v Speaker 1>people are aware of this, but it's a

00:18:53.365 --> 00:18:54.804
<v Speaker 1>service called Go Binaries.

00:18:55.525 --> 00:18:57.765
<v Speaker 1>It will allow you to automatically

00:18:57.765 --> 00:18:58.565
<v Speaker 1>build

00:18:58.965 --> 00:19:02.645
<v Speaker 1>and install any Go tool to your computer

00:19:02.645 --> 00:19:04.725
<v Speaker 1>even if you don't have a Go runtime

00:19:04.725 --> 00:19:06.725
<v Speaker 1>or Go toolchain installed. So that's how I'm

00:19:06.725 --> 00:19:08.539
<v Speaker 1>distributing it. Nice.

00:19:08.620 --> 00:19:10.300
<v Speaker 0>No. I hadn't seen that before, so that's

00:19:10.300 --> 00:19:12.300
<v Speaker 0>that's good to know. Yeah. So you should

00:19:12.300 --> 00:19:13.820
<v Speaker 1>be able to just run Suborbital dash dash

00:19:13.820 --> 00:19:15.980
<v Speaker 1>help just to make sure we've got it

00:19:15.980 --> 00:19:16.940
<v Speaker 1>installed

00:19:16.940 --> 00:19:17.659
<v Speaker 1>properly.

00:19:17.820 --> 00:19:18.700
<v Speaker 1>There we go.

00:19:19.180 --> 00:19:21.580
<v Speaker 1>So yeah. So Suborbital is the first kinda

00:19:21.580 --> 00:19:23.795
<v Speaker 1>component. This is kind of the build tool

00:19:23.795 --> 00:19:26.674
<v Speaker 1>chain for all of the Suborbital

00:19:27.795 --> 00:19:28.595
<v Speaker 1>products.

00:19:29.075 --> 00:19:31.635
<v Speaker 1>And the goal with Subo is that

00:19:32.035 --> 00:19:34.675
<v Speaker 1>you shouldn't need anything other than Subo and

00:19:34.675 --> 00:19:34.995
<v Speaker 1>Docker.

00:19:35.789 --> 00:19:38.829
<v Speaker 1>If you want to install the individual language,

00:19:38.909 --> 00:19:40.190
<v Speaker 1>you know, tools,

00:19:40.429 --> 00:19:42.029
<v Speaker 1>if you want to install

00:19:42.029 --> 00:19:43.549
<v Speaker 1>Rust and configure,

00:19:44.190 --> 00:19:46.590
<v Speaker 1>you know, the WebAssembly targets, you can, and

00:19:46.590 --> 00:19:48.269
<v Speaker 1>Subor will let you use them.

00:19:48.830 --> 00:19:51.345
<v Speaker 1>But by default, it will use Docker to

00:19:51.345 --> 00:19:54.065
<v Speaker 1>build all of your all of your functions.

00:19:55.025 --> 00:19:57.505
<v Speaker 1>So you can actually rely on it to

00:19:57.505 --> 00:19:59.105
<v Speaker 1>provide the tool chains

00:19:59.505 --> 00:20:00.624
<v Speaker 1>if you wish.

00:20:01.265 --> 00:20:01.985
<v Speaker 0>Alright.

00:20:02.865 --> 00:20:03.665
<v Speaker 0>We

00:20:03.665 --> 00:20:05.665
<v Speaker 0>we got into trouble, I'm afraid, from the

00:20:05.665 --> 00:20:05.985
<v Speaker 0>audience.

00:20:07.120 --> 00:20:09.200
<v Speaker 0>Pipe into a shell is not a good

00:20:09.200 --> 00:20:10.960
<v Speaker 0>idea. Yes. I

00:20:11.280 --> 00:20:12.399
<v Speaker 0>agree. However,

00:20:12.720 --> 00:20:14.960
<v Speaker 0>live demos, I think it's okay. Yeah.

00:20:15.680 --> 00:20:18.640
<v Speaker 1>And yeah, it's it's it's gonna be up

00:20:18.640 --> 00:20:20.560
<v Speaker 1>on package managers

00:20:20.815 --> 00:20:21.775
<v Speaker 1>at some point.

00:20:22.575 --> 00:20:25.215
<v Speaker 1>That's something that I haven't done in a

00:20:25.215 --> 00:20:26.975
<v Speaker 1>long time. I need to remind myself of

00:20:26.975 --> 00:20:29.695
<v Speaker 1>how all those different package managers distribute and

00:20:29.695 --> 00:20:32.815
<v Speaker 1>whatnot and get some automation going to distribute

00:20:32.815 --> 00:20:34.335
<v Speaker 1>that properly. But for now, I think it's

00:20:34.335 --> 00:20:37.309
<v Speaker 1>a it's an okay solution. Yeah. Definitely. I'm

00:20:37.309 --> 00:20:38.669
<v Speaker 0>I'm okay with it. I I pipe the

00:20:38.669 --> 00:20:40.110
<v Speaker 0>shelves all the time. I know I shouldn't.

00:20:40.110 --> 00:20:41.630
<v Speaker 0>So I'm

00:20:41.630 --> 00:20:44.190
<v Speaker 0>sure there'll be brew packages soon, next derivation

00:20:44.190 --> 00:20:45.229
<v Speaker 0>shortly after.

00:20:45.470 --> 00:20:47.070
<v Speaker 0>And that's why, you know, the community can

00:20:47.070 --> 00:20:48.429
<v Speaker 0>see how cool is to us and actually

00:20:48.429 --> 00:20:50.345
<v Speaker 0>go and help contribute them too. So thank

00:20:50.345 --> 00:20:52.585
<v Speaker 0>you Kelly Jack o six. You've just volunteered

00:20:52.585 --> 00:20:53.865
<v Speaker 0>to that.

00:20:54.025 --> 00:20:54.664
<v Speaker 0>Right.

00:20:56.425 --> 00:20:58.665
<v Speaker 0>Okay. So we've got the CLI and now

00:20:58.665 --> 00:21:00.664
<v Speaker 0>we need to create a project.

00:21:00.905 --> 00:21:03.145
<v Speaker 0>So we just do Suborbital create project important

00:21:03.145 --> 00:21:05.429
<v Speaker 0>API. Alright. I like it.

00:21:05.750 --> 00:21:07.190
<v Speaker 0>I'll keep the name the same.

00:21:07.910 --> 00:21:10.070
<v Speaker 0>So that says it's it's downloaded a template.

00:21:10.070 --> 00:21:12.230
<v Speaker 0>Do you wanna kinda add this? What what's

00:21:12.230 --> 00:21:14.070
<v Speaker 0>happening there? What's a template? What's a project

00:21:14.070 --> 00:21:14.790
<v Speaker 0>in this context?

00:21:15.795 --> 00:21:16.755
<v Speaker 1>Absolutely.

00:21:16.755 --> 00:21:18.195
<v Speaker 1>So there are

00:21:19.155 --> 00:21:22.275
<v Speaker 1>several different languages that you can use to

00:21:22.275 --> 00:21:23.554
<v Speaker 1>build your functions.

00:21:23.715 --> 00:21:26.355
<v Speaker 1>Currently, we have official support for Rust and

00:21:26.355 --> 00:21:30.355
<v Speaker 1>Swift and more to come. And so for

00:21:30.520 --> 00:21:32.360
<v Speaker 1>building those different functions

00:21:32.760 --> 00:21:34.679
<v Speaker 1>and for just structuring the project as a

00:21:34.679 --> 00:21:36.360
<v Speaker 1>whole, there are a number of templates,

00:21:36.520 --> 00:21:37.799
<v Speaker 1>for those empty,

00:21:38.040 --> 00:21:40.519
<v Speaker 1>you know, projects. It's never something that

00:21:40.760 --> 00:21:42.280
<v Speaker 1>you as the developer would need to care

00:21:42.280 --> 00:21:44.565
<v Speaker 1>about. They're all just managed automatically,

00:21:44.645 --> 00:21:46.805
<v Speaker 1>and they're all available in in GitHub as

00:21:46.805 --> 00:21:48.005
<v Speaker 1>well if you do want to take a

00:21:48.005 --> 00:21:50.085
<v Speaker 1>look at them. But, really, all it's doing

00:21:50.085 --> 00:21:50.644
<v Speaker 1>is,

00:21:51.205 --> 00:21:52.404
<v Speaker 1>copying a,

00:21:52.805 --> 00:21:54.565
<v Speaker 1>it's downloading a ZIP of a Git repo

00:21:54.565 --> 00:21:56.644
<v Speaker 1>in the background and then using,

00:21:56.805 --> 00:21:59.540
<v Speaker 1>the contents of that to to bootstrap these

00:21:59.540 --> 00:22:01.460
<v Speaker 1>empty things on your machine.

00:22:03.060 --> 00:22:04.659
<v Speaker 0>Okay. So we get a

00:22:05.220 --> 00:22:06.580
<v Speaker 0>project directory,

00:22:06.740 --> 00:22:09.380
<v Speaker 0>a lower directory and some source. Let's just

00:22:09.380 --> 00:22:11.380
<v Speaker 0>pop this open and and code I guess.

00:22:12.065 --> 00:22:12.784
<v Speaker 1>Yeah.

00:22:14.705 --> 00:22:16.144
<v Speaker 0>Now because this is

00:22:17.505 --> 00:22:19.184
<v Speaker 0>web assembly or at least it's compelling down

00:22:19.184 --> 00:22:20.785
<v Speaker 0>to web assembly, can I use any language

00:22:20.785 --> 00:22:23.585
<v Speaker 0>that supports web assembly for my my components?

00:22:25.300 --> 00:22:26.740
<v Speaker 1>So theoretically,

00:22:26.740 --> 00:22:29.620
<v Speaker 1>yes. However, the the Suborbital

00:22:29.620 --> 00:22:30.660
<v Speaker 1>API,

00:22:30.660 --> 00:22:31.860
<v Speaker 1>the library,

00:22:32.740 --> 00:22:34.020
<v Speaker 1>is required.

00:22:34.580 --> 00:22:37.595
<v Speaker 1>So you mentioned earlier, like, sometimes

00:22:37.595 --> 00:22:40.235
<v Speaker 1>we can do input and output using standard

00:22:40.235 --> 00:22:41.435
<v Speaker 1>in and standard out.

00:22:41.835 --> 00:22:43.435
<v Speaker 1>That's not what's happening here.

00:22:43.675 --> 00:22:44.315
<v Speaker 1>We,

00:22:45.035 --> 00:22:47.115
<v Speaker 1>there there is a full library.

00:22:47.595 --> 00:22:48.875
<v Speaker 1>You can see at the top there the

00:22:48.875 --> 00:22:49.755
<v Speaker 1>suborbital,

00:22:49.995 --> 00:22:50.875
<v Speaker 1>Rust crate

00:22:51.440 --> 00:22:53.279
<v Speaker 1>that is being imported here,

00:22:53.679 --> 00:22:56.320
<v Speaker 1>and that provides a number of

00:22:56.480 --> 00:22:57.840
<v Speaker 1>hosts and

00:22:58.000 --> 00:22:58.879
<v Speaker 1>guest

00:22:59.040 --> 00:23:00.159
<v Speaker 1>connections.

00:23:00.320 --> 00:23:01.519
<v Speaker 1>And so

00:23:02.400 --> 00:23:04.880
<v Speaker 1>all of the functionality is going through that

00:23:04.880 --> 00:23:05.360
<v Speaker 1>library.

00:23:05.895 --> 00:23:08.055
<v Speaker 1>So anytime you wanna interact with the outside

00:23:08.055 --> 00:23:08.775
<v Speaker 1>world,

00:23:09.495 --> 00:23:12.215
<v Speaker 1>that is happening through these libraries. So,

00:23:13.255 --> 00:23:16.295
<v Speaker 1>any language that has those APIs implemented

00:23:16.535 --> 00:23:18.775
<v Speaker 1>and I'll be like, they're very small APIs.

00:23:18.775 --> 00:23:21.000
<v Speaker 1>It's really just some memory management and some

00:23:21.000 --> 00:23:22.200
<v Speaker 1>input output stuff.

00:23:23.080 --> 00:23:26.840
<v Speaker 1>Any WebAssembly compatible language that has a, you

00:23:26.840 --> 00:23:28.760
<v Speaker 1>know, a library for it will work.

00:23:29.240 --> 00:23:30.920
<v Speaker 1>It's just that Rust and Swift are the

00:23:30.920 --> 00:23:33.080
<v Speaker 1>two that have that library so far.

00:23:33.895 --> 00:23:35.895
<v Speaker 0>Well, I'm not gonna argue. I'm a huge

00:23:35.895 --> 00:23:37.895
<v Speaker 0>fan and advocate of Rust right now. I'm

00:23:37.895 --> 00:23:40.055
<v Speaker 0>trying to I'm pretty much doing everything in

00:23:40.055 --> 00:23:42.135
<v Speaker 0>the rewrite in Rust bandwagon.

00:23:42.135 --> 00:23:42.774
<v Speaker 0>Sure.

00:23:43.735 --> 00:23:46.550
<v Speaker 1>So before we really hop into the function,

00:23:46.550 --> 00:23:47.590
<v Speaker 1>I'd love to take a look at that

00:23:47.590 --> 00:23:50.070
<v Speaker 1>directive dot YAML that's in the root of

00:23:50.070 --> 00:23:50.870
<v Speaker 1>the project.

00:23:51.670 --> 00:23:52.150
<v Speaker 1>So

00:23:53.350 --> 00:23:55.830
<v Speaker 1>this is what I talked about earlier with

00:23:55.830 --> 00:23:57.510
<v Speaker 1>the declarative

00:23:58.034 --> 00:24:00.115
<v Speaker 1>web application design. So this is how we're

00:24:00.115 --> 00:24:02.355
<v Speaker 1>actually gonna string together those functions, and that's

00:24:02.434 --> 00:24:04.274
<v Speaker 1>this is where the composability comes in.

00:24:05.075 --> 00:24:05.634
<v Speaker 1>So

00:24:05.955 --> 00:24:08.434
<v Speaker 1>what we're doing here is we're actually defining

00:24:08.434 --> 00:24:09.794
<v Speaker 1>the different endpoints

00:24:10.115 --> 00:24:12.274
<v Speaker 1>that our application will provide,

00:24:12.434 --> 00:24:14.970
<v Speaker 1>and then we are composing functions to handle

00:24:14.970 --> 00:24:15.770
<v Speaker 1>them. So,

00:24:16.330 --> 00:24:17.530
<v Speaker 1>you can see there

00:24:17.690 --> 00:24:20.570
<v Speaker 1>we have one route defined as post to

00:24:20.570 --> 00:24:21.610
<v Speaker 1>slash hello,

00:24:21.930 --> 00:24:24.570
<v Speaker 1>and we're calling the hello world function that

00:24:24.570 --> 00:24:26.924
<v Speaker 1>was included with the empty project to handle

00:24:26.924 --> 00:24:27.484
<v Speaker 1>that.

00:24:28.125 --> 00:24:30.044
<v Speaker 1>So as we go along, we'll and we

00:24:30.044 --> 00:24:31.565
<v Speaker 1>can add a couple more functions,

00:24:32.205 --> 00:24:33.485
<v Speaker 1>and I can show you the different ways

00:24:33.485 --> 00:24:35.885
<v Speaker 1>that those, functions can be put together to

00:24:35.885 --> 00:24:38.124
<v Speaker 1>handle and do different types of logic.

00:24:38.765 --> 00:24:40.924
<v Speaker 1>But at the end of the day, this

00:24:40.924 --> 00:24:43.140
<v Speaker 1>is kind of the entry point, if you

00:24:43.140 --> 00:24:44.900
<v Speaker 1>will, for the application. This is,

00:24:45.220 --> 00:24:48.420
<v Speaker 1>where everything is put together and controlled.

00:24:48.580 --> 00:24:50.900
<v Speaker 1>And it's nice because it is

00:24:51.620 --> 00:24:53.780
<v Speaker 1>from from my use of it, it is

00:24:53.780 --> 00:24:55.060
<v Speaker 1>a really nice abstraction.

00:24:55.380 --> 00:24:57.380
<v Speaker 1>It it really toes the line

00:24:57.855 --> 00:25:00.015
<v Speaker 1>between needing to write a lot of boilerplate

00:25:00.015 --> 00:25:02.414
<v Speaker 1>and needing to care

00:25:02.575 --> 00:25:04.975
<v Speaker 1>about, you know, what's happening under the hood.

00:25:05.295 --> 00:25:07.215
<v Speaker 1>It gives you full control of

00:25:07.455 --> 00:25:09.455
<v Speaker 1>the execution and what is happening,

00:25:09.855 --> 00:25:11.215
<v Speaker 1>but it makes it so you don't have

00:25:11.215 --> 00:25:12.815
<v Speaker 1>to care about how it's happening.

00:25:13.870 --> 00:25:16.030
<v Speaker 1>The the job scheduler,

00:25:16.030 --> 00:25:17.549
<v Speaker 1>all of the resources,

00:25:17.630 --> 00:25:19.390
<v Speaker 1>setting up of the web server, setting up

00:25:19.390 --> 00:25:21.390
<v Speaker 1>of the message bus, all of that is

00:25:21.390 --> 00:25:22.190
<v Speaker 1>completely

00:25:22.590 --> 00:25:24.190
<v Speaker 1>invisible to the developer,

00:25:24.429 --> 00:25:25.790
<v Speaker 1>and they really get to focus on the

00:25:25.790 --> 00:25:26.350
<v Speaker 1>business logic.

00:25:27.434 --> 00:25:28.874
<v Speaker 0>Nice. I like it.

00:25:29.595 --> 00:25:32.075
<v Speaker 0>Yeah. Alright. So this is we're seeing any

00:25:32.075 --> 00:25:34.235
<v Speaker 0>push request to slash hello to run a

00:25:34.235 --> 00:25:35.274
<v Speaker 0>hello function

00:25:35.515 --> 00:25:37.755
<v Speaker 0>thing. Yeah. Which is just You can pop

00:25:37.755 --> 00:25:40.154
<v Speaker 1>back to that This which is literally just

00:25:40.154 --> 00:25:42.235
<v Speaker 0>doing a print. Right? Or actually, not even

00:25:42.235 --> 00:25:44.049
<v Speaker 0>doing a print. It's formatting a string and

00:25:44.049 --> 00:25:46.449
<v Speaker 0>returning it as a as an option.

00:25:47.169 --> 00:25:49.649
<v Speaker 1>That's right. Yeah. So we're gonna start super

00:25:49.649 --> 00:25:51.250
<v Speaker 1>simple. I want us to get this up

00:25:51.250 --> 00:25:52.850
<v Speaker 1>and running to show that it is working,

00:25:52.850 --> 00:25:54.289
<v Speaker 1>and then we can start, you know, adding

00:25:54.289 --> 00:25:55.409
<v Speaker 1>some more stuff to it.

00:25:57.015 --> 00:25:59.895
<v Speaker 1>So I'll I'll walk through what's here real

00:25:59.895 --> 00:26:00.455
<v Speaker 1>quick.

00:26:01.175 --> 00:26:03.975
<v Speaker 1>So it is using the Suborbital Crate to

00:26:03.975 --> 00:26:06.534
<v Speaker 1>gain access to the Suborbital APIs,

00:26:06.535 --> 00:26:09.255
<v Speaker 1>the very basic of which is just

00:26:10.055 --> 00:26:11.495
<v Speaker 1>this runnable

00:26:11.495 --> 00:26:11.815
<v Speaker 1>trait.

00:26:12.950 --> 00:26:14.710
<v Speaker 1>So you can see that the hello world

00:26:14.710 --> 00:26:18.390
<v Speaker 1>struct is adding an implementation for that runnable

00:26:18.390 --> 00:26:19.270
<v Speaker 1>trait.

00:26:19.350 --> 00:26:22.550
<v Speaker 1>And then we expose the only required function

00:26:22.550 --> 00:26:25.190
<v Speaker 1>on that trait, which is the run function.

00:26:25.590 --> 00:26:27.475
<v Speaker 1>So whenever this function is hit by the

00:26:27.475 --> 00:26:28.434
<v Speaker 1>job scheduler,

00:26:28.595 --> 00:26:30.675
<v Speaker 1>it will give you an input, which is

00:26:30.675 --> 00:26:31.875
<v Speaker 1>just some bytes,

00:26:32.115 --> 00:26:33.394
<v Speaker 1>and then you

00:26:33.395 --> 00:26:35.475
<v Speaker 1>provide an output, which is just some more

00:26:35.475 --> 00:26:36.034
<v Speaker 1>bytes.

00:26:36.755 --> 00:26:38.730
<v Speaker 1>All of the complicated stuff, all of the

00:26:38.730 --> 00:26:40.730
<v Speaker 1>extra functionality that you get to take advantage

00:26:40.730 --> 00:26:42.330
<v Speaker 1>of is done through the API.

00:26:42.730 --> 00:26:43.370
<v Speaker 1>And

00:26:44.650 --> 00:26:47.210
<v Speaker 1>so we can pretty much, right off the

00:26:47.210 --> 00:26:48.490
<v Speaker 1>bat, just build this and run it and

00:26:48.490 --> 00:26:49.930
<v Speaker 1>show it that it's, working.

00:26:50.665 --> 00:26:52.665
<v Speaker 1>And then we can continue,

00:26:52.665 --> 00:26:53.304
<v Speaker 1>you know,

00:26:53.785 --> 00:26:55.065
<v Speaker 1>working on some I don't know if you

00:26:55.065 --> 00:26:57.065
<v Speaker 1>wanna follow my instructions or if you want

00:26:57.065 --> 00:26:58.664
<v Speaker 1>to follow the documentation,

00:26:58.745 --> 00:27:00.904
<v Speaker 1>but oh, you don't need cargo.

00:27:00.905 --> 00:27:01.545
<v Speaker 0>Oh, oh,

00:27:02.490 --> 00:27:04.490
<v Speaker 0>I was just falling into my my default

00:27:04.490 --> 00:27:07.210
<v Speaker 0>in the Wizard. So That's okay. You you

00:27:07.210 --> 00:27:09.530
<v Speaker 1>actually can like, you can use cargo if

00:27:09.530 --> 00:27:11.769
<v Speaker 1>you want to, but the the

00:27:12.410 --> 00:27:14.250
<v Speaker 1>the point of the Suborbital CLI is that

00:27:14.250 --> 00:27:15.905
<v Speaker 1>it actually abstracts all of that away from

00:27:15.905 --> 00:27:18.065
<v Speaker 1>you. So if we, dig into the build

00:27:18.065 --> 00:27:18.784
<v Speaker 1>command,

00:27:19.184 --> 00:27:20.785
<v Speaker 1>you can do build dash dash help if

00:27:20.785 --> 00:27:21.905
<v Speaker 1>you want. We can show what the options

00:27:21.905 --> 00:27:22.384
<v Speaker 1>are.

00:27:23.505 --> 00:27:26.385
<v Speaker 1>This will take all of the, I should

00:27:26.385 --> 00:27:29.105
<v Speaker 1>preface this by saying, the functions in a

00:27:29.105 --> 00:27:31.679
<v Speaker 1>suborbital project are referred to as runnables.

00:27:32.960 --> 00:27:34.399
<v Speaker 1>So a runnable,

00:27:34.640 --> 00:27:37.360
<v Speaker 1>in in the ATMO context is a WebAssembly

00:27:37.360 --> 00:27:39.280
<v Speaker 1>module. But if you were just using the

00:27:39.280 --> 00:27:40.720
<v Speaker 1>Hive job scheduler

00:27:41.200 --> 00:27:42.080
<v Speaker 1>by itself,

00:27:42.320 --> 00:27:45.225
<v Speaker 1>you can implement runnables however you want. So

00:27:45.225 --> 00:27:48.345
<v Speaker 1>you can use Go code to build runnables.

00:27:48.345 --> 00:27:51.385
<v Speaker 1>You can implement a plug in to run

00:27:51.385 --> 00:27:53.544
<v Speaker 1>Docker containers or whatever you want.

00:27:54.025 --> 00:27:56.745
<v Speaker 1>But so that's why I call them runnables,

00:27:56.905 --> 00:27:58.425
<v Speaker 1>because it is more generic if you want

00:27:58.425 --> 00:28:00.900
<v Speaker 1>it to be. But in the context of

00:28:00.900 --> 00:28:03.860
<v Speaker 1>Atmo, they are always WebAssembly modules. So if

00:28:03.860 --> 00:28:06.340
<v Speaker 1>we run Subo build and then pass dot

00:28:06.340 --> 00:28:09.140
<v Speaker 1>as the current directory and then dash dash

00:28:09.380 --> 00:28:10.580
<v Speaker 1>oh, yeah. Sure.

00:28:10.900 --> 00:28:12.980
<v Speaker 1>That's okay. We'll we'll we can get, more

00:28:12.980 --> 00:28:15.924
<v Speaker 1>into it. The so the bundle flag is

00:28:15.924 --> 00:28:17.845
<v Speaker 1>is really what we want because that's going

00:28:17.845 --> 00:28:19.765
<v Speaker 1>to create that runnable bundle that I mentioned

00:28:19.765 --> 00:28:21.684
<v Speaker 1>before. So you can hit that. Okay. And

00:28:21.684 --> 00:28:23.125
<v Speaker 0>if I do dash dash native, it'll use

00:28:23.125 --> 00:28:24.965
<v Speaker 0>my local Rust tooling. But if I don't,

00:28:24.965 --> 00:28:27.445
<v Speaker 0>it's gonna get docker based on what I

00:28:27.000 --> 00:28:29.080
<v Speaker 0>can read from here. Right? Yes.

00:28:29.080 --> 00:28:30.279
<v Speaker 1>That's exactly right.

00:28:30.520 --> 00:28:32.360
<v Speaker 1>So we can we can run the Docker

00:28:32.360 --> 00:28:34.360
<v Speaker 1>one first, and then we'll show maybe the

00:28:34.360 --> 00:28:37.160
<v Speaker 1>differences between the tool chains a little bit

00:28:37.160 --> 00:28:37.720
<v Speaker 1>later.

00:28:39.160 --> 00:28:40.440
<v Speaker 1>So we have builders,

00:28:41.044 --> 00:28:43.205
<v Speaker 1>which are Docker images for all of the

00:28:43.205 --> 00:28:45.044
<v Speaker 1>languages. Well, I say all. There's two of

00:28:45.044 --> 00:28:45.605
<v Speaker 1>them.

00:28:46.885 --> 00:28:49.924
<v Speaker 1>And the the the builder images ship with

00:28:49.924 --> 00:28:51.124
<v Speaker 1>everything that's needed

00:28:51.445 --> 00:28:52.725
<v Speaker 1>to build

00:28:52.725 --> 00:28:54.405
<v Speaker 1>your runnables. And so

00:28:54.910 --> 00:28:57.549
<v Speaker 1>we can abstract away some of the complexity

00:28:57.710 --> 00:28:59.870
<v Speaker 1>of those individual tool chains,

00:29:00.750 --> 00:29:02.990
<v Speaker 1>and make it a little bit easier for

00:29:02.990 --> 00:29:04.669
<v Speaker 1>you. The downside

00:29:04.750 --> 00:29:07.950
<v Speaker 1>of that, you know, decreased complexity

00:29:08.135 --> 00:29:10.295
<v Speaker 1>is that it's a little bit slower. As

00:29:10.295 --> 00:29:12.135
<v Speaker 1>you can see, it's having to download a

00:29:12.135 --> 00:29:15.015
<v Speaker 1>Docker image. Now it's nice because the slowness

00:29:15.015 --> 00:29:17.095
<v Speaker 1>only happens really the first time.

00:29:17.495 --> 00:29:19.735
<v Speaker 1>Once you've got all the images and once

00:29:19.735 --> 00:29:22.855
<v Speaker 1>you've, you know, done the initial compilation

00:29:22.855 --> 00:29:26.140
<v Speaker 1>of the of the runnables, the subsequent builds

00:29:26.140 --> 00:29:27.419
<v Speaker 1>are pretty fast.

00:29:28.700 --> 00:29:31.179
<v Speaker 1>However, if you were using your native tool

00:29:31.179 --> 00:29:33.099
<v Speaker 1>chain, this would already be done

00:29:33.659 --> 00:29:35.980
<v Speaker 1>thirty seconds ago. But we can continue to

00:29:35.980 --> 00:29:37.580
<v Speaker 1>talk for a few minutes while this completes

00:29:37.580 --> 00:29:39.225
<v Speaker 1>for the first time. Shouldn't take more than

00:29:39.225 --> 00:29:40.184
<v Speaker 1>a minute or two.

00:29:40.505 --> 00:29:41.865
<v Speaker 0>Well, yeah. I mean, I've got a

00:29:42.185 --> 00:29:43.784
<v Speaker 0>question that maybe is

00:29:44.905 --> 00:29:47.065
<v Speaker 0>I don't know. Glating is the wrong word.

00:29:47.065 --> 00:29:49.145
<v Speaker 0>But you've written all of the Atmo tools

00:29:49.145 --> 00:29:50.024
<v Speaker 0>in Go,

00:29:50.425 --> 00:29:52.585
<v Speaker 0>but Go isn't one of the supported run

00:29:52.585 --> 00:29:55.240
<v Speaker 0>times. Is there any reason behind that?

00:29:56.200 --> 00:29:58.680
<v Speaker 1>Yeah. Yeah. It's it's a very good point.

00:29:58.680 --> 00:29:59.720
<v Speaker 1>So

00:29:59.720 --> 00:30:03.000
<v Speaker 1>the current support for Go with WebAssembly

00:30:03.240 --> 00:30:06.360
<v Speaker 1>is not where it needs to be quite

00:30:06.360 --> 00:30:09.025
<v Speaker 1>yet. There is an alternative

00:30:09.025 --> 00:30:11.105
<v Speaker 1>Go tool chain called TinyGo that

00:30:11.905 --> 00:30:14.225
<v Speaker 1>has pretty good WebAssembly support, and I have

00:30:14.225 --> 00:30:16.225
<v Speaker 1>been experimenting with that a little bit.

00:30:16.705 --> 00:30:17.505
<v Speaker 1>But

00:30:17.665 --> 00:30:20.545
<v Speaker 1>it's it's honestly just the fact that

00:30:22.550 --> 00:30:23.510
<v Speaker 1>languages

00:30:23.510 --> 00:30:24.710
<v Speaker 1>with a simpler,

00:30:25.030 --> 00:30:28.630
<v Speaker 1>runtime and memory layout work better with WebAssembly,

00:30:28.630 --> 00:30:29.590
<v Speaker 1>and Go's

00:30:29.750 --> 00:30:31.269
<v Speaker 1>is not the simplest.

00:30:32.150 --> 00:30:34.390
<v Speaker 1>So Rust, for example, has a it has

00:30:34.390 --> 00:30:37.004
<v Speaker 1>a very very, very tiny runtime.

00:30:37.245 --> 00:30:39.725
<v Speaker 1>It has a very simple memory layout. It's

00:30:39.725 --> 00:30:42.205
<v Speaker 1>very similar to c and c plus plus.

00:30:42.205 --> 00:30:44.044
<v Speaker 1>And so it it lends itself very well

00:30:44.044 --> 00:30:45.485
<v Speaker 1>to the WebAssembly,

00:30:45.485 --> 00:30:46.924
<v Speaker 1>you know, ecosystem.

00:30:47.885 --> 00:30:48.764
<v Speaker 1>But then,

00:30:49.005 --> 00:30:50.284
<v Speaker 1>you know, once Go

00:30:51.060 --> 00:30:53.220
<v Speaker 1>releases some updates to

00:30:53.460 --> 00:30:55.780
<v Speaker 1>improve its support, I will definitely be targeting

00:30:55.780 --> 00:30:57.940
<v Speaker 1>it. It is my my language of choice

00:30:57.940 --> 00:31:00.740
<v Speaker 1>after all. So yeah. I have seen the

00:31:00.740 --> 00:31:01.940
<v Speaker 0>the conversations

00:31:01.940 --> 00:31:04.180
<v Speaker 0>around using Go and like the smallest web

00:31:04.180 --> 00:31:05.700
<v Speaker 0>assembly module compiled.

00:31:05.860 --> 00:31:07.405
<v Speaker 0>I don't wanna make up numbers, I believe

00:31:07.405 --> 00:31:09.325
<v Speaker 0>it was like maybe 30 kilobytes or something

00:31:09.325 --> 00:31:11.485
<v Speaker 0>or maybe it's the hundred. I remember it

00:31:11.485 --> 00:31:13.325
<v Speaker 0>being a weird figure and tiny go I

00:31:13.325 --> 00:31:15.085
<v Speaker 0>think they got that down substantially.

00:31:15.565 --> 00:31:17.485
<v Speaker 0>Yeah, I think I do understand that concern.

00:31:17.885 --> 00:31:19.245
<v Speaker 0>I also have some good news for our

00:31:19.245 --> 00:31:20.285
<v Speaker 0>you from the audience.

00:31:21.230 --> 00:31:21.950
<v Speaker 0>So

00:31:22.990 --> 00:31:24.750
<v Speaker 0>it's o six jelly jack actually took me

00:31:24.750 --> 00:31:26.270
<v Speaker 0>seriously when I said that was not their

00:31:26.270 --> 00:31:28.830
<v Speaker 0>responsibility and I think they've just added Subor

00:31:28.830 --> 00:31:30.430
<v Speaker 0>to the next user repository.

00:31:30.430 --> 00:31:31.790
<v Speaker 0>So you now have a next day vision

00:31:31.790 --> 00:31:33.710
<v Speaker 0>for building Subor. Thank you very much, man.

00:31:33.710 --> 00:31:35.950
<v Speaker 1>That was awesome. There we go. That's awesome.

00:31:35.950 --> 00:31:37.205
<v Speaker 1>Thank you. Alright.

00:31:38.245 --> 00:31:39.845
<v Speaker 1>So, yeah, as you can see, this first

00:31:39.845 --> 00:31:40.725
<v Speaker 1>build is

00:31:41.285 --> 00:31:42.565
<v Speaker 1>is quite slow.

00:31:43.285 --> 00:31:45.045
<v Speaker 0>Yeah. I mean, that's a Rust thing. Right?

00:31:45.045 --> 00:31:47.605
<v Speaker 0>I mean, anyone who's been compiling Rust programs

00:31:47.605 --> 00:31:49.590
<v Speaker 0>for more than half an hour is is

00:31:49.590 --> 00:31:52.630
<v Speaker 0>very familiar with the slow compilation speeds, unfortunately.

00:31:52.790 --> 00:31:54.950
<v Speaker 1>Right. Yeah. And then I think it'll be

00:31:54.950 --> 00:31:55.590
<v Speaker 1>quite,

00:31:55.750 --> 00:31:57.430
<v Speaker 1>you know, quite cool to show, like, we

00:31:57.430 --> 00:31:59.350
<v Speaker 1>can use the native tool chain after this,

00:31:59.350 --> 00:32:01.430
<v Speaker 1>and we'll show how much faster it really

00:32:01.430 --> 00:32:02.070
<v Speaker 1>can be

00:32:02.655 --> 00:32:04.815
<v Speaker 1>when you have, you know, some of the

00:32:04.815 --> 00:32:07.135
<v Speaker 1>dependencies already compiled and whatnot.

00:32:08.975 --> 00:32:09.535
<v Speaker 1>So,

00:32:10.335 --> 00:32:12.015
<v Speaker 1>hopefully, this will be done in just a

00:32:12.015 --> 00:32:14.095
<v Speaker 1>moment, and then we can actually run the

00:32:14.095 --> 00:32:15.535
<v Speaker 1>whole thing. But I'll talk about what the

00:32:15.535 --> 00:32:18.370
<v Speaker 1>bundles are first while we're while we're finishing

00:32:18.370 --> 00:32:19.090
<v Speaker 1>this up.

00:32:19.570 --> 00:32:23.090
<v Speaker 1>So the the bundle is it really ends

00:32:23.090 --> 00:32:26.450
<v Speaker 1>up as a zip file. It's nothing complicated,

00:32:26.450 --> 00:32:29.404
<v Speaker 1>really. But what it will include is it

00:32:29.404 --> 00:32:32.124
<v Speaker 1>will include your directive, the YAML file,

00:32:32.765 --> 00:32:35.085
<v Speaker 1>and it will include all of the compiled

00:32:35.085 --> 00:32:36.124
<v Speaker 1>WebAssembly

00:32:36.205 --> 00:32:37.085
<v Speaker 1>modules

00:32:37.164 --> 00:32:40.284
<v Speaker 1>into it. So what will happen is that

00:32:40.445 --> 00:32:41.085
<v Speaker 1>oh, there it goes.

00:32:41.900 --> 00:32:43.580
<v Speaker 1>You can see there the last line says

00:32:43.580 --> 00:32:44.780
<v Speaker 1>the bundle was created,

00:32:45.020 --> 00:32:46.779
<v Speaker 1>runnables dot waz and dot zip.

00:32:47.419 --> 00:32:49.980
<v Speaker 1>So what will happen is Atmo

00:32:50.220 --> 00:32:52.860
<v Speaker 1>loads this bundle at runtime. So

00:32:53.325 --> 00:32:54.445
<v Speaker 1>one

00:32:54.524 --> 00:32:56.845
<v Speaker 1>thing that I've been having trouble communicating and

00:32:56.845 --> 00:32:58.365
<v Speaker 1>that I think is might be a little

00:32:58.365 --> 00:32:59.885
<v Speaker 1>bit, you know, confuse

00:33:02.445 --> 00:33:04.364
<v Speaker 1>self is not a framework.

00:33:04.605 --> 00:33:07.644
<v Speaker 1>Atmo is actually an application that runs your

00:33:07.644 --> 00:33:09.484
<v Speaker 1>application. So it's more of a platform.

00:33:09.885 --> 00:33:11.710
<v Speaker 1>The The the framework

00:33:11.950 --> 00:33:13.950
<v Speaker 1>is really, you know, the,

00:33:14.670 --> 00:33:15.230
<v Speaker 1>the

00:33:15.630 --> 00:33:19.150
<v Speaker 1>paradigm that it allows you to build applications

00:33:19.150 --> 00:33:21.710
<v Speaker 1>with, and that is using the directive, using

00:33:21.710 --> 00:33:23.605
<v Speaker 1>the crate and the, you know, the runnable

00:33:23.605 --> 00:33:24.404
<v Speaker 1>API.

00:33:24.885 --> 00:33:28.404
<v Speaker 1>But Atmo itself is actually just loading

00:33:28.725 --> 00:33:30.565
<v Speaker 1>your application and running it.

00:33:30.885 --> 00:33:32.645
<v Speaker 1>It's a little confusing, and I've been having

00:33:32.645 --> 00:33:35.365
<v Speaker 1>trouble, like, really getting that message across clearly

00:33:35.365 --> 00:33:36.805
<v Speaker 1>because I don't even think I can talk

00:33:36.805 --> 00:33:39.850
<v Speaker 1>about it super coherently at this point. But

00:33:39.850 --> 00:33:41.130
<v Speaker 1>I hope that makes sense.

00:33:42.570 --> 00:33:45.049
<v Speaker 0>Yeah. I think so. I think it does.

00:33:46.090 --> 00:33:47.770
<v Speaker 0>Okay. So I think our next step is

00:33:47.770 --> 00:33:50.730
<v Speaker 0>to run this. Is that right? Yeah. Yeah.

00:33:51.050 --> 00:33:53.645
<v Speaker 1>So you can just do Subo dev, and

00:33:53.645 --> 00:33:55.804
<v Speaker 1>that will spin up a development server.

00:34:00.125 --> 00:34:02.924
<v Speaker 0>Oh, director. Oh, so you're inside of the

00:34:03.405 --> 00:34:05.405
<v Speaker 1>no. You're you're inside of the runnable right

00:34:05.405 --> 00:34:06.445
<v Speaker 1>now. You gotta go up a level.

00:34:07.169 --> 00:34:09.650
<v Speaker 0>Yep. Oh, yes. Next to the directive.com.

00:34:11.810 --> 00:34:13.489
<v Speaker 0>So o six Kelly Jack is is thrown

00:34:13.489 --> 00:34:14.850
<v Speaker 0>in our question as

00:34:15.889 --> 00:34:17.570
<v Speaker 0>they suggest. They may have missed it but

00:34:17.570 --> 00:34:18.849
<v Speaker 0>is there a reason that the tooling are

00:34:18.849 --> 00:34:20.775
<v Speaker 0>starting to go rather than rust? I think

00:34:20.775 --> 00:34:22.614
<v Speaker 0>the answer you kinda just said it is

00:34:22.614 --> 00:34:24.775
<v Speaker 0>that Go is your preferred language. Right?

00:34:25.655 --> 00:34:28.135
<v Speaker 1>Yeah. Yeah. I I am a professionally, like,

00:34:28.135 --> 00:34:29.495
<v Speaker 1>I am a Go developer,

00:34:29.734 --> 00:34:30.135
<v Speaker 1>and

00:34:30.775 --> 00:34:32.855
<v Speaker 1>Go is the language that I can build

00:34:32.855 --> 00:34:36.190
<v Speaker 1>things the easiest with. And it's important that

00:34:36.350 --> 00:34:38.190
<v Speaker 1>like, I do think that Go

00:34:38.430 --> 00:34:39.070
<v Speaker 1>is

00:34:39.310 --> 00:34:42.190
<v Speaker 1>an extremely good language for building web services.

00:34:42.190 --> 00:34:43.710
<v Speaker 1>And as soon as it is feasible to

00:34:43.710 --> 00:34:45.949
<v Speaker 1>do so, I will be providing a Go

00:34:45.949 --> 00:34:48.030
<v Speaker 1>runtime for first of Orbital.

00:34:49.065 --> 00:34:50.984
<v Speaker 1>But right now, it's just not possible. And

00:34:50.984 --> 00:34:52.505
<v Speaker 1>honestly, I don't think I would have been

00:34:52.505 --> 00:34:55.784
<v Speaker 1>able to build nearly as much of these

00:34:55.784 --> 00:34:57.865
<v Speaker 1>projects as I have in the year that

00:34:57.865 --> 00:34:59.065
<v Speaker 1>I've been working on it.

00:35:00.789 --> 00:35:03.430
<v Speaker 1>When it comes to building cloud native type

00:35:03.430 --> 00:35:04.390
<v Speaker 1>applications,

00:35:04.549 --> 00:35:07.270
<v Speaker 1>Rust is coming up. Absolutely. It's gonna be,

00:35:07.670 --> 00:35:09.510
<v Speaker 1>I think, one of the big ones in

00:35:09.510 --> 00:35:11.269
<v Speaker 1>the next couple years, but it's not quite

00:35:11.269 --> 00:35:13.349
<v Speaker 1>at the level of go just yet in

00:35:13.349 --> 00:35:16.035
<v Speaker 1>terms of being able to integrate with the

00:35:16.035 --> 00:35:18.435
<v Speaker 1>other things in the cloud native ecosystem.

00:35:19.795 --> 00:35:21.875
<v Speaker 1>That's not gonna be true forever, but for

00:35:21.875 --> 00:35:23.795
<v Speaker 1>now, that's kind of where I stand on

00:35:23.795 --> 00:35:24.275
<v Speaker 1>that.

00:35:25.474 --> 00:35:27.890
<v Speaker 0>Alright. Thank you for answering that question.

00:35:28.290 --> 00:35:30.050
<v Speaker 0>Now we seem to have a small issue.

00:35:30.050 --> 00:35:31.970
<v Speaker 0>Is that because I did the Suborbital and

00:35:31.970 --> 00:35:33.730
<v Speaker 0>say that the hello world directory? Should I

00:35:33.730 --> 00:35:35.250
<v Speaker 0>have done a Suborbital here?

00:35:35.730 --> 00:35:35.970
<v Speaker 0>Or

00:35:36.610 --> 00:35:37.570
<v Speaker 1>Let's see

00:35:38.210 --> 00:35:40.370
<v Speaker 1>let's see, like, an l l what's

00:35:40.370 --> 00:35:42.385
<v Speaker 1>in the directory for a moment.

00:35:43.345 --> 00:35:44.785
<v Speaker 1>Oh, yeah. It doesn't seem like the bundle

00:35:44.785 --> 00:35:45.744
<v Speaker 1>got put.

00:35:46.144 --> 00:35:47.664
<v Speaker 0>I just move it. Yeah. You can move

00:35:47.664 --> 00:35:49.345
<v Speaker 1>move that bundle up here. Yeah. There you

00:35:49.345 --> 00:35:49.825
<v Speaker 1>go.

00:35:52.065 --> 00:35:53.105
<v Speaker 1>There we go.

00:35:53.345 --> 00:35:54.704
<v Speaker 0>So does that mean I have a web

00:35:54.704 --> 00:35:56.660
<v Speaker 0>service running on port eighty eighty that I

00:35:56.660 --> 00:35:59.060
<v Speaker 0>can hit a push request to slash hello

00:35:59.060 --> 00:36:00.740
<v Speaker 0>and it'll work? Yes.

00:36:00.820 --> 00:36:03.860
<v Speaker 1>So it it it seems like running

00:36:03.860 --> 00:36:06.340
<v Speaker 1>that build command inside didn't

00:36:06.340 --> 00:36:08.260
<v Speaker 1>pull in the directive. So

00:36:08.945 --> 00:36:11.665
<v Speaker 1>if we can kill this, we can rebuild

00:36:11.665 --> 00:36:13.425
<v Speaker 1>it. It didn't look like the the directive

00:36:13.425 --> 00:36:15.345
<v Speaker 1>got pulled in. Otherwise, you would have seen

00:36:15.425 --> 00:36:16.785
<v Speaker 1>the different routes.

00:36:17.345 --> 00:36:18.385
<v Speaker 1>No. You so

00:36:19.025 --> 00:36:20.465
<v Speaker 1>this is something that I need to improve

00:36:20.465 --> 00:36:22.625
<v Speaker 1>the documentation on, but just the dot and

00:36:22.625 --> 00:36:23.745
<v Speaker 1>then dash dash bundle

00:36:24.740 --> 00:36:27.060
<v Speaker 1>should be should be good there.

00:36:28.020 --> 00:36:30.340
<v Speaker 1>Yeah. It's the the CLI

00:36:30.660 --> 00:36:33.060
<v Speaker 1>and the ATMO itself are the the newer

00:36:33.060 --> 00:36:34.900
<v Speaker 1>portions of Suborbital.

00:36:35.859 --> 00:36:37.140
<v Speaker 1>So some of the

00:36:37.619 --> 00:36:39.645
<v Speaker 1>ergonomics of it is not

00:36:39.805 --> 00:36:41.165
<v Speaker 1>quite perfect yet.

00:36:41.965 --> 00:36:43.645
<v Speaker 0>Does change in directory mean that my build

00:36:43.645 --> 00:36:46.285
<v Speaker 0>context has changed and invalidated the cache?

00:36:48.125 --> 00:36:49.725
<v Speaker 1>It shouldn't because

00:36:49.725 --> 00:36:52.285
<v Speaker 1>the Docker the Docker builder

00:36:52.445 --> 00:36:53.485
<v Speaker 1>gets mounted

00:36:54.000 --> 00:36:55.280
<v Speaker 1>to the

00:36:56.000 --> 00:36:59.280
<v Speaker 1>runnable directory itself, the crates index thing is

00:36:59.280 --> 00:37:01.760
<v Speaker 1>something that I'm working on improving. It doesn't

00:37:01.760 --> 00:37:03.280
<v Speaker 1>need to update its crates index every time,

00:37:03.280 --> 00:37:04.480
<v Speaker 1>but it yeah. There you go. What now

00:37:04.480 --> 00:37:07.760
<v Speaker 1>that all the prerequisites have been precompiled, we

00:37:07.335 --> 00:37:08.375
<v Speaker 1>should be good to go. So you can

00:37:08.375 --> 00:37:09.815
<v Speaker 1>run that dev command again.

00:37:11.575 --> 00:37:12.615
<v Speaker 0>Nice. Okay.

00:37:13.415 --> 00:37:14.535
<v Speaker 1>There we go. So now we can see

00:37:14.535 --> 00:37:16.535
<v Speaker 1>that first line. It says mounting the route.

00:37:16.695 --> 00:37:18.615
<v Speaker 1>That means that we've got all of the

00:37:18.615 --> 00:37:20.455
<v Speaker 1>stuff that we need, and it has set

00:37:20.455 --> 00:37:21.575
<v Speaker 1>up the application for us.

00:37:22.850 --> 00:37:24.770
<v Speaker 1>So now if you, yeah, just make a

00:37:24.770 --> 00:37:26.370
<v Speaker 1>post request to slash hello,

00:37:26.530 --> 00:37:28.930
<v Speaker 1>we can just see that running real quick.

00:37:34.210 --> 00:37:35.490
<v Speaker 0>It is It's up. Yeah.

00:37:37.635 --> 00:37:38.915
<v Speaker 1>There you go. So

00:37:39.155 --> 00:37:41.395
<v Speaker 1>you can see here it's just returning you

00:37:41.395 --> 00:37:43.155
<v Speaker 1>a summary of what the request is.

00:37:43.955 --> 00:37:45.475
<v Speaker 1>So it's just telling you that that's what

00:37:45.475 --> 00:37:47.075
<v Speaker 1>happened and it's giving you the request ID

00:37:47.075 --> 00:37:48.115
<v Speaker 1>that was generated.

00:37:49.315 --> 00:37:51.820
<v Speaker 1>And so now we can hop into the

00:37:51.820 --> 00:37:54.060
<v Speaker 1>the Rust function and actually do some something

00:37:54.060 --> 00:37:55.180
<v Speaker 1>cooler with it.

00:37:57.900 --> 00:37:58.620
<v Speaker 1>Right.

00:37:59.260 --> 00:38:01.020
<v Speaker 1>So, that you're getting

00:38:02.895 --> 00:38:05.055
<v Speaker 1>that's what it's just a summary of what

00:38:05.055 --> 00:38:06.815
<v Speaker 1>the request is telling you that it's a

00:38:06.815 --> 00:38:09.055
<v Speaker 1>post request. It's giving you the URI and

00:38:09.055 --> 00:38:10.575
<v Speaker 1>the and a request

00:38:10.735 --> 00:38:13.295
<v Speaker 1>ID. If we want to access the rest

00:38:13.295 --> 00:38:15.230
<v Speaker 1>of the request and, you know, get some

00:38:15.230 --> 00:38:17.950
<v Speaker 1>more information from it, we use the suborbital

00:38:17.950 --> 00:38:20.990
<v Speaker 1>crates to do that. So at the top,

00:38:20.990 --> 00:38:23.710
<v Speaker 1>if you could include another of the sub

00:38:23.710 --> 00:38:27.069
<v Speaker 1>crates, which is suborbital colon colon rec r

00:38:27.069 --> 00:38:27.869
<v Speaker 1>e q

00:38:29.525 --> 00:38:32.165
<v Speaker 1>in addition to the yeah. Exactly.

00:38:34.244 --> 00:38:37.445
<v Speaker 1>So now we can use that to access

00:38:37.684 --> 00:38:39.924
<v Speaker 1>some information about the request. So if we

00:38:39.924 --> 00:38:41.125
<v Speaker 1>do yeah. Like,

00:38:41.605 --> 00:38:43.365
<v Speaker 1>let's say we want to get the body,

00:38:43.790 --> 00:38:46.349
<v Speaker 1>we can say rec colon colon body underscore

00:38:46.349 --> 00:38:47.150
<v Speaker 1>raw.

00:38:51.550 --> 00:38:53.550
<v Speaker 1>And then Why am I not getting my

00:38:54.670 --> 00:38:55.630
<v Speaker 0>auto complete?

00:38:57.135 --> 00:38:58.335
<v Speaker 1>That's a good question.

00:38:59.215 --> 00:39:01.295
<v Speaker 1>I can't call if it's auto complete.

00:39:02.575 --> 00:39:04.495
<v Speaker 1>I find personally that the the Rust

00:39:05.055 --> 00:39:05.295
<v Speaker 1>the

00:39:05.935 --> 00:39:07.535
<v Speaker 1>what do they call it? The Rust analyzer

00:39:07.535 --> 00:39:09.215
<v Speaker 1>needs to be restarted every once in a

00:39:09.215 --> 00:39:11.849
<v Speaker 1>while, and that's just my personal I think

00:39:11.849 --> 00:39:13.930
<v Speaker 0>I dismissed the message saying, hey. We wanna

00:39:13.930 --> 00:39:16.730
<v Speaker 0>update Rust analyzer when I started it. That's

00:39:16.730 --> 00:39:18.730
<v Speaker 1>awesome. Yeah. In fact, I'm not even in

00:39:18.730 --> 00:39:20.730
<v Speaker 0>the right right now. Let's let's not confuse

00:39:20.730 --> 00:39:22.010
<v Speaker 0>it too much. Let me

00:39:22.490 --> 00:39:23.369
<v Speaker 0>do that.

00:39:23.609 --> 00:39:24.410
<v Speaker 0>Let's see.

00:39:30.875 --> 00:39:32.475
<v Speaker 0>Yeah. There we go. Okay.

00:39:34.075 --> 00:39:36.155
<v Speaker 0>Not installed. Not that it needs updated.

00:39:36.395 --> 00:39:38.150
<v Speaker 0>Wonder why that is. Yeah.

00:39:39.830 --> 00:39:41.990
<v Speaker 1>I honestly language servers in general have been

00:39:41.990 --> 00:39:44.150
<v Speaker 1>giving me problems lately. Even the go language

00:39:44.150 --> 00:39:46.150
<v Speaker 1>server and the rust language server have both

00:39:46.150 --> 00:39:48.470
<v Speaker 1>been just causing me issues as of late.

00:39:49.270 --> 00:39:52.790
<v Speaker 0>Alright. Well, that is now indexing those libraries

00:39:52.905 --> 00:39:55.145
<v Speaker 0>some 10 or 75. So let's assume that's

00:39:55.145 --> 00:39:56.505
<v Speaker 0>gonna take thirty seconds.

00:39:57.145 --> 00:39:59.225
<v Speaker 1>Yeah. For sure. So I'll I'll talk a

00:39:59.225 --> 00:40:01.145
<v Speaker 1>bit more about what those APIs are.

00:40:01.545 --> 00:40:04.105
<v Speaker 1>So so the Suborbital Crate,

00:40:04.265 --> 00:40:06.185
<v Speaker 1>it's it gives you access

00:40:06.505 --> 00:40:09.500
<v Speaker 1>to things outside of the Web module, and

00:40:09.500 --> 00:40:11.660
<v Speaker 1>it does so in a very controlled way.

00:40:11.660 --> 00:40:12.140
<v Speaker 1>So

00:40:13.180 --> 00:40:15.099
<v Speaker 1>this this goes back to the security properties

00:40:15.099 --> 00:40:17.339
<v Speaker 1>of WebAssembly. Right? And we can talk for

00:40:17.339 --> 00:40:18.860
<v Speaker 1>a second about what those are.

00:40:19.260 --> 00:40:20.380
<v Speaker 1>WebAssembly

00:40:20.905 --> 00:40:22.585
<v Speaker 1>modules run inside

00:40:22.665 --> 00:40:24.825
<v Speaker 1>a, you know, a nice sandbox.

00:40:25.145 --> 00:40:27.545
<v Speaker 1>In this case, we're using the Wasmr runtime.

00:40:28.185 --> 00:40:29.785
<v Speaker 1>And it means that

00:40:30.025 --> 00:40:32.265
<v Speaker 1>only what the host explicitly

00:40:32.265 --> 00:40:34.905
<v Speaker 1>grants to the module can be accessed.

00:40:35.465 --> 00:40:38.320
<v Speaker 1>And so that means that ATMO and the

00:40:38.320 --> 00:40:41.760
<v Speaker 1>the the the the Hive job scheduler can

00:40:41.760 --> 00:40:43.280
<v Speaker 1>control exactly

00:40:43.360 --> 00:40:46.000
<v Speaker 1>what these modules are allowed to do. And

00:40:46.000 --> 00:40:48.640
<v Speaker 1>we do that by providing APIs through this

00:40:48.640 --> 00:40:50.725
<v Speaker 1>crate. So I think it looks like it's

00:40:50.725 --> 00:40:53.125
<v Speaker 1>working now. We can grab the body raw.

00:40:53.125 --> 00:40:55.285
<v Speaker 1>I think that will be a vec, so

00:40:55.285 --> 00:40:57.765
<v Speaker 1>we'll wanna make that a string most likely.

00:40:58.885 --> 00:40:59.525
<v Speaker 1>Yeah.

00:41:02.085 --> 00:41:03.125
<v Speaker 0>Let me if I can remember how to

00:41:03.125 --> 00:41:03.525
<v Speaker 0>do that.

00:41:04.670 --> 00:41:07.390
<v Speaker 1>There is a util package with Suborbital if

00:41:07.390 --> 00:41:09.150
<v Speaker 1>you want to use it because I always

00:41:09.150 --> 00:41:12.110
<v Speaker 1>get confused by these. There's a string.

00:41:13.150 --> 00:41:14.830
<v Speaker 0>Yeah. It seems okay with that. Yeah. Oh,

00:41:14.830 --> 00:41:15.710
<v Speaker 0>no. Cool.

00:41:16.685 --> 00:41:18.685
<v Speaker 1>It's okay. You can you can kill most

00:41:18.685 --> 00:41:20.685
<v Speaker 1>of the stuff that's inside of the sum,

00:41:20.685 --> 00:41:22.605
<v Speaker 1>and we can just return that something if

00:41:22.605 --> 00:41:23.805
<v Speaker 1>you if you want.

00:41:25.965 --> 00:41:28.365
<v Speaker 1>There is a if you import the util

00:41:28.365 --> 00:41:30.685
<v Speaker 1>module from Suborbital, it will give you a

00:41:30.685 --> 00:41:33.460
<v Speaker 1>a convenience function to convert vector string.

00:41:40.180 --> 00:41:41.860
<v Speaker 0>So that this is yeah. It's the vector

00:41:41.860 --> 00:41:43.220
<v Speaker 0>of of base.

00:41:43.380 --> 00:41:45.060
<v Speaker 0>Why is there no Yep. Collect.

00:41:47.395 --> 00:41:48.915
<v Speaker 0>Okay. Never mind.

00:41:49.315 --> 00:41:51.315
<v Speaker 0>And what's that helper function called, sir? Yeah.

00:41:52.035 --> 00:41:54.915
<v Speaker 1>So if you import the util module including

00:41:54.915 --> 00:41:56.595
<v Speaker 1>in in addition to those two,

00:41:56.994 --> 00:41:58.835
<v Speaker 1>then you should be able to do util

00:41:58.835 --> 00:42:00.994
<v Speaker 1>colon colon to string, I think it is,

00:42:01.260 --> 00:42:02.860
<v Speaker 1>and then pass in the VEC.

00:42:08.460 --> 00:42:10.220
<v Speaker 0>Nice. There we go. We have a string.

00:42:10.220 --> 00:42:10.700
<v Speaker 1>Yeah.

00:42:11.100 --> 00:42:13.580
<v Speaker 1>Cool. And then, you can delete all the

00:42:13.580 --> 00:42:16.085
<v Speaker 1>stuff inside line 12 to 14 there, you

00:42:16.085 --> 00:42:19.365
<v Speaker 1>can just return something there as your, as

00:42:19.365 --> 00:42:20.485
<v Speaker 1>your return value.

00:42:25.445 --> 00:42:27.365
<v Speaker 1>Yeah. Something like the variable.

00:42:27.925 --> 00:42:29.700
<v Speaker 0>Oh, alright. Oh, okay. Okay.

00:42:31.380 --> 00:42:32.980
<v Speaker 1>Actually, no. That's a string. So we're we're

00:42:32.980 --> 00:42:33.780
<v Speaker 1>gonna want,

00:42:34.900 --> 00:42:36.420
<v Speaker 1>you know what? I don't I I I

00:42:36.420 --> 00:42:37.619
<v Speaker 1>think we went a little bit too far.

00:42:37.619 --> 00:42:39.220
<v Speaker 1>The, we want to return One space. To

00:42:39.220 --> 00:42:40.020
<v Speaker 1>evacuate.

00:42:40.420 --> 00:42:42.500
<v Speaker 1>Yeah. So we can we can cancel the

00:42:42.500 --> 00:42:43.060
<v Speaker 1>string.

00:42:43.460 --> 00:42:44.820
<v Speaker 1>Yeah. I I

00:42:45.355 --> 00:42:47.595
<v Speaker 1>I usually do lots of string manipulation with

00:42:47.595 --> 00:42:48.875
<v Speaker 1>some of these things, I'm so used to

00:42:48.875 --> 00:42:50.235
<v Speaker 1>converting it to string right off the bat.

00:42:50.235 --> 00:42:51.755
<v Speaker 1>But yeah. Oh. We can go ahead and

00:42:51.755 --> 00:42:53.355
<v Speaker 0>just do that. Raw.

00:42:53.355 --> 00:42:53.995
<v Speaker 0>Okay.

00:42:54.555 --> 00:42:56.395
<v Speaker 0>And we're retarding that, so we'll leave it

00:42:56.395 --> 00:42:57.275
<v Speaker 0>as so. Okay. Cool.

00:42:59.360 --> 00:43:01.520
<v Speaker 1>Yeah. You no longer need that. I mean,

00:43:01.520 --> 00:43:04.240
<v Speaker 1>you'll wanna change input there to an underscore

00:43:04.240 --> 00:43:05.840
<v Speaker 1>just because we're not using it anymore.

00:43:07.120 --> 00:43:10.320
<v Speaker 1>The the actual run parameter called input

00:43:10.480 --> 00:43:11.920
<v Speaker 1>can be a underscore.

00:43:14.965 --> 00:43:15.525
<v Speaker 1>Yeah.

00:43:16.485 --> 00:43:17.205
<v Speaker 1>Oh, well, I guess

00:43:17.845 --> 00:43:21.365
<v Speaker 0>There we go. There we go. So

00:43:21.365 --> 00:43:23.525
<v Speaker 1>so, yeah, what's happening here is when when

00:43:23.525 --> 00:43:25.205
<v Speaker 1>a request is being handled

00:43:26.210 --> 00:43:27.090
<v Speaker 1>by

00:43:27.170 --> 00:43:29.010
<v Speaker 1>this WebAssembly module,

00:43:29.410 --> 00:43:31.090
<v Speaker 1>the Atmo will

00:43:31.329 --> 00:43:32.770
<v Speaker 1>basically bind

00:43:32.770 --> 00:43:35.250
<v Speaker 1>that request to this module, and then we

00:43:35.250 --> 00:43:37.809
<v Speaker 1>use these APIs to access more information about

00:43:37.665 --> 00:43:40.465
<v Speaker 1>it. So now if you go and build

00:43:40.465 --> 00:43:41.185
<v Speaker 1>again,

00:43:42.065 --> 00:43:43.665
<v Speaker 1>we can deploy that server.

00:43:44.225 --> 00:43:46.625
<v Speaker 1>We can just kinda show that very basic

00:43:46.625 --> 00:43:47.825
<v Speaker 1>version of it.

00:43:49.105 --> 00:43:51.105
<v Speaker 1>Now that we are After after this build,

00:43:51.105 --> 00:43:52.385
<v Speaker 1>we'll set up your native one so that

00:43:52.385 --> 00:43:54.119
<v Speaker 1>we can do it lightning fast.

00:43:58.599 --> 00:44:00.520
<v Speaker 0>I'm assuming I can just pass through any

00:44:00.520 --> 00:44:02.359
<v Speaker 0>strength as the body.

00:44:02.920 --> 00:44:04.440
<v Speaker 1>Yep. That's right.

00:44:04.839 --> 00:44:07.160
<v Speaker 1>That's that's the thing about WebAssembly is that

00:44:07.160 --> 00:44:08.520
<v Speaker 1>because we are

00:44:09.355 --> 00:44:11.115
<v Speaker 1>having to pass data

00:44:11.275 --> 00:44:12.235
<v Speaker 1>amongst,

00:44:12.955 --> 00:44:15.275
<v Speaker 1>you know, guest modules that are written in

00:44:15.275 --> 00:44:17.195
<v Speaker 1>different languages, and they're all running inside this

00:44:17.195 --> 00:44:18.715
<v Speaker 1>WebAssembly runtime,

00:44:19.035 --> 00:44:20.715
<v Speaker 1>we do need to, you know,

00:44:21.590 --> 00:44:24.230
<v Speaker 1>transfer stuff around as bytes. There

00:44:24.630 --> 00:44:27.910
<v Speaker 1>is something coming very soon into the WebAssembly

00:44:27.910 --> 00:44:29.030
<v Speaker 1>spec called

00:44:29.670 --> 00:44:31.910
<v Speaker 1>reference types where you will be able to

00:44:31.910 --> 00:44:34.390
<v Speaker 1>pass more complex data structures like structs and

00:44:34.390 --> 00:44:34.710
<v Speaker 1>whatnot.

00:44:37.244 --> 00:44:38.045
<v Speaker 1>And

00:44:39.805 --> 00:44:41.725
<v Speaker 0>did that Yeah. It worked.

00:44:42.365 --> 00:44:43.965
<v Speaker 1>Okay. Cool. So

00:44:45.005 --> 00:44:47.724
<v Speaker 1>that's great. Yeah. So, yeah, reference types will

00:44:47.724 --> 00:44:49.359
<v Speaker 1>be added to the WebAssembly spec soon, and

00:44:49.359 --> 00:44:50.880
<v Speaker 1>you'll be able to pass more complex data

00:44:50.880 --> 00:44:54.079
<v Speaker 1>types. But for now, you you're really limited

00:44:54.079 --> 00:44:56.240
<v Speaker 1>to passing around bytes.

00:44:56.560 --> 00:44:57.840
<v Speaker 0>Is there any sort of

00:44:58.960 --> 00:45:01.040
<v Speaker 0>middleware system where I can inject my own

00:45:01.040 --> 00:45:04.079
<v Speaker 0>parsers for, like, you know, HTTP request headers,

00:45:04.515 --> 00:45:05.635
<v Speaker 0>deserializing

00:45:05.635 --> 00:45:07.954
<v Speaker 0>the body into certain structs or anything like

00:45:07.954 --> 00:45:08.355
<v Speaker 0>that?

00:45:09.474 --> 00:45:10.595
<v Speaker 1>Yeah. So

00:45:10.835 --> 00:45:13.234
<v Speaker 1>that is a for now, the way that

00:45:13.234 --> 00:45:15.555
<v Speaker 1>I've I've approached this is I'm providing

00:45:16.290 --> 00:45:18.850
<v Speaker 1>convenience things for you through these crates.

00:45:19.330 --> 00:45:22.370
<v Speaker 1>But the goal is to eventually remove any

00:45:22.370 --> 00:45:24.130
<v Speaker 1>of that custom functionality

00:45:24.370 --> 00:45:24.930
<v Speaker 1>in

00:45:25.250 --> 00:45:28.690
<v Speaker 1>favor of, you know, the standard language things.

00:45:29.170 --> 00:45:30.530
<v Speaker 1>We'll need a little bit more

00:45:31.215 --> 00:45:34.175
<v Speaker 1>functionality in the WebAssembly runtime before

00:45:34.255 --> 00:45:36.255
<v Speaker 1>we can really do that well.

00:45:37.135 --> 00:45:37.775
<v Speaker 1>So,

00:45:38.095 --> 00:45:39.535
<v Speaker 1>for example, we can do that right now

00:45:39.535 --> 00:45:42.175
<v Speaker 1>if you, for example, if the body was

00:45:42.175 --> 00:45:43.055
<v Speaker 1>JSON

00:45:43.135 --> 00:45:45.135
<v Speaker 1>and and we wanted to access

00:45:45.455 --> 00:45:47.750
<v Speaker 1>a particular part of it, we could take

00:45:47.750 --> 00:45:49.910
<v Speaker 1>that body raw and we could, you know,

00:45:50.310 --> 00:45:52.070
<v Speaker 1>disassemble it into a struct.

00:45:52.390 --> 00:45:53.670
<v Speaker 1>But Suborbital

00:45:53.670 --> 00:45:55.590
<v Speaker 1>Crate does provide some,

00:45:55.829 --> 00:45:57.589
<v Speaker 1>functions to do this for you. So we

00:45:57.589 --> 00:45:59.750
<v Speaker 1>can say let something equal,

00:45:59.990 --> 00:46:02.555
<v Speaker 1>there's a body underscore field function

00:46:02.954 --> 00:46:05.434
<v Speaker 1>that we can use to actually take the

00:46:05.434 --> 00:46:06.954
<v Speaker 1>request JSON,

00:46:07.115 --> 00:46:09.035
<v Speaker 1>parse it, and pull fields out of it

00:46:09.035 --> 00:46:09.915
<v Speaker 1>automatically.

00:46:10.154 --> 00:46:12.075
<v Speaker 1>So, we can just, you know, key hello

00:46:12.075 --> 00:46:12.954
<v Speaker 1>or whatever.

00:46:13.275 --> 00:46:13.835
<v Speaker 1>Yeah. Sure.

00:46:15.940 --> 00:46:16.500
<v Speaker 1>And then

00:46:17.860 --> 00:46:20.580
<v Speaker 1>and I think that will return

00:46:20.820 --> 00:46:22.260
<v Speaker 1>I'm not sure if that returns a vector

00:46:22.260 --> 00:46:22.980
<v Speaker 1>string.

00:46:25.700 --> 00:46:28.260
<v Speaker 0>I could just oh, no. Body

00:46:29.140 --> 00:46:30.900
<v Speaker 1>field might return bytes as well.

00:46:33.815 --> 00:46:35.655
<v Speaker 0>It returns a string.

00:46:36.535 --> 00:46:37.415
<v Speaker 1>Oh, okay.

00:46:37.734 --> 00:46:39.095
<v Speaker 1>So then you

00:46:39.175 --> 00:46:40.295
<v Speaker 1>want to do

00:46:42.455 --> 00:46:43.655
<v Speaker 1>I think it's

00:46:44.300 --> 00:46:46.140
<v Speaker 1>as bytes to vec or something. Like, you

00:46:46.140 --> 00:46:48.619
<v Speaker 1>do as bytes and then dot to vec.

00:46:48.619 --> 00:46:49.980
<v Speaker 0>Oh, yeah. Yeah. There we go.

00:46:50.700 --> 00:46:51.340
<v Speaker 1>Yeah.

00:46:52.700 --> 00:46:55.099
<v Speaker 1>So let's let's quickly set up your native

00:46:55.099 --> 00:46:57.580
<v Speaker 1>runtime or your native tool chain so we

00:46:57.580 --> 00:46:58.780
<v Speaker 1>can get those super fast builds.

00:46:59.555 --> 00:47:02.435
<v Speaker 1>Do you have Rust up installed?

00:47:02.995 --> 00:47:04.275
<v Speaker 0>Mhmm. I do.

00:47:04.915 --> 00:47:06.995
<v Speaker 1>So if you just do Rust

00:47:06.995 --> 00:47:10.195
<v Speaker 1>up tool chain install WASM 32 dash Wazi

00:47:12.035 --> 00:47:13.795
<v Speaker 1>I think it's tool chain install.

00:47:21.190 --> 00:47:22.390
<v Speaker 0>Let

00:47:25.510 --> 00:47:27.430
<v Speaker 1>me let me make sure I'm getting that

00:47:27.430 --> 00:47:27.910
<v Speaker 1>right.

00:47:30.015 --> 00:47:30.895
<v Speaker 0>Is that

00:47:32.734 --> 00:47:35.615
<v Speaker 0>children left foot? Let just get the exact

00:47:35.615 --> 00:47:36.414
<v Speaker 1>one for you.

00:47:43.920 --> 00:47:45.520
<v Speaker 0>I just keep guessing just Yeah.

00:47:48.560 --> 00:47:52.160
<v Speaker 1>So Rust up target add WASM 32 dash

00:47:52.160 --> 00:47:53.040
<v Speaker 1>Wazy.

00:47:53.360 --> 00:47:56.720
<v Speaker 0>Target add WASM 32 Wazy.

00:47:57.435 --> 00:47:58.715
<v Speaker 0>Yeah. That looks better.

00:47:59.355 --> 00:47:59.995
<v Speaker 1>Yeah.

00:48:00.155 --> 00:48:00.715
<v Speaker 1>Yes.

00:48:01.995 --> 00:48:04.715
<v Speaker 1>So these are the kinds of not complicated

00:48:04.715 --> 00:48:06.555
<v Speaker 1>to install these various tool chains, but I

00:48:06.555 --> 00:48:08.155
<v Speaker 1>did wanna make it extremely easy for somebody

00:48:08.155 --> 00:48:09.835
<v Speaker 1>to just get up and running with the

00:48:09.835 --> 00:48:11.660
<v Speaker 1>basic version. And then if they want to

00:48:11.660 --> 00:48:14.220
<v Speaker 1>add, you know, the the easier

00:48:14.220 --> 00:48:17.020
<v Speaker 1>to use parts of it later, they can.

00:48:17.020 --> 00:48:18.780
<v Speaker 1>So, yeah, you can hit that command. The

00:48:18.940 --> 00:48:20.700
<v Speaker 1>passing the native flag will just allow it

00:48:20.700 --> 00:48:22.300
<v Speaker 1>to use your local tool chain.

00:48:23.740 --> 00:48:24.540
<v Speaker 1>And

00:48:24.875 --> 00:48:27.915
<v Speaker 1>as we can shortly see, this will be

00:48:27.915 --> 00:48:29.994
<v Speaker 1>a fair bit faster off the bat than

00:48:29.994 --> 00:48:32.795
<v Speaker 1>Docker. And then on that second

00:48:32.875 --> 00:48:34.795
<v Speaker 1>run through, it'll be, like, milliseconds.

00:48:39.260 --> 00:48:40.620
<v Speaker 0>So see the

00:48:40.780 --> 00:48:42.220
<v Speaker 0>well, just well, let's compile on it. So

00:48:42.220 --> 00:48:44.940
<v Speaker 0>we're now using request body field name. Now

00:48:44.940 --> 00:48:47.100
<v Speaker 0>is that gonna decode whatever JSON I pass

00:48:47.100 --> 00:48:48.780
<v Speaker 0>in, or is it expecting me to pass

00:48:48.780 --> 00:48:49.820
<v Speaker 0>in query parameters?

00:48:50.214 --> 00:48:52.694
<v Speaker 0>What what's the semantics there? Yeah. So that

00:48:52.694 --> 00:48:55.095
<v Speaker 1>that yeah. That will pull in, yeah, from

00:48:55.095 --> 00:48:57.415
<v Speaker 1>the body, from the request body just like

00:48:57.415 --> 00:48:59.895
<v Speaker 1>you have. There are other helper functions for

00:48:59.895 --> 00:49:01.655
<v Speaker 1>accessing query params.

00:49:02.454 --> 00:49:04.055
<v Speaker 1>We'll look at HTTP,

00:49:04.055 --> 00:49:06.990
<v Speaker 1>like, path params as well, headers, all sorts

00:49:06.990 --> 00:49:08.590
<v Speaker 1>of things. Those are all provided by the

00:49:08.590 --> 00:49:09.230
<v Speaker 1>library

00:49:09.390 --> 00:49:11.310
<v Speaker 1>for you to access. Oh, nice. So I

00:49:11.310 --> 00:49:13.150
<v Speaker 0>can actually just do, like, this was a

00:49:13.150 --> 00:49:14.990
<v Speaker 0>query param where I pass the name as

00:49:14.990 --> 00:49:16.990
<v Speaker 0>David or Connor, and it would actually know

00:49:16.990 --> 00:49:18.030
<v Speaker 0>to to parse that to.

00:49:19.205 --> 00:49:20.965
<v Speaker 1>Yeah. So yeah. We'll we'll we can do

00:49:20.965 --> 00:49:22.325
<v Speaker 1>that one in a second and we can

00:49:22.325 --> 00:49:24.485
<v Speaker 1>actually control that with the directive as well.

00:49:25.445 --> 00:49:26.005
<v Speaker 0>Cool.

00:49:26.405 --> 00:49:28.725
<v Speaker 0>Alright. So we've got the JSON parsing.

00:49:29.445 --> 00:49:29.765
<v Speaker 1>Yeah.

00:49:32.080 --> 00:49:34.560
<v Speaker 1>So yeah. So we can look at HTTP

00:49:34.560 --> 00:49:36.880
<v Speaker 1>paths if you want or sorry, URIs.

00:49:37.280 --> 00:49:39.040
<v Speaker 1>If we pop open the directive,

00:49:39.760 --> 00:49:41.760
<v Speaker 1>it looks like code doesn't have the root

00:49:41.760 --> 00:49:43.600
<v Speaker 1>open, but you can just

00:49:43.920 --> 00:49:45.455
<v Speaker 0>I'm trying to make this as difficult for

00:49:45.455 --> 00:49:46.895
<v Speaker 1>you as possible. That's what that is. You

00:49:46.895 --> 00:49:50.495
<v Speaker 0>know? That's alright. Yeah. It's it's it's it's

00:49:50.495 --> 00:49:53.695
<v Speaker 1>always a guessing game whether Versus Code will

00:49:53.695 --> 00:49:56.015
<v Speaker 1>properly handle multiple crates in the same project

00:49:56.015 --> 00:49:58.550
<v Speaker 1>or not. Yeah. So if we just, you

00:49:58.550 --> 00:50:00.230
<v Speaker 1>know, after that slash hello,

00:50:00.470 --> 00:50:02.710
<v Speaker 1>add a slash colon name,

00:50:04.790 --> 00:50:07.430
<v Speaker 1>then that's, you know, setting up a, basically,

00:50:07.430 --> 00:50:08.790
<v Speaker 1>a path wildcard,

00:50:09.110 --> 00:50:12.865
<v Speaker 1>and we can then access that in our

00:50:12.865 --> 00:50:15.425
<v Speaker 1>crates. So if you switch from body field,

00:50:16.065 --> 00:50:18.625
<v Speaker 1>I believe it is just param,

00:50:18.625 --> 00:50:20.385
<v Speaker 1>rec colon colon param,

00:50:20.625 --> 00:50:21.265
<v Speaker 1>I think.

00:50:26.380 --> 00:50:27.660
<v Speaker 0>URL param?

00:50:28.940 --> 00:50:30.860
<v Speaker 1>Yes. URL param. That's the one.

00:50:32.780 --> 00:50:35.100
<v Speaker 1>And then, yeah, same thing, plus name.

00:50:35.340 --> 00:50:36.060
<v Speaker 1>And then,

00:50:36.380 --> 00:50:38.535
<v Speaker 1>we can go back and see that native

00:50:38.535 --> 00:50:39.415
<v Speaker 1>tool chain

00:50:39.575 --> 00:50:40.295
<v Speaker 1>in

00:50:40.615 --> 00:50:41.415
<v Speaker 1>practice.

00:50:44.375 --> 00:50:46.214
<v Speaker 1>See how fast that was this the next

00:50:46.214 --> 00:50:47.095
<v Speaker 1>time around.

00:50:48.615 --> 00:50:50.295
<v Speaker 1>Alright. And then we should be able to

00:50:50.295 --> 00:50:50.855
<v Speaker 1>do

00:50:51.655 --> 00:50:53.255
<v Speaker 1>yeah. Kill all of the

00:50:54.590 --> 00:50:56.830
<v Speaker 1>so right. We're doing it.

00:50:57.470 --> 00:50:58.190
<v Speaker 1>Exactly.

00:51:00.830 --> 00:51:02.750
<v Speaker 0>Sweet. Nice. I like it.

00:51:03.230 --> 00:51:04.910
<v Speaker 1>Yeah. So those are the kinds of things.

00:51:06.155 --> 00:51:07.675
<v Speaker 1>As you can see, like, a lot of

00:51:07.675 --> 00:51:10.234
<v Speaker 1>the APIs are designed

00:51:10.234 --> 00:51:11.755
<v Speaker 1>around building,

00:51:12.474 --> 00:51:14.075
<v Speaker 1>well, web APIs.

00:51:14.075 --> 00:51:15.515
<v Speaker 1>That's kind of the focus for now with

00:51:15.515 --> 00:51:17.835
<v Speaker 1>Atmo is is really building, you know, like,

00:51:17.835 --> 00:51:19.355
<v Speaker 1>the standard REST API.

00:51:20.280 --> 00:51:20.840
<v Speaker 1>But,

00:51:21.480 --> 00:51:23.480
<v Speaker 1>that's not the end goal, or at least

00:51:23.480 --> 00:51:25.480
<v Speaker 1>that's not the entire goal. So the entire

00:51:25.480 --> 00:51:25.960
<v Speaker 1>goal

00:51:26.360 --> 00:51:28.200
<v Speaker 1>is to be able to handle, you know,

00:51:28.200 --> 00:51:30.040
<v Speaker 1>event based traffic. You know, you should be

00:51:30.040 --> 00:51:30.760
<v Speaker 1>able to,

00:51:31.640 --> 00:51:32.360
<v Speaker 1>attach

00:51:33.160 --> 00:51:35.560
<v Speaker 1>Atmo to, you know, a Kafka

00:51:35.560 --> 00:51:36.974
<v Speaker 1>message queue or

00:51:37.135 --> 00:51:38.815
<v Speaker 1>NATs, and you should be able to handle

00:51:38.815 --> 00:51:40.095
<v Speaker 1>any kind of input.

00:51:40.815 --> 00:51:42.414
<v Speaker 1>That's one of the nice things about the

00:51:42.414 --> 00:51:45.695
<v Speaker 1>Grav project is that it accepts plug ins

00:51:45.934 --> 00:51:48.974
<v Speaker 1>for all sorts of different transports.

00:51:48.974 --> 00:51:49.855
<v Speaker 1>And so,

00:51:50.654 --> 00:51:54.390
<v Speaker 1>connecting to various, you know, messaging or,

00:51:54.869 --> 00:51:56.150
<v Speaker 1>queue systems

00:51:56.710 --> 00:51:59.110
<v Speaker 1>will be eventually pretty trivial.

00:51:59.270 --> 00:52:01.750
<v Speaker 1>And so you should be able to handle

00:52:01.750 --> 00:52:03.590
<v Speaker 1>all sorts of different traffic

00:52:03.750 --> 00:52:04.710
<v Speaker 1>using Atmo.

00:52:06.315 --> 00:52:07.595
<v Speaker 1>But, you know, talk to me in six

00:52:07.595 --> 00:52:09.435
<v Speaker 1>months and that'll probably be available.

00:52:10.474 --> 00:52:13.035
<v Speaker 0>Alright. So I think we've done a a

00:52:13.035 --> 00:52:14.954
<v Speaker 0>good job of showing how we're using Rust

00:52:14.954 --> 00:52:16.954
<v Speaker 0>to component to Wasm. We're using the the

00:52:16.954 --> 00:52:17.995
<v Speaker 0>runtime here.

00:52:18.395 --> 00:52:20.155
<v Speaker 0>Can we now take a look at composition?

00:52:20.310 --> 00:52:22.870
<v Speaker 0>Can I add a new endpoint and pass

00:52:22.870 --> 00:52:24.470
<v Speaker 0>data from one to the other?

00:52:25.270 --> 00:52:27.590
<v Speaker 1>Sure. So let's head back to the terminal

00:52:27.590 --> 00:52:29.110
<v Speaker 1>and we can do

00:52:29.430 --> 00:52:32.150
<v Speaker 1>Subor create runnable and then give it a

00:52:32.150 --> 00:52:32.310
<v Speaker 1>name.

00:52:34.735 --> 00:52:36.175
<v Speaker 0>Call it translator.

00:52:38.095 --> 00:52:38.895
<v Speaker 1>Sure.

00:52:40.335 --> 00:52:43.135
<v Speaker 1>Cool. So, yeah, you should have another one

00:52:43.135 --> 00:52:44.015
<v Speaker 1>in there now,

00:52:44.850 --> 00:52:47.090
<v Speaker 1>and it'll be empty once again.

00:52:48.290 --> 00:52:48.930
<v Speaker 1>And

00:52:49.330 --> 00:52:50.450
<v Speaker 1>so we can

00:52:50.850 --> 00:52:52.130
<v Speaker 1>you know, what what do you what do

00:52:52.130 --> 00:52:53.170
<v Speaker 1>you wanna build here? We can

00:52:53.890 --> 00:52:55.410
<v Speaker 0>So why don't we just

00:52:55.650 --> 00:52:57.650
<v Speaker 0>take the hello world, which takes a name

00:52:57.650 --> 00:53:00.174
<v Speaker 0>on the the URL parameter right now. So

00:53:00.174 --> 00:53:02.255
<v Speaker 0>I pass in David or Connor, and why

00:53:02.255 --> 00:53:04.415
<v Speaker 0>don't we have to translate or just

00:53:04.815 --> 00:53:06.974
<v Speaker 0>reverse the string and spit it back out?

00:53:07.615 --> 00:53:10.734
<v Speaker 1>Sure. Sounds great. So this brings us to

00:53:10.974 --> 00:53:12.494
<v Speaker 1>the declarative

00:53:12.720 --> 00:53:14.640
<v Speaker 1>application building, and this is the part that

00:53:14.640 --> 00:53:16.720
<v Speaker 1>gets me pretty excited. So if we open

00:53:16.720 --> 00:53:17.840
<v Speaker 1>up that directive,

00:53:18.720 --> 00:53:20.800
<v Speaker 1>file for just a moment, I wanna walk

00:53:20.800 --> 00:53:23.599
<v Speaker 1>through, some of the basics. So you can

00:53:23.599 --> 00:53:26.240
<v Speaker 1>see here in the handler, we name a

00:53:26.240 --> 00:53:27.680
<v Speaker 1>number of steps.

00:53:28.080 --> 00:53:31.445
<v Speaker 1>And so what's happening here is that each

00:53:31.445 --> 00:53:32.965
<v Speaker 1>step in the chain

00:53:33.365 --> 00:53:34.885
<v Speaker 1>will produce an output.

00:53:35.525 --> 00:53:38.005
<v Speaker 1>So the hello world one will just spit

00:53:38.005 --> 00:53:39.685
<v Speaker 1>out the name from the URL.

00:53:40.005 --> 00:53:42.165
<v Speaker 1>Every time a step completes,

00:53:42.630 --> 00:53:45.589
<v Speaker 1>the output gets saved to what's called the

00:53:45.589 --> 00:53:46.869
<v Speaker 1>request state.

00:53:47.269 --> 00:53:50.230
<v Speaker 1>And this is, basically a map or, the

00:53:50.230 --> 00:53:51.829
<v Speaker 1>key value pairs

00:53:51.990 --> 00:53:55.910
<v Speaker 1>that is, you know, constructed for each request.

00:53:56.470 --> 00:53:57.029
<v Speaker 1>And

00:53:57.414 --> 00:53:59.175
<v Speaker 1>if I wanna access

00:53:59.335 --> 00:54:00.775
<v Speaker 1>the state

00:54:00.775 --> 00:54:02.295
<v Speaker 1>from one of the runnables,

00:54:02.934 --> 00:54:06.135
<v Speaker 1>the Suborbital crates, the the library, will allow

00:54:06.135 --> 00:54:08.295
<v Speaker 1>me to do that. So when this hello

00:54:08.295 --> 00:54:10.694
<v Speaker 1>world function runs in the first step, its

00:54:10.694 --> 00:54:12.214
<v Speaker 1>output will get saved to state.

00:54:12.869 --> 00:54:15.430
<v Speaker 1>And then the second step, which will be

00:54:15.430 --> 00:54:17.510
<v Speaker 1>our reverse, will be able to access that

00:54:17.510 --> 00:54:18.150
<v Speaker 1>state

00:54:18.470 --> 00:54:21.670
<v Speaker 1>and pull the value that was output in

00:54:21.670 --> 00:54:22.710
<v Speaker 1>the first step

00:54:22.950 --> 00:54:24.869
<v Speaker 1>and then use that to do whatever it

00:54:24.869 --> 00:54:25.269
<v Speaker 1>wants with.

00:54:26.225 --> 00:54:26.865
<v Speaker 1>So

00:54:27.425 --> 00:54:29.345
<v Speaker 1>on line 14 right where your cursor is,

00:54:29.345 --> 00:54:31.185
<v Speaker 1>we can add another f n,

00:54:31.425 --> 00:54:33.025
<v Speaker 1>exactly like the first one,

00:54:34.225 --> 00:54:35.505
<v Speaker 1>and we'll say,

00:54:35.985 --> 00:54:37.185
<v Speaker 1>translate, I think you called it.

00:54:38.160 --> 00:54:38.800
<v Speaker 1>So

00:54:39.520 --> 00:54:40.720
<v Speaker 1>this will

00:54:40.800 --> 00:54:43.200
<v Speaker 1>now in the translator runnable, we're going to

00:54:43.200 --> 00:54:45.839
<v Speaker 1>access that state and figure out what that

00:54:45.839 --> 00:54:47.440
<v Speaker 1>hello world function,

00:54:47.599 --> 00:54:48.400
<v Speaker 1>gave us. So

00:54:49.935 --> 00:54:51.135
<v Speaker 1>you can

00:54:51.295 --> 00:54:54.255
<v Speaker 1>use, we're we're gonna import that rec module

00:54:54.255 --> 00:54:55.055
<v Speaker 1>again,

00:54:55.855 --> 00:54:58.575
<v Speaker 1>because we're gonna be accessing the request state.

00:55:01.615 --> 00:55:02.255
<v Speaker 1>And,

00:55:03.535 --> 00:55:06.060
<v Speaker 1>yep. And so if you,

00:55:06.540 --> 00:55:09.020
<v Speaker 1>do rec colon colon state,

00:55:09.340 --> 00:55:10.780
<v Speaker 1>I will put it in a variable. So

00:55:10.780 --> 00:55:12.140
<v Speaker 1>let name equal,

00:55:12.540 --> 00:55:15.180
<v Speaker 1>you know, rec colon colon state.

00:55:16.540 --> 00:55:18.460
<v Speaker 0>Give it a second. See if it catches

00:55:18.460 --> 00:55:18.700
<v Speaker 0>up.

00:55:19.525 --> 00:55:20.805
<v Speaker 0>Alright. Yeah.

00:55:22.405 --> 00:55:23.925
<v Speaker 0>I think it's just a lot of queries.

00:55:23.925 --> 00:55:26.085
<v Speaker 0>Let me pop it open and just a

00:55:26.085 --> 00:55:26.965
<v Speaker 0>translator.

00:55:27.765 --> 00:55:28.725
<v Speaker 1>Yeah. Sure.

00:55:30.085 --> 00:55:31.605
<v Speaker 1>Those pesky language servers.

00:55:33.130 --> 00:55:34.730
<v Speaker 0>Yeah. They're not I think it's a handle

00:55:34.730 --> 00:55:37.050
<v Speaker 0>model ripples really well, I don't think so.

00:55:37.130 --> 00:55:37.930
<v Speaker 1>Yeah.

00:55:43.815 --> 00:55:44.455
<v Speaker 0>Okay.

00:55:44.775 --> 00:55:46.695
<v Speaker 0>Now that looks a bit healthier.

00:55:47.734 --> 00:55:48.295
<v Speaker 0>Oh,

00:55:49.175 --> 00:55:51.015
<v Speaker 0>I've not done a cargo install yet.

00:55:51.655 --> 00:55:53.494
<v Speaker 0>Do I need to or a build? Or

00:55:54.454 --> 00:55:57.175
<v Speaker 1>So Versus Code usually does that for you,

00:55:57.175 --> 00:55:57.655
<v Speaker 1>but

00:55:58.740 --> 00:56:01.700
<v Speaker 1>I mean Well, does this fetching

00:56:02.100 --> 00:56:02.900
<v Speaker 0>metadata.

00:56:03.860 --> 00:56:04.820
<v Speaker 0>Alright.

00:56:08.820 --> 00:56:09.460
<v Speaker 0>So

00:56:12.345 --> 00:56:13.945
<v Speaker 1>But I mean, we can run a Suborbital

00:56:13.945 --> 00:56:15.625
<v Speaker 1>build and that will build all of the

00:56:15.625 --> 00:56:17.465
<v Speaker 1>prerequisites and stuff if you want.

00:56:17.785 --> 00:56:18.905
<v Speaker 0>Yeah. Why not?

00:56:19.145 --> 00:56:21.225
<v Speaker 1>So So if you just if you're inside

00:56:21.225 --> 00:56:23.225
<v Speaker 1>of of a of a runnable,

00:56:23.865 --> 00:56:25.240
<v Speaker 1>I mean, yeah, sure. You can do the

00:56:25.240 --> 00:56:26.519
<v Speaker 1>whole thing if you want. That'll build all

00:56:26.519 --> 00:56:27.720
<v Speaker 1>of them. But if you just wanna run

00:56:27.720 --> 00:56:28.359
<v Speaker 1>one,

00:56:28.759 --> 00:56:30.680
<v Speaker 1>you can do that as well. But, yeah,

00:56:30.680 --> 00:56:31.319
<v Speaker 1>go ahead and do that.

00:56:39.855 --> 00:56:41.855
<v Speaker 0>Yeah. It seems a bit happier now.

00:56:44.655 --> 00:56:45.295
<v Speaker 0>Potentially.

00:56:47.055 --> 00:56:49.295
<v Speaker 0>There we go. Alright. So it just wants

00:56:49.295 --> 00:56:49.775
<v Speaker 0>a Yeah.

00:56:51.135 --> 00:56:52.975
<v Speaker 1>So we'll just ask for so in this

00:56:52.975 --> 00:56:55.055
<v Speaker 1>case, we're gonna ask for hello world

00:56:55.410 --> 00:56:57.890
<v Speaker 1>because that was the name of the function.

00:56:57.890 --> 00:56:59.329
<v Speaker 1>But that's

00:56:59.329 --> 00:57:00.610
<v Speaker 1>not super

00:57:00.770 --> 00:57:02.770
<v Speaker 1>ergonomic. So let's go back to the directive,

00:57:02.770 --> 00:57:05.170
<v Speaker 1>and we can actually make that a little

00:57:05.170 --> 00:57:05.809
<v Speaker 1>bit nicer.

00:57:14.155 --> 00:57:15.915
<v Speaker 0>I'm in I'm in limbo.

00:57:16.235 --> 00:57:17.675
<v Speaker 0>I'll grab beach ball.

00:57:18.715 --> 00:57:19.675
<v Speaker 0>Okay.

00:57:20.955 --> 00:57:22.555
<v Speaker 0>Let's open up this whole thing again.

00:57:24.200 --> 00:57:26.119
<v Speaker 1>You can just maybe add the directive file

00:57:26.119 --> 00:57:27.960
<v Speaker 1>if you don't wanna add the whole thing.

00:57:28.119 --> 00:57:30.760
<v Speaker 0>We just got the the most important question

00:57:30.760 --> 00:57:32.839
<v Speaker 0>of the day. What is my Versus code

00:57:32.839 --> 00:57:33.720
<v Speaker 0>color scheme?

00:57:37.079 --> 00:57:39.365
<v Speaker 0>It is It is very nice. This one

00:57:39.365 --> 00:57:40.964
<v Speaker 0>is called plastic

00:57:40.964 --> 00:57:41.925
<v Speaker 0>I believe.

00:57:45.684 --> 00:57:48.085
<v Speaker 0>Panda syntax. It's not plastic. Panda

00:57:49.125 --> 00:57:49.605
<v Speaker 0>syntax.

00:57:51.080 --> 00:57:52.840
<v Speaker 0>Alright. We wanted the directive.

00:57:53.560 --> 00:57:55.720
<v Speaker 0>Okay. So we wanna improve the ergonomics of

00:57:55.720 --> 00:57:59.160
<v Speaker 0>the passing first date. Exactly. So so by

00:57:59.160 --> 00:57:59.880
<v Speaker 1>default,

00:57:59.960 --> 00:58:01.720
<v Speaker 1>the the value

00:58:02.280 --> 00:58:03.160
<v Speaker 1>in

00:58:03.160 --> 00:58:05.160
<v Speaker 1>state

00:58:04.215 --> 00:58:06.615
<v Speaker 1>we want to make that a nicer name.

00:58:06.615 --> 00:58:09.815
<v Speaker 1>So underneath the hello world on line 13,

00:58:09.815 --> 00:58:11.015
<v Speaker 1>we can add a new line,

00:58:11.495 --> 00:58:13.015
<v Speaker 1>and we can say as,

00:58:14.215 --> 00:58:16.215
<v Speaker 1>and then a colon, and then

00:58:16.455 --> 00:58:16.695
<v Speaker 1>name.

00:58:17.780 --> 00:58:18.900
<v Speaker 1>So the

00:58:19.060 --> 00:58:20.660
<v Speaker 1>the as clause

00:58:21.220 --> 00:58:21.940
<v Speaker 1>is,

00:58:22.100 --> 00:58:23.780
<v Speaker 1>one of the things you can use in

00:58:23.780 --> 00:58:25.940
<v Speaker 1>the directive to make, you know, the state

00:58:25.940 --> 00:58:27.220
<v Speaker 1>easier to work with.

00:58:28.340 --> 00:58:30.340
<v Speaker 1>So it basically is like assigning to a

00:58:30.340 --> 00:58:33.355
<v Speaker 1>variable. We're saying, run hello world and save

00:58:33.355 --> 00:58:34.555
<v Speaker 1>it as name.

00:58:35.355 --> 00:58:37.595
<v Speaker 1>So now we can pop back to the

00:58:37.595 --> 00:58:38.555
<v Speaker 1>translator,

00:58:39.115 --> 00:58:39.835
<v Speaker 1>function.

00:58:39.994 --> 00:58:42.234
<v Speaker 1>And instead of requesting it as hello world,

00:58:42.234 --> 00:58:43.914
<v Speaker 1>we can just request it as name. And

00:58:43.914 --> 00:58:45.994
<v Speaker 1>it makes a lot more sense from the

00:58:45.994 --> 00:58:47.035
<v Speaker 1>from the perspective

00:58:47.370 --> 00:58:47.850
<v Speaker 1>developer.

00:58:50.170 --> 00:58:51.450
<v Speaker 1>So then we can do our magic to

00:58:51.450 --> 00:58:52.810
<v Speaker 1>do the reversal. I'm gonna let you handle

00:58:52.810 --> 00:58:55.290
<v Speaker 1>this part because a Rust developer, I am

00:58:55.290 --> 00:58:55.770
<v Speaker 1>not.

00:58:57.290 --> 00:58:57.930
<v Speaker 0>Yeah.

00:58:58.410 --> 00:59:00.650
<v Speaker 0>Good. I never really planned this through today.

00:59:01.855 --> 00:59:03.935
<v Speaker 1>I will do some quick googling.

00:59:04.415 --> 00:59:05.695
<v Speaker 0>Sorry. Unless

00:59:05.935 --> 00:59:07.215
<v Speaker 0>you tell me I called it anyway. Don't

00:59:07.215 --> 00:59:09.855
<v Speaker 0>mind showing people. So Rust, Rivera, it's a

00:59:09.855 --> 00:59:10.575
<v Speaker 0>string.

00:59:11.455 --> 00:59:14.975
<v Speaker 1>Yeah. It's looks like .chars.rev

00:59:15.210 --> 00:59:16.650
<v Speaker 1>will There we go.

00:59:17.290 --> 00:59:18.090
<v Speaker 1>Do it.

00:59:22.410 --> 00:59:23.690
<v Speaker 0>Does that return

00:59:23.690 --> 00:59:25.050
<v Speaker 0>or does it mutate?

00:59:32.615 --> 00:59:34.295
<v Speaker 0>Yeah. Okay. Oh, and then you might wanna

00:59:34.295 --> 00:59:35.255
<v Speaker 1>dot collect

00:59:35.335 --> 00:59:35.894
<v Speaker 1>from that.

00:59:39.590 --> 00:59:41.190
<v Speaker 0>Okay. So reverse

00:59:41.350 --> 00:59:42.310
<v Speaker 0>equals.

00:59:42.870 --> 00:59:44.550
<v Speaker 0>And because we're doing a collect, we need

00:59:44.550 --> 00:59:46.070
<v Speaker 0>to specify the type.

00:59:47.110 --> 00:59:49.030
<v Speaker 0>There we go. So now

00:59:49.190 --> 00:59:51.510
<v Speaker 0>we can use our util function.

00:59:52.070 --> 00:59:53.694
<v Speaker 1>That's right. Oh, no. We don't need it

00:59:53.694 --> 00:59:55.135
<v Speaker 0>because it already is. Oh, no. We need

00:59:55.135 --> 00:59:56.575
<v Speaker 0>bytes. Okay. Reverse.

00:59:57.295 --> 00:59:57.855
<v Speaker 1>Yeah.

00:59:58.255 --> 00:59:59.295
<v Speaker 0>Bytes.

01:00:01.214 --> 01:00:03.295
<v Speaker 1>Not too back, I think, as well. That's

01:00:03.295 --> 01:00:04.655
<v Speaker 0>right. Yep. Thank you.

01:00:06.819 --> 01:00:08.740
<v Speaker 0>And this doesn't need to be mutable. Let's

01:00:08.740 --> 01:00:10.980
<v Speaker 0>get rid of that yellow squiggle here. Oh,

01:00:10.980 --> 01:00:12.500
<v Speaker 0>too much. Too much.

01:00:14.660 --> 01:00:16.420
<v Speaker 0>That piece, the compiler.

01:00:16.900 --> 01:00:18.500
<v Speaker 0>Alright. Yes.

01:00:19.460 --> 01:00:21.305
<v Speaker 1>Great. Okay. So,

01:00:21.704 --> 01:00:24.345
<v Speaker 1>now let's just revisit the directive to make

01:00:24.345 --> 01:00:25.704
<v Speaker 1>sure that we

01:00:25.704 --> 01:00:27.465
<v Speaker 1>are summarizing what's happening.

01:00:29.385 --> 01:00:31.385
<v Speaker 1>So we're running the hello world function. That's

01:00:31.385 --> 01:00:33.944
<v Speaker 1>returning the name from the URL parameter. We're

01:00:33.944 --> 01:00:36.400
<v Speaker 1>saving it into the request state

01:00:36.400 --> 01:00:39.040
<v Speaker 1>as name, and then the translator function is

01:00:39.040 --> 01:00:41.440
<v Speaker 1>going to run take that name and give

01:00:41.440 --> 01:00:43.360
<v Speaker 1>us the reverse version. So we can

01:00:43.760 --> 01:00:45.440
<v Speaker 1>build that and

01:00:47.120 --> 01:00:48.240
<v Speaker 1>let it run.

01:00:50.400 --> 01:00:50.800
<v Speaker 1>Great.

01:00:55.405 --> 01:00:56.685
<v Speaker 0>Hey. It worked.

01:00:57.245 --> 01:00:58.605
<v Speaker 1>There you go. I mean, of course, it

01:00:58.605 --> 01:01:00.525
<v Speaker 0>worked. Like, never ending this.

01:01:01.005 --> 01:01:02.845
<v Speaker 1>Hey. In my head, that's what I'm thinking.

01:01:02.845 --> 01:01:03.005
<v Speaker 1>Yes.

01:01:06.750 --> 01:01:08.030
<v Speaker 1>Composition. Right? You,

01:01:08.430 --> 01:01:10.910
<v Speaker 1>you can do all sorts of different things.

01:01:10.910 --> 01:01:14.350
<v Speaker 1>Now there's one more little superpower of the

01:01:14.350 --> 01:01:16.430
<v Speaker 1>directive that I'd love to show off.

01:01:17.870 --> 01:01:20.725
<v Speaker 1>If we could create one more runnable,

01:01:21.525 --> 01:01:23.845
<v Speaker 1>I do wanna show some of the powers

01:01:23.845 --> 01:01:25.605
<v Speaker 1>that WebAssembly gives us.

01:01:26.885 --> 01:01:29.445
<v Speaker 1>So if we create runnable, let's just call

01:01:29.445 --> 01:01:29.925
<v Speaker 1>it,

01:01:30.485 --> 01:01:32.725
<v Speaker 1>you know, the thingy. Yeah. Sure.

01:01:35.930 --> 01:01:36.730
<v Speaker 1>Now,

01:01:37.290 --> 01:01:39.130
<v Speaker 1>it it can honestly, we can just leave

01:01:39.130 --> 01:01:40.970
<v Speaker 1>it as the default. It doesn't, what it

01:01:40.970 --> 01:01:42.250
<v Speaker 1>actually does doesn't matter.

01:01:42.490 --> 01:01:44.730
<v Speaker 1>If we pop over to the directive for

01:01:44.730 --> 01:01:45.210
<v Speaker 1>a moment,

01:01:46.505 --> 01:01:49.945
<v Speaker 1>we can do something pretty cool. So,

01:01:50.825 --> 01:01:51.545
<v Speaker 1>let's

01:01:51.705 --> 01:01:54.105
<v Speaker 1>say we want to run a bunch of

01:01:54.105 --> 01:01:55.065
<v Speaker 1>these functions

01:01:55.465 --> 01:01:56.345
<v Speaker 1>in parallel.

01:01:57.480 --> 01:01:59.000
<v Speaker 1>Say you wanna do a whole bunch of

01:01:59.000 --> 01:02:00.520
<v Speaker 1>data fetching all at once.

01:02:00.840 --> 01:02:02.760
<v Speaker 1>Say you want to, you know, connect to

01:02:02.760 --> 01:02:04.600
<v Speaker 1>a bunch of different resources and pull in

01:02:04.600 --> 01:02:06.920
<v Speaker 1>a bunch of different data. We can use

01:02:06.920 --> 01:02:09.320
<v Speaker 1>what's called a function group here. So,

01:02:10.840 --> 01:02:13.155
<v Speaker 1>let's go in here. We can just pass

01:02:13.155 --> 01:02:13.875
<v Speaker 1>group,

01:02:14.835 --> 01:02:17.555
<v Speaker 1>as the instead of f n. And then,

01:02:18.035 --> 01:02:19.875
<v Speaker 1>we'll have to go down a line and

01:02:19.875 --> 01:02:21.475
<v Speaker 1>then add a couple of f n's to

01:02:21.475 --> 01:02:22.355
<v Speaker 1>that group.

01:02:24.035 --> 01:02:24.115
<v Speaker 1>So,

01:02:25.640 --> 01:02:27.400
<v Speaker 1>yes, I think that should do it. You

01:02:27.400 --> 01:02:30.200
<v Speaker 1>never know with YAML indentation,

01:02:30.200 --> 01:02:30.760
<v Speaker 1>but

01:02:31.080 --> 01:02:32.520
<v Speaker 1>so we can actually put

01:02:33.240 --> 01:02:34.680
<v Speaker 1>yeah. We can do that, or we can

01:02:34.680 --> 01:02:36.200
<v Speaker 1>we can actually put, you know, the hello

01:02:36.200 --> 01:02:36.840
<v Speaker 1>world

01:02:38.200 --> 01:02:40.755
<v Speaker 1>in there as well if we want to.

01:02:42.994 --> 01:02:45.955
<v Speaker 1>And so what's going to happen here is

01:02:45.955 --> 01:02:48.355
<v Speaker 1>that the the job schedule will actually run

01:02:48.355 --> 01:02:50.515
<v Speaker 1>all of these functions concurrently,

01:02:51.155 --> 01:02:53.600
<v Speaker 1>and then all of their results will be

01:02:53.600 --> 01:02:55.520
<v Speaker 1>put into that request state.

01:02:55.600 --> 01:02:57.840
<v Speaker 1>So if you wanted to do parallel processing,

01:02:57.840 --> 01:02:59.680
<v Speaker 1>if you wanted to, you know, save to

01:02:59.680 --> 01:03:01.920
<v Speaker 1>a database and a cache simultaneously,

01:03:01.920 --> 01:03:04.000
<v Speaker 1>these are the kinds of things that you

01:03:04.000 --> 01:03:05.840
<v Speaker 1>can do yeah. With a function group.

01:03:06.865 --> 01:03:09.025
<v Speaker 1>And it's really nice because

01:03:09.265 --> 01:03:10.865
<v Speaker 1>you, as the developer,

01:03:11.105 --> 01:03:13.025
<v Speaker 1>you don't need to do any of the

01:03:13.025 --> 01:03:14.705
<v Speaker 1>logic that you would normally need to do

01:03:14.705 --> 01:03:16.705
<v Speaker 1>to run these things concurrently. You know, if

01:03:16.705 --> 01:03:17.665
<v Speaker 1>you were a Go developer,

01:03:18.200 --> 01:03:19.640
<v Speaker 1>you would have to be dealing with Go

01:03:19.640 --> 01:03:21.240
<v Speaker 1>routines. You'd have to be dealing with channels.

01:03:21.240 --> 01:03:22.760
<v Speaker 1>You'd have to be making sure that they

01:03:22.760 --> 01:03:24.520
<v Speaker 1>all blah blah blah succeeding.

01:03:24.840 --> 01:03:26.120
<v Speaker 1>But with this, we just say, hey. We

01:03:26.120 --> 01:03:28.040
<v Speaker 1>wanna run these functions in parallel, and the

01:03:28.040 --> 01:03:29.160
<v Speaker 1>job scheduler

01:03:29.160 --> 01:03:30.600
<v Speaker 1>will figure it out.

01:03:31.800 --> 01:03:32.200
<v Speaker 1>So,

01:03:32.680 --> 01:03:33.320
<v Speaker 1>you know,

01:03:33.880 --> 01:03:35.625
<v Speaker 1>we don't necessarily have to run this because

01:03:35.625 --> 01:03:37.225
<v Speaker 1>it's not gonna look any different from an

01:03:37.225 --> 01:03:38.585
<v Speaker 1>output perspective, but,

01:03:39.065 --> 01:03:41.145
<v Speaker 1>you know, I I do wanna just kinda

01:03:41.145 --> 01:03:42.345
<v Speaker 1>point out that these are some of the

01:03:42.345 --> 01:03:44.025
<v Speaker 1>things that we can

01:03:44.345 --> 01:03:45.385
<v Speaker 1>do with it.

01:03:46.185 --> 01:03:48.540
<v Speaker 0>So there's that I think there's two questions

01:03:48.540 --> 01:03:49.740
<v Speaker 0>in my mind right now.

01:03:50.220 --> 01:03:51.820
<v Speaker 0>Now I'll start with the first one and

01:03:51.820 --> 01:03:53.660
<v Speaker 0>then I'll go into well, I guess it

01:03:53.660 --> 01:03:55.020
<v Speaker 0>is my they're still in my mind. So

01:03:55.020 --> 01:03:57.020
<v Speaker 0>the first question is

01:03:57.580 --> 01:03:58.540
<v Speaker 0>is the

01:03:59.095 --> 01:04:01.415
<v Speaker 0>the base we are passing back as as

01:04:01.415 --> 01:04:03.975
<v Speaker 0>the state of each of these individual functions.

01:04:03.975 --> 01:04:05.895
<v Speaker 0>The only way to transfer state between the

01:04:05.895 --> 01:04:07.655
<v Speaker 0>functions and then I guess the example I'm

01:04:07.655 --> 01:04:09.175
<v Speaker 0>thinking there is if I wanted to do

01:04:09.175 --> 01:04:11.335
<v Speaker 0>any form of image manipulation, would I have

01:04:11.335 --> 01:04:12.935
<v Speaker 0>to store those bytes of memory and return

01:04:12.935 --> 01:04:14.430
<v Speaker 0>them or can I to have it like

01:04:14.430 --> 01:04:16.830
<v Speaker 0>shared disk across the invocations at all?

01:04:18.349 --> 01:04:19.070
<v Speaker 1>So

01:04:19.630 --> 01:04:20.350
<v Speaker 1>currently,

01:04:20.510 --> 01:04:22.350
<v Speaker 1>you can't access the disk.

01:04:22.510 --> 01:04:25.230
<v Speaker 1>That is something that I will be adding

01:04:25.470 --> 01:04:29.135
<v Speaker 1>once I can get Wazee working reliably across

01:04:29.135 --> 01:04:31.135
<v Speaker 1>both of the Rust and Swift.

01:04:32.095 --> 01:04:34.655
<v Speaker 1>But what you can access as a shared

01:04:34.655 --> 01:04:35.935
<v Speaker 1>resource is a cache.

01:04:37.055 --> 01:04:40.175
<v Speaker 1>So there is a suborbital API for accessing

01:04:40.175 --> 01:04:42.450
<v Speaker 1>a cache. If you want to connect to

01:04:42.450 --> 01:04:44.850
<v Speaker 1>Redis or something like that, you can do

01:04:44.850 --> 01:04:45.330
<v Speaker 1>so.

01:04:46.610 --> 01:04:50.130
<v Speaker 1>I do plan on adding more APIs very

01:04:50.130 --> 01:04:52.050
<v Speaker 1>soon, which will let you access more resources

01:04:52.050 --> 01:04:54.065
<v Speaker 1>like that. Like, one of the things I

01:04:54.065 --> 01:04:56.704
<v Speaker 1>would like to do is give access to,

01:04:56.704 --> 01:04:58.385
<v Speaker 1>you know, static files. If you want to

01:04:58.385 --> 01:04:59.105
<v Speaker 1>serve,

01:04:59.265 --> 01:05:00.785
<v Speaker 1>you know, a static website,

01:05:01.424 --> 01:05:03.585
<v Speaker 1>you should be able to include those files

01:05:03.905 --> 01:05:06.305
<v Speaker 1>into the bundle and allow,

01:05:06.305 --> 01:05:08.464
<v Speaker 1>you know, your runnables to access those files.

01:05:09.400 --> 01:05:11.960
<v Speaker 1>So these kinds of things, you know, accessing

01:05:11.960 --> 01:05:15.000
<v Speaker 1>shared disk, accessing files, connecting

01:05:15.400 --> 01:05:17.960
<v Speaker 1>to more things outside of the modules,

01:05:18.040 --> 01:05:19.560
<v Speaker 1>these are all things that I'm designing right

01:05:19.560 --> 01:05:21.480
<v Speaker 1>now and I'm working on building up.

01:05:23.405 --> 01:05:24.925
<v Speaker 1>But, you know, they each have to be

01:05:24.925 --> 01:05:27.085
<v Speaker 1>built individually and they all have their own

01:05:27.085 --> 01:05:28.925
<v Speaker 1>security concerns and whatnot. So I'm trying to

01:05:28.925 --> 01:05:30.285
<v Speaker 1>be a little extra careful,

01:05:30.605 --> 01:05:31.965
<v Speaker 1>with some of those things to make sure

01:05:31.965 --> 01:05:33.805
<v Speaker 1>that I'm building them in a way that,

01:05:33.805 --> 01:05:35.484
<v Speaker 1>you know, won't let you screw it up.

01:05:37.140 --> 01:05:39.940
<v Speaker 0>Alright. And my second question is

01:05:40.500 --> 01:05:42.900
<v Speaker 0>like we're now in a stage with us,

01:05:43.380 --> 01:05:45.700
<v Speaker 0>you know, directive failed that we have. Our

01:05:45.700 --> 01:05:47.220
<v Speaker 0>first step, we then have a group which

01:05:47.220 --> 01:05:49.220
<v Speaker 0>runs three in parallel followed by our final

01:05:49.220 --> 01:05:50.740
<v Speaker 0>step which is a translator.

01:05:52.005 --> 01:05:53.125
<v Speaker 0>If I were to

01:05:55.045 --> 01:05:57.045
<v Speaker 0>run this like so, sorry. Let me try

01:05:57.045 --> 01:05:58.965
<v Speaker 0>and articulate this question in a way that

01:05:59.125 --> 01:06:01.365
<v Speaker 0>makes sense. But I only see

01:06:02.325 --> 01:06:04.820
<v Speaker 0>the output from the final step. If I

01:06:04.820 --> 01:06:06.820
<v Speaker 0>wanted to debug something in the middle, is

01:06:06.820 --> 01:06:07.700
<v Speaker 0>there a

01:06:07.860 --> 01:06:09.860
<v Speaker 0>pragmatic way of handling that at the moment?

01:06:10.820 --> 01:06:13.060
<v Speaker 1>Yeah. So there's two things that you can

01:06:13.060 --> 01:06:13.540
<v Speaker 1>do.

01:06:14.420 --> 01:06:16.420
<v Speaker 1>One of them is that the suborbital

01:06:16.500 --> 01:06:17.220
<v Speaker 1>package,

01:06:17.380 --> 01:06:19.300
<v Speaker 1>provides some logging functions.

01:06:19.755 --> 01:06:21.674
<v Speaker 1>So if we want, we can go back

01:06:21.674 --> 01:06:24.154
<v Speaker 1>to, you know, the translator, for example, and

01:06:24.154 --> 01:06:25.355
<v Speaker 1>we can add a little bit of logging

01:06:25.355 --> 01:06:27.194
<v Speaker 1>if you like. And then the other,

01:06:27.755 --> 01:06:30.075
<v Speaker 1>the other thing is you can control which

01:06:30.075 --> 01:06:31.515
<v Speaker 1>function's output

01:06:31.595 --> 01:06:33.194
<v Speaker 1>is used as the response,

01:06:33.434 --> 01:06:35.290
<v Speaker 1>and we can do whichever of those two

01:06:35.290 --> 01:06:36.570
<v Speaker 1>things you wanna do first.

01:06:39.130 --> 01:06:40.970
<v Speaker 1>So if you it just import the log

01:06:40.970 --> 01:06:41.690
<v Speaker 1>module.

01:06:43.849 --> 01:06:45.770
<v Speaker 1>Then, you know, if you want, yeah, we

01:06:45.770 --> 01:06:47.530
<v Speaker 1>can say log colon colon info,

01:06:48.395 --> 01:06:51.035
<v Speaker 1>and then just pass in you'll have to

01:06:51.035 --> 01:06:53.515
<v Speaker 1>do an as str on that. Or yeah.

01:06:53.515 --> 01:06:54.395
<v Speaker 1>That works fine.

01:06:54.795 --> 01:06:55.755
<v Speaker 1>So now

01:06:56.395 --> 01:06:57.275
<v Speaker 1>you can

01:06:57.835 --> 01:07:00.155
<v Speaker 1>we can run that and see that being

01:07:00.155 --> 01:07:00.555
<v Speaker 1>logged.

01:07:04.900 --> 01:07:06.260
<v Speaker 1>Right off the bat here.

01:07:08.579 --> 01:07:10.660
<v Speaker 1>You can see how much faster the data

01:07:10.660 --> 01:07:12.339
<v Speaker 1>of full chain is than the Docker one.

01:07:13.295 --> 01:07:14.815
<v Speaker 1>So then somewhere in the middle yeah. You

01:07:14.815 --> 01:07:16.975
<v Speaker 1>can see stuff and things popping out there.

01:07:19.215 --> 01:07:20.255
<v Speaker 1>And so

01:07:21.135 --> 01:07:22.735
<v Speaker 1>the other thing that you can do is

01:07:22.735 --> 01:07:24.095
<v Speaker 1>if you want to take the output from

01:07:24.095 --> 01:07:25.055
<v Speaker 1>a particular function,

01:07:26.190 --> 01:07:27.950
<v Speaker 1>we can head back to the directive,

01:07:29.550 --> 01:07:31.710
<v Speaker 1>and you can use the response

01:07:31.710 --> 01:07:32.430
<v Speaker 1>option.

01:07:32.590 --> 01:07:34.350
<v Speaker 1>So right at the end of the handler,

01:07:34.590 --> 01:07:37.150
<v Speaker 1>the same level as the steps

01:07:37.150 --> 01:07:37.790
<v Speaker 1>key,

01:07:40.715 --> 01:07:42.475
<v Speaker 1>We can go right to the very end.

01:07:43.035 --> 01:07:44.955
<v Speaker 1>Or yeah. It it doesn't matter. So if

01:07:44.955 --> 01:07:46.715
<v Speaker 1>you just say response

01:07:46.715 --> 01:07:47.675
<v Speaker 1>colon

01:07:48.635 --> 01:07:49.915
<v Speaker 1>and then choose one of the names. So

01:07:49.915 --> 01:07:51.835
<v Speaker 1>if you wanted to do thingy

01:07:51.915 --> 01:07:53.035
<v Speaker 1>as the

01:07:53.275 --> 01:07:55.829
<v Speaker 1>the the output, you can actually tell it

01:07:55.829 --> 01:07:57.430
<v Speaker 1>this is the one that I wanna take

01:07:57.430 --> 01:07:59.589
<v Speaker 1>the output from to actually respond to the

01:07:59.589 --> 01:08:00.710
<v Speaker 1>request with.

01:08:04.789 --> 01:08:06.230
<v Speaker 1>So this one will probably just be that

01:08:06.230 --> 01:08:09.990
<v Speaker 1>default, once again, the, yeah, the summary of

01:08:08.895 --> 01:08:10.975
<v Speaker 1>request because we didn't actually change the thingy

01:08:10.975 --> 01:08:11.935
<v Speaker 1>on the phone.

01:08:12.415 --> 01:08:13.695
<v Speaker 0>Alright. Cool.

01:08:14.415 --> 01:08:16.415
<v Speaker 1>Yeah. And this helps that, like, if the

01:08:16.415 --> 01:08:18.415
<v Speaker 1>if the last step in the in the

01:08:18.415 --> 01:08:19.054
<v Speaker 1>chain

01:08:19.375 --> 01:08:22.095
<v Speaker 1>is a group, right, that there's no logical

01:08:22.095 --> 01:08:24.015
<v Speaker 1>way to choose between the functions in that

01:08:24.015 --> 01:08:27.080
<v Speaker 1>group. And actually, Suborbital will error out if

01:08:27.080 --> 01:08:29.159
<v Speaker 1>you just have a group as the last

01:08:29.159 --> 01:08:31.319
<v Speaker 1>step. It will tell you that you must

01:08:31.479 --> 01:08:32.920
<v Speaker 1>give a response

01:08:33.159 --> 01:08:36.119
<v Speaker 1>field to to make sure that it's unambiguous.

01:08:38.119 --> 01:08:39.239
<v Speaker 0>Okay. Is,

01:08:39.735 --> 01:08:42.695
<v Speaker 0>as there are docs on this directive file

01:08:42.695 --> 01:08:44.774
<v Speaker 0>and all the things that we can

01:08:45.575 --> 01:08:46.935
<v Speaker 1>Yeah. Absolutely.

01:08:47.255 --> 01:08:48.535
<v Speaker 0>Because like one of the things popping into

01:08:48.535 --> 01:08:50.695
<v Speaker 0>my head and probably may not exist yet

01:08:50.695 --> 01:08:51.654
<v Speaker 0>would be like,

01:08:52.215 --> 01:08:55.380
<v Speaker 0>you know, flow constructs within here. Like if

01:08:55.380 --> 01:08:56.260
<v Speaker 0>I could do

01:08:56.660 --> 01:08:57.699
<v Speaker 0>for each

01:08:57.859 --> 01:09:00.260
<v Speaker 0>and then tell it like it was from

01:09:00.260 --> 01:09:02.340
<v Speaker 0>whatever I got from hello world,

01:09:03.460 --> 01:09:04.979
<v Speaker 0>you know, maybe it returns

01:09:05.300 --> 01:09:08.100
<v Speaker 0>like a the vector base have like something

01:09:08.100 --> 01:09:09.824
<v Speaker 0>I could split on and I can say

01:09:09.824 --> 01:09:11.744
<v Speaker 0>split on a comma like you know where

01:09:11.744 --> 01:09:13.664
<v Speaker 0>I could actually build for loops with obviously

01:09:13.664 --> 01:09:14.864
<v Speaker 0>I can do that and

01:09:15.264 --> 01:09:17.664
<v Speaker 0>the translator lib. Rs but to build that

01:09:17.664 --> 01:09:19.425
<v Speaker 0>into a directive I think would be really

01:09:19.425 --> 01:09:21.744
<v Speaker 0>cool and of course maybe like Yeah. Conditionals

01:09:21.744 --> 01:09:24.729
<v Speaker 0>too. So only if this far is defined

01:09:24.729 --> 01:09:26.729
<v Speaker 0>or whatever and like really starting to build

01:09:26.729 --> 01:09:27.850
<v Speaker 0>out complex.

01:09:29.290 --> 01:09:31.050
<v Speaker 0>I guess workflow is kind of what I'm

01:09:31.050 --> 01:09:31.930
<v Speaker 0>thinking up here.

01:09:32.410 --> 01:09:34.810
<v Speaker 1>Absolutely. That's definitely in the plan.

01:09:35.290 --> 01:09:36.810
<v Speaker 1>The the four h one particularly,

01:09:37.215 --> 01:09:39.774
<v Speaker 1>I was planning on doing that very soon.

01:09:39.774 --> 01:09:40.895
<v Speaker 1>I was hoping to get it done for

01:09:40.895 --> 01:09:42.734
<v Speaker 1>this livestream, but I haven't quite gotten that

01:09:42.734 --> 01:09:45.455
<v Speaker 1>part finished yet. But absolutely. Plus I'm identifying

01:09:45.455 --> 01:09:47.455
<v Speaker 0>areas of the project where I can hopefully

01:09:47.455 --> 01:09:49.215
<v Speaker 0>come and help out. Because I I mean,

01:09:49.215 --> 01:09:51.290
<v Speaker 0>I can see loads of use cases for

01:09:51.290 --> 01:09:52.890
<v Speaker 0>a tool like this. Okay. You know, I

01:09:52.890 --> 01:09:54.730
<v Speaker 0>like building the dent driven applications

01:09:54.890 --> 01:09:56.890
<v Speaker 0>and this is like the perfect thing where

01:09:56.890 --> 01:10:00.090
<v Speaker 0>I could just build out all those functions

01:10:00.090 --> 01:10:02.090
<v Speaker 0>in isolation and then chain them together with

01:10:02.090 --> 01:10:03.975
<v Speaker 0>the composition. It seems like a really powerful

01:10:03.975 --> 01:10:05.895
<v Speaker 0>tool. I'm very impressed. Yeah.

01:10:06.295 --> 01:10:08.535
<v Speaker 1>Thank you very much. Yeah. It's the

01:10:09.175 --> 01:10:10.775
<v Speaker 1>this is one of the things where I

01:10:10.775 --> 01:10:13.175
<v Speaker 1>was I was I was developing, you know,

01:10:13.175 --> 01:10:16.135
<v Speaker 1>the three building blocks. Right? The hive, vector,

01:10:16.135 --> 01:10:16.615
<v Speaker 1>and grav.

01:10:17.140 --> 01:10:17.699
<v Speaker 1>And

01:10:18.020 --> 01:10:21.139
<v Speaker 1>this this idea, the idea of the directive,

01:10:21.300 --> 01:10:23.540
<v Speaker 1>when that was when I kind of

01:10:24.020 --> 01:10:25.940
<v Speaker 1>thought of this concept,

01:10:26.100 --> 01:10:27.540
<v Speaker 1>that was when it really clicked for me

01:10:27.540 --> 01:10:29.780
<v Speaker 1>of what Atmo was going to be.

01:10:31.054 --> 01:10:32.815
<v Speaker 1>I I thought it was just gonna be,

01:10:32.815 --> 01:10:35.135
<v Speaker 1>you know, you just write code and you

01:10:35.135 --> 01:10:37.695
<v Speaker 1>have to call the functions directly with some

01:10:37.695 --> 01:10:40.735
<v Speaker 1>Go code or something. And that felt fine,

01:10:40.815 --> 01:10:42.894
<v Speaker 1>but I wasn't super excited about it.

01:10:43.295 --> 01:10:45.620
<v Speaker 1>And then when this this idea of the

01:10:45.780 --> 01:10:47.620
<v Speaker 1>of the directive

01:10:47.620 --> 01:10:49.940
<v Speaker 1>came up in my head, that's when I

01:10:49.940 --> 01:10:51.860
<v Speaker 1>started to get really excited. And that's the

01:10:51.860 --> 01:10:54.420
<v Speaker 1>day that I created you know, I actually

01:10:54.420 --> 01:10:56.820
<v Speaker 1>started the Atmo repository

01:10:56.820 --> 01:10:58.580
<v Speaker 1>and started actually building it because

01:10:59.055 --> 01:11:00.335
<v Speaker 1>that that was the thing that got me

01:11:00.335 --> 01:11:01.135
<v Speaker 1>super excited.

01:11:01.855 --> 01:11:03.135
<v Speaker 0>Sweet. Excellent.

01:11:04.015 --> 01:11:05.695
<v Speaker 0>So we have another

01:11:06.175 --> 01:11:08.895
<v Speaker 0>comment on my theme for Kelly Jackson. That's

01:11:08.895 --> 01:11:10.415
<v Speaker 0>not what it looks like on mine. Jump

01:11:10.415 --> 01:11:12.495
<v Speaker 0>in the Discord. I'll chat you there. We're

01:11:12.495 --> 01:11:13.695
<v Speaker 0>not gonna be able to live debug that

01:11:13.695 --> 01:11:13.935
<v Speaker 0>here.

01:11:14.949 --> 01:11:17.190
<v Speaker 0>Okay. So we've covered sorry for the segue

01:11:17.190 --> 01:11:19.190
<v Speaker 0>there. We've covered a fair bit of this.

01:11:19.190 --> 01:11:21.510
<v Speaker 0>I'm excited about this tool. I believe you've

01:11:21.510 --> 01:11:23.190
<v Speaker 0>got a few more advanced demos that you

01:11:23.190 --> 01:11:24.869
<v Speaker 0>may wanna show us.

01:11:25.670 --> 01:11:27.909
<v Speaker 1>Sure. Yeah. I will show off, you know,

01:11:27.909 --> 01:11:31.614
<v Speaker 1>one or two more bits of the, runnable

01:11:31.614 --> 01:11:32.494
<v Speaker 1>API.

01:11:33.614 --> 01:11:35.935
<v Speaker 1>Let me make sure. Let's get that screen

01:11:35.935 --> 01:11:37.775
<v Speaker 1>share up and running again.

01:11:39.775 --> 01:11:40.414
<v Speaker 1>Cool.

01:11:41.775 --> 01:11:43.780
<v Speaker 1>Just make sure I'm in the right is

01:11:43.780 --> 01:11:45.460
<v Speaker 1>that font big enough, do think? Or you

01:11:45.460 --> 01:11:46.340
<v Speaker 1>can make it a bit I mean, it

01:11:46.340 --> 01:11:47.540
<v Speaker 0>wouldn't hurt to go in a couple more

01:11:47.540 --> 01:11:50.500
<v Speaker 0>for sure, but it's it's readable. Yeah. Yeah.

01:11:51.540 --> 01:11:52.260
<v Speaker 1>Okay.

01:11:53.699 --> 01:11:56.020
<v Speaker 1>Okay. Cool. So

01:11:55.755 --> 01:11:57.275
<v Speaker 1>we're going to go into

01:11:58.074 --> 01:11:59.994
<v Speaker 1>I have my own important API,

01:12:00.235 --> 01:12:00.954
<v Speaker 1>of course.

01:12:02.955 --> 01:12:05.275
<v Speaker 1>So, of course, that opens in the wrong

01:12:05.275 --> 01:12:06.074
<v Speaker 1>screen.

01:12:06.795 --> 01:12:09.675
<v Speaker 1>Alright. So I've got a runnable here

01:12:09.990 --> 01:12:11.990
<v Speaker 1>that this is this is available in the

01:12:11.990 --> 01:12:13.910
<v Speaker 1>Suborbital GitHub if anybody wants to take a

01:12:13.910 --> 01:12:15.430
<v Speaker 1>look at this one. Could you zoom in

01:12:15.430 --> 01:12:17.030
<v Speaker 0>on that a little bit as well, please?

01:12:17.430 --> 01:12:18.550
<v Speaker 1>Yeah. Absolutely.

01:12:19.030 --> 01:12:21.430
<v Speaker 1>I'll get rid of this bottom and just

01:12:21.430 --> 01:12:23.990
<v Speaker 1>make this smaller so that I can really

01:12:23.990 --> 01:12:24.470
<v Speaker 1>see it. Okay.

01:12:25.175 --> 01:12:26.455
<v Speaker 1>So

01:12:26.695 --> 01:12:29.335
<v Speaker 1>so, yes, this is available in the Suborbital

01:12:29.335 --> 01:12:31.495
<v Speaker 1>GitHub. It's called important API. That's what you

01:12:31.495 --> 01:12:32.535
<v Speaker 1>know, it's it's very,

01:12:33.015 --> 01:12:33.975
<v Speaker 1>very useful.

01:12:34.855 --> 01:12:37.255
<v Speaker 1>And this it's designed to show off more

01:12:37.255 --> 01:12:39.530
<v Speaker 1>of the APIs that are available. So, you

01:12:39.530 --> 01:12:39.930
<v Speaker 1>know,

01:12:40.570 --> 01:12:43.690
<v Speaker 1>we've we've looked already at, like, RAC, and

01:12:43.690 --> 01:12:45.610
<v Speaker 1>we looked at log and util,

01:12:46.010 --> 01:12:47.930
<v Speaker 1>but there's one more that I wanna show

01:12:47.930 --> 01:12:49.530
<v Speaker 1>off, which is HTTP.

01:12:50.090 --> 01:12:50.730
<v Speaker 1>So

01:12:51.690 --> 01:12:54.410
<v Speaker 1>by default, you know, WebAssembly can't access the

01:12:54.410 --> 01:12:54.730
<v Speaker 1>network.

01:12:55.235 --> 01:12:57.794
<v Speaker 1>And in fact, even the Wazi specification,

01:12:58.514 --> 01:13:01.954
<v Speaker 1>you know, it still doesn't quite give full

01:13:01.954 --> 01:13:05.074
<v Speaker 1>access to networks. There's some things

01:13:05.315 --> 01:13:06.994
<v Speaker 1>coming up. There are some things currently in

01:13:06.994 --> 01:13:09.989
<v Speaker 1>development. There are some limited things available already.

01:13:10.389 --> 01:13:13.429
<v Speaker 1>But I wasn't fully happy with it, and

01:13:13.429 --> 01:13:15.909
<v Speaker 1>I wanted to build my kind of own

01:13:15.909 --> 01:13:16.869
<v Speaker 1>version of it.

01:13:17.349 --> 01:13:20.389
<v Speaker 1>So the Suborbital library provides this HTTP,

01:13:20.869 --> 01:13:21.270
<v Speaker 1>module.

01:13:21.895 --> 01:13:23.415
<v Speaker 1>And what it lets us do is make

01:13:23.415 --> 01:13:24.695
<v Speaker 1>HTTP requests.

01:13:25.255 --> 01:13:26.055
<v Speaker 1>So

01:13:26.215 --> 01:13:27.815
<v Speaker 1>I've got this runnable here,

01:13:28.455 --> 01:13:31.415
<v Speaker 1>and all it's really doing is it's using,

01:13:31.415 --> 01:13:33.015
<v Speaker 1>you know, the the rec,

01:13:33.175 --> 01:13:34.935
<v Speaker 1>module that we've already looked at. You know,

01:13:34.935 --> 01:13:37.050
<v Speaker 1>it's checking the URL param just like we

01:13:37.050 --> 01:13:38.250
<v Speaker 1>did a minute ago.

01:13:38.730 --> 01:13:40.890
<v Speaker 1>And what it then does is it's gonna

01:13:40.890 --> 01:13:42.570
<v Speaker 1>go hit the GitHub API,

01:13:42.570 --> 01:13:44.730
<v Speaker 1>and it's just gonna get the details of

01:13:44.730 --> 01:13:48.505
<v Speaker 1>whatever repository we pass in, as the the

01:13:48.505 --> 01:13:49.464
<v Speaker 1>fields

01:13:49.465 --> 01:13:51.064
<v Speaker 1>in the in the URL.

01:13:51.704 --> 01:13:53.864
<v Speaker 1>And then we're gonna do something, you know,

01:13:54.025 --> 01:13:55.624
<v Speaker 1>pretty pretty standard.

01:13:57.065 --> 01:13:59.065
<v Speaker 1>You know, we we access the field directly

01:13:59.065 --> 01:14:01.465
<v Speaker 1>in in the example that we did, but

01:14:01.465 --> 01:14:03.940
<v Speaker 1>I'm going to just show that this can

01:14:03.940 --> 01:14:05.619
<v Speaker 1>be a regular Rust program. Right? You can

01:14:05.619 --> 01:14:09.059
<v Speaker 1>use SerDay and you can deserialize

01:14:09.059 --> 01:14:10.980
<v Speaker 1>JSON and you can do whatever you want

01:14:10.980 --> 01:14:13.540
<v Speaker 1>here. So we are gonna take the response

01:14:13.540 --> 01:14:16.465
<v Speaker 1>from that GitHub API request. We are going

01:14:16.465 --> 01:14:18.945
<v Speaker 1>to create just a a summary of,

01:14:19.265 --> 01:14:22.225
<v Speaker 1>the stargazers, so, like, the star count on

01:14:22.225 --> 01:14:24.305
<v Speaker 1>that repo, and then that's what we're gonna

01:14:24.305 --> 01:14:24.945
<v Speaker 1>return.

01:14:26.225 --> 01:14:27.824
<v Speaker 1>So I'm going to,

01:14:28.945 --> 01:14:29.585
<v Speaker 1>build this.

01:14:32.280 --> 01:14:33.400
<v Speaker 1>Not build.

01:14:34.360 --> 01:14:36.040
<v Speaker 1>We'll give bundle.

01:14:37.240 --> 01:14:37.960
<v Speaker 1>And,

01:14:38.680 --> 01:14:40.680
<v Speaker 1>obviously, I've built this once already because that

01:14:40.680 --> 01:14:44.600
<v Speaker 1>was super fast. And then we're going to

01:14:43.485 --> 01:14:44.284
<v Speaker 1>start

01:14:44.364 --> 01:14:46.284
<v Speaker 1>this up in my other terminal here.

01:14:46.925 --> 01:14:48.124
<v Speaker 1>Suborbital dev.

01:14:49.405 --> 01:14:50.045
<v Speaker 1>And

01:14:51.244 --> 01:14:54.045
<v Speaker 1>wow. It really oh, something's already listening

01:14:54.205 --> 01:14:56.284
<v Speaker 1>on that port, apparently.

01:14:57.165 --> 01:14:59.610
<v Speaker 1>What do I have running? Apparently, I already

01:14:59.610 --> 01:15:00.650
<v Speaker 1>have one running.

01:15:02.970 --> 01:15:04.570
<v Speaker 1>Let's try this again.

01:15:05.290 --> 01:15:06.170
<v Speaker 1>There we go.

01:15:06.490 --> 01:15:08.090
<v Speaker 1>I'm gonna clear

01:15:08.090 --> 01:15:10.489
<v Speaker 1>this. I hope that last one wasn't important.

01:15:11.610 --> 01:15:13.210
<v Speaker 1>No. I'm pretty sure that was just me

01:15:13.210 --> 01:15:14.250
<v Speaker 1>preparing for this demo.

01:15:15.075 --> 01:15:16.595
<v Speaker 1>Right. So you can see, you know, we're

01:15:16.595 --> 01:15:18.114
<v Speaker 1>mounting this this

01:15:18.355 --> 01:15:19.155
<v Speaker 1>route.

01:15:19.395 --> 01:15:20.275
<v Speaker 1>It has a

01:15:20.755 --> 01:15:22.835
<v Speaker 1>different style of wildcard that lets us pass

01:15:22.835 --> 01:15:24.675
<v Speaker 1>any kind of path that we want. And

01:15:24.675 --> 01:15:28.199
<v Speaker 1>so we're gonna hit local host eighty eighty

01:15:28.199 --> 01:15:29.719
<v Speaker 1>slash stars,

01:15:29.719 --> 01:15:32.999
<v Speaker 1>and we'll do, like, Suborbital ATMO, for example.

01:15:33.320 --> 01:15:35.479
<v Speaker 1>And as soon as we hit that,

01:15:35.880 --> 01:15:38.760
<v Speaker 1>it is going to execute that g h

01:15:38.760 --> 01:15:39.639
<v Speaker 1>stars function,

01:15:40.305 --> 01:15:42.545
<v Speaker 1>and then it's gonna return to us information

01:15:42.785 --> 01:15:45.745
<v Speaker 1>from that GitHub API. And we can see

01:15:45.745 --> 01:15:46.705
<v Speaker 1>that it did,

01:15:47.185 --> 01:15:49.905
<v Speaker 1>you know, do some logging, fetching stars for

01:15:49.905 --> 01:15:51.265
<v Speaker 1>Suborbital ATMO,

01:15:51.665 --> 01:15:53.265
<v Speaker 1>and it did all of the JSON parsing

01:15:53.265 --> 01:15:55.185
<v Speaker 1>with SerDay, etcetera, etcetera.

01:15:56.450 --> 01:15:58.770
<v Speaker 1>And so, you know, this is just one

01:15:58.770 --> 01:15:59.890
<v Speaker 1>of the other APIs.

01:15:59.970 --> 01:16:02.050
<v Speaker 1>And then the last one, that we can

01:16:02.050 --> 01:16:04.850
<v Speaker 1>just take a quick look at is, the

01:16:04.850 --> 01:16:07.730
<v Speaker 1>ability to access the cache. So say I

01:16:07.730 --> 01:16:08.690
<v Speaker 1>wanted to,

01:16:09.410 --> 01:16:12.375
<v Speaker 1>you know, cache this this API response.

01:16:12.695 --> 01:16:13.895
<v Speaker 1>There is one more,

01:16:14.375 --> 01:16:16.135
<v Speaker 1>here that we can access. Probably should make

01:16:16.135 --> 01:16:17.094
<v Speaker 1>it the first one.

01:16:18.535 --> 01:16:20.135
<v Speaker 1>The Suborbital cache,

01:16:20.855 --> 01:16:22.535
<v Speaker 1>one. So we can say

01:16:22.930 --> 01:16:23.810
<v Speaker 1>cache

01:16:23.810 --> 01:16:24.530
<v Speaker 1>set.

01:16:24.770 --> 01:16:26.369
<v Speaker 1>That is not colon.

01:16:27.330 --> 01:16:29.250
<v Speaker 1>And then we can say we wanna set,

01:16:29.250 --> 01:16:29.570
<v Speaker 1>you know

01:16:31.090 --> 01:16:32.930
<v Speaker 1>we'll call it the we'll say we'll put

01:16:32.930 --> 01:16:34.930
<v Speaker 1>a repo as the key because we want

01:16:34.930 --> 01:16:36.930
<v Speaker 1>it to be specific to the repo that

01:16:36.930 --> 01:16:37.490
<v Speaker 1>we are

01:16:39.034 --> 01:16:40.235
<v Speaker 1>requesting for.

01:16:40.395 --> 01:16:41.994
<v Speaker 1>And then the value can be,

01:16:42.395 --> 01:16:44.074
<v Speaker 1>those repo details,

01:16:44.235 --> 01:16:45.994
<v Speaker 1>and then we'll set the TTL to zero

01:16:45.994 --> 01:16:47.594
<v Speaker 1>so it never dies.

01:16:48.474 --> 01:16:48.954
<v Speaker 1>And

01:16:49.435 --> 01:16:50.074
<v Speaker 1>so

01:16:50.315 --> 01:16:51.114
<v Speaker 1>then

01:16:51.514 --> 01:16:53.409
<v Speaker 1>oh, this is gonna yell at me, isn't

01:16:53.409 --> 01:16:55.489
<v Speaker 1>it? Borrower group value. And we need to

01:16:55.489 --> 01:16:57.489
<v Speaker 1>do, I think, as owned?

01:16:57.969 --> 01:16:58.610
<v Speaker 1>No.

01:16:58.770 --> 01:17:00.610
<v Speaker 1>Two clone. Yeah. Okay.

01:17:00.849 --> 01:17:02.369
<v Speaker 1>Oh, yeah. Clone. Yes.

01:17:02.690 --> 01:17:04.929
<v Speaker 1>See, I'm getting a lesson right here on

01:17:04.929 --> 01:17:06.369
<v Speaker 1>some Rust best practices.

01:17:08.105 --> 01:17:10.745
<v Speaker 1>So so then, you know, the the nice

01:17:10.745 --> 01:17:13.784
<v Speaker 1>thing about WebAssembly and and Atmo is that

01:17:14.025 --> 01:17:15.945
<v Speaker 1>you as the developer, you don't need to

01:17:15.945 --> 01:17:16.585
<v Speaker 1>care

01:17:16.824 --> 01:17:19.145
<v Speaker 1>about the cache, what it is, what it's

01:17:19.145 --> 01:17:21.304
<v Speaker 1>connected to, you know, how it's configured.

01:17:21.850 --> 01:17:23.530
<v Speaker 1>The cache is bound

01:17:23.930 --> 01:17:25.210
<v Speaker 1>at runtime.

01:17:25.770 --> 01:17:29.210
<v Speaker 1>And so all of your functions can use

01:17:29.210 --> 01:17:30.650
<v Speaker 1>this API.

01:17:31.050 --> 01:17:33.450
<v Speaker 1>And then maybe in local development, it's using

01:17:33.450 --> 01:17:35.770
<v Speaker 1>an in memory cache, but then in production,

01:17:35.770 --> 01:17:38.485
<v Speaker 1>it could use Redis or Memcache or whatever.

01:17:38.885 --> 01:17:40.485
<v Speaker 1>And you as a developer don't need to

01:17:40.485 --> 01:17:43.205
<v Speaker 1>care. You just bind to this this API,

01:17:43.605 --> 01:17:46.804
<v Speaker 1>and it will figure itself out at runtime.

01:17:47.845 --> 01:17:49.285
<v Speaker 1>So, yeah, those are just a couple of

01:17:49.285 --> 01:17:50.005
<v Speaker 1>the extra,

01:17:50.325 --> 01:17:52.245
<v Speaker 1>you know, pieces of functionality that it has.

01:17:53.140 --> 01:17:54.020
<v Speaker 1>More coming.

01:17:54.260 --> 01:17:56.180
<v Speaker 1>The thing that I'm working on right now,

01:17:56.420 --> 01:17:57.300
<v Speaker 1>is

01:17:57.380 --> 01:17:58.739
<v Speaker 1>accessing databases.

01:17:59.380 --> 01:18:01.300
<v Speaker 1>I think that's kind of the last big

01:18:01.300 --> 01:18:01.940
<v Speaker 1>piece

01:18:02.420 --> 01:18:04.420
<v Speaker 1>to really make this,

01:18:05.700 --> 01:18:08.785
<v Speaker 1>usable for the kind of average

01:18:08.785 --> 01:18:10.304
<v Speaker 1>API application,

01:18:10.945 --> 01:18:12.465
<v Speaker 1>access to a cache and access to a

01:18:12.465 --> 01:18:14.305
<v Speaker 1>database. Those are, like, kind of the very

01:18:14.305 --> 01:18:16.225
<v Speaker 1>bare minimum things that you need.

01:18:17.185 --> 01:18:19.105
<v Speaker 1>So, hopefully, within a month or two, there

01:18:19.105 --> 01:18:22.340
<v Speaker 1>will be a, you know, suborbital DB here

01:18:22.340 --> 01:18:23.540
<v Speaker 1>that you can use to

01:18:24.020 --> 01:18:25.860
<v Speaker 1>do some SQL queries or maybe it'll be

01:18:25.860 --> 01:18:28.580
<v Speaker 1>GraphQL. I don't know. We'll we'll see where

01:18:28.580 --> 01:18:30.420
<v Speaker 1>we end up with that.

01:18:31.460 --> 01:18:32.179
<v Speaker 1>Yeah.

01:18:33.700 --> 01:18:35.540
<v Speaker 0>Awesome. Very, very cool. I like it.

01:18:36.555 --> 01:18:39.275
<v Speaker 1>Thanks. So we've we've covered quite

01:18:39.275 --> 01:18:40.875
<v Speaker 0>a lot. I hope that gives the people

01:18:40.875 --> 01:18:43.115
<v Speaker 0>that are watching an idea of you know,

01:18:43.115 --> 01:18:43.995
<v Speaker 0>the project,

01:18:44.235 --> 01:18:45.915
<v Speaker 0>what is use cases are, why you would

01:18:45.915 --> 01:18:47.835
<v Speaker 0>wanna use it. You even give us a

01:18:47.835 --> 01:18:49.515
<v Speaker 0>little bit of extra what's coming kind of

01:18:49.515 --> 01:18:51.755
<v Speaker 0>next day as well, which is also fantastic.

01:18:52.530 --> 01:18:54.530
<v Speaker 0>Is there, I mean we kind of deviated

01:18:54.530 --> 01:18:56.929
<v Speaker 0>right? We paved our own path there instead

01:18:56.929 --> 01:18:58.770
<v Speaker 0>of even using your brand new documentation. I

01:18:58.770 --> 01:19:00.130
<v Speaker 0>feel a bit bad there but I still

01:19:00.130 --> 01:19:01.489
<v Speaker 0>feel that we should have the

01:19:02.050 --> 01:19:04.130
<v Speaker 0>platform, the docs are here for anyone who

01:19:04.130 --> 01:19:05.170
<v Speaker 0>wants to pop in through.

01:19:06.945 --> 01:19:09.025
<v Speaker 0>So I'll leave you with with this then.

01:19:10.065 --> 01:19:12.145
<v Speaker 0>How can people contribute?

01:19:12.145 --> 01:19:13.905
<v Speaker 0>What do you want help with? And is

01:19:13.905 --> 01:19:15.425
<v Speaker 0>there anything else that we haven't covered that

01:19:15.425 --> 01:19:17.905
<v Speaker 0>you wanna just quickly drop in at the

01:19:17.520 --> 01:19:18.159
<v Speaker 0>end there?

01:19:19.280 --> 01:19:23.199
<v Speaker 1>Yeah. Absolutely. So for con for contributions,

01:19:23.840 --> 01:19:25.360
<v Speaker 1>literally anything.

01:19:26.320 --> 01:19:28.880
<v Speaker 1>And I say that with the broadest sense.

01:19:28.880 --> 01:19:29.360
<v Speaker 1>So

01:19:29.920 --> 01:19:31.920
<v Speaker 1>it doesn't matter if you are a Go

01:19:31.920 --> 01:19:33.765
<v Speaker 1>developer. It doesn't matter if you've never used

01:19:33.765 --> 01:19:36.725
<v Speaker 1>WebAssembly before. It doesn't matter, you know, what

01:19:36.725 --> 01:19:38.324
<v Speaker 1>operating system you're using.

01:19:39.364 --> 01:19:40.005
<v Speaker 1>I

01:19:40.405 --> 01:19:41.445
<v Speaker 1>I want

01:19:41.685 --> 01:19:43.765
<v Speaker 1>anybody to be able to contribute to this.

01:19:43.765 --> 01:19:43.925
<v Speaker 1>And,

01:19:45.440 --> 01:19:47.439
<v Speaker 1>you know, whether it's documentation,

01:19:47.440 --> 01:19:49.600
<v Speaker 1>whether it's working on, you know, the CLI,

01:19:49.600 --> 01:19:51.520
<v Speaker 1>whether it's working on the job scheduler, any

01:19:51.520 --> 01:19:52.800
<v Speaker 1>of the components, really,

01:19:54.400 --> 01:19:56.400
<v Speaker 1>I'm I'd love to have people come and

01:19:56.400 --> 01:19:57.920
<v Speaker 1>and help build these things.

01:19:59.360 --> 01:20:01.925
<v Speaker 1>In particular, you know, I like I've said

01:20:01.925 --> 01:20:03.684
<v Speaker 1>more than once here, I'm not a Rust

01:20:03.684 --> 01:20:04.405
<v Speaker 1>developer.

01:20:04.485 --> 01:20:05.925
<v Speaker 1>And we didn't even get a chance to

01:20:05.925 --> 01:20:08.645
<v Speaker 1>dig into the Swift portions of things, bit

01:20:08.804 --> 01:20:10.484
<v Speaker 1>because there is a support

01:20:10.485 --> 01:20:13.045
<v Speaker 1>for for Swift here as well. Swift developers

01:20:13.045 --> 01:20:16.804
<v Speaker 1>as well. You know, anybody with with

01:20:16.360 --> 01:20:17.880
<v Speaker 1>experience in those languages,

01:20:19.080 --> 01:20:21.400
<v Speaker 1>very much appreciated any help that they could

01:20:21.400 --> 01:20:21.880
<v Speaker 1>give.

01:20:22.360 --> 01:20:24.520
<v Speaker 1>And then I want to bring additional language

01:20:24.520 --> 01:20:27.480
<v Speaker 1>support as well. So, you know, c, c

01:20:27.480 --> 01:20:29.385
<v Speaker 1>plus plus developers, anyone with a

01:20:30.264 --> 01:20:31.784
<v Speaker 1>who's used AssemblyScript

01:20:31.784 --> 01:20:33.625
<v Speaker 1>and wants to come in and build that

01:20:33.625 --> 01:20:34.344
<v Speaker 1>with us,

01:20:35.065 --> 01:20:37.224
<v Speaker 1>you know, that that's really fantastic. And then

01:20:37.385 --> 01:20:40.184
<v Speaker 1>even if you're don't want to contribute

01:20:40.905 --> 01:20:41.385
<v Speaker 1>code,

01:20:42.200 --> 01:20:43.080
<v Speaker 1>use

01:20:43.160 --> 01:20:43.960
<v Speaker 1>Atmo

01:20:44.360 --> 01:20:45.080
<v Speaker 1>and

01:20:45.640 --> 01:20:47.000
<v Speaker 1>find where it breaks.

01:20:47.640 --> 01:20:49.480
<v Speaker 1>That is one of the best things that

01:20:49.480 --> 01:20:51.160
<v Speaker 1>you can do and

01:20:51.320 --> 01:20:53.320
<v Speaker 1>help me get it from the alpha that

01:20:53.320 --> 01:20:55.494
<v Speaker 1>it is today to something that can be

01:20:55.494 --> 01:20:58.054
<v Speaker 1>used for real world workloads.

01:20:58.614 --> 01:21:00.135
<v Speaker 1>Show me where it doesn't work for you,

01:21:00.135 --> 01:21:01.815
<v Speaker 1>not just from, like, a crash or a

01:21:01.815 --> 01:21:05.094
<v Speaker 1>bug, but ergonomically. Where does it feel awkward?

01:21:05.094 --> 01:21:07.574
<v Speaker 1>Where do you see it as being inferior

01:21:07.574 --> 01:21:10.659
<v Speaker 1>to building an application the old fashioned way?

01:21:11.940 --> 01:21:14.099
<v Speaker 1>Any of those types of things are are

01:21:14.099 --> 01:21:15.459
<v Speaker 1>always immensely helpful.

01:21:15.860 --> 01:21:18.739
<v Speaker 1>And then taking that survey. So the, the

01:21:18.739 --> 01:21:20.500
<v Speaker 1>bit.ly/wasm

01:21:20.500 --> 01:21:21.219
<v Speaker 1>survey,

01:21:21.619 --> 01:21:23.885
<v Speaker 1>I wanna know, you know it it's it's

01:21:23.885 --> 01:21:26.685
<v Speaker 1>really just five or six questions about languages,

01:21:26.685 --> 01:21:27.485
<v Speaker 1>capabilities,

01:21:27.725 --> 01:21:29.725
<v Speaker 1>and, you know, things that you would want

01:21:29.725 --> 01:21:31.485
<v Speaker 1>to see from this type of framework and

01:21:31.485 --> 01:21:32.204
<v Speaker 1>platform.

01:21:33.645 --> 01:21:35.645
<v Speaker 1>And I've forgotten what your second question was.

01:21:38.700 --> 01:21:41.180
<v Speaker 0>Yeah. Was there anything else that we haven't

01:21:41.180 --> 01:21:43.099
<v Speaker 0>mentioned that you wanna quickly add on?

01:21:43.580 --> 01:21:45.260
<v Speaker 1>Oh, that's right. The

01:21:46.540 --> 01:21:48.700
<v Speaker 1>Atmo itself is fantastic,

01:21:48.700 --> 01:21:51.100
<v Speaker 1>and I you know, that's my main focus.

01:21:51.100 --> 01:21:52.460
<v Speaker 1>But the individual

01:21:52.780 --> 01:21:53.580
<v Speaker 1>projects

01:21:53.805 --> 01:21:56.205
<v Speaker 1>are also completely usable on their own. If

01:21:56.205 --> 01:21:57.965
<v Speaker 1>you just need a job scheduler,

01:21:58.125 --> 01:22:00.285
<v Speaker 1>Hive is fantastic. If you want to just

01:22:00.285 --> 01:22:01.405
<v Speaker 1>make building

01:22:01.565 --> 01:22:04.925
<v Speaker 1>APIs in Go simpler, Vector is really great.

01:22:05.165 --> 01:22:08.570
<v Speaker 1>If you want a decentralized message bus, Grav

01:22:08.570 --> 01:22:10.170
<v Speaker 1>is fantastic. And,

01:22:10.730 --> 01:22:13.450
<v Speaker 1>contributing plug ins for Grav, for example, would

01:22:13.450 --> 01:22:15.449
<v Speaker 1>be really great. They are,

01:22:15.850 --> 01:22:19.050
<v Speaker 1>super easy to build and, you know, the

01:22:19.050 --> 01:22:20.969
<v Speaker 1>documentation is not fantastic,

01:22:20.970 --> 01:22:21.290
<v Speaker 1>but

01:22:21.835 --> 01:22:24.955
<v Speaker 1>it's it's really fun to to build on.

01:22:24.955 --> 01:22:26.635
<v Speaker 1>And I've I'm really quite happy with how

01:22:26.635 --> 01:22:28.315
<v Speaker 1>that project is coming out. So,

01:22:28.715 --> 01:22:30.875
<v Speaker 1>you know, any and all of the projects

01:22:30.875 --> 01:22:34.235
<v Speaker 1>are open for new users and and contributors.

01:22:35.480 --> 01:22:37.320
<v Speaker 0>Alright. Awesome. Well,

01:22:37.560 --> 01:22:39.880
<v Speaker 0>thank you very much for for getting up

01:22:39.880 --> 01:22:41.479
<v Speaker 0>early joining me today

01:22:41.640 --> 01:22:43.800
<v Speaker 0>for your work on at more and web

01:22:43.800 --> 01:22:46.440
<v Speaker 0>assembly and providing tools to make this easier

01:22:46.440 --> 01:22:47.639
<v Speaker 0>for people to adopt.

01:22:47.960 --> 01:22:49.400
<v Speaker 0>Really good to see. Cheers. It's been great.

01:22:49.605 --> 01:22:51.205
<v Speaker 0>And I'll let you into a little secret.

01:22:51.205 --> 01:22:53.925
<v Speaker 0>My secret power is breaking software. So give

01:22:53.925 --> 01:22:55.285
<v Speaker 0>me a couple of days with us and

01:22:55.285 --> 01:22:57.125
<v Speaker 0>I will find you the bugs that you're

01:22:57.125 --> 01:22:57.844
<v Speaker 0>looking for.

01:22:58.805 --> 01:23:01.445
<v Speaker 1>That sounds great. Alright. Well, thank you again.

01:23:01.445 --> 01:23:02.725
<v Speaker 0>I hope you have a great day. I'm

01:23:02.725 --> 01:23:04.570
<v Speaker 0>looking forward to seeing where this and I'll

01:23:04.570 --> 01:23:06.330
<v Speaker 0>speak to you again soon. Thank you, Connor.

01:23:06.570 --> 01:23:07.930
<v Speaker 1>Yeah. Cheers. Thanks so much.
