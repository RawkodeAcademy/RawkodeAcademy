WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 8f9f6841-3388-4f56-8589-774f2ef48749
Created: 2025-04-29T18:28:16.628Z
Duration: 4078.2666
Channels: 1

00:00:18.775 --> 00:00:19.575
<v Speaker 0>Hello,

00:00:19.575 --> 00:00:22.535
<v Speaker 0>and welcome to today's episode of Rawkode Live.

00:00:22.535 --> 00:00:24.135
<v Speaker 0>I'm your host, Rawkode.

00:00:24.295 --> 00:00:26.215
<v Speaker 0>Today, we are taking a look at multi

00:00:26.215 --> 00:00:29.175
<v Speaker 0>tenancy on Kubernetes through a project called vCluster.

00:00:29.699 --> 00:00:31.619
<v Speaker 0>Now before we get started on that, there's

00:00:31.619 --> 00:00:32.980
<v Speaker 0>just a little bit of housekeeping.

00:00:33.460 --> 00:00:36.100
<v Speaker 0>First and foremost, please subscribe to the channel,

00:00:36.100 --> 00:00:38.260
<v Speaker 0>like the video, click the bell.

00:00:38.660 --> 00:00:39.940
<v Speaker 0>This will keep you up to date with

00:00:39.940 --> 00:00:42.505
<v Speaker 0>all new episodes of Rawkode Live. It will

00:00:42.505 --> 00:00:45.065
<v Speaker 0>also encourage the YouTube algorithm to share this

00:00:45.065 --> 00:00:47.545
<v Speaker 0>content with the broader cloud native ecosystem.

00:00:48.345 --> 00:00:50.825
<v Speaker 0>We also have a Discord channel available at

00:00:50.825 --> 00:00:52.345
<v Speaker 0>Rawkode.chat.

00:00:52.345 --> 00:00:54.585
<v Speaker 0>If you wanna request new technologies to appear

00:00:54.585 --> 00:00:56.425
<v Speaker 0>on the show or talk about any existing

00:00:56.425 --> 00:00:58.640
<v Speaker 0>or previous episode, that is the best place

00:00:58.640 --> 00:01:00.080
<v Speaker 0>to do so. Feel free to jump in

00:01:00.080 --> 00:01:01.600
<v Speaker 0>there and join the conversation.

00:01:02.560 --> 00:01:05.120
<v Speaker 0>Alright. Now for today, for vCluster,

00:01:05.120 --> 00:01:07.360
<v Speaker 0>I am joined by two fantastic guests, Rich

00:01:07.360 --> 00:01:09.280
<v Speaker 0>and Lucas. Hi there both. How are you?

00:01:10.665 --> 00:01:11.865
<v Speaker 1>Hey, really good.

00:01:13.545 --> 00:01:15.225
<v Speaker 0>Awesome. Thanks for having us.

00:01:15.465 --> 00:01:17.625
<v Speaker 0>It's my pleasure. I'm really excited to take

00:01:17.625 --> 00:01:19.385
<v Speaker 0>a look at vCluster today. It's kicker tires

00:01:19.385 --> 00:01:21.145
<v Speaker 0>on it, seaboard is capable of and share

00:01:21.145 --> 00:01:23.600
<v Speaker 0>that with everyone that is watching. Can we

00:01:23.600 --> 00:01:25.840
<v Speaker 0>just take a few moments, please? If you

00:01:25.840 --> 00:01:27.760
<v Speaker 0>both introduce yourselves, tell us a little bit

00:01:27.760 --> 00:01:29.760
<v Speaker 0>about you, and then we'll talk about vCluster.

00:01:29.760 --> 00:01:31.680
<v Speaker 0>And I'll throw it to you first, Rich.

00:01:32.880 --> 00:01:36.080
<v Speaker 1>Yeah. So I'm a senior developer advocate at

00:01:36.080 --> 00:01:36.800
<v Speaker 1>Loft Labs.

00:01:37.345 --> 00:01:38.865
<v Speaker 1>I've been with the company for about three

00:01:38.865 --> 00:01:41.265
<v Speaker 1>months now, and I'm really enjoying it.

00:01:41.905 --> 00:01:43.905
<v Speaker 1>I've been in DevRel for a few years

00:01:43.905 --> 00:01:45.505
<v Speaker 1>now, but have a long,

00:01:46.064 --> 00:01:46.625
<v Speaker 1>long

00:01:46.945 --> 00:01:49.664
<v Speaker 1>history of different kinds of ops roles before

00:01:49.664 --> 00:01:49.905
<v Speaker 1>that,

00:01:50.700 --> 00:01:53.340
<v Speaker 1>sys admin roles, SRE, all kinds of stuff

00:01:53.340 --> 00:01:54.700
<v Speaker 1>over the years. So

00:01:55.500 --> 00:01:55.899
<v Speaker 1>yeah.

00:01:58.060 --> 00:01:58.939
<v Speaker 0>And Lucas?

00:02:00.780 --> 00:02:02.380
<v Speaker 2>Yeah. Hi. I'm Lucas,

00:02:02.700 --> 00:02:05.635
<v Speaker 2>CEO at Loft Labs. I brought Rich in

00:02:05.635 --> 00:02:07.555
<v Speaker 2>a couple months ago and super excited to

00:02:07.555 --> 00:02:10.355
<v Speaker 2>be working with him. And we launched vCluster

00:02:10.355 --> 00:02:12.435
<v Speaker 2>a couple of weeks ago, and, you know,

00:02:12.435 --> 00:02:14.755
<v Speaker 2>I'm trying to hop on as many

00:02:15.395 --> 00:02:18.400
<v Speaker 2>streams and calls as possible to to, you

00:02:18.400 --> 00:02:20.000
<v Speaker 2>know, tell people more about what we're up

00:02:20.000 --> 00:02:20.880
<v Speaker 2>to right now.

00:02:21.280 --> 00:02:24.160
<v Speaker 0>Awesome. Thank you. And thank you, Noel, for

00:02:24.160 --> 00:02:25.840
<v Speaker 0>telling us my audio was on during that

00:02:25.840 --> 00:02:27.840
<v Speaker 0>video. After I assure everyone that that is

00:02:27.840 --> 00:02:29.680
<v Speaker 0>not the case, I guess I made a

00:02:29.680 --> 00:02:30.560
<v Speaker 0>mistake. Sorry about that.

00:02:31.455 --> 00:02:33.855
<v Speaker 1>Oh, I guess I missed an opportunity to

00:02:33.855 --> 00:02:36.015
<v Speaker 1>plug my thing, which is that I also

00:02:36.015 --> 00:02:39.215
<v Speaker 1>do a podcast about Kubernetes called KubeCuddle.

00:02:39.535 --> 00:02:42.575
<v Speaker 1>So if you just search in your podcast

00:02:42.575 --> 00:02:44.095
<v Speaker 1>player for that, you should find it.

00:02:45.040 --> 00:02:46.560
<v Speaker 0>Don't you worry. I was I was gonna

00:02:46.560 --> 00:02:49.360
<v Speaker 0>mention kubectl anyway. I'm a big fan. It's

00:02:49.360 --> 00:02:51.360
<v Speaker 0>a great podcast, and I encourage everyone to

00:02:51.360 --> 00:02:52.160
<v Speaker 0>check it out.

00:02:53.600 --> 00:02:56.800
<v Speaker 0>Alright. Let's start then with a little tldr

00:02:56.800 --> 00:02:59.200
<v Speaker 0>on what vCluster is. Which one of you

00:02:59.200 --> 00:03:00.160
<v Speaker 0>would like to tackle that?

00:03:01.485 --> 00:03:02.605
<v Speaker 1>I'll start off.

00:03:03.165 --> 00:03:05.084
<v Speaker 1>So vCluster is

00:03:05.084 --> 00:03:05.965
<v Speaker 1>basically

00:03:06.685 --> 00:03:10.605
<v Speaker 1>a solution to the pain of Kubernetes multitenancy.

00:03:10.685 --> 00:03:11.325
<v Speaker 1>So

00:03:11.564 --> 00:03:14.444
<v Speaker 1>if you have used Kubernetes for a while,

00:03:14.444 --> 00:03:16.125
<v Speaker 1>you have probably run into

00:03:16.470 --> 00:03:19.270
<v Speaker 1>the the situation where you're using namespace based

00:03:19.270 --> 00:03:20.390
<v Speaker 1>isolation,

00:03:20.710 --> 00:03:22.710
<v Speaker 1>and there are things you just can't do.

00:03:22.710 --> 00:03:25.190
<v Speaker 1>Right? You can't manage cluster wide resources

00:03:25.350 --> 00:03:27.750
<v Speaker 1>as a user in a namespace.

00:03:28.070 --> 00:03:29.110
<v Speaker 1>And so

00:03:29.385 --> 00:03:31.944
<v Speaker 1>this is actually something that was built into

00:03:31.944 --> 00:03:33.785
<v Speaker 1>our commercial product, Loft,

00:03:34.185 --> 00:03:36.265
<v Speaker 1>and then we kinda pulled it out and

00:03:36.265 --> 00:03:37.865
<v Speaker 1>open sourced it recently.

00:03:38.504 --> 00:03:40.025
<v Speaker 1>Lucas, is there more you wanna share?

00:03:42.860 --> 00:03:43.500
<v Speaker 2>Yeah. I think

00:03:44.620 --> 00:03:46.300
<v Speaker 2>I mean, that that was a great great

00:03:46.300 --> 00:03:48.780
<v Speaker 2>intro. I think you said pretty much everything

00:03:48.780 --> 00:03:50.700
<v Speaker 2>except, you know, vCluster

00:03:50.940 --> 00:03:51.500
<v Speaker 2>is just

00:03:52.060 --> 00:03:53.340
<v Speaker 2>is more than just

00:03:53.580 --> 00:03:54.380
<v Speaker 2>multitenancy.

00:03:54.380 --> 00:03:56.140
<v Speaker 2>It's really just an efficient way to also

00:03:56.140 --> 00:03:57.180
<v Speaker 2>create self-service

00:03:57.505 --> 00:03:58.465
<v Speaker 2>for

00:03:58.785 --> 00:04:00.865
<v Speaker 2>for, you know, Kubernetes clusters.

00:04:01.825 --> 00:04:03.345
<v Speaker 2>Because, you know, as soon as you have

00:04:03.345 --> 00:04:05.505
<v Speaker 2>access just to a namespace, you can basically

00:04:05.505 --> 00:04:07.665
<v Speaker 2>now spin up your own Kubernetes clusters. I

00:04:07.665 --> 00:04:09.425
<v Speaker 2>mean, they are virtual. They don't have their

00:04:09.425 --> 00:04:11.265
<v Speaker 2>own, you know, VMs and nodes.

00:04:12.469 --> 00:04:15.349
<v Speaker 2>But with this restricted access, you can essentially

00:04:15.349 --> 00:04:18.070
<v Speaker 2>make yourself cluster admin for, you know, this

00:04:18.070 --> 00:04:19.990
<v Speaker 2>virtual cluster, which is,

00:04:20.310 --> 00:04:22.630
<v Speaker 2>you know, something that people often forget when

00:04:22.630 --> 00:04:24.229
<v Speaker 2>they think about virtual cluster, and I think

00:04:24.229 --> 00:04:26.229
<v Speaker 2>it's actually one of the most exciting parts.

00:04:28.015 --> 00:04:29.935
<v Speaker 1>And, I mean, in terms of the technical

00:04:29.935 --> 00:04:31.855
<v Speaker 1>end of it, you know, you've got a

00:04:31.855 --> 00:04:33.615
<v Speaker 1>namespace on the host cluster,

00:04:33.935 --> 00:04:36.255
<v Speaker 1>and inside of it, there's a k three

00:04:36.255 --> 00:04:37.775
<v Speaker 1>s API server.

00:04:38.495 --> 00:04:39.215
<v Speaker 1>And that

00:04:39.530 --> 00:04:42.410
<v Speaker 1>is basically your Kubernetes API, you know, within

00:04:42.410 --> 00:04:44.970
<v Speaker 1>your vCluster. So it looks to the user

00:04:44.970 --> 00:04:47.370
<v Speaker 1>like it's a full blown Kubernetes cluster.

00:04:48.890 --> 00:04:51.370
<v Speaker 0>So what are some of the, like, more

00:04:51.370 --> 00:04:53.050
<v Speaker 0>common use cases for this? What do you

00:04:53.050 --> 00:04:56.625
<v Speaker 0>see people adopting vCluster to do beyond, like,

00:04:56.625 --> 00:04:59.345
<v Speaker 0>just multi tenancy? Is there, like, a broader

00:04:59.345 --> 00:05:00.225
<v Speaker 0>picture there?

00:05:02.944 --> 00:05:04.865
<v Speaker 1>I think that a little bit into the

00:05:04.865 --> 00:05:07.585
<v Speaker 2>details. Oh, sorry. Just go ahead. No. Go

00:05:07.585 --> 00:05:09.770
<v Speaker 0>ahead. I I I was just gonna say,

00:05:09.770 --> 00:05:11.130
<v Speaker 1>I think, you know, there there are a

00:05:11.130 --> 00:05:13.610
<v Speaker 1>number of use cases, but to me, probably

00:05:13.610 --> 00:05:15.770
<v Speaker 1>the most interesting one is,

00:05:16.170 --> 00:05:18.010
<v Speaker 1>you know, Lucas mentioned self-service,

00:05:18.010 --> 00:05:20.170
<v Speaker 1>and I think, you know, this is great

00:05:20.170 --> 00:05:21.690
<v Speaker 1>for dev environments. You know?

00:05:22.564 --> 00:05:24.085
<v Speaker 1>If you don't wanna have,

00:05:24.724 --> 00:05:26.805
<v Speaker 1>you know, different clusters spun up for different

00:05:26.805 --> 00:05:27.445
<v Speaker 1>teams,

00:05:27.764 --> 00:05:29.284
<v Speaker 1>you want people to be able to do

00:05:29.284 --> 00:05:31.525
<v Speaker 1>self-service and just get on with their work

00:05:31.525 --> 00:05:32.725
<v Speaker 1>as they need to.

00:05:33.525 --> 00:05:34.965
<v Speaker 1>I I think that that's one of the

00:05:34.965 --> 00:05:35.764
<v Speaker 1>better use cases.

00:05:37.070 --> 00:05:40.190
<v Speaker 1>CICD is potentially another use case. You know?

00:05:40.190 --> 00:05:42.270
<v Speaker 1>So instead of using something like kind

00:05:42.430 --> 00:05:45.230
<v Speaker 1>and having to provision something, you know, every

00:05:45.230 --> 00:05:46.910
<v Speaker 1>time you run a set of tests,

00:05:47.150 --> 00:05:50.030
<v Speaker 1>you basically are just leveraging this cluster that's

00:05:50.030 --> 00:05:52.805
<v Speaker 1>already there and and, you know, just creating

00:05:52.805 --> 00:05:54.245
<v Speaker 1>a name space on it, which I think

00:05:54.245 --> 00:05:56.405
<v Speaker 1>is is likely a lot faster.

00:05:58.725 --> 00:06:00.405
<v Speaker 0>Yeah. Definitely. I think,

00:06:00.965 --> 00:06:03.285
<v Speaker 0>you know, just you're mentioning those use cases

00:06:03.285 --> 00:06:06.070
<v Speaker 0>there and thinking about how, you know, CICD

00:06:06.070 --> 00:06:07.350
<v Speaker 0>is one of those things that when you

00:06:07.350 --> 00:06:08.790
<v Speaker 0>run it in your cluster, it normally needs

00:06:08.790 --> 00:06:11.110
<v Speaker 0>quite a lot of privilege. Like it does

00:06:11.110 --> 00:06:13.030
<v Speaker 0>some magic stuff. This is the building container

00:06:13.030 --> 00:06:14.870
<v Speaker 0>images and it's access to the like host

00:06:14.870 --> 00:06:17.590
<v Speaker 0>paths or it needs, know, service accounts with

00:06:17.590 --> 00:06:18.870
<v Speaker 0>maybe quite broad

00:06:19.105 --> 00:06:20.945
<v Speaker 0>permissions. And if you could toast all of

00:06:20.945 --> 00:06:22.945
<v Speaker 0>that in a virtual cluster, you're kind of

00:06:22.945 --> 00:06:25.185
<v Speaker 0>protecting the outer layer but giving them you

00:06:25.185 --> 00:06:26.865
<v Speaker 0>know, you're not slowing down developers and I

00:06:26.865 --> 00:06:28.625
<v Speaker 0>guess that's almost a superpower to a point

00:06:28.625 --> 00:06:30.865
<v Speaker 0>and that the development team can now just

00:06:30.865 --> 00:06:33.425
<v Speaker 0>work with whatever permissions they need without having

00:06:33.425 --> 00:06:33.985
<v Speaker 0>to constantly

00:06:34.540 --> 00:06:36.060
<v Speaker 0>come back to the operations team or the

00:06:36.060 --> 00:06:37.980
<v Speaker 0>maintenance teams, SRE teams and go, hey, I

00:06:37.980 --> 00:06:39.740
<v Speaker 0>need this new permission or I need this.

00:06:40.700 --> 00:06:41.980
<v Speaker 1>Yeah. And I think that

00:06:42.460 --> 00:06:45.180
<v Speaker 1>I think CICD is really tricky, right? Because

00:06:45.180 --> 00:06:47.100
<v Speaker 1>if you're in a situation where you run

00:06:47.100 --> 00:06:48.700
<v Speaker 1>a lot of tests and they take a

00:06:48.700 --> 00:06:51.185
<v Speaker 1>while, there's always that trade off, you know,

00:06:51.185 --> 00:06:53.425
<v Speaker 1>where you're trying to reduce how how long

00:06:53.425 --> 00:06:55.745
<v Speaker 1>the tests take, and you're trying to do

00:06:55.745 --> 00:06:57.665
<v Speaker 1>everything that you can to sort of, you

00:06:57.665 --> 00:07:00.145
<v Speaker 1>know, shrink that amount of time before the

00:07:00.145 --> 00:07:03.264
<v Speaker 1>developers get feedback. And, you know, you're often,

00:07:03.960 --> 00:07:06.760
<v Speaker 1>you know, making trade offs. Like, do I

00:07:06.760 --> 00:07:09.480
<v Speaker 1>wanna have a a VM with a cluster

00:07:09.480 --> 00:07:11.640
<v Speaker 1>already baked into it? You know? Or do

00:07:11.640 --> 00:07:14.440
<v Speaker 1>I wanna provision a cluster every time?

00:07:14.840 --> 00:07:17.720
<v Speaker 1>And there are pluses and minuses to both

00:07:17.720 --> 00:07:19.375
<v Speaker 1>of those things. You know? The more that

00:07:19.375 --> 00:07:20.415
<v Speaker 1>you bake in,

00:07:20.895 --> 00:07:22.975
<v Speaker 1>the more that you have to deal with,

00:07:22.975 --> 00:07:25.935
<v Speaker 1>like, you know, recreating images or updating them

00:07:25.935 --> 00:07:26.655
<v Speaker 1>somehow.

00:07:27.055 --> 00:07:28.975
<v Speaker 1>And, you know, if you provision stuff on

00:07:28.975 --> 00:07:30.975
<v Speaker 1>the fly, then you've gotta wait for all

00:07:30.975 --> 00:07:33.135
<v Speaker 1>of that to happen. You know? And so

00:07:34.430 --> 00:07:34.990
<v Speaker 1>the

00:07:35.470 --> 00:07:37.229
<v Speaker 1>the thing the situation that I think we've

00:07:37.229 --> 00:07:40.830
<v Speaker 1>gotten into with the Kubernetes multitenancy problems is

00:07:41.150 --> 00:07:43.790
<v Speaker 1>this cluster sprawl, you know, where people feel

00:07:43.790 --> 00:07:45.870
<v Speaker 1>like it's easier to just make a new

00:07:45.870 --> 00:07:47.229
<v Speaker 1>cluster for everything

00:07:47.395 --> 00:07:49.794
<v Speaker 1>than to think about dealing with multitenancy.

00:07:49.794 --> 00:07:52.354
<v Speaker 1>You know? And and that's really, I think,

00:07:52.354 --> 00:07:53.634
<v Speaker 1>a a lot of what we're trying to

00:07:53.634 --> 00:07:54.835
<v Speaker 1>address with this tool.

00:07:56.435 --> 00:07:57.875
<v Speaker 0>Wow. Big mission.

00:07:58.754 --> 00:08:00.914
<v Speaker 0>I'm looking forward to check it out. But

00:08:00.914 --> 00:08:03.550
<v Speaker 0>it sounds amazing and I think there's just

00:08:03.630 --> 00:08:05.150
<v Speaker 0>you're right. There are so many different use

00:08:05.150 --> 00:08:07.150
<v Speaker 0>cases. I like the CICD one. That one

00:08:07.150 --> 00:08:09.790
<v Speaker 0>hadn't really occurred to me until you mentioned

00:08:09.790 --> 00:08:11.070
<v Speaker 0>it. And then the minute you said it,

00:08:11.070 --> 00:08:12.190
<v Speaker 0>it was like a little late switch. I

00:08:12.190 --> 00:08:14.350
<v Speaker 0>was like, oh, yeah. He's totally right. Like,

00:08:14.350 --> 00:08:15.630
<v Speaker 0>it's a great use case.

00:08:16.415 --> 00:08:18.495
<v Speaker 0>Is vCluster something We have a actually Sorry.

00:08:18.495 --> 00:08:20.015
<v Speaker 0>I didn't go rich. Oh, I was just

00:08:20.015 --> 00:08:21.775
<v Speaker 1>gonna say, David, we've got a really big

00:08:21.775 --> 00:08:23.535
<v Speaker 1>announcement today. Do you wanna talk about that,

00:08:23.535 --> 00:08:24.175
<v Speaker 1>Lucas?

00:08:26.175 --> 00:08:27.375
<v Speaker 2>Oh, yeah. Sure.

00:08:28.095 --> 00:08:30.830
<v Speaker 2>Yeah. We're we're actually breaking the news as

00:08:30.830 --> 00:08:32.910
<v Speaker 2>of right now in in this call.

00:08:33.549 --> 00:08:34.669
<v Speaker 2>So vCluster

00:08:34.669 --> 00:08:37.950
<v Speaker 2>is now a certified Kubernetes distribution.

00:08:38.750 --> 00:08:40.510
<v Speaker 2>So one of the I think there's, like,

00:08:40.510 --> 00:08:43.950
<v Speaker 2>80 distributions out there, and we worked pretty

00:08:43.950 --> 00:08:45.955
<v Speaker 2>hard on the, you know, past couple of

00:08:45.955 --> 00:08:48.115
<v Speaker 2>weeks to pass all the conformance tests that

00:08:48.115 --> 00:08:51.235
<v Speaker 2>CNCF put out there for certified distributions.

00:08:51.315 --> 00:08:53.475
<v Speaker 2>And, yeah, pretty happy to report that they

00:08:53.475 --> 00:08:56.195
<v Speaker 2>merged our pre request now. We're not the

00:08:56.195 --> 00:08:58.035
<v Speaker 2>logo does not show up on the website

00:08:58.035 --> 00:09:00.570
<v Speaker 2>yet. That's to come hopefully in the next

00:09:00.570 --> 00:09:02.330
<v Speaker 2>couple of days, so this is really, like,

00:09:02.330 --> 00:09:03.290
<v Speaker 2>breaking news.

00:09:03.930 --> 00:09:06.330
<v Speaker 2>But super happy to report that. Yeah. That

00:09:06.330 --> 00:09:08.890
<v Speaker 0>is a big deal. Congratulations.

00:09:09.130 --> 00:09:11.690
<v Speaker 0>That that's that's awesome. It's a fully conforming

00:09:11.690 --> 00:09:14.090
<v Speaker 0>Kubernetes cluster running inside of a namespace on

00:09:14.090 --> 00:09:15.365
<v Speaker 0>a Kubernetes cluster. Cluster.

00:09:16.404 --> 00:09:18.325
<v Speaker 0>Yeah. We have to give a shout out

00:09:18.325 --> 00:09:19.125
<v Speaker 1>to our

00:09:19.685 --> 00:09:21.045
<v Speaker 1>have to give a shout out to our

00:09:21.045 --> 00:09:22.645
<v Speaker 1>CTO and cofounder,

00:09:22.725 --> 00:09:25.445
<v Speaker 1>Fabian Cram too, who has built a lot

00:09:25.445 --> 00:09:26.085
<v Speaker 1>of this.

00:09:26.645 --> 00:09:27.285
<v Speaker 1>He

00:09:28.000 --> 00:09:29.520
<v Speaker 1>he's just a machine.

00:09:29.839 --> 00:09:33.120
<v Speaker 1>He just codes like crazy and build such

00:09:33.120 --> 00:09:35.440
<v Speaker 1>cool things. He's probably on it right now.

00:09:38.959 --> 00:09:40.880
<v Speaker 0>So I'm assuming there was maybe a couple

00:09:40.880 --> 00:09:42.795
<v Speaker 0>of things you had to to to pass

00:09:42.795 --> 00:09:44.795
<v Speaker 0>the conformance test. Is there are any of

00:09:44.795 --> 00:09:46.235
<v Speaker 0>those quite funny that you wanna share with

00:09:46.235 --> 00:09:47.915
<v Speaker 0>us? Anything that snuck through?

00:09:49.915 --> 00:09:52.475
<v Speaker 2>Yeah. I think I think the most most

00:09:52.475 --> 00:09:55.350
<v Speaker 2>tricky part was actually getting things done in

00:09:55.350 --> 00:09:58.710
<v Speaker 2>terms of notes because, you know, Kubernetes has

00:09:58.790 --> 00:09:59.670
<v Speaker 2>certain

00:10:00.230 --> 00:10:02.870
<v Speaker 2>restrictions regarding you know, if you're thinking about

00:10:02.870 --> 00:10:05.190
<v Speaker 2>a a virtual cluster that runs inside a

00:10:05.190 --> 00:10:05.830
<v Speaker 2>namespace,

00:10:07.295 --> 00:10:09.135
<v Speaker 2>what happens to the notes? Right?

00:10:09.615 --> 00:10:11.375
<v Speaker 2>Do you see all the notes in your

00:10:11.375 --> 00:10:12.575
<v Speaker 2>underlying cluster?

00:10:12.655 --> 00:10:14.415
<v Speaker 2>Do you only see the notes that you

00:10:14.415 --> 00:10:16.335
<v Speaker 2>actually have workloads running on?

00:10:17.055 --> 00:10:19.695
<v Speaker 2>Do you only see, like, notes for certain

00:10:20.510 --> 00:10:22.590
<v Speaker 2>note selector and all these kind of things?

00:10:22.910 --> 00:10:24.350
<v Speaker 2>So, yeah, we had to we had to

00:10:24.350 --> 00:10:26.430
<v Speaker 2>add a couple of flags to, you know,

00:10:27.070 --> 00:10:29.230
<v Speaker 2>essentially enable certain configurations

00:10:29.230 --> 00:10:31.070
<v Speaker 2>to, you know, sync all notes from the

00:10:31.070 --> 00:10:33.310
<v Speaker 2>underlying cluster and things like that because, you

00:10:33.310 --> 00:10:35.825
<v Speaker 2>know, that made it much easier to run

00:10:35.825 --> 00:10:39.345
<v Speaker 2>these tests that that, you know, the conformance

00:10:39.345 --> 00:10:40.705
<v Speaker 2>tests essentially require.

00:10:42.065 --> 00:10:42.865
<v Speaker 0>Awesome.

00:10:43.265 --> 00:10:45.345
<v Speaker 0>Yeah. I hadn't again, I hadn't really thought

00:10:45.345 --> 00:10:47.185
<v Speaker 0>of that. What I would expect get nodes

00:10:47.185 --> 00:10:49.265
<v Speaker 0>to return inside of a vCluster.

00:10:50.200 --> 00:10:51.800
<v Speaker 0>I guess based on what you just said,

00:10:51.800 --> 00:10:54.360
<v Speaker 0>that's it's all configurable then. So me is

00:10:54.360 --> 00:10:56.200
<v Speaker 0>the person deploying vCluster.

00:10:56.279 --> 00:10:58.279
<v Speaker 0>I I decide what what should come back

00:10:58.279 --> 00:10:59.160
<v Speaker 0>there. Right?

00:11:01.000 --> 00:11:03.320
<v Speaker 2>Yeah. Exactly. I mean, we we we're trying

00:11:03.320 --> 00:11:05.935
<v Speaker 2>to add as many, you know, config options

00:11:05.935 --> 00:11:08.735
<v Speaker 2>as possible. VCluster is actually pretty much I

00:11:08.735 --> 00:11:11.055
<v Speaker 2>mean, you can either just deploy a stateful

00:11:11.055 --> 00:11:13.535
<v Speaker 2>set, right, and a service, and that's vCluster.

00:11:13.535 --> 00:11:15.855
<v Speaker 2>You can basically run cube CTL apply. So

00:11:15.855 --> 00:11:19.560
<v Speaker 2>it's basically just what what arguments you provide

00:11:19.560 --> 00:11:21.160
<v Speaker 2>for the for the entry point

00:11:21.480 --> 00:11:23.480
<v Speaker 2>of the two containers. Right? We have a

00:11:23.480 --> 00:11:24.760
<v Speaker 2>k three s container,

00:11:24.920 --> 00:11:26.600
<v Speaker 2>and then we have the sync container

00:11:27.080 --> 00:11:29.080
<v Speaker 2>that actually does the synchronization

00:11:29.080 --> 00:11:31.560
<v Speaker 2>between what's inside the virtual cluster and what's

00:11:31.560 --> 00:11:32.840
<v Speaker 2>outside in the real cluster.

00:11:33.495 --> 00:11:36.775
<v Speaker 2>And, yeah, typically, you deploy it via Helm,

00:11:36.775 --> 00:11:38.535
<v Speaker 2>and we try to expose as much as

00:11:38.535 --> 00:11:39.175
<v Speaker 2>possible.

00:11:39.495 --> 00:11:41.175
<v Speaker 2>So, you know, there are so many different

00:11:41.175 --> 00:11:43.415
<v Speaker 2>use cases for virtual clusters. We talked to

00:11:43.415 --> 00:11:45.655
<v Speaker 2>one company that started using

00:11:45.815 --> 00:11:47.015
<v Speaker 2>our product to essentially,

00:11:47.589 --> 00:11:49.270
<v Speaker 2>you know, kinda simulate

00:11:49.750 --> 00:11:52.950
<v Speaker 2>clusters and simulate, you know, what happens. So

00:11:52.950 --> 00:11:54.630
<v Speaker 2>they wanted to test, like, what happens if

00:11:54.630 --> 00:11:56.870
<v Speaker 2>we run, like, 500 daemon sets. Right?

00:11:57.350 --> 00:11:59.830
<v Speaker 2>And, you know, our first five hundred nodes,

00:11:59.830 --> 00:12:01.270
<v Speaker 2>and then the question comes up, hey. Can

00:12:01.270 --> 00:12:04.390
<v Speaker 2>we actually produce fake notes with vCluster? So

00:12:03.485 --> 00:12:06.525
<v Speaker 2>that's something we're currently looking into. And, yeah,

00:12:06.525 --> 00:12:08.285
<v Speaker 2>there there's so many use cases that people

00:12:08.285 --> 00:12:09.805
<v Speaker 2>come up with. It's incredible.

00:12:10.845 --> 00:12:12.525
<v Speaker 1>And this is pretty new,

00:12:13.245 --> 00:12:14.925
<v Speaker 1>you know, in terms of the open source

00:12:14.925 --> 00:12:15.245
<v Speaker 1>project.

00:12:16.050 --> 00:12:18.850
<v Speaker 1>We just released it during KubeCon

00:12:19.010 --> 00:12:19.890
<v Speaker 1>publicly,

00:12:19.890 --> 00:12:22.770
<v Speaker 1>but but this is technology that our users

00:12:22.770 --> 00:12:24.690
<v Speaker 1>on our commercial product have been using for

00:12:24.690 --> 00:12:27.410
<v Speaker 1>a while. So it's actually a lot more

00:12:27.410 --> 00:12:29.650
<v Speaker 1>baked than you might think from, you know,

00:12:29.650 --> 00:12:31.170
<v Speaker 1>a brand new open source project.

00:12:32.875 --> 00:12:35.595
<v Speaker 0>Alright. Well, my interest is certainly peaked. So

00:12:35.595 --> 00:12:37.515
<v Speaker 0>why don't we get this deployed

00:12:37.755 --> 00:12:40.315
<v Speaker 0>to my cluster? And feel free to

00:12:41.195 --> 00:12:43.195
<v Speaker 0>share all of your experience and history of

00:12:43.195 --> 00:12:45.220
<v Speaker 0>the project as we go and I will

00:12:45.220 --> 00:12:46.740
<v Speaker 0>do my best not to mess this up

00:12:46.740 --> 00:12:47.620
<v Speaker 0>too much.

00:12:48.340 --> 00:12:49.380
<v Speaker 0>So I

00:12:50.420 --> 00:12:53.540
<v Speaker 0>have my screen here. This is the vCluster

00:12:53.540 --> 00:12:54.500
<v Speaker 0>documentation.

00:12:54.740 --> 00:12:57.460
<v Speaker 0>We're gonna work through the getting started guide

00:12:57.965 --> 00:13:00.205
<v Speaker 0>And if nothing has broken in the last

00:13:00.205 --> 00:13:01.325
<v Speaker 0>ten minutes,

00:13:02.125 --> 00:13:03.725
<v Speaker 0>we should have a cluster.

00:13:04.125 --> 00:13:05.565
<v Speaker 0>We do. Alright.

00:13:07.725 --> 00:13:11.005
<v Speaker 0>Step one. I'm assuming I just deploy

00:13:11.600 --> 00:13:12.640
<v Speaker 0>vCluster.

00:13:15.440 --> 00:13:16.079
<v Speaker 0>So

00:13:17.120 --> 00:13:18.560
<v Speaker 0>do I need the CLI? Is that

00:13:20.959 --> 00:13:22.880
<v Speaker 2>Yeah. It's gonna be much easier if you're

00:13:22.880 --> 00:13:24.959
<v Speaker 2>using the CLI. Well, I do like easy

00:13:24.959 --> 00:13:27.105
<v Speaker 0>mode, so let's do that.

00:13:29.745 --> 00:13:31.985
<v Speaker 1>Yeah. And, of course, you know, this is

00:13:31.985 --> 00:13:34.385
<v Speaker 1>a quick start, so it's not necessarily how

00:13:34.385 --> 00:13:35.185
<v Speaker 1>you would,

00:13:35.905 --> 00:13:38.545
<v Speaker 1>you know, productionize this, I guess. But

00:13:41.330 --> 00:13:42.050
<v Speaker 0>Oh,

00:13:42.290 --> 00:13:45.970
<v Speaker 0>yeah. That's that's alright. Quick start, sir. They're

00:13:45.970 --> 00:13:46.690
<v Speaker 0>more fun.

00:13:47.650 --> 00:13:49.650
<v Speaker 0>Mhmm. Deploying stuff to production is too hard.

00:13:49.650 --> 00:13:51.570
<v Speaker 0>I'll deal with that deal with that in

00:13:51.570 --> 00:13:51.970
<v Speaker 0>the future.

00:13:53.345 --> 00:13:54.305
<v Speaker 0>Okay.

00:13:54.305 --> 00:13:56.464
<v Speaker 0>So we have the vCluster CLI

00:13:56.464 --> 00:13:58.705
<v Speaker 0>and then step two is that we wanna

00:13:58.705 --> 00:14:00.625
<v Speaker 0>create a vCluster. I know it looks like

00:14:00.625 --> 00:14:02.065
<v Speaker 0>you offer let me zoom in on this

00:14:02.065 --> 00:14:04.225
<v Speaker 0>a little bit, multiple approaches to do this.

00:14:04.225 --> 00:14:04.625
<v Speaker 0>So

00:14:05.319 --> 00:14:07.560
<v Speaker 0>it feels like is the vCluster CLI just

00:14:07.560 --> 00:14:10.680
<v Speaker 0>optional? I can do this through Kubernetes

00:14:10.680 --> 00:14:13.160
<v Speaker 0>manifest, but like you said, the vCluster CLI

00:14:13.160 --> 00:14:14.760
<v Speaker 0>is gonna keep this really easy for me.

00:14:15.079 --> 00:14:17.635
<v Speaker 0>Okay. I see he's nodding. Yeah. Why I

00:14:17.635 --> 00:14:19.635
<v Speaker 2>mean, you'll you'll actually see the output in

00:14:19.635 --> 00:14:22.195
<v Speaker 2>the CLI and it essentially runs Helm under

00:14:22.195 --> 00:14:24.515
<v Speaker 2>the hood. So if you already have Helm

00:14:24.515 --> 00:14:26.675
<v Speaker 2>installed, you're gonna see the command on there.

00:14:27.235 --> 00:14:29.394
<v Speaker 0>Alright. So let's just copy this command

00:14:31.149 --> 00:14:33.950
<v Speaker 0>And this is vCluster create vCluster

00:14:33.950 --> 00:14:34.750
<v Speaker 0>one.

00:14:36.990 --> 00:14:38.670
<v Speaker 0>Okay. So this is just the name of

00:14:38.670 --> 00:14:40.510
<v Speaker 0>my virtual cluster.

00:14:41.149 --> 00:14:43.070
<v Speaker 0>And then this is the namespace to run

00:14:43.070 --> 00:14:43.790
<v Speaker 0>it in?

00:14:44.670 --> 00:14:46.545
<v Speaker 0>Yep. Okay. So do I need to create

00:14:46.545 --> 00:14:48.545
<v Speaker 0>that namespace first or is that created for

00:14:48.545 --> 00:14:50.384
<v Speaker 0>me as part of the vCluster create?

00:14:51.345 --> 00:14:52.865
<v Speaker 1>You just need to do the command and

00:14:52.384 --> 00:14:52.464
<v Speaker 1>Alright.

00:14:58.600 --> 00:14:59.800
<v Speaker 0>Let's see what happens.

00:15:02.680 --> 00:15:03.720
<v Speaker 0>It

00:15:07.480 --> 00:15:08.760
<v Speaker 0>worked? Is that it?

00:15:10.455 --> 00:15:13.175
<v Speaker 2>That's it. VCluster running now, hopefully.

00:15:15.175 --> 00:15:17.415
<v Speaker 1>So and and, again, when we were talking

00:15:17.415 --> 00:15:20.775
<v Speaker 1>about, you know, the speed difference, you know,

00:15:20.775 --> 00:15:23.735
<v Speaker 1>within a workflow like a CICD workflow or

00:15:23.735 --> 00:15:26.910
<v Speaker 1>something like that, This is literally just, you

00:15:26.910 --> 00:15:28.990
<v Speaker 1>know, deploying a couple containers

00:15:29.310 --> 00:15:30.670
<v Speaker 1>with a Helm chart.

00:15:33.230 --> 00:15:34.029
<v Speaker 0>Alright.

00:15:34.110 --> 00:15:35.470
<v Speaker 0>I mean, it's not supposed to be this

00:15:35.470 --> 00:15:37.390
<v Speaker 0>easy. I'm just gonna throw that out here.

00:15:37.390 --> 00:15:37.550
<v Speaker 0>Like

00:15:40.324 --> 00:15:42.964
<v Speaker 1>We can we can screw it up. I

00:15:42.964 --> 00:15:44.404
<v Speaker 1>didn't is this clustered?

00:15:44.485 --> 00:15:47.045
<v Speaker 1>I thought that this is Rawkode Live. Yeah.

00:15:47.444 --> 00:15:50.245
<v Speaker 0>Yeah. That's right. You're right. Although, I'm already

00:15:50.245 --> 00:15:52.644
<v Speaker 0>thinking that v vCluster can provide some pretty

00:15:52.644 --> 00:15:55.709
<v Speaker 0>interesting clustered scenarios so maybe another day.

00:15:56.910 --> 00:15:58.670
<v Speaker 0>Alright. Let's see what it's done to our

00:15:58.670 --> 00:16:01.630
<v Speaker 0>cluster then. I know I'm going off script,

00:16:01.630 --> 00:16:03.310
<v Speaker 0>don't know if the getting started guide is

00:16:03.310 --> 00:16:04.990
<v Speaker 0>gonna actually guide me through this but the

00:16:04.990 --> 00:16:06.509
<v Speaker 0>questions in my head are

00:16:07.334 --> 00:16:09.415
<v Speaker 0>what have you done to my cluster? So

00:16:09.654 --> 00:16:12.214
<v Speaker 0>I can see that namespace was created.

00:16:12.295 --> 00:16:12.695
<v Speaker 0>I

00:16:13.495 --> 00:16:15.894
<v Speaker 0>wanna see if we have anything running inside

00:16:15.894 --> 00:16:17.175
<v Speaker 0>of our namespace.

00:16:18.454 --> 00:16:20.454
<v Speaker 0>And it looks like we got

00:16:20.730 --> 00:16:23.690
<v Speaker 0>a core DNS running and a Rawkode live

00:16:23.690 --> 00:16:25.610
<v Speaker 0>zero. So that's the stateful set that Lucas

00:16:25.610 --> 00:16:27.050
<v Speaker 0>mentioned earlier.

00:16:27.770 --> 00:16:30.730
<v Speaker 0>Are those the only two modifications to my

00:16:30.730 --> 00:16:32.570
<v Speaker 0>cluster or is there something else?

00:16:34.375 --> 00:16:36.375
<v Speaker 2>You should see a service as well in

00:16:36.375 --> 00:16:37.255
<v Speaker 2>your cluster.

00:16:38.774 --> 00:16:40.135
<v Speaker 0>A service.

00:16:44.135 --> 00:16:45.575
<v Speaker 2>Yep. Oh, yeah. I mean, I guess two

00:16:45.575 --> 00:16:47.735
<v Speaker 2>services because it's a stateful set. You're also

00:16:47.735 --> 00:16:49.575
<v Speaker 2>gonna need the headless service. But yeah.

00:16:51.070 --> 00:16:51.950
<v Speaker 2>And then,

00:16:52.350 --> 00:16:54.430
<v Speaker 2>Eric, actually, what you see in terms of

00:16:54.430 --> 00:16:55.630
<v Speaker 2>DNS here,

00:16:56.110 --> 00:16:58.910
<v Speaker 2>that has already been deployed inside your vCluster

00:16:58.910 --> 00:16:59.790
<v Speaker 2>itself.

00:17:01.310 --> 00:17:02.910
<v Speaker 2>So that's kind of how you see how

00:17:02.910 --> 00:17:05.710
<v Speaker 2>things are met to the underlying cluster. So

00:17:05.244 --> 00:17:07.885
<v Speaker 2>everything you're creating inside the vCluster and the

00:17:07.885 --> 00:17:10.044
<v Speaker 2>first thing that vCluster does, it deploys DNS

00:17:10.044 --> 00:17:11.004
<v Speaker 2>to itself,

00:17:11.244 --> 00:17:11.964
<v Speaker 2>essentially,

00:17:13.565 --> 00:17:15.404
<v Speaker 2>is, you know, all the parts that are

00:17:15.404 --> 00:17:17.724
<v Speaker 2>being created and some of the services that

00:17:17.724 --> 00:17:19.484
<v Speaker 2>are being created inside the vCluster

00:17:19.730 --> 00:17:22.210
<v Speaker 2>will be synchronized down to your host namespace,

00:17:22.210 --> 00:17:23.650
<v Speaker 2>and that will be rewritten.

00:17:23.650 --> 00:17:25.890
<v Speaker 2>So you kinda see the cube systems or

00:17:25.890 --> 00:17:27.890
<v Speaker 2>the x cube system x here inside the

00:17:27.890 --> 00:17:28.369
<v Speaker 2>name

00:17:29.090 --> 00:17:31.810
<v Speaker 2>that actually shows you the namespace inside your

00:17:31.810 --> 00:17:34.795
<v Speaker 2>vCluster because we're mapping, you know, your 500

00:17:34.795 --> 00:17:36.955
<v Speaker 2>namespaces inside your vCluster

00:17:36.955 --> 00:17:38.635
<v Speaker 2>to a single namespace

00:17:38.795 --> 00:17:41.195
<v Speaker 2>inside your underlying cluster, essentially.

00:17:43.755 --> 00:17:45.195
<v Speaker 0>Alright. I wanna

00:17:45.769 --> 00:17:47.289
<v Speaker 0>digest this a little bit. I wanna make

00:17:47.289 --> 00:17:49.850
<v Speaker 0>sure I understand what's

00:17:49.850 --> 00:17:51.369
<v Speaker 0>happening here. So

00:17:51.690 --> 00:17:53.610
<v Speaker 0>I think the first thing I wanna make

00:17:53.610 --> 00:17:55.610
<v Speaker 0>clear to people is that if I run

00:17:55.610 --> 00:17:58.664
<v Speaker 0>pods instead of virtual cluster, those are still

00:17:58.664 --> 00:18:01.144
<v Speaker 0>just pods running on my host clusters. That's

00:18:01.144 --> 00:18:02.024
<v Speaker 0>correct. Right?

00:18:02.904 --> 00:18:04.024
<v Speaker 1>Yeah. Exactly.

00:18:04.265 --> 00:18:06.344
<v Speaker 2>So the cluster has no scheduler.

00:18:08.345 --> 00:18:09.865
<v Speaker 1>Yeah. So what it does is there's a

00:18:09.865 --> 00:18:12.105
<v Speaker 1>sinker that syncs those pods to the host

00:18:12.105 --> 00:18:13.304
<v Speaker 1>cluster. And so

00:18:13.940 --> 00:18:16.340
<v Speaker 1>as we as we get into it more

00:18:16.340 --> 00:18:18.179
<v Speaker 1>and, you know, you deploy something,

00:18:18.500 --> 00:18:20.420
<v Speaker 1>if you have something you can you can

00:18:20.420 --> 00:18:22.740
<v Speaker 1>run inside there, we can look at how

00:18:22.740 --> 00:18:23.460
<v Speaker 1>that looks.

00:18:24.900 --> 00:18:27.460
<v Speaker 0>Okay. I I I wanna clarify a few

00:18:27.460 --> 00:18:28.500
<v Speaker 0>more things before my

00:18:29.155 --> 00:18:31.395
<v Speaker 0>you know, that mind blowing emoji. Feel like

00:18:31.395 --> 00:18:32.515
<v Speaker 0>my head's gonna be doing that in a

00:18:32.515 --> 00:18:33.315
<v Speaker 0>minute. So

00:18:35.235 --> 00:18:38.435
<v Speaker 0>what we have in our Rawkode Live namespace

00:18:38.435 --> 00:18:40.915
<v Speaker 0>here, that I'm assuming that Rawkode Live stateful

00:18:40.915 --> 00:18:42.355
<v Speaker 0>set zero pod,

00:18:42.675 --> 00:18:43.955
<v Speaker 0>is that an API server?

00:18:46.470 --> 00:18:48.470
<v Speaker 2>Yes. I mean, there's a regular

00:18:48.630 --> 00:18:50.390
<v Speaker 2>k three s API server.

00:18:50.790 --> 00:18:54.470
<v Speaker 2>And, typically, it has a SQLite database, but

00:18:54.470 --> 00:18:56.310
<v Speaker 2>you could also you know, we expose all

00:18:56.310 --> 00:18:58.390
<v Speaker 2>the k three s flags, essentially. Right? So

00:18:58.390 --> 00:18:59.190
<v Speaker 2>you could essentially

00:19:00.554 --> 00:19:02.715
<v Speaker 2>use etcd as a back end, right, or

00:19:02.715 --> 00:19:05.354
<v Speaker 2>MySQL as a back end rather than SQLite.

00:19:05.355 --> 00:19:07.355
<v Speaker 2>But SQLite is the easiest and, you know,

00:19:07.355 --> 00:19:09.434
<v Speaker 2>quickest option for, you know, quick start, so

00:19:09.434 --> 00:19:11.674
<v Speaker 2>that's why that's the default option for us.

00:19:12.289 --> 00:19:13.090
<v Speaker 2>And then

00:19:13.890 --> 00:19:15.889
<v Speaker 2>you also have a controller manager.

00:19:16.770 --> 00:19:18.929
<v Speaker 2>It's all packaged in k three s essentially.

00:19:18.929 --> 00:19:20.450
<v Speaker 2>Right? That's kind of the power of k

00:19:20.450 --> 00:19:22.929
<v Speaker 2>three s packaging everything in that single binary.

00:19:24.130 --> 00:19:26.690
<v Speaker 2>And then the only thing that's missing in

00:19:26.690 --> 00:19:28.715
<v Speaker 2>terms of Kubernetes control control plane

00:19:28.795 --> 00:19:30.315
<v Speaker 2>is the scheduler.

00:19:30.315 --> 00:19:32.875
<v Speaker 2>Right? Because we don't have any separate nodes,

00:19:32.875 --> 00:19:35.115
<v Speaker 2>and we actually wanna, you know, deploy things

00:19:35.115 --> 00:19:36.795
<v Speaker 2>in our underlying cluster.

00:19:36.955 --> 00:19:38.235
<v Speaker 2>And instead of the,

00:19:38.555 --> 00:19:40.795
<v Speaker 2>you know, instead of the scheduler, we're using

00:19:40.795 --> 00:19:43.350
<v Speaker 2>a syncer. And that syncre monitors,

00:19:43.750 --> 00:19:46.230
<v Speaker 2>you know, what's happening inside the virtual cluster

00:19:46.470 --> 00:19:47.990
<v Speaker 2>and then synchronizes

00:19:47.990 --> 00:19:48.790
<v Speaker 2>resources

00:19:48.790 --> 00:19:50.790
<v Speaker 2>down to the host cluster to the same

00:19:50.790 --> 00:19:51.590
<v Speaker 2>namespace.

00:19:51.750 --> 00:19:53.590
<v Speaker 2>It rewrites certain things as you can see

00:19:53.590 --> 00:19:56.515
<v Speaker 2>with these partners, etcetera, you know, to provide

00:19:56.755 --> 00:19:59.395
<v Speaker 2>prevent naming conflicts because we're mapping to a

00:19:59.395 --> 00:20:00.514
<v Speaker 2>single namespace.

00:20:01.155 --> 00:20:03.155
<v Speaker 2>And on top of that, it synchronizes the

00:20:03.155 --> 00:20:05.875
<v Speaker 2>status of these objects back into the vCluster

00:20:06.115 --> 00:20:08.115
<v Speaker 2>so that if you're inside the vCluster,

00:20:08.560 --> 00:20:11.200
<v Speaker 2>you see, you know, image pull back off

00:20:11.200 --> 00:20:12.960
<v Speaker 2>and all these kind of statuses that your

00:20:12.960 --> 00:20:15.040
<v Speaker 2>pods can have, and it looks like a

00:20:15.040 --> 00:20:16.080
<v Speaker 2>regular cluster.

00:20:18.560 --> 00:20:21.280
<v Speaker 1>I was That's true. Mind blown emoji

00:20:21.465 --> 00:20:23.544
<v Speaker 1>when I started playing with this too. So

00:20:23.544 --> 00:20:24.585
<v Speaker 1>I definitely

00:20:24.664 --> 00:20:27.224
<v Speaker 1>get the feeling. It's it's super fun.

00:20:27.865 --> 00:20:29.304
<v Speaker 0>I I I think I've got a handle

00:20:29.304 --> 00:20:30.985
<v Speaker 0>on it now. So I'm gonna walk through

00:20:30.985 --> 00:20:32.745
<v Speaker 0>the life of a a pod on a

00:20:32.745 --> 00:20:34.664
<v Speaker 0>vCluster and if I get anything wrong, please

00:20:34.664 --> 00:20:35.945
<v Speaker 0>feel free to correct me.

00:20:36.825 --> 00:20:39.519
<v Speaker 0>But you know, you've got this KCS API

00:20:39.519 --> 00:20:41.919
<v Speaker 0>server running on the host cluster.

00:20:42.240 --> 00:20:42.799
<v Speaker 0>I

00:20:43.679 --> 00:20:44.959
<v Speaker 0>can add whatever

00:20:45.039 --> 00:20:47.440
<v Speaker 0>configurations to that I want through validating web

00:20:47.440 --> 00:20:50.000
<v Speaker 0>configurations, mutating web configurations. I can run my

00:20:50.000 --> 00:20:52.525
<v Speaker 0>own operators and controllers in it. I can

00:20:52.525 --> 00:20:54.764
<v Speaker 0>apply all my resources to it

00:20:55.165 --> 00:20:57.405
<v Speaker 0>and all of that just works and then

00:20:57.405 --> 00:20:59.565
<v Speaker 0>the magic sauce is the sinker then. So

00:20:59.405 --> 00:21:02.205
<v Speaker 0>it's just said in looking at the SQL

00:21:02.205 --> 00:21:04.285
<v Speaker 0>lite kind database in the KTS

00:21:04.990 --> 00:21:07.789
<v Speaker 0>and then propagating enough of that back to

00:21:07.789 --> 00:21:09.070
<v Speaker 0>the host cluster

00:21:09.390 --> 00:21:10.909
<v Speaker 0>to be able for the workloads to start

00:21:10.909 --> 00:21:12.590
<v Speaker 0>running, but then you also pull back through

00:21:12.590 --> 00:21:14.590
<v Speaker 0>the status updates from the host

00:21:14.909 --> 00:21:15.629
<v Speaker 0>cluster.

00:21:16.029 --> 00:21:18.305
<v Speaker 0>Does that ever lead to contention between what

00:21:18.305 --> 00:21:20.145
<v Speaker 0>the host cluster wants to do versus what

00:21:20.145 --> 00:21:22.465
<v Speaker 0>the KPS ever wants to do, or does

00:21:22.465 --> 00:21:25.184
<v Speaker 0>it just work very nicely and harmoniously?

00:21:26.625 --> 00:21:28.625
<v Speaker 2>Yeah. I mean, it works pretty nicely because

00:21:28.625 --> 00:21:30.065
<v Speaker 2>the responsibilities

00:21:30.065 --> 00:21:32.705
<v Speaker 2>are pretty isolated. Again, I mean, it's basically

00:21:32.705 --> 00:21:33.505
<v Speaker 2>just

00:21:33.800 --> 00:21:36.840
<v Speaker 2>a different kind of scheduler. Right? A scheduler

00:21:36.840 --> 00:21:39.960
<v Speaker 2>that instead of actually scheduling work scheduling workloads

00:21:39.960 --> 00:21:42.360
<v Speaker 2>is basically just copying workloads

00:21:42.760 --> 00:21:45.000
<v Speaker 2>to be handled by another scheduler.

00:21:45.400 --> 00:21:47.625
<v Speaker 2>That's what it's doing. I guess what I'm

00:21:47.625 --> 00:21:49.385
<v Speaker 0>thinking is like, if I have a

00:21:50.425 --> 00:21:52.825
<v Speaker 0>mutating web configuration

00:21:52.825 --> 00:21:54.985
<v Speaker 0>and the host cluster which is adding a

00:21:54.985 --> 00:21:56.745
<v Speaker 0>set of labels and then the host for

00:21:56.745 --> 00:21:59.065
<v Speaker 0>whatever reason has validating web hook which doesn't

00:21:59.065 --> 00:21:59.945
<v Speaker 0>allow those labels,

00:22:00.730 --> 00:22:02.649
<v Speaker 0>You then have to kinda navigate a little

00:22:02.649 --> 00:22:04.570
<v Speaker 0>bit of turbulence, but I think that is

00:22:04.570 --> 00:22:06.889
<v Speaker 0>so contrived that it probably just wouldn't happen.

00:22:08.330 --> 00:22:09.850
<v Speaker 0>But that's again, that's Yeah. I think it's

00:22:09.850 --> 00:22:12.330
<v Speaker 2>actually a super exciting scenario because, I mean,

00:22:12.330 --> 00:22:13.690
<v Speaker 2>that that's kind of the world where we're

00:22:13.690 --> 00:22:16.009
<v Speaker 2>coming from. You know, we we created vCluster.

00:22:16.815 --> 00:22:18.735
<v Speaker 2>Again, as which mentioned, was part of our

00:22:18.735 --> 00:22:22.014
<v Speaker 2>commercial product. Right? Our commercial product is essentially

00:22:22.255 --> 00:22:23.135
<v Speaker 2>provisioning

00:22:23.135 --> 00:22:26.654
<v Speaker 2>development environments in form of namespaces for engineering

00:22:26.654 --> 00:22:27.374
<v Speaker 2>teams

00:22:27.695 --> 00:22:30.174
<v Speaker 2>in a kind of self-service fashion. So, typically,

00:22:30.769 --> 00:22:32.610
<v Speaker 2>you have all these constraints that you just

00:22:32.610 --> 00:22:34.369
<v Speaker 2>mentioned. Right? You have network

00:22:34.690 --> 00:22:38.049
<v Speaker 2>policies. You have validating, mutating webhooks, etcetera. Whatever

00:22:38.049 --> 00:22:40.929
<v Speaker 2>your admin teams defines to, you know, security

00:22:40.929 --> 00:22:43.809
<v Speaker 2>operations of that shared multi tenant cluster that

00:22:43.809 --> 00:22:45.375
<v Speaker 2>a lot of the teams are, you know,

00:22:45.375 --> 00:22:47.055
<v Speaker 2>creating namespaces in now.

00:22:47.455 --> 00:22:49.535
<v Speaker 2>And then when you do that, you're restricting

00:22:49.535 --> 00:22:50.495
<v Speaker 2>your users.

00:22:50.815 --> 00:22:52.575
<v Speaker 2>And that's essentially what we think when we

00:22:52.575 --> 00:22:54.815
<v Speaker 2>were thinking about, hey. What if users need

00:22:54.815 --> 00:22:56.575
<v Speaker 2>to do things across namespaces?

00:22:56.730 --> 00:22:58.570
<v Speaker 2>Right? Now the network policy needs to be

00:22:58.570 --> 00:23:00.890
<v Speaker 2>adjusted for that particular use case. You know?

00:23:00.890 --> 00:23:02.330
<v Speaker 2>Are there things that we can do to

00:23:02.330 --> 00:23:04.410
<v Speaker 2>make those things easier? How can they deploy

00:23:04.410 --> 00:23:05.690
<v Speaker 2>their own CRDs?

00:23:05.929 --> 00:23:07.929
<v Speaker 2>You know, have their own controllers and work

00:23:07.929 --> 00:23:09.530
<v Speaker 2>on those kind of more advanced objects?

00:23:09.965 --> 00:23:11.725
<v Speaker 2>How can they mess around with r b,

00:23:11.725 --> 00:23:13.965
<v Speaker 2>you know, just because that should be part

00:23:13.965 --> 00:23:15.805
<v Speaker 2>of their, you know, helm chart that they

00:23:15.805 --> 00:23:17.725
<v Speaker 2>wanna, you know, check-in to get later on

00:23:17.725 --> 00:23:18.845
<v Speaker 2>or something like that.

00:23:19.485 --> 00:23:21.485
<v Speaker 2>And that's essentially you know, the answer to

00:23:21.485 --> 00:23:22.925
<v Speaker 2>those questions was vCluster

00:23:23.269 --> 00:23:25.590
<v Speaker 2>because you just need access to namespace, then

00:23:25.590 --> 00:23:26.870
<v Speaker 2>you deploy vCluster,

00:23:26.870 --> 00:23:28.709
<v Speaker 2>and now you're admin of that vCluster.

00:23:28.950 --> 00:23:30.389
<v Speaker 2>And, yes, you can add a lot of

00:23:30.389 --> 00:23:32.470
<v Speaker 2>things to that cluster. You can add, you

00:23:32.470 --> 00:23:35.029
<v Speaker 2>know, validating, mutation control, etcetera,

00:23:35.350 --> 00:23:38.225
<v Speaker 2>but you're still gonna be also validated and

00:23:38.225 --> 00:23:40.705
<v Speaker 2>mutated at the lower level. Right? That's actually

00:23:40.705 --> 00:23:42.544
<v Speaker 2>the beauty of this because, I mean, your

00:23:42.544 --> 00:23:45.985
<v Speaker 2>pop gets checked twice. Right? Because the syncor

00:23:45.985 --> 00:23:47.984
<v Speaker 2>connects to your underlying cluster

00:23:47.985 --> 00:23:51.080
<v Speaker 2>and basically does a QTTL request. Right? And

00:23:51.080 --> 00:23:52.680
<v Speaker 2>if that fails, you're gonna see that in

00:23:52.680 --> 00:23:54.840
<v Speaker 2>the status of the of the virtual cluster

00:23:54.840 --> 00:23:57.320
<v Speaker 2>as well. So it's transparent to the user.

00:23:57.320 --> 00:23:57.799
<v Speaker 2>Right?

00:23:58.520 --> 00:24:00.280
<v Speaker 2>But, yeah, I mean, there are different there

00:24:00.280 --> 00:24:02.520
<v Speaker 2>are more layers now that, you know, you

00:24:02.520 --> 00:24:04.680
<v Speaker 2>can add these, you know, constraints essentially.

00:24:05.855 --> 00:24:08.015
<v Speaker 0>Yeah. I guess that's almost a double edged

00:24:08.015 --> 00:24:10.175
<v Speaker 0>sword as well. I can imagine a situation

00:24:10.175 --> 00:24:12.495
<v Speaker 0>where people may think, I'll use the virtual

00:24:12.495 --> 00:24:15.055
<v Speaker 0>cluster so I can run containers as root,

00:24:15.055 --> 00:24:17.215
<v Speaker 0>but the host cluster may have a policy

00:24:17.215 --> 00:24:19.830
<v Speaker 0>that doesn't allow that. So not violating the

00:24:19.830 --> 00:24:21.590
<v Speaker 0>host policy, it's still gonna block it, but

00:24:21.590 --> 00:24:23.430
<v Speaker 0>at least they can try in the virtual

00:24:23.430 --> 00:24:24.149
<v Speaker 0>cluster,

00:24:24.309 --> 00:24:26.230
<v Speaker 0>which is quite interesting. I

00:24:26.950 --> 00:24:27.750
<v Speaker 0>like that.

00:24:28.950 --> 00:24:30.309
<v Speaker 0>Okay. Yeah. And I mean I mean, I

00:24:30.309 --> 00:24:32.070
<v Speaker 0>think as a as a user

00:24:32.295 --> 00:24:34.055
<v Speaker 1>I think as a user, you would wanna

00:24:34.055 --> 00:24:36.775
<v Speaker 1>get educated about what those policies are anyway.

00:24:36.775 --> 00:24:39.095
<v Speaker 1>Right? Oh, yeah. Because eventually,

00:24:39.095 --> 00:24:40.855
<v Speaker 1>the things that you're playing around with are

00:24:40.855 --> 00:24:43.335
<v Speaker 1>gonna hopefully, you know, land in production, and

00:24:43.335 --> 00:24:45.335
<v Speaker 1>you're gonna be under the same kind of

00:24:45.895 --> 00:24:46.295
<v Speaker 1>constraints.

00:24:48.710 --> 00:24:49.349
<v Speaker 0>Okay.

00:24:50.149 --> 00:24:52.470
<v Speaker 0>I'm curious. And instead of asking a question,

00:24:52.470 --> 00:24:55.669
<v Speaker 0>let's let's do something with our vCluster and

00:24:55.669 --> 00:24:56.950
<v Speaker 0>see what happens.

00:24:57.750 --> 00:24:58.710
<v Speaker 0>I'm assuming

00:24:58.870 --> 00:25:00.230
<v Speaker 0>and I know I should probably go back

00:25:00.230 --> 00:25:01.429
<v Speaker 0>to the docs. In fact, I will go

00:25:01.429 --> 00:25:03.325
<v Speaker 0>back to the docs. Unless it doesn't do

00:25:03.325 --> 00:25:04.365
<v Speaker 0>what I want to do next, in which

00:25:04.365 --> 00:25:06.205
<v Speaker 0>case I'll go off script again. But

00:25:08.684 --> 00:25:10.445
<v Speaker 0>oh, so we can do a connect.

00:25:12.125 --> 00:25:13.725
<v Speaker 0>That is gonna do it. Right? This is

00:25:13.725 --> 00:25:15.005
<v Speaker 0>what I was curious about.

00:25:15.620 --> 00:25:17.140
<v Speaker 0>When I connect to the virtual cluster and

00:25:17.140 --> 00:25:19.220
<v Speaker 0>I create a namespace, what happens on the

00:25:19.220 --> 00:25:20.420
<v Speaker 0>host cluster?

00:25:20.500 --> 00:25:23.300
<v Speaker 0>I'm assuming you create a namespace there and

00:25:23.300 --> 00:25:25.620
<v Speaker 0>there's a mapping between the two, but maybe

00:25:25.620 --> 00:25:26.420
<v Speaker 0>I'm wrong.

00:25:26.980 --> 00:25:29.140
<v Speaker 0>So let's do this connect command first. And

00:25:29.140 --> 00:25:32.095
<v Speaker 0>this is where I'm gonna regret changing the

00:25:32.095 --> 00:25:33.535
<v Speaker 0>name of the cluster because now I have

00:25:33.535 --> 00:25:34.894
<v Speaker 0>to change all of my commands.

00:25:38.335 --> 00:25:40.575
<v Speaker 0>There's a rookie error, but

00:25:41.215 --> 00:25:41.455
<v Speaker 0>oh,

00:25:42.380 --> 00:25:44.540
<v Speaker 0>I'm not gonna pressure turn on that because

00:25:44.540 --> 00:25:47.020
<v Speaker 0>this creates a kube config dot yaml

00:25:47.180 --> 00:25:48.860
<v Speaker 0>and I may have one of those.

00:25:52.700 --> 00:25:54.860
<v Speaker 0>Do I? It creates it in your local

00:25:54.860 --> 00:25:57.684
<v Speaker 2>directory though. Yeah. This is a cluster API

00:25:57.684 --> 00:25:59.445
<v Speaker 0>cluster, and I have a KubeCon. Oh, but

00:25:59.445 --> 00:26:01.684
<v Speaker 0>not not a YAML. Okay. We should be

00:26:01.684 --> 00:26:02.244
<v Speaker 0>okay.

00:26:03.284 --> 00:26:04.244
<v Speaker 0>I

00:26:05.845 --> 00:26:07.205
<v Speaker 0>was worried I was gonna blow away my

00:26:07.205 --> 00:26:08.565
<v Speaker 0>KubeConfig, and that would have been the end

00:26:08.565 --> 00:26:10.405
<v Speaker 0>of our session, but we should be alright.

00:26:16.779 --> 00:26:18.460
<v Speaker 0>Okay. What do we got? We got a

00:26:18.460 --> 00:26:21.100
<v Speaker 0>config written to dot YAML, so we're safe.

00:26:21.100 --> 00:26:22.700
<v Speaker 0>We can access the cluster

00:26:23.500 --> 00:26:25.419
<v Speaker 0>by using the config

00:26:26.975 --> 00:26:29.295
<v Speaker 0>and it started up port forward. So do

00:26:29.295 --> 00:26:30.735
<v Speaker 0>I need to leave that port forward running

00:26:30.735 --> 00:26:32.815
<v Speaker 0>to interact with the cluster?

00:26:32.815 --> 00:26:35.135
<v Speaker 0>Yeah. Okay. Yeah. You're gonna wanna do that.

00:26:39.330 --> 00:26:41.009
<v Speaker 0>Come on computer. There we go.

00:26:42.130 --> 00:26:43.649
<v Speaker 0>So kip

00:26:43.730 --> 00:26:44.370
<v Speaker 0>config.

00:26:52.775 --> 00:26:53.734
<v Speaker 0>Look at that.

00:26:57.575 --> 00:26:59.095
<v Speaker 0>I mean, that's a bit weird to forget

00:26:59.095 --> 00:27:01.414
<v Speaker 0>pods all, but I understand why.

00:27:02.215 --> 00:27:03.895
<v Speaker 0>I would be very worried if this was

00:27:03.895 --> 00:27:05.575
<v Speaker 0>cluster and that's all I could see, but

00:27:05.575 --> 00:27:07.335
<v Speaker 0>this is what we expect, so I'm happy

00:27:07.335 --> 00:27:09.419
<v Speaker 0>with that. Well, I'm gonna

00:27:09.900 --> 00:27:11.820
<v Speaker 0>create namespace.

00:27:13.100 --> 00:27:14.860
<v Speaker 0>I'm gonna try and trip it up just

00:27:14.860 --> 00:27:16.300
<v Speaker 0>because I like to do that.

00:27:20.115 --> 00:27:20.914
<v Speaker 0>Alright.

00:27:21.075 --> 00:27:22.355
<v Speaker 0>So that did work.

00:27:25.395 --> 00:27:27.475
<v Speaker 0>Let's run cat names basis.

00:27:28.755 --> 00:27:30.835
<v Speaker 0>And I'm gonna do that again on

00:27:32.195 --> 00:27:32.835
<v Speaker 0>Yeah. Yeah.

00:27:37.090 --> 00:27:37.970
<v Speaker 0>Okay.

00:27:37.970 --> 00:27:38.529
<v Speaker 0>So

00:27:39.810 --> 00:27:42.370
<v Speaker 0>interesting. It's not what I expected, so maybe

00:27:42.370 --> 00:27:43.890
<v Speaker 0>we could dive into that a little bit.

00:27:43.890 --> 00:27:45.810
<v Speaker 0>When I create a namespace on the virtual

00:27:45.810 --> 00:27:46.210
<v Speaker 0>cluster,

00:27:47.554 --> 00:27:49.554
<v Speaker 0>you either don't create it on a host

00:27:49.554 --> 00:27:51.635
<v Speaker 0>cluster until I add some workloads to it

00:27:51.635 --> 00:27:53.315
<v Speaker 0>or you just don't create it at all.

00:27:53.315 --> 00:27:55.234
<v Speaker 0>You wanna dive into that a wee bit?

00:27:56.674 --> 00:27:59.394
<v Speaker 2>Yeah. We don't create it at all essentially.

00:27:59.475 --> 00:28:02.035
<v Speaker 2>So what we do is we map your

00:28:02.210 --> 00:28:05.010
<v Speaker 2>x namespaces inside the vCluster

00:28:05.250 --> 00:28:08.050
<v Speaker 2>to the single namespace where the vCluster

00:28:08.050 --> 00:28:10.130
<v Speaker 2>state for set is deployed to.

00:28:10.770 --> 00:28:13.330
<v Speaker 2>So no matter how many namespaces you create,

00:28:13.330 --> 00:28:14.450
<v Speaker 2>all the pods

00:28:14.595 --> 00:28:17.315
<v Speaker 2>that you create in these namespaces end up

00:28:17.315 --> 00:28:19.315
<v Speaker 2>in the same namespace in the underlying host

00:28:19.315 --> 00:28:20.034
<v Speaker 2>cluster.

00:28:21.155 --> 00:28:23.155
<v Speaker 0>Of course. Because you can use vCluster when

00:28:23.155 --> 00:28:24.914
<v Speaker 0>you only have access to a namespace. I

00:28:24.914 --> 00:28:26.835
<v Speaker 0>didn't think of that. You you do confine

00:28:26.835 --> 00:28:29.155
<v Speaker 0>everything to that boundary, which makes a lot

00:28:29.155 --> 00:28:30.520
<v Speaker 0>of sense. Exactly.

00:28:30.520 --> 00:28:31.960
<v Speaker 2>When when you create a name What is

00:28:31.960 --> 00:28:34.120
<v Speaker 2>this? That's a request to the k three

00:28:34.120 --> 00:28:36.280
<v Speaker 2>s API server, and it's stored in your

00:28:36.280 --> 00:28:39.000
<v Speaker 2>SQLite or, you know, etcd or MySQL or

00:28:39.000 --> 00:28:40.280
<v Speaker 2>whatever is the back end for your k

00:28:40.280 --> 00:28:41.720
<v Speaker 2>three s API server,

00:28:41.960 --> 00:28:42.919
<v Speaker 2>and that's it.

00:28:43.560 --> 00:28:44.600
<v Speaker 2>Nothing else happens.

00:28:46.895 --> 00:28:48.894
<v Speaker 0>Were you gonna say something You

00:28:49.295 --> 00:28:51.295
<v Speaker 1>can literally delete that namespace

00:28:51.295 --> 00:28:52.735
<v Speaker 1>and everything goes away.

00:28:54.895 --> 00:28:55.695
<v Speaker 0>Alright.

00:28:56.575 --> 00:28:59.054
<v Speaker 0>So we also got a question from Rio

00:28:59.054 --> 00:29:00.800
<v Speaker 0>in the chat, which I think we've just

00:29:00.800 --> 00:29:02.480
<v Speaker 0>answered, but I'll throw up anyway and you

00:29:02.480 --> 00:29:03.920
<v Speaker 0>can feel free to add any extra flavor

00:29:03.920 --> 00:29:06.080
<v Speaker 0>to that as you want. But Rio says,

00:29:06.560 --> 00:29:09.360
<v Speaker 0>so a user who deploys vCluster only needs

00:29:09.360 --> 00:29:12.240
<v Speaker 0>to have admin role bindings to a single

00:29:12.240 --> 00:29:12.960
<v Speaker 0>namespace.

00:29:15.595 --> 00:29:18.554
<v Speaker 2>That is correct. Yeah. That's essentially the core

00:29:18.554 --> 00:29:20.875
<v Speaker 2>story for for vCluster. As as long as

00:29:20.875 --> 00:29:23.195
<v Speaker 2>you can create, you know, a stateful set

00:29:23.595 --> 00:29:26.235
<v Speaker 2>and a service inside a namespace, you can

00:29:26.394 --> 00:29:27.595
<v Speaker 2>and, I mean, you have to have the

00:29:27.595 --> 00:29:29.340
<v Speaker 2>privilege to also do port forwarding if you

00:29:29.340 --> 00:29:31.580
<v Speaker 2>wanna connect to the g cluster, obviously.

00:29:31.900 --> 00:29:33.580
<v Speaker 2>But other than that, yeah, you don't need

00:29:33.580 --> 00:29:35.500
<v Speaker 2>any privileges. So if you have admin role

00:29:35.500 --> 00:29:38.059
<v Speaker 2>binding in that particular namespace,

00:29:39.180 --> 00:29:40.940
<v Speaker 2>then you can deploy the cluster.

00:29:42.554 --> 00:29:45.354
<v Speaker 0>Alright. And Noel has a comment. I'll pop

00:29:45.434 --> 00:29:46.955
<v Speaker 0>up, but I think we kinda just answered

00:29:46.955 --> 00:29:49.914
<v Speaker 0>that as well. Noel is saying that the

00:29:49.914 --> 00:29:53.115
<v Speaker 0>the sinker just manages everything from the vCluster

00:29:53.115 --> 00:29:54.075
<v Speaker 0>namespace

00:29:54.235 --> 00:29:55.195
<v Speaker 0>back to the host.

00:29:56.400 --> 00:29:59.200
<v Speaker 1>Do you wanna talk, Lucas, about which which

00:29:59.200 --> 00:30:00.880
<v Speaker 1>objects get synced?

00:30:02.320 --> 00:30:04.559
<v Speaker 2>Yeah. So there is essentially

00:30:05.040 --> 00:30:07.840
<v Speaker 2>we kind of differentiate a little bit between

00:30:08.400 --> 00:30:10.480
<v Speaker 2>you know? And we have a separate docs

00:30:10.480 --> 00:30:11.680
<v Speaker 2>page about that as well

00:30:12.395 --> 00:30:13.195
<v Speaker 2>regarding

00:30:13.515 --> 00:30:16.075
<v Speaker 2>high level and low level resources in Kubernetes.

00:30:16.395 --> 00:30:18.554
<v Speaker 2>So we see the lower level resources,

00:30:19.115 --> 00:30:20.634
<v Speaker 2>like parts and service,

00:30:21.195 --> 00:30:24.395
<v Speaker 2>different from higher abstracted resources like, you know,

00:30:24.395 --> 00:30:28.200
<v Speaker 2>deployments or stateful sets or even CRDs. Right?

00:30:29.320 --> 00:30:31.959
<v Speaker 2>And what we need to sync is essentially

00:30:32.600 --> 00:30:33.479
<v Speaker 2>parts,

00:30:34.120 --> 00:30:34.919
<v Speaker 2>services,

00:30:35.320 --> 00:30:38.279
<v Speaker 2>and everything that parts need to run. So

00:30:38.279 --> 00:30:41.475
<v Speaker 2>let's say you mount a secret. Right?

00:30:41.715 --> 00:30:43.555
<v Speaker 2>Then we may need to sync that secret.

00:30:43.555 --> 00:30:45.475
<v Speaker 2>Right? Otherwise, we can't mount it.

00:30:46.275 --> 00:30:47.955
<v Speaker 2>Or if you mount a config map, it's

00:30:47.955 --> 00:30:48.995
<v Speaker 2>the same scenario.

00:30:49.155 --> 00:30:51.555
<v Speaker 2>But all the other 500 secrets and config

00:30:51.555 --> 00:30:53.395
<v Speaker 2>maps you may have in your vCluster don't

00:30:53.395 --> 00:30:55.420
<v Speaker 2>need to be synchronized. So we're pretty selective

00:30:55.420 --> 00:30:57.260
<v Speaker 2>in what needs to be synchronized.

00:30:57.420 --> 00:30:59.660
<v Speaker 2>But, obviously, we need to synchronize everything that's

00:30:59.660 --> 00:31:02.380
<v Speaker 2>required to actually start a certain part,

00:31:03.020 --> 00:31:05.500
<v Speaker 2>and we need to synchronize services just so

00:31:05.500 --> 00:31:07.100
<v Speaker 2>that we can make networking

00:31:07.340 --> 00:31:10.485
<v Speaker 2>between your parts inside the vCluster work and

00:31:10.485 --> 00:31:12.804
<v Speaker 2>that they also, you know, can communicate,

00:31:13.445 --> 00:31:15.445
<v Speaker 2>you know, via services rather than just on

00:31:15.445 --> 00:31:18.004
<v Speaker 2>an IP based level between each other.

00:31:21.525 --> 00:31:23.525
<v Speaker 0>Okay. That makes a lot of sense. I

00:31:23.525 --> 00:31:26.725
<v Speaker 0>think it really smart that kind of selective

00:31:26.220 --> 00:31:28.460
<v Speaker 0>sync based on whether something is is actually

00:31:28.460 --> 00:31:30.539
<v Speaker 0>being consumed or used is really clever.

00:31:31.980 --> 00:31:32.619
<v Speaker 0>I mean,

00:31:33.659 --> 00:31:35.659
<v Speaker 0>is there things that cause problems here? I'm

00:31:35.659 --> 00:31:37.419
<v Speaker 0>thinking storage and CSI

00:31:38.299 --> 00:31:39.100
<v Speaker 0>plugins

00:31:39.655 --> 00:31:41.735
<v Speaker 0>like, I guess, that you have access to

00:31:41.735 --> 00:31:43.415
<v Speaker 0>whatever the host has, or is there something

00:31:43.415 --> 00:31:44.695
<v Speaker 0>a bit different there?

00:31:45.815 --> 00:31:48.055
<v Speaker 2>Yeah. I mean, that's typically I mean, you

00:31:48.055 --> 00:31:51.414
<v Speaker 2>can have so, essentially, the vCluster

00:31:51.495 --> 00:31:53.495
<v Speaker 2>can have a subset of things that are

00:31:53.495 --> 00:31:53.895
<v Speaker 2>available

00:31:54.470 --> 00:31:56.950
<v Speaker 2>in your host cluster that depends on the

00:31:56.950 --> 00:31:58.710
<v Speaker 2>configuration. Right? So, essentially,

00:31:59.030 --> 00:32:01.830
<v Speaker 2>think about it like a storage class. Right?

00:32:02.950 --> 00:32:04.710
<v Speaker 2>If we if you were to use a

00:32:04.710 --> 00:32:05.750
<v Speaker 2>storage class

00:32:05.990 --> 00:32:07.750
<v Speaker 2>and you wanna create

00:32:08.230 --> 00:32:10.145
<v Speaker 2>a a persistent volume claim, for example, in

00:32:10.145 --> 00:32:12.145
<v Speaker 2>your in your vCluster,

00:32:12.225 --> 00:32:14.385
<v Speaker 2>you gotta have that storage class. Otherwise, you

00:32:14.385 --> 00:32:15.585
<v Speaker 2>can't use it. Right?

00:32:16.065 --> 00:32:17.825
<v Speaker 2>Otherwise, it does it simply doesn't work in

00:32:17.825 --> 00:32:18.625
<v Speaker 2>Kubernetes.

00:32:19.185 --> 00:32:20.705
<v Speaker 2>And that storage class,

00:32:21.265 --> 00:32:22.785
<v Speaker 2>you know, obviously needs to

00:32:23.360 --> 00:32:24.080
<v Speaker 2>be

00:32:24.240 --> 00:32:26.560
<v Speaker 2>from your underlying host cluster because that's where

00:32:26.560 --> 00:32:28.320
<v Speaker 2>that part actually got started.

00:32:28.480 --> 00:32:30.400
<v Speaker 2>So you can't just come up with, you

00:32:30.400 --> 00:32:30.880
<v Speaker 2>know,

00:32:32.000 --> 00:32:34.640
<v Speaker 2>other resources not available in your host cluster

00:32:34.640 --> 00:32:38.560
<v Speaker 2>regarding, you know, actual part workloads and volumes,

00:32:38.560 --> 00:32:38.800
<v Speaker 2>etcetera.

00:32:41.095 --> 00:32:42.534
<v Speaker 0>Alright. That makes makes

00:32:43.015 --> 00:32:43.894
<v Speaker 0>a lot of sense.

00:32:44.935 --> 00:32:47.895
<v Speaker 0>We got a comment from Rio who's obviously

00:32:47.895 --> 00:32:50.215
<v Speaker 0>very excited for their go to custom Docker

00:32:50.215 --> 00:32:52.389
<v Speaker 0>and Cain CI setup. So

00:32:52.630 --> 00:32:54.470
<v Speaker 0>we've got a we've got a vClusterConvert

00:32:54.470 --> 00:32:56.390
<v Speaker 0>already. I'm really half of their end. That's

00:32:56.390 --> 00:32:56.870
<v Speaker 0>awesome.

00:32:57.270 --> 00:32:59.510
<v Speaker 1>I I do wanna say that we love

00:32:59.510 --> 00:33:00.309
<v Speaker 1>kind.

00:33:00.310 --> 00:33:02.630
<v Speaker 1>Like, it's an amazing project and it's done

00:33:02.630 --> 00:33:03.750
<v Speaker 1>so much for the community.

00:33:04.555 --> 00:33:07.515
<v Speaker 1>I definitely think they're you know, vCluster isn't

00:33:07.515 --> 00:33:08.395
<v Speaker 1>necessarily

00:33:08.395 --> 00:33:10.875
<v Speaker 1>the right tool for every situation, but

00:33:11.195 --> 00:33:12.795
<v Speaker 1>but I do really like it for that

00:33:12.795 --> 00:33:14.395
<v Speaker 1>CI use case for sure.

00:33:15.835 --> 00:33:16.235
<v Speaker 0>Nice.

00:33:17.030 --> 00:33:19.590
<v Speaker 0>We got a security question from Noel in

00:33:19.590 --> 00:33:20.389
<v Speaker 0>the chat

00:33:20.710 --> 00:33:23.590
<v Speaker 0>who is asking whether the KCS API server

00:33:23.590 --> 00:33:25.509
<v Speaker 0>runs as a non root.

00:33:25.750 --> 00:33:27.590
<v Speaker 0>And they're wondering about potential,

00:33:28.150 --> 00:33:29.909
<v Speaker 0>you know, user breaking out of the virtual

00:33:29.909 --> 00:33:31.510
<v Speaker 0>cluster into the host cluster and whether that

00:33:31.510 --> 00:33:32.230
<v Speaker 0>should be a concern.

00:33:34.924 --> 00:33:37.325
<v Speaker 2>That's actually a pretty good question. I'd have

00:33:37.325 --> 00:33:37.804
<v Speaker 2>to

00:33:38.445 --> 00:33:40.604
<v Speaker 2>look pretty deep in the code myself.

00:33:41.644 --> 00:33:43.484
<v Speaker 2>Don't know what the answer to that is.

00:33:44.044 --> 00:33:46.845
<v Speaker 2>I assume if you can run it without

00:33:46.845 --> 00:33:49.400
<v Speaker 2>root, it would be possible with vCluster as

00:33:49.400 --> 00:33:49.880
<v Speaker 2>well.

00:33:50.200 --> 00:33:51.800
<v Speaker 2>I don't know if that's it's the default

00:33:51.800 --> 00:33:52.919
<v Speaker 2>for us or not.

00:33:54.360 --> 00:33:57.240
<v Speaker 0>I guess they're still contained with the the

00:33:57.240 --> 00:33:59.640
<v Speaker 0>namespace that vCluster was deployed to as well.

00:33:59.640 --> 00:34:01.480
<v Speaker 0>So if you got your Rawk policy Rawkode

00:34:01.480 --> 00:34:04.434
<v Speaker 0>policies correct there, you know, it's it's pretty

00:34:04.434 --> 00:34:05.794
<v Speaker 0>strict, I would imagine.

00:34:06.674 --> 00:34:08.594
<v Speaker 1>I actually Yeah. I assume that have some

00:34:08.915 --> 00:34:11.234
<v Speaker 2>is just a single binary as well. So

00:34:11.234 --> 00:34:13.074
<v Speaker 2>even if you, you know, were to break

00:34:13.074 --> 00:34:15.715
<v Speaker 2>out of the actual process there or something,

00:34:16.275 --> 00:34:18.900
<v Speaker 2>you'd end up in a probably, like, distroless

00:34:18.900 --> 00:34:20.820
<v Speaker 2>container. I assume that's how k three s

00:34:20.820 --> 00:34:22.099
<v Speaker 2>is packaged, but I'd have to look in

00:34:22.099 --> 00:34:24.020
<v Speaker 2>how they're packaging things because we are basically

00:34:24.020 --> 00:34:26.179
<v Speaker 2>just using, you know, the image off of

00:34:26.179 --> 00:34:27.540
<v Speaker 2>Docker Hub. So I don't know if it

00:34:27.540 --> 00:34:29.780
<v Speaker 2>runs with the root user or, you know,

00:34:29.780 --> 00:34:30.739
<v Speaker 2>what's inside of there.

00:34:32.885 --> 00:34:34.484
<v Speaker 1>Yeah. I don't I don't know the the

00:34:34.484 --> 00:34:36.005
<v Speaker 1>answer to that question either, but I do

00:34:36.005 --> 00:34:38.005
<v Speaker 1>have some friends that are pretty security

00:34:38.005 --> 00:34:40.085
<v Speaker 1>minded that we're playing around with it. And

00:34:40.085 --> 00:34:42.085
<v Speaker 1>the thing that they emphasized is

00:34:42.484 --> 00:34:44.725
<v Speaker 1>the importance of doing admission control,

00:34:44.885 --> 00:34:46.165
<v Speaker 1>you know, on the host cluster.

00:34:48.290 --> 00:34:49.810
<v Speaker 0>Yeah. That makes a lot of sense too,

00:34:49.810 --> 00:34:50.610
<v Speaker 0>definitely.

00:34:52.130 --> 00:34:52.850
<v Speaker 0>Okay.

00:34:53.250 --> 00:34:55.330
<v Speaker 0>I deterred this a little bit there, so

00:34:55.330 --> 00:34:57.410
<v Speaker 0>let's jump back to our Get Started Guides.

00:34:58.930 --> 00:35:00.795
<v Speaker 0>So we did the namespace,

00:35:00.795 --> 00:35:03.115
<v Speaker 0>we checked that out, we created a namespace.

00:35:03.115 --> 00:35:06.075
<v Speaker 0>Now we're gonna deploy our first workload to

00:35:06.075 --> 00:35:07.275
<v Speaker 0>our virtual

00:35:07.515 --> 00:35:08.315
<v Speaker 0>cluster.

00:35:10.234 --> 00:35:12.555
<v Speaker 0>So I'll need to change this a little

00:35:12.555 --> 00:35:12.795
<v Speaker 0>bit.

00:35:17.860 --> 00:35:19.220
<v Speaker 0>Oh,

00:35:23.620 --> 00:35:24.420
<v Speaker 0>it's the namespace.

00:35:28.775 --> 00:35:31.335
<v Speaker 0>Oh yeah. Because I decided just to trick

00:35:31.335 --> 00:35:31.895
<v Speaker 0>it.

00:35:33.815 --> 00:35:34.535
<v Speaker 0>See

00:35:35.015 --> 00:35:36.295
<v Speaker 0>and then the image. Okay.

00:35:40.270 --> 00:35:43.069
<v Speaker 0>Awesome. So we should be able to run

00:35:43.069 --> 00:35:45.230
<v Speaker 0>get pods all namespaces.

00:35:46.349 --> 00:35:48.750
<v Speaker 0>And we have an NGINX pod being spun

00:35:48.750 --> 00:35:51.069
<v Speaker 0>up and a Rawkode live namespace inside a

00:35:51.069 --> 00:35:53.790
<v Speaker 0>Rawkode live virtual cluster inside a Rawkode live

00:35:53.790 --> 00:35:54.430
<v Speaker 0>namespace.

00:35:55.045 --> 00:35:55.845
<v Speaker 0>Easy.

00:35:57.365 --> 00:35:59.525
<v Speaker 1>It's a lot of Rawkode live going on

00:35:59.525 --> 00:36:02.885
<v Speaker 1>here. Yeah. I'm I'm starting to Rawkode live

00:36:02.885 --> 00:36:03.685
<v Speaker 1>inception.

00:36:04.005 --> 00:36:06.165
<v Speaker 0>There's a lot of inception vibes going on

00:36:06.165 --> 00:36:06.965
<v Speaker 0>here, that's for sure.

00:36:08.160 --> 00:36:09.600
<v Speaker 0>So let's run.

00:36:10.079 --> 00:36:12.319
<v Speaker 0>I just like seeing what happens on my

00:36:12.319 --> 00:36:14.800
<v Speaker 0>host. I'm assuming based on all the conversation

00:36:14.800 --> 00:36:16.480
<v Speaker 0>we've had now is what I expect to

00:36:16.480 --> 00:36:19.200
<v Speaker 0>see is in my Rawkode live host namespace.

00:36:19.200 --> 00:36:21.280
<v Speaker 0>There to be a pod that's potentially called

00:36:21.280 --> 00:36:23.359
<v Speaker 0>Rawkode live Rawkode live Rawkode live.

00:36:25.345 --> 00:36:28.305
<v Speaker 0>Because it would be namespace vClusterName

00:36:28.704 --> 00:36:30.065
<v Speaker 0>and pod.

00:36:31.184 --> 00:36:32.305
<v Speaker 0>That sound right?

00:36:33.664 --> 00:36:35.585
<v Speaker 3>Yeah. Pretty much. That should be what it

00:36:35.585 --> 00:36:36.785
<v Speaker 3>was looking like. Yeah.

00:36:37.599 --> 00:36:40.160
<v Speaker 0>Oh, we don't wanna do all namespaces here.

00:36:40.160 --> 00:36:41.360
<v Speaker 0>We wanna see

00:36:41.680 --> 00:36:42.400
<v Speaker 0>here.

00:36:44.640 --> 00:36:46.240
<v Speaker 0>Oh, no. Okay. So I never called my

00:36:46.240 --> 00:36:47.839
<v Speaker 0>engine x deployment Rawkode live. I should have.

00:36:47.839 --> 00:36:49.440
<v Speaker 0>I missed the trick. But we got Rawkode

00:36:49.440 --> 00:36:50.880
<v Speaker 0>live, Rawkode live. There you go.

00:36:52.945 --> 00:36:54.705
<v Speaker 0>That is cool. I like that.

00:36:56.865 --> 00:36:57.505
<v Speaker 0>And

00:36:58.225 --> 00:36:59.345
<v Speaker 0>yeah. So

00:36:59.825 --> 00:37:02.065
<v Speaker 0>the secret sauce is the sinker. Right? The

00:37:02.065 --> 00:37:03.345
<v Speaker 0>sinker is the one that does all of

00:37:03.345 --> 00:37:05.190
<v Speaker 0>the magic here. It feels to me like

00:37:05.190 --> 00:37:07.670
<v Speaker 0>there's so many there could be more applications

00:37:07.670 --> 00:37:11.510
<v Speaker 0>to this sinker than maybe just virtual clusters.

00:37:11.830 --> 00:37:14.390
<v Speaker 0>Like, I'm thinking maybe cluster federation

00:37:14.390 --> 00:37:17.190
<v Speaker 0>or disaster recovery and being able to copy

00:37:17.190 --> 00:37:17.750
<v Speaker 0>stuff over.

00:37:18.635 --> 00:37:20.315
<v Speaker 0>It feels like that could be applied in

00:37:20.315 --> 00:37:22.395
<v Speaker 0>actually maybe a couple of different ways.

00:37:24.234 --> 00:37:25.915
<v Speaker 2>Yeah. It's actually pretty crazy.

00:37:26.315 --> 00:37:28.714
<v Speaker 2>Again, I mean, since we it's even crazier

00:37:28.714 --> 00:37:30.954
<v Speaker 2>since we open source vCluster,

00:37:30.954 --> 00:37:32.555
<v Speaker 2>but even before as part of the commercial

00:37:32.555 --> 00:37:34.690
<v Speaker 2>product, it's crazy what people, you know, come

00:37:34.690 --> 00:37:36.690
<v Speaker 2>up with in terms of ideas. And

00:37:37.410 --> 00:37:39.890
<v Speaker 2>so far, you know, we started with essentially

00:37:39.890 --> 00:37:41.890
<v Speaker 2>virtual clusters as

00:37:42.050 --> 00:37:44.690
<v Speaker 2>a way to, you know, give extra privileges

00:37:44.690 --> 00:37:47.010
<v Speaker 2>to users that are confined to a namespace,

00:37:47.010 --> 00:37:47.330
<v Speaker 2>typically.

00:37:48.285 --> 00:37:50.125
<v Speaker 2>But then the next question is is the

00:37:50.125 --> 00:37:51.805
<v Speaker 2>one that that you are asking

00:37:52.125 --> 00:37:53.964
<v Speaker 2>that that a couple of folks have asked

00:37:53.964 --> 00:37:56.525
<v Speaker 2>us as well is, you know, can't we

00:37:56.684 --> 00:37:57.484
<v Speaker 2>back

00:37:57.484 --> 00:37:58.605
<v Speaker 2>at vCluster

00:37:58.605 --> 00:37:59.565
<v Speaker 2>by different

00:38:00.090 --> 00:38:03.530
<v Speaker 2>physical clusters. Right? It's a super interesting thought

00:38:03.530 --> 00:38:06.010
<v Speaker 2>because the syncer, I mean, basically, just wants

00:38:06.010 --> 00:38:09.210
<v Speaker 2>to keep CTL apply command. Right? You know,

00:38:09.290 --> 00:38:11.850
<v Speaker 2>technically. I mean, obviously, it's using client go,

00:38:11.850 --> 00:38:12.490
<v Speaker 2>etcetera.

00:38:12.650 --> 00:38:13.210
<v Speaker 2>But

00:38:13.690 --> 00:38:15.610
<v Speaker 2>that's what happens under the hood, and

00:38:16.305 --> 00:38:19.025
<v Speaker 2>it could technically, you know, route different parts

00:38:19.025 --> 00:38:21.025
<v Speaker 2>to different clusters in a way or, you

00:38:21.025 --> 00:38:23.185
<v Speaker 2>know, sync them to, like, five clusters in

00:38:23.185 --> 00:38:26.305
<v Speaker 2>parallel. You know, they're they're essentially unlimited possibilities

00:38:26.305 --> 00:38:28.625
<v Speaker 2>here, and it's super exciting to explore those

00:38:28.625 --> 00:38:30.145
<v Speaker 2>use cases. But so far,

00:38:30.860 --> 00:38:32.460
<v Speaker 2>that's not a main priority.

00:38:33.340 --> 00:38:34.460
<v Speaker 0>Awesome.

00:38:35.420 --> 00:38:38.460
<v Speaker 0>Okay. So we can clean up our vCluster

00:38:38.460 --> 00:38:40.460
<v Speaker 0>now using vCluster delete,

00:38:40.620 --> 00:38:42.700
<v Speaker 0>or is there a few things that we

00:38:42.700 --> 00:38:44.380
<v Speaker 0>should kick the tires on before we do

00:38:44.380 --> 00:38:44.540
<v Speaker 0>that?

00:38:46.405 --> 00:38:49.205
<v Speaker 0>What else does the vCustr CLI Yeah. Do?

00:38:51.845 --> 00:38:53.765
<v Speaker 2>Right. Doesn't do a whole lot more. I

00:38:53.765 --> 00:38:56.965
<v Speaker 2>mean, you can upgrade the the vCustr CLI.

00:38:57.444 --> 00:38:57.525
<v Speaker 2>Right?

00:38:58.660 --> 00:39:00.900
<v Speaker 2>Other than that, it's really just create, connect,

00:39:00.900 --> 00:39:01.540
<v Speaker 2>delete.

00:39:03.060 --> 00:39:05.220
<v Speaker 0>I guess that's all you needed to do.

00:39:05.220 --> 00:39:06.340
<v Speaker 0>So nice.

00:39:06.580 --> 00:39:07.620
<v Speaker 0>Alright.

00:39:09.300 --> 00:39:11.540
<v Speaker 0>What should we do over a virtual cluster?

00:39:11.540 --> 00:39:12.340
<v Speaker 0>Do have any

00:39:12.665 --> 00:39:15.305
<v Speaker 0>any cool things that you normally deploy to

00:39:15.305 --> 00:39:15.945
<v Speaker 0>this?

00:39:17.385 --> 00:39:19.465
<v Speaker 2>Yeah. I think one thing on the checkout

00:39:19.465 --> 00:39:22.185
<v Speaker 2>is essentially what happens with the nodes.

00:39:22.665 --> 00:39:24.984
<v Speaker 2>You you do have a multi node cluster.

00:39:24.984 --> 00:39:25.145
<v Speaker 2>Right?

00:39:25.830 --> 00:39:27.750
<v Speaker 0>Yeah. We've got a control plane node in

00:39:27.750 --> 00:39:28.630
<v Speaker 0>two workers.

00:39:29.590 --> 00:39:30.230
<v Speaker 1>Yeah.

00:39:31.590 --> 00:39:33.430
<v Speaker 2>Alright. We we could check out, you know,

00:39:33.430 --> 00:39:35.430
<v Speaker 2>what happened what happened with our part. Do

00:39:35.430 --> 00:39:38.230
<v Speaker 2>we see nodes inside the vCluster?

00:39:38.230 --> 00:39:39.670
<v Speaker 2>That is typically what a lot of users

00:39:39.670 --> 00:39:42.155
<v Speaker 2>are interested in because that's a it's it's

00:39:42.155 --> 00:39:43.915
<v Speaker 2>a non obvious question. Right?

00:39:44.235 --> 00:39:46.155
<v Speaker 2>What what happens there?

00:39:46.395 --> 00:39:48.315
<v Speaker 0>Yeah. We actually we we touched on that,

00:39:48.315 --> 00:39:49.115
<v Speaker 0>and then I forgot

00:39:50.475 --> 00:39:52.155
<v Speaker 0>oh, no. That's named spaces.

00:39:53.115 --> 00:39:53.755
<v Speaker 0>No. It's

00:39:57.550 --> 00:39:59.310
<v Speaker 0>Alright. So I see

00:40:00.270 --> 00:40:02.349
<v Speaker 0>both the workers and the control plane is

00:40:02.349 --> 00:40:04.270
<v Speaker 0>removed. I guess this is the the default

00:40:04.270 --> 00:40:05.070
<v Speaker 0>configuration

00:40:05.070 --> 00:40:06.430
<v Speaker 0>for how to expose the notes.

00:40:08.984 --> 00:40:11.065
<v Speaker 2>I think the default right now is we

00:40:11.065 --> 00:40:13.144
<v Speaker 2>actually changed the default recently. I think the

00:40:13.144 --> 00:40:14.505
<v Speaker 2>default as of today

00:40:15.065 --> 00:40:17.224
<v Speaker 2>is that we show you the notes

00:40:17.385 --> 00:40:18.665
<v Speaker 2>that are actually

00:40:19.305 --> 00:40:21.145
<v Speaker 2>that you have workloads running on.

00:40:21.385 --> 00:40:23.865
<v Speaker 2>So your pods get scheduled by the underlying

00:40:23.865 --> 00:40:24.265
<v Speaker 2>cluster,

00:40:25.170 --> 00:40:26.370
<v Speaker 2>and I assume

00:40:26.530 --> 00:40:28.609
<v Speaker 2>that you have two parts, you know, at

00:40:28.609 --> 00:40:30.530
<v Speaker 2>least or, like, one part on each one

00:40:30.530 --> 00:40:32.290
<v Speaker 2>of these nodes, but not one on the

00:40:32.290 --> 00:40:33.970
<v Speaker 2>other one. Probably because you have some kind

00:40:33.970 --> 00:40:35.010
<v Speaker 2>of thing there

00:40:35.330 --> 00:40:37.330
<v Speaker 2>that doesn't allow parts to be scheduled.

00:40:39.405 --> 00:40:41.725
<v Speaker 0>Yeah. We got our core DNS on one

00:40:41.725 --> 00:40:43.325
<v Speaker 0>of the nodes. We got NGINX on the

00:40:43.325 --> 00:40:44.685
<v Speaker 0>other. And I actually

00:40:45.245 --> 00:40:47.645
<v Speaker 0>removed the tint from the control play notes,

00:40:47.645 --> 00:40:49.485
<v Speaker 0>so we had three to play with. So

00:40:49.485 --> 00:40:50.845
<v Speaker 0>I guess that means

00:40:52.109 --> 00:40:55.230
<v Speaker 0>that I could do an edit deployment

00:40:55.230 --> 00:40:56.430
<v Speaker 0>engine x.

00:40:57.710 --> 00:40:59.070
<v Speaker 0>What do we call that?

00:41:00.670 --> 00:41:01.869
<v Speaker 0>A demo engine x.

00:41:06.715 --> 00:41:08.795
<v Speaker 0>Oh, there's a namespace involved too.

00:41:18.320 --> 00:41:20.240
<v Speaker 0>But did I change again?

00:41:21.600 --> 00:41:22.880
<v Speaker 0>I'm gonna have to have a word with

00:41:22.880 --> 00:41:24.320
<v Speaker 0>myself. Alright.

00:41:25.840 --> 00:41:27.680
<v Speaker 1>Okay. You need to learn the power of

00:41:27.680 --> 00:41:30.320
<v Speaker 1>copy and Copy. Yeah. Copy and paste, David.

00:41:32.265 --> 00:41:33.065
<v Speaker 0>I know.

00:41:33.625 --> 00:41:35.065
<v Speaker 0>I'm just gonna scale up.

00:41:35.464 --> 00:41:37.625
<v Speaker 0>See if we can get Yeah. That onto

00:41:37.625 --> 00:41:39.705
<v Speaker 0>the control plane node, run the get nodes.

00:41:39.944 --> 00:41:40.984
<v Speaker 0>I I like

00:41:41.464 --> 00:41:43.305
<v Speaker 0>I like that it kinda tries to work

00:41:43.305 --> 00:41:45.464
<v Speaker 0>out which

00:41:44.410 --> 00:41:46.330
<v Speaker 0>which nodes it has to expose. I can

00:41:46.330 --> 00:41:46.890
<v Speaker 0>imagine

00:41:47.130 --> 00:41:48.970
<v Speaker 0>in a scenario where I've got my host

00:41:48.970 --> 00:41:51.850
<v Speaker 0>clusters running on twenty, thirty, a hundred nodes,

00:41:51.850 --> 00:41:54.090
<v Speaker 0>whatever that is and people have access to

00:41:54.090 --> 00:41:56.410
<v Speaker 0>vClusters. You know, you're you're really restricting the

00:41:56.410 --> 00:41:58.010
<v Speaker 0>scope to what they need to see or

00:41:58.010 --> 00:41:59.610
<v Speaker 0>they have the ability to see rather than

00:41:59.610 --> 00:42:01.585
<v Speaker 0>just giving them a map of the world

00:42:01.585 --> 00:42:02.865
<v Speaker 0>and going, here, here's all the things that

00:42:02.865 --> 00:42:04.225
<v Speaker 0>we've got available to you.

00:42:08.225 --> 00:42:10.785
<v Speaker 2>Yeah. It's actually quite interesting. I mean, we

00:42:10.785 --> 00:42:13.105
<v Speaker 2>we already talked about, you know, mutating admission

00:42:13.105 --> 00:42:15.745
<v Speaker 2>control earlier inside the host cluster.

00:42:15.905 --> 00:42:17.800
<v Speaker 2>And what you can essentially do in inside

00:42:17.800 --> 00:42:20.680
<v Speaker 2>the host cluster, you can, you know, enforce

00:42:20.680 --> 00:42:23.640
<v Speaker 2>certain notes for certain users with mutating admission

00:42:23.640 --> 00:42:24.440
<v Speaker 2>control,

00:42:25.000 --> 00:42:27.160
<v Speaker 2>you know, essentially just on a pod level

00:42:27.320 --> 00:42:29.765
<v Speaker 2>for you don't need to avoid about a

00:42:29.765 --> 00:42:31.685
<v Speaker 2>whole lot of other resources. You essentially just

00:42:31.685 --> 00:42:34.005
<v Speaker 2>worry about the parts. And then, you know,

00:42:34.005 --> 00:42:35.045
<v Speaker 2>you essentially,

00:42:35.125 --> 00:42:36.725
<v Speaker 2>you know, rewrite these

00:42:36.965 --> 00:42:38.405
<v Speaker 2>parts that the synchronizes

00:42:38.645 --> 00:42:39.285
<v Speaker 2>down,

00:42:39.605 --> 00:42:42.325
<v Speaker 2>and that way you can essentially restrict notes

00:42:42.390 --> 00:42:44.470
<v Speaker 2>as well for you know, although you don't

00:42:44.470 --> 00:42:46.869
<v Speaker 2>add anything to the vCluster just by adding

00:42:47.109 --> 00:42:49.350
<v Speaker 2>admission control to your underlying cluster.

00:42:52.309 --> 00:42:53.670
<v Speaker 0>Okay. I like this.

00:42:54.725 --> 00:42:56.805
<v Speaker 0>So what you were saying sorry, Andy. Go

00:42:56.805 --> 00:42:57.365
<v Speaker 0>Rich.

00:42:57.845 --> 00:42:59.605
<v Speaker 1>Oh, I was just gonna say I'm I'm

00:42:59.605 --> 00:43:02.405
<v Speaker 1>with Noel. Noel mentioned in the chat that

00:43:02.645 --> 00:43:05.045
<v Speaker 1>he's adding it to the log list of

00:43:05.045 --> 00:43:07.525
<v Speaker 1>tools to check out. I I know that

00:43:07.525 --> 00:43:07.925
<v Speaker 1>field.

00:43:10.480 --> 00:43:11.120
<v Speaker 0>Yeah.

00:43:11.280 --> 00:43:13.600
<v Speaker 0>The the cloud native landscape just seems to

00:43:13.600 --> 00:43:15.600
<v Speaker 0>continue to grow at an

00:43:15.920 --> 00:43:18.560
<v Speaker 0>absolute wild rate. There's just so many cool

00:43:18.560 --> 00:43:20.720
<v Speaker 0>technologies coming out, solving

00:43:20.880 --> 00:43:23.680
<v Speaker 0>a whole array of really cool problems. It's

00:43:23.920 --> 00:43:25.120
<v Speaker 0>it's phenomenal to watch. Yeah.

00:43:26.435 --> 00:43:28.355
<v Speaker 1>Yeah. One of the reasons that I was

00:43:28.355 --> 00:43:30.755
<v Speaker 1>really interested in coming to Loft is that,

00:43:30.995 --> 00:43:34.115
<v Speaker 1>like, I just know that people have felt

00:43:34.115 --> 00:43:36.115
<v Speaker 1>a lot of pain, you know, over

00:43:36.195 --> 00:43:37.555
<v Speaker 1>over multitenancy

00:43:37.555 --> 00:43:39.075
<v Speaker 1>and self-service

00:43:39.075 --> 00:43:41.560
<v Speaker 1>and that these things are

00:43:41.720 --> 00:43:44.280
<v Speaker 1>really big issues for people's productivity,

00:43:44.280 --> 00:43:46.440
<v Speaker 1>you know, for the engineers and and for

00:43:46.440 --> 00:43:48.440
<v Speaker 1>the platform teams and and people who are

00:43:48.440 --> 00:43:50.440
<v Speaker 1>supporting them too. You know? And

00:43:50.920 --> 00:43:53.960
<v Speaker 1>you used the word clever earlier to describe

00:43:54.875 --> 00:43:56.954
<v Speaker 1>something about the design, and I I think

00:43:56.954 --> 00:43:57.194
<v Speaker 1>that

00:43:57.915 --> 00:43:59.835
<v Speaker 1>I think the tools are smart. You know?

00:43:59.835 --> 00:44:01.835
<v Speaker 1>I think vCluster is a smart tool that

00:44:01.835 --> 00:44:03.035
<v Speaker 1>solves real problems.

00:44:05.275 --> 00:44:06.075
<v Speaker 0>Definitely.

00:44:06.075 --> 00:44:06.795
<v Speaker 0>So

00:44:07.950 --> 00:44:09.790
<v Speaker 0>something's crossed my mind though and I'm gonna

00:44:09.790 --> 00:44:10.750
<v Speaker 0>throw it out there.

00:44:11.310 --> 00:44:13.790
<v Speaker 0>I just ran get nodes on the host

00:44:13.790 --> 00:44:15.310
<v Speaker 0>and we've seen the control plane and the

00:44:15.310 --> 00:44:17.790
<v Speaker 0>two workers. Apparently my ability to remove a

00:44:17.790 --> 00:44:18.670
<v Speaker 0>taint is

00:44:18.910 --> 00:44:20.589
<v Speaker 0>well, as crap as everything else I've done

00:44:20.589 --> 00:44:21.310
<v Speaker 0>so far, but

00:44:21.875 --> 00:44:24.434
<v Speaker 0>the age on my host nodes is seventy

00:44:24.434 --> 00:44:25.875
<v Speaker 0>minutes and fifty minutes.

00:44:26.515 --> 00:44:28.994
<v Speaker 0>The age on the second worker node and

00:44:28.994 --> 00:44:31.635
<v Speaker 0>the vCluster is probably from when we deployed

00:44:31.635 --> 00:44:32.595
<v Speaker 0>engine x.

00:44:34.460 --> 00:44:36.940
<v Speaker 0>So that's something that the KCS cluster

00:44:37.420 --> 00:44:40.220
<v Speaker 0>is registering is actually registering the node with

00:44:40.220 --> 00:44:41.099
<v Speaker 0>KCS

00:44:41.099 --> 00:44:43.020
<v Speaker 0>when something gets scheduled there?

00:44:44.299 --> 00:44:46.299
<v Speaker 2>Yeah. That's that's exactly what happens.

00:44:47.315 --> 00:44:49.555
<v Speaker 2>You also see that the the the version

00:44:49.795 --> 00:44:52.035
<v Speaker 2>shows k three s as well. Right? Well,

00:44:52.035 --> 00:44:53.715
<v Speaker 0>that was my next question. Like, can I

00:44:53.715 --> 00:44:55.795
<v Speaker 0>deploy one two one as a vCluster? Can

00:44:55.795 --> 00:44:57.715
<v Speaker 0>I drop down to one sixteen? Like, can

00:44:57.715 --> 00:45:00.915
<v Speaker 0>I get really weird testing situations running across

00:45:00.915 --> 00:45:03.869
<v Speaker 0>multiple Kubernetes versions regardless of what my host

00:45:03.869 --> 00:45:04.750
<v Speaker 0>cluster is?

00:45:06.430 --> 00:45:09.230
<v Speaker 2>Yes. You can. I think the only limitation

00:45:09.230 --> 00:45:11.710
<v Speaker 2>that you have is the pod spec. Right?

00:45:12.109 --> 00:45:15.309
<v Speaker 2>Because we're synchronizing your pods. So if there

00:45:15.309 --> 00:45:16.510
<v Speaker 2>is a feature

00:45:16.925 --> 00:45:18.845
<v Speaker 2>if you're using a vCluster of a higher

00:45:18.845 --> 00:45:21.165
<v Speaker 2>version than your host cluster,

00:45:22.285 --> 00:45:24.205
<v Speaker 2>and you're using a pod spec feature that

00:45:24.205 --> 00:45:26.285
<v Speaker 2>is not available in your underlying cluster, and

00:45:26.285 --> 00:45:27.645
<v Speaker 2>that is one of the fields that we're

00:45:27.645 --> 00:45:28.365
<v Speaker 2>syncing,

00:45:29.005 --> 00:45:30.445
<v Speaker 2>so an essential field. Right?

00:45:31.420 --> 00:45:33.420
<v Speaker 2>Then that may lead to a problem.

00:45:34.060 --> 00:45:35.980
<v Speaker 2>But then you're just transparently gonna see it

00:45:35.980 --> 00:45:38.060
<v Speaker 2>in that in the status. Right?

00:45:38.780 --> 00:45:39.340
<v Speaker 2>So

00:45:39.980 --> 00:45:41.980
<v Speaker 2>you can get around these these things. And

00:45:41.980 --> 00:45:44.060
<v Speaker 2>typically, you know, pop and service, which are

00:45:44.060 --> 00:45:45.660
<v Speaker 2>the core things that we're synchronizing,

00:45:46.855 --> 00:45:49.655
<v Speaker 2>they're rather stable. You know, taking the Kubernetes

00:45:49.655 --> 00:45:51.175
<v Speaker 2>API, not a whole lot of things are

00:45:51.175 --> 00:45:53.575
<v Speaker 2>changing. You know? Whereas things like, you know,

00:45:53.575 --> 00:45:56.855
<v Speaker 2>ingress or, obviously, I mean, CRDs change even

00:45:56.855 --> 00:45:57.735
<v Speaker 2>more frequently.

00:45:58.615 --> 00:46:00.830
<v Speaker 2>That's typically the things that that would break

00:46:00.830 --> 00:46:02.430
<v Speaker 2>a lot more. But, yeah, people are doing

00:46:02.430 --> 00:46:05.230
<v Speaker 2>that. People run entirely different k three s

00:46:05.230 --> 00:46:05.950
<v Speaker 2>versions

00:46:06.670 --> 00:46:08.670
<v Speaker 2>on top of, you know, other

00:46:09.150 --> 00:46:12.110
<v Speaker 2>Kubernetes versions, and that's actually one part where

00:46:12.110 --> 00:46:14.510
<v Speaker 2>it's super interesting for CICD as well. Right?

00:46:14.510 --> 00:46:16.555
<v Speaker 2>If you wanna test, like, 20 versions of

00:46:16.555 --> 00:46:19.035
<v Speaker 2>Kubernetes at once. Right? You just spin up

00:46:19.035 --> 00:46:20.715
<v Speaker 2>twenty week. That's just really quick.

00:46:21.515 --> 00:46:23.115
<v Speaker 1>Yeah. One of the one of the use

00:46:23.115 --> 00:46:26.075
<v Speaker 1>cases we didn't talk about is testing upgrades.

00:46:26.555 --> 00:46:26.875
<v Speaker 1>You know?

00:46:30.569 --> 00:46:31.290
<v Speaker 0>Yeah.

00:46:31.609 --> 00:46:32.970
<v Speaker 0>Yeah. You could actually

00:46:33.369 --> 00:46:35.289
<v Speaker 0>do that in a pretty safe manner, I

00:46:35.289 --> 00:46:36.170
<v Speaker 0>guess, by

00:46:36.569 --> 00:46:38.810
<v Speaker 0>rolling things out to a vCluster first,

00:46:39.049 --> 00:46:41.609
<v Speaker 0>seeing what happens, and then going, alright. It

00:46:41.609 --> 00:46:43.609
<v Speaker 0>looks good or oh, crap. Oops. Things went

00:46:43.609 --> 00:46:45.685
<v Speaker 0>wrong. And then, yeah, you got to stay

00:46:45.685 --> 00:46:47.845
<v Speaker 0>in a nice, safe, and secure way of

00:46:47.845 --> 00:46:49.525
<v Speaker 0>handling that. That's pretty cool use case as

00:46:49.525 --> 00:46:51.605
<v Speaker 0>well. Yeah. I mean, again, if, you know,

00:46:51.605 --> 00:46:53.605
<v Speaker 1>like Lucas was saying, you know, if you're

00:46:53.765 --> 00:46:56.484
<v Speaker 1>if you're doing CICD against a specific version

00:46:56.484 --> 00:46:57.445
<v Speaker 1>of Kubernetes,

00:46:57.445 --> 00:46:59.525
<v Speaker 1>you know, you could do a scenario where,

00:46:59.930 --> 00:47:02.010
<v Speaker 1>you know, you run the test against both

00:47:02.010 --> 00:47:03.850
<v Speaker 1>for a little bit, you know, and make

00:47:03.850 --> 00:47:06.010
<v Speaker 1>sure that that, you know, the newer one

00:47:06.010 --> 00:47:07.050
<v Speaker 1>is working as well.

00:47:09.370 --> 00:47:12.890
<v Speaker 0>Okay. But I'm curious about this version thing

00:47:12.890 --> 00:47:13.210
<v Speaker 0>there.

00:47:13.965 --> 00:47:15.645
<v Speaker 0>Is this the flag I need? I just

00:47:15.645 --> 00:47:17.805
<v Speaker 0>specify the KCS image, and that's the version

00:47:17.805 --> 00:47:19.965
<v Speaker 0>of Kubernetes I get in my my virtual

00:47:19.965 --> 00:47:20.605
<v Speaker 0>cluster?

00:47:22.045 --> 00:47:24.525
<v Speaker 2>Yeah. That's pretty much what works. Yeah. You

00:47:25.245 --> 00:47:26.045
<v Speaker 2>can also

00:47:26.285 --> 00:47:28.125
<v Speaker 2>I mean, if you're looking at the documentation

00:47:28.125 --> 00:47:30.640
<v Speaker 2>and you see, you know, the the cube

00:47:30.640 --> 00:47:33.360
<v Speaker 2>CTL deployment option and the Helm deployment option,

00:47:33.520 --> 00:47:35.520
<v Speaker 2>how these things actually get passed on. The

00:47:35.520 --> 00:47:37.760
<v Speaker 2>CLI is basically just, you know, running

00:47:38.480 --> 00:47:40.720
<v Speaker 2>Helm install or Helm upgrade on the hood

00:47:40.720 --> 00:47:43.244
<v Speaker 2>essentially and passing those things to the to

00:47:43.244 --> 00:47:44.845
<v Speaker 2>the helm chart. And the helm chart is

00:47:44.845 --> 00:47:47.164
<v Speaker 2>basically just adding that to the there's a

00:47:47.164 --> 00:47:48.445
<v Speaker 2>extra arcs

00:47:49.005 --> 00:47:51.325
<v Speaker 2>that you can pass, and they essentially get

00:47:51.325 --> 00:47:52.204
<v Speaker 2>concatenated,

00:47:52.204 --> 00:47:53.565
<v Speaker 2>you know, to the regular arcs that we

00:47:53.565 --> 00:47:54.605
<v Speaker 2>pass in k three s.

00:47:56.650 --> 00:47:58.970
<v Speaker 0>We don't need docs. I've got you too.

00:48:02.010 --> 00:48:04.090
<v Speaker 0>Alright. I'm just I'm so curious to have

00:48:04.090 --> 00:48:07.210
<v Speaker 0>this multi this version thing that I

00:48:08.090 --> 00:48:10.555
<v Speaker 0>need to try it. So how old can

00:48:10.555 --> 00:48:12.555
<v Speaker 0>I get? Let's see. No.

00:48:12.875 --> 00:48:15.115
<v Speaker 0>KCS is now old. There we go.

00:48:16.395 --> 00:48:17.435
<v Speaker 0>Let's try this.

00:48:17.995 --> 00:48:19.995
<v Speaker 1>What are what's your host cluster?

00:48:20.235 --> 00:48:21.915
<v Speaker 0>120.four.

00:48:23.220 --> 00:48:25.140
<v Speaker 0>So yeah, could I think I'll create a

00:48:25.140 --> 00:48:27.780
<v Speaker 0>116 and a 121 just for no other

00:48:27.780 --> 00:48:29.619
<v Speaker 0>real reason that I think it's cool that

00:48:29.619 --> 00:48:31.940
<v Speaker 0>I can do that. Like that is this

00:48:32.100 --> 00:48:34.180
<v Speaker 0>very exciting to me and I don't know

00:48:34.180 --> 00:48:35.300
<v Speaker 0>why but

00:48:36.100 --> 00:48:36.420
<v Speaker 0>go.

00:48:42.075 --> 00:48:45.355
<v Speaker 0>I'll grab the 121,

00:48:45.355 --> 00:48:48.075
<v Speaker 0>which is I think the latest is 1212.

00:48:48.795 --> 00:48:49.755
<v Speaker 0>Yeah. There we go.

00:48:53.970 --> 00:48:56.690
<v Speaker 0>Too much fun. That's what I'm saying.

00:49:02.050 --> 00:49:04.530
<v Speaker 2>One thing I also wanna mention is you

00:49:04.530 --> 00:49:05.970
<v Speaker 2>always change the namespace here.

00:49:06.734 --> 00:49:09.855
<v Speaker 2>It's also possible to have multiple vCluster in

00:49:09.855 --> 00:49:10.575
<v Speaker 2>the same

00:49:10.974 --> 00:49:11.775
<v Speaker 2>namespace.

00:49:11.775 --> 00:49:14.414
<v Speaker 2>That's technically possible as well. Typically, we recommend,

00:49:14.414 --> 00:49:17.214
<v Speaker 2>you know, for easier visibility in what actually

00:49:17.214 --> 00:49:19.295
<v Speaker 2>is happening under the hood to isolate them

00:49:19.295 --> 00:49:20.174
<v Speaker 2>with the namespaces,

00:49:21.279 --> 00:49:22.480
<v Speaker 2>certainly possible.

00:49:22.799 --> 00:49:24.880
<v Speaker 0>I'm just sitting here popping up Kubernetes clusters

00:49:24.880 --> 00:49:27.200
<v Speaker 0>like nobody's business and having a rare time.

00:49:27.200 --> 00:49:27.680
<v Speaker 0>So

00:49:28.240 --> 00:49:31.440
<v Speaker 1>It's it's also possible to run a vCluster

00:49:31.440 --> 00:49:32.559
<v Speaker 1>inside of a vCluster,

00:49:33.645 --> 00:49:35.725
<v Speaker 1>which I actually did a YouTube video where

00:49:35.725 --> 00:49:37.885
<v Speaker 1>we do that on the loft YouTube. It's

00:49:37.885 --> 00:49:38.685
<v Speaker 1>pretty fun.

00:49:40.125 --> 00:49:41.165
<v Speaker 0>What?

00:49:41.485 --> 00:49:43.805
<v Speaker 0>So you've got a vCluster running on a

00:49:43.805 --> 00:49:45.565
<v Speaker 0>host cluster. You create a vCluster and a

00:49:45.565 --> 00:49:47.670
<v Speaker 0>vCluster and the sync just goes to the

00:49:47.670 --> 00:49:49.030
<v Speaker 0>sinker and the sinker goes back to the

00:49:49.030 --> 00:49:51.349
<v Speaker 0>host cluster. So it's just two layers of

00:49:51.589 --> 00:49:53.109
<v Speaker 0>how many how many have you tried? How

00:49:53.109 --> 00:49:54.390
<v Speaker 0>deep if you went, Rich?

00:49:55.030 --> 00:49:56.470
<v Speaker 1>I've only done the

00:49:57.030 --> 00:49:57.670
<v Speaker 1>the

00:49:57.910 --> 00:49:59.030
<v Speaker 1>that second layer.

00:50:00.734 --> 00:50:02.494
<v Speaker 0>I mean, I'm gonna have to try it.

00:50:02.494 --> 00:50:03.055
<v Speaker 0>So

00:50:05.615 --> 00:50:08.095
<v Speaker 0>alright. So this is I'm gonna get so

00:50:08.095 --> 00:50:09.934
<v Speaker 0>confused and forget where I am, but I'm

00:50:09.934 --> 00:50:12.175
<v Speaker 0>I'm gonna this is me on VCluster 1,

00:50:12.494 --> 00:50:14.654
<v Speaker 0>and now I'm gonna create another vCluster called

00:50:14.654 --> 00:50:15.295
<v Speaker 0>VCluster

00:50:15.990 --> 00:50:16.710
<v Speaker 0>5.

00:50:20.950 --> 00:50:21.670
<v Speaker 0>Okay.

00:50:22.230 --> 00:50:23.830
<v Speaker 0>Looks like it may be working.

00:50:25.750 --> 00:50:27.670
<v Speaker 0>Okay. Let's see what happens when I do

00:50:27.670 --> 00:50:29.430
<v Speaker 0>a list. So this is inside of VCluster

00:50:29.430 --> 00:50:31.895
<v Speaker 0>1 and we have access to V Cluster

00:50:31.895 --> 00:50:32.855
<v Speaker 0>5.

00:50:33.494 --> 00:50:35.255
<v Speaker 0>If anyone at home is actually managing to

00:50:35.255 --> 00:50:37.015
<v Speaker 0>keep sense of this, you're much better than

00:50:37.015 --> 00:50:37.735
<v Speaker 0>I am.

00:50:38.135 --> 00:50:40.135
<v Speaker 0>I'm gonna unset my kube config which puts

00:50:40.135 --> 00:50:41.175
<v Speaker 0>me back on the host.

00:50:47.210 --> 00:50:48.569
<v Speaker 0>I don't want to be in the host.

00:50:48.569 --> 00:50:50.569
<v Speaker 0>I want to be on my

00:50:50.569 --> 00:50:51.930
<v Speaker 0>remote cluster.

00:50:54.089 --> 00:50:54.810
<v Speaker 0>Okay.

00:50:54.970 --> 00:50:57.369
<v Speaker 0>I may need ten or twenty minutes to

00:50:57.450 --> 00:50:58.410
<v Speaker 0>work this out. So

00:50:59.785 --> 00:51:01.785
<v Speaker 0>vCluster less connect took me a while to

00:51:01.785 --> 00:51:03.705
<v Speaker 1>work it out when I made the video.

00:51:06.105 --> 00:51:08.185
<v Speaker 0>So this is really cool. I have four

00:51:08.185 --> 00:51:09.545
<v Speaker 0>clusters on

00:51:10.425 --> 00:51:12.265
<v Speaker 0>bare metal right now.

00:51:13.270 --> 00:51:14.630
<v Speaker 0>I shouldn't do an all because there's too

00:51:14.630 --> 00:51:16.310
<v Speaker 0>much running. Let's do

00:51:17.990 --> 00:51:18.710
<v Speaker 1>this.

00:51:19.830 --> 00:51:21.830
<v Speaker 1>Oh, man. We should have made it VM

00:51:21.830 --> 00:51:23.190
<v Speaker 1>on the bare metal

00:51:23.590 --> 00:51:25.350
<v Speaker 1>to run the vCluster's inside.

00:51:25.990 --> 00:51:28.230
<v Speaker 0>The one sixteen failed, but we'll ignore that.

00:51:30.445 --> 00:51:32.205
<v Speaker 0>We got our engine x's.

00:51:32.925 --> 00:51:34.125
<v Speaker 0>In fact, I think I just got all

00:51:34.125 --> 00:51:36.285
<v Speaker 0>those images wrong. I've I've I've I think

00:51:36.285 --> 00:51:38.365
<v Speaker 0>I've now got five broken clusters, don't I?

00:51:42.045 --> 00:51:43.405
<v Speaker 0>Oh, I'm an idiot.

00:51:45.970 --> 00:51:47.410
<v Speaker 0>You see when you when you know, you

00:51:47.410 --> 00:51:47.890
<v Speaker 0>know.

00:51:48.609 --> 00:51:49.970
<v Speaker 0>This is just a tag.

00:51:51.170 --> 00:51:52.210
<v Speaker 1>Oh, yeah.

00:51:52.609 --> 00:51:55.010
<v Speaker 1>You wanna use what Alright. Yeah. When

00:51:56.049 --> 00:51:57.329
<v Speaker 1>we did the get nodes, right?

00:51:58.105 --> 00:52:00.105
<v Speaker 0>I guess it should be rancher slash k

00:52:00.105 --> 00:52:01.545
<v Speaker 0>t s and then

00:52:02.345 --> 00:52:03.305
<v Speaker 0>the tag.

00:52:03.785 --> 00:52:05.065
<v Speaker 0>Oh, okay.

00:52:05.705 --> 00:52:07.465
<v Speaker 2>Yeah. Don't don't worry about it. Just run

00:52:07.465 --> 00:52:10.345
<v Speaker 2>it again. It'll essentially run Helm upgrade.

00:52:11.580 --> 00:52:12.700
<v Speaker 0>Oh, nice.

00:52:13.020 --> 00:52:15.100
<v Speaker 0>Okay. So we can run The only thing

00:52:15.340 --> 00:52:17.420
<v Speaker 2>only thing to note is because they're stateful

00:52:17.420 --> 00:52:20.220
<v Speaker 2>sets, the parts actually don't get recreated.

00:52:20.300 --> 00:52:22.060
<v Speaker 2>You'll have to delete the parts, but then

00:52:22.060 --> 00:52:23.500
<v Speaker 2>they get, you know, the new parts that

00:52:23.500 --> 00:52:24.460
<v Speaker 2>will be scheduled.

00:52:24.700 --> 00:52:26.380
<v Speaker 2>They will essentially have the new image.

00:52:29.555 --> 00:52:31.555
<v Speaker 0>Okay. So let's see if we can upgrade

00:52:31.715 --> 00:52:34.915
<v Speaker 0>and fix the broken image on Rawkode Live

00:52:35.315 --> 00:52:36.115
<v Speaker 0>two,

00:52:37.315 --> 00:52:38.755
<v Speaker 0>and we'll try and get a one twenty

00:52:38.755 --> 00:52:39.875
<v Speaker 0>one cluster of this.

00:52:41.200 --> 00:52:43.280
<v Speaker 0>Yeah. So there's a home upgrade,

00:52:45.520 --> 00:52:48.560
<v Speaker 0>which means I should be able to

00:52:49.120 --> 00:52:50.640
<v Speaker 0>run this. And you said I might just

00:52:50.640 --> 00:52:50.960
<v Speaker 0>have to

00:52:52.800 --> 00:52:54.880
<v Speaker 2>Yeah. You see that there's still three minutes

00:52:54.880 --> 00:52:56.785
<v Speaker 2>old or oh, no. That one actually got

00:52:56.785 --> 00:52:58.465
<v Speaker 2>recreate. Oh, I think if the image is

00:52:58.465 --> 00:53:01.025
<v Speaker 2>changing, yeah, then then restarts

00:53:01.025 --> 00:53:01.585
<v Speaker 2>it.

00:53:04.385 --> 00:53:05.745
<v Speaker 0>Yeah. It's running. Okay.

00:53:06.225 --> 00:53:08.625
<v Speaker 0>Let me recreate my five clusters again in

00:53:08.625 --> 00:53:09.265
<v Speaker 0>under one minute.

00:53:12.800 --> 00:53:14.240
<v Speaker 0>One 16.

00:53:16.800 --> 00:53:18.640
<v Speaker 0>Oh, that could suit. Okay. They added change

00:53:18.640 --> 00:53:20.320
<v Speaker 0>the image for that. So let's do rancher

00:53:20.320 --> 00:53:23.440
<v Speaker 0>case. Yes. And this can be cluster three.

00:53:26.605 --> 00:53:28.125
<v Speaker 0>And I'm so confused.

00:53:28.684 --> 00:53:30.845
<v Speaker 0>Now I wanna connect to vCluster

00:53:31.405 --> 00:53:33.885
<v Speaker 0>and create another cluster for cluster inception.

00:53:36.230 --> 00:53:37.350
<v Speaker 0>VCluster.

00:53:38.630 --> 00:53:41.190
<v Speaker 0>Oh no, my connect's up here, right? Yeah.

00:53:41.190 --> 00:53:41.910
<v Speaker 0>Cool.

00:53:43.990 --> 00:53:46.950
<v Speaker 0>And this one will do

00:53:48.245 --> 00:53:49.205
<v Speaker 0>five

00:53:49.765 --> 00:53:52.165
<v Speaker 0>and yeah, so we'll just do that. Okay.

00:53:52.165 --> 00:53:53.685
<v Speaker 0>I have no idea how many v clusters

00:53:53.685 --> 00:53:55.605
<v Speaker 0>I've got anymore, but we definitely have some

00:53:55.605 --> 00:53:56.645
<v Speaker 0>virtual clusters.

00:53:58.725 --> 00:54:00.325
<v Speaker 0>So we can do a v cluster list.

00:54:00.325 --> 00:54:01.925
<v Speaker 0>We'll connect it to the current v cluster

00:54:01.925 --> 00:54:04.880
<v Speaker 0>and we can run get pods all and

00:54:04.880 --> 00:54:06.480
<v Speaker 0>this is a vCluster so we should only

00:54:06.480 --> 00:54:07.120
<v Speaker 0>see

00:54:08.160 --> 00:54:10.480
<v Speaker 0>apparently that's oh no, this will need me

00:54:10.480 --> 00:54:12.320
<v Speaker 0>to delete the pod because

00:54:20.805 --> 00:54:23.765
<v Speaker 0>Juggling too many things, but we'll get there.

00:54:25.045 --> 00:54:26.725
<v Speaker 0>This should just not be this much fun.

00:54:28.660 --> 00:54:31.540
<v Speaker 1>I mean, I have to say that's been

00:54:31.540 --> 00:54:34.180
<v Speaker 1>my reaction the whole time since I started

00:54:34.180 --> 00:54:36.820
<v Speaker 1>playing with this project is is

00:54:38.020 --> 00:54:40.340
<v Speaker 1>I just think it's super fun. And

00:54:40.755 --> 00:54:43.234
<v Speaker 1>a lot of what we do, you know,

00:54:43.234 --> 00:54:46.994
<v Speaker 1>as ops people and platform engineers and and,

00:54:47.635 --> 00:54:49.155
<v Speaker 1>product engineers

00:54:49.315 --> 00:54:52.355
<v Speaker 1>isn't necessarily fun. So so my theory is

00:54:52.355 --> 00:54:54.280
<v Speaker 1>that you embrace

00:54:54.280 --> 00:54:56.599
<v Speaker 1>the things you can do that are. Right?

00:54:56.599 --> 00:54:57.799
<v Speaker 1>So if you get to play with a

00:54:57.799 --> 00:55:00.440
<v Speaker 1>tool that, you know, is really fun that

00:55:00.440 --> 00:55:02.920
<v Speaker 1>you enjoy, you know, run with that if

00:55:02.920 --> 00:55:03.640
<v Speaker 1>you can.

00:55:04.440 --> 00:55:05.400
<v Speaker 0>Couldn't agree more.

00:55:07.645 --> 00:55:09.965
<v Speaker 0>Alright. Let's confirm our version of Spark and

00:55:09.965 --> 00:55:12.125
<v Speaker 0>then I'll stop doing silly things, I promise.

00:55:12.125 --> 00:55:13.405
<v Speaker 0>But we have

00:55:14.285 --> 00:55:16.605
<v Speaker 0>a connect here and we're gonna connect to

00:55:16.605 --> 00:55:17.565
<v Speaker 0>vCluster

00:55:17.725 --> 00:55:20.365
<v Speaker 0>two which I think is a one twenty

00:55:20.365 --> 00:55:21.165
<v Speaker 0>one cluster.

00:55:23.180 --> 00:55:25.900
<v Speaker 0>So I should hopefully still be on.

00:55:27.260 --> 00:55:28.700
<v Speaker 0>There we go. We got a one twenty

00:55:28.700 --> 00:55:31.020
<v Speaker 0>one cluster running on a one twenty cluster.

00:55:31.020 --> 00:55:32.220
<v Speaker 0>That's pretty sweet.

00:55:32.700 --> 00:55:33.660
<v Speaker 0>That's awesome.

00:55:34.540 --> 00:55:35.099
<v Speaker 0>It is.

00:55:36.765 --> 00:55:38.605
<v Speaker 1>I wanted to thank Noel too who said

00:55:38.605 --> 00:55:40.125
<v Speaker 1>in the chat that he enjoyed that video

00:55:40.125 --> 00:55:41.724
<v Speaker 1>that I was talking about on YouTube. I

00:55:41.724 --> 00:55:43.005
<v Speaker 1>I appreciate that.

00:55:47.005 --> 00:55:47.724
<v Speaker 0>Thanks. Awesome.

00:55:48.510 --> 00:55:51.390
<v Speaker 0>And no one now suggesting that on custard,

00:55:51.390 --> 00:55:53.950
<v Speaker 0>everyone's gonna be getting a nested vCluster.

00:55:55.230 --> 00:55:57.470
<v Speaker 0>Potentially. Pretty nice way of doing it. I'm

00:55:57.470 --> 00:55:58.910
<v Speaker 0>not I'm not sure if that would be

00:55:58.910 --> 00:55:59.470
<v Speaker 0>fair but

00:56:02.350 --> 00:56:03.550
<v Speaker 0>Alright. Yeah. This

00:56:04.244 --> 00:56:05.365
<v Speaker 0>this is really cool.

00:56:05.605 --> 00:56:08.005
<v Speaker 0>That version thing was a nice little cherry

00:56:08.005 --> 00:56:09.444
<v Speaker 0>on the top there as we went through

00:56:09.444 --> 00:56:12.005
<v Speaker 0>this. I wasn't expecting really I mean,

00:56:12.404 --> 00:56:13.444
<v Speaker 0>now that I've done it, I'm like, well

00:56:13.444 --> 00:56:14.724
<v Speaker 0>yeah, of course we could do something like

00:56:14.724 --> 00:56:16.164
<v Speaker 0>that but it just it doesn't occur to

00:56:16.164 --> 00:56:17.960
<v Speaker 0>me and now that I know I can

00:56:17.960 --> 00:56:21.160
<v Speaker 0>have multiple versions of Kubernetes API available,

00:56:21.400 --> 00:56:23.480
<v Speaker 0>even just building operators and being able to

00:56:23.480 --> 00:56:25.079
<v Speaker 0>run end to end test against all of

00:56:25.079 --> 00:56:27.720
<v Speaker 0>these versions and do that super quickly,

00:56:28.119 --> 00:56:28.840
<v Speaker 0>I guess,

00:56:29.240 --> 00:56:31.319
<v Speaker 0>guess, that's really nice. I like that completely.

00:56:33.145 --> 00:56:34.985
<v Speaker 0>Awesome. There's one more topic that may be

00:56:34.985 --> 00:56:36.905
<v Speaker 2>interesting, and that's actually networking.

00:56:38.185 --> 00:56:40.585
<v Speaker 2>The reason, you know, why networking

00:56:40.585 --> 00:56:42.585
<v Speaker 2>for in cluster stuff works

00:56:42.665 --> 00:56:44.505
<v Speaker 2>out of the box is essentially because the

00:56:44.505 --> 00:56:47.305
<v Speaker 2>pods are running actually on your host cluster.

00:56:47.305 --> 00:56:47.545
<v Speaker 2>Right?

00:56:48.119 --> 00:56:49.960
<v Speaker 2>So they use your regular,

00:56:50.119 --> 00:56:52.279
<v Speaker 2>you know, network plug in that you're using

00:56:52.279 --> 00:56:54.920
<v Speaker 2>for for your your host Kubernetes cluster.

00:56:55.240 --> 00:56:55.960
<v Speaker 2>And then

00:56:56.200 --> 00:56:59.880
<v Speaker 2>what we do essentially inside the vCluster is

00:57:00.119 --> 00:57:02.984
<v Speaker 2>we just you know, because we're syncing the

00:57:02.984 --> 00:57:05.704
<v Speaker 2>services, but we're also renaming them, again, to

00:57:05.704 --> 00:57:08.425
<v Speaker 2>prevent naming conflicts because, again, we're mapping from

00:57:08.825 --> 00:57:11.945
<v Speaker 2>five namespaces to a single host namespace. Right?

00:57:12.345 --> 00:57:13.704
<v Speaker 2>The only thing we need to do is

00:57:13.704 --> 00:57:15.944
<v Speaker 2>adjust the cluster internal DNS

00:57:16.410 --> 00:57:18.809
<v Speaker 2>and tell these parts to talk to the

00:57:18.809 --> 00:57:20.170
<v Speaker 2>DNS server

00:57:20.970 --> 00:57:23.849
<v Speaker 2>that is running inside our vCluster, which also

00:57:23.849 --> 00:57:25.930
<v Speaker 2>creates part on the underlying cluster so you

00:57:25.930 --> 00:57:28.170
<v Speaker 2>can basically also connect to it via regular

00:57:28.170 --> 00:57:28.569
<v Speaker 2>IP.

00:57:29.505 --> 00:57:31.665
<v Speaker 2>Sounds a little tricky, but, essentially,

00:57:33.025 --> 00:57:36.305
<v Speaker 2>again, networking so in cluster networking, so connecting

00:57:36.305 --> 00:57:39.105
<v Speaker 2>to any services inside your vClusterWorks.

00:57:39.184 --> 00:57:41.664
<v Speaker 2>And you can also, you know, immediately

00:57:41.664 --> 00:57:44.990
<v Speaker 2>talk to other parts via IP. And the

00:57:44.990 --> 00:57:47.150
<v Speaker 2>really interesting part is actually regarding

00:57:47.470 --> 00:57:48.430
<v Speaker 2>ingresses.

00:57:49.950 --> 00:57:50.590
<v Speaker 2>Because,

00:57:50.910 --> 00:57:52.510
<v Speaker 2>you know, frequent use case

00:57:52.750 --> 00:57:54.910
<v Speaker 2>is that you you don't want every one

00:57:54.910 --> 00:57:56.829
<v Speaker 2>of your if you're in that use case

00:57:56.829 --> 00:57:58.829
<v Speaker 2>that we originally come from. Right? You have,

00:57:58.815 --> 00:58:01.775
<v Speaker 2>like, users in their isolated namespaces.

00:58:01.775 --> 00:58:03.055
<v Speaker 2>Typically, they share

00:58:03.375 --> 00:58:05.454
<v Speaker 2>an ingress controller. Right? Or they have, like,

00:58:05.454 --> 00:58:07.535
<v Speaker 2>couple of them available in the cluster.

00:58:08.175 --> 00:58:09.775
<v Speaker 2>If you're using vCluster,

00:58:10.015 --> 00:58:13.214
<v Speaker 2>you don't want everyone to deploy their own

00:58:12.660 --> 00:58:14.740
<v Speaker 2>NGINX and have to, you know, provision their

00:58:14.740 --> 00:58:16.100
<v Speaker 2>own load balance servers.

00:58:16.579 --> 00:58:18.980
<v Speaker 2>That's right. It's a little bit more tricky.

00:58:19.619 --> 00:58:21.220
<v Speaker 2>So by default,

00:58:21.619 --> 00:58:22.740
<v Speaker 2>vCluster's

00:58:22.740 --> 00:58:24.180
<v Speaker 2>also synchronize

00:58:24.180 --> 00:58:24.819
<v Speaker 2>ingresses,

00:58:25.385 --> 00:58:27.145
<v Speaker 2>but that can also be, you know, turned

00:58:27.145 --> 00:58:28.665
<v Speaker 2>off and on, etcetera.

00:58:31.385 --> 00:58:33.785
<v Speaker 0>Okay. Yeah. That makes sense as well.

00:58:34.345 --> 00:58:35.385
<v Speaker 0>Does that mean

00:58:36.345 --> 00:58:39.640
<v Speaker 0>if I say I bypass the DNS within

00:58:39.640 --> 00:58:41.800
<v Speaker 0>the cluster, I just start using port IP

00:58:41.800 --> 00:58:42.600
<v Speaker 0>addresses.

00:58:42.600 --> 00:58:45.400
<v Speaker 0>That that network isn't going to work. Right?

00:58:48.200 --> 00:58:50.680
<v Speaker 2>No. That network works. So, I mean, your

00:58:50.680 --> 00:58:53.125
<v Speaker 2>part is so if you're inside the part,

00:58:53.125 --> 00:58:55.204
<v Speaker 2>right, if you were to just run Kube

00:58:55.204 --> 00:58:57.444
<v Speaker 2>CDL exec inside a part that you deployed

00:58:57.444 --> 00:58:58.725
<v Speaker 2>via the vCluster,

00:59:00.325 --> 00:59:03.285
<v Speaker 2>then you're technically not then you're technically inside

00:59:03.285 --> 00:59:04.964
<v Speaker 2>a part of your host cluster. Right?

00:59:05.760 --> 00:59:08.000
<v Speaker 2>And if you were to ping another part

00:59:08.000 --> 00:59:10.160
<v Speaker 2>in your host cluster with the with that

00:59:10.160 --> 00:59:13.200
<v Speaker 2>IP, that should work unless your network policy

00:59:13.600 --> 00:59:14.960
<v Speaker 2>is forbidding you to do that.

00:59:21.204 --> 00:59:23.445
<v Speaker 0>Some interesting use cases there.

00:59:24.565 --> 00:59:27.045
<v Speaker 0>I'm thinking like as me as operator of

00:59:27.045 --> 00:59:29.445
<v Speaker 0>the host cluster, I can actually make some

00:59:29.445 --> 00:59:30.565
<v Speaker 0>things available

00:59:30.565 --> 00:59:32.484
<v Speaker 0>to vClusters using

00:59:32.484 --> 00:59:34.780
<v Speaker 0>the host networking thing. Like I could say

00:59:34.780 --> 00:59:37.660
<v Speaker 0>here's a http service that's gonna give you

00:59:38.140 --> 00:59:39.100
<v Speaker 0>access to secrets

00:59:39.740 --> 00:59:42.380
<v Speaker 0>or metadata or something and then they just

00:59:42.380 --> 00:59:44.540
<v Speaker 0>know this magic IP address or whatever is

00:59:44.540 --> 00:59:46.505
<v Speaker 0>is gonna work. I'm

00:59:46.505 --> 00:59:48.185
<v Speaker 0>not sure what Yeah. A real world actually

00:59:48.185 --> 00:59:50.425
<v Speaker 0>is there yet, but there's that there's something

00:59:50.585 --> 00:59:51.385
<v Speaker 0>Yeah. No.

00:59:53.625 --> 00:59:55.305
<v Speaker 3>It's it's funny that you mentioned it. That's

00:59:55.305 --> 00:59:58.025
<v Speaker 3>actually one of the most requested features for

00:59:58.025 --> 00:59:59.705
<v Speaker 2>vCluster is because

01:00:00.000 --> 01:00:01.600
<v Speaker 2>what you described right now

01:00:02.320 --> 01:00:04.720
<v Speaker 2>is what we recommend as a workaround. Right?

01:00:04.800 --> 01:00:06.800
<v Speaker 2>So we have the common use case that

01:00:06.800 --> 01:00:09.840
<v Speaker 2>you have, like, a very bulky application

01:00:10.080 --> 01:00:11.920
<v Speaker 2>or kind of like a test system or

01:00:11.920 --> 01:00:13.680
<v Speaker 2>something that people need to connect to. Right?

01:00:14.305 --> 01:00:16.225
<v Speaker 2>Just think of, like, you have a as

01:00:16.225 --> 01:00:19.985
<v Speaker 2>a, you know, cluster admin, wanna, you know,

01:00:20.305 --> 01:00:21.185
<v Speaker 2>make a

01:00:21.585 --> 01:00:24.145
<v Speaker 2>Kafka cluster available for your engineers. Right? I

01:00:24.145 --> 01:00:25.505
<v Speaker 2>think that is one of the use cases

01:00:25.505 --> 01:00:27.840
<v Speaker 2>that one of the one of our customers,

01:00:28.400 --> 01:00:30.799
<v Speaker 2>you know, was outlining, and they don't want

01:00:30.799 --> 01:00:33.200
<v Speaker 2>everybody to deploy their own Kafka cluster because

01:00:33.200 --> 01:00:34.720
<v Speaker 2>they're pretty bulky. Right?

01:00:34.960 --> 01:00:37.200
<v Speaker 2>They tend to break, and it it's very

01:00:37.200 --> 01:00:40.835
<v Speaker 2>high maintenance. And they're already inherently multi tenant.

01:00:40.835 --> 01:00:43.635
<v Speaker 2>Right? So they can essentially with different credentials,

01:00:43.795 --> 01:00:46.115
<v Speaker 2>manage different users. So why not one central

01:00:46.115 --> 01:00:46.835
<v Speaker 2>instance

01:00:46.994 --> 01:00:49.555
<v Speaker 2>and make it available to your engineers? Right?

01:00:50.595 --> 01:00:52.115
<v Speaker 2>And then the question is,

01:00:52.435 --> 01:00:53.954
<v Speaker 2>how does your pod

01:00:54.590 --> 01:00:57.390
<v Speaker 2>that you created in your vCluster now connect

01:00:57.630 --> 01:00:58.910
<v Speaker 2>to that service?

01:00:59.630 --> 01:01:02.350
<v Speaker 2>Because that service of that Kafka cluster does

01:01:02.350 --> 01:01:04.030
<v Speaker 2>not exist in your vCluster.

01:01:05.870 --> 01:01:06.830
<v Speaker 2>There's essentially

01:01:07.525 --> 01:01:09.765
<v Speaker 2>two answers to that. One is if you

01:01:09.765 --> 01:01:12.244
<v Speaker 2>have a IP which is not supposed to

01:01:12.244 --> 01:01:14.805
<v Speaker 2>change frequently, right, because you created that service

01:01:14.805 --> 01:01:16.085
<v Speaker 2>for a Kafka cluster,

01:01:16.244 --> 01:01:18.485
<v Speaker 2>then you can direct directly, of course, com

01:01:18.645 --> 01:01:19.925
<v Speaker 2>communicate VIP.

01:01:20.565 --> 01:01:22.805
<v Speaker 2>And the workaround would be to essentially

01:01:23.340 --> 01:01:25.980
<v Speaker 2>just create that service inside the vCluster.

01:01:26.460 --> 01:01:28.460
<v Speaker 2>So essentially, one of cube CTL apply to

01:01:28.460 --> 01:01:29.580
<v Speaker 2>create that service

01:01:30.060 --> 01:01:31.980
<v Speaker 2>to kind of have, like, a fake service

01:01:31.980 --> 01:01:33.500
<v Speaker 2>inside your vCluster.

01:01:34.300 --> 01:01:35.340
<v Speaker 2>That is something

01:01:35.660 --> 01:01:38.275
<v Speaker 2>that works right now, but we're thinking about

01:01:38.275 --> 01:01:41.075
<v Speaker 2>other ways, you know, when, obviously, operators

01:01:41.395 --> 01:01:43.795
<v Speaker 2>wanna, you know, enable for the engineers is

01:01:43.795 --> 01:01:46.595
<v Speaker 2>a more automated approach to this. Right? But

01:01:46.595 --> 01:01:48.035
<v Speaker 2>they don't need to play around with things

01:01:48.035 --> 01:01:48.435
<v Speaker 2>like that.

01:01:49.830 --> 01:01:52.630
<v Speaker 2>So we're currently thinking about ways to synchronize

01:01:52.630 --> 01:01:54.710
<v Speaker 2>resources from the host cluster

01:01:54.790 --> 01:01:57.510
<v Speaker 2>back into the vCluster essentially so that services

01:01:57.510 --> 01:01:59.830
<v Speaker 2>start popping up that you have not created

01:01:59.830 --> 01:02:01.670
<v Speaker 2>in the vCluster, but you want them, you

01:02:01.670 --> 01:02:03.990
<v Speaker 2>know, to be synchronized from the host cluster

01:02:03.990 --> 01:02:05.975
<v Speaker 2>into the vCluster. That would be a use

01:02:05.975 --> 01:02:07.975
<v Speaker 2>case. Yeah. I was just thinking that. Like,

01:02:07.975 --> 01:02:09.975
<v Speaker 0>if I could label my Kafka servers on

01:02:09.975 --> 01:02:12.695
<v Speaker 0>a host cluster in some way that associates

01:02:12.695 --> 01:02:14.615
<v Speaker 0>it with the vClusters and then the sync

01:02:14.615 --> 01:02:17.015
<v Speaker 0>will create those services for me, that would

01:02:17.015 --> 01:02:18.055
<v Speaker 0>be a a pretty

01:02:18.450 --> 01:02:20.530
<v Speaker 0>pretty interesting setup as well.

01:02:22.690 --> 01:02:23.250
<v Speaker 1>Yeah.

01:02:23.490 --> 01:02:25.970
<v Speaker 1>So this is open source. It's on GitHub,

01:02:25.970 --> 01:02:30.849
<v Speaker 1>you know, GitHub.com/loft-sh/vCluster.

01:02:31.535 --> 01:02:33.615
<v Speaker 1>And, you know, we have been getting some

01:02:33.615 --> 01:02:35.695
<v Speaker 1>issues for people. People are kicking the tires

01:02:35.695 --> 01:02:38.175
<v Speaker 1>a little bit, and it's really exciting.

01:02:40.735 --> 01:02:42.815
<v Speaker 1>You just can't predict what people are gonna

01:02:42.815 --> 01:02:44.575
<v Speaker 1>wanna do, you know, until you throw something

01:02:44.575 --> 01:02:45.775
<v Speaker 1>out in the wild like this.

01:02:48.750 --> 01:02:49.470
<v Speaker 0>Nice.

01:02:50.430 --> 01:02:51.150
<v Speaker 0>Alright.

01:02:51.630 --> 01:02:52.990
<v Speaker 0>Let's clean this up.

01:02:53.950 --> 01:02:55.870
<v Speaker 0>I'm assuming this is gonna be really really

01:02:55.870 --> 01:02:56.590
<v Speaker 0>simple.

01:02:57.550 --> 01:02:59.630
<v Speaker 0>And I have no idea what you configure

01:02:59.630 --> 01:03:02.030
<v Speaker 0>them on anymore, so let's work that out.

01:03:05.515 --> 01:03:07.755
<v Speaker 0>Okay, that's good. So let's go back to

01:03:07.755 --> 01:03:08.635
<v Speaker 0>this one.

01:03:09.995 --> 01:03:11.275
<v Speaker 0>VCluster

01:03:11.755 --> 01:03:12.315
<v Speaker 0>delete.

01:03:16.540 --> 01:03:18.220
<v Speaker 0>Copy

01:03:19.260 --> 01:03:21.340
<v Speaker 0>and paste, Dave. That's the future.

01:03:21.500 --> 01:03:22.940
<v Speaker 0>Stop changing stuff.

01:03:24.220 --> 01:03:26.620
<v Speaker 2>Yeah. Since everything is contained inside

01:03:26.940 --> 01:03:28.140
<v Speaker 2>those namespaces,

01:03:28.140 --> 01:03:30.755
<v Speaker 2>so the vCluster itself, right, the stateful set

01:03:30.755 --> 01:03:32.595
<v Speaker 2>and the service as well as

01:03:33.235 --> 01:03:35.955
<v Speaker 2>the workloads that run inside the vCluster, it's

01:03:35.955 --> 01:03:37.795
<v Speaker 2>actually really easy to purge a vCluster. You

01:03:37.795 --> 01:03:39.395
<v Speaker 2>can just delete the namespace.

01:03:40.995 --> 01:03:42.675
<v Speaker 1>Yeah. So you could literally, on your host

01:03:42.675 --> 01:03:43.795
<v Speaker 1>namespace, delete

01:03:45.940 --> 01:03:48.100
<v Speaker 1>or on your host delete those namespaces.

01:03:49.620 --> 01:03:50.420
<v Speaker 0>Done.

01:03:51.300 --> 01:03:52.180
<v Speaker 0>All gone.

01:03:53.860 --> 01:03:55.380
<v Speaker 0>Yeah. That was much easier. I was going

01:03:55.380 --> 01:03:57.140
<v Speaker 0>to go vCluster delete and work my way

01:03:57.140 --> 01:03:58.580
<v Speaker 0>through them all. But, yeah, I can just

01:03:58.580 --> 01:04:00.020
<v Speaker 0>remove that whole namespace.

01:04:00.405 --> 01:04:03.125
<v Speaker 0>And that's that's the the great thing about

01:04:03.125 --> 01:04:05.285
<v Speaker 0>vCluster is I only need the namespace and

01:04:05.285 --> 01:04:06.405
<v Speaker 0>I can clean it up with just the

01:04:06.405 --> 01:04:07.925
<v Speaker 0>namespace. That's

01:04:08.245 --> 01:04:09.045
<v Speaker 0>very cool.

01:04:09.765 --> 01:04:12.485
<v Speaker 0>Alright. Is there anything else? I know I

01:04:12.485 --> 01:04:13.045
<v Speaker 0>haven't

01:04:13.380 --> 01:04:15.619
<v Speaker 0>really stuck to the documentation too much, but

01:04:15.619 --> 01:04:17.059
<v Speaker 0>is there anything else that we wanna go

01:04:17.059 --> 01:04:18.980
<v Speaker 0>through before we finish up for today?

01:04:22.339 --> 01:04:23.700
<v Speaker 2>Maybe just a quick

01:04:24.339 --> 01:04:26.339
<v Speaker 2>shout out to what Fabian has been working,

01:04:26.955 --> 01:04:29.675
<v Speaker 2>our CTO at Loft Labs. He's been spending

01:04:29.675 --> 01:04:31.275
<v Speaker 2>a lot of time on this. You see

01:04:31.275 --> 01:04:34.075
<v Speaker 2>that they're operator guide monitoring and metrics.

01:04:34.795 --> 01:04:36.795
<v Speaker 2>He's been spending a lot of time on,

01:04:37.035 --> 01:04:39.275
<v Speaker 2>you know, actually making things like cube CTL

01:04:39.275 --> 01:04:42.410
<v Speaker 2>top work. So, essentially, you know, having the

01:04:42.410 --> 01:04:45.770
<v Speaker 2>capability to deploy metrics server inside your vCluster

01:04:46.329 --> 01:04:48.410
<v Speaker 2>and then hook up monitoring

01:04:48.410 --> 01:04:51.210
<v Speaker 2>via Prometheus and stuff like that. So that's

01:04:51.210 --> 01:04:53.930
<v Speaker 2>really moving more from, you know, the depth

01:04:53.930 --> 01:04:56.585
<v Speaker 2>stage towards staging environments,

01:04:57.224 --> 01:04:58.585
<v Speaker 2>production setups,

01:04:58.825 --> 01:05:00.825
<v Speaker 2>because they're very interesting use cases in that

01:05:00.825 --> 01:05:02.505
<v Speaker 2>space as well, and we'd like to explore

01:05:02.505 --> 01:05:04.585
<v Speaker 2>them further. But, obviously, we need to provide

01:05:04.585 --> 01:05:07.145
<v Speaker 2>some more, you know, tooling for operators to

01:05:07.145 --> 01:05:09.464
<v Speaker 2>gain confidence that they can actually, you know,

01:05:09.390 --> 01:05:11.869
<v Speaker 2>run that, you know, in in staging and

01:05:11.869 --> 01:05:13.070
<v Speaker 2>production scenarios,

01:05:13.950 --> 01:05:16.349
<v Speaker 2>you know, because without monitoring and and metrics

01:05:16.349 --> 01:05:18.029
<v Speaker 2>and things like that, that would not be

01:05:18.029 --> 01:05:20.030
<v Speaker 2>possible or not recommend that.

01:05:21.470 --> 01:05:23.995
<v Speaker 0>Very cool. Yeah. Yeah. Hadn't even considered those

01:05:23.995 --> 01:05:25.835
<v Speaker 0>kind of day one, day two things, but

01:05:25.835 --> 01:05:27.755
<v Speaker 0>it's nice that those are being worked on.

01:05:28.555 --> 01:05:29.115
<v Speaker 1>Yeah.

01:05:29.515 --> 01:05:32.155
<v Speaker 1>The tool is very rapidly changing.

01:05:32.235 --> 01:05:34.075
<v Speaker 1>Fabian's amazing, like we mentioned.

01:05:35.220 --> 01:05:37.460
<v Speaker 1>Just wanna thank to, you know, the folks

01:05:37.460 --> 01:05:39.860
<v Speaker 1>who have been, like, kicking the tires on

01:05:39.860 --> 01:05:42.100
<v Speaker 1>this thing and and giving us feedback. It's

01:05:42.100 --> 01:05:45.060
<v Speaker 1>so helpful. If if folks watching the stream,

01:05:45.060 --> 01:05:47.860
<v Speaker 1>you know, play around with vCluster, we'd we'd

01:05:47.860 --> 01:05:49.140
<v Speaker 1>love to hear about what you do.

01:05:52.505 --> 01:05:53.224
<v Speaker 0>Nice.

01:05:54.025 --> 01:05:54.825
<v Speaker 0>Alright.

01:05:55.305 --> 01:05:56.905
<v Speaker 0>Well, that was a whole lot of fun.

01:05:59.545 --> 01:06:01.224
<v Speaker 0>I'm I'm still a little bit shocked at

01:06:01.224 --> 01:06:03.305
<v Speaker 0>the simplicity and how easy it was to

01:06:03.305 --> 01:06:04.664
<v Speaker 0>really get everything started.

01:06:05.500 --> 01:06:07.180
<v Speaker 0>You know, you said at the start using

01:06:07.180 --> 01:06:08.940
<v Speaker 0>the vCluster CLI is just gonna make things

01:06:08.940 --> 01:06:09.820
<v Speaker 0>a lot easier.

01:06:10.540 --> 01:06:12.860
<v Speaker 0>Yeah. It was easy. Really, really easy.

01:06:13.180 --> 01:06:15.340
<v Speaker 0>And the speed I wish you can spin

01:06:15.340 --> 01:06:17.980
<v Speaker 0>up and shut down those virtual clusters is

01:06:17.980 --> 01:06:20.365
<v Speaker 0>a sight to behold. So thank you both

01:06:20.365 --> 01:06:22.205
<v Speaker 0>for for joining me and and guiding us

01:06:22.205 --> 01:06:23.805
<v Speaker 0>to the session. That that was a lot

01:06:23.805 --> 01:06:25.165
<v Speaker 0>of fun. I really enjoyed that.

01:06:25.885 --> 01:06:27.405
<v Speaker 0>Do you Thank you, David.

01:06:28.125 --> 01:06:29.885
<v Speaker 0>Do you have any

01:06:30.205 --> 01:06:31.805
<v Speaker 0>final words or anything you would like to

01:06:31.805 --> 01:06:33.565
<v Speaker 0>share with the audience before we say goodbye?

01:06:36.940 --> 01:06:39.740
<v Speaker 1>I I just reiterate what I said. You

01:06:39.740 --> 01:06:41.820
<v Speaker 1>know, if you if you kick the tires,

01:06:41.820 --> 01:06:43.900
<v Speaker 1>please please do let us know.

01:06:44.940 --> 01:06:47.340
<v Speaker 1>I'm at rich Burrows on Twitter.

01:06:48.385 --> 01:06:50.305
<v Speaker 1>At me. I'd love to hear about what

01:06:50.305 --> 01:06:51.585
<v Speaker 1>you do with vCluster.

01:06:53.425 --> 01:06:54.305
<v Speaker 0>Awesome.

01:06:54.545 --> 01:06:57.505
<v Speaker 0>And definitely check out the kube cuddle podcast.

01:06:58.705 --> 01:06:59.425
<v Speaker 0>Lots of fun there.

01:07:01.390 --> 01:07:03.150
<v Speaker 0>Alright. I will put links to all of

01:07:03.150 --> 01:07:05.150
<v Speaker 0>this in the show notes. Feel free to

01:07:05.150 --> 01:07:06.430
<v Speaker 0>play with vCluster,

01:07:06.430 --> 01:07:08.270
<v Speaker 0>reach out to Rich if you have some

01:07:08.270 --> 01:07:10.190
<v Speaker 0>fun, let him know if anything breaks. I'm

01:07:10.190 --> 01:07:12.190
<v Speaker 0>sure they'll be very happy to to help

01:07:12.190 --> 01:07:13.790
<v Speaker 0>you. As well based on the things we

01:07:13.790 --> 01:07:15.470
<v Speaker 0>were doing today, it's probably gonna take quite

01:07:15.470 --> 01:07:16.590
<v Speaker 0>a lot to break a vCluster.

01:07:17.125 --> 01:07:19.125
<v Speaker 0>But like I said, I had a lot

01:07:19.125 --> 01:07:20.805
<v Speaker 0>of fun. Thank you again for joining me

01:07:20.805 --> 01:07:22.245
<v Speaker 0>and I hope you both have a wonderful

01:07:22.245 --> 01:07:24.725
<v Speaker 0>day. Thanks again. You too.

01:07:25.525 --> 01:07:26.085
<v Speaker 2>Thank you.
