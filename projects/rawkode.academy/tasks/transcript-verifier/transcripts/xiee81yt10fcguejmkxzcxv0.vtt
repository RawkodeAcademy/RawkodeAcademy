WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 60f29a15-ea02-4a64-a8d5-61fc1cec4673
Created: 2025-04-29T19:35:13.649Z
Duration: 336.17343
Channels: 1

00:00:05.279 --> 00:00:08.320
<v Speaker 0>Welcome to the Bad Language Guide to Kubernetes.

00:00:09.120 --> 00:00:11.280
<v Speaker 0>In each of these short videos, I will

00:00:11.280 --> 00:00:13.759
<v Speaker 0>teach you three things that you may or

00:00:13.759 --> 00:00:15.679
<v Speaker 0>may not know about Kubernetes.

00:00:16.364 --> 00:00:19.005
<v Speaker 0>So with this being episode one, I thought

00:00:19.005 --> 00:00:21.005
<v Speaker 0>it was only fitting that we start with

00:00:21.005 --> 00:00:23.965
<v Speaker 0>the atomic unit of all Kubernetes workloads,

00:00:24.285 --> 00:00:25.165
<v Speaker 0>the pod.

00:00:27.005 --> 00:00:28.845
<v Speaker 0>Did you know that they were not always

00:00:28.845 --> 00:00:29.564
<v Speaker 0>called pods?

00:00:30.529 --> 00:00:33.090
<v Speaker 0>The first commit to the Kubernetes project was

00:00:33.090 --> 00:00:36.129
<v Speaker 0>on June 2014 by Joe Beda.

00:00:36.530 --> 00:00:39.410
<v Speaker 0>And just two days later, Brandon Burns on

00:00:39.410 --> 00:00:40.930
<v Speaker 0>June

00:00:41.649 --> 00:00:43.410
<v Speaker 0>pushed four pull requests,

00:00:43.570 --> 00:00:44.449
<v Speaker 0>renaming

00:00:44.530 --> 00:00:45.489
<v Speaker 0>two pods

00:00:45.705 --> 00:00:46.825
<v Speaker 0>from tasks.

00:00:47.065 --> 00:00:47.705
<v Speaker 0>Why?

00:00:47.945 --> 00:00:50.505
<v Speaker 0>Well, I can only speculate. But back then,

00:00:50.505 --> 00:00:53.065
<v Speaker 0>Kubernetes only had a single runtime,

00:00:53.305 --> 00:00:54.185
<v Speaker 0>Docker.

00:00:54.825 --> 00:00:57.305
<v Speaker 0>The mascot for the Docker project was a

00:00:57.305 --> 00:00:57.625
<v Speaker 0>whale.

00:00:58.940 --> 00:01:00.699
<v Speaker 0>What do you call a group of whales?

00:01:00.940 --> 00:01:02.219
<v Speaker 0>A fucking pod.

00:01:03.340 --> 00:01:05.019
<v Speaker 0>When you're learning Kubernetes,

00:01:05.099 --> 00:01:06.940
<v Speaker 0>you'll often work with pods that only have

00:01:06.940 --> 00:01:08.060
<v Speaker 0>a single container,

00:01:08.380 --> 00:01:10.299
<v Speaker 0>and it's not even uncommon for people to

00:01:10.299 --> 00:01:12.619
<v Speaker 0>use the term pod and container interchangeably.

00:01:13.465 --> 00:01:16.025
<v Speaker 0>Pods can run multiple containers,

00:01:16.185 --> 00:01:18.345
<v Speaker 0>but it's not something that we encourage often.

00:01:18.345 --> 00:01:20.505
<v Speaker 0>There are some very specific use cases.

00:01:20.745 --> 00:01:23.065
<v Speaker 0>And, also, did you know that Kubernetes

00:01:23.065 --> 00:01:25.465
<v Speaker 0>ships with a default that only allows you

00:01:25.465 --> 00:01:26.985
<v Speaker 0>to run 110

00:01:26.985 --> 00:01:27.625
<v Speaker 0>pods

00:01:27.990 --> 00:01:30.310
<v Speaker 0>on any given node. It's there to stop

00:01:30.310 --> 00:01:32.549
<v Speaker 0>you doing something that you're gonna regret or

00:01:32.549 --> 00:01:34.469
<v Speaker 0>to stop you doing something stupid,

00:01:34.710 --> 00:01:36.070
<v Speaker 0>but it is configurable.

00:01:36.950 --> 00:01:38.149
<v Speaker 0>And you can set it to whatever you

00:01:38.149 --> 00:01:38.630
<v Speaker 0>want,

00:01:39.030 --> 00:01:40.869
<v Speaker 0>you know, for when you feel that you

00:01:40.869 --> 00:01:43.195
<v Speaker 0>know better than the experts. However,

00:01:43.355 --> 00:01:44.555
<v Speaker 0>do you know what's not got a limit

00:01:44.555 --> 00:01:45.195
<v Speaker 0>on it?

00:01:46.715 --> 00:01:49.435
<v Speaker 0>The number of containers in a fucking pod.

00:01:49.835 --> 00:01:52.315
<v Speaker 0>Let's take a look. Alright. So what we

00:01:52.315 --> 00:01:54.955
<v Speaker 0>have here is a deployment YAML

00:01:55.320 --> 00:01:58.040
<v Speaker 0>with a replica set to a 20.

00:02:00.440 --> 00:02:02.600
<v Speaker 0>I'm just gonna apply this, and we're gonna

00:02:02.600 --> 00:02:03.400
<v Speaker 0>wait

00:02:03.560 --> 00:02:05.479
<v Speaker 0>oh, I'll wait a few minutes. You can

00:02:05.479 --> 00:02:06.200
<v Speaker 0>wait a few seconds.

00:02:14.055 --> 00:02:15.895
<v Speaker 0>Okay. And we can see that it it's

00:02:15.895 --> 00:02:17.895
<v Speaker 0>kind of stuck at a hundred and five.

00:02:18.935 --> 00:02:20.855
<v Speaker 0>So let's see how many are pending. You

00:02:20.855 --> 00:02:22.615
<v Speaker 0>know, we're we're gonna expect that to be

00:02:22.615 --> 00:02:23.575
<v Speaker 0>15

00:02:24.430 --> 00:02:25.790
<v Speaker 0>with a quick grep.

00:02:30.430 --> 00:02:32.590
<v Speaker 0>And if we describe one of these pods,

00:02:35.470 --> 00:02:38.735
<v Speaker 0>we'll see that it cannot be scheduled because

00:02:38.735 --> 00:02:41.535
<v Speaker 0>there are too many already running on a

00:02:41.535 --> 00:02:42.815
<v Speaker 0>single node cluster.

00:02:43.775 --> 00:02:44.575
<v Speaker 0>Alright.

00:02:44.975 --> 00:02:46.895
<v Speaker 0>But I've got one more fail

00:02:47.135 --> 00:02:48.415
<v Speaker 0>in this directory.

00:02:49.535 --> 00:02:50.335
<v Speaker 0>Pure

00:02:50.495 --> 00:02:51.295
<v Speaker 0>little pod.

00:02:52.290 --> 00:02:55.650
<v Speaker 0>No deployment. No replica set. Just one single

00:02:55.650 --> 00:02:56.290
<v Speaker 0>pod.

00:02:57.010 --> 00:02:58.690
<v Speaker 0>So let's let's apply it.

00:03:01.170 --> 00:03:01.890
<v Speaker 0>Oh,

00:03:04.049 --> 00:03:07.329
<v Speaker 0>this pod has 3,498

00:03:07.329 --> 00:03:07.969
<v Speaker 0>containers.

00:03:09.675 --> 00:03:12.715
<v Speaker 0>So while we have a 10 pod restriction

00:03:12.715 --> 00:03:14.715
<v Speaker 0>per node for our safety,

00:03:15.675 --> 00:03:17.675
<v Speaker 0>you can do whatever you want with the

00:03:17.675 --> 00:03:18.795
<v Speaker 0>containers within a pod.

00:03:20.980 --> 00:03:22.660
<v Speaker 0>Let's keep an eye on this and see

00:03:22.660 --> 00:03:23.140
<v Speaker 0>what happens.

00:03:33.415 --> 00:03:36.295
<v Speaker 0>So it's never gonna fulfill its pod destiny.

00:03:36.295 --> 00:03:37.095
<v Speaker 0>60

00:03:37.255 --> 00:03:38.935
<v Speaker 0>seems to be a better limit.

00:03:41.415 --> 00:03:43.575
<v Speaker 0>So you can apply a pod with any

00:03:43.575 --> 00:03:46.295
<v Speaker 0>number of containers to a Kubernetes cluster.

00:03:48.210 --> 00:03:50.290
<v Speaker 0>I'm not sitting along lunch

00:03:50.290 --> 00:03:51.250
<v Speaker 0>and run,

00:03:51.890 --> 00:03:53.090
<v Speaker 0>but you can do it.

00:03:56.450 --> 00:03:59.250
<v Speaker 0>So while this pod at three and a

00:03:59.250 --> 00:04:00.370
<v Speaker 0>half dozen containers,

00:04:01.945 --> 00:04:03.225
<v Speaker 0>There is no limit.

00:04:03.465 --> 00:04:05.785
<v Speaker 0>I was able to fill a pod YAML

00:04:05.785 --> 00:04:06.505
<v Speaker 0>file

00:04:06.985 --> 00:04:09.065
<v Speaker 0>with upwards of 8,000

00:04:09.065 --> 00:04:10.025
<v Speaker 0>containers.

00:04:10.905 --> 00:04:11.705
<v Speaker 0>Kudos

00:04:11.705 --> 00:04:12.985
<v Speaker 0>to KCS,

00:04:13.145 --> 00:04:14.585
<v Speaker 0>which did block it,

00:04:15.145 --> 00:04:15.705
<v Speaker 0>but

00:04:16.290 --> 00:04:17.810
<v Speaker 0>only after 4,000.

00:04:18.850 --> 00:04:21.730
<v Speaker 0>Okay. One last thing. Now I'm pretty sure

00:04:21.730 --> 00:04:24.130
<v Speaker 0>if you've worked with Kubernetes for any considerable

00:04:24.130 --> 00:04:25.250
<v Speaker 0>amount of time,

00:04:25.890 --> 00:04:27.650
<v Speaker 0>you may be familiar with what I'm about

00:04:27.650 --> 00:04:28.370
<v Speaker 0>to show you now.

00:04:37.495 --> 00:04:38.615
<v Speaker 0>Pod specs

00:04:38.775 --> 00:04:41.575
<v Speaker 0>are immutable, at least partially immutable,

00:04:41.975 --> 00:04:43.735
<v Speaker 0>and that you're not supposed to really work

00:04:43.735 --> 00:04:45.175
<v Speaker 0>with pods directly.

00:04:45.760 --> 00:04:48.400
<v Speaker 0>You're supposed to leverage higher level obstructions like

00:04:48.400 --> 00:04:50.800
<v Speaker 0>the deployment, the stateful set, the daemon set.

00:04:51.440 --> 00:04:52.160
<v Speaker 0>However,

00:04:52.240 --> 00:04:53.920
<v Speaker 0>a few things are

00:04:54.400 --> 00:04:55.440
<v Speaker 0>modifiable.

00:04:55.440 --> 00:04:57.200
<v Speaker 0>So let's get this back into a happy

00:04:57.200 --> 00:04:57.600
<v Speaker 0>condition.

00:04:58.615 --> 00:04:59.735
<v Speaker 0>All things good.

00:05:00.055 --> 00:05:00.775
<v Speaker 0>Now

00:05:01.014 --> 00:05:03.014
<v Speaker 0>we can upgrade the image

00:05:04.854 --> 00:05:06.615
<v Speaker 0>on any of our containers

00:05:06.854 --> 00:05:07.735
<v Speaker 0>like so.

00:05:09.335 --> 00:05:10.775
<v Speaker 0>Oh, mutated.

00:05:11.740 --> 00:05:13.580
<v Speaker 0>So you can work with pods

00:05:13.979 --> 00:05:15.419
<v Speaker 0>even if only slightly.

00:05:15.740 --> 00:05:17.580
<v Speaker 0>Not that I would recommend it. Be a

00:05:17.580 --> 00:05:18.460
<v Speaker 0>good citizen.

00:05:19.419 --> 00:05:20.460
<v Speaker 0>Don't fuck with pods.
