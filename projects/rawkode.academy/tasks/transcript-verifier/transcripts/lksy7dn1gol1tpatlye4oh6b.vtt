WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 5be9f919-aa62-4889-8e29-2a9206f1a70c
Created: 2025-04-29T19:47:35.479Z
Duration: 4990.091
Channels: 1

00:01:03.524 --> 00:01:06.085
<v Speaker 0>Hello, and welcome to today's episode of Rawkode

00:01:06.085 --> 00:01:08.244
<v Speaker 0>live. I am your host Rawkode.

00:01:08.645 --> 00:01:10.405
<v Speaker 0>Today, we're gonna be taking a look at

00:01:10.405 --> 00:01:11.925
<v Speaker 0>Vitess, a graduated

00:01:11.925 --> 00:01:13.284
<v Speaker 0>cloud native foundation project

00:01:14.100 --> 00:01:15.700
<v Speaker 0>that helps to aim,

00:01:15.780 --> 00:01:16.500
<v Speaker 0>that

00:01:16.820 --> 00:01:20.340
<v Speaker 0>aims to help with clustering and scaling MySQL.

00:01:20.580 --> 00:01:21.780
<v Speaker 0>To join me today,

00:01:22.500 --> 00:01:25.380
<v Speaker 0>I have Adepti and Alkin. They are maintainers

00:01:25.380 --> 00:01:27.265
<v Speaker 0>from the Vitess project and

00:01:27.745 --> 00:01:29.825
<v Speaker 0>employees of PlanetScale Data.

00:01:29.905 --> 00:01:31.425
<v Speaker 0>Hi there. How are you both?

00:01:32.225 --> 00:01:33.105
<v Speaker 1>Hello. Yeah.

00:01:35.265 --> 00:01:37.185
<v Speaker 0>Alright. I think what we should do is

00:01:37.185 --> 00:01:38.945
<v Speaker 0>start with introductions. I'd love to get to

00:01:38.945 --> 00:01:40.625
<v Speaker 0>know you both a little bit. So who

00:01:40.625 --> 00:01:41.505
<v Speaker 0>would like to go first?

00:01:43.119 --> 00:01:45.999
<v Speaker 1>I'll let Diti go first, please. Okay.

00:01:46.159 --> 00:01:47.520
<v Speaker 0>Yeah. Please tell us a little bit about

00:01:47.520 --> 00:01:49.359
<v Speaker 0>yourself, and then then we'll move on.

00:01:50.159 --> 00:01:51.920
<v Speaker 2>My name is Vitessigreedi.

00:01:51.920 --> 00:01:54.560
<v Speaker 2>I'm a software engineer at PlanetScale,

00:01:54.560 --> 00:01:56.799
<v Speaker 2>and I have

00:01:56.095 --> 00:01:57.935
<v Speaker 2>been with the company for

00:01:58.895 --> 00:02:01.295
<v Speaker 2>over two years, getting close to three years

00:02:01.295 --> 00:02:02.735
<v Speaker 2>now. PlanetScale

00:02:02.735 --> 00:02:05.854
<v Speaker 2>itself was founded in early two thousand eighteen,

00:02:05.854 --> 00:02:07.535
<v Speaker 2>so it's just about three years old.

00:02:08.430 --> 00:02:11.550
<v Speaker 2>I started working on Vitess at PlanetScale in

00:02:11.550 --> 00:02:14.270
<v Speaker 2>late twenty eighteen, and I became a maintainer

00:02:14.270 --> 00:02:15.550
<v Speaker 2>in 2019.

00:02:15.550 --> 00:02:18.750
<v Speaker 2>We have a maintainer team with 16 members,

00:02:19.790 --> 00:02:23.245
<v Speaker 2>and, I've been a maintainer since. And in

00:02:23.245 --> 00:02:25.085
<v Speaker 2>my maintainer role, I

00:02:25.645 --> 00:02:27.325
<v Speaker 2>communicate with the community,

00:02:27.405 --> 00:02:30.205
<v Speaker 2>answer questions on Slack, attend conferences,

00:02:30.205 --> 00:02:33.885
<v Speaker 2>mostly cube cons, but also other conferences where

00:02:33.885 --> 00:02:35.485
<v Speaker 2>I give talks about Vitess.

00:02:36.540 --> 00:02:39.580
<v Speaker 2>I am currently the tech lead, so I

00:02:39.580 --> 00:02:40.380
<v Speaker 2>also

00:02:40.620 --> 00:02:43.260
<v Speaker 2>manage the road map for Vitess and

00:02:44.620 --> 00:02:47.660
<v Speaker 2>just I'm involved in high level technical and

00:02:47.660 --> 00:02:49.180
<v Speaker 2>architectural decisions

00:02:49.260 --> 00:02:50.220
<v Speaker 2>on the project.

00:02:51.585 --> 00:02:53.585
<v Speaker 2>Alkan?

00:02:53.585 --> 00:02:54.305
<v Speaker 1>Alright.

00:02:54.945 --> 00:02:55.345
<v Speaker 1>Thanks,

00:02:55.985 --> 00:02:57.585
<v Speaker 1>Okay. My name is Alkan,

00:02:57.745 --> 00:03:00.305
<v Speaker 1>and I come from an enterprise world. And

00:03:00.305 --> 00:03:02.865
<v Speaker 1>I'm an open source database evangelist for the

00:03:02.865 --> 00:03:05.585
<v Speaker 1>for the last almost ten years, a decade

00:03:05.585 --> 00:03:08.230
<v Speaker 1>or so. And, I've been working in in

00:03:08.230 --> 00:03:11.430
<v Speaker 1>the MySQL specific projects in areas for, like,

00:03:11.430 --> 00:03:12.550
<v Speaker 1>services companies.

00:03:13.030 --> 00:03:14.950
<v Speaker 1>And I have joined PlanetScale

00:03:14.950 --> 00:03:18.550
<v Speaker 1>about six months ago and, been engaged in,

00:03:19.750 --> 00:03:21.750
<v Speaker 1>conferences and and

00:03:22.075 --> 00:03:23.595
<v Speaker 1>webinars before.

00:03:23.995 --> 00:03:24.475
<v Speaker 1>So,

00:03:25.275 --> 00:03:27.595
<v Speaker 1>what I am doing at PlanetScale is part

00:03:27.595 --> 00:03:30.395
<v Speaker 1>of the maintainer team, developer relations,

00:03:30.795 --> 00:03:31.115
<v Speaker 1>and,

00:03:31.675 --> 00:03:34.590
<v Speaker 1>also a little bit of, multiple hats over

00:03:34.590 --> 00:03:37.710
<v Speaker 1>here with customer success and solution engineering

00:03:38.030 --> 00:03:40.030
<v Speaker 1>and and so on. So

00:03:40.590 --> 00:03:41.950
<v Speaker 1>I love sailing,

00:03:42.030 --> 00:03:43.390
<v Speaker 1>so some people know.

00:03:43.630 --> 00:03:44.190
<v Speaker 1>And

00:03:44.590 --> 00:03:45.710
<v Speaker 1>that's about it.

00:03:46.590 --> 00:03:48.190
<v Speaker 0>Nice. Well, it sounds like you both keep

00:03:48.190 --> 00:03:49.310
<v Speaker 0>yourself extremely busy.

00:03:51.224 --> 00:03:52.504
<v Speaker 0>Yeah. Awesome.

00:03:52.504 --> 00:03:53.145
<v Speaker 0>Well,

00:03:53.305 --> 00:03:56.105
<v Speaker 0>why don't we kind of just take a

00:03:56.105 --> 00:03:57.385
<v Speaker 0>a few moments? I know we've got some

00:03:57.385 --> 00:03:59.545
<v Speaker 0>slides that's gonna explain

00:03:59.625 --> 00:04:02.504
<v Speaker 0>what Vitess is, why people need to, etcetera.

00:04:02.540 --> 00:04:03.100
<v Speaker 0>So,

00:04:03.340 --> 00:04:05.580
<v Speaker 0>why don't you get your screen shared up?

00:04:05.580 --> 00:04:07.580
<v Speaker 0>We'll move that over. Let me share my

00:04:07.580 --> 00:04:08.780
<v Speaker 1>screen real quick.

00:04:09.020 --> 00:04:10.780
<v Speaker 1>Alright. Chrome tab.

00:04:13.260 --> 00:04:14.780
<v Speaker 1>Hope you can see it.

00:04:15.340 --> 00:04:18.115
<v Speaker 0>Yep. It is just coming. There we go.

00:04:18.115 --> 00:04:21.074
<v Speaker 0>Perfect. Alright. So okay. We're done with the,

00:04:21.555 --> 00:04:24.275
<v Speaker 1>inter introduction. So PlanetScale, we talked about that

00:04:24.275 --> 00:04:27.314
<v Speaker 1>was founded in February. The the significance of

00:04:27.314 --> 00:04:29.955
<v Speaker 1>of PlanetScale is the co creators of Vitess

00:04:29.955 --> 00:04:30.754
<v Speaker 1>are actually

00:04:32.400 --> 00:04:34.800
<v Speaker 1>the the founders of of PlanetScale. So there

00:04:34.800 --> 00:04:35.840
<v Speaker 1>is a mutual

00:04:36.800 --> 00:04:39.600
<v Speaker 1>relation between the Vitess project and the

00:04:40.640 --> 00:04:42.320
<v Speaker 1>and the founders. So,

00:04:42.960 --> 00:04:43.680
<v Speaker 1>basically,

00:04:44.000 --> 00:04:46.560
<v Speaker 1>our creators are the co owners,

00:04:47.335 --> 00:04:50.695
<v Speaker 1>technically speaking. So a clustering system,

00:04:50.855 --> 00:04:53.895
<v Speaker 1>we don't call it a clustering system, technically.

00:04:53.895 --> 00:04:56.855
<v Speaker 1>It's actually a framework because it comes in

00:04:56.855 --> 00:04:59.014
<v Speaker 1>bells and whistles. CNCF

00:04:59.014 --> 00:05:01.255
<v Speaker 1>graduated project, if you have ever looked into

00:05:01.255 --> 00:05:03.490
<v Speaker 1>CNCF, there are multiple projects. This is one

00:05:03.490 --> 00:05:06.290
<v Speaker 1>of the earliest database projects. There are many

00:05:06.290 --> 00:05:08.450
<v Speaker 1>projects that the the list is is long

00:05:08.450 --> 00:05:10.850
<v Speaker 1>and very successful applications over there.

00:05:11.250 --> 00:05:11.650
<v Speaker 1>And,

00:05:12.050 --> 00:05:14.530
<v Speaker 1>it's open source, Apache two point zero license.

00:05:14.530 --> 00:05:15.490
<v Speaker 1>That's important.

00:05:15.730 --> 00:05:18.705
<v Speaker 1>And we have contributors around the community around

00:05:18.705 --> 00:05:20.865
<v Speaker 1>the world also, so it's not actually US

00:05:20.865 --> 00:05:24.385
<v Speaker 1>centric at all. The we also decided to

00:05:24.385 --> 00:05:26.785
<v Speaker 1>highlight this. It's written in Go link, and

00:05:26.785 --> 00:05:28.625
<v Speaker 1>and contributors

00:05:28.625 --> 00:05:30.225
<v Speaker 1>should be aware of it's it's a Go

00:05:30.225 --> 00:05:31.264
<v Speaker 1>language that's used.

00:05:31.840 --> 00:05:33.920
<v Speaker 1>And Go comes with a lot of

00:05:34.880 --> 00:05:36.640
<v Speaker 1>updates to existing

00:05:37.360 --> 00:05:38.960
<v Speaker 1>breed of languages,

00:05:38.960 --> 00:05:40.800
<v Speaker 1>so we are actually

00:05:41.360 --> 00:05:42.720
<v Speaker 1>Go shop.

00:05:43.440 --> 00:05:44.320
<v Speaker 1>So

00:05:44.705 --> 00:05:47.025
<v Speaker 1>so today, we wanna talk about the agenda

00:05:47.025 --> 00:05:49.025
<v Speaker 1>on on the architecture,

00:05:49.185 --> 00:05:52.145
<v Speaker 1>use cases, and how do we actually install,

00:05:52.145 --> 00:05:54.465
<v Speaker 1>possibly show a demo with you.

00:05:55.665 --> 00:05:58.305
<v Speaker 1>So let's let's get into the architecture basics.

00:05:58.305 --> 00:05:59.665
<v Speaker 1>We have

00:06:01.380 --> 00:06:04.100
<v Speaker 1>let's go actually talk about the glossary. So

00:06:04.100 --> 00:06:05.300
<v Speaker 1>we have some terms,

00:06:05.539 --> 00:06:08.660
<v Speaker 1>which is database terms but adopted to Vitess.

00:06:08.740 --> 00:06:10.580
<v Speaker 1>Vitess is not a database. I need to

00:06:10.580 --> 00:06:13.220
<v Speaker 1>highlight that. Vitess is a framework, drives the

00:06:13.220 --> 00:06:15.575
<v Speaker 1>database. So the MySQL in the back end

00:06:15.575 --> 00:06:17.575
<v Speaker 1>MySQL is still good old,

00:06:18.055 --> 00:06:21.575
<v Speaker 1>well, not good, but MySQL is great. So,

00:06:21.975 --> 00:06:23.655
<v Speaker 1>it's a it's a great database in the

00:06:23.655 --> 00:06:25.575
<v Speaker 1>back end. So we don't actually make any

00:06:25.575 --> 00:06:28.260
<v Speaker 1>changes to the database. Database still remains to

00:06:28.260 --> 00:06:28.660
<v Speaker 1>be,

00:06:29.220 --> 00:06:31.700
<v Speaker 1>in one piece, but we actually drive the

00:06:31.700 --> 00:06:33.460
<v Speaker 1>database with Vitess,

00:06:33.860 --> 00:06:37.140
<v Speaker 1>edition. So we call, a key space a

00:06:37.140 --> 00:06:39.620
<v Speaker 1>database, which is which one when it's sharded.

00:06:39.620 --> 00:06:41.944
<v Speaker 1>So it actually had to be something other

00:06:41.944 --> 00:06:42.985
<v Speaker 1>than a database.

00:06:43.145 --> 00:06:45.384
<v Speaker 1>So when it's sharded, it has a key

00:06:45.384 --> 00:06:47.465
<v Speaker 1>space ID. It has a primary v index

00:06:47.465 --> 00:06:49.784
<v Speaker 1>and a v index that actually knows where

00:06:49.784 --> 00:06:52.185
<v Speaker 1>the shards are. There's a v t gate.

00:06:52.425 --> 00:06:54.905
<v Speaker 1>The proxy server accepts the connections, and the

00:06:54.905 --> 00:06:56.905
<v Speaker 1>v t tablet is the back end server

00:06:57.360 --> 00:07:00.320
<v Speaker 1>which pairs with the MySQL database.

00:07:00.560 --> 00:07:03.040
<v Speaker 1>And there's a topology that knows what's what's

00:07:03.040 --> 00:07:04.480
<v Speaker 1>what's going on within the

00:07:05.440 --> 00:07:06.160
<v Speaker 1>cluster.

00:07:06.640 --> 00:07:07.200
<v Speaker 1>So,

00:07:07.840 --> 00:07:10.720
<v Speaker 1>let's talk about a a common replicated environment.

00:07:11.035 --> 00:07:13.035
<v Speaker 1>So we have a a database,

00:07:13.835 --> 00:07:17.435
<v Speaker 1>a sidecar that actually runs the the MySQL

00:07:17.435 --> 00:07:18.315
<v Speaker 1>daemon

00:07:18.315 --> 00:07:18.955
<v Speaker 1>process,

00:07:19.195 --> 00:07:21.195
<v Speaker 1>and we call this a VT tablet. So

00:07:21.195 --> 00:07:23.880
<v Speaker 1>each VT tablet is paired with with

00:07:24.520 --> 00:07:26.600
<v Speaker 1>same host as the as the MySQL d

00:07:26.600 --> 00:07:27.240
<v Speaker 1>runs.

00:07:27.960 --> 00:07:30.840
<v Speaker 1>And you will have multiple VT tablets.

00:07:31.400 --> 00:07:33.080
<v Speaker 1>And so

00:07:33.640 --> 00:07:36.760
<v Speaker 1>it's it's a it's a VT tablet

00:07:37.515 --> 00:07:39.275
<v Speaker 1>which which paired with

00:07:40.235 --> 00:07:42.555
<v Speaker 1>it has a responsibility of of running the

00:07:42.555 --> 00:07:43.275
<v Speaker 1>database,

00:07:43.435 --> 00:07:46.155
<v Speaker 1>but also driven by the VTgate. So VTgate

00:07:46.155 --> 00:07:47.995
<v Speaker 1>is actually our our proxy

00:07:48.155 --> 00:07:50.300
<v Speaker 1>where the application connects to. So when you

00:07:50.300 --> 00:07:52.060
<v Speaker 1>actually make a connection to the to the

00:07:52.060 --> 00:07:53.420
<v Speaker 1>Vitess cluster,

00:07:53.420 --> 00:07:55.740
<v Speaker 1>you actually go through the Vitess gate. Vitess

00:07:55.740 --> 00:07:56.620
<v Speaker 1>Vitess

00:07:56.620 --> 00:07:59.260
<v Speaker 1>is the is the query serving

00:07:59.260 --> 00:08:01.020
<v Speaker 1>property of of Vitess,

00:08:01.260 --> 00:08:03.820
<v Speaker 1>and and that actually points to the Vitess.

00:08:08.285 --> 00:08:10.365
<v Speaker 1>So in a in a large deployment, you

00:08:10.365 --> 00:08:12.365
<v Speaker 1>would have multiple VT gates. You don't actually

00:08:12.365 --> 00:08:13.085
<v Speaker 1>have one.

00:08:13.485 --> 00:08:17.085
<v Speaker 1>Technically speaking, one VT gate cannot or be

00:08:17.085 --> 00:08:19.805
<v Speaker 1>possibly be responsible for all the queries. We're

00:08:19.805 --> 00:08:22.130
<v Speaker 1>talking about hundreds of shards in in in

00:08:22.130 --> 00:08:23.010
<v Speaker 1>some cases,

00:08:23.729 --> 00:08:26.210
<v Speaker 1>thousands of servers in in behind or or

00:08:26.210 --> 00:08:27.250
<v Speaker 1>or nodes.

00:08:27.729 --> 00:08:30.130
<v Speaker 1>VTgate would also have to scale, and that's

00:08:30.130 --> 00:08:32.209
<v Speaker 1>that's this is how you would actually scale.

00:08:32.450 --> 00:08:32.850
<v Speaker 1>And,

00:08:34.130 --> 00:08:36.404
<v Speaker 1>and then well, your application,

00:08:36.804 --> 00:08:38.404
<v Speaker 1>connects to the VTgate.

00:08:38.644 --> 00:08:41.204
<v Speaker 1>And then at that point, you need to

00:08:41.204 --> 00:08:41.764
<v Speaker 1>know

00:08:42.164 --> 00:08:44.725
<v Speaker 1>where is my data. So in this example,

00:08:44.725 --> 00:08:46.884
<v Speaker 1>we have a commerce database which is sharded,

00:08:47.660 --> 00:08:49.820
<v Speaker 1>and, it has two shards.

00:08:50.300 --> 00:08:50.699
<v Speaker 1>And,

00:08:51.259 --> 00:08:52.779
<v Speaker 1>how do we know

00:08:53.100 --> 00:08:55.819
<v Speaker 1>where that query needs to point to? Vitessgate

00:08:55.819 --> 00:08:57.579
<v Speaker 1>knows where your, actually,

00:08:58.060 --> 00:08:58.940
<v Speaker 1>data sits.

00:08:59.415 --> 00:09:01.735
<v Speaker 1>So if you are actually sharded by the

00:09:01.735 --> 00:09:02.774
<v Speaker 1>customer ID

00:09:02.935 --> 00:09:05.495
<v Speaker 1>and then your in n number of customers

00:09:05.495 --> 00:09:08.134
<v Speaker 1>sits on one shard, and then VTgate would

00:09:08.134 --> 00:09:10.134
<v Speaker 1>know when you send a query to that

00:09:10.134 --> 00:09:12.375
<v Speaker 1>shard. And you can also have an uncharted

00:09:12.375 --> 00:09:15.620
<v Speaker 1>cluster within Vitess. This is also something we

00:09:15.620 --> 00:09:16.580
<v Speaker 1>need to clarify.

00:09:16.980 --> 00:09:19.060
<v Speaker 1>You do not have to shard

00:09:19.220 --> 00:09:22.100
<v Speaker 1>when you're using Vitess. Vitess also support supports

00:09:22.100 --> 00:09:22.980
<v Speaker 1>uncharted

00:09:22.980 --> 00:09:25.300
<v Speaker 1>just like the good old, you know, database

00:09:26.065 --> 00:09:27.105
<v Speaker 1>applications,

00:09:27.345 --> 00:09:29.584
<v Speaker 1>but you would also have the benefits of

00:09:29.584 --> 00:09:30.225
<v Speaker 1>the

00:09:30.464 --> 00:09:33.505
<v Speaker 1>the proxy server, the topology server,

00:09:33.904 --> 00:09:35.105
<v Speaker 1>and additional

00:09:35.825 --> 00:09:38.464
<v Speaker 1>products that actually bundled in the Vitess framework.

00:09:40.660 --> 00:09:41.940
<v Speaker 1>So we actually

00:09:42.500 --> 00:09:46.660
<v Speaker 1>query your customer ID to that shard. And

00:09:46.660 --> 00:09:47.860
<v Speaker 1>in this example,

00:09:48.020 --> 00:09:48.740
<v Speaker 1>we can

00:09:49.700 --> 00:09:51.540
<v Speaker 1>know where the shards are. So the next

00:09:51.540 --> 00:09:53.940
<v Speaker 1>thing is is the is the VT gate

00:09:53.905 --> 00:09:54.945
<v Speaker 1>that actually

00:09:55.185 --> 00:09:58.145
<v Speaker 1>works with the topology server. So in this

00:09:58.145 --> 00:09:59.425
<v Speaker 1>example, we have

00:09:59.825 --> 00:10:01.345
<v Speaker 1>supported topology

00:10:01.345 --> 00:10:04.065
<v Speaker 1>servers that knows your cluster. So you need

00:10:04.065 --> 00:10:05.185
<v Speaker 1>to actually store

00:10:05.985 --> 00:10:07.105
<v Speaker 1>all this information

00:10:07.730 --> 00:10:11.009
<v Speaker 1>into where where they sit and and keep

00:10:11.009 --> 00:10:12.050
<v Speaker 1>them up to date.

00:10:13.329 --> 00:10:16.370
<v Speaker 1>The this allows the the Vitess framework to

00:10:16.370 --> 00:10:19.009
<v Speaker 1>know the state of the of the the

00:10:19.009 --> 00:10:19.970
<v Speaker 1>cluster

00:10:19.835 --> 00:10:21.995
<v Speaker 1>at all times. So it actually keep updating

00:10:21.995 --> 00:10:24.315
<v Speaker 1>if things change or if things move.

00:10:24.555 --> 00:10:26.795
<v Speaker 1>And in this example, we also say it's

00:10:26.795 --> 00:10:29.115
<v Speaker 1>CD or Zookeeper are are are

00:10:29.835 --> 00:10:30.635
<v Speaker 1>supported

00:10:32.475 --> 00:10:33.435
<v Speaker 1>topology managers.

00:10:34.220 --> 00:10:35.260
<v Speaker 1>So we are

00:10:37.500 --> 00:10:38.780
<v Speaker 1>a VTCTLD

00:10:38.780 --> 00:10:41.580
<v Speaker 1>is a a control daemon. That's another component

00:10:41.580 --> 00:10:42.620
<v Speaker 1>of the Vitess,

00:10:42.780 --> 00:10:45.900
<v Speaker 1>and that runs the the ad hoc operations

00:10:46.380 --> 00:10:50.220
<v Speaker 1>and bunch of other things. So since

00:10:49.605 --> 00:10:51.605
<v Speaker 1>the it's a control plane, you need to

00:10:51.605 --> 00:10:54.485
<v Speaker 1>actually have a have a way to change

00:10:54.485 --> 00:10:57.445
<v Speaker 1>things around and and and apply changes.

00:10:57.605 --> 00:10:58.805
<v Speaker 1>So VTCTLD

00:10:58.805 --> 00:11:00.565
<v Speaker 1>actually is the daemon that actually

00:11:01.045 --> 00:11:01.845
<v Speaker 1>controls all that.

00:11:02.770 --> 00:11:03.330
<v Speaker 1>So

00:11:05.170 --> 00:11:07.490
<v Speaker 1>we we said the keeping the state,

00:11:08.690 --> 00:11:11.890
<v Speaker 1>Vitess knows the schemas, shards, clusters, several roles,

00:11:11.890 --> 00:11:13.970
<v Speaker 1>and all that all that stuff as as

00:11:13.970 --> 00:11:15.090
<v Speaker 1>a state in the TOPL.

00:11:15.635 --> 00:11:17.475
<v Speaker 1>So the the when we look at the

00:11:17.475 --> 00:11:18.755
<v Speaker 1>the control plane,

00:11:19.395 --> 00:11:21.795
<v Speaker 1>we have we talked about the VT gates,

00:11:21.795 --> 00:11:22.915
<v Speaker 1>the proxy server.

00:11:23.315 --> 00:11:25.715
<v Speaker 1>We also have a built in backup and

00:11:25.715 --> 00:11:26.435
<v Speaker 1>recovery,

00:11:26.595 --> 00:11:29.170
<v Speaker 1>and and it pretty much automated. When when

00:11:29.170 --> 00:11:31.490
<v Speaker 1>a when a node fails, it takes a

00:11:31.490 --> 00:11:33.810
<v Speaker 1>backup and then restores it and then connects

00:11:33.810 --> 00:11:36.450
<v Speaker 1>the dots, and then replication resumes where it

00:11:36.450 --> 00:11:37.250
<v Speaker 1>left off.

00:11:37.730 --> 00:11:40.450
<v Speaker 1>We have integrated failover, which is an a

00:11:40.450 --> 00:11:41.890
<v Speaker 1>very popular known

00:11:42.690 --> 00:11:43.570
<v Speaker 1>open source

00:11:43.945 --> 00:11:47.065
<v Speaker 1>utility called Orchestrator as a VTORC within the

00:11:47.065 --> 00:11:47.705
<v Speaker 1>cluster.

00:11:48.345 --> 00:11:51.065
<v Speaker 1>The sharding schemes are are are are optional.

00:11:51.065 --> 00:11:53.625
<v Speaker 1>You can actually customize how do you want

00:11:53.625 --> 00:11:55.305
<v Speaker 1>to shard. You don't actually have to shard

00:11:55.305 --> 00:11:56.985
<v Speaker 1>by customer ID in that example.

00:11:57.225 --> 00:11:59.339
<v Speaker 1>There are other ways to do that. Advanced

00:11:59.339 --> 00:12:02.220
<v Speaker 1>replication options with the vreplication and vstream, these

00:12:02.220 --> 00:12:05.420
<v Speaker 1>are, like, components of Vitess that you actually

00:12:05.740 --> 00:12:08.540
<v Speaker 1>control how you want to replicate from and

00:12:08.540 --> 00:12:09.180
<v Speaker 1>to.

00:12:09.820 --> 00:12:10.780
<v Speaker 1>This is

00:12:11.020 --> 00:12:12.860
<v Speaker 1>one step beyond the

00:12:13.385 --> 00:12:16.425
<v Speaker 1>built in replication that that MySQL provides.

00:12:16.825 --> 00:12:19.225
<v Speaker 1>Of course, there's an online DDL option that

00:12:19.225 --> 00:12:21.625
<v Speaker 1>when you have to actually do a schema

00:12:21.625 --> 00:12:24.745
<v Speaker 1>migration or schema changes or, you know, in

00:12:24.745 --> 00:12:26.025
<v Speaker 1>short, alter table,

00:12:26.265 --> 00:12:28.105
<v Speaker 1>you would actually still drive

00:12:30.140 --> 00:12:34.460
<v Speaker 1>GitHub online schema transfer or or Percona Percona

00:12:34.460 --> 00:12:36.220
<v Speaker 1>Toolkit online schema change

00:12:36.700 --> 00:12:37.660
<v Speaker 1>utility.

00:12:37.660 --> 00:12:40.460
<v Speaker 1>And this is also driven by Vitess itself

00:12:40.460 --> 00:12:42.300
<v Speaker 1>or do a direct up supply.

00:12:43.394 --> 00:12:46.675
<v Speaker 1>In summary, the Vitess architecture looks like this.

00:12:46.675 --> 00:12:49.154
<v Speaker 1>We have the application server that actually connects

00:12:49.154 --> 00:12:52.195
<v Speaker 1>the to your your preferred load balancer, which

00:12:52.195 --> 00:12:54.834
<v Speaker 1>actually points to VT gate. You're gonna say,

00:12:54.834 --> 00:12:56.195
<v Speaker 1>okay. I have a proxy. Why do I

00:12:56.195 --> 00:12:58.195
<v Speaker 1>need load balancer? Because you might have multiple

00:12:58.195 --> 00:13:00.569
<v Speaker 1>VT gates and and scale out. So that's

00:13:00.569 --> 00:13:03.930
<v Speaker 1>that's why. And then you have BTCTLD

00:13:03.930 --> 00:13:05.769
<v Speaker 1>daemon that control the

00:13:06.089 --> 00:13:07.290
<v Speaker 1>the architecture,

00:13:07.449 --> 00:13:09.449
<v Speaker 1>and the topos server knows where where things

00:13:09.449 --> 00:13:11.769
<v Speaker 1>are. And then you have the the tablets

00:13:14.195 --> 00:13:17.075
<v Speaker 1>and the clusters that's driven by by by

00:13:17.075 --> 00:13:19.955
<v Speaker 1>tablet with the your your primary, your replicas,

00:13:20.115 --> 00:13:22.035
<v Speaker 1>your your read only replicas, and then you

00:13:22.035 --> 00:13:24.835
<v Speaker 1>can actually scale out based on your application.

00:13:24.835 --> 00:13:27.330
<v Speaker 1>This is not like this is an example.

00:13:27.650 --> 00:13:31.090
<v Speaker 1>This is not just one standard application. You

00:13:31.090 --> 00:13:34.370
<v Speaker 1>actually may actually have to customize it based

00:13:34.370 --> 00:13:36.370
<v Speaker 1>on your workload, we call it.

00:13:37.410 --> 00:13:40.690
<v Speaker 1>Supported back end databases are MySQL 5.7

00:13:40.690 --> 00:13:44.045
<v Speaker 1>and version eight, and and we we also

00:13:44.685 --> 00:13:47.485
<v Speaker 1>have MariaDB support. It does not work on

00:13:47.485 --> 00:13:48.605
<v Speaker 1>PostgresQL,

00:13:48.605 --> 00:13:51.805
<v Speaker 1>and Postgres is not in the road map

00:13:51.805 --> 00:13:53.725
<v Speaker 1>at this time, or there is not much

00:13:53.725 --> 00:13:56.250
<v Speaker 1>of a development that actually. So we can

00:13:56.250 --> 00:14:00.170
<v Speaker 1>call Vitess is is pretty much MySQL centric

00:14:00.170 --> 00:14:01.449
<v Speaker 1>framework

00:14:01.449 --> 00:14:02.410
<v Speaker 1>at this point.

00:14:04.570 --> 00:14:07.209
<v Speaker 1>You can you can like in that example,

00:14:07.209 --> 00:14:08.170
<v Speaker 1>you can

00:14:08.485 --> 00:14:11.685
<v Speaker 1>have a a sharding done on the entire

00:14:11.685 --> 00:14:14.565
<v Speaker 1>application or part of that application. So there

00:14:14.565 --> 00:14:16.405
<v Speaker 1>is a mix and match from the community

00:14:16.405 --> 00:14:19.685
<v Speaker 1>that we know uses not entire. Like, we

00:14:19.685 --> 00:14:21.445
<v Speaker 1>cannot say, okay. This entire

00:14:22.005 --> 00:14:24.620
<v Speaker 1>shop is on Vitess, but, you know, where

00:14:24.620 --> 00:14:25.980
<v Speaker 1>it needed to scale

00:14:26.300 --> 00:14:28.860
<v Speaker 1>or or fit for Vitess is is migrated

00:14:28.860 --> 00:14:31.740
<v Speaker 1>in that. And then the Vitess

00:14:33.020 --> 00:14:36.140
<v Speaker 1>allows sharding and resharding. So when you shard

00:14:36.700 --> 00:14:39.195
<v Speaker 1>in the in the old school, it's it's

00:14:39.355 --> 00:14:40.715
<v Speaker 1>you're pretty much stuck.

00:14:41.035 --> 00:14:42.955
<v Speaker 1>But with Vitess, if you shard, you can

00:14:42.955 --> 00:14:45.115
<v Speaker 1>reshard. You can change your your your your

00:14:45.115 --> 00:14:45.835
<v Speaker 1>methods.

00:14:45.995 --> 00:14:47.995
<v Speaker 1>And then within the video application and the

00:14:47.995 --> 00:14:50.075
<v Speaker 1>tools provided, you can migrate it into new

00:14:50.075 --> 00:14:50.715
<v Speaker 1>new

00:14:51.115 --> 00:14:51.515
<v Speaker 1>method.

00:14:52.160 --> 00:14:54.640
<v Speaker 1>And so this the idea is to minimize

00:14:54.640 --> 00:14:57.440
<v Speaker 1>backup and recovery. Hopefully, I'm not out of

00:14:57.920 --> 00:14:58.560
<v Speaker 1>time,

00:14:59.440 --> 00:15:02.400
<v Speaker 1>and and we have more resources at these

00:15:02.400 --> 00:15:04.480
<v Speaker 1>things. And we'll share we'll share these slides

00:15:04.480 --> 00:15:05.200
<v Speaker 1>also.

00:15:05.760 --> 00:15:06.640
<v Speaker 0>Perfect.

00:15:06.640 --> 00:15:07.200
<v Speaker 0>Thank you.

00:15:08.585 --> 00:15:09.465
<v Speaker 0>Okay.

00:15:12.985 --> 00:15:14.505
<v Speaker 0>Alright. There was

00:15:15.145 --> 00:15:18.345
<v Speaker 0>many more components there than I was expecting.

00:15:18.904 --> 00:15:20.665
<v Speaker 0>So I just wanted to make sure I

00:15:20.665 --> 00:15:22.825
<v Speaker 0>can I understood enough of that where we're

00:15:22.825 --> 00:15:24.310
<v Speaker 0>going? Like,

00:15:25.030 --> 00:15:26.070
<v Speaker 0>it says that so

00:15:26.550 --> 00:15:28.550
<v Speaker 0>Vitess augments

00:15:28.710 --> 00:15:30.950
<v Speaker 0>MySQL and MariaDB. Right? It's it's not replacing

00:15:30.950 --> 00:15:33.030
<v Speaker 0>them. We're still using those standard databases and

00:15:33.030 --> 00:15:35.670
<v Speaker 0>our infrastructure that that has not changed. So

00:15:36.055 --> 00:15:38.055
<v Speaker 0>but what it does do is provide a

00:15:38.055 --> 00:15:40.695
<v Speaker 0>proxy that's gonna handle all the requests that

00:15:40.695 --> 00:15:42.615
<v Speaker 0>we wish to send our database and that

00:15:42.615 --> 00:15:43.815
<v Speaker 0>provides a

00:15:44.455 --> 00:15:47.255
<v Speaker 0>some sort of hashing key mechanism to shard

00:15:47.255 --> 00:15:50.135
<v Speaker 0>that across multiple MySQL, MariaDB's and I don't

00:15:50.135 --> 00:15:52.455
<v Speaker 0>even need to worry about it. I think

00:15:51.810 --> 00:15:53.810
<v Speaker 0>that alone is particularly cool.

00:15:54.290 --> 00:15:55.810
<v Speaker 0>But then you kept coming with all this

00:15:55.810 --> 00:15:58.290
<v Speaker 0>other stuff, like online backups and the restore

00:15:58.290 --> 00:15:59.330
<v Speaker 0>processes.

00:15:59.730 --> 00:16:00.210
<v Speaker 0>Just

00:16:01.010 --> 00:16:03.010
<v Speaker 0>all these little things that are really cumbersome

00:16:03.010 --> 00:16:04.370
<v Speaker 0>when it comes to working

00:16:04.824 --> 00:16:06.824
<v Speaker 0>with my scale specifically. I think we've all

00:16:06.824 --> 00:16:08.185
<v Speaker 0>worked with it at some point over the

00:16:08.185 --> 00:16:10.505
<v Speaker 0>years. Like, trying to scale it beyond a

00:16:10.505 --> 00:16:12.584
<v Speaker 0>certain point is always very, very challenging.

00:16:12.824 --> 00:16:15.545
<v Speaker 0>I wish Vitess had existed in 02/2010

00:16:16.264 --> 00:16:18.024
<v Speaker 0>just from what you've showed me there in

00:16:18.024 --> 00:16:19.545
<v Speaker 0>those slides. So I'm really excited to play

00:16:19.545 --> 00:16:21.000
<v Speaker 0>with it today and and see some of

00:16:21.000 --> 00:16:21.880
<v Speaker 0>this in action.

00:16:22.519 --> 00:16:22.920
<v Speaker 0>So,

00:16:24.519 --> 00:16:26.279
<v Speaker 0>like, I'm

00:16:26.279 --> 00:16:27.400
<v Speaker 0>curious about

00:16:27.640 --> 00:16:29.240
<v Speaker 0>third party tooling.

00:16:29.880 --> 00:16:31.240
<v Speaker 0>So I'll just throw a few questions out

00:16:31.240 --> 00:16:32.440
<v Speaker 0>now before we go into the hands on

00:16:32.440 --> 00:16:34.955
<v Speaker 0>bit. But does if I wanna use, like,

00:16:34.955 --> 00:16:37.435
<v Speaker 0>a a MySQL browser on my local machine

00:16:37.435 --> 00:16:39.115
<v Speaker 0>and it goes through

00:16:39.355 --> 00:16:41.275
<v Speaker 0>the test, would that cause any sort of

00:16:41.275 --> 00:16:43.675
<v Speaker 0>problems, or would that just work?

00:16:44.875 --> 00:16:46.875
<v Speaker 2>It depends on the tool that you're using.

00:16:49.709 --> 00:16:51.550
<v Speaker 2>I'm trying to remember what it is that

00:16:51.550 --> 00:16:52.830
<v Speaker 2>we tested with.

00:16:53.550 --> 00:16:57.470
<v Speaker 2>There there are popular MySQL inspection

00:16:58.110 --> 00:16:59.550
<v Speaker 2>tools with

00:16:59.709 --> 00:17:00.510
<v Speaker 2>GUIs

00:17:00.510 --> 00:17:03.775
<v Speaker 2>that we have been able to get working

00:17:03.775 --> 00:17:04.815
<v Speaker 2>with Vitess.

00:17:05.535 --> 00:17:06.174
<v Speaker 0>Yeah.

00:17:06.494 --> 00:17:09.055
<v Speaker 0>So I'm assuming that the Vitess proxy just

00:17:09.055 --> 00:17:11.455
<v Speaker 0>speaks the protocol and it kind of intercepts,

00:17:11.455 --> 00:17:13.535
<v Speaker 0>tries to understand the query. I mean, does

00:17:13.535 --> 00:17:15.030
<v Speaker 0>it even do a query plan into point

00:17:15.030 --> 00:17:16.869
<v Speaker 0>if I do a select across multiple shards

00:17:16.869 --> 00:17:18.630
<v Speaker 0>so that it knows to direct them to

00:17:18.630 --> 00:17:20.869
<v Speaker 0>the appropriate ones? Is that something that's part

00:17:20.869 --> 00:17:21.190
<v Speaker 0>of the

00:17:22.230 --> 00:17:24.950
<v Speaker 2>Right. So that's all part of the proxy.

00:17:24.950 --> 00:17:27.750
<v Speaker 2>It does speak to MySQL protocol and parses

00:17:27.750 --> 00:17:31.405
<v Speaker 2>the query and uses the past query to

00:17:31.405 --> 00:17:33.245
<v Speaker 2>figure out how to route it.

00:17:33.965 --> 00:17:37.565
<v Speaker 2>And for certain complex queries, you actually have

00:17:37.565 --> 00:17:39.405
<v Speaker 2>to do a scatter gather, send it to

00:17:39.405 --> 00:17:40.125
<v Speaker 2>multiple

00:17:40.365 --> 00:17:41.325
<v Speaker 2>shards

00:17:41.405 --> 00:17:44.570
<v Speaker 2>and process the results. For instance, if you're,

00:17:44.810 --> 00:17:47.770
<v Speaker 2>doing some aggregate function in the query that

00:17:48.090 --> 00:17:51.050
<v Speaker 2>or an order by, then that might require

00:17:51.050 --> 00:17:53.850
<v Speaker 2>additional processing in memory in the proxy layer

00:17:53.850 --> 00:17:55.930
<v Speaker 2>to send back the proper results to the

00:17:55.930 --> 00:17:56.170
<v Speaker 2>client.

00:17:56.895 --> 00:17:58.895
<v Speaker 0>Okay. That's that's

00:17:58.895 --> 00:18:01.055
<v Speaker 0>that's pretty cool. Like, I'm a so even

00:18:01.055 --> 00:18:03.535
<v Speaker 0>if I'm only running against one MySQL, I'm

00:18:03.535 --> 00:18:06.335
<v Speaker 0>still seeing value in using something like Vitess

00:18:06.335 --> 00:18:08.655
<v Speaker 0>even early on in my project. Like, just

00:18:08.655 --> 00:18:10.975
<v Speaker 0>bringing it in, having it there, working quite

00:18:10.975 --> 00:18:12.490
<v Speaker 0>happily, I still get all of that extra

00:18:12.490 --> 00:18:14.570
<v Speaker 0>functionality even if I don't particularly need to

00:18:14.570 --> 00:18:17.289
<v Speaker 0>drop into the sharding stuff quite yet. Okay.

00:18:19.289 --> 00:18:20.649
<v Speaker 0>Then I think we should just play with

00:18:20.649 --> 00:18:22.809
<v Speaker 0>it and then see how easy it is

00:18:22.809 --> 00:18:25.450
<v Speaker 0>to get working. So let's jump over to

00:18:26.965 --> 00:18:30.725
<v Speaker 0>my screen share. I have here the Vitess

00:18:30.725 --> 00:18:31.765
<v Speaker 0>documentation,

00:18:31.765 --> 00:18:34.485
<v Speaker 0>which we'll use as our kind of guides

00:18:34.485 --> 00:18:35.205
<v Speaker 0>today.

00:18:35.525 --> 00:18:38.005
<v Speaker 0>I have Docker for Mac running

00:18:38.245 --> 00:18:40.279
<v Speaker 0>with nothing, I hope.

00:18:40.520 --> 00:18:41.159
<v Speaker 0>Yeah.

00:18:41.400 --> 00:18:43.880
<v Speaker 0>Nothing running at the moment. So

00:18:45.240 --> 00:18:47.080
<v Speaker 0>I see that there's a Kubernetes quick start.

00:18:47.080 --> 00:18:48.360
<v Speaker 0>There's the local install.

00:18:48.600 --> 00:18:50.519
<v Speaker 0>Is that fair to say that there's nothing

00:18:50.600 --> 00:18:51.160
<v Speaker 0>that

00:18:51.575 --> 00:18:53.495
<v Speaker 0>binds me to Kubernetes to use the test?

00:18:53.495 --> 00:18:55.175
<v Speaker 0>I could use that in more traditional bare

00:18:55.175 --> 00:18:57.815
<v Speaker 0>metal like environments just the same without Kubernetes,

00:18:57.815 --> 00:18:59.095
<v Speaker 0>or is Kubernetes

00:18:59.735 --> 00:19:01.735
<v Speaker 0>is some of the functionality limited to the

00:19:01.735 --> 00:19:03.255
<v Speaker 0>Kubernetes

00:19:03.460 --> 00:19:04.340
<v Speaker 0>runtime?

00:19:05.140 --> 00:19:07.059
<v Speaker 2>Kubernetes is not required.

00:19:07.460 --> 00:19:10.260
<v Speaker 2>There are large installs that are running outside

00:19:10.260 --> 00:19:11.380
<v Speaker 2>of Kubernetes

00:19:11.540 --> 00:19:14.580
<v Speaker 2>and large installs that are running within Kubernetes.

00:19:14.660 --> 00:19:14.900
<v Speaker 0>Mhmm.

00:19:15.865 --> 00:19:17.304
<v Speaker 2>What you

00:19:17.625 --> 00:19:19.784
<v Speaker 2>do get with Kubernetes is

00:19:22.105 --> 00:19:22.904
<v Speaker 2>sort of

00:19:23.225 --> 00:19:26.184
<v Speaker 2>being able to use Kubernetes primitives to manage

00:19:26.184 --> 00:19:29.159
<v Speaker 2>your cluster versus writing your own tooling. Everyone

00:19:29.159 --> 00:19:29.719
<v Speaker 2>who

00:19:29.960 --> 00:19:31.960
<v Speaker 2>is doing it on their own kind of

00:19:31.960 --> 00:19:35.240
<v Speaker 2>had to write some tooling to schedule backups

00:19:35.240 --> 00:19:36.519
<v Speaker 2>and things like that.

00:19:36.840 --> 00:19:38.839
<v Speaker 2>Whereas in Kubernetes, you can

00:19:39.960 --> 00:19:41.399
<v Speaker 2>do that much more easily,

00:19:42.044 --> 00:19:45.325
<v Speaker 2>especially because there is, an operator for Vitess,

00:19:45.325 --> 00:19:47.004
<v Speaker 2>which is also open source.

00:19:48.125 --> 00:19:50.924
<v Speaker 1>Wow. So my take on on the Kubernetes,

00:19:51.164 --> 00:19:53.325
<v Speaker 1>thank you, for for that insight.

00:19:53.820 --> 00:19:56.700
<v Speaker 1>My take on on the Kubernetes, Kubernetes is

00:19:56.700 --> 00:19:58.779
<v Speaker 1>cloud native. So when you do that in

00:19:58.779 --> 00:20:00.779
<v Speaker 1>Kubernetes, you're already in the cloud,

00:20:00.940 --> 00:20:03.740
<v Speaker 1>which comes with also a lot of tools

00:20:03.740 --> 00:20:06.059
<v Speaker 1>and utilities, including load balancer,

00:20:06.299 --> 00:20:09.005
<v Speaker 1>storage, your, you know, your uploads, your, you

00:20:09.005 --> 00:20:11.565
<v Speaker 1>know, your gateway, your security, your keys,

00:20:11.805 --> 00:20:14.525
<v Speaker 1>all of that is you're already in like,

00:20:14.525 --> 00:20:17.645
<v Speaker 1>let's say you're using Google and GKE and

00:20:17.645 --> 00:20:19.725
<v Speaker 1>and launch a cluster

00:20:19.805 --> 00:20:20.525
<v Speaker 1>in

00:20:20.685 --> 00:20:21.885
<v Speaker 1>Kubernetes,

00:20:22.125 --> 00:20:25.380
<v Speaker 1>you already get everything at your, you know,

00:20:25.380 --> 00:20:26.340
<v Speaker 1>customization.

00:20:26.340 --> 00:20:28.259
<v Speaker 1>You can actually set things up

00:20:28.900 --> 00:20:31.860
<v Speaker 1>and and utilize those. If you're on local,

00:20:31.860 --> 00:20:33.700
<v Speaker 1>then you need to figure out, okay. What's

00:20:33.700 --> 00:20:35.539
<v Speaker 1>my storage? How do I, you know, get

00:20:35.539 --> 00:20:36.739
<v Speaker 1>a load balancer?

00:20:37.059 --> 00:20:39.425
<v Speaker 1>Where where do I run, you know, another

00:20:39.425 --> 00:20:41.825
<v Speaker 1>node? Let's say, you need to run an

00:20:41.825 --> 00:20:43.985
<v Speaker 1>application. Are you gonna run it on Kubernetes,

00:20:43.985 --> 00:20:45.424
<v Speaker 1>or are you gonna actually,

00:20:46.945 --> 00:20:49.345
<v Speaker 1>launch a, you know, virtual machine?

00:20:49.905 --> 00:20:52.049
<v Speaker 1>But you still need a cloud. In that

00:20:52.049 --> 00:20:54.529
<v Speaker 1>case, if you're in the in the Kubernetes,

00:20:54.529 --> 00:20:56.130
<v Speaker 1>you get all that. The other thing is,

00:20:56.130 --> 00:20:58.209
<v Speaker 1>like like, Diti said, the

00:20:58.690 --> 00:21:00.929
<v Speaker 1>operator if you have an operator,

00:21:01.649 --> 00:21:02.450
<v Speaker 1>which means

00:21:03.490 --> 00:21:05.250
<v Speaker 1>many things are are are

00:21:06.615 --> 00:21:07.495
<v Speaker 1>automated.

00:21:07.895 --> 00:21:08.455
<v Speaker 1>So

00:21:08.855 --> 00:21:11.255
<v Speaker 1>within the operator, there's a logic that runs.

00:21:11.255 --> 00:21:13.015
<v Speaker 1>Okay. If this node dies,

00:21:13.415 --> 00:21:14.855
<v Speaker 1>bring another node,

00:21:15.255 --> 00:21:17.335
<v Speaker 1>attach it to your your source or or

00:21:17.335 --> 00:21:18.135
<v Speaker 1>primary,

00:21:18.535 --> 00:21:19.575
<v Speaker 1>and then connect

00:21:19.735 --> 00:21:20.615
<v Speaker 1>and then

00:21:21.150 --> 00:21:23.950
<v Speaker 1>continue as nothing happens because the nodes can

00:21:23.950 --> 00:21:26.510
<v Speaker 1>die in Kubernetes. Right? That's normal. But in

00:21:26.510 --> 00:21:29.070
<v Speaker 1>in your local, if a node dies, then

00:21:29.070 --> 00:21:30.750
<v Speaker 1>you need to figure out, okay. What what

00:21:30.750 --> 00:21:32.990
<v Speaker 1>happened to that? Right? And then there is

00:21:32.990 --> 00:21:35.070
<v Speaker 1>not much of an automation in as in

00:21:35.070 --> 00:21:36.350
<v Speaker 1>that in that sense.

00:21:36.590 --> 00:21:38.825
<v Speaker 1>So that's that's the those are the difference.

00:21:38.825 --> 00:21:40.664
<v Speaker 1>And the pros and cons of the learning

00:21:40.664 --> 00:21:43.145
<v Speaker 1>curve versus the old school and how you

00:21:43.145 --> 00:21:44.984
<v Speaker 1>how you did things in the past. Right?

00:21:46.424 --> 00:21:48.105
<v Speaker 0>Excellent. Thank you. Yeah. You're right.

00:21:49.150 --> 00:21:51.230
<v Speaker 0>I'm a big fan of operators in general.

00:21:51.230 --> 00:21:52.669
<v Speaker 0>I think they are taking,

00:21:52.910 --> 00:21:55.390
<v Speaker 0>you know, all that experience from people like

00:21:55.390 --> 00:21:57.150
<v Speaker 0>yourselves that are running these things or have

00:21:57.150 --> 00:21:59.309
<v Speaker 0>done in the past and trying to encapsulate

00:21:59.309 --> 00:22:00.990
<v Speaker 0>that into a binary that I run on

00:22:00.990 --> 00:22:02.825
<v Speaker 0>my Kubernetes cluster to make my life easier.

00:22:02.825 --> 00:22:04.185
<v Speaker 0>I am all for that. I will take

00:22:04.185 --> 00:22:06.424
<v Speaker 0>all the operators that exist out there.

00:22:07.625 --> 00:22:09.304
<v Speaker 0>Glad to hear this is Vitess one.

00:22:09.785 --> 00:22:11.545
<v Speaker 0>So I guess we're just gonna click on

00:22:11.545 --> 00:22:14.265
<v Speaker 0>the Kubernetes quick start for today and get

00:22:14.265 --> 00:22:16.745
<v Speaker 0>this deployed to my local cluster.

00:22:17.960 --> 00:22:19.000
<v Speaker 0>Yeah.

00:22:19.000 --> 00:22:20.360
<v Speaker 0>I can probably are we gone do you

00:22:20.360 --> 00:22:21.560
<v Speaker 0>want to go with the operator or are

00:22:21.560 --> 00:22:23.640
<v Speaker 0>we just gonna go with the the manifest?

00:22:23.640 --> 00:22:25.000
<v Speaker 0>Is there a preference there?

00:22:27.560 --> 00:22:28.760
<v Speaker 1>We

00:22:28.840 --> 00:22:32.294
<v Speaker 1>we should do the the operator. Yes. Mhmm.

00:22:32.935 --> 00:22:36.615
<v Speaker 0>Okay. So I'll just clone down this directory.

00:22:40.055 --> 00:22:42.135
<v Speaker 0>So this is actually the main the test

00:22:42.135 --> 00:22:43.815
<v Speaker 0>directory. Is this just the mono repo then?

00:22:46.430 --> 00:22:47.310
<v Speaker 2>This

00:22:47.310 --> 00:22:49.870
<v Speaker 2>is the the Vitess mono repo. And

00:22:50.510 --> 00:22:53.150
<v Speaker 2>within this, we have an example on how

00:22:53.150 --> 00:22:55.070
<v Speaker 2>to run it with the operator. The operator

00:22:55.070 --> 00:22:57.550
<v Speaker 2>lives in its own repo. Alright. Okay. Gotcha.

00:23:00.175 --> 00:23:02.415
<v Speaker 0>And I noticed there that also oh, what

00:23:02.415 --> 00:23:03.455
<v Speaker 0>did I get wrong?

00:23:04.495 --> 00:23:06.255
<v Speaker 0>Oh, I'm not in the right directory.

00:23:10.335 --> 00:23:11.455
<v Speaker 0>Example.

00:23:12.175 --> 00:23:14.495
<v Speaker 0>Alright. Okay. It's always my problem when things

00:23:14.495 --> 00:23:16.690
<v Speaker 0>go wrong. It's always me failing to type

00:23:16.690 --> 00:23:17.649
<v Speaker 0>basic things.

00:23:17.970 --> 00:23:19.730
<v Speaker 0>Yeah. I noticed here that this is the

00:23:19.730 --> 00:23:21.890
<v Speaker 0>Helm chart is deprecated. Is that in favor

00:23:21.890 --> 00:23:24.850
<v Speaker 0>of another chart or just something that, you

00:23:24.850 --> 00:23:25.330
<v Speaker 0>know,

00:23:25.809 --> 00:23:27.809
<v Speaker 0>the Vitess community has decided that Helm isn't

00:23:27.809 --> 00:23:28.770
<v Speaker 0>the right way to work with it?

00:23:29.825 --> 00:23:32.865
<v Speaker 2>The helm chart predates the operator, and it

00:23:32.865 --> 00:23:36.225
<v Speaker 2>was useful before an operator was available. Once

00:23:36.625 --> 00:23:39.585
<v Speaker 2>PlanetScale started working on this operator that they

00:23:39.585 --> 00:23:41.105
<v Speaker 2>intended to open source,

00:23:41.905 --> 00:23:42.785
<v Speaker 2>the community

00:23:43.510 --> 00:23:45.910
<v Speaker 2>decided that they didn't want to support the

00:23:45.910 --> 00:23:47.350
<v Speaker 2>Helm chart anymore.

00:23:48.470 --> 00:23:49.030
<v Speaker 2>So,

00:23:49.270 --> 00:23:51.350
<v Speaker 2>at that point, we deprecated it.

00:23:51.750 --> 00:23:54.390
<v Speaker 2>Yeah. I think Helm is great for for

00:23:54.390 --> 00:23:57.030
<v Speaker 2>starting things up, but operators are much better

00:23:57.030 --> 00:23:58.150
<v Speaker 2>for ongoing

00:23:58.585 --> 00:23:59.465
<v Speaker 2>management

00:23:59.465 --> 00:24:01.065
<v Speaker 2>of Kubernetes clusters.

00:24:01.625 --> 00:24:02.985
<v Speaker 0>Yeah. I I think if you don't have

00:24:02.985 --> 00:24:04.665
<v Speaker 0>to maintain a health chart, that's a fantastic

00:24:04.665 --> 00:24:07.225
<v Speaker 0>thing. I maintain some popular charts, and they've

00:24:07.225 --> 00:24:09.065
<v Speaker 0>actually become a burden now.

00:24:09.305 --> 00:24:10.105
<v Speaker 0>Trying to,

00:24:10.425 --> 00:24:12.505
<v Speaker 0>like, satisfy every use case in the world

00:24:12.505 --> 00:24:14.429
<v Speaker 0>from every user of that help chart is

00:24:14.429 --> 00:24:15.950
<v Speaker 0>no easy feat.

00:24:17.309 --> 00:24:19.470
<v Speaker 0>Okay. So I am going to deploy

00:24:20.909 --> 00:24:23.309
<v Speaker 0>what was it called? Operator.YAML?

00:24:23.309 --> 00:24:24.030
<v Speaker 0>Yep. There we go.

00:24:26.505 --> 00:24:28.745
<v Speaker 2>So the operator is on Docker Hub, so

00:24:28.745 --> 00:24:30.105
<v Speaker 2>it's it's

00:24:30.105 --> 00:24:32.105
<v Speaker 2>getting downloaded from Docker.

00:24:33.225 --> 00:24:35.545
<v Speaker 2>Yeah. I noticed you didn't need to install

00:24:35.545 --> 00:24:37.065
<v Speaker 2>any operator source.

00:24:38.665 --> 00:24:40.425
<v Speaker 0>Yeah. And it looks like it's just installed

00:24:40.425 --> 00:24:43.230
<v Speaker 0>some custom resource definitions. We've got some service

00:24:43.230 --> 00:24:45.470
<v Speaker 0>accounts and probably roll bindings.

00:24:46.590 --> 00:24:48.190
<v Speaker 0>Oh, I do see actually

00:24:48.190 --> 00:24:51.150
<v Speaker 0>a priority class for scheduling. That's that's interesting.

00:24:51.150 --> 00:24:52.590
<v Speaker 0>I don't often see that when I install

00:24:52.590 --> 00:24:53.390
<v Speaker 0>operators.

00:24:54.110 --> 00:24:55.470
<v Speaker 0>Is that just to ensure that if a

00:24:55.470 --> 00:24:57.070
<v Speaker 0>test operator isn't infected?

00:24:58.485 --> 00:25:00.725
<v Speaker 0>I guess I guess it becomes quite an

00:25:00.725 --> 00:25:03.045
<v Speaker 0>important part of my, you know, if I'm

00:25:03.045 --> 00:25:05.045
<v Speaker 0>running the stateful workloads on Kubernetes, like I

00:25:05.045 --> 00:25:06.485
<v Speaker 0>probably don't want to have a test operator

00:25:06.485 --> 00:25:08.645
<v Speaker 0>to disappear. I think Oh, got it. I

00:25:08.645 --> 00:25:09.924
<v Speaker 0>understand why that's there. Okay.

00:25:11.445 --> 00:25:13.900
<v Speaker 0>Let's move on. So we wanna bring up

00:25:13.900 --> 00:25:15.740
<v Speaker 0>our initial cluster. I'm just gonna pop this

00:25:15.740 --> 00:25:17.420
<v Speaker 0>one open and we'll take a look at

00:25:17.420 --> 00:25:18.940
<v Speaker 0>what's actually going on here.

00:25:26.220 --> 00:25:29.580
<v Speaker 0>Okay. So we are

00:25:28.945 --> 00:25:29.825
<v Speaker 0>requesting

00:25:31.505 --> 00:25:33.025
<v Speaker 0>a Vitess cluster

00:25:33.665 --> 00:25:36.785
<v Speaker 0>and then we have the ability to overwrite

00:25:37.745 --> 00:25:39.184
<v Speaker 0>any of the images.

00:25:39.985 --> 00:25:42.225
<v Speaker 0>Is that something that a regular end user

00:25:42.225 --> 00:25:44.145
<v Speaker 0>would have to do or is that really

00:25:44.145 --> 00:25:46.520
<v Speaker 0>just there as a convenient function for the

00:25:46.520 --> 00:25:48.039
<v Speaker 0>developers of the project?

00:25:49.960 --> 00:25:50.679
<v Speaker 2>So

00:25:50.760 --> 00:25:53.160
<v Speaker 2>what we do with these versions is that

00:25:53.160 --> 00:25:55.720
<v Speaker 2>on release branches, when we do a Vitess

00:25:55.720 --> 00:25:57.960
<v Speaker 2>release, we do a compatible

00:25:58.360 --> 00:25:59.159
<v Speaker 2>example.

00:25:59.240 --> 00:26:00.680
<v Speaker 2>So that tag will

00:26:00.975 --> 00:26:03.855
<v Speaker 2>be a release tag versus being latest.

00:26:05.295 --> 00:26:09.054
<v Speaker 2>And if people are, choosing a specific Vitess

00:26:09.054 --> 00:26:11.135
<v Speaker 2>release to go live with, then they will

00:26:11.135 --> 00:26:13.215
<v Speaker 2>pin these versions to those releases.

00:26:14.050 --> 00:26:15.169
<v Speaker 0>Yeah. Okay.

00:26:15.730 --> 00:26:17.970
<v Speaker 0>And I see some vocabulary that I'm not

00:26:17.970 --> 00:26:20.050
<v Speaker 0>familiar with in this context. So could we

00:26:20.050 --> 00:26:22.450
<v Speaker 0>maybe break down what a a cell is

00:26:22.450 --> 00:26:23.090
<v Speaker 0>here?

00:26:23.890 --> 00:26:24.610
<v Speaker 2>Right.

00:26:25.010 --> 00:26:26.530
<v Speaker 2>So in Vitess terminology,

00:26:26.825 --> 00:26:29.465
<v Speaker 2>cell is any failure domain. So it can

00:26:29.465 --> 00:26:31.625
<v Speaker 2>be a group of servers, a data center,

00:26:31.625 --> 00:26:33.705
<v Speaker 2>an availability zone, a region.

00:26:33.945 --> 00:26:36.665
<v Speaker 2>Typically, it's an availability zone when you're deploying

00:26:36.665 --> 00:26:38.745
<v Speaker 2>in the cloud. So here, we are basically

00:26:38.745 --> 00:26:39.384
<v Speaker 2>saying

00:26:40.184 --> 00:26:41.945
<v Speaker 2>we've got one cell, and we call it

00:26:41.945 --> 00:26:42.905
<v Speaker 2>zone one because

00:26:43.490 --> 00:26:45.249
<v Speaker 2>it represents an a z.

00:26:45.730 --> 00:26:47.089
<v Speaker 0>Right. Okay. Gotcha.

00:26:48.929 --> 00:26:50.610
<v Speaker 0>And then we have how many replicas we

00:26:50.610 --> 00:26:52.529
<v Speaker 0>want. We have some rules resource constraints and

00:26:52.529 --> 00:26:55.009
<v Speaker 0>then the authentication model. So should I apply

00:26:55.009 --> 00:26:56.529
<v Speaker 0>this now before we go through it? Will

00:26:56.529 --> 00:26:57.809
<v Speaker 0>this take a little bit of time to

00:26:57.809 --> 00:26:59.405
<v Speaker 0>get up and running, running or is it

00:26:59.405 --> 00:27:00.365
<v Speaker 0>pretty quick?

00:27:02.365 --> 00:27:04.684
<v Speaker 2>It should be pretty quick. Are you on

00:27:04.684 --> 00:27:07.325
<v Speaker 1>me, Cube right now? It's just talker for

00:27:07.325 --> 00:27:07.965
<v Speaker 0>Mac.

00:27:08.365 --> 00:27:10.045
<v Speaker 1>Okay. Yeah. It's it's pretty

00:27:11.090 --> 00:27:12.930
<v Speaker 1>yeah. It should it should go fast. We'll

00:27:12.930 --> 00:27:13.970
<v Speaker 0>let it go. I'm sure.

00:27:14.530 --> 00:27:15.330
<v Speaker 0>Okay.

00:27:15.970 --> 00:27:18.210
<v Speaker 0>So then we have something called a Vitess

00:27:18.210 --> 00:27:19.010
<v Speaker 0>dashboard,

00:27:19.010 --> 00:27:20.610
<v Speaker 0>which seems to reference the cells that we

00:27:20.610 --> 00:27:21.570
<v Speaker 0>specified.

00:27:22.050 --> 00:27:24.585
<v Speaker 0>We've got some extra flags, replicas. So do

00:27:24.585 --> 00:27:26.985
<v Speaker 0>we when we use the Vitess operator to

00:27:26.985 --> 00:27:27.865
<v Speaker 0>deploy our

00:27:28.745 --> 00:27:31.065
<v Speaker 0>MySQL clusters with the proxies and stuff also

00:27:31.065 --> 00:27:33.145
<v Speaker 0>get, like, a UI that we can navigate

00:27:33.145 --> 00:27:34.105
<v Speaker 0>and explore?

00:27:35.545 --> 00:27:38.520
<v Speaker 2>Yes. This UI gives you a view of

00:27:38.520 --> 00:27:41.640
<v Speaker 2>the Vitess cluster. It it will you can

00:27:41.640 --> 00:27:44.280
<v Speaker 2>also see the schema, but you don't actually

00:27:44.280 --> 00:27:46.440
<v Speaker 2>have the ability to navigate down to, like,

00:27:46.440 --> 00:27:49.160
<v Speaker 2>a table level with this UI. And it's

00:27:49.160 --> 00:27:52.385
<v Speaker 2>very primitive, very old, and we have a

00:27:52.385 --> 00:27:55.184
<v Speaker 2>couple of volunteers who are replacing that,

00:27:56.225 --> 00:27:58.625
<v Speaker 2>and hopefully, that'll be available in the near

00:27:58.625 --> 00:27:59.264
<v Speaker 2>future.

00:27:59.585 --> 00:28:00.864
<v Speaker 0>Alright. Okay.

00:28:01.505 --> 00:28:04.065
<v Speaker 0>Alright. Now we have something Coming soon. VT

00:28:04.065 --> 00:28:04.465
<v Speaker 1>admin.

00:28:07.299 --> 00:28:08.820
<v Speaker 0>Something called a keys

00:28:09.380 --> 00:28:10.419
<v Speaker 0>keyspace.

00:28:12.419 --> 00:28:14.500
<v Speaker 0>That seems to tie into the slides that

00:28:14.500 --> 00:28:16.340
<v Speaker 0>you kinda presented at the start there, Alkin.

00:28:16.340 --> 00:28:17.780
<v Speaker 0>Do you wanna just quickly run us through

00:28:17.780 --> 00:28:20.495
<v Speaker 0>what we're defining here? The key space is

00:28:20.495 --> 00:28:24.494
<v Speaker 1>is the database, basically. So we have launching

00:28:24.655 --> 00:28:25.134
<v Speaker 1>commerce

00:28:26.815 --> 00:28:27.855
<v Speaker 1>database

00:28:27.855 --> 00:28:29.855
<v Speaker 1>with, you know, initial

00:28:30.575 --> 00:28:33.855
<v Speaker 1>DB dot SQL that it runs the tables.

00:28:33.855 --> 00:28:37.020
<v Speaker 1>So it's gonna create three three tables in

00:28:37.020 --> 00:28:37.900
<v Speaker 1>this example,

00:28:38.620 --> 00:28:41.340
<v Speaker 1>and it's gonna build a database within that

00:28:41.340 --> 00:28:44.299
<v Speaker 1>zone one cluster. And then it will build

00:28:44.620 --> 00:28:46.380
<v Speaker 1>one primary to,

00:28:46.700 --> 00:28:48.540
<v Speaker 1>I believe, two replicas around it.

00:28:49.405 --> 00:28:52.125
<v Speaker 1>Or it's one yeah. It's two replicas. Yes.

00:28:53.805 --> 00:28:55.404
<v Speaker 0>Okay. How much

00:28:55.965 --> 00:28:56.605
<v Speaker 0>you know,

00:28:57.165 --> 00:28:58.765
<v Speaker 0>if I'm coming at this with a a

00:28:58.765 --> 00:29:01.165
<v Speaker 0>new project, like, completely greenfield, I haven't got

00:29:01.165 --> 00:29:03.565
<v Speaker 0>anything yet. I I wanna go with MariaDB,

00:29:03.950 --> 00:29:05.710
<v Speaker 0>and I think, well, I'll start off early.

00:29:05.710 --> 00:29:08.350
<v Speaker 0>I'm gonna bring in Vitess to help prepare

00:29:08.350 --> 00:29:10.910
<v Speaker 0>for that eventual skill. Like how set in

00:29:10.910 --> 00:29:14.830
<v Speaker 0>stone is this configuration of shards and partitions?

00:29:14.830 --> 00:29:16.845
<v Speaker 0>Like is this something that's that I can

00:29:16.845 --> 00:29:19.005
<v Speaker 0>tweak as I grow as a company, or

00:29:19.005 --> 00:29:20.285
<v Speaker 0>do I really have to have an idea

00:29:20.285 --> 00:29:22.284
<v Speaker 0>early on of how to set this up?

00:29:26.125 --> 00:29:29.005
<v Speaker 1>Did you wanna answer that? Or Yeah. Sure.

00:29:29.165 --> 00:29:31.325
<v Speaker 2>So it's not set in stone at all.

00:29:31.890 --> 00:29:33.730
<v Speaker 2>You can start with uncharted,

00:29:33.730 --> 00:29:34.929
<v Speaker 2>and then you can

00:29:35.890 --> 00:29:37.810
<v Speaker 2>update your configuration

00:29:37.810 --> 00:29:39.730
<v Speaker 2>and roll out the changes.

00:29:39.890 --> 00:29:43.330
<v Speaker 2>And the operator can provision the new

00:29:44.535 --> 00:29:45.895
<v Speaker 2>pods for you.

00:29:47.015 --> 00:29:47.655
<v Speaker 2>And

00:29:48.375 --> 00:29:50.775
<v Speaker 2>there are commands that you can issue to

00:29:50.775 --> 00:29:52.775
<v Speaker 2>copy over the data from

00:29:52.935 --> 00:29:54.935
<v Speaker 2>let's say you started uncharted. You have one

00:29:54.935 --> 00:29:56.935
<v Speaker 2>shard and you decide my data has grown

00:29:56.935 --> 00:29:59.030
<v Speaker 2>large enough. I have a couple of terabytes.

00:29:59.030 --> 00:30:00.870
<v Speaker 2>I wanna break it up into two shards.

00:30:00.950 --> 00:30:01.910
<v Speaker 2>Yep. Then,

00:30:02.470 --> 00:30:05.429
<v Speaker 2>all the commands are available for you to

00:30:05.430 --> 00:30:07.990
<v Speaker 2>initiate a copy from the unsharded

00:30:09.670 --> 00:30:12.150
<v Speaker 2>space to the sharded space. And

00:30:13.045 --> 00:30:15.205
<v Speaker 2>once the copy is complete,

00:30:15.205 --> 00:30:17.605
<v Speaker 2>to be able to cut over to switch

00:30:17.605 --> 00:30:19.285
<v Speaker 2>over the traffic from the old to the

00:30:19.285 --> 00:30:19.845
<v Speaker 2>new.

00:30:21.045 --> 00:30:23.685
<v Speaker 2>And that's a core part of Vitess. That's,

00:30:24.900 --> 00:30:27.059
<v Speaker 2>most of the large Vitess installs

00:30:27.220 --> 00:30:29.060
<v Speaker 2>would not be able to work without that

00:30:29.060 --> 00:30:29.780
<v Speaker 2>ability.

00:30:30.500 --> 00:30:32.020
<v Speaker 0>So I

00:30:32.260 --> 00:30:34.340
<v Speaker 0>just wanna make sure I understood this correctly.

00:30:34.340 --> 00:30:36.180
<v Speaker 0>So I've got my application. I'm running an

00:30:36.180 --> 00:30:38.580
<v Speaker 0>uncharted. The data is it's getting too big.

00:30:38.580 --> 00:30:40.555
<v Speaker 0>It's too crazy. I know I wanna

00:30:41.275 --> 00:30:43.515
<v Speaker 0>horizontally scale less than some fashion.

00:30:44.715 --> 00:30:47.435
<v Speaker 0>Does my system go offline during this migration?

00:30:47.435 --> 00:30:50.075
<v Speaker 0>Can I no longer accept rates or does

00:30:50.075 --> 00:30:51.195
<v Speaker 0>it do everything

00:30:51.275 --> 00:30:51.995
<v Speaker 0>like

00:30:52.630 --> 00:30:55.270
<v Speaker 0>actively while that's happening in the background? What

00:30:55.270 --> 00:30:56.870
<v Speaker 0>what what's the burden on me as an

00:30:56.870 --> 00:30:58.149
<v Speaker 0>operator at that point?

00:30:59.430 --> 00:31:02.150
<v Speaker 2>All of the actual data migration happens in

00:31:02.150 --> 00:31:02.950
<v Speaker 2>the background.

00:31:03.430 --> 00:31:06.365
<v Speaker 2>And even the v t gate endpoint that

00:31:06.365 --> 00:31:09.244
<v Speaker 2>your application is connecting to won't change.

00:31:09.565 --> 00:31:11.804
<v Speaker 2>But when you initiate the cutover, we'll have

00:31:11.804 --> 00:31:13.644
<v Speaker 2>to stop accepting rights

00:31:13.725 --> 00:31:16.044
<v Speaker 2>for a few seconds Mhmm. So that we

00:31:16.044 --> 00:31:17.885
<v Speaker 2>can cut over to the to the new

00:31:17.885 --> 00:31:18.684
<v Speaker 2>primary

00:31:19.165 --> 00:31:22.100
<v Speaker 2>and then start accepting rights again. So there

00:31:22.100 --> 00:31:24.659
<v Speaker 2>may be a few seconds when any rights

00:31:24.659 --> 00:31:26.820
<v Speaker 2>sent by the application to the Vitess cluster

00:31:26.820 --> 00:31:27.779
<v Speaker 2>may block

00:31:28.179 --> 00:31:30.499
<v Speaker 2>and then start getting through again.

00:31:31.220 --> 00:31:33.779
<v Speaker 0>Okay. You know what? So in this example

00:31:33.779 --> 00:31:35.620
<v Speaker 1>that you're actually running,

00:31:36.475 --> 00:31:38.874
<v Speaker 1>initial cluster example, is something

00:31:39.434 --> 00:31:41.755
<v Speaker 1>similar that it mimics. So there's there's a

00:31:41.755 --> 00:31:43.995
<v Speaker 1>story behind this. Right? So there is there

00:31:43.995 --> 00:31:45.755
<v Speaker 1>is a the story is you have an

00:31:45.755 --> 00:31:46.634
<v Speaker 1>ecommerce

00:31:47.914 --> 00:31:50.875
<v Speaker 1>application that decide started growing. So you already

00:31:50.875 --> 00:31:51.434
<v Speaker 1>have

00:31:51.919 --> 00:31:54.720
<v Speaker 1>accepting reads and writes to that cluster.

00:31:55.200 --> 00:31:57.120
<v Speaker 1>Okay? So this is what you're building. Once

00:31:57.120 --> 00:31:59.360
<v Speaker 1>you build this, you have the the old

00:31:59.360 --> 00:32:00.799
<v Speaker 1>version. And then we what we do is

00:32:00.799 --> 00:32:04.320
<v Speaker 1>we we keep adding on and then migrate

00:32:04.515 --> 00:32:05.554
<v Speaker 1>that data

00:32:05.795 --> 00:32:06.595
<v Speaker 1>within

00:32:06.755 --> 00:32:07.875
<v Speaker 1>the Vitess

00:32:08.275 --> 00:32:08.995
<v Speaker 1>realm.

00:32:09.315 --> 00:32:10.115
<v Speaker 1>But if

00:32:10.595 --> 00:32:14.515
<v Speaker 1>you had already had a MySQL that's running

00:32:14.835 --> 00:32:16.915
<v Speaker 1>and then you decided to go with TestFace,

00:32:16.915 --> 00:32:19.330
<v Speaker 1>so first, you need to come to Vitess

00:32:19.330 --> 00:32:20.130
<v Speaker 1>uncharted

00:32:20.130 --> 00:32:22.610
<v Speaker 1>way within the Vitess. So you come from

00:32:22.610 --> 00:32:23.330
<v Speaker 1>outside

00:32:23.730 --> 00:32:25.970
<v Speaker 1>and migrate into that. And there's there's a

00:32:25.970 --> 00:32:28.050
<v Speaker 1>way to do that. Also, migrate that, like,

00:32:28.050 --> 00:32:30.130
<v Speaker 1>with a replication. You set up a replication,

00:32:30.130 --> 00:32:31.895
<v Speaker 1>and you cut over, and then you fail

00:32:31.895 --> 00:32:33.895
<v Speaker 1>over to that Vitess after that. So that

00:32:34.054 --> 00:32:36.215
<v Speaker 1>once you're in Vitess, then you do one

00:32:36.215 --> 00:32:39.575
<v Speaker 1>more migration to the uncharted to a charted.

00:32:39.655 --> 00:32:41.014
<v Speaker 1>That's the story.

00:32:41.735 --> 00:32:44.455
<v Speaker 0>Okay. I mean, I So in fact Sorry,

00:32:44.390 --> 00:32:45.270
<v Speaker 0>Andrew. Go ahead.

00:32:45.750 --> 00:32:48.230
<v Speaker 2>In fact, in this very example, we'll go

00:32:48.230 --> 00:32:49.830
<v Speaker 2>through that resharding process.

00:32:50.070 --> 00:32:51.910
<v Speaker 0>Oh, nice. Okay. So we'll be able to

00:32:51.910 --> 00:32:52.630
<v Speaker 2>see that.

00:32:53.030 --> 00:32:54.470
<v Speaker 0>Well, I mean, if it's only a few

00:32:54.470 --> 00:32:56.870
<v Speaker 0>seconds, I'm a very happy person. So let

00:32:56.870 --> 00:32:58.070
<v Speaker 0>let me just like,

00:32:58.390 --> 00:32:59.910
<v Speaker 0>I think all the things we're talking about

00:33:00.445 --> 00:33:02.125
<v Speaker 0>just they sound

00:33:02.285 --> 00:33:04.205
<v Speaker 0>like great. I can't imagine ever being a

00:33:04.205 --> 00:33:06.685
<v Speaker 0>situation where I've got MySQL and MariaDB backing

00:33:06.685 --> 00:33:08.285
<v Speaker 0>my application where I would say I don't

00:33:08.285 --> 00:33:09.805
<v Speaker 0>want this. Is it fair to say that

00:33:09.805 --> 00:33:12.285
<v Speaker 0>anybody who's MySQL and MariaDB should just use

00:33:12.285 --> 00:33:14.220
<v Speaker 0>Vitess by default? Is that the mission?

00:33:15.580 --> 00:33:16.860
<v Speaker 2>That is the mission.

00:33:17.820 --> 00:33:19.980
<v Speaker 2>Alright. That that is the ultimate goal.

00:33:20.460 --> 00:33:21.820
<v Speaker 0>There we go. Perfect.

00:33:22.140 --> 00:33:23.980
<v Speaker 0>Alright. So that was just some secret stuff.

00:33:23.980 --> 00:33:25.260
<v Speaker 0>We could see we're doing a little bit

00:33:25.260 --> 00:33:26.700
<v Speaker 0>of import

00:33:26.235 --> 00:33:28.235
<v Speaker 0>of data. So in theory,

00:33:28.475 --> 00:33:29.995
<v Speaker 0>we've given that a little bit of time

00:33:29.995 --> 00:33:30.634
<v Speaker 0>now.

00:33:31.035 --> 00:33:33.595
<v Speaker 0>I can run, get the test cluster.

00:33:34.635 --> 00:33:36.715
<v Speaker 0>We have our example cluster. I always like

00:33:36.715 --> 00:33:38.875
<v Speaker 0>to run a describe and see what I

00:33:38.875 --> 00:33:40.795
<v Speaker 0>get back to. So let's do that.

00:33:42.610 --> 00:33:43.649
<v Speaker 0>And

00:33:44.690 --> 00:33:46.049
<v Speaker 0>I'm not sure if those are old or

00:33:46.049 --> 00:33:47.090
<v Speaker 0>new messages,

00:33:47.169 --> 00:33:51.169
<v Speaker 0>but we got some potentially error stuff there.

00:33:51.890 --> 00:33:53.250
<v Speaker 0>And let's see if we have any pods.

00:33:54.445 --> 00:33:56.605
<v Speaker 0>Okay. Yeah. So those were just, I guess

00:33:56.605 --> 00:33:59.165
<v Speaker 0>as it spends up a new Vitess cluster,

00:33:59.165 --> 00:34:00.765
<v Speaker 0>it's likely that a few things are gonna

00:34:00.765 --> 00:34:02.285
<v Speaker 0>fail until it becomes healthy.

00:34:03.005 --> 00:34:03.725
<v Speaker 2>Right.

00:34:04.525 --> 00:34:06.685
<v Speaker 0>But we do have

00:34:08.710 --> 00:34:10.470
<v Speaker 0>we have an ETCD.

00:34:10.550 --> 00:34:12.310
<v Speaker 0>We have the V tablets.

00:34:12.630 --> 00:34:13.670
<v Speaker 0>We have a

00:34:13.989 --> 00:34:17.030
<v Speaker 0>test control D and then the VT gate.

00:34:17.510 --> 00:34:18.070
<v Speaker 0>So

00:34:18.310 --> 00:34:19.350
<v Speaker 0>this is

00:34:19.830 --> 00:34:21.670
<v Speaker 0>my new cluster. Right? These are all the

00:34:21.670 --> 00:34:23.270
<v Speaker 0>components. We kind of got a rough idea

00:34:23.270 --> 00:34:24.685
<v Speaker 0>of what those all now.

00:34:25.165 --> 00:34:27.724
<v Speaker 0>Mhmm. That was quite easy. That was it.

00:34:27.724 --> 00:34:30.844
<v Speaker 0>Yep. So it's it's CD itself is redundant

00:34:30.844 --> 00:34:33.244
<v Speaker 1>over there. You can see. And the tablets

00:34:33.244 --> 00:34:34.205
<v Speaker 1>are are

00:34:34.684 --> 00:34:37.085
<v Speaker 1>also redundant, and you have the other components.

00:34:38.360 --> 00:34:41.160
<v Speaker 1>Those are those are stateless, so they're

00:34:41.480 --> 00:34:42.200
<v Speaker 1>basically

00:34:42.600 --> 00:34:43.320
<v Speaker 1>single,

00:34:43.719 --> 00:34:46.760
<v Speaker 1>and the operator is its own driver.

00:34:48.920 --> 00:34:50.760
<v Speaker 0>Why does Vitess use HCT?

00:34:54.655 --> 00:34:56.895
<v Speaker 2>HCD is not the only option. You can

00:34:56.895 --> 00:34:58.175
<v Speaker 2>also use Zookeeper,

00:34:58.175 --> 00:35:00.335
<v Speaker 2>but I'm guessing your question is more of

00:35:00.335 --> 00:35:03.055
<v Speaker 2>why do you even need a distributed data

00:35:03.055 --> 00:35:04.015
<v Speaker 2>store. Right?

00:35:04.415 --> 00:35:06.880
<v Speaker 0>Yeah. Why don't MySQL and MariaDB? Like

00:35:07.440 --> 00:35:08.160
<v Speaker 2>So

00:35:09.040 --> 00:35:12.160
<v Speaker 2>we we would like to, get to using,

00:35:13.119 --> 00:35:16.800
<v Speaker 2>Vitess cluster itself as the data store for,

00:35:17.840 --> 00:35:18.960
<v Speaker 2>the discovery.

00:35:18.960 --> 00:35:19.280
<v Speaker 0>Yeah.

00:35:21.395 --> 00:35:23.475
<v Speaker 2>Okay. It historically,

00:35:24.115 --> 00:35:26.755
<v Speaker 2>when Vitess was being built at YouTube,

00:35:26.755 --> 00:35:29.395
<v Speaker 2>they already had a, quote, unquote, log server

00:35:29.395 --> 00:35:30.835
<v Speaker 2>available from Google.

00:35:31.155 --> 00:35:33.555
<v Speaker 2>So it was easy for them to say,

00:35:33.830 --> 00:35:35.670
<v Speaker 2>we don't have to worry about building this

00:35:35.670 --> 00:35:38.230
<v Speaker 2>part ourselves. We'll just use what is available.

00:35:38.950 --> 00:35:41.430
<v Speaker 2>But it does definitely make sense to

00:35:42.390 --> 00:35:44.310
<v Speaker 2>store the same data in a MySQL or

00:35:44.310 --> 00:35:44.790
<v Speaker 2>MariaDB.

00:35:45.984 --> 00:35:47.425
<v Speaker 0>Yeah. I think that would be quite a

00:35:47.425 --> 00:35:49.425
<v Speaker 0>cool story, you know, bootstrapping for test with

00:35:49.425 --> 00:35:50.785
<v Speaker 0>Vitess. Like, wait. Like

00:35:51.345 --> 00:35:54.065
<v Speaker 0>anyway My answer would be my answer would

00:35:54.065 --> 00:35:54.545
<v Speaker 1>be

00:35:55.025 --> 00:35:55.905
<v Speaker 1>nontechnical.

00:35:55.905 --> 00:35:57.345
<v Speaker 1>So it's it's more

00:35:58.560 --> 00:36:00.480
<v Speaker 1>the community adopted

00:36:00.880 --> 00:36:03.200
<v Speaker 1>and best practice kind of thing. People know

00:36:03.200 --> 00:36:05.200
<v Speaker 1>about it. It works, and it it has

00:36:05.200 --> 00:36:07.120
<v Speaker 1>no, like, hiccups.

00:36:07.520 --> 00:36:08.560
<v Speaker 1>And I

00:36:09.360 --> 00:36:11.840
<v Speaker 1>think this is what drives people to, okay,

00:36:11.840 --> 00:36:12.640
<v Speaker 1>NCD,

00:36:12.640 --> 00:36:14.885
<v Speaker 1>fine. It works, and let's keep it. You

00:36:14.885 --> 00:36:15.765
<v Speaker 1>know? Like, this

00:36:16.245 --> 00:36:18.645
<v Speaker 1>this is more like a nontechnical

00:36:18.645 --> 00:36:20.805
<v Speaker 1>in the sense. But there's like, the Helm

00:36:20.805 --> 00:36:23.445
<v Speaker 1>charts and and maybe console,

00:36:23.445 --> 00:36:25.845
<v Speaker 1>there are some technical difficulties

00:36:26.160 --> 00:36:28.799
<v Speaker 1>the community adopters had, so they actually didn't

00:36:28.799 --> 00:36:30.160
<v Speaker 1>actually pursue

00:36:31.359 --> 00:36:32.400
<v Speaker 1>using them.

00:36:34.480 --> 00:36:35.200
<v Speaker 0>Okay.

00:36:36.240 --> 00:36:36.640
<v Speaker 0>Well,

00:36:38.664 --> 00:36:41.305
<v Speaker 0>yeah, that's this is all really useful.

00:36:41.865 --> 00:36:42.665
<v Speaker 0>I guess

00:36:44.105 --> 00:36:46.184
<v Speaker 0>I was about to deviate from the documentation.

00:36:46.184 --> 00:36:47.785
<v Speaker 0>I'm trying to get better at not doing

00:36:47.785 --> 00:36:48.345
<v Speaker 0>that.

00:36:48.585 --> 00:36:49.065
<v Speaker 0>So

00:36:50.744 --> 00:36:52.390
<v Speaker 0>let's let's stick with it. I was just

00:36:52.390 --> 00:36:54.550
<v Speaker 0>gonna deploy WordPress to go, let's connect the

00:36:54.550 --> 00:36:56.870
<v Speaker 0>dots, but I'll I'll behave myself. So

00:36:57.270 --> 00:36:59.670
<v Speaker 0>we can get pods which we've done. We've

00:36:59.670 --> 00:37:02.230
<v Speaker 0>verified everything is running, everything is happy. The

00:37:02.230 --> 00:37:04.470
<v Speaker 0>documentation even shows here that, you know, you

00:37:04.470 --> 00:37:05.990
<v Speaker 0>will see a couple of restarts. I think

00:37:05.990 --> 00:37:06.630
<v Speaker 0>that's really good.

00:37:08.365 --> 00:37:10.685
<v Speaker 0>And then what can we do? So

00:37:12.045 --> 00:37:14.765
<v Speaker 0>there's a client I can use. Is that

00:37:14.765 --> 00:37:16.285
<v Speaker 0>what this is telling me now?

00:37:19.005 --> 00:37:21.140
<v Speaker 1>Yeah. In that in that step is one

00:37:21.140 --> 00:37:23.860
<v Speaker 1>of the things, is to setting up port

00:37:23.860 --> 00:37:26.740
<v Speaker 1>forward. So since you're in the operator and

00:37:26.740 --> 00:37:28.900
<v Speaker 1>the Kubernetes, you need to port forward,

00:37:30.260 --> 00:37:32.660
<v Speaker 1>how you wanna access the the Vitess

00:37:32.900 --> 00:37:33.460
<v Speaker 1>client

00:37:33.855 --> 00:37:35.055
<v Speaker 1>and the MySQL,

00:37:35.615 --> 00:37:38.975
<v Speaker 1>which which actually is behind the VT gate.

00:37:38.975 --> 00:37:40.495
<v Speaker 1>Right? So you

00:37:40.895 --> 00:37:42.975
<v Speaker 1>would set up a port forward with that

00:37:42.975 --> 00:37:43.695
<v Speaker 1>script

00:37:44.895 --> 00:37:47.455
<v Speaker 1>and set aliases for the

00:37:48.130 --> 00:37:49.010
<v Speaker 1>VTCTL

00:37:49.010 --> 00:37:51.810
<v Speaker 1>client and the MySQL on your on your

00:37:52.530 --> 00:37:53.410
<v Speaker 1>shell.

00:37:53.570 --> 00:37:55.010
<v Speaker 0>Yeah. So it it wants me to do

00:37:55.010 --> 00:37:56.450
<v Speaker 0>that because it wants to create this kind

00:37:56.450 --> 00:37:57.730
<v Speaker 0>of schema. So

00:38:00.050 --> 00:38:01.890
<v Speaker 0>how about we deviate then and we deploy?

00:38:01.890 --> 00:38:03.890
<v Speaker 0>Like, we don't actually need to deploy the

00:38:03.465 --> 00:38:05.545
<v Speaker 0>do we? We could we just deploy WordPress

00:38:05.545 --> 00:38:06.985
<v Speaker 0>and point it to it and walk through

00:38:06.985 --> 00:38:09.545
<v Speaker 0>that, or is there something unique about the

00:38:09.545 --> 00:38:11.305
<v Speaker 0>schema stuff that we should go over?

00:38:11.865 --> 00:38:13.785
<v Speaker 2>We don't need to deploy the schema, but

00:38:13.785 --> 00:38:15.385
<v Speaker 2>we do need to do the port forward

00:38:15.385 --> 00:38:16.745
<v Speaker 2>because that

00:38:18.020 --> 00:38:20.820
<v Speaker 2>host port is what you will then give

00:38:20.820 --> 00:38:21.780
<v Speaker 2>to WordPress.

00:38:22.740 --> 00:38:25.140
<v Speaker 2>Unless you're deploying WordPress in cluster, in which

00:38:25.140 --> 00:38:26.339
<v Speaker 2>case, you don't need to do the port

00:38:26.339 --> 00:38:28.900
<v Speaker 2>forward. Yes. I will deploy it in cluster.

00:38:29.220 --> 00:38:29.940
<v Speaker 2>Okay.

00:38:30.099 --> 00:38:32.435
<v Speaker 2>Yeah. Then then you can just connect to

00:38:32.435 --> 00:38:33.235
<v Speaker 2>Vitigate

00:38:33.235 --> 00:38:35.555
<v Speaker 2>with the partner. I'm assuming we have a

00:38:35.555 --> 00:38:36.195
<v Speaker 0>service

00:38:36.435 --> 00:38:38.595
<v Speaker 0>address. Right? Yeah. We do. So

00:38:38.995 --> 00:38:41.795
<v Speaker 0>would I connect WordPress to the v tablet

00:38:42.115 --> 00:38:43.970
<v Speaker 0>or the v gate? I'm sorry. To to

00:38:43.970 --> 00:38:46.369
<v Speaker 2>the to the v gate. V gate. V

00:38:48.930 --> 00:38:49.730
<v Speaker 0>Okay.

00:38:49.890 --> 00:38:52.050
<v Speaker 0>So I do have a

00:38:53.490 --> 00:38:55.650
<v Speaker 0>well, I did have something in my buffer.

00:38:55.650 --> 00:38:56.815
<v Speaker 0>Let me grab that again.

00:38:58.495 --> 00:39:00.255
<v Speaker 0>On the official Kubernetes

00:39:01.295 --> 00:39:04.175
<v Speaker 0>examples, reposits where they do ship a WordPress

00:39:04.175 --> 00:39:06.015
<v Speaker 0>deployment. So let's just

00:39:06.655 --> 00:39:10.270
<v Speaker 0>download that. I need a workload folder,

00:39:12.270 --> 00:39:13.630
<v Speaker 0>and we should be able to see this

00:39:13.630 --> 00:39:14.270
<v Speaker 0>here.

00:39:17.070 --> 00:39:17.790
<v Speaker 0>Let's try again.

00:39:22.255 --> 00:39:24.735
<v Speaker 0>That's better. So we have our workload folder

00:39:24.735 --> 00:39:26.895
<v Speaker 0>here and we have a WordPress

00:39:26.895 --> 00:39:28.095
<v Speaker 0>YAML fail.

00:39:28.895 --> 00:39:31.375
<v Speaker 0>I don't think I need to

00:39:32.175 --> 00:39:34.175
<v Speaker 0>Oh yeah, we'll need to set the host

00:39:34.175 --> 00:39:35.615
<v Speaker 0>and stuff like that. So

00:39:36.410 --> 00:39:39.290
<v Speaker 0>if we're going with the Kubernetes service address,

00:39:39.290 --> 00:39:40.410
<v Speaker 0>then we want

00:39:43.930 --> 00:39:45.130
<v Speaker 0>That's interesting

00:39:45.370 --> 00:39:47.370
<v Speaker 0>with the service. So I can see that

00:39:47.370 --> 00:39:49.930
<v Speaker 0>we're actually getting like a generate name happening

00:39:49.930 --> 00:39:50.250
<v Speaker 0>here.

00:39:54.545 --> 00:39:57.185
<v Speaker 0>Why is it not just example VT gate?

00:39:57.185 --> 00:39:59.105
<v Speaker 0>Is it I guess, I'm potentially gonna have

00:39:59.105 --> 00:40:00.785
<v Speaker 0>more than one VT gate at some point?

00:40:01.665 --> 00:40:02.625
<v Speaker 2>Okay. Yeah.

00:40:04.480 --> 00:40:06.480
<v Speaker 2>So one thing I'm not sure about here,

00:40:06.480 --> 00:40:08.160
<v Speaker 2>and maybe I'll can notice, is there's an

00:40:08.160 --> 00:40:10.160
<v Speaker 2>example, we t gate, and there's an example

00:40:10.160 --> 00:40:12.560
<v Speaker 2>zone one, t gate. There are two of

00:40:12.560 --> 00:40:13.040
<v Speaker 2>them.

00:40:14.080 --> 00:40:16.320
<v Speaker 2>I'll can does it matter which one we

00:40:16.320 --> 00:40:16.640
<v Speaker 2>use?

00:40:17.744 --> 00:40:19.664
<v Speaker 2>Let's just try one and see how it

00:40:19.664 --> 00:40:21.585
<v Speaker 2>goes. Yeah. I I don't think it matters.

00:40:21.585 --> 00:40:22.704
<v Speaker 1>Yeah. You can just use

00:40:24.625 --> 00:40:25.265
<v Speaker 0>Okay.

00:40:25.585 --> 00:40:28.145
<v Speaker 0>Okay. So I'm gonna drop this in.

00:40:28.224 --> 00:40:31.265
<v Speaker 0>That's gonna be the default effect. We we

00:40:31.265 --> 00:40:32.704
<v Speaker 0>work with that one too. Okay.

00:40:33.880 --> 00:40:35.880
<v Speaker 0>And we can figure it off through

00:40:36.360 --> 00:40:37.720
<v Speaker 0>the secret,

00:40:37.800 --> 00:40:40.200
<v Speaker 0>which was an error initial cluster.

00:40:41.160 --> 00:40:43.320
<v Speaker 0>Can I just grab the username and password

00:40:43.400 --> 00:40:46.040
<v Speaker 0>from Yeah? Okay. So it's just user with

00:40:46.040 --> 00:40:47.160
<v Speaker 0>no password. Is that right?

00:40:49.055 --> 00:40:50.255
<v Speaker 0>Is that what that means?

00:40:50.894 --> 00:40:53.454
<v Speaker 2>Yeah. That's what that means. I'm just wondering

00:40:53.454 --> 00:40:55.214
<v Speaker 0>if it if an empty string is, like,

00:40:55.214 --> 00:40:57.375
<v Speaker 0>the operator are gonna in some way randomly

00:40:57.375 --> 00:40:59.214
<v Speaker 0>generate a password for me, but we'll try.

00:40:59.214 --> 00:40:59.615
<v Speaker 2>No. No.

00:41:01.690 --> 00:41:03.530
<v Speaker 0>Oh, no. That's actually the one to see.

00:41:03.610 --> 00:41:04.410
<v Speaker 0>Oh, no.

00:41:06.490 --> 00:41:08.730
<v Speaker 0>I know better than you, Kubernetes. There we

00:41:08.730 --> 00:41:10.890
<v Speaker 0>go. Password blank.

00:41:11.450 --> 00:41:12.090
<v Speaker 0>And

00:41:13.690 --> 00:41:14.890
<v Speaker 0>we'll just set

00:41:15.530 --> 00:41:16.155
<v Speaker 0>this to

00:41:19.915 --> 00:41:21.195
<v Speaker 0>now we have to play the game as

00:41:21.195 --> 00:41:23.995
<v Speaker 0>a DB user or DB username, so we'll

00:41:23.995 --> 00:41:25.595
<v Speaker 0>find out. And

00:41:26.555 --> 00:41:27.995
<v Speaker 0>then the rest of that should just work

00:41:27.995 --> 00:41:29.755
<v Speaker 0>as is. I don't think there's anything.

00:41:30.869 --> 00:41:32.470
<v Speaker 0>Yeah. Let's see.

00:41:33.109 --> 00:41:35.349
<v Speaker 0>So in theory, I can now do a

00:41:35.349 --> 00:41:37.349
<v Speaker 0>deploy of WordPress.

00:41:40.309 --> 00:41:42.390
<v Speaker 0>We'll see if that comes up happy.

00:41:49.244 --> 00:41:51.325
<v Speaker 0>Hopefully it builds that image pretty quick.

00:41:59.300 --> 00:42:01.220
<v Speaker 0>This is normally where I would say control

00:42:01.220 --> 00:42:03.140
<v Speaker 0>C and describe it and then it would

00:42:03.140 --> 00:42:04.820
<v Speaker 0>say it's healthy and I was just being

00:42:04.820 --> 00:42:05.700
<v Speaker 0>impatient,

00:42:05.700 --> 00:42:06.340
<v Speaker 0>but

00:42:06.740 --> 00:42:08.099
<v Speaker 0>now I'm gonna describe it.

00:42:12.785 --> 00:42:14.865
<v Speaker 0>One part has unbounded media. Okay.

00:42:19.105 --> 00:42:20.945
<v Speaker 0>Why

00:42:25.585 --> 00:42:27.730
<v Speaker 0>does that need persistent storage? Storage?

00:42:32.610 --> 00:42:34.050
<v Speaker 0>And why does it not work?

00:42:36.930 --> 00:42:37.810
<v Speaker 0>Storage classes.

00:42:42.015 --> 00:42:43.695
<v Speaker 0>Okay. We've only got a host pass from

00:42:43.695 --> 00:42:44.815
<v Speaker 0>Docker for Mac.

00:42:45.055 --> 00:42:46.415
<v Speaker 0>Today, I learned.

00:42:47.135 --> 00:42:48.415
<v Speaker 0>So

00:42:48.415 --> 00:42:49.455
<v Speaker 0>let's do

00:42:52.974 --> 00:42:53.935
<v Speaker 0>host pass.

00:42:56.680 --> 00:42:57.960
<v Speaker 0>I'm not even sure if I can just

00:42:57.960 --> 00:42:59.720
<v Speaker 0>make this up, we're gonna find out. If

00:42:59.720 --> 00:43:02.040
<v Speaker 0>that doesn't work, I'll remove the PVC and

00:43:02.040 --> 00:43:03.640
<v Speaker 0>we'll just stick it with ephemeral. I don't

00:43:03.640 --> 00:43:05.080
<v Speaker 0>really think it's gonna matter for what we're

00:43:05.080 --> 00:43:05.880
<v Speaker 0>doing today.

00:43:06.520 --> 00:43:07.880
<v Speaker 0>So we'll see what happens.

00:43:08.955 --> 00:43:10.715
<v Speaker 0>There, it's happy. Okay.

00:43:11.755 --> 00:43:14.475
<v Speaker 0>So I should now be able to port

00:43:14.475 --> 00:43:15.275
<v Speaker 0>forward

00:43:15.275 --> 00:43:16.555
<v Speaker 0>to WordPress.

00:43:18.875 --> 00:43:20.715
<v Speaker 0>And it should have enough information that the

00:43:20.715 --> 00:43:23.915
<v Speaker 0>wizard we're gonna get probably gonna fill itself

00:43:23.915 --> 00:43:24.235
<v Speaker 0>in.

00:43:24.900 --> 00:43:26.260
<v Speaker 0>I'm saying hopefully.

00:43:32.099 --> 00:43:33.460
<v Speaker 2>Connection refused.

00:43:34.740 --> 00:43:36.100
<v Speaker 0>I spoke to soon.

00:43:37.619 --> 00:43:39.540
<v Speaker 0>Okay. So it's failing to write

00:43:39.780 --> 00:43:42.994
<v Speaker 0>the database now. And our VT gate. So

00:43:42.994 --> 00:43:45.315
<v Speaker 0>it looks like it did reach our VT

00:43:45.315 --> 00:43:46.755
<v Speaker 0>gate, but the VT gate is saying that

00:43:46.755 --> 00:43:48.435
<v Speaker 0>creating a database is not allowed.

00:43:49.394 --> 00:43:50.435
<v Speaker 2>Right.

00:43:51.154 --> 00:43:53.474
<v Speaker 1>So what port are you connecting to VT

00:43:53.474 --> 00:43:53.714
<v Speaker 1>gate?

00:43:54.570 --> 00:43:56.890
<v Speaker 2>No. No. No. That's not the issue. So

00:43:57.850 --> 00:44:00.570
<v Speaker 2>I did not realize that WordPress does issues

00:44:00.570 --> 00:44:03.370
<v Speaker 2>a create database. In Vitess, a database is

00:44:03.370 --> 00:44:05.450
<v Speaker 2>a key space, which is backed by all

00:44:05.450 --> 00:44:06.570
<v Speaker 2>of the infrastructure.

00:44:06.570 --> 00:44:08.490
<v Speaker 2>So if you do create database, then

00:44:09.105 --> 00:44:09.825
<v Speaker 2>what

00:44:09.985 --> 00:44:12.465
<v Speaker 2>you are expecting is that you bring up

00:44:12.465 --> 00:44:14.065
<v Speaker 2>all of these processes.

00:44:15.025 --> 00:44:17.265
<v Speaker 2>So I think we have to do the

00:44:17.265 --> 00:44:20.385
<v Speaker 2>create database manually and then connect it up.

00:44:20.465 --> 00:44:22.465
<v Speaker 0>Well, we did actually. Right? We we did

00:44:22.465 --> 00:44:25.380
<v Speaker 0>generate a key space. So if I've understood

00:44:25.380 --> 00:44:26.420
<v Speaker 0>this correctly,

00:44:26.420 --> 00:44:28.180
<v Speaker 0>the database name is commerce?

00:44:29.380 --> 00:44:32.180
<v Speaker 2>Yes. Okay. So we can I am going

00:44:32.180 --> 00:44:34.740
<v Speaker 0>to assume very naively that I can just

00:44:34.740 --> 00:44:36.500
<v Speaker 0>do name WordPress

00:44:37.300 --> 00:44:38.180
<v Speaker 0>DB

00:44:38.180 --> 00:44:39.059
<v Speaker 0>name

00:44:40.395 --> 00:44:41.915
<v Speaker 0>value commerce?

00:44:44.475 --> 00:44:46.715
<v Speaker 0>Assuming I know how to spell commerce.

00:44:49.595 --> 00:44:51.035
<v Speaker 0>Yeah. Good. Okay.

00:44:51.355 --> 00:44:52.395
<v Speaker 0>And we don't need that.

00:44:54.930 --> 00:44:55.570
<v Speaker 0>Yeah.

00:44:55.730 --> 00:44:57.650
<v Speaker 0>Now it's not gonna have any problem.

00:44:57.970 --> 00:45:00.050
<v Speaker 0>Will creating the tables with the schema cause

00:45:00.050 --> 00:45:01.890
<v Speaker 0>any problems or should that just work out?

00:45:01.890 --> 00:45:05.010
<v Speaker 2>No. Create table should work. Okay. So let's

00:45:05.010 --> 00:45:07.090
<v Speaker 0>try reapplying our workload,

00:45:07.490 --> 00:45:09.955
<v Speaker 0>and we should see a restart. Yep.

00:45:10.275 --> 00:45:11.795
<v Speaker 0>We'll just keep an eye on that for

00:45:11.795 --> 00:45:12.435
<v Speaker 0>a moment.

00:45:13.714 --> 00:45:14.994
<v Speaker 0>And if I guess it's past the create

00:45:14.994 --> 00:45:17.315
<v Speaker 0>database, then the port forward should hopefully give

00:45:17.315 --> 00:45:19.635
<v Speaker 0>me that nice kind of wizard screen.

00:45:22.194 --> 00:45:24.609
<v Speaker 0>There's a lot of hopefullys on this stream.

00:45:24.609 --> 00:45:26.770
<v Speaker 2>Well,

00:45:31.170 --> 00:45:32.130
<v Speaker 0>that's better.

00:45:32.770 --> 00:45:33.730
<v Speaker 0>There. Okay.

00:45:38.305 --> 00:45:40.145
<v Speaker 0>So Vitess,

00:45:40.625 --> 00:45:41.585
<v Speaker 0>Rawkode.

00:45:43.345 --> 00:45:44.705
<v Speaker 0>I wonder if it's gonna let me away

00:45:44.705 --> 00:45:46.225
<v Speaker 0>with that. Yeah. There we go.

00:45:47.665 --> 00:45:48.305
<v Speaker 0>And

00:45:48.865 --> 00:45:51.985
<v Speaker 0>my email address. Definitely don't index as Google.

00:45:52.680 --> 00:45:53.400
<v Speaker 0>Okay.

00:45:58.680 --> 00:45:59.320
<v Speaker 0>So

00:45:59.960 --> 00:46:03.240
<v Speaker 0>that seems Nice. So trivial. But

00:46:03.480 --> 00:46:05.480
<v Speaker 0>at the same time, I wanna just emphasize

00:46:05.480 --> 00:46:06.975
<v Speaker 0>something here. Emphasize something here. Like,

00:46:07.454 --> 00:46:10.494
<v Speaker 0>WordPress does not know it's speaking to Vitess.

00:46:11.135 --> 00:46:13.135
<v Speaker 0>It thinks it's just speaking to MariaDB or

00:46:13.135 --> 00:46:14.015
<v Speaker 0>MySQL.

00:46:15.454 --> 00:46:17.295
<v Speaker 0>And I never had to change anything.

00:46:17.375 --> 00:46:19.295
<v Speaker 0>Is is that standard then when I adopt

00:46:19.295 --> 00:46:21.295
<v Speaker 0>Vitess? Like, you know, if my application speaks

00:46:21.120 --> 00:46:22.640
<v Speaker 0>MySQL and MariaDB,

00:46:22.640 --> 00:46:24.240
<v Speaker 0>I should just expect it to work with

00:46:24.240 --> 00:46:26.960
<v Speaker 0>very little changes. Is is that correct?

00:46:27.520 --> 00:46:30.000
<v Speaker 2>It depends on how assortative

00:46:30.400 --> 00:46:32.720
<v Speaker 2>MySQL features are that you are using.

00:46:33.040 --> 00:46:34.240
<v Speaker 2>So certain things,

00:46:34.480 --> 00:46:36.560
<v Speaker 2>like, say, show binary logs will not make

00:46:36.560 --> 00:46:39.085
<v Speaker 2>sense to send to a proxy.

00:46:39.484 --> 00:46:41.405
<v Speaker 2>And some

00:46:42.125 --> 00:46:45.405
<v Speaker 2>complex cross shard queries still don't work.

00:46:45.724 --> 00:46:46.925
<v Speaker 2>Sometimes because

00:46:47.005 --> 00:46:47.805
<v Speaker 2>they are

00:46:48.045 --> 00:46:49.884
<v Speaker 2>harder to plan, and we haven't done it

00:46:49.884 --> 00:46:51.940
<v Speaker 2>yet. And sometimes because they would be so

00:46:51.940 --> 00:46:54.820
<v Speaker 2>inefficient that maybe we should not support them.

00:46:54.820 --> 00:46:55.460
<v Speaker 2>Maybe

00:46:55.620 --> 00:46:58.180
<v Speaker 2>the application should be rewritten in a more

00:46:58.180 --> 00:46:59.220
<v Speaker 2>efficient way.

00:47:00.580 --> 00:47:03.460
<v Speaker 0>Okay. But most things most things should work.

00:47:03.460 --> 00:47:05.940
<v Speaker 2>Anything that doesn't work is

00:47:06.565 --> 00:47:08.085
<v Speaker 2>somewhat obscure.

00:47:08.405 --> 00:47:09.925
<v Speaker 2>And if there is a common thing that

00:47:09.925 --> 00:47:13.125
<v Speaker 2>doesn't work, then we are fixing it.

00:47:13.765 --> 00:47:16.005
<v Speaker 1>Or it's not it's a new feature.

00:47:16.245 --> 00:47:17.445
<v Speaker 1>Like, there's

00:47:17.445 --> 00:47:20.085
<v Speaker 1>there's a like, my c like like I

00:47:20.085 --> 00:47:21.760
<v Speaker 1>mentioned, MySQL

00:47:23.039 --> 00:47:26.319
<v Speaker 1>itself excels in every version, every release. Right?

00:47:26.319 --> 00:47:27.920
<v Speaker 1>So they keep adding

00:47:28.000 --> 00:47:29.920
<v Speaker 1>enhancements and new features.

00:47:30.480 --> 00:47:33.440
<v Speaker 1>And those are not always caught up with

00:47:33.760 --> 00:47:34.480
<v Speaker 1>the framework.

00:47:35.634 --> 00:47:37.474
<v Speaker 2>Yeah. We are definitely not caught up with

00:47:37.474 --> 00:47:40.115
<v Speaker 2>MySQL eight dot o. There are features there

00:47:40.115 --> 00:47:43.075
<v Speaker 2>that we that Vitess doesn't understand right now.

00:47:43.714 --> 00:47:44.994
<v Speaker 0>Yeah. I I

00:47:45.394 --> 00:47:47.555
<v Speaker 0>mean, I'm that's just running my SQL right

00:47:47.555 --> 00:47:49.474
<v Speaker 0>now. It's like, I wanted to run MariaDB,

00:47:49.474 --> 00:47:50.680
<v Speaker 0>would that have just being a flag in

00:47:50.680 --> 00:47:52.920
<v Speaker 0>my my cluster dot YAML.

00:47:56.760 --> 00:47:59.160
<v Speaker 2>Yes. We will need a different build.

00:47:59.880 --> 00:48:01.960
<v Speaker 0>Right. Okay. A different image.

00:48:03.160 --> 00:48:05.664
<v Speaker 0>Yeah. I mean, my personal preference is MariaDB,

00:48:05.664 --> 00:48:07.184
<v Speaker 0>but that's just mine. I try to avoid

00:48:07.184 --> 00:48:09.345
<v Speaker 0>anything that's got Oracle branded and stamped on

00:48:09.345 --> 00:48:11.184
<v Speaker 0>it. But other than that, that's people are

00:48:11.184 --> 00:48:13.505
<v Speaker 0>welcome to use what they want. Okay.

00:48:13.505 --> 00:48:15.184
<v Speaker 0>That is really cool. I'm I'm really happy

00:48:15.184 --> 00:48:16.305
<v Speaker 0>with that. So

00:48:17.184 --> 00:48:19.184
<v Speaker 0>I think we're kind of covered on what's

00:48:19.184 --> 00:48:19.424
<v Speaker 0>this,

00:48:20.090 --> 00:48:22.170
<v Speaker 0>not what's the same, but you know, we've

00:48:22.170 --> 00:48:24.250
<v Speaker 0>hooked up an application that doesn't require any

00:48:24.250 --> 00:48:26.650
<v Speaker 0>changes to work other than that little caveat

00:48:26.650 --> 00:48:27.370
<v Speaker 0>about,

00:48:27.450 --> 00:48:28.730
<v Speaker 0>you know, you have to create your key

00:48:28.730 --> 00:48:31.530
<v Speaker 0>spaces as part of the operator and the

00:48:31.530 --> 00:48:34.255
<v Speaker 0>cluster definition. I think that makes perfect sense.

00:48:36.095 --> 00:48:38.095
<v Speaker 0>Should we dive into the

00:48:38.895 --> 00:48:41.215
<v Speaker 0>What's different under the hood? Can we take

00:48:41.215 --> 00:48:42.655
<v Speaker 0>a look at the tools and the schemas

00:48:42.655 --> 00:48:44.095
<v Speaker 0>and how we interact with this cluster?

00:48:45.630 --> 00:48:47.230
<v Speaker 0>Is there is there documentation for that? And

00:48:47.230 --> 00:48:48.589
<v Speaker 0>I'm just making things up. Is there something

00:48:48.589 --> 00:48:49.869
<v Speaker 0>you wanna point me to here?

00:48:54.270 --> 00:48:55.789
<v Speaker 2>So do you have in mind?

00:48:57.525 --> 00:48:59.525
<v Speaker 1>Like, what would you like to see?

00:49:00.085 --> 00:49:02.404
<v Speaker 0>So yeah. I'm just curious. Like, how do

00:49:02.404 --> 00:49:04.484
<v Speaker 0>I, you know, take a look at you

00:49:04.484 --> 00:49:05.684
<v Speaker 0>said there was a UI. Should we take

00:49:05.684 --> 00:49:06.645
<v Speaker 0>a look at that first?

00:49:07.125 --> 00:49:08.565
<v Speaker 2>Yeah. We can do that. Okay.

00:49:10.724 --> 00:49:12.840
<v Speaker 0>So I gotta run get pods. This is

00:49:12.840 --> 00:49:15.640
<v Speaker 0>where everything is. I mean, I don't see

00:49:15.640 --> 00:49:17.560
<v Speaker 0>something there that says UI. Is that something

00:49:17.560 --> 00:49:19.240
<v Speaker 0>we have to deploy separately, is it just

00:49:19.240 --> 00:49:21.240
<v Speaker 0>a port on one of these other components?

00:49:22.360 --> 00:49:24.520
<v Speaker 2>It's support on that VTCTLD

00:49:24.520 --> 00:49:25.000
<v Speaker 2>component.

00:49:29.455 --> 00:49:30.415
<v Speaker 0>This one, okay.

00:49:30.735 --> 00:49:32.495
<v Speaker 0>So if I describe this,

00:49:33.055 --> 00:49:34.815
<v Speaker 0>Clarence is well described first.

00:49:36.015 --> 00:49:38.175
<v Speaker 0>Let's take a look at the ports.

00:49:42.130 --> 00:49:43.650
<v Speaker 0>So 15,000

00:49:43.650 --> 00:49:45.330
<v Speaker 0>or fifteen nine nine nine?

00:49:46.050 --> 00:49:49.490
<v Speaker 2>Fifteen thousand is the HTTP port. Okay. Fifteen

00:49:49.490 --> 00:49:51.490
<v Speaker 2>nine nine nine is the gRPC port.

00:49:53.934 --> 00:49:56.655
<v Speaker 0>Is all communication in Vitess over gRPC?

00:49:57.295 --> 00:49:58.575
<v Speaker 2>Pretty much. Yeah.

00:49:58.895 --> 00:50:01.295
<v Speaker 2>There are there is a JDBC driver which

00:50:01.295 --> 00:50:02.815
<v Speaker 2>you can use to talk to

00:50:04.575 --> 00:50:07.740
<v Speaker 2>the Vitess cluster. So from outside, we can

00:50:07.740 --> 00:50:09.020
<v Speaker 2>speak gRPC,

00:50:09.020 --> 00:50:11.100
<v Speaker 2>MySQL protocol, and Java.

00:50:11.340 --> 00:50:11.820
<v Speaker 2>But,

00:50:12.380 --> 00:50:15.260
<v Speaker 2>within Vitess, it's all gRPC as of now.

00:50:18.060 --> 00:50:20.220
<v Speaker 0>I did that. One less zero. Yeah.

00:50:24.815 --> 00:50:27.615
<v Speaker 0>Okay. So Let's go to app two. Let's

00:50:27.615 --> 00:50:28.975
<v Speaker 2>go to app two.

00:50:29.935 --> 00:50:32.494
<v Speaker 0>Just like a new and improved slash app.

00:50:38.240 --> 00:50:40.960
<v Speaker 0>Seems to keep redirecting me. Okay. That's fine

00:50:40.960 --> 00:50:41.600
<v Speaker 2>then.

00:50:42.240 --> 00:50:43.599
<v Speaker 2>Yeah. So this is the,

00:50:44.000 --> 00:50:46.160
<v Speaker 2>sort of cluster view.

00:50:46.240 --> 00:50:48.079
<v Speaker 2>You can see that there is a key

00:50:48.079 --> 00:50:50.400
<v Speaker 2>space called commerce, and it has one shard,

00:50:50.640 --> 00:50:52.160
<v Speaker 2>and you can click through to that.

00:50:58.065 --> 00:50:59.425
<v Speaker 2>Click into that.

00:50:59.825 --> 00:51:00.705
<v Speaker 2>There's

00:51:01.505 --> 00:51:04.385
<v Speaker 2>a master which we will shortly rename to

00:51:04.385 --> 00:51:05.265
<v Speaker 2>primary

00:51:05.270 --> 00:51:06.630
<v Speaker 2>and a replica.

00:51:09.670 --> 00:51:10.790
<v Speaker 0>So status

00:51:11.910 --> 00:51:13.670
<v Speaker 0>oh, I can't click it. Looks like it's

00:51:13.670 --> 00:51:14.950
<v Speaker 0>clickable. Yeah.

00:51:15.990 --> 00:51:18.790
<v Speaker 2>That that that link doesn't work within Kubernetes.

00:51:19.755 --> 00:51:20.635
<v Speaker 0>Alright.

00:51:20.635 --> 00:51:21.275
<v Speaker 0>Okay.

00:51:21.755 --> 00:51:23.675
<v Speaker 0>So I can run health checks.

00:51:23.914 --> 00:51:25.835
<v Speaker 0>I can delete the tablet. That sounds scary.

00:51:25.835 --> 00:51:27.355
<v Speaker 0>I hope there's a confirmation on that. And

00:51:27.355 --> 00:51:29.355
<v Speaker 0>I'm kinda There is there is confirmation.

00:51:30.234 --> 00:51:30.955
<v Speaker 2>Okay.

00:51:31.355 --> 00:51:32.075
<v Speaker 0>Alright.

00:51:33.035 --> 00:51:34.395
<v Speaker 0>So if I We can look at

00:51:35.210 --> 00:51:37.369
<v Speaker 0>Sorry. Please go ahead. Sorry. I was gonna

00:51:37.369 --> 00:51:39.369
<v Speaker 2>say we can look at the schema. So

00:51:39.369 --> 00:51:41.369
<v Speaker 2>schema is viewable from this

00:51:45.769 --> 00:51:47.690
<v Speaker 2>Though it says there is no schema.

00:51:48.705 --> 00:51:49.825
<v Speaker 2>That's interesting.

00:51:51.905 --> 00:51:53.265
<v Speaker 0>That is interesting.

00:51:53.905 --> 00:51:55.825
<v Speaker 2>Yeah. I'm pretty sure we have a schema.

00:51:55.825 --> 00:51:58.865
<v Speaker 0>I'm I'm assuming WordPress has deployed something

00:51:58.945 --> 00:52:00.385
<v Speaker 0>into this. Right. Right.

00:52:03.480 --> 00:52:05.320
<v Speaker 0>Is there a command line tool? Probably,

00:52:06.920 --> 00:52:09.240
<v Speaker 2>there is a command line tool that you

00:52:09.240 --> 00:52:11.160
<v Speaker 2>can use to do get schema. But my

00:52:11.160 --> 00:52:12.440
<v Speaker 2>guess is that

00:52:13.160 --> 00:52:16.520
<v Speaker 2>because the schema was applied

00:52:15.975 --> 00:52:17.175
<v Speaker 2>by WordPress,

00:52:18.535 --> 00:52:20.935
<v Speaker 2>it did not make it into the topology

00:52:20.935 --> 00:52:21.735
<v Speaker 2>server.

00:52:22.055 --> 00:52:24.215
<v Speaker 2>Whereas if you use the Vitess command apply

00:52:24.215 --> 00:52:27.335
<v Speaker 2>schema, it stores it in the topology and

00:52:27.335 --> 00:52:29.175
<v Speaker 2>propagates it to the MySQL.

00:52:29.810 --> 00:52:31.890
<v Speaker 0>Okay. That would be my guess.

00:52:33.650 --> 00:52:35.970
<v Speaker 0>So this is our topology manager here.

00:52:36.530 --> 00:52:37.250
<v Speaker 2>Mhmm.

00:52:39.090 --> 00:52:40.770
<v Speaker 0>I'm just gonna keep clicking on stuff.

00:52:41.705 --> 00:52:43.225
<v Speaker 2>Which is what I did the first time

00:52:43.225 --> 00:52:44.185
<v Speaker 2>I saw this.

00:52:48.425 --> 00:52:49.945
<v Speaker 0>Yeah. So we can kinda see some stuff

00:52:49.945 --> 00:52:52.585
<v Speaker 0>about the partitions and the replicas and all

00:52:52.585 --> 00:52:53.945
<v Speaker 0>that. Okay. Right.

00:52:54.105 --> 00:52:56.180
<v Speaker 2>Yeah. So you said there was an app

00:52:56.180 --> 00:52:57.780
<v Speaker 0>v two or at least an app two.

00:52:57.780 --> 00:52:59.460
<v Speaker 0>Is that something that's currently being worked on

00:52:59.460 --> 00:53:01.059
<v Speaker 0>by the team? Is that just an improvement

00:53:01.059 --> 00:53:03.140
<v Speaker 0>on what we see here? Like, what what

00:53:03.140 --> 00:53:04.500
<v Speaker 0>what was the app two?

00:53:05.380 --> 00:53:08.260
<v Speaker 2>Well, app two is this, but there is

00:53:08.260 --> 00:53:09.299
<v Speaker 2>a new

00:53:10.385 --> 00:53:11.905
<v Speaker 2>UI that is being

00:53:12.145 --> 00:53:15.505
<v Speaker 2>worked on, which will probably have its own

00:53:15.665 --> 00:53:16.865
<v Speaker 2>starting page.

00:53:17.665 --> 00:53:18.305
<v Speaker 0>Okay.

00:53:19.744 --> 00:53:21.984
<v Speaker 0>Alright. Let's look at a couple more things

00:53:21.984 --> 00:53:23.665
<v Speaker 0>then, and we'll we'll leave the UI alone

00:53:23.665 --> 00:53:25.150
<v Speaker 0>for now. I think I've clicked everything there

00:53:25.150 --> 00:53:26.350
<v Speaker 0>is there now. So

00:53:26.910 --> 00:53:27.950
<v Speaker 0>I'm curious,

00:53:28.750 --> 00:53:30.030
<v Speaker 0>now that I have

00:53:30.510 --> 00:53:32.350
<v Speaker 0>my Vitess cluster here,

00:53:32.830 --> 00:53:35.310
<v Speaker 0>if I want to change the properties of

00:53:35.310 --> 00:53:35.870
<v Speaker 0>this,

00:53:36.430 --> 00:53:38.430
<v Speaker 0>I'm assuming I just work like with my

00:53:38.430 --> 00:53:40.785
<v Speaker 0>standard Kubernetes tooling and just

00:53:41.345 --> 00:53:42.705
<v Speaker 0>change the spec.

00:53:43.744 --> 00:53:44.305
<v Speaker 2>Right.

00:53:45.265 --> 00:53:45.985
<v Speaker 0>Now

00:53:47.345 --> 00:53:48.785
<v Speaker 0>where was So

00:53:54.590 --> 00:53:56.590
<v Speaker 0>If I just change the replicas to five,

00:53:56.590 --> 00:53:57.390
<v Speaker 0>is that okay?

00:53:58.430 --> 00:53:59.790
<v Speaker 2>Sure. Yeah.

00:54:00.670 --> 00:54:02.830
<v Speaker 0>What else can I break? Let's see.

00:54:04.270 --> 00:54:07.630
<v Speaker 0>So there's two sets of replicas then. We

00:54:07.630 --> 00:54:07.950
<v Speaker 0>have

00:54:08.875 --> 00:54:10.795
<v Speaker 2>Yes. Can you scroll up a little, and

00:54:10.795 --> 00:54:13.595
<v Speaker 2>let's see what that first replicas is? This

00:54:14.155 --> 00:54:15.755
<v Speaker 2>where you are right now, I know what

00:54:15.755 --> 00:54:17.515
<v Speaker 2>it is. It's the MySQL

00:54:17.515 --> 00:54:18.715
<v Speaker 2>level replicas.

00:54:18.715 --> 00:54:21.835
<v Speaker 2>But higher up, that's the number of Vitigates.

00:54:22.500 --> 00:54:24.420
<v Speaker 2>So gateway is Vitigate.

00:54:24.900 --> 00:54:26.100
<v Speaker 2>So replicas

00:54:26.100 --> 00:54:28.340
<v Speaker 2>five will give you five Vitigate pods.

00:54:30.180 --> 00:54:30.820
<v Speaker 0>Okay.

00:54:31.140 --> 00:54:33.060
<v Speaker 0>So that's not replicas of my data. That's

00:54:33.060 --> 00:54:35.220
<v Speaker 0>just like okay. We don't actually need five

00:54:35.220 --> 00:54:36.580
<v Speaker 0>of them then. That's not the interest in

00:54:36.580 --> 00:54:36.820
<v Speaker 0>one.

00:54:37.855 --> 00:54:39.615
<v Speaker 0>So I guess we wanna modify the key

00:54:39.615 --> 00:54:40.495
<v Speaker 0>space here,

00:54:40.895 --> 00:54:42.655
<v Speaker 0>and we'd wanna modify the replicas of the

00:54:42.655 --> 00:54:43.855
<v Speaker 0>key space to be

00:54:44.655 --> 00:54:46.255
<v Speaker 0>does the does the number matter? Do I

00:54:46.255 --> 00:54:47.775
<v Speaker 0>have to have a certain quorum? Does it

00:54:47.775 --> 00:54:49.615
<v Speaker 0>have to be odd or does does it

00:54:49.615 --> 00:54:51.775
<v Speaker 0>not No. It doesn't matter. It doesn't matter.

00:54:53.820 --> 00:54:56.300
<v Speaker 0>What about two, but at least two, but

00:54:56.300 --> 00:54:58.060
<v Speaker 2>beyond that, it doesn't matter.

00:54:59.500 --> 00:55:00.220
<v Speaker 0>Okay.

00:55:00.860 --> 00:55:02.220
<v Speaker 0>So one of the things I'd like to

00:55:02.220 --> 00:55:03.580
<v Speaker 0>do then is why don't we scale this

00:55:03.580 --> 00:55:04.700
<v Speaker 0>up to four?

00:55:05.340 --> 00:55:07.025
<v Speaker 0>Is there a way for us, like, will

00:55:07.025 --> 00:55:08.945
<v Speaker 0>one of them be considered the leader then,

00:55:08.945 --> 00:55:09.905
<v Speaker 0>the primary?

00:55:10.945 --> 00:55:13.105
<v Speaker 2>So there is already a primary.

00:55:13.185 --> 00:55:16.065
<v Speaker 2>The operator should just add two more and

00:55:16.065 --> 00:55:18.545
<v Speaker 2>make them point to the existing primary

00:55:19.105 --> 00:55:21.025
<v Speaker 2>and not switch to a new primary.

00:55:22.000 --> 00:55:24.320
<v Speaker 0>Then can I kill the primary and things

00:55:24.320 --> 00:55:25.040
<v Speaker 0>will just

00:55:25.840 --> 00:55:28.160
<v Speaker 0>handle nicely? Yes. You you yeah. You can

00:55:28.160 --> 00:55:30.080
<v Speaker 2>kill the primary, and one of the others

00:55:30.080 --> 00:55:31.520
<v Speaker 2>should become a primary.

00:55:31.760 --> 00:55:32.320
<v Speaker 2>Let's see.

00:55:35.375 --> 00:55:37.455
<v Speaker 2>Alright. Yeah. Let's just see. Let's see.

00:55:37.855 --> 00:55:39.215
<v Speaker 0>What's the worst that could happen?

00:55:39.855 --> 00:55:41.935
<v Speaker 2>Actually, well, I I know what will happen,

00:55:41.935 --> 00:55:43.535
<v Speaker 2>but we'll see it happen, and then we'll

00:55:43.535 --> 00:55:45.055
<v Speaker 2>talk about it. Okay.

00:55:45.215 --> 00:55:46.655
<v Speaker 0>So we can see that your tab the

00:55:46.655 --> 00:55:49.450
<v Speaker 0>Vitess tablets are now spinning up, they're going

00:55:49.450 --> 00:55:52.570
<v Speaker 0>through the edit container phase, probably already finished.

00:55:53.050 --> 00:55:54.650
<v Speaker 0>Too many clicks.

00:55:55.450 --> 00:55:57.370
<v Speaker 0>Oh, we got one error. I wonder if

00:55:57.370 --> 00:55:58.490
<v Speaker 0>that's just transient.

00:55:58.970 --> 00:56:00.410
<v Speaker 0>Yeah, there we go. Okay.

00:56:00.810 --> 00:56:02.730
<v Speaker 0>Although we did get two restarts on these

00:56:02.730 --> 00:56:04.250
<v Speaker 0>ones. Wonder if that's going up.

00:56:05.015 --> 00:56:06.855
<v Speaker 0>No. Okay. It seems to have stabilized.

00:56:07.015 --> 00:56:09.095
<v Speaker 0>So now we have four replicas.

00:56:10.295 --> 00:56:12.135
<v Speaker 0>How would I work out which one is

00:56:12.135 --> 00:56:13.735
<v Speaker 0>the leader? Would that be come back to

00:56:13.735 --> 00:56:16.055
<v Speaker 0>the UI or is there another way of

00:56:16.055 --> 00:56:18.980
<v Speaker 0>handling that? You can do command line utility

00:56:19.220 --> 00:56:20.980
<v Speaker 1>with the port forward if you had the

00:56:20.980 --> 00:56:21.860
<v Speaker 1>alias.

00:56:24.260 --> 00:56:25.780
<v Speaker 1>You can connect you

00:56:25.780 --> 00:56:27.300
<v Speaker 1>can connect to VT gates and

00:56:27.700 --> 00:56:30.195
<v Speaker 1>say show Vitess tablets and it'll give you

00:56:30.195 --> 00:56:33.075
<v Speaker 1>which ones are what they are doing. Okay.

00:56:33.075 --> 00:56:35.075
<v Speaker 0>Now do I do that with standard MySQL

00:56:35.075 --> 00:56:38.355
<v Speaker 0>CLI? Or Yeah. MySQL CLI and but you

00:56:38.355 --> 00:56:40.435
<v Speaker 1>need to do a port forward and

00:56:43.235 --> 00:56:44.595
<v Speaker 0>I don't think I have it, but we

00:56:44.595 --> 00:56:45.075
<v Speaker 0>can get it.

00:56:45.849 --> 00:56:46.970
<v Speaker 1>It's in the The other

00:56:47.690 --> 00:56:50.170
<v Speaker 2>yeah. The other way to do it is

00:56:51.290 --> 00:56:53.210
<v Speaker 2>to connect to the VTCTLD

00:56:53.210 --> 00:56:53.930
<v Speaker 2>that

00:56:54.570 --> 00:56:56.970
<v Speaker 2>well, we only forwarded the HTTP port. But

00:56:56.970 --> 00:56:59.290
<v Speaker 2>if we forwarded the gRPC port, then we

00:56:59.290 --> 00:57:02.005
<v Speaker 2>would be able to do list all tablets,

00:57:03.125 --> 00:57:04.405
<v Speaker 2>and we'll get a list of all the

00:57:04.405 --> 00:57:05.845
<v Speaker 2>tablets. A couple of options.

00:57:06.165 --> 00:57:07.685
<v Speaker 1>But, you know, for

00:57:08.325 --> 00:57:11.205
<v Speaker 1>if you already are, like, MySQL user

00:57:11.205 --> 00:57:12.085
<v Speaker 1>CLI,

00:57:12.085 --> 00:57:14.650
<v Speaker 1>for me, like, remembering the flags are are

00:57:14.650 --> 00:57:17.850
<v Speaker 1>harder because it's new terms. Right? But

00:57:18.090 --> 00:57:18.730
<v Speaker 1>just

00:57:19.370 --> 00:57:20.250
<v Speaker 1>connect to

00:57:20.810 --> 00:57:23.770
<v Speaker 1>database and say say show databases and stuff

00:57:23.770 --> 00:57:25.530
<v Speaker 1>like that so maybe you can explore a

00:57:25.530 --> 00:57:25.850
<v Speaker 1>little bit.

00:57:26.775 --> 00:57:27.895
<v Speaker 0>Yeah. Of course.

00:57:30.214 --> 00:57:32.535
<v Speaker 0>I'm confused. VT gate. Did we not have

00:57:32.535 --> 00:57:34.055
<v Speaker 0>two VT gates out there?

00:57:34.775 --> 00:57:36.535
<v Speaker 2>No. No. We just had one.

00:57:37.255 --> 00:57:39.015
<v Speaker 2>That was in the service. When we looked

00:57:39.015 --> 00:57:40.934
<v Speaker 2>at the service, there were two services which

00:57:41.095 --> 00:57:42.869
<v Speaker 2>Okay. Yeah. Right.

00:57:43.190 --> 00:57:44.630
<v Speaker 0>Do you know the port number that I

00:57:44.630 --> 00:57:45.590
<v Speaker 0>wanna port forward?

00:57:47.190 --> 00:57:48.230
<v Speaker 1>Yeah. It's

00:57:48.710 --> 00:57:50.069
<v Speaker 1>15306.

00:57:50.069 --> 00:57:52.310
<v Speaker 0>15 3 0 6.

00:57:52.710 --> 00:57:54.869
<v Speaker 0>15 3 0 6. Okay.

00:57:55.270 --> 00:57:57.295
<v Speaker 0>We have our port forward running. We have

00:57:57.295 --> 00:57:58.415
<v Speaker 0>access to my

00:58:00.175 --> 00:58:00.735
<v Speaker 0>I

00:58:01.935 --> 00:58:03.375
<v Speaker 0>just installed you.

00:58:07.135 --> 00:58:09.455
<v Speaker 1>You need to set an alias

00:58:11.510 --> 00:58:13.510
<v Speaker 1>to your Well, let's let's

00:58:15.030 --> 00:58:16.950
<v Speaker 0>Let's go to client. Oh, okay. You need

00:58:16.950 --> 00:58:18.870
<v Speaker 1>a client. Right? I'll just

00:58:19.349 --> 00:58:21.990
<v Speaker 0>export this. I think it just got a

00:58:21.990 --> 00:58:23.109
<v Speaker 0>little confused.

00:58:25.445 --> 00:58:26.885
<v Speaker 0>Yeah. There we go. Okay. So now we

00:58:26.885 --> 00:58:28.005
<v Speaker 0>have a a client.

00:58:29.925 --> 00:58:31.845
<v Speaker 0>Can I just do my SQL

00:58:32.325 --> 00:58:33.525
<v Speaker 0>local host

00:58:33.685 --> 00:58:35.365
<v Speaker 0>dash p? Local host

00:58:36.325 --> 00:58:37.445
<v Speaker 1>15 o three. Yes.

00:58:38.010 --> 00:58:40.090
<v Speaker 1>Minus u user. Yeah.

00:58:44.890 --> 00:58:46.890
<v Speaker 0>Oh, I think it's capital h, isn't it?

00:58:47.850 --> 00:58:48.490
<v Speaker 0>No.

00:58:50.170 --> 00:58:51.530
<v Speaker 2>I think it's capital p.

00:58:52.415 --> 00:58:54.015
<v Speaker 1>Capital p p.

00:58:54.255 --> 00:58:55.855
<v Speaker 0>For the host? P is like looking for

00:58:55.855 --> 00:58:57.615
<v Speaker 1>a password. For the port number.

00:58:57.935 --> 00:59:00.175
<v Speaker 1>Port number. Capital p. Yeah.

00:59:01.135 --> 00:59:02.175
<v Speaker 1>Yeah. That's correct.

00:59:02.655 --> 00:59:04.415
<v Speaker 0>Yeah. It's not trying to use the host.

00:59:04.415 --> 00:59:06.575
<v Speaker 0>I'm wondering if that h is correct. Oh,

00:59:07.210 --> 00:59:10.010
<v Speaker 2>let's try +1 27001

00:59:10.010 --> 00:59:11.690
<v Speaker 2>instead of local host.

00:59:12.970 --> 00:59:13.370
<v Speaker 1>Yeah.

00:59:20.205 --> 00:59:21.485
<v Speaker 0>Oh, that was closer.

00:59:23.165 --> 00:59:24.285
<v Speaker 2>Last connection.

00:59:25.645 --> 00:59:27.005
<v Speaker 0>It might put forward.

00:59:27.165 --> 00:59:28.765
<v Speaker 0>Oh, we got refused

00:59:28.765 --> 00:59:31.325
<v Speaker 0>there. I'm gonna describe that pods just in

00:59:31.325 --> 00:59:31.645
<v Speaker 0>case.

00:59:35.200 --> 00:59:38.240
<v Speaker 0>Scrape pod. And it was the gate. Right?

00:59:38.640 --> 00:59:39.360
<v Speaker 2>Yeah.

00:59:42.080 --> 00:59:43.600
<v Speaker 0>And the ports

00:59:45.680 --> 00:59:47.474
<v Speaker 0>oh, three three zero six then. 3 3

00:59:47.474 --> 00:59:49.394
<v Speaker 2>0 6. Yes. You need to do I

00:59:49.394 --> 00:59:51.315
<v Speaker 1>was looking at that +1 5306

00:59:51.315 --> 00:59:52.675
<v Speaker 1>to 3306.

00:59:53.315 --> 00:59:55.075
<v Speaker 0>So is this you know, you should be

00:59:55.075 --> 00:59:56.994
<v Speaker 0>glad when it's always those little silly errors.

00:59:56.994 --> 00:59:58.434
<v Speaker 0>Those are the ones I don't mind. Yeah.

01:00:01.440 --> 01:00:02.560
<v Speaker 2>Now you want

01:00:02.960 --> 01:00:04.960
<v Speaker 2>now you can take out the port

01:00:04.960 --> 01:00:05.760
<v Speaker 2>specification

01:00:05.760 --> 01:00:06.640
<v Speaker 2>because

01:00:06.640 --> 01:00:08.240
<v Speaker 2>it's the default port.

01:00:08.560 --> 01:00:09.520
<v Speaker 0>I'm in.

01:00:09.920 --> 01:00:11.440
<v Speaker 2>There you go.

01:00:12.079 --> 01:00:14.320
<v Speaker 1>Show Vitess underscore tablets.

01:00:17.175 --> 01:00:18.135
<v Speaker 1>Underscore.

01:00:18.295 --> 01:00:21.255
<v Speaker 1>Okay. Yeah. Alright. So we can see we've

01:00:21.255 --> 01:00:23.415
<v Speaker 0>got our zone one. We have our commerce

01:00:23.415 --> 01:00:24.295
<v Speaker 0>database.

01:00:25.255 --> 01:00:26.855
<v Speaker 0>This is uncharted.

01:00:27.575 --> 01:00:30.135
<v Speaker 0>We've got three replicas and one primary.

01:00:31.290 --> 01:00:32.810
<v Speaker 0>Awesome, very, very cool.

01:00:33.450 --> 01:00:34.810
<v Speaker 0>Now I'm assuming

01:00:35.210 --> 01:00:36.410
<v Speaker 0>these aliases

01:00:36.410 --> 01:00:39.050
<v Speaker 0>maybe match up with those IDs on the

01:00:40.330 --> 01:00:42.890
<v Speaker 2>Let's check. Yeah, I don't like getting this

01:00:42.890 --> 01:00:44.570
<v Speaker 0>many splits, but I'll do

01:00:47.115 --> 01:00:49.435
<v Speaker 0>Yeah. Three three. Yeah. Okay. So these are

01:00:49.435 --> 01:00:51.195
<v Speaker 0>pod names. So those are still a random

01:00:51.195 --> 01:00:54.155
<v Speaker 0>thing on the end, but Right. We want

01:00:54.155 --> 01:00:56.235
<v Speaker 0>to kill two four six.

01:00:57.250 --> 01:00:59.490
<v Speaker 0>So Right. The rep.

01:01:01.330 --> 01:01:02.850
<v Speaker 0>Delete pod.

01:01:03.250 --> 01:01:03.730
<v Speaker 0>So

01:01:07.570 --> 01:01:09.490
<v Speaker 0>what should happen here when I do this?

01:01:09.490 --> 01:01:11.570
<v Speaker 0>There was not gonna an application that's consistently

01:01:11.570 --> 01:01:13.385
<v Speaker 0>hitting it. So I'm doing it. We're probably

01:01:13.385 --> 01:01:15.225
<v Speaker 0>not gonna be able to like visually see

01:01:15.225 --> 01:01:17.145
<v Speaker 0>fail over, but I'm assuming when I delete

01:01:17.145 --> 01:01:18.025
<v Speaker 0>this pod,

01:01:18.425 --> 01:01:21.385
<v Speaker 0>if I run our show tablets again,

01:01:21.465 --> 01:01:23.305
<v Speaker 0>have will we see some sort of status

01:01:23.305 --> 01:01:26.105
<v Speaker 0>or degradation here or will it just immediately

01:01:26.105 --> 01:01:28.060
<v Speaker 0>switch to offline,

01:01:28.060 --> 01:01:30.060
<v Speaker 0>and will something else take over? Like

01:01:31.420 --> 01:01:32.540
<v Speaker 2>Well, we

01:01:33.339 --> 01:01:34.940
<v Speaker 2>will see that that

01:01:36.220 --> 01:01:38.140
<v Speaker 2>so that tablet may not even show up

01:01:38.140 --> 01:01:40.220
<v Speaker 2>and show Vitess tablets depending on when we

01:01:40.220 --> 01:01:42.060
<v Speaker 2>run it, depending on what state it is

01:01:42.060 --> 01:01:43.315
<v Speaker 2>in at that point.

01:01:43.795 --> 01:01:44.355
<v Speaker 2>And

01:01:44.835 --> 01:01:47.075
<v Speaker 2>what the operator does, and this is different

01:01:47.075 --> 01:01:49.955
<v Speaker 2>from how, most people run Vitess in their

01:01:49.955 --> 01:01:51.475
<v Speaker 2>live installs,

01:01:51.955 --> 01:01:52.755
<v Speaker 2>is that

01:01:53.075 --> 01:01:56.435
<v Speaker 2>it's actually so quick to restart the tablet

01:01:56.435 --> 01:02:00.420
<v Speaker 2>and reattach it to its volume and reconnect

01:02:00.420 --> 01:02:02.740
<v Speaker 2>it to the MySQL that it doesn't do

01:02:02.740 --> 01:02:03.700
<v Speaker 2>a failover.

01:02:03.700 --> 01:02:06.100
<v Speaker 2>It just restarts it. So

01:02:07.460 --> 01:02:10.500
<v Speaker 2>so the pod will simply restart. So we'll

01:02:10.500 --> 01:02:12.900
<v Speaker 2>see whether I'm right about that.

01:02:22.175 --> 01:02:24.255
<v Speaker 0>Guess we'll just wait for this to

01:02:24.655 --> 01:02:26.750
<v Speaker 0>to at least finish Cause I guess until

01:02:26.750 --> 01:02:28.830
<v Speaker 0>cube control tells me the pause delete, it's

01:02:28.830 --> 01:02:30.350
<v Speaker 0>probably not actually gone yet.

01:02:32.589 --> 01:02:34.349
<v Speaker 0>I wonder if we've already got a new

01:02:34.349 --> 01:02:35.470
<v Speaker 0>one spinning up.

01:02:37.230 --> 01:02:38.670
<v Speaker 0>I've got too many tabs.

01:02:39.710 --> 01:02:41.775
<v Speaker 0>We just use a new window. Yeah. There

01:02:41.775 --> 01:02:42.975
<v Speaker 0>we go. So we got

01:02:43.214 --> 01:02:44.735
<v Speaker 0>one initializing.

01:02:45.694 --> 01:02:47.615
<v Speaker 0>We got three replicas now. So we've lost

01:02:47.615 --> 01:02:50.575
<v Speaker 0>our leader. We've lost the master. Yeah.

01:02:51.535 --> 01:02:52.415
<v Speaker 2>The primary.

01:02:52.734 --> 01:02:54.895
<v Speaker 0>So when that new pod comes online,

01:02:55.135 --> 01:02:56.335
<v Speaker 0>will it just take over?

01:02:57.700 --> 01:03:00.340
<v Speaker 2>It will come back as primary. Okay.

01:03:00.900 --> 01:03:02.420
<v Speaker 0>And what if it's away for

01:03:03.540 --> 01:03:04.420
<v Speaker 0>an hour?

01:03:05.140 --> 01:03:07.540
<v Speaker 0>You know? An hour? Uh-huh. Yeah. What what

01:03:07.540 --> 01:03:08.580
<v Speaker 0>if I what if it goes away for

01:03:08.580 --> 01:03:09.860
<v Speaker 0>three days? What if I run it on

01:03:09.860 --> 01:03:11.460
<v Speaker 0>bare metal and the hard drive dies and

01:03:11.460 --> 01:03:12.965
<v Speaker 0>I shut down the machine there?

01:03:13.685 --> 01:03:15.685
<v Speaker 2>So what we haven't shown

01:03:15.685 --> 01:03:16.885
<v Speaker 2>in this example

01:03:16.965 --> 01:03:19.765
<v Speaker 2>is that you can integrate Vitess Orchestrator,

01:03:19.765 --> 01:03:21.285
<v Speaker 2>which will actually

01:03:23.285 --> 01:03:24.405
<v Speaker 2>do a failover.

01:03:29.150 --> 01:03:30.670
<v Speaker 0>Don't know if that's stuck.

01:03:34.030 --> 01:03:35.710
<v Speaker 0>It looks okay here.

01:03:36.430 --> 01:03:37.790
<v Speaker 0>Well, it just take a a bit of

01:03:37.790 --> 01:03:39.390
<v Speaker 0>time before it shows up on the oh,

01:03:39.390 --> 01:03:41.225
<v Speaker 0>no. There we go. Back. Yeah.

01:03:43.145 --> 01:03:45.305
<v Speaker 0>And so what happens with write requests that

01:03:45.305 --> 01:03:46.905
<v Speaker 0>come in during that time when there's there's

01:03:46.905 --> 01:03:48.105
<v Speaker 0>no leader available?

01:03:48.985 --> 01:03:50.505
<v Speaker 2>So Vitigate,

01:03:50.905 --> 01:03:52.425
<v Speaker 2>I'm not sure if we have set this

01:03:52.425 --> 01:03:54.970
<v Speaker 2>up in this example, but Vitigate can buffer

01:03:54.970 --> 01:03:55.849
<v Speaker 2>the request.

01:03:56.809 --> 01:03:58.330
<v Speaker 2>And let's say,

01:03:58.650 --> 01:04:00.410
<v Speaker 2>on the client side, you have some sort

01:04:00.410 --> 01:04:02.569
<v Speaker 2>of a time out, fifteen seconds as you

01:04:02.970 --> 01:04:03.690
<v Speaker 2>right?

01:04:04.410 --> 01:04:07.885
<v Speaker 2>Vitigate will buffer the request for a specified

01:04:07.885 --> 01:04:08.605
<v Speaker 2>duration.

01:04:08.845 --> 01:04:11.724
<v Speaker 2>By default, it's, like, twenty seconds, but you

01:04:11.724 --> 01:04:13.405
<v Speaker 2>can set it up to thirty seconds.

01:04:14.045 --> 01:04:14.525
<v Speaker 2>And,

01:04:15.244 --> 01:04:17.484
<v Speaker 2>Vitigate will buffer the request. If the client

01:04:17.484 --> 01:04:19.164
<v Speaker 2>times out, the client can retry.

01:04:19.630 --> 01:04:21.869
<v Speaker 2>If the client doesn't time out, once the

01:04:21.869 --> 01:04:23.950
<v Speaker 2>primary is back up, Vitigate will,

01:04:24.349 --> 01:04:26.110
<v Speaker 2>send the request again,

01:04:27.630 --> 01:04:29.390
<v Speaker 2>and they will succeed.

01:04:30.990 --> 01:04:33.390
<v Speaker 0>Okay. There will just be a delay.

01:04:33.710 --> 01:04:35.805
<v Speaker 2>Something that you expect to take one second

01:04:35.805 --> 01:04:38.445
<v Speaker 2>might come back after twenty seconds or twenty

01:04:38.445 --> 01:04:39.325
<v Speaker 2>five seconds.

01:04:40.525 --> 01:04:41.484
<v Speaker 0>Okay.

01:04:41.484 --> 01:04:44.525
<v Speaker 0>Is there anything else that's interesting

01:04:45.565 --> 01:04:47.325
<v Speaker 0>to the way that the test had?

01:04:50.390 --> 01:04:52.549
<v Speaker 0>I think Google was thinking I was talking

01:04:52.549 --> 01:04:54.150
<v Speaker 0>to it. Is there anything

01:04:54.789 --> 01:04:55.829
<v Speaker 0>interesting

01:04:55.829 --> 01:04:57.510
<v Speaker 0>that we could show from, you know, now

01:04:57.510 --> 01:04:59.510
<v Speaker 0>that we're in this kind of MySQL prompt

01:04:59.510 --> 01:05:00.070
<v Speaker 0>thing,

01:05:00.869 --> 01:05:02.710
<v Speaker 0>is there any other Vitess

01:05:02.925 --> 01:05:05.485
<v Speaker 0>specialized objects that we can show, describe the

01:05:05.485 --> 01:05:07.805
<v Speaker 0>schemas, and for that that would be useful

01:05:07.805 --> 01:05:09.325
<v Speaker 0>to the people viewing at home?

01:05:10.205 --> 01:05:12.205
<v Speaker 2>I think we can also do show with

01:05:12.205 --> 01:05:13.405
<v Speaker 2>the key spaces.

01:05:17.490 --> 01:05:19.570
<v Speaker 0>And is would that be describable?

01:05:22.050 --> 01:05:24.290
<v Speaker 0>I can't even remember if this is real

01:05:24.290 --> 01:05:26.370
<v Speaker 0>MySQL syntax. I'm kind of just making that

01:05:26.370 --> 01:05:27.330
<v Speaker 0>up. No. No. It's

01:05:28.450 --> 01:05:29.570
<v Speaker 2>oh, nope.

01:05:30.530 --> 01:05:31.170
<v Speaker 2>Not yet.

01:05:31.835 --> 01:05:33.515
<v Speaker 1>No. You can say

01:05:33.914 --> 01:05:35.115
<v Speaker 1>use commerce

01:05:35.914 --> 01:05:38.395
<v Speaker 1>and and say show show tables.

01:05:40.555 --> 01:05:42.154
<v Speaker 2>Yeah. In fact, you can do show tables

01:05:42.154 --> 01:05:43.195
<v Speaker 2>even without

01:05:43.595 --> 01:05:45.194
<v Speaker 1>Yeah. Doing use commerce. Yeah.

01:05:47.520 --> 01:05:49.600
<v Speaker 2>One of the But we didn't actually select

01:05:49.600 --> 01:05:51.840
<v Speaker 1>the default database. That's why when we connected,

01:05:51.840 --> 01:05:53.360
<v Speaker 1>it didn't actually have yeah.

01:05:54.320 --> 01:05:55.040
<v Speaker 1>So

01:05:55.520 --> 01:05:57.360
<v Speaker 1>these are the these are the tables that

01:05:57.360 --> 01:06:00.525
<v Speaker 1>initial setup created in the commerce database.

01:06:02.125 --> 01:06:05.085
<v Speaker 2>Right. WordPress itself Yeah. That's WordPress metadata.

01:06:05.085 --> 01:06:05.645
<v Speaker 1>Yeah.

01:06:05.965 --> 01:06:08.765
<v Speaker 2>Yeah. Okay. So one of the things Vitess

01:06:08.765 --> 01:06:10.845
<v Speaker 2>can do is you can actually have multiple

01:06:10.845 --> 01:06:12.765
<v Speaker 2>key spaces and have a VT gate that

01:06:12.765 --> 01:06:13.885
<v Speaker 2>spans those

01:06:14.205 --> 01:06:14.765
<v Speaker 2>and

01:06:15.080 --> 01:06:15.720
<v Speaker 2>have

01:06:15.880 --> 01:06:16.840
<v Speaker 2>the illusion

01:06:16.840 --> 01:06:19.400
<v Speaker 2>of a single database as long as the

01:06:19.400 --> 01:06:21.000
<v Speaker 2>table names don't overlap.

01:06:21.400 --> 01:06:23.880
<v Speaker 2>So sometimes what people will do

01:06:24.360 --> 01:06:26.360
<v Speaker 2>is instead of sharding

01:06:26.760 --> 01:06:29.400
<v Speaker 2>let's say instead of having many large tables

01:06:30.360 --> 01:06:32.495
<v Speaker 2>or a few large tables, they have many,

01:06:32.495 --> 01:06:35.135
<v Speaker 2>many, many small tables, and the overall database

01:06:35.135 --> 01:06:37.455
<v Speaker 2>size is big. Then you can split those

01:06:37.455 --> 01:06:38.095
<v Speaker 2>into

01:06:38.335 --> 01:06:40.255
<v Speaker 2>multiple MySQL databases,

01:06:40.255 --> 01:06:42.255
<v Speaker 2>give each of them a different name,

01:06:42.895 --> 01:06:44.890
<v Speaker 2>and at the Vitess level, you'll get the

01:06:44.890 --> 01:06:46.730
<v Speaker 2>illusion that they're all still in a single

01:06:46.730 --> 01:06:47.450
<v Speaker 2>database

01:06:47.530 --> 01:06:49.930
<v Speaker 2>as long as the table names don't collide.

01:06:51.370 --> 01:06:52.410
<v Speaker 0>Ah, okay.

01:06:52.650 --> 01:06:54.890
<v Speaker 1>That's actually super cool. I mean,

01:06:55.370 --> 01:06:58.305
<v Speaker 1>there are, like, few blog posts about about

01:06:58.305 --> 01:06:59.105
<v Speaker 1>this, like,

01:06:59.425 --> 01:07:03.185
<v Speaker 1>million tables in one database. Like, million database.

01:07:03.185 --> 01:07:06.465
<v Speaker 1>The million tables. Like, the the customer create

01:07:06.465 --> 01:07:07.025
<v Speaker 1>a

01:07:07.505 --> 01:07:10.470
<v Speaker 1>table per customer. So every customer gets one

01:07:10.470 --> 01:07:13.030
<v Speaker 1>table. Table per user. Table per user.

01:07:13.270 --> 01:07:15.670
<v Speaker 1>Table I've I've seen that also. Table for

01:07:15.670 --> 01:07:18.470
<v Speaker 1>user is also another practice that just to

01:07:18.470 --> 01:07:20.390
<v Speaker 1>skip try to scale out. You know? I

01:07:20.390 --> 01:07:23.110
<v Speaker 0>think But, eventually, they they have a problem

01:07:23.635 --> 01:07:25.395
<v Speaker 1>managing that many objects.

01:07:25.955 --> 01:07:28.595
<v Speaker 0>I think that's a really interesting use case.

01:07:28.595 --> 01:07:30.275
<v Speaker 0>You know, I I'm I'm in Europe where

01:07:30.275 --> 01:07:32.515
<v Speaker 0>GDPR is a really big thing, and companies

01:07:32.515 --> 01:07:35.075
<v Speaker 0>are looking for ways to segment and isolate

01:07:35.155 --> 01:07:37.660
<v Speaker 0>certain countries data or certain, you know, studies

01:07:37.660 --> 01:07:40.300
<v Speaker 0>data or even not, you know, maybe per

01:07:40.300 --> 01:07:42.460
<v Speaker 0>user to a certain degree, they really wanna

01:07:42.460 --> 01:07:43.740
<v Speaker 0>just be able to make it easy to

01:07:43.740 --> 01:07:46.700
<v Speaker 0>wipe that away after the GDPR timeframes, etcetera.

01:07:46.700 --> 01:07:48.780
<v Speaker 0>So I could see a lot of really

01:07:48.780 --> 01:07:51.100
<v Speaker 0>interesting use cases for adopting that

01:07:52.215 --> 01:07:55.495
<v Speaker 0>VT gate across multiple case based thing. That

01:07:55.655 --> 01:07:58.295
<v Speaker 0>would be very interesting to me definitely. That's

01:07:58.295 --> 01:08:00.615
<v Speaker 1>even lower level than the zone and the

01:08:00.615 --> 01:08:02.695
<v Speaker 1>cells. So you actually have the zone.

01:08:03.255 --> 01:08:04.080
<v Speaker 1>Let's just

01:08:04.640 --> 01:08:07.360
<v Speaker 1>in GDPR case, you can actually zone out

01:08:07.360 --> 01:08:09.600
<v Speaker 1>all the countries. Right? And then you can

01:08:09.600 --> 01:08:12.400
<v Speaker 1>actually set set them on a cell per

01:08:12.560 --> 01:08:15.360
<v Speaker 1>data center, like, availability zone,

01:08:15.600 --> 01:08:17.760
<v Speaker 1>and then drill down even further

01:08:17.840 --> 01:08:19.520
<v Speaker 1>by region, by, you know,

01:08:20.215 --> 01:08:22.055
<v Speaker 1>state, county, or or that. And then you

01:08:22.055 --> 01:08:24.215
<v Speaker 1>can all do that within this

01:08:24.615 --> 01:08:26.455
<v Speaker 1>design. So the extremely

01:08:26.775 --> 01:08:27.654
<v Speaker 1>interesting

01:08:27.735 --> 01:08:28.694
<v Speaker 1>use case.

01:08:29.735 --> 01:08:30.935
<v Speaker 0>Yeah. So I just wanna make sure I

01:08:30.935 --> 01:08:33.575
<v Speaker 0>understood that correctly. Like, I'm designing an application

01:08:33.575 --> 01:08:35.095
<v Speaker 0>where users can register

01:08:35.399 --> 01:08:37.399
<v Speaker 0>and I want to store all of the,

01:08:37.399 --> 01:08:39.080
<v Speaker 0>you know, all of the people that are

01:08:39.080 --> 01:08:41.239
<v Speaker 0>in The US and a US zone, I

01:08:41.239 --> 01:08:42.920
<v Speaker 0>wanna store all the European people, maybe I'm

01:08:42.920 --> 01:08:44.199
<v Speaker 0>like London zone

01:08:44.359 --> 01:08:45.719
<v Speaker 0>and then I wanna use

01:08:45.960 --> 01:08:47.479
<v Speaker 0>I wanna be able to break them down

01:08:47.479 --> 01:08:48.920
<v Speaker 0>by user type and say I break them

01:08:48.920 --> 01:08:50.600
<v Speaker 0>down into a key space each. So you're

01:08:50.600 --> 01:08:52.575
<v Speaker 0>saying that t I could run a v

01:08:52.575 --> 01:08:54.575
<v Speaker 0>t k in each geographic location which would

01:08:54.575 --> 01:08:56.654
<v Speaker 0>handle the request for that specific

01:08:57.055 --> 01:08:57.935
<v Speaker 0>continent?

01:08:58.975 --> 01:09:00.415
<v Speaker 2>Yep. Yes. Okay.

01:09:01.535 --> 01:09:04.335
<v Speaker 0>Cool. So Slack actually does this. They have

01:09:04.335 --> 01:09:06.415
<v Speaker 2>the data locality. When you create a Slack

01:09:06.415 --> 01:09:08.910
<v Speaker 2>work you can choose which region you want

01:09:08.910 --> 01:09:10.510
<v Speaker 2>your data to reside in,

01:09:10.910 --> 01:09:13.310
<v Speaker 2>and they use Vitess, and they are doing

01:09:13.310 --> 01:09:16.109
<v Speaker 2>it. And are these VT gates aware of

01:09:16.109 --> 01:09:17.870
<v Speaker 0>one another if I make a request from

01:09:17.870 --> 01:09:19.470
<v Speaker 0>a let's say I'm traveling, right, and all

01:09:19.470 --> 01:09:21.645
<v Speaker 0>my data is hosted in the Scottish data

01:09:21.645 --> 01:09:24.365
<v Speaker 0>center, assuming we have any. And I'm in,

01:09:24.365 --> 01:09:26.604
<v Speaker 0>you know, Amsterdam or California for a business

01:09:26.604 --> 01:09:28.604
<v Speaker 0>trip, and I log in to the VT

01:09:28.604 --> 01:09:30.045
<v Speaker 0>gate there, does that know to move me

01:09:30.045 --> 01:09:32.284
<v Speaker 0>over there, or would it fail?

01:09:32.524 --> 01:09:33.405
<v Speaker 0>Like, what would happen?

01:09:34.320 --> 01:09:35.920
<v Speaker 2>That's a good question.

01:09:36.160 --> 01:09:38.320
<v Speaker 2>You can set up the VT gates to

01:09:38.320 --> 01:09:40.800
<v Speaker 2>be able to access data in other

01:09:41.520 --> 01:09:43.600
<v Speaker 2>zones, but there'll be a latency.

01:09:43.680 --> 01:09:44.319
<v Speaker 0>Yeah.

01:09:45.120 --> 01:09:45.760
<v Speaker 0>Okay.

01:09:47.600 --> 01:09:48.240
<v Speaker 0>Let's

01:09:48.435 --> 01:09:50.595
<v Speaker 0>I I don't know how long this will

01:09:50.595 --> 01:09:52.035
<v Speaker 0>take, but I'll suggest you on one more

01:09:52.035 --> 01:09:53.395
<v Speaker 0>thing. If we think it's gonna take too

01:09:53.395 --> 01:09:55.315
<v Speaker 0>long, let's just not do it. We can

01:09:55.315 --> 01:09:57.475
<v Speaker 0>go back to the documentation and maybe actually

01:09:57.475 --> 01:09:58.995
<v Speaker 0>stick to the what we were gonna do

01:09:58.995 --> 01:09:59.555
<v Speaker 0>for a while. But

01:10:00.560 --> 01:10:02.800
<v Speaker 0>when we created this key space, it was

01:10:02.800 --> 01:10:04.000
<v Speaker 0>uncharted.

01:10:04.000 --> 01:10:06.080
<v Speaker 0>Right? So if I run that command again,

01:10:06.080 --> 01:10:08.079
<v Speaker 0>the show key spaces. No.

01:10:08.400 --> 01:10:09.840
<v Speaker 0>Show tablets.

01:10:10.880 --> 01:10:11.599
<v Speaker 0>Yeah.

01:10:12.080 --> 01:10:14.639
<v Speaker 0>This dash here means uncharted. Is that right?

01:10:15.040 --> 01:10:15.440
<v Speaker 2>Right.

01:10:16.935 --> 01:10:18.135
<v Speaker 0>Can we chart this?

01:10:19.015 --> 01:10:20.534
<v Speaker 2>Yes. It's documented.

01:10:20.855 --> 01:10:22.935
<v Speaker 2>We can look at the documentation to see

01:10:22.935 --> 01:10:24.135
<v Speaker 2>how we should do it.

01:10:25.015 --> 01:10:26.054
<v Speaker 0>Okay.

01:10:26.055 --> 01:10:27.094
<v Speaker 0>That's fine.

01:10:27.335 --> 01:10:27.975
<v Speaker 0>Let's see.

01:10:29.550 --> 01:10:30.670
<v Speaker 0>Can I just search?

01:10:31.150 --> 01:10:32.990
<v Speaker 2>We should go go back we should go

01:10:32.990 --> 01:10:34.830
<v Speaker 2>back to that guide that we were in,

01:10:34.830 --> 01:10:36.750
<v Speaker 2>and there's a link from there to go

01:10:36.750 --> 01:10:37.230
<v Speaker 2>to

01:10:38.590 --> 01:10:40.350
<v Speaker 2>the next steps. So get started

01:10:41.775 --> 01:10:43.295
<v Speaker 2>with this operator. Next

01:10:44.575 --> 01:10:45.295
<v Speaker 0>steps.

01:10:47.135 --> 01:10:48.895
<v Speaker 0>So is there move tables?

01:10:50.255 --> 01:10:52.815
<v Speaker 2>Let's click on move tables. We don't need

01:10:52.815 --> 01:10:54.495
<v Speaker 2>to do move tables because

01:10:56.015 --> 01:10:58.219
<v Speaker 2>we are not trying to split

01:11:00.140 --> 01:11:04.060
<v Speaker 2>the existing key space into multiple key spaces.

01:11:04.060 --> 01:11:05.420
<v Speaker 2>We just want to shard.

01:11:05.660 --> 01:11:07.820
<v Speaker 2>So we can go all the way to

01:11:07.820 --> 01:11:08.940
<v Speaker 2>the end and

01:11:10.699 --> 01:11:12.860
<v Speaker 2>resharding. Yeah. That's what we want to do.

01:11:13.415 --> 01:11:15.895
<v Speaker 0>So my resharding ideas in the advanced track.

01:11:15.895 --> 01:11:16.455
<v Speaker 0>Okay.

01:11:18.375 --> 01:11:18.535
<v Speaker 0>So

01:11:19.255 --> 01:11:20.535
<v Speaker 2>So the the

01:11:21.095 --> 01:11:24.615
<v Speaker 2>the part that takes time is to define

01:11:24.615 --> 01:11:25.815
<v Speaker 2>those indexes

01:11:25.750 --> 01:11:27.750
<v Speaker 2>all of the tables. And with WordPress, there

01:11:27.750 --> 01:11:29.510
<v Speaker 2>are quite a few tables.

01:11:31.110 --> 01:11:33.909
<v Speaker 2>So for each of those tables, you'll you

01:11:34.869 --> 01:11:37.429
<v Speaker 2>ideally need to inspect the schema, pick a

01:11:37.429 --> 01:11:40.885
<v Speaker 2>column, pick a index type. Hash is the

01:11:40.885 --> 01:11:41.764
<v Speaker 2>most common,

01:11:42.005 --> 01:11:44.164
<v Speaker 2>but there are multiple index types.

01:11:45.525 --> 01:11:47.925
<v Speaker 0>So it's probably be very beneficial if I

01:11:47.925 --> 01:11:50.085
<v Speaker 0>even knew what the WordPress schema looked like.

01:11:50.560 --> 01:11:53.760
<v Speaker 0>It's kinda Yeah. So in in WordPress example,

01:11:53.840 --> 01:11:54.719
<v Speaker 1>I looked,

01:11:55.679 --> 01:11:56.480
<v Speaker 1>earlier

01:11:56.480 --> 01:11:57.199
<v Speaker 1>was

01:11:57.679 --> 01:12:00.159
<v Speaker 1>you have a blog site. Right? So

01:12:00.480 --> 01:12:03.120
<v Speaker 1>you would keep one uncharted

01:12:03.724 --> 01:12:05.965
<v Speaker 1>key space for your metadata.

01:12:05.965 --> 01:12:07.164
<v Speaker 1>But for the blog,

01:12:07.565 --> 01:12:10.045
<v Speaker 1>you would actually have a charted key space

01:12:10.045 --> 01:12:13.324
<v Speaker 1>by the, you know, blog ID or or

01:12:13.324 --> 01:12:14.764
<v Speaker 1>or comments,

01:12:15.405 --> 01:12:17.929
<v Speaker 1>users that we would need to scale. You

01:12:17.929 --> 01:12:19.849
<v Speaker 1>don't need to scale your

01:12:20.090 --> 01:12:22.650
<v Speaker 1>metadata because it only, like, keeps track of

01:12:22.650 --> 01:12:25.209
<v Speaker 1>users, how many they they like, how many

01:12:25.210 --> 01:12:27.530
<v Speaker 1>they commented, and stuff like that. But but

01:12:27.530 --> 01:12:29.530
<v Speaker 1>you need what you need to scale in

01:12:29.530 --> 01:12:30.250
<v Speaker 1>that example

01:12:30.645 --> 01:12:33.605
<v Speaker 1>is the number of comments from the users.

01:12:33.605 --> 01:12:35.525
<v Speaker 1>Right? You actually have to split them up

01:12:35.525 --> 01:12:37.764
<v Speaker 1>so that they don't actually stack into one

01:12:38.085 --> 01:12:39.124
<v Speaker 1>area.

01:12:39.445 --> 01:12:41.284
<v Speaker 1>So that's that's why

01:12:41.764 --> 01:12:44.244
<v Speaker 1>there is some assembly required before

01:12:44.790 --> 01:12:47.429
<v Speaker 1>you decide a shard on what type of

01:12:47.429 --> 01:12:49.510
<v Speaker 1>sharding you want to do on those. And

01:12:49.510 --> 01:12:52.230
<v Speaker 1>and and and Deepthi's comment on hash is

01:12:52.230 --> 01:12:53.429
<v Speaker 1>very common because

01:12:53.670 --> 01:12:55.510
<v Speaker 1>that way you can say, okay. I want

01:12:55.510 --> 01:12:58.150
<v Speaker 1>n number of shards and shard

01:12:58.150 --> 01:13:00.070
<v Speaker 1>them by hash, which is

01:13:01.494 --> 01:13:03.414
<v Speaker 1>kind of easy way of doing it.

01:13:04.295 --> 01:13:06.614
<v Speaker 2>And it usually gives you a pretty good

01:13:06.614 --> 01:13:09.655
<v Speaker 2>distribution if you're hashing a numeric field

01:13:10.054 --> 01:13:12.454
<v Speaker 2>because that's important when you're sharding. You don't

01:13:12.454 --> 01:13:13.974
<v Speaker 2>want some shards to be

01:13:14.710 --> 01:13:17.429
<v Speaker 2>overloaded and some shards to be very sparse.

01:13:17.909 --> 01:13:19.670
<v Speaker 2>But I can make a great point. I

01:13:19.670 --> 01:13:22.150
<v Speaker 2>skipped over the move tables thinking that, okay.

01:13:22.150 --> 01:13:24.150
<v Speaker 2>If you want to reshard, then you'll reshard

01:13:24.150 --> 01:13:26.790
<v Speaker 2>all tables. But no no. Not necessarily.

01:13:26.790 --> 01:13:29.275
<v Speaker 2>Some tables are always gonna be small, so

01:13:29.275 --> 01:13:31.675
<v Speaker 2>you will move them out into a key

01:13:31.675 --> 01:13:33.995
<v Speaker 2>space that you don't intend to shard, and

01:13:33.995 --> 01:13:35.755
<v Speaker 2>then you'll take your main key space and

01:13:35.755 --> 01:13:36.635
<v Speaker 2>shard that.

01:13:37.515 --> 01:13:39.355
<v Speaker 0>Okay. That makes sense.

01:13:40.155 --> 01:13:42.075
<v Speaker 0>Well, I'm not confident in my ability to

01:13:42.075 --> 01:13:44.955
<v Speaker 0>work through the WordPress schema and and try

01:13:44.070 --> 01:13:45.989
<v Speaker 0>try and identify how we should share that.

01:13:45.989 --> 01:13:47.190
<v Speaker 0>So if we were to take a look

01:13:47.190 --> 01:13:48.949
<v Speaker 0>at one more thing, is there anything that

01:13:48.949 --> 01:13:50.230
<v Speaker 0>either of you would like me to click

01:13:50.230 --> 01:13:51.750
<v Speaker 0>on here and lead me towards?

01:13:56.755 --> 01:13:58.355
<v Speaker 0>I don't I think the the one thing

01:13:58.355 --> 01:13:59.955
<v Speaker 2>the one thing I want to talk about

01:13:59.955 --> 01:14:01.475
<v Speaker 2>is hortro protection.

01:14:02.115 --> 01:14:03.635
<v Speaker 0>Okay. That's good. Vitess

01:14:03.875 --> 01:14:06.435
<v Speaker 2>Vitess does query consolidation.

01:14:07.155 --> 01:14:10.730
<v Speaker 2>So let's say that many clients are looking

01:14:10.730 --> 01:14:13.050
<v Speaker 2>for the same thing. I don't know. Top,

01:14:13.370 --> 01:14:16.490
<v Speaker 2>top voted comment or something. Everybody wants to

01:14:16.490 --> 01:14:18.410
<v Speaker 2>click on the top post. Right?

01:14:20.650 --> 01:14:21.930
<v Speaker 2>Vitess can detect

01:14:22.425 --> 01:14:25.465
<v Speaker 2>that there are many queries which are identical,

01:14:25.785 --> 01:14:27.304
<v Speaker 2>including the bind variables.

01:14:27.785 --> 01:14:29.705
<v Speaker 2>And there's no need to send each and

01:14:29.705 --> 01:14:31.465
<v Speaker 2>every one of those queries to the underlying

01:14:31.465 --> 01:14:32.344
<v Speaker 2>MySQL.

01:14:32.745 --> 01:14:35.065
<v Speaker 2>If one of those queries is in flight,

01:14:35.065 --> 01:14:37.909
<v Speaker 2>then you can hold everything else, wait for

01:14:37.909 --> 01:14:40.310
<v Speaker 2>the result from the first query, and send

01:14:40.310 --> 01:14:42.550
<v Speaker 2>that same result back to your thousand or

01:14:42.550 --> 01:14:43.829
<v Speaker 2>10,000 callers.

01:14:45.909 --> 01:14:48.230
<v Speaker 2>So these are, some of this is one

01:14:48.230 --> 01:14:50.869
<v Speaker 2>of those features that makes Vitess useful regardless

01:14:50.869 --> 01:14:53.025
<v Speaker 2>of sharding. Even if you are never gonna

01:14:53.025 --> 01:14:55.585
<v Speaker 2>shard, you're still going to get some protections

01:14:55.585 --> 01:14:58.305
<v Speaker 2>from thundering herds and those kinds of problems.

01:14:59.345 --> 01:15:00.385
<v Speaker 0>Yeah. I think

01:15:00.705 --> 01:15:02.545
<v Speaker 0>what what I've seen in the past when

01:15:02.545 --> 01:15:04.225
<v Speaker 0>people are trying to do something similar to

01:15:04.225 --> 01:15:06.145
<v Speaker 0>this is that they're usually bringing on another

01:15:06.145 --> 01:15:08.145
<v Speaker 0>database tool like Redis, and they're trying to,

01:15:08.145 --> 01:15:10.280
<v Speaker 0>like, analyze the query and remove any of

01:15:10.280 --> 01:15:12.360
<v Speaker 0>the variants and then cache them in there,

01:15:12.360 --> 01:15:14.760
<v Speaker 0>and it's very complicated. But is that something

01:15:14.760 --> 01:15:17.239
<v Speaker 0>that by adopting the test I get? Is

01:15:17.239 --> 01:15:18.679
<v Speaker 0>it something I have to enable? Do I

01:15:18.679 --> 01:15:19.959
<v Speaker 0>have to tweak it? Like,

01:15:20.679 --> 01:15:22.440
<v Speaker 0>is that running already in our setup just

01:15:22.440 --> 01:15:22.599
<v Speaker 0>now?

01:15:23.625 --> 01:15:26.585
<v Speaker 2>Query consolidation is on by default. You would

01:15:26.585 --> 01:15:28.425
<v Speaker 2>have to turn it off if you didn't

01:15:28.425 --> 01:15:29.784
<v Speaker 2>want it for some reason.

01:15:30.745 --> 01:15:31.385
<v Speaker 1>Okay.

01:15:32.025 --> 01:15:33.945
<v Speaker 1>What I would like to highlight

01:15:34.825 --> 01:15:35.625
<v Speaker 1>is

01:15:36.200 --> 01:15:39.480
<v Speaker 1>we talked about backup recovery. It actually did

01:15:39.640 --> 01:15:42.120
<v Speaker 1>like, in order to if you were, like,

01:15:42.120 --> 01:15:45.080
<v Speaker 1>old school DBA, in order to build a

01:15:45.080 --> 01:15:45.880
<v Speaker 1>replica,

01:15:46.360 --> 01:15:48.920
<v Speaker 1>if your node died as a DBA, you

01:15:48.920 --> 01:15:51.015
<v Speaker 1>would actually had very hard time trying to

01:15:51.015 --> 01:15:53.655
<v Speaker 1>figure out the coordinates of your replica, your

01:15:53.655 --> 01:15:55.495
<v Speaker 1>backup. You would actually have to restore it

01:15:55.495 --> 01:15:57.335
<v Speaker 1>and find it, set those,

01:15:57.655 --> 01:16:00.375
<v Speaker 1>you know, change master to commands and and

01:16:00.375 --> 01:16:02.535
<v Speaker 1>all that stuff. Right? You know, need to

01:16:02.535 --> 01:16:04.775
<v Speaker 1>pinpoint. And if you actually made a mistake,

01:16:05.700 --> 01:16:07.700
<v Speaker 1>you know, fat fingered it, you would actually

01:16:07.700 --> 01:16:10.340
<v Speaker 1>maybe screw up the entire cluster, roll forward

01:16:10.340 --> 01:16:12.739
<v Speaker 1>to wrong position, things like that. The other

01:16:12.739 --> 01:16:13.460
<v Speaker 1>thing that

01:16:13.700 --> 01:16:15.540
<v Speaker 1>is in Vitess right now,

01:16:16.020 --> 01:16:18.475
<v Speaker 1>we are very proud of is the integration

01:16:18.475 --> 01:16:21.675
<v Speaker 1>to online DDL, which is also another operational

01:16:23.035 --> 01:16:25.275
<v Speaker 1>not headache. Nightmares. Nightmares.

01:16:25.275 --> 01:16:26.315
<v Speaker 1>As

01:16:26.315 --> 01:16:30.075
<v Speaker 1>an operational DBA myself for the last last

01:16:29.160 --> 01:16:31.400
<v Speaker 1>last, you know, 25,

01:16:31.800 --> 01:16:34.440
<v Speaker 1>it's it's it's a pain. Right? And you

01:16:34.440 --> 01:16:36.920
<v Speaker 1>do just just all you want to make

01:16:36.920 --> 01:16:39.640
<v Speaker 1>a a a schema change, which is very

01:16:39.640 --> 01:16:42.760
<v Speaker 1>common. And and with with online DDL options,

01:16:43.000 --> 01:16:46.545
<v Speaker 1>you actually can utilize one of those, utilities

01:16:46.545 --> 01:16:48.704
<v Speaker 1>that are very common without

01:16:49.264 --> 01:16:50.624
<v Speaker 1>having to lock

01:16:50.784 --> 01:16:53.264
<v Speaker 1>and and impose a metadata lock and and

01:16:53.264 --> 01:16:56.224
<v Speaker 1>actually stop the application doing that. So

01:16:57.290 --> 01:16:59.290
<v Speaker 1>you can actually test it out. It's built

01:16:59.290 --> 01:17:01.530
<v Speaker 1>in right now. It's experimental,

01:17:01.530 --> 01:17:04.250
<v Speaker 1>and and we are actually enhancing it as

01:17:04.250 --> 01:17:06.330
<v Speaker 1>the maintainers. When we say we are, we

01:17:06.410 --> 01:17:08.170
<v Speaker 1>there's a large group of engineers working on

01:17:08.170 --> 01:17:09.290
<v Speaker 1>it. And,

01:17:09.770 --> 01:17:12.090
<v Speaker 1>and and you can set the DDL strategy

01:17:12.195 --> 01:17:12.835
<v Speaker 1>to,

01:17:13.395 --> 01:17:15.474
<v Speaker 1>ghost or or p t o s c,

01:17:15.635 --> 01:17:17.395
<v Speaker 1>and then do alter table, one of those

01:17:17.395 --> 01:17:19.314
<v Speaker 1>tables, and see how that goes.

01:17:19.635 --> 01:17:21.635
<v Speaker 1>And that would not actually,

01:17:22.195 --> 01:17:22.834
<v Speaker 1>you know,

01:17:23.635 --> 01:17:24.354
<v Speaker 1>cause,

01:17:24.594 --> 01:17:27.580
<v Speaker 1>any lock on the database while the WordPress

01:17:27.580 --> 01:17:30.220
<v Speaker 1>application is running, and it would actually apply

01:17:30.220 --> 01:17:32.940
<v Speaker 1>those changes and it will be managed. And

01:17:32.940 --> 01:17:34.700
<v Speaker 1>you'll know the progress of it and things

01:17:34.700 --> 01:17:36.300
<v Speaker 1>like that. So it's a it's a new

01:17:36.300 --> 01:17:37.500
<v Speaker 1>development in Vitess world.

01:17:38.505 --> 01:17:41.145
<v Speaker 0>Nice. Lots of really interesting and cool features

01:17:41.145 --> 01:17:43.145
<v Speaker 0>there. And there was something that popped in

01:17:43.145 --> 01:17:44.824
<v Speaker 0>my head just as you you both were

01:17:44.824 --> 01:17:46.505
<v Speaker 0>kind of chatting away there. And,

01:17:46.905 --> 01:17:47.704
<v Speaker 0>like, if

01:17:48.185 --> 01:17:51.385
<v Speaker 0>I were just running MySQL or MariaDB,

01:17:51.650 --> 01:17:54.290
<v Speaker 0>like it's, you know, I fat fingered enough

01:17:54.290 --> 01:17:56.369
<v Speaker 0>databases in my career. And I made up

01:17:56.449 --> 01:17:57.969
<v Speaker 0>I've deleted a lot of tables by mistake

01:17:57.969 --> 01:17:59.570
<v Speaker 0>or even filled databases like,

01:18:00.050 --> 01:18:01.650
<v Speaker 0>and, you know, you come to rely on

01:18:01.650 --> 01:18:03.810
<v Speaker 0>like the binary log and point in time

01:18:03.810 --> 01:18:05.409
<v Speaker 0>backups. Is that something that I still have

01:18:05.409 --> 01:18:07.885
<v Speaker 0>access to when I go through the test?

01:18:09.165 --> 01:18:11.645
<v Speaker 1>You absolutely have. You can connect to the

01:18:11.645 --> 01:18:14.205
<v Speaker 1>back end databases. You can mark around, download

01:18:14.205 --> 01:18:15.164
<v Speaker 1>the bin logs,

01:18:15.485 --> 01:18:17.164
<v Speaker 1>look look troubleshoot,

01:18:17.165 --> 01:18:20.420
<v Speaker 1>and and audit your database. The the database,

01:18:20.420 --> 01:18:23.300
<v Speaker 1>like like I said, database remains as database.

01:18:23.300 --> 01:18:25.060
<v Speaker 1>It's the back end database. Still the good

01:18:25.060 --> 01:18:26.260
<v Speaker 1>old MySQL.

01:18:26.260 --> 01:18:28.260
<v Speaker 1>You can access the ports and and all

01:18:28.260 --> 01:18:29.300
<v Speaker 1>the binaries

01:18:29.540 --> 01:18:31.060
<v Speaker 1>and the and the logs,

01:18:31.860 --> 01:18:33.140
<v Speaker 1>and the binary logs

01:18:33.575 --> 01:18:35.575
<v Speaker 1>is is still there. We just

01:18:36.055 --> 01:18:36.775
<v Speaker 1>don't

01:18:36.935 --> 01:18:39.895
<v Speaker 1>do that anymore. We let let the Vitess

01:18:39.895 --> 01:18:41.655
<v Speaker 1>handle all that stuff.

01:18:43.095 --> 01:18:45.175
<v Speaker 0>Alright. Well Vitess itself

01:18:45.175 --> 01:18:45.575
<v Speaker 2>sorry.

01:18:46.215 --> 01:18:48.360
<v Speaker 2>Just one more thing. We actually have a

01:18:48.360 --> 01:18:50.680
<v Speaker 2>point in time recovery feature as well,

01:18:51.800 --> 01:18:53.720
<v Speaker 2>which is documented on the website.

01:18:55.160 --> 01:18:55.880
<v Speaker 0>And it's

01:18:56.760 --> 01:18:59.560
<v Speaker 0>okay. Let's pull up the website again. Let's

01:18:59.560 --> 01:19:01.239
<v Speaker 0>take a look at that. So

01:19:02.055 --> 01:19:05.015
<v Speaker 2>It's probably an advanced feature somewhere.

01:19:05.495 --> 01:19:07.575
<v Speaker 2>Oh, we should just search for it. Yeah.

01:19:07.575 --> 01:19:08.295
<v Speaker 0>Maybe.

01:19:10.295 --> 01:19:12.295
<v Speaker 0>I wonder if I can just yeah. Point

01:19:12.295 --> 01:19:12.935
<v Speaker 0>and time recover.

01:19:14.580 --> 01:19:16.020
<v Speaker 0>I like it as well. It's even the

01:19:16.020 --> 01:19:18.260
<v Speaker 0>docs have a decent search functionality and I

01:19:18.260 --> 01:19:20.500
<v Speaker 0>don't have to look too hard.

01:19:21.300 --> 01:19:23.300
<v Speaker 0>So it's just taking advantage of the fact

01:19:23.300 --> 01:19:26.260
<v Speaker 0>that, you know, all of the requests are

01:19:26.260 --> 01:19:28.340
<v Speaker 0>going through the VT gates and and then

01:19:28.340 --> 01:19:30.205
<v Speaker 0>you're you're doing, like, a multi rate to

01:19:30.205 --> 01:19:32.445
<v Speaker 0>some metadata store to understand what happened on

01:19:32.445 --> 01:19:33.005
<v Speaker 0>each

01:19:33.405 --> 01:19:35.005
<v Speaker 0>individual DB?

01:19:35.805 --> 01:19:38.125
<v Speaker 2>It it relies on the bin logs. Alright.

01:19:38.125 --> 01:19:40.285
<v Speaker 0>Okay. So it does require a bin log

01:19:40.285 --> 01:19:41.005
<v Speaker 2>server

01:19:41.325 --> 01:19:43.805
<v Speaker 2>so that we can replay the bin logs.

01:19:44.125 --> 01:19:47.460
<v Speaker 2>So it so we we have periodic backups,

01:19:47.460 --> 01:19:49.300
<v Speaker 2>so we will find the backup that is

01:19:49.300 --> 01:19:51.619
<v Speaker 2>closest to the desired time and then replay

01:19:51.619 --> 01:19:54.739
<v Speaker 2>the bin logs starting from that position until

01:19:54.739 --> 01:19:57.139
<v Speaker 2>you get to the time you want it.

01:19:58.579 --> 01:20:00.795
<v Speaker 0>Is it a bad thing? Like, you know,

01:20:00.795 --> 01:20:03.115
<v Speaker 0>if I'm running the tests and I

01:20:04.155 --> 01:20:06.715
<v Speaker 0>skip over it and go directly to my

01:20:06.715 --> 01:20:09.675
<v Speaker 0>MySQL DB or my MariaDB, does that cause

01:20:09.675 --> 01:20:12.235
<v Speaker 0>problems? Like, should everything go through Vitess? Or

01:20:14.670 --> 01:20:16.989
<v Speaker 2>Queries don't have to go through Vitess. You

01:20:16.989 --> 01:20:17.789
<v Speaker 2>can write

01:20:18.350 --> 01:20:20.750
<v Speaker 2>update data on the back end. That'll be

01:20:20.750 --> 01:20:21.309
<v Speaker 2>fine.

01:20:21.870 --> 01:20:22.510
<v Speaker 2>But

01:20:22.989 --> 01:20:23.870
<v Speaker 2>configuration

01:20:23.870 --> 01:20:26.910
<v Speaker 2>changes may conflict with how Vitess wants to

01:20:26.910 --> 01:20:28.830
<v Speaker 2>run things. So it's not gonna be a

01:20:28.830 --> 01:20:31.150
<v Speaker 2>good idea to do config changes on the

01:20:30.645 --> 01:20:32.645
<v Speaker 2>back end. Yeah. That makes sense. You know,

01:20:32.645 --> 01:20:34.965
<v Speaker 0>I think I'm already sold anyway. Like, I

01:20:34.965 --> 01:20:35.445
<v Speaker 0>think

01:20:35.845 --> 01:20:37.765
<v Speaker 0>the I think the amount of features and

01:20:37.765 --> 01:20:40.165
<v Speaker 0>and, you know, operational help that Vitess is

01:20:40.165 --> 01:20:42.405
<v Speaker 0>bringing to people that are working with these

01:20:42.405 --> 01:20:44.965
<v Speaker 0>two databases, like, it just seems like a

01:20:44.965 --> 01:20:46.860
<v Speaker 0>no brainer. Like, you probably do want to

01:20:46.860 --> 01:20:49.739
<v Speaker 0>adopt this technology and and use it. And

01:20:49.739 --> 01:20:52.219
<v Speaker 0>you've already mentioned a few very large company

01:20:52.219 --> 01:20:53.820
<v Speaker 0>names, YouTube and

01:20:54.140 --> 01:20:55.580
<v Speaker 0>there was one other just a few moments

01:20:55.580 --> 01:20:58.455
<v Speaker 0>ago, the fact that they're using Slack. Slack.

01:20:58.455 --> 01:21:00.935
<v Speaker 0>Exactly. Right. You know, they're using less technology

01:21:00.935 --> 01:21:02.215
<v Speaker 0>as well. I think that should give people

01:21:02.215 --> 01:21:04.455
<v Speaker 0>a lot of confidence and hopefully gives them

01:21:04.455 --> 01:21:06.935
<v Speaker 0>that little peak of interest to go and

01:21:06.935 --> 01:21:08.534
<v Speaker 0>and check it out for themselves.

01:21:09.335 --> 01:21:10.935
<v Speaker 0>Is there anything else either of you would

01:21:10.935 --> 01:21:12.295
<v Speaker 0>like to finish with before I let you

01:21:12.295 --> 01:21:13.735
<v Speaker 0>go and enjoy the rest of your day?

01:21:16.030 --> 01:21:17.070
<v Speaker 0>Just

01:21:17.870 --> 01:21:20.829
<v Speaker 1>just quick quick note on on the

01:21:20.910 --> 01:21:24.670
<v Speaker 1>Vitess project. We have a a Slack channel,

01:21:24.670 --> 01:21:27.710
<v Speaker 1>Vitess. If there are questions on on Vitess,

01:21:28.175 --> 01:21:31.055
<v Speaker 1>that is the most active place to ask

01:21:31.055 --> 01:21:32.175
<v Speaker 1>about Vitess.

01:21:32.575 --> 01:21:34.575
<v Speaker 1>Even if it's a newbie question, that's like

01:21:34.575 --> 01:21:37.535
<v Speaker 1>a general channel is is great for that.

01:21:38.735 --> 01:21:41.430
<v Speaker 1>The code is open source. GitHub is is

01:21:41.430 --> 01:21:43.510
<v Speaker 1>a great resource for for

01:21:43.750 --> 01:21:45.110
<v Speaker 1>research and development.

01:21:45.590 --> 01:21:47.910
<v Speaker 1>And and as you already gone through the

01:21:47.910 --> 01:21:51.270
<v Speaker 1>docs, you we already have it. And and

01:21:52.070 --> 01:21:53.430
<v Speaker 1>and if there are any questions

01:21:54.575 --> 01:21:56.975
<v Speaker 1>to either of us or the rest of

01:21:56.975 --> 01:21:59.535
<v Speaker 1>the maintainers, again, with the Slack channel or

01:21:59.535 --> 01:22:00.175
<v Speaker 1>or

01:22:00.415 --> 01:22:02.735
<v Speaker 1>Twitter is is a good communication channel.

01:22:03.615 --> 01:22:05.775
<v Speaker 0>Alright. Perfect. We are both on Twitter, and

01:22:05.775 --> 01:22:07.055
<v Speaker 2>there's a Vitess.io

01:22:07.055 --> 01:22:07.855
<v Speaker 2>Twitter

01:22:08.815 --> 01:22:09.615
<v Speaker 2>account as well.

01:22:10.530 --> 01:22:12.370
<v Speaker 0>Yeah. Well, all of the Twitter links are

01:22:12.370 --> 01:22:13.730
<v Speaker 0>in the show notes. I will make sure

01:22:13.730 --> 01:22:15.250
<v Speaker 0>that I drop a link to your Slack

01:22:15.250 --> 01:22:16.930
<v Speaker 0>channel in there as well. So people feel

01:22:16.930 --> 01:22:19.409
<v Speaker 0>free to jump into the description, join,

01:22:19.410 --> 01:22:19.969
<v Speaker 0>and have

01:22:20.370 --> 01:22:22.450
<v Speaker 0>fun with the test. And I'm sure that

01:22:22.450 --> 01:22:23.970
<v Speaker 0>you'd both be happy to help if anyone

01:22:23.970 --> 01:22:26.754
<v Speaker 0>does have any challenges or problems. Alright.

01:22:27.474 --> 01:22:29.635
<v Speaker 0>Well, I'll let you both go, please. Thank

01:22:29.635 --> 01:22:30.914
<v Speaker 0>you for joining me today. Have a great

01:22:30.994 --> 01:22:32.675
<v Speaker 0>Thank you very much. Meet you both soon.

01:22:32.835 --> 01:22:34.835
<v Speaker 0>Mhmm. Thank you for having us, David. Thank

01:22:34.835 --> 01:22:36.114
<v Speaker 0>you. Bye. Yep. Thank you.
