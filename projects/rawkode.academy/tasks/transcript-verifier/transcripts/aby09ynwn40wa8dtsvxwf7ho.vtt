WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: d04be0ec-f018-44c5-bc44-aa0cfe400e3c
Created: 2025-04-29T19:57:07.151Z
Duration: 6965.0874
Channels: 1

00:01:16.560 --> 00:01:19.680
<v Speaker 0>Hello and welcome to today's episode of Rawkode

00:01:19.680 --> 00:01:21.600
<v Speaker 0>live. I'm your host Rawkode.

00:01:22.160 --> 00:01:25.120
<v Speaker 0>Today we are continuing our series of running

00:01:25.120 --> 00:01:26.880
<v Speaker 0>Laravel on Kubernetes.

00:01:26.960 --> 00:01:28.315
<v Speaker 0>Trying to make sure that we tackle all

00:01:28.315 --> 00:01:30.955
<v Speaker 0>the different edge cases and real scenarios that

00:01:30.955 --> 00:01:32.155
<v Speaker 0>people need to solve to be able to

00:01:32.155 --> 00:01:34.795
<v Speaker 0>scale properly. Today specifically, we're gonna be taking

00:01:34.795 --> 00:01:36.315
<v Speaker 0>a look at how we can get metrics

00:01:36.315 --> 00:01:37.035
<v Speaker 0>out

00:01:37.195 --> 00:01:38.875
<v Speaker 0>of our Laravel application

00:01:39.195 --> 00:01:41.835
<v Speaker 0>and use that for some auto scaling plus

00:01:42.075 --> 00:01:43.500
<v Speaker 0>one of my guests Alex has got some

00:01:43.500 --> 00:01:45.179
<v Speaker 0>random ideas to do that with key workers

00:01:45.179 --> 00:01:46.939
<v Speaker 0>too. So it's gonna be a little bit

00:01:46.939 --> 00:01:49.259
<v Speaker 0>of fun and a little bit of well

00:01:49.259 --> 00:01:50.539
<v Speaker 0>what the hell are we doing but we're

00:01:50.539 --> 00:01:53.020
<v Speaker 0>working out. So let's introduce my guests for

00:01:53.020 --> 00:01:55.420
<v Speaker 0>today. I am joined by Alex Bowers and

00:01:55.420 --> 00:01:56.860
<v Speaker 0>Kieran McNulty. Hello.

00:01:57.845 --> 00:01:58.645
<v Speaker 1>Hi. Thank

00:02:00.085 --> 00:02:02.085
<v Speaker 0>you for joining me again today.

00:02:03.205 --> 00:02:06.805
<v Speaker 0>We'll, as always, we'll just quickly do introductions

00:02:06.805 --> 00:02:08.405
<v Speaker 0>and feel free to use as little or

00:02:08.405 --> 00:02:10.084
<v Speaker 0>as much time as you want starting with

00:02:10.084 --> 00:02:10.645
<v Speaker 0>Alex.

00:02:12.660 --> 00:02:16.020
<v Speaker 1>Yeah. I'm just a Laravel developer, I've known

00:02:16.020 --> 00:02:18.020
<v Speaker 1>David for a few couple of years now,

00:02:18.020 --> 00:02:19.620
<v Speaker 1>but very we see each of a once

00:02:19.620 --> 00:02:21.300
<v Speaker 1>a year and I keep asking about Kubernetes

00:02:21.300 --> 00:02:22.900
<v Speaker 1>and eventually we might start doing some of

00:02:22.900 --> 00:02:24.420
<v Speaker 1>these videos and here we are.

00:02:26.775 --> 00:02:28.375
<v Speaker 0>K. I'll turn in.

00:02:31.575 --> 00:02:33.415
<v Speaker 2>You hear me? Yeah. Yeah. Yeah. Good. We're

00:02:33.415 --> 00:02:36.855
<v Speaker 1>all good. Hi. I'm Kieran. I'm a consultant.

00:02:38.135 --> 00:02:40.060
<v Speaker 2>My background's in development, but I do a

00:02:40.060 --> 00:02:42.459
<v Speaker 2>lot of coaching around agile and testing. And

00:02:42.459 --> 00:02:43.020
<v Speaker 2>the

00:02:43.500 --> 00:02:45.020
<v Speaker 2>actual deployment bit is

00:02:45.420 --> 00:02:46.860
<v Speaker 2>nice to be involved in because it's a

00:02:46.860 --> 00:02:48.620
<v Speaker 2>little bit outside my comfort zone.

00:02:50.060 --> 00:02:52.140
<v Speaker 0>Yeah. I think today What else?

00:02:53.335 --> 00:02:56.215
<v Speaker 0>Yeah, today is definitely an episode of fun

00:02:56.215 --> 00:02:58.775
<v Speaker 0>discovery as we try and tackle the scaling

00:02:58.775 --> 00:03:01.095
<v Speaker 0>aspects of running any, I guess any application

00:03:01.095 --> 00:03:03.735
<v Speaker 0>on Kubernetes. This is obviously specific to PHP

00:03:03.735 --> 00:03:05.735
<v Speaker 0>and Laravel today but the same

00:03:06.215 --> 00:03:07.910
<v Speaker 0>stuff that we're gonna do the same concepts

00:03:07.910 --> 00:03:10.710
<v Speaker 0>will work across everything and already now we

00:03:10.710 --> 00:03:12.310
<v Speaker 0>can see their first message and then discuss

00:03:12.310 --> 00:03:12.950
<v Speaker 0>channel,

00:03:13.190 --> 00:03:15.110
<v Speaker 0>discord have a bug in their stream overlay

00:03:15.110 --> 00:03:16.310
<v Speaker 0>which means all the

00:03:16.790 --> 00:03:19.430
<v Speaker 0>names of people are object objects. So that's

00:03:19.430 --> 00:03:21.385
<v Speaker 0>awesome. Was that you Alex or was that

00:03:21.385 --> 00:03:24.265
<v Speaker 0>someone else? Somebody else, somebody called John I

00:03:24.265 --> 00:03:26.905
<v Speaker 1>believe. I'll keep the chat open.

00:03:28.105 --> 00:03:28.665
<v Speaker 1>Hey

00:03:30.265 --> 00:03:30.825
<v Speaker 0>It

00:03:31.864 --> 00:03:32.985
<v Speaker 0>would be good if I could see your

00:03:32.985 --> 00:03:35.305
<v Speaker 0>name but I'll reach out to Discord and

00:03:35.305 --> 00:03:37.020
<v Speaker 0>see if we get that fixed. Regardless, we're

00:03:37.020 --> 00:03:39.660
<v Speaker 0>testing out the discuss live chat thingy on

00:03:39.660 --> 00:03:41.020
<v Speaker 0>our stream, we'll see how we get on,

00:03:41.020 --> 00:03:43.020
<v Speaker 0>I may move it at some point and

00:03:43.020 --> 00:03:44.620
<v Speaker 0>of course if you're watching on YouTube, please

00:03:44.620 --> 00:03:46.060
<v Speaker 0>feel free to drop any questions that you

00:03:46.060 --> 00:03:48.300
<v Speaker 0>have into the comment section and we will

00:03:48.300 --> 00:03:49.340
<v Speaker 0>tackle them as we go.

00:03:50.625 --> 00:03:52.705
<v Speaker 0>Now, why don't we try and recap where

00:03:52.705 --> 00:03:54.705
<v Speaker 0>we got to last time and then maybe

00:03:54.705 --> 00:03:57.185
<v Speaker 0>best to do that through the power of

00:03:57.185 --> 00:03:58.705
<v Speaker 0>code because

00:03:59.425 --> 00:04:01.345
<v Speaker 0>we I think we got quite far, didn't

00:04:01.345 --> 00:04:02.065
<v Speaker 0>we Alex?

00:04:03.105 --> 00:04:04.465
<v Speaker 1>Yeah, we got very

00:04:05.825 --> 00:04:08.200
<v Speaker 1>like a good amount was done. We had

00:04:11.000 --> 00:04:12.599
<v Speaker 1>at the end of it, we had migrations

00:04:12.599 --> 00:04:14.120
<v Speaker 1>working. We had

00:04:14.519 --> 00:04:16.919
<v Speaker 1>queues set up and running through.

00:04:19.595 --> 00:04:21.035
<v Speaker 1>Those were the two main things. There was

00:04:21.035 --> 00:04:21.995
<v Speaker 1>a couple of the things that we managed

00:04:21.995 --> 00:04:23.355
<v Speaker 1>to cover as well, but can't remember what

00:04:23.355 --> 00:04:24.155
<v Speaker 1>they are now.

00:04:25.115 --> 00:04:26.555
<v Speaker 1>But, yeah, we made some good progress on

00:04:26.555 --> 00:04:28.555
<v Speaker 1>a production level application last

00:04:28.715 --> 00:04:29.675
<v Speaker 1>last time.

00:04:30.635 --> 00:04:33.440
<v Speaker 0>Well, let's see what's still working because who

00:04:33.920 --> 00:04:34.560
<v Speaker 0>knows?

00:04:35.200 --> 00:04:36.080
<v Speaker 0>Let's

00:04:36.080 --> 00:04:38.880
<v Speaker 0>see what did where did I put everything?

00:04:39.840 --> 00:04:42.400
<v Speaker 1>All of the all of the roots are

00:04:42.640 --> 00:04:44.560
<v Speaker 1>all of the features that we built last

00:04:44.560 --> 00:04:46.480
<v Speaker 1>time are in the roots folder. So we

00:04:46.480 --> 00:04:47.760
<v Speaker 1>can see that to see what we covered.

00:04:49.255 --> 00:04:51.175
<v Speaker 0>And so where where did we put the

00:04:51.175 --> 00:04:52.215
<v Speaker 0>manifests?

00:04:53.414 --> 00:04:55.014
<v Speaker 1>Oh, it was inside of slash

00:04:55.335 --> 00:04:56.615
<v Speaker 1>resources ops.

00:04:56.854 --> 00:04:59.095
<v Speaker 0>Oh, yeah. Hey, I'm looking for my my

00:04:59.095 --> 00:05:02.160
<v Speaker 0>OPT directory, but there we go. So we've

00:05:02.160 --> 00:05:04.000
<v Speaker 0>got our Docker files. We've got a config

00:05:04.000 --> 00:05:05.360
<v Speaker 0>map. We have a deployment.

00:05:05.680 --> 00:05:06.400
<v Speaker 0>We actually

00:05:06.800 --> 00:05:09.440
<v Speaker 0>have our cron job which was to run.

00:05:10.640 --> 00:05:11.760
<v Speaker 0>What was this for?

00:05:12.080 --> 00:05:15.600
<v Speaker 1>So Rawkode has a job scheduler built in.

00:05:15.600 --> 00:05:17.440
<v Speaker 1>So for every minute it can you can

00:05:18.295 --> 00:05:20.135
<v Speaker 1>the scheduler gets called, and you from there,

00:05:20.135 --> 00:05:22.535
<v Speaker 1>can dispatch different jobs in PHP for whatever

00:05:22.535 --> 00:05:24.935
<v Speaker 1>you need to do. Alright. So you can

00:05:24.935 --> 00:05:27.495
<v Speaker 1>see the example for that in

00:05:28.695 --> 00:05:30.055
<v Speaker 1>app console

00:05:31.460 --> 00:05:34.180
<v Speaker 1>kernel, I think it is. Does Laravel have

00:05:34.180 --> 00:05:34.980
<v Speaker 2>a way of

00:05:35.860 --> 00:05:38.260
<v Speaker 2>instead scheduling them directly,

00:05:38.740 --> 00:05:40.820
<v Speaker 2>scheduling the jobs directly from Chrome?

00:05:41.460 --> 00:05:43.220
<v Speaker 1>Yes. So every

00:05:43.460 --> 00:05:43.940
<v Speaker 1>single

00:05:45.245 --> 00:05:47.245
<v Speaker 1>command that you create in Laravel,

00:05:47.245 --> 00:05:49.405
<v Speaker 1>you can just hit using, like, PHP artisan

00:05:49.405 --> 00:05:51.005
<v Speaker 1>command name. Right. Right. And you could do

00:05:51.005 --> 00:05:52.764
<v Speaker 1>that directly from the cron. But if you

00:05:52.764 --> 00:05:54.445
<v Speaker 1>want to, for example,

00:05:54.925 --> 00:05:56.845
<v Speaker 1>add conditional logic, so you do a database

00:05:56.845 --> 00:05:57.565
<v Speaker 1>query

00:05:57.690 --> 00:05:59.690
<v Speaker 1>to see Yeah. Do do you need to

00:05:59.690 --> 00:06:00.730
<v Speaker 1>care about running this?

00:06:01.370 --> 00:06:03.450
<v Speaker 1>Yeah. You you do that in the the

00:06:03.450 --> 00:06:05.370
<v Speaker 1>kernel the console kernel.

00:06:06.090 --> 00:06:08.250
<v Speaker 0>Yeah. Yeah. And it also has some nice

00:06:08.250 --> 00:06:09.450
<v Speaker 1>syntax structure

00:06:09.944 --> 00:06:11.225
<v Speaker 1>where you can do like,

00:06:11.625 --> 00:06:13.145
<v Speaker 1>you can use the words like every evening

00:06:13.145 --> 00:06:15.305
<v Speaker 1>rather than trying to figure out what random

00:06:15.305 --> 00:06:17.065
<v Speaker 1>stars and commas and numbers mean.

00:06:17.865 --> 00:06:18.505
<v Speaker 0>Yeah.

00:06:18.985 --> 00:06:19.625
<v Speaker 0>Okay.

00:06:19.944 --> 00:06:21.544
<v Speaker 0>Cool. I think I'm all caught up which

00:06:21.544 --> 00:06:22.600
<v Speaker 0>is useful.

00:06:22.840 --> 00:06:24.440
<v Speaker 0>I also see that I need to make

00:06:24.440 --> 00:06:26.600
<v Speaker 0>file which has two commands for both in

00:06:26.600 --> 00:06:28.280
<v Speaker 0>these containers. So why don't we get them

00:06:28.280 --> 00:06:31.320
<v Speaker 0>built? Let's apply our Kubernetes manifest directory and

00:06:31.320 --> 00:06:33.560
<v Speaker 0>see if anything blows up. Hopefully we just

00:06:33.560 --> 00:06:34.935
<v Speaker 0>get our application working

00:06:35.335 --> 00:06:37.094
<v Speaker 0>and then we can start getting some metrics

00:06:37.094 --> 00:06:37.975
<v Speaker 0>out of it.

00:06:38.375 --> 00:06:40.134
<v Speaker 1>It was left in a working state so

00:06:40.134 --> 00:06:40.455
<v Speaker 1>I'd be

00:06:41.574 --> 00:06:43.254
<v Speaker 1>I'd be upset if it breaks in the

00:06:43.254 --> 00:06:43.895
<v Speaker 1>two weeks Yeah.

00:06:45.895 --> 00:06:47.495
<v Speaker 0>Build NGINX

00:06:47.760 --> 00:06:49.040
<v Speaker 0>and build

00:06:49.120 --> 00:06:50.160
<v Speaker 0>FBM.

00:06:52.560 --> 00:06:54.800
<v Speaker 0>Smarter person would have done this prior, but

00:06:54.800 --> 00:06:55.120
<v Speaker 0>still.

00:07:01.465 --> 00:07:03.465
<v Speaker 0>I'm sure it won't take too long though.

00:07:03.465 --> 00:07:05.544
<v Speaker 0>Although, whenever I see an NPM command, I

00:07:05.544 --> 00:07:06.825
<v Speaker 0>do get slightly worried.

00:07:08.745 --> 00:07:10.585
<v Speaker 1>NPM CI, so it's not it shouldn't be

00:07:10.585 --> 00:07:12.585
<v Speaker 1>doing as much as a normal install would

00:07:12.585 --> 00:07:14.905
<v Speaker 1>be because it uses lock file to

00:07:15.544 --> 00:07:17.100
<v Speaker 1>have specific version. So you shouldn't have to

00:07:17.100 --> 00:07:19.260
<v Speaker 1>do any dependency resolution I don't think.

00:07:19.900 --> 00:07:21.660
<v Speaker 0>Alright. Well, we'll get these Well, I'm saying

00:07:21.660 --> 00:07:23.740
<v Speaker 1>that we're we are thirty seconds in so,

00:07:23.740 --> 00:07:24.220
<v Speaker 1>know,

00:07:25.580 --> 00:07:27.420
<v Speaker 1>take what you want from that I guess.

00:07:27.900 --> 00:07:30.300
<v Speaker 0>Well, my Mac has an airplane mode where

00:07:30.300 --> 00:07:32.824
<v Speaker 0>it's trying to take off. So we'll see.

00:07:32.824 --> 00:07:34.425
<v Speaker 0>I can hear the fans over the headphones

00:07:34.425 --> 00:07:35.945
<v Speaker 0>which is never a good sign.

00:07:36.505 --> 00:07:38.905
<v Speaker 2>That's the sign that using node, isn't it?

00:07:39.224 --> 00:07:42.264
<v Speaker 0>Well, I wondered with your shiny M1 Mac,

00:07:42.264 --> 00:07:43.945
<v Speaker 0>Keenan, do your fans ever go?

00:07:44.585 --> 00:07:46.090
<v Speaker 0>I heard as much better.

00:07:46.890 --> 00:07:48.010
<v Speaker 2>I've had it.

00:07:49.130 --> 00:07:50.890
<v Speaker 2>Oh god, when did I buy it? I've

00:07:50.890 --> 00:07:53.530
<v Speaker 2>had a couple of months and I've heard

00:07:53.530 --> 00:07:54.650
<v Speaker 2>the fans once.

00:07:54.810 --> 00:07:55.530
<v Speaker 0>Wow.

00:07:56.410 --> 00:07:58.650
<v Speaker 1>They sell one without fans only now as

00:07:58.650 --> 00:07:59.050
<v Speaker 1>well so.

00:07:59.615 --> 00:08:01.055
<v Speaker 2>Yeah. The edge is That's brave when I

00:08:01.055 --> 00:08:02.815
<v Speaker 1>can do in any node stuff. That's brave.

00:08:07.695 --> 00:08:09.695
<v Speaker 0>Alright. Here we go. It looks like it's

00:08:09.695 --> 00:08:11.615
<v Speaker 0>now finishing at least one of our images.

00:08:13.440 --> 00:08:14.400
<v Speaker 1>Left I

00:08:18.319 --> 00:08:21.039
<v Speaker 2>left some CAD software running overnight, and that's

00:08:21.039 --> 00:08:22.320
<v Speaker 2>when the fans ran.

00:08:23.599 --> 00:08:25.680
<v Speaker 2>That's

00:08:25.680 --> 00:08:26.240
<v Speaker 2>the only time.

00:08:27.775 --> 00:08:28.895
<v Speaker 2>Hopefully,

00:08:31.775 --> 00:08:33.054
<v Speaker 0>they bring out another one. I'll buy the

00:08:33.054 --> 00:08:35.054
<v Speaker 0>second version, but I'm not buying the first.

00:08:35.534 --> 00:08:37.294
<v Speaker 2>Yeah. They'll bring out an amazing one at

00:08:37.294 --> 00:08:38.735
<v Speaker 2>the of the year and I'll be jealous.

00:08:39.294 --> 00:08:41.054
<v Speaker 1>Yeah. Well, I'm I'm getting a new one.

00:08:42.910 --> 00:08:43.870
<v Speaker 1>Oh god.

00:08:44.110 --> 00:08:46.430
<v Speaker 1>Next month in March. Sometime in March or

00:08:46.430 --> 00:08:47.790
<v Speaker 1>April. Alright.

00:08:48.270 --> 00:08:50.190
<v Speaker 1>So without doubt, it'll be about May or

00:08:50.190 --> 00:08:51.550
<v Speaker 1>June when the next one comes out, just

00:08:51.550 --> 00:08:52.990
<v Speaker 1>as mine's been delivered.

00:08:53.310 --> 00:08:54.990
<v Speaker 1>So, yeah. We'll see.

00:08:55.550 --> 00:08:57.150
<v Speaker 2>If you need to use it to do

00:08:57.150 --> 00:08:58.875
<v Speaker 2>docker stuff day to day, it's still not

00:08:58.875 --> 00:08:59.835
<v Speaker 2>quite there.

00:09:01.275 --> 00:09:02.875
<v Speaker 1>We don't use docker in the company at

00:09:02.875 --> 00:09:06.075
<v Speaker 1>the moment. We're moving towards that. So hopefully,

00:09:06.075 --> 00:09:07.355
<v Speaker 1>by the time we get that new environment

00:09:07.355 --> 00:09:08.555
<v Speaker 1>set up and stuff,

00:09:10.635 --> 00:09:11.835
<v Speaker 1>it's a bit more stable.

00:09:14.430 --> 00:09:16.350
<v Speaker 0>Our compelling extensions.

00:09:18.189 --> 00:09:19.709
<v Speaker 0>I may go get a coffee.

00:09:23.230 --> 00:09:25.310
<v Speaker 1>Do you clear up your Docker cache quite

00:09:25.310 --> 00:09:26.509
<v Speaker 1>often or something, David?

00:09:27.635 --> 00:09:29.795
<v Speaker 0>Yeah. Every thirteen seconds probably.

00:09:31.395 --> 00:09:33.315
<v Speaker 0>I'm always well because I always go into

00:09:33.315 --> 00:09:35.715
<v Speaker 0>my Docker settings and just click reset everything

00:09:35.715 --> 00:09:37.075
<v Speaker 0>and just kill it.

00:09:37.875 --> 00:09:39.555
<v Speaker 0>I do that far too often. I do

00:09:39.555 --> 00:09:40.595
<v Speaker 0>it my phone too.

00:09:40.835 --> 00:09:42.470
<v Speaker 0>Like when I was on Android I would

00:09:42.470 --> 00:09:44.390
<v Speaker 0>clear all when I'm on the task manager.

00:09:44.390 --> 00:09:45.990
<v Speaker 0>Now I'm on iOS there's no clear all

00:09:45.990 --> 00:09:47.590
<v Speaker 0>button but I just keep swiping apps away

00:09:47.590 --> 00:09:49.190
<v Speaker 0>anyway and people keep telling me that's actually

00:09:49.190 --> 00:09:49.750
<v Speaker 0>bad

00:09:50.310 --> 00:09:52.070
<v Speaker 0>but it's just I guess habit more than

00:09:52.070 --> 00:09:52.790
<v Speaker 0>anything.

00:09:53.830 --> 00:09:55.430
<v Speaker 2>Yeah. It's meant to use more power to

00:09:55.430 --> 00:09:57.285
<v Speaker 2>start the app back up again, isn't it?

00:09:58.404 --> 00:10:00.884
<v Speaker 0>I know it's just something I've always done.

00:10:00.884 --> 00:10:02.725
<v Speaker 0>Not using it, close it. Not using it,

00:10:02.725 --> 00:10:03.524
<v Speaker 0>close it.

00:10:05.524 --> 00:10:07.444
<v Speaker 0>And I do it with Docker too. I'm

00:10:07.444 --> 00:10:08.964
<v Speaker 0>always killing containers and images.

00:10:11.240 --> 00:10:12.760
<v Speaker 2>I think I'm the opposite. I I usually

00:10:12.760 --> 00:10:15.000
<v Speaker 2>at some point noticed my machine's running really

00:10:15.000 --> 00:10:16.520
<v Speaker 2>slowly and has no disk.

00:10:18.280 --> 00:10:20.920
<v Speaker 2>And do Docker years. I'm

00:10:19.320 --> 00:10:23.000
<v Speaker 1>rocking about 20 gig of disk space left.

00:10:23.705 --> 00:10:25.385
<v Speaker 1>I'm slowly just like working my way through

00:10:25.385 --> 00:10:27.385
<v Speaker 1>various things clear and stuff out. I don't

00:10:27.385 --> 00:10:29.145
<v Speaker 0>even think I use 20 gig.

00:10:31.785 --> 00:10:32.745
<v Speaker 1>It's painful.

00:10:33.705 --> 00:10:35.625
<v Speaker 0>I can't have any icons on my desktop

00:10:35.625 --> 00:10:37.625
<v Speaker 0>either. I can't have any downloads in the

00:10:37.625 --> 00:10:40.880
<v Speaker 0>downloads folder. I just clean everything up really

00:10:40.880 --> 00:10:41.440
<v Speaker 0>quickly.

00:10:43.360 --> 00:10:45.760
<v Speaker 1>It's probably better that way then the alternative

00:10:45.760 --> 00:10:48.480
<v Speaker 1>which is I have just my downloads folders

00:10:48.480 --> 00:10:49.920
<v Speaker 1>everything I've ever downloaded.

00:10:51.680 --> 00:10:52.560
<v Speaker 1>Useful or not.

00:10:55.885 --> 00:10:57.005
<v Speaker 0>Alright. There we go. And

00:10:58.845 --> 00:11:01.165
<v Speaker 0>I'm sure everyone's really disappointed because they were

00:11:01.165 --> 00:11:03.165
<v Speaker 0>loving that conversation where I was talking about

00:11:03.165 --> 00:11:05.005
<v Speaker 0>files on my desktop. But

00:11:07.325 --> 00:11:09.005
<v Speaker 0>at least I've got my command history and

00:11:09.005 --> 00:11:11.540
<v Speaker 0>history so that's full. So we're gonna do

00:11:11.540 --> 00:11:13.620
<v Speaker 0>a kip control apply or don't wanna do

00:11:13.620 --> 00:11:14.660
<v Speaker 0>everything.

00:11:14.660 --> 00:11:16.180
<v Speaker 0>I'm assuming we built it in a way

00:11:16.180 --> 00:11:17.780
<v Speaker 0>that that should be alright.

00:11:18.660 --> 00:11:19.860
<v Speaker 0>Looks good.

00:11:22.900 --> 00:11:24.100
<v Speaker 0>Wow, this is gonna work.

00:11:26.265 --> 00:11:28.024
<v Speaker 0>Alright. And that containers are It's not like

00:11:28.024 --> 00:11:29.065
<v Speaker 1>you had no thing.

00:11:30.585 --> 00:11:32.825
<v Speaker 0>Yeah. That that and it's gonna fix itself.

00:11:32.825 --> 00:11:34.185
<v Speaker 0>I think that's just my SQL and the

00:11:34.185 --> 00:11:36.505
<v Speaker 0>Ruby's not happy yet. I'm hoping.

00:11:41.240 --> 00:11:43.320
<v Speaker 2>Is this local Kubernetes?

00:11:43.640 --> 00:11:45.480
<v Speaker 0>It is local Kubernetes.

00:11:45.480 --> 00:11:45.880
<v Speaker 0>Yeah.

00:11:46.839 --> 00:11:48.360
<v Speaker 0>Alright. Let's take a look at one of

00:11:48.360 --> 00:11:50.520
<v Speaker 0>these. Well, the last one says initializing.

00:11:50.920 --> 00:11:52.520
<v Speaker 0>Let's try it. I'll look one more time.

00:11:53.625 --> 00:11:54.905
<v Speaker 0>There we go. Perfect.

00:11:55.225 --> 00:11:56.105
<v Speaker 0>Nice.

00:11:56.745 --> 00:11:57.865
<v Speaker 0>Okay.

00:11:57.865 --> 00:11:58.425
<v Speaker 0>So

00:11:59.385 --> 00:12:01.945
<v Speaker 0>now we've got I'm assuming a service.

00:12:02.105 --> 00:12:03.545
<v Speaker 0>Let's port forward

00:12:04.665 --> 00:12:05.545
<v Speaker 0>SVC.

00:12:05.545 --> 00:12:08.105
<v Speaker 0>Oh, we didn't create a Laravel service. Okay.

00:12:08.105 --> 00:12:10.000
<v Speaker 0>So we'll just port forward to a pod.

00:12:13.040 --> 00:12:15.120
<v Speaker 0>Eighty eighty on port 80.

00:12:16.080 --> 00:12:18.320
<v Speaker 0>We should just have our application.

00:12:22.480 --> 00:12:24.400
<v Speaker 0>Maybe I'll hide that. Yep. That was exactly

00:12:24.400 --> 00:12:25.815
<v Speaker 1>what I built. Yep.

00:12:26.535 --> 00:12:28.295
<v Speaker 0>Alright. This should be read.

00:12:28.935 --> 00:12:31.415
<v Speaker 0>Not gonna make us a million dollars by

00:12:31.415 --> 00:12:33.574
<v Speaker 0>any means but functional for today.

00:12:35.254 --> 00:12:37.415
<v Speaker 0>So what we wanna do now is well,

00:12:37.975 --> 00:12:39.495
<v Speaker 0>we don't really want to

00:12:41.190 --> 00:12:42.870
<v Speaker 0>you know, we talk about all scale, normally

00:12:42.870 --> 00:12:44.390
<v Speaker 0>we talk about scaling up but I wanna

00:12:44.390 --> 00:12:45.830
<v Speaker 0>equally emphasize that we wanna be able to

00:12:45.830 --> 00:12:47.750
<v Speaker 0>scale down when required too. So right now

00:12:47.750 --> 00:12:49.910
<v Speaker 0>we are running five replicas

00:12:50.230 --> 00:12:53.350
<v Speaker 0>of our Laravel application and I'm the only

00:12:53.350 --> 00:12:55.990
<v Speaker 0>user. So maybe this is slightly overkill.

00:12:55.990 --> 00:12:58.265
<v Speaker 0>So what we wanna do

00:12:59.305 --> 00:13:01.785
<v Speaker 0>is scale this up and down accordingly.

00:13:01.785 --> 00:13:02.505
<v Speaker 0>That

00:13:03.145 --> 00:13:05.385
<v Speaker 0>makes sense? Mhmm. Mhmm.

00:13:06.265 --> 00:13:07.705
<v Speaker 0>Okay. How do we do it?

00:13:12.740 --> 00:13:14.900
<v Speaker 1>Okay. Yeah. Good good first question, Alan.

00:13:15.380 --> 00:13:16.899
<v Speaker 0>Okay. So why don't we start with a

00:13:16.899 --> 00:13:17.940
<v Speaker 0>naive approach?

00:13:19.140 --> 00:13:20.740
<v Speaker 0>Right. No. No. Let's let's go back to

00:13:20.740 --> 00:13:23.145
<v Speaker 0>that question. Like, what what do we think

00:13:23.145 --> 00:13:25.465
<v Speaker 0>we want from auto scaling? When when do

00:13:25.465 --> 00:13:26.905
<v Speaker 0>we scale up? What's the best way to

00:13:26.905 --> 00:13:27.545
<v Speaker 0>scale up?

00:13:27.865 --> 00:13:29.865
<v Speaker 2>When there aren't enough resources

00:13:30.025 --> 00:13:32.745
<v Speaker 2>at the current scale level for what we're

00:13:32.745 --> 00:13:33.465
<v Speaker 2>trying to do.

00:13:34.505 --> 00:13:36.585
<v Speaker 0>Yeah. I like the like the usage of

00:13:36.585 --> 00:13:38.745
<v Speaker 0>resources there. Definitely something that we can use

00:13:38.745 --> 00:13:40.800
<v Speaker 0>to determine whether we we scale up.

00:13:41.760 --> 00:13:42.320
<v Speaker 0>Yes.

00:13:43.040 --> 00:13:45.200
<v Speaker 2>Or when performance isn't good enough at the

00:13:45.200 --> 00:13:46.320
<v Speaker 2>current scale level?

00:13:46.640 --> 00:13:48.320
<v Speaker 0>Yes. So you know we're getting into the

00:13:48.320 --> 00:13:50.560
<v Speaker 0>conversation that like like when we talk about

00:13:50.640 --> 00:13:52.720
<v Speaker 0>what how is how is the application performing

00:13:52.720 --> 00:13:53.600
<v Speaker 0>for our end users?

00:13:54.285 --> 00:13:57.325
<v Speaker 0>So when I say naive auto scaling, resources

00:13:57.325 --> 00:13:59.805
<v Speaker 0>is normally the first approach people say well,

00:13:59.805 --> 00:14:01.165
<v Speaker 0>you know if I'm running out of CPU

00:14:01.165 --> 00:14:02.845
<v Speaker 0>or memory then we probably want to be

00:14:02.845 --> 00:14:04.685
<v Speaker 0>able to scale accordingly because we think that

00:14:04.685 --> 00:14:06.685
<v Speaker 0>we think the performance will be

00:14:07.005 --> 00:14:08.420
<v Speaker 0>degraded in some way,

00:14:08.980 --> 00:14:10.740
<v Speaker 0>but I like to work with end users.

00:14:10.740 --> 00:14:12.580
<v Speaker 0>So we're gonna try and tackle both I

00:14:12.580 --> 00:14:13.300
<v Speaker 0>think

00:14:14.900 --> 00:14:15.620
<v Speaker 0>because

00:14:18.980 --> 00:14:20.900
<v Speaker 0>maybe. Okay, let's scale it down. Let's see

00:14:20.900 --> 00:14:21.380
<v Speaker 0>what happens.

00:14:22.175 --> 00:14:24.735
<v Speaker 0>Does anybody know any HTTP load testing tools?

00:14:24.735 --> 00:14:26.495
<v Speaker 0>I probably should have asked that. I use

00:14:26.495 --> 00:14:27.695
<v Speaker 1>one called siege.

00:14:27.855 --> 00:14:30.654
<v Speaker 0>Siege. Is that the patchy one, isn't it?

00:14:30.975 --> 00:14:33.774
<v Speaker 0>Maybe. No. It's that's just a patchy bench.

00:14:33.710 --> 00:14:35.950
<v Speaker 1>One I use is let me find it.

00:14:36.990 --> 00:14:37.950
<v Speaker 0>Otherwise,

00:14:37.950 --> 00:14:39.070
<v Speaker 0>I'm just gonna go to Google and search

00:14:39.070 --> 00:14:40.030
<v Speaker 0>for Rust.

00:14:41.790 --> 00:14:42.270
<v Speaker 1>This is

00:14:42.830 --> 00:14:44.350
<v Speaker 1>what I use to just it's by something

00:14:44.350 --> 00:14:45.630
<v Speaker 1>called Joe dog siege.

00:14:46.275 --> 00:14:47.155
<v Speaker 1>Okay.

00:14:47.315 --> 00:14:49.875
<v Speaker 1>I'll I'll post it in the discord.

00:14:52.195 --> 00:14:54.035
<v Speaker 0>Why my alt tab not working to my

00:14:54.035 --> 00:14:56.435
<v Speaker 0>terminal? Did it goes to Versus Code?

00:14:58.515 --> 00:15:00.435
<v Speaker 0>I'll restart that in a minute. Alright. Let's

00:15:00.435 --> 00:15:01.795
<v Speaker 0>reapply this over the top

00:15:02.290 --> 00:15:04.130
<v Speaker 0>and that should scale down.

00:15:04.850 --> 00:15:06.770
<v Speaker 0>Good. So now we're just gonna run one.

00:15:08.210 --> 00:15:10.850
<v Speaker 0>I guess I'm not even sure, this is

00:15:10.850 --> 00:15:12.690
<v Speaker 0>where my Laravel knowledge will probably let me

00:15:12.690 --> 00:15:14.610
<v Speaker 0>down with the first kind of scaling scenario

00:15:14.610 --> 00:15:15.330
<v Speaker 0>but you know,

00:15:16.295 --> 00:15:19.335
<v Speaker 0>if I throw siege at our application which

00:15:19.335 --> 00:15:20.935
<v Speaker 0>is running on a single pod inside of

00:15:20.935 --> 00:15:22.455
<v Speaker 0>a local Kubernetes cluster

00:15:22.775 --> 00:15:24.615
<v Speaker 0>and had it with 10,000 requests, am I

00:15:24.615 --> 00:15:27.255
<v Speaker 0>likely to see CPU and memory usage increase?

00:15:29.840 --> 00:15:32.160
<v Speaker 1>Probably not massively. It depends on how many

00:15:32.160 --> 00:15:34.000
<v Speaker 1>concurrent requests, I guess, and what the v

00:15:34.000 --> 00:15:36.640
<v Speaker 1>plus allocation is. But obviously, our home page

00:15:36.640 --> 00:15:38.640
<v Speaker 1>there is literally just returning the string hello

00:15:38.640 --> 00:15:39.200
<v Speaker 1>world.

00:15:40.000 --> 00:15:41.920
<v Speaker 1>Maybe we change the code to make it,

00:15:41.920 --> 00:15:43.965
<v Speaker 1>I don't know, like calculate an m d

00:15:43.965 --> 00:15:46.445
<v Speaker 1>five ten thousand times. It's just something so

00:15:46.445 --> 00:15:47.965
<v Speaker 1>it actually does some work. It might be

00:15:47.965 --> 00:15:48.765
<v Speaker 1>worth doing.

00:15:49.645 --> 00:15:51.085
<v Speaker 2>Yeah. Do we do we want it to

00:15:51.085 --> 00:15:52.125
<v Speaker 2>create database

00:15:52.605 --> 00:15:53.565
<v Speaker 2>load as well?

00:15:54.685 --> 00:15:56.845
<v Speaker 2>Maybe. I don't believe there's there's no models

00:15:56.845 --> 00:15:58.580
<v Speaker 1>or anything set up on this. Oh, actually,

00:15:58.580 --> 00:16:00.100
<v Speaker 1>no. There was. There were models.

00:16:00.740 --> 00:16:03.140
<v Speaker 1>Yay. Yeah. Because we created some post blog

00:16:03.140 --> 00:16:04.180
<v Speaker 1>posts, didn't we?

00:16:04.740 --> 00:16:05.380
<v Speaker 1>Yeah.

00:16:05.540 --> 00:16:07.620
<v Speaker 1>Yeah. We can look at the data upload.

00:16:08.820 --> 00:16:10.100
<v Speaker 1>If you open up the

00:16:10.740 --> 00:16:12.420
<v Speaker 0>I can't. The blog post forward. I can't.

00:16:13.574 --> 00:16:15.894
<v Speaker 1>If you open up the roots file, the

00:16:15.894 --> 00:16:17.815
<v Speaker 1>roots web PHP file, that's got all of

00:16:17.815 --> 00:16:19.495
<v Speaker 1>the endpoints that I created in there.

00:16:24.055 --> 00:16:25.175
<v Speaker 0>Yeah. There we go.

00:16:25.574 --> 00:16:27.529
<v Speaker 0>We do have stuff in the database.

00:16:28.329 --> 00:16:31.850
<v Speaker 0>Alright. You sent me this geodog slash siege.

00:16:34.410 --> 00:16:36.410
<v Speaker 0>Is there a brew package for it?

00:16:37.370 --> 00:16:38.570
<v Speaker 1>Yeah. Believe so.

00:16:39.449 --> 00:16:41.130
<v Speaker 0>Yeah. Okay. Cool. Let's see if we can

00:16:41.130 --> 00:16:42.835
<v Speaker 0>run that and let's just model. You know,

00:16:42.835 --> 00:16:44.995
<v Speaker 0>we're just gonna in a very simple basis,

00:16:44.995 --> 00:16:47.715
<v Speaker 0>look at the CPU and memory utilization and

00:16:47.715 --> 00:16:49.154
<v Speaker 0>then we'll see if we can cause a

00:16:49.154 --> 00:16:51.155
<v Speaker 0>very naive scaling situation.

00:16:53.955 --> 00:16:56.915
<v Speaker 0>Again, more stuff I should have done up

00:16:55.860 --> 00:16:57.380
<v Speaker 0>front, but yeah.

00:17:00.180 --> 00:17:02.100
<v Speaker 2>If you if you have it loading stuff

00:17:02.100 --> 00:17:04.579
<v Speaker 2>from the database, PHP will perform badly

00:17:05.220 --> 00:17:07.380
<v Speaker 2>because it will block

00:17:08.775 --> 00:17:11.095
<v Speaker 2>waiting for the responses, which ties up processes.

00:17:11.095 --> 00:17:12.535
<v Speaker 2>So that that will kill the sort of

00:17:12.535 --> 00:17:13.575
<v Speaker 2>concurrency.

00:17:14.935 --> 00:17:16.375
<v Speaker 2>It's alright. It's better than it used to

00:17:16.375 --> 00:17:16.855
<v Speaker 2>be.

00:17:17.974 --> 00:17:19.494
<v Speaker 1>Yeah. Can you remember what we put this

00:17:19.494 --> 00:17:20.775
<v Speaker 1>on? Was it 7.4

00:17:20.775 --> 00:17:22.135
<v Speaker 1>or eight point zero

00:17:23.160 --> 00:17:24.119
<v Speaker 1>PHP?

00:17:24.200 --> 00:17:24.839
<v Speaker 1>I

00:17:27.000 --> 00:17:27.800
<v Speaker 0>don't know.

00:17:28.360 --> 00:17:29.960
<v Speaker 1>Actually, I can check the Docker file, can't

00:17:29.960 --> 00:17:31.720
<v Speaker 1>I? Yeah. Yeah. Resources

00:17:32.200 --> 00:17:33.080
<v Speaker 0>ops,

00:17:33.160 --> 00:17:34.040
<v Speaker 0>Docker,

00:17:34.120 --> 00:17:35.160
<v Speaker 0>FBM,

00:17:37.000 --> 00:17:38.214
<v Speaker 0>7.4.

00:17:38.934 --> 00:17:39.494
<v Speaker 1>Yeah.

00:17:40.135 --> 00:17:41.654
<v Speaker 1>Quite a lot of improvements were made in

00:17:41.654 --> 00:17:42.695
<v Speaker 1>eight point zero.

00:17:43.975 --> 00:17:44.614
<v Speaker 1>But

00:17:45.575 --> 00:17:47.974
<v Speaker 1>hopefully 7.4 means we see better

00:17:49.095 --> 00:17:51.174
<v Speaker 1>examples for scaling because it'll be worth performance,

00:17:51.174 --> 00:17:51.414
<v Speaker 1>I guess.

00:17:52.909 --> 00:17:54.110
<v Speaker 2>Saw it the other day. One of the

00:17:54.110 --> 00:17:56.990
<v Speaker 2>features that's landing in 8.1 has a 20%

00:17:56.990 --> 00:17:58.190
<v Speaker 2>speed improvement

00:17:58.270 --> 00:17:59.389
<v Speaker 2>real world

00:17:59.630 --> 00:18:01.390
<v Speaker 2>for some of them. I think that's sort

00:18:01.390 --> 00:18:02.590
<v Speaker 1>of linked

00:18:03.390 --> 00:18:05.309
<v Speaker 1>linked caching of,

00:18:05.950 --> 00:18:08.270
<v Speaker 1>like, inheritance files and classes or something, I

00:18:08.270 --> 00:18:08.429
<v Speaker 1>think.

00:18:09.674 --> 00:18:10.875
<v Speaker 1>But I don't think it's like your page

00:18:10.875 --> 00:18:12.475
<v Speaker 1>will be 20% better. I think it's what

00:18:12.475 --> 00:18:14.475
<v Speaker 1>was what was like a very small portion

00:18:14.475 --> 00:18:16.955
<v Speaker 1>of your, like, load time is 20% better

00:18:16.955 --> 00:18:18.634
<v Speaker 1>than it was on that small section.

00:18:19.035 --> 00:18:21.539
<v Speaker 1>Yeah. So real world Pages are the one

00:18:21.539 --> 00:18:22.419
<v Speaker 1>we're at.

00:18:23.539 --> 00:18:24.820
<v Speaker 2>Pages are the one we're looking at that's

00:18:24.820 --> 00:18:25.940
<v Speaker 2>just doing CPU.

00:18:26.740 --> 00:18:27.379
<v Speaker 1>Yeah. Yeah.

00:18:29.299 --> 00:18:31.539
<v Speaker 0>Alright. Our application oh, we got a comment

00:18:31.539 --> 00:18:33.299
<v Speaker 0>from a guy who mentioned, hey, for load

00:18:33.299 --> 00:18:35.220
<v Speaker 0>testing. I've actually heard people mention that before.

00:18:35.220 --> 00:18:36.985
<v Speaker 0>I'll check it out another time, but for

00:18:36.985 --> 00:18:38.585
<v Speaker 0>now I'll run siege just because I've got

00:18:38.585 --> 00:18:39.384
<v Speaker 0>it installed.

00:18:40.025 --> 00:18:42.745
<v Speaker 0>We're gonna hit local host on 8080.

00:18:42.745 --> 00:18:44.105
<v Speaker 0>And if I just do this, I'm assuming

00:18:44.105 --> 00:18:46.745
<v Speaker 0>it's gonna magically just start firing requests at

00:18:46.745 --> 00:18:47.304
<v Speaker 0>it.

00:18:48.905 --> 00:18:50.825
<v Speaker 0>Mean, is that is that it working? I

00:18:50.985 --> 00:18:52.330
<v Speaker 1>think so. If you cancel it, tells you

00:18:52.330 --> 00:18:54.250
<v Speaker 1>then how many requests it did I think.

00:18:54.570 --> 00:18:56.730
<v Speaker 1>I'm not I'm not really sure. I normally

00:18:56.730 --> 00:18:58.970
<v Speaker 1>pass through dash c and dash t.

00:18:59.610 --> 00:19:00.650
<v Speaker 0>Well, our availability

00:19:01.290 --> 00:19:03.210
<v Speaker 1>four dash c is how many concurrency is.

00:19:03.610 --> 00:19:05.850
<v Speaker 0>Well, it looks like we potentially got failed

00:19:05.850 --> 00:19:08.395
<v Speaker 0>requests even with just the basic settings there.

00:19:08.955 --> 00:19:09.915
<v Speaker 1>So Nice.

00:19:11.275 --> 00:19:11.995
<v Speaker 0>Yeah.

00:19:12.795 --> 00:19:14.155
<v Speaker 0>I think it was working.

00:19:16.635 --> 00:19:18.155
<v Speaker 0>Concurrently 13.

00:19:20.795 --> 00:19:23.429
<v Speaker 0>On our availability dropped to 44% that time.

00:19:24.470 --> 00:19:26.630
<v Speaker 1>Wow. So it's actually that's okay.

00:19:28.150 --> 00:19:30.630
<v Speaker 0>Our response time is eleven seconds. Is that

00:19:30.630 --> 00:19:32.310
<v Speaker 0>is that can't be No. That might be

00:19:32.310 --> 00:19:32.870
<v Speaker 1>milliseconds.

00:19:34.605 --> 00:19:36.845
<v Speaker 1>Can't be eleven seconds shortly. I would hope

00:19:36.845 --> 00:19:38.924
<v Speaker 0>not. Right? It's done nothing.

00:19:39.725 --> 00:19:41.405
<v Speaker 1>Because that homepage is just a bit the

00:19:41.405 --> 00:19:43.644
<v Speaker 1>page which says like, this is my

00:19:43.804 --> 00:19:45.164
<v Speaker 1>this should be red or whatever.

00:19:45.804 --> 00:19:47.004
<v Speaker 0>Okay.

00:19:47.165 --> 00:19:47.485
<v Speaker 0>Well,

00:19:51.310 --> 00:19:53.870
<v Speaker 0>yeah. Okay. Let's try let's try and scale

00:19:53.870 --> 00:19:55.070
<v Speaker 0>this then. So

00:19:55.790 --> 00:19:58.429
<v Speaker 0>we can pull up the documentation

00:20:00.110 --> 00:20:02.355
<v Speaker 0>for so Kubernetes has a primitive

00:20:03.395 --> 00:20:04.755
<v Speaker 0>called an HPA.

00:20:06.595 --> 00:20:09.554
<v Speaker 0>This is the horizontal pod auto scaler

00:20:10.435 --> 00:20:11.154
<v Speaker 0>which

00:20:11.635 --> 00:20:13.795
<v Speaker 0>out of the box doesn't do an awful

00:20:13.795 --> 00:20:15.794
<v Speaker 0>lot but we can do

00:20:15.955 --> 00:20:16.835
<v Speaker 0>CPU

00:20:17.075 --> 00:20:18.450
<v Speaker 0>based scaling

00:20:18.850 --> 00:20:19.970
<v Speaker 0>as you know the

00:20:20.290 --> 00:20:22.530
<v Speaker 0>the cubelet that's just running containers does have

00:20:22.530 --> 00:20:24.130
<v Speaker 0>some form of metrics coming out of it

00:20:24.130 --> 00:20:25.730
<v Speaker 0>and it knows what they're being used.

00:20:26.450 --> 00:20:28.929
<v Speaker 0>Hopefully we've got an example of Yamal here

00:20:28.929 --> 00:20:30.534
<v Speaker 0>that we can kind of steal.

00:20:33.415 --> 00:20:34.775
<v Speaker 0>Computer said no.

00:20:37.095 --> 00:20:39.335
<v Speaker 0>There we go. Example. Yes since last hit

00:20:39.335 --> 00:20:39.895
<v Speaker 1>that.

00:20:40.135 --> 00:20:41.414
<v Speaker 0>Computer said no.

00:20:41.735 --> 00:20:42.455
<v Speaker 1>Yeah.

00:20:43.015 --> 00:20:45.415
<v Speaker 0>Well they actually use PHP

00:20:44.890 --> 00:20:46.570
<v Speaker 0>I have a square root function to try

00:20:46.570 --> 00:20:48.809
<v Speaker 0>and trigger CPU intensive computation.

00:20:51.130 --> 00:20:51.850
<v Speaker 0>Well.

00:20:53.530 --> 00:20:55.929
<v Speaker 0>As our deployment, as our service, let's get

00:20:55.929 --> 00:20:57.210
<v Speaker 0>down to the good stuff.

00:20:58.250 --> 00:20:59.049
<v Speaker 0>Where is it?

00:21:04.725 --> 00:21:06.885
<v Speaker 0>They're using the auto skill command to create

00:21:06.885 --> 00:21:08.725
<v Speaker 0>one. Alright. Let's go with that.

00:21:11.845 --> 00:21:12.565
<v Speaker 0>Deployment,

00:21:13.150 --> 00:21:14.190
<v Speaker 0>Laravel

00:21:15.870 --> 00:21:16.669
<v Speaker 0>example.

00:21:17.070 --> 00:21:18.590
<v Speaker 0>Why did we give it such a verbose

00:21:18.590 --> 00:21:19.230
<v Speaker 0>name?

00:21:22.110 --> 00:21:23.870
<v Speaker 0>Or didn't we? I don't remember.

00:21:25.070 --> 00:21:25.470
<v Speaker 0>Yeah.

00:21:26.995 --> 00:21:27.634
<v Speaker 0>Project.

00:21:29.794 --> 00:21:30.835
<v Speaker 0>Project.

00:21:34.115 --> 00:21:36.515
<v Speaker 0>Thank you. And you can see now we

00:21:36.515 --> 00:21:39.075
<v Speaker 0>have a horizontal pod auto scaler. So what

00:21:39.075 --> 00:21:40.515
<v Speaker 0>we can do is

00:21:42.909 --> 00:21:44.349
<v Speaker 0>get our HPA,

00:21:44.590 --> 00:21:46.349
<v Speaker 0>which has got the same name.

00:21:50.270 --> 00:21:51.789
<v Speaker 0>Take a look at it in YAML.

00:21:52.429 --> 00:21:52.909
<v Speaker 0>And this

00:21:53.390 --> 00:21:54.429
<v Speaker 0>is our spec.

00:21:56.190 --> 00:21:58.644
<v Speaker 0>So it has max replicas of 10,

00:21:59.044 --> 00:22:01.205
<v Speaker 0>minimum replicas of one, of course we always

00:22:01.205 --> 00:22:02.244
<v Speaker 0>want one of these

00:22:03.125 --> 00:22:05.204
<v Speaker 0>and the naive implementation

00:22:05.284 --> 00:22:08.404
<v Speaker 0>as as the target or the CPU utilization

00:22:08.804 --> 00:22:10.220
<v Speaker 0>goes above 50%,

00:22:10.220 --> 00:22:11.900
<v Speaker 0>we're gonna want more of these.

00:22:12.060 --> 00:22:12.620
<v Speaker 0>So

00:22:13.020 --> 00:22:13.980
<v Speaker 0>in theory

00:22:15.260 --> 00:22:17.580
<v Speaker 0>we have one pod now. I wonder if

00:22:17.580 --> 00:22:20.060
<v Speaker 0>we just run siege again and watch that

00:22:20.060 --> 00:22:23.245
<v Speaker 0>and we'll see an auto scaling event kickoff.

00:22:23.405 --> 00:22:25.085
<v Speaker 0>Are we feeling confident with that?

00:22:25.725 --> 00:22:27.725
<v Speaker 0>No, me neither. Okay.

00:22:29.645 --> 00:22:31.804
<v Speaker 0>Wrong split. Let's go this way.

00:22:33.085 --> 00:22:35.405
<v Speaker 0>I'll just run the pod watch here

00:22:37.010 --> 00:22:39.489
<v Speaker 0>and I'll run siege again here.

00:22:42.370 --> 00:22:44.289
<v Speaker 0>I won't get any jokes just now.

00:22:46.130 --> 00:22:46.849
<v Speaker 1>I

00:22:48.529 --> 00:22:50.289
<v Speaker 1>have but not appropriate for stream so.

00:22:52.565 --> 00:22:54.725
<v Speaker 0>It's always the worst question to ask somebody.

00:22:54.805 --> 00:22:57.525
<v Speaker 0>You got joke? Too much pressure. I've got

00:22:57.525 --> 00:22:58.885
<v Speaker 2>a question about the config.

00:22:59.045 --> 00:22:59.605
<v Speaker 2>It

00:23:02.085 --> 00:23:04.005
<v Speaker 2>does each of these pods do the Laravel

00:23:04.005 --> 00:23:06.005
<v Speaker 2>pods have an NGINX and an FPM in

00:23:06.005 --> 00:23:06.245
<v Speaker 0>them?

00:23:08.930 --> 00:23:11.730
<v Speaker 1>No. It's just PHP FPM in there. And

00:23:11.730 --> 00:23:13.330
<v Speaker 1>then the NGINX one

00:23:13.970 --> 00:23:16.610
<v Speaker 1>loads it across from the FPM

00:23:16.610 --> 00:23:17.169
<v Speaker 1>image.

00:23:18.850 --> 00:23:19.730
<v Speaker 0>Look. It's scaled.

00:23:20.865 --> 00:23:24.625
<v Speaker 0>That's

00:23:24.625 --> 00:23:25.184
<v Speaker 0>nice.

00:23:26.465 --> 00:23:28.465
<v Speaker 0>Okay. So I think I know where Kieran's

00:23:28.465 --> 00:23:30.465
<v Speaker 0>question was going. So I'm gonna try and

00:23:30.465 --> 00:23:31.425
<v Speaker 0>magically

00:23:31.425 --> 00:23:33.970
<v Speaker 0>discuss what you were thinking there as if

00:23:33.970 --> 00:23:34.850
<v Speaker 0>we do it.

00:23:37.490 --> 00:23:39.250
<v Speaker 0>Maybe you can't see it from the screen.

00:23:39.250 --> 00:23:41.409
<v Speaker 0>Alright. Okay. Do it the long way.

00:23:42.290 --> 00:23:43.809
<v Speaker 0>Oh, no. That doesn't scale. Did it?

00:23:48.095 --> 00:23:49.615
<v Speaker 1>It said it was creating a new container

00:23:49.615 --> 00:23:50.255
<v Speaker 1>though.

00:23:52.975 --> 00:23:55.135
<v Speaker 0>Oh, that's our job. Our cron job. That's

00:23:55.135 --> 00:23:57.295
<v Speaker 1>that's the cron job one. Yeah. Okay. Alright.

00:23:57.295 --> 00:23:58.815
<v Speaker 0>So let's work it why it doesn't scale

00:23:58.815 --> 00:24:01.420
<v Speaker 0>yet. So Kieran, I think your question was

00:24:01.420 --> 00:24:03.820
<v Speaker 0>based on the HPA configuration that we've seen

00:24:03.820 --> 00:24:06.220
<v Speaker 0>up here is that which containers are using

00:24:06.220 --> 00:24:08.140
<v Speaker 0>to determine if the CPU went too high.

00:24:08.140 --> 00:24:09.180
<v Speaker 0>Is that correct?

00:24:10.060 --> 00:24:11.580
<v Speaker 0>Yeah. Yeah. Cool.

00:24:12.940 --> 00:24:14.345
<v Speaker 0>It's a good question. So let's see if

00:24:14.345 --> 00:24:15.705
<v Speaker 0>we can get some metrics from this and

00:24:15.705 --> 00:24:17.065
<v Speaker 0>this may not even

00:24:17.465 --> 00:24:20.184
<v Speaker 0>work but let's see if we do top

00:24:20.585 --> 00:24:23.544
<v Speaker 0>node and top pod. Yeah. No metrics API.

00:24:23.545 --> 00:24:24.025
<v Speaker 0>Okay.

00:24:24.665 --> 00:24:26.520
<v Speaker 0>So that's probably why our autoscaler isn't kicking

00:24:26.520 --> 00:24:28.520
<v Speaker 0>in either as that we need to actually

00:24:28.520 --> 00:24:30.120
<v Speaker 0>provide a way to get metrics out of

00:24:30.120 --> 00:24:32.600
<v Speaker 0>this Kubernetes hasn't shipped with a default metrics

00:24:32.600 --> 00:24:33.480
<v Speaker 0>implementation

00:24:33.480 --> 00:24:34.280
<v Speaker 0>since

00:24:35.560 --> 00:24:37.720
<v Speaker 0>I'll throw one out there 1.9 something like

00:24:37.720 --> 00:24:40.520
<v Speaker 0>that. Everything that was later than that, but

00:24:40.365 --> 00:24:42.525
<v Speaker 0>everything's been extracted. So let's get the metrics

00:24:42.525 --> 00:24:44.445
<v Speaker 0>server running on our cluster first.

00:24:46.765 --> 00:24:49.005
<v Speaker 0>Please, if I don't explain anything, just prod

00:24:49.005 --> 00:24:49.565
<v Speaker 0>me.

00:24:52.045 --> 00:24:53.884
<v Speaker 1>So the metrics API,

00:24:54.045 --> 00:24:55.820
<v Speaker 1>that's what the

00:24:56.780 --> 00:24:58.539
<v Speaker 1>horizontal scale is looking for.

00:25:00.780 --> 00:25:02.540
<v Speaker 0>Mean, I don't I actually don't remember if

00:25:02.540 --> 00:25:04.620
<v Speaker 0>it uses the metrics server or not. I

00:25:04.620 --> 00:25:05.740
<v Speaker 0>believe it probably will.

00:25:07.115 --> 00:25:08.875
<v Speaker 0>It may do something cruder when it's not

00:25:08.875 --> 00:25:10.795
<v Speaker 0>available, but I'm gonna just I was just

00:25:10.795 --> 00:25:12.955
<v Speaker 1>wondering why that didn't like error when you

00:25:12.955 --> 00:25:13.995
<v Speaker 1>tried to spin it up if it didn't

00:25:13.995 --> 00:25:15.115
<v Speaker 1>have the server available.

00:25:15.915 --> 00:25:17.915
<v Speaker 0>Well, also, we don't even have any resource

00:25:17.915 --> 00:25:20.315
<v Speaker 0>constraints on our pods, do we? So what

00:25:20.310 --> 00:25:22.710
<v Speaker 0>50% utilization of what the full system?

00:25:23.990 --> 00:25:25.270
<v Speaker 1>Yeah that could take a while to get

00:25:25.270 --> 00:25:27.270
<v Speaker 1>to yeah. So there's loads of things here

00:25:27.270 --> 00:25:28.790
<v Speaker 0>that I'm obviously just

00:25:29.190 --> 00:25:31.830
<v Speaker 0>winging it. So let's go back to our

00:25:32.505 --> 00:25:35.305
<v Speaker 0>deployment, so we don't have any resource constraints

00:25:35.305 --> 00:25:36.024
<v Speaker 0>do we?

00:25:37.465 --> 00:25:38.105
<v Speaker 0>We do.

00:25:39.145 --> 00:25:41.945
<v Speaker 0>Okay. Yeah and they're not particularly great right?

00:25:41.945 --> 00:25:44.185
<v Speaker 0>So 50 meg of memory and half a

00:25:44.185 --> 00:25:46.770
<v Speaker 0>core which I'm assuming we're probably hammered in

00:25:46.770 --> 00:25:48.450
<v Speaker 0>that pretty well. So I'm gonna assume it's

00:25:48.450 --> 00:25:49.729
<v Speaker 0>just metrics server,

00:25:50.210 --> 00:25:52.929
<v Speaker 0>which we've already deployed to our cluster now.

00:25:52.929 --> 00:25:54.049
<v Speaker 0>That should mean

00:25:55.409 --> 00:25:57.250
<v Speaker 0>it's just not ready yet, so we'll give

00:25:57.250 --> 00:25:58.450
<v Speaker 0>it a little bit of time.

00:25:59.570 --> 00:26:00.289
<v Speaker 0>Let's see.

00:26:03.575 --> 00:26:04.695
<v Speaker 0>Metrics server.

00:26:07.815 --> 00:26:08.534
<v Speaker 0>So

00:26:08.695 --> 00:26:10.535
<v Speaker 0>the metrics server is gonna run-in the cluster.

00:26:10.535 --> 00:26:12.535
<v Speaker 0>It's gonna start scraping for stuff and this

00:26:12.535 --> 00:26:13.815
<v Speaker 0>should be exposed

00:26:13.975 --> 00:26:14.695
<v Speaker 0>soon.

00:26:15.495 --> 00:26:16.919
<v Speaker 0>He says hopefully. Hopefully.

00:26:18.120 --> 00:26:20.039
<v Speaker 0>The service isn't available yet so if we

00:26:20.039 --> 00:26:21.720
<v Speaker 0>just do if we actually do a cube

00:26:21.720 --> 00:26:22.440
<v Speaker 0>system

00:26:22.919 --> 00:26:24.119
<v Speaker 0>describe service

00:26:24.679 --> 00:26:26.600
<v Speaker 0>we should see the endpoints be added to

00:26:26.600 --> 00:26:28.759
<v Speaker 0>it once it gets past the liveness probes

00:26:28.455 --> 00:26:30.934
<v Speaker 0>that consider it healthy which could be anywhere

00:26:30.934 --> 00:26:33.654
<v Speaker 0>from ten seconds to a minute probably so

00:26:34.855 --> 00:26:35.734
<v Speaker 0>metrics

00:26:36.455 --> 00:26:38.854
<v Speaker 0>my service is called yeah metric service.

00:26:40.855 --> 00:26:42.340
<v Speaker 0>Alright So we need to wait for an

00:26:42.340 --> 00:26:43.940
<v Speaker 0>IP address to show up here.

00:26:45.299 --> 00:26:47.379
<v Speaker 0>Lots of waiting in Kubernetes, right?

00:26:50.500 --> 00:26:52.980
<v Speaker 1>At least it's all stuff it sorts itself

00:26:52.980 --> 00:26:53.779
<v Speaker 1>out with.

00:26:54.260 --> 00:26:54.979
<v Speaker 0>Yeah.

00:26:55.140 --> 00:26:57.095
<v Speaker 0>I'm far too impatient and just keep running

00:26:57.095 --> 00:26:59.415
<v Speaker 0>commands against my cluster. One of the things

00:26:59.415 --> 00:27:02.375
<v Speaker 0>I could do is check out the probes

00:27:03.655 --> 00:27:05.815
<v Speaker 0>on that metric server pod.

00:27:09.655 --> 00:27:11.495
<v Speaker 0>Yeah. Unhealthy at the moment.

00:27:14.670 --> 00:27:16.430
<v Speaker 0>How are the probes configured?

00:27:20.590 --> 00:27:23.070
<v Speaker 0>Ten second intervals waiting for one success.

00:27:26.295 --> 00:27:28.215
<v Speaker 0>Really should be healthy by now.

00:27:33.095 --> 00:27:34.455
<v Speaker 0>I wonder if this is where I found

00:27:34.455 --> 00:27:35.975
<v Speaker 0>out that the metrics server doesn't work with

00:27:35.975 --> 00:27:36.695
<v Speaker 0>Docker for Mac.

00:27:46.610 --> 00:27:48.129
<v Speaker 0>Let's try our service.

00:27:48.289 --> 00:27:50.369
<v Speaker 0>Yeah. Where's my endpoints? Come on.

00:27:51.730 --> 00:27:53.889
<v Speaker 0>Let's get the logs from it.

00:27:55.090 --> 00:27:57.595
<v Speaker 0>I don't really wanna debug this too much

00:27:57.595 --> 00:27:59.355
<v Speaker 0>but you can see we've got four restarts

00:27:59.355 --> 00:28:02.235
<v Speaker 0>on this. So I may switch to mini

00:28:02.235 --> 00:28:03.754
<v Speaker 0>cube if

00:28:03.755 --> 00:28:06.315
<v Speaker 0>that's gonna save us some pain.

00:28:07.035 --> 00:28:08.475
<v Speaker 0>But let's see what we're dealing with.

00:28:23.539 --> 00:28:24.340
<v Speaker 0>That's fun.

00:28:27.455 --> 00:28:30.495
<v Speaker 0>So it's failing because the certificate coming from

00:28:30.495 --> 00:28:33.775
<v Speaker 0>the API server doesn't contain the IP address.

00:28:40.910 --> 00:28:41.789
<v Speaker 0>Alright.

00:28:41.789 --> 00:28:42.830
<v Speaker 0>Let's switch.

00:28:46.590 --> 00:28:47.630
<v Speaker 0>1.10.

00:28:47.630 --> 00:28:48.830
<v Speaker 0>Let's not do that.

00:28:53.070 --> 00:28:53.630
<v Speaker 0>Alright.

00:28:54.685 --> 00:28:56.845
<v Speaker 0>We're spending up many cubes. That means I

00:28:56.845 --> 00:28:59.725
<v Speaker 0>will have to rebuild the images unfortunately.

00:29:00.365 --> 00:29:02.445
<v Speaker 0>But they should get as metrics ever running.

00:29:02.845 --> 00:29:04.525
<v Speaker 1>How come the images have to be rebuilt?

00:29:04.525 --> 00:29:06.684
<v Speaker 1>Aren't they stored on your local machine?

00:29:07.085 --> 00:29:09.965
<v Speaker 0>They are, but many cube runs inside of

00:29:09.965 --> 00:29:12.260
<v Speaker 0>a small virtual machine which won't have access

00:29:12.260 --> 00:29:13.220
<v Speaker 0>to my host.

00:29:13.700 --> 00:29:14.580
<v Speaker 1>Okay.

00:29:16.820 --> 00:29:18.260
<v Speaker 0>I mean, I can Some way of packaging

00:29:18.260 --> 00:29:20.260
<v Speaker 2>them up for export, isn't it?

00:29:22.980 --> 00:29:24.705
<v Speaker 0>I I could

00:29:24.865 --> 00:29:26.945
<v Speaker 0>save them to a tarball and import them

00:29:26.945 --> 00:29:28.065
<v Speaker 0>into the mini cube.

00:29:28.545 --> 00:29:30.465
<v Speaker 0>Would that save me time? I'm not really

00:29:30.465 --> 00:29:31.024
<v Speaker 0>sure.

00:29:32.625 --> 00:29:34.625
<v Speaker 0>I was kinda hoping Docker for Mac would

00:29:34.625 --> 00:29:35.745
<v Speaker 0>would just work

00:29:36.385 --> 00:29:39.150
<v Speaker 0>but I don't really wanna debug why a

00:29:39.150 --> 00:29:40.830
<v Speaker 0>metric server can't speak to it. I guess

00:29:40.830 --> 00:29:42.270
<v Speaker 0>while we wait for that we can just

00:29:42.270 --> 00:29:44.509
<v Speaker 0>quickly do Docker for Mac

00:29:44.830 --> 00:29:45.870
<v Speaker 0>metric server.

00:29:50.245 --> 00:29:52.325
<v Speaker 0>Someone's already written about this.

00:29:56.645 --> 00:29:57.924
<v Speaker 0>So

00:29:58.165 --> 00:30:00.165
<v Speaker 0>we're just they're just adding the and secure.

00:30:02.320 --> 00:30:04.399
<v Speaker 0>Oh, wait. Do not enable this.

00:30:04.799 --> 00:30:07.119
<v Speaker 1>That's just when it'll be accessed externally.

00:30:09.039 --> 00:30:09.839
<v Speaker 0>Alright.

00:30:10.000 --> 00:30:12.240
<v Speaker 0>Let's do it. Let's modify the metrics server

00:30:12.240 --> 00:30:13.279
<v Speaker 0>to accept that flag.

00:30:16.075 --> 00:30:17.914
<v Speaker 0>Makes that I'm pretty sure many cribs just

00:30:17.914 --> 00:30:19.514
<v Speaker 0>changed my context. Yep.

00:30:20.715 --> 00:30:21.994
<v Speaker 0>Proper desktop.

00:30:25.755 --> 00:30:26.955
<v Speaker 0>Get deploy,

00:30:27.674 --> 00:30:29.274
<v Speaker 0>edit, deploy

00:30:29.275 --> 00:30:29.995
<v Speaker 0>metrics,

00:30:30.390 --> 00:30:31.350
<v Speaker 0>server,

00:30:32.710 --> 00:30:33.670
<v Speaker 0>args,

00:30:33.670 --> 00:30:33.750
<v Speaker 0>next.

00:30:43.034 --> 00:30:43.834
<v Speaker 0>Done.

00:30:45.835 --> 00:30:47.034
<v Speaker 0>You feeling confident?

00:30:47.514 --> 00:30:47.914
<v Speaker 0>So

00:30:48.715 --> 00:30:50.634
<v Speaker 1>the next time you do a cube

00:30:50.875 --> 00:30:52.235
<v Speaker 1>cube CTL

00:30:52.235 --> 00:30:53.195
<v Speaker 1>apply,

00:30:53.914 --> 00:30:55.355
<v Speaker 1>would that not

00:30:55.820 --> 00:30:59.260
<v Speaker 1>override that config that's there? Probably, I'm just

00:30:59.260 --> 00:31:01.499
<v Speaker 0>not going to apply the metrics server again.

00:31:01.900 --> 00:31:03.420
<v Speaker 1>Right. Okay. But if if you were to

00:31:03.420 --> 00:31:05.020
<v Speaker 1>apply the metrics server again, would like nuke

00:31:05.020 --> 00:31:07.179
<v Speaker 1>whatever you changed. Oh, yeah. Definitely. It would

00:31:07.179 --> 00:31:09.100
<v Speaker 0>totally do But I do think we have

00:31:09.100 --> 00:31:10.700
<v Speaker 0>an endpoint now. So I'm glad we googled

00:31:10.700 --> 00:31:12.904
<v Speaker 0>that instead of rebuilding on mini cube.

00:31:13.225 --> 00:31:14.664
<v Speaker 0>Thank you code of Dan.

00:31:16.345 --> 00:31:17.304
<v Speaker 0>Okay. So

00:31:18.345 --> 00:31:20.185
<v Speaker 0>which means we have a metric server working,

00:31:20.185 --> 00:31:21.785
<v Speaker 0>which means we do have access to top

00:31:21.785 --> 00:31:22.505
<v Speaker 0>pods

00:31:22.905 --> 00:31:25.625
<v Speaker 0>and now we can actually see how much

00:31:25.279 --> 00:31:27.200
<v Speaker 0>CPU and memory is being consumed by our

00:31:27.200 --> 00:31:28.799
<v Speaker 0>Laravel application and how

00:31:29.760 --> 00:31:30.879
<v Speaker 0>much memory. So

00:31:31.600 --> 00:31:34.159
<v Speaker 0>we're actually only using one m cores

00:31:35.360 --> 00:31:37.119
<v Speaker 0>and 18 mega memory.

00:31:37.360 --> 00:31:39.745
<v Speaker 0>So oh, seat isn't running anymore.

00:31:41.425 --> 00:31:43.985
<v Speaker 0>And my port forward's gone. Too

00:31:46.225 --> 00:31:50.145
<v Speaker 0>many moving parts. Alright. Port forward to Laravel.

00:31:51.030 --> 00:31:52.390
<v Speaker 0>Laravel

00:31:52.470 --> 00:31:53.350
<v Speaker 0>example.

00:31:58.150 --> 00:31:59.270
<v Speaker 0>Eighty eighty.

00:31:59.750 --> 00:32:01.670
<v Speaker 0>Alright. That stays there.

00:32:02.150 --> 00:32:03.270
<v Speaker 0>Run siege.

00:32:03.590 --> 00:32:04.630
<v Speaker 0>Run top.

00:32:05.590 --> 00:32:07.715
<v Speaker 0>So we should just hopefully see this claim

00:32:07.715 --> 00:32:09.315
<v Speaker 0>as a request come in.

00:32:09.635 --> 00:32:10.914
<v Speaker 0>So that's gonna be a little bit late

00:32:10.914 --> 00:32:12.515
<v Speaker 0>and say in the metric server probably around

00:32:12.835 --> 00:32:14.595
<v Speaker 0>I can't remember what the default scrape interval

00:32:14.595 --> 00:32:16.835
<v Speaker 0>is gonna be, but let's assume thirty seconds.

00:32:18.115 --> 00:32:19.875
<v Speaker 0>Hopefully we see the CPU.

00:32:20.950 --> 00:32:23.349
<v Speaker 0>I mean it doesn't seem to get to

00:32:23.509 --> 00:32:24.389
<v Speaker 0>250

00:32:24.389 --> 00:32:25.509
<v Speaker 0>m previously

00:32:25.509 --> 00:32:26.870
<v Speaker 0>or we would have seen an auto scaling

00:32:26.870 --> 00:32:28.870
<v Speaker 0>event. So we may just tweak the resources

00:32:28.870 --> 00:32:31.429
<v Speaker 0>on it and force it to scale earlier.

00:32:32.789 --> 00:32:35.115
<v Speaker 1>Is it worth is worth making it so

00:32:35.115 --> 00:32:36.715
<v Speaker 1>it hits the one which hits the database

00:32:36.715 --> 00:32:37.755
<v Speaker 1>as well perhaps?

00:32:38.795 --> 00:32:40.075
<v Speaker 1>Yeah. So if you send it to slash

00:32:40.075 --> 00:32:43.195
<v Speaker 1>send your requests to slash posts instead of

00:32:43.195 --> 00:32:45.115
<v Speaker 1>just to the home page maybe. Is there

00:32:45.115 --> 00:32:46.715
<v Speaker 0>a watch on this? No. That would have

00:32:46.715 --> 00:32:47.580
<v Speaker 0>been too handy.

00:32:48.460 --> 00:32:50.059
<v Speaker 1>Can't you just wrap it in a watch

00:32:50.059 --> 00:32:51.340
<v Speaker 1>dash n one?

00:32:51.580 --> 00:32:52.379
<v Speaker 0>I could.

00:32:53.980 --> 00:32:54.779
<v Speaker 0>I could.

00:32:56.620 --> 00:32:58.139
<v Speaker 0>But then what would I type?

00:32:58.460 --> 00:32:59.419
<v Speaker 0>Oh, look.

00:33:01.260 --> 00:33:03.345
<v Speaker 1>Yeah. Nice. So that should auto scale then

00:33:03.345 --> 00:33:03.825
<v Speaker 1>now.

00:33:06.465 --> 00:33:07.184
<v Speaker 0>Yes.

00:33:07.505 --> 00:33:09.985
<v Speaker 0>Yes. Because it's made over 50% of the

00:33:09.985 --> 00:33:11.025
<v Speaker 1>allocated

00:33:11.105 --> 00:33:12.145
<v Speaker 1>resources.

00:33:13.745 --> 00:33:14.760
<v Speaker 0>I hope so.

00:33:15.960 --> 00:33:18.760
<v Speaker 1>Although not seeing another one spin up there.

00:33:19.160 --> 00:33:21.559
<v Speaker 0>Yeah. So the HP is gonna

00:33:21.800 --> 00:33:24.120
<v Speaker 0>wait for a few different data points there.

00:33:24.120 --> 00:33:24.520
<v Speaker 0>So

00:33:25.080 --> 00:33:25.960
<v Speaker 0>let's

00:33:25.960 --> 00:33:26.680
<v Speaker 0>double check.

00:33:27.705 --> 00:33:29.544
<v Speaker 0>These are limits. Yeah. Okay. So we we

00:33:29.544 --> 00:33:31.225
<v Speaker 0>should see an auto scale. I'm pretty confident

00:33:31.225 --> 00:33:32.504
<v Speaker 0>we'll see an auto scale.

00:33:33.304 --> 00:33:34.184
<v Speaker 0>I hope.

00:33:34.985 --> 00:33:36.985
<v Speaker 0>We'll let it do its thing and then

00:33:36.985 --> 00:33:38.585
<v Speaker 0>I'll maybe change it to the database end

00:33:38.585 --> 00:33:39.544
<v Speaker 0>points to see if we can port it

00:33:39.544 --> 00:33:40.664
<v Speaker 0>a little bit quicker

00:33:41.400 --> 00:33:42.840
<v Speaker 0>And then we'll actually do something a bit

00:33:42.840 --> 00:33:45.080
<v Speaker 0>more fun anyway. Like we wanna we wanna

00:33:45.080 --> 00:33:46.600
<v Speaker 0>start instrumenting this.

00:33:49.800 --> 00:33:51.480
<v Speaker 0>Oh, come on. Give me another pod.

00:33:56.654 --> 00:33:58.335
<v Speaker 0>Let's double check our HPA.

00:34:08.489 --> 00:34:10.090
<v Speaker 0>Why is that not coming up?

00:34:17.770 --> 00:34:18.810
<v Speaker 0>Are those old?

00:34:22.484 --> 00:34:23.844
<v Speaker 0>Yeah. I think so.

00:34:25.525 --> 00:34:27.525
<v Speaker 0>It says unable to get metrics for resource

00:34:27.525 --> 00:34:28.244
<v Speaker 0>CPU.

00:34:28.964 --> 00:34:30.724
<v Speaker 1>The age is only three minutes forty one,

00:34:30.724 --> 00:34:31.205
<v Speaker 1>though.

00:34:33.125 --> 00:34:34.804
<v Speaker 0>Yeah. I don't think we've been running metrics

00:34:34.324 --> 00:34:34.724
<v Speaker 1>Yeah.

00:34:35.444 --> 00:34:37.400
<v Speaker 1>Four minutes away. It's quite a while. So

00:34:37.400 --> 00:34:39.320
<v Speaker 0>I think it is working.

00:34:40.120 --> 00:34:41.880
<v Speaker 0>We're just not seeing a scale yet.

00:34:44.680 --> 00:34:46.360
<v Speaker 0>Okay. Let's try and force it before we

00:34:46.360 --> 00:34:47.640
<v Speaker 0>move on to the next thing.

00:34:48.200 --> 00:34:50.045
<v Speaker 0>Let's put this down to

00:34:50.685 --> 00:34:53.325
<v Speaker 0>100 which we know will cross pretty quickly.

00:34:56.605 --> 00:34:58.525
<v Speaker 0>But we are hitting the 500.

00:35:02.125 --> 00:35:03.805
<v Speaker 0>Alright. I'm gonna blame the HPA.

00:35:08.230 --> 00:35:11.270
<v Speaker 0>Question, Kieran, or just sign at my Yeah.

00:35:11.270 --> 00:35:12.630
<v Speaker 2>Is the when you when you set a

00:35:12.630 --> 00:35:14.710
<v Speaker 2>CPU limit I was trying to just ask

00:35:15.030 --> 00:35:16.070
<v Speaker 2>the stupid question.

00:35:16.390 --> 00:35:18.550
<v Speaker 2>When when you set a CPU limit,

00:35:18.550 --> 00:35:20.150
<v Speaker 2>that doesn't actually limit

00:35:20.825 --> 00:35:23.224
<v Speaker 2>the amount of CPU that that pod can

00:35:23.224 --> 00:35:24.025
<v Speaker 2>use. Right?

00:35:26.505 --> 00:35:27.224
<v Speaker 2>Because

00:35:27.704 --> 00:35:29.545
<v Speaker 2>we're talking about it going past the limit.

00:35:29.545 --> 00:35:30.984
<v Speaker 2>So is the limit just metadata?

00:35:32.585 --> 00:35:35.944
<v Speaker 0>No. We've got actually

00:35:34.740 --> 00:35:37.540
<v Speaker 0>an enforced limit of 500 m.

00:35:37.780 --> 00:35:39.300
<v Speaker 0>The CPU utilization

00:35:39.300 --> 00:35:41.140
<v Speaker 0>may not be on the limit actually, maybe

00:35:41.140 --> 00:35:42.900
<v Speaker 0>on the full host and we are blocking

00:35:42.900 --> 00:35:44.500
<v Speaker 0>it before it ever gets there. So I

00:35:44.500 --> 00:35:46.500
<v Speaker 0>guess in theory, why don't we just do

00:35:47.060 --> 00:35:49.300
<v Speaker 0>1%? Well, I guess my question is if

00:35:49.300 --> 00:35:51.275
<v Speaker 2>it's got a limit of 500 and we're

00:35:51.275 --> 00:35:52.475
<v Speaker 2>saying auto scale,

00:35:54.635 --> 00:35:56.395
<v Speaker 2>how would it ever get past 500 to

00:35:56.395 --> 00:35:57.675
<v Speaker 2>trigger auto scaling?

00:35:58.955 --> 00:36:00.155
<v Speaker 0>Yeah. Good point.

00:36:00.395 --> 00:36:01.675
<v Speaker 2>Trigger some person.

00:36:03.035 --> 00:36:04.875
<v Speaker 2>We're saying never use more than 500 and

00:36:04.875 --> 00:36:06.910
<v Speaker 2>then scale up if you go over 500.

00:36:06.910 --> 00:36:08.830
<v Speaker 1>So instead of using limits then, do we

00:36:08.830 --> 00:36:10.350
<v Speaker 1>need to use the requests?

00:36:11.710 --> 00:36:12.590
<v Speaker 1>Flag.

00:36:13.150 --> 00:36:15.310
<v Speaker 0>To be honest, I'm

00:36:15.310 --> 00:36:17.630
<v Speaker 0>making this up. I never used resource based

00:36:17.630 --> 00:36:19.205
<v Speaker 0>auto scaling because it's

00:36:19.845 --> 00:36:21.925
<v Speaker 0>well it's not ideal. So let's see if

00:36:21.925 --> 00:36:23.045
<v Speaker 0>we can get it working before we move

00:36:23.045 --> 00:36:25.045
<v Speaker 0>on though. So let's change us to just

00:36:25.045 --> 00:36:25.845
<v Speaker 0>requests

00:36:25.845 --> 00:36:27.685
<v Speaker 0>which means we want to make sure we

00:36:27.685 --> 00:36:29.685
<v Speaker 0>allocate half a core of a 50

00:36:29.845 --> 00:36:30.805
<v Speaker 0>memory.

00:36:31.605 --> 00:36:33.300
<v Speaker 0>How many cores have I given to Docker

00:36:33.300 --> 00:36:35.780
<v Speaker 0>for Mac? Let's let's check that first

00:36:36.180 --> 00:36:37.860
<v Speaker 0>and then we'll just give access to all

00:36:37.860 --> 00:36:38.580
<v Speaker 0>of them.

00:36:40.260 --> 00:36:41.380
<v Speaker 0>Come on Docker.

00:36:43.540 --> 00:36:46.180
<v Speaker 0>Well, popped open over there. Let's drag

00:36:46.605 --> 00:36:48.685
<v Speaker 0>my resources for Docker for Mac are eight

00:36:48.685 --> 00:36:49.405
<v Speaker 0>cores.

00:36:49.805 --> 00:36:53.245
<v Speaker 0>So I'm gonna give this the full thing.

00:36:56.685 --> 00:36:59.325
<v Speaker 0>The request of fail. I'll limit it at

00:36:59.325 --> 00:36:59.565
<v Speaker 0>that.

00:37:02.000 --> 00:37:04.880
<v Speaker 0>So let's reapply our PHP application.

00:37:07.040 --> 00:37:08.640
<v Speaker 0>I'm in the wrong directory.

00:37:11.680 --> 00:37:13.675
<v Speaker 1>Did you change it to be 1% was

00:37:13.675 --> 00:37:14.955
<v Speaker 1>when it scaled as well?

00:37:15.275 --> 00:37:17.435
<v Speaker 0>Yeah. I just wanna force it to scale.

00:37:17.675 --> 00:37:18.635
<v Speaker 0>That's all.

00:37:18.875 --> 00:37:20.715
<v Speaker 0>So I'm gonna run siege again.

00:37:22.075 --> 00:37:23.275
<v Speaker 0>We're gonna get pods.

00:37:26.395 --> 00:37:27.835
<v Speaker 1>Oh, looks like there was some stuff because

00:37:27.835 --> 00:37:29.330
<v Speaker 1>there's stuff terminating now.

00:37:33.330 --> 00:37:35.250
<v Speaker 0>Alright. Now it's scaling up. Okay. So now

00:37:35.250 --> 00:37:37.010
<v Speaker 0>we have triggered an artificial scale event. Now

00:37:37.010 --> 00:37:38.370
<v Speaker 0>the way that we interact and deal with

00:37:38.370 --> 00:37:40.450
<v Speaker 0>us in Kubernetes is just sort of this

00:37:40.450 --> 00:37:42.645
<v Speaker 0>describe command. So if we describe our horizontal

00:37:42.645 --> 00:37:45.365
<v Speaker 0>pod auto scaler, we should see threshold crossed

00:37:45.365 --> 00:37:46.325
<v Speaker 0>scale

00:37:46.325 --> 00:37:48.485
<v Speaker 0>event initiated and so forth. So

00:37:49.205 --> 00:37:50.325
<v Speaker 0>yeah, here we go.

00:37:51.045 --> 00:37:53.045
<v Speaker 0>So our new size was set to four.

00:37:53.045 --> 00:37:56.165
<v Speaker 0>The reason was that the CPU resource utilization

00:37:56.725 --> 00:37:57.765
<v Speaker 0>went above the target.

00:37:58.299 --> 00:38:00.539
<v Speaker 0>It's actually said that that's happened twice over

00:38:00.539 --> 00:38:02.460
<v Speaker 0>the last minute. So there we go.

00:38:03.500 --> 00:38:05.500
<v Speaker 0>That was easy. Once we got it

00:38:05.900 --> 00:38:07.740
<v Speaker 0>over a few little humps there.

00:38:08.779 --> 00:38:10.140
<v Speaker 0>Let's kill siege.

00:38:10.140 --> 00:38:12.455
<v Speaker 0>That should all scale back down because the

00:38:12.455 --> 00:38:15.095
<v Speaker 0>CPU realization will no longer being used.

00:38:16.055 --> 00:38:16.855
<v Speaker 0>Alright.

00:38:17.735 --> 00:38:19.575
<v Speaker 0>Not ideal, right? Like

00:38:20.055 --> 00:38:22.615
<v Speaker 0>CPU based scaling. I mean, I always think

00:38:22.615 --> 00:38:23.815
<v Speaker 0>the CPU is

00:38:24.135 --> 00:38:25.095
<v Speaker 0>indicative

00:38:25.095 --> 00:38:25.415
<v Speaker 0>of,

00:38:26.220 --> 00:38:27.900
<v Speaker 0>you know, we we can saturate it. So

00:38:27.900 --> 00:38:29.500
<v Speaker 0>it's an important thing to kind of monitor

00:38:29.500 --> 00:38:31.340
<v Speaker 0>and keep an eye on but not something,

00:38:31.820 --> 00:38:33.660
<v Speaker 0>you know, if we talk about scaling being

00:38:33.660 --> 00:38:36.380
<v Speaker 0>a proactive rather than reactive thing CPU seems

00:38:36.380 --> 00:38:39.655
<v Speaker 0>like something that is worst case. Oh no,

00:38:39.655 --> 00:38:41.494
<v Speaker 0>like we don't have enough CPU. We need

00:38:41.494 --> 00:38:43.974
<v Speaker 0>more. And of course if we're running out

00:38:43.974 --> 00:38:45.975
<v Speaker 0>of CPUs, we've got other challenges. So

00:38:47.095 --> 00:38:48.694
<v Speaker 0>what we actually want to scale on is

00:38:48.694 --> 00:38:51.655
<v Speaker 0>well, if we know the average response time

00:38:51.655 --> 00:38:52.375
<v Speaker 0>for our application,

00:38:53.640 --> 00:38:56.520
<v Speaker 0>then if it gets below a certain

00:38:56.599 --> 00:38:58.839
<v Speaker 0>service level agreement or objective, then we want

00:38:58.839 --> 00:39:00.119
<v Speaker 0>to scale up as well to try and

00:39:00.119 --> 00:39:02.119
<v Speaker 0>bring that back under the under the value

00:39:02.119 --> 00:39:04.440
<v Speaker 0>that we're happy with. Does that make sense?

00:39:04.920 --> 00:39:08.055
<v Speaker 0>Okay. Yeah. Yeah. Totally. And CPU isn't

00:39:08.215 --> 00:39:10.055
<v Speaker 2>it's quite possible to have loads of CPU

00:39:10.055 --> 00:39:11.815
<v Speaker 2>left, but you've run out of network sockets

00:39:11.815 --> 00:39:12.375
<v Speaker 2>or

00:39:12.775 --> 00:39:15.175
<v Speaker 2>you've run out of processes or

00:39:15.895 --> 00:39:18.535
<v Speaker 0>Yeah. That's that's actually a fantastic point.

00:39:19.015 --> 00:39:19.415
<v Speaker 0>Thanks.

00:39:20.660 --> 00:39:21.860
<v Speaker 0>CPU is

00:39:22.260 --> 00:39:25.300
<v Speaker 0>CPU saturation is is one symptom but it's

00:39:25.300 --> 00:39:26.580
<v Speaker 0>not necessarily

00:39:27.700 --> 00:39:28.580
<v Speaker 0>what is

00:39:28.820 --> 00:39:30.900
<v Speaker 0>like, yeah. If we look at the response

00:39:30.900 --> 00:39:33.300
<v Speaker 0>time of a request that can actually be

00:39:32.835 --> 00:39:35.315
<v Speaker 0>the multiple symptoms could be driving that and

00:39:35.315 --> 00:39:37.635
<v Speaker 0>then that's that's better to monitor on.

00:39:38.195 --> 00:39:39.955
<v Speaker 2>Yeah. I was just thinking about a system

00:39:39.955 --> 00:39:43.235
<v Speaker 2>I worked on that had large binary downloads

00:39:43.635 --> 00:39:45.395
<v Speaker 2>and basically the network

00:39:45.730 --> 00:39:48.050
<v Speaker 2>card on the serve well, it's not a

00:39:48.050 --> 00:39:50.370
<v Speaker 2>real network card. The network could be capacity

00:39:50.370 --> 00:39:52.130
<v Speaker 2>of the server could be saturated and it's

00:39:52.130 --> 00:39:53.890
<v Speaker 2>not really doing anything. It's just serving a

00:39:53.890 --> 00:39:54.690
<v Speaker 2>big file.

00:39:56.130 --> 00:39:56.850
<v Speaker 2>Yep.

00:39:58.530 --> 00:40:00.370
<v Speaker 2>So what are you driving towards? You can

00:40:00.370 --> 00:40:02.155
<v Speaker 2>measure something better.

00:40:03.275 --> 00:40:03.915
<v Speaker 0>Yeah.

00:40:04.234 --> 00:40:06.234
<v Speaker 0>I mean I always think scaling

00:40:06.234 --> 00:40:09.115
<v Speaker 0>and monitoring is best done by our users

00:40:09.115 --> 00:40:10.474
<v Speaker 0>but we don't want them to report their

00:40:10.474 --> 00:40:12.155
<v Speaker 0>problem. We want it to be automated. So

00:40:12.155 --> 00:40:13.835
<v Speaker 0>for me I I wanna know

00:40:14.234 --> 00:40:16.470
<v Speaker 0>if I expect my PHP application to respond

00:40:16.470 --> 00:40:17.030
<v Speaker 0>in

00:40:17.270 --> 00:40:19.910
<v Speaker 0>eleven milliseconds or whatever siege was telling us

00:40:19.910 --> 00:40:20.710
<v Speaker 0>hopefully

00:40:20.790 --> 00:40:21.510
<v Speaker 0>then

00:40:22.470 --> 00:40:23.590
<v Speaker 0>we want to

00:40:24.070 --> 00:40:26.710
<v Speaker 0>monitor that going above what we expect and

00:40:26.790 --> 00:40:27.590
<v Speaker 0>scale it.

00:40:28.710 --> 00:40:29.030
<v Speaker 0>Okay.

00:40:31.265 --> 00:40:33.985
<v Speaker 0>Okay. We got a question from a Reza.

00:40:35.665 --> 00:40:37.665
<v Speaker 0>So run out of network socket, how does

00:40:37.665 --> 00:40:39.985
<v Speaker 0>Kubernetes gonna handle that? So there's two aspects

00:40:39.985 --> 00:40:41.985
<v Speaker 0>to auto scaling on Kubernetes.

00:40:42.945 --> 00:40:45.025
<v Speaker 0>The one we are focusing on today is

00:40:45.025 --> 00:40:47.170
<v Speaker 0>the scaling of the workload which means we're

00:40:47.170 --> 00:40:48.370
<v Speaker 0>gonna monitor for

00:40:49.570 --> 00:40:51.810
<v Speaker 0>metrics on the workload and our users to

00:40:51.810 --> 00:40:53.170
<v Speaker 0>scale those pods up.

00:40:54.530 --> 00:40:56.850
<v Speaker 0>If you want to monitor the platform to

00:40:56.850 --> 00:40:58.770
<v Speaker 0>scale the platform up then you have to

00:40:58.770 --> 00:41:00.555
<v Speaker 0>look at traditional

00:41:00.555 --> 00:41:02.955
<v Speaker 0>monitoring approaches like the

00:41:02.955 --> 00:41:05.994
<v Speaker 0>CPU, the network, the desk on your Linux

00:41:05.994 --> 00:41:08.555
<v Speaker 0>system and then horizontally scale the nodes in

00:41:08.555 --> 00:41:10.234
<v Speaker 0>your Kubernetes cluster to make sure you have

00:41:10.234 --> 00:41:11.835
<v Speaker 0>the capacity to scale the pods that are

00:41:11.835 --> 00:41:12.990
<v Speaker 0>running on the cluster.

00:41:14.350 --> 00:41:16.590
<v Speaker 0>Two very very different things

00:41:17.150 --> 00:41:19.150
<v Speaker 0>and maybe that's a good idea for another

00:41:19.150 --> 00:41:20.990
<v Speaker 0>episode but definitely not something we're gonna be

00:41:20.990 --> 00:41:21.950
<v Speaker 0>covering today

00:41:22.750 --> 00:41:24.350
<v Speaker 0>but I do love talking about monitoring in

00:41:24.350 --> 00:41:25.310
<v Speaker 0>general so.

00:41:25.950 --> 00:41:26.670
<v Speaker 0>Thanks for the question.

00:41:27.984 --> 00:41:30.625
<v Speaker 0>Okay. Let me see if I can find

00:41:30.625 --> 00:41:31.345
<v Speaker 0>any

00:41:32.145 --> 00:41:34.225
<v Speaker 0>sensible conscious human thought today.

00:41:34.545 --> 00:41:35.984
<v Speaker 0>There are two ways for us to get

00:41:35.984 --> 00:41:38.065
<v Speaker 0>some metrics out of our Laravel application.

00:41:38.385 --> 00:41:39.825
<v Speaker 0>One that involves us writing

00:41:40.260 --> 00:41:42.420
<v Speaker 0>code and modifying our application

00:41:42.900 --> 00:41:44.260
<v Speaker 0>and one that doesn't.

00:41:45.140 --> 00:41:46.580
<v Speaker 0>Keenan, you got a preference.

00:41:48.740 --> 00:41:49.860
<v Speaker 0>Alex, you got a preference.

00:41:52.914 --> 00:41:54.755
<v Speaker 1>If you can change no code and get

00:41:54.755 --> 00:41:56.915
<v Speaker 1>the same result, that's preferable.

00:41:57.075 --> 00:41:58.674
<v Speaker 0>It's also the dubious one, but I'm gonna

00:41:58.674 --> 00:42:00.195
<v Speaker 0>give it my best shot. So

00:42:02.355 --> 00:42:05.234
<v Speaker 1>because inevitably, when you get code required for

00:42:05.234 --> 00:42:06.035
<v Speaker 1>monitoring,

00:42:06.515 --> 00:42:09.180
<v Speaker 1>new sections of code might not monitor it

00:42:09.180 --> 00:42:09.980
<v Speaker 1>appropriately.

00:42:09.980 --> 00:42:11.340
<v Speaker 1>Whereas if it's automated

00:42:11.420 --> 00:42:12.140
<v Speaker 1>or

00:42:12.460 --> 00:42:14.780
<v Speaker 1>abstracted away, then it should be just handled,

00:42:14.780 --> 00:42:16.380
<v Speaker 1>and you're not relying on somebody doing that

00:42:16.380 --> 00:42:16.860
<v Speaker 1>work.

00:42:17.180 --> 00:42:18.859
<v Speaker 2>Yeah. Yeah. A lot of developers aren't thinking

00:42:18.859 --> 00:42:20.619
<v Speaker 2>about those concerns, are they, when they're writing

00:42:20.619 --> 00:42:22.540
<v Speaker 2>it? No. And you don't really want them

00:42:22.540 --> 00:42:23.500
<v Speaker 1>to think about that either.

00:42:24.204 --> 00:42:25.565
<v Speaker 0>I think we're gonna It should be it

00:42:25.565 --> 00:42:27.325
<v Speaker 1>should be a level of abstraction between

00:42:27.805 --> 00:42:30.285
<v Speaker 1>why it works in production efficiently

00:42:30.285 --> 00:42:31.565
<v Speaker 1>and why

00:42:33.645 --> 00:42:34.445
<v Speaker 1>like

00:42:34.525 --> 00:42:36.204
<v Speaker 1>you're coding it in a certain way, I

00:42:36.204 --> 00:42:36.685
<v Speaker 1>guess.

00:42:37.484 --> 00:42:39.325
<v Speaker 0>Okay. Let's try and do both. Right? I

00:42:38.940 --> 00:42:40.540
<v Speaker 0>think we've got enough time to do this

00:42:40.540 --> 00:42:41.340
<v Speaker 0>and

00:42:41.579 --> 00:42:43.500
<v Speaker 0>I think they're both valuable.

00:42:44.140 --> 00:42:46.380
<v Speaker 0>So when we run-in Kubernetes we actually have

00:42:46.380 --> 00:42:48.060
<v Speaker 0>access to a part and called a sidecar,

00:42:48.060 --> 00:42:49.740
<v Speaker 0>a sidecar means that we run an extra

00:42:49.740 --> 00:42:52.300
<v Speaker 0>container and the pod allows

00:42:51.615 --> 00:42:54.494
<v Speaker 0>that shares the same networking namespace, pet namespace

00:42:54.494 --> 00:42:57.055
<v Speaker 0>and a few others bits and pieces together.

00:42:57.615 --> 00:42:58.975
<v Speaker 0>One of the things that one of the

00:42:58.975 --> 00:43:00.735
<v Speaker 0>really useful use cases for that

00:43:01.055 --> 00:43:03.295
<v Speaker 0>is generally called service mesh even though I

00:43:03.295 --> 00:43:05.535
<v Speaker 0>don't want to use service mesh today but

00:43:05.535 --> 00:43:07.550
<v Speaker 0>I can still use that proxy effect to

00:43:07.550 --> 00:43:09.230
<v Speaker 0>capture all of the requests that come in

00:43:09.230 --> 00:43:10.430
<v Speaker 0>and out of our application.

00:43:11.150 --> 00:43:12.590
<v Speaker 0>In theory, what we should be able to

00:43:12.590 --> 00:43:14.430
<v Speaker 0>do is deploy linker d to this Kubernetes

00:43:14.430 --> 00:43:15.150
<v Speaker 0>cluster,

00:43:15.230 --> 00:43:17.630
<v Speaker 0>have it inject the proxy into our Laravel

00:43:17.630 --> 00:43:18.430
<v Speaker 0>application

00:43:18.510 --> 00:43:21.204
<v Speaker 0>and then have it expose response time metrics

00:43:21.204 --> 00:43:23.204
<v Speaker 0>on each request that comes out of our

00:43:23.204 --> 00:43:23.925
<v Speaker 0>container

00:43:24.484 --> 00:43:27.125
<v Speaker 0>without writing any single code. I think that

00:43:27.125 --> 00:43:28.645
<v Speaker 0>would be pretty neat. So

00:43:28.885 --> 00:43:30.085
<v Speaker 0>we'll give it a go.

00:43:32.645 --> 00:43:33.045
<v Speaker 0>Okay.

00:43:35.250 --> 00:43:36.930
<v Speaker 0>Pretty sure we don't need to use the

00:43:36.930 --> 00:43:37.810
<v Speaker 0>linker d

00:43:39.090 --> 00:43:39.970
<v Speaker 0>CLI

00:43:39.970 --> 00:43:40.610
<v Speaker 0>but

00:43:41.490 --> 00:43:42.530
<v Speaker 0>we may as well.

00:43:44.130 --> 00:43:45.650
<v Speaker 0>Why not? I'm pretty sure I can just

00:43:45.650 --> 00:43:47.890
<v Speaker 0>apply a manifest

00:43:47.405 --> 00:43:49.405
<v Speaker 0>rather than do this. I just don't know

00:43:49.405 --> 00:43:51.085
<v Speaker 0>if it's gonna be documented here.

00:43:51.484 --> 00:43:53.244
<v Speaker 0>Yeah. So we'll just move it to the

00:43:53.244 --> 00:43:54.045
<v Speaker 0>CLI.

00:43:56.765 --> 00:43:58.285
<v Speaker 0>Hopefully it's nice and quick.

00:43:59.805 --> 00:44:01.450
<v Speaker 0>I really need to start taking notes of

00:44:01.450 --> 00:44:03.290
<v Speaker 0>stuff to install before the streams like you

00:44:03.290 --> 00:44:05.050
<v Speaker 0>know all of sudden watching brew run.

00:44:05.370 --> 00:44:07.210
<v Speaker 0>How's brew on the m one Kieran? Is

00:44:07.210 --> 00:44:09.450
<v Speaker 0>it better? Is it fixed? Does it work?

00:44:10.570 --> 00:44:12.570
<v Speaker 0>How do you mean? I think when the

00:44:12.570 --> 00:44:14.330
<v Speaker 0>m ones first came out brew didn't work.

00:44:14.330 --> 00:44:15.605
<v Speaker 2>Oh yeah yeah. Well,

00:44:15.845 --> 00:44:17.045
<v Speaker 2>day one, I was able to get home

00:44:17.045 --> 00:44:17.925
<v Speaker 2>brew working.

00:44:18.484 --> 00:44:19.045
<v Speaker 2>But

00:44:19.285 --> 00:44:20.405
<v Speaker 2>at the time,

00:44:21.525 --> 00:44:24.565
<v Speaker 2>everything had to build from source. Okay.

00:44:25.045 --> 00:44:26.484
<v Speaker 2>And a lot of things believe that

00:44:27.140 --> 00:44:29.060
<v Speaker 1>they've released version three of Homebrew now, which

00:44:29.060 --> 00:44:30.660
<v Speaker 1>I think has resolved all of those problems.

00:44:30.660 --> 00:44:32.020
<v Speaker 1>Or like a lot of them anyway.

00:44:32.900 --> 00:44:35.060
<v Speaker 2>Yeah. Pretty much. So you could get Homebrew

00:44:35.060 --> 00:44:37.860
<v Speaker 2>two working really quickly and almost I I

00:44:37.860 --> 00:44:38.580
<v Speaker 2>got my

00:44:38.900 --> 00:44:40.740
<v Speaker 2>laptop a few weeks after they were available

00:44:40.740 --> 00:44:42.580
<v Speaker 2>and a few a few of the

00:44:43.025 --> 00:44:45.505
<v Speaker 2>packages had bottles already. They call them a

00:44:45.505 --> 00:44:47.505
<v Speaker 2>bottle. Right? The pre compiled thing.

00:44:47.905 --> 00:44:49.265
<v Speaker 2>Few of them had already got it, but

00:44:49.265 --> 00:44:51.025
<v Speaker 2>most of them are building from source and

00:44:51.345 --> 00:44:53.105
<v Speaker 2>it's just slowly been filling out.

00:44:53.825 --> 00:44:55.425
<v Speaker 2>And the ones that didn't build from source

00:44:55.425 --> 00:44:58.065
<v Speaker 2>got patched pretty quick. So with Homebrew three,

00:45:00.580 --> 00:45:02.020
<v Speaker 2>you don't have to I had a couple

00:45:02.020 --> 00:45:03.540
<v Speaker 2>of manual steps to install it, but you

00:45:03.540 --> 00:45:05.140
<v Speaker 2>don't need that anymore. It just works.

00:45:05.700 --> 00:45:07.220
<v Speaker 2>And anything that doesn't work, you can run

00:45:07.220 --> 00:45:09.460
<v Speaker 2>under as an Intel package anyway.

00:45:10.740 --> 00:45:12.660
<v Speaker 0>Yeah. It's got that translation there, doesn't it?

00:45:13.875 --> 00:45:15.475
<v Speaker 2>Yeah. Which works really well.

00:45:15.795 --> 00:45:17.875
<v Speaker 2>You don't you don't you're not really aware

00:45:17.875 --> 00:45:19.475
<v Speaker 2>of it. You can just run an intel

00:45:19.475 --> 00:45:20.195
<v Speaker 2>binary

00:45:20.835 --> 00:45:23.555
<v Speaker 2>and it transpiles it somewhere

00:45:24.115 --> 00:45:27.155
<v Speaker 2>and stores the transpiled version. Some magic somewhere

00:45:27.155 --> 00:45:28.755
<v Speaker 1>in

00:45:28.359 --> 00:45:29.560
<v Speaker 0>I mean, I don't want to Transpiles the

00:45:29.560 --> 00:45:30.280
<v Speaker 2>binary

00:45:30.520 --> 00:45:33.480
<v Speaker 2>to an ARM binary and stashes that away

00:45:33.480 --> 00:45:34.920
<v Speaker 2>somewhere for future use.

00:45:35.400 --> 00:45:37.400
<v Speaker 0>Yeah. I I don't I don't wanna segue

00:45:37.400 --> 00:45:39.000
<v Speaker 0>or deviate too much from what we're talking

00:45:39.000 --> 00:45:41.255
<v Speaker 0>about but like I read a really impressive

00:45:41.255 --> 00:45:44.855
<v Speaker 0>article where they were saying that the Rosetta

00:45:45.495 --> 00:45:48.455
<v Speaker 0>compilation translation and then running of the binary

00:45:48.535 --> 00:45:50.695
<v Speaker 0>was actually faster than some Intel chips

00:45:51.510 --> 00:45:53.830
<v Speaker 0>on the m one, which to me just

00:45:53.830 --> 00:45:55.190
<v Speaker 0>seems ridiculous.

00:45:55.830 --> 00:45:57.590
<v Speaker 1>That doesn't surprise me. Yeah.

00:45:58.390 --> 00:46:00.550
<v Speaker 0>Yeah. Let's go back Because the designing

00:46:00.710 --> 00:46:02.390
<v Speaker 2>because the chips designed for this use, there's

00:46:02.390 --> 00:46:05.135
<v Speaker 2>there's some instructions and a whole memory access

00:46:05.135 --> 00:46:07.935
<v Speaker 2>mode that's only there to make Rosetta work.

00:46:09.055 --> 00:46:10.415
<v Speaker 2>But if you're building an ARM chip from

00:46:10.415 --> 00:46:11.535
<v Speaker 2>scratch, you wouldn't have.

00:46:12.255 --> 00:46:13.535
<v Speaker 0>Okay. Cool. Alright.

00:46:14.655 --> 00:46:17.280
<v Speaker 0>I've taken the resources off of this just

00:46:17.280 --> 00:46:18.880
<v Speaker 0>so that we can have a better flexibility

00:46:18.880 --> 00:46:20.320
<v Speaker 0>as we deploy this.

00:46:20.560 --> 00:46:22.800
<v Speaker 0>I'm gonna reapply this. What we should see

00:46:22.800 --> 00:46:26.000
<v Speaker 0>is it's really nothing yet on directory

00:46:26.400 --> 00:46:28.960
<v Speaker 0>other than those resources being changed and we

00:46:28.960 --> 00:46:30.800
<v Speaker 0>can confirm that with a get pods

00:46:31.395 --> 00:46:33.475
<v Speaker 0>and you can see our application still has

00:46:33.475 --> 00:46:36.115
<v Speaker 0>two containers, which is NGINX and

00:46:36.835 --> 00:46:37.715
<v Speaker 0>FBM.

00:46:38.675 --> 00:46:40.435
<v Speaker 0>What we want to leverage with linker Dino

00:46:40.435 --> 00:46:42.435
<v Speaker 0>running in our cluster, I'm hoping that it's

00:46:42.435 --> 00:46:42.915
<v Speaker 0>healthy.

00:46:43.599 --> 00:46:45.520
<v Speaker 0>Maybe I should just check that anyway.

00:46:46.480 --> 00:46:48.000
<v Speaker 0>Yeah. Nice.

00:46:49.680 --> 00:46:51.599
<v Speaker 0>Is that we can now use something called

00:46:51.599 --> 00:46:53.120
<v Speaker 0>automatic sidecar

00:46:53.200 --> 00:46:56.079
<v Speaker 0>injection to add the third container to our

00:46:56.079 --> 00:46:58.475
<v Speaker 0>pod, which gives us all the proxy support.

00:46:59.915 --> 00:47:01.435
<v Speaker 0>I've never done this before,

00:47:01.915 --> 00:47:03.355
<v Speaker 0>but I'm confident.

00:47:04.635 --> 00:47:07.195
<v Speaker 0>So yeah, automatic proxy injection. I mean, I've

00:47:07.195 --> 00:47:08.970
<v Speaker 0>used like a d before. I haven't done

00:47:08.970 --> 00:47:11.450
<v Speaker 0>it quite in this scenario, so I'm sure

00:47:11.450 --> 00:47:12.410
<v Speaker 0>it'll be fine.

00:47:12.810 --> 00:47:14.090
<v Speaker 0>And all we need to do is add

00:47:14.090 --> 00:47:15.450
<v Speaker 0>an annotation

00:47:16.490 --> 00:47:17.850
<v Speaker 0>to our

00:47:20.010 --> 00:47:22.090
<v Speaker 0>manifest. In fact, here's one here

00:47:23.445 --> 00:47:26.085
<v Speaker 0>and we will change it to enabled obviously.

00:47:28.485 --> 00:47:29.365
<v Speaker 0>Metadata

00:47:29.845 --> 00:47:31.045
<v Speaker 0>annotations

00:47:32.005 --> 00:47:32.885
<v Speaker 0>enabled.

00:47:34.165 --> 00:47:36.040
<v Speaker 0>This should give us that third

00:47:36.440 --> 00:47:37.160
<v Speaker 0>container.

00:47:44.359 --> 00:47:47.799
<v Speaker 0>Well, that wasn't very nice, was it? The

00:47:47.799 --> 00:47:51.115
<v Speaker 1>documentation says something about rollout restart or something.

00:47:51.115 --> 00:47:53.195
<v Speaker 0>Yeah. The annotations, I don't think will trigger

00:47:53.195 --> 00:47:55.435
<v Speaker 0>the the so the way that this works

00:47:55.435 --> 00:47:57.755
<v Speaker 0>is that's a linker to the machine controller

00:47:57.755 --> 00:47:59.995
<v Speaker 0>in the cluster, which monitors for the deployment

00:47:59.995 --> 00:48:01.035
<v Speaker 0>being created.

00:48:01.835 --> 00:48:03.595
<v Speaker 0>I think if I just did this.

00:48:06.810 --> 00:48:08.090
<v Speaker 0>No. So that's

00:48:08.650 --> 00:48:10.890
<v Speaker 1>is this basically the Kubernetes version turn off

00:48:10.890 --> 00:48:12.410
<v Speaker 1>and on again, delete the pod and recreate

00:48:12.410 --> 00:48:12.970
<v Speaker 1>it?

00:48:13.210 --> 00:48:14.970
<v Speaker 0>I deleted the deployment. Yeah.

00:48:15.370 --> 00:48:17.690
<v Speaker 0>Alright. Maybe I need to enable linker Did

00:48:17.690 --> 00:48:18.650
<v Speaker 2>you do that production often?

00:48:21.025 --> 00:48:21.825
<v Speaker 0>Would I?

00:48:22.385 --> 00:48:24.385
<v Speaker 0>Yeah. Of course I would.

00:48:27.425 --> 00:48:29.825
<v Speaker 0>Alright. So why does it not work?

00:48:36.630 --> 00:48:38.630
<v Speaker 0>I can always do it the manual way

00:48:38.630 --> 00:48:40.150
<v Speaker 0>if I really need to, but I wanted

00:48:40.150 --> 00:48:42.070
<v Speaker 0>to use the nice shiny way.

00:48:45.109 --> 00:48:46.710
<v Speaker 0>Yeah. So let's just do it the manual

00:48:46.710 --> 00:48:48.869
<v Speaker 0>way. But this does it at a manifest

00:48:48.869 --> 00:48:50.655
<v Speaker 0>level rather than doing it through the admission

00:48:50.655 --> 00:48:51.455
<v Speaker 0>controller.

00:48:53.215 --> 00:48:54.415
<v Speaker 0>That's what I get for trying to do

00:48:54.415 --> 00:48:55.935
<v Speaker 0>something that I hadn't done before.

00:48:56.895 --> 00:48:57.455
<v Speaker 0>Resources,

00:48:57.775 --> 00:48:58.495
<v Speaker 0>ops,

00:48:58.575 --> 00:49:00.015
<v Speaker 0>deployment, Kubernetes

00:49:00.495 --> 00:49:01.375
<v Speaker 0>deployment.

00:49:01.855 --> 00:49:03.295
<v Speaker 0>And like a d inject, we'll add that

00:49:03.295 --> 00:49:05.270
<v Speaker 0>container and then we'll redeploy it.

00:49:06.790 --> 00:49:08.150
<v Speaker 0>And now we should have one.

00:49:08.550 --> 00:49:09.910
<v Speaker 0>So sucks that I had to do it

00:49:09.910 --> 00:49:11.590
<v Speaker 0>manually, but as long as we get it

00:49:11.590 --> 00:49:13.430
<v Speaker 0>working, I'm not too fast. So now we

00:49:13.430 --> 00:49:14.710
<v Speaker 0>have a third container.

00:49:17.430 --> 00:49:18.950
<v Speaker 0>And we don't need to describe it, but

00:49:18.950 --> 00:49:20.695
<v Speaker 0>you know, this is just a proxy

00:49:21.095 --> 00:49:23.815
<v Speaker 0>and what we really should see here is

00:49:23.815 --> 00:49:25.815
<v Speaker 0>if we color port forward and start that

00:49:25.815 --> 00:49:28.295
<v Speaker 0>again is that our application still functions as

00:49:28.295 --> 00:49:29.015
<v Speaker 0>normal.

00:49:31.095 --> 00:49:32.535
<v Speaker 0>I love it that my voice goes high

00:49:32.535 --> 00:49:33.734
<v Speaker 0>pitched when I see that as if it's

00:49:33.734 --> 00:49:36.490
<v Speaker 0>a question but. Yeah, that's normal.

00:49:37.130 --> 00:49:37.690
<v Speaker 0>Yeah,

00:49:38.089 --> 00:49:39.770
<v Speaker 0>as normal however

00:49:40.329 --> 00:49:41.930
<v Speaker 0>every request and

00:49:42.490 --> 00:49:44.730
<v Speaker 0>as going through linker d which

00:49:45.849 --> 00:49:49.049
<v Speaker 0>means if we pull and expose the metrics

00:49:49.049 --> 00:49:51.295
<v Speaker 0>from linker d we should be able to

00:49:51.295 --> 00:49:53.935
<v Speaker 0>see a little bit of information about how

00:49:53.935 --> 00:49:55.615
<v Speaker 0>long those requests take.

00:49:57.135 --> 00:49:58.255
<v Speaker 0>And I'm sure

00:49:58.495 --> 00:49:59.775
<v Speaker 0>there is a

00:50:00.415 --> 00:50:02.335
<v Speaker 0>command I can steal to do that too.

00:50:04.109 --> 00:50:05.470
<v Speaker 0>And metrics.

00:50:06.589 --> 00:50:07.710
<v Speaker 0>Yeah. There we go.

00:50:08.670 --> 00:50:09.390
<v Speaker 0>So

00:50:10.510 --> 00:50:10.990
<v Speaker 0>see.

00:50:11.630 --> 00:50:13.549
<v Speaker 0>Getting data from the proxies,

00:50:13.549 --> 00:50:15.230
<v Speaker 0>put forward. Oh, there is the UI as

00:50:15.230 --> 00:50:16.430
<v Speaker 0>well actually. I wonder if we could just

00:50:16.430 --> 00:50:18.745
<v Speaker 0>browse to the UI. We

00:50:19.545 --> 00:50:21.145
<v Speaker 0>all like UIs, don't we?

00:50:23.945 --> 00:50:26.345
<v Speaker 0>What's the namespace? Nope. Has it got its

00:50:26.345 --> 00:50:26.905
<v Speaker 0>own?

00:50:28.505 --> 00:50:29.145
<v Speaker 0>There we go.

00:50:31.960 --> 00:50:33.560
<v Speaker 0>Port forward.

00:50:33.640 --> 00:50:35.080
<v Speaker 0>Link to the web.

00:50:36.600 --> 00:50:38.120
<v Speaker 0>I really should have looked to see what

00:50:38.120 --> 00:50:39.960
<v Speaker 0>port it runs on. It was like four

00:50:39.960 --> 00:50:41.560
<v Speaker 1>two nine one, I think.

00:50:48.025 --> 00:50:50.265
<v Speaker 0>We're about to find out. No.

00:50:53.385 --> 00:50:54.905
<v Speaker 1>I was close. If you go to documentation,

00:50:54.905 --> 00:50:56.025
<v Speaker 1>was definitely a four involved.

00:50:59.140 --> 00:51:02.260
<v Speaker 0>Four one nine one. Okay. No. That's not

00:51:02.500 --> 00:51:04.900
<v Speaker 0>the UI port though. Oh, is it? Okay.

00:51:04.900 --> 00:51:06.580
<v Speaker 0>Right now. Yeah. So

00:51:07.940 --> 00:51:08.900
<v Speaker 0>Show

00:51:11.140 --> 00:51:13.185
<v Speaker 0>me the UI please. Please.

00:51:18.145 --> 00:51:19.985
<v Speaker 0>Might just gonna have to Google that linker

00:51:19.985 --> 00:51:21.665
<v Speaker 0>the UI. In fact,

00:51:22.705 --> 00:51:24.625
<v Speaker 0>might as well show people the Kubernetes we're

00:51:24.625 --> 00:51:26.490
<v Speaker 0>doing this right. You don't always need to

00:51:26.490 --> 00:51:27.530
<v Speaker 0>go to the dock. So we can see

00:51:27.530 --> 00:51:28.890
<v Speaker 0>that we have a pod here. We can

00:51:28.890 --> 00:51:30.490
<v Speaker 0>just describe it and see what ports are

00:51:30.490 --> 00:51:31.130
<v Speaker 0>available.

00:51:31.610 --> 00:51:32.170
<v Speaker 0>So

00:51:33.610 --> 00:51:34.730
<v Speaker 0>where

00:51:34.730 --> 00:51:35.690
<v Speaker 0>we got

00:51:36.490 --> 00:51:37.370
<v Speaker 0>ports

00:51:37.370 --> 00:51:38.410
<v Speaker 0>4191

00:51:38.410 --> 00:51:41.365
<v Speaker 0>may actually be the port Either 4143.

00:51:41.365 --> 00:51:41.925
<v Speaker 0>So

00:51:43.365 --> 00:51:44.725
<v Speaker 0>4191.

00:51:46.005 --> 00:51:48.405
<v Speaker 1>On that on that documentation,

00:51:48.405 --> 00:51:52.405
<v Speaker 1>there's a something here which is exposing dashboard,

00:51:52.405 --> 00:51:54.005
<v Speaker 1>which is port eighty eighty four.

00:51:55.839 --> 00:51:57.440
<v Speaker 0>80 80 four. Eight

00:51:57.760 --> 00:52:00.720
<v Speaker 1>zero eight four. But I'm

00:52:00.720 --> 00:52:03.200
<v Speaker 1>not really sure what it's looking

00:52:03.200 --> 00:52:03.760
<v Speaker 1>at.

00:52:04.000 --> 00:52:07.920
<v Speaker 0>It's just called. We'll

00:52:07.920 --> 00:52:08.480
<v Speaker 0>get there. Okay.

00:52:10.745 --> 00:52:13.065
<v Speaker 0>This I'm not familiar with but I do.

00:52:13.065 --> 00:52:15.065
<v Speaker 0>I am. This is cool.

00:52:15.705 --> 00:52:17.465
<v Speaker 0>Let's see. Ritz.

00:52:17.785 --> 00:52:18.505
<v Speaker 0>Nope.

00:52:18.905 --> 00:52:21.305
<v Speaker 0>Is this just gonna be service meshy stuff?

00:52:21.385 --> 00:52:22.425
<v Speaker 0>Deployments.

00:52:22.505 --> 00:52:24.345
<v Speaker 0>Here's our Laravel application.

00:52:27.160 --> 00:52:29.080
<v Speaker 0>I can see our embed successes.

00:52:29.160 --> 00:52:30.920
<v Speaker 0>Oh, things are working well. I guess we

00:52:30.920 --> 00:52:32.520
<v Speaker 0>can break that with running siege.

00:52:35.080 --> 00:52:36.840
<v Speaker 1>Wait. Which UI are we looking at here?

00:52:36.840 --> 00:52:38.520
<v Speaker 1>Is this the Kubernetes

00:52:38.145 --> 00:52:40.625
<v Speaker 1>UI or is this Linkerd one? This is

00:52:40.625 --> 00:52:41.985
<v Speaker 0>Linkerd's UI. Linkerd.

00:52:42.465 --> 00:52:43.745
<v Speaker 1>Oh, it's just because it shows all that

00:52:43.745 --> 00:52:45.345
<v Speaker 1>stuff like the cron jobs and daemon sets

00:52:45.345 --> 00:52:47.265
<v Speaker 1>and deployments and stuff. Okay.

00:52:48.465 --> 00:52:49.265
<v Speaker 0>Yeah.

00:52:49.265 --> 00:52:52.640
<v Speaker 0>Because Linkerd can inject its proxy into any

00:52:52.640 --> 00:52:55.200
<v Speaker 0>of these resources. You can kind of break

00:52:55.200 --> 00:52:56.640
<v Speaker 0>it down and take a look at it.

00:52:57.920 --> 00:52:59.119
<v Speaker 0>So we can get let's go to our

00:52:59.119 --> 00:53:00.160
<v Speaker 0>route metrics.

00:53:02.240 --> 00:53:04.079
<v Speaker 0>We can see some stuff here. Okay.

00:53:05.675 --> 00:53:08.235
<v Speaker 0>Is it good? Does it drill down anymore?

00:53:09.515 --> 00:53:11.755
<v Speaker 0>No. Not really. What's this Grafana link? Does

00:53:11.755 --> 00:53:13.435
<v Speaker 0>it really deploy Grafana too?

00:53:19.130 --> 00:53:20.970
<v Speaker 1>That's not like it's just made your day.

00:53:21.050 --> 00:53:21.610
<v Speaker 1>That

00:53:23.130 --> 00:53:23.930
<v Speaker 0>is awesome.

00:53:24.890 --> 00:53:26.570
<v Speaker 0>Yeah. I should be more familiar with like

00:53:26.570 --> 00:53:27.690
<v Speaker 0>a d but I

00:53:28.410 --> 00:53:30.730
<v Speaker 0>I'm very impressed with that deploy

00:53:30.730 --> 00:53:32.650
<v Speaker 0>setting all of this up. That is awesome.

00:53:33.095 --> 00:53:35.414
<v Speaker 0>Alright. Let's run siege. Let's let's break this,

00:53:35.414 --> 00:53:36.295
<v Speaker 0>right? So

00:53:37.174 --> 00:53:37.734
<v Speaker 0>and

00:53:38.615 --> 00:53:40.055
<v Speaker 0>then we'll hook up the auto scaler to

00:53:40.055 --> 00:53:42.455
<v Speaker 0>it based on those metrics. So we

00:53:42.934 --> 00:53:45.174
<v Speaker 0>just wanna port forward to our Laravel application

00:53:45.174 --> 00:53:46.694
<v Speaker 0>again. I don't think I have that running

00:53:46.694 --> 00:53:47.095
<v Speaker 0>anywhere.

00:53:52.730 --> 00:53:56.170
<v Speaker 0>Pack a different port. 7,000.

00:53:58.090 --> 00:54:00.010
<v Speaker 0>I don't have it running. Okay. It doesn't

00:54:00.010 --> 00:54:00.810
<v Speaker 0>really matter though.

00:54:04.065 --> 00:54:05.985
<v Speaker 0>I got paired directory history as well. So

00:54:05.985 --> 00:54:07.265
<v Speaker 0>I need to go into the right directory

00:54:07.265 --> 00:54:08.465
<v Speaker 0>to get my command

00:54:09.425 --> 00:54:10.865
<v Speaker 0>now on 7,000.

00:54:12.465 --> 00:54:13.985
<v Speaker 0>Let's turn on refresh

00:54:14.385 --> 00:54:17.819
<v Speaker 0>last five minutes, refresh every five seconds. Let's

00:54:17.819 --> 00:54:19.420
<v Speaker 0>see if we can see some charts go

00:54:19.420 --> 00:54:20.300
<v Speaker 0>crazy here.

00:54:22.859 --> 00:54:24.940
<v Speaker 0>Can't believe it. Not only does it like,

00:54:24.940 --> 00:54:25.500
<v Speaker 0>so

00:54:26.380 --> 00:54:28.299
<v Speaker 0>by just running linker DNS cluster,

00:54:29.065 --> 00:54:30.905
<v Speaker 0>adding the proxy container.

00:54:31.385 --> 00:54:34.185
<v Speaker 0>We've got linker DUI showing which services are

00:54:34.185 --> 00:54:36.585
<v Speaker 0>communicating with each other. We've got Grafana provisioned

00:54:36.585 --> 00:54:39.385
<v Speaker 0>with pre canned dashboards to show us request

00:54:39.385 --> 00:54:41.385
<v Speaker 0>information and we can already see the latency

00:54:41.385 --> 00:54:42.720
<v Speaker 0>here spiking.

00:54:43.680 --> 00:54:44.800
<v Speaker 0>That's really cool.

00:54:45.600 --> 00:54:47.200
<v Speaker 0>That wasn't supposed to turn into a plug

00:54:47.200 --> 00:54:48.480
<v Speaker 0>for linker d but I feel like I'm

00:54:48.480 --> 00:54:49.680
<v Speaker 0>just gonna have to keep saying nice things

00:54:49.680 --> 00:54:50.560
<v Speaker 0>about it now.

00:54:53.120 --> 00:54:55.760
<v Speaker 0>So we can see all these metrics

00:54:55.494 --> 00:54:57.734
<v Speaker 0>going a little wild now so. So it

00:54:57.734 --> 00:54:59.895
<v Speaker 1>looks like latency is actually in hitting like

00:54:59.895 --> 00:55:01.335
<v Speaker 1>ten to twenty seconds.

00:55:01.895 --> 00:55:03.335
<v Speaker 0>Was that not two seconds?

00:55:04.455 --> 00:55:06.455
<v Speaker 1>Oh is it god I can't the resolution

00:55:06.455 --> 00:55:08.295
<v Speaker 1>is not great, is that? Yeah there's the

00:55:08.295 --> 00:55:10.615
<v Speaker 0>one downside to Grafana and zooming is

00:55:11.130 --> 00:55:12.570
<v Speaker 0>not great.

00:55:13.450 --> 00:55:15.769
<v Speaker 0>Just because it's so visual of course. But

00:55:15.769 --> 00:55:17.450
<v Speaker 0>yeah, that's two seconds.

00:55:18.250 --> 00:55:20.650
<v Speaker 2>Okay. Which isn't great but it's okay.

00:55:21.049 --> 00:55:22.490
<v Speaker 1>It's better than twenty It's great. Age.

00:55:24.185 --> 00:55:25.625
<v Speaker 1>Well, yeah.

00:55:26.825 --> 00:55:28.505
<v Speaker 1>Yeah. A page which returns to words like

00:55:28.505 --> 00:55:30.185
<v Speaker 1>hello world. That's it.

00:55:30.985 --> 00:55:32.665
<v Speaker 0>Okay. So one of the things we should

00:55:32.665 --> 00:55:34.105
<v Speaker 0>be able to do is

00:55:34.905 --> 00:55:36.345
<v Speaker 0>if we go to just

00:55:37.145 --> 00:55:38.025
<v Speaker 0>explore,

00:55:38.185 --> 00:55:39.900
<v Speaker 0>this is gonna give us raw access to

00:55:39.900 --> 00:55:41.819
<v Speaker 0>Prometheus and we should be able to query

00:55:41.819 --> 00:55:44.220
<v Speaker 0>the metrics that Linkerd is creating for us

00:55:44.220 --> 00:55:45.420
<v Speaker 0>for our service.

00:55:46.619 --> 00:55:48.299
<v Speaker 0>I kinda wish I had access to the

00:55:48.299 --> 00:55:51.339
<v Speaker 0>Prometheus UI, I'm not that we'll do it

00:55:51.339 --> 00:55:52.715
<v Speaker 0>from a dashboard right? Cause we know the

00:55:52.715 --> 00:55:54.155
<v Speaker 0>metrics that we want to monitor on which

00:55:54.155 --> 00:55:54.875
<v Speaker 0>is the,

00:55:55.355 --> 00:55:57.275
<v Speaker 0>we'll use latency for today.

00:55:57.435 --> 00:55:59.435
<v Speaker 0>So let's click edit on this and see

00:55:59.435 --> 00:56:01.115
<v Speaker 0>what that query looks like and then we

00:56:01.115 --> 00:56:02.635
<v Speaker 0>can use that as a basis for our

00:56:02.635 --> 00:56:04.235
<v Speaker 0>auto scaling. So

00:56:05.435 --> 00:56:06.235
<v Speaker 0>we can see here,

00:56:09.770 --> 00:56:12.970
<v Speaker 0>So the histogram ninety fifth percentile

00:56:12.970 --> 00:56:15.450
<v Speaker 0>is doing a sum across

00:56:16.090 --> 00:56:17.210
<v Speaker 0>rate interval

00:56:17.530 --> 00:56:20.570
<v Speaker 0>looking at response latency millisecond bucket

00:56:21.050 --> 00:56:22.875
<v Speaker 0>and it's doing the

00:56:23.195 --> 00:56:24.635
<v Speaker 0>rate over thirty seconds.

00:56:28.155 --> 00:56:29.755
<v Speaker 0>That kind of helps.

00:56:32.955 --> 00:56:35.460
<v Speaker 0>So we know that we have this available.

00:56:35.460 --> 00:56:37.220
<v Speaker 0>So I'm just gonna copy that metric name

00:56:37.220 --> 00:56:38.100
<v Speaker 0>and then

00:56:39.300 --> 00:56:41.140
<v Speaker 0>we're gonna go back to explorer

00:56:41.140 --> 00:56:42.740
<v Speaker 0>and just drop this in.

00:56:46.900 --> 00:56:47.220
<v Speaker 0>Go.

00:56:48.585 --> 00:56:51.145
<v Speaker 1>If there is a Prometheus install, is it

00:56:51.145 --> 00:56:53.225
<v Speaker 1>not going to be a Prometheus UI

00:56:53.865 --> 00:56:55.464
<v Speaker 1>also installed or

00:56:55.945 --> 00:56:58.665
<v Speaker 0>Don't get smart. I hope so. Maybe.

00:56:58.984 --> 00:57:00.025
<v Speaker 0>Why is that not running?

00:57:01.750 --> 00:57:02.790
<v Speaker 0>Oh, there we go.

00:57:03.270 --> 00:57:04.550
<v Speaker 0>So now we can see

00:57:05.110 --> 00:57:06.470
<v Speaker 0>we should be able to see

00:57:08.310 --> 00:57:10.390
<v Speaker 0>woah. Sorry. It's just been a bit slow.

00:57:10.390 --> 00:57:11.350
<v Speaker 0>Yeah. There we go.

00:57:14.310 --> 00:57:15.110
<v Speaker 0>There we go.

00:57:18.165 --> 00:57:20.085
<v Speaker 0>Alright. Cool. We got what we need. We

00:57:20.005 --> 00:57:21.765
<v Speaker 0>scale on that. I'm pretty confident.

00:57:22.485 --> 00:57:25.445
<v Speaker 0>And you were saying because we have

00:57:25.605 --> 00:57:27.925
<v Speaker 0>let's shut down siege just now. We probably

00:57:28.085 --> 00:57:29.365
<v Speaker 0>you're right. I think we do have a

00:57:29.365 --> 00:57:31.410
<v Speaker 0>link. We do have a permetheus.

00:57:31.410 --> 00:57:31.810
<v Speaker 0>So

00:57:33.650 --> 00:57:35.010
<v Speaker 0>let's try and get pods.

00:57:37.090 --> 00:57:38.130
<v Speaker 0>Prometheus.

00:57:39.410 --> 00:57:42.450
<v Speaker 0>So let's try that then. Linker d port

00:57:42.450 --> 00:57:43.250
<v Speaker 0>forward.

00:57:44.770 --> 00:57:46.745
<v Speaker 0>Oh, what's the iere fuse port?

00:57:49.625 --> 00:57:50.985
<v Speaker 0>Nineteen ninety.

00:57:55.705 --> 00:57:58.025
<v Speaker 0>Promise that's the last question I'll ask myself

00:57:58.025 --> 00:57:58.825
<v Speaker 0>in that

00:57:59.065 --> 00:58:01.180
<v Speaker 0>torn. Nineteen ninety. Yeah.

00:58:02.940 --> 00:58:05.180
<v Speaker 0>I copied that thing but we should see

00:58:05.180 --> 00:58:06.940
<v Speaker 0>I know we got this fancy thing, no

00:58:06.940 --> 00:58:08.060
<v Speaker 0>not fancy but you know we got a

00:58:08.060 --> 00:58:09.180
<v Speaker 0>list of all the metrics that we can

00:58:09.180 --> 00:58:10.540
<v Speaker 0>actually execute against.

00:58:10.620 --> 00:58:12.860
<v Speaker 0>The response time is the one we're curious

00:58:12.860 --> 00:58:14.700
<v Speaker 0>about so

00:58:17.555 --> 00:58:20.595
<v Speaker 0>yeah response time latency millisecond bucket

00:58:20.755 --> 00:58:22.755
<v Speaker 0>and we can use label selectors to filter

00:58:22.755 --> 00:58:24.595
<v Speaker 0>this but let's just get them all first

00:58:24.595 --> 00:58:26.515
<v Speaker 0>and then we can open this and we

00:58:26.515 --> 00:58:27.234
<v Speaker 0>want,

00:58:27.474 --> 00:58:29.555
<v Speaker 0>so we just want a Laravel application,

00:58:30.914 --> 00:58:32.170
<v Speaker 0>see what we have.

00:58:32.330 --> 00:58:33.450
<v Speaker 0>Namespace

00:58:35.530 --> 00:58:36.570
<v Speaker 0>default.

00:58:40.010 --> 00:58:41.770
<v Speaker 0>Maybe I don't remember how to do.

00:58:42.330 --> 00:58:45.050
<v Speaker 1>Is it equal since yeah. But we got

00:58:45.050 --> 00:58:45.450
<v Speaker 0>nothing.

00:58:52.825 --> 00:58:53.785
<v Speaker 0>Execute.

00:58:55.785 --> 00:58:57.865
<v Speaker 0>What's the name of spaces we've got here?

00:58:57.945 --> 00:59:00.040
<v Speaker 0>Linker d, link d. So it's just doing

00:59:00.040 --> 00:59:01.640
<v Speaker 0>the the proxy ones.

00:59:01.960 --> 00:59:03.799
<v Speaker 0>Do we actually have anything like yeah. There

00:59:03.799 --> 00:59:05.640
<v Speaker 0>we go. So

00:59:06.119 --> 00:59:07.720
<v Speaker 0>let's copy this.

00:59:09.960 --> 00:59:11.960
<v Speaker 0>So this is our application.

00:59:12.680 --> 00:59:14.520
<v Speaker 0>Oh, it's a long way down. There we

00:59:14.520 --> 00:59:14.680
<v Speaker 0>go.

00:59:18.895 --> 00:59:19.535
<v Speaker 0>Cool.

00:59:20.095 --> 00:59:21.055
<v Speaker 0>There we go.

00:59:22.015 --> 00:59:24.415
<v Speaker 0>This is just the stats that hit our

00:59:24.415 --> 00:59:25.055
<v Speaker 0>application.

00:59:30.230 --> 00:59:31.110
<v Speaker 0>Where's

00:59:31.110 --> 00:59:32.150
<v Speaker 0>the buckets?

00:59:33.750 --> 00:59:35.830
<v Speaker 0>Histograms normally have a

00:59:38.710 --> 00:59:39.670
<v Speaker 0>size.

00:59:39.830 --> 00:59:42.070
<v Speaker 0>Oh, l e one, l e two,

00:59:43.505 --> 00:59:45.185
<v Speaker 0>LE three. Okay, so this seems to be

00:59:45.185 --> 00:59:47.585
<v Speaker 0>the number of requests that took one second,

00:59:47.585 --> 00:59:50.065
<v Speaker 0>two seconds, three seconds, four seconds, five seconds,

00:59:50.065 --> 00:59:52.145
<v Speaker 0>ten, twenty, thirty, forty.

00:59:53.745 --> 00:59:55.025
<v Speaker 0>Those must be milliseconds

00:59:56.740 --> 00:59:59.300
<v Speaker 0>And we can see that nothing is taking

00:59:59.860 --> 01:00:00.660
<v Speaker 0>above

01:00:00.740 --> 01:00:02.820
<v Speaker 0>or no, maybe that's something else.

01:00:04.180 --> 01:00:04.820
<v Speaker 0>Above

01:00:06.900 --> 01:00:07.700
<v Speaker 0>infinite.

01:00:07.700 --> 01:00:07.940
<v Speaker 0>Okay.

01:00:11.825 --> 01:00:14.305
<v Speaker 0>This supposed me to explain how

01:00:15.345 --> 01:00:17.345
<v Speaker 0>histogram buckets work. Right? So this less than

01:00:17.345 --> 01:00:20.225
<v Speaker 0>is 50,000. I'm assuming that's milliseconds which

01:00:20.705 --> 01:00:22.625
<v Speaker 0>means that we are looking at

01:00:23.880 --> 01:00:26.520
<v Speaker 0>50 response time and then everything else is

01:00:26.520 --> 01:00:28.520
<v Speaker 0>in the plus infinity bucket. We seem to

01:00:28.520 --> 01:00:30.280
<v Speaker 0>actually have really even distribution

01:00:30.599 --> 01:00:32.359
<v Speaker 0>of the number, I don't think this is

01:00:32.359 --> 01:00:34.120
<v Speaker 0>actually the number of requests

01:00:34.280 --> 01:00:37.880
<v Speaker 0>and so we can always tweak that but

01:00:36.505 --> 01:00:38.744
<v Speaker 0>what's important is that we do have the

01:00:38.744 --> 01:00:39.465
<v Speaker 0>ability

01:00:40.665 --> 01:00:43.385
<v Speaker 0>to look at these metrics so

01:00:45.465 --> 01:00:47.385
<v Speaker 0>yeah here's our actual application.

01:00:48.585 --> 01:00:49.945
<v Speaker 0>Not sure why I'm not getting an idea

01:00:49.945 --> 01:00:50.745
<v Speaker 0>now though.

01:00:51.065 --> 01:00:53.200
<v Speaker 1>You've turned off your sage.

01:00:54.400 --> 01:00:56.080
<v Speaker 0>I know but I haven't started. There's been

01:00:56.080 --> 01:00:57.680
<v Speaker 1>no request last Oh, no request for last

01:00:57.680 --> 01:00:59.200
<v Speaker 0>minute. Yeah. Okay.

01:01:02.720 --> 01:01:05.520
<v Speaker 1>That's the refresh you just changed, not the

01:01:05.055 --> 01:01:05.775
<v Speaker 1>time.

01:01:07.694 --> 01:01:09.455
<v Speaker 0>I swear I've done this before.

01:01:15.055 --> 01:01:16.815
<v Speaker 1>It's definitely been Damon the last thirty minutes.

01:01:22.849 --> 01:01:24.450
<v Speaker 1>But you're the wrong namespace.

01:01:24.530 --> 01:01:26.290
<v Speaker 0>Alright. Okay. Doesn't matter.

01:01:26.609 --> 01:01:28.930
<v Speaker 0>We have metrics. We can scale. Now let's

01:01:28.930 --> 01:01:31.644
<v Speaker 0>go through the manual instrumentation of application using

01:01:31.644 --> 01:01:33.005
<v Speaker 0>a Laravel package

01:01:33.244 --> 01:01:34.924
<v Speaker 0>and then bring it back around to what

01:01:34.924 --> 01:01:36.765
<v Speaker 0>we actually wanna and then join all the

01:01:36.765 --> 01:01:39.565
<v Speaker 0>dots. Okay. So I think what I wanted

01:01:39.565 --> 01:01:41.884
<v Speaker 0>to show here, I got really sidetracked by

01:01:41.884 --> 01:01:43.724
<v Speaker 0>the shamely cool features was that we can

01:01:43.724 --> 01:01:44.684
<v Speaker 0>inject linker d,

01:01:45.630 --> 01:01:47.070
<v Speaker 0>enter a cluster,

01:01:47.390 --> 01:01:48.190
<v Speaker 0>automatically

01:01:48.190 --> 01:01:50.589
<v Speaker 0>inject a proxy and get a whole bunch

01:01:50.589 --> 01:01:52.990
<v Speaker 0>of HTTP and request based metrics out of

01:01:52.990 --> 01:01:55.470
<v Speaker 0>it that we can use for our HPAs.

01:01:56.109 --> 01:01:58.750
<v Speaker 0>Now what we wanna do as well, okay,

01:01:59.309 --> 01:02:01.869
<v Speaker 0>that's nice, but what if we wanna get

01:02:01.125 --> 01:02:02.965
<v Speaker 0>custom metrics out of our application

01:02:03.205 --> 01:02:05.125
<v Speaker 0>and the ways that we can do that.

01:02:06.805 --> 01:02:07.445
<v Speaker 0>Okay.

01:02:09.845 --> 01:02:10.485
<v Speaker 0>So

01:02:11.605 --> 01:02:13.285
<v Speaker 0>the standard way to do this

01:02:15.365 --> 01:02:17.580
<v Speaker 0>is just to expose, I mean we're still

01:02:17.580 --> 01:02:19.580
<v Speaker 0>put forward in our way. Yeah. But it's

01:02:19.580 --> 01:02:21.180
<v Speaker 0>on 7,000.

01:02:22.940 --> 01:02:23.500
<v Speaker 0>Yeah.

01:02:24.460 --> 01:02:25.740
<v Speaker 0>Normally what we do is just add a

01:02:25.740 --> 01:02:27.980
<v Speaker 0>metrics endpoint. So right now if we go

01:02:27.980 --> 01:02:30.060
<v Speaker 0>to slash metrics on our Laravel application, we're

01:02:30.060 --> 01:02:32.140
<v Speaker 0>not getting anything back whatsoever

01:02:32.845 --> 01:02:34.685
<v Speaker 0>and we wanna change that. Now

01:02:35.405 --> 01:02:37.645
<v Speaker 0>typically you don't need to write the instrumentation

01:02:37.645 --> 01:02:40.765
<v Speaker 0>for this yourself. There's generally middleware adapters for

01:02:40.765 --> 01:02:42.845
<v Speaker 0>like I think every language and framework I've

01:02:42.845 --> 01:02:43.645
<v Speaker 0>worked with in the past.

01:02:44.490 --> 01:02:46.170
<v Speaker 0>Someone has already written this and you just

01:02:46.170 --> 01:02:47.850
<v Speaker 0>have to bring in the package. So

01:02:48.250 --> 01:02:49.690
<v Speaker 0>this is where I'm gonna lean on both

01:02:49.690 --> 01:02:52.410
<v Speaker 0>of you. My PHP is incredibly rusty.

01:02:53.290 --> 01:02:56.730
<v Speaker 0>Good. But I did upfront Google Laravel

01:02:56.730 --> 01:02:57.610
<v Speaker 0>Prometheus

01:02:59.115 --> 01:03:00.075
<v Speaker 0>metrics.

01:03:00.715 --> 01:03:02.235
<v Speaker 0>There were a couple of packages, you can

01:03:02.235 --> 01:03:03.355
<v Speaker 0>see I've clicked on them.

01:03:04.235 --> 01:03:05.995
<v Speaker 0>Are you familiar with either either of these

01:03:05.995 --> 01:03:07.435
<v Speaker 0>developers and we have trust in them or

01:03:07.435 --> 01:03:08.795
<v Speaker 0>am I just picking the first one?

01:03:09.835 --> 01:03:11.115
<v Speaker 1>I don't know if either of them, so.

01:03:13.880 --> 01:03:15.400
<v Speaker 2>Which one has nice stars?

01:03:15.640 --> 01:03:17.320
<v Speaker 0>This one did. I think the other ones

01:03:17.320 --> 01:03:19.560
<v Speaker 0>are like 11. See I got Sophie's

01:03:19.560 --> 01:03:21.000
<v Speaker 0>Choice. It's like this one hasn't been updated

01:03:21.000 --> 01:03:24.280
<v Speaker 0>since March 2020 which is understandable given 2020

01:03:24.280 --> 01:03:25.975
<v Speaker 0>and then there's

01:03:25.974 --> 01:03:27.255
<v Speaker 0>It means it's stable.

01:03:27.734 --> 01:03:29.815
<v Speaker 0>Means it's stable. This one was updated more

01:03:29.815 --> 01:03:31.415
<v Speaker 0>recently but had less stars.

01:03:31.655 --> 01:03:32.135
<v Speaker 0>So

01:03:33.415 --> 01:03:34.295
<v Speaker 0>like that that that

01:03:37.415 --> 01:03:38.855
<v Speaker 0>Well we go with the recent one then

01:03:38.855 --> 01:03:40.950
<v Speaker 0>like stars aren't it. Stars don't actually mean

01:03:40.950 --> 01:03:42.230
<v Speaker 0>it's quality so.

01:03:42.950 --> 01:03:43.910
<v Speaker 0>No true.

01:03:44.869 --> 01:03:46.230
<v Speaker 0>Alright so

01:03:46.470 --> 01:03:48.710
<v Speaker 0>it looks like I mean,

01:03:49.270 --> 01:03:51.270
<v Speaker 0>I thought it was gonna only offer me

01:03:51.270 --> 01:03:53.910
<v Speaker 0>the get approach but we do have a

01:03:56.125 --> 01:03:57.805
<v Speaker 0>PHP way of doing this.

01:03:58.765 --> 01:04:00.845
<v Speaker 0>I don't even know if I have composer.

01:04:03.725 --> 01:04:06.445
<v Speaker 1>If you put it into

01:04:06.445 --> 01:04:07.245
<v Speaker 1>a

01:04:07.405 --> 01:04:09.380
<v Speaker 1>the composer. Json file and rebuild the image

01:04:09.380 --> 01:04:10.980
<v Speaker 1>it will put it in there. Yeah, good

01:04:10.980 --> 01:04:13.140
<v Speaker 0>call. I like that. Okay. So we could

01:04:13.140 --> 01:04:14.500
<v Speaker 0>just drop it in here.

01:04:15.940 --> 01:04:17.700
<v Speaker 0>I guess it would go here.

01:04:18.900 --> 01:04:21.140
<v Speaker 0>We don't need this star.

01:04:23.220 --> 01:04:25.065
<v Speaker 0>Can I just do latest?

01:04:27.625 --> 01:04:29.305
<v Speaker 1>No, just just put a star if you

01:04:29.305 --> 01:04:30.185
<v Speaker 1>want latest.

01:04:31.065 --> 01:04:31.705
<v Speaker 0>Okay.

01:04:35.305 --> 01:04:36.820
<v Speaker 0>Now I don't want to rebuild this image

01:04:36.820 --> 01:04:38.820
<v Speaker 0>too many times and we don't have, we're

01:04:38.820 --> 01:04:40.500
<v Speaker 0>not you know developing locally I don't have

01:04:40.500 --> 01:04:42.740
<v Speaker 0>PHP or anything like that so what I'm

01:04:42.740 --> 01:04:44.100
<v Speaker 0>gonna do is just

01:04:44.580 --> 01:04:46.820
<v Speaker 0>instrument it, hope that it works and then

01:04:46.820 --> 01:04:48.100
<v Speaker 0>we'll rebuild it there.

01:04:48.580 --> 01:04:49.220
<v Speaker 0>Okay.

01:04:49.619 --> 01:04:52.005
<v Speaker 0>So this then wants us to connect

01:04:53.125 --> 01:04:54.405
<v Speaker 0>this end

01:04:56.645 --> 01:04:58.485
<v Speaker 0>and to bootstrap app.

01:05:00.165 --> 01:05:02.085
<v Speaker 0>Sure I mean just keep me right here

01:05:02.085 --> 01:05:03.685
<v Speaker 0>in the Laravel bits, I'm just gonna trust

01:05:03.685 --> 01:05:05.685
<v Speaker 0>the documentation on this package for the time

01:05:05.685 --> 01:05:06.405
<v Speaker 0>being so.

01:05:11.500 --> 01:05:13.020
<v Speaker 0>I just drop it anywhere.

01:05:14.060 --> 01:05:15.900
<v Speaker 1>I mean this is an unusual way of

01:05:15.900 --> 01:05:17.820
<v Speaker 1>doing it but yeah.

01:05:19.180 --> 01:05:21.740
<v Speaker 1>That would normally not go in the bootstrap

01:05:21.740 --> 01:05:23.585
<v Speaker 1>file. Would normally go in

01:05:25.665 --> 01:05:28.145
<v Speaker 1>wanted to config file. There's config slash up,

01:05:28.145 --> 01:05:30.224
<v Speaker 1>which is where it would go. Sorry. Bootstrap

01:05:30.224 --> 01:05:31.745
<v Speaker 1>slash up. It would go in there.

01:05:32.145 --> 01:05:34.065
<v Speaker 0>That says bootstrap. Oh, wait. Oh, sorry. You

01:05:34.065 --> 01:05:35.105
<v Speaker 1>are there. Okay.

01:05:37.160 --> 01:05:39.640
<v Speaker 1>There's normally a massive array of them. One

01:05:39.640 --> 01:05:39.880
<v Speaker 1>minute.

01:05:47.415 --> 01:05:49.015
<v Speaker 0>I don't see that.

01:05:49.495 --> 01:05:52.535
<v Speaker 1>No. Sorry. If you go to config slash

01:05:52.535 --> 01:05:53.255
<v Speaker 1>app,

01:05:57.655 --> 01:05:59.095
<v Speaker 1>and then scroll down a bit, there's a

01:05:59.095 --> 01:06:00.215
<v Speaker 1>section called aliases.

01:06:03.450 --> 01:06:05.050
<v Speaker 1>You'd

01:06:05.050 --> 01:06:07.210
<v Speaker 1>normally put it in here. That's like the

01:06:07.210 --> 01:06:09.210
<v Speaker 1>standard way of doing it in Laravel. But

01:06:09.210 --> 01:06:10.970
<v Speaker 1>I assume there's a reason they haven't done

01:06:10.970 --> 01:06:13.130
<v Speaker 1>that because what they've done is more effort.

01:06:13.849 --> 01:06:16.089
<v Speaker 0>Right. I'm just gonna trust them. Just just

01:06:16.089 --> 01:06:17.690
<v Speaker 1>go with what they've got. I don't know

01:06:17.690 --> 01:06:19.224
<v Speaker 1>why they've done it, but they must have

01:06:19.224 --> 01:06:20.744
<v Speaker 1>done it for a reason. Okay. And then

01:06:20.744 --> 01:06:22.345
<v Speaker 0>we have to register.

01:06:25.145 --> 01:06:26.744
<v Speaker 0>I mean, I don't even know if that's

01:06:26.744 --> 01:06:28.984
<v Speaker 0>gonna just be lumped together here. If there's

01:06:28.984 --> 01:06:30.665
<v Speaker 0>any ordering constraints,

01:06:30.665 --> 01:06:33.305
<v Speaker 0>like, I put it to the bottom or

01:06:37.180 --> 01:06:39.420
<v Speaker 0>We're gonna think that. Yeah. Okay. Yeah. Guess.

01:06:39.420 --> 01:06:41.579
<v Speaker 0>So this package has a default configuration, which

01:06:41.579 --> 01:06:43.420
<v Speaker 0>is just the environment variables.

01:06:43.420 --> 01:06:45.099
<v Speaker 0>So we just need to do a little

01:06:45.099 --> 01:06:46.875
<v Speaker 0>bit of tweaking and then

01:06:47.195 --> 01:06:48.795
<v Speaker 0>or does this actually want us to do

01:06:48.795 --> 01:06:51.115
<v Speaker 0>something else to to customize

01:06:52.635 --> 01:06:54.555
<v Speaker 0>dot ENV. Do we have a dot ENV

01:06:54.555 --> 01:06:55.995
<v Speaker 0>that goes into the container?

01:06:56.395 --> 01:06:57.115
<v Speaker 1>Yep.

01:06:57.755 --> 01:06:59.755
<v Speaker 0>In fact, I can just put these in

01:06:59.755 --> 01:07:01.220
<v Speaker 0>the deployment like this

01:07:02.099 --> 01:07:02.740
<v Speaker 0>yeah.

01:07:03.059 --> 01:07:04.260
<v Speaker 1>That's one of the things we did last

01:07:04.260 --> 01:07:05.299
<v Speaker 1>time was we set it up with a

01:07:05.299 --> 01:07:06.500
<v Speaker 1>config back, didn't we?

01:07:07.780 --> 01:07:11.220
<v Speaker 0>Did we? Did we? We did. Nice. Cool.

01:07:11.299 --> 01:07:13.700
<v Speaker 0>Oh, yeah. And there's those secret things. But

01:07:13.445 --> 01:07:14.885
<v Speaker 0>that's all we shut down now so it's

01:07:14.885 --> 01:07:15.365
<v Speaker 0>okay.

01:07:18.645 --> 01:07:20.965
<v Speaker 0>So profifi is namespace

01:07:20.965 --> 01:07:23.525
<v Speaker 0>that's gonna need tweets. That's not where we've

01:07:23.525 --> 01:07:25.365
<v Speaker 0>not really deployed our own premiFUS yet but

01:07:25.365 --> 01:07:27.045
<v Speaker 0>we can do that for sure. Just we'll

01:07:27.045 --> 01:07:28.790
<v Speaker 0>piggyback on the linker d one.

01:07:29.910 --> 01:07:32.390
<v Speaker 0>I'm assuming we want to enable route based

01:07:32.390 --> 01:07:33.270
<v Speaker 0>metrics.

01:07:33.270 --> 01:07:35.030
<v Speaker 0>Yes. Although I mean if these are the

01:07:35.030 --> 01:07:37.270
<v Speaker 0>defaults I probably don't need to provide them

01:07:37.270 --> 01:07:37.510
<v Speaker 0>right?

01:07:41.435 --> 01:07:43.675
<v Speaker 1>Depends obviously it depends whether Dave

01:07:43.915 --> 01:07:45.915
<v Speaker 1>might. You mean you don't understand how this

01:07:45.915 --> 01:07:47.675
<v Speaker 0>random package that you've never seen before that

01:07:47.675 --> 01:07:49.275
<v Speaker 0>I've just presented to you works?

01:07:49.515 --> 01:07:50.635
<v Speaker 1>Yeah basically.

01:07:50.635 --> 01:07:51.115
<v Speaker 0>Right okay.

01:07:53.710 --> 01:07:55.230
<v Speaker 0>Prometheus metalware

01:07:55.230 --> 01:07:55.950
<v Speaker 0>now.

01:07:56.350 --> 01:07:58.110
<v Speaker 0>Don't know what you are. Don't know what

01:07:58.110 --> 01:07:58.830
<v Speaker 0>you are.

01:08:02.190 --> 01:08:03.310
<v Speaker 0>Don't know what you are.

01:08:04.270 --> 01:08:05.310
<v Speaker 0>Prometheus reddest.

01:08:05.655 --> 01:08:07.495
<v Speaker 0>So this is yeah, this is where things

01:08:07.495 --> 01:08:09.415
<v Speaker 0>get a little weird in PHP land. I

01:08:09.415 --> 01:08:11.335
<v Speaker 0>never really thought about upfront and I really

01:08:11.335 --> 01:08:15.255
<v Speaker 0>should have but Prometheus has counters that usually

01:08:15.255 --> 01:08:17.895
<v Speaker 0>are stored in memory and then PHP with

01:08:17.895 --> 01:08:20.800
<v Speaker 0>its CGI share nothing kind of approach

01:08:21.440 --> 01:08:23.120
<v Speaker 0>probably wants us to have a Redis to

01:08:23.120 --> 01:08:24.640
<v Speaker 0>be able to cache those counters so they

01:08:24.640 --> 01:08:26.640
<v Speaker 0>don't get reset to zero every time.

01:08:27.120 --> 01:08:28.560
<v Speaker 0>So

01:08:28.880 --> 01:08:31.040
<v Speaker 0>we'll probably just need to quickly throw a

01:08:31.040 --> 01:08:32.494
<v Speaker 0>Redis us into this as well.

01:08:33.375 --> 01:08:34.334
<v Speaker 0>Is

01:08:36.094 --> 01:08:38.094
<v Speaker 2>the idea that it periodically would export so

01:08:38.094 --> 01:08:40.094
<v Speaker 2>it keeps that state somewhere in the application

01:08:40.094 --> 01:08:42.494
<v Speaker 2>then periodically exports it to Prometheus?

01:08:44.415 --> 01:08:46.654
<v Speaker 0>Yes, so the way that Prometheus

01:08:47.350 --> 01:08:49.590
<v Speaker 0>works is it's a pill based system that's

01:08:49.590 --> 01:08:51.270
<v Speaker 0>gonna come to our application on the metrics

01:08:51.270 --> 01:08:53.590
<v Speaker 0>endpoint every ten or thirty seconds.

01:08:54.149 --> 01:08:55.830
<v Speaker 0>We're gonna have all these counters that we

01:08:55.830 --> 01:08:58.149
<v Speaker 0>need to process across multiple requests.

01:08:58.149 --> 01:09:00.229
<v Speaker 0>Redis is gonna have to make that work.

01:09:01.510 --> 01:09:02.564
<v Speaker 0>Okay. So

01:09:03.525 --> 01:09:04.325
<v Speaker 0>we'll,

01:09:05.285 --> 01:09:07.125
<v Speaker 0>we're gonna pay it back on Linkerd. Right?

01:09:07.125 --> 01:09:08.325
<v Speaker 0>So let's do Linkerd.

01:09:10.165 --> 01:09:11.925
<v Speaker 0>Doesn't seem to allow me to

01:09:13.604 --> 01:09:16.005
<v Speaker 0>specify the name or where that Prometheus is.

01:09:18.699 --> 01:09:20.699
<v Speaker 0>But that's not important because Prometheus is gonna

01:09:20.699 --> 01:09:21.659
<v Speaker 0>come to us.

01:09:22.859 --> 01:09:24.219
<v Speaker 0>Oh, I'm so confused.

01:09:26.219 --> 01:09:28.060
<v Speaker 0>Because we can't we can't configure the target.

01:09:28.060 --> 01:09:30.354
<v Speaker 0>I'm just gonna deploy Prometheus. That's gonna be

01:09:30.354 --> 01:09:31.154
<v Speaker 0>easier. Yeah.

01:09:33.635 --> 01:09:35.395
<v Speaker 0>Is pretty much getting started to get the

01:09:35.395 --> 01:09:37.554
<v Speaker 0>docs deploy the manifest

01:09:37.875 --> 01:09:39.635
<v Speaker 0>and most people would probably go down the

01:09:39.635 --> 01:09:41.234
<v Speaker 0>route of configuring the

01:09:43.560 --> 01:09:45.800
<v Speaker 0>operator. Maybe that's easier. Kubernetes.

01:09:46.840 --> 01:09:47.880
<v Speaker 0>Prometheus

01:09:48.040 --> 01:09:49.080
<v Speaker 0>operator.

01:09:50.520 --> 01:09:51.720
<v Speaker 0>Let's just deploy that.

01:09:58.035 --> 01:09:59.555
<v Speaker 0>Quick start bundle

01:10:01.155 --> 01:10:02.275
<v Speaker 0>bundle.

01:10:04.355 --> 01:10:04.995
<v Speaker 0>There we go.

01:10:16.909 --> 01:10:17.630
<v Speaker 0>Okay.

01:10:17.710 --> 01:10:18.510
<v Speaker 0>Apply

01:10:18.590 --> 01:10:19.630
<v Speaker 0>our bundle.

01:10:21.869 --> 01:10:23.630
<v Speaker 0>Very trusting. I have no idea what's in

01:10:23.630 --> 01:10:24.110
<v Speaker 0>this file.

01:10:24.765 --> 01:10:25.565
<v Speaker 1>But

01:10:26.445 --> 01:10:28.605
<v Speaker 0>the previous operator will give us a CRD

01:10:28.605 --> 01:10:31.165
<v Speaker 0>approach to request new Prometheus servers and then

01:10:31.165 --> 01:10:33.405
<v Speaker 0>configure them using something called a service monitor,

01:10:33.405 --> 01:10:34.925
<v Speaker 0>which is just another CRD.

01:10:35.325 --> 01:10:36.845
<v Speaker 0>In fairness, I do think this is the

01:10:36.845 --> 01:10:38.365
<v Speaker 0>quickest way probably for us to get this

01:10:38.365 --> 01:10:41.085
<v Speaker 0>working. We applied it to the default name

01:10:40.560 --> 01:10:42.880
<v Speaker 0>space, so we should see our operator running

01:10:42.880 --> 01:10:43.520
<v Speaker 0>here.

01:10:43.840 --> 01:10:46.000
<v Speaker 0>Now we need the YAML to ask for

01:10:46.000 --> 01:10:47.280
<v Speaker 0>one Prometheus.

01:10:48.640 --> 01:10:50.400
<v Speaker 0>Let's jump back to the docs.

01:11:08.590 --> 01:11:10.430
<v Speaker 0>Guess we'll just get it from the gate.

01:11:13.150 --> 01:11:13.630
<v Speaker 0>Nope.

01:11:21.885 --> 01:11:26.284
<v Speaker 0>Get me a Prometheus.

01:11:26.284 --> 01:11:28.684
<v Speaker 0>There's a service monitor. That's good.

01:11:29.244 --> 01:11:30.045
<v Speaker 0>And

01:11:30.364 --> 01:11:31.725
<v Speaker 0>there's a Prometheus.

01:11:33.880 --> 01:11:34.599
<v Speaker 0>Okay.

01:11:36.920 --> 01:11:39.800
<v Speaker 0>We'll add it to our ops Kubernetes.

01:11:40.440 --> 01:11:42.360
<v Speaker 0>Now we have this dependency that we're not

01:11:42.360 --> 01:11:44.280
<v Speaker 0>gonna automate in any way, but I'm just

01:11:44.280 --> 01:11:46.120
<v Speaker 0>gonna add the CRD, which says give me

01:11:46.120 --> 01:11:47.160
<v Speaker 0>one Prometheus.

01:11:47.160 --> 01:11:48.360
<v Speaker 0>We'll call it Prometheus.

01:11:51.455 --> 01:11:53.375
<v Speaker 0>Service monitor selector.

01:11:53.615 --> 01:11:55.055
<v Speaker 0>We just, that just means we need to

01:11:55.055 --> 01:11:57.775
<v Speaker 0>remember to add team front end to our

01:11:57.775 --> 01:11:58.815
<v Speaker 0>service monitor.

01:12:00.655 --> 01:12:03.010
<v Speaker 0>I think that should be all right. Let's

01:12:03.010 --> 01:12:05.010
<v Speaker 0>find out. So we'll get to the right

01:12:05.010 --> 01:12:06.770
<v Speaker 0>directory. There's a lot of just let's find

01:12:06.770 --> 01:12:08.210
<v Speaker 0>out, isn't there? I'm sorry.

01:12:11.010 --> 01:12:13.570
<v Speaker 0>And the operator should detect the CRD

01:12:13.570 --> 01:12:14.530
<v Speaker 0>and should

01:12:15.170 --> 01:12:16.610
<v Speaker 0>spin this up one Prometheus,

01:12:17.135 --> 01:12:19.695
<v Speaker 0>Assuming I have a go anything wrong very

01:12:19.695 --> 01:12:20.735
<v Speaker 0>quickly there.

01:12:23.055 --> 01:12:25.135
<v Speaker 0>I would have expected to see my Prometheus

01:12:25.135 --> 01:12:25.615
<v Speaker 0>already.

01:12:33.110 --> 01:12:34.469
<v Speaker 0>Did I get anything wrong?

01:12:46.935 --> 01:12:48.135
<v Speaker 0>I don't think I need to add my

01:12:48.135 --> 01:12:49.655
<v Speaker 0>service monitor first

01:12:52.055 --> 01:12:53.655
<v Speaker 0>but I will just in case.

01:12:57.575 --> 01:12:58.615
<v Speaker 0>Laravel,

01:12:59.370 --> 01:13:01.530
<v Speaker 0>We've added the label that expects.

01:13:01.610 --> 01:13:02.810
<v Speaker 0>Now we want to point it to our

01:13:02.810 --> 01:13:04.250
<v Speaker 0>application. So if we take a look at

01:13:04.250 --> 01:13:05.209
<v Speaker 0>our deployment,

01:13:05.690 --> 01:13:08.249
<v Speaker 0>we have this label

01:13:10.330 --> 01:13:12.650
<v Speaker 0>and we can just match that straight up

01:13:14.364 --> 01:13:16.605
<v Speaker 0>and it's using a named port to work

01:13:16.605 --> 01:13:18.684
<v Speaker 0>out how to fetch those metrics.

01:13:18.844 --> 01:13:20.284
<v Speaker 0>So we just need to make sure that

01:13:20.284 --> 01:13:21.724
<v Speaker 0>our port is named,

01:13:23.725 --> 01:13:25.804
<v Speaker 0>which is not, but we could just do

01:13:25.804 --> 01:13:26.045
<v Speaker 0>that.

01:13:28.040 --> 01:13:30.119
<v Speaker 0>Oh no, because I don't wanna reapply this

01:13:31.080 --> 01:13:32.760
<v Speaker 0>because of the sidecar.

01:13:33.320 --> 01:13:35.800
<v Speaker 0>So we'll just do port 80 like so.

01:13:46.775 --> 01:13:49.015
<v Speaker 0>Yes? Okay. Alright. I was gonna say, is

01:13:49.095 --> 01:13:51.495
<v Speaker 1>you've got the service monitor's name as Laravel.

01:13:52.535 --> 01:13:54.690
<v Speaker 1>Does that need to match the Laravel example

01:13:54.690 --> 01:13:56.850
<v Speaker 1>project or is that its own thing?

01:13:58.130 --> 01:13:59.250
<v Speaker 1>Or line four.

01:14:02.290 --> 01:14:04.690
<v Speaker 0>I know that that's okay. So the Prometheus

01:14:04.690 --> 01:14:06.665
<v Speaker 0>is doing a service monitor based on the

01:14:06.665 --> 01:14:08.425
<v Speaker 0>label team front end which I've kept the

01:14:08.425 --> 01:14:09.945
<v Speaker 0>same here. So Okay.

01:14:10.345 --> 01:14:12.025
<v Speaker 0>That just means that our Prometheus

01:14:12.265 --> 01:14:14.505
<v Speaker 0>should detect that service monitor which will add

01:14:14.505 --> 01:14:16.345
<v Speaker 0>it as a scrape target to our Prometheus

01:14:16.345 --> 01:14:19.870
<v Speaker 0>which hasn't magically shown up yet disappointed and

01:14:19.870 --> 01:14:21.790
<v Speaker 0>pulling our metrics. So

01:14:25.070 --> 01:14:27.470
<v Speaker 0>why do I not have a Prometheus?

01:14:27.470 --> 01:14:29.550
<v Speaker 0>Let's grab the logs as quickly and see

01:14:29.550 --> 01:14:30.590
<v Speaker 0>if there's anything obvious.

01:14:40.005 --> 01:14:42.005
<v Speaker 0>Okay. What have I forgotten?

01:14:44.245 --> 01:14:47.030
<v Speaker 0>Operator, deploy and manage previous server. Yep. That

01:14:47.030 --> 01:14:47.750
<v Speaker 0>would be nice.

01:15:07.905 --> 01:15:08.545
<v Speaker 0>Let's see.

01:15:16.880 --> 01:15:19.199
<v Speaker 1>One of them's got operated, not operator.

01:15:19.280 --> 01:15:20.559
<v Speaker 1>Does that matter?

01:15:22.800 --> 01:15:23.519
<v Speaker 0>So

01:15:23.679 --> 01:15:26.000
<v Speaker 0>that service tells me that it's tried to

01:15:26.000 --> 01:15:27.840
<v Speaker 0>create our Prometheus.

01:15:27.840 --> 01:15:28.800
<v Speaker 0>Maybe just failed.

01:15:36.435 --> 01:15:38.755
<v Speaker 0>K. Get service monitors.

01:15:40.195 --> 01:15:41.635
<v Speaker 0>Laravel.

01:15:42.035 --> 01:15:43.315
<v Speaker 0>Let's describe it.

01:15:50.230 --> 01:15:51.270
<v Speaker 0>It's alright.

01:15:54.150 --> 01:15:55.590
<v Speaker 0>We just don't have

01:15:55.910 --> 01:15:56.630
<v Speaker 0>Prometheus.

01:15:58.525 --> 01:16:00.685
<v Speaker 0>I'm just gonna deploy my own Prometheus.

01:16:07.165 --> 01:16:08.765
<v Speaker 0>And then I'm just clicking on random links

01:16:08.765 --> 01:16:09.645
<v Speaker 0>looking for YAML.

01:16:10.540 --> 01:16:11.980
<v Speaker 0>Pretty much sums up my job as well

01:16:11.980 --> 01:16:12.940
<v Speaker 0>to be fair.

01:16:14.860 --> 01:16:16.620
<v Speaker 0>Kind deployment.

01:16:16.620 --> 01:16:18.139
<v Speaker 0>Nope. Not there. Next.

01:16:20.780 --> 01:16:23.659
<v Speaker 0>Deployment for me, I there's nothing particularly special

01:16:23.659 --> 01:16:24.139
<v Speaker 0>about it.

01:16:29.125 --> 01:16:30.804
<v Speaker 0>Nope. I want the YAML.

01:16:34.245 --> 01:16:34.804
<v Speaker 0>Kubernetes.

01:16:35.365 --> 01:16:35.765
<v Speaker 0>Nope.

01:16:41.850 --> 01:16:43.450
<v Speaker 0>I'm not enjoying computers

01:16:43.450 --> 01:16:44.250
<v Speaker 0>today.

01:16:45.210 --> 01:16:47.130
<v Speaker 0>How old is this? 2018.

01:16:47.130 --> 01:16:49.050
<v Speaker 0>That's probably not the wisest thing to go

01:16:49.050 --> 01:16:50.250
<v Speaker 0>through on my cluster is it?

01:17:02.725 --> 01:17:04.325
<v Speaker 0>What have I missed? What have I been

01:17:04.325 --> 01:17:06.005
<v Speaker 0>silly with either of you?

01:17:08.310 --> 01:17:09.590
<v Speaker 1>I have no idea.

01:17:12.630 --> 01:17:15.910
<v Speaker 0>So we installed the operator and it's happy.

01:17:17.510 --> 01:17:18.550
<v Speaker 0>It's definitely happy.

01:17:23.185 --> 01:17:25.105
<v Speaker 1>I found something which has the word deployment

01:17:25.105 --> 01:17:27.264
<v Speaker 1>in it and the word Prometheus as well.

01:17:27.985 --> 01:17:29.745
<v Speaker 1>You want more YAML to throw a wall

01:17:29.745 --> 01:17:30.945
<v Speaker 1>that might, don't know.

01:17:31.505 --> 01:17:32.224
<v Speaker 0>Hold on.

01:17:32.785 --> 01:17:35.025
<v Speaker 0>Let's do get Prometheus. So we we had

01:17:35.025 --> 01:17:37.190
<v Speaker 0>our CRD and we requested a Prometheus. We

01:17:37.190 --> 01:17:38.470
<v Speaker 0>could see that we have no version and

01:17:38.470 --> 01:17:40.469
<v Speaker 0>no replicas. Right? That's that's bad.

01:17:42.230 --> 01:17:44.310
<v Speaker 0>So we're gonna describe our Prometheus and see

01:17:44.310 --> 01:17:45.830
<v Speaker 0>if there's any events on it.

01:17:46.870 --> 01:17:50.094
<v Speaker 0>I'm really regretting calling it Prometheus. So I

01:17:54.655 --> 01:17:56.494
<v Speaker 0>I think it's failing because the service account

01:17:56.494 --> 01:17:57.534
<v Speaker 0>doesn't exist.

01:18:00.094 --> 01:18:03.455
<v Speaker 0>So let's use the default service account

01:18:03.130 --> 01:18:04.650
<v Speaker 0>and

01:18:05.130 --> 01:18:06.730
<v Speaker 0>see if that keeps it happy.

01:18:07.610 --> 01:18:10.410
<v Speaker 0>So now we can just redeploy our prometheus.yaml

01:18:10.410 --> 01:18:12.409
<v Speaker 0>once I learn how to computer.

01:18:16.010 --> 01:18:17.530
<v Speaker 0>And then we're on get prometheus.

01:18:21.085 --> 01:18:23.245
<v Speaker 0>There we go. So it was Okay. Service

01:18:23.245 --> 01:18:25.245
<v Speaker 0>account. I'm

01:18:25.245 --> 01:18:26.925
<v Speaker 0>not a failure. Okay. So

01:18:27.245 --> 01:18:27.724
<v Speaker 0>I

01:18:29.165 --> 01:18:31.485
<v Speaker 0>don't know why the operator wasn't printing anything

01:18:31.485 --> 01:18:33.405
<v Speaker 0>out to say, hey, the service account doesn't

01:18:33.405 --> 01:18:36.020
<v Speaker 0>exist. You're not gonna get your Prometheus regardless.

01:18:36.980 --> 01:18:39.620
<v Speaker 0>This is gonna configure us a Prometheus and

01:18:39.620 --> 01:18:42.020
<v Speaker 0>our namespace with a service monitor that monitors

01:18:42.020 --> 01:18:43.460
<v Speaker 0>our Laravel application.

01:18:44.500 --> 01:18:46.260
<v Speaker 0>That monitoring is gonna fail,

01:18:46.500 --> 01:18:48.260
<v Speaker 0>we'll actually be able to see that through

01:18:48.260 --> 01:18:49.060
<v Speaker 0>the Prometheus

01:18:49.605 --> 01:18:50.405
<v Speaker 0>UI.

01:18:51.205 --> 01:18:51.845
<v Speaker 0>So

01:18:52.325 --> 01:18:54.805
<v Speaker 0>let's jump into that very quickly before we

01:18:54.805 --> 01:18:56.565
<v Speaker 0>deploy our PHP changes.

01:19:03.870 --> 01:19:06.670
<v Speaker 0>What you should see here is in targets.

01:19:08.990 --> 01:19:10.750
<v Speaker 0>I was kind of hoping the surface monitor

01:19:10.750 --> 01:19:12.110
<v Speaker 0>would have picked that up.

01:19:12.750 --> 01:19:14.030
<v Speaker 0>Maybe I broke that too.

01:19:16.284 --> 01:19:17.324
<v Speaker 0>Let's see.

01:19:27.005 --> 01:19:28.364
<v Speaker 0>This is just not showing them.

01:19:32.739 --> 01:19:34.659
<v Speaker 0>Okay. I think it's trying. Okay. But we

01:19:34.659 --> 01:19:35.940
<v Speaker 0>don't we don't have anything there for it

01:19:35.940 --> 01:19:36.979
<v Speaker 0>to work. So

01:19:38.900 --> 01:19:40.659
<v Speaker 0>let's make the change that we need to

01:19:40.659 --> 01:19:43.539
<v Speaker 0>make for our application to have that endpoint.

01:19:44.420 --> 01:19:47.185
<v Speaker 0>So let's go back to those environment variables

01:19:47.825 --> 01:19:50.225
<v Speaker 0>on our deployment or config map. Apologies.

01:19:51.745 --> 01:19:53.425
<v Speaker 0>Oh yeah. We know we need a redis.

01:19:53.425 --> 01:19:54.465
<v Speaker 0>Right.

01:19:55.905 --> 01:19:57.265
<v Speaker 0>Redis Kubernetes.

01:20:02.829 --> 01:20:04.669
<v Speaker 0>Just give me a YAML,

01:20:04.670 --> 01:20:07.070
<v Speaker 0>a Redis pod. Am I feeling that bold?

01:20:11.550 --> 01:20:12.429
<v Speaker 0>Yeah.

01:20:12.829 --> 01:20:14.190
<v Speaker 0>What's the worst that could happen?

01:20:15.775 --> 01:20:17.374
<v Speaker 0>That's a really stupid idea.

01:20:21.695 --> 01:20:23.135
<v Speaker 0>I'm just gonna do it.

01:20:26.255 --> 01:20:28.334
<v Speaker 0>So that should give me one Redis.

01:20:28.335 --> 01:20:29.775
<v Speaker 0>I feel I don't know. It's

01:20:31.039 --> 01:20:33.599
<v Speaker 0>one available is we probably wanna make that

01:20:33.599 --> 01:20:35.360
<v Speaker 0>available to service. Yeah. That is a really

01:20:35.360 --> 01:20:36.800
<v Speaker 0>stupid idea. I don't even know why I

01:20:36.800 --> 01:20:38.159
<v Speaker 0>entertained that. Okay. Next.

01:20:42.345 --> 01:20:44.265
<v Speaker 0>Helm. I should just do the proper relation

01:20:44.265 --> 01:20:44.905
<v Speaker 0>there.

01:20:54.345 --> 01:20:56.110
<v Speaker 1>So Do we need to worry about it

01:20:56.110 --> 01:20:57.630
<v Speaker 1>back to saying it's deprecated?

01:20:58.750 --> 01:20:59.949
<v Speaker 0>No. It's okay.

01:21:01.150 --> 01:21:02.030
<v Speaker 1>Okay.

01:21:02.190 --> 01:21:04.670
<v Speaker 2>Seems like such an overhead, doesn't it, to

01:21:04.670 --> 01:21:06.030
<v Speaker 2>deploy Redis

01:21:07.150 --> 01:21:07.950
<v Speaker 2>just for this?

01:21:09.235 --> 01:21:11.555
<v Speaker 0>It is again, it's only in PHP because

01:21:11.555 --> 01:21:13.235
<v Speaker 0>of the share nothing thing

01:21:14.035 --> 01:21:15.155
<v Speaker 0>it is a bit of a pain in

01:21:15.155 --> 01:21:17.475
<v Speaker 0>the ass but we're just gonna go with

01:21:17.475 --> 01:21:19.875
<v Speaker 0>it and the deprecation warning here is because

01:21:19.875 --> 01:21:21.620
<v Speaker 0>I know you can't really do URL and

01:21:21.620 --> 01:21:23.540
<v Speaker 0>I can't zoom in on the URL bar

01:21:23.700 --> 01:21:26.020
<v Speaker 0>but this is helm slash charts on GitHub

01:21:26.020 --> 01:21:28.500
<v Speaker 0>which is deprecated but it's actually pointing us

01:21:28.500 --> 01:21:30.580
<v Speaker 0>to the bitnami one which is not deprecated

01:21:30.580 --> 01:21:32.340
<v Speaker 0>so. Okay. It's okay

01:21:33.175 --> 01:21:35.094
<v Speaker 0>And we'll call our helm. I will call

01:21:35.094 --> 01:21:36.534
<v Speaker 0>our reddish reddish.

01:21:38.295 --> 01:21:39.894
<v Speaker 0>So are we gonna have one reddish.

01:21:42.695 --> 01:21:44.695
<v Speaker 2>We're gonna have one reddish per pot.

01:21:45.015 --> 01:21:47.574
<v Speaker 0>No. We're just gonna run one reddish in

01:21:47.574 --> 01:21:48.420
<v Speaker 0>our cluster

01:21:48.740 --> 01:21:49.620
<v Speaker 0>and then

01:21:49.860 --> 01:21:52.260
<v Speaker 0>our PHP application is gonna use that for

01:21:52.260 --> 01:21:54.820
<v Speaker 0>cache and persistence of Prometheus counters.

01:21:55.540 --> 01:21:56.820
<v Speaker 0>What this should mean is we have a

01:21:56.820 --> 01:21:57.700
<v Speaker 0>Redis

01:21:57.700 --> 01:22:00.020
<v Speaker 0>service here which I can now point our

01:22:00.020 --> 01:22:00.900
<v Speaker 0>PHP application

01:22:01.305 --> 01:22:02.185
<v Speaker 0>use.

01:22:03.225 --> 01:22:05.385
<v Speaker 0>So Redis master

01:22:05.945 --> 01:22:07.865
<v Speaker 0>or head in fact, probably wants the headless

01:22:07.865 --> 01:22:09.385
<v Speaker 0>service, so let's do that.

01:22:10.345 --> 01:22:11.545
<v Speaker 0>So now we need to compare to our

01:22:11.545 --> 01:22:12.505
<v Speaker 0>config map

01:22:12.905 --> 01:22:14.985
<v Speaker 0>and our Redis is available on Redis.

01:22:16.480 --> 01:22:18.000
<v Speaker 0>Let's point it to the master. I think

01:22:18.000 --> 01:22:20.080
<v Speaker 0>that's what I was gonna expect. Our Prometheus

01:22:20.080 --> 01:22:21.760
<v Speaker 0>now lives in our namespace.

01:22:21.760 --> 01:22:23.280
<v Speaker 0>Let's call that default.

01:22:27.280 --> 01:22:27.999
<v Speaker 0>This

01:22:29.360 --> 01:22:30.000
<v Speaker 0>may work.

01:22:33.114 --> 01:22:33.914
<v Speaker 1>Confident.

01:22:36.074 --> 01:22:38.474
<v Speaker 0>I definitely lack any confidence today.

01:22:39.034 --> 01:22:41.594
<v Speaker 0>So now that we've modified this config map,

01:22:41.594 --> 01:22:42.874
<v Speaker 0>we can apply that first

01:22:43.275 --> 01:22:45.755
<v Speaker 0>and

01:22:45.000 --> 01:22:48.120
<v Speaker 0>nothing should actually happen yet because those keys

01:22:48.120 --> 01:22:48.760
<v Speaker 0>won't be,

01:22:49.160 --> 01:22:51.400
<v Speaker 0>aren't gonna be consumed by our PHP application.

01:22:51.400 --> 01:22:52.040
<v Speaker 0>However,

01:22:52.600 --> 01:22:54.200
<v Speaker 0>what we want to do now is rebuild

01:22:54.200 --> 01:22:56.680
<v Speaker 0>those images with that code change that we

01:22:56.680 --> 01:22:57.239
<v Speaker 0>made.

01:22:57.720 --> 01:22:59.480
<v Speaker 0>Did we finish the code change? Were we

01:22:59.480 --> 01:23:00.120
<v Speaker 0>confident there?

01:23:01.875 --> 01:23:03.395
<v Speaker 1>I think did you make your way through

01:23:03.395 --> 01:23:04.435
<v Speaker 1>the entire file?

01:23:05.875 --> 01:23:06.594
<v Speaker 0>So

01:23:06.755 --> 01:23:08.195
<v Speaker 0>what's this suggesting?

01:23:10.755 --> 01:23:11.955
<v Speaker 0>Do I need do I need this load

01:23:11.955 --> 01:23:12.675
<v Speaker 0>component thing?

01:23:15.120 --> 01:23:15.840
<v Speaker 0>It

01:23:18.720 --> 01:23:20.160
<v Speaker 0>says to customize

01:23:20.320 --> 01:23:22.240
<v Speaker 0>the configuration you either need to override the

01:23:22.240 --> 01:23:23.920
<v Speaker 0>environment variables which I've done

01:23:24.800 --> 01:23:27.865
<v Speaker 0>or you can copy the included permetheus dot

01:23:27.865 --> 01:23:28.825
<v Speaker 0>PHP

01:23:28.825 --> 01:23:31.065
<v Speaker 0>to this location edit it and then use

01:23:31.065 --> 01:23:31.625
<v Speaker 0>it.

01:23:32.585 --> 01:23:34.265
<v Speaker 0>Yeah, we don't need that. Yeah, just copy

01:23:34.265 --> 01:23:35.385
<v Speaker 1>that and see what happens.

01:23:37.145 --> 01:23:38.425
<v Speaker 1>No. You

01:23:38.905 --> 01:23:40.570
<v Speaker 1>want you want the middle one as well.

01:23:40.570 --> 01:23:42.570
<v Speaker 0>Okay. So now we have to add this

01:23:43.050 --> 01:23:45.290
<v Speaker 0>also to our bootstrap at PHP and again

01:23:45.290 --> 01:23:48.010
<v Speaker 0>I have no idea whether ordering is important

01:23:48.010 --> 01:23:48.650
<v Speaker 0>so.

01:23:49.210 --> 01:23:50.650
<v Speaker 1>Just put it below, it came below in

01:23:50.650 --> 01:23:51.530
<v Speaker 1>the documentation.

01:23:51.850 --> 01:23:53.690
<v Speaker 0>That's kind of the the same logic I'm

01:23:53.690 --> 01:23:57.025
<v Speaker 0>using right now. To observe guzzle. We don't

01:23:57.025 --> 01:23:58.224
<v Speaker 1>we don't care about guzzle, we're not doing

01:23:58.224 --> 01:23:59.264
<v Speaker 1>API calls.

01:23:59.665 --> 01:24:00.465
<v Speaker 0>Alright.

01:24:01.505 --> 01:24:02.465
<v Speaker 0>We do have

01:24:02.864 --> 01:24:06.624
<v Speaker 0>database providers so let's get those metrics too.

01:24:07.905 --> 01:24:09.505
<v Speaker 0>I mean if this application is doing all

01:24:09.505 --> 01:24:11.739
<v Speaker 0>the things that suggest it's doing that would

01:24:11.739 --> 01:24:13.340
<v Speaker 0>be really nice. So

01:24:15.100 --> 01:24:16.540
<v Speaker 0>I wonder if we could just abuse the

01:24:16.540 --> 01:24:18.460
<v Speaker 0>disk rather than Redis. In fact it does

01:24:18.460 --> 01:24:21.580
<v Speaker 0>mention APC here and there's a memory adapter.

01:24:21.580 --> 01:24:22.965
<v Speaker 0>So maybe we can maybe there was a

01:24:22.965 --> 01:24:25.045
<v Speaker 0>way to do this without Reddit. Yeah. Oh.

01:24:26.725 --> 01:24:29.285
<v Speaker 0>Alright and then that's the Cool. You could

01:24:30.085 --> 01:24:31.685
<v Speaker 2>probably use op cache as well.

01:24:32.325 --> 01:24:33.845
<v Speaker 0>Yeah. I think I think that would make

01:24:33.845 --> 01:24:35.045
<v Speaker 0>a lot of sense too.

01:24:35.525 --> 01:24:37.620
<v Speaker 0>Alright. Let's rebuild our images and we're just

01:24:37.620 --> 01:24:40.100
<v Speaker 0>gonna see what happens here. Alright. Fingers

01:24:40.100 --> 01:24:40.739
<v Speaker 0>crossed.

01:24:42.500 --> 01:24:43.619
<v Speaker 1>Hopefully the

01:24:43.940 --> 01:24:45.620
<v Speaker 1>I was gonna say hopefully the NPM one

01:24:45.620 --> 01:24:47.140
<v Speaker 1>won't need to do anything because there's been

01:24:47.140 --> 01:24:49.059
<v Speaker 1>nothing that's changed in our

01:24:50.420 --> 01:24:51.860
<v Speaker 1>assets. But I'm guessing

01:24:54.245 --> 01:24:56.005
<v Speaker 1>I think something's changed.

01:24:56.405 --> 01:24:58.645
<v Speaker 1>We're copying everything. Right. So we've been validated

01:24:58.645 --> 01:24:59.684
<v Speaker 1>the cache, aren't we?

01:25:00.485 --> 01:25:02.885
<v Speaker 0>What a crappy Docker fail. Who wrote that?

01:25:03.205 --> 01:25:05.045
<v Speaker 1>I don't know. Yeah.

01:25:06.085 --> 01:25:07.970
<v Speaker 0>We actually Kieran and I did an episode

01:25:07.970 --> 01:25:09.570
<v Speaker 0>on really

01:25:09.970 --> 01:25:11.970
<v Speaker 0>nailing down how to have an optimized cache

01:25:11.970 --> 01:25:14.290
<v Speaker 0>for bug and PHP applications. I'm not sure

01:25:14.290 --> 01:25:15.730
<v Speaker 0>why we

01:25:16.050 --> 01:25:17.410
<v Speaker 0>didn't copy that here.

01:25:20.850 --> 01:25:22.290
<v Speaker 0>If I didn't write this one, that was

01:25:22.290 --> 01:25:24.025
<v Speaker 0>you Alex, wasn't it? I wrote this one.

01:25:24.025 --> 01:25:26.985
<v Speaker 1>It's a copy of the stream that me,

01:25:26.985 --> 01:25:29.544
<v Speaker 1>you and came and did ages ago.

01:25:29.864 --> 01:25:31.544
<v Speaker 1>Well, we did. Last October.

01:25:31.625 --> 01:25:33.625
<v Speaker 1>There was a copy of that. Oh, yeah.

01:25:33.625 --> 01:25:35.144
<v Speaker 0>So the problem is I think you've done

01:25:35.144 --> 01:25:36.985
<v Speaker 0>the multiple copies but we've not got the

01:25:36.985 --> 01:25:37.304
<v Speaker 0>steps.

01:25:40.020 --> 01:25:42.579
<v Speaker 0>Oh no wait. Oh that's dev. So

01:25:43.540 --> 01:25:45.460
<v Speaker 0>oh yeah. You have to run the the

01:25:45.460 --> 01:25:47.380
<v Speaker 0>composer install here.

01:25:48.260 --> 01:25:48.980
<v Speaker 2>After the

01:25:50.179 --> 01:25:50.820
<v Speaker 0>That's all. Yeah.

01:25:51.915 --> 01:25:54.394
<v Speaker 0>No big deal. It won't take too long

01:25:54.715 --> 01:25:57.275
<v Speaker 0>and then what we'll do is I won't

01:25:57.275 --> 01:25:59.755
<v Speaker 0>bother reinjecting the linker deep proxy and we

01:25:59.755 --> 01:26:01.355
<v Speaker 0>sit, we sit, we see not working so

01:26:01.355 --> 01:26:02.954
<v Speaker 0>let's just leave it out, we'll apply our

01:26:02.954 --> 01:26:04.314
<v Speaker 0>manifest over the top

01:26:05.275 --> 01:26:08.400
<v Speaker 0>and then we will confirm that the metrics

01:26:08.400 --> 01:26:11.280
<v Speaker 0>endpoint on our Laravel application works. Once we

01:26:11.280 --> 01:26:12.400
<v Speaker 0>confirm that,

01:26:13.120 --> 01:26:15.120
<v Speaker 0>that's that's pretty much it. Once those metrics

01:26:15.120 --> 01:26:16.880
<v Speaker 0>are available, we can figure the HPA the

01:26:16.880 --> 01:26:18.160
<v Speaker 0>same way that we did at the start

01:26:18.160 --> 01:26:20.480
<v Speaker 0>instead of using CPU, we're gonna point it

01:26:20.480 --> 01:26:21.760
<v Speaker 0>to custom metrics

01:26:21.920 --> 01:26:24.054
<v Speaker 0>and it should just work. TM.

01:26:34.695 --> 01:26:37.015
<v Speaker 0>The shame a little discord chat thing is

01:26:37.015 --> 01:26:37.820
<v Speaker 0>not working.

01:26:39.659 --> 01:26:40.859
<v Speaker 0>I'll try it again.

01:26:45.099 --> 01:26:45.979
<v Speaker 0>Oh well.

01:26:46.539 --> 01:26:48.539
<v Speaker 0>We broke it. Oh no.

01:26:51.285 --> 01:26:53.045
<v Speaker 1>So what's that complaining about there?

01:26:57.525 --> 01:27:01.205
<v Speaker 0>Complaining about illuminate foundation application with facades.

01:27:02.485 --> 01:27:04.500
<v Speaker 1>Yeah. Okay. So that that's

01:27:04.740 --> 01:27:06.020
<v Speaker 1>before when I was saying this is a

01:27:06.020 --> 01:27:07.300
<v Speaker 1>really weird way of doing it. That'll be

01:27:07.300 --> 01:27:08.900
<v Speaker 1>why it's weird. Because because it's not a

01:27:08.900 --> 01:27:10.420
<v Speaker 1>valid way of doing it looks like.

01:27:13.140 --> 01:27:13.460
<v Speaker 1>You

01:27:14.420 --> 01:27:15.219
<v Speaker 1>yeah.

01:27:15.460 --> 01:27:17.620
<v Speaker 1>Is it worth maybe bringing this into a

01:27:17.620 --> 01:27:18.260
<v Speaker 1>separate

01:27:19.135 --> 01:27:20.735
<v Speaker 1>into a separate stream at some point, like,

01:27:20.735 --> 01:27:22.094
<v Speaker 1>use an application level

01:27:22.575 --> 01:27:23.614
<v Speaker 1>metrics? Because

01:27:24.335 --> 01:27:27.855
<v Speaker 1>I don't think that that package works.

01:27:29.855 --> 01:27:30.655
<v Speaker 2>What?

01:27:31.455 --> 01:27:33.750
<v Speaker 1>All of those methods, like, with facades and

01:27:33.750 --> 01:27:35.749
<v Speaker 1>stuff, they don't seem to be

01:27:36.949 --> 01:27:39.590
<v Speaker 1>like, that's not how I would ever register

01:27:39.590 --> 01:27:39.989
<v Speaker 1>things.

01:27:45.445 --> 01:27:47.045
<v Speaker 0>Okay. I'm gonna take it out. I'm gonna

01:27:47.045 --> 01:27:48.965
<v Speaker 0>feel brave here. So hold on.

01:27:53.844 --> 01:27:55.204
<v Speaker 0>I've had that as

01:27:59.280 --> 01:28:01.600
<v Speaker 0>Alright. Let's use this one. Okay. We tried

01:28:01.600 --> 01:28:04.160
<v Speaker 1>you one. Yeah. Cool. Yeah. Is the normal

01:28:04.160 --> 01:28:05.840
<v Speaker 1>way of doing things. Seem to be the

01:28:05.840 --> 01:28:08.000
<v Speaker 0>same. So let's let's trust it. And if

01:28:08.000 --> 01:28:09.280
<v Speaker 0>it doesn't work, it doesn't work. We'll move

01:28:09.280 --> 01:28:11.840
<v Speaker 0>on. No big deal. Mhmm. Okay.

01:28:11.840 --> 01:28:13.615
<v Speaker 0>So I need to modify the composer dot

01:28:13.615 --> 01:28:14.255
<v Speaker 0>JSON.

01:28:14.975 --> 01:28:15.614
<v Speaker 1>Yep.

01:28:17.775 --> 01:28:18.335
<v Speaker 0>So,

01:28:19.295 --> 01:28:22.575
<v Speaker 0>and then in our app dot PHP we

01:28:22.575 --> 01:28:24.735
<v Speaker 0>add a provider. So this is config

01:28:25.055 --> 01:28:27.430
<v Speaker 1>slash app, not the bootstrap app which you

01:28:27.430 --> 01:28:28.230
<v Speaker 1>were in before.

01:28:29.030 --> 01:28:29.750
<v Speaker 0>Okay.

01:28:30.230 --> 01:28:32.150
<v Speaker 0>So I can just put it anywhere here?

01:28:33.350 --> 01:28:35.030
<v Speaker 1>But the bottom, but yeah.

01:28:38.150 --> 01:28:40.085
<v Speaker 1>No. That's the wrong one. Sorry. There's two

01:28:40.085 --> 01:28:41.925
<v Speaker 1>arrays go to the top of it. The

01:28:41.925 --> 01:28:43.285
<v Speaker 1>first array and put that one in.

01:28:44.645 --> 01:28:45.525
<v Speaker 1>Yeah. Here.

01:28:47.205 --> 01:28:48.005
<v Speaker 1>And then

01:28:48.325 --> 01:28:49.765
<v Speaker 1>you got random.

01:28:50.165 --> 01:28:51.205
<v Speaker 1>Yeah. Yeah. Cool.

01:28:51.605 --> 01:28:53.630
<v Speaker 0>And then we add this one to the

01:28:53.630 --> 01:28:54.429
<v Speaker 0>aliases.

01:28:54.830 --> 01:28:56.830
<v Speaker 0>Actually, this seems very similar.

01:28:57.550 --> 01:28:59.230
<v Speaker 1>It's very similar but that's the correct way

01:28:59.230 --> 01:29:01.150
<v Speaker 1>of doing it. I don't know. I assume

01:29:01.150 --> 01:29:03.710
<v Speaker 1>this is maybe a fork where they've modernized

01:29:03.710 --> 01:29:04.830
<v Speaker 1>it or something maybe.

01:29:05.390 --> 01:29:08.910
<v Speaker 0>Hopefully that You've got a rogue closing bracket

01:29:08.355 --> 01:29:09.555
<v Speaker 1>there as well by the way. So you

01:29:09.555 --> 01:29:10.755
<v Speaker 1>might get rid of that. Why did they

01:29:10.755 --> 01:29:11.954
<v Speaker 0>keep copying them?

01:29:12.755 --> 01:29:14.595
<v Speaker 0>Or did I paste the wrong thing? I

01:29:14.595 --> 01:29:16.275
<v Speaker 1>think I think that one there was when

01:29:16.275 --> 01:29:18.835
<v Speaker 1>the first one you copied had you highlighted

01:29:18.835 --> 01:29:20.355
<v Speaker 1>two lines. I think that's what it was.

01:29:21.090 --> 01:29:24.130
<v Speaker 0>Alright. Are these the same? Prometheus namespace yeah.

01:29:24.130 --> 01:29:25.249
<v Speaker 0>I think they are.

01:29:25.489 --> 01:29:27.969
<v Speaker 0>Let's check the config map. The reddish is

01:29:27.969 --> 01:29:31.010
<v Speaker 0>different. They're

01:29:31.010 --> 01:29:32.369
<v Speaker 0>just using this.

01:29:33.810 --> 01:29:35.330
<v Speaker 1>Which is standard

01:29:36.995 --> 01:29:37.955
<v Speaker 1>Laravel.

01:29:38.515 --> 01:29:41.475
<v Speaker 0>So previous namespace metrics were enabled and metrics

01:29:41.475 --> 01:29:42.435
<v Speaker 0>route path.

01:29:42.995 --> 01:29:45.555
<v Speaker 0>Yes. Yes. It does want this. I'm just

01:29:45.555 --> 01:29:47.555
<v Speaker 0>gonna throw that in very quickly too. Even

01:29:47.555 --> 01:29:49.795
<v Speaker 0>though I killed in the last example

01:29:50.915 --> 01:29:52.860
<v Speaker 0>and then read this host red is port,

01:29:52.860 --> 01:29:55.340
<v Speaker 0>red is host and red at port. Yep.

01:30:00.460 --> 01:30:02.300
<v Speaker 1>You've need to put the prefix one back

01:30:02.300 --> 01:30:03.980
<v Speaker 1>in I think and the storage adapter.

01:30:05.515 --> 01:30:07.115
<v Speaker 1>Oh, the storage adapter. So that will make

01:30:07.115 --> 01:30:07.675
<v Speaker 1>it

01:30:08.235 --> 01:30:08.954
<v Speaker 1>not

01:30:13.115 --> 01:30:14.475
<v Speaker 1>that would make it not use Redis, would

01:30:14.475 --> 01:30:15.995
<v Speaker 1>it not? If he was Well, they seem

01:30:15.995 --> 01:30:18.400
<v Speaker 0>to use both. So I'm gonna that this

01:30:18.400 --> 01:30:19.840
<v Speaker 0>person knows what they're doing.

01:30:21.440 --> 01:30:23.120
<v Speaker 0>Because I have no idea what I'm doing.

01:30:23.120 --> 01:30:25.040
<v Speaker 0>So Redis

01:30:25.200 --> 01:30:25.920
<v Speaker 0>master.

01:30:28.720 --> 01:30:30.720
<v Speaker 0>And why am I getting red squiggles everywhere?

01:30:33.855 --> 01:30:35.375
<v Speaker 1>It's specified twice.

01:30:37.135 --> 01:30:39.615
<v Speaker 1>Thirty three and thirty six and thirty four.

01:30:39.615 --> 01:30:40.975
<v Speaker 0>Okay. Now it's happy.

01:30:42.335 --> 01:30:44.015
<v Speaker 0>We have a comment that I don't understand.

01:30:44.015 --> 01:30:45.615
<v Speaker 0>Hopefully one of you too, but Jake Harris

01:30:45.615 --> 01:30:48.400
<v Speaker 0>says 2021 and no auto discovery dance game.

01:30:48.560 --> 01:30:51.760
<v Speaker 0>I don't know. Yes. So in like Laravel

01:30:52.239 --> 01:30:53.439
<v Speaker 1>05/2006,

01:30:53.520 --> 01:30:55.199
<v Speaker 1>like about four years ago,

01:30:55.599 --> 01:30:57.599
<v Speaker 1>service providers were auto discovered.

01:30:59.199 --> 01:31:01.505
<v Speaker 1>So you don't have to do that stuff

01:31:01.505 --> 01:31:03.185
<v Speaker 1>where you added to the aliases just by

01:31:03.185 --> 01:31:04.945
<v Speaker 1>having a composer file. Having it in your

01:31:04.945 --> 01:31:07.505
<v Speaker 1>composer file would make it work. I'm guessing,

01:31:07.505 --> 01:31:08.625
<v Speaker 1>but he's just on about the fact that

01:31:08.625 --> 01:31:09.824
<v Speaker 1>it's not been, you know,

01:31:10.465 --> 01:31:12.624
<v Speaker 1>updated to have that stuff done.

01:31:13.665 --> 01:31:14.784
<v Speaker 0>Okay. So

01:31:15.185 --> 01:31:17.530
<v Speaker 0>FPM failed again.

01:31:22.890 --> 01:31:25.050
<v Speaker 1>And that looks like it didn't

01:31:25.130 --> 01:31:26.730
<v Speaker 1>pull in the composer.

01:31:27.850 --> 01:31:29.210
<v Speaker 1>Put in the package.

01:31:31.215 --> 01:31:33.135
<v Speaker 0>Do I need to delete the lock file?

01:31:34.175 --> 01:31:36.895
<v Speaker 1>No. Is it doing a compression install or

01:31:36.895 --> 01:31:37.935
<v Speaker 1>compression update?

01:31:39.935 --> 01:31:40.975
<v Speaker 0>I don't know.

01:31:42.735 --> 01:31:45.429
<v Speaker 2>In the j, in the Docker file.

01:31:46.790 --> 01:31:49.110
<v Speaker 0>Install preferred desk, no lens, no dev.

01:31:49.430 --> 01:31:50.790
<v Speaker 0>So delete the lock file.

01:31:52.630 --> 01:31:53.830
<v Speaker 1>Yeah. Yeah.

01:31:54.790 --> 01:31:56.375
<v Speaker 1>I don't know how it handles copying the

01:31:56.375 --> 01:31:57.655
<v Speaker 1>file that doesn't exist.

01:32:00.935 --> 01:32:02.534
<v Speaker 0>Alright. Fingers crossed.

01:32:02.935 --> 01:32:05.894
<v Speaker 1>It doesn't. Just I thought it might not.

01:32:05.975 --> 01:32:07.895
<v Speaker 0>Oh, Chris is back. Alright. Okay. Yeah. There

01:32:07.895 --> 01:32:08.455
<v Speaker 0>is a copy.

01:32:09.320 --> 01:32:09.960
<v Speaker 1>Yeah.

01:32:12.920 --> 01:32:13.960
<v Speaker 0>We'll get there.

01:32:14.440 --> 01:32:15.159
<v Speaker 1>Yeah.

01:32:20.120 --> 01:32:22.120
<v Speaker 0>I know we're we're over time for today.

01:32:22.120 --> 01:32:23.574
<v Speaker 0>So if either of you need to drop,

01:32:23.574 --> 01:32:24.454
<v Speaker 0>feel free.

01:32:26.215 --> 01:32:27.974
<v Speaker 1>I'm gonna go whenever. Alright.

01:32:29.895 --> 01:32:30.614
<v Speaker 2>Alright.

01:32:31.574 --> 01:32:33.335
<v Speaker 2>I'm gonna We have hit a lot. I

01:32:33.335 --> 01:32:34.775
<v Speaker 2>do actually have to go because I've got

01:32:34.775 --> 01:32:37.175
<v Speaker 2>a call in five minutes. Yeah. No worries,

01:32:37.175 --> 01:32:38.510
<v Speaker 0>mate. Thanks for tuning in and joining us.

01:32:38.510 --> 01:32:38.910
<v Speaker 0>Yeah.

01:32:39.790 --> 01:32:42.110
<v Speaker 2>I added a lot. Thanks for having me.

01:32:44.190 --> 01:32:45.790
<v Speaker 0>No worries. See soon. Okay.

01:32:47.950 --> 01:32:48.830
<v Speaker 0>So

01:32:49.870 --> 01:32:51.230
<v Speaker 0>what happened here then?

01:32:51.870 --> 01:32:53.824
<v Speaker 1>So this is saying that

01:32:56.545 --> 01:32:57.824
<v Speaker 1>the package

01:32:58.225 --> 01:33:00.705
<v Speaker 1>it can it basically can't resolve our dependencies

01:33:00.705 --> 01:33:01.985
<v Speaker 1>because we're using

01:33:03.425 --> 01:33:04.785
<v Speaker 1>a newer version of Guzzle

01:33:05.610 --> 01:33:07.770
<v Speaker 1>than what they basically, this is a package

01:33:07.770 --> 01:33:10.010
<v Speaker 1>that isn't up to date with

01:33:10.330 --> 01:33:11.929
<v Speaker 1>dependencies and stuff.

01:33:14.330 --> 01:33:16.409
<v Speaker 0>Is that maybe why someone forked it?

01:33:17.610 --> 01:33:18.809
<v Speaker 1>Well, yeah.

01:33:19.210 --> 01:33:21.155
<v Speaker 1>But then the one that's forked is

01:33:22.114 --> 01:33:24.355
<v Speaker 1>worse. I'm just gonna try and configure the

01:33:24.355 --> 01:33:26.515
<v Speaker 0>fork then the way the other one is

01:33:26.515 --> 01:33:28.995
<v Speaker 0>configured because it's so similar that I can't

01:33:28.995 --> 01:33:30.755
<v Speaker 0>can't see why it wouldn't work. Right?

01:33:31.315 --> 01:33:33.310
<v Speaker 1>Okay. Yeah. And if it doesn't work, you

01:33:33.310 --> 01:33:34.830
<v Speaker 0>know what? We'll come back to it another

01:33:34.830 --> 01:33:35.469
<v Speaker 0>day.

01:33:36.270 --> 01:33:38.269
<v Speaker 0>But I'm gonna give this my best shot.

01:33:41.070 --> 01:33:42.909
<v Speaker 0>If anyone watching has

01:33:43.070 --> 01:33:45.864
<v Speaker 0>added Prometheus to their application, feel free to

01:33:46.505 --> 01:33:48.184
<v Speaker 0>throw some advice our way.

01:33:49.145 --> 01:33:51.065
<v Speaker 0>Alright. So we wanna add something to contact

01:33:51.065 --> 01:33:53.624
<v Speaker 0>app aliases, which we did previously.

01:33:55.545 --> 01:33:56.425
<v Speaker 1>Wrong code.

01:33:59.080 --> 01:34:01.080
<v Speaker 1>To me, this just looks like it's screaming

01:34:01.080 --> 01:34:03.320
<v Speaker 1>out for somebody to write a new

01:34:03.800 --> 01:34:05.480
<v Speaker 1>and better package.

01:34:05.720 --> 01:34:07.800
<v Speaker 0>Yeah. It's kind of the vibe I'm getting.

01:34:07.800 --> 01:34:09.239
<v Speaker 0>That's the wrong one.

01:34:11.239 --> 01:34:12.440
<v Speaker 1>Could be a fun

01:34:12.805 --> 01:34:14.405
<v Speaker 1>could be a fun project to do, I

01:34:14.405 --> 01:34:14.885
<v Speaker 1>guess.

01:34:16.805 --> 01:34:19.045
<v Speaker 1>But, yeah, most of this was modified two

01:34:19.045 --> 01:34:21.445
<v Speaker 1>years ago. Bits of it were changed five

01:34:21.445 --> 01:34:22.645
<v Speaker 1>months ago, but

01:34:28.840 --> 01:34:30.999
<v Speaker 0>Okay. So I've added the alias.

01:34:33.719 --> 01:34:35.719
<v Speaker 0>We need to register this,

01:34:35.960 --> 01:34:37.559
<v Speaker 0>which seems to be done in its own

01:34:37.559 --> 01:34:38.359
<v Speaker 0>way,

01:34:38.360 --> 01:34:40.695
<v Speaker 0>but we copied, you know, we saw that

01:34:40.695 --> 01:34:41.494
<v Speaker 0>up here.

01:34:43.175 --> 01:34:44.135
<v Speaker 0>And

01:34:45.415 --> 01:34:48.455
<v Speaker 0>I think I already modified composer dot JSON

01:34:48.455 --> 01:34:49.894
<v Speaker 0>but I'll double check.

01:34:50.614 --> 01:34:53.415
<v Speaker 0>Yes. Just one second. What version of Laravel

01:34:53.415 --> 01:34:55.070
<v Speaker 1>are we using? Can you check the composer

01:34:55.070 --> 01:34:56.110
<v Speaker 1>dot JSON file?

01:34:57.150 --> 01:34:57.869
<v Speaker 1>Right.

01:34:59.310 --> 01:35:00.510
<v Speaker 1>Yeah. This won't work.

01:35:01.550 --> 01:35:03.470
<v Speaker 1>The package hasn't been updated. It's only it

01:35:03.470 --> 01:35:05.710
<v Speaker 1>only seems to support version seven, and there's

01:35:05.710 --> 01:35:06.750
<v Speaker 1>an there's an open

01:35:06.990 --> 01:35:09.230
<v Speaker 1>issue on there for supporting seven. So

01:35:10.335 --> 01:35:12.094
<v Speaker 0>So does that mean there is

01:35:13.055 --> 01:35:17.054
<v Speaker 0>there is no working Prometheus Laravel package?

01:35:18.415 --> 01:35:20.415
<v Speaker 1>It certainly looks that way from a cursory

01:35:20.415 --> 01:35:21.295
<v Speaker 1>look at Google. Yeah.

01:35:25.490 --> 01:35:26.449
<v Speaker 0>Laravel.

01:35:27.330 --> 01:35:28.929
<v Speaker 0>I find that hard to believe.

01:35:32.130 --> 01:35:35.250
<v Speaker 1>Would that be an alternative instead of Prometheus,

01:35:35.895 --> 01:35:36.614
<v Speaker 1>like

01:35:37.255 --> 01:35:41.014
<v Speaker 1>that is done by somebody or maybe?

01:35:42.935 --> 01:35:44.695
<v Speaker 0>So I mean I can definitely walk through.

01:35:44.695 --> 01:35:46.295
<v Speaker 0>Why don't we add a manual metrics endpoint

01:35:46.295 --> 01:35:47.655
<v Speaker 0>for now? Can show people

01:35:48.460 --> 01:35:50.620
<v Speaker 0>I mean it's so easy right,

01:35:51.100 --> 01:35:52.940
<v Speaker 0>these packages are supposed to make it

01:35:53.580 --> 01:35:55.900
<v Speaker 0>automated and that you know the metal where

01:35:55.900 --> 01:35:57.740
<v Speaker 0>we'll hook out to the request pipeline see

01:35:57.740 --> 01:35:59.500
<v Speaker 0>the request coming and take a timestamp see

01:35:59.500 --> 01:36:01.175
<v Speaker 0>the request going out take a time stamp,

01:36:01.175 --> 01:36:02.535
<v Speaker 0>hold them in memory and then drop them

01:36:02.535 --> 01:36:05.094
<v Speaker 0>into a page right. But Prometheus metrics

01:36:05.175 --> 01:36:08.054
<v Speaker 0>are not difficult so let's remove

01:36:08.535 --> 01:36:09.255
<v Speaker 0>this,

01:36:09.895 --> 01:36:11.895
<v Speaker 0>let's go back into our config, let's remove

01:36:11.895 --> 01:36:13.175
<v Speaker 0>all that stuff as well.

01:36:15.335 --> 01:36:17.370
<v Speaker 0>Really disappointed there wasn't just a make it

01:36:17.370 --> 01:36:18.650
<v Speaker 0>go package.

01:36:19.130 --> 01:36:21.050
<v Speaker 0>One thing we could Yeah. Just looked like

01:36:21.050 --> 01:36:22.090
<v Speaker 1>there was one that's

01:36:22.250 --> 01:36:24.249
<v Speaker 1>an opening in the market of

01:36:24.730 --> 01:36:26.010
<v Speaker 1>packages where

01:36:27.370 --> 01:36:29.290
<v Speaker 1>it'd be a nice nice thing to fill.

01:36:29.365 --> 01:36:31.685
<v Speaker 0>We could instrument through open telemetry

01:36:32.245 --> 01:36:34.165
<v Speaker 0>which is another really really good approach for

01:36:34.165 --> 01:36:36.325
<v Speaker 0>doing distribute iteration in your application. It's not

01:36:36.325 --> 01:36:37.925
<v Speaker 0>what I'm trying to show today so I

01:36:37.925 --> 01:36:40.485
<v Speaker 0>won't do that. We'll add a custom metrics

01:36:40.485 --> 01:36:41.525
<v Speaker 0>endpoint right now

01:36:42.325 --> 01:36:43.925
<v Speaker 0>and then we'll wrap up for today and

01:36:43.925 --> 01:36:45.699
<v Speaker 0>I think we'll come back and we'll revisit

01:36:46.580 --> 01:36:48.100
<v Speaker 0>you know maybe even you and I can

01:36:48.100 --> 01:36:50.180
<v Speaker 0>sit down and write a Laravel middleware to

01:36:50.180 --> 01:36:52.020
<v Speaker 0>do this like I said it is not

01:36:52.020 --> 01:36:52.739
<v Speaker 0>difficult.

01:36:53.380 --> 01:36:55.380
<v Speaker 1>Yeah, no I'm down for that because

01:36:56.260 --> 01:36:59.300
<v Speaker 1>writing Laravel packages is quite fun so.

01:36:59.540 --> 01:36:59.860
<v Speaker 0>Okay.

01:37:00.375 --> 01:37:02.295
<v Speaker 0>Let's save all of this. I'm gonna close

01:37:02.295 --> 01:37:03.735
<v Speaker 0>all my tabs. How do I add a

01:37:03.735 --> 01:37:05.735
<v Speaker 0>new route to my Laravel application?

01:37:06.055 --> 01:37:09.974
<v Speaker 1>Okay. So go to routes/web.PHP.

01:37:11.895 --> 01:37:14.055
<v Speaker 0>Okay. Next. This is kind of a caveman

01:37:13.920 --> 01:37:14.880
<v Speaker 1>approach but

01:37:15.120 --> 01:37:17.600
<v Speaker 0>I'm okay with caveman approach because we are

01:37:17.600 --> 01:37:18.880
<v Speaker 0>over time but I wanna try and get

01:37:18.880 --> 01:37:20.159
<v Speaker 0>something working. So

01:37:20.800 --> 01:37:21.840
<v Speaker 0>how to

01:37:22.719 --> 01:37:23.760
<v Speaker 1>You want it to be a get request

01:37:23.760 --> 01:37:25.119
<v Speaker 1>then get

01:37:25.280 --> 01:37:27.280
<v Speaker 1>the path and then Is there no shorthand

01:37:27.280 --> 01:37:28.960
<v Speaker 0>functions and text in PHP?

01:37:29.975 --> 01:37:32.135
<v Speaker 1>There is. I just don't use it because

01:37:32.135 --> 01:37:33.655
<v Speaker 1>it's PHP

01:37:33.735 --> 01:37:35.495
<v Speaker 1>eight and some of our stuff is still

01:37:35.495 --> 01:37:38.215
<v Speaker 1>using PHP seven point stuff.

01:37:38.695 --> 01:37:40.535
<v Speaker 0>Okay. Can I just use print here?

01:37:43.910 --> 01:37:45.670
<v Speaker 1>So like

01:37:45.670 --> 01:37:46.790
<v Speaker 1>what do you want to do? Just get

01:37:46.790 --> 01:37:48.870
<v Speaker 1>like a string on the page? I just

01:37:48.870 --> 01:37:51.750
<v Speaker 0>wanna return a plain text string. Okay. Return

01:37:51.750 --> 01:37:53.909
<v Speaker 1>double quote string in there and double quotes.

01:37:54.150 --> 01:37:56.935
<v Speaker 0>That's it. Does PHP have string literals, multi

01:37:56.935 --> 01:37:57.895
<v Speaker 0>lane strings?

01:37:59.655 --> 01:38:02.215
<v Speaker 1>Yeah. So it's Oh, Christ. How do you

01:38:02.215 --> 01:38:04.695
<v Speaker 1>do that? Three left Chevron's

01:38:06.375 --> 01:38:07.175
<v Speaker 1>Chevron's.

01:38:07.630 --> 01:38:09.390
<v Speaker 0>Really? I have to do it here doc?

01:38:10.510 --> 01:38:12.270
<v Speaker 1>I believe that's how you do it. Yeah.

01:38:13.550 --> 01:38:14.910
<v Speaker 1>Well, you can do double quotes and pull

01:38:14.910 --> 01:38:16.190
<v Speaker 1>out in multiple lines if you want to.

01:38:16.190 --> 01:38:16.350
<v Speaker 1>That's

01:38:17.390 --> 01:38:19.870
<v Speaker 1>Sorry. Yeah. Yeah. Yeah. Okay.

01:38:20.590 --> 01:38:21.550
<v Speaker 0>So let's

01:38:21.630 --> 01:38:24.155
<v Speaker 0>try and get that response time here. These

01:38:24.155 --> 01:38:26.955
<v Speaker 0>are just Prometheus metrics, there's nothing fancy here

01:38:26.955 --> 01:38:28.635
<v Speaker 0>and then I can do one,

01:38:29.915 --> 01:38:32.315
<v Speaker 0>I can add metadata to this, I could

01:38:32.315 --> 01:38:34.155
<v Speaker 0>say app is Laravel.

01:38:37.110 --> 01:38:39.030
<v Speaker 0>And this was gonna be a histogram. I

01:38:39.030 --> 01:38:41.190
<v Speaker 0>would add my buckets, so we'll see less

01:38:41.190 --> 01:38:42.070
<v Speaker 0>than one,

01:38:44.949 --> 01:38:47.350
<v Speaker 0>two second responses, three second responses.

01:38:47.350 --> 01:38:49.625
<v Speaker 0>We'll assume that, you know, a 20 requests

01:38:49.625 --> 01:38:50.745
<v Speaker 0>of 28

01:38:50.745 --> 01:38:52.665
<v Speaker 0>requests of command and we responded under one

01:38:52.665 --> 01:38:54.985
<v Speaker 0>second. We've had four or two requests that

01:38:54.985 --> 01:38:56.425
<v Speaker 0>took two seconds and one request that took

01:38:56.425 --> 01:38:58.425
<v Speaker 0>three seconds. That's it. That is a met

01:38:58.585 --> 01:39:00.905
<v Speaker 0>that is a metrics endpoint. Obviously we'd want

01:39:00.905 --> 01:39:01.465
<v Speaker 0>real data.

01:39:02.260 --> 01:39:04.900
<v Speaker 0>Yeah. Why is my end of here doc

01:39:04.900 --> 01:39:05.940
<v Speaker 0>not working?

01:39:07.780 --> 01:39:10.180
<v Speaker 1>So you need to put a semicolon at

01:39:10.180 --> 01:39:12.100
<v Speaker 1>the end of it. I tried that.

01:39:12.740 --> 01:39:15.060
<v Speaker 1>And also semicolon after your Monday.

01:39:15.300 --> 01:39:16.524
<v Speaker 0>Got it. Thank you.

01:39:17.244 --> 01:39:19.644
<v Speaker 0>So obviously we've actually went to middleware to

01:39:19.644 --> 01:39:21.965
<v Speaker 0>track how many requests are fitting into each

01:39:21.965 --> 01:39:23.804
<v Speaker 0>bucket. We can also add any arbitrary metric

01:39:23.804 --> 01:39:25.405
<v Speaker 0>here that we want and we could do

01:39:25.405 --> 01:39:26.524
<v Speaker 0>HTTP

01:39:26.684 --> 01:39:27.405
<v Speaker 0>version

01:39:28.525 --> 01:39:29.324
<v Speaker 0>at

01:39:29.724 --> 01:39:30.525
<v Speaker 0>Laravel

01:39:33.110 --> 01:39:34.709
<v Speaker 0>PHP 7.4.

01:39:37.030 --> 01:39:39.190
<v Speaker 0>And another thing we could do is

01:39:40.389 --> 01:39:41.909
<v Speaker 0>users

01:39:43.875 --> 01:39:47.395
<v Speaker 0>Name name equals David. And we had two

01:39:47.395 --> 01:39:48.435
<v Speaker 0>Davids. Right?

01:39:49.715 --> 01:39:50.915
<v Speaker 0>Completely random.

01:39:51.555 --> 01:39:53.075
<v Speaker 0>And but this is all our metrics endpoint

01:39:53.075 --> 01:39:56.179
<v Speaker 0>is is something that fits this form and

01:39:56.179 --> 01:39:57.860
<v Speaker 0>then we can deploy it. So I'm gonna

01:39:57.860 --> 01:39:58.420
<v Speaker 0>hopefully

01:39:58.980 --> 01:40:02.099
<v Speaker 0>build this image deploy it, hit metrics endpoint.

01:40:04.020 --> 01:40:06.340
<v Speaker 0>Prometheus hopefully if I'm not messing up enough,

01:40:06.340 --> 01:40:08.260
<v Speaker 0>we'll scrape that based on the service monitor

01:40:08.260 --> 01:40:08.980
<v Speaker 0>that we created

01:40:09.705 --> 01:40:11.784
<v Speaker 0>and we could use that for an HPA.

01:40:11.865 --> 01:40:13.945
<v Speaker 0>That's kind of where I want us, hopefully

01:40:13.945 --> 01:40:15.225
<v Speaker 0>be finished in the next

01:40:15.705 --> 01:40:17.465
<v Speaker 0>five minutes confidence.

01:40:17.865 --> 01:40:18.505
<v Speaker 1>Okay.

01:40:18.745 --> 01:40:20.265
<v Speaker 0>And maybe I'll get some lunch today.

01:40:21.930 --> 01:40:24.010
<v Speaker 1>It's quarter four if you're eating anything yet.

01:40:24.890 --> 01:40:26.250
<v Speaker 0>It's been a busy day.

01:40:26.490 --> 01:40:27.050
<v Speaker 0>So

01:40:28.490 --> 01:40:30.250
<v Speaker 0>Jake Harris, I think he's picking up the

01:40:30.250 --> 01:40:33.290
<v Speaker 0>gauntlet and is gonna attempt to magic us

01:40:33.290 --> 01:40:35.465
<v Speaker 0>a Prometheus middleware from Laravel that would be

01:40:35.465 --> 01:40:37.704
<v Speaker 0>amazing and Alex and I would both be

01:40:37.704 --> 01:40:39.304
<v Speaker 0>happy to help, please feel free to link

01:40:39.304 --> 01:40:41.304
<v Speaker 0>us to any repository or any efforts.

01:40:42.025 --> 01:40:42.664
<v Speaker 0>Okay.

01:40:42.905 --> 01:40:44.185
<v Speaker 0>Now that we have a new image we

01:40:44.185 --> 01:40:46.105
<v Speaker 0>just wanna redeploy

01:40:46.105 --> 01:40:47.545
<v Speaker 0>all of our manifests,

01:40:47.545 --> 01:40:49.385
<v Speaker 0>hopefully I've not broken anything in there during

01:40:49.385 --> 01:40:51.730
<v Speaker 0>this kind of hectic component

01:40:52.450 --> 01:40:54.690
<v Speaker 0>and then we're gonna do a get pods.

01:40:56.530 --> 01:40:57.489
<v Speaker 0>Let's see,

01:40:58.210 --> 01:41:00.530
<v Speaker 0>four seconds, that's good. So we have got

01:41:00.530 --> 01:41:01.890
<v Speaker 0>a deployed application.

01:41:03.675 --> 01:41:05.354
<v Speaker 0>Gonna port forward

01:41:05.514 --> 01:41:06.875
<v Speaker 0>to Laravel

01:41:06.875 --> 01:41:07.994
<v Speaker 0>example.

01:41:09.195 --> 01:41:11.675
<v Speaker 0>Let's see if eighty eighty is available. Yep.

01:41:13.195 --> 01:41:14.715
<v Speaker 0>We should have our application

01:41:15.114 --> 01:41:16.155
<v Speaker 0>and we should have,

01:41:18.840 --> 01:41:20.440
<v Speaker 0>We don't get new lines or is that

01:41:20.440 --> 01:41:21.400
<v Speaker 0>just my browser?

01:41:22.280 --> 01:41:25.320
<v Speaker 1>If you've used our. Okay. Cool. Yeah. Usually

01:41:25.800 --> 01:41:27.880
<v Speaker 0>if I must be my Chrome has a

01:41:27.880 --> 01:41:31.005
<v Speaker 0>primipious extension that formats metrics but oh well.

01:41:31.005 --> 01:41:31.644
<v Speaker 0>Okay.

01:41:32.445 --> 01:41:35.485
<v Speaker 0>That's I mean, wish I could say it's

01:41:36.125 --> 01:41:37.725
<v Speaker 0>there's more magic than this but that's all

01:41:37.725 --> 01:41:39.485
<v Speaker 0>the metrics endpoint is. Obviously you want the

01:41:39.485 --> 01:41:42.364
<v Speaker 0>numbers to be real, you want the dimensions,

01:41:42.364 --> 01:41:43.244
<v Speaker 0>the metadata

01:41:43.565 --> 01:41:46.390
<v Speaker 0>to be vast and understand your application, you

01:41:46.390 --> 01:41:48.390
<v Speaker 0>can expose as much context as you want

01:41:48.390 --> 01:41:49.590
<v Speaker 0>here that you want to be able to

01:41:49.590 --> 01:41:51.910
<v Speaker 0>query slice and dice with from a monitoring

01:41:51.910 --> 01:41:52.949
<v Speaker 0>perspective.

01:41:53.350 --> 01:41:55.190
<v Speaker 1>You'd also want it to be behind some

01:41:55.190 --> 01:41:57.275
<v Speaker 1>form of authentication I guess wouldn't you? Some

01:41:57.275 --> 01:41:58.314
<v Speaker 1>sort of like,

01:41:58.715 --> 01:42:00.474
<v Speaker 1>you wouldn't I mean you may only want

01:42:00.474 --> 01:42:03.195
<v Speaker 0>to respond on a local internet address like

01:42:03.195 --> 01:42:04.795
<v Speaker 0>the you know, the Kubernetes

01:42:04.795 --> 01:42:07.675
<v Speaker 0>and pod or service ciders, sure. 10. Something

01:42:07.675 --> 01:42:09.435
<v Speaker 1>or whatever. You might not want to, yeah,

01:42:09.435 --> 01:42:10.635
<v Speaker 0>you probably don't want it to be exposed

01:42:10.635 --> 01:42:13.170
<v Speaker 0>to your public end using customers. Yes. But

01:42:13.170 --> 01:42:14.050
<v Speaker 0>I wouldn't

01:42:15.090 --> 01:42:17.170
<v Speaker 0>necessarily put it behind off, I would probably

01:42:17.170 --> 01:42:17.730
<v Speaker 0>just

01:42:18.690 --> 01:42:23.250
<v Speaker 1>Firewall or something. Okay, something like that. That's

01:42:23.250 --> 01:42:24.930
<v Speaker 0>a whole, I mean there's so many different

01:42:24.930 --> 01:42:27.170
<v Speaker 0>approaches to that but let's cover that later.

01:42:27.375 --> 01:42:29.614
<v Speaker 0>Okay. Let's see if our service monitor works.

01:42:29.615 --> 01:42:30.255
<v Speaker 0>So

01:42:33.135 --> 01:42:34.014
<v Speaker 0>let's see.

01:42:34.575 --> 01:42:35.534
<v Speaker 0>Describe

01:42:35.695 --> 01:42:37.135
<v Speaker 0>service monitor Laravel.

01:42:41.780 --> 01:42:42.660
<v Speaker 0>Hopefully

01:42:42.980 --> 01:42:46.180
<v Speaker 0>let's get our Prometheus up and running again.

01:42:46.180 --> 01:42:48.020
<v Speaker 0>Did I still have that port forwarding?

01:42:49.620 --> 01:42:51.300
<v Speaker 0>I can't even remember what my port forwards

01:42:51.300 --> 01:42:53.300
<v Speaker 0>are anymore. It was like ninety one ninety

01:42:53.300 --> 01:42:55.795
<v Speaker 1>one I think for that one. That's linker

01:42:55.795 --> 01:42:58.594
<v Speaker 0>d. Okay. Let's close them. Let's port forward.

01:42:59.475 --> 01:43:00.835
<v Speaker 0>I know. You need some

01:43:01.075 --> 01:43:02.594
<v Speaker 1>you need to get on the

01:43:02.995 --> 01:43:03.795
<v Speaker 1>screens

01:43:05.075 --> 01:43:06.195
<v Speaker 1>or t mux.

01:43:07.395 --> 01:43:09.315
<v Speaker 0>I can't I can't stand t mux. Okay.

01:43:10.909 --> 01:43:11.709
<v Speaker 1>How come?

01:43:13.310 --> 01:43:16.590
<v Speaker 0>I just break scrolling. Scrolling becomes really cumbersome

01:43:16.590 --> 01:43:18.270
<v Speaker 0>on it. Oh yes. It's like can be

01:43:18.270 --> 01:43:20.030
<v Speaker 1>left square bracket and yeah.

01:43:23.389 --> 01:43:25.835
<v Speaker 0>I wish my service monitor was working.

01:43:26.635 --> 01:43:28.635
<v Speaker 1>So what is the service monitor trying to

01:43:28.635 --> 01:43:29.195
<v Speaker 1>do?

01:43:29.675 --> 01:43:32.074
<v Speaker 0>Okay. So Prometheus is a pool based system,

01:43:32.955 --> 01:43:34.955
<v Speaker 0>which means that Prometheus has to know which

01:43:34.955 --> 01:43:37.790
<v Speaker 0>pods within our cluster should be, they should

01:43:37.790 --> 01:43:38.989
<v Speaker 0>fetch metrics from.

01:43:39.470 --> 01:43:42.270
<v Speaker 0>It does that should the Prometheus operator monitoring

01:43:42.270 --> 01:43:44.510
<v Speaker 0>for our service monitors here

01:43:45.630 --> 01:43:46.190
<v Speaker 0>and

01:43:46.430 --> 01:43:48.350
<v Speaker 0>those service monitors tell how to find things

01:43:48.350 --> 01:43:50.375
<v Speaker 0>that expose previous metrics and then updates the

01:43:50.375 --> 01:43:52.135
<v Speaker 0>targets and then it should just work.

01:43:52.855 --> 01:43:54.215
<v Speaker 1>But where have you told it to go

01:43:54.215 --> 01:43:55.815
<v Speaker 1>to slash metrics?

01:43:57.655 --> 01:44:00.375
<v Speaker 0>Okay. Let's let's double check my configuration. So

01:44:00.375 --> 01:44:02.535
<v Speaker 0>we added something to our resources

01:44:03.120 --> 01:44:04.719
<v Speaker 0>here in Prometheus.

01:44:05.440 --> 01:44:08.400
<v Speaker 0>We told it to find Laravel example application

01:44:09.280 --> 01:44:12.400
<v Speaker 0>use port 80 and that's gonna go to

01:44:12.480 --> 01:44:15.280
<v Speaker 0>the pods and this application on port 80

01:44:15.280 --> 01:44:17.385
<v Speaker 0>and fetch slash metrics.

01:44:17.625 --> 01:44:19.625
<v Speaker 1>Oh it doesn't that slash metrics by default?

01:44:19.625 --> 01:44:20.264
<v Speaker 0>Yes.

01:44:20.505 --> 01:44:21.544
<v Speaker 1>Okay. Right.

01:44:22.264 --> 01:44:22.905
<v Speaker 0>So

01:44:23.065 --> 01:44:24.664
<v Speaker 0>labels team front end

01:44:24.985 --> 01:44:25.864
<v Speaker 0>exist

01:44:26.185 --> 01:44:28.505
<v Speaker 0>should be going to this Prometheus.

01:44:32.670 --> 01:44:34.350
<v Speaker 0>So we can double check that we have

01:44:34.350 --> 01:44:36.430
<v Speaker 0>this label on our deployment. I'm pretty sure

01:44:36.430 --> 01:44:37.389
<v Speaker 0>we do.

01:44:38.430 --> 01:44:40.590
<v Speaker 1>Yeah. Think you copied that one. Yep. And

01:44:40.590 --> 01:44:43.070
<v Speaker 0>our pod gets it too, which is perfect.

01:44:43.950 --> 01:44:44.910
<v Speaker 2>And the port is 80.

01:44:45.585 --> 01:44:46.864
<v Speaker 0>The port is 80.

01:44:47.585 --> 01:44:48.145
<v Speaker 1>Yep.

01:44:48.864 --> 01:44:50.465
<v Speaker 1>Oh is it getting is it getting that

01:44:50.465 --> 01:44:51.184
<v Speaker 1>from

01:44:51.905 --> 01:44:53.585
<v Speaker 1>don't matter if it goes via the NGINX

01:44:53.585 --> 01:44:55.425
<v Speaker 1>to FPM does it? That doesn't matter.

01:44:56.465 --> 01:44:57.825
<v Speaker 0>No because we hit that in the browser

01:44:57.825 --> 01:44:58.945
<v Speaker 0>so it should be okay. Yeah.

01:45:00.630 --> 01:45:01.349
<v Speaker 0>So

01:45:01.510 --> 01:45:03.829
<v Speaker 0>let's port forward to Prometheus again.

01:45:05.510 --> 01:45:05.989
<v Speaker 0>Which

01:45:07.270 --> 01:45:08.469
<v Speaker 0>let's see.

01:45:10.790 --> 01:45:11.750
<v Speaker 0>Service discovery.

01:45:19.015 --> 01:45:21.495
<v Speaker 0>That seem to be picking up some Laravel

01:45:21.495 --> 01:45:22.535
<v Speaker 0>configuration.

01:45:23.895 --> 01:45:24.935
<v Speaker 0>Oh, that's the job.

01:45:30.950 --> 01:45:32.630
<v Speaker 0>Why is it going to the job?

01:45:33.510 --> 01:45:35.030
<v Speaker 0>Wonder if it has the same labels on

01:45:35.030 --> 01:45:35.590
<v Speaker 0>it.

01:45:36.390 --> 01:45:38.230
<v Speaker 1>Oh, it probably does.

01:45:38.790 --> 01:45:41.030
<v Speaker 0>Alright, let's try it. It was a generic

01:45:41.030 --> 01:45:43.965
<v Speaker 1>label and not specific for web or anything.

01:45:43.965 --> 01:45:45.725
<v Speaker 0>Okay let's add Promise.

01:45:47.405 --> 01:45:49.165
<v Speaker 0>I don't know why but I'm gonna add

01:45:49.165 --> 01:45:49.565
<v Speaker 0>it

01:45:50.045 --> 01:45:52.125
<v Speaker 0>and see if that tweaks our configuration.

01:45:52.125 --> 01:45:54.539
<v Speaker 0>Let's modify this here So

01:45:55.659 --> 01:45:57.579
<v Speaker 0>instead of going here we'll do this

01:45:58.300 --> 01:46:00.139
<v Speaker 0>and we'll do the same.

01:46:00.699 --> 01:46:02.540
<v Speaker 0>Well, in fact that's okay. Yeah. That should

01:46:02.540 --> 01:46:03.659
<v Speaker 0>hopefully work.

01:46:04.460 --> 01:46:06.219
<v Speaker 0>Who knows at this point, right? So let's

01:46:06.219 --> 01:46:07.260
<v Speaker 0>apply everything.

01:46:09.099 --> 01:46:11.135
<v Speaker 1>Oh. Did not allow that. Yeah. It's okay.

01:46:11.135 --> 01:46:12.814
<v Speaker 0>Let's just delete or deploy.

01:46:13.054 --> 01:46:13.774
<v Speaker 1>Okay.

01:46:20.175 --> 01:46:23.614
<v Speaker 0>We'll give that a second. Hopefully just

01:46:22.610 --> 01:46:24.770
<v Speaker 0>fat. Yeah. It's almost healthy already. So we

01:46:24.770 --> 01:46:25.889
<v Speaker 0>have a comment.

01:46:26.770 --> 01:46:30.130
<v Speaker 0>No. I know. Says open telemetry for PHP

01:46:30.130 --> 01:46:32.209
<v Speaker 0>is very new. So waiting on GRPC

01:46:33.010 --> 01:46:35.809
<v Speaker 0>and the PHP package to help with direct

01:46:34.935 --> 01:46:36.215
<v Speaker 0>integration with Honeycomb.

01:46:36.535 --> 01:46:38.775
<v Speaker 0>Yes. Honeycomb is a great front end for

01:46:38.775 --> 01:46:41.415
<v Speaker 0>open telemetry and distributed traces and structured events.

01:46:41.495 --> 01:46:42.295
<v Speaker 0>Really cool.

01:46:43.655 --> 01:46:45.975
<v Speaker 0>Just really cool product. Definitely worth checking out

01:46:45.975 --> 01:46:46.855
<v Speaker 0>in this space

01:46:47.255 --> 01:46:49.255
<v Speaker 0>and open telemetry is new all around the

01:46:49.255 --> 01:46:49.495
<v Speaker 0>board.

01:46:50.690 --> 01:46:53.570
<v Speaker 0>They are starting to stabilize on their APIs,

01:46:53.570 --> 01:46:54.610
<v Speaker 0>they have caught up with a lot of

01:46:54.610 --> 01:46:56.050
<v Speaker 0>the feature gaps that they had during the

01:46:56.050 --> 01:46:59.330
<v Speaker 0>migration from open census and distributed tracing open

01:46:59.330 --> 01:47:00.050
<v Speaker 0>tracing.

01:47:00.850 --> 01:47:02.255
<v Speaker 0>Yeah, it's worth checking out and I think

01:47:02.255 --> 01:47:04.895
<v Speaker 0>instrumenting your application open telemetry now is

01:47:05.375 --> 01:47:07.455
<v Speaker 0>definitely the safest way to move forward.

01:47:08.815 --> 01:47:10.815
<v Speaker 0>Alright. Let's see what happens. Let's go back

01:47:10.815 --> 01:47:11.695
<v Speaker 0>to our targets.

01:47:15.450 --> 01:47:17.930
<v Speaker 0>Prometheus, you're really annoying me today. I

01:47:22.010 --> 01:47:23.530
<v Speaker 0>wonder if we can just do this old

01:47:23.530 --> 01:47:25.530
<v Speaker 0>school style. Prometheus

01:47:25.530 --> 01:47:26.330
<v Speaker 0>annotation.

01:47:28.905 --> 01:47:30.265
<v Speaker 0>There used to be a way where you

01:47:30.265 --> 01:47:32.185
<v Speaker 0>could just add an annotation to your pod

01:47:32.185 --> 01:47:34.425
<v Speaker 0>and tell Prometheus to go find you.

01:47:36.745 --> 01:47:38.745
<v Speaker 0>May still work at all the service monitors

01:47:38.745 --> 01:47:40.825
<v Speaker 0>are the replacement for that so we'd begin

01:47:40.825 --> 01:47:42.745
<v Speaker 0>to fix it. But I'm also worried about

01:47:42.745 --> 01:47:43.385
<v Speaker 0>time here.

01:47:44.590 --> 01:47:47.390
<v Speaker 0>We're way over where we wanna be. So

01:47:51.150 --> 01:47:52.430
<v Speaker 0>let's see if we can get any more

01:47:52.430 --> 01:47:54.110
<v Speaker 0>information from that service monitor.

01:47:58.465 --> 01:47:59.265
<v Speaker 0>Laravel.

01:48:11.040 --> 01:48:11.840
<v Speaker 0>Okay.

01:48:12.560 --> 01:48:15.200
<v Speaker 0>No is working on an open telemetry package.

01:48:15.200 --> 01:48:17.760
<v Speaker 0>GitHub slash Sean hood slash. You know what?

01:48:17.760 --> 01:48:20.000
<v Speaker 0>I actually came across that and opened it

01:48:20.000 --> 01:48:20.719
<v Speaker 0>earlier.

01:48:21.440 --> 01:48:23.855
<v Speaker 0>Your package. I haven't opened on my other

01:48:24.015 --> 01:48:24.895
<v Speaker 0>browser.

01:48:26.975 --> 01:48:30.175
<v Speaker 0>I was gonna show this off today but

01:48:30.175 --> 01:48:30.895
<v Speaker 0>I hadn't,

01:48:31.375 --> 01:48:32.495
<v Speaker 0>I didn't really want to go into the

01:48:32.495 --> 01:48:34.495
<v Speaker 0>open telemetry stuff but we both definitely do

01:48:34.495 --> 01:48:37.270
<v Speaker 0>more on open telemetry over the coming weeks

01:48:37.270 --> 01:48:38.550
<v Speaker 0>so yeah,

01:48:38.870 --> 01:48:40.550
<v Speaker 0>cool that you're working on that package.

01:48:42.230 --> 01:48:43.749
<v Speaker 0>Okay, service monitor.

01:48:44.790 --> 01:48:46.630
<v Speaker 0>Promo labels, yes

01:48:47.030 --> 01:48:48.710
<v Speaker 0>port 80 should be fine.

01:48:50.535 --> 01:48:52.215
<v Speaker 0>What we can do is take a look

01:48:52.215 --> 01:48:54.215
<v Speaker 0>at the logs which I know failed as

01:48:54.215 --> 01:48:56.375
<v Speaker 0>measurably earlier on the operator.

01:48:57.975 --> 01:48:59.975
<v Speaker 0>Yeah, that logging is crap.

01:49:02.970 --> 01:49:04.730
<v Speaker 0>I'm gonna restart it

01:49:05.290 --> 01:49:06.650
<v Speaker 0>just for the sake.

01:49:11.210 --> 01:49:14.010
<v Speaker 0>Let's see if it reconfigures the Prometheus

01:49:14.010 --> 01:49:15.690
<v Speaker 0>thing. I mean it should be dynamic.

01:49:28.290 --> 01:49:29.970
<v Speaker 0>Start everything. Right? So

01:49:30.850 --> 01:49:32.530
<v Speaker 1>Yeah. It went last time.

01:49:33.890 --> 01:49:35.010
<v Speaker 0>Okay. So

01:49:35.410 --> 01:49:37.090
<v Speaker 0>I'll go check our targets.

01:49:40.130 --> 01:49:41.570
<v Speaker 1>So where it says zero out of 11

01:49:41.570 --> 01:49:43.755
<v Speaker 1>active targets that mean that it's not finding

01:49:45.115 --> 01:49:47.035
<v Speaker 1>how to access those 11.

01:49:49.595 --> 01:49:51.355
<v Speaker 0>Yeah. It's the service monitor is not picking

01:49:51.355 --> 01:49:52.875
<v Speaker 0>up our application whatsoever.

01:49:54.235 --> 01:49:55.995
<v Speaker 0>So which is frustrating.

01:49:56.475 --> 01:49:56.635
<v Speaker 0>Anyway,

01:49:58.480 --> 01:50:00.240
<v Speaker 0>think we'll just need to leave it there.

01:50:00.240 --> 01:50:02.400
<v Speaker 0>Not as successful as I was hoping.

01:50:02.560 --> 01:50:06.160
<v Speaker 0>I think there is a lot. Let me

01:50:06.160 --> 01:50:08.320
<v Speaker 0>drop off our empty slot there. You know,

01:50:08.320 --> 01:50:09.920
<v Speaker 0>we're bigger. Right.

01:50:11.920 --> 01:50:14.614
<v Speaker 0>That should have been a lot easier. I'm

01:50:14.614 --> 01:50:15.574
<v Speaker 0>not happy

01:50:16.135 --> 01:50:16.775
<v Speaker 0>with

01:50:17.975 --> 01:50:19.655
<v Speaker 0>with the challenges that we came across.

01:50:19.975 --> 01:50:22.135
<v Speaker 0>Know, Jake, you know, you said you're gonna

01:50:22.135 --> 01:50:24.215
<v Speaker 0>give that a go. Think maybe this is

01:50:24.215 --> 01:50:26.930
<v Speaker 0>just Laravel. I think Symphony possibly

01:50:27.170 --> 01:50:29.810
<v Speaker 0>has better support with Prometheus exporters.

01:50:30.690 --> 01:50:32.130
<v Speaker 0>I know when I did a little bit

01:50:32.130 --> 01:50:33.970
<v Speaker 0>of Googling just to see if these existed

01:50:33.970 --> 01:50:35.410
<v Speaker 0>in the PHP ecosystem,

01:50:36.290 --> 01:50:37.650
<v Speaker 0>there weren't a lot of options

01:50:38.885 --> 01:50:39.605
<v Speaker 0>but

01:50:39.925 --> 01:50:41.525
<v Speaker 0>this is gonna save you from instrument in

01:50:41.525 --> 01:50:43.125
<v Speaker 0>your code yourself, know you don't really want

01:50:43.125 --> 01:50:44.805
<v Speaker 0>to add your own slash metrics endpoint and

01:50:44.805 --> 01:50:47.765
<v Speaker 0>be and be writing those out. You really

01:50:47.765 --> 01:50:49.285
<v Speaker 0>want the middleware to do it all for

01:50:49.285 --> 01:50:51.060
<v Speaker 0>you. OpenTelemetry is a good way of doing

01:50:51.060 --> 01:50:53.700
<v Speaker 0>it. We did have success with BlinkerD and

01:50:53.700 --> 01:50:56.179
<v Speaker 0>automated proxy metrics which was sweet and

01:50:56.980 --> 01:50:59.460
<v Speaker 0>so I think based on what we've seen

01:50:59.460 --> 01:51:01.780
<v Speaker 0>today that the best way forward until

01:51:02.020 --> 01:51:04.415
<v Speaker 0>Jake writes his new million dollar library and

01:51:04.415 --> 01:51:05.775
<v Speaker 0>start selling it to people

01:51:06.415 --> 01:51:08.655
<v Speaker 0>would be to go down the automated proxy

01:51:08.655 --> 01:51:10.095
<v Speaker 0>approach because

01:51:10.255 --> 01:51:11.935
<v Speaker 0>the most valuable metric you can scale on

01:51:11.935 --> 01:51:14.655
<v Speaker 0>is how long does it take to respond

01:51:14.655 --> 01:51:15.775
<v Speaker 0>to 95%

01:51:15.775 --> 01:51:16.815
<v Speaker 0>of my customers

01:51:17.030 --> 01:51:19.270
<v Speaker 0>and am I happy with that number? And

01:51:19.270 --> 01:51:20.710
<v Speaker 0>when the answer is no,

01:51:21.430 --> 01:51:22.150
<v Speaker 0>scale up.

01:51:26.870 --> 01:51:30.150
<v Speaker 0>So Alex, how are you feeling with our

01:51:29.595 --> 01:51:30.715
<v Speaker 0>auto scaling now?

01:51:32.555 --> 01:51:35.115
<v Speaker 1>So we managed to the only actual auto

01:51:35.115 --> 01:51:37.035
<v Speaker 1>scale successful auto scaling we had today was

01:51:37.035 --> 01:51:39.355
<v Speaker 1>the one that you said started off by

01:51:39.355 --> 01:51:41.355
<v Speaker 1>saying that you didn't like doing, which was

01:51:41.355 --> 01:51:42.075
<v Speaker 1>the

01:51:42.570 --> 01:51:45.050
<v Speaker 1>the one based on requests

01:51:45.050 --> 01:51:46.729
<v Speaker 1>and limits. Yes.

01:51:47.130 --> 01:51:49.610
<v Speaker 1>The horizontal autoscaler in Kubernetes.

01:51:50.330 --> 01:51:51.929
<v Speaker 1>Yes. So there's definitely more that we can

01:51:51.929 --> 01:51:52.809
<v Speaker 1>do on this.

01:51:53.850 --> 01:51:55.745
<v Speaker 1>Because you mentioned a few times about doing

01:51:55.745 --> 01:51:58.385
<v Speaker 1>custom metrics and things to scale based on

01:51:58.385 --> 01:52:00.945
<v Speaker 1>responses from Prometheus or whatever.

01:52:02.225 --> 01:52:03.985
<v Speaker 0>Uh-huh. So let me just show how that

01:52:03.985 --> 01:52:05.025
<v Speaker 0>would have worked.

01:52:06.705 --> 01:52:09.185
<v Speaker 0>You know, if we had a Laravel package

01:52:09.185 --> 01:52:11.850
<v Speaker 0>that was exposing Prometheus metrics and our service

01:52:11.850 --> 01:52:13.530
<v Speaker 0>monitor was being picked up and that was

01:52:13.530 --> 01:52:15.450
<v Speaker 0>available and I could query those metrics in

01:52:15.450 --> 01:52:16.170
<v Speaker 0>Prometheus.

01:52:16.890 --> 01:52:18.890
<v Speaker 0>What I would have wanted, what I would

01:52:18.890 --> 01:52:20.890
<v Speaker 0>have done next is deploy the Prometheus adapter

01:52:20.890 --> 01:52:22.330
<v Speaker 0>to our Kubernetes cluster.

01:52:22.490 --> 01:52:25.130
<v Speaker 0>The Prometheus adapter is what exposes

01:52:25.130 --> 01:52:28.155
<v Speaker 0>new or fat any adapter for the metric

01:52:28.155 --> 01:52:30.395
<v Speaker 0>server is what exposes new custom metrics that

01:52:30.395 --> 01:52:32.315
<v Speaker 0>can be used in the HPA rules.

01:52:33.355 --> 01:52:34.555
<v Speaker 0>In fact, I have it already in the

01:52:34.555 --> 01:52:36.395
<v Speaker 0>demo directory I think and I want that.

01:52:36.395 --> 01:52:38.475
<v Speaker 0>Nice to smart down. Okay. Hopefully there's some

01:52:38.475 --> 01:52:40.235
<v Speaker 0>YAML down here but this would have allowed

01:52:40.235 --> 01:52:41.850
<v Speaker 0>me to use custom metrics to do the

01:52:41.850 --> 01:52:42.730
<v Speaker 0>HPA.

01:52:44.090 --> 01:52:45.450
<v Speaker 0>Let me see if I can zoom in

01:52:45.450 --> 01:52:47.610
<v Speaker 0>on this where we would have been able

01:52:47.610 --> 01:52:50.410
<v Speaker 0>to instead of using the CPU utilization

01:52:50.410 --> 01:52:52.890
<v Speaker 0>on the HPA object is actually used rules

01:52:53.130 --> 01:52:55.050
<v Speaker 0>which identify a series which would have been

01:52:55.050 --> 01:52:57.335
<v Speaker 0>our HTTP response time and we would have

01:52:57.335 --> 01:52:59.335
<v Speaker 0>told it to you know perform a query

01:52:59.335 --> 01:53:02.055
<v Speaker 0>against that and try and get what is

01:53:02.055 --> 01:53:04.695
<v Speaker 0>that percentile very much like the query that

01:53:04.695 --> 01:53:06.615
<v Speaker 0>we copied from the Grafana dashboard that linker

01:53:06.615 --> 01:53:08.375
<v Speaker 0>deep provided to us, know we want to

01:53:08.375 --> 01:53:09.735
<v Speaker 0>understand percentiles

01:53:09.735 --> 01:53:11.495
<v Speaker 0>you know we can't give everybody

01:53:12.530 --> 01:53:14.930
<v Speaker 0>thirty second and forty millisecond response time but

01:53:14.930 --> 01:53:16.210
<v Speaker 0>we wanna try and ensure we get as

01:53:16.210 --> 01:53:18.130
<v Speaker 0>many people into that bucket as possible.

01:53:18.610 --> 01:53:20.210
<v Speaker 0>So hopefully

01:53:20.210 --> 01:53:21.650
<v Speaker 0>once

01:53:22.530 --> 01:53:25.330
<v Speaker 0>we find a Laravel package that works and

01:53:25.330 --> 01:53:27.355
<v Speaker 0>we can retry this again, we'll be able

01:53:27.355 --> 01:53:28.715
<v Speaker 0>to get to the stage where we can

01:53:28.715 --> 01:53:31.594
<v Speaker 0>deploy the Prometheus adapter configure a new HPA

01:53:31.595 --> 01:53:32.715
<v Speaker 0>and take it from there.

01:53:33.275 --> 01:53:34.875
<v Speaker 0>All I can hope for the people that

01:53:34.875 --> 01:53:36.795
<v Speaker 0>have watched us throughout this is that, you

01:53:36.795 --> 01:53:39.559
<v Speaker 0>know, hopefully the components and primitive required to

01:53:39.559 --> 01:53:41.719
<v Speaker 0>do horizontal scaling on Kubernetes are now more

01:53:41.719 --> 01:53:43.400
<v Speaker 0>familiar to you. You know the right words

01:53:43.400 --> 01:53:44.920
<v Speaker 0>to Google and you know which package you

01:53:44.920 --> 01:53:46.679
<v Speaker 0>need to exist in order to get those

01:53:46.679 --> 01:53:48.039
<v Speaker 0>metrics out of your application

01:53:48.280 --> 01:53:49.960
<v Speaker 0>and even using the could be as well

01:53:49.960 --> 01:53:51.079
<v Speaker 0>where wherever

01:53:51.105 --> 01:53:51.905
<v Speaker 0>possible. So

01:53:52.785 --> 01:53:54.545
<v Speaker 0>well we were unsuccessful, I

01:53:55.025 --> 01:53:57.025
<v Speaker 0>hope there was enough there for people to

01:53:57.185 --> 01:53:58.784
<v Speaker 0>get interested.

01:53:59.345 --> 01:54:02.145
<v Speaker 1>Yeah. So in terms of losing linker d,

01:54:02.145 --> 01:54:04.705
<v Speaker 1>would you use that alongside or instead of

01:54:04.705 --> 01:54:06.465
<v Speaker 1>something like click d stats d

01:54:07.070 --> 01:54:08.829
<v Speaker 1>or are those not really relevant at all

01:54:08.829 --> 01:54:11.469
<v Speaker 1>when you're dealing with Kubernetes compared to a

01:54:11.469 --> 01:54:12.429
<v Speaker 1>standard VM?

01:54:12.590 --> 01:54:14.510
<v Speaker 0>Yeah. I'm I'm unlikely to use collect your

01:54:14.510 --> 01:54:16.670
<v Speaker 0>stats D. Those are, you know, platform or

01:54:16.670 --> 01:54:19.230
<v Speaker 0>host based monitoring. They're not really application level

01:54:19.230 --> 01:54:20.625
<v Speaker 0>stuff although you can't use them in that

01:54:20.625 --> 01:54:21.264
<v Speaker 0>regard.

01:54:21.985 --> 01:54:25.025
<v Speaker 0>Prometheus being a CNCF graduated project,

01:54:25.105 --> 01:54:26.225
<v Speaker 0>a lot of people are just running it

01:54:26.225 --> 01:54:27.585
<v Speaker 0>on Kubernetes because of the time away the

01:54:27.585 --> 01:54:28.784
<v Speaker 0>Prometheus operator

01:54:28.865 --> 01:54:30.625
<v Speaker 0>does work when you get the service account

01:54:30.625 --> 01:54:31.264
<v Speaker 0>right.

01:54:32.145 --> 01:54:34.400
<v Speaker 0>The service monitoring I'm sure is my editor

01:54:34.400 --> 01:54:36.080
<v Speaker 0>and I'm sure when I rewatch this to

01:54:36.080 --> 01:54:38.480
<v Speaker 0>type up the, you know, the timeline for

01:54:38.480 --> 01:54:40.640
<v Speaker 0>the description, I'll see the stupid mistake that

01:54:40.640 --> 01:54:42.880
<v Speaker 0>I've made but obviously right now I'm not

01:54:42.880 --> 01:54:43.760
<v Speaker 0>seeing that.

01:54:44.480 --> 01:54:47.364
<v Speaker 1>No, don't see it either. So yeah.

01:54:47.844 --> 01:54:49.605
<v Speaker 1>It might be might be worth when we

01:54:49.605 --> 01:54:51.364
<v Speaker 1>think about what the mistake is to put

01:54:51.364 --> 01:54:51.925
<v Speaker 1>a

01:54:52.804 --> 01:54:54.244
<v Speaker 1>a snippet like

01:54:54.485 --> 01:54:56.804
<v Speaker 1>in description or something maybe. Well yeah all

01:54:56.804 --> 01:54:58.485
<v Speaker 0>of the resources that we have created even

01:54:58.485 --> 01:55:00.170
<v Speaker 0>the broken ones for now will be pushed

01:55:00.170 --> 01:55:02.330
<v Speaker 0>to your repository which is in the show

01:55:02.330 --> 01:55:05.290
<v Speaker 0>notes. It's also github.com/go

01:55:05.290 --> 01:55:05.930
<v Speaker 0>for Alex.

01:55:06.570 --> 01:55:09.930
<v Speaker 1>Alex Bowers slash Laravel example project probably. So

01:55:10.010 --> 01:55:11.610
<v Speaker 0>it's in the show notes. Alex Bowers will

01:55:11.610 --> 01:55:12.650
<v Speaker 1>be the one that's on there with the

01:55:12.650 --> 01:55:14.434
<v Speaker 1>most recent push on it So Yeah. So

01:55:14.434 --> 01:55:15.635
<v Speaker 0>all this stuff will be there.

01:55:16.034 --> 01:55:18.594
<v Speaker 0>Hopefully the Laravel situation improves and we'll do

01:55:18.594 --> 01:55:20.434
<v Speaker 0>a second part of this and thank you

01:55:20.434 --> 01:55:22.195
<v Speaker 0>all for watching and thank you Alex and

01:55:22.195 --> 01:55:24.275
<v Speaker 0>Kieran has left, but thank you for joining

01:55:24.275 --> 01:55:24.994
<v Speaker 0>me and

01:55:25.315 --> 01:55:26.514
<v Speaker 0>having some fun.

01:55:26.994 --> 01:55:28.594
<v Speaker 1>Thank you. Alright. Have a great day. I'll

01:55:28.594 --> 01:55:30.320
<v Speaker 0>speak to you soon. Bye. Yep. And you.

01:55:30.320 --> 01:55:30.559
<v Speaker 1>Bye.
