WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 50019606-88ef-446c-8d22-4a0bda8c59da
Created: 2025-04-29T16:36:48.674Z
Duration: 4345.83
Channels: 1

00:00:54.540 --> 00:00:58.300
<v Speaker 0>Hello, and welcome back to the Rawkode Academy.

00:00:58.860 --> 00:01:01.260
<v Speaker 0>I'm your host, David Flanagan, also known as

00:01:01.260 --> 00:01:04.114
<v Speaker 0>Rawkode. This is Rawkode Live. I just like

00:01:04.114 --> 00:01:05.555
<v Speaker 0>seeing Rawkode as many times as I can

00:01:05.555 --> 00:01:06.835
<v Speaker 0>in the first ten seconds.

00:01:07.155 --> 00:01:08.515
<v Speaker 0>And I also hate myself a little bit

00:01:08.515 --> 00:01:10.995
<v Speaker 0>for it. Now moving on with today's session,

00:01:10.995 --> 00:01:12.835
<v Speaker 0>we are taking a look at a CNCF

00:01:12.835 --> 00:01:14.195
<v Speaker 0>sandbox project.

00:01:14.355 --> 00:01:15.635
<v Speaker 0>This is SchemaHero.

00:01:16.049 --> 00:01:17.729
<v Speaker 0>SchemaHero is going to make all of our

00:01:17.729 --> 00:01:19.969
<v Speaker 0>database migration lives a whole of lot easier.

00:01:20.290 --> 00:01:22.450
<v Speaker 0>And I am not gonna show you. Well,

00:01:22.450 --> 00:01:23.890
<v Speaker 0>I am kind of, but we are joined

00:01:23.890 --> 00:01:26.290
<v Speaker 0>by a wonderful guest, maintainer of the project,

00:01:26.450 --> 00:01:27.490
<v Speaker 0>Mark Campbell,

00:01:27.490 --> 00:01:29.250
<v Speaker 0>who is gonna keep us up to date

00:01:29.250 --> 00:01:30.530
<v Speaker 0>on all things SchemaHero.

00:01:30.995 --> 00:01:33.235
<v Speaker 0>How's it going, Mark? How are you? It's

00:01:33.235 --> 00:01:34.915
<v Speaker 1>great. Thanks for having me. Excited to be

00:01:34.915 --> 00:01:35.395
<v Speaker 1>here.

00:01:35.795 --> 00:01:37.315
<v Speaker 0>Yeah. Yeah. It's awesome.

00:01:37.475 --> 00:01:39.075
<v Speaker 0>I've been looking at this project for a

00:01:39.075 --> 00:01:40.595
<v Speaker 0>while, and I'm I'm really keen to kinda

00:01:40.595 --> 00:01:41.955
<v Speaker 0>play with it and just see how it

00:01:41.955 --> 00:01:43.795
<v Speaker 0>can simplify my life a little bit.

00:01:44.470 --> 00:01:46.070
<v Speaker 0>I mean, I I think I've had the

00:01:46.070 --> 00:01:48.950
<v Speaker 0>worst luck with databases throughout my entire career.

00:01:48.950 --> 00:01:51.030
<v Speaker 0>So I'm really looking for, like, the

00:01:51.590 --> 00:01:53.509
<v Speaker 0>secret weapon to making my life a little

00:01:53.509 --> 00:01:54.869
<v Speaker 0>bit easier. Is is that is that what

00:01:54.869 --> 00:01:55.670
<v Speaker 0>we're gonna get today?

00:01:56.355 --> 00:01:57.155
<v Speaker 1>Hopefully.

00:01:57.155 --> 00:01:58.435
<v Speaker 1>That was like our goal. I think, you

00:01:58.435 --> 00:02:00.115
<v Speaker 1>know, I don't know. Maybe maybe you've had

00:02:00.115 --> 00:02:02.035
<v Speaker 1>the second worst luck with databases. We had

00:02:02.035 --> 00:02:03.715
<v Speaker 1>so such bad luck, we created a whole

00:02:03.715 --> 00:02:05.555
<v Speaker 1>project around it to make it easier. Yeah.

00:02:05.875 --> 00:02:06.515
<v Speaker 0>Okay.

00:02:07.555 --> 00:02:09.794
<v Speaker 0>Before we get back into SchemaHero and and

00:02:09.794 --> 00:02:11.395
<v Speaker 0>start showing people what this thing can do,

00:02:11.395 --> 00:02:12.650
<v Speaker 0>can you tell us a little bit about

00:02:12.650 --> 00:02:13.530
<v Speaker 0>yourself, please?

00:02:14.090 --> 00:02:14.970
<v Speaker 1>Yeah. Sure.

00:02:15.290 --> 00:02:17.850
<v Speaker 1>So, yeah, I'm Mark Campbell. I'm cofounder and

00:02:17.850 --> 00:02:19.450
<v Speaker 1>CTO of Replicated.

00:02:20.010 --> 00:02:24.090
<v Speaker 1>At Replicated, we're helping software vendors ship enterprise

00:02:24.455 --> 00:02:27.575
<v Speaker 1>versions behind the firewall installable products, versions of

00:02:27.575 --> 00:02:30.455
<v Speaker 1>their product to their enterprise customers.

00:02:31.815 --> 00:02:34.215
<v Speaker 1>As we focus on Kubernetes, so you take

00:02:34.215 --> 00:02:35.815
<v Speaker 1>a Kubernetes app, package it up as a

00:02:35.815 --> 00:02:38.190
<v Speaker 1>Kubernetes app, a Helm chart, whatever, in replicated,

00:02:38.190 --> 00:02:39.630
<v Speaker 1>can help you deliver that to air gapped

00:02:39.630 --> 00:02:41.310
<v Speaker 1>environments and complex environments.

00:02:42.030 --> 00:02:43.390
<v Speaker 1>And as part of that,

00:02:43.790 --> 00:02:44.510
<v Speaker 1>we

00:02:44.670 --> 00:02:46.670
<v Speaker 1>ran into a lot of different problems that

00:02:46.670 --> 00:02:48.190
<v Speaker 1>you don't run into when you deliver first

00:02:48.190 --> 00:02:50.270
<v Speaker 1>party software when you're trying to either deliver

00:02:50.270 --> 00:02:52.510
<v Speaker 1>third party software or consume third party software.

00:02:53.095 --> 00:02:54.855
<v Speaker 1>Database migrations were part of it. We created

00:02:54.855 --> 00:02:56.694
<v Speaker 1>SchemaHero and, you know, put it in the

00:02:56.694 --> 00:02:59.255
<v Speaker 1>CNCF sandbox and, like, excited to dig into

00:02:59.255 --> 00:03:01.175
<v Speaker 1>it a little bit more today. Yeah. It's

00:03:01.175 --> 00:03:03.095
<v Speaker 0>a bold name. Right? SchemaHero.

00:03:03.095 --> 00:03:05.015
<v Speaker 0>Like, I'm expecting some really big things from

00:03:05.015 --> 00:03:05.575
<v Speaker 0>this.

00:03:06.135 --> 00:03:07.334
<v Speaker 1>Yeah. Let's it'll deliver.

00:03:08.650 --> 00:03:10.569
<v Speaker 0>Could maybe we could talk about a little

00:03:10.569 --> 00:03:12.090
<v Speaker 0>bit of the the history of the project.

00:03:12.090 --> 00:03:13.690
<v Speaker 0>You know, you said you've I said I

00:03:13.690 --> 00:03:14.970
<v Speaker 0>have the worst luck. You said, no. You

00:03:14.970 --> 00:03:16.330
<v Speaker 0>probably have the worst luck as you build

00:03:16.330 --> 00:03:19.130
<v Speaker 0>a project. Like, why are database migrations so

00:03:19.130 --> 00:03:20.170
<v Speaker 0>difficult to get right?

00:03:21.185 --> 00:03:23.345
<v Speaker 1>Yeah. So, you know, we started off really

00:03:23.345 --> 00:03:25.985
<v Speaker 1>focused on the schema part of database migrations.

00:03:25.985 --> 00:03:26.785
<v Speaker 1>You know, we

00:03:27.345 --> 00:03:29.025
<v Speaker 1>we're using Goose

00:03:29.505 --> 00:03:31.265
<v Speaker 1>to run them. If you're familiar, it's like,

00:03:31.265 --> 00:03:33.025
<v Speaker 1>you know, writing Go code, and so we

00:03:33.025 --> 00:03:36.500
<v Speaker 1>would write SQL migrations often using Go.

00:03:36.900 --> 00:03:38.660
<v Speaker 1>And it generally worked pretty well,

00:03:39.060 --> 00:03:41.220
<v Speaker 1>but it was, like, imperative

00:03:41.459 --> 00:03:43.140
<v Speaker 1>where we would say, I want you to

00:03:43.140 --> 00:03:45.140
<v Speaker 1>go you know, you'd you'd write a SQL

00:03:45.140 --> 00:03:46.980
<v Speaker 1>migration that said go add a column, drop

00:03:46.980 --> 00:03:48.260
<v Speaker 1>a column, map, create a table.

00:03:49.155 --> 00:03:51.315
<v Speaker 1>And the challenge that we really had was,

00:03:51.475 --> 00:03:53.875
<v Speaker 1>like, kinda came around to you have to

00:03:53.875 --> 00:03:56.515
<v Speaker 1>be, like, really, really confident in the current

00:03:56.515 --> 00:03:58.915
<v Speaker 1>state of that database schema before you can

00:03:58.915 --> 00:04:00.275
<v Speaker 1>apply changes to it,

00:04:00.834 --> 00:04:03.060
<v Speaker 1>which generally sounds, you know, like an okay

00:04:03.060 --> 00:04:04.660
<v Speaker 1>thing. Right? Like, have my database. I can

00:04:04.660 --> 00:04:06.019
<v Speaker 1>go look at the schema, the state of

00:04:06.019 --> 00:04:08.099
<v Speaker 1>it, and then decide, okay. I wanna, like

00:04:08.180 --> 00:04:10.099
<v Speaker 1>here's the commands that I need to do

00:04:10.099 --> 00:04:11.700
<v Speaker 1>to alter it to what I want.

00:04:12.980 --> 00:04:14.500
<v Speaker 1>The problem is, like, in a you know,

00:04:14.500 --> 00:04:16.180
<v Speaker 1>when you're running a lot of migrations,

00:04:16.805 --> 00:04:17.605
<v Speaker 1>sequencing

00:04:18.404 --> 00:04:21.285
<v Speaker 1>becomes difficult. You might have three migrations pending,

00:04:21.605 --> 00:04:23.445
<v Speaker 1>and you each of them work against the

00:04:23.445 --> 00:04:24.965
<v Speaker 1>current state of the database. But when you

00:04:24.965 --> 00:04:26.725
<v Speaker 1>apply one, like, the second and the third

00:04:26.725 --> 00:04:28.325
<v Speaker 1>one are no longer valid, and it may

00:04:28.325 --> 00:04:31.125
<v Speaker 1>actually have, like, adverse side effects in kind

00:04:31.125 --> 00:04:34.389
<v Speaker 1>of, like, like, result in, like, a like,

00:04:34.389 --> 00:04:36.629
<v Speaker 1>dropping some data a a column or doing

00:04:36.629 --> 00:04:37.910
<v Speaker 1>something that you didn't expect.

00:04:38.389 --> 00:04:40.310
<v Speaker 1>And then for us, you know, again, since

00:04:40.310 --> 00:04:43.430
<v Speaker 1>we're delivering software into third party,

00:04:43.750 --> 00:04:46.229
<v Speaker 1>you know, enterprise customer controlled environments,

00:04:46.625 --> 00:04:47.825
<v Speaker 1>we have, like,

00:04:48.145 --> 00:04:50.545
<v Speaker 1>very little ability to guarantee the current state

00:04:50.545 --> 00:04:52.065
<v Speaker 1>of the database. And so all we wanted

00:04:52.065 --> 00:04:54.225
<v Speaker 1>to say is, you know, here's the state

00:04:54.225 --> 00:04:55.425
<v Speaker 1>that I want the database to be at,

00:04:55.425 --> 00:04:57.585
<v Speaker 1>kinda like Kubernetes. Right? It's very declarative.

00:04:57.665 --> 00:04:58.625
<v Speaker 1>SchemaHero

00:04:58.625 --> 00:04:59.905
<v Speaker 1>is, and we can just say, like, I

00:04:59.905 --> 00:05:01.345
<v Speaker 1>don't care what the state of the database

00:05:01.345 --> 00:05:03.020
<v Speaker 1>is right now. Here's the state that I

00:05:03.020 --> 00:05:05.340
<v Speaker 1>want the database at. Like, do whatever is

00:05:05.340 --> 00:05:07.340
<v Speaker 1>necessary to move it from a to b.

00:05:08.060 --> 00:05:09.260
<v Speaker 0>Yeah. I think that's one of the things

00:05:09.260 --> 00:05:10.780
<v Speaker 0>that got me really excited about it when

00:05:10.780 --> 00:05:12.620
<v Speaker 0>I was looking at the documentation.

00:05:12.860 --> 00:05:14.940
<v Speaker 0>Like, you know, I'll talk my database history

00:05:14.940 --> 00:05:17.455
<v Speaker 0>is starting off twenty five years ago, hand

00:05:17.455 --> 00:05:19.775
<v Speaker 0>rolled SQL that was deployed whenever we shut

00:05:19.775 --> 00:05:20.575
<v Speaker 0>the application

00:05:20.895 --> 00:05:21.855
<v Speaker 0>with probably

00:05:22.575 --> 00:05:24.175
<v Speaker 0>many more manual changes,

00:05:24.895 --> 00:05:26.175
<v Speaker 0>which I think it's just the way things

00:05:26.175 --> 00:05:27.615
<v Speaker 0>were back then. At least I don't think

00:05:27.615 --> 00:05:29.380
<v Speaker 0>I was doing anything too bad.

00:05:29.700 --> 00:05:32.100
<v Speaker 0>But then came along ORMs and they give

00:05:32.100 --> 00:05:34.100
<v Speaker 0>us this ability to kind of model our

00:05:34.100 --> 00:05:36.500
<v Speaker 0>code, our database as code, then it would

00:05:36.500 --> 00:05:38.660
<v Speaker 0>generate the migrations for us. And then those

00:05:38.660 --> 00:05:39.940
<v Speaker 0>would run on deploy.

00:05:40.260 --> 00:05:42.195
<v Speaker 0>And that worked really well, but then you

00:05:42.195 --> 00:05:44.115
<v Speaker 0>run into problems with rollbacks, whereas I I

00:05:44.115 --> 00:05:45.955
<v Speaker 0>think rollbacks are still always a problem. Right?

00:05:45.955 --> 00:05:48.595
<v Speaker 0>Like, probably just shouldn't rollback. I'll get your

00:05:48.595 --> 00:05:49.875
<v Speaker 0>thoughts on that if you want to share.

00:05:49.875 --> 00:05:50.355
<v Speaker 0>But

00:05:50.755 --> 00:05:53.315
<v Speaker 0>it's it's nice to see that go back

00:05:53.315 --> 00:05:54.195
<v Speaker 0>to what I was trying to make a

00:05:54.195 --> 00:05:56.420
<v Speaker 0>point of. I was at the SchemaHero documentation,

00:05:56.420 --> 00:05:58.260
<v Speaker 0>there were no SQL statements.

00:05:58.420 --> 00:06:00.980
<v Speaker 0>It was, like you said, a declarative, here's

00:06:00.980 --> 00:06:02.740
<v Speaker 0>what my database has to look like. Here

00:06:02.740 --> 00:06:03.940
<v Speaker 0>are the fields that I want. Here are

00:06:03.940 --> 00:06:06.100
<v Speaker 0>the types that they have, and I don't

00:06:06.100 --> 00:06:08.514
<v Speaker 0>need to worry about anything else. Like, that's

00:06:08.514 --> 00:06:10.675
<v Speaker 0>a pretty cool feature.

00:06:10.835 --> 00:06:11.315
<v Speaker 0>And

00:06:12.115 --> 00:06:13.474
<v Speaker 1>Yeah. Like, I mean, if you're used to,

00:06:13.474 --> 00:06:15.315
<v Speaker 1>you know, Rails or Django, you know, like

00:06:15.315 --> 00:06:18.115
<v Speaker 1>you mentioned ORMs and, like like, that pattern

00:06:18.115 --> 00:06:19.794
<v Speaker 1>was really, really good. Right? You don't have

00:06:19.955 --> 00:06:21.875
<v Speaker 1>like, it came with challenges around rollbacks and

00:06:21.875 --> 00:06:23.850
<v Speaker 1>a few different things, but but these challenges

00:06:23.850 --> 00:06:26.330
<v Speaker 1>are gonna exist. It's a complex subject. You

00:06:26.330 --> 00:06:28.890
<v Speaker 1>know? The the challenge really, though, was

00:06:29.370 --> 00:06:32.650
<v Speaker 1>Django or Rails, like, the migrations are pretty

00:06:32.650 --> 00:06:34.729
<v Speaker 1>tightly coupled into the ecosystem and the language

00:06:34.729 --> 00:06:36.729
<v Speaker 1>and the framework that you're actually using to,

00:06:36.729 --> 00:06:38.565
<v Speaker 1>like, to build stuff. And

00:06:39.045 --> 00:06:42.005
<v Speaker 1>not all languages, not all ecosystems have that.

00:06:42.005 --> 00:06:44.725
<v Speaker 1>Go has Go ORM. It's generally more around,

00:06:44.725 --> 00:06:47.285
<v Speaker 1>you know, not writing SQL statements at runtime,

00:06:47.525 --> 00:06:51.125
<v Speaker 1>but, like, that that that that functionality just

00:06:49.860 --> 00:06:51.780
<v Speaker 1>should exist, and it should be decoupled from

00:06:51.939 --> 00:06:53.699
<v Speaker 1>like, we thought, that functionality should exist and

00:06:53.699 --> 00:06:55.939
<v Speaker 1>be decoupled from the actual, like, language and

00:06:55.939 --> 00:06:58.020
<v Speaker 1>framework that you're using and actually push down

00:06:58.020 --> 00:07:00.340
<v Speaker 1>to the platform layer to be responsible for

00:07:00.340 --> 00:07:01.699
<v Speaker 1>it, kinda like what Kubernetes has done.

00:07:02.595 --> 00:07:05.315
<v Speaker 0>Yeah. I I I kinda wanna highlight one

00:07:05.315 --> 00:07:06.595
<v Speaker 0>distinction to make sure I have my own

00:07:06.595 --> 00:07:08.435
<v Speaker 0>mental models that kind of makes sense for

00:07:08.435 --> 00:07:10.035
<v Speaker 0>it. So for everyone who's not familiar how

00:07:10.035 --> 00:07:12.275
<v Speaker 0>the ORM migration stuff worked, when I generated

00:07:12.275 --> 00:07:15.270
<v Speaker 0>the SQL, every migration got an ID, that

00:07:15.270 --> 00:07:16.870
<v Speaker 0>was usually stored in the database to see

00:07:16.870 --> 00:07:18.870
<v Speaker 0>that migration had run. So typically, that migration

00:07:18.870 --> 00:07:20.950
<v Speaker 0>would never run again. And if you make

00:07:20.950 --> 00:07:23.590
<v Speaker 0>manual changes, any subsequent migrations that have to

00:07:23.590 --> 00:07:24.150
<v Speaker 0>run

00:07:24.470 --> 00:07:26.230
<v Speaker 0>wouldn't be aware of those changes and that

00:07:26.230 --> 00:07:27.990
<v Speaker 0>would break and then you just get paged

00:07:27.990 --> 00:07:29.430
<v Speaker 0>and then you're in a whole lot of

00:07:29.430 --> 00:07:30.715
<v Speaker 0>heart a few days while you work out

00:07:30.715 --> 00:07:31.675
<v Speaker 0>why there was a manual change in the

00:07:31.675 --> 00:07:32.235
<v Speaker 0>database.

00:07:32.795 --> 00:07:34.235
<v Speaker 0>What I got there

00:07:34.955 --> 00:07:36.795
<v Speaker 0>from looking at the documentation and and even

00:07:36.795 --> 00:07:38.555
<v Speaker 0>just talking to you now, it sounds like

00:07:38.555 --> 00:07:39.355
<v Speaker 0>SchemaHero

00:07:39.355 --> 00:07:43.035
<v Speaker 0>doesn't have any stored state. It's it's looking

00:07:43.035 --> 00:07:45.035
<v Speaker 0>at the database as it runs to work

00:07:45.035 --> 00:07:47.780
<v Speaker 0>out if there have been manual changes, would

00:07:47.780 --> 00:07:48.420
<v Speaker 0>it then

00:07:49.300 --> 00:07:52.180
<v Speaker 0>fix that for me? Is that Yeah.

00:07:52.180 --> 00:07:55.460
<v Speaker 1>Like, so, you know, like, we build that

00:07:55.460 --> 00:07:57.300
<v Speaker 1>in as, like, drift detection, right, as the

00:07:57.300 --> 00:07:58.660
<v Speaker 1>feature is what we're calling it.

00:07:59.060 --> 00:08:00.645
<v Speaker 1>And then exactly,

00:08:00.645 --> 00:08:02.085
<v Speaker 1>like it doesn't if you've

00:08:02.485 --> 00:08:04.165
<v Speaker 1>deployed and said, here's the state that I

00:08:04.165 --> 00:08:06.085
<v Speaker 1>want this table to be at, and then

00:08:06.085 --> 00:08:08.725
<v Speaker 1>somebody's gone and, you know, manually changed the

00:08:08.725 --> 00:08:10.885
<v Speaker 1>column type. And then the next time you

00:08:10.885 --> 00:08:13.125
<v Speaker 1>try to deploy that table, it's gonna detect

00:08:13.125 --> 00:08:14.725
<v Speaker 1>that and it's gonna say, that table, like

00:08:15.240 --> 00:08:17.160
<v Speaker 1>like, my job isn't to add this column

00:08:17.160 --> 00:08:18.680
<v Speaker 1>to the table or my job isn't to

00:08:18.680 --> 00:08:20.600
<v Speaker 1>add this foreign key. My job is to

00:08:20.840 --> 00:08:23.000
<v Speaker 1>make the actual table in, you know, Postgres

00:08:23.000 --> 00:08:25.320
<v Speaker 1>or Cassandra or Cockroach, whatever that is, match

00:08:25.320 --> 00:08:28.200
<v Speaker 1>the desired state that's defined in this YAML

00:08:28.200 --> 00:08:30.805
<v Speaker 1>file. And so it it ends up doing,

00:08:30.805 --> 00:08:32.804
<v Speaker 1>like, drift detection and bringing it back to

00:08:32.804 --> 00:08:34.325
<v Speaker 1>the desired state as needed.

00:08:34.725 --> 00:08:37.365
<v Speaker 0>Awesome. Well, it sounds exciting. I think we

00:08:37.365 --> 00:08:39.285
<v Speaker 0>should just dive right in. What what do

00:08:39.285 --> 00:08:40.804
<v Speaker 0>you think? Let's do it. Let's do it.

00:08:41.429 --> 00:08:43.910
<v Speaker 0>All right. Let's start off with what

00:08:44.150 --> 00:08:47.110
<v Speaker 0>I've done in advance. And the answer is

00:08:47.110 --> 00:08:47.990
<v Speaker 0>standard,

00:08:47.990 --> 00:08:50.710
<v Speaker 0>almost nothing. So we do have a Kubernetes

00:08:50.710 --> 00:08:51.590
<v Speaker 0>cluster.

00:08:51.750 --> 00:08:54.470
<v Speaker 0>This is running on Civo as KCS

00:08:54.550 --> 00:08:56.070
<v Speaker 0>running Kubernetes 120.

00:08:57.185 --> 00:08:57.985
<v Speaker 0>I

00:08:58.225 --> 00:09:00.625
<v Speaker 0>have no SchemaHero installed, but I did go

00:09:00.625 --> 00:09:02.465
<v Speaker 0>ahead and deploy Postgres

00:09:02.465 --> 00:09:04.705
<v Speaker 0>and MariaDB because I'm assuming we'll be working

00:09:04.705 --> 00:09:07.025
<v Speaker 0>with both of those today. These are empty,

00:09:07.025 --> 00:09:08.865
<v Speaker 0>they have no configuration, they have no data,

00:09:08.865 --> 00:09:11.185
<v Speaker 0>nothing like that. So we're starting from almost

00:09:11.185 --> 00:09:11.745
<v Speaker 0>zero

00:09:12.250 --> 00:09:15.530
<v Speaker 0>and I have the SchemaHero website here

00:09:15.690 --> 00:09:17.770
<v Speaker 0>and my expert. So I feel that we

00:09:17.770 --> 00:09:19.450
<v Speaker 0>have everything that we need to be successful

00:09:19.450 --> 00:09:21.050
<v Speaker 0>now. No pressure.

00:09:21.850 --> 00:09:22.570
<v Speaker 0>No pressure.

00:09:23.850 --> 00:09:25.370
<v Speaker 0>It's funny. It's like when I when people

00:09:25.370 --> 00:09:26.970
<v Speaker 0>join me on this show, the thing they're

00:09:26.970 --> 00:09:29.905
<v Speaker 0>not worried about is, like, their own confidence

00:09:29.905 --> 00:09:31.825
<v Speaker 0>or their knowledge. It's always the, oh, I

00:09:31.825 --> 00:09:33.505
<v Speaker 0>really hope our docs are up to date.

00:09:33.745 --> 00:09:36.305
<v Speaker 1>Oh, yeah. I hope they are. Documentation is

00:09:36.305 --> 00:09:38.305
<v Speaker 0>always just one of those really challenging things.

00:09:38.385 --> 00:09:41.345
<v Speaker 0>So yeah. Alright. Let's click on get started.

00:09:41.960 --> 00:09:43.400
<v Speaker 0>So I'm assuming the first thing we need

00:09:43.400 --> 00:09:45.880
<v Speaker 0>to do is just get this thing installed.

00:09:46.760 --> 00:09:47.400
<v Speaker 0>Yeah.

00:09:47.800 --> 00:09:49.480
<v Speaker 0>So I see we have two choices. Yeah.

00:09:49.480 --> 00:09:51.080
<v Speaker 0>Go for it. I was just gonna tell

00:09:51.080 --> 00:09:52.520
<v Speaker 1>you, there's there's two choices here. This is

00:09:52.520 --> 00:09:54.520
<v Speaker 1>like the the documentation on how to install

00:09:54.520 --> 00:09:55.240
<v Speaker 1>SchemaHero.

00:09:55.475 --> 00:09:57.555
<v Speaker 1>On the top nav bar, there's also a

00:09:57.555 --> 00:09:59.315
<v Speaker 1>tutorial. Like, whatever way you want to go

00:09:59.315 --> 00:10:01.475
<v Speaker 1>with, like, we like, it's under Learn SchemaHero,

00:10:01.475 --> 00:10:02.835
<v Speaker 1>one tab to the left.

00:10:03.395 --> 00:10:05.635
<v Speaker 1>Whichever path you want to take, one just

00:10:05.635 --> 00:10:07.875
<v Speaker 1>like this path still leaves you with SchemaHero

00:10:07.875 --> 00:10:09.555
<v Speaker 1>installed. It's a little bit more like, you

00:10:09.555 --> 00:10:12.280
<v Speaker 1>know, walk you through every single thing. Well,

00:10:12.280 --> 00:10:13.800
<v Speaker 0>yeah, I probably need all the help I

00:10:13.800 --> 00:10:15.560
<v Speaker 0>can get. So let's use the the start

00:10:15.560 --> 00:10:17.080
<v Speaker 0>of this tutorial because it says new to

00:10:17.080 --> 00:10:19.240
<v Speaker 0>SchemaHero and I I certainly am.

00:10:21.880 --> 00:10:24.120
<v Speaker 0>Alright. So we're getting some introduction.

00:10:26.324 --> 00:10:28.644
<v Speaker 0>It's even given us a little basic database

00:10:28.644 --> 00:10:30.805
<v Speaker 0>that we can design, so reservations,

00:10:30.805 --> 00:10:32.245
<v Speaker 0>schedules, and airports.

00:10:33.605 --> 00:10:34.964
<v Speaker 0>And I'm sure someone has spent a lot

00:10:34.964 --> 00:10:36.725
<v Speaker 0>of time putting this all together, but I'm

00:10:36.725 --> 00:10:38.404
<v Speaker 0>gonna skip onto the install step of the

00:10:38.324 --> 00:10:39.365
<v Speaker 0>Yeah. Let's do it.

00:10:40.380 --> 00:10:41.580
<v Speaker 0>Alright. So

00:10:41.980 --> 00:10:43.980
<v Speaker 0>it says so do we need something local

00:10:43.980 --> 00:10:45.420
<v Speaker 0>and something on the server? I see that

00:10:45.420 --> 00:10:47.660
<v Speaker 0>this is installing a a plugin. Do you

00:10:47.660 --> 00:10:49.500
<v Speaker 0>wanna kinda just break that down for us?

00:10:49.820 --> 00:10:51.580
<v Speaker 1>Yeah. So SchemaHero

00:10:53.115 --> 00:10:54.635
<v Speaker 1>is a it's

00:10:54.635 --> 00:10:56.075
<v Speaker 1>packaged the way I think that we're going

00:10:56.075 --> 00:10:57.274
<v Speaker 1>to go through it today, it's packaged as

00:10:57.274 --> 00:10:59.755
<v Speaker 1>a Kubernetes operator. It doesn't actually have to

00:10:59.755 --> 00:11:02.315
<v Speaker 1>run-in Kubernetes. It's just a CLI command, and

00:11:02.315 --> 00:11:04.555
<v Speaker 1>you can run it completely outside of Kubernetes

00:11:05.595 --> 00:11:06.795
<v Speaker 1>as long as it can talk to the

00:11:06.795 --> 00:11:08.949
<v Speaker 1>database. But, like, we're gonna go through it,

00:11:08.949 --> 00:11:10.230
<v Speaker 1>and we think the primary and kind of

00:11:10.230 --> 00:11:11.750
<v Speaker 1>the best use case is really, like, running

00:11:11.750 --> 00:11:13.269
<v Speaker 1>it as a Kubernetes operator.

00:11:13.509 --> 00:11:13.990
<v Speaker 1>So

00:11:14.550 --> 00:11:16.470
<v Speaker 1>we have a Helm chart. We have other,

00:11:16.470 --> 00:11:18.630
<v Speaker 1>like, you know, community supported ways to install

00:11:18.630 --> 00:11:21.029
<v Speaker 1>it. The preferred way for us is to

00:11:21.029 --> 00:11:24.765
<v Speaker 1>grab our kubectl plug in using Crew that

00:11:24.765 --> 00:11:26.285
<v Speaker 1>we publish called SchemaHero,

00:11:26.285 --> 00:11:27.965
<v Speaker 1>if you have Crew installed. If not, we

00:11:27.965 --> 00:11:28.845
<v Speaker 1>can get that too.

00:11:29.485 --> 00:11:31.805
<v Speaker 1>The ability is that will actually manage installing

00:11:31.805 --> 00:11:33.725
<v Speaker 1>the operator for you and also

00:11:34.080 --> 00:11:36.400
<v Speaker 1>kinda give you control SchemaHero

00:11:36.400 --> 00:11:38.720
<v Speaker 1>CLI commands so that you can interact exactly

00:11:38.720 --> 00:11:41.280
<v Speaker 1>with, you know, like, the SchemaHero extension inside

00:11:41.280 --> 00:11:42.080
<v Speaker 1>the cluster.

00:11:42.720 --> 00:11:44.880
<v Speaker 0>I normally have Crew installed, but I did

00:11:44.880 --> 00:11:46.800
<v Speaker 0>switch to my m one Mac recently. So

00:11:46.800 --> 00:11:47.840
<v Speaker 0>we'll need to

00:11:48.480 --> 00:11:49.520
<v Speaker 0>quickly grab this.

00:11:54.535 --> 00:11:55.575
<v Speaker 0>Looks fun.

00:11:56.135 --> 00:11:58.055
<v Speaker 0>Yeah. Am I supposed to trust us?

00:11:58.455 --> 00:12:00.135
<v Speaker 1>Seven seven lines of

00:12:00.535 --> 00:12:02.455
<v Speaker 1>of shell scripting here. Let's do it.

00:12:03.820 --> 00:12:05.500
<v Speaker 0>I'm looking for the safe option.

00:12:06.139 --> 00:12:06.860
<v Speaker 1>Yeah.

00:12:09.260 --> 00:12:11.980
<v Speaker 0>Alright. Let's do that. Although Homebrew can't be

00:12:12.060 --> 00:12:14.380
<v Speaker 0>notoriously slow, but, hopefully, it's not too bad.

00:12:18.584 --> 00:12:20.024
<v Speaker 0>I do love that they store all the

00:12:20.024 --> 00:12:22.665
<v Speaker 0>binaries and get help container registry now is

00:12:23.144 --> 00:12:25.464
<v Speaker 0>OCA artifacts. It's really clever.

00:12:26.345 --> 00:12:27.065
<v Speaker 0>Yeah.

00:12:30.824 --> 00:12:31.865
<v Speaker 0>There we go.

00:12:32.665 --> 00:12:33.144
<v Speaker 0>Great.

00:12:37.100 --> 00:12:38.860
<v Speaker 0>Alright. So installed.

00:12:40.540 --> 00:12:43.020
<v Speaker 1>So that just installed the the client side

00:12:43.020 --> 00:12:45.420
<v Speaker 1>portion, obviously. That hasn't, like, talked talked talked

00:12:45.420 --> 00:12:46.700
<v Speaker 1>to the cluster at all.

00:12:47.825 --> 00:12:49.745
<v Speaker 0>Yeah. It's now telling me to run the

00:12:49.745 --> 00:12:52.145
<v Speaker 0>kubectl SchemaHero install. So I'm assuming this is

00:12:52.145 --> 00:12:53.825
<v Speaker 0>what's gonna do. Go ahead and install the

00:12:53.825 --> 00:12:55.105
<v Speaker 0>operator to our cluster?

00:12:55.425 --> 00:12:55.985
<v Speaker 1>Exactly.

00:13:01.360 --> 00:13:01.920
<v Speaker 1>I just

00:13:02.800 --> 00:13:04.720
<v Speaker 1>I think you when you install brew, you

00:13:04.720 --> 00:13:06.720
<v Speaker 1>have to, like, add some path to the

00:13:06.720 --> 00:13:08.560
<v Speaker 1>shell in order to do it.

00:13:11.120 --> 00:13:13.279
<v Speaker 0>I've never Am I making this more difficult

00:13:13.279 --> 00:13:14.560
<v Speaker 0>for myself? Is that what you're saying?

00:13:17.055 --> 00:13:18.655
<v Speaker 1>I mean, when you go so, like, if

00:13:18.655 --> 00:13:21.855
<v Speaker 1>you maybe? Yeah. Exactly. Like, this this binary

00:13:21.855 --> 00:13:23.615
<v Speaker 1>exists somewhere now. Right? Like, I don't know

00:13:23.615 --> 00:13:24.815
<v Speaker 1>where it is on your path.

00:13:25.535 --> 00:13:27.615
<v Speaker 0>Neither do I. That's that's

00:13:28.180 --> 00:13:29.860
<v Speaker 0>great. Okay. Let's see. Do we have a

00:13:29.860 --> 00:13:31.540
<v Speaker 0>crude directory? We do. And we got a

00:13:31.540 --> 00:13:34.500
<v Speaker 0>Ben. So let's there we go. So we

00:13:34.500 --> 00:13:35.860
<v Speaker 0>are gonna do export

00:13:36.020 --> 00:13:36.980
<v Speaker 0>path.

00:13:41.300 --> 00:13:42.660
<v Speaker 0>Accru bin.

00:13:43.845 --> 00:13:45.525
<v Speaker 0>And then we're gonna run that again.

00:13:47.445 --> 00:13:48.645
<v Speaker 1>That looks better.

00:13:49.125 --> 00:13:50.404
<v Speaker 0>That's pretty fast.

00:13:53.045 --> 00:13:54.485
<v Speaker 0>Does it get a sort of namespace? It

00:13:54.485 --> 00:13:55.765
<v Speaker 0>does. Okay. It does. Yeah.

00:13:58.120 --> 00:14:00.360
<v Speaker 0>So I wanna elaborate on something that you

00:14:00.360 --> 00:14:03.320
<v Speaker 0>said there then. So let's close that. You

00:14:03.320 --> 00:14:07.399
<v Speaker 0>said that SchemaHero doesn't have to run-in cluster.

00:14:07.399 --> 00:14:08.760
<v Speaker 0>So with the use case

00:14:09.079 --> 00:14:10.519
<v Speaker 0>in fact, you said I could also just

00:14:10.519 --> 00:14:11.080
<v Speaker 0>run

00:14:11.399 --> 00:14:13.079
<v Speaker 0>cube control schema.

00:14:14.815 --> 00:14:16.095
<v Speaker 0>It's got a whole bunch of things on

00:14:16.095 --> 00:14:16.575
<v Speaker 0>it?

00:14:17.055 --> 00:14:19.215
<v Speaker 1>Exactly. Yeah. Like, you can you know, we'll

00:14:19.215 --> 00:14:21.535
<v Speaker 1>dive into it here. And so, like, in

00:14:21.535 --> 00:14:23.695
<v Speaker 1>in kinda getting into how SchemaHero works, but,

00:14:23.695 --> 00:14:25.215
<v Speaker 1>like, you can see there's a couple commands

00:14:25.215 --> 00:14:27.135
<v Speaker 1>there, plan and apply. Those are probably the

00:14:27.135 --> 00:14:27.935
<v Speaker 1>big important ones.

00:14:29.079 --> 00:14:31.800
<v Speaker 1>And so you can say, here's a manifest,

00:14:31.800 --> 00:14:33.160
<v Speaker 1>and I want you to plan it against

00:14:33.160 --> 00:14:35.079
<v Speaker 1>this database and give it a URI and

00:14:35.079 --> 00:14:37.000
<v Speaker 1>run it. And we actually

00:14:37.959 --> 00:14:39.399
<v Speaker 1>run it that way in

00:14:40.600 --> 00:14:43.245
<v Speaker 1>Kubernetes at times when we're in controlled environments

00:14:43.245 --> 00:14:45.565
<v Speaker 1>that, like, we can't deploy an operator because

00:14:45.565 --> 00:14:48.045
<v Speaker 1>we can't get cluster RBAC level permissions, and

00:14:48.045 --> 00:14:49.644
<v Speaker 1>so we can still run it. It's,

00:14:50.125 --> 00:14:52.125
<v Speaker 1>like, it's less automated at the end of

00:14:52.125 --> 00:14:53.324
<v Speaker 0>the day. You still get the benefits of

00:14:53.324 --> 00:14:55.620
<v Speaker 1>SchemaHero, but, like, it doesn't, you know like,

00:14:55.620 --> 00:14:57.060
<v Speaker 1>some of the ongoing like, the benefits of

00:14:57.060 --> 00:14:58.740
<v Speaker 1>an operator is you have that reconcile loop

00:14:58.740 --> 00:15:00.500
<v Speaker 1>that's running continuously in the cluster, and you

00:15:00.500 --> 00:15:03.220
<v Speaker 1>lose that. Yeah. I'm assuming for people that

00:15:03.220 --> 00:15:05.860
<v Speaker 0>aren't doing local development, I get Kubernetes. This

00:15:05.860 --> 00:15:07.620
<v Speaker 0>is the best way as well for them.

00:15:07.620 --> 00:15:09.445
<v Speaker 0>Like, If they're just doing Docker Compose to

00:15:09.445 --> 00:15:11.605
<v Speaker 0>run their their services, but they still wanna

00:15:11.605 --> 00:15:13.045
<v Speaker 0>manage and use SchemaHero

00:15:13.365 --> 00:15:15.524
<v Speaker 0>for the local dev environment, they could just

00:15:15.524 --> 00:15:17.285
<v Speaker 0>do the SchemaHero

00:15:17.285 --> 00:15:19.045
<v Speaker 0>plan, apply, you logic themselves.

00:15:19.779 --> 00:15:20.820
<v Speaker 1>Yeah. For sure.

00:15:21.700 --> 00:15:23.700
<v Speaker 1>Yeah. Exactly. And like you another use of

00:15:23.700 --> 00:15:25.540
<v Speaker 1>it, it's not built into the operator, is

00:15:25.540 --> 00:15:26.340
<v Speaker 1>we have a

00:15:26.980 --> 00:15:28.500
<v Speaker 1>a generate command,

00:15:30.020 --> 00:15:32.100
<v Speaker 1>which you can use, like, against an existing

00:15:32.100 --> 00:15:33.620
<v Speaker 1>database. And you can just say, you know,

00:15:33.620 --> 00:15:34.580
<v Speaker 1>like, one of the things that we've done

00:15:34.580 --> 00:15:36.855
<v Speaker 1>is SchemaHero is we've said, oh, here's a

00:15:36.855 --> 00:15:37.735
<v Speaker 1>declarative

00:15:37.975 --> 00:15:40.215
<v Speaker 1>structure. There are Kubernetes manifests, and this defines

00:15:40.215 --> 00:15:42.055
<v Speaker 1>the table. Well, if you have an existing

00:15:42.055 --> 00:15:44.135
<v Speaker 1>database, that can be a little bit tricky

00:15:44.135 --> 00:15:45.815
<v Speaker 1>to migrate over if you have, you know,

00:15:45.815 --> 00:15:47.975
<v Speaker 1>hundreds of tables and it's complex. And so

00:15:48.270 --> 00:15:50.750
<v Speaker 1>SchemaHero generate will actually, like, connect to the

00:15:50.750 --> 00:15:52.830
<v Speaker 1>database, describe the schema, and then spit it

00:15:52.830 --> 00:15:53.950
<v Speaker 1>all out for you so you have a

00:15:53.950 --> 00:15:56.030
<v Speaker 1>starting point, you can actually migrate to SchemaHero.

00:15:56.030 --> 00:15:57.710
<v Speaker 0>Oh, nice. We'll definitely have to try that

00:15:57.710 --> 00:15:59.470
<v Speaker 0>then before we finish. Is that is that

00:15:59.470 --> 00:16:00.270
<v Speaker 0>part of our tutorial?

00:16:01.265 --> 00:16:03.345
<v Speaker 1>It's not, but, like, well, let's try it.

00:16:04.465 --> 00:16:06.225
<v Speaker 0>Alright. Do wanna do that first or do

00:16:06.225 --> 00:16:07.505
<v Speaker 0>you wanna go stick to this tutorial first

00:16:07.505 --> 00:16:09.585
<v Speaker 0>and and Let's go through this tutorial here.

00:16:09.585 --> 00:16:11.985
<v Speaker 0>Alright. Okay. Wise wise decision.

00:16:12.145 --> 00:16:15.265
<v Speaker 0>So we've done we have screen available locally.

00:16:15.265 --> 00:16:17.320
<v Speaker 0>We have that available inside our cluster, and

00:16:17.320 --> 00:16:19.240
<v Speaker 0>now we need to connect our database.

00:16:20.280 --> 00:16:23.320
<v Speaker 0>So what databases does SchemaHero support?

00:16:24.280 --> 00:16:25.080
<v Speaker 1>So

00:16:25.160 --> 00:16:26.200
<v Speaker 1>we support

00:16:27.320 --> 00:16:28.280
<v Speaker 1>Postgres,

00:16:28.520 --> 00:16:29.160
<v Speaker 1>MySQL,

00:16:30.285 --> 00:16:32.045
<v Speaker 1>Cassandra, CockroachDB,

00:16:32.365 --> 00:16:32.925
<v Speaker 1>and

00:16:33.485 --> 00:16:35.885
<v Speaker 1>SQLite. And I think we're working on adding

00:16:35.885 --> 00:16:37.085
<v Speaker 1>support for

00:16:39.165 --> 00:16:40.525
<v Speaker 1>Yugabyte right now.

00:16:41.085 --> 00:16:42.524
<v Speaker 1>The goal is, like, you know,

00:16:43.460 --> 00:16:45.540
<v Speaker 1>common databases, and we wanna continue to expand

00:16:45.540 --> 00:16:46.100
<v Speaker 1>that.

00:16:46.820 --> 00:16:47.940
<v Speaker 0>Cool. Awesome.

00:16:50.260 --> 00:16:51.780
<v Speaker 1>So I don't know. If you already have

00:16:51.780 --> 00:16:52.900
<v Speaker 1>Postgres running,

00:16:53.540 --> 00:16:55.380
<v Speaker 1>David, like, we might wanna skip some of

00:16:55.380 --> 00:16:56.580
<v Speaker 1>these parts here and

00:16:57.714 --> 00:16:59.875
<v Speaker 0>Yeah. So I actually have a port forward

00:16:59.875 --> 00:17:02.995
<v Speaker 0>to both Postgres and MariaDB running another terminal

00:17:02.995 --> 00:17:03.955
<v Speaker 0>on my machine.

00:17:04.275 --> 00:17:04.754
<v Speaker 0>So

00:17:06.275 --> 00:17:07.234
<v Speaker 0>No. Great.

00:17:07.954 --> 00:17:09.714
<v Speaker 0>Oh, this is the app I'm using. I

00:17:09.714 --> 00:17:11.474
<v Speaker 0>didn't realize that this was in the documentation,

00:17:11.490 --> 00:17:13.569
<v Speaker 0>this beekeeper app. So that's obviously quite a

00:17:13.569 --> 00:17:15.250
<v Speaker 0>a good choice. I picked it for a

00:17:15.250 --> 00:17:17.970
<v Speaker 0>completely silly reasons. I thought it looked nice,

00:17:17.970 --> 00:17:19.569
<v Speaker 0>and it's the only reason when I search

00:17:19.569 --> 00:17:21.730
<v Speaker 0>for Postgres clients, I picked beekeeper. But I'm

00:17:21.730 --> 00:17:23.970
<v Speaker 0>glad that that this has validated something for

00:17:23.970 --> 00:17:25.595
<v Speaker 0>me now. So I'm gonna have That's actually,

00:17:25.595 --> 00:17:26.634
<v Speaker 1>that's why we picked it and put it

00:17:26.634 --> 00:17:27.835
<v Speaker 1>in the docs too because it just looks

00:17:27.835 --> 00:17:29.354
<v Speaker 1>better than most of the other ones.

00:17:29.754 --> 00:17:31.754
<v Speaker 0>Yeah. I I actually I was playing, like,

00:17:31.754 --> 00:17:33.595
<v Speaker 0>those Versus Code plugins now where you can

00:17:33.595 --> 00:17:36.235
<v Speaker 0>just, like, open empty text files and write

00:17:36.235 --> 00:17:37.914
<v Speaker 0>SQL and then say execute and stuff, but

00:17:37.914 --> 00:17:39.115
<v Speaker 0>I felt that was a bit a bit

00:17:39.115 --> 00:17:41.410
<v Speaker 0>hardcore for this stream. I like these visual

00:17:41.410 --> 00:17:42.049
<v Speaker 0>things.

00:17:42.850 --> 00:17:45.810
<v Speaker 0>Okay. Sorry. Digress in there. I'm gonna copy

00:17:45.810 --> 00:17:48.770
<v Speaker 0>our manifest here, which is going to

00:17:50.130 --> 00:17:51.730
<v Speaker 0>create a database

00:17:51.730 --> 00:17:52.530
<v Speaker 0>on our database.

00:17:54.755 --> 00:17:56.275
<v Speaker 0>I guess we should just have a code

00:17:56.275 --> 00:17:57.475
<v Speaker 0>session too. Right?

00:17:58.115 --> 00:18:00.274
<v Speaker 1>Yeah. We're gonna erase some YAML.

00:18:01.075 --> 00:18:02.434
<v Speaker 0>Love me some YAML.

00:18:05.395 --> 00:18:06.995
<v Speaker 0>I've lost my mouse. There we go.

00:18:08.250 --> 00:18:11.290
<v Speaker 0>Alright. So database1.YAML.

00:18:12.490 --> 00:18:16.250
<v Speaker 0>So pretty standard Kubernetes looking manifest here.

00:18:16.570 --> 00:18:16.970
<v Speaker 0>It's

00:18:21.305 --> 00:18:23.865
<v Speaker 0>okay. So the URI is coming from a

00:18:23.865 --> 00:18:26.105
<v Speaker 0>secret of a key. I mean, can I

00:18:26.105 --> 00:18:27.144
<v Speaker 0>hard put that?

00:18:27.705 --> 00:18:30.264
<v Speaker 1>Yeah. You can. If we look at the

00:18:30.745 --> 00:18:32.504
<v Speaker 1>the docs, we can see

00:18:32.745 --> 00:18:33.705
<v Speaker 1>exactly how.

00:18:35.710 --> 00:18:38.110
<v Speaker 1>So let's let's head over to the the

00:18:38.110 --> 00:18:41.070
<v Speaker 1>documentation tab instead of the tutorial tab.

00:18:42.909 --> 00:18:44.990
<v Speaker 0>I was hoping for a duplicate action there,

00:18:44.990 --> 00:18:46.989
<v Speaker 0>but I'll just do that. There we go.

00:18:47.870 --> 00:18:48.909
<v Speaker 1>Docs.

00:18:49.894 --> 00:18:51.574
<v Speaker 1>Then connecting data.

00:18:55.254 --> 00:18:56.854
<v Speaker 1>Actually, that's another example.

00:18:57.174 --> 00:18:58.855
<v Speaker 1>There you go. The reference for all fields.

00:18:58.855 --> 00:19:01.254
<v Speaker 0>There we go. So Alright. Value.

00:19:01.414 --> 00:19:02.134
<v Speaker 0>Okay. Yeah.

00:19:05.240 --> 00:19:06.519
<v Speaker 1>Obviously, in production,

00:19:07.000 --> 00:19:10.280
<v Speaker 1>like, don't mind. It's just hard to Yeah.

00:19:10.280 --> 00:19:11.960
<v Speaker 0>It's just because I I have no idea

00:19:11.960 --> 00:19:13.720
<v Speaker 0>about the config map. So secrets available on

00:19:13.720 --> 00:19:16.600
<v Speaker 0>this cluster. This was a civil marketplace installs

00:19:16.600 --> 00:19:18.679
<v Speaker 0>the database. I took no ownership of it

00:19:18.679 --> 00:19:21.605
<v Speaker 0>whatsoever. So I'm just going to provide

00:19:21.845 --> 00:19:24.325
<v Speaker 0>the service name, which is going to be

00:19:25.605 --> 00:19:27.124
<v Speaker 0>old square sql.

00:19:27.445 --> 00:19:28.325
<v Speaker 0>Default.

00:19:28.405 --> 00:19:29.445
<v Speaker 0>Svc.

00:19:29.605 --> 00:19:30.404
<v Speaker 0>Cluster.

00:19:30.645 --> 00:19:31.365
<v Speaker 0>Local.

00:19:31.605 --> 00:19:32.645
<v Speaker 0>And I'll assume

00:19:34.040 --> 00:19:36.200
<v Speaker 0>we're gonna just put the port on on

00:19:36.200 --> 00:19:38.520
<v Speaker 0>that. I think we need I think it

00:19:38.520 --> 00:19:40.120
<v Speaker 1>needs to be like a there's like a

00:19:40.120 --> 00:19:41.080
<v Speaker 1>PostgresQL.

00:19:41.080 --> 00:19:41.960
<v Speaker 1>Yeah. Exactly.

00:19:42.680 --> 00:19:43.240
<v Speaker 1>And

00:19:44.040 --> 00:19:45.080
<v Speaker 1>then you can throw, like,

00:19:46.745 --> 00:19:48.345
<v Speaker 1>if don't need a username and a password,

00:19:48.345 --> 00:19:49.544
<v Speaker 1>do you need the username and password to

00:19:49.544 --> 00:19:51.625
<v Speaker 1>connect? How is it deployed? Yeah. We we

00:19:51.625 --> 00:19:53.945
<v Speaker 0>will need a username and password. So I

00:19:53.945 --> 00:19:55.465
<v Speaker 0>just oh, yeah. I'll just put them in

00:19:55.465 --> 00:19:57.144
<v Speaker 0>the URI then. So

00:20:01.945 --> 00:20:04.160
<v Speaker 0>Sorry. Sorry. It's not a publicly available Postgres

00:20:04.400 --> 00:20:05.840
<v Speaker 0>No. One hopes.

00:20:10.880 --> 00:20:13.600
<v Speaker 0>Yeah. Cluster IP. Safe. What could go wrong?

00:20:13.600 --> 00:20:16.255
<v Speaker 1>Yeah. Perfect. Okay. So I need to describe

00:20:16.255 --> 00:20:18.895
<v Speaker 0>my postgres config map, which has all of

00:20:18.895 --> 00:20:19.855
<v Speaker 0>my stuff.

00:20:22.655 --> 00:20:24.175
<v Speaker 0>I wanted get

00:20:27.695 --> 00:20:28.415
<v Speaker 0>DB

00:20:28.815 --> 00:20:29.295
<v Speaker 0>password.

00:20:35.390 --> 00:20:36.110
<v Speaker 0>User.

00:20:38.750 --> 00:20:40.429
<v Speaker 0>This is terrible as secure.

00:20:40.830 --> 00:20:42.910
<v Speaker 0>Some random Don't don't judge me too much.

00:20:46.805 --> 00:20:48.485
<v Speaker 0>That that may be enough. I don't think

00:20:48.485 --> 00:20:49.525
<v Speaker 0>we need to put the DB name in

00:20:49.525 --> 00:20:51.205
<v Speaker 0>or anything because we're creating a database. So

00:20:51.205 --> 00:20:53.045
<v Speaker 0>I think what we have here should be

00:20:53.045 --> 00:20:54.245
<v Speaker 0>enough for it to work.

00:20:54.965 --> 00:20:57.125
<v Speaker 1>The database already exists in in it. So

00:20:57.125 --> 00:20:59.365
<v Speaker 1>one thing SchemaHero today doesn't do is create

00:20:59.365 --> 00:21:01.125
<v Speaker 1>the database for you. It assumes that you've

00:21:01.125 --> 00:21:02.610
<v Speaker 1>provisioned a date. We have a feature request

00:21:02.610 --> 00:21:03.810
<v Speaker 1>on on that, but, like, you have to

00:21:03.890 --> 00:21:04.370
<v Speaker 1>yeah.

00:21:05.090 --> 00:21:06.690
<v Speaker 0>Alright. Okay. So

00:21:08.050 --> 00:21:09.650
<v Speaker 0>I think the database just goes on the

00:21:09.650 --> 00:21:10.210
<v Speaker 0>end.

00:21:10.770 --> 00:21:11.490
<v Speaker 0>Yeah.

00:21:11.810 --> 00:21:13.250
<v Speaker 0>That is part of this

00:21:13.730 --> 00:21:14.610
<v Speaker 0>blurb.

00:21:14.690 --> 00:21:15.570
<v Speaker 0>Postgres DB.

00:21:18.435 --> 00:21:19.155
<v Speaker 0>Alright.

00:21:21.155 --> 00:21:22.595
<v Speaker 1>So it's impressive that you can write a

00:21:22.595 --> 00:21:24.915
<v Speaker 1>Postgres connection URI off the top of your

00:21:24.915 --> 00:21:25.715
<v Speaker 1>head. That's

00:21:26.275 --> 00:21:27.715
<v Speaker 0>Well, it's not worked you had. It's not

00:21:27.715 --> 00:21:28.435
<v Speaker 0>worked yet. Right?

00:21:29.220 --> 00:21:30.259
<v Speaker 0>Fair enough.

00:21:30.580 --> 00:21:32.419
<v Speaker 0>Alright. Are we feeling confident?

00:21:32.900 --> 00:21:33.940
<v Speaker 1>Let's do it.

00:21:36.419 --> 00:21:38.900
<v Speaker 0>Or Oh, we gotta change the name and

00:21:38.900 --> 00:21:41.059
<v Speaker 1>the namespace up there. You probably wanna name

00:21:41.059 --> 00:21:42.820
<v Speaker 1>it something not AirlineDB.

00:21:42.820 --> 00:21:44.980
<v Speaker 1>I don't know. But you can. Whatever you

00:21:44.980 --> 00:21:45.140
<v Speaker 1>want.

00:21:45.835 --> 00:21:47.354
<v Speaker 0>Rawkode

00:21:47.355 --> 00:21:48.154
<v Speaker 0>five.

00:21:48.715 --> 00:21:50.874
<v Speaker 0>Why not? Alright. Let's try again.

00:21:51.434 --> 00:21:52.955
<v Speaker 0>Okay. So I'm assuming I can just run

00:21:52.955 --> 00:21:53.994
<v Speaker 0>get databases.

00:21:54.075 --> 00:21:55.354
<v Speaker 0>Yeah. Exactly.

00:21:55.355 --> 00:21:57.835
<v Speaker 0>I'm assuming if I run describe, we make

00:21:57.835 --> 00:21:59.434
<v Speaker 0>some events or

00:22:00.120 --> 00:22:01.480
<v Speaker 1>We should, yeah.

00:22:05.080 --> 00:22:05.799
<v Speaker 1>And

00:22:07.000 --> 00:22:08.600
<v Speaker 1>no events there. But if we look at

00:22:08.600 --> 00:22:10.200
<v Speaker 1>like if you want to do like a

00:22:10.200 --> 00:22:10.840
<v Speaker 1>get pods,

00:22:11.975 --> 00:22:14.855
<v Speaker 1>what this actually did is created one controller

00:22:14.855 --> 00:22:17.815
<v Speaker 1>pod, like the Rawkode Live controller zero.

00:22:17.895 --> 00:22:18.455
<v Speaker 1>Nice.

00:22:19.015 --> 00:22:20.695
<v Speaker 1>And that's the one that's going be managing

00:22:20.695 --> 00:22:21.895
<v Speaker 1>this database. And

00:22:22.295 --> 00:22:23.415
<v Speaker 1>I know one of the things that's always

00:22:23.415 --> 00:22:25.095
<v Speaker 1>tricky is debugging some of these systems. And

00:22:25.095 --> 00:22:26.615
<v Speaker 1>so this is, like, where to go to

00:22:26.615 --> 00:22:28.640
<v Speaker 1>watch logs. You know, it'll spit out, like,

00:22:28.640 --> 00:22:30.400
<v Speaker 1>the the schema and, like, any kind of

00:22:30.400 --> 00:22:32.799
<v Speaker 1>challenges or problems and and and errors it

00:22:32.799 --> 00:22:33.679
<v Speaker 1>runs into here.

00:22:34.320 --> 00:22:34.879
<v Speaker 0>Okay.

00:22:35.120 --> 00:22:37.760
<v Speaker 0>I mean, I'm assuming there's no error message,

00:22:37.760 --> 00:22:39.280
<v Speaker 0>so the connection probably

00:22:39.775 --> 00:22:40.414
<v Speaker 0>worked?

00:22:40.895 --> 00:22:42.655
<v Speaker 1>I think so. Yeah. This is this looks

00:22:42.655 --> 00:22:44.815
<v Speaker 1>good. This is a positive result.

00:22:46.015 --> 00:22:48.015
<v Speaker 0>At least a better error tutorial.

00:22:48.015 --> 00:22:49.855
<v Speaker 0>I'm assuming we wanna start creating some tables

00:22:49.855 --> 00:22:51.375
<v Speaker 0>next. So That's good.

00:22:52.880 --> 00:22:54.480
<v Speaker 0>So to do a validate, we try and

00:22:54.480 --> 00:22:55.440
<v Speaker 0>get databases.

00:22:55.440 --> 00:22:56.399
<v Speaker 0>Yeah. Cool.

00:22:57.039 --> 00:22:58.959
<v Speaker 0>Alright. Let's create our first table.

00:23:01.279 --> 00:23:01.999
<v Speaker 0>Again,

00:23:03.200 --> 00:23:04.880
<v Speaker 0>SQL flashbacks there.

00:23:05.644 --> 00:23:06.364
<v Speaker 0>Yeah.

00:23:07.644 --> 00:23:10.445
<v Speaker 0>I haven't written any SQL in so long.

00:23:10.445 --> 00:23:11.404
<v Speaker 0>I've gotta say.

00:23:11.965 --> 00:23:14.284
<v Speaker 1>Good. You shouldn't have to. It gets gone.

00:23:15.804 --> 00:23:18.125
<v Speaker 0>Alright. So we could just modify oh, no.

00:23:18.125 --> 00:23:19.485
<v Speaker 0>We're creating a new object. So we've got

00:23:19.485 --> 00:23:21.409
<v Speaker 0>a table there. Got it.

00:23:22.210 --> 00:23:23.650
<v Speaker 0>Let's just keep it in the same file.

00:23:23.650 --> 00:23:26.210
<v Speaker 0>Keep it simple for now. So k. We'll

00:23:26.210 --> 00:23:28.370
<v Speaker 0>call I can call this table, I'm assuming.

00:23:28.850 --> 00:23:30.930
<v Speaker 0>Oh, this is the manifest name. Right? So

00:23:31.090 --> 00:23:31.490
<v Speaker 0>Yeah.

00:23:32.690 --> 00:23:33.490
<v Speaker 0>Let's

00:23:33.490 --> 00:23:34.290
<v Speaker 0>call that

00:23:36.795 --> 00:23:37.515
<v Speaker 0>project.

00:23:38.555 --> 00:23:40.795
<v Speaker 0>I'll just use my own namespace.

00:23:40.795 --> 00:23:43.115
<v Speaker 0>It's going to the database that I just

00:23:43.115 --> 00:23:45.515
<v Speaker 0>created, which I called Rawkode Live.

00:23:47.280 --> 00:23:49.360
<v Speaker 0>And the name like, if I admit this,

00:23:49.360 --> 00:23:51.200
<v Speaker 0>does it use the manifest name or no.

00:23:51.200 --> 00:23:52.960
<v Speaker 1>It doesn't. That's a good idea.

00:23:55.120 --> 00:23:55.679
<v Speaker 1>Yeah.

00:23:56.400 --> 00:23:58.000
<v Speaker 1>Like, we we have them as separate fields

00:23:58.000 --> 00:23:59.615
<v Speaker 1>just so you know. Like, we we like

00:23:59.615 --> 00:24:01.855
<v Speaker 1>underscores and table names, and Kubernetes doesn't like

00:24:01.855 --> 00:24:04.095
<v Speaker 1>underscores and manifest names. And so we ended

00:24:04.095 --> 00:24:05.855
<v Speaker 1>up, like, having some weirdness, and that's why

00:24:05.855 --> 00:24:07.695
<v Speaker 1>they're two fields. But, like, you know, I

00:24:07.695 --> 00:24:08.575
<v Speaker 1>like the idea.

00:24:10.655 --> 00:24:13.049
<v Speaker 0>Okay. So we're gonna have a primary key.

00:24:13.049 --> 00:24:15.130
<v Speaker 0>I'll just keep the airport schema just now.

00:24:15.130 --> 00:24:16.570
<v Speaker 0>I mean, we can modify it and play

00:24:16.570 --> 00:24:17.929
<v Speaker 0>with it and see what happens. But for

00:24:17.929 --> 00:24:19.210
<v Speaker 0>right now, I think this is enough to

00:24:19.210 --> 00:24:20.490
<v Speaker 0>test that we're

00:24:20.490 --> 00:24:22.409
<v Speaker 0>we're on something that may be working.

00:24:22.970 --> 00:24:25.595
<v Speaker 0>Great. You happy with that? That looks good.

00:24:25.595 --> 00:24:27.914
<v Speaker 1>Yeah. And we can connect already to beekeeper

00:24:27.914 --> 00:24:29.595
<v Speaker 1>and see the the schema and stuff like

00:24:29.595 --> 00:24:31.434
<v Speaker 1>that. Right? Yeah. We should be able to.

00:24:31.434 --> 00:24:32.714
<v Speaker 0>So I'm gonna apply that.

00:24:33.434 --> 00:24:34.874
<v Speaker 0>Get databases

00:24:34.875 --> 00:24:35.754
<v Speaker 0>and tables.

00:24:38.840 --> 00:24:39.799
<v Speaker 0>Looks good.

00:24:40.680 --> 00:24:42.200
<v Speaker 0>I don't know what I'm looking for, but

00:24:42.200 --> 00:24:44.200
<v Speaker 0>I think it looks good. I'm gonna Looks

00:24:44.200 --> 00:24:47.159
<v Speaker 0>good. Describe. We've got the schema.

00:24:48.920 --> 00:24:50.360
<v Speaker 1>So one thing you can do here is

00:24:50.360 --> 00:24:51.559
<v Speaker 1>actually use the

00:24:52.120 --> 00:24:53.000
<v Speaker 1>kubectl

00:24:54.175 --> 00:24:55.615
<v Speaker 1>plugin that we have there, and you can

00:24:55.615 --> 00:24:57.135
<v Speaker 1>do kubectl

00:24:57.135 --> 00:24:58.015
<v Speaker 1>SchemaHero

00:24:58.015 --> 00:25:00.255
<v Speaker 1>get tables or get migrations.

00:25:00.335 --> 00:25:01.775
<v Speaker 1>Well, I think we're gonna dig into, like,

00:25:01.775 --> 00:25:03.615
<v Speaker 1>the migrations part of it here. So

00:25:06.270 --> 00:25:06.910
<v Speaker 0>Okay.

00:25:07.950 --> 00:25:10.350
<v Speaker 0>So Penta and Zeta, that sounds good?

00:25:11.230 --> 00:25:11.950
<v Speaker 1>Yeah.

00:25:12.590 --> 00:25:13.470
<v Speaker 1>Well, it didn't

00:25:14.270 --> 00:25:16.670
<v Speaker 1>there's no migration, which is a little bit

00:25:16.670 --> 00:25:17.390
<v Speaker 1>weird.

00:25:17.630 --> 00:25:18.990
<v Speaker 1>I would have expected there to be a

00:25:18.990 --> 00:25:20.590
<v Speaker 1>migration that it, like, needed to deploy this

00:25:20.590 --> 00:25:22.605
<v Speaker 1>table. It may either still be running or

00:25:22.605 --> 00:25:24.125
<v Speaker 1>some other problem. Like

00:25:25.885 --> 00:25:28.205
<v Speaker 0>Oh, now we gotta fail to connect.

00:25:28.685 --> 00:25:29.245
<v Speaker 0>So

00:25:29.645 --> 00:25:32.125
<v Speaker 0>my confidence with my Postgres

00:25:32.125 --> 00:25:32.685
<v Speaker 0>URI.

00:25:34.120 --> 00:25:36.360
<v Speaker 1>Looks like fill the split host port. Oh,

00:25:36.360 --> 00:25:38.360
<v Speaker 1>there's like a slash missing, I think, it

00:25:38.360 --> 00:25:40.120
<v Speaker 1>looks like. I look at username, password, and

00:25:40.120 --> 00:25:42.360
<v Speaker 1>then a URI just shows right up there.

00:25:42.360 --> 00:25:44.200
<v Speaker 0>Oh, yeah. Silly,

00:25:44.200 --> 00:25:44.840
<v Speaker 0>silly, silly.

00:25:49.335 --> 00:25:51.895
<v Speaker 0>Be an at. Right? Yeah. Exactly. There you

00:25:51.895 --> 00:25:53.254
<v Speaker 1>go. An at sign's better.

00:25:54.934 --> 00:25:57.415
<v Speaker 0>Alright. Let's yeah. Let's just keep those logs

00:25:57.415 --> 00:25:58.135
<v Speaker 0>coming, actually.

00:25:59.540 --> 00:26:00.980
<v Speaker 1>We may

00:26:03.620 --> 00:26:05.620
<v Speaker 1>we may have to delete that pod and

00:26:05.620 --> 00:26:06.340
<v Speaker 1>let the

00:26:06.980 --> 00:26:08.740
<v Speaker 1>let the controller I don't know if that

00:26:08.740 --> 00:26:10.900
<v Speaker 1>pod's gonna automatically reconcile. That may be a

00:26:10.900 --> 00:26:11.220
<v Speaker 1>bug.

00:26:16.345 --> 00:26:18.024
<v Speaker 0>So if we run get migrations

00:26:18.264 --> 00:26:20.264
<v Speaker 0>right. Okay. Let's delete the pod. Let's

00:26:21.065 --> 00:26:21.465
<v Speaker 1>Yeah.

00:26:27.200 --> 00:26:28.800
<v Speaker 1>This is what reconciled loop is supposed to

00:26:28.800 --> 00:26:30.880
<v Speaker 1>do though for you. Right? Exactly. We'll let

00:26:30.880 --> 00:26:32.000
<v Speaker 0>that go away. We'll let it come back

00:26:32.000 --> 00:26:32.800
<v Speaker 0>and that'll be fixed.

00:26:38.735 --> 00:26:41.215
<v Speaker 0>Alright. Let's get our logs again.

00:26:47.695 --> 00:26:49.135
<v Speaker 0>No errors is good.

00:26:50.495 --> 00:26:53.775
<v Speaker 1>No errors is good. So with tables

00:26:55.890 --> 00:26:57.249
<v Speaker 0>migrations

00:26:58.610 --> 00:26:59.570
<v Speaker 0>planned.

00:26:59.809 --> 00:27:02.370
<v Speaker 0>Oh, we have a migration. Hey. Yeah. So

00:27:03.809 --> 00:27:04.049
<v Speaker 1>yeah.

00:27:06.424 --> 00:27:08.745
<v Speaker 1>If you actually run this with kubectl SchemaHero

00:27:08.745 --> 00:27:09.945
<v Speaker 1>get migrations,

00:27:11.145 --> 00:27:13.225
<v Speaker 1>we we spit the output a little bit

00:27:13.225 --> 00:27:13.864
<v Speaker 1>differently.

00:27:14.905 --> 00:27:15.864
<v Speaker 1>So we'll kind of

00:27:16.345 --> 00:27:17.945
<v Speaker 1>like, they're both valid. You see the same

00:27:17.945 --> 00:27:19.385
<v Speaker 1>names. Like, I think that we need to

00:27:19.385 --> 00:27:20.505
<v Speaker 1>change the way that we're doing this a

00:27:20.505 --> 00:27:21.145
<v Speaker 1>little bit in the project.

00:27:21.820 --> 00:27:23.420
<v Speaker 0>No. I can't do that. Okay. No. I

00:27:23.420 --> 00:27:24.460
<v Speaker 1>don't think we did that. So

00:27:25.340 --> 00:27:27.340
<v Speaker 0>Okay. So we've got one pending migration.

00:27:27.980 --> 00:27:29.500
<v Speaker 0>We've got a migration that

00:27:29.660 --> 00:27:32.220
<v Speaker 0>has been planned for fifty seconds. So what's

00:27:32.220 --> 00:27:34.645
<v Speaker 0>happening here? Can you fill me in? Yeah.

00:27:34.645 --> 00:27:36.725
<v Speaker 1>So you do it it fifty seconds ago,

00:27:36.725 --> 00:27:38.325
<v Speaker 1>it saw that there was, you know, a

00:27:38.325 --> 00:27:40.164
<v Speaker 1>table YAML that was deployed,

00:27:40.405 --> 00:27:42.245
<v Speaker 1>and it realized that there's something like, it

00:27:42.245 --> 00:27:44.485
<v Speaker 1>doesn't match the actual running schema in your

00:27:44.485 --> 00:27:47.500
<v Speaker 1>database, which I think is your current schema

00:27:47.500 --> 00:27:49.420
<v Speaker 1>has nothing in it. And this is a

00:27:49.420 --> 00:27:52.700
<v Speaker 1>plan to create a table. So it generated

00:27:53.020 --> 00:27:55.500
<v Speaker 1>the necessary DDL, like the

00:27:56.220 --> 00:27:57.900
<v Speaker 1>SQL statements that were going to be either

00:27:57.900 --> 00:28:00.140
<v Speaker 1>create table or alter table or whatever. And

00:28:00.140 --> 00:28:03.355
<v Speaker 1>it stores them in this migration CRD.

00:28:03.755 --> 00:28:04.475
<v Speaker 1>And then,

00:28:05.035 --> 00:28:06.875
<v Speaker 1>like, by default, SchemaHero

00:28:07.355 --> 00:28:09.595
<v Speaker 1>expects that there's some workflow here where you

00:28:09.595 --> 00:28:11.115
<v Speaker 1>can actually decide, I want to look at

00:28:11.115 --> 00:28:13.275
<v Speaker 1>this so you could control

00:28:13.355 --> 00:28:16.395
<v Speaker 1>SchemaHero describe migration and pass that ID in.

00:28:17.530 --> 00:28:19.130
<v Speaker 1>And it gives you the ability to, like,

00:28:19.130 --> 00:28:20.730
<v Speaker 1>check it and say, yeah, that's actually the

00:28:20.730 --> 00:28:22.010
<v Speaker 1>SQL that I want. You can turn that

00:28:22.010 --> 00:28:23.529
<v Speaker 1>off and let it auto deploy.

00:28:25.850 --> 00:28:27.770
<v Speaker 1>You can see the generated DDL statement there

00:28:27.770 --> 00:28:29.370
<v Speaker 1>is create table projects.

00:28:30.090 --> 00:28:30.490
<v Speaker 0>Alright.

00:28:31.304 --> 00:28:33.544
<v Speaker 0>So it's it's already given me the command.

00:28:33.544 --> 00:28:35.224
<v Speaker 0>So I can do approve

00:28:36.105 --> 00:28:37.224
<v Speaker 0>migration

00:28:38.264 --> 00:28:39.065
<v Speaker 0>and

00:28:39.144 --> 00:28:41.465
<v Speaker 0>drop the ID in. And that's gonna execute

00:28:41.465 --> 00:28:42.424
<v Speaker 0>the migration

00:28:42.664 --> 00:28:45.210
<v Speaker 0>and look at the table. Okay. What what

00:28:45.210 --> 00:28:46.490
<v Speaker 0>is the recalculate

00:28:46.490 --> 00:28:48.490
<v Speaker 0>there? Does that just tell to go build

00:28:48.490 --> 00:28:49.210
<v Speaker 0>that again?

00:28:49.770 --> 00:28:52.570
<v Speaker 1>Yeah. So we in that migration, we we

00:28:52.570 --> 00:28:53.289
<v Speaker 1>store

00:28:53.370 --> 00:28:55.290
<v Speaker 1>that create table statement. That way, we're, like

00:28:55.450 --> 00:28:57.210
<v Speaker 1>we calculated it one time, and now we

00:28:57.210 --> 00:28:57.610
<v Speaker 1>store it.

00:28:59.005 --> 00:29:00.845
<v Speaker 1>So recalculate

00:29:01.405 --> 00:29:04.284
<v Speaker 1>will basically erase it's supposed to erase that

00:29:04.284 --> 00:29:05.885
<v Speaker 1>and tell it, like, go go look at

00:29:05.885 --> 00:29:07.405
<v Speaker 1>the database again and see if that's still

00:29:07.405 --> 00:29:08.765
<v Speaker 1>the same command or what you need to

00:29:08.765 --> 00:29:11.325
<v Speaker 1>do. Okay. So if I was modifying it

00:29:11.325 --> 00:29:12.684
<v Speaker 0>manually at that point in time, I might

00:29:12.684 --> 00:29:14.205
<v Speaker 0>wanna ask it to go back and recalculate.

00:29:14.880 --> 00:29:16.880
<v Speaker 0>Exactly. What happens if I reject it?

00:29:18.240 --> 00:29:19.920
<v Speaker 1>Nothing other than it puts a timestamp that

00:29:19.920 --> 00:29:21.680
<v Speaker 1>says you rejected it at this time. Like,

00:29:21.680 --> 00:29:24.400
<v Speaker 1>that's all it does right now. Alright. Okay.

00:29:24.400 --> 00:29:26.559
<v Speaker 0>Let's not reject it. Let's approve

00:29:28.640 --> 00:29:29.440
<v Speaker 0>and run.

00:29:30.925 --> 00:29:33.485
<v Speaker 0>No. We wanted to to table. Right?

00:29:35.405 --> 00:29:37.485
<v Speaker 1>Yeah. Either get migrations or get tables. So

00:29:37.485 --> 00:29:38.765
<v Speaker 1>there's zero pending now.

00:29:39.245 --> 00:29:41.405
<v Speaker 0>Okay. Executed, approved,

00:29:41.485 --> 00:29:42.205
<v Speaker 0>no rejection.

00:29:43.100 --> 00:29:45.900
<v Speaker 0>Is this where we open beekeeper and Yeah.

00:29:45.900 --> 00:29:47.260
<v Speaker 1>Let's do it. Let's make let's make sure

00:29:47.260 --> 00:29:49.580
<v Speaker 1>the table actually like like, SchemaHero did what

00:29:49.580 --> 00:29:50.300
<v Speaker 1>it's supposed to do here.

00:29:59.955 --> 00:30:00.674
<v Speaker 0>Alright.

00:30:03.315 --> 00:30:04.515
<v Speaker 0>We got our projects.

00:30:08.850 --> 00:30:10.690
<v Speaker 0>Cool. No data in that button.

00:30:11.090 --> 00:30:13.490
<v Speaker 0>Yeah. How to how to add data?

00:30:14.290 --> 00:30:16.370
<v Speaker 0>I've not gone that far with BitKeeper yet.

00:30:17.650 --> 00:30:19.810
<v Speaker 0>View data. Oh, views view yeah. Or view

00:30:19.810 --> 00:30:21.890
<v Speaker 1>structure maybe too. You can actually yeah.

00:30:25.225 --> 00:30:26.585
<v Speaker 0>I I don't know how to

00:30:28.745 --> 00:30:30.745
<v Speaker 0>I should start playing with the the oh,

00:30:30.745 --> 00:30:32.424
<v Speaker 0>there we go. Alright. Code.

00:30:32.985 --> 00:30:34.345
<v Speaker 0>I'm in Glasgow.

00:30:36.185 --> 00:30:37.625
<v Speaker 0>There we go. We have our first airport.

00:30:38.299 --> 00:30:39.820
<v Speaker 0>Cool. Great. I just wanted to put in,

00:30:39.820 --> 00:30:41.739
<v Speaker 0>like, one row so that we can maybe

00:30:42.220 --> 00:30:44.380
<v Speaker 0>migrate the data and we'll actually see that

00:30:44.380 --> 00:30:46.059
<v Speaker 0>that we don't lose that data. I think

00:30:46.059 --> 00:30:46.779
<v Speaker 0>that would

00:30:47.100 --> 00:30:48.140
<v Speaker 0>that's important. I think you

00:30:49.500 --> 00:30:51.660
<v Speaker 1>I'm not a beekeeper expert here either, but

00:30:51.660 --> 00:30:53.500
<v Speaker 1>I'm I I I suspect you gotta click

00:30:53.500 --> 00:30:55.455
<v Speaker 1>that apply button at the bottom there. Yeah.

00:30:55.455 --> 00:30:57.055
<v Speaker 0>That should be a bright color. Come on,

00:30:57.055 --> 00:30:58.975
<v Speaker 0>beekeeper. Yeah. There we go. And

00:31:01.135 --> 00:31:02.015
<v Speaker 0>select

00:31:02.255 --> 00:31:03.135
<v Speaker 0>star

00:31:03.615 --> 00:31:04.414
<v Speaker 0>from

00:31:05.615 --> 00:31:06.575
<v Speaker 0>that will complete too.

00:31:07.220 --> 00:31:08.740
<v Speaker 0>Sweet. Okay. There we go.

00:31:10.740 --> 00:31:13.700
<v Speaker 0>So we're confident that SchemaHero did this job.

00:31:13.700 --> 00:31:14.740
<v Speaker 0>That's pretty cool.

00:31:16.820 --> 00:31:18.980
<v Speaker 0>Back to this tutorial, are we I want

00:31:20.385 --> 00:31:21.185
<v Speaker 1>I think let's

00:31:21.825 --> 00:31:23.185
<v Speaker 1>like, the next step in the tutorial was

00:31:23.185 --> 00:31:24.625
<v Speaker 1>just, like, go modify the table. So, like,

00:31:24.625 --> 00:31:26.545
<v Speaker 1>if whatever let's let's let's go modify stuff.

00:31:26.545 --> 00:31:28.225
<v Speaker 0>Oh, yeah. So let's just wait. Okay. So

00:31:28.465 --> 00:31:29.904
<v Speaker 0>Yeah. Everything happens,

00:31:30.065 --> 00:31:31.184
<v Speaker 0>and our

00:31:31.185 --> 00:31:33.185
<v Speaker 0>database CRD and our table most of our

00:31:33.185 --> 00:31:34.065
<v Speaker 0>table's c d

00:31:34.390 --> 00:31:36.070
<v Speaker 0>but we have this database for the custom

00:31:36.070 --> 00:31:36.789
<v Speaker 0>resource.

00:31:36.870 --> 00:31:37.429
<v Speaker 0>So

00:31:37.750 --> 00:31:38.470
<v Speaker 0>let's

00:31:39.190 --> 00:31:41.030
<v Speaker 0>because this is declarative, I can just do

00:31:41.030 --> 00:31:43.509
<v Speaker 0>whatever I want. Right? Within reason. Yeah.

00:31:44.230 --> 00:31:45.429
<v Speaker 0>With Yeah.

00:31:45.830 --> 00:31:49.030
<v Speaker 0>Alright. So I've decided this is going multilingual.

00:31:49.215 --> 00:31:50.734
<v Speaker 0>We'll do English name.

00:31:52.575 --> 00:31:55.375
<v Speaker 0>Now what I'm curious about this specific

00:31:55.375 --> 00:31:56.894
<v Speaker 0>scenario is

00:31:57.135 --> 00:31:59.775
<v Speaker 0>there's nothing really to tie this to being

00:31:59.775 --> 00:32:00.734
<v Speaker 0>formally

00:32:01.135 --> 00:32:03.135
<v Speaker 0>named. So the SchemaHero

00:32:03.559 --> 00:32:05.720
<v Speaker 0>look at the previous schema and understand that

00:32:05.720 --> 00:32:07.559
<v Speaker 0>this is a rename because the type is

00:32:07.559 --> 00:32:09.559
<v Speaker 0>the same? Does it think it's a new

00:32:09.559 --> 00:32:11.639
<v Speaker 0>column and drop the old column?

00:32:11.960 --> 00:32:13.880
<v Speaker 0>Or do I have to add anything to

00:32:13.880 --> 00:32:16.360
<v Speaker 0>tie this to what was the column formerly

00:32:16.360 --> 00:32:17.559
<v Speaker 0>known as name? Like

00:32:18.405 --> 00:32:19.045
<v Speaker 1>Yeah.

00:32:19.605 --> 00:32:21.285
<v Speaker 1>Yeah. You you jump to the the hard

00:32:21.285 --> 00:32:24.085
<v Speaker 1>the hard declarative scheme migration problems here.

00:32:24.485 --> 00:32:27.285
<v Speaker 1>It's it's unfortunately the second right now where

00:32:27.285 --> 00:32:28.805
<v Speaker 1>it's going to see this as the table

00:32:28.805 --> 00:32:30.485
<v Speaker 1>no longer has a column named name, and

00:32:30.485 --> 00:32:32.405
<v Speaker 1>now it has a column named English name.

00:32:32.405 --> 00:32:32.805
<v Speaker 1>So the

00:32:33.500 --> 00:32:36.060
<v Speaker 1>I I I think that SchemaHero is gonna

00:32:36.060 --> 00:32:38.380
<v Speaker 1>calculate this as drop column and add column,

00:32:38.380 --> 00:32:40.140
<v Speaker 1>you're gonna lose that one piece of data.

00:32:40.140 --> 00:32:42.460
<v Speaker 1>There's a issue in the repo to say,

00:32:42.460 --> 00:32:43.179
<v Speaker 1>like, you know,

00:32:43.580 --> 00:32:45.580
<v Speaker 1>prior names are for like, exactly where you

00:32:45.580 --> 00:32:47.615
<v Speaker 1>went with that last option, like like, be

00:32:47.615 --> 00:32:49.535
<v Speaker 1>able to list for for former names and

00:32:49.535 --> 00:32:51.135
<v Speaker 1>then be able to rename columns. But today,

00:32:51.135 --> 00:32:52.575
<v Speaker 1>it's not in the in the product yet.

00:32:52.815 --> 00:32:54.815
<v Speaker 0>Okay. So there it doesn't rename. So we

00:32:54.815 --> 00:32:56.655
<v Speaker 0>would just always leave the column names as

00:32:56.655 --> 00:32:59.215
<v Speaker 0>is really and work with with new columns.

00:32:59.570 --> 00:33:01.650
<v Speaker 0>So Yeah. We we can add columns. We

00:33:01.650 --> 00:33:04.530
<v Speaker 1>can modify column types, constraints, keys, you know,

00:33:04.530 --> 00:33:06.530
<v Speaker 1>things like that for sure, but, like or

00:33:06.530 --> 00:33:07.330
<v Speaker 1>indexes,

00:33:07.890 --> 00:33:09.889
<v Speaker 1>but not not renaming columns yet.

00:33:10.530 --> 00:33:11.330
<v Speaker 0>Okay. Cool.

00:33:12.095 --> 00:33:12.975
<v Speaker 0>Let's

00:33:12.975 --> 00:33:13.615
<v Speaker 0>add

00:33:14.895 --> 00:33:16.575
<v Speaker 0>one more column then.

00:33:17.615 --> 00:33:18.655
<v Speaker 0>Got a preference?

00:33:23.135 --> 00:33:24.815
<v Speaker 1>Let's go. What what what what else does

00:33:24.815 --> 00:33:26.255
<v Speaker 1>airports have? Like,

00:33:28.799 --> 00:33:31.200
<v Speaker 1>number of runways or something like that. Yeah.

00:33:31.200 --> 00:33:32.080
<v Speaker 0>There we go.

00:33:33.840 --> 00:33:36.480
<v Speaker 0>Yeah. Runways up. That'll do. Type.

00:33:36.640 --> 00:33:37.760
<v Speaker 0>And is

00:33:37.760 --> 00:33:40.480
<v Speaker 0>that number n is there any abstractions? Am

00:33:40.480 --> 00:33:42.400
<v Speaker 0>I working directly with the Postgres types here?

00:33:42.925 --> 00:33:45.965
<v Speaker 1>Just Postgres types here. So, like, int, you

00:33:45.965 --> 00:33:48.125
<v Speaker 1>know, big int or yeah. Whatever, like, whatever

00:33:48.125 --> 00:33:50.365
<v Speaker 1>Postgres types are. Okay.

00:33:50.685 --> 00:33:53.165
<v Speaker 0>And can I set, like, a default value

00:33:53.165 --> 00:33:54.365
<v Speaker 0>or anything like this?

00:33:54.685 --> 00:33:56.290
<v Speaker 1>Yeah. You can. We may have to look

00:33:56.290 --> 00:33:57.410
<v Speaker 1>at the docs off the top of my

00:33:57.410 --> 00:33:58.610
<v Speaker 1>head on that one, but, like, you you

00:33:58.610 --> 00:34:00.370
<v Speaker 1>can set a default value. Yeah. We've got

00:34:00.370 --> 00:34:02.050
<v Speaker 0>the reference open here. Right? So if we

00:34:02.050 --> 00:34:02.850
<v Speaker 0>click on

00:34:03.570 --> 00:34:04.450
<v Speaker 0>table

00:34:05.570 --> 00:34:07.330
<v Speaker 0>okay. So we could do foreign keys.

00:34:09.014 --> 00:34:10.614
<v Speaker 0>We've got our indices,

00:34:10.775 --> 00:34:11.574
<v Speaker 0>columns.

00:34:14.454 --> 00:34:16.215
<v Speaker 0>We can set a not null.

00:34:17.094 --> 00:34:18.614
<v Speaker 0>I I don't even know if Postgres does

00:34:18.614 --> 00:34:20.214
<v Speaker 0>have default values, to be fair. I was

00:34:20.214 --> 00:34:21.415
<v Speaker 0>just thinking.

00:34:22.510 --> 00:34:24.510
<v Speaker 1>No. We do that in we use that

00:34:24.510 --> 00:34:26.990
<v Speaker 1>in my SQL quite a bit.

00:34:28.430 --> 00:34:29.310
<v Speaker 1>I'm

00:34:31.470 --> 00:34:33.630
<v Speaker 1>curious if we we

00:34:36.065 --> 00:34:36.864
<v Speaker 1>question.

00:34:37.664 --> 00:34:39.585
<v Speaker 0>Okay. So we got

00:34:41.184 --> 00:34:43.665
<v Speaker 0>let's just do a not null.

00:34:44.625 --> 00:34:45.425
<v Speaker 0>Alright.

00:34:46.304 --> 00:34:47.344
<v Speaker 0>So that's constraints

00:34:47.980 --> 00:34:49.900
<v Speaker 0>not null on the column. That we got

00:34:49.900 --> 00:34:50.460
<v Speaker 0>it here.

00:34:50.780 --> 00:34:51.900
<v Speaker 1>This will be a good one because it's

00:34:51.900 --> 00:34:53.260
<v Speaker 1>gonna show you that it like, you already

00:34:53.260 --> 00:34:54.699
<v Speaker 1>have a piece of data, you already have

00:34:54.699 --> 00:34:56.460
<v Speaker 1>one row in there and, you know, adding

00:34:56.460 --> 00:34:57.820
<v Speaker 1>a new column with a not null and

00:34:57.820 --> 00:34:59.660
<v Speaker 1>not a default, like, post credits is not

00:34:59.660 --> 00:35:01.260
<v Speaker 1>gonna, you know, it's not gonna be happy

00:35:01.260 --> 00:35:03.100
<v Speaker 1>with that that alter table statement. Right?

00:35:03.765 --> 00:35:04.484
<v Speaker 0>Yeah.

00:35:04.724 --> 00:35:06.164
<v Speaker 0>Good point. I hadn't thought of that, but

00:35:06.164 --> 00:35:08.484
<v Speaker 0>that's cool. So let's break it.

00:35:09.125 --> 00:35:10.244
<v Speaker 0>Let's break it.

00:35:10.644 --> 00:35:12.805
<v Speaker 0>Let's do an apply.

00:35:16.244 --> 00:35:18.724
<v Speaker 0>And then if I run SchemaHero, get migrations.

00:35:19.329 --> 00:35:21.809
<v Speaker 0>We've got a new planned one and I

00:35:21.809 --> 00:35:23.250
<v Speaker 0>can describe

00:35:23.650 --> 00:35:24.610
<v Speaker 0>the ID.

00:35:26.849 --> 00:35:28.770
<v Speaker 0>So this was to do author table projects,

00:35:28.770 --> 00:35:31.010
<v Speaker 0>add column runways, integer, not null.

00:35:32.605 --> 00:35:33.965
<v Speaker 0>Kinda what I expect.

00:35:34.445 --> 00:35:36.365
<v Speaker 0>So do we approve this?

00:35:36.845 --> 00:35:38.125
<v Speaker 1>Let's approve it.

00:35:45.965 --> 00:35:48.790
<v Speaker 0>I'm assuming that's never gonna be executed because

00:35:48.790 --> 00:35:49.590
<v Speaker 0>of

00:35:50.790 --> 00:35:53.910
<v Speaker 0>the constraint. Is that what's happening?

00:35:55.750 --> 00:35:56.310
<v Speaker 1>I it

00:35:57.590 --> 00:36:00.045
<v Speaker 1>right. It never successfully executes. And so I

00:36:00.045 --> 00:36:01.405
<v Speaker 1>think if you look at the logs of

00:36:01.405 --> 00:36:03.885
<v Speaker 1>that controller pod again, you'll see the actual

00:36:03.885 --> 00:36:04.845
<v Speaker 1>error here.

00:36:06.285 --> 00:36:07.405
<v Speaker 0>Yeah. Okay.

00:36:08.125 --> 00:36:10.204
<v Speaker 0>Well, it's it's got no values because this

00:36:10.204 --> 00:36:12.765
<v Speaker 0>doesn't exist. So I think we do

00:36:14.640 --> 00:36:15.920
<v Speaker 1>so I was gonna say, think we I

00:36:15.920 --> 00:36:18.240
<v Speaker 1>think we do support the default field here

00:36:18.319 --> 00:36:19.599
<v Speaker 1>as a as a

00:36:20.079 --> 00:36:22.079
<v Speaker 1>string. So, like, if you if you wanna

00:36:22.079 --> 00:36:24.000
<v Speaker 1>take this one step farther, let's actually go

00:36:24.000 --> 00:36:25.599
<v Speaker 1>and and add default

00:36:26.000 --> 00:36:28.000
<v Speaker 1>at the same YAML level as type.

00:36:33.495 --> 00:36:35.575
<v Speaker 0>So the reference doesn't have it, but my

00:36:35.575 --> 00:36:38.135
<v Speaker 0>autocomplete, which is creating against the cluster, does

00:36:38.135 --> 00:36:40.295
<v Speaker 0>pick it up. Interesting.

00:36:40.855 --> 00:36:42.375
<v Speaker 1>I think you have to I think it's

00:36:42.375 --> 00:36:44.135
<v Speaker 1>a string type, and then we'll cast it

00:36:44.135 --> 00:36:45.175
<v Speaker 1>in, like, Zins. Yeah.

00:36:45.819 --> 00:36:47.900
<v Speaker 0>What else we got? Attributes.

00:36:47.900 --> 00:36:50.380
<v Speaker 0>What's that? Oh, okay. We thought it well,

00:36:51.579 --> 00:36:53.180
<v Speaker 0>that would be silly, but, yeah, we could

00:36:54.540 --> 00:36:55.260
<v Speaker 0>cool.

00:36:55.660 --> 00:36:57.660
<v Speaker 0>Let's try that again. So we approved that

00:36:57.660 --> 00:36:58.460
<v Speaker 0>migration,

00:36:58.540 --> 00:37:00.380
<v Speaker 0>and now we're gonna generate a new migration.

00:37:00.665 --> 00:37:02.984
<v Speaker 0>Is that going like, what's the workflow here?

00:37:02.984 --> 00:37:04.505
<v Speaker 0>Do I have to now reject the old

00:37:04.505 --> 00:37:04.985
<v Speaker 0>one

00:37:05.305 --> 00:37:06.905
<v Speaker 0>in order for that to work?

00:37:07.145 --> 00:37:09.145
<v Speaker 1>When it's the same table,

00:37:10.265 --> 00:37:12.744
<v Speaker 1>what SchemaHero is going to do is it

00:37:12.825 --> 00:37:15.170
<v Speaker 1>it's going to it doesn't allow you to

00:37:15.170 --> 00:37:17.650
<v Speaker 1>have these, like, stair stepped migrations that are

00:37:17.650 --> 00:37:19.490
<v Speaker 1>in flight. So it's going to say, like,

00:37:19.490 --> 00:37:21.490
<v Speaker 1>you have a migration for this table. Now

00:37:21.490 --> 00:37:23.170
<v Speaker 1>when you deploy this new YAML, it's gonna

00:37:23.170 --> 00:37:25.329
<v Speaker 1>calculate a new migration for this table, so

00:37:25.329 --> 00:37:27.410
<v Speaker 1>it'll replace the one that's sitting there failing

00:37:27.410 --> 00:37:27.650
<v Speaker 1>right now.

00:37:28.914 --> 00:37:31.234
<v Speaker 0>Will it take away the approved state and

00:37:31.234 --> 00:37:32.435
<v Speaker 0>then it's reapproved?

00:37:32.674 --> 00:37:34.515
<v Speaker 1>It will. Yeah. It'll be just back to,

00:37:34.515 --> 00:37:36.994
<v Speaker 1>like, two migrations, one's unapproved.

00:37:36.994 --> 00:37:39.075
<v Speaker 0>Alright. That sounds good to me. There we

00:37:39.075 --> 00:37:40.595
<v Speaker 0>go. Planned, not approved.

00:37:40.835 --> 00:37:41.954
<v Speaker 0>Oh, no. That's the third one.

00:37:46.480 --> 00:37:47.839
<v Speaker 1>It may be a recent change that we

00:37:47.839 --> 00:37:49.599
<v Speaker 1>keep it there, so you for for for

00:37:49.599 --> 00:37:51.520
<v Speaker 1>for audit purposes. But yeah.

00:37:53.279 --> 00:37:56.079
<v Speaker 0>Alright. So alter table projects at columnar is

00:37:56.079 --> 00:37:57.039
<v Speaker 0>not l d four zero.

00:37:57.865 --> 00:37:59.545
<v Speaker 1>As you can see that this one calculated

00:37:59.545 --> 00:38:01.305
<v Speaker 1>that against the current state of the database,

00:38:01.305 --> 00:38:03.465
<v Speaker 1>not against the current state plus the pending

00:38:03.465 --> 00:38:04.745
<v Speaker 1>migration here. Right?

00:38:05.145 --> 00:38:06.985
<v Speaker 0>Yeah. It wasn't altering

00:38:06.985 --> 00:38:09.065
<v Speaker 0>the column. It was adding it's still adding

00:38:09.065 --> 00:38:09.705
<v Speaker 0>a new column.

00:38:11.660 --> 00:38:14.060
<v Speaker 0>Okay. Let's approve this one then and

00:38:16.060 --> 00:38:17.100
<v Speaker 0>then get

00:38:18.300 --> 00:38:19.820
<v Speaker 0>executed and approved.

00:38:19.980 --> 00:38:20.700
<v Speaker 0>Sweet.

00:38:21.900 --> 00:38:23.900
<v Speaker 0>So if we go to beekeeper

00:38:24.795 --> 00:38:26.714
<v Speaker 0>and we run this query, yeah, we get

00:38:26.714 --> 00:38:28.875
<v Speaker 0>runway zero. Cool. That worked.

00:38:29.355 --> 00:38:30.075
<v Speaker 1>Hey.

00:38:32.714 --> 00:38:34.315
<v Speaker 0>It's good when things work. Right?

00:38:34.795 --> 00:38:36.075
<v Speaker 0>Yes. Let's refresh.

00:38:38.250 --> 00:38:38.890
<v Speaker 0>Okay.

00:38:39.850 --> 00:38:41.370
<v Speaker 0>I'm gonna just keep trying to break stuff.

00:38:41.370 --> 00:38:43.930
<v Speaker 0>Are are you comfortable with that? Let's let's

00:38:43.930 --> 00:38:47.210
<v Speaker 1>do it. Alright. I'm gonna modify the schema

00:38:47.210 --> 00:38:48.010
<v Speaker 0>myself.

00:38:48.490 --> 00:38:49.850
<v Speaker 0>So if I can work out how to

00:38:49.850 --> 00:38:52.184
<v Speaker 0>do that. In fact, I'm I'm gonna cheat.

00:38:52.184 --> 00:38:53.545
<v Speaker 0>Where was the alter statement?

00:38:55.785 --> 00:38:57.305
<v Speaker 0>So I don't know how to add columns

00:38:57.305 --> 00:38:59.464
<v Speaker 0>with beekeeper, but we do have this query

00:38:59.464 --> 00:39:02.025
<v Speaker 0>window, so I'm just gonna use it.

00:39:02.345 --> 00:39:04.904
<v Speaker 0>So let's add a column called

00:39:06.450 --> 00:39:07.170
<v Speaker 0>never,

00:39:09.330 --> 00:39:10.210
<v Speaker 0>like so.

00:39:14.370 --> 00:39:15.010
<v Speaker 0>Now

00:39:15.250 --> 00:39:17.250
<v Speaker 0>in my head, what I expect to happen

00:39:17.250 --> 00:39:19.970
<v Speaker 0>here is for SchemaHero to detect this

00:39:20.705 --> 00:39:23.345
<v Speaker 0>and per generate a new migration to remove

00:39:23.345 --> 00:39:23.825
<v Speaker 0>it.

00:39:24.625 --> 00:39:27.265
<v Speaker 0>Is that what you think is gonna happen?

00:39:29.825 --> 00:39:32.465
<v Speaker 1>Very, very, very close. That's what should happen.

00:39:32.785 --> 00:39:34.465
<v Speaker 1>The only thing you have to do today

00:39:34.465 --> 00:39:34.945
<v Speaker 1>is

00:39:36.220 --> 00:39:37.660
<v Speaker 1>you like, SchemaHero

00:39:37.660 --> 00:39:39.660
<v Speaker 1>has that table as in sync, we don't

00:39:39.660 --> 00:39:41.500
<v Speaker 1>continuously reconcile and put a load on the

00:39:41.500 --> 00:39:43.980
<v Speaker 1>database querying it. Like, there's a a thing

00:39:43.980 --> 00:39:45.020
<v Speaker 1>that we we wanna figure out how to,

00:39:45.020 --> 00:39:47.020
<v Speaker 1>like, do that drift detection in large databases

00:39:47.020 --> 00:39:49.835
<v Speaker 1>without, like, overloading the database, hitting the schema

00:39:49.835 --> 00:39:50.795
<v Speaker 1>up constantly.

00:39:51.595 --> 00:39:54.555
<v Speaker 1>So today, there's you could either deploy any

00:39:54.555 --> 00:39:56.155
<v Speaker 1>other change to the table, or if you

00:39:56.155 --> 00:39:59.595
<v Speaker 1>delete, like, delete table dash all

00:39:59.930 --> 00:40:02.330
<v Speaker 1>then just redeploy that table, exactly what you

00:40:02.330 --> 00:40:04.010
<v Speaker 1>said will happen. It just there's no trigger

00:40:04.010 --> 00:40:05.290
<v Speaker 1>in the reconcile loop to tell it to

00:40:05.290 --> 00:40:06.810
<v Speaker 1>go recalculate that right now.

00:40:08.010 --> 00:40:08.730
<v Speaker 1>Okay.

00:40:12.250 --> 00:40:14.410
<v Speaker 0>So our best way forward would be just

00:40:14.410 --> 00:40:15.370
<v Speaker 0>to

00:40:19.075 --> 00:40:20.035
<v Speaker 0>modify

00:40:20.275 --> 00:40:21.795
<v Speaker 0>as soon as all airports have at least

00:40:21.795 --> 00:40:22.675
<v Speaker 0>one runway.

00:40:23.155 --> 00:40:25.635
<v Speaker 1>Sure. It's not an airport otherwise. Or yeah.

00:40:28.915 --> 00:40:29.395
<v Speaker 0>Apply.

00:40:30.440 --> 00:40:32.120
<v Speaker 0>Okay. So, yeah, I I wanna make sure

00:40:32.120 --> 00:40:35.480
<v Speaker 0>I understand. So SchemaHero does the reconciliation,

00:40:35.480 --> 00:40:37.400
<v Speaker 0>but if it believes your database doesn't sync,

00:40:37.400 --> 00:40:39.240
<v Speaker 0>it doesn't wanna add any the burden of

00:40:39.240 --> 00:40:41.640
<v Speaker 0>extra load querying on that. So

00:40:42.520 --> 00:40:42.760
<v Speaker 0>Yeah.

00:40:44.875 --> 00:40:46.315
<v Speaker 1>One thing that we do, and we can

00:40:46.315 --> 00:40:47.515
<v Speaker 1>dig into this a little bit later, is

00:40:47.515 --> 00:40:48.315
<v Speaker 1>we

00:40:48.875 --> 00:40:52.635
<v Speaker 1>use GitOps inside our production environment that's constantly

00:40:52.635 --> 00:40:55.515
<v Speaker 1>sinking YAML into the cluster. So when we

00:40:55.515 --> 00:40:58.100
<v Speaker 1>run into this problem, we'll just delete

00:40:58.100 --> 00:41:00.900
<v Speaker 1>a table YAML. SchemaHero, by the way, just

00:41:00.900 --> 00:41:01.460
<v Speaker 1>like it won't

00:41:02.740 --> 00:41:05.540
<v Speaker 1>it's designed to be relatively safe. If you

00:41:05.540 --> 00:41:07.300
<v Speaker 1>delete this table YAML, it's not going to

00:41:07.300 --> 00:41:09.620
<v Speaker 1>go drop the table from the database. It's

00:41:09.620 --> 00:41:10.900
<v Speaker 1>going to leave it there and think that's

00:41:10.900 --> 00:41:14.135
<v Speaker 1>now an unmanaged table. There's a is deleted

00:41:14.135 --> 00:41:16.295
<v Speaker 1>field that you can set in the YAML,

00:41:16.295 --> 00:41:18.295
<v Speaker 1>which will actually tell SchemaHero, I want you

00:41:18.295 --> 00:41:20.455
<v Speaker 1>to actively go delete this table. So one

00:41:20.455 --> 00:41:21.655
<v Speaker 1>trick that we do to kind of poke

00:41:21.655 --> 00:41:23.175
<v Speaker 1>SchemaHero when we need to is just delete

00:41:23.175 --> 00:41:25.175
<v Speaker 1>the table YAML, let Flux redeploy it, and

00:41:25.175 --> 00:41:26.215
<v Speaker 1>then it recalculates

00:41:26.215 --> 00:41:26.375
<v Speaker 1>it.

00:41:27.320 --> 00:41:28.280
<v Speaker 0>Okay.

00:41:28.280 --> 00:41:28.840
<v Speaker 0>Cool.

00:41:30.600 --> 00:41:31.400
<v Speaker 0>Let's

00:41:32.120 --> 00:41:33.240
<v Speaker 0>approve

00:41:33.320 --> 00:41:34.360
<v Speaker 0>this one

00:41:38.120 --> 00:41:39.080
<v Speaker 0>and

00:41:40.600 --> 00:41:41.880
<v Speaker 0>refresh here impatiently.

00:41:43.095 --> 00:41:45.015
<v Speaker 1>Let's do it. Don't have don't have to

00:41:45.015 --> 00:41:47.015
<v Speaker 0>be very impatient. Okay. Perfect. Yeah.

00:41:47.655 --> 00:41:49.655
<v Speaker 0>That that it's working. It's doing everything that

00:41:49.655 --> 00:41:51.015
<v Speaker 0>I kinda want it to do. I'm pretty

00:41:51.015 --> 00:41:51.975
<v Speaker 0>happy with that.

00:41:53.655 --> 00:41:55.175
<v Speaker 0>Now I'm gonna do the thing that you

00:41:55.175 --> 00:41:55.495
<v Speaker 0>said,

00:41:57.700 --> 00:41:58.580
<v Speaker 0>which is

00:41:59.780 --> 00:42:01.060
<v Speaker 0>is it here?

00:42:03.940 --> 00:42:04.660
<v Speaker 1>Yeah.

00:42:05.540 --> 00:42:08.020
<v Speaker 0>And that's just a billion. So as this

00:42:08.020 --> 00:42:10.820
<v Speaker 0>manifest is deleted, it will delete the table?

00:42:11.744 --> 00:42:13.505
<v Speaker 1>Exactly. Yeah. So you can probably get rid

00:42:13.664 --> 00:42:15.184
<v Speaker 1>I mean, you can obviously, you can leave

00:42:15.184 --> 00:42:16.464
<v Speaker 1>the rest of the data there too, but

00:42:16.464 --> 00:42:18.065
<v Speaker 1>it's not gonna be that important.

00:42:22.545 --> 00:42:24.599
<v Speaker 0>Alright. Okay. I understand you. So when I

00:42:24.599 --> 00:42:26.599
<v Speaker 0>apply this, it will delete the table. It's

00:42:26.599 --> 00:42:28.920
<v Speaker 0>not an indicator that if the manifest disappears

00:42:28.920 --> 00:42:31.079
<v Speaker 0>to delete. Okay. That makes sense. Yeah. Exactly.

00:42:31.079 --> 00:42:33.400
<v Speaker 1>Which we we we errored on a, like,

00:42:33.400 --> 00:42:35.640
<v Speaker 1>really, like, you know, side of caution that,

00:42:35.640 --> 00:42:37.160
<v Speaker 1>like, you know, you you need to

00:42:37.704 --> 00:42:39.785
<v Speaker 1>you need to say very declaratively,

00:42:39.785 --> 00:42:41.865
<v Speaker 1>I want this table deleted. Not like, the

00:42:41.865 --> 00:42:43.704
<v Speaker 1>absence of a YAML means we should delete

00:42:43.704 --> 00:42:45.545
<v Speaker 1>this table. That felt a little too risky

00:42:45.545 --> 00:42:46.744
<v Speaker 1>for what we wanted to do with her

00:42:46.825 --> 00:42:47.625
<v Speaker 1>an early project.

00:42:50.529 --> 00:42:52.369
<v Speaker 0>Yeah. Working with databases, you've got you've I

00:42:52.369 --> 00:42:53.569
<v Speaker 0>guess you've always got the error in the

00:42:53.569 --> 00:42:55.009
<v Speaker 0>state of caution. Right? The last thing you

00:42:55.009 --> 00:42:56.770
<v Speaker 0>want is people complaining that

00:42:57.250 --> 00:42:58.609
<v Speaker 0>things disappeared.

00:42:59.890 --> 00:43:00.769
<v Speaker 0>Let's try.

00:43:02.964 --> 00:43:05.125
<v Speaker 0>I'm going have to approve the migration route.

00:43:05.525 --> 00:43:06.245
<v Speaker 1>Yeah.

00:43:08.244 --> 00:43:09.525
<v Speaker 1>So there is an

00:43:12.405 --> 00:43:14.565
<v Speaker 1>immediate deploy flag on the database that you

00:43:14.565 --> 00:43:14.964
<v Speaker 1>can set.

00:43:15.590 --> 00:43:17.510
<v Speaker 1>And then when you when that when you

00:43:17.510 --> 00:43:19.750
<v Speaker 1>have that set, SchemaHero doesn't wait for you

00:43:19.750 --> 00:43:21.590
<v Speaker 1>to immediately for you to approve them. It

00:43:21.590 --> 00:43:23.750
<v Speaker 1>just automatically moves them into the the approved

00:43:23.750 --> 00:43:24.390
<v Speaker 1>phase.

00:43:24.790 --> 00:43:27.110
<v Speaker 0>Okay. Let's approve this one first, and then

00:43:27.110 --> 00:43:28.150
<v Speaker 0>let's try that.

00:43:28.630 --> 00:43:28.950
<v Speaker 0>Right.

00:43:31.485 --> 00:43:32.205
<v Speaker 0>So

00:43:32.445 --> 00:43:34.285
<v Speaker 0>I've lost the number. There we go.

00:43:36.925 --> 00:43:37.885
<v Speaker 0>Beekeeper.

00:43:41.245 --> 00:43:43.005
<v Speaker 0>Alright. Definitely gone. Okay.

00:43:43.670 --> 00:43:46.230
<v Speaker 0>I've now realized that that was a terrible,

00:43:46.230 --> 00:43:48.070
<v Speaker 0>terrible mistake. Okay.

00:43:49.830 --> 00:43:50.390
<v Speaker 0>So

00:43:51.110 --> 00:43:53.590
<v Speaker 0>where do I set the we don't need

00:43:53.590 --> 00:43:55.910
<v Speaker 0>approval thing? Is that on the database or

00:43:55.910 --> 00:43:56.550
<v Speaker 0>on the table?

00:43:57.635 --> 00:43:58.995
<v Speaker 1>It's on the database.

00:43:59.395 --> 00:44:01.474
<v Speaker 1>I believe it's right under your autocomplete will

00:44:01.474 --> 00:44:04.275
<v Speaker 1>help you. I believe it's right underneath Postgres.

00:44:05.234 --> 00:44:06.995
<v Speaker 1>Should be immediate deploy.

00:44:07.474 --> 00:44:08.835
<v Speaker 1>No. Maybe up under connection.

00:44:16.099 --> 00:44:17.380
<v Speaker 0>Or we may need to look at docs.

00:44:17.380 --> 00:44:17.780
<v Speaker 1>Oh,

00:44:20.980 --> 00:44:23.380
<v Speaker 0>database. Right? So let's pop over here.

00:44:24.020 --> 00:44:25.859
<v Speaker 0>Oh, yeah. Media us on the spec. Okay.

00:44:27.945 --> 00:44:30.265
<v Speaker 0>Yeah. This is what's the enable shell command?

00:44:31.305 --> 00:44:33.625
<v Speaker 1>So if, you know, you have a database

00:44:33.785 --> 00:44:36.105
<v Speaker 1>SchemaHero can talk to your database, obviously.

00:44:36.665 --> 00:44:37.465
<v Speaker 1>Interestingly,

00:44:37.465 --> 00:44:39.225
<v Speaker 1>to your point, you have this port forward

00:44:39.225 --> 00:44:39.785
<v Speaker 1>setup

00:44:40.560 --> 00:44:42.720
<v Speaker 1>in order to connect through

00:44:42.880 --> 00:44:44.320
<v Speaker 1>to the cluster IP

00:44:45.040 --> 00:44:45.840
<v Speaker 1>service.

00:44:45.920 --> 00:44:48.240
<v Speaker 1>The shell command basically will allow you to

00:44:49.440 --> 00:44:52.775
<v Speaker 1>kubectl SchemaHero shell database name, and that'll create

00:44:52.775 --> 00:44:55.335
<v Speaker 1>a it'll create a pod running PostgresQL

00:44:55.335 --> 00:44:57.095
<v Speaker 1>and exec you into that to connect to

00:44:57.095 --> 00:44:59.015
<v Speaker 1>the local database so that you can actually

00:44:59.095 --> 00:45:00.455
<v Speaker 1>get into a database that you don't have

00:45:00.455 --> 00:45:02.615
<v Speaker 1>a direct route to. Oh, nice.

00:45:03.095 --> 00:45:03.895
<v Speaker 0>I'm

00:45:03.895 --> 00:45:05.015
<v Speaker 0>gonna try that too.

00:45:05.255 --> 00:45:05.735
<v Speaker 0>Alright.

00:45:06.450 --> 00:45:07.170
<v Speaker 0>Alright.

00:45:07.250 --> 00:45:09.330
<v Speaker 0>On spec. I don't know why we're not

00:45:09.330 --> 00:45:11.010
<v Speaker 0>getting the autocomplete.

00:45:11.410 --> 00:45:12.850
<v Speaker 0>I don't know. I

00:45:13.410 --> 00:45:15.090
<v Speaker 1>think we were we never went high enough

00:45:15.090 --> 00:45:15.730
<v Speaker 1>on it.

00:45:16.849 --> 00:45:18.609
<v Speaker 0>I I'm I'm sure I did. I'm gonna

00:45:18.609 --> 00:45:21.650
<v Speaker 0>rewatch this later and be like

00:45:24.605 --> 00:45:27.085
<v Speaker 0>I'm I'm determined to prove Versus code wrong.

00:45:28.205 --> 00:45:29.085
<v Speaker 0>Okay.

00:45:30.685 --> 00:45:32.365
<v Speaker 0>I'm sorry Versus code. It was me.

00:45:33.339 --> 00:45:34.780
<v Speaker 0>Okay. So we're this is gonna get us

00:45:34.780 --> 00:45:36.780
<v Speaker 0>our shell command under immediate deploy so we

00:45:36.780 --> 00:45:38.300
<v Speaker 0>can start adding columns, and we should just

00:45:38.300 --> 00:45:40.780
<v Speaker 0>see that instance. So I'm gonna reapply.

00:45:42.060 --> 00:45:43.100
<v Speaker 0>Do I need to

00:45:43.500 --> 00:45:45.579
<v Speaker 0>restart the controller for that change?

00:45:46.235 --> 00:45:47.595
<v Speaker 1>It's a great question.

00:45:47.995 --> 00:45:50.155
<v Speaker 1>I'm I'm wondering that myself right now. So

00:45:50.155 --> 00:45:51.995
<v Speaker 1>let's see if it deletes if it does

00:45:51.995 --> 00:45:52.955
<v Speaker 1>it by itself.

00:45:53.355 --> 00:45:54.715
<v Speaker 1>It should do it by itself. The right

00:45:54.715 --> 00:45:56.315
<v Speaker 1>the right behavior of SchemaHero would be to

00:45:56.315 --> 00:45:58.155
<v Speaker 1>do it by itself. Yeah. There we go.

00:45:58.395 --> 00:46:00.875
<v Speaker 1>Oh, it did. Great. Yes. We have the

00:46:00.875 --> 00:46:01.115
<v Speaker 0>thing.

00:46:01.830 --> 00:46:04.390
<v Speaker 1>Okay. So When you look at migrations, you'll

00:46:04.390 --> 00:46:06.150
<v Speaker 1>still see, by the way, that, like, it

00:46:06.150 --> 00:46:07.910
<v Speaker 1>still goes through the same phase.

00:46:08.550 --> 00:46:10.550
<v Speaker 1>You know? It's just that it auto approves

00:46:10.550 --> 00:46:12.230
<v Speaker 1>it for you because we we

00:46:12.870 --> 00:46:14.950
<v Speaker 1>you still have an audit log of exactly

00:46:14.950 --> 00:46:16.950
<v Speaker 1>when it was approved and and and executed.

00:46:18.414 --> 00:46:20.335
<v Speaker 0>Alright. Well, let's add

00:46:26.815 --> 00:46:28.655
<v Speaker 0>funny joke. I don't know.

00:46:30.734 --> 00:46:31.535
<v Speaker 0>Too much pressure,

00:46:32.130 --> 00:46:33.170
<v Speaker 0>Varcher.

00:46:34.210 --> 00:46:34.849
<v Speaker 0>Okay.

00:46:35.089 --> 00:46:35.730
<v Speaker 0>So

00:46:37.890 --> 00:46:38.609
<v Speaker 0>play

00:46:38.930 --> 00:46:39.970
<v Speaker 0>beekeeper.

00:46:41.569 --> 00:46:43.410
<v Speaker 0>Funny joke. Okay.

00:46:43.890 --> 00:46:46.770
<v Speaker 0>That's pretty cool to see that instantaneous

00:46:47.015 --> 00:46:48.455
<v Speaker 0>kind of reconciliation

00:46:48.455 --> 00:46:50.455
<v Speaker 0>when I when I make the changes here.

00:46:50.775 --> 00:46:51.415
<v Speaker 0>Yeah.

00:46:52.615 --> 00:46:55.335
<v Speaker 0>I guess that's that's confidence mode. Right?

00:46:55.815 --> 00:46:58.455
<v Speaker 0>Exactly. We you know you know, completely

00:46:58.455 --> 00:46:59.335
<v Speaker 1>transparently,

00:46:59.335 --> 00:47:01.015
<v Speaker 1>we we have that enabled

00:47:01.550 --> 00:47:04.830
<v Speaker 1>for pre prod environments, for QA test environments,

00:47:04.830 --> 00:47:06.990
<v Speaker 1>and dev environments, but we actually still don't

00:47:06.990 --> 00:47:09.470
<v Speaker 1>do that for our our own production environment.

00:47:09.470 --> 00:47:11.150
<v Speaker 1>We still have a thing where we're like,

00:47:11.230 --> 00:47:13.790
<v Speaker 1>some you know, a human should not write

00:47:13.995 --> 00:47:15.915
<v Speaker 1>the SQL statement, but, like, look at it

00:47:15.915 --> 00:47:17.515
<v Speaker 1>and decide it's okay to run.

00:47:17.835 --> 00:47:19.755
<v Speaker 0>Is this something where there's, you know or

00:47:19.755 --> 00:47:21.355
<v Speaker 0>do you see tooling or if that's eventually

00:47:21.355 --> 00:47:23.915
<v Speaker 0>coming where when the migration gets created, you

00:47:23.915 --> 00:47:25.915
<v Speaker 0>know, it's posted to Slack, if someone can

00:47:25.915 --> 00:47:27.275
<v Speaker 0>just approve it. I don't know if I'd

00:47:27.275 --> 00:47:30.069
<v Speaker 0>want Slack hiccups quite there, but at least

00:47:30.069 --> 00:47:32.950
<v Speaker 0>a notification to say this this pending migration,

00:47:32.950 --> 00:47:34.470
<v Speaker 0>this is what it looks like. And

00:47:35.030 --> 00:47:36.950
<v Speaker 0>is that tooling that you're using yourselves, or

00:47:36.950 --> 00:47:38.710
<v Speaker 0>is it very much just keep control all

00:47:38.710 --> 00:47:39.350
<v Speaker 0>the time?

00:47:40.150 --> 00:47:40.790
<v Speaker 1>Yeah.

00:47:41.430 --> 00:47:43.670
<v Speaker 1>Right now, we're still doing keep control all

00:47:43.670 --> 00:47:46.175
<v Speaker 1>the time. Like that, like, finding that right

00:47:46.175 --> 00:47:46.975
<v Speaker 1>workflow.

00:47:46.975 --> 00:47:48.255
<v Speaker 1>So it's like, is it is it chat

00:47:48.255 --> 00:47:49.855
<v Speaker 1>ops? Is it, like, in Slack? Is it,

00:47:49.855 --> 00:47:51.135
<v Speaker 1>like, you know, how do you do it?

00:47:51.135 --> 00:47:53.215
<v Speaker 1>It's it's a it's a great question, actually.

00:47:53.215 --> 00:47:54.015
<v Speaker 1>Like, we're

00:47:55.135 --> 00:47:57.055
<v Speaker 1>like, I don't think, like, running kubectl approved

00:47:57.055 --> 00:47:59.440
<v Speaker 1>migration is the right path, honestly. Like, it's

00:47:59.440 --> 00:48:01.120
<v Speaker 1>like it gives you the workflow and the

00:48:01.120 --> 00:48:02.640
<v Speaker 1>check that you need in place, but, like,

00:48:02.640 --> 00:48:04.960
<v Speaker 1>they're honestly, like like, it's like

00:48:05.440 --> 00:48:07.440
<v Speaker 1>you know, working with large enterprises, they have,

00:48:07.440 --> 00:48:09.280
<v Speaker 1>like, change management systems and, like, you should

00:48:09.280 --> 00:48:12.265
<v Speaker 1>have, like, an audited event of, like, who

00:48:12.265 --> 00:48:13.705
<v Speaker 1>approved that thing

00:48:14.025 --> 00:48:16.265
<v Speaker 1>into large migrations be you know, because, like,

00:48:16.265 --> 00:48:17.945
<v Speaker 1>it can have negative effects, and you just

00:48:17.945 --> 00:48:19.305
<v Speaker 1>wanna know who's who's looking you wanna make

00:48:19.305 --> 00:48:20.825
<v Speaker 1>sure some human is looking at them really

00:48:20.825 --> 00:48:21.465
<v Speaker 1>at the end of the day.

00:48:24.200 --> 00:48:24.920
<v Speaker 0>Okay.

00:48:25.559 --> 00:48:27.400
<v Speaker 0>Let's do one more thing, and then we'll

00:48:27.400 --> 00:48:28.680
<v Speaker 0>move over to your

00:48:28.839 --> 00:48:32.040
<v Speaker 0>your demo. Does that sound good? Sounds great.

00:48:32.680 --> 00:48:34.680
<v Speaker 0>I'm gonna do a delete

00:48:35.960 --> 00:48:39.400
<v Speaker 0>on this because I wanna do it without

00:48:38.934 --> 00:48:40.215
<v Speaker 0>the operator.

00:48:41.414 --> 00:48:42.135
<v Speaker 0>Alright.

00:48:42.855 --> 00:48:43.494
<v Speaker 0>So

00:48:44.855 --> 00:48:47.415
<v Speaker 0>oh, it's in a namespace. Right? So SchemaHero.

00:48:47.734 --> 00:48:50.214
<v Speaker 0>Yeah. I'm assuming this is the deployment. No.

00:48:50.214 --> 00:48:51.759
<v Speaker 0>No. It was s s t s. Right?

00:48:51.759 --> 00:48:53.040
<v Speaker 0>So it was named that way.

00:48:54.640 --> 00:48:56.079
<v Speaker 0>S t s SchemaHero.

00:48:56.079 --> 00:48:57.839
<v Speaker 0>So we now have no more operator or

00:48:57.839 --> 00:49:00.880
<v Speaker 0>controller running for that. And you said Right.

00:49:00.880 --> 00:49:02.559
<v Speaker 0>So I I I wanna think about the

00:49:02.559 --> 00:49:03.359
<v Speaker 0>local dev thing.

00:49:04.265 --> 00:49:06.345
<v Speaker 0>When I meet teams and people, they're not

00:49:06.345 --> 00:49:08.265
<v Speaker 0>always deploying to Kubernetes.

00:49:08.345 --> 00:49:09.945
<v Speaker 0>They are for production, but when it comes

00:49:09.945 --> 00:49:11.385
<v Speaker 0>to dev, they're still using

00:49:11.625 --> 00:49:13.785
<v Speaker 0>local services or Docker Compose.

00:49:13.785 --> 00:49:15.785
<v Speaker 0>It's one of tooling that. So I'm curious

00:49:16.370 --> 00:49:18.290
<v Speaker 0>if I have my application. I've got this

00:49:18.290 --> 00:49:20.370
<v Speaker 0>op directory with the SchemaHero.

00:49:20.370 --> 00:49:22.850
<v Speaker 0>I've got the the exact same YAML here

00:49:22.850 --> 00:49:25.650
<v Speaker 0>that I've shipped to prod. What's my process

00:49:25.650 --> 00:49:27.650
<v Speaker 0>to get that working

00:49:28.690 --> 00:49:30.370
<v Speaker 0>with just the SchemaHero command?

00:49:31.595 --> 00:49:32.235
<v Speaker 0>Yeah.

00:49:33.035 --> 00:49:33.595
<v Speaker 1>So

00:49:35.434 --> 00:49:37.355
<v Speaker 1>there's, like, one page in the docs that

00:49:37.355 --> 00:49:38.075
<v Speaker 1>show it.

00:49:38.635 --> 00:49:40.234
<v Speaker 1>Like, we'll we'll let's go through it and

00:49:40.234 --> 00:49:41.915
<v Speaker 1>we'll figure it out here. I don't like,

00:49:41.915 --> 00:49:44.075
<v Speaker 1>the the the CLI command syntax exactly off

00:49:44.075 --> 00:49:45.434
<v Speaker 1>the top of my head. Under documentation,

00:49:46.500 --> 00:49:47.620
<v Speaker 1>under advanced,

00:49:47.620 --> 00:49:50.180
<v Speaker 1>there's a page called operatorless mode is what

00:49:50.180 --> 00:49:51.220
<v Speaker 1>we call it right now.

00:49:53.860 --> 00:49:54.500
<v Speaker 1>And

00:49:54.980 --> 00:49:57.140
<v Speaker 1>this starts to show you how you can

00:49:59.205 --> 00:49:59.925
<v Speaker 1>like,

00:50:00.005 --> 00:50:01.445
<v Speaker 1>this shows it running as a job in

00:50:01.445 --> 00:50:03.685
<v Speaker 1>Kubernetes, which is probably, you know, like, looking

00:50:03.685 --> 00:50:05.285
<v Speaker 1>at this now thinking that's probably not the

00:50:05.285 --> 00:50:07.045
<v Speaker 1>right syntax to give you, like, the operator

00:50:07.045 --> 00:50:08.805
<v Speaker 1>list mode in because we we designed this

00:50:08.805 --> 00:50:10.005
<v Speaker 1>really being like, I wanna run this in

00:50:10.005 --> 00:50:12.245
<v Speaker 1>Kubernetes, but I don't have cluster admin permissions.

00:50:12.485 --> 00:50:13.845
<v Speaker 1>But you can actually see that it's running,

00:50:14.270 --> 00:50:15.630
<v Speaker 1>you know, the job. You know, we may

00:50:15.630 --> 00:50:16.990
<v Speaker 1>have to, like, reverse engineer this a little

00:50:16.990 --> 00:50:19.390
<v Speaker 1>bit to say, like, okay. It's running SchemaHero

00:50:19.390 --> 00:50:20.190
<v Speaker 1>plan,

00:50:20.190 --> 00:50:21.550
<v Speaker 1>and then it's passing in a couple of

00:50:21.550 --> 00:50:23.790
<v Speaker 1>args to it. You know? Yeah. I'm sure

00:50:23.790 --> 00:50:25.710
<v Speaker 0>we could work with that. So Yeah.

00:50:26.109 --> 00:50:29.615
<v Speaker 0>K. Email. Let's

00:50:29.615 --> 00:50:31.775
<v Speaker 0>try that plan first.

00:50:37.935 --> 00:50:41.215
<v Speaker 0>This will take the YAML as

00:50:40.240 --> 00:50:43.200
<v Speaker 0>yeah, spec file and spec type. Right? So

00:50:44.400 --> 00:50:45.840
<v Speaker 0>let's try spec file.

00:50:46.560 --> 00:50:48.320
<v Speaker 1>And you don't have to deploy a database

00:50:48.320 --> 00:50:49.440
<v Speaker 1>type here. Like

00:50:51.360 --> 00:50:53.040
<v Speaker 1>because what you can do is just pass

00:50:53.040 --> 00:50:53.520
<v Speaker 1>in

00:50:54.080 --> 00:50:55.600
<v Speaker 1>driver

00:50:55.015 --> 00:50:56.695
<v Speaker 1>driver and URI

00:50:56.695 --> 00:50:58.295
<v Speaker 1>right on the CLI. So you can pass

00:50:58.295 --> 00:50:59.975
<v Speaker 1>in driver equals Postgres

00:51:00.215 --> 00:51:02.375
<v Speaker 1>and then URI equals that connection string. And

00:51:02.375 --> 00:51:04.055
<v Speaker 1>then just the plan to the YAML, and

00:51:04.055 --> 00:51:05.575
<v Speaker 1>it'll it should it should plan it for

00:51:05.575 --> 00:51:07.655
<v Speaker 1>you. Oh, so it's not parsing the custom

00:51:07.655 --> 00:51:09.335
<v Speaker 0>resources on the YAML to pull out the

00:51:09.335 --> 00:51:12.110
<v Speaker 0>database information and the table. It's

00:51:12.750 --> 00:51:14.510
<v Speaker 1>Yeah. It parses the custom resource in the

00:51:14.510 --> 00:51:16.830
<v Speaker 1>table, but you you basically you you deconstruct

00:51:16.830 --> 00:51:18.910
<v Speaker 1>the database part and give it as CLI

00:51:18.910 --> 00:51:20.110
<v Speaker 1>flags at this point.

00:51:20.750 --> 00:51:21.390
<v Speaker 0>Alright.

00:51:24.505 --> 00:51:25.785
<v Speaker 0>At URA.

00:51:27.545 --> 00:51:29.065
<v Speaker 0>Let's just copy that.

00:51:37.065 --> 00:51:38.745
<v Speaker 0>Back

00:51:39.590 --> 00:51:40.230
<v Speaker 0>fail.

00:51:41.110 --> 00:51:41.830
<v Speaker 1>Yeah.

00:51:47.030 --> 00:51:49.190
<v Speaker 1>So a couple things I think are are

00:51:49.190 --> 00:51:51.750
<v Speaker 1>causing the problem. One is, like, your machine,

00:51:52.795 --> 00:51:54.635
<v Speaker 1>don't think can access like, local host five

00:51:54.635 --> 00:51:55.835
<v Speaker 1>four three two is gonna be a problem

00:51:55.835 --> 00:51:57.515
<v Speaker 1>here. Oh, no. Do you still have the

00:51:57.515 --> 00:51:59.195
<v Speaker 1>port forward open so it actually could probably

00:51:59.195 --> 00:52:01.115
<v Speaker 1>do that? Yep. They're still running because that's

00:52:01.115 --> 00:52:04.955
<v Speaker 0>what Beekeeper's using right now. Let's

00:52:04.955 --> 00:52:07.100
<v Speaker 1>drop the table, like, because it might just

00:52:07.100 --> 00:52:08.780
<v Speaker 1>be that there's no differences detected or something

00:52:08.780 --> 00:52:10.060
<v Speaker 1>like that. Oh, yeah. I had to delete

00:52:10.060 --> 00:52:11.500
<v Speaker 0>the alright. Okay.

00:52:15.420 --> 00:52:16.140
<v Speaker 0>Drop

00:52:16.540 --> 00:52:17.020
<v Speaker 0>table.

00:52:22.335 --> 00:52:22.975
<v Speaker 0>Done.

00:52:27.775 --> 00:52:29.535
<v Speaker 1>There's like a out

00:52:29.935 --> 00:52:32.175
<v Speaker 1>pram. I maybe

00:52:38.310 --> 00:52:40.230
<v Speaker 0>I should've written docs, shouldn't I?

00:52:40.550 --> 00:52:41.750
<v Speaker 0>Yeah. That's just

00:52:44.470 --> 00:52:47.270
<v Speaker 0>Alright. So alright. It takes environment variables. Okay.

00:52:47.270 --> 00:52:47.910
<v Speaker 0>So

00:52:49.355 --> 00:52:51.755
<v Speaker 0>this seems to be potentially a directory,

00:52:51.755 --> 00:52:53.994
<v Speaker 0>and there's a schema here which will create

00:52:54.075 --> 00:52:55.355
<v Speaker 0>so I was trying I was gonna create

00:52:55.355 --> 00:52:57.515
<v Speaker 0>migration. It was okay. So

00:52:59.115 --> 00:53:00.315
<v Speaker 0>I think we're close.

00:53:01.220 --> 00:53:01.940
<v Speaker 0>Yeah.

00:53:03.619 --> 00:53:04.900
<v Speaker 0>What am I missing?

00:53:09.700 --> 00:53:11.700
<v Speaker 0>So I think there's maybe looking for a

00:53:11.700 --> 00:53:12.500
<v Speaker 0>directory.

00:53:13.059 --> 00:53:14.740
<v Speaker 0>So I'm gonna do spec.

00:53:14.740 --> 00:53:16.099
<v Speaker 0>I'll equals dot

00:53:18.175 --> 00:53:20.015
<v Speaker 0>maybe out migrations.

00:53:24.175 --> 00:53:25.295
<v Speaker 0>No. Not quite.

00:53:26.974 --> 00:53:28.974
<v Speaker 0>I still got my database file. Yeah. Okay.

00:53:30.270 --> 00:53:32.430
<v Speaker 0>We're close. Oh, you know, let's let's

00:53:32.750 --> 00:53:33.310
<v Speaker 1>like,

00:53:33.630 --> 00:53:35.630
<v Speaker 1>I'm kind of I'm kinda guessing a little

00:53:35.630 --> 00:53:38.110
<v Speaker 1>bit here where we're like but let's can

00:53:38.110 --> 00:53:40.030
<v Speaker 1>we comment out or do like, let's make

00:53:40.030 --> 00:53:42.190
<v Speaker 1>that database one YAML only have table specs

00:53:42.190 --> 00:53:43.550
<v Speaker 1>and not a database spec in it.

00:53:44.325 --> 00:53:45.925
<v Speaker 0>Alright. Okay. Yeah.

00:53:54.005 --> 00:53:55.685
<v Speaker 0>Okay. So migration.

00:53:58.490 --> 00:53:59.770
<v Speaker 0>That seems promising.

00:53:59.849 --> 00:54:01.130
<v Speaker 1>Yeah.

00:54:02.250 --> 00:54:04.970
<v Speaker 1>Alright. So it's trying to unmarshal something and

00:54:04.970 --> 00:54:06.890
<v Speaker 1>failing. So that's I think

00:54:07.849 --> 00:54:10.329
<v Speaker 1>It did work. Oh, because dot contained other

00:54:10.329 --> 00:54:11.770
<v Speaker 1>files. Yeah. Yeah.

00:54:12.089 --> 00:54:12.970
<v Speaker 0>I

00:54:12.970 --> 00:54:15.605
<v Speaker 0>think I'm confusing it. So let's do r

00:54:15.605 --> 00:54:16.405
<v Speaker 0>equals

00:54:16.645 --> 00:54:17.685
<v Speaker 0>migration.

00:54:18.405 --> 00:54:20.244
<v Speaker 1>You should also I think spec file can

00:54:20.244 --> 00:54:21.845
<v Speaker 1>take a directory or a file. Like, you

00:54:21.845 --> 00:54:23.685
<v Speaker 1>can I think that we can support both

00:54:23.685 --> 00:54:23.925
<v Speaker 1>there?

00:54:36.670 --> 00:54:38.190
<v Speaker 1>There's just a dot at the end of

00:54:38.190 --> 00:54:38.829
<v Speaker 1>it. Oh.

00:54:45.155 --> 00:54:45.955
<v Speaker 0>Alright.

00:54:46.915 --> 00:54:48.195
<v Speaker 0>Oh, that's a fail.

00:54:48.675 --> 00:54:50.675
<v Speaker 0>Oh, but we did get the migration. Okay.

00:54:51.395 --> 00:54:52.035
<v Speaker 0>So

00:54:52.275 --> 00:54:53.075
<v Speaker 0>based on that,

00:54:53.890 --> 00:54:55.410
<v Speaker 0>I'm assuming

00:54:55.730 --> 00:54:58.050
<v Speaker 0>I could plan all the way back here.

00:54:59.330 --> 00:55:00.130
<v Speaker 0>Apply.

00:55:02.290 --> 00:55:02.690
<v Speaker 0>Yeah.

00:55:03.730 --> 00:55:05.410
<v Speaker 0>And this is gonna take

00:55:07.505 --> 00:55:09.585
<v Speaker 1>Slash d d or dash dash d d

00:55:09.585 --> 00:55:11.265
<v Speaker 1>l is the, I guess, the parameter name

00:55:11.265 --> 00:55:13.265
<v Speaker 1>here. D l equals

00:55:13.265 --> 00:55:14.305
<v Speaker 0>migration.

00:55:16.625 --> 00:55:17.505
<v Speaker 0>Oh, hey.

00:55:18.385 --> 00:55:19.345
<v Speaker 0>There. We did it.

00:55:20.240 --> 00:55:22.320
<v Speaker 1>Well, and you never wrote SQL.

00:55:24.319 --> 00:55:26.400
<v Speaker 0>Okay. That's cool. So,

00:55:28.400 --> 00:55:31.599
<v Speaker 0>yeah, we can without Kubernetes local development environments,

00:55:31.625 --> 00:55:33.305
<v Speaker 0>we can point it to a file or

00:55:33.305 --> 00:55:35.865
<v Speaker 0>directory containing our table definitions. So we'd probably

00:55:35.865 --> 00:55:37.625
<v Speaker 0>keep our databases separately.

00:55:37.625 --> 00:55:39.865
<v Speaker 0>But, yeah, my my my

00:55:40.345 --> 00:55:43.145
<v Speaker 0>local repository for my application code is never

00:55:43.145 --> 00:55:44.984
<v Speaker 0>gonna contain that database CID. I mean, that's

00:55:44.984 --> 00:55:47.704
<v Speaker 0>gonna be always come from platform and and

00:55:47.250 --> 00:55:48.290
<v Speaker 0>ops team.

00:55:48.450 --> 00:55:50.130
<v Speaker 0>And so the table one's just living there.

00:55:50.130 --> 00:55:52.210
<v Speaker 0>Actually, it probably makes a better sense.

00:55:54.930 --> 00:55:56.130
<v Speaker 0>And then we can do the plan and

00:55:56.130 --> 00:55:57.970
<v Speaker 0>apply. We get the migrations,

00:55:58.050 --> 00:55:59.010
<v Speaker 0>and it worked.

00:55:59.250 --> 00:56:02.050
<v Speaker 0>Cool. I'm I'm I'm happy with that. Great.

00:56:03.545 --> 00:56:06.185
<v Speaker 0>We're gonna move to your demo now. We

00:56:06.185 --> 00:56:08.425
<v Speaker 0>have a question from Rio in the chat,

00:56:08.425 --> 00:56:10.105
<v Speaker 0>which I'll throw over to you.

00:56:10.985 --> 00:56:13.385
<v Speaker 0>So Rio asks, is there a way to

00:56:13.385 --> 00:56:15.465
<v Speaker 0>set the name of the migration beforehand?

00:56:16.100 --> 00:56:18.500
<v Speaker 0>This could enable CI systems to block deployments

00:56:18.500 --> 00:56:21.780
<v Speaker 0>of specific software until SchemaHero shows a migration

00:56:21.780 --> 00:56:23.140
<v Speaker 0>has been executed.

00:56:24.100 --> 00:56:25.460
<v Speaker 1>It's a it's a good question.

00:56:26.020 --> 00:56:27.140
<v Speaker 1>So today,

00:56:27.140 --> 00:56:29.620
<v Speaker 1>like, those those IDs that were, like, the

00:56:29.620 --> 00:56:30.500
<v Speaker 1>name of the migrations,

00:56:31.805 --> 00:56:33.885
<v Speaker 1>they're actually deterministically

00:56:33.885 --> 00:56:37.725
<v Speaker 1>calculated by the generated SQL statement that is

00:56:37.725 --> 00:56:38.845
<v Speaker 1>being created.

00:56:39.565 --> 00:56:40.925
<v Speaker 1>And one of the benefits of that is

00:56:40.925 --> 00:56:42.605
<v Speaker 1>if you have to recalculate them or whatever,

00:56:42.605 --> 00:56:44.365
<v Speaker 1>the ID won't change. You end up with

00:56:44.365 --> 00:56:45.005
<v Speaker 1>a history.

00:56:45.990 --> 00:56:48.150
<v Speaker 1>Every time I deploy the same migration from

00:56:48.150 --> 00:56:50.150
<v Speaker 1>the same state, I get this ID. So

00:56:50.150 --> 00:56:52.390
<v Speaker 1>today, like, no. There's that's unfortunately, that's not

00:56:52.390 --> 00:56:53.270
<v Speaker 1>possible.

00:56:54.470 --> 00:56:56.390
<v Speaker 1>And it's an interesting thing to to to

00:56:56.390 --> 00:56:58.710
<v Speaker 1>think about, but today, we we they're all

00:56:58.710 --> 00:56:59.990
<v Speaker 1>they're all calculated

00:56:59.990 --> 00:57:00.710
<v Speaker 1>deterministically.

00:57:01.695 --> 00:57:02.975
<v Speaker 0>I guess you could have it in a

00:57:02.975 --> 00:57:05.935
<v Speaker 0>container, though, that looked up all migrations

00:57:05.935 --> 00:57:07.375
<v Speaker 0>and made sure that we're all up to

00:57:07.375 --> 00:57:09.455
<v Speaker 0>date before deploying software. I I mean, if

00:57:09.455 --> 00:57:10.815
<v Speaker 0>that was part of your workflow.

00:57:11.055 --> 00:57:12.335
<v Speaker 0>But, yeah, maybe something Yeah.

00:57:13.295 --> 00:57:14.735
<v Speaker 1>Yeah. It's actually

00:57:15.060 --> 00:57:17.140
<v Speaker 1>we have a monorepo that has the database

00:57:17.140 --> 00:57:18.420
<v Speaker 1>migrations and

00:57:18.900 --> 00:57:20.740
<v Speaker 1>our code in it. And so when

00:57:20.900 --> 00:57:23.620
<v Speaker 1>we deploy a change that involves code changes

00:57:23.620 --> 00:57:26.180
<v Speaker 1>and a schema change, it becomes a little

00:57:26.180 --> 00:57:26.740
<v Speaker 1>bit

00:57:27.700 --> 00:57:29.620
<v Speaker 1>tricky. And you have to be careful

00:57:30.325 --> 00:57:32.325
<v Speaker 1>if we don't have immediate deploy to true

00:57:32.325 --> 00:57:34.245
<v Speaker 1>because if that gets deployed all the way,

00:57:34.405 --> 00:57:35.925
<v Speaker 1>you might have code that expects a column

00:57:35.925 --> 00:57:37.605
<v Speaker 1>to exist and you haven't approved that migration

00:57:37.605 --> 00:57:38.245
<v Speaker 1>yet.

00:57:38.485 --> 00:57:39.125
<v Speaker 1>We,

00:57:40.005 --> 00:57:40.645
<v Speaker 1>like,

00:57:40.885 --> 00:57:44.005
<v Speaker 1>have decided to handle this by saying,

00:57:44.325 --> 00:57:47.200
<v Speaker 1>you know, don't write code that is hard

00:57:47.200 --> 00:57:49.200
<v Speaker 1>dependent on that column to be there. Like,

00:57:49.200 --> 00:57:50.799
<v Speaker 1>you can handle that by writing code a

00:57:50.799 --> 00:57:52.079
<v Speaker 1>little bit differently. That's not like, we don't

00:57:52.079 --> 00:57:53.119
<v Speaker 1>want to tell you to change the way

00:57:53.119 --> 00:57:55.200
<v Speaker 1>you write code. So that's that's a overall

00:57:55.200 --> 00:57:57.759
<v Speaker 1>problem if you're handling, you know, monorepo that

00:57:57.759 --> 00:58:00.079
<v Speaker 1>handles code and migrations, though. Like, there's a

00:58:00.160 --> 00:58:02.135
<v Speaker 1>it's a challenge. Yeah. Definitely. Alright.

00:58:03.095 --> 00:58:04.535
<v Speaker 0>Do you wanna share your screen, and we'll

00:58:04.535 --> 00:58:05.734
<v Speaker 0>we'll take a look at what you got,

00:58:05.734 --> 00:58:06.295
<v Speaker 0>Ashul?

00:58:07.015 --> 00:58:10.295
<v Speaker 1>Sure. I'll I'll share here. Alright. So

00:58:14.295 --> 00:58:15.335
<v Speaker 1>great. So

00:58:16.130 --> 00:58:17.170
<v Speaker 1>what I have

00:58:17.650 --> 00:58:18.370
<v Speaker 1>is

00:58:19.330 --> 00:58:20.770
<v Speaker 1>alright. So I have a

00:58:22.610 --> 00:58:24.930
<v Speaker 1>Kubernetes cluster just running on DigitalOcean and a

00:58:24.930 --> 00:58:28.210
<v Speaker 1>managed separate out of the cluster MySQL server

00:58:28.210 --> 00:58:28.930
<v Speaker 1>right here.

00:58:29.250 --> 00:58:31.424
<v Speaker 1>And then MySQL server is only available inside

00:58:31.424 --> 00:58:33.825
<v Speaker 1>the cluster. It's set up similar to the

00:58:33.825 --> 00:58:35.664
<v Speaker 1>cluster IP, obviously, but it's like a VPC

00:58:35.664 --> 00:58:37.424
<v Speaker 1>firewall rule that's making it so it's not

00:58:37.424 --> 00:58:38.464
<v Speaker 1>publicly accessible

00:58:39.585 --> 00:58:42.039
<v Speaker 1>because that's how people run production systems, hopefully.

00:58:42.039 --> 00:58:43.720
<v Speaker 1>And also in case I accidentally show a

00:58:43.720 --> 00:58:45.319
<v Speaker 1>password here on the screen, I'm not super

00:58:45.319 --> 00:58:45.880
<v Speaker 1>worried.

00:58:46.920 --> 00:58:48.279
<v Speaker 1>And, like, I did a little bit more

00:58:48.279 --> 00:58:50.680
<v Speaker 1>prep on this one, and I have Flux

00:58:50.680 --> 00:58:51.400
<v Speaker 1>running.

00:58:52.440 --> 00:58:55.160
<v Speaker 1>So I have Flux running in a GitOps

00:58:55.005 --> 00:58:57.325
<v Speaker 1>deployed pipeline. So I can just write code,

00:58:57.325 --> 00:58:59.644
<v Speaker 1>commit it, GitHub actions runs, and then it

00:58:59.644 --> 00:59:01.085
<v Speaker 1>gets automatically deployed.

00:59:02.045 --> 00:59:03.644
<v Speaker 1>And the thing that I wanted to show

00:59:03.644 --> 00:59:05.005
<v Speaker 1>was a couple of things here.

00:59:06.605 --> 00:59:09.404
<v Speaker 1>We've been playing around a lot lately

00:59:09.150 --> 00:59:11.310
<v Speaker 1>with a new version of SchemaHero.

00:59:11.390 --> 00:59:12.590
<v Speaker 1>Oops. Sorry about that.

00:59:13.630 --> 00:59:15.230
<v Speaker 1>And so this is like the alpha version

00:59:15.230 --> 00:59:17.470
<v Speaker 1>of 13,

00:59:17.869 --> 00:59:19.710
<v Speaker 1>which is currently in progress. We hope to

00:59:19.710 --> 00:59:21.630
<v Speaker 1>ship this in mid February.

00:59:21.950 --> 00:59:23.230
<v Speaker 1>And there's a really cool feature in it,

00:59:23.230 --> 00:59:24.670
<v Speaker 1>and my goal was to show that. So

00:59:24.670 --> 00:59:25.895
<v Speaker 1>I'm I'm gonna basically go through the same

00:59:25.895 --> 00:59:28.135
<v Speaker 1>same demo. We'll go pretty quickly.

00:59:29.735 --> 00:59:32.055
<v Speaker 1>We're gonna install the 13

00:59:32.695 --> 00:59:33.655
<v Speaker 1>operator

00:59:35.175 --> 00:59:36.055
<v Speaker 1>to this cluster,

00:59:37.560 --> 00:59:38.200
<v Speaker 1>and

00:59:38.360 --> 00:59:40.520
<v Speaker 1>that's going to spin up the operator.

00:59:41.080 --> 00:59:42.680
<v Speaker 1>Here I have a

00:59:44.120 --> 00:59:44.840
<v Speaker 1>semi,

00:59:45.240 --> 00:59:46.120
<v Speaker 1>potentially

00:59:46.200 --> 00:59:47.160
<v Speaker 1>typical

00:59:47.720 --> 00:59:50.360
<v Speaker 1>repo that has a CI pipeline, more matches

00:59:50.360 --> 00:59:51.720
<v Speaker 1>like how you actually would run stuff in

00:59:51.720 --> 00:59:51.960
<v Speaker 1>production.

00:59:52.555 --> 00:59:54.555
<v Speaker 1>This pipeline is lit I mean, in order

00:59:54.555 --> 00:59:56.155
<v Speaker 1>to make the CI process really quick for

00:59:56.155 --> 00:59:57.755
<v Speaker 1>this, I don't have code in it. It's

00:59:57.755 --> 00:59:59.275
<v Speaker 1>literally just customize

00:59:59.915 --> 01:00:00.555
<v Speaker 1>running

01:00:01.435 --> 01:00:03.115
<v Speaker 1>a bunch of, like, manifests.

01:00:03.115 --> 01:00:05.035
<v Speaker 1>And I have sealed secrets installed so that

01:00:05.035 --> 01:00:07.035
<v Speaker 1>I can actually deploy secrets through a GitOps

01:00:07.035 --> 01:00:07.435
<v Speaker 1>pipeline.

01:00:09.910 --> 01:00:11.750
<v Speaker 1>Here, I have a database YAML.

01:00:12.310 --> 01:00:15.030
<v Speaker 1>And the database YAML, I have the same

01:00:15.030 --> 01:00:17.510
<v Speaker 1>commands that we just looked at, immediate deploy

01:00:17.510 --> 01:00:19.910
<v Speaker 1>and enable shell command, and this deploy seed

01:00:19.910 --> 01:00:22.115
<v Speaker 1>data set to true, which is one of

01:00:22.115 --> 01:00:23.795
<v Speaker 1>the cool new features of 13 that I

01:00:23.795 --> 01:00:24.755
<v Speaker 1>wanted to show off.

01:00:25.635 --> 01:00:26.355
<v Speaker 1>In

01:00:26.675 --> 01:00:29.155
<v Speaker 1>my production overlay for customize and sorry. I'm

01:00:29.155 --> 01:00:30.835
<v Speaker 1>throwing a lot here, like, around GitOps and

01:00:30.835 --> 01:00:32.994
<v Speaker 1>Flux and customize and everything. Like, I think

01:00:32.994 --> 01:00:35.350
<v Speaker 1>that, you know, just trying to, like, demo

01:00:35.350 --> 01:00:37.670
<v Speaker 1>a more, like, you know, realistic end production

01:00:37.670 --> 01:00:38.390
<v Speaker 1>environment.

01:00:39.030 --> 01:00:39.590
<v Speaker 1>So

01:00:39.990 --> 01:00:42.310
<v Speaker 1>I have a sealed secret that contains my

01:00:42.310 --> 01:00:44.070
<v Speaker 1>connection string for MySQL.

01:00:44.070 --> 01:00:44.710
<v Speaker 0>Yep.

01:00:46.150 --> 01:00:47.910
<v Speaker 1>The sealed secret's Helm repository.

01:00:49.335 --> 01:00:50.215
<v Speaker 1>And so

01:00:50.695 --> 01:00:53.175
<v Speaker 1>what I'm gonna do is deploy all of

01:00:53.175 --> 01:00:55.175
<v Speaker 1>this. I have a schemas,

01:00:55.175 --> 01:00:56.935
<v Speaker 1>and the schema has the same, you know,

01:00:56.935 --> 01:00:58.055
<v Speaker 1>basic table.

01:00:58.295 --> 01:01:00.055
<v Speaker 1>I'm

01:01:00.055 --> 01:01:02.695
<v Speaker 1>actually gonna comment that part out for now.

01:01:03.099 --> 01:01:04.619
<v Speaker 1>And so this is the same basic table

01:01:04.619 --> 01:01:06.140
<v Speaker 1>here. It's called airport this time, but it

01:01:06.140 --> 01:01:07.660
<v Speaker 1>has the code and the airport name.

01:01:07.980 --> 01:01:10.780
<v Speaker 1>And the customization here only has the airport

01:01:10.780 --> 01:01:11.580
<v Speaker 1>YAML.

01:01:11.980 --> 01:01:12.540
<v Speaker 1>So

01:01:13.420 --> 01:01:15.500
<v Speaker 1>really quickly I need to make the window

01:01:15.500 --> 01:01:17.180
<v Speaker 1>smaller so I can see the terminal prompt.

01:01:17.180 --> 01:01:20.545
<v Speaker 1>So if I look at, like, customize build,

01:01:20.625 --> 01:01:22.865
<v Speaker 1>you know, customize overlays production,

01:01:24.305 --> 01:01:26.065
<v Speaker 1>and we look at see what that actually

01:01:26.065 --> 01:01:27.025
<v Speaker 1>is creating,

01:01:27.105 --> 01:01:28.545
<v Speaker 1>you know, we just have a sealed secret

01:01:28.545 --> 01:01:31.080
<v Speaker 1>here. We have our database object, which we're

01:01:31.080 --> 01:01:32.840
<v Speaker 1>familiar with. We just went through it.

01:01:33.160 --> 01:01:33.880
<v Speaker 1>And

01:01:34.040 --> 01:01:34.600
<v Speaker 1>then

01:01:35.320 --> 01:01:36.840
<v Speaker 1>I don't have a table

01:01:37.560 --> 01:01:38.520
<v Speaker 1>because

01:01:38.680 --> 01:01:40.680
<v Speaker 1>I probably forgot to save a file somewhere

01:01:40.680 --> 01:01:41.960
<v Speaker 1>or something like that.

01:01:42.520 --> 01:01:43.800
<v Speaker 1>Let's try that one more time.

01:01:48.734 --> 01:01:50.255
<v Speaker 1>I have a table in here.

01:01:52.575 --> 01:01:53.215
<v Speaker 1>So

01:01:54.494 --> 01:01:55.935
<v Speaker 1>base database

01:01:55.935 --> 01:01:56.895
<v Speaker 1>customization.

01:01:56.895 --> 01:01:58.255
<v Speaker 1>Oh, yeah. Here. I need to include the

01:01:58.255 --> 01:01:59.135
<v Speaker 1>schemas. Sorry.

01:02:00.230 --> 01:02:02.950
<v Speaker 1>Alright. So here. Now I have this airline

01:02:02.950 --> 01:02:06.150
<v Speaker 1>DB table or the airport table being deployed.

01:02:06.390 --> 01:02:06.630
<v Speaker 1>So

01:02:16.244 --> 01:02:18.325
<v Speaker 1>So we'll just push that to GitHub.

01:02:19.605 --> 01:02:21.285
<v Speaker 1>This is the repo that I pushed it

01:02:21.285 --> 01:02:21.845
<v Speaker 1>to.

01:02:24.565 --> 01:02:27.045
<v Speaker 1>And a GitHub action is gonna run, which

01:02:27.045 --> 01:02:28.405
<v Speaker 1>is going to basically go,

01:02:29.349 --> 01:02:31.510
<v Speaker 1>you know, run unit tests, run all the

01:02:31.510 --> 01:02:33.510
<v Speaker 1>tests that normally run-in CI. For this one,

01:02:33.510 --> 01:02:35.510
<v Speaker 1>it's it's really quick. It takes about thirty

01:02:35.510 --> 01:02:36.950
<v Speaker 1>to forty seconds to run all the way

01:02:36.950 --> 01:02:37.830
<v Speaker 1>through CI.

01:02:37.910 --> 01:02:40.550
<v Speaker 1>And then we'll render out that customization YAML

01:02:40.550 --> 01:02:42.790
<v Speaker 1>and put it into a a a separate

01:02:43.365 --> 01:02:45.285
<v Speaker 1>repo that Flux is watching.

01:02:46.325 --> 01:02:47.685
<v Speaker 1>And wait for all that works, so I

01:02:47.685 --> 01:02:49.285
<v Speaker 1>can, like, you know, kubectl get

01:02:49.525 --> 01:02:50.325
<v Speaker 1>tables,

01:02:50.325 --> 01:02:52.244
<v Speaker 1>and I don't have anything. There's nothing deployed.

01:02:56.340 --> 01:02:58.420
<v Speaker 1>So we'll have flux do, like, a a

01:02:58.420 --> 01:02:59.620
<v Speaker 1>reconciliation

01:03:00.660 --> 01:03:02.740
<v Speaker 1>while this continues to run. It's red, but

01:03:02.740 --> 01:03:05.300
<v Speaker 1>I don't think that it's actually an error.

01:03:05.300 --> 01:03:06.420
<v Speaker 1>This is just what happens.

01:03:09.974 --> 01:03:12.454
<v Speaker 1>This should run pretty quickly, customize build, and

01:03:12.454 --> 01:03:14.455
<v Speaker 1>then upload all the rendered out YAML.

01:03:17.095 --> 01:03:18.855
<v Speaker 0>Where does it upload the render other another

01:03:18.855 --> 01:03:19.655
<v Speaker 0>repository?

01:03:20.214 --> 01:03:23.030
<v Speaker 1>Yeah. So we it's right now, it's going

01:03:23.030 --> 01:03:25.590
<v Speaker 1>to this other repository that I just created

01:03:25.590 --> 01:03:27.030
<v Speaker 1>called GitOps demo,

01:03:28.070 --> 01:03:29.670
<v Speaker 1>and it's gonna deploy it all right now.

01:03:29.670 --> 01:03:32.150
<v Speaker 1>You see it here. It just deployed this,

01:03:32.950 --> 01:03:34.855
<v Speaker 1>and so 10 ago.

01:03:35.255 --> 01:03:37.815
<v Speaker 1>So Flux is gonna watch this and pick

01:03:37.815 --> 01:03:40.055
<v Speaker 1>that up. So we'll try to push Flux

01:03:40.055 --> 01:03:42.695
<v Speaker 1>along and not have it set idle.

01:03:44.935 --> 01:03:47.250
<v Speaker 1>If I look at tables, it's there. I

01:03:47.250 --> 01:03:48.530
<v Speaker 1>can run the same commands that we were

01:03:48.530 --> 01:03:50.130
<v Speaker 1>just looking at, SchemaHero,

01:03:50.130 --> 01:03:51.330
<v Speaker 1>get migrations,

01:03:52.130 --> 01:03:54.930
<v Speaker 1>and this is approved. It's there. So this

01:03:54.930 --> 01:03:57.170
<v Speaker 1>is because we have immediately immediate deploy set

01:03:57.170 --> 01:03:57.570
<v Speaker 1>to true.

01:03:59.625 --> 01:04:01.225
<v Speaker 1>The thing that I wanna show here is

01:04:01.225 --> 01:04:03.945
<v Speaker 1>a couple of things. So kubectl schema hero

01:04:04.025 --> 01:04:05.465
<v Speaker 1>get databases.

01:04:05.785 --> 01:04:07.625
<v Speaker 1>Our database is named AirlineDB.

01:04:07.625 --> 01:04:09.785
<v Speaker 1>So I can run kubectl schema hero

01:04:10.105 --> 01:04:11.145
<v Speaker 1>shell

01:04:11.810 --> 01:04:12.530
<v Speaker 1>that

01:04:12.690 --> 01:04:14.450
<v Speaker 1>and that's gonna run on my SQL pod

01:04:14.450 --> 01:04:16.690
<v Speaker 1>on that cluster and give me a connection

01:04:16.690 --> 01:04:19.010
<v Speaker 1>and do it. That's cool. Now yeah.

01:04:20.369 --> 01:04:22.050
<v Speaker 1>So I can show tables.

01:04:22.530 --> 01:04:24.455
<v Speaker 1>I have the airport table. Select star from

01:04:24.455 --> 01:04:26.215
<v Speaker 1>airport. And sorry. I don't have beekeeper setup

01:04:26.215 --> 01:04:27.495
<v Speaker 1>with port forward here, so this is a

01:04:27.495 --> 01:04:28.535
<v Speaker 1>little bit harder.

01:04:28.695 --> 01:04:31.335
<v Speaker 1>The table's empty. So coming back here to

01:04:31.335 --> 01:04:32.615
<v Speaker 1>the part that I wanted to show,

01:04:33.095 --> 01:04:35.575
<v Speaker 1>which is the part that we're excited about,

01:04:35.575 --> 01:04:37.940
<v Speaker 1>is we added the seed data

01:04:38.420 --> 01:04:40.339
<v Speaker 1>where I added a couple airport codes. Right?

01:04:40.339 --> 01:04:42.500
<v Speaker 1>Like, I have two two rows in the

01:04:42.500 --> 01:04:44.260
<v Speaker 1>database, JFK and

01:04:44.660 --> 01:04:45.540
<v Speaker 1>LAX.

01:04:47.140 --> 01:04:48.660
<v Speaker 1>I'm gonna go ahead and add that.

01:04:53.395 --> 01:04:55.475
<v Speaker 1>We'll push that up to the repo.

01:04:56.595 --> 01:04:59.635
<v Speaker 1>We wait another minute while while this action

01:04:59.635 --> 01:05:00.115
<v Speaker 1>runs.

01:05:04.250 --> 01:05:05.050
<v Speaker 1>And

01:05:05.369 --> 01:05:06.650
<v Speaker 1>what it should do

01:05:06.890 --> 01:05:07.530
<v Speaker 1>is

01:05:07.930 --> 01:05:09.849
<v Speaker 1>the end result will be that the the

01:05:09.849 --> 01:05:12.010
<v Speaker 1>manifest with the seed data will end up

01:05:12.010 --> 01:05:13.530
<v Speaker 1>over here in our GitOps

01:05:13.530 --> 01:05:14.089
<v Speaker 1>repo.

01:05:17.365 --> 01:05:19.365
<v Speaker 1>One thing to note while the CI runs

01:05:19.365 --> 01:05:20.085
<v Speaker 1>is

01:05:21.285 --> 01:05:23.765
<v Speaker 1>we set this, like, that you have to

01:05:23.765 --> 01:05:25.845
<v Speaker 1>opt into it for seed data because one

01:05:25.845 --> 01:05:27.365
<v Speaker 1>of the things we ran into, we'd like,

01:05:27.365 --> 01:05:28.885
<v Speaker 1>we we deployed it. We were using it

01:05:28.885 --> 01:05:30.565
<v Speaker 1>in our dev environments to do things like,

01:05:30.565 --> 01:05:32.960
<v Speaker 1>you know, deploy features and entitlements or feature

01:05:32.960 --> 01:05:35.040
<v Speaker 1>toggles entitlements and a little bit of, like,

01:05:35.119 --> 01:05:37.280
<v Speaker 1>you know, fixture data that you need to

01:05:37.280 --> 01:05:39.440
<v Speaker 1>run tests. And it was, like, super

01:05:40.480 --> 01:05:42.480
<v Speaker 1>useful. And then right when we started to

01:05:42.480 --> 01:05:44.000
<v Speaker 1>think, okay. Let's merge this in and push

01:05:44.000 --> 01:05:45.200
<v Speaker 1>it out to production, we were like, wait.

01:05:45.200 --> 01:05:46.400
<v Speaker 1>We don't want all this data in production

01:05:46.400 --> 01:05:48.415
<v Speaker 1>either. So we ended up having to, like,

01:05:48.415 --> 01:05:49.694
<v Speaker 1>make that something that you can opt into

01:05:49.694 --> 01:05:51.295
<v Speaker 1>and out of at the database level for

01:05:51.295 --> 01:05:51.775
<v Speaker 1>now.

01:05:53.935 --> 01:05:55.135
<v Speaker 1>So this should

01:05:55.935 --> 01:05:57.055
<v Speaker 1>finish this

01:05:57.454 --> 01:05:58.655
<v Speaker 1>CI here in a second.

01:06:01.859 --> 01:06:03.619
<v Speaker 0>So why if you opted for this kind

01:06:03.619 --> 01:06:05.779
<v Speaker 0>of two step GitOps deployment where you push

01:06:05.779 --> 01:06:08.180
<v Speaker 0>to another repository rather than having Flux just

01:06:08.180 --> 01:06:10.339
<v Speaker 0>apply the the YAML directly?

01:06:10.819 --> 01:06:12.180
<v Speaker 1>Yeah. It's a great question.

01:06:13.220 --> 01:06:16.105
<v Speaker 1>It it match like, I think it's let's

01:06:16.105 --> 01:06:17.465
<v Speaker 1>call it muscle memory of the way that

01:06:17.465 --> 01:06:20.265
<v Speaker 1>we've been using Flux. We we adopted Flux

01:06:20.265 --> 01:06:21.865
<v Speaker 1>with Flux one point o when it didn't

01:06:21.865 --> 01:06:23.785
<v Speaker 1>have support for customize built into it. And

01:06:23.785 --> 01:06:25.225
<v Speaker 1>so we ended up having to do these,

01:06:25.225 --> 01:06:28.265
<v Speaker 1>like, kind of CI processes to do it.

01:06:28.265 --> 01:06:28.985
<v Speaker 1>And like this

01:06:29.450 --> 01:06:31.050
<v Speaker 1>like, was easy for me to set up

01:06:31.050 --> 01:06:32.570
<v Speaker 1>in order to do it. Like, no other

01:06:32.570 --> 01:06:33.530
<v Speaker 1>reason than that.

01:06:34.250 --> 01:06:36.810
<v Speaker 0>Good. That's a good enough reason. Sorry.

01:06:37.130 --> 01:06:38.890
<v Speaker 1>So the seed data is now here.

01:06:40.250 --> 01:06:41.690
<v Speaker 1>And if we come back here and we

01:06:41.690 --> 01:06:43.050
<v Speaker 1>select star from airport,

01:06:45.125 --> 01:06:46.805
<v Speaker 1>there's two two rows of data in the

01:06:46.805 --> 01:06:48.805
<v Speaker 1>database now. So it's not just Schema. We're

01:06:48.805 --> 01:06:50.005
<v Speaker 1>starting to get into

01:06:51.765 --> 01:06:52.565
<v Speaker 1>into

01:06:52.724 --> 01:06:54.085
<v Speaker 1>the actual data.

01:06:54.964 --> 01:06:56.885
<v Speaker 0>But can you describe that migration? Is that

01:06:56.885 --> 01:06:58.005
<v Speaker 0>just gonna be in the search statement?

01:06:58.730 --> 01:07:01.690
<v Speaker 1>It it it well, almost. Almost. Let me

01:07:01.690 --> 01:07:02.650
<v Speaker 1>get migrations.

01:07:03.690 --> 01:07:05.210
<v Speaker 1>It is in search statements,

01:07:05.770 --> 01:07:07.529
<v Speaker 1>but I think it's important to point out

01:07:07.529 --> 01:07:08.970
<v Speaker 1>here that here. Let me

01:07:12.065 --> 01:07:13.184
<v Speaker 1>I've been talking, so I don't know how

01:07:13.184 --> 01:07:13.825
<v Speaker 1>you do it.

01:07:15.585 --> 01:07:17.345
<v Speaker 1>Subscribe migration.

01:07:17.825 --> 01:07:20.065
<v Speaker 1>So it is just insert statements.

01:07:21.105 --> 01:07:23.345
<v Speaker 1>But for MySQL, we do the on duplicate

01:07:23.345 --> 01:07:24.224
<v Speaker 1>key update.

01:07:24.560 --> 01:07:27.119
<v Speaker 1>And for Postgres, it'll say, like, insert ignore

01:07:27.119 --> 01:07:28.080
<v Speaker 1>statements

01:07:28.160 --> 01:07:28.880
<v Speaker 1>because,

01:07:28.960 --> 01:07:30.960
<v Speaker 1>like, we know they're gonna be regenerated all

01:07:30.960 --> 01:07:31.520
<v Speaker 1>the time.

01:07:32.000 --> 01:07:33.520
<v Speaker 1>And the idea is,

01:07:33.840 --> 01:07:34.560
<v Speaker 1>you know,

01:07:35.280 --> 01:07:37.615
<v Speaker 1>primary key in this table is the code

01:07:37.615 --> 01:07:39.135
<v Speaker 1>column. So as long as the one of

01:07:39.135 --> 01:07:40.815
<v Speaker 1>the primary keys is included in the seed

01:07:40.815 --> 01:07:42.655
<v Speaker 1>data, which, like, likely is going to be

01:07:42.655 --> 01:07:44.175
<v Speaker 1>anyway or else it's not gonna be a

01:07:44.175 --> 01:07:45.535
<v Speaker 1>very valid piece of data,

01:07:46.575 --> 01:07:48.255
<v Speaker 1>this works. That allows me to

01:07:49.480 --> 01:07:51.400
<v Speaker 1>delete that row. And then the next time

01:07:51.400 --> 01:07:53.240
<v Speaker 1>it's, like, drift detection, it'll put that seed

01:07:53.240 --> 01:07:54.760
<v Speaker 1>data back, but it also makes sure that

01:07:54.760 --> 01:07:56.600
<v Speaker 1>it's not duplicated each time, if that makes

01:07:56.600 --> 01:07:57.160
<v Speaker 1>sense.

01:07:57.640 --> 01:07:59.720
<v Speaker 0>Yeah. Definitely. I think that's a really cool

01:07:59.720 --> 01:08:02.680
<v Speaker 0>feature for, again, that development workflow as well.

01:08:03.165 --> 01:08:05.005
<v Speaker 0>I've been able to do the plan and

01:08:05.005 --> 01:08:07.165
<v Speaker 0>apply and get data that is,

01:08:07.485 --> 01:08:10.525
<v Speaker 0>you know, crafted alongside the the schema itself.

01:08:10.525 --> 01:08:11.805
<v Speaker 0>Makes a lot of sense.

01:08:12.605 --> 01:08:14.125
<v Speaker 0>Yeah. Yeah. I think that's a really cool

01:08:14.125 --> 01:08:14.685
<v Speaker 0>feature.

01:08:15.085 --> 01:08:16.845
<v Speaker 1>I'm gonna stop sharing here. But, like, yeah,

01:08:16.845 --> 01:08:17.005
<v Speaker 1>the

01:08:18.444 --> 01:08:18.845
<v Speaker 1>no.

01:08:19.270 --> 01:08:19.989
<v Speaker 1>But, like, the

01:08:20.710 --> 01:08:22.149
<v Speaker 1>that's exactly what we use it for. You

01:08:22.149 --> 01:08:23.909
<v Speaker 1>know? Our our dev environments, we ended up

01:08:23.909 --> 01:08:25.510
<v Speaker 1>with you know, like most folks, we have,

01:08:25.510 --> 01:08:27.350
<v Speaker 1>you know, a table full of features. And,

01:08:27.350 --> 01:08:29.109
<v Speaker 1>like, you know, when we wanna roll them

01:08:29.109 --> 01:08:31.670
<v Speaker 1>out, like, everybody has to run migrations to

01:08:31.670 --> 01:08:34.125
<v Speaker 1>insert those features into their database for feature

01:08:34.125 --> 01:08:36.524
<v Speaker 1>toggles or, like, there's, you know,

01:08:37.165 --> 01:08:37.965
<v Speaker 1>generic

01:08:38.444 --> 01:08:40.765
<v Speaker 1>fixture data that we use for, you know,

01:08:40.765 --> 01:08:42.524
<v Speaker 1>different types of tests. And to make sure

01:08:42.524 --> 01:08:44.524
<v Speaker 1>that the tests are portable between environments, we

01:08:44.524 --> 01:08:46.045
<v Speaker 1>can actually just throw the the data into

01:08:46.045 --> 01:08:47.325
<v Speaker 1>the seed data and not put it into

01:08:47.325 --> 01:08:47.645
<v Speaker 1>production.

01:08:48.270 --> 01:08:50.429
<v Speaker 0>Yeah. I've got a a feature request for

01:08:50.429 --> 01:08:52.510
<v Speaker 0>you that you can bring for 14 now.

01:08:52.510 --> 01:08:54.029
<v Speaker 0>Is that instead you know, when I have

01:08:54.029 --> 01:08:55.309
<v Speaker 0>the seed data, I've been able to use

01:08:55.309 --> 01:08:57.069
<v Speaker 0>the faker library and say, like, this is

01:08:57.069 --> 01:08:58.510
<v Speaker 0>the first name. This is an address. This

01:08:58.510 --> 01:09:00.189
<v Speaker 0>is the second name. And Oh, that's good.

01:09:00.029 --> 01:09:02.349
<v Speaker 0>Generate 10 or 20 or a hundred or

01:09:02.349 --> 01:09:03.550
<v Speaker 0>a thousand of them. That would be a

01:09:03.550 --> 01:09:06.225
<v Speaker 0>really cool feature as well. That's cool. So

01:09:06.225 --> 01:09:08.465
<v Speaker 1>seed data would be less deterministic but more

01:09:08.465 --> 01:09:10.225
<v Speaker 1>just like like, let's just fill everybody's environment

01:09:10.225 --> 01:09:11.425
<v Speaker 1>up with it and, like, we're gonna find

01:09:11.425 --> 01:09:13.265
<v Speaker 1>some problems and Yeah. You know, if you

01:09:13.265 --> 01:09:15.665
<v Speaker 0>wanna do some property based testing or you

01:09:15.665 --> 01:09:17.585
<v Speaker 0>wanna do some load based testing and really

01:09:17.585 --> 01:09:19.460
<v Speaker 0>fill and hammer thing up a little bit,

01:09:19.460 --> 01:09:20.819
<v Speaker 0>it would be cool to be able to

01:09:21.060 --> 01:09:22.979
<v Speaker 0>have a seat there that is deterministic and

01:09:22.979 --> 01:09:24.340
<v Speaker 0>then populate it with maybe a whole bunch

01:09:24.340 --> 01:09:26.819
<v Speaker 0>of undeterministic stuff. So and determine I like

01:09:26.819 --> 01:09:27.699
<v Speaker 1>it. I like

01:09:28.660 --> 01:09:29.620
<v Speaker 1>it. We may have to go add that

01:09:29.620 --> 01:09:31.485
<v Speaker 1>in. I like that that idea. Yeah. I

01:09:31.485 --> 01:09:32.685
<v Speaker 0>don't know if you're familiar with the Faker

01:09:32.685 --> 01:09:34.604
<v Speaker 0>project, but it's just this really cool library

01:09:34.604 --> 01:09:37.245
<v Speaker 0>for generating fake data with, like, types and

01:09:37.245 --> 01:09:39.645
<v Speaker 0>understands what it is. It's pretty cool. Yeah.

01:09:39.645 --> 01:09:42.524
<v Speaker 1>No. It's great. Love it. Alright. Well, that

01:09:42.524 --> 01:09:44.685
<v Speaker 0>was awesome. Thank you so much for kind

01:09:44.685 --> 01:09:46.370
<v Speaker 0>of working with us today and showing us

01:09:46.370 --> 01:09:47.570
<v Speaker 0>that that demo was cool to see the

01:09:47.570 --> 01:09:49.810
<v Speaker 0>other things great. That shell command was great.

01:09:49.810 --> 01:09:51.090
<v Speaker 0>That would have saved me a a whole

01:09:51.090 --> 01:09:54.050
<v Speaker 0>bunch of setup with beekeeper stuff, but well.

01:09:54.050 --> 01:09:55.650
<v Speaker 0>You know? Yeah. That's this this is why

01:09:55.650 --> 01:09:57.010
<v Speaker 0>we do these things. To show these features

01:09:57.010 --> 01:09:58.290
<v Speaker 0>to people so they see how they work.

01:09:59.445 --> 01:10:02.324
<v Speaker 0>We've got one question that popped on right

01:10:02.324 --> 01:10:03.685
<v Speaker 0>at the end there that'll pop up for

01:10:03.685 --> 01:10:04.324
<v Speaker 0>real.

01:10:05.445 --> 01:10:07.764
<v Speaker 0>So everything until now has been connection based.

01:10:08.165 --> 01:10:10.005
<v Speaker 0>How does it work with SQLite?

01:10:11.605 --> 01:10:12.165
<v Speaker 0>So

01:10:13.070 --> 01:10:15.869
<v Speaker 1>I can it basically works the same way.

01:10:15.869 --> 01:10:18.110
<v Speaker 1>Like, you you can write a SQLite URI

01:10:18.110 --> 01:10:19.789
<v Speaker 1>that just points to a file name, and

01:10:19.789 --> 01:10:21.709
<v Speaker 1>then that'll point to a SQLite file.

01:10:22.269 --> 01:10:25.550
<v Speaker 1>It's identical otherwise. David pointed out earlier, you

01:10:25.550 --> 01:10:27.070
<v Speaker 1>know, like, he asked about the type, whether

01:10:27.070 --> 01:10:29.895
<v Speaker 1>that's like an abstraction or just raw Postgres

01:10:29.895 --> 01:10:30.614
<v Speaker 1>types.

01:10:31.175 --> 01:10:33.015
<v Speaker 1>And you'll notice, like, in the database or

01:10:33.015 --> 01:10:34.295
<v Speaker 1>in the table schema,

01:10:34.455 --> 01:10:35.895
<v Speaker 1>there was a Postgres key. And in the

01:10:35.895 --> 01:10:37.095
<v Speaker 1>one that I did, there was a MySQL

01:10:37.095 --> 01:10:39.495
<v Speaker 1>key. So, like, the schema can change. We

01:10:39.495 --> 01:10:41.660
<v Speaker 1>don't try to, like, normalize and make sure

01:10:41.660 --> 01:10:43.500
<v Speaker 1>the schema is identical between them all. We

01:10:43.500 --> 01:10:45.340
<v Speaker 1>try to make them as similar as possible.

01:10:45.580 --> 01:10:47.340
<v Speaker 1>But, like, SQLite works, you just pass in

01:10:47.340 --> 01:10:49.260
<v Speaker 1>a, you know, a SQLite connection string.

01:10:49.820 --> 01:10:52.060
<v Speaker 0>Yeah. SQLite is something that I was interested

01:10:52.060 --> 01:10:53.500
<v Speaker 0>in. In fact, I I actually plan first

01:10:53.500 --> 01:10:54.460
<v Speaker 0>to do a bit of a demo there,

01:10:54.460 --> 01:10:56.515
<v Speaker 0>but I got carried away with the the

01:10:56.515 --> 01:10:58.915
<v Speaker 0>postcard stuff. So I think I'm I'm definitely

01:10:58.915 --> 01:11:02.595
<v Speaker 0>gonna be playing with SQLite sidecars with SchemaHeroes

01:11:02.595 --> 01:11:03.955
<v Speaker 0>and having some fun there. So I'll be

01:11:03.955 --> 01:11:05.715
<v Speaker 0>sure to get some tutorials or something onto

01:11:05.715 --> 01:11:06.435
<v Speaker 0>the channel. But

01:11:07.155 --> 01:11:08.515
<v Speaker 0>yeah. Awesome.

01:11:08.835 --> 01:11:10.675
<v Speaker 0>Alright. Any last words, Mark, before I let

01:11:10.675 --> 01:11:11.715
<v Speaker 0>you go back to your day?

01:11:12.670 --> 01:11:13.949
<v Speaker 1>No. I think, you know, you know, it's

01:11:13.949 --> 01:11:15.550
<v Speaker 1>a sandbox project. Like, if I if I

01:11:15.550 --> 01:11:17.230
<v Speaker 1>can, like, you know, like, we we been

01:11:17.230 --> 01:11:18.909
<v Speaker 1>in the sandbox for a year. I'd love

01:11:19.070 --> 01:11:20.989
<v Speaker 1>what we're really looking for is just, you

01:11:20.989 --> 01:11:23.550
<v Speaker 1>know, folks who, you know, find use cases

01:11:23.550 --> 01:11:25.505
<v Speaker 1>and, like, hit us up on the Kubernetes

01:11:25.505 --> 01:11:27.505
<v Speaker 1>Slack. There's a SchemaHero channel. Like, things where

01:11:27.505 --> 01:11:29.505
<v Speaker 1>it's working or not working, you know, we

01:11:29.505 --> 01:11:31.585
<v Speaker 1>wanna you know, we have a goal of

01:11:31.585 --> 01:11:32.945
<v Speaker 1>trying to get out of the sandbox and

01:11:32.945 --> 01:11:35.025
<v Speaker 1>move it to an incubating project sometime this

01:11:35.025 --> 01:11:36.305
<v Speaker 1>year. In order to do that, we need

01:11:36.305 --> 01:11:37.345
<v Speaker 1>to have demonstrated,

01:11:37.345 --> 01:11:38.945
<v Speaker 1>you know, use cases, and we we know

01:11:38.945 --> 01:11:40.749
<v Speaker 1>it's out there. Use People are using it.

01:11:40.750 --> 01:11:42.590
<v Speaker 1>You know, love to, anything that we can

01:11:42.590 --> 01:11:44.670
<v Speaker 1>do to help unblock or, you know, feature

01:11:44.670 --> 01:11:45.709
<v Speaker 1>requests or

01:11:45.870 --> 01:11:47.789
<v Speaker 1>anything like this, just we'd love to talk.

01:11:48.350 --> 01:11:50.830
<v Speaker 0>Awesome. Alright, everyone. Get involved if you like

01:11:50.830 --> 01:11:52.845
<v Speaker 0>what you've seen. Sure Mark will be happy

01:11:52.845 --> 01:11:55.485
<v Speaker 0>to answer questions on GitHub issues, Twitter,

01:11:56.205 --> 01:11:58.365
<v Speaker 0>anywhere else that you're participating. Is there a

01:11:58.365 --> 01:12:00.685
<v Speaker 0>Slack for for this? Yeah. It's in the

01:12:00.685 --> 01:12:02.605
<v Speaker 1>Kubernetes Slack. Yep. Alright. Okay. So check out

01:12:02.605 --> 01:12:05.030
<v Speaker 0>the channel on the Kubernetes Slack. Alright. Well,

01:12:05.030 --> 01:12:06.790
<v Speaker 0>thank you again, Mark. It was really good

01:12:06.790 --> 01:12:08.470
<v Speaker 0>fun. I enjoyed that. I'm looking forward to

01:12:08.470 --> 01:12:10.630
<v Speaker 0>playing with SchemaHero a little bit more. So

01:12:10.630 --> 01:12:11.990
<v Speaker 0>thank you for your time today, and I'll

01:12:11.990 --> 01:12:13.030
<v Speaker 0>speak to you again soon.

01:12:13.430 --> 01:12:13.910
<v Speaker 1>Thank you.
