WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 210af648-7d7a-429f-b176-b7dd5d88449c
Created: 2025-04-29T21:12:35.774Z
Duration: 5263.9663
Channels: 1

00:01:50.810 --> 00:01:51.530
<v Speaker 0>Hello.

00:01:51.690 --> 00:01:54.730
<v Speaker 0>Welcome to today's episode of Rawkode live. I

00:01:54.730 --> 00:01:56.330
<v Speaker 0>am your host, Rawkode.

00:01:57.045 --> 00:01:58.965
<v Speaker 0>Before we begin, I wanna take just a

00:01:58.965 --> 00:02:00.965
<v Speaker 0>moment to say thank you to Equinix Metal.

00:02:01.045 --> 00:02:02.725
<v Speaker 0>They are my employer and they allow me

00:02:02.725 --> 00:02:04.884
<v Speaker 0>the time and the resources to put this

00:02:04.965 --> 00:02:07.045
<v Speaker 0>the show together and, you know, make sure

00:02:07.045 --> 00:02:09.364
<v Speaker 0>that we have quite high quality cloud native

00:02:09.364 --> 00:02:10.884
<v Speaker 0>content that we can all learn together with.

00:02:11.300 --> 00:02:13.700
<v Speaker 0>If you wanna try out Equinix metal, you

00:02:13.700 --> 00:02:15.540
<v Speaker 0>can use the code Rawkode live. This will

00:02:15.540 --> 00:02:17.780
<v Speaker 0>give you $50 in credit. You can get

00:02:17.780 --> 00:02:19.459
<v Speaker 0>about a hundred hours of compute of our

00:02:19.459 --> 00:02:20.660
<v Speaker 0>smallest instance,

00:02:20.980 --> 00:02:23.299
<v Speaker 0>or you can, you know, use that money

00:02:23.299 --> 00:02:25.140
<v Speaker 0>a little bit less wisely and go for

00:02:25.140 --> 00:02:27.755
<v Speaker 0>some of the bigger beefier hardware. It's definitely

00:02:27.755 --> 00:02:28.795
<v Speaker 0>much more fun.

00:02:29.435 --> 00:02:30.955
<v Speaker 0>If you wanna chat to us, there is

00:02:30.955 --> 00:02:32.875
<v Speaker 0>a discord community where you can join and

00:02:32.875 --> 00:02:35.275
<v Speaker 0>ask questions or even suggest new episodes and

00:02:35.275 --> 00:02:36.955
<v Speaker 0>new technologies that you want to see us

00:02:36.955 --> 00:02:37.515
<v Speaker 0>cover.

00:02:37.755 --> 00:02:39.995
<v Speaker 0>Please remember to subscribe to the YouTube channel

00:02:40.050 --> 00:02:41.650
<v Speaker 0>and thumbs up the video if that helps

00:02:41.650 --> 00:02:43.730
<v Speaker 0>other people discover the content too.

00:02:44.450 --> 00:02:46.530
<v Speaker 0>And finally, we are gonna be looking at

00:02:46.530 --> 00:02:47.650
<v Speaker 0>OpenFaaS,

00:02:47.650 --> 00:02:50.370
<v Speaker 0>specifically, FASD today as well as Inlets. And

00:02:50.370 --> 00:02:52.770
<v Speaker 0>to do that, I am joined by Alex

00:02:52.770 --> 00:02:53.570
<v Speaker 0>Ellis,

00:02:53.570 --> 00:02:55.890
<v Speaker 0>the founder of OpenFaaS and Inlets.

00:02:56.645 --> 00:02:58.645
<v Speaker 1>Hi, David. How are you? Yeah.

00:02:59.445 --> 00:03:01.525
<v Speaker 0>I'm doing very well. Thank you. Yeah. It's

00:03:01.685 --> 00:03:04.165
<v Speaker 0>Excellent. Not a bad day, actually. How are

00:03:04.165 --> 00:03:05.925
<v Speaker 1>I just found out about the free credits

00:03:05.925 --> 00:03:07.045
<v Speaker 1>with Packet.

00:03:07.860 --> 00:03:08.740
<v Speaker 1>How

00:03:08.820 --> 00:03:11.300
<v Speaker 1>do you get those? I say Equinix metal.

00:03:11.300 --> 00:03:12.180
<v Speaker 1>How do you get those?

00:03:12.500 --> 00:03:14.820
<v Speaker 0>You can use the code Rawkode live. Let

00:03:14.820 --> 00:03:16.740
<v Speaker 0>me let's see. I have this all prepared.

00:03:16.740 --> 00:03:17.940
<v Speaker 0>$50

00:03:17.940 --> 00:03:19.860
<v Speaker 0>coupon. So you just use Rawkode dash live

00:03:19.860 --> 00:03:22.905
<v Speaker 0>as a coupon on metal.does that incidentally,

00:03:22.905 --> 00:03:24.585
<v Speaker 1>this has to do with our talk talk

00:03:24.585 --> 00:03:26.665
<v Speaker 1>today we're covering. How long would that last

00:03:26.665 --> 00:03:28.585
<v Speaker 1>on the cheapest node?

00:03:29.385 --> 00:03:30.505
<v Speaker 0>One hundred hours.

00:03:30.665 --> 00:03:33.305
<v Speaker 1>One hundred hours. So there's smallest machine 50

00:03:33.305 --> 00:03:34.265
<v Speaker 1>in a month, isn't it?

00:03:36.160 --> 00:03:37.920
<v Speaker 1>If you think about your Amazon Free Tier,

00:03:37.920 --> 00:03:39.600
<v Speaker 1>it'd be about seven fifty hours

00:03:40.160 --> 00:03:41.440
<v Speaker 1>for a whole month.

00:03:41.760 --> 00:03:43.840
<v Speaker 0>Yeah. I think so. Yeah. So it's about

00:03:43.840 --> 00:03:45.840
<v Speaker 1>the seventh of a month you get.

00:03:46.480 --> 00:03:48.960
<v Speaker 1>And you could run an Inlets exit server.

00:03:51.165 --> 00:03:53.245
<v Speaker 0>Yes. You definitely could. We're gonna take a

00:03:53.245 --> 00:03:54.765
<v Speaker 0>look at that today and see. But, yeah,

00:03:54.765 --> 00:03:56.685
<v Speaker 0>the 50 credit the $50 of credit allows

00:03:56.685 --> 00:03:58.205
<v Speaker 0>you to kinda see what bare metal is

00:03:58.205 --> 00:03:59.885
<v Speaker 0>all about, see the you know, it's much

00:03:59.885 --> 00:04:01.805
<v Speaker 0>more powerful than running on a virtualization there

00:04:01.805 --> 00:04:03.485
<v Speaker 0>and people can just go and play with

00:04:03.485 --> 00:04:05.005
<v Speaker 0>that, check it out, and see how they

00:04:05.005 --> 00:04:05.325
<v Speaker 0>get on.

00:04:06.480 --> 00:04:08.880
<v Speaker 0>Now we're gonna take a look at one

00:04:08.880 --> 00:04:10.880
<v Speaker 0>of your projects today. So

00:04:11.120 --> 00:04:12.720
<v Speaker 0>should we just take a minute?

00:04:12.960 --> 00:04:14.560
<v Speaker 0>We'll cover both of them, what they are,

00:04:14.560 --> 00:04:16.320
<v Speaker 0>what problem they're solving, and then we'll we'll

00:04:16.320 --> 00:04:18.735
<v Speaker 0>take it from there. So in fact, first,

00:04:18.735 --> 00:04:19.774
<v Speaker 0>why don't you tell us a little bit

00:04:19.774 --> 00:04:20.975
<v Speaker 0>about yourself, Alex?

00:04:22.575 --> 00:04:24.255
<v Speaker 1>Yeah. So

00:04:25.055 --> 00:04:25.615
<v Speaker 1>I

00:04:26.655 --> 00:04:28.815
<v Speaker 1>I live in England in The UK.

00:04:29.215 --> 00:04:29.855
<v Speaker 1>I've been

00:04:30.439 --> 00:04:32.840
<v Speaker 1>working with open source technology for quite a

00:04:32.840 --> 00:04:35.159
<v Speaker 1>few years, but more recently with containers and

00:04:35.159 --> 00:04:38.120
<v Speaker 1>things like that since about 2035.

00:04:39.400 --> 00:04:41.159
<v Speaker 1>I've written a lot of blog posts about

00:04:41.159 --> 00:04:41.960
<v Speaker 1>containers.

00:04:41.960 --> 00:04:42.199
<v Speaker 1>Probably,

00:04:42.805 --> 00:04:45.205
<v Speaker 1>if folks have googled for something, they might

00:04:45.205 --> 00:04:46.645
<v Speaker 1>have found one of my posts. Or if

00:04:46.645 --> 00:04:48.324
<v Speaker 1>you've ever set up a a Raspberry Pi

00:04:48.324 --> 00:04:50.724
<v Speaker 1>cluster with Docker and Kubernetes, you might have

00:04:50.724 --> 00:04:52.324
<v Speaker 1>come into my materials. So

00:04:52.724 --> 00:04:54.405
<v Speaker 1>today, what we're gonna look at

00:04:54.805 --> 00:04:56.965
<v Speaker 1>is a couple of projects. One of them

00:04:56.965 --> 00:04:59.360
<v Speaker 1>is a bit more niche and a bit

00:04:59.360 --> 00:05:02.160
<v Speaker 1>more it started off as an experiment that's

00:05:02.160 --> 00:05:03.200
<v Speaker 1>called FASD.

00:05:03.680 --> 00:05:05.840
<v Speaker 1>That is where we took OpenFaaS,

00:05:05.840 --> 00:05:08.960
<v Speaker 1>a platform for building serverless applications that are

00:05:08.960 --> 00:05:11.055
<v Speaker 1>portable, run on containers.

00:05:11.694 --> 00:05:13.455
<v Speaker 1>And we shrunk it down

00:05:13.935 --> 00:05:16.175
<v Speaker 1>and took all of the clustering out of

00:05:16.175 --> 00:05:19.055
<v Speaker 1>it, all of the networking so that the

00:05:19.055 --> 00:05:21.055
<v Speaker 1>only thing it does is runs

00:05:21.535 --> 00:05:23.294
<v Speaker 1>a single function container

00:05:23.455 --> 00:05:24.574
<v Speaker 1>on a single node,

00:05:25.750 --> 00:05:28.710
<v Speaker 1>and and that's that. And the reason for

00:05:28.710 --> 00:05:30.710
<v Speaker 1>doing it is it just simply makes it

00:05:30.710 --> 00:05:32.310
<v Speaker 1>much easier to manage.

00:05:32.870 --> 00:05:35.910
<v Speaker 1>Many people don't need an auto scaling multi

00:05:35.910 --> 00:05:36.550
<v Speaker 1>node,

00:05:37.030 --> 00:05:39.590
<v Speaker 1>multi AZ cluster just to run a few

00:05:39.590 --> 00:05:40.710
<v Speaker 1>webhooks or

00:05:41.264 --> 00:05:42.945
<v Speaker 1>deploy their first application

00:05:42.945 --> 00:05:43.825
<v Speaker 1>or you

00:05:44.384 --> 00:05:46.384
<v Speaker 1>might even find that there's a path where

00:05:46.384 --> 00:05:47.985
<v Speaker 1>you can start out in the world with

00:05:47.985 --> 00:05:50.465
<v Speaker 1>FASD and one VM. When you actually get

00:05:50.465 --> 00:05:52.544
<v Speaker 1>popular with your product, you can look at

00:05:52.544 --> 00:05:55.620
<v Speaker 1>Kubernetes and start to go go on from

00:05:55.620 --> 00:05:58.100
<v Speaker 1>there and upgrade yourself without actually

00:05:58.180 --> 00:05:59.940
<v Speaker 1>having to rework your code.

00:06:01.300 --> 00:06:02.020
<v Speaker 0>Nice.

00:06:02.340 --> 00:06:02.980
<v Speaker 0>So

00:06:03.220 --> 00:06:05.300
<v Speaker 0>it's funny that you talk about your blogging.

00:06:05.300 --> 00:06:06.900
<v Speaker 0>I I I'm gonna coin a term now.

00:06:06.900 --> 00:06:07.780
<v Speaker 0>You know how you get, like, the six

00:06:07.780 --> 00:06:08.900
<v Speaker 0>degrees of Kevin Bacon?

00:06:09.745 --> 00:06:11.664
<v Speaker 0>I'm I'm pretty sure there's some law here

00:06:11.664 --> 00:06:13.985
<v Speaker 0>about one degree of Alex Ellis where every

00:06:13.985 --> 00:06:15.425
<v Speaker 0>time I Google for something in the cloud

00:06:15.425 --> 00:06:18.145
<v Speaker 0>native landscape, there's always always an article on

00:06:18.145 --> 00:06:20.224
<v Speaker 0>your blog. Like, it's consistently

00:06:20.224 --> 00:06:22.145
<v Speaker 0>invaluable to me. So I'll just give you

00:06:22.145 --> 00:06:23.264
<v Speaker 0>a little bit of credit there. That was

00:06:23.264 --> 00:06:24.305
<v Speaker 0>all. Oh, thank you very much.

00:06:25.100 --> 00:06:26.140
<v Speaker 1>Obviously, if

00:06:26.700 --> 00:06:27.980
<v Speaker 1>one of the things that that I have

00:06:27.980 --> 00:06:30.460
<v Speaker 1>done, because you asked about about myself, is

00:06:30.460 --> 00:06:32.140
<v Speaker 1>to set out my own.

00:06:33.100 --> 00:06:35.500
<v Speaker 1>I've got a company that I founded three

00:06:35.500 --> 00:06:35.980
<v Speaker 1>years ago.

00:06:36.885 --> 00:06:39.365
<v Speaker 1>I've been working independently for eighteen months now

00:06:39.365 --> 00:06:41.125
<v Speaker 1>building up this this company.

00:06:41.525 --> 00:06:43.605
<v Speaker 1>A lot of what what I'm doing is

00:06:43.605 --> 00:06:44.485
<v Speaker 1>developer

00:06:44.485 --> 00:06:45.925
<v Speaker 1>brand consulting,

00:06:45.925 --> 00:06:48.805
<v Speaker 1>technical marketing, developer advocacy for brands,

00:06:49.270 --> 00:06:52.310
<v Speaker 1>even like Equinix metal. So think about project

00:06:52.310 --> 00:06:54.710
<v Speaker 1>that launched and recently be donated to the

00:06:54.710 --> 00:06:57.910
<v Speaker 1>CNCF sandbox project before you joined the

00:06:58.310 --> 00:07:00.789
<v Speaker 1>team. I was working with the guys very

00:07:00.789 --> 00:07:02.965
<v Speaker 1>early on, helping them figure out some of

00:07:02.965 --> 00:07:05.685
<v Speaker 1>the teething problems, writing about bare metal

00:07:06.565 --> 00:07:10.165
<v Speaker 1>automation and and networking, low level networking, stuff

00:07:10.165 --> 00:07:10.805
<v Speaker 1>like that.

00:07:11.285 --> 00:07:13.125
<v Speaker 1>So that that part that's a big part

00:07:13.125 --> 00:07:15.205
<v Speaker 1>of what I'm doing, but, really, it's this

00:07:15.205 --> 00:07:18.405
<v Speaker 1>open source projects like OpenFaaS and Inlets that

00:07:18.840 --> 00:07:21.240
<v Speaker 1>that I want to be working on.

00:07:21.879 --> 00:07:24.280
<v Speaker 1>And I couldn't find a job that would

00:07:24.280 --> 00:07:26.360
<v Speaker 1>pay me to work on these open source

00:07:26.360 --> 00:07:27.080
<v Speaker 1>projects.

00:07:27.479 --> 00:07:29.880
<v Speaker 1>So I basically created that job,

00:07:30.919 --> 00:07:31.479
<v Speaker 1>and

00:07:32.759 --> 00:07:34.520
<v Speaker 1>my clients

00:07:34.085 --> 00:07:34.805
<v Speaker 1>pay

00:07:35.205 --> 00:07:38.405
<v Speaker 1>me for helping them with what I know

00:07:38.405 --> 00:07:41.445
<v Speaker 1>best. And then that money, use to fund

00:07:41.445 --> 00:07:44.565
<v Speaker 1>my development on open source projects.

00:07:45.845 --> 00:07:46.165
<v Speaker 0>Awesome.

00:07:47.270 --> 00:07:49.350
<v Speaker 0>Well, we've already had our first comment. A

00:07:49.350 --> 00:07:52.150
<v Speaker 0>mutual friend has said hello. So, hey, Alistair.

00:07:52.150 --> 00:07:53.270
<v Speaker 0>Nice to see you.

00:07:53.750 --> 00:07:54.870
<v Speaker 1>Hi, Alistair.

00:07:55.510 --> 00:07:58.230
<v Speaker 1>Alistair is somebody that contributes to both Inlets

00:07:58.230 --> 00:08:00.470
<v Speaker 1>and OpenFaaS and a bunch of other projects,

00:08:00.470 --> 00:08:02.595
<v Speaker 1>and it's been very active over the last

00:08:02.595 --> 00:08:03.075
<v Speaker 1>year.

00:08:04.595 --> 00:08:06.195
<v Speaker 1>There are quite a few people that have

00:08:06.195 --> 00:08:08.515
<v Speaker 1>contributed to OpenFaaS itself over 300.

00:08:08.995 --> 00:08:10.195
<v Speaker 1>Probably

00:08:10.195 --> 00:08:12.275
<v Speaker 1>has about 10 or 15 now,

00:08:13.155 --> 00:08:14.595
<v Speaker 1>a bit more specialist,

00:08:14.675 --> 00:08:16.500
<v Speaker 1>but there are a few people that helped

00:08:16.500 --> 00:08:18.180
<v Speaker 1>me with that. Once I had the idea

00:08:18.180 --> 00:08:19.300
<v Speaker 1>and proved it out,

00:08:19.940 --> 00:08:21.940
<v Speaker 1>they come came on board and really just

00:08:21.940 --> 00:08:24.099
<v Speaker 1>pushed it forward. So it'd be kind it'd

00:08:24.099 --> 00:08:26.020
<v Speaker 1>be cool to to look at that today.

00:08:26.900 --> 00:08:27.220
<v Speaker 0>Yeah.

00:08:27.805 --> 00:08:29.724
<v Speaker 0>Just actually quickly looking for a tweet. I'm

00:08:29.724 --> 00:08:30.925
<v Speaker 0>pretty sure you posted it the other day

00:08:30.925 --> 00:08:32.365
<v Speaker 0>and I was like, how it started or

00:08:32.365 --> 00:08:33.804
<v Speaker 0>how we are now? And I was like,

00:08:33.804 --> 00:08:35.084
<v Speaker 0>a list of all your You can look

00:08:35.084 --> 00:08:36.765
<v Speaker 1>at the pinned tweet of OpenFaaS

00:08:37.084 --> 00:08:38.605
<v Speaker 1>OpenFaaS. On Twitter.

00:08:40.125 --> 00:08:42.730
<v Speaker 0>Well, let's get that up. Perfect.

00:08:42.730 --> 00:08:43.289
<v Speaker 0>Okay.

00:08:43.690 --> 00:08:45.050
<v Speaker 0>Let

00:08:45.050 --> 00:08:47.610
<v Speaker 0>me drag that there and then pop this

00:08:47.610 --> 00:08:48.170
<v Speaker 0>on.

00:08:50.410 --> 00:08:50.649
<v Speaker 0>So

00:08:51.690 --> 00:08:54.490
<v Speaker 0>That was your DockerCon talk in 2017 and

00:08:54.490 --> 00:08:56.115
<v Speaker 0>then, you know, what what are we? Three

00:08:56.115 --> 00:08:58.035
<v Speaker 0>years later and look just look at all

00:08:58.035 --> 00:08:59.635
<v Speaker 0>those faces. Definitely.

00:09:00.595 --> 00:09:02.915
<v Speaker 1>I can see you on that. I can

00:09:02.915 --> 00:09:04.355
<v Speaker 1>see Stefan Froden.

00:09:04.675 --> 00:09:07.315
<v Speaker 1>I can see Paula Lopez from from Red

00:09:07.315 --> 00:09:08.595
<v Speaker 1>Hat. And the funny thing is that I

00:09:08.595 --> 00:09:10.860
<v Speaker 1>know a lot of these avatars, and exactly

00:09:10.860 --> 00:09:12.060
<v Speaker 1>I can tell you the name of these

00:09:12.060 --> 00:09:15.100
<v Speaker 1>people. I can see Johan Siebens. I can

00:09:15.100 --> 00:09:16.140
<v Speaker 1>see Phil

00:09:17.180 --> 00:09:17.900
<v Speaker 1>from

00:09:18.060 --> 00:09:19.500
<v Speaker 1>Research.

00:09:19.500 --> 00:09:21.500
<v Speaker 1>There's a whole bunch of faces on there.

00:09:21.980 --> 00:09:23.660
<v Speaker 1>Dan, I see Simon.

00:09:24.825 --> 00:09:26.025
<v Speaker 1>Nick Nick

00:09:26.505 --> 00:09:28.585
<v Speaker 1>is on there as well from HashiCorp. There's

00:09:28.585 --> 00:09:30.425
<v Speaker 1>so many faces. Some people sort of came

00:09:30.425 --> 00:09:30.985
<v Speaker 1>on

00:09:31.385 --> 00:09:33.785
<v Speaker 1>four years ago in 2016 when it was

00:09:33.785 --> 00:09:35.145
<v Speaker 1>the first code was uploaded.

00:09:35.465 --> 00:09:37.785
<v Speaker 1>I've been around. Some people came in in

00:09:37.785 --> 00:09:39.065
<v Speaker 1>the last sort of month,

00:09:39.385 --> 00:09:39.705
<v Speaker 1>like, there.

00:09:40.850 --> 00:09:42.930
<v Speaker 1>That's something that I that I really like

00:09:42.930 --> 00:09:46.610
<v Speaker 1>about the community. Just people attracted to it,

00:09:46.690 --> 00:09:49.570
<v Speaker 1>get a sense of belonging and a bigger

00:09:49.570 --> 00:09:51.490
<v Speaker 1>purpose than just themselves.

00:09:52.290 --> 00:09:53.010
<v Speaker 1>And

00:09:53.765 --> 00:09:56.485
<v Speaker 1>recently, we've been converting all of our repos

00:09:56.485 --> 00:09:57.125
<v Speaker 1>from

00:09:57.525 --> 00:09:58.725
<v Speaker 1>Travis to

00:09:59.285 --> 00:10:02.565
<v Speaker 1>GitHub actions. It's been really hard and tedious

00:10:02.565 --> 00:10:04.885
<v Speaker 1>work, but there's been about eight different people

00:10:04.885 --> 00:10:06.485
<v Speaker 1>that have come alongside

00:10:06.485 --> 00:10:07.765
<v Speaker 1>and have really helped with that.

00:10:09.080 --> 00:10:12.120
<v Speaker 0>Nice. That's awesome to hear. Alright.

00:10:12.120 --> 00:10:13.400
<v Speaker 0>Let's get this closed.

00:10:14.040 --> 00:10:15.880
<v Speaker 0>So we've got a couple more comments. Let's

00:10:15.880 --> 00:10:17.400
<v Speaker 0>run through those and then you and I

00:10:17.400 --> 00:10:19.000
<v Speaker 0>will actually get started on what we plan

00:10:19.000 --> 00:10:21.240
<v Speaker 0>to do today. So we have a hello

00:10:21.240 --> 00:10:23.160
<v Speaker 0>from Johan. Nice to meet you, Johan.

00:10:23.855 --> 00:10:25.855
<v Speaker 0>Hello, Nice to see you again.

00:10:27.134 --> 00:10:28.175
<v Speaker 0>More hellos,

00:10:29.694 --> 00:10:30.495
<v Speaker 0>Vivek.

00:10:30.894 --> 00:10:33.055
<v Speaker 0>And our first question, is this a one

00:10:33.055 --> 00:10:34.894
<v Speaker 0>zero one session on OpenFaaS?

00:10:36.029 --> 00:10:37.550
<v Speaker 0>Not so much. We're gonna be taking a

00:10:37.550 --> 00:10:39.630
<v Speaker 0>look at one way to run OpenFaaS, which

00:10:39.630 --> 00:10:41.470
<v Speaker 0>is FASD. And I guess you may learn

00:10:41.470 --> 00:10:43.149
<v Speaker 0>a few things about OpenFaaS as we call.

00:10:43.149 --> 00:10:45.790
<v Speaker 0>But definitely not the specifics of what we're

00:10:45.790 --> 00:10:47.470
<v Speaker 0>gonna enter today. But we'll see how it

00:10:47.470 --> 00:10:47.950
<v Speaker 0>goes.

00:10:48.589 --> 00:10:50.269
<v Speaker 0>Now my screen's already shared, so I'm just

00:10:50.269 --> 00:10:52.805
<v Speaker 0>gonna leave this up. The only thing like,

00:10:52.805 --> 00:10:54.005
<v Speaker 0>there's something I always try to do in

00:10:54.005 --> 00:10:55.525
<v Speaker 0>a show is never to do anything upfront

00:10:55.525 --> 00:10:56.965
<v Speaker 0>or at least to do very little upfront

00:10:56.965 --> 00:10:57.845
<v Speaker 0>as possible.

00:10:59.125 --> 00:11:00.805
<v Speaker 0>So the only thing I've done is spin

00:11:00.805 --> 00:11:03.445
<v Speaker 0>up some bare metal. We have a CT

00:11:03.445 --> 00:11:04.405
<v Speaker 0>medium here

00:11:04.770 --> 00:11:07.650
<v Speaker 0>on Equinix metal. I have an SSH terminal,

00:11:07.650 --> 00:11:09.090
<v Speaker 0>and that is all that I have prepared

00:11:09.090 --> 00:11:09.970
<v Speaker 0>up front.

00:11:10.850 --> 00:11:13.490
<v Speaker 1>Yep. So that is a way that we

00:11:13.490 --> 00:11:15.330
<v Speaker 1>can set up FASD if we start off

00:11:15.330 --> 00:11:16.130
<v Speaker 1>with that.

00:11:16.690 --> 00:11:19.490
<v Speaker 1>The other way is if you click new

00:11:19.490 --> 00:11:19.890
<v Speaker 1>server,

00:11:20.825 --> 00:11:23.305
<v Speaker 1>we do maybe we just actually do both

00:11:24.185 --> 00:11:26.825
<v Speaker 1>and pick whatever you want, a small one,

00:11:27.145 --> 00:11:28.905
<v Speaker 1>whatever's gonna come up quickly.

00:11:30.185 --> 00:11:31.785
<v Speaker 0>Yeah. We'll just stick with this this easy

00:11:31.785 --> 00:11:33.385
<v Speaker 0>one. I use the OpenTOS

00:11:33.385 --> 00:11:34.185
<v Speaker 1>because

00:11:34.500 --> 00:11:36.340
<v Speaker 1>I don't generally spend a lot of time

00:11:36.340 --> 00:11:38.340
<v Speaker 1>on that for once. And then there's cloud

00:11:38.340 --> 00:11:40.020
<v Speaker 1>in it. Can you see where that is?

00:11:40.020 --> 00:11:41.060
<v Speaker 1>User data.

00:11:42.980 --> 00:11:44.580
<v Speaker 0>Uh-huh. We can drop in some clouds in

00:11:44.580 --> 00:11:45.700
<v Speaker 0>it here. Yep. Definitely.

00:11:46.180 --> 00:11:47.620
<v Speaker 1>And what you wanna do is if you

00:11:47.620 --> 00:11:48.980
<v Speaker 1>go to the inlets

00:11:49.380 --> 00:11:50.904
<v Speaker 1>the FaaSD

00:11:53.625 --> 00:11:54.505
<v Speaker 1>repo

00:11:58.745 --> 00:11:59.385
<v Speaker 1>and

00:11:59.865 --> 00:12:01.944
<v Speaker 1>see that cloud config file dot text.

00:12:04.120 --> 00:12:05.960
<v Speaker 0>Is this some cloud and a configuration to

00:12:05.960 --> 00:12:09.000
<v Speaker 0>spin up FaaS So we do both. Copy

00:12:09.000 --> 00:12:11.480
<v Speaker 1>and paste that in and then put your

00:12:11.560 --> 00:12:13.240
<v Speaker 1>SSH key in as well.

00:12:16.040 --> 00:12:17.160
<v Speaker 0>Okay.

00:12:17.160 --> 00:12:18.280
<v Speaker 0>Let's grab that.

00:12:20.735 --> 00:12:22.894
<v Speaker 0>We drop this in and we swap out

00:12:22.894 --> 00:12:24.415
<v Speaker 0>the SSH key.

00:12:30.894 --> 00:12:32.014
<v Speaker 0>Alright. So

00:12:32.334 --> 00:12:33.774
<v Speaker 0>s e key. See if I can know

00:12:33.774 --> 00:12:34.574
<v Speaker 0>where I had to do this.

00:12:39.420 --> 00:12:41.100
<v Speaker 1>Is this an RSA key?

00:12:42.460 --> 00:12:44.860
<v Speaker 0>It will be. This is she's in the

00:12:44.860 --> 00:12:47.339
<v Speaker 0>secure enclave of the Mac. So the fingerprint

00:12:47.339 --> 00:12:49.500
<v Speaker 0>scanner Nice. As my SSH key.

00:12:50.795 --> 00:12:52.154
<v Speaker 0>Just grab that.

00:12:53.834 --> 00:12:56.875
<v Speaker 0>Okay. So what this is doing is saying

00:12:56.875 --> 00:12:59.435
<v Speaker 0>update the package list. It's gonna install run

00:12:59.435 --> 00:13:02.875
<v Speaker 0>c. It's gonna pull down container d from

00:13:02.875 --> 00:13:05.274
<v Speaker 1>a release. Is what we're using instead of

00:13:05.274 --> 00:13:07.540
<v Speaker 1>Docker and instead of Kubernetes.

00:13:08.900 --> 00:13:10.340
<v Speaker 0>Alright. In fact, let's look at this on

00:13:10.340 --> 00:13:11.540
<v Speaker 0>the GitHub just so it's a bit bigger

00:13:11.540 --> 00:13:12.820
<v Speaker 0>for people to see. Yeah.

00:13:13.220 --> 00:13:14.900
<v Speaker 0>Then it's gonna restart

00:13:15.380 --> 00:13:19.220
<v Speaker 0>system d. It's going to pull down a

00:13:19.220 --> 00:13:20.420
<v Speaker 0>c and I plug in.

00:13:21.045 --> 00:13:22.485
<v Speaker 1>Yeah. That's right.

00:13:23.045 --> 00:13:25.365
<v Speaker 0>And then it clones FaaS d, so it's

00:13:25.365 --> 00:13:28.325
<v Speaker 0>building from source? No. It's not building from

00:13:28.325 --> 00:13:31.925
<v Speaker 1>source. It's basically, there's some metadata

00:13:32.165 --> 00:13:34.485
<v Speaker 1>that defines what services should be deployed,

00:13:34.950 --> 00:13:37.030
<v Speaker 1>and it's pulling down the specific

00:13:37.110 --> 00:13:37.990
<v Speaker 1>files

00:13:37.990 --> 00:13:40.470
<v Speaker 1>that go with that binary release,

00:13:40.870 --> 00:13:43.110
<v Speaker 1>then pulls the binary release down. And when

00:13:43.110 --> 00:13:45.030
<v Speaker 1>you run FaaS d install

00:13:45.190 --> 00:13:46.150
<v Speaker 1>line 22,

00:13:46.805 --> 00:13:49.285
<v Speaker 1>that takes whatever's in the current working directory

00:13:49.285 --> 00:13:51.524
<v Speaker 1>and overlays it in varlib

00:13:51.524 --> 00:13:52.565
<v Speaker 1>FaaS d.

00:13:52.964 --> 00:13:54.964
<v Speaker 1>And then the other commands after that simply

00:13:54.964 --> 00:13:57.685
<v Speaker 1>just debug information. So if something went wrong

00:13:57.685 --> 00:13:59.125
<v Speaker 1>and you look at your cloud and it

00:13:59.125 --> 00:14:00.884
<v Speaker 1>logs later, you could see what's gone wrong.

00:14:01.910 --> 00:14:03.030
<v Speaker 0>Okay. Perfect.

00:14:03.750 --> 00:14:05.110
<v Speaker 0>I love it when I see a sleep

00:14:05.110 --> 00:14:06.470
<v Speaker 0>60 in a script.

00:14:07.510 --> 00:14:09.910
<v Speaker 0>But this is just installing You won't need

00:14:09.910 --> 00:14:11.910
<v Speaker 1>a sleep 60 on bare metal.

00:14:13.190 --> 00:14:15.030
<v Speaker 0>Yeah. It is pretty pretty snappy.

00:14:15.355 --> 00:14:17.995
<v Speaker 0>Alright. Let's get this run. So we're just

00:14:17.995 --> 00:14:19.595
<v Speaker 0>gonna go with that. Now we did have

00:14:19.595 --> 00:14:20.395
<v Speaker 0>another

00:14:20.795 --> 00:14:23.435
<v Speaker 0>comment from Chris who's saying, does my SSH

00:14:23.435 --> 00:14:25.595
<v Speaker 0>key need SSH tars a at the beginning?

00:14:25.915 --> 00:14:27.035
<v Speaker 0>It actually doesn't.

00:14:27.850 --> 00:14:30.410
<v Speaker 0>This is a different protocol, different cipher. This

00:14:30.410 --> 00:14:31.930
<v Speaker 0>is an elliptic curve.

00:14:32.410 --> 00:14:34.890
<v Speaker 0>RSA generally, because that's a little bit less

00:14:34.890 --> 00:14:37.290
<v Speaker 0>secure these days. So you can swap them

00:14:37.290 --> 00:14:39.050
<v Speaker 0>out based on when you generate the key.

00:14:40.605 --> 00:14:42.685
<v Speaker 0>And then I left another comment, which I

00:14:42.685 --> 00:14:44.205
<v Speaker 0>think is a little reference to you there,

00:14:44.205 --> 00:14:46.525
<v Speaker 0>Alex. Mhmm. Will it be a nice arcade

00:14:46.525 --> 00:14:49.165
<v Speaker 0>game? Well, we'll looking We might touch arcade

00:14:49.165 --> 00:14:50.925
<v Speaker 1>later on when we come to look at

00:14:50.925 --> 00:14:51.325
<v Speaker 1>Inlets.

00:14:52.020 --> 00:14:54.740
<v Speaker 0>Okay. Cool. Nice. And one final hi from

00:14:54.740 --> 00:14:55.940
<v Speaker 0>Emery. Hi, Emery.

00:14:56.420 --> 00:14:57.940
<v Speaker 0>Alright. Let's get this spot up so we

00:14:57.940 --> 00:14:59.780
<v Speaker 0>can Yeah. So let's deploy that, and we'll

00:14:59.780 --> 00:15:01.540
<v Speaker 1>pretty much forget about it and just check

00:15:01.540 --> 00:15:02.660
<v Speaker 1>it later to see

00:15:03.220 --> 00:15:05.380
<v Speaker 1>what happened. Now on the other terminal that

00:15:05.380 --> 00:15:06.100
<v Speaker 1>you had open,

00:15:06.975 --> 00:15:09.214
<v Speaker 1>what what we can do and this is

00:15:09.214 --> 00:15:10.815
<v Speaker 1>something that Johan is on the call. He

00:15:10.815 --> 00:15:12.654
<v Speaker 1>helped with this. He just

00:15:13.774 --> 00:15:15.454
<v Speaker 1>took all of those steps and put them

00:15:15.454 --> 00:15:17.695
<v Speaker 1>in a batch file. So what we'll do

00:15:17.695 --> 00:15:20.510
<v Speaker 1>is clone the fast d repo. I ran

00:15:20.510 --> 00:15:23.950
<v Speaker 1>this yesterday on a couple of different machines.

00:15:26.910 --> 00:15:28.350
<v Speaker 0>But you don't have git.

00:15:30.190 --> 00:15:30.590
<v Speaker 0>Yeah.

00:15:32.205 --> 00:15:35.565
<v Speaker 0>K. Get code httpsgithub.com.

00:15:35.565 --> 00:15:36.365
<v Speaker 0>OpenFaaS FaaS.

00:15:37.325 --> 00:15:38.285
<v Speaker 1>FaaS d.

00:15:40.445 --> 00:15:41.965
<v Speaker 0>And that has got a batch script that

00:15:41.965 --> 00:15:43.725
<v Speaker 0>we can So if you've c d into

00:15:43.725 --> 00:15:46.285
<v Speaker 1>that, and then from there, dot forward slash

00:15:46.285 --> 00:15:46.685
<v Speaker 1>hack.

00:15:48.360 --> 00:15:49.560
<v Speaker 1>Don't c d.

00:15:49.960 --> 00:15:51.960
<v Speaker 1>Stay where you were. And then

00:15:52.680 --> 00:15:55.080
<v Speaker 1>dot forward slash hack install.

00:15:55.240 --> 00:15:55.960
<v Speaker 1>And

00:15:57.000 --> 00:15:58.440
<v Speaker 1>you can fire that away, and we can

00:15:58.680 --> 00:15:59.720
<v Speaker 1>we could have a look at it in

00:15:59.720 --> 00:16:01.960
<v Speaker 1>the in GitHub while it's going in if

00:16:01.960 --> 00:16:02.200
<v Speaker 1>you want.

00:16:02.885 --> 00:16:04.005
<v Speaker 0>Yeah. Let's do it.

00:16:04.405 --> 00:16:06.725
<v Speaker 1>And it's effectively gonna be very, very similar

00:16:06.725 --> 00:16:08.485
<v Speaker 1>to what we saw in the cloud in

00:16:08.485 --> 00:16:08.965
<v Speaker 1>it,

00:16:09.925 --> 00:16:10.805
<v Speaker 1>except

00:16:11.685 --> 00:16:14.645
<v Speaker 1>Containerd doesn't the team upstream team won't build

00:16:14.645 --> 00:16:16.485
<v Speaker 1>binaries for ARM, and they won't build them

00:16:16.485 --> 00:16:19.690
<v Speaker 1>for for Raspberry Pi either. So I've built

00:16:19.690 --> 00:16:22.810
<v Speaker 1>binaries and published them, and this script will

00:16:22.810 --> 00:16:24.730
<v Speaker 1>figure out what system you're on and pull

00:16:24.730 --> 00:16:26.090
<v Speaker 1>those binaries in.

00:16:27.930 --> 00:16:30.805
<v Speaker 1>It does seem to have YUM support, but

00:16:30.805 --> 00:16:32.645
<v Speaker 1>I haven't tested that. I'll have to ask

00:16:32.645 --> 00:16:34.245
<v Speaker 1>Johan about it.

00:16:34.885 --> 00:16:37.365
<v Speaker 1>I don't use Fedora or Chorus or anything

00:16:37.365 --> 00:16:38.085
<v Speaker 1>like that.

00:16:38.805 --> 00:16:41.685
<v Speaker 1>The CNI plug ins again are pulling off

00:16:41.685 --> 00:16:44.720
<v Speaker 1>the correct architecture. So this if you look

00:16:44.720 --> 00:16:47.440
<v Speaker 1>at my longer version, was set this variable

00:16:47.440 --> 00:16:49.120
<v Speaker 1>export x 64,

00:16:49.199 --> 00:16:50.639
<v Speaker 1>set it to this, that, or the other.

00:16:50.639 --> 00:16:53.360
<v Speaker 1>So we're just automating it all. Containerd goes

00:16:53.360 --> 00:16:55.360
<v Speaker 1>in. CNI goes in.

00:16:55.839 --> 00:16:58.365
<v Speaker 1>Run c goes in, and then the fast

00:16:58.365 --> 00:17:00.605
<v Speaker 1>d binary, and that's pretty much it.

00:17:01.645 --> 00:17:03.245
<v Speaker 0>Okay. So let's

00:17:03.405 --> 00:17:04.845
<v Speaker 0>let's try and

00:17:06.365 --> 00:17:08.045
<v Speaker 0>break down what fast d is then for

00:17:08.045 --> 00:17:09.645
<v Speaker 0>the people that are tuning in today. Right?

00:17:09.645 --> 00:17:11.565
<v Speaker 0>They may be familiar with OpenFaaS.

00:17:11.565 --> 00:17:14.089
<v Speaker 0>It is a functions as a service platform

00:17:14.089 --> 00:17:16.249
<v Speaker 0>that runs in Docker Swarm and Kubernetes

00:17:16.490 --> 00:17:18.569
<v Speaker 0>where you can schedule your functions and it

00:17:18.569 --> 00:17:20.889
<v Speaker 0>has some sort of eventing for triggering them

00:17:20.889 --> 00:17:23.289
<v Speaker 0>and lots of cool stuff like that. Right?

00:17:23.690 --> 00:17:26.249
<v Speaker 0>What is different with FASD

00:17:26.329 --> 00:17:27.849
<v Speaker 0>to the traditional OpenFaaS?

00:17:29.054 --> 00:17:31.774
<v Speaker 1>So for one, there is no docker on

00:17:31.774 --> 00:17:33.134
<v Speaker 1>the computer at all,

00:17:33.534 --> 00:17:36.174
<v Speaker 1>and there's no Kubernetes. There's no networking

00:17:36.735 --> 00:17:39.455
<v Speaker 1>in terms of multi host networking, and there's

00:17:39.455 --> 00:17:42.100
<v Speaker 1>no clustering at all. So it's just one

00:17:42.100 --> 00:17:42.659
<v Speaker 1>node.

00:17:42.900 --> 00:17:44.739
<v Speaker 1>And what that means is that

00:17:45.460 --> 00:17:46.499
<v Speaker 1>there's a

00:17:47.140 --> 00:17:48.100
<v Speaker 1>there was a

00:17:48.980 --> 00:17:52.499
<v Speaker 1>a discussion at the at the software

00:17:52.740 --> 00:17:53.380
<v Speaker 1>circus,

00:17:54.135 --> 00:17:55.895
<v Speaker 1>not the last one, but the one just

00:17:55.895 --> 00:17:57.575
<v Speaker 1>before that. And

00:17:59.095 --> 00:18:00.695
<v Speaker 1>Adrian basically

00:18:00.695 --> 00:18:01.495
<v Speaker 1>said,

00:18:02.455 --> 00:18:05.015
<v Speaker 1>I worry that when people use something like

00:18:05.015 --> 00:18:05.895
<v Speaker 1>Knative

00:18:06.055 --> 00:18:06.775
<v Speaker 1>that

00:18:07.210 --> 00:18:08.570
<v Speaker 1>they're deploying

00:18:08.730 --> 00:18:10.890
<v Speaker 1>sort of eight or nine layers of control

00:18:10.890 --> 00:18:13.290
<v Speaker 1>plane before they even get to deploy a

00:18:13.290 --> 00:18:15.130
<v Speaker 1>single function that might,

00:18:15.610 --> 00:18:18.410
<v Speaker 1>you know, be very efficient and very small.

00:18:18.970 --> 00:18:20.570
<v Speaker 1>And yet you've got all of this over

00:18:20.810 --> 00:18:23.690
<v Speaker 1>overhead. And what I had

00:18:23.155 --> 00:18:25.235
<v Speaker 1>I've got it up on my screen, is

00:18:25.875 --> 00:18:27.955
<v Speaker 1>I just want to run one function.

00:18:28.195 --> 00:18:29.955
<v Speaker 1>Sure. All you need is three to four

00:18:29.955 --> 00:18:30.835
<v Speaker 1>VMs,

00:18:31.075 --> 00:18:32.034
<v Speaker 1>Kubernetes,

00:18:32.435 --> 00:18:36.275
<v Speaker 1>CNI networking driver, a container registry, Ingress NGINX,

00:18:36.275 --> 00:18:39.450
<v Speaker 1>a load balancer, cert manager, Helm,

00:18:39.610 --> 00:18:40.409
<v Speaker 1>Flux,

00:18:40.730 --> 00:18:42.009
<v Speaker 1>CI server,

00:18:42.170 --> 00:18:43.049
<v Speaker 1>Docker,

00:18:43.050 --> 00:18:44.010
<v Speaker 1>Prometheus,

00:18:44.010 --> 00:18:44.889
<v Speaker 1>Grafana,

00:18:44.890 --> 00:18:46.490
<v Speaker 1>k native or OpenFaaS,

00:18:46.490 --> 00:18:47.370
<v Speaker 1>Istio,

00:18:47.530 --> 00:18:48.490
<v Speaker 1>your code,

00:18:48.650 --> 00:18:50.170
<v Speaker 1>and then a team to operate it.

00:18:52.115 --> 00:18:53.875
<v Speaker 1>Right? And I just want you just wanna

00:18:53.875 --> 00:18:56.835
<v Speaker 1>run away at that point. And Adrian's right.

00:18:56.835 --> 00:18:58.595
<v Speaker 1>He says I worry about the amount of

00:18:58.755 --> 00:19:00.995
<v Speaker 1>control plane there. Not only if you got

00:19:00.995 --> 00:19:01.795
<v Speaker 1>Kubernetes,

00:19:01.795 --> 00:19:05.155
<v Speaker 1>Istio, potentially Knative for OpenFaaS, and your app,

00:19:05.750 --> 00:19:07.670
<v Speaker 1>but everything else that's involved.

00:19:08.470 --> 00:19:10.470
<v Speaker 1>All of that infrastructure is actually really expensive

00:19:10.470 --> 00:19:12.790
<v Speaker 1>if you think about EKS or even running

00:19:12.790 --> 00:19:14.790
<v Speaker 1>on Equinix. It's gonna cost you huge amount

00:19:14.790 --> 00:19:15.430
<v Speaker 1>of money.

00:19:15.990 --> 00:19:18.310
<v Speaker 1>And so then the cost per invocation

00:19:18.550 --> 00:19:20.310
<v Speaker 1>compared to something like Lambda

00:19:20.625 --> 00:19:23.425
<v Speaker 1>is ridiculous. Like, it's so much cheaper to

00:19:23.425 --> 00:19:25.184
<v Speaker 1>use your million free requests

00:19:25.665 --> 00:19:28.145
<v Speaker 1>until it isn't, right, or until you need

00:19:28.145 --> 00:19:29.985
<v Speaker 1>a longer run time or until you have

00:19:29.985 --> 00:19:31.585
<v Speaker 1>a bigger image or

00:19:31.745 --> 00:19:33.905
<v Speaker 1>your team is more used to using containers.

00:19:34.789 --> 00:19:37.190
<v Speaker 1>And so, really, FaaS just gets away, gets

00:19:37.190 --> 00:19:38.549
<v Speaker 1>rid of all of that,

00:19:39.110 --> 00:19:41.350
<v Speaker 1>but it has some constraints that come in.

00:19:41.669 --> 00:19:43.350
<v Speaker 1>So you can't have a trade off without

00:19:43.350 --> 00:19:45.270
<v Speaker 1>losing something, and what you what you lose

00:19:45.270 --> 00:19:47.030
<v Speaker 1>is, well, that can only run on a

00:19:47.030 --> 00:19:48.855
<v Speaker 1>single node. You can only have a single

00:19:48.855 --> 00:19:50.054
<v Speaker 1>replica of a function,

00:19:50.775 --> 00:19:53.655
<v Speaker 1>and it's being orchestrated through system d rather

00:19:53.655 --> 00:19:54.215
<v Speaker 1>than

00:19:54.615 --> 00:19:55.415
<v Speaker 1>Kubernetes

00:19:55.415 --> 00:19:56.375
<v Speaker 1>multi nodes.

00:19:56.855 --> 00:19:58.855
<v Speaker 1>Some people are like, well, that means that

00:19:58.855 --> 00:20:00.535
<v Speaker 1>you can't have You

00:20:00.535 --> 00:20:01.975
<v Speaker 1>can't have failover, but

00:20:02.380 --> 00:20:04.220
<v Speaker 1>I don't think that's true.

00:20:04.780 --> 00:20:07.820
<v Speaker 1>You can still deploy three FaaS d appliances

00:20:07.980 --> 00:20:10.059
<v Speaker 1>and deploy the same function on all of

00:20:10.059 --> 00:20:12.220
<v Speaker 1>them and put a l four load balancer

00:20:12.220 --> 00:20:13.740
<v Speaker 1>in front of it. Yeah. Exactly.

00:20:15.495 --> 00:20:17.415
<v Speaker 1>Single single replicas.

00:20:17.415 --> 00:20:20.295
<v Speaker 1>Okay. Well, in OpenFaaS, I might deploy five

00:20:20.295 --> 00:20:22.215
<v Speaker 1>replicas of my website.

00:20:22.615 --> 00:20:24.695
<v Speaker 1>In FASD, you could just deploy it five

00:20:24.695 --> 00:20:26.215
<v Speaker 1>times with five different names

00:20:27.080 --> 00:20:29.640
<v Speaker 1>and have a load balance. So it introduces

00:20:29.640 --> 00:20:31.640
<v Speaker 1>some interesting constraints.

00:20:31.800 --> 00:20:34.120
<v Speaker 1>And what I found quite interesting is that

00:20:34.120 --> 00:20:36.039
<v Speaker 1>people are already putting in to production.

00:20:36.520 --> 00:20:38.520
<v Speaker 1>There's a company called Sprucey

00:20:38.760 --> 00:20:40.840
<v Speaker 1>in China. They do machine learning.

00:20:40.920 --> 00:20:42.280
<v Speaker 1>They're deploying their models

00:20:42.975 --> 00:20:45.215
<v Speaker 1>in FaaS d like an appliance.

00:20:45.615 --> 00:20:47.615
<v Speaker 1>So they build it out using something like

00:20:47.615 --> 00:20:50.014
<v Speaker 1>Kubeflow. They push it into a docker image,

00:20:50.335 --> 00:20:52.015
<v Speaker 1>and then they just deploy that to FaaS

00:20:52.015 --> 00:20:54.495
<v Speaker 1>d, and it's super low maintenance.

00:20:54.895 --> 00:20:56.655
<v Speaker 1>As you saw with that script we just

00:20:56.655 --> 00:20:58.330
<v Speaker 1>ran In

00:20:58.330 --> 00:21:00.010
<v Speaker 1>a very short period of time, you just

00:21:00.010 --> 00:21:02.330
<v Speaker 1>have everything working or you cloud in it

00:21:02.330 --> 00:21:03.769
<v Speaker 1>or terraform it up and

00:21:04.250 --> 00:21:05.210
<v Speaker 1>you're good to go.

00:21:06.250 --> 00:21:08.409
<v Speaker 0>Yeah. I mean, I definitely see the appeal

00:21:08.409 --> 00:21:09.929
<v Speaker 0>of of this approach, you know. For some

00:21:09.929 --> 00:21:12.254
<v Speaker 0>of use cases, like, thinking if I wanna

00:21:12.254 --> 00:21:14.014
<v Speaker 0>react to get a web hooks and it's

00:21:14.014 --> 00:21:16.174
<v Speaker 0>a really simple thing. I just wanna

00:21:16.495 --> 00:21:18.174
<v Speaker 0>write something to influx to be or to

00:21:18.174 --> 00:21:20.254
<v Speaker 0>Prometheus or anyone like that for some basic

00:21:20.254 --> 00:21:22.414
<v Speaker 0>metrics. Then a fast d setup is gonna

00:21:22.414 --> 00:21:24.174
<v Speaker 0>be much more cost effective to me than

00:21:24.174 --> 00:21:25.860
<v Speaker 0>running a Kubernetes cluster. Cluster. Now, of course,

00:21:25.860 --> 00:21:27.620
<v Speaker 0>if I have a Kubernetes cluster, that that's

00:21:27.620 --> 00:21:29.140
<v Speaker 0>fine. Like, you know, go down that path.

00:21:29.140 --> 00:21:30.179
<v Speaker 0>Use OpenFaaS.

00:21:30.420 --> 00:21:32.500
<v Speaker 0>But there's I can see loads of use

00:21:32.500 --> 00:21:34.340
<v Speaker 0>cases for me having a small machine running

00:21:34.340 --> 00:21:36.340
<v Speaker 0>all the time with PaaS d and doing

00:21:36.340 --> 00:21:38.905
<v Speaker 0>some really cool automation stuff like that. There's

00:21:38.905 --> 00:21:41.065
<v Speaker 1>a guy from Puppet that's using it as

00:21:41.065 --> 00:21:43.065
<v Speaker 1>well, and he emailed he emailed in and

00:21:43.065 --> 00:21:45.465
<v Speaker 1>said, we're using it in our church. Basically,

00:21:45.785 --> 00:21:47.865
<v Speaker 1>there's a sermon that's going on live broadcast

00:21:47.865 --> 00:21:50.345
<v Speaker 1>a bit like this, but they're they're preaching

00:21:50.345 --> 00:21:53.120
<v Speaker 1>instead of talking about technology and tools. And

00:21:53.120 --> 00:21:55.520
<v Speaker 1>people can text a number.

00:21:55.600 --> 00:21:58.000
<v Speaker 1>You could even use this with your show.

00:21:58.080 --> 00:22:00.400
<v Speaker 1>You can text in your question, and it

00:22:00.400 --> 00:22:03.280
<v Speaker 1>comes into Slack, and then the staff can

00:22:03.280 --> 00:22:04.880
<v Speaker 1>reply on a thread.

00:22:05.360 --> 00:22:06.880
<v Speaker 1>And if they reply in the thread, it

00:22:06.880 --> 00:22:08.000
<v Speaker 1>texts the person back.

00:22:09.115 --> 00:22:11.595
<v Speaker 1>It's completely automated, and it all runs on

00:22:11.595 --> 00:22:13.835
<v Speaker 1>FaaS d. He's got the source up on

00:22:13.835 --> 00:22:16.075
<v Speaker 1>GitHub. It's in the adopters file for it.

00:22:16.154 --> 00:22:17.835
<v Speaker 1>And I just thought that was so such

00:22:17.835 --> 00:22:19.034
<v Speaker 1>a creative use.

00:22:19.355 --> 00:22:21.115
<v Speaker 1>And I would not want to maintain or

00:22:21.115 --> 00:22:22.955
<v Speaker 1>run a Kubernetes cluster just to have that.

00:22:24.200 --> 00:22:26.920
<v Speaker 0>No. Definitely not. No. This is definitely I

00:22:26.920 --> 00:22:28.360
<v Speaker 0>mean, this runs on a Raspberry Pi as

00:22:28.360 --> 00:22:29.800
<v Speaker 0>well. I could have this running in my

00:22:29.800 --> 00:22:30.360
<v Speaker 0>house

00:22:30.760 --> 00:22:33.240
<v Speaker 0>constantly. But you know that the the treasure

00:22:33.240 --> 00:22:35.320
<v Speaker 1>trove, have you accessed that recently?

00:22:37.320 --> 00:22:39.320
<v Speaker 0>Last month, perhaps? Did it work for you?

00:22:40.085 --> 00:22:41.445
<v Speaker 0>The last time I went on to it,

00:22:41.445 --> 00:22:43.365
<v Speaker 0>did work for me. Yes. If you go

00:22:43.365 --> 00:22:45.525
<v Speaker 1>to that, that is actually running on my

00:22:45.525 --> 00:22:48.405
<v Speaker 1>Raspberry Pi. Oh, is it? Nice. Nice. In

00:22:48.405 --> 00:22:50.085
<v Speaker 1>in my house downstairs,

00:22:50.405 --> 00:22:51.525
<v Speaker 1>plugged in by the TV.

00:22:52.380 --> 00:22:54.700
<v Speaker 0>Exposed via Inlets, I guess? It is firing

00:22:54.700 --> 00:22:55.340
<v Speaker 1>less.

00:22:56.220 --> 00:22:57.900
<v Speaker 0>Right. Well, I think

00:22:58.060 --> 00:22:59.580
<v Speaker 0>let let's show people how that's all works

00:22:59.580 --> 00:23:01.820
<v Speaker 0>then. I think let's let's So do do

00:23:01.820 --> 00:23:03.820
<v Speaker 1>the do that last command that it's told

00:23:03.820 --> 00:23:04.380
<v Speaker 1>you to do there.

00:23:06.545 --> 00:23:08.065
<v Speaker 0>Alrighty.

00:23:08.385 --> 00:23:09.745
<v Speaker 0>Well, I don't need to sit at all.

00:23:09.745 --> 00:23:10.305
<v Speaker 0>I'm I'm

00:23:15.185 --> 00:23:17.825
<v Speaker 1>And now we now we basically connected, so

00:23:17.825 --> 00:23:19.265
<v Speaker 1>FaaS CLI list

00:23:19.559 --> 00:23:21.960
<v Speaker 1>We'll show you what functions are deployed.

00:23:22.919 --> 00:23:24.039
<v Speaker 1>There aren't any.

00:23:24.279 --> 00:23:26.200
<v Speaker 1>And then you can do, like, FaaS CLI

00:23:26.200 --> 00:23:28.360
<v Speaker 1>version, and it'll tell you what provider we're

00:23:28.360 --> 00:23:30.840
<v Speaker 1>using. So if you are using Kubernetes or

00:23:30.840 --> 00:23:32.039
<v Speaker 1>container that you've forgotten,

00:23:32.995 --> 00:23:35.554
<v Speaker 1>you could try that now, FaaS CLI version.

00:23:38.595 --> 00:23:40.674
<v Speaker 1>And it's telling you it's using container d

00:23:40.674 --> 00:23:42.754
<v Speaker 1>and it's version zero nine eight.

00:23:42.995 --> 00:23:45.235
<v Speaker 0>Okay. So by default, when I install and

00:23:45.235 --> 00:23:46.115
<v Speaker 0>run FaaS d,

00:23:47.000 --> 00:23:50.520
<v Speaker 0>I'm getting a gateway listening on port eighty

00:23:50.520 --> 00:23:53.320
<v Speaker 0>eighty for me to receive requests.

00:23:53.800 --> 00:23:56.680
<v Speaker 1>You get that. You also get Prometheus.

00:23:56.680 --> 00:23:58.280
<v Speaker 1>You also have NATs.

00:23:58.280 --> 00:23:58.760
<v Speaker 1>And

00:23:59.320 --> 00:24:00.760
<v Speaker 1>if you look at

00:24:01.965 --> 00:24:02.925
<v Speaker 1>OpenVim,

00:24:02.925 --> 00:24:05.725
<v Speaker 1>for instance, and take a look at var

00:24:05.725 --> 00:24:06.845
<v Speaker 1>fuzz d.

00:24:08.845 --> 00:24:13.245
<v Speaker 0>Just yeah. Prometheus NATs. Okay. Var fuzz d.

00:24:15.560 --> 00:24:18.600
<v Speaker 1>Varlib. Sorry. Fuzz d. Varlib. Correct. Gotcha.

00:24:21.400 --> 00:24:22.120
<v Speaker 1>Yep.

00:24:22.440 --> 00:24:24.120
<v Speaker 1>So we've got fuzz d and fuzz d

00:24:24.120 --> 00:24:26.360
<v Speaker 1>provider. They're two separate processes that run on

00:24:26.360 --> 00:24:26.760
<v Speaker 1>the host.

00:24:27.255 --> 00:24:30.855
<v Speaker 1>FASD is the basic container orchestrator that starts

00:24:30.855 --> 00:24:33.095
<v Speaker 1>all the core services for OpenFaaS.

00:24:33.335 --> 00:24:34.695
<v Speaker 1>FASD provider,

00:24:35.095 --> 00:24:37.655
<v Speaker 1>its only job is to do CRUD and

00:24:37.655 --> 00:24:38.935
<v Speaker 1>invocations on functions.

00:24:39.649 --> 00:24:42.529
<v Speaker 1>And we've gotten split out. There are two

00:24:42.529 --> 00:24:44.209
<v Speaker 1>different processes that are running.

00:24:44.690 --> 00:24:47.169
<v Speaker 1>If you look in FaaS d hosts

00:24:49.649 --> 00:24:52.289
<v Speaker 1>is that showing up? Open that one up

00:24:52.289 --> 00:24:52.850
<v Speaker 1>if you like.

00:24:53.695 --> 00:24:56.655
<v Speaker 1>What we've got here is the CNI plug

00:24:56.655 --> 00:24:59.215
<v Speaker 1>in IP addresses for all of the services

00:24:59.215 --> 00:25:01.375
<v Speaker 1>that we've started through FASD,

00:25:02.015 --> 00:25:04.415
<v Speaker 1>and that then allows us to mount that

00:25:04.415 --> 00:25:05.455
<v Speaker 1>host file

00:25:05.535 --> 00:25:08.015
<v Speaker 1>into Prometheus, into the key worker, and then

00:25:08.015 --> 00:25:09.650
<v Speaker 1>the key worker can say, I wanna talk

00:25:09.650 --> 00:25:12.290
<v Speaker 1>to the gateway, and it's able to, and

00:25:12.290 --> 00:25:13.330
<v Speaker 1>vice versa.

00:25:13.730 --> 00:25:16.049
<v Speaker 1>So it's a basic service discovery.

00:25:18.370 --> 00:25:21.170
<v Speaker 0>Okay. And these are all running via container

00:25:21.170 --> 00:25:22.610
<v Speaker 0>d as well. Right? These are not native

00:25:22.610 --> 00:25:25.815
<v Speaker 0>processes on my host. Correct. Now let's look

00:25:25.815 --> 00:25:26.695
<v Speaker 1>at the

00:25:27.655 --> 00:25:30.455
<v Speaker 1>Docker Compose file in that re in that

00:25:30.455 --> 00:25:31.174
<v Speaker 1>folder.

00:25:31.735 --> 00:25:33.735
<v Speaker 1>Now this isn't actually running

00:25:33.815 --> 00:25:35.575
<v Speaker 1>with Docker or Docker Compose,

00:25:37.980 --> 00:25:40.220
<v Speaker 1>but we were able to use the Compose

00:25:40.220 --> 00:25:41.100
<v Speaker 1>format.

00:25:41.740 --> 00:25:44.059
<v Speaker 1>This was something that was open sourced very

00:25:44.059 --> 00:25:46.139
<v Speaker 1>recently, and there was a nice Golang

00:25:46.220 --> 00:25:48.620
<v Speaker 1>library for it. And as I say, many

00:25:48.620 --> 00:25:51.740
<v Speaker 1>people have helped with OpenFaaS. Lucas Rose did

00:25:51.740 --> 00:25:53.020
<v Speaker 1>the work for this, and

00:25:53.644 --> 00:25:55.004
<v Speaker 1>he converted it

00:25:55.804 --> 00:25:57.725
<v Speaker 1>from being hard coded in Go because it

00:25:57.725 --> 00:25:59.565
<v Speaker 1>started as an experiment as a proof of

00:25:59.565 --> 00:26:01.004
<v Speaker 1>concept, and that was fine.

00:26:01.404 --> 00:26:03.644
<v Speaker 1>And now not only can you just sort

00:26:03.644 --> 00:26:05.404
<v Speaker 1>of go in here and hack on the

00:26:05.404 --> 00:26:08.125
<v Speaker 1>variables or update the Docker image from 18

00:26:08.125 --> 00:26:09.005
<v Speaker 1>to 20,

00:26:10.100 --> 00:26:12.820
<v Speaker 1>You can also add in extra stuff. So

00:26:12.820 --> 00:26:14.580
<v Speaker 1>if you want to run caddy and have

00:26:14.580 --> 00:26:16.980
<v Speaker 1>a reverse proxy to terminate TLS,

00:26:17.380 --> 00:26:19.059
<v Speaker 1>you simply just add it at the end.

00:26:19.140 --> 00:26:21.060
<v Speaker 1>If you wanna run influx because you're using

00:26:21.060 --> 00:26:22.900
<v Speaker 1>it with your functions or MySQL, you can

00:26:22.900 --> 00:26:23.540
<v Speaker 1>add it at the end.

00:26:24.905 --> 00:26:27.145
<v Speaker 1>You can add stuff like the Chrome Connect.

00:26:27.145 --> 00:26:28.665
<v Speaker 1>In fact, I did that at home just

00:26:28.665 --> 00:26:29.304
<v Speaker 1>before

00:26:29.625 --> 00:26:31.625
<v Speaker 1>we got on this call on my my

00:26:31.625 --> 00:26:32.424
<v Speaker 1>server.

00:26:32.825 --> 00:26:33.384
<v Speaker 1>And

00:26:33.625 --> 00:26:35.865
<v Speaker 1>this is something that has made it even

00:26:35.865 --> 00:26:36.425
<v Speaker 1>more powerful

00:26:37.430 --> 00:26:40.309
<v Speaker 1>because you only need this one file. FASD

00:26:40.309 --> 00:26:41.669
<v Speaker 1>will will run

00:26:41.830 --> 00:26:43.830
<v Speaker 1>and manage the containers for you,

00:26:44.150 --> 00:26:45.990
<v Speaker 1>and then FASD provider

00:26:46.070 --> 00:26:48.390
<v Speaker 1>runs the the other bits for you.

00:26:49.525 --> 00:26:51.525
<v Speaker 0>K. So I can just add stuff to

00:26:51.525 --> 00:26:52.085
<v Speaker 0>here?

00:26:52.725 --> 00:26:53.365
<v Speaker 1>Yeah.

00:26:54.485 --> 00:26:56.325
<v Speaker 1>You need to follow the exact

00:26:56.565 --> 00:26:58.165
<v Speaker 1>sort of format that we've got here.

00:27:04.840 --> 00:27:06.760
<v Speaker 1>Now what else do you need? Now I

00:27:06.760 --> 00:27:08.280
<v Speaker 0>just wanna expose the port.

00:27:12.520 --> 00:27:13.080
<v Speaker 0>That's it?

00:27:13.894 --> 00:27:15.495
<v Speaker 1>Just check one of the other ones to

00:27:15.495 --> 00:27:16.855
<v Speaker 1>make sure that you've done that right. And

00:27:16.855 --> 00:27:18.134
<v Speaker 1>you might need do you need a command

00:27:18.134 --> 00:27:19.414
<v Speaker 1>on that container, or does it have it

00:27:19.414 --> 00:27:21.495
<v Speaker 1>built in? Yeah. It's all built in. All

00:27:21.495 --> 00:27:22.774
<v Speaker 0>I just wanna do is run that image

00:27:22.774 --> 00:27:24.774
<v Speaker 0>as is. Just look at that example. Stop

00:27:24.774 --> 00:27:25.894
<v Speaker 1>scrolling. There you are.

00:27:27.230 --> 00:27:28.429
<v Speaker 1>You probably need

00:27:28.830 --> 00:27:30.510
<v Speaker 1>net cap raw on it.

00:27:30.830 --> 00:27:32.750
<v Speaker 1>I would just copy and paste those two

00:27:32.750 --> 00:27:33.390
<v Speaker 1>lines.

00:27:35.630 --> 00:27:36.350
<v Speaker 1>Yep.

00:27:37.230 --> 00:27:38.910
<v Speaker 1>Looks about right to me.

00:27:39.865 --> 00:27:42.265
<v Speaker 1>And then it's because it's in system d,

00:27:42.265 --> 00:27:44.424
<v Speaker 1>do a system d daemon reload

00:27:44.505 --> 00:27:46.664
<v Speaker 1>and then a restart FaaS d.

00:27:51.705 --> 00:27:52.105
<v Speaker 1>Now, again,

00:27:52.870 --> 00:27:54.470
<v Speaker 1>one of the benefits of having this in

00:27:54.470 --> 00:27:56.390
<v Speaker 1>the journal is that and and why this

00:27:56.390 --> 00:27:58.309
<v Speaker 1>is taking a few seconds is it's shutting

00:27:58.309 --> 00:28:00.789
<v Speaker 1>down all those containers that are running.

00:28:01.029 --> 00:28:03.990
<v Speaker 1>It's not just deleting them or or kill

00:28:03.990 --> 00:28:04.630
<v Speaker 1>nining them.

00:28:05.845 --> 00:28:08.725
<v Speaker 1>We would do a journal CTL

00:28:09.125 --> 00:28:10.244
<v Speaker 1>dash u

00:28:10.485 --> 00:28:11.684
<v Speaker 1>FaaS d

00:28:11.765 --> 00:28:13.525
<v Speaker 1>and put a dash f on it, and

00:28:13.525 --> 00:28:15.124
<v Speaker 1>that would allow us to watch

00:28:15.605 --> 00:28:17.365
<v Speaker 1>the logs as they're coming up, and you'll

00:28:17.365 --> 00:28:18.885
<v Speaker 1>see various bits getting exposed.

00:28:22.669 --> 00:28:23.389
<v Speaker 1>Yep.

00:28:24.110 --> 00:28:26.029
<v Speaker 1>The other reason that that took slightly longer

00:28:26.029 --> 00:28:28.190
<v Speaker 1>is because we actually had to pull

00:28:28.429 --> 00:28:29.149
<v Speaker 1>down

00:28:29.950 --> 00:28:31.950
<v Speaker 1>the image for influx.

00:28:33.470 --> 00:28:34.989
<v Speaker 1>I would imagine

00:28:35.575 --> 00:28:37.255
<v Speaker 0>Unless I got the image name wrong, which

00:28:37.255 --> 00:28:39.015
<v Speaker 0>is also very possible. Yeah. Have a look

00:28:39.015 --> 00:28:39.895
<v Speaker 1>at the looks.

00:28:40.935 --> 00:28:43.095
<v Speaker 0>Okay. Let's do that. Let's do the this

00:28:43.095 --> 00:28:43.735
<v Speaker 0>way.

00:28:45.175 --> 00:28:45.735
<v Speaker 0>Hit there.

00:28:51.020 --> 00:28:52.700
<v Speaker 0>I guess I'll just filter.

00:28:56.380 --> 00:28:59.419
<v Speaker 1>You didn't change the right file. Sorry. I'm

00:28:59.419 --> 00:29:01.179
<v Speaker 0>changing the get checker. I'm not changing the

00:29:01.179 --> 00:29:03.340
<v Speaker 0>one. Just do a c p of that.

00:29:03.340 --> 00:29:05.419
<v Speaker 1>C p into the location.

00:29:06.355 --> 00:29:07.554
<v Speaker 0>That's that's the

00:29:09.715 --> 00:29:11.234
<v Speaker 1>Yeah. There you go.

00:29:13.394 --> 00:29:15.075
<v Speaker 0>Yeah. That was that would have been quite

00:29:15.075 --> 00:29:16.755
<v Speaker 0>a magic Do every start with an and

00:29:16.755 --> 00:29:18.515
<v Speaker 1>at the end and then get the logs

00:29:18.515 --> 00:29:19.794
<v Speaker 1>up with an f and then we can

00:29:19.794 --> 00:29:20.914
<v Speaker 1>watch it spinning around.

00:29:22.480 --> 00:29:23.759
<v Speaker 1>Put it in the background.

00:29:24.960 --> 00:29:26.320
<v Speaker 1>So, actually, ampersand.

00:29:26.320 --> 00:29:27.679
<v Speaker 1>Yeah. Ampersand. Yeah.

00:29:28.400 --> 00:29:29.200
<v Speaker 1>Right.

00:29:30.480 --> 00:29:31.120
<v Speaker 1>Dash f.

00:29:35.135 --> 00:29:36.735
<v Speaker 0>Alright. So currently,

00:29:37.215 --> 00:29:37.774
<v Speaker 0>it's

00:29:38.815 --> 00:29:40.735
<v Speaker 0>just shutting down some containers by the looks

00:29:40.735 --> 00:29:42.655
<v Speaker 0>of it. Because it's shutting down all the

00:29:42.655 --> 00:29:45.294
<v Speaker 1>core containers. So NATs runs, which means you

00:29:45.294 --> 00:29:46.895
<v Speaker 1>can actually do asynchronous processing.

00:29:47.510 --> 00:29:49.750
<v Speaker 1>One of the things about NAT the NATs

00:29:49.750 --> 00:29:51.270
<v Speaker 1>and the way we've used it is that

00:29:51.270 --> 00:29:53.430
<v Speaker 1>you can do an invocation. Let's say, I

00:29:53.430 --> 00:29:55.350
<v Speaker 1>know you've got your git series project.

00:29:55.750 --> 00:29:57.830
<v Speaker 1>You are gonna scan a repo, and you've

00:29:57.830 --> 00:29:59.590
<v Speaker 1>gotta check it, not only check it out,

00:29:59.590 --> 00:30:00.070
<v Speaker 1>but also

00:30:00.995 --> 00:30:02.595
<v Speaker 1>run a bunch of other stuff on it

00:30:02.595 --> 00:30:03.554
<v Speaker 1>afterwards.

00:30:05.795 --> 00:30:08.275
<v Speaker 1>Yeah. Maybe maybe that isn't correct. Yeah. I'm

00:30:08.275 --> 00:30:09.875
<v Speaker 0>just double checking it now. You can have

00:30:09.875 --> 00:30:12.115
<v Speaker 1>the function run-in an async way, and then

00:30:12.115 --> 00:30:14.530
<v Speaker 1>at the end, it will post the result

00:30:14.530 --> 00:30:16.850
<v Speaker 1>of that either to another function or to

00:30:16.850 --> 00:30:18.770
<v Speaker 1>a request bin or wherever you want it

00:30:18.770 --> 00:30:19.410
<v Speaker 1>to go.

00:30:22.850 --> 00:30:24.450
<v Speaker 0>So it's a v

00:30:24.530 --> 00:30:25.810
<v Speaker 0>two zero,

00:30:26.115 --> 00:30:28.275
<v Speaker 0>and the latest is 2. So let's just

00:30:28.275 --> 00:30:28.995
<v Speaker 0>do that.

00:30:30.355 --> 00:30:31.235
<v Speaker 0>Alright.

00:30:32.595 --> 00:30:33.235
<v Speaker 0>Journal.

00:30:35.475 --> 00:30:38.754
<v Speaker 0>There we go. No damage that time. Okay.

00:30:39.155 --> 00:30:40.755
<v Speaker 0>So that just means that

00:30:41.130 --> 00:30:43.530
<v Speaker 0>there's no added that container to my FaaS

00:30:43.530 --> 00:30:46.490
<v Speaker 0>setup yet. It's running. Yeah. So Now here's

00:30:46.490 --> 00:30:47.049
<v Speaker 1>something.

00:30:47.290 --> 00:30:49.049
<v Speaker 1>Why don't we get the logs for that?

00:30:52.170 --> 00:30:53.049
<v Speaker 0>Command?

00:30:53.450 --> 00:30:53.690
<v Speaker 1>No.

00:30:54.514 --> 00:30:55.714
<v Speaker 1>On the repo,

00:30:55.715 --> 00:30:57.075
<v Speaker 1>it would tell you how to get the

00:30:57.075 --> 00:30:58.754
<v Speaker 1>logs for a core service.

00:31:05.794 --> 00:31:07.154
<v Speaker 1>So that's for a function.

00:31:08.880 --> 00:31:11.120
<v Speaker 1>And, also, we have FaaS CLI logs,

00:31:11.280 --> 00:31:13.279
<v Speaker 1>and this is for a core component.

00:31:13.760 --> 00:31:15.760
<v Speaker 1>And the default there is the namespace. So

00:31:15.760 --> 00:31:18.000
<v Speaker 1>probably you're gonna change the the namespace to

00:31:18.000 --> 00:31:20.000
<v Speaker 1>OpenFaaS in the future, but for now, it's

00:31:20.000 --> 00:31:22.000
<v Speaker 1>just default and then a colon

00:31:22.465 --> 00:31:23.905
<v Speaker 1>and then the name as you put it

00:31:23.905 --> 00:31:24.865
<v Speaker 1>in compose.

00:31:29.665 --> 00:31:30.545
<v Speaker 0>Oh, okay.

00:31:31.345 --> 00:31:31.985
<v Speaker 0>Cool.

00:31:33.025 --> 00:31:33.345
<v Speaker 1>Yes.

00:31:34.559 --> 00:31:37.679
<v Speaker 1>Seems to be running. Now it's

00:31:37.679 --> 00:31:40.240
<v Speaker 1>that that's HTTP, isn't it? So what's the

00:31:40.240 --> 00:31:42.399
<v Speaker 1>IP address of your machine? Let me see

00:31:42.399 --> 00:31:43.119
<v Speaker 1>if I

00:31:45.840 --> 00:31:47.039
<v Speaker 1>you read it out to me.

00:31:48.645 --> 00:31:50.085
<v Speaker 1>The 147.

00:31:50.325 --> 00:31:52.085
<v Speaker 0>Yeah. But let me set up the off

00:31:52.085 --> 00:31:53.924
<v Speaker 0>first before someone else does.

00:31:55.845 --> 00:31:57.125
<v Speaker 1>Okay. No. That's all I want you to

00:31:57.125 --> 00:31:58.245
<v Speaker 1>see. Now

00:31:58.645 --> 00:32:00.805
<v Speaker 1>what you might might wanna do is just

00:32:00.805 --> 00:32:02.965
<v Speaker 1>actually only expose it on local host instead

00:32:02.965 --> 00:32:04.165
<v Speaker 1>of on all adapters.

00:32:05.830 --> 00:32:07.909
<v Speaker 0>I'll set this up first and then I'll

00:32:07.909 --> 00:32:10.309
<v Speaker 0>do that. Alright. Cool. Done. Okay. Okay.

00:32:12.070 --> 00:32:13.669
<v Speaker 1>Now in fact, if you go back if

00:32:13.669 --> 00:32:14.789
<v Speaker 1>you just leave it as it is and

00:32:14.789 --> 00:32:16.950
<v Speaker 1>go back to that URL again and go

00:32:16.950 --> 00:32:18.230
<v Speaker 1>to port ninety ninety.

00:32:21.465 --> 00:32:23.864
<v Speaker 0>And this is gonna be our Prometheus.

00:32:25.945 --> 00:32:28.984
<v Speaker 1>Now Prometheus is only exposed on loopback.

00:32:30.345 --> 00:32:31.625
<v Speaker 1>And if we like, we could just take

00:32:31.625 --> 00:32:33.065
<v Speaker 1>it off completely. Now that means if you

00:32:33.065 --> 00:32:34.660
<v Speaker 1>want to connect to it, you can do

00:32:34.660 --> 00:32:36.820
<v Speaker 1>an SSH tunnel to it and then look

00:32:36.820 --> 00:32:38.740
<v Speaker 1>at it from local host, or you could

00:32:38.740 --> 00:32:39.940
<v Speaker 1>use Inlets

00:32:40.180 --> 00:32:42.340
<v Speaker 1>and bring it back to computer or use

00:32:42.340 --> 00:32:44.260
<v Speaker 1>Inlets and expose it somewhere else on the

00:32:44.260 --> 00:32:44.980
<v Speaker 1>Internet.

00:32:45.540 --> 00:32:48.100
<v Speaker 1>Why is that the case? Well, Prometheus doesn't

00:32:48.100 --> 00:32:49.620
<v Speaker 1>tend to have authentication on it.

00:32:50.315 --> 00:32:52.475
<v Speaker 1>It's just one of those things that you

00:32:52.555 --> 00:32:54.955
<v Speaker 1>probably don't want the world being able to

00:32:54.955 --> 00:32:55.595
<v Speaker 1>access.

00:32:55.835 --> 00:32:58.235
<v Speaker 1>So this is again part of the power

00:32:58.235 --> 00:32:59.355
<v Speaker 1>of having that

00:32:59.995 --> 00:33:02.475
<v Speaker 1>declarative file is we can just say how

00:33:02.475 --> 00:33:04.830
<v Speaker 1>we want things to look. This instance, we're

00:33:04.830 --> 00:33:05.549
<v Speaker 1>just saying

00:33:06.030 --> 00:33:07.790
<v Speaker 1>it's only on loopback. So if you go

00:33:07.790 --> 00:33:08.990
<v Speaker 1>back to your computer,

00:33:10.030 --> 00:33:12.110
<v Speaker 1>you should be able to do curl on

00:33:13.309 --> 00:33:15.470
<v Speaker 1>Okay. Curl on local host

00:33:16.430 --> 00:33:17.550
<v Speaker 1>ninety ninety.

00:33:20.135 --> 00:33:21.894
<v Speaker 1>And there's your Prometheus.

00:33:22.455 --> 00:33:24.054
<v Speaker 0>There we go. Yep.

00:33:24.375 --> 00:33:25.174
<v Speaker 1>Okay.

00:33:25.175 --> 00:33:26.295
<v Speaker 1>So this

00:33:26.295 --> 00:33:26.855
<v Speaker 1>is

00:33:27.575 --> 00:33:29.495
<v Speaker 1>why I was interested in doing a a

00:33:29.495 --> 00:33:31.575
<v Speaker 1>livestream with you because we get to talk

00:33:31.575 --> 00:33:34.780
<v Speaker 1>about, specifically talk about, these things. I find

00:33:34.780 --> 00:33:36.460
<v Speaker 1>I find them particularly interesting.

00:33:39.260 --> 00:33:40.940
<v Speaker 1>Now the other thing we can do is

00:33:41.100 --> 00:33:42.460
<v Speaker 1>let's see if I can turn this camera

00:33:42.460 --> 00:33:43.580
<v Speaker 1>on and off again.

00:33:43.740 --> 00:33:45.179
<v Speaker 1>Is we can put in

00:33:46.125 --> 00:33:48.445
<v Speaker 1>It's not happy. Okay. I'll sort my camera

00:33:48.445 --> 00:33:50.765
<v Speaker 1>out. The other thing we can do

00:33:52.125 --> 00:33:53.485
<v Speaker 1>is we can

00:33:53.805 --> 00:33:54.605
<v Speaker 1>there we go.

00:33:56.685 --> 00:33:59.325
<v Speaker 1>Deploy something like a cron connector or an

00:33:59.325 --> 00:34:01.790
<v Speaker 1>SQS connector or NATS connector

00:34:01.790 --> 00:34:04.350
<v Speaker 1>just by editing that file. And then let's

00:34:04.350 --> 00:34:05.950
<v Speaker 1>say if it was a cron expression for

00:34:05.950 --> 00:34:06.830
<v Speaker 1>five minutes,

00:34:07.230 --> 00:34:09.310
<v Speaker 1>you could have it go off and pull

00:34:09.310 --> 00:34:11.710
<v Speaker 1>your repo down every five minutes, run a

00:34:11.710 --> 00:34:13.550
<v Speaker 1>command on it, and then post the results

00:34:13.550 --> 00:34:13.949
<v Speaker 1>somewhere.

00:34:14.835 --> 00:34:16.275
<v Speaker 1>But we should probably just start at the

00:34:16.275 --> 00:34:19.395
<v Speaker 1>beginning. This is a 64 bit Intel computer.

00:34:19.875 --> 00:34:21.715
<v Speaker 1>It doesn't have Docker on it. So if

00:34:21.715 --> 00:34:23.795
<v Speaker 1>you want to build a container on your

00:34:23.795 --> 00:34:26.034
<v Speaker 1>server, that is normally just a bad idea

00:34:26.034 --> 00:34:26.435
<v Speaker 1>anyway.

00:34:27.770 --> 00:34:30.010
<v Speaker 1>And if you install k three s, you'll

00:34:30.010 --> 00:34:31.609
<v Speaker 1>see that you don't get Docker on there

00:34:31.609 --> 00:34:32.250
<v Speaker 1>either,

00:34:32.650 --> 00:34:34.650
<v Speaker 1>and so you can't do builds. So you

00:34:34.650 --> 00:34:37.290
<v Speaker 1>can still use something like Canico or the

00:34:37.290 --> 00:34:39.515
<v Speaker 1>build kit daemon on here, but I would

00:34:39.515 --> 00:34:41.995
<v Speaker 1>suggest you build it on your computer using

00:34:41.995 --> 00:34:43.195
<v Speaker 1>your local Docker

00:34:43.195 --> 00:34:44.635
<v Speaker 1>or on another machine,

00:34:45.355 --> 00:34:47.594
<v Speaker 1>push it to registry, and then deploy to

00:34:47.594 --> 00:34:49.115
<v Speaker 1>the gateway address of this.

00:34:50.635 --> 00:34:52.315
<v Speaker 1>Do you have Docker somewhere?

00:34:54.010 --> 00:34:56.170
<v Speaker 0>I do. Yeah. Yeah.

00:34:58.170 --> 00:35:00.890
<v Speaker 0>I'll just take thirty seconds. Good. Alright. We'll

00:35:00.890 --> 00:35:03.289
<v Speaker 1>have a let's open a terminal on your

00:35:03.289 --> 00:35:04.810
<v Speaker 1>client computer.

00:35:05.690 --> 00:35:07.609
<v Speaker 1>Know when should be developing on production.

00:35:09.295 --> 00:35:10.895
<v Speaker 1>Do you have here?

00:35:12.575 --> 00:35:13.375
<v Speaker 1>In

00:35:15.215 --> 00:35:15.855
<v Speaker 0>Brew?

00:35:16.815 --> 00:35:18.175
<v Speaker 0>It will be in Brew, but it'll be

00:35:18.175 --> 00:35:20.255
<v Speaker 1>trailing behind a little bit because they

00:35:20.495 --> 00:35:22.815
<v Speaker 1>they take a while to update PRs.

00:35:23.100 --> 00:35:24.700
<v Speaker 1>I just get it from

00:35:25.820 --> 00:35:26.860
<v Speaker 1>OpenFaaS

00:35:26.860 --> 00:35:28.220
<v Speaker 1>on GitHub

00:35:28.620 --> 00:35:30.380
<v Speaker 1>slash FaaS CLI.

00:35:32.220 --> 00:35:32.780
<v Speaker 0>Okay.

00:35:34.300 --> 00:35:36.700
<v Speaker 0>I'll just do it on the visible screen.

00:35:36.700 --> 00:35:37.980
<v Speaker 0>So we're gonna go to GitHub.

00:35:38.505 --> 00:35:40.105
<v Speaker 0>We're gonna go to open

00:35:41.224 --> 00:35:42.265
<v Speaker 0>FaaS

00:35:43.144 --> 00:35:44.185
<v Speaker 0>CLI.

00:35:44.505 --> 00:35:46.744
<v Speaker 1>FaaS CLI. FaaS CLI.

00:35:49.065 --> 00:35:51.145
<v Speaker 0>Typing fail. It's okay.

00:35:51.464 --> 00:35:53.550
<v Speaker 0>There we go. And we're just gonna download

00:35:53.550 --> 00:35:54.670
<v Speaker 0>the latest release?

00:35:55.070 --> 00:35:57.310
<v Speaker 1>Yeah. That's the easiest easiest way to get

00:35:57.310 --> 00:35:58.030
<v Speaker 1>it if

00:35:59.310 --> 00:36:02.190
<v Speaker 1>unless you wanna actually run the bash installer.

00:36:02.190 --> 00:36:03.950
<v Speaker 1>Right. And then copy the link address.

00:36:04.430 --> 00:36:07.550
<v Speaker 0>I'll just let it so we're gonna sudo

00:36:08.465 --> 00:36:12.225
<v Speaker 0>and beat and launch OpenFinisher.

00:36:12.225 --> 00:36:13.905
<v Speaker 1>Fast CLI. Right? Fast CLI.

00:36:24.540 --> 00:36:25.580
<v Speaker 0>Exputable.

00:36:29.260 --> 00:36:30.220
<v Speaker 1>Okay.

00:36:30.300 --> 00:36:32.540
<v Speaker 1>I would normally rename it, but you can

00:36:32.540 --> 00:36:34.380
<v Speaker 1>you can use it with that name if

00:36:34.380 --> 00:36:34.780
<v Speaker 1>you want.

00:36:35.735 --> 00:36:37.175
<v Speaker 1>And this is something you can get from

00:36:37.175 --> 00:36:39.415
<v Speaker 1>the installers the installer script.

00:36:42.215 --> 00:36:43.495
<v Speaker 0>Oh, where did it go?

00:36:44.215 --> 00:36:45.255
<v Speaker 0>It's there. Local.

00:36:52.220 --> 00:36:54.700
<v Speaker 0>You just make sure. Membeads.

00:36:58.540 --> 00:37:00.140
<v Speaker 0>We go. Okay. So user

00:37:00.460 --> 00:37:01.820
<v Speaker 1>Before you do that, do you know the

00:37:01.820 --> 00:37:03.885
<v Speaker 1>trick that if you go back and delete

00:37:03.885 --> 00:37:04.925
<v Speaker 1>that up to

00:37:05.245 --> 00:37:06.125
<v Speaker 1>Darwin?

00:37:08.045 --> 00:37:10.125
<v Speaker 1>It's just a little bash trick.

00:37:10.285 --> 00:37:12.525
<v Speaker 1>Okay. Now put a

00:37:12.925 --> 00:37:14.445
<v Speaker 1>squiggly bracket

00:37:15.230 --> 00:37:16.190
<v Speaker 1>like a

00:37:16.510 --> 00:37:19.790
<v Speaker 1>the the bracket. Yeah. That one. Then put

00:37:20.109 --> 00:37:21.550
<v Speaker 1>dash Darwin

00:37:22.510 --> 00:37:24.670
<v Speaker 1>and then a comma and close it.

00:37:25.710 --> 00:37:26.589
<v Speaker 1>Try that.

00:37:32.905 --> 00:37:35.625
<v Speaker 1>You might have to go into your preferences

00:37:35.625 --> 00:37:37.385
<v Speaker 1>just to enable that. You're on Big Sur.

00:37:42.200 --> 00:37:43.640
<v Speaker 1>That another go.

00:37:44.680 --> 00:37:46.440
<v Speaker 1>Yeah. You can open it this time.

00:37:46.839 --> 00:37:48.359
<v Speaker 1>Yeah. I should be able to do it

00:37:48.359 --> 00:37:49.480
<v Speaker 0>from here. Okay.

00:37:49.880 --> 00:37:51.160
<v Speaker 1>Right. So

00:37:52.040 --> 00:37:54.119
<v Speaker 1>all

00:37:52.895 --> 00:37:55.535
<v Speaker 1>workloads on OpenFaaS start life as a Docker

00:37:55.535 --> 00:37:56.335
<v Speaker 1>container.

00:37:56.815 --> 00:37:57.215
<v Speaker 1>You

00:37:57.694 --> 00:38:00.575
<v Speaker 1>can just write a Docker file and put

00:38:00.575 --> 00:38:03.135
<v Speaker 1>a server in it and put eighty eighty,

00:38:03.135 --> 00:38:04.415
<v Speaker 1>deploy that.

00:38:04.815 --> 00:38:05.455
<v Speaker 1>But

00:38:06.095 --> 00:38:08.650
<v Speaker 1>part of the beauty of using serverless approach

00:38:08.650 --> 00:38:10.410
<v Speaker 1>is you just write a handler.

00:38:10.570 --> 00:38:13.210
<v Speaker 1>And so if you do fast CLI

00:38:14.410 --> 00:38:15.290
<v Speaker 1>template

00:38:15.370 --> 00:38:17.050
<v Speaker 1>store list,

00:38:19.690 --> 00:38:21.850
<v Speaker 1>you can see a number of different templates

00:38:21.850 --> 00:38:24.305
<v Speaker 1>that are available from the community.

00:38:24.944 --> 00:38:26.945
<v Speaker 1>Some of them are more official ones.

00:38:27.345 --> 00:38:28.944
<v Speaker 1>Because you and I are both familiar with

00:38:28.944 --> 00:38:31.905
<v Speaker 1>Go, let's do template store pull,

00:38:32.385 --> 00:38:35.505
<v Speaker 1>and then we'll write golang dash middleware.

00:38:35.505 --> 00:38:37.105
<v Speaker 1>This is one of my favorite ones.

00:38:38.680 --> 00:38:40.760
<v Speaker 1>That's getting it from a Git repo,

00:38:41.160 --> 00:38:44.680
<v Speaker 1>and it's brought two down. Fast UI template

00:38:44.840 --> 00:38:45.640
<v Speaker 1>list,

00:38:45.640 --> 00:38:46.760
<v Speaker 1>I believe it is.

00:38:48.840 --> 00:38:50.280
<v Speaker 0>Oh, yeah. I'm sorry.

00:38:50.520 --> 00:38:52.040
<v Speaker 0>I'm getting ahead of myself, aren't I?

00:38:54.434 --> 00:38:56.914
<v Speaker 1>Yeah. Let's see. So no. New dash dash

00:38:56.914 --> 00:38:58.275
<v Speaker 1>list. There we are.

00:38:58.994 --> 00:39:00.435
<v Speaker 1>Without the template.

00:39:02.755 --> 00:39:04.595
<v Speaker 1>Yeah. And it just shows you what's in

00:39:04.595 --> 00:39:07.280
<v Speaker 1>your current directory now. So we could do

00:39:07.280 --> 00:39:09.120
<v Speaker 1>a new one with the Golang middleware. This

00:39:09.120 --> 00:39:11.360
<v Speaker 1>is effectively just like a HTTP

00:39:11.520 --> 00:39:13.680
<v Speaker 1>request and receive a response.

00:39:14.320 --> 00:39:16.640
<v Speaker 1>So new dash dash lang

00:39:17.360 --> 00:39:19.760
<v Speaker 1>and then Golang middleware.

00:39:20.560 --> 00:39:20.880
<v Speaker 1>Yep.

00:39:21.455 --> 00:39:23.375
<v Speaker 1>Then we wanna put a name. So we

00:39:23.375 --> 00:39:25.295
<v Speaker 1>were talking about webhooks. We just call this

00:39:25.295 --> 00:39:25.935
<v Speaker 1>hooks.

00:39:26.415 --> 00:39:29.295
<v Speaker 1>And then what's your GitHub what's your Docker

00:39:29.295 --> 00:39:30.575
<v Speaker 1>Hub username?

00:39:30.975 --> 00:39:31.935
<v Speaker 1>Rawkode.

00:39:32.015 --> 00:39:34.175
<v Speaker 1>So put space dash dash prefix,

00:39:35.910 --> 00:39:38.230
<v Speaker 1>and you can put Rawkode. All that does

00:39:38.390 --> 00:39:39.589
<v Speaker 1>is effectively

00:39:39.589 --> 00:39:42.470
<v Speaker 1>creates a new function by taking the top

00:39:42.470 --> 00:39:43.750
<v Speaker 1>level bits of it,

00:39:44.230 --> 00:39:45.990
<v Speaker 1>put some in place. And if you do

00:39:45.990 --> 00:39:47.350
<v Speaker 1>a cat on hooks,

00:39:47.829 --> 00:39:48.390
<v Speaker 1>YAML,

00:39:50.755 --> 00:39:52.915
<v Speaker 1>you'll see that your username would just got

00:39:52.915 --> 00:39:54.835
<v Speaker 1>inserted there. So that saves you a job

00:39:54.835 --> 00:39:56.515
<v Speaker 1>by going in and editing it.

00:39:57.235 --> 00:39:59.795
<v Speaker 1>Now this file is a stack YAML file.

00:40:00.035 --> 00:40:03.280
<v Speaker 1>It can be used to configure build time

00:40:03.280 --> 00:40:05.520
<v Speaker 1>and deployment time configuration.

00:40:05.520 --> 00:40:06.720
<v Speaker 1>Build time is

00:40:06.960 --> 00:40:09.280
<v Speaker 1>what's the template if there is one, where's

00:40:09.280 --> 00:40:11.520
<v Speaker 1>the code, what image does it go to,

00:40:11.839 --> 00:40:13.520
<v Speaker 1>what build arcs do we want? Do we

00:40:13.520 --> 00:40:16.000
<v Speaker 1>want go lang modules on, for instance?

00:40:16.775 --> 00:40:19.415
<v Speaker 1>The other thing you then get is run

00:40:19.415 --> 00:40:21.335
<v Speaker 1>time. So do we want a number of

00:40:21.335 --> 00:40:22.055
<v Speaker 1>secrets?

00:40:22.455 --> 00:40:24.615
<v Speaker 1>Do we want environmental variables?

00:40:24.935 --> 00:40:27.255
<v Speaker 1>So you have environment variable if you wanna

00:40:27.255 --> 00:40:31.095
<v Speaker 1>add debugging or the DB host URL.

00:40:32.079 --> 00:40:33.680
<v Speaker 1>This is how I think of it. If

00:40:33.680 --> 00:40:35.040
<v Speaker 1>it's confidential,

00:40:35.200 --> 00:40:36.640
<v Speaker 1>put it in a secret.

00:40:36.960 --> 00:40:39.520
<v Speaker 1>If it's configuration non confidential, put it in

00:40:39.520 --> 00:40:40.880
<v Speaker 1>an environment variable.

00:40:41.119 --> 00:40:42.000
<v Speaker 0>Okay.

00:40:43.520 --> 00:40:45.965
<v Speaker 0>I just pop this open and code, which

00:40:45.965 --> 00:40:48.445
<v Speaker 0>is on the wrong screen. And

00:40:52.765 --> 00:40:54.365
<v Speaker 0>this is our handler function.

00:40:55.085 --> 00:40:57.005
<v Speaker 1>Yes. Under

00:40:57.085 --> 00:40:59.885
<v Speaker 1>under the covers in the template folder,

00:40:59.965 --> 00:41:01.085
<v Speaker 1>you will see

00:41:01.750 --> 00:41:03.670
<v Speaker 1>the original version of this

00:41:04.150 --> 00:41:05.430
<v Speaker 1>up on the right.

00:41:06.950 --> 00:41:09.430
<v Speaker 1>Yeah. In the function folder. So that's what

00:41:09.430 --> 00:41:10.870
<v Speaker 1>the user gets to see,

00:41:11.190 --> 00:41:13.510
<v Speaker 1>but there's way more going on. There's a

00:41:13.510 --> 00:41:15.750
<v Speaker 1>main dot go. There's a Dockerfile.

00:41:16.305 --> 00:41:17.745
<v Speaker 1>There's a go mod,

00:41:18.065 --> 00:41:19.744
<v Speaker 1>and this is what you don't have to

00:41:19.744 --> 00:41:21.425
<v Speaker 1>see and don't have to deal with. You

00:41:21.425 --> 00:41:23.345
<v Speaker 1>don't have to configure a safe shutdown. You

00:41:23.345 --> 00:41:25.345
<v Speaker 1>don't have to configure the timeouts. You don't

00:41:25.345 --> 00:41:27.105
<v Speaker 1>have to bind TCP ports.

00:41:27.984 --> 00:41:28.305
<v Speaker 1>Okay.

00:41:28.960 --> 00:41:30.240
<v Speaker 1>So you're

00:41:30.240 --> 00:41:32.480
<v Speaker 1>now in on your machine,

00:41:32.880 --> 00:41:35.920
<v Speaker 1>and you're doing developer and test. You want

00:41:35.920 --> 00:41:39.280
<v Speaker 1>to get this code onto your FASD box.

00:41:40.400 --> 00:41:42.400
<v Speaker 1>Just like we did the login before,

00:41:42.800 --> 00:41:45.615
<v Speaker 1>you need to log in from here. So

00:41:45.615 --> 00:41:47.455
<v Speaker 1>I would suggest you open your Versus code

00:41:47.455 --> 00:41:48.255
<v Speaker 1>terminal,

00:41:48.815 --> 00:41:50.335
<v Speaker 1>fast CLI login,

00:41:51.375 --> 00:41:51.935
<v Speaker 1>and

00:41:52.495 --> 00:41:54.575
<v Speaker 1>put the parameters from the other machine in.

00:41:57.800 --> 00:41:58.760
<v Speaker 0>Okay.

00:41:59.400 --> 00:42:02.360
<v Speaker 0>So FaaS CLI login.

00:42:03.560 --> 00:42:04.840
<v Speaker 0>I hear you right?

00:42:08.200 --> 00:42:09.560
<v Speaker 0>Still there? Yep.

00:42:10.385 --> 00:42:11.825
<v Speaker 0>Sorry. Can you repeat that? I was just

00:42:11.825 --> 00:42:13.665
<v Speaker 0>logging in to my I think if you

00:42:13.665 --> 00:42:15.025
<v Speaker 1>do dash dash help, it might give us

00:42:15.025 --> 00:42:15.905
<v Speaker 1>some parameters.

00:42:17.105 --> 00:42:19.425
<v Speaker 1>Yeah. So there's a few examples.

00:42:19.505 --> 00:42:21.425
<v Speaker 1>What you could do is you could why

00:42:21.744 --> 00:42:24.660
<v Speaker 1>don't you s can you SCP down the

00:42:24.660 --> 00:42:26.660
<v Speaker 1>password file so we don't have to put

00:42:26.660 --> 00:42:27.620
<v Speaker 1>it on the screen?

00:42:28.100 --> 00:42:29.540
<v Speaker 1>Use SFTP

00:42:29.540 --> 00:42:30.580
<v Speaker 1>or SCP

00:42:30.820 --> 00:42:31.619
<v Speaker 1>to pull it in.

00:42:36.115 --> 00:42:37.555
<v Speaker 1>Farlib.

00:42:37.555 --> 00:42:39.075
<v Speaker 0>Oh, Farlib.

00:42:40.835 --> 00:42:41.714
<v Speaker 0>Okay.

00:42:43.714 --> 00:42:44.595
<v Speaker 1>Secrets.

00:42:49.940 --> 00:42:51.140
<v Speaker 1>Basic auth password.

00:43:03.305 --> 00:43:04.985
<v Speaker 0>Got it. Okay.

00:43:05.785 --> 00:43:07.945
<v Speaker 1>Now if you don't get that

00:43:08.425 --> 00:43:09.225
<v Speaker 1>okay.

00:43:09.305 --> 00:43:09.945
<v Speaker 1>That's okay.

00:43:12.140 --> 00:43:14.220
<v Speaker 1>Look at the help command again because it

00:43:14.220 --> 00:43:16.940
<v Speaker 1>gives you an example. You can effectively use

00:43:16.940 --> 00:43:17.740
<v Speaker 1>cat

00:43:18.220 --> 00:43:20.620
<v Speaker 1>as part of the thing. So cat the

00:43:20.620 --> 00:43:21.740
<v Speaker 1>password file,

00:43:21.900 --> 00:43:23.740
<v Speaker 1>pipe it into FastCLI login.

00:43:27.145 --> 00:43:31.464
<v Speaker 0>Okay. FastCLIlogin.

00:43:31.545 --> 00:43:33.385
<v Speaker 1>Can you see the command above? So it's

00:43:33.385 --> 00:43:35.704
<v Speaker 1>dash s, which is short for password standard

00:43:35.704 --> 00:43:36.345
<v Speaker 1>in.

00:43:36.665 --> 00:43:38.825
<v Speaker 1>Yep. And then you need your gateway URL

00:43:38.825 --> 00:43:39.545
<v Speaker 1>after that.

00:43:40.460 --> 00:43:41.980
<v Speaker 1>Gateway.

00:43:43.740 --> 00:43:44.380
<v Speaker 0>Okay.

00:43:45.900 --> 00:43:47.660
<v Speaker 0>Yep. Let's just grab the IP address one

00:43:47.660 --> 00:43:48.300
<v Speaker 0>more time,

00:43:48.619 --> 00:43:49.980
<v Speaker 0>and that'll be 8080.

00:43:49.980 --> 00:43:50.940
<v Speaker 0>Right? Yes.

00:43:52.059 --> 00:43:54.015
<v Speaker 0>Do I need a username? Well, that's in

00:43:54.015 --> 00:43:56.815
<v Speaker 0>the file too. No? It's it's

00:43:56.815 --> 00:43:59.934
<v Speaker 1>just always admin unless you've offered to change

00:43:59.934 --> 00:44:02.095
<v Speaker 1>it, so we just automate that.

00:44:03.775 --> 00:44:04.815
<v Speaker 1>Done. Okay.

00:44:05.295 --> 00:44:07.855
<v Speaker 1>Now it's saying you should consider setting up

00:44:07.855 --> 00:44:09.680
<v Speaker 1>TLS with let's encrypt.

00:44:10.000 --> 00:44:12.319
<v Speaker 1>If we had more time, there's a Terraform

00:44:12.319 --> 00:44:15.359
<v Speaker 1>that works with DigitalOcean that installs caddy that

00:44:15.359 --> 00:44:16.960
<v Speaker 1>then terminates the TLS.

00:44:17.279 --> 00:44:20.240
<v Speaker 1>You could migrate that for Equinix metal or

00:44:20.240 --> 00:44:21.920
<v Speaker 1>you could just go in afterwards and install

00:44:21.920 --> 00:44:22.880
<v Speaker 1>caddy on the host.

00:44:24.455 --> 00:44:26.695
<v Speaker 1>So that password's been sent in plain text

00:44:26.695 --> 00:44:27.815
<v Speaker 1>over the Internet.

00:44:29.175 --> 00:44:30.615
<v Speaker 1>It's just for testing,

00:44:30.695 --> 00:44:33.335
<v Speaker 1>but, generally, I would always recommend setting up

00:44:33.335 --> 00:44:35.815
<v Speaker 1>a TLS if well, I would say you

00:44:35.815 --> 00:44:37.335
<v Speaker 1>must set up TLS if you're gonna do

00:44:37.335 --> 00:44:37.975
<v Speaker 1>this sort of thing.

00:44:38.660 --> 00:44:39.300
<v Speaker 1>Okay.

00:44:39.620 --> 00:44:42.740
<v Speaker 1>Now you can see that gateway dash dash.

00:44:42.820 --> 00:44:44.580
<v Speaker 1>We could keep typing that in on every

00:44:44.580 --> 00:44:47.460
<v Speaker 1>command. There's always also an environmental variable that

00:44:47.460 --> 00:44:48.340
<v Speaker 1>we can use.

00:44:49.380 --> 00:44:50.100
<v Speaker 1>OpenFaaS,

00:44:50.675 --> 00:44:51.955
<v Speaker 1>I believe it's

00:44:52.755 --> 00:44:55.235
<v Speaker 1>you either gateway or URL.

00:44:56.115 --> 00:44:58.915
<v Speaker 1>It's gateway, I think. It's a both.

00:45:01.555 --> 00:45:04.595
<v Speaker 0>758765.

00:45:06.660 --> 00:45:08.500
<v Speaker 0>How can I confirm if it's that? Can

00:45:08.500 --> 00:45:10.340
<v Speaker 0>I do a FaaS CLI,

00:45:10.500 --> 00:45:12.820
<v Speaker 0>like, kind of what what would what would

00:45:12.820 --> 00:45:14.020
<v Speaker 0>go to the gateway and give me some

00:45:14.020 --> 00:45:16.100
<v Speaker 0>information back? FaaS CLI version.

00:45:20.075 --> 00:45:21.515
<v Speaker 0>Alright. So that's just a c l I.

00:45:21.515 --> 00:45:23.435
<v Speaker 0>So let's export that again as you're It's

00:45:23.435 --> 00:45:25.835
<v Speaker 1>open fuzz underscore url. Yeah. Is.

00:45:26.955 --> 00:45:28.715
<v Speaker 0>That's better. There you go. Great. So we're

00:45:28.715 --> 00:45:29.355
<v Speaker 1>connected now.

00:45:29.829 --> 00:45:31.750
<v Speaker 1>We're connected to your server,

00:45:32.069 --> 00:45:34.069
<v Speaker 1>and we're now ready to do fast c

00:45:34.069 --> 00:45:35.030
<v Speaker 1>l I up

00:45:37.430 --> 00:45:39.110
<v Speaker 1>and dash f

00:45:39.430 --> 00:45:40.950
<v Speaker 1>with the file

00:45:42.444 --> 00:45:44.925
<v Speaker 1>that you created. Dot yaml? Yep.

00:45:45.805 --> 00:45:46.525
<v Speaker 1>L?

00:45:47.244 --> 00:45:48.365
<v Speaker 1>That's the one.

00:45:50.444 --> 00:45:53.085
<v Speaker 0>Oh, this is building build kit. Have you

00:45:53.085 --> 00:45:55.565
<v Speaker 1>set docker build kit in your environmental variables?

00:45:56.349 --> 00:45:58.270
<v Speaker 0>I do have build kit enabled by default.

00:45:58.270 --> 00:46:00.270
<v Speaker 0>Yes. Yeah. Okay. Well, that's a cool thing

00:46:00.270 --> 00:46:02.670
<v Speaker 1>here because I open fast because it just

00:46:02.670 --> 00:46:04.590
<v Speaker 1>literally execs Docker

00:46:05.390 --> 00:46:06.590
<v Speaker 1>for the build.

00:46:06.670 --> 00:46:07.790
<v Speaker 1>Can make use of that.

00:46:08.835 --> 00:46:10.755
<v Speaker 0>So this is building that image with the

00:46:10.755 --> 00:46:12.515
<v Speaker 0>code that we just generated from the Golang

00:46:12.515 --> 00:46:15.475
<v Speaker 0>middleware template. It's gonna push that image to

00:46:15.475 --> 00:46:17.715
<v Speaker 0>the docker registry and then deploy it to

00:46:17.715 --> 00:46:20.195
<v Speaker 0>OpenFaaS on a remote server. Is that right?

00:46:20.480 --> 00:46:21.200
<v Speaker 1>Yep.

00:46:22.000 --> 00:46:22.800
<v Speaker 1>Cool.

00:46:23.359 --> 00:46:25.039
<v Speaker 1>There was actually someone who was asking me

00:46:25.039 --> 00:46:26.960
<v Speaker 1>about this. I think it was a Akos

00:46:26.960 --> 00:46:28.240
<v Speaker 1>or Akos.

00:46:28.400 --> 00:46:29.280
<v Speaker 1>He said,

00:46:29.440 --> 00:46:30.560
<v Speaker 1>I've got this

00:46:30.880 --> 00:46:31.840
<v Speaker 1>API.

00:46:31.920 --> 00:46:34.715
<v Speaker 1>It's written in Go. It's running on a

00:46:34.715 --> 00:46:36.955
<v Speaker 1>server, single node. I use it for some

00:46:36.955 --> 00:46:37.515
<v Speaker 1>stuff,

00:46:37.755 --> 00:46:39.035
<v Speaker 1>but I don't know how to deploy to

00:46:39.035 --> 00:46:39.515
<v Speaker 1>it.

00:46:39.915 --> 00:46:41.915
<v Speaker 1>He said, it's only Docker.

00:46:42.235 --> 00:46:43.995
<v Speaker 1>So I can't use Flux. I can't use

00:46:43.995 --> 00:46:45.915
<v Speaker 1>this, that, and the other. It's just a

00:46:45.915 --> 00:46:48.250
<v Speaker 1>single node running a HTTP API. How do

00:46:48.250 --> 00:46:49.930
<v Speaker 1>I update it from the Internet? My GitHub

00:46:49.930 --> 00:46:50.730
<v Speaker 1>actions

00:46:50.809 --> 00:46:52.650
<v Speaker 1>are building and pushing an image, but I

00:46:52.650 --> 00:46:54.570
<v Speaker 1>don't know how to do that last mile.

00:46:55.289 --> 00:46:55.930
<v Speaker 1>Well,

00:46:56.089 --> 00:46:58.490
<v Speaker 1>you can do this. So if you deploy

00:46:58.490 --> 00:47:01.484
<v Speaker 1>FASDs, we've seen you can put influx DB

00:47:01.484 --> 00:47:02.924
<v Speaker 1>in your stack. You can put all sorts

00:47:02.924 --> 00:47:03.645
<v Speaker 1>in there.

00:47:04.125 --> 00:47:05.885
<v Speaker 1>That then gives you a public API that

00:47:05.885 --> 00:47:07.965
<v Speaker 1>you can have HTTPS and auth on.

00:47:08.684 --> 00:47:12.204
<v Speaker 1>That can be logged into and deployed to

00:47:12.204 --> 00:47:15.050
<v Speaker 1>via your PC or via GitHub action. So

00:47:15.050 --> 00:47:16.570
<v Speaker 1>that's a good way of then being able

00:47:16.570 --> 00:47:18.970
<v Speaker 1>to update code and host these APIs.

00:47:19.290 --> 00:47:20.250
<v Speaker 0>K. Now

00:47:21.369 --> 00:47:23.130
<v Speaker 1>when we go to this, just take off

00:47:23.130 --> 00:47:25.369
<v Speaker 1>that suffix, OpenFaaS f n, because we have

00:47:25.369 --> 00:47:28.330
<v Speaker 1>it. We don't have multiple namespaces in FASD

00:47:28.330 --> 00:47:28.730
<v Speaker 1>yet.

00:47:30.725 --> 00:47:33.685
<v Speaker 1>Yep. Then just browse to this? Yeah.

00:47:35.205 --> 00:47:36.245
<v Speaker 1>Hello, world.

00:47:36.805 --> 00:47:39.045
<v Speaker 1>Right. So let's just change the text and

00:47:39.045 --> 00:47:40.405
<v Speaker 1>then run up again.

00:47:41.445 --> 00:47:43.285
<v Speaker 1>The text in the Golang.

00:47:44.920 --> 00:47:47.160
<v Speaker 0>Alright. So let's do Harlow

00:47:47.400 --> 00:47:48.360
<v Speaker 1>Metal.

00:47:51.320 --> 00:47:52.920
<v Speaker 0>I think I've got MODN as well then,

00:47:52.920 --> 00:47:54.520
<v Speaker 0>don't we? There we go.

00:47:55.000 --> 00:47:57.400
<v Speaker 0>Yeah. And then just run up again? Yeah.

00:47:59.275 --> 00:47:59.595
<v Speaker 0>Now

00:48:00.235 --> 00:48:01.995
<v Speaker 0>because you're just exacting out

00:48:02.395 --> 00:48:04.395
<v Speaker 0>to to Docker here. Like, it's gonna leverage

00:48:04.395 --> 00:48:06.235
<v Speaker 0>all my build cache and stuff as well,

00:48:06.555 --> 00:48:08.395
<v Speaker 0>which is really nice. Yep.

00:48:09.675 --> 00:48:11.595
<v Speaker 1>There's a blog post that I wrote today.

00:48:12.250 --> 00:48:14.730
<v Speaker 1>There's a new command called publish.

00:48:14.730 --> 00:48:16.410
<v Speaker 1>And what that does, it uses build x

00:48:16.410 --> 00:48:17.770
<v Speaker 1>instead of build.

00:48:18.970 --> 00:48:20.330
<v Speaker 1>And if you give it a list of

00:48:20.330 --> 00:48:22.250
<v Speaker 1>platforms, can build for your Raspberry Pi. It

00:48:22.250 --> 00:48:23.930
<v Speaker 1>can build for your ARM server.

00:48:24.265 --> 00:48:25.785
<v Speaker 1>In your basement. It can build for your

00:48:25.785 --> 00:48:28.425
<v Speaker 1>Raspberry Pis. You can even run that on

00:48:28.425 --> 00:48:30.345
<v Speaker 1>a GitHub action or Travis.

00:48:31.065 --> 00:48:32.825
<v Speaker 1>You then get a multi arch image. And

00:48:32.825 --> 00:48:33.865
<v Speaker 1>when that's deployed,

00:48:34.345 --> 00:48:35.465
<v Speaker 1>the cluster,

00:48:35.545 --> 00:48:38.640
<v Speaker 1>Kubernetes cluster or FaaS d just knows which

00:48:38.640 --> 00:48:41.039
<v Speaker 1>is the actual binary image to pull down

00:48:41.039 --> 00:48:43.039
<v Speaker 1>and run for you. You see we have

00:48:43.039 --> 00:48:45.039
<v Speaker 1>a little bit of a lag here. Normally,

00:48:45.039 --> 00:48:46.160
<v Speaker 1>on Kubernetes,

00:48:46.160 --> 00:48:48.400
<v Speaker 1>the operations are all asynchronous.

00:48:48.480 --> 00:48:50.400
<v Speaker 1>With FASD, they're synchronous.

00:48:50.799 --> 00:48:53.200
<v Speaker 1>So you've got the exact duration until it's

00:48:53.200 --> 00:48:53.359
<v Speaker 1>ready.

00:48:54.705 --> 00:48:55.345
<v Speaker 1>Yeah.

00:48:55.985 --> 00:48:57.265
<v Speaker 0>Easy. Yeah.

00:48:57.665 --> 00:48:59.905
<v Speaker 1>And we can make this even faster. You

00:48:59.905 --> 00:49:01.745
<v Speaker 1>can if you think about it,

00:49:02.705 --> 00:49:04.385
<v Speaker 1>you can cache that build. We could do

00:49:04.385 --> 00:49:05.665
<v Speaker 1>a few fewer things there.

00:49:06.560 --> 00:49:08.640
<v Speaker 1>We could do the build on a server

00:49:08.640 --> 00:49:10.240
<v Speaker 1>that's close to that machine.

00:49:10.720 --> 00:49:12.480
<v Speaker 1>Maybe in a few seconds, we could just

00:49:12.480 --> 00:49:15.040
<v Speaker 1>have that updated with some new code.

00:49:17.760 --> 00:49:18.400
<v Speaker 1>Okay. So

00:49:18.800 --> 00:49:19.600
<v Speaker 1>that's FASD.

00:49:21.465 --> 00:49:24.345
<v Speaker 1>One thing that you get with containerd

00:49:24.345 --> 00:49:27.625
<v Speaker 1>is you get to potentially pause containers.

00:49:27.945 --> 00:49:29.545
<v Speaker 1>So you could have a thousand of them

00:49:29.545 --> 00:49:32.025
<v Speaker 1>all paused using almost no resources,

00:49:32.105 --> 00:49:34.809
<v Speaker 1>and they get unpaused as they're needed. And

00:49:34.809 --> 00:49:37.530
<v Speaker 1>the cold stop for a pause container is

00:49:37.530 --> 00:49:38.410
<v Speaker 1>ridiculously

00:49:38.410 --> 00:49:39.050
<v Speaker 1>fast.

00:49:39.289 --> 00:49:41.450
<v Speaker 1>We just go and pause one now back

00:49:41.450 --> 00:49:43.130
<v Speaker 1>on the the shell

00:49:43.609 --> 00:49:45.050
<v Speaker 1>of the server,

00:49:45.289 --> 00:49:46.890
<v Speaker 1>and it's c t r

00:49:48.635 --> 00:49:49.435
<v Speaker 1>dash

00:49:49.515 --> 00:49:52.475
<v Speaker 1>n for namespace, OpenFaaS f n,

00:49:54.474 --> 00:49:56.075
<v Speaker 1>t for tasks,

00:49:56.075 --> 00:49:56.875
<v Speaker 1>l s.

00:49:58.875 --> 00:50:01.010
<v Speaker 0>Dash t l s? No. No. Just a

00:50:01.010 --> 00:50:03.010
<v Speaker 1>normal t or or write the word tasks.

00:50:03.010 --> 00:50:05.330
<v Speaker 1>L s. Yeah. Alright. Okay. Got it.

00:50:06.450 --> 00:50:08.609
<v Speaker 1>So we got our hooks there. Now you

00:50:08.609 --> 00:50:10.930
<v Speaker 1>should just be able to pause it.

00:50:11.330 --> 00:50:13.330
<v Speaker 0>Yeah. I'm just guessing, though. But Yeah.

00:50:13.925 --> 00:50:15.365
<v Speaker 1>And now do an LS.

00:50:15.925 --> 00:50:16.565
<v Speaker 1>So

00:50:17.125 --> 00:50:19.445
<v Speaker 1>before we invoke it, let's go to our

00:50:19.445 --> 00:50:20.805
<v Speaker 1>OpenFaaS gateway.

00:50:21.765 --> 00:50:23.685
<v Speaker 1>You're gonna need to move your terminal down

00:50:23.685 --> 00:50:26.085
<v Speaker 1>off off the screen. It's on eighty eighty.

00:50:26.280 --> 00:50:28.440
<v Speaker 1>Cap the password, copy it to clipboard. I

00:50:28.440 --> 00:50:30.440
<v Speaker 1>think you actually copied it anyway, didn't you?

00:50:30.600 --> 00:50:32.280
<v Speaker 1>And we'll paste it into the login dialogue

00:50:32.280 --> 00:50:33.960
<v Speaker 1>that comes up, but just don't do that

00:50:33.960 --> 00:50:35.160
<v Speaker 1>on the screen. Yeah.

00:50:36.680 --> 00:50:38.360
<v Speaker 1>That's not your Mac. Oh, no. Yeah. Yeah.

00:50:38.360 --> 00:50:39.720
<v Speaker 0>Yeah. But we have got the file on

00:50:39.720 --> 00:50:40.040
<v Speaker 1>your Mac.

00:50:42.224 --> 00:50:43.744
<v Speaker 1>Yeah. Yeah.

00:50:45.984 --> 00:50:47.904
<v Speaker 0>So we're just gonna go to this directly

00:50:47.904 --> 00:50:50.705
<v Speaker 0>here. Yeah. And then always admin.

00:50:52.464 --> 00:50:53.984
<v Speaker 1>And you zoom out a little bit.

00:50:57.260 --> 00:50:59.500
<v Speaker 1>Bit more. We'll see the sidebar when you're

00:50:59.500 --> 00:51:00.060
<v Speaker 1>ready.

00:51:02.460 --> 00:51:03.740
<v Speaker 1>Okay. Click on hooks.

00:51:04.140 --> 00:51:05.660
<v Speaker 1>It should say not ready

00:51:05.900 --> 00:51:06.780
<v Speaker 1>because

00:51:07.580 --> 00:51:08.380
<v Speaker 1>it's paused.

00:51:09.675 --> 00:51:11.675
<v Speaker 1>So if you copy that URL

00:51:12.795 --> 00:51:14.475
<v Speaker 1>and we put that in a new browser

00:51:14.475 --> 00:51:15.275
<v Speaker 1>tab,

00:51:18.715 --> 00:51:20.315
<v Speaker 1>that was a cold start.

00:51:22.550 --> 00:51:23.270
<v Speaker 0>Nice.

00:51:23.350 --> 00:51:25.430
<v Speaker 0>Nice. That was a cold start.

00:51:26.310 --> 00:51:28.150
<v Speaker 1>So it is ridiculously

00:51:28.150 --> 00:51:28.870
<v Speaker 1>fast

00:51:30.310 --> 00:51:32.070
<v Speaker 1>to unpause a container.

00:51:32.470 --> 00:51:34.550
<v Speaker 1>And this, you can't really do with with

00:51:34.550 --> 00:51:37.190
<v Speaker 1>Kubernetes. It just doesn't have the mechanisms for

00:51:37.190 --> 00:51:39.755
<v Speaker 1>it. It's a distributed system. So even if

00:51:39.755 --> 00:51:41.994
<v Speaker 1>you unpause the container, it's gonna take, like,

00:51:41.994 --> 00:51:43.835
<v Speaker 1>three seconds for all the nodes to figure

00:51:43.835 --> 00:51:45.115
<v Speaker 1>out that that happened.

00:51:46.555 --> 00:51:47.195
<v Speaker 0>Okay.

00:51:47.595 --> 00:51:48.395
<v Speaker 0>Alright.

00:51:48.875 --> 00:51:50.315
<v Speaker 1>Let's invoke

00:51:50.315 --> 00:51:51.515
<v Speaker 1>this asynchronously.

00:51:53.570 --> 00:51:54.290
<v Speaker 0>Okay.

00:51:55.170 --> 00:51:56.210
<v Speaker 0>How do we do The

00:51:57.330 --> 00:51:58.930
<v Speaker 1>easiest way is probably just to do it

00:51:58.930 --> 00:52:01.090
<v Speaker 1>on the command line. We've already got that

00:52:01.090 --> 00:52:03.730
<v Speaker 1>URL. So curl space

00:52:05.655 --> 00:52:07.415
<v Speaker 1>without the f n yet.

00:52:09.575 --> 00:52:12.135
<v Speaker 1>And then just change function to async dash

00:52:12.135 --> 00:52:12.855
<v Speaker 1>function.

00:52:16.535 --> 00:52:19.250
<v Speaker 1>Yeah. And then we wanna put a message

00:52:19.250 --> 00:52:20.770
<v Speaker 1>in because we can take a body and

00:52:20.770 --> 00:52:21.890
<v Speaker 1>put dash d

00:52:22.849 --> 00:52:26.290
<v Speaker 1>and hello, whatever you wanna put. Hit enter.

00:52:28.450 --> 00:52:31.410
<v Speaker 1>Now that hasn't waited to execute because it's

00:52:31.410 --> 00:52:32.609
<v Speaker 1>been asynchronous.

00:52:34.385 --> 00:52:35.745
<v Speaker 1>My camera's

00:52:36.065 --> 00:52:37.425
<v Speaker 1>put on that blink.

00:52:38.545 --> 00:52:40.944
<v Speaker 1>What we can do is we can look

00:52:40.944 --> 00:52:42.865
<v Speaker 1>at the logs for the queue work. I

00:52:42.865 --> 00:52:44.625
<v Speaker 1>remember how we got the logs before.

00:52:45.505 --> 00:52:48.970
<v Speaker 0>We did. So that would be general d

00:52:48.970 --> 00:52:50.010
<v Speaker 0>dash t

00:52:51.289 --> 00:52:52.570
<v Speaker 0>by default,

00:52:54.250 --> 00:52:56.650
<v Speaker 0>and then one then the name of my

00:52:56.650 --> 00:52:57.369
<v Speaker 0>function,

00:52:57.530 --> 00:52:58.329
<v Speaker 0>so hooks.

00:52:58.905 --> 00:53:01.065
<v Speaker 1>Yeah. That will give you the the function

00:53:01.065 --> 00:53:02.585
<v Speaker 1>for the logs, but what let's get the

00:53:02.585 --> 00:53:05.305
<v Speaker 1>functions logs the logs for the queue worker

00:53:05.865 --> 00:53:06.985
<v Speaker 0>itself. Queue worker.

00:53:07.545 --> 00:53:09.785
<v Speaker 1>I'm just switching over to my webcam while

00:53:09.785 --> 00:53:10.825
<v Speaker 1>you're doing that.

00:53:11.385 --> 00:53:12.505
<v Speaker 0>Open up pager.

00:53:14.280 --> 00:53:16.200
<v Speaker 1>And we can see the indication there and

00:53:16.200 --> 00:53:17.320
<v Speaker 1>how it was run.

00:53:20.040 --> 00:53:22.760
<v Speaker 0>Yes. We can. And the complete body that

00:53:22.760 --> 00:53:24.040
<v Speaker 1>you passed into it

00:53:25.000 --> 00:53:25.880
<v Speaker 1>is also there.

00:53:27.464 --> 00:53:28.664
<v Speaker 0>Yep.

00:53:28.664 --> 00:53:29.625
<v Speaker 0>It's there somewhere.

00:53:30.184 --> 00:53:30.825
<v Speaker 1>Now

00:53:31.305 --> 00:53:34.424
<v Speaker 1>let's see if we can post that off

00:53:34.424 --> 00:53:35.145
<v Speaker 1>somewhere

00:53:36.984 --> 00:53:38.345
<v Speaker 1>on the Internet instead.

00:53:40.089 --> 00:53:41.050
<v Speaker 0>Okay. You want

00:53:42.250 --> 00:53:45.050
<v Speaker 1>So have you you used anything like request

00:53:45.050 --> 00:53:46.250
<v Speaker 1>bin recently?

00:53:46.410 --> 00:53:48.090
<v Speaker 0>I use Rbox.

00:53:48.810 --> 00:53:49.690
<v Speaker 1>Rawkode Yeah.

00:53:50.970 --> 00:53:52.650
<v Speaker 1>That sounds like the same sort of thing.

00:53:55.595 --> 00:53:57.355
<v Speaker 0>K. So we have an endpoint that can

00:53:57.355 --> 00:53:59.515
<v Speaker 0>receive traffic. So are we gonna update our

00:53:59.515 --> 00:54:02.155
<v Speaker 0>Go code? Or what's your what's your thoughts

00:54:02.155 --> 00:54:03.195
<v Speaker 0>here of what we're doing?

00:54:04.075 --> 00:54:06.955
<v Speaker 1>My thoughts are just go ahead

00:54:07.195 --> 00:54:08.234
<v Speaker 1>and

00:54:10.080 --> 00:54:12.000
<v Speaker 1>set up one of these endpoints on the

00:54:12.000 --> 00:54:12.640
<v Speaker 1>Internet.

00:54:13.040 --> 00:54:14.880
<v Speaker 1>Alright. As I say, I've used request bin

00:54:14.880 --> 00:54:17.200
<v Speaker 1>in the past. What we're gonna do is

00:54:17.200 --> 00:54:19.600
<v Speaker 1>invoke the function asynchronously and have it post

00:54:19.600 --> 00:54:20.640
<v Speaker 1>back to

00:54:22.125 --> 00:54:25.085
<v Speaker 1>your request bin or whatever listener you've set

00:54:25.085 --> 00:54:25.645
<v Speaker 1>up.

00:54:27.965 --> 00:54:28.685
<v Speaker 0>Okay.

00:54:30.205 --> 00:54:31.805
<v Speaker 0>And are we doing that by modifying the

00:54:31.805 --> 00:54:33.965
<v Speaker 0>go code or something else? No. You're just

00:54:33.965 --> 00:54:35.805
<v Speaker 1>gonna set request bin for me now.

00:54:38.840 --> 00:54:39.960
<v Speaker 1>Can you do that?

00:54:40.760 --> 00:54:43.240
<v Speaker 1>I have a I have a bin. Great.

00:54:43.240 --> 00:54:43.880
<v Speaker 1>Okay.

00:54:44.520 --> 00:54:46.360
<v Speaker 1>Now the next part

00:54:47.400 --> 00:54:49.320
<v Speaker 1>is to go back to the terminal.

00:54:49.320 --> 00:54:49.640
<v Speaker 1>Yep.

00:54:50.655 --> 00:54:52.815
<v Speaker 1>And the one that we have on your

00:54:52.815 --> 00:54:55.535
<v Speaker 1>machine where you're invoking it. Yep. Just one

00:54:55.535 --> 00:54:56.415
<v Speaker 1>more header.

00:54:56.815 --> 00:54:58.815
<v Speaker 1>So same again. One more header at the

00:54:58.815 --> 00:54:59.375
<v Speaker 1>end

00:55:00.415 --> 00:55:01.615
<v Speaker 1>or at the beginning.

00:55:02.655 --> 00:55:03.615
<v Speaker 1>X

00:55:03.615 --> 00:55:04.335
<v Speaker 1>dash

00:55:04.575 --> 00:55:05.535
<v Speaker 1>callback

00:55:06.180 --> 00:55:07.700
<v Speaker 1>dash URL

00:55:08.900 --> 00:55:09.780
<v Speaker 1>colon

00:55:09.780 --> 00:55:10.660
<v Speaker 1>space.

00:55:11.220 --> 00:55:11.940
<v Speaker 1>Yep.

00:55:12.660 --> 00:55:14.820
<v Speaker 1>There you go. Enter. Oh, okay. So we

00:55:14.820 --> 00:55:16.820
<v Speaker 0>can pass in a callback URL for the

00:55:16.820 --> 00:55:19.845
<v Speaker 0>asynchronous function, and it's gonna whatever the output

00:55:19.845 --> 00:55:21.365
<v Speaker 0>is, it's gonna send it there.

00:55:21.605 --> 00:55:23.845
<v Speaker 0>Yep. And if I refresh this, there we

00:55:23.845 --> 00:55:24.325
<v Speaker 0>go.

00:55:25.605 --> 00:55:27.845
<v Speaker 1>Now, unfortunately, I can't get my camera back

00:55:27.845 --> 00:55:30.325
<v Speaker 1>on and I've I've switched over to my

00:55:31.020 --> 00:55:31.820
<v Speaker 1>Logitech

00:55:31.820 --> 00:55:33.740
<v Speaker 1>stream cam, and it it's not getting picked

00:55:33.740 --> 00:55:35.580
<v Speaker 1>up. So we'll just have to leave it

00:55:35.580 --> 00:55:36.460
<v Speaker 1>off for now.

00:55:37.100 --> 00:55:38.940
<v Speaker 1>Okay. So we got the call. We also

00:55:38.940 --> 00:55:40.540
<v Speaker 1>got the duration in seconds of how long

00:55:40.540 --> 00:55:41.260
<v Speaker 1>it took.

00:55:41.660 --> 00:55:44.105
<v Speaker 1>And you remember how we paused it earlier?

00:55:44.105 --> 00:55:45.944
<v Speaker 1>We could pause it again, and then we

00:55:45.944 --> 00:55:47.385
<v Speaker 1>could invoke it in the same way. And

00:55:47.385 --> 00:55:49.065
<v Speaker 1>the queue work will simply wake it up

00:55:49.065 --> 00:55:51.065
<v Speaker 1>to do the work. Or if we're using

00:55:51.065 --> 00:55:52.345
<v Speaker 1>a Chrome connector

00:55:52.665 --> 00:55:55.065
<v Speaker 1>and this function was getting put into sleep,

00:55:55.065 --> 00:55:56.025
<v Speaker 1>we had, I don't know,

00:55:56.910 --> 00:55:58.670
<v Speaker 1>200

00:55:58.670 --> 00:56:00.910
<v Speaker 1>for different customers all on the same machine.

00:56:01.390 --> 00:56:03.390
<v Speaker 1>We could pause them all or we could

00:56:03.390 --> 00:56:05.869
<v Speaker 1>scale them all down even with FASTD. And

00:56:05.869 --> 00:56:06.910
<v Speaker 1>then later on,

00:56:07.630 --> 00:56:09.309
<v Speaker 1>as they need it, they can just get

00:56:09.309 --> 00:56:10.990
<v Speaker 1>scaled up again and as you saw how

00:56:10.990 --> 00:56:11.549
<v Speaker 1>fast it was.

00:56:12.585 --> 00:56:15.224
<v Speaker 0>Okay. So we're seeing a response time here

00:56:15.224 --> 00:56:15.705
<v Speaker 0>of

00:56:16.505 --> 00:56:19.145
<v Speaker 0>what is that? Like, nine hundred milliseconds?

00:56:21.785 --> 00:56:24.025
<v Speaker 0>I I don't know. Yeah. Maybe. Because Nine

00:56:24.025 --> 00:56:25.785
<v Speaker 1>hundred milliseconds.

00:56:25.945 --> 00:56:27.705
<v Speaker 1>Well, one thousand milliseconds is a second.

00:56:28.400 --> 00:56:30.800
<v Speaker 1>So I think it's Oh, yeah. A faster

00:56:30.800 --> 00:56:31.440
<v Speaker 1>than that.

00:56:32.320 --> 00:56:34.880
<v Speaker 1>Yeah. Alright. Thousand times faster than a second.

00:56:34.880 --> 00:56:36.720
<v Speaker 1>Yeah. Let's pause that again. That's what you're

00:56:36.720 --> 00:56:38.880
<v Speaker 0>saying. Millisecond. Just under a millisecond by the

00:56:38.880 --> 00:56:39.760
<v Speaker 1>looks of it. Okay.

00:56:40.655 --> 00:56:42.575
<v Speaker 0>I'll fix your your judgment rather than me.

00:56:42.575 --> 00:56:43.535
<v Speaker 0>That's for sure. So

00:56:44.255 --> 00:56:46.095
<v Speaker 1>Yeah. Do it again if you want.

00:56:46.895 --> 00:56:48.815
<v Speaker 0>That's paused now.

00:56:49.055 --> 00:56:49.615
<v Speaker 0>So

00:56:50.175 --> 00:56:52.734
<v Speaker 0>let's hit that again and then refresh this

00:56:52.734 --> 00:56:53.135
<v Speaker 0>page.

00:56:54.130 --> 00:56:57.170
<v Speaker 0>So it took a little bit longer. Yeah.

00:56:57.570 --> 00:56:59.490
<v Speaker 0>But still fast.

00:56:59.490 --> 00:57:01.810
<v Speaker 0>Still very, very fast. So we got a

00:57:01.810 --> 00:57:04.530
<v Speaker 0>couple of questions there. So first, Alistair said

00:57:04.530 --> 00:57:06.609
<v Speaker 0>that was a cool start low. Yeah.

00:57:08.155 --> 00:57:09.115
<v Speaker 0>Marcus,

00:57:09.115 --> 00:57:11.755
<v Speaker 0>yep, really fast. Nice to see you, Marcus.

00:57:12.155 --> 00:57:12.875
<v Speaker 0>No.

00:57:13.035 --> 00:57:16.075
<v Speaker 0>S container d using a freezer secret

00:57:16.075 --> 00:57:17.195
<v Speaker 0>for the pausing.

00:57:17.755 --> 00:57:19.994
<v Speaker 1>I would have to look into that.

00:57:20.875 --> 00:57:22.875
<v Speaker 1>It's u it's using

00:57:24.460 --> 00:57:26.860
<v Speaker 1>it might be doing that. I can't I

00:57:26.860 --> 00:57:29.020
<v Speaker 1>couldn't say for sure. We can find out

00:57:29.020 --> 00:57:30.860
<v Speaker 0>later, and we'll we'll get back to find

00:57:30.860 --> 00:57:32.700
<v Speaker 1>the code. It's com it's it is open

00:57:32.700 --> 00:57:34.060
<v Speaker 1>source, so you can go and look at

00:57:34.060 --> 00:57:35.500
<v Speaker 1>it on GitHub later on.

00:57:37.385 --> 00:57:38.745
<v Speaker 0>Alright. So

00:57:39.305 --> 00:57:40.105
<v Speaker 0>that's

00:57:40.345 --> 00:57:42.025
<v Speaker 0>really, really cool. What what what do we

00:57:42.025 --> 00:57:43.145
<v Speaker 0>do next then, Alex?

00:57:43.545 --> 00:57:45.945
<v Speaker 1>So we talked about Inlets. I think we

00:57:45.945 --> 00:57:46.505
<v Speaker 1>should

00:57:47.705 --> 00:57:49.785
<v Speaker 1>we should show people Inlets.

00:57:50.529 --> 00:57:51.570
<v Speaker 1>Let's do it.

00:57:52.289 --> 00:57:53.010
<v Speaker 1>Now

00:57:53.170 --> 00:57:54.849
<v Speaker 1>we talked a little bit about the use

00:57:54.849 --> 00:57:57.250
<v Speaker 1>cases for this, didn't we, together? And

00:57:57.569 --> 00:57:59.650
<v Speaker 1>I think there's a few there's a few

00:57:59.650 --> 00:58:01.650
<v Speaker 1>use cases. Right? The first one is

00:58:01.809 --> 00:58:05.329
<v Speaker 1>I I'm just developing something on my computer,

00:58:06.285 --> 00:58:08.444
<v Speaker 1>and I want someone on the Internet to

00:58:08.444 --> 00:58:09.885
<v Speaker 1>be able to access it.

00:58:10.605 --> 00:58:12.765
<v Speaker 1>Maybe you've got a local k three s

00:58:12.765 --> 00:58:14.925
<v Speaker 1>cluster. Maybe it's just a normal go binary.

00:58:15.645 --> 00:58:18.365
<v Speaker 1>The second use case is that you are

00:58:18.365 --> 00:58:19.405
<v Speaker 1>a company running

00:58:19.740 --> 00:58:23.020
<v Speaker 1>SQL on premises or active directory on premises.

00:58:23.100 --> 00:58:24.940
<v Speaker 1>And then in the cloud, you have a

00:58:24.940 --> 00:58:26.220
<v Speaker 1>Kubernetes cluster,

00:58:26.380 --> 00:58:27.820
<v Speaker 1>and the two need to talk to each

00:58:27.820 --> 00:58:28.300
<v Speaker 1>other.

00:58:29.500 --> 00:58:31.340
<v Speaker 1>You may think about using a Direct Connect

00:58:31.340 --> 00:58:32.300
<v Speaker 1>or a BlackLine.

00:58:33.075 --> 00:58:34.115
<v Speaker 1>Come and have

00:58:34.355 --> 00:58:36.595
<v Speaker 1>Azure drill a hole through your floor and

00:58:36.595 --> 00:58:39.395
<v Speaker 1>put a fiber cable in. Very expensive.

00:58:39.875 --> 00:58:41.715
<v Speaker 1>Even setting up a VPN,

00:58:41.875 --> 00:58:44.035
<v Speaker 1>I've had customers tell me that it can

00:58:44.035 --> 00:58:46.115
<v Speaker 1>cost them a thousand euros a day just

00:58:46.115 --> 00:58:47.960
<v Speaker 1>to have someone go and connect to VPN

00:58:47.960 --> 00:58:48.920
<v Speaker 1>for a client.

00:58:49.640 --> 00:58:50.920
<v Speaker 1>Inlets instead

00:58:50.920 --> 00:58:53.000
<v Speaker 1>just runs a HTTPS

00:58:53.000 --> 00:58:53.720
<v Speaker 1>tunnel

00:58:53.880 --> 00:58:57.000
<v Speaker 1>and then we can put TCP traffic over

00:58:57.000 --> 00:58:59.240
<v Speaker 1>it. There's a free version of it that

00:58:59.240 --> 00:59:00.359
<v Speaker 1>can do HTTP

00:59:00.359 --> 00:59:00.680
<v Speaker 1>traffic.

00:59:01.795 --> 00:59:03.555
<v Speaker 1>And so that hybrid cloud use case is

00:59:03.555 --> 00:59:06.595
<v Speaker 1>really popular. If you actually go to inlets.dev,

00:59:07.635 --> 00:59:08.595
<v Speaker 1>we can

00:59:09.235 --> 00:59:10.995
<v Speaker 1>show you a quote from one of the

00:59:10.995 --> 00:59:11.715
<v Speaker 1>users.

00:59:12.515 --> 00:59:15.395
<v Speaker 1>It's just about halfway down the page

00:59:19.460 --> 00:59:20.420
<v Speaker 1>from

00:59:20.500 --> 00:59:22.100
<v Speaker 1>to buy us at Fission.

00:59:22.660 --> 00:59:24.980
<v Speaker 1>So they they've really

00:59:26.260 --> 00:59:27.140
<v Speaker 1>regulated

00:59:27.220 --> 00:59:30.075
<v Speaker 1>customers that they work with. The VPC doesn't

00:59:30.075 --> 00:59:33.035
<v Speaker 1>allow for incoming connections. They can set

00:59:33.595 --> 00:59:34.875
<v Speaker 1>allowed egress.

00:59:35.035 --> 00:59:36.955
<v Speaker 1>And so what they do is they run-inlets

00:59:37.355 --> 00:59:39.515
<v Speaker 1>in the VPC of customer

00:59:39.915 --> 00:59:43.290
<v Speaker 1>right next to the OpenShift API server that

00:59:43.290 --> 00:59:45.930
<v Speaker 1>then allows them to build a managed OpenShift

00:59:45.930 --> 00:59:46.650
<v Speaker 1>product

00:59:47.530 --> 00:59:50.010
<v Speaker 1>and to talk to that API server, list

00:59:50.010 --> 00:59:50.970
<v Speaker 1>containers,

00:59:52.890 --> 00:59:55.050
<v Speaker 1>and do whatever operations they need to do.

00:59:56.570 --> 00:59:57.370
<v Speaker 0>Nice.

00:59:57.370 --> 00:59:58.010
<v Speaker 0>Very nice.

01:00:00.285 --> 01:00:02.125
<v Speaker 0>So do you want me to download the

01:00:02.125 --> 01:00:02.845
<v Speaker 0>binary?

01:00:03.325 --> 01:00:04.445
<v Speaker 1>So I was thinking

01:00:08.205 --> 01:00:09.885
<v Speaker 1>what could we do? So I sent you

01:00:09.885 --> 01:00:11.645
<v Speaker 1>a trial for the Inlets Pro earlier. That's

01:00:11.645 --> 01:00:13.680
<v Speaker 1>a bit more interesting. Do you have Kubernetes

01:00:13.680 --> 01:00:15.520
<v Speaker 1>running on your on your computer? You say

01:00:15.520 --> 01:00:17.760
<v Speaker 1>you use Docker desktop, don't you? Yeah. Docker

01:00:17.760 --> 01:00:19.600
<v Speaker 0>for Mac has Kubernetes enabled. Yes.

01:00:20.160 --> 01:00:22.080
<v Speaker 1>So if you open the tab that terminal

01:00:22.080 --> 01:00:23.600
<v Speaker 1>again, can you show me

01:00:24.160 --> 01:00:25.440
<v Speaker 1>kubectl get nodes?

01:00:30.655 --> 01:00:32.655
<v Speaker 0>While we do that, I can also say

01:00:32.655 --> 01:00:35.055
<v Speaker 0>that null looked at the code and it

01:00:35.055 --> 01:00:37.455
<v Speaker 0>does on Linux use the free search secret.

01:00:37.535 --> 01:00:38.335
<v Speaker 0>So Cool.

01:00:39.215 --> 01:00:40.494
<v Speaker 0>So we don't have Kubernetes.

01:00:41.000 --> 01:00:43.560
<v Speaker 1>So Nuno was asking about Arcade.

01:00:43.799 --> 01:00:44.599
<v Speaker 1>Arcade

01:00:44.599 --> 01:00:46.840
<v Speaker 1>is a tool that

01:00:47.319 --> 01:00:48.440
<v Speaker 1>I was trying to think of how to

01:00:48.440 --> 01:00:51.720
<v Speaker 1>talk about this. It's basically a marketplace

01:00:51.720 --> 01:00:52.599
<v Speaker 1>for Kubernetes.

01:00:53.645 --> 01:00:55.484
<v Speaker 1>I think that's probably what we need to

01:00:55.484 --> 01:00:57.085
<v Speaker 1>put in the readme file because that's what

01:00:57.085 --> 01:00:59.405
<v Speaker 1>it is. It's a marketplace for CLIs.

01:00:59.484 --> 01:01:01.485
<v Speaker 1>It's a marketplace for Helm charts.

01:01:01.885 --> 01:01:03.885
<v Speaker 1>It's the easiest way we can do the

01:01:03.885 --> 01:01:04.685
<v Speaker 1>next step.

01:01:05.244 --> 01:01:06.765
<v Speaker 1>So let's say if you go to get

01:01:06.765 --> 01:01:08.045
<v Speaker 1>arcade.dev

01:01:09.920 --> 01:01:11.119
<v Speaker 1>with a dash,

01:01:11.359 --> 01:01:13.280
<v Speaker 1>I did want arcade.dev.

01:01:13.599 --> 01:01:16.320
<v Speaker 1>Somebody at at Versa was sitting on it.

01:01:16.559 --> 01:01:17.119
<v Speaker 1>If

01:01:18.079 --> 01:01:19.599
<v Speaker 1>you're listening, I'd I'd like it.

01:01:21.234 --> 01:01:22.515
<v Speaker 1>And, again,

01:01:22.595 --> 01:01:24.595
<v Speaker 1>you can download the binary if you like

01:01:24.595 --> 01:01:26.595
<v Speaker 1>doing it, the sort of slower way or

01:01:26.595 --> 01:01:27.555
<v Speaker 1>the slash.

01:01:30.115 --> 01:01:32.355
<v Speaker 1>And, you know, there's a trusting option,

01:01:32.355 --> 01:01:34.115
<v Speaker 1>and there's a a less trusting option.

01:01:34.830 --> 01:01:36.750
<v Speaker 1>You get to pick what you want.

01:01:38.030 --> 01:01:38.430
<v Speaker 1>Well

01:01:38.910 --> 01:01:40.670
<v Speaker 1>David and I were friends.

01:01:40.830 --> 01:01:42.030
<v Speaker 1>Oh, dear. Oh.

01:01:44.190 --> 01:01:45.550
<v Speaker 1>I'll tell you what I did to that

01:01:45.550 --> 01:01:45.950
<v Speaker 1>on

01:01:46.430 --> 01:01:48.910
<v Speaker 1>we were doing sick sick Fridays in Europe,

01:01:49.445 --> 01:01:52.245
<v Speaker 1>and I had about 20 Kubernetes experts watching

01:01:52.245 --> 01:01:54.085
<v Speaker 1>me type my Git password in.

01:01:54.965 --> 01:01:56.805
<v Speaker 0>It's only a password I use for my

01:01:56.805 --> 01:01:58.645
<v Speaker 0>local machine, so I'm not Well, there you

01:01:58.645 --> 01:01:59.125
<v Speaker 1>go.

01:02:00.325 --> 01:02:00.805
<v Speaker 1>Now

01:02:02.210 --> 01:02:03.730
<v Speaker 1>I don't know how to sort this out

01:02:03.730 --> 01:02:05.090
<v Speaker 1>for ZSH.

01:02:05.170 --> 01:02:05.730
<v Speaker 1>So

01:02:07.970 --> 01:02:09.170
<v Speaker 1>okay. Great.

01:02:10.130 --> 01:02:11.810
<v Speaker 1>So we got arcade now.

01:02:11.970 --> 01:02:13.410
<v Speaker 1>We type in arcade.

01:02:13.490 --> 01:02:14.130
<v Speaker 1>Yep.

01:02:14.529 --> 01:02:15.410
<v Speaker 1>Yeah. Alright.

01:02:16.445 --> 01:02:18.845
<v Speaker 1>What we want to do is Arcade install

01:02:18.845 --> 01:02:20.685
<v Speaker 1>inlets dash operator

01:02:20.845 --> 01:02:22.205
<v Speaker 1>dash dash help.

01:02:22.525 --> 01:02:26.205
<v Speaker 1>The inlets operator is a Kubernetes operator that

01:02:26.285 --> 01:02:28.285
<v Speaker 1>runs inlets for us.

01:02:29.325 --> 01:02:30.845
<v Speaker 0>Oh, space operator.

01:02:32.600 --> 01:02:33.880
<v Speaker 1>Inlets dash.

01:02:38.840 --> 01:02:40.600
<v Speaker 1>Yeah. And so if we scroll up a

01:02:40.600 --> 01:02:43.480
<v Speaker 1>little bit, we've got various options because

01:02:44.120 --> 01:02:46.040
<v Speaker 1>what the operator can do is

01:02:46.375 --> 01:02:48.535
<v Speaker 1>it it can set up a server for

01:02:48.535 --> 01:02:50.055
<v Speaker 1>you on your favorite cloud,

01:02:51.415 --> 01:02:52.295
<v Speaker 1>DigitalOcean,

01:02:52.295 --> 01:02:53.895
<v Speaker 1>Azure, whatever it may be.

01:02:54.295 --> 01:02:56.855
<v Speaker 1>And then excuse me. We use the public

01:02:56.855 --> 01:02:57.335
<v Speaker 1>IP,

01:02:58.770 --> 01:03:01.250
<v Speaker 1>and we route the traffic. So any traffic

01:03:01.250 --> 01:03:03.890
<v Speaker 1>and bytes that hit that public IP on

01:03:03.890 --> 01:03:04.770
<v Speaker 1>that server,

01:03:04.930 --> 01:03:06.690
<v Speaker 1>they go into the Inlets server.

01:03:06.850 --> 01:03:09.570
<v Speaker 1>It's got a permanent WebSocket established and it

01:03:09.570 --> 01:03:11.650
<v Speaker 1>just forwards it onto a client

01:03:12.185 --> 01:03:14.425
<v Speaker 1>running inside your cluster.

01:03:14.825 --> 01:03:17.385
<v Speaker 1>And then the client knows where that data

01:03:17.385 --> 01:03:18.025
<v Speaker 1>goes.

01:03:18.265 --> 01:03:20.585
<v Speaker 1>So in the in the example of I

01:03:20.585 --> 01:03:22.425
<v Speaker 1>don't know. Let's say we had a load

01:03:22.425 --> 01:03:24.425
<v Speaker 1>balancer in an ingress NGINX.

01:03:25.750 --> 01:03:27.670
<v Speaker 1>The operator would see that it wants a

01:03:27.670 --> 01:03:28.710
<v Speaker 1>load balancer,

01:03:28.790 --> 01:03:30.950
<v Speaker 1>creates the host on the Internet.

01:03:31.590 --> 01:03:34.070
<v Speaker 1>Then whenever it receives any traffic, it sends

01:03:34.070 --> 01:03:36.310
<v Speaker 1>it to the client. The client says, I

01:03:36.310 --> 01:03:39.510
<v Speaker 1>send all of data on +1 8443

01:03:39.684 --> 01:03:40.325
<v Speaker 1>to

01:03:40.885 --> 01:03:42.005
<v Speaker 1>a service,

01:03:42.164 --> 01:03:44.565
<v Speaker 1>a service called Ingress Controller,

01:03:45.125 --> 01:03:47.285
<v Speaker 1>and then it all just works. And because

01:03:47.285 --> 01:03:50.005
<v Speaker 1>you've got TCP for four four three, you

01:03:50.005 --> 01:03:51.605
<v Speaker 1>can even use cert manager as well.

01:03:55.010 --> 01:03:55.810
<v Speaker 1>I think

01:03:55.970 --> 01:03:57.170
<v Speaker 1>we can do this

01:03:57.650 --> 01:04:00.530
<v Speaker 1>easier if I send you a tutorial because

01:04:00.530 --> 01:04:01.250
<v Speaker 1>I know

01:04:02.210 --> 01:04:04.050
<v Speaker 1>you don't you're not as keen on doing

01:04:04.050 --> 01:04:05.010
<v Speaker 1>things ahead of time,

01:04:06.615 --> 01:04:07.175
<v Speaker 1>but

01:04:07.735 --> 01:04:10.215
<v Speaker 1>this is something that we can paste and

01:04:10.215 --> 01:04:12.215
<v Speaker 1>chat about. I'll put it on this one.

01:04:12.855 --> 01:04:14.375
<v Speaker 1>See if you can get that open.

01:04:14.935 --> 01:04:15.815
<v Speaker 0>Yep.

01:04:15.975 --> 01:04:18.295
<v Speaker 0>Copy that. There's actually a few people came

01:04:18.295 --> 01:04:20.930
<v Speaker 1>to me recently, and they're saying, well, you

01:04:20.930 --> 01:04:22.450
<v Speaker 1>know, what to expose a k three s

01:04:22.450 --> 01:04:23.250
<v Speaker 1>cluster?

01:04:23.410 --> 01:04:24.930
<v Speaker 1>Zoom in a little bit.

01:04:26.690 --> 01:04:28.609
<v Speaker 1>Can I use the open source version? And

01:04:28.609 --> 01:04:30.530
<v Speaker 1>there's various ways that you can do that,

01:04:30.930 --> 01:04:32.930
<v Speaker 1>but the the pro version that we're using

01:04:32.930 --> 01:04:34.609
<v Speaker 1>here just makes it so much easier.

01:04:37.165 --> 01:04:39.325
<v Speaker 1>There we go. So you need to set

01:04:39.325 --> 01:04:41.005
<v Speaker 1>up your access token

01:04:41.885 --> 01:04:44.685
<v Speaker 1>for packet for Equinix metal,

01:04:45.244 --> 01:04:47.244
<v Speaker 1>and that's the file. That's not the actual

01:04:47.244 --> 01:04:48.045
<v Speaker 1>value.

01:04:48.125 --> 01:04:50.204
<v Speaker 1>So have you got a a file on

01:04:50.204 --> 01:04:51.325
<v Speaker 1>your disk with

01:04:51.780 --> 01:04:53.460
<v Speaker 1>an API key in it?

01:04:54.660 --> 01:04:56.100
<v Speaker 0>I can get one.

01:04:56.500 --> 01:04:59.380
<v Speaker 1>Let's do that. So over on your dashboard

01:04:59.380 --> 01:05:00.100
<v Speaker 1>under

01:05:00.900 --> 01:05:01.940
<v Speaker 1>your account,

01:05:02.820 --> 01:05:04.260
<v Speaker 1>sure you know where to get it.

01:05:05.095 --> 01:05:06.935
<v Speaker 0>Yeah. I've done that once or twice.

01:05:09.655 --> 01:05:12.935
<v Speaker 0>Alright. Let's see. There is a code there.

01:05:13.175 --> 01:05:15.175
<v Speaker 0>So let me just pop open one more

01:05:15.175 --> 01:05:16.055
<v Speaker 0>terminal.

01:05:17.095 --> 01:05:18.135
<v Speaker 0>Open window, please.

01:05:20.540 --> 01:05:21.260
<v Speaker 0>Here.

01:05:21.740 --> 01:05:22.780
<v Speaker 0>Secrets.

01:05:23.500 --> 01:05:24.220
<v Speaker 0>So

01:05:24.780 --> 01:05:26.460
<v Speaker 0>them dot access.

01:05:28.220 --> 01:05:30.620
<v Speaker 1>Now each provider on the Internet could take

01:05:30.620 --> 01:05:32.540
<v Speaker 1>different options. Packet,

01:05:33.260 --> 01:05:35.815
<v Speaker 1>the packet providers, it's still called that, It's

01:05:35.815 --> 01:05:36.695
<v Speaker 1>relatively

01:05:36.695 --> 01:05:37.495
<v Speaker 1>straightforward.

01:05:37.655 --> 01:05:39.895
<v Speaker 1>The only extra thing we need above

01:05:39.895 --> 01:05:43.495
<v Speaker 1>in this command is the the project ID.

01:05:43.895 --> 01:05:44.455
<v Speaker 1>Yeah.

01:05:45.255 --> 01:05:47.335
<v Speaker 1>The region can be left blank

01:05:47.430 --> 01:05:48.790
<v Speaker 1>and it would default.

01:05:49.109 --> 01:05:50.869
<v Speaker 0>What can I ask a question quickly? See

01:05:50.869 --> 01:05:53.270
<v Speaker 0>the license fail, is that the entire thing

01:05:53.270 --> 01:05:54.950
<v Speaker 0>you sent me or just the key?

01:05:55.190 --> 01:05:57.430
<v Speaker 1>It's just the job at the end. Alright.

01:05:57.430 --> 01:05:59.829
<v Speaker 0>Got it. Okay. Let me get that. Alright.

01:05:59.829 --> 01:06:01.430
<v Speaker 0>Okay. So we got

01:06:02.855 --> 01:06:04.295
<v Speaker 0>oh, and let's

01:06:04.375 --> 01:06:05.655
<v Speaker 0>put that in it.

01:06:06.135 --> 01:06:09.255
<v Speaker 0>Alright. So I've got two files.

01:06:09.335 --> 01:06:11.815
<v Speaker 0>So I need to export

01:06:11.815 --> 01:06:12.615
<v Speaker 0>this.

01:06:15.150 --> 01:06:16.430
<v Speaker 0>Computer. Yeah. Okay.

01:06:16.990 --> 01:06:19.869
<v Speaker 0>And this is going to be

01:06:21.470 --> 01:06:22.910
<v Speaker 0>what's last dot

01:06:24.829 --> 01:06:26.829
<v Speaker 0>oh, I zoomed in. That's what it was.

01:06:26.829 --> 01:06:29.204
<v Speaker 0>Got it. Is it in that temporary directory?

01:06:29.204 --> 01:06:30.805
<v Speaker 1>Is that where you have it? Yeah. I've

01:06:30.805 --> 01:06:33.205
<v Speaker 0>got it here. So Okay. Access

01:06:33.525 --> 01:06:36.725
<v Speaker 0>and my license file is

01:06:36.964 --> 01:06:38.085
<v Speaker 0>very similar.

01:06:42.164 --> 01:06:43.369
<v Speaker 0>It about slash and

01:06:46.250 --> 01:06:48.090
<v Speaker 1>Just do an l s if you can.

01:06:51.530 --> 01:06:54.725
<v Speaker 0>Access button that's Yeah. Looks good. Okay. So

01:06:54.725 --> 01:06:56.885
<v Speaker 0>now we can run this command here.

01:06:57.365 --> 01:07:00.085
<v Speaker 1>I would not run that because it's

01:07:00.085 --> 01:07:02.325
<v Speaker 1>wrong for you. Maybe put it in a

01:07:02.325 --> 01:07:04.725
<v Speaker 1>text file. We'll edit it and then

01:07:05.285 --> 01:07:06.005
<v Speaker 1>run it.

01:07:06.405 --> 01:07:06.645
<v Speaker 1>Yeah.

01:07:07.359 --> 01:07:10.320
<v Speaker 0>So we're gonna run with the packet provider

01:07:10.560 --> 01:07:12.560
<v Speaker 0>Yep. AM six.

01:07:13.040 --> 01:07:14.560
<v Speaker 1>I would get rid of the region because

01:07:14.560 --> 01:07:15.200
<v Speaker 1>I

01:07:15.920 --> 01:07:18.000
<v Speaker 1>it will default to Europe

01:07:18.320 --> 01:07:18.800
<v Speaker 1>anyway.

01:07:19.825 --> 01:07:20.545
<v Speaker 1>Yep.

01:07:21.105 --> 01:07:23.825
<v Speaker 1>Token files, correct. License file, correct. The other

01:07:23.825 --> 01:07:26.385
<v Speaker 1>thing you're gonna need is your project ID.

01:07:28.145 --> 01:07:30.705
<v Speaker 0>That is project ID, like And that isn't

01:07:30.705 --> 01:07:31.585
<v Speaker 1>confidential.

01:07:31.585 --> 01:07:33.425
<v Speaker 1>So you I don't know. Should just be

01:07:33.425 --> 01:07:34.305
<v Speaker 1>able to paste that on.

01:07:35.529 --> 01:07:37.450
<v Speaker 0>Well, I mean, I've already flashed my, you

01:07:37.450 --> 01:07:39.849
<v Speaker 0>know, machine's password. What's a few more things?

01:07:40.730 --> 01:07:42.170
<v Speaker 1>At least you have the secure

01:07:42.329 --> 01:07:44.250
<v Speaker 1>enclave for your SSH key.

01:07:46.490 --> 01:07:48.009
<v Speaker 0>Okay.

01:07:48.009 --> 01:07:49.529
<v Speaker 0>So let's

01:07:49.415 --> 01:07:51.575
<v Speaker 0>I don't know if that needs quoting. We'll

01:07:51.575 --> 01:07:52.375
<v Speaker 1>find out.

01:07:58.535 --> 01:07:59.815
<v Speaker 1>What's happening there?

01:08:00.135 --> 01:08:02.775
<v Speaker 1>Well, it's downloading Helm Helm three

01:08:03.494 --> 01:08:05.095
<v Speaker 1>because

01:08:04.670 --> 01:08:06.190
<v Speaker 1>it's just easier

01:08:06.190 --> 01:08:08.670
<v Speaker 1>if it's one command rather than telling you

01:08:08.670 --> 01:08:11.070
<v Speaker 1>download Helm at this repo, update it, now

01:08:11.070 --> 01:08:13.070
<v Speaker 1>apply the CRD. All of that's done for

01:08:13.070 --> 01:08:13.630
<v Speaker 1>you,

01:08:13.870 --> 01:08:15.470
<v Speaker 1>and it's done in a temporary directory so

01:08:15.470 --> 01:08:16.670
<v Speaker 1>it doesn't interfere

01:08:16.830 --> 01:08:17.710
<v Speaker 1>with your stuff.

01:08:19.975 --> 01:08:22.055
<v Speaker 1>Have you got any services in the cluster?

01:08:22.055 --> 01:08:25.335
<v Speaker 1>If you get kubectl get service dash capital

01:08:25.335 --> 01:08:25.975
<v Speaker 1>a,

01:08:26.215 --> 01:08:27.895
<v Speaker 1>what have you got? There there won't be

01:08:27.895 --> 01:08:28.535
<v Speaker 0>anything.

01:08:29.175 --> 01:08:30.135
<v Speaker 1>Let's see.

01:08:31.255 --> 01:08:32.775
<v Speaker 1>No. You don't have anything. You want me

01:08:32.775 --> 01:08:33.335
<v Speaker 0>to deploy something?

01:08:34.000 --> 01:08:36.000
<v Speaker 1>We wanna deploy something that has a load

01:08:36.000 --> 01:08:37.359
<v Speaker 1>balancer on it.

01:08:40.960 --> 01:08:42.800
<v Speaker 0>You mean a service or an actual load

01:08:42.800 --> 01:08:43.919
<v Speaker 0>balancer? About

01:08:44.399 --> 01:08:46.479
<v Speaker 1>a load balancer service. How about we install

01:08:46.479 --> 01:08:47.599
<v Speaker 1>Ingress NGINX?

01:08:49.625 --> 01:08:51.545
<v Speaker 0>Okay. Can we do that with Arcade? We

01:08:51.545 --> 01:08:53.944
<v Speaker 1>can. Alright. Show me the magic.

01:08:54.745 --> 01:08:56.185
<v Speaker 1>Arcade install

01:08:57.145 --> 01:08:58.024
<v Speaker 1>Ingress

01:08:58.185 --> 01:09:00.345
<v Speaker 1>NGINX, and we don't need any parameters for

01:09:00.345 --> 01:09:00.745
<v Speaker 1>this one.

01:09:03.560 --> 01:09:04.600
<v Speaker 0>Someone asked

01:09:05.640 --> 01:09:06.920
<v Speaker 1>me, well, what about if I want to

01:09:06.920 --> 01:09:09.000
<v Speaker 1>go actually, we've got the tutorial. I don't

01:09:09.000 --> 01:09:10.200
<v Speaker 1>know why I'm talking you through this. We

01:09:10.200 --> 01:09:11.640
<v Speaker 1>should go back to the tutorial.

01:09:13.720 --> 01:09:15.480
<v Speaker 1>There we are. So

01:09:16.295 --> 01:09:17.334
<v Speaker 1>install nginx,

01:09:18.054 --> 01:09:19.574
<v Speaker 1>install cert manager.

01:09:20.774 --> 01:09:22.135
<v Speaker 1>Get that one ready.

01:09:22.455 --> 01:09:24.295
<v Speaker 1>I don't know if Martha's gonna be watching

01:09:24.295 --> 01:09:25.255
<v Speaker 1>this later.

01:09:27.654 --> 01:09:29.734
<v Speaker 0>Okay. So let's go over this review. I

01:09:29.734 --> 01:09:31.335
<v Speaker 0>have installed an nginx ingress.

01:09:31.860 --> 01:09:34.180
<v Speaker 0>We got the endless operator,

01:09:35.060 --> 01:09:37.380
<v Speaker 0>and we got cert manager. So does that

01:09:37.380 --> 01:09:40.020
<v Speaker 0>means I mean, in theory here, I can

01:09:41.700 --> 01:09:42.500
<v Speaker 0>expose

01:09:42.660 --> 01:09:43.939
<v Speaker 0>that NGINX

01:09:43.939 --> 01:09:44.739
<v Speaker 0>Ingress

01:09:44.740 --> 01:09:45.300
<v Speaker 0>to you.

01:09:46.585 --> 01:09:49.465
<v Speaker 1>You It's already getting exposed right now. Have

01:09:49.465 --> 01:09:51.304
<v Speaker 1>a look on your packet dashboard. Let's see

01:09:51.304 --> 01:09:52.824
<v Speaker 1>if we've got the server getting created.

01:09:58.890 --> 01:10:00.650
<v Speaker 1>Is this the right project ID? Do you

01:10:00.650 --> 01:10:01.770
<v Speaker 1>need to refresh?

01:10:06.250 --> 01:10:07.050
<v Speaker 0>I'm

01:10:07.050 --> 01:10:09.610
<v Speaker 0>pretty sure that's the right project ID, ED10.

01:10:09.610 --> 01:10:10.890
<v Speaker 0>Interesting. Okay.

01:10:11.050 --> 01:10:14.170
<v Speaker 1>Let's do arcade info inlets operator.

01:10:17.175 --> 01:10:18.695
<v Speaker 0>Arcade info

01:10:18.695 --> 01:10:19.735
<v Speaker 0>inlets.

01:10:21.175 --> 01:10:21.735
<v Speaker 0>I

01:10:22.695 --> 01:10:25.015
<v Speaker 1>might have told you wrong earlier about the

01:10:25.015 --> 01:10:26.375
<v Speaker 1>region, and then let's get the logs of

01:10:26.375 --> 01:10:28.135
<v Speaker 1>the operator to see if there's anything

01:10:28.489 --> 01:10:31.050
<v Speaker 1>going wrong with it. The thing about Arcade

01:10:31.050 --> 01:10:32.010
<v Speaker 1>is anything

01:10:32.650 --> 01:10:34.010
<v Speaker 1>that you install,

01:10:34.410 --> 01:10:36.090
<v Speaker 1>you also get a help message that you

01:10:36.090 --> 01:10:38.090
<v Speaker 1>can pull back at any time, whether that's

01:10:38.090 --> 01:10:39.210
<v Speaker 1>OpenFaaS or otherwise.

01:10:40.905 --> 01:10:43.225
<v Speaker 1>Yeah. It's just in Lan 1 London 1

01:10:43.225 --> 01:10:44.745
<v Speaker 0>by default, which isn't a.

01:10:45.305 --> 01:10:46.745
<v Speaker 1>No. So we just need to do an

01:10:46.745 --> 01:10:49.145
<v Speaker 1>install again, same command.

01:10:50.585 --> 01:10:52.585
<v Speaker 1>And then at the end, just put region.

01:10:57.330 --> 01:10:59.810
<v Speaker 1>And I don't think it's with a space.

01:10:59.810 --> 01:11:01.969
<v Speaker 1>Yeah. Is it a m six?

01:11:02.610 --> 01:11:04.690
<v Speaker 0>Yeah. I use a m six pretty pretty

01:11:04.690 --> 01:11:06.610
<v Speaker 0>insclusively. The code is okay.

01:11:07.010 --> 01:11:08.929
<v Speaker 0>Well, we should see something spin up here.

01:11:08.929 --> 01:11:11.175
<v Speaker 0>Right? Yeah. We should do. And let's get

01:11:11.175 --> 01:11:13.415
<v Speaker 1>the logs of the operator again. Just have

01:11:13.415 --> 01:11:14.534
<v Speaker 1>a watch of that.

01:11:19.175 --> 01:11:21.175
<v Speaker 1>No. You don't have any a any t

01:11:21.175 --> 01:11:23.815
<v Speaker 1>one smalls there. I use use one smalls

01:11:23.895 --> 01:11:26.970
<v Speaker 1>for them. T one smalls are mostly deprecated.

01:11:26.970 --> 01:11:28.330
<v Speaker 0>Can we overwrite the

01:11:28.650 --> 01:11:30.409
<v Speaker 1>machine It's hard coded.

01:11:30.650 --> 01:11:33.210
<v Speaker 1>We use the cheapest one that we could

01:11:33.210 --> 01:11:34.890
<v Speaker 1>find. I'm actually surprised.

01:11:34.890 --> 01:11:36.650
<v Speaker 1>Let me see what region I was using

01:11:36.650 --> 01:11:37.210
<v Speaker 1>then

01:11:37.775 --> 01:11:39.534
<v Speaker 1>because this is the first one that I

01:11:39.534 --> 01:11:40.655
<v Speaker 1>added to it.

01:11:45.614 --> 01:11:48.415
<v Speaker 1>It should be in OpenFaaS only Inlets docs

01:11:48.415 --> 01:11:48.895
<v Speaker 1>as well.

01:11:51.900 --> 01:11:53.340
<v Speaker 0>Let's see if I can find a t

01:11:53.340 --> 01:11:54.620
<v Speaker 0>one small then.

01:11:54.940 --> 01:11:56.940
<v Speaker 0>Yeah. A m's one has it, which is

01:11:56.940 --> 01:11:58.860
<v Speaker 0>a Yeah. That's one I use. A m

01:11:58.860 --> 01:11:59.580
<v Speaker 1>s one.

01:11:59.980 --> 01:12:03.660
<v Speaker 0>That's the older data centers. Oh, cool. Requests

01:12:03.660 --> 01:12:04.620
<v Speaker 1>are welcome.

01:12:05.820 --> 01:12:08.265
<v Speaker 0>Okay. On that, don't you worry? Okay. So

01:12:08.265 --> 01:12:09.865
<v Speaker 0>now that we're using a data center that

01:12:09.865 --> 01:12:11.705
<v Speaker 0>has a t one small available, we should

01:12:11.705 --> 01:12:14.265
<v Speaker 0>see our server. There we go. Yeah. There

01:12:14.265 --> 01:12:15.945
<v Speaker 1>it is. And it's got the name of

01:12:15.945 --> 01:12:18.185
<v Speaker 1>the service it's been exposed for. We've got

01:12:18.185 --> 01:12:18.745
<v Speaker 1>the IP.

01:12:20.119 --> 01:12:21.079
<v Speaker 1>We're using

01:12:21.480 --> 01:12:24.280
<v Speaker 1>an older version of it been to because

01:12:25.320 --> 01:12:27.000
<v Speaker 1>packet I don't know if it's still the

01:12:27.000 --> 01:12:29.239
<v Speaker 1>case, but it used to have, like, accelerations

01:12:29.239 --> 01:12:30.840
<v Speaker 1>for certain images.

01:12:32.040 --> 01:12:33.880
<v Speaker 1>They were precached on the hosts.

01:12:36.514 --> 01:12:37.074
<v Speaker 0>Okay.

01:12:37.955 --> 01:12:40.435
<v Speaker 0>I don't know. And 16 o four was

01:12:40.435 --> 01:12:41.715
<v Speaker 1>what what's the image?

01:12:42.275 --> 01:12:44.675
<v Speaker 1>The guy the other guys will will know

01:12:44.675 --> 01:12:46.034
<v Speaker 1>Jacob or Ed.

01:12:46.435 --> 01:12:46.755
<v Speaker 1>So

01:12:47.360 --> 01:12:48.960
<v Speaker 0>Yeah. That's a that should be fast. It

01:12:48.960 --> 01:12:50.559
<v Speaker 0>should be under a minute roughly for that.

01:12:50.559 --> 01:12:51.039
<v Speaker 0>Yeah.

01:12:51.440 --> 01:12:53.119
<v Speaker 1>Now on other clouds,

01:12:53.599 --> 01:12:54.639
<v Speaker 1>like DigitalOcean,

01:12:54.639 --> 01:12:56.639
<v Speaker 1>you're not looking at bare metal. You're looking

01:12:56.639 --> 01:12:58.400
<v Speaker 1>at literally just

01:12:59.455 --> 01:13:01.614
<v Speaker 1>AVM running with QMU.

01:13:01.695 --> 01:13:03.935
<v Speaker 1>That's lightning fast. So you'll get one of

01:13:03.935 --> 01:13:06.494
<v Speaker 1>these in ten, twenty seconds.

01:13:07.695 --> 01:13:09.455
<v Speaker 1>Now if you aren't used to the speed

01:13:09.455 --> 01:13:11.215
<v Speaker 1>of Amazon or something like that, you know,

01:13:11.215 --> 01:13:12.975
<v Speaker 1>you can be waiting ten minutes, I often

01:13:12.975 --> 01:13:13.534
<v Speaker 1>am.

01:13:14.255 --> 01:13:16.415
<v Speaker 1>It's

01:13:15.150 --> 01:13:17.230
<v Speaker 1>normally a lot faster than that.

01:13:17.550 --> 01:13:19.150
<v Speaker 1>We got our IP anyway.

01:13:19.310 --> 01:13:21.150
<v Speaker 1>And what's gonna happen once this starts up

01:13:21.150 --> 01:13:23.070
<v Speaker 1>is it's just gonna run Cloudinit on the

01:13:23.070 --> 01:13:23.710
<v Speaker 1>host.

01:13:24.190 --> 01:13:26.030
<v Speaker 1>It's going to pull down the Inlets Pro

01:13:26.030 --> 01:13:28.270
<v Speaker 1>binary. It's gonna install a system to unit

01:13:28.270 --> 01:13:29.630
<v Speaker 1>file, start the service,

01:13:30.225 --> 01:13:31.905
<v Speaker 1>configure it with the auth token that was

01:13:31.905 --> 01:13:33.425
<v Speaker 1>generated by the operator,

01:13:33.665 --> 01:13:34.864
<v Speaker 1>and it will be listening

01:13:35.105 --> 01:13:36.304
<v Speaker 1>for requests.

01:13:37.425 --> 01:13:40.385
<v Speaker 1>Inside your cluster, you should see a pod

01:13:41.665 --> 01:13:44.864
<v Speaker 1>in the default namespace called something like tunnel.

01:13:49.400 --> 01:13:51.320
<v Speaker 1>Maybe it's a deployment in case the pod

01:13:51.320 --> 01:13:52.679
<v Speaker 1>isn't starting yet.

01:13:55.719 --> 01:13:56.599
<v Speaker 1>Interesting.

01:13:57.320 --> 01:13:59.160
<v Speaker 1>What about other namespaces?

01:14:06.775 --> 01:14:08.934
<v Speaker 0>I don't see a tunnel.

01:14:09.095 --> 01:14:10.454
<v Speaker 1>No. I don't see it.

01:14:10.855 --> 01:14:13.175
<v Speaker 1>So you should have a client get scheduled.

01:14:13.175 --> 01:14:14.695
<v Speaker 1>Let's look at the logs again of the

01:14:14.695 --> 01:14:16.775
<v Speaker 1>operator just as that host is coming up.

01:14:20.719 --> 01:14:23.679
<v Speaker 1>Anything further up? Yeah. It says it's syncing

01:14:23.679 --> 01:14:27.199
<v Speaker 0>the default Ingress NGINX controller tunnel. Yeah. That's

01:14:28.800 --> 01:14:31.599
<v Speaker 1>that should be the deployment. Yeah. What else

01:14:31.599 --> 01:14:32.559
<v Speaker 1>have we got in the logs?

01:14:36.725 --> 01:14:38.485
<v Speaker 1>A great deal. Okay.

01:14:40.245 --> 01:14:40.565
<v Speaker 1>So

01:14:42.565 --> 01:14:43.844
<v Speaker 0>There we go. We got it Yeah.

01:14:46.130 --> 01:14:47.730
<v Speaker 1>You can look at the logs of that

01:14:47.730 --> 01:14:48.610
<v Speaker 1>if you want.

01:14:56.290 --> 01:15:00.145
<v Speaker 1>You see it's connected now. Ports 18443

01:15:00.145 --> 01:15:01.824
<v Speaker 1>are getting forwarded.

01:15:02.705 --> 01:15:05.025
<v Speaker 1>Now I'm gonna try it from my computer.

01:15:05.025 --> 01:15:10.065
<v Speaker 1>1477584223.

01:15:10.305 --> 01:15:10.625
<v Speaker 1>Yeah.

01:15:11.280 --> 01:15:12.480
<v Speaker 1>And it's giving me

01:15:13.040 --> 01:15:14.960
<v Speaker 1>exactly what I would expect to see

01:15:15.680 --> 01:15:16.320
<v Speaker 1>from

01:15:16.960 --> 01:15:19.600
<v Speaker 1>NGINX if I'd exposed it from an ALB

01:15:19.600 --> 01:15:20.639
<v Speaker 1>on Amazon.

01:15:20.880 --> 01:15:22.560
<v Speaker 1>Can you click on what I sent you?

01:15:25.545 --> 01:15:26.505
<v Speaker 0>Yep.

01:15:30.505 --> 01:15:33.065
<v Speaker 1>So not found because we haven't got any

01:15:33.065 --> 01:15:34.345
<v Speaker 1>ingress records yet.

01:15:34.505 --> 01:15:35.785
<v Speaker 1>We're not looking at a domain.

01:15:36.870 --> 01:15:38.710
<v Speaker 1>The next thing in the tutorial

01:15:38.870 --> 01:15:41.190
<v Speaker 1>will allow you and we could have a

01:15:41.190 --> 01:15:42.630
<v Speaker 1>browse of it, decide if we wanna actually

01:15:42.630 --> 01:15:43.830
<v Speaker 1>do it now or not.

01:15:44.310 --> 01:15:45.750
<v Speaker 1>We'll allow you to

01:15:47.590 --> 01:15:49.030
<v Speaker 1>deploy an application,

01:15:49.350 --> 01:15:52.735
<v Speaker 1>define an ingress for it, use set managers

01:15:53.535 --> 01:15:55.135
<v Speaker 1>ingress shim, so you just put at the

01:15:55.135 --> 01:15:56.735
<v Speaker 1>top this needs certificate.

01:15:57.215 --> 01:15:58.975
<v Speaker 1>And then it gets you a TLS certificate

01:15:58.975 --> 01:16:00.255
<v Speaker 1>that just works.

01:16:00.655 --> 01:16:01.215
<v Speaker 1>And

01:16:01.535 --> 01:16:03.935
<v Speaker 1>if you click it getting production certificate,

01:16:04.415 --> 01:16:05.935
<v Speaker 1>it should show you what that looks like.

01:16:08.520 --> 01:16:11.159
<v Speaker 1>So you just simply create production issue instead.

01:16:11.159 --> 01:16:12.519
<v Speaker 1>You would then go down

01:16:13.800 --> 01:16:15.079
<v Speaker 1>a little further,

01:16:16.520 --> 01:16:17.639
<v Speaker 1>a bit more,

01:16:18.760 --> 01:16:21.159
<v Speaker 1>and you end up just getting something that

01:16:21.159 --> 01:16:21.960
<v Speaker 1>works like that.

01:16:22.995 --> 01:16:25.155
<v Speaker 1>Nice. So you're only a couple of steps

01:16:25.155 --> 01:16:27.155
<v Speaker 1>away from that, really. The only things you

01:16:27.155 --> 01:16:28.835
<v Speaker 1>need to do is the IP address that

01:16:28.835 --> 01:16:30.275
<v Speaker 1>we had in the browser that said not

01:16:30.275 --> 01:16:32.195
<v Speaker 1>found. That's the IP that you would associate

01:16:32.195 --> 01:16:33.315
<v Speaker 1>with your domain.

01:16:33.554 --> 01:16:35.955
<v Speaker 1>So it might be rawcode.com

01:16:35.955 --> 01:16:36.915
<v Speaker 1>or

01:16:38.930 --> 01:16:42.050
<v Speaker 1>Alex's example dot raw code dot com. Create

01:16:42.050 --> 01:16:44.210
<v Speaker 1>your c c name or your a record

01:16:44.210 --> 01:16:44.930
<v Speaker 1>for it.

01:16:45.330 --> 01:16:46.610
<v Speaker 1>Deploy the issuer.

01:16:47.250 --> 01:16:48.530
<v Speaker 1>Create an ingress,

01:16:48.770 --> 01:16:52.135
<v Speaker 1>and cert manager will get a TLS certificate,

01:16:52.135 --> 01:16:54.775
<v Speaker 1>terminate that inside your Docker desktop,

01:16:55.495 --> 01:16:58.215
<v Speaker 1>and cert will be stored on your computer.

01:16:58.215 --> 01:16:59.495
<v Speaker 1>So if you shut the lid on your

01:16:59.495 --> 01:17:01.735
<v Speaker 1>laptop and went to Costa's, opened it again

01:17:01.735 --> 01:17:02.775
<v Speaker 1>or Starbucks,

01:17:03.415 --> 01:17:05.890
<v Speaker 1>you wouldn't have to do anything, And it

01:17:05.890 --> 01:17:07.730
<v Speaker 1>would work exactly the same as it is

01:17:07.730 --> 01:17:09.810
<v Speaker 1>now. Just reconnect, and it will it will

01:17:09.810 --> 01:17:10.929
<v Speaker 1>go around with you.

01:17:12.370 --> 01:17:14.849
<v Speaker 0>Ah, that's pretty cool. I do like that.

01:17:15.010 --> 01:17:15.730
<v Speaker 1>The

01:17:16.450 --> 01:17:17.650
<v Speaker 1>things that I like to do with it,

01:17:17.650 --> 01:17:20.690
<v Speaker 1>you see under underneath that real world application

01:17:21.345 --> 01:17:23.025
<v Speaker 1>is these are the commands

01:17:23.185 --> 01:17:24.625
<v Speaker 1>to get OpenFaaS,

01:17:24.625 --> 01:17:25.344
<v Speaker 1>for instance.

01:17:27.665 --> 01:17:29.744
<v Speaker 1>So you don't have to create an issuer.

01:17:29.745 --> 01:17:31.665
<v Speaker 1>You don't have to create an ingress because

01:17:31.665 --> 01:17:33.824
<v Speaker 1>that one command just does everything.

01:17:34.465 --> 01:17:35.825
<v Speaker 1>So empty cluster,

01:17:36.200 --> 01:17:38.199
<v Speaker 1>we do the three commands we did earlier,

01:17:38.440 --> 01:17:40.840
<v Speaker 1>then those two, and suddenly you have OpenFaaS

01:17:40.840 --> 01:17:41.800
<v Speaker 1>with TLS.

01:17:42.680 --> 01:17:44.760
<v Speaker 1>Or as it's quite popular at the moment,

01:17:44.760 --> 01:17:46.680
<v Speaker 1>there's a lot of talk of Docker registries.

01:17:47.080 --> 01:17:48.520
<v Speaker 1>If you look a little bit lower down,

01:17:50.185 --> 01:17:50.985
<v Speaker 1>again,

01:17:50.985 --> 01:17:52.985
<v Speaker 1>two commands and you get a docker registry

01:17:52.985 --> 01:17:56.185
<v Speaker 1>for yourself with auth on it and TLS.

01:17:56.745 --> 01:17:58.265
<v Speaker 0>Very cool. I like that.

01:18:00.920 --> 01:18:02.840
<v Speaker 0>Quite a lot of flexibility,

01:18:02.840 --> 01:18:03.959
<v Speaker 0>quite a lot of power

01:18:04.599 --> 01:18:06.119
<v Speaker 0>mixing all of the all of these tools

01:18:06.119 --> 01:18:07.960
<v Speaker 0>that you're working on together, you know, using

01:18:07.960 --> 01:18:09.719
<v Speaker 0>Arcade and OpenFaaS

01:18:10.040 --> 01:18:12.119
<v Speaker 0>and Endless. This seems to be

01:18:12.975 --> 01:18:15.935
<v Speaker 0>solving a lot of common developer frustrations and

01:18:15.935 --> 01:18:16.655
<v Speaker 0>challenges,

01:18:16.815 --> 01:18:19.375
<v Speaker 0>which I like. Yeah. I mean, I'm reading

01:18:19.375 --> 01:18:20.415
<v Speaker 1>this book

01:18:20.655 --> 01:18:23.054
<v Speaker 1>called Start With Why. Have you read that?

01:18:23.295 --> 01:18:25.935
<v Speaker 0>I have by Simon Sinek. Yeah. By Simon

01:18:25.935 --> 01:18:28.575
<v Speaker 1>Sinek. And whilst

01:18:28.770 --> 01:18:31.170
<v Speaker 1>I haven't got very far into the book,

01:18:31.170 --> 01:18:33.650
<v Speaker 1>just that one premise of starting with why

01:18:33.650 --> 01:18:35.490
<v Speaker 1>got me thinking, and I wrote down. I've

01:18:35.490 --> 01:18:37.330
<v Speaker 1>got my journal in front of me here.

01:18:37.810 --> 01:18:39.090
<v Speaker 1>Why did I create

01:18:39.330 --> 01:18:40.290
<v Speaker 1>each project?

01:18:40.530 --> 01:18:42.375
<v Speaker 1>And is it still something that I want

01:18:42.375 --> 01:18:44.375
<v Speaker 1>to contribute to and work on, or is

01:18:44.375 --> 01:18:45.414
<v Speaker 1>this something that

01:18:46.375 --> 01:18:48.215
<v Speaker 1>is surplus to requirements?

01:18:48.534 --> 01:18:49.334
<v Speaker 1>And, really,

01:18:49.815 --> 01:18:52.215
<v Speaker 1>the the one example there for the registry,

01:18:52.215 --> 01:18:54.534
<v Speaker 1>as I said, I was doing consulting for

01:18:54.534 --> 01:18:56.775
<v Speaker 1>clients writing technical blog posts. Sivo

01:18:57.550 --> 01:19:00.110
<v Speaker 1>wanted to build a bit of technical chops,

01:19:00.110 --> 01:19:01.950
<v Speaker 1>a bit of sort of credibility with k

01:19:01.950 --> 01:19:03.790
<v Speaker 1>three s, and I wrote them a tutorial,

01:19:04.110 --> 01:19:06.430
<v Speaker 1>installing a Docker registry

01:19:06.430 --> 01:19:09.230
<v Speaker 1>with a TLS certificate and authentication.

01:19:09.790 --> 01:19:11.790
<v Speaker 1>And it was literally 5,000

01:19:11.790 --> 01:19:12.190
<v Speaker 1>words.

01:19:14.245 --> 01:19:15.844
<v Speaker 1>And today,

01:19:15.845 --> 01:19:17.525
<v Speaker 1>because Arcade exists,

01:19:18.245 --> 01:19:21.844
<v Speaker 1>it's those two commands plus the command for

01:19:22.005 --> 01:19:23.765
<v Speaker 1>Ingress Engine X and the one that we

01:19:23.765 --> 01:19:25.605
<v Speaker 1>did for cert manager. So four commands.

01:19:27.480 --> 01:19:28.280
<v Speaker 0>Nice.

01:19:29.080 --> 01:19:30.840
<v Speaker 1>And it would be the same for anything

01:19:30.840 --> 01:19:33.960
<v Speaker 1>else. So I don't know. Let's say New

01:19:33.960 --> 01:19:37.080
<v Speaker 1>Relic or Sysdig had an agent that they

01:19:37.080 --> 01:19:38.680
<v Speaker 1>wanted to get a bit more traction for.

01:19:39.745 --> 01:19:41.985
<v Speaker 1>First of all, you generally need to have

01:19:41.985 --> 01:19:44.065
<v Speaker 1>all these base things in place to make

01:19:44.065 --> 01:19:45.665
<v Speaker 1>the cluster usable anyway.

01:19:46.225 --> 01:19:47.985
<v Speaker 1>If you're then gonna go and install, you

01:19:47.985 --> 01:19:49.425
<v Speaker 1>know, like an agent or something at the

01:19:49.425 --> 01:19:51.185
<v Speaker 1>end of that, why not have everything all

01:19:51.185 --> 01:19:52.865
<v Speaker 1>in one place? Super easy.

01:19:53.929 --> 01:19:55.610
<v Speaker 1>And then when it comes to production

01:19:55.770 --> 01:19:57.769
<v Speaker 1>and you're saying, right. I'm gonna

01:19:58.570 --> 01:20:00.729
<v Speaker 1>I'm gonna use GitOps, one thing and another,

01:20:00.889 --> 01:20:02.889
<v Speaker 1>you're probably not gonna sit there running arcade.

01:20:02.889 --> 01:20:03.929
<v Speaker 1>You're probably gonna

01:20:04.170 --> 01:20:06.969
<v Speaker 1>take your time and mirror the repositories,

01:20:06.969 --> 01:20:08.170
<v Speaker 1>mirror the charts,

01:20:08.535 --> 01:20:11.015
<v Speaker 1>set everything up with GitOps, and and, you

01:20:11.015 --> 01:20:12.775
<v Speaker 1>know, spend weeks and weeks on it.

01:20:13.335 --> 01:20:15.415
<v Speaker 1>But this is something that can really accelerate

01:20:15.415 --> 01:20:16.295
<v Speaker 1>adoption.

01:20:16.695 --> 01:20:19.815
<v Speaker 1>The time to actually taste and see what

01:20:19.815 --> 01:20:20.935
<v Speaker 1>something is like

01:20:21.655 --> 01:20:23.895
<v Speaker 1>is so much faster when you have something

01:20:23.895 --> 01:20:24.295
<v Speaker 1>like this.

01:20:25.070 --> 01:20:27.070
<v Speaker 0>Yeah. Definitely. I can see that.

01:20:27.949 --> 01:20:30.030
<v Speaker 0>Now I I realized that we're kind of

01:20:30.030 --> 01:20:31.469
<v Speaker 0>approaching the end of the time we had

01:20:31.469 --> 01:20:33.150
<v Speaker 0>scheduled for this. So, you know, is there

01:20:33.150 --> 01:20:35.150
<v Speaker 0>anything that you wanna show off before we

01:20:35.150 --> 01:20:37.375
<v Speaker 0>we we wrap up for today? I just

01:20:37.375 --> 01:20:40.094
<v Speaker 1>wanted to see what questions people might have

01:20:40.175 --> 01:20:42.014
<v Speaker 1>about what we've looked at so far.

01:20:42.494 --> 01:20:44.735
<v Speaker 0>Yeah. If you're watching and you have any

01:20:44.735 --> 01:20:46.494
<v Speaker 0>questions you'd like us to tackle in the

01:20:46.494 --> 01:20:48.094
<v Speaker 0>next few minutes, please drop them into the

01:20:48.094 --> 01:20:49.775
<v Speaker 0>chat, and we'll do our best to get

01:20:49.775 --> 01:20:50.415
<v Speaker 0>them answered.

01:20:51.559 --> 01:20:53.639
<v Speaker 0>So what else like like,

01:20:54.920 --> 01:20:56.679
<v Speaker 0>Arcade is is open source as well. Right?

01:20:56.679 --> 01:20:57.800
<v Speaker 0>It's on GitHub. Yeah.

01:20:58.440 --> 01:20:59.800
<v Speaker 0>Based on what I see when I installed

01:20:59.800 --> 01:21:02.760
<v Speaker 0>the n NGINX ingress operator there, it's wrapping

01:21:02.760 --> 01:21:05.719
<v Speaker 0>the helm charts and providing sensible defaults. Is

01:21:05.719 --> 01:21:07.684
<v Speaker 0>that how it's working? Yeah. It is.

01:21:08.324 --> 01:21:09.044
<v Speaker 1>So

01:21:09.525 --> 01:21:11.925
<v Speaker 1>but but here's where it gets

01:21:12.565 --> 01:21:15.044
<v Speaker 1>trickier as a as a developer.

01:21:16.005 --> 01:21:17.284
<v Speaker 1>Kubernetes dashboard,

01:21:18.570 --> 01:21:20.330
<v Speaker 1>it's not a helm chart for that. It's

01:21:20.330 --> 01:21:21.449
<v Speaker 1>just a manifest.

01:21:21.850 --> 01:21:24.010
<v Speaker 1>Breaks a lot. The version changes.

01:21:24.330 --> 01:21:26.010
<v Speaker 1>You then have to create a token for

01:21:26.010 --> 01:21:26.890
<v Speaker 1>it and

01:21:27.050 --> 01:21:29.050
<v Speaker 1>run a proxy, and it'll always get it

01:21:29.050 --> 01:21:29.610
<v Speaker 1>wrong.

01:21:30.010 --> 01:21:31.930
<v Speaker 1>So we created an arcade app for it.

01:21:31.930 --> 01:21:34.835
<v Speaker 1>It's now one command, and those gnarly commands

01:21:34.835 --> 01:21:36.675
<v Speaker 1>you can never remember find

01:21:37.155 --> 01:21:38.275
<v Speaker 1>arcade info

01:21:39.235 --> 01:21:40.514
<v Speaker 1>Kubernetes dashboard.

01:21:41.074 --> 01:21:43.395
<v Speaker 1>And that's completely gone away, that problem and

01:21:43.395 --> 01:21:45.155
<v Speaker 1>that that friction.

01:21:45.875 --> 01:21:46.594
<v Speaker 1>For Linkerd,

01:21:47.400 --> 01:21:49.640
<v Speaker 1>there's about six commands that you need to

01:21:49.640 --> 01:21:52.199
<v Speaker 1>run. You download their CLI, then you run

01:21:52.199 --> 01:21:54.920
<v Speaker 1>six commands, then you get Linkerd. We've

01:21:54.920 --> 01:21:57.159
<v Speaker 1>just made it Arcade install Linkerd.

01:21:58.600 --> 01:21:59.080
<v Speaker 0>Yep.

01:21:59.795 --> 01:22:02.355
<v Speaker 1>It downloads the CLI for you. It makes

01:22:02.355 --> 01:22:04.435
<v Speaker 1>sure that it's a suitable version. There are

01:22:04.435 --> 01:22:06.114
<v Speaker 1>a couple of overrides that you can pass

01:22:06.114 --> 01:22:06.755
<v Speaker 1>in.

01:22:07.955 --> 01:22:11.155
<v Speaker 1>And then, yes, rightly so, OpenFaaS is a

01:22:11.155 --> 01:22:11.715
<v Speaker 1>helm chart.

01:22:12.940 --> 01:22:15.900
<v Speaker 1>Mongo is a Helm chart. Istio is currently

01:22:15.900 --> 01:22:18.140
<v Speaker 1>a Helm chart. The Inlets operator is currently

01:22:18.140 --> 01:22:20.300
<v Speaker 1>a Helm chart. But with Arcade,

01:22:20.300 --> 01:22:22.220
<v Speaker 1>the the glow the glorious

01:22:22.220 --> 01:22:23.660
<v Speaker 1>thing is is you can hide all of

01:22:23.660 --> 01:22:23.740
<v Speaker 1>that.

01:22:24.514 --> 01:22:26.994
<v Speaker 1>So whatever is available upstream, the developer doesn't

01:22:26.994 --> 01:22:28.594
<v Speaker 1>have to care about it. Just

01:22:29.315 --> 01:22:30.914
<v Speaker 1>one command and they've got it.

01:22:32.594 --> 01:22:35.155
<v Speaker 0>And can people submit new packages to that

01:22:35.155 --> 01:22:37.554
<v Speaker 0>just by I mean, is it relatively trivial

01:22:37.554 --> 01:22:39.750
<v Speaker 0>but people to get involved and add other

01:22:39.750 --> 01:22:41.110
<v Speaker 0>applications to Arcade?

01:22:41.830 --> 01:22:42.550
<v Speaker 1>Oh,

01:22:42.710 --> 01:22:43.429
<v Speaker 1>Alistair,

01:22:43.590 --> 01:22:45.750
<v Speaker 1>if you're still listening, I know we've got

01:22:45.750 --> 01:22:47.270
<v Speaker 1>a few of the contributors on there. What

01:22:47.270 --> 01:22:48.070
<v Speaker 1>do you think

01:22:49.830 --> 01:22:52.230
<v Speaker 1>you can put a comment into the chat?

01:22:54.215 --> 01:22:56.135
<v Speaker 0>Yeah. We'll just need to get some a

01:22:56.135 --> 01:22:57.655
<v Speaker 0>little bit of time. I think there's roughly

01:22:57.655 --> 01:23:00.534
<v Speaker 0>around lag. Thirty second lag. Whilst

01:23:01.815 --> 01:23:02.855
<v Speaker 1>you're doing that,

01:23:03.335 --> 01:23:06.135
<v Speaker 1>I'm just taking a look. There's 32 contributors

01:23:06.135 --> 01:23:06.855
<v Speaker 1>so far

01:23:07.360 --> 01:23:08.480
<v Speaker 1>to this project.

01:23:09.520 --> 01:23:10.079
<v Speaker 1>So

01:23:10.560 --> 01:23:13.280
<v Speaker 1>that probably goes some way to answering the

01:23:13.280 --> 01:23:13.920
<v Speaker 1>question.

01:23:15.200 --> 01:23:16.640
<v Speaker 1>Yeah. And one of the things that we've

01:23:16.640 --> 01:23:18.159
<v Speaker 1>done more recently is just to

01:23:18.880 --> 01:23:21.200
<v Speaker 1>to make the code, like, a little bit

01:23:21.200 --> 01:23:22.640
<v Speaker 1>more expressive like an API.

01:23:23.495 --> 01:23:25.175
<v Speaker 1>I'm just gonna dig one out and point

01:23:25.175 --> 01:23:27.015
<v Speaker 1>you at it actually. Yeah. Go for it.

01:23:27.015 --> 01:23:27.655
<v Speaker 1>Because

01:23:31.095 --> 01:23:33.095
<v Speaker 1>I guess the OpenFaaS one is a nice

01:23:33.095 --> 01:23:33.655
<v Speaker 1>one.

01:23:34.695 --> 01:23:36.615
<v Speaker 1>That's a bit more for both.

01:23:39.990 --> 01:23:42.550
<v Speaker 1>Yeah. The sealed secrets one. So if you

01:23:42.550 --> 01:23:43.750
<v Speaker 1>have a look at this,

01:23:45.990 --> 01:23:47.510
<v Speaker 1>it's like a fluent API.

01:23:55.665 --> 01:23:57.745
<v Speaker 1>That's how you would install

01:23:57.905 --> 01:23:59.105
<v Speaker 1>sealed secrets.

01:24:01.105 --> 01:24:03.585
<v Speaker 1>And then for overrides that you wanna pass

01:24:03.585 --> 01:24:05.025
<v Speaker 1>in, I don't think this one actually has

01:24:05.025 --> 01:24:06.865
<v Speaker 1>any, but you can use dash dash set

01:24:06.865 --> 01:24:08.625
<v Speaker 1>or we have aliases.

01:24:09.480 --> 01:24:11.160
<v Speaker 1>So it might be like dash dash load

01:24:11.160 --> 01:24:13.960
<v Speaker 1>balancer if you're changing the service type or

01:24:14.760 --> 01:24:16.280
<v Speaker 1>dash dash authentication

01:24:16.280 --> 01:24:17.000
<v Speaker 1>mode.

01:24:17.480 --> 01:24:20.040
<v Speaker 1>Those kinds of things are typically hard to

01:24:20.040 --> 01:24:22.040
<v Speaker 1>discover in the chart, readme file,

01:24:23.425 --> 01:24:25.745
<v Speaker 1>and now bubbled up as flags

01:24:26.305 --> 01:24:27.985
<v Speaker 1>just like you saw when you did Inlets

01:24:27.985 --> 01:24:30.545
<v Speaker 1>operator dash dash help. Yeah. It showed you

01:24:30.545 --> 01:24:32.545
<v Speaker 1>the different providers and the names of them.

01:24:34.065 --> 01:24:34.705
<v Speaker 0>Okay.

01:24:34.865 --> 01:24:36.705
<v Speaker 0>Yeah. That doesn't look too difficult at all

01:24:36.705 --> 01:24:38.625
<v Speaker 0>to try, you know, to to get involved

01:24:38.625 --> 01:24:39.025
<v Speaker 0>and

01:24:39.440 --> 01:24:41.280
<v Speaker 0>and add. And I'm assuming if I just

01:24:41.280 --> 01:24:42.560
<v Speaker 0>click on apps here, I'm gonna get a

01:24:42.560 --> 01:24:43.199
<v Speaker 0>list of

01:24:43.600 --> 01:24:45.280
<v Speaker 0>Yeah. All the apps supported by our There's

01:24:45.280 --> 01:24:46.560
<v Speaker 1>about 40 now.

01:24:47.440 --> 01:24:49.040
<v Speaker 1>And then there's the CLIs.

01:24:50.000 --> 01:24:50.560
<v Speaker 1>So

01:24:50.800 --> 01:24:52.400
<v Speaker 1>if you think about it, when you start

01:24:52.400 --> 01:24:54.960
<v Speaker 1>a tutorial, if you've got no Kubernetes knowledge,

01:24:55.035 --> 01:24:56.715
<v Speaker 1>you've gotta get kubectl,

01:24:56.715 --> 01:24:57.755
<v Speaker 1>get kind,

01:24:58.235 --> 01:25:00.395
<v Speaker 1>maybe get fast CLI. All of those are

01:25:00.395 --> 01:25:01.675
<v Speaker 1>now behind

01:25:02.955 --> 01:25:04.155
<v Speaker 1>arcade get.

01:25:05.755 --> 01:25:08.075
<v Speaker 1>So you get arcade get kubectl.

01:25:08.075 --> 01:25:09.675
<v Speaker 1>You can even pass in a version to

01:25:09.675 --> 01:25:09.835
<v Speaker 1>that.

01:25:10.800 --> 01:25:14.000
<v Speaker 1>And I I think you want quite a

01:25:14.080 --> 01:25:16.480
<v Speaker 1>cutting edge version on yours. But if you

01:25:16.480 --> 01:25:19.040
<v Speaker 1>wanted to test one seventeen

01:25:19.120 --> 01:25:20.880
<v Speaker 1>or you wanted to test the new patch

01:25:20.880 --> 01:25:22.480
<v Speaker 1>of one nineteen, you can just put dash

01:25:22.480 --> 01:25:24.400
<v Speaker 1>dash version, and it will pull down the

01:25:24.400 --> 01:25:25.120
<v Speaker 1>binary for you.

01:25:26.114 --> 01:25:28.994
<v Speaker 1>And compared to updating Broom waiting for it,

01:25:29.074 --> 01:25:30.354
<v Speaker 1>it's super fast.

01:25:31.875 --> 01:25:33.074
<v Speaker 0>Alright. Cool.

01:25:33.635 --> 01:25:34.914
<v Speaker 0>Well, I think that gives people a good

01:25:34.914 --> 01:25:37.474
<v Speaker 0>idea of having involved in ARC it too.

01:25:37.474 --> 01:25:38.034
<v Speaker 0>So

01:25:38.355 --> 01:25:38.514
<v Speaker 0>Yeah.

01:25:39.210 --> 01:25:40.489
<v Speaker 1>So let's just

01:25:40.890 --> 01:25:42.409
<v Speaker 1>open one more thing.

01:25:43.130 --> 01:25:45.290
<v Speaker 1>This is how people can get in touch.

01:25:45.290 --> 01:25:45.929
<v Speaker 1>If they

01:25:46.250 --> 01:25:49.850
<v Speaker 1>go to openfaz.com/blog,

01:25:57.495 --> 01:26:00.215
<v Speaker 1>We have a whole bunch of tutorials, always

01:26:00.215 --> 01:26:02.535
<v Speaker 1>looking for people to write them and contribute.

01:26:02.535 --> 01:26:03.575
<v Speaker 1>This is where you get a lot of

01:26:03.575 --> 01:26:05.094
<v Speaker 1>news, a lot of new features.

01:26:05.175 --> 01:26:06.855
<v Speaker 1>There's a new post that came out today.

01:26:07.540 --> 01:26:09.940
<v Speaker 1>You've also got the store there and the

01:26:09.940 --> 01:26:11.460
<v Speaker 1>new Christmas jumper.

01:26:12.020 --> 01:26:13.460
<v Speaker 1>Just a bit of fun.

01:26:14.180 --> 01:26:16.900
<v Speaker 1>If you're interested in getting anything, it helps

01:26:16.900 --> 01:26:18.660
<v Speaker 1>support the project, and you can wear it

01:26:18.660 --> 01:26:20.740
<v Speaker 1>on Zoom. And then the other link is

01:26:20.740 --> 01:26:22.340
<v Speaker 1>the community

01:26:22.695 --> 01:26:24.215
<v Speaker 1>link in the docs.

01:26:24.534 --> 01:26:25.894
<v Speaker 1>And if you go there,

01:26:26.855 --> 01:26:29.334
<v Speaker 1>you can join our Slack, and that's where

01:26:29.655 --> 01:26:32.695
<v Speaker 1>conversation happens for catch up and arcade, and

01:26:32.935 --> 01:26:34.614
<v Speaker 1>and there's an Inlets channel as well.

01:26:35.820 --> 01:26:37.179
<v Speaker 0>Sweet. Perfect.

01:26:38.060 --> 01:26:38.860
<v Speaker 0>Nice.

01:26:39.900 --> 01:26:41.739
<v Speaker 0>Alright. Well, I don't think we're gonna get

01:26:41.739 --> 01:26:42.699
<v Speaker 0>any comments.

01:26:42.860 --> 01:26:45.739
<v Speaker 0>So I think with that, I'll just say

01:26:46.139 --> 01:26:48.060
<v Speaker 0>thank you very much for joining me today.

01:26:48.060 --> 01:26:49.820
<v Speaker 0>It was really nice and great to take

01:26:49.820 --> 01:26:50.460
<v Speaker 0>a look at

01:26:51.184 --> 01:26:52.704
<v Speaker 0>Well, we looked at a lot, didn't we?

01:26:52.704 --> 01:26:54.625
<v Speaker 0>So we've got FASD and Inlets and then

01:26:54.625 --> 01:26:55.744
<v Speaker 0>we even brought in a little bit of

01:26:55.744 --> 01:26:57.505
<v Speaker 0>Arcade as well. So thank you for your

01:26:57.505 --> 01:26:59.585
<v Speaker 0>time today. Thank you for your continued work

01:26:59.585 --> 01:27:01.744
<v Speaker 0>on these awesome open source projects as well.

01:27:01.744 --> 01:27:03.344
<v Speaker 0>And I hope you have a great day,

01:27:03.344 --> 01:27:04.625
<v Speaker 0>Alex. Thanks.

01:27:05.660 --> 01:27:06.460
<v Speaker 0>Alright.

01:27:06.620 --> 01:27:08.140
<v Speaker 0>Thank you for watching. I'll speak to you

01:27:08.140 --> 01:27:10.060
<v Speaker 0>all soon. Until next time. Bye bye.
