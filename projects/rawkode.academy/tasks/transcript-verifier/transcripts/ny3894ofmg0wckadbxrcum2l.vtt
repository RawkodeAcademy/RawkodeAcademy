WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 9f83ae39-3a1a-4418-afd3-6741e529d29b
Created: 2025-04-29T19:23:47.768Z
Duration: 5327.5464
Channels: 1

00:00:42.815 --> 00:00:45.454
<v Speaker 0>Hello, and welcome to today's episode of Rawkode

00:00:45.454 --> 00:00:47.614
<v Speaker 0>live. I'm your host, Rawkode.

00:00:47.855 --> 00:00:49.295
<v Speaker 0>Today, we're gonna be taking a look at

00:00:49.295 --> 00:00:50.095
<v Speaker 0>CUE,

00:00:50.095 --> 00:00:51.614
<v Speaker 0>a language for

00:00:51.775 --> 00:00:54.095
<v Speaker 0>validating data amongst a whole bunch of other

00:00:54.095 --> 00:00:55.855
<v Speaker 0>things that we're gonna dive into in today's

00:00:55.855 --> 00:00:56.095
<v Speaker 0>session.

00:00:56.750 --> 00:00:58.350
<v Speaker 0>Now before we do that, this is a

00:00:58.350 --> 00:00:59.630
<v Speaker 0>little bit of housekeeping.

00:01:00.030 --> 00:01:02.350
<v Speaker 0>First, if you're not already subscribed to the

00:01:02.350 --> 00:01:04.349
<v Speaker 0>YouTube channel, you know, please feel free to

00:01:04.349 --> 00:01:05.950
<v Speaker 0>do that now. Click the bell and you'll

00:01:05.950 --> 00:01:07.950
<v Speaker 0>get notifications for all future episodes.

00:01:08.670 --> 00:01:11.384
<v Speaker 0>We stream weekly and loads of various cloud

00:01:11.384 --> 00:01:13.704
<v Speaker 0>native and Kubernetes content. So hopefully, we're for

00:01:13.704 --> 00:01:14.505
<v Speaker 0>you.

00:01:14.985 --> 00:01:16.985
<v Speaker 0>If you're not watching live, I would encourage

00:01:16.985 --> 00:01:18.905
<v Speaker 0>you to join our Discord server. There is

00:01:18.905 --> 00:01:21.465
<v Speaker 0>lots of good conversation and chat around cloud

00:01:21.465 --> 00:01:23.784
<v Speaker 0>native and Kubernetes in that channel, and we

00:01:23.784 --> 00:01:25.064
<v Speaker 0>also talk and suggest

00:01:25.470 --> 00:01:27.870
<v Speaker 0>new tools and technologies to cover on this

00:01:27.870 --> 00:01:28.350
<v Speaker 0>show.

00:01:29.150 --> 00:01:31.630
<v Speaker 0>And lastly, I wanna thank Equinix Medal. They

00:01:31.630 --> 00:01:33.870
<v Speaker 0>are my employer, but they very kindly allow

00:01:33.870 --> 00:01:35.710
<v Speaker 0>me the time and resources to invest in

00:01:35.710 --> 00:01:38.190
<v Speaker 0>this show producing cloud native learning materials for

00:01:38.190 --> 00:01:39.070
<v Speaker 0>us all to learn together.

00:01:39.775 --> 00:01:41.774
<v Speaker 0>If you wanna try Equinix Metal, then you

00:01:41.774 --> 00:01:43.295
<v Speaker 0>can use the code, the raw code. This

00:01:43.295 --> 00:01:45.215
<v Speaker 0>will get you $200 of credit.

00:01:45.615 --> 00:01:47.295
<v Speaker 0>You can spend that very quickly on fifty

00:01:47.295 --> 00:01:48.975
<v Speaker 0>hours of compute on a beefy instance or

00:01:48.975 --> 00:01:50.494
<v Speaker 0>get up to four hundred hours of compute

00:01:50.494 --> 00:01:52.335
<v Speaker 0>on something a little bit more modest. Check

00:01:52.335 --> 00:01:53.534
<v Speaker 0>it out. Let me know how you get

00:01:53.534 --> 00:01:53.695
<v Speaker 0>on.

00:01:54.880 --> 00:01:56.880
<v Speaker 0>Now today to dive into CUE, I am

00:01:56.880 --> 00:01:58.960
<v Speaker 0>joined by its creator and maintainer,

00:01:59.040 --> 00:02:01.280
<v Speaker 0>Marcel Van de Hausen from the Google team.

00:02:01.280 --> 00:02:02.799
<v Speaker 0>Hey there. How are you? Thank you for

00:02:02.799 --> 00:02:05.040
<v Speaker 1>having me. Good. I'm doing good. Thank you

00:02:05.040 --> 00:02:05.840
<v Speaker 1>for having me.

00:02:06.479 --> 00:02:08.720
<v Speaker 1>It's always great to be able to, you

00:02:08.505 --> 00:02:10.905
<v Speaker 1>know, demonstrate what I've been working on. So

00:02:10.905 --> 00:02:12.025
<v Speaker 1>appreciate that.

00:02:12.345 --> 00:02:14.585
<v Speaker 0>Yeah. I'm really excited. I'm a a big

00:02:14.585 --> 00:02:16.905
<v Speaker 0>fan and almost advocate of CUE. I feel

00:02:16.905 --> 00:02:18.265
<v Speaker 0>like I'm always telling people to go check

00:02:18.265 --> 00:02:19.545
<v Speaker 0>it out, and I'm really looking forward to

00:02:19.545 --> 00:02:20.905
<v Speaker 0>this, just kind of having a bit of

00:02:20.905 --> 00:02:22.505
<v Speaker 0>fun today and showing people how cool of

00:02:22.505 --> 00:02:23.785
<v Speaker 0>a a technology that is.

00:02:24.879 --> 00:02:26.959
<v Speaker 0>Cool. Before we get started, why don't you

00:02:26.959 --> 00:02:29.200
<v Speaker 0>just take a few minutes to introduce yourself,

00:02:29.920 --> 00:02:31.920
<v Speaker 0>and then we'll we'll start and tell people

00:02:31.920 --> 00:02:33.040
<v Speaker 0>what CUE is.

00:02:33.680 --> 00:02:37.120
<v Speaker 1>Yep. So I'm Marcel van Lowhausen. I'm

00:02:37.680 --> 00:02:39.440
<v Speaker 1>employed at Google. Been working there for a

00:02:39.440 --> 00:02:39.840
<v Speaker 1>long time.

00:02:40.915 --> 00:02:44.035
<v Speaker 1>Was on the founding team of Bork and

00:02:44.834 --> 00:02:46.754
<v Speaker 1>started out in the search engine team. And

00:02:46.754 --> 00:02:47.715
<v Speaker 1>then

00:02:47.715 --> 00:02:49.715
<v Speaker 1>after a few years, ended up on the

00:02:49.715 --> 00:02:51.075
<v Speaker 1>GO team. Went

00:02:51.635 --> 00:02:52.754
<v Speaker 1>hung out there for a while.

00:02:53.530 --> 00:02:55.450
<v Speaker 1>And then a couple years ago, I started

00:02:55.450 --> 00:02:57.530
<v Speaker 1>working on CUE and, you know, to sort

00:02:57.530 --> 00:02:58.490
<v Speaker 1>of realize

00:02:59.209 --> 00:03:01.530
<v Speaker 1>some of the vision that we had earlier,

00:03:01.530 --> 00:03:04.569
<v Speaker 1>really, in the early Borg eras, but but

00:03:04.569 --> 00:03:06.409
<v Speaker 1>never got to, if you will.

00:03:07.395 --> 00:03:09.475
<v Speaker 1>So and that's how I ended up here,

00:03:09.475 --> 00:03:11.475
<v Speaker 1>I guess. Nice. Awesome.

00:03:11.875 --> 00:03:13.955
<v Speaker 0>So I believe you're gonna do

00:03:14.115 --> 00:03:15.715
<v Speaker 0>a little bit of a a presentation just

00:03:15.715 --> 00:03:17.955
<v Speaker 0>to introduce us to CUE. I would encourage

00:03:17.795 --> 00:03:19.635
<v Speaker 0>if you wanna just get your screen ready

00:03:19.635 --> 00:03:20.770
<v Speaker 0>for that, we can move into that. I

00:03:20.770 --> 00:03:22.610
<v Speaker 0>would encourage everyone watching to, you know, get

00:03:22.610 --> 00:03:24.290
<v Speaker 0>your questions and send them over to us.

00:03:24.290 --> 00:03:25.890
<v Speaker 0>We'd happy to answer them as we go.

00:03:25.970 --> 00:03:27.250
<v Speaker 0>And there will be a hands on section

00:03:27.250 --> 00:03:28.850
<v Speaker 0>afterwards as well. Yep.

00:03:32.125 --> 00:03:34.045
<v Speaker 0>You get to play Fender Window. Right?

00:03:34.685 --> 00:03:37.165
<v Speaker 1>Yeah. I think I've I'm there already. Yeah.

00:03:37.165 --> 00:03:39.885
<v Speaker 0>Yes. There we go. Perfect. Thank you. Yeah.

00:03:39.885 --> 00:03:42.605
<v Speaker 1>So I hope alright. Great. Yeah. So I'll

00:03:42.685 --> 00:03:43.405
<v Speaker 1>get right to it.

00:03:44.290 --> 00:03:46.450
<v Speaker 1>So, first of all, what is CUE used

00:03:46.450 --> 00:03:47.010
<v Speaker 1>for?

00:03:48.130 --> 00:03:50.530
<v Speaker 1>So it's really an offspring of GCL.

00:03:50.690 --> 00:03:53.090
<v Speaker 1>So JSONET itself is is an offspring of

00:03:53.090 --> 00:03:54.130
<v Speaker 1>GCL. But,

00:03:55.250 --> 00:03:58.335
<v Speaker 1>rather than focusing on just data configuration,

00:03:58.335 --> 00:04:00.815
<v Speaker 1>it really tries to cover the entire configuration

00:04:00.815 --> 00:04:03.455
<v Speaker 1>space. Right? So things that has been used

00:04:03.455 --> 00:04:06.815
<v Speaker 1>for is is, like, fact discovery, workflow definition,

00:04:06.815 --> 00:04:07.775
<v Speaker 1>configuration,

00:04:07.775 --> 00:04:08.975
<v Speaker 1>data templating,

00:04:09.295 --> 00:04:10.655
<v Speaker 1>even cogeneration,

00:04:10.655 --> 00:04:11.455
<v Speaker 1>policy checking,

00:04:12.080 --> 00:04:14.240
<v Speaker 1>test generation even,

00:04:14.800 --> 00:04:17.760
<v Speaker 1>and Istio uses it for open API generation,

00:04:17.760 --> 00:04:18.560
<v Speaker 1>for example.

00:04:21.200 --> 00:04:23.040
<v Speaker 1>So a little bit of the history behind

00:04:23.040 --> 00:04:23.600
<v Speaker 1>it.

00:04:23.920 --> 00:04:26.400
<v Speaker 1>So, as I mentioned already, I started on

00:04:26.400 --> 00:04:28.145
<v Speaker 1>the you know, I was on part of

00:04:28.145 --> 00:04:29.425
<v Speaker 1>the initial Borg team.

00:04:30.065 --> 00:04:31.745
<v Speaker 1>And one of the reasons I ended up

00:04:31.745 --> 00:04:34.065
<v Speaker 1>there is, because I worked in this little

00:04:34.065 --> 00:04:35.745
<v Speaker 1>project before Borg,

00:04:35.745 --> 00:04:37.664
<v Speaker 1>which was sort of like Borg, a little

00:04:37.664 --> 00:04:38.305
<v Speaker 1>project,

00:04:38.544 --> 00:04:40.944
<v Speaker 1>little system that I created was like like

00:04:40.944 --> 00:04:41.425
<v Speaker 1>Borg.

00:04:43.510 --> 00:04:44.150
<v Speaker 1>And

00:04:44.710 --> 00:04:46.870
<v Speaker 1>so already, that system had a lot of

00:04:46.870 --> 00:04:48.230
<v Speaker 1>knowledge in it from how do you deal

00:04:48.230 --> 00:04:51.350
<v Speaker 1>with configuration. So some of it was, experience

00:04:51.350 --> 00:04:54.230
<v Speaker 1>from before that that Google had on, like,

00:04:54.230 --> 00:04:55.750
<v Speaker 1>how do you you know, what should you

00:04:55.750 --> 00:04:56.870
<v Speaker 1>not do, especially.

00:04:57.485 --> 00:04:59.965
<v Speaker 1>But also from my previous employer,

00:05:00.525 --> 00:05:02.445
<v Speaker 1>you know, we worked there with configurations. There

00:05:02.445 --> 00:05:04.045
<v Speaker 1>were hundred thousands of lines.

00:05:04.685 --> 00:05:06.525
<v Speaker 1>Managed and distributed teams,

00:05:06.764 --> 00:05:09.325
<v Speaker 1>you know, purely declarative and was fine. Right?

00:05:09.325 --> 00:05:11.770
<v Speaker 1>So that was a good example of of

00:05:11.770 --> 00:05:12.410
<v Speaker 1>how,

00:05:13.210 --> 00:05:15.690
<v Speaker 1>you could do declarative configuration and how powerful

00:05:15.690 --> 00:05:18.410
<v Speaker 1>it is. Right? And this was basically the,

00:05:18.810 --> 00:05:20.810
<v Speaker 1>idea we wanted to put into

00:05:21.130 --> 00:05:22.010
<v Speaker 1>into,

00:05:22.729 --> 00:05:26.105
<v Speaker 1>Bork as well. So this is what, GCL,

00:05:26.265 --> 00:05:27.305
<v Speaker 1>was originally.

00:05:28.425 --> 00:05:31.465
<v Speaker 1>However, we made some errors with GCL,

00:05:31.545 --> 00:05:34.345
<v Speaker 1>which made it, sort of not possible to

00:05:34.345 --> 00:05:35.785
<v Speaker 1>realize that original,

00:05:36.425 --> 00:05:37.945
<v Speaker 1>goal anymore.

00:05:37.945 --> 00:05:38.265
<v Speaker 1>Right?

00:05:39.680 --> 00:05:41.360
<v Speaker 1>So this is one of the things that's

00:05:41.440 --> 00:05:43.520
<v Speaker 1>that prompted CUE, right, to to do to

00:05:43.520 --> 00:05:45.200
<v Speaker 1>do it again right, right, to really get

00:05:45.200 --> 00:05:47.040
<v Speaker 1>these promises from from,

00:05:47.520 --> 00:05:49.600
<v Speaker 1>declarative configuration management.

00:05:50.000 --> 00:05:51.600
<v Speaker 1>So, also, a lot of things changed

00:05:52.055 --> 00:05:54.455
<v Speaker 1>in in this time. Right? So the Kubernetes

00:05:54.455 --> 00:05:56.375
<v Speaker 1>team, which is sort of an offspring from

00:05:56.455 --> 00:05:57.255
<v Speaker 1>of Bork,

00:05:58.375 --> 00:06:00.775
<v Speaker 1>they did their own research in configuration,

00:06:00.775 --> 00:06:01.414
<v Speaker 1>and they

00:06:01.655 --> 00:06:03.254
<v Speaker 1>drew their own conclusions.

00:06:03.919 --> 00:06:04.800
<v Speaker 1>Somewhat

00:06:04.800 --> 00:06:05.520
<v Speaker 1>different,

00:06:05.840 --> 00:06:08.000
<v Speaker 1>but, you know, very valuable lessons to be

00:06:08.000 --> 00:06:08.560
<v Speaker 1>learned.

00:06:09.520 --> 00:06:11.600
<v Speaker 1>And I tried to also incorporate that in

00:06:11.600 --> 00:06:13.520
<v Speaker 1>in the in the design of CUE.

00:06:13.600 --> 00:06:14.240
<v Speaker 1>Right?

00:06:14.720 --> 00:06:17.040
<v Speaker 1>And then, of course, also my Go experience,

00:06:17.775 --> 00:06:19.215
<v Speaker 1>you know, how do you deal with with

00:06:19.215 --> 00:06:22.095
<v Speaker 1>programming languages and languages in general, had a

00:06:22.095 --> 00:06:24.015
<v Speaker 1>big influence on how it end up looking

00:06:24.015 --> 00:06:26.815
<v Speaker 1>now. Definitely looks very different now than if

00:06:26.815 --> 00:06:28.255
<v Speaker 1>I'd written it fifteen years ago.

00:06:30.570 --> 00:06:32.570
<v Speaker 1>So some of the key takeaways from all

00:06:32.570 --> 00:06:34.410
<v Speaker 1>this knowledge that went into it, I think

00:06:34.410 --> 00:06:36.330
<v Speaker 1>the by far, the biggest one is, like,

00:06:36.330 --> 00:06:39.050
<v Speaker 1>never ever use overrides. Right? Just just don't

00:06:39.050 --> 00:06:39.690
<v Speaker 1>do it.

00:06:40.330 --> 00:06:42.010
<v Speaker 1>To qualify a little bit better, like, you

00:06:42.010 --> 00:06:43.770
<v Speaker 1>can have one level of overrides.

00:06:44.655 --> 00:06:47.375
<v Speaker 1>This was already the conclusion we had before

00:06:47.375 --> 00:06:49.215
<v Speaker 1>this this very early system.

00:06:50.575 --> 00:06:52.415
<v Speaker 1>But more than one layer, it just gets

00:06:52.415 --> 00:06:54.415
<v Speaker 1>too complicated. Right? And it doesn't matter if

00:06:54.415 --> 00:06:56.840
<v Speaker 1>you have file overlays or inheritance. Just don't

00:06:56.840 --> 00:06:57.480
<v Speaker 1>do it.

00:06:57.960 --> 00:06:59.800
<v Speaker 1>The other thing is you really wanna separate

00:06:59.800 --> 00:07:01.480
<v Speaker 1>code from configuration.

00:07:01.480 --> 00:07:02.920
<v Speaker 1>So this is another thing that went sour

00:07:02.920 --> 00:07:03.960
<v Speaker 1>in GCL.

00:07:05.160 --> 00:07:07.240
<v Speaker 1>So there you see that that there is

00:07:07.240 --> 00:07:09.080
<v Speaker 1>actually a lot of com computation

00:07:09.080 --> 00:07:11.000
<v Speaker 1>in in GCL in the end.

00:07:12.775 --> 00:07:15.015
<v Speaker 1>So the problem is here that we thought,

00:07:15.015 --> 00:07:16.535
<v Speaker 1>you know, you could always separate it by

00:07:16.535 --> 00:07:18.775
<v Speaker 1>pushing the computation into the binaries, but then

00:07:18.775 --> 00:07:21.655
<v Speaker 1>that's kind of a, you know, too idealistic

00:07:21.655 --> 00:07:23.495
<v Speaker 1>view. And in practice, that doesn't really work.

00:07:24.400 --> 00:07:26.080
<v Speaker 1>So you have to deal with this reality

00:07:26.080 --> 00:07:27.520
<v Speaker 1>that on the one hand, you do wanna

00:07:27.520 --> 00:07:30.800
<v Speaker 1>have com computation at the configuration layer, but

00:07:30.800 --> 00:07:33.040
<v Speaker 1>you still really wanna separate the two.

00:07:33.440 --> 00:07:36.240
<v Speaker 1>Something that came in later, more from from

00:07:36.240 --> 00:07:38.880
<v Speaker 1>Brian Grant and

00:07:38.155 --> 00:07:40.875
<v Speaker 1>folks from the Kubernetes land is the the

00:07:41.035 --> 00:07:43.035
<v Speaker 1>whole idea that parameterization

00:07:43.035 --> 00:07:43.915
<v Speaker 1>is is,

00:07:44.395 --> 00:07:46.315
<v Speaker 1>even though abstractions can be good,

00:07:47.195 --> 00:07:48.555
<v Speaker 1>generally, parameterization

00:07:48.555 --> 00:07:49.835
<v Speaker 1>and configuration is bad.

00:07:50.810 --> 00:07:52.810
<v Speaker 1>So CUE has a so I agree with

00:07:52.810 --> 00:07:55.450
<v Speaker 1>that, but CUE takes a different approach in

00:07:55.450 --> 00:07:57.130
<v Speaker 1>solving that problem.

00:07:58.810 --> 00:08:00.330
<v Speaker 1>So one other

00:08:00.730 --> 00:08:02.330
<v Speaker 1>thing to mention here is that if you

00:08:02.330 --> 00:08:04.490
<v Speaker 1>look at configuration, how it develops within a

00:08:04.490 --> 00:08:06.570
<v Speaker 1>a company

00:08:05.835 --> 00:08:06.875
<v Speaker 1>is that,

00:08:07.755 --> 00:08:09.115
<v Speaker 1>well, first of all, the best thing is

00:08:09.115 --> 00:08:11.355
<v Speaker 1>to have no configuration whatsoever. Right? Like, in

00:08:11.355 --> 00:08:12.635
<v Speaker 1>the ideal scenario,

00:08:13.115 --> 00:08:15.515
<v Speaker 1>you know, you have maybe one parameter to

00:08:15.515 --> 00:08:17.115
<v Speaker 1>tweak, and that's it. Right? Like, you you

00:08:17.115 --> 00:08:18.315
<v Speaker 1>you you don't tweak anything.

00:08:19.060 --> 00:08:21.699
<v Speaker 1>So in practice, what happens is that, you

00:08:21.699 --> 00:08:23.699
<v Speaker 1>know, systems develop, you know, more and more

00:08:23.699 --> 00:08:25.380
<v Speaker 1>things that you can configure.

00:08:26.100 --> 00:08:27.860
<v Speaker 1>So at some point, people start pulling it

00:08:27.860 --> 00:08:28.900
<v Speaker 1>out of the system,

00:08:29.780 --> 00:08:32.339
<v Speaker 1>you know, then then and into individual configuration

00:08:32.339 --> 00:08:34.755
<v Speaker 1>value. So that gets hard to manage, so

00:08:34.755 --> 00:08:36.995
<v Speaker 1>people start to develop systems around it.

00:08:37.794 --> 00:08:38.755
<v Speaker 1>Ultimately,

00:08:39.155 --> 00:08:41.554
<v Speaker 1>that's it's still too inflexible, so people end

00:08:41.554 --> 00:08:43.235
<v Speaker 1>up with DSLs.

00:08:43.635 --> 00:08:45.475
<v Speaker 1>And then these DSLs end up being so

00:08:45.475 --> 00:08:47.635
<v Speaker 1>complicated that people think, like, well, if it's

00:08:47.100 --> 00:08:48.940
<v Speaker 1>it's so complicated anyway, why don't we put

00:08:48.940 --> 00:08:49.820
<v Speaker 1>it in code?

00:08:50.060 --> 00:08:51.420
<v Speaker 1>And you get back to the top. Right?

00:08:51.420 --> 00:08:53.820
<v Speaker 1>And the whole cycle repeats itself again.

00:08:54.300 --> 00:08:54.940
<v Speaker 1>So

00:08:56.220 --> 00:08:57.980
<v Speaker 1>if you look at what's,

00:08:58.699 --> 00:09:00.665
<v Speaker 1>you know, this is a a a phrase

00:09:00.665 --> 00:09:02.185
<v Speaker 1>taken from cloudgoogle.com

00:09:02.185 --> 00:09:03.144
<v Speaker 1>describing,

00:09:03.464 --> 00:09:05.064
<v Speaker 1>the whole notion of,

00:09:06.665 --> 00:09:07.944
<v Speaker 1>you know, like like,

00:09:08.745 --> 00:09:10.185
<v Speaker 1>configuration as data,

00:09:11.464 --> 00:09:15.080
<v Speaker 1>or infrastructure as data, rather, is that, you

00:09:15.080 --> 00:09:17.480
<v Speaker 1>do want to be able to, record everything

00:09:17.480 --> 00:09:20.120
<v Speaker 1>in a single version control. So it's kind

00:09:20.120 --> 00:09:22.520
<v Speaker 1>of nice if your configuration is text. Doing

00:09:22.520 --> 00:09:23.720
<v Speaker 1>it declaratively

00:09:24.040 --> 00:09:25.480
<v Speaker 1>has a lot of benefits,

00:09:25.640 --> 00:09:27.845
<v Speaker 1>especially because it makes the contracts between all

00:09:27.845 --> 00:09:29.925
<v Speaker 1>the boundaries of your system very clear.

00:09:30.485 --> 00:09:32.965
<v Speaker 1>So if you think about this clock and,

00:09:32.965 --> 00:09:36.005
<v Speaker 1>like, considering all these options, like like, having

00:09:36.005 --> 00:09:37.365
<v Speaker 1>something text based

00:09:37.525 --> 00:09:40.485
<v Speaker 1>and declarative is is still the best option

00:09:40.485 --> 00:09:41.525
<v Speaker 1>if you can do it well.

00:09:42.339 --> 00:09:42.980
<v Speaker 1>Right?

00:09:43.700 --> 00:09:46.339
<v Speaker 1>So the problem is, how do we avoid

00:09:46.339 --> 00:09:46.899
<v Speaker 1>this,

00:09:47.620 --> 00:09:49.700
<v Speaker 1>complexity? Right? And this is one of the

00:09:49.700 --> 00:09:52.339
<v Speaker 1>main aims of CUE to make this, simple,

00:09:52.339 --> 00:09:53.779
<v Speaker 1>right, and and do not get into the

00:09:53.779 --> 00:09:56.615
<v Speaker 1>same trap as many other configuration languages where

00:09:56.615 --> 00:09:58.615
<v Speaker 1>there's too much computation, too much,

00:09:59.095 --> 00:10:00.535
<v Speaker 1>complexity in general.

00:10:01.654 --> 00:10:02.295
<v Speaker 1>So,

00:10:03.815 --> 00:10:06.135
<v Speaker 1>so let us take a big step back.

00:10:06.135 --> 00:10:07.735
<v Speaker 1>Right? Like, what is configuration?

00:10:07.735 --> 00:10:11.460
<v Speaker 1>So you have templates, data, validation rules, policy.

00:10:11.860 --> 00:10:13.700
<v Speaker 1>Right? And and, really, if you think about

00:10:13.700 --> 00:10:15.300
<v Speaker 1>it, all of this is spread,

00:10:16.260 --> 00:10:18.500
<v Speaker 1>across many different components. Right? So you can

00:10:18.500 --> 00:10:21.460
<v Speaker 1>have a person or or team that provides

00:10:21.460 --> 00:10:22.100
<v Speaker 1>a system.

00:10:22.605 --> 00:10:25.005
<v Speaker 1>Right, the system itself is configured, but then

00:10:25.005 --> 00:10:25.644
<v Speaker 1>also,

00:10:26.845 --> 00:10:29.964
<v Speaker 1>users of that system can provide additional configuration,

00:10:29.964 --> 00:10:32.445
<v Speaker 1>right, which then has to be combined in

00:10:32.445 --> 00:10:33.325
<v Speaker 1>a certain way.

00:10:34.125 --> 00:10:36.365
<v Speaker 1>Then also, this can come from multiple customers.

00:10:36.365 --> 00:10:38.830
<v Speaker 1>That system itself might use another system, all

00:10:38.830 --> 00:10:41.630
<v Speaker 1>of which have config configuration that's somehow related

00:10:41.630 --> 00:10:42.430
<v Speaker 1>to each other.

00:10:42.990 --> 00:10:45.790
<v Speaker 1>Right? And if you try to combine this,

00:10:46.350 --> 00:10:48.190
<v Speaker 1>it ends up being not that simple. Right?

00:10:48.190 --> 00:10:49.550
<v Speaker 1>So, really, it looks a little bit like

00:10:49.550 --> 00:10:51.915
<v Speaker 1>this. Okay. So you have some some data

00:10:51.915 --> 00:10:53.515
<v Speaker 1>that needs to be filled out in templates,

00:10:53.515 --> 00:10:55.115
<v Speaker 1>and then you have validation rules, but these

00:10:55.115 --> 00:10:57.995
<v Speaker 1>validation rules only work on concrete data.

00:10:58.315 --> 00:10:59.435
<v Speaker 1>So you have to make sure that all

00:10:59.435 --> 00:11:01.035
<v Speaker 1>the templates are filled out in the right

00:11:01.035 --> 00:11:02.875
<v Speaker 1>order, and this can be across systems.

00:11:04.180 --> 00:11:06.420
<v Speaker 1>And it just gets this really big mess.

00:11:06.420 --> 00:11:07.700
<v Speaker 1>Right? Very

00:11:08.100 --> 00:11:08.899
<v Speaker 1>complicated.

00:11:11.699 --> 00:11:12.260
<v Speaker 1>So

00:11:12.899 --> 00:11:14.899
<v Speaker 1>and this happens at all different levels. Right?

00:11:14.899 --> 00:11:17.699
<v Speaker 1>So combining data. So what happens if you

00:11:17.045 --> 00:11:17.845
<v Speaker 1>conflicting,

00:11:18.165 --> 00:11:20.485
<v Speaker 1>values? Right? Like, how do you override it?

00:11:20.485 --> 00:11:21.605
<v Speaker 1>Like, what's the order?

00:11:22.165 --> 00:11:24.245
<v Speaker 1>Same thing with rules and data or, like,

00:11:24.245 --> 00:11:26.485
<v Speaker 1>what comes first? What data do we need

00:11:26.485 --> 00:11:28.805
<v Speaker 1>to evaluate first before we can even apply

00:11:28.805 --> 00:11:29.205
<v Speaker 1>the rules?

00:11:30.290 --> 00:11:31.730
<v Speaker 1>What if you can't get the data at

00:11:31.730 --> 00:11:33.089
<v Speaker 1>all? Right? Like, how do you deal with

00:11:33.089 --> 00:11:34.690
<v Speaker 1>with incomplete data?

00:11:35.330 --> 00:11:38.450
<v Speaker 1>You have different sources, JSON schema, open API,

00:11:38.450 --> 00:11:40.370
<v Speaker 1>like, all this stuff. Right? And

00:11:40.850 --> 00:11:42.290
<v Speaker 1>then to make matters worse,

00:11:42.584 --> 00:11:44.985
<v Speaker 1>so configuration tends to be a cross cutting

00:11:44.985 --> 00:11:45.625
<v Speaker 1>thing,

00:11:45.865 --> 00:11:48.504
<v Speaker 1>right, where you really don't have a specific

00:11:48.504 --> 00:11:50.504
<v Speaker 1>order in which things get combined. Right? It

00:11:50.504 --> 00:11:52.584
<v Speaker 1>really comes in from every different angle, and

00:11:52.584 --> 00:11:53.865
<v Speaker 1>there's very little,

00:11:54.904 --> 00:11:57.380
<v Speaker 1>control you have over this. And in order

00:11:57.380 --> 00:11:59.780
<v Speaker 1>to manage that, then people tend to, like,

00:11:59.780 --> 00:12:02.180
<v Speaker 1>dumb down their systems or or sort of

00:12:02.180 --> 00:12:04.180
<v Speaker 1>restrict the configuration in a way that that

00:12:04.180 --> 00:12:06.340
<v Speaker 1>reduces the functionality of the system.

00:12:07.300 --> 00:12:08.020
<v Speaker 1>So

00:12:08.514 --> 00:12:11.235
<v Speaker 1>how does CUE address this? Right? So the

00:12:11.235 --> 00:12:13.875
<v Speaker 1>idea with CUE is that, okay. Well, let's

00:12:13.875 --> 00:12:15.635
<v Speaker 1>get a grip on configuration

00:12:16.274 --> 00:12:16.995
<v Speaker 1>and,

00:12:17.315 --> 00:12:19.714
<v Speaker 1>you know, create some way of dealing with

00:12:19.714 --> 00:12:22.115
<v Speaker 1>configuration that you actually can throw it all

00:12:22.115 --> 00:12:24.750
<v Speaker 1>together on one big heap. So, you know,

00:12:24.750 --> 00:12:26.190
<v Speaker 1>you don't have to worry about the order

00:12:26.190 --> 00:12:28.029
<v Speaker 1>of application anymore. You just dump it in

00:12:28.029 --> 00:12:30.589
<v Speaker 1>all one big bag, and CUE figures out,

00:12:31.149 --> 00:12:33.230
<v Speaker 1>how to combine it and how to do

00:12:33.230 --> 00:12:35.790
<v Speaker 1>all the validation and and data production.

00:12:37.495 --> 00:12:39.894
<v Speaker 1>So how does CUE do this? So there's

00:12:39.894 --> 00:12:41.415
<v Speaker 1>a few things that change. So to the

00:12:41.415 --> 00:12:42.055
<v Speaker 1>user,

00:12:42.375 --> 00:12:44.855
<v Speaker 1>now everything has to be done declaratively.

00:12:45.254 --> 00:12:47.415
<v Speaker 1>Right? Like, a big part of CUE is

00:12:47.415 --> 00:12:48.454
<v Speaker 1>that it unifies

00:12:50.440 --> 00:12:52.920
<v Speaker 1>rules and data, and, like, all of this

00:12:52.920 --> 00:12:54.920
<v Speaker 1>is the same thing. Right? So to CUE,

00:12:55.160 --> 00:12:57.880
<v Speaker 1>all these different aspects of of configuration are

00:12:57.880 --> 00:12:59.800
<v Speaker 1>unified into a single space,

00:13:00.519 --> 00:13:02.440
<v Speaker 1>if you will. So I'll let that sink

00:13:02.440 --> 00:13:04.199
<v Speaker 1>in for a moment. Right? And and I'll

00:13:04.199 --> 00:13:06.105
<v Speaker 1>I'll come back later to what does that

00:13:06.105 --> 00:13:06.985
<v Speaker 1>exactly mean.

00:13:07.545 --> 00:13:08.825
<v Speaker 1>But this is basically,

00:13:09.545 --> 00:13:10.825
<v Speaker 1>what CUE does.

00:13:11.225 --> 00:13:12.825
<v Speaker 1>And to the user, what it means is

00:13:12.825 --> 00:13:14.905
<v Speaker 1>that CUE puts some restrictions

00:13:14.905 --> 00:13:16.585
<v Speaker 1>on what you can do with overrides. Right?

00:13:16.585 --> 00:13:18.980
<v Speaker 1>So you have basically default values, which you

00:13:18.980 --> 00:13:20.660
<v Speaker 1>can see as an override. So that's one

00:13:20.660 --> 00:13:22.579
<v Speaker 1>level. But after that, you're done. Right? Like,

00:13:22.579 --> 00:13:25.139
<v Speaker 1>once you set something to a specific value,

00:13:25.139 --> 00:13:27.779
<v Speaker 1>you can never override it. So Dareit limits

00:13:27.779 --> 00:13:30.500
<v Speaker 1>you, right, like, more, more than other systems.

00:13:31.214 --> 00:13:32.735
<v Speaker 1>On the other hand, it gives you a

00:13:32.735 --> 00:13:35.295
<v Speaker 1>lot more flexibility and composition. Right? So where

00:13:35.295 --> 00:13:36.014
<v Speaker 1>you wanna

00:13:36.255 --> 00:13:38.654
<v Speaker 1>combine things from different angles, you now can,

00:13:38.654 --> 00:13:40.894
<v Speaker 1>whereas whereas previously, you had to specify a

00:13:40.894 --> 00:13:41.855
<v Speaker 1>certain order.

00:13:42.014 --> 00:13:43.615
<v Speaker 1>So this is to the user how things

00:13:43.615 --> 00:13:43.935
<v Speaker 1>change.

00:13:45.860 --> 00:13:47.940
<v Speaker 1>So for what the CUE, the way it

00:13:47.940 --> 00:13:50.500
<v Speaker 1>handles this is basically defining a very

00:13:51.380 --> 00:13:52.180
<v Speaker 1>rigorous

00:13:52.180 --> 00:13:54.900
<v Speaker 1>model on what configuration is and then having

00:13:54.900 --> 00:13:57.460
<v Speaker 1>a logic reasoning engine underneath it,

00:13:58.525 --> 00:14:00.605
<v Speaker 1>you know, to to deal with it. And

00:14:00.605 --> 00:14:02.845
<v Speaker 1>it sounds very complex. Right? But a good

00:14:02.845 --> 00:14:04.925
<v Speaker 1>analogy about this and it is. It is

00:14:04.925 --> 00:14:06.125
<v Speaker 1>actually very complex.

00:14:06.845 --> 00:14:09.085
<v Speaker 1>But the idea is that this complexity is

00:14:09.085 --> 00:14:11.805
<v Speaker 1>a complexity for the implementer, for the purse

00:14:11.965 --> 00:14:13.245
<v Speaker 1>the people that write CUE,

00:14:14.290 --> 00:14:16.050
<v Speaker 1>but it serves to make the life of

00:14:16.050 --> 00:14:17.810
<v Speaker 1>the users easier. Right? It's very much like

00:14:17.810 --> 00:14:20.210
<v Speaker 1>a garbage collector. Garbage collector is very complex

00:14:20.210 --> 00:14:22.210
<v Speaker 1>to implement or can be if you do

00:14:22.210 --> 00:14:22.930
<v Speaker 1>it right.

00:14:24.450 --> 00:14:26.290
<v Speaker 1>But the whole purpose of it is to

00:14:26.290 --> 00:14:28.530
<v Speaker 1>make memory management much easier for the user.

00:14:28.530 --> 00:14:30.014
<v Speaker 1>Right? So this is a little bit how

00:14:30.014 --> 00:14:31.375
<v Speaker 1>you should think of this.

00:14:36.175 --> 00:14:38.415
<v Speaker 1>Next slides. There we go.

00:14:39.774 --> 00:14:42.175
<v Speaker 1>So another way to think of CUE is,

00:14:42.975 --> 00:14:44.680
<v Speaker 1>so if you have a spreadsheet, right, like

00:14:44.680 --> 00:14:45.960
<v Speaker 1>you have all these cells where you can

00:14:45.960 --> 00:14:47.800
<v Speaker 1>put in formulas and you can refer to

00:14:47.800 --> 00:14:48.680
<v Speaker 1>other cells,

00:14:49.240 --> 00:14:51.160
<v Speaker 1>so CUE is really like a,

00:14:51.640 --> 00:14:54.200
<v Speaker 1>a spreadsheet for JSON. Right? Rather than having

00:14:54.200 --> 00:14:55.800
<v Speaker 1>a matrix, you have your JSON tree,

00:14:56.535 --> 00:14:59.654
<v Speaker 1>and you take base basically individual notes

00:14:59.894 --> 00:15:02.214
<v Speaker 1>and express these in terms of other notes.

00:15:02.214 --> 00:15:04.615
<v Speaker 1>Right? And then there's this logical reasoning engine

00:15:04.615 --> 00:15:07.014
<v Speaker 1>that that helps you execute that. Right? So

00:15:07.014 --> 00:15:09.815
<v Speaker 1>that's really another way, to see what it

00:15:09.815 --> 00:15:10.295
<v Speaker 1>is.

00:15:10.695 --> 00:15:11.255
<v Speaker 1>So

00:15:11.790 --> 00:15:13.390
<v Speaker 1>CUE is not just a language. It's a

00:15:13.390 --> 00:15:14.510
<v Speaker 1>whole ecosystem.

00:15:14.510 --> 00:15:16.269
<v Speaker 1>So there's the CUE command. There's all kinds

00:15:16.269 --> 00:15:19.070
<v Speaker 1>of, higher level libraries that allows you to

00:15:19.070 --> 00:15:19.870
<v Speaker 1>specify

00:15:20.430 --> 00:15:21.390
<v Speaker 1>workflows.

00:15:22.350 --> 00:15:24.910
<v Speaker 1>There there's all kinds of adapters to translate

00:15:24.910 --> 00:15:27.070
<v Speaker 1>back and forth to different, formats,

00:15:27.605 --> 00:15:29.445
<v Speaker 1>API generators,

00:15:30.645 --> 00:15:32.805
<v Speaker 1>policy engines you can build on top of

00:15:32.805 --> 00:15:35.045
<v Speaker 1>this. Right? So there's all kinds of tools

00:15:35.045 --> 00:15:37.845
<v Speaker 1>for injection and how you combine different piece

00:15:37.845 --> 00:15:39.045
<v Speaker 1>of data, different levels.

00:15:40.180 --> 00:15:43.060
<v Speaker 1>There's refactoring tools, formatting. So CUE is very

00:15:43.060 --> 00:15:45.540
<v Speaker 1>much designed for automated generation also. So the

00:15:45.540 --> 00:15:49.139
<v Speaker 1>the language is, designed for machine generation and

00:15:49.139 --> 00:15:49.699
<v Speaker 1>readability.

00:15:52.475 --> 00:15:54.394
<v Speaker 1>So that's how CUE looks like. And when

00:15:54.394 --> 00:15:55.035
<v Speaker 1>when

00:15:55.355 --> 00:15:57.035
<v Speaker 1>you think of it as a language, right,

00:15:57.035 --> 00:15:59.115
<v Speaker 1>like coming back to the DSL side of

00:15:59.115 --> 00:16:00.235
<v Speaker 1>things, when you think of it as a

00:16:00.235 --> 00:16:00.875
<v Speaker 1>language

00:16:01.355 --> 00:16:01.995
<v Speaker 1>so

00:16:02.714 --> 00:16:05.515
<v Speaker 1>what requirements do you have as a configuration

00:16:05.515 --> 00:16:07.690
<v Speaker 1>language? Right? So people,

00:16:08.410 --> 00:16:10.090
<v Speaker 1>might be aware of the difference between a

00:16:10.090 --> 00:16:12.250
<v Speaker 1>scripting and a programming language. So a programming

00:16:12.250 --> 00:16:12.890
<v Speaker 1>language,

00:16:13.529 --> 00:16:15.850
<v Speaker 1>is much more focused on readability, can be

00:16:15.850 --> 00:16:18.490
<v Speaker 1>a little bit more tedious to to, to

00:16:18.490 --> 00:16:20.170
<v Speaker 1>write. Right? But really, the point is that

00:16:20.170 --> 00:16:20.890
<v Speaker 1>it's correct

00:16:21.444 --> 00:16:23.764
<v Speaker 1>and that people can read and understand what

00:16:23.764 --> 00:16:25.685
<v Speaker 1>it what it does. Right? Because,

00:16:26.404 --> 00:16:29.845
<v Speaker 1>a programming language is maintained by multiple people.

00:16:29.845 --> 00:16:31.764
<v Speaker 1>Right? Like, sometimes it has to be,

00:16:32.245 --> 00:16:34.410
<v Speaker 1>read again over a long period of time.

00:16:34.410 --> 00:16:36.730
<v Speaker 1>Even the original author might have forget exactly

00:16:36.730 --> 00:16:37.610
<v Speaker 1>what it does.

00:16:38.410 --> 00:16:40.730
<v Speaker 1>So the same thing holds even more for

00:16:40.730 --> 00:16:42.250
<v Speaker 1>configuration languages,

00:16:42.570 --> 00:16:44.170
<v Speaker 1>because now it's not only,

00:16:44.890 --> 00:16:46.730
<v Speaker 1>you know, often it's written by the original

00:16:46.730 --> 00:16:47.130
<v Speaker 1>team

00:16:47.545 --> 00:16:49.945
<v Speaker 1>that maintains a piece of software, but very

00:16:49.945 --> 00:16:52.745
<v Speaker 1>often, it is then maintained or changed by

00:16:52.745 --> 00:16:54.425
<v Speaker 1>somebody outside of that team.

00:16:54.825 --> 00:16:57.385
<v Speaker 1>Right? And the type of people that that

00:16:57.385 --> 00:16:59.145
<v Speaker 1>work on that might not be the peep

00:16:59.305 --> 00:17:00.905
<v Speaker 1>you know, might not be the same kind

00:17:00.905 --> 00:17:02.825
<v Speaker 1>of group that is familiar with the original

00:17:02.825 --> 00:17:03.465
<v Speaker 1>language

00:17:04.079 --> 00:17:06.319
<v Speaker 1>that that product was was written in. Right?

00:17:06.319 --> 00:17:08.720
<v Speaker 1>So so think of an SRE team. Right?

00:17:08.720 --> 00:17:10.559
<v Speaker 1>You cannot expect them to be,

00:17:11.040 --> 00:17:13.920
<v Speaker 1>you know, very familiar with every language that

00:17:13.920 --> 00:17:16.160
<v Speaker 1>all of the systems they maintain is written

00:17:16.160 --> 00:17:18.375
<v Speaker 1>in. Right? So you need to to have

00:17:18.375 --> 00:17:21.015
<v Speaker 1>something that's even more familiar, more readable, and

00:17:21.015 --> 00:17:22.454
<v Speaker 1>and simpler to understand.

00:17:25.494 --> 00:17:27.895
<v Speaker 1>And this is complicated. Right? So this is

00:17:27.895 --> 00:17:30.615
<v Speaker 1>a little bit what they

00:17:29.580 --> 00:17:31.659
<v Speaker 1>what they try to do with Go. Right?

00:17:31.659 --> 00:17:33.500
<v Speaker 1>And the whole idea is that simplicity is

00:17:33.500 --> 00:17:35.099
<v Speaker 1>complicated, and it is.

00:17:35.820 --> 00:17:39.099
<v Speaker 1>But, ultimately, it makes life of everybody easier.

00:17:39.980 --> 00:17:42.485
<v Speaker 1>So what does CUE look like? So I

00:17:42.485 --> 00:17:44.725
<v Speaker 1>mentioned already before that CUE,

00:17:45.445 --> 00:17:49.285
<v Speaker 1>unifies types and values and constraints, policy validation.

00:17:49.285 --> 00:17:50.405
<v Speaker 1>It's all the same thing.

00:17:50.725 --> 00:17:52.085
<v Speaker 1>So if you look at the bottom, you

00:17:52.085 --> 00:17:53.125
<v Speaker 1>basically have,

00:17:53.765 --> 00:17:55.525
<v Speaker 1>in this this Moscow,

00:17:56.325 --> 00:17:59.700
<v Speaker 1>entry, you basically have JSON with syntactic sugar.

00:17:59.700 --> 00:18:00.980
<v Speaker 1>Right? Like, if you squint your eyes a

00:18:00.980 --> 00:18:02.740
<v Speaker 1>little bit, it's just JSON. You have key

00:18:02.740 --> 00:18:03.780
<v Speaker 1>value pairs.

00:18:04.980 --> 00:18:06.340
<v Speaker 1>So if you look at the top, it

00:18:06.340 --> 00:18:08.500
<v Speaker 1>looks more like a ghost structs. Right? Like,

00:18:08.500 --> 00:18:10.100
<v Speaker 1>you have a a the name of the

00:18:10.100 --> 00:18:11.940
<v Speaker 1>structs, you have the fields, and then the

00:18:11.940 --> 00:18:12.260
<v Speaker 1>types.

00:18:12.975 --> 00:18:13.455
<v Speaker 1>Right?

00:18:13.775 --> 00:18:15.775
<v Speaker 1>So in the middle, you see something that

00:18:15.775 --> 00:18:17.534
<v Speaker 1>is smack in the middle of these two.

00:18:18.175 --> 00:18:19.855
<v Speaker 1>So you have a large capital. So the

00:18:19.855 --> 00:18:22.735
<v Speaker 1>name is, again, a string. A capital is

00:18:22.735 --> 00:18:25.009
<v Speaker 1>now set to true, fixed to true, and

00:18:25.009 --> 00:18:27.730
<v Speaker 1>population is set to be greater than 5,000,000.

00:18:27.730 --> 00:18:29.889
<v Speaker 1>Right? So here you see this whole spreadsheet,

00:18:30.289 --> 00:18:32.610
<v Speaker 1>analogy coming back as well. And, really, you

00:18:32.610 --> 00:18:34.049
<v Speaker 1>can mix and match,

00:18:34.529 --> 00:18:37.409
<v Speaker 1>concrete values with types, with constraints,

00:18:37.649 --> 00:18:39.409
<v Speaker 1>however much you want within CUE.

00:18:43.145 --> 00:18:45.305
<v Speaker 1>Then CUE is also aspect oriented.

00:18:45.625 --> 00:18:47.465
<v Speaker 1>So what that means so one way to

00:18:47.465 --> 00:18:49.625
<v Speaker 1>view CUE as well so remember that I

00:18:49.625 --> 00:18:52.265
<v Speaker 1>said it's just, sort of a spreadsheet for

00:18:52.265 --> 00:18:52.745
<v Speaker 1>JSON.

00:18:53.220 --> 00:18:55.780
<v Speaker 1>So if you generalize JSON or if you

00:18:55.780 --> 00:18:57.940
<v Speaker 1>wanna see what JSON really is, right, like,

00:18:57.940 --> 00:18:59.380
<v Speaker 1>it's you can see it as a tree

00:18:59.380 --> 00:19:00.499
<v Speaker 1>of of data.

00:19:01.220 --> 00:19:03.059
<v Speaker 1>But another way to view it is a

00:19:03.059 --> 00:19:04.019
<v Speaker 1>path,

00:19:04.820 --> 00:19:06.820
<v Speaker 1>with some concrete value at the end of

00:19:06.820 --> 00:19:08.500
<v Speaker 1>that path, right, and then a sequence of

00:19:08.500 --> 00:19:10.195
<v Speaker 1>that. So you have it's basically a sequence

00:19:10.195 --> 00:19:11.875
<v Speaker 1>of path value pairs.

00:19:11.875 --> 00:19:12.434
<v Speaker 1>Right?

00:19:12.755 --> 00:19:14.755
<v Speaker 1>And, basically, what you can do in CUE

00:19:14.755 --> 00:19:16.835
<v Speaker 1>is the value doesn't have to be a

00:19:16.835 --> 00:19:18.754
<v Speaker 1>concrete value. It can be any type.

00:19:19.315 --> 00:19:21.075
<v Speaker 1>But, also, the path doesn't have to be

00:19:21.075 --> 00:19:22.515
<v Speaker 1>a single path. It can be

00:19:23.590 --> 00:19:26.070
<v Speaker 1>any group of paths. Right? So, for example,

00:19:26.070 --> 00:19:27.910
<v Speaker 1>if you look at the this last name

00:19:27.910 --> 00:19:28.950
<v Speaker 1>example here,

00:19:29.670 --> 00:19:31.910
<v Speaker 1>so we can say last name is Jones,

00:19:31.910 --> 00:19:33.590
<v Speaker 1>so you have the path and a concrete

00:19:33.590 --> 00:19:34.230
<v Speaker 1>value.

00:19:34.470 --> 00:19:35.990
<v Speaker 1>I can say the last name

00:19:36.230 --> 00:19:38.390
<v Speaker 1>is a string, which means it's of a

00:19:38.390 --> 00:19:41.065
<v Speaker 1>certain type. I can also say it's of

00:19:41.065 --> 00:19:41.864
<v Speaker 1>a type,

00:19:42.424 --> 00:19:44.265
<v Speaker 1>you know, of a certain subset of strings,

00:19:44.265 --> 00:19:46.184
<v Speaker 1>namely this any string that starts with a

00:19:46.184 --> 00:19:47.065
<v Speaker 1>capital letter,

00:19:48.345 --> 00:19:50.505
<v Speaker 1>which doesn't even work for my last name,

00:19:50.505 --> 00:19:52.025
<v Speaker 1>but, you know, it's just an example.

00:19:52.870 --> 00:19:54.870
<v Speaker 1>But what you can also say is that

00:19:54.870 --> 00:19:57.190
<v Speaker 1>every field that ends with name,

00:19:57.350 --> 00:19:59.110
<v Speaker 1>right, I wanted to start with a capital

00:19:59.110 --> 00:20:00.789
<v Speaker 1>letter. So here you see a group of

00:20:00.789 --> 00:20:01.509
<v Speaker 1>paths,

00:20:02.150 --> 00:20:03.909
<v Speaker 1>combined into a,

00:20:04.309 --> 00:20:05.909
<v Speaker 1>you know, assigned a single type.

00:20:08.294 --> 00:20:10.774
<v Speaker 1>So now I'll so first of all,

00:20:11.335 --> 00:20:14.054
<v Speaker 1>let me ask if there's any

00:20:14.054 --> 00:20:16.134
<v Speaker 1>questions or if this was clear. I'll stop

00:20:16.134 --> 00:20:16.854
<v Speaker 1>sharing.

00:20:18.134 --> 00:20:21.174
<v Speaker 0>Yeah. It was definitely very clear. I mean,

00:20:21.174 --> 00:20:22.970
<v Speaker 0>you also gave me, you know, the fear

00:20:22.970 --> 00:20:24.970
<v Speaker 0>that I've been doing configuration wrong my entire

00:20:24.970 --> 00:20:26.330
<v Speaker 0>life. But, you know,

00:20:27.050 --> 00:20:28.730
<v Speaker 0>I think there's a lot of, you know,

00:20:28.730 --> 00:20:30.730
<v Speaker 0>wisdom in in those slides and and, you

00:20:30.730 --> 00:20:32.730
<v Speaker 0>know, really, your articulated the problem that we

00:20:32.730 --> 00:20:34.410
<v Speaker 0>have very well and how you hopefully CUE

00:20:34.410 --> 00:20:35.935
<v Speaker 0>is gonna come in here and and kinda

00:20:35.935 --> 00:20:37.375
<v Speaker 0>help us do this all better. So that

00:20:37.375 --> 00:20:38.255
<v Speaker 0>was really great.

00:20:38.575 --> 00:20:40.095
<v Speaker 0>Actually, even while you were talking, I was

00:20:40.095 --> 00:20:42.015
<v Speaker 0>tweeting, I loved that line that inheritance is

00:20:42.015 --> 00:20:44.415
<v Speaker 0>questionable in programming, but it's fatal in configuration.

00:20:44.415 --> 00:20:45.775
<v Speaker 0>Like, I just think that was Yeah. That

00:20:45.775 --> 00:20:46.575
<v Speaker 0>was perfect.

00:20:47.215 --> 00:20:48.975
<v Speaker 1>Yeah. Yeah. Yeah. Yeah. I mean, in Go,

00:20:48.975 --> 00:20:51.299
<v Speaker 1>you see they're already starting moving away from

00:20:51.299 --> 00:20:52.980
<v Speaker 1>this. I I mean, it has inheritance, just

00:20:52.980 --> 00:20:54.659
<v Speaker 1>no subtype inheritance. Right? But,

00:20:56.179 --> 00:20:58.659
<v Speaker 1>another way to see it with inheritance is

00:20:58.820 --> 00:21:00.419
<v Speaker 1>so one of their critiques of CUE is

00:21:00.419 --> 00:21:01.379
<v Speaker 1>that people say,

00:21:02.179 --> 00:21:04.020
<v Speaker 1>you know, well, this is too complicated for

00:21:04.020 --> 00:21:06.275
<v Speaker 1>for software engineers because they're used to inheritance.

00:21:06.275 --> 00:21:08.995
<v Speaker 1>Just use inheritance. Right? So so maybe that's

00:21:08.995 --> 00:21:09.475
<v Speaker 1>true.

00:21:10.195 --> 00:21:13.155
<v Speaker 1>But for anybody that's not a software engineer,

00:21:13.395 --> 00:21:16.115
<v Speaker 1>inheritance itself is kinda crazy. Right? Because, basically,

00:21:16.115 --> 00:21:17.635
<v Speaker 1>what you're saying is,

00:21:18.355 --> 00:21:19.715
<v Speaker 1>okay. Let's say we have a cat.

00:21:20.380 --> 00:21:22.380
<v Speaker 1>Right? And now we wanna create a dog.

00:21:22.380 --> 00:21:24.380
<v Speaker 1>So, okay. Let's inherit from cats because they're

00:21:24.380 --> 00:21:26.220
<v Speaker 1>kinda similar. They both have four legs and

00:21:26.220 --> 00:21:26.779
<v Speaker 1>stuff.

00:21:27.020 --> 00:21:28.780
<v Speaker 1>So we just override a cat and say

00:21:28.780 --> 00:21:30.620
<v Speaker 1>the the nose is now wet instead of

00:21:30.620 --> 00:21:32.460
<v Speaker 1>dry and it barks instead of meows. And

00:21:32.460 --> 00:21:34.345
<v Speaker 1>now we have a dog. Right? So to

00:21:34.345 --> 00:21:37.144
<v Speaker 1>any normal human, that would be absolutely insane.

00:21:37.625 --> 00:21:39.865
<v Speaker 1>Right? And and and it kinda is. Right?

00:21:39.865 --> 00:21:40.585
<v Speaker 1>So the way,

00:21:41.465 --> 00:21:42.904
<v Speaker 1>so the way you solve it in CUE

00:21:42.904 --> 00:21:44.985
<v Speaker 1>is to say, like, okay. You cannot have

00:21:44.985 --> 00:21:47.065
<v Speaker 1>a dog inherit from cats. You create an

00:21:47.065 --> 00:21:47.465
<v Speaker 1>animal.

00:21:48.049 --> 00:21:49.730
<v Speaker 1>Right? You can still have a hierarchy. Right?

00:21:49.730 --> 00:21:51.490
<v Speaker 1>But you create a a mammal. Right? And

00:21:51.490 --> 00:21:53.330
<v Speaker 1>then you have a a cat and dog,

00:21:53.890 --> 00:21:55.809
<v Speaker 1>instance of that. Right? You make it always

00:21:55.809 --> 00:21:57.970
<v Speaker 1>more specific. Everything you do is making everything

00:21:57.970 --> 00:21:58.929
<v Speaker 1>more specific.

00:21:59.730 --> 00:22:01.809
<v Speaker 1>And that's that's really the basis of it.

00:22:01.809 --> 00:22:01.970
<v Speaker 1>Yeah.

00:22:02.955 --> 00:22:03.754
<v Speaker 0>Awesome.

00:22:03.835 --> 00:22:06.794
<v Speaker 0>I think one of your friends and maintainers

00:22:06.794 --> 00:22:08.554
<v Speaker 0>has joined us. Paul Jolley says, CUE sounds

00:22:08.554 --> 00:22:09.835
<v Speaker 0>like fun. Hey, Paul.

00:22:10.635 --> 00:22:11.274
<v Speaker 0>Yeah.

00:22:11.595 --> 00:22:12.634
<v Speaker 0>And

00:22:13.674 --> 00:22:14.955
<v Speaker 0>yeah. So let's I know we have no

00:22:14.955 --> 00:22:16.475
<v Speaker 0>questions right now. So why don't we dive

00:22:16.475 --> 00:22:18.309
<v Speaker 0>into the demo? Again, if you're watching and

00:22:18.309 --> 00:22:19.510
<v Speaker 0>you have questions that you want us to

00:22:19.510 --> 00:22:21.429
<v Speaker 0>answer, please drop them into the chat, and

00:22:21.429 --> 00:22:22.950
<v Speaker 0>we will get right on to that. I

00:22:22.950 --> 00:22:25.029
<v Speaker 0>will pop your screen up with the

00:22:25.830 --> 00:22:26.389
<v Speaker 0>code.

00:22:27.269 --> 00:22:29.190
<v Speaker 0>Yep. There you go. Take it away. Yep.

00:22:29.684 --> 00:22:31.284
<v Speaker 1>So yeah. So I just wanted to give

00:22:31.284 --> 00:22:33.445
<v Speaker 1>a little feel here for what it means

00:22:33.445 --> 00:22:35.684
<v Speaker 1>you can just dump things together, right, with

00:22:35.684 --> 00:22:36.404
<v Speaker 1>CUE.

00:22:36.804 --> 00:22:37.364
<v Speaker 1>So

00:22:37.764 --> 00:22:39.524
<v Speaker 1>so here I have a little directory with

00:22:39.845 --> 00:22:42.325
<v Speaker 1>nope. Wrong directory. Good thing I checked.

00:22:45.110 --> 00:22:46.790
<v Speaker 1>So here I have a little directory with

00:22:46.790 --> 00:22:47.830
<v Speaker 1>a bunch of files.

00:22:48.550 --> 00:22:49.350
<v Speaker 1>And

00:22:50.150 --> 00:22:52.390
<v Speaker 1>so let's look at a n dot JSON

00:22:52.390 --> 00:22:53.669
<v Speaker 1>and b dot YAML.

00:22:53.990 --> 00:22:57.670
<v Speaker 1>So here you see two files. They both

00:22:57.995 --> 00:22:59.355
<v Speaker 1>define a restaurant's,

00:22:59.675 --> 00:23:02.075
<v Speaker 1>you know, top level restaurant map with, you

00:23:02.075 --> 00:23:02.955
<v Speaker 1>know, name,

00:23:03.675 --> 00:23:05.675
<v Speaker 1>you know, like like, basically, a name of

00:23:05.675 --> 00:23:07.915
<v Speaker 1>a restaurant and then some structs

00:23:07.915 --> 00:23:09.595
<v Speaker 1>describing the restaurants. Right?

00:23:10.309 --> 00:23:11.909
<v Speaker 1>So if I do

00:23:12.950 --> 00:23:14.230
<v Speaker 1>queue exports,

00:23:14.230 --> 00:23:16.630
<v Speaker 1>a dot JSON pretty much get what I

00:23:16.630 --> 00:23:17.429
<v Speaker 1>saw there.

00:23:17.669 --> 00:23:19.110
<v Speaker 1>Right? Then I can,

00:23:19.350 --> 00:23:20.789
<v Speaker 1>combine it with,

00:23:21.030 --> 00:23:23.190
<v Speaker 1>with the YAML one and basically,

00:23:23.905 --> 00:23:26.065
<v Speaker 1>well, let's do the output in YAML, a

00:23:26.065 --> 00:23:27.105
<v Speaker 1>little bit shorter.

00:23:29.585 --> 00:23:30.865
<v Speaker 1>Demo effects.

00:23:31.745 --> 00:23:32.625
<v Speaker 1>Alright.

00:23:33.265 --> 00:23:35.425
<v Speaker 1>It's my Go heritage. Still not used to

00:23:35.425 --> 00:23:35.665
<v Speaker 1>this.

00:23:37.100 --> 00:23:39.100
<v Speaker 1>So, basically, what you see is it combined

00:23:39.100 --> 00:23:40.700
<v Speaker 1>these fine into a single,

00:23:41.100 --> 00:23:43.980
<v Speaker 1>single map. Right? Because there's basically no overlap,

00:23:44.620 --> 00:23:47.180
<v Speaker 1>and everything is fine. So so this provides

00:23:47.180 --> 00:23:48.220
<v Speaker 1>you a way of combining,

00:23:49.395 --> 00:23:51.795
<v Speaker 1>you know, like JSON, YAML, whatever whatever you

00:23:51.795 --> 00:23:52.275
<v Speaker 1>want.

00:23:52.675 --> 00:23:53.315
<v Speaker 1>So

00:23:53.795 --> 00:23:55.955
<v Speaker 1>now the next question is, if I look

00:23:55.955 --> 00:23:56.755
<v Speaker 1>at,

00:23:57.635 --> 00:23:58.675
<v Speaker 1>for example,

00:23:59.235 --> 00:24:00.835
<v Speaker 1>I have another file here.

00:24:03.400 --> 00:24:05.720
<v Speaker 1>So what if I combine these two files?

00:24:05.720 --> 00:24:06.840
<v Speaker 1>So what would happen?

00:24:07.400 --> 00:24:09.000
<v Speaker 1>Alright. So let me do that.

00:24:10.120 --> 00:24:12.520
<v Speaker 1>A dot json, e dot json.

00:24:12.840 --> 00:24:15.000
<v Speaker 1>So basically, happens is complaints

00:24:15.975 --> 00:24:17.495
<v Speaker 1>complaints because,

00:24:17.735 --> 00:24:20.135
<v Speaker 1>it's the same restaurant with the same key,

00:24:20.535 --> 00:24:23.735
<v Speaker 1>and but they both define this cuisine field,

00:24:24.135 --> 00:24:26.855
<v Speaker 1>right, with a different value. And CUE basically

00:24:26.855 --> 00:24:28.615
<v Speaker 1>says you cannot do that. Right? Like, that's

00:24:28.615 --> 00:24:30.215
<v Speaker 1>the the cat and the dog

00:24:30.450 --> 00:24:33.250
<v Speaker 1>issue again. So so, basically, it says resolve

00:24:33.250 --> 00:24:35.409
<v Speaker 1>this. Right? Like, I cannot resolve this.

00:24:35.730 --> 00:24:36.369
<v Speaker 1>So

00:24:37.010 --> 00:24:39.169
<v Speaker 1>another thing you can do so let me

00:24:39.169 --> 00:24:39.809
<v Speaker 1>open

00:24:42.610 --> 00:24:44.129
<v Speaker 1>so the schema here.

00:24:44.370 --> 00:24:46.434
<v Speaker 1>So another thing you can do is apply

00:24:46.434 --> 00:24:48.595
<v Speaker 1>schema. So here I have a JSON

00:24:48.915 --> 00:24:51.235
<v Speaker 1>schema in written in YAML.

00:24:51.395 --> 00:24:52.755
<v Speaker 1>So what I like to do with JSON

00:24:52.755 --> 00:24:54.275
<v Speaker 1>schema because I find it kinda hard to

00:24:54.275 --> 00:24:55.874
<v Speaker 1>read, I can basically,

00:24:57.475 --> 00:24:59.635
<v Speaker 1>turn it into a CUE schema. So CUE

00:24:59.635 --> 00:25:02.560
<v Speaker 1>reads JSON schema natively. It uses this this

00:25:02.560 --> 00:25:04.480
<v Speaker 1>schema definition and some other,

00:25:05.040 --> 00:25:06.960
<v Speaker 1>clues to to figure that out.

00:25:07.360 --> 00:25:09.440
<v Speaker 1>And this is essentially how the queue looks

00:25:09.440 --> 00:25:11.520
<v Speaker 1>like. So I have a top level restaurant

00:25:11.520 --> 00:25:12.240
<v Speaker 1>map,

00:25:13.200 --> 00:25:15.120
<v Speaker 1>and then which is, you know, of type

00:25:15.120 --> 00:25:15.600
<v Speaker 1>restaurant.

00:25:16.294 --> 00:25:19.095
<v Speaker 1>There's a cuisine and a list of tables,

00:25:19.495 --> 00:25:20.774
<v Speaker 1>which basically describes,

00:25:20.855 --> 00:25:22.695
<v Speaker 1>you know, like, how many seats and whether

00:25:22.695 --> 00:25:23.975
<v Speaker 1>it has a view or not.

00:25:24.535 --> 00:25:26.614
<v Speaker 1>So very, very simple schema.

00:25:26.855 --> 00:25:27.494
<v Speaker 1>So

00:25:27.895 --> 00:25:29.015
<v Speaker 1>now I can,

00:25:30.340 --> 00:25:33.059
<v Speaker 1>basically, I can use the schema to verify

00:25:33.940 --> 00:25:34.499
<v Speaker 1>if,

00:25:34.820 --> 00:25:37.700
<v Speaker 1>my my values were correct. Right? So I

00:25:37.700 --> 00:25:39.139
<v Speaker 1>can do it with a dot schema. It's

00:25:39.139 --> 00:25:40.339
<v Speaker 1>a correct restaurant.

00:25:40.659 --> 00:25:42.100
<v Speaker 1>B dot schema was correct.

00:25:42.715 --> 00:25:44.875
<v Speaker 1>But now I have here, I have

00:25:45.515 --> 00:25:47.755
<v Speaker 1>so let me open a verb first.

00:25:48.555 --> 00:25:50.075
<v Speaker 1>So I have a code.

00:25:51.595 --> 00:25:53.675
<v Speaker 1>Was it this one? I think so.

00:25:54.970 --> 00:25:56.809
<v Speaker 1>So here I have another YAML

00:25:57.370 --> 00:25:58.249
<v Speaker 1>thingy.

00:25:58.649 --> 00:26:00.330
<v Speaker 1>So I can do a vet, so I

00:26:00.330 --> 00:26:01.769
<v Speaker 1>don't wanna see the output. I just wanna

00:26:01.769 --> 00:26:03.450
<v Speaker 1>validate if it's correct.

00:26:04.730 --> 00:26:06.730
<v Speaker 1>So I can run it, and now I

00:26:06.730 --> 00:26:08.009
<v Speaker 1>get a, you know, error,

00:26:08.895 --> 00:26:11.055
<v Speaker 1>which is correct because if I look here,

00:26:11.055 --> 00:26:12.735
<v Speaker 1>right, the maximum is 10. So here I

00:26:12.735 --> 00:26:13.535
<v Speaker 1>have 12.

00:26:14.175 --> 00:26:16.335
<v Speaker 1>If I fix that and run it again

00:26:16.655 --> 00:26:18.735
<v Speaker 1>so that's fixed, but now I have another

00:26:18.735 --> 00:26:21.375
<v Speaker 1>problem. So this is what's called an incomplete

00:26:21.030 --> 00:26:23.429
<v Speaker 1>problem. That's why I wasn't showing it immediately.

00:26:23.590 --> 00:26:25.990
<v Speaker 1>So the other was in hard violation,

00:26:25.990 --> 00:26:27.910
<v Speaker 1>but now it's something that could have been

00:26:27.910 --> 00:26:29.830
<v Speaker 1>solved if I provided more information.

00:26:30.230 --> 00:26:31.910
<v Speaker 1>So the problem here is if you see

00:26:31.910 --> 00:26:34.230
<v Speaker 1>that seats is actually a required

00:26:34.630 --> 00:26:35.030
<v Speaker 1>attribute,

00:26:36.674 --> 00:26:39.635
<v Speaker 1>but it's not specified for the last item

00:26:39.635 --> 00:26:41.154
<v Speaker 1>here. Right? And, really, the problem was that

00:26:41.154 --> 00:26:43.955
<v Speaker 1>there was an extra dash. That's really what

00:26:43.955 --> 00:26:45.554
<v Speaker 1>what it was going on here. So if

00:26:45.554 --> 00:26:46.514
<v Speaker 1>I run it now,

00:26:46.835 --> 00:26:48.115
<v Speaker 1>it's fine. Right?

00:26:48.690 --> 00:26:49.969
<v Speaker 1>So similarly,

00:26:50.370 --> 00:26:51.409
<v Speaker 1>if I

00:26:52.610 --> 00:26:54.529
<v Speaker 1>so open, for example,

00:26:54.769 --> 00:26:56.529
<v Speaker 1>another schema here.

00:26:57.570 --> 00:26:58.929
<v Speaker 1>Let's open the

00:27:02.049 --> 00:27:04.529
<v Speaker 1>so let's open the

00:27:07.135 --> 00:27:08.094
<v Speaker 1>already

00:27:09.135 --> 00:27:11.774
<v Speaker 1>have that. Let's say I have these two

00:27:11.774 --> 00:27:13.054
<v Speaker 1>schemas. Right?

00:27:13.774 --> 00:27:14.335
<v Speaker 1>And,

00:27:14.654 --> 00:27:16.654
<v Speaker 1>so one is an older version of the

00:27:16.654 --> 00:27:17.214
<v Speaker 1>other.

00:27:17.534 --> 00:27:18.894
<v Speaker 1>So let me

00:27:20.509 --> 00:27:22.669
<v Speaker 1>let me, run this again.

00:27:23.230 --> 00:27:24.909
<v Speaker 1>So here here, you see the queue is

00:27:24.909 --> 00:27:26.909
<v Speaker 1>a little bit easier to read. So if

00:27:26.909 --> 00:27:29.870
<v Speaker 1>I now combine that with the, the later

00:27:29.870 --> 00:27:31.070
<v Speaker 1>scheme I had,

00:27:32.190 --> 00:27:34.825
<v Speaker 1>so what you see is the the old

00:27:34.825 --> 00:27:37.865
<v Speaker 1>schema basically sets the seats, you know, every

00:27:37.865 --> 00:27:39.945
<v Speaker 1>table seats at least four people and at

00:27:39.945 --> 00:27:40.825
<v Speaker 1>most 12.

00:27:41.225 --> 00:27:43.705
<v Speaker 1>Their newest newer schema, you know, they'd like

00:27:43.705 --> 00:27:44.905
<v Speaker 1>to have a little bit more space. So

00:27:44.905 --> 00:27:47.160
<v Speaker 1>it says, you know, it seats maximum 10,

00:27:47.160 --> 00:27:48.119
<v Speaker 1>minimum two.

00:27:48.360 --> 00:27:50.200
<v Speaker 1>So if I combine these schema, it takes

00:27:50.200 --> 00:27:51.960
<v Speaker 1>the intersection of that, and it's greater than

00:27:51.960 --> 00:27:53.640
<v Speaker 1>four, smaller than 10. Right? Like, you can

00:27:53.640 --> 00:27:56.760
<v Speaker 1>use this to also check backwards compatibility of

00:27:56.760 --> 00:27:58.360
<v Speaker 1>schema and all these kind of,

00:27:58.919 --> 00:28:01.575
<v Speaker 1>kind of things. So let me move to

00:28:01.575 --> 00:28:03.575
<v Speaker 1>to a next demo here.

00:28:07.655 --> 00:28:09.735
<v Speaker 1>So open these files again.

00:28:12.375 --> 00:28:13.815
<v Speaker 1>One

00:28:13.320 --> 00:28:16.359
<v Speaker 1>thing that makes CUE work very well,

00:28:16.600 --> 00:28:19.000
<v Speaker 1>and this was already a realization that twenty

00:28:19.000 --> 00:28:21.000
<v Speaker 1>years ago in sort of the the ancestor

00:28:21.000 --> 00:28:22.839
<v Speaker 1>formalism that CUE uses,

00:28:23.320 --> 00:28:25.960
<v Speaker 1>is that if you have a a schema

00:28:25.960 --> 00:28:26.999
<v Speaker 1>validation

00:28:27.960 --> 00:28:28.360
<v Speaker 1>oops.

00:28:28.995 --> 00:28:30.434
<v Speaker 1>So I have codes.

00:28:33.075 --> 00:28:35.075
<v Speaker 1>So, can I do two things at the

00:28:35.075 --> 00:28:35.794
<v Speaker 1>same time?

00:28:36.675 --> 00:28:38.995
<v Speaker 1>So if you if you have a,

00:28:39.555 --> 00:28:41.395
<v Speaker 1>so if you have a schema for something

00:28:42.049 --> 00:28:43.409
<v Speaker 1>that really also,

00:28:43.650 --> 00:28:45.409
<v Speaker 1>at the same time as a template, right,

00:28:45.409 --> 00:28:47.490
<v Speaker 1>that you can use to reduce boilerplate, really

00:28:47.490 --> 00:28:49.090
<v Speaker 1>these two things. If you have to write

00:28:49.090 --> 00:28:51.090
<v Speaker 1>formulas, and these two are the same things.

00:28:51.730 --> 00:28:52.210
<v Speaker 1>So,

00:28:53.010 --> 00:28:55.409
<v Speaker 1>so one common use case for for CUE

00:28:55.115 --> 00:28:56.475
<v Speaker 1>is that you say, okay. We start out

00:28:56.475 --> 00:28:58.475
<v Speaker 1>with this whole bunch of JSON or YAML,

00:28:58.475 --> 00:28:59.434
<v Speaker 1>whatever you have.

00:28:59.675 --> 00:29:01.675
<v Speaker 1>Right? And now we first wanna check if

00:29:01.675 --> 00:29:02.875
<v Speaker 1>it's actually correct.

00:29:03.355 --> 00:29:04.795
<v Speaker 1>So what you do is you start with

00:29:04.795 --> 00:29:06.955
<v Speaker 1>the schema to sort of that captures the

00:29:06.955 --> 00:29:09.275
<v Speaker 1>rules and sort of your understanding of what

00:29:09.275 --> 00:29:10.075
<v Speaker 1>all this code is.

00:29:11.320 --> 00:29:13.560
<v Speaker 1>And then you start to, to run this

00:29:13.560 --> 00:29:15.720
<v Speaker 1>against your your YAML and JSON and see

00:29:15.720 --> 00:29:18.440
<v Speaker 1>if it's actually, you know, is the way

00:29:18.440 --> 00:29:20.600
<v Speaker 1>you thought it was. And then very often,

00:29:20.600 --> 00:29:22.280
<v Speaker 1>find tons of errors. Right? The first time

00:29:22.280 --> 00:29:24.120
<v Speaker 1>I started applying this to my own JSON,

00:29:24.120 --> 00:29:25.720
<v Speaker 1>I found and and YAML, I found tons

00:29:25.720 --> 00:29:26.120
<v Speaker 1>of errors.

00:29:27.085 --> 00:29:29.245
<v Speaker 1>And then once you've eliminated all these errors,

00:29:29.245 --> 00:29:31.325
<v Speaker 1>you can use the same schema to then

00:29:31.325 --> 00:29:32.364
<v Speaker 1>say, like, well,

00:29:32.684 --> 00:29:34.605
<v Speaker 1>you know, now I actually want this to

00:29:34.605 --> 00:29:37.404
<v Speaker 1>be, you know, like, reducing boilerplates.

00:29:37.404 --> 00:29:39.005
<v Speaker 1>Right? So it basically

00:29:39.005 --> 00:29:40.789
<v Speaker 1>does two things at the same time. So

00:29:40.789 --> 00:29:42.309
<v Speaker 1>let's see what's going on here. So what

00:29:42.309 --> 00:29:44.150
<v Speaker 1>you see here is not Kubernetes. It's a

00:29:44.150 --> 00:29:46.389
<v Speaker 1>simplified form of it, so it actually,

00:29:46.710 --> 00:29:49.509
<v Speaker 1>you know, fits within within one window here.

00:29:51.030 --> 00:29:52.950
<v Speaker 1>So but, you know, it's similar. So what

00:29:52.950 --> 00:29:54.150
<v Speaker 1>we have is

00:29:54.355 --> 00:29:55.794
<v Speaker 1>I can say I have a map of

00:29:55.794 --> 00:29:56.674
<v Speaker 1>deployments,

00:29:56.674 --> 00:29:57.954
<v Speaker 1>keys by their name.

00:29:58.434 --> 00:30:00.835
<v Speaker 1>Right? I say the kind is always deployment.

00:30:00.835 --> 00:30:02.514
<v Speaker 1>Their name is always the same as the

00:30:02.514 --> 00:30:03.075
<v Speaker 1>key.

00:30:03.394 --> 00:30:04.355
<v Speaker 1>So replicas,

00:30:04.355 --> 00:30:05.955
<v Speaker 1>I have a small service. So, usually, I

00:30:05.955 --> 00:30:08.250
<v Speaker 1>only have one. Right? So that would be

00:30:08.250 --> 00:30:10.490
<v Speaker 1>the default, but it can be any integer.

00:30:10.730 --> 00:30:13.130
<v Speaker 1>So there must be an image, right, of

00:30:13.130 --> 00:30:15.450
<v Speaker 1>string, and I have a few selectors

00:30:15.770 --> 00:30:16.570
<v Speaker 1>where

00:30:17.130 --> 00:30:18.890
<v Speaker 1>I say, you know, can be more than

00:30:18.890 --> 00:30:20.650
<v Speaker 1>that, but at least the the the app

00:30:20.650 --> 00:30:21.690
<v Speaker 1>should always be

00:30:22.085 --> 00:30:23.445
<v Speaker 1>the same as the name.

00:30:23.845 --> 00:30:26.245
<v Speaker 1>And then env, I now hardwire to prod.

00:30:26.245 --> 00:30:27.924
<v Speaker 1>Could be, you know, one

00:30:28.325 --> 00:30:30.165
<v Speaker 1>of a choice of a few things. Right?

00:30:30.165 --> 00:30:32.725
<v Speaker 1>But for now, I hardwire it. So same

00:30:32.725 --> 00:30:35.045
<v Speaker 1>thing. We have a a service doing something

00:30:35.045 --> 00:30:35.765
<v Speaker 1>very similar.

00:30:36.880 --> 00:30:38.960
<v Speaker 1>And then here, this is an interesting one.

00:30:39.440 --> 00:30:41.440
<v Speaker 1>So in this setup,

00:30:41.520 --> 00:30:43.919
<v Speaker 1>let's assume that for every deployment, we have

00:30:43.919 --> 00:30:45.039
<v Speaker 1>a single service.

00:30:45.520 --> 00:30:48.559
<v Speaker 1>Right? And so what I'm basically saying here

00:30:48.559 --> 00:30:49.600
<v Speaker 1>is that for every

00:30:50.765 --> 00:30:51.485
<v Speaker 1>deployment

00:30:51.645 --> 00:30:53.965
<v Speaker 1>and the way this this comprehension works

00:30:54.365 --> 00:30:56.284
<v Speaker 1>is that this is like a yield. Right?

00:30:56.284 --> 00:30:58.364
<v Speaker 1>Like, the final curly brace is a yield,

00:30:58.525 --> 00:31:00.845
<v Speaker 1>and that just gets dumped in, at the

00:31:00.845 --> 00:31:03.659
<v Speaker 1>configuration at that point. So, basically, what I'm

00:31:03.659 --> 00:31:05.659
<v Speaker 1>saying is here is that for every deployment

00:31:05.659 --> 00:31:06.700
<v Speaker 1>that we have,

00:31:07.100 --> 00:31:09.419
<v Speaker 1>there exists a service with the same name,

00:31:09.740 --> 00:31:11.740
<v Speaker 1>which has the same selectors and then, you

00:31:11.740 --> 00:31:13.179
<v Speaker 1>know, like, has a port,

00:31:14.059 --> 00:31:15.820
<v Speaker 1>the same as the port that's defined in

00:31:15.820 --> 00:31:17.740
<v Speaker 1>the deployment. We don't require this port here,

00:31:17.740 --> 00:31:20.515
<v Speaker 1>but it's this this implicitly assumes it's there.

00:31:20.995 --> 00:31:21.635
<v Speaker 1>So,

00:31:22.595 --> 00:31:24.035
<v Speaker 1>well, so the first thing we can do

00:31:24.035 --> 00:31:26.435
<v Speaker 1>now is we can say, well, let's see

00:31:26.435 --> 00:31:29.795
<v Speaker 1>if this even works. Right? So, actually, because

00:31:29.795 --> 00:31:30.595
<v Speaker 1>I use,

00:31:30.915 --> 00:31:33.360
<v Speaker 1>a package here at the top, I don't

00:31:33.360 --> 00:31:36.000
<v Speaker 1>have to, mention the files anymore, so let's

00:31:36.000 --> 00:31:38.320
<v Speaker 1>let's not do that. So the package basically

00:31:38.560 --> 00:31:40.480
<v Speaker 1>makes them combine altogether.

00:31:40.800 --> 00:31:42.240
<v Speaker 1>So let's run that,

00:31:42.320 --> 00:31:44.159
<v Speaker 1>and it gives two errors here.

00:31:44.480 --> 00:31:47.280
<v Speaker 1>And it basically says a trim line eight

00:31:48.105 --> 00:31:49.705
<v Speaker 1>column 12, which is here.

00:31:50.105 --> 00:31:52.585
<v Speaker 1>It says I I'm finding one,

00:31:52.825 --> 00:31:54.905
<v Speaker 1>right, you just type string, which doesn't match

00:31:54.905 --> 00:31:57.065
<v Speaker 1>integer. So I'm getting two errors.

00:31:57.385 --> 00:31:58.665
<v Speaker 1>So if you look at the schema at

00:31:58.665 --> 00:31:59.465
<v Speaker 1>the respective,

00:31:59.785 --> 00:32:00.185
<v Speaker 1>places,

00:32:00.980 --> 00:32:02.740
<v Speaker 1>the problem here is that,

00:32:03.220 --> 00:32:06.260
<v Speaker 1>you know, replicas is an is an integer,

00:32:06.900 --> 00:32:08.900
<v Speaker 1>but it has two values. Right? Like, integer,

00:32:08.900 --> 00:32:10.659
<v Speaker 1>the type, and the concrete value.

00:32:11.300 --> 00:32:14.260
<v Speaker 1>Could be simplified, I guess, by recognizing

00:32:14.420 --> 00:32:16.420
<v Speaker 1>you know, focusing on the integer part first.

00:32:17.515 --> 00:32:19.434
<v Speaker 1>But, you know, it found the error,

00:32:19.755 --> 00:32:21.595
<v Speaker 1>so let's fix that error

00:32:22.395 --> 00:32:24.235
<v Speaker 1>and then see if we're good now.

00:32:24.715 --> 00:32:26.715
<v Speaker 1>And, yes, we're good. So this is very

00:32:26.715 --> 00:32:28.955
<v Speaker 1>typical. Right? Like, you might think you have,

00:32:29.195 --> 00:32:31.274
<v Speaker 1>no errors in your configuration,

00:32:31.275 --> 00:32:32.395
<v Speaker 1>but that's you'll be surprised.

00:32:34.220 --> 00:32:36.139
<v Speaker 1>So now I I said, like, okay. Now

00:32:36.139 --> 00:32:37.820
<v Speaker 1>I wanna use this as a template. Right?

00:32:37.820 --> 00:32:39.419
<v Speaker 1>So how do that? How do you do

00:32:39.419 --> 00:32:41.019
<v Speaker 1>that? Like, well, first of all,

00:32:41.419 --> 00:32:42.139
<v Speaker 1>you

00:32:42.860 --> 00:32:44.860
<v Speaker 1>know, I can do an export on both,

00:32:44.860 --> 00:32:47.659
<v Speaker 1>right, as I did before, and you basically

00:32:47.659 --> 00:32:48.219
<v Speaker 1>see

00:32:48.539 --> 00:32:50.115
<v Speaker 1>I'm getting this full,

00:32:51.155 --> 00:32:52.355
<v Speaker 1>configuration.

00:32:52.835 --> 00:32:54.355
<v Speaker 1>So you see the ports are there. So,

00:32:54.355 --> 00:32:56.435
<v Speaker 1>you know, it's exactly as I was expecting

00:32:56.435 --> 00:32:57.075
<v Speaker 1>here.

00:32:57.795 --> 00:32:59.555
<v Speaker 1>So now but I now I know that

00:32:59.555 --> 00:33:00.915
<v Speaker 1>I can remove a lot of these fields

00:33:00.915 --> 00:33:02.675
<v Speaker 1>here. Right? So I see kinds,

00:33:03.370 --> 00:33:05.929
<v Speaker 1>all these things. I wanna basically remove those

00:33:06.730 --> 00:33:07.609
<v Speaker 1>and,

00:33:07.850 --> 00:33:09.690
<v Speaker 1>get the same results. Well,

00:33:10.010 --> 00:33:12.090
<v Speaker 1>if I wanna remove them, that's just simple

00:33:12.090 --> 00:33:13.529
<v Speaker 1>logic. Right? So why would you do that

00:33:13.529 --> 00:33:15.610
<v Speaker 1>by hand? So there's this command for it

00:33:15.610 --> 00:33:16.889
<v Speaker 1>called q trim.

00:33:17.130 --> 00:33:18.169
<v Speaker 1>So I'll run that now.

00:33:19.475 --> 00:33:21.635
<v Speaker 1>And then what you see, it has removed

00:33:21.635 --> 00:33:23.795
<v Speaker 1>here all the all the fields,

00:33:23.955 --> 00:33:26.835
<v Speaker 1>of my configuration that can be inferred

00:33:27.155 --> 00:33:29.075
<v Speaker 1>from my validation templates.

00:33:29.075 --> 00:33:29.715
<v Speaker 1>Right?

00:33:29.955 --> 00:33:32.035
<v Speaker 1>And then if I run q export again,

00:33:32.340 --> 00:33:34.980
<v Speaker 1>I'm getting the same results. Right? Because, essentially,

00:33:34.980 --> 00:33:36.580
<v Speaker 1>it only removes the things that could be

00:33:36.580 --> 00:33:38.179
<v Speaker 1>derived from this template.

00:33:39.779 --> 00:33:40.260
<v Speaker 1>So,

00:33:40.580 --> 00:33:42.659
<v Speaker 1>I'll have another little demo of where CUE

00:33:42.659 --> 00:33:44.499
<v Speaker 1>is heading, in the future,

00:33:44.980 --> 00:33:48.035
<v Speaker 1>but for now, I'll hand it back over

00:33:48.035 --> 00:33:49.315
<v Speaker 1>to David.

00:33:52.035 --> 00:33:52.835
<v Speaker 0>Thank you.

00:33:53.795 --> 00:33:55.955
<v Speaker 0>That was awesome. I have not

00:33:56.434 --> 00:33:58.034
<v Speaker 0>played with trim,

00:33:58.915 --> 00:34:00.995
<v Speaker 0>but that's a a very cool tool there

00:34:00.540 --> 00:34:02.140
<v Speaker 0>as well. And just a a nice good

00:34:02.140 --> 00:34:04.460
<v Speaker 0>overview of some of the the basics basics

00:34:04.460 --> 00:34:05.420
<v Speaker 0>of CUE.

00:34:05.980 --> 00:34:07.820
<v Speaker 0>So we did get a couple of questions.

00:34:07.820 --> 00:34:09.179
<v Speaker 0>So I'll try and throw them at you

00:34:09.179 --> 00:34:11.739
<v Speaker 0>now, and then we'll dive into the the

00:34:11.739 --> 00:34:14.540
<v Speaker 0>kind of live component as well. So Kevin

00:34:14.540 --> 00:34:14.860
<v Speaker 0>asks,

00:34:15.905 --> 00:34:18.065
<v Speaker 0>still not entirely clear on the trade off

00:34:18.065 --> 00:34:20.225
<v Speaker 0>between CUE and OPA.

00:34:20.385 --> 00:34:22.465
<v Speaker 0>Could we maybe discuss that a little bit?

00:34:22.465 --> 00:34:24.145
<v Speaker 0>I don't know. There's just a follow-up there.

00:34:24.145 --> 00:34:26.705
<v Speaker 0>This is actually probably it's CUE versus Regal.

00:34:26.705 --> 00:34:29.025
<v Speaker 0>What are the differences? Yep. Yep. That's a

00:34:29.025 --> 00:34:29.585
<v Speaker 1>very good question.

00:34:31.150 --> 00:34:33.310
<v Speaker 1>So so, basically, OPA is

00:34:34.270 --> 00:34:35.710
<v Speaker 1>or I don't know how you pronounce these.

00:34:35.710 --> 00:34:37.469
<v Speaker 1>The OPA or is it OPA? According to

00:34:37.469 --> 00:34:39.949
<v Speaker 0>the docs, it's OPA. Yeah. OPA. So that

00:34:39.949 --> 00:34:42.110
<v Speaker 1>means grandfather in in Dutch, just so you

00:34:42.110 --> 00:34:43.150
<v Speaker 1>know. So

00:34:44.364 --> 00:34:45.965
<v Speaker 1>anyway, so so

00:34:47.085 --> 00:34:49.485
<v Speaker 1>yeah. So OPA is more of a of

00:34:49.485 --> 00:34:51.325
<v Speaker 1>a product, right, whereas CUE is more of

00:34:51.325 --> 00:34:53.725
<v Speaker 1>a technology. So there is no equivalent of

00:34:53.725 --> 00:34:55.565
<v Speaker 1>OPA for CUE per se.

00:34:56.380 --> 00:34:58.380
<v Speaker 1>Right? What you could do is instead of

00:34:58.380 --> 00:35:01.580
<v Speaker 1>using Rego, right, like, basically, rig OPA to

00:35:01.580 --> 00:35:03.740
<v Speaker 1>use CUE instead of Rego.

00:35:03.740 --> 00:35:05.740
<v Speaker 1>Right? And and and and that would work.

00:35:06.140 --> 00:35:06.700
<v Speaker 1>So

00:35:07.340 --> 00:35:09.500
<v Speaker 1>Rego is more mature. Right? It's a further

00:35:09.500 --> 00:35:10.300
<v Speaker 1>developed language.

00:35:11.454 --> 00:35:13.775
<v Speaker 1>So so there are certain we did a

00:35:13.775 --> 00:35:15.535
<v Speaker 1>lot of recently, a lot of research in

00:35:15.535 --> 00:35:18.015
<v Speaker 1>in CUE into using it for policy in

00:35:18.015 --> 00:35:21.135
<v Speaker 1>in several contexts, actually. And there's a few,

00:35:21.135 --> 00:35:23.055
<v Speaker 1>you know, tiny features that are missing to

00:35:23.055 --> 00:35:24.815
<v Speaker 1>make it really powerful for for

00:35:26.200 --> 00:35:28.680
<v Speaker 1>for validation and and policy,

00:35:28.920 --> 00:35:29.560
<v Speaker 1>checking.

00:35:30.040 --> 00:35:32.360
<v Speaker 1>So you can expect more than for normal

00:35:32.360 --> 00:35:35.320
<v Speaker 1>data templating. You can expect more, rough edges

00:35:35.320 --> 00:35:37.240
<v Speaker 1>with CUE using it. Right?

00:35:37.640 --> 00:35:38.840
<v Speaker 1>On the other hand,

00:35:39.560 --> 00:35:41.285
<v Speaker 1>so if you see where CUE is coming

00:35:41.285 --> 00:35:43.204
<v Speaker 1>from, right, the the class of languages where

00:35:43.204 --> 00:35:45.285
<v Speaker 1>CUE is coming up from versus RIGO,

00:35:45.525 --> 00:35:47.684
<v Speaker 1>so there was this this well, I wouldn't

00:35:47.684 --> 00:35:49.285
<v Speaker 1>call it battle, but, you know, it's the

00:35:49.285 --> 00:35:51.924
<v Speaker 1>same people that wrote a prologue, basically, that

00:35:51.924 --> 00:35:54.325
<v Speaker 1>that went to develop sort of the successor

00:35:55.680 --> 00:35:58.080
<v Speaker 1>to it that that that fed into CUE.

00:35:58.080 --> 00:36:00.480
<v Speaker 1>Right? But Regal is basically based on Datalog,

00:36:01.200 --> 00:36:03.600
<v Speaker 1>which looks very much like Prologue. Right?

00:36:04.080 --> 00:36:06.000
<v Speaker 1>But when it came to configuration,

00:36:06.080 --> 00:36:08.640
<v Speaker 1>it it turned out that that Prologue really

00:36:08.640 --> 00:36:10.365
<v Speaker 1>didn't scale, and this is not from a

00:36:10.365 --> 00:36:13.565
<v Speaker 1>performance perspective. It's just, hard to understand.

00:36:13.965 --> 00:36:15.725
<v Speaker 1>Right? It was hard to combine,

00:36:16.445 --> 00:36:18.365
<v Speaker 1>the schema. So so, basically,

00:36:19.245 --> 00:36:22.045
<v Speaker 1>in the end, from for large scale engineering,

00:36:22.765 --> 00:36:24.845
<v Speaker 1>management, right, like, it didn't really work

00:36:25.290 --> 00:36:26.490
<v Speaker 1>for configuration.

00:36:26.490 --> 00:36:27.770
<v Speaker 1>Right? And then they came up with this

00:36:27.770 --> 00:36:29.690
<v Speaker 1>graph unification formalism,

00:36:30.010 --> 00:36:32.410
<v Speaker 1>which was very successful instead.

00:36:32.730 --> 00:36:33.370
<v Speaker 1>Right?

00:36:33.770 --> 00:36:36.250
<v Speaker 1>And so so CUE is basically the same

00:36:36.250 --> 00:36:38.250
<v Speaker 1>thing. Right? We I I believe it's it's

00:36:38.250 --> 00:36:40.570
<v Speaker 1>much better suited for configuration than RIGO.

00:36:41.135 --> 00:36:43.295
<v Speaker 1>It's actually designed so what you wanna do

00:36:43.295 --> 00:36:45.455
<v Speaker 1>in OPA is basically define constraints.

00:36:45.694 --> 00:36:48.015
<v Speaker 1>Right? So CUE is optimized for just the

00:36:48.015 --> 00:36:49.615
<v Speaker 1>constraint definition, whereas,

00:36:50.015 --> 00:36:52.335
<v Speaker 1>RIGO is, in essence, a query language.

00:36:52.734 --> 00:36:54.494
<v Speaker 1>Right? But, but definitely,

00:36:56.049 --> 00:36:58.290
<v Speaker 1>you know, Rigo is is is more ahead.

00:36:58.290 --> 00:37:00.050
<v Speaker 1>So so it's sort of like how

00:37:00.530 --> 00:37:01.090
<v Speaker 1>much,

00:37:01.410 --> 00:37:03.010
<v Speaker 1>you know, do you wanna get into the

00:37:03.010 --> 00:37:05.010
<v Speaker 1>early bandwagon. I mean, we definitely

00:37:06.210 --> 00:37:08.690
<v Speaker 1>you know, we're definitely making it a fully

00:37:08.690 --> 00:37:09.170
<v Speaker 1>fledged

00:37:09.555 --> 00:37:10.435
<v Speaker 1>policy

00:37:10.435 --> 00:37:11.555
<v Speaker 1>language.

00:37:11.555 --> 00:37:14.115
<v Speaker 1>Right? So another thing you can see is

00:37:14.115 --> 00:37:16.595
<v Speaker 1>if you unify all these different domains together.

00:37:16.595 --> 00:37:18.835
<v Speaker 1>So with Rigo, you really only can specify

00:37:18.835 --> 00:37:21.234
<v Speaker 1>policy. Right? Like, you wouldn't wanna define data

00:37:21.234 --> 00:37:23.474
<v Speaker 1>or templating in in in Rigo. Right?

00:37:24.200 --> 00:37:26.200
<v Speaker 1>So so with CUE, you get a solution

00:37:26.200 --> 00:37:28.119
<v Speaker 1>that covers the entire spectrum. You have to

00:37:28.119 --> 00:37:28.920
<v Speaker 1>learn less.

00:37:29.160 --> 00:37:30.760
<v Speaker 1>But the other nice thing about it is

00:37:30.760 --> 00:37:32.760
<v Speaker 1>because it functions at all levels, you also

00:37:32.760 --> 00:37:34.519
<v Speaker 1>can go meta on it. Right? So it's

00:37:34.920 --> 00:37:38.355
<v Speaker 1>you can define schema for your validation. Right?

00:37:38.355 --> 00:37:40.355
<v Speaker 1>So you can define the space of what

00:37:40.355 --> 00:37:41.715
<v Speaker 1>are valid validations.

00:37:41.715 --> 00:37:44.435
<v Speaker 1>Right? And so the this is something you

00:37:44.435 --> 00:37:45.795
<v Speaker 1>can make it arbitrary

00:37:45.795 --> 00:37:46.595
<v Speaker 1>meta,

00:37:46.835 --> 00:37:47.155
<v Speaker 1>basically.

00:37:48.660 --> 00:37:50.660
<v Speaker 0>Yeah. I I I think you've answered that

00:37:50.660 --> 00:37:52.500
<v Speaker 0>great. I'll just reiterate the bit that I

00:37:52.500 --> 00:37:54.740
<v Speaker 0>think is really important is that Regal really

00:37:54.740 --> 00:37:55.540
<v Speaker 0>just does

00:37:55.859 --> 00:37:56.500
<v Speaker 0>constraints

00:37:56.660 --> 00:37:59.059
<v Speaker 1>Yeah. Validate you know, validation constraints. Does this

00:37:59.059 --> 00:38:01.460
<v Speaker 0>document match my constraints? Whereas Yeah. He does

00:38:01.460 --> 00:38:03.059
<v Speaker 0>much. I I love Prolog. Don't get me

00:38:03.059 --> 00:38:05.115
<v Speaker 1>wrong. Right? But it's this is just purely

00:38:05.115 --> 00:38:06.955
<v Speaker 1>practical engineering. Yeah.

00:38:07.515 --> 00:38:09.275
<v Speaker 1>So so I wanna I see that Bart

00:38:09.275 --> 00:38:10.155
<v Speaker 1>has a question.

00:38:10.395 --> 00:38:11.835
<v Speaker 0>Or Yeah. I'm gonna put that up right

00:38:11.835 --> 00:38:12.395
<v Speaker 0>now. So

00:38:13.755 --> 00:38:15.915
<v Speaker 0>yeah. Bart Lomey has asked. Thank you for

00:38:15.915 --> 00:38:18.315
<v Speaker 0>the explanation. As we learned, CUE is read

00:38:18.600 --> 00:38:21.240
<v Speaker 0>but when you configure something, you're writing configuration.

00:38:21.560 --> 00:38:23.240
<v Speaker 0>So there's lots of edit and write processes

00:38:23.240 --> 00:38:24.200
<v Speaker 0>involved.

00:38:24.680 --> 00:38:26.760
<v Speaker 1>Exactly. Yeah. So so so

00:38:27.240 --> 00:38:28.600
<v Speaker 1>yeah. So definitely,

00:38:29.640 --> 00:38:31.320
<v Speaker 1>we wanted to make it read friendly

00:38:31.994 --> 00:38:34.634
<v Speaker 1>even if that meant sometimes making it less

00:38:34.634 --> 00:38:35.675
<v Speaker 1>write friendly.

00:38:36.075 --> 00:38:38.075
<v Speaker 1>Right? And what we hear from SRE so

00:38:38.075 --> 00:38:40.234
<v Speaker 1>far, which is almost the polar opposite of

00:38:40.234 --> 00:38:42.315
<v Speaker 1>GCL. Right? Like, GCL is very easy to

00:38:42.315 --> 00:38:44.394
<v Speaker 1>get going. So that would be sort of

00:38:44.394 --> 00:38:46.710
<v Speaker 1>a a, you know, JSON equivalent. It's very

00:38:46.710 --> 00:38:48.790
<v Speaker 1>easy to get going and and be very

00:38:48.870 --> 00:38:50.470
<v Speaker 1>you know, generating stuff quickly,

00:38:51.270 --> 00:38:54.230
<v Speaker 1>but it very quickly becomes complicated. Right? Like,

00:38:54.230 --> 00:38:55.910
<v Speaker 1>you cannot see where values are coming from.

00:38:57.885 --> 00:38:59.965
<v Speaker 1>Whereas in CUE, it's sort of the opposite.

00:38:59.965 --> 00:39:02.605
<v Speaker 1>Right? Because you have these these restrictions also

00:39:02.605 --> 00:39:04.765
<v Speaker 1>might for very well be because you're not

00:39:04.765 --> 00:39:07.245
<v Speaker 1>used to not having this inheritance and being

00:39:07.245 --> 00:39:08.445
<v Speaker 1>able to override.

00:39:08.765 --> 00:39:11.430
<v Speaker 1>Right? So because you have these restrictions, it

00:39:11.430 --> 00:39:12.950
<v Speaker 1>put a lot of restrictions on how you

00:39:12.950 --> 00:39:15.590
<v Speaker 1>can can organize things, which might be very

00:39:15.590 --> 00:39:18.230
<v Speaker 1>hard in the beginning. Right? So writing it

00:39:18.230 --> 00:39:19.110
<v Speaker 1>is indeed,

00:39:19.910 --> 00:39:23.590
<v Speaker 1>potentially more complicated than than with, JSON or

00:39:23.590 --> 00:39:26.735
<v Speaker 1>GCL or whatever. So we do think, it's

00:39:26.735 --> 00:39:28.975
<v Speaker 1>a matter of getting used to. Right? But,

00:39:29.055 --> 00:39:30.575
<v Speaker 1>even I have to get used to it,

00:39:30.735 --> 00:39:33.135
<v Speaker 1>at times. Right? It's a but on the

00:39:33.135 --> 00:39:35.215
<v Speaker 1>other hand, it you know, we we had

00:39:35.215 --> 00:39:36.975
<v Speaker 1>this bug in CUE a while back, and

00:39:36.975 --> 00:39:38.255
<v Speaker 1>somebody gave us these

00:39:38.900 --> 00:39:41.220
<v Speaker 1>hundreds of files of CUE. Right? Like like,

00:39:41.220 --> 00:39:41.700
<v Speaker 1>thousands

00:39:42.420 --> 00:39:45.140
<v Speaker 1>many thousands of lines generating. It was not

00:39:45.140 --> 00:39:47.140
<v Speaker 1>that big, but generating a hundred thousand, hundred

00:39:47.140 --> 00:39:48.900
<v Speaker 1>20 thousand lines of of

00:39:49.380 --> 00:39:50.340
<v Speaker 1>JSON,

00:39:50.340 --> 00:39:50.580
<v Speaker 1>basically.

00:39:51.775 --> 00:39:54.815
<v Speaker 1>But, you know, it was still complicated enough.

00:39:54.895 --> 00:39:55.455
<v Speaker 1>And

00:39:55.855 --> 00:39:57.855
<v Speaker 1>to prove whether it was a CUE bug

00:39:57.855 --> 00:40:00.095
<v Speaker 1>or a bug in the configuration took about

00:40:00.095 --> 00:40:02.335
<v Speaker 1>one minute. Right? We basically could very quickly

00:40:02.335 --> 00:40:04.610
<v Speaker 1>narrow it down. You could find the two

00:40:04.610 --> 00:40:07.010
<v Speaker 1>relevant lines in the in the queue,

00:40:07.330 --> 00:40:08.850
<v Speaker 1>and you knew that they were just dumping

00:40:08.850 --> 00:40:11.010
<v Speaker 1>all files together. Right? So we just from

00:40:11.010 --> 00:40:12.530
<v Speaker 1>these two lines, we just knew what the

00:40:12.530 --> 00:40:14.850
<v Speaker 1>answer had to be. Right? Like, there's no

00:40:14.850 --> 00:40:17.250
<v Speaker 1>inheritance change to follow. Nothing. Right? Like, it

00:40:17.735 --> 00:40:20.615
<v Speaker 1>was literally one minute to figure that out.

00:40:20.615 --> 00:40:21.415
<v Speaker 1>Right? So

00:40:21.975 --> 00:40:23.175
<v Speaker 1>that's that's,

00:40:23.735 --> 00:40:25.975
<v Speaker 1>yeah, that's something you just just can't forget

00:40:25.975 --> 00:40:27.735
<v Speaker 1>with with GCL, basically.

00:40:28.135 --> 00:40:28.855
<v Speaker 0>Awesome.

00:40:29.415 --> 00:40:31.175
<v Speaker 0>Alright. We've got one more question, and then

00:40:31.175 --> 00:40:33.255
<v Speaker 0>we'll get the my screen shared for some

00:40:32.910 --> 00:40:34.990
<v Speaker 0>live stuff. So Kevin is asking,

00:40:35.549 --> 00:40:37.470
<v Speaker 0>would or could I use CUE to start

00:40:37.470 --> 00:40:39.869
<v Speaker 0>a code gen pipe thing? For example,

00:40:39.950 --> 00:40:43.150
<v Speaker 0>CUE based service definition to generate gRPC code.

00:40:47.675 --> 00:40:49.035
<v Speaker 1>Yeah. So at the moment,

00:40:49.275 --> 00:40:51.035
<v Speaker 1>all the at at least within the CUE

00:40:51.035 --> 00:40:52.635
<v Speaker 1>framework, all the generation

00:40:52.635 --> 00:40:53.275
<v Speaker 1>is

00:40:53.915 --> 00:40:56.155
<v Speaker 1>custom implemented. Right? So gen you can generate

00:40:56.155 --> 00:40:57.515
<v Speaker 1>open API, for example,

00:40:58.490 --> 00:41:00.170
<v Speaker 1>which is part of the way there. But

00:41:00.170 --> 00:41:01.610
<v Speaker 1>for anything custom,

00:41:02.730 --> 00:41:03.770
<v Speaker 1>it's it's

00:41:04.010 --> 00:41:05.690
<v Speaker 1>a a little bit tricky.

00:41:06.170 --> 00:41:08.170
<v Speaker 1>So there are some third party,

00:41:08.730 --> 00:41:11.305
<v Speaker 1>you know, Accenture usage of CUE where, basically,

00:41:11.305 --> 00:41:13.945
<v Speaker 1>they use the the Go templating engine. So

00:41:13.945 --> 00:41:15.305
<v Speaker 1>there's a Go templating

00:41:15.705 --> 00:41:18.185
<v Speaker 1>engine built in, right, to to generate all

00:41:18.185 --> 00:41:19.705
<v Speaker 1>kinds of stuff. Right? So

00:41:20.265 --> 00:41:22.745
<v Speaker 1>I'm less familiar with that, to be honest.

00:41:22.745 --> 00:41:23.145
<v Speaker 1>So it's

00:41:24.490 --> 00:41:27.130
<v Speaker 1>but, you know, there's definitely other people that

00:41:27.130 --> 00:41:29.690
<v Speaker 1>have been working on that. So one of

00:41:29.690 --> 00:41:32.170
<v Speaker 1>the ideas is that at some point, we

00:41:32.170 --> 00:41:34.330
<v Speaker 1>also have a sort of custom

00:41:34.730 --> 00:41:35.770
<v Speaker 1>generation

00:41:36.570 --> 00:41:38.565
<v Speaker 1>packages that you can use to make this

00:41:38.565 --> 00:41:41.365
<v Speaker 1>generation more easy more easily, right, or make

00:41:41.365 --> 00:41:42.245
<v Speaker 1>it more easy.

00:41:43.125 --> 00:41:45.605
<v Speaker 1>But for now, this is all hardcoded.

00:41:45.765 --> 00:41:47.205
<v Speaker 1>But as I said, there are third party

00:41:47.205 --> 00:41:48.005
<v Speaker 1>solutions

00:41:48.005 --> 00:41:49.365
<v Speaker 1>for that that I haven't

00:41:49.920 --> 00:41:52.320
<v Speaker 1>digged in too deeply, to be honest.

00:41:52.800 --> 00:41:54.720
<v Speaker 0>There is the ability to generate

00:41:55.040 --> 00:41:56.960
<v Speaker 0>protobufs, isn't there, I think?

00:41:57.359 --> 00:41:58.560
<v Speaker 0>Or is that a fact of our buff?

00:41:58.640 --> 00:42:00.640
<v Speaker 1>More the so for protobuf right now, it's

00:42:00.640 --> 00:42:02.435
<v Speaker 1>the other way around. Alright. Okay. So we

00:42:02.435 --> 00:42:04.915
<v Speaker 1>we can take proto definitions and turn it

00:42:04.915 --> 00:42:05.795
<v Speaker 1>into CUE.

00:42:06.355 --> 00:42:07.235
<v Speaker 1>0.4

00:42:07.235 --> 00:42:09.475
<v Speaker 1>alpha also generates,

00:42:10.275 --> 00:42:13.235
<v Speaker 1>proto values. Right? But that's that's something else.

00:42:14.835 --> 00:42:16.275
<v Speaker 1>But, yeah, generating

00:42:16.515 --> 00:42:17.555
<v Speaker 1>gRPC

00:42:17.555 --> 00:42:18.570
<v Speaker 1>is is

00:42:18.730 --> 00:42:20.890
<v Speaker 1>very well possible. So the only thing it

00:42:20.890 --> 00:42:22.010
<v Speaker 1>doesn't do yet,

00:42:22.810 --> 00:42:26.410
<v Speaker 1>so so design suggestions are absolutely welcome, is,

00:42:27.130 --> 00:42:29.210
<v Speaker 1>so the service service definitions.

00:42:29.210 --> 00:42:31.130
<v Speaker 1>Right? Like, that's not really done natively in

00:42:31.130 --> 00:42:32.490
<v Speaker 1>in CUE yet. I mean, of course, you

00:42:32.490 --> 00:42:34.455
<v Speaker 1>can model it in data, but you wanna

00:42:34.455 --> 00:42:36.055
<v Speaker 1>have some native representation

00:42:36.055 --> 00:42:37.495
<v Speaker 1>for that in in CUE.

00:42:37.815 --> 00:42:40.535
<v Speaker 1>There's some proposals for that, but narrowing

00:42:40.535 --> 00:42:42.135
<v Speaker 1>it down to what people want would be

00:42:42.135 --> 00:42:43.095
<v Speaker 1>be nice.

00:42:43.735 --> 00:42:46.550
<v Speaker 0>Cool. We have one comment. That's not a

00:42:46.550 --> 00:42:48.310
<v Speaker 0>question, but I'll I'll pop it up anyway.

00:42:48.310 --> 00:42:50.869
<v Speaker 0>Anna says, their docs were previously generated by

00:42:50.869 --> 00:42:53.830
<v Speaker 0>CUE and it worked great. Awesome. Despite your

00:42:53.830 --> 00:42:56.470
<v Speaker 0>initial suspicion, no suspicion. Come on, Anna.

00:42:56.869 --> 00:42:59.255
<v Speaker 0>But the total owner just seemed young. Yeah.

00:42:59.095 --> 00:43:01.175
<v Speaker 0>I guess that's fair. CUE CUE is young,

00:43:01.175 --> 00:43:02.855
<v Speaker 0>but it's evolving quickly and,

00:43:03.815 --> 00:43:05.975
<v Speaker 0>you know, it's it's doing great things. Right?

00:43:06.295 --> 00:43:08.295
<v Speaker 1>Yeah. Yeah. Alright.

00:43:08.295 --> 00:43:10.695
<v Speaker 0>Let's get my screen shared.

00:43:13.670 --> 00:43:15.750
<v Speaker 0>This is the CUE homepage. So if anyone

00:43:15.750 --> 00:43:17.510
<v Speaker 0>wants to, you know, dabble along and play

00:43:17.510 --> 00:43:19.430
<v Speaker 0>with the tutorials themselves, you can find them

00:43:19.430 --> 00:43:21.030
<v Speaker 0>at qlang.org.

00:43:21.510 --> 00:43:23.910
<v Speaker 0>We will pop over to the documentation.

00:43:25.224 --> 00:43:26.744
<v Speaker 0>And I guess we could take a look

00:43:26.744 --> 00:43:29.145
<v Speaker 0>at a few things. So we cover some

00:43:29.145 --> 00:43:31.545
<v Speaker 0>of the the language basics from here, and

00:43:31.545 --> 00:43:33.145
<v Speaker 0>then maybe just try and go a little

00:43:33.145 --> 00:43:35.704
<v Speaker 0>bit deeper before we finish on your slightly

00:43:35.704 --> 00:43:37.065
<v Speaker 0>more advanced demonstration.

00:43:38.430 --> 00:43:39.870
<v Speaker 0>Yep. Okay.

00:43:40.430 --> 00:43:43.310
<v Speaker 0>Alright. Let's just pop into the tutorial. So

00:43:43.310 --> 00:43:46.270
<v Speaker 0>I'll just try and trim this. Hey, that's

00:43:46.270 --> 00:43:47.710
<v Speaker 0>a nice pun for today. I'll trim this

00:43:47.710 --> 00:43:49.230
<v Speaker 0>based on what you've already kind of shown

00:43:49.230 --> 00:43:50.910
<v Speaker 0>as well. So I don't think we need

00:43:50.910 --> 00:43:52.349
<v Speaker 0>to pop into the introduction.

00:43:53.055 --> 00:43:55.214
<v Speaker 0>And I think it probably covered most of

00:43:55.214 --> 00:43:56.255
<v Speaker 0>the types

00:43:57.454 --> 00:43:58.655
<v Speaker 0>and your

00:43:59.055 --> 00:44:00.735
<v Speaker 0>your starter demo. So

00:44:01.615 --> 00:44:03.535
<v Speaker 0>I guess this may be worth mentioning on

00:44:03.535 --> 00:44:04.974
<v Speaker 0>top and bottom. These are things that I

00:44:04.974 --> 00:44:06.415
<v Speaker 0>get I think I tripped up on at

00:44:06.415 --> 00:44:08.130
<v Speaker 0>the start of my my CUE journey. Do

00:44:08.130 --> 00:44:09.089
<v Speaker 0>you wanna give us a little bit of

00:44:09.089 --> 00:44:10.530
<v Speaker 0>introduction to those?

00:44:11.890 --> 00:44:13.730
<v Speaker 0>Like Yeah. So so

00:44:15.410 --> 00:44:17.329
<v Speaker 1>so the way CUE handles it, that it

00:44:17.329 --> 00:44:19.570
<v Speaker 1>always can combine something, is it defines this

00:44:19.570 --> 00:44:20.849
<v Speaker 1>this value

00:44:20.849 --> 00:44:21.410
<v Speaker 1>lattice,

00:44:21.954 --> 00:44:22.755
<v Speaker 1>if you will,

00:44:23.155 --> 00:44:25.155
<v Speaker 1>which basically means that any two values you

00:44:25.155 --> 00:44:27.234
<v Speaker 1>take, whether it's just a integer or an

00:44:27.234 --> 00:44:29.555
<v Speaker 1>entire configuration, if you combine them, there's always

00:44:29.555 --> 00:44:30.755
<v Speaker 1>a single unique,

00:44:31.555 --> 00:44:34.035
<v Speaker 1>answer to this to that. And,

00:44:34.835 --> 00:44:37.170
<v Speaker 1>you know, this is kind of mathematically, you

00:44:37.170 --> 00:44:38.530
<v Speaker 1>don't really have to to know about it

00:44:38.530 --> 00:44:39.730
<v Speaker 1>too much, but then,

00:44:40.930 --> 00:44:43.250
<v Speaker 1>you know, like, the the the value that

00:44:43.250 --> 00:44:45.890
<v Speaker 1>everything combines into ultimately is called bottom.

00:44:46.530 --> 00:44:48.290
<v Speaker 1>And, really, this shouldn't have been put in

00:44:48.290 --> 00:44:49.970
<v Speaker 1>the language, right, like this this sort of

00:44:49.970 --> 00:44:51.425
<v Speaker 1>offensive symbol there.

00:44:51.665 --> 00:44:53.585
<v Speaker 1>Really, we should have just called it error,

00:44:53.585 --> 00:44:55.025
<v Speaker 1>make it a build in where you can

00:44:55.025 --> 00:44:57.185
<v Speaker 1>pass a message as well. Right? And this

00:44:57.185 --> 00:44:58.625
<v Speaker 1>is still something we wanna do,

00:44:59.665 --> 00:45:02.065
<v Speaker 1>which is which is which is easier. Yeah.

00:45:02.305 --> 00:45:03.985
<v Speaker 1>Is there a specific thing you were tripping

00:45:03.985 --> 00:45:05.985
<v Speaker 1>over or or this weird symbol?

00:45:06.680 --> 00:45:08.920
<v Speaker 0>Yeah. I think it was probably just more

00:45:08.920 --> 00:45:11.240
<v Speaker 0>the symbols, you know, especially as I started,

00:45:11.400 --> 00:45:13.960
<v Speaker 0>you know, maybe really great in CUE documents

00:45:13.960 --> 00:45:16.840
<v Speaker 0>and you'd see something, you know, like this

00:45:16.840 --> 00:45:17.240
<v Speaker 0>or

00:45:17.880 --> 00:45:19.560
<v Speaker 0>I don't know. To me, it just didn't

00:45:19.720 --> 00:45:20.920
<v Speaker 0>it wasn't intuitive.

00:45:21.400 --> 00:45:21.720
<v Speaker 1>Yeah.

00:45:22.244 --> 00:45:24.645
<v Speaker 0>Oh, no. That's not it. Yeah.

00:45:24.805 --> 00:45:26.484
<v Speaker 0>I can't even remember. Yeah. But

00:45:27.765 --> 00:45:29.605
<v Speaker 0>I think it just it confused me at

00:45:29.605 --> 00:45:31.045
<v Speaker 0>first. It just took a

00:45:32.164 --> 00:45:34.484
<v Speaker 0>little bit of understanding and that when I

00:45:34.484 --> 00:45:36.599
<v Speaker 0>give something to CUE that it that it

00:45:36.599 --> 00:45:38.440
<v Speaker 0>is trying to turn it into a concrete

00:45:38.440 --> 00:45:40.599
<v Speaker 0>value. And then when I started to understand

00:45:40.599 --> 00:45:42.440
<v Speaker 0>that that was happening and then validating it,

00:45:42.440 --> 00:45:44.440
<v Speaker 0>I guess, by doing that, think things started

00:45:44.440 --> 00:45:45.800
<v Speaker 0>to get a little bit easier.

00:45:47.160 --> 00:45:48.520
<v Speaker 0>Yeah. Hello. I'm

00:45:48.995 --> 00:45:51.155
<v Speaker 0>I'm still very much learning CUE.

00:45:51.235 --> 00:45:52.755
<v Speaker 0>Every day I learn something new, which is

00:45:52.755 --> 00:45:54.195
<v Speaker 0>great. We

00:45:54.195 --> 00:45:55.315
<v Speaker 1>all do. Yeah.

00:45:56.115 --> 00:45:59.315
<v Speaker 0>Alright. So numbers and strings, those are all

00:45:59.315 --> 00:45:59.715
<v Speaker 0>covered.

00:46:01.050 --> 00:46:02.330
<v Speaker 0>We talked about,

00:46:02.490 --> 00:46:04.650
<v Speaker 0>you know, you mentioned concrete values and closed

00:46:04.650 --> 00:46:07.210
<v Speaker 0>values and stuff. Should we cover just a

00:46:07.210 --> 00:46:08.650
<v Speaker 0>little bit about this? Maybe we should create

00:46:08.650 --> 00:46:10.730
<v Speaker 0>like a little document with a schema to

00:46:10.730 --> 00:46:13.610
<v Speaker 0>actually explain these values. Yeah. So let me

00:46:13.610 --> 00:46:14.810
<v Speaker 0>do a main dot queue.

00:46:16.724 --> 00:46:18.805
<v Speaker 0>Okay. So you've already shown off like,

00:46:19.684 --> 00:46:22.244
<v Speaker 0>we can do something like this, which has

00:46:22.244 --> 00:46:24.885
<v Speaker 0>a default value. The default values are

00:46:25.204 --> 00:46:27.125
<v Speaker 0>star based. So I could do

00:46:27.605 --> 00:46:28.885
<v Speaker 0>this. Right? This is

00:46:29.460 --> 00:46:31.140
<v Speaker 0>valid queue document. Let me get a terminal.

00:46:31.140 --> 00:46:32.980
<v Speaker 1>You you don't need the outer curly braces,

00:46:32.980 --> 00:46:34.340
<v Speaker 1>by the way? Just to say. I think

00:46:34.340 --> 00:46:36.340
<v Speaker 0>that's just a nasty habit. I've I've actually

00:46:36.500 --> 00:46:38.660
<v Speaker 1>Yeah. Well, it's not necessarily nasty.

00:46:38.900 --> 00:46:40.740
<v Speaker 0>Yeah. I don't know why I do that.

00:46:40.740 --> 00:46:42.260
<v Speaker 0>I think we're I don't know.

00:46:43.505 --> 00:46:45.345
<v Speaker 0>So we can do an eval on main

00:46:45.345 --> 00:46:47.185
<v Speaker 0>dot queue, and then we see that the

00:46:47.185 --> 00:46:49.585
<v Speaker 0>name is coming out with David with that.

00:46:49.905 --> 00:46:51.185
<v Speaker 0>And I think one of the things that

00:46:51.185 --> 00:46:53.425
<v Speaker 0>I also struggled with when I'm first starting

00:46:53.425 --> 00:46:55.265
<v Speaker 0>with CUE, this is gonna just be my,

00:46:55.265 --> 00:46:57.540
<v Speaker 0>I think, my eating session of all the

00:46:57.540 --> 00:46:59.700
<v Speaker 0>things I learned the hard way, is that,

00:47:00.100 --> 00:47:01.620
<v Speaker 0>you know, you can

00:47:02.020 --> 00:47:03.460
<v Speaker 0>bring things in. I don't know why I

00:47:03.460 --> 00:47:05.620
<v Speaker 0>picked John. I really should have picked Marcel.

00:47:06.580 --> 00:47:09.395
<v Speaker 0>Is that I could bring oh, there we

00:47:09.395 --> 00:47:09.875
<v Speaker 0>go.

00:47:10.355 --> 00:47:11.875
<v Speaker 0>Is that we can bring in new values?

00:47:11.875 --> 00:47:14.915
<v Speaker 0>And this this whole concept of the constraints

00:47:14.915 --> 00:47:16.675
<v Speaker 0>living next to the actual data that I've

00:47:16.675 --> 00:47:18.515
<v Speaker 0>got just took a little for me to

00:47:18.515 --> 00:47:21.474
<v Speaker 0>become more accustomed to. Like, to understand that

00:47:21.474 --> 00:47:23.955
<v Speaker 0>these were unified to give something that I

00:47:23.955 --> 00:47:24.595
<v Speaker 0>could export

00:47:25.290 --> 00:47:26.650
<v Speaker 0>Took a little while for me.

00:47:27.210 --> 00:47:28.730
<v Speaker 1>Yeah. The the default thing is a bit

00:47:28.730 --> 00:47:31.770
<v Speaker 1>weird, but and the original formalism that I

00:47:31.770 --> 00:47:33.850
<v Speaker 1>worked with so so Michael asked, have I

00:47:33.850 --> 00:47:36.570
<v Speaker 1>ever wondered what this work with or exposed

00:47:36.570 --> 00:47:39.955
<v Speaker 1>to description logic? So not specifically many types

00:47:39.955 --> 00:47:42.035
<v Speaker 1>of logic, and the symbol definitely comes from

00:47:42.035 --> 00:47:43.155
<v Speaker 1>from logic,

00:47:43.875 --> 00:47:44.835
<v Speaker 1>absolutely.

00:47:45.555 --> 00:47:46.195
<v Speaker 1>But

00:47:48.595 --> 00:47:50.595
<v Speaker 1>yeah. So so so the

00:47:50.595 --> 00:47:52.435
<v Speaker 1>the form systems I originally worked with did

00:47:52.435 --> 00:47:54.470
<v Speaker 1>not have these defaults. But for, like, cloud

00:47:54.470 --> 00:47:55.270
<v Speaker 1>configuration

00:47:55.270 --> 00:47:57.030
<v Speaker 1>and many types of configuration,

00:47:57.589 --> 00:47:59.270
<v Speaker 1>you really do need this.

00:47:59.829 --> 00:48:02.470
<v Speaker 1>And this is CUE's CUE's way of cheating.

00:48:02.470 --> 00:48:04.549
<v Speaker 1>So, really, this is one level of of

00:48:04.549 --> 00:48:07.109
<v Speaker 1>of, this is basically a override. Right? So

00:48:07.109 --> 00:48:08.390
<v Speaker 1>this is an overlay, if you will. But

00:48:08.390 --> 00:48:09.430
<v Speaker 1>you basically only have

00:48:09.945 --> 00:48:12.905
<v Speaker 1>one level, plus it's very clearly marked that

00:48:12.905 --> 00:48:14.905
<v Speaker 1>this value might change. Right? So if you

00:48:14.905 --> 00:48:16.745
<v Speaker 1>see star David and string,

00:48:16.985 --> 00:48:18.505
<v Speaker 1>you know there might be another value that

00:48:18.505 --> 00:48:20.585
<v Speaker 1>overrides it. Or if you see Marcel, you

00:48:20.585 --> 00:48:22.320
<v Speaker 1>know that that's it. Right?

00:48:23.120 --> 00:48:24.160
<v Speaker 1>But, yeah, that is a bit

00:48:25.280 --> 00:48:27.280
<v Speaker 1>but this basically allows us to get away

00:48:27.280 --> 00:48:29.200
<v Speaker 1>with inheritance and still be able to reduce

00:48:29.200 --> 00:48:30.400
<v Speaker 1>a lot of boilerplate.

00:48:31.120 --> 00:48:33.120
<v Speaker 0>Yeah. And that one level of override just

00:48:33.120 --> 00:48:35.185
<v Speaker 0>means that that I can't then come back

00:48:35.185 --> 00:48:37.744
<v Speaker 0>in again and change this value because it's

00:48:37.744 --> 00:48:40.305
<v Speaker 0>it's already concrete. Is that the right terminology

00:48:40.305 --> 00:48:41.265
<v Speaker 0>at this stage?

00:48:41.585 --> 00:48:45.105
<v Speaker 0>Yep. Alright. Okay. Yeah. Have two conflicting values.

00:48:45.105 --> 00:48:45.345
<v Speaker 1>Yeah.

00:48:46.470 --> 00:48:48.710
<v Speaker 0>We had a comment from Paul, but I'm

00:48:48.710 --> 00:48:50.230
<v Speaker 0>not sure if this was maybe related to

00:48:50.230 --> 00:48:52.630
<v Speaker 0>the gRPC questions. I will just put it

00:48:52.630 --> 00:48:53.910
<v Speaker 0>on the screen anyway.

00:48:54.070 --> 00:48:55.350
<v Speaker 0>But Paul is suggesting

00:48:55.590 --> 00:48:57.430
<v Speaker 0>in get pretty far using template and using

00:48:57.430 --> 00:48:58.790
<v Speaker 0>cue string interpolation,

00:48:58.790 --> 00:49:00.550
<v Speaker 0>which has the added benefit over go text

00:49:00.550 --> 00:49:01.030
<v Speaker 0>template.

00:49:02.435 --> 00:49:03.075
<v Speaker 0>Yeah.

00:49:04.115 --> 00:49:04.835
<v Speaker 0>Okay.

00:49:05.155 --> 00:49:08.195
<v Speaker 1>Yep. Yeah. CUE has pretty nice multiline strings.

00:49:08.195 --> 00:49:10.995
<v Speaker 1>So this is taken from Swift, actually, which

00:49:10.995 --> 00:49:11.555
<v Speaker 1>is,

00:49:12.915 --> 00:49:14.275
<v Speaker 1>yeah, pretty powerful.

00:49:14.835 --> 00:49:16.275
<v Speaker 0>Is that these raw strings here?

00:49:20.070 --> 00:49:21.990
<v Speaker 1>Yeah. I didn't know I actually already had

00:49:21.990 --> 00:49:23.990
<v Speaker 1>a tutorial about it. It's like, yes. That's

00:49:23.990 --> 00:49:24.470
<v Speaker 1>it.

00:49:25.349 --> 00:49:27.750
<v Speaker 0>Yes. So we get the description

00:49:28.950 --> 00:49:31.030
<v Speaker 0>with the one to I've never used this.

00:49:34.125 --> 00:49:36.045
<v Speaker 0>This is a

00:49:36.205 --> 00:49:36.765
<v Speaker 0>long

00:49:37.165 --> 00:49:38.045
<v Speaker 0>string.

00:49:38.605 --> 00:49:39.965
<v Speaker 1>Now you need to close it with two

00:49:39.965 --> 00:49:41.005
<v Speaker 1>hashes also.

00:49:41.805 --> 00:49:42.445
<v Speaker 1>Yeah.

00:49:43.645 --> 00:49:45.725
<v Speaker 1>So you don't need the two hashes. The

00:49:45.725 --> 00:49:49.029
<v Speaker 1>two hashes basically escape the escape character. Right?

00:49:49.029 --> 00:49:50.789
<v Speaker 1>So you can you'd now need with two

00:49:50.789 --> 00:49:53.750
<v Speaker 1>hashes, you need backslash hash hash

00:49:53.910 --> 00:49:55.190
<v Speaker 1>to to escape.

00:49:55.430 --> 00:49:57.910
<v Speaker 1>Right. So I think the idea originally comes

00:49:57.910 --> 00:50:00.549
<v Speaker 1>from Rust and then Swift modified it.

00:50:01.674 --> 00:50:02.395
<v Speaker 0>Yeah.

00:50:03.434 --> 00:50:05.994
<v Speaker 0>I think Rust does have Rust looks little

00:50:05.994 --> 00:50:08.474
<v Speaker 1>bit different. Yeah. Exactly. It's

00:50:08.474 --> 00:50:09.994
<v Speaker 1>it's the same principle, though.

00:50:11.355 --> 00:50:13.434
<v Speaker 0>Okay. So we also were taking a look

00:50:13.434 --> 00:50:15.515
<v Speaker 0>just there at this concept of, like, a

00:50:15.515 --> 00:50:18.020
<v Speaker 0>closed struct and structures in general. So why

00:50:18.020 --> 00:50:20.580
<v Speaker 0>don't we just define like a simple structure

00:50:20.660 --> 00:50:22.900
<v Speaker 0>and then try and understand the dynamics of

00:50:22.900 --> 00:50:24.500
<v Speaker 0>what does it mean to be closed or

00:50:24.500 --> 00:50:25.540
<v Speaker 0>or not closed.

00:50:27.460 --> 00:50:30.660
<v Speaker 0>CUE uses the hash symbol or pound symbol,

00:50:30.660 --> 00:50:31.460
<v Speaker 0>whatever you call it,

00:50:32.235 --> 00:50:33.675
<v Speaker 0>to define structs

00:50:33.915 --> 00:50:34.715
<v Speaker 0>like this.

00:50:34.955 --> 00:50:37.355
<v Speaker 0>And then those can have any arbitrary properties

00:50:37.355 --> 00:50:39.755
<v Speaker 0>in it. Again, I could do something like

00:50:40.955 --> 00:50:41.595
<v Speaker 0>this.

00:50:42.155 --> 00:50:42.795
<v Speaker 0>Now,

00:50:43.435 --> 00:50:45.915
<v Speaker 0>what is special about a definition in CUE

00:50:45.915 --> 00:50:47.515
<v Speaker 0>versus like a normal struct?

00:50:49.570 --> 00:50:53.170
<v Speaker 0>Is there? It's

00:50:54.210 --> 00:50:56.450
<v Speaker 1>well, it's it's just really like any queue

00:50:56.450 --> 00:50:57.570
<v Speaker 1>value, but

00:50:58.609 --> 00:51:01.505
<v Speaker 1>we conflated a few of the concepts there,

00:51:01.505 --> 00:51:03.025
<v Speaker 1>which which generally is a very bad thing

00:51:03.025 --> 00:51:04.465
<v Speaker 1>to do. But in this case, I think

00:51:04.465 --> 00:51:05.905
<v Speaker 1>it was the right choice.

00:51:06.785 --> 00:51:08.625
<v Speaker 1>So if it starts with a hash,

00:51:09.025 --> 00:51:11.505
<v Speaker 1>that basically means so it's a definition that

00:51:11.505 --> 00:51:13.585
<v Speaker 1>basically means it's recursively closed.

00:51:15.430 --> 00:51:17.590
<v Speaker 1>But, really, if you define an API, it

00:51:17.590 --> 00:51:19.190
<v Speaker 1>really shouldn't be closed. Right? Like, you want

00:51:19.190 --> 00:51:20.870
<v Speaker 1>APIs to be extensible.

00:51:21.270 --> 00:51:21.830
<v Speaker 1>So,

00:51:22.150 --> 00:51:22.790
<v Speaker 1>basically,

00:51:23.190 --> 00:51:25.670
<v Speaker 1>the recursive closeness is just for the purpose

00:51:25.670 --> 00:51:27.590
<v Speaker 1>of error checking. So you can compare it

00:51:27.590 --> 00:51:30.395
<v Speaker 1>to proto buff. So if you, have a

00:51:30.395 --> 00:51:33.515
<v Speaker 1>proto definition, right, that you, convert to Go

00:51:33.755 --> 00:51:35.595
<v Speaker 1>and you have a unknown field, right, like,

00:51:35.595 --> 00:51:37.595
<v Speaker 1>you you you cannot basically access an unknown

00:51:37.595 --> 00:51:39.515
<v Speaker 1>field within this generated Go code. That's a

00:51:39.515 --> 00:51:40.475
<v Speaker 1>compile error.

00:51:40.715 --> 00:51:42.715
<v Speaker 1>And that's really how you should see structs

00:51:42.715 --> 00:51:43.355
<v Speaker 1>within CUE.

00:51:43.790 --> 00:51:46.109
<v Speaker 1>Right? Even though the proto, in theory, should

00:51:46.109 --> 00:51:47.790
<v Speaker 1>allow other fields as well, and it shouldn't

00:51:47.790 --> 00:51:49.070
<v Speaker 1>be an error if you have an incoming

00:51:49.070 --> 00:51:50.590
<v Speaker 1>message to get other fields,

00:51:51.390 --> 00:51:53.550
<v Speaker 1>you do wanna have that type checking within

00:51:53.550 --> 00:51:55.230
<v Speaker 1>your code. Right? And this is exactly what

00:51:55.230 --> 00:51:57.405
<v Speaker 1>a definition does. Right? So it's open in

00:51:57.405 --> 00:51:59.165
<v Speaker 1>principle but type checked.

00:51:59.565 --> 00:52:01.805
<v Speaker 1>It's it's signals queue to type checkers for

00:52:01.805 --> 00:52:03.405
<v Speaker 1>for, you know, like, in in a closed

00:52:03.405 --> 00:52:04.045
<v Speaker 1>setting.

00:52:04.205 --> 00:52:06.285
<v Speaker 1>That's really what this is. Does that make

00:52:06.285 --> 00:52:06.845
<v Speaker 1>sense?

00:52:07.405 --> 00:52:09.165
<v Speaker 0>Okay. Yes. Thank you.

00:52:09.565 --> 00:52:10.925
<v Speaker 0>I I think one of the things that

00:52:10.925 --> 00:52:12.205
<v Speaker 0>also tripped me up and

00:52:13.080 --> 00:52:14.440
<v Speaker 0>oh, no, that didn't do it. Oh, it's

00:52:14.440 --> 00:52:15.480
<v Speaker 0>export. Right?

00:52:16.440 --> 00:52:17.240
<v Speaker 0>Is it

00:52:17.720 --> 00:52:18.280
<v Speaker 0>yeah.

00:52:18.600 --> 00:52:21.400
<v Speaker 0>These kind of definitions don't come out the

00:52:21.400 --> 00:52:23.160
<v Speaker 0>other side as well as like there's a

00:52:23.160 --> 00:52:25.320
<v Speaker 0>concept of a private field as well,

00:52:25.800 --> 00:52:27.480
<v Speaker 0>something like this, which also

00:52:28.215 --> 00:52:30.455
<v Speaker 0>doesn't come out in the data. I think

00:52:30.775 --> 00:52:31.975
<v Speaker 0>I guess what I'm saying is my biggest

00:52:31.975 --> 00:52:33.815
<v Speaker 0>hurdle was just this these two things living

00:52:33.815 --> 00:52:35.175
<v Speaker 0>by the side by side. And it just

00:52:35.175 --> 00:52:36.455
<v Speaker 0>took a little while to get used to.

00:52:36.455 --> 00:52:37.575
<v Speaker 0>So I guess I'm just trying to make

00:52:37.575 --> 00:52:39.415
<v Speaker 0>that clear for the people that are watching

00:52:39.415 --> 00:52:41.335
<v Speaker 0>that, you know, these are things that can

00:52:41.335 --> 00:52:43.420
<v Speaker 0>trip you up, but they're very they work

00:52:43.420 --> 00:52:45.660
<v Speaker 0>pretty well when you understand that. Yeah. One

00:52:45.660 --> 00:52:47.900
<v Speaker 1>obvious thing that's missing from the documentation is

00:52:47.900 --> 00:52:49.740
<v Speaker 1>sort of an explanation of what all the

00:52:49.740 --> 00:52:52.780
<v Speaker 1>prefixes mean. Right? So there's underscore and hash.

00:52:53.100 --> 00:52:54.700
<v Speaker 1>So you also see dollar sign, which really

00:52:54.700 --> 00:52:56.700
<v Speaker 1>doesn't mean anything to CUE. It's it's just,

00:52:56.700 --> 00:52:58.220
<v Speaker 1>you know, JSON schema thing.

00:52:59.305 --> 00:53:01.545
<v Speaker 1>So but, basically, just a short description, like,

00:53:01.545 --> 00:53:03.225
<v Speaker 1>what what do these things mean and and,

00:53:03.225 --> 00:53:04.585
<v Speaker 1>like, why are they there and how should

00:53:04.585 --> 00:53:06.025
<v Speaker 1>you interpret it? Right? That would be very

00:53:06.025 --> 00:53:07.625
<v Speaker 1>helpful just at the very start.

00:53:09.305 --> 00:53:12.265
<v Speaker 0>Yeah. So and and your opinion then, like,

00:53:12.265 --> 00:53:12.505
<v Speaker 0>you know,

00:53:14.390 --> 00:53:16.230
<v Speaker 0>people have configuration,

00:53:16.310 --> 00:53:17.830
<v Speaker 0>you know, as a substrate for pretty much

00:53:17.830 --> 00:53:19.190
<v Speaker 0>all of our applications. We need to be

00:53:19.190 --> 00:53:20.950
<v Speaker 0>able to configure things regardless if we're deploying

00:53:20.950 --> 00:53:22.710
<v Speaker 0>to Kubernetes or we're deploying

00:53:23.030 --> 00:53:25.430
<v Speaker 0>using cloud formation or any of these Terraform

00:53:25.430 --> 00:53:27.030
<v Speaker 0>style syntaxes and stuff.

00:53:27.270 --> 00:53:27.510
<v Speaker 0>Like,

00:53:28.475 --> 00:53:31.115
<v Speaker 0>is CUE something that people should adopt

00:53:31.115 --> 00:53:34.155
<v Speaker 0>to define the constraints and validate those configurations?

00:53:34.155 --> 00:53:36.075
<v Speaker 0>Or is the eventual goal just to have

00:53:36.075 --> 00:53:38.235
<v Speaker 0>CUE being the actual

00:53:39.195 --> 00:53:41.435
<v Speaker 0>config layer too? Does that make sense?

00:53:42.650 --> 00:53:44.890
<v Speaker 1>Yes. Well, so so there's

00:53:45.290 --> 00:53:46.970
<v Speaker 1>multiple things to it. I think when it

00:53:46.970 --> 00:53:49.290
<v Speaker 1>comes to pure data specification,

00:53:50.170 --> 00:53:52.010
<v Speaker 1>I'm not sure if you would wanna send

00:53:52.010 --> 00:53:53.610
<v Speaker 1>CUE over the wire

00:53:53.770 --> 00:53:56.345
<v Speaker 1>per se. Right? Like, you wanted something, like,

00:53:56.345 --> 00:53:59.545
<v Speaker 1>really dumb and simple like like JSON.

00:54:00.185 --> 00:54:02.425
<v Speaker 1>Dumb and simple is good here. Right?

00:54:04.025 --> 00:54:04.905
<v Speaker 1>But for

00:54:05.785 --> 00:54:07.385
<v Speaker 1>yeah. And then and then also, a lot

00:54:07.385 --> 00:54:09.145
<v Speaker 1>of people don't need to specify more than

00:54:09.145 --> 00:54:09.545
<v Speaker 1>a few

00:54:10.240 --> 00:54:12.480
<v Speaker 1>lines of configuration. Right? And then they really

00:54:12.480 --> 00:54:14.080
<v Speaker 1>should do it in what they're whatever they're

00:54:14.080 --> 00:54:16.080
<v Speaker 1>comfortable with. But anything sort of on top

00:54:16.080 --> 00:54:17.200
<v Speaker 1>of that if you start

00:54:17.440 --> 00:54:20.160
<v Speaker 1>defining constraints or even, you know, as as

00:54:20.160 --> 00:54:22.800
<v Speaker 1>a specifying data to meet CUE is is

00:54:22.800 --> 00:54:24.984
<v Speaker 1>much nicer than than YAML, for example. Right?

00:54:24.984 --> 00:54:26.744
<v Speaker 1>Like, I have I have the auto formatting,

00:54:26.744 --> 00:54:28.505
<v Speaker 1>auto indent, which is kinda hard to do

00:54:28.505 --> 00:54:29.625
<v Speaker 1>in YAML. Right?

00:54:30.825 --> 00:54:32.665
<v Speaker 1>So so for me, it's it's it's much

00:54:32.665 --> 00:54:33.385
<v Speaker 1>nicer

00:54:33.465 --> 00:54:35.465
<v Speaker 1>to specify data in it, but it's that

00:54:35.465 --> 00:54:37.145
<v Speaker 1>shouldn't be a requirement,

00:54:37.305 --> 00:54:38.265
<v Speaker 1>right, to to do.

00:54:39.160 --> 00:54:40.920
<v Speaker 1>But, yeah, policy

00:54:40.920 --> 00:54:41.880
<v Speaker 1>validation,

00:54:41.960 --> 00:54:43.160
<v Speaker 1>all that stuff. Yeah.

00:54:44.520 --> 00:54:46.440
<v Speaker 0>Okay. I guess we'll we'll cover a few

00:54:46.440 --> 00:54:49.080
<v Speaker 0>more basic things, and then we'll maybe we'll

00:54:49.080 --> 00:54:51.215
<v Speaker 0>work our way through the Kubernetes tutorial. Tutorial.

00:54:51.215 --> 00:54:53.455
<v Speaker 0>So once we have definitions like this, we

00:54:53.455 --> 00:54:55.935
<v Speaker 0>can begin to to use these definitions

00:54:57.055 --> 00:54:58.095
<v Speaker 0>like so.

00:54:59.215 --> 00:55:01.775
<v Speaker 0>And that's the finds key constructs, which can

00:55:01.775 --> 00:55:04.015
<v Speaker 0>have a list of any number of definitions

00:55:04.015 --> 00:55:06.619
<v Speaker 0>of structs. And I'm already hitting myself for

00:55:06.619 --> 00:55:08.300
<v Speaker 0>the per naming on this, but

00:55:10.380 --> 00:55:12.140
<v Speaker 0>we can now say that this is a

00:55:12.140 --> 00:55:14.460
<v Speaker 0>list which has an object.

00:55:14.460 --> 00:55:16.300
<v Speaker 0>Hopefully I'm not gonna mess this up,

00:55:16.779 --> 00:55:18.380
<v Speaker 0>which has age. And I'm gonna get this

00:55:18.380 --> 00:55:19.885
<v Speaker 0>wrong on purpose just like you did in

00:55:19.885 --> 00:55:20.685
<v Speaker 0>your demo.

00:55:21.965 --> 00:55:22.685
<v Speaker 0>Zero.

00:55:24.365 --> 00:55:25.005
<v Speaker 0>So

00:55:25.325 --> 00:55:27.005
<v Speaker 0>I should, I believe,

00:55:27.485 --> 00:55:29.085
<v Speaker 0>be able to run an eval on this

00:55:29.085 --> 00:55:30.765
<v Speaker 0>and we should see an error saying that

00:55:30.765 --> 00:55:33.990
<v Speaker 0>the first value, enter a list of structs

00:55:33.990 --> 00:55:36.230
<v Speaker 0>is invalid because the age is the wrong

00:55:36.230 --> 00:55:38.550
<v Speaker 0>type to find in the definition here.

00:55:39.350 --> 00:55:40.470
<v Speaker 0>That look okay?

00:55:41.030 --> 00:55:42.390
<v Speaker 0>Yep. We'll find out.

00:55:42.870 --> 00:55:44.150
<v Speaker 0>There we go. Cool.

00:55:44.390 --> 00:55:45.830
<v Speaker 0>And if I set that to 21,

00:55:47.765 --> 00:55:49.765
<v Speaker 0>we get our structure at the other end,

00:55:49.765 --> 00:55:51.845
<v Speaker 0>but we if I export that, we can

00:55:51.845 --> 00:55:53.605
<v Speaker 0>remove all of the private information and just

00:55:53.605 --> 00:55:54.725
<v Speaker 0>get the raw data.

00:55:55.285 --> 00:55:55.765
<v Speaker 0>Cool.

00:55:56.165 --> 00:55:57.605
<v Speaker 0>I didn't mess it up too badly.

00:55:59.045 --> 00:56:01.160
<v Speaker 0>Is there anything else you think is worth

00:56:01.160 --> 00:56:02.839
<v Speaker 0>covering from this list before you do the

00:56:02.839 --> 00:56:03.960
<v Speaker 0>Kubernetes one?

00:56:04.680 --> 00:56:05.400
<v Speaker 1>Maybe,

00:56:07.480 --> 00:56:09.160
<v Speaker 1>like, disjunctions or bounds.

00:56:13.625 --> 00:56:14.665
<v Speaker 0>Yes.

00:56:17.705 --> 00:56:20.585
<v Speaker 0>Okay. So shall we add a disjunctions? So

00:56:20.585 --> 00:56:21.545
<v Speaker 0>we say that

00:56:22.105 --> 00:56:25.224
<v Speaker 0>our really terribly named structure here could only

00:56:25.224 --> 00:56:25.705
<v Speaker 0>have

00:56:26.369 --> 00:56:28.690
<v Speaker 0>two values and because we are here,

00:56:28.849 --> 00:56:29.650
<v Speaker 0>we'll do

00:56:29.890 --> 00:56:30.609
<v Speaker 0>this.

00:56:30.690 --> 00:56:32.450
<v Speaker 0>This is what we call a disjunction. I

00:56:32.450 --> 00:56:34.210
<v Speaker 0>think of a calculator there kind of threw

00:56:34.210 --> 00:56:35.650
<v Speaker 0>me at first. Do wanna just talk about

00:56:35.650 --> 00:56:36.609
<v Speaker 0>that if you don't mind?

00:56:37.089 --> 00:56:39.965
<v Speaker 1>Talk about what? So disjunction, is is this

00:56:39.965 --> 00:56:41.245
<v Speaker 0>from the mathematical

00:56:41.245 --> 00:56:42.925
<v Speaker 0>concept of the the thing here, or does

00:56:42.925 --> 00:56:44.205
<v Speaker 0>that come from somewhere else?

00:56:44.525 --> 00:56:45.885
<v Speaker 1>Yeah. It's it's basically

00:56:46.125 --> 00:56:47.965
<v Speaker 1>being able to say something can be an

00:56:47.965 --> 00:56:50.205
<v Speaker 1>integer or a string or one of two

00:56:50.205 --> 00:56:52.125
<v Speaker 1>values. And because q

00:56:52.850 --> 00:56:54.450
<v Speaker 1>it's it's a little bit hard to name

00:56:54.450 --> 00:56:57.250
<v Speaker 1>this construct, right, because CUE unifies types and

00:56:57.250 --> 00:56:57.970
<v Speaker 1>values.

00:56:58.930 --> 00:57:01.090
<v Speaker 1>So if if it were defined on values,

00:57:01.090 --> 00:57:02.530
<v Speaker 1>you would call it an enum.

00:57:02.930 --> 00:57:04.690
<v Speaker 1>Right? And if you if you if it's

00:57:04.690 --> 00:57:06.865
<v Speaker 1>a, you know, a programming

00:57:06.865 --> 00:57:08.865
<v Speaker 1>language type, you would call this a sum

00:57:08.865 --> 00:57:09.425
<v Speaker 1>type.

00:57:09.825 --> 00:57:11.424
<v Speaker 1>Right? So it really depends on what you

00:57:11.424 --> 00:57:13.505
<v Speaker 1>use it for. Also, you can use it

00:57:13.505 --> 00:57:15.425
<v Speaker 1>for if you're looking up in a map

00:57:15.664 --> 00:57:17.585
<v Speaker 1>and you you you want that to succeed,

00:57:17.500 --> 00:57:19.340
<v Speaker 1>you can say this is the default value

00:57:19.340 --> 00:57:21.180
<v Speaker 1>or or, you know, this is the

00:57:21.820 --> 00:57:23.660
<v Speaker 1>if everything goes well, I wanna take the

00:57:23.660 --> 00:57:25.580
<v Speaker 1>map lookup. But if it fails, I wanna

00:57:25.580 --> 00:57:26.860
<v Speaker 1>take a default value.

00:57:27.260 --> 00:57:28.860
<v Speaker 1>So that's like no coalescing.

00:57:28.860 --> 00:57:30.620
<v Speaker 1>You can do that too. Right? So,

00:57:31.085 --> 00:57:32.845
<v Speaker 1>So really because it unifies

00:57:32.845 --> 00:57:36.125
<v Speaker 1>everything, it's this one operation for for many

00:57:36.125 --> 00:57:36.925
<v Speaker 1>purposes,

00:57:37.325 --> 00:57:39.484
<v Speaker 1>which makes it hard to name. Right? But

00:57:39.484 --> 00:57:41.325
<v Speaker 1>disjunction is a very generic

00:57:41.724 --> 00:57:44.000
<v Speaker 1>name for these kind of things. Yeah. It

00:57:44.320 --> 00:57:46.000
<v Speaker 0>because I think all of the challenges I

00:57:46.000 --> 00:57:48.560
<v Speaker 0>had with CUE was pretty much they're all

00:57:48.560 --> 00:57:50.560
<v Speaker 0>my fault. It's that I probably didn't spend

00:57:50.560 --> 00:57:52.800
<v Speaker 0>enough time going through the documentation, looking at

00:57:52.800 --> 00:57:53.760
<v Speaker 0>the vocabulary,

00:57:53.760 --> 00:57:55.200
<v Speaker 0>understanding the syntax.

00:57:55.359 --> 00:57:56.960
<v Speaker 0>You know? I I pretty much just started

00:57:56.960 --> 00:57:59.305
<v Speaker 0>writing CUE and using eval and export export

00:57:59.305 --> 00:58:01.865
<v Speaker 0>loops manually, like like print lane debugging, I

00:58:01.865 --> 00:58:03.465
<v Speaker 0>guess, in a weird way. And it's not

00:58:03.465 --> 00:58:05.145
<v Speaker 0>until I see the error, you know, if

00:58:05.145 --> 00:58:07.065
<v Speaker 0>weekly set this to David two and run

00:58:07.065 --> 00:58:07.945
<v Speaker 0>that eval.

00:58:09.545 --> 00:58:11.465
<v Speaker 0>I was just oh, yeah. It's not until

00:58:11.465 --> 00:58:13.145
<v Speaker 0>I seen them that, you know, the word

00:58:13.145 --> 00:58:15.180
<v Speaker 0>disjunction here as, oh, And it just you

00:58:15.180 --> 00:58:17.020
<v Speaker 0>know, if you've not used that language before,

00:58:17.020 --> 00:58:18.540
<v Speaker 0>I guess it it threw me a little

00:58:18.540 --> 00:58:21.099
<v Speaker 0>bit. But, again, my own fault for not

00:58:21.099 --> 00:58:23.660
<v Speaker 0>spending enough time in the documentation. Yeah. It's

00:58:25.180 --> 00:58:26.619
<v Speaker 1>what I would do. I mean, with the

00:58:26.619 --> 00:58:27.339
<v Speaker 1>terminology,

00:58:28.255 --> 00:58:30.015
<v Speaker 1>You know, maybe these RMS just could be

00:58:30.015 --> 00:58:32.415
<v Speaker 1>made more earthly, but yeah.

00:58:34.095 --> 00:58:34.735
<v Speaker 0>Yeah.

00:58:34.974 --> 00:58:36.575
<v Speaker 0>So we can we can fix that, and

00:58:36.575 --> 00:58:38.255
<v Speaker 0>now we're we're back to have them working.

00:58:38.255 --> 00:58:40.415
<v Speaker 0>So this this pipe symbols, the ability to

00:58:40.415 --> 00:58:42.950
<v Speaker 0>specify that it can be one of multiple

00:58:42.950 --> 00:58:44.630
<v Speaker 0>types, one of multiple values,

00:58:45.349 --> 00:58:47.270
<v Speaker 0>it's a it's a junction. Cool.

00:58:48.390 --> 00:58:50.390
<v Speaker 0>And you also mentioned bounds. Is that just

00:58:50.390 --> 00:58:53.510
<v Speaker 0>like Yeah. Minimax It's simpler simpler thing, but

00:58:53.510 --> 00:58:54.710
<v Speaker 1>it's

00:58:54.710 --> 00:58:56.470
<v Speaker 1>it's an interesting concept, right, that you can

00:58:56.470 --> 00:58:57.030
<v Speaker 1>say

00:58:57.755 --> 00:58:59.995
<v Speaker 1>so you can compare you you have comparators,

00:58:59.995 --> 00:59:01.435
<v Speaker 1>right, like in any other language. You can

00:59:01.435 --> 00:59:01.995
<v Speaker 1>say,

00:59:02.315 --> 00:59:04.395
<v Speaker 1>you know, a is greater than b.

00:59:05.355 --> 00:59:06.715
<v Speaker 1>And then if there are two different kinds

00:59:06.715 --> 00:59:08.475
<v Speaker 1>of numbers, it sort of, you know, converts

00:59:08.475 --> 00:59:10.075
<v Speaker 1>it to the the common denominator.

00:59:11.310 --> 00:59:12.670
<v Speaker 1>So that's allowed.

00:59:14.030 --> 00:59:16.350
<v Speaker 1>Normally, it's pretty strict with types, but with

00:59:16.350 --> 00:59:19.230
<v Speaker 1>comparators, it's it's a little bit more, permissive.

00:59:19.950 --> 00:59:22.270
<v Speaker 1>But then you have this concept where you

00:59:22.270 --> 00:59:23.790
<v Speaker 1>have this unary comparator.

00:59:24.255 --> 00:59:25.615
<v Speaker 1>Right? And then it's really

00:59:26.015 --> 00:59:28.655
<v Speaker 1>a little bit like a spreadsheet validation,

00:59:28.974 --> 00:59:30.894
<v Speaker 1>fields, right, where you can basically say, this

00:59:30.894 --> 00:59:32.655
<v Speaker 1>value needs to be greater than three,

00:59:32.974 --> 00:59:35.134
<v Speaker 1>and you just write greater than three. Right?

00:59:35.134 --> 00:59:37.934
<v Speaker 1>And then the end symbol is the the

00:59:37.934 --> 00:59:39.214
<v Speaker 1>counterpart of this junction.

00:59:39.789 --> 00:59:42.670
<v Speaker 1>So you can specify many validators. Right? So

00:59:42.670 --> 00:59:45.390
<v Speaker 1>you can say this must be greater than

00:59:45.390 --> 00:59:47.549
<v Speaker 1>three, and it must be an integer, and

00:59:47.549 --> 00:59:49.309
<v Speaker 1>it must be smaller than eight or less

00:59:49.309 --> 00:59:52.190
<v Speaker 1>than eight. So you can combine many different

00:59:52.829 --> 00:59:53.630
<v Speaker 1>validators there.

00:59:54.865 --> 00:59:55.505
<v Speaker 0>Yeah.

00:59:55.745 --> 00:59:57.745
<v Speaker 0>In fact, I'll use a a real example

00:59:57.745 --> 00:59:59.425
<v Speaker 0>because the it shocked

00:59:59.745 --> 01:00:01.265
<v Speaker 0>me and amazed me when I first did

01:00:01.265 --> 01:00:03.585
<v Speaker 0>this. But I I I'm sure it's so

01:00:03.585 --> 01:00:05.025
<v Speaker 0>trivial, but I was so happy at the

01:00:05.025 --> 01:00:07.585
<v Speaker 0>time. But I was working on a a

01:00:06.680 --> 01:00:08.520
<v Speaker 0>dev rel platform to track all of our

01:00:08.520 --> 01:00:10.040
<v Speaker 0>events that we were going to, and we

01:00:10.040 --> 01:00:11.480
<v Speaker 0>wanted to store it in YAML, but we

01:00:11.480 --> 01:00:13.240
<v Speaker 0>wanted to be able to validate it before

01:00:13.240 --> 01:00:14.760
<v Speaker 0>we tried to build, like, the static site

01:00:14.760 --> 01:00:16.040
<v Speaker 0>that came out the other end.

01:00:16.840 --> 01:00:18.120
<v Speaker 0>And one of the things we had was

01:00:18.120 --> 01:00:20.680
<v Speaker 0>this concept, like, of a start date,

01:00:21.640 --> 01:00:21.880
<v Speaker 0>which

01:00:22.595 --> 01:00:23.954
<v Speaker 0>I'm I'm just gonna make it an end

01:00:23.954 --> 01:00:26.035
<v Speaker 0>right now because I'll forget how to actually

01:00:26.035 --> 01:00:27.714
<v Speaker 0>bring in the date time package.

01:00:28.515 --> 01:00:30.515
<v Speaker 0>But see, it's just an end. And it's

01:00:30.515 --> 01:00:32.275
<v Speaker 0>one, two, three, etcetera. And we have an

01:00:32.275 --> 01:00:33.315
<v Speaker 0>end date. It's like one of the things

01:00:33.315 --> 01:00:34.355
<v Speaker 0>I wanted to be able to do is

01:00:34.355 --> 01:00:36.674
<v Speaker 0>always validate that the end date actually came

01:00:36.674 --> 01:00:37.714
<v Speaker 0>after the start date.

01:00:38.400 --> 01:00:40.400
<v Speaker 0>Yeah. I I was actually when I was

01:00:40.400 --> 01:00:41.680
<v Speaker 0>doing that in CUE here is when I

01:00:41.680 --> 01:00:43.440
<v Speaker 0>realized that it was actually possible to do

01:00:43.440 --> 01:00:45.440
<v Speaker 0>that. And I'm sure I'll mess up the

01:00:45.440 --> 01:00:47.920
<v Speaker 0>syntax here, but is it just that?

01:00:48.480 --> 01:00:51.760
<v Speaker 0>Yeah. Yeah. So using CUE, we actually have

01:00:51.760 --> 01:00:54.715
<v Speaker 0>the ability to reference other properties within,

01:00:55.915 --> 01:00:57.675
<v Speaker 0>I guess, document. I'm not sure if there's

01:00:57.675 --> 01:00:59.515
<v Speaker 0>another word I should use there. But Yeah.

01:00:59.595 --> 01:01:02.315
<v Speaker 0>We can make references to other values and

01:01:02.315 --> 01:01:03.755
<v Speaker 0>make sure that they're valid. So here we're

01:01:03.755 --> 01:01:05.195
<v Speaker 0>saying that the start date the end date

01:01:05.195 --> 01:01:06.075
<v Speaker 0>must be

01:01:06.450 --> 01:01:08.690
<v Speaker 0>after the start date, and we can verify

01:01:08.690 --> 01:01:09.330
<v Speaker 0>that.

01:01:09.570 --> 01:01:11.490
<v Speaker 1>So one thing that might trip users up,

01:01:11.490 --> 01:01:13.170
<v Speaker 1>so if you go back to that oh,

01:01:13.170 --> 01:01:13.970
<v Speaker 1>yeah. You can

01:01:14.450 --> 01:01:16.930
<v Speaker 1>yeah. So don't forget the end percent. Right?

01:01:16.930 --> 01:01:19.010
<v Speaker 1>Like, the end because otherwise, it's int is

01:01:19.010 --> 01:01:20.849
<v Speaker 1>greater or equal to start date, which is,

01:01:20.855 --> 01:01:23.655
<v Speaker 1>in theory a valid queue expression. So we

01:01:23.815 --> 01:01:25.815
<v Speaker 1>try to catch these problems,

01:01:25.974 --> 01:01:28.295
<v Speaker 1>right, because it can never be satisfied, right,

01:01:28.295 --> 01:01:30.215
<v Speaker 1>because int will never be concrete.

01:01:30.615 --> 01:01:31.174
<v Speaker 1>Right? But

01:01:31.895 --> 01:01:34.135
<v Speaker 1>yeah. So so just don't forget the the

01:01:34.135 --> 01:01:35.654
<v Speaker 1>ampersand. Right? Like, that's the

01:01:36.609 --> 01:01:39.250
<v Speaker 0>Yeah. So we have our conditions here. We

01:01:39.250 --> 01:01:40.690
<v Speaker 0>have it actually failing.

01:01:41.329 --> 01:01:42.530
<v Speaker 0>So I guess

01:01:43.570 --> 01:01:45.490
<v Speaker 0>there. There we go. So our invalid value

01:01:45.490 --> 01:01:47.329
<v Speaker 0>is zero out of bounds greater than or

01:01:47.329 --> 01:01:48.370
<v Speaker 0>equal to one.

01:01:49.410 --> 01:01:52.195
<v Speaker 0>Is that about to do? And and just,

01:01:52.355 --> 01:01:54.835
<v Speaker 0>you know, it's not been particularly challenging that

01:01:54.835 --> 01:01:56.515
<v Speaker 0>this kind of write this document. I feel

01:01:56.515 --> 01:01:58.195
<v Speaker 0>that it reads really easy and I think

01:01:58.195 --> 01:02:00.195
<v Speaker 0>that's really powerful for people as we're trying

01:02:00.195 --> 01:02:02.515
<v Speaker 0>to validate this enormous amount of configuration that

01:02:02.515 --> 01:02:03.795
<v Speaker 0>we have in all of our application.

01:02:06.170 --> 01:02:06.810
<v Speaker 0>Cool.

01:02:08.250 --> 01:02:09.930
<v Speaker 0>I hope that people are as excited by

01:02:09.930 --> 01:02:11.130
<v Speaker 0>CUE as I am. I don't know if

01:02:11.130 --> 01:02:12.570
<v Speaker 0>I'm just weird that way.

01:02:13.130 --> 01:02:15.609
<v Speaker 0>But it just, you know, takes all of

01:02:15.609 --> 01:02:17.609
<v Speaker 0>these parts of our application that were really

01:02:17.609 --> 01:02:19.609
<v Speaker 0>difficult or we had to write really cumbersome

01:02:19.609 --> 01:02:21.345
<v Speaker 0>tests far before and just

01:02:21.585 --> 01:02:24.305
<v Speaker 0>brings it across a very simple data plane

01:02:24.305 --> 01:02:25.425
<v Speaker 0>or config

01:02:25.425 --> 01:02:26.305
<v Speaker 0>substrate,

01:02:26.305 --> 01:02:26.865
<v Speaker 0>whatever.

01:02:28.225 --> 01:02:29.425
<v Speaker 0>Okay. So

01:02:30.145 --> 01:02:31.185
<v Speaker 0>we're at

01:02:31.505 --> 01:02:33.825
<v Speaker 0>03:00. We got around thirty minutes left.

01:02:35.960 --> 01:02:37.480
<v Speaker 0>How long do you need for your last

01:02:37.480 --> 01:02:38.359
<v Speaker 0>demonstration?

01:02:38.359 --> 01:02:38.920
<v Speaker 0>Roughly.

01:02:39.480 --> 01:02:40.839
<v Speaker 1>The five

01:02:40.839 --> 01:02:42.440
<v Speaker 1>minutes. Sorry. Okay. Cool.

01:02:43.319 --> 01:02:45.559
<v Speaker 0>So let's try and use this now. I

01:02:45.559 --> 01:02:48.455
<v Speaker 0>think we've we've shown off just, you know,

01:02:48.455 --> 01:02:49.815
<v Speaker 0>queue constraints,

01:02:49.815 --> 01:02:51.655
<v Speaker 0>junctions, disjunctions, etcetera.

01:02:51.895 --> 01:02:53.495
<v Speaker 0>So we'll take a look at this Kubernetes

01:02:53.495 --> 01:02:54.855
<v Speaker 0>tutorial here. So

01:02:55.175 --> 01:02:57.655
<v Speaker 0>the goal of this tutorial is to show

01:02:57.655 --> 01:02:59.255
<v Speaker 0>people how they can

01:02:59.815 --> 01:03:00.695
<v Speaker 0>simplify

01:03:00.695 --> 01:03:02.935
<v Speaker 0>the Kubernetes manifest. Would you say that's

01:03:03.430 --> 01:03:06.870
<v Speaker 0>correct? Yeah. Everything, really. So convert, import,

01:03:07.510 --> 01:03:08.550
<v Speaker 1>manage,

01:03:08.710 --> 01:03:09.750
<v Speaker 1>validate,

01:03:10.070 --> 01:03:11.030
<v Speaker 1>simplify,

01:03:11.030 --> 01:03:12.550
<v Speaker 1>yeah, templatize.

01:03:14.310 --> 01:03:14.710
<v Speaker 0>Yeah.

01:03:15.735 --> 01:03:16.535
<v Speaker 0>Okay.

01:03:16.615 --> 01:03:18.375
<v Speaker 0>So I'm gonna skim this and I'm sure

01:03:18.375 --> 01:03:21.015
<v Speaker 0>I'm gonna miss bits. But let's see. So

01:03:22.215 --> 01:03:24.295
<v Speaker 0>what do I need to get started here?

01:03:25.015 --> 01:03:26.455
<v Speaker 0>I guess I need to run the CUE

01:03:26.455 --> 01:03:27.175
<v Speaker 0>mod in it.

01:03:28.030 --> 01:03:30.030
<v Speaker 1>Yeah. So you have to yeah. Well, yeah.

01:03:30.030 --> 01:03:32.510
<v Speaker 1>You can just start in this original directory.

01:03:32.510 --> 01:03:34.350
<v Speaker 1>Right? You don't necessarily have to copy it.

01:03:34.350 --> 01:03:34.750
<v Speaker 1>But

01:03:35.310 --> 01:03:37.150
<v Speaker 1>queue mod in it. Yeah.

01:03:38.350 --> 01:03:40.350
<v Speaker 0>Okay. Do I need the example.com?

01:03:40.350 --> 01:03:41.710
<v Speaker 0>I'm just trying to You don't need to.

01:03:41.710 --> 01:03:44.605
<v Speaker 0>No. That's yeah. It's not not mandatory. I'll

01:03:44.605 --> 01:03:46.605
<v Speaker 0>just create an e b c directory. Again,

01:03:46.605 --> 01:03:49.245
<v Speaker 0>my naming is always on point, but queue

01:03:49.245 --> 01:03:50.285
<v Speaker 0>mode in it.

01:03:53.325 --> 01:03:55.485
<v Speaker 0>Does this trying to so once you use

01:03:55.485 --> 01:03:57.885
<v Speaker 0>queue import to grab some YAML files and

01:03:57.885 --> 01:04:00.130
<v Speaker 0>convert them to CUE. So should I just

01:04:00.130 --> 01:04:01.730
<v Speaker 0>create a very simple Kubernetes

01:04:01.730 --> 01:04:02.690
<v Speaker 0>deployment?

01:04:03.170 --> 01:04:05.170
<v Speaker 1>Yeah. So basically, this this is based on

01:04:05.170 --> 01:04:07.650
<v Speaker 1>an existing dataset, right, that's being converted. So

01:04:07.650 --> 01:04:09.410
<v Speaker 1>you would have to copy that dataset.

01:04:10.530 --> 01:04:11.810
<v Speaker 0>Or do I need the whole thing, or

01:04:11.810 --> 01:04:12.930
<v Speaker 0>can I just create a deployment?

01:04:13.455 --> 01:04:16.255
<v Speaker 0>Does it matter? You you Yeah. It would

01:04:16.255 --> 01:04:18.895
<v Speaker 1>be easier to to copy the get the

01:04:18.895 --> 01:04:19.615
<v Speaker 1>Git repo.

01:04:20.335 --> 01:04:22.415
<v Speaker 0>Yeah. You're right. I shouldn't wing it.

01:04:22.895 --> 01:04:24.415
<v Speaker 0>Bad things happen when I do that.

01:04:26.960 --> 01:04:29.120
<v Speaker 0>Let's just clone it into here.

01:04:33.359 --> 01:04:34.960
<v Speaker 0>I'm sure there's a flag to tell it

01:04:34.960 --> 01:04:36.400
<v Speaker 0>to ignore that. I'll just do this.

01:04:38.975 --> 01:04:40.015
<v Speaker 0>K. So

01:04:40.495 --> 01:04:42.015
<v Speaker 0>what directory was that?

01:04:42.575 --> 01:04:43.935
<v Speaker 0>Doc tutorial.

01:04:43.935 --> 01:04:46.335
<v Speaker 1>So it's in yeah. You you go to

01:04:46.335 --> 01:04:48.335
<v Speaker 1>docs, yeah, tutorial Kubernetes.

01:04:48.335 --> 01:04:50.415
<v Speaker 1>Then original, you could do it there, I

01:04:50.415 --> 01:04:50.575
<v Speaker 1>guess,

01:04:51.350 --> 01:04:53.270
<v Speaker 1>if you don't mind modifying

01:04:53.270 --> 01:04:54.310
<v Speaker 1>the repo.

01:04:55.350 --> 01:04:58.310
<v Speaker 0>Okay. So queue mod and that from here.

01:04:58.310 --> 01:04:59.510
<v Speaker 0>Will that work okay?

01:04:59.750 --> 01:05:00.390
<v Speaker 0>Yep.

01:05:01.350 --> 01:05:02.790
<v Speaker 0>Because I feel like I've went off a

01:05:02.790 --> 01:05:04.790
<v Speaker 0>weird path now, but it should be alright.

01:05:05.795 --> 01:05:08.355
<v Speaker 0>Kubernetes original. Okay. So now we have our

01:05:08.355 --> 01:05:09.715
<v Speaker 0>queue module stuff here.

01:05:10.035 --> 01:05:12.035
<v Speaker 0>It's a simple we have this directory of

01:05:12.035 --> 01:05:12.835
<v Speaker 0>services,

01:05:13.475 --> 01:05:16.275
<v Speaker 0>and we want to then import

01:05:16.275 --> 01:05:17.315
<v Speaker 0>all of our services.

01:05:18.260 --> 01:05:20.260
<v Speaker 0>Like, so only that path is gonna be

01:05:20.260 --> 01:05:21.460
<v Speaker 0>different. Yeah.

01:05:21.859 --> 01:05:22.500
<v Speaker 1>I would go to

01:05:23.140 --> 01:05:25.540
<v Speaker 1>you in services already? Or yeah. You don't

01:05:25.540 --> 01:05:27.300
<v Speaker 1>have to, actually. It doesn't matter. That's

01:05:29.380 --> 01:05:30.900
<v Speaker 0>Okay. So you just want me to import

01:05:30.900 --> 01:05:31.859
<v Speaker 0>services like so?

01:05:33.425 --> 01:05:35.825
<v Speaker 1>No. Just c d into services. You don't

01:05:35.825 --> 01:05:37.425
<v Speaker 1>need to, but before

01:05:37.985 --> 01:05:40.145
<v Speaker 1>we forget later and, like, you know, command

01:05:40.145 --> 01:05:42.305
<v Speaker 1>to assume that you that you are. Yeah.

01:05:42.305 --> 01:05:43.025
<v Speaker 0>Yep.

01:05:43.905 --> 01:05:45.825
<v Speaker 0>We're importing all of this, so it's just

01:05:45.825 --> 01:05:46.465
<v Speaker 0>gonna be dot.

01:05:48.520 --> 01:05:50.600
<v Speaker 1>Is that right? All the all the subdirectories

01:05:50.600 --> 01:05:53.240
<v Speaker 1>too. So dot slash dot dot dot. Alright.

01:05:53.240 --> 01:05:54.680
<v Speaker 0>Okay. It's like that. Yeah.

01:05:55.160 --> 01:05:56.600
<v Speaker 1>Import everything.

01:05:58.840 --> 01:06:02.360
<v Speaker 1>Yes. So what this says, basically so if

01:06:02.360 --> 01:06:03.640
<v Speaker 1>you go back to the tutorial,

01:06:04.415 --> 01:06:06.335
<v Speaker 1>we'll do a little shortcut so you can

01:06:06.335 --> 01:06:09.214
<v Speaker 1>scroll a little bit down in the for

01:06:09.214 --> 01:06:10.815
<v Speaker 1>the sake of time. So I think,

01:06:11.135 --> 01:06:13.695
<v Speaker 1>yeah, if you take that command, I think

01:06:13.695 --> 01:06:14.735
<v Speaker 1>that should do it.

01:06:15.135 --> 01:06:16.175
<v Speaker 0>This one here?

01:06:16.655 --> 01:06:17.055
<v Speaker 1>Yep.

01:06:17.810 --> 01:06:18.930
<v Speaker 1>So, basically,

01:06:19.650 --> 01:06:21.970
<v Speaker 1>so all the Kubernetes definitions, they're all in

01:06:21.970 --> 01:06:23.410
<v Speaker 1>this flat space. So I like to have

01:06:23.410 --> 01:06:25.090
<v Speaker 1>these YAML files with the dash dash dash

01:06:25.090 --> 01:06:27.170
<v Speaker 1>in between. Mhmm. And what we're doing with

01:06:27.170 --> 01:06:29.490
<v Speaker 1>this import is that we're, putting it in

01:06:29.490 --> 01:06:32.375
<v Speaker 1>a namespace. So there's some feature features plan

01:06:32.375 --> 01:06:33.575
<v Speaker 1>to queue where you don't need to do

01:06:33.575 --> 01:06:36.135
<v Speaker 1>that. But right now, we're basically assigning them

01:06:36.135 --> 01:06:37.415
<v Speaker 1>each a unique name,

01:06:38.055 --> 01:06:39.895
<v Speaker 1>basically, by grouping them by

01:06:40.215 --> 01:06:42.295
<v Speaker 1>kind, right, like deployment or service and then

01:06:42.295 --> 01:06:43.859
<v Speaker 1>a name. And then,

01:06:44.260 --> 01:06:46.260
<v Speaker 1>so we're treating all of it in the

01:06:46.260 --> 01:06:47.940
<v Speaker 1>same namespace,

01:06:47.940 --> 01:06:49.700
<v Speaker 1>basically. And that's what this command does. So

01:06:49.700 --> 01:06:50.420
<v Speaker 1>it gives

01:06:50.740 --> 01:06:53.700
<v Speaker 1>it derives the name from the kinds and

01:06:53.700 --> 01:06:57.045
<v Speaker 1>the metadata name. And the and what the

01:06:57.045 --> 01:06:58.965
<v Speaker 1>dash r does, that's interesting.

01:06:59.285 --> 01:06:59.845
<v Speaker 1>So

01:07:00.165 --> 01:07:02.245
<v Speaker 1>some of these config maps,

01:07:03.365 --> 01:07:05.525
<v Speaker 1>so you can run this, for example.

01:07:07.925 --> 01:07:09.525
<v Speaker 1>Yeah. That should be fine. And then if

01:07:09.525 --> 01:07:13.170
<v Speaker 1>you look, if open the file in Mon,

01:07:14.450 --> 01:07:16.450
<v Speaker 1>the Mon in the Mon so there's a

01:07:16.450 --> 01:07:19.250
<v Speaker 1>subdirectory in services. There's Mon. Yeah.

01:07:19.490 --> 01:07:20.930
<v Speaker 1>And then Prometheus

01:07:22.974 --> 01:07:25.295
<v Speaker 1>and then config map YAML first.

01:07:26.415 --> 01:07:28.734
<v Speaker 1>So if you look there, there's this, you

01:07:28.734 --> 01:07:30.895
<v Speaker 1>know, sort of inconspicuous,

01:07:31.855 --> 01:07:34.815
<v Speaker 1>like like, pipe symbol, right, which really means

01:07:34.815 --> 01:07:37.135
<v Speaker 1>that what follows is not YAML.

01:07:37.295 --> 01:07:38.255
<v Speaker 1>It's a string.

01:07:39.190 --> 01:07:41.430
<v Speaker 1>Right? So that basically means, like, most of

01:07:41.430 --> 01:07:43.430
<v Speaker 1>the configuration in this file

01:07:43.590 --> 01:07:45.590
<v Speaker 1>is really treated as just one big string.

01:07:45.590 --> 01:07:48.710
<v Speaker 1>Right? Like, untyped, not even YAML structure. Right?

01:07:48.790 --> 01:07:51.270
<v Speaker 1>So the dash r option searches for these,

01:07:51.510 --> 01:07:54.325
<v Speaker 1>scenarios and then recursively converts that to queue

01:07:54.325 --> 01:07:55.845
<v Speaker 1>as well. So if you go to the

01:07:55.845 --> 01:07:58.245
<v Speaker 1>generated queue in config map dot queue,

01:08:00.005 --> 01:08:01.605
<v Speaker 1>you will see that,

01:08:02.005 --> 01:08:04.325
<v Speaker 1>you know, like, it also converted that

01:08:04.645 --> 01:08:07.180
<v Speaker 1>into into structured queue. And right now, it's

01:08:07.180 --> 01:08:08.940
<v Speaker 1>a let, but you can then manually assign

01:08:08.940 --> 01:08:10.860
<v Speaker 1>it to a field if you wish, and

01:08:11.020 --> 01:08:12.620
<v Speaker 1>maybe I'll make that an option so that

01:08:12.620 --> 01:08:13.900
<v Speaker 1>it does that automatically.

01:08:14.220 --> 01:08:15.500
<v Speaker 1>And then it has this

01:08:15.820 --> 01:08:18.380
<v Speaker 1>call to to YAML Marshall. And because it's

01:08:18.380 --> 01:08:20.300
<v Speaker 1>generated, it has these funky numbers to make

01:08:20.300 --> 01:08:22.324
<v Speaker 1>it unique. It has this call to the

01:08:22.324 --> 01:08:25.045
<v Speaker 1>YAML Marshall to to convert that back into

01:08:25.125 --> 01:08:26.804
<v Speaker 1>the original YAML string.

01:08:27.685 --> 01:08:30.165
<v Speaker 1>But, basically, it allows you to also recursively

01:08:30.165 --> 01:08:33.045
<v Speaker 1>validate the YAML within that queue. Right?

01:08:35.189 --> 01:08:36.469
<v Speaker 1>That's what that does.

01:08:37.029 --> 01:08:38.310
<v Speaker 0>Yeah. That's

01:08:38.310 --> 01:08:41.029
<v Speaker 0>almost magic. The fact that it's taken a

01:08:41.029 --> 01:08:44.550
<v Speaker 0>YAML multilane string and has kind of interrogated

01:08:44.550 --> 01:08:45.670
<v Speaker 0>it to see

01:08:46.229 --> 01:08:49.029
<v Speaker 0>if it is in fact itself more configuration

01:08:49.029 --> 01:08:51.564
<v Speaker 0>and then just giving you that back as

01:08:51.564 --> 01:08:52.125
<v Speaker 0>the

01:08:52.524 --> 01:08:53.965
<v Speaker 0>queue option. And this is one of the

01:08:53.965 --> 01:08:56.125
<v Speaker 1>problems in GCL, right, that it really had

01:08:56.125 --> 01:08:58.444
<v Speaker 1>only one layer of of validation, whereas very

01:08:58.444 --> 01:09:00.205
<v Speaker 1>often you have these nested configs and you

01:09:00.205 --> 01:09:01.645
<v Speaker 1>wanna be able to to

01:09:01.965 --> 01:09:04.699
<v Speaker 1>handle that as well. Right? Like, typing within

01:09:04.699 --> 01:09:05.420
<v Speaker 1>typing.

01:09:05.899 --> 01:09:08.219
<v Speaker 0>Well, I think you've made literally

01:09:08.460 --> 01:09:12.060
<v Speaker 0>everybody's head explode. So Julian Pavotto has said,

01:09:12.060 --> 01:09:12.619
<v Speaker 0>wow.

01:09:13.420 --> 01:09:15.979
<v Speaker 0>Kevin actually said his brain has exploded,

01:09:16.140 --> 01:09:18.460
<v Speaker 0>and Michael is agreeing. So there's

01:09:19.245 --> 01:09:21.325
<v Speaker 0>a lot of magic happiness, I think, in

01:09:21.325 --> 01:09:23.485
<v Speaker 0>the audience seeing that work. That was really

01:09:23.485 --> 01:09:23.965
<v Speaker 0>cool.

01:09:25.245 --> 01:09:26.444
<v Speaker 0>And now we've got

01:09:27.325 --> 01:09:29.965
<v Speaker 0>yeah. This is just cue representation

01:09:29.965 --> 01:09:31.645
<v Speaker 0>of that entire thing. Yep.

01:09:32.560 --> 01:09:35.120
<v Speaker 0>Yeah. That's very cool. So, basically, recursively imported

01:09:35.120 --> 01:09:36.800
<v Speaker 1>for all the directories, put it in that

01:09:36.800 --> 01:09:37.520
<v Speaker 1>directory.

01:09:38.479 --> 01:09:40.640
<v Speaker 1>So the directory structure of CUE, so they

01:09:40.640 --> 01:09:42.239
<v Speaker 1>all have the same package name.

01:09:44.000 --> 01:09:44.640
<v Speaker 1>We might

01:09:45.145 --> 01:09:47.385
<v Speaker 1>provide other modes. We're sort of looking into

01:09:47.385 --> 01:09:49.545
<v Speaker 1>what modes people wanna have, but the very

01:09:49.545 --> 01:09:51.385
<v Speaker 1>common pattern we saw is that,

01:09:52.024 --> 01:09:54.024
<v Speaker 1>you know, you have this directory hierarchy of

01:09:54.024 --> 01:09:54.985
<v Speaker 1>configuration

01:09:55.545 --> 01:09:58.880
<v Speaker 1>where, basically, you wanna have the the schema

01:09:58.880 --> 01:10:00.480
<v Speaker 1>and sort of the root config. It can

01:10:00.480 --> 01:10:02.880
<v Speaker 1>be a subdirectory too. Right? But there, specify

01:10:02.880 --> 01:10:04.960
<v Speaker 1>the schema that applies to all

01:10:05.600 --> 01:10:07.920
<v Speaker 1>the schema and the subdirectories. Right? So think

01:10:07.920 --> 01:10:09.360
<v Speaker 1>of it as ACL.

01:10:09.360 --> 01:10:11.920
<v Speaker 1>Right? So your validator that you specify there

01:10:12.275 --> 01:10:14.195
<v Speaker 1>sort of should apply to everything in the

01:10:14.195 --> 01:10:16.835
<v Speaker 1>subdirectory, very much like ACLs work or or

01:10:16.835 --> 01:10:18.594
<v Speaker 1>whatever. Right? And this is basically

01:10:18.835 --> 01:10:20.355
<v Speaker 1>how this is set up now. So now

01:10:20.355 --> 01:10:22.275
<v Speaker 1>you have this one package which crosses an

01:10:22.275 --> 01:10:23.314
<v Speaker 1>entire directory

01:10:23.715 --> 01:10:24.435
<v Speaker 1>structure.

01:10:25.200 --> 01:10:27.520
<v Speaker 1>And the CUE module basically is a single

01:10:27.520 --> 01:10:29.680
<v Speaker 1>hermetic view on all your configuration.

01:10:29.680 --> 01:10:31.840
<v Speaker 1>Right? So it's it's supposed to be completely

01:10:31.840 --> 01:10:32.480
<v Speaker 1>closed

01:10:32.800 --> 01:10:35.360
<v Speaker 1>and and fully defining everything what's going on

01:10:35.360 --> 01:10:36.719
<v Speaker 1>within these directories.

01:10:36.800 --> 01:10:38.560
<v Speaker 1>So that's that's the significance of that.

01:10:39.505 --> 01:10:42.065
<v Speaker 0>Cool. We had a a comment from Anna

01:10:42.065 --> 01:10:43.665
<v Speaker 0>who's suggesting that

01:10:43.905 --> 01:10:46.785
<v Speaker 0>CUE is a kind of data focused mix,

01:10:46.785 --> 01:10:48.465
<v Speaker 0>which is a quite an interesting way to

01:10:48.465 --> 01:10:50.545
<v Speaker 0>look at it. Are you familiar with NextLang

01:10:50.545 --> 01:10:50.865
<v Speaker 0>as well?

01:10:51.870 --> 01:10:53.790
<v Speaker 1>With Next, yeah, I am familiar with it.

01:10:53.790 --> 01:10:54.670
<v Speaker 1>Yeah. So

01:10:55.790 --> 01:10:57.870
<v Speaker 1>it's it's a nice language. Right? Pretty pretty

01:10:57.870 --> 01:10:58.750
<v Speaker 1>neat language.

01:10:58.990 --> 01:11:01.870
<v Speaker 1>So I think Next is more focused on

01:11:01.870 --> 01:11:04.190
<v Speaker 1>package management. Right? It's a more generic

01:11:05.315 --> 01:11:07.395
<v Speaker 1>the language itself is more generic, which you

01:11:07.395 --> 01:11:08.755
<v Speaker 1>can see it has some elements of it

01:11:08.755 --> 01:11:10.514
<v Speaker 1>where they are focusing on that.

01:11:11.395 --> 01:11:13.635
<v Speaker 1>It it so so a lot of the

01:11:13.635 --> 01:11:16.675
<v Speaker 1>more needs configuration languages like Dial and Mix,

01:11:16.675 --> 01:11:18.435
<v Speaker 1>they do focus more on functional,

01:11:19.030 --> 01:11:21.430
<v Speaker 1>whereas CUE really is more logic language. Right?

01:11:21.430 --> 01:11:23.430
<v Speaker 1>So I think ultimately for configuration,

01:11:23.430 --> 01:11:24.870
<v Speaker 1>because you have this aspect

01:11:25.350 --> 01:11:27.510
<v Speaker 1>orientedness, right, like, the you can really only

01:11:27.510 --> 01:11:29.510
<v Speaker 1>solve that with with logic

01:11:29.510 --> 01:11:32.150
<v Speaker 1>and and not so much with functional approaches.

01:11:32.470 --> 01:11:33.990
<v Speaker 1>So it's it's you know, depends on your

01:11:33.990 --> 01:11:34.710
<v Speaker 1>use case, but

01:11:37.005 --> 01:11:39.485
<v Speaker 1>yeah. So CUE takes quite a different approach

01:11:39.485 --> 01:11:41.805
<v Speaker 1>than DAO and and NICS, right, for that

01:11:41.805 --> 01:11:44.045
<v Speaker 1>for that reason. Not not to say that

01:11:44.045 --> 01:11:44.845
<v Speaker 1>there is

01:11:45.085 --> 01:11:46.925
<v Speaker 1>other use cases where it can be quite

01:11:46.925 --> 01:11:47.325
<v Speaker 1>useful.

01:11:48.600 --> 01:11:49.960
<v Speaker 0>Yeah. It looks like

01:11:51.000 --> 01:11:52.840
<v Speaker 0>Kevin and Anna are having a conversation about

01:11:52.840 --> 01:11:55.320
<v Speaker 0>potentially using CUE to validate next.

01:11:55.480 --> 01:11:57.800
<v Speaker 0>I can't keep up with it, but interesting

01:11:57.800 --> 01:11:58.440
<v Speaker 0>stuff.

01:11:58.760 --> 01:11:59.400
<v Speaker 0>Okay.

01:12:00.440 --> 01:12:02.520
<v Speaker 0>And there's a a nice joke from Kevin,

01:12:02.520 --> 01:12:04.915
<v Speaker 0>actually. Your recursive flag is to de ugly

01:12:04.915 --> 01:12:05.715
<v Speaker 0>things.

01:12:08.195 --> 01:12:11.155
<v Speaker 0>That's a way to look at it. Yeah.

01:12:11.395 --> 01:12:13.475
<v Speaker 0>Alright. So this is Let's see what this

01:12:13.475 --> 01:12:15.395
<v Speaker 0>tutorial is is doing next.

01:12:17.530 --> 01:12:19.130
<v Speaker 0>So we've imported

01:12:19.690 --> 01:12:21.929
<v Speaker 0>Yeah. So that all looks better.

01:12:23.449 --> 01:12:25.050
<v Speaker 1>Yeah. So that's

01:12:25.370 --> 01:12:27.290
<v Speaker 1>so create a top level template. Yeah. You

01:12:27.290 --> 01:12:27.850
<v Speaker 1>can

01:12:29.245 --> 01:12:31.565
<v Speaker 1>you can do that. I I would skip

01:12:31.565 --> 01:12:33.885
<v Speaker 1>the validation. It's not that interesting. You should

01:12:35.645 --> 01:12:38.125
<v Speaker 1>but yeah. So one thing that's interesting thing

01:12:38.125 --> 01:12:39.885
<v Speaker 1>to do, you scroll back up Oh, yeah.

01:12:39.885 --> 01:12:42.445
<v Speaker 0>Sure. So this is a very good pattern.

01:12:42.870 --> 01:12:44.790
<v Speaker 1>So I I showed you how to, given

01:12:44.790 --> 01:12:46.870
<v Speaker 1>a template, reduce configuration.

01:12:46.870 --> 01:12:47.990
<v Speaker 1>So theoretically,

01:12:48.230 --> 01:12:50.630
<v Speaker 1>so within graph unification is a known algorithm.

01:12:50.630 --> 01:12:52.710
<v Speaker 1>It's called anti unification. I could also do

01:12:52.710 --> 01:12:54.470
<v Speaker 1>the opposite. So given all the,

01:12:55.055 --> 01:12:57.535
<v Speaker 1>like, JSON and YAML we have now, like,

01:12:57.535 --> 01:12:59.375
<v Speaker 1>compute the optimal templates,

01:13:00.095 --> 01:13:01.135
<v Speaker 1>that after

01:13:01.135 --> 01:13:03.775
<v Speaker 1>running a trim would, would give the the

01:13:03.775 --> 01:13:05.935
<v Speaker 1>most compact configuration.

01:13:05.935 --> 01:13:07.455
<v Speaker 1>Right? Like, that's not,

01:13:08.015 --> 01:13:08.415
<v Speaker 1>implemented.

01:13:09.770 --> 01:13:11.930
<v Speaker 1>So but you can it it's actually quite

01:13:11.930 --> 01:13:13.530
<v Speaker 1>easy to do that by hand.

01:13:13.850 --> 01:13:15.690
<v Speaker 1>So what you would normally do is to

01:13:15.690 --> 01:13:18.090
<v Speaker 1>copy one of the templates that's sort of

01:13:18.090 --> 01:13:19.130
<v Speaker 1>representative,

01:13:19.930 --> 01:13:22.175
<v Speaker 1>for what you wanna do, right, or what

01:13:22.175 --> 01:13:23.295
<v Speaker 1>that you think this is sort of a

01:13:23.295 --> 01:13:25.935
<v Speaker 1>typical example of my my configuration. Copy that

01:13:25.935 --> 01:13:26.815
<v Speaker 1>to the roots,

01:13:27.135 --> 01:13:29.855
<v Speaker 1>right, and then start stripping anything specific to

01:13:29.855 --> 01:13:32.255
<v Speaker 1>it and and generalizing it. Right?

01:13:33.295 --> 01:13:35.055
<v Speaker 1>If you don't wanna do that by hand,

01:13:35.790 --> 01:13:37.790
<v Speaker 1>then you can do what this

01:13:37.950 --> 01:13:38.670
<v Speaker 1>cat,

01:13:40.190 --> 01:13:42.270
<v Speaker 1>know, block is doing. So this basically creates

01:13:42.270 --> 01:13:43.310
<v Speaker 1>an initial,

01:13:44.190 --> 01:13:47.070
<v Speaker 1>template, which is really a hand modified version

01:13:47.070 --> 01:13:49.470
<v Speaker 1>of one of the the the templates. Right?

01:13:49.470 --> 01:13:49.710
<v Speaker 1>So

01:13:50.605 --> 01:13:52.205
<v Speaker 1>we can do it by hands, but for

01:13:52.205 --> 01:13:55.085
<v Speaker 1>the sake of of saving time, you can

01:13:55.085 --> 01:13:57.085
<v Speaker 1>you can also just copy it. So that

01:13:57.085 --> 01:13:58.765
<v Speaker 1>you don't need to do. Okay. You can

01:13:58.765 --> 01:14:01.645
<v Speaker 1>either copy it and modify by hands, or

01:14:01.645 --> 01:14:02.605
<v Speaker 1>you can do the cat

01:14:02.940 --> 01:14:05.099
<v Speaker 1>thing, which already is the

01:14:05.420 --> 01:14:07.500
<v Speaker 1>sort of the modified version of that.

01:14:09.100 --> 01:14:11.020
<v Speaker 0>Okay. So let's grab

01:14:11.020 --> 01:14:11.900
<v Speaker 0>this

01:14:13.100 --> 01:14:16.060
<v Speaker 0>and just run this here. And this yeah.

01:14:16.060 --> 01:14:17.820
<v Speaker 1>In the root directory. So in services.

01:14:18.665 --> 01:14:20.985
<v Speaker 1>Don't know if you're in services. I was

01:14:20.985 --> 01:14:23.465
<v Speaker 0>in services. Yes. We've got a CUE.CUE now.

01:14:24.745 --> 01:14:25.385
<v Speaker 1>Yep.

01:14:26.585 --> 01:14:29.385
<v Speaker 1>And then so, basically, you see this short

01:14:29.385 --> 01:14:31.145
<v Speaker 1>example that I gave. This is pretty much

01:14:31.145 --> 01:14:32.665
<v Speaker 1>the same thing. Right? Like, you have

01:14:33.960 --> 01:14:35.000
<v Speaker 1>replicas.

01:14:35.960 --> 01:14:37.400
<v Speaker 1>You know? Like, there there's a few more

01:14:37.400 --> 01:14:38.119
<v Speaker 1>labels,

01:14:38.600 --> 01:14:40.280
<v Speaker 1>but it's basically the same thing.

01:14:41.080 --> 01:14:43.159
<v Speaker 1>Just scroll all the way to the bottom.

01:14:44.360 --> 01:14:45.925
<v Speaker 1>Oh, yeah. No. It's just these two things,

01:14:45.925 --> 01:14:48.565
<v Speaker 1>so I don't generate services from deployments.

01:14:49.284 --> 01:14:51.445
<v Speaker 1>But, yet, I don't do that here yet.

01:14:51.445 --> 01:14:52.965
<v Speaker 1>But, basically, I do the same thing. Right?

01:14:52.965 --> 01:14:55.364
<v Speaker 1>So I say, match any of the the

01:14:55.364 --> 01:14:56.565
<v Speaker 1>the names

01:14:56.885 --> 01:15:00.060
<v Speaker 1>in the service map. Right? And then I

01:15:00.060 --> 01:15:02.300
<v Speaker 1>basically say, okay. That name should be the

01:15:02.300 --> 01:15:03.739
<v Speaker 1>same as metadata name,

01:15:04.940 --> 01:15:07.020
<v Speaker 1>and that's, you know, all these little tricks

01:15:07.020 --> 01:15:09.420
<v Speaker 1>like that. Right? So there's a few few

01:15:09.420 --> 01:15:12.344
<v Speaker 1>of these. And yeah. That's the demo you

01:15:12.344 --> 01:15:14.105
<v Speaker 0>did at the start, right, where you created

01:15:14.105 --> 01:15:15.545
<v Speaker 0>a comprehension

01:15:15.545 --> 01:15:17.625
<v Speaker 0>over one of these and then just added

01:15:17.625 --> 01:15:20.105
<v Speaker 0>some extra constraints that locked the service and

01:15:20.105 --> 01:15:22.025
<v Speaker 0>the deployment together. Right. Okay. And the square

01:15:22.025 --> 01:15:24.824
<v Speaker 1>bracket basically means it's this this path selector.

01:15:24.824 --> 01:15:27.260
<v Speaker 1>Right? So the square brackets basically mean match

01:15:27.260 --> 01:15:28.460
<v Speaker 1>any path

01:15:29.180 --> 01:15:30.860
<v Speaker 1>of of you know, like, that I'm writing

01:15:30.860 --> 01:15:32.540
<v Speaker 1>here. And here, it's underscore, so it matches

01:15:32.540 --> 01:15:34.540
<v Speaker 1>any path in deployment. But you can also

01:15:34.540 --> 01:15:35.100
<v Speaker 1>say,

01:15:35.580 --> 01:15:37.660
<v Speaker 1>you know, anything that starts with a capital

01:15:37.660 --> 01:15:40.780
<v Speaker 1>letter or anything that that is

01:15:40.105 --> 01:15:42.505
<v Speaker 1>you know, ends with something or whatever. And

01:15:42.505 --> 01:15:44.185
<v Speaker 1>we're working now on an extension where you

01:15:44.185 --> 01:15:45.144
<v Speaker 1>can even say,

01:15:46.105 --> 01:15:48.585
<v Speaker 1>you know, like, matching patterns within the value.

01:15:48.585 --> 01:15:51.224
<v Speaker 1>Right? So you can really do very complicated

01:15:51.224 --> 01:15:53.625
<v Speaker 1>pattern matching there to to select where you

01:15:53.625 --> 01:15:54.905
<v Speaker 1>wanna apply this template.

01:15:55.800 --> 01:15:57.239
<v Speaker 1>Yep. Awesome.

01:15:57.639 --> 01:15:58.280
<v Speaker 0>Yep.

01:15:58.440 --> 01:16:00.199
<v Speaker 0>Alright. So what's coming up next in this

01:16:00.199 --> 01:16:01.399
<v Speaker 0>tutorial then?

01:16:01.560 --> 01:16:03.719
<v Speaker 0>This eval is

01:16:04.119 --> 01:16:05.559
<v Speaker 1>Yeah. You can run that

01:16:05.880 --> 01:16:09.079
<v Speaker 1>or that, whatever, and then you run into

01:16:08.625 --> 01:16:09.264
<v Speaker 1>errors.

01:16:13.105 --> 01:16:15.105
<v Speaker 1>So this is the idea here that if

01:16:15.105 --> 01:16:17.985
<v Speaker 1>you write down these validation rules, right, like,

01:16:17.985 --> 01:16:19.024
<v Speaker 1>very often

01:16:20.960 --> 01:16:22.640
<v Speaker 1>so so so you you might run into

01:16:22.640 --> 01:16:24.800
<v Speaker 1>errors in your configuration, but you also might

01:16:24.800 --> 01:16:26.880
<v Speaker 1>run into errors in the rules that you've

01:16:26.880 --> 01:16:27.520
<v Speaker 1>written.

01:16:28.000 --> 01:16:28.960
<v Speaker 1>Right? So

01:16:30.080 --> 01:16:31.840
<v Speaker 1>I haven't run this demo in a very

01:16:31.840 --> 01:16:32.720
<v Speaker 1>long time. So,

01:16:33.945 --> 01:16:36.265
<v Speaker 1>yeah, so one of it is that component

01:16:36.265 --> 01:16:37.625
<v Speaker 1>isn't defined

01:16:37.625 --> 01:16:39.465
<v Speaker 1>everywhere. So if you go back to the

01:16:39.465 --> 01:16:40.185
<v Speaker 1>tutorial.

01:16:43.945 --> 01:16:47.160
<v Speaker 1>So it mentions that. Yep. So, basically, component

01:16:47.160 --> 01:16:48.280
<v Speaker 1>isn't defined

01:16:48.760 --> 01:16:51.080
<v Speaker 1>everywhere, so especially in the

01:16:52.600 --> 01:16:55.720
<v Speaker 1>so so yeah. So so not all subdirectories,

01:16:56.360 --> 01:16:58.280
<v Speaker 1>you know, not all files and all subdirectories

01:16:58.280 --> 01:16:59.960
<v Speaker 1>have this defined. So here you see we

01:16:59.960 --> 01:17:01.775
<v Speaker 1>have a constraint. Right? Let's say we always

01:17:01.775 --> 01:17:03.135
<v Speaker 1>want this component label,

01:17:04.335 --> 01:17:06.574
<v Speaker 1>but it's actually not specified everywhere.

01:17:06.815 --> 01:17:08.574
<v Speaker 1>So if you run the code below, we

01:17:08.574 --> 01:17:10.815
<v Speaker 1>actually create a small cube file in every

01:17:10.815 --> 01:17:11.534
<v Speaker 1>directory

01:17:11.695 --> 01:17:13.855
<v Speaker 1>where we define this

01:17:14.100 --> 01:17:16.820
<v Speaker 1>this component label. Right? So that's that's some

01:17:16.820 --> 01:17:19.460
<v Speaker 1>shell wizardry that's not specifically CUE.

01:17:19.620 --> 01:17:21.780
<v Speaker 0>Yeah. I think I I I got kinda

01:17:21.780 --> 01:17:23.700
<v Speaker 0>confused when I copied this and just pasted

01:17:23.700 --> 01:17:24.980
<v Speaker 0>it, but now I actually see what we're

01:17:24.980 --> 01:17:27.175
<v Speaker 0>doing. We've we've created just, like, some constraints

01:17:27.175 --> 01:17:29.015
<v Speaker 0>to check all of our services and deployments.

01:17:29.015 --> 01:17:31.574
<v Speaker 0>Okay. And we're expecting them to have a

01:17:31.574 --> 01:17:34.215
<v Speaker 0>piece of metadata label that is component with

01:17:34.215 --> 01:17:36.535
<v Speaker 0>a value. Yeah. And and not everybody not

01:17:36.535 --> 01:17:38.695
<v Speaker 1>all of the files have that. So Okay.

01:17:38.695 --> 01:17:40.935
<v Speaker 0>So this is just suggesting that we use

01:17:41.430 --> 01:17:42.550
<v Speaker 0>set magic.

01:17:44.630 --> 01:17:45.429
<v Speaker 0>Yeah.

01:17:52.790 --> 01:17:53.989
<v Speaker 0>Know what happened there.

01:17:55.555 --> 01:17:57.315
<v Speaker 0>Oh, yeah. It's Oh, no. It's about it.

01:17:57.315 --> 01:17:57.715
<v Speaker 0>Yeah.

01:18:06.115 --> 01:18:08.514
<v Speaker 1>So it's created all these little files. Yep.

01:18:08.515 --> 01:18:10.595
<v Speaker 0>So, yeah, it's Prox?

01:18:12.410 --> 01:18:14.490
<v Speaker 1>There seem to be something wrong. There should

01:18:14.490 --> 01:18:16.570
<v Speaker 1>be proxy, but but either way. So it

01:18:16.570 --> 01:18:18.250
<v Speaker 1>might look run into more problems.

01:18:19.290 --> 01:18:21.370
<v Speaker 0>Is that just me failing at copying and

01:18:21.370 --> 01:18:22.970
<v Speaker 0>pasting? That's what it is. Right? Yeah. Don't

01:18:22.970 --> 01:18:23.770
<v Speaker 1>know what happened there.

01:18:27.025 --> 01:18:29.505
<v Speaker 0>I wonder if when I ran it here,

01:18:30.385 --> 01:18:32.545
<v Speaker 0>if I potentially broke something.

01:18:32.945 --> 01:18:34.465
<v Speaker 0>Oh, I think I definitely have.

01:18:36.580 --> 01:18:38.660
<v Speaker 1>I can always do it by hands but

01:18:40.500 --> 01:18:42.500
<v Speaker 1>See, the directory is called proxy, so I

01:18:42.500 --> 01:18:43.700
<v Speaker 1>don't know why that's

01:18:44.580 --> 01:18:46.180
<v Speaker 1>You can change the proxy.

01:18:46.820 --> 01:18:47.940
<v Speaker 1>It's probably a good idea.

01:18:50.435 --> 01:18:52.195
<v Speaker 1>Then I don't know if it got wrong.

01:18:53.795 --> 01:18:55.474
<v Speaker 0>And I'm not even getting the star.

01:18:56.675 --> 01:18:58.835
<v Speaker 1>Maybe it's a shell incompatibility.

01:18:58.835 --> 01:19:00.594
<v Speaker 1>Who knows? Oh, yeah. I'm running

01:19:00.835 --> 01:19:03.235
<v Speaker 0>that shell, which I guess should mostly work.

01:19:03.690 --> 01:19:05.530
<v Speaker 0>It's not important. I I think we can

01:19:05.530 --> 01:19:07.929
<v Speaker 0>have covered a lot of cool stuff there.

01:19:08.969 --> 01:19:11.770
<v Speaker 0>And I'm worried that my failure to copy

01:19:11.770 --> 01:19:14.010
<v Speaker 0>and paste has done something very weird there,

01:19:14.570 --> 01:19:16.410
<v Speaker 0>especially the one I control seed, which was

01:19:16.410 --> 01:19:17.610
<v Speaker 0>halfway through, like I said.

01:19:18.885 --> 01:19:20.485
<v Speaker 1>Yeah. Yeah. I'm not sure.

01:19:21.205 --> 01:19:23.445
<v Speaker 0>Alright. Awesome. I will

01:19:24.165 --> 01:19:25.364
<v Speaker 0>pop that away.

01:19:26.645 --> 01:19:28.485
<v Speaker 0>And we'll jump over to your last demo

01:19:28.485 --> 01:19:30.005
<v Speaker 0>and we'll we'll finish up. If

01:19:30.590 --> 01:19:32.349
<v Speaker 0>anyone has any questions,

01:19:32.829 --> 01:19:34.829
<v Speaker 0>feel free to jump them into the comment

01:19:34.829 --> 01:19:35.550
<v Speaker 0>section,

01:19:36.030 --> 01:19:37.710
<v Speaker 0>and we'll be finishing up in the next

01:19:37.710 --> 01:19:38.510
<v Speaker 0>five to ten minutes.

01:19:45.705 --> 01:19:47.545
<v Speaker 0>You looking for your window?

01:19:50.345 --> 01:19:51.465
<v Speaker 0>Or have you frozen?

01:19:52.185 --> 01:19:53.385
<v Speaker 0>Oh, no. You're there. I'm

01:19:54.025 --> 01:19:55.545
<v Speaker 1>here. So shall I start

01:19:56.585 --> 01:19:57.785
<v Speaker 0>Yeah. I think you said you had to

01:19:57.785 --> 01:20:00.985
<v Speaker 0>just pick a five minute Yeah. Thing. So

01:20:00.620 --> 01:20:02.860
<v Speaker 0>we'll finish with that, and then we'll we'll

01:20:02.860 --> 01:20:04.220
<v Speaker 0>do a quick recap, and we'll end it

01:20:04.220 --> 01:20:06.540
<v Speaker 0>there. Yeah. Yeah. The Kubernetes demo is is

01:20:06.540 --> 01:20:08.620
<v Speaker 1>quite long, actually, and it's it shows you

01:20:08.620 --> 01:20:10.460
<v Speaker 1>a lot of things of that can go

01:20:10.460 --> 01:20:12.700
<v Speaker 1>wrong. And and so the idea is that,

01:20:12.700 --> 01:20:12.860
<v Speaker 1>basically,

01:20:14.485 --> 01:20:15.845
<v Speaker 1>by the end of it, which is, like,

01:20:15.845 --> 01:20:17.525
<v Speaker 1>twenty minutes, if you run through the commands,

01:20:17.525 --> 01:20:18.805
<v Speaker 1>like, you see that you

01:20:19.605 --> 01:20:20.485
<v Speaker 1>reduced

01:20:20.485 --> 01:20:23.445
<v Speaker 1>the amount of configuration by half, roughly,

01:20:24.565 --> 01:20:26.405
<v Speaker 1>or maybe slightly more, slightly less. I I

01:20:26.405 --> 01:20:28.325
<v Speaker 1>I don't remember. But it's, you know, like,

01:20:28.325 --> 01:20:30.990
<v Speaker 1>this whole repetitive trim thing, like like, really

01:20:30.990 --> 01:20:31.870
<v Speaker 1>reduces.

01:20:32.670 --> 01:20:34.030
<v Speaker 1>And you can see we start with about

01:20:34.030 --> 01:20:36.270
<v Speaker 1>1,800 lines, and by the end, it's it's

01:20:36.270 --> 01:20:37.790
<v Speaker 1>like considerably less.

01:20:39.230 --> 01:20:41.870
<v Speaker 0>And that's just stripping down the boilerplate and,

01:20:41.870 --> 01:20:43.390
<v Speaker 0>you know, making things reusable

01:20:43.390 --> 01:20:44.270
<v Speaker 0>whenever possible.

01:20:44.925 --> 01:20:47.405
<v Speaker 0>Just it cleans things up a lot, definitely.

01:20:48.525 --> 01:20:49.485
<v Speaker 0>Okay.

01:20:49.485 --> 01:20:52.284
<v Speaker 0>Julian says he has a a thousand questions.

01:20:52.284 --> 01:20:53.804
<v Speaker 0>Well, we'll maybe try and answer a couple

01:20:53.804 --> 01:20:55.405
<v Speaker 0>of them. Feel free to drop them. So

01:20:55.405 --> 01:20:57.645
<v Speaker 1>so so I'll I'll give this this one

01:20:57.645 --> 01:20:58.284
<v Speaker 1>demo

01:20:58.525 --> 01:20:58.764
<v Speaker 1>first.

01:20:59.770 --> 01:21:00.489
<v Speaker 1>So

01:21:02.889 --> 01:21:05.689
<v Speaker 1>yep. It's a clean thing. So let me

01:21:06.250 --> 01:21:07.449
<v Speaker 1>just run.

01:21:08.010 --> 01:21:10.250
<v Speaker 1>So what I'm doing here so so this

01:21:10.250 --> 01:21:13.130
<v Speaker 1>is basically to to show that, really, there's

01:21:13.130 --> 01:21:14.730
<v Speaker 1>a logic engine behind it.

01:21:16.385 --> 01:21:18.705
<v Speaker 1>And and there you know, like, it really

01:21:18.705 --> 01:21:20.625
<v Speaker 1>doesn't you can use CUE for things that

01:21:20.625 --> 01:21:23.264
<v Speaker 1>have otherwise nothing to do with CUE.

01:21:23.505 --> 01:21:24.864
<v Speaker 1>So here I have a piece of Go

01:21:24.864 --> 01:21:25.985
<v Speaker 1>code, which has,

01:21:26.305 --> 01:21:26.864
<v Speaker 1>types

01:21:27.829 --> 01:21:29.829
<v Speaker 1>and validation code.

01:21:30.150 --> 01:21:32.389
<v Speaker 1>And what I wanna do now is to,

01:21:33.670 --> 01:21:36.389
<v Speaker 1>generate open API from this. Right?

01:21:36.789 --> 01:21:37.510
<v Speaker 1>So,

01:21:38.630 --> 01:21:41.110
<v Speaker 1>basically, the first thing I have the commands

01:21:41.110 --> 01:21:42.309
<v Speaker 1>handy. So so,

01:21:45.725 --> 01:21:48.205
<v Speaker 1>course, nothing. Okay. Fine. I should do it

01:21:48.205 --> 01:21:49.005
<v Speaker 1>by hand.

01:21:50.125 --> 01:21:51.565
<v Speaker 1>Gets go

01:21:52.605 --> 01:21:52.925
<v Speaker 1>local.

01:21:55.020 --> 01:21:57.739
<v Speaker 1>Do I have to yeah. Current directory, I

01:21:57.739 --> 01:21:59.579
<v Speaker 1>guess. Let's see if that was the command.

01:21:59.579 --> 01:22:00.459
<v Speaker 1>I think so.

01:22:00.860 --> 01:22:02.539
<v Speaker 1>So if I run get go, what it

01:22:02.539 --> 01:22:04.939
<v Speaker 1>does, basically, it analyzes this Go code.

01:22:05.420 --> 01:22:06.859
<v Speaker 1>So this already works.

01:22:08.300 --> 01:22:09.099
<v Speaker 1>And then

01:22:09.340 --> 01:22:10.860
<v Speaker 1>generates

01:22:11.795 --> 01:22:12.994
<v Speaker 1>this restaurant

01:22:13.074 --> 01:22:15.474
<v Speaker 1>gen Go gen queue.

01:22:16.355 --> 01:22:18.114
<v Speaker 1>And what you see here is this nicely

01:22:18.114 --> 01:22:18.995
<v Speaker 1>documented,

01:22:18.995 --> 01:22:20.434
<v Speaker 1>you know, like like,

01:22:21.475 --> 01:22:23.554
<v Speaker 1>queue representation of the Go types in this

01:22:23.554 --> 01:22:26.114
<v Speaker 1>file. So this is nothing really too spectacular.

01:22:26.114 --> 01:22:26.275
<v Speaker 1>Right?

01:22:27.160 --> 01:22:28.920
<v Speaker 1>What you can see, though, is that I

01:22:28.920 --> 01:22:30.920
<v Speaker 1>also have this validation code

01:22:31.800 --> 01:22:33.639
<v Speaker 1>defined on table,

01:22:35.160 --> 01:22:36.840
<v Speaker 1>which has constraints. Right? And I would like

01:22:36.840 --> 01:22:38.920
<v Speaker 1>to have these constraints represented in queue as

01:22:38.920 --> 01:22:39.320
<v Speaker 1>well.

01:22:39.800 --> 01:22:40.440
<v Speaker 1>So

01:22:40.935 --> 01:22:43.574
<v Speaker 1>I love, you know, like, think tinkering with

01:22:43.574 --> 01:22:44.854
<v Speaker 1>SSA.

01:22:46.135 --> 01:22:46.695
<v Speaker 1>So

01:22:47.415 --> 01:22:49.815
<v Speaker 1>so what I wrote is this little SSA

01:22:49.815 --> 01:22:50.934
<v Speaker 1>analyzer.

01:22:52.375 --> 01:22:54.375
<v Speaker 1>What it basically, what it does is first

01:22:54.150 --> 01:22:55.590
<v Speaker 1>tries to identify

01:22:55.590 --> 01:22:57.190
<v Speaker 1>a validation code.

01:22:58.310 --> 01:23:00.949
<v Speaker 1>And the way it does that is is

01:23:00.949 --> 01:23:03.190
<v Speaker 1>if a code has no side effects and

01:23:03.190 --> 01:23:05.750
<v Speaker 1>returns an error, it consider its validation code.

01:23:05.750 --> 01:23:07.625
<v Speaker 1>And then I can see, of course, it's

01:23:07.625 --> 01:23:09.225
<v Speaker 1>like, well, this is a method on table

01:23:09.225 --> 01:23:11.225
<v Speaker 1>that validates or takes table as a first

01:23:11.225 --> 01:23:12.345
<v Speaker 1>argument either

01:23:12.585 --> 01:23:13.145
<v Speaker 1>way.

01:23:13.385 --> 01:23:15.465
<v Speaker 1>Right? So this must be something that validates

01:23:15.465 --> 01:23:16.265
<v Speaker 1>table.

01:23:17.145 --> 01:23:19.225
<v Speaker 1>And then, basically, what it runs what it

01:23:19.225 --> 01:23:21.510
<v Speaker 1>does, it runs over all possible paths in

01:23:21.510 --> 01:23:22.469
<v Speaker 1>the SSA,

01:23:22.710 --> 01:23:24.869
<v Speaker 1>you know, representation of that code

01:23:25.190 --> 01:23:26.710
<v Speaker 1>and tries

01:23:26.710 --> 01:23:28.710
<v Speaker 1>to find cases where it knows it will

01:23:28.710 --> 01:23:31.590
<v Speaker 1>return an error and then sort of logically

01:23:31.590 --> 01:23:35.030
<v Speaker 1>reasons backwards to get, to get facts, from

01:23:35.030 --> 01:23:36.470
<v Speaker 1>that. Right? So let's do that now.

01:23:37.325 --> 01:23:40.525
<v Speaker 1>And this has been, run also on the,

01:23:41.085 --> 01:23:42.925
<v Speaker 1>Istio code base for which I did some

01:23:42.925 --> 01:23:43.725
<v Speaker 1>analysis.

01:23:44.605 --> 01:23:47.085
<v Speaker 1>And I was able to, so so just

01:23:47.085 --> 01:23:48.285
<v Speaker 1>to give you an idea of the coverage,

01:23:48.285 --> 01:23:50.360
<v Speaker 1>I was able to get a % of

01:23:50.360 --> 01:23:52.199
<v Speaker 1>the validation code. Right? So the,

01:23:52.679 --> 01:23:55.159
<v Speaker 1>the the accuracy, both recall and precision, there

01:23:55.159 --> 01:23:57.560
<v Speaker 1>was a %. And about 95%

01:23:57.560 --> 01:23:59.559
<v Speaker 1>of all possible code paths,

01:23:59.800 --> 01:24:01.719
<v Speaker 1>I was able to determine whether it would

01:24:01.719 --> 01:24:03.719
<v Speaker 1>return an error or not. Right? Then the

01:24:03.719 --> 01:24:04.520
<v Speaker 1>rest sort of was,

01:24:05.434 --> 01:24:07.195
<v Speaker 1>the code sort of had to give up.

01:24:07.835 --> 01:24:10.234
<v Speaker 1>So if we look at what this produced

01:24:13.594 --> 01:24:15.994
<v Speaker 1>so this was, yes, s s a dot

01:24:15.994 --> 01:24:16.315
<v Speaker 1>q.

01:24:17.360 --> 01:24:20.239
<v Speaker 1>This produces something else, and it's, so this

01:24:20.239 --> 01:24:22.159
<v Speaker 1>is only one constraint. Right? So this is

01:24:22.159 --> 01:24:23.920
<v Speaker 1>quite simple. But if you if you have

01:24:23.920 --> 01:24:26.559
<v Speaker 1>many constraints, it becomes quite barfy. Right? Like,

01:24:26.559 --> 01:24:28.239
<v Speaker 1>you get all these weird because it's out

01:24:28.239 --> 01:24:30.880
<v Speaker 1>of a logical negation, it gets this dump

01:24:30.880 --> 01:24:32.960
<v Speaker 1>of of all kinds of facts.

01:24:35.014 --> 01:24:37.255
<v Speaker 1>And then, basically, if you wanna combine that

01:24:37.255 --> 01:24:38.614
<v Speaker 1>into a single table,

01:24:39.255 --> 01:24:41.494
<v Speaker 1>right, we now do CUE

01:24:41.655 --> 01:24:43.735
<v Speaker 1>DEF, which means schema. Right? I don't wanna

01:24:43.735 --> 01:24:45.415
<v Speaker 1>get to the concrete data. I wanna define

01:24:45.415 --> 01:24:46.054
<v Speaker 1>a schema.

01:24:46.460 --> 01:24:48.460
<v Speaker 1>So we can say CUE DEF,

01:24:48.940 --> 01:24:51.820
<v Speaker 1>SSA, and what what's the other one? Restaurants,

01:24:52.300 --> 01:24:52.940
<v Speaker 1>go.

01:24:54.780 --> 01:24:57.020
<v Speaker 1>Now you see we have the same schema

01:24:57.020 --> 01:24:58.059
<v Speaker 1>documented,

01:24:58.060 --> 01:24:59.900
<v Speaker 1>right, with the constraints,

01:25:00.300 --> 01:25:01.260
<v Speaker 1>inside now.

01:25:02.145 --> 01:25:04.145
<v Speaker 1>And then, of course, I can also do

01:25:04.145 --> 01:25:05.824
<v Speaker 1>out open API.

01:25:06.385 --> 01:25:08.625
<v Speaker 1>Now we have that same schema in open

01:25:08.625 --> 01:25:10.785
<v Speaker 1>API. So here you can see we have

01:25:10.785 --> 01:25:11.344
<v Speaker 1>a

01:25:11.745 --> 01:25:12.864
<v Speaker 1>open API,

01:25:14.145 --> 01:25:17.329
<v Speaker 1>you know, like, definition of the original,

01:25:17.650 --> 01:25:18.530
<v Speaker 1>GoCodes

01:25:18.770 --> 01:25:22.530
<v Speaker 1>without any further specification from the user. Right?

01:25:22.530 --> 01:25:23.489
<v Speaker 1>So that's what

01:25:23.889 --> 01:25:25.810
<v Speaker 1>that's what happened here. So this is kind

01:25:25.810 --> 01:25:26.530
<v Speaker 1>of the

01:25:26.849 --> 01:25:29.730
<v Speaker 1>thing you can do with this with this

01:25:30.645 --> 01:25:33.205
<v Speaker 1>CUE ecosystem. Right? It's the idea.

01:25:33.845 --> 01:25:34.645
<v Speaker 0>Damn.

01:25:34.965 --> 01:25:36.485
<v Speaker 0>So I just wanna make sure I understood

01:25:36.485 --> 01:25:39.765
<v Speaker 0>that right. That was just random not random,

01:25:39.765 --> 01:25:41.525
<v Speaker 0>but, you know, that was just go code

01:25:41.525 --> 01:25:44.780
<v Speaker 0>where using CUE get go, it was doing

01:25:44.780 --> 01:25:47.020
<v Speaker 0>static analysis of that code to work out

01:25:47.020 --> 01:25:49.340
<v Speaker 0>what the constraints were on it from the

01:25:49.340 --> 01:25:51.500
<v Speaker 0>different functions that interact with the data and

01:25:51.500 --> 01:25:53.260
<v Speaker 0>then generate in the queue constraints.

01:25:53.660 --> 01:25:54.300
<v Speaker 1>Yep.

01:25:54.780 --> 01:25:57.020
<v Speaker 0>You then merge the or unified, I guess,

01:25:57.020 --> 01:25:58.635
<v Speaker 0>would be the correct or unified the two

01:25:58.635 --> 01:26:00.474
<v Speaker 0>different queue files and then output it in

01:26:00.474 --> 01:26:01.754
<v Speaker 0>open API schema.

01:26:02.395 --> 01:26:05.275
<v Speaker 1>Document it. Yes. Yeah. Yeah. That's the, yeah,

01:26:05.275 --> 01:26:06.715
<v Speaker 1>that's the idea. This

01:26:07.434 --> 01:26:09.994
<v Speaker 1>is even though, you know, like, in my

01:26:09.994 --> 01:26:10.715
<v Speaker 1>analysis

01:26:10.875 --> 01:26:12.715
<v Speaker 1>so I I was able to extract these

01:26:12.715 --> 01:26:13.114
<v Speaker 1>facts

01:26:13.680 --> 01:26:16.240
<v Speaker 1>for 95% of the code paths. Right? Like,

01:26:16.240 --> 01:26:17.680
<v Speaker 1>that that doesn't mean,

01:26:18.320 --> 01:26:20.400
<v Speaker 1>it's already implemented. Right? Because now you have

01:26:20.400 --> 01:26:22.720
<v Speaker 1>to translate that to to something concrete.

01:26:23.120 --> 01:26:25.600
<v Speaker 1>And that's, that's doable, but you have, like,

01:26:25.600 --> 01:26:26.400
<v Speaker 1>you know, hundreds

01:26:26.845 --> 01:26:28.525
<v Speaker 1>or about a hundred or so, like, in

01:26:28.525 --> 01:26:31.245
<v Speaker 1>that order, like like, different cases you in

01:26:31.245 --> 01:26:32.845
<v Speaker 1>edge cases you have to handle. Right? So

01:26:32.845 --> 01:26:34.364
<v Speaker 1>it's kinda tedious to implement,

01:26:34.845 --> 01:26:37.725
<v Speaker 1>but it's definitely possible. And and, you know,

01:26:38.605 --> 01:26:40.925
<v Speaker 1>also, it didn't take too long. It runs,

01:26:40.925 --> 01:26:42.469
<v Speaker 1>like, within a minute, right, on the on

01:26:42.469 --> 01:26:44.390
<v Speaker 1>the Istio code, more like twenty seconds or

01:26:44.390 --> 01:26:47.350
<v Speaker 1>so. So it's it's it's quite excessive to

01:26:47.350 --> 01:26:49.190
<v Speaker 1>go for all possible code paths, but it's

01:26:49.190 --> 01:26:50.389
<v Speaker 1>it's definitely doable.

01:26:51.429 --> 01:26:54.230
<v Speaker 0>Yeah. There there's just so much magic there.

01:26:54.045 --> 01:26:55.645
<v Speaker 0>There. I think I'm actually gonna need time

01:26:55.645 --> 01:26:57.165
<v Speaker 0>to think that one through and understand it.

01:26:57.165 --> 01:26:58.685
<v Speaker 0>But the I mean, the applications of that

01:26:58.685 --> 01:27:01.324
<v Speaker 0>across a whole variety of different code bases

01:27:01.324 --> 01:27:04.205
<v Speaker 0>is a is a pretty cool thing. Very

01:27:04.205 --> 01:27:05.005
<v Speaker 0>exciting. Yep.

01:27:06.045 --> 01:27:06.364
<v Speaker 0>Alright.

01:27:07.290 --> 01:27:08.889
<v Speaker 0>Sorry. Question. I

01:27:10.170 --> 01:27:12.010
<v Speaker 0>think everyone is speechless. I don't think we

01:27:12.010 --> 01:27:13.130
<v Speaker 0>have any more questions.

01:27:13.530 --> 01:27:15.930
<v Speaker 0>There's not been anything since the the the

01:27:15.930 --> 01:27:18.090
<v Speaker 0>magic static analysis stuff.

01:27:18.490 --> 01:27:19.770
<v Speaker 0>So I think what we'll do is,

01:27:20.405 --> 01:27:22.005
<v Speaker 0>I mean, all of that was great. Thank

01:27:22.005 --> 01:27:23.364
<v Speaker 0>you so much for taking the time today

01:27:23.364 --> 01:27:25.285
<v Speaker 0>to to join me, you know, not just

01:27:25.285 --> 01:27:26.885
<v Speaker 0>introduce us to CUE, but show us some

01:27:26.885 --> 01:27:28.885
<v Speaker 0>stuff that's coming next and and even just

01:27:28.885 --> 01:27:30.805
<v Speaker 0>getting some of that experience out of your

01:27:30.805 --> 01:27:32.325
<v Speaker 0>head to understand the why as well. I

01:27:32.325 --> 01:27:33.844
<v Speaker 0>think it's just been completely invaluable.

01:27:34.550 --> 01:27:36.790
<v Speaker 0>So thank you very much. I'll let you

01:27:36.790 --> 01:27:38.470
<v Speaker 0>get back to the rest of your day.

01:27:38.470 --> 01:27:40.390
<v Speaker 0>If there are any more questions, people can

01:27:40.390 --> 01:27:42.710
<v Speaker 0>ask them in the YouTube comments. I'll do

01:27:42.710 --> 01:27:44.150
<v Speaker 0>my best to relay them on or join

01:27:44.150 --> 01:27:45.910
<v Speaker 0>the Discord, and we'll take it from there.

01:27:46.150 --> 01:27:47.910
<v Speaker 0>So, Marcel, thank you again. Have a great

01:27:47.910 --> 01:27:49.350
<v Speaker 0>day. We'll speak to Thank you for having

01:27:49.350 --> 01:27:51.655
<v Speaker 1>me. My pleasure. Yeah. If anybody has questions,

01:27:51.655 --> 01:27:53.015
<v Speaker 1>feel free to contact me.

01:27:54.055 --> 01:27:55.335
<v Speaker 1>GitHub discussions,

01:27:55.415 --> 01:27:57.335
<v Speaker 1>there's you can ask questions there. That's our

01:27:57.335 --> 01:28:00.535
<v Speaker 1>main portal for asking questions now. So Yep.

01:28:00.535 --> 01:28:02.055
<v Speaker 0>There are links to all of this and

01:28:02.055 --> 01:28:04.500
<v Speaker 0>the description the video to the CUE repository

01:28:04.500 --> 01:28:07.300
<v Speaker 0>to Marcel's Twitter, and I think there's even

01:28:07.300 --> 01:28:09.460
<v Speaker 0>a link to the CUE community Slack channel

01:28:09.460 --> 01:28:10.900
<v Speaker 0>as well. So lots of way for people

01:28:10.900 --> 01:28:13.460
<v Speaker 0>to get involved, get in touch. Again,

01:28:13.460 --> 01:28:14.739
<v Speaker 0>thank you. Have a good day. I'll speak

01:28:14.739 --> 01:28:16.420
<v Speaker 0>to you soon. Well, thanks.
