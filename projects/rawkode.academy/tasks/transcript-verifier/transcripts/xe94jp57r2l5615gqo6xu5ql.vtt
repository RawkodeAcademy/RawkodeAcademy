WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 19f39224-3ac2-4a15-beb4-7f545d463e15
Created: 2025-04-29T17:29:11.842Z
Duration: 6113.902
Channels: 1

00:01:02.685 --> 00:01:05.565
<v Speaker 0>Hello and welcome to the Rawkode Academy and

00:01:05.565 --> 00:01:08.685
<v Speaker 0>today's episode of Rawkode Live. I'm your host,

00:01:08.765 --> 00:01:10.685
<v Speaker 0>David Flanagan. Although, of course, you'll know me

00:01:10.685 --> 00:01:12.685
<v Speaker 0>as Rawkode across the internets.

00:01:13.165 --> 00:01:15.165
<v Speaker 0>Before we begin on today's session, taking a

00:01:15.165 --> 00:01:16.925
<v Speaker 0>look at Docker Compose v two, I would

00:01:16.925 --> 00:01:19.590
<v Speaker 0>encourage you to like, share, comment, subscribe

00:01:19.750 --> 00:01:22.070
<v Speaker 0>this video, other videos, the channel, all of

00:01:22.070 --> 00:01:23.990
<v Speaker 0>the bits in between. This helps other people

00:01:23.990 --> 00:01:26.230
<v Speaker 0>find the content and makes YouTube's algorithm like

00:01:26.230 --> 00:01:27.270
<v Speaker 0>me a little bit more.

00:01:27.670 --> 00:01:29.590
<v Speaker 0>We also have a membership program available at

00:01:29.590 --> 00:01:31.910
<v Speaker 0>the academy with an InfloxDB course and flight.

00:01:31.995 --> 00:01:33.755
<v Speaker 0>Feel free to check out the membership options

00:01:33.755 --> 00:01:35.355
<v Speaker 0>on Rawkode.live.

00:01:35.755 --> 00:01:37.275
<v Speaker 0>And if you wanna come and chat with

00:01:37.275 --> 00:01:40.475
<v Speaker 0>over 500 other Docker Kubernetes cloud native

00:01:40.635 --> 00:01:42.875
<v Speaker 0>developers and technologists, then come and join us

00:01:42.875 --> 00:01:45.115
<v Speaker 0>on the Discord at Rawkode.chat.

00:01:45.970 --> 00:01:49.009
<v Speaker 0>Alright. Housekeeping over. Let's jump over to introduce

00:01:49.729 --> 00:01:51.729
<v Speaker 0>Brett Fisher, who needs no introduction, but I'm

00:01:51.729 --> 00:01:53.170
<v Speaker 0>gonna give you a little one anyway.

00:01:53.570 --> 00:01:55.810
<v Speaker 0>Brett Fisher is the author of Docker Mastery

00:01:55.810 --> 00:01:56.369
<v Speaker 0>and

00:01:56.689 --> 00:01:59.250
<v Speaker 0>has a really cool channel called Brett Brett

00:01:59.250 --> 00:02:01.925
<v Speaker 0>Fisher, Docker, and DevOps, A channel that I'm

00:02:01.925 --> 00:02:03.605
<v Speaker 0>sure we've all seen lots of times, love

00:02:03.605 --> 00:02:05.285
<v Speaker 0>the content, and I'm very excited to have

00:02:05.285 --> 00:02:06.885
<v Speaker 0>you on the show today. So hey, Brett.

00:02:06.885 --> 00:02:07.605
<v Speaker 0>How are you?

00:02:08.005 --> 00:02:09.285
<v Speaker 1>Glad to be here, David.

00:02:09.845 --> 00:02:12.325
<v Speaker 1>It's been too long. We haven't I don't

00:02:12.325 --> 00:02:13.605
<v Speaker 1>know why we haven't done this earlier, but

00:02:13.605 --> 00:02:15.205
<v Speaker 1>not lack not to the lack of your

00:02:15.205 --> 00:02:15.445
<v Speaker 1>trying.

00:02:16.430 --> 00:02:19.550
<v Speaker 1>I am bad at follow-up, so I'm excited

00:02:19.550 --> 00:02:21.310
<v Speaker 1>to finally do this. Well, it's good that

00:02:21.310 --> 00:02:22.350
<v Speaker 0>we get to spend a little bit of

00:02:22.350 --> 00:02:25.150
<v Speaker 0>time together today and talk about Docker Compose

00:02:25.150 --> 00:02:26.830
<v Speaker 0>and anything else that pops up as we

00:02:26.830 --> 00:02:28.190
<v Speaker 0>go. So, yeah, I'm really excited.

00:02:29.055 --> 00:02:30.655
<v Speaker 0>Give you a little introduction, but to anyone

00:02:30.655 --> 00:02:32.335
<v Speaker 0>that's watching that is not familiar, do you

00:02:32.335 --> 00:02:34.655
<v Speaker 0>wanna just follow-up with who you are and

00:02:34.655 --> 00:02:36.255
<v Speaker 0>a little bit more information if you will?

00:02:37.295 --> 00:02:37.935
<v Speaker 1>Yes.

00:02:38.655 --> 00:02:39.935
<v Speaker 1>Sure. I

00:02:41.150 --> 00:02:43.070
<v Speaker 1>I've been in IT for almost thirty years,

00:02:43.070 --> 00:02:44.750
<v Speaker 1>so I'm getting pretty old. I got the

00:02:44.750 --> 00:02:46.270
<v Speaker 1>the gray hair thing going on.

00:02:46.830 --> 00:02:47.390
<v Speaker 1>And

00:02:47.950 --> 00:02:49.070
<v Speaker 1>I like to say I've been I was

00:02:49.070 --> 00:02:50.590
<v Speaker 1>doing DevOps before it was called DevOps because

00:02:50.590 --> 00:02:51.630
<v Speaker 1>we didn't know what to call it. Right?

00:02:51.630 --> 00:02:52.510
<v Speaker 1>It was just kind of

00:02:53.035 --> 00:02:53.835
<v Speaker 1>optimizing

00:02:53.835 --> 00:02:54.475
<v Speaker 1>and

00:02:54.715 --> 00:02:56.155
<v Speaker 1>automating as many things as we could. Of

00:02:56.155 --> 00:02:57.915
<v Speaker 1>course, that was the dark days of the

00:02:57.915 --> 00:03:00.475
<v Speaker 1>the February when it was everything was hard

00:03:00.475 --> 00:03:01.115
<v Speaker 1>to do.

00:03:02.555 --> 00:03:05.595
<v Speaker 1>And about a year into Docker existing,

00:03:05.595 --> 00:03:07.515
<v Speaker 1>I realized it was like the next wave

00:03:07.515 --> 00:03:09.680
<v Speaker 1>of tech. I just was convinced that it

00:03:09.680 --> 00:03:11.520
<v Speaker 1>was going to be everywhere and everyone was

00:03:11.520 --> 00:03:13.920
<v Speaker 1>gonna use it. And instead of being

00:03:14.320 --> 00:03:16.880
<v Speaker 1>sort of an an implementer of change, I

00:03:16.880 --> 00:03:18.400
<v Speaker 1>wanted to be a part of it. I

00:03:18.400 --> 00:03:19.920
<v Speaker 1>wanted to, like, influence it, and

00:03:21.275 --> 00:03:23.515
<v Speaker 1>and I love teaching. I love sharing with

00:03:23.515 --> 00:03:25.755
<v Speaker 1>others. No matter what job or role I'm

00:03:25.755 --> 00:03:27.675
<v Speaker 1>in in an organization, I'm always trying to

00:03:27.675 --> 00:03:30.235
<v Speaker 1>share information and learn from others and collaborate.

00:03:30.235 --> 00:03:30.715
<v Speaker 1>So

00:03:31.115 --> 00:03:33.835
<v Speaker 1>I did that. And then eventually, I I

00:03:33.915 --> 00:03:35.115
<v Speaker 1>created a course. I got to be a

00:03:35.115 --> 00:03:36.075
<v Speaker 1>Docker captain. They

00:03:36.760 --> 00:03:39.080
<v Speaker 1>gave me that title because I wouldn't shut

00:03:39.080 --> 00:03:40.760
<v Speaker 1>up about it, and I wouldn't stop bugging

00:03:40.760 --> 00:03:41.240
<v Speaker 1>them.

00:03:41.640 --> 00:03:43.239
<v Speaker 1>And then, you know, here we are today.

00:03:43.239 --> 00:03:43.960
<v Speaker 1>I've got

00:03:44.680 --> 00:03:46.680
<v Speaker 1>a team of people that help me manage

00:03:46.680 --> 00:03:48.680
<v Speaker 1>over a quarter of a million people in

00:03:48.680 --> 00:03:49.799
<v Speaker 1>a 80

00:03:49.799 --> 00:03:51.480
<v Speaker 1>some countries on my courses.

00:03:52.725 --> 00:03:54.645
<v Speaker 1>Thousands of people every month in there doing

00:03:54.645 --> 00:03:57.125
<v Speaker 1>that, and it's really it's fun. It's exciting.

00:03:57.445 --> 00:03:59.205
<v Speaker 1>I also still do consulting. So I'm still

00:03:59.205 --> 00:04:01.365
<v Speaker 1>a DevOps consultant because I like to do

00:04:01.365 --> 00:04:04.565
<v Speaker 1>too many things all at once. And so

00:04:04.020 --> 00:04:05.620
<v Speaker 1>I'm always learning I'm always trying to learn

00:04:05.620 --> 00:04:07.460
<v Speaker 1>new stuff, especially in the real world.

00:04:07.780 --> 00:04:09.300
<v Speaker 1>I think like a lot of us,

00:04:09.620 --> 00:04:11.460
<v Speaker 1>you know, I teach what I know and

00:04:11.460 --> 00:04:12.580
<v Speaker 1>I teach what I've done.

00:04:12.980 --> 00:04:14.900
<v Speaker 1>So it's hard for me to just approach

00:04:14.900 --> 00:04:17.779
<v Speaker 1>a topic purely for educational purposes. I really

00:04:18.185 --> 00:04:19.545
<v Speaker 1>wanna get my hands on and all that

00:04:19.545 --> 00:04:22.025
<v Speaker 1>stuff. So, I'm always like, this year, if

00:04:22.025 --> 00:04:23.385
<v Speaker 1>you've been on if you've my live show,

00:04:23.385 --> 00:04:25.145
<v Speaker 1>I won't show up about things like GitHub

00:04:25.145 --> 00:04:27.225
<v Speaker 1>Actions and GitOps and,

00:04:27.545 --> 00:04:29.625
<v Speaker 1>automation essentially of all things

00:04:30.120 --> 00:04:32.360
<v Speaker 1>in the DevOps space or even more into

00:04:32.360 --> 00:04:34.600
<v Speaker 1>the ops space. But I I come at

00:04:34.600 --> 00:04:36.120
<v Speaker 1>this a little bit different too because I

00:04:36.280 --> 00:04:37.400
<v Speaker 1>I'm an ops guy

00:04:38.440 --> 00:04:40.440
<v Speaker 1>that lives in a developer world. And a

00:04:40.440 --> 00:04:41.240
<v Speaker 1>lot of times,

00:04:41.639 --> 00:04:45.134
<v Speaker 1>my perspective is slightly skewed from developer tooling

00:04:45.134 --> 00:04:47.534
<v Speaker 1>because I'm coming at it from that operator

00:04:47.534 --> 00:04:48.335
<v Speaker 1>mindset.

00:04:48.655 --> 00:04:49.775
<v Speaker 1>But it's great because I get to hang

00:04:49.775 --> 00:04:50.815
<v Speaker 1>out with a lot people that have different

00:04:50.815 --> 00:04:52.414
<v Speaker 1>views than me, it's that's always a lot

00:04:52.414 --> 00:04:54.095
<v Speaker 1>of fun. Awesome.

00:04:54.175 --> 00:04:55.694
<v Speaker 0>Thank you for sharing all that.

00:04:56.350 --> 00:04:58.110
<v Speaker 0>I'm gonna throw a random question that, you

00:04:58.110 --> 00:05:00.910
<v Speaker 0>know, just since you early prediction of Docker

00:05:00.910 --> 00:05:02.670
<v Speaker 0>being a game changing technology.

00:05:02.990 --> 00:05:03.310
<v Speaker 0>Like

00:05:04.350 --> 00:05:06.830
<v Speaker 0>let's remove Docker from the equation. Let's remove

00:05:06.830 --> 00:05:09.390
<v Speaker 0>Kubernetes from the occasion. What's that next big

00:05:09.390 --> 00:05:11.445
<v Speaker 0>one? Is there anything you could add on

00:05:11.445 --> 00:05:12.965
<v Speaker 0>that you're you're playing with or you think

00:05:12.965 --> 00:05:14.245
<v Speaker 0>it's gonna be really cool in the next

00:05:14.245 --> 00:05:14.965
<v Speaker 0>five years?

00:05:15.445 --> 00:05:17.365
<v Speaker 1>Yeah. It's one I

00:05:18.645 --> 00:05:19.845
<v Speaker 1>don't know. It could be a lot of

00:05:19.845 --> 00:05:21.845
<v Speaker 1>things. Like, you could I I have a

00:05:21.845 --> 00:05:23.525
<v Speaker 1>hard time figuring out what would be as

00:05:23.525 --> 00:05:25.045
<v Speaker 1>big, and it's not so much Docker the

00:05:25.045 --> 00:05:27.509
<v Speaker 1>tool. Right? Like to me, what I saw

00:05:27.509 --> 00:05:29.349
<v Speaker 1>was that what I talk about is the

00:05:29.349 --> 00:05:31.509
<v Speaker 1>three big innovations of containers. It was, and

00:05:31.509 --> 00:05:33.030
<v Speaker 1>Docker kinda got them all right to begin

00:05:33.030 --> 00:05:35.430
<v Speaker 1>with, the idea of the image format, right?

00:05:35.430 --> 00:05:37.350
<v Speaker 1>So like those tarball layered

00:05:37.830 --> 00:05:41.275
<v Speaker 1>read only sort of SHA hashed objects that

00:05:41.275 --> 00:05:44.155
<v Speaker 1>you can send around and easily transfer from

00:05:44.155 --> 00:05:45.915
<v Speaker 1>machine to machine in a reproducible format. Like,

00:05:45.915 --> 00:05:48.875
<v Speaker 1>that was fantastic because we'd had NPM and

00:05:48.875 --> 00:05:51.355
<v Speaker 1>Gems and App and Git and all these

00:05:51.355 --> 00:05:52.955
<v Speaker 1>other package managers and things, but they were

00:05:52.955 --> 00:05:54.875
<v Speaker 1>always ecosystem focused. And so that

00:05:55.550 --> 00:05:57.870
<v Speaker 1>that was great. And then they made a

00:05:57.870 --> 00:06:00.190
<v Speaker 1>a really easy tool to run it, as

00:06:00.190 --> 00:06:01.870
<v Speaker 1>we all know, the Docker command line, and

00:06:01.870 --> 00:06:03.710
<v Speaker 1>then the registry to link them all together,

00:06:03.710 --> 00:06:05.870
<v Speaker 1>right, which which is now becoming the generic

00:06:05.870 --> 00:06:07.950
<v Speaker 1>object store. And we're storing Helm charts in

00:06:07.950 --> 00:06:09.950
<v Speaker 1>there and all sorts of other manifests and

00:06:09.950 --> 00:06:13.125
<v Speaker 1>objects and things, and becoming like that central

00:06:13.125 --> 00:06:15.604
<v Speaker 1>hub of artifacts that you get throughout your

00:06:15.604 --> 00:06:17.125
<v Speaker 1>organization. So I

00:06:17.525 --> 00:06:18.884
<v Speaker 1>almost feel like it was three it was

00:06:18.884 --> 00:06:21.525
<v Speaker 1>a trifecta of great ideas that all landed

00:06:21.525 --> 00:06:22.565
<v Speaker 1>at the perfect time.

00:06:23.044 --> 00:06:24.004
<v Speaker 1>What the next one is,

00:06:25.380 --> 00:06:27.140
<v Speaker 1>some people might say serverless. I feel like

00:06:27.140 --> 00:06:29.060
<v Speaker 1>serverless is just a part of containers,

00:06:29.780 --> 00:06:31.620
<v Speaker 1>and I don't think that the hardest thing

00:06:31.620 --> 00:06:33.140
<v Speaker 1>for me with serverless is that it requires

00:06:33.140 --> 00:06:35.780
<v Speaker 1>greenfields, so I I don't think that that's

00:06:35.780 --> 00:06:37.700
<v Speaker 1>really a wave of, like, it's gonna hit

00:06:37.700 --> 00:06:39.525
<v Speaker 1>us and then knock us knock us on

00:06:39.525 --> 00:06:40.965
<v Speaker 1>the floor and give us a a big

00:06:40.965 --> 00:06:42.725
<v Speaker 1>surprise like Docker did, you know?

00:06:44.245 --> 00:06:45.925
<v Speaker 1>Some some of it, I think, I feel

00:06:45.925 --> 00:06:48.485
<v Speaker 1>like might be the the dawn of ARM

00:06:48.485 --> 00:06:50.725
<v Speaker 1>computing everywhere, even though we've had ARM forever

00:06:50.725 --> 00:06:52.005
<v Speaker 1>and there's a lot of people that are

00:06:52.005 --> 00:06:54.380
<v Speaker 1>on that bad wagon, Right? Alex Ellis is

00:06:54.380 --> 00:06:55.260
<v Speaker 1>one of the big

00:06:55.660 --> 00:06:58.940
<v Speaker 1>cloud native advocates of of ARM. I feel

00:06:58.940 --> 00:07:00.140
<v Speaker 1>like the fact that

00:07:00.940 --> 00:07:03.500
<v Speaker 1>the fact that Apple has finally got in

00:07:03.500 --> 00:07:04.940
<v Speaker 1>the game and doubled down by saying everything

00:07:04.940 --> 00:07:07.185
<v Speaker 1>we do is gonna be ARM starting next

00:07:07.185 --> 00:07:10.225
<v Speaker 1>year. Yep. It's forcing Microsoft's hand, right? It's

00:07:10.225 --> 00:07:10.945
<v Speaker 1>focusing

00:07:11.505 --> 00:07:14.465
<v Speaker 1>every other laptop or consumer

00:07:14.465 --> 00:07:15.185
<v Speaker 1>grade

00:07:15.425 --> 00:07:18.544
<v Speaker 1>PC tech company to adjust to that new

00:07:18.544 --> 00:07:21.660
<v Speaker 1>reality of thin and light, better battery life,

00:07:21.660 --> 00:07:22.700
<v Speaker 1>longer lasting.

00:07:23.020 --> 00:07:25.020
<v Speaker 1>But I think the real difference there is

00:07:25.020 --> 00:07:28.139
<v Speaker 1>that it's going to make every developer a

00:07:28.380 --> 00:07:30.780
<v Speaker 1>multiplatform developer. Like, eventually,

00:07:31.180 --> 00:07:32.699
<v Speaker 1>we will all either be on a machine

00:07:32.699 --> 00:07:35.215
<v Speaker 1>that's not the machine that our server platform

00:07:35.215 --> 00:07:37.295
<v Speaker 1>is running, so we now have to develop

00:07:37.295 --> 00:07:38.415
<v Speaker 1>on a different platform,

00:07:38.815 --> 00:07:39.455
<v Speaker 1>or

00:07:39.855 --> 00:07:42.335
<v Speaker 1>we're going to realize the benefits that we

00:07:42.575 --> 00:07:45.695
<v Speaker 1>if you've seen the AWS Graviton processors and

00:07:45.695 --> 00:07:47.375
<v Speaker 1>some of these things coming out where the

00:07:47.455 --> 00:07:49.615
<v Speaker 1>indeed, we're getting 40 plus percent

00:07:50.020 --> 00:07:52.340
<v Speaker 1>price to performance savings

00:07:52.340 --> 00:07:54.500
<v Speaker 1>on servers simply by switching architecture.

00:07:54.580 --> 00:07:56.979
<v Speaker 1>And so if that takes place first, then

00:07:56.979 --> 00:07:59.139
<v Speaker 1>us as developers and operators

00:07:59.219 --> 00:08:01.620
<v Speaker 1>will be on a platform that the server

00:08:01.620 --> 00:08:03.460
<v Speaker 1>is a different platform than what we're on

00:08:03.460 --> 00:08:05.060
<v Speaker 1>because maybe we're still on an Intel machine.

00:08:05.060 --> 00:08:07.885
<v Speaker 1>So the point there is that suddenly every

00:08:07.885 --> 00:08:10.445
<v Speaker 1>developer that for the last thirty years hasn't

00:08:10.685 --> 00:08:12.525
<v Speaker 1>really had to care unless you're in an

00:08:12.525 --> 00:08:14.925
<v Speaker 1>edge case or you're making embedded hardware or

00:08:14.925 --> 00:08:17.005
<v Speaker 1>you're you know, which obviously there's lots of

00:08:17.005 --> 00:08:18.710
<v Speaker 1>people that do that. But for the rest

00:08:18.710 --> 00:08:20.550
<v Speaker 1>of us that are just normal lives as

00:08:20.550 --> 00:08:22.870
<v Speaker 1>Intel people, we've never had to care. And

00:08:22.870 --> 00:08:25.270
<v Speaker 1>I I think that making developers

00:08:25.590 --> 00:08:28.550
<v Speaker 1>educated about multiplatform is really, I think, gonna

00:08:28.550 --> 00:08:30.230
<v Speaker 1>provide a lot of long term benefits for

00:08:30.230 --> 00:08:32.414
<v Speaker 1>the ecosystem and allow us to do cross

00:08:32.414 --> 00:08:35.534
<v Speaker 1>platform things, give people choice and all that

00:08:35.534 --> 00:08:37.454
<v Speaker 1>stuff. So it that it doesn't sound as

00:08:37.454 --> 00:08:38.335
<v Speaker 1>exciting though,

00:08:38.815 --> 00:08:40.334
<v Speaker 1>but it is to me. Because I I

00:08:40.334 --> 00:08:41.534
<v Speaker 1>can nerd out on the hardware or the

00:08:41.534 --> 00:08:43.534
<v Speaker 1>software all day long, so Awesome.

00:08:43.940 --> 00:08:45.620
<v Speaker 0>There are really a couple of things there.

00:08:45.620 --> 00:08:46.740
<v Speaker 0>Like, you mentioned

00:08:47.940 --> 00:08:49.860
<v Speaker 0>well, how old is Docker now? Right? Seven,

00:08:49.860 --> 00:08:50.660
<v Speaker 0>eight years?

00:08:50.980 --> 00:08:53.779
<v Speaker 1>Eight. Eight We we passed did we pass

00:08:53.779 --> 00:08:55.540
<v Speaker 1>seven or past eight? Shoot, I can't remember.

00:08:55.540 --> 00:08:58.015
<v Speaker 1>2013. Okay. So we've got a whole

00:08:58.334 --> 00:09:00.894
<v Speaker 0>industry of developers with less than eight years

00:09:00.894 --> 00:09:03.055
<v Speaker 0>experience. So maybe I've just always known Docker

00:09:03.055 --> 00:09:04.575
<v Speaker 0>as a deployment mechanism.

00:09:04.575 --> 00:09:05.855
<v Speaker 0>And you know, I I've been doing this

00:09:05.855 --> 00:09:07.455
<v Speaker 0>for twenty years. You said you bailed West

00:09:07.455 --> 00:09:08.894
<v Speaker 0>period like you said of the early two

00:09:08.894 --> 00:09:11.055
<v Speaker 0>thousands where deployment was

00:09:12.480 --> 00:09:13.680
<v Speaker 0>a that was weird.

00:09:16.560 --> 00:09:18.640
<v Speaker 0>I am running a beta version of ECAM

00:09:18.640 --> 00:09:20.640
<v Speaker 0>as we're about to find out today. However,

00:09:21.440 --> 00:09:23.360
<v Speaker 0>yeah, there's that whole Wild West period where

00:09:23.360 --> 00:09:25.084
<v Speaker 0>I know I won't put words in your

00:09:25.084 --> 00:09:27.644
<v Speaker 0>mouth, but deployment for me in 02/2002, '2

00:09:27.644 --> 00:09:29.245
<v Speaker 0>thousand and '3 was tearing up a bunch

00:09:29.245 --> 00:09:30.685
<v Speaker 0>of files or doing a git pull on

00:09:30.685 --> 00:09:32.764
<v Speaker 0>our production server and doing the build process

00:09:32.764 --> 00:09:35.084
<v Speaker 0>on the production server under a directory that

00:09:35.084 --> 00:09:37.084
<v Speaker 0>was called dot live, moving the old one

00:09:37.084 --> 00:09:38.524
<v Speaker 0>to dot back and then there was dot

00:09:38.524 --> 00:09:40.620
<v Speaker 0>back with a date timestamp.

00:09:41.660 --> 00:09:43.420
<v Speaker 0>There's just so many people have never dealt

00:09:43.420 --> 00:09:45.100
<v Speaker 0>with that. So I think Docker, you're right.

00:09:45.100 --> 00:09:47.260
<v Speaker 0>It's just perfect timing and those three different

00:09:47.260 --> 00:09:49.500
<v Speaker 0>tranches, there's three different problems that it solved.

00:09:49.500 --> 00:09:51.340
<v Speaker 0>I think we're just perfect together. In fact,

00:09:51.340 --> 00:09:53.660
<v Speaker 0>Docker always summarizes what builds ship and run.

00:09:53.775 --> 00:09:55.215
<v Speaker 0>Like, those are the three

00:09:55.455 --> 00:09:57.295
<v Speaker 0>things that they try to do really well.

00:09:57.775 --> 00:10:00.735
<v Speaker 1>Right. Yeah. I mean, Kubernetes is obviously taking

00:10:00.735 --> 00:10:02.175
<v Speaker 1>a lot of the oxygen out of the

00:10:02.175 --> 00:10:03.775
<v Speaker 1>room and it's and it's always neat and

00:10:03.775 --> 00:10:05.295
<v Speaker 1>exciting to play with new tech on it.

00:10:07.240 --> 00:10:08.839
<v Speaker 1>But I feel like it's just, it's, you

00:10:08.839 --> 00:10:10.759
<v Speaker 1>know, it's building on the shoulders of giants,

00:10:10.759 --> 00:10:12.120
<v Speaker 1>right? And those

00:10:12.120 --> 00:10:13.319
<v Speaker 1>three original

00:10:13.319 --> 00:10:16.199
<v Speaker 1>features, I think, are still today. Like, I'm

00:10:16.199 --> 00:10:17.480
<v Speaker 1>actually redoing some of the stuff in my

00:10:17.480 --> 00:10:20.360
<v Speaker 1>Docker Mastery course, and I'm sort of doubling

00:10:20.360 --> 00:10:22.120
<v Speaker 1>down on those three pillars

00:10:22.625 --> 00:10:24.385
<v Speaker 1>of image registry

00:10:24.385 --> 00:10:27.904
<v Speaker 1>runtime. And, like, if you understand those three

00:10:27.904 --> 00:10:30.305
<v Speaker 1>pillars, then you can kind of regardless of

00:10:30.305 --> 00:10:32.385
<v Speaker 1>whether you're using Docker or Kubernetes or Podman

00:10:32.385 --> 00:10:34.705
<v Speaker 1>or whatever, right, can sort of piece together

00:10:34.865 --> 00:10:35.584
<v Speaker 1>the workflow

00:10:36.160 --> 00:10:38.080
<v Speaker 1>of I gotta build it, I gotta get

00:10:38.080 --> 00:10:39.840
<v Speaker 1>it places, and then I gotta run it.

00:10:39.840 --> 00:10:41.760
<v Speaker 1>And I've kind of shaped a lot of

00:10:41.760 --> 00:10:43.200
<v Speaker 1>my storytelling

00:10:43.200 --> 00:10:45.440
<v Speaker 1>around those things, because they really haven't changed,

00:10:45.440 --> 00:10:47.200
<v Speaker 1>right? We've standardized, which is great. We've got

00:10:47.200 --> 00:10:49.760
<v Speaker 1>formats now that everybody's agreeing on, and all

00:10:49.760 --> 00:10:51.845
<v Speaker 1>the tools can center around it. And so

00:10:51.845 --> 00:10:53.365
<v Speaker 1>sometimes I think like,

00:10:54.165 --> 00:10:55.925
<v Speaker 1>what's the next thing that will be so

00:10:55.925 --> 00:10:58.245
<v Speaker 1>universal and it will be so loved that

00:10:58.245 --> 00:10:59.605
<v Speaker 1>it will become a standard

00:11:00.084 --> 00:11:02.004
<v Speaker 1>that everyone will adopt in the industry? And

00:11:02.004 --> 00:11:05.125
<v Speaker 1>I I don't know, man. Like, that's I

00:11:04.680 --> 00:11:05.800
<v Speaker 1>really have a good answer for that one

00:11:05.800 --> 00:11:09.160
<v Speaker 1>yet. Alright. No worries. But why don't we

00:11:09.160 --> 00:11:10.520
<v Speaker 0>go back to something else that you said

00:11:10.520 --> 00:11:11.800
<v Speaker 0>and then we'll get hands on with this

00:11:11.800 --> 00:11:14.520
<v Speaker 0>Docker Compose malarkey stuff. Right? You mentioned that

00:11:14.600 --> 00:11:17.640
<v Speaker 0>Yeah. You know, multi architectures, the machine that

00:11:17.640 --> 00:11:19.240
<v Speaker 0>you develop against may not be the machine

00:11:19.240 --> 00:11:21.695
<v Speaker 0>that you're deploying to. I think with the

00:11:21.695 --> 00:11:25.295
<v Speaker 0>advent of Kubernetes and microservices distributed systems, that's

00:11:25.295 --> 00:11:27.055
<v Speaker 0>what we're seeing is that people rarely

00:11:27.454 --> 00:11:29.615
<v Speaker 0>are developing locally, at least maybe not on

00:11:29.615 --> 00:11:31.454
<v Speaker 0>a full application level anyway,

00:11:31.935 --> 00:11:33.535
<v Speaker 0>which tend to ties in nicely to what

00:11:33.535 --> 00:11:36.500
<v Speaker 0>we're talking about today with with Docker Compose.

00:11:36.500 --> 00:11:38.579
<v Speaker 0>So we we posed this as a, should

00:11:38.579 --> 00:11:40.740
<v Speaker 0>we still be using Docker Compose for local

00:11:40.740 --> 00:11:41.459
<v Speaker 0>development?

00:11:42.420 --> 00:11:43.939
<v Speaker 0>Is there a one word answer there that

00:11:43.939 --> 00:11:45.139
<v Speaker 0>you want us to throw out? Or are

00:11:45.139 --> 00:11:47.060
<v Speaker 0>we gonna do this through example? Well,

00:11:47.459 --> 00:11:48.819
<v Speaker 1>I mean, if you've if you've watched any

00:11:48.819 --> 00:11:49.939
<v Speaker 1>of my stuff or taken any of my

00:11:49.939 --> 00:11:51.425
<v Speaker 1>courses, you'll know that I'm probably gonna say

00:11:51.425 --> 00:11:53.505
<v Speaker 1>yes because I'm

00:11:53.505 --> 00:11:55.745
<v Speaker 1>I'm a big believer in,

00:11:56.465 --> 00:11:59.345
<v Speaker 1>like, streamlining workflow, minimalism.

00:12:00.625 --> 00:12:03.025
<v Speaker 1>I am a fan of trying to create

00:12:03.025 --> 00:12:05.825
<v Speaker 1>server like infrastructure locally, but to a point.

00:12:06.620 --> 00:12:08.460
<v Speaker 1>Like, Kelsey Kelsey

00:12:08.460 --> 00:12:10.380
<v Speaker 1>Hightower is famous for, like, at least in

00:12:10.380 --> 00:12:12.060
<v Speaker 1>my my mind, he's famous for

00:12:12.460 --> 00:12:14.620
<v Speaker 1>saying, I don't run Docker locally. I just

00:12:14.620 --> 00:12:16.779
<v Speaker 1>build Go apps, and then they get put

00:12:16.779 --> 00:12:18.540
<v Speaker 1>into containers for servers. Right?

00:12:19.180 --> 00:12:20.540
<v Speaker 1>I think he might have said that on

00:12:20.540 --> 00:12:21.820
<v Speaker 1>my show one time. And

00:12:22.595 --> 00:12:24.115
<v Speaker 1>I took that to heart because

00:12:25.795 --> 00:12:27.154
<v Speaker 1>as your team

00:12:27.714 --> 00:12:29.714
<v Speaker 1>gets more efficient and you move to more

00:12:29.714 --> 00:12:31.315
<v Speaker 1>modern languages and tooling,

00:12:32.115 --> 00:12:34.274
<v Speaker 1>you may be able you may have less

00:12:34.274 --> 00:12:35.875
<v Speaker 1>need for containers locally.

00:12:37.399 --> 00:12:39.640
<v Speaker 1>And then what I see is the opposite

00:12:39.640 --> 00:12:42.120
<v Speaker 1>happening some places where people are going all

00:12:42.120 --> 00:12:44.120
<v Speaker 1>in on Kubernetes and making that their local

00:12:44.120 --> 00:12:46.600
<v Speaker 1>development environment or a remote development environment because

00:12:46.600 --> 00:12:48.279
<v Speaker 1>if you've ever tried to run it locally,

00:12:48.279 --> 00:12:50.115
<v Speaker 1>you know that it will burn down your

00:12:50.115 --> 00:12:52.195
<v Speaker 1>CPUs and your lap if if you sit

00:12:52.195 --> 00:12:54.274
<v Speaker 1>your laptop on your lap Mhmm. With, like,

00:12:54.274 --> 00:12:56.274
<v Speaker 1>yeah, with, like, steady steady three to 5%

00:12:56.274 --> 00:12:58.435
<v Speaker 1>CPU usage. Even on on keys, k three

00:12:58.435 --> 00:12:58.995
<v Speaker 1>s,

00:13:00.035 --> 00:13:01.475
<v Speaker 1>there is just a natural

00:13:01.795 --> 00:13:03.315
<v Speaker 1>loop that's happening in the background that's gonna

00:13:03.315 --> 00:13:04.115
<v Speaker 1>eat up cycles.

00:13:04.550 --> 00:13:07.029
<v Speaker 1>So and the reality is Kubernetes was never

00:13:07.029 --> 00:13:08.870
<v Speaker 1>designed to run for a developer laptop. That

00:13:08.870 --> 00:13:11.430
<v Speaker 1>was not original scope of the project at

00:13:11.430 --> 00:13:12.870
<v Speaker 1>all, but a lot of people are making

00:13:12.870 --> 00:13:15.029
<v Speaker 1>it work there. And so I always look

00:13:15.029 --> 00:13:16.069
<v Speaker 1>at say, well,

00:13:17.105 --> 00:13:19.665
<v Speaker 1>to have to know Kubernetes to simply develop

00:13:19.665 --> 00:13:20.625
<v Speaker 1>in a container

00:13:20.865 --> 00:13:23.105
<v Speaker 1>is a lot, right? Yep. And

00:13:23.824 --> 00:13:25.824
<v Speaker 1>I'm always working I spend a lot of

00:13:25.824 --> 00:13:27.024
<v Speaker 1>time working with new people

00:13:27.425 --> 00:13:28.625
<v Speaker 1>because of my courses, so I'm working with

00:13:28.625 --> 00:13:30.384
<v Speaker 1>people that are still relatively

00:13:30.384 --> 00:13:32.545
<v Speaker 1>new to containers, adopting containers and Kubernetes.

00:13:33.240 --> 00:13:35.960
<v Speaker 1>And so I very much sympathize with the

00:13:36.280 --> 00:13:38.520
<v Speaker 1>minimalist approach to

00:13:38.680 --> 00:13:40.520
<v Speaker 1>just get me the containers I need, just

00:13:40.520 --> 00:13:42.280
<v Speaker 1>spin them up with a one line command,

00:13:42.680 --> 00:13:44.040
<v Speaker 1>and don't make me start a bunch of

00:13:44.040 --> 00:13:45.605
<v Speaker 1>other things and

00:13:45.925 --> 00:13:47.285
<v Speaker 1>and have to know

00:13:47.605 --> 00:13:50.245
<v Speaker 1>five different other tools before I can even

00:13:50.245 --> 00:13:52.165
<v Speaker 1>start committing code. Right?

00:13:52.885 --> 00:13:54.405
<v Speaker 1>So Compose can do that.

00:13:54.885 --> 00:13:55.365
<v Speaker 1>Other

00:13:56.085 --> 00:13:57.765
<v Speaker 1>tools, not so much. And Compose is kinda

00:13:57.765 --> 00:14:00.165
<v Speaker 1>universal. I think Docker brags about 800,000

00:14:00.600 --> 00:14:03.320
<v Speaker 1>YAML files on GitHub for Docker Compose.

00:14:03.720 --> 00:14:04.440
<v Speaker 1>So they

00:14:04.839 --> 00:14:06.120
<v Speaker 1>they use that as sort of a bragging

00:14:06.120 --> 00:14:07.959
<v Speaker 1>rights of, yeah, yeah, there's lots of Compose

00:14:07.959 --> 00:14:09.079
<v Speaker 1>files out there. A lot of people are

00:14:09.079 --> 00:14:10.360
<v Speaker 1>using it. Yeah.

00:14:11.480 --> 00:14:12.040
<v Speaker 1>So,

00:14:12.615 --> 00:14:16.535
<v Speaker 1>yeah, that's just Spoiler alert, we're gonna talk

00:14:16.535 --> 00:14:18.615
<v Speaker 1>about Compose as a dev tool. We can

00:14:18.615 --> 00:14:20.295
<v Speaker 1>talk about comparing it to others, although I'm

00:14:20.295 --> 00:14:21.575
<v Speaker 1>not an expert on all of them, because

00:14:21.575 --> 00:14:24.135
<v Speaker 1>there's tons of there's tons of ideas out

00:14:24.135 --> 00:14:25.895
<v Speaker 1>there for how to create a container based

00:14:25.895 --> 00:14:28.800
<v Speaker 1>development environment. Oh, yeah. Definitely. Then maybe You

00:14:28.800 --> 00:14:30.080
<v Speaker 0>might have dimmed someone on your show here.

00:14:30.080 --> 00:14:31.840
<v Speaker 0>Yeah. I think I can maybe contrast some

00:14:31.840 --> 00:14:33.360
<v Speaker 0>things as we go if if we feel

00:14:33.360 --> 00:14:35.440
<v Speaker 0>it's pertinent. But we do have an interesting

00:14:35.440 --> 00:14:37.360
<v Speaker 0>comment in the chat from the studio there.

00:14:37.520 --> 00:14:39.680
<v Speaker 0>If you ask Brett Swarm or Kubernetes, he

00:14:39.680 --> 00:14:40.720
<v Speaker 0>will say Swarm.

00:14:41.120 --> 00:14:42.400
<v Speaker 0>Are you still back in Swarm?

00:14:43.095 --> 00:14:45.975
<v Speaker 1>No. No. No. See well, CJ's teasing me.

00:14:45.975 --> 00:14:46.455
<v Speaker 1>Yeah.

00:14:47.175 --> 00:14:48.295
<v Speaker 1>Hello, CJ.

00:14:49.654 --> 00:14:50.935
<v Speaker 1>Yeah. I mean, I I was one of

00:14:50.935 --> 00:14:52.455
<v Speaker 1>the last holdouts for Swarm.

00:14:52.774 --> 00:14:54.455
<v Speaker 1>I'm not saying it's a bad tool,

00:14:54.855 --> 00:14:56.695
<v Speaker 1>and I still use it actually, I still

00:14:56.695 --> 00:14:58.214
<v Speaker 1>use it to run some APIs on the

00:14:58.214 --> 00:15:00.240
<v Speaker 1>Internet for Slack integrations and stuff like that

00:15:00.240 --> 00:15:02.080
<v Speaker 1>because I can you know, it

00:15:02.640 --> 00:15:04.720
<v Speaker 1>it works with anything. I don't have to

00:15:04.720 --> 00:15:07.440
<v Speaker 1>rewrite stuff into a serverless function or something,

00:15:07.440 --> 00:15:10.080
<v Speaker 1>and I can just run some silly little

00:15:10.240 --> 00:15:12.845
<v Speaker 1>web API on a DigitalOcean server. Of course,

00:15:12.845 --> 00:15:14.205
<v Speaker 1>now we have all these, you know, automated

00:15:14.205 --> 00:15:15.085
<v Speaker 1>Kubernetes

00:15:15.165 --> 00:15:16.445
<v Speaker 1>systems that spin it up and tear it

00:15:16.445 --> 00:15:17.725
<v Speaker 1>down and all that stuff, so I I

00:15:17.725 --> 00:15:20.205
<v Speaker 1>could technically do that. But I've had swarms

00:15:20.205 --> 00:15:21.165
<v Speaker 1>there for

00:15:21.485 --> 00:15:22.845
<v Speaker 1>four or five years, and they just keep

00:15:22.845 --> 00:15:24.845
<v Speaker 1>on running. But, yeah, no. I mean,

00:15:25.690 --> 00:15:28.010
<v Speaker 1>Swarm was just sort of the casualty of

00:15:28.090 --> 00:15:30.330
<v Speaker 1>everyone wanted one tool instead of two, which

00:15:30.330 --> 00:15:32.010
<v Speaker 1>I'm a big fan of having more than

00:15:32.010 --> 00:15:32.810
<v Speaker 1>one option.

00:15:33.210 --> 00:15:35.130
<v Speaker 1>I I I love that Nomad as a

00:15:35.130 --> 00:15:37.210
<v Speaker 1>project is still a thing so that we

00:15:37.210 --> 00:15:39.450
<v Speaker 1>get some different ideas in the ecosystem around

00:15:40.334 --> 00:15:43.455
<v Speaker 1>running clusters of containers and that Kubernetes isn't

00:15:43.455 --> 00:15:45.695
<v Speaker 1>the only thing in existence.

00:15:47.135 --> 00:15:49.295
<v Speaker 1>But, yeah, I I don't recommend Swarm to

00:15:49.295 --> 00:15:51.455
<v Speaker 1>any business anymore. It's more for, like, hobby

00:15:51.455 --> 00:15:52.095
<v Speaker 1>projects or,

00:15:52.790 --> 00:15:55.110
<v Speaker 1>you know, Docker's still building it into the

00:15:55.110 --> 00:15:57.030
<v Speaker 1>container run or to the runtime, and I

00:15:57.030 --> 00:15:58.950
<v Speaker 1>I keep asking, and they keep saying they're

00:15:58.950 --> 00:16:00.230
<v Speaker 1>still gonna ship it, but they don't have

00:16:00.230 --> 00:16:03.430
<v Speaker 1>any developers currently working on it. So, Marantis,

00:16:03.430 --> 00:16:05.430
<v Speaker 1>the company that Docker split into,

00:16:06.485 --> 00:16:09.605
<v Speaker 1>basically, they Marantis bought most of Docker's

00:16:09.605 --> 00:16:11.365
<v Speaker 1>employees as well as their

00:16:12.725 --> 00:16:14.245
<v Speaker 1>closed sourced software.

00:16:15.125 --> 00:16:16.485
<v Speaker 1>They did that a couple years ago, and

00:16:16.485 --> 00:16:18.005
<v Speaker 1>there's they still have a couple of people

00:16:18.005 --> 00:16:19.845
<v Speaker 1>working on it and building they're actually working

00:16:19.845 --> 00:16:20.805
<v Speaker 1>on adding

00:16:21.380 --> 00:16:24.500
<v Speaker 1>CSI support from Kubernetes for storage because one

00:16:24.500 --> 00:16:26.020
<v Speaker 1>of the the weak weak links in Swarm

00:16:26.020 --> 00:16:27.940
<v Speaker 1>is and Docker in general is the plug

00:16:27.940 --> 00:16:31.220
<v Speaker 1>in support for other volumes besides local volumes.

00:16:31.460 --> 00:16:32.100
<v Speaker 1>And

00:16:32.500 --> 00:16:34.180
<v Speaker 1>they're looking to just sort of adopt the

00:16:34.180 --> 00:16:36.100
<v Speaker 1>CSI pattern so that people can write

00:16:36.595 --> 00:16:39.235
<v Speaker 1>very similar wrappers or something around the the

00:16:39.235 --> 00:16:41.395
<v Speaker 1>existing CSI drivers for Kubernetes, and then they'll

00:16:41.395 --> 00:16:43.395
<v Speaker 1>just work in Docker and Swarm. But we're

00:16:43.395 --> 00:16:45.075
<v Speaker 1>we're still waiting on that PR to drop.

00:16:45.075 --> 00:16:47.475
<v Speaker 1>They're working on a bunch of them, actually.

00:16:47.795 --> 00:16:48.275
<v Speaker 0>I

00:16:48.675 --> 00:16:50.595
<v Speaker 0>was actually Team Swarm as well, and I

00:16:50.595 --> 00:16:52.195
<v Speaker 0>got dragged away kicking and screaming

00:16:52.640 --> 00:16:55.360
<v Speaker 0>just as the industry kind of insulated Kubernetes

00:16:55.360 --> 00:16:57.840
<v Speaker 0>against my will as well, however. Yeah.

00:16:58.560 --> 00:16:59.920
<v Speaker 1>And as an ops guy, I want to

00:16:59.920 --> 00:17:01.360
<v Speaker 1>think I'm I'm an ops guy who always

00:17:01.360 --> 00:17:02.960
<v Speaker 1>wants things to be simpler, and

00:17:04.855 --> 00:17:06.375
<v Speaker 1>the thing about Swarm that really spoke to

00:17:06.375 --> 00:17:08.294
<v Speaker 1>me was like, man, if things could be

00:17:08.294 --> 00:17:09.094
<v Speaker 1>this simple,

00:17:09.414 --> 00:17:11.654
<v Speaker 1>how more productive would we all be? Like,

00:17:11.654 --> 00:17:13.335
<v Speaker 1>how amazing could it be to have developers

00:17:13.335 --> 00:17:15.095
<v Speaker 1>actually do more

00:17:15.335 --> 00:17:17.414
<v Speaker 1>like, have more insight and be able to

00:17:17.414 --> 00:17:19.575
<v Speaker 1>do things without feeling so handicapped around

00:17:20.059 --> 00:17:21.019
<v Speaker 1>infrastructure

00:17:21.020 --> 00:17:21.899
<v Speaker 1>and being,

00:17:22.220 --> 00:17:22.859
<v Speaker 1>you know,

00:17:23.419 --> 00:17:25.500
<v Speaker 1>cut out of the infrastructure game. Right? Because

00:17:25.500 --> 00:17:27.020
<v Speaker 1>a lot of times there's a saying that

00:17:27.020 --> 00:17:28.940
<v Speaker 1>I learned years ago called the the

00:17:29.020 --> 00:17:31.499
<v Speaker 1>ops mafia or the IT mafia,

00:17:32.220 --> 00:17:33.900
<v Speaker 1>which is to say that

00:17:34.465 --> 00:17:37.345
<v Speaker 1>IT, traditional IT and ops, tends to be

00:17:37.345 --> 00:17:39.345
<v Speaker 1>a barrier for developers to get their stuff

00:17:39.345 --> 00:17:40.945
<v Speaker 1>onto servers and into production.

00:17:42.065 --> 00:17:43.825
<v Speaker 1>And until you get to a really

00:17:44.145 --> 00:17:46.305
<v Speaker 1>well oiled DevOps machine,

00:17:46.625 --> 00:17:47.905
<v Speaker 1>that still tends to be the case in

00:17:47.905 --> 00:17:49.650
<v Speaker 1>a lot of organizations. And I'm a part

00:17:49.650 --> 00:17:50.850
<v Speaker 1>of that problem. I'm a part of those

00:17:50.850 --> 00:17:53.890
<v Speaker 1>people that put in security requirements and, you

00:17:53.890 --> 00:17:55.650
<v Speaker 1>know, all these infrastructure requirements of you have

00:17:55.650 --> 00:17:56.850
<v Speaker 1>to write all this YAML and do all

00:17:56.850 --> 00:17:58.290
<v Speaker 1>these things and do all these scans and

00:17:58.290 --> 00:17:59.010
<v Speaker 1>all this stuff.

00:17:59.330 --> 00:18:01.010
<v Speaker 1>And it was kind of like, man, if

00:18:01.010 --> 00:18:02.610
<v Speaker 1>Docker could iterate enough

00:18:02.914 --> 00:18:05.315
<v Speaker 1>on this idea, they might have a tool

00:18:05.554 --> 00:18:06.914
<v Speaker 1>that could be presented

00:18:07.715 --> 00:18:09.554
<v Speaker 1>and let people just get their job done,

00:18:09.554 --> 00:18:11.394
<v Speaker 1>right? And and the rest of it

00:18:12.195 --> 00:18:14.115
<v Speaker 1>all gets handled for them. And there's actually

00:18:14.115 --> 00:18:15.395
<v Speaker 1>still an idea out there, not that we're

00:18:15.395 --> 00:18:17.395
<v Speaker 1>gonna go down these rabbit holes. It's gonna

00:18:17.395 --> 00:18:20.010
<v Speaker 1>happen. But there is this idea that Docker's

00:18:20.010 --> 00:18:22.009
<v Speaker 1>sort of riffing on for

00:18:23.530 --> 00:18:25.210
<v Speaker 1>if you build we'll get into this with

00:18:25.210 --> 00:18:26.970
<v Speaker 1>Docker Compose v two, but you can build

00:18:26.970 --> 00:18:29.530
<v Speaker 1>Compose v two today and have it deploy

00:18:29.530 --> 00:18:32.169
<v Speaker 1>to a Kubernetes cluster using the Compose YAML.

00:18:32.825 --> 00:18:36.345
<v Speaker 1>And so what if the idea eventually was

00:18:36.505 --> 00:18:39.144
<v Speaker 1>the developer writes Compose YAML

00:18:39.305 --> 00:18:42.825
<v Speaker 1>and then the ops layers on their manifests

00:18:42.825 --> 00:18:44.505
<v Speaker 1>or their helm charts or whatever they need

00:18:44.505 --> 00:18:45.945
<v Speaker 1>for the ops focused stuff,

00:18:46.669 --> 00:18:49.950
<v Speaker 1>And there's just enough of an overlap that

00:18:50.190 --> 00:18:52.830
<v Speaker 1>you don't you're not forcing developers to write,

00:18:53.390 --> 00:18:55.549
<v Speaker 1>you know, Helm charts and customize,

00:18:56.270 --> 00:18:57.869
<v Speaker 1>but they can stick with YAML

00:18:57.950 --> 00:19:01.135
<v Speaker 1>simple in well, it's all YAML, but simple

00:19:01.135 --> 00:19:03.295
<v Speaker 1>YAML in the Compose format with maybe a

00:19:03.295 --> 00:19:05.215
<v Speaker 1>little bit of extras for things like Ingress.

00:19:06.735 --> 00:19:08.655
<v Speaker 1>So there's an idea floating around about how

00:19:08.655 --> 00:19:10.895
<v Speaker 1>Compose could be that bridge because if you

00:19:10.895 --> 00:19:12.895
<v Speaker 1>go back to the original Kubernetes

00:19:13.279 --> 00:19:15.279
<v Speaker 1>goals of the project and the founders,

00:19:16.159 --> 00:19:17.840
<v Speaker 1>a lot of them talk about how they

00:19:18.320 --> 00:19:20.320
<v Speaker 1>never intended for the manifest YAML to be

00:19:20.320 --> 00:19:21.279
<v Speaker 1>the interface

00:19:21.440 --> 00:19:23.440
<v Speaker 1>for developers to deploy applications.

00:19:24.320 --> 00:19:25.760
<v Speaker 1>They were always expecting something else,

00:19:26.455 --> 00:19:27.655
<v Speaker 1>and that else

00:19:28.535 --> 00:19:28.855
<v Speaker 1>has attempted

00:19:30.455 --> 00:19:33.015
<v Speaker 1>a hundred times, at least a hundred times,

00:19:33.015 --> 00:19:35.655
<v Speaker 1>in different projects like we see with Customize

00:19:35.655 --> 00:19:36.935
<v Speaker 1>and Helm, and there's just a ton of

00:19:36.935 --> 00:19:37.975
<v Speaker 1>other ways to do it,

00:19:38.375 --> 00:19:40.375
<v Speaker 1>where you're describing your application and all the

00:19:40.375 --> 00:19:42.260
<v Speaker 1>parts of it in a way that Kubernetes

00:19:42.260 --> 00:19:43.539
<v Speaker 1>can understand and deploy.

00:19:44.260 --> 00:19:46.020
<v Speaker 0>A whole sync working on that and have

00:19:46.020 --> 00:19:47.940
<v Speaker 0>been working on it for for years now.

00:19:47.940 --> 00:19:48.419
<v Speaker 0>Yeah.

00:19:48.820 --> 00:19:50.820
<v Speaker 0>It's a difficult spec for them to to

00:19:51.540 --> 00:19:54.179
<v Speaker 0>anyone to write, really. Yeah. And you have

00:19:54.179 --> 00:19:55.774
<v Speaker 1>to get like, you you have to take

00:19:55.774 --> 00:19:57.294
<v Speaker 1>a lot of considerations into account, and then

00:19:57.294 --> 00:19:58.575
<v Speaker 1>you and then you have to get buy

00:19:58.575 --> 00:20:00.174
<v Speaker 1>in from the community, right? So you have

00:20:00.174 --> 00:20:00.734
<v Speaker 1>to

00:20:01.215 --> 00:20:02.254
<v Speaker 1>you have to get

00:20:02.654 --> 00:20:05.054
<v Speaker 1>enough people on board that it looks like

00:20:05.054 --> 00:20:06.495
<v Speaker 1>this could be a winner, right? That's kind

00:20:06.495 --> 00:20:07.934
<v Speaker 1>like with Helm, right? Helm isn't always the

00:20:07.934 --> 00:20:09.774
<v Speaker 1>right tool, but it it looks like the

00:20:09.774 --> 00:20:11.930
<v Speaker 1>winner. So we all gravitate to that first

00:20:11.930 --> 00:20:14.090
<v Speaker 1>even though it maybe isn't the right tool

00:20:14.090 --> 00:20:16.650
<v Speaker 1>for every job or the easiest tool for

00:20:16.650 --> 00:20:17.370
<v Speaker 1>every job.

00:20:17.770 --> 00:20:20.010
<v Speaker 1>And I'm kind of holding out for Compose.

00:20:20.010 --> 00:20:21.450
<v Speaker 1>So I was so if I take my

00:20:21.450 --> 00:20:23.450
<v Speaker 1>Swarm fan base, if I take my Swarm

00:20:23.450 --> 00:20:25.625
<v Speaker 1>fandom and I apply it to just the

00:20:25.625 --> 00:20:27.865
<v Speaker 1>Compose format and the Compose

00:20:27.945 --> 00:20:28.825
<v Speaker 1>workflow,

00:20:29.545 --> 00:20:30.825
<v Speaker 1>there might be a day where you can

00:20:30.825 --> 00:20:32.345
<v Speaker 1>do a Docker Compose

00:20:32.345 --> 00:20:33.145
<v Speaker 1>deploy,

00:20:33.785 --> 00:20:35.305
<v Speaker 1>and it applies

00:20:35.705 --> 00:20:37.305
<v Speaker 1>to a Kubernetes cluster,

00:20:37.545 --> 00:20:40.390
<v Speaker 1>layers on some other things, and the developer

00:20:40.390 --> 00:20:42.390
<v Speaker 1>and the operator can still exist

00:20:42.710 --> 00:20:44.630
<v Speaker 1>and not step on each other's toes but

00:20:44.630 --> 00:20:46.870
<v Speaker 1>not have to know everything about everyone else's

00:20:46.870 --> 00:20:47.669
<v Speaker 1>job, which

00:20:48.150 --> 00:20:49.510
<v Speaker 1>is kind of one of the things that

00:20:49.510 --> 00:20:51.430
<v Speaker 1>DevOps brought to the forefront, but also that

00:20:51.430 --> 00:20:52.870
<v Speaker 1>one of the biggest stumbling blocks I find

00:20:52.870 --> 00:20:54.945
<v Speaker 1>with teams, right, is that they now have

00:20:54.945 --> 00:20:57.025
<v Speaker 1>to learn everyone else's stuff. Like, can I

00:20:57.025 --> 00:20:58.385
<v Speaker 1>just focus on the things that I need

00:20:58.385 --> 00:21:00.065
<v Speaker 1>to know instead of everything else?

00:21:00.945 --> 00:21:02.465
<v Speaker 1>That's a real big challenge, I think, for

00:21:02.465 --> 00:21:04.705
<v Speaker 1>companies, which is why us Kubernetes trainers are

00:21:04.705 --> 00:21:06.865
<v Speaker 1>always training people on Kubernetes because

00:21:07.540 --> 00:21:09.940
<v Speaker 1>they now all of a sudden, have to

00:21:09.940 --> 00:21:11.620
<v Speaker 1>know it just to deploy their container app

00:21:11.620 --> 00:21:13.380
<v Speaker 1>when they previously didn't have to know it.

00:21:13.860 --> 00:21:17.220
<v Speaker 0>Yeah. I I did Kubernetes workshop at conferences,

00:21:17.220 --> 00:21:19.700
<v Speaker 0>at least before COVID anyway, and I'm always

00:21:19.700 --> 00:21:21.940
<v Speaker 0>surprised that the workshop just keep getting busier

00:21:21.940 --> 00:21:23.455
<v Speaker 0>and busier all the time. There's just always

00:21:23.455 --> 00:21:25.534
<v Speaker 0>that influx of new people trying to learn

00:21:25.534 --> 00:21:27.934
<v Speaker 0>the basics of Kubernetes and and even containers

00:21:27.934 --> 00:21:30.815
<v Speaker 0>and Docker. Like, it's just and it's such

00:21:30.815 --> 00:21:33.215
<v Speaker 0>a difficult space to education in, so people

00:21:33.215 --> 00:21:34.894
<v Speaker 0>should definitely check out your courses.

00:21:35.215 --> 00:21:37.135
<v Speaker 0>We got a question there that I think

00:21:37.135 --> 00:21:37.934
<v Speaker 0>correlates

00:21:38.309 --> 00:21:39.750
<v Speaker 0>quite nicely to what you were just talking

00:21:39.750 --> 00:21:41.909
<v Speaker 0>about there with Compose files and applying them

00:21:41.909 --> 00:21:43.909
<v Speaker 0>to Kubernetes. But Yanis asks,

00:21:43.990 --> 00:21:45.749
<v Speaker 0>Compose versus Docker Stack

00:21:45.990 --> 00:21:49.029
<v Speaker 0>for local dev. Docker Stack attempted to do

00:21:49.029 --> 00:21:49.589
<v Speaker 0>that

00:21:49.830 --> 00:21:52.230
<v Speaker 0>deployment of a Compose to Kubernetes cluster, or

00:21:52.230 --> 00:21:53.029
<v Speaker 0>am I mistaken?

00:21:54.305 --> 00:21:57.265
<v Speaker 1>Yeah. Docker stack was like the production version

00:21:57.265 --> 00:22:00.225
<v Speaker 1>of Compose. So that's a great question. Let's

00:22:00.225 --> 00:22:01.585
<v Speaker 1>back up a second. So what we're talking

00:22:01.585 --> 00:22:03.424
<v Speaker 1>about are two potentially different things.

00:22:04.385 --> 00:22:06.145
<v Speaker 1>There's a composed file format,

00:22:07.090 --> 00:22:10.370
<v Speaker 1>which both Docker Swarm, aka Docker Stacks,

00:22:10.610 --> 00:22:13.090
<v Speaker 1>and Docker Compose, the command line tool, those

00:22:13.090 --> 00:22:15.490
<v Speaker 1>both share that Compose spec.

00:22:17.890 --> 00:22:18.690
<v Speaker 1>There's

00:22:18.690 --> 00:22:20.450
<v Speaker 1>two different tools there, right? There's two different

00:22:20.450 --> 00:22:23.285
<v Speaker 1>purposes. So Docker Compose, the command line, which

00:22:23.285 --> 00:22:24.405
<v Speaker 1>we're talking about today,

00:22:25.845 --> 00:22:29.285
<v Speaker 1>that is optimized for local development workflow. And

00:22:29.285 --> 00:22:31.765
<v Speaker 1>so whenever I teach developers, whenever I train

00:22:31.765 --> 00:22:34.420
<v Speaker 1>consulting clients that I'm working with, it's always

00:22:34.420 --> 00:22:36.980
<v Speaker 1>about let's get everyone all in on the

00:22:36.980 --> 00:22:37.780
<v Speaker 1>Docker

00:22:37.780 --> 00:22:40.820
<v Speaker 1>Compose command line as their developer tool because

00:22:40.820 --> 00:22:42.180
<v Speaker 1>most of these people that are coming into

00:22:42.180 --> 00:22:45.140
<v Speaker 1>containers are not, like, I don't advise learning

00:22:45.140 --> 00:22:46.980
<v Speaker 1>Kubernetes as the first thing you're doing in

00:22:46.980 --> 00:22:49.455
<v Speaker 1>containers, right? So I usually start them with

00:22:49.455 --> 00:22:51.294
<v Speaker 1>Docker and we get the

00:22:51.535 --> 00:22:53.855
<v Speaker 1>typical onboarding is getting their Docker files and

00:22:53.855 --> 00:22:54.495
<v Speaker 1>whatnot.

00:22:54.975 --> 00:22:55.695
<v Speaker 1>And then

00:22:56.015 --> 00:22:57.455
<v Speaker 1>once they can get the parts of that

00:22:57.455 --> 00:22:59.215
<v Speaker 1>working in Docker, we say, okay, now let's

00:22:59.215 --> 00:23:01.535
<v Speaker 1>do Docker Compose to describe your application and

00:23:01.535 --> 00:23:03.380
<v Speaker 1>all the things about it in a very

00:23:03.380 --> 00:23:05.460
<v Speaker 1>relatively simple YAML file.

00:23:05.779 --> 00:23:06.259
<v Speaker 1>And

00:23:06.659 --> 00:23:08.340
<v Speaker 1>then when they realize they can do a

00:23:08.340 --> 00:23:09.940
<v Speaker 1>Docker Compose up and a Docker Compose down

00:23:09.940 --> 00:23:12.019
<v Speaker 1>and that spins up entire environments based on

00:23:12.019 --> 00:23:14.259
<v Speaker 1>the directory it's in, they kinda get that

00:23:14.340 --> 00:23:15.620
<v Speaker 1>light bulb. You can see it switch on

00:23:15.620 --> 00:23:17.445
<v Speaker 1>in their head, and they learn, okay, this

00:23:17.445 --> 00:23:18.885
<v Speaker 1>is way easier than what I was doing

00:23:18.885 --> 00:23:19.445
<v Speaker 1>before.

00:23:20.725 --> 00:23:22.325
<v Speaker 1>And a lot of people even will avoid

00:23:22.325 --> 00:23:24.245
<v Speaker 1>Compose or just not realize the power of

00:23:24.245 --> 00:23:26.245
<v Speaker 1>it, and they'll write shell scripts around Docker

00:23:26.245 --> 00:23:28.725
<v Speaker 1>commands. Well, that's the entire point of Docker

00:23:28.725 --> 00:23:30.164
<v Speaker 1>Compose is to avoid

00:23:31.040 --> 00:23:32.559
<v Speaker 1>Its whole purpose is to allow you to

00:23:32.559 --> 00:23:36.160
<v Speaker 1>avoid shell scripts and other developer tooling and

00:23:36.160 --> 00:23:38.960
<v Speaker 1>just focus on writing a few YAML files

00:23:38.960 --> 00:23:41.280
<v Speaker 1>that describe your app that really I look

00:23:41.280 --> 00:23:43.520
<v Speaker 1>at as almost like a predecessor to describing

00:23:43.520 --> 00:23:46.525
<v Speaker 1>it in manifest, which are much more verbose

00:23:46.525 --> 00:23:47.565
<v Speaker 1>and complicated.

00:23:48.285 --> 00:23:48.845
<v Speaker 1>So

00:23:49.085 --> 00:23:50.765
<v Speaker 1>the long answer to that question

00:23:51.005 --> 00:23:53.965
<v Speaker 1>great question, by the way, thank you is

00:23:53.965 --> 00:23:55.965
<v Speaker 1>a stack is exclusively

00:23:55.965 --> 00:23:58.205
<v Speaker 1>for Swarm, and Swarm is not a developer

00:23:58.205 --> 00:23:58.445
<v Speaker 1>tool.

00:23:59.070 --> 00:23:59.629
<v Speaker 1>So

00:24:00.270 --> 00:24:01.630
<v Speaker 1>some of the things that you can do

00:24:01.630 --> 00:24:04.270
<v Speaker 1>with Docker Compose, like Docker Compose PS and,

00:24:04.270 --> 00:24:05.950
<v Speaker 1>like, some of these other command lines that

00:24:05.950 --> 00:24:08.270
<v Speaker 1>we'll get into, you can't really do that

00:24:08.270 --> 00:24:10.190
<v Speaker 1>easily in Swarm, and it takes more work.

00:24:10.845 --> 00:24:13.804
<v Speaker 1>And Swarm really concerns itself with, like, uptime

00:24:13.804 --> 00:24:16.205
<v Speaker 1>and availability and health checks

00:24:16.285 --> 00:24:18.765
<v Speaker 1>and rolling updates and stuff like that where

00:24:18.765 --> 00:24:20.765
<v Speaker 1>Compose, Docker Compose, the command line tool has

00:24:20.765 --> 00:24:22.044
<v Speaker 1>none of that, right, because it's really more

00:24:22.044 --> 00:24:24.510
<v Speaker 1>about the developer experience. So we'll we'll talk

00:24:24.510 --> 00:24:26.510
<v Speaker 1>about how, like, Docker Compose has things like

00:24:26.510 --> 00:24:28.190
<v Speaker 1>depends on that allows you to start things

00:24:28.190 --> 00:24:30.910
<v Speaker 1>up in order, whereas Swarm and Kubernetes aren't

00:24:30.910 --> 00:24:33.390
<v Speaker 1>really about that. That's, like, production infrastructure. You

00:24:33.390 --> 00:24:34.190
<v Speaker 1>have to deal

00:24:34.350 --> 00:24:36.365
<v Speaker 1>with that in a different manner. But local

00:24:36.365 --> 00:24:38.285
<v Speaker 1>development, usually, you don't want your web server

00:24:38.285 --> 00:24:40.925
<v Speaker 1>bouncing for five minutes while your your SQL

00:24:40.925 --> 00:24:43.645
<v Speaker 1>server's ingesting content. So so you want you

00:24:43.645 --> 00:24:45.885
<v Speaker 1>you wanna optimize your local startup. You wanna

00:24:45.885 --> 00:24:47.885
<v Speaker 1>make it really simple with pretty colors and

00:24:47.885 --> 00:24:50.300
<v Speaker 1>local commands and status commands and stuff like

00:24:50.300 --> 00:24:52.539
<v Speaker 1>that, and that's really what the Docker Compose

00:24:53.180 --> 00:24:54.860
<v Speaker 1>command line tool is all about. It just

00:24:54.860 --> 00:24:56.220
<v Speaker 1>so happens that the two of them share

00:24:56.220 --> 00:24:57.820
<v Speaker 1>the same file format. So,

00:24:58.380 --> 00:24:59.820
<v Speaker 0>I mean, we're gonna get to the hands

00:24:59.820 --> 00:25:02.300
<v Speaker 0>on actually writing and working with Compose in

00:25:02.300 --> 00:25:03.820
<v Speaker 0>just a minute to anyone that's getting worried

00:25:03.820 --> 00:25:06.054
<v Speaker 0>that we're now nearly thirty minutes in and

00:25:06.054 --> 00:25:07.414
<v Speaker 0>we're still talking. But

00:25:08.294 --> 00:25:10.375
<v Speaker 0>that's one of the reasons I still use

00:25:10.375 --> 00:25:12.054
<v Speaker 0>Docker Compose format

00:25:12.135 --> 00:25:13.975
<v Speaker 0>2.3 or 2.4

00:25:13.975 --> 00:25:15.894
<v Speaker 0>because of the health check and being able

00:25:15.894 --> 00:25:18.294
<v Speaker 0>to orchestrate the startup of the containers.

00:25:18.900 --> 00:25:21.620
<v Speaker 0>But that was removed in subsequent versions. Is

00:25:21.620 --> 00:25:24.659
<v Speaker 0>is that now working again, out of curiosity?

00:25:25.540 --> 00:25:27.060
<v Speaker 1>Sorry. Was I was looking at the chat.

00:25:27.060 --> 00:25:28.500
<v Speaker 1>Which which feature?

00:25:28.580 --> 00:25:31.220
<v Speaker 0>Yeah. So in Docker Compose, always used version

00:25:31.220 --> 00:25:32.100
<v Speaker 0>2.4,

00:25:32.100 --> 00:25:33.540
<v Speaker 0>I think it is, because it allowed you

00:25:33.540 --> 00:25:34.420
<v Speaker 0>to see

00:25:34.915 --> 00:25:36.915
<v Speaker 0>it depends on service

00:25:36.915 --> 00:25:39.875
<v Speaker 0>healthy, service start eat, and actually orchestrate. Because

00:25:39.875 --> 00:25:41.795
<v Speaker 0>when you spend something up in development, it's

00:25:41.795 --> 00:25:44.115
<v Speaker 0>very different to the production environment where you

00:25:44.115 --> 00:25:45.795
<v Speaker 0>are happy for things to flap while things

00:25:45.795 --> 00:25:48.275
<v Speaker 0>are again reconciled or whatever. But in development,

00:25:48.769 --> 00:25:50.210
<v Speaker 0>like you said, I want to be able

00:25:50.210 --> 00:25:52.210
<v Speaker 0>to start my MySQL,

00:25:52.210 --> 00:25:53.489
<v Speaker 0>Postgres, import,

00:25:53.570 --> 00:25:55.490
<v Speaker 0>and then have my web application container start

00:25:55.490 --> 00:25:56.769
<v Speaker 0>up because it's going to do some sort

00:25:56.769 --> 00:25:58.769
<v Speaker 0>of seed or database reconciliation.

00:25:59.090 --> 00:26:00.929
<v Speaker 0>And I do need that ability, but I

00:26:00.929 --> 00:26:01.970
<v Speaker 0>believe they removed

00:26:02.644 --> 00:26:05.364
<v Speaker 0>the dependencies in later versions were just

00:26:05.764 --> 00:26:08.004
<v Speaker 0>start this container first and that's it because

00:26:08.164 --> 00:26:10.324
<v Speaker 1>Yeah. Of something with version three.

00:26:10.644 --> 00:26:11.204
<v Speaker 1>Yeah.

00:26:11.524 --> 00:26:13.125
<v Speaker 1>And I'm gonna answer your that's a great

00:26:13.125 --> 00:26:14.884
<v Speaker 1>question. I'm gonna answer yours and

00:26:16.164 --> 00:26:17.125
<v Speaker 1>Roger Leanne's

00:26:17.539 --> 00:26:19.700
<v Speaker 1>question on does Compose v three support limits

00:26:19.700 --> 00:26:20.820
<v Speaker 1>like in prox?

00:26:20.980 --> 00:26:21.700
<v Speaker 1>So

00:26:21.780 --> 00:26:23.059
<v Speaker 1>the so,

00:26:23.380 --> 00:26:25.220
<v Speaker 1>again, when we're talking about Docker Compose, the

00:26:25.220 --> 00:26:27.059
<v Speaker 1>command line tool, not Swarm,

00:26:29.460 --> 00:26:32.260
<v Speaker 1>we no longer have Compose file versions. So

00:26:32.260 --> 00:26:32.900
<v Speaker 1>the spec,

00:26:33.674 --> 00:26:35.995
<v Speaker 1>which what we can I can put I'm

00:26:35.995 --> 00:26:37.914
<v Speaker 1>actually gonna put URLs in chat?

00:26:38.955 --> 00:26:40.875
<v Speaker 1>So there is now a Compose spec, and

00:26:40.875 --> 00:26:43.754
<v Speaker 1>it's on a single markdown document.

00:26:46.235 --> 00:26:47.355
<v Speaker 1>I'm not sure if it'll let me post

00:26:47.355 --> 00:26:49.870
<v Speaker 1>URLs. Oh, yep. Okay. It should be alright.

00:26:49.870 --> 00:26:50.350
<v Speaker 1>And

00:26:51.950 --> 00:26:57.309
<v Speaker 1>so if you just go to, like, github.com/composespec/composespec,

00:26:57.470 --> 00:26:58.830
<v Speaker 1>there's a spec in

00:26:59.710 --> 00:27:01.885
<v Speaker 1>there. And what Docker did a couple years

00:27:01.885 --> 00:27:02.445
<v Speaker 1>ago

00:27:02.685 --> 00:27:04.525
<v Speaker 1>was they announced that basically

00:27:05.805 --> 00:27:08.045
<v Speaker 1>they made the they made the specification,

00:27:08.045 --> 00:27:09.325
<v Speaker 1>we can call it an API spec, but

00:27:09.325 --> 00:27:12.045
<v Speaker 1>a specification for how you use Compose.

00:27:12.045 --> 00:27:12.365
<v Speaker 1>Again,

00:27:12.870 --> 00:27:13.590
<v Speaker 1>Compose

00:27:13.910 --> 00:27:15.430
<v Speaker 1>is too many different things to many different

00:27:15.430 --> 00:27:17.350
<v Speaker 1>people, but when it comes to this API

00:27:17.350 --> 00:27:17.990
<v Speaker 1>spec,

00:27:18.310 --> 00:27:20.150
<v Speaker 1>they formalize, which we never really had that

00:27:20.150 --> 00:27:22.550
<v Speaker 1>before, that the Compose file version that we

00:27:22.550 --> 00:27:24.230
<v Speaker 1>all typed version colon two and version colon

00:27:24.230 --> 00:27:26.875
<v Speaker 1>three, whatever, that was an implementation of the

00:27:26.875 --> 00:27:28.475
<v Speaker 1>spec that they had never really

00:27:30.315 --> 00:27:32.955
<v Speaker 1>formalized. So they formalized the spec, and then

00:27:32.955 --> 00:27:34.555
<v Speaker 1>they said, okay, now it's gonna be up

00:27:34.555 --> 00:27:36.635
<v Speaker 1>to the tool to implement

00:27:36.875 --> 00:27:39.275
<v Speaker 1>whatever features of the spec that they want,

00:27:39.450 --> 00:27:41.609
<v Speaker 1>but we're not gonna version the spec.

00:27:42.330 --> 00:27:45.929
<v Speaker 1>So how this works is we're

00:27:45.929 --> 00:27:47.370
<v Speaker 1>gonna talk today about Compose v two, and

00:27:47.370 --> 00:27:49.690
<v Speaker 1>Compose v two is really a rewrite of

00:27:49.690 --> 00:27:52.090
<v Speaker 1>the whole Compose command line tool into Golang

00:27:52.090 --> 00:27:54.775
<v Speaker 1>away from Python. They're integrating it as a

00:27:54.775 --> 00:27:57.015
<v Speaker 1>Docker plugin right into the Docker tool. Lots

00:27:57.015 --> 00:27:57.815
<v Speaker 1>of advantages.

00:27:57.975 --> 00:27:59.655
<v Speaker 1>But one of the big things about it

00:27:59.655 --> 00:28:01.895
<v Speaker 1>is that both that and the now legacy

00:28:01.895 --> 00:28:04.215
<v Speaker 1>tool, is Docker Compose,

00:28:04.535 --> 00:28:07.039
<v Speaker 1>now all follow in their latest versions the

00:28:07.039 --> 00:28:09.919
<v Speaker 1>Compose spec, which means no more versions. So

00:28:09.919 --> 00:28:11.200
<v Speaker 1>you don't have to worry about version two

00:28:11.200 --> 00:28:12.880
<v Speaker 1>dot four. Other people don't have to worry

00:28:12.880 --> 00:28:14.799
<v Speaker 1>about version three versus version two. Like, of

00:28:14.799 --> 00:28:17.840
<v Speaker 1>that matters. The Compose spec is a superset

00:28:17.840 --> 00:28:19.679
<v Speaker 1>of all of that and it includes all

00:28:19.679 --> 00:28:22.705
<v Speaker 1>those features and then new ones. And so

00:28:22.784 --> 00:28:24.784
<v Speaker 1>it's now up to the tool to look

00:28:24.784 --> 00:28:26.784
<v Speaker 1>at the YAML and decide how it's gonna

00:28:26.784 --> 00:28:27.504
<v Speaker 1>implement

00:28:27.745 --> 00:28:30.065
<v Speaker 1>all the features and whether it's whether it

00:28:30.065 --> 00:28:32.705
<v Speaker 1>supports the deploy feature or the depends on

00:28:32.705 --> 00:28:33.424
<v Speaker 1>feature

00:28:33.505 --> 00:28:35.505
<v Speaker 1>or the health check feature. That's gonna now

00:28:35.505 --> 00:28:36.225
<v Speaker 1>be up to the tool.

00:28:37.120 --> 00:28:38.960
<v Speaker 1>You could say that Swarm is a tool

00:28:38.960 --> 00:28:39.999
<v Speaker 1>implementation.

00:28:40.000 --> 00:28:42.639
<v Speaker 1>Docker Compose command line tools is is a

00:28:42.720 --> 00:28:44.399
<v Speaker 1>Compose spec implementation.

00:28:44.480 --> 00:28:46.159
<v Speaker 1>And there's lots of other ones, like Compose

00:28:46.159 --> 00:28:48.559
<v Speaker 1>with a k, which is a Kubernetes tool

00:28:48.559 --> 00:28:49.679
<v Speaker 1>for turning your

00:28:50.435 --> 00:28:53.794
<v Speaker 1>Compose with a CEML into Kubernetes manifest.

00:28:54.435 --> 00:28:56.274
<v Speaker 1>That tool is also an implementation.

00:28:56.275 --> 00:28:59.155
<v Speaker 1>AWS has an implementation for ECS. Like, there's

00:28:59.155 --> 00:29:00.995
<v Speaker 1>a bunch of implementations now

00:29:01.235 --> 00:29:03.640
<v Speaker 1>of this spec, and what's important for us

00:29:03.640 --> 00:29:05.960
<v Speaker 1>is, in today's context, is that

00:29:06.360 --> 00:29:09.000
<v Speaker 1>the new version two of the Docker command

00:29:09.000 --> 00:29:13.080
<v Speaker 1>line Compose tool implements that brand that, well,

00:29:13.080 --> 00:29:14.120
<v Speaker 1>almost brand new spec,

00:29:14.615 --> 00:29:16.055
<v Speaker 1>and you don't you and I don't have

00:29:16.055 --> 00:29:18.455
<v Speaker 1>to ever worry about those versions anymore. Now,

00:29:18.455 --> 00:29:19.175
<v Speaker 1>Swarm,

00:29:19.415 --> 00:29:20.054
<v Speaker 1>just

00:29:20.455 --> 00:29:21.895
<v Speaker 1>to follow-up for those people that are talking

00:29:21.895 --> 00:29:24.455
<v Speaker 1>about Swarm, Swarm doesn't yet implement this new

00:29:24.455 --> 00:29:25.575
<v Speaker 1>Compose spec.

00:29:25.895 --> 00:29:28.019
<v Speaker 1>So it still requires

00:29:28.019 --> 00:29:29.940
<v Speaker 1>you to put in like version three dot

00:29:29.940 --> 00:29:31.539
<v Speaker 1>eight or whatever the, I think three dot

00:29:31.539 --> 00:29:32.820
<v Speaker 1>eight or three dot nine is the newest

00:29:32.820 --> 00:29:33.539
<v Speaker 1>version there.

00:29:33.940 --> 00:29:35.860
<v Speaker 1>And if we went down the history road

00:29:35.860 --> 00:29:38.179
<v Speaker 1>for a minute, version two was always kinda

00:29:38.179 --> 00:29:40.260
<v Speaker 1>meant for local Docker Compose command line use,

00:29:40.260 --> 00:29:42.019
<v Speaker 1>and version three was always meant for Swarm,

00:29:42.394 --> 00:29:45.195
<v Speaker 1>And they never really fully fleshed out adding

00:29:45.195 --> 00:29:47.354
<v Speaker 1>all the version two features to version three.

00:29:47.514 --> 00:29:49.995
<v Speaker 1>It wasn't like they didn't deprecate anything, which

00:29:49.995 --> 00:29:52.154
<v Speaker 1>was a rumor on the internet. They just

00:29:52.315 --> 00:29:53.914
<v Speaker 1>didn't really we weren't really ever sure how

00:29:53.914 --> 00:29:56.260
<v Speaker 1>to implement depends on in a cluster. So

00:29:56.260 --> 00:29:58.100
<v Speaker 1>they never really finished

00:29:58.260 --> 00:29:59.619
<v Speaker 1>adopting that

00:30:00.260 --> 00:30:01.620
<v Speaker 1>organization

00:30:01.620 --> 00:30:03.380
<v Speaker 1>that's required in order to do depends on

00:30:03.380 --> 00:30:06.100
<v Speaker 1>across many servers, right? They never really implemented

00:30:06.100 --> 00:30:07.540
<v Speaker 1>that in Swarm, and so that was really

00:30:07.540 --> 00:30:09.875
<v Speaker 1>the reason version three never adopted. And I

00:30:09.875 --> 00:30:11.315
<v Speaker 1>and I'm like you, I love the depends

00:30:11.315 --> 00:30:12.114
<v Speaker 1>on feature.

00:30:12.275 --> 00:30:13.875
<v Speaker 1>We can actually go through an example and

00:30:13.875 --> 00:30:15.235
<v Speaker 1>talk about it because a lot of people

00:30:15.235 --> 00:30:17.635
<v Speaker 1>don't know that it exists and it's pretty

00:30:17.635 --> 00:30:18.195
<v Speaker 1>awesome.

00:30:19.635 --> 00:30:20.595
<v Speaker 0>Alright. Awesome.

00:30:21.550 --> 00:30:23.790
<v Speaker 0>Alright. We'll just quickly cover some of the

00:30:23.790 --> 00:30:25.230
<v Speaker 0>comments and then we're gonna go over to

00:30:25.230 --> 00:30:26.750
<v Speaker 0>the screen share and we're gonna start playing

00:30:26.750 --> 00:30:28.510
<v Speaker 0>with some of this new goodness. So

00:30:29.230 --> 00:30:31.470
<v Speaker 0>said said v three still has health checks.

00:30:31.470 --> 00:30:33.790
<v Speaker 0>Yes. But it depends on functionality. It doesn't

00:30:33.790 --> 00:30:35.230
<v Speaker 0>support conditional

00:30:35.950 --> 00:30:38.135
<v Speaker 0>start thingies, which I'm hoping we're gonna play

00:30:38.135 --> 00:30:38.855
<v Speaker 0>with today.

00:30:39.735 --> 00:30:42.774
<v Speaker 0>APM asked us Docker Compose or for Podman.

00:30:43.895 --> 00:30:46.615
<v Speaker 0>Not really, but as Kevin has commented, there

00:30:46.615 --> 00:30:48.535
<v Speaker 0>is a Podman Compose. Feel free to check

00:30:48.535 --> 00:30:50.455
<v Speaker 0>out that project. I think it's on the

00:30:50.455 --> 00:30:52.375
<v Speaker 0>containers, git hub Com /

00:30:52.750 --> 00:30:54.590
<v Speaker 0>containersorganization.

00:30:55.309 --> 00:30:57.549
<v Speaker 1>Yeah. That's a good I'm I'm glad for

00:30:57.549 --> 00:30:59.950
<v Speaker 1>that because I had forgot what the answer

00:30:59.950 --> 00:31:00.990
<v Speaker 1>was. I knew that there was a way

00:31:00.990 --> 00:31:02.669
<v Speaker 1>to do it, but I I could remember

00:31:03.390 --> 00:31:04.910
<v Speaker 1>what it was at Podman. And

00:31:06.075 --> 00:31:07.914
<v Speaker 1>so I guess that would be we have

00:31:07.995 --> 00:31:09.034
<v Speaker 1>to look at it, but I guess we

00:31:09.034 --> 00:31:11.434
<v Speaker 1>could say that, hopefully, Podman Compose

00:31:11.514 --> 00:31:13.594
<v Speaker 1>is implementing the Compose spec.

00:31:13.835 --> 00:31:16.315
<v Speaker 1>So that way, we will start getting because

00:31:16.315 --> 00:31:17.674
<v Speaker 1>if were to dive

00:31:17.995 --> 00:31:19.595
<v Speaker 1>and nerd out in the Compose spec, there's

00:31:19.595 --> 00:31:20.075
<v Speaker 1>actually

00:31:20.560 --> 00:31:22.160
<v Speaker 1>a lot of interesting

00:31:22.560 --> 00:31:24.080
<v Speaker 1>ideas and things that

00:31:24.320 --> 00:31:26.240
<v Speaker 1>could be implemented in various tools in various

00:31:26.240 --> 00:31:27.760
<v Speaker 1>ways to allow us to all use this

00:31:27.760 --> 00:31:30.799
<v Speaker 1>simple YAML file format to do actually

00:31:31.200 --> 00:31:32.880
<v Speaker 1>more of the things that we don't think

00:31:32.880 --> 00:31:34.880
<v Speaker 1>Compose is for, right, like Ingress,

00:31:36.905 --> 00:31:39.304
<v Speaker 1>Well, more more advanced things than Ingress, but

00:31:39.304 --> 00:31:40.825
<v Speaker 1>I was gonna say storage, but storage is

00:31:40.825 --> 00:31:43.465
<v Speaker 1>kinda already in there with the drivers concept.

00:31:43.465 --> 00:31:45.225
<v Speaker 1>But that's what that's what we really haven't

00:31:45.225 --> 00:31:46.745
<v Speaker 1>seen a tool take to the next level

00:31:46.745 --> 00:31:47.785
<v Speaker 1>yet is

00:31:49.790 --> 00:31:52.190
<v Speaker 1>taking the Compose spec and turning it into

00:31:52.190 --> 00:31:53.230
<v Speaker 1>a production

00:31:54.030 --> 00:31:54.830
<v Speaker 1>ready

00:31:55.230 --> 00:31:57.710
<v Speaker 1>man almost like manifest light. Right?

00:31:58.350 --> 00:32:01.309
<v Speaker 1>And there is that ECS integration, like CJ

00:32:01.309 --> 00:32:02.110
<v Speaker 1>is mentioning,

00:32:02.270 --> 00:32:03.870
<v Speaker 1>and they have some new stuff in there

00:32:03.870 --> 00:32:06.145
<v Speaker 1>as well for Azure

00:32:06.145 --> 00:32:09.025
<v Speaker 1>ACI as well as AWS's ECS. So you

00:32:09.025 --> 00:32:11.025
<v Speaker 1>can you can either check out my channel

00:32:11.025 --> 00:32:12.145
<v Speaker 1>or Docker's channel.

00:32:12.465 --> 00:32:13.905
<v Speaker 1>People have shown about how you can use

00:32:13.905 --> 00:32:16.545
<v Speaker 1>Docker command line with this new new Compose

00:32:16.545 --> 00:32:19.105
<v Speaker 1>tool to not just deploy to Docker, but

00:32:19.105 --> 00:32:21.720
<v Speaker 1>also to deploy to clouds like an ECS

00:32:21.720 --> 00:32:25.320
<v Speaker 1>cluster or an ACI server inside of Azure.

00:32:25.400 --> 00:32:25.960
<v Speaker 1>So

00:32:26.360 --> 00:32:27.240
<v Speaker 1>Docker

00:32:27.880 --> 00:32:30.120
<v Speaker 1>a a side comment on this is that

00:32:30.280 --> 00:32:31.400
<v Speaker 1>a lot of people, when they think of

00:32:31.400 --> 00:32:32.520
<v Speaker 1>Docker in the old ways and how to

00:32:32.520 --> 00:32:33.880
<v Speaker 1>deploy it, we think of things like Docker

00:32:33.880 --> 00:32:34.360
<v Speaker 1>machine,

00:32:36.055 --> 00:32:37.975
<v Speaker 1>other tools for setting up Docker on a

00:32:37.975 --> 00:32:38.534
<v Speaker 1>server.

00:32:38.775 --> 00:32:40.615
<v Speaker 1>And since Docker is now focused as a

00:32:40.615 --> 00:32:43.175
<v Speaker 1>company, they're focused on developer tooling, they're not

00:32:43.175 --> 00:32:44.855
<v Speaker 1>trying to create servers anymore. In fact, they're

00:32:44.855 --> 00:32:45.975
<v Speaker 1>almost intentionally

00:32:45.975 --> 00:32:46.934
<v Speaker 1>going away

00:32:47.255 --> 00:32:48.295
<v Speaker 1>from being the

00:32:48.679 --> 00:32:50.760
<v Speaker 1>we do run times on your servers, so

00:32:50.760 --> 00:32:52.280
<v Speaker 1>build a bunch of servers and do our

00:32:52.280 --> 00:32:54.519
<v Speaker 1>stuff, right? Their approach is now,

00:32:54.840 --> 00:32:56.520
<v Speaker 1>hey, look, the clouds have all got their

00:32:56.520 --> 00:32:59.640
<v Speaker 1>APIs for how they wanna do container deployments,

00:32:59.640 --> 00:33:01.160
<v Speaker 1>and they all have different interesting ideas on

00:33:01.160 --> 00:33:03.184
<v Speaker 1>how to do that in various ways. So

00:33:03.184 --> 00:33:04.705
<v Speaker 1>now what we're seeing with this new Docker

00:33:04.705 --> 00:33:05.504
<v Speaker 1>Compose

00:33:05.905 --> 00:33:08.945
<v Speaker 1>CLI tool is it's using the Compose spec

00:33:09.184 --> 00:33:09.745
<v Speaker 1>to

00:33:10.065 --> 00:33:12.545
<v Speaker 1>allow you to deploy directly to those ideas

00:33:12.545 --> 00:33:14.865
<v Speaker 1>rather than, like, you know, we mentioned

00:33:16.090 --> 00:33:17.690
<v Speaker 1>Kubernetes directly

00:33:17.770 --> 00:33:19.690
<v Speaker 1>to the Kubernetes API

00:33:19.770 --> 00:33:22.250
<v Speaker 1>and then to something like ECS, which is

00:33:22.250 --> 00:33:24.410
<v Speaker 1>a different cloud API, and then something like

00:33:24.410 --> 00:33:25.290
<v Speaker 1>Azure

00:33:25.690 --> 00:33:27.770
<v Speaker 1>ACI, which is a different API. So now

00:33:27.770 --> 00:33:29.835
<v Speaker 1>Docker is you think about it, they're they're

00:33:29.835 --> 00:33:32.794
<v Speaker 1>they're adding integrations to integrate with cloud APIs,

00:33:32.875 --> 00:33:34.554
<v Speaker 1>not with their daemon,

00:33:34.635 --> 00:33:35.274
<v Speaker 1>which is

00:33:35.755 --> 00:33:37.914
<v Speaker 1>totally one eighty from, you know, the first

00:33:37.914 --> 00:33:39.914
<v Speaker 1>five years of Docker's life, six years of

00:33:39.914 --> 00:33:41.674
<v Speaker 1>Docker's life. It was all about the Docker

00:33:41.674 --> 00:33:43.674
<v Speaker 1>daemon is somewhere, you have the Docker command

00:33:43.674 --> 00:33:45.950
<v Speaker 1>line or the Compose command line, and you're

00:33:45.950 --> 00:33:48.429
<v Speaker 1>talking to that daemon on a TCP port.

00:33:48.750 --> 00:33:50.509
<v Speaker 1>And now, what they're really looking at this

00:33:50.509 --> 00:33:53.070
<v Speaker 1>is, well, we have that, and that's great,

00:33:53.230 --> 00:33:55.549
<v Speaker 1>but we're going our future is really in

00:33:55.549 --> 00:33:58.350
<v Speaker 1>integrations to clouds, and we're gonna use Compose

00:33:58.350 --> 00:34:00.495
<v Speaker 1>as the way to do that.

00:34:02.415 --> 00:34:03.615
<v Speaker 0>Alright. Awesome.

00:34:04.095 --> 00:34:06.335
<v Speaker 0>I think we should get you I think

00:34:08.415 --> 00:34:10.335
<v Speaker 0>we get your screen shared and we start

00:34:10.335 --> 00:34:13.054
<v Speaker 0>having some fun with this new Yeah. CLI

00:34:13.054 --> 00:34:13.775
<v Speaker 0>v two.

00:34:14.859 --> 00:34:16.860
<v Speaker 1>Too much talking, not enough doing.

00:34:18.540 --> 00:34:19.580
<v Speaker 0>No. It's

00:34:20.060 --> 00:34:21.900
<v Speaker 0>a good good conversation. I think it adds

00:34:21.900 --> 00:34:23.500
<v Speaker 0>a lot of context and people can understand

00:34:23.500 --> 00:34:25.179
<v Speaker 0>the history of these tools and and and

00:34:25.179 --> 00:34:27.260
<v Speaker 0>where it's going. I always think I'm always

00:34:27.260 --> 00:34:27.659
<v Speaker 0>amazed,

00:34:28.094 --> 00:34:30.094
<v Speaker 0>you know, the original Docker Compose written in

00:34:30.094 --> 00:34:32.255
<v Speaker 0>Python, I think, was maintained by one person

00:34:32.255 --> 00:34:33.855
<v Speaker 0>for, like, the last two or three years

00:34:33.855 --> 00:34:35.135
<v Speaker 0>of its existence. Yeah.

00:34:35.935 --> 00:34:36.335
<v Speaker 0>One

00:34:36.895 --> 00:34:38.815
<v Speaker 1>or two main people in there and, yeah.

00:34:39.775 --> 00:34:41.614
<v Speaker 0>Well, seeing it running Go with the spec

00:34:41.614 --> 00:34:43.375
<v Speaker 0>just brings a whole new lease of life

00:34:43.375 --> 00:34:45.830
<v Speaker 0>to it, which is really exciting. Yeah. There

00:34:45.830 --> 00:34:46.790
<v Speaker 1>was I mean,

00:34:47.190 --> 00:34:49.270
<v Speaker 1>there was a conference in Berlin, a Docker

00:34:49.270 --> 00:34:50.710
<v Speaker 1>conference called the Distributed

00:34:50.950 --> 00:34:52.550
<v Speaker 1>they only did it one time. It was

00:34:52.550 --> 00:34:53.510
<v Speaker 1>2016,

00:34:53.510 --> 00:34:55.430
<v Speaker 1>I think, maybe yeah, 2016,

00:34:55.830 --> 00:34:58.710
<v Speaker 1>in Berlin called the Distributed Computing Conference, and

00:34:58.710 --> 00:35:00.245
<v Speaker 1>it was right I

00:35:01.525 --> 00:35:02.805
<v Speaker 1>don't think it was KubeCon. It might have

00:35:02.805 --> 00:35:04.165
<v Speaker 1>just been, like, a Linux

00:35:04.405 --> 00:35:06.965
<v Speaker 1>Foundation conference, anyway, in Berlin.

00:35:07.285 --> 00:35:08.325
<v Speaker 1>And so everybody

00:35:08.485 --> 00:35:09.925
<v Speaker 1>was there, and

00:35:11.205 --> 00:35:12.965
<v Speaker 1>it was a really interesting conference because a

00:35:12.965 --> 00:35:14.325
<v Speaker 1>lot of the ideas that we're still seeing

00:35:14.325 --> 00:35:17.420
<v Speaker 1>implemented today in distributed computing and in Docker

00:35:17.420 --> 00:35:18.700
<v Speaker 1>were first there,

00:35:19.099 --> 00:35:20.060
<v Speaker 1>like distributed

00:35:20.380 --> 00:35:22.540
<v Speaker 1>storage, a lot of it distributed

00:35:23.260 --> 00:35:25.500
<v Speaker 1>storage that's connected to containers automatically.

00:35:25.500 --> 00:35:27.020
<v Speaker 1>Those are still things that are being fleshed

00:35:27.020 --> 00:35:29.145
<v Speaker 1>out. But one of them was we're gonna

00:35:29.145 --> 00:35:31.145
<v Speaker 1>rewrite Compose in Go, and then we're gonna

00:35:31.145 --> 00:35:31.865
<v Speaker 1>be able to

00:35:32.265 --> 00:35:34.985
<v Speaker 1>share libraries from Docker and Compose to use

00:35:34.985 --> 00:35:37.145
<v Speaker 1>the same underpinnings instead of two different languages

00:35:37.145 --> 00:35:38.745
<v Speaker 1>and two different libraries.

00:35:40.185 --> 00:35:42.340
<v Speaker 1>It's sad that it took this many years

00:35:42.340 --> 00:35:44.020
<v Speaker 1>to get there five years later,

00:35:44.660 --> 00:35:46.900
<v Speaker 1>but at least it's here. And it's it's

00:35:46.900 --> 00:35:48.820
<v Speaker 1>an opportunity because I think there's a lot

00:35:48.820 --> 00:35:51.700
<v Speaker 1>of edge cases around the Python. Like, most

00:35:51.700 --> 00:35:54.340
<v Speaker 1>people don't realize Docker Compose uses Pyinstaller,

00:35:54.340 --> 00:35:55.860
<v Speaker 1>so it actually it adds

00:35:56.415 --> 00:35:58.975
<v Speaker 1>two or three hundred milliseconds to every command

00:35:59.295 --> 00:36:01.775
<v Speaker 1>in terms of delay unless you're installing it

00:36:01.775 --> 00:36:03.855
<v Speaker 1>with PIP because it has to unpack

00:36:04.175 --> 00:36:05.135
<v Speaker 1>the binary,

00:36:05.375 --> 00:36:07.295
<v Speaker 1>run Python with the with the scripts, and

00:36:07.295 --> 00:36:08.655
<v Speaker 1>then do this stuff. And then, of course,

00:36:08.960 --> 00:36:11.039
<v Speaker 1>debugging when you get errors in Python is

00:36:11.039 --> 00:36:11.920
<v Speaker 1>always interesting.

00:36:12.480 --> 00:36:12.960
<v Speaker 1>So,

00:36:13.359 --> 00:36:15.519
<v Speaker 1>yeah, there's lots of good news here. In

00:36:15.519 --> 00:36:16.960
<v Speaker 1>fact, let me share my browser first because

00:36:16.960 --> 00:36:18.559
<v Speaker 1>let's just let's go over real quick for

00:36:18.559 --> 00:36:19.520
<v Speaker 1>those that aren't

00:36:19.920 --> 00:36:21.440
<v Speaker 1>savvy of how even how to get this

00:36:21.440 --> 00:36:22.640
<v Speaker 1>before I start demoing it.

00:36:23.315 --> 00:36:24.755
<v Speaker 1>I I don't think I can share I

00:36:24.755 --> 00:36:25.954
<v Speaker 1>don't think I can switch Windows. I think

00:36:25.954 --> 00:36:27.555
<v Speaker 1>I just have to stop and start.

00:36:30.914 --> 00:36:32.755
<v Speaker 1>But if the good news is is if

00:36:32.755 --> 00:36:33.875
<v Speaker 1>you are on

00:36:34.674 --> 00:36:37.075
<v Speaker 1>Docker desktop, you already have this. So this

00:36:37.075 --> 00:36:39.790
<v Speaker 1>new version is Docker Compose

00:36:39.790 --> 00:36:41.630
<v Speaker 1>instead of Docker Compose.

00:36:41.630 --> 00:36:44.910
<v Speaker 1>So it's a plugin sub command of Docker,

00:36:45.070 --> 00:36:46.589
<v Speaker 1>and if you have Docker Desktop, it comes

00:36:46.589 --> 00:36:48.750
<v Speaker 1>with it. You already have it. So just

00:36:48.750 --> 00:36:51.070
<v Speaker 1>start typing Docker Compose from now on, and

00:36:51.070 --> 00:36:53.295
<v Speaker 1>all your original commands work, and then there's

00:36:53.295 --> 00:36:54.255
<v Speaker 1>a bunch of new ones.

00:36:55.295 --> 00:36:57.375
<v Speaker 1>But they have their own repo, so instead

00:36:57.375 --> 00:37:02.735
<v Speaker 1>of it the old repo was github.com/docker/compose.

00:37:03.055 --> 00:37:05.135
<v Speaker 1>The new one is I'm gonna zoom in

00:37:05.135 --> 00:37:06.175
<v Speaker 1>a little bit so it's easier to read.

00:37:06.360 --> 00:37:07.560
<v Speaker 1>The new one is

00:37:07.880 --> 00:37:10.760
<v Speaker 1>Compose CLI, so Compose dash CLI.

00:37:10.920 --> 00:37:12.680
<v Speaker 1>And if you scroll down, you can find,

00:37:12.680 --> 00:37:14.680
<v Speaker 1>for Linux people, there are people that aren't

00:37:14.680 --> 00:37:16.520
<v Speaker 1>using maybe they're using a VM and they're

00:37:16.520 --> 00:37:18.360
<v Speaker 1>not using Docker desktop.

00:37:18.440 --> 00:37:20.680
<v Speaker 1>You can get install instructions there, which is

00:37:20.680 --> 00:37:21.400
<v Speaker 1>essentially

00:37:22.025 --> 00:37:24.985
<v Speaker 1>the newer instructions are essentially have Docker installed

00:37:25.065 --> 00:37:25.705
<v Speaker 1>and

00:37:26.025 --> 00:37:27.465
<v Speaker 1>download this plugin.

00:37:27.545 --> 00:37:30.265
<v Speaker 1>And there's a format for Docker plugins, and

00:37:30.265 --> 00:37:32.025
<v Speaker 1>they go in a subdirectory of your user

00:37:32.025 --> 00:37:33.945
<v Speaker 1>directory and all that stuff. So they they

00:37:33.945 --> 00:37:34.745
<v Speaker 1>get you set up and running,

00:37:35.430 --> 00:37:36.790
<v Speaker 1>and then you should be able to go

00:37:36.790 --> 00:37:38.550
<v Speaker 1>to your command line and do that. By

00:37:38.550 --> 00:37:39.990
<v Speaker 1>the way, I think I did I link

00:37:39.990 --> 00:37:41.430
<v Speaker 1>the spec? I think I already linked the

00:37:41.430 --> 00:37:42.390
<v Speaker 1>spec earlier.

00:37:42.710 --> 00:37:45.030
<v Speaker 1>But that this is the spec, which is

00:37:45.030 --> 00:37:47.270
<v Speaker 1>this very, very long single

00:37:47.270 --> 00:37:48.069
<v Speaker 1>markdown file.

00:37:50.305 --> 00:37:52.385
<v Speaker 1>I'll put the Compose CLI there in the

00:37:53.025 --> 00:37:53.665
<v Speaker 1>people.

00:37:55.585 --> 00:37:57.585
<v Speaker 1>But let's switch over and

00:37:59.025 --> 00:38:02.170
<v Speaker 1>man, this this this shares this is for

00:38:02.170 --> 00:38:04.490
<v Speaker 1>later feedback on Ecamm Live. This the sharing

00:38:04.490 --> 00:38:06.090
<v Speaker 1>screen button is right next to the hang

00:38:06.090 --> 00:38:07.850
<v Speaker 1>up button. It's super

00:38:08.650 --> 00:38:09.530
<v Speaker 1>super

00:38:10.650 --> 00:38:12.170
<v Speaker 0>Well, I thank you for not hanging up

00:38:12.170 --> 00:38:14.650
<v Speaker 0>on me. So Right. That would be awkward.

00:38:17.025 --> 00:38:19.505
<v Speaker 1>Okay. And that concludes today's episode.

00:38:19.585 --> 00:38:19.985
<v Speaker 1>So

00:38:21.265 --> 00:38:23.425
<v Speaker 1>you'll notice that when I do a Docker

00:38:24.224 --> 00:38:25.265
<v Speaker 1>Compose

00:38:25.265 --> 00:38:26.065
<v Speaker 1>version

00:38:26.785 --> 00:38:29.265
<v Speaker 1>so this is my old Python

00:38:29.505 --> 00:38:30.145
<v Speaker 1>runtime.

00:38:31.329 --> 00:38:33.170
<v Speaker 1>So you'll see, like, Docker Py, which is

00:38:33.170 --> 00:38:34.530
<v Speaker 1>technically the library

00:38:34.770 --> 00:38:37.890
<v Speaker 1>that Compose is wrapped around and then c

00:38:37.890 --> 00:38:38.690
<v Speaker 1>Python.

00:38:39.730 --> 00:38:41.170
<v Speaker 1>And so now if I do a Docker

00:38:41.170 --> 00:38:42.050
<v Speaker 1>Compose version,

00:38:44.525 --> 00:38:47.164
<v Speaker 1>it this is the Go binary that's running

00:38:47.164 --> 00:38:49.005
<v Speaker 1>from a subdirectory

00:38:49.484 --> 00:38:51.484
<v Speaker 1>of the plugins where all the Docker plugins

00:38:51.484 --> 00:38:53.565
<v Speaker 1>are at. And if you do a Docker

00:38:53.565 --> 00:38:54.525
<v Speaker 1>info,

00:38:54.525 --> 00:38:55.724
<v Speaker 1>you can see

00:38:56.365 --> 00:38:57.724
<v Speaker 1>in that info list,

00:38:58.660 --> 00:39:00.580
<v Speaker 1>you can see plugins that are installed in

00:39:00.580 --> 00:39:02.020
<v Speaker 1>your Docker. Some some of us may not

00:39:02.020 --> 00:39:03.780
<v Speaker 1>realize we've actually had plugins

00:39:03.780 --> 00:39:06.180
<v Speaker 1>for a while. If you're running Docker Desktop,

00:39:06.340 --> 00:39:09.380
<v Speaker 1>Docker Desktop will automatically add a scan. So

00:39:09.380 --> 00:39:12.260
<v Speaker 1>Docker space scan is which is from Snyk.

00:39:12.260 --> 00:39:13.975
<v Speaker 1>So it's like a Sneak plugin,

00:39:14.055 --> 00:39:15.815
<v Speaker 1>and then Buildx is the new

00:39:16.055 --> 00:39:19.415
<v Speaker 1>advanced builder for fancier and faster building of

00:39:19.415 --> 00:39:21.335
<v Speaker 1>your Docker images. So those are all plugins

00:39:21.335 --> 00:39:22.695
<v Speaker 1>already. So now we get this new one

00:39:22.695 --> 00:39:23.415
<v Speaker 1>Compose,

00:39:23.655 --> 00:39:25.815
<v Speaker 1>which they're they've been iterating through the release

00:39:25.815 --> 00:39:28.619
<v Speaker 1>clients lately and still squashing some bugs and

00:39:28.619 --> 00:39:30.140
<v Speaker 1>stuff like that. I tend to use it

00:39:30.140 --> 00:39:31.500
<v Speaker 1>every day. I've been do trying to do

00:39:31.500 --> 00:39:33.900
<v Speaker 1>it all year. Obviously, as it's matured, the

00:39:33.900 --> 00:39:35.820
<v Speaker 1>bugs have been less and less, and I

00:39:35.820 --> 00:39:38.540
<v Speaker 1>think I'm only tracking, like, one bug that

00:39:38.715 --> 00:39:40.795
<v Speaker 1>only happens every so often. So

00:39:43.195 --> 00:39:44.635
<v Speaker 1>then we we when we do those Docker

00:39:44.635 --> 00:39:45.355
<v Speaker 1>Compose

00:39:45.755 --> 00:39:48.555
<v Speaker 1>commands, if you're someone who's used Compose before,

00:39:49.115 --> 00:39:51.435
<v Speaker 1>if you just type Docker space Compose, you

00:39:51.435 --> 00:39:51.755
<v Speaker 1>see

00:39:52.450 --> 00:39:55.490
<v Speaker 1>all all the typical commands. Right? And most

00:39:55.490 --> 00:39:56.450
<v Speaker 1>people actually

00:39:57.970 --> 00:39:59.810
<v Speaker 1>when they use Compose, they use, like, two

00:39:59.970 --> 00:40:01.330
<v Speaker 1>we all know, like, the Docker Compose up

00:40:01.330 --> 00:40:02.690
<v Speaker 1>and the Docker Compose down. Those are probably

00:40:02.690 --> 00:40:04.770
<v Speaker 1>the first two that everyone learns, and they

00:40:04.770 --> 00:40:07.235
<v Speaker 1>might learn Docker Compose build, which builds all

00:40:07.235 --> 00:40:09.155
<v Speaker 1>the images that are inside of that one

00:40:09.155 --> 00:40:10.995
<v Speaker 1>Compose file, which is convenient.

00:40:12.515 --> 00:40:14.995
<v Speaker 1>But when you think of Compose, think of

00:40:14.995 --> 00:40:17.315
<v Speaker 1>it as I should never have to type

00:40:17.475 --> 00:40:20.435
<v Speaker 1>an actual Docker command without the Compose

00:40:21.710 --> 00:40:24.270
<v Speaker 1>because the Compose is designed for a project

00:40:24.270 --> 00:40:26.430
<v Speaker 1>mindset. So all of these commands

00:40:26.510 --> 00:40:29.390
<v Speaker 1>have the scope of whatever current Compose YAML

00:40:29.390 --> 00:40:31.230
<v Speaker 1>file you're using. So if I use if

00:40:31.230 --> 00:40:32.750
<v Speaker 1>I do a Docker Compose PS,

00:40:32.910 --> 00:40:35.154
<v Speaker 1>I will only see listed the containers that

00:40:35.154 --> 00:40:37.315
<v Speaker 1>are in my current project, not maybe other

00:40:37.315 --> 00:40:38.994
<v Speaker 1>containers that I got running somewhere else

00:40:40.035 --> 00:40:42.035
<v Speaker 1>on machine, my local machine, my server, whatever.

00:40:42.194 --> 00:40:44.515
<v Speaker 1>So that's one of the reasons I say

00:40:44.515 --> 00:40:46.755
<v Speaker 1>it's the developer friendly tool because a lot

00:40:46.755 --> 00:40:48.515
<v Speaker 1>of us may need to run multiple projects

00:40:48.515 --> 00:40:50.529
<v Speaker 1>at the same time if we're trying to

00:40:50.529 --> 00:40:51.970
<v Speaker 1>integrate two things together,

00:40:52.210 --> 00:40:53.650
<v Speaker 1>or maybe we don't wanna spin something down

00:40:53.650 --> 00:40:55.170
<v Speaker 1>while we go test something else.

00:40:55.650 --> 00:40:57.970
<v Speaker 1>And so these Compose commands are designed to

00:40:57.970 --> 00:40:58.770
<v Speaker 1>wrap

00:40:59.170 --> 00:41:02.289
<v Speaker 1>the Docker and sort of filter out anything

00:41:02.289 --> 00:41:05.010
<v Speaker 1>else in Docker that you're not dealing with

00:41:04.275 --> 00:41:06.115
<v Speaker 1>at the moment in your current directory.

00:41:06.595 --> 00:41:08.595
<v Speaker 1>And so a lot of people will be

00:41:08.674 --> 00:41:11.474
<v Speaker 1>surprised to find things like Docker Compose top,

00:41:11.714 --> 00:41:13.635
<v Speaker 1>Docker Compose. Now we have

00:41:14.355 --> 00:41:15.715
<v Speaker 1>we've had PS,

00:41:16.515 --> 00:41:18.515
<v Speaker 1>but now we have this new one, LS,

00:41:18.515 --> 00:41:19.875
<v Speaker 1>which actually gets us

00:41:20.270 --> 00:41:22.510
<v Speaker 1>if you have many projects or many directories

00:41:22.510 --> 00:41:24.349
<v Speaker 1>where you've done Docker Compose up, you can

00:41:24.349 --> 00:41:26.110
<v Speaker 1>now see a list of all those.

00:41:26.670 --> 00:41:29.230
<v Speaker 1>And so you because sometimes we we forget,

00:41:29.310 --> 00:41:31.710
<v Speaker 1>like we close some windows, we forget, oh,

00:41:31.710 --> 00:41:34.510
<v Speaker 1>man, I got Docker Compose running somewhere. I

00:41:34.055 --> 00:41:35.975
<v Speaker 1>don't remember which directory it's from, and it's

00:41:35.975 --> 00:41:37.095
<v Speaker 1>not super obvious

00:41:37.655 --> 00:41:39.655
<v Speaker 1>how to get back to them. But now

00:41:39.655 --> 00:41:41.335
<v Speaker 1>in any directory, you can just type Docker

00:41:41.335 --> 00:41:42.455
<v Speaker 1>Compose ls,

00:41:42.855 --> 00:41:44.695
<v Speaker 1>and it will just show you if you

00:41:44.695 --> 00:41:47.415
<v Speaker 1>have any Compose projects running anywhere on your

00:41:47.415 --> 00:41:49.880
<v Speaker 1>system. And I don't. Yeah. What typically would

00:41:49.880 --> 00:41:51.400
<v Speaker 0>happen to me is I'd run a Docker

00:41:51.400 --> 00:41:53.160
<v Speaker 0>Compose app and it would complain about the

00:41:53.160 --> 00:41:54.680
<v Speaker 0>port bindings, and I'd go, oh, I've left

00:41:54.680 --> 00:41:55.880
<v Speaker 0>something running somewhere.

00:41:56.119 --> 00:41:57.000
<v Speaker 1>Exactly.

00:41:57.400 --> 00:41:58.839
<v Speaker 1>And that's exactly when you would use a

00:41:58.839 --> 00:42:00.725
<v Speaker 1>Docker Compose OS. I do that all the

00:42:00.725 --> 00:42:01.445
<v Speaker 1>time as well.

00:42:02.565 --> 00:42:04.325
<v Speaker 1>If you have a Docker desktop GUI,

00:42:04.405 --> 00:42:05.765
<v Speaker 1>the GUI now actually has a lot of

00:42:05.765 --> 00:42:07.045
<v Speaker 1>this built in too. I'm not gonna show

00:42:07.045 --> 00:42:07.765
<v Speaker 1>it, but

00:42:08.165 --> 00:42:11.365
<v Speaker 1>the dashboard GUI now has a Compose, it's

00:42:11.365 --> 00:42:13.850
<v Speaker 1>Compose aware, so it will show you a

00:42:13.850 --> 00:42:15.770
<v Speaker 1>Compose project and allow you to see the

00:42:15.770 --> 00:42:18.170
<v Speaker 1>logs. You can start and stop it all

00:42:18.170 --> 00:42:20.410
<v Speaker 1>from inside the GUI in case you're more

00:42:20.410 --> 00:42:21.450
<v Speaker 1>of a GUI person.

00:42:23.050 --> 00:42:25.050
<v Speaker 1>But, yeah. So that's a really nice they

00:42:25.050 --> 00:42:27.335
<v Speaker 1>added that right up front when they started

00:42:27.335 --> 00:42:28.535
<v Speaker 1>working on the v two, and that was

00:42:28.535 --> 00:42:29.655
<v Speaker 1>a nice add in because

00:42:30.214 --> 00:42:31.655
<v Speaker 1>it was one of those things where you

00:42:31.655 --> 00:42:33.175
<v Speaker 1>hit it and you're like, well, how do

00:42:33.175 --> 00:42:34.214
<v Speaker 1>I deal with this problem? I do a

00:42:34.214 --> 00:42:34.935
<v Speaker 1>Docker

00:42:35.095 --> 00:42:36.454
<v Speaker 1>PS, and I see a whole bunch of

00:42:36.454 --> 00:42:37.655
<v Speaker 1>containers, but I don't know

00:42:38.849 --> 00:42:40.130
<v Speaker 1>where they are or how to stop. I

00:42:40.130 --> 00:42:41.410
<v Speaker 1>don't wanna have to manually stop each one

00:42:41.410 --> 00:42:43.569
<v Speaker 1>of them, especially if you're, like, a microservice

00:42:43.569 --> 00:42:45.490
<v Speaker 1>person. That would be a lot of pain.

00:42:46.450 --> 00:42:47.810
<v Speaker 1>So we

00:42:48.289 --> 00:42:49.730
<v Speaker 1>have all the other typicals. Like, you can

00:42:49.730 --> 00:42:52.115
<v Speaker 1>actually copy files in and out of your

00:42:52.115 --> 00:42:54.515
<v Speaker 1>Docker Compose services because remember, all these things

00:42:54.515 --> 00:42:56.035
<v Speaker 1>are services in Compose.

00:42:57.395 --> 00:42:59.234
<v Speaker 1>You can copy things in and out. You

00:42:59.234 --> 00:43:01.635
<v Speaker 1>can exec into these, and you don't have

00:43:01.635 --> 00:43:03.714
<v Speaker 1>to know the container name. So what I

00:43:03.714 --> 00:43:05.155
<v Speaker 1>see, one of the big mistakes I see

00:43:05.155 --> 00:43:05.714
<v Speaker 1>people using

00:43:06.650 --> 00:43:09.210
<v Speaker 1>is they'll create a Compose file, and I've

00:43:09.210 --> 00:43:11.050
<v Speaker 1>done this before I learned how this worked,

00:43:11.370 --> 00:43:12.810
<v Speaker 1>but they'll manually

00:43:13.210 --> 00:43:15.610
<v Speaker 1>assign container names. So there's a YAML value

00:43:15.610 --> 00:43:16.970
<v Speaker 1>that they'll put in their file that says

00:43:16.970 --> 00:43:18.890
<v Speaker 1>container name, and they'll

00:43:18.890 --> 00:43:20.010
<v Speaker 1>hard code the container names,

00:43:20.724 --> 00:43:23.365
<v Speaker 1>and that tells me that they're still using

00:43:23.365 --> 00:43:25.605
<v Speaker 1>the Docker command line. They're not using Compose

00:43:25.605 --> 00:43:26.565
<v Speaker 1>for everything,

00:43:26.885 --> 00:43:28.805
<v Speaker 1>because if you're using Compose for everything, like

00:43:28.805 --> 00:43:29.605
<v Speaker 1>exec,

00:43:29.605 --> 00:43:33.365
<v Speaker 1>ps, logs, kill, start, stop, restart, like all

00:43:33.365 --> 00:43:36.200
<v Speaker 1>these commands that are managing it, you're using

00:43:36.200 --> 00:43:38.680
<v Speaker 1>the Compose commands for the service name, not

00:43:38.680 --> 00:43:40.200
<v Speaker 1>the container name. Because again, you can have

00:43:40.200 --> 00:43:42.200
<v Speaker 1>a service with multiple containers,

00:43:42.440 --> 00:43:43.640
<v Speaker 1>which is why when you start up something

00:43:43.640 --> 00:43:45.480
<v Speaker 1>in Docker Compose, you will see like Docker

00:43:45.480 --> 00:43:46.200
<v Speaker 1>Compose,

00:43:46.440 --> 00:43:48.915
<v Speaker 1>you know, service name dash one, you know,

00:43:48.915 --> 00:43:50.275
<v Speaker 1>and then dash two and dash three if

00:43:50.275 --> 00:43:51.635
<v Speaker 1>you do multiple replicas.

00:43:52.115 --> 00:43:54.035
<v Speaker 1>And so it it can do that, but

00:43:54.035 --> 00:43:56.675
<v Speaker 1>if you assign it a hard coded container

00:43:56.675 --> 00:43:57.395
<v Speaker 1>value,

00:43:57.555 --> 00:43:59.155
<v Speaker 1>you can never spin up more than one

00:43:59.155 --> 00:44:01.795
<v Speaker 1>replica. It's kinda like having a Kubernetes pod

00:44:02.109 --> 00:44:04.109
<v Speaker 1>that's manually named and then you try to

00:44:04.109 --> 00:44:06.349
<v Speaker 1>spin up an exact named pod. You it

00:44:06.349 --> 00:44:08.030
<v Speaker 1>won't work in that same namespace.

00:44:08.190 --> 00:44:10.510
<v Speaker 1>So that same thing is happening here. One

00:44:10.510 --> 00:44:12.430
<v Speaker 0>of my biggest pet peeves, I think every

00:44:12.430 --> 00:44:15.070
<v Speaker 0>Docker tutorial and Compose store on on the

00:44:15.070 --> 00:44:18.644
<v Speaker 0>Internet has container name hard coded and there's

00:44:18.644 --> 00:44:20.565
<v Speaker 0>never a single good reasoning. And I always

00:44:20.565 --> 00:44:22.085
<v Speaker 0>say this to people at conferences as well.

00:44:22.085 --> 00:44:23.845
<v Speaker 0>There's not one single good reason for naming

00:44:23.845 --> 00:44:24.645
<v Speaker 0>a container.

00:44:24.964 --> 00:44:25.685
<v Speaker 0>Using

00:44:25.765 --> 00:44:28.325
<v Speaker 0>container underscore name, just remove it immediately

00:44:28.484 --> 00:44:30.404
<v Speaker 0>and it's it's never good.

00:44:31.560 --> 00:44:32.200
<v Speaker 1>It

00:44:33.160 --> 00:44:34.840
<v Speaker 1>I I don't even have to ask why

00:44:34.840 --> 00:44:36.440
<v Speaker 1>they do it because I I

00:44:36.680 --> 00:44:38.600
<v Speaker 1>have a feeling that they're doing it because

00:44:38.600 --> 00:44:39.240
<v Speaker 1>they

00:44:39.640 --> 00:44:41.000
<v Speaker 1>they don't realize

00:44:41.560 --> 00:44:43.080
<v Speaker 1>typing and talking talking at the same time,

00:44:43.080 --> 00:44:43.320
<v Speaker 1>by the way.

00:44:44.484 --> 00:44:46.805
<v Speaker 1>They they don't realize that whatever the command

00:44:46.805 --> 00:44:49.045
<v Speaker 1>they needed to use for that container name

00:44:49.125 --> 00:44:51.125
<v Speaker 1>probably existed in the Docker Compose command line

00:44:51.125 --> 00:44:52.485
<v Speaker 1>and it's probably easier.

00:44:53.925 --> 00:44:55.685
<v Speaker 0>Yeah. They're almost writing a shell script to

00:44:55.685 --> 00:44:58.325
<v Speaker 0>do something with that container and, yeah, there's

00:44:58.325 --> 00:45:00.400
<v Speaker 0>no need to, like, can work around it.

00:45:01.040 --> 00:45:02.400
<v Speaker 1>Right. Oh, I just realized

00:45:02.560 --> 00:45:04.160
<v Speaker 1>I wanna be using Vim today to make

00:45:04.160 --> 00:45:06.000
<v Speaker 1>it easier for screen sharing and

00:45:07.520 --> 00:45:09.360
<v Speaker 1>my Vim is in bright mode.

00:45:11.280 --> 00:45:11.600
<v Speaker 1>So,

00:45:12.744 --> 00:45:14.744
<v Speaker 1>we're in I do like the mode though

00:45:14.744 --> 00:45:16.744
<v Speaker 0>with the the flames on it. I'm not

00:45:16.744 --> 00:45:18.025
<v Speaker 0>sure how you've got that, but that is

00:45:18.025 --> 00:45:20.185
<v Speaker 0>it. Oh, this is this is

00:45:20.585 --> 00:45:22.665
<v Speaker 1>not my skill set. This is

00:45:23.705 --> 00:45:24.345
<v Speaker 1>SpaceVim.

00:45:24.819 --> 00:45:26.580
<v Speaker 1>So look up SpaceVim,

00:45:26.660 --> 00:45:28.740
<v Speaker 1>which is kinda like a Vim

00:45:29.539 --> 00:45:32.180
<v Speaker 1>installer packager manager. It's it's a and it

00:45:32.180 --> 00:45:33.700
<v Speaker 1>does all this stuff for you.

00:45:34.020 --> 00:45:34.660
<v Speaker 1>So,

00:45:35.380 --> 00:45:37.220
<v Speaker 1>like, if I just do this, it will

00:45:37.220 --> 00:45:37.859
<v Speaker 1>actually update

00:45:38.265 --> 00:45:39.305
<v Speaker 1>a 34

00:45:39.305 --> 00:45:40.905
<v Speaker 1>plugins that it manages,

00:45:41.224 --> 00:45:41.865
<v Speaker 1>including,

00:45:42.585 --> 00:45:44.185
<v Speaker 1>yeah, including my font,

00:45:44.664 --> 00:45:46.265
<v Speaker 1>all of the the stuff at the bottom.

00:45:47.545 --> 00:45:49.224
<v Speaker 0>Very cool. I like that. Probably shouldn't have

00:45:49.224 --> 00:45:50.744
<v Speaker 1>done that. I guess it's a variation of

00:45:50.744 --> 00:45:53.220
<v Speaker 0>the Space Max, which is the Emacs within

00:45:53.220 --> 00:45:55.220
<v Speaker 0>bindings, and now there's a SpaceVim, so

00:45:55.780 --> 00:45:58.180
<v Speaker 1>Yes. It's mostly it's it's got a large

00:45:58.180 --> 00:46:00.820
<v Speaker 1>community. It's mostly managed by one person, but

00:46:01.060 --> 00:46:02.260
<v Speaker 1>it's regularly

00:46:02.260 --> 00:46:04.420
<v Speaker 1>updated. I've been using it for years. I

00:46:04.420 --> 00:46:06.740
<v Speaker 1>used to use SPF 13, I think,

00:46:09.445 --> 00:46:11.525
<v Speaker 1>and it that kind of died a little

00:46:11.525 --> 00:46:13.765
<v Speaker 1>bit on the vine. Wasn't wasn't getting maintained.

00:46:13.765 --> 00:46:15.045
<v Speaker 0>I think so. I've using SPF I was

00:46:15.045 --> 00:46:17.765
<v Speaker 0>brave doing a live update. Yeah. Update your

00:46:17.765 --> 00:46:19.525
<v Speaker 0>plugins live. What could go wrong, Brett? Come

00:46:19.525 --> 00:46:21.445
<v Speaker 0>on. Yeah. I do it all the time.

00:46:21.445 --> 00:46:21.845
<v Speaker 1>No big deal.

00:46:22.520 --> 00:46:24.920
<v Speaker 0>It NeoVim or just Vem8? Do you know?

00:46:25.560 --> 00:46:27.640
<v Speaker 1>Is it what? Is it using NeoVim or

00:46:27.640 --> 00:46:28.840
<v Speaker 0>is it using Vem8?

00:46:29.079 --> 00:46:30.280
<v Speaker 1>It uses both.

00:46:30.839 --> 00:46:33.800
<v Speaker 1>And so sorry. For me, my my

00:46:35.545 --> 00:46:37.705
<v Speaker 1>a Vim command is just aliased to in

00:46:37.705 --> 00:46:38.265
<v Speaker 1>Vim.

00:46:39.065 --> 00:46:40.665
<v Speaker 1>So you can use either one, and it

00:46:40.665 --> 00:46:42.265
<v Speaker 1>will plug into both. It installs into both

00:46:42.265 --> 00:46:43.065
<v Speaker 1>by default.

00:46:43.225 --> 00:46:44.905
<v Speaker 1>It it use it uses your Vim RC

00:46:44.905 --> 00:46:45.865
<v Speaker 1>and all that stuff.

00:46:46.345 --> 00:46:48.940
<v Speaker 1>I also enable italics for local use because

00:46:48.940 --> 00:46:50.460
<v Speaker 1>I love italicized

00:46:50.460 --> 00:46:52.380
<v Speaker 1>comments and stuff. Well, there goes my productivity

00:46:52.380 --> 00:46:53.580
<v Speaker 0>for the rest of the week as I

00:46:53.580 --> 00:46:56.620
<v Speaker 0>explore switching IDE again. So thanks. I

00:46:57.100 --> 00:46:58.780
<v Speaker 1>had yeah. Right? Like, I I

00:46:59.260 --> 00:47:00.780
<v Speaker 1>you're not the first person to tell me

00:47:00.780 --> 00:47:02.780
<v Speaker 1>that, and I'm going to give you all

00:47:02.780 --> 00:47:04.665
<v Speaker 1>a URL for later so that we don't

00:47:04.665 --> 00:47:06.585
<v Speaker 1>spend the episode on this because it's a

00:47:06.585 --> 00:47:07.785
<v Speaker 1>it is a rabbit hole and I love

00:47:07.785 --> 00:47:09.625
<v Speaker 1>talking about it. Yeah. Let's just forget Compose.

00:47:09.625 --> 00:47:11.065
<v Speaker 0>Let's just play with your Vim sale for

00:47:11.065 --> 00:47:12.265
<v Speaker 0>the next thirty minutes. So

00:47:12.745 --> 00:47:15.305
<v Speaker 1>I'm gonna put in the chat brettfisher.com/shell.

00:47:15.470 --> 00:47:17.150
<v Speaker 1>So all of the things that I use

00:47:17.150 --> 00:47:19.710
<v Speaker 1>in my shell there, including italicized,

00:47:19.710 --> 00:47:21.950
<v Speaker 1>true font true true color fonts,

00:47:22.430 --> 00:47:23.869
<v Speaker 1>all that stuff is in there.

00:47:25.630 --> 00:47:27.390
<v Speaker 1>I'm actually going to

00:47:27.950 --> 00:47:28.910
<v Speaker 1>not use

00:47:29.605 --> 00:47:32.405
<v Speaker 1>the shell because I realized I love using

00:47:32.485 --> 00:47:34.965
<v Speaker 1>Versus Code, and I'm just going to do

00:47:34.965 --> 00:47:36.405
<v Speaker 1>that for today. So

00:47:38.645 --> 00:47:40.325
<v Speaker 1>where we make we made temp

00:47:41.720 --> 00:47:42.680
<v Speaker 1>Rawkode.

00:47:43.160 --> 00:47:44.519
<v Speaker 1>So I'm just gonna share that. That way,

00:47:44.519 --> 00:47:45.480
<v Speaker 1>I don't have to switch back and forth

00:47:45.480 --> 00:47:46.440
<v Speaker 1>between Windows.

00:47:46.839 --> 00:47:48.760
<v Speaker 1>This this thing doesn't I could share my

00:47:48.760 --> 00:47:50.279
<v Speaker 1>whole screen, but I'm on a four k.

00:47:50.279 --> 00:47:50.920
<v Speaker 1>So

00:47:52.279 --> 00:47:54.039
<v Speaker 1>it not that I couldn't share the whole

00:47:54.039 --> 00:47:54.680
<v Speaker 1>screen, but

00:47:55.615 --> 00:47:57.375
<v Speaker 1>it would be very small for everyone. So

00:47:57.375 --> 00:47:58.335
<v Speaker 1>let's just do

00:47:58.815 --> 00:48:01.455
<v Speaker 1>my new favorite editor, Versus Code.

00:48:04.255 --> 00:48:05.775
<v Speaker 1>Alright. So we're just gonna create a Compose

00:48:05.775 --> 00:48:07.055
<v Speaker 1>file, and then we're gonna run some things.

00:48:08.900 --> 00:48:10.180
<v Speaker 1>Do we have any questions in the audience

00:48:10.180 --> 00:48:11.860
<v Speaker 1>that we haven't addressed yet?

00:48:12.500 --> 00:48:15.380
<v Speaker 0>No. Just a confirmation that SpaceFim is

00:48:15.620 --> 00:48:17.300
<v Speaker 0>Spacemax inspired

00:48:17.540 --> 00:48:20.340
<v Speaker 0>and some love for the rendered corner power

00:48:20.340 --> 00:48:22.500
<v Speaker 0>lane prompt, which I think, yeah, was looking

00:48:22.500 --> 00:48:22.980
<v Speaker 0>pretty good.

00:48:24.525 --> 00:48:26.605
<v Speaker 1>We could I could also demo off

00:48:26.925 --> 00:48:28.605
<v Speaker 1>what's what's gonna happen during this demo is

00:48:28.605 --> 00:48:31.565
<v Speaker 1>I'm I'm demo demoing Copilot, GitHub Copilot because

00:48:31.565 --> 00:48:33.885
<v Speaker 1>it I am hooked on Copilot. I like,

00:48:33.885 --> 00:48:35.645
<v Speaker 0>now I don't turn off anymore. It's just

00:48:35.645 --> 00:48:37.085
<v Speaker 0>so it bleeds my mind.

00:48:37.740 --> 00:48:39.260
<v Speaker 0>Yeah. It's unbelievable.

00:48:39.500 --> 00:48:41.740
<v Speaker 1>It's a little weird. It's a sometimes

00:48:42.860 --> 00:48:45.020
<v Speaker 1>I had a friend on the show, and

00:48:45.740 --> 00:48:47.180
<v Speaker 1>we we kinda tried to beat it up

00:48:47.180 --> 00:48:48.380
<v Speaker 1>for DevOps purposes,

00:48:48.460 --> 00:48:49.340
<v Speaker 1>and it

00:48:50.220 --> 00:48:51.260
<v Speaker 1>so we just spent an hour.

00:48:51.924 --> 00:48:54.164
<v Speaker 1>I recorded, like, a week's worth of using

00:48:54.164 --> 00:48:55.684
<v Speaker 1>it and recorded a bunch of little weird

00:48:55.684 --> 00:48:58.484
<v Speaker 1>oddities, like, using it for markdown editing. It's

00:48:58.484 --> 00:49:00.724
<v Speaker 1>soup. It just starts writing

00:49:00.724 --> 00:49:03.365
<v Speaker 1>words for you based on your previous words,

00:49:03.365 --> 00:49:05.125
<v Speaker 1>and you can fill out a whole markdown

00:49:05.125 --> 00:49:07.320
<v Speaker 1>file in gibberish. That doesn't really make any

00:49:07.320 --> 00:49:09.320
<v Speaker 1>sense. It'll actually auto create links for you

00:49:09.320 --> 00:49:11.480
<v Speaker 1>that don't work to things that don't exist.

00:49:11.480 --> 00:49:13.400
<v Speaker 1>I I don't yeah. It's it's a little

00:49:13.400 --> 00:49:14.760
<v Speaker 1>wild wild west right now, but

00:49:15.480 --> 00:49:17.560
<v Speaker 0>Can you drag your Versus code window a

00:49:17.560 --> 00:49:18.360
<v Speaker 0>bit wider?

00:49:18.680 --> 00:49:21.080
<v Speaker 0>You're breaking my layout brick. Come on. Oh,

00:49:21.080 --> 00:49:21.240
<v Speaker 1>man.

00:49:22.005 --> 00:49:23.605
<v Speaker 1>It's always hard to figure out that the

00:49:23.605 --> 00:49:26.325
<v Speaker 1>right layout. There we go. There we go.

00:49:26.805 --> 00:49:27.924
<v Speaker 1>A little bit a little bit more? A

00:49:27.924 --> 00:49:28.645
<v Speaker 1>little bit more?

00:49:29.204 --> 00:49:30.404
<v Speaker 0>Yeah. You can go more. Yeah. There we

00:49:30.404 --> 00:49:32.005
<v Speaker 0>go. Oh, you're Yeah.

00:49:33.765 --> 00:49:35.444
<v Speaker 1>See how yeah. It's already it's already telling

00:49:35.444 --> 00:49:36.005
<v Speaker 1>me the wrong thing.

00:49:37.280 --> 00:49:38.320
<v Speaker 1>It doesn't know

00:49:39.359 --> 00:49:40.480
<v Speaker 1>Compose files.

00:49:41.600 --> 00:49:43.520
<v Speaker 0>Alright. So we got a comment from Paul

00:49:43.520 --> 00:49:45.440
<v Speaker 0>saying that Brett is posting links, but they

00:49:45.440 --> 00:49:47.359
<v Speaker 0>aren't appearing. Yeah. I'll just go check that

00:49:47.359 --> 00:49:48.960
<v Speaker 0>now. They might be held for review because

00:49:48.960 --> 00:49:50.240
<v Speaker 0>there are links and I

00:49:50.960 --> 00:49:51.680
<v Speaker 0>can fix that.

00:49:52.415 --> 00:49:54.335
<v Speaker 0>Yeah. Let me go check that. If you

00:49:54.335 --> 00:49:56.734
<v Speaker 1>make me, like, a commenter or whatever Yeah.

00:49:56.815 --> 00:49:58.895
<v Speaker 1>I think it auto works. If you have

00:49:58.895 --> 00:50:01.215
<v Speaker 1>all the chat stuff, the security stuff enabled

00:50:01.215 --> 00:50:01.695
<v Speaker 1>like I do.

00:50:04.440 --> 00:50:05.480
<v Speaker 1>I'm not gonna do that. I'm gonna do

00:50:05.480 --> 00:50:06.280
<v Speaker 1>NGINX.

00:50:10.200 --> 00:50:12.040
<v Speaker 1>So we're all familiar to this with this

00:50:12.040 --> 00:50:12.920
<v Speaker 1>standard

00:50:12.920 --> 00:50:14.359
<v Speaker 1>format and, like

00:50:20.455 --> 00:50:21.495
<v Speaker 1>stuff like that.

00:50:21.975 --> 00:50:22.775
<v Speaker 1>And then

00:50:25.175 --> 00:50:25.975
<v Speaker 1>my terminal.

00:50:29.490 --> 00:50:31.570
<v Speaker 1>So there is a Docker tool that you

00:50:31.570 --> 00:50:33.890
<v Speaker 1>can get for Versus Code. I don't even

00:50:33.890 --> 00:50:36.210
<v Speaker 1>have it showing up here, but you can

00:50:36.210 --> 00:50:38.130
<v Speaker 1>get a Docker plugin, which I highly recommend.

00:50:38.290 --> 00:50:39.970
<v Speaker 1>And it will it can do you can

00:50:39.970 --> 00:50:41.010
<v Speaker 1>see things in here

00:50:41.415 --> 00:50:43.095
<v Speaker 1>and do things like and you can actually

00:50:43.095 --> 00:50:45.895
<v Speaker 1>run Compose commands from the command palette.

00:50:46.855 --> 00:50:48.695
<v Speaker 1>But I'm just gonna use command line because

00:50:48.695 --> 00:50:49.895
<v Speaker 1>I think a lot of people that's what

00:50:49.895 --> 00:50:53.015
<v Speaker 1>they're used to experiencing, and they do that.

00:50:53.015 --> 00:50:53.655
<v Speaker 1>So

00:50:54.375 --> 00:50:56.295
<v Speaker 1>if I'm in this directory, then

00:50:56.935 --> 00:50:58.750
<v Speaker 1>do a Docker Compose PS.

00:51:07.309 --> 00:51:09.069
<v Speaker 1>But right away, you'll notice that it this

00:51:09.069 --> 00:51:10.670
<v Speaker 1>new one uses the new builder,

00:51:11.724 --> 00:51:13.484
<v Speaker 1>which the new builder can do things much

00:51:13.484 --> 00:51:14.445
<v Speaker 1>more concurrently,

00:51:14.765 --> 00:51:16.285
<v Speaker 1>and it's actually really smart. There's a ton

00:51:16.285 --> 00:51:17.405
<v Speaker 1>of advantages to it, but one of the

00:51:17.405 --> 00:51:18.925
<v Speaker 1>things it'll do is if you're using multistage

00:51:18.925 --> 00:51:21.645
<v Speaker 1>images, it won't build stages that you don't

00:51:21.645 --> 00:51:24.204
<v Speaker 1>need for your current target in case you're

00:51:24.204 --> 00:51:26.540
<v Speaker 1>someone who's in the multistage building. So that's

00:51:26.540 --> 00:51:28.140
<v Speaker 1>a nice thing is the new Docker Compose

00:51:28.140 --> 00:51:30.060
<v Speaker 1>will just use the new build kit by

00:51:30.060 --> 00:51:30.700
<v Speaker 1>default.

00:51:31.020 --> 00:51:33.420
<v Speaker 1>And so I did that. Docker

00:51:34.460 --> 00:51:36.300
<v Speaker 1>Compose PS now.

00:51:36.859 --> 00:51:38.700
<v Speaker 1>And you'll see that I'm gonna

00:51:39.295 --> 00:51:40.495
<v Speaker 1>hide the files.

00:51:41.295 --> 00:51:43.775
<v Speaker 1>We'll see that we've got two services running.

00:51:43.775 --> 00:51:45.535
<v Speaker 1>Right? So this is kind of just sort

00:51:45.535 --> 00:51:46.095
<v Speaker 1>of proof that

00:51:46.975 --> 00:51:49.135
<v Speaker 1>by the way, it's it's proof that it

00:51:49.135 --> 00:51:50.575
<v Speaker 1>works like the old one works. And I

00:51:50.575 --> 00:51:52.655
<v Speaker 1>can also just type in Docker Compose with

00:51:52.655 --> 00:51:54.849
<v Speaker 1>a dash and get the same you can

00:51:54.849 --> 00:51:57.170
<v Speaker 1>kinda compare the old and new formats. So

00:51:57.170 --> 00:51:58.210
<v Speaker 1>one of the things they've done with the

00:51:58.210 --> 00:51:59.650
<v Speaker 1>new command is they've sort of refreshed the

00:51:59.650 --> 00:52:00.690
<v Speaker 1>format. It now

00:52:01.570 --> 00:52:02.050
<v Speaker 1>it it

00:52:02.930 --> 00:52:04.770
<v Speaker 1>they they're fixing some of the old quirks

00:52:04.770 --> 00:52:06.369
<v Speaker 1>since they kinda had to rewrite everything.

00:52:08.085 --> 00:52:09.685
<v Speaker 1>So we'll see that. And then I can

00:52:09.685 --> 00:52:11.525
<v Speaker 1>do things like Docker. Most people don't realize

00:52:11.525 --> 00:52:13.685
<v Speaker 1>you can do Docker Compose top,

00:52:15.205 --> 00:52:16.885
<v Speaker 1>the next, and that will show me the

00:52:16.885 --> 00:52:19.685
<v Speaker 1>processes running inside of that particular service.

00:52:20.910 --> 00:52:22.510
<v Speaker 1>So I can do that without even having

00:52:22.510 --> 00:52:23.550
<v Speaker 1>to go inside it.

00:52:24.750 --> 00:52:27.070
<v Speaker 1>I can pause things, stop things.

00:52:27.230 --> 00:52:29.069
<v Speaker 1>So, like, the workflow that most people, if

00:52:29.069 --> 00:52:30.430
<v Speaker 1>they're not familiar with it, you do Docker

00:52:30.430 --> 00:52:32.510
<v Speaker 1>Compose up to start everything up. You do

00:52:32.510 --> 00:52:33.710
<v Speaker 1>the Docker Compose down at the end of

00:52:33.710 --> 00:52:36.035
<v Speaker 1>your day to stop it all except for

00:52:36.035 --> 00:52:37.474
<v Speaker 1>deleting volumes.

00:52:37.634 --> 00:52:39.234
<v Speaker 1>And then you can do things like Docker

00:52:39.234 --> 00:52:41.555
<v Speaker 1>Compose pause while you go to lunch, and

00:52:41.555 --> 00:52:43.394
<v Speaker 1>it'll let your CPUs calm down because it'll

00:52:43.394 --> 00:52:45.714
<v Speaker 1>just sort of freeze the CPU but won't

00:52:45.714 --> 00:52:48.275
<v Speaker 1>stop the containers. You can also do stop,

00:52:48.275 --> 00:52:50.275
<v Speaker 1>start, restart. So those are all the common

00:52:50.275 --> 00:52:50.595
<v Speaker 1>commands.

00:52:53.369 --> 00:52:57.130
<v Speaker 1>But I think the value of a particular

00:52:57.130 --> 00:52:58.890
<v Speaker 1>demo that we wanna talk about, because we

00:52:58.890 --> 00:53:00.810
<v Speaker 1>talked about that depends on and

00:53:00.810 --> 00:53:01.850
<v Speaker 1>how that works,

00:53:02.090 --> 00:53:02.250
<v Speaker 1>is

00:53:04.934 --> 00:53:07.095
<v Speaker 1>to talk about two things, really, two major

00:53:07.095 --> 00:53:09.174
<v Speaker 1>things that most people don't know about that

00:53:09.174 --> 00:53:11.174
<v Speaker 1>would probably help their workflow in Compose, and

00:53:11.174 --> 00:53:13.175
<v Speaker 1>that's one talking about your depends on example,

00:53:13.335 --> 00:53:14.694
<v Speaker 1>and the other one is talking about

00:53:16.070 --> 00:53:16.870
<v Speaker 1>profiles.

00:53:16.870 --> 00:53:17.830
<v Speaker 1>And profiles,

00:53:17.830 --> 00:53:19.190
<v Speaker 1>for those of us that are getting real

00:53:19.190 --> 00:53:21.590
<v Speaker 1>world Compose files that are getting very large,

00:53:21.590 --> 00:53:23.270
<v Speaker 1>maybe we have dozens of services in there

00:53:23.270 --> 00:53:25.830
<v Speaker 1>or just a dozen or even just five,

00:53:26.070 --> 00:53:27.510
<v Speaker 1>you may not wanna spin those all up

00:53:27.510 --> 00:53:29.110
<v Speaker 1>at all at the same time. So profiles

00:53:29.110 --> 00:53:32.005
<v Speaker 1>is a new feature in the Compose spec

00:53:32.165 --> 00:53:35.045
<v Speaker 1>that the new Docker Compose tool now implements

00:53:35.045 --> 00:53:37.365
<v Speaker 1>that allows you to add a service line,

00:53:37.925 --> 00:53:40.805
<v Speaker 1>and you can basically tag your services and

00:53:40.805 --> 00:53:42.725
<v Speaker 1>then bring them up and down in groups

00:53:43.130 --> 00:53:44.490
<v Speaker 1>based on this tag,

00:53:45.050 --> 00:53:46.970
<v Speaker 1>which allows you to do things like

00:53:47.130 --> 00:53:49.210
<v Speaker 1>maybe you have a startup script that seeds

00:53:49.210 --> 00:53:51.290
<v Speaker 1>your database and does a bunch of things,

00:53:51.290 --> 00:53:53.450
<v Speaker 1>and you only wanna run that once. Well,

00:53:53.450 --> 00:53:55.530
<v Speaker 1>you can now do that by specifying a

00:53:55.530 --> 00:53:56.490
<v Speaker 1>separate service,

00:53:56.890 --> 00:53:57.370
<v Speaker 1>and

00:53:57.770 --> 00:53:59.835
<v Speaker 1>you can run it as a one off,

00:53:59.835 --> 00:54:01.835
<v Speaker 1>but it'll use all the Compose stuff. So

00:54:01.835 --> 00:54:04.235
<v Speaker 1>it won't always run it unless you specifically

00:54:04.315 --> 00:54:05.515
<v Speaker 1>run that profile.

00:54:05.915 --> 00:54:08.075
<v Speaker 1>Other things you can do is maybe if

00:54:08.075 --> 00:54:09.995
<v Speaker 1>you're a developer on a larger team,

00:54:10.715 --> 00:54:13.080
<v Speaker 1>maybe you're the front end developer, but the

00:54:13.080 --> 00:54:14.680
<v Speaker 1>file the Compose file's written for everyone. So

00:54:14.680 --> 00:54:16.280
<v Speaker 1>it has the API back end, it has

00:54:16.280 --> 00:54:18.280
<v Speaker 1>the database, it has the worker jobs, but

00:54:18.280 --> 00:54:19.720
<v Speaker 1>you're really just the front end person and

00:54:19.720 --> 00:54:21.000
<v Speaker 1>maybe you're using React.

00:54:21.080 --> 00:54:22.840
<v Speaker 1>And you really only need the you know,

00:54:22.840 --> 00:54:24.200
<v Speaker 1>you don't need the worker or all this

00:54:24.200 --> 00:54:25.560
<v Speaker 1>other stuff in the background. You really just

00:54:25.560 --> 00:54:27.714
<v Speaker 1>need the API and the database. So you

00:54:27.714 --> 00:54:29.714
<v Speaker 1>can now use profiles so that you can

00:54:29.714 --> 00:54:30.195
<v Speaker 1>now

00:54:30.835 --> 00:54:33.075
<v Speaker 1>You don't have to sit there and manipulate

00:54:33.075 --> 00:54:35.474
<v Speaker 1>each individual service, like just doing the Docker

00:54:35.474 --> 00:54:37.155
<v Speaker 1>Compose up of a specific service. You can

00:54:37.155 --> 00:54:39.954
<v Speaker 1>now specify a group of services by tagging

00:54:39.954 --> 00:54:41.910
<v Speaker 1>them. That's awesome. I've

00:54:41.910 --> 00:54:43.430
<v Speaker 0>lost track of how many make files I've

00:54:43.430 --> 00:54:44.869
<v Speaker 0>had to write. This spins up just the

00:54:44.869 --> 00:54:46.950
<v Speaker 0>right amount of services for what I was

00:54:46.950 --> 00:54:49.110
<v Speaker 0>doing or even to spin up a

00:54:49.510 --> 00:54:51.830
<v Speaker 0>service which normally has replica zero, but you're

00:54:51.830 --> 00:54:53.030
<v Speaker 0>just trying to run a single command, like

00:54:53.030 --> 00:54:55.955
<v Speaker 0>the database migrations and stuff. Yeah. Yeah. That's

00:54:55.955 --> 00:54:57.075
<v Speaker 0>nice. I like the details. And

00:54:58.115 --> 00:54:59.235
<v Speaker 1>that's the thing, right?

00:54:59.955 --> 00:55:01.555
<v Speaker 1>And Docker's still trying to iterate on this

00:55:01.555 --> 00:55:03.155
<v Speaker 1>stuff, so they've got some ideas around how

00:55:03.155 --> 00:55:05.395
<v Speaker 1>to even make take this further for one

00:55:05.395 --> 00:55:07.075
<v Speaker 1>off tasks. I think, really,

00:55:07.315 --> 00:55:09.235
<v Speaker 1>one of the things that interrupts developer workflow

00:55:09.680 --> 00:55:11.280
<v Speaker 1>is that we're all getting to the point

00:55:11.280 --> 00:55:13.280
<v Speaker 1>where we're all starting to have common tooling,

00:55:13.600 --> 00:55:15.600
<v Speaker 1>right? So we're all starting to learn Docker.

00:55:15.600 --> 00:55:17.600
<v Speaker 1>We all know some basics of Docker Compose.

00:55:17.600 --> 00:55:19.840
<v Speaker 1>Maybe some of us are saying that

00:55:20.240 --> 00:55:24.075
<v Speaker 1>basic kubectl commands are there, but then every

00:55:24.075 --> 00:55:25.915
<v Speaker 1>team seems to have these shell scripts and

00:55:25.915 --> 00:55:27.915
<v Speaker 1>make files and other

00:55:28.555 --> 00:55:29.355
<v Speaker 1>utilities

00:55:29.355 --> 00:55:31.115
<v Speaker 1>that are part of their workflow for local

00:55:31.115 --> 00:55:31.675
<v Speaker 1>use,

00:55:32.075 --> 00:55:32.555
<v Speaker 1>and

00:55:33.035 --> 00:55:34.875
<v Speaker 1>I'm gonna say I'm just gonna say watch

00:55:34.875 --> 00:55:36.475
<v Speaker 1>this space because I think Docker is trying

00:55:36.475 --> 00:55:37.915
<v Speaker 1>to figure this out a little bit better

00:55:38.180 --> 00:55:41.300
<v Speaker 1>using this new Compose syntax, maybe adding some

00:55:41.300 --> 00:55:42.500
<v Speaker 1>more features in the future.

00:55:44.820 --> 00:55:46.740
<v Speaker 1>But I have another repo

00:55:46.740 --> 00:55:48.580
<v Speaker 1>that I'm gonna I'm gonna steal some examples

00:55:48.580 --> 00:55:50.340
<v Speaker 1>so that we don't have to manually watch

00:55:50.340 --> 00:55:51.220
<v Speaker 1>me type all this,

00:55:52.865 --> 00:55:54.705
<v Speaker 1>which, you know, I'm sure that's super exciting

00:55:54.705 --> 00:55:55.505
<v Speaker 1>for everyone.

00:55:58.224 --> 00:56:00.145
<v Speaker 1>So I'm going to throw in

00:56:03.905 --> 00:56:05.505
<v Speaker 1>something like this.

00:56:09.160 --> 00:56:11.400
<v Speaker 1>Let's pretend that these servers, which they don't

00:56:11.400 --> 00:56:14.200
<v Speaker 1>really, but let's pretend that these servers depend

00:56:14.200 --> 00:56:15.240
<v Speaker 1>on a database

00:56:16.040 --> 00:56:18.920
<v Speaker 1>because, obviously, these are just standard NGINX servers.

00:56:18.920 --> 00:56:21.960
<v Speaker 0>Yep. But the Postgres server, if I throw

00:56:21.960 --> 00:56:23.160
<v Speaker 1>it in and I just launch it,

00:56:24.105 --> 00:56:25.465
<v Speaker 1>it actually now that think about it, this

00:56:25.465 --> 00:56:26.985
<v Speaker 1>won't actually work because it needs a password

00:56:26.985 --> 00:56:29.385
<v Speaker 1>nowadays, so my example's already out of date.

00:56:30.345 --> 00:56:32.265
<v Speaker 1>But one of the things that you wanna

00:56:32.265 --> 00:56:34.105
<v Speaker 1>do in these files now, and what we're

00:56:34.105 --> 00:56:34.265
<v Speaker 1>gonna

00:56:34.905 --> 00:56:35.625
<v Speaker 1>I'm gonna

00:56:35.945 --> 00:56:37.865
<v Speaker 1>not bury the lead, and we're just gonna

00:56:37.865 --> 00:56:38.825
<v Speaker 1>add the depends on.

00:56:40.420 --> 00:56:41.700
<v Speaker 0>Can also change that variable

00:56:42.020 --> 00:56:43.700
<v Speaker 0>for the the password if you wish as

00:56:43.700 --> 00:56:45.940
<v Speaker 0>well. I think it's just postgres underscore password

00:56:45.940 --> 00:56:48.820
<v Speaker 0>or postgres underscore password

00:56:49.140 --> 00:56:50.500
<v Speaker 0>to get it to start healthily.

00:56:51.865 --> 00:56:53.065
<v Speaker 0>Look at that. With that.

00:56:54.665 --> 00:56:55.465
<v Speaker 1>Yeah.

00:56:56.745 --> 00:56:58.265
<v Speaker 1>That's that's

00:56:58.345 --> 00:57:00.025
<v Speaker 1>GitHub Copilot

00:57:00.105 --> 00:57:02.105
<v Speaker 1>in action right there. Alright. So let's assume

00:57:02.105 --> 00:57:02.665
<v Speaker 1>that actually works.

00:57:04.010 --> 00:57:06.010
<v Speaker 1>So up here, so there's two parts to

00:57:06.010 --> 00:57:07.450
<v Speaker 1>this puzzle, and what we're trying to solve

00:57:07.450 --> 00:57:10.089
<v Speaker 1>is what you mentioned earlier, is I want

00:57:10.329 --> 00:57:11.930
<v Speaker 1>I don't want my front end app to

00:57:11.930 --> 00:57:13.690
<v Speaker 1>constantly bounce every time I do a Docker

00:57:13.690 --> 00:57:15.530
<v Speaker 1>Compose up because it's waiting on the database

00:57:15.530 --> 00:57:15.849
<v Speaker 1>to start.

00:57:16.565 --> 00:57:18.645
<v Speaker 1>Well, in Compose v two, like you were

00:57:18.645 --> 00:57:21.365
<v Speaker 1>saying sorry. Not Compose v two. That's that

00:57:21.685 --> 00:57:23.605
<v Speaker 1>not Compose command line v two, but in

00:57:23.605 --> 00:57:24.965
<v Speaker 1>the Compose file

00:57:25.045 --> 00:57:26.805
<v Speaker 1>version. Back in the day, we would type

00:57:26.805 --> 00:57:27.605
<v Speaker 1>version

00:57:28.325 --> 00:57:31.420
<v Speaker 1>two dot four. Right? And that would only

00:57:31.420 --> 00:57:33.660
<v Speaker 1>work with the local Docker command line tool,

00:57:33.980 --> 00:57:36.220
<v Speaker 1>would not work with Swarm, which is fine,

00:57:36.300 --> 00:57:38.700
<v Speaker 1>but it would allow us to use this

00:57:38.700 --> 00:57:39.820
<v Speaker 1>depends on,

00:57:40.380 --> 00:57:42.540
<v Speaker 1>but most people didn't know about this.

00:57:43.505 --> 00:57:45.825
<v Speaker 1>They didn't realize that they

00:57:46.065 --> 00:57:48.065
<v Speaker 1>could extend the depends on to not just

00:57:48.065 --> 00:57:50.625
<v Speaker 1>say depends on DB, because most people would

00:57:50.625 --> 00:57:52.865
<v Speaker 1>do this. They would not have this line,

00:57:53.185 --> 00:57:53.585
<v Speaker 1>right?

00:57:58.610 --> 00:57:59.970
<v Speaker 1>It would not have that line. They would

00:57:59.970 --> 00:58:01.490
<v Speaker 1>just have the depends on DB,

00:58:01.570 --> 00:58:03.330
<v Speaker 1>and then they would realize that it doesn't

00:58:03.330 --> 00:58:05.170
<v Speaker 1>really wait for the database to be ready.

00:58:05.170 --> 00:58:07.250
<v Speaker 1>It just starts the database first so that

00:58:07.250 --> 00:58:09.650
<v Speaker 1>the DNS is available. Yep. And so then

00:58:09.650 --> 00:58:11.010
<v Speaker 1>the app would still crash because it's still

00:58:11.010 --> 00:58:12.450
<v Speaker 1>waiting on the database to start or whatever.

00:58:12.825 --> 00:58:14.105
<v Speaker 1>But in

00:58:14.105 --> 00:58:15.945
<v Speaker 1>like two dot two or something, they added

00:58:15.945 --> 00:58:18.425
<v Speaker 1>this feature years ago that there's two different

00:58:18.425 --> 00:58:19.305
<v Speaker 1>conditions

00:58:19.305 --> 00:58:21.705
<v Speaker 1>here. You can say condition start or condition

00:58:21.705 --> 00:58:23.865
<v Speaker 1>service healthy. And what we want is service

00:58:23.865 --> 00:58:25.945
<v Speaker 1>healthy, which will use the Docker health check,

00:58:26.660 --> 00:58:28.820
<v Speaker 1>and then we add the health check. So

00:58:28.820 --> 00:58:30.260
<v Speaker 1>that's what I've done down here.

00:58:31.620 --> 00:58:33.940
<v Speaker 1>And if you go looking for

00:58:34.100 --> 00:58:37.300
<v Speaker 1>Docker, if you just Google GitHub Docker library

00:58:37.300 --> 00:58:40.195
<v Speaker 1>health check, those four words. Someone will probably

00:58:40.195 --> 00:58:41.955
<v Speaker 1>find it and put it in chat. Docker

00:58:41.955 --> 00:58:43.875
<v Speaker 1>has a library of sample

00:58:44.195 --> 00:58:46.915
<v Speaker 1>health checks for almost all the common open

00:58:46.915 --> 00:58:49.955
<v Speaker 1>source database technologies. So Redis,

00:58:50.355 --> 00:58:51.315
<v Speaker 1>Postgres, MySQL,

00:58:52.070 --> 00:58:53.750
<v Speaker 1>I'm not sure if Elasticsearch is in there,

00:58:53.750 --> 00:58:55.910
<v Speaker 1>but they have other stuff, MemQ, something like

00:58:55.910 --> 00:58:56.310
<v Speaker 1>that.

00:58:56.710 --> 00:58:57.830
<v Speaker 1>And they will

00:59:01.430 --> 00:59:03.190
<v Speaker 1>they will give you this example of how

00:59:03.190 --> 00:59:05.585
<v Speaker 1>to add a health check to a container

00:59:05.585 --> 00:59:07.984
<v Speaker 1>really easy so that you don't have to

00:59:07.984 --> 00:59:09.424
<v Speaker 1>make a custom image or anything like that

00:59:09.424 --> 00:59:10.705
<v Speaker 1>because you don't wanna have to do that.

00:59:10.865 --> 00:59:13.345
<v Speaker 1>And then what happens is now when this

00:59:13.345 --> 00:59:16.065
<v Speaker 1>starts up, and by the way, that's

00:59:18.099 --> 00:59:18.740
<v Speaker 1>it's the

00:59:20.900 --> 00:59:21.700
<v Speaker 1>here.

00:59:21.859 --> 00:59:23.859
<v Speaker 1>So if I do that and I go

00:59:23.859 --> 00:59:24.580
<v Speaker 1>back,

00:59:28.099 --> 00:59:29.300
<v Speaker 1>Docker Compose up.

00:59:32.105 --> 00:59:34.345
<v Speaker 1>Oh, right, I took the version out.

00:59:35.305 --> 00:59:36.984
<v Speaker 1>So we don't want that version anymore because

00:59:36.984 --> 00:59:39.305
<v Speaker 1>now we're on Compose spec. So basically,

00:59:39.704 --> 00:59:40.185
<v Speaker 1>if

00:59:40.505 --> 00:59:42.025
<v Speaker 1>you've been around five years, you know that

00:59:42.025 --> 00:59:44.984
<v Speaker 1>the version one of the spec that we

00:59:44.400 --> 00:59:46.160
<v Speaker 1>all were using way back in the very

00:59:46.160 --> 00:59:47.680
<v Speaker 1>early days of Compose, before we was even

00:59:47.680 --> 00:59:49.680
<v Speaker 1>called Compose, that was there was no version

00:59:49.680 --> 00:59:50.240
<v Speaker 1>for that.

00:59:51.119 --> 00:59:53.200
<v Speaker 1>But now the tooling, if there is no

00:59:53.200 --> 00:59:55.760
<v Speaker 1>version listed here, assumes you're using the latest

00:59:55.760 --> 00:59:59.115
<v Speaker 1>version of Compose spec, not the old, old,

00:59:59.115 --> 01:00:00.955
<v Speaker 1>old v one from, like, 2015.

01:00:00.955 --> 01:00:03.355
<v Speaker 1>So that that like, most people probably wouldn't

01:00:03.355 --> 01:00:04.635
<v Speaker 1>even think about that, but

01:00:04.955 --> 01:00:07.275
<v Speaker 1>it's smart enough to know the difference. So

01:00:07.275 --> 01:00:09.035
<v Speaker 1>if I do a Docker Compose up here,

01:00:09.035 --> 01:00:10.795
<v Speaker 1>it now recognizes that it needs to load

01:00:10.795 --> 01:00:12.475
<v Speaker 1>a database because I have set the depends

01:00:12.475 --> 01:00:12.715
<v Speaker 1>on.

01:00:13.590 --> 01:00:15.270
<v Speaker 1>Well, I've just set up for everything, so

01:00:15.270 --> 01:00:16.950
<v Speaker 1>it's gonna start it all. But

01:00:18.790 --> 01:00:21.670
<v Speaker 1>it's going to hopefully start that postgres correctly,

01:00:21.990 --> 01:00:22.790
<v Speaker 1>and then

01:00:24.790 --> 01:00:26.070
<v Speaker 1>it's going to wait

01:00:27.865 --> 01:00:29.305
<v Speaker 1>until the database

01:00:30.425 --> 01:00:31.225
<v Speaker 0>Ta da.

01:00:32.185 --> 01:00:32.825
<v Speaker 1>Yeah.

01:00:32.985 --> 01:00:35.465
<v Speaker 1>So you notice that little pause there because

01:00:35.465 --> 01:00:37.865
<v Speaker 1>I do this on NGINX one. Didn't give

01:00:37.865 --> 01:00:39.465
<v Speaker 1>NGINX one what it depends on, but I

01:00:39.465 --> 01:00:40.505
<v Speaker 1>did for NGINX two.

01:00:41.390 --> 01:00:42.030
<v Speaker 1>And

01:00:42.430 --> 01:00:44.510
<v Speaker 1>some of these examples, by the way, I'm

01:00:44.510 --> 01:00:46.670
<v Speaker 1>just gonna put another link,

01:00:46.910 --> 01:00:49.230
<v Speaker 1>are from a DockerCon twenty nineteen talk I

01:00:49.230 --> 01:00:49.710
<v Speaker 1>did.

01:00:50.510 --> 01:00:51.950
<v Speaker 1>I'll put this in chat for everyone.

01:00:54.095 --> 01:00:55.535
<v Speaker 1>So some of those examples are in there

01:00:55.535 --> 01:00:57.214
<v Speaker 1>where I show off how to use depends

01:00:57.214 --> 01:00:59.295
<v Speaker 1>on. Ignore the part of that video if

01:00:59.295 --> 01:01:00.974
<v Speaker 1>you watch it about it needing version two

01:01:00.974 --> 01:01:02.575
<v Speaker 1>because obviously in 2019,

01:01:02.575 --> 01:01:04.974
<v Speaker 1>we still needed the version two file format,

01:01:04.974 --> 01:01:05.694
<v Speaker 1>but now we don't.

01:01:06.510 --> 01:01:08.590
<v Speaker 1>So yeah. So ta da, that's the demo

01:01:08.590 --> 01:01:10.350
<v Speaker 1>of that one. Now I would do that

01:01:10.350 --> 01:01:11.870
<v Speaker 1>on everything in a Compose file. If I'm

01:01:11.870 --> 01:01:13.630
<v Speaker 1>on a real team making a real app,

01:01:13.710 --> 01:01:16.350
<v Speaker 1>I would have depends on everywhere because

01:01:17.070 --> 01:01:19.070
<v Speaker 1>what I would do is my so my

01:01:19.070 --> 01:01:19.950
<v Speaker 1>front end developer,

01:01:20.555 --> 01:01:22.155
<v Speaker 1>I would tell them, hey. When you do

01:01:22.155 --> 01:01:23.355
<v Speaker 1>Docker Compose up,

01:01:25.035 --> 01:01:27.115
<v Speaker 1>you're probably gonna wanna use Docker Compose up

01:01:27.115 --> 01:01:29.595
<v Speaker 1>of just your front end app.

01:01:29.915 --> 01:01:31.355
<v Speaker 1>And so now

01:01:31.515 --> 01:01:33.595
<v Speaker 1>it's gonna be smart enough to find all

01:01:33.595 --> 01:01:36.580
<v Speaker 1>the other services that it's

01:01:36.580 --> 01:01:38.500
<v Speaker 1>depending on, and it will start them first,

01:01:38.500 --> 01:01:40.500
<v Speaker 1>wait for them to start, and then you

01:01:40.500 --> 01:01:42.500
<v Speaker 1>can actually have multi chain sort of startup

01:01:42.500 --> 01:01:44.980
<v Speaker 1>order where you the database then starts, then

01:01:44.980 --> 01:01:46.980
<v Speaker 1>the API starts, then the front end starts.

01:01:46.980 --> 01:01:49.075
<v Speaker 1>And so you and with me, I actually

01:01:49.075 --> 01:01:50.195
<v Speaker 1>have another demo

01:01:50.675 --> 01:01:51.795
<v Speaker 1>that uses

01:01:52.675 --> 01:01:55.315
<v Speaker 1>I use most apps nowadays all require SSL.

01:01:55.315 --> 01:01:56.675
<v Speaker 1>And when you're dealing with cores and other

01:01:56.675 --> 01:01:58.515
<v Speaker 1>front end issues, you usually wanna develop with

01:01:58.515 --> 01:02:00.835
<v Speaker 1>SSL as well. So I have another repo,

01:02:00.835 --> 01:02:01.955
<v Speaker 1>if you just go to my GitHub,

01:02:02.700 --> 01:02:05.500
<v Speaker 1>that's called Compose TLS Dev

01:02:06.060 --> 01:02:07.820
<v Speaker 1>Proxy or something like that. And it basically

01:02:07.820 --> 01:02:11.100
<v Speaker 1>auto creates a self signed certificate or even

01:02:11.500 --> 01:02:13.100
<v Speaker 1>less encrypt signed certificate,

01:02:13.260 --> 01:02:14.380
<v Speaker 1>uses traffic,

01:02:14.925 --> 01:02:16.605
<v Speaker 1>and puts it all in your Docker Compose

01:02:16.605 --> 01:02:18.445
<v Speaker 1>file so that you can have a boilerplate

01:02:18.445 --> 01:02:19.885
<v Speaker 1>TLS wrapper

01:02:19.965 --> 01:02:21.885
<v Speaker 1>around every one of your web apps without

01:02:21.885 --> 01:02:23.965
<v Speaker 1>having to customize it for every web app.

01:02:24.205 --> 01:02:25.645
<v Speaker 1>And one of the things you do with

01:02:25.645 --> 01:02:27.405
<v Speaker 1>that in Compose is that you set it

01:02:27.405 --> 01:02:29.430
<v Speaker 1>all in the depends on so that essentially

01:02:29.430 --> 01:02:31.030
<v Speaker 1>what you're saying is all my front end

01:02:31.030 --> 01:02:33.830
<v Speaker 1>apps depend on the proxy to start first

01:02:33.830 --> 01:02:35.190
<v Speaker 1>as well as the database.

01:02:35.430 --> 01:02:37.270
<v Speaker 1>And so now you get this wonderful startup

01:02:37.270 --> 01:02:39.349
<v Speaker 1>order and your front end team, your back

01:02:39.349 --> 01:02:41.349
<v Speaker 1>end team, they can all just specify the

01:02:41.349 --> 01:02:43.434
<v Speaker 1>one thing they wanna work on when they

01:02:43.434 --> 01:02:45.275
<v Speaker 1>do the Docker Compose up command. In this

01:02:45.275 --> 01:02:47.515
<v Speaker 1>case, I'm just wanting to start NGINX.

01:02:47.674 --> 01:02:49.595
<v Speaker 1>And the Compose is now intelligent

01:02:49.835 --> 01:02:51.115
<v Speaker 1>and aware

01:02:51.115 --> 01:02:52.955
<v Speaker 1>of how things are healthy or not,

01:02:53.755 --> 01:02:55.515
<v Speaker 1>and you get this wonderful startup order. And

01:02:55.515 --> 01:02:56.875
<v Speaker 1>then your team will love you, right? If

01:02:56.875 --> 01:02:58.500
<v Speaker 1>you write this for your team and give

01:02:58.500 --> 01:02:59.300
<v Speaker 1>this to them

01:03:00.820 --> 01:03:03.060
<v Speaker 1>if you now do a Docker Compose PS,

01:03:03.380 --> 01:03:05.940
<v Speaker 1>you'll also notice that oh, they've all exited

01:03:05.940 --> 01:03:07.380
<v Speaker 1>because I did a

01:03:09.460 --> 01:03:10.340
<v Speaker 1>up

01:03:10.965 --> 01:03:11.925
<v Speaker 1>Now

01:03:12.485 --> 01:03:14.085
<v Speaker 1>they're gonna stay running in the background.

01:03:14.725 --> 01:03:15.685
<v Speaker 1>Detached.

01:03:16.725 --> 01:03:18.565
<v Speaker 1>And as soon as that's done,

01:03:19.845 --> 01:03:21.365
<v Speaker 1>if I do the PS again,

01:03:21.605 --> 01:03:23.870
<v Speaker 1>you'll actually see healthy there. So we get

01:03:23.870 --> 01:03:27.310
<v Speaker 1>this little extra information of maybe why things

01:03:27.310 --> 01:03:29.550
<v Speaker 1>never started because if your back end app

01:03:29.550 --> 01:03:31.470
<v Speaker 1>doesn't start correctly, you're still sitting there waiting

01:03:31.470 --> 01:03:32.910
<v Speaker 1>and waiting on the front end container to

01:03:32.910 --> 01:03:34.270
<v Speaker 1>start. You're like, why doesn't this thing start?

01:03:34.270 --> 01:03:34.430
<v Speaker 1>Well,

01:03:35.605 --> 01:03:37.685
<v Speaker 1>eventually, there'll be a time out, and it'll

01:03:37.685 --> 01:03:39.765
<v Speaker 1>just not try anymore. But you'll you can

01:03:39.765 --> 01:03:42.005
<v Speaker 1>see this as a indicator

01:03:42.005 --> 01:03:44.245
<v Speaker 1>for maybe why your your depends on doesn't

01:03:44.245 --> 01:03:44.725
<v Speaker 1>work.

01:03:45.525 --> 01:03:47.045
<v Speaker 1>Nice. Any questions in the audience?

01:03:47.820 --> 01:03:49.900
<v Speaker 0>Yeah. If anyone has any questions, just drop

01:03:49.900 --> 01:03:51.260
<v Speaker 0>them into the comments, and I'll read them

01:03:51.260 --> 01:03:53.100
<v Speaker 0>on to Brett as we kind of progress

01:03:53.100 --> 01:03:53.820
<v Speaker 0>through this.

01:03:54.220 --> 01:03:56.060
<v Speaker 0>Yeah. But it's it's it's nice just to

01:03:56.060 --> 01:03:59.180
<v Speaker 0>see those conditions working. I use them heavily,

01:03:59.180 --> 01:04:01.260
<v Speaker 0>and we'd go to conferences and tell people

01:04:01.260 --> 01:04:02.780
<v Speaker 0>never to use v three. It's only for

01:04:02.780 --> 01:04:04.434
<v Speaker 0>swarm, and I hate it. It's awful. I

01:04:04.434 --> 01:04:06.434
<v Speaker 0>don't like it. Use this one. And people

01:04:06.434 --> 01:04:08.355
<v Speaker 0>kept moaning at me saying, don't tell us

01:04:08.355 --> 01:04:10.595
<v Speaker 0>to use old versions or downgrade. And I'm

01:04:10.595 --> 01:04:11.954
<v Speaker 0>like, it's not a downgrade. It's a different

01:04:11.954 --> 01:04:13.155
<v Speaker 0>use case. Yeah. And I had this big

01:04:13.155 --> 01:04:14.835
<v Speaker 0>massive rant with so many people,

01:04:15.234 --> 01:04:17.250
<v Speaker 0>and now it just works. And I I

01:04:17.250 --> 01:04:17.650
<v Speaker 0>actually

01:04:18.050 --> 01:04:20.450
<v Speaker 0>I've not followed the Compose spec. I haven't

01:04:20.450 --> 01:04:23.170
<v Speaker 0>used the new Docker subcommand plug in Compose,

01:04:23.170 --> 01:04:25.730
<v Speaker 0>so I'm really, really happy to see that

01:04:25.730 --> 01:04:26.450
<v Speaker 0>working. Yeah.

01:04:28.385 --> 01:04:29.905
<v Speaker 1>I I also love it when I have

01:04:29.905 --> 01:04:31.105
<v Speaker 1>people on my show that teach me something.

01:04:31.105 --> 01:04:32.545
<v Speaker 1>It's like I'm getting free training.

01:04:33.025 --> 01:04:34.704
<v Speaker 1>So I I sympathize

01:04:34.704 --> 01:04:35.985
<v Speaker 1>with you. I know your joy,

01:04:36.545 --> 01:04:37.825
<v Speaker 1>especially with the tool that you're already using

01:04:37.825 --> 01:04:39.505
<v Speaker 1>and you're learning new stuff about it. Because

01:04:39.505 --> 01:04:40.865
<v Speaker 1>one of the things I think that we're

01:04:40.865 --> 01:04:43.025
<v Speaker 1>innately bad as humans at

01:04:43.510 --> 01:04:44.230
<v Speaker 1>is

01:04:44.310 --> 01:04:45.590
<v Speaker 1>we tend to,

01:04:45.990 --> 01:04:47.590
<v Speaker 1>especially those of us that are just ravenous

01:04:47.590 --> 01:04:50.150
<v Speaker 1>learners, right? We will learn something,

01:04:50.710 --> 01:04:51.910
<v Speaker 1>and we get to a point when we're

01:04:51.910 --> 01:04:53.910
<v Speaker 1>learning that we tend to taper off our

01:04:53.910 --> 01:04:54.550
<v Speaker 1>learning

01:04:54.710 --> 01:04:56.390
<v Speaker 1>unless we have a new problem that we

01:04:56.390 --> 01:04:58.230
<v Speaker 1>can't solve with it, right, or a new

01:04:58.230 --> 01:04:59.135
<v Speaker 1>thing. So

01:04:59.695 --> 01:05:01.535
<v Speaker 1>a lot of things that I'm experiencing now

01:05:01.535 --> 01:05:03.615
<v Speaker 1>with people when I do trainings is they

01:05:03.615 --> 01:05:05.375
<v Speaker 1>have Docker and Compose knowledge,

01:05:05.535 --> 01:05:08.494
<v Speaker 1>but they've not really kept up continually over

01:05:08.494 --> 01:05:09.775
<v Speaker 1>the last three or four years,

01:05:10.415 --> 01:05:12.415
<v Speaker 1>and they need a refresher, right? And that

01:05:12.415 --> 01:05:13.615
<v Speaker 1>would almost be like a good course for

01:05:13.615 --> 01:05:15.990
<v Speaker 1>someone to do is, you know, Docker Docker

01:05:15.990 --> 01:05:18.470
<v Speaker 1>refresher or Kubernetes refresher. That's just

01:05:18.710 --> 01:05:21.430
<v Speaker 1>the 2020 features, know, assuming that you knew

01:05:21.430 --> 01:05:23.670
<v Speaker 1>it all from 2018 and 2019, just the

01:05:23.670 --> 01:05:26.470
<v Speaker 1>latest features of 2020 and 2021.

01:05:26.550 --> 01:05:28.150
<v Speaker 1>Because I think we're innate, most of us

01:05:28.150 --> 01:05:29.750
<v Speaker 1>are innate, at least I am, really bad

01:05:29.750 --> 01:05:30.150
<v Speaker 1>at

01:05:30.635 --> 01:05:32.555
<v Speaker 1>going back to a tool, learning new things,

01:05:32.555 --> 01:05:35.675
<v Speaker 1>figuring out what things in my files are

01:05:35.675 --> 01:05:37.435
<v Speaker 1>now out of date and wrong.

01:05:37.595 --> 01:05:39.275
<v Speaker 1>Also, shout out to linters

01:05:39.435 --> 01:05:41.115
<v Speaker 1>because that's those those are the things that

01:05:41.115 --> 01:05:43.275
<v Speaker 1>will help you know that your old stuff

01:05:43.275 --> 01:05:46.040
<v Speaker 1>is old. Linters will often be updated to

01:05:46.040 --> 01:05:47.000
<v Speaker 1>the newest spec.

01:05:48.440 --> 01:05:49.160
<v Speaker 1>Anyway,

01:05:49.480 --> 01:05:51.240
<v Speaker 1>so if we don't have

01:05:51.880 --> 01:05:53.800
<v Speaker 1>any specific questions on this one

01:05:54.440 --> 01:05:54.680
<v Speaker 1>oh,

01:05:55.815 --> 01:05:58.454
<v Speaker 1>so use Compose v two plus the Compose

01:05:58.454 --> 01:05:59.495
<v Speaker 1>CLI plugin.

01:06:00.535 --> 01:06:03.255
<v Speaker 1>So the Compose CLI plugin is

01:06:03.734 --> 01:06:05.734
<v Speaker 1>Compose v two. Okay. So when we when

01:06:05.734 --> 01:06:08.295
<v Speaker 1>we're referring to Compose v two, that that

01:06:08.295 --> 01:06:10.215
<v Speaker 1>exact word together,

01:06:10.375 --> 01:06:11.734
<v Speaker 1>that is Docker's

01:06:12.640 --> 01:06:15.680
<v Speaker 1>way of saying we're rebooting Compose into the

01:06:15.680 --> 01:06:18.080
<v Speaker 1>Docker command line. And I know it's confusing

01:06:18.160 --> 01:06:20.400
<v Speaker 1>confusing because there is a Docker

01:06:20.560 --> 01:06:21.440
<v Speaker 1>file

01:06:21.520 --> 01:06:25.280
<v Speaker 1>version two and version file version three. We're

01:06:25.280 --> 01:06:26.160
<v Speaker 1>not talking about

01:06:26.615 --> 01:06:29.335
<v Speaker 1>that when we say now Compose v two.

01:06:29.335 --> 01:06:31.255
<v Speaker 1>Docker has chose to brand,

01:06:31.895 --> 01:06:33.974
<v Speaker 1>for whatever reason, naming is hard, naming is

01:06:33.974 --> 01:06:35.095
<v Speaker 1>like the hardest thing,

01:06:35.575 --> 01:06:36.615
<v Speaker 1>they've branded

01:06:37.015 --> 01:06:40.135
<v Speaker 1>this new reboot of Compose into the Golang

01:06:40.320 --> 01:06:42.080
<v Speaker 1>and inside to the Docker plug in. They're

01:06:42.080 --> 01:06:43.360
<v Speaker 1>basically saying this is now

01:06:43.680 --> 01:06:45.200
<v Speaker 1>Compose v two

01:06:45.760 --> 01:06:47.680
<v Speaker 1>because they're rewriting it from scratch. I would

01:06:47.680 --> 01:06:49.360
<v Speaker 1>have preferred them to avoid all confusion and

01:06:49.360 --> 01:06:51.600
<v Speaker 1>just call it Compose v four or something.

01:06:52.480 --> 01:06:54.080
<v Speaker 1>And one of the reasons they said this,

01:06:54.080 --> 01:06:55.475
<v Speaker 1>and it does make sense, because if you

01:06:55.475 --> 01:06:57.395
<v Speaker 1>look at the Docker old command line,

01:06:57.715 --> 01:06:59.235
<v Speaker 1>if you understand the difference between the file

01:06:59.235 --> 01:07:01.635
<v Speaker 1>format and the command line, the old Docker

01:07:01.635 --> 01:07:02.675
<v Speaker 1>Compose

01:07:02.675 --> 01:07:03.395
<v Speaker 1>version

01:07:03.795 --> 01:07:06.515
<v Speaker 1>was perpetual version one. It it's not the

01:07:06.515 --> 01:07:09.640
<v Speaker 1>latest version is one dot two nine. So

01:07:09.720 --> 01:07:12.200
<v Speaker 1>when they release this new version,

01:07:12.600 --> 01:07:13.400
<v Speaker 1>it will,

01:07:13.560 --> 01:07:14.840
<v Speaker 1>you know because it's still kind of in

01:07:14.840 --> 01:07:15.720
<v Speaker 1>release client.

01:07:16.200 --> 01:07:18.600
<v Speaker 1>It is now gonna be the command line

01:07:18.600 --> 01:07:20.040
<v Speaker 1>client version two.

01:07:20.600 --> 01:07:22.935
<v Speaker 1>What I'm saying in all your files, all

01:07:22.935 --> 01:07:25.255
<v Speaker 1>your YAML files now need to just remove

01:07:25.255 --> 01:07:29.015
<v Speaker 1>their version format forever. The version YAML file

01:07:29.015 --> 01:07:30.855
<v Speaker 1>thing up at the top can just be

01:07:30.855 --> 01:07:31.895
<v Speaker 1>blank forever.

01:07:32.455 --> 01:07:33.655
<v Speaker 1>No version needed.

01:07:33.975 --> 01:07:34.935
<v Speaker 1>And

01:07:34.935 --> 01:07:36.775
<v Speaker 1>what that means is is that all the

01:07:36.775 --> 01:07:37.655
<v Speaker 1>all the clients,

01:07:38.570 --> 01:07:41.370
<v Speaker 1>except Swarm because it's still not been updated.

01:07:41.370 --> 01:07:42.890
<v Speaker 1>We don't know when that's gonna get updated,

01:07:42.890 --> 01:07:43.690
<v Speaker 1>if ever.

01:07:45.210 --> 01:07:46.330
<v Speaker 1>All clients,

01:07:46.330 --> 01:07:49.450
<v Speaker 1>all things that consume the Compose file,

01:07:49.770 --> 01:07:51.530
<v Speaker 1>those are the things that are now responsible

01:07:51.530 --> 01:07:52.570
<v Speaker 1>for adopting

01:07:52.885 --> 01:07:56.005
<v Speaker 1>whatever feature you want, like, depends on, okay?

01:07:57.285 --> 01:07:58.885
<v Speaker 1>Sorry for the confusion. I know it's a

01:07:58.885 --> 01:07:59.605
<v Speaker 1>little much

01:08:00.405 --> 01:08:01.925
<v Speaker 1>on on those two things.

01:08:02.485 --> 01:08:04.085
<v Speaker 1>Alright. Let's jump to our next demo, and

01:08:04.085 --> 01:08:05.445
<v Speaker 1>we can come back to the questions real

01:08:05.445 --> 01:08:06.805
<v Speaker 1>quick. Sure.

01:08:07.285 --> 01:08:09.220
<v Speaker 1>So the next next thing I wanna talk

01:08:09.220 --> 01:08:09.780
<v Speaker 1>about

01:08:10.180 --> 01:08:10.900
<v Speaker 1>is

01:08:11.540 --> 01:08:14.020
<v Speaker 1>let's do let's find something else here.

01:08:14.820 --> 01:08:15.940
<v Speaker 1>What if we

01:08:16.899 --> 01:08:18.100
<v Speaker 1>started

01:08:24.265 --> 01:08:25.145
<v Speaker 1>Oh, sorry.

01:08:25.945 --> 01:08:27.145
<v Speaker 1>It's like Ghost.

01:08:28.345 --> 01:08:29.545
<v Speaker 1>Maybe I have

01:08:32.745 --> 01:08:35.784
<v Speaker 1>oh, Ghostblog. I love Ghostblog. I use Ghostblog

01:08:35.865 --> 01:08:38.260
<v Speaker 1>forever ever since they first launched way long

01:08:38.260 --> 01:08:40.580
<v Speaker 1>ago. It's a nonprofit. I'm a big fan

01:08:40.580 --> 01:08:41.380
<v Speaker 1>of it. So

01:08:41.939 --> 01:08:44.340
<v Speaker 1>not that WordPress is bad, but I love

01:08:44.340 --> 01:08:46.660
<v Speaker 1>Ghost. It's also written in Node. Js. So

01:08:46.820 --> 01:08:48.660
<v Speaker 1>I use Ghost so that you can just

01:08:48.660 --> 01:08:49.860
<v Speaker 1>start up a Ghost server. I think this

01:08:49.860 --> 01:08:51.860
<v Speaker 1>is actually all I need. I'm super positive.

01:08:52.415 --> 01:08:54.815
<v Speaker 1>But let's say that you have, let's say

01:08:54.815 --> 01:08:57.695
<v Speaker 1>that your company has a single Compose file

01:08:57.695 --> 01:09:00.175
<v Speaker 1>and you really have them for the front

01:09:00.175 --> 01:09:02.495
<v Speaker 1>end developers that are managing the website, right?

01:09:02.495 --> 01:09:04.095
<v Speaker 1>Maybe they have the website and then they

01:09:04.095 --> 01:09:04.655
<v Speaker 1>have the blog.

01:09:05.489 --> 01:09:07.969
<v Speaker 1>So there's a couple people that focus on

01:09:07.969 --> 01:09:09.249
<v Speaker 1>the blog infrastructure,

01:09:09.569 --> 01:09:12.529
<v Speaker 1>but they also need because maybe it's proxied

01:09:12.529 --> 01:09:14.769
<v Speaker 1>on a subdirectory of the main website or

01:09:14.769 --> 01:09:15.409
<v Speaker 1>whatever,

01:09:15.649 --> 01:09:16.769
<v Speaker 1>you maybe need

01:09:17.104 --> 01:09:18.705
<v Speaker 1>to have them all in the same Compose

01:09:18.705 --> 01:09:20.225
<v Speaker 1>file. But you don't always need them all

01:09:20.225 --> 01:09:21.984
<v Speaker 1>at the same time because maybe there's the

01:09:21.984 --> 01:09:23.984
<v Speaker 1>React front end people making the fancy website

01:09:23.984 --> 01:09:25.665
<v Speaker 1>and then there's the ghost people just making

01:09:25.665 --> 01:09:26.624
<v Speaker 1>the blog or whatever.

01:09:27.104 --> 01:09:29.665
<v Speaker 1>So I'm creating a fictitious scenario for why

01:09:29.665 --> 01:09:31.344
<v Speaker 1>we need this. So

01:09:32.020 --> 01:09:33.219
<v Speaker 1>if we go

01:09:35.300 --> 01:09:37.139
<v Speaker 1>I'm sure that there is a web browser

01:09:37.139 --> 01:09:39.139
<v Speaker 1>plugin for Versus Code because there's a plugin

01:09:39.139 --> 01:09:42.099
<v Speaker 1>for everything. There is a web browser extension.

01:09:43.060 --> 01:09:44.659
<v Speaker 1>Do you use one? Do you recommend one?

01:09:45.095 --> 01:09:46.615
<v Speaker 0>I don't use one, but I I read

01:09:46.615 --> 01:09:48.695
<v Speaker 0>like one of those listicles just yesterday about

01:09:48.695 --> 01:09:50.854
<v Speaker 0>these top 10 Versus Code extensions. And one

01:09:50.854 --> 01:09:52.135
<v Speaker 0>of them was just bring your web browser

01:09:52.135 --> 01:09:54.135
<v Speaker 0>and instead of switching to Chrome for for

01:09:54.135 --> 01:09:57.095
<v Speaker 0>debugging. Because I think Versus Code, the the

01:10:00.400 --> 01:10:03.360
<v Speaker 0>debugging support in the IDE now supports the

01:10:03.360 --> 01:10:05.120
<v Speaker 0>extension that gives you the browser so you

01:10:05.120 --> 01:10:06.240
<v Speaker 0>don't have to speak to, like, a real

01:10:06.240 --> 01:10:07.920
<v Speaker 0>Chrome or anything. It

01:10:08.480 --> 01:10:09.120
<v Speaker 0>seems cool.

01:10:14.385 --> 01:10:15.745
<v Speaker 0>Let's see if I still got up my

01:10:15.745 --> 01:10:16.385
<v Speaker 0>history.

01:10:17.025 --> 01:10:17.665
<v Speaker 1>Yeah.

01:10:17.905 --> 01:10:20.225
<v Speaker 1>Anyway, I'm I'm distracted on this, but Oh,

01:10:20.225 --> 01:10:23.905
<v Speaker 1>wow. Oh, that's deprecated. Dev tools Chrome. Yeah.

01:10:24.065 --> 01:10:25.745
<v Speaker 1>Someone in chat knows knows a good one

01:10:25.745 --> 01:10:27.585
<v Speaker 0>that they There's one called browser tab.

01:10:29.160 --> 01:10:31.080
<v Speaker 0>You know, it's not got many installs, so

01:10:33.960 --> 01:10:34.920
<v Speaker 1>You go wrong.

01:10:36.840 --> 01:10:39.960
<v Speaker 1>Browser tab. Oh, browser preview. That's the popular

01:10:39.960 --> 01:10:41.720
<v Speaker 0>one. Yeah. I found the listicle.

01:10:45.114 --> 01:10:47.995
<v Speaker 1>Real browser preview. Yeah. That's a browser preview,

01:10:47.995 --> 01:10:48.474
<v Speaker 1>though.

01:10:49.035 --> 01:10:49.835
<v Speaker 1>Anyway,

01:10:49.995 --> 01:10:51.914
<v Speaker 1>I'm not sure if that's gonna work, but

01:10:52.875 --> 01:10:54.235
<v Speaker 1>because I want a preview of the YAML

01:10:54.235 --> 01:10:55.355
<v Speaker 1>file. I just wanted a browser tab, so

01:10:55.355 --> 01:10:56.640
<v Speaker 1>we don't to switch. Anyway, it's a browser

01:10:56.640 --> 01:10:58.240
<v Speaker 0>tab. You you got a URL bar and

01:10:58.240 --> 01:11:01.360
<v Speaker 0>everything. Oh, okay. Okay. I'll try that.

01:11:04.400 --> 01:11:06.160
<v Speaker 0>What's the worst thing that could happen? I

01:11:06.160 --> 01:11:08.160
<v Speaker 1>know. It's someone's gonna have access. It's like,

01:11:08.160 --> 01:11:10.080
<v Speaker 1>please log in with your GitHub account. Oh,

01:11:10.080 --> 01:11:11.280
<v Speaker 1>now you have everything.

01:11:15.574 --> 01:11:18.054
<v Speaker 1>Browser preview. Alright. Alright.

01:11:19.014 --> 01:11:20.934
<v Speaker 0>Yeah. We got another vote for browser preview

01:11:20.934 --> 01:11:22.695
<v Speaker 0>in the comments as well. So Oh, nice.

01:11:28.320 --> 01:11:29.440
<v Speaker 1>I'm trying to think how I how do

01:11:29.440 --> 01:11:30.320
<v Speaker 1>I want my window

01:11:32.640 --> 01:11:34.480
<v Speaker 1>I don't want it to be on the

01:11:34.480 --> 01:11:36.080
<v Speaker 1>tide there. So

01:11:37.455 --> 01:11:39.215
<v Speaker 1>you probably only need the last command. Alright.

01:11:39.215 --> 01:11:41.374
<v Speaker 1>So what are we doing? We're doing

01:11:41.695 --> 01:11:43.455
<v Speaker 1>oh, I'm gonna go look at the Compose

01:11:43.455 --> 01:11:45.614
<v Speaker 1>spec real quick so that I can show

01:11:47.775 --> 01:11:49.695
<v Speaker 1>we can sort of correlate these things together.

01:11:52.360 --> 01:11:53.960
<v Speaker 1>If I go to the spec,

01:11:56.680 --> 01:11:57.400
<v Speaker 1>then

01:11:57.800 --> 01:11:59.720
<v Speaker 1>oh, can I do find in here? Will

01:11:59.720 --> 01:12:01.480
<v Speaker 1>it will it do find inside

01:12:01.720 --> 01:12:02.760
<v Speaker 1>the document?

01:12:03.400 --> 01:12:04.120
<v Speaker 1>Probably not.

01:12:05.795 --> 01:12:07.794
<v Speaker 1>Let me let me find the actual header.

01:12:14.594 --> 01:12:15.635
<v Speaker 1>There we go.

01:12:16.114 --> 01:12:17.074
<v Speaker 1>That's what I want.

01:12:19.560 --> 01:12:20.440
<v Speaker 1>Profiles

01:12:20.520 --> 01:12:23.080
<v Speaker 1>is a new feature in the spec, and

01:12:23.080 --> 01:12:24.520
<v Speaker 1>so the spec is really just talking about

01:12:24.520 --> 01:12:27.000
<v Speaker 1>how it should work. They give an example

01:12:27.000 --> 01:12:28.360
<v Speaker 1>of maybe what it would like look like

01:12:28.360 --> 01:12:29.320
<v Speaker 1>in YAML.

01:12:30.120 --> 01:12:32.280
<v Speaker 1>And so we have the service at the

01:12:32.280 --> 01:12:32.520
<v Speaker 1>top.

01:12:33.685 --> 01:12:35.765
<v Speaker 1>Sorry, the services, the main services, then the

01:12:35.765 --> 01:12:38.565
<v Speaker 1>service, a single service, and then the profiles

01:12:38.565 --> 01:12:40.165
<v Speaker 1>that it's going to be a part of.

01:12:40.165 --> 01:12:42.165
<v Speaker 1>So by default, they're all technically sort of

01:12:42.165 --> 01:12:44.325
<v Speaker 1>a part of the default profile, but you

01:12:44.325 --> 01:12:45.685
<v Speaker 1>can add custom ones,

01:12:45.925 --> 01:12:47.365
<v Speaker 1>and so that's what we're gonna do

01:12:48.060 --> 01:12:49.099
<v Speaker 1>for Ghost.

01:12:49.420 --> 01:12:51.179
<v Speaker 1>And maybe we're going to say,

01:12:53.020 --> 01:12:54.940
<v Speaker 1>for profiles, it only needs to be a

01:12:54.940 --> 01:12:56.219
<v Speaker 1>part of the blog

01:12:56.460 --> 01:12:57.419
<v Speaker 1>profile.

01:12:57.900 --> 01:12:59.340
<v Speaker 1>And then everything else

01:12:59.980 --> 01:13:00.380
<v Speaker 1>is

01:13:00.905 --> 01:13:02.665
<v Speaker 1>a part of just the default. So if

01:13:02.665 --> 01:13:04.105
<v Speaker 1>I do a Docker Compose up

01:13:04.665 --> 01:13:06.665
<v Speaker 1>oops. No. I didn't want to do that.

01:13:09.545 --> 01:13:10.985
<v Speaker 1>If I do a Docker Compose up,

01:13:17.520 --> 01:13:19.760
<v Speaker 1>Notice that it still doesn't show well, let's

01:13:19.760 --> 01:13:20.960
<v Speaker 1>just make sure I save the file. No

01:13:20.960 --> 01:13:22.400
<v Speaker 1>no tricks here.

01:13:22.800 --> 01:13:23.519
<v Speaker 1>Okay.

01:13:23.840 --> 01:13:26.400
<v Speaker 1>You'll notice that it didn't

01:13:28.165 --> 01:13:31.205
<v Speaker 1>doesn't show that ghost blog part. It's not

01:13:31.205 --> 01:13:33.125
<v Speaker 1>it's not considering it a part of the

01:13:33.125 --> 01:13:36.005
<v Speaker 1>project because I didn't specify that profile.

01:13:36.245 --> 01:13:38.485
<v Speaker 1>So if you look at the Docker Compose

01:13:38.485 --> 01:13:41.110
<v Speaker 1>command line help, you'll now see

01:13:43.510 --> 01:13:44.949
<v Speaker 1>this new option here.

01:13:45.590 --> 01:13:47.590
<v Speaker 1>And it's easy to get confused for me,

01:13:47.590 --> 01:13:49.910
<v Speaker 1>at least. Confuse the project in the profile.

01:13:49.910 --> 01:13:52.070
<v Speaker 1>So we've always had project. Project is the

01:13:52.070 --> 01:13:53.110
<v Speaker 1>current scope.

01:13:53.270 --> 01:13:54.405
<v Speaker 1>And if you didn't know, when you type

01:13:54.405 --> 01:13:56.005
<v Speaker 1>a Docker Compose command, it looks in the

01:13:56.005 --> 01:13:58.485
<v Speaker 1>current directory for a file called Docker Compose

01:13:58.485 --> 01:13:59.765
<v Speaker 1>YAML, and then it will look up a

01:13:59.765 --> 01:14:01.205
<v Speaker 1>directory and up a directory and so on

01:14:01.205 --> 01:14:03.285
<v Speaker 1>until it finds one. And it considers that

01:14:03.285 --> 01:14:04.245
<v Speaker 1>the project.

01:14:04.405 --> 01:14:06.325
<v Speaker 1>You can override that. Obviously, you can have

01:14:06.325 --> 01:14:07.605
<v Speaker 1>a different file name if you want and

01:14:07.605 --> 01:14:09.420
<v Speaker 1>you specify that with a file name. You

01:14:09.420 --> 01:14:12.220
<v Speaker 1>can override which directory to use and you

01:14:12.300 --> 01:14:14.300
<v Speaker 1>can actually override the name of the project.

01:14:14.700 --> 01:14:15.900
<v Speaker 1>The real quick reason on why you'd ever

01:14:15.900 --> 01:14:17.660
<v Speaker 1>wanna do that is if you've ever wanted

01:14:17.660 --> 01:14:19.580
<v Speaker 1>to spin up two of the same thing

01:14:19.580 --> 01:14:20.860
<v Speaker 1>in the same directory,

01:14:21.260 --> 01:14:22.460
<v Speaker 1>that's how you can do it is you

01:14:22.460 --> 01:14:24.745
<v Speaker 1>can override the project name and then it

01:14:24.745 --> 01:14:27.705
<v Speaker 1>will spin up the same YAML file, but

01:14:27.705 --> 01:14:30.745
<v Speaker 1>it will use different container names. It'll add

01:14:30.745 --> 01:14:33.145
<v Speaker 1>basically the project name inside the container name.

01:14:33.145 --> 01:14:34.665
<v Speaker 1>That's why when when we all probably didn't

01:14:34.665 --> 01:14:36.345
<v Speaker 1>realize this, but when you do a Docker

01:14:36.345 --> 01:14:36.985
<v Speaker 1>Compose PS,

01:14:37.830 --> 01:14:40.790
<v Speaker 1>you're actually seeing the project name first. That's

01:14:40.790 --> 01:14:42.710
<v Speaker 1>what the raw code part is. So if

01:14:42.710 --> 01:14:45.110
<v Speaker 1>I override that with a dash p, it

01:14:45.110 --> 01:14:47.910
<v Speaker 1>will replace that that value with something else

01:14:47.910 --> 01:14:49.190
<v Speaker 1>so that they don't conflict. Right? Because we

01:14:49.190 --> 01:14:50.550
<v Speaker 1>can't have container names that conflict.

01:14:51.135 --> 01:14:53.775
<v Speaker 1>Now, caveat, if you're hard coding your ports,

01:14:53.775 --> 01:14:54.975
<v Speaker 1>this will also not work because you'll get

01:14:54.975 --> 01:14:55.935
<v Speaker 1>the port confliction.

01:14:56.175 --> 01:14:57.775
<v Speaker 1>But the way you get around that in

01:14:57.775 --> 01:15:00.014
<v Speaker 1>Dockerfiles is you just don't specify

01:15:00.975 --> 01:15:02.975
<v Speaker 1>your published port, and then it will randomly

01:15:02.975 --> 01:15:04.895
<v Speaker 1>assign you ports that you can use every

01:15:04.895 --> 01:15:06.750
<v Speaker 1>time, and then it'll make sure they never

01:15:06.750 --> 01:15:08.510
<v Speaker 1>conflict. So that's a really cool way if

01:15:08.510 --> 01:15:10.510
<v Speaker 1>you ever wanna spin something twice without having

01:15:10.510 --> 01:15:12.830
<v Speaker 1>to clone it down twice and all that

01:15:12.830 --> 01:15:15.550
<v Speaker 1>obnoxious stuff. Alright, so anyway, back

01:15:15.790 --> 01:15:19.630
<v Speaker 1>to profile. So profile allows another layer inside

01:15:19.630 --> 01:15:21.230
<v Speaker 1>of the project. So I'm in the project

01:15:21.230 --> 01:15:23.605
<v Speaker 1>scope. I'm now going to have that profile

01:15:23.605 --> 01:15:25.925
<v Speaker 1>part. And so if I do a Docker

01:15:25.925 --> 01:15:26.805
<v Speaker 1>Compose

01:15:27.845 --> 01:15:28.645
<v Speaker 1>profile

01:15:28.725 --> 01:15:29.765
<v Speaker 1>log

01:15:29.925 --> 01:15:30.645
<v Speaker 1>up,

01:15:32.405 --> 01:15:34.965
<v Speaker 1>it will spin up the ghost. Nice.

01:15:36.720 --> 01:15:39.040
<v Speaker 1>This profile, I have to specify with every

01:15:39.040 --> 01:15:40.640
<v Speaker 1>command in order to get

01:15:41.200 --> 01:15:42.560
<v Speaker 1>the awareness

01:15:43.120 --> 01:15:44.720
<v Speaker 1>of those things. Right? So if I don't

01:15:44.720 --> 01:15:46.800
<v Speaker 1>if I don't type in dash dash profile,

01:15:47.040 --> 01:15:49.040
<v Speaker 1>then it won't know what ghost is because

01:15:49.040 --> 01:15:50.925
<v Speaker 1>it won't I think that's true for every

01:15:50.925 --> 01:15:53.245
<v Speaker 1>command. Someone in someone in chat might I

01:15:53.245 --> 01:15:54.605
<v Speaker 1>don't if Sujay's still around, but somebody in

01:15:54.605 --> 01:15:56.605
<v Speaker 1>chat might know wrong know that I'm wrong.

01:15:56.605 --> 01:15:58.925
<v Speaker 1>But every command I that I'm aware of

01:15:59.005 --> 01:16:00.685
<v Speaker 1>expects that profile there.

01:16:01.485 --> 01:16:02.925
<v Speaker 1>So now

01:16:04.380 --> 01:16:06.140
<v Speaker 1>notice when I do a Docker Compose ps,

01:16:06.140 --> 01:16:07.980
<v Speaker 1>it's well, actually, no. It is listing Go.

01:16:07.980 --> 01:16:09.180
<v Speaker 1>So see, I'm already wrong.

01:16:10.860 --> 01:16:12.140
<v Speaker 1>What I was gonna say was I have

01:16:12.140 --> 01:16:13.580
<v Speaker 1>to use Docker Compose

01:16:13.580 --> 01:16:15.260
<v Speaker 1>dash dash profile

01:16:16.220 --> 01:16:17.100
<v Speaker 1>blog

01:16:17.100 --> 01:16:17.660
<v Speaker 1>ps,

01:16:18.585 --> 01:16:20.025
<v Speaker 1>but it's indeed

01:16:20.265 --> 01:16:21.945
<v Speaker 1>listing it. So I now that I think

01:16:21.945 --> 01:16:23.225
<v Speaker 1>about it, that might have been a recent

01:16:23.225 --> 01:16:25.225
<v Speaker 1>change where they added to the p s

01:16:25.225 --> 01:16:27.225
<v Speaker 1>command because I've been watching the commits, they

01:16:27.385 --> 01:16:29.385
<v Speaker 1>they're these new commands that they're doing, especially

01:16:29.385 --> 01:16:31.225
<v Speaker 1>this new feature, they kinda go back and

01:16:31.225 --> 01:16:32.825
<v Speaker 1>forth based on feedback. So shout out to

01:16:32.825 --> 01:16:35.019
<v Speaker 1>Docker, taking community feedback,

01:16:35.260 --> 01:16:36.699
<v Speaker 1>because if you're if you you can jump

01:16:36.699 --> 01:16:40.059
<v Speaker 1>on their Slack or in their GitHub issues,

01:16:40.540 --> 01:16:43.260
<v Speaker 1>and they're they're they really are taking feedback

01:16:43.260 --> 01:16:45.500
<v Speaker 1>and adding new features to Compose based on

01:16:45.500 --> 01:16:48.244
<v Speaker 1>feedback. I've had several of my own features,

01:16:48.244 --> 01:16:50.244
<v Speaker 1>including adding this healthy

01:16:50.485 --> 01:16:52.405
<v Speaker 1>statement inside that line there,

01:16:52.965 --> 01:16:55.284
<v Speaker 1>adding that into the new Compose just because

01:16:55.284 --> 01:16:56.885
<v Speaker 1>I put in a GitHub issue, and they

01:16:56.885 --> 01:16:59.205
<v Speaker 1>marked it for development and put it in.

01:16:59.205 --> 01:17:00.725
<v Speaker 1>I didn't have to actually PR it for

01:17:00.725 --> 01:17:02.005
<v Speaker 1>them. So

01:17:03.020 --> 01:17:04.380
<v Speaker 1>we can do that same thing with something

01:17:04.380 --> 01:17:05.740
<v Speaker 1>like Docker Compose.

01:17:05.740 --> 01:17:07.420
<v Speaker 1>Let's let's actually see if this works. Docker

01:17:07.420 --> 01:17:08.540
<v Speaker 1>Compose top ghost.

01:17:11.820 --> 01:17:13.980
<v Speaker 1>Okay. So see that? Maybe they've now done

01:17:13.980 --> 01:17:16.140
<v Speaker 1>it so that it knows when I did

01:17:16.140 --> 01:17:18.165
<v Speaker 1>the up, I did it on a specific

01:17:18.165 --> 01:17:20.564
<v Speaker 1>profile so the other commands

01:17:21.125 --> 01:17:22.724
<v Speaker 1>are semi aware of it because it didn't

01:17:22.724 --> 01:17:24.565
<v Speaker 1>used to work this way. Docker Compose exec

01:17:24.565 --> 01:17:25.445
<v Speaker 1>ghost.

01:17:27.525 --> 01:17:29.125
<v Speaker 1>Bash. Let me see. Let me do that.

01:17:29.280 --> 01:17:30.960
<v Speaker 1>Okay. So there you go. That's what I

01:17:30.960 --> 01:17:33.359
<v Speaker 1>was looking for, is it doesn't see

01:17:34.159 --> 01:17:36.800
<v Speaker 1>the service ghost because I have to

01:17:37.920 --> 01:17:38.800
<v Speaker 1>do this.

01:17:39.360 --> 01:17:40.400
<v Speaker 1>It's a little tedious.

01:17:43.215 --> 01:17:45.295
<v Speaker 1>There we go. And now I'm inside of

01:17:45.295 --> 01:17:46.175
<v Speaker 1>my container.

01:17:46.895 --> 01:17:47.534
<v Speaker 1>So

01:17:48.735 --> 01:17:51.215
<v Speaker 1>I tend to use this for either teams

01:17:51.215 --> 01:17:52.815
<v Speaker 1>that are all

01:17:53.215 --> 01:17:54.975
<v Speaker 1>semi a part of each other's workflow, but

01:17:54.975 --> 01:17:56.655
<v Speaker 1>they often don't need to start up everything.

01:17:58.600 --> 01:17:59.719
<v Speaker 1>But I often

01:17:59.880 --> 01:18:01.400
<v Speaker 1>actually use this more

01:18:01.640 --> 01:18:02.360
<v Speaker 1>for

01:18:02.680 --> 01:18:03.639
<v Speaker 1>one off

01:18:05.240 --> 01:18:07.239
<v Speaker 1>maybe you wanna install all the packages.

01:18:08.600 --> 01:18:10.680
<v Speaker 1>Maybe you have a monolithic app and it's

01:18:10.185 --> 01:18:11.864
<v Speaker 1>Ruby plus NPM

01:18:12.025 --> 01:18:13.704
<v Speaker 1>plus apt get stuff, and you wanna do

01:18:13.704 --> 01:18:15.704
<v Speaker 1>a refresh of all the packages or whatever,

01:18:16.985 --> 01:18:18.505
<v Speaker 1>and you don't wanna have to shell in

01:18:18.505 --> 01:18:21.145
<v Speaker 1>and then type each thing manually. So what

01:18:21.145 --> 01:18:22.824
<v Speaker 1>I've seen teams do, a team that I'm

01:18:22.824 --> 01:18:24.940
<v Speaker 1>working with is doing this, they do write

01:18:24.940 --> 01:18:27.579
<v Speaker 1>little shell scripts to automate all that,

01:18:27.980 --> 01:18:30.139
<v Speaker 1>you know, those common developer workflow commands for

01:18:30.139 --> 01:18:31.019
<v Speaker 1>their environment,

01:18:31.260 --> 01:18:33.019
<v Speaker 1>and then they just make that

01:18:33.579 --> 01:18:36.380
<v Speaker 1>something inside of another service. So they might

01:18:36.380 --> 01:18:37.019
<v Speaker 1>do

01:18:37.900 --> 01:18:39.420
<v Speaker 1>they might just make something

01:18:39.795 --> 01:18:40.595
<v Speaker 1>called,

01:18:41.395 --> 01:18:42.195
<v Speaker 1>you know,

01:18:42.595 --> 01:18:43.635
<v Speaker 1>one off,

01:18:44.195 --> 01:18:45.875
<v Speaker 1>you know, or or maybe

01:18:46.595 --> 01:18:47.315
<v Speaker 1>update.

01:18:48.035 --> 01:18:50.195
<v Speaker 1>Then they'll make it a profile

01:18:54.740 --> 01:18:55.620
<v Speaker 1>update.

01:18:57.620 --> 01:18:59.940
<v Speaker 1>And then let's say the image we're using

01:19:02.260 --> 01:19:03.540
<v Speaker 1>is still ghost.

01:19:05.540 --> 01:19:06.660
<v Speaker 1>And

01:19:07.195 --> 01:19:08.875
<v Speaker 1>what they really need to do is they're

01:19:08.875 --> 01:19:11.035
<v Speaker 1>wanting to apply chain you know, assuming we

01:19:11.035 --> 01:19:12.795
<v Speaker 1>got bind mounts here and we're all talking

01:19:12.795 --> 01:19:14.555
<v Speaker 1>to the same database, they wanna do maybe

01:19:14.555 --> 01:19:16.715
<v Speaker 1>a database schema update or they wanna do

01:19:16.715 --> 01:19:19.035
<v Speaker 1>something that's not necessarily in this container, but

01:19:19.035 --> 01:19:20.555
<v Speaker 1>they don't wanna shell in and have to

01:19:20.555 --> 01:19:22.230
<v Speaker 1>type a bunch of commands. So then they

01:19:22.230 --> 01:19:23.109
<v Speaker 1>can type here

01:19:23.829 --> 01:19:24.709
<v Speaker 1>command,

01:19:24.789 --> 01:19:25.429
<v Speaker 1>you know,

01:19:26.869 --> 01:19:27.669
<v Speaker 1>whatever.

01:19:29.110 --> 01:19:31.750
<v Speaker 1>I have to get install ghost. So, yeah,

01:19:31.750 --> 01:19:32.869
<v Speaker 1>maybe maybe

01:19:33.269 --> 01:19:34.150
<v Speaker 1>curl. Right?

01:19:35.475 --> 01:19:37.715
<v Speaker 1>So they could do this. Now

01:19:37.875 --> 01:19:40.354
<v Speaker 1>what that does that what that means is

01:19:40.594 --> 01:19:41.315
<v Speaker 1>is

01:19:44.034 --> 01:19:45.954
<v Speaker 1>when they're in their project,

01:19:46.114 --> 01:19:48.195
<v Speaker 1>when they just do a normal Docker Compose

01:19:48.195 --> 01:19:48.435
<v Speaker 1>up,

01:19:49.500 --> 01:19:51.900
<v Speaker 1>it's never gonna try to run that service.

01:19:51.980 --> 01:19:53.420
<v Speaker 1>Right? That service is,

01:19:53.660 --> 01:19:56.540
<v Speaker 1>by default, will not run because it's not

01:19:56.540 --> 01:19:57.980
<v Speaker 1>in a default profile.

01:19:58.220 --> 01:19:59.900
<v Speaker 1>So the you know, and default profile means

01:19:59.900 --> 01:20:02.060
<v Speaker 1>basically everything that's not listed as a profile.

01:20:02.845 --> 01:20:05.085
<v Speaker 1>And then when I wanna do a run

01:20:05.485 --> 01:20:06.445
<v Speaker 1>a one off,

01:20:07.085 --> 01:20:09.245
<v Speaker 1>one of the neat things about this feature

01:20:09.245 --> 01:20:10.845
<v Speaker 1>is that it knows if I wanna do

01:20:10.845 --> 01:20:11.885
<v Speaker 1>a run command

01:20:12.445 --> 01:20:14.205
<v Speaker 1>or an up command on something and I

01:20:14.205 --> 01:20:15.405
<v Speaker 1>specify it directly,

01:20:16.600 --> 01:20:18.600
<v Speaker 1>I don't have to list the profile name.

01:20:18.600 --> 01:20:20.520
<v Speaker 1>So I can do something like Docker Compose

01:20:20.520 --> 01:20:21.320
<v Speaker 1>up

01:20:22.600 --> 01:20:24.360
<v Speaker 1>or just even just run

01:20:28.360 --> 01:20:29.400
<v Speaker 1>what do I call it? Update.

01:20:33.215 --> 01:20:33.935
<v Speaker 1>So

01:20:34.335 --> 01:20:36.495
<v Speaker 1>that was, like, a really short command, Docker

01:20:36.495 --> 01:20:39.375
<v Speaker 1>Compose run update. And, essentially, what I'm turning

01:20:39.375 --> 01:20:42.255
<v Speaker 1>this into is a tool for utility commands

01:20:42.255 --> 01:20:44.335
<v Speaker 1>that I don't wanna have to remember the

01:20:44.335 --> 01:20:46.300
<v Speaker 1>whole long command that I wanna do, like

01:20:46.300 --> 01:20:47.980
<v Speaker 1>a schema update or scan

01:20:48.780 --> 01:20:49.499
<v Speaker 1>with

01:20:50.219 --> 01:20:52.620
<v Speaker 1>Snyk or Trivy inside of my image and

01:20:52.620 --> 01:20:54.380
<v Speaker 1>looking for all of my vulnerabilities. Maybe you

01:20:54.380 --> 01:20:55.739
<v Speaker 1>don't wanna have to remember all those commands.

01:20:55.739 --> 01:20:56.380
<v Speaker 1>So now

01:20:57.020 --> 01:20:58.219
<v Speaker 1>all you really need is an image. It

01:20:58.219 --> 01:20:59.580
<v Speaker 1>doesn't really matter what image you use. It

01:20:59.580 --> 01:21:00.540
<v Speaker 1>just needs to be the one you wanna

01:21:00.540 --> 01:21:02.195
<v Speaker 1>run the tool in. Yep. And then you

01:21:02.195 --> 01:21:04.035
<v Speaker 1>can override with that command right there, and

01:21:04.035 --> 01:21:05.795
<v Speaker 1>then it does this actually doesn't matter what

01:21:05.795 --> 01:21:07.875
<v Speaker 1>profile you call it because we're never going

01:21:07.875 --> 01:21:10.355
<v Speaker 1>to specify that profile. In this case, we're

01:21:10.355 --> 01:21:12.675
<v Speaker 1>only gonna run that particular

01:21:12.755 --> 01:21:15.600
<v Speaker 1>service by name when we wanna do something.

01:21:15.600 --> 01:21:17.280
<v Speaker 1>So you might have one that says schema

01:21:17.280 --> 01:21:18.400
<v Speaker 1>update and

01:21:18.560 --> 01:21:20.640
<v Speaker 1>another service here that says apt get update

01:21:20.640 --> 01:21:22.800
<v Speaker 1>or something. And it just it saves you

01:21:22.800 --> 01:21:24.719
<v Speaker 1>keystrokes, and it honestly, what it will do

01:21:24.719 --> 01:21:26.320
<v Speaker 1>for your dev team is create a standard

01:21:26.320 --> 01:21:28.325
<v Speaker 1>around how they do these things.

01:21:28.805 --> 01:21:30.965
<v Speaker 1>And you can even because you can sort

01:21:30.965 --> 01:21:33.285
<v Speaker 1>of make this command really ugly, you can

01:21:33.285 --> 01:21:34.965
<v Speaker 1>avoid shell scripts here as long as you

01:21:34.965 --> 01:21:37.205
<v Speaker 1>don't have too much complexity by just doing

01:21:37.205 --> 01:21:38.885
<v Speaker 1>it in the YAML. And now your YAML

01:21:38.885 --> 01:21:40.085
<v Speaker 1>becomes that single

01:21:40.940 --> 01:21:42.540
<v Speaker 1>make file universal

01:21:42.540 --> 01:21:45.260
<v Speaker 1>automation tool for local dev. Okay. So just

01:21:45.260 --> 01:21:47.500
<v Speaker 0>to clarify, like, the existence of the profile

01:21:47.500 --> 01:21:49.500
<v Speaker 0>is key to move it from the default

01:21:49.500 --> 01:21:50.940
<v Speaker 0>profile. I mean, and if you run a

01:21:50.940 --> 01:21:52.940
<v Speaker 0>Docker Compose up right now, we will not

01:21:52.940 --> 01:21:53.580
<v Speaker 0>get an update.

01:21:55.675 --> 01:21:56.555
<v Speaker 0>Is that correct?

01:21:57.435 --> 01:21:59.675
<v Speaker 1>Say that again. If we run Docker Compose

01:21:59.675 --> 01:22:02.795
<v Speaker 0>up, we shouldn't see the update container run.

01:22:03.595 --> 01:22:05.835
<v Speaker 0>Right. Because the existence of the profile list

01:22:05.835 --> 01:22:07.675
<v Speaker 0>means that it's removed from, like, any sort

01:22:07.675 --> 01:22:09.035
<v Speaker 0>of default profile context.

01:22:09.820 --> 01:22:11.260
<v Speaker 0>And we also did get a comment from

01:22:11.260 --> 01:22:13.100
<v Speaker 0>in the chat saying that you can use

01:22:13.100 --> 01:22:16.460
<v Speaker 0>Compose underscore profiles environment variable.

01:22:18.220 --> 01:22:20.460
<v Speaker 1>He's always adding value to my streams.

01:22:22.745 --> 01:22:23.465
<v Speaker 1>Thanks, man. You're my So

01:22:27.385 --> 01:22:30.025
<v Speaker 1>that's a great that's a great point. You

01:22:30.025 --> 01:22:32.824
<v Speaker 1>might even have some developer documentation that says,

01:22:33.065 --> 01:22:34.345
<v Speaker 1>if you're on this team or if you're

01:22:34.345 --> 01:22:34.905
<v Speaker 1>working on this,

01:22:35.730 --> 01:22:37.650
<v Speaker 1>just set this profile value and then all

01:22:37.650 --> 01:22:39.010
<v Speaker 1>things will be fine. Right?

01:22:39.970 --> 01:22:41.650
<v Speaker 1>I'm

01:22:41.730 --> 01:22:43.170
<v Speaker 1>assuming you can use dot ENV for that

01:22:43.170 --> 01:22:45.490
<v Speaker 1>or well, wait. Dot ENV goes into the

01:22:45.490 --> 01:22:47.330
<v Speaker 1>Compose file. It's not used by the Compose

01:22:47.330 --> 01:22:47.890
<v Speaker 1>CLI.

01:22:48.555 --> 01:22:50.395
<v Speaker 1>Not sure if that's true. Anyway,

01:22:50.795 --> 01:22:53.515
<v Speaker 1>Compose can consume a dot ENV file if

01:22:53.515 --> 01:22:55.275
<v Speaker 1>you wanna set environment variables there so you

01:22:55.275 --> 01:22:56.715
<v Speaker 1>don't have to remember every time in your

01:22:56.715 --> 01:22:58.155
<v Speaker 1>shell to set it. But,

01:22:59.595 --> 01:23:01.595
<v Speaker 1>yeah, in fact, there's a whole webpage on

01:23:02.120 --> 01:23:04.760
<v Speaker 1>environment variables that the Docker Compose command line

01:23:04.760 --> 01:23:07.000
<v Speaker 1>can accept, including the profile,

01:23:07.800 --> 01:23:09.720
<v Speaker 1>the Docker engine to connect to, like all

01:23:09.960 --> 01:23:11.080
<v Speaker 1>there's a lot of things you can do

01:23:11.080 --> 01:23:15.175
<v Speaker 1>there and, yeah, Compose Profiles. Great tip. Awesome.

01:23:15.335 --> 01:23:17.895
<v Speaker 0>Yeah. Those profiles are a long overdue feature

01:23:17.895 --> 01:23:20.295
<v Speaker 0>that would just remove an entire class of

01:23:20.295 --> 01:23:21.735
<v Speaker 0>makefails that I've been adding to all my

01:23:21.735 --> 01:23:23.335
<v Speaker 0>projects over the years. Like, they can just

01:23:23.335 --> 01:23:25.575
<v Speaker 0>disappear now because I can have profiles for

01:23:25.575 --> 01:23:28.579
<v Speaker 0>one off tasks and different sets of containers

01:23:29.139 --> 01:23:30.739
<v Speaker 0>that I need for different purposes.

01:23:30.900 --> 01:23:32.900
<v Speaker 0>Particularly CI is a really good one where

01:23:32.900 --> 01:23:35.059
<v Speaker 0>I may wanna run different sets of tests

01:23:35.540 --> 01:23:37.139
<v Speaker 0>and use profiles to be able to kinda

01:23:37.139 --> 01:23:39.780
<v Speaker 0>orchestrate them in a pretty clean way. So

01:23:40.579 --> 01:23:41.380
<v Speaker 1>Yeah. And

01:23:41.725 --> 01:23:43.645
<v Speaker 1>if someone's thinking about, well, when can I

01:23:43.645 --> 01:23:44.764
<v Speaker 1>use this? Because,

01:23:45.245 --> 01:23:47.645
<v Speaker 1>you know, RC, it's it's Release Client, right,

01:23:47.645 --> 01:23:50.284
<v Speaker 1>so this new tool isn't truly GA,

01:23:52.364 --> 01:23:54.205
<v Speaker 1>you can still do all of this with

01:23:54.205 --> 01:23:55.085
<v Speaker 1>the old

01:23:55.470 --> 01:23:56.750
<v Speaker 1>I may not be speaking out of turn,

01:23:56.750 --> 01:23:58.670
<v Speaker 1>but if I do Docker dash Compose

01:24:01.950 --> 01:24:04.429
<v Speaker 1>because the old Compose tool

01:24:04.989 --> 01:24:05.869
<v Speaker 1>uses

01:24:07.485 --> 01:24:09.324
<v Speaker 0>oh, no. It's not profile.

01:24:09.725 --> 01:24:12.125
<v Speaker 1>Oh, there it is. It's

01:24:12.125 --> 01:24:13.645
<v Speaker 1>not in alphabetical order. Because

01:24:14.445 --> 01:24:15.485
<v Speaker 1>what I was getting ready to say is

01:24:15.485 --> 01:24:18.765
<v Speaker 1>that the profile is a Compose spec feature,

01:24:19.085 --> 01:24:21.349
<v Speaker 1>not a well, it's technically a CLI feature

01:24:21.349 --> 01:24:23.110
<v Speaker 1>combined with this spec feature, you could argue

01:24:23.110 --> 01:24:24.550
<v Speaker 1>it either way. But what I was gonna

01:24:24.550 --> 01:24:26.230
<v Speaker 1>say is that the old I believe that

01:24:26.230 --> 01:24:27.669
<v Speaker 1>the old Compose

01:24:27.750 --> 01:24:29.510
<v Speaker 1>traditional Docker

01:24:29.510 --> 01:24:31.269
<v Speaker 1>Compose traditional tool,

01:24:32.070 --> 01:24:34.630
<v Speaker 1>I believe that that uses and supports this

01:24:34.630 --> 01:24:37.605
<v Speaker 1>profile feature, and they I think they've had

01:24:37.605 --> 01:24:39.445
<v Speaker 1>that for over a year. If we go

01:24:39.445 --> 01:24:42.645
<v Speaker 1>back in the releases of the Compose

01:24:42.645 --> 01:24:43.605
<v Speaker 1>Everybody Knows,

01:24:45.125 --> 01:24:47.445
<v Speaker 1>they converted to the they updated

01:24:47.445 --> 01:24:50.565
<v Speaker 1>to the Compose spec as their file format

01:24:51.290 --> 01:24:52.890
<v Speaker 1>at least over a year ago.

01:24:53.210 --> 01:24:56.090
<v Speaker 1>And so those of you that are not

01:24:56.090 --> 01:24:58.090
<v Speaker 1>yet ready to either run a release client

01:24:58.090 --> 01:25:00.250
<v Speaker 1>or you maybe don't have Docker Desktop and

01:25:00.250 --> 01:25:02.330
<v Speaker 1>you don't wanna use this release client tool

01:25:02.330 --> 01:25:04.810
<v Speaker 1>yet because you're worried about bugs or whatever,

01:25:06.535 --> 01:25:08.135
<v Speaker 1>I would say, you know, the Compose you

01:25:08.135 --> 01:25:09.255
<v Speaker 1>have now, as long as it's up to

01:25:09.255 --> 01:25:10.215
<v Speaker 1>date, supports

01:25:11.015 --> 01:25:12.775
<v Speaker 1>a lot of these things. What it doesn't

01:25:12.775 --> 01:25:16.215
<v Speaker 1>support is some of the new command line,

01:25:19.820 --> 01:25:22.300
<v Speaker 1>like, l s command, right, the new the

01:25:22.300 --> 01:25:23.660
<v Speaker 1>new by the way, we can we can

01:25:23.660 --> 01:25:24.780
<v Speaker 1>actually do that because now that we have

01:25:24.780 --> 01:25:25.500
<v Speaker 1>a project.

01:25:28.380 --> 01:25:30.380
<v Speaker 1>You'll you'll see that it it would, yeah,

01:25:30.380 --> 01:25:32.300
<v Speaker 1>it would list and this is across my

01:25:32.300 --> 01:25:34.620
<v Speaker 1>entire daemon, right, like I was saying. So

01:25:34.235 --> 01:25:36.074
<v Speaker 1>if it's five other if you got five

01:25:36.074 --> 01:25:37.675
<v Speaker 1>other directories where you're running stuff, you'll see

01:25:37.675 --> 01:25:39.514
<v Speaker 1>all of them listed by their project name.

01:25:39.514 --> 01:25:40.794
<v Speaker 1>If I were to do

01:25:41.514 --> 01:25:44.155
<v Speaker 1>a Docker since we didn't do any ports,

01:25:44.155 --> 01:25:46.155
<v Speaker 1>this actually should work. If I do a

01:25:46.155 --> 01:25:47.034
<v Speaker 1>Docker Compose,

01:25:55.830 --> 01:25:56.870
<v Speaker 1>project? No.

01:26:00.310 --> 01:26:01.030
<v Speaker 1>Project name?

01:26:02.165 --> 01:26:04.325
<v Speaker 1>Project name. It's also dash p, but I

01:26:04.325 --> 01:26:04.965
<v Speaker 1>like the

01:26:05.765 --> 01:26:08.085
<v Speaker 1>name in there for everybody so they know

01:26:08.085 --> 01:26:10.005
<v Speaker 1>what I'm doing. So I just spun up

01:26:10.005 --> 01:26:11.605
<v Speaker 1>the whole state same thing that we just

01:26:11.605 --> 01:26:13.205
<v Speaker 1>did in a duplicate

01:26:14.005 --> 01:26:16.485
<v Speaker 1>environment, but it's going if I had ports

01:26:16.485 --> 01:26:18.300
<v Speaker 1>assigned, it it it would conflict, but we

01:26:18.300 --> 01:26:19.420
<v Speaker 1>don't have ports right now. So now I

01:26:19.420 --> 01:26:21.340
<v Speaker 1>can do a Docker Compose LS and we

01:26:21.340 --> 01:26:22.699
<v Speaker 1>can see both of those running.

01:26:23.260 --> 01:26:24.380
<v Speaker 0>Yeah. I think we need to open an

01:26:24.380 --> 01:26:26.460
<v Speaker 0>issue against the Compose CLI. So does it

01:26:26.460 --> 01:26:29.515
<v Speaker 0>list the directory, the Compose files in? Because

01:26:29.595 --> 01:26:31.515
<v Speaker 0>Oh. Because that's just two projects for me

01:26:31.515 --> 01:26:32.635
<v Speaker 0>and I just have no idea where those

01:26:32.635 --> 01:26:34.795
<v Speaker 0>lived. I would Yeah. Or like yeah. Like

01:26:34.795 --> 01:26:37.035
<v Speaker 1>the the either relative path or these maybe

01:26:37.035 --> 01:26:38.555
<v Speaker 1>just the full path to where to the

01:26:38.555 --> 01:26:40.315
<v Speaker 1>Compose file that it used for that project.

01:26:40.315 --> 01:26:42.235
<v Speaker 1>Right? Yeah. Because because right that's that's the

01:26:42.235 --> 01:26:43.595
<v Speaker 1>problem right now is

01:26:45.150 --> 01:26:46.989
<v Speaker 0>come from. Yeah. Yeah.

01:26:47.310 --> 01:26:48.670
<v Speaker 1>Because I customize it. Now, let me go

01:26:48.750 --> 01:26:50.989
<v Speaker 1>let me just real quick off screen look

01:26:50.989 --> 01:26:52.750
<v Speaker 1>at the Docker dashboard and see if it

01:26:52.750 --> 01:26:53.469
<v Speaker 1>actually

01:26:54.430 --> 01:26:55.790
<v Speaker 1>because they've been taking a lot of feedback

01:26:55.790 --> 01:26:57.390
<v Speaker 1>on the GUI as well, and those of

01:26:57.390 --> 01:26:58.830
<v Speaker 1>us that have been trying to use it

01:26:59.075 --> 01:27:01.315
<v Speaker 1>are saying, hey. We need this. We need

01:27:01.315 --> 01:27:01.875
<v Speaker 1>that.

01:27:03.555 --> 01:27:06.515
<v Speaker 1>So, no, I don't see it showing me

01:27:06.515 --> 01:27:08.915
<v Speaker 1>an indication of which Compose file. So that's

01:27:08.915 --> 01:27:09.795
<v Speaker 1>a great idea.

01:27:14.915 --> 01:27:16.400
<v Speaker 1>I wouldn't be surprised if that was already

01:27:16.400 --> 01:27:17.199
<v Speaker 1>in there.

01:27:18.159 --> 01:27:20.239
<v Speaker 1>Or almost like Docker Compose

01:27:20.480 --> 01:27:21.280
<v Speaker 1>info,

01:27:22.000 --> 01:27:24.079
<v Speaker 1>right, that does sort of investigation.

01:27:26.000 --> 01:27:28.880
<v Speaker 1>Oh, you know what? I wonder if

01:27:30.824 --> 01:27:32.824
<v Speaker 1>convert I wonder if convert lists it.

01:27:33.625 --> 01:27:35.304
<v Speaker 1>Convert is a little bit of a new

01:27:35.304 --> 01:27:35.864
<v Speaker 1>thing.

01:27:38.105 --> 01:27:39.144
<v Speaker 1>No. It doesn't.

01:27:39.704 --> 01:27:41.465
<v Speaker 1>Convert is a a kind of a new

01:27:41.465 --> 01:27:41.784
<v Speaker 1>command.

01:27:43.200 --> 01:27:45.520
<v Speaker 1>Basically, what it does is it ingests whatever

01:27:45.520 --> 01:27:47.360
<v Speaker 1>you're giving it and then spits out a

01:27:47.360 --> 01:27:48.320
<v Speaker 1>consolidated

01:27:49.040 --> 01:27:51.840
<v Speaker 1>YAML of what it's going to use.

01:27:52.480 --> 01:27:55.280
<v Speaker 1>So, like, for example, I don't specify a

01:27:55.280 --> 01:27:56.800
<v Speaker 1>network in our YAML because I just use

01:27:56.800 --> 01:27:58.935
<v Speaker 1>the default, but this is literal.

01:27:59.255 --> 01:28:01.255
<v Speaker 1>Yeah. So this is kind of like

01:28:03.975 --> 01:28:06.535
<v Speaker 1>what Docker Docker Compose

01:28:08.375 --> 01:28:09.255
<v Speaker 1>config,

01:28:09.255 --> 01:28:10.535
<v Speaker 1>I think, used to be. So if we

01:28:10.535 --> 01:28:13.255
<v Speaker 1>did Docker dash Compose

01:28:12.590 --> 01:28:14.510
<v Speaker 1>config, one of the things that it would

01:28:14.510 --> 01:28:14.989
<v Speaker 1>do

01:28:15.389 --> 01:28:17.149
<v Speaker 1>is it would spit out

01:28:17.869 --> 01:28:19.469
<v Speaker 1>oh, and you see how it it automatically,

01:28:19.469 --> 01:28:21.550
<v Speaker 1>in that old command line, it would spit

01:28:21.550 --> 01:28:23.150
<v Speaker 1>out a version. It would assume version three

01:28:23.150 --> 01:28:24.750
<v Speaker 1>dot nine the latest because I didn't specify

01:28:24.750 --> 01:28:24.989
<v Speaker 1>one.

01:28:26.905 --> 01:28:28.745
<v Speaker 1>So it's a little bit like that old

01:28:28.745 --> 01:28:29.305
<v Speaker 1>tool,

01:28:29.705 --> 01:28:30.265
<v Speaker 1>but

01:28:30.745 --> 01:28:33.385
<v Speaker 1>it also has other options that are interesting.

01:28:34.265 --> 01:28:36.025
<v Speaker 1>So if you look at the help of

01:28:36.025 --> 01:28:36.505
<v Speaker 1>it,

01:28:36.905 --> 01:28:39.065
<v Speaker 1>it will help you list out things in

01:28:39.065 --> 01:28:40.105
<v Speaker 1>a little bit different format.

01:28:40.590 --> 01:28:42.429
<v Speaker 1>It's a it's a little bit weird to

01:28:42.429 --> 01:28:43.949
<v Speaker 1>use, but just if you just bear with

01:28:43.949 --> 01:28:47.309
<v Speaker 1>me for a second. Docker Compose convert services

01:28:47.310 --> 01:28:49.229
<v Speaker 1>will just list my services.

01:28:49.389 --> 01:28:52.349
<v Speaker 1>Docker Compose can convert volumes, which I don't

01:28:52.349 --> 01:28:52.750
<v Speaker 1>have any.

01:28:54.915 --> 01:28:57.074
<v Speaker 1>So if I do profiles

01:28:59.075 --> 01:29:02.035
<v Speaker 1>so this might be a part of not

01:29:02.035 --> 01:29:03.715
<v Speaker 1>that we're trying to run Bash scripts here,

01:29:03.715 --> 01:29:05.395
<v Speaker 1>but if you wanted to wrap this in

01:29:05.395 --> 01:29:06.355
<v Speaker 1>other commands,

01:29:06.515 --> 01:29:08.355
<v Speaker 1>this is kinda one of those things where

01:29:09.350 --> 01:29:11.270
<v Speaker 1>this would be handy to just spit out

01:29:11.270 --> 01:29:13.429
<v Speaker 1>the information I need in order to form,

01:29:13.750 --> 01:29:15.990
<v Speaker 1>an automated way, other Docker Compose commands. So

01:29:15.990 --> 01:29:17.989
<v Speaker 1>maybe if you're using Docker Compose in CI

01:29:18.070 --> 01:29:19.110
<v Speaker 1>and you wanna

01:29:19.590 --> 01:29:20.470
<v Speaker 1>you wanna find

01:29:21.005 --> 01:29:22.844
<v Speaker 1>all the services and then check them all

01:29:22.844 --> 01:29:25.165
<v Speaker 1>or do something like that in an automated

01:29:25.165 --> 01:29:27.164
<v Speaker 1>way, you could use these as automated

01:29:28.204 --> 01:29:30.445
<v Speaker 1>responses in command lines. But that's that's really

01:29:30.445 --> 01:29:31.645
<v Speaker 1>the only reason I can think of using

01:29:31.645 --> 01:29:34.045
<v Speaker 1>it that way. But wonder if the Compose

01:29:34.045 --> 01:29:36.364
<v Speaker 0>LS can't list the directories because, I mean,

01:29:36.364 --> 01:29:38.920
<v Speaker 0>there's no primitive of Compose project, right? I

01:29:38.920 --> 01:29:40.600
<v Speaker 0>mean, maybe it's just parsing the names of

01:29:40.600 --> 01:29:41.960
<v Speaker 0>the containers and going, you look like a

01:29:41.960 --> 01:29:44.280
<v Speaker 0>Compose project, and that's all it really knows.

01:29:45.000 --> 01:29:46.360
<v Speaker 1>Right. True. Because a lot of this is

01:29:46.360 --> 01:29:48.920
<v Speaker 1>dealing with labels, right? So if

01:29:54.545 --> 01:29:55.905
<v Speaker 1>oh, well, I think I have to do

01:29:57.265 --> 01:29:59.025
<v Speaker 0>You may have to do a container inspect

01:29:59.025 --> 01:29:59.824
<v Speaker 0>or something. Yeah.

01:30:01.825 --> 01:30:03.505
<v Speaker 1>A lot of people there's not actually a

01:30:03.505 --> 01:30:05.400
<v Speaker 1>lot of magic to Compose, really. It's just

01:30:05.400 --> 01:30:06.840
<v Speaker 1>really talking to the Docker command line or

01:30:06.840 --> 01:30:08.440
<v Speaker 1>Docker c l not to the CLI, but

01:30:08.440 --> 01:30:10.520
<v Speaker 1>the to the API, the Docker engine,

01:30:10.840 --> 01:30:11.480
<v Speaker 1>and

01:30:15.080 --> 01:30:16.360
<v Speaker 1>adding labels

01:30:16.680 --> 01:30:18.760
<v Speaker 1>for all of the things it needs to

01:30:18.760 --> 01:30:20.280
<v Speaker 1>do to keep track of.

01:30:21.055 --> 01:30:23.775
<v Speaker 1>So you will see Rawkode. There we go.

01:30:24.415 --> 01:30:25.455
<v Speaker 0>Right. Yeah.

01:30:25.695 --> 01:30:27.135
<v Speaker 1>And that is actually the

01:30:27.615 --> 01:30:29.055
<v Speaker 1>and I think I mentioned this earlier, but

01:30:29.055 --> 01:30:31.695
<v Speaker 1>I wanna reiterate, you can use both command

01:30:31.695 --> 01:30:33.535
<v Speaker 1>lines back and forth. They're designed to be

01:30:33.535 --> 01:30:34.895
<v Speaker 1>compatible with each other, so you can use

01:30:34.895 --> 01:30:37.060
<v Speaker 1>a Docker Compose up with the dashed old

01:30:37.060 --> 01:30:38.580
<v Speaker 1>version and then a Docker Compose down with

01:30:38.580 --> 01:30:39.460
<v Speaker 1>the new version,

01:30:39.860 --> 01:30:40.980
<v Speaker 1>so they're completely

01:30:41.700 --> 01:30:44.420
<v Speaker 1>compatible with each other because they're really just

01:30:44.420 --> 01:30:47.060
<v Speaker 1>using, for the most part, these same labels

01:30:47.380 --> 01:30:48.260
<v Speaker 1>to identify

01:30:48.925 --> 01:30:51.645
<v Speaker 1>the services and the volumes and networks and

01:30:51.645 --> 01:30:53.245
<v Speaker 1>all that stuff that it needs to know.

01:30:53.245 --> 01:30:55.325
<v Speaker 1>So it's not like there's a database somewhere

01:30:55.325 --> 01:30:57.005
<v Speaker 1>or some Compose

01:30:58.045 --> 01:31:00.605
<v Speaker 1>API that's running as a daemon, and

01:31:01.179 --> 01:31:04.300
<v Speaker 1>storage inside of Docker, really, to keep Compose

01:31:04.300 --> 01:31:06.219
<v Speaker 1>specific things. So it just uses the same

01:31:06.219 --> 01:31:08.219
<v Speaker 1>labels like we would use in a Kubernetes

01:31:08.219 --> 01:31:09.179
<v Speaker 1>cluster, really,

01:31:10.619 --> 01:31:12.059
<v Speaker 1>to do that work. If you're a Swarm

01:31:12.059 --> 01:31:14.619
<v Speaker 1>of fans, Swarm actually uses, for the stacks,

01:31:15.635 --> 01:31:18.755
<v Speaker 1>that stack feature really only uses service labels

01:31:18.755 --> 01:31:19.875
<v Speaker 1>to organize

01:31:20.355 --> 01:31:21.635
<v Speaker 1>all the objects

01:31:21.955 --> 01:31:24.595
<v Speaker 1>for stacks. So that's actually how Swarm works

01:31:24.595 --> 01:31:25.955
<v Speaker 1>as well. It uses

01:31:26.435 --> 01:31:28.675
<v Speaker 1>different labels. These are actually container labels. In

01:31:28.675 --> 01:31:29.635
<v Speaker 1>Swarm, it uses

01:31:30.610 --> 01:31:33.410
<v Speaker 1>different object labels for for the stack to

01:31:33.410 --> 01:31:35.650
<v Speaker 1>work. But anyway, it's all just metadata. Metadata

01:31:35.650 --> 01:31:36.450
<v Speaker 1>all the way down.

01:31:38.290 --> 01:31:39.810
<v Speaker 1>Alright. What else we got, people?

01:31:40.370 --> 01:31:42.210
<v Speaker 1>Someone else about security. That's a whole separate

01:31:42.210 --> 01:31:43.810
<v Speaker 1>topic. Yeah. Well, you just asked if we

01:31:43.810 --> 01:31:45.570
<v Speaker 0>covered any security practices

01:31:45.665 --> 01:31:47.905
<v Speaker 0>here. I mean, does security come into play?

01:31:47.905 --> 01:31:49.905
<v Speaker 0>I mean, we're still saying Compose is a

01:31:49.905 --> 01:31:53.184
<v Speaker 0>tool for local development rather than production.

01:31:53.585 --> 01:31:54.065
<v Speaker 0>So

01:31:54.625 --> 01:31:56.705
<v Speaker 0>do we leave security at at the other

01:31:56.705 --> 01:31:58.850
<v Speaker 0>side of the door for that? Yeah. Because

01:31:58.850 --> 01:32:00.370
<v Speaker 1>because, again, yeah, like you're saying, like, I

01:32:00.370 --> 01:32:02.130
<v Speaker 1>don't advocate even though you can technically use

01:32:02.130 --> 01:32:03.889
<v Speaker 1>Compose on a server for production,

01:32:04.850 --> 01:32:06.530
<v Speaker 1>I don't I don't ever really advocate its

01:32:06.530 --> 01:32:07.969
<v Speaker 1>use. I feel like in

01:32:08.690 --> 01:32:10.450
<v Speaker 1>most cases, we've all moved beyond it.

01:32:11.725 --> 01:32:13.885
<v Speaker 1>That being said, with the new Docker Compose

01:32:13.885 --> 01:32:15.565
<v Speaker 1>deploy, which we didn't even talk about today,

01:32:15.565 --> 01:32:17.325
<v Speaker 1>but, you know, maybe some other day,

01:32:17.885 --> 01:32:19.405
<v Speaker 1>have you had people on your show before

01:32:19.405 --> 01:32:21.805
<v Speaker 1>to talk about the deploy, the AC the

01:32:21.805 --> 01:32:23.805
<v Speaker 1>ECS and ACI stuff? No. I know you've

01:32:23.805 --> 01:32:25.245
<v Speaker 1>had some Docker people on recently, so I

01:32:25.245 --> 01:32:25.885
<v Speaker 1>didn't know if you

01:32:28.210 --> 01:32:29.809
<v Speaker 1>because Docker Compose

01:32:34.690 --> 01:32:36.370
<v Speaker 1>there's not a deploy. Right? Yeah. No. It's

01:32:36.449 --> 01:32:38.130
<v Speaker 1>they haven't changed it. Alright. Haven't used this

01:32:38.130 --> 01:32:39.810
<v Speaker 1>in a few months. So Docker Compose up,

01:32:40.295 --> 01:32:42.375
<v Speaker 1>and I can I can point it at

01:32:42.375 --> 01:32:42.934
<v Speaker 1>a

01:32:43.415 --> 01:32:46.695
<v Speaker 1>ECS cluster or an ACI instance or other

01:32:47.175 --> 01:32:47.974
<v Speaker 1>other

01:32:48.215 --> 01:32:49.494
<v Speaker 1>types of

01:32:50.614 --> 01:32:51.494
<v Speaker 1>Docker

01:32:51.494 --> 01:32:52.855
<v Speaker 1>plug

01:32:52.440 --> 01:32:53.880
<v Speaker 1>connections? I don't know how you should describe

01:32:53.880 --> 01:32:56.120
<v Speaker 1>it. Does that coupling of deployment with, like,

01:32:56.120 --> 01:32:58.199
<v Speaker 0>your database and your app not give you

01:32:58.199 --> 01:33:00.680
<v Speaker 0>the fear, though? Like, I I I can't

01:33:00.680 --> 01:33:02.040
<v Speaker 0>see a world where I'd want to use

01:33:02.040 --> 01:33:03.639
<v Speaker 0>that. I think that's where I get Well,

01:33:04.760 --> 01:33:06.680
<v Speaker 1>I think the argument that so the reason

01:33:06.680 --> 01:33:09.375
<v Speaker 1>that Docker's adding all these is that they

01:33:09.455 --> 01:33:11.375
<v Speaker 1>feel like there's still a really big gap,

01:33:11.775 --> 01:33:13.535
<v Speaker 1>and you'll see this with Docker Desktop with

01:33:13.535 --> 01:33:14.494
<v Speaker 1>the new dev

01:33:15.455 --> 01:33:16.895
<v Speaker 1>workspaces or dev

01:33:17.695 --> 01:33:18.975
<v Speaker 1>what are they called? Have to look it

01:33:18.975 --> 01:33:20.815
<v Speaker 1>up already. Dev environments is what they're calling

01:33:20.815 --> 01:33:24.160
<v Speaker 1>it, which, like, a different topic altogether. But

01:33:24.160 --> 01:33:25.760
<v Speaker 1>what we're seeing is that Docker is trying

01:33:25.760 --> 01:33:28.560
<v Speaker 1>to solve developer problems, not production problems. Right?

01:33:28.560 --> 01:33:31.120
<v Speaker 1>So I would argue that this Docker Compose

01:33:31.360 --> 01:33:34.400
<v Speaker 1>up towards ECS or ACI or, you know,

01:33:34.400 --> 01:33:35.600
<v Speaker 1>I've been asking them to do a Digital

01:33:35.600 --> 01:33:37.680
<v Speaker 1>Ocean one and

01:33:37.105 --> 01:33:39.505
<v Speaker 1>some of the other non major clouds.

01:33:40.145 --> 01:33:41.744
<v Speaker 1>Know that they would like to do a

01:33:44.625 --> 01:33:46.465
<v Speaker 1>Google one as well.

01:33:47.425 --> 01:33:50.304
<v Speaker 1>They argue that maybe this is really for

01:33:50.304 --> 01:33:52.449
<v Speaker 1>the one person shops, right, where you're just

01:33:52.449 --> 01:33:54.689
<v Speaker 1>like the solo DevOps person and you

01:33:55.170 --> 01:33:57.170
<v Speaker 1>simply can't use those other tools because of

01:33:57.170 --> 01:33:58.770
<v Speaker 1>their complexity and you don't have enough time,

01:33:58.770 --> 01:34:00.050
<v Speaker 1>and so this is good enough.

01:34:00.610 --> 01:34:01.090
<v Speaker 1>And

01:34:01.570 --> 01:34:03.570
<v Speaker 1>also, a lot of times, developers need to

01:34:03.570 --> 01:34:06.435
<v Speaker 1>share what they're working on or just literally

01:34:06.435 --> 01:34:08.115
<v Speaker 1>just test something on a server somewhere that's

01:34:08.115 --> 01:34:09.715
<v Speaker 1>outside their machine. I actually was just working

01:34:09.715 --> 01:34:10.915
<v Speaker 1>with a developer yesterday

01:34:11.075 --> 01:34:13.555
<v Speaker 1>that his he had a '20 '18 MacBook,

01:34:13.555 --> 01:34:15.875
<v Speaker 1>and he couldn't spin up in Docker locally

01:34:15.875 --> 01:34:16.835
<v Speaker 1>his the

01:34:17.490 --> 01:34:19.890
<v Speaker 1>the environment that he needed to test the

01:34:19.890 --> 01:34:21.650
<v Speaker 1>app because it required

01:34:21.650 --> 01:34:23.730
<v Speaker 1>16 gig of RAM for everything to work

01:34:23.890 --> 01:34:25.570
<v Speaker 1>and to run all the r specs because

01:34:25.570 --> 01:34:27.970
<v Speaker 1>there was, like, 90,000 r specs or something.

01:34:28.370 --> 01:34:28.610
<v Speaker 1>So

01:34:29.585 --> 01:34:31.425
<v Speaker 1>they needed a server to run it on,

01:34:31.425 --> 01:34:34.304
<v Speaker 1>and there's not really any deep, easy integration

01:34:34.304 --> 01:34:35.344
<v Speaker 1>in a lot of these tools to just

01:34:35.344 --> 01:34:36.625
<v Speaker 1>say, hey, create me an instance on the

01:34:36.625 --> 01:34:38.784
<v Speaker 1>cloud, put my stuff on it, run it

01:34:38.784 --> 01:34:40.705
<v Speaker 1>there for a minute. And I think that's

01:34:40.705 --> 01:34:42.784
<v Speaker 1>what they're doing. Now, will people use that

01:34:42.784 --> 01:34:44.145
<v Speaker 1>for production? Sure.

01:34:44.960 --> 01:34:47.600
<v Speaker 1>People always use dev tooling for production when

01:34:47.600 --> 01:34:49.280
<v Speaker 1>they shouldn't. But I think there's a I

01:34:49.280 --> 01:34:50.719
<v Speaker 1>think there's room, right? There's room for us

01:34:50.719 --> 01:34:52.719
<v Speaker 1>to have this tooling. What I do hope

01:34:52.719 --> 01:34:54.159
<v Speaker 1>is that they communicate

01:34:55.520 --> 01:34:56.640
<v Speaker 1>well about

01:34:57.475 --> 01:34:59.555
<v Speaker 1>the the goal and intent of these tools,

01:34:59.555 --> 01:35:01.475
<v Speaker 1>not, hey. Look. We have this new way

01:35:01.475 --> 01:35:03.155
<v Speaker 1>to deploy ECS. You should totally use this

01:35:03.155 --> 01:35:04.675
<v Speaker 1>all day for production. Right?

01:35:04.995 --> 01:35:07.155
<v Speaker 1>Because they don't always like, the messaging is

01:35:07.155 --> 01:35:09.155
<v Speaker 1>sometimes lost in, hey. Look at the new

01:35:09.155 --> 01:35:11.530
<v Speaker 1>thing we did, and people assume that you

01:35:11.530 --> 01:35:13.130
<v Speaker 1>say, oh, well, said ECS, so you must

01:35:13.130 --> 01:35:14.570
<v Speaker 1>mean your production workflows.

01:35:14.969 --> 01:35:16.489
<v Speaker 0>Yeah. I hadn't really thought about it through

01:35:16.489 --> 01:35:18.250
<v Speaker 0>that lens. But, you know, people if you're

01:35:18.250 --> 01:35:20.409
<v Speaker 0>using managed services for one from AWS and

01:35:20.409 --> 01:35:21.770
<v Speaker 0>you just need to get your dev environment

01:35:21.770 --> 01:35:23.770
<v Speaker 0>into that environment, then that's actually a really

01:35:23.770 --> 01:35:25.050
<v Speaker 0>good way of of doing it. And I

01:35:25.050 --> 01:35:26.835
<v Speaker 0>just hadn't really given that a lot of

01:35:26.835 --> 01:35:29.235
<v Speaker 0>thought. Yeah. But maybe that would work. I

01:35:29.235 --> 01:35:30.995
<v Speaker 0>mean, still a whole bunch of other concerns

01:35:30.995 --> 01:35:33.635
<v Speaker 0>around the authorization and the IAM policies to

01:35:33.635 --> 01:35:35.235
<v Speaker 0>speak to those managed overseas.

01:35:35.875 --> 01:35:38.035
<v Speaker 0>For a very crude development environment that's in

01:35:38.035 --> 01:35:40.115
<v Speaker 0>the cloud, yeah. Okay. Yeah. That would work.

01:35:40.115 --> 01:35:42.130
<v Speaker 1>Think for the same thing, like, the same

01:35:42.290 --> 01:35:43.570
<v Speaker 1>what was the same thing was happening with

01:35:43.570 --> 01:35:45.330
<v Speaker 1>Docker Machine. People were using Docker Machine to

01:35:45.330 --> 01:35:46.770
<v Speaker 1>spin up production servers.

01:35:47.010 --> 01:35:49.090
<v Speaker 1>And I and I probably was quoted,

01:35:49.490 --> 01:35:50.850
<v Speaker 1>and you probably could have found a video

01:35:50.850 --> 01:35:51.970
<v Speaker 1>of me from somewhere

01:35:52.290 --> 01:35:53.490
<v Speaker 1>circa 2018

01:35:53.490 --> 01:35:56.025
<v Speaker 1>saying, hey, look, because I appeal to the

01:35:56.025 --> 01:35:58.985
<v Speaker 1>solo DevOps, to the solo developer, right? Whenever

01:35:58.985 --> 01:36:00.425
<v Speaker 1>I do a talk at a big conference,

01:36:00.425 --> 01:36:01.465
<v Speaker 1>I always try to get a one of

01:36:01.465 --> 01:36:03.385
<v Speaker 1>the things I do survey is how many

01:36:03.385 --> 01:36:06.105
<v Speaker 1>people here are responsible for their DevOps, and

01:36:06.105 --> 01:36:06.985
<v Speaker 1>they're the only one

01:36:07.989 --> 01:36:10.070
<v Speaker 1>that is doing that in the team, essentially

01:36:10.070 --> 01:36:12.070
<v Speaker 1>what I call SoloDevOps.

01:36:12.310 --> 01:36:13.909
<v Speaker 1>A quarter of the room raises their hands,

01:36:13.909 --> 01:36:17.190
<v Speaker 1>right? So there's this huge need that's not

01:36:17.190 --> 01:36:19.510
<v Speaker 1>the majority, but an untapped need for

01:36:19.765 --> 01:36:21.765
<v Speaker 1>we don't need at scale. In fact, if

01:36:21.765 --> 01:36:23.364
<v Speaker 1>I were to put on a t shirt

01:36:23.445 --> 01:36:26.725
<v Speaker 1>from Pulp Fiction that says, say at scale

01:36:26.725 --> 01:36:29.445
<v Speaker 1>one more time, the the famous line

01:36:30.805 --> 01:36:33.205
<v Speaker 1>I'm forgetting his name now. Samuel L. Jackson's

01:36:33.205 --> 01:36:33.764
<v Speaker 1>character.

01:36:34.245 --> 01:36:34.645
<v Speaker 1>He says,

01:36:36.429 --> 01:36:38.270
<v Speaker 1>something one more time, and it's to say

01:36:38.270 --> 01:36:39.710
<v Speaker 1>at scale one more time on the Internet

01:36:39.710 --> 01:36:41.710
<v Speaker 1>because there's definitely a lot of tools out

01:36:41.710 --> 01:36:44.429
<v Speaker 1>there that are focused on large infrastructure,

01:36:44.429 --> 01:36:46.349
<v Speaker 1>hundreds or thousands of containers, but there are

01:36:46.349 --> 01:36:48.909
<v Speaker 1>definitely lots of teams where there's one person,

01:36:48.909 --> 01:36:49.550
<v Speaker 1>maybe two,

01:36:50.155 --> 01:36:53.195
<v Speaker 1>they need a dozen servers, maybe 20 servers,

01:36:53.195 --> 01:36:54.074
<v Speaker 1>and they just

01:36:54.875 --> 01:36:57.035
<v Speaker 1>don't need the inherent complexity that comes with

01:36:57.355 --> 01:36:59.275
<v Speaker 1>implementing Terraform, Ansible,

01:36:59.755 --> 01:37:03.035
<v Speaker 1>Argo CD, GitHub Actions, and this huge tech

01:37:03.035 --> 01:37:03.995
<v Speaker 1>stack for

01:37:04.230 --> 01:37:06.389
<v Speaker 1>I want to run some containers on servers

01:37:06.390 --> 01:37:07.349
<v Speaker 1>for a while.

01:37:09.510 --> 01:37:11.510
<v Speaker 1>So I appeal to those people. Yeah.

01:37:12.550 --> 01:37:13.270
<v Speaker 0>Okay.

01:37:13.510 --> 01:37:14.790
<v Speaker 0>We've

01:37:14.790 --> 01:37:16.230
<v Speaker 0>ran a little bit over, so I'm gonna

01:37:16.230 --> 01:37:18.595
<v Speaker 0>pop us back over to here. Sorry. Do

01:37:18.595 --> 01:37:19.715
<v Speaker 0>you have anything else you want to shore

01:37:19.715 --> 01:37:20.435
<v Speaker 0>shore?

01:37:20.675 --> 01:37:22.195
<v Speaker 1>No. That's it. I mean, we could talk

01:37:22.195 --> 01:37:23.475
<v Speaker 1>forever, so we have to cut it off

01:37:23.475 --> 01:37:25.555
<v Speaker 1>at some point. Yeah. I'll leave you with

01:37:25.555 --> 01:37:26.995
<v Speaker 0>the I'm here to answer questions, so if

01:37:26.995 --> 01:37:28.915
<v Speaker 1>people have more questions, you know. Yeah. We'll

01:37:28.915 --> 01:37:30.675
<v Speaker 0>we'll take one more question. If any more

01:37:30.675 --> 01:37:31.875
<v Speaker 0>slip in, we'll do our best to answer

01:37:31.875 --> 01:37:32.595
<v Speaker 0>them. But

01:37:34.400 --> 01:37:36.719
<v Speaker 0>asked, is this still in beta, the ECS

01:37:36.719 --> 01:37:37.360
<v Speaker 0>thing?

01:37:37.520 --> 01:37:39.119
<v Speaker 0>Because he says that he has to enable

01:37:39.119 --> 01:37:41.360
<v Speaker 0>some sort of beta Docker thingy to get

01:37:41.360 --> 01:37:43.920
<v Speaker 0>that to work. Is that the case?

01:37:44.719 --> 01:37:46.080
<v Speaker 1>I don't know. If Sujay's still in the

01:37:46.080 --> 01:37:47.840
<v Speaker 1>chat, he might know more.

01:37:48.325 --> 01:37:49.685
<v Speaker 1>I would say,

01:37:50.325 --> 01:37:51.925
<v Speaker 1>as far as I know,

01:37:52.405 --> 01:37:53.525
<v Speaker 1>it is still

01:37:54.645 --> 01:37:55.925
<v Speaker 1>pre general

01:37:56.325 --> 01:37:57.205
<v Speaker 1>availability,

01:37:57.205 --> 01:37:58.645
<v Speaker 1>pre GA, prerelease.

01:37:59.765 --> 01:38:00.645
<v Speaker 1>I am

01:38:00.965 --> 01:38:02.725
<v Speaker 1>assuming that they're tying the

01:38:03.340 --> 01:38:05.820
<v Speaker 1>version, because right now we're on, like, RC

01:38:05.820 --> 01:38:08.140
<v Speaker 1>something of the actual Docker Compose command line

01:38:08.140 --> 01:38:10.620
<v Speaker 1>tool, and that is that plugin is what's

01:38:10.620 --> 01:38:13.900
<v Speaker 1>needed in order to deploy to these contexts.

01:38:13.900 --> 01:38:15.100
<v Speaker 1>And we didn't get into context, but that's

01:38:15.100 --> 01:38:15.740
<v Speaker 1>what we're talking

01:38:16.255 --> 01:38:18.415
<v Speaker 1>You change your context from your local Docker

01:38:18.415 --> 01:38:21.775
<v Speaker 1>engine to ECS or to ACI,

01:38:22.175 --> 01:38:24.015
<v Speaker 1>and then you can use Docker Compose up

01:38:24.015 --> 01:38:25.614
<v Speaker 1>to deploy to those contexts,

01:38:25.935 --> 01:38:27.935
<v Speaker 1>similar to Kubernetes Kube control context.

01:38:28.590 --> 01:38:31.869
<v Speaker 1>And as I'm assuming that they're tying those

01:38:31.869 --> 01:38:33.469
<v Speaker 1>features to the

01:38:33.949 --> 01:38:36.510
<v Speaker 1>version of the Compose CLI since they're bundled

01:38:36.510 --> 01:38:38.429
<v Speaker 1>in with it. And since it is not

01:38:38.429 --> 01:38:40.270
<v Speaker 1>GA, I will assume that they are also

01:38:40.270 --> 01:38:42.269
<v Speaker 1>not GA. But that's a lot of assumptions.

01:38:42.350 --> 01:38:43.230
<v Speaker 1>Don't quote me on that.

01:38:44.645 --> 01:38:47.125
<v Speaker 0>Alright. Well, that was an awesome feature pad

01:38:47.125 --> 01:38:48.645
<v Speaker 0>session. It was really good to get a

01:38:48.645 --> 01:38:51.205
<v Speaker 0>look at that and just see how the

01:38:51.205 --> 01:38:53.844
<v Speaker 0>profiles work and see how cool that Compose

01:38:53.844 --> 01:38:55.525
<v Speaker 0>CLI is is coming along. I'm really excited

01:38:55.525 --> 01:38:57.445
<v Speaker 0>with that, and I'm looking forward to actually,

01:38:57.525 --> 01:38:58.900
<v Speaker 0>like I said, removing a whole bunch of

01:38:58.900 --> 01:39:00.420
<v Speaker 0>make files in Bash scripts. I have so

01:39:00.420 --> 01:39:02.420
<v Speaker 0>many of them scattered across so many projects

01:39:02.420 --> 01:39:04.179
<v Speaker 0>that that one simple

01:39:04.580 --> 01:39:08.180
<v Speaker 0>profile feature just removes all. That's really exciting

01:39:08.180 --> 01:39:09.380
<v Speaker 0>to me. It's

01:39:10.355 --> 01:39:12.035
<v Speaker 1>yeah. I have the same way in the

01:39:12.035 --> 01:39:13.555
<v Speaker 1>same way I was using something called Docker

01:39:13.555 --> 01:39:15.715
<v Speaker 1>app, which is really not anymore anymore a

01:39:15.715 --> 01:39:17.955
<v Speaker 1>thing. They're they're deprecating that as well. But

01:39:17.955 --> 01:39:19.795
<v Speaker 1>there was this idea for a while about

01:39:19.955 --> 01:39:20.915
<v Speaker 1>formalizing

01:39:20.915 --> 01:39:23.360
<v Speaker 1>a lot of the the tooling and versioning

01:39:23.360 --> 01:39:25.440
<v Speaker 1>around Compose files into something that was called

01:39:25.440 --> 01:39:27.840
<v Speaker 1>Docker App. And one the offshoots of that

01:39:27.840 --> 01:39:30.239
<v Speaker 1>is that it could kinda dynamically create

01:39:30.400 --> 01:39:33.040
<v Speaker 1>Compose files on the fly from other templates,

01:39:33.360 --> 01:39:35.920
<v Speaker 1>and this profile thing basically saves me from

01:39:35.920 --> 01:39:37.520
<v Speaker 1>all of that. It saves me from having

01:39:37.520 --> 01:39:37.760
<v Speaker 1>to

01:39:38.545 --> 01:39:40.064
<v Speaker 1>try to wrap around that.

01:39:41.264 --> 01:39:43.585
<v Speaker 1>Another Docker captain was actually working on all

01:39:43.585 --> 01:39:46.224
<v Speaker 1>of that stuff too, trying to formalize a

01:39:46.224 --> 01:39:47.664
<v Speaker 1>tool that would allow us to

01:39:48.465 --> 01:39:51.344
<v Speaker 1>basically solve the templating needs of complex teams

01:39:51.344 --> 01:39:53.425
<v Speaker 1>that need to use Compose for development environments,

01:39:53.600 --> 01:39:55.360
<v Speaker 1>but not always spin everything up all the

01:39:55.360 --> 01:39:58.160
<v Speaker 1>time. And, yeah, that profile feature, definitely. You

01:39:58.160 --> 01:39:59.600
<v Speaker 1>know, I'm sure there's more things we could

01:39:59.600 --> 01:40:00.400
<v Speaker 1>add to it,

01:40:01.200 --> 01:40:03.040
<v Speaker 1>but I think that really helps. I I

01:40:03.040 --> 01:40:04.320
<v Speaker 1>should do a plug for you and my

01:40:04.480 --> 01:40:05.600
<v Speaker 1>you and me as well. For those of

01:40:05.600 --> 01:40:06.640
<v Speaker 1>you that are in chat, if you didn't

01:40:06.640 --> 01:40:09.324
<v Speaker 1>get your questions answered, we both have Discords.

01:40:09.405 --> 01:40:11.885
<v Speaker 1>So, you know, I'm in his Discord. I

01:40:11.885 --> 01:40:13.324
<v Speaker 1>think he's in mine. I'm not sure.

01:40:13.725 --> 01:40:15.485
<v Speaker 1>So just find us in Discord if you

01:40:15.485 --> 01:40:17.005
<v Speaker 1>have questions later or on Twitter. We're both

01:40:17.005 --> 01:40:18.525
<v Speaker 1>on Twitter. If we don't get your questions

01:40:18.525 --> 01:40:20.445
<v Speaker 1>answered, don't worry. We're not going anywhere.

01:40:22.285 --> 01:40:22.925
<v Speaker 1>Because, you know,

01:40:24.000 --> 01:40:25.679
<v Speaker 1>we live on the Internet, so I'm I'm

01:40:25.679 --> 01:40:27.840
<v Speaker 1>available after this live show. Yeah. We're both

01:40:27.840 --> 01:40:29.920
<v Speaker 0>very active on Twitter. Our handles are on

01:40:29.920 --> 01:40:32.000
<v Speaker 0>the screen. We both do have Discords. We're

01:40:32.000 --> 01:40:33.520
<v Speaker 0>active there too. And in fact, we pulled

01:40:33.520 --> 01:40:34.960
<v Speaker 0>through a lot of your announcements into our

01:40:34.960 --> 01:40:36.000
<v Speaker 0>channel as well. So

01:40:37.005 --> 01:40:38.925
<v Speaker 0>sharing sharing the the love and the knowledge

01:40:38.925 --> 01:40:40.364
<v Speaker 0>as much as we can. So

01:40:41.245 --> 01:40:42.605
<v Speaker 0>alright, Brent. I to a I need to

01:40:42.605 --> 01:40:43.645
<v Speaker 1>have a zap for you. I need to

01:40:43.645 --> 01:40:45.165
<v Speaker 1>have a zap for you. I need to

01:40:45.165 --> 01:40:46.525
<v Speaker 1>figure that out later. Yeah. Because I'd love

01:40:46.525 --> 01:40:47.885
<v Speaker 1>to have that more of that stuff in

01:40:47.885 --> 01:40:49.005
<v Speaker 1>some of my Twitter

01:40:49.280 --> 01:40:51.040
<v Speaker 1>channels too, so we'll talk about that later.

01:40:51.040 --> 01:40:53.120
<v Speaker 0>Awesome. Well, thank you so much for joining

01:40:53.120 --> 01:40:55.600
<v Speaker 0>me today, for guiding us through this. Just

01:40:55.600 --> 01:40:57.920
<v Speaker 0>so much value in the conversation as well.

01:40:57.920 --> 01:41:00.240
<v Speaker 0>You just shared so much insights there about

01:41:00.240 --> 01:41:02.160
<v Speaker 0>how people are using this tool. Definitely go

01:41:02.160 --> 01:41:03.360
<v Speaker 0>check out Brett's courses.

01:41:04.325 --> 01:41:07.125
<v Speaker 0>Keep learning, and thank you again. Brett, have

01:41:07.125 --> 01:41:08.805
<v Speaker 0>a wonderful day, and I'll I'll see you

01:41:08.805 --> 01:41:09.364
<v Speaker 0>soon.

01:41:09.765 --> 01:41:10.725
<v Speaker 1>Yeah. See you all.
