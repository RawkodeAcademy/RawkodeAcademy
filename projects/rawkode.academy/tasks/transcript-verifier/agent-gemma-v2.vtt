WEBVTT

00:35:13.300 --> 00:35:14.800
<v Speaker 1>you can actually run it on your

00:35:14.800 --> 00:35:16.320
<v Speaker 1>own hardware. And the other is that

00:35:16.320 --> 00:35:18.320
<v Speaker 1>you can actually run it on your

00:35:18.320 --> 00:35:20.160
<v Speaker 1>own data. So you don't have to

00:35:20.160 --> 00:35:21.680
<v Speaker 1>worry about data privacy or data residency.

00:35:21.960 --> 00:35:23.760
<v Speaker 1>And so we're gonna support that. We're gonna

00:35:23.760 --> 00:35:25.360
<v Speaker 1>support Elasticsearch. We're gonna support a bunch

00:35:25.360 --> 00:35:27.160
<v Speaker 1>of other data sources. And we're gonna

00:35:27.160 --> 00:35:28.880
<v Speaker 1>let you run it on your own

00:35:28.880 --> 00:35:30.480
<v Speaker 1>hardware. So you can actually run it

00:35:30.480 --> 00:35:32.200
<v Speaker 1>on your own Kubernetes cluster.

00:35:32.520 --> 00:35:34.200
<v Speaker 1>And that's kind of the direction we're

00:35:34.200 --> 00:35:35.800
<v Speaker 1>heading.

00:35:36.200 --> 00:35:37.800
<v Speaker 0>That's awesome.

00:35:38.120 --> 00:35:39.640
<v Speaker 0>I think that's a really good direction.

00:35:40.120 --> 00:35:41.640
<v Speaker 0>I'm gonna stop there.

00:35:42.120 --> 00:35:43.640
<v Speaker 0>Thank you so much for your time.

00:35:44.120 --> 00:35:45.640
<v Speaker 0>It's been a pleasure.

00:35:46.120 --> 00:35:47.640
<v Speaker 1>Yeah. Thanks for having me.

00:35:48.120 --> 00:35:49.640
<v Speaker 1>It's been a lot of fun.

00:35:50.120 --> 00:35:51.640
<v Speaker 0>Alright.

00:35:52.120 --> 00:35:53.640
<v Speaker 0>I'll see you all next time.

00:35:54.120 --> 00:35:55.640
<v Speaker 0>Bye.

WEBVTT

00:35:13.619 --> 00:35:15.140
<v Speaker 1>you get access to much more data that

00:35:15.140 --> 00:35:17.220
<v Speaker 1>otherwise you would be crazy to send somewhere

00:35:17.220 --> 00:35:19.625
<v Speaker 1>else, like process exit events. You'd be a

00:35:19.625 --> 00:35:21.545
<v Speaker 1>crazy person to continuously

00:35:21.545 --> 00:35:23.145
<v Speaker 1>collect this data just in case you need

00:35:23.145 --> 00:35:24.984
<v Speaker 1>it because it's a lot. But when you

00:35:24.984 --> 00:35:27.625
<v Speaker 1>run the rule where the data exists, you

00:35:27.625 --> 00:35:29.224
<v Speaker 1>don't have to send it anywhere. Now that's

00:35:29.224 --> 00:35:31.865
<v Speaker 1>available to you as an input into a

00:35:31.865 --> 00:35:33.930
<v Speaker 1>rule, which is really cool. So that was

00:35:33.930 --> 00:35:35.610
<v Speaker 1>the main reason we did it, but the

00:35:35.610 --> 00:35:37.450
<v Speaker 1>nice side effect that you don't have to

00:35:37.450 --> 00:35:39.290
<v Speaker 1>ship all of this data somewhere else.

00:35:39.770 --> 00:35:42.090
<v Speaker 1>And so the the architecture is set up

00:35:42.090 --> 00:35:43.450
<v Speaker 1>where you can actually push this out to

00:35:43.450 --> 00:35:44.090
<v Speaker 1>the edge,

00:35:44.330 --> 00:35:46.490
<v Speaker 1>bring the rules where the data sits,

00:35:47.045 --> 00:35:48.565
<v Speaker 1>get all of these benefits of the real

00:35:48.565 --> 00:35:50.485
<v Speaker 1>time detections on more data that's too expensive

00:35:50.485 --> 00:35:51.605
<v Speaker 1>to send somewhere else.

00:35:52.325 --> 00:35:54.245
<v Speaker 1>The side effect, don't have to, you know,

00:35:54.245 --> 00:35:55.765
<v Speaker 1>increase your bill.

00:35:56.005 --> 00:35:57.925
<v Speaker 1>Another another kinda cool thing is that because

00:35:57.925 --> 00:35:59.285
<v Speaker 1>you're sitting where the data sits,

00:35:59.810 --> 00:36:02.530
<v Speaker 1>your automated runbooks, the actual thing that's gonna

00:36:02.530 --> 00:36:05.170
<v Speaker 1>take some actions, already there and can do

00:36:05.170 --> 00:36:05.650
<v Speaker 1>something.

00:36:05.970 --> 00:36:07.250
<v Speaker 1>Whereas if you've got,

00:36:07.970 --> 00:36:09.650
<v Speaker 1>you know, the data is shipped somewhere else,

00:36:09.650 --> 00:36:11.410
<v Speaker 1>you now need an integration to reach back

00:36:11.410 --> 00:36:13.650
<v Speaker 1>in to actually take an action. And so

00:36:13.650 --> 00:36:15.714
<v Speaker 1>sort of, you know, where do you wanna

00:36:15.714 --> 00:36:17.315
<v Speaker 1>have the integration? You wanna have the integration

00:36:17.315 --> 00:36:19.395
<v Speaker 1>on the, like, data shipping side where it

00:36:19.395 --> 00:36:20.595
<v Speaker 1>could be expensive, or do you wanna have

00:36:20.595 --> 00:36:23.075
<v Speaker 1>the integration on the the the automated action

00:36:23.075 --> 00:36:24.755
<v Speaker 1>side? And so that's kind of, like, the

00:36:24.755 --> 00:36:26.835
<v Speaker 1>the thinking there. But all that being said,

00:36:27.950 --> 00:36:29.950
<v Speaker 1>absolutely, we're gonna add capabilities.

00:36:29.950 --> 00:36:32.030
<v Speaker 1>You know? Just let me me occasionally look

00:36:32.030 --> 00:36:34.590
<v Speaker 1>at CloudWatch data. Let me look at something

00:36:34.590 --> 00:36:36.590
<v Speaker 1>that's in Loki, wherever it is, and we'll

00:36:36.590 --> 00:36:37.950
<v Speaker 1>match on that too. And and that's that's

00:36:37.950 --> 00:36:38.910
<v Speaker 1>kind of the cool thing with the language

00:36:38.910 --> 00:36:40.830
<v Speaker 1>is that's totally supportable and and definitely something

00:36:40.830 --> 00:36:41.630
<v Speaker 1>we're gonna add to Greek.

00:36:42.375 --> 00:36:45.015
<v Speaker 0>Okay. So you kinda you support whatever

00:36:45.175 --> 00:36:47.415
<v Speaker 0>mode operators really wanna go. Exactly. I like

00:36:47.415 --> 00:36:48.935
<v Speaker 0>idea of presampling

00:36:48.935 --> 00:36:50.855
<v Speaker 0>because then you're getting the most value for

00:36:50.855 --> 00:36:52.375
<v Speaker 0>your buck, like you said. Yeah. And I

00:36:52.375 --> 00:36:53.895
<v Speaker 0>don't need to forward all that data onto

00:36:53.895 --> 00:36:56.630
<v Speaker 0>LOKI. But then another another common part could

00:36:56.630 --> 00:36:58.230
<v Speaker 0>just be write everything to Loki with a

00:36:58.230 --> 00:37:00.310
<v Speaker 0>really short time to live of three hours

00:37:00.390 --> 00:37:03.270
<v Speaker 0>through the common through the the detection and

00:37:03.430 --> 00:37:05.589
<v Speaker 0>then put that onto longer term storage. But

00:37:05.670 --> 00:37:07.990
<v Speaker 0>Yep. With sampling. We're very strict sampling. If

00:37:07.990 --> 00:37:09.269
<v Speaker 0>people aren't sampling on production,

00:37:09.775 --> 00:37:12.095
<v Speaker 0>you've got too much money. Yeah. That's right.

00:37:12.095 --> 00:37:13.615
<v Speaker 0>That's right. And we use it on our

00:37:13.615 --> 00:37:15.615
<v Speaker 1>back end too. So instead of saving all

00:37:15.615 --> 00:37:17.375
<v Speaker 1>the log data with fluent bit, you know,

00:37:17.375 --> 00:37:19.295
<v Speaker 1>all the time, we'll write rules for like,

00:37:19.295 --> 00:37:20.655
<v Speaker 1>hey, we definitely wanna know about this when

00:37:20.655 --> 00:37:21.375
<v Speaker 1>it happens.

00:37:21.775 --> 00:37:23.135
<v Speaker 1>You know, let's tell us about it and

00:37:23.135 --> 00:37:24.655
<v Speaker 1>then we'll save kind of the data around

00:37:24.655 --> 00:37:24.815
<v Speaker 1>it.

00:37:25.670 --> 00:37:27.510
<v Speaker 0>Well, don't give us, you know, 10% of

00:37:27.510 --> 00:37:29.910
<v Speaker 0>that story. Let's talk about the preproduction log

00:37:29.910 --> 00:37:32.550
<v Speaker 0>pipeline. Like, so how are you collecting logs?

00:37:32.550 --> 00:37:34.550
<v Speaker 0>How is prec embedded into this? You're using

00:37:34.550 --> 00:37:36.070
<v Speaker 0>Fluent Bit. Do you wanna just give us

00:37:36.070 --> 00:37:37.270
<v Speaker 0>the details on that? I'd love to hear.

00:37:37.425 --> 00:37:39.585
<v Speaker 1>Yeah, yeah. So we're not using Fluent Bit.

00:37:39.665 --> 00:37:40.145
<v Speaker 1>Yeah,

00:37:40.865 --> 00:37:41.745
<v Speaker 1>yeah, yeah. Literally,

00:37:42.225 --> 00:37:45.105
<v Speaker 1>we're just saving the logs to the underlying

00:37:45.105 --> 00:37:47.745
<v Speaker 1>container runtime, saving it via journal d to

00:37:47.745 --> 00:37:49.585
<v Speaker 1>the log files in the Kubernetes cluster.

00:37:50.400 --> 00:37:52.560
<v Speaker 1>And then we have a daemon set that

00:37:52.720 --> 00:37:54.400
<v Speaker 1>does a couple of interesting things, one of

00:37:54.400 --> 00:37:55.440
<v Speaker 1>which we'll

00:37:55.440 --> 00:37:57.200
<v Speaker 1>monitor for all these

00:37:57.839 --> 00:37:59.520
<v Speaker 1>log files from the container. So we'll get

00:37:59.520 --> 00:38:02.480
<v Speaker 1>the containers, start creation events from the runtime,

00:38:02.640 --> 00:38:04.319
<v Speaker 1>and then open up a file descriptor to

00:38:04.319 --> 00:38:04.880
<v Speaker 1>those logs,

00:38:05.435 --> 00:38:07.755
<v Speaker 1>and then match on all the data. And

00:38:07.755 --> 00:38:09.994
<v Speaker 1>one of the cool things about the rules

00:38:09.994 --> 00:38:11.915
<v Speaker 1>is that we're actually not running the rules

00:38:11.994 --> 00:38:13.675
<v Speaker 1>on everything all the time. So you'll see

00:38:13.675 --> 00:38:15.915
<v Speaker 1>in the rule a data source. That allows

00:38:15.915 --> 00:38:17.915
<v Speaker 1>us to specify, hey, this is a rule

00:38:17.915 --> 00:38:18.475
<v Speaker 1>for

00:38:18.715 --> 00:38:20.770
<v Speaker 1>c r e dot log dot nginx. There's

00:38:20.770 --> 00:38:22.290
<v Speaker 1>sort of a definition that goes behind the

00:38:22.290 --> 00:38:23.970
<v Speaker 1>data source that says, alright. Match on this

00:38:23.970 --> 00:38:26.050
<v Speaker 1>image URL or container name or whatever it

00:38:26.050 --> 00:38:26.530
<v Speaker 1>is.

00:38:26.850 --> 00:38:29.410
<v Speaker 1>And so that rule will only actually compile

00:38:29.410 --> 00:38:31.890
<v Speaker 1>and broaden the environment if nginx is running.

00:38:33.185 --> 00:38:35.265
<v Speaker 1>And so that's basically what we use for

00:38:35.265 --> 00:38:36.625
<v Speaker 1>our production problems.

00:38:37.105 --> 00:38:38.705
<v Speaker 1>Know, like, actually, we just had an issue

00:38:38.705 --> 00:38:40.705
<v Speaker 1>yesterday where a customer was upgrading one of

00:38:40.705 --> 00:38:42.625
<v Speaker 1>our clusters and there was an issue.

00:38:42.945 --> 00:38:45.680
<v Speaker 1>We have a detection for that job status

00:38:45.680 --> 00:38:47.760
<v Speaker 1>failure, we have a detection that fires for

00:38:47.760 --> 00:38:49.200
<v Speaker 1>that and kind of saves all the data.

00:38:49.200 --> 00:38:51.119
<v Speaker 1>And that's a rare event. And so we

00:38:51.119 --> 00:38:52.559
<v Speaker 1>didn't have to send all of this data

00:38:52.559 --> 00:38:54.240
<v Speaker 1>and store it in CloudWatch and save all

00:38:54.240 --> 00:38:55.599
<v Speaker 1>of it for all time.

00:38:55.839 --> 00:38:57.520
<v Speaker 1>It's just a detection that fires, and we

00:38:57.520 --> 00:38:58.640
<v Speaker 1>know we actually need that data.

00:39:00.435 --> 00:39:01.235
<v Speaker 0>All right.

00:39:02.035 --> 00:39:04.755
<v Speaker 0>I'm curious now. Obviously, we played with this

00:39:04.755 --> 00:39:06.755
<v Speaker 0>example in the playground. This is nice. We

00:39:06.755 --> 00:39:08.595
<v Speaker 0>run the rule. We get this nice bit

00:39:08.595 --> 00:39:10.355
<v Speaker 0>of information on the right, and we can

00:39:10.355 --> 00:39:13.000
<v Speaker 0>see the hits and stuff. Now assuming in

00:39:13.000 --> 00:39:15.800
<v Speaker 0>my production environment, I'm using OpenTelemetry.

00:39:15.800 --> 00:39:17.400
<v Speaker 0>I'm writing my logs to locate. They're gonna

00:39:17.560 --> 00:39:19.400
<v Speaker 0>in JSON format. Is that a problem for

00:39:19.400 --> 00:39:20.840
<v Speaker 0>Preak, or is it just gonna swallow those

00:39:20.840 --> 00:39:22.520
<v Speaker 0>up? It'd be quite happy to parse them.

00:39:22.760 --> 00:39:24.760
<v Speaker 1>Yeah. It it's it runs side by side

00:39:24.760 --> 00:39:26.280
<v Speaker 1>just fine. It's more like a first line

00:39:26.280 --> 00:39:27.825
<v Speaker 1>of defense. So

00:39:27.905 --> 00:39:29.985
<v Speaker 1>we have a lot of customers and users

00:39:29.985 --> 00:39:31.345
<v Speaker 1>that are you know, they need to save

00:39:31.345 --> 00:39:33.185
<v Speaker 1>that data for compliance reasons.

00:39:33.825 --> 00:39:35.665
<v Speaker 1>But they're they also don't wanna go

00:39:36.385 --> 00:39:38.625
<v Speaker 1>crawling through a mile long dashboard when there's

00:39:38.625 --> 00:39:40.145
<v Speaker 1>a problem and and would like to just,

00:39:40.145 --> 00:39:41.665
<v Speaker 1>know, hey. If there's a new problem for,

00:39:43.200 --> 00:39:45.600
<v Speaker 1>Redis tomorrow that comes out, I'll get a

00:39:45.600 --> 00:39:46.880
<v Speaker 1>detection for that. And I didn't have to

00:39:46.880 --> 00:39:48.640
<v Speaker 1>write the monitor. Just there you go. It's

00:39:48.640 --> 00:39:49.120
<v Speaker 1>there.

00:39:49.680 --> 00:39:51.520
<v Speaker 1>And because the data is not getting shipped

00:39:51.680 --> 00:39:53.840
<v Speaker 1>anywhere for Preq, it's just data is in

00:39:53.840 --> 00:39:55.680
<v Speaker 1>your cluster. We're not doing anything with it.

00:39:55.840 --> 00:39:57.440
<v Speaker 1>It's very cheap to do. It's very cheap

00:39:57.440 --> 00:39:57.760
<v Speaker 1>to run.

00:39:59.705 --> 00:40:00.745
<v Speaker 0>Cool.

00:40:01.705 --> 00:40:03.625
<v Speaker 0>I always like to test, but yeah. No.

00:40:03.625 --> 00:40:04.825
<v Speaker 1>It's good. It's good. It's good.

00:40:05.545 --> 00:40:06.265
<v Speaker 1>And, yeah, the

00:40:07.065 --> 00:40:09.225
<v Speaker 1>there's a lot of different timestamp formats that

00:40:09.225 --> 00:40:11.480
<v Speaker 1>are supported in the PREC tool and then

00:40:11.480 --> 00:40:14.200
<v Speaker 1>the commercial products using the container runtime CRI

00:40:14.200 --> 00:40:16.280
<v Speaker 1>format for all of the timestamps for the

00:40:16.280 --> 00:40:16.840
<v Speaker 1>data.

00:40:17.160 --> 00:40:18.920
<v Speaker 0>Yeah. I'm assuming, you know, my dot dot

00:40:18.920 --> 00:40:20.920
<v Speaker 0>is not supported, but, you know, that's fine.

00:40:21.960 --> 00:40:22.280
<v Speaker 0>Cool.

00:40:23.205 --> 00:40:24.805
<v Speaker 0>I like this. So

00:40:25.045 --> 00:40:26.485
<v Speaker 0>I I I've got a few different ways

00:40:26.485 --> 00:40:28.725
<v Speaker 0>I kinda wanna take this now. And Nicholas

00:40:28.725 --> 00:40:30.725
<v Speaker 0>in the chat says, yes. Thank you for

00:40:30.725 --> 00:40:32.325
<v Speaker 0>that extended answer. That was perfect.

00:40:32.965 --> 00:40:33.925
<v Speaker 0>Okay. So

00:40:34.485 --> 00:40:35.925
<v Speaker 0>I can switch the size.

00:40:36.560 --> 00:40:38.240
<v Speaker 0>I'm curious about the CREs.

00:40:38.240 --> 00:40:41.359
<v Speaker 0>So Yeah. I'm assuming this is the public

00:40:41.359 --> 00:40:42.160
<v Speaker 0>community

00:40:42.160 --> 00:40:42.880
<v Speaker 0>driven

00:40:43.200 --> 00:40:45.600
<v Speaker 0>That's right. Repository where all of the CREs

00:40:45.600 --> 00:40:47.840
<v Speaker 0>live and exist. Is that correct? Mhmm. That's

00:40:47.840 --> 00:40:49.200
<v Speaker 1>right. Alright. Nice.

00:40:50.000 --> 00:40:51.520
<v Speaker 0>So because I'm assuming,

00:40:52.455 --> 00:40:54.375
<v Speaker 0>you know, your product is as good as

00:40:54.375 --> 00:40:55.655
<v Speaker 0>this repository.

00:40:55.975 --> 00:40:56.375
<v Speaker 0>Like

00:40:57.175 --> 00:40:59.335
<v Speaker 1>Yeah. For Preak, absolutely. Preak, this is the

00:40:59.335 --> 00:41:01.175
<v Speaker 1>Preak open source tool that uses the open

00:41:01.175 --> 00:41:02.135
<v Speaker 1>CREs.

00:41:02.775 --> 00:41:03.575
<v Speaker 0>Alright.

00:41:04.295 --> 00:41:07.095
<v Speaker 0>There's as an alternative version. Is this your

00:41:07.095 --> 00:41:07.735
<v Speaker 0>enterprise

00:41:08.330 --> 00:41:09.850
<v Speaker 0>product? No. No. No. We we we have

00:41:09.850 --> 00:41:12.090
<v Speaker 1>an alternative commercial version. So not all of

00:41:12.090 --> 00:41:14.250
<v Speaker 1>the roles we we have a reliability research

00:41:14.250 --> 00:41:16.490
<v Speaker 1>team, the people reliability research team

00:41:16.890 --> 00:41:19.290
<v Speaker 1>that works with, you know, customers,

00:41:19.290 --> 00:41:22.170
<v Speaker 1>open source issues, and and a growing community

00:41:22.170 --> 00:41:24.365
<v Speaker 1>of contributors, which has been kinda cool. I

00:41:24.365 --> 00:41:26.365
<v Speaker 1>actually think we have more now contributors to

00:41:26.365 --> 00:41:28.125
<v Speaker 1>the open source capability than we have people

00:41:28.125 --> 00:41:29.725
<v Speaker 1>that work at Prequel, which is awesome.

00:41:30.444 --> 00:41:31.964
<v Speaker 1>Actually, shout out to Nicholas because I definitely

00:41:31.964 --> 00:41:33.165
<v Speaker 1>know that he's one of them. So cool

00:41:33.165 --> 00:41:34.205
<v Speaker 1>to see you, Nicholas.

00:41:35.325 --> 00:41:37.085
<v Speaker 1>And, yeah, I think the rules that you're

00:41:37.085 --> 00:41:38.640
<v Speaker 1>looking at here are all of the kinda

00:41:38.640 --> 00:41:40.640
<v Speaker 1>open source contributed rules that look at things

00:41:40.640 --> 00:41:42.799
<v Speaker 1>like Loki, NATS issues, or some stuff here

00:41:42.799 --> 00:41:43.760
<v Speaker 1>in Kafka.

00:41:44.000 --> 00:41:46.960
<v Speaker 1>We're growing every day. We just released this

00:41:46.960 --> 00:41:48.160
<v Speaker 1>a couple weeks ago.

00:41:48.559 --> 00:41:50.319
<v Speaker 1>And then, yeah, we have a commercial product

00:41:50.319 --> 00:41:53.095
<v Speaker 1>where not all of those rules do get

00:41:53.335 --> 00:41:54.855
<v Speaker 1>pushed out to the open source product. Some

00:41:54.855 --> 00:41:55.655
<v Speaker 1>of them have.

00:41:56.215 --> 00:41:58.135
<v Speaker 1>We actually just published a blog earlier this

00:41:58.135 --> 00:42:00.935
<v Speaker 1>week on some NGINX worker leaks. And so

00:42:00.935 --> 00:42:03.335
<v Speaker 1>we're We made those rules

00:42:03.575 --> 00:42:05.415
<v Speaker 1>available on the blog and we're considering making

00:42:05.415 --> 00:42:07.335
<v Speaker 1>those available in the CRE repo as well.

00:42:08.640 --> 00:42:09.200
<v Speaker 0>Okay.

00:42:09.680 --> 00:42:11.119
<v Speaker 0>I'm just looking at one that was added

00:42:11.119 --> 00:42:13.839
<v Speaker 0>two days ago, some sort of on kill

00:42:13.839 --> 00:42:14.960
<v Speaker 0>for Reddit

00:42:16.319 --> 00:42:17.760
<v Speaker 0>tags, description,

00:42:18.000 --> 00:42:18.800
<v Speaker 0>cause.

00:42:19.520 --> 00:42:19.839
<v Speaker 1>Yeah.

00:42:20.475 --> 00:42:22.635
<v Speaker 1>When you're contributing to the CRE repo, one

00:42:22.635 --> 00:42:24.155
<v Speaker 1>of the things that's a requirement is you

00:42:24.155 --> 00:42:26.155
<v Speaker 1>have to have a reproduction for the problem.

00:42:26.555 --> 00:42:28.155
<v Speaker 1>So it's not enough to go and, you

00:42:28.155 --> 00:42:30.155
<v Speaker 1>know, scrape an issue somewhere and say, okay.

00:42:30.155 --> 00:42:32.235
<v Speaker 1>Here's some data that explains the problem. You

00:42:32.235 --> 00:42:33.435
<v Speaker 1>actually need a reproduction.

00:42:33.515 --> 00:42:35.675
<v Speaker 1>That's mainly because sometimes these things

00:42:36.450 --> 00:42:37.330
<v Speaker 1>can have

00:42:37.970 --> 00:42:39.650
<v Speaker 1>false positives. And so you want to be

00:42:39.650 --> 00:42:41.890
<v Speaker 1>able to have a test case for, okay,

00:42:41.890 --> 00:42:44.609
<v Speaker 1>here's the actual positive conditions that have to

00:42:44.609 --> 00:42:46.290
<v Speaker 1>happen for this to be the problem. But

00:42:46.290 --> 00:42:48.450
<v Speaker 1>when you do the reproduction, you can also

00:42:48.450 --> 00:42:50.210
<v Speaker 1>see the scenarios where, okay, well, I can

00:42:50.210 --> 00:42:51.715
<v Speaker 1>also see how that would be normal and

00:42:51.715 --> 00:42:53.955
<v Speaker 1>fine and nothing's broken. Let's make sure we

00:42:53.955 --> 00:42:56.035
<v Speaker 1>actually write the negate cases to cover the

00:42:56.035 --> 00:42:57.155
<v Speaker 1>false positives.

00:42:59.955 --> 00:43:01.315
<v Speaker 0>Nice. I like this.

00:43:02.755 --> 00:43:04.340
<v Speaker 1>And we're looking for contributors too, so if

00:43:04.340 --> 00:43:06.420
<v Speaker 1>you're listening and you want to get nerd

00:43:06.420 --> 00:43:08.180
<v Speaker 1>sniped and have some fun.

00:43:08.580 --> 00:43:11.380
<v Speaker 1>Again, my background is doing vulnerability research and

00:43:11.380 --> 00:43:13.940
<v Speaker 1>exploit development, and I have more fun doing

00:43:13.940 --> 00:43:15.700
<v Speaker 1>this. It's

00:43:15.700 --> 00:43:19.025
<v Speaker 1>fun because you're fixing stuff. You're actually making

00:43:19.505 --> 00:43:20.385
<v Speaker 1>things better

00:43:20.625 --> 00:43:23.184
<v Speaker 1>and you're helping someone that you've never met

00:43:23.184 --> 00:43:24.065
<v Speaker 1>somewhere

00:43:24.144 --> 00:43:25.585
<v Speaker 1>that's about to have a really bad day

00:43:25.585 --> 00:43:27.345
<v Speaker 1>because they're scaling core DNS

00:43:27.505 --> 00:43:28.944
<v Speaker 1>and they're about to hit some mid square

00:43:28.944 --> 00:43:31.300
<v Speaker 1>scaling issue. They've never seen it before, but

00:43:31.300 --> 00:43:32.819
<v Speaker 1>there's a rule for it that can help

00:43:32.819 --> 00:43:34.180
<v Speaker 1>them if in case that happens. So I

00:43:34.180 --> 00:43:35.940
<v Speaker 1>think that world is fun to live in.

00:43:36.020 --> 00:43:37.300
<v Speaker 1>We all wanna be in that world, so

00:43:37.300 --> 00:43:38.740
<v Speaker 1>we're definitely looking for contributors.

00:43:39.460 --> 00:43:42.260
<v Speaker 0>Have you ever considered just taking the Stack

00:43:42.260 --> 00:43:45.140
<v Speaker 0>Overflow data export and, you know, go nuts

00:43:45.140 --> 00:43:47.775
<v Speaker 0>with it? Well, you know, it

00:43:48.815 --> 00:43:51.055
<v Speaker 1>sounds like a crazy idea, and it is.

00:43:51.055 --> 00:43:52.975
<v Speaker 1>And it's definitely something we still actually do

00:43:52.975 --> 00:43:53.775
<v Speaker 1>think about.

00:43:54.335 --> 00:43:56.015
<v Speaker 1>You know, definitely not doing it now, but

00:43:56.015 --> 00:43:58.735
<v Speaker 1>we are looking at different ways in which

00:43:58.735 --> 00:44:01.330
<v Speaker 1>we can scale up the research

00:44:02.130 --> 00:44:05.010
<v Speaker 1>because, yeah, there's a lot of misconfiguration

00:44:05.010 --> 00:44:07.330
<v Speaker 1>issues, no problems in open source software, anti

00:44:07.330 --> 00:44:08.130
<v Speaker 1>patterns.

00:44:08.530 --> 00:44:09.890
<v Speaker 1>There's a lot. And so that's why we're

00:44:09.890 --> 00:44:11.730
<v Speaker 1>excited about building the community because we can't

00:44:11.730 --> 00:44:13.410
<v Speaker 1>do it alone. And again, this is something

00:44:13.410 --> 00:44:15.490
<v Speaker 1>the security industry realized twenty years

00:44:15.875 --> 00:44:17.714
<v Speaker 1>You you cannot solve this problem alone. You

00:44:17.714 --> 00:44:18.915
<v Speaker 1>have to find tools

00:44:19.075 --> 00:44:21.075
<v Speaker 1>and ways to share this knowledge at, like,

00:44:21.075 --> 00:44:21.955
<v Speaker 1>machine

00:44:22.194 --> 00:44:22.755
<v Speaker 1>speed.

00:44:23.155 --> 00:44:24.515
<v Speaker 1>And that's, I think, why we get excited

00:44:24.515 --> 00:44:26.115
<v Speaker 1>about common reliability numerations.

00:44:27.840 --> 00:44:28.480
<v Speaker 0>Next.

00:44:28.720 --> 00:44:31.040
<v Speaker 0>Alright. I think I understand the project. I

00:44:31.040 --> 00:44:32.640
<v Speaker 0>understand how it works. I understand how to

00:44:32.640 --> 00:44:34.960
<v Speaker 0>contribute. I see the value. I think we're

00:44:34.960 --> 00:44:37.520
<v Speaker 0>we're doing well so far. So Awesome. You

00:44:37.520 --> 00:44:37.920
<v Speaker 0>know,

00:44:38.320 --> 00:44:40.880
<v Speaker 0>the fact that anyone watching this should hopefully

00:44:40.880 --> 00:44:43.280
<v Speaker 0>start contributing any of their outages and errors

00:44:43.280 --> 00:44:44.295
<v Speaker 0>as c

00:44:44.695 --> 00:44:46.214
<v Speaker 0>c r e's. I keep trying to say

00:44:46.214 --> 00:44:47.895
<v Speaker 0>CVEs, but I'm like, no. Don't say that.

00:44:47.895 --> 00:44:49.735
<v Speaker 0>That's the other one. The security one.

00:44:50.135 --> 00:44:52.135
<v Speaker 0>Yeah. This is cool. Is there anything we

00:44:52.135 --> 00:44:54.855
<v Speaker 0>haven't covered yet before I kinda start poking

00:44:54.855 --> 00:44:56.375
<v Speaker 0>around and coming up with silly ideas?

00:44:57.570 --> 00:44:59.010
<v Speaker 1>No. I mean, I think that's it. Again,

00:44:59.010 --> 00:45:00.930
<v Speaker 1>we're really excited about it. You know, come

00:45:00.930 --> 00:45:03.410
<v Speaker 1>star the repos. Come join us in Slack.

00:45:03.410 --> 00:45:04.930
<v Speaker 1>We're looking for contributors.

00:45:05.490 --> 00:45:07.650
<v Speaker 1>I mean, we we're very passionate about making

00:45:07.650 --> 00:45:09.570
<v Speaker 1>this world exist. We don't wanna start with

00:45:09.570 --> 00:45:10.130
<v Speaker 1>the investigation.

00:45:10.674 --> 00:45:12.755
<v Speaker 1>We wanna start with the detection. Let's do

00:45:12.755 --> 00:45:13.234
<v Speaker 1>that.

00:45:13.875 --> 00:45:15.954
<v Speaker 1>We want that world to be true. So

00:45:15.954 --> 00:45:17.394
<v Speaker 1>come come hang out if you like that

00:45:17.394 --> 00:45:18.434
<v Speaker 1>world and you wanna live in that world

00:45:18.434 --> 00:45:19.395
<v Speaker 1>because we do too.

00:45:20.275 --> 00:45:22.115
<v Speaker 0>Alright. Well, let's jump back to the CLI

00:45:22.115 --> 00:45:24.115
<v Speaker 0>then. So we've got this thing here.

00:45:25.670 --> 00:45:27.269
<v Speaker 0>Now when I ran the first time, I

00:45:27.269 --> 00:45:28.950
<v Speaker 0>did have to to log in,

00:45:29.990 --> 00:45:32.710
<v Speaker 0>and I got some sort of snapshot of

00:45:32.710 --> 00:45:35.750
<v Speaker 0>that repository stored locally with the the rules.

00:45:35.910 --> 00:45:37.670
<v Speaker 0>What is the how do I keep this

00:45:37.670 --> 00:45:39.615
<v Speaker 0>up to date? Is it do that automatically?

00:45:39.615 --> 00:45:40.815
<v Speaker 0>Is it something I should trigger on a

00:45:40.815 --> 00:45:42.335
<v Speaker 0>cron job? Like, how do I make sure

00:45:42.335 --> 00:45:43.375
<v Speaker 0>I have the latest

00:45:43.535 --> 00:45:46.655
<v Speaker 0>CREs for running against my log data?

00:45:47.055 --> 00:45:49.775
<v Speaker 1>Yeah. Good question. So it's an automatic update.

00:45:50.335 --> 00:45:53.339
<v Speaker 1>You don't have to schedule anything. It'll it'll

00:45:53.339 --> 00:45:54.859
<v Speaker 1>do a check-in

00:45:54.859 --> 00:45:56.060
<v Speaker 1>two different ways.

00:45:56.859 --> 00:45:58.539
<v Speaker 1>The first check is just like a UDP

00:45:58.539 --> 00:46:00.380
<v Speaker 1>packet with, like, a latency timeout of a

00:46:00.380 --> 00:46:01.819
<v Speaker 1>hundred milliseconds. Like, hey. Is there a new

00:46:01.819 --> 00:46:03.740
<v Speaker 1>version available? If so, let's tell someone they

00:46:03.740 --> 00:46:04.299
<v Speaker 1>can download it.

00:46:05.244 --> 00:46:07.325
<v Speaker 1>And then every couple of days, there's, like,

00:46:07.325 --> 00:46:09.565
<v Speaker 1>a a more guaranteed TCP check. It's like,

00:46:09.565 --> 00:46:11.085
<v Speaker 1>hey. Is there a new update available?

00:46:11.725 --> 00:46:14.205
<v Speaker 1>We we're pushing out updates from the community

00:46:14.205 --> 00:46:16.205
<v Speaker 1>about two or three times a week.

00:46:16.685 --> 00:46:19.005
<v Speaker 1>It'll probably stay at that pace for for

00:46:19.005 --> 00:46:19.405
<v Speaker 1>a while.

00:46:20.720 --> 00:46:22.800
<v Speaker 1>And yeah. So really do you don't have

00:46:22.800 --> 00:46:24.480
<v Speaker 1>do anything. Every time you run it like

00:46:24.480 --> 00:46:25.839
<v Speaker 1>you did earlier, actually, when you started it

00:46:25.839 --> 00:46:27.280
<v Speaker 1>out, you actually just ran it to look

00:46:27.280 --> 00:46:29.359
<v Speaker 1>for that problem. It'll do that quick update

00:46:29.359 --> 00:46:30.880
<v Speaker 1>and sell it and then finish doing the

00:46:30.880 --> 00:46:32.000
<v Speaker 1>thing you asked it to do, and it

00:46:32.000 --> 00:46:33.545
<v Speaker 1>does it very fast. That's why we did

00:46:33.545 --> 00:46:35.385
<v Speaker 1>the UDP check. We wanted that update check

00:46:35.385 --> 00:46:36.985
<v Speaker 1>to be as fast as possible.

00:46:37.385 --> 00:46:39.145
<v Speaker 1>And I think we're averaging, like at least

00:46:39.145 --> 00:46:40.905
<v Speaker 1>in The US, I'm not sure about Scotland.

00:46:40.905 --> 00:46:43.065
<v Speaker 1>In The US, it's for around forty milliseconds

00:46:43.065 --> 00:46:44.025
<v Speaker 1>for that check.

00:46:44.745 --> 00:46:46.745
<v Speaker 1>I'm actually curious what your latency was for

00:46:46.745 --> 00:46:48.425
<v Speaker 1>UDP packet. We'll have to find out.

00:46:50.609 --> 00:46:51.330
<v Speaker 0>Yeah.

00:46:51.890 --> 00:46:53.650
<v Speaker 0>I have no idea. I mean, I'm also

00:46:53.650 --> 00:46:53.970
<v Speaker 0>on

00:46:54.609 --> 00:46:57.089
<v Speaker 0>I I my office is a listed building,

00:46:57.089 --> 00:46:59.329
<v Speaker 0>so I'm not allowed fiber even though I

00:46:59.329 --> 00:47:00.930
<v Speaker 0>can see the fiber point on the ground

00:47:00.930 --> 00:47:03.010
<v Speaker 0>outside, but they can't drill in my building.

00:47:03.010 --> 00:47:04.735
<v Speaker 0>That's very annoying. And so I have use

00:47:04.735 --> 00:47:06.015
<v Speaker 1>five fast.

00:47:06.335 --> 00:47:07.855
<v Speaker 0>Yeah. Yeah. I use five g. And it's

00:47:07.855 --> 00:47:09.135
<v Speaker 0>it's okay. It has its good days and

00:47:09.135 --> 00:47:11.375
<v Speaker 0>its bad days. Yeah. Yeah. Great. My my

00:47:11.375 --> 00:47:13.535
<v Speaker 1>cofounder's latency, Linda's listening right now, and so

00:47:13.535 --> 00:47:15.215
<v Speaker 1>I'm very excited to say that his latency

00:47:15.215 --> 00:47:17.590
<v Speaker 1>for DNS lookups is, like, hundred milliseconds, and

00:47:17.590 --> 00:47:19.109
<v Speaker 1>I don't know how you survive a human

00:47:19.109 --> 00:47:20.550
<v Speaker 1>in his house. I don't know how you

00:47:20.550 --> 00:47:21.350
<v Speaker 1>do it, Linden.

00:47:21.670 --> 00:47:22.790
<v Speaker 0>I don't know how you do it.

00:47:23.750 --> 00:47:25.830
<v Speaker 0>Hard hard pass on that one for sure.

00:47:27.109 --> 00:47:29.349
<v Speaker 0>Alright. Maybe you can talk what's the in

00:47:29.349 --> 00:47:30.710
<v Speaker 0>fact, let me push this back to,

00:47:31.455 --> 00:47:32.655
<v Speaker 0>like, face mode.

00:47:32.975 --> 00:47:33.855
<v Speaker 0>There we go.

00:47:34.335 --> 00:47:36.575
<v Speaker 0>Well, you've got a commercial product. Right? You're

00:47:36.575 --> 00:47:38.655
<v Speaker 0>trying to make this something that is open

00:47:38.655 --> 00:47:40.575
<v Speaker 0>source and available to anyone. There is a

00:47:40.575 --> 00:47:42.975
<v Speaker 0>community contributing thing. But, of course, open source

00:47:42.975 --> 00:47:44.655
<v Speaker 0>has to be sustainable. Right? This is something

00:47:44.655 --> 00:47:46.335
<v Speaker 0>that people often forget, and they go, ah,

00:47:46.335 --> 00:47:47.790
<v Speaker 0>closed source. Done.

00:47:47.950 --> 00:47:48.990
<v Speaker 0>Actually,

00:47:49.470 --> 00:47:52.110
<v Speaker 0>off my audio interface. But how

00:47:52.110 --> 00:47:53.710
<v Speaker 0>how do you build a business around this?

00:47:53.710 --> 00:47:54.990
<v Speaker 0>How do you make sure that the open

00:47:54.990 --> 00:47:56.670
<v Speaker 0>source project has a long shelf life that

00:47:56.670 --> 00:47:58.350
<v Speaker 0>people can trust and adopt? Because that's obviously

00:47:58.350 --> 00:47:59.710
<v Speaker 0>gonna be an important part of your mission,

00:47:59.925 --> 00:48:01.205
<v Speaker 0>which means you have to have a successful

00:48:01.205 --> 00:48:02.565
<v Speaker 0>company buying it. So maybe you could go

00:48:02.565 --> 00:48:04.085
<v Speaker 0>into that in a bit more detail, folks.

00:48:04.405 --> 00:48:06.005
<v Speaker 1>Yeah. Really good question.

00:48:06.405 --> 00:48:07.045
<v Speaker 1>So

00:48:07.285 --> 00:48:09.445
<v Speaker 1>the way we think about it is

00:48:10.005 --> 00:48:13.045
<v Speaker 1>the the schema for common reliability enumerations, it

00:48:13.045 --> 00:48:15.125
<v Speaker 1>is really important for that to be open.

00:48:16.470 --> 00:48:19.190
<v Speaker 1>Because if you want to have a community

00:48:19.190 --> 00:48:21.430
<v Speaker 1>of practitioners, engineers,

00:48:21.590 --> 00:48:22.950
<v Speaker 1>customer support,

00:48:23.110 --> 00:48:24.150
<v Speaker 1>you know, people

00:48:25.350 --> 00:48:27.430
<v Speaker 1>using, contributing, growing

00:48:27.830 --> 00:48:30.310
<v Speaker 1>these rules, it's really important that it that

00:48:30.310 --> 00:48:32.025
<v Speaker 1>it be open. So that's that's why we

00:48:32.025 --> 00:48:33.705
<v Speaker 1>decided to make it Apache two.

00:48:34.265 --> 00:48:35.945
<v Speaker 1>And the Preq tool itself

00:48:36.825 --> 00:48:38.825
<v Speaker 1>actually uses a lot of the exact it's

00:48:38.825 --> 00:48:40.505
<v Speaker 1>basically the same compiler. So if you go

00:48:40.505 --> 00:48:42.025
<v Speaker 1>to the, you know, Preql dash compiler and

00:48:42.025 --> 00:48:43.385
<v Speaker 1>the Gel repo, that's the same thing that's

00:48:43.385 --> 00:48:44.505
<v Speaker 1>in the commercial product.

00:48:44.905 --> 00:48:46.425
<v Speaker 1>But there are some key differences,

00:48:46.880 --> 00:48:48.880
<v Speaker 1>and the key differences are on the types

00:48:48.880 --> 00:48:50.880
<v Speaker 1>of data that you can run the rules

00:48:50.880 --> 00:48:52.960
<v Speaker 1>on. And that's kinda how we make this

00:48:52.960 --> 00:48:54.880
<v Speaker 1>balance kinda to your to your question.

00:48:55.120 --> 00:48:56.880
<v Speaker 1>For the open source tool, it will work

00:48:56.880 --> 00:48:59.280
<v Speaker 1>on log data and configuration data.

00:48:59.795 --> 00:49:02.515
<v Speaker 1>For the commercial product, we look at Kubernetes

00:49:02.515 --> 00:49:03.235
<v Speaker 1>events,

00:49:03.395 --> 00:49:05.075
<v Speaker 1>process events, and OOMs,

00:49:05.155 --> 00:49:07.155
<v Speaker 1>time series data, OpenTelemetry

00:49:07.155 --> 00:49:07.795
<v Speaker 1>data,

00:49:08.115 --> 00:49:10.035
<v Speaker 1>you know, all of the support for, like,

00:49:10.035 --> 00:49:12.115
<v Speaker 1>running it on, you know, ECS or,

00:49:12.920 --> 00:49:15.960
<v Speaker 1>some kind of CloudWatch based data. Those

00:49:16.200 --> 00:49:18.440
<v Speaker 1>data sources probably only live in the commercial

00:49:18.440 --> 00:49:20.760
<v Speaker 1>product. And another key difference

00:49:21.400 --> 00:49:23.960
<v Speaker 1>between the open source product and the commercial

00:49:23.960 --> 00:49:25.720
<v Speaker 1>product is around correlations.

00:49:26.355 --> 00:49:27.955
<v Speaker 1>So the open source product is kind of

00:49:27.955 --> 00:49:28.515
<v Speaker 1>a

00:49:28.994 --> 00:49:30.515
<v Speaker 1>one data source at a time. If you

00:49:30.515 --> 00:49:32.035
<v Speaker 1>wanna look at this one service for problems

00:49:32.035 --> 00:49:33.715
<v Speaker 1>with this one service, it's great for that.

00:49:33.875 --> 00:49:35.555
<v Speaker 1>But if you really wanna look at, hey.

00:49:35.555 --> 00:49:36.835
<v Speaker 1>I need to know when

00:49:37.075 --> 00:49:37.795
<v Speaker 1>my

00:49:38.435 --> 00:49:40.355
<v Speaker 1>back end service is having a bunch of

00:49:40.355 --> 00:49:41.155
<v Speaker 1>GraphQL

00:49:41.155 --> 00:49:41.955
<v Speaker 1>500s,

00:49:42.260 --> 00:49:43.380
<v Speaker 1>and it's causing

00:49:43.540 --> 00:49:47.380
<v Speaker 1>my user facing NGINX service to generate 500s

00:49:47.380 --> 00:49:48.900
<v Speaker 1>to the users on the API,

00:49:49.059 --> 00:49:50.900
<v Speaker 1>like in correlating those two things at the

00:49:50.900 --> 00:49:52.980
<v Speaker 1>same time, that's where the commercial product and

00:49:52.980 --> 00:49:54.900
<v Speaker 1>the language works really well for those correlations.

00:49:55.565 --> 00:49:57.245
<v Speaker 1>But you you can't do that in Greek.

00:49:57.405 --> 00:49:58.845
<v Speaker 1>And that's really it. That's the key kind

00:49:58.845 --> 00:49:59.885
<v Speaker 1>of the key difference, but it's the same

00:49:59.885 --> 00:50:02.445
<v Speaker 1>codes. Like, the the compiler that we're using,

00:50:02.445 --> 00:50:04.605
<v Speaker 1>the commercial product, is actually that compiler code

00:50:04.605 --> 00:50:06.365
<v Speaker 1>that's in the open source version. And we're

00:50:06.365 --> 00:50:08.285
<v Speaker 1>not gonna, like, have two different versions. We're

00:50:08.285 --> 00:50:10.260
<v Speaker 1>actually using the same thing. So that's kinda

00:50:10.260 --> 00:50:10.980
<v Speaker 1>how we

00:50:11.940 --> 00:50:13.540
<v Speaker 1>keep it going and and make it easy

00:50:13.540 --> 00:50:15.940
<v Speaker 1>for us to support the commercial product because

00:50:15.940 --> 00:50:18.180
<v Speaker 1>it's it's the same code base. And using

00:50:18.180 --> 00:50:21.380
<v Speaker 1>that data source and correlation distinction kinda line

00:50:21.540 --> 00:50:23.380
<v Speaker 1>kinda makes it easy to

00:50:23.835 --> 00:50:26.075
<v Speaker 1>continue supporting the open source version, but have

00:50:26.075 --> 00:50:27.435
<v Speaker 1>a lot of really cool value in the

00:50:27.435 --> 00:50:28.475
<v Speaker 1>enterprise product.

00:50:29.515 --> 00:50:30.235
<v Speaker 0>Okay.

00:50:31.195 --> 00:50:33.515
<v Speaker 0>If I remember correctly from earlier on, right,

00:50:33.515 --> 00:50:35.115
<v Speaker 0>you also said there's the

00:50:35.870 --> 00:50:38.110
<v Speaker 0>open source CREs, but you maintain your own

00:50:38.110 --> 00:50:40.510
<v Speaker 0>proprietary database of CREs. How would you make

00:50:40.510 --> 00:50:43.310
<v Speaker 0>that decision then when your team come across

00:50:43.310 --> 00:50:45.390
<v Speaker 0>something? Should it live in a provider one?

00:50:45.390 --> 00:50:47.310
<v Speaker 0>Should it live in the open source one?

00:50:47.310 --> 00:50:49.070
<v Speaker 0>And do you have any sort of pledge

00:50:48.915 --> 00:50:50.515
<v Speaker 0>to the community that things that go into

00:50:50.515 --> 00:50:52.275
<v Speaker 0>the proprietary one after twelve

00:50:52.755 --> 00:50:54.195
<v Speaker 0>months will make their way down to, like,

00:50:54.195 --> 00:50:55.715
<v Speaker 0>open source? Like, how do you build around

00:50:55.715 --> 00:50:57.795
<v Speaker 0>us and give people you know, because the

00:50:57.795 --> 00:50:59.475
<v Speaker 0>better the open source repository, it's the better

00:50:59.475 --> 00:51:00.995
<v Speaker 0>the product edge, and hopefully, that leads to

00:51:00.995 --> 00:51:02.995
<v Speaker 0>more adoption of the commercial Yeah. Absolutely. Of

00:51:02.995 --> 00:51:04.890
<v Speaker 0>course, this is this is a a tight

00:51:04.890 --> 00:51:06.250
<v Speaker 0>rope that a lot of open source companies

00:51:06.250 --> 00:51:08.490
<v Speaker 0>have to trade on carefully. So Yeah. I

00:51:08.490 --> 00:51:11.049
<v Speaker 1>I it's actually what's kinda cool about drawing

00:51:11.049 --> 00:51:12.809
<v Speaker 1>the line on correlations

00:51:12.809 --> 00:51:13.690
<v Speaker 1>is that

00:51:14.089 --> 00:51:16.490
<v Speaker 1>if you can detect the problem entirely within

00:51:16.490 --> 00:51:18.650
<v Speaker 1>that one data source, then it probably should

00:51:18.650 --> 00:51:21.405
<v Speaker 1>just be an open source rule. Most

00:51:22.525 --> 00:51:24.045
<v Speaker 1>rules, I think, are going to be shaped

00:51:24.045 --> 00:51:26.285
<v Speaker 1>like that. Now, when it comes to,

00:51:26.685 --> 00:51:28.445
<v Speaker 1>hey, this is actually kind of a really

00:51:28.445 --> 00:51:29.805
<v Speaker 1>hard thing to detect because you need to

00:51:29.805 --> 00:51:31.725
<v Speaker 1>look at four different things happening at once,

00:51:31.725 --> 00:51:31.965
<v Speaker 1>and

00:51:32.530 --> 00:51:34.290
<v Speaker 1>you need to also reduce

00:51:34.290 --> 00:51:37.730
<v Speaker 1>some false positives here. That's where correlations are

00:51:38.130 --> 00:51:39.090
<v Speaker 1>really important.

00:51:39.490 --> 00:51:40.850
<v Speaker 1>That's only going to be something that would

00:51:40.850 --> 00:51:42.450
<v Speaker 1>be available in the commercial rules for the

00:51:42.450 --> 00:51:44.530
<v Speaker 1>commercial product. And so I think that's how

00:51:44.530 --> 00:51:45.250
<v Speaker 1>we're thinking about it.

00:51:47.335 --> 00:51:49.255
<v Speaker 1>Think we're honestly, we're excited to see where

00:51:49.255 --> 00:51:50.535
<v Speaker 1>the community takes us.

00:51:50.855 --> 00:51:53.495
<v Speaker 1>And as we get more contributors and kind

00:51:53.495 --> 00:51:55.735
<v Speaker 1>of more users on PREC and CREs,

00:51:56.055 --> 00:51:56.855
<v Speaker 1>we're

00:51:56.855 --> 00:51:58.455
<v Speaker 1>listening to what people need.

00:51:59.130 --> 00:52:00.730
<v Speaker 1>And so I don't think we actually have

00:52:00.730 --> 00:52:01.930
<v Speaker 1>a hard and fast rule. This is something

00:52:01.930 --> 00:52:03.930
<v Speaker 1>during my time at Elastic working with open

00:52:03.930 --> 00:52:04.490
<v Speaker 1>source,

00:52:05.770 --> 00:52:07.849
<v Speaker 1>we would very often try to brainstorm, okay,

00:52:07.849 --> 00:52:09.609
<v Speaker 1>what's the rule, the principle that we're going

00:52:09.609 --> 00:52:10.890
<v Speaker 1>to use to make the same decision?

00:52:11.515 --> 00:52:12.875
<v Speaker 1>And we

00:52:13.275 --> 00:52:14.715
<v Speaker 1>tried many times to come up with a

00:52:14.715 --> 00:52:16.875
<v Speaker 1>rule and it never worked because every situation

00:52:16.875 --> 00:52:17.675
<v Speaker 1>was unique.

00:52:18.075 --> 00:52:19.835
<v Speaker 1>So I think we don't have really a

00:52:19.835 --> 00:52:22.155
<v Speaker 1>hard, fast rule. It's really just let's go

00:52:22.155 --> 00:52:22.875
<v Speaker 1>where

00:52:23.275 --> 00:52:26.475
<v Speaker 1>customers and users of the open source projects

00:52:26.690 --> 00:52:29.170
<v Speaker 1>see value and need value, and and that's

00:52:29.170 --> 00:52:30.050
<v Speaker 1>what we're gonna do.

00:52:31.010 --> 00:52:32.290
<v Speaker 0>K. Awesome.

00:52:32.530 --> 00:52:35.970
<v Speaker 0>And I'm assuming, Prik, the open source CLI

00:52:35.970 --> 00:52:37.250
<v Speaker 0>that you said is the basis for the

00:52:37.250 --> 00:52:39.170
<v Speaker 0>commercial product and the open and obviously open

00:52:39.170 --> 00:52:39.650
<v Speaker 0>source one.

00:52:40.775 --> 00:52:42.695
<v Speaker 0>If people want to contribute to that, is

00:52:42.695 --> 00:52:44.935
<v Speaker 0>that something that is approachable? How do they

00:52:44.935 --> 00:52:45.815
<v Speaker 0>get started?

00:52:46.295 --> 00:52:48.455
<v Speaker 0>Like, you know because I'm doing this until

00:52:48.615 --> 00:52:50.535
<v Speaker 0>I think that the appeal, right, of why

00:52:50.535 --> 00:52:52.215
<v Speaker 0>I want to use this is is may

00:52:52.215 --> 00:52:53.975
<v Speaker 0>and date. That's the wrong thing.

00:52:57.430 --> 00:52:59.190
<v Speaker 0>What is what am I trying to say?

00:52:59.670 --> 00:53:02.150
<v Speaker 0>It's universal. Everybody wants to use it. I

00:53:02.150 --> 00:53:03.670
<v Speaker 0>can imagine, like, nobody was saying, oh, I'm

00:53:03.670 --> 00:53:05.030
<v Speaker 0>not gonna use that. Right? It's right there.

00:53:05.030 --> 00:53:06.150
<v Speaker 0>Why would you not use it?

00:53:06.950 --> 00:53:08.950
<v Speaker 0>How do people get contribute into the open

00:53:08.950 --> 00:53:10.390
<v Speaker 0>source project if that's what they want to

00:53:10.390 --> 00:53:12.525
<v Speaker 0>do? Right? You mentioned there's the compiler. There's

00:53:12.525 --> 00:53:12.925
<v Speaker 0>the.

00:53:13.725 --> 00:53:15.645
<v Speaker 0>Those obviously, the CRUs. Right? Let's put that

00:53:15.645 --> 00:53:17.085
<v Speaker 0>to the side because those, I think, are

00:53:17.085 --> 00:53:18.205
<v Speaker 0>a completely different

00:53:18.365 --> 00:53:21.005
<v Speaker 0>construct to contribute in code. How do we

00:53:21.005 --> 00:53:21.645
<v Speaker 0>do that?

00:53:22.365 --> 00:53:24.685
<v Speaker 1>So the the all of our code

00:53:24.925 --> 00:53:27.560
<v Speaker 1>base is in Go. So that's kinda the

00:53:27.560 --> 00:53:29.880
<v Speaker 1>first question is, are you comfortable in Go?

00:53:29.880 --> 00:53:30.680
<v Speaker 1>And if not,

00:53:31.080 --> 00:53:33.800
<v Speaker 1>it is a little bit harder to contribute

00:53:33.800 --> 00:53:35.080
<v Speaker 1>to the actual

00:53:35.240 --> 00:53:37.160
<v Speaker 1>the the code base itself.

00:53:37.800 --> 00:53:39.000
<v Speaker 1>But if you do know Go,

00:53:40.565 --> 00:53:42.244
<v Speaker 1>we want to be as approachable as possible.

00:53:42.244 --> 00:53:43.444
<v Speaker 1>In fact, we were actually just talking with

00:53:43.444 --> 00:53:44.005
<v Speaker 1>someone

00:53:44.724 --> 00:53:47.444
<v Speaker 1>on Monday that was like, hey. Your

00:53:47.444 --> 00:53:49.924
<v Speaker 1>contributing docs talk about how you wanna open

00:53:49.924 --> 00:53:51.924
<v Speaker 1>up an issue and have a discussion first.

00:53:51.924 --> 00:53:53.870
<v Speaker 1>And that That made me feel like you

00:53:53.870 --> 00:53:55.870
<v Speaker 1>weren't wanting to accept PRs because you would

00:53:55.870 --> 00:53:56.990
<v Speaker 1>just kind of go off and have this

00:53:56.990 --> 00:53:59.550
<v Speaker 1>conversation that nothing would actually ever happen. Like,

00:53:59.550 --> 00:54:01.310
<v Speaker 1>Oh, that's a bug in our docs, and

00:54:01.310 --> 00:54:02.670
<v Speaker 1>we're going to fix that. Because we

00:54:03.310 --> 00:54:05.470
<v Speaker 1>want as many contributors as possible. We want

00:54:05.470 --> 00:54:07.415
<v Speaker 1>as many ideas as possible, and so we

00:54:07.415 --> 00:54:08.535
<v Speaker 1>want it to be as easy as possible

00:54:08.535 --> 00:54:09.335
<v Speaker 1>to contribute.

00:54:10.215 --> 00:54:11.415
<v Speaker 1>So I think if

00:54:11.655 --> 00:54:13.575
<v Speaker 1>you know Go, come hang out with us,

00:54:13.575 --> 00:54:15.815
<v Speaker 1>join our Slack. But even if you don't,

00:54:15.815 --> 00:54:17.575
<v Speaker 1>like you just said earlier, you don't need

00:54:17.575 --> 00:54:20.135
<v Speaker 1>to know Go to contribute CREs. The language

00:54:20.135 --> 00:54:21.895
<v Speaker 1>is very, very simple. It's just YAML,

00:54:22.370 --> 00:54:25.010
<v Speaker 1>and it's like string pattern matching in regular

00:54:25.010 --> 00:54:26.930
<v Speaker 1>expressions. You can actually do JQ queries in

00:54:26.930 --> 00:54:29.010
<v Speaker 1>that too, but it's very easy to write.

00:54:29.810 --> 00:54:32.210
<v Speaker 1>And so, yeah, I think we're welcoming contributors

00:54:32.210 --> 00:54:34.610
<v Speaker 1>on both the actual code base itself, but

00:54:34.610 --> 00:54:35.650
<v Speaker 1>also CREs.

00:54:36.930 --> 00:54:37.170
<v Speaker 0>Nice.

00:54:37.905 --> 00:54:39.985
<v Speaker 0>Alright. I I mean, I was asking also

00:54:39.985 --> 00:54:42.625
<v Speaker 0>firstly the selfish reasons because I know Go.

00:54:42.625 --> 00:54:44.705
<v Speaker 0>I think I could probably contribute a different

00:54:44.705 --> 00:54:45.265
<v Speaker 0>idea.

00:54:45.665 --> 00:54:47.185
<v Speaker 0>We're doing it. I mean, my my initial

00:54:47.185 --> 00:54:49.025
<v Speaker 0>thought was, you know, I'm not a big

00:54:49.025 --> 00:54:51.340
<v Speaker 0>fan of the piping the logs through and

00:54:51.340 --> 00:54:53.500
<v Speaker 0>stuff like that. Like, what if Preak could

00:54:53.500 --> 00:54:55.580
<v Speaker 0>have, like, a run command that just ran

00:54:55.580 --> 00:54:57.820
<v Speaker 0>the thing for me and grabbed the logs?

00:54:57.820 --> 00:54:59.500
<v Speaker 0>Like, I think that would be a an

00:54:59.500 --> 00:55:01.340
<v Speaker 0>interesting approach. But I understand that.

00:55:02.115 --> 00:55:03.555
<v Speaker 1>Is built into

00:55:03.875 --> 00:55:05.555
<v Speaker 1>the tools. We kinda didn't get into it,

00:55:05.555 --> 00:55:08.115
<v Speaker 1>but you can specify data sources. You can

00:55:08.115 --> 00:55:10.275
<v Speaker 1>say, alright. Siri dot log dot nginx

00:55:10.435 --> 00:55:13.075
<v Speaker 1>is at this file path. And then that's

00:55:13.075 --> 00:55:14.355
<v Speaker 1>just the YAML file. So you can run

00:55:14.355 --> 00:55:15.980
<v Speaker 1>Preak, and it'll and then you can put

00:55:15.980 --> 00:55:17.660
<v Speaker 1>one file path or many. You can put

00:55:17.660 --> 00:55:18.860
<v Speaker 1>it in a priority order.

00:55:19.099 --> 00:55:20.859
<v Speaker 1>So it'll do that too. If you wanna,

00:55:20.859 --> 00:55:22.540
<v Speaker 1>like, run this on a more consistent basis,

00:55:22.540 --> 00:55:23.820
<v Speaker 1>you can define all those data sources in

00:55:23.820 --> 00:55:25.020
<v Speaker 1>the file. You don't have to pipe via

00:55:25.020 --> 00:55:26.460
<v Speaker 1>standard in. Standard in is kind of a

00:55:26.540 --> 00:55:28.300
<v Speaker 1>there's a very fast way to, like, see

00:55:28.300 --> 00:55:30.115
<v Speaker 1>how it works. But, yeah, if you're running

00:55:30.115 --> 00:55:31.875
<v Speaker 1>it on a more regular basis kind of

00:55:31.875 --> 00:55:33.715
<v Speaker 1>in production, you you'd be using the data

00:55:33.715 --> 00:55:35.075
<v Speaker 1>start the data source file.

00:55:35.315 --> 00:55:37.155
<v Speaker 0>Oh, nice. Okay. I'll definitely be taking a

00:55:37.155 --> 00:55:39.635
<v Speaker 0>look at that then. Alright. Let's go with

00:55:39.635 --> 00:55:40.835
<v Speaker 0>one more question.

00:55:40.995 --> 00:55:43.200
<v Speaker 0>Like, what is your your road map? So

00:55:43.200 --> 00:55:45.359
<v Speaker 0>what are you looking to do with Preak

00:55:45.359 --> 00:55:46.960
<v Speaker 0>over the next three months, six months, nine

00:55:46.960 --> 00:55:49.200
<v Speaker 0>months? Definitely not. How how how far how

00:55:49.200 --> 00:55:50.400
<v Speaker 0>far ahead have you planned?

00:55:50.720 --> 00:55:53.280
<v Speaker 1>Yeah. Yeah. So I'll I'll answer it from

00:55:53.280 --> 00:55:55.280
<v Speaker 1>both the context of Preak and then the

00:55:55.280 --> 00:55:57.119
<v Speaker 1>commercial product Prequel. So for Preak,

00:55:57.905 --> 00:56:01.185
<v Speaker 1>we're really focused on the CRE library and

00:56:01.185 --> 00:56:03.825
<v Speaker 1>bringing in more contributors and actually actively reaching

00:56:03.825 --> 00:56:04.545
<v Speaker 1>out to

00:56:05.025 --> 00:56:06.705
<v Speaker 1>experts in Kafka

00:56:06.705 --> 00:56:08.465
<v Speaker 1>community and RabbitMQ,

00:56:08.465 --> 00:56:09.425
<v Speaker 1>NGINX,

00:56:09.425 --> 00:56:10.225
<v Speaker 1>Redis,

00:56:10.385 --> 00:56:10.865
<v Speaker 1>Postgres,

00:56:11.500 --> 00:56:13.580
<v Speaker 1>and and really just, hey. What are some

00:56:13.580 --> 00:56:15.100
<v Speaker 1>of the problems that you've been running across?

00:56:15.100 --> 00:56:17.500
<v Speaker 1>Let's start codifying that intelligence so that everyone

00:56:17.500 --> 00:56:19.100
<v Speaker 1>can benefit from your knowledge.

00:56:19.820 --> 00:56:21.900
<v Speaker 1>And so our road map for Preq and

00:56:21.900 --> 00:56:23.340
<v Speaker 1>the open source tool is

00:56:23.785 --> 00:56:26.185
<v Speaker 1>primarily focused on growing that community

00:56:26.425 --> 00:56:27.865
<v Speaker 1>and then trying to

00:56:28.105 --> 00:56:31.065
<v Speaker 1>find features that would unlock its usage. So

00:56:31.065 --> 00:56:32.985
<v Speaker 1>this week, we actually just added the automated

00:56:32.985 --> 00:56:33.865
<v Speaker 1>runbooks

00:56:33.865 --> 00:56:35.145
<v Speaker 1>because we had someone

00:56:35.305 --> 00:56:37.320
<v Speaker 1>last week tell us like, hey. I would

00:56:37.320 --> 00:56:39.720
<v Speaker 1>like to have some automation here to, like,

00:56:39.720 --> 00:56:41.400
<v Speaker 1>actually have it do something when a specific

00:56:41.400 --> 00:56:42.360
<v Speaker 1>rule is fired.

00:56:42.680 --> 00:56:44.600
<v Speaker 1>And so for a open source project, it's

00:56:44.600 --> 00:56:47.560
<v Speaker 1>primarily focused on growing the contributors for rules

00:56:47.640 --> 00:56:50.040
<v Speaker 1>and adding features that would make it even

00:56:50.040 --> 00:56:51.160
<v Speaker 1>easier to use

00:56:51.400 --> 00:56:52.760
<v Speaker 1>and sort of grow adoption.

00:56:53.375 --> 00:56:55.375
<v Speaker 1>Then the commercial product, it's really all about

00:56:55.375 --> 00:56:57.135
<v Speaker 1>focusing on data sources.

00:56:57.375 --> 00:56:58.974
<v Speaker 1>And so one of the features that we're

00:56:58.974 --> 00:57:01.694
<v Speaker 1>really excited about is adding time series data

00:57:01.694 --> 00:57:03.615
<v Speaker 1>so that you can do these correlations across

00:57:03.615 --> 00:57:07.600
<v Speaker 1>logs, configuration data, Kubernetes events, and some event

00:57:07.600 --> 00:57:09.760
<v Speaker 1>that's generated from a rule on time series

00:57:09.760 --> 00:57:10.400
<v Speaker 1>data.

00:57:10.560 --> 00:57:12.800
<v Speaker 1>I think that's kind of something that maybe

00:57:13.840 --> 00:57:15.440
<v Speaker 1>you'd be kind of a crazy person to

00:57:15.440 --> 00:57:17.360
<v Speaker 1>think is feasible to do, kind of like

00:57:17.360 --> 00:57:19.280
<v Speaker 1>doing these correlations across like a bunch of

00:57:19.280 --> 00:57:21.040
<v Speaker 1>time series data and log data. And I

00:57:21.040 --> 00:57:23.655
<v Speaker 1>I think that's like doing sequences and correlations

00:57:23.655 --> 00:57:25.495
<v Speaker 1>across all of the different data types is

00:57:25.495 --> 00:57:26.855
<v Speaker 1>really, really powerful.

00:57:27.495 --> 00:57:29.015
<v Speaker 1>And so that's one of the things that

00:57:29.015 --> 00:57:31.255
<v Speaker 1>we're really focused on right now as well

00:57:31.255 --> 00:57:31.735
<v Speaker 1>as,

00:57:32.615 --> 00:57:34.695
<v Speaker 1>again, just growing the commercial role library there

00:57:34.695 --> 00:57:36.455
<v Speaker 1>as well. So that's kind of at a

00:57:36.455 --> 00:57:36.935
<v Speaker 1>high level

00:57:37.420 --> 00:57:39.500
<v Speaker 1>for Preak and the commercial product, what we're

00:57:39.500 --> 00:57:41.260
<v Speaker 1>focused on for the next year. And then

00:57:41.260 --> 00:57:42.860
<v Speaker 1>maybe one other thing to talk about

00:57:43.260 --> 00:57:45.020
<v Speaker 1>from the commercial product standpoint, you know, you

00:57:45.020 --> 00:57:46.700
<v Speaker 1>were just you were using Claude

00:57:46.700 --> 00:57:48.620
<v Speaker 1>in your your command line there.

00:57:49.180 --> 00:57:51.505
<v Speaker 1>I think one of the really powerful ways

00:57:51.505 --> 00:57:52.385
<v Speaker 1>to leverage

00:57:52.865 --> 00:57:54.305
<v Speaker 1>AI and LLMs

00:57:54.465 --> 00:57:55.105
<v Speaker 1>is,

00:57:55.345 --> 00:57:57.025
<v Speaker 1>at least in the Porsche product, two ways.

00:57:57.025 --> 00:57:59.185
<v Speaker 1>One is in explaining what happened.

00:57:59.425 --> 00:58:01.105
<v Speaker 1>So the cool thing about these rules is

00:58:01.105 --> 00:58:02.385
<v Speaker 1>it builds this tree

00:58:02.680 --> 00:58:04.520
<v Speaker 1>of kind of things that were matched across

00:58:04.520 --> 00:58:07.000
<v Speaker 1>different data sources and has specific hits like

00:58:07.000 --> 00:58:08.440
<v Speaker 1>you saw on the playground, like actually what

00:58:08.440 --> 00:58:10.840
<v Speaker 1>fired. So with all of that data, like,

00:58:10.840 --> 00:58:12.760
<v Speaker 1>what are these entities, these data sources?

00:58:13.000 --> 00:58:14.200
<v Speaker 1>What are the matches?

00:58:14.360 --> 00:58:15.815
<v Speaker 1>And what was the rule actually trying to

00:58:15.815 --> 00:58:18.295
<v Speaker 1>do? The rule itself describes the problem, the

00:58:18.295 --> 00:58:19.015
<v Speaker 1>mitigation.

00:58:19.655 --> 00:58:21.974
<v Speaker 1>AI is really good at summarizing

00:58:21.974 --> 00:58:23.895
<v Speaker 1>this in a story, almost like a notebook.

00:58:23.895 --> 00:58:26.135
<v Speaker 1>This is, Okay. Here's what happened. First,

00:58:27.015 --> 00:58:28.934
<v Speaker 1>this log data right here, this log mesh,

00:58:29.340 --> 00:58:31.500
<v Speaker 1>this is what this means. Then this time

00:58:31.500 --> 00:58:33.580
<v Speaker 1>series metric kind of exploded.

00:58:33.900 --> 00:58:37.260
<v Speaker 1>These rules really do it's really good scaffolding

00:58:37.900 --> 00:58:39.900
<v Speaker 1>upon which an LLM can kind of summarize

00:58:39.900 --> 00:58:40.780
<v Speaker 1>for someone

00:58:40.940 --> 00:58:42.860
<v Speaker 1>a story, like, Tell me what happened. Instead

00:58:42.860 --> 00:58:44.540
<v Speaker 1>of choosing my own adventure through the data,

00:58:44.994 --> 00:58:46.035
<v Speaker 1>it's

00:58:46.035 --> 00:58:47.875
<v Speaker 1>awesome to have an explanation on top of

00:58:47.875 --> 00:58:49.474
<v Speaker 1>that, a really simple one. And then the

00:58:49.474 --> 00:58:51.715
<v Speaker 1>other one is if you've ever used Cursor

00:58:51.875 --> 00:58:52.595
<v Speaker 1>for

00:58:53.315 --> 00:58:54.755
<v Speaker 1>AI autocomplete,

00:58:55.075 --> 00:58:57.714
<v Speaker 1>rule creation is another really cool opportunity to

00:58:57.714 --> 00:58:59.875
<v Speaker 1>leverage AI in the product, and that's another

00:58:59.875 --> 00:59:01.200
<v Speaker 1>thing that we're working on this year.

00:59:02.080 --> 00:59:03.520
<v Speaker 0>Awesome. Nice.

00:59:03.920 --> 00:59:06.160
<v Speaker 0>Yeah. I mean, you're right about the

00:59:06.400 --> 00:59:08.080
<v Speaker 0>the model stuff. Like,

00:59:08.320 --> 00:59:09.840
<v Speaker 0>you know, people are always asking which model

00:59:09.840 --> 00:59:12.240
<v Speaker 0>is better between, like, the OpenAI stuff, the

00:59:12.240 --> 00:59:14.320
<v Speaker 0>cloud stuff. You know? There's a Mistral models.

00:59:14.320 --> 00:59:16.454
<v Speaker 0>There's Gemini. Mean, I these models are only

00:59:16.454 --> 00:59:18.454
<v Speaker 0>as good as the curation of the data

00:59:18.454 --> 00:59:20.454
<v Speaker 0>that they're trained on. Mhmm. So when it

00:59:20.454 --> 00:59:23.174
<v Speaker 0>comes to what you're building with the CREs

00:59:23.174 --> 00:59:25.734
<v Speaker 0>and that open source collective knowledge, the library

00:59:25.734 --> 00:59:26.295
<v Speaker 0>of

00:59:26.934 --> 00:59:29.255
<v Speaker 0>problems that happen with applications, the version numbers,

00:59:29.310 --> 00:59:31.150
<v Speaker 0>And then it's all that extra metadata that

00:59:31.150 --> 00:59:33.550
<v Speaker 0>you're providing, the impact analysis and all. Exactly.

00:59:33.550 --> 00:59:34.430
<v Speaker 0>That is

00:59:34.830 --> 00:59:37.390
<v Speaker 0>is gold dust for for models to ingest

00:59:37.390 --> 00:59:40.030
<v Speaker 0>and help you understand production infrastructure. So that,

00:59:40.030 --> 00:59:41.470
<v Speaker 0>I think, is a no brainer. Like, I

00:59:41.470 --> 00:59:43.870
<v Speaker 0>see a very positive AI tie in with

00:59:43.870 --> 00:59:46.075
<v Speaker 0>what you're building with the CRE model and

00:59:46.075 --> 00:59:47.755
<v Speaker 0>the open sources of that and the collective

00:59:47.755 --> 00:59:49.515
<v Speaker 0>notch. I think that's really powerful. And that's

00:59:49.515 --> 00:59:51.115
<v Speaker 0>only gonna get better over time. Right? Give

00:59:51.115 --> 00:59:53.435
<v Speaker 0>that another six months, another two years, and

00:59:53.435 --> 00:59:54.875
<v Speaker 0>that repository is gonna be huge and just

00:59:54.875 --> 00:59:56.715
<v Speaker 0>have so much more information. So that's a

00:59:56.715 --> 00:59:57.675
<v Speaker 0>very exciting thing.

00:59:58.075 --> 00:59:58.715
<v Speaker 0>Awesome.

00:59:58.980 --> 01:00:01.140
<v Speaker 0>That was great. Aman in the chat saying

01:00:01.140 --> 01:00:02.340
<v Speaker 0>that was a great session as well. I'm

01:00:02.340 --> 01:00:03.380
<v Speaker 0>glad that was helpful.

01:00:03.700 --> 01:00:05.140
<v Speaker 0>I hope you do go and contribute to

01:00:05.140 --> 01:00:06.900
<v Speaker 0>the project. And now is the time for

01:00:06.900 --> 01:00:08.340
<v Speaker 0>sure. There's lots of good things on the

01:00:08.340 --> 01:00:09.940
<v Speaker 0>road map and, yeah,

01:00:10.180 --> 01:00:11.540
<v Speaker 0>a noble cause as well.

01:00:12.444 --> 01:00:14.204
<v Speaker 0>Any last words for me, Tony, or the

01:00:14.204 --> 01:00:15.805
<v Speaker 0>audience before we wrap this up?

01:00:16.525 --> 01:00:18.365
<v Speaker 1>Come give us a star. It helps us

01:00:18.365 --> 01:00:20.845
<v Speaker 1>out. It's shameless plug, but, like, please, it

01:00:20.845 --> 01:00:22.924
<v Speaker 1>it actually does help. So, you know, go

01:00:22.924 --> 01:00:23.805
<v Speaker 1>to GitHub,

01:00:24.125 --> 01:00:26.365
<v Speaker 1>prequel dash dev preq, and give it a

01:00:26.365 --> 01:00:26.605
<v Speaker 1>star.

01:00:27.230 --> 01:00:29.710
<v Speaker 1>We're definitely looking for contributors. But honestly, I

01:00:29.710 --> 01:00:31.309
<v Speaker 1>think we're

01:00:31.309 --> 01:00:32.830
<v Speaker 1>kind of crazy people

01:00:33.230 --> 01:00:35.470
<v Speaker 1>because we're a little obsessed with trying to

01:00:35.470 --> 01:00:36.750
<v Speaker 1>make this world exist.

01:00:37.789 --> 01:00:39.789
<v Speaker 1>We're just really looking for like minded people

01:00:39.789 --> 01:00:42.270
<v Speaker 1>that want to contribute and help. Come join

01:00:42.270 --> 01:00:43.525
<v Speaker 1>us in community Slack.

01:00:44.005 --> 01:00:45.685
<v Speaker 1>We'll do anything and everything to help you

01:00:45.685 --> 01:00:47.605
<v Speaker 1>get started. And David, I'm going to reach

01:00:47.605 --> 01:00:49.445
<v Speaker 1>out and we're going to Don't let me

01:00:49.445 --> 01:00:50.885
<v Speaker 1>discourage you that we already had that feature.

01:00:50.885 --> 01:00:52.725
<v Speaker 1>We'll find something else. You can contribute. We're

01:00:52.725 --> 01:00:53.605
<v Speaker 1>going make it happen.

01:00:54.485 --> 01:00:55.765
<v Speaker 1>Thank you for your time. This is great.

01:00:56.160 --> 01:00:57.760
<v Speaker 0>I mean, I didn't I don't think I

01:00:57.760 --> 01:00:59.680
<v Speaker 0>mentioned this earlier, but I I I actually

01:00:59.680 --> 01:01:02.079
<v Speaker 0>spent two years working in FluxDB. So time

01:01:02.079 --> 01:01:04.480
<v Speaker 0>series data and correlation. I saw it. I

01:01:04.480 --> 01:01:07.200
<v Speaker 1>saw it. Yeah. I understand how valuable it

01:01:07.200 --> 01:01:09.245
<v Speaker 0>is when you can take a series of

01:01:09.245 --> 01:01:11.165
<v Speaker 0>data and as you know, measure the occurrences

01:01:11.165 --> 01:01:14.045
<v Speaker 0>of something over not just seconds, days, but

01:01:14.045 --> 01:01:16.445
<v Speaker 0>months and years, understanding seasonality

01:01:16.445 --> 01:01:18.925
<v Speaker 0>in the data. All of this contributes to

01:01:19.325 --> 01:01:21.005
<v Speaker 0>reliability in the long haul. And I think

01:01:21.005 --> 01:01:22.700
<v Speaker 0>you're on the right If that you're looking

01:01:22.700 --> 01:01:24.940
<v Speaker 0>into how to do these advanced correlations,

01:01:25.099 --> 01:01:26.619
<v Speaker 0>I think will be invaluable to the community

01:01:26.619 --> 01:01:28.619
<v Speaker 0>and to your your, you know, customers in

01:01:28.619 --> 01:01:30.380
<v Speaker 0>the long run as well. So stick on

01:01:30.380 --> 01:01:31.420
<v Speaker 0>that. And if I can help in any

01:01:31.420 --> 01:01:33.099
<v Speaker 0>way, I would love to chat and add

01:01:33.099 --> 01:01:35.965
<v Speaker 0>more. But for today, I think we've covered

01:01:35.965 --> 01:01:37.725
<v Speaker 0>a lot. It's a really cool project. And,

01:01:37.725 --> 01:01:40.605
<v Speaker 0>again, it's not it's not easy to have

01:01:40.605 --> 01:01:42.765
<v Speaker 0>an open source company and make it sustainable.

01:01:42.765 --> 01:01:43.885
<v Speaker 0>So I wish you all the best of

01:01:43.885 --> 01:01:45.645
<v Speaker 0>luck as a noble mission. And to everyone

01:01:45.645 --> 01:01:47.965
<v Speaker 0>watching, contribute, check it out, give them that

01:01:47.965 --> 01:01:51.300
<v Speaker 0>star, and, hopefully, your reliability will be improved.

01:01:51.780 --> 01:01:53.619
<v Speaker 0>So with that, I will say goodbye. Thank

01:01:53.619 --> 01:01:54.740
<v Speaker 0>you so much for your time, Tony. We

01:01:54.740 --> 01:01:56.420
<v Speaker 0>will speak soon. And to everyone watching, have

01:01:56.420 --> 01:01:58.500
<v Speaker 0>a great day. Thank you, David. Adios.
