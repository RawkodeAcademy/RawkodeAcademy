WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 8629675f-d1cb-42b7-992a-d115f7b3b7ff
Created: 2025-07-10T13:12:21.610Z
Duration: 3847.1052
Channels: 1

00:01:10.810 --> 00:01:13.930
<v Speaker 0>Hello, and welcome back to the Rawkode Academy.

00:01:13.930 --> 00:01:15.825
<v Speaker 0>I am your host, David Flanagan, also known

00:01:15.825 --> 00:01:17.665
<v Speaker 0>across the Internet as Rawkode.

00:01:17.745 --> 00:01:19.585
<v Speaker 0>And today is an episode of Rawkode Live,

00:01:19.585 --> 00:01:20.945
<v Speaker 0>the show where we take a look at

00:01:20.945 --> 00:01:23.104
<v Speaker 0>all the latest and greatest open source cloud

00:01:23.104 --> 00:01:24.225
<v Speaker 0>native projects.

00:01:24.545 --> 00:01:26.305
<v Speaker 0>And today is no exception. We are taking

00:01:26.305 --> 00:01:27.985
<v Speaker 0>a look at a project called Preak, as

00:01:27.985 --> 00:01:29.745
<v Speaker 0>you may have gathered from the intro music.

00:01:30.130 --> 00:01:32.610
<v Speaker 0>It's gonna help us build and run more

00:01:32.610 --> 00:01:35.170
<v Speaker 0>reliable software. And our guest and host for

00:01:35.170 --> 00:01:36.130
<v Speaker 0>today is

00:01:37.170 --> 00:01:37.970
<v Speaker 0>20,000,000.

00:01:37.970 --> 00:01:39.090
<v Speaker 0>Hey, man. How's it going?

00:01:39.490 --> 00:01:40.530
<v Speaker 1>Listen.

00:01:40.530 --> 00:01:43.010
<v Speaker 1>I don't think I'm blown away by that

00:01:43.010 --> 00:01:44.530
<v Speaker 1>song. Like, I think we should just put

00:01:44.530 --> 00:01:45.715
<v Speaker 1>that on a loop and make that the

00:01:45.715 --> 00:01:47.155
<v Speaker 1>lifestyle. That's incredible.

00:01:47.795 --> 00:01:50.195
<v Speaker 1>I'm doing great. This was like, that that

00:01:50.195 --> 00:01:51.795
<v Speaker 1>was amazing. That was hilarious. That was awesome.

00:01:51.795 --> 00:01:54.355
<v Speaker 0>Should we just quickly go ahead? I mean,

00:01:54.355 --> 00:01:56.275
<v Speaker 1>you know, that's that was amazing.

00:01:58.980 --> 00:02:01.140
<v Speaker 0>AI today in 2025.

00:02:01.140 --> 00:02:03.700
<v Speaker 0>What time? Like, the fact that that song

00:02:03.700 --> 00:02:05.620
<v Speaker 0>can be put together, and I don't even

00:02:05.620 --> 00:02:06.660
<v Speaker 0>need to know how to play a guitar

00:02:06.660 --> 00:02:08.900
<v Speaker 0>or anything. So It's a real no. It's

00:02:08.900 --> 00:02:10.580
<v Speaker 1>a real band. That's the community put that

00:02:10.580 --> 00:02:12.340
<v Speaker 1>together. Can we Oh, yeah. Yeah. Yeah. For

00:02:12.340 --> 00:02:14.605
<v Speaker 0>sure. Yeah. Yeah. Cool. No. It's awesome to

00:02:14.605 --> 00:02:16.285
<v Speaker 1>be here. I your your podcast is amazing.

00:02:16.285 --> 00:02:17.805
<v Speaker 1>We were just talking earlier about the WASM

00:02:17.805 --> 00:02:19.325
<v Speaker 1>the WASM podcast you did a couple of

00:02:19.325 --> 00:02:20.845
<v Speaker 1>days ago or weeks ago. It was

00:02:21.405 --> 00:02:22.525
<v Speaker 1>awesome to be here. Thank you for your

00:02:22.525 --> 00:02:23.005
<v Speaker 1>time.

00:02:23.405 --> 00:02:25.405
<v Speaker 0>Yeah. Thank you for joining me. So for

00:02:25.405 --> 00:02:27.245
<v Speaker 0>anyone who's not familiar with you and your

00:02:27.245 --> 00:02:28.530
<v Speaker 0>work, please take a little bit of time

00:02:28.530 --> 00:02:29.969
<v Speaker 0>just to say hello and tell them what

00:02:29.969 --> 00:02:32.129
<v Speaker 0>you've been up to. Yeah. So my name

00:02:32.129 --> 00:02:34.930
<v Speaker 1>is Tony. I'm a CTO at a company

00:02:34.930 --> 00:02:36.049
<v Speaker 1>called Prequel

00:02:36.049 --> 00:02:39.090
<v Speaker 1>and a maintainer of a tool called Preq.

00:02:40.370 --> 00:02:43.170
<v Speaker 1>Quick background from me is I spent my

00:02:43.170 --> 00:02:43.409
<v Speaker 1>first

00:02:44.034 --> 00:02:45.555
<v Speaker 1>ten years of my career

00:02:46.435 --> 00:02:48.915
<v Speaker 1>doing vulnerability and exploit development here in The

00:02:48.915 --> 00:02:50.915
<v Speaker 1>US at a place called the National Security

00:02:50.915 --> 00:02:52.915
<v Speaker 1>Agency. So I loved working there. The mission

00:02:52.915 --> 00:02:53.875
<v Speaker 1>was really fun,

00:02:54.834 --> 00:02:56.515
<v Speaker 1>really humbling experience.

00:02:57.075 --> 00:02:59.620
<v Speaker 1>You jump into the deep end, and it's

00:02:59.620 --> 00:03:00.420
<v Speaker 1>a very hard,

00:03:01.060 --> 00:03:02.580
<v Speaker 1>job and but a fun mission.

00:03:03.220 --> 00:03:04.900
<v Speaker 1>But, you know, I don't know if this

00:03:04.900 --> 00:03:07.460
<v Speaker 1>is, known widely, but the government can sometimes

00:03:07.460 --> 00:03:10.500
<v Speaker 1>be, this, you know, big bureaucratic organization that

00:03:10.500 --> 00:03:11.380
<v Speaker 1>moves slow sometimes.

00:03:12.095 --> 00:03:15.935
<v Speaker 1>So I ended up leaving in 2014

00:03:16.334 --> 00:03:18.095
<v Speaker 1>to join a startup, so, the opposite end

00:03:18.095 --> 00:03:19.855
<v Speaker 1>of the spectrum. And it was a company

00:03:19.855 --> 00:03:20.415
<v Speaker 1>called

00:03:20.735 --> 00:03:23.215
<v Speaker 1>Endgame, where we were building an endpoint security

00:03:23.215 --> 00:03:23.775
<v Speaker 1>product.

00:03:24.174 --> 00:03:25.935
<v Speaker 1>So I was there for for a while

00:03:25.935 --> 00:03:28.894
<v Speaker 1>as VP of engineering, and we ended up

00:03:27.480 --> 00:03:30.440
<v Speaker 1>selling that business to a company called Elastic,

00:03:30.440 --> 00:03:32.680
<v Speaker 1>the makers of Kibana and Elasticsearch.

00:03:32.680 --> 00:03:34.519
<v Speaker 1>Really big in open source, and that's kind

00:03:34.519 --> 00:03:36.519
<v Speaker 1>of how I got my first introduction into

00:03:36.519 --> 00:03:38.840
<v Speaker 1>working with open source communities. So I was

00:03:38.840 --> 00:03:39.560
<v Speaker 1>there for

00:03:40.440 --> 00:03:41.720
<v Speaker 1>quite a while doing

00:03:41.879 --> 00:03:43.319
<v Speaker 1>a VP of engineering, but

00:03:44.015 --> 00:03:46.495
<v Speaker 1>I still would find every excuse to cancel

00:03:46.495 --> 00:03:48.095
<v Speaker 1>a meeting, go jump on an incident or

00:03:48.095 --> 00:03:49.455
<v Speaker 1>not. I should go chase the bug. I

00:03:49.455 --> 00:03:50.895
<v Speaker 1>think it was probably chasing the first ten

00:03:50.895 --> 00:03:51.935
<v Speaker 1>years of my career.

00:03:52.815 --> 00:03:55.615
<v Speaker 1>I've always sort of been haunted by problems

00:03:55.615 --> 00:03:58.095
<v Speaker 1>in software and bugs and curious to

00:03:58.730 --> 00:04:00.170
<v Speaker 1>I think the best way to understand software

00:04:00.170 --> 00:04:02.410
<v Speaker 1>is when it breaks. And so we ended

00:04:02.410 --> 00:04:04.010
<v Speaker 1>up building a product to kind of help

00:04:04.170 --> 00:04:06.489
<v Speaker 1>practitioners, engineers figure out when their software breaks,

00:04:06.489 --> 00:04:07.930
<v Speaker 1>that's how we ended up on Preak.

00:04:08.810 --> 00:04:09.370
<v Speaker 0>Awesome.

00:04:10.170 --> 00:04:11.690
<v Speaker 0>Yeah. Lots of love there.

00:04:12.375 --> 00:04:14.775
<v Speaker 0>I've skipped over the government, alright. Okay.

00:04:15.735 --> 00:04:17.654
<v Speaker 0>You know, working on security is obviously gonna

00:04:17.654 --> 00:04:19.015
<v Speaker 0>teach you a lot. Working

00:04:19.815 --> 00:04:21.735
<v Speaker 0>with bugs, of course. I love that you

00:04:21.735 --> 00:04:23.895
<v Speaker 0>mentioned that, you know, software

00:04:24.375 --> 00:04:26.699
<v Speaker 0>does break and people are human and people

00:04:26.699 --> 00:04:28.940
<v Speaker 0>introduce bugs every single day and things go

00:04:28.940 --> 00:04:31.580
<v Speaker 0>wrong. And one of my shows called clustered

00:04:31.580 --> 00:04:32.860
<v Speaker 0>that I haven't done in a long time,

00:04:32.860 --> 00:04:34.539
<v Speaker 0>but I'd love to bring it back. People

00:04:34.539 --> 00:04:36.620
<v Speaker 0>always said, oh, the breaks are too contrived,

00:04:36.620 --> 00:04:38.060
<v Speaker 0>and the premise of the show was live

00:04:38.060 --> 00:04:40.725
<v Speaker 0>debugging. And I'm like, yeah. But people shouldn't

00:04:40.725 --> 00:04:42.565
<v Speaker 0>have to know this stuff. But when you

00:04:42.565 --> 00:04:44.565
<v Speaker 0>do, you do. Right? And it's like when

00:04:44.565 --> 00:04:46.485
<v Speaker 0>things go wrong, when things are broken, when

00:04:46.485 --> 00:04:48.805
<v Speaker 0>shit really hits the fan, that has been

00:04:48.805 --> 00:04:50.565
<v Speaker 0>you learn all these little tiny nuggets of

00:04:50.565 --> 00:04:52.405
<v Speaker 0>knowledge that you would never learn under any

00:04:52.405 --> 00:04:54.725
<v Speaker 0>book or other circumstance than when things are

00:04:54.725 --> 00:04:56.430
<v Speaker 0>on fire. And I think that is a

00:04:56.430 --> 00:04:58.670
<v Speaker 0>great way. And people should embrace failures and

00:04:58.670 --> 00:05:00.510
<v Speaker 0>bugs and all of this stuff. But we

00:05:00.510 --> 00:05:01.150
<v Speaker 0>have this

00:05:01.710 --> 00:05:03.150
<v Speaker 0>not that I wanna try and solve software

00:05:03.150 --> 00:05:05.710
<v Speaker 0>engineering as a community or anything. Right? But

00:05:05.710 --> 00:05:07.150
<v Speaker 0>there's a stigma, and we need to kinda

00:05:07.150 --> 00:05:09.230
<v Speaker 0>get past that and be vulnerable and be

00:05:09.230 --> 00:05:11.655
<v Speaker 0>willing to make mistakes in public. And, yeah,

00:05:11.655 --> 00:05:13.735
<v Speaker 0>I wish more people would do that anyway.

00:05:13.735 --> 00:05:15.895
<v Speaker 1>Yeah. Yep. Totally agree. That's why I think

00:05:15.895 --> 00:05:17.335
<v Speaker 0>it's really cool that we're taking a look

00:05:17.335 --> 00:05:19.655
<v Speaker 0>at Preak by Prequel

00:05:19.655 --> 00:05:22.455
<v Speaker 0>founded by yourself on this show. So

00:05:23.819 --> 00:05:25.020
<v Speaker 0>what is Preak?

00:05:25.979 --> 00:05:28.220
<v Speaker 1>Yeah. I guess there's you know, the short

00:05:28.220 --> 00:05:29.660
<v Speaker 1>version is

00:05:30.139 --> 00:05:32.379
<v Speaker 1>like, if you've ever written software or even,

00:05:32.379 --> 00:05:33.500
<v Speaker 1>you know, used it,

00:05:33.819 --> 00:05:35.419
<v Speaker 1>and and this could be, you know, SaaS

00:05:35.419 --> 00:05:37.340
<v Speaker 1>software or it could be Ubuntu,

00:05:37.340 --> 00:05:39.255
<v Speaker 1>whatever it is, You know, like we just

00:05:39.255 --> 00:05:40.935
<v Speaker 1>said, it inevitably breaks.

00:05:42.535 --> 00:05:44.455
<v Speaker 1>You know, all too often, you know, especially

00:05:44.455 --> 00:05:46.375
<v Speaker 1>if you're, you know, a maintainer or engineer

00:05:46.375 --> 00:05:48.695
<v Speaker 1>that has to support that software, even if

00:05:48.695 --> 00:05:50.695
<v Speaker 1>you're in customer success and you've, you know,

00:05:50.695 --> 00:05:52.295
<v Speaker 1>got a bunch of known issues with older

00:05:52.295 --> 00:05:54.440
<v Speaker 1>versions of software, know, when it breaks, you

00:05:54.440 --> 00:05:56.120
<v Speaker 1>often go on this hunt, and you're looking

00:05:56.120 --> 00:05:58.120
<v Speaker 1>through all of this data. You you start

00:05:58.120 --> 00:05:59.320
<v Speaker 1>with your investigation,

00:05:59.720 --> 00:06:02.199
<v Speaker 1>you know, hours, sometimes days later, you'll end

00:06:02.199 --> 00:06:03.960
<v Speaker 1>up like, oh, here's a known issue with

00:06:03.960 --> 00:06:05.320
<v Speaker 1>a bunch of other people that have run

00:06:05.320 --> 00:06:07.400
<v Speaker 1>into the same thing, and here's what they

00:06:07.400 --> 00:06:09.655
<v Speaker 1>did to fix it. And, oh, let me

00:06:09.655 --> 00:06:11.575
<v Speaker 1>try that. Okay. Cool. That fixed it. Now

00:06:11.575 --> 00:06:13.335
<v Speaker 1>let me put a detection in place.

00:06:14.135 --> 00:06:14.695
<v Speaker 1>And

00:06:15.015 --> 00:06:17.015
<v Speaker 1>that I don't like that world. That world's

00:06:17.015 --> 00:06:18.455
<v Speaker 1>not fun to live in. I mean, look.

00:06:18.455 --> 00:06:20.215
<v Speaker 1>I love doing investigations. I love it when

00:06:20.215 --> 00:06:20.935
<v Speaker 1>software breaks,

00:06:21.349 --> 00:06:23.910
<v Speaker 1>but it's always that bittersweet moment whenever you

00:06:23.910 --> 00:06:26.230
<v Speaker 1>find that issue that other people have seen.

00:06:26.629 --> 00:06:29.110
<v Speaker 1>I think Preak is sort of our

00:06:30.150 --> 00:06:32.069
<v Speaker 1>our vision is to kind of create a

00:06:32.069 --> 00:06:34.710
<v Speaker 1>world where if someone in the world has

00:06:34.710 --> 00:06:35.909
<v Speaker 1>seen this problem before,

00:06:36.775 --> 00:06:38.535
<v Speaker 1>that should be the last time. That first

00:06:38.535 --> 00:06:39.895
<v Speaker 1>time should be the last time. And then

00:06:39.895 --> 00:06:41.495
<v Speaker 1>we should start with that detection and share

00:06:41.495 --> 00:06:42.295
<v Speaker 1>that knowledge.

00:06:42.695 --> 00:06:44.615
<v Speaker 1>Kind of we call it reliability intelligence,

00:06:44.775 --> 00:06:46.295
<v Speaker 1>common reliability enumerations.

00:06:46.295 --> 00:06:48.135
<v Speaker 1>But I think that's that's the goal of

00:06:48.135 --> 00:06:49.495
<v Speaker 1>PREC is how do you come up with

00:06:49.495 --> 00:06:50.615
<v Speaker 1>a way where you can start with a

00:06:50.615 --> 00:06:53.730
<v Speaker 1>detection first that actually shows you the problem

00:06:53.730 --> 00:06:56.050
<v Speaker 1>and the mitigation? Like, here's what the rest

00:06:56.050 --> 00:06:57.330
<v Speaker 1>of the community has done when they've seen

00:06:57.330 --> 00:06:58.050
<v Speaker 1>this problem.

00:06:58.690 --> 00:07:01.010
<v Speaker 0>Yeah. I love that. You're building

00:07:01.410 --> 00:07:04.370
<v Speaker 0>a library, a collective knowledge, if you will,

00:07:04.370 --> 00:07:04.930
<v Speaker 0>of

00:07:05.875 --> 00:07:08.435
<v Speaker 0>things that go wrong in software and allowing

00:07:08.435 --> 00:07:11.475
<v Speaker 0>people to detect that early upfront, a shift

00:07:11.475 --> 00:07:12.995
<v Speaker 0>left if you wanna throw in a corporate

00:07:12.995 --> 00:07:15.155
<v Speaker 0>buzzword. Right? That is a a good mission,

00:07:15.155 --> 00:07:17.635
<v Speaker 0>a very noble mission indeed. Yeah. We're giving

00:07:18.195 --> 00:07:19.555
<v Speaker 1>Sorry. I was just gonna say it's like

00:07:19.555 --> 00:07:21.950
<v Speaker 1>we're it's it's sort of a new idea

00:07:21.950 --> 00:07:24.590
<v Speaker 1>and reliability, but it's also an approach that

00:07:24.590 --> 00:07:27.470
<v Speaker 1>has worked really well in security for twenty

00:07:27.470 --> 00:07:29.790
<v Speaker 1>years because it was a similar situation

00:07:29.950 --> 00:07:31.630
<v Speaker 1>in the early 2000s where you would have

00:07:32.545 --> 00:07:35.825
<v Speaker 1>individuals chasing problems, but those problems were security

00:07:35.825 --> 00:07:38.225
<v Speaker 1>problems. And then eventually tools were created to

00:07:38.225 --> 00:07:40.465
<v Speaker 1>share that knowledge and to allow that one

00:07:40.465 --> 00:07:42.385
<v Speaker 1>person to benefit from that community knowledge. And

00:07:42.385 --> 00:07:43.745
<v Speaker 1>that's kind of the same principle here.

00:07:45.070 --> 00:07:46.030
<v Speaker 0>So

00:07:46.030 --> 00:07:47.870
<v Speaker 0>let's rewind it back to the beginning. Right?

00:07:47.870 --> 00:07:50.590
<v Speaker 0>You've done your government job. You decided to

00:07:50.590 --> 00:07:52.830
<v Speaker 0>go do something different. You ended up at

00:07:52.830 --> 00:07:54.509
<v Speaker 0>Elastic. You're doing open source, and then you

00:07:54.509 --> 00:07:55.710
<v Speaker 0>were like, you know what? I am gonna

00:07:55.710 --> 00:07:57.805
<v Speaker 0>start my own company. Was this your first

00:07:57.805 --> 00:07:59.645
<v Speaker 0>idea? Why did you have this idea? What

00:07:59.645 --> 00:08:02.365
<v Speaker 0>is the history behind this? Yeah.

00:08:03.325 --> 00:08:06.765
<v Speaker 1>Good question. So it's definitely a scary prospect

00:08:06.765 --> 00:08:08.285
<v Speaker 1>to start your

00:08:08.605 --> 00:08:09.805
<v Speaker 1>own thing, but

00:08:10.300 --> 00:08:12.300
<v Speaker 1>it was sort of a problem that we

00:08:12.300 --> 00:08:14.540
<v Speaker 1>couldn't escape. So my co founder and I,

00:08:14.540 --> 00:08:16.780
<v Speaker 1>Lynne and Brown, both we met at Endgame.

00:08:18.140 --> 00:08:19.980
<v Speaker 1>Like I said earlier, software

00:08:19.980 --> 00:08:22.700
<v Speaker 1>failure is just an inevitable thing that happens

00:08:22.700 --> 00:08:24.780
<v Speaker 1>when you're building a software product. It's just

00:08:24.780 --> 00:08:25.340
<v Speaker 1>going to happen.

00:08:25.955 --> 00:08:28.675
<v Speaker 1>And again, it was always just like bittersweet

00:08:28.675 --> 00:08:30.754
<v Speaker 1>moment when we would have a customer issue

00:08:30.754 --> 00:08:31.635
<v Speaker 1>or an outage,

00:08:31.875 --> 00:08:33.955
<v Speaker 1>and we found that here's this known issue

00:08:33.955 --> 00:08:35.714
<v Speaker 1>in this version of this message queue you're

00:08:35.714 --> 00:08:37.475
<v Speaker 1>using. And I was like, cool, we found

00:08:37.475 --> 00:08:39.475
<v Speaker 1>it. But also what a bummer that people

00:08:39.475 --> 00:08:40.834
<v Speaker 1>in the community have known about this for

00:08:40.834 --> 00:08:42.970
<v Speaker 1>so long. It just sort of nagged us.

00:08:43.049 --> 00:08:45.290
<v Speaker 1>I think I ended up writing a blog

00:08:45.290 --> 00:08:47.930
<v Speaker 1>in 2017 about this where we had this

00:08:47.930 --> 00:08:49.530
<v Speaker 1>customer outage that lasted a week,

00:08:50.170 --> 00:08:51.130
<v Speaker 1>and we found the issue. It was a

00:08:51.130 --> 00:08:52.650
<v Speaker 1>known issue that had been discovered in the

00:08:52.650 --> 00:08:54.330
<v Speaker 1>community about three months prior to that.

00:08:54.810 --> 00:08:56.695
<v Speaker 1>And it was just always like, how do

00:08:56.695 --> 00:08:59.095
<v Speaker 1>you start with the detection first? Because today,

00:08:59.095 --> 00:09:00.135
<v Speaker 1>you kind of have to start with the

00:09:00.135 --> 00:09:02.535
<v Speaker 1>investigation. A customer tells you there's an outage

00:09:02.695 --> 00:09:05.894
<v Speaker 1>or there's some metric threshold that's ringing an

00:09:05.894 --> 00:09:07.975
<v Speaker 1>alarm, and you have to start with your

00:09:07.975 --> 00:09:10.100
<v Speaker 1>investigation. So I think it's just something that

00:09:10.100 --> 00:09:11.779
<v Speaker 1>we couldn't escape and the problem kind of

00:09:11.779 --> 00:09:12.660
<v Speaker 1>chased us.

00:09:13.779 --> 00:09:16.500
<v Speaker 1>With some of the recent technologies like eBPF

00:09:17.380 --> 00:09:18.500
<v Speaker 1>and sort of some of the lessons that

00:09:18.500 --> 00:09:21.300
<v Speaker 1>we learned building an endpoint security product, we

00:09:21.300 --> 00:09:22.820
<v Speaker 1>kind of thought maybe there's a different approach

00:09:22.820 --> 00:09:23.860
<v Speaker 1>that we could take and take some of

00:09:23.860 --> 00:09:25.135
<v Speaker 1>the lessons that we learned in security and

00:09:25.135 --> 00:09:26.335
<v Speaker 1>bring them to reliability.

00:09:27.135 --> 00:09:27.774
<v Speaker 1>Nice.

00:09:28.495 --> 00:09:30.654
<v Speaker 0>Alright. Before we get hands on then,

00:09:30.975 --> 00:09:32.654
<v Speaker 0>who is this for? Right? Is this for

00:09:32.654 --> 00:09:34.095
<v Speaker 0>every single developer? Is it gonna make their

00:09:34.095 --> 00:09:35.935
<v Speaker 0>lives easier? Is it for Rust developers, Go

00:09:35.935 --> 00:09:40.175
<v Speaker 0>developers, PHP developers? Like, who is Prequel's

00:09:39.380 --> 00:09:41.459
<v Speaker 0>ideal audience? Who should be paying attention right

00:09:41.459 --> 00:09:41.940
<v Speaker 0>now?

00:09:42.260 --> 00:09:42.900
<v Speaker 1>Yeah.

00:09:43.220 --> 00:09:45.060
<v Speaker 1>Very good question. So

00:09:45.779 --> 00:09:48.339
<v Speaker 1>I think there's some obvious answers. If you've

00:09:48.339 --> 00:09:51.220
<v Speaker 1>ever had to wear a pager and get

00:09:51.220 --> 00:09:52.980
<v Speaker 1>called in whenever something breaks,

00:09:54.145 --> 00:09:56.065
<v Speaker 1>That's definitely and and this could be someone

00:09:56.065 --> 00:09:57.985
<v Speaker 1>in the SRE team or customer success. You

00:09:57.985 --> 00:09:59.105
<v Speaker 1>know, if you've had to go out and

00:09:59.105 --> 00:10:01.105
<v Speaker 1>debug a product that your company is, you

00:10:01.105 --> 00:10:02.945
<v Speaker 1>know, providing and there's a bunch of known

00:10:02.945 --> 00:10:04.945
<v Speaker 1>issues, I think this is definitely a a

00:10:04.945 --> 00:10:06.625
<v Speaker 1>tool pre can can help you and common

00:10:06.625 --> 00:10:08.065
<v Speaker 1>reliability numerations can help you.

00:10:08.770 --> 00:10:10.130
<v Speaker 1>But I actually think the world is is

00:10:10.130 --> 00:10:11.650
<v Speaker 1>also a little bit bigger than that too.

00:10:11.650 --> 00:10:13.570
<v Speaker 1>So if you're a developer that's building your

00:10:13.570 --> 00:10:15.970
<v Speaker 1>own application that's being hosted and you wanna

00:10:15.970 --> 00:10:19.170
<v Speaker 1>have some proactive detections for common problems that

00:10:19.170 --> 00:10:20.690
<v Speaker 1>especially older versions could run across,

00:10:21.305 --> 00:10:23.385
<v Speaker 1>this is definitely something that, you know, those

00:10:23.385 --> 00:10:26.024
<v Speaker 1>those engineers could use. And I'll even say,

00:10:26.024 --> 00:10:27.785
<v Speaker 1>like, look. I I've been a Linux user

00:10:27.785 --> 00:10:30.425
<v Speaker 1>for a long time. I love Linux. But,

00:10:30.425 --> 00:10:32.185
<v Speaker 1>like, every once in a while, like, it's

00:10:32.185 --> 00:10:34.870
<v Speaker 1>just stuff breaks. If you upgrade to the

00:10:34.870 --> 00:10:37.350
<v Speaker 1>latest version of something, your NVIDIA driver doesn't

00:10:37.350 --> 00:10:39.270
<v Speaker 1>work. And so I actually think there's a

00:10:39.270 --> 00:10:40.630
<v Speaker 1>cool opportunity for

00:10:41.270 --> 00:10:43.030
<v Speaker 1>if you've got some known issues in your

00:10:43.030 --> 00:10:45.750
<v Speaker 1>MacOS laptop or your Ubuntu box,

00:10:46.545 --> 00:10:48.865
<v Speaker 1>Instead of hunting and spelunking through all of

00:10:48.865 --> 00:10:51.745
<v Speaker 1>the, like, customer support message boards, there's, like,

00:10:51.745 --> 00:10:53.745
<v Speaker 1>an opportunity to to do something there too.

00:10:55.185 --> 00:10:55.745
<v Speaker 1>Awesome.

00:10:56.145 --> 00:10:59.100
<v Speaker 0>Are you running Linux right now? I am.

00:10:59.100 --> 00:11:01.180
<v Speaker 1>And it's a bold move, and we'll see

00:11:01.180 --> 00:11:01.980
<v Speaker 1>how it goes.

00:11:03.180 --> 00:11:04.300
<v Speaker 1>What distro?

00:11:05.020 --> 00:11:05.980
<v Speaker 1>Ubuntu.

00:11:05.980 --> 00:11:07.580
<v Speaker 1>Ubuntu. No. I I I've I've, you know,

00:11:07.580 --> 00:11:10.060
<v Speaker 1>I've been previous user. KDE

00:11:10.060 --> 00:11:13.180
<v Speaker 1>used ads, but, you know, you can't Ubuntu

00:11:13.180 --> 00:11:15.384
<v Speaker 1>is fine. Alright. Well, I'll give you the

00:11:15.384 --> 00:11:17.625
<v Speaker 0>fear. A man in the chat is an.

00:11:17.865 --> 00:11:18.985
<v Speaker 0>Me too, Ben. Oh,

00:11:19.464 --> 00:11:22.425
<v Speaker 1>know. Your reputation precedes you. I I'm aware.

00:11:23.225 --> 00:11:25.464
<v Speaker 0>I also I love Nexus, and I run

00:11:25.464 --> 00:11:26.985
<v Speaker 0>it on my laptop because I never have

00:11:26.985 --> 00:11:28.185
<v Speaker 0>to stream from it, and it's not a

00:11:28.185 --> 00:11:28.425
<v Speaker 0>problem.

00:11:29.310 --> 00:11:30.910
<v Speaker 0>But I've had so many issues

00:11:31.230 --> 00:11:32.910
<v Speaker 0>on a stream where someone's like, oh, just

00:11:32.910 --> 00:11:34.670
<v Speaker 0>download my binary. And I'm like, mate, come

00:11:34.670 --> 00:11:36.910
<v Speaker 0>on. I'm running next. I I can't I

00:11:36.910 --> 00:11:38.590
<v Speaker 0>can't do dynamic linking, and then it ends

00:11:38.590 --> 00:11:40.910
<v Speaker 0>up it's just it's a horrible, horrible stream.

00:11:41.470 --> 00:11:43.505
<v Speaker 0>So now I've used art specifically just for

00:11:43.505 --> 00:11:45.505
<v Speaker 0>this rig, but I have recently moved away

00:11:45.505 --> 00:11:47.905
<v Speaker 0>from running Gnome or KDE, and I'm on,

00:11:47.905 --> 00:11:50.385
<v Speaker 0>like, a weird Whalen to Thailand thing. And

00:11:50.465 --> 00:11:52.225
<v Speaker 0>all I'm gonna say is if I disappear,

00:11:52.225 --> 00:11:54.545
<v Speaker 0>it's not intentional. And Okay. No. I get

00:11:54.545 --> 00:11:56.465
<v Speaker 1>it. Things could happen. So it was that

00:11:56.465 --> 00:11:58.640
<v Speaker 0>actually never know, like you said. So You

00:11:58.640 --> 00:11:59.920
<v Speaker 0>could tell tell the rest of people on

00:11:59.920 --> 00:12:01.280
<v Speaker 1>my team too when that happens to me.

00:12:01.280 --> 00:12:02.480
<v Speaker 1>Like, hey. I'm not the only one. That

00:12:02.480 --> 00:12:04.480
<v Speaker 1>means all of us. We're we're we're

00:12:04.880 --> 00:12:06.160
<v Speaker 0>I love it when someone sends me a

00:12:06.160 --> 00:12:08.080
<v Speaker 0>Zoom link, and I'm like, I mean, I

00:12:08.080 --> 00:12:10.080
<v Speaker 0>could try. I mean We'll see how it

00:12:10.080 --> 00:12:12.080
<v Speaker 1>goes. We'll see. Never worked in the last

00:12:12.080 --> 00:12:13.840
<v Speaker 0>six months, but maybe today's a day. Yeah.

00:12:14.055 --> 00:12:16.615
<v Speaker 0>Who knows? Who knows? Well, Russell's in the

00:12:16.615 --> 00:12:17.975
<v Speaker 0>chat. I love the the first time I

00:12:17.975 --> 00:12:19.895
<v Speaker 0>mentioned clustered in months and Russell just pops

00:12:19.895 --> 00:12:21.415
<v Speaker 0>in the chat. And also, happen to be

00:12:21.415 --> 00:12:23.015
<v Speaker 0>wearing the clustered T shirt today. It's just

00:12:23.015 --> 00:12:24.774
<v Speaker 0>something I think is telling me that clustered

00:12:24.774 --> 00:12:26.855
<v Speaker 0>needs to come back. So Well, I'm embarrassed

00:12:26.855 --> 00:12:28.774
<v Speaker 1>to admit. I don't actually know what clustered

00:12:28.774 --> 00:12:29.495
<v Speaker 1>is. What is that?

00:12:30.610 --> 00:12:32.930
<v Speaker 0>It's a show where I provision two handcrafted

00:12:32.930 --> 00:12:35.410
<v Speaker 0>artisanal bare metal Kubernetes cluster and then give

00:12:35.410 --> 00:12:36.850
<v Speaker 0>them to people and say, do your worst,

00:12:36.850 --> 00:12:38.129
<v Speaker 0>then they break them. And then we fix

00:12:38.129 --> 00:12:40.449
<v Speaker 1>all these. And you're and you you you

00:12:40.449 --> 00:12:41.730
<v Speaker 1>haven't done this in a while? You definitely

00:12:41.730 --> 00:12:43.845
<v Speaker 1>have to bring us back. Yeah. We did,

00:12:43.845 --> 00:12:45.205
<v Speaker 0>like, 60 episodes,

00:12:46.325 --> 00:12:47.845
<v Speaker 0>but then it just well, I I I

00:12:47.845 --> 00:12:49.605
<v Speaker 0>quit my job and started the Rawkode Academy

00:12:49.605 --> 00:12:51.845
<v Speaker 0>full time in September 22. And funnily enough,

00:12:51.845 --> 00:12:53.765
<v Speaker 0>since it happened, custard hasn't happened. And I

00:12:53.765 --> 00:12:55.125
<v Speaker 0>I wonder if there's a correlation. I don't

00:12:55.125 --> 00:12:57.510
<v Speaker 0>know. Well, not company is hard. So you

00:12:57.510 --> 00:12:59.270
<v Speaker 0>know? That's cool. That's cool, though. That's awesome.

00:12:59.430 --> 00:13:02.230
<v Speaker 0>Alright. Let's get some terminals on the screen.

00:13:03.510 --> 00:13:05.110
<v Speaker 0>So let's see.

00:13:05.510 --> 00:13:07.590
<v Speaker 0>Where's my screen share? So I'm gonna kick

00:13:07.590 --> 00:13:10.565
<v Speaker 0>things off today, hopefully, you know, Linux and

00:13:10.565 --> 00:13:12.645
<v Speaker 0>all. But what I have here

00:13:13.045 --> 00:13:13.685
<v Speaker 0>is

00:13:15.525 --> 00:13:17.285
<v Speaker 0>not my screen. Let's try it again.

00:13:18.565 --> 00:13:20.725
<v Speaker 0>There we go. I have the Prequel website,

00:13:20.725 --> 00:13:22.725
<v Speaker 0>so it's available at prequel.dev.

00:13:24.750 --> 00:13:26.430
<v Speaker 0>We could go to features. We could click

00:13:26.430 --> 00:13:28.670
<v Speaker 0>an open source. As always, with Rawkode Live,

00:13:28.670 --> 00:13:30.030
<v Speaker 0>we're gonna go straight to the docs and

00:13:30.030 --> 00:13:32.190
<v Speaker 0>look for the wonderful getting started button,

00:13:32.350 --> 00:13:33.870
<v Speaker 0>which we can already see.

00:13:34.670 --> 00:13:36.190
<v Speaker 0>I don't have anything else prepared.

00:13:38.454 --> 00:13:40.295
<v Speaker 0>Except for my new shell. I don't have

00:13:40.295 --> 00:13:42.935
<v Speaker 0>pre installed, so we are starting from complete

00:13:42.935 --> 00:13:43.815
<v Speaker 0>zero.

00:13:44.214 --> 00:13:45.735
<v Speaker 1>What what is your weird shell, by the

00:13:45.735 --> 00:13:47.735
<v Speaker 1>way? I saw that you don't use bash.

00:13:47.735 --> 00:13:48.695
<v Speaker 1>Right? What are you using?

00:13:49.255 --> 00:13:50.935
<v Speaker 0>New shell. So it's a shell written in

00:13:50.935 --> 00:13:52.615
<v Speaker 0>Rust. Okay. Written in Rust may be a

00:13:52.615 --> 00:13:53.894
<v Speaker 0>common thing you hear me say

00:13:54.370 --> 00:13:56.290
<v Speaker 0>through all my sessions. What I love about

00:13:56.290 --> 00:13:57.970
<v Speaker 0>it is every command is a data frame.

00:13:57.970 --> 00:13:59.410
<v Speaker 0>So when you run LS, this is actually

00:13:59.410 --> 00:14:00.769
<v Speaker 0>a data frame where you can then see,

00:14:00.769 --> 00:14:03.329
<v Speaker 0>well, where the size is greater than or

00:14:03.329 --> 00:14:05.730
<v Speaker 0>equal to, like, one megabyte and stuff. So

00:14:05.730 --> 00:14:07.250
<v Speaker 0>that was a terrible example because I don't

00:14:07.250 --> 00:14:09.649
<v Speaker 0>have any files, but let's go with 400

00:14:09.915 --> 00:14:13.115
<v Speaker 0>bytes. That's cool. And then you could actually,

00:14:13.115 --> 00:14:15.274
<v Speaker 0>like, get it as a a table or

00:14:15.274 --> 00:14:17.755
<v Speaker 0>a a grid and, like I'm not gonna

00:14:17.755 --> 00:14:19.515
<v Speaker 0>go into new shell right now, but it's

00:14:19.515 --> 00:14:21.195
<v Speaker 0>a very cool very cool shell.

00:14:21.675 --> 00:14:23.760
<v Speaker 0>The only downside is nothing works, like, the

00:14:23.760 --> 00:14:25.040
<v Speaker 0>way you expect. So you have to, like,

00:14:25.040 --> 00:14:27.040
<v Speaker 0>relearn how to do everything. Like, even acting

00:14:27.040 --> 00:14:29.600
<v Speaker 0>the accessing the environment is, like you know?

00:14:29.600 --> 00:14:31.120
<v Speaker 0>Oh, good. That's probably not gonna go well

00:14:31.120 --> 00:14:33.040
<v Speaker 1>for me. I've been using Vim forever, and

00:14:33.040 --> 00:14:34.880
<v Speaker 1>I still only know, like, four commands, and

00:14:34.880 --> 00:14:35.520
<v Speaker 1>it's, like, 30.

00:14:39.255 --> 00:14:40.055
<v Speaker 0>Alright.

00:14:40.135 --> 00:14:42.055
<v Speaker 0>Let's get this installed. So

00:14:42.455 --> 00:14:44.055
<v Speaker 0>I can see here we've got some sort

00:14:44.055 --> 00:14:45.815
<v Speaker 0>of terminal CLI,

00:14:47.255 --> 00:14:49.575
<v Speaker 0>and we're just gonna download this and run.

00:14:49.575 --> 00:14:51.415
<v Speaker 0>I mean, I see w get right away,

00:14:51.415 --> 00:14:53.970
<v Speaker 0>and I'm like, we we why? Like, curl

00:14:53.970 --> 00:14:58.130
<v Speaker 0>exists. What why are we That's fair. And

00:14:58.130 --> 00:15:00.050
<v Speaker 1>as you go on, you'll see we ended

00:15:00.050 --> 00:15:01.810
<v Speaker 1>up moving over to curl in our docs.

00:15:01.810 --> 00:15:04.290
<v Speaker 1>We weren't consistent, and I will definitely change

00:15:04.290 --> 00:15:05.730
<v Speaker 1>this to curl. But the rest of it,

00:15:05.730 --> 00:15:06.770
<v Speaker 1>we do eventually switch over.

00:15:07.695 --> 00:15:09.695
<v Speaker 1>I I happen to know the wget developer

00:15:09.695 --> 00:15:12.015
<v Speaker 1>though, the wget two especially. So, you know,

00:15:12.015 --> 00:15:13.455
<v Speaker 1>I gotta get them both ones.

00:15:14.495 --> 00:15:15.135
<v Speaker 0>I

00:15:15.375 --> 00:15:17.855
<v Speaker 0>mean, wget is is I mean, curl is

00:15:17.855 --> 00:15:19.375
<v Speaker 0>just a de facto. Right? I mean, I

00:15:19.375 --> 00:15:21.455
<v Speaker 0>love the the author of it, Daniel. I

00:15:21.455 --> 00:15:24.060
<v Speaker 0>can't remember your surname. Sorry. But the fact

00:15:24.060 --> 00:15:25.980
<v Speaker 0>that he's got credits in, like, every car

00:15:25.980 --> 00:15:27.660
<v Speaker 0>in the world and even movie credits and

00:15:27.660 --> 00:15:30.060
<v Speaker 0>stuff because Carl is just so ubiquitous.

00:15:30.060 --> 00:15:31.899
<v Speaker 0>It's so cool. Wait. So you say movie

00:15:31.899 --> 00:15:32.540
<v Speaker 1>credits?

00:15:32.940 --> 00:15:34.940
<v Speaker 0>Yeah. Because they use Carl on making movies

00:15:34.940 --> 00:15:36.620
<v Speaker 0>now. So it's like some of the movies

00:15:36.620 --> 00:15:38.204
<v Speaker 0>that he can just go to the end

00:15:38.204 --> 00:15:39.885
<v Speaker 0>of it, there's like this he's in it,

00:15:39.885 --> 00:15:41.805
<v Speaker 0>and it's, like, weird. So So you're telling

00:15:41.805 --> 00:15:43.325
<v Speaker 1>me if I can get someone in a

00:15:43.325 --> 00:15:45.805
<v Speaker 1>movie to use Preak, we're gonna get credit?

00:15:45.805 --> 00:15:46.925
<v Speaker 1>Is that what I'm hearing?

00:15:47.565 --> 00:15:49.644
<v Speaker 0>I think that's the way it runs. Right?

00:15:49.644 --> 00:15:51.910
<v Speaker 1>That was pretty cool. Alright. Know. Today, I

00:15:51.910 --> 00:15:52.470
<v Speaker 0>learned.

00:15:52.790 --> 00:15:55.430
<v Speaker 0>Yeah. Alright. I'm gonna check my. I don't

00:15:55.430 --> 00:15:56.949
<v Speaker 0>think the talks do that yet, but I'm

00:15:56.949 --> 00:15:59.110
<v Speaker 0>just gonna assume I've done my tar.

00:16:00.470 --> 00:16:02.310
<v Speaker 0>And then oh, you want me to stick

00:16:02.310 --> 00:16:03.829
<v Speaker 0>it somewhere I can run it? That probably

00:16:03.829 --> 00:16:04.950
<v Speaker 0>makes sense. Alright.

00:16:05.430 --> 00:16:06.230
<v Speaker 0>Okay. So

00:16:06.834 --> 00:16:08.675
<v Speaker 0>run zero move.

00:16:13.235 --> 00:16:15.235
<v Speaker 0>Mean, I can stick it somewhere else. But

00:16:15.394 --> 00:16:17.154
<v Speaker 1>Okay. So alright. Run zero.

00:16:17.795 --> 00:16:19.315
<v Speaker 1>Look. I thought I knew stuff, but I

00:16:19.315 --> 00:16:20.915
<v Speaker 1>what what is is that a new new

00:16:20.915 --> 00:16:22.360
<v Speaker 1>thing, or is that what what am I

00:16:22.360 --> 00:16:23.560
<v Speaker 1>looking at? What's run zero?

00:16:24.199 --> 00:16:25.639
<v Speaker 0>I I mean, we're supposed to be focusing

00:16:25.639 --> 00:16:27.240
<v Speaker 0>on preach today. Come on. I I know.

00:16:27.240 --> 00:16:29.000
<v Speaker 1>And we will. Trust me. If you go

00:16:29.000 --> 00:16:30.759
<v Speaker 1>to preach, give it a star. Okay. What

00:16:30.759 --> 00:16:31.720
<v Speaker 1>is run zero?

00:16:32.199 --> 00:16:34.199
<v Speaker 0>So you know how sudo works. Right? Is

00:16:34.199 --> 00:16:35.560
<v Speaker 0>that they have a set UID bit of

00:16:35.560 --> 00:16:37.514
<v Speaker 0>one, which means it's really in unsecured. So

00:16:37.514 --> 00:16:38.954
<v Speaker 0>run zero was

00:16:41.194 --> 00:16:43.035
<v Speaker 0>oh, what's your name? Pottering.

00:16:43.435 --> 00:16:44.875
<v Speaker 0>System d guy. Anyway,

00:16:45.194 --> 00:16:45.755
<v Speaker 0>he

00:16:46.555 --> 00:16:49.435
<v Speaker 0>basically wrote his own privilege escalation

00:16:49.435 --> 00:16:51.675
<v Speaker 0>or elevation, whatever you wanna call it, tool,

00:16:51.675 --> 00:16:53.160
<v Speaker 0>which is part of system d called run

00:16:53.160 --> 00:16:55.079
<v Speaker 0>zero that then runs through the system d

00:16:55.079 --> 00:16:56.600
<v Speaker 0>stack to elevate my privileges,

00:16:56.760 --> 00:16:59.399
<v Speaker 0>and it's super secure. So I'm now just

00:16:59.399 --> 00:17:00.839
<v Speaker 0>trying to use it as much as possible.

00:17:00.839 --> 00:17:01.560
<v Speaker 1>That's cool.

00:17:01.959 --> 00:17:04.520
<v Speaker 1>Another I know you're in TK exec before

00:17:04.520 --> 00:17:06.599
<v Speaker 0>I just sudo as well, which is polka

00:17:06.599 --> 00:17:09.375
<v Speaker 0>exec. So Mhmm. Mhmm. I'm I'm just trying

00:17:09.375 --> 00:17:11.295
<v Speaker 0>to I don't I I don't have a

00:17:11.295 --> 00:17:12.494
<v Speaker 0>job. I just sit and play with tech

00:17:12.494 --> 00:17:14.174
<v Speaker 0>all day, so I get to, like, experiment.

00:17:14.335 --> 00:17:16.015
<v Speaker 1>Well, listen. This is why people watch the

00:17:16.015 --> 00:17:18.095
<v Speaker 1>podcast. You're gonna learn stuff. This is great.

00:17:19.695 --> 00:17:20.575
<v Speaker 1>This is awesome.

00:17:20.815 --> 00:17:22.815
<v Speaker 0>Alright. Okay. So

00:17:22.950 --> 00:17:25.190
<v Speaker 0>I mean, I'm assuming I'm not done your

00:17:25.190 --> 00:17:27.750
<v Speaker 0>source y bash nonsense. Right? But I could

00:17:27.750 --> 00:17:28.309
<v Speaker 0>probably.

00:17:29.350 --> 00:17:30.389
<v Speaker 0>Alright. Cool.

00:17:32.070 --> 00:17:34.149
<v Speaker 0>We'll scroll down, and we've got the ability

00:17:34.149 --> 00:17:35.590
<v Speaker 0>to verify. So this is gonna run the

00:17:35.590 --> 00:17:37.029
<v Speaker 0>checks. I'm I should probably done that before

00:17:37.029 --> 00:17:39.669
<v Speaker 0>I stuck it in my user local, but

00:17:38.805 --> 00:17:40.485
<v Speaker 0>that's fine. And you Yeah. I'm here. Yeah.

00:17:40.485 --> 00:17:42.325
<v Speaker 0>You can yell at me if it's insecure.

00:17:42.325 --> 00:17:42.885
<v Speaker 1>Yeah.

00:17:44.485 --> 00:17:46.085
<v Speaker 0>Mean, where did I download it from? Oh,

00:17:46.085 --> 00:17:48.805
<v Speaker 0>GitHub releases. Yeah. We're we're good. Unless someone's

00:17:48.805 --> 00:17:50.645
<v Speaker 0>broken into your CICD pipeline, we should be

00:17:50.645 --> 00:17:50.885
<v Speaker 0>okay.

00:17:51.799 --> 00:17:54.360
<v Speaker 0>You also have a Kubernetes plugin that

00:17:54.360 --> 00:17:56.280
<v Speaker 0>required me to have crew installed, which I

00:17:56.280 --> 00:17:56.999
<v Speaker 0>can do.

00:17:57.480 --> 00:17:58.679
<v Speaker 0>I don't know. Does it get a starter

00:17:58.679 --> 00:18:00.760
<v Speaker 0>guide require Kubernetes? Should I get this ready?

00:18:00.760 --> 00:18:02.600
<v Speaker 0>No. No. No. No need. Yeah.

00:18:02.919 --> 00:18:04.039
<v Speaker 0>I like crew,

00:18:04.919 --> 00:18:05.640
<v Speaker 0>but I'm a

00:18:06.465 --> 00:18:08.784
<v Speaker 0>I just use to control standard stuff for

00:18:08.784 --> 00:18:11.184
<v Speaker 0>everything because it works everywhere. So

00:18:12.145 --> 00:18:12.705
<v Speaker 0>alright.

00:18:13.424 --> 00:18:15.745
<v Speaker 0>Alright. We've done the boarding, but let's

00:18:15.745 --> 00:18:18.784
<v Speaker 0>go to running. So from here, we are

00:18:18.784 --> 00:18:19.424
<v Speaker 0>going to

00:18:23.110 --> 00:18:24.950
<v Speaker 0>get a demo application.

00:18:25.030 --> 00:18:26.470
<v Speaker 0>So now it's Yeah. Yeah.

00:18:27.990 --> 00:18:29.910
<v Speaker 1>See, we we switch over eventually. We get

00:18:29.910 --> 00:18:30.470
<v Speaker 1>there.

00:18:30.790 --> 00:18:31.909
<v Speaker 0>Alright. So

00:18:32.150 --> 00:18:34.070
<v Speaker 0>this is filling. Okay. So you're using JQ

00:18:34.070 --> 00:18:36.309
<v Speaker 0>to get the latest release, get the download

00:18:36.309 --> 00:18:37.110
<v Speaker 0>URL, and

00:18:38.255 --> 00:18:39.695
<v Speaker 0>it's you you just want me to pull

00:18:39.695 --> 00:18:40.735
<v Speaker 0>down a binary.

00:18:41.215 --> 00:18:42.495
<v Speaker 1>Yeah. I mean, you can also do it

00:18:42.495 --> 00:18:44.335
<v Speaker 1>with Golang if you have Go installed,

00:18:44.735 --> 00:18:46.415
<v Speaker 1>but it's basically just a a little demo

00:18:46.415 --> 00:18:48.175
<v Speaker 1>service that it's got a couple bugs in

00:18:48.175 --> 00:18:49.055
<v Speaker 1>it that will,

00:18:49.455 --> 00:18:51.135
<v Speaker 1>you know, trigger and and show you how

00:18:51.135 --> 00:18:51.775
<v Speaker 1>the rules work.

00:18:52.550 --> 00:18:54.309
<v Speaker 0>Alright. And there is Kubernetes. You know what?

00:18:54.309 --> 00:18:55.590
<v Speaker 0>I mean, I made it we'll see how

00:18:55.590 --> 00:18:57.429
<v Speaker 0>how time goes. Right? But, you know, the

00:18:57.429 --> 00:18:58.870
<v Speaker 0>fact that I can apply the demo application

00:18:58.870 --> 00:19:00.630
<v Speaker 0>to Kubernetes cluster, we'll maybe do that as

00:19:00.630 --> 00:19:01.910
<v Speaker 0>well. I am gonna go with a Go

00:19:01.910 --> 00:19:03.350
<v Speaker 0>approach. Just Cool.

00:19:03.830 --> 00:19:04.710
<v Speaker 0>Why not?

00:19:05.030 --> 00:19:06.550
<v Speaker 0>And I'll I'll keep my output.

00:19:12.675 --> 00:19:14.675
<v Speaker 1>Yeah. One one thing to note for the

00:19:14.675 --> 00:19:17.315
<v Speaker 1>demo, it does need you to save the

00:19:17.315 --> 00:19:19.875
<v Speaker 1>logs to a log file to run precon.

00:19:21.270 --> 00:19:22.150
<v Speaker 0>Okay.

00:19:22.710 --> 00:19:24.230
<v Speaker 0>That's fine. I just wanna see what we're

00:19:24.230 --> 00:19:26.310
<v Speaker 0>in first before I rewrite it. Makes sense.

00:19:26.310 --> 00:19:27.590
<v Speaker 1>That makes sense. We we do need to

00:19:27.590 --> 00:19:29.030
<v Speaker 1>update it so that it can actually print

00:19:29.030 --> 00:19:30.950
<v Speaker 1>to both standard out and log to a

00:19:30.950 --> 00:19:31.429
<v Speaker 1>file.

00:19:32.310 --> 00:19:33.590
<v Speaker 1>What version of Go do you have? I

00:19:33.590 --> 00:19:34.870
<v Speaker 1>think this was compiled with one two four

00:19:34.870 --> 00:19:36.390
<v Speaker 1>one, so it should be fine. Looks like

00:19:36.390 --> 00:19:37.144
<v Speaker 1>it's working.

00:19:38.105 --> 00:19:39.144
<v Speaker 0>Yeah. I think

00:19:41.145 --> 00:19:43.544
<v Speaker 0>Go doesn't do dash dash, does it? Yeah.

00:19:43.544 --> 00:19:45.225
<v Speaker 0>One twenty four three. What are you? Look

00:19:45.225 --> 00:19:45.945
<v Speaker 1>at that.

00:19:46.664 --> 00:19:48.505
<v Speaker 0>Oh, I'm on Arch. We're all industrial. Right?

00:19:48.505 --> 00:19:49.865
<v Speaker 1>So That's true. That's a good point.

00:19:52.720 --> 00:19:54.000
<v Speaker 0>Maybe I should have just pulled down the

00:19:54.000 --> 00:19:55.600
<v Speaker 0>banner. Anyway, it's running. We've a web server

00:19:55.600 --> 00:19:56.640
<v Speaker 0>port eighty eighty.

00:19:58.320 --> 00:20:00.160
<v Speaker 0>Now I'll write I

00:20:02.640 --> 00:20:04.080
<v Speaker 0>can't remember what your file name was. But

00:20:04.400 --> 00:20:06.240
<v Speaker 1>Yeah. And, actually, you wanna do standard in

00:20:06.400 --> 00:20:08.800
<v Speaker 1>or sorry, standard out and standard air, both

00:20:08.325 --> 00:20:09.604
<v Speaker 1>to prec dot log.

00:20:15.605 --> 00:20:16.325
<v Speaker 0>Okay.

00:20:16.644 --> 00:20:18.804
<v Speaker 0>That should do it. Cool. I think.

00:20:20.245 --> 00:20:21.845
<v Speaker 0>But that's gonna run forever because it's a

00:20:21.845 --> 00:20:25.039
<v Speaker 0>global binary, so let's just kill that and

00:20:25.200 --> 00:20:26.000
<v Speaker 0>Preak.

00:20:26.480 --> 00:20:26.960
<v Speaker 0>Alright.

00:20:27.360 --> 00:20:29.120
<v Speaker 0>Do I need the downloading Go stuff? Is

00:20:29.120 --> 00:20:31.520
<v Speaker 0>that part of the process? Or No. No.

00:20:31.520 --> 00:20:33.040
<v Speaker 1>But you do wanna leave it running. The

00:20:33.040 --> 00:20:36.000
<v Speaker 1>the getting started guide will have you submit

00:20:36.000 --> 00:20:38.000
<v Speaker 1>an API request to trigger a bug, and

00:20:38.385 --> 00:20:39.825
<v Speaker 1>then we'll use break to detect it and

00:20:39.825 --> 00:20:41.345
<v Speaker 1>show you how to how to work how

00:20:41.345 --> 00:20:42.225
<v Speaker 1>to work week.

00:20:42.545 --> 00:20:45.665
<v Speaker 0>Alright. So now we're gonna curl. We're gonna

00:20:45.665 --> 00:20:47.664
<v Speaker 0>see some things. That sounds good to me.

00:20:48.305 --> 00:20:50.145
<v Speaker 0>Let's split to the right since we've got

00:20:50.145 --> 00:20:50.865
<v Speaker 0>a bit more space.

00:20:53.030 --> 00:20:55.830
<v Speaker 0>And, yeah, we've broken the thing. So

00:20:56.710 --> 00:20:59.030
<v Speaker 0>And it does look like only standard error

00:20:59.190 --> 00:21:00.710
<v Speaker 1>or sorry. Standard out went to the log.

00:21:00.710 --> 00:21:02.389
<v Speaker 1>Maybe check the log to confirm,

00:21:02.549 --> 00:21:04.710
<v Speaker 1>but I think standard error was not into

00:21:04.710 --> 00:21:05.110
<v Speaker 1>the log.

00:21:08.115 --> 00:21:09.475
<v Speaker 0>Yeah.

00:21:10.755 --> 00:21:12.275
<v Speaker 1>And the and the and the docs that

00:21:12.275 --> 00:21:14.035
<v Speaker 1>you can copy and paste it there. Yeah.

00:21:14.035 --> 00:21:15.955
<v Speaker 0>It's So I need a dash e.

00:21:17.475 --> 00:21:18.195
<v Speaker 0>So

00:21:18.675 --> 00:21:19.635
<v Speaker 0>dash e perk.

00:21:20.040 --> 00:21:21.720
<v Speaker 1>That's cool. Can I put them in different

00:21:21.720 --> 00:21:23.080
<v Speaker 0>files, do want them in the same file?

00:21:23.080 --> 00:21:24.360
<v Speaker 1>We're gonna run them in the same file.

00:21:24.360 --> 00:21:25.080
<v Speaker 1>Yeah. Yeah.

00:21:28.120 --> 00:21:29.880
<v Speaker 0>Oh, plus see,

00:21:29.880 --> 00:21:32.440
<v Speaker 0>New Shell. I'm learning. Right? Okay. So

00:21:36.875 --> 00:21:38.315
<v Speaker 0>can I do that with save?

00:21:38.875 --> 00:21:39.835
<v Speaker 0>Alright.

00:21:39.835 --> 00:21:41.274
<v Speaker 0>I know I can do that.

00:21:42.955 --> 00:21:43.434
<v Speaker 0>Alright.

00:21:54.710 --> 00:21:56.470
<v Speaker 0>What did I do wrong?

00:21:57.110 --> 00:21:59.270
<v Speaker 1>The copy and paste will work. You can

00:21:59.270 --> 00:22:02.150
<v Speaker 1>use that. It's the tried and true to,

00:22:02.150 --> 00:22:03.430
<v Speaker 1>you know, greater

00:22:04.630 --> 00:22:05.270
<v Speaker 1>than sign.

00:22:06.505 --> 00:22:08.184
<v Speaker 0>I know, but I wanna make it work.

00:22:08.184 --> 00:22:10.105
<v Speaker 0>Oh, force. Alright. Okay. So I I could

00:22:10.105 --> 00:22:11.945
<v Speaker 0>probably just do am

00:22:12.424 --> 00:22:14.264
<v Speaker 0>dash o plus e.

00:22:17.465 --> 00:22:18.744
<v Speaker 0>I

00:22:19.304 --> 00:22:20.184
<v Speaker 0>I don't know.

00:22:20.664 --> 00:22:21.385
<v Speaker 0>What am I doing?

00:22:22.399 --> 00:22:23.919
<v Speaker 0>F wants a foul name. He wants a

00:22:23.919 --> 00:22:25.679
<v Speaker 0>foul. Everything wants a foul name.

00:22:27.679 --> 00:22:28.399
<v Speaker 1>Right.

00:22:28.799 --> 00:22:30.799
<v Speaker 1>I believe in you, David. I believe in

00:22:30.799 --> 00:22:33.599
<v Speaker 1>you. Let's just jump back to bash because

00:22:35.039 --> 00:22:36.960
<v Speaker 1>Wait. You can't do some bash? Oh, interesting.

00:22:36.960 --> 00:22:37.120
<v Speaker 1>Okay.

00:22:38.495 --> 00:22:40.015
<v Speaker 1>Or so you can't do some new shell.

00:22:40.015 --> 00:22:42.094
<v Speaker 1>The the the okay. Cool. There you go.

00:22:42.815 --> 00:22:43.215
<v Speaker 1>So

00:22:44.095 --> 00:22:46.815
<v Speaker 1>Let me check the log. Carl.

00:22:46.975 --> 00:22:48.575
<v Speaker 0>Give me Carl. There we go.

00:22:49.534 --> 00:22:50.815
<v Speaker 0>I bet that didn't work with it.

00:22:52.220 --> 00:22:53.740
<v Speaker 1>I don't think that it did.

00:22:59.660 --> 00:23:01.660
<v Speaker 0>I just wanna state the address

00:23:02.140 --> 00:23:03.420
<v Speaker 0>dash e path.

00:23:04.054 --> 00:23:06.695
<v Speaker 0>Only works with dash r. Save failures are

00:23:06.695 --> 00:23:07.494
<v Speaker 0>all binary.

00:23:10.855 --> 00:23:12.615
<v Speaker 0>Oh. Let's copy and paste it. I'm not

00:23:12.695 --> 00:23:14.294
<v Speaker 0>I I don't wanna fade it. So what

00:23:14.695 --> 00:23:16.695
<v Speaker 1>yeah. What the the trick is, at least

00:23:16.695 --> 00:23:18.135
<v Speaker 1>in Bash, you have to

00:23:19.110 --> 00:23:21.270
<v Speaker 1>output it to the file. And then after

00:23:21.270 --> 00:23:24.230
<v Speaker 1>that, put the the standard error

00:23:24.710 --> 00:23:26.470
<v Speaker 1>the the, like, the, you know, the full

00:23:26.470 --> 00:23:28.470
<v Speaker 1>standard error center dot trick at the end.

00:23:29.430 --> 00:23:31.670
<v Speaker 0>Ah, right. Okay. Okay. It's it's in the

00:23:31.670 --> 00:23:33.590
<v Speaker 1>docs if you wanna copy paste it. I've

00:23:33.590 --> 00:23:34.070
<v Speaker 0>done that

00:23:34.625 --> 00:23:36.065
<v Speaker 0>this way. And, I mean, I'm sure I

00:23:36.065 --> 00:23:37.825
<v Speaker 0>could just pop open Claude and say, how

00:23:37.825 --> 00:23:40.865
<v Speaker 0>do I see dash air in your shell

00:23:40.865 --> 00:23:44.225
<v Speaker 0>with standard out of standard? I use Claude

00:23:44.225 --> 00:23:46.545
<v Speaker 0>all day now. Like, I see if Claude's

00:23:46.545 --> 00:23:48.545
<v Speaker 0>code was just a a shell.

00:23:48.705 --> 00:23:50.400
<v Speaker 0>I I would love in it. So

00:23:50.960 --> 00:23:52.560
<v Speaker 0>okay. We got what we wanted.

00:23:52.960 --> 00:23:54.640
<v Speaker 0>Let's pop back over here. So

00:23:55.120 --> 00:23:56.720
<v Speaker 0>we got output. We got this, and now

00:23:56.720 --> 00:23:58.800
<v Speaker 0>we want to detect a problem. So the

00:23:58.800 --> 00:24:00.960
<v Speaker 0>way the Preq works and get us get

00:24:00.960 --> 00:24:03.520
<v Speaker 0>us back on track now. Right? We can

00:24:03.520 --> 00:24:05.200
<v Speaker 0>take logs of our application,

00:24:05.735 --> 00:24:07.575
<v Speaker 0>pipe them into PREC. We're passionate in a

00:24:07.575 --> 00:24:08.855
<v Speaker 0>dash o. I don't know where that is

00:24:08.855 --> 00:24:10.775
<v Speaker 0>yet. And then we've got the the input

00:24:10.775 --> 00:24:11.575
<v Speaker 0>modifier

00:24:11.655 --> 00:24:13.095
<v Speaker 0>to read from a file, and that's just

00:24:13.095 --> 00:24:14.855
<v Speaker 0>gonna analyze the logs and tell us what

00:24:14.855 --> 00:24:16.775
<v Speaker 0>went wrong, and we're gonna see output like

00:24:16.775 --> 00:24:19.495
<v Speaker 0>this. That's right. Easy. Yep. It's basically any

00:24:19.495 --> 00:24:20.375
<v Speaker 1>time stamped

00:24:21.370 --> 00:24:24.009
<v Speaker 1>line line carriage return delimited data,

00:24:24.410 --> 00:24:26.730
<v Speaker 1>it'll it'll parse and and run rules on.

00:24:27.450 --> 00:24:29.929
<v Speaker 1>And since you haven't run it without dash

00:24:29.929 --> 00:24:31.690
<v Speaker 1>v, it hasn't loaded rules yet. And so

00:24:31.690 --> 00:24:34.015
<v Speaker 1>what'll probably happen, what should happen, when you

00:24:34.015 --> 00:24:35.695
<v Speaker 1>run it, it'll ask you and prompt you,

00:24:35.695 --> 00:24:37.855
<v Speaker 1>do you wanna download the latest CRVs?

00:24:37.934 --> 00:24:39.375
<v Speaker 1>And we could talk about what CRVs are.

00:24:39.375 --> 00:24:41.215
<v Speaker 1>We probably haven't we haven't mentioned that yet.

00:24:41.535 --> 00:24:43.455
<v Speaker 1>We're do this first, and then see if

00:24:43.455 --> 00:24:44.735
<v Speaker 1>that that actually happens.

00:24:45.630 --> 00:24:47.150
<v Speaker 1>And the dash o is just saying, hey.

00:24:47.150 --> 00:24:48.750
<v Speaker 1>Let's let's print it out to standard out.

00:24:48.750 --> 00:24:50.750
<v Speaker 1>So the the dash is the name of

00:24:50.750 --> 00:24:52.029
<v Speaker 1>putting it standard out.

00:24:53.950 --> 00:24:55.630
<v Speaker 1>Right? And, actually, to get the updates, you

00:24:55.630 --> 00:24:57.309
<v Speaker 1>do first have to do

00:24:57.390 --> 00:24:59.230
<v Speaker 1>a quick authentication

00:24:59.230 --> 00:25:00.910
<v Speaker 1>to get the actual the the all the

00:25:00.910 --> 00:25:02.934
<v Speaker 1>updates come out every couple days, and they're

00:25:02.934 --> 00:25:05.494
<v Speaker 1>signed. So this allows you to download those.

00:25:06.135 --> 00:25:07.414
<v Speaker 1>And maybe while you're doing that, I I

00:25:07.414 --> 00:25:08.774
<v Speaker 1>can talk a little bit about what CREs

00:25:08.774 --> 00:25:11.734
<v Speaker 1>are. So common reliability enumerations, it's a schema.

00:25:11.735 --> 00:25:14.135
<v Speaker 1>You go to prequel dev slash c r

00:25:14.135 --> 00:25:14.855
<v Speaker 1>e on GitHub.

00:25:15.580 --> 00:25:17.580
<v Speaker 1>It's a schema that defines

00:25:17.660 --> 00:25:19.500
<v Speaker 1>reliability problems. So it gives you sort of

00:25:19.500 --> 00:25:20.940
<v Speaker 1>a title, a severity,

00:25:21.180 --> 00:25:23.660
<v Speaker 1>the mitigation, the impact, and the cause, as

00:25:23.660 --> 00:25:25.020
<v Speaker 1>well as a rule to detect it. And

00:25:25.020 --> 00:25:27.180
<v Speaker 1>since its main purpose in life is to

00:25:27.180 --> 00:25:30.460
<v Speaker 1>codify this reliability intelligence, this knowledge of failure,

00:25:30.875 --> 00:25:33.195
<v Speaker 1>and couple the detection with a mitigation so

00:25:33.195 --> 00:25:35.035
<v Speaker 1>that you can start with the detection first.

00:25:36.555 --> 00:25:37.275
<v Speaker 0>Nice.

00:25:37.355 --> 00:25:38.955
<v Speaker 0>So I should be saying yes to updating

00:25:38.955 --> 00:25:40.475
<v Speaker 0>the rules, and that's gonna pull in this

00:25:40.475 --> 00:25:41.675
<v Speaker 0>community focused

00:25:42.075 --> 00:25:43.995
<v Speaker 0>thing. And here's the answer. You run a

00:25:43.995 --> 00:25:46.260
<v Speaker 0>command with an out plus e greater than,

00:25:46.260 --> 00:25:47.780
<v Speaker 0>and then you can save it. Thanks, Claude.

00:25:47.780 --> 00:25:48.500
<v Speaker 1>Thank

00:25:48.580 --> 00:25:49.380
<v Speaker 1>you, Claude.

00:25:50.340 --> 00:25:52.980
<v Speaker 0>Alright. I am gonna run that again.

00:25:53.620 --> 00:25:55.140
<v Speaker 1>It looks like it worked. It it yeah.

00:25:55.140 --> 00:25:56.340
<v Speaker 0>So it I just wanna I just wanna

00:25:56.340 --> 00:25:57.220
<v Speaker 0>get some shit. Oh,

00:25:58.260 --> 00:25:59.300
<v Speaker 0>j q failed. Why?

00:26:00.275 --> 00:26:02.115
<v Speaker 0>Because there is Yeah. Yeah. So you can

00:26:02.115 --> 00:26:03.234
<v Speaker 1>do dash q,

00:26:03.715 --> 00:26:05.315
<v Speaker 1>and then it'll only get the j q

00:26:05.315 --> 00:26:06.034
<v Speaker 1>output.

00:26:09.554 --> 00:26:10.434
<v Speaker 1>Yep. Yeah.

00:26:10.835 --> 00:26:12.914
<v Speaker 1>So dash o dash. The dash is the

00:26:12.914 --> 00:26:14.355
<v Speaker 1>name of the output to standard out. And

00:26:14.355 --> 00:26:16.429
<v Speaker 1>so if you do that dash q. Yep.

00:26:16.830 --> 00:26:18.429
<v Speaker 1>And then dash o.

00:26:18.910 --> 00:26:21.230
<v Speaker 1>Oh. Like you had before. Yep. Now I'll

00:26:21.230 --> 00:26:22.910
<v Speaker 1>try that. That should work. There we go.

00:26:22.910 --> 00:26:23.390
<v Speaker 0>Alright.

00:26:24.590 --> 00:26:26.430
<v Speaker 0>So this is now telling us that we

00:26:26.430 --> 00:26:26.990
<v Speaker 0>have a

00:26:27.934 --> 00:26:31.934
<v Speaker 0>demo application crashing due to environment misconfiguration.

00:26:32.015 --> 00:26:34.174
<v Speaker 0>It's categorized. We've got some tags.

00:26:34.495 --> 00:26:35.695
<v Speaker 0>You were the author.

00:26:36.335 --> 00:26:36.894
<v Speaker 0>Not

00:26:37.215 --> 00:26:38.414
<v Speaker 0>color me surprised.

00:26:38.495 --> 00:26:40.894
<v Speaker 1>Mhmm. Impact cause mitigation references.

00:26:40.895 --> 00:26:43.560
<v Speaker 0>So alright. Cool. Yeah. And the idea here

00:26:43.560 --> 00:26:44.920
<v Speaker 1>is that, like, you you often when a

00:26:44.920 --> 00:26:46.840
<v Speaker 1>problem happens, you'll you'll end up doing your

00:26:46.840 --> 00:26:49.880
<v Speaker 1>own investigation and land on some GitHub issues

00:26:49.880 --> 00:26:50.520
<v Speaker 1>or,

00:26:51.000 --> 00:26:53.559
<v Speaker 1>you know, some Stack Overflow or Google

00:26:53.720 --> 00:26:54.520
<v Speaker 1>discussion forum.

00:26:55.105 --> 00:26:57.105
<v Speaker 1>And so this is really just codifying all

00:26:57.105 --> 00:26:58.544
<v Speaker 1>of that knowledge here. So you have those

00:26:58.544 --> 00:26:59.744
<v Speaker 1>references available,

00:26:59.825 --> 00:27:01.664
<v Speaker 1>the mitigation if it's available,

00:27:02.465 --> 00:27:04.144
<v Speaker 1>and the actual rule to detect it.

00:27:04.625 --> 00:27:07.825
<v Speaker 0>So I I wanna understand correlation here. Right?

00:27:07.825 --> 00:27:08.465
<v Speaker 0>So

00:27:09.210 --> 00:27:10.970
<v Speaker 0>I just ran a random binary that you

00:27:10.970 --> 00:27:12.809
<v Speaker 0>provided. Right? It's your demo application.

00:27:13.289 --> 00:27:15.609
<v Speaker 0>When you say that this is a community

00:27:15.770 --> 00:27:16.809
<v Speaker 0>understood

00:27:17.610 --> 00:27:18.809
<v Speaker 0>error, reliability,

00:27:19.130 --> 00:27:19.769
<v Speaker 0>whatever

00:27:20.090 --> 00:27:22.330
<v Speaker 0>the vocabulary is there at the lexicon,

00:27:23.375 --> 00:27:25.775
<v Speaker 0>Are we saying that someone has said, okay.

00:27:25.775 --> 00:27:28.335
<v Speaker 0>I have got this error here that came

00:27:28.335 --> 00:27:30.655
<v Speaker 0>across to prequel, submitted it, and then typed

00:27:30.655 --> 00:27:33.055
<v Speaker 0>in some details or maybe it's a pull

00:27:33.055 --> 00:27:34.495
<v Speaker 0>request. I don't know. We can get into

00:27:34.495 --> 00:27:36.575
<v Speaker 0>that. And then this information is what comes

00:27:36.575 --> 00:27:38.575
<v Speaker 0>out of it. So this is specific not

00:27:38.575 --> 00:27:39.055
<v Speaker 0>to this

00:27:39.590 --> 00:27:41.430
<v Speaker 0>application, although I guess it has because the

00:27:41.430 --> 00:27:43.590
<v Speaker 0>Go package is all here, but as it

00:27:43.590 --> 00:27:45.430
<v Speaker 0>as it these two lines that caused us

00:27:45.430 --> 00:27:47.350
<v Speaker 0>to be matched up with this. Yeah. The

00:27:47.430 --> 00:27:49.350
<v Speaker 1>yeah. The panic line and then some data

00:27:49.350 --> 00:27:51.270
<v Speaker 1>and the actual stack trace itself. But, yeah,

00:27:51.270 --> 00:27:52.790
<v Speaker 1>you're you're spot on. So the the

00:27:53.535 --> 00:27:56.015
<v Speaker 1>the cool thing that we're trying to do

00:27:56.015 --> 00:27:58.655
<v Speaker 1>with CREs is something that we I worked

00:27:58.655 --> 00:27:59.855
<v Speaker 1>really well in security

00:27:59.935 --> 00:28:03.055
<v Speaker 1>to detect problems, and that was doing sequences.

00:28:03.055 --> 00:28:03.615
<v Speaker 1>So,

00:28:04.175 --> 00:28:06.335
<v Speaker 1>a followed by b followed by c

00:28:06.769 --> 00:28:09.250
<v Speaker 1>and correlations on those sequences. So I only

00:28:09.250 --> 00:28:10.850
<v Speaker 1>wanna know about a followed by b followed

00:28:10.850 --> 00:28:12.929
<v Speaker 1>by c if they have the same, you

00:28:12.929 --> 00:28:15.009
<v Speaker 1>know, node or IP address, whatever it is,

00:28:15.570 --> 00:28:17.409
<v Speaker 1>and then negative conditions. So don't tell me

00:28:17.409 --> 00:28:18.929
<v Speaker 1>about a b c if d happened.

00:28:20.205 --> 00:28:22.684
<v Speaker 1>That works really well in security. Just those

00:28:22.684 --> 00:28:26.605
<v Speaker 1>very high level primitives across different data types

00:28:26.765 --> 00:28:27.725
<v Speaker 1>to describe

00:28:27.965 --> 00:28:30.045
<v Speaker 1>effectively describe problems,

00:28:30.045 --> 00:28:31.325
<v Speaker 1>but those were security problems.

00:28:31.870 --> 00:28:33.149
<v Speaker 1>And so with PREC,

00:28:33.470 --> 00:28:35.470
<v Speaker 1>you can do the same thing with these

00:28:35.470 --> 00:28:38.109
<v Speaker 1>correlations and and sequences and even sets,

00:28:38.429 --> 00:28:39.629
<v Speaker 1>so any order.

00:28:40.270 --> 00:28:42.029
<v Speaker 1>And you can do that on log data,

00:28:42.029 --> 00:28:43.309
<v Speaker 1>configuration data,

00:28:43.549 --> 00:28:46.110
<v Speaker 1>you know, even time series data and some

00:28:46.110 --> 00:28:47.070
<v Speaker 1>other data types

00:28:47.585 --> 00:28:50.545
<v Speaker 1>and to do correlations across those. And that's

00:28:50.545 --> 00:28:52.545
<v Speaker 1>a really powerful way. Imagine if you had

00:28:52.545 --> 00:28:54.705
<v Speaker 1>some Kubernetes problem. You're running this service in

00:28:54.705 --> 00:28:55.585
<v Speaker 1>Kubernetes.

00:28:56.065 --> 00:28:58.785
<v Speaker 1>And let's say this happens sometimes on startup.

00:28:59.680 --> 00:29:01.200
<v Speaker 1>Well, that would be a nice opportunity to

00:29:01.200 --> 00:29:02.240
<v Speaker 1>write a rule that says, don't tell me

00:29:02.240 --> 00:29:03.920
<v Speaker 1>about this if there's, like, a, you know,

00:29:03.920 --> 00:29:06.080
<v Speaker 1>a Kubernetes event that's telling me that this

00:29:06.080 --> 00:29:07.600
<v Speaker 1>pod was just created. But if this is

00:29:07.600 --> 00:29:08.960
<v Speaker 1>happening after it's been running for a while,

00:29:08.960 --> 00:29:10.240
<v Speaker 1>I definitely wanna know about it.

00:29:10.720 --> 00:29:12.480
<v Speaker 1>So that's the cool thing about the language.

00:29:12.480 --> 00:29:13.680
<v Speaker 1>And if you go to the docs, the

00:29:13.680 --> 00:29:16.725
<v Speaker 1>syntax reference, there's a very big long section

00:29:16.725 --> 00:29:18.645
<v Speaker 1>that kind of describes about all of the

00:29:18.645 --> 00:29:20.645
<v Speaker 1>different primitives that you can do. It it

00:29:20.645 --> 00:29:22.565
<v Speaker 1>definitely gets kind of complicated. The the getting

00:29:22.565 --> 00:29:25.365
<v Speaker 1>started guide is just a very simple example,

00:29:25.685 --> 00:29:27.605
<v Speaker 1>but it it's sort of bringing the sequencing

00:29:27.605 --> 00:29:30.480
<v Speaker 1>and correlations and negative conditions to reliability data.

00:29:30.480 --> 00:29:32.080
<v Speaker 1>That's kind of the whole point of Greek.

00:29:33.840 --> 00:29:35.679
<v Speaker 1>So this is a very simple example.

00:29:36.720 --> 00:29:38.480
<v Speaker 1>But you can find kind of more complicated

00:29:38.480 --> 00:29:39.200
<v Speaker 1>examples.

00:29:39.360 --> 00:29:41.200
<v Speaker 1>If, like, if you go to play.people.dev,

00:29:41.200 --> 00:29:43.040
<v Speaker 1>there's some more complicated examples there on the

00:29:43.040 --> 00:29:43.520
<v Speaker 1>playground

00:29:44.125 --> 00:29:46.125
<v Speaker 1>and then even in the reference to. And

00:29:46.125 --> 00:29:48.044
<v Speaker 1>the playground here is gonna take you to

00:29:48.285 --> 00:29:50.605
<v Speaker 1>building another rule. That's kind of the getting

00:29:50.605 --> 00:29:51.244
<v Speaker 1>started

00:29:51.405 --> 00:29:53.325
<v Speaker 1>guide. We'll actually walk you through building a

00:29:53.325 --> 00:29:53.884
<v Speaker 1>rule.

00:29:54.125 --> 00:29:55.085
<v Speaker 1>But if you just

00:29:55.565 --> 00:29:57.485
<v Speaker 1>if you just go to play.prequel.dev

00:29:57.645 --> 00:29:59.085
<v Speaker 1>so this is actually linking you to it.

00:29:59.190 --> 00:30:00.149
<v Speaker 1>Just maybe type,

00:30:00.710 --> 00:30:02.549
<v Speaker 1>yeah. Just type get rid of that end

00:30:02.549 --> 00:30:03.509
<v Speaker 1>part there. Perfect.

00:30:03.909 --> 00:30:05.110
<v Speaker 1>So you scroll down there. Here's a here's

00:30:05.110 --> 00:30:06.950
<v Speaker 1>a rule, a real rule that's, for a

00:30:06.950 --> 00:30:08.470
<v Speaker 1>real problem in RabbitMQ. And if you scroll

00:30:08.470 --> 00:30:09.990
<v Speaker 1>down to the bottom bottom, you can see

00:30:09.990 --> 00:30:11.749
<v Speaker 1>kind of what the conditions are looking for.

00:30:11.909 --> 00:30:14.549
<v Speaker 1>It's a regular expression query for a certain

00:30:14.549 --> 00:30:14.870
<v Speaker 1>pattern,

00:30:15.725 --> 00:30:17.645
<v Speaker 1>and it's also got a negative condition. And

00:30:17.645 --> 00:30:19.805
<v Speaker 1>the negative condition is basically this this problem

00:30:19.805 --> 00:30:20.365
<v Speaker 1>is

00:30:20.685 --> 00:30:23.165
<v Speaker 1>routing queue can sometimes the underlying Erlang process

00:30:23.165 --> 00:30:25.405
<v Speaker 1>can get overloaded whenever it's processing too many

00:30:25.405 --> 00:30:27.085
<v Speaker 1>persistent queues in a, like, a three or

00:30:27.085 --> 00:30:29.159
<v Speaker 1>four node cluster, And it can cause us,

00:30:29.159 --> 00:30:31.080
<v Speaker 1>like, really bad outage, and it doesn't emit

00:30:31.080 --> 00:30:33.240
<v Speaker 1>any metrics. It tells you something bad's going

00:30:33.240 --> 00:30:36.919
<v Speaker 1>on. But it sometimes can also happen normally

00:30:37.159 --> 00:30:38.679
<v Speaker 1>on a on a shutdown when there's a

00:30:38.679 --> 00:30:40.360
<v Speaker 1>sig term. So that's why the negative condition's

00:30:40.360 --> 00:30:41.880
<v Speaker 1>there. Because when that happens, it's like, okay.

00:30:41.880 --> 00:30:43.000
<v Speaker 1>Not that big of a deal. We're we're

00:30:43.000 --> 00:30:44.735
<v Speaker 1>actually shutting down the cluster. But when it

00:30:44.735 --> 00:30:46.815
<v Speaker 1>happens on boot, it's not good because it's

00:30:46.815 --> 00:30:47.935
<v Speaker 1>actually hard to detect.

00:30:48.255 --> 00:30:49.615
<v Speaker 1>And so that's just kind of like a

00:30:49.615 --> 00:30:50.415
<v Speaker 1>a more

00:30:50.895 --> 00:30:54.015
<v Speaker 1>complex example, but still relatively simple. And you

00:30:54.015 --> 00:30:56.095
<v Speaker 1>can actually do, like, nested

00:30:56.640 --> 00:30:58.240
<v Speaker 1>conditions too. So you could say, alright, let

00:30:58.240 --> 00:30:59.680
<v Speaker 1>me look for this problem is happening in

00:30:59.680 --> 00:31:00.559
<v Speaker 1>RabbitMQ,

00:31:00.560 --> 00:31:02.080
<v Speaker 1>and then this problem is happening in NGINX,

00:31:02.080 --> 00:31:03.840
<v Speaker 1>and this problem is happening in ScrubinesEvents.

00:31:03.840 --> 00:31:06.160
<v Speaker 1>You can kinda do this distributed matching thing,

00:31:06.160 --> 00:31:07.040
<v Speaker 1>which is kinda fun.

00:31:08.080 --> 00:31:08.799
<v Speaker 0>Nice.

00:31:09.120 --> 00:31:09.360
<v Speaker 0>Alright.

00:31:10.625 --> 00:31:12.624
<v Speaker 0>I have to add to negate just to,

00:31:12.625 --> 00:31:14.384
<v Speaker 0>you know, test if this works. So what

00:31:14.384 --> 00:31:16.465
<v Speaker 0>we're saying is this adder should could be

00:31:16.465 --> 00:31:17.744
<v Speaker 0>expected under

00:31:17.825 --> 00:31:18.945
<v Speaker 0>these circumstances.

00:31:18.945 --> 00:31:20.304
<v Speaker 0>So we're just gonna ignore.

00:31:20.544 --> 00:31:21.504
<v Speaker 0>Is the

00:31:23.400 --> 00:31:25.320
<v Speaker 0>you know, I'm a developer, a platform engineer,

00:31:25.320 --> 00:31:26.440
<v Speaker 0>SRE operator.

00:31:26.680 --> 00:31:28.840
<v Speaker 0>You know? Obviously, things are going wrong every

00:31:28.840 --> 00:31:31.320
<v Speaker 0>single day. Yep. Everyone's production has errors.

00:31:32.520 --> 00:31:33.560
<v Speaker 0>Do I

00:31:33.720 --> 00:31:36.360
<v Speaker 0>get my logs straight onto my local machine,

00:31:36.360 --> 00:31:37.400
<v Speaker 0>run them through Preak?

00:31:37.995 --> 00:31:40.235
<v Speaker 0>Is there automation? Does this look like I

00:31:40.235 --> 00:31:41.915
<v Speaker 0>can imagine there would be a really sweet

00:31:41.915 --> 00:31:43.755
<v Speaker 0>path here where this took some tools like

00:31:43.755 --> 00:31:46.155
<v Speaker 0>Sentry where they're catching all the exceptions. And

00:31:46.155 --> 00:31:47.675
<v Speaker 0>then it's just we're getting a comment from

00:31:47.675 --> 00:31:48.955
<v Speaker 0>Preak on, oh, this is because you have

00:31:48.955 --> 00:31:51.355
<v Speaker 0>done this or whatever. Like, what is the

00:31:51.355 --> 00:31:54.130
<v Speaker 0>default modality? How do people consume this? What's

00:31:54.130 --> 00:31:56.290
<v Speaker 0>the Yeah. Yeah. Great great question. So if

00:31:56.290 --> 00:31:58.049
<v Speaker 1>you go back to the docs kinda further

00:31:58.049 --> 00:32:00.369
<v Speaker 1>down after creating your own rule,

00:32:00.610 --> 00:32:03.010
<v Speaker 1>there's a couple of automated runbooks that Preak

00:32:03.010 --> 00:32:03.809
<v Speaker 1>supports.

00:32:04.130 --> 00:32:05.890
<v Speaker 1>So you can send a Slack notification.

00:32:06.495 --> 00:32:08.815
<v Speaker 1>You can create a Jira ticket, or you

00:32:08.815 --> 00:32:11.215
<v Speaker 1>can run an executable, and it'll pass that

00:32:11.215 --> 00:32:14.095
<v Speaker 1>Jira or that JQ that JSON object as

00:32:14.095 --> 00:32:15.935
<v Speaker 1>standard data into that executable, and you can

00:32:15.935 --> 00:32:17.215
<v Speaker 1>you can do something automated there.

00:32:18.730 --> 00:32:20.570
<v Speaker 1>There's some some automated runbooks that you can

00:32:20.570 --> 00:32:21.929
<v Speaker 1>do, and then you can also set up

00:32:21.929 --> 00:32:23.610
<v Speaker 1>a a cron job. So if you're running

00:32:23.610 --> 00:32:24.809
<v Speaker 1>this on bare metal,

00:32:25.049 --> 00:32:27.130
<v Speaker 1>on your Mac OS laptop, wherever, you can

00:32:27.130 --> 00:32:28.970
<v Speaker 1>do set up a cron job, and there's

00:32:28.970 --> 00:32:31.049
<v Speaker 1>a capability in the tool to generate that

00:32:31.049 --> 00:32:32.675
<v Speaker 1>template for you. And if you're in a

00:32:32.675 --> 00:32:34.675
<v Speaker 1>Kubernetes cluster, there's a group plugin, and we

00:32:34.675 --> 00:32:36.675
<v Speaker 1>can generate a a Kubernetes Cron job there

00:32:36.675 --> 00:32:38.595
<v Speaker 1>too. And and, basically, the way it looks

00:32:38.595 --> 00:32:40.675
<v Speaker 1>is that you specify the services that you

00:32:40.675 --> 00:32:42.115
<v Speaker 1>wanted to look at or the jobs or

00:32:42.115 --> 00:32:43.554
<v Speaker 1>daemon sets, whatever it is.

00:32:43.955 --> 00:32:45.680
<v Speaker 1>It'll run that on a schedule. And then

00:32:45.680 --> 00:32:48.400
<v Speaker 1>for any any anytime there's a detection, it'll

00:32:48.400 --> 00:32:50.960
<v Speaker 1>take one of those automated runbook actions. And

00:32:50.960 --> 00:32:52.559
<v Speaker 1>kind of the cool thing with the automated

00:32:52.720 --> 00:32:54.320
<v Speaker 1>runbooks is that you can you see the

00:32:54.320 --> 00:32:57.520
<v Speaker 1>regular expression field there. You can route different,

00:32:57.520 --> 00:32:59.840
<v Speaker 1>you know, CREs to different actions using a

00:32:59.840 --> 00:33:00.480
<v Speaker 1>regular expression.

00:33:01.805 --> 00:33:03.165
<v Speaker 1>So it's kind of like the the soup

00:33:03.165 --> 00:33:05.085
<v Speaker 1>to nuts workflow is, you know, you've got

00:33:05.085 --> 00:33:07.245
<v Speaker 1>some services that, you know, you wanna,

00:33:09.085 --> 00:33:10.445
<v Speaker 1>like, stay up to date. Like, let's say

00:33:10.445 --> 00:33:12.445
<v Speaker 1>you're using PyMongo and some service, and you

00:33:12.445 --> 00:33:13.645
<v Speaker 1>wanna make sure that you're getting the latest

00:33:13.645 --> 00:33:14.925
<v Speaker 1>PyMongo detections.

00:33:15.550 --> 00:33:17.230
<v Speaker 1>You would just schedule that job for that

00:33:17.230 --> 00:33:18.830
<v Speaker 1>service. You know, every time it runs, it's

00:33:18.830 --> 00:33:20.429
<v Speaker 1>gonna check for updates and use those.

00:33:20.990 --> 00:33:22.190
<v Speaker 1>And then if there are any hits, it'll

00:33:22.190 --> 00:33:23.309
<v Speaker 1>send those to your Outlook.

00:33:24.270 --> 00:33:26.670
<v Speaker 0>Alright. Nicholas in the chat has the same

00:33:26.670 --> 00:33:29.085
<v Speaker 0>question. I'm gonna reword it just for the

00:33:29.085 --> 00:33:30.205
<v Speaker 0>way that I had it in my head,

00:33:30.205 --> 00:33:31.485
<v Speaker 0>but it's I think it's the exact same

00:33:31.485 --> 00:33:32.045
<v Speaker 0>question.

00:33:33.245 --> 00:33:33.965
<v Speaker 0>Obviously,

00:33:34.365 --> 00:33:36.285
<v Speaker 0>as someone who is responsible for our production

00:33:36.285 --> 00:33:37.165
<v Speaker 0>infrastructure,

00:33:37.725 --> 00:33:40.445
<v Speaker 0>I'm not just leaving my logs in or

00:33:40.445 --> 00:33:41.245
<v Speaker 0>Kubernetes.

00:33:41.310 --> 00:33:43.310
<v Speaker 0>I am shipping them somewhere. The chances are

00:33:43.310 --> 00:33:45.790
<v Speaker 0>I'm writing them to locate, in FluxDB,

00:33:46.590 --> 00:33:47.870
<v Speaker 0>anywhere, Elasticsearch.

00:33:47.870 --> 00:33:48.350
<v Speaker 0>Right?

00:33:49.310 --> 00:33:52.190
<v Speaker 0>So as far as an automated way for

00:33:52.190 --> 00:33:54.044
<v Speaker 0>Creek to be aware of this, are there

00:33:54.044 --> 00:33:56.445
<v Speaker 0>connectors for Rawkode Elasticsearch?

00:33:56.445 --> 00:33:58.125
<v Speaker 0>How how do we make this real time

00:33:58.125 --> 00:33:59.404
<v Speaker 0>or at least as close to real time

00:33:59.485 --> 00:34:00.845
<v Speaker 0>Yeah. Yeah. As we as we can? Is

00:34:00.845 --> 00:34:02.764
<v Speaker 0>that something that Preak supports?

00:34:03.245 --> 00:34:04.524
<v Speaker 1>Yeah. So we're

00:34:04.605 --> 00:34:07.245
<v Speaker 1>couple things maybe to to mention on on

00:34:07.245 --> 00:34:08.764
<v Speaker 1>this question because it's it's very good question.

00:34:09.279 --> 00:34:11.199
<v Speaker 1>And maybe the the really quick answer is

00:34:11.199 --> 00:34:12.960
<v Speaker 1>yes. That's definitely an integration that's on the

00:34:12.960 --> 00:34:14.800
<v Speaker 1>road map. We're we're gonna support that.

00:34:15.119 --> 00:34:17.119
<v Speaker 1>But we're also changing

00:34:17.119 --> 00:34:19.839
<v Speaker 1>the paradigm a little bit here too architecturally.

00:34:20.319 --> 00:34:20.559
<v Speaker 1>So,

00:34:21.575 --> 00:34:24.135
<v Speaker 1>traditionally, in reliability, when it comes to monitoring,

00:34:24.135 --> 00:34:25.975
<v Speaker 1>you often take your data and ship it

00:34:25.975 --> 00:34:26.855
<v Speaker 1>somewhere else.

00:34:27.255 --> 00:34:28.055
<v Speaker 1>And

00:34:28.215 --> 00:34:30.855
<v Speaker 1>there are sometimes problems with doing that.

00:34:31.895 --> 00:34:33.735
<v Speaker 1>Sometimes it's a lot of data. And if

00:34:33.735 --> 00:34:35.895
<v Speaker 1>you're lucky enough to have a big enough

00:34:35.895 --> 00:34:38.260
<v Speaker 1>lucky cluster that your company or organization is

00:34:38.260 --> 00:34:39.780
<v Speaker 1>gonna pay for, that's cool. But if you

00:34:39.780 --> 00:34:41.299
<v Speaker 1>have to pay for it in Datadog or

00:34:41.299 --> 00:34:42.100
<v Speaker 1>somewhere else,

00:34:42.420 --> 00:34:44.739
<v Speaker 1>that can get expensive and unpredictable too. Actually,

00:34:44.739 --> 00:34:47.219
<v Speaker 1>that's sometimes the more surprising problem

00:34:47.460 --> 00:34:49.299
<v Speaker 1>with sending your data somewhere else is that,

00:34:49.299 --> 00:34:51.645
<v Speaker 1>you know, next month, if you accidentally have

00:34:51.645 --> 00:34:54.285
<v Speaker 1>some bug that generated a million logs a

00:34:54.285 --> 00:34:54.765
<v Speaker 1>day,

00:34:55.325 --> 00:34:58.205
<v Speaker 1>your your chief financial officer might be calling

00:34:58.205 --> 00:34:59.725
<v Speaker 1>you up the following month.

00:35:00.125 --> 00:35:02.285
<v Speaker 1>And so instead of sending the all of

00:35:02.285 --> 00:35:05.405
<v Speaker 1>this data somewhere else, we actually bring the

00:35:04.740 --> 00:35:06.580
<v Speaker 1>detections, the rules themselves

00:35:06.900 --> 00:35:08.500
<v Speaker 1>to the data. And we do that for

00:35:08.500 --> 00:35:10.340
<v Speaker 1>a couple of reasons. The one is

00:35:10.820 --> 00:35:12.260
<v Speaker 1>you actually because you don't have to send

00:35:12.260 --> 00:35:13.300
<v Speaker 1>this data anywhere,

00:35:13.619 --> 00:35:15.140
<v Speaker 1>you get access to much more data that

00:35:15.140 --> 00:35:17.220
<v Speaker 1>otherwise you would be crazy to send somewhere

00:35:17.220 --> 00:35:19.625
<v Speaker 1>else, like process exit events. You'd be a

00:35:19.625 --> 00:35:21.545
<v Speaker 1>crazy person to continuously

00:35:21.545 --> 00:35:23.145
<v Speaker 1>collect this data just in case you need

00:35:23.145 --> 00:35:24.984
<v Speaker 1>it because it's a lot. But when you

00:35:24.984 --> 00:35:27.625
<v Speaker 1>run the rule where the data exists, you

00:35:27.625 --> 00:35:29.224
<v Speaker 1>don't have to send it anywhere. Now that's

00:35:29.224 --> 00:35:31.865
<v Speaker 1>available to you as an input into a

00:35:31.865 --> 00:35:33.930
<v Speaker 1>rule, which is really cool. So that was

00:35:33.930 --> 00:35:35.610
<v Speaker 1>the main reason we did it, but the

00:35:35.610 --> 00:35:37.450
<v Speaker 1>nice side effect that you don't have to

00:35:37.450 --> 00:35:39.290
<v Speaker 1>ship all of this data somewhere else.

00:35:39.770 --> 00:35:42.090
<v Speaker 1>And so the the architecture is set up

00:35:42.090 --> 00:35:43.450
<v Speaker 1>where you can actually push this out to

00:35:43.450 --> 00:35:44.090
<v Speaker 1>the edge,

00:35:44.330 --> 00:35:46.490
<v Speaker 1>bring the rules where the data sits,

00:35:47.045 --> 00:35:48.565
<v Speaker 1>get all of these benefits of the real

00:35:48.565 --> 00:35:50.485
<v Speaker 1>time detections on more data that's too expensive

00:35:50.485 --> 00:35:51.605
<v Speaker 1>to send somewhere else.

00:35:52.325 --> 00:35:54.245
<v Speaker 1>The side effect, don't have to, you know,

00:35:54.245 --> 00:35:55.765
<v Speaker 1>increase your bill.

00:35:56.005 --> 00:35:57.925
<v Speaker 1>Another another kinda cool thing is that because

00:35:57.925 --> 00:35:59.285
<v Speaker 1>you're sitting where the data sits,

00:35:59.810 --> 00:36:02.530
<v Speaker 1>your automated runbooks, the actual thing that's gonna

00:36:02.530 --> 00:36:05.170
<v Speaker 1>take some actions, already there and can do

00:36:05.170 --> 00:36:05.650
<v Speaker 1>something.

00:36:05.970 --> 00:36:07.250
<v Speaker 1>Whereas if you've got,

00:36:07.970 --> 00:36:09.650
<v Speaker 1>you know, the data is shipped somewhere else,

00:36:09.650 --> 00:36:11.410
<v Speaker 1>you now need an integration to reach back

00:36:11.410 --> 00:36:13.650
<v Speaker 1>in to actually take an action. And so

00:36:13.650 --> 00:36:15.714
<v Speaker 1>sort of, you know, where do you wanna

00:36:15.714 --> 00:36:17.315
<v Speaker 1>have the integration? You wanna have the integration

00:36:17.315 --> 00:36:19.395
<v Speaker 1>on the, like, data shipping side where it

00:36:19.395 --> 00:36:20.595
<v Speaker 1>could be expensive, or do you wanna have

00:36:20.595 --> 00:36:23.075
<v Speaker 1>the integration on the the the automated action

00:36:23.075 --> 00:36:24.755
<v Speaker 1>side? And so that's kind of, like, the

00:36:24.755 --> 00:36:26.835
<v Speaker 1>the thinking there. But all that being said,

00:36:27.950 --> 00:36:29.950
<v Speaker 1>absolutely, we're gonna add capabilities.

00:36:29.950 --> 00:36:32.030
<v Speaker 1>You know? Just let me me occasionally look

00:36:32.030 --> 00:36:34.590
<v Speaker 1>at CloudWatch data. Let me look at something

00:36:34.590 --> 00:36:36.590
<v Speaker 1>that's in Loki, wherever it is, and we'll

00:36:36.590 --> 00:36:37.950
<v Speaker 1>match on that too. And and that's that's

00:36:37.950 --> 00:36:38.910
<v Speaker 1>kind of the cool thing with the language

00:36:38.910 --> 00:36:40.830
<v Speaker 1>is that's totally supportable and and definitely something

00:36:40.830 --> 00:36:41.630
<v Speaker 1>we're gonna add to Greek.

00:36:42.375 --> 00:36:45.015
<v Speaker 0>Okay. So you kinda you support whatever

00:36:45.175 --> 00:36:47.415
<v Speaker 0>mode operators really wanna go. Exactly. I like

00:36:47.415 --> 00:36:48.935
<v Speaker 0>idea of presampling

00:36:48.935 --> 00:36:50.855
<v Speaker 0>because then you're getting the most value for

00:36:50.855 --> 00:36:52.375
<v Speaker 0>your buck, like you said. Yeah. And I

00:36:52.375 --> 00:36:53.895
<v Speaker 0>don't need to forward all that data onto

00:36:53.895 --> 00:36:56.630
<v Speaker 0>LOKI. But then another another common part could

00:36:56.630 --> 00:36:58.230
<v Speaker 0>just be write everything to Loki with a

00:36:58.230 --> 00:37:00.310
<v Speaker 0>really short time to live of three hours

00:37:00.390 --> 00:37:03.270
<v Speaker 0>through the common through the the detection and

00:37:03.430 --> 00:37:05.589
<v Speaker 0>then put that onto longer term storage. But

00:37:05.670 --> 00:37:07.990
<v Speaker 0>Yep. With sampling. We're very strict sampling. If

00:37:07.990 --> 00:37:09.269
<v Speaker 0>people aren't sampling on production,

00:37:09.775 --> 00:37:12.095
<v Speaker 0>you've got too much money. Yeah. That's right.

00:37:12.095 --> 00:37:13.615
<v Speaker 0>That's right. And we use it on our

00:37:13.615 --> 00:37:15.615
<v Speaker 1>back end too. So instead of saving all

00:37:15.615 --> 00:37:17.375
<v Speaker 1>the log data with fluent bit, you know,

00:37:17.375 --> 00:37:19.295
<v Speaker 1>all the time, we'll write rules for like,

00:37:19.295 --> 00:37:20.655
<v Speaker 1>hey, we definitely wanna know about this when

00:37:20.655 --> 00:37:21.375
<v Speaker 1>it happens.

00:37:21.775 --> 00:37:23.135
<v Speaker 1>You know, let's tell us about it and

00:37:23.135 --> 00:37:24.655
<v Speaker 1>then we'll save kind of the data around

00:37:24.655 --> 00:37:24.815
<v Speaker 1>it.

00:37:25.670 --> 00:37:27.510
<v Speaker 0>Well, don't give us, you know, 10% of

00:37:27.510 --> 00:37:29.910
<v Speaker 0>that story. Let's talk about the preproduction log

00:37:29.910 --> 00:37:32.550
<v Speaker 0>pipeline. Like, so how are you collecting logs?

00:37:32.550 --> 00:37:34.550
<v Speaker 0>How is prec embedded into this? You're using

00:37:34.550 --> 00:37:36.070
<v Speaker 0>Fluent Bit. Do you wanna just give us

00:37:36.070 --> 00:37:37.270
<v Speaker 0>the details on that? I'd love to hear.

00:37:37.425 --> 00:37:39.585
<v Speaker 1>Yeah, yeah. So we're not using Fluent Bit.

00:37:39.665 --> 00:37:40.145
<v Speaker 1>Yeah,

00:37:40.865 --> 00:37:41.745
<v Speaker 1>yeah, yeah. Literally,

00:37:42.225 --> 00:37:45.105
<v Speaker 1>we're just saving the logs to the underlying

00:37:45.105 --> 00:37:47.745
<v Speaker 1>container runtime, saving it via journal d to

00:37:47.745 --> 00:37:49.585
<v Speaker 1>the log files in the Kubernetes cluster.

00:37:50.400 --> 00:37:52.560
<v Speaker 1>And then we have a daemon set that

00:37:52.720 --> 00:37:54.400
<v Speaker 1>does a couple of interesting things, one of

00:37:54.400 --> 00:37:55.440
<v Speaker 1>which we'll

00:37:55.440 --> 00:37:57.200
<v Speaker 1>monitor for all these

00:37:57.839 --> 00:37:59.520
<v Speaker 1>log files from the container. So we'll get

00:37:59.520 --> 00:38:02.480
<v Speaker 1>the containers, start creation events from the runtime,

00:38:02.640 --> 00:38:04.319
<v Speaker 1>and then open up a file descriptor to

00:38:04.319 --> 00:38:04.880
<v Speaker 1>those logs,

00:38:05.435 --> 00:38:07.755
<v Speaker 1>and then match on all the data. And

00:38:07.755 --> 00:38:09.994
<v Speaker 1>one of the cool things about the rules

00:38:09.994 --> 00:38:11.915
<v Speaker 1>is that we're actually not running the rules

00:38:11.994 --> 00:38:13.675
<v Speaker 1>on everything all the time. So you'll see

00:38:13.675 --> 00:38:15.915
<v Speaker 1>in the rule a data source. That allows

00:38:15.915 --> 00:38:17.915
<v Speaker 1>us to specify, hey, this is a rule

00:38:17.915 --> 00:38:18.475
<v Speaker 1>for

00:38:18.715 --> 00:38:20.155
<v Speaker 1>cre.log.nginx.

00:38:20.450 --> 00:38:22.130
<v Speaker 1>There's sort of a definition that goes behind

00:38:22.130 --> 00:38:23.810
<v Speaker 1>the data source that says, alright. Match on

00:38:23.810 --> 00:38:25.890
<v Speaker 1>this image URL or container name or whatever

00:38:25.890 --> 00:38:26.530
<v Speaker 1>it is.

00:38:26.850 --> 00:38:29.410
<v Speaker 1>And so that rule will only actually compile

00:38:29.410 --> 00:38:31.890
<v Speaker 1>and broaden the environment if nginx is running.

00:38:33.185 --> 00:38:35.265
<v Speaker 1>And so that's basically what we use for

00:38:35.265 --> 00:38:36.625
<v Speaker 1>our production problems.

00:38:37.105 --> 00:38:38.705
<v Speaker 1>Know, like, actually, we just had an issue

00:38:38.705 --> 00:38:40.705
<v Speaker 1>yesterday where a customer was upgrading one of

00:38:40.705 --> 00:38:42.625
<v Speaker 1>our clusters and there was an issue.

00:38:42.945 --> 00:38:45.680
<v Speaker 1>We have a detection for that job status

00:38:45.680 --> 00:38:47.760
<v Speaker 1>failure, we have a detection that fires for

00:38:47.760 --> 00:38:49.200
<v Speaker 1>that and kind of saves all the data.

00:38:49.200 --> 00:38:51.119
<v Speaker 1>And that's a rare event. And so we

00:38:51.119 --> 00:38:52.559
<v Speaker 1>didn't have to send all of this data

00:38:52.559 --> 00:38:54.240
<v Speaker 1>and store it in CloudWatch and save all

00:38:54.240 --> 00:38:55.599
<v Speaker 1>of it for all time.

00:38:55.839 --> 00:38:57.520
<v Speaker 1>It's just a detection that fires, and we

00:38:57.520 --> 00:38:58.640
<v Speaker 1>know we actually need that data.

00:39:00.435 --> 00:39:01.235
<v Speaker 0>All right.

00:39:02.035 --> 00:39:04.755
<v Speaker 0>I'm curious now. Obviously, we played with this

00:39:04.755 --> 00:39:06.755
<v Speaker 0>example in the playground. This is nice. We

00:39:06.755 --> 00:39:08.595
<v Speaker 0>run the rule. We get this nice bit

00:39:08.595 --> 00:39:10.355
<v Speaker 0>of information on the right, and we can

00:39:10.355 --> 00:39:13.000
<v Speaker 0>see the hits and stuff. Now assuming in

00:39:13.000 --> 00:39:15.800
<v Speaker 0>my production environment, I'm using OpenTelemetry.

00:39:15.800 --> 00:39:17.400
<v Speaker 0>I'm writing my logs to locate. They're gonna

00:39:17.560 --> 00:39:19.400
<v Speaker 0>in JSON format. Is that a problem for

00:39:19.400 --> 00:39:20.840
<v Speaker 0>Preak, or is it just gonna swallow those

00:39:20.840 --> 00:39:22.520
<v Speaker 0>up? It'd be quite happy to parse them.

00:39:22.760 --> 00:39:24.760
<v Speaker 1>Yeah. It it's it runs side by side

00:39:24.760 --> 00:39:26.280
<v Speaker 1>just fine. It's more like a first line

00:39:26.280 --> 00:39:27.825
<v Speaker 1>of defense. So

00:39:27.905 --> 00:39:29.985
<v Speaker 1>we have a lot of customers and users

00:39:29.985 --> 00:39:31.345
<v Speaker 1>that are you know, they need to save

00:39:31.345 --> 00:39:33.185
<v Speaker 1>that data for compliance reasons.

00:39:33.825 --> 00:39:35.665
<v Speaker 1>But they're they also don't wanna go

00:39:36.385 --> 00:39:38.625
<v Speaker 1>crawling through a mile long dashboard when there's

00:39:38.625 --> 00:39:40.145
<v Speaker 1>a problem and and would like to just,

00:39:40.145 --> 00:39:41.665
<v Speaker 1>know, hey. If there's a new problem for,

00:39:43.200 --> 00:39:45.600
<v Speaker 1>Redis tomorrow that comes out, I'll get a

00:39:45.600 --> 00:39:46.880
<v Speaker 1>detection for that. And I didn't have to

00:39:46.880 --> 00:39:48.640
<v Speaker 1>write the monitor. Just there you go. It's

00:39:48.640 --> 00:39:49.120
<v Speaker 1>there.

00:39:49.680 --> 00:39:51.520
<v Speaker 1>And because the data is not getting shipped

00:39:51.680 --> 00:39:53.840
<v Speaker 1>anywhere for Preq, it's just data is in

00:39:53.840 --> 00:39:55.680
<v Speaker 1>your cluster. We're not doing anything with it.

00:39:55.840 --> 00:39:57.440
<v Speaker 1>It's very cheap to do. It's very cheap

00:39:57.440 --> 00:39:57.760
<v Speaker 1>to run.

00:40:00.025 --> 00:40:00.745
<v Speaker 0>Cool.

00:40:01.785 --> 00:40:03.625
<v Speaker 0>I always like to test, but yeah. No.

00:40:03.625 --> 00:40:04.905
<v Speaker 1>It's good. It's good. It's good.

00:40:05.545 --> 00:40:07.465
<v Speaker 1>And, yeah, there's

00:40:07.465 --> 00:40:09.465
<v Speaker 1>a lot of different timestamp formats that are

00:40:09.465 --> 00:40:11.720
<v Speaker 1>supported in the PREC tool and then the

00:40:11.720 --> 00:40:14.760
<v Speaker 1>commercial products using the container runtime CRI format

00:40:14.760 --> 00:40:16.840
<v Speaker 1>for all of the timestamps for the data.

00:40:17.160 --> 00:40:18.920
<v Speaker 0>Yeah. I'm assuming, you know, my dot dot

00:40:18.920 --> 00:40:20.920
<v Speaker 0>is not supported, but, you know, that's fine.

00:40:21.960 --> 00:40:22.280
<v Speaker 0>Cool.

00:40:23.205 --> 00:40:24.805
<v Speaker 0>I like this. So

00:40:25.045 --> 00:40:26.485
<v Speaker 0>I I I've got a few different ways

00:40:26.485 --> 00:40:28.725
<v Speaker 0>I kinda wanna take this now. And Nicholas

00:40:28.725 --> 00:40:30.725
<v Speaker 0>in the chat says, yes. Thank you for

00:40:30.725 --> 00:40:32.325
<v Speaker 0>that extended answer. That was perfect.

00:40:32.965 --> 00:40:33.925
<v Speaker 0>Okay. So

00:40:34.485 --> 00:40:35.925
<v Speaker 0>I can switch the size.

00:40:36.560 --> 00:40:38.240
<v Speaker 0>I'm curious about the CREs.

00:40:38.240 --> 00:40:41.359
<v Speaker 0>So Yeah. I'm assuming this is the public

00:40:41.359 --> 00:40:42.160
<v Speaker 0>community

00:40:42.160 --> 00:40:42.880
<v Speaker 0>driven

00:40:43.200 --> 00:40:45.600
<v Speaker 0>That's right. Repository where all of the CREs

00:40:45.600 --> 00:40:47.840
<v Speaker 0>live and exist. Is that correct? Mhmm. That's

00:40:47.840 --> 00:40:49.200
<v Speaker 1>right. Alright. Nice.

00:40:50.000 --> 00:40:51.520
<v Speaker 0>So because I'm assuming,

00:40:52.455 --> 00:40:54.375
<v Speaker 0>you know, your product is as good as

00:40:54.375 --> 00:40:55.655
<v Speaker 0>this repository.

00:40:55.975 --> 00:40:56.375
<v Speaker 0>Like

00:40:57.175 --> 00:40:59.335
<v Speaker 1>Yeah. For Preak, absolutely. Preak, this is the

00:40:59.335 --> 00:41:01.175
<v Speaker 1>Preak open source tool that uses the open

00:41:01.175 --> 00:41:02.135
<v Speaker 1>CREs.

00:41:02.775 --> 00:41:03.575
<v Speaker 0>Alright.

00:41:04.295 --> 00:41:07.095
<v Speaker 0>There's as an alternative version. Is this your

00:41:07.095 --> 00:41:07.735
<v Speaker 0>enterprise

00:41:08.330 --> 00:41:09.850
<v Speaker 0>product? No. No. No. We we we have

00:41:09.850 --> 00:41:12.090
<v Speaker 1>an alternative commercial version. So not all of

00:41:12.090 --> 00:41:14.250
<v Speaker 1>the roles we we have a reliability research

00:41:14.250 --> 00:41:16.490
<v Speaker 1>team, the people reliability research team

00:41:16.890 --> 00:41:19.290
<v Speaker 1>that works with, you know, customers,

00:41:19.290 --> 00:41:22.170
<v Speaker 1>open source issues, and and a growing community

00:41:22.170 --> 00:41:24.365
<v Speaker 1>of contributors, which has been kinda cool. I

00:41:24.365 --> 00:41:26.365
<v Speaker 1>actually think we have more now contributors to

00:41:26.365 --> 00:41:28.125
<v Speaker 1>the open source capability than we have people

00:41:28.125 --> 00:41:29.725
<v Speaker 1>that work at Prequel, which is awesome.

00:41:30.444 --> 00:41:31.964
<v Speaker 1>Actually, shout out to Nicholas because I definitely

00:41:31.964 --> 00:41:33.165
<v Speaker 1>know that he's one of them. So cool

00:41:33.165 --> 00:41:34.205
<v Speaker 1>to see you, Nicholas.

00:41:35.325 --> 00:41:37.085
<v Speaker 1>And, yeah, I think the rules that you're

00:41:37.085 --> 00:41:38.640
<v Speaker 1>looking at here are all of the kinda

00:41:38.640 --> 00:41:40.640
<v Speaker 1>open source contributed rules that look at things

00:41:40.640 --> 00:41:42.799
<v Speaker 1>like Loki, NATS issues, or some stuff here

00:41:42.799 --> 00:41:43.760
<v Speaker 1>in Kafka.

00:41:44.000 --> 00:41:46.960
<v Speaker 1>We're growing every day. We just released this

00:41:46.960 --> 00:41:48.160
<v Speaker 1>a couple weeks ago.

00:41:48.559 --> 00:41:50.319
<v Speaker 1>And then, yeah, we have a commercial product

00:41:50.319 --> 00:41:53.095
<v Speaker 1>where not all of those rules do get

00:41:53.335 --> 00:41:54.855
<v Speaker 1>pushed out to the open source product. Some

00:41:54.855 --> 00:41:55.655
<v Speaker 1>of them have.

00:41:56.215 --> 00:41:58.135
<v Speaker 1>We actually just published a blog earlier this

00:41:58.135 --> 00:42:00.935
<v Speaker 1>week on some NGINX worker leaks. And so

00:42:00.935 --> 00:42:03.335
<v Speaker 1>we're We made those rules

00:42:03.575 --> 00:42:05.415
<v Speaker 1>available on the blog and we're considering making

00:42:05.415 --> 00:42:07.335
<v Speaker 1>those available in the CRE repo as well.

00:42:08.640 --> 00:42:09.200
<v Speaker 0>Okay.

00:42:09.680 --> 00:42:11.119
<v Speaker 0>I'm just looking at one that was added

00:42:11.119 --> 00:42:13.839
<v Speaker 0>two days ago, some sort of on kill

00:42:13.839 --> 00:42:14.960
<v Speaker 0>for Reddit

00:42:16.319 --> 00:42:17.760
<v Speaker 0>tags, description,

00:42:18.000 --> 00:42:18.800
<v Speaker 0>cause.

00:42:19.520 --> 00:42:21.595
<v Speaker 1>Yeah. One one of when you're contributing to

00:42:21.595 --> 00:42:23.355
<v Speaker 1>the CRE repo, one of the things that's

00:42:23.355 --> 00:42:24.635
<v Speaker 1>a requirement is you have to have a

00:42:24.635 --> 00:42:26.155
<v Speaker 1>reproduction for the problem.

00:42:26.555 --> 00:42:28.155
<v Speaker 1>So it's not enough to go and, you

00:42:28.155 --> 00:42:30.155
<v Speaker 1>know, scrape an issue somewhere and say, okay.

00:42:30.155 --> 00:42:32.235
<v Speaker 1>Here's some data that explains the problem. You

00:42:32.235 --> 00:42:33.435
<v Speaker 1>actually need a reproduction.

00:42:33.515 --> 00:42:35.675
<v Speaker 1>That's mainly because sometimes these things

00:42:36.450 --> 00:42:37.330
<v Speaker 1>can have

00:42:37.970 --> 00:42:39.650
<v Speaker 1>false positives. And so you want to be

00:42:39.650 --> 00:42:41.970
<v Speaker 1>able to have a test case for, okay,

00:42:41.970 --> 00:42:44.609
<v Speaker 1>here's the actual positive conditions that have to

00:42:44.609 --> 00:42:46.290
<v Speaker 1>happen for this to be the problem. But

00:42:46.290 --> 00:42:48.450
<v Speaker 1>when you do the reproduction, you can also

00:42:48.450 --> 00:42:50.210
<v Speaker 1>see the scenarios where, okay, well, I can

00:42:50.210 --> 00:42:51.715
<v Speaker 1>also see how that would be normal and

00:42:51.715 --> 00:42:53.955
<v Speaker 1>fine and nothing's broken. Let's make sure we

00:42:53.955 --> 00:42:56.035
<v Speaker 1>actually write the negate cases to cover the

00:42:56.035 --> 00:42:57.155
<v Speaker 1>false positives.

00:42:59.955 --> 00:43:01.315
<v Speaker 0>Nice. I like this.

00:43:02.755 --> 00:43:04.340
<v Speaker 1>And we're looking for contributors too, so if

00:43:04.340 --> 00:43:06.420
<v Speaker 1>you're listening and you want to get nerd

00:43:06.420 --> 00:43:08.180
<v Speaker 1>sniped and have some fun.

00:43:08.580 --> 00:43:11.380
<v Speaker 1>Again, my background is doing vulnerability research and

00:43:11.380 --> 00:43:13.940
<v Speaker 1>exploit development, and I have more fun doing

00:43:13.940 --> 00:43:15.700
<v Speaker 1>this. It's

00:43:15.700 --> 00:43:19.025
<v Speaker 1>fun because you're fixing stuff. You're actually making

00:43:19.505 --> 00:43:20.385
<v Speaker 1>things better

00:43:20.625 --> 00:43:23.184
<v Speaker 1>and you're helping someone that you've never met

00:43:23.184 --> 00:43:24.065
<v Speaker 1>somewhere

00:43:24.144 --> 00:43:25.585
<v Speaker 1>that's about to have a really bad day

00:43:25.585 --> 00:43:27.345
<v Speaker 1>because they're scaling core DNS

00:43:27.505 --> 00:43:28.944
<v Speaker 1>and they're about to hit some mid square

00:43:28.944 --> 00:43:31.300
<v Speaker 1>scaling issue. They've never seen it before, but

00:43:31.300 --> 00:43:32.819
<v Speaker 1>there's a rule for it that can help

00:43:32.819 --> 00:43:34.180
<v Speaker 1>them if in case that happens. So I

00:43:34.180 --> 00:43:35.940
<v Speaker 1>think that world is fun to live in.

00:43:36.020 --> 00:43:37.300
<v Speaker 1>We all wanna be in that world, so

00:43:37.300 --> 00:43:38.740
<v Speaker 1>we're definitely looking for contributors.

00:43:39.460 --> 00:43:42.260
<v Speaker 0>Have you ever considered just taking the Stack

00:43:42.260 --> 00:43:45.140
<v Speaker 0>Overflow data export and, you know, go nuts

00:43:45.140 --> 00:43:47.775
<v Speaker 0>with it? Well, you know, it

00:43:48.815 --> 00:43:51.055
<v Speaker 1>sounds like a crazy idea, and it is.

00:43:51.055 --> 00:43:52.975
<v Speaker 1>And it's definitely something we still actually do

00:43:52.975 --> 00:43:53.775
<v Speaker 1>think about.

00:43:54.335 --> 00:43:56.015
<v Speaker 1>You know, definitely not doing it now, but

00:43:56.015 --> 00:43:58.735
<v Speaker 1>we are looking at different ways in which

00:43:58.735 --> 00:44:01.330
<v Speaker 1>we can scale up the research

00:44:02.130 --> 00:44:05.010
<v Speaker 1>because, yeah, there's a lot of misconfiguration

00:44:05.010 --> 00:44:07.330
<v Speaker 1>issues, no problems in open source software, anti

00:44:07.330 --> 00:44:08.130
<v Speaker 1>patterns.

00:44:08.530 --> 00:44:09.890
<v Speaker 1>There's a lot. And so that's why we're

00:44:09.890 --> 00:44:11.730
<v Speaker 1>excited about building the community because we can't

00:44:11.730 --> 00:44:13.410
<v Speaker 1>do it alone. And again, this is something

00:44:13.410 --> 00:44:15.490
<v Speaker 1>the security industry realized twenty years

00:44:15.875 --> 00:44:17.714
<v Speaker 1>You you cannot solve this problem alone. You

00:44:17.714 --> 00:44:18.915
<v Speaker 1>have to find tools

00:44:19.075 --> 00:44:21.075
<v Speaker 1>and ways to share this knowledge at, like,

00:44:21.075 --> 00:44:21.955
<v Speaker 1>machine

00:44:22.194 --> 00:44:22.755
<v Speaker 1>speed.

00:44:23.155 --> 00:44:24.515
<v Speaker 1>And that's, I think, why we get excited

00:44:24.515 --> 00:44:26.115
<v Speaker 1>about common reliability numerations.

00:44:27.840 --> 00:44:28.480
<v Speaker 0>Next.

00:44:28.720 --> 00:44:31.040
<v Speaker 0>Alright. I think I understand the project. I

00:44:31.040 --> 00:44:32.640
<v Speaker 0>understand how it works. I understand how to

00:44:32.640 --> 00:44:34.960
<v Speaker 0>contribute. I see the value. I think we're

00:44:34.960 --> 00:44:37.520
<v Speaker 0>we're doing well so far. So Awesome. You

00:44:37.520 --> 00:44:37.920
<v Speaker 0>know,

00:44:38.320 --> 00:44:40.880
<v Speaker 0>the fact that anyone watching this should hopefully

00:44:40.880 --> 00:44:43.280
<v Speaker 0>start contributing any of their outages and errors

00:44:43.280 --> 00:44:44.295
<v Speaker 0>as c

00:44:44.695 --> 00:44:46.214
<v Speaker 0>c r e's. I keep trying to say

00:44:46.214 --> 00:44:47.895
<v Speaker 0>CVEs, but I'm like, no. Don't say that.

00:44:47.895 --> 00:44:49.735
<v Speaker 0>That's the other one. The security one.

00:44:50.135 --> 00:44:52.135
<v Speaker 0>Yeah. This is cool. Is there anything we

00:44:52.135 --> 00:44:54.855
<v Speaker 0>haven't covered yet before I kinda start poking

00:44:54.855 --> 00:44:56.375
<v Speaker 0>around and coming up with silly ideas?

00:44:57.570 --> 00:44:59.010
<v Speaker 1>No. I mean, I think that's it. Again,

00:44:59.010 --> 00:45:00.930
<v Speaker 1>we're really excited about it. You know, come

00:45:00.930 --> 00:45:03.410
<v Speaker 1>star the repos. Come join us in Slack.

00:45:03.410 --> 00:45:04.930
<v Speaker 1>We're looking for contributors.

00:45:05.490 --> 00:45:07.650
<v Speaker 1>I mean, we we're very passionate about making

00:45:07.650 --> 00:45:09.570
<v Speaker 1>this world exist. We don't wanna start with

00:45:09.570 --> 00:45:10.130
<v Speaker 1>the investigation.

00:45:10.674 --> 00:45:12.755
<v Speaker 1>We wanna start with the detection. Let's do

00:45:12.755 --> 00:45:13.234
<v Speaker 1>that.

00:45:13.875 --> 00:45:15.954
<v Speaker 1>We want that world to be true. So

00:45:15.954 --> 00:45:17.394
<v Speaker 1>come come hang out if you like that

00:45:17.394 --> 00:45:18.434
<v Speaker 1>world and you wanna live in that world

00:45:18.434 --> 00:45:19.395
<v Speaker 1>because we do too.

00:45:20.275 --> 00:45:22.115
<v Speaker 0>Alright. Well, let's jump back to the CLI

00:45:22.115 --> 00:45:24.115
<v Speaker 0>then. So we've got this thing here.

00:45:25.670 --> 00:45:27.269
<v Speaker 0>Now when I ran the first time, I

00:45:27.269 --> 00:45:28.950
<v Speaker 0>did have to to log in,

00:45:29.990 --> 00:45:32.710
<v Speaker 0>and I got some sort of snapshot of

00:45:32.710 --> 00:45:35.750
<v Speaker 0>that repository stored locally with the the rules.

00:45:35.910 --> 00:45:37.670
<v Speaker 0>What is the how do I keep this

00:45:37.670 --> 00:45:39.615
<v Speaker 0>up to date? Is it do that automatically?

00:45:39.615 --> 00:45:40.815
<v Speaker 0>Is it something I should trigger on a

00:45:40.815 --> 00:45:42.335
<v Speaker 0>cron job? Like, how do I make sure

00:45:42.335 --> 00:45:43.375
<v Speaker 0>I have the latest

00:45:43.535 --> 00:45:46.655
<v Speaker 0>CREs for running against my log data?

00:45:47.055 --> 00:45:49.775
<v Speaker 1>Yeah. Good question. So it's an automatic update.

00:45:50.335 --> 00:45:53.339
<v Speaker 1>You don't have to schedule anything. It'll it'll

00:45:53.339 --> 00:45:54.859
<v Speaker 1>do a check-in

00:45:54.859 --> 00:45:56.060
<v Speaker 1>two different ways.

00:45:56.859 --> 00:45:58.539
<v Speaker 1>The first check is just like a UDP

00:45:58.539 --> 00:46:00.380
<v Speaker 1>packet with, like, a latency timeout of a

00:46:00.380 --> 00:46:01.819
<v Speaker 1>hundred milliseconds. Like, hey. Is there a new

00:46:01.819 --> 00:46:03.740
<v Speaker 1>version available? If so, let's tell someone they

00:46:03.740 --> 00:46:04.299
<v Speaker 1>can download it.

00:46:05.244 --> 00:46:07.325
<v Speaker 1>And then every couple of days, there's, like,

00:46:07.325 --> 00:46:09.565
<v Speaker 1>a a more guaranteed TCP check. It's like,

00:46:09.565 --> 00:46:11.085
<v Speaker 1>hey. Is there a new update available?

00:46:11.725 --> 00:46:14.205
<v Speaker 1>We we're pushing out updates from the community

00:46:14.205 --> 00:46:16.205
<v Speaker 1>about two or three times a week.

00:46:16.685 --> 00:46:19.005
<v Speaker 1>It'll probably stay at that pace for for

00:46:19.005 --> 00:46:19.405
<v Speaker 1>a while.

00:46:20.720 --> 00:46:22.800
<v Speaker 1>And yeah. So really do you don't have

00:46:22.800 --> 00:46:24.480
<v Speaker 1>do anything. Every time you run it like

00:46:24.480 --> 00:46:25.839
<v Speaker 1>you did earlier, actually, when you started it

00:46:25.839 --> 00:46:27.280
<v Speaker 1>out, you actually just ran it to look

00:46:27.280 --> 00:46:29.359
<v Speaker 1>for that problem. It'll do that quick update

00:46:29.359 --> 00:46:30.880
<v Speaker 1>and sell it and then finish doing the

00:46:30.880 --> 00:46:32.000
<v Speaker 1>thing you asked it to do, and it

00:46:32.000 --> 00:46:33.545
<v Speaker 1>does it very fast. That's why we did

00:46:33.545 --> 00:46:35.385
<v Speaker 1>the UDP check. We wanted that update check

00:46:35.385 --> 00:46:36.985
<v Speaker 1>to be as fast as possible.

00:46:37.385 --> 00:46:39.145
<v Speaker 1>And I think we're averaging, like at least

00:46:39.145 --> 00:46:40.905
<v Speaker 1>in The US, I'm not sure about Scotland.

00:46:40.905 --> 00:46:43.065
<v Speaker 1>In The US, it's for around forty milliseconds

00:46:43.065 --> 00:46:44.025
<v Speaker 1>for that check.

00:46:44.745 --> 00:46:46.745
<v Speaker 1>I'm actually curious what your latency was for

00:46:46.745 --> 00:46:48.425
<v Speaker 1>UDP packet. We'll have to find out.

00:46:50.609 --> 00:46:51.330
<v Speaker 0>Yeah.

00:46:51.890 --> 00:46:53.650
<v Speaker 0>I have no idea. I mean, I'm also

00:46:53.650 --> 00:46:53.970
<v Speaker 0>on

00:46:54.609 --> 00:46:57.089
<v Speaker 0>I I my office is a listed building,

00:46:57.089 --> 00:46:59.410
<v Speaker 0>so I'm not allowed fiber even though I

00:46:59.410 --> 00:47:00.930
<v Speaker 0>can see the fiber point on the ground

00:47:00.930 --> 00:47:03.010
<v Speaker 0>outside, but they can't drill in my building.

00:47:03.010 --> 00:47:04.735
<v Speaker 0>That's very annoying. And so I have use

00:47:04.735 --> 00:47:06.015
<v Speaker 1>five fast.

00:47:06.335 --> 00:47:07.855
<v Speaker 0>Yeah. Yeah. I use five g. And it's

00:47:07.855 --> 00:47:09.135
<v Speaker 0>it's okay. It has its good days and

00:47:09.135 --> 00:47:11.455
<v Speaker 0>its bad days. Yeah. Yeah. Great. My my

00:47:11.455 --> 00:47:13.615
<v Speaker 1>cofounder's latency, Linda's listening right now, and so

00:47:13.615 --> 00:47:15.215
<v Speaker 1>I'm very excited to say that his latency

00:47:15.215 --> 00:47:17.510
<v Speaker 1>for DNS lookups is, like, six hundred milliseconds,

00:47:17.510 --> 00:47:18.790
<v Speaker 1>and I don't know how you survive a

00:47:18.790 --> 00:47:20.470
<v Speaker 1>human in his house. I don't know how

00:47:20.470 --> 00:47:21.350
<v Speaker 1>you do it, Linden.

00:47:21.670 --> 00:47:22.790
<v Speaker 0>I don't know how you do it.

00:47:23.750 --> 00:47:25.830
<v Speaker 0>Hard hard pass on that one for sure.

00:47:27.109 --> 00:47:29.349
<v Speaker 0>Alright. Maybe you can talk what's the in

00:47:29.349 --> 00:47:30.710
<v Speaker 0>fact, let me push this back to,

00:47:31.455 --> 00:47:32.655
<v Speaker 0>like, face mode.

00:47:32.975 --> 00:47:33.855
<v Speaker 0>There we go.

00:47:34.335 --> 00:47:36.575
<v Speaker 0>Well, you've got a commercial product. Right? You're

00:47:36.575 --> 00:47:38.655
<v Speaker 0>trying to make this something that is open

00:47:38.655 --> 00:47:40.575
<v Speaker 0>source and available to anyone. There is a

00:47:40.575 --> 00:47:42.975
<v Speaker 0>community contributing thing. But, of course, open source

00:47:42.975 --> 00:47:44.655
<v Speaker 0>has to be sustainable. Right? This is something

00:47:44.655 --> 00:47:46.335
<v Speaker 0>that people often forget, and they go, ah,

00:47:46.335 --> 00:47:47.790
<v Speaker 0>closed source. Done.

00:47:47.950 --> 00:47:48.990
<v Speaker 0>Actually,

00:47:49.470 --> 00:47:52.110
<v Speaker 0>off my audio interface. But how

00:47:52.110 --> 00:47:53.710
<v Speaker 0>how do you build a business around this?

00:47:53.710 --> 00:47:54.990
<v Speaker 0>How do you make sure that the open

00:47:54.990 --> 00:47:56.670
<v Speaker 0>source project has a long shelf life that

00:47:56.670 --> 00:47:58.350
<v Speaker 0>people can trust and adopt? Because that's obviously

00:47:58.350 --> 00:47:59.710
<v Speaker 0>gonna be an important part of your mission,

00:47:59.925 --> 00:48:01.205
<v Speaker 0>which means you have to have a successful

00:48:01.205 --> 00:48:02.565
<v Speaker 0>company buying it. So maybe you could go

00:48:02.565 --> 00:48:04.085
<v Speaker 0>into that in a bit more detail, folks.

00:48:04.405 --> 00:48:06.005
<v Speaker 1>Yeah. A really good question.

00:48:06.405 --> 00:48:07.045
<v Speaker 1>So

00:48:07.285 --> 00:48:09.365
<v Speaker 1>the way we think about it is

00:48:10.005 --> 00:48:13.045
<v Speaker 1>the the schema for common reliability enumerations, it

00:48:13.045 --> 00:48:15.125
<v Speaker 1>is really important for that to be open.

00:48:16.470 --> 00:48:19.190
<v Speaker 1>Because if you want to have a community

00:48:19.190 --> 00:48:21.430
<v Speaker 1>of practitioners, engineers,

00:48:21.590 --> 00:48:22.950
<v Speaker 1>customer support,

00:48:23.110 --> 00:48:24.150
<v Speaker 1>you know, people

00:48:25.350 --> 00:48:27.430
<v Speaker 1>using, contributing, growing

00:48:27.830 --> 00:48:30.310
<v Speaker 1>these rules, it's really important that it that

00:48:30.310 --> 00:48:32.025
<v Speaker 1>it be open. So that's that's why we

00:48:32.025 --> 00:48:33.705
<v Speaker 1>decided to make it Apache two.

00:48:34.265 --> 00:48:35.945
<v Speaker 1>And the Preq tool itself

00:48:36.825 --> 00:48:38.825
<v Speaker 1>actually uses a lot of the exact it's

00:48:38.825 --> 00:48:40.505
<v Speaker 1>basically the same compiler. So if you go

00:48:40.505 --> 00:48:42.025
<v Speaker 1>to the, you know, Preql dash compiler and

00:48:42.025 --> 00:48:43.385
<v Speaker 1>the Gel repo, that's the same thing that's

00:48:43.385 --> 00:48:44.505
<v Speaker 1>in the commercial product.

00:48:44.905 --> 00:48:46.425
<v Speaker 1>But there are some key differences,

00:48:46.880 --> 00:48:48.880
<v Speaker 1>and the key differences are on the types

00:48:48.880 --> 00:48:50.880
<v Speaker 1>of data that you can run the rules

00:48:50.880 --> 00:48:52.960
<v Speaker 1>on. And that's kinda how we make this

00:48:52.960 --> 00:48:54.880
<v Speaker 1>balance kinda to your to your question.

00:48:55.120 --> 00:48:56.880
<v Speaker 1>For the open source tool, it will work

00:48:56.880 --> 00:48:59.280
<v Speaker 1>on log data and configuration data.

00:48:59.795 --> 00:49:02.515
<v Speaker 1>For the commercial product, we look at Kubernetes

00:49:02.515 --> 00:49:03.235
<v Speaker 1>events,

00:49:03.395 --> 00:49:05.075
<v Speaker 1>process events, and OOMs,

00:49:05.155 --> 00:49:07.155
<v Speaker 1>time series data, OpenTelemetry

00:49:07.155 --> 00:49:07.795
<v Speaker 1>data,

00:49:08.115 --> 00:49:10.035
<v Speaker 1>you know, all of the support for, like,

00:49:10.035 --> 00:49:12.115
<v Speaker 1>running it on, you know, ECS or,

00:49:12.920 --> 00:49:15.960
<v Speaker 1>some kind of CloudWatch based data. Those

00:49:16.200 --> 00:49:18.440
<v Speaker 1>data sources probably only live in the commercial

00:49:18.440 --> 00:49:20.760
<v Speaker 1>product. And another key difference

00:49:21.400 --> 00:49:23.960
<v Speaker 1>between the open source product and the commercial

00:49:23.960 --> 00:49:25.720
<v Speaker 1>product is around correlations.

00:49:26.355 --> 00:49:27.955
<v Speaker 1>So the open source product is kind of

00:49:27.955 --> 00:49:28.515
<v Speaker 1>a

00:49:28.994 --> 00:49:30.515
<v Speaker 1>one data source at a time. If you

00:49:30.515 --> 00:49:32.035
<v Speaker 1>wanna look at this one service for problems

00:49:32.035 --> 00:49:33.715
<v Speaker 1>with this one service, it's great for that.

00:49:33.875 --> 00:49:35.555
<v Speaker 1>But if you really wanna look at, hey.

00:49:35.555 --> 00:49:36.835
<v Speaker 1>I need to know when

00:49:37.075 --> 00:49:37.795
<v Speaker 1>my

00:49:38.435 --> 00:49:40.355
<v Speaker 1>back end service is having a bunch of

00:49:40.355 --> 00:49:41.155
<v Speaker 1>GraphQL

00:49:41.155 --> 00:49:41.955
<v Speaker 1>500s,

00:49:42.260 --> 00:49:43.380
<v Speaker 1>and it's causing

00:49:43.540 --> 00:49:47.380
<v Speaker 1>my user facing NGINX service to generate 500s

00:49:47.380 --> 00:49:48.900
<v Speaker 1>to the users on the API,

00:49:49.059 --> 00:49:50.900
<v Speaker 1>like in correlating those two things at the

00:49:50.900 --> 00:49:52.980
<v Speaker 1>same time, that's where the commercial product and

00:49:52.980 --> 00:49:54.900
<v Speaker 1>the language works really well for those correlations.

00:49:55.565 --> 00:49:57.245
<v Speaker 1>But you you can't do that in Greek.

00:49:57.405 --> 00:49:58.845
<v Speaker 1>And that's really it. That's the key kind

00:49:58.845 --> 00:49:59.885
<v Speaker 1>of the key difference, but it's the same

00:49:59.885 --> 00:50:02.445
<v Speaker 1>codes. Like, the the compiler that we're using,

00:50:02.445 --> 00:50:04.605
<v Speaker 1>the commercial product, is actually that compiler code

00:50:04.605 --> 00:50:06.365
<v Speaker 1>that's in the open source version. And we're

00:50:06.365 --> 00:50:08.285
<v Speaker 1>not gonna, like, have two different versions. We're

00:50:08.285 --> 00:50:10.260
<v Speaker 1>actually using the same thing. So that's kinda

00:50:10.260 --> 00:50:10.980
<v Speaker 1>how we

00:50:11.940 --> 00:50:13.540
<v Speaker 1>keep it going and and make it easy

00:50:13.540 --> 00:50:15.940
<v Speaker 1>for us to support the commercial product because

00:50:15.940 --> 00:50:18.180
<v Speaker 1>it's it's the same code base. And using

00:50:18.180 --> 00:50:21.380
<v Speaker 1>that data source and correlation distinction kinda line

00:50:21.540 --> 00:50:23.380
<v Speaker 1>kinda makes it easy to

00:50:23.835 --> 00:50:26.075
<v Speaker 1>continue supporting the open source version, but have

00:50:26.075 --> 00:50:27.435
<v Speaker 1>a lot of really cool value in the

00:50:27.435 --> 00:50:28.475
<v Speaker 1>enterprise product.

00:50:29.515 --> 00:50:30.235
<v Speaker 0>Okay.

00:50:31.195 --> 00:50:33.515
<v Speaker 0>If I remember correctly from earlier on, right,

00:50:33.515 --> 00:50:35.115
<v Speaker 0>you also said there's the

00:50:35.870 --> 00:50:38.110
<v Speaker 0>open source CREs, but you maintain your own

00:50:38.110 --> 00:50:40.510
<v Speaker 0>proprietary database of CREs. How would you make

00:50:40.510 --> 00:50:43.310
<v Speaker 0>that decision then when your team come across

00:50:43.310 --> 00:50:45.390
<v Speaker 0>something? Should it live in a provider one?

00:50:45.390 --> 00:50:47.310
<v Speaker 0>Should it live in the open source one?

00:50:47.310 --> 00:50:49.070
<v Speaker 0>And do you have any sort of pledge

00:50:48.915 --> 00:50:50.515
<v Speaker 0>to the community that things that go into

00:50:50.515 --> 00:50:52.275
<v Speaker 0>the proprietary one after twelve

00:50:52.755 --> 00:50:54.195
<v Speaker 0>months will make their way down to, like,

00:50:54.195 --> 00:50:55.715
<v Speaker 0>open source? Like, how do you build around

00:50:55.715 --> 00:50:57.795
<v Speaker 0>us and give people you know, because the

00:50:57.795 --> 00:50:59.475
<v Speaker 0>better the open source repository, it's the better

00:50:59.475 --> 00:51:00.995
<v Speaker 0>the product edge, and hopefully, that leads to

00:51:00.995 --> 00:51:02.995
<v Speaker 0>more adoption of the commercial Yeah. Absolutely. Of

00:51:02.995 --> 00:51:04.890
<v Speaker 0>course, this is this is a a tight

00:51:04.890 --> 00:51:06.250
<v Speaker 0>rope that a lot of open source companies

00:51:06.250 --> 00:51:08.490
<v Speaker 0>have to trade on carefully. So Yeah. I

00:51:08.490 --> 00:51:11.049
<v Speaker 1>I it's actually what's kinda cool about drawing

00:51:11.049 --> 00:51:12.809
<v Speaker 1>the line on correlations

00:51:12.809 --> 00:51:13.690
<v Speaker 1>is that

00:51:14.089 --> 00:51:16.490
<v Speaker 1>if you can detect the problem entirely within

00:51:16.490 --> 00:51:18.650
<v Speaker 1>that one data source, then it probably should

00:51:18.650 --> 00:51:21.405
<v Speaker 1>just be an open source rule. Most

00:51:22.525 --> 00:51:24.045
<v Speaker 1>rules, I think, are going to be shaped

00:51:24.045 --> 00:51:26.285
<v Speaker 1>like that. Now, when it comes to,

00:51:26.685 --> 00:51:28.445
<v Speaker 1>hey, this is actually kind of a really

00:51:28.445 --> 00:51:29.805
<v Speaker 1>hard thing to detect because you need to

00:51:29.805 --> 00:51:31.725
<v Speaker 1>look at four different things happening at once,

00:51:31.725 --> 00:51:31.965
<v Speaker 1>and

00:51:32.530 --> 00:51:34.290
<v Speaker 1>you need to also reduce

00:51:34.290 --> 00:51:37.730
<v Speaker 1>some false positives here. That's where correlations are

00:51:38.130 --> 00:51:39.090
<v Speaker 1>really important.

00:51:39.490 --> 00:51:40.850
<v Speaker 1>That's only going to be something that would

00:51:40.850 --> 00:51:42.450
<v Speaker 1>be available in the commercial rules for the

00:51:42.450 --> 00:51:44.530
<v Speaker 1>commercial product. And so I think that's how

00:51:44.530 --> 00:51:45.250
<v Speaker 1>we're thinking about it.

00:51:47.335 --> 00:51:49.255
<v Speaker 1>Think we're honestly, we're excited to see where

00:51:49.255 --> 00:51:50.535
<v Speaker 1>the community takes us.

00:51:50.855 --> 00:51:53.495
<v Speaker 1>And as we get more contributors and kind

00:51:53.495 --> 00:51:55.735
<v Speaker 1>of more users on PREC and CREs,

00:51:56.055 --> 00:51:56.855
<v Speaker 1>we're

00:51:56.855 --> 00:51:58.455
<v Speaker 1>listening to what people need.

00:51:59.130 --> 00:52:00.730
<v Speaker 1>And so I don't think we actually have

00:52:00.730 --> 00:52:01.930
<v Speaker 1>a hard and fast rule. This is something

00:52:01.930 --> 00:52:03.930
<v Speaker 1>during my time at Elastic working with open

00:52:03.930 --> 00:52:04.490
<v Speaker 1>source,

00:52:05.770 --> 00:52:07.849
<v Speaker 1>we would very often try to brainstorm, okay,

00:52:07.849 --> 00:52:09.609
<v Speaker 1>what's the rule, the principle that we're going

00:52:09.609 --> 00:52:10.890
<v Speaker 1>to use to make the same decision?

00:52:11.515 --> 00:52:12.875
<v Speaker 1>And we

00:52:13.275 --> 00:52:14.715
<v Speaker 1>tried many times to come up with a

00:52:14.715 --> 00:52:16.875
<v Speaker 1>rule and it never worked because every situation

00:52:16.875 --> 00:52:17.675
<v Speaker 1>was unique.

00:52:18.075 --> 00:52:19.835
<v Speaker 1>So I think we don't have really a

00:52:19.835 --> 00:52:22.155
<v Speaker 1>hard, fast rule. It's really just let's go

00:52:22.155 --> 00:52:22.875
<v Speaker 1>where

00:52:23.275 --> 00:52:26.475
<v Speaker 1>customers and users of the open source projects

00:52:26.690 --> 00:52:29.170
<v Speaker 1>see value and need value, and and that's

00:52:29.170 --> 00:52:30.050
<v Speaker 1>what we're gonna do.

00:52:31.010 --> 00:52:32.290
<v Speaker 0>K. Awesome.

00:52:32.530 --> 00:52:35.970
<v Speaker 0>And I'm assuming, Prik, the open source CLI

00:52:35.970 --> 00:52:37.250
<v Speaker 0>that you said is the basis for the

00:52:37.250 --> 00:52:39.170
<v Speaker 0>commercial product and the open and obviously open

00:52:39.170 --> 00:52:39.650
<v Speaker 0>source one.

00:52:40.775 --> 00:52:42.695
<v Speaker 0>If people want to contribute to that, is

00:52:42.695 --> 00:52:44.935
<v Speaker 0>that something that is approachable? How do they

00:52:44.935 --> 00:52:45.815
<v Speaker 0>get started?

00:52:46.295 --> 00:52:48.455
<v Speaker 0>Like, you know because I'm doing this until

00:52:48.615 --> 00:52:50.535
<v Speaker 0>I think that the appeal, right, of why

00:52:50.535 --> 00:52:52.215
<v Speaker 0>I want to use this is is may

00:52:52.215 --> 00:52:53.975
<v Speaker 0>and date. That's the wrong thing.

00:52:57.430 --> 00:52:59.190
<v Speaker 0>What is what am I trying to say?

00:52:59.670 --> 00:53:02.150
<v Speaker 0>It's universal. Everybody wants to use it. I

00:53:02.150 --> 00:53:03.670
<v Speaker 0>can imagine, like, nobody was saying, oh, I'm

00:53:03.670 --> 00:53:05.030
<v Speaker 0>not gonna use that. Right? It's right there.

00:53:05.030 --> 00:53:06.150
<v Speaker 0>Why would you not use it?

00:53:06.950 --> 00:53:08.950
<v Speaker 0>How do people get contribute into the open

00:53:08.950 --> 00:53:10.390
<v Speaker 0>source project if that's what they want to

00:53:10.390 --> 00:53:12.525
<v Speaker 0>do? Right? You mentioned there's the compiler. There's

00:53:12.525 --> 00:53:12.925
<v Speaker 0>the.

00:53:13.725 --> 00:53:15.645
<v Speaker 0>Those obviously, the CRUs. Right? Let's put that

00:53:15.645 --> 00:53:17.085
<v Speaker 0>to the side because those, I think, are

00:53:17.085 --> 00:53:18.205
<v Speaker 0>a completely different

00:53:18.365 --> 00:53:21.005
<v Speaker 0>construct to contribute in code. How do we

00:53:21.005 --> 00:53:21.645
<v Speaker 0>do that?

00:53:22.365 --> 00:53:24.685
<v Speaker 1>So the the all of our code

00:53:24.925 --> 00:53:27.560
<v Speaker 1>base is in Go. So that's kinda the

00:53:27.560 --> 00:53:29.880
<v Speaker 1>first question is, are you comfortable in Go?

00:53:29.880 --> 00:53:30.680
<v Speaker 1>And if not,

00:53:31.080 --> 00:53:33.800
<v Speaker 1>it is a little bit harder to contribute

00:53:33.800 --> 00:53:35.080
<v Speaker 1>to the actual

00:53:35.240 --> 00:53:37.160
<v Speaker 1>the the code base itself.

00:53:37.800 --> 00:53:39.000
<v Speaker 1>But if you do know Go,

00:53:40.565 --> 00:53:42.244
<v Speaker 1>we want to be as approachable as possible.

00:53:42.244 --> 00:53:43.444
<v Speaker 1>In fact, we were actually just talking with

00:53:43.444 --> 00:53:44.005
<v Speaker 1>someone

00:53:44.724 --> 00:53:47.444
<v Speaker 1>on Monday that was like, hey. Your

00:53:47.444 --> 00:53:49.924
<v Speaker 1>contributing docs talk about how you wanna open

00:53:49.924 --> 00:53:51.924
<v Speaker 1>up an issue and have a discussion first.

00:53:51.924 --> 00:53:53.870
<v Speaker 1>And that That made me feel like you

00:53:53.870 --> 00:53:55.870
<v Speaker 1>weren't wanting to accept PRs because you would

00:53:55.870 --> 00:53:56.990
<v Speaker 1>just kind of go off and have this

00:53:56.990 --> 00:53:59.550
<v Speaker 1>conversation that nothing would actually ever happen. Like,

00:53:59.550 --> 00:54:01.310
<v Speaker 1>Oh, that's a bug in our docs, and

00:54:01.310 --> 00:54:02.670
<v Speaker 1>we're going to fix that. Because we

00:54:03.310 --> 00:54:05.470
<v Speaker 1>want as many contributors as possible. We want

00:54:05.470 --> 00:54:07.415
<v Speaker 1>as many ideas as possible, and so we

00:54:07.415 --> 00:54:08.535
<v Speaker 1>want it to be as easy as possible

00:54:08.535 --> 00:54:09.335
<v Speaker 1>to contribute.

00:54:10.215 --> 00:54:11.415
<v Speaker 1>So I think if

00:54:11.655 --> 00:54:13.575
<v Speaker 1>you know Go, come hang out with us,

00:54:13.575 --> 00:54:15.815
<v Speaker 1>join our Slack. But even if you don't,

00:54:15.815 --> 00:54:17.575
<v Speaker 1>like you just said earlier, you don't need

00:54:17.575 --> 00:54:20.135
<v Speaker 1>to know Go to contribute CREs. The language

00:54:20.135 --> 00:54:21.895
<v Speaker 1>is very, very simple. It's just YAML,

00:54:22.370 --> 00:54:25.010
<v Speaker 1>and it's like string pattern matching in regular

00:54:25.010 --> 00:54:26.930
<v Speaker 1>expressions. You can actually do JQ queries in

00:54:26.930 --> 00:54:29.010
<v Speaker 1>that too, but it's very easy to write.

00:54:29.810 --> 00:54:32.210
<v Speaker 1>And so, yeah, I think we're welcoming contributors

00:54:32.210 --> 00:54:34.610
<v Speaker 1>on both the actual code base itself, but

00:54:34.610 --> 00:54:35.650
<v Speaker 1>also CREs.

00:54:36.930 --> 00:54:37.170
<v Speaker 0>Nice.

00:54:37.905 --> 00:54:39.985
<v Speaker 0>Alright. I I mean, I was asking also

00:54:39.985 --> 00:54:42.625
<v Speaker 0>firstly the selfish reasons because I know Go.

00:54:42.625 --> 00:54:44.705
<v Speaker 0>I think I could probably contribute a different

00:54:44.705 --> 00:54:45.265
<v Speaker 0>idea.

00:54:45.665 --> 00:54:47.185
<v Speaker 0>We're doing it. I mean, my my initial

00:54:47.185 --> 00:54:49.025
<v Speaker 0>thought was, you know, I'm not a big

00:54:49.025 --> 00:54:51.340
<v Speaker 0>fan of the piping the logs through and

00:54:51.340 --> 00:54:53.500
<v Speaker 0>stuff like that. Like, what if Preak could

00:54:53.500 --> 00:54:55.580
<v Speaker 0>have, like, a run command that just ran

00:54:55.580 --> 00:54:57.820
<v Speaker 0>the thing for me and grabbed the logs?

00:54:57.820 --> 00:54:59.500
<v Speaker 0>Like, I think that would be a an

00:54:59.500 --> 00:55:01.340
<v Speaker 0>interesting approach. But I understand that.

00:55:02.115 --> 00:55:03.555
<v Speaker 1>Is built into

00:55:03.875 --> 00:55:05.555
<v Speaker 1>the tools. We kinda didn't get into it,

00:55:05.555 --> 00:55:08.115
<v Speaker 1>but you can specify data sources. You can

00:55:08.115 --> 00:55:10.275
<v Speaker 1>say, alright. Siri dot log dot nginx

00:55:10.435 --> 00:55:13.075
<v Speaker 1>is at this file path. And then that's

00:55:13.075 --> 00:55:14.355
<v Speaker 1>just the YAML file. So you can run

00:55:14.355 --> 00:55:15.980
<v Speaker 1>Preak, and it'll and then you can put

00:55:15.980 --> 00:55:17.660
<v Speaker 1>one file path or many. You can put

00:55:17.660 --> 00:55:18.860
<v Speaker 1>it in a priority order.

00:55:19.099 --> 00:55:20.859
<v Speaker 1>So it'll do that too. If you wanna,

00:55:20.859 --> 00:55:22.540
<v Speaker 1>like, run this on a more consistent basis,

00:55:22.540 --> 00:55:23.820
<v Speaker 1>you can define all those data sources in

00:55:23.820 --> 00:55:25.020
<v Speaker 1>the file. You don't have to pipe via

00:55:25.020 --> 00:55:26.460
<v Speaker 1>standard in. Standard in is kind of a

00:55:26.540 --> 00:55:28.300
<v Speaker 1>there's a very fast way to, like, see

00:55:28.300 --> 00:55:30.115
<v Speaker 1>how it works. But, yeah, if you're running

00:55:30.115 --> 00:55:31.875
<v Speaker 1>it on a more regular basis kind of

00:55:31.875 --> 00:55:33.715
<v Speaker 1>in production, you you'd be using the data

00:55:33.715 --> 00:55:35.075
<v Speaker 1>start the data source file.

00:55:35.315 --> 00:55:37.155
<v Speaker 0>Oh, nice. Okay. I'll definitely be taking a

00:55:37.155 --> 00:55:39.635
<v Speaker 0>look at that then. Alright. Let's go with

00:55:39.635 --> 00:55:40.835
<v Speaker 0>one more question.

00:55:40.995 --> 00:55:43.200
<v Speaker 0>Like, what is your your road map? So

00:55:43.200 --> 00:55:45.359
<v Speaker 0>what are you looking to do with Preak

00:55:45.359 --> 00:55:46.960
<v Speaker 0>over the next three months, six months, nine

00:55:46.960 --> 00:55:49.200
<v Speaker 0>months? Definitely not. How how how far how

00:55:49.200 --> 00:55:50.400
<v Speaker 0>far ahead have you planned?

00:55:50.720 --> 00:55:53.280
<v Speaker 1>Yeah. Yeah. So I'll I'll answer it from

00:55:53.280 --> 00:55:55.280
<v Speaker 1>both the context of Preak and then the

00:55:55.280 --> 00:55:57.119
<v Speaker 1>commercial product Prequel. So for Preak,

00:55:57.905 --> 00:56:01.185
<v Speaker 1>we're really focused on the CRE library and

00:56:01.185 --> 00:56:02.705
<v Speaker 1>bringing in more contributors

00:56:02.785 --> 00:56:04.545
<v Speaker 1>and actually actively reaching out to

00:56:04.865 --> 00:56:06.705
<v Speaker 1>experts in Kafka

00:56:06.705 --> 00:56:08.465
<v Speaker 1>community and RabbitMQ,

00:56:08.465 --> 00:56:09.425
<v Speaker 1>NGINX,

00:56:09.425 --> 00:56:10.225
<v Speaker 1>Redis,

00:56:10.385 --> 00:56:10.865
<v Speaker 1>Postgres,

00:56:11.500 --> 00:56:13.580
<v Speaker 1>and and really just, hey. What are some

00:56:13.580 --> 00:56:15.100
<v Speaker 1>of the problems that you've been running across?

00:56:15.100 --> 00:56:17.500
<v Speaker 1>Let's start codifying that intelligence so that everyone

00:56:17.500 --> 00:56:19.100
<v Speaker 1>can benefit from your knowledge.

00:56:19.820 --> 00:56:21.900
<v Speaker 1>And so our road map for Preq and

00:56:21.900 --> 00:56:23.340
<v Speaker 1>the open source tool is

00:56:23.785 --> 00:56:26.185
<v Speaker 1>primarily focused on growing that community

00:56:26.425 --> 00:56:27.865
<v Speaker 1>and then trying to

00:56:28.105 --> 00:56:31.065
<v Speaker 1>find features that would unlock its usage. So

00:56:31.065 --> 00:56:32.985
<v Speaker 1>this week, we actually just added the automated

00:56:32.985 --> 00:56:33.865
<v Speaker 1>runbooks

00:56:33.865 --> 00:56:35.145
<v Speaker 1>because we had someone

00:56:35.305 --> 00:56:37.320
<v Speaker 1>last week tell us like, hey. I would

00:56:37.320 --> 00:56:39.720
<v Speaker 1>like to have some automation here to, like,

00:56:39.720 --> 00:56:41.400
<v Speaker 1>actually have it do something when a specific

00:56:41.400 --> 00:56:42.360
<v Speaker 1>rule is fired.

00:56:42.680 --> 00:56:44.600
<v Speaker 1>And so for a open source project, it's

00:56:44.600 --> 00:56:47.560
<v Speaker 1>primarily focused on growing the contributors for rules

00:56:47.640 --> 00:56:50.040
<v Speaker 1>and adding features that would make it even

00:56:50.040 --> 00:56:51.160
<v Speaker 1>easier to use

00:56:51.400 --> 00:56:52.760
<v Speaker 1>and sort of grow adoption.

00:56:53.375 --> 00:56:55.375
<v Speaker 1>Then the commercial product, it's really all about

00:56:55.375 --> 00:56:57.135
<v Speaker 1>focusing on data sources.

00:56:57.375 --> 00:56:58.974
<v Speaker 1>And so one of the features that we're

00:56:58.974 --> 00:57:01.694
<v Speaker 1>really excited about is adding time series data

00:57:01.694 --> 00:57:03.615
<v Speaker 1>so that you can do these correlations across

00:57:03.615 --> 00:57:07.600
<v Speaker 1>logs, configuration data, Kubernetes events, and some event

00:57:07.600 --> 00:57:09.760
<v Speaker 1>that's generated from a rule on time series

00:57:09.760 --> 00:57:10.400
<v Speaker 1>data.

00:57:10.560 --> 00:57:12.800
<v Speaker 1>I think that's kind of something that maybe

00:57:13.840 --> 00:57:15.440
<v Speaker 1>you'd be kind of a crazy person to

00:57:15.440 --> 00:57:17.360
<v Speaker 1>think is feasible to do, kind of like

00:57:17.360 --> 00:57:19.280
<v Speaker 1>doing these correlations across like a bunch of

00:57:19.280 --> 00:57:21.040
<v Speaker 1>time series data and log data. And I

00:57:21.040 --> 00:57:23.655
<v Speaker 1>I think that's like doing sequences and correlations

00:57:23.655 --> 00:57:25.495
<v Speaker 1>across all of the different data types is

00:57:25.495 --> 00:57:26.855
<v Speaker 1>really, really powerful.

00:57:27.495 --> 00:57:29.015
<v Speaker 1>And so that's one of the things that

00:57:29.015 --> 00:57:31.255
<v Speaker 1>we're really focused on right now as well

00:57:31.255 --> 00:57:31.735
<v Speaker 1>as,

00:57:32.615 --> 00:57:34.695
<v Speaker 1>again, just growing the commercial role library there

00:57:34.695 --> 00:57:36.455
<v Speaker 1>as well. So that's kind of at a

00:57:36.455 --> 00:57:36.935
<v Speaker 1>high level

00:57:37.420 --> 00:57:39.500
<v Speaker 1>for Preak and the commercial product, what we're

00:57:39.500 --> 00:57:41.260
<v Speaker 1>focused on for the next year. And then

00:57:41.260 --> 00:57:42.860
<v Speaker 1>maybe one other thing to talk about

00:57:43.260 --> 00:57:45.020
<v Speaker 1>from the commercial product standpoint, you know, you

00:57:45.020 --> 00:57:46.700
<v Speaker 1>were just you were using Claude

00:57:46.700 --> 00:57:48.620
<v Speaker 1>in your your command line there.

00:57:49.180 --> 00:57:51.505
<v Speaker 1>I think one of the really powerful ways

00:57:51.505 --> 00:57:52.385
<v Speaker 1>to leverage

00:57:52.865 --> 00:57:54.305
<v Speaker 1>AI and LLMs

00:57:54.465 --> 00:57:55.105
<v Speaker 1>is,

00:57:55.345 --> 00:57:57.025
<v Speaker 1>at least in the Porsche product, two ways.

00:57:57.025 --> 00:57:59.185
<v Speaker 1>One is in explaining what happened.

00:57:59.425 --> 00:58:01.105
<v Speaker 1>So the cool thing about these rules is

00:58:01.105 --> 00:58:02.385
<v Speaker 1>it builds this tree

00:58:02.680 --> 00:58:04.520
<v Speaker 1>of kind of things that were matched across

00:58:04.520 --> 00:58:07.000
<v Speaker 1>different data sources and has specific hits like

00:58:07.000 --> 00:58:08.440
<v Speaker 1>you saw on the playground, like actually what

00:58:08.440 --> 00:58:10.840
<v Speaker 1>fired. So with all of that data, like,

00:58:10.840 --> 00:58:12.760
<v Speaker 1>what are these entities, these data sources?

00:58:13.000 --> 00:58:14.200
<v Speaker 1>What are the matches?

00:58:14.360 --> 00:58:15.815
<v Speaker 1>And what was the rule actually trying to

00:58:15.815 --> 00:58:18.295
<v Speaker 1>do? The rule itself describes the problem, the

00:58:18.295 --> 00:58:19.015
<v Speaker 1>mitigation.

00:58:19.655 --> 00:58:21.974
<v Speaker 1>AI is really good at summarizing

00:58:21.974 --> 00:58:23.895
<v Speaker 1>this in a story, almost like a notebook.

00:58:23.895 --> 00:58:26.135
<v Speaker 1>This is, Okay. Here's what happened. First,

00:58:27.015 --> 00:58:28.934
<v Speaker 1>this log data right here, this log mesh,

00:58:29.340 --> 00:58:31.500
<v Speaker 1>this is what this means. Then this time

00:58:31.500 --> 00:58:33.580
<v Speaker 1>series metric kind of exploded.

00:58:33.900 --> 00:58:37.260
<v Speaker 1>These rules really do it's really good scaffolding

00:58:37.900 --> 00:58:39.900
<v Speaker 1>upon which an LLM can kind of summarize

00:58:39.900 --> 00:58:40.780
<v Speaker 1>for someone

00:58:40.940 --> 00:58:42.860
<v Speaker 1>a story, like, Tell me what happened. Instead

00:58:42.860 --> 00:58:44.540
<v Speaker 1>of choosing my own adventure through the data,

00:58:44.994 --> 00:58:46.035
<v Speaker 1>it's

00:58:46.035 --> 00:58:47.875
<v Speaker 1>awesome to have an explanation on top of

00:58:47.875 --> 00:58:49.474
<v Speaker 1>that, a really simple one. And then the

00:58:49.474 --> 00:58:51.715
<v Speaker 1>other one is if you've ever used Cursor

00:58:51.875 --> 00:58:52.595
<v Speaker 1>for

00:58:53.315 --> 00:58:54.755
<v Speaker 1>AI autocomplete,

00:58:55.075 --> 00:58:57.714
<v Speaker 1>rule creation is another really cool opportunity to

00:58:57.714 --> 00:58:59.875
<v Speaker 1>leverage AI in the product, and that's another

00:58:59.875 --> 00:59:01.200
<v Speaker 1>thing that we're working on this year.

00:59:02.080 --> 00:59:03.520
<v Speaker 0>Awesome. Nice.

00:59:03.920 --> 00:59:06.160
<v Speaker 0>Yeah. I mean, you're right about the

00:59:06.400 --> 00:59:08.080
<v Speaker 0>the model stuff. Like,

00:59:08.320 --> 00:59:09.840
<v Speaker 0>you know, people are always asking which model

00:59:09.840 --> 00:59:12.240
<v Speaker 0>is better between, like, the OpenAI stuff, the

00:59:12.240 --> 00:59:14.320
<v Speaker 0>cloud stuff. You know? There's a Mistral models.

00:59:14.320 --> 00:59:16.454
<v Speaker 0>There's Gemini. Mean, I these models are only

00:59:16.454 --> 00:59:18.454
<v Speaker 0>as good as the curation of the data

00:59:18.454 --> 00:59:20.454
<v Speaker 0>that they're trained on. Mhmm. So when it

00:59:20.454 --> 00:59:23.174
<v Speaker 0>comes to what you're building with the CREs

00:59:23.174 --> 00:59:25.734
<v Speaker 0>and that open source collective knowledge, the library

00:59:25.734 --> 00:59:26.295
<v Speaker 0>of

00:59:26.934 --> 00:59:29.255
<v Speaker 0>problems that happen with applications, the version numbers,

00:59:29.310 --> 00:59:31.150
<v Speaker 0>And then it's all that extra metadata that

00:59:31.150 --> 00:59:33.550
<v Speaker 0>you're providing, the impact analysis and all. Exactly.

00:59:33.550 --> 00:59:34.430
<v Speaker 0>That is

00:59:34.830 --> 00:59:37.390
<v Speaker 0>is gold dust for for models to ingest

00:59:37.390 --> 00:59:40.030
<v Speaker 0>and help you understand production infrastructure. So that,

00:59:40.030 --> 00:59:41.470
<v Speaker 0>I think, is a no brainer. Like, I

00:59:41.470 --> 00:59:43.870
<v Speaker 0>see a very positive AI tie in with

00:59:43.870 --> 00:59:46.075
<v Speaker 0>what you're building with the CRE model and

00:59:46.075 --> 00:59:47.755
<v Speaker 0>the open sources of that and the collective

00:59:47.755 --> 00:59:49.515
<v Speaker 0>notch. I think that's really powerful. And that's

00:59:49.515 --> 00:59:51.115
<v Speaker 0>only gonna get better over time. Right? Give

00:59:51.115 --> 00:59:53.435
<v Speaker 0>that another six months, another two years, and

00:59:53.435 --> 00:59:54.875
<v Speaker 0>that repository is gonna be huge and just

00:59:54.875 --> 00:59:56.715
<v Speaker 0>have so much more information. So that's a

00:59:56.715 --> 00:59:57.675
<v Speaker 0>very exciting thing.

00:59:58.075 --> 00:59:58.715
<v Speaker 0>Awesome.

00:59:58.980 --> 01:00:01.140
<v Speaker 0>That was great. Aman in the chat saying

01:00:01.140 --> 01:00:02.340
<v Speaker 0>that was a great session as well. I'm

01:00:02.340 --> 01:00:03.380
<v Speaker 0>glad that was helpful.

01:00:03.700 --> 01:00:05.140
<v Speaker 0>I hope you do go and contribute to

01:00:05.140 --> 01:00:06.900
<v Speaker 0>the project. And now is the time for

01:00:06.900 --> 01:00:08.340
<v Speaker 0>sure. There's lots of good things on the

01:00:08.340 --> 01:00:09.940
<v Speaker 0>road map and, yeah,

01:00:10.180 --> 01:00:11.540
<v Speaker 0>a noble cause as well.

01:00:12.444 --> 01:00:14.204
<v Speaker 0>Any last words for me, Tony, or the

01:00:14.204 --> 01:00:15.805
<v Speaker 0>audience before we wrap this up?

01:00:16.525 --> 01:00:18.365
<v Speaker 1>Come give us a star. It helps us

01:00:18.365 --> 01:00:20.845
<v Speaker 1>out. It's shameless plug, but, like, please, it

01:00:20.845 --> 01:00:22.924
<v Speaker 1>it actually does help. So, you know, go

01:00:22.924 --> 01:00:23.805
<v Speaker 1>to GitHub,

01:00:24.125 --> 01:00:26.365
<v Speaker 1>prequel dash dev preq, and give it a

01:00:26.365 --> 01:00:26.605
<v Speaker 1>star.

01:00:27.230 --> 01:00:29.710
<v Speaker 1>We're definitely looking for contributors. But honestly, I

01:00:29.710 --> 01:00:31.309
<v Speaker 1>think we're

01:00:31.309 --> 01:00:32.830
<v Speaker 1>kind of crazy people

01:00:33.230 --> 01:00:35.470
<v Speaker 1>because we're a little obsessed with trying to

01:00:35.470 --> 01:00:36.750
<v Speaker 1>make this world exist.

01:00:37.789 --> 01:00:39.789
<v Speaker 1>We're just really looking for like minded people

01:00:39.789 --> 01:00:42.270
<v Speaker 1>that want to contribute and help. Come join

01:00:42.270 --> 01:00:43.525
<v Speaker 1>us in community Slack.

01:00:44.005 --> 01:00:45.685
<v Speaker 1>We'll do anything and everything to help you

01:00:45.685 --> 01:00:47.605
<v Speaker 1>get started. And David, I'm going to reach

01:00:47.605 --> 01:00:49.445
<v Speaker 1>out and we're going to Don't let me

01:00:49.445 --> 01:00:50.885
<v Speaker 1>discourage you that we already had that feature.

01:00:50.885 --> 01:00:52.725
<v Speaker 1>We'll find something else. You can contribute. We're

01:00:52.725 --> 01:00:53.605
<v Speaker 1>going make it happen.

01:00:54.485 --> 01:00:55.765
<v Speaker 1>Thank you for your time. This is great.

01:00:56.160 --> 01:00:57.760
<v Speaker 0>I mean, I didn't I don't think I

01:00:57.760 --> 01:00:59.680
<v Speaker 0>mentioned this earlier, but I actually

01:00:59.680 --> 01:01:02.079
<v Speaker 0>spent two years working in FluxDB. So time

01:01:02.079 --> 01:01:04.640
<v Speaker 0>series data and correlation. I saw I saw

01:01:04.640 --> 01:01:07.680
<v Speaker 1>it. I understand how valuable it is when

01:01:07.680 --> 01:01:09.725
<v Speaker 0>you can take a series of data and

01:01:09.725 --> 01:01:11.645
<v Speaker 0>as you know, measure the occurrences of something

01:01:11.645 --> 01:01:14.685
<v Speaker 0>over not just seconds, days, but months and

01:01:14.685 --> 01:01:16.445
<v Speaker 0>years, understanding seasonality

01:01:16.445 --> 01:01:18.925
<v Speaker 0>in the data. All of this contributes to

01:01:19.325 --> 01:01:21.005
<v Speaker 0>reliability in the long haul. And I think

01:01:21.005 --> 01:01:22.700
<v Speaker 0>you're on the right If that you're looking

01:01:22.700 --> 01:01:24.940
<v Speaker 0>into how to do these advanced correlations,

01:01:25.099 --> 01:01:26.619
<v Speaker 0>I think will be invaluable to the community

01:01:26.619 --> 01:01:28.619
<v Speaker 0>and to your your, you know, customers in

01:01:28.619 --> 01:01:30.380
<v Speaker 0>the long run as well. So stick on

01:01:30.380 --> 01:01:31.420
<v Speaker 0>that. And if I can help in any

01:01:31.420 --> 01:01:33.099
<v Speaker 0>way, I would love to chat and add

01:01:33.099 --> 01:01:35.965
<v Speaker 0>more. But for today, I think we've covered

01:01:35.965 --> 01:01:37.725
<v Speaker 0>a lot. It's a really cool project. And,

01:01:37.725 --> 01:01:40.605
<v Speaker 0>again, it's not it's not easy to have

01:01:40.605 --> 01:01:42.765
<v Speaker 0>an open source company and make it sustainable.

01:01:42.765 --> 01:01:43.885
<v Speaker 0>So I wish you all the best of

01:01:43.885 --> 01:01:45.645
<v Speaker 0>luck as a noble mission. And to everyone

01:01:45.645 --> 01:01:47.965
<v Speaker 0>watching, contribute, check it out, give them that

01:01:47.965 --> 01:01:51.300
<v Speaker 0>star, and, hopefully, your reliability will be improved.

01:01:51.780 --> 01:01:53.619
<v Speaker 0>So with that, I will say goodbye. Thank

01:01:53.619 --> 01:01:54.740
<v Speaker 0>you so much for your time, Tony. We

01:01:54.740 --> 01:01:56.420
<v Speaker 0>will speak soon. And to everyone watching, have

01:01:56.420 --> 01:01:58.500
<v Speaker 0>a great day. Thank you, David. Adios.
