---
import type { GetStaticPaths, GetStaticPathsResult } from "astro";
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../../layouts/app.astro";
import { supabase } from "../../lib/supabase";

interface Author {
	github_handle: string;
	name: string | null;
	avatar_url: string | null;
}

type Authors = {
	[key: string]: Author;
};

type Props = {
	article: CollectionEntry<"blog">;
	authors: Map<string, Author>;
};

export const getStaticPaths: GetStaticPaths =
	async (): Promise<GetStaticPathsResult> => {
		const blogEntries = await getCollection("blog");

		console.debug(blogEntries.map((entry) => entry.data.authors).flat());

		const people = await supabase
			.from("people")
			.select()
			.in("github_handle", blogEntries.map((entry) => entry.data.authors).flat());

			console.debug(people);

		const authors = !people.data
			? {}
			: people.data.reduce((acc, author) => {
					acc[author.github_handle] = author;
					return acc;
			  }, {} as Authors);

		console.debug(authors);

		return blogEntries.map((article) => {
			return {
				params: {
					slug: article.slug,
				},
				props: {
					article,
					authors,
				},
			};
		});
	};

const { article, authors } = Astro.props;
const { Content } = await article.render();
---

<Layout>
	<article
		class="mx-auto w-full px-16 py-8 format format-sm sm:format-base lg:format-lg format-green dark:format-invert"
	>
		<h1>{article.data.title}</h1>

		<header class="mb-4 lg:mb-6 not-format">
			<address class="flex items-center mb-6 not-italic">
				<div
					class="inline-flex items-center mr-3 text-sm text-gray-900 dark:text-white"
				>
					<img
						class="mr-4 w-16 h-16 rounded-full"
						src={article.data.authors[0] &&
						authors.hasOwnProperty(article.data.authors[0])
							? authors[article.data.authors[0]].avatar_url
							: "https://pbs.twimg.com/profile_images/1618711146260832262/P7jcoO32_400x400.jpg"}
					/>
					<div>
						<a
							href="#"
							rel="author"
							class="text-xl font-bold text-gray-900 dark:text-white"
							>{
								article.data.authors[0] &&
								authors.hasOwnProperty(article.data.authors[0])
									? authors[article.data.authors[0]].name
									: "Rawkode Academy"
							}</a
						>
						<p class="text-base text-gray-500 dark:text-gray-400">
							Work in Progress
						</p>
						<p class="text-base text-gray-500 dark:text-gray-400">
							Published at <time
								itemprop="datePublished"
								datetime={article.data.publishedAt.toString()}
								>{article.data.publishedAt.toDateString()}</time
							>
						</p>
						{
							article.data.updatedAt && (
								<p class="text-base text-gray-500 dark:text-gray-400">
									Updated at{" "}
									<time
										itemprop="dateUpdated"
										datetime={article.data.updatedAt.toString()}
									>
										{article.data.updatedAt.toDateString()}
									</time>
								</p>
							)
						}
					</div>
				</div>
			</address>
		</header>
		<Content />
	</article>
</Layout>
