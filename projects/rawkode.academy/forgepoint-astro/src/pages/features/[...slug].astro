---
import { getCollection } from "astro:content";
import AppLayout from "../../components/AppLayout.astro";

export async function getStaticPaths() {
	const features = await getCollection("features");
	return features.map((feature) => ({
		params: { slug: feature.slug },
		props: { feature },
	}));
}

const { feature } = Astro.props;
const { Content } = await feature.render();

const stories = await getCollection("stories");
const relatedStories = stories.filter((s) => s.data.featureId === feature.slug);

const priorityColors = {
	must: "priority-must",
	should: "priority-should",
	could: "priority-could",
	wont: "priority-wont",
};

const sizeStyles = {
	XS: "size-xs",
	S: "size-s",
	M: "size-m",
	L: "size-l",
	XL: "size-xl",
};
---

<AppLayout title={`${feature.data.title} - ForgePoint`}>
	<style>
		.feature-detail {
			max-width: 800px;
			margin: 0 auto;
		}

		.breadcrumb {
			display: flex;
			align-items: center;
			gap: 8px;
			font-size: 14px;
			color: #8b8b8d;
			margin-bottom: 32px;
		}

		.breadcrumb a {
			color: #8b8b8d;
			text-decoration: none;
			transition: color 0.1s ease;
		}

		.breadcrumb a:hover {
			color: #e1e1e3;
		}

		.breadcrumb-separator {
			color: #4b4b4d;
		}

		.feature-header {
			margin-bottom: 32px;
		}

		.header-row {
			display: flex;
			align-items: flex-start;
			justify-content: space-between;
			gap: 16px;
			margin-bottom: 16px;
		}

		.feature-title {
			font-size: 32px;
			font-weight: 600;
			color: #fff;
			line-height: 1.2;
		}

		.feature-badges {
			display: flex;
			gap: 8px;
			flex-shrink: 0;
		}

		.priority-badge {
			padding: 6px 16px;
			border-radius: 6px;
			font-size: 12px;
			font-weight: 600;
			text-transform: uppercase;
			letter-spacing: 0.05em;
		}

		.priority-must {
			background-color: rgba(239, 68, 68, 0.2);
			color: #ef4444;
		}

		.priority-should {
			background-color: rgba(245, 158, 11, 0.2);
			color: #f59e0b;
		}

		.priority-could {
			background-color: rgba(59, 130, 246, 0.2);
			color: #3b82f6;
		}

		.priority-wont {
			background-color: rgba(107, 114, 128, 0.2);
			color: #6b7280;
		}

		.size-badge {
			padding: 6px 16px;
			border-radius: 6px;
			font-size: 12px;
			font-weight: 600;
			background-color: #1a1a1d;
			border: 1px solid #2a2a2d;
			color: #a8a8a9;
		}

		.size-xs { color: #60a5fa; border-color: #60a5fa; }
		.size-s { color: #3b82f6; border-color: #3b82f6; }
		.size-m { color: #2563eb; border-color: #2563eb; }
		.size-l { color: #1d4ed8; border-color: #1d4ed8; }
		.size-xl { color: #1e40af; border-color: #1e40af; }

		.feature-description {
			font-size: 16px;
			color: #8b8b8d;
			line-height: 1.6;
			margin-bottom: 24px;
		}

		.enhancement-box {
			background-color: #0e0e10;
			border: 1px solid #1f1f23;
			border-radius: 8px;
			padding: 24px;
		}

		.enhancement-title {
			font-size: 16px;
			font-weight: 600;
			color: #5e6ad2;
			margin-bottom: 8px;
		}

		.enhancement-text {
			font-size: 15px;
			color: #e1e1e3;
			line-height: 1.6;
		}

		.section {
			margin-bottom: 40px;
		}

		.section-title {
			font-size: 20px;
			font-weight: 600;
			color: #fff;
			margin-bottom: 16px;
		}

		.dependencies-list {
			display: grid;
			gap: 12px;
		}

		.dependency-item {
			display: flex;
			align-items: center;
			gap: 16px;
			padding: 16px;
			background-color: #0e0e10;
			border: 1px solid #1f1f23;
			border-radius: 6px;
		}

		.dependency-type {
			font-size: 14px;
			font-weight: 600;
			color: #5e6ad2;
			text-transform: capitalize;
			min-width: 100px;
		}

		.dependency-id {
			flex: 1;
			font-size: 14px;
			color: #e1e1e3;
		}

		.dependency-duration {
			font-size: 12px;
			color: #6b6b6d;
		}

		.stories-list {
			display: grid;
			gap: 16px;
		}

		.story-card {
			background-color: #0e0e10;
			border: 1px solid #1f1f23;
			border-radius: 8px;
			padding: 20px;
			transition: all 0.2s ease;
		}

		.story-card:hover {
			background-color: #131316;
			border-color: #2a2a2d;
		}

		.story-header {
			display: flex;
			align-items: flex-start;
			justify-content: space-between;
			gap: 16px;
			margin-bottom: 12px;
		}

		.story-link {
			color: #e1e1e3;
			text-decoration: none;
			font-size: 16px;
			font-weight: 500;
			transition: color 0.1s ease;
		}

		.story-link:hover {
			color: #5e6ad2;
		}

		.story-badges {
			display: flex;
			gap: 6px;
			flex-shrink: 0;
		}

		.story-priority {
			padding: 4px 8px;
			border-radius: 4px;
			font-size: 11px;
			font-weight: 600;
			text-transform: uppercase;
			letter-spacing: 0.05em;
		}

		.story-size {
			padding: 4px 8px;
			border-radius: 4px;
			font-size: 11px;
			font-weight: 600;
			background-color: #1a1a1d;
			border: 1px solid #2a2a2d;
			color: #a8a8a9;
		}

		.story-description {
			font-size: 14px;
			color: #8b8b8d;
			margin-bottom: 8px;
			line-height: 1.5;
		}

		.story-format {
			font-size: 12px;
			color: #6b6b6d;
			line-height: 1.4;
		}

		.prose {
			color: #e1e1e3;
		}

		.prose h1,
		.prose h2,
		.prose h3,
		.prose h4,
		.prose h5,
		.prose h6 {
			color: #fff;
			font-weight: 600;
			margin-top: 32px;
			margin-bottom: 16px;
		}

		.prose p {
			line-height: 1.7;
			margin-bottom: 16px;
		}

		.prose ul,
		.prose ol {
			margin-bottom: 16px;
			padding-left: 24px;
		}

		.prose li {
			margin-bottom: 8px;
		}

		.prose code {
			background-color: #1a1a1d;
			border: 1px solid #2a2a2d;
			border-radius: 4px;
			padding: 2px 6px;
			font-size: 14px;
			color: #e1e1e3;
		}

		.prose pre {
			background-color: #0e0e10;
			border: 1px solid #1f1f23;
			border-radius: 8px;
			padding: 16px;
			overflow-x: auto;
			margin-bottom: 16px;
		}

		.prose pre code {
			background: none;
			border: none;
			padding: 0;
		}

		.prose a {
			color: #5e6ad2;
			text-decoration: none;
			transition: color 0.1s ease;
		}

		.prose a:hover {
			color: #7b87e3;
			text-decoration: underline;
		}
	</style>

	<div class="feature-detail animate-fade-in">
		<nav class="breadcrumb">
			<a href="/features">Features</a>
			<span class="breadcrumb-separator">/</span>
			<span>{feature.data.title}</span>
		</nav>
		
		<article>
			<header class="feature-header">
				<div class="header-row">
					<h1 class="feature-title">{feature.data.title}</h1>
					<div class="feature-badges">
						<span class={`priority-badge ${priorityColors[feature.data.priority]}`}>
							{feature.data.priority}
						</span>
						{feature.data.size && (
							<span class={`size-badge ${sizeStyles[feature.data.size]}`}>
								{feature.data.size}
							</span>
						)}
					</div>
				</div>
				
				<p class="feature-description">{feature.data.description}</p>
				
				<div class="enhancement-box">
					<h2 class="enhancement-title">Enhancement</h2>
					<p class="enhancement-text">{feature.data.enhancement}</p>
				</div>
			</header>
			
			{feature.data.dependencies && feature.data.dependencies.length > 0 && (
				<section class="section">
					<h2 class="section-title">Dependencies</h2>
					<div class="dependencies-list">
						{feature.data.dependencies.map((dep) => (
							<div class="dependency-item">
								<span class="dependency-type">{dep.type.replace('-', ' ')}</span>
								<span class="dependency-id">{dep.id}</span>
								{dep.duration && (
									<span class="dependency-duration">Duration: {dep.duration}</span>
								)}
							</div>
						))}
					</div>
				</section>
			)}
			
			{relatedStories.length > 0 && (
				<section class="section">
					<h2 class="section-title">Related Stories</h2>
					<div class="stories-list">
						{relatedStories.map((story) => (
							<div class="story-card">
								<div class="story-header">
									<a href={`/stories/${story.slug}`} class="story-link">
										{story.data.title}
									</a>
									<div class="story-badges">
										<span class={`story-priority ${priorityColors[story.data.priority]}`}>
											{story.data.priority}
										</span>
										{story.data.size && (
											<span class={`story-size ${sizeStyles[story.data.size]}`}>
												{story.data.size}
											</span>
										)}
									</div>
								</div>
								<p class="story-description">{story.data.description}</p>
								<div class="story-format">
									As a {story.data.asA}, I want {story.data.iWant}
								</div>
							</div>
						))}
					</div>
				</section>
			)}
			
			<section class="section prose">
				<h2 class="section-title">Additional Details</h2>
				<Content />
			</section>
		</article>
	</div>
</AppLayout>