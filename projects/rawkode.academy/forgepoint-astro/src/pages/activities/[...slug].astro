---
import { getCollection } from "astro:content";
import AppLayout from "../../components/AppLayout.astro";

export async function getStaticPaths() {
	const activities = await getCollection("activities");
	return activities.map((activity) => ({
		params: { slug: activity.slug },
		props: { activity },
	}));
}

const { activity } = Astro.props;
const { Content } = await activity.render();

const stories = await getCollection("stories");
const personas = await getCollection("personas");

const relatedStories = stories.filter(
	(s) => s.data.activityId === activity.slug,
);
const relatedPersonas = activity.data.personas
	? personas.filter((p) => activity.data.personas.includes(p.slug))
	: [];

const priorityColors = {
	must: "priority-must",
	should: "priority-should",
	could: "priority-could",
	wont: "priority-wont",
};
---

<AppLayout title={`${activity.data.title} - ForgePoint`}>
	<style>
		.activity-detail {
			max-width: 800px;
			margin: 0 auto;
		}

		.breadcrumb {
			display: flex;
			align-items: center;
			gap: 8px;
			font-size: 14px;
			color: #8b8b8d;
			margin-bottom: 32px;
		}

		.breadcrumb a {
			color: #8b8b8d;
			text-decoration: none;
			transition: color 0.1s ease;
		}

		.breadcrumb a:hover {
			color: #e1e1e3;
		}

		.breadcrumb-separator {
			color: #4b4b4d;
		}

		.activity-header {
			margin-bottom: 32px;
		}

		.activity-order {
			display: flex;
			align-items: center;
			gap: 16px;
			margin-bottom: 16px;
		}

		.order-number {
			font-size: 48px;
			font-weight: 700;
			color: #5e6ad2;
			line-height: 1;
		}

		.activity-title {
			font-size: 32px;
			font-weight: 600;
			color: #fff;
			line-height: 1.2;
		}

		.activity-description {
			font-size: 16px;
			color: #8b8b8d;
			line-height: 1.6;
			margin-bottom: 24px;
		}

		.outcome-box {
			background-color: #0e0e10;
			border: 1px solid #1f1f23;
			border-radius: 8px;
			padding: 24px;
		}

		.outcome-title {
			font-size: 16px;
			font-weight: 600;
			color: #5e6ad2;
			margin-bottom: 8px;
		}

		.outcome-text {
			font-size: 15px;
			color: #e1e1e3;
			line-height: 1.6;
		}

		.section {
			margin-bottom: 40px;
		}

		.section-title {
			font-size: 20px;
			font-weight: 600;
			color: #fff;
			margin-bottom: 16px;
		}

		.metrics-grid {
			display: grid;
			grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
			gap: 16px;
		}

		.metric-card {
			background-color: #0e0e10;
			border: 1px solid #1f1f23;
			border-radius: 8px;
			padding: 20px;
		}

		.metric-name {
			font-size: 15px;
			font-weight: 500;
			color: #e1e1e3;
			margin-bottom: 8px;
		}

		.metric-target {
			font-size: 14px;
			color: #8b8b8d;
		}

		.personas-grid {
			display: grid;
			grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
			gap: 16px;
		}

		.persona-card {
			background-color: #0e0e10;
			border: 1px solid #1f1f23;
			border-radius: 8px;
			padding: 20px;
			transition: all 0.2s ease;
			cursor: pointer;
		}

		.persona-card:hover {
			background-color: #131316;
			border-color: #2a2a2d;
			transform: translateY(-2px);
		}

		.persona-link {
			color: #e1e1e3;
			text-decoration: none;
		}

		.persona-title {
			font-size: 16px;
			font-weight: 500;
			margin-bottom: 8px;
		}

		.persona-description {
			font-size: 14px;
			color: #8b8b8d;
			line-height: 1.5;
		}

		.persona-role {
			font-size: 12px;
			color: #6b6b6d;
			margin-top: 8px;
		}

		.stories-list {
			display: grid;
			gap: 16px;
		}

		.story-card {
			background-color: #0e0e10;
			border: 1px solid #1f1f23;
			border-radius: 8px;
			padding: 20px;
			transition: all 0.2s ease;
		}

		.story-card:hover {
			background-color: #131316;
			border-color: #2a2a2d;
		}

		.story-header {
			display: flex;
			align-items: flex-start;
			justify-content: space-between;
			gap: 16px;
			margin-bottom: 12px;
		}

		.story-link {
			color: #e1e1e3;
			text-decoration: none;
			font-size: 16px;
			font-weight: 500;
			transition: color 0.1s ease;
		}

		.story-link:hover {
			color: #5e6ad2;
		}

		.priority-badge {
			padding: 4px 12px;
			border-radius: 6px;
			font-size: 12px;
			font-weight: 600;
			text-transform: uppercase;
			letter-spacing: 0.05em;
		}

		.priority-must {
			background-color: rgba(239, 68, 68, 0.2);
			color: #ef4444;
		}

		.priority-should {
			background-color: rgba(245, 158, 11, 0.2);
			color: #f59e0b;
		}

		.priority-could {
			background-color: rgba(59, 130, 246, 0.2);
			color: #3b82f6;
		}

		.priority-wont {
			background-color: rgba(107, 114, 128, 0.2);
			color: #6b7280;
		}

		.story-description {
			font-size: 14px;
			color: #8b8b8d;
			margin-bottom: 12px;
			line-height: 1.5;
		}

		.story-format {
			background-color: #1a1a1d;
			border-radius: 6px;
			padding: 12px;
			font-size: 13px;
			line-height: 1.6;
			color: #e1e1e3;
		}

		.story-format-label {
			font-weight: 600;
			color: #5e6ad2;
		}

		.prose {
			color: #e1e1e3;
		}

		.prose h1,
		.prose h2,
		.prose h3,
		.prose h4,
		.prose h5,
		.prose h6 {
			color: #fff;
			font-weight: 600;
			margin-top: 32px;
			margin-bottom: 16px;
		}

		.prose p {
			line-height: 1.7;
			margin-bottom: 16px;
		}

		.prose ul,
		.prose ol {
			margin-bottom: 16px;
			padding-left: 24px;
		}

		.prose li {
			margin-bottom: 8px;
		}

		.prose code {
			background-color: #1a1a1d;
			border: 1px solid #2a2a2d;
			border-radius: 4px;
			padding: 2px 6px;
			font-size: 14px;
			color: #e1e1e3;
		}

		.prose pre {
			background-color: #0e0e10;
			border: 1px solid #1f1f23;
			border-radius: 8px;
			padding: 16px;
			overflow-x: auto;
			margin-bottom: 16px;
		}

		.prose pre code {
			background: none;
			border: none;
			padding: 0;
		}

		.prose a {
			color: #5e6ad2;
			text-decoration: none;
			transition: color 0.1s ease;
		}

		.prose a:hover {
			color: #7b87e3;
			text-decoration: underline;
		}
	</style>

	<div class="activity-detail animate-fade-in">
		<nav class="breadcrumb">
			<a href="/activities">Activities</a>
			<span class="breadcrumb-separator">/</span>
			<span>{activity.data.title}</span>
		</nav>
		
		<article>
			<header class="activity-header">
				<div class="activity-order">
					<span class="order-number">{activity.data.order}</span>
					<h1 class="activity-title">{activity.data.title}</h1>
				</div>
				
				<p class="activity-description">{activity.data.description}</p>
				
				<div class="outcome-box">
					<h2 class="outcome-title">Expected Outcome</h2>
					<p class="outcome-text">{activity.data.outcome}</p>
				</div>
			</header>
			
			{activity.data.metrics && activity.data.metrics.length > 0 && (
				<section class="section">
					<h2 class="section-title">Success Metrics</h2>
					<div class="metrics-grid">
						{activity.data.metrics.map((metric) => (
							<div class="metric-card">
								<h3 class="metric-name">{metric.name}</h3>
								<p class="metric-target">Target: {metric.target}</p>
							</div>
						))}
					</div>
				</section>
			)}
			
			{relatedPersonas.length > 0 && (
				<section class="section">
					<h2 class="section-title">Related Personas</h2>
					<div class="personas-grid">
						{relatedPersonas.map((persona) => (
							<a href={`/personas/${persona.slug}`} class="persona-link">
								<div class="persona-card">
									<h3 class="persona-title">{persona.data.title}</h3>
									<p class="persona-description">{persona.data.description}</p>
									{persona.data.role && (
										<p class="persona-role">Role: {persona.data.role}</p>
									)}
								</div>
							</a>
						))}
					</div>
				</section>
			)}
			
			{relatedStories.length > 0 && (
				<section class="section">
					<h2 class="section-title">User Stories</h2>
					<div class="stories-list">
						{relatedStories.map((story) => (
							<div class="story-card">
								<div class="story-header">
									<a href={`/stories/${story.slug}`} class="story-link">
										{story.data.title}
									</a>
									<span class={`priority-badge ${priorityColors[story.data.priority]}`}>
										{story.data.priority}
									</span>
								</div>
								<p class="story-description">{story.data.description}</p>
								<div class="story-format">
									<span class="story-format-label">As a</span> {story.data.asA},
									<span class="story-format-label">I want</span> {story.data.iWant}
								</div>
							</div>
						))}
					</div>
				</section>
			)}
			
			<section class="section prose">
				<h2 class="section-title">Additional Details</h2>
				<Content />
			</section>
		</article>
	</div>
</AppLayout>