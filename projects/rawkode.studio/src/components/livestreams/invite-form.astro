---
import { Alert, AlertDescription, AlertTitle } from "@/components/shadcn/alert";
import type { OidcStandardClaimsWithRoles } from "@/lib/security";
import { Link, RefreshCw, Video } from "lucide-react";
import RoomJoinForm from "./room-join-form";

interface Props {
	roomName: string;
	roomExists: boolean;
	user: OidcStandardClaimsWithRoles | undefined;
	token: string | null;
}

const { roomName, roomExists, user, token } = Astro.props;
---

<div id="join-ui" class="mt-6">
  {!roomExists && (
    <Alert variant="destructive">
      <Link className="size-5 mr-2" />
      <AlertTitle>Room Not Available</AlertTitle>
      <AlertDescription>
        This livestream may have ended or doesn't exist.
      </AlertDescription>
    </Alert>
  )}

  {roomExists && !user && <RoomJoinForm roomName={roomName} skipRoomCheck={true} client:load />}

  {roomExists && user && !token && (
    <div class="p-4 border border-amber-300 bg-amber-50 text-amber-700 rounded-lg flex items-center gap-3">
      <div class="shrink-0 size-10 rounded-full bg-amber-100 flex items-center justify-center">
        <Link className="size-5" />
      </div>
      <div>
        <p class="font-medium">Token Generation Failed</p>
        <p class="text-sm text-amber-600">Please refresh or try again.</p>
      </div>
    </div>
  )}

  {roomExists && user && token && (
    <div class="p-4 border border-green-300 bg-green-50 text-green-700 rounded-lg flex items-center gap-3" id="joining-message">
      <div class="shrink-0 size-10 rounded-full bg-green-100 flex items-center justify-center">
        <Video className="size-5" />
      </div>
      <div>
        <p class="font-medium">Ready to Join</p>
        <p class="text-sm text-green-600">
          You'll join as {user.preferred_username || user.name || 'Guest'}
        </p>
      </div>
    </div>
  )}

  {roomExists && user && token && (
    <div class="mt-8">
      <button
        type="button"
        class="w-full flex justify-center items-center gap-2 py-3 px-4 bg-primary text-primary-foreground hover:bg-primary/90 font-medium rounded-lg transition-colors"
        onclick={`
          // Clear existing tokens first
          sessionStorage.removeItem("livekit-token");
          sessionStorage.removeItem("livekit-room");

          // Store token in sessionStorage
          sessionStorage.setItem("livekit-token", "${token}");
          sessionStorage.setItem("livekit-room", "${roomName}");

          console.log("Stored token and redirecting to watch page");

          // Navigate to watch page
          window.location.href = "/watch/${roomName}";
        `}
      >
        <Video className="size-5 mr-2" />
        Join Stream
      </button>
    </div>
  )}

  {roomExists && user && !token && (
    <form action={`/invite/${roomName}`} method="get" class="mt-8">
      <button
        type="submit"
        class="w-full flex justify-center items-center gap-2 py-3 px-4 bg-destructive text-destructive-foreground hover:bg-destructive/90 font-medium rounded-lg transition-colors"
      >
        <RefreshCw className="size-5 mr-2" />
        Retry Connection
      </button>
    </form>
  )}
</div>
