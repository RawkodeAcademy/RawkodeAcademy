---
import LivekitRoom from "./livekit-room";

interface Props {
  serverUrl: string;
  roomName: string;
  token: string | null;
  user: any;
  roomExists: boolean;
}

const { serverUrl, roomName, token, user, roomExists } = Astro.props;

// Check if user has director role - at compile time
const isDirector = user && user.roles && Array.isArray(user.roles) && user.roles.includes('director');
---

<div id="livestream-container" class="livestream-container">
  <LivekitRoom
    serverUrl={serverUrl}
    isDirector={isDirector}
    client:only="react"
    onLeaveRoom={(roomName: string, isDirector: boolean) => {
      console.log("User left room:", roomName, isDirector ? "as director" : "as normal user");

      // For directors, keep the token for join button
      // For normal users, clear tokens so they don't auto-join
      if (isDirector) {
        console.log("Director left room, keeping token for join");
      } else {
        console.log("Normal user left room, clearing tokens");
        // Clear tokens from sessionStorage to prevent auto-join
        sessionStorage.removeItem("livekit-token");
        sessionStorage.removeItem("livekit-room");
        // Set a flag to prevent auto-join for this session
        sessionStorage.setItem("user-left-voluntarily", "true");
      }

      // Hide livestream container and show the invitation UI
      const livestreamContainer = document.getElementById('livestream-container');
      const invitationContainer = document.getElementById('invitation-container');

      if (livestreamContainer) {
        livestreamContainer.classList.remove('active');
      }

      if (invitationContainer) {
        invitationContainer.style.display = 'flex';
      }

      // Trigger showing the join button (only directors will see it)
      document.dispatchEvent(new CustomEvent('show-join-button'));
    }}
  />
</div>

<script is:inline define:vars={{ roomName, token, user, roomExists, isDirector }}>
  // Preload tokens into sessionStorage immediately when this component loads
  // This ensures LivekitRoom component can read them when it initializes
  function preloadTokens() {
    if (token && roomName) {
      console.log("Preloading tokens for room:", roomName);
      sessionStorage.setItem("livekit-token", token);
      sessionStorage.setItem("livekit-room", roomName);
    }
  }

  // Run preload immediately
  preloadTokens();

  // Function to handle joining the livestream
  function joinLivestream() {
    // Check for token in component props first, then in sessionStorage
    const tokenToUse = token || sessionStorage.getItem("livekit-token");
    const roomNameToUse = roomName || sessionStorage.getItem("livekit-room");

    if (!tokenToUse || !roomNameToUse) {
      console.error("Cannot join livestream: No token or room name available");
      return;
    }

    console.log("Joining livestream with token:", !!tokenToUse);

    // Make sure tokens are set for the LivekitRoom component
    sessionStorage.setItem("livekit-token", tokenToUse);
    sessionStorage.setItem("livekit-room", roomNameToUse);

    // Clear the voluntary leave flag when explicitly joining
    sessionStorage.removeItem("user-left-voluntarily");

    // Trigger refresh event to make sure LivekitRoom component loads the tokens
    document.dispatchEvent(new CustomEvent('livekit-refresh-tokens'));

    // Hide invitation UI and show livestream
    const invitationContainer = document.getElementById('invitation-container');
    const livestreamContainer = document.getElementById('livestream-container');

    if (invitationContainer) {
      invitationContainer.style.display = 'none';
    }

    if (livestreamContainer) {
      // Apply a small delay before showing the livestream
      // This gives the LivekitRoom component time to initialize with the tokens
      setTimeout(() => {
        livestreamContainer.classList.add('active');
      }, 300); // Increased delay to ensure token loading completes
    }
  }

  // Listen for the initiate-join event (from the room-join-form or rejoin button)
  document.addEventListener('initiate-join', () => {
    console.log("Received initiate-join event");
    joinLivestream();
  });

  // Auto-join if we have a token and user is authenticated
  document.addEventListener('DOMContentLoaded', () => {
    // Check for tokens in sessionStorage even if we don't have props
    const storedToken = sessionStorage.getItem("livekit-token");
    const storedRoom = sessionStorage.getItem("livekit-room");

    // Check if user left voluntarily
    const userLeftVoluntarily = sessionStorage.getItem("user-left-voluntarily") === "true";

    // Only auto-join if:
    // 1. Room exists
    // 2. User is authenticated OR we have a token in storage
    // 3. We have a token (from props or storage)
    // 4. User is NOT a director (directors get the join button by default)
    // 5. User did NOT leave voluntarily
    const hasValidToken = token || storedToken;
    const canAutoJoin = roomExists && hasValidToken && (!isDirector) && !userLeftVoluntarily;

    if (canAutoJoin) {
      console.log("Auto-joining room:", roomName || storedRoom);
      // Use a delay to ensure UI is ready
      setTimeout(() => {
        joinLivestream();
      }, 800); // Increased delay to ensure DOM is fully loaded
    }
  });
</script>

<style>
  /* Full-screen livestream container */
  .livestream-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 20;
    display: none;
  }

  .livestream-container.active {
    display: block;
  }
</style>
