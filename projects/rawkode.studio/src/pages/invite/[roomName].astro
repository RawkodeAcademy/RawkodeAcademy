---
import { actions } from "astro:actions";
import '@/styles/global.css';
import { roomClientService } from "@/lib/livekit";
import HyperspaceStarfield from '@/components/effects/HyperspaceStarfield.astro';
import InviteForm from '@/components/livestreams/invite-form.astro';
import BaseLayout from '@/layouts/BaseLayout.astro';

// Get the roomName from the URL parameter
const { roomName } = Astro.params;

// Redirect if no room name is provided
if (!roomName) {
  return Astro.redirect("/");
}

// Check if the room actually exists
let roomExists = false;
try {
  const rooms = await roomClientService.listRooms();
  roomExists = rooms.some(room => room.name === roomName);
} catch (error) {
  console.error("Error checking if room exists:", error);
  // Continue anyway, to show the "room not available" message
}

// Check if user is authenticated
const user = Astro.locals.user;

// Generate a token if the user is authenticated
let token = null;
if (user && roomExists) {
  try {
    // Generate token
    const response = await Astro.callAction(actions.generateTokenFromInvite, {
      roomName,
      participantName: user?.preferred_username || user?.name || undefined,
    });

    // Check if the response contains a data property (the token string)
    if (response && response.data && typeof response.data === 'string') {
      token = response.data;
    } else if (typeof response === 'string') {
      // Sometimes the action returns the token directly
      token = response;
    }

    console.log("Generated token for user on invite page", { hasToken: !!token });
  } catch (error) {
    console.error("Error generating token on invite page:", error);
  }
}

// No token generation needed here - it will happen on the watch page
---

<BaseLayout title={`Join ${roomName} - Live Stream`}>
  <!-- Space background with stars -->
  <HyperspaceStarfield />

  <!-- Invitation UI Container -->
  <div id="invitation-container" class="relative min-h-screen flex flex-col">
    <!-- Content -->
    <div class="flex-1 flex items-center justify-center px-4 py-12 z-10">
      <div class="w-full max-w-md backdrop-blur-md rounded-lg p-6 border border-border/50 bg-background/80 shadow-lg">
        <!-- Header with room name -->
        <div class="mb-4">
          <h1 class="text-2xl font-bold text-center">{roomName}</h1>
          <p class="mt-2 text-center text-muted-foreground">
            You've been invited to join this live stream
          </p>
        </div>

        <!-- Join form and status -->
        <InviteForm
          roomName={roomName}
          roomExists={roomExists}
          user={user}
          token={token}
        />

        <!-- Footer with additional info -->
        <p class="mt-6 text-center text-xs text-muted-foreground">
          Powered by RawkodeStudio &copy; {new Date().getFullYear()}
        </p>
      </div>
    </div>
  </div>

  <script is:inline define:vars={{ roomName }}>
    // Clear any tokens for this room if they exist
    // This ensures we don't have stale tokens when coming back to the invite page
    const storedRoomName = sessionStorage.getItem("livekit-room");

    if (storedRoomName === roomName) {
      console.log("Clearing existing tokens for room:", roomName);
      sessionStorage.removeItem("livekit-token");
      sessionStorage.removeItem("livekit-room");
    }
  </script>

  <!-- Travel Indicator UI -->
  <div
    id="travel-indicator"
    class="fixed bottom-5 right-5 bg-gray-900/80 backdrop-blur-sm p-3 rounded-lg shadow-lg border border-gray-700/50 text-xs text-gray-300 space-y-1 transition-opacity duration-500 ease-out opacity-0 pointer-events-none"
    style="z-index: 100;"
    data-visible="false"
  >
    <!-- Blinking Heading -->
    <h4 id="travel-indicator-heading" class="text-center font-semibold text-amber-400 text-sm mb-1 font-mono">
      Gate Activity Detected
    </h4>

    <!-- Slot 1 -->
    <div class="travel-slot border-t border-gray-700/30 pt-1 mt-1" style="display: none;">
      <div class="flex justify-between items-center">
        <span class="travel-start-name font-mono text-blue-300/90"></span>
        <span class="mx-2 text-gray-500">&rarr;</span>
        <span class="travel-end-name font-mono text-blue-300/90"></span>
      </div>
      <div class="travel-visual relative w-40 h-2 bg-black/30 rounded-full overflow-hidden mx-auto">
         <div class="travel-indicator-line"></div>
         <div class="travel-indicator-dot"></div>
      </div>
    </div>

    <!-- Slot 2 -->
    <div class="travel-slot border-t border-gray-700/30 pt-1 mt-1" style="display: none;">
      <div class="flex justify-between items-center">
        <span class="travel-start-name font-mono text-blue-300/90"></span>
        <span class="mx-2 text-gray-500">&rarr;</span>
        <span class="travel-end-name font-mono text-blue-300/90"></span>
      </div>
      <div class="travel-visual relative w-40 h-2 bg-black/30 rounded-full overflow-hidden mx-auto">
         <div class="travel-indicator-line"></div>
         <div class="travel-indicator-dot"></div>
      </div>
    </div>

    <!-- Slot 3 -->
    <div class="travel-slot border-t border-gray-700/30 pt-1 mt-1" style="display: none;">
      <div class="flex justify-between items-center">
        <span class="travel-start-name font-mono text-blue-300/90"></span>
        <span class="mx-2 text-gray-500">&rarr;</span>
        <span class="travel-end-name font-mono text-blue-300/90"></span>
      </div>
      <div class="travel-visual relative w-40 h-2 bg-black/30 rounded-full overflow-hidden mx-auto">
         <div class="travel-indicator-line"></div>
         <div class="travel-indicator-dot"></div>
      </div>
    </div>
  </div>
</BaseLayout>
